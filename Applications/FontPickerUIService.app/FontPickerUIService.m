uint64_t type metadata accessor for _UIFontPickerRecentsView(uint64_t a1)
{
  return sub_1000050B8(a1, (uint64_t *)&unk_1000982C8, (uint64_t)&nominal type descriptor for _UIFontPickerRecentsView);
}

uint64_t sub_100002B98(uint64_t a1)
{
  const char *v2;

  v2 = "\b";
  return swift_initClassMetadata2(a1, 0, 1, &v2, a1 + qword_10009B370);
}

char *sub_100002BE0()
{
  void *v0;
  objc_class *ObjectType;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *result;
  char *v20;
  id v21;
  id v22;
  id v23;
  uint64_t KeyPath;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;

  ObjectType = (objc_class *)swift_getObjectType(v0);
  type metadata accessor for FontPickerRecentsView(0);
  v2 = ((uint64_t (*)(void))__chkstk_darwin)();
  v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v2);
  v7 = (char *)&v30 - v6;
  __chkstk_darwin(v5);
  v9 = (char *)&v30 - v8;
  v10 = type metadata accessor for FontPickerRecentsViewState(0);
  v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  v12 = v0;
  sub_1000051F0();
  v13 = swift_retain(v11);
  sub_100002ECC(v13, (uint64_t)v9);

  sub_10000920C((uint64_t)v9, (uint64_t)v7, type metadata accessor for FontPickerRecentsView);
  v14 = (char *)objc_allocWithZone(ObjectType);
  *(_QWORD *)&v14[qword_1000982C0] = 0;
  sub_10000920C((uint64_t)v7, (uint64_t)v4, type metadata accessor for FontPickerRecentsView);
  v15 = (char *)UIHostingController.init(rootView:)(v4);
  sub_100009250((uint64_t)v7, type metadata accessor for FontPickerRecentsView);
  v16 = swift_getObjectType(v12);
  swift_deallocPartialClassInstance(v12, v16, 16, 7);
  v17 = *(_QWORD *)&v15[qword_1000982C0];
  *(_QWORD *)&v15[qword_1000982C0] = v11;
  swift_retain(v11);
  v18 = v15;
  swift_release(v17);
  result = (char *)objc_msgSend(v18, "view");
  if (result)
  {
    v20 = result;
    v21 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
    objc_msgSend(v20, "setBackgroundColor:", v21);

    v22 = objc_msgSend(v18, "traitCollection");
    v23 = objc_msgSend(v22, "userInterfaceIdiom");

    KeyPath = swift_getKeyPath(&unk_100073518);
    v25 = swift_getKeyPath(&unk_100073540);
    v31 = v23;
    swift_retain(v11);
    static Published.subscript.setter(&v31, v11, KeyPath, v25);
    v26 = objc_msgSend(v18, "traitCollection");
    v27 = objc_msgSend(v26, "preferredContentSizeCategory");

    v28 = swift_getKeyPath(&unk_100073670);
    v29 = swift_getKeyPath(&unk_100073698);
    v31 = v27;
    swift_retain(v11);
    static Published.subscript.setter(&v31, v11, v28, v29);
    swift_release(v11);

    sub_100009250((uint64_t)v9, type metadata accessor for FontPickerRecentsView);
    return v18;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100002ECC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  NSString v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  NSString v26;
  id v27;
  id v28;
  id v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[2];
  __int128 v38;
  uint64_t v39;

  v4 = (int *)type metadata accessor for FontPickerRecentsView(0);
  v5 = (_QWORD *)(a2 + v4[5]);
  *v5 = swift_getKeyPath(&unk_1000736B8);
  v6 = sub_10000498C(&qword_100098510);
  swift_storeEnumTagMultiPayload(v5, v6, 0);
  v7 = a2 + v4[6];
  v37[0] = 0;
  v37[1] = 0;
  v8 = sub_10000498C(&qword_100098768);
  State.init(wrappedValue:)(&v38, v37, v8);
  v9 = v39;
  *(_OWORD *)v7 = v38;
  *(_QWORD *)(v7 + 16) = v9;
  v10 = (_QWORD *)(a2 + v4[7]);
  v37[0] = 0;
  State.init(wrappedValue:)(&v38, v37, &type metadata for CGFloat);
  v11 = *((_QWORD *)&v38 + 1);
  *v10 = v38;
  v10[1] = v11;
  *(_QWORD *)(a2 + v4[8]) = 0x4034000000000000;
  v12 = (void *)objc_opt_self(UIFont);
  v13 = objc_msgSend(v12, "familyNames");
  v14 = ((uint64_t (*)(void))static Array._unconditionallyBridgeFromObjectiveC(_:))();

  v15 = &_swiftEmptyArrayStorage;
  *(_QWORD *)&v38 = &_swiftEmptyArrayStorage;
  v16 = *(_QWORD *)(v14 + 16);
  if (v16)
  {
    v36 = a2;
    swift_bridgeObjectRetain(v14);
    v35 = v14;
    v17 = (uint64_t *)(v14 + 40);
    while (1)
    {
      v19 = *v17;
      swift_bridgeObjectRetain(*v17);
      v20 = String._bridgeToObjectiveC()();
      v21 = objc_msgSend(v12, "fontNamesForFamilyName:", v20);

      v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v21, &type metadata for String);
      if (*(_QWORD *)(v22 + 16))
      {
        v23 = *(_QWORD *)(v22 + 40);
        swift_bridgeObjectRetain_n(v23, 2);
        swift_bridgeObjectRelease(v22);
        objc_msgSend(v12, "systemFontSize");
        v25 = v24;
        v26 = String._bridgeToObjectiveC()();
        v27 = objc_msgSend(v12, "fontWithName:size:", v26, v25);

        if (v27)
        {
          v28 = objc_msgSend(v27, "fontDescriptor");

          if (v28)
          {
            v29 = objc_msgSend(objc_allocWithZone((Class)_UIFontPickerFontInfo), "initWithFontDescriptor:", v28);
            swift_bridgeObjectRelease(v19);
            swift_bridgeObjectRelease_n(v23, 2);

            if (v29)
            {
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
              v31 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x10);
              v30 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x18);
              if (v31 >= v30 >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1);
              v32 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v31, v29);
              specialized Array._endMutation()(v32);
            }
            goto LABEL_5;
          }
        }
        swift_bridgeObjectRelease_n(v23, 2);
        v18 = v19;
      }
      else
      {
        swift_bridgeObjectRelease(v19);
        v18 = v22;
      }
      swift_bridgeObjectRelease(v18);
LABEL_5:
      v17 += 2;
      if (!--v16)
      {
        v14 = v35;
        swift_bridgeObjectRelease(v35);
        v15 = (void *)v38;
        a2 = v36;
        break;
      }
    }
  }
  v33 = v4[9];
  result = swift_bridgeObjectRelease(v14);
  *(_QWORD *)(a2 + v33) = v15;
  *(_QWORD *)a2 = sub_100008710;
  *(_QWORD *)(a2 + 8) = a1;
  *(_BYTE *)(a2 + 16) = 0;
  return result;
}

char *sub_100003224()
{
  return sub_100002BE0();
}

id sub_100003244(uint64_t a1)
{
  char *v1;
  id result;
  uint64_t v4;
  id v5;
  id v6;
  uint64_t KeyPath;
  uint64_t v8;
  id v9;
  objc_super v10;

  v10.receiver = v1;
  v10.super_class = (Class)swift_getObjectType(v1);
  result = objc_msgSendSuper2(&v10, "traitCollectionDidChange:", a1);
  v4 = *(_QWORD *)&v1[qword_1000982C0];
  if (v4)
  {
    swift_retain(*(_QWORD *)&v1[qword_1000982C0]);
    v5 = objc_msgSend(v1, "traitCollection");
    v6 = objc_msgSend(v5, "preferredContentSizeCategory");

    KeyPath = swift_getKeyPath(&unk_100073670);
    v8 = swift_getKeyPath(&unk_100073698);
    v9 = v6;
    return (id)static Published.subscript.setter(&v9, v4, KeyPath, v8);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100003318(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;

  v5 = a3;
  v6 = a1;
  sub_100003244((uint64_t)a3);

}

uint64_t sub_100003370(uint64_t a1)
{
  objc_class *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v3 = type metadata accessor for FontPickerRecentsView(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (char *)objc_allocWithZone(v1);
  *(_QWORD *)&v6[qword_1000982C0] = 0;
  sub_10000920C(a1, (uint64_t)v5, type metadata accessor for FontPickerRecentsView);
  v7 = UIHostingController.init(rootView:)(v5);
  sub_100009250(a1, type metadata accessor for FontPickerRecentsView);
  return v7;
}

void *sub_100003418(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  void *v9;
  id v10;
  uint64_t v12;

  v5 = type metadata accessor for FontPickerRecentsView(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (char *)objc_allocWithZone(v2);
  *(_QWORD *)&v8[qword_1000982C0] = 0;
  sub_10000920C(a2, (uint64_t)v7, type metadata accessor for FontPickerRecentsView);
  v9 = (void *)UIHostingController.init(coder:rootView:)(a1, v7);
  v10 = v9;
  sub_100009250(a2, type metadata accessor for FontPickerRecentsView);
  if (v9)

  return v9;
}

id sub_1000034E0(char *a1, uint64_t a2, uint64_t a3)
{
  objc_class *ObjectType;
  objc_super v7;

  ObjectType = (objc_class *)swift_getObjectType(a1);
  *(_QWORD *)&a1[qword_1000982C0] = 0;
  v7.receiver = a1;
  v7.super_class = ObjectType;
  return objc_msgSendSuper2(&v7, "initWithCoder:", a3);
}

uint64_t sub_100003530()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + qword_1000982C0));
}

id sub_100003540()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100003574(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + qword_1000982C0));
}

uint64_t sub_100003584()
{
  return type metadata accessor for _UIFontPickerRecentsView(0);
}

uint64_t sub_10000358C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t KeyPath;
  uint64_t v7;
  _QWORD *v8;
  void *v9;

  v9 = &_swiftEmptySetSingleton;
  v2 = *(_QWORD *)(v1 + qword_1000982C0);
  if (v2)
  {
    v3 = result;
    swift_retain(*(_QWORD *)(v1 + qword_1000982C0));
    v4 = swift_bridgeObjectRetain(v3);
    v5 = sub_10000854C(v4);
    swift_bridgeObjectRelease(v3);
    KeyPath = swift_getKeyPath(&unk_100073440);
    v7 = swift_getKeyPath(&unk_100073468);
    v8 = v5;
    static Published.subscript.setter(&v8, v2, KeyPath, v7);
    return swift_bridgeObjectRelease(v9);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10000363C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  id v7;

  v5 = sub_1000096AC(0, &qword_1000986D0, _UIFontPickerFontInfo_ptr);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a3, v5);
  v7 = a1;
  sub_10000358C(v6);

  return swift_bridgeObjectRelease(v6);
}

uint64_t sub_10000369C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;

  v3 = a3;
  v4 = result;
  if (a3)
  {
    v5 = sub_1000096AC(0, &qword_1000986D0, _UIFontPickerFontInfo_ptr);
    result = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v5);
    v3 = result;
  }
  v6 = *(_QWORD *)(v4 + qword_1000982C0);
  if (v6)
  {
    KeyPath = swift_getKeyPath(&unk_100073598);
    v8 = swift_getKeyPath(&unk_1000735C0);
    v9 = v3;
    swift_retain(v6);
    return static Published.subscript.setter(&v9, v6, KeyPath, v8);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10000374C(void *a1, void (*a2)(void))
{
  id v3;

  if (a2)
  {
    v3 = objc_msgSend(a1, "fontDescriptor");
    a2();

  }
}

uint64_t (*sub_10000379C(uint64_t a1, int a2, void *aBlock))()
{
  uint64_t (*result)();
  uint64_t (*v5)();
  uint64_t (*v6)();
  uint64_t v7;
  uint64_t v8;
  void (**v9)(void *);
  uint64_t v10;

  result = (uint64_t (*)())_Block_copy(aBlock);
  v5 = result;
  if (result)
  {
    result = (uint64_t (*)())swift_allocObject(&unk_10008E3B8, 24, 7);
    v6 = result;
    *((_QWORD *)result + 2) = v5;
    v5 = sub_10000853C;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_QWORD *)(a1 + qword_1000982C0);
  if (v7)
  {
    v8 = swift_allocObject(&unk_10008E390, 32, 7);
    *(_QWORD *)(v8 + 16) = v5;
    *(_QWORD *)(v8 + 24) = v6;
    v9 = (void (**)(void *))(v7
                                      + OBJC_IVAR____TtC19FontPickerUIService26FontPickerRecentsViewState_onSelection);
    v10 = *(_QWORD *)(v7 + OBJC_IVAR____TtC19FontPickerUIService26FontPickerRecentsViewState_onSelection + 8);
    *v9 = sub_100008510;
    v9[1] = (void (*)(void *))v8;
    return (uint64_t (*)())swift_release(v10);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100003848(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v6;
  char v7;

  v3 = *(_QWORD *)(result + qword_1000982C0);
  if (v3)
  {
    KeyPath = swift_getKeyPath(&unk_100073628);
    v6 = swift_getKeyPath(&unk_100073650);
    v7 = a3;
    swift_retain(v3);
    return static Published.subscript.setter(&v7, v3, KeyPath, v6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1000038C8(double a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;

  v4 = qword_1000982C0;
  v5 = *(_QWORD *)(v3 + qword_1000982C0);
  if (!v5)
  {
    __break(1u);
    goto LABEL_6;
  }
  KeyPath = swift_getKeyPath(&unk_100073488);
  v10 = swift_getKeyPath(&unk_1000734B0);
  v17 = a1;
  swift_retain(v5);
  static Published.subscript.setter(&v17, v5, KeyPath, v10);
  v11 = *(_QWORD *)(v3 + v4);
  if (!v11)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v12 = swift_getKeyPath(&unk_1000734D0);
  v13 = swift_getKeyPath(&unk_1000734F8);
  v17 = a2;
  swift_retain(v11);
  static Published.subscript.setter(&v17, v11, v12, v13);
  v14 = *(_QWORD *)(v3 + v4);
  if (v14)
  {
    v15 = swift_getKeyPath(&unk_1000735E0);
    v16 = swift_getKeyPath(&unk_100073608);
    v17 = a3;
    swift_retain(v14);
    static Published.subscript.setter(&v17, v14, v15, v16);
    return;
  }
LABEL_7:
  __break(1u);
}

void sub_100003A00(void *a1, double a2, double a3, double a4)
{
  id v7;

  v7 = a1;
  sub_1000038C8(a2, a3, a4);

}

uint64_t sub_100003A5C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100073440);
  v2 = swift_getKeyPath(&unk_100073468);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_100003ACC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100073440);
  v5 = swift_getKeyPath(&unk_100073468);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_100003B48(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100073440);
  v5 = swift_getKeyPath(&unk_100073468);
  v7 = v2;
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_100003BC0()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100073598);
  v2 = swift_getKeyPath(&unk_1000735C0);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_100003C30@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100073598);
  v5 = swift_getKeyPath(&unk_1000735C0);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_100003CAC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100073598);
  v5 = swift_getKeyPath(&unk_1000735C0);
  v7 = v2;
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_100003D24()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100073670);
  v2 = swift_getKeyPath(&unk_100073698);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_100003D94@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100073670);
  v5 = swift_getKeyPath(&unk_100073698);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_100003E10(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  void *v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100073670);
  v5 = swift_getKeyPath(&unk_100073698);
  v8 = v2;
  v6 = v2;
  swift_retain(v3);
  return static Published.subscript.setter(&v8, v3, KeyPath, v5);
}

uint64_t sub_100003E84()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100073628);
  v2 = swift_getKeyPath(&unk_100073650);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_100003EF4@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100073628);
  v5 = swift_getKeyPath(&unk_100073650);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_100003F70(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  char v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100073628);
  v5 = swift_getKeyPath(&unk_100073650);
  v7 = v2;
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

double sub_100003FE0()
{
  return sub_10000406C((uint64_t)&unk_100073488, (uint64_t)&unk_1000734B0);
}

double sub_100003FF4@<D0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  return sub_1000040E8(a1, (uint64_t)&unk_100073488, (uint64_t)&unk_1000734B0, a2);
}

uint64_t sub_100004008(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100004174(a1, a2, a3, a4, (uint64_t)&unk_100073488, (uint64_t)&unk_1000734B0);
}

double sub_10000401C()
{
  return sub_10000406C((uint64_t)&unk_1000734D0, (uint64_t)&unk_1000734F8);
}

double sub_100004030@<D0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  return sub_1000040E8(a1, (uint64_t)&unk_1000734D0, (uint64_t)&unk_1000734F8, a2);
}

uint64_t sub_100004044(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100004174(a1, a2, a3, a4, (uint64_t)&unk_1000734D0, (uint64_t)&unk_1000734F8);
}

double sub_100004058()
{
  return sub_10000406C((uint64_t)&unk_1000735E0, (uint64_t)&unk_100073608);
}

double sub_10000406C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  double v7;

  KeyPath = swift_getKeyPath(a1);
  v5 = swift_getKeyPath(a2);
  static Published.subscript.getter(&v7, v2, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  return v7;
}

double sub_1000040D4@<D0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  return sub_1000040E8(a1, (uint64_t)&unk_1000735E0, (uint64_t)&unk_100073608, a2);
}

double sub_1000040E8@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, double *a4@<X8>)
{
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  double result;
  double v10;

  v6 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v8 = swift_getKeyPath(a3);
  static Published.subscript.getter(&v10, v6, KeyPath, v8);
  swift_release(KeyPath);
  swift_release(v8);
  result = v10;
  *a4 = v10;
  return result;
}

uint64_t sub_100004160(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100004174(a1, a2, a3, a4, (uint64_t)&unk_1000735E0, (uint64_t)&unk_100073608);
}

uint64_t sub_100004174(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v12;

  v7 = *a1;
  v8 = *a2;
  KeyPath = swift_getKeyPath(a5);
  v10 = swift_getKeyPath(a6);
  v12 = v7;
  swift_retain(v8);
  return static Published.subscript.setter(&v12, v8, KeyPath, v10);
}

uint64_t sub_1000041E8()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100073518);
  v2 = swift_getKeyPath(&unk_100073540);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_100004258@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100073518);
  v5 = swift_getKeyPath(&unk_100073540);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_1000042D4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100073518);
  v5 = swift_getKeyPath(&unk_100073540);
  v7 = v2;
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_100004348()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;

  v1 = v0 + OBJC_IVAR____TtC19FontPickerUIService26FontPickerRecentsViewState__fontsInfo;
  v2 = sub_10000498C(&qword_100098738);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC19FontPickerUIService26FontPickerRecentsViewState__selectedFontsInfo;
  v4 = sub_10000498C(&qword_100098740);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = v0 + OBJC_IVAR____TtC19FontPickerUIService26FontPickerRecentsViewState__contentSize;
  v6 = sub_10000498C(&qword_100098748);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = v0 + OBJC_IVAR____TtC19FontPickerUIService26FontPickerRecentsViewState__adjustForIndexBar;
  v8 = sub_10000498C(&qword_100098750);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = v0 + OBJC_IVAR____TtC19FontPickerUIService26FontPickerRecentsViewState__leadingMargin;
  v10 = sub_10000498C(&qword_100098758);
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
  v11(v9, v10);
  v11(v0 + OBJC_IVAR____TtC19FontPickerUIService26FontPickerRecentsViewState__trailingMargin, v10);
  v11(v0 + OBJC_IVAR____TtC19FontPickerUIService26FontPickerRecentsViewState__headerMargin, v10);
  v12 = v0 + OBJC_IVAR____TtC19FontPickerUIService26FontPickerRecentsViewState__idiom;
  v13 = sub_10000498C(&qword_100098760);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC19FontPickerUIService26FontPickerRecentsViewState_onSelection + 8));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000044C0()
{
  return type metadata accessor for FontPickerRecentsViewState(0);
}

uint64_t type metadata accessor for FontPickerRecentsViewState(uint64_t a1)
{
  return sub_1000050B8(a1, (uint64_t *)&unk_100098380, (uint64_t)&nominal type descriptor for FontPickerRecentsViewState);
}

void sub_1000044DC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v14[4];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;

  sub_1000046A4(319, &qword_100098390, &qword_100098398);
  if (v3 <= 0x3F)
  {
    v14[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_1000046A4(319, &qword_1000983A0, &qword_1000983A8);
    if (v5 <= 0x3F)
    {
      v14[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_10000470C(319, &qword_1000983B0, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Published);
      if (v7 <= 0x3F)
      {
        v14[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_100008A7C(319, &qword_1000983B8, (uint64_t)&type metadata for Bool, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for Published);
        if (v9 <= 0x3F)
        {
          v14[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_100008A7C(319, &qword_1000983C0, (uint64_t)&type metadata for CGFloat, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for Published);
          if (v11 <= 0x3F)
          {
            v15 = *(_QWORD *)(v10 - 8) + 64;
            v16 = v15;
            v17 = v15;
            sub_10000470C(319, (unint64_t *)&unk_1000983C8, (uint64_t (*)(uint64_t))type metadata accessor for UIUserInterfaceIdiom, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Published);
            if (v13 <= 0x3F)
            {
              v18 = *(_QWORD *)(v12 - 8) + 64;
              v19 = (char *)&value witness table for () + 64;
              swift_updateClassMetadata2(a1, 256, 9, v14, a1 + 80);
            }
          }
        }
      }
    }
  }
}

uint64_t sub_100004660(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

void sub_1000046A4(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = sub_100004660(a3);
    v6 = type metadata accessor for Published(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

void type metadata accessor for UIContentSizeCategory(uint64_t a1)
{
  sub_100008A7C(a1, &qword_100098508, (uint64_t)&unk_10008E2F8, (uint64_t (*)(_QWORD, uint64_t))&swift_getForeignTypeMetadata);
}

void sub_10000470C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

void type metadata accessor for UIUserInterfaceIdiom(uint64_t a1)
{
  sub_100008A7C(a1, &qword_100098500, (uint64_t)&unk_10008E2D8, (uint64_t (*)(_QWORD, uint64_t))&swift_getForeignTypeMetadata);
}

void type metadata accessor for Key(uint64_t a1)
{
  sub_100008A7C(a1, &qword_1000984E8, (uint64_t)&unk_10008E208, (uint64_t (*)(_QWORD, uint64_t))&swift_getForeignTypeMetadata);
}

__n128 sub_1000047A0(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_1000047AC(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1000047CC(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
  sub_100008A7C(a1, &qword_1000984F0, (uint64_t)&unk_10008E288, (uint64_t (*)(_QWORD, uint64_t))&swift_getForeignTypeMetadata);
}

void type metadata accessor for ComponentKey(uint64_t a1)
{
  sub_100008A7C(a1, &qword_1000984F8, (uint64_t)&unk_10008E2B0, (uint64_t (*)(_QWORD, uint64_t))&swift_getForeignTypeMetadata);
}

unint64_t sub_100004830(unint64_t a1, uint64_t a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v16 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v16);
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *(_BYTE *)(a2 + 16);
    sub_100004984(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_BYTE *)(a1 + 16) = v9;
    v10 = a3[5];
    v11 = (uint64_t *)(a1 + v10);
    v12 = (uint64_t *)(a2 + v10);
    v13 = sub_10000498C(&qword_100098510);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for Font.Context(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
      v15 = 1;
    }
    else
    {
      v17 = *v12;
      *v11 = *v12;
      swift_retain(v17);
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v13, v15);
    v18 = a3[6];
    v19 = a3[7];
    v20 = (_QWORD *)(a1 + v18);
    v21 = (_QWORD *)(a2 + v18);
    v22 = v21[1];
    *v20 = *v21;
    v20[1] = v22;
    v23 = v21[2];
    v20[2] = v23;
    v24 = (_QWORD *)(a1 + v19);
    v25 = (_QWORD *)(a2 + v19);
    v26 = v25[1];
    *v24 = *v25;
    v24[1] = v26;
    v27 = a3[9];
    *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
    v28 = *(_QWORD *)(a2 + v27);
    *(_QWORD *)(a1 + v27) = v28;
    swift_bridgeObjectRetain(v22);
    swift_retain(v23);
    swift_retain(v26);
    swift_bridgeObjectRetain(v28);
  }
  return a1;
}

uint64_t sub_100004984(uint64_t a1, uint64_t a2)
{
  return swift_retain(a2);
}

uint64_t sub_10000498C(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_1000049CC(uint64_t *a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  sub_100004A84(*a1, a1[1]);
  v4 = (uint64_t *)((char *)a1 + a2[5]);
  v5 = sub_10000498C(&qword_100098510);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for Font.Context(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  v7 = (char *)a1 + a2[6];
  swift_bridgeObjectRelease(*((_QWORD *)v7 + 1));
  swift_release(*((_QWORD *)v7 + 2));
  swift_release(*(uint64_t *)((char *)a1 + a2[7] + 8));
  return swift_bridgeObjectRelease(*(uint64_t *)((char *)a1 + a2[9]));
}

uint64_t sub_100004A84(uint64_t a1, uint64_t a2)
{
  return swift_release(a2);
}

uint64_t sub_100004A8C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  sub_100004984(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  v9 = a3[5];
  v10 = (uint64_t *)(a1 + v9);
  v11 = (uint64_t *)(a2 + v9);
  v12 = sub_10000498C(&qword_100098510);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = type metadata accessor for Font.Context(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v11, v13);
    v14 = 1;
  }
  else
  {
    v15 = *v11;
    *v10 = *v11;
    swift_retain(v15);
    v14 = 0;
  }
  swift_storeEnumTagMultiPayload(v10, v12, v14);
  v16 = a3[6];
  v17 = a3[7];
  v18 = (_QWORD *)(a1 + v16);
  v19 = (_QWORD *)(a2 + v16);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  v21 = v19[2];
  v18[2] = v21;
  v22 = (_QWORD *)(a1 + v17);
  v23 = (_QWORD *)(a2 + v17);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  v25 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  v26 = *(_QWORD *)(a2 + v25);
  *(_QWORD *)(a1 + v25) = v26;
  swift_bridgeObjectRetain(v20);
  swift_retain(v21);
  swift_retain(v24);
  swift_bridgeObjectRetain(v26);
  return a1;
}

uint64_t sub_100004BB4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  sub_100004984(*(_QWORD *)a2, v7);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  sub_100004A84(v9, v10);
  if (a1 != a2)
  {
    v11 = a3[5];
    v12 = (uint64_t *)(a1 + v11);
    v13 = (uint64_t *)(a2 + v11);
    sub_1000092D0(a1 + v11, &qword_100098510);
    v14 = sub_10000498C(&qword_100098510);
    if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
    {
      v15 = type metadata accessor for Font.Context(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v12, v13, v15);
      v16 = 1;
    }
    else
    {
      v17 = *v13;
      *v12 = *v13;
      swift_retain(v17);
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(v12, v14, v16);
  }
  v18 = a3[6];
  v19 = (_QWORD *)(a1 + v18);
  v20 = a2 + v18;
  *v19 = *(_QWORD *)(a2 + v18);
  v21 = *(_QWORD *)(a2 + v18 + 8);
  v22 = *(_QWORD *)(a1 + v18 + 8);
  v19[1] = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  v23 = v19[2];
  v24 = *(_QWORD *)(v20 + 16);
  v19[2] = v24;
  swift_retain(v24);
  swift_release(v23);
  v25 = a3[7];
  v26 = (_QWORD *)(a1 + v25);
  v27 = (_QWORD *)(a2 + v25);
  *v26 = *v27;
  v28 = v26[1];
  v29 = v27[1];
  v26[1] = v29;
  swift_retain(v29);
  swift_release(v28);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  v30 = a3[9];
  v31 = *(_QWORD *)(a2 + v30);
  v32 = *(_QWORD *)(a1 + v30);
  *(_QWORD *)(a1 + v30) = v31;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease(v32);
  return a1;
}

uint64_t sub_100004D3C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  __int128 v15;
  uint64_t v16;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = a3[5];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_10000498C(&qword_100098510);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for Font.Context(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v11 = a3[6];
  v12 = a3[7];
  v13 = a1 + v11;
  v14 = (__int128 *)(a2 + v11);
  v15 = *v14;
  *(_QWORD *)(v13 + 16) = *((_QWORD *)v14 + 2);
  *(_OWORD *)v13 = v15;
  *(_OWORD *)(a1 + v12) = *(_OWORD *)(a2 + v12);
  v16 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  *(_QWORD *)(a1 + v16) = *(_QWORD *)(a2 + v16);
  return a1;
}

uint64_t sub_100004E34(uint64_t a1, uint64_t a2, int *a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v6;
  sub_100004A84(v7, v8);
  if (a1 != a2)
  {
    v9 = a3[5];
    v10 = (void *)(a1 + v9);
    v11 = (const void *)(a2 + v9);
    sub_1000092D0(a1 + v9, &qword_100098510);
    v12 = sub_10000498C(&qword_100098510);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = type metadata accessor for Font.Context(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v10, v11, v13);
      swift_storeEnumTagMultiPayload(v10, v12, 1);
    }
    else
    {
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
  }
  v14 = a3[6];
  v15 = (_QWORD *)(a1 + v14);
  v16 = a2 + v14;
  v17 = *(_QWORD *)(a2 + v14 + 8);
  v18 = *(_QWORD *)(a1 + v14 + 8);
  *v15 = *(_QWORD *)(a2 + v14);
  v15[1] = v17;
  swift_bridgeObjectRelease(v18);
  v19 = v15[2];
  v15[2] = *(_QWORD *)(v16 + 16);
  swift_release(v19);
  v20 = a3[7];
  v21 = (_QWORD *)(a1 + v20);
  v22 = (_QWORD *)(a2 + v20);
  *v21 = *v22;
  v23 = v21[1];
  v21[1] = v22[1];
  swift_release(v23);
  v24 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  v25 = *(_QWORD *)(a1 + v24);
  *(_QWORD *)(a1 + v24) = *(_QWORD *)(a2 + v24);
  swift_bridgeObjectRelease(v25);
  return a1;
}

uint64_t sub_100004F88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100004F94);
}

uint64_t sub_100004F94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_10000498C(&qword_100098518);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 36));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100005018(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100005024);
}

uint64_t sub_100005024(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_10000498C(&qword_100098518);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 36)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for FontPickerRecentsView(uint64_t a1)
{
  return sub_1000050B8(a1, (uint64_t *)&unk_100098578, (uint64_t)&nominal type descriptor for FontPickerRecentsView);
}

uint64_t sub_1000050B8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

void sub_1000050EC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = &unk_100072E28;
  sub_10000470C(319, (unint64_t *)&qword_100098588, (uint64_t (*)(uint64_t))&type metadata accessor for Font.Context, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = &unk_100072E40;
    v4[3] = &unk_100072E58;
    v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
  }
}

void type metadata accessor for ComponentSize(uint64_t a1)
{
  sub_100008A7C(a1, &qword_1000985C8, (uint64_t)&unk_10008E320, (uint64_t (*)(_QWORD, uint64_t))&swift_getForeignTypeMetadata);
}

uint64_t sub_1000051C4()
{
  return sub_100007D90(&qword_1000985D0, (uint64_t (*)(uint64_t))type metadata accessor for ComponentSize, (uint64_t)&unk_100073410);
}

uint64_t sub_1000051F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSString *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v1 = sub_10000498C(&qword_100098760);
  v48 = *(_QWORD *)(v1 - 8);
  v49 = v1;
  __chkstk_darwin();
  v47 = (char *)&v39 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10000498C(&qword_100098758);
  v45 = *(_QWORD *)(v3 - 8);
  v46 = v3;
  __chkstk_darwin();
  v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10000498C(&qword_100098750);
  v43 = *(_QWORD *)(v6 - 8);
  v44 = v6;
  __chkstk_darwin();
  v42 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10000498C(&qword_100098748);
  v40 = *(_QWORD *)(v8 - 8);
  v41 = v8;
  __chkstk_darwin();
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10000498C(&qword_100098740);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin();
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10000498C(&qword_100098738);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin();
  v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = v0 + OBJC_IVAR____TtC19FontPickerUIService26FontPickerRecentsViewState__fontsInfo;
  v50 = (uint64_t)&_swiftEmptyArrayStorage;
  v20 = sub_10000498C(&qword_100098398);
  Published.init(initialValue:)(&v50, v20);
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v19, v18, v15);
  v21 = v0 + OBJC_IVAR____TtC19FontPickerUIService26FontPickerRecentsViewState__selectedFontsInfo;
  v50 = 0;
  v22 = sub_10000498C(&qword_1000983A8);
  Published.init(initialValue:)(&v50, v22);
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v21, v14, v11);
  v23 = v0 + OBJC_IVAR____TtC19FontPickerUIService26FontPickerRecentsViewState__contentSize;
  v50 = (uint64_t)UIContentSizeCategoryUnspecified;
  type metadata accessor for UIContentSizeCategory(0);
  v25 = v24;
  v26 = UIContentSizeCategoryUnspecified;
  Published.init(initialValue:)(&v50, v25);
  (*(void (**)(uint64_t, char *, uint64_t))(v40 + 32))(v23, v10, v41);
  v27 = v0 + OBJC_IVAR____TtC19FontPickerUIService26FontPickerRecentsViewState__adjustForIndexBar;
  LOBYTE(v50) = 0;
  v28 = v42;
  Published.init(initialValue:)(&v50, &type metadata for Bool);
  (*(void (**)(uint64_t, char *, uint64_t))(v43 + 32))(v27, v28, v44);
  v29 = v0 + OBJC_IVAR____TtC19FontPickerUIService26FontPickerRecentsViewState__leadingMargin;
  v50 = 0;
  Published.init(initialValue:)(&v50, &type metadata for CGFloat);
  v30 = v46;
  v31 = *(void (**)(uint64_t, char *, uint64_t))(v45 + 32);
  v31(v29, v5, v46);
  v32 = v0 + OBJC_IVAR____TtC19FontPickerUIService26FontPickerRecentsViewState__trailingMargin;
  v50 = 0;
  Published.init(initialValue:)(&v50, &type metadata for CGFloat);
  v31(v32, v5, v30);
  v33 = v0 + OBJC_IVAR____TtC19FontPickerUIService26FontPickerRecentsViewState__headerMargin;
  v50 = 0;
  Published.init(initialValue:)(&v50, &type metadata for CGFloat);
  v31(v33, v5, v30);
  v34 = v0 + OBJC_IVAR____TtC19FontPickerUIService26FontPickerRecentsViewState__idiom;
  v50 = -1;
  type metadata accessor for UIUserInterfaceIdiom(0);
  v35 = v47;
  Published.init(initialValue:)(&v50, v36);
  (*(void (**)(uint64_t, char *, uint64_t))(v48 + 32))(v34, v35, v49);
  v37 = (_QWORD *)(v0 + OBJC_IVAR____TtC19FontPickerUIService26FontPickerRecentsViewState_onSelection);
  *v37 = nullsub_1;
  v37[1] = 0;
  return v0;
}

uint64_t sub_1000055B4@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;

  result = ObservableObject<>.objectWillChange.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t sub_1000055DC@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t KeyPath;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t OpaqueTypeConformance2;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  double v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  double v95;
  double v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  __int128 v133;
  uint64_t v134;
  double v135;
  uint64_t v136;
  uint64_t v137;

  v2 = v1;
  v118 = type metadata accessor for ScrollIndicatorVisibility(0);
  v117 = *(_QWORD *)(v118 - 8);
  __chkstk_darwin(v118);
  v5 = (char *)&v109 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = sub_10000498C(&qword_100098650);
  v114 = *(_QWORD *)(v115 - 8);
  __chkstk_darwin(v115);
  v7 = (char *)&v109 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = sub_10000498C(&qword_100098658);
  v116 = *(_QWORD *)(v112 - 8);
  __chkstk_darwin(v112);
  v9 = (char *)&v109 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = sub_10000498C(&qword_100098660);
  v120 = *(_QWORD *)(v121 - 8);
  __chkstk_darwin(v121);
  v119 = (char *)&v109 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10000498C(&qword_100098668);
  v124 = *(_QWORD *)(v11 - 8);
  v125 = v11;
  __chkstk_darwin(v11);
  v123 = (char *)&v109 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = sub_10000498C(&qword_100098670);
  __chkstk_darwin(v122);
  v129 = (char *)&v109 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = sub_10000498C(&qword_100098678);
  __chkstk_darwin(v128);
  v113 = (char *)&v109 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10000498C(&qword_100098680);
  v132 = *(_QWORD *)(v15 - 8);
  v16 = __chkstk_darwin(v15);
  v131 = (uint64_t)&v109 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v130 = (uint64_t)&v109 - v18;
  v19 = *v2;
  v20 = v2[1];
  v21 = *((unsigned __int8 *)v2 + 16);
  v22 = type metadata accessor for FontPickerRecentsViewState(0);
  v126 = sub_100007D90(&qword_100098688, type metadata accessor for FontPickerRecentsViewState, (uint64_t)&unk_1000733D8);
  v127 = v22;
  v23 = StateObject.wrappedValue.getter(v19, v20, v21, v22, v126);
  KeyPath = swift_getKeyPath(&unk_100073440);
  v25 = swift_getKeyPath(&unk_100073468);
  static Published.subscript.getter(&v135, v23, KeyPath, v25);
  swift_release(v23);
  swift_release(KeyPath);
  swift_release(v25);
  v26 = v135;
  if (*(_QWORD *)&v135 >> 62)
  {
    if (v135 < 0.0)
      v108 = *(_QWORD *)&v135;
    else
      v108 = *(_QWORD *)&v135 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)&v135);
    v27 = _CocoaArrayWrapper.endIndex.getter(v108);
    swift_bridgeObjectRelease(*(_QWORD *)&v26);
  }
  else
  {
    v27 = *(_QWORD *)((*(_QWORD *)&v135 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v28 = swift_bridgeObjectRelease(*(_QWORD *)&v26);
  if (v27)
  {
    v110 = v15;
    v111 = a1;
    v29 = static Axis.Set.horizontal.getter(v28);
    __chkstk_darwin(v29);
    *(&v109 - 2) = (uint64_t)v2;
    v30 = sub_10000498C(&qword_100098690);
    *(double *)&v31 = COERCE_DOUBLE(sub_100004660(&qword_100098698));
    v32 = sub_10000966C(&qword_1000986A0, &qword_100098698, (uint64_t)&protocol conformance descriptor for HStack<A>);
    v135 = *(double *)&v31;
    v136 = v32;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v135, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 1);
    v34 = ScrollView.init(_:showsIndicators:content:)(v29, 1, sub_1000081FC, &v109 - 4, v30, OpaqueTypeConformance2);
    v35 = static ScrollIndicatorVisibility.never.getter(v34);
    v36 = static Axis.Set.vertical.getter(v35);
    v37 = v36;
    v38 = static Axis.Set.horizontal.getter(v36);
    v39 = Axis.Set.init(rawValue:)(0);
    v40 = Axis.Set.init(rawValue:)(v39);
    if (Axis.Set.init(rawValue:)(v40 & v37) != v37)
      v39 = Axis.Set.init(rawValue:)(v39 | v37);
    v41 = Axis.Set.init(rawValue:)(v39);
    if (Axis.Set.init(rawValue:)(v41 & v38) != v38)
      v39 = Axis.Set.init(rawValue:)(v39 | v38);
    v42 = (uint64_t)v113;
    v43 = v112;
    v44 = sub_10000966C(&qword_1000986A8, &qword_100098650, (uint64_t)&protocol conformance descriptor for ScrollView<A>);
    v45 = v39;
    v46 = *(double *)&v115;
    View.scrollIndicators(_:axes:)(v5, v45, v115, v44);
    (*(void (**)(char *, uint64_t))(v117 + 8))(v5, v118);
    (*(void (**)(char *, double))(v114 + 8))(v7, COERCE_DOUBLE(*(_QWORD *)&v46));
    v135 = v46;
    v136 = v44;
    v47 = swift_getOpaqueTypeConformance2(&v135, &opaque type descriptor for <<opaque return type of View.scrollIndicators(_:axes:)>>, 1);
    v48 = v119;
    View.scrollClipDisabled(_:)(1, v43, v47);
    (*(void (**)(char *, uint64_t))(v116 + 8))(v9, v43);
    v49 = (char *)v2 + *(int *)(type metadata accessor for FontPickerRecentsView(0) + 24);
    v50 = *((_QWORD *)v49 + 2);
    v133 = *(_OWORD *)v49;
    v134 = v50;
    v51 = sub_10000498C(&qword_1000986B0);
    State.projectedValue.getter(&v135, v51);
    v52 = v135;
    v53 = v136;
    v54 = v137;
    *(_QWORD *)&v133 = v43;
    *((_QWORD *)&v133 + 1) = v47;
    v55 = swift_getOpaqueTypeConformance2(&v133, &opaque type descriptor for <<opaque return type of View.scrollClipDisabled(_:)>>, 1);
    v56 = v123;
    v57 = v121;
    View.scrollPosition<A>(id:anchor:)(&v135, 0, 0, 1, v121, &type metadata for String, v55, &protocol witness table for String);
    swift_release(v53);
    swift_release(*(_QWORD *)&v52);
    swift_bridgeObjectRelease(v54);
    v58 = (*(uint64_t (**)(char *, uint64_t))(v120 + 8))(v48, v57);
    LOBYTE(v57) = static Edge.Set.leading.getter(v58);
    v59 = v126;
    v60 = v127;
    v61 = StateObject.wrappedValue.getter(*v2, v2[1], *((unsigned __int8 *)v2 + 16), v127, v126);
    v62 = swift_getKeyPath(&unk_100073488);
    v63 = swift_getKeyPath(&unk_1000734B0);
    static Published.subscript.getter(&v135, v61, v62, v63);
    swift_release(v61);
    swift_release(v62);
    v64 = swift_release(v63);
    v65 = EdgeInsets.init(_all:)(v64, v135);
    v67 = v66;
    v69 = v68;
    v71 = v70;
    v73 = v124;
    v72 = v125;
    v74 = (uint64_t)v129;
    (*(void (**)(char *, char *, uint64_t))(v124 + 16))(v129, v56, v125);
    v75 = v74 + *(int *)(v122 + 36);
    *(_BYTE *)v75 = v57;
    *(double *)(v75 + 8) = v65;
    *(_QWORD *)(v75 + 16) = v67;
    *(_QWORD *)(v75 + 24) = v69;
    *(_QWORD *)(v75 + 32) = v71;
    *(_BYTE *)(v75 + 40) = 0;
    v76 = (*(uint64_t (**)(char *, uint64_t))(v73 + 8))(v56, v72);
    LOBYTE(v57) = static Edge.Set.trailing.getter(v76);
    v77 = StateObject.wrappedValue.getter(*v2, v2[1], *((unsigned __int8 *)v2 + 16), v60, v59);
    v78 = swift_getKeyPath(&unk_1000734D0);
    v79 = swift_getKeyPath(&unk_1000734F8);
    static Published.subscript.getter(&v135, v77, v78, v79);
    swift_release(v77);
    swift_release(v78);
    v80 = swift_release(v79);
    v81 = EdgeInsets.init(_all:)(v80, v135);
    v83 = v82;
    v85 = v84;
    v87 = v86;
    sub_10000928C(v74, v42, &qword_100098670);
    v88 = v42 + *(int *)(v128 + 36);
    *(_BYTE *)v88 = v57;
    *(double *)(v88 + 8) = v81;
    *(_QWORD *)(v88 + 16) = v83;
    *(_QWORD *)(v88 + 24) = v85;
    *(_QWORD *)(v88 + 32) = v87;
    *(_BYTE *)(v88 + 40) = 0;
    v89 = sub_1000092D0(v74, &qword_100098670);
    v90 = static Edge.Set.bottom.getter(v89);
    v91 = StateObject.wrappedValue.getter(*v2, v2[1], *((unsigned __int8 *)v2 + 16), v60, v59);
    v92 = swift_getKeyPath(&unk_100073518);
    v93 = swift_getKeyPath(&unk_100073540);
    static Published.subscript.getter(&v135, v91, v92, v93);
    swift_release(v91);
    swift_release(v92);
    v94 = swift_release(v93);
    v95 = 0.0;
    if (*(_QWORD *)&v135 == 6)
      v95 = 30.0;
    v96 = EdgeInsets.init(_all:)(v94, v95);
    v98 = v97;
    v100 = v99;
    v102 = v101;
    v103 = v131;
    sub_10000928C(v42, v131, &qword_100098678);
    v15 = v110;
    v104 = v103 + *(int *)(v110 + 36);
    *(_BYTE *)v104 = v90;
    *(double *)(v104 + 8) = v96;
    *(_QWORD *)(v104 + 16) = v98;
    *(_QWORD *)(v104 + 24) = v100;
    *(_QWORD *)(v104 + 32) = v102;
    *(_BYTE *)(v104 + 40) = 0;
    sub_1000092D0(v42, &qword_100098678);
    v105 = v130;
    sub_10000930C(v103, v130, &qword_100098680);
    a1 = v111;
    sub_10000930C(v105, v111, &qword_100098680);
    v106 = 0;
  }
  else
  {
    v106 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v132 + 56))(a1, v106, 1, v15);
}

uint64_t sub_100005F08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v29 = a2;
  v3 = type metadata accessor for FontPickerRecentsView(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v28 = sub_10000498C(&qword_100098698);
  v6 = __chkstk_darwin(v28);
  v8 = (double *)((char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(double *)(a1 + *(int *)(v3 + 32)) * 0.5;
  *(_QWORD *)v8 = static VerticalAlignment.center.getter(v6);
  v8[1] = v9;
  *((_BYTE *)v8 + 16) = 0;
  sub_10000498C(&qword_1000986B8);
  v11 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v12 = *(unsigned __int8 *)(a1 + 16);
  v13 = type metadata accessor for FontPickerRecentsViewState(0);
  v14 = sub_100007D90(&qword_100098688, type metadata accessor for FontPickerRecentsViewState, (uint64_t)&unk_1000733D8);
  v15 = StateObject.wrappedValue.getter(v11, v10, v12, v13, v14);
  KeyPath = swift_getKeyPath(&unk_100073440);
  v17 = swift_getKeyPath(&unk_100073468);
  static Published.subscript.getter(&v30, v15, KeyPath, v17);
  swift_release(v15);
  swift_release(KeyPath);
  swift_release(v17);
  v18 = swift_getKeyPath(&unk_100073570);
  sub_10000920C(a1, (uint64_t)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for FontPickerRecentsView);
  v19 = *(unsigned __int8 *)(v4 + 80);
  v20 = (v19 + 16) & ~v19;
  v21 = swift_allocObject(&unk_10008E340, v20 + v5, v19 | 7);
  sub_100008F30((uint64_t)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v21 + v20, type metadata accessor for FontPickerRecentsView);
  v22 = sub_10000498C(&qword_100098398);
  v23 = sub_10000966C(&qword_1000986C0, &qword_100098398, (uint64_t)&protocol conformance descriptor for [A]);
  v24 = sub_100008354();
  ForEach<>.init(_:id:content:)(&v30, v18, sub_100008308, v21, v22, &type metadata for FontPickerRecentsView.FontTile, v23, &protocol witness table for String, v24);
  v25 = sub_10000966C(&qword_1000986A0, &qword_100098698, (uint64_t)&protocol conformance descriptor for HStack<A>);
  View.scrollTargetLayout(isEnabled:)(1, v28, v25);
  return sub_1000092D0((uint64_t)v8, &qword_100098698);
}

void sub_1000061AC(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = objc_msgSend(*a1, "familyName");
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = v5;

  *a2 = v4;
  a2[1] = v6;
}

id sub_100006200@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t KeyPath;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  id v36;
  uint64_t v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;

  v6 = type metadata accessor for FontPickerRecentsView(0);
  v40 = *(_QWORD *)(v6 - 8);
  v7 = *(_QWORD *)(v40 + 64);
  __chkstk_darwin(v6);
  v41 = (uint64_t)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *a1;
  v9 = *(_QWORD *)a2;
  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(unsigned __int8 *)(a2 + 16);
  v12 = type metadata accessor for FontPickerRecentsViewState(0);
  v13 = sub_100007D90(&qword_100098688, type metadata accessor for FontPickerRecentsViewState, (uint64_t)&unk_1000733D8);
  v14 = StateObject.wrappedValue.getter(v9, v10, v11, v12, v13);
  KeyPath = swift_getKeyPath(&unk_100073598);
  v16 = swift_getKeyPath(&unk_1000735C0);
  static Published.subscript.getter(&v44, v14, KeyPath, v16);
  swift_release(v14);
  swift_release(KeyPath);
  swift_release(v16);
  v17 = v44;
  if ((_QWORD)v44)
  {
    v39 = sub_100006680((uint64_t)v8, v44, (uint64_t)&qword_1000986D0, _UIFontPickerFontInfo_ptr);
    swift_bridgeObjectRelease(v17);
  }
  else
  {
    v39 = 0;
  }
  v18 = a2 + *(int *)(v6 + 24);
  v19 = *(_QWORD *)(v18 + 16);
  v42 = *(_OWORD *)v18;
  v43 = v19;
  v20 = sub_10000498C(&qword_1000986B0);
  State.projectedValue.getter(&v44, v20);
  v38 = v44;
  v21 = v45;
  v37 = v46;
  v22 = *(_QWORD *)a2;
  v23 = *(_QWORD *)(a2 + 8);
  v24 = *(unsigned __int8 *)(a2 + 16);
  v36 = v8;
  v25 = StateObject.wrappedValue.getter(v22, v23, v24, v12, v13);
  v26 = swift_getKeyPath(&unk_100073518);
  v27 = swift_getKeyPath(&unk_100073540);
  static Published.subscript.getter(&v44, v25, v26, v27);
  swift_release(v25);
  swift_release(v26);
  swift_release(v27);
  LOBYTE(v27) = (_QWORD)v44 == 6;
  v28 = v41;
  sub_10000920C(a2, v41, type metadata accessor for FontPickerRecentsView);
  v29 = *(unsigned __int8 *)(v40 + 80);
  v30 = (v29 + 16) & ~v29;
  v31 = (v7 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
  v32 = swift_allocObject(&unk_10008E368, v31 + 8, v29 | 7);
  sub_100008F30(v28, v32 + v30, type metadata accessor for FontPickerRecentsView);
  v33 = v36;
  v34 = v37;
  *(_QWORD *)(v32 + v31) = v36;
  *(_OWORD *)a3 = v38;
  *(_QWORD *)(a3 + 16) = v21;
  *(_QWORD *)(a3 + 24) = v34;
  *(_QWORD *)(a3 + 32) = v33;
  *(_BYTE *)(a3 + 40) = v39 & 1;
  *(_BYTE *)(a3 + 41) = v27;
  *(_QWORD *)(a3 + 48) = sub_1000084A4;
  *(_QWORD *)(a3 + 56) = v32;
  return v33;
}

uint64_t sub_1000064BC(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
  {
    swift_bridgeObjectRetain(a2);
    __asm { BR              X9 }
  }
  return 0;
}

uint64_t sub_10000666C(uint64_t a1, uint64_t a2)
{
  return sub_100006680(a1, a2, (uint64_t)&qword_100098918, _UITextFormattingViewControllerEmphasisStyle_ptr);
}

uint64_t sub_100006680(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  unint64_t v9;
  id v10;
  void *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  uint64_t v19;

  if ((unint64_t)a2 >> 62)
    goto LABEL_20;
  v8 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a2);
  for (; v8; v8 = _CocoaArrayWrapper.endIndex.getter(v19))
  {
    v9 = a2 & 0xC000000000000001;
    if ((a2 & 0xC000000000000001) == 0)
    {
      v10 = *(id *)(a2 + 32);
      goto LABEL_5;
    }
    while (1)
    {
      v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2);
LABEL_5:
      v11 = v10;
      a4 = (_QWORD *)sub_1000096AC(0, (unint64_t *)a3, a4);
      a3 = static NSObject.== infix(_:_:)(v11, a1);

      if ((a3 & 1) != 0)
      {
LABEL_6:
        swift_bridgeObjectRelease(a2);
        return 1;
      }
      if (v8 == 1)
        goto LABEL_18;
      if (v9)
        break;
      v9 = 5;
      while (1)
      {
        v17 = v9 - 3;
        if (__OFADD__(v9 - 4, 1))
          break;
        a3 = (uint64_t)*(id *)(a2 + 8 * v9);
        v18 = static NSObject.== infix(_:_:)(a3, a1);

        if ((v18 & 1) != 0)
          goto LABEL_6;
        ++v9;
        if (v17 == v8)
          goto LABEL_18;
      }
      __break(1u);
    }
    a3 = 1;
    while (1)
    {
      v13 = specialized _ArrayBuffer._getElementSlowPath(_:)(a3, a2);
      v14 = a3 + 1;
      if (__OFADD__(a3, 1))
        break;
      v15 = v13;
      v16 = static NSObject.== infix(_:_:)(v13, a1);
      swift_unknownObjectRelease(v15);
      if ((v16 & 1) != 0)
        goto LABEL_6;
      ++a3;
      if (v14 == v8)
        goto LABEL_18;
    }
    __break(1u);
LABEL_20:
    if (a2 < 0)
      v19 = a2;
    else
      v19 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
  }
LABEL_18:
  swift_bridgeObjectRelease(a2);
  return 0;
}

uint64_t sub_100006804(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t);

  v3 = *a1;
  v4 = a1[1];
  v5 = *((unsigned __int8 *)a1 + 16);
  v6 = type metadata accessor for FontPickerRecentsViewState(0);
  v7 = sub_100007D90(&qword_100098688, type metadata accessor for FontPickerRecentsViewState, (uint64_t)&unk_1000733D8);
  v8 = StateObject.wrappedValue.getter(v3, v4, v5, v6, v7);
  v10 = *(void (**)(uint64_t))(v8
                                       + OBJC_IVAR____TtC19FontPickerUIService26FontPickerRecentsViewState_onSelection);
  v9 = *(_QWORD *)(v8 + OBJC_IVAR____TtC19FontPickerUIService26FontPickerRecentsViewState_onSelection + 8);
  swift_retain(v9);
  swift_release(v8);
  v10(a2);
  return swift_release(v9);
}

uint64_t sub_1000068AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t OpaqueTypeConformance2;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v33 = a1;
  v31 = sub_10000498C(&qword_1000987A8);
  __chkstk_darwin(v31);
  v3 = (char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for AutomaticHoverEffect(0);
  v30 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10000498C(&qword_1000987B0);
  __chkstk_darwin(v6);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10000498C(&qword_1000987B8);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v28 - v14;
  v16 = *(_BYTE *)(v1 + 41);
  v17 = sub_100006BE8((uint64_t)v8);
  if ((v16 & 1) != 0)
  {
    static CustomHoverEffect<>.automatic.getter(v17);
    v22 = sub_100008B6C(&qword_1000987C0, &qword_1000987B0, (void (*)(void))sub_100008D04);
    v28 = v22;
    v29 = sub_100007D90(&qword_1000987F8, (uint64_t (*)(uint64_t))&type metadata accessor for AutomaticHoverEffect, (uint64_t)&protocol conformance descriptor for AutomaticHoverEffect);
    v23 = v6;
    v24 = v6;
    v25 = v32;
    View.hoverEffect<A>(_:isEnabled:)(v5, 1, v24, v32, v22, v29);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v5, v25);
    sub_1000092D0((uint64_t)v8, &qword_1000987B0);
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v15, v13, v9);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v3, v15, v9);
    swift_storeEnumTagMultiPayload(v3, v31, 0);
    v34 = v23;
    v35 = v25;
    v26 = v28;
    v36 = v28;
    v37 = v29;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v34, &opaque type descriptor for <<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>, 1);
    _ConditionalContent<>.init(storage:)(v3, v9, v23, OpaqueTypeConformance2, v26);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v15, v9);
  }
  else
  {
    sub_10000928C((uint64_t)v8, (uint64_t)v3, &qword_1000987B0);
    swift_storeEnumTagMultiPayload(v3, v31, 1);
    v18 = sub_100008B6C(&qword_1000987C0, &qword_1000987B0, (void (*)(void))sub_100008D04);
    v19 = sub_100007D90(&qword_1000987F8, (uint64_t (*)(uint64_t))&type metadata accessor for AutomaticHoverEffect, (uint64_t)&protocol conformance descriptor for AutomaticHoverEffect);
    v34 = v6;
    v35 = v32;
    v36 = v18;
    v37 = v19;
    v20 = swift_getOpaqueTypeConformance2(&v34, &opaque type descriptor for <<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>, 1);
    _ConditionalContent<>.init(storage:)(v3, v9, v6, v20, v18);
    return sub_1000092D0((uint64_t)v8, &qword_1000987B0);
  }
}

uint64_t sub_100006BE8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  id v21;
  uint64_t v22;
  ValueMetadata *v23;
  ValueMetadata *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t OpaqueTypeConformance2;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  char v38[16];
  uint64_t v39;
  uint64_t v40;
  ValueMetadata *v41;
  uint64_t v42;
  unint64_t v43;

  v2 = v1;
  v37 = a1;
  v3 = sub_10000498C(&qword_1000987D8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10000498C(&qword_100098800);
  v36 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10000498C(&qword_1000987D0);
  __chkstk_darwin(v10);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_OWORD *)swift_allocObject(&unk_10008E570, 80, 7);
  v14 = *(_OWORD *)(v2 + 16);
  v13[1] = *(_OWORD *)v2;
  v13[2] = v14;
  v15 = *(_OWORD *)(v2 + 48);
  v13[3] = *(_OWORD *)(v2 + 32);
  v13[4] = v15;
  v39 = v2;
  sub_100008E7C((uint64_t *)v2);
  v16 = type metadata accessor for FontPreview(0);
  v17 = sub_100007D90(&qword_100098808, type metadata accessor for FontPreview, (uint64_t)&unk_1000737C0);
  Button.init(action:label:)(sub_100008E6C, v13, sub_100008E74, v38, v16, v17);
  v18 = *(_BYTE *)(v2 + 41);
  LOBYTE(v40) = *(_BYTE *)(v2 + 40);
  BYTE1(v40) = v18;
  v19 = sub_10000966C(&qword_1000987E0, &qword_1000987D8, (uint64_t)&protocol conformance descriptor for Button<A>);
  v20 = sub_100008DE4();
  View.buttonStyle<A>(_:)(&v40, v3, &type metadata for FontPickerRecentsView.FontTile.FontTileButtonStyle, v19, v20);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v21 = objc_msgSend(*(id *)(v2 + 32), "localizedFamilyName");
  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
  v24 = v23;

  v40 = v22;
  v41 = v24;
  v25 = sub_100008EDC();
  v26 = Text.init<A>(_:)(&v40, &type metadata for String, v25);
  v28 = v27;
  v30 = v29;
  v40 = v3;
  v41 = &type metadata for FontPickerRecentsView.FontTile.FontTileButtonStyle;
  v32 = v31 & 1;
  v42 = v19;
  v43 = v20;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v40, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
  View.accessibility(label:)(v26, v28, v32, v30, v7, OpaqueTypeConformance2);
  sub_100008F20(v26, v28, v32);
  swift_bridgeObjectRelease(v30);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v9, v7);
  v34 = v37;
  sub_10000928C((uint64_t)v12, v37, &qword_1000987D0);
  *(_WORD *)(v34 + *(int *)(sub_10000498C(&qword_1000987B0) + 36)) = 256;
  return sub_1000092D0((uint64_t)v12, &qword_1000987D0);
}

uint64_t sub_100006EDC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[4];

  v2 = static Animation.spring(response:dampingFraction:blendDuration:)(0.5, 1.0, 0.0);
  v3 = Animation.speed(_:)(4.0);
  swift_release(v2);
  v6[2] = a1;
  withAnimation<A>(_:_:)(v3, sub_100008F74, v6, (char *)&type metadata for () + 8);
  v4 = swift_release(v3);
  return (*(uint64_t (**)(uint64_t))(a1 + 48))(v4);
}

uint64_t sub_100006F68(id *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  _QWORD v9[2];
  __int128 v10;
  __int128 v11;

  v2 = objc_msgSend(a1[4], "familyName");
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v5 = v4;

  v6 = *((_OWORD *)a1 + 1);
  v10 = *(_OWORD *)a1;
  v11 = v6;
  v9[0] = v3;
  v9[1] = v5;
  v7 = sub_10000498C(&qword_100098818);
  return Binding.wrappedValue.setter(v9, v7);
}

id sub_100006FF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  id v12;

  v4 = type metadata accessor for FontPreview(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(id *)(a1 + 32);
  *(_QWORD *)v7 = v12;
  *(_OWORD *)(v7 + 8) = xmmword_1000737A0;
  v8 = &v7[*(int *)(v5 + 28)];
  *(_QWORD *)v8 = swift_getKeyPath(&unk_1000736B8);
  v9 = sub_10000498C(&qword_100098510);
  swift_storeEnumTagMultiPayload(v8, v9, 0);
  sub_100008F30((uint64_t)v7, a2, type metadata accessor for FontPreview);
  return v12;
}

uint64_t sub_1000070C4@<X0>(int a1@<W1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  double v32;
  char *v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  double *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  double *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  double *v65;
  uint64_t v66;
  double *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;

  v72 = a1;
  v68 = a2;
  v66 = type metadata accessor for RoundedRectangle(0);
  v2 = __chkstk_darwin(v66);
  v67 = (double *)((char *)&v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v2);
  v65 = (double *)((char *)&v55 - v4);
  v56 = type metadata accessor for Material(0);
  __chkstk_darwin(v56);
  v55 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = sub_10000498C(&qword_100098830);
  __chkstk_darwin(v71);
  v7 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ButtonStyleConfiguration.Label(0);
  v70 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10000498C(&qword_100098838);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = sub_10000498C(&qword_100098840);
  __chkstk_darwin(v69);
  v16 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = sub_10000498C(&qword_100098848);
  __chkstk_darwin(v57);
  v60 = (uint64_t)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = sub_10000498C(&qword_100098850);
  __chkstk_darwin(v58);
  v62 = (char *)&v55 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = sub_10000498C(&qword_100098858);
  __chkstk_darwin(v59);
  v64 = (char *)&v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = sub_10000498C(&qword_100098860);
  v20 = __chkstk_darwin(v61);
  v63 = (char *)&v55 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  ButtonStyleConfiguration.label.getter(v20);
  v22 = enum case for DynamicTypeSize.accessibility3(_:);
  v23 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v7, v22, v23);
  v24 = sub_100007D90(&qword_100098868, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  result = dispatch thunk of static Equatable.== infix(_:_:)(v7, v7, v23, v24);
  if ((result & 1) != 0)
  {
    v26 = sub_100007D90(&qword_100098870, (uint64_t (*)(uint64_t))&type metadata accessor for ButtonStyleConfiguration.Label, (uint64_t)&protocol conformance descriptor for ButtonStyleConfiguration.Label);
    v27 = sub_10000966C(&qword_100098878, &qword_100098830, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
    View.dynamicTypeSize<A>(_:)(v7, v8, v71, v26, v27);
    sub_1000092D0((uint64_t)v7, &qword_100098830);
    v28 = (*(uint64_t (**)(char *, uint64_t))(v70 + 8))(v10, v8);
    LODWORD(v26) = static HierarchicalShapeStyle.primary.getter(v28);
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v16, v14, v11);
    *(_DWORD *)&v16[*(int *)(v69 + 36)] = v26;
    v29 = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    v30 = v72;
    if ((v72 & 0x100) != 0)
    {
      v33 = v55;
      static Material.regular.getter(v29);
      v31 = AnyShapeStyle.init<A>(_:)(v33, v56, &protocol witness table for Material);
      v32 = 15.0;
      LODWORD(v71) = 256;
      goto LABEL_6;
    }
    result = (uint64_t)objc_msgSend((id)objc_opt_self(UIColor), "tableCellGroupedBackgroundColor");
    if (result)
    {
      v73 = Color.init(uiColor:)();
      v31 = AnyShapeStyle.init<A>(_:)(&v73, &type metadata for Color, &protocol witness table for Color);
      LODWORD(v71) = 0;
      v32 = 10.0;
LABEL_6:
      v72 = v30 & 1;
      v34 = static Edge.Set.all.getter();
      v35 = v60;
      sub_10000928C((uint64_t)v16, v60, &qword_100098840);
      v36 = v35 + *(int *)(v57 + 36);
      *(_QWORD *)v36 = v31;
      *(_BYTE *)(v36 + 8) = v34;
      sub_1000092D0((uint64_t)v16, &qword_100098840);
      v37 = v65;
      v38 = v66;
      v39 = (char *)v65 + *(int *)(v66 + 20);
      v40 = enum case for RoundedCornerStyle.continuous(_:);
      v41 = type metadata accessor for RoundedCornerStyle(0);
      v42 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 104);
      v42(v39, v40, v41);
      *v37 = v32;
      v37[1] = v32;
      v43 = (uint64_t)v62;
      v44 = (uint64_t)&v62[*(int *)(v58 + 36)];
      sub_10000920C((uint64_t)v37, v44, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
      *(_WORD *)(v44 + *(int *)(sub_10000498C(&qword_100098880) + 36)) = 256;
      sub_10000928C(v35, v43, &qword_100098848);
      sub_100009250((uint64_t)v37, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
      v45 = sub_1000092D0(v35, &qword_100098848);
      v46 = static Alignment.center.getter(v45);
      v48 = v47;
      v49 = (uint64_t)v64;
      v50 = (uint64_t)&v64[*(int *)(v59 + 36)];
      sub_100007748(v71 | v72, v50);
      v51 = (uint64_t *)(v50 + *(int *)(sub_10000498C(&qword_100098888) + 36));
      *v51 = v46;
      v51[1] = v48;
      sub_10000930C(v43, v49, &qword_100098850);
      v52 = v67;
      v42((char *)v67 + *(int *)(v38 + 20), v40, v41);
      *v52 = v32;
      v52[1] = v32;
      v53 = (uint64_t)v63;
      v54 = (uint64_t)&v63[*(int *)(v61 + 36)];
      sub_10000920C((uint64_t)v52, v54, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
      *(_BYTE *)(v54 + *(int *)(sub_10000498C(&qword_100098890) + 36)) = 0;
      sub_10000928C(v49, v53, &qword_100098858);
      sub_100009250((uint64_t)v52, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
      sub_1000092D0(v49, &qword_100098858);
      return sub_10000930C(v53, v68, &qword_100098860);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100007748@<X0>(__int16 a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  double *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  double v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v27;
  _OWORD v28[2];
  uint64_t v29;

  v4 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v4);
  v6 = (double *)((char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_10000498C(&qword_100098898);
  __chkstk_darwin(v7);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 0x100) != 0)
    v10 = 15.0;
  else
    v10 = 10.0;
  v11 = (char *)v6 + *(int *)(v4 + 20);
  v12 = enum case for RoundedCornerStyle.continuous(_:);
  v13 = type metadata accessor for RoundedCornerStyle(0);
  v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v11, v12, v13);
  *v6 = v10;
  v6[1] = v10;
  if ((a1 & 1) != 0)
  {
    if ((a1 & 0x100) != 0)
    {
      LODWORD(v28[0]) = static HierarchicalShapeStyle.primary.getter(v14);
      v15 = AnyShapeStyle.init<A>(_:)(v28, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
      v16.n128_u64[0] = 1.0;
    }
    else
    {
      *(_QWORD *)&v28[0] = static Color.accentColor.getter(v14);
      v15 = AnyShapeStyle.init<A>(_:)(v28, &type metadata for Color, &protocol witness table for Color);
      v16.n128_u64[0] = 2.0;
    }
  }
  else
  {
    *(_QWORD *)&v28[0] = static Color.clear.getter(v14);
    v15 = AnyShapeStyle.init<A>(_:)(v28, &type metadata for Color, &protocol witness table for Color);
    v16.n128_u64[0] = 0;
  }
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v28, 1, 0, &_swiftEmptyArrayStorage, v16, 0.0, 0.0);
  sub_10000920C((uint64_t)v6, (uint64_t)v9, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v17 = *(double *)v28 * 0.5;
  v18 = (uint64_t)&v9[*(int *)(v7 + 68)];
  sub_10000920C((uint64_t)v6, v18, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(double *)(v18 + *(int *)(type metadata accessor for RoundedRectangle._Inset(0) + 20)) = v17;
  v19 = v18 + *(int *)(sub_10000498C(&qword_1000988A0) + 36);
  v20 = v28[1];
  *(_OWORD *)v19 = v28[0];
  *(_OWORD *)(v19 + 16) = v20;
  *(_QWORD *)(v19 + 32) = v29;
  v21 = sub_10000498C(&qword_1000988A8);
  *(_QWORD *)(v18 + *(int *)(v21 + 52)) = v15;
  *(_WORD *)(v18 + *(int *)(v21 + 56)) = 256;
  v22 = static Alignment.center.getter();
  v24 = v23;
  v25 = (uint64_t *)(v18 + *(int *)(sub_10000498C(&qword_1000988B0) + 36));
  *v25 = v22;
  v25[1] = v24;
  sub_100009250((uint64_t)v6, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  return sub_10000930C((uint64_t)v9, a2, &qword_100098898);
}

uint64_t sub_1000079CC@<X0>(uint64_t a1@<X8>)
{
  unsigned __int8 *v1;
  int v2;

  if (v1[1])
    v2 = 256;
  else
    v2 = 0;
  return sub_1000070C4(v2 | *v1, a1);
}

uint64_t sub_1000079F0()
{
  return static View._viewListCount(inputs:)();
}

uint64_t sub_100007A08@<X0>(uint64_t a1@<X8>)
{
  return sub_1000068AC(a1);
}

uint64_t sub_100007A44()
{
  return EnvironmentValues.fontResolutionContext.getter();
}

uint64_t sub_100007A68(uint64_t a1, uint64_t a2)
{
  return sub_100007F48(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

_QWORD *sub_100007A80@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

Swift::Int sub_100007A9C()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100007AE0()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100007B08(uint64_t a1)
{
  Swift::UInt *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_100007B48(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100078B58, 1);
}

uint64_t sub_100007B5C(uint64_t a1, id *a2)
{
  uint64_t result;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  v5 = v8;
  if (v8)
  {
    v6 = String._bridgeToObjectiveC()();
    result = swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_100007BD0(uint64_t a1, id *a2)
{
  char v4;
  uint64_t v5;
  NSString v6;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_100007C4C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  NSString v4;
  uint64_t result;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = v2;
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a1 = v4;
  return result;
}

uint64_t sub_100007C8C(uint64_t a1, uint64_t a2)
{
  return sub_100007F48(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

BOOL sub_100007C98(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_100007CAC@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_100007CD4(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_100007CE0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100007D90(&qword_100098640, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_100073050);
  v3 = sub_100007D90(&qword_100098648, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_100072FF0);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100007D64()
{
  return sub_100007D90(&qword_1000985D8, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_100072FB4);
}

uint64_t sub_100007D90(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100007DD0()
{
  return sub_100007D90(&qword_1000985E0, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_100072F88);
}

uint64_t sub_100007DFC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100007D90(&qword_100098630, (uint64_t (*)(uint64_t))type metadata accessor for ComponentKey, (uint64_t)&unk_1000731E4);
  v3 = sub_100007D90(&qword_100098638, (uint64_t (*)(uint64_t))type metadata accessor for ComponentKey, (uint64_t)&unk_100073184);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100007E80@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  NSString v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_100007EC4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100007D90(&qword_100098620, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_100073348);
  v3 = sub_100007D90(&qword_100098628, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1000732E8);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100007F48(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  v7 = v6;
  v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_100007F84(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100007FC4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

uint64_t sub_100008034(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_1000080BC()
{
  return sub_100007D90(&qword_1000985E8, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_100073024);
}

uint64_t sub_1000080E8()
{
  return sub_100007D90(&qword_1000985F0, (uint64_t (*)(uint64_t))type metadata accessor for ComponentKey, (uint64_t)&unk_100073148);
}

uint64_t sub_100008114()
{
  return sub_100007D90(&qword_1000985F8, (uint64_t (*)(uint64_t))type metadata accessor for ComponentKey, (uint64_t)&unk_10007311C);
}

uint64_t sub_100008140()
{
  return sub_100007D90(&qword_100098600, (uint64_t (*)(uint64_t))type metadata accessor for ComponentKey, (uint64_t)&unk_1000731B8);
}

uint64_t sub_10000816C()
{
  return sub_100007D90(&qword_100098608, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1000732AC);
}

uint64_t sub_100008198()
{
  return sub_100007D90(&qword_100098610, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_100073280);
}

uint64_t sub_1000081C4()
{
  return sub_100007D90(&qword_100098618, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_10007331C);
}

void *sub_1000081F0()
{
  return &protocol witness table for ObservableObjectPublisher;
}

uint64_t sub_1000081FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100005F08(*(_QWORD *)(v1 + 16), a1);
}

const char *sub_100008204()
{
  return "familyName";
}

uint64_t sub_100008210()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = (int *)type metadata accessor for FontPickerRecentsView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  sub_100004A84(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = (_QWORD *)(v0 + v4 + v1[5]);
  v8 = sub_10000498C(&qword_100098510);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for Font.Context(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  v10 = v3 | 7;
  v11 = v4 + v5;
  v12 = v6 + v1[6];
  swift_bridgeObjectRelease(*(_QWORD *)(v12 + 8));
  swift_release(*(_QWORD *)(v12 + 16));
  swift_release(*(_QWORD *)(v6 + v1[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[9]));
  return swift_deallocObject(v0, v11, v10);
}

id sub_100008308@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FontPickerRecentsView(0) - 8) + 80);
  return sub_100006200(a1, v2 + ((v5 + 16) & ~v5), a2);
}

unint64_t sub_100008354()
{
  unint64_t result;

  result = qword_1000986C8;
  if (!qword_1000986C8)
  {
    result = swift_getWitnessTable(&unk_1000736FC, &type metadata for FontPickerRecentsView.FontTile);
    atomic_store(result, (unint64_t *)&qword_1000986C8);
  }
  return result;
}

uint64_t sub_100008398()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v1 = (int *)type metadata accessor for FontPickerRecentsView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  sub_100004A84(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = (_QWORD *)(v0 + v4 + v1[5]);
  v8 = sub_10000498C(&qword_100098510);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for Font.Context(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  v10 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = v6 + v1[6];
  swift_bridgeObjectRelease(*(_QWORD *)(v11 + 8));
  swift_release(*(_QWORD *)(v11 + 16));
  swift_release(*(_QWORD *)(v6 + v1[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[9]));

  return swift_deallocObject(v0, v10 + 8, v3 | 7);
}

uint64_t sub_1000084A4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for FontPickerRecentsView(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_100006804((uint64_t *)(v0 + v2), *(_QWORD *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1000084E4()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100008510(void *a1)
{
  uint64_t v1;

  sub_10000374C(a1, *(void (**)(void))(v1 + 16));
}

uint64_t sub_100008518()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10000853C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

_QWORD *sub_10000854C(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __objc2_prot_list *v6;
  id v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23[2];
  _QWORD *v24;

  v1 = a1;
  v24 = &_swiftEmptyArrayStorage;
  if (a1 >> 62)
    goto LABEL_19;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v2)
  {
    while (1)
    {
      v22 = v1;
      v3 = 0;
      v4 = v1 & 0xC000000000000001;
      v5 = v1 & 0xFFFFFFFFFFFFFF8;
      v6 = &UIScrollViewDelegate__prots;
      while (v4)
      {
        v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3, v1);
LABEL_9:
        v8 = v7;
        v9 = v3 + 1;
        if (__OFADD__(v3, 1))
          goto LABEL_18;
        if (objc_msgSend(v7, (SEL)v6[464].count))
        {
          v10 = v5;
          v11 = v2;
          v12 = v4;
          v13 = objc_msgSend(v8, "familyName");
          v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
          v16 = v15;

          LOBYTE(v13) = sub_10001463C(v23, v14, v16);
          v17 = swift_bridgeObjectRelease(v23[1]);
          if ((v13 & 1) != 0)
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v17);
            v18 = v24[2];
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v18);
            v19 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v8);
            specialized ContiguousArray._endMutation()(v19);
          }
          else
          {

          }
          v4 = v12;
          v2 = v11;
          v5 = v10;
          v1 = v22;
          v6 = &UIScrollViewDelegate__prots;
        }
        else
        {

        }
        ++v3;
        if (v9 == v2)
          return v24;
      }
      if (v3 < *(_QWORD *)(v5 + 16))
        break;
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      if (v1 < 0)
        v21 = v1;
      else
        v21 = v1 & 0xFFFFFFFFFFFFFF8;
      v2 = _CocoaArrayWrapper.endIndex.getter(v21);
      if (!v2)
        return &_swiftEmptyArrayStorage;
    }
    v7 = *(id *)(v1 + 8 * v3 + 32);
    goto LABEL_9;
  }
  return &_swiftEmptyArrayStorage;
}

uint64_t sub_100008710()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t initializeBufferWithCopyOfBuffer for FontPickerRecentsView.FontTile(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t destroy for FontPickerRecentsView.FontTile(uint64_t a1)
{
  swift_release(*(_QWORD *)a1);
  swift_release(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));

  return swift_release(*(_QWORD *)(a1 + 56));
}

uint64_t initializeWithCopy for FontPickerRecentsView.FontTile(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v5;
  v6 = (void *)a2[4];
  *(_QWORD *)(a1 + 32) = v6;
  *(_WORD *)(a1 + 40) = *((_WORD *)a2 + 20);
  v7 = a2[7];
  *(_QWORD *)(a1 + 48) = a2[6];
  *(_QWORD *)(a1 + 56) = v7;
  swift_retain(v3);
  swift_retain(v4);
  swift_bridgeObjectRetain(v5);
  v8 = v6;
  swift_retain(v7);
  return a1;
}

uint64_t *assignWithCopy for FontPickerRecentsView.FontTile(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = (void *)a2[4];
  v11 = (void *)a1[4];
  a1[4] = (uint64_t)v10;
  v12 = v10;

  *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
  *((_BYTE *)a1 + 41) = *((_BYTE *)a2 + 41);
  v14 = a2[6];
  v13 = a2[7];
  v15 = a1[7];
  a1[6] = v14;
  a1[7] = v13;
  swift_retain(v13);
  swift_release(v15);
  return a1;
}

__n128 initializeWithTake for FontPickerRecentsView.FontTile(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for FontPickerRecentsView.FontTile(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;

  swift_release(*(_QWORD *)a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v5 = *(void **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  v6 = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for FontPickerRecentsView.FontTile(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FontPickerRecentsView.FontTile(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FontPickerRecentsView.FontTile()
{
  return &type metadata for FontPickerRecentsView.FontTile;
}

__n128 _s7SectionVwtk(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  sub_100008A7C(a1, &qword_100098770, (uint64_t)&unk_10008E4C8, (uint64_t (*)(_QWORD, uint64_t))&swift_getForeignTypeMetadata);
}

uint64_t sub_100008A18(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100008A38(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_100008A7C(a1, &qword_100098778, (uint64_t)&unk_10008E548, (uint64_t (*)(_QWORD, uint64_t))&swift_getForeignTypeMetadata);
}

void sub_100008A7C(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v5 = a4(0, a3);
    if (!v6)
      atomic_store(v5, a2);
  }
}

unint64_t sub_100008AC4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100098780;
  if (!qword_100098780)
  {
    v1 = sub_100004660(&qword_100098788);
    sub_100008B6C(&qword_100098790, &qword_100098680, (void (*)(void))sub_100008B48);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100098780);
  }
  return result;
}

uint64_t sub_100008B48()
{
  return sub_100008B6C(&qword_100098798, &qword_100098678, (void (*)(void))sub_100008BD4);
}

uint64_t sub_100008B6C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100004660(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100008BD4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;

  result = qword_1000987A0;
  if (!qword_1000987A0)
  {
    v1 = sub_100004660(&qword_100098670);
    v2 = sub_100004660(&qword_100098660);
    v3 = sub_100004660(&qword_100098658);
    v6 = sub_100004660(&qword_100098650);
    v7 = (void *)sub_10000966C(&qword_1000986A8, &qword_100098650, (uint64_t)&protocol conformance descriptor for ScrollView<A>);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.scrollIndicators(_:axes:)>>, 1);
    v6 = v3;
    v7 = (void *)OpaqueTypeConformance2;
    v5 = swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.scrollClipDisabled(_:)>>, 1);
    v6 = v2;
    v7 = &type metadata for String;
    v8 = v5;
    v9 = &protocol witness table for String;
    swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.scrollPosition<A>(id:anchor:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000987A0);
  }
  return result;
}

uint64_t sub_100008CF4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100078B9C, 1);
}

unint64_t sub_100008D04()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_1000987C8;
  if (!qword_1000987C8)
  {
    v1 = sub_100004660(&qword_1000987D0);
    v2[0] = sub_100004660(&qword_1000987D8);
    v2[1] = &type metadata for FontPickerRecentsView.FontTile.FontTileButtonStyle;
    v2[2] = sub_10000966C(&qword_1000987E0, &qword_1000987D8, (uint64_t)&protocol conformance descriptor for Button<A>);
    v2[3] = sub_100008DE4();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    sub_100007D90(&qword_1000987F0, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000987C8);
  }
  return result;
}

unint64_t sub_100008DE4()
{
  unint64_t result;

  result = qword_1000987E8;
  if (!qword_1000987E8)
  {
    result = swift_getWitnessTable(&unk_100073764, &type metadata for FontPickerRecentsView.FontTile.FontTileButtonStyle);
    atomic_store(result, (unint64_t *)&qword_1000987E8);
  }
  return result;
}

uint64_t sub_100008E28()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));

  swift_release(*(_QWORD *)(v0 + 72));
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_100008E6C()
{
  uint64_t v0;

  return sub_100006EDC(v0 + 16);
}

id sub_100008E74@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100006FF8(*(_QWORD *)(v1 + 16), a1);
}

uint64_t *sub_100008E7C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;

  v2 = *a1;
  v3 = a1[1];
  v4 = (void *)a1[4];
  v5 = a1[7];
  swift_bridgeObjectRetain(a1[3]);
  v6 = v4;
  swift_retain(v5);
  swift_retain(v2);
  swift_retain(v3);
  return a1;
}

unint64_t sub_100008EDC()
{
  unint64_t result;

  result = qword_100098810;
  if (!qword_100098810)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100098810);
  }
  return result;
}

uint64_t sub_100008F20(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_release(a1);
  else
    return swift_bridgeObjectRelease(a2);
}

uint64_t sub_100008F30(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100008F74()
{
  uint64_t v0;

  return sub_100006F68(*(id **)(v0 + 16));
}

_WORD *initializeBufferWithCopyOfBuffer for FontPickerRecentsView.FontTile.FontTileButtonStyle(_WORD *result, _WORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for FontPickerRecentsView.FontTile.FontTileButtonStyle(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 65281 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65281 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65281;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65281;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65281;
  }
LABEL_17:
  v6 = *(unsigned __int8 *)a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FontPickerRecentsView.FontTile.FontTileButtonStyle(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100009088 + 4 * byte_100072CBD[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_1000090BC + 4 * byte_100072CB8[v4]))();
}

uint64_t sub_1000090BC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_1000090C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x1000090CCLL);
  return result;
}

uint64_t sub_1000090D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x1000090E0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000090E4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_1000090EC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FontPickerRecentsView.FontTile.FontTileButtonStyle()
{
  return &type metadata for FontPickerRecentsView.FontTile.FontTileButtonStyle;
}

unint64_t sub_10000910C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_100098820;
  if (!qword_100098820)
  {
    v1 = sub_100004660(&qword_100098828);
    v2[0] = sub_100004660(&qword_1000987B0);
    v2[1] = type metadata accessor for AutomaticHoverEffect(255);
    v2[2] = sub_100008B6C(&qword_1000987C0, &qword_1000987B0, (void (*)(void))sub_100008D04);
    v2[3] = sub_100007D90(&qword_1000987F8, (uint64_t (*)(uint64_t))&type metadata accessor for AutomaticHoverEffect, (uint64_t)&protocol conformance descriptor for AutomaticHoverEffect);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100098820);
  }
  return result;
}

uint64_t sub_1000091FC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100078BC4, 1);
}

uint64_t sub_10000920C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100009250(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10000928C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_10000498C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000092D0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_10000498C(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10000930C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_10000498C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_100009354()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000988B8;
  if (!qword_1000988B8)
  {
    v1 = sub_100004660(&qword_100098860);
    sub_1000093D8();
    sub_10000966C(&qword_100098910, &qword_100098890, (uint64_t)&protocol conformance descriptor for _ContentShapeModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000988B8);
  }
  return result;
}

unint64_t sub_1000093D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000988C0;
  if (!qword_1000988C0)
  {
    v1 = sub_100004660(&qword_100098858);
    sub_10000945C();
    sub_10000966C(&qword_100098908, &qword_100098888, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000988C0);
  }
  return result;
}

unint64_t sub_10000945C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000988C8;
  if (!qword_1000988C8)
  {
    v1 = sub_100004660(&qword_100098850);
    sub_1000094E0();
    sub_10000966C(&qword_100098900, &qword_100098880, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000988C8);
  }
  return result;
}

unint64_t sub_1000094E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000988D0;
  if (!qword_1000988D0)
  {
    v1 = sub_100004660(&qword_100098848);
    sub_100009564();
    sub_10000966C(&qword_1000988F0, &qword_1000988F8, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000988D0);
  }
  return result;
}

unint64_t sub_100009564()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_1000988D8;
  if (!qword_1000988D8)
  {
    v1 = sub_100004660(&qword_100098840);
    v2[0] = type metadata accessor for ButtonStyleConfiguration.Label(255);
    v2[1] = sub_100004660(&qword_100098830);
    v2[2] = sub_100007D90(&qword_100098870, (uint64_t (*)(uint64_t))&type metadata accessor for ButtonStyleConfiguration.Label, (uint64_t)&protocol conformance descriptor for ButtonStyleConfiguration.Label);
    v2[3] = sub_10000966C(&qword_100098878, &qword_100098830, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
    sub_10000966C(&qword_1000988E0, &qword_1000988E8, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000988D8);
  }
  return result;
}

uint64_t sub_10000966C(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100004660(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000096AC(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_1000096E4()
{
  type metadata accessor for _UIFontPickerRecentsView(0);
  return type metadata accessor for _UITextFormattingServiceViewController(0);
}

char *sub_100009728(char *a1, char **a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = &v5[(v4 + 16) & ~(unint64_t)v4];
    swift_retain(v5);
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    v6 = *(int *)(a3 + 28);
    v7 = &a1[v6];
    v8 = (uint64_t *)((char *)a2 + v6);
    v9 = v5;
    v10 = sub_10000498C(&qword_100098510);
    if (swift_getEnumCaseMultiPayload(v8, v10) == 1)
    {
      v11 = type metadata accessor for Font.Context(0);
      (*(void (**)(char *, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v7, v8, v11);
      v12 = v7;
      v13 = v10;
      v14 = 1;
    }
    else
    {
      v15 = *v8;
      *(_QWORD *)v7 = *v8;
      swift_retain(v15);
      v12 = v7;
      v13 = v10;
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v12, v13, v14);
  }
  return a1;
}

uint64_t sub_100009804(id *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (id *)((char *)a1 + *(int *)(a2 + 28));
  v5 = sub_10000498C(&qword_100098510);
  if (swift_getEnumCaseMultiPayload(v4, v5) != 1)
    return swift_release(*v4);
  v6 = type metadata accessor for Font.Context(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
}

uint64_t sub_10000987C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v5 = *(int *)(a3 + 28);
  v6 = (uint64_t *)(a1 + v5);
  v7 = (uint64_t *)(a2 + v5);
  v8 = v4;
  v9 = sub_10000498C(&qword_100098510);
  if (swift_getEnumCaseMultiPayload(v7, v9) == 1)
  {
    v10 = type metadata accessor for Font.Context(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v6, v7, v10);
    v11 = 1;
  }
  else
  {
    v12 = *v7;
    *v6 = *v7;
    swift_retain(v12);
    v11 = 0;
  }
  swift_storeEnumTagMultiPayload(v6, v9, v11);
  return a1;
}

uint64_t sub_10000992C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *(void **)a2;
  v7 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v6;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  if (a1 != a2)
  {
    v9 = *(int *)(a3 + 28);
    v10 = (uint64_t *)(a1 + v9);
    v11 = (uint64_t *)(a2 + v9);
    sub_1000092D0(a1 + v9, &qword_100098510);
    v12 = sub_10000498C(&qword_100098510);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = type metadata accessor for Font.Context(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v11, v13);
      v14 = 1;
    }
    else
    {
      v15 = *v11;
      *v10 = *v11;
      swift_retain(v15);
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v12, v14);
  }
  return a1;
}

uint64_t sub_100009A0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 28);
  v5 = (void *)(a1 + v4);
  v6 = (const void *)(a2 + v4);
  v7 = sub_10000498C(&qword_100098510);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for Font.Context(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v5, v6, v8);
    swift_storeEnumTagMultiPayload(v5, v7, 1);
  }
  else
  {
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  return a1;
}

uint64_t sub_100009ABC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  if (a1 != a2)
  {
    v7 = *(int *)(a3 + 28);
    v8 = (void *)(a1 + v7);
    v9 = (const void *)(a2 + v7);
    sub_1000092D0(a1 + v7, &qword_100098510);
    v10 = sub_10000498C(&qword_100098510);
    if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
    {
      v11 = type metadata accessor for Font.Context(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
      swift_storeEnumTagMultiPayload(v8, v10, 1);
    }
    else
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100009B94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100009BA0);
}

uint64_t sub_100009BA0(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_10000498C(&qword_100098518);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 28)], a2, v8);
  }
}

uint64_t sub_100009C20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100009C2C);
}

char *sub_100009C2C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_10000498C(&qword_100098518);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 28)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for FontPreview(uint64_t a1)
{
  uint64_t result;

  result = qword_100098A38;
  if (!qword_100098A38)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FontPreview);
  return result;
}

void sub_100009CE0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  sub_100009D68(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
  }
}

void sub_100009D68(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100098588)
  {
    v2 = type metadata accessor for Font.Context(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100098588);
  }
}

uint64_t sub_100009DBC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100078C14, 1);
}

uint64_t sub_100009DCC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  double v14;
  double v15;
  id v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  __int128 v27;
  _OWORD v29[3];

  v2 = v1;
  v4 = sub_10000498C(&qword_100098A78);
  __chkstk_darwin(v4);
  v6 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Font.Context(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = static Font.body.getter(v9);
  type metadata accessor for FontPreview(0);
  sub_1000117D4((uint64_t)v11);
  v13 = (void *)Font.platformFont(in:)(v11, v12);
  swift_release(v12);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  objc_msgSend(v13, "pointSize");
  v15 = v14;
  v16 = objc_msgSend(v13, "capHeight");
  v18 = v17 * 0.5;
  v19 = *(double *)(v2 + 8);
  if (v15 * 2.5 > v19)
    v20 = v15 * 2.5;
  else
    v20 = *(double *)(v2 + 8);
  if (v20 > v19)
    v21 = v20;
  else
    v21 = *(double *)(v2 + 8);
  *(_QWORD *)v6 = static VerticalAlignment.center.getter(v16);
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 0;
  v22 = sub_10000498C(&qword_100098A80);
  v23 = sub_100009FCC(v2, (uint64_t)&v6[*(int *)(v22 + 44)], v15, v18, v20, v21);
  v24 = static Alignment.center.getter(v23);
  _FrameLayout.init(width:height:alignment:)(v29, 0, 1, *(_QWORD *)&v21, 0, v24, v25);
  sub_10000928C((uint64_t)v6, a1, &qword_100098A78);

  v26 = (_OWORD *)(a1 + *(int *)(sub_10000498C(&qword_100098A88) + 36));
  v27 = v29[1];
  *v26 = v29[0];
  v26[1] = v27;
  v26[2] = v29[2];
  return sub_1000092D0((uint64_t)v6, &qword_100098A78);
}

uint64_t sub_100009FCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id *v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  _OWORD *v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  int v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  uint64_t KeyPath;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _DWORD v118[2];
  _DWORD v119[2];
  _DWORD v120[2];
  _BYTE v121[7];
  unsigned __int8 v122;
  _BYTE v123[7];
  unsigned __int8 v124;
  _BYTE v125[7];
  unsigned __int8 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  _BYTE v139[7];
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  __int128 v143;
  uint64_t v144;
  double (*v145)();
  uint64_t v146;
  uint64_t v147;
  char v148;
  _BYTE v149[7];
  uint64_t v150;
  char v151;
  _BYTE v152[7];
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unsigned __int8 v156;
  uint64_t v157;
  unsigned __int8 v158;
  uint64_t v159;
  uint64_t v160;

  v104 = a2;
  v103 = type metadata accessor for Divider(0);
  v11 = *(_QWORD *)(v103 - 8);
  __chkstk_darwin(v103);
  v13 = (char *)&v96 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = sub_10000498C(&qword_100098A90);
  v14 = __chkstk_darwin(v102);
  v105 = (char *)&v96 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v117 = (uint64_t)&v96 - v16;
  v17 = type metadata accessor for FontPreview(0);
  __chkstk_darwin(v17);
  v19 = (id *)((char *)&v96 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = *(id *)a1;
  v21 = objc_msgSend(*(id *)a1, "preferredShortPreviewString");
  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
  v24 = v23;

  v136 = v22;
  v137 = v24;
  v101 = sub_100008EDC();
  v25 = Text.init<A>(_:)(&v136, &type metadata for String, v101);
  v114 = v26;
  v115 = v25;
  v28 = v27;
  v116 = v29;
  KeyPath = swift_getKeyPath(&unk_100073810);
  v30 = objc_msgSend(v20, "postscriptName");
  if (!v30)
  {
    sub_10000A77C(a1, (uint64_t)v19);
LABEL_5:
    v35 = objc_msgSend(*v19, "fontDescriptor");
    v36 = objc_msgSend(v35, "postscriptName");

    v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
    v34 = v37;

    goto LABEL_6;
  }
  v31 = v30;
  v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
  v34 = v33;

  sub_10000A77C(a1, (uint64_t)v19);
  if (!v34)
    goto LABEL_5;
LABEL_6:
  sub_10000A7C0((uint64_t)v19);
  *((_QWORD *)&v112 + 1) = static Font.custom(_:fixedSize:)(v32, v34, a3);
  swift_bridgeObjectRelease(v34);
  *(_QWORD *)&v112 = swift_getKeyPath(&unk_100073840);
  v111 = static VerticalAlignment.center.getter(v112);
  v38 = swift_allocObject(&unk_10008E760, 24, 7);
  v110 = v38;
  *(double *)(v38 + 16) = a4;
  v39 = static Alignment.center.getter(v38);
  v41 = _FrameLayout.init(width:height:alignment:)(&v155, *(_QWORD *)&a5, 0, *(_QWORD *)&a6, 0, v39, v40);
  v107 = v155;
  v108 = v157;
  v109 = v159;
  v106 = v160;
  v126 = v28 & 1;
  v124 = v156;
  v122 = v158;
  v42 = Divider.init()(v41);
  v43 = static Edge.Set.vertical.getter(v42);
  v44 = v43;
  v45 = a1;
  v46 = EdgeInsets.init(_all:)(v43, *(double *)(a1 + 16) + -2.0);
  v48 = v47;
  v50 = v49;
  v52 = v51;
  v53 = (uint64_t)v105;
  v54 = v103;
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v105, v13, v103);
  v55 = v53 + *(int *)(v102 + 36);
  *(_BYTE *)v55 = v44;
  *(double *)(v55 + 8) = v46;
  *(_QWORD *)(v55 + 16) = v48;
  *(_QWORD *)(v55 + 24) = v50;
  *(_QWORD *)(v55 + 32) = v52;
  *(_BYTE *)(v55 + 40) = 0;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v54);
  sub_10000A818(v53, v117);
  v56 = objc_msgSend(*(id *)a1, "localizedFullName");
  v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
  v59 = v58;

  v136 = v57;
  v137 = v59;
  v60 = Text.init<A>(_:)(&v136, &type metadata for String, v101);
  v62 = v61;
  v64 = v63;
  v66 = v65 & 1;
  v67 = static Font.body.getter();
  v68 = Text.font(_:)(v67, v60, v62, v66, v64);
  v102 = v69;
  v103 = v70;
  LOBYTE(v59) = v71;
  swift_release(v67);
  LOBYTE(v67) = v59 & 1;
  sub_100008F20(v60, v62, v66);
  v72 = swift_bridgeObjectRelease(v64);
  v73 = static Edge.Set.horizontal.getter(v72);
  v98 = v73;
  v74 = EdgeInsets.init(_all:)(v73, *(double *)(v45 + 16));
  v76 = v75;
  v78 = v77;
  v80 = v79;
  v97 = static VerticalAlignment.center.getter(v81);
  v82 = swift_allocObject(&unk_10008E788, 24, 7);
  *(double *)(v82 + 16) = a4;
  LOBYTE(v59) = v126;
  v120[0] = *(_DWORD *)v125;
  *(_DWORD *)((char *)v120 + 3) = *(_DWORD *)&v125[3];
  LOBYTE(v60) = v124;
  v99 = v124;
  v119[0] = *(_DWORD *)v123;
  *(_DWORD *)((char *)v119 + 3) = *(_DWORD *)&v123[3];
  LOBYTE(v45) = v122;
  v100 = v122;
  LODWORD(v101) = v126;
  v118[0] = *(_DWORD *)v121;
  *(_DWORD *)((char *)v118 + 3) = *(_DWORD *)&v121[3];
  v83 = v117;
  sub_10000928C(v117, v53, &qword_100098A90);
  *(_QWORD *)&v127 = v115;
  *((_QWORD *)&v127 + 1) = v114;
  LOBYTE(v128) = v59;
  *(_DWORD *)((char *)&v128 + 1) = *(_DWORD *)v125;
  DWORD1(v128) = *(_DWORD *)&v125[3];
  *((_QWORD *)&v128 + 1) = v116;
  *(_QWORD *)&v129 = KeyPath;
  *((_QWORD *)&v129 + 1) = 0x3FE0000000000000;
  v130 = v112;
  *(_QWORD *)&v131 = v111;
  *((_QWORD *)&v131 + 1) = sub_10000A814;
  *(_QWORD *)&v132 = v110;
  *((_QWORD *)&v132 + 1) = v107;
  LOBYTE(v133) = v60;
  DWORD1(v133) = *(_DWORD *)&v123[3];
  *(_DWORD *)((char *)&v133 + 1) = *(_DWORD *)v123;
  *((_QWORD *)&v133 + 1) = v108;
  LOBYTE(v134) = v45;
  DWORD1(v134) = *(_DWORD *)&v121[3];
  *(_DWORD *)((char *)&v134 + 1) = *(_DWORD *)v121;
  *((_QWORD *)&v134 + 1) = v109;
  v135 = v106;
  v84 = v132;
  v85 = v133;
  v86 = v134;
  v87 = (_OWORD *)v104;
  *(_QWORD *)(v104 + 128) = v106;
  v87[6] = v85;
  v87[7] = v86;
  v88 = v127;
  v89 = v128;
  v87[4] = v131;
  v87[5] = v84;
  v90 = v130;
  v87[2] = v129;
  v87[3] = v90;
  *v87 = v88;
  v87[1] = v89;
  v91 = sub_10000498C(&qword_100098A98);
  sub_10000928C(v53, (uint64_t)v87 + *(int *)(v91 + 48), &qword_100098A90);
  v92 = (char *)v87 + *(int *)(v91 + 64);
  v94 = v102;
  v93 = v103;
  *(_QWORD *)v92 = v68;
  *((_QWORD *)v92 + 1) = v94;
  v92[16] = v67;
  *((_QWORD *)v92 + 3) = v93;
  v92[32] = v98;
  *((double *)v92 + 5) = v74;
  *((_QWORD *)v92 + 6) = v76;
  *((_QWORD *)v92 + 7) = v78;
  *((_QWORD *)v92 + 8) = v80;
  v92[72] = 0;
  *((_QWORD *)v92 + 10) = v97;
  *((_QWORD *)v92 + 11) = sub_10000A814;
  *((_QWORD *)v92 + 12) = v82;
  sub_10000A8A8((uint64_t)&v127);
  sub_10000A91C(v68, v94, v67);
  swift_bridgeObjectRetain(v93);
  swift_retain(v82);
  sub_1000092D0(v83, &qword_100098A90);
  sub_100008F20(v68, v94, v67);
  swift_release(v82);
  swift_bridgeObjectRelease(v93);
  sub_1000092D0(v53, &qword_100098A90);
  v136 = v115;
  v137 = v114;
  v138 = v101;
  *(_DWORD *)v139 = v120[0];
  *(_DWORD *)&v139[3] = *(_DWORD *)((char *)v120 + 3);
  v140 = v116;
  v141 = KeyPath;
  v142 = 0x3FE0000000000000;
  v143 = v112;
  v144 = v111;
  v145 = sub_10000A814;
  v146 = v110;
  v147 = v107;
  v148 = v99;
  *(_DWORD *)&v149[3] = *(_DWORD *)((char *)v119 + 3);
  *(_DWORD *)v149 = v119[0];
  v150 = v108;
  v151 = v100;
  *(_DWORD *)&v152[3] = *(_DWORD *)((char *)v118 + 3);
  *(_DWORD *)v152 = v118[0];
  v153 = v109;
  v154 = v106;
  return sub_10000A92C((uint64_t)&v136);
}

void sub_10000A6E4(double *a1@<X8>)
{
  *a1 = EnvironmentValues.minimumScaleFactor.getter();
}

void sub_10000A70C(double *a1@<X8>)
{
  *a1 = EnvironmentValues.minimumScaleFactor.getter();
}

uint64_t sub_10000A734(double *a1)
{
  return EnvironmentValues.minimumScaleFactor.setter(*a1);
}

uint64_t sub_10000A758(double *a1)
{
  return EnvironmentValues.minimumScaleFactor.setter(*a1);
}

uint64_t sub_10000A77C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FontPreview(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000A7C0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FontPreview(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10000A804()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10000A818(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000498C(&qword_100098A90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000A860()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

double sub_10000A870()
{
  uint64_t v0;
  double v1;
  uint64_t v2;

  v1 = *(double *)(v0 + 16);
  v2 = static VerticalAlignment.firstTextBaseline.getter();
  return ViewDimensions.subscript.getter(v2) - v1;
}

uint64_t sub_10000A8A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 80);
  sub_10000A91C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_retain(v5);
  swift_retain(v6);
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t sub_10000A91C(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_retain(a1);
  else
    return swift_bridgeObjectRetain(a2);
}

uint64_t sub_10000A92C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 80);
  sub_100008F20(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_release(v6);
  swift_release(v4);
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  swift_release(v5);
  return a1;
}

unint64_t sub_10000A9A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100098AA0;
  if (!qword_100098AA0)
  {
    v1 = sub_100004660(&qword_100098A88);
    sub_10000AA10();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100098AA0);
  }
  return result;
}

unint64_t sub_10000AA10()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100098AA8;
  if (!qword_100098AA8)
  {
    v1 = sub_100004660(&qword_100098A78);
    result = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100098AA8);
  }
  return result;
}

_QWORD *sub_10000AA5C(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29[2];
  _QWORD *v30;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_25;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v2; v2 = _CocoaArrayWrapper.endIndex.getter(v25))
  {
    v28 = v1 & 0xC000000000000001;
    v30 = _swiftEmptyArrayStorage;
    v3 = 4;
    v27 = v1;
    while (1)
    {
      v4 = v28 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3 - 4, v1) : *(id *)(v1 + 8 * v3);
      v5 = v4;
      v6 = v3 - 3;
      if (__OFADD__(v3 - 4, 1))
        break;
      v7 = objc_msgSend(v4, "components");
      v8 = sub_1000096AC(0, &qword_100098AB0, UITextFormattingViewControllerComponent_ptr);
      v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v8);

      if ((unint64_t)v9 >> 62)
      {
        if (v9 < 0)
          v24 = v9;
        else
          v24 = v9 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v9);
        v10 = _CocoaArrayWrapper.endIndex.getter(v24);
        swift_bridgeObjectRelease(v9);
      }
      else
      {
        v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease(v9);
      if (v10)
      {
        v11 = v2;
        v12 = objc_msgSend(v5, "identifier");
        v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
        v15 = v14;

        LOBYTE(v12) = sub_10001463C(v29, v13, v15);
        swift_bridgeObjectRelease(v29[1]);
        if ((v12 & 1) != 0)
        {
          v16 = objc_msgSend(v5, "identifier");
          v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
          v19 = v18;

          if ((swift_isUniquelyReferenced_nonNull_native(v30) & 1) == 0)
            v30 = sub_100013360(0, v30[2] + 1, 1, v30);
          v21 = v30[2];
          v20 = v30[3];
          if (v21 >= v20 >> 1)
            v30 = sub_100013360((_QWORD *)(v20 > 1), v21 + 1, 1, v30);
          v22 = v30;
          v30[2] = v21 + 1;
          v23 = &v22[2 * v21];
          v23[4] = v17;
          v23[5] = v19;
          v2 = v11;
          v1 = v27;
        }
        else
        {

          v2 = v11;
          v1 = v27;
        }
      }
      else
      {

      }
      ++v3;
      if (v6 == v2)
        goto LABEL_30;
    }
    __break(1u);
LABEL_25:
    if (v1 < 0)
      v25 = v1;
    else
      v25 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
  }
  v30 = _swiftEmptyArrayStorage;
LABEL_30:
  swift_bridgeObjectRelease(v1);
  return v30;
}

double sub_10000AD08@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  int v60;
  int v61;
  double result;
  char v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  _BYTE v83[7];
  char v84;
  _BYTE v85[7];
  _BYTE v86[7];
  char v87;
  char v88;
  _BYTE v89[7];
  _BYTE v90[7];
  char v91;
  _BYTE v92[7];
  _BYTE v93[7];
  _BYTE v94[7];
  char v95;
  _BYTE v96[7];
  char v97;
  _DWORD v98[5];

  KeyPath = swift_getKeyPath(&unk_1000739E0);
  v5 = swift_getKeyPath(&unk_100073A08);
  v6 = swift_retain(a1);
  static Published.subscript.getter(&v77, v6, KeyPath, v5);
  swift_release(a1);
  swift_release(KeyPath);
  swift_release(v5);
  if ((*(_BYTE *)(a1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_isInPopoverPresentation) & 1) != 0)
    v7 = 0;
  else
    v7 = *(_BYTE *)(a1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_hasParentViewController) ^ 1;
  v8 = OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_useReducedMetrics;
  v9 = sub_100065E58(v7 & 1, *(_BYTE *)(a1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_useReducedMetrics), v77);
  v11 = v10;
  v12 = swift_getKeyPath(&unk_1000739E0);
  v13 = swift_getKeyPath(&unk_100073A08);
  v14 = swift_retain(a1);
  static Published.subscript.getter(&v77, v14, v12, v13);
  swift_release(a1);
  swift_release(v12);
  swift_release(v13);
  sub_100066074(*(unsigned __int8 *)(a1 + v8), v77);
  v76 = v15;
  v75 = static HorizontalAlignment.center.getter();
  v16 = swift_getKeyPath(&unk_100073A28);
  v17 = swift_getKeyPath(&unk_100073A50);
  v18 = swift_retain(a1);
  static Published.subscript.getter(&v77, v18, v16, v17);
  swift_release(a1);
  swift_release(v16);
  swift_release(v17);
  v71 = *((_QWORD *)&v79 + 1);
  v72 = v79;
  v70 = v80;
  v73 = v82;
  v74 = v81;
  v67 = v77;
  v68 = v78;
  v69 = swift_getKeyPath(&unk_100073A70);
  v19 = type metadata accessor for TextFormattingState(0);
  v20 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
  swift_retain(a1);
  v66 = static ObservableObject.environmentStore.getter(v19, v20);
  v87 = 0;
  v84 = 0;
  v65 = swift_getKeyPath(&unk_100073A70);
  v21 = swift_getKeyPath(&unk_1000739E0);
  v22 = swift_getKeyPath(&unk_100073A08);
  v23 = swift_retain(a1);
  static Published.subscript.getter(&v77, v23, v21, v22);
  swift_release(a1);
  swift_release(v21);
  v24 = swift_release(v22);
  v64 = v77;
  LOBYTE(v19) = v87;
  LOBYTE(v20) = v84;
  v25 = static Edge.Set.top.getter(v24);
  v26 = v25;
  v27 = EdgeInsets.init(_all:)(v25, v9);
  v29 = v28;
  v31 = v30;
  v33 = v32;
  v88 = 0;
  v35 = static Edge.Set.bottom.getter(v34);
  v63 = v35;
  v36 = EdgeInsets.init(_all:)(v35, v11);
  v38 = v37;
  v40 = v39;
  v42 = v41;
  v43 = v88;
  v91 = 0;
  v44 = swift_getKeyPath(&unk_100073A28);
  v45 = swift_getKeyPath(&unk_100073A50);
  v46 = swift_retain(a1);
  static Published.subscript.getter(&v77, v46, v44, v45);
  swift_release(a1);
  swift_release(v44);
  swift_release(v45);
  v47 = v77;
  v48 = v81;
  swift_bridgeObjectRelease(*((_QWORD *)&v77 + 1));
  swift_bridgeObjectRelease(v47);
  v49 = swift_getKeyPath(&unk_100073A28);
  v50 = swift_getKeyPath(&unk_100073A50);
  v51 = swift_retain(a1);
  static Published.subscript.getter(&v77, v51, v49, v50);
  swift_release(a1);
  swift_release(v49);
  swift_release(v50);
  v52 = v77;
  v53 = v82;
  swift_bridgeObjectRelease(*((_QWORD *)&v77 + 1));
  v54 = swift_bridgeObjectRelease(v52);
  v55 = static Alignment.center.getter(v54);
  _FrameLayout.init(width:height:alignment:)(&v77, v48, 0, v53, 0, v55, v56);
  v57 = v77;
  v58 = v78;
  v59 = v91;
  v97 = BYTE8(v77);
  v95 = BYTE8(v78);
  *(_QWORD *)a2 = v75;
  *(_QWORD *)(a2 + 8) = v76;
  *(_BYTE *)(a2 + 16) = v19;
  *(_DWORD *)(a2 + 17) = *(_DWORD *)v86;
  *(_DWORD *)(a2 + 20) = *(_DWORD *)&v86[3];
  *(_OWORD *)(a2 + 24) = v67;
  *(_OWORD *)(a2 + 40) = v68;
  *(_QWORD *)(a2 + 56) = v72;
  *(_QWORD *)(a2 + 64) = v71;
  *(_BYTE *)(a2 + 72) = v70;
  *(_DWORD *)(a2 + 76) = *(_DWORD *)&v85[3];
  *(_DWORD *)(a2 + 73) = *(_DWORD *)v85;
  *(_QWORD *)(a2 + 80) = v74;
  *(_QWORD *)(a2 + 88) = v73;
  *(_QWORD *)(a2 + 96) = v69;
  *(_BYTE *)(a2 + 104) = v20;
  *(_DWORD *)(a2 + 105) = *(_DWORD *)v83;
  *(_DWORD *)(a2 + 108) = *(_DWORD *)&v83[3];
  *(_QWORD *)(a2 + 112) = v66;
  *(_QWORD *)(a2 + 120) = a1;
  *(_QWORD *)(a2 + 128) = v65;
  *(_BYTE *)(a2 + 136) = v64;
  v60 = *(_DWORD *)v90;
  *(_DWORD *)(a2 + 140) = *(_DWORD *)&v90[3];
  *(_DWORD *)(a2 + 137) = v60;
  *(_BYTE *)(a2 + 144) = v26;
  *(_DWORD *)(a2 + 145) = *(_DWORD *)v89;
  *(_DWORD *)(a2 + 148) = *(_DWORD *)&v89[3];
  *(double *)(a2 + 152) = v27;
  *(_QWORD *)(a2 + 160) = v29;
  *(_QWORD *)(a2 + 168) = v31;
  *(_QWORD *)(a2 + 176) = v33;
  *(_BYTE *)(a2 + 184) = v43;
  *(_DWORD *)(a2 + 185) = *(_DWORD *)v93;
  *(_DWORD *)(a2 + 188) = *(_DWORD *)&v93[3];
  *(_BYTE *)(a2 + 192) = v63;
  v61 = *(_DWORD *)v92;
  *(_DWORD *)(a2 + 196) = *(_DWORD *)&v92[3];
  *(_DWORD *)(a2 + 193) = v61;
  *(double *)(a2 + 200) = v36;
  *(_QWORD *)(a2 + 208) = v38;
  *(_QWORD *)(a2 + 216) = v40;
  *(_QWORD *)(a2 + 224) = v42;
  *(_BYTE *)(a2 + 232) = v59;
  *(_DWORD *)(a2 + 236) = *(_DWORD *)((char *)v98 + 3);
  *(_DWORD *)(a2 + 233) = v98[0];
  *(_QWORD *)(a2 + 240) = v57;
  *(_BYTE *)(a2 + 248) = v97;
  *(_DWORD *)(a2 + 249) = *(_DWORD *)v96;
  *(_DWORD *)(a2 + 252) = *(_DWORD *)&v96[3];
  *(_QWORD *)(a2 + 256) = v58;
  *(_BYTE *)(a2 + 264) = v95;
  LODWORD(v57) = *(_DWORD *)v94;
  *(_DWORD *)(a2 + 268) = *(_DWORD *)&v94[3];
  *(_DWORD *)(a2 + 265) = v57;
  result = *(double *)&v79;
  *(_OWORD *)(a2 + 272) = v79;
  return result;
}

_QWORD *sub_10000B26C@<X0>(_BYTE *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_1000174B4();
  result = EnvironmentValues.subscript.getter(&v4, &type metadata for TFUIConfigKey, &type metadata for TFUIConfigKey, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_10000B2B8(char *a1)
{
  unint64_t v1;
  char v3;

  v3 = *a1;
  v1 = sub_1000174B4();
  return EnvironmentValues.subscript.setter(&v3, &type metadata for TFUIConfigKey, &type metadata for TFUIConfigKey, v1);
}

double sub_10000B300@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10000AD08(*(_QWORD *)(v1 + 8), a1);
}

void sub_10000B308(signed __int8 a1, double a2)
{
  void *v2;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  signed __int8 v35;
  uint64_t v36[9];

  v5 = objc_msgSend(v2, "components");
  v34 = sub_1000096AC(0, &qword_100098AB0, UITextFormattingViewControllerComponent_ptr);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v34);

  if ((unint64_t)v6 >> 62)
    goto LABEL_12;
  v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v6);
  for (; v7; v7 = _CocoaArrayWrapper.endIndex.getter(v14))
  {
    if (v7 < 1)
    {
      __break(1u);
      JUMPOUT(0x10000C2ECLL);
    }
    v8 = 0;
    v9 = 0;
    while (1)
    {
      v10 = (v6 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v6)
          : *(id *)(v6 + 8 * v8 + 32);
      v11 = v10;
      v12 = sub_10000D8AC();

      v13 = __OFADD__(v9, v12);
      v9 += v12;
      if (v13)
        break;
      if (v7 == ++v8)
        goto LABEL_17;
    }
    __break(1u);
LABEL_12:
    if (v6 < 0)
      v14 = v6;
    else
      v14 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v6);
  }
  v9 = 0;
LABEL_17:
  v35 = a1;
  swift_bridgeObjectRelease_n(v6, 2);
  sub_100013DB4(0, 6, 0);
  v15 = 0;
  v16 = 0;
  v17 = _swiftEmptyArrayStorage;
  v18 = _swiftEmptyArrayStorage[2];
  v19 = 3 * v18;
  v20 = &byte_10008DFD9;
  v21 = 4;
  v22 = qword_100073EC0;
  while (1)
  {
    v36[0] = (uint64_t)v17;
    v23 = v17[3];
    if (v18 >= v23 >> 1)
    {
      v26 = v22;
      sub_100013DB4(v23 > 1, v18 + 1, 1);
      v22 = v26;
      v17 = (_QWORD *)v36[0];
    }
    v17[2] = v18 + 1;
    v24 = &v17[v19 + v15];
    *((_BYTE *)v24 + 32) = v16;
    v24[5] = v9 / v21;
    v24[6] = v9 % v21;
    if (v15 == 15)
      break;
    v25 = *v20++;
    v16 = v25;
    v21 = v22[v25];
    v15 += 3;
    ++v18;
  }
  sub_10000498C(&qword_100098AF8);
  v36[0] = static _DictionaryStorage.allocate(capacity:)(v18 + 1);
  v27 = swift_bridgeObjectRetain(v17);
  sub_100016E90(v27, 1, v36);
  swift_release(v17);
  v28 = v36[0];
  v29 = swift_bridgeObjectRetain(v36[0]);
  v30 = sub_100013984(v29);
  swift_release(v28);
  v36[0] = (uint64_t)v30;
  sub_100018A08(v36, sub_10001ADA4, sub_100019120);
  swift_release(v28);
  if (!*(_QWORD *)(v36[0] + 16))
  {
    swift_release(v36[0]);
    __break(1u);
    swift_release(v36[0]);
    __break(1u);
    swift_unexpectedError(0, "Swift/Dictionary.swift", 22, 1, 489);
    __break(1u);
    goto LABEL_41;
  }
  swift_release(v36[0]);
  v31 = dbl_100073E98[v35] + a2;
  if ((~*(_QWORD *)&v31 & 0x7FF0000000000000) != 0)
  {
    if (v31 > -9.22337204e18)
    {
      if (v31 < 9.22337204e18)
      {
        sub_100066220(v35);
        v33 = v32 + dbl_100073E98[v35];
        if ((~*(_QWORD *)&v33 & 0x7FF0000000000000) != 0)
        {
          if (v33 > -9.22337204e18)
          {
            if (v33 < 9.22337204e18)
            {
              if (!(uint64_t)v33)
              {
                _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
                goto LABEL_43;
              }
              if ((uint64_t)v31 != 0x8000000000000000 || (uint64_t)v33 != -1)
                __asm { BR              X11 }
LABEL_41:
              _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
LABEL_43:
              __break(1u);
              JUMPOUT(0x10000C3C0);
            }
LABEL_38:
            __break(1u);
            JUMPOUT(0x10000C26CLL);
          }
LABEL_37:
          __break(1u);
          goto LABEL_38;
        }
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  goto LABEL_35;
}

BOOL sub_10000C3D4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  int v3;
  double v4;
  double v5;
  _QWORD *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  int v11;
  double v12;
  double v13;
  char v14;
  char v15;
  _BOOL8 result;
  double v17;
  double v18;
  double v19;
  double v20;

  v2 = *(_QWORD **)(a1 + 8);
  v19 = *(double *)(a1 + 24);
  v20 = *(double *)(a1 + 16);
  v17 = *(double *)(a1 + 40);
  v18 = *(double *)(a1 + 32);
  v3 = *(unsigned __int8 *)(a1 + 48);
  v5 = *(double *)(a1 + 56);
  v4 = *(double *)(a1 + 64);
  v6 = *(_QWORD **)(a2 + 8);
  v7 = *(double *)(a2 + 16);
  v8 = *(double *)(a2 + 24);
  v9 = *(double *)(a2 + 32);
  v10 = *(double *)(a2 + 40);
  v11 = *(unsigned __int8 *)(a2 + 48);
  v13 = *(double *)(a2 + 56);
  v12 = *(double *)(a2 + 64);
  sub_10001259C(*(_QWORD *)a1, *(_QWORD *)a2);
  if ((v14 & 1) == 0 || (sub_100012F28(v2, v6) & 1) == 0)
    return 0;
  v15 = static EdgeInsets.== infix(_:_:)(v20, v19, v18, v17, v7, v8, v9, v10);
  result = 0;
  if ((v15 & 1) != 0 && ((v3 ^ v11) & 1) == 0)
    return v4 == v12 && v5 == v13;
  return result;
}

uint64_t sub_10000C4D4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v27;

  v5 = *(_QWORD *)a2;
  v6 = *(_BYTE *)(a2 + 48);
  if (*(_QWORD *)(*(_QWORD *)a2 + 16))
  {
    v7 = *a1;
    v8 = a1[1];
    swift_bridgeObjectRetain(v8);
    v9 = sub_1000171E8(v7, v8);
    if ((v10 & 1) != 0)
    {
      v11 = *(_QWORD **)(*(_QWORD *)(v5 + 56) + 8 * v9);
      swift_bridgeObjectRetain(v11);
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease(v8);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v12 = v6 & 1;
  v13 = *(_QWORD *)(a2 + 72);
  v14 = *(_BYTE *)(a2 + 80);
  sub_10001D97C(v13, v14);
  v15 = sub_1000117FC(v13, v14);
  sub_10001D9D8(v13, v14);
  sub_100066074(v12, v15);
  v17 = v16;
  *(_QWORD *)a3 = static HorizontalAlignment.center.getter();
  *(_QWORD *)(a3 + 8) = v17;
  *(_BYTE *)(a3 + 16) = 0;
  sub_10000498C(&qword_100098C40);
  v27 = v11;
  v18 = swift_allocObject(&unk_10008EAC0, 97, 7);
  v19 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v18 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v18 + 64) = v19;
  *(_OWORD *)(v18 + 80) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(v18 + 96) = *(_BYTE *)(a2 + 80);
  v20 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v18 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v18 + 32) = v20;
  sub_10001D278(a2);
  v21 = sub_10000498C(&qword_100098C48);
  v22 = sub_10000498C(&qword_100098C50);
  v23 = sub_10000966C(&qword_100098C58, &qword_100098C48, (uint64_t)&protocol conformance descriptor for [A]);
  v24 = sub_10001D30C();
  v25 = sub_10001D3FC();
  return ((uint64_t (*)(_QWORD **, uint64_t (*)@<X0>(uint64_t *@<X0>, uint64_t@<X8>), uint64_t, uint64_t, void *, uint64_t, uint64_t, unint64_t, unint64_t))ForEach<>.init(_:content:))(&v27, sub_10001D304, v18, v21, &type metadata for Int, v22, v23, v24, v25);
}

uint64_t sub_10000C6A4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  _BOOL4 v34;
  BOOL v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t KeyPath;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  double v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  double v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int *v91;
  int v92;
  uint64_t *v93;
  uint64_t v94;
  _BOOL4 v95;
  uint64_t v96;
  uint64_t v97;

  v94 = a3;
  v5 = sub_10000498C(&qword_100098C80);
  __chkstk_darwin(v5);
  v93 = (uint64_t *)((char *)&v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_10000498C(&qword_100098C70);
  __chkstk_darwin(v7);
  v9 = (uint64_t)&v83 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (int *)sub_10000498C(&qword_100098C50);
  __chkstk_darwin(v10);
  v12 = (char *)&v83 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *a1;
  v14 = a1[1];
  v15 = *(_QWORD *)(a2 + 72);
  v16 = *(unsigned __int8 *)(a2 + 80);
  sub_10001D97C(v15, *(_BYTE *)(a2 + 80));
  LOBYTE(a1) = sub_1000117FC(v15, v16);
  v92 = v16;
  sub_10001D9D8(v15, v16);
  v17 = dbl_100073E98[(char)a1];
  v18 = *(double *)(a2 + 24);
  v19 = *(double *)(a2 + 40);
  v20 = *(double *)(a2 + 56);
  v21 = sub_10000CC6C(v13, v14);
  if (__OFSUB__(v21, 1))
    goto LABEL_29;
  v88 = v21 - 1;
  v89 = v15;
  v90 = v7;
  v87 = sub_10000CC6C(v13, v14);
  if ((unint64_t)v14 >> 62)
    goto LABEL_30;
  v22 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n(v14, 2);
  v23 = v22;
  while (1)
  {
    v91 = v10;
    if (!v22)
      break;
    v83 = v23;
    v84 = a2;
    v95 = v23 == 1;
    v85 = v12;
    v86 = v9;
    v12 = (char *)(v14 & 0xC000000000000001);
    v24 = UITextFormattingViewControllerFormattingStylesComponentKey;
    a2 = 4;
    v96 = v14;
    while (1)
    {
      v25 = v12
          ? (int *)specialized _ArrayBuffer._getElementSlowPath(_:)(a2 - 4, v14)
          : (int *)*(id *)(v14 + 8 * a2);
      v10 = v25;
      v14 = a2 - 3;
      if (__OFADD__(a2 - 4, 1))
        break;
      v26 = objc_msgSend(v25, "componentKey");
      v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
      v29 = v28;
      v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      v32 = v27 == v30 && v29 == v31;
      if (v32)
      {

        swift_bridgeObjectRelease_n(v29, 2);
LABEL_20:
        v12 = v85;
        v9 = v86;
        a2 = v84;
        v14 = v96;
        v34 = v95;
LABEL_21:
        v23 = v83;
        goto LABEL_22;
      }
      v33 = v31;
      v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v27, v29, v30, v31, 0);

      swift_bridgeObjectRelease(v29);
      swift_bridgeObjectRelease(v33);
      if ((v9 & 1) != 0)
        goto LABEL_20;
      ++a2;
      v32 = v14 == v22;
      v14 = v96;
      if (v32)
      {
        v34 = 0;
        v12 = v85;
        v9 = v86;
        a2 = v84;
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    if (v14 < 0)
      v80 = v14;
    else
      v80 = v14 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v14);
    v81 = _CocoaArrayWrapper.endIndex.getter(v80);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRetain_n(v14, 2);
    v82 = v80;
    v23 = v81;
    v22 = _CocoaArrayWrapper.endIndex.getter(v82);
  }
  v34 = 0;
LABEL_22:
  v95 = v34;
  v35 = v23 == 1;
  swift_bridgeObjectRelease_n(v14, 2);
  v36 = v89;
  v37 = v92;
  sub_10001D97C(v89, v92);
  v38 = sub_1000117FC(v36, v37);
  v39 = sub_10001D9D8(v36, v37);
  v40 = qword_100073E70[v38];
  v41 = !v34;
  v42 = (v20 - v17 * (double)v88) / (double)v87;
  v43 = static VerticalAlignment.center.getter(v39);
  v44 = v14;
  v45 = (uint64_t)v93;
  *v93 = v43;
  *(_QWORD *)(v45 + 8) = v40;
  *(_BYTE *)(v45 + 16) = 0;
  sub_10000498C(&qword_100098C90);
  v46 = swift_bridgeObjectRetain(v44);
  v47 = sub_10001ADE4(v46);
  swift_bridgeObjectRelease(v44);
  v97 = v47;
  KeyPath = swift_getKeyPath(&unk_100073C70);
  v49 = swift_allocObject(&unk_10008EAE8, 107, 7);
  *(double *)(v49 + 16) = v42;
  v50 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v49 + 56) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v49 + 72) = v50;
  *(_OWORD *)(v49 + 88) = *(_OWORD *)(a2 + 64);
  v51 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v49 + 24) = *(_OWORD *)a2;
  *(_BYTE *)(v49 + 104) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(v49 + 40) = v51;
  *(_BYTE *)(v49 + 105) = v41;
  *(_BYTE *)(v49 + 106) = v35;
  sub_10001D278(a2);
  v52 = sub_10000498C(&qword_100098C98);
  v53 = sub_10000498C(&qword_100098CA0);
  v54 = sub_10000966C(&qword_100098CA8, &qword_100098C98, (uint64_t)&protocol conformance descriptor for [A]);
  v55 = sub_10001DCB0(&qword_100098CB0, &qword_100098CA0, (void (*)(void))sub_10001D48C);
  v56 = ForEach<>.init(_:id:content:)(&v97, KeyPath, sub_10001D478, v49, v52, v53, v54, &protocol witness table for Int, v55);
  v57 = static Edge.Set.leading.getter(v56);
  v58 = v57;
  if (v95)
    v59 = 0.0;
  else
    v59 = v18;
  if (v95)
    v19 = 0.0;
  v60 = EdgeInsets.init(_all:)(v57, v59);
  v62 = v61;
  v64 = v63;
  v66 = v65;
  sub_10000928C(v45, v9, &qword_100098C80);
  v67 = v9 + *(int *)(v90 + 36);
  *(_BYTE *)v67 = v58;
  *(double *)(v67 + 8) = v60;
  *(_QWORD *)(v67 + 16) = v62;
  *(_QWORD *)(v67 + 24) = v64;
  *(_QWORD *)(v67 + 32) = v66;
  *(_BYTE *)(v67 + 40) = 0;
  v68 = sub_1000092D0(v45, &qword_100098C80);
  v69 = static Edge.Set.trailing.getter(v68);
  v70 = v69;
  v71 = EdgeInsets.init(_all:)(v69, v19);
  v73 = v72;
  v75 = v74;
  v77 = v76;
  sub_10000928C(v9, (uint64_t)v12, &qword_100098C70);
  v78 = &v12[v91[9]];
  *v78 = v70;
  *((double *)v78 + 1) = v71;
  *((_QWORD *)v78 + 2) = v73;
  *((_QWORD *)v78 + 3) = v75;
  *((_QWORD *)v78 + 4) = v77;
  v78[40] = 0;
  sub_1000092D0(v9, &qword_100098C70);
  return sub_10000930C((uint64_t)v12, v94, &qword_100098C50);
}

uint64_t sub_10000CC6C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  if ((unint64_t)a2 >> 62)
    goto LABEL_12;
  v3 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain_n(a2, 2);
  if (v3)
  {
    while (v3 >= 1)
    {
      v5 = 0;
      v6 = 0;
      while (1)
      {
        v7 = (a2 & 0xC000000000000001) != 0
           ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a2)
           : *(id *)(a2 + 8 * v5 + 32);
        v8 = v7;
        v9 = sub_10000D8AC();

        v10 = __OFADD__(v6, v9);
        v6 += v9;
        if (v10)
          break;
        if (v3 == ++v5)
          goto LABEL_17;
      }
      __break(1u);
LABEL_12:
      if (a2 < 0)
        v11 = a2;
      else
        v11 = a2 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n(a2, 2);
      result = _CocoaArrayWrapper.endIndex.getter(v11);
      v3 = result;
      if (!result)
        goto LABEL_16;
    }
    __break(1u);
  }
  else
  {
LABEL_16:
    v6 = 0;
LABEL_17:
    swift_bridgeObjectRelease_n(a2, 2);
    return v6;
  }
  return result;
}

uint64_t sub_10000CD60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v10;
  char v11;
  id v12;
  char v13;
  uint64_t v14;
  double v15;
  uint64_t result;
  double v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  id v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t KeyPath;
  uint64_t v39;
  uint64_t v40;
  _QWORD v42[3];
  char v43;
  char v44;
  uint64_t v45;
  char v46;
  id v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  double v59;
  uint64_t v60;
  double v61;
  uint64_t v62;
  char v63;
  _BYTE v64[184];
  uint64_t v65;
  char v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;

  v10 = *(_QWORD *)(a2 + 72);
  v11 = *(_BYTE *)(a2 + 80);
  v12 = *(id *)(a1 + 8);
  sub_10001D97C(v10, v11);
  v13 = sub_1000117FC(v10, v11);
  sub_10001D9D8(v10, v11);
  v14 = sub_10000D8AC();
  v15 = dbl_100073E98[v13];
  result = sub_10000D8AC();
  if (__OFSUB__(result, 1))
  {
    __break(1u);
  }
  else
  {
    v17 = (double)v14 * a6 + v15 * (double)(result - 1);
    sub_10001C6AC(v13);
    v19 = v18;
    v20 = 0.0;
    if ((a3 & 1) == 0)
      v20 = *(double *)(a2 + 24) + *(double *)(a2 + 40);

    if (v19 < 1)
    {

      sub_10001D83C((uint64_t)v42);
    }
    else
    {
      v21 = v17 + v20;
      v22 = type metadata accessor for TextFormattingState(0);
      v23 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
      v24 = v12;
      v25 = EnvironmentObject.init()(v22, v23);
      v39 = v26;
      v40 = v25;
      KeyPath = swift_getKeyPath(&unk_100073C90);
      v37 = swift_getKeyPath(&unk_100073CB8);
      v27 = static Alignment.center.getter(v37);
      _FrameLayout.init(width:height:alignment:)(&v65, *(_QWORD *)&v21, 0, 0, 1, v27, v28);
      v29 = v66;
      v35 = v67;
      v36 = v65;
      v32 = a4;
      v30 = v68;
      v33 = v70;
      v34 = v69;
      v31 = objc_msgSend(v24, "componentKey");

      v42[0] = v40;
      v42[1] = v39;
      v42[2] = KeyPath;
      v43 = 0;
      v44 = 0;
      v45 = v37;
      v46 = 0;
      v47 = v24;
      v48 = v36;
      v49 = v29;
      v50 = v35;
      v51 = v30;
      v52 = v34;
      v53 = v33;
      v54 = v31;
      v55 = swift_getKeyPath(&unk_100073C90);
      v56 = v19;
      v57 = 0;
      v58 = swift_getKeyPath(&unk_100073CB8);
      v59 = v21;
      v60 = swift_getKeyPath(&unk_100073CE0);
      v61 = a6;
      v62 = swift_getKeyPath(&unk_100073D08);
      v63 = v32 & 1;
      nullsub_1(v42);
    }
    sub_10000930C((uint64_t)v42, (uint64_t)v64, &qword_100098CA0);
    return sub_10000930C((uint64_t)v64, a5, &qword_100098CA0);
  }
  return result;
}

_QWORD *sub_10000D078@<X0>(uint64_t a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  char v4;
  uint64_t v5;
  char v6;

  v2 = sub_10001D92C();
  result = EnvironmentValues.subscript.getter(&v5, &type metadata for TFEffectiveComponentSizeKey, &type metadata for TFEffectiveComponentSizeKey, v2);
  v4 = v6;
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = v4;
  return result;
}

uint64_t sub_10000D0CC(uint64_t *a1)
{
  char v1;
  unint64_t v2;
  uint64_t v4;
  char v5;

  v1 = *((_BYTE *)a1 + 8);
  v4 = *a1;
  v5 = v1;
  v2 = sub_10001D92C();
  return EnvironmentValues.subscript.setter(&v4, &type metadata for TFEffectiveComponentSizeKey, &type metadata for TFEffectiveComponentSizeKey, v2);
}

double sub_10000D11C@<D0>(double *a1@<X8>)
{
  return sub_10000D158((uint64_t (*)(void))sub_10001D8E8, (uint64_t)&type metadata for TFComponentWidthKey, a1);
}

uint64_t sub_10000D130(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000D1C0(a1, a2, a3, a4, (uint64_t (*)(void))sub_10001D8E8, (uint64_t)&type metadata for TFComponentWidthKey);
}

double sub_10000D144@<D0>(double *a1@<X8>)
{
  return sub_10000D158((uint64_t (*)(void))sub_10001D8A4, (uint64_t)&type metadata for TFComponentColumnWidthKey, a1);
}

double sub_10000D158@<D0>(uint64_t (*a1)(void)@<X3>, uint64_t a2@<X4>, double *a3@<X8>)
{
  uint64_t v5;
  double result;
  double v7;

  v5 = a1();
  EnvironmentValues.subscript.getter(&v7, a2, a2, v5);
  result = v7;
  *a3 = v7;
  return result;
}

uint64_t sub_10000D1AC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000D1C0(a1, a2, a3, a4, (uint64_t (*)(void))sub_10001D8A4, (uint64_t)&type metadata for TFComponentColumnWidthKey);
}

uint64_t sub_10000D1C0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t a6)
{
  uint64_t v7;
  uint64_t v9;

  v9 = *a1;
  v7 = a5();
  return EnvironmentValues.subscript.setter(&v9, a6, a6, v7);
}

_QWORD *sub_10000D208@<X0>(_BYTE *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_10001D860();
  result = EnvironmentValues.subscript.getter(&v4, &type metadata for TFComponentSpansWidthKey, &type metadata for TFComponentSpansWidthKey, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_10000D254(char *a1)
{
  unint64_t v1;
  char v3;

  v3 = *a1;
  v1 = sub_10001D860();
  return EnvironmentValues.subscript.setter(&v3, &type metadata for TFComponentSpansWidthKey, &type metadata for TFComponentSpansWidthKey, v1);
}

uint64_t sub_10000D29C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  uint64_t KeyPath;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[5];
  char v18;
  uint64_t v19;

  v3 = *(_OWORD *)(v1 + 48);
  v17[2] = *(_OWORD *)(v1 + 32);
  v17[3] = v3;
  v17[4] = *(_OWORD *)(v1 + 64);
  v18 = *(_BYTE *)(v1 + 80);
  v4 = *(_OWORD *)(v1 + 16);
  v17[0] = *(_OWORD *)v1;
  v17[1] = v4;
  if (*((double *)&v3 + 1) <= 0.0)
  {
    v15 = sub_10000498C(&qword_100098C18);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a1, 1, 1, v15);
  }
  else
  {
    v19 = *((_QWORD *)&v17[0] + 1);
    v16 = *((_QWORD *)&v17[0] + 1);
    KeyPath = swift_getKeyPath(&unk_100073C58);
    v6 = swift_allocObject(&unk_10008EA98, 97, 7);
    v7 = *(_OWORD *)(v1 + 48);
    *(_OWORD *)(v6 + 48) = *(_OWORD *)(v1 + 32);
    *(_OWORD *)(v6 + 64) = v7;
    *(_OWORD *)(v6 + 80) = *(_OWORD *)(v1 + 64);
    *(_BYTE *)(v6 + 96) = *(_BYTE *)(v1 + 80);
    v8 = *(_OWORD *)(v1 + 16);
    *(_OWORD *)(v6 + 16) = *(_OWORD *)v1;
    *(_OWORD *)(v6 + 32) = v8;
    sub_10001D250(&v19);
    sub_10001D278((uint64_t)v17);
    v9 = sub_10000498C(&qword_100098C20);
    v10 = sub_10000498C(&qword_100098C28);
    v11 = sub_10000966C(&qword_100098C30, &qword_100098C20, (uint64_t)&protocol conformance descriptor for [A]);
    v12 = sub_10000966C(&qword_100098C38, &qword_100098C28, (uint64_t)&protocol conformance descriptor for VStack<A>);
    ForEach<>.init(_:id:content:)(&v16, KeyPath, sub_10001D248, v6, v9, v10, v11, &protocol witness table for String, v12);
    v13 = sub_10000498C(&qword_100098C18);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a1, 0, 1, v13);
  }
}

void sub_10000D460(char a1)
{
  __asm { BR              X10 }
}

double sub_10000D49C()
{
  uint64_t v0;
  id v1;
  double v2;
  CGFloat v3;
  double v4;
  CGFloat v5;
  double v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  BOOL v10;
  double v11;
  CGRect v13;

  v1 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
  objc_msgSend(v1, "_referenceBounds");
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;

  v13.origin.x = v3;
  v13.origin.y = v5;
  v13.size.width = v7;
  v13.size.height = v9;
  v10 = CGRectGetHeight(v13) > 667.0;
  v11 = 50.0;
  if (!v10)
    v11 = 45.0;
  return v11 * (double)v0;
}

BOOL static UITextFormattingViewControllerComponentSize.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 < a2;
}

BOOL sub_10000D568(_QWORD *a1, _QWORD *a2)
{
  return *a1 < *a2;
}

BOOL sub_10000D57C(_QWORD *a1, _QWORD *a2)
{
  return *a2 >= *a1;
}

BOOL sub_10000D590(_QWORD *a1, _QWORD *a2)
{
  return *a1 >= *a2;
}

BOOL sub_10000D5A4(_QWORD *a1, _QWORD *a2)
{
  return *a2 < *a1;
}

uint64_t destroy for TextFormattingLayout(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return swift_bridgeObjectRelease(a1[1]);
}

uint64_t initializeWithCopy for TextFormattingLayout(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  *(_OWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t *assignWithCopy for TextFormattingLayout(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
  a1[7] = a2[7];
  a1[8] = a2[8];
  return a1;
}

__n128 initializeWithTake for TextFormattingLayout(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for TextFormattingLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  swift_bridgeObjectRelease(*(_QWORD *)a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v4);
  v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for TextFormattingLayout(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TextFormattingLayout(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TextFormattingLayout()
{
  return &type metadata for TextFormattingLayout;
}

_QWORD *initializeBufferWithCopyOfBuffer for TextFormattingView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain(v3);
  return a1;
}

uint64_t destroy for TextFormattingView(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 8));
}

_QWORD *assignWithCopy for TextFormattingView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_retain(v3);
  swift_release(v4);
  return a1;
}

_QWORD *assignWithTake for TextFormattingView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_release(v4);
  return a1;
}

ValueMetadata *type metadata accessor for TextFormattingView()
{
  return &type metadata for TextFormattingView;
}

uint64_t sub_10000D89C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100078CEC, 1);
}

uint64_t sub_10000D8AC()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t inited;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD *v11;
  _BYTE v12[48];

  if (objc_msgSend(v0, "preferredSize"))
    v1 = objc_msgSend(v0, "preferredSize");
  else
    v1 = (id)sub_10000D9D0();
  v2 = v1;
  v3 = sub_10000498C(&qword_100098B00);
  inited = swift_initStackObject(v3, v12);
  *(_OWORD *)(inited + 16) = xmmword_100073880;

  *(_QWORD *)(inited + 32) = 1;
  *(_QWORD *)(inited + 40) = v2;
  v5 = sub_10001B284(inited);
  swift_setDeallocating(inited);
  v6 = swift_bridgeObjectRetain(v5);
  v7 = sub_1000138A0(v6);
  swift_bridgeObjectRelease(v5);
  v11 = v7;
  sub_100018A08((uint64_t *)&v11, sub_10001AD90, sub_100018A94);
  swift_bridgeObjectRelease(v5);
  v8 = v11[2];
  if (v8)
  {
    v9 = v11[v8 + 3];
    swift_release(v11);
    return v9;
  }
  else
  {
    swift_release(v11);
    __break(1u);
    result = swift_release(v11);
    __break(1u);
  }
  return result;
}

uint64_t sub_10000D9D0()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;

  v1 = objc_msgSend(v0, "componentKey");
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(UITextFormattingViewControllerFormattingStylesComponentKey);
  v4 = v3;
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  if (v2 == v5 && v4 == v6)
  {
    swift_bridgeObjectRelease_n(v4, 2);
    goto LABEL_15;
  }
  v8 = v6;
  v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, v4, v5, v6, 0);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v8);
  if ((v9 & 1) != 0)
  {
LABEL_15:

    return 5;
  }
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(UITextFormattingViewControllerFontAttributesComponentKey);
  v12 = v11;
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  if (v10 == v13 && v12 == v14)
  {
    swift_bridgeObjectRelease_n(v12, 2);
    goto LABEL_17;
  }
  v16 = v14;
  v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v12, v13, v14, 0);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v16);
  if ((v17 & 1) != 0)
  {
LABEL_17:

    return 4;
  }
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(UITextFormattingViewControllerFontPickerComponentKey);
  v20 = v19;
  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v23 = v21;
  if (v18 == v22 && v20 == v21)
    goto LABEL_13;
  v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v20, v22, v21, 0);
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v23);
  if ((v25 & 1) != 0)
    goto LABEL_19;
  v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(UITextFormattingViewControllerFontSizeComponentKey);
  v28 = v27;
  v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v31 = v29;
  if (v26 == v30 && v28 == v29)
    goto LABEL_22;
  v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v28, v30, v29, 0);
  swift_bridgeObjectRelease(v28);
  swift_bridgeObjectRelease(v31);
  if ((v32 & 1) != 0)
    goto LABEL_24;
  v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(UITextFormattingViewControllerFontPointSizeComponentKey);
  v20 = v34;
  v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v37 = v35;
  if (v33 == v36 && v20 == v35)
    goto LABEL_13;
  v38 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v20, v36, v35, 0);
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v37);
  if ((v38 & 1) != 0)
    goto LABEL_19;
  v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(UITextFormattingViewControllerTextAlignmentComponentKey);
  v41 = v40;
  v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v44 = v42;
  if (v39 == v43 && v41 == v42)
    goto LABEL_30;
  v45 = _stringCompareWithSmolCheck(_:_:expecting:)(v39, v41, v43, v42, 0);
  swift_bridgeObjectRelease(v41);
  swift_bridgeObjectRelease(v44);
  if ((v45 & 1) != 0)
    goto LABEL_32;
  v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(UITextFormattingViewControllerTextAlignmentAndJustificationComponentKey);
  v41 = v47;
  v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v50 = v48;
  if (v46 == v49 && v41 == v48)
  {
LABEL_30:
    swift_bridgeObjectRelease_n(v41, 2);
LABEL_32:

    return 1;
  }
  v51 = _stringCompareWithSmolCheck(_:_:expecting:)(v46, v41, v49, v48, 0);
  swift_bridgeObjectRelease(v41);
  swift_bridgeObjectRelease(v50);
  if ((v51 & 1) != 0)
    goto LABEL_32;
  v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(UITextFormattingViewControllerTextIndentationComponentKey);
  v28 = v53;
  v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v56 = v54;
  if (v52 == v55 && v28 == v54)
    goto LABEL_22;
  v57 = _stringCompareWithSmolCheck(_:_:expecting:)(v52, v28, v55, v54, 0);
  swift_bridgeObjectRelease(v28);
  swift_bridgeObjectRelease(v56);
  if ((v57 & 1) != 0)
    goto LABEL_24;
  v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(UITextFormattingViewControllerLineHeightComponentKey);
  v41 = v59;
  v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v62 = v60;
  if (v58 == v61 && v41 == v60)
    goto LABEL_30;
  v63 = _stringCompareWithSmolCheck(_:_:expecting:)(v58, v41, v61, v60, 0);
  swift_bridgeObjectRelease(v41);
  swift_bridgeObjectRelease(v62);
  if ((v63 & 1) != 0)
    goto LABEL_32;
  v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(UITextFormattingViewControllerListStylesComponentKey);
  v20 = v65;
  v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v68 = v66;
  if (v64 == v67 && v20 == v66)
  {
LABEL_13:
    swift_bridgeObjectRelease_n(v20, 2);
LABEL_19:

    return 3;
  }
  v69 = _stringCompareWithSmolCheck(_:_:expecting:)(v64, v20, v67, v66, 0);
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v68);
  if ((v69 & 1) != 0)
    goto LABEL_19;
  v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(UITextFormattingViewControllerTextColorComponentKey);
  v41 = v71;
  v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v74 = v72;
  if (v70 == v73 && v41 == v72)
    goto LABEL_30;
  v75 = _stringCompareWithSmolCheck(_:_:expecting:)(v70, v41, v73, v72, 0);
  swift_bridgeObjectRelease(v41);
  swift_bridgeObjectRelease(v74);
  if ((v75 & 1) != 0)
    goto LABEL_32;
  v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(UITextFormattingViewControllerQuoteLevelComponentKey);
  v28 = v77;
  v79 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v80 = v78;
  if (v76 == v79 && v28 == v78)
    goto LABEL_22;
  v81 = _stringCompareWithSmolCheck(_:_:expecting:)(v76, v28, v79, v78, 0);
  swift_bridgeObjectRelease(v28);
  swift_bridgeObjectRelease(v80);
  if ((v81 & 1) != 0)
    goto LABEL_24;
  v82 = static String._unconditionallyBridgeFromObjectiveC(_:)(UITextFormattingViewControllerBlockquoteComponentKey);
  v41 = v83;
  v85 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v86 = v84;
  if (v82 == v85 && v41 == v84)
    goto LABEL_30;
  v87 = _stringCompareWithSmolCheck(_:_:expecting:)(v82, v41, v85, v84, 0);
  swift_bridgeObjectRelease(v41);
  swift_bridgeObjectRelease(v86);
  if ((v87 & 1) != 0)
    goto LABEL_32;
  v88 = static String._unconditionallyBridgeFromObjectiveC(_:)(UITextFormattingViewControllerEmphasisStylesComponentKey);
  v28 = v89;
  v91 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v92 = v90;
  if (v88 == v91 && v28 == v90)
  {
LABEL_22:
    swift_bridgeObjectRelease_n(v28, 2);
LABEL_24:

    return 2;
  }
  v93 = _stringCompareWithSmolCheck(_:_:expecting:)(v88, v28, v91, v90, 0);
  swift_bridgeObjectRelease(v28);
  swift_bridgeObjectRelease(v92);
  if ((v93 & 1) != 0)
    goto LABEL_24;
  v94 = static String._unconditionallyBridgeFromObjectiveC(_:)(UITextFormattingViewControllerHighlightComponentKey);
  v41 = v95;
  v97 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v98 = v96;
  if (v94 == v97 && v41 == v96)
    goto LABEL_30;
  v99 = _stringCompareWithSmolCheck(_:_:expecting:)(v94, v41, v97, v96, 0);
  swift_bridgeObjectRelease(v41);
  swift_bridgeObjectRelease(v98);
  if ((v99 & 1) != 0)
    goto LABEL_32;
  v100 = static String._unconditionallyBridgeFromObjectiveC(_:)(UITextFormattingViewControllerHighlightPickerComponentKey);
  v102 = v101;
  v104 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v105 = v103;
  if (v100 == v104 && v102 == v103)
  {
    v106 = 2;
  }
  else if ((_stringCompareWithSmolCheck(_:_:expecting:)(v100, v102, v104, v103, 0) & 1) != 0)
  {
    v106 = 2;
  }
  else
  {
    v106 = 3;
  }

  swift_bridgeObjectRelease(v102);
  swift_bridgeObjectRelease(v105);
  return v106;
}

uint64_t sub_10000E0DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = sub_10000498C(&qword_100098D70);
  __chkstk_darwin(v3);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10000498C(&qword_100098D78);
  __chkstk_darwin(v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000E2E8((uint64_t)v5);
  v9 = *v1;
  if (*v1)
  {
    KeyPath = swift_getKeyPath(&unk_100073D90);
    v11 = swift_getKeyPath(&unk_100073DB8);
    v12 = swift_retain(v9);
    static Published.subscript.getter(&v23, v12, KeyPath, v11);
    swift_release(v9);
    swift_release(KeyPath);
    swift_release(v11);
    v13 = v23;
    v14 = objc_msgSend((id)v1[6], "componentKey");
    LOBYTE(KeyPath) = sub_10001119C((uint64_t)v14, v13);

    swift_bridgeObjectRelease(v13);
    v15 = swift_getKeyPath(&unk_100073DD8);
    v16 = swift_allocObject(&unk_10008EB98, 17, 7);
    *(_BYTE *)(v16 + 16) = KeyPath & 1;
    sub_10000928C((uint64_t)v5, (uint64_t)v8, &qword_100098D70);
    v17 = (uint64_t *)&v8[*(int *)(v6 + 36)];
    *v17 = v15;
    v17[1] = (uint64_t)sub_10001DE08;
    v17[2] = v16;
    sub_1000092D0((uint64_t)v5, &qword_100098D70);
    return sub_10000930C((uint64_t)v8, a1, &qword_100098D78);
  }
  else
  {
    v19 = v1[1];
    v20 = type metadata accessor for TextFormattingState(0);
    v21 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    result = EnvironmentObject.error()(0, v19, v20, v21);
    __break(1u);
  }
  return result;
}

uint64_t sub_10000E2E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  char v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t KeyPath;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int16 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int16 v81;
  char v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _OWORD *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __int16 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __int16 v119;
  char v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _OWORD *v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  __int16 v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  __int16 v153;
  char v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _OWORD *v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  __int16 v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  __int16 v195;
  char v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  _OWORD *v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  unint64_t v221;
  __int16 v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  __int16 v233;
  char v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  _OWORD *v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  char v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  unint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  char v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  unint64_t v275;
  unint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  char v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t v293;
  unint64_t v294;
  uint64_t v295;
  __int16 v296;
  char v297;
  uint64_t v298;
  _OWORD *v299;
  uint64_t v300;
  uint64_t v301;
  unint64_t v302;
  uint64_t v303;
  _OWORD *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  char v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  char v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  char *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t *v336;
  uint64_t v337;
  unint64_t v338;
  uint64_t v339;
  _OWORD *v340;
  uint64_t v341;
  uint64_t v342;
  unint64_t v343;
  uint64_t v344;
  _OWORD *v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  _OWORD *v354;
  uint64_t v355;
  uint64_t v356;
  unint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  char v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t *v370;
  uint64_t v371;
  unint64_t v372;
  uint64_t v373;
  _OWORD *v374;
  uint64_t v375;
  uint64_t v376;
  unint64_t v377;
  uint64_t v378;
  _OWORD *v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  _OWORD *v388;
  uint64_t v389;
  uint64_t v390;
  unint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  char v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  unint64_t v403;
  unint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  unint64_t v408;
  char v409;
  char v410;
  __int128 v411;
  _OWORD *v412;
  __int128 v413;
  __int128 v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  char v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  unint64_t v431;
  unint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  unint64_t v436;
  char v437;
  char v438;
  __int128 v439;
  _OWORD *v440;
  __int128 v441;
  __int128 v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  _OWORD *v451;
  uint64_t v452;
  uint64_t v453;
  unint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  char v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  unint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  char v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  unint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  id v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  unint64_t v494;
  unint64_t v495;
  __int128 v496;
  __int128 v497;
  char v498;
  char v499;
  _OWORD *v500;
  uint64_t v501;
  uint64_t v502;
  unint64_t v503;
  uint64_t v504;
  uint64_t *v505;
  char *v506;
  uint64_t v507;
  _OWORD *v508;
  uint64_t v509;
  char *v510;
  uint64_t v511;
  uint64_t v512;
  _OWORD *v513;
  char *v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  char *v518;
  uint64_t v519;
  _OWORD *v520;
  uint64_t v521;
  __int128 v522;
  __int128 v523;
  __int128 v524;
  __int128 v525;
  __int128 v526;
  unsigned __int128 v527;
  uint64_t v528;
  unsigned __int8 v529;
  char v530;
  __int128 v531;
  __int128 v532;
  __int128 v533;
  __int128 v534;
  __int128 v535;
  unsigned __int128 v536;
  uint64_t v537;
  __int16 v538;
  char v539;
  _BYTE v540[104];
  __int16 v541;
  char v542;
  _BYTE v543[24];
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  __int128 v551;
  uint64_t v552;

  v521 = a1;
  v2 = sub_10000498C(&qword_100098D80);
  __chkstk_darwin(v2);
  v505 = (uint64_t *)((char *)&v504 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v509 = sub_10000498C(&qword_100098D88);
  __chkstk_darwin(v509);
  v506 = (char *)&v504 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (int *)type metadata accessor for TFTextColorControl(0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v504 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v504 = (uint64_t)&v504 - v9;
  v511 = sub_10000498C(&qword_100098D90);
  __chkstk_darwin(v511);
  v513 = (_OWORD *)((char *)&v504 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v507 = sub_10000498C(&qword_100098D98);
  __chkstk_darwin(v507);
  v508 = (_OWORD *)((char *)&v504 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v512 = sub_10000498C(&qword_100098DA0);
  __chkstk_darwin(v512);
  v510 = (char *)&v504 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v516 = sub_10000498C(&qword_100098DA8);
  __chkstk_darwin(v516);
  v514 = (char *)&v504 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v517 = sub_10000498C(&qword_100098DB0);
  __chkstk_darwin(v517);
  v520 = (_OWORD *)((char *)&v504 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v515 = sub_10000498C(&qword_100098DB8);
  __chkstk_darwin(v515);
  v16 = (char *)&v504 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v519 = sub_10000498C(&qword_100098DC0);
  __chkstk_darwin(v519);
  v518 = (char *)&v504 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(void **)(v1 + 48);
  v19 = objc_msgSend(v18, "componentKey");
  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(UITextFormattingViewControllerFormattingStylesComponentKey);
  v22 = v21;
  v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v25 = v23;
  if (v20 == v24 && v22 == v23)
  {
    swift_bridgeObjectRelease_n(v22, 2);
LABEL_5:

    sub_10004BAC0((__n128 *)v543);
    if (BYTE1(v544))
      v27 = 256;
    else
      v27 = 0;
    *(_OWORD *)v540 = *(_OWORD *)v543;
    *(_QWORD *)&v540[16] = *(_QWORD *)&v543[16];
    *(_QWORD *)&v540[24] = v27 | v544;
    *(_QWORD *)&v540[32] = v545;
    *(_QWORD *)&v540[40] = v546;
    *(_QWORD *)&v540[48] = v547;
    *(_QWORD *)&v540[56] = v548;
    *(_QWORD *)&v540[64] = v549;
    *(_QWORD *)&v540[72] = v550;
    *(_OWORD *)&v540[80] = v551;
    *(_QWORD *)&v540[96] = v552;
    LOBYTE(v541) = 0;
    sub_10001E710((uint64_t)v543);
    v28 = sub_10001DF64();
    v29 = sub_10001DFA8();
    _ConditionalContent<>.init(storage:)(v540, &type metadata for TFFormattingStylesControl, &type metadata for TFFontAttributesControl, v28, v29);
    *(_OWORD *)v540 = v531;
    *(_OWORD *)&v540[16] = v532;
    *(_OWORD *)&v540[32] = v533;
    *(_OWORD *)&v540[48] = v534;
    *(_OWORD *)&v540[64] = v535;
    *(_OWORD *)&v540[80] = v536;
    *(_QWORD *)&v540[96] = v537;
    v541 = v538;
    v30 = sub_10000498C(&qword_100098E08);
    v31 = sub_10000498C(&qword_100098E28);
    v32 = sub_10001DF40();
    v33 = sub_10001DFEC();
    _ConditionalContent<>.init(storage:)(v540, v30, v31, v32, v33);
    if (v530)
      v34 = 256;
    else
      v34 = 0;
    v531 = v522;
    v532 = v523;
    v533 = v524;
    v534 = v525;
    v535 = v526;
    v536 = v527;
    v537 = v528;
    v538 = v34 | v529;
    v539 = 0;
    v35 = sub_10000498C(&qword_100098DF8);
    v36 = sub_10000498C(&qword_100098E48);
    v37 = sub_10001DF1C();
    v38 = sub_10001E098();
    _ConditionalContent<>.init(storage:)(&v531, v35, v36, v37, v38);
    v39 = *(_QWORD *)&v540[96];
    v40 = v541;
    v41 = v542;
    v42 = *(_OWORD *)&v540[16];
    *(_OWORD *)v16 = *(_OWORD *)v540;
    *((_OWORD *)v16 + 1) = v42;
    v43 = *(_OWORD *)&v540[48];
    *((_OWORD *)v16 + 2) = *(_OWORD *)&v540[32];
    *((_OWORD *)v16 + 3) = v43;
    v44 = *(_OWORD *)&v540[80];
    *((_OWORD *)v16 + 4) = *(_OWORD *)&v540[64];
    *((_OWORD *)v16 + 5) = v44;
    *((_QWORD *)v16 + 12) = v39;
    *((_WORD *)v16 + 52) = v40;
    v16[106] = v41;
    swift_storeEnumTagMultiPayload(v16, v515, 0);
    v45 = sub_10000498C(&qword_100098DE8);
    v46 = sub_10001DEF8();
    v47 = sub_10001E18C();
    v48 = (uint64_t)v518;
    _ConditionalContent<>.init(storage:)(v16, v45, v516, v46, v47);
    v49 = v520;
    sub_10000928C(v48, (uint64_t)v520, &qword_100098DC0);
    swift_storeEnumTagMultiPayload(v49, v517, 0);
    v50 = sub_10000498C(&qword_100098DD0);
    v51 = sub_10001DE64();
    v52 = sub_10001E47C();
    _ConditionalContent<>.init(storage:)(v49, v519, v50, v51, v52);
    sub_1000092D0(v48, &qword_100098DC0);
    return sub_10001E7D4((uint64_t)v543);
  }
  v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v22, v24, v23, 0);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(v25);
  if ((v26 & 1) != 0)
    goto LABEL_5;
  v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(UITextFormattingViewControllerFontAttributesComponentKey);
  v56 = v55;
  v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v59 = v57;
  if (v54 == v58 && v56 == v57)
  {
    swift_bridgeObjectRelease_n(v56, 2);
LABEL_16:

    v61 = type metadata accessor for TextFormattingState(0);
    v62 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    v63 = EnvironmentObject.init()(v61, v62);
    v65 = v64;
    KeyPath = swift_getKeyPath(&unk_100073C90);
    v67 = swift_getKeyPath(&unk_100073A70);
    v68 = swift_getKeyPath(&unk_100073E08);
    *(_QWORD *)v540 = v63;
    *(_QWORD *)&v540[8] = v65;
    *(_QWORD *)&v540[16] = KeyPath;
    *(_QWORD *)&v540[24] = 0;
    *(_QWORD *)&v540[32] = v67;
    *(_QWORD *)&v540[40] = 0;
    *(_QWORD *)&v540[48] = v68;
    memset(&v540[56], 0, 48);
    LOBYTE(v541) = 1;
    v69 = sub_10001DF64();
    v70 = sub_10001DFA8();
    swift_retain(v63);
    swift_retain(KeyPath);
    swift_retain(v67);
    swift_retain(v68);
    _ConditionalContent<>.init(storage:)(v540, &type metadata for TFFormattingStylesControl, &type metadata for TFFontAttributesControl, v69, v70);
    *(_OWORD *)v540 = v531;
    *(_OWORD *)&v540[16] = v532;
    *(_OWORD *)&v540[32] = v533;
    *(_OWORD *)&v540[48] = v534;
    *(_OWORD *)&v540[64] = v535;
    *(_OWORD *)&v540[80] = v536;
    *(_QWORD *)&v540[96] = v537;
    v541 = v538;
    v71 = sub_10000498C(&qword_100098E08);
    v72 = sub_10000498C(&qword_100098E28);
    v73 = sub_10001DF40();
    v74 = sub_10001DFEC();
    _ConditionalContent<>.init(storage:)(v540, v71, v72, v73, v74);
    if (v530)
      v75 = 256;
    else
      v75 = 0;
    v531 = v522;
    v532 = v523;
    v533 = v524;
    v534 = v525;
    v535 = v526;
    v536 = v527;
    v537 = v528;
    v538 = v75 | v529;
    v539 = 0;
    v76 = sub_10000498C(&qword_100098DF8);
    v77 = sub_10000498C(&qword_100098E48);
    v78 = sub_10001DF1C();
    v79 = sub_10001E098();
    _ConditionalContent<>.init(storage:)(&v531, v76, v77, v78, v79);
    v80 = *(_QWORD *)&v540[96];
    v81 = v541;
    v82 = v542;
    v83 = *(_OWORD *)&v540[16];
    *(_OWORD *)v16 = *(_OWORD *)v540;
    *((_OWORD *)v16 + 1) = v83;
    v84 = *(_OWORD *)&v540[48];
    *((_OWORD *)v16 + 2) = *(_OWORD *)&v540[32];
    *((_OWORD *)v16 + 3) = v84;
    v85 = *(_OWORD *)&v540[80];
    *((_OWORD *)v16 + 4) = *(_OWORD *)&v540[64];
    *((_OWORD *)v16 + 5) = v85;
    *((_QWORD *)v16 + 12) = v80;
    *((_WORD *)v16 + 52) = v81;
    v16[106] = v82;
    swift_storeEnumTagMultiPayload(v16, v515, 0);
    v86 = sub_10000498C(&qword_100098DE8);
    v87 = sub_10001DEF8();
    v88 = sub_10001E18C();
    v89 = (uint64_t)v518;
    _ConditionalContent<>.init(storage:)(v16, v86, v516, v87, v88);
    v90 = v520;
    sub_10000928C(v89, (uint64_t)v520, &qword_100098DC0);
    swift_storeEnumTagMultiPayload(v90, v517, 0);
    v91 = sub_10000498C(&qword_100098DD0);
    v92 = sub_10001DE64();
    v93 = sub_10001E47C();
    _ConditionalContent<>.init(storage:)(v90, v519, v91, v92, v93);
    sub_1000092D0(v89, &qword_100098DC0);
    swift_release(v68);
LABEL_20:
    swift_release(v67);
LABEL_21:
    v94 = KeyPath;
LABEL_22:
    swift_release(v94);
    return swift_release(v63);
  }
  v60 = _stringCompareWithSmolCheck(_:_:expecting:)(v54, v56, v58, v57, 0);
  swift_bridgeObjectRelease(v56);
  swift_bridgeObjectRelease(v59);
  if ((v60 & 1) != 0)
    goto LABEL_16;
  v95 = static String._unconditionallyBridgeFromObjectiveC(_:)(UITextFormattingViewControllerFontPickerComponentKey);
  v97 = v96;
  v99 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v100 = v98;
  if (v95 == v99 && v97 == v98)
  {
    swift_bridgeObjectRelease_n(v97, 2);
LABEL_27:

    v102 = type metadata accessor for TextFormattingState(0);
    v103 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    v63 = EnvironmentObject.init()(v102, v103);
    v105 = v104;
    KeyPath = swift_getKeyPath(&unk_100073C90);
    v67 = swift_getKeyPath(&unk_100073E08);
    *(_QWORD *)v540 = v63;
    *(_QWORD *)&v540[8] = v105;
    *(_QWORD *)&v540[16] = KeyPath;
    *(_QWORD *)&v540[24] = 0;
    *(_QWORD *)&v540[32] = v67;
    memset(&v540[40], 0, 42);
    v106 = sub_10001E010();
    v107 = sub_10001E054();
    swift_retain(v63);
    swift_retain(KeyPath);
    swift_retain(v67);
    _ConditionalContent<>.init(storage:)(v540, &type metadata for TFFontPickerControl, &type metadata for TFFontSizeControl, v106, v107);
    if (BYTE1(v536))
      v108 = 256;
    else
      v108 = 0;
    *(_OWORD *)v540 = v531;
    *(_OWORD *)&v540[16] = v532;
    *(_OWORD *)&v540[32] = v533;
    *(_OWORD *)&v540[48] = v534;
    *(_OWORD *)&v540[64] = v535;
    *(_QWORD *)&v540[88] = 0;
    *(_QWORD *)&v540[96] = 0;
    *(_QWORD *)&v540[80] = v108 | v536;
    v541 = 256;
    v109 = sub_10000498C(&qword_100098E08);
    v110 = sub_10000498C(&qword_100098E28);
    v111 = sub_10001DF40();
    v112 = sub_10001DFEC();
    _ConditionalContent<>.init(storage:)(v540, v109, v110, v111, v112);
    if (v530)
      v113 = 256;
    else
      v113 = 0;
    v531 = v522;
    v532 = v523;
    v533 = v524;
    v534 = v525;
    v535 = v526;
    v536 = v527;
    v537 = v528;
    v538 = v113 | v529;
    v539 = 0;
    v114 = sub_10000498C(&qword_100098DF8);
    v115 = sub_10000498C(&qword_100098E48);
    v116 = sub_10001DF1C();
    v117 = sub_10001E098();
    _ConditionalContent<>.init(storage:)(&v531, v114, v115, v116, v117);
    v118 = *(_QWORD *)&v540[96];
    v119 = v541;
    v120 = v542;
    v121 = *(_OWORD *)&v540[16];
    *(_OWORD *)v16 = *(_OWORD *)v540;
    *((_OWORD *)v16 + 1) = v121;
    v122 = *(_OWORD *)&v540[48];
    *((_OWORD *)v16 + 2) = *(_OWORD *)&v540[32];
    *((_OWORD *)v16 + 3) = v122;
    v123 = *(_OWORD *)&v540[80];
    *((_OWORD *)v16 + 4) = *(_OWORD *)&v540[64];
    *((_OWORD *)v16 + 5) = v123;
    *((_QWORD *)v16 + 12) = v118;
    *((_WORD *)v16 + 52) = v119;
    v16[106] = v120;
    swift_storeEnumTagMultiPayload(v16, v515, 0);
    v124 = sub_10000498C(&qword_100098DE8);
    v125 = sub_10001DEF8();
    v126 = sub_10001E18C();
    v127 = (uint64_t)v518;
    _ConditionalContent<>.init(storage:)(v16, v124, v516, v125, v126);
    v128 = v520;
    sub_10000928C(v127, (uint64_t)v520, &qword_100098DC0);
    swift_storeEnumTagMultiPayload(v128, v517, 0);
    v129 = sub_10000498C(&qword_100098DD0);
    v130 = sub_10001DE64();
    v131 = sub_10001E47C();
    _ConditionalContent<>.init(storage:)(v128, v519, v129, v130, v131);
    sub_1000092D0(v127, &qword_100098DC0);
    goto LABEL_20;
  }
  v101 = _stringCompareWithSmolCheck(_:_:expecting:)(v95, v97, v99, v98, 0);
  swift_bridgeObjectRelease(v97);
  swift_bridgeObjectRelease(v100);
  if ((v101 & 1) != 0)
    goto LABEL_27;
  v132 = static String._unconditionallyBridgeFromObjectiveC(_:)(UITextFormattingViewControllerFontSizeComponentKey);
  v134 = v133;
  v136 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v137 = v135;
  if (v132 == v136 && v134 == v135)
  {
    swift_bridgeObjectRelease_n(v134, 2);
LABEL_38:

    sub_10004BBEC((uint64_t)v543);
    if (BYTE1(v545))
      v139 = 256;
    else
      v139 = 0;
    *(_OWORD *)&v540[8] = *(_OWORD *)&v543[8];
    *(_QWORD *)v540 = v543[0];
    *(_QWORD *)&v540[24] = v544;
    *(_QWORD *)&v540[32] = v139 | v545;
    *(_QWORD *)&v540[40] = v546;
    *(_QWORD *)&v540[48] = v547;
    *(_QWORD *)&v540[56] = v548;
    *(_QWORD *)&v540[64] = v549;
    *(_QWORD *)&v540[72] = v550;
    v540[80] = v551;
    v540[81] = 1;
    sub_10001E5D0((uint64_t)v543);
    v140 = sub_10001E010();
    v141 = sub_10001E054();
    _ConditionalContent<>.init(storage:)(v540, &type metadata for TFFontPickerControl, &type metadata for TFFontSizeControl, v140, v141);
    if (BYTE1(v536))
      v142 = 256;
    else
      v142 = 0;
    *(_OWORD *)v540 = v531;
    *(_OWORD *)&v540[16] = v532;
    *(_OWORD *)&v540[32] = v533;
    *(_OWORD *)&v540[48] = v534;
    *(_OWORD *)&v540[64] = v535;
    *(_QWORD *)&v540[88] = 0;
    *(_QWORD *)&v540[96] = 0;
    *(_QWORD *)&v540[80] = v142 | v536;
    v541 = 256;
    v143 = sub_10000498C(&qword_100098E08);
    v144 = sub_10000498C(&qword_100098E28);
    v145 = sub_10001DF40();
    v146 = sub_10001DFEC();
    _ConditionalContent<>.init(storage:)(v540, v143, v144, v145, v146);
    if (v530)
      v147 = 256;
    else
      v147 = 0;
    v531 = v522;
    v532 = v523;
    v533 = v524;
    v534 = v525;
    v535 = v526;
    v536 = v527;
    v537 = v528;
    v538 = v147 | v529;
    v539 = 0;
    v148 = sub_10000498C(&qword_100098DF8);
    v149 = sub_10000498C(&qword_100098E48);
    v150 = sub_10001DF1C();
    v151 = sub_10001E098();
    _ConditionalContent<>.init(storage:)(&v531, v148, v149, v150, v151);
    v152 = *(_QWORD *)&v540[96];
    v153 = v541;
    v154 = v542;
    v155 = *(_OWORD *)&v540[16];
    *(_OWORD *)v16 = *(_OWORD *)v540;
    *((_OWORD *)v16 + 1) = v155;
    v156 = *(_OWORD *)&v540[48];
    *((_OWORD *)v16 + 2) = *(_OWORD *)&v540[32];
    *((_OWORD *)v16 + 3) = v156;
    v157 = *(_OWORD *)&v540[80];
    *((_OWORD *)v16 + 4) = *(_OWORD *)&v540[64];
    *((_OWORD *)v16 + 5) = v157;
    *((_QWORD *)v16 + 12) = v152;
    *((_WORD *)v16 + 52) = v153;
    v16[106] = v154;
    swift_storeEnumTagMultiPayload(v16, v515, 0);
    v158 = sub_10000498C(&qword_100098DE8);
    v159 = sub_10001DEF8();
    v160 = sub_10001E18C();
    v161 = (uint64_t)v518;
    _ConditionalContent<>.init(storage:)(v16, v158, v516, v159, v160);
    v162 = v520;
    sub_10000928C(v161, (uint64_t)v520, &qword_100098DC0);
    swift_storeEnumTagMultiPayload(v162, v517, 0);
    v163 = sub_10000498C(&qword_100098DD0);
    v164 = sub_10001DE64();
    v165 = sub_10001E47C();
    _ConditionalContent<>.init(storage:)(v162, v519, v163, v164, v165);
    sub_1000092D0(v161, &qword_100098DC0);
    return sub_10001E670((uint64_t)v543);
  }
  v138 = _stringCompareWithSmolCheck(_:_:expecting:)(v132, v134, v136, v135, 0);
  swift_bridgeObjectRelease(v134);
  swift_bridgeObjectRelease(v137);
  if ((v138 & 1) != 0)
    goto LABEL_38;
  v166 = static String._unconditionallyBridgeFromObjectiveC(_:)(UITextFormattingViewControllerFontPointSizeComponentKey);
  v168 = v167;
  v170 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v171 = v169;
  if (v166 == v170 && v168 == v169)
  {
    swift_bridgeObjectRelease_n(v168, 2);
LABEL_52:

    v173 = type metadata accessor for TextFormattingState(0);
    v174 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    v175 = EnvironmentObject.init()(v173, v174);
    v177 = v176;
    v178 = swift_getKeyPath(&unk_100073C90);
    v179 = swift_getKeyPath(&unk_100073CB8);
    v180 = swift_getKeyPath(&unk_100073CE0);
    v181 = swift_getKeyPath(&unk_100073A70);
    *(_QWORD *)v540 = 1;
    *(_QWORD *)&v540[8] = v175;
    v514 = (char *)v175;
    *(_QWORD *)&v540[16] = v177;
    *(_QWORD *)&v540[24] = v178;
    *(_QWORD *)&v540[32] = 0;
    *(_QWORD *)&v540[40] = v179;
    *(_QWORD *)&v540[48] = 0;
    *(_QWORD *)&v540[56] = v180;
    *(_QWORD *)&v540[64] = 0;
    *(_QWORD *)&v540[72] = v181;
    *(_WORD *)&v540[80] = 0;
    swift_retain(v175);
    sub_10001D970(v178, 0, 0);
    sub_10001D97C(v179, 0);
    sub_10001D97C(v180, 0);
    sub_10001D97C(v181, 0);
    v182 = sub_10001E054();
    v183 = sub_10001E0E0();
    _ConditionalContent<>.init(storage:)(v540, &type metadata for TFFontSizeControl, &type metadata for TFTextAlignmentControl, v182, v183);
    if (BYTE1(v536))
      v184 = 256;
    else
      v184 = 0;
    *(_OWORD *)v540 = v531;
    *(_OWORD *)&v540[16] = v532;
    *(_OWORD *)&v540[32] = v533;
    *(_OWORD *)&v540[48] = v534;
    *(_OWORD *)&v540[64] = v535;
    *(_WORD *)&v540[80] = v184 | v536;
    v540[82] = 0;
    v185 = sub_10000498C(&qword_100098E58);
    v186 = sub_10000498C(&qword_100098E70);
    v187 = sub_10001E0BC();
    v188 = sub_10001E124();
    _ConditionalContent<>.init(storage:)(v540, v185, v186, v187, v188);
    v189 = 0x10000;
    if (!BYTE2(v527))
      v189 = 0;
    v531 = v522;
    v532 = v523;
    v533 = v524;
    v534 = v525;
    v535 = v526;
    v537 = 0;
    v536 = (unint64_t)v189 | (unsigned __int128)(unsigned __int16)v527;
    v538 = 0;
    v539 = 1;
    v190 = sub_10000498C(&qword_100098DF8);
    v191 = sub_10000498C(&qword_100098E48);
    v192 = sub_10001DF1C();
    v193 = sub_10001E098();
    _ConditionalContent<>.init(storage:)(&v531, v190, v191, v192, v193);
    v194 = *(_QWORD *)&v540[96];
    v195 = v541;
    v196 = v542;
    v197 = *(_OWORD *)&v540[16];
    *(_OWORD *)v16 = *(_OWORD *)v540;
    *((_OWORD *)v16 + 1) = v197;
    v198 = *(_OWORD *)&v540[48];
    *((_OWORD *)v16 + 2) = *(_OWORD *)&v540[32];
    *((_OWORD *)v16 + 3) = v198;
    v199 = *(_OWORD *)&v540[80];
    *((_OWORD *)v16 + 4) = *(_OWORD *)&v540[64];
    *((_OWORD *)v16 + 5) = v199;
    *((_QWORD *)v16 + 12) = v194;
    *((_WORD *)v16 + 52) = v195;
    v16[106] = v196;
    swift_storeEnumTagMultiPayload(v16, v515, 0);
    v200 = sub_10000498C(&qword_100098DE8);
    v201 = sub_10001DEF8();
    v202 = sub_10001E18C();
    v203 = (uint64_t)v518;
    _ConditionalContent<>.init(storage:)(v16, v200, v516, v201, v202);
    v204 = v520;
    sub_10000928C(v203, (uint64_t)v520, &qword_100098DC0);
    swift_storeEnumTagMultiPayload(v204, v517, 0);
    v205 = sub_10000498C(&qword_100098DD0);
    v206 = sub_10001DE64();
    v207 = sub_10001E47C();
    _ConditionalContent<>.init(storage:)(v204, v519, v205, v206, v207);
    sub_1000092D0(v203, &qword_100098DC0);
    swift_release(v514);
    v208 = v178;
    goto LABEL_58;
  }
  v172 = _stringCompareWithSmolCheck(_:_:expecting:)(v166, v168, v170, v169, 0);
  swift_bridgeObjectRelease(v168);
  swift_bridgeObjectRelease(v171);
  if ((v172 & 1) != 0)
    goto LABEL_52;
  v209 = static String._unconditionallyBridgeFromObjectiveC(_:)(UITextFormattingViewControllerTextAlignmentComponentKey);
  v211 = v210;
  v213 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v214 = v212;
  if (v209 == v213 && v211 == v212)
  {
    swift_bridgeObjectRelease_n(v211, 2);
    goto LABEL_63;
  }
  v215 = _stringCompareWithSmolCheck(_:_:expecting:)(v209, v211, v213, v212, 0);
  swift_bridgeObjectRelease(v211);
  swift_bridgeObjectRelease(v214);
  if ((v215 & 1) != 0)
  {
LABEL_63:

    v216 = type metadata accessor for TextFormattingState(0);
    v217 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    v63 = EnvironmentObject.init()(v216, v217);
    v219 = v218;
    KeyPath = swift_getKeyPath(&unk_100073C90);
    *(_QWORD *)v540 = 0;
    *(_QWORD *)&v540[8] = v63;
    *(_QWORD *)&v540[16] = v219;
    *(_QWORD *)&v540[24] = KeyPath;
    memset(&v540[32], 0, 48);
    *(_WORD *)&v540[80] = 256;
    v220 = sub_10001E054();
    v221 = sub_10001E0E0();
    swift_retain(v63);
    swift_retain(KeyPath);
    _ConditionalContent<>.init(storage:)(v540, &type metadata for TFFontSizeControl, &type metadata for TFTextAlignmentControl, v220, v221);
    if (BYTE1(v536))
      v222 = 256;
    else
      v222 = 0;
    *(_OWORD *)v540 = v531;
    *(_OWORD *)&v540[16] = v532;
    *(_OWORD *)&v540[32] = v533;
    *(_OWORD *)&v540[48] = v534;
    *(_OWORD *)&v540[64] = v535;
    *(_WORD *)&v540[80] = v222 | v536;
    v540[82] = 0;
    v223 = sub_10000498C(&qword_100098E58);
    v224 = sub_10000498C(&qword_100098E70);
    v225 = sub_10001E0BC();
    v226 = sub_10001E124();
    _ConditionalContent<>.init(storage:)(v540, v223, v224, v225, v226);
    v227 = 0x10000;
    if (!BYTE2(v527))
      v227 = 0;
    goto LABEL_68;
  }
  v246 = static String._unconditionallyBridgeFromObjectiveC(_:)(UITextFormattingViewControllerTextAlignmentAndJustificationComponentKey);
  v248 = v247;
  v250 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v251 = v249;
  if (v246 == v250 && v248 == v249)
  {
    swift_bridgeObjectRelease_n(v248, 2);
LABEL_74:

    v253 = type metadata accessor for TextFormattingState(0);
    v254 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    v63 = EnvironmentObject.init()(v253, v254);
    v256 = v255;
    KeyPath = swift_getKeyPath(&unk_100073C90);
    *(_QWORD *)&v531 = 1;
    *((_QWORD *)&v531 + 1) = v63;
    *(_QWORD *)&v532 = v256;
    *((_QWORD *)&v532 + 1) = KeyPath;
    LOWORD(v533) = 0;
    BYTE2(v533) = 0;
    v257 = sub_10001E0E0();
    v258 = sub_10001E148();
    swift_retain(v63);
    swift_retain(KeyPath);
    _ConditionalContent<>.init(storage:)(&v531, &type metadata for TFTextAlignmentControl, &type metadata for TFTextIndentationControl, v257, v258);
    if (v540[34])
      v259 = 0x10000;
    else
      v259 = 0;
    *(_QWORD *)&v540[32] = v259 | *(unsigned __int16 *)&v540[32];
    memset(&v540[40], 0, 42);
    v540[82] = 1;
    v260 = sub_10000498C(&qword_100098E58);
    v261 = sub_10000498C(&qword_100098E70);
    v262 = sub_10001E0BC();
    v263 = sub_10001E124();
    _ConditionalContent<>.init(storage:)(v540, v260, v261, v262, v263);
    if (BYTE2(v527))
      v227 = 0x10000;
    else
      v227 = 0;
LABEL_68:
    v531 = v522;
    v532 = v523;
    v533 = v524;
    v534 = v525;
    v535 = v526;
    v537 = 0;
    v536 = (unint64_t)v227 | (unsigned __int128)(unsigned __int16)v527;
    v538 = 0;
    v539 = 1;
    v228 = sub_10000498C(&qword_100098DF8);
    v229 = sub_10000498C(&qword_100098E48);
    v230 = sub_10001DF1C();
    v231 = sub_10001E098();
    _ConditionalContent<>.init(storage:)(&v531, v228, v229, v230, v231);
    v232 = *(_QWORD *)&v540[96];
    v233 = v541;
    v234 = v542;
    v235 = *(_OWORD *)&v540[16];
    *(_OWORD *)v16 = *(_OWORD *)v540;
    *((_OWORD *)v16 + 1) = v235;
    v236 = *(_OWORD *)&v540[48];
    *((_OWORD *)v16 + 2) = *(_OWORD *)&v540[32];
    *((_OWORD *)v16 + 3) = v236;
    v237 = *(_OWORD *)&v540[80];
    *((_OWORD *)v16 + 4) = *(_OWORD *)&v540[64];
    *((_OWORD *)v16 + 5) = v237;
    *((_QWORD *)v16 + 12) = v232;
    *((_WORD *)v16 + 52) = v233;
    v16[106] = v234;
    swift_storeEnumTagMultiPayload(v16, v515, 0);
    v238 = sub_10000498C(&qword_100098DE8);
    v239 = sub_10001DEF8();
    v240 = sub_10001E18C();
    v241 = (uint64_t)v518;
    _ConditionalContent<>.init(storage:)(v16, v238, v516, v239, v240);
LABEL_69:
    v242 = v520;
    sub_10000928C(v241, (uint64_t)v520, &qword_100098DC0);
    swift_storeEnumTagMultiPayload(v242, v517, 0);
    v243 = sub_10000498C(&qword_100098DD0);
    v244 = sub_10001DE64();
    v245 = sub_10001E47C();
    _ConditionalContent<>.init(storage:)(v242, v519, v243, v244, v245);
    sub_1000092D0(v241, &qword_100098DC0);
    goto LABEL_21;
  }
  v252 = _stringCompareWithSmolCheck(_:_:expecting:)(v246, v248, v250, v249, 0);
  swift_bridgeObjectRelease(v248);
  swift_bridgeObjectRelease(v251);
  if ((v252 & 1) != 0)
    goto LABEL_74;
  v264 = static String._unconditionallyBridgeFromObjectiveC(_:)(UITextFormattingViewControllerTextIndentationComponentKey);
  v266 = v265;
  v268 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v269 = v267;
  if (v264 == v268 && v266 == v267)
  {
    swift_bridgeObjectRelease_n(v266, 2);
LABEL_84:

    v271 = type metadata accessor for TextFormattingState(0);
    v272 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    v63 = EnvironmentObject.init()(v271, v272);
    v274 = v273;
    KeyPath = swift_getKeyPath(&unk_100073C90);
    *(_QWORD *)&v531 = v63;
    *((_QWORD *)&v531 + 1) = v274;
    v532 = (unint64_t)KeyPath;
    LOWORD(v533) = 0;
    BYTE2(v533) = 1;
    v275 = sub_10001E0E0();
    v276 = sub_10001E148();
    swift_retain(v63);
    swift_retain(KeyPath);
    _ConditionalContent<>.init(storage:)(&v531, &type metadata for TFTextAlignmentControl, &type metadata for TFTextIndentationControl, v275, v276);
    if (v540[34])
      v277 = 0x10000;
    else
      v277 = 0;
    *(_QWORD *)&v540[32] = v277 | *(unsigned __int16 *)&v540[32];
    memset(&v540[40], 0, 42);
    v540[82] = 1;
    v278 = sub_10000498C(&qword_100098E58);
    v279 = sub_10000498C(&qword_100098E70);
    v280 = sub_10001E0BC();
    v281 = sub_10001E124();
    _ConditionalContent<>.init(storage:)(v540, v278, v279, v280, v281);
    if (BYTE2(v527))
      v227 = 0x10000;
    else
      v227 = 0;
    goto LABEL_68;
  }
  v270 = _stringCompareWithSmolCheck(_:_:expecting:)(v264, v266, v268, v267, 0);
  swift_bridgeObjectRelease(v266);
  swift_bridgeObjectRelease(v269);
  if ((v270 & 1) != 0)
    goto LABEL_84;
  v282 = static String._unconditionallyBridgeFromObjectiveC(_:)(UITextFormattingViewControllerLineHeightComponentKey);
  v284 = v283;
  v286 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v287 = v285;
  if (v282 == v286 && v284 == v285)
  {
    swift_bridgeObjectRelease_n(v284, 2);
LABEL_94:

    v289 = type metadata accessor for TextFormattingState(0);
    v290 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    v63 = EnvironmentObject.init()(v289, v290);
    v292 = v291;
    KeyPath = swift_getKeyPath(&unk_100073C90);
    *(_QWORD *)&v531 = v63;
    *((_QWORD *)&v531 + 1) = v292;
    *(_QWORD *)&v532 = KeyPath;
    WORD4(v532) = 0;
    BYTE10(v532) = 0;
LABEL_95:
    v293 = sub_10001E1F8();
    v294 = sub_10001E23C();
    swift_retain(v63);
    swift_retain(KeyPath);
    _ConditionalContent<>.init(storage:)(&v531, &type metadata for TFLineHeightControl, &type metadata for TFListStylesControl, v293, v294);
    v295 = *(_QWORD *)&v540[16];
    v296 = *(_WORD *)&v540[24];
    v297 = v540[26];
    v298 = v507;
    v299 = v508;
    *v508 = *(_OWORD *)v540;
    *((_QWORD *)v299 + 2) = v295;
    *((_WORD *)v299 + 12) = v296;
    *((_BYTE *)v299 + 26) = v297;
    swift_storeEnumTagMultiPayload(v299, v298, 0);
    v300 = sub_10000498C(&qword_100098E98);
    v301 = sub_10001E1D4();
    v302 = sub_10001E280();
    v303 = (uint64_t)v510;
    _ConditionalContent<>.init(storage:)(v299, v300, v509, v301, v302);
    v304 = v513;
    sub_10000928C(v303, (uint64_t)v513, &qword_100098DA0);
    swift_storeEnumTagMultiPayload(v304, v511, 0);
    v305 = sub_10000498C(&qword_100098ED0);
    v306 = sub_10001E1B0();
    v307 = sub_10001E348();
    v308 = (uint64_t)v514;
    _ConditionalContent<>.init(storage:)(v304, v512, v305, v306, v307);
    sub_1000092D0(v303, &qword_100098DA0);
LABEL_96:
    sub_10000928C(v308, (uint64_t)v16, &qword_100098DA8);
    swift_storeEnumTagMultiPayload(v16, v515, 1);
    v309 = sub_10000498C(&qword_100098DE8);
    v310 = sub_10001DEF8();
    v311 = sub_10001E18C();
    v241 = (uint64_t)v518;
    _ConditionalContent<>.init(storage:)(v16, v309, v516, v310, v311);
    sub_1000092D0(v308, &qword_100098DA8);
    goto LABEL_69;
  }
  v288 = _stringCompareWithSmolCheck(_:_:expecting:)(v282, v284, v286, v285, 0);
  swift_bridgeObjectRelease(v284);
  swift_bridgeObjectRelease(v287);
  if ((v288 & 1) != 0)
    goto LABEL_94;
  v312 = static String._unconditionallyBridgeFromObjectiveC(_:)(UITextFormattingViewControllerListStylesComponentKey);
  v314 = v313;
  v316 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v317 = v315;
  if (v312 == v316 && v314 == v315)
  {
    swift_bridgeObjectRelease_n(v314, 2);
LABEL_101:

    v319 = type metadata accessor for TextFormattingState(0);
    v320 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    v63 = EnvironmentObject.init()(v319, v320);
    v322 = v321;
    KeyPath = swift_getKeyPath(&unk_100073C90);
    *(_QWORD *)&v531 = v63;
    *((_QWORD *)&v531 + 1) = v322;
    *(_QWORD *)&v532 = KeyPath;
    WORD4(v532) = 0;
    BYTE10(v532) = 1;
    goto LABEL_95;
  }
  v318 = _stringCompareWithSmolCheck(_:_:expecting:)(v312, v314, v316, v315, 0);
  swift_bridgeObjectRelease(v314);
  swift_bridgeObjectRelease(v317);
  if ((v318 & 1) != 0)
    goto LABEL_101;
  v323 = static String._unconditionallyBridgeFromObjectiveC(_:)(UITextFormattingViewControllerTextColorComponentKey);
  v325 = v324;
  v327 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v328 = v326;
  if (v323 == v327 && v325 == v326)
  {
    swift_bridgeObjectRelease_n(v325, 2);
LABEL_106:

    v330 = type metadata accessor for TextFormattingState(0);
    v331 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    *(_QWORD *)v8 = EnvironmentObject.init()(v330, v331);
    *((_QWORD *)v8 + 1) = v332;
    *((_QWORD *)v8 + 2) = swift_getKeyPath(&unk_100073C90);
    *((_WORD *)v8 + 12) = 0;
    *((_QWORD *)v8 + 4) = swift_getKeyPath(&unk_100073A70);
    v8[40] = 0;
    *((_QWORD *)v8 + 6) = swift_getKeyPath(&unk_100073E08);
    v8[56] = 0;
    v333 = &v8[v5[8]];
    *(_QWORD *)v333 = swift_getKeyPath(&unk_100073E38);
    v334 = sub_10000498C(&qword_100098F10);
    swift_storeEnumTagMultiPayload(v333, v334, 0);
    *(_QWORD *)&v8[v5[9]] = 0x4042000000000000;
    *(_QWORD *)&v8[v5[10]] = 0x403C000000000000;
    v335 = v504;
    sub_10001E50C((uint64_t)v8, v504);
    v336 = v505;
    sub_10001E550(v335, (uint64_t)v505);
    swift_storeEnumTagMultiPayload(v336, v2, 0);
    v337 = sub_100007D90(&qword_100098EB8, type metadata accessor for TFTextColorControl, (uint64_t)&unk_100074F6C);
    v338 = sub_10001E304();
    v339 = (uint64_t)v506;
    _ConditionalContent<>.init(storage:)(v336, v5, &type metadata for TFQuoteLevelControl, v337, v338);
    v340 = v508;
    sub_10000928C(v339, (uint64_t)v508, &qword_100098D88);
    swift_storeEnumTagMultiPayload(v340, v507, 1);
    v341 = sub_10000498C(&qword_100098E98);
    v342 = sub_10001E1D4();
    v343 = sub_10001E280();
    v344 = (uint64_t)v510;
    _ConditionalContent<>.init(storage:)(v340, v341, v509, v342, v343);
    sub_1000092D0(v339, &qword_100098D88);
    v345 = v513;
    sub_10000928C(v344, (uint64_t)v513, &qword_100098DA0);
    swift_storeEnumTagMultiPayload(v345, v511, 0);
    v346 = sub_10000498C(&qword_100098ED0);
    v347 = sub_10001E1B0();
    v348 = sub_10001E348();
    v349 = (uint64_t)v514;
    _ConditionalContent<>.init(storage:)(v345, v512, v346, v347, v348);
    sub_1000092D0(v344, &qword_100098DA0);
    sub_10000928C(v349, (uint64_t)v16, &qword_100098DA8);
    swift_storeEnumTagMultiPayload(v16, v515, 1);
    v350 = sub_10000498C(&qword_100098DE8);
    v351 = sub_10001DEF8();
    v352 = sub_10001E18C();
    v353 = (uint64_t)v518;
    _ConditionalContent<>.init(storage:)(v16, v350, v516, v351, v352);
    sub_1000092D0(v349, &qword_100098DA8);
    v354 = v520;
    sub_10000928C(v353, (uint64_t)v520, &qword_100098DC0);
    swift_storeEnumTagMultiPayload(v354, v517, 0);
    v355 = sub_10000498C(&qword_100098DD0);
    v356 = sub_10001DE64();
    v357 = sub_10001E47C();
    _ConditionalContent<>.init(storage:)(v354, v519, v355, v356, v357);
    sub_1000092D0(v353, &qword_100098DC0);
    return sub_10001E594(v335);
  }
  v329 = _stringCompareWithSmolCheck(_:_:expecting:)(v323, v325, v327, v326, 0);
  swift_bridgeObjectRelease(v325);
  swift_bridgeObjectRelease(v328);
  if ((v329 & 1) != 0)
    goto LABEL_106;
  v358 = static String._unconditionallyBridgeFromObjectiveC(_:)(UITextFormattingViewControllerQuoteLevelComponentKey);
  v360 = v359;
  v362 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v363 = v361;
  if (v358 == v362 && v360 == v361)
  {
    swift_bridgeObjectRelease_n(v360, 2);
LABEL_111:

    v365 = type metadata accessor for TextFormattingState(0);
    v366 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    v63 = EnvironmentObject.init()(v365, v366);
    v368 = v367;
    v369 = swift_getKeyPath(&unk_100073C90);
    v370 = v505;
    *v505 = v63;
    v370[1] = v368;
    v370[2] = v369;
    *((_WORD *)v370 + 12) = 0;
    swift_storeEnumTagMultiPayload(v370, v2, 1);
    v371 = sub_100007D90(&qword_100098EB8, type metadata accessor for TFTextColorControl, (uint64_t)&unk_100074F6C);
    v372 = sub_10001E304();
    swift_retain(v63);
    swift_retain(v369);
    v373 = (uint64_t)v506;
    _ConditionalContent<>.init(storage:)(v370, v5, &type metadata for TFQuoteLevelControl, v371, v372);
    v374 = v508;
    sub_10000928C(v373, (uint64_t)v508, &qword_100098D88);
    swift_storeEnumTagMultiPayload(v374, v507, 1);
    v375 = sub_10000498C(&qword_100098E98);
    v376 = sub_10001E1D4();
    v377 = sub_10001E280();
    v378 = (uint64_t)v510;
    _ConditionalContent<>.init(storage:)(v374, v375, v509, v376, v377);
    sub_1000092D0(v373, &qword_100098D88);
    v379 = v513;
    sub_10000928C(v378, (uint64_t)v513, &qword_100098DA0);
    swift_storeEnumTagMultiPayload(v379, v511, 0);
    v380 = sub_10000498C(&qword_100098ED0);
    v381 = sub_10001E1B0();
    v382 = sub_10001E348();
    v383 = (uint64_t)v514;
    _ConditionalContent<>.init(storage:)(v379, v512, v380, v381, v382);
    sub_1000092D0(v378, &qword_100098DA0);
    sub_10000928C(v383, (uint64_t)v16, &qword_100098DA8);
    swift_storeEnumTagMultiPayload(v16, v515, 1);
    v384 = sub_10000498C(&qword_100098DE8);
    v385 = sub_10001DEF8();
    v386 = sub_10001E18C();
    v387 = (uint64_t)v518;
    _ConditionalContent<>.init(storage:)(v16, v384, v516, v385, v386);
    sub_1000092D0(v383, &qword_100098DA8);
    v388 = v520;
    sub_10000928C(v387, (uint64_t)v520, &qword_100098DC0);
    swift_storeEnumTagMultiPayload(v388, v517, 0);
    v389 = sub_10000498C(&qword_100098DD0);
    v390 = sub_10001DE64();
    v391 = sub_10001E47C();
    _ConditionalContent<>.init(storage:)(v388, v519, v389, v390, v391);
    sub_1000092D0(v387, &qword_100098DC0);
    v94 = v369;
    goto LABEL_22;
  }
  v364 = _stringCompareWithSmolCheck(_:_:expecting:)(v358, v360, v362, v361, 0);
  swift_bridgeObjectRelease(v360);
  swift_bridgeObjectRelease(v363);
  if ((v364 & 1) != 0)
    goto LABEL_111;
  v392 = static String._unconditionallyBridgeFromObjectiveC(_:)(UITextFormattingViewControllerBlockquoteComponentKey);
  v394 = v393;
  v396 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v397 = v395;
  if (v392 == v396 && v394 == v395)
  {
    swift_bridgeObjectRelease_n(v394, 2);
LABEL_116:

    v399 = type metadata accessor for TextFormattingState(0);
    v400 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    v63 = EnvironmentObject.init()(v399, v400);
    v402 = v401;
    KeyPath = swift_getKeyPath(&unk_100073C90);
    *(_QWORD *)v540 = v63;
    *(_QWORD *)&v540[8] = v402;
    *(_QWORD *)&v540[16] = KeyPath;
    memset(&v540[24], 0, 73);
    v403 = sub_10001E390();
    v404 = sub_10001E3D4();
    swift_retain(v63);
    swift_retain(KeyPath);
    _ConditionalContent<>.init(storage:)(v540, &type metadata for TFBlockquoteControl, &type metadata for TFHighlightControl, v403, v404);
    v531 = v522;
    v532 = v523;
    v533 = v524;
    v534 = v525;
    v535 = v526;
    v536 = v527;
    LOWORD(v537) = v528;
    v405 = sub_10000498C(&qword_100098EE0);
    v406 = sub_10000498C(&qword_100098F00);
    v407 = sub_10001E36C();
    v408 = sub_10001E418();
    _ConditionalContent<>.init(storage:)(&v531, v405, v406, v407, v408);
    v409 = v540[96];
    v410 = v540[97];
    v411 = *(_OWORD *)&v540[16];
    v412 = v513;
    *v513 = *(_OWORD *)v540;
    v412[1] = v411;
    v413 = *(_OWORD *)&v540[48];
    v412[2] = *(_OWORD *)&v540[32];
    v412[3] = v413;
    v414 = *(_OWORD *)&v540[80];
    v412[4] = *(_OWORD *)&v540[64];
    v412[5] = v414;
    *((_BYTE *)v412 + 96) = v409;
    *((_BYTE *)v412 + 97) = v410;
    swift_storeEnumTagMultiPayload(v412, v511, 1);
    v415 = sub_10000498C(&qword_100098ED0);
    v416 = sub_10001E1B0();
    v417 = sub_10001E348();
    v308 = (uint64_t)v514;
    _ConditionalContent<>.init(storage:)(v412, v512, v415, v416, v417);
    goto LABEL_96;
  }
  v398 = _stringCompareWithSmolCheck(_:_:expecting:)(v392, v394, v396, v395, 0);
  swift_bridgeObjectRelease(v394);
  swift_bridgeObjectRelease(v397);
  if ((v398 & 1) != 0)
    goto LABEL_116;
  v418 = static String._unconditionallyBridgeFromObjectiveC(_:)(UITextFormattingViewControllerEmphasisStylesComponentKey);
  v420 = v419;
  v422 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v423 = v421;
  if (v418 == v422 && v420 == v421)
  {
    swift_bridgeObjectRelease_n(v420, 2);
LABEL_121:

    v425 = type metadata accessor for TextFormattingState(0);
    v426 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    v427 = EnvironmentObject.init()(v425, v426);
    v429 = v428;
    v430 = swift_getKeyPath(&unk_100073C90);
    v509 = v430;
    v179 = swift_getKeyPath(&unk_100073CB8);
    v180 = swift_getKeyPath(&unk_100073A70);
    v181 = swift_getKeyPath(&unk_100073E08);
    *(_QWORD *)v540 = 257;
    *(_QWORD *)&v540[8] = v427;
    v510 = (char *)v427;
    *(_QWORD *)&v540[16] = v429;
    *(_QWORD *)&v540[24] = v430;
    *(_QWORD *)&v540[32] = 0;
    *(_QWORD *)&v540[40] = v179;
    *(_QWORD *)&v540[48] = 0;
    *(_QWORD *)&v540[56] = v180;
    *(_QWORD *)&v540[64] = 0;
    *(_QWORD *)&v540[72] = v181;
    *(_OWORD *)&v540[80] = xmmword_1000738B0;
    v540[96] = 1;
    swift_retain(v427);
    sub_10001D970(v430, 0, 0);
    sub_10001D97C(v179, 0);
    sub_10001D97C(v180, 0);
    sub_10001D97C(v181, 0);
    v431 = sub_10001E390();
    v432 = sub_10001E3D4();
    _ConditionalContent<>.init(storage:)(v540, &type metadata for TFBlockquoteControl, &type metadata for TFHighlightControl, v431, v432);
    v531 = v522;
    v532 = v523;
    v533 = v524;
    v534 = v525;
    v535 = v526;
    v536 = v527;
    LOWORD(v537) = v528;
LABEL_122:
    v433 = sub_10000498C(&qword_100098EE0);
    v434 = sub_10000498C(&qword_100098F00);
    v435 = sub_10001E36C();
    v436 = sub_10001E418();
    _ConditionalContent<>.init(storage:)(&v531, v433, v434, v435, v436);
    v437 = v540[96];
    v438 = v540[97];
    v439 = *(_OWORD *)&v540[16];
    v440 = v513;
    *v513 = *(_OWORD *)v540;
    v440[1] = v439;
    v441 = *(_OWORD *)&v540[48];
    v440[2] = *(_OWORD *)&v540[32];
    v440[3] = v441;
    v442 = *(_OWORD *)&v540[80];
    v440[4] = *(_OWORD *)&v540[64];
    v440[5] = v442;
    *((_BYTE *)v440 + 96) = v437;
    *((_BYTE *)v440 + 97) = v438;
    swift_storeEnumTagMultiPayload(v440, v511, 1);
    v443 = sub_10000498C(&qword_100098ED0);
    v444 = sub_10001E1B0();
    v445 = sub_10001E348();
    v446 = (uint64_t)v514;
    _ConditionalContent<>.init(storage:)(v440, v512, v443, v444, v445);
    sub_10000928C(v446, (uint64_t)v16, &qword_100098DA8);
    swift_storeEnumTagMultiPayload(v16, v515, 1);
    v447 = sub_10000498C(&qword_100098DE8);
    v448 = sub_10001DEF8();
    v449 = sub_10001E18C();
    v450 = (uint64_t)v518;
    _ConditionalContent<>.init(storage:)(v16, v447, v516, v448, v449);
    sub_1000092D0(v446, &qword_100098DA8);
    v451 = v520;
    sub_10000928C(v450, (uint64_t)v520, &qword_100098DC0);
    swift_storeEnumTagMultiPayload(v451, v517, 0);
    v452 = sub_10000498C(&qword_100098DD0);
    v453 = sub_10001DE64();
    v454 = sub_10001E47C();
    _ConditionalContent<>.init(storage:)(v451, v519, v452, v453, v454);
    sub_1000092D0(v450, &qword_100098DC0);
    swift_release(v510);
    v208 = v509;
LABEL_58:
    sub_10001D9CC(v208, 0, 0);
    sub_10001D9D8(v179, 0);
    sub_10001D9D8(v180, 0);
    return sub_10001D9D8(v181, 0);
  }
  v424 = _stringCompareWithSmolCheck(_:_:expecting:)(v418, v420, v422, v421, 0);
  swift_bridgeObjectRelease(v420);
  swift_bridgeObjectRelease(v423);
  if ((v424 & 1) != 0)
    goto LABEL_121;
  v455 = static String._unconditionallyBridgeFromObjectiveC(_:)(UITextFormattingViewControllerHighlightComponentKey);
  v457 = v456;
  v459 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v460 = v458;
  if (v455 == v459 && v457 == v458)
  {
    swift_bridgeObjectRelease_n(v457, 2);
LABEL_127:

    v462 = type metadata accessor for TextFormattingState(0);
    v463 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    v464 = EnvironmentObject.init()(v462, v463);
    v466 = v465;
    v467 = swift_getKeyPath(&unk_100073C90);
    v509 = v467;
    v179 = swift_getKeyPath(&unk_100073CB8);
    v180 = swift_getKeyPath(&unk_100073A70);
    v181 = swift_getKeyPath(&unk_100073E08);
    *(_QWORD *)v540 = 0;
    *(_QWORD *)&v540[8] = v464;
    v510 = (char *)v464;
    *(_QWORD *)&v540[16] = v466;
    *(_QWORD *)&v540[24] = v467;
    *(_QWORD *)&v540[32] = 0;
    *(_QWORD *)&v540[40] = v179;
    *(_QWORD *)&v540[48] = 0;
    *(_QWORD *)&v540[56] = v180;
    *(_QWORD *)&v540[64] = 0;
    *(_QWORD *)&v540[72] = v181;
    *(_OWORD *)&v540[80] = xmmword_1000738B0;
    v540[96] = 0;
    swift_retain(v464);
    sub_10001D970(v467, 0, 0);
    sub_10001D97C(v179, 0);
    sub_10001D97C(v180, 0);
    sub_10001D97C(v181, 0);
    v468 = sub_10001E3D4();
    _ConditionalContent<>.init(storage:)(v540, &type metadata for TFHighlightControl, &type metadata for TFHighlightControl, v468, v468);
    v531 = v522;
    v532 = v523;
    v533 = v524;
    v534 = v525;
    v535 = v526;
    v536 = v527;
    LOBYTE(v537) = v528;
    BYTE1(v537) = 1;
    goto LABEL_122;
  }
  v461 = _stringCompareWithSmolCheck(_:_:expecting:)(v455, v457, v459, v458, 0);
  swift_bridgeObjectRelease(v457);
  swift_bridgeObjectRelease(v460);
  if ((v461 & 1) != 0)
    goto LABEL_127;
  v469 = static String._unconditionallyBridgeFromObjectiveC(_:)(UITextFormattingViewControllerHighlightPickerComponentKey);
  v471 = v470;
  v473 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v474 = v472;
  if (v469 == v473 && v471 == v472)
  {

    swift_bridgeObjectRelease_n(v471, 2);
LABEL_132:
    v476 = type metadata accessor for TextFormattingState(0);
    v477 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    v478 = EnvironmentObject.init()(v476, v477);
    v480 = v479;
    v481 = swift_getKeyPath(&unk_100073C90);
    v509 = v481;
    v179 = swift_getKeyPath(&unk_100073CB8);
    v180 = swift_getKeyPath(&unk_100073A70);
    v181 = swift_getKeyPath(&unk_100073E08);
    *(_QWORD *)v540 = 1;
    *(_QWORD *)&v540[8] = v478;
    v510 = (char *)v478;
    *(_QWORD *)&v540[16] = v480;
    *(_QWORD *)&v540[24] = v481;
    *(_QWORD *)&v540[32] = 0;
    *(_QWORD *)&v540[40] = v179;
    *(_QWORD *)&v540[48] = 0;
    *(_QWORD *)&v540[56] = v180;
    *(_QWORD *)&v540[64] = 0;
    *(_QWORD *)&v540[72] = v181;
    *(_OWORD *)&v540[80] = xmmword_1000738B0;
    v540[96] = 1;
    swift_retain(v478);
    sub_10001D970(v481, 0, 0);
    sub_10001D97C(v179, 0);
    sub_10001D97C(v180, 0);
    sub_10001D97C(v181, 0);
    v482 = sub_10001E3D4();
    _ConditionalContent<>.init(storage:)(v540, &type metadata for TFHighlightControl, &type metadata for TFHighlightControl, v482, v482);
    v531 = v522;
    v532 = v523;
    v533 = v524;
    v534 = v525;
    v535 = v526;
    v536 = v527;
    LOBYTE(v537) = v528;
    BYTE1(v537) = 1;
    goto LABEL_122;
  }
  v475 = _stringCompareWithSmolCheck(_:_:expecting:)(v469, v471, v473, v472, 0);

  swift_bridgeObjectRelease(v471);
  swift_bridgeObjectRelease(v474);
  if ((v475 & 1) != 0)
    goto LABEL_132;
  v483 = objc_opt_self(_UITextFormattingViewControllerCustomComponent);
  v484 = swift_dynamicCastObjCClass(v18, v483);
  if (v484)
  {
    v485 = v484;
    v486 = type metadata accessor for TextFormattingState(0);
    v487 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    v488 = v18;
    v489 = EnvironmentObject.init()(v486, v487);
    v491 = v490;
    v492 = swift_getKeyPath(&unk_100073C90);
    v493 = swift_getKeyPath(&unk_100073A70);
    *(_QWORD *)&v531 = v485;
    *((_QWORD *)&v531 + 1) = v489;
    *(_QWORD *)&v532 = v491;
    *((_QWORD *)&v532 + 1) = v492;
    *(_QWORD *)&v533 = 0;
    *((_QWORD *)&v533 + 1) = v493;
    LOWORD(v534) = 0;
    v494 = sub_10001DE20();
    swift_retain(v489);
    swift_retain(v492);
    swift_retain(v493);
    _ConditionalContent<>.init(storage:)(&v531, &type metadata for TFCustomControl, &type metadata for EmptyView, v494, &protocol witness table for EmptyView);
    swift_release(v493);
    swift_release(v492);
    swift_release(v489);

  }
  else
  {
    v532 = 0u;
    v533 = 0u;
    v531 = 0u;
    LOWORD(v534) = 256;
    v495 = sub_10001DE20();
    _ConditionalContent<>.init(storage:)(&v531, &type metadata for TFCustomControl, &type metadata for EmptyView, v495, &protocol witness table for EmptyView);
  }
  v496 = *(_OWORD *)&v540[16];
  v497 = *(_OWORD *)&v540[32];
  v498 = v540[48];
  v499 = v540[49];
  v500 = v520;
  *v520 = *(_OWORD *)v540;
  v500[1] = v496;
  v500[2] = v497;
  *((_BYTE *)v500 + 48) = v498;
  *((_BYTE *)v500 + 49) = v499;
  swift_storeEnumTagMultiPayload(v500, v517, 1);
  v501 = sub_10000498C(&qword_100098DD0);
  v502 = sub_10001DE64();
  v503 = sub_10001E47C();
  return _ConditionalContent<>.init(storage:)(v500, v519, v501, v502, v503);
}

uint64_t sub_10001119C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  char v28;
  _QWORD v30[9];

  if (*(_QWORD *)(a2 + 16))
  {
    v4 = *(_QWORD *)(a2 + 40);
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    v7 = v6;
    Hasher.init(_seed:)(v30, v4);
    String.hash(into:)(v30, v5, v7);
    v8 = Hasher._finalize()();
    swift_bridgeObjectRelease(v7);
    v9 = -1 << *(_BYTE *)(a2 + 32);
    v10 = v8 & ~v9;
    v11 = a2 + 56;
    if (((*(_QWORD *)(a2 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
    {
      v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v10));
      v14 = v13;
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
      if (v12 == v15 && v14 == v16)
      {
LABEL_17:
        swift_bridgeObjectRelease_n(v14, 2);
        goto LABEL_18;
      }
      v18 = v16;
      v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, v15, v16, 0);
      swift_bridgeObjectRelease(v14);
      swift_bridgeObjectRelease(v18);
      if ((v19 & 1) != 0)
      {
LABEL_18:
        v28 = 1;
        return v28 & 1;
      }
      v20 = ~v9;
      v21 = (v10 + 1) & v20;
      if (((*(_QWORD *)(v11 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) != 0)
      {
        while (1)
        {
          v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v21));
          v14 = v23;
          v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v22 == v24 && v14 == v25)
            break;
          v27 = v25;
          v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v14, v24, v25, 0);
          swift_bridgeObjectRelease(v14);
          swift_bridgeObjectRelease(v27);
          if ((v28 & 1) == 0)
          {
            v21 = (v21 + 1) & v20;
            if (((*(_QWORD *)(v11 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) != 0)
              continue;
          }
          return v28 & 1;
        }
        goto LABEL_17;
      }
    }
  }
  v28 = 0;
  return v28 & 1;
}

uint64_t sub_100011360@<X0>(uint64_t a1@<X8>)
{
  return sub_10000E0DC(a1);
}

BOOL sub_1000113A0(char *a1, char *a2)
{
  return qword_100073EC0[*a1] == qword_100073EC0[*a2];
}

Swift::Int sub_1000113C4()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(qword_100073EC0[v1]);
  return Hasher._finalize()();
}

void sub_100011410()
{
  char *v0;

  Hasher._combine(_:)(qword_100073EC0[*v0]);
}

Swift::Int sub_100011444(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(qword_100073EC0[v2]);
  return Hasher._finalize()();
}

uint64_t sub_10001148C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_10001B314(*a1);
  *a2 = result;
  return result;
}

void sub_1000114B4(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_100073EC0[*v1];
}

void sub_1000114CC(_QWORD *a1@<X8>)
{
  *a1 = &off_10008DFE0;
}

uint64_t sub_1000114DC(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2)
    return sub_100012CA0(a1[1], a2[1]);
  else
    return 0;
}

uint64_t sub_100011500(uint64_t result, uint64_t a2)
{
  if ((result & 0x8000000000000000) == 0)
    return a2;
  __break(1u);
  return result;
}

__n128 sub_100011540@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  char v6;
  __n128 result;
  __int128 v8;
  __int128 v9;
  _OWORD v10[3];
  char v11;
  __int128 v12;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100073A28);
  v5 = swift_getKeyPath(&unk_100073A50);
  static Published.subscript.getter(v10, v3, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  v6 = v11;
  v8 = v10[1];
  result = (__n128)v10[2];
  v9 = v12;
  *(_OWORD *)a2 = v10[0];
  *(_OWORD *)(a2 + 16) = v8;
  *(__n128 *)(a2 + 32) = result;
  *(_BYTE *)(a2 + 48) = v6;
  *(_OWORD *)(a2 + 56) = v9;
  return result;
}

uint64_t sub_1000115D4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  __int128 v13;
  _QWORD v14[2];
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *a1;
  v3 = a1[1];
  v13 = *((_OWORD *)a1 + 1);
  v4 = a1[4];
  v5 = a1[5];
  v6 = *((_BYTE *)a1 + 48);
  v7 = a1[7];
  v8 = a1[8];
  v9 = *a2;
  KeyPath = swift_getKeyPath(&unk_100073A28);
  v11 = swift_getKeyPath(&unk_100073A50);
  v14[0] = v2;
  v14[1] = v3;
  v15 = v13;
  v16 = v4;
  v17 = v5;
  v18 = v6;
  v19 = v7;
  v20 = v8;
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_retain(v9);
  return static Published.subscript.setter(v14, v9, KeyPath, v11);
}

uint64_t sub_100011694@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000739E0);
  v5 = swift_getKeyPath(&unk_100073A08);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_100011710(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  char v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000739E0);
  v5 = swift_getKeyPath(&unk_100073A08);
  v7 = v2;
  swift_retain(v3);
  static Published.subscript.setter(&v7, v3, KeyPath, v5);
  return sub_1000259F0();
}

uint64_t sub_100011784@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1000117B0(unsigned __int8 *a1)
{
  return EnvironmentValues.isEnabled.setter(*a1);
}

uint64_t sub_1000117D4@<X0>(uint64_t a1@<X8>)
{
  return sub_100012330(&qword_100098510, (uint64_t (*)(_QWORD))&type metadata accessor for Font.Context, 0x747865746E6F43, 0xE700000000000000, a1);
}

uint64_t sub_1000117FC(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) == 0)
  {
    v8 = swift_retain(a1);
    v9 = static os_log_type_t.fault.getter(v8);
    v10 = static Log.runtimeIssuesLog.getter();
    v11 = v9;
    if (os_log_type_enabled(v10, v9))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      v16 = v13;
      *(_DWORD *)v12 = 136315138;
      v15 = sub_100020E00(0x666E6F4349554654, 0xEA00000000006769, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v12 + 4, v12 + 12);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(v7, a1);
    sub_10001D9D8(a1, 0);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return v16;
  }
  return a1;
}

uint64_t sub_1000119BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;

  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 0x100) == 0)
  {
    v8 = swift_retain();
    v9 = static os_log_type_t.fault.getter(v8);
    v10 = static Log.runtimeIssuesLog.getter();
    v11 = v9;
    if (os_log_type_enabled(v10, v9))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      v17 = v13;
      *(_DWORD *)v12 = 136315138;
      v15 = v12 + 4;
      v16 = sub_100020E00(0xD000000000000035, 0x8000000100076E50, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v15, v12 + 12);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(v7, a1);
    sub_10001D9CC(a1, a2, 0);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return v17;
  }
  return a1;
}

uint64_t sub_100011B90(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
    return a1 & 1;
  v8 = swift_retain();
  v9 = static os_log_type_t.fault.getter(v8);
  v10 = static Log.runtimeIssuesLog.getter();
  v11 = v9;
  if (os_log_type_enabled(v10, v9))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v16 = v13;
    *(_DWORD *)v12 = 136315138;
    v15 = sub_100020E00(1819242306, 0xE400000000000000, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v12 + 4, v12 + 12);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath(v7, a1);
  sub_10001D9D8(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v16;
}

double sub_100011D48(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v15;
  double v16;

  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
    return *(double *)&a1;
  v8 = swift_retain();
  v9 = static os_log_type_t.fault.getter(v8);
  v10 = static Log.runtimeIssuesLog.getter();
  v11 = v9;
  if (os_log_type_enabled(v10, v9))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v16 = *(double *)&v13;
    *(_DWORD *)v12 = 136315138;
    v15 = sub_100020E00(0x74616F6C464743, 0xE700000000000000, (uint64_t *)&v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v12 + 4, v12 + 12);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath(v7, a1);
  sub_10001D9D8(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v16;
}

uint64_t sub_100011F08@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t EnumCaseMultiPayload;
  uint64_t v13;
  os_log_type_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;

  v2 = v1;
  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10000498C(&qword_100098F10);
  __chkstk_darwin(v8);
  v10 = (_QWORD *)((char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000928C(v2, (uint64_t)v10, &qword_100098F10);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v10, v8);
  if ((_DWORD)EnumCaseMultiPayload == 1)
    return sub_10000930C((uint64_t)v10, a1, &qword_100098F18);
  v13 = *v10;
  v14 = static os_log_type_t.fault.getter(EnumCaseMultiPayload);
  v15 = static Log.runtimeIssuesLog.getter();
  v16 = v14;
  if (os_log_type_enabled(v15, v14))
  {
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = swift_slowAlloc(32, -1);
    v20[1] = a1;
    v19 = v18;
    v22 = v18;
    *(_DWORD *)v17 = 136315138;
    v21 = sub_100020E00(0xD000000000000020, 0x8000000100076E90, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v17 + 4, v17 + 12);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v17, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v17, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath(v7, v13);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_100012138(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) == 0)
  {
    v8 = swift_retain();
    v9 = static os_log_type_t.fault.getter(v8);
    v10 = static Log.runtimeIssuesLog.getter();
    v11 = v9;
    if (os_log_type_enabled(v10, v9))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      v16 = v13;
      *(_DWORD *)v12 = 136315138;
      v15 = sub_100020E00(0x6C616E6F6974704FLL, 0xEE003E6C6F6F423CLL, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v12 + 4, v12 + 12);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(v7, a1);
    sub_10001D9D8(a1, 0);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return v16;
  }
  return a1;
}

uint64_t sub_100012300@<X0>(uint64_t a1@<X8>)
{
  return sub_100012330((uint64_t *)&unk_10009A390, (uint64_t (*)(_QWORD))&type metadata accessor for ColorScheme, 0x686353726F6C6F43, 0xEB00000000656D65, a1);
}

uint64_t sub_100012330@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v20;
  os_log_type_t v21;
  NSObject *v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v29 = a3;
  v9 = v5;
  v11 = type metadata accessor for EnvironmentValues(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10000498C(a1);
  __chkstk_darwin(v15);
  v17 = (uint64_t *)((char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000928C(v9, (uint64_t)v17, a1);
  if (swift_getEnumCaseMultiPayload(v17, v15) == 1)
  {
    v18 = a2(0);
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(a5, v17, v18);
  }
  else
  {
    v20 = *v17;
    v21 = static os_log_type_t.fault.getter();
    v22 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v22, v21))
    {
      v27 = a4;
      v23 = swift_slowAlloc(12, -1);
      v28 = a5;
      v24 = (uint8_t *)v23;
      v25 = swift_slowAlloc(32, -1);
      v31 = v25;
      *(_DWORD *)v24 = 136315138;
      v30 = sub_100020E00(v29, v27, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v24 + 4, v24 + 12);
      _os_log_impl((void *)&_mh_execute_header, v22, v21, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v24, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(v14, v20);
    swift_release(v20);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

uint64_t sub_100012568@<X0>(uint64_t a1@<X8>)
{
  return sub_100012330((uint64_t *)&unk_100098F50, (uint64_t (*)(_QWORD))&type metadata accessor for DynamicTypeSize, 0x5463696D616E7944, 0xEF657A6953657079, a1);
}

void sub_10001259C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  char v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  void *v36;
  id v37;
  void *v38;
  char v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  id v44;
  void *v45;
  id v46;
  void *v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  void *v52;
  char v53;
  unint64_t v54;
  id v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  int64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  int64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;

  if (a1 == a2)
    return;
  v2 = a2;
  v3 = a1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return;
  v4 = 0;
  v5 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    while (1)
    {
LABEL_7:
      if (v8)
      {
        v10 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v11 = v10 | (v4 << 6);
      }
      else
      {
        v12 = v4 + 1;
        if (__OFADD__(v4, 1))
        {
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
          return;
        }
        if (v12 >= v9)
          return;
        v13 = *(_QWORD *)(v5 + 8 * v12);
        ++v4;
        if (!v13)
        {
          v4 = v12 + 1;
          if (v12 + 1 >= v9)
            return;
          v13 = *(_QWORD *)(v5 + 8 * v4);
          if (!v13)
          {
            v4 = v12 + 2;
            if (v12 + 2 >= v9)
              return;
            v13 = *(_QWORD *)(v5 + 8 * v4);
            if (!v13)
            {
              v4 = v12 + 3;
              if (v12 + 3 >= v9)
                return;
              v13 = *(_QWORD *)(v5 + 8 * v4);
              if (!v13)
              {
                v14 = v12 + 4;
                if (v14 >= v9)
                  return;
                v13 = *(_QWORD *)(v5 + 8 * v14);
                if (!v13)
                {
                  while (1)
                  {
                    v4 = v14 + 1;
                    if (__OFADD__(v14, 1))
                      goto LABEL_124;
                    if (v4 >= v9)
                      return;
                    v13 = *(_QWORD *)(v5 + 8 * v4);
                    ++v14;
                    if (v13)
                      goto LABEL_24;
                  }
                }
                v4 = v14;
              }
            }
          }
        }
LABEL_24:
        v8 = (v13 - 1) & v13;
        v11 = __clz(__rbit64(v13)) + (v4 << 6);
      }
      v15 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v11);
      v16 = *v15;
      v17 = v15[1];
      v18 = *(_QWORD **)(*(_QWORD *)(v3 + 56) + 8 * v11);
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v18);
      v19 = sub_1000171E8(v16, v17);
      v21 = v20;
      swift_bridgeObjectRelease(v17);
      if ((v21 & 1) == 0 || (v22 = *(_QWORD **)(*(_QWORD *)(v2 + 56) + 8 * v19), v23 = v22[2], v23 != v18[2]))
      {
LABEL_109:
        v62 = v18;
        goto LABEL_110;
      }
      if (v23 && v22 != v18)
        break;
      swift_bridgeObjectRelease(v18);
    }
    v72 = v18 + 4;
    if (v22[4] != v18[4])
      goto LABEL_109;
    v71 = v22 + 4;
    v73 = v22[2];
    v24 = v22[5];
    v25 = v18[5];
    v69 = v22;
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v25);
    v26 = sub_100012CA0(v24, v25);
    swift_bridgeObjectRelease(v24);
    swift_bridgeObjectRelease(v25);
    if ((v26 & 1) == 0)
      break;
    if (v73 != 1)
    {
      if (v18[2] >= 2uLL)
      {
        if (v69[6] != v18[6])
        {
          swift_bridgeObjectRelease(v18);
          v62 = v69;
          goto LABEL_110;
        }
        v67 = v8;
        v68 = v4;
        v27 = v69[7];
        v70 = v18;
        v28 = v18[7];
        if ((unint64_t)v27 >> 62)
        {
          if (v27 < 0)
            v59 = v69[7];
          else
            v59 = v27 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain_n(v27, 2);
          swift_bridgeObjectRetain(v28);
          v29 = _CocoaArrayWrapper.endIndex.getter(v59);
          swift_bridgeObjectRelease(v27);
          if (!((unint64_t)v28 >> 62))
          {
LABEL_37:
            if (v29 == *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10))
            {
LABEL_38:
              v63 = v9;
              v64 = v5;
              v65 = v3;
              v66 = v2;
              v30 = 2;
              do
              {
                if (v29)
                {
                  v31 = v27 & 0xFFFFFFFFFFFFFF8;
                  v32 = (v27 & 0xFFFFFFFFFFFFFF8) + 32;
                  if (v27 < 0)
                    v31 = v27;
                  if ((unint64_t)v27 >> 62)
                    v32 = v31;
                  v33 = v28 & 0xFFFFFFFFFFFFFF8;
                  v34 = (v28 & 0xFFFFFFFFFFFFFF8) + 32;
                  if (v28 < 0)
                    v33 = v28;
                  if ((unint64_t)v28 >> 62)
                    v34 = v33;
                  if (v32 != v34)
                  {
                    if (v29 < 0)
                      goto LABEL_118;
                    v75 = v27 & 0xC000000000000001;
                    if ((v27 & 0xC000000000000001) != 0)
                    {
                      v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v27);
                    }
                    else
                    {
                      if (!*(_QWORD *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10))
                        goto LABEL_119;
                      v35 = *(id *)(v27 + 32);
                    }
                    v36 = v35;
                    v74 = v28 & 0xC000000000000001;
                    if ((v28 & 0xC000000000000001) != 0)
                    {
                      v37 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v28);
                    }
                    else
                    {
                      if (!*(_QWORD *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10))
                        goto LABEL_120;
                      v37 = *(id *)(v28 + 32);
                    }
                    v38 = v37;
                    sub_1000096AC(0, &qword_100098AB0, UITextFormattingViewControllerComponent_ptr);
                    v39 = static NSObject.== infix(_:_:)(v36, v38);

                    if ((v39 & 1) == 0)
                      goto LABEL_107;
                    if (v29 != 1)
                    {
                      if (v75)
                      {
                        v44 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v27);
                      }
                      else
                      {
                        if (*(_QWORD *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL)
                          goto LABEL_122;
                        v44 = *(id *)(v27 + 40);
                      }
                      v45 = v44;
                      if (v74)
                      {
                        v46 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v28);
                      }
                      else
                      {
                        if (*(_QWORD *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL)
                          goto LABEL_123;
                        v46 = *(id *)(v28 + 40);
                      }
                      v47 = v46;
                      v48 = static NSObject.== infix(_:_:)(v45, v46);

                      if ((v48 & 1) == 0)
                      {
LABEL_107:
                        swift_bridgeObjectRelease(v27);
                        swift_bridgeObjectRelease(v28);
                        v40 = v70;
                        goto LABEL_108;
                      }
                      v49 = 2 - v29;
                      v50 = 6;
                      while (v49 + v50 != 6)
                      {
                        v54 = v50 - 4;
                        if (v75)
                        {
                          v55 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v50 - 4, v27);
                        }
                        else
                        {
                          if (v54 >= *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10))
                          {
                            __break(1u);
LABEL_115:
                            __break(1u);
                            goto LABEL_116;
                          }
                          v55 = *(id *)(v27 + 8 * v50);
                        }
                        v56 = v55;
                        if (v74)
                        {
                          v51 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v50 - 4, v28);
                        }
                        else
                        {
                          if (v54 >= *(_QWORD *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10))
                            goto LABEL_115;
                          v51 = *(id *)(v28 + 8 * v50);
                        }
                        v52 = v51;
                        v53 = static NSObject.== infix(_:_:)(v56, v51);

                        ++v50;
                        if ((v53 & 1) == 0)
                          goto LABEL_107;
                      }
                    }
                  }
                }
                swift_bridgeObjectRelease(v27);
                swift_bridgeObjectRelease(v28);
                if (v30 == v73)
                {
                  swift_bridgeObjectRelease(v70);
                  swift_bridgeObjectRelease(v69);
                  v3 = v65;
                  v2 = v66;
                  v9 = v63;
                  v5 = v64;
                  v8 = v67;
                  v4 = v68;
                  goto LABEL_7;
                }
                v40 = v70;
                if (v30 >= v70[2])
                {
LABEL_116:
                  __break(1u);
                  goto LABEL_117;
                }
                v41 = &v72[2 * v30];
                if (v71[2 * v30] != *v41)
                  goto LABEL_108;
                v42 = &v71[2 * v30];
                v27 = v42[1];
                v28 = v41[1];
                if ((unint64_t)v27 >> 62)
                {
                  if (v27 < 0)
                    v57 = v42[1];
                  else
                    v57 = v27 & 0xFFFFFFFFFFFFFF8;
                  swift_bridgeObjectRetain_n(v42[1], 2);
                  swift_bridgeObjectRetain(v28);
                  v29 = _CocoaArrayWrapper.endIndex.getter(v57);
                  swift_bridgeObjectRelease(v27);
                  if ((unint64_t)v28 >> 62)
                  {
LABEL_90:
                    if (v28 < 0)
                      v58 = v28;
                    else
                      v58 = v28 & 0xFFFFFFFFFFFFFF8;
                    swift_bridgeObjectRetain(v28);
                    v43 = _CocoaArrayWrapper.endIndex.getter(v58);
                    swift_bridgeObjectRelease(v28);
                    goto LABEL_64;
                  }
                }
                else
                {
                  v29 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);
                  swift_bridgeObjectRetain(v42[1]);
                  swift_bridgeObjectRetain(v28);
                  if ((unint64_t)v28 >> 62)
                    goto LABEL_90;
                }
                v43 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_64:
                ++v30;
              }
              while (v29 == v43);
            }
LABEL_105:
            swift_bridgeObjectRelease(v70);
            swift_bridgeObjectRelease(v69);
            swift_bridgeObjectRelease(v27);
            v62 = (_QWORD *)v28;
            goto LABEL_110;
          }
        }
        else
        {
          v29 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain(v27);
          swift_bridgeObjectRetain(v28);
          if (!((unint64_t)v28 >> 62))
            goto LABEL_37;
        }
        if (v28 < 0)
          v60 = v28;
        else
          v60 = v28 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v28);
        v61 = _CocoaArrayWrapper.endIndex.getter(v60);
        swift_bridgeObjectRelease(v28);
        if (v29 == v61)
          goto LABEL_38;
        goto LABEL_105;
      }
      goto LABEL_121;
    }
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v69);
  }
  v40 = v18;
LABEL_108:
  swift_bridgeObjectRelease(v40);
  v62 = v69;
LABEL_110:
  swift_bridgeObjectRelease(v62);
}

uint64_t sub_100012CA0(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  id v13;
  void *v14;
  char v15;
  uint64_t v16;
  uint64_t i;
  id v18;
  void *v19;
  char v20;
  unint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;

  v5 = (void *)((unint64_t)a1 >> 62);
  if (!((unint64_t)a1 >> 62))
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v7 = (unint64_t)a2 >> 62;
    if (!((unint64_t)a2 >> 62))
      goto LABEL_3;
LABEL_38:
    if (a2 < 0)
      v24 = a2;
    else
      v24 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
    v25 = _CocoaArrayWrapper.endIndex.getter(v24);
    swift_bridgeObjectRelease(a2);
    if (v6 == v25)
      goto LABEL_4;
    return 0;
  }
  if (a1 < 0)
    v23 = a1;
  else
    v23 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v6 = _CocoaArrayWrapper.endIndex.getter(v23);
  swift_bridgeObjectRelease(a1);
  v7 = (unint64_t)a2 >> 62;
  if ((unint64_t)a2 >> 62)
    goto LABEL_38;
LABEL_3:
  if (v6 != *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
    return 0;
LABEL_4:
  if (!v6)
    return 1;
  v8 = a1 & 0xFFFFFFFFFFFFFF8;
  v9 = (a1 & 0xFFFFFFFFFFFFFF8) + 32;
  if (a1 < 0)
    v8 = a1;
  if (v5)
    v9 = v8;
  v10 = a2 & 0xFFFFFFFFFFFFFF8;
  v11 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
  if (a2 < 0)
    v10 = a2;
  if (v7)
    v11 = v10;
  if (v9 == v11)
    return 1;
  if (v6 < 0)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  v26 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
LABEL_47:
    result = specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
    goto LABEL_18;
  }
  if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_49;
  }
  result = (uint64_t)*(id *)(a1 + 32);
LABEL_18:
  v5 = (void *)result;
  v2 = a2 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) != 0)
  {
LABEL_49:
    v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2);
LABEL_21:
    v14 = v13;
    sub_1000096AC(0, &qword_100098AB0, UITextFormattingViewControllerComponent_ptr);
    v15 = static NSObject.== infix(_:_:)(v5, v14);

    if ((v15 & 1) != 0)
    {
      v16 = 1 - v6;
      for (i = 5; ; ++i)
      {
        v6 = v16 + i == 5;
        if (v16 + i == 5)
          return v6;
        v21 = i - 4;
        if (v26)
        {
          v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a1);
          if (v2)
            goto LABEL_23;
        }
        else
        {
          if (v21 >= *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_45:
            __break(1u);
            goto LABEL_46;
          }
          v22 = *(id *)(a1 + 8 * i);
          if (v2)
          {
LABEL_23:
            v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a2);
            goto LABEL_24;
          }
        }
        if (v21 >= *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_45;
        v18 = *(id *)(a2 + 8 * i);
LABEL_24:
        v19 = v18;
        v20 = static NSObject.== infix(_:_:)(v22, v18);

        if ((v20 & 1) == 0)
          return v6;
      }
    }
    return 0;
  }
  if (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    v13 = *(id *)(a2 + 32);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_100012F28(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char v10;
  uint64_t result;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = a1[4];
  v6 = a1[5];
  v7 = a2[4];
  v8 = a2[5];
  v9 = v5 == v7 && v6 == v8;
  if (v9 || (v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v7, v8, 0), result = 0, (v10 & 1) != 0))
  {
    v12 = v2 - 1;
    if (!v12)
      return 1;
    v13 = a1 + 7;
    for (i = a2 + 7; ; i += 2)
    {
      v15 = *(v13 - 1);
      v16 = *v13;
      v17 = *(i - 1);
      v18 = *i;
      v19 = v15 == v17 && v16 == v18;
      if (!v19 && (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v17, v18, 0) & 1) == 0)
        break;
      v13 += 2;
      if (!--v12)
        return 1;
    }
    return 0;
  }
  return result;
}

id sub_100012FEC(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id result;
  void *v12;
  id v13;
  void *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  unint64_t v24;
  unint64_t v25;
  void **v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;

  v2 = a2;
  v3 = a1;
  v4 = (unint64_t)a1 >> 62;
  if (!((unint64_t)a1 >> 62))
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v6 = a2 >> 62;
    if (!(a2 >> 62))
      goto LABEL_3;
LABEL_50:
    if (v2 < 0)
      v31 = v2;
    else
      v31 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v32 = _CocoaArrayWrapper.endIndex.getter(v31);
    swift_bridgeObjectRelease(v2);
    if (v5 == v32)
      goto LABEL_4;
LABEL_54:
    LOBYTE(v5) = 0;
    return (id)(v5 & 1);
  }
  if (a1 < 0)
    v30 = a1;
  else
    v30 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v5 = _CocoaArrayWrapper.endIndex.getter(v30);
  swift_bridgeObjectRelease(v3);
  v6 = (unint64_t)v2 >> 62;
  if ((unint64_t)v2 >> 62)
    goto LABEL_50;
LABEL_3:
  if (v5 != *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_54;
LABEL_4:
  if (!v5)
    goto LABEL_37;
  v7 = v3 & 0xFFFFFFFFFFFFFF8;
  if (v3 < 0)
    v7 = v3;
  if (!v4)
    v7 = (v3 & 0xFFFFFFFFFFFFFF8) + 32;
  v8 = v2 & 0xFFFFFFFFFFFFFF8;
  v9 = (v2 & 0xFFFFFFFFFFFFFF8) + 32;
  if (v2 < 0)
    v10 = v2;
  else
    v10 = v2 & 0xFFFFFFFFFFFFFF8;
  if (v6)
    v9 = v10;
  if (v7 == v9)
  {
LABEL_37:
    LOBYTE(v5) = 1;
    return (id)(v5 & 1);
  }
  if ((v5 & 0x8000000000000000) != 0)
    goto LABEL_60;
  v33 = v3 & 0xC000000000000001;
  if ((v3 & 0xC000000000000001) != 0)
    goto LABEL_61;
  for (result = *(id *)(v3 + 32); ; result = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v3))
  {
    v12 = result;
    if ((v2 & 0xC000000000000001) == 0)
      break;
    v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v2);
LABEL_21:
    v14 = v13;
    sub_1000096AC(0, &qword_100098918, _UITextFormattingViewControllerEmphasisStyle_ptr);
    v15 = static NSObject.== infix(_:_:)(v12, v14);

    if ((v15 & 1) == 0)
      goto LABEL_54;
    v16 = v5 - 1;
    if (v5 == 1)
      return (id)(v5 & 1);
    if (((v2 | v3) & 0xC000000000000001) != 0)
    {
      v17 = 0;
      v18 = v5 - 2;
      while (v16 != v17)
      {
        v5 = v17 + 1;
        if (v33)
          v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v17 + 1, v3);
        else
          v19 = *(id *)(v3 + 40 + 8 * v17);
        v20 = v19;
        if ((v2 & 0xC000000000000001) != 0)
        {
          v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v17 + 1, v2);
        }
        else
        {
          if (v5 >= *(_QWORD *)(v8 + 16))
            goto LABEL_59;
          v21 = *(id *)(v2 + 40 + 8 * v17);
        }
        v22 = v21;
        v5 = static NSObject.== infix(_:_:)(v20, v21);

        if ((v5 & 1) != 0 && v18 != v17++)
          continue;
        return (id)(v5 & 1);
      }
      __break(1u);
    }
    else
    {
      v24 = *(_QWORD *)(v8 + 16);
      if (v24 <= 1)
        v24 = 1;
      v25 = v24 - 1;
      v26 = (void **)(v3 + 40);
      v8 = v2 + 40;
      while (v16)
      {
        if (!v25)
          goto LABEL_58;
        v28 = *v26++;
        v27 = v28;
        v29 = *(void **)v8;
        v8 += 8;
        v2 = v27;
        v3 = v29;
        v5 = static NSObject.== infix(_:_:)(v2, v3);

        if ((v5 & 1) != 0)
        {
          --v25;
          if (--v16)
            continue;
        }
        return (id)(v5 & 1);
      }
    }
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    ;
  }
  if (*(_QWORD *)(v8 + 16))
  {
    v13 = *(id *)(v2 + 32);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000132E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = sub_10000498C(&qword_100098F18);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000928C(a1, (uint64_t)v4, &qword_100098F18);
  return EnvironmentValues.horizontalSizeClass.setter(v4);
}

_QWORD *sub_100013360(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10000498C(&qword_100098AD0);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10001B0B0(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_10001346C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10000498C(&qword_100098AE8);
      v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4])
          memmove(v13, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_10001B5FC(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100013590(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10000498C(&qword_100098AE0);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10001B338(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_10001369C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10000498C(&qword_100098AC8);
      v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4])
          memmove(v14, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10001C8CC(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000137A8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10000498C(&qword_100098F40);
      v11 = (_QWORD *)swift_allocObject(v10, v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * v12 - 64;
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= (_QWORD *)((char *)a4 + v8 + 32))
          memmove(v13, a4 + 4, v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_10001B1A0(0, v8, (char *)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000138A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return &_swiftEmptyArrayStorage;
  v3 = sub_10000498C(&qword_100098B00);
  v4 = (_QWORD *)swift_allocObject(v3, 8 * v1 + 32, 7);
  v5 = j__malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 25;
  v4[2] = v1;
  v4[3] = 2 * (v6 >> 3);
  v7 = sub_10001AA5C(&v10, v4 + 4, v1, a1);
  v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_10001C6A4(v8);
  if (v7 != (_QWORD *)v1)
  {
    __break(1u);
    return &_swiftEmptyArrayStorage;
  }
  return v4;
}

_QWORD *sub_100013984(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_10000498C(&qword_100098B28);
  v4 = (_QWORD *)swift_allocObject(v3, 24 * v1 + 32, 7);
  v5 = j__malloc_size(v4);
  v4[2] = v1;
  v4[3] = 2 * ((uint64_t)(v5 - 32) / 24);
  v6 = sub_10001ABF0(&v9, (uint64_t)(v4 + 4), v1, a1);
  v7 = v9;
  swift_bridgeObjectRetain(a1);
  sub_10001C6A4(v7);
  if (v6 != (_QWORD *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

_QWORD *sub_100013A78(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_100013A8C(a1, a2, a3, a4, &qword_1000986D0, _UIFontPickerFontInfo_ptr);
}

_QWORD *sub_100013A8C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t *a5, _QWORD *a6)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *result;

  v6 = a4 >> 1;
  v7 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_18;
  if (!v7)
    return _swiftEmptyArrayStorage;
  v12 = 8 * v7;
  if (v7 <= 0)
  {
    v14 = _swiftEmptyArrayStorage;
    if (v6 != a3)
      goto LABEL_7;
    goto LABEL_17;
  }
  v13 = sub_10000498C(&qword_100098B10);
  v14 = (_QWORD *)swift_allocObject(v13, v12 + 32, 7);
  v15 = j__malloc_size(v14);
  v16 = v15 - 32;
  if (v15 < 32)
    v16 = v15 - 25;
  v14[2] = v7;
  v14[3] = (2 * (v16 >> 3)) | 1;
  if (v6 == a3)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
LABEL_7:
  if (v7 < 0)
  {
LABEL_19:
    result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_20;
  }
  v17 = a2 + 8 * a3;
  if (v17 >= (unint64_t)&v14[(unint64_t)v12 / 8 + 4] || (unint64_t)(v14 + 4) >= v17 + v12)
  {
    sub_1000096AC(0, a5, a6);
    swift_arrayInitWithCopy(v14 + 4);
    return v14;
  }
  result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_20:
  __break(1u);
  return result;
}

_QWORD *sub_100013C24(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  int64_t v5;
  uint64_t v8;
  _QWORD *v9;
  size_t v10;
  void *v11;
  _QWORD *result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_16;
  if (!v5)
    return _swiftEmptyArrayStorage;
  if (v5 > 0)
  {
    v8 = sub_10000498C(&qword_100098F40);
    v9 = (_QWORD *)swift_allocObject(v8, v5 + 32, 7);
    v10 = j__malloc_size(v9);
    v9[2] = v5;
    v9[3] = 2 * v10 - 64;
    if (v4 != a3)
      goto LABEL_5;
    goto LABEL_15;
  }
  v9 = _swiftEmptyArrayStorage;
  if (v4 == a3)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
LABEL_5:
  if (v5 < 0)
  {
LABEL_17:
    result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_18;
  }
  v11 = v9 + 4;
  if (a2 + a3 >= (unint64_t)v9 + v5 + 32 || (unint64_t)v11 >= a2 + a3 + v5)
  {
    memcpy(v11, (const void *)(a2 + a3), v5);
    return v9;
  }
  result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_100013D7C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100013DF4(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100013D98(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1000140AC(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100013DB4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100014214(a1, a2, a3, *v3, &qword_100098B40);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100013DD8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100014388(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100013DF4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000498C(&qword_100098AC8);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100013F50(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000498C(&qword_100098B00);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000140AC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000498C(&qword_100098AE0);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100014214(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    v11 = sub_10000498C(a5);
    v12 = (char *)swift_allocObject(v11, 24 * v10 + 32, 7);
    v13 = j__malloc_size(v12);
    *((_QWORD *)v12 + 2) = v9;
    *((_QWORD *)v12 + 3) = 2 * ((uint64_t)(v13 - 32) / 24);
  }
  else
  {
    v12 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v12 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v12 != a4 || v14 >= &v15[24 * v9])
      memmove(v14, v15, 24 * v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v15 >= &v14[24 * v9] || v14 >= &v15[24 * v9])
  {
    memcpy(v14, v15, 24 * v9);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v12;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100014388(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000498C(&qword_100098AD0);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000144F0(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000498C(&qword_100098F40);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10001463C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  _QWORD v24[9];

  v7 = *v3;
  Hasher.init(_seed:)(v24, *(_QWORD *)(*v3 + 40));
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v24, a2, a3);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = v12[1];
    v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      v15 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0;
    }
    v18 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v18;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v19 = (_QWORD *)(v11 + 16 * v10);
      v20 = v19[1];
      v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0) & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease(v7);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain(a3);
  sub_100015760(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  v23 = *v3;
  *v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_1000147E8(Swift::UInt *a1, Swift::UInt a2)
{
  _QWORD *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  _QWORD v14[9];

  v5 = *v2;
  Hasher.init(_seed:)(v14, *(_QWORD *)(*v2 + 40));
  Hasher._combine(_:)(a2);
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v14[0] = *v2;
    *v2 = 0x8000000000000000;
    sub_1000158F8(a2, v8, isUniquelyReferenced_nonNull_native);
    v13 = *v2;
    *v2 = v14[0];
    swift_bridgeObjectRelease(v13);
    result = 1;
    goto LABEL_8;
  }
  v9 = *(_QWORD *)(v5 + 48);
  if (*(_QWORD *)(v9 + 8 * v8) != a2)
  {
    v10 = ~v7;
    do
    {
      v8 = (v8 + 1) & v10;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v9 + 8 * v8) != a2);
  }
  result = 0;
  a2 = *(_QWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v8);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_100014904(_QWORD *a1, void *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  char v29;
  char isUniquelyReferenced_nonNull_native;
  id v31;
  uint64_t v32;
  void *v34;
  id v35;
  _QWORD v36[9];

  v3 = v2;
  v6 = *v2;
  v7 = *(_QWORD *)(*v2 + 40);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v10 = v9;
  Hasher.init(_seed:)(v36, v7);
  swift_bridgeObjectRetain(v6);
  String.hash(into:)(v36, v8, v10);
  v11 = Hasher._finalize()();
  swift_bridgeObjectRelease(v10);
  v12 = -1 << *(_BYTE *)(v6 + 32);
  v13 = v11 & ~v12;
  if (((*(_QWORD *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
  {
LABEL_15:
    swift_bridgeObjectRelease(v6);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v36[0] = *v3;
    *v3 = 0x8000000000000000;
    v31 = a2;
    sub_100015A44(v31, v13, isUniquelyReferenced_nonNull_native);
    v32 = *v3;
    *v3 = v36[0];
    swift_bridgeObjectRelease(v32);
    *a1 = v31;
    return 1;
  }
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v13));
  v16 = v15;
  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  if (v14 == v17 && v16 == v18)
  {
LABEL_16:
    swift_bridgeObjectRelease_n(v16, 2);
  }
  else
  {
    v20 = v18;
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v16, v17, v18, 0);
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease(v20);
    if ((v21 & 1) == 0)
    {
      v22 = ~v12;
      do
      {
        v13 = (v13 + 1) & v22;
        if (((*(_QWORD *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
          goto LABEL_15;
        v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v13));
        v16 = v24;
        v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
        if (v23 == v25 && v16 == v26)
          goto LABEL_16;
        v28 = v26;
        v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v16, v25, v26, 0);
        swift_bridgeObjectRelease(v16);
        swift_bridgeObjectRelease(v28);
      }
      while ((v29 & 1) == 0);
    }
  }

  swift_bridgeObjectRelease(v6);
  v34 = *(void **)(*(_QWORD *)(*v3 + 48) + 8 * v13);
  *a1 = v34;
  v35 = v34;
  return 0;
}

uint64_t sub_100014B2C(double *a1, double a2)
{
  _QWORD *v2;
  _QWORD *v3;
  double v4;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t result;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v17;

  v3 = v2;
  v4 = a2;
  v6 = *v2;
  if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v7 = a2;
  else
    v7 = 0.0;
  v8 = static Hasher._hash(seed:_:)(*(_QWORD *)(v6 + 40), *(_QWORD *)&v7);
  v9 = -1 << *(_BYTE *)(v6 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
  {
LABEL_11:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v17 = *v3;
    *v3 = 0x8000000000000000;
    sub_100015C70(v10, isUniquelyReferenced_nonNull_native, v4);
    v16 = *v3;
    *v3 = v17;
    swift_bridgeObjectRelease(v16);
    result = 1;
    goto LABEL_12;
  }
  v11 = *(_QWORD *)(v6 + 48);
  v12 = *(double *)(v11 + 8 * v10);
  if (v12 != v4)
  {
    v14 = ~v9;
    do
    {
      v10 = (v10 + 1) & v14;
      if (((*(_QWORD *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        goto LABEL_11;
      v12 = *(double *)(v11 + 8 * v10);
    }
    while (v12 != v4);
  }
  result = 0;
  v4 = v12;
LABEL_12:
  *a1 = v4;
  return result;
}

Swift::Int sub_100014C38(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10000498C(&qword_100098AD8);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    result = swift_retain(v3);
    v13 = 0;
    while (1)
    {
      if (v9)
      {
        v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v18 >= v10)
          goto LABEL_36;
        v19 = v33[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v10)
            goto LABEL_36;
          v19 = v33[v13];
          if (!v19)
          {
            v13 = v18 + 2;
            if (v18 + 2 >= v10)
              goto LABEL_36;
            v19 = v33[v13];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v10)
              {
LABEL_36:
                swift_release(v3);
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  v13 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v13 >= v10)
                    goto LABEL_36;
                  v19 = v33[v13];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v13 = v20;
            }
          }
        }
LABEL_26:
        v9 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
      v22 = *v21;
      v23 = v21[1];
      Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
      String.hash(into:)(v34, v22, v23);
      result = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v11 + 8 * v26);
        }
        while (v30 == -1);
        v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
      *v15 = v22;
      v15[1] = v23;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

Swift::Int sub_100014F14(uint64_t a1)
{
  Swift::Int *v1;
  Swift::Int *v2;
  Swift::Int v3;
  uint64_t v4;
  Swift::Int result;
  Swift::Int v6;
  int64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  Swift::Int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int *v29;
  uint64_t v30[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10000498C(&qword_100098B18);
  result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = result;
  if (*(_QWORD *)(v3 + 16))
  {
    v29 = v2;
    v7 = 0;
    v8 = (_QWORD *)(v3 + 56);
    v9 = 1 << *(_BYTE *)(v3 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v3 + 56);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 56;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v7 << 6);
      }
      else
      {
        v17 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v17 >= v12)
          goto LABEL_36;
        v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          v7 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_36;
          v18 = v8[v7];
          if (!v18)
          {
            v7 = v17 + 2;
            if (v17 + 2 >= v12)
              goto LABEL_36;
            v18 = v8[v7];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_36:
                v28 = 1 << *(_BYTE *)(v3 + 32);
                if (v28 > 63)
                  bzero((void *)(v3 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v28;
                v2 = v29;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  v7 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v7 >= v12)
                    goto LABEL_36;
                  v18 = v8[v7];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v7 = v19;
            }
          }
        }
LABEL_26:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
      Hasher.init(_seed:)(v30, *(_QWORD *)(v6 + 40));
      Hasher._combine(_:)(v20);
      result = Hasher._finalize()();
      v21 = -1 << *(_BYTE *)(v6 + 32);
      v22 = result & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v26 = v23 == v25;
          if (v23 == v25)
            v23 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v23);
        }
        while (v27 == -1);
        v14 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

uint64_t sub_1000151BC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int64_t v34;
  _QWORD *v35;
  _QWORD v36[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10000498C(&qword_100098B48);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v33 = v2;
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v35 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v34 = (unint64_t)(v7 + 63) >> 6;
    v10 = v5 + 56;
    result = swift_retain(v3);
    v12 = 0;
    while (1)
    {
      if (v9)
      {
        v14 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v15 = v14 | (v12 << 6);
      }
      else
      {
        v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v16 >= v34)
          goto LABEL_36;
        v17 = v35[v16];
        ++v12;
        if (!v17)
        {
          v12 = v16 + 1;
          if (v16 + 1 >= v34)
            goto LABEL_36;
          v17 = v35[v12];
          if (!v17)
          {
            v12 = v16 + 2;
            if (v16 + 2 >= v34)
              goto LABEL_36;
            v17 = v35[v12];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v34)
              {
LABEL_36:
                swift_release(v3);
                v2 = v33;
                v32 = 1 << *(_BYTE *)(v3 + 32);
                if (v32 > 63)
                  bzero(v35, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v35 = -1 << v32;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v17 = v35[v18];
              if (!v17)
              {
                while (1)
                {
                  v12 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_42;
                  if (v12 >= v34)
                    goto LABEL_36;
                  v17 = v35[v12];
                  ++v18;
                  if (v17)
                    goto LABEL_26;
                }
              }
              v12 = v18;
            }
          }
        }
LABEL_26:
        v9 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      v19 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v15);
      v20 = *(_QWORD *)(v6 + 40);
      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      v23 = v22;
      Hasher.init(_seed:)(v36, v20);
      String.hash(into:)(v36, v21, v23);
      v24 = Hasher._finalize()();
      result = swift_bridgeObjectRelease(v23);
      v25 = -1 << *(_BYTE *)(v6 + 32);
      v26 = v24 & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v10 + 8 * (v26 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v10 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v10 + 8 * v27);
        }
        while (v31 == -1);
        v13 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v13) = v19;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

uint64_t sub_1000154CC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10000498C(&qword_100098B60);
  result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = result;
  if (*(_QWORD *)(v3 + 16))
  {
    v30 = v2;
    v7 = 0;
    v8 = (uint64_t *)(v3 + 56);
    v9 = 1 << *(_BYTE *)(v3 + 32);
    v29 = -1 << v9;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v3 + 56);
    v31 = 1 << *(_BYTE *)(v3 + 32);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 56;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v7 << 6);
      }
      else
      {
        v17 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        if (v17 >= v12)
          goto LABEL_39;
        v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          v7 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_39;
          v18 = v8[v7];
          if (!v18)
          {
            v7 = v17 + 2;
            if (v17 + 2 >= v12)
              goto LABEL_39;
            v18 = v8[v7];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_39:
                if (v31 >= 64)
                  bzero((void *)(v3 + 56), 8 * v12);
                else
                  *v8 = v29;
                v2 = v30;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  v7 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_45;
                  if (v7 >= v12)
                    goto LABEL_39;
                  v18 = v8[v7];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v7 = v19;
            }
          }
        }
LABEL_26:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
      if ((v20 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v21 = v20;
      else
        v21 = 0;
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v6 + 40), v21);
      v22 = -1 << *(_BYTE *)(v6 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release();
  *v2 = v6;
  return result;
}

uint64_t sub_100015760(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD v28[9];

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_100014C38(v11);
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_100015DA0();
      goto LABEL_22;
    }
    sub_100016420(v11);
  }
  v12 = *v4;
  Hasher.init(_seed:)(v28, *(_QWORD *)(*v4 + 40));
  String.hash(into:)(v28, v8, a2);
  result = Hasher._finalize()();
  v13 = -1 << *(_BYTE *)(v12 + 32);
  a3 = result & ~v13;
  v14 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v15 = *(_QWORD *)(v12 + 48);
    v16 = (_QWORD *)(v15 + 16 * a3);
    v17 = v16[1];
    v18 = *v16 == v8 && v17 == a2;
    if (v18 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, a2, 0), (result & 1) != 0))
    {
LABEL_21:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }
    else
    {
      v19 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v19;
        if (((*(_QWORD *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v20 = (_QWORD *)(v15 + 16 * a3);
        v21 = v20[1];
        if (*v20 != v8 || v21 != a2)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, a2, 0);
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v23 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v24 = (uint64_t *)(*(_QWORD *)(v23 + 48) + 16 * a3);
  *v24 = v8;
  v24[1] = a2;
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (v26)
    __break(1u);
  else
    *(_QWORD *)(v23 + 16) = v27;
  return result;
}

uint64_t sub_1000158F8(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  Swift::UInt v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  _QWORD v18[9];

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100014F14(v8);
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_100015F50();
      goto LABEL_14;
    }
    sub_1000166CC(v8);
  }
  v9 = *v3;
  Hasher.init(_seed:)(v18, *(_QWORD *)(*v3 + 40));
  Hasher._combine(_:)(v5);
  result = Hasher._finalize()();
  v10 = -1 << *(_BYTE *)(v9 + 32);
  a2 = result & ~v10;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v11 = *(_QWORD *)(v9 + 48);
    if (*(_QWORD *)(v11 + 8 * a2) == v5)
    {
LABEL_13:
      type metadata accessor for ComponentSize(0);
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v13);
      __break(1u);
    }
    else
    {
      v12 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(v11 + 8 * a2) == v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v14 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v14 + 48) + 8 * a2) = v5;
  v15 = *(_QWORD *)(v14 + 16);
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
    __break(1u);
  else
    *(_QWORD *)(v14 + 16) = v17;
  return result;
}

id sub_100015A44(id result, unint64_t a2, char a3)
{
  Swift::Int v3;
  uint64_t *v4;
  id v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::Int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  Swift::Int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[9];

  v4 = (uint64_t *)v3;
  v6 = result;
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  v8 = *(_QWORD *)(*(_QWORD *)v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_22;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000151BC(v9);
  }
  else
  {
    if (v8 > v7)
    {
      result = sub_1000160E4();
LABEL_22:
      v31 = *v4;
      *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
      *(_QWORD *)(*(_QWORD *)(v31 + 48) + 8 * a2) = v6;
      v32 = *(_QWORD *)(v31 + 16);
      v33 = __OFADD__(v32, 1);
      v34 = v32 + 1;
      if (!v33)
      {
        *(_QWORD *)(v31 + 16) = v34;
        return result;
      }
      __break(1u);
      goto LABEL_25;
    }
    sub_100016944(v9);
  }
  v10 = *(_QWORD *)v3;
  v11 = *(_QWORD *)(*(_QWORD *)v3 + 40);
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v14 = v13;
  Hasher.init(_seed:)(v36, v11);
  String.hash(into:)(v36, v12, v14);
  v3 = Hasher._finalize()();
  result = (id)swift_bridgeObjectRelease(v14);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  a2 = v3 & ~v15;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
    goto LABEL_22;
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * a2));
  v3 = v17;
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  if (v16 == v18 && v3 == v19)
  {
LABEL_25:
    swift_bridgeObjectRelease_n(v3, 2);
    goto LABEL_26;
  }
  v21 = v19;
  v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v3, v18, v19, 0);
  swift_bridgeObjectRelease(v3);
  result = (id)swift_bridgeObjectRelease(v21);
  if ((v22 & 1) == 0)
  {
    v23 = ~v15;
    do
    {
      a2 = (a2 + 1) & v23;
      if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
        goto LABEL_22;
      v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * a2));
      v3 = v25;
      v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
      if (v24 == v26 && v3 == v27)
        goto LABEL_25;
      v29 = v27;
      v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v3, v26, v27, 0);
      swift_bridgeObjectRelease(v3);
      result = (id)swift_bridgeObjectRelease(v29);
    }
    while ((v30 & 1) == 0);
  }
LABEL_26:
  type metadata accessor for ComponentKey(0);
  result = (id)ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v35);
  __break(1u);
  return result;
}

uint64_t sub_100015C70(uint64_t result, char a2, double a3)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v4 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a2 & 1) != 0)
    goto LABEL_17;
  v8 = v6 + 1;
  if ((a2 & 1) != 0)
  {
    sub_1000154CC(v8);
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_10001628C();
      goto LABEL_17;
    }
    sub_100016C20(v8);
  }
  v9 = *v3;
  if ((*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v10 = a3;
  else
    v10 = 0.0;
  result = static Hasher._hash(seed:_:)(*(_QWORD *)(*v3 + 40), *(_QWORD *)&v10);
  v11 = -1 << *(_BYTE *)(v9 + 32);
  v4 = result & ~v11;
  if (((*(_QWORD *)(v9 + 56 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v12 = *(_QWORD *)(v9 + 48);
    if (*(double *)(v12 + 8 * v4) == a3)
    {
LABEL_16:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for CGFloat);
      __break(1u);
    }
    else
    {
      v13 = ~v11;
      while (1)
      {
        v4 = (v4 + 1) & v13;
        if (((*(_QWORD *)(v9 + 56 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) == 0)
          break;
        if (*(double *)(v12 + 8 * v4) == a3)
          goto LABEL_16;
      }
    }
  }
LABEL_17:
  v14 = *v3;
  *(_QWORD *)(*v3 + 8 * (v4 >> 6) + 56) |= 1 << v4;
  *(double *)(*(_QWORD *)(v14 + 48) + 8 * v4) = a3;
  v15 = *(_QWORD *)(v14 + 16);
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
    __break(1u);
  else
    *(_QWORD *)(v14 + 16) = v17;
  return result;
}

void *sub_100015DA0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_10000498C(&qword_100098AD8);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain(v18);
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100015F50()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  sub_10000498C(&qword_100098B18);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_1000160E4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  sub_10000498C(&qword_100098B48);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = v17;
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10001628C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  sub_10000498C(&qword_100098B60);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

Swift::Int sub_100016420(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10000498C(&qword_100098AD8);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  result = swift_retain(v3);
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v32)
        goto LABEL_36;
      v19 = *(_QWORD *)(v8 + 8 * v13);
      if (!v19)
      {
        v13 = v18 + 2;
        if (v18 + 2 >= v32)
          goto LABEL_36;
        v19 = *(_QWORD *)(v8 + 8 * v13);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
    v22 = *v21;
    v23 = v21[1];
    Hasher.init(_seed:)(v33, *(_QWORD *)(v6 + 40));
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v33, v22, v23);
    result = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v26);
      }
      while (v30 == -1);
      v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
    *v15 = v22;
    v15[1] = v23;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v13 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v13 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v13 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v13);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

Swift::Int sub_1000166CC(uint64_t a1)
{
  Swift::Int *v1;
  Swift::Int *v2;
  Swift::Int v3;
  uint64_t v4;
  Swift::Int result;
  Swift::Int v6;
  int64_t v7;
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  Swift::Int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  Swift::Int *v28;
  uint64_t v29[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10000498C(&qword_100098B18);
  result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = result;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v28 = v2;
  v7 = 0;
  v8 = v3 + 56;
  v9 = 1 << *(_BYTE *)(v3 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v3 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v16 = v15 | (v7 << 6);
      goto LABEL_27;
    }
    v17 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      v7 = v17 + 1;
      if (v17 + 1 >= v12)
        goto LABEL_36;
      v18 = *(_QWORD *)(v8 + 8 * v7);
      if (!v18)
      {
        v7 = v17 + 2;
        if (v17 + 2 >= v12)
          goto LABEL_36;
        v18 = *(_QWORD *)(v8 + 8 * v7);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v11 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_27:
    v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
    Hasher.init(_seed:)(v29, *(_QWORD *)(v6 + 40));
    Hasher._combine(_:)(v20);
    result = Hasher._finalize()();
    v21 = -1 << *(_BYTE *)(v6 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v13 + 8 * v23);
      }
      while (v27 == -1);
      v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_36:
    result = swift_release(v3);
    v2 = v28;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v7 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v7 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v7 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v7);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100016944(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  Swift::Int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int64_t v35;
  _QWORD v36[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10000498C(&qword_100098B48);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v33 = v2;
  v34 = v3 + 56;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v3 + 56);
  v35 = (unint64_t)(v7 + 63) >> 6;
  v10 = v5 + 56;
  result = swift_retain(v3);
  v12 = 0;
  while (1)
  {
    if (v9)
    {
      v14 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v15 = v14 | (v12 << 6);
      goto LABEL_27;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v16 >= v35)
      goto LABEL_36;
    v17 = *(_QWORD *)(v34 + 8 * v16);
    ++v12;
    if (!v17)
    {
      v12 = v16 + 1;
      if (v16 + 1 >= v35)
        goto LABEL_36;
      v17 = *(_QWORD *)(v34 + 8 * v12);
      if (!v17)
      {
        v12 = v16 + 2;
        if (v16 + 2 >= v35)
          goto LABEL_36;
        v17 = *(_QWORD *)(v34 + 8 * v12);
        if (!v17)
          break;
      }
    }
LABEL_26:
    v9 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_27:
    v19 = *(void **)(*(_QWORD *)(v3 + 48) + 8 * v15);
    v20 = *(_QWORD *)(v6 + 40);
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v23 = v22;
    Hasher.init(_seed:)(v36, v20);
    v24 = v19;
    String.hash(into:)(v36, v21, v23);
    v25 = Hasher._finalize()();
    result = swift_bridgeObjectRelease(v23);
    v26 = -1 << *(_BYTE *)(v6 + 32);
    v27 = v25 & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v10 + 8 * (v27 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v10 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v31 = v28 == v30;
        if (v28 == v30)
          v28 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v10 + 8 * v28);
      }
      while (v32 == -1);
      v13 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v13) = v24;
    ++*(_QWORD *)(v6 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v35)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v33;
    goto LABEL_38;
  }
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
  {
    v12 = v18;
    goto LABEL_26;
  }
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v12 >= v35)
      goto LABEL_36;
    v17 = *(_QWORD *)(v34 + 8 * v12);
    ++v18;
    if (v17)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100016C20(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10000498C(&qword_100098B60);
  result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = result;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release();
LABEL_41:
    *v2 = v6;
    return result;
  }
  v29 = v2;
  v7 = 0;
  v8 = v3 + 56;
  v9 = 1 << *(_BYTE *)(v3 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v3 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v16 = v15 | (v7 << 6);
      goto LABEL_27;
    }
    v17 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    if (v17 >= v12)
      goto LABEL_39;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      v7 = v17 + 1;
      if (v17 + 1 >= v12)
        goto LABEL_39;
      v18 = *(_QWORD *)(v8 + 8 * v7);
      if (!v18)
      {
        v7 = v17 + 2;
        if (v17 + 2 >= v12)
          goto LABEL_39;
        v18 = *(_QWORD *)(v8 + 8 * v7);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v11 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_27:
    v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
    if ((v20 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v21 = v20;
    else
      v21 = 0;
    result = static Hasher._hash(seed:_:)(*(_QWORD *)(v6 + 40), v21);
    v22 = -1 << *(_BYTE *)(v6 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v13 + 8 * v24);
      }
      while (v28 == -1);
      v14 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_39:
    result = swift_release();
    v2 = v29;
    goto LABEL_41;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v7 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v7 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v7 >= v12)
      goto LABEL_39;
    v18 = *(_QWORD *)(v8 + 8 * v7);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_43:
  __break(1u);
  return result;
}

uint64_t sub_100016E90(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  char v7;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  char v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *i;
  char v27;
  _QWORD *v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  _BOOL8 v32;
  uint64_t v33;
  char v34;
  char v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  Swift::String v39;
  Swift::String v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char v47;

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    return swift_bridgeObjectRelease(a1);
  v7 = *(_BYTE *)(a1 + 32);
  v41 = *(_QWORD *)(a1 + 48);
  v42 = *(_QWORD *)(a1 + 40);
  swift_bridgeObjectRetain(a1);
  v47 = v7;
  v8 = (_QWORD *)*a3;
  v10 = sub_10001724C(v7);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
    goto LABEL_23;
  v14 = v9;
  if (v8[3] >= v13)
  {
    if ((a2 & 1) != 0)
    {
      if ((v9 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_1000178D4();
      if ((v14 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v20 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v10 >> 6) + 64) |= 1 << v10;
    *(_BYTE *)(v20[6] + v10) = v7;
    v21 = (_QWORD *)(v20[7] + 16 * v10);
    *v21 = v42;
    v21[1] = v41;
    v22 = v20[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v20[2] = v24;
    v25 = v4 - 1;
    if (v4 == 1)
      return swift_bridgeObjectRelease_n(a1, 2);
    for (i = (_OWORD *)(a1 + 64); ; i = (_OWORD *)((char *)i + 24))
    {
      v27 = *((_BYTE *)i - 8);
      v43 = *i;
      v47 = v27;
      v28 = (_QWORD *)*a3;
      v29 = sub_10001724C(v27);
      v31 = v28[2];
      v32 = (v30 & 1) == 0;
      v23 = __OFADD__(v31, v32);
      v33 = v31 + v32;
      if (v23)
        break;
      v34 = v30;
      if (v28[3] < v33)
      {
        sub_1000180E8(v33, 1);
        v29 = sub_10001724C(v27);
        if ((v34 & 1) != (v35 & 1))
          goto LABEL_25;
      }
      if ((v34 & 1) != 0)
        goto LABEL_10;
      v36 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v29 >> 6) + 64) |= 1 << v29;
      *(_BYTE *)(v36[6] + v29) = v27;
      *(_OWORD *)(v36[7] + 16 * v29) = v43;
      v37 = v36[2];
      v23 = __OFADD__(v37, 1);
      v38 = v37 + 1;
      if (v23)
        goto LABEL_24;
      v36[2] = v38;
      if (!--v25)
        return swift_bridgeObjectRelease_n(a1, 2);
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_1000180E8(v13, a2 & 1);
  v15 = sub_10001724C(v7);
  if ((v14 & 1) == (v16 & 1))
  {
    v10 = v15;
    if ((v14 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v18 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
    swift_willThrow();
    v46 = v18;
    swift_errorRetain(v18);
    v19 = sub_10000498C(&qword_100098B38);
    if ((swift_dynamicCast(v19, &v46, v19, &type metadata for _MergeError, 0) & 1) == 0)
    {
      swift_bridgeObjectRelease_n(a1, 2);
      return swift_errorRelease(v46);
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&_s7ColumnsON);
  __break(1u);
LABEL_26:
  v44 = 0;
  v45 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v39._object = (void *)0x8000000100076E30;
  v39._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v39);
  _print_unlocked<A, B>(_:_:)(&v47, &v44, &_s7ColumnsON, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v40._countAndFlagsBits = 39;
  v40._object = (void *)0xE100000000000000;
  String.append(_:)(v40);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v44, v45, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
  return result;
}

unint64_t sub_1000171E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_100017330(a1, a2, v5);
}

unint64_t sub_10001724C(char a1)
{
  uint64_t v1;
  Swift::Int v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, *(_QWORD *)(v1 + 40));
  Hasher._combine(_:)(qword_100073EC0[a1]);
  v3 = Hasher._finalize()();
  return sub_1000174F8(a1, v3);
}

unint64_t sub_1000172B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  _QWORD v9[9];

  v3 = *(_QWORD *)(v1 + 40);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v6 = v5;
  Hasher.init(_seed:)(v9, v3);
  String.hash(into:)(v9, v4, v6);
  v7 = Hasher._finalize()();
  swift_bridgeObjectRelease(v6);
  return sub_1000175AC(a1, v7);
}

unint64_t sub_100017330(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = v10[1];
    v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      do
      {
        v6 = (v6 + 1) & v13;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v14 = (_QWORD *)(v9 + 16 * v6);
        v15 = v14[1];
        v16 = *v14 == a1 && v15 == a2;
      }
      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0);
    }
  }
  return v6;
}

_QWORD *sub_100017420@<X0>(_BYTE *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_1000174B4();
  result = EnvironmentValues.subscript.getter(&v4, &type metadata for TFUIConfigKey, &type metadata for TFUIConfigKey, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_10001746C(char *a1)
{
  unint64_t v1;
  char v3;

  v3 = *a1;
  v1 = sub_1000174B4();
  return EnvironmentValues.subscript.setter(&v3, &type metadata for TFUIConfigKey, &type metadata for TFUIConfigKey, v1);
}

unint64_t sub_1000174B4()
{
  unint64_t result;

  result = qword_100098AB8;
  if (!qword_100098AB8)
  {
    result = swift_getWitnessTable(&unk_1000766C8, &type metadata for TFUIConfigKey);
    atomic_store(result, (unint64_t *)&qword_100098AB8);
  }
  return result;
}

unint64_t sub_1000174F8(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = qword_100073EC0[a1];
    v8 = *(_QWORD *)(v2 + 48);
    if (qword_100073EC0[*(char *)(v8 + result)] != v7)
    {
      v9 = ~v5;
      for (result = (result + 1) & v9;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v9)
      {
        if (qword_100073EC0[*(char *)(v8 + result)] == v7)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_1000175AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2);
      return v5;
    }
    v13 = v11;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      v15 = ~v4;
      v5 = (v5 + 1) & v15;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
          v9 = v17;
          v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v16 == v18 && v9 == v19)
            break;
          v21 = v19;
          v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            v5 = (v5 + 1) & v15;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

void *sub_100017720()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_10000498C(&qword_100098AC0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    result = (void *)swift_bridgeObjectRetain(v20);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000178D4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;

  v1 = v0;
  sub_10000498C(&qword_100098AF8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v20 = __clz(__rbit64(v18));
    v12 = (v18 - 1) & v18;
    v15 = v20 + (v9 << 6);
LABEL_12:
    v16 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + 16 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + 16 * v15) = v16;
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_100017A60()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_10000498C(&qword_100098B50);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(void **)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    result = v20;
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_100017C10()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  _OWORD v22[2];

  v1 = v0;
  sub_10000498C(&qword_100098F48);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 32 * v15;
    sub_10001E940(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    sub_10001E97C(v22, (_OWORD *)(*(_QWORD *)(v4 + 56) + v18));
    result = v17;
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

Swift::Int sub_100017DD4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  _QWORD v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10000498C(&qword_100098AC0);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_36;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v35)
              goto LABEL_36;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      swift_bridgeObjectRetain(v33);
    }
    Hasher.init(_seed:)(v38, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v38, v32, v31);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_1000180E8(uint64_t a1, uint64_t a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  Swift::Int v5;
  uint64_t v6;
  Swift::Int result;
  Swift::Int v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  Swift::Int *v33;
  char v34;
  int64_t v35;
  _QWORD *v36;
  uint64_t v37[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10000498C(&qword_100098AF8);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v34 = a2;
    v33 = v3;
    v9 = 0;
    v36 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v17 = v16 | (v9 << 6);
      }
      else
      {
        v18 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v18 >= v35)
          goto LABEL_34;
        v19 = v36[v18];
        ++v9;
        if (!v19)
        {
          v9 = v18 + 1;
          if (v18 + 1 >= v35)
            goto LABEL_34;
          v19 = v36[v9];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v35)
            {
LABEL_34:
              if ((v34 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v33;
                goto LABEL_41;
              }
              v32 = 1 << *(_BYTE *)(v5 + 32);
              if (v32 >= 64)
                bzero(v36, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v36 = -1 << v32;
              v3 = v33;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v19 = v36[v20];
            if (!v19)
            {
              while (1)
              {
                v9 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_43;
                if (v9 >= v35)
                  goto LABEL_34;
                v19 = v36[v9];
                ++v20;
                if (v19)
                  goto LABEL_24;
              }
            }
            v9 = v20;
          }
        }
LABEL_24:
        v12 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v9 << 6);
      }
      v21 = *(char *)(*(_QWORD *)(v5 + 48) + v17);
      v22 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v17);
      v24 = *v22;
      v23 = v22[1];
      Hasher.init(_seed:)(v37, *(_QWORD *)(v8 + 40));
      Hasher._combine(_:)(qword_100073EC0[v21]);
      result = Hasher._finalize()();
      v25 = -1 << *(_BYTE *)(v8 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v13 + 8 * (v26 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v13 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v13 + 8 * v27);
        }
        while (v31 == -1);
        v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_BYTE *)(*(_QWORD *)(v8 + 48) + v14) = v21;
      v15 = (_QWORD *)(*(_QWORD *)(v8 + 56) + 16 * v14);
      *v15 = v24;
      v15[1] = v23;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
LABEL_41:
  *v3 = v8;
  return result;
}

uint64_t sub_1000183C4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  char v39;
  _QWORD v40[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10000498C(&qword_100098B50);
  v39 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v38 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v36 = v3;
  v37 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v37)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v37)
        goto LABEL_36;
      v24 = *(_QWORD *)(v38 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_36:
          swift_release();
          v3 = v36;
          if ((v39 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v37)
              goto LABEL_36;
            v24 = *(_QWORD *)(v38 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      v34 = v33;
    }
    Hasher.init(_seed:)(v40, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v40, v32, v31);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v3 = v36;
  v23 = (_QWORD *)(v5 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release();
  *v3 = v8;
  return result;
}

uint64_t sub_1000186D0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  _OWORD *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  char v40;
  _QWORD v41[9];
  _OWORD v42[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10000498C(&qword_100098F48);
  v40 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v39 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v38 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v17 = v16 | (v14 << 6);
      goto LABEL_25;
    }
    v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }
    if (v18 >= v38)
      break;
    v19 = (_QWORD *)(v5 + 64);
    v20 = *(_QWORD *)(v39 + 8 * v18);
    ++v14;
    if (!v20)
    {
      v14 = v18 + 1;
      if (v18 + 1 >= v38)
        goto LABEL_37;
      v20 = *(_QWORD *)(v39 + 8 * v14);
      if (!v20)
      {
        v21 = v18 + 2;
        if (v21 >= v38)
        {
LABEL_37:
          swift_release();
          if ((v40 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v20 = *(_QWORD *)(v39 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            v14 = v21 + 1;
            if (__OFADD__(v21, 1))
              goto LABEL_46;
            if (v14 >= v38)
              goto LABEL_37;
            v20 = *(_QWORD *)(v39 + 8 * v14);
            ++v21;
            if (v20)
              goto LABEL_24;
          }
        }
        v14 = v21;
      }
    }
LABEL_24:
    v11 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v14 << 6);
LABEL_25:
    v22 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v17);
    v23 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v17);
    if ((v40 & 1) != 0)
    {
      sub_10001E97C(v23, v42);
    }
    else
    {
      sub_10001E940((uint64_t)v23, (uint64_t)v42);
      v24 = v22;
    }
    v25 = *(_QWORD *)(v8 + 40);
    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    v28 = v27;
    Hasher.init(_seed:)(v41, v25);
    String.hash(into:)(v41, v26, v28);
    v29 = Hasher._finalize()();
    result = swift_bridgeObjectRelease(v28);
    v30 = -1 << *(_BYTE *)(v8 + 32);
    v31 = v29 & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v12 + 8 * (v31 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v12 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v35 = v32 == v34;
        if (v32 == v34)
          v32 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v12 + 8 * v32);
      }
      while (v36 == -1);
      v15 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v15) = v22;
    result = (uint64_t)sub_10001E97C(v42, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v15));
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v19 = (_QWORD *)(v5 + 64);
  if ((v40 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v37 = 1 << *(_BYTE *)(v5 + 32);
  if (v37 >= 64)
    bzero(v19, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v19 = -1 << v37;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  result = swift_release();
  *v3 = v8;
  return result;
}

uint64_t sub_100018A08(uint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(_QWORD *))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[2];

  v6 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v6 = a2(v6);
  v7 = *(_QWORD *)(v6 + 16);
  v9[0] = v6 + 32;
  v9[1] = v7;
  result = a3(v9);
  *a1 = v6;
  return result;
}

_QWORD *sub_100018A80(_QWORD *a1)
{
  return sub_100013590(0, a1[2], 0, a1);
}

Swift::Int sub_100018A94(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  Swift::Int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  Swift::Int v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t *v23;
  uint64_t v24;
  Swift::Int v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  char v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  unint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  void *v96;
  Swift::Int v97;
  Swift::Int v98;
  uint64_t v99;
  char *__dst;

  v2 = a1;
  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)v3 < 2)
        return result;
      v81 = 0;
      v82 = *v2;
      v83 = 1;
      while (1)
      {
        v84 = *(_QWORD *)(v82 + 8 * v83);
        v85 = v81;
        do
        {
          v86 = *(_QWORD *)(v82 + v85);
          if (v84 >= v86)
            break;
          if (!v82)
            goto LABEL_143;
          *(_QWORD *)(v82 + v85 + 8) = v86;
          *(_QWORD *)(v82 + v85) = v84;
          v85 -= 8;
        }
        while (v85 != -8);
        ++v83;
        v81 += 8;
        if (v83 == v3)
          return result;
      }
    }
    goto LABEL_139;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
  {
LABEL_148:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    return result;
  }
  v97 = result;
  v98 = v3;
  if (v3 < 2)
  {
    v9 = &_swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage + 32;
    if (v3 != 1)
    {
      v13 = *((_QWORD *)&_swiftEmptyArrayStorage + 2);
      v12 = (char *)&_swiftEmptyArrayStorage;
      goto LABEL_104;
    }
    v96 = &_swiftEmptyArrayStorage;
  }
  else
  {
    v6 = v5 >> 1;
    type metadata accessor for ComponentSize(0);
    v8 = static Array._allocateBufferUninitialized(minimumCapacity:)(v6, v7);
    *(_QWORD *)(v8 + 16) = v6;
    v3 = v98;
    v96 = (void *)v8;
    __dst = (char *)(v8 + 32);
  }
  v10 = 0;
  v11 = *v2;
  v94 = v2;
  v95 = *v2 - 8;
  v12 = (char *)&_swiftEmptyArrayStorage;
  v99 = *v2;
  while (1)
  {
    v14 = v10++;
    if (v10 < v3)
    {
      v15 = *(_QWORD *)(v11 + 8 * v10);
      v16 = *(_QWORD *)(v11 + 8 * v14);
      v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        v17 = v15;
        while (1)
        {
          v18 = *(_QWORD *)(v11 + 8 * v10);
          if (v15 < v16 == v18 >= v17)
            break;
          ++v10;
          v17 = v18;
          if (v3 == v10)
          {
            v10 = v3;
            break;
          }
        }
      }
      if (v15 < v16)
      {
        if (v10 < v14)
          goto LABEL_140;
        if (v14 < v10)
        {
          v19 = v10 - 1;
          v20 = v14;
          do
          {
            if (v20 != v19)
            {
              if (!v11)
                goto LABEL_146;
              v21 = *(_QWORD *)(v11 + 8 * v20);
              *(_QWORD *)(v11 + 8 * v20) = *(_QWORD *)(v11 + 8 * v19);
              *(_QWORD *)(v11 + 8 * v19) = v21;
            }
            v60 = ++v20 < v19--;
          }
          while (v60);
        }
      }
    }
    if (v10 < v3)
    {
      if (__OFSUB__(v10, v14))
        goto LABEL_138;
      if (v10 - v14 < v97)
      {
        v22 = v14 + v97;
        if (__OFADD__(v14, v97))
          goto LABEL_141;
        if (v22 >= v3)
          v22 = v3;
        if (v22 < v14)
          goto LABEL_142;
        if (v10 != v22)
        {
          v23 = (uint64_t *)(v95 + 8 * v10);
          do
          {
            v24 = *(_QWORD *)(v11 + 8 * v10);
            v25 = v14;
            v26 = v23;
            do
            {
              v27 = *v26;
              if (v24 >= *v26)
                break;
              if (!v11)
                goto LABEL_144;
              *v26 = v24;
              v26[1] = v27;
              --v26;
              ++v25;
            }
            while (v10 != v25);
            ++v10;
            ++v23;
          }
          while (v10 != v22);
          v10 = v22;
        }
      }
    }
    if (v10 < v14)
    {
LABEL_133:
      __break(1u);
      goto LABEL_134;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0)
      v12 = sub_100019EA8(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v29 = *((_QWORD *)v12 + 2);
    v28 = *((_QWORD *)v12 + 3);
    v13 = v29 + 1;
    v11 = v99;
    if (v29 >= v28 >> 1)
    {
      v78 = sub_100019EA8((char *)(v28 > 1), v29 + 1, 1, v12);
      v11 = v99;
      v12 = v78;
    }
    *((_QWORD *)v12 + 2) = v13;
    v30 = v12 + 32;
    v31 = &v12[16 * v29 + 32];
    *(_QWORD *)v31 = v14;
    *((_QWORD *)v31 + 1) = v10;
    if (v29)
      break;
    v13 = 1;
LABEL_15:
    v3 = v98;
    if (v10 >= v98)
    {
      v9 = v96;
      v2 = v94;
LABEL_104:
      v96 = v9;
      if (v13 < 2)
      {
LABEL_115:
        v80 = v12;
        goto LABEL_116;
      }
      v87 = *v2;
      while (1)
      {
        v88 = v13 - 2;
        if (v13 < 2)
          break;
        if (!v87)
          goto LABEL_147;
        v79 = v12;
        v89 = v12 + 32;
        v90 = *(_QWORD *)&v12[16 * v88 + 32];
        v91 = *(_QWORD *)&v12[16 * v13 + 24];
        sub_100019938((char *)(v87 + 8 * v90), (char *)(v87 + 8 * *(_QWORD *)&v89[16 * v13 - 16]), v87 + 8 * v91, __dst);
        if (v1)
          goto LABEL_95;
        if (v91 < v90)
          goto LABEL_135;
        if ((swift_isUniquelyReferenced_nonNull_native(v79) & 1) == 0)
          v79 = sub_10001A194((uint64_t)v79);
        if (v88 >= *((_QWORD *)v79 + 2))
          goto LABEL_136;
        v92 = &v79[16 * v88 + 32];
        *(_QWORD *)v92 = v90;
        *((_QWORD *)v92 + 1) = v91;
        v93 = *((_QWORD *)v79 + 2);
        if (v13 > v93)
          goto LABEL_137;
        memmove(&v79[16 * v13 + 16], &v79[16 * v13 + 32], 16 * (v93 - v13));
        v12 = v79;
        *((_QWORD *)v79 + 2) = v93 - 1;
        v13 = v93 - 1;
        if (v93 <= 2)
          goto LABEL_115;
      }
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
      goto LABEL_148;
    }
  }
  while (1)
  {
    v32 = v13 - 1;
    if (v13 >= 4)
    {
      v37 = &v30[16 * v13];
      v38 = *((_QWORD *)v37 - 8);
      v39 = *((_QWORD *)v37 - 7);
      v43 = __OFSUB__(v39, v38);
      v40 = v39 - v38;
      if (v43)
        goto LABEL_122;
      v42 = *((_QWORD *)v37 - 6);
      v41 = *((_QWORD *)v37 - 5);
      v43 = __OFSUB__(v41, v42);
      v35 = v41 - v42;
      v36 = v43;
      if (v43)
        goto LABEL_123;
      v44 = v13 - 2;
      v45 = &v30[16 * v13 - 32];
      v47 = *(_QWORD *)v45;
      v46 = *((_QWORD *)v45 + 1);
      v43 = __OFSUB__(v46, v47);
      v48 = v46 - v47;
      if (v43)
        goto LABEL_125;
      v43 = __OFADD__(v35, v48);
      v49 = v35 + v48;
      if (v43)
        goto LABEL_128;
      if (v49 >= v40)
      {
        v67 = &v30[16 * v32];
        v69 = *(_QWORD *)v67;
        v68 = *((_QWORD *)v67 + 1);
        v43 = __OFSUB__(v68, v69);
        v70 = v68 - v69;
        if (v43)
          goto LABEL_132;
        v60 = v35 < v70;
        goto LABEL_84;
      }
    }
    else
    {
      if (v13 != 3)
      {
        v61 = *((_QWORD *)v12 + 4);
        v62 = *((_QWORD *)v12 + 5);
        v43 = __OFSUB__(v62, v61);
        v54 = v62 - v61;
        v55 = v43;
        goto LABEL_78;
      }
      v34 = *((_QWORD *)v12 + 4);
      v33 = *((_QWORD *)v12 + 5);
      v43 = __OFSUB__(v33, v34);
      v35 = v33 - v34;
      v36 = v43;
    }
    if ((v36 & 1) != 0)
      goto LABEL_124;
    v44 = v13 - 2;
    v50 = &v30[16 * v13 - 32];
    v52 = *(_QWORD *)v50;
    v51 = *((_QWORD *)v50 + 1);
    v53 = __OFSUB__(v51, v52);
    v54 = v51 - v52;
    v55 = v53;
    if (v53)
      goto LABEL_127;
    v56 = &v30[16 * v32];
    v58 = *(_QWORD *)v56;
    v57 = *((_QWORD *)v56 + 1);
    v43 = __OFSUB__(v57, v58);
    v59 = v57 - v58;
    if (v43)
      goto LABEL_130;
    if (__OFADD__(v54, v59))
      goto LABEL_131;
    if (v54 + v59 >= v35)
    {
      v60 = v35 < v59;
LABEL_84:
      if (v60)
        v32 = v44;
      goto LABEL_86;
    }
LABEL_78:
    if ((v55 & 1) != 0)
      goto LABEL_126;
    v63 = &v30[16 * v32];
    v65 = *(_QWORD *)v63;
    v64 = *((_QWORD *)v63 + 1);
    v43 = __OFSUB__(v64, v65);
    v66 = v64 - v65;
    if (v43)
      goto LABEL_129;
    if (v66 < v54)
      goto LABEL_15;
LABEL_86:
    v71 = v32 - 1;
    if (v32 - 1 >= v13)
    {
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
      goto LABEL_133;
    }
    if (!v11)
      goto LABEL_145;
    v72 = &v30[16 * v71];
    v73 = *(_QWORD *)v72;
    v74 = v30;
    v75 = &v30[16 * v32];
    v76 = *((_QWORD *)v75 + 1);
    sub_100019938((char *)(v11 + 8 * *(_QWORD *)v72), (char *)(v11 + 8 * *(_QWORD *)v75), v11 + 8 * v76, __dst);
    if (v1)
      break;
    if (v76 < v73)
      goto LABEL_119;
    if (v32 > *((_QWORD *)v12 + 2))
      goto LABEL_120;
    *(_QWORD *)v72 = v73;
    *(_QWORD *)&v74[16 * v71 + 8] = v76;
    v77 = *((_QWORD *)v12 + 2);
    if (v32 >= v77)
      goto LABEL_121;
    v13 = v77 - 1;
    memmove(v75, v75 + 16, 16 * (v77 - 1 - v32));
    v30 = v74;
    *((_QWORD *)v12 + 2) = v77 - 1;
    v11 = v99;
    if (v77 <= 2)
      goto LABEL_15;
  }
  v79 = v12;
LABEL_95:
  v80 = v79;
LABEL_116:
  swift_bridgeObjectRelease(v80);
  *((_QWORD *)v96 + 2) = 0;
  return swift_bridgeObjectRelease(v96);
}

Swift::Int sub_100019120(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  Swift::Int v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  Swift::Int v20;
  Swift::Int v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  Swift::Int v30;
  Swift::Int v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  __int128 v35;
  __int128 v36;
  Swift::Int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  Swift::Int v41;
  uint64_t v42;
  char v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  char v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  unint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  _QWORD *v106;
  Swift::Int v107;
  Swift::Int v108;
  uint64_t v109;
  char *__dst;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        return sub_100019890(0, v3, 1, a1);
      return result;
    }
    goto LABEL_170;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
  {
LABEL_178:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    return result;
  }
  v6 = result;
  v104 = a1;
  if (v3 < 2)
  {
    v10 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v14 = _swiftEmptyArrayStorage[2];
      v13 = (char *)_swiftEmptyArrayStorage;
LABEL_136:
      v97 = v13;
      v106 = v10;
      if (v14 < 2)
        goto LABEL_133;
      v98 = *v104;
      while (1)
      {
        v99 = v14 - 2;
        if (v14 < 2)
          goto LABEL_165;
        if (!v98)
          goto LABEL_177;
        v96 = v97;
        v100 = *(_QWORD *)&v97[16 * v99 + 32];
        v101 = *(_QWORD *)&v97[16 * v14 + 24];
        sub_100019BA4((char *)(v98 + 24 * v100), (char *)(v98 + 24 * *(_QWORD *)&v97[16 * v14 + 16]), v98 + 24 * v101, __dst);
        if (v1)
          goto LABEL_132;
        if (v101 < v100)
          goto LABEL_166;
        if ((swift_isUniquelyReferenced_nonNull_native(v96) & 1) == 0)
          v96 = sub_10001A194((uint64_t)v96);
        if (v99 >= *((_QWORD *)v96 + 2))
          goto LABEL_167;
        v102 = &v96[16 * v99 + 32];
        *(_QWORD *)v102 = v100;
        *((_QWORD *)v102 + 1) = v101;
        v103 = *((_QWORD *)v96 + 2);
        if (v14 > v103)
          goto LABEL_168;
        memmove(&v96[16 * v14 + 16], &v96[16 * v14 + 32], 16 * (v103 - v14));
        v97 = v96;
        *((_QWORD *)v96 + 2) = v103 - 1;
        v14 = v103 - 1;
        if (v103 <= 2)
          goto LABEL_133;
      }
    }
    v106 = _swiftEmptyArrayStorage;
  }
  else
  {
    v7 = v5 >> 1;
    v8 = sub_10000498C(&qword_100098B30);
    v9 = static Array._allocateBufferUninitialized(minimumCapacity:)(v7, v8);
    *(_QWORD *)(v9 + 16) = v7;
    v106 = (_QWORD *)v9;
    __dst = (char *)(v9 + 32);
  }
  v11 = 0;
  v12 = *a1;
  v105 = *a1 + 16;
  v13 = (char *)_swiftEmptyArrayStorage;
  v107 = v6;
  v108 = v3;
  v109 = v12;
  while (1)
  {
    v15 = v11++;
    if (v11 >= v3)
      goto LABEL_60;
    v16 = *(_QWORD *)(v12 + 24 * v11 + 16);
    v17 = *(_QWORD *)(v12 + 24 * v15 + 16);
    if (v16 == v17)
    {
      v18 = *(_QWORD *)(v12 + 24 * v11 + 8) < *(_QWORD *)(v12 + 24 * v15 + 8);
      goto LABEL_22;
    }
    if (!v16)
    {
      v20 = v15 + 2;
      if (v15 + 2 >= v3)
      {
LABEL_52:
        if (v15 < v20)
        {
          v28 = 24 * v20;
          v29 = 24 * v15;
          v30 = v20;
          v31 = v15;
          while (1)
          {
            if (v31 != --v30)
            {
              if (!v12)
                goto LABEL_176;
              v32 = v12 + v29;
              v33 = v12 + v28;
              v34 = *(_BYTE *)(v12 + v29);
              v35 = *(_OWORD *)(v12 + v29 + 8);
              v36 = *(_OWORD *)(v12 + v28 - 24);
              *(_QWORD *)(v32 + 16) = *(_QWORD *)(v12 + v28 - 8);
              *(_OWORD *)v32 = v36;
              *(_BYTE *)(v33 - 24) = v34;
              *(_OWORD *)(v33 - 16) = v35;
            }
            ++v31;
            v28 -= 24;
            v29 += 24;
            if (v31 >= v30)
              goto LABEL_59;
          }
        }
        goto LABEL_59;
      }
      v19 = 1;
      goto LABEL_31;
    }
    if (!v17)
    {
      v20 = v15 + 2;
      if (v15 + 2 >= v3)
      {
LABEL_59:
        v11 = v20;
        goto LABEL_60;
      }
      v19 = 0;
LABEL_31:
      if (v3 <= v20 + 1)
        v21 = v20 + 1;
      else
        v21 = v3;
      v22 = (_QWORD *)(v105 + 24 * v20);
      v23 = v22;
      while (1)
      {
        v24 = v16;
        v25 = *v23;
        v23 += 3;
        v16 = v25;
        if (v25 == v24)
          break;
        if (v16)
        {
          if (v24)
          {
            v26 = v24 < v16;
LABEL_42:
            v27 = v26;
            if (v19 != v27)
              goto LABEL_50;
            goto LABEL_36;
          }
          if ((v19 & 1) != 0)
            goto LABEL_51;
        }
        else if ((v19 & 1) == 0)
        {
          goto LABEL_59;
        }
LABEL_36:
        v11 = v20;
        v22 = v23;
        if (++v20 >= v3)
        {
          v20 = v21;
          goto LABEL_50;
        }
      }
      v26 = *(v22 - 1) < *(_QWORD *)(v12 + 24 * v11 + 8);
      goto LABEL_42;
    }
    v18 = v17 < v16;
LABEL_22:
    v19 = v18;
    v20 = v15 + 2;
    if (v15 + 2 < v3)
      goto LABEL_31;
LABEL_50:
    v11 = v20;
    if (v19)
    {
LABEL_51:
      if (v20 < v15)
        goto LABEL_171;
      goto LABEL_52;
    }
LABEL_60:
    if (v11 < v3)
    {
      if (__OFSUB__(v11, v15))
        goto LABEL_169;
      if (v11 - v15 < v6)
      {
        v37 = v15 + v6;
        if (__OFADD__(v15, v6))
          goto LABEL_172;
        if (v37 >= v3)
          v37 = v3;
        if (v37 < v15)
          goto LABEL_173;
        if (v11 != v37)
        {
          v38 = v12 + 24 * v11;
          do
          {
            v39 = *(_QWORD *)(v12 + 24 * v11 + 16);
            v40 = v38;
            v41 = v15;
            do
            {
              v42 = *(_QWORD *)(v40 - 8);
              if (v39 == v42)
              {
                if (*(_QWORD *)(v40 + 8) >= *(_QWORD *)(v40 - 16))
                  break;
              }
              else if (v39)
              {
                if (!v42 || v42 >= v39)
                  break;
              }
              if (!v12)
                goto LABEL_174;
              v44 = *(_BYTE *)v40;
              v45 = *(_QWORD *)(v40 + 8);
              *(_OWORD *)v40 = *(_OWORD *)(v40 - 24);
              *(_QWORD *)(v40 + 16) = *(_QWORD *)(v40 - 8);
              *(_QWORD *)(v40 - 16) = v45;
              *(_QWORD *)(v40 - 8) = v39;
              *(_BYTE *)(v40 - 24) = v44;
              v40 -= 24;
              ++v41;
            }
            while (v11 != v41);
            ++v11;
            v38 += 24;
          }
          while (v11 != v37);
          v11 = v37;
        }
      }
    }
    if (v11 < v15)
    {
LABEL_164:
      __break(1u);
LABEL_165:
      __break(1u);
LABEL_166:
      __break(1u);
LABEL_167:
      __break(1u);
LABEL_168:
      __break(1u);
LABEL_169:
      __break(1u);
LABEL_170:
      __break(1u);
LABEL_171:
      __break(1u);
LABEL_172:
      __break(1u);
LABEL_173:
      __break(1u);
LABEL_174:
      __break(1u);
LABEL_175:
      __break(1u);
LABEL_176:
      __break(1u);
LABEL_177:
      __break(1u);
      goto LABEL_178;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
      v13 = sub_100019EA8(0, *((_QWORD *)v13 + 2) + 1, 1, v13);
    v47 = *((_QWORD *)v13 + 2);
    v46 = *((_QWORD *)v13 + 3);
    v14 = v47 + 1;
    v12 = v109;
    if (v47 >= v46 >> 1)
    {
      v95 = sub_100019EA8((char *)(v46 > 1), v47 + 1, 1, v13);
      v12 = v109;
      v13 = v95;
    }
    *((_QWORD *)v13 + 2) = v14;
    v48 = v13 + 32;
    v49 = &v13[16 * v47 + 32];
    *(_QWORD *)v49 = v15;
    *((_QWORD *)v49 + 1) = v11;
    if (v47)
      break;
    v14 = 1;
LABEL_15:
    v6 = v107;
    v3 = v108;
    if (v11 >= v108)
    {
      v10 = v106;
      goto LABEL_136;
    }
  }
  while (1)
  {
    v50 = v14 - 1;
    if (v14 >= 4)
    {
      v55 = &v48[16 * v14];
      v56 = *((_QWORD *)v55 - 8);
      v57 = *((_QWORD *)v55 - 7);
      v61 = __OFSUB__(v57, v56);
      v58 = v57 - v56;
      if (v61)
        goto LABEL_153;
      v60 = *((_QWORD *)v55 - 6);
      v59 = *((_QWORD *)v55 - 5);
      v61 = __OFSUB__(v59, v60);
      v53 = v59 - v60;
      v54 = v61;
      if (v61)
        goto LABEL_154;
      v62 = v14 - 2;
      v63 = &v48[16 * v14 - 32];
      v65 = *(_QWORD *)v63;
      v64 = *((_QWORD *)v63 + 1);
      v61 = __OFSUB__(v64, v65);
      v66 = v64 - v65;
      if (v61)
        goto LABEL_156;
      v61 = __OFADD__(v53, v66);
      v67 = v53 + v66;
      if (v61)
        goto LABEL_159;
      if (v67 >= v58)
      {
        v85 = &v48[16 * v50];
        v87 = *(_QWORD *)v85;
        v86 = *((_QWORD *)v85 + 1);
        v61 = __OFSUB__(v86, v87);
        v88 = v86 - v87;
        if (v61)
          goto LABEL_163;
        v78 = v53 < v88;
        goto LABEL_121;
      }
    }
    else
    {
      if (v14 != 3)
      {
        v79 = *((_QWORD *)v13 + 4);
        v80 = *((_QWORD *)v13 + 5);
        v61 = __OFSUB__(v80, v79);
        v72 = v80 - v79;
        v73 = v61;
        goto LABEL_115;
      }
      v52 = *((_QWORD *)v13 + 4);
      v51 = *((_QWORD *)v13 + 5);
      v61 = __OFSUB__(v51, v52);
      v53 = v51 - v52;
      v54 = v61;
    }
    if ((v54 & 1) != 0)
      goto LABEL_155;
    v62 = v14 - 2;
    v68 = &v48[16 * v14 - 32];
    v70 = *(_QWORD *)v68;
    v69 = *((_QWORD *)v68 + 1);
    v71 = __OFSUB__(v69, v70);
    v72 = v69 - v70;
    v73 = v71;
    if (v71)
      goto LABEL_158;
    v74 = &v48[16 * v50];
    v76 = *(_QWORD *)v74;
    v75 = *((_QWORD *)v74 + 1);
    v61 = __OFSUB__(v75, v76);
    v77 = v75 - v76;
    if (v61)
      goto LABEL_161;
    if (__OFADD__(v72, v77))
      goto LABEL_162;
    if (v72 + v77 >= v53)
    {
      v78 = v53 < v77;
LABEL_121:
      if (v78)
        v50 = v62;
      goto LABEL_123;
    }
LABEL_115:
    if ((v73 & 1) != 0)
      goto LABEL_157;
    v81 = &v48[16 * v50];
    v83 = *(_QWORD *)v81;
    v82 = *((_QWORD *)v81 + 1);
    v61 = __OFSUB__(v82, v83);
    v84 = v82 - v83;
    if (v61)
      goto LABEL_160;
    if (v84 < v72)
      goto LABEL_15;
LABEL_123:
    v89 = v50 - 1;
    if (v50 - 1 >= v14)
    {
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
LABEL_162:
      __break(1u);
LABEL_163:
      __break(1u);
      goto LABEL_164;
    }
    if (!v12)
      goto LABEL_175;
    v90 = &v48[16 * v89];
    v91 = *(_QWORD *)v90;
    v92 = &v48[16 * v50];
    v93 = *((_QWORD *)v92 + 1);
    sub_100019BA4((char *)(v12 + 24 * *(_QWORD *)v90), (char *)(v12 + 24 * *(_QWORD *)v92), v12 + 24 * v93, __dst);
    if (v1)
      break;
    if (v93 < v91)
      goto LABEL_150;
    if (v50 > *((_QWORD *)v13 + 2))
      goto LABEL_151;
    *(_QWORD *)v90 = v91;
    *(_QWORD *)&v48[16 * v89 + 8] = v93;
    v94 = *((_QWORD *)v13 + 2);
    if (v50 >= v94)
      goto LABEL_152;
    v14 = v94 - 1;
    memmove(&v48[16 * v50], v92 + 16, 16 * (v94 - 1 - v50));
    *((_QWORD *)v13 + 2) = v94 - 1;
    v12 = v109;
    if (v94 <= 2)
      goto LABEL_15;
  }
  v96 = v13;
LABEL_132:
  v97 = v96;
LABEL_133:
  swift_bridgeObjectRelease(v97);
  v106[2] = 0;
  return swift_bridgeObjectRelease(v106);
}

uint64_t sub_100019890(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;

  if (a3 != a2)
  {
    v4 = *a4;
    v5 = *a4 + 24 * a3;
LABEL_5:
    v6 = *(_QWORD *)(v4 + 24 * a3 + 16);
    v7 = v5;
    v8 = result;
    while (1)
    {
      v9 = *(_QWORD *)(v7 - 8);
      if (v6 == v9)
      {
        if (*(_QWORD *)(v7 + 8) >= *(_QWORD *)(v7 - 16))
          goto LABEL_4;
      }
      else if (v6)
      {
        if (!v9 || v9 >= v6)
        {
LABEL_4:
          ++a3;
          v5 += 24;
          if (a3 == a2)
            return result;
          goto LABEL_5;
        }
      }
      if (!v4)
        break;
      v11 = *(_BYTE *)v7;
      v12 = *(_QWORD *)(v7 + 8);
      *(_OWORD *)v7 = *(_OWORD *)(v7 - 24);
      *(_QWORD *)(v7 + 16) = *(_QWORD *)(v7 - 8);
      *(_QWORD *)(v7 - 16) = v12;
      *(_QWORD *)(v7 - 8) = v6;
      *(_BYTE *)(v7 - 24) = v11;
      v7 -= 24;
      if (a3 == ++v8)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100019938(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t result;
  char *v22;
  char *v23;
  char *v24;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 7;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 3;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 3;
  v24 = __src;
  v23 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[8 * v13] <= __dst)
        memmove(__dst, a2, 8 * v13);
      v16 = &v4[8 * v13];
      v22 = v16;
      v24 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        v17 = (char *)(a3 - 8);
        while (1)
        {
          v18 = v17 + 8;
          v19 = v6 - 8;
          v20 = *((_QWORD *)v6 - 1);
          if (*((_QWORD *)v16 - 1) >= v20)
          {
            v22 = v16 - 8;
            if (v18 < v16 || v17 >= v16 || v18 != v16)
              *(_QWORD *)v17 = *((_QWORD *)v16 - 1);
            v16 -= 8;
            if (v6 <= v7)
              goto LABEL_42;
          }
          else
          {
            if (v18 != v6 || v17 >= v6)
              *(_QWORD *)v17 = v20;
            v24 = v6 - 8;
            v6 -= 8;
            if (v19 <= v7)
              goto LABEL_42;
          }
          v17 -= 8;
          if (v16 <= v4)
            goto LABEL_42;
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[8 * v10] <= __dst)
      memmove(__dst, __src, 8 * v10);
    v14 = &v4[8 * v10];
    v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        if (*(_QWORD *)v6 >= *(_QWORD *)v4)
        {
          if (v7 != v4)
            *(_QWORD *)v7 = *(_QWORD *)v4;
          v4 += 8;
          v23 = v4;
          v15 = v6;
        }
        else
        {
          v15 = v6 + 8;
          if (v7 < v6 || v7 >= v15 || v7 != v6)
            *(_QWORD *)v7 = *(_QWORD *)v6;
        }
        v7 += 8;
        if (v4 >= v14)
          break;
        v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      v24 = v7;
    }
LABEL_42:
    sub_100019FA0((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_100019BA4(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  __int128 v26;
  char *v27;
  __int128 v28;
  uint64_t result;
  char *v30;
  const void *v31;
  char *v32;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = (a2 - __src) / 24;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 24;
  v32 = __src;
  v31 = __dst;
  if (v9 >= v11)
  {
    if (v10 < -23)
      goto LABEL_55;
    if (__dst != a2 || &a2[24 * v11] <= __dst)
      memmove(__dst, a2, 24 * v11);
    v20 = &v4[24 * v11];
    v30 = v20;
    v32 = v6;
    if (v7 >= v6 || v10 < 24)
    {
LABEL_54:
      sub_10001A048((void **)&v32, &v31, &v30);
      return 1;
    }
    v21 = a3 - 24;
    while (1)
    {
      v22 = (char *)(v21 + 24);
      v23 = *((_QWORD *)v20 - 1);
      v24 = *((_QWORD *)v6 - 1);
      if (v23 == v24)
      {
        if (*((_QWORD *)v20 - 2) < *((_QWORD *)v6 - 2))
          goto LABEL_49;
      }
      else if (!v23 || (v24 ? (v25 = v24 < v23) : (v25 = 0), v25))
      {
LABEL_49:
        v27 = v6 - 24;
        if (v22 != v6 || v21 >= (unint64_t)v6)
        {
          v28 = *(_OWORD *)v27;
          *(_QWORD *)(v21 + 16) = *((_QWORD *)v6 - 1);
          *(_OWORD *)v21 = v28;
        }
        v32 = v6 - 24;
        if (v27 <= v7)
          goto LABEL_54;
        goto LABEL_53;
      }
      v30 = v20 - 24;
      if (v22 < v20 || v21 >= (unint64_t)v20 || v22 != v20)
      {
        v26 = *(_OWORD *)(v20 - 24);
        *(_QWORD *)(v21 + 16) = *((_QWORD *)v20 - 1);
        *(_OWORD *)v21 = v26;
      }
      v27 = v6;
      v20 -= 24;
      if (v6 <= v7)
        goto LABEL_54;
LABEL_53:
      v21 -= 24;
      v6 = v27;
      if (v20 <= v4)
        goto LABEL_54;
    }
  }
  if (v8 >= -23)
  {
    if (__dst != __src || &__src[24 * v9] <= __dst)
      memmove(__dst, __src, 24 * v9);
    v12 = &v4[24 * v9];
    v30 = v12;
    if ((unint64_t)v6 < a3 && v8 >= 24)
    {
      v13 = v4;
      while (1)
      {
        v14 = *((_QWORD *)v6 + 2);
        v15 = *((_QWORD *)v13 + 2);
        if (v14 == v15)
        {
          if (*((_QWORD *)v6 + 1) < *((_QWORD *)v13 + 1))
            goto LABEL_20;
        }
        else if (!v14 || (v15 ? (v16 = v15 < v14) : (v16 = 0), v16))
        {
LABEL_20:
          v18 = v6 + 24;
          v17 = v6;
          if (v7 == v6 && v7 < v18)
            goto LABEL_25;
          goto LABEL_24;
        }
        v4 = v13 + 24;
        v17 = v13;
        v18 = v6;
        if (v7 == v13)
        {
          v13 += 24;
          if (v7 < v4)
            goto LABEL_25;
        }
        else
        {
          v13 += 24;
        }
LABEL_24:
        v19 = *(_OWORD *)v17;
        *((_QWORD *)v7 + 2) = *((_QWORD *)v17 + 2);
        *(_OWORD *)v7 = v19;
LABEL_25:
        v7 += 24;
        if (v13 < v12)
        {
          v6 = v18;
          if ((unint64_t)v18 < a3)
            continue;
        }
        v31 = v4;
        v32 = v7;
        goto LABEL_54;
      }
    }
    goto LABEL_54;
  }
LABEL_55:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

char *sub_100019EA8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000498C(&qword_100098B20);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_100019FA0(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  char v9;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 7;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -8)
  {
    v9 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v9, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
      return (char *)memmove(result, v3, 8 * v7);
  }
  return result;
}

char *sub_10001A048(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;
  char v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -24)
  {
    v7 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v7, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 24;
    if (result != v3 || result >= &v3[24 * v6])
      return (char *)memmove(result, v3, 24 * v6);
  }
  return result;
}

char *sub_10001A104(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  int64_t v4;
  char *result;
  char v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 < 0)
  {
    v7 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v7, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    if (result != v3 || result >= &v3[v4])
      return (char *)memmove(result, v3, v4);
  }
  return result;
}

char *sub_10001A194(uint64_t a1)
{
  return sub_100019EA8(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_10001A1A8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;
  char v16;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_100013590(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy(v9);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v16 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v16, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10001A2F8(uint64_t a1)
{
  return sub_10001A310(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_10001A624);
}

uint64_t sub_10001A304(uint64_t a1)
{
  return sub_10001A310(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_10001A840);
}

uint64_t sub_10001A310(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, uint64_t))
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v18 = a1;
    else
      v18 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v5 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v6 = *v2;
  if (!((unint64_t)*v2 >> 62))
  {
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    v8 = v7 + v5;
    if (!__OFADD__(v7, v5))
      goto LABEL_5;
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v6 < 0)
    v19 = *v2;
  else
    v19 = v6 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v2);
  v7 = _CocoaArrayWrapper.endIndex.getter(v19);
  swift_bridgeObjectRelease(v6);
  v8 = v7 + v5;
  if (__OFADD__(v7, v5))
    goto LABEL_29;
LABEL_5:
  v6 = *v2;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v2);
  *v2 = v6;
  v7 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
  {
    v10 = v6 & 0xFFFFFFFFFFFFFF8;
    if (v8 <= *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v7 = 1;
  }
  if ((unint64_t)v6 >> 62)
    goto LABEL_31;
  v11 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v11 <= v8)
      v11 = v8;
    swift_bridgeObjectRetain(v6);
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v7, v11, 1, v6);
    swift_bridgeObjectRelease(*v2);
    *v2 = v6;
    v10 = v6 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = a2(v10 + 8 * *(_QWORD *)(v10 + 16) + 32, (*(_QWORD *)(v10 + 24) >> 1) - *(_QWORD *)(v10 + 16), a1);
    if (v13 >= v5)
      break;
LABEL_30:
    __break(1u);
LABEL_31:
    if (v6 < 0)
      v20 = v6;
    else
      v20 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v6);
    v11 = _CocoaArrayWrapper.endIndex.getter(v20);
    swift_bridgeObjectRelease(v6);
  }
  if (v13 < 1)
    goto LABEL_19;
  v14 = *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v15 = __OFADD__(v14, v13);
  v16 = v14 + v13;
  if (!v15)
  {
    *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) = v16;
LABEL_19:
    v17 = swift_bridgeObjectRelease(result);
    return specialized Array._endMutation()(v17);
  }
  __break(1u);
  return result;
}

uint64_t sub_10001A4CC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;
  char v16;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_10001369C(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = &v3[v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[v2] && (unint64_t)v9 < a1 + 32 + 8 * v2)
    goto LABEL_24;
  memcpy(v9, (const void *)(a1 + 32), 8 * v2);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v16 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v16, 1092, 0);
  __break(1u);
  return result;
}

_BYTE *sub_10001A610(_BYTE *result, char a2)
{
  *result &= a2 ^ 1;
  return result;
}

uint64_t sub_10001A624(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  void (*v18[4])(id *);

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_10000966C(&qword_100098B68, &qword_100098398, (uint64_t)&protocol conformance descriptor for [A]);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_10000498C(&qword_100098398);
          v13 = sub_10002F728(v18, i, a3);
          v15 = *v14;
          ((void (*)(void (**)(id *), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1000096AC(0, &qword_1000986D0, _UIFontPickerFontInfo_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10001A840(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  void (*v18[4])(id *);

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_10000966C(&qword_100098B78, &qword_100098B70, (uint64_t)&protocol conformance descriptor for [A]);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_10000498C(&qword_100098B70);
          v13 = sub_10002F780(v18, i, a3);
          v15 = *v14;
          ((void (*)(void (**)(id *), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1000096AC(0, &qword_100098918, _UITextFormattingViewControllerEmphasisStyle_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

_QWORD *sub_10001AA5C(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;

  v4 = a4 + 56;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_35:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v12);
    if (v9 == a3)
      goto LABEL_35;
  }
  v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v13);
  if (v14)
    goto LABEL_19;
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    v7 = 0;
    v8 = v13;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    v13 = v8;
LABEL_19:
    v16 = __clz(__rbit64(v14));
    v7 = (v14 - 1) & v14;
    v12 = v16 + (v13 << 6);
    v8 = v13;
    goto LABEL_8;
  }
  v15 = v13 + 2;
  if (v13 + 2 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    v13 = v15;
    goto LABEL_19;
  }
  v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    v7 = 0;
    v8 = v13 + 2;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
    goto LABEL_15;
  v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
    goto LABEL_18;
  while (1)
  {
    v13 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v13 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_34;
    }
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v15;
    if (v14)
      goto LABEL_19;
  }
LABEL_38:
  __break(1u);
  return result;
}

_QWORD *sub_10001ABF0(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;

  v4 = a4 + 64;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_35:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    v13 = *(_OWORD *)(*(_QWORD *)(a4 + 56) + 16 * v12);
    *(_BYTE *)a2 = *(_BYTE *)(*(_QWORD *)(a4 + 48) + v12);
    *(_OWORD *)(a2 + 8) = v13;
    a2 += 24;
    if (v9 == a3)
      goto LABEL_35;
  }
  v14 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v14 >= v10)
    goto LABEL_30;
  v15 = *(_QWORD *)(v4 + 8 * v14);
  if (v15)
    goto LABEL_19;
  v8 += 2;
  if (v14 + 1 >= v10)
  {
    v7 = 0;
    v8 = v14;
    goto LABEL_34;
  }
  v15 = *(_QWORD *)(v4 + 8 * v8);
  if (v15)
  {
LABEL_15:
    v14 = v8;
LABEL_19:
    v17 = __clz(__rbit64(v15));
    v7 = (v15 - 1) & v15;
    v12 = v17 + (v14 << 6);
    v8 = v14;
    goto LABEL_8;
  }
  v16 = v14 + 2;
  if (v14 + 2 >= v10)
    goto LABEL_30;
  v15 = *(_QWORD *)(v4 + 8 * v16);
  if (v15)
  {
LABEL_18:
    v14 = v16;
    goto LABEL_19;
  }
  v8 = v14 + 3;
  if (v14 + 3 >= v10)
  {
    v7 = 0;
    v8 = v14 + 2;
    goto LABEL_34;
  }
  v15 = *(_QWORD *)(v4 + 8 * v8);
  if (v15)
    goto LABEL_15;
  v16 = v14 + 4;
  if (v14 + 4 >= v10)
  {
LABEL_30:
    v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  v15 = *(_QWORD *)(v4 + 8 * v16);
  if (v15)
    goto LABEL_18;
  while (1)
  {
    v14 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v14 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_34;
    }
    v15 = *(_QWORD *)(v4 + 8 * v14);
    ++v16;
    if (v15)
      goto LABEL_19;
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_10001AD90(uint64_t a1)
{
  return sub_100013F50(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_10001ADA4(uint64_t a1)
{
  return sub_100014214(0, *(_QWORD *)(a1 + 16), 0, (char *)a1, &qword_100098B28);
}

uint64_t sub_10001ADD0(uint64_t a1)
{
  return sub_1000144F0(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_10001ADE4(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v20;
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  id v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  id v37;
  id v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;

  if ((unint64_t)a1 >> 62)
    goto LABEL_52;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain(a1);
  if (v2)
  {
    while (1)
    {
      if (v2 < 1)
      {
        __break(1u);
        goto LABEL_62;
      }
      if ((a1 & 0xC000000000000001) == 0)
        break;
      v4 = 0;
      v5 = 0;
      v6 = _swiftEmptyArrayStorage;
      v7 = &_swiftEmptyArrayStorage[4];
      while (1)
      {
        v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
        if (!v4)
        {
          v9 = v6[3];
          if ((uint64_t)((v9 >> 1) + 0x4000000000000000) < 0)
            goto LABEL_50;
          v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
          if (v10 <= 1)
            v11 = 1;
          else
            v11 = v10;
          v12 = sub_10000498C(&qword_100098D50);
          v13 = (_QWORD *)swift_allocObject(v12, 16 * v11 + 32, 7);
          v14 = j__malloc_size(v13);
          v15 = v14 - 32;
          if (v14 < 32)
            v15 = v14 - 17;
          v16 = v15 >> 4;
          v13[2] = v11;
          v13[3] = 2 * (v15 >> 4);
          v17 = (unint64_t)(v13 + 4);
          v18 = v6[3] >> 1;
          if (v6[2])
          {
            if (v13 != v6 || v17 >= (unint64_t)&v6[2 * v18 + 4])
              memmove(v13 + 4, v6 + 4, 16 * v18);
            v6[2] = 0;
          }
          v7 = (_QWORD *)(v17 + 16 * v18);
          v4 = (v16 & 0x7FFFFFFFFFFFFFFFLL) - v18;
          swift_release(v6);
          v6 = v13;
        }
        v20 = __OFSUB__(v4--, 1);
        if (v20)
          break;
        *v7 = v5;
        v7[1] = v8;
        v7 += 2;
        if (v2 == ++v5)
          goto LABEL_47;
      }
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      if (a1 < 0)
        v39 = a1;
      else
        v39 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      result = _CocoaArrayWrapper.endIndex.getter(v39);
      v2 = result;
      if (!result)
        goto LABEL_56;
    }
    v4 = 0;
    v21 = 0;
    v6 = _swiftEmptyArrayStorage;
    v22 = &_swiftEmptyArrayStorage[4];
    do
    {
      v23 = *(void **)(a1 + 8 * v21 + 32);
      if (v4)
      {
        v24 = v23;
        v20 = __OFSUB__(v4--, 1);
        if (v20)
          goto LABEL_49;
      }
      else
      {
        v25 = v6[3];
        if ((uint64_t)((v25 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_51;
        v26 = v25 & 0xFFFFFFFFFFFFFFFELL;
        if (v26 <= 1)
          v27 = 1;
        else
          v27 = v26;
        v28 = sub_10000498C(&qword_100098D50);
        v29 = (_QWORD *)swift_allocObject(v28, 16 * v27 + 32, 7);
        v30 = j__malloc_size(v29);
        v31 = v30 - 32;
        if (v30 < 32)
          v31 = v30 - 17;
        v32 = v31 >> 4;
        v29[2] = v27;
        v29[3] = 2 * (v31 >> 4);
        v33 = v29 + 4;
        v34 = v6[3] >> 1;
        v22 = &v29[2 * v34 + 4];
        v35 = (v32 & 0x7FFFFFFFFFFFFFFFLL) - v34;
        if (v6[2])
        {
          if (v29 != v6 || v33 >= &v6[2 * v34 + 4])
            memmove(v33, v6 + 4, 16 * v34);
          v37 = v23;
          v6[2] = 0;
        }
        else
        {
          v38 = v23;
        }
        swift_release(v6);
        v6 = v29;
        v20 = __OFSUB__(v35, 1);
        v4 = v35 - 1;
        if (v20)
          goto LABEL_49;
      }
      *v22 = v21;
      v22[1] = v23;
      v22 += 2;
      ++v21;
    }
    while (v2 != v21);
LABEL_47:
    result = swift_bridgeObjectRelease(a1);
  }
  else
  {
LABEL_56:
    result = swift_bridgeObjectRelease(a1);
    v4 = 0;
    v6 = _swiftEmptyArrayStorage;
  }
  v40 = v6[3];
  if (v40 < 2)
    return (uint64_t)v6;
  v41 = v40 >> 1;
  v20 = __OFSUB__(v41, v4);
  v42 = v41 - v4;
  if (!v20)
  {
    v6[2] = v42;
    return (uint64_t)v6;
  }
LABEL_62:
  __break(1u);
  return result;
}

uint64_t sub_10001B0B0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

char *sub_10001B1A0(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if ((v4 & 0x8000000000000000) != 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10001B284(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  Swift::UInt *v7;
  Swift::UInt v8;
  Swift::UInt v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  type metadata accessor for ComponentSize(0);
  v4 = v3;
  v5 = sub_100007D90(&qword_100098B08, (uint64_t (*)(uint64_t))type metadata accessor for ComponentSize, (uint64_t)&unk_100072EB8);
  result = Set.init(minimumCapacity:)(v2, v4, v5);
  v10 = result;
  if (v2)
  {
    v7 = (Swift::UInt *)(a1 + 32);
    do
    {
      v8 = *v7++;
      sub_1000147E8(&v9, v8);
      --v2;
    }
    while (v2);
    return v10;
  }
  return result;
}

uint64_t sub_10001B314(uint64_t a1)
{
  if ((unint64_t)(a1 - 4) > 8)
    return 6;
  else
    return byte_100073EF0[a1 - 4];
}

uint64_t sub_10001B338(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10001B428(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  Swift::Int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  if (result < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v2 = a2;
  v3 = result;
  v4 = a2 >> 62;
  if (a2 >> 62)
  {
LABEL_22:
    if (v2 < 0)
      v12 = v2;
    else
      v12 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v13 = _CocoaArrayWrapper.endIndex.getter(v12);
    result = swift_bridgeObjectRelease(v2);
    v14 = v13 - v3;
    if (__OFSUB__(v13, v3))
      goto LABEL_38;
    swift_bridgeObjectRetain(v2);
    v15 = _CocoaArrayWrapper.endIndex.getter(v12);
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRetain(v2);
    v16 = _CocoaArrayWrapper.endIndex.getter(v12);
    result = swift_bridgeObjectRelease(v2);
    if (v16 < 0)
    {
LABEL_39:
      __break(1u);
      return result;
    }
    if (v15 >= (v14 & ~(v14 >> 63)) || v15 <= -1)
      v18 = v14 & ~(v14 >> 63);
    else
      v18 = v15;
    if (v14 >= 1)
      v7 = v18;
    else
      v7 = v14 & ~(v14 >> 63);
    swift_bridgeObjectRetain(v2);
    v19 = _CocoaArrayWrapper.endIndex.getter(v12);
    result = swift_bridgeObjectRelease(v2);
    if (v19 >= v7)
      goto LABEL_10;
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  v5 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v5 >= ((v5 - result) & ~((uint64_t)(v5 - result) >> 63)))
    v6 = (v5 - result) & ~((uint64_t)(v5 - result) >> 63);
  else
    v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  if ((uint64_t)(v5 - result) >= 1)
    v7 = v6;
  else
    v7 = (v5 - result) & ~((uint64_t)(v5 - result) >> 63);
  if ((uint64_t)v5 < v7)
    goto LABEL_37;
LABEL_10:
  if ((v2 & 0xC000000000000001) != 0 && v7)
  {
    sub_1000096AC(0, &qword_100098AB0, UITextFormattingViewControllerComponent_ptr);
    v8 = 0;
    do
    {
      v9 = v8 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v8);
      v8 = v9;
    }
    while (v7 != v9);
  }
  if (v4)
  {
    if (v2 < 0)
      v11 = v2;
    else
      v11 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v10 = _CocoaArrayWrapper.subscript.getter(0, v7, v11);
    swift_bridgeObjectRelease(v2);
  }
  else
  {
    v10 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
  }
  return v10;
}

uint64_t sub_10001B5FC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 24 * a1 + 32;
  v7 = a3 + 24 * v4;
  if (v6 >= v7 || v6 + 24 * v4 <= a3)
  {
    sub_10000498C(&qword_100098AF0);
    swift_arrayInitWithCopy(a3);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10001B708(uint64_t result, char a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *i;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  char v38;
  char v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;

  v3 = *(_QWORD *)(result + 16);
  if (v3)
  {
    v6 = (_QWORD *)swift_bridgeObjectRetain(result);
    v8 = v6[4];
    v7 = v6[5];
    v44 = v6;
    v9 = v6[6];
    v10 = (_QWORD *)*a3;
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v9);
    v12 = sub_1000171E8(v8, v7);
    v13 = v10[2];
    v14 = (v11 & 1) == 0;
    v15 = v13 + v14;
    if (__OFADD__(v13, v14))
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v16 = v11;
    if (v10[3] < v15)
    {
      sub_100017DD4(v15, a2 & 1);
      v17 = sub_1000171E8(v8, v7);
      if ((v16 & 1) != (v18 & 1))
      {
LABEL_27:
        result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
        __break(1u);
        return result;
      }
      v12 = v17;
      v19 = (_QWORD *)*a3;
      if ((v16 & 1) == 0)
        goto LABEL_12;
LABEL_9:
      v45 = *(_QWORD *)(v19[7] + 8 * v12);
      swift_bridgeObjectRetain(v45);
      sub_10001A1A8(v9);
      swift_bridgeObjectRelease(v7);
      v20 = v19[7];
      swift_bridgeObjectRelease(*(_QWORD *)(v20 + 8 * v12));
      *(_QWORD *)(v20 + 8 * v12) = v45;
      v21 = v3 - 1;
      if (v3 == 1)
        return swift_bridgeObjectRelease(v44);
LABEL_16:
      for (i = v44 + 9; ; i += 3)
      {
        v30 = *(i - 2);
        v29 = *(i - 1);
        v31 = *i;
        v32 = (_QWORD *)*a3;
        swift_bridgeObjectRetain(v29);
        swift_bridgeObjectRetain(v31);
        v33 = sub_1000171E8(v30, v29);
        v35 = v32[2];
        v36 = (v34 & 1) == 0;
        v24 = __OFADD__(v35, v36);
        v37 = v35 + v36;
        if (v24)
          break;
        v38 = v34;
        if (v32[3] < v37)
        {
          sub_100017DD4(v37, 1);
          v33 = sub_1000171E8(v30, v29);
          if ((v38 & 1) != (v39 & 1))
            goto LABEL_27;
        }
        v40 = (_QWORD *)*a3;
        if ((v38 & 1) != 0)
        {
          v27 = 8 * v33;
          v46 = *(_QWORD *)(v40[7] + 8 * v33);
          swift_bridgeObjectRetain(v46);
          sub_10001A1A8(v31);
          swift_bridgeObjectRelease(v29);
          v28 = v40[7];
          swift_bridgeObjectRelease(*(_QWORD *)(v28 + v27));
          *(_QWORD *)(v28 + v27) = v46;
        }
        else
        {
          v40[(v33 >> 6) + 8] |= 1 << v33;
          v41 = (uint64_t *)(v40[6] + 16 * v33);
          *v41 = v30;
          v41[1] = v29;
          *(_QWORD *)(v40[7] + 8 * v33) = v31;
          v42 = v40[2];
          v24 = __OFADD__(v42, 1);
          v43 = v42 + 1;
          if (v24)
            goto LABEL_26;
          v40[2] = v43;
        }
        if (!--v21)
          return swift_bridgeObjectRelease(v44);
      }
      goto LABEL_25;
    }
    if ((a2 & 1) != 0)
    {
      v19 = (_QWORD *)*a3;
      if ((v11 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_100017720();
      v19 = (_QWORD *)*a3;
      if ((v16 & 1) != 0)
        goto LABEL_9;
    }
LABEL_12:
    v19[(v12 >> 6) + 8] |= 1 << v12;
    v22 = (uint64_t *)(v19[6] + 16 * v12);
    *v22 = v8;
    v22[1] = v7;
    *(_QWORD *)(v19[7] + 8 * v12) = v9;
    v23 = v19[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v19[2] = v25;
    v21 = v3 - 1;
    if (v3 == 1)
      return swift_bridgeObjectRelease(v44);
    goto LABEL_16;
  }
  return result;
}

uint64_t sub_10001B9E0@<X0>(char a1@<W0>, int64_t a2@<X1>, char a3@<W2>, int a4@<W3>, double a5@<X4>, char a6@<W5>, uint64_t a7@<X8>, double a8@<D0>)
{
  double **v9;
  double v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t i;
  _QWORD *v26;
  uint64_t j;
  id v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  _QWORD *v53;
  BOOL v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  unint64_t v61;
  double v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  void *v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v79;
  int v80;
  double v81;
  id v82;
  double v83;
  CGFloat v84;
  double v85;
  CGFloat v86;
  double v87;
  CGFloat v88;
  double v89;
  CGFloat v90;
  double v91;
  id v92;
  double v93;
  CGFloat v94;
  double v95;
  CGFloat v96;
  double v97;
  CGFloat v98;
  double v99;
  CGFloat v100;
  double v101;
  double v102;
  void *v103;
  id v104;
  double v105;
  CGFloat v106;
  double v107;
  CGFloat v108;
  double v109;
  CGFloat v110;
  double v111;
  CGFloat v112;
  id v113;
  double v114;
  CGFloat v115;
  double v116;
  CGFloat v117;
  double v118;
  CGFloat v119;
  double v120;
  CGFloat v121;
  id v122;
  double v123;
  CGFloat v124;
  double v125;
  CGFloat v126;
  double v127;
  CGFloat v128;
  double v129;
  CGFloat v130;
  double v131;
  void *v132;
  id v133;
  double v134;
  CGFloat v135;
  double v136;
  CGFloat v137;
  double v138;
  CGFloat v139;
  double v140;
  CGFloat v141;
  double v142;
  id v143;
  double v144;
  CGFloat v145;
  double v146;
  CGFloat v147;
  double v148;
  CGFloat v149;
  double v150;
  CGFloat v151;
  double Height;
  double v153;
  double v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  double *v158;
  uint64_t v159;
  double *v160;
  double v161;
  double v162;
  _QWORD *v163;
  uint64_t result;
  uint64_t v165;
  uint64_t v166;
  double v167;
  double v168;
  uint64_t v169;
  double v170;
  uint64_t v171;
  double v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  unint64_t v176;
  _QWORD *v177;
  double v178;
  double v179;
  double v180;
  double v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  double v185;
  double v186;
  double v187;
  unint64_t v188;
  uint64_t v189;
  int v192;
  uint64_t v193;
  unint64_t v194;
  unsigned __int8 v195;
  double *v196;
  _QWORD *v197;
  CGRect v198;
  CGRect v199;
  CGRect v200;
  CGRect v201;
  CGRect v202;
  CGRect v203;
  CGRect v204;

  LODWORD(v9) = a4;
  v14 = sub_100065E58(a3, a4, a1);
  v171 = v15;
  v172 = v14;
  v169 = v17;
  v170 = v16;
  LOBYTE(v194) = a3;
  sub_100065E58(a3, (char)v9, a1);
  v20 = v18 + v19;
  v195 = a1;
  sub_100066220(a1);
  v22 = v21 + v20;
  if (v22 < a8)
    v23 = a8;
  else
    v23 = v22;
  if ((unint64_t)a2 >> 62)
    goto LABEL_142;
  v24 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  for (i = swift_bridgeObjectRetain(a2); ; v24 = i)
  {
    v20 = v23 - v20;
    v26 = _swiftEmptyArrayStorage;
    v192 = (int)v9;
    v173 = a7;
    if (v24)
    {
      if (v24 < 1)
        goto LABEL_147;
      for (j = 0; j != v24; ++j)
      {
        if ((a2 & 0xC000000000000001) != 0)
          v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(j, a2);
        else
          v28 = *(id *)(a2 + 8 * j + 32);
        v29 = v28;
        v30 = objc_msgSend(v28, "components", v166, *(_QWORD *)&v167, *(_QWORD *)&v168);
        v31 = sub_1000096AC(0, &qword_100098AB0, UITextFormattingViewControllerComponent_ptr);
        v32 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v30, v31);

        if ((unint64_t)v32 >> 62)
        {
          if (v32 < 0)
            v43 = v32;
          else
            v43 = v32 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v32);
          v33 = _CocoaArrayWrapper.endIndex.getter(v43);
          swift_bridgeObjectRelease(v32);
        }
        else
        {
          v33 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        swift_bridgeObjectRelease(v32);
        if (v33)
        {
          v34 = objc_msgSend(v29, "identifier");
          v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
          v37 = v36;

          sub_10000B308(v195, v20);
          v39 = v38;

          if ((swift_isUniquelyReferenced_nonNull_native(v26) & 1) == 0)
            v26 = sub_10001346C(0, v26[2] + 1, 1, v26);
          v41 = v26[2];
          v40 = v26[3];
          if (v41 >= v40 >> 1)
            v26 = sub_10001346C((_QWORD *)(v40 > 1), v41 + 1, 1, v26);
          v26[2] = v41 + 1;
          v42 = &v26[3 * v41];
          v42[4] = v35;
          v42[5] = v37;
          v42[6] = v39;
        }
        else
        {

        }
      }
    }
    swift_bridgeObjectRelease(a2);
    v44 = v26[2];
    if (v44)
    {
      sub_10000498C(&qword_100098AC0);
      v45 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v44);
    }
    else
    {
      v45 = &_swiftEmptyDictionarySingleton;
    }
    v197 = v45;
    sub_10001B708((uint64_t)v26, 1, &v197);
    swift_bridgeObjectRelease(v26);
    v46 = v197;
    v197 = &_swiftEmptySetSingleton;
    v177 = v46;
    swift_retain(v46);
    v47 = sub_10000AA5C(a2);
    swift_bridgeObjectRelease(a2);
    v48 = v47[2];
    v175 = v47;
    if (v48)
    {
      swift_bridgeObjectRetain_n(v47, 2);
      *(double *)&a7 = 0.0;
      a2 = (int64_t)(v47 + 5);
      while (1)
      {
        v49 = *(_QWORD *)a2;
        if (!v177[2])
          break;
        v50 = *(_QWORD *)(a2 - 8);
        swift_bridgeObjectRetain_n(*(_QWORD *)a2, 2);
        v51 = sub_1000171E8(v50, v49);
        if ((v52 & 1) == 0)
        {
          swift_bridgeObjectRelease(v49);
          goto LABEL_36;
        }
        v53 = *(_QWORD **)(v177[7] + 8 * v51);
        swift_bridgeObjectRetain(v53);
        swift_bridgeObjectRelease(v49);
LABEL_37:
        v9 = (double **)v53[2];
        swift_bridgeObjectRelease(v49);
        swift_bridgeObjectRelease(v53);
        v54 = __OFADD__(a7, v9);
        a7 += (uint64_t)v9;
        if (v54)
          goto LABEL_140;
        a2 += 16;
        if (!--v48)
        {
          swift_bridgeObjectRelease(v175);
          goto LABEL_41;
        }
      }
      swift_bridgeObjectRetain(*(_QWORD *)a2);
LABEL_36:
      v53 = _swiftEmptyArrayStorage;
      goto LABEL_37;
    }
    swift_bridgeObjectRetain(v47);
    *(double *)&a7 = 0.0;
LABEL_41:
    sub_100066074(v192 & 1, v195);
    if (__OFSUB__(a7, 1))
      break;
    v166 = a7 - 1;
    v167 = v55;
    v168 = v20;
    v174 = v175[2];
    if (!v174)
    {
      v20 = 0.0;
      v163 = v175;
LABEL_137:
      swift_bridgeObjectRelease(v163);
      swift_bridgeObjectRelease(v177);
      result = swift_bridgeObjectRelease(v197);
      *(_QWORD *)v173 = v177;
      *(_QWORD *)(v173 + 8) = v163;
      *(double *)(v173 + 16) = v172;
      *(_QWORD *)(v173 + 24) = v171;
      *(double *)(v173 + 32) = v170;
      *(_QWORD *)(v173 + 40) = v169;
      *(_BYTE *)(v173 + 48) = v192 & 1;
      *(double *)(v173 + 56) = round(v168);
      *(double *)(v173 + 64) = round(v170 + v172 + v167 * (double)v166 + v20);
      return result;
    }
    v193 = UITextFormattingViewControllerFontAttributesComponentKey;
    v187 = a5;
    v56 = 4.0;
    if (v195 == 4)
      v56 = 2.0;
    v186 = v56;
    v57 = 16.0;
    v20 = 0.0;
    if ((v194 & 1) != 0)
      v57 = 0.0;
    v180 = v57;
    LODWORD(v9) = v192;
    v58 = 11.0;
    if ((v192 & 1) != 0)
      v58 = 10.0;
    v181 = v58;
    v59 = 8.0;
    if ((v192 & 1) != 0)
      v60 = 8.0;
    else
      v60 = 12.0;
    if ((v192 & 1) != 0)
      v59 = 6.0;
    v178 = v59;
    v179 = v60;
    swift_bridgeObjectRetain(v175);
    v61 = 0;
    if (v192 & 1 | (v195 == 3))
      v62 = 30.0;
    else
      v62 = 34.0;
    v185 = v62;
    while (1)
    {
      if (v61 >= v175[2])
        goto LABEL_141;
      v176 = v61;
      LODWORD(v9) = (_DWORD)v177;
      if (v177[2])
      {
        v63 = &v175[2 * v61 + 4];
        *(double *)&a7 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
        v64 = *v63;
        v65 = v63[1];
        swift_bridgeObjectRetain(v65);
        v66 = sub_1000171E8(v64, v65);
        if ((v67 & 1) != 0)
        {
          a7 = *(uint64_t *)(v177[7] + 8 * v66);
          swift_bridgeObjectRetain(a7);
        }
        swift_bridgeObjectRelease(v65);
      }
      else
      {
        *(double *)&a7 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
      }
      v184 = *(_QWORD *)(a7 + 16);
      if (v184)
        break;
LABEL_58:
      swift_bridgeObjectRelease(a7);
      v61 = v176 + 1;
      if (v176 + 1 == v174)
      {
        v163 = v175;
        swift_bridgeObjectRelease(v175);
        goto LABEL_137;
      }
    }
    v68 = 0;
    v182 = a7;
    v183 = a7 + 32;
    while (1)
    {
      if (v68 >= *(_QWORD *)(a7 + 16))
      {
        __break(1u);
        goto LABEL_139;
      }
      v188 = v68;
      v69 = *(_QWORD *)(v183 + 16 * v68 + 8);
      if (!((unint64_t)v69 >> 62))
      {
        a7 = *(uint64_t *)((v69 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(*(_QWORD *)(v183 + 16 * v68 + 8));
        if (*(double *)&a7 != 0.0)
          break;
        goto LABEL_127;
      }
      v157 = v69 < 0 ? *(_QWORD *)(v183 + 16 * v68 + 8) : v69 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v69);
      *(double *)&a7 = COERCE_DOUBLE(_CocoaArrayWrapper.endIndex.getter(v157));
      if (*(double *)&a7 != 0.0)
        break;
LABEL_127:
      swift_bridgeObjectRelease(v69);
      v9 = (double **)_swiftEmptyArrayStorage;
LABEL_128:
      v158 = v9[2];
      if (v158)
      {
        v23 = *((double *)v9 + 4);
        v159 = (uint64_t)v158 - 1;
        if (v159)
        {
          v160 = (double *)(v9 + 5);
          do
          {
            v161 = *v160++;
            v162 = v161;
            if (v23 < v161)
              v23 = v162;
            --v159;
          }
          while (v159);
        }
      }
      else
      {
        v23 = 0.0;
      }
      v68 = v188 + 1;
      swift_bridgeObjectRelease(v9);
      v20 = v20 + v23;
      a7 = v182;
      if (v188 + 1 == v184)
        goto LABEL_58;
    }
    v196 = (double *)_swiftEmptyArrayStorage;
    v9 = &v196;
    sub_100013D7C(0, a7 & ~(a7 >> 63), 0);
    if ((a7 & 0x8000000000000000) == 0)
    {
      v70 = 0;
      v9 = (double **)v196;
      v194 = v69 & 0xC000000000000001;
      v189 = v69;
      a5 = *(double *)&a7;
      while (1)
      {
        v71 = v194
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v70, v69)
            : *(id *)(v69 + 8 * v70 + 32);
        v72 = v71;
        v73 = objc_msgSend(v71, "componentKey", v166, *(_QWORD *)&v167, *(_QWORD *)&v168);
        a2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v193);
        v75 = v74;
        v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(v73);
        if (a2 == v76 && v75 == v77)
          break;
        v79 = v77;
        a2 = _stringCompareWithSmolCheck(_:_:expecting:)(a2, v75, v76, v77, 0);
        swift_bridgeObjectRelease(v75);
        swift_bridgeObjectRelease(v79);
        if ((a2 & 1) != 0)
          goto LABEL_91;
        v80 = v195;
        if (v195 - 2 >= 3)
          goto LABEL_94;
        if ((a6 & 1) == 0)
        {
          v81 = 16.0;
          switch(v195)
          {
            case 2u:
LABEL_87:
              v82 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
              objc_msgSend(v82, "_referenceBounds");
              v84 = v83;
              v86 = v85;
              v88 = v87;
              v90 = v89;

              v198.origin.x = v84;
              v198.origin.y = v86;
              v198.size.width = v88;
              v198.size.height = v90;
              if (CGRectGetHeight(v198) > 667.0)
                v91 = v181;
              else
                v91 = 10.0;
              break;
            case 3u:
              v103 = (void *)objc_opt_self(UIScreen);
              v104 = objc_msgSend(v103, "mainScreen");
              objc_msgSend(v104, "_referenceBounds");
              v106 = v105;
              v108 = v107;
              v110 = v109;
              v112 = v111;

              v200.origin.x = v106;
              v200.origin.y = v108;
              v200.size.width = v110;
              v200.size.height = v112;
              if ((CGRectGetHeight(v200) <= 667.0) | v192 & 1)
                v91 = 7.0;
              else
                v91 = 10.0;
              v113 = objc_msgSend(v103, "mainScreen");
              objc_msgSend(v113, "_referenceBounds");
              v115 = v114;
              v117 = v116;
              v119 = v118;
              v121 = v120;

              v201.origin.x = v115;
              v201.origin.y = v117;
              v201.size.width = v119;
              v201.size.height = v121;
              if (v192 & 1 | (CGRectGetHeight(v201) <= 667.0))
                v81 = 10.0;
              else
                v81 = 12.0;
              break;
            case 4u:
              goto LABEL_87;
            default:
              v91 = v180;
              break;
          }
          a2 = v195;
          v132 = (void *)objc_opt_self(UIScreen);
          v133 = objc_msgSend(v132, "mainScreen");
          objc_msgSend(v133, "_referenceBounds");
          v135 = v134;
          v137 = v136;
          v139 = v138;
          v141 = v140;

          v203.origin.x = v135;
          v203.origin.y = v137;
          v203.size.width = v139;
          v203.size.height = v141;
          if ((CGRectGetHeight(v203) <= 667.0) | v192 & 1 | (v195 == 3))
            v142 = 30.0;
          else
            v142 = 34.0;
          v143 = objc_msgSend(v132, "mainScreen");
          objc_msgSend(v143, "_referenceBounds");
          v145 = v144;
          v147 = v146;
          v149 = v148;
          v151 = v150;

          v204.origin.x = v145;
          v204.origin.y = v147;
          v204.size.width = v149;
          v204.size.height = v151;
          Height = CGRectGetHeight(v204);

          if (v195 == 3)
          {
            v153 = 6.0;
            v69 = v189;
            *(double *)&a7 = a5;
            if (Height > 667.0)
              v153 = v178;
          }
          else
          {
            v153 = 8.0;
            v69 = v189;
            *(double *)&a7 = a5;
            if (Height > 667.0)
              v153 = v179;
          }
          v154 = v187 - (v91 + v81) - v142;
          v62 = v185;
          v102 = (v154 - v186 * v153) / v186;
          goto LABEL_119;
        }
        if ((v192 & 1) == 0)
        {
          if (v195 != 3)
          {
            v122 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
            objc_msgSend(v122, "_referenceBounds");
            v124 = v123;
            v126 = v125;
            v128 = v127;
            v130 = v129;

            v202.origin.x = v124;
            v202.origin.y = v126;
            v202.size.width = v128;
            v202.size.height = v130;
            v131 = CGRectGetHeight(v202);

            if (v131 > 667.0)
              v102 = 50.0;
            else
              v102 = 45.0;
            goto LABEL_119;
          }
LABEL_99:

          v102 = 44.0;
          goto LABEL_119;
        }

        v102 = 34.0;
LABEL_119:
        v196 = (double *)v9;
        v156 = (unint64_t)v9[2];
        v155 = (unint64_t)v9[3];
        if (v156 >= v155 >> 1)
        {
          sub_100013D7C(v155 > 1, v156 + 1, 1);
          v9 = (double **)v196;
        }
        ++v70;
        v9[2] = (double *)(v156 + 1);
        *(double *)&v9[v156 + 4] = v102;
        if (a7 == v70)
        {
          swift_bridgeObjectRelease(v69);
          goto LABEL_128;
        }
      }
      swift_bridgeObjectRelease_n(v75, 2);
LABEL_91:
      v80 = v195;
      if (v195 - 2 < 3)
      {
        v92 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
        objc_msgSend(v92, "_referenceBounds");
        v94 = v93;
        v96 = v95;
        v98 = v97;
        v100 = v99;

        v199.origin.x = v94;
        v199.origin.y = v96;
        v199.size.width = v98;
        v199.size.height = v100;
        v101 = CGRectGetHeight(v199);

        v102 = 30.0;
        if (v101 > 667.0)
          v102 = v62;
        goto LABEL_119;
      }
LABEL_94:
      if (v80)
        goto LABEL_99;

      v102 = 45.0;
      goto LABEL_119;
    }
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    if (a2 < 0)
      v165 = a2;
    else
      v165 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
    i = _CocoaArrayWrapper.endIndex.getter(v165);
  }
  __break(1u);
LABEL_147:
  __break(1u);
  result = swift_release(i);
  __break(1u);
  return result;
}

uint64_t sub_10001C6A4(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

void sub_10001C6AC(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_10001C6F0()
{
  char v0;
  double v1;
  id v2;
  double v3;
  CGFloat v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  BOOL v11;
  double v12;
  double v14;
  double v15;
  double v16;
  double v17;
  CGRect v18;

  v2 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
  objc_msgSend(v2, "_referenceBounds");
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;

  v18.origin.x = v4;
  v18.origin.y = v6;
  v18.size.width = v8;
  v18.size.height = v10;
  v11 = CGRectGetHeight(v18) > 667.0;
  v12 = 100.0;
  if (!v11)
    v12 = 90.0;
  if (v12 > v1)
    return 1;
  sub_10000D460(v0);
  if (v14 > v1)
    return 2;
  sub_10000D460(v0);
  if (v15 > v1)
    return 3;
  sub_10000D460(v0);
  if (v16 > v1)
    return 4;
  sub_10000D460(v0);
  if (v17 > v1)
    return 1;
  else
    return 5;
}

uint64_t sub_10001C85C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  double *v5;
  double v6;
  double v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = sub_10001C9B4();
  result = Set.init(minimumCapacity:)(v2, &type metadata for CGFloat, v3);
  v8 = result;
  if (v2)
  {
    v5 = (double *)(a1 + 32);
    do
    {
      v6 = *v5++;
      sub_100014B2C(&v7, v6);
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

char *sub_10001C8CC(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

unint64_t sub_10001C9B4()
{
  unint64_t result;

  result = qword_100098B58;
  if (!qword_100098B58)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_100098B58);
  }
  return result;
}

_BYTE *initializeBufferWithCopyOfBuffer for TFUIConfig(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t _s7ColumnsOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s7ColumnsOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_10001CAE0 + 4 * byte_1000738D5[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10001CB14 + 4 * byte_1000738D0[v4]))();
}

uint64_t sub_10001CB14(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001CB1C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10001CB24);
  return result;
}

uint64_t sub_10001CB30(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10001CB38);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_10001CB3C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001CB44(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001CB50(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_10001CB58(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *_s7ColumnsOMa()
{
  return &_s7ColumnsON;
}

uint64_t destroy for _TextFormattingLayoutView(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)a1);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return sub_10001D9D8(*(_QWORD *)(a1 + 72), *(_BYTE *)(a1 + 80));
}

uint64_t initializeWithCopy for _TextFormattingLayoutView(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  char v7;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  *(_OWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
  v6 = a2[9];
  v7 = *((_BYTE *)a2 + 80);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  sub_10001D97C(v6, v7);
  *(_QWORD *)(a1 + 72) = v6;
  *(_BYTE *)(a1 + 80) = v7;
  return a1;
}

uint64_t *assignWithCopy for _TextFormattingLayoutView(uint64_t *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v2 = a2;
  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = v2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = v2[2];
  a1[3] = v2[3];
  a1[4] = v2[4];
  a1[5] = v2[5];
  *((_BYTE *)a1 + 48) = *((_BYTE *)v2 + 48);
  a1[7] = v2[7];
  a1[8] = v2[8];
  v8 = v2[9];
  LOBYTE(v2) = *((_BYTE *)v2 + 80);
  sub_10001D97C(v8, (char)v2);
  v9 = a1[9];
  v10 = *((_BYTE *)a1 + 80);
  a1[9] = v8;
  *((_BYTE *)a1 + 80) = (_BYTE)v2;
  sub_10001D9D8(v9, v10);
  return a1;
}

__n128 initializeWithTake for _TextFormattingLayoutView(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for _TextFormattingLayoutView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  char v6;
  uint64_t v7;
  char v8;

  swift_bridgeObjectRelease(*(_QWORD *)a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v4);
  v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v6 = *(_BYTE *)(a2 + 80);
  v7 = *(_QWORD *)(a1 + 72);
  v8 = *(_BYTE *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = v6;
  sub_10001D9D8(v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for _TextFormattingLayoutView(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 81))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _TextFormattingLayoutView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 80) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 81) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 81) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for _TextFormattingLayoutView()
{
  return &type metadata for _TextFormattingLayoutView;
}

_QWORD *_s7SectionVwCP(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t _s7SectionVwxx(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

_QWORD *_s7SectionVwca(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

_QWORD *_s7SectionVwta(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for TFFrameTracker(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TFFrameTracker(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s7SectionVMa()
{
  return &_s7SectionVN;
}

unint64_t sub_10001CF50()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100098B80;
  if (!qword_100098B80)
  {
    v1 = sub_100004660(&qword_100098B88);
    sub_10001CFBC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100098B80);
  }
  return result;
}

unint64_t sub_10001CFBC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100098B90;
  if (!qword_100098B90)
  {
    v1 = sub_100004660(&qword_100098B98);
    sub_10001D028();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100098B90);
  }
  return result;
}

unint64_t sub_10001D028()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100098BA0;
  if (!qword_100098BA0)
  {
    v1 = sub_100004660(&qword_100098BA8);
    sub_10001D094();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100098BA0);
  }
  return result;
}

unint64_t sub_10001D094()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100098BB0;
  if (!qword_100098BB0)
  {
    v1 = sub_100004660(&qword_100098BB8);
    sub_10001D118();
    sub_10000966C(&qword_100098BF0, &qword_100098BF8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100098BB0);
  }
  return result;
}

unint64_t sub_10001D118()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100098BC0;
  if (!qword_100098BC0)
  {
    v1 = sub_100004660(&qword_100098BC8);
    sub_10000966C(&qword_100098BD0, &qword_100098BD8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    sub_10000966C(&qword_100098BE0, &qword_100098BE8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100098BC0);
  }
  return result;
}

void *sub_10001D1B4()
{
  return &protocol witness table for Int;
}

uint64_t sub_10001D1C0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100078D44, 1);
}

uint64_t sub_10001D1D0()
{
  return sub_10000966C(&qword_100098C00, &qword_100098C08, (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t sub_10001D200()
{
  unint64_t result;

  result = qword_100098C10;
  if (!qword_100098C10)
  {
    result = swift_getWitnessTable(&unk_100073C24, &_s7ColumnsON);
    atomic_store(result, (unint64_t *)&qword_100098C10);
  }
  return result;
}

uint64_t sub_10001D248@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10000C4D4(a1, v2 + 16, a2);
}

_QWORD *sub_10001D250(_QWORD *a1)
{
  swift_bridgeObjectRetain(*a1);
  return a1;
}

uint64_t sub_10001D278(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 72);
  v4 = *(_BYTE *)(a1 + 80);
  swift_bridgeObjectRetain(*(_QWORD *)a1);
  swift_bridgeObjectRetain(v2);
  sub_10001D97C(v3, v4);
  return a1;
}

uint64_t sub_10001D2CC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  sub_10001D9D8(*(_QWORD *)(v0 + 88), *(_BYTE *)(v0 + 96));
  return swift_deallocObject(v0, 97, 7);
}

uint64_t sub_10001D304@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10000C6A4(a1, v2 + 16, a2);
}

unint64_t sub_10001D30C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100098C60;
  if (!qword_100098C60)
  {
    v1 = sub_100004660(&qword_100098C50);
    sub_10001D378();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100098C60);
  }
  return result;
}

unint64_t sub_10001D378()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100098C68;
  if (!qword_100098C68)
  {
    v1 = sub_100004660(&qword_100098C70);
    sub_10000966C(&qword_100098C78, &qword_100098C80, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100098C68);
  }
  return result;
}

unint64_t sub_10001D3FC()
{
  unint64_t result;

  result = qword_100098C88;
  if (!qword_100098C88)
  {
    result = swift_getWitnessTable(&unk_100073AEC, &_s7SectionVN);
    atomic_store(result, (unint64_t *)&qword_100098C88);
  }
  return result;
}

uint64_t sub_10001D440()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  sub_10001D9D8(*(_QWORD *)(v0 + 96), *(_BYTE *)(v0 + 104));
  return swift_deallocObject(v0, 107, 7);
}

uint64_t sub_10001D478@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10000CD60(a1, v2 + 24, *(_BYTE *)(v2 + 105), *(_BYTE *)(v2 + 106), a2, *(double *)(v2 + 16));
}

unint64_t sub_10001D48C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100098CB8;
  if (!qword_100098CB8)
  {
    v1 = sub_100004660(&qword_100098CC0);
    sub_10001D510();
    sub_10000966C(&qword_100098D28, &qword_10009A9F0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100098CB8);
  }
  return result;
}

unint64_t sub_10001D510()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100098CC8;
  if (!qword_100098CC8)
  {
    v1 = sub_100004660(&qword_100098CD0);
    sub_10001D594();
    sub_10000966C(&qword_100098D18, &qword_100098D20, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100098CC8);
  }
  return result;
}

unint64_t sub_10001D594()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100098CD8;
  if (!qword_100098CD8)
  {
    v1 = sub_100004660(&qword_100098CE0);
    sub_10001D618();
    sub_10000966C(&qword_100098D18, &qword_100098D20, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100098CD8);
  }
  return result;
}

unint64_t sub_10001D618()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100098CE8;
  if (!qword_100098CE8)
  {
    v1 = sub_100004660(&qword_100098CF0);
    sub_10000966C(&qword_100098CF8, &qword_100098D00, (uint64_t)&protocol conformance descriptor for IDView<A, B>);
    sub_10000966C(&qword_100098D08, &qword_100098D10, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100098CE8);
  }
  return result;
}

_QWORD *sub_10001D6B4@<X0>(uint64_t a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  char v4;
  uint64_t v5;
  char v6;

  v2 = sub_10001D92C();
  result = EnvironmentValues.subscript.getter(&v5, &type metadata for TFEffectiveComponentSizeKey, &type metadata for TFEffectiveComponentSizeKey, v2);
  v4 = v6;
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = v4;
  return result;
}

uint64_t sub_10001D708(uint64_t *a1)
{
  char v1;
  unint64_t v2;
  uint64_t v4;
  char v5;

  v1 = *((_BYTE *)a1 + 8);
  v4 = *a1;
  v5 = v1;
  v2 = sub_10001D92C();
  return EnvironmentValues.subscript.setter(&v4, &type metadata for TFEffectiveComponentSizeKey, &type metadata for TFEffectiveComponentSizeKey, v2);
}

double sub_10001D758@<D0>(double *a1@<X8>)
{
  return sub_10000D158((uint64_t (*)(void))sub_10001D8E8, (uint64_t)&type metadata for TFComponentWidthKey, a1);
}

uint64_t sub_10001D76C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000D1C0(a1, a2, a3, a4, (uint64_t (*)(void))sub_10001D8E8, (uint64_t)&type metadata for TFComponentWidthKey);
}

double sub_10001D780@<D0>(double *a1@<X8>)
{
  return sub_10000D158((uint64_t (*)(void))sub_10001D8A4, (uint64_t)&type metadata for TFComponentColumnWidthKey, a1);
}

uint64_t sub_10001D794(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000D1C0(a1, a2, a3, a4, (uint64_t (*)(void))sub_10001D8A4, (uint64_t)&type metadata for TFComponentColumnWidthKey);
}

_QWORD *sub_10001D7A8@<X0>(_BYTE *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_10001D860();
  result = EnvironmentValues.subscript.getter(&v4, &type metadata for TFComponentSpansWidthKey, &type metadata for TFComponentSpansWidthKey, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_10001D7F4(char *a1)
{
  unint64_t v1;
  char v3;

  v3 = *a1;
  v1 = sub_10001D860();
  return EnvironmentValues.subscript.setter(&v3, &type metadata for TFComponentSpansWidthKey, &type metadata for TFComponentSpansWidthKey, v1);
}

double sub_10001D83C(uint64_t a1)
{
  double result;

  *(_BYTE *)(a1 + 176) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

unint64_t sub_10001D860()
{
  unint64_t result;

  result = qword_100098D30;
  if (!qword_100098D30)
  {
    result = swift_getWitnessTable(&unk_100076824, &type metadata for TFComponentSpansWidthKey);
    atomic_store(result, (unint64_t *)&qword_100098D30);
  }
  return result;
}

unint64_t sub_10001D8A4()
{
  unint64_t result;

  result = qword_100098D38;
  if (!qword_100098D38)
  {
    result = swift_getWitnessTable(&unk_1000767EC, &type metadata for TFComponentColumnWidthKey);
    atomic_store(result, (unint64_t *)&qword_100098D38);
  }
  return result;
}

unint64_t sub_10001D8E8()
{
  unint64_t result;

  result = qword_100098D40;
  if (!qword_100098D40)
  {
    result = swift_getWitnessTable(&unk_1000767B4, &type metadata for TFComponentWidthKey);
    atomic_store(result, (unint64_t *)&qword_100098D40);
  }
  return result;
}

unint64_t sub_10001D92C()
{
  unint64_t result;

  result = qword_100098D48;
  if (!qword_100098D48)
  {
    result = swift_getWitnessTable(&unk_10007677C, &type metadata for TFEffectiveComponentSizeKey);
    atomic_store(result, (unint64_t *)&qword_100098D48);
  }
  return result;
}

uint64_t sub_10001D970(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0)
    return swift_retain(result);
  return result;
}

uint64_t sub_10001D97C(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    return swift_retain(result);
  return result;
}

void _s13ComponentViewVwxx(uint64_t a1)
{
  swift_release(*(_QWORD *)a1);
  sub_10001D9CC(*(_QWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 24), *(_BYTE *)(a1 + 25));
  sub_10001D9D8(*(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));

}

uint64_t sub_10001D9CC(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0)
    return swift_release(result);
  return result;
}

uint64_t sub_10001D9D8(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    return swift_release(result);
  return result;
}

uint64_t _s13ComponentViewVwcp(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void *v11;
  id v12;

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = a2[2];
  v7 = *((_BYTE *)a2 + 25);
  v8 = *((unsigned __int8 *)a2 + 24);
  swift_retain(v4);
  sub_10001D970(v6, v8, v7);
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v8;
  *(_BYTE *)(a1 + 25) = v7;
  v9 = a2[4];
  v10 = *((_BYTE *)a2 + 40);
  sub_10001D97C(v9, v10);
  *(_QWORD *)(a1 + 32) = v9;
  *(_BYTE *)(a1 + 40) = v10;
  v11 = (void *)a2[6];
  *(_QWORD *)(a1 + 48) = v11;
  v12 = v11;
  return a1;
}

uint64_t *_s13ComponentViewVwca(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unsigned __int8 v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  void *v16;
  void *v17;
  id v18;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  v6 = a2[2];
  v7 = *((_BYTE *)a2 + 25);
  v8 = *((_BYTE *)a2 + 24);
  sub_10001D970(v6, v8, v7);
  v9 = a1[2];
  v10 = *((_BYTE *)a1 + 25);
  a1[2] = v6;
  v11 = *((unsigned __int8 *)a1 + 24);
  *((_BYTE *)a1 + 24) = v8;
  *((_BYTE *)a1 + 25) = v7;
  sub_10001D9CC(v9, v11, v10);
  v12 = a2[4];
  v13 = *((_BYTE *)a2 + 40);
  sub_10001D97C(v12, v13);
  v14 = a1[4];
  v15 = *((_BYTE *)a1 + 40);
  a1[4] = v12;
  *((_BYTE *)a1 + 40) = v13;
  sub_10001D9D8(v14, v15);
  v16 = (void *)a2[6];
  v17 = (void *)a1[6];
  a1[6] = (uint64_t)v16;
  v18 = v16;

  return a1;
}

__n128 _s13ComponentViewVwtk(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t *_s13ComponentViewVwta(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  void *v13;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  v5 = *((_BYTE *)a2 + 24);
  v6 = *((_BYTE *)a2 + 25);
  v7 = a1[2];
  v8 = *((_BYTE *)a1 + 25);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  v9 = *((unsigned __int8 *)a1 + 24);
  *((_BYTE *)a1 + 24) = v5;
  *((_BYTE *)a1 + 25) = v6;
  sub_10001D9CC(v7, v9, v8);
  v10 = *((_BYTE *)a2 + 40);
  v11 = a1[4];
  v12 = *((_BYTE *)a1 + 40);
  a1[4] = a2[4];
  *((_BYTE *)a1 + 40) = v10;
  sub_10001D9D8(v11, v12);
  v13 = (void *)a1[6];
  a1[6] = a2[6];

  return a1;
}

uint64_t _s13ComponentViewVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s13ComponentViewVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s13ComponentViewVMa()
{
  return &_s13ComponentViewVN;
}

uint64_t sub_10001DC84()
{
  return sub_10001DCB0(&qword_100098D58, &qword_100098D60, (void (*)(void))sub_10001DD14);
}

uint64_t sub_10001DCB0(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100004660(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10001DD14()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100098D68;
  if (!qword_100098D68)
  {
    v1 = sub_100004660(&qword_100098C18);
    sub_10000966C(&qword_100098C38, &qword_100098C28, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_100098D68);
  }
  return result;
}

uint64_t sub_10001DD90(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100078D6C, 1);
}

uint64_t sub_10001DDA8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10001DDD4(unsigned __int8 *a1)
{
  return EnvironmentValues.isEnabled.setter(*a1);
}

uint64_t sub_10001DDF8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

_BYTE *sub_10001DE08(_BYTE *result)
{
  uint64_t v1;

  *result &= ~*(_BYTE *)(v1 + 16) & 1;
  return result;
}

unint64_t sub_10001DE20()
{
  unint64_t result;

  result = qword_100098DC8;
  if (!qword_100098DC8)
  {
    result = swift_getWitnessTable(&unk_10007523C, &type metadata for TFCustomControl);
    atomic_store(result, (unint64_t *)&qword_100098DC8);
  }
  return result;
}

uint64_t sub_10001DE64()
{
  return sub_10001DE88(&qword_100098DD8, &qword_100098DC0, (void (*)(void))sub_10001DEF8, (void (*)(void))sub_10001E18C);
}

uint64_t sub_10001DE88(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100004660(a2);
    a3();
    a4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10001DEF8()
{
  return sub_10001DE88(&qword_100098DE0, &qword_100098DE8, (void (*)(void))sub_10001DF1C, (void (*)(void))sub_10001E098);
}

uint64_t sub_10001DF1C()
{
  return sub_10001DE88(&qword_100098DF0, &qword_100098DF8, (void (*)(void))sub_10001DF40, (void (*)(void))sub_10001DFEC);
}

uint64_t sub_10001DF40()
{
  return sub_10001DE88(&qword_100098E00, &qword_100098E08, (void (*)(void))sub_10001DF64, (void (*)(void))sub_10001DFA8);
}

unint64_t sub_10001DF64()
{
  unint64_t result;

  result = qword_100098E10;
  if (!qword_100098E10)
  {
    result = swift_getWitnessTable(&unk_1000751EC, &type metadata for TFFormattingStylesControl);
    atomic_store(result, (unint64_t *)&qword_100098E10);
  }
  return result;
}

unint64_t sub_10001DFA8()
{
  unint64_t result;

  result = qword_100098E18;
  if (!qword_100098E18)
  {
    result = swift_getWitnessTable(&unk_10007519C, &type metadata for TFFontAttributesControl);
    atomic_store(result, (unint64_t *)&qword_100098E18);
  }
  return result;
}

uint64_t sub_10001DFEC()
{
  return sub_10001DE88(&qword_100098E20, &qword_100098E28, (void (*)(void))sub_10001E010, (void (*)(void))sub_10001E054);
}

unint64_t sub_10001E010()
{
  unint64_t result;

  result = qword_100098E30;
  if (!qword_100098E30)
  {
    result = swift_getWitnessTable(&unk_10007514C, &type metadata for TFFontPickerControl);
    atomic_store(result, (unint64_t *)&qword_100098E30);
  }
  return result;
}

unint64_t sub_10001E054()
{
  unint64_t result;

  result = qword_100098E38;
  if (!qword_100098E38)
  {
    result = swift_getWitnessTable(&unk_1000750FC, &type metadata for TFFontSizeControl);
    atomic_store(result, (unint64_t *)&qword_100098E38);
  }
  return result;
}

uint64_t sub_10001E098()
{
  return sub_10001DE88(&qword_100098E40, &qword_100098E48, (void (*)(void))sub_10001E0BC, (void (*)(void))sub_10001E124);
}

uint64_t sub_10001E0BC()
{
  return sub_10001DE88(&qword_100098E50, &qword_100098E58, (void (*)(void))sub_10001E054, (void (*)(void))sub_10001E0E0);
}

unint64_t sub_10001E0E0()
{
  unint64_t result;

  result = qword_100098E60;
  if (!qword_100098E60)
  {
    result = swift_getWitnessTable(&unk_1000750AC, &type metadata for TFTextAlignmentControl);
    atomic_store(result, (unint64_t *)&qword_100098E60);
  }
  return result;
}

uint64_t sub_10001E124()
{
  return sub_10001DE88(&qword_100098E68, &qword_100098E70, (void (*)(void))sub_10001E0E0, (void (*)(void))sub_10001E148);
}

unint64_t sub_10001E148()
{
  unint64_t result;

  result = qword_100098E78;
  if (!qword_100098E78)
  {
    result = swift_getWitnessTable(&unk_10007505C, &type metadata for TFTextIndentationControl);
    atomic_store(result, (unint64_t *)&qword_100098E78);
  }
  return result;
}

uint64_t sub_10001E18C()
{
  return sub_10001DE88(&qword_100098E80, &qword_100098DA8, (void (*)(void))sub_10001E1B0, (void (*)(void))sub_10001E348);
}

uint64_t sub_10001E1B0()
{
  return sub_10001DE88(&qword_100098E88, &qword_100098DA0, (void (*)(void))sub_10001E1D4, (void (*)(void))sub_10001E280);
}

uint64_t sub_10001E1D4()
{
  return sub_10001DE88(&qword_100098E90, &qword_100098E98, (void (*)(void))sub_10001E1F8, (void (*)(void))sub_10001E23C);
}

unint64_t sub_10001E1F8()
{
  unint64_t result;

  result = qword_100098EA0;
  if (!qword_100098EA0)
  {
    result = swift_getWitnessTable(&unk_10007500C, &type metadata for TFLineHeightControl);
    atomic_store(result, (unint64_t *)&qword_100098EA0);
  }
  return result;
}

unint64_t sub_10001E23C()
{
  unint64_t result;

  result = qword_100098EA8;
  if (!qword_100098EA8)
  {
    result = swift_getWitnessTable(&unk_100074FBC, &type metadata for TFListStylesControl);
    atomic_store(result, (unint64_t *)&qword_100098EA8);
  }
  return result;
}

unint64_t sub_10001E280()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100098EB0;
  if (!qword_100098EB0)
  {
    v1 = sub_100004660(&qword_100098D88);
    sub_100007D90(&qword_100098EB8, type metadata accessor for TFTextColorControl, (uint64_t)&unk_100074F6C);
    sub_10001E304();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100098EB0);
  }
  return result;
}

unint64_t sub_10001E304()
{
  unint64_t result;

  result = qword_100098EC0;
  if (!qword_100098EC0)
  {
    result = swift_getWitnessTable(&unk_100074F1C, &type metadata for TFQuoteLevelControl);
    atomic_store(result, (unint64_t *)&qword_100098EC0);
  }
  return result;
}

uint64_t sub_10001E348()
{
  return sub_10001DE88(&qword_100098EC8, &qword_100098ED0, (void (*)(void))sub_10001E36C, (void (*)(void))sub_10001E418);
}

uint64_t sub_10001E36C()
{
  return sub_10001DE88(&qword_100098ED8, &qword_100098EE0, (void (*)(void))sub_10001E390, (void (*)(void))sub_10001E3D4);
}

unint64_t sub_10001E390()
{
  unint64_t result;

  result = qword_100098EE8;
  if (!qword_100098EE8)
  {
    result = swift_getWitnessTable(&unk_100074ECC, &type metadata for TFBlockquoteControl);
    atomic_store(result, (unint64_t *)&qword_100098EE8);
  }
  return result;
}

unint64_t sub_10001E3D4()
{
  unint64_t result;

  result = qword_100098EF0;
  if (!qword_100098EF0)
  {
    result = swift_getWitnessTable(&unk_100074E7C, &type metadata for TFHighlightControl);
    atomic_store(result, (unint64_t *)&qword_100098EF0);
  }
  return result;
}

unint64_t sub_10001E418()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100098EF8;
  if (!qword_100098EF8)
  {
    v1 = sub_100004660(&qword_100098F00);
    sub_10001E3D4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100098EF8);
  }
  return result;
}

unint64_t sub_10001E47C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100098F08;
  if (!qword_100098F08)
  {
    v1 = sub_100004660(&qword_100098DD0);
    sub_10001DE20();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100098F08);
  }
  return result;
}

uint64_t sub_10001E4E8()
{
  return EnvironmentValues.horizontalSizeClass.getter();
}

uint64_t sub_10001E50C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TFTextColorControl(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001E550(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TFTextColorControl(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001E594(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TFTextColorControl(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10001E5D0(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_BYTE *)(a1 + 33);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_BYTE *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_BYTE *)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 72);
  v9 = *(_BYTE *)(a1 + 80);
  v10 = *(unsigned __int8 *)(a1 + 32);
  swift_retain(*(_QWORD *)(a1 + 8));
  sub_10001D970(v2, v10, v3);
  sub_10001D97C(v4, v5);
  sub_10001D97C(v6, v7);
  sub_10001D97C(v8, v9);
  return a1;
}

uint64_t sub_10001E670(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_BYTE *)(a1 + 33);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_BYTE *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_BYTE *)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 72);
  v9 = *(_BYTE *)(a1 + 80);
  v10 = *(unsigned __int8 *)(a1 + 32);
  swift_release(*(_QWORD *)(a1 + 8));
  sub_10001D9CC(v2, v10, v3);
  sub_10001D9D8(v4, v5);
  sub_10001D9D8(v6, v7);
  sub_10001D9D8(v8, v9);
  return a1;
}

uint64_t sub_10001E710(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_BYTE *)(a1 + 25);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_BYTE *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_BYTE *)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 64);
  v9 = *(_BYTE *)(a1 + 72);
  v12 = *(_QWORD *)(a1 + 96);
  v13 = *(_QWORD *)(a1 + 88);
  v10 = *(unsigned __int8 *)(a1 + 24);
  swift_retain(*(_QWORD *)a1);
  sub_10001D970(v2, v10, v3);
  sub_10001D97C(v4, v5);
  sub_10001D97C(v6, v7);
  sub_10001D97C(v8, v9);
  swift_retain(v12);
  swift_bridgeObjectRetain(v13);
  return a1;
}

uint64_t sub_10001E7D4(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_BYTE *)(a1 + 25);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_BYTE *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_BYTE *)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 64);
  v9 = *(_BYTE *)(a1 + 72);
  v12 = *(_QWORD *)(a1 + 88);
  v13 = *(_QWORD *)(a1 + 96);
  v10 = *(unsigned __int8 *)(a1 + 24);
  swift_release(*(_QWORD *)a1);
  sub_10001D9CC(v2, v10, v3);
  sub_10001D9D8(v4, v5);
  sub_10001D9D8(v6, v7);
  sub_10001D9D8(v8, v9);
  swift_bridgeObjectRelease(v12);
  swift_release(v13);
  return a1;
}

unint64_t sub_10001E89C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100098F20;
  if (!qword_100098F20)
  {
    v1 = sub_100004660(&qword_100098D78);
    sub_10001DE88(&qword_100098F28, &qword_100098D70, (void (*)(void))sub_10001DE64, (void (*)(void))sub_10001E47C);
    sub_10000966C(&qword_100098F30, &qword_100098F38, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyTransformModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100098F20);
  }
  return result;
}

uint64_t sub_10001E940(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

_OWORD *sub_10001E97C(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t type metadata accessor for _UITextFormattingServiceViewController(uint64_t a1)
{
  uint64_t result;

  result = qword_100098F78;
  if (!qword_100098F78)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for _UITextFormattingServiceViewController);
  return result;
}

uint64_t sub_10001E9E0(uint64_t a1)
{
  _QWORD v2[3];

  v2[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[2] = "\b";
  return swift_initClassMetadata2(a1, 0, 3, v2, a1 + qword_10009B388);
}

uint64_t sub_10001EA44()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;
  __objc2_prot *v8;

  v1 = qword_100098F70;
  v2 = *(_QWORD *)&v0[qword_100098F70];
  v3 = v2;
  if (v2 == 1)
  {
    v4 = objc_msgSend(v0, "parentViewController");
    if (v4)
    {
      v5 = v4;
      v8 = &OBJC_PROTOCOL____UITextFormattingHostingViewController;
      v3 = swift_dynamicCastObjCProtocolConditional(v4, 1, &v8);
      if (!v3)

    }
    else
    {
      v3 = 0;
    }
    v6 = *(_QWORD *)&v0[v1];
    *(_QWORD *)&v0[v1] = v3;
    swift_unknownObjectRetain(v3);
    sub_100020614(v6);
  }
  sub_100020624(v2);
  return v3;
}

void sub_10001EAFC(char *a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;

  v5 = qword_100098F60;
  v6 = type metadata accessor for TextFormattingState(0);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  v7 = a3;
  *(_QWORD *)&a1[v5] = sub_1000272B8();
  v8 = qword_100098F68;
  *(_QWORD *)&a1[v8] = objc_msgSend(objc_allocWithZone((Class)UITextFormattingViewControllerConfiguration), "init");
  *(_QWORD *)&a1[qword_100098F70] = 1;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x8000000100077190, "FontPickerUIService/_UITextFormattingServiceViewController.swift", 64, 2, 31, 0);
  __break(1u);
}

char *sub_10001EBCC()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (**v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  void (**v18)();
  uint64_t v19;
  uint64_t v20;
  void (**v21)();
  uint64_t v22;
  uint64_t v23;
  void (**v24)();
  uint64_t v25;
  uint64_t v26;
  void (**v27)();
  _QWORD v29[2];

  v1 = qword_100098F60;
  v2 = type metadata accessor for TextFormattingState(0);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v3 = v0;
  *(_QWORD *)&v0[v1] = sub_1000272B8();
  v4 = qword_100098F68;
  *(_QWORD *)&v3[v4] = objc_msgSend(objc_allocWithZone((Class)UITextFormattingViewControllerConfiguration), "init");
  *(_QWORD *)&v3[qword_100098F70] = 1;
  v5 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
  v6 = swift_retain();
  v7 = ObservedObject.init(wrappedValue:)(v6, v2, v5);
  v9 = v8;

  v29[0] = v7;
  v29[1] = v9;
  swift_retain();
  v10 = (char *)UIHostingController.init(rootView:)(v29);
  v11 = qword_100098F60;
  *(_BYTE *)(*(_QWORD *)&v10[qword_100098F60]
           + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_isInRemotePresentation) = 1;
  v12 = v10;
  swift_retain();
  sub_1000259F0();
  swift_release();
  swift_release();

  v13 = *(_QWORD *)&v10[v11];
  v14 = swift_allocObject(&unk_10008ECE8, 24, 7);
  swift_unknownObjectWeakInit(v14 + 16, v12);
  v15 = (void (**)(uint64_t, uint64_t))(v13
                                               + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_didChangeValue);
  *v15 = sub_100020D90;
  v15[1] = (void (*)(uint64_t, uint64_t))v14;
  swift_release();
  v16 = *(_QWORD *)&v10[v11];
  v17 = swift_allocObject(&unk_10008ECE8, 24, 7);
  swift_unknownObjectWeakInit(v17 + 16, v12);
  v18 = (void (**)())(v16 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_contentSizeDidUpdate);
  *v18 = sub_100020D98;
  v18[1] = (void (*)())v17;
  swift_release();
  v19 = *(_QWORD *)&v10[v11];
  v20 = swift_allocObject(&unk_10008ECE8, 24, 7);
  swift_unknownObjectWeakInit(v20 + 16, v12);
  v21 = (void (**)())(v19 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_pickFont);
  *v21 = sub_100020DB8;
  v21[1] = (void (*)())v20;
  swift_release();
  v22 = *(_QWORD *)&v10[v11];
  v23 = swift_allocObject(&unk_10008ECE8, 24, 7);
  swift_unknownObjectWeakInit(v23 + 16, v12);
  v24 = (void (**)())(v22 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_pickColor);
  *v24 = sub_100020DD8;
  v24[1] = (void (*)())v23;
  swift_release();
  v25 = *(_QWORD *)&v10[v11];
  v26 = swift_allocObject(&unk_10008ECE8, 24, 7);
  swift_unknownObjectWeakInit(v26 + 16, v12);
  v27 = (void (**)())(v25 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_showTypographySettings);
  *v27 = sub_100020DE0;
  v27[1] = (void (*)())v26;
  swift_release();
  return v12;
}

void sub_10001EE88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t Strong;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  Class isa;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[24];

  v4 = a3 + 16;
  swift_beginAccess(a3 + 16, v18, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v4);
  if (Strong)
  {
    v6 = (void *)Strong;
    v7 = (void *)UITextFormattingViewController.ChangeValue._bridgeToObjectiveC()();
    swift_beginAccess(v4, &v17, 0, 0);
    v8 = swift_unknownObjectWeakLoadStrong(v4);
    if (v8)
    {
      v9 = (void *)v8;
      v10 = sub_100021440(a2);
      v12 = v11;

      v13 = sub_10001EA44();
      if (!v13)
      {
LABEL_10:
        sub_100020634(v10, v12);

        return;
      }
      v14 = (void *)v13;
      if (v12 >> 60 == 15)
        isa = 0;
      else
        isa = Data._bridgeToObjectiveC()().super.isa;
    }
    else
    {
      v16 = sub_10001EA44();
      v12 = 0xF000000000000000;
      if (!v16)
      {
        v10 = 0;
        goto LABEL_10;
      }
      v14 = (void *)v16;
      v10 = 0;
      isa = 0;
    }
    objc_msgSend(v14, "_textFormattingDidChangeValue:textAttributesData:", v7, isa);

    swift_unknownObjectRelease(v14);
    goto LABEL_10;
  }
}

void sub_10001EFBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[8];

  v1 = *(_QWORD *)(v0 + qword_100098F60);
  KeyPath = swift_getKeyPath(&unk_100073F70);
  swift_getKeyPath(&unk_100073F98);
  static Published.subscript.getter(v5, v1, KeyPath);
  swift_release();
  swift_release();
  v3 = v5[0];
  swift_bridgeObjectRelease(v5[1]);
  swift_bridgeObjectRelease(v3);
  v4 = swift_getKeyPath(&unk_100073FB8);
  swift_getKeyPath(&unk_100073FE0);
  static Published.subscript.getter(v5, v1, v4);
  swift_release();
  swift_release();
  __asm { BR              X9 }
}

void *sub_10001F0A0(uint64_t a1, char a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  void *v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  void *result;
  void *v13;

  sub_100067118(12, a2);
  v4 = v3;
  v5 = ceil(v2);
  if (qword_1000982A0 != -1)
    swift_once(&qword_1000982A0, sub_100067364);
  if (*(double *)&qword_10009B708 < v5)
    v5 = *(double *)&qword_10009B708;
  v6 = (void *)sub_10001EA44();
  if (!v6
    || (v7 = v6,
        objc_msgSend(v6, "preferredContentSize"),
        v9 = v8,
        v11 = v10,
        result = (void *)swift_unknownObjectRelease(v7),
        v4 != v9)
    || v5 != v11)
  {
    result = (void *)sub_10001EA44();
    if (result)
    {
      v13 = result;
      objc_msgSend(result, "setPreferredContentSize:", v4, v5);
      return (void *)swift_unknownObjectRelease(v13);
    }
  }
  return result;
}

uint64_t sub_10001F180()
{
  uint64_t v0;
  id v1;
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  Class isa;

  v1 = objc_msgSend(objc_allocWithZone((Class)UIFontPickerViewControllerConfiguration), "init");
  objc_msgSend(v1, "setIncludeFaces:", 1);
  objc_msgSend(v1, "setDisplayUsingSystemFont:", 1);
  objc_msgSend(v1, "set_includeDefaultFont:", objc_msgSend(*(id *)(v0 + qword_100098F68), "_includeDefaultFont"));
  v2 = sub_1000256CC();
  v3 = sub_10001EA44();
  if (v3)
  {
    v4 = (void *)v3;
    sub_1000096AC(0, &qword_10009A370, UIFont_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v4, "_presentFontPickerWithConfiguration:selectedFonts:", v1, isa);

    swift_bridgeObjectRelease(v2);
    return swift_unknownObjectRelease(v4);
  }
  else
  {

    return swift_bridgeObjectRelease(v2);
  }
}

void sub_10001F2A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  id v9;
  void *v10;
  void *v11;
  _BYTE v12[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v12, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (void *)Strong;
    v4 = *(_QWORD *)(Strong + qword_100098F60);
    v5 = *(double *)(v4 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_colorPickerRect);
    v6 = *(double *)(v4 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_colorPickerRect + 8);
    v7 = *(double *)(v4 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_colorPickerRect + 16);
    v8 = *(double *)(v4 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_colorPickerRect + 24);
    v9 = sub_100025810();
    v10 = (void *)sub_10001EA44();
    if (v10)
    {
      v11 = v10;
      objc_msgSend(v10, "_presentColorPicker:selectedColor:", v9, v5, v6, v7, v8);

      swift_unknownObjectRelease(v11);
    }
    else
    {

    }
  }
}

void sub_10001F378(uint64_t a1, void (*a2)(void))
{
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  _BYTE v6[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v6, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    a2();

  }
}

void sub_10001F3CC()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v0 = (uint64_t)sub_1000256CC();
  v1 = v0;
  if ((unint64_t)v0 >> 62)
  {
    if (v0 >= 0)
      v0 &= 0xFFFFFFFFFFFFFF8uLL;
    if (_CocoaArrayWrapper.endIndex.getter(v0))
      goto LABEL_3;
LABEL_10:
    swift_bridgeObjectRelease(v1);
    v3 = (void *)objc_opt_self(UIFont);
    objc_msgSend(v3, "systemFontSize");
    v6 = objc_msgSend(v3, "systemFontOfSize:");
    goto LABEL_11;
  }
  if (!*(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_10;
LABEL_3:
  if ((v1 & 0xC000000000000001) != 0)
  {
    v2 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v1);
  }
  else
  {
    if (!*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    v2 = *(id *)(v1 + 32);
  }
  v6 = v2;
  swift_bridgeObjectRelease(v1);
LABEL_11:
  v4 = (void *)sub_10001EA44();
  if (v4)
  {
    v5 = v4;
    objc_msgSend(v4, "_presentTypographySettingsForFont:", v6);

    swift_unknownObjectRelease(v5);
  }
  else
  {

  }
}

char *sub_10001F4EC()
{
  return sub_10001EBCC();
}

void sub_10001F50C(char a1)
{
  void *v1;
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  objc_super v17;

  v17.receiver = v1;
  v17.super_class = (Class)swift_getObjectType(v1);
  objc_msgSendSuper2(&v17, "viewWillAppear:", a1 & 1);
  v3 = objc_msgSend(v1, "view");
  if (!v3)
    goto LABEL_19;
  v4 = v3;
  objc_msgSend(v3, "setBackgroundColor:", 0);

  v5 = objc_msgSend(v1, "view");
  if (!v5)
  {
LABEL_20:
    __break(1u);
    return;
  }
  v6 = v5;
  v7 = objc_msgSend(v5, "subviews");

  v8 = sub_1000096AC(0, (unint64_t *)&unk_10009A380, UIView_ptr);
  v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v8);

  if (!((unint64_t)v9 >> 62))
  {
    if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_5;
LABEL_15:
    swift_bridgeObjectRelease(v9);
    return;
  }
  if (v9 < 0)
    v15 = v9;
  else
    v15 = v9 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v9);
  v16 = _CocoaArrayWrapper.endIndex.getter(v15);
  swift_bridgeObjectRelease(v9);
  if (!v16)
    goto LABEL_15;
LABEL_5:
  if ((v9 & 0xC000000000000001) != 0)
  {
    v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v9);
    goto LABEL_8;
  }
  if (!*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v10 = *(id *)(v9 + 32);
LABEL_8:
  v11 = v10;
  swift_bridgeObjectRelease(v9);
  v12 = objc_opt_self(UIScrollView);
  v13 = (void *)swift_dynamicCastObjCClass(v11, v12);
  if (v13)
  {
    v14 = v13;
    objc_msgSend(v13, "setClipsToBounds:", 0);
    objc_msgSend(v14, "setKeyboardDismissMode:", 2);
  }

}

void sub_10001F6C8(void *a1, uint64_t a2, char a3)
{
  id v4;

  v4 = a1;
  sub_10001F50C(a3);

}

id sub_10001F708()
{
  char *v0;
  char *v1;
  id result;
  void *v3;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t KeyPath;
  double v8;
  uint64_t v9;
  id v10;
  void *v11;
  void *v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  uint64_t v19;
  double v20;
  char v21;
  objc_super v22;

  v1 = v0;
  v22.receiver = v0;
  v22.super_class = (Class)swift_getObjectType(v0);
  objc_msgSendSuper2(&v22, "viewWillLayoutSubviews");
  result = objc_msgSend(v0, "view");
  if (!result)
  {
    __break(1u);
    goto LABEL_17;
  }
  v3 = result;
  objc_msgSend(result, "frame");
  v5 = v4;

  v6 = *(_QWORD *)&v1[qword_100098F60];
  KeyPath = swift_getKeyPath(&unk_1000741F8);
  swift_getKeyPath(&unk_100074220);
  static Published.subscript.getter(&v20, v6, KeyPath);
  swift_release();
  swift_release();
  v8 = v20;
  if (v20 != v5)
  {
    v9 = swift_getKeyPath(&unk_1000741F8);
    swift_getKeyPath(&unk_100074220);
    v20 = v5;
    swift_retain();
    static Published.subscript.setter(&v20, v6, v9);
    sub_1000259F0();
  }
  v10 = objc_msgSend(v1, "parentViewController", v8);
  if (!v10)
  {
    v14 = 0.0;
    goto LABEL_8;
  }
  v11 = v10;
  result = objc_msgSend(v10, "view");
  if (!result)
  {
LABEL_17:
    __break(1u);
    return result;
  }
  v12 = result;
  objc_msgSend(result, "safeAreaInsets");
  v14 = v13;

LABEL_8:
  v15 = swift_getKeyPath(&unk_100074240);
  swift_getKeyPath(&unk_100074268);
  LOBYTE(v20) = v14 > 0.0;
  swift_retain();
  static Published.subscript.setter(&v20, v6, v15);
  if (!objc_msgSend(*(id *)&v1[qword_100098F68], "_isTextAnimationsConfiguration")
    || (*(_BYTE *)(v6 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_isInPopoverPresentation) & 1) != 0)
  {
    v16 = swift_getKeyPath(&unk_100074288);
    swift_getKeyPath(&unk_1000742B0);
    v20 = 0.0;
    v21 = 1;
LABEL_11:
    swift_retain();
    static Published.subscript.setter(&v20, v6, v16);
    return (id)sub_1000259F0();
  }
  objc_msgSend((id)objc_opt_self(UIKeyboard), "sizeForInterfaceOrientation:", objc_msgSend(v1, "interfaceOrientation"));
  v18 = v17 - v14;
  v19 = swift_getKeyPath(&unk_100074288);
  swift_getKeyPath(&unk_1000742B0);
  static Published.subscript.getter(&v20, v6, v19);
  swift_release();
  result = (id)swift_release();
  if ((v21 & 1) != 0 || v20 != v18)
  {
    v16 = swift_getKeyPath(&unk_100074288);
    swift_getKeyPath(&unk_1000742B0);
    v20 = v18;
    v21 = 0;
    goto LABEL_11;
  }
  return result;
}

void sub_10001FA14(void *a1)
{
  id v1;

  v1 = a1;
  sub_10001F708();

}

void sub_10001FA48(void *a1)
{
  id v1;
  objc_super v2;

  v2.receiver = a1;
  v2.super_class = (Class)swift_getObjectType(a1);
  v1 = v2.receiver;
  objc_msgSendSuper2(&v2, "viewDidLayoutSubviews");
  sub_10001EFBC();

}

void sub_10001FA9C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  unsigned __int8 v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (**v11)();
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t KeyPath;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  uint64_t v31;
  _QWORD *v32;

  v2 = v1;
  v3 = *(void **)(v1 + qword_100098F68);
  *(_QWORD *)(v2 + qword_100098F68) = a1;
  v4 = a1;

  v5 = objc_msgSend(v4, "_hasPopoverPresentation");
  v6 = *(_QWORD *)(v2 + qword_100098F60);
  if ((v5 & 1) != 0)
  {
    v7 = (_QWORD *)(v6 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_close);
    v8 = *(_QWORD *)(v6 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_close);
    v9 = *(_QWORD *)(v6 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_close + 8);
    *v7 = 0;
    v7[1] = 0;
  }
  else
  {
    v10 = swift_allocObject(&unk_10008ECE8, 24, 7);
    swift_unknownObjectWeakInit(v10 + 16, v2);
    v11 = (void (**)())(v6 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_close);
    v8 = *(_QWORD *)(v6 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_close);
    v9 = *(_QWORD *)(v6 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_close + 8);
    *v11 = sub_100020C78;
    v11[1] = (void (*)())v10;
  }
  sub_100020C80(v8, v9);
  v12 = objc_msgSend(v4, "groups");
  v13 = sub_1000096AC(0, (unint64_t *)&unk_100098FD0, UITextFormattingViewControllerComponentGroup_ptr);
  v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v12, v13);

  KeyPath = swift_getKeyPath(&unk_100074090);
  swift_getKeyPath(&unk_1000740B8);
  v32 = (_QWORD *)v14;
  swift_retain();
  static Published.subscript.setter(&v32, v6, KeyPath);
  sub_1000259F0();
  v16 = sub_100025DF4();
  v17 = UITextFormattingViewControllerConfiguration.formattingStyles.getter(v16);
  if (v17)
    v18 = (_QWORD *)v17;
  else
    v18 = _swiftEmptyArrayStorage;
  v19 = swift_getKeyPath(&unk_1000740D8);
  swift_getKeyPath(&unk_100074100);
  v32 = v18;
  swift_retain();
  static Published.subscript.setter(&v32, v6, v19);
  v20 = sub_100026C4C();
  v21 = UITextFormattingViewControllerConfiguration._emphasisStyles.getter(v20);
  if (v21)
    v22 = (_QWORD *)v21;
  else
    v22 = _swiftEmptyArrayStorage;
  v23 = swift_getKeyPath(&unk_100074120);
  swift_getKeyPath(&unk_100074148);
  static Published.subscript.getter(&v32, v6, v23);
  swift_release();
  swift_release();
  v24 = (unint64_t)v32;
  v25 = swift_getKeyPath(&unk_100074120);
  swift_getKeyPath(&unk_100074148);
  v32 = v22;
  swift_retain();
  static Published.subscript.setter(&v32, v6, v25);
  sub_1000270C8(v24);
  swift_bridgeObjectRelease(v24);
  LOBYTE(v25) = objc_msgSend(v4, "_useLandscapeLayout");
  v26 = swift_getKeyPath(&unk_100074168);
  swift_getKeyPath(&unk_100074190);
  LOBYTE(v32) = v25;
  swift_retain();
  static Published.subscript.setter(&v32, v6, v26);
  sub_100026020();
  v27 = objc_msgSend(v4, "_includeDefaultFont");
  *(_BYTE *)(v6 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_includeDefaultFont) = v27;
  v28 = objc_msgSend(v4, "_hasPopoverPresentation");
  *(_BYTE *)(v6 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_isInPopoverPresentation) = v28;
  sub_100026020();
  sub_1000259F0();
  v29 = objc_msgSend(v4, "_hasParentViewController");
  *(_BYTE *)(v6 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_hasParentViewController) = v29;
  sub_1000259F0();
  v30 = objc_msgSend(v4, "_isTextAnimationsConfiguration");
  *(_BYTE *)(v6 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_isTextAnimationsUI) = v30;
  sub_100026020();
  LOBYTE(v25) = objc_msgSend(v4, "_isTextViewConfiguration");
  v31 = swift_getKeyPath(&unk_1000741B0);
  swift_getKeyPath(&unk_1000741D8);
  LOBYTE(v32) = v25;
  swift_retain();
  static Published.subscript.setter(&v32, v6, v31);
  sub_10001EFBC();
}

void sub_10001FE64(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  void *v4;
  void *v5;
  _BYTE v6[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v6, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (void *)Strong;
    v4 = (void *)sub_10001EA44();
    if (v4)
    {
      v5 = v4;
      objc_msgSend(v4, "_textFormattingDidFinish");

      swift_unknownObjectRelease(v5);
    }
    else
    {

    }
  }
}

void sub_10001FED8(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  sub_10001FA9C(v4);

}

uint64_t sub_10001FF2C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t KeyPath;
  char *v17;
  uint64_t v19;

  v5 = sub_10000498C(&qword_100098FC8);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v19 - v9;
  v11 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UITextFormattingViewController.FormattingDescriptor._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v15 = *(_QWORD *)&a1[qword_100098F60];
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v10, v14, v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v11);
  KeyPath = swift_getKeyPath(&unk_100074048);
  swift_getKeyPath(&unk_100074070);
  sub_100020BCC((uint64_t)v10, (uint64_t)v8);
  v17 = a1;
  swift_retain();
  static Published.subscript.setter(v8, v15, KeyPath);
  sub_100026140();
  sub_100020C14((uint64_t)v10);

  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_1000200B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v12;

  type metadata accessor for ComponentKey(0);
  v6 = v5;
  v7 = sub_100007D90(&qword_100098630, (uint64_t (*)(uint64_t))type metadata accessor for ComponentKey, (uint64_t)&unk_1000731E4);
  v8 = static Set._unconditionallyBridgeFromObjectiveC(_:)(a3, v6, v7);
  v9 = *(_QWORD *)(a1 + qword_100098F60);
  KeyPath = swift_getKeyPath(&unk_100074000);
  swift_getKeyPath(&unk_100074028);
  v12 = v8;
  swift_retain();
  return static Published.subscript.setter(&v12, v9, KeyPath);
}

void sub_10002016C(void *a1, int a2, void *aBlock)
{
  void (**v4)(_QWORD);
  id v5;

  v4 = (void (**)(_QWORD))_Block_copy(aBlock);
  v5 = a1;
  sub_10001EFBC();
  v4[2](v4);
  _Block_release(v4);

}

void sub_1000201CC(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  NSData v13;
  id v14;
  id v15;
  uint64_t v16;

  if (!a4)
  {
    v14 = a3;
    v15 = a1;
    v16 = sub_10001EA44();
    v10 = 0xF000000000000000;
    if (!v16)
    {
      v8 = 0;
      goto LABEL_9;
    }
    v12 = (void *)v16;
    v8 = 0;
    goto LABEL_7;
  }
  v6 = a3;
  a1;
  v7 = a4;
  v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a4);
  v10 = v9;

  v11 = sub_10001EA44();
  if (v11)
  {
    v12 = (void *)v11;
    if (v10 >> 60 != 15)
    {
      v13.super.isa = Data._bridgeToObjectiveC()().super.isa;
LABEL_8:
      objc_msgSend(v12, "_textFormattingDidChangeValue:textAttributesData:", a3, v13.super.isa);

      swift_unknownObjectRelease(v12);
      goto LABEL_9;
    }
LABEL_7:
    v13.super.isa = 0;
    goto LABEL_8;
  }
LABEL_9:
  sub_100020634(v8, v10);

}

void sub_1000202C8(void *a1)
{
  void *v1;
  void *v2;
  id v3;

  v3 = a1;
  v1 = (void *)sub_10001EA44();
  if (v1)
  {
    v2 = v1;
    objc_msgSend(v1, "_textFormattingDidFinish");

    swift_unknownObjectRelease(v2);
  }
  else
  {

  }
}

void sub_10002032C(void *a1, double a2, double a3, double a4, double a5, uint64_t a6, void *a7)
{
  id v12;
  void *v13;
  void *v14;
  id v15;

  v12 = a7;
  v15 = a1;
  v13 = (void *)sub_10001EA44();
  if (v13)
  {
    v14 = v13;
    objc_msgSend(v13, "_presentColorPicker:selectedColor:", v12, a2, a3, a4, a5);

    swift_unknownObjectRelease(v14);
  }
  else
  {

  }
}

void sub_1000203E0(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  void *v11;
  Class isa;
  id v13;

  v7 = sub_1000096AC(0, &qword_10009A370, UIFont_ptr);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a4, v7);
  v13 = a3;
  v9 = a1;
  v10 = sub_10001EA44();
  if (v10)
  {
    v11 = (void *)v10;
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v11, "_presentFontPickerWithConfiguration:selectedFonts:", v13, isa);

    swift_bridgeObjectRelease(v8);
    swift_unknownObjectRelease(v11);
  }
  else
  {

    swift_bridgeObjectRelease(v8);
  }

}

void sub_1000204B4(void *a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  id v7;

  v4 = a3;
  v7 = a1;
  v5 = (void *)sub_10001EA44();
  if (v5)
  {
    v6 = v5;
    objc_msgSend(v5, "_presentTypographySettingsForFont:", v4);

    swift_unknownObjectRelease(v6);
  }
  else
  {

  }
}

uint64_t sub_100020530()
{
  uint64_t v0;

  swift_release();

  return sub_100020614(*(_QWORD *)(v0 + qword_100098F70));
}

uint64_t sub_10002056C(uint64_t a1)
{
  swift_release();

  return sub_100020614(*(_QWORD *)(a1 + qword_100098F70));
}

void sub_1000205B4()
{
  _swift_stdlib_reportUnimplementedInitializer("FontPickerUIService._UITextFormattingServiceViewController", 58, "init(rootView:)", 15, 0);
  __break(1u);
}

void sub_1000205E0()
{
  _swift_stdlib_reportUnimplementedInitializer("FontPickerUIService._UITextFormattingServiceViewController", 58, "init(coder:rootView:)", 21, 0);
  __break(1u);
}

uint64_t sub_10002060C()
{
  return type metadata accessor for _UITextFormattingServiceViewController(0);
}

uint64_t sub_100020614(uint64_t result)
{
  if (result != 1)
    return swift_unknownObjectRelease();
  return result;
}

uint64_t sub_100020624(uint64_t result)
{
  if (result != 1)
    return swift_unknownObjectRetain();
  return result;
}

uint64_t sub_100020634(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_100020648(result, a2);
  return result;
}

uint64_t sub_100020648(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10002068C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100020AA4(a1, (uint64_t)&unk_100074168, (uint64_t)&unk_100074190, a2);
}

uint64_t sub_1000206A0(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  char v6;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100074168);
  swift_getKeyPath(&unk_100074190);
  v6 = v2;
  swift_retain();
  static Published.subscript.setter(&v6, v3, KeyPath);
  return sub_100026020();
}

uint64_t sub_100020714@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100074048);
  v5 = swift_getKeyPath(&unk_100074070);
  static Published.subscript.getter(a2, v3, KeyPath, v5);
  swift_release(KeyPath);
  return swift_release(v5);
}

uint64_t sub_10002077C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v13;

  v4 = sub_10000498C(&qword_100098FC8);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v13 - v8;
  sub_100020BCC(a1, (uint64_t)&v13 - v8);
  v10 = *a2;
  KeyPath = swift_getKeyPath(&unk_100074048);
  swift_getKeyPath(&unk_100074070);
  sub_100020BCC((uint64_t)v9, (uint64_t)v7);
  swift_retain();
  static Published.subscript.setter(v7, v10, KeyPath);
  sub_100026140();
  return sub_100020C14((uint64_t)v9);
}

uint64_t sub_100020868@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100020990(a1, (uint64_t)&unk_100074120, (uint64_t)&unk_100074148, a2);
}

uint64_t sub_10002087C(unint64_t *a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  uint64_t v6;
  unint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100074120);
  swift_getKeyPath(&unk_100074148);
  swift_bridgeObjectRetain(v2);
  static Published.subscript.getter(&v8, v3, KeyPath);
  swift_release();
  swift_release();
  v5 = v8;
  v6 = swift_getKeyPath(&unk_100074120);
  swift_getKeyPath(&unk_100074148);
  v8 = v2;
  swift_retain();
  static Published.subscript.setter(&v8, v3, v6);
  sub_1000270C8(v5);
  return swift_bridgeObjectRelease(v5);
}

uint64_t sub_100020954@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100020AA4(a1, (uint64_t)&unk_1000741B0, (uint64_t)&unk_1000741D8, a2);
}

uint64_t sub_100020968(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100020B30(a1, a2, a3, a4, (uint64_t)&unk_1000741B0, (uint64_t)&unk_1000741D8);
}

uint64_t sub_10002097C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100020990(a1, (uint64_t)&unk_100074000, (uint64_t)&unk_100074028, a2);
}

uint64_t sub_100020990@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v6 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v8 = swift_getKeyPath(a3);
  static Published.subscript.getter(&v10, v6, KeyPath, v8);
  swift_release(KeyPath);
  result = swift_release(v8);
  *a4 = v10;
  return result;
}

uint64_t sub_100020A08(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100074000);
  v5 = swift_getKeyPath(&unk_100074028);
  v7 = v2;
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_100020A90@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100020AA4(a1, (uint64_t)&unk_100074240, (uint64_t)&unk_100074268, a2);
}

uint64_t sub_100020AA4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, _BYTE *a4@<X8>)
{
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v6 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v8 = swift_getKeyPath(a3);
  static Published.subscript.getter(&v10, v6, KeyPath, v8);
  swift_release(KeyPath);
  result = swift_release(v8);
  *a4 = v10;
  return result;
}

uint64_t sub_100020B1C(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100020B30(a1, a2, a3, a4, (uint64_t)&unk_100074240, (uint64_t)&unk_100074268);
}

uint64_t sub_100020B30(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  char v12;

  v7 = *a1;
  v8 = *a2;
  KeyPath = swift_getKeyPath(a5);
  v10 = swift_getKeyPath(a6);
  v12 = v7;
  swift_retain(v8);
  return static Published.subscript.setter(&v12, v8, KeyPath, v10);
}

uint64_t sub_100020B9C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100020990(a1, (uint64_t)&unk_100074000, (uint64_t)&unk_100074028, a2);
}

uint64_t sub_100020BCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000498C(&qword_100098FC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100020C14(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000498C(&qword_100098FC8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100020C54()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_100020C78()
{
  uint64_t v0;

  sub_10001FE64(v0);
}

uint64_t sub_100020C80(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

uint64_t sub_100020CA0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100020990(a1, (uint64_t)&unk_100074120, (uint64_t)&unk_100074148, a2);
}

uint64_t sub_100020CC8@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100020AA4(a1, (uint64_t)&unk_100074168, (uint64_t)&unk_100074190, a2);
}

uint64_t sub_100020CF0@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100020AA4(a1, (uint64_t)&unk_1000741B0, (uint64_t)&unk_1000741D8, a2);
}

uint64_t sub_100020D14(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100020B30(a1, a2, a3, a4, (uint64_t)&unk_1000741B0, (uint64_t)&unk_1000741D8);
}

uint64_t sub_100020D40@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100020AA4(a1, (uint64_t)&unk_100074240, (uint64_t)&unk_100074268, a2);
}

uint64_t sub_100020D64(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100020B30(a1, a2, a3, a4, (uint64_t)&unk_100074240, (uint64_t)&unk_100074268);
}

void sub_100020D90(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10001EE88(a1, a2, v2);
}

void sub_100020D98()
{
  uint64_t v0;

  sub_10001F378(v0, sub_10001EFBC);
}

void sub_100020DB8()
{
  uint64_t v0;

  sub_10001F378(v0, (void (*)(void))sub_10001F180);
}

void sub_100020DD8()
{
  uint64_t v0;

  sub_10001F2A0(v0);
}

void sub_100020DE0()
{
  uint64_t v0;

  sub_10001F378(v0, sub_10001F3CC);
}

uint64_t sub_100020E00(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  void *ObjectType;

  v6 = sub_100020ED0(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_10001E940((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_10001E940((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_10002178C(v12);
  return v7;
}

uint64_t sub_100020ED0(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_100021088(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v14, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

uint64_t sub_100021088(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_10002111C(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_1000212F4(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_1000212F4(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_10002111C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_100021290(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return &_swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_100021290(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return &_swiftEmptyArrayStorage;
  v4 = sub_10000498C((uint64_t *)&unk_100098FF0);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_1000212F4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000498C((uint64_t *)&unk_100098FF0);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100021440(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  Class isa;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  id v24;

  v1 = a1;
  if (a1)
  {
    if (qword_100098290 != -1)
      swift_once(&qword_100098290, sub_100066DB4);
    v2 = type metadata accessor for Logger(0);
    sub_100021774(v2, (uint64_t)qword_10009B6D8);
    v3 = swift_bridgeObjectRetain_n(v1, 2);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(12, -1);
      v7 = (void *)swift_slowAlloc(32, -1);
      v24 = v7;
      *(_DWORD *)v6 = 136315138;
      if (qword_100098288 != -1)
        swift_once(&qword_100098288, sub_100066D44);
      if (byte_10009B6D0 == 1)
      {
        type metadata accessor for Key(0);
        v9 = v8;
        v10 = sub_100007D90(&qword_100098620, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_100073348);
        v11 = swift_bridgeObjectRetain(v1);
        v12 = Dictionary.description.getter(v11, v9, (char *)&type metadata for Any + 8, v10);
        v14 = v13;
        swift_bridgeObjectRelease(v1);
      }
      else
      {
        v12 = 0;
        v14 = 0xE000000000000000;
      }
      v22 = sub_100020E00(v12, v14, (uint64_t *)&v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v6 + 4, v6 + 12);
      swift_bridgeObjectRelease_n(v1, 2);
      swift_bridgeObjectRelease(v14);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Will attempt to update text attributes %s", v6, 0xCu);
      swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v7, -1, -1);
      swift_slowDealloc(v6, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v1, 2);
    }
    v15 = (void *)objc_opt_self(NSKeyedArchiver);
    type metadata accessor for Key(0);
    sub_100007D90(&qword_100098620, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_100073348);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    v24 = 0;
    v17 = objc_msgSend(v15, "archivedDataWithRootObject:requiringSecureCoding:error:", isa, 1, &v24);

    v18 = v24;
    if (v17)
    {
      v1 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v17);

    }
    else
    {
      v19 = v18;
      v20 = _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_errorRelease(v20);
      return 0;
    }
  }
  return v1;
}

uint64_t sub_100021774(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_10002178C(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_1000217AC()
{
  char *v0;
  id v1;
  id v2;
  void *v3;
  objc_super v4;

  v4.receiver = v0;
  v4.super_class = (Class)swift_getObjectType(v0);
  objc_msgSendSuper2(&v4, "viewDidLoad");
  v1 = objc_msgSend(objc_allocWithZone((Class)_UIFontPickerContentViewController), "init");
  objc_msgSend(v0, "pushViewController:animated:", v1, 0);
  objc_msgSend(v1, "setDelegate:", v0);
  v2 = objc_msgSend(objc_allocWithZone((Class)UIFontPickerViewControllerConfiguration), "init");
  objc_msgSend(v1, "_setConfiguration:", v2);
  objc_msgSend(v0, "setPreferredContentSize:", 480.0, 640.0);

  v3 = *(void **)&v0[OBJC_IVAR____TtC19FontPickerUIService46_UIFontPickerUIServiceFontPickerViewController_contentViewController];
  *(_QWORD *)&v0[OBJC_IVAR____TtC19FontPickerUIService46_UIFontPickerUIServiceFontPickerViewController_contentViewController] = v1;

}

void sub_100021A40(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  NSArray v4;
  id v5;
  Class isa;

  v2 = *(void **)(v1
                + OBJC_IVAR____TtC19FontPickerUIService46_UIFontPickerUIServiceFontPickerViewController_contentViewController);
  if (v2)
  {
    if (a1)
    {
      sub_100021D74();
      v3 = v2;
      v4.super.isa = Array._bridgeToObjectiveC()().super.isa;
    }
    else
    {
      v5 = v2;
      v4.super.isa = 0;
    }
    isa = v4.super.isa;
    objc_msgSend(v2, "_setSelectedFonts:scrollToVisible:");

  }
}

id sub_100021B60(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  id result;

  result = *(id *)(a1
                 + OBJC_IVAR____TtC19FontPickerUIService46_UIFontPickerUIServiceFontPickerViewController_contentViewController);
  if (result)
    return objc_msgSend(result, *a4);
  return result;
}

uint64_t type metadata accessor for _UIFontPickerUIServiceFontPickerViewController()
{
  return objc_opt_self(_TtC19FontPickerUIService46_UIFontPickerUIServiceFontPickerViewController);
}

unint64_t sub_100021D74()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100099150;
  if (!qword_100099150)
  {
    v1 = objc_opt_self(UIFontDescriptor);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100099150);
  }
  return result;
}

uint64_t sub_100021DB0(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v2 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v3 = a1;
    else
      v3 = a1 & 0xFFFFFFFFFFFFFF8;
    v4 = __CocoaSet.startIndex.getter(v3);
    v6 = v5;
    v7 = __CocoaSet.endIndex.getter(v3);
    v9 = static __CocoaSet.Index.== infix(_:_:)(v4, v6, v7, v8);
    swift_bridgeObjectRelease(v7);
    if ((v9 & 1) != 0)
      goto LABEL_6;
    goto LABEL_10;
  }
  result = sub_1000223CC(a1);
  if ((v13 & 1) == 0)
  {
    v6 = v12;
    if (*(_DWORD *)(a1 + 36) == (_DWORD)v12)
    {
      v4 = result;
      if (result == 1 << *(_BYTE *)(a1 + 32))
      {
LABEL_6:
        sub_100022788(v4, v6, v2 != 0);
        return 0;
      }
LABEL_10:
      sub_100022184(v4, v6, v2 != 0, a1);
      v10 = v14;
      sub_100022788(v4, v6, v2 != 0);
      return v10;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for _UIFontPickerUIServiceSceneDelegate()
{
  return objc_opt_self(_TtC19FontPickerUIService35_UIFontPickerUIServiceSceneDelegate);
}

uint64_t type metadata accessor for _UIFontPickerUIServiceSceneDelegate.SecureWindow()
{
  return objc_opt_self(_TtCC19FontPickerUIService35_UIFontPickerUIServiceSceneDelegate12SecureWindow);
}

void sub_100022184(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  void *v4;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  id v15;
  char v16;
  uint64_t v17;
  id v18;
  char v19;
  id v20;
  uint64_t v21;
  void *v22;

  v7 = a1;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if ((a3 & 1) != 0)
      goto LABEL_13;
    if (a1 < 0 || 1 << *(_BYTE *)(a4 + 32) <= a1)
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(a4 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> a1) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
        goto LABEL_20;
      __break(1u);
LABEL_13:
      if (__CocoaSet.Index.age.getter(a1, a2) == *(_DWORD *)(a4 + 36))
      {
        v11 = __CocoaSet.Index.element.getter(v7, a2);
        v21 = v11;
        v12 = sub_100022704();
        swift_unknownObjectRetain(v11);
        swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v12, 7);
        v4 = v22;
        swift_unknownObjectRelease(v11);
        v13 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a4 + 40));
        v14 = -1 << *(_BYTE *)(a4 + 32);
        v7 = v13 & ~v14;
        if (((*(_QWORD *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
        {
          v15 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
          v16 = static NSObject.== infix(_:_:)(v15, v4);

          if ((v16 & 1) == 0)
          {
            v17 = ~v14;
            do
            {
              v7 = (v7 + 1) & v17;
              if (((*(_QWORD *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
                goto LABEL_24;
              v18 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
              v19 = static NSObject.== infix(_:_:)(v18, v4);

            }
            while ((v19 & 1) == 0);
          }

LABEL_20:
          v20 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
          return;
        }
LABEL_24:

        __break(1u);
        goto LABEL_25;
      }
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    __break(1u);
    goto LABEL_23;
  }
  if ((a3 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    return;
  }
  if (a4 < 0)
    v8 = a4;
  else
    v8 = a4 & 0xFFFFFFFFFFFFFF8;
  v9 = __CocoaSet.element(at:)(a1, a2, v8);
  v21 = v9;
  v10 = sub_100022704();
  swift_unknownObjectRetain(v9);
  swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
  swift_unknownObjectRelease(v9);
}

uint64_t sub_1000223CC(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 72);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

void sub_100022454(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  objc_class *ObjCClassFromMetadata;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  id v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  id v36;

  v5 = objc_opt_self(UIWindowScene);
  v6 = swift_dynamicCastObjCClass(a1, v5);
  if (!v6)
    return;
  v7 = v6;
  v8 = a1;
  v9 = objc_msgSend(a2, "userActivities");
  v10 = sub_100022704();
  v11 = sub_100022740();
  v12 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v9, v10, v11);

  v13 = (void *)sub_100021DB0(v12);
  swift_bridgeObjectRelease(v12);
  if (!v13)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(_UIFontPickerUIServiceActivityTypeFontPicker);
    v20 = v21;
    goto LABEL_9;
  }
  v14 = objc_msgSend(v13, "activityType");

  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  v17 = v16;

  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(_UIFontPickerUIServiceActivityTypeFontPicker);
  v20 = v19;
  if (!v17)
  {
LABEL_9:
    swift_bridgeObjectRelease(v20);
    static String._unconditionallyBridgeFromObjectiveC(_:)(_UIFontPickerUIServiceActivityTypeTextFormatting);
    swift_bridgeObjectRelease(v22);
    goto LABEL_10;
  }
  if (v15 == v18 && v17 == v19)
  {
    swift_bridgeObjectRelease(v17);
LABEL_12:
    swift_bridgeObjectRelease(v17);
    v24 = type metadata accessor for _UIFontPickerUIServiceFontPickerViewController();
    ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata(v24);
LABEL_18:
    v36 = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), "init");
    goto LABEL_19;
  }
  v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v17, v18, v19, 0);
  swift_bridgeObjectRelease(v20);
  if ((v23 & 1) != 0)
    goto LABEL_12;
  v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(_UIFontPickerUIServiceActivityTypeTextFormatting);
  v28 = v26;
  if (v15 == v27 && v17 == v26)
  {
    swift_bridgeObjectRelease_n(v17, 2);
LABEL_17:
    ObjCClassFromMetadata = (objc_class *)_UIFontPickerUIServiceTextFormattingViewController;
    goto LABEL_18;
  }
  v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v17, v27, v26, 0);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v28);
  if ((v29 & 1) != 0)
    goto LABEL_17;
LABEL_10:
  v36 = 0;
LABEL_19:
  v30 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for _UIFontPickerUIServiceSceneDelegate.SecureWindow()), "initWithWindowScene:", v7);
  v31 = OBJC_IVAR____TtC19FontPickerUIService35_UIFontPickerUIServiceSceneDelegate_window;
  v32 = *(void **)(v2 + OBJC_IVAR____TtC19FontPickerUIService35_UIFontPickerUIServiceSceneDelegate_window);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC19FontPickerUIService35_UIFontPickerUIServiceSceneDelegate_window) = v30;

  v33 = *(void **)(v2 + v31);
  if (v33)
  {
    objc_msgSend(v33, "setRootViewController:", v36);
    v34 = *(void **)(v2 + v31);
    if (v34)
    {
      v35 = v34;
      objc_msgSend(v35, "makeKeyAndVisible");

    }
  }

}

unint64_t sub_100022704()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100099218;
  if (!qword_100099218)
  {
    v1 = objc_opt_self(NSUserActivity);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100099218);
  }
  return result;
}

unint64_t sub_100022740()
{
  unint64_t result;
  unint64_t v1;

  result = qword_100099220;
  if (!qword_100099220)
  {
    v1 = sub_100022704();
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100099220);
  }
  return result;
}

uint64_t sub_100022788(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease(result);
  return result;
}

id sub_100022794()
{
  unint64_t v0;
  uint64_t ObjCClassFromMetadata;
  id result;

  v0 = sub_100024824();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v0);
  result = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  qword_10009B398 = (uint64_t)result;
  return result;
}

void sub_1000227E8()
{
  void *v0;
  NSString v1;
  NSString v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (qword_1000980D0 != -1)
    swift_once(&qword_1000980D0, sub_100022794);
  v0 = (void *)qword_10009B398;
  v1 = String._bridgeToObjectiveC()();
  v2 = String._bridgeToObjectiveC()();
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v0, "localizedStringForKey:value:table:", v1, v2, v3);

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  qword_10009B3A0 = v5;
  *(_QWORD *)algn_10009B3A8 = v7;
}

void sub_1000228F4()
{
  void *v0;
  NSString v1;
  NSString v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (qword_1000980D0 != -1)
    swift_once(&qword_1000980D0, sub_100022794);
  v0 = (void *)qword_10009B398;
  v1 = String._bridgeToObjectiveC()();
  v2 = String._bridgeToObjectiveC()();
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v0, "localizedStringForKey:value:table:", v1, v2, v3);

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  qword_10009B3B0 = v5;
  *(_QWORD *)algn_10009B3B8 = v7;
}

void sub_100022A00()
{
  void *v0;
  NSString v1;
  NSString v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (qword_1000980D0 != -1)
    swift_once(&qword_1000980D0, sub_100022794);
  v0 = (void *)qword_10009B398;
  v1 = String._bridgeToObjectiveC()();
  v2 = String._bridgeToObjectiveC()();
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v0, "localizedStringForKey:value:table:", v1, v2, v3);

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  qword_10009B3C0 = v5;
  *(_QWORD *)algn_10009B3C8 = v7;
}

void sub_100022B10()
{
  void *v0;
  NSString v1;
  NSString v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (qword_1000980D0 != -1)
    swift_once(&qword_1000980D0, sub_100022794);
  v0 = (void *)qword_10009B398;
  v1 = String._bridgeToObjectiveC()();
  v2 = String._bridgeToObjectiveC()();
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v0, "localizedStringForKey:value:table:", v1, v2, v3);

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  qword_10009B3D0 = v5;
  *(_QWORD *)algn_10009B3D8 = v7;
}

void sub_100022C20()
{
  void *v0;
  NSString v1;
  NSString v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (qword_1000980D0 != -1)
    swift_once(&qword_1000980D0, sub_100022794);
  v0 = (void *)qword_10009B398;
  v1 = String._bridgeToObjectiveC()();
  v2 = String._bridgeToObjectiveC()();
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v0, "localizedStringForKey:value:table:", v1, v2, v3);

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  qword_10009B3E0 = v5;
  *(_QWORD *)algn_10009B3E8 = v7;
}

void sub_100022D2C()
{
  void *v0;
  NSString v1;
  NSString v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (qword_1000980D0 != -1)
    swift_once(&qword_1000980D0, sub_100022794);
  v0 = (void *)qword_10009B398;
  v1 = String._bridgeToObjectiveC()();
  v2 = String._bridgeToObjectiveC()();
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v0, "localizedStringForKey:value:table:", v1, v2, v3);

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  qword_10009B3F0 = v5;
  *(_QWORD *)algn_10009B3F8 = v7;
}

void sub_100022E38()
{
  void *v0;
  NSString v1;
  NSString v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (qword_1000980D0 != -1)
    swift_once(&qword_1000980D0, sub_100022794);
  v0 = (void *)qword_10009B398;
  v1 = String._bridgeToObjectiveC()();
  v2 = String._bridgeToObjectiveC()();
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v0, "localizedStringForKey:value:table:", v1, v2, v3);

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  qword_10009B400 = v5;
  *(_QWORD *)algn_10009B408 = v7;
}

void sub_100022F44()
{
  void *v0;
  NSString v1;
  NSString v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (qword_1000980D0 != -1)
    swift_once(&qword_1000980D0, sub_100022794);
  v0 = (void *)qword_10009B398;
  v1 = String._bridgeToObjectiveC()();
  v2 = String._bridgeToObjectiveC()();
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v0, "localizedStringForKey:value:table:", v1, v2, v3);

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  qword_10009B410 = v5;
  *(_QWORD *)algn_10009B418 = v7;
}

void sub_100023050()
{
  void *v0;
  NSString v1;
  NSString v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (qword_1000980D0 != -1)
    swift_once(&qword_1000980D0, sub_100022794);
  v0 = (void *)qword_10009B398;
  v1 = String._bridgeToObjectiveC()();
  v2 = String._bridgeToObjectiveC()();
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v0, "localizedStringForKey:value:table:", v1, v2, v3);

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  qword_10009B420 = v5;
  *(_QWORD *)algn_10009B428 = v7;
}

void sub_10002315C()
{
  void *v0;
  NSString v1;
  NSString v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (qword_1000980D0 != -1)
    swift_once(&qword_1000980D0, sub_100022794);
  v0 = (void *)qword_10009B398;
  v1 = String._bridgeToObjectiveC()();
  v2 = String._bridgeToObjectiveC()();
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v0, "localizedStringForKey:value:table:", v1, v2, v3);

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  qword_10009B430 = v5;
  *(_QWORD *)algn_10009B438 = v7;
}

void sub_100023268()
{
  void *v0;
  NSString v1;
  NSString v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (qword_1000980D0 != -1)
    swift_once(&qword_1000980D0, sub_100022794);
  v0 = (void *)qword_10009B398;
  v1 = String._bridgeToObjectiveC()();
  v2 = String._bridgeToObjectiveC()();
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v0, "localizedStringForKey:value:table:", v1, v2, v3);

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  qword_10009B440 = v5;
  *(_QWORD *)algn_10009B448 = v7;
}

void sub_100023368()
{
  void *v0;
  NSString v1;
  NSString v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (qword_1000980D0 != -1)
    swift_once(&qword_1000980D0, sub_100022794);
  v0 = (void *)qword_10009B398;
  v1 = String._bridgeToObjectiveC()();
  v2 = String._bridgeToObjectiveC()();
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v0, "localizedStringForKey:value:table:", v1, v2, v3);

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  qword_10009B450 = v5;
  *(_QWORD *)algn_10009B458 = v7;
}

void sub_100023470()
{
  void *v0;
  NSString v1;
  NSString v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (qword_1000980D0 != -1)
    swift_once(&qword_1000980D0, sub_100022794);
  v0 = (void *)qword_10009B398;
  v1 = String._bridgeToObjectiveC()();
  v2 = String._bridgeToObjectiveC()();
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v0, "localizedStringForKey:value:table:", v1, v2, v3);

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  qword_10009B460 = v5;
  *(_QWORD *)algn_10009B468 = v7;
}

void sub_100023580()
{
  void *v0;
  NSString v1;
  NSString v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (qword_1000980D0 != -1)
    swift_once(&qword_1000980D0, sub_100022794);
  v0 = (void *)qword_10009B398;
  v1 = String._bridgeToObjectiveC()();
  v2 = String._bridgeToObjectiveC()();
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v0, "localizedStringForKey:value:table:", v1, v2, v3);

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  qword_10009B470 = v5;
  *(_QWORD *)algn_10009B478 = v7;
}

void sub_100023690()
{
  void *v0;
  NSString v1;
  NSString v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (qword_1000980D0 != -1)
    swift_once(&qword_1000980D0, sub_100022794);
  v0 = (void *)qword_10009B398;
  v1 = String._bridgeToObjectiveC()();
  v2 = String._bridgeToObjectiveC()();
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v0, "localizedStringForKey:value:table:", v1, v2, v3);

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  qword_10009B480 = v5;
  *(_QWORD *)algn_10009B488 = v7;
}

void sub_10002379C()
{
  void *v0;
  NSString v1;
  NSString v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (qword_1000980D0 != -1)
    swift_once(&qword_1000980D0, sub_100022794);
  v0 = (void *)qword_10009B398;
  v1 = String._bridgeToObjectiveC()();
  v2 = String._bridgeToObjectiveC()();
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v0, "localizedStringForKey:value:table:", v1, v2, v3);

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  qword_10009B490 = v5;
  *(_QWORD *)algn_10009B498 = v7;
}

void sub_10002389C()
{
  void *v0;
  NSString v1;
  NSString v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (qword_1000980D0 != -1)
    swift_once(&qword_1000980D0, sub_100022794);
  v0 = (void *)qword_10009B398;
  v1 = String._bridgeToObjectiveC()();
  v2 = String._bridgeToObjectiveC()();
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v0, "localizedStringForKey:value:table:", v1, v2, v3);

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  qword_10009B4A0 = v5;
  *(_QWORD *)algn_10009B4A8 = v7;
}

void sub_1000239AC()
{
  void *v0;
  NSString v1;
  NSString v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (qword_1000980D0 != -1)
    swift_once(&qword_1000980D0, sub_100022794);
  v0 = (void *)qword_10009B398;
  v1 = String._bridgeToObjectiveC()();
  v2 = String._bridgeToObjectiveC()();
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v0, "localizedStringForKey:value:table:", v1, v2, v3);

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  qword_10009B4B0 = v5;
  *(_QWORD *)algn_10009B4B8 = v7;
}

void sub_100023AB8()
{
  void *v0;
  NSString v1;
  NSString v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (qword_1000980D0 != -1)
    swift_once(&qword_1000980D0, sub_100022794);
  v0 = (void *)qword_10009B398;
  v1 = String._bridgeToObjectiveC()();
  v2 = String._bridgeToObjectiveC()();
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v0, "localizedStringForKey:value:table:", v1, v2, v3);

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  qword_10009B4C0 = v5;
  *(_QWORD *)algn_10009B4C8 = v7;
}

void sub_100023BC8()
{
  void *v0;
  NSString v1;
  NSString v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (qword_1000980D0 != -1)
    swift_once(&qword_1000980D0, sub_100022794);
  v0 = (void *)qword_10009B398;
  v1 = String._bridgeToObjectiveC()();
  v2 = String._bridgeToObjectiveC()();
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v0, "localizedStringForKey:value:table:", v1, v2, v3);

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  qword_10009B4D0 = v5;
  *(_QWORD *)algn_10009B4D8 = v7;
}

void sub_100023CD8()
{
  void *v0;
  NSString v1;
  NSString v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (qword_1000980D0 != -1)
    swift_once(&qword_1000980D0, sub_100022794);
  v0 = (void *)qword_10009B398;
  v1 = String._bridgeToObjectiveC()();
  v2 = String._bridgeToObjectiveC()();
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v0, "localizedStringForKey:value:table:", v1, v2, v3);

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  qword_10009B4E0 = v5;
  *(_QWORD *)algn_10009B4E8 = v7;
}

void sub_100023DE8()
{
  void *v0;
  NSString v1;
  NSString v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (qword_1000980D0 != -1)
    swift_once(&qword_1000980D0, sub_100022794);
  v0 = (void *)qword_10009B398;
  v1 = String._bridgeToObjectiveC()();
  v2 = String._bridgeToObjectiveC()();
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v0, "localizedStringForKey:value:table:", v1, v2, v3);

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  qword_10009B4F0 = v5;
  *(_QWORD *)algn_10009B4F8 = v7;
}

void sub_100023EF4()
{
  void *v0;
  NSString v1;
  NSString v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (qword_1000980D0 != -1)
    swift_once(&qword_1000980D0, sub_100022794);
  v0 = (void *)qword_10009B398;
  v1 = String._bridgeToObjectiveC()();
  v2 = String._bridgeToObjectiveC()();
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v0, "localizedStringForKey:value:table:", v1, v2, v3);

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  qword_10009B500 = v5;
  *(_QWORD *)algn_10009B508 = v7;
}

void sub_100024000()
{
  void *v0;
  NSString v1;
  NSString v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (qword_1000980D0 != -1)
    swift_once(&qword_1000980D0, sub_100022794);
  v0 = (void *)qword_10009B398;
  v1 = String._bridgeToObjectiveC()();
  v2 = String._bridgeToObjectiveC()();
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v0, "localizedStringForKey:value:table:", v1, v2, v3);

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  qword_10009B510 = v5;
  *(_QWORD *)algn_10009B518 = v7;
}

void sub_100024110()
{
  void *v0;
  NSString v1;
  NSString v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (qword_1000980D0 != -1)
    swift_once(&qword_1000980D0, sub_100022794);
  v0 = (void *)qword_10009B398;
  v1 = String._bridgeToObjectiveC()();
  v2 = String._bridgeToObjectiveC()();
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v0, "localizedStringForKey:value:table:", v1, v2, v3);

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  qword_10009B520 = v5;
  *(_QWORD *)algn_10009B528 = v7;
}

void sub_100024220()
{
  void *v0;
  NSString v1;
  NSString v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (qword_1000980D0 != -1)
    swift_once(&qword_1000980D0, sub_100022794);
  v0 = (void *)qword_10009B398;
  v1 = String._bridgeToObjectiveC()();
  v2 = String._bridgeToObjectiveC()();
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v0, "localizedStringForKey:value:table:", v1, v2, v3);

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  qword_10009B530 = v5;
  *(_QWORD *)algn_10009B538 = v7;
}

void sub_100024330()
{
  void *v0;
  NSString v1;
  NSString v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (qword_1000980D0 != -1)
    swift_once(&qword_1000980D0, sub_100022794);
  v0 = (void *)qword_10009B398;
  v1 = String._bridgeToObjectiveC()();
  v2 = String._bridgeToObjectiveC()();
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v0, "localizedStringForKey:value:table:", v1, v2, v3);

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  qword_10009B540 = v5;
  *(_QWORD *)algn_10009B548 = v7;
}

void sub_100024430()
{
  void *v0;
  NSString v1;
  NSString v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (qword_1000980D0 != -1)
    swift_once(&qword_1000980D0, sub_100022794);
  v0 = (void *)qword_10009B398;
  v1 = String._bridgeToObjectiveC()();
  v2 = String._bridgeToObjectiveC()();
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v0, "localizedStringForKey:value:table:", v1, v2, v3);

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  qword_10009B550 = v5;
  *(_QWORD *)algn_10009B558 = v7;
}

void sub_10002452C()
{
  void *v0;
  NSString v1;
  NSString v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (qword_1000980D0 != -1)
    swift_once(&qword_1000980D0, sub_100022794);
  v0 = (void *)qword_10009B398;
  v1 = String._bridgeToObjectiveC()();
  v2 = String._bridgeToObjectiveC()();
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v0, "localizedStringForKey:value:table:", v1, v2, v3);

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  qword_10009B560 = v5;
  *(_QWORD *)algn_10009B568 = v7;
}

void sub_10002462C()
{
  void *v0;
  NSString v1;
  NSString v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (qword_1000980D0 != -1)
    swift_once(&qword_1000980D0, sub_100022794);
  v0 = (void *)qword_10009B398;
  v1 = String._bridgeToObjectiveC()();
  v2 = String._bridgeToObjectiveC()();
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v0, "localizedStringForKey:value:table:", v1, v2, v3);

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  qword_10009B570 = v5;
  *(_QWORD *)algn_10009B578 = v7;
}

void sub_100024728()
{
  void *v0;
  NSString v1;
  NSString v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (qword_1000980D0 != -1)
    swift_once(&qword_1000980D0, sub_100022794);
  v0 = (void *)qword_10009B398;
  v1 = String._bridgeToObjectiveC()();
  v2 = String._bridgeToObjectiveC()();
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v0, "localizedStringForKey:value:table:", v1, v2, v3);

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  qword_10009B580 = v5;
  *(_QWORD *)algn_10009B588 = v7;
}

unint64_t sub_100024824()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000992F0;
  if (!qword_1000992F0)
  {
    v1 = objc_opt_self(UIViewController);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000992F0);
  }
  return result;
}

void sub_100024860()
{
  void *v0;
  NSString v1;
  NSString v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (qword_1000980D0 != -1)
    swift_once(&qword_1000980D0, sub_100022794);
  v0 = (void *)qword_10009B398;
  v1 = String._bridgeToObjectiveC()();
  v2 = String._bridgeToObjectiveC()();
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v0, "localizedStringForKey:value:table:", v1, v2, v3);

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  qword_10009B590 = v5;
  *(_QWORD *)algn_10009B598 = v7;
}

void sub_10002496C()
{
  void *v0;
  NSString v1;
  NSString v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (qword_1000980D0 != -1)
    swift_once(&qword_1000980D0, sub_100022794);
  v0 = (void *)qword_10009B398;
  v1 = String._bridgeToObjectiveC()();
  v2 = String._bridgeToObjectiveC()();
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v0, "localizedStringForKey:value:table:", v1, v2, v3);

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  qword_10009B5A0 = v5;
  *(_QWORD *)algn_10009B5A8 = v7;
}

void sub_100024A78()
{
  void *v0;
  NSString v1;
  NSString v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (qword_1000980D0 != -1)
    swift_once(&qword_1000980D0, sub_100022794);
  v0 = (void *)qword_10009B398;
  v1 = String._bridgeToObjectiveC()();
  v2 = String._bridgeToObjectiveC()();
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v0, "localizedStringForKey:value:table:", v1, v2, v3);

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  qword_10009B5B0 = v5;
  *(_QWORD *)algn_10009B5B8 = v7;
}

void sub_100024B84()
{
  void *v0;
  NSString v1;
  NSString v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (qword_1000980D0 != -1)
    swift_once(&qword_1000980D0, sub_100022794);
  v0 = (void *)qword_10009B398;
  v1 = String._bridgeToObjectiveC()();
  v2 = String._bridgeToObjectiveC()();
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v0, "localizedStringForKey:value:table:", v1, v2, v3);

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  qword_10009B5C0 = v5;
  *(_QWORD *)algn_10009B5C8 = v7;
}

void sub_100024C90()
{
  void *v0;
  NSString v1;
  NSString v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (qword_1000980D0 != -1)
    swift_once(&qword_1000980D0, sub_100022794);
  v0 = (void *)qword_10009B398;
  v1 = String._bridgeToObjectiveC()();
  v2 = String._bridgeToObjectiveC()();
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v0, "localizedStringForKey:value:table:", v1, v2, v3);

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  qword_10009B5D0 = v5;
  *(_QWORD *)algn_10009B5D8 = v7;
}

void sub_100024D98()
{
  void *v0;
  NSString v1;
  NSString v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (qword_1000980D0 != -1)
    swift_once(&qword_1000980D0, sub_100022794);
  v0 = (void *)qword_10009B398;
  v1 = String._bridgeToObjectiveC()();
  v2 = String._bridgeToObjectiveC()();
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v0, "localizedStringForKey:value:table:", v1, v2, v3);

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  qword_10009B5E0 = v5;
  *(_QWORD *)algn_10009B5E8 = v7;
}

void sub_100024EA4()
{
  void *v0;
  NSString v1;
  NSString v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (qword_1000980D0 != -1)
    swift_once(&qword_1000980D0, sub_100022794);
  v0 = (void *)qword_10009B398;
  v1 = String._bridgeToObjectiveC()();
  v2 = String._bridgeToObjectiveC()();
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v0, "localizedStringForKey:value:table:", v1, v2, v3);

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  qword_10009B5F0 = v5;
  *(_QWORD *)algn_10009B5F8 = v7;
}

void sub_100024FB0(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100024FF0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10002504C + 4 * byte_100074344[a2]))(0x6E6568707968);
}

uint64_t sub_10002504C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6E6568707968 && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6E6568707968, 0xE600000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE600000000000000);
  return v2 & 1;
}

uint64_t sub_1000250EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  char v15;
  unint64_t v16;
  unint64_t v17;

  v2 = a1 + 56;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 56);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v8 = 0;
  v9 = _swiftEmptyArrayStorage;
  if (!v5)
    goto LABEL_7;
LABEL_4:
  v10 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (i = v10 | (v8 << 6); ; i = __clz(__rbit64(v13)) + (v8 << 6))
  {
    result = sub_10002FA6C(*(id *)(*(_QWORD *)(a1 + 48) + 8 * i));
    if (result == 4)
    {
      if (v5)
        goto LABEL_4;
    }
    else
    {
      v15 = result;
      result = swift_isUniquelyReferenced_nonNull_native(v9);
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_1000137A8(0, v9[2] + 1, 1, v9);
        v9 = (_QWORD *)result;
      }
      v17 = v9[2];
      v16 = v9[3];
      if (v17 >= v16 >> 1)
      {
        result = (uint64_t)sub_1000137A8((_QWORD *)(v16 > 1), v17 + 1, 1, v9);
        v9 = (_QWORD *)result;
      }
      v9[2] = v17 + 1;
      *((_BYTE *)v9 + v17 + 32) = v15;
      if (v5)
        goto LABEL_4;
    }
LABEL_7:
    v12 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v12 >= v6)
      goto LABEL_29;
    v13 = *(_QWORD *)(v2 + 8 * v12);
    ++v8;
    if (!v13)
    {
      v8 = v12 + 1;
      if (v12 + 1 >= v6)
        goto LABEL_29;
      v13 = *(_QWORD *)(v2 + 8 * v8);
      if (!v13)
      {
        v8 = v12 + 2;
        if (v12 + 2 >= v6)
          goto LABEL_29;
        v13 = *(_QWORD *)(v2 + 8 * v8);
        if (!v13)
        {
          v8 = v12 + 3;
          if (v12 + 3 >= v6)
            goto LABEL_29;
          v13 = *(_QWORD *)(v2 + 8 * v8);
          if (!v13)
            break;
        }
      }
    }
LABEL_22:
    v5 = (v13 - 1) & v13;
  }
  v14 = v12 + 4;
  if (v14 >= v6)
  {
LABEL_29:
    swift_release();
    return (uint64_t)v9;
  }
  v13 = *(_QWORD *)(v2 + 8 * v14);
  if (v13)
  {
    v8 = v14;
    goto LABEL_22;
  }
  while (1)
  {
    v8 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v8 >= v6)
      goto LABEL_29;
    v13 = *(_QWORD *)(v2 + 8 * v8);
    ++v14;
    if (v13)
      goto LABEL_22;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_1000252D8()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100074510);
  v2 = swift_getKeyPath(&unk_100074538);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

__n128 sub_100025348@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  char v5;
  __n128 result;
  __int128 v7;
  __int128 v8;
  _OWORD v9[3];
  char v10;
  __int128 v11;

  KeyPath = swift_getKeyPath(&unk_100074438);
  v4 = swift_getKeyPath(&unk_100074460);
  static Published.subscript.getter(v9, v1, KeyPath, v4);
  swift_release(KeyPath);
  swift_release(v4);
  v5 = v10;
  v7 = v9[1];
  result = (__n128)v9[2];
  v8 = v11;
  *(_OWORD *)a1 = v9[0];
  *(_OWORD *)(a1 + 16) = v7;
  *(__n128 *)(a1 + 32) = result;
  *(_BYTE *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 56) = v8;
  return result;
}

uint64_t sub_1000253D8(uint64_t a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  double v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = a1 + 56;
  v2 = *(_BYTE *)(a1 + 32);
  v3 = 1 << v2;
  v4 = -1;
  if (1 << v2 < 64)
    v4 = ~(-1 << (1 << v2));
  v5 = v4 & *(_QWORD *)(a1 + 56);
  if (v5)
  {
    v6 = 0;
    v7 = __clz(__rbit64(v5));
    v8 = (v5 - 1) & v5;
    v9 = (unint64_t)(v3 + 63) >> 6;
  }
  else
  {
    LODWORD(v6) = v2 & 0x3F;
    if (v6 <= 6)
      return 0;
    v9 = (unint64_t)(v3 + 63) >> 6;
    v18 = *(_QWORD *)(a1 + 64);
    if (v18)
    {
      v6 = 1;
    }
    else
    {
      if (v6 < 8)
        return 0;
      v18 = *(_QWORD *)(a1 + 72);
      if (v18)
      {
        v6 = 2;
      }
      else
      {
        v18 = *(_QWORD *)(a1 + 80);
        if (v18)
        {
          v6 = 3;
        }
        else
        {
LABEL_37:
          if (v6 < 9)
            return 0;
          v18 = *(_QWORD *)(a1 + 88);
          if (v18)
          {
            v6 = 4;
          }
          else
          {
            v18 = *(_QWORD *)(a1 + 96);
            if (!v18)
              goto LABEL_43;
            v6 = 5;
          }
        }
      }
    }
LABEL_30:
    v8 = (v18 - 1) & v18;
    v7 = __clz(__rbit64(v18)) + (v6 << 6);
  }
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(double *)(v10 + 8 * v7);
  while (v8)
  {
    v12 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v13 = v12 | (v6 << 6);
LABEL_7:
    if (v11 < *(double *)(v10 + 8 * v13))
      v11 = *(double *)(v10 + 8 * v13);
  }
  v14 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v14 >= v9)
    return *(_QWORD *)&v11;
  v15 = *(_QWORD *)(v1 + 8 * v14);
  ++v6;
  if (v15)
    goto LABEL_25;
  v6 = v14 + 1;
  if (v14 + 1 >= v9)
    return *(_QWORD *)&v11;
  v15 = *(_QWORD *)(v1 + 8 * v6);
  if (v15)
    goto LABEL_25;
  v6 = v14 + 2;
  if (v14 + 2 >= v9)
    return *(_QWORD *)&v11;
  v15 = *(_QWORD *)(v1 + 8 * v6);
  if (v15)
    goto LABEL_25;
  v6 = v14 + 3;
  if (v14 + 3 >= v9)
    return *(_QWORD *)&v11;
  v15 = *(_QWORD *)(v1 + 8 * v6);
  if (v15)
  {
LABEL_25:
    v8 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v6 << 6);
    goto LABEL_7;
  }
  v16 = v14 + 4;
  if (v16 >= v9)
    return *(_QWORD *)&v11;
  v15 = *(_QWORD *)(v1 + 8 * v16);
  if (v15)
  {
    v6 = v16;
    goto LABEL_25;
  }
  while (1)
  {
    v6 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v6 >= v9)
      return *(_QWORD *)&v11;
    v15 = *(_QWORD *)(v1 + 8 * v6);
    ++v16;
    if (v15)
      goto LABEL_25;
  }
  __break(1u);
LABEL_43:
  v19 = 0;
  v20 = 6;
  if (v9 > 6)
    v20 = v9;
  v21 = v20 - 6;
  while (v21 != v19)
  {
    v18 = *(_QWORD *)(a1 + 104 + 8 * v19++);
    if (v18)
    {
      v6 = v19 + 5;
      goto LABEL_30;
    }
  }
  return 0;
}

uint64_t sub_1000255D4()
{
  return sub_10002C0BC((uint64_t)&unk_1000746F0, (uint64_t)&unk_100074718);
}

double sub_1000255E8()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  double v4;

  KeyPath = swift_getKeyPath(&unk_100074558);
  v2 = swift_getKeyPath(&unk_100074580);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_100025658()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1000745A0);
  v2 = swift_getKeyPath(&unk_1000745C8);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

_QWORD *sub_1000256CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  uint64_t v12;
  void *v13;

  v1 = v0;
  v2 = sub_10000498C(&qword_100098FC8);
  __chkstk_darwin(v2);
  v4 = (uint64_t *)((char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = &_swiftEmptySetSingleton;
  KeyPath = swift_getKeyPath(&unk_100074780);
  v6 = swift_getKeyPath(&unk_1000747A8);
  static Published.subscript.getter(v4, v1, KeyPath, v6);
  swift_release(KeyPath);
  swift_release(v6);
  v7 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor(0);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v4, 1, v7))
  {
    sub_1000092D0((uint64_t)v4, &qword_100098FC8);
    v8 = _swiftEmptyArrayStorage;
    v9 = &_swiftEmptySetSingleton;
  }
  else
  {
    v10 = UITextFormattingViewController.FormattingDescriptor.fonts.getter();
    sub_1000092D0((uint64_t)v4, &qword_100098FC8);
    v8 = sub_10002F8E0(v10, (uint64_t)&v13, (SEL *)&selRef_fontName);
    swift_bridgeObjectRelease(v10);
    v9 = v13;
  }
  swift_bridgeObjectRelease(v9);
  return v8;
}

id sub_100025810()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t KeyPath;
  uint64_t v6;
  id result;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = v0;
  v2 = sub_10000498C(&qword_100098FC8);
  __chkstk_darwin(v2);
  v4 = (uint64_t *)((char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  KeyPath = swift_getKeyPath(&unk_100074780);
  swift_getKeyPath(&unk_1000747A8);
  static Published.subscript.getter(v4, v1, KeyPath);
  swift_release();
  swift_release();
  v6 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor(0);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v4, 1, v6))
  {
    sub_1000092D0((uint64_t)v4, &qword_100098FC8);
    return objc_msgSend((id)objc_opt_self(UIColor), "labelColor");
  }
  v8 = UITextFormattingViewController.FormattingDescriptor.textColors.getter();
  result = (id)sub_1000092D0((uint64_t)v4, &qword_100098FC8);
  if (!((unint64_t)v8 >> 62))
  {
    if (*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_6;
LABEL_14:
    swift_bridgeObjectRelease(v8);
    return objc_msgSend((id)objc_opt_self(UIColor), "labelColor");
  }
  if (v8 < 0)
    v11 = v8;
  else
    v11 = v8 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v8);
  v12 = _CocoaArrayWrapper.endIndex.getter(v11);
  result = (id)swift_bridgeObjectRelease(v8);
  if (!v12)
    goto LABEL_14;
LABEL_6:
  if ((v8 & 0xC000000000000001) != 0)
  {
    v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v8);
    goto LABEL_9;
  }
  if (*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v9 = *(id *)(v8 + 32);
LABEL_9:
    v10 = v9;
    swift_bridgeObjectRelease(v8);
    return v10;
  }
  __break(1u);
  return result;
}

NSString sub_1000259BC()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_1000992F8 = (uint64_t)result;
  return result;
}

uint64_t sub_1000259F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  _OWORD v36[4];
  uint64_t v37;
  uint64_t v38;
  void *v39;
  _OWORD v40[4];
  uint64_t v41;

  v1 = v0;
  KeyPath = swift_getKeyPath(&unk_100074480);
  v3 = swift_getKeyPath(&unk_1000744A8);
  static Published.subscript.getter(v40, v1, KeyPath, v3);
  swift_release(KeyPath);
  swift_release(v3);
  v4 = *(_QWORD *)(*(_QWORD *)&v40[0] + 16);
  swift_bridgeObjectRelease(*(_QWORD *)&v40[0]);
  v39 = &_swiftEmptySetSingleton;
  v5 = swift_getKeyPath(&unk_1000744C8);
  v6 = swift_getKeyPath(&unk_1000744F0);
  static Published.subscript.getter(v40, v1, v5, v6);
  swift_release(v5);
  swift_release(v6);
  v7 = *(_QWORD *)&v40[0];
  *(_QWORD *)&v40[0] = _swiftEmptyArrayStorage;
  if ((unint64_t)v7 >> 62)
    goto LABEL_15;
  v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v7);
  for (; v8; v8 = _CocoaArrayWrapper.endIndex.getter(v17))
  {
    v35 = v1;
    v9 = 4;
    while (1)
    {
      v11 = (v7 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9 - 4, v7)
          : *(id *)(v7 + 8 * v9);
      v12 = v11;
      v1 = v9 - 3;
      if (__OFADD__(v9 - 4, 1))
        break;
      *(_QWORD *)&v36[0] = v11;
      sub_10002C67C((id *)v36, (uint64_t)&v39, v4 != 0, &v38);

      v13 = v38;
      if (v38)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        v15 = *(_QWORD *)((*(_QWORD *)&v40[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
        v14 = *(_QWORD *)((*(_QWORD *)&v40[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v15 >= v14 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
        v10 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, v13);
        specialized Array._endMutation()(v10);
      }
      ++v9;
      if (v1 == v8)
      {
        swift_bridgeObjectRelease(v7);
        v16 = *(_QWORD **)&v40[0];
        v1 = v35;
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_15:
    if (v7 < 0)
      v17 = v7;
    else
      v17 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v7);
  }
  swift_bridgeObjectRelease(v7);
  v16 = _swiftEmptyArrayStorage;
LABEL_20:
  swift_bridgeObjectRelease(v7);
  v18 = swift_getKeyPath(&unk_100074510);
  v19 = swift_getKeyPath(&unk_100074538);
  static Published.subscript.getter(v40, v1, v18, v19);
  swift_release(v18);
  swift_release(v19);
  v20 = v40[0];
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_isInPopoverPresentation) & 1) != 0)
    v21 = 0;
  else
    v21 = *(_BYTE *)(v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_hasParentViewController) ^ 1;
  v22 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_useReducedMetrics);
  v23 = swift_getKeyPath(&unk_100074558);
  v24 = swift_getKeyPath(&unk_100074580);
  static Published.subscript.getter(v40, v1, v23, v24);
  swift_release(v23);
  swift_release(v24);
  v25 = *(double *)v40;
  v26 = swift_getKeyPath(&unk_1000745A0);
  v27 = swift_getKeyPath(&unk_1000745C8);
  static Published.subscript.getter(v40, v1, v26, v27);
  swift_release(v26);
  swift_release(v27);
  sub_10001B9E0(v20, (int64_t)v16, v21 & 1, v22, *(double *)v40, SBYTE8(v40[0]), (uint64_t)v40, v25);
  v28 = swift_getKeyPath(&unk_100074438);
  v29 = swift_getKeyPath(&unk_100074460);
  v36[2] = v40[2];
  v36[3] = v40[3];
  v37 = v41;
  v36[0] = v40[0];
  v36[1] = v40[1];
  swift_retain(v1);
  static Published.subscript.setter(v36, v1, v28, v29);
  v30 = v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_contentSizeDidUpdate;
  v31 = *(void (**)(uint64_t))(v1
                                       + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_contentSizeDidUpdate);
  v32 = *(_QWORD *)(v30 + 8);
  v33 = swift_retain(v32);
  v31(v33);
  swift_release(v32);
  return swift_bridgeObjectRelease(v39);
}

uint64_t sub_100025DF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  unint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  unint64_t v14;

  v1 = v0;
  v2 = sub_10000498C(&qword_1000995C0);
  __chkstk_darwin(v2);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000282E0((uint64_t)_swiftEmptyArrayStorage);
  KeyPath = swift_getKeyPath(&unk_1000745E8);
  swift_getKeyPath(&unk_100074610);
  v14 = v5;
  swift_retain();
  static Published.subscript.setter(&v14, v1, KeyPath);
  v7 = OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_renderTask;
  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_renderTask))
  {
    swift_retain();
    Task.cancel()();
    swift_release();
  }
  v8 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v4, 1, 1, v8);
  type metadata accessor for MainActor(0);
  v9 = swift_retain();
  v10 = static MainActor.shared.getter(v9);
  v11 = (_QWORD *)swift_allocObject(&unk_10008ED88, 40, 7);
  v11[2] = v10;
  v11[3] = &protocol witness table for MainActor;
  v11[4] = v1;
  *(_QWORD *)(v1 + v7) = sub_10002C530((uint64_t)v4, (uint64_t)&unk_1000995D0, (uint64_t)v11);
  return swift_release();
}

uint64_t sub_100025F78()
{
  return sub_10002C0BC((uint64_t)&unk_1000744C8, (uint64_t)&unk_1000744F0);
}

uint64_t sub_100025F8C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100020990(a1, (uint64_t)&unk_1000744C8, (uint64_t)&unk_1000744F0, a2);
}

uint64_t sub_100025FA0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v6;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000744C8);
  swift_getKeyPath(&unk_1000744F0);
  v6 = v2;
  swift_bridgeObjectRetain(v2);
  swift_retain();
  static Published.subscript.setter(&v6, v3, KeyPath);
  sub_1000259F0();
  return sub_100025DF4();
}

uint64_t sub_100026020()
{
  uint64_t v0;
  int v1;
  uint64_t KeyPath;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  char v8;
  uint64_t v9;

  v1 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_isTextAnimationsUI);
  KeyPath = swift_getKeyPath(&unk_100074810);
  swift_getKeyPath(&unk_100074838);
  static Published.subscript.getter(&v9, v0, KeyPath);
  swift_release();
  swift_release();
  if ((_BYTE)v9)
    v3 = 4;
  else
    v3 = 2;
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_isInPopoverPresentation))
    v4 = 3;
  else
    v4 = v3;
  if (v1 == 1)
    v5 = v4;
  else
    v5 = v9 & (*(_BYTE *)(v0 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_isInPopoverPresentation) ^ 1);
  v6 = swift_getKeyPath(&unk_100074510);
  swift_getKeyPath(&unk_100074538);
  v8 = v5;
  swift_retain();
  static Published.subscript.setter(&v8, v0, v6);
  return sub_1000259F0();
}

uint64_t sub_100026118()
{
  return sub_100027FD4((uint64_t)&unk_100074810, (uint64_t)&unk_100074838);
}

uint64_t sub_10002612C()
{
  return sub_10002C0BC((uint64_t)&unk_100074738, (uint64_t)&unk_100074760);
}

void sub_100026140()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t KeyPath;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  Swift::Int v62;
  Swift::Int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  id v84;
  id v85;
  _BYTE *v86;
  id v87;
  id v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  _QWORD *v92;
  unint64_t v93;

  v5 = OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_initialUpdateOfRecentFontsCompleted;
  v6 = *(_BYTE *)(v0 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_initialUpdateOfRecentFontsCompleted);
  v7 = (uint64_t)sub_1000256CC();
  v8 = v7;
  if ((v6 & 1) == 0)
  {
    v86 = (_BYTE *)v5;
    v93 = (unint64_t)_swiftEmptyArrayStorage;
    if ((unint64_t)v7 >> 62)
    {
      if (v7 < 0)
        v78 = v7;
      else
        v78 = v7 & 0xFFFFFFFFFFFFFF8;
      swift_retain();
      v11 = _CocoaArrayWrapper.endIndex.getter(v78);
    }
    else
    {
      v11 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_retain();
    }
    v12 = _swiftEmptyArrayStorage;
    if (v11)
    {
      v1 = 0;
      v4 = (_BYTE *)OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_includeDefaultFont;
      v3 = v8 & 0xC000000000000001;
      while (1)
      {
        if (v3)
        {
          v15 = specialized _ArrayBuffer._getElementSlowPath(_:)(v1, v8);
        }
        else
        {
          if ((unint64_t)v1 >= *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_36;
          v15 = (uint64_t)*(id *)(v8 + 8 * v1 + 32);
        }
        v16 = (void *)v15;
        v2 = v1 + 1;
        if (__OFADD__(v1, 1))
          break;
        if ((v4[v89] & 1) != 0 || (v15 = (uint64_t)objc_msgSend((id)v15, "isSystemFont"), (v15 & 1) == 0))
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v15);
          v13 = *(_QWORD *)(v93 + 16);
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v13);
          v14 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v16);
          specialized ContiguousArray._endMutation()(v14);
        }
        else
        {

        }
        ++v1;
        if (v2 == v11)
        {
          v17 = v93;
          v12 = _swiftEmptyArrayStorage;
          goto LABEL_24;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      if (v8 < 0)
        v32 = v8;
      else
        v32 = v8 & 0xFFFFFFFFFFFFFF8;
      if (_CocoaArrayWrapper.endIndex.getter(v32))
        goto LABEL_4;
LABEL_41:
      swift_bridgeObjectRelease(v8);
      v33 = (void *)objc_opt_self(UIFont);
      objc_msgSend(v33, "systemFontSize");
      v10 = objc_msgSend(v33, "systemFontOfSize:");
      goto LABEL_42;
    }
    v17 = (unint64_t)_swiftEmptyArrayStorage;
LABEL_24:
    swift_bridgeObjectRelease(v8);
    swift_release();
    if ((v17 & 0x8000000000000000) != 0 || (v17 & 0x4000000000000000) != 0)
    {
      v79 = swift_bridgeObjectRetain(v17);
      v80 = _CocoaArrayWrapper.endIndex.getter(v79);
      swift_release();
      if (v80)
      {
        v81 = swift_bridgeObjectRetain(v17);
        v18 = _CocoaArrayWrapper.endIndex.getter(v81);
        swift_release();
        if (!v18)
        {
LABEL_34:
          swift_release();
          v93 = (unint64_t)&_swiftEmptySetSingleton;
          KeyPath = swift_getKeyPath(&unk_100074738);
          swift_getKeyPath(&unk_100074760);
          static Published.subscript.getter(&v92, v89, KeyPath);
          swift_release();
          swift_release();
          v28 = (uint64_t)v92;
          v92 = v12;
          sub_10001A2F8(v28);
          v29 = (uint64_t)v92;
          v30 = sub_10002F8E0((uint64_t)v92, (uint64_t)&v93, (SEL *)&selRef_familyName);
          swift_bridgeObjectRelease(v29);
          v31 = swift_getKeyPath(&unk_100074738);
          swift_getKeyPath(&unk_100074760);
          v92 = v30;
          swift_retain();
          static Published.subscript.setter(&v92, v89, v31);
          v86[v89] = 1;
          swift_bridgeObjectRelease(v93);
          return;
        }
        v93 = (unint64_t)_swiftEmptyArrayStorage;
        specialized ContiguousArray.reserveCapacity(_:)(v18);
        if ((v18 & 0x8000000000000000) == 0)
        {
LABEL_28:
          v19 = 0;
          do
          {
            if ((v17 & 0xC000000000000001) != 0)
              v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v19, v17);
            else
              v20 = *(id *)(v17 + 8 * v19 + 32);
            v21 = v20;
            ++v19;
            v22 = objc_msgSend(v20, "fontDescriptor");
            v23 = objc_msgSend(objc_allocWithZone((Class)_UIFontPickerFontInfo), "initWithFontDescriptor:", v22);

            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v24);
            v25 = *(_QWORD *)(v93 + 16);
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v25);
            v26 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v25, v23);
            specialized ContiguousArray._endMutation()(v26);
          }
          while (v18 != v19);
          v12 = (_QWORD *)v93;
          goto LABEL_34;
        }
        __break(1u);
      }
    }
    else
    {
      v18 = *(_QWORD *)(v17 + 16);
      if (v18)
      {
        v93 = (unint64_t)_swiftEmptyArrayStorage;
        specialized ContiguousArray.reserveCapacity(_:)(v18);
        goto LABEL_28;
      }
    }
    swift_release();
    return;
  }
  if ((unint64_t)v7 >> 62)
    goto LABEL_37;
  if (!*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_41;
LABEL_4:
  if ((v8 & 0xC000000000000001) != 0)
  {
    v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v8);
  }
  else
  {
    if (!*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_84;
    }
    v9 = *(id *)(v8 + 32);
  }
  v85 = v9;
  swift_bridgeObjectRelease(v8);
  v10 = v85;
LABEL_42:
  v87 = v10;
  if (objc_msgSend(v10, "isSystemFont")
    && *(_BYTE *)(v89 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_includeDefaultFont) != 1)
  {

    return;
  }
  v34 = swift_getKeyPath(&unk_100074738);
  swift_getKeyPath(&unk_100074760);
  static Published.subscript.getter(&v93, v89, v34);
  swift_release();
  swift_release();
  v35 = v93;
  v4 = v87;
  v36 = sub_10002FF68(v35, v4);
  swift_bridgeObjectRelease(v35);

  if ((v36 & 1) != 0)
    goto LABEL_71;
  v37 = objc_msgSend(v4, "fontDescriptor");
  v38 = objc_msgSend(objc_allocWithZone((Class)_UIFontPickerFontInfo), "initWithFontDescriptor:", v37);

  v39 = swift_getKeyPath(&unk_100074738);
  swift_getKeyPath(&unk_100074760);
  static Published.subscript.getter(&v93, v89, v39);
  swift_release();
  swift_release();
  v40 = v93;
  v41 = v38;
  v2 = sub_1000301B4(v40, v41);
  swift_bridgeObjectRelease(v40);

  if (v2)
  {
    v42 = swift_getKeyPath(&unk_100074738);
    swift_getKeyPath(&unk_100074760);
    static Published.subscript.getter(&v93, v89, v42);
    swift_release();
    swift_release();
    v43 = v93;
    v92 = (_QWORD *)v93;
    v88 = v4;
    v44 = sub_10000498C(&qword_100098B10);
    v45 = swift_allocObject(v44, 40, 7);
    *(_OWORD *)(v45 + 16) = xmmword_1000738A0;
    *(_QWORD *)(v45 + 32) = v2;
    v93 = v45;
    specialized Array._endMutation()(v45);
    v46 = v93;
    v91 = v93;
    v47 = swift_allocObject(v44, 40, 7);
    *(_OWORD *)(v47 + 16) = xmmword_1000738A0;
    *(_QWORD *)(v47 + 32) = v41;
    v93 = v47;
    specialized Array._endMutation()(v47);
    v48 = v93;
    v90 = v93;
    v84 = v41;
    v49 = (id)v2;
    v50 = sub_10000498C(&qword_100098398);
    v51 = sub_10000966C(&qword_100099658, &qword_100098398, (uint64_t)&protocol conformance descriptor for [A]);
    v52 = sub_10000966C(&qword_100098B68, &qword_100098398, (uint64_t)&protocol conformance descriptor for [A]);
    v53 = sub_100030374();
    RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)(&v93, &v91, &v90, 0x7FFFFFFFFFFFFFFFLL, v50, v50, v50, v51, v52, v52, v53);
    swift_bridgeObjectRelease(v43);
    swift_bridgeObjectRelease(v46);
    swift_bridgeObjectRelease(v48);
    v54 = v93;
    v55 = swift_getKeyPath(&unk_100074738);
    swift_getKeyPath(&unk_100074760);
    v92 = (_QWORD *)v54;
    swift_retain();
    static Published.subscript.setter(&v92, v89, v55);

    return;
  }
  v56 = sub_10000498C(&qword_100098B10);
  v57 = swift_allocObject(v56, 40, 7);
  *(_OWORD *)(v57 + 16) = xmmword_1000738A0;
  *(_QWORD *)(v57 + 32) = v41;
  v93 = v57;
  specialized Array._endMutation()(v57);
  v58 = v93;
  v59 = swift_getKeyPath(&unk_100074738);
  swift_getKeyPath(&unk_100074760);
  v8 = (uint64_t)v41;
  static Published.subscript.getter(&v93, v89, v59);
  swift_release();
  swift_release();
  v60 = v93;
  v93 = v58;
  sub_10001A2F8(v60);
  v1 = v93;
  v3 = v93 >> 62;
  if (!(v93 >> 62))
  {
    if (*(uint64_t *)((v93 & 0xFFFFFFFFFFFFF8) + 0x10) >= 7)
      v61 = 7;
    else
      v61 = *(_QWORD *)((v93 & 0xFFFFFFFFFFFFF8) + 0x10);
    if ((v93 & 0xC000000000000001) == 0)
      goto LABEL_56;
    goto LABEL_53;
  }
LABEL_84:
  if (v1 < 0)
    v65 = v1;
  else
    v65 = v1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v1);
  v64 = _CocoaArrayWrapper.endIndex.getter(v65);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRetain(v1);
  v66 = _CocoaArrayWrapper.endIndex.getter(v65);
  v76 = swift_bridgeObjectRelease(v1);
  if (v66 < 0)
  {
    __break(1u);
    goto LABEL_89;
  }
  if (v64 >= 7)
    v82 = 7;
  else
    v82 = v64;
  if (v64 >= 0)
    v61 = v82;
  else
    v61 = 7;
  swift_bridgeObjectRetain(v1);
  v83 = _CocoaArrayWrapper.endIndex.getter(v65);
  swift_bridgeObjectRelease(v1);
  if (v83 < v61)
    __break(1u);
  if ((v1 & 0xC000000000000001) != 0)
  {
LABEL_53:
    if (v61)
    {
      sub_1000096AC(0, &qword_1000986D0, _UIFontPickerFontInfo_ptr);
      v62 = 0;
      do
      {
        v63 = v62 + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(v62);
        v62 = v63;
      }
      while (v61 != v63);
    }
  }
LABEL_56:
  if (v3)
  {
    if (v1 < 0)
      v67 = v1;
    else
      v67 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v65 = _CocoaArrayWrapper.subscript.getter(0, v61, v67);
    v66 = v68;
    v64 = v69;
    v2 = v70;
    swift_bridgeObjectRelease_n(v1, 2);
    if ((v2 & 1) == 0)
      goto LABEL_63;
LABEL_64:
    v72 = type metadata accessor for __ContiguousArrayStorageBase(0);
    v73 = swift_unknownObjectRetain_n(v65, 2);
    v74 = (_QWORD *)swift_dynamicCastClass(v73, v72);
    if (!v74)
    {
      swift_unknownObjectRelease(v65);
      v74 = _swiftEmptyArrayStorage;
    }
    v75 = v74[2];
    v76 = swift_release();
    if (!__OFSUB__(v2 >> 1, v64))
    {
      v76 = v65;
      if (v75 == (v2 >> 1) - v64)
      {
        v71 = (_QWORD *)swift_dynamicCastClass(v65, v72);
        if (!v71)
        {
          swift_unknownObjectRelease(v65);
          v71 = _swiftEmptyArrayStorage;
        }
        goto LABEL_70;
      }
      goto LABEL_90;
    }
LABEL_89:
    __break(1u);
LABEL_90:
    swift_unknownObjectRelease(v76);
    goto LABEL_63;
  }
  v64 = 0;
  v65 = v1 & 0xFFFFFFFFFFFFFF8;
  v66 = (v1 & 0xFFFFFFFFFFFFFF8) + 32;
  v2 = (2 * v61) | 1;
  if ((v2 & 1) != 0)
    goto LABEL_64;
LABEL_63:
  v71 = sub_100013A78(v65, v66, v64, v2);
LABEL_70:
  swift_unknownObjectRelease(v65);
  v77 = swift_getKeyPath(&unk_100074738);
  swift_getKeyPath(&unk_100074760);
  v93 = (unint64_t)v71;
  swift_retain();
  static Published.subscript.setter(&v93, v89, v77);

LABEL_71:
}

uint64_t sub_100026BE8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100074780);
  v4 = swift_getKeyPath(&unk_1000747A8);
  static Published.subscript.getter(a1, v1, KeyPath, v4);
  swift_release(KeyPath);
  return swift_release(v4);
}

uint64_t sub_100026C4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t KeyPath;
  uint64_t v13;
  char *v14;
  uint64_t (*v15)(char *, char *, uint64_t);
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t result;
  char v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;

  v1 = v0;
  v2 = sub_10000498C(&qword_1000995F8);
  v43 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AttributeContainer(0);
  v41 = *(_QWORD *)(v5 - 8);
  v42 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UITextFormattingViewController.FormattingStyle(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_100074480);
  swift_getKeyPath(&unk_1000744A8);
  static Published.subscript.getter(&v44, v0, KeyPath);
  swift_release();
  swift_release();
  v13 = v44[2];
  if (v13)
  {
    v14 = (char *)v44 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v39 = *(_QWORD *)(v9 + 72);
    v40 = v9;
    v15 = *(uint64_t (**)(char *, char *, uint64_t))(v9 + 16);
    v37 = v0;
    v38 = v15;
    v36 = v44;
    swift_bridgeObjectRetain(v44);
    v16 = _swiftEmptyArrayStorage;
    do
    {
      v17 = v38(v11, v14, v8);
      UITextFormattingViewController.FormattingStyle.attributes.getter(v17);
      v18 = swift_getKeyPath(&unk_100074690);
      v19 = type metadata accessor for AttributeScopes.UIKitAttributes(0);
      v20 = sub_100007D90(&qword_100099600, (uint64_t (*)(uint64_t))&type metadata accessor for AttributeScopes.UIKitAttributes, (uint64_t)&protocol conformance descriptor for AttributeScopes.UIKitAttributes);
      AttributeContainer.subscript.getter(v18, v19, v20);
      swift_release();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v7, v42);
      v21 = swift_getKeyPath(&unk_1000746C0);
      v22 = sub_10002FF24();
      ScopedAttributeContainer.subscript.getter(&v44, v21, v2, v22);
      swift_release();
      (*(void (**)(char *, uint64_t))(v43 + 8))(v4, v2);
      v23 = v44;
      if (v44)
      {
        objc_msgSend(v44, "pointSize");
        v25 = v24;

        (*(void (**)(char *, uint64_t))(v40 + 8))(v11, v8);
        if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
          v16 = sub_10001369C(0, v16[2] + 1, 1, v16);
        v27 = v16[2];
        v26 = v16[3];
        if (v27 >= v26 >> 1)
          v16 = sub_10001369C((_QWORD *)(v26 > 1), v27 + 1, 1, v16);
        v16[2] = v27 + 1;
        v16[v27 + 4] = v25;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v40 + 8))(v11, v8);
      }
      v14 += v39;
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease_n(v36, 2);
    v1 = v37;
  }
  else
  {
    swift_bridgeObjectRelease(v44);
    v16 = _swiftEmptyArrayStorage;
  }
  v28 = sub_10001C85C((uint64_t)v16);
  swift_bridgeObjectRelease(v16);
  if (*(_QWORD *)(v28 + 16))
  {
    v29 = sub_1000253D8(v28);
    v31 = v30;
    result = swift_bridgeObjectRelease(v28);
    v33 = v31 & 1;
  }
  else
  {
    result = swift_bridgeObjectRelease(v28);
    v29 = 0;
    v33 = 1;
  }
  v34 = v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_largestFontSizeInFormattingStyles;
  *(_QWORD *)v34 = v29;
  *(_BYTE *)(v34 + 8) = v33;
  return result;
}

uint64_t sub_100026FE0()
{
  return sub_10002C0BC((uint64_t)&unk_100074480, (uint64_t)&unk_1000744A8);
}

uint64_t sub_100026FF4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  AttributeScopes.uiKit.getter();
  result = type metadata accessor for AttributeScopes.UIKitAttributes(0);
  *a1 = result;
  return result;
}

void sub_100027020()
{
  AttributeScopes.UIKitAttributes.font.getter();
  __break(1u);
}

uint64_t sub_100027038@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100020990(a1, (uint64_t)&unk_100074480, (uint64_t)&unk_1000744A8, a2);
}

uint64_t sub_10002704C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v6;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100074480);
  swift_getKeyPath(&unk_1000744A8);
  v6 = v2;
  swift_bridgeObjectRetain(v2);
  swift_retain();
  static Published.subscript.setter(&v6, v3, KeyPath);
  return sub_100026C4C();
}

uint64_t sub_1000270C8(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = v1;
  KeyPath = swift_getKeyPath(&unk_100074858);
  swift_getKeyPath(&unk_100074880);
  static Published.subscript.getter(&v11, v2, KeyPath);
  swift_release();
  swift_release();
  v5 = v11;
  LOBYTE(a1) = sub_100012FEC(v11, a1);
  result = swift_bridgeObjectRelease(v5);
  if ((a1 & 1) == 0)
  {
    if (qword_100098268 != -1)
      swift_once(&qword_100098268, sub_10002E7A8);
    v7 = qword_10009B650;
    v8 = swift_getKeyPath(&unk_100074858);
    swift_getKeyPath(&unk_100074880);
    static Published.subscript.getter(&v11, v2, v8);
    swift_release();
    swift_release();
    v9 = v11;
    v11 = v7;
    swift_bridgeObjectRetain(v7);
    sub_10001A304(v9);
    v10 = *(_QWORD *)(v2 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_allHighlightStyles);
    *(_QWORD *)(v2 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_allHighlightStyles) = v11;
    swift_bridgeObjectRelease(v10);
    return sub_100025DF4();
  }
  return result;
}

uint64_t sub_10002720C()
{
  return sub_10002C0BC((uint64_t)&unk_100074858, (uint64_t)&unk_100074880);
}

uint64_t sub_100027220()
{
  return sub_100027FD4((uint64_t)&unk_1000747C8, (uint64_t)&unk_1000747F0);
}

id sub_100027234()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState____lazy_storage___configForRecents;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState____lazy_storage___configForRecents);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState____lazy_storage___configForRecents);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)UIFontPickerViewControllerConfiguration), "init");
    objc_msgSend(v4, "setIncludeFaces:", 1);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

uint64_t sub_1000272B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  _QWORD *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  _OWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  id v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  char v118;

  v1 = v0;
  v2 = type metadata accessor for NSNotificationCenter.Publisher(0);
  v115 = *(_QWORD *)(v2 - 8);
  v116 = v2;
  __chkstk_darwin(v2);
  v114 = (char *)&v83 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10000498C(&qword_100099650);
  v112 = *(_QWORD *)(v4 - 8);
  v113 = v4;
  __chkstk_darwin(v4);
  v111 = (char *)&v83 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10000498C(&qword_100099648);
  v109 = *(_QWORD *)(v6 - 8);
  v110 = v6;
  __chkstk_darwin(v6);
  v108 = (char *)&v83 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10000498C(&qword_100098758);
  v106 = *(_QWORD *)(v8 - 8);
  v107 = v8;
  __chkstk_darwin(v8);
  v105 = (char *)&v83 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = sub_10000498C(&qword_100099640);
  v103 = *(_QWORD *)(v104 - 8);
  __chkstk_darwin(v104);
  v102 = (char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = sub_10000498C(&qword_100099638);
  v100 = *(_QWORD *)(v101 - 8);
  __chkstk_darwin(v101);
  v99 = (char *)&v83 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = sub_10000498C(&qword_100099630);
  v97 = *(_QWORD *)(v98 - 8);
  __chkstk_darwin(v98);
  v96 = (char *)&v83 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = sub_10000498C(&qword_100099628);
  v94 = *(_QWORD *)(v95 - 8);
  __chkstk_darwin(v95);
  v93 = (char *)&v83 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = sub_10000498C(&qword_100099620);
  v91 = *(_QWORD *)(v92 - 8);
  __chkstk_darwin(v92);
  v90 = (char *)&v83 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = sub_10000498C(&qword_100099618);
  v88 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89);
  v87 = (char *)&v83 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = sub_10000498C(&qword_100098FC8);
  v16 = __chkstk_darwin(v86);
  v85 = (uint64_t)&v83 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v19 = (char *)&v83 - v18;
  v84 = sub_10000498C(&qword_100098738);
  v20 = *(_QWORD *)(v84 - 8);
  __chkstk_darwin(v84);
  v22 = (char *)&v83 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = sub_10000498C(&qword_100098750);
  v23 = *(_QWORD *)(v83 - 8);
  __chkstk_darwin(v83);
  v25 = (char *)&v83 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_10000498C(&qword_100099610);
  v27 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v29 = (char *)&v83 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = v0 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState__groups;
  v117 = _swiftEmptyArrayStorage;
  v31 = sub_10000498C(&qword_1000993E0);
  Published.init(initialValue:)(&v117, v31);
  (*(void (**)(uint64_t, char *, uint64_t))(v27 + 32))(v30, v29, v26);
  v32 = v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState__useLandscapeLayout;
  LOBYTE(v117) = 0;
  Published.init(initialValue:)(&v117, &type metadata for Bool);
  v33 = *(void (**)(uint64_t, char *, uint64_t))(v23 + 32);
  v34 = v83;
  v33(v32, v25, v83);
  v35 = v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState__recentFonts;
  v117 = _swiftEmptyArrayStorage;
  v36 = sub_10000498C(&qword_100098398);
  Published.init(initialValue:)(&v117, v36);
  (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))(v35, v22, v84);
  v37 = v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState__formattingDescriptor;
  v38 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v19, 1, 1, v38);
  v39 = v85;
  sub_10000928C((uint64_t)v19, v85, &qword_100098FC8);
  v40 = v87;
  Published.init(initialValue:)(v39, v86);
  sub_1000092D0((uint64_t)v19, &qword_100098FC8);
  (*(void (**)(uint64_t, char *, uint64_t))(v88 + 32))(v37, v40, v89);
  v41 = v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState__formattingStyles;
  v117 = _swiftEmptyArrayStorage;
  v42 = sub_10000498C(&qword_1000993F8);
  v43 = v90;
  Published.init(initialValue:)(&v117, v42);
  (*(void (**)(uint64_t, char *, uint64_t))(v91 + 32))(v41, v43, v92);
  v44 = v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState__emphasisStyles;
  v117 = _swiftEmptyArrayStorage;
  v45 = sub_10000498C(&qword_100098B70);
  v46 = v93;
  Published.init(initialValue:)(&v117, v45);
  (*(void (**)(uint64_t, char *, uint64_t))(v94 + 32))(v44, v46, v95);
  v47 = v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState__isFormattingUITextView;
  LOBYTE(v117) = 0;
  Published.init(initialValue:)(&v117, &type metadata for Bool);
  v33(v47, v25, v34);
  v48 = v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState__disabledComponents;
  v117 = &_swiftEmptySetSingleton;
  v49 = sub_10000498C(&qword_100099410);
  v50 = v96;
  Published.init(initialValue:)(&v117, v49);
  (*(void (**)(uint64_t, char *, uint64_t))(v97 + 32))(v48, v50, v98);
  *(_BYTE *)(v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_isTextAnimationsUI) = 0;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_isInRemotePresentation) = 0;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_isInPopoverPresentation) = 0;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_hasParentViewController) = 0;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_useReducedMetrics) = 0;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_includeDefaultFont) = 0;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_initialUpdateOfRecentFontsCompleted) = 0;
  v51 = v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_cancellables;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_cancellables) = &_swiftEmptySetSingleton;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState____lazy_storage___configForRecents) = 0;
  v52 = v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState__layout;
  sub_10001B9E0(0, (int64_t)_swiftEmptyArrayStorage, 0, 0, 0.0, 1, (uint64_t)&v117, 0.0);
  v53 = v99;
  Published.init(initialValue:)(&v117, &type metadata for TextFormattingLayout);
  (*(void (**)(uint64_t, char *, uint64_t))(v100 + 32))(v52, v53, v101);
  v54 = v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState__uiConfig;
  LOBYTE(v117) = 0;
  v55 = v102;
  Published.init(initialValue:)(&v117, &type metadata for TFUIConfig);
  (*(void (**)(uint64_t, char *, uint64_t))(v103 + 32))(v54, v55, v104);
  v56 = v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState__availableWidth;
  sub_100067118(6, 0);
  v117 = v57;
  v58 = v105;
  Published.init(initialValue:)(&v117, &type metadata for CGFloat);
  (*(void (**)(uint64_t, char *, uint64_t))(v106 + 32))(v56, v58, v107);
  v59 = v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState__idealHeight;
  v117 = 0;
  v118 = 1;
  v60 = sub_10000498C(&qword_100099430);
  v61 = v108;
  Published.init(initialValue:)(&v117, v60);
  (*(void (**)(uint64_t, char *, uint64_t))(v109 + 32))(v59, v61, v110);
  v62 = v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState__hasParentBottomSafeAreaInset;
  LOBYTE(v117) = 0;
  Published.init(initialValue:)(&v117, &type metadata for Bool);
  v33(v62, v25, v34);
  v63 = (_OWORD *)(v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_colorPickerRect);
  *v63 = 0u;
  v63[1] = 0u;
  v64 = v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_largestFontSizeInFormattingStyles;
  *(_QWORD *)v64 = 0;
  *(_BYTE *)(v64 + 8) = 1;
  v65 = OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_allHighlightStyles;
  if (qword_100098268 != -1)
    swift_once(&qword_100098268, sub_10002E7A8);
  v66 = qword_10009B650;
  *(_QWORD *)(v1 + v65) = qword_10009B650;
  v67 = (_QWORD *)(v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_didChangeValue);
  *v67 = nullsub_1;
  v67[1] = 0;
  v68 = (_QWORD *)(v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_close);
  *v68 = 0;
  v68[1] = 0;
  v69 = (_QWORD *)(v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_contentSizeDidUpdate);
  *v69 = nullsub_1;
  v69[1] = 0;
  v70 = (_QWORD *)(v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_pickFont);
  *v70 = nullsub_1;
  v70[1] = 0;
  v71 = (_QWORD *)(v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_pickColor);
  *v71 = nullsub_1;
  v71[1] = 0;
  v72 = (_QWORD *)(v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_showTypographySettings);
  *v72 = nullsub_1;
  v72[1] = 0;
  v73 = v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState__highlightPreviewImages;
  swift_bridgeObjectRetain(v66);
  v117 = (_QWORD *)sub_1000282E0((uint64_t)_swiftEmptyArrayStorage);
  v74 = sub_10000498C((uint64_t *)&unk_100099440);
  v75 = v111;
  Published.init(initialValue:)(&v117, v74);
  (*(void (**)(uint64_t, char *, uint64_t))(v112 + 32))(v73, v75, v113);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_renderTask) = 0;
  v76 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_100098208 != -1)
    swift_once(&qword_100098208, sub_1000259BC);
  v77 = v114;
  NSNotificationCenter.publisher(for:object:)(qword_1000992F8, 0);

  v78 = swift_unownedRetainStrong(v1);
  swift_unownedRetain(v78);
  swift_release();
  v79 = swift_allocObject(&unk_10008EDD8, 24, 7);
  *(_QWORD *)(v79 + 16) = v1;
  v80 = sub_100007D90(&qword_100099668, (uint64_t (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Publisher, (uint64_t)&protocol conformance descriptor for NSNotificationCenter.Publisher);
  v81 = v116;
  Publisher<>.sink(receiveValue:)(sub_100030418, v79, v116, v80);
  swift_release();
  (*(void (**)(char *, uint64_t))(v115 + 8))(v77, v81);
  swift_beginAccess(v51, &v117, 33, 0);
  AnyCancellable.store(in:)(v51);
  swift_endAccess(&v117);
  swift_release();
  sub_100027E00();
  return v1;
}

void sub_100027E00()
{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;

  v1 = sub_100027234();
  v2 = (id)_UIFontPickerLoadRecentsMatchingConfigurationForSuite(v1, 0);

  if (v2)
  {
    v6 = 0;
    v3 = sub_1000096AC(0, &qword_1000986D0, _UIFontPickerFontInfo_ptr);
    static Array._conditionallyBridgeFromObjectiveC(_:result:)(v2, &v6, v3);

    v4 = v6;
    if (v6)
    {
      KeyPath = swift_getKeyPath(&unk_100074738);
      swift_getKeyPath(&unk_100074760);
      v6 = v4;
      swift_retain();
      static Published.subscript.setter(&v6, v0, KeyPath);
      sub_100026140();
    }
  }
}

double sub_100027EC8@<D0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  double v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100074558);
  v5 = swift_getKeyPath(&unk_100074580);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  result = v7;
  *a2 = v7;
  return result;
}

uint64_t sub_100027F44(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v6;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100074558);
  swift_getKeyPath(&unk_100074580);
  v6 = v2;
  swift_retain();
  static Published.subscript.setter(&v6, v3, KeyPath);
  return sub_1000259F0();
}

uint64_t sub_100027FC0()
{
  return sub_100027FD4((uint64_t)&unk_1000748A0, (uint64_t)&unk_1000748C8);
}

uint64_t sub_100027FD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath(a1);
  v5 = swift_getKeyPath(a2);
  static Published.subscript.getter(&v7, v2, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  return v7;
}

uint64_t sub_10002803C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  char v7;
  uint64_t v8;
  char v9;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000745A0);
  v5 = swift_getKeyPath(&unk_1000745C8);
  static Published.subscript.getter(&v8, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  v7 = v9;
  *(_QWORD *)a2 = v8;
  *(_BYTE *)(a2 + 8) = v7;
  return result;
}

uint64_t sub_1000280C0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v7;
  char v8;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  v4 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000745A0);
  swift_getKeyPath(&unk_1000745C8);
  v7 = v2;
  v8 = v3;
  swift_retain();
  static Published.subscript.setter(&v7, v4, KeyPath);
  return sub_1000259F0();
}

_QWORD *sub_100028144()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;

  v15 = &_swiftEmptySetSingleton;
  v0 = sub_1000256CC();
  v1 = (uint64_t)sub_10002F8E0((uint64_t)v0, (uint64_t)&v15, (SEL *)&selRef_familyName);
  swift_bridgeObjectRelease(v0);
  if (!((unint64_t)v1 >> 62))
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v2)
      goto LABEL_3;
LABEL_16:
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v15);
    return _swiftEmptyArrayStorage;
  }
  if (v1 < 0)
    v14 = v1;
  else
    v14 = v1 & 0xFFFFFFFFFFFFFF8;
  v2 = _CocoaArrayWrapper.endIndex.getter(v14);
  if (!v2)
    goto LABEL_16;
LABEL_3:
  result = (_QWORD *)sub_100013DD8(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    v4 = 0;
    do
    {
      if ((v1 & 0xC000000000000001) != 0)
        v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v1);
      else
        v5 = *(id *)(v1 + 8 * v4 + 32);
      v6 = v5;
      v7 = objc_msgSend(v5, "familyName");
      v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
      v10 = v9;

      v12 = _swiftEmptyArrayStorage[2];
      v11 = _swiftEmptyArrayStorage[3];
      if (v12 >= v11 >> 1)
        sub_100013DD8(v11 > 1, v12 + 1, 1);
      ++v4;
      _swiftEmptyArrayStorage[2] = v12 + 1;
      v13 = &_swiftEmptyArrayStorage[2 * v12];
      v13[4] = v8;
      v13[5] = v10;
    }
    while (v2 != v4);
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

unint64_t sub_1000282E0(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000498C(&qword_100098B50);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (void **)(a1 + 48);
  while (1)
  {
    v6 = (uint64_t)*(v5 - 2);
    v7 = (uint64_t)*(v5 - 1);
    v8 = *v5;
    swift_bridgeObjectRetain(v7);
    v9 = v8;
    result = sub_1000171E8(v6, v7);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v3[6] + 16 * result);
    *v12 = v6;
    v12[1] = v7;
    *(_QWORD *)(v3[7] + 8 * result) = v9;
    v13 = v3[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v3[2] = v15;
    v5 += 3;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000283F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000498C(&qword_100098F48);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10000928C(v7, (uint64_t)&v14, &qword_100099690);
    v8 = v14;
    result = sub_1000172B0(v14);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v4[6] + 8 * result) = v8;
    result = (unint64_t)sub_10001E97C(&v15, (_OWORD *)(v4[7] + 32 * result));
    v11 = v4[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4[2] = v13;
    v7 += 40;
    if (!--v5)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100028524()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;

  v0 = (unint64_t)sub_1000256CC();
  v1 = v0;
  if (v0 >> 62)
    goto LABEL_12;
  v2 = *(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v0);
  for (; v2; v2 = _CocoaArrayWrapper.endIndex.getter(v10))
  {
    v3 = 4;
    while (1)
    {
      v4 = (v1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3 - 4, v1)
         : *(id *)(v1 + 8 * v3);
      v5 = v4;
      v6 = v3 - 3;
      if (__OFADD__(v3 - 4, 1))
        break;
      v7 = objc_msgSend(v4, "fontDescriptor");
      v8 = objc_msgSend(v7, "symbolicTraits");

      v9 = (v8 >> 1) & 1;
      if ((v8 & 2) == 0)
      {
        ++v3;
        if (v6 != v2)
          continue;
      }
      goto LABEL_17;
    }
    __break(1u);
LABEL_12:
    if (v1 < 0)
      v10 = v1;
    else
      v10 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
  }
  v9 = 0;
LABEL_17:
  swift_bridgeObjectRelease_n(v1, 2);
  return v9;
}

uint64_t sub_10002863C(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t result;
  id v28;
  id v29;
  void *v30;
  void *v31;
  void (*v32)(char *, unint64_t);
  uint64_t v33;
  uint64_t inited;
  NSString *v35;
  id v36;
  unint64_t v37;
  char v39[72];

  v3 = v1;
  v5 = type metadata accessor for UITextFormattingViewController.ChangeValue(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v39[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = (uint64_t)sub_1000256CC();
  v10 = v9;
  v11 = (unint64_t)v9 >> 62;
  if ((a1 & 1) != 0)
  {
    if (v11)
    {
      if (v9 >= 0)
        v9 &= 0xFFFFFFFFFFFFFF8uLL;
      if (_CocoaArrayWrapper.endIndex.getter(v9))
        goto LABEL_4;
    }
    else if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_4:
      if ((v10 & 0xC000000000000001) != 0)
      {
        v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v10);
        goto LABEL_7;
      }
      if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        v12 = *(id *)(v10 + 32);
LABEL_7:
        v13 = v12;
        swift_bridgeObjectRelease(v10);
        goto LABEL_18;
      }
      __break(1u);
      goto LABEL_48;
    }
    swift_bridgeObjectRelease(v10);
    v16 = (void *)objc_opt_self(UIFont);
    objc_msgSend(v16, "systemFontSize");
    v13 = objc_msgSend(v16, "systemFontOfSize:");
LABEL_18:
    v17 = objc_msgSend(v13, "fontDescriptor");
    v18 = objc_msgSend(v17, "symbolicTraits");

    if ((v18 & 2) != 0)
      goto LABEL_19;
    goto LABEL_30;
  }
  if (v11)
  {
    if (v9 >= 0)
      v9 &= 0xFFFFFFFFFFFFFF8uLL;
    if (_CocoaArrayWrapper.endIndex.getter(v9))
    {
LABEL_10:
      if ((v10 & 0xC000000000000001) == 0)
      {
        if (!*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          goto LABEL_50;
        }
        v14 = *(id *)(v10 + 32);
        goto LABEL_13;
      }
LABEL_48:
      v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v10);
LABEL_13:
      v15 = v14;
      swift_bridgeObjectRelease(v10);
      goto LABEL_29;
    }
  }
  else if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_10;
  }
  swift_bridgeObjectRelease(v10);
  v23 = (void *)objc_opt_self(UIFont);
  objc_msgSend(v23, "systemFontSize");
  v15 = objc_msgSend(v23, "systemFontOfSize:");
LABEL_29:
  v24 = objc_msgSend(v15, "fontDescriptor");
  v25 = objc_msgSend(v24, "symbolicTraits");

  if ((v25 & 2) == 0)
  {
LABEL_19:
    v19 = v3;
    v20 = (uint64_t)sub_1000256CC();
    v2 = v20;
    if ((unint64_t)v20 >> 62)
    {
      if (v20 >= 0)
        v20 &= 0xFFFFFFFFFFFFFF8uLL;
      if (_CocoaArrayWrapper.endIndex.getter(v20))
      {
LABEL_21:
        if ((v2 & 0xC000000000000001) == 0)
        {
          if (*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            v21 = *(id *)(v2 + 32);
LABEL_24:
            v22 = v21;
            swift_bridgeObjectRelease(v2);
LABEL_45:
            v32 = *(void (**)(char *, unint64_t))(v3
                                                                  + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_didChangeValue);
            *v8 = a1 & 1;
            (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for UITextFormattingViewController.ChangeValue.bold(_:), v5);
            v33 = sub_10000498C(&qword_10009AA80);
            inited = swift_initStackObject(v33, v39);
            *(_OWORD *)(inited + 16) = xmmword_100074A20;
            *(_QWORD *)(inited + 32) = NSFontAttributeName;
            *(_QWORD *)(inited + 64) = sub_1000096AC(0, &qword_10009A370, UIFont_ptr);
            *(_QWORD *)(inited + 40) = v22;
            swift_retain();
            v35 = NSFontAttributeName;
            v36 = v22;
            v37 = sub_1000283F8(inited);
            v32(v8, v37);

            swift_release();
            swift_bridgeObjectRelease(v37);
            return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
          }
          __break(1u);
          goto LABEL_52;
        }
LABEL_50:
        v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v2);
        goto LABEL_24;
      }
    }
    else if (*(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_21;
    }
    swift_bridgeObjectRelease(v2);
    v30 = (void *)objc_opt_self(UIFont);
    objc_msgSend(v30, "systemFontSize");
    v22 = objc_msgSend(v30, "systemFontOfSize:");
    goto LABEL_45;
  }
LABEL_30:
  v26 = (uint64_t)sub_1000256CC();
  v19 = v26;
  if (!((unint64_t)v26 >> 62))
  {
    result = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (result)
      goto LABEL_32;
LABEL_43:
    swift_bridgeObjectRelease(v19);
    v31 = (void *)objc_opt_self(UIFont);
    objc_msgSend(v31, "systemFontSize");
    v29 = objc_msgSend(v31, "systemFontOfSize:");
    goto LABEL_44;
  }
  if (v26 >= 0)
    v26 &= 0xFFFFFFFFFFFFFF8uLL;
  result = _CocoaArrayWrapper.endIndex.getter(v26);
  if (!result)
    goto LABEL_43;
LABEL_32:
  if ((v19 & 0xC000000000000001) != 0)
  {
LABEL_52:
    v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v19);
    goto LABEL_35;
  }
  if (*(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v28 = *(id *)(v19 + 32);
LABEL_35:
    v29 = v28;
    swift_bridgeObjectRelease(v19);
LABEL_44:
    v22 = sub_100067B10(2);

    goto LABEL_45;
  }
  __break(1u);
  return result;
}

uint64_t sub_100028AD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  unsigned __int8 v11;
  _BOOL4 v12;
  id v13;
  id v14;
  unsigned __int8 v15;
  uint64_t result;
  _UNKNOWN **v17;
  id v18;
  id v19;
  uint64_t v20;
  void *v21;
  NSString v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t KeyPath;
  uint64_t v29;
  char canToggle;
  uint64_t v31;

  v1 = v0;
  v2 = sub_10000498C(&qword_100098FC8);
  __chkstk_darwin(v2);
  v4 = (uint64_t *)((char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = (uint64_t)sub_1000256CC();
  v6 = v5;
  if ((unint64_t)v5 >> 62)
  {
    if (v5 >= 0)
      v5 &= 0xFFFFFFFFFFFFFF8uLL;
    if (_CocoaArrayWrapper.endIndex.getter(v5))
      goto LABEL_3;
LABEL_10:
    swift_bridgeObjectRelease(v6);
    v9 = (void *)objc_opt_self(UIFont);
    objc_msgSend(v9, "systemFontSize");
    v8 = objc_msgSend(v9, "systemFontOfSize:");
    goto LABEL_11;
  }
  if (!*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_10;
LABEL_3:
  if ((v6 & 0xC000000000000001) != 0)
  {
    v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v6);
  }
  else
  {
    if (!*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_20;
    }
    v7 = *(id *)(v6 + 32);
  }
  v8 = v7;
  swift_bridgeObjectRelease(v6);
LABEL_11:
  v10 = objc_msgSend(v8, "fontDescriptor");
  v11 = objc_msgSend(v10, "symbolicTraits");

  v12 = (v11 & 2) == 0;
  v13 = sub_100067B10(2);
  v14 = objc_msgSend(v13, "fontDescriptor");
  v15 = objc_msgSend(v14, "symbolicTraits");

  if (((v12 ^ ((v15 & 2) >> 1)) & 1) != 0)
    goto LABEL_31;
  v6 = (uint64_t)sub_1000256CC();
  if (!((unint64_t)v6 >> 62))
  {
    result = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    v17 = &_s7SwiftUI7CapsuleVAA5ShapeAAMc_ptr;
    if (result)
      goto LABEL_14;
LABEL_24:
    swift_bridgeObjectRelease(v6);
    v21 = (void *)objc_opt_self(v17[277]);
    objc_msgSend(v21, "systemFontSize");
    v19 = objc_msgSend(v21, "systemFontOfSize:");
LABEL_25:
    v22 = objc_msgSend(v19, "familyName");
    if (!v22)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      v24 = v23;
      v22 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v24);
    }
    v25 = objc_msgSend((id)objc_opt_self(v17[277]), "fontNamesForFamilyName:", v22);

    v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v25, &type metadata for String);
    v27 = *(_QWORD *)(v26 + 16);

    swift_bridgeObjectRelease(v26);
    if (v27 >= 2)
    {
      KeyPath = swift_getKeyPath(&unk_100074780);
      swift_getKeyPath(&unk_1000747A8);
      static Published.subscript.getter(v4, v1, KeyPath);
      swift_release();
      swift_release();
      v29 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor(0);
      canToggle = 1;
      if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 48))(v4, 1, v29))
        canToggle = UITextFormattingViewController.FormattingDescriptor._canToggleBold.getter();
      sub_1000092D0((uint64_t)v4, &qword_100098FC8);
      return canToggle & 1;
    }
LABEL_31:
    canToggle = 0;
    return canToggle & 1;
  }
LABEL_20:
  if (v6 < 0)
    v20 = v6;
  else
    v20 = v6 & 0xFFFFFFFFFFFFFF8;
  result = _CocoaArrayWrapper.endIndex.getter(v20);
  v17 = &_s7SwiftUI7CapsuleVAA5ShapeAAMc_ptr;
  if (!result)
    goto LABEL_24;
LABEL_14:
  if ((v6 & 0xC000000000000001) != 0)
  {
    v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v6);
    goto LABEL_17;
  }
  if (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v18 = *(id *)(v6 + 32);
LABEL_17:
    v19 = v18;
    swift_bridgeObjectRelease(v6);
    goto LABEL_25;
  }
  __break(1u);
  return result;
}

uint64_t sub_100028E50()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;

  v0 = (unint64_t)sub_1000256CC();
  v1 = v0;
  if (v0 >> 62)
    goto LABEL_12;
  v2 = *(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v0);
  for (; v2; v2 = _CocoaArrayWrapper.endIndex.getter(v10))
  {
    v3 = 4;
    while (1)
    {
      v4 = (v1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3 - 4, v1)
         : *(id *)(v1 + 8 * v3);
      v5 = v4;
      v6 = v3 - 3;
      if (__OFADD__(v3 - 4, 1))
        break;
      v7 = objc_msgSend(v4, "fontDescriptor");
      v8 = objc_msgSend(v7, "symbolicTraits");

      v9 = v8 & 1;
      if ((v8 & 1) == 0)
      {
        ++v3;
        if (v6 != v2)
          continue;
      }
      goto LABEL_17;
    }
    __break(1u);
LABEL_12:
    if (v1 < 0)
      v10 = v1;
    else
      v10 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
  }
  v9 = 0;
LABEL_17:
  swift_bridgeObjectRelease_n(v1, 2);
  return v9;
}

uint64_t sub_100028F68(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t result;
  id v28;
  id v29;
  void *v30;
  void *v31;
  void (*v32)(char *, unint64_t);
  uint64_t v33;
  uint64_t inited;
  NSString *v35;
  id v36;
  unint64_t v37;
  char v39[72];

  v3 = v1;
  v5 = type metadata accessor for UITextFormattingViewController.ChangeValue(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v39[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = (uint64_t)sub_1000256CC();
  v10 = v9;
  v11 = (unint64_t)v9 >> 62;
  if ((a1 & 1) != 0)
  {
    if (v11)
    {
      if (v9 >= 0)
        v9 &= 0xFFFFFFFFFFFFFF8uLL;
      if (_CocoaArrayWrapper.endIndex.getter(v9))
        goto LABEL_4;
    }
    else if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_4:
      if ((v10 & 0xC000000000000001) != 0)
      {
        v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v10);
        goto LABEL_7;
      }
      if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        v12 = *(id *)(v10 + 32);
LABEL_7:
        v13 = v12;
        swift_bridgeObjectRelease(v10);
        goto LABEL_18;
      }
      __break(1u);
      goto LABEL_48;
    }
    swift_bridgeObjectRelease(v10);
    v16 = (void *)objc_opt_self(UIFont);
    objc_msgSend(v16, "systemFontSize");
    v13 = objc_msgSend(v16, "systemFontOfSize:");
LABEL_18:
    v17 = objc_msgSend(v13, "fontDescriptor");
    v18 = objc_msgSend(v17, "symbolicTraits");

    if ((v18 & 1) != 0)
      goto LABEL_19;
    goto LABEL_30;
  }
  if (v11)
  {
    if (v9 >= 0)
      v9 &= 0xFFFFFFFFFFFFFF8uLL;
    if (_CocoaArrayWrapper.endIndex.getter(v9))
    {
LABEL_10:
      if ((v10 & 0xC000000000000001) == 0)
      {
        if (!*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          goto LABEL_50;
        }
        v14 = *(id *)(v10 + 32);
        goto LABEL_13;
      }
LABEL_48:
      v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v10);
LABEL_13:
      v15 = v14;
      swift_bridgeObjectRelease(v10);
      goto LABEL_29;
    }
  }
  else if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_10;
  }
  swift_bridgeObjectRelease(v10);
  v23 = (void *)objc_opt_self(UIFont);
  objc_msgSend(v23, "systemFontSize");
  v15 = objc_msgSend(v23, "systemFontOfSize:");
LABEL_29:
  v24 = objc_msgSend(v15, "fontDescriptor");
  v25 = objc_msgSend(v24, "symbolicTraits");

  if ((v25 & 1) == 0)
  {
LABEL_19:
    v19 = v3;
    v20 = (uint64_t)sub_1000256CC();
    v2 = v20;
    if ((unint64_t)v20 >> 62)
    {
      if (v20 >= 0)
        v20 &= 0xFFFFFFFFFFFFFF8uLL;
      if (_CocoaArrayWrapper.endIndex.getter(v20))
      {
LABEL_21:
        if ((v2 & 0xC000000000000001) == 0)
        {
          if (*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            v21 = *(id *)(v2 + 32);
LABEL_24:
            v22 = v21;
            swift_bridgeObjectRelease(v2);
LABEL_45:
            v32 = *(void (**)(char *, unint64_t))(v3
                                                                  + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_didChangeValue);
            *v8 = a1 & 1;
            (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for UITextFormattingViewController.ChangeValue.italic(_:), v5);
            v33 = sub_10000498C(&qword_10009AA80);
            inited = swift_initStackObject(v33, v39);
            *(_OWORD *)(inited + 16) = xmmword_100074A20;
            *(_QWORD *)(inited + 32) = NSFontAttributeName;
            *(_QWORD *)(inited + 64) = sub_1000096AC(0, &qword_10009A370, UIFont_ptr);
            *(_QWORD *)(inited + 40) = v22;
            swift_retain();
            v35 = NSFontAttributeName;
            v36 = v22;
            v37 = sub_1000283F8(inited);
            v32(v8, v37);

            swift_release();
            swift_bridgeObjectRelease(v37);
            return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
          }
          __break(1u);
          goto LABEL_52;
        }
LABEL_50:
        v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v2);
        goto LABEL_24;
      }
    }
    else if (*(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_21;
    }
    swift_bridgeObjectRelease(v2);
    v30 = (void *)objc_opt_self(UIFont);
    objc_msgSend(v30, "systemFontSize");
    v22 = objc_msgSend(v30, "systemFontOfSize:");
    goto LABEL_45;
  }
LABEL_30:
  v26 = (uint64_t)sub_1000256CC();
  v19 = v26;
  if (!((unint64_t)v26 >> 62))
  {
    result = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (result)
      goto LABEL_32;
LABEL_43:
    swift_bridgeObjectRelease(v19);
    v31 = (void *)objc_opt_self(UIFont);
    objc_msgSend(v31, "systemFontSize");
    v29 = objc_msgSend(v31, "systemFontOfSize:");
    goto LABEL_44;
  }
  if (v26 >= 0)
    v26 &= 0xFFFFFFFFFFFFFF8uLL;
  result = _CocoaArrayWrapper.endIndex.getter(v26);
  if (!result)
    goto LABEL_43;
LABEL_32:
  if ((v19 & 0xC000000000000001) != 0)
  {
LABEL_52:
    v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v19);
    goto LABEL_35;
  }
  if (*(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v28 = *(id *)(v19 + 32);
LABEL_35:
    v29 = v28;
    swift_bridgeObjectRelease(v19);
LABEL_44:
    v22 = sub_100067B10(1);

    goto LABEL_45;
  }
  __break(1u);
  return result;
}

uint64_t sub_100029404()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  unsigned __int8 v11;
  _BOOL4 v12;
  id v13;
  id v14;
  unsigned int v15;
  uint64_t result;
  _UNKNOWN **v17;
  id v18;
  id v19;
  uint64_t v20;
  void *v21;
  NSString v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t KeyPath;
  uint64_t v29;
  char canToggle;
  uint64_t v31;

  v1 = v0;
  v2 = sub_10000498C(&qword_100098FC8);
  __chkstk_darwin(v2);
  v4 = (uint64_t *)((char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = (uint64_t)sub_1000256CC();
  v6 = v5;
  if ((unint64_t)v5 >> 62)
  {
    if (v5 >= 0)
      v5 &= 0xFFFFFFFFFFFFFF8uLL;
    if (_CocoaArrayWrapper.endIndex.getter(v5))
      goto LABEL_3;
LABEL_10:
    swift_bridgeObjectRelease(v6);
    v9 = (void *)objc_opt_self(UIFont);
    objc_msgSend(v9, "systemFontSize");
    v8 = objc_msgSend(v9, "systemFontOfSize:");
    goto LABEL_11;
  }
  if (!*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_10;
LABEL_3:
  if ((v6 & 0xC000000000000001) != 0)
  {
    v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v6);
  }
  else
  {
    if (!*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_20;
    }
    v7 = *(id *)(v6 + 32);
  }
  v8 = v7;
  swift_bridgeObjectRelease(v6);
LABEL_11:
  v10 = objc_msgSend(v8, "fontDescriptor");
  v11 = objc_msgSend(v10, "symbolicTraits");

  v12 = (v11 & 1) == 0;
  v13 = sub_100067B10(1);
  v14 = objc_msgSend(v13, "fontDescriptor");
  v15 = objc_msgSend(v14, "symbolicTraits");

  if (((v12 ^ v15) & 1) != 0)
    goto LABEL_31;
  v6 = (uint64_t)sub_1000256CC();
  if (!((unint64_t)v6 >> 62))
  {
    result = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    v17 = &_s7SwiftUI7CapsuleVAA5ShapeAAMc_ptr;
    if (result)
      goto LABEL_14;
LABEL_24:
    swift_bridgeObjectRelease(v6);
    v21 = (void *)objc_opt_self(v17[277]);
    objc_msgSend(v21, "systemFontSize");
    v19 = objc_msgSend(v21, "systemFontOfSize:");
LABEL_25:
    v22 = objc_msgSend(v19, "familyName");
    if (!v22)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      v24 = v23;
      v22 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v24);
    }
    v25 = objc_msgSend((id)objc_opt_self(v17[277]), "fontNamesForFamilyName:", v22);

    v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v25, &type metadata for String);
    v27 = *(_QWORD *)(v26 + 16);

    swift_bridgeObjectRelease(v26);
    if (v27 >= 2)
    {
      KeyPath = swift_getKeyPath(&unk_100074780);
      swift_getKeyPath(&unk_1000747A8);
      static Published.subscript.getter(v4, v1, KeyPath);
      swift_release();
      swift_release();
      v29 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor(0);
      canToggle = 1;
      if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 48))(v4, 1, v29))
        canToggle = UITextFormattingViewController.FormattingDescriptor._canToggleItalic.getter();
      sub_1000092D0((uint64_t)v4, &qword_100098FC8);
      return canToggle & 1;
    }
LABEL_31:
    canToggle = 0;
    return canToggle & 1;
  }
LABEL_20:
  if (v6 < 0)
    v20 = v6;
  else
    v20 = v6 & 0xFFFFFFFFFFFFFF8;
  result = _CocoaArrayWrapper.endIndex.getter(v20);
  v17 = &_s7SwiftUI7CapsuleVAA5ShapeAAMc_ptr;
  if (!result)
    goto LABEL_24;
LABEL_14:
  if ((v6 & 0xC000000000000001) != 0)
  {
    v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v6);
    goto LABEL_17;
  }
  if (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v18 = *(id *)(v6 + 32);
LABEL_17:
    v19 = v18;
    swift_bridgeObjectRelease(v6);
    goto LABEL_25;
  }
  __break(1u);
  return result;
}

uint64_t sub_100029778()
{
  return sub_1000297A4((uint64_t (*)(void))&UITextFormattingViewController.FormattingDescriptor.underlinePresent.getter);
}

uint64_t sub_100029784(char a1)
{
  return sub_1000298B0(a1, &enum case for UITextFormattingViewController.ChangeValue.underline(_:), (void **)&NSUnderlineStyleAttributeName);
}

uint64_t sub_100029798()
{
  return sub_1000297A4((uint64_t (*)(void))&UITextFormattingViewController.FormattingDescriptor.strikethroughPresent.getter);
}

uint64_t sub_1000297A4(uint64_t (*a1)(void))
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t KeyPath;
  uint64_t v8;
  char v9;
  uint64_t v11;

  v3 = v1;
  v4 = sub_10000498C(&qword_100098FC8);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  KeyPath = swift_getKeyPath(&unk_100074780);
  swift_getKeyPath(&unk_1000747A8);
  static Published.subscript.getter(v6, v3, KeyPath);
  swift_release();
  swift_release();
  v8 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor(0);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8))
    v9 = 0;
  else
    v9 = a1();
  sub_1000092D0((uint64_t)v6, &qword_100098FC8);
  return v9 & 1;
}

uint64_t sub_10002989C(char a1)
{
  return sub_1000298B0(a1, &enum case for UITextFormattingViewController.ChangeValue.strikethrough(_:), (void **)&NSStrikethroughStyleAttributeName);
}

uint64_t sub_1000298B0(char a1, unsigned int *a2, void **a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  void (*v11)(_BYTE *, unint64_t);
  uint64_t v12;
  uint64_t inited;
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;
  id v18;
  id v19;
  unint64_t v20;
  _BYTE v23[72];

  v7 = type metadata accessor for UITextFormattingViewController.ChangeValue(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = &v23[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v11 = *(void (**)(_BYTE *, unint64_t))(v3
                                                         + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_didChangeValue);
  *v10 = a1;
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v8 + 104))(v10, *a2, v7);
  v12 = sub_10000498C(&qword_10009AA80);
  inited = swift_initStackObject(v12, v23);
  *(_OWORD *)(inited + 16) = xmmword_100074A20;
  v14 = *a3;
  *(_QWORD *)(inited + 32) = *a3;
  if ((a1 & 1) != 0)
  {
    swift_retain();
    v15 = v14;
    v16 = &type metadata for Int;
    v17 = 1;
  }
  else
  {
    v18 = objc_allocWithZone((Class)NSNull);
    swift_retain();
    v19 = v14;
    v17 = (uint64_t)objc_msgSend(v18, "init");
    v16 = (void *)sub_1000096AC(0, &qword_100099688, NSNull_ptr);
  }
  *(_QWORD *)(inited + 64) = v16;
  *(_QWORD *)(inited + 40) = v17;
  v20 = sub_1000283F8(inited);
  v11(v10, v20);
  swift_release();
  swift_bridgeObjectRelease(v20);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_100029A30()
{
  id v0;

  v0 = sub_100025810();
  return Color.init(uiColor:)(v0);
}

uint64_t sub_100029A44()
{
  return sub_100029EF8((id *)&UITextFormattingViewControllerTextAlignmentLeft);
}

uint64_t sub_100029A50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t KeyPath;
  uint64_t v12;
  unint64_t v13;
  void (*v14)(uint64_t, unint64_t);
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t inited;
  NSString *v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  _BYTE v54[72];

  v2 = v1;
  v4 = type metadata accessor for UITextFormattingViewController.ChangeValue(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (void **)&v54[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = sub_10000498C(&qword_100098FC8);
  __chkstk_darwin(v8);
  v10 = &v54[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  KeyPath = swift_getKeyPath(&unk_100074780);
  swift_getKeyPath(&unk_1000747A8);
  static Published.subscript.getter(v10, v2, KeyPath);
  swift_release();
  swift_release();
  v12 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor(0);
  if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v10, 1, v12))
  {
    v16 = (void *)UITextFormattingViewController.FormattingDescriptor._paragraphStyle.getter();
    sub_1000092D0((uint64_t)v10, &qword_100098FC8);
    if (!v16)
      goto LABEL_3;
    v17 = objc_opt_self(NSMutableParagraphStyle);
    v18 = swift_dynamicCastObjCClass(v16, v17);
    if (!v18)
    {

      goto LABEL_3;
    }
    v19 = (void *)v18;
    (*(void (**)(void **, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
    if ((*(unsigned int (**)(void **, uint64_t))(v5 + 88))(v7, v4) != enum case for UITextFormattingViewController.ChangeValue.textAlignment(_:))
    {
      (*(void (**)(void **, uint64_t))(v5 + 8))(v7, v4);
LABEL_21:
      v35 = sub_10000498C(&qword_10009AA80);
      inited = swift_initStackObject(v35, v54);
      *(_OWORD *)(inited + 16) = xmmword_100074A20;
      *(_QWORD *)(inited + 32) = NSParagraphStyleAttributeName;
      *(_QWORD *)(inited + 64) = sub_1000096AC(0, &qword_1000996C0, NSMutableParagraphStyle_ptr);
      *(_QWORD *)(inited + 40) = v19;
      v37 = NSParagraphStyleAttributeName;
      v13 = sub_1000283F8(inited);
      goto LABEL_4;
    }
    (*(void (**)(void **, uint64_t))(v5 + 96))(v7, v4);
    v20 = *v7;
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(UITextFormattingViewControllerTextAlignmentLeft);
    v23 = v22;
    v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    if (v21 == v24 && v23 == v25)
    {
      swift_bridgeObjectRelease_n(v23, 2);
    }
    else
    {
      v27 = v25;
      v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v23, v24, v25, 0);
      swift_bridgeObjectRelease(v23);
      swift_bridgeObjectRelease(v27);
      if ((v28 & 1) == 0)
      {
        v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(UITextFormattingViewControllerTextAlignmentCenter);
        v31 = v30;
        v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
        v34 = v32;
        if (v29 == v33 && v31 == v32)
        {
          swift_bridgeObjectRelease_n(v31, 2);
LABEL_23:
          objc_msgSend(v19, "setAlignment:", 1);
          goto LABEL_20;
        }
        v38 = _stringCompareWithSmolCheck(_:_:expecting:)(v29, v31, v33, v32, 0);
        swift_bridgeObjectRelease(v31);
        swift_bridgeObjectRelease(v34);
        if ((v38 & 1) != 0)
          goto LABEL_23;
        v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(UITextFormattingViewControllerTextAlignmentRight);
        v41 = v40;
        v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
        v44 = v42;
        if (v39 == v43 && v41 == v42)
        {
          swift_bridgeObjectRelease_n(v41, 2);
LABEL_28:
          objc_msgSend(v19, "setAlignment:", 2);
          goto LABEL_20;
        }
        v45 = _stringCompareWithSmolCheck(_:_:expecting:)(v39, v41, v43, v42, 0);
        swift_bridgeObjectRelease(v41);
        swift_bridgeObjectRelease(v44);
        if ((v45 & 1) != 0)
          goto LABEL_28;
        v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(UITextFormattingViewControllerTextAlignmentJustified);
        v48 = v47;
        v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
        v51 = v49;
        if (v46 == v50 && v48 == v49)
        {
          swift_bridgeObjectRelease_n(v48, 2);
        }
        else
        {
          v52 = _stringCompareWithSmolCheck(_:_:expecting:)(v46, v48, v50, v49, 0);
          swift_bridgeObjectRelease(v48);
          swift_bridgeObjectRelease(v51);
          if ((v52 & 1) == 0)
          {
            objc_msgSend(v19, "setAlignment:", 4);
            goto LABEL_20;
          }
        }
        objc_msgSend(v19, "setAlignment:", 3);
LABEL_20:

        goto LABEL_21;
      }
    }
    objc_msgSend(v19, "setAlignment:", 0);
    goto LABEL_20;
  }
  sub_1000092D0((uint64_t)v10, &qword_100098FC8);
LABEL_3:
  v13 = 0;
LABEL_4:
  v14 = *(void (**)(uint64_t, unint64_t))(v2
                                                         + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_didChangeValue);
  swift_retain();
  v14(a1, v13);
  swift_release();
  return swift_bridgeObjectRelease(v13);
}

uint64_t sub_100029EEC()
{
  return sub_100029EF8((id *)&UITextFormattingViewControllerTextAlignmentCenter);
}

uint64_t sub_100029EF8(id *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t KeyPath;
  uint64_t v8;
  char v9;
  uint64_t v10;
  id v11;
  uint64_t v13;

  v3 = v1;
  v4 = sub_10000498C(&qword_100098FC8);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  KeyPath = swift_getKeyPath(&unk_100074780);
  swift_getKeyPath(&unk_1000747A8);
  static Published.subscript.getter(v6, v3, KeyPath);
  swift_release();
  swift_release();
  v8 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor(0);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8))
  {
    sub_1000092D0((uint64_t)v6, &qword_100098FC8);
    v9 = 0;
  }
  else
  {
    v10 = UITextFormattingViewController.FormattingDescriptor.textAlignments.getter();
    sub_1000092D0((uint64_t)v6, &qword_100098FC8);
    v11 = *a1;
    v9 = sub_100011198();

    swift_bridgeObjectRelease(v10);
  }
  return v9 & 1;
}

uint64_t sub_10002A024()
{
  return sub_100029EF8((id *)&UITextFormattingViewControllerTextAlignmentRight);
}

uint64_t sub_10002A030()
{
  return sub_100029EF8((id *)&UITextFormattingViewControllerTextAlignmentJustified);
}

_QWORD *sub_10002A03C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10[2];

  v1 = v0;
  v2 = sub_10000498C(&qword_100098FC8);
  __chkstk_darwin(v2);
  v4 = (uint64_t *)((char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  KeyPath = swift_getKeyPath(&unk_100074780);
  swift_getKeyPath(&unk_1000747A8);
  static Published.subscript.getter(v4, v1, KeyPath);
  swift_release();
  swift_release();
  v6 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor(0);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v4, 1, v6))
  {
    sub_1000092D0((uint64_t)v4, &qword_100098FC8);
    return _swiftEmptyArrayStorage;
  }
  else
  {
    v8 = UITextFormattingViewController.FormattingDescriptor.textLists.getter();
    sub_1000092D0((uint64_t)v4, &qword_100098FC8);
    v9 = sub_1000250EC(v8);
    swift_bridgeObjectRelease(v8);
    v10[0] = v9;
    swift_bridgeObjectRetain(v9);
    sub_10002EB30(v10);
    swift_bridgeObjectRelease(v9);
    return (_QWORD *)v10[0];
  }
}

void sub_10002A184(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  Class isa;
  uint64_t v15;
  uint64_t inited;
  NSString *v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  Class v23;
  uint64_t v24;
  NSString *v25;
  void *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSString *v34;
  unint64_t v35;
  _BYTE v36[72];
  uint64_t v37;
  uint64_t v38;
  void *v39;
  _QWORD v40[4];

  v2 = v1;
  v4 = sub_10000498C(&qword_100098FC8);
  __chkstk_darwin(v4);
  v6 = &v36[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (*(_QWORD *)(a1 + 16))
  {
    v7 = *(unsigned __int8 *)(a1 + 32);
    swift_bridgeObjectRelease(a1);
    __asm { BR              X9 }
  }
  swift_bridgeObjectRelease(a1);
  KeyPath = swift_getKeyPath(&unk_100074780);
  swift_getKeyPath(&unk_1000747A8);
  static Published.subscript.getter(v6, v2, KeyPath);
  swift_release();
  swift_release();
  v9 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor(0);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v6, 1, v9))
  {
    sub_1000092D0((uint64_t)v6, &qword_100098FC8);
    goto LABEL_5;
  }
  v19 = (void *)UITextFormattingViewController.FormattingDescriptor._paragraphStyle.getter();
  sub_1000092D0((uint64_t)v6, &qword_100098FC8);
  if (!v19)
  {
LABEL_5:
    if ((unint64_t)_swiftEmptyArrayStorage >> 62)
    {
      if ((uint64_t)_swiftEmptyArrayStorage < 0)
        v29 = _swiftEmptyArrayStorage;
      else
        v29 = (_QWORD *)((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8);
      swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
      v30 = _CocoaArrayWrapper.endIndex.getter(v29);
      swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
      if (v30)
        goto LABEL_7;
    }
    else if (*(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_7:
      v10 = objc_msgSend((id)objc_opt_self(NSParagraphStyle), "defaultParagraphStyle");
      v11 = objc_msgSend(v10, "mutableCopy");

      _bridgeAnyObjectToAny(_:)(v40, v11);
      swift_unknownObjectRelease(v11);
      v12 = sub_1000096AC(0, &qword_1000996C0, NSMutableParagraphStyle_ptr);
      if (!swift_dynamicCast(&v39, v40, (char *)&type metadata for Any + 8, v12, 6))
      {
        swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
        sub_10002A6B8(0, 4);
        return;
      }
      v13 = v39;
      sub_1000096AC(0, &qword_1000996C8, NSTextList_ptr);
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
      objc_msgSend(v13, "setTextLists:", isa);

      v15 = sub_10000498C(&qword_10009AA80);
      inited = swift_initStackObject(v15, &v38);
      *(_OWORD *)(inited + 16) = xmmword_100074A20;
      *(_QWORD *)(inited + 64) = v12;
      *(_QWORD *)(inited + 32) = NSParagraphStyleAttributeName;
      *(_QWORD *)(inited + 40) = v13;
      v17 = NSParagraphStyleAttributeName;
      v18 = v13;
      goto LABEL_12;
    }
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    v31 = sub_10000498C(&qword_10009AA80);
    v32 = swift_initStackObject(v31, &v37);
    *(_OWORD *)(v32 + 16) = xmmword_100074A20;
    *(_QWORD *)(v32 + 32) = NSParagraphStyleAttributeName;
    *(_QWORD *)(v32 + 64) = sub_10000498C((uint64_t *)&unk_10009A360);
    v33 = swift_allocObject(&unk_10008EE90, 48, 7);
    *(_QWORD *)(v32 + 40) = v33;
    *(_OWORD *)(v33 + 16) = 0u;
    *(_OWORD *)(v33 + 32) = 0u;
    v34 = NSParagraphStyleAttributeName;
    v35 = sub_1000283F8(v32);
    sub_10002A6B8(v35, 4);
    v28 = v35;
    goto LABEL_20;
  }
  v20 = objc_opt_self(NSMutableParagraphStyle);
  v21 = swift_dynamicCastObjCClass(v19, v20);
  if (!v21)
  {

    goto LABEL_5;
  }
  v22 = (void *)v21;
  sub_1000096AC(0, &qword_1000996C8, NSTextList_ptr);
  v23 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  objc_msgSend(v22, "setTextLists:", v23);

  v24 = sub_10000498C(&qword_10009AA80);
  inited = swift_initStackObject(v24, v36);
  *(_OWORD *)(inited + 16) = xmmword_100074A20;
  *(_QWORD *)(inited + 32) = NSParagraphStyleAttributeName;
  *(_QWORD *)(inited + 64) = sub_1000096AC(0, &qword_1000996C0, NSMutableParagraphStyle_ptr);
  *(_QWORD *)(inited + 40) = v22;
  v25 = NSParagraphStyleAttributeName;
  v18 = v19;
LABEL_12:
  v26 = v18;
  v27 = sub_1000283F8(inited);
  sub_10002A6B8(v27, 4);

  v28 = v27;
LABEL_20:
  swift_bridgeObjectRelease(v28);
}

void sub_10002A6B8(uint64_t a1, char a2)
{
  uint64_t v3;

  v3 = type metadata accessor for UITextFormattingViewController.ChangeValue(0);
  __chkstk_darwin(v3);
  __asm { BR              X10 }
}

uint64_t sub_10002A730()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(_QWORD *, uint64_t);

  v6 = *(void (**)(_QWORD *, uint64_t))(v3
                                                + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_didChangeValue);
  v5 = *(_QWORD *)(v3 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_didChangeValue + 8);
  *v2 = 0;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v2, enum case for UITextFormattingViewController.ChangeValue.textList(_:), v0);
  swift_retain(v5);
  v6(v2, v1);
  swift_release(v5);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(v4 + 8))(v2, v0);
}

uint64_t sub_10002A830()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t KeyPath;
  uint64_t v9;
  unsigned int (*v10)(_QWORD *, uint64_t, uint64_t);
  uint64_t v11;
  void *v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;

  v1 = v0;
  v2 = sub_10000498C(&qword_100098FC8);
  v3 = __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v3);
  v7 = (uint64_t *)((char *)&v22 - v6);
  KeyPath = swift_getKeyPath(&unk_100074780);
  swift_getKeyPath(&unk_1000747A8);
  static Published.subscript.getter(v7, v1, KeyPath);
  swift_release();
  swift_release();
  v9 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor(0);
  v10 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48);
  if (v10(v7, 1, v9))
  {
    sub_1000092D0((uint64_t)v7, &qword_100098FC8);
LABEL_3:
    v11 = swift_getKeyPath(&unk_100074780);
    swift_getKeyPath(&unk_1000747A8);
    static Published.subscript.getter(v5, v1, v11);
    swift_release();
    swift_release();
    if (v10(v5, 1, v9))
    {
      sub_1000092D0((uint64_t)v5, &qword_100098FC8);
      return 0;
    }
    v19 = UITextFormattingViewController.FormattingDescriptor.lineHeight.getter();
    v21 = v20;
    sub_1000092D0((uint64_t)v5, &qword_100098FC8);
    if ((v21 & 1) != 0)
      return 0;
    else
      return v19;
  }
  v13 = (void *)UITextFormattingViewController.FormattingDescriptor._paragraphStyle.getter();
  sub_1000092D0((uint64_t)v7, &qword_100098FC8);
  if (!v13)
    goto LABEL_3;
  objc_msgSend(v13, "minimumLineHeight");
  v15 = v14;
  objc_msgSend(v13, "maximumLineHeight");
  if (v15 != v16)
  {

    return 0;
  }
  objc_msgSend(v13, "minimumLineHeight");
  v18 = v17;

  return v18;
}

uint64_t sub_10002AA48(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  _QWORD *v13;
  uint64_t KeyPath;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t inited;
  NSString *v22;
  id v23;
  void (*v24)(_QWORD *, _QWORD);
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  NSString *v30;
  void *v31;
  unint64_t v32;
  void (*v33)(_QWORD *, unint64_t);
  _BYTE v35[72];
  _BYTE v36[72];
  id v37;
  _QWORD v38[4];

  v3 = v2;
  v6 = type metadata accessor for UITextFormattingViewController.ChangeValue(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v35[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v10 = sub_10000498C(&qword_100098FC8);
  result = __chkstk_darwin(v10);
  v13 = &v35[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if ((a2 & 1) == 0)
  {
    KeyPath = swift_getKeyPath(&unk_100074780);
    swift_getKeyPath(&unk_1000747A8);
    static Published.subscript.getter(v13, v3, KeyPath);
    swift_release();
    swift_release();
    v15 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor(0);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v13, 1, v15))
    {
      sub_1000092D0((uint64_t)v13, &qword_100098FC8);
    }
    else
    {
      v25 = (void *)UITextFormattingViewController.FormattingDescriptor._paragraphStyle.getter();
      sub_1000092D0((uint64_t)v13, &qword_100098FC8);
      if (v25)
      {
        v26 = objc_opt_self(NSMutableParagraphStyle);
        v27 = (void *)swift_dynamicCastObjCClass(v25, v26);
        if (v27)
        {
          v28 = v27;
          objc_msgSend(v27, "setMinimumLineHeight:", *(double *)&a1);
          objc_msgSend(v28, "setMaximumLineHeight:", *(double *)&a1);
          v29 = sub_10000498C(&qword_10009AA80);
          inited = swift_initStackObject(v29, v35);
          *(_OWORD *)(inited + 16) = xmmword_100074A20;
          *(_QWORD *)(inited + 32) = NSParagraphStyleAttributeName;
          *(_QWORD *)(inited + 64) = sub_1000096AC(0, &qword_1000996C0, NSMutableParagraphStyle_ptr);
          *(_QWORD *)(inited + 40) = v28;
          v30 = NSParagraphStyleAttributeName;
          v23 = v25;
LABEL_10:
          v31 = v23;
          v32 = sub_1000283F8(inited);
          v33 = *(void (**)(_QWORD *, unint64_t))(v3
                                                                  + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_didChangeValue);
          *v9 = a1;
          (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for UITextFormattingViewController.ChangeValue.lineHeightPointSize(_:), v6);
          swift_retain();
          v33(v9, v32);
          swift_release();
          (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);

          return swift_bridgeObjectRelease(v32);
        }

      }
    }
    v16 = objc_msgSend((id)objc_opt_self(NSParagraphStyle), "defaultParagraphStyle");
    v17 = objc_msgSend(v16, "mutableCopy");

    _bridgeAnyObjectToAny(_:)(v38, v17);
    swift_unknownObjectRelease(v17);
    v18 = sub_1000096AC(0, &qword_1000996C0, NSMutableParagraphStyle_ptr);
    if (!swift_dynamicCast(&v37, v38, (char *)&type metadata for Any + 8, v18, 6))
    {
      v24 = *(void (**)(_QWORD *, _QWORD))(v3
                                                    + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_didChangeValue);
      *v9 = a1;
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for UITextFormattingViewController.ChangeValue.lineHeightPointSize(_:), v6);
      swift_retain();
      v24(v9, 0);
      swift_release();
      return (*(uint64_t (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
    }
    v19 = v37;
    objc_msgSend(v37, "setMinimumLineHeight:", *(double *)&a1);
    objc_msgSend(v19, "setMaximumLineHeight:", *(double *)&a1);
    v20 = sub_10000498C(&qword_10009AA80);
    inited = swift_initStackObject(v20, v36);
    *(_OWORD *)(inited + 16) = xmmword_100074A20;
    *(_QWORD *)(inited + 64) = v18;
    *(_QWORD *)(inited + 32) = NSParagraphStyleAttributeName;
    *(_QWORD *)(inited + 40) = v19;
    v22 = NSParagraphStyleAttributeName;
    v23 = v19;
    goto LABEL_10;
  }
  return result;
}

_QWORD *sub_10002AE28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t KeyPath;
  unsigned int (*v13)(_QWORD *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v30[2];

  v1 = v0;
  v2 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10000498C(&qword_100098FC8);
  v7 = __chkstk_darwin(v6);
  v9 = (_QWORD *)((char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  v11 = (_QWORD *)((char *)v30 - v10);
  KeyPath = swift_getKeyPath(&unk_100074780);
  swift_getKeyPath(&unk_1000747A8);
  static Published.subscript.getter(v11, v1, KeyPath);
  swift_release();
  swift_release();
  v13 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v3 + 48);
  if (v13(v11, 1, v2))
  {
    sub_1000092D0((uint64_t)v11, &qword_100098FC8);
  }
  else
  {
    v21 = UITextFormattingViewController.FormattingDescriptor._emphasisStyleKey.getter();
    v23 = v22;
    sub_1000092D0((uint64_t)v11, &qword_100098FC8);
    if (v23)
    {
      v24 = *(_QWORD *)(v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_allHighlightStyles);
      swift_bridgeObjectRetain(v23);
      v25 = swift_bridgeObjectRetain(v24);
      v26 = sub_100030D88(v25, v21, v23);
      swift_bridgeObjectRelease(v24);
      swift_bridgeObjectRelease_n(v23, 2);
      if (!v26)
        return _swiftEmptyArrayStorage;
      v27 = sub_10000498C(&qword_100098B10);
      v28 = swift_allocObject(v27, 40, 7);
      *(_OWORD *)(v28 + 16) = xmmword_1000738A0;
      *(_QWORD *)(v28 + 32) = v26;
      v30[0] = v28;
      specialized Array._endMutation()(v28);
      return (_QWORD *)v30[0];
    }
  }
  v14 = swift_getKeyPath(&unk_100074780);
  swift_getKeyPath(&unk_1000747A8);
  static Published.subscript.getter(v9, v1, v14);
  swift_release();
  swift_release();
  if (v13(v9, 1, v2) == 1)
  {
    sub_1000092D0((uint64_t)v9, &qword_100098FC8);
    return _swiftEmptyArrayStorage;
  }
  v15 = (*(uint64_t (**)(char *, _QWORD *, uint64_t))(v3 + 32))(v5, v9, v2);
  v16 = UITextFormattingViewController.FormattingDescriptor.highlights.getter(v15);
  v17 = *(_QWORD *)(v16 + 16);
  v18 = swift_bridgeObjectRelease(v16);
  if (!v17)
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return _swiftEmptyArrayStorage;
  }
  v19 = UITextFormattingViewController.FormattingDescriptor.highlights.getter(v18);
  v20 = sub_10003092C();
  swift_bridgeObjectRelease(v19);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v20;
}

uint64_t sub_10002B0EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  char v14;
  uint64_t result;
  id i;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  NSString v22;
  NSString v23;
  void *v24;
  uint64_t v25;
  id v26;
  void (*v27)(uint64_t *, _QWORD);
  uint64_t v28;

  v2 = v1;
  v4 = type metadata accessor for UITextFormattingViewController.ChangeValue(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v1 = a1;
    else
      v1 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v8 = _CocoaArrayWrapper.endIndex.getter(v1);
    if (v8)
      goto LABEL_3;
LABEL_11:
    swift_bridgeObjectRelease(a1);
    v10 = 0;
    goto LABEL_12;
  }
  v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  if (!v8)
    goto LABEL_11;
LABEL_3:
  if ((a1 & 0xC000000000000001) != 0)
  {
    v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
  }
  else
  {
    if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_28;
    }
    v9 = *(id *)(a1 + 32);
  }
  v10 = v9;
  swift_bridgeObjectRelease(a1);
LABEL_12:
  if (qword_100098230 != -1)
  {
    swift_once(&qword_100098230, sub_10002E054);
    if (v10)
      goto LABEL_14;
LABEL_18:
    if (v8)
      goto LABEL_33;
    goto LABEL_19;
  }
  if (!v10)
    goto LABEL_18;
LABEL_14:
  v11 = (void *)qword_10009B618;
  sub_1000096AC(0, &qword_100098918, _UITextFormattingViewControllerEmphasisStyle_ptr);
  v12 = v11;
  v13 = v10;
  v14 = static NSObject.== infix(_:_:)(v13, v12);

  if (v8 && (v14 & 1) == 0)
    goto LABEL_33;
LABEL_19:
  v1 = (uint64_t)sub_10002AE28();
  if (!((unint64_t)v1 >> 62))
  {
    result = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (result)
      goto LABEL_21;
LABEL_32:
    swift_bridgeObjectRelease(v1);
    if (!v8)
    {
      v1 = 0;
LABEL_36:
      sub_100030F2C((void *)v1);
      if (v8)
        goto LABEL_37;
LABEL_25:
      swift_bridgeObjectRelease(a1);
      v24 = 0;
LABEL_41:
      sub_1000096AC(0, &qword_100098918, _UITextFormattingViewControllerEmphasisStyle_ptr);
      sub_10002B4C4(v24, v7);

      v27 = *(void (**)(uint64_t *, _QWORD))(v2
                                                     + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_didChangeValue);
      swift_retain();
      v27(v7, 0);
      swift_release();
      return (*(uint64_t (**)(uint64_t *, uint64_t))(v5 + 8))(v7, v4);
    }
LABEL_33:
    if ((a1 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain(a1);
      v1 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
      swift_bridgeObjectRelease(a1);
    }
    else
    {
      if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
LABEL_45:
        v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
LABEL_40:
        v24 = v26;
        swift_bridgeObjectRelease(a1);
        goto LABEL_41;
      }
      v1 = (uint64_t)*(id *)(a1 + 32);
    }
    goto LABEL_36;
  }
LABEL_28:
  if (v1 < 0)
    v25 = v1;
  else
    v25 = v1 & 0xFFFFFFFFFFFFFF8;
  result = _CocoaArrayWrapper.endIndex.getter(v25);
  if (!result)
    goto LABEL_32;
LABEL_21:
  if ((v1 & 0xC000000000000001) != 0)
    goto LABEL_47;
  if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    for (i = *(id *)(v1 + 32); ; i = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v1))
    {
      v17 = i;
      swift_bridgeObjectRelease(v1);
      v1 = v17;
      v18 = objc_msgSend((id)v1, "styleKey");
      static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
      v20 = v19;

      v21 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
      v22 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v20);
      v23 = String._bridgeToObjectiveC()();
      objc_msgSend(v21, "setObject:forKey:", v22, v23);

      if (!v8)
        break;
LABEL_37:
      if ((a1 & 0xC000000000000001) != 0)
        goto LABEL_45;
      if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        v26 = *(id *)(a1 + 32);
        goto LABEL_40;
      }
      __break(1u);
LABEL_47:
      ;
    }
    goto LABEL_25;
  }
  __break(1u);
  return result;
}

uint64_t sub_10002B4C4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  Swift::Bool v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  char v19;
  id *v20;
  id v21;
  uint64_t v22;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;

  if (a1)
  {
    v3 = a1;
    v4 = objc_msgSend(v3, "styleKey");
    static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v6 = v5;

    v7._object = (void *)0x8000000100077FE0;
    v7._countAndFlagsBits = 0xD00000000000001FLL;
    v8 = String.hasPrefix(_:)(v7);
    swift_bridgeObjectRelease(v6);
    v9 = objc_msgSend(v3, "styleKey");
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v12 = v11;

    if (!v8)
    {

      *a2 = v10;
      a2[1] = v12;
      v18 = (unsigned int *)&enum case for UITextFormattingViewController.ChangeValue.emphasisStyle(_:);
LABEL_14:
      v17 = *v18;
      goto LABEL_15;
    }
    if (qword_100098238 != -1)
      swift_once(&qword_100098238, sub_10002E160);
    v13 = objc_msgSend((id)qword_10009B620, "styleKey");
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v16 = v15;

    if (v14 == v10 && v16 == v12)
    {
      swift_bridgeObjectRelease(v12);
    }
    else
    {
      v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v16, v10, v12, 0);
      swift_bridgeObjectRelease(v16);
      if ((v19 & 1) == 0)
      {
        if (qword_100098240 != -1)
          swift_once(&qword_100098240, sub_10002E26C);
        v24 = objc_msgSend((id)qword_10009B628, "styleKey");
        v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
        v27 = v26;

        if (v25 == v10 && v27 == v12)
        {
          swift_bridgeObjectRelease(v12);
        }
        else
        {
          v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v27, v10, v12, 0);
          swift_bridgeObjectRelease(v27);
          if ((v28 & 1) == 0)
          {
            if (qword_100098248 != -1)
              swift_once(&qword_100098248, sub_10002E378);
            v29 = objc_msgSend((id)qword_10009B630, "styleKey");
            v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
            v32 = v31;

            if (v30 == v10 && v32 == v12)
            {
              swift_bridgeObjectRelease(v12);
            }
            else
            {
              v33 = _stringCompareWithSmolCheck(_:_:expecting:)(v30, v32, v10, v12, 0);
              swift_bridgeObjectRelease(v32);
              if ((v33 & 1) == 0)
              {
                if (qword_100098250 != -1)
                  swift_once(&qword_100098250, sub_10002E484);
                v34 = objc_msgSend((id)qword_10009B638, "styleKey");
                v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
                v37 = v36;

                if (v35 == v10 && v37 == v12)
                {
                  swift_bridgeObjectRelease(v12);
                }
                else
                {
                  v38 = _stringCompareWithSmolCheck(_:_:expecting:)(v35, v37, v10, v12, 0);
                  swift_bridgeObjectRelease(v37);
                  if ((v38 & 1) == 0)
                  {
                    if (qword_100098258 != -1)
                      swift_once(&qword_100098258, sub_10002E590);
                    v39 = objc_msgSend((id)qword_10009B640, "styleKey");
                    v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
                    v42 = v41;

                    if (v40 == v10 && v42 == v12)
                    {
                      swift_bridgeObjectRelease(v12);
                    }
                    else
                    {
                      v43 = _stringCompareWithSmolCheck(_:_:expecting:)(v40, v42, v10, v12, 0);
                      swift_bridgeObjectRelease(v42);
                      if ((v43 & 1) == 0)
                      {
                        if (qword_100098260 != -1)
                          swift_once(&qword_100098260, sub_10002E69C);
                        v44 = objc_msgSend((id)qword_10009B648, "styleKey");
                        v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
                        v47 = v46;

                        if (v45 == v10 && v47 == v12)
                        {
                          swift_bridgeObjectRelease_n(v12, 2);
                        }
                        else
                        {
                          v48 = _stringCompareWithSmolCheck(_:_:expecting:)(v45, v47, v10, v12, 0);
                          swift_bridgeObjectRelease(v12);
                          swift_bridgeObjectRelease(v47);
                          if ((v48 & 1) == 0)
                          {

                            *a2 = 0;
                            goto LABEL_13;
                          }
                        }
                        v20 = (id *)&UITextFormattingViewControllerHighlightBlue;
LABEL_12:
                        v21 = *v20;

                        *a2 = (uint64_t)v21;
LABEL_13:
                        v18 = (unsigned int *)&enum case for UITextFormattingViewController.ChangeValue.highlight(_:);
                        goto LABEL_14;
                      }
                    }
                    swift_bridgeObjectRelease(v12);
                    v20 = (id *)&UITextFormattingViewControllerHighlightMint;
                    goto LABEL_12;
                  }
                }
                swift_bridgeObjectRelease(v12);
                v20 = (id *)&UITextFormattingViewControllerHighlightOrange;
                goto LABEL_12;
              }
            }
            swift_bridgeObjectRelease(v12);
            v20 = (id *)&UITextFormattingViewControllerHighlightPink;
            goto LABEL_12;
          }
        }
        swift_bridgeObjectRelease(v12);
        v20 = (id *)&UITextFormattingViewControllerHighlightPurple;
        goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease(v12);
    v20 = (id *)&UITextFormattingViewControllerHighlightDefault;
    goto LABEL_12;
  }
  *a2 = 0;
  a2[1] = 0;
  v17 = enum case for UITextFormattingViewController.ChangeValue.emphasisStyle(_:);
LABEL_15:
  v22 = type metadata accessor for UITextFormattingViewController.ChangeValue(0);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(a2, v17, v22);
}

uint64_t sub_10002BA00()
{
  uint64_t v0;
  id v1;
  NSString v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  id v13;
  uint64_t v14;

  v1 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v1, "stringForKey:", v2);

  if (v3)
  {
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v6 = v5;

    v7 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_allHighlightStyles);
    swift_bridgeObjectRetain(v6);
    v8 = swift_bridgeObjectRetain(v7);
    v9 = sub_100030D88(v8, v4, v6);
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease_n(v6, 2);
    if (v9)
      return (uint64_t)v9;
  }
  v10 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_allHighlightStyles);
  if (!((unint64_t)v10 >> 62))
  {
    v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain(v10);
    if (v11)
      goto LABEL_5;
LABEL_13:
    swift_bridgeObjectRelease(v10);
    return 0;
  }
  if (v10 < 0)
    v14 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_allHighlightStyles);
  else
    v14 = v10 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v10);
  result = _CocoaArrayWrapper.endIndex.getter(v14);
  if (!result)
    goto LABEL_13;
LABEL_5:
  if ((v10 & 0xC000000000000001) != 0)
  {
    v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v10);
    goto LABEL_8;
  }
  if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v13 = *(id *)(v10 + 32);
LABEL_8:
    v9 = v13;
    swift_bridgeObjectRelease(v10);
    return (uint64_t)v9;
  }
  __break(1u);
  return result;
}

id sub_10002BB94()
{
  uint64_t v0;
  uint64_t v1;
  id result;
  id v3;
  void *v4;
  uint64_t v5;
  id v6;

  v0 = (uint64_t)sub_10002AE28();
  v1 = v0;
  if (!((unint64_t)v0 >> 62))
  {
    result = *(id *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (result)
      goto LABEL_3;
LABEL_10:
    swift_bridgeObjectRelease(v1);
    v5 = sub_10002BA00();
    if (!v5)
      return objc_msgSend((id)objc_opt_self(UIColor), "secondaryLabelColor");
    v4 = (void *)v5;
LABEL_12:
    v6 = objc_msgSend(v4, "color");

    if (v6)
      return v6;
    return objc_msgSend((id)objc_opt_self(UIColor), "secondaryLabelColor");
  }
  if (v0 >= 0)
    v0 &= 0xFFFFFFFFFFFFFF8uLL;
  result = (id)_CocoaArrayWrapper.endIndex.getter(v0);
  if (!result)
    goto LABEL_10;
LABEL_3:
  if ((v1 & 0xC000000000000001) != 0)
  {
    v3 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v1);
    goto LABEL_6;
  }
  if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v3 = *(id *)(v1 + 32);
LABEL_6:
    v4 = v3;
    swift_bridgeObjectRelease(v1);
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

uint64_t sub_10002BC80(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t KeyPath;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void (*v21)(_BYTE *, _QWORD);
  unsigned int *v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  id v27;
  double v28;
  double v29;
  double v30;
  unsigned int *v31;
  double v32;
  double v33;
  void (*v34)(_BYTE *, unint64_t);
  uint64_t v35;
  uint64_t inited;
  NSString *v37;
  id v38;
  unint64_t v39;
  _BYTE v41[72];
  void *v42;
  _QWORD v43[4];

  v2 = v1;
  v4 = type metadata accessor for UITextFormattingViewController.ChangeValue(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = &v41[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  v10 = &v41[-v9];
  v11 = sub_10000498C(&qword_100098FC8);
  __chkstk_darwin(v11);
  v13 = &v41[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  KeyPath = swift_getKeyPath(&unk_100074780);
  swift_getKeyPath(&unk_1000747A8);
  static Published.subscript.getter(v13, v2, KeyPath);
  swift_release();
  swift_release();
  v15 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor(0);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v13, 1, v15)
    || (v23 = UITextFormattingViewController.FormattingDescriptor._paragraphStyle.getter()) == 0)
  {
    sub_1000092D0((uint64_t)v13, &qword_100098FC8);
  }
  else
  {
    v24 = (void *)v23;
    sub_1000092D0((uint64_t)v13, &qword_100098FC8);
    v25 = objc_msgSend(v24, "mutableCopy");

    _bridgeAnyObjectToAny(_:)(v43, v25);
    swift_unknownObjectRelease(v25);
    v26 = sub_1000096AC(0, &qword_1000996C0, NSMutableParagraphStyle_ptr);
    if ((swift_dynamicCast(&v42, v43, (char *)&type metadata for Any + 8, v26, 6) & 1) != 0)
    {
      v20 = v42;
      if (v42)
      {
        v19 = v42;
        goto LABEL_13;
      }
    }
  }
  v16 = objc_msgSend((id)objc_opt_self(NSParagraphStyle), "defaultParagraphStyle");
  v17 = objc_msgSend(v16, "mutableCopy");

  _bridgeAnyObjectToAny(_:)(v43, v17);
  swift_unknownObjectRelease(v17);
  v18 = sub_1000096AC(0, &qword_1000996C0, NSMutableParagraphStyle_ptr);
  if ((swift_dynamicCast(&v42, v43, (char *)&type metadata for Any + 8, v18, 6) & 1) != 0)
  {
    v19 = v42;
    if (v42)
    {
      v20 = 0;
LABEL_13:
      v27 = v20;
      objc_msgSend(v19, "firstLineHeadIndent");
      if ((a1 & 1) != 0)
        v29 = 28.0;
      else
        v29 = -28.0;
      v30 = v29 + v28;
      if ((a1 & 1) != 0)
        v31 = (unsigned int *)&enum case for UITextFormattingViewController.ChangeValue.increaseIndentation(_:);
      else
        v31 = (unsigned int *)&enum case for UITextFormattingViewController.ChangeValue.decreaseIndentation(_:);
      if (v30 <= 0.0)
        v30 = 0.0;
      objc_msgSend(v19, "setFirstLineHeadIndent:", v30);
      objc_msgSend(v19, "headIndent");
      v33 = v29 + v32;
      if (v33 <= 0.0)
        v33 = 0.0;
      objc_msgSend(v19, "setHeadIndent:", v33);
      v34 = *(void (**)(_BYTE *, unint64_t))(v2
                                                             + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_didChangeValue);
      (*(void (**)(_BYTE *, _QWORD, uint64_t))(v5 + 104))(v10, *v31, v4);
      v35 = sub_10000498C(&qword_10009AA80);
      inited = swift_initStackObject(v35, v41);
      *(_OWORD *)(inited + 16) = xmmword_100074A20;
      *(_QWORD *)(inited + 32) = NSParagraphStyleAttributeName;
      *(_QWORD *)(inited + 64) = sub_1000096AC(0, &qword_1000996C0, NSMutableParagraphStyle_ptr);
      *(_QWORD *)(inited + 40) = v19;
      swift_retain();
      v37 = NSParagraphStyleAttributeName;
      v38 = v19;
      v39 = sub_1000283F8(inited);
      v34(v10, v39);

      swift_release();
      swift_bridgeObjectRelease(v39);
      return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v10, v4);
    }
  }
  v21 = *(void (**)(_BYTE *, _QWORD))(v2
                                               + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_didChangeValue);
  v22 = (unsigned int *)&enum case for UITextFormattingViewController.ChangeValue.increaseIndentation(_:);
  if ((a1 & 1) == 0)
    v22 = (unsigned int *)&enum case for UITextFormattingViewController.ChangeValue.decreaseIndentation(_:);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v5 + 104))(v8, *v22, v4);
  swift_retain();
  v21(v8, 0);
  swift_release();
  v10 = v8;
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v10, v4);
}

uint64_t sub_10002C0A8()
{
  return sub_10002C0BC((uint64_t)&unk_1000745E8, (uint64_t)&unk_100074610);
}

uint64_t sub_10002C0BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath(a1);
  v5 = swift_getKeyPath(a2);
  static Published.subscript.getter(&v7, v2, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  return v7;
}

uint64_t sub_10002C124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4[17] = a4;
  v5 = sub_10000498C(&qword_1000995E8);
  v4[18] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for MainActor(0);
  v4[19] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  return swift_task_switch(sub_10002C1B4, v7, v8);
}

uint64_t sub_10002C1B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void (*v29)(uint64_t, _QWORD);
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;

  v1 = *(_QWORD *)(v0 + 136);
  swift_release();
  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_allHighlightStyles);
  if ((unint64_t)v2 >> 62)
    goto LABEL_16;
  v41 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v2);
  for (; v41; v41 = _CocoaArrayWrapper.endIndex.getter(v36))
  {
    v3 = 0;
    v38 = v0 + 104;
    v39 = v2;
    v40 = v2 & 0xC000000000000001;
    if ((v2 & 0xC000000000000001) != 0)
    {
LABEL_4:
      v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3, v2);
      goto LABEL_6;
    }
    while (1)
    {
      v4 = *(id *)(v2 + 8 * v3 + 32);
LABEL_6:
      v5 = v4;
      if (__OFADD__(v3, 1))
        break;
      v44 = v3 + 1;
      v6 = *(_QWORD *)(v0 + 144);
      v7 = Image.init(systemName:)(0x662E656C63726963, 0xEB000000006C6C69);
      v8 = Color.init(uiColor:)(objc_msgSend(v5, "color"));
      KeyPath = swift_getKeyPath(&unk_100074630);
      v10 = type metadata accessor for Font.Design(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v6, 1, 1, v10);
      v11 = static Font.system(size:weight:design:)(0, 1, v6, 100.0);
      sub_1000092D0(v6, &qword_1000995E8);
      v12 = swift_getKeyPath(&unk_100074660);
      v13 = static Edge.Set.all.getter();
      v14 = v13;
      v15 = EdgeInsets.init(_all:)(v13, 10.0);
      *(_QWORD *)(v0 + 16) = v7;
      *(_QWORD *)(v0 + 24) = KeyPath;
      *(_QWORD *)(v0 + 32) = v8;
      *(_QWORD *)(v0 + 40) = v12;
      *(_QWORD *)(v0 + 48) = v11;
      *(_BYTE *)(v0 + 56) = v14;
      *(double *)(v0 + 64) = v15;
      *(_QWORD *)(v0 + 72) = v16;
      *(_QWORD *)(v0 + 80) = v17;
      *(_QWORD *)(v0 + 88) = v18;
      *(_BYTE *)(v0 + 96) = 0;
      v19 = sub_10000498C(&qword_1000995F0);
      swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
      ImageRenderer.init(content:)(v0 + 16);
      v20 = ImageRenderer.uiImage.getter();
      if (v20)
      {
        v21 = (void *)v20;
        if ((static Task<>.isCancelled.getter() & 1) != 0)
        {
          swift_bridgeObjectRelease(v2);

          swift_release();
          goto LABEL_21;
        }
        v43 = v5;
        v22 = *(_QWORD *)(v0 + 136);
        v23 = objc_msgSend(v5, "styleKey");
        v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
        v25 = v24;

        v26 = swift_getKeyPath(&unk_1000745E8);
        v27 = swift_getKeyPath(&unk_100074610);
        v28 = v21;
        v29 = (void (*)(uint64_t, _QWORD))static Published.subscript.modify(v38, v22, v26, v27);
        v30 = v3;
        v32 = v31;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v31);
        v45 = *v32;
        *v32 = 0x8000000000000000;
        sub_10002F448((uint64_t)v28, v42, v25, isUniquelyReferenced_nonNull_native);
        v34 = *v32;
        *v32 = v45;
        v3 = v30;
        swift_bridgeObjectRelease(v34);
        v35 = v25;
        v2 = v39;
        swift_bridgeObjectRelease(v35);
        v29(v38, 0);
        swift_release();
        swift_release();

        swift_release();
      }
      else
      {
        swift_release();

      }
      if (v44 == v41)
        goto LABEL_20;
      ++v3;
      if (v40)
        goto LABEL_4;
    }
    __break(1u);
LABEL_16:
    if (v2 < 0)
      v36 = v2;
    else
      v36 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
  }
LABEL_20:
  swift_bridgeObjectRelease(v2);
LABEL_21:
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002C530(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_1000092D0(a1, &qword_1000995C0);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v15 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v16 = swift_allocObject(&unk_10008EDB0, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v17 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  else
  {
    v17 = 0;
  }
  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_1000995E0, v16);
}

void sub_10002C67C(id *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, _QWORD *a4@<X8>)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char **v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  char v21;
  char **v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  id v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  id v41;
  Class isa;
  id v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE v51[24];
  void *v52;
  unint64_t v53;

  v6 = objc_msgSend(*a1, "components");
  v7 = sub_1000096AC(0, &qword_100098AB0, UITextFormattingViewControllerComponent_ptr);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

  v9 = v8;
  v53 = (unint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)v8 >> 62)
  {
    if (v8 < 0)
      v40 = v8;
    else
      v40 = v8 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v8);
    v10 = _CocoaArrayWrapper.endIndex.getter(v40);
    swift_bridgeObjectRelease(v9);
    if (v10)
      goto LABEL_3;
LABEL_29:
    swift_bridgeObjectRelease(v9);
    v39 = (unint64_t)_swiftEmptyArrayStorage;
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0)
      goto LABEL_33;
    goto LABEL_30;
  }
  v10 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v10)
    goto LABEL_29;
LABEL_3:
  if (v10 < 1)
  {
    __break(1u);
    return;
  }
  v49 = a2;
  v46 = a4;
  v11 = 0;
  v12 = v9 & 0xC000000000000001;
  v48 = UITextFormattingViewControllerFormattingStylesComponentKey;
  v13 = &selRef_runWithFontNamesForFamilyName_usingBlock_;
  v50 = v10;
  do
  {
    v15 = v12;
    v16 = v9;
    if (v12)
      v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v11, v9);
    else
      v17 = *(id *)(v9 + 8 * v11 + 32);
    v18 = v17;
    v19 = objc_msgSend(v17, v13[131]);
    swift_beginAccess(v49, v51, 33, 0);
    v20 = v19;
    v21 = sub_100014904(&v52, v20);
    swift_endAccess(v51);
    v22 = v13;
    v23 = v52;

    if ((v21 & 1) == 0)
    {

      v13 = v22;
      v12 = v15;
      v9 = v16;
      goto LABEL_6;
    }
    v24 = objc_msgSend(v18, v22[131]);
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    v27 = v26;
    v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
    v30 = v28;
    if (v25 != v29 || v27 != v28)
    {
      v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v27, v29, v28, 0);

      swift_bridgeObjectRelease(v27);
      swift_bridgeObjectRelease(v30);
      v12 = v15;
      if ((v31 & 1) != 0 && (a3 & 1) == 0)
        goto LABEL_18;
LABEL_19:
      v13 = &selRef_runWithFontNamesForFamilyName_usingBlock_;
      v32 = objc_msgSend(v18, "componentKey");
      v33 = sub_10002CA44((uint64_t)v32);

      v9 = v16;
      if ((v33 & 1) != 0
        || (v35 = objc_opt_self(_UITextFormattingViewControllerCustomComponent),
            (v34 = swift_dynamicCastObjCClass(v18, v35)) != 0))
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v34);
        v36 = *(_QWORD *)(v53 + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v36);
        v37 = v36;
        v9 = v16;
        v38 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v37, v18);
        specialized ContiguousArray._endMutation()(v38);
      }
      else
      {

      }
LABEL_6:
      v14 = v50;
      goto LABEL_7;
    }

    swift_bridgeObjectRelease_n(v27, 2);
    v12 = v15;
    if ((a3 & 1) != 0)
      goto LABEL_19;
LABEL_18:

    v9 = v16;
    v14 = v50;
    v13 = &selRef_runWithFontNamesForFamilyName_usingBlock_;
LABEL_7:
    ++v11;
  }
  while (v14 != v11);
  swift_bridgeObjectRelease(v9);
  v39 = v53;
  a4 = v46;
  if ((v53 & 0x8000000000000000) != 0)
  {
LABEL_33:
    v44 = swift_retain(v39);
    v45 = _CocoaArrayWrapper.endIndex.getter(v44);
    swift_release(v39);
    if (!v45)
      goto LABEL_34;
LABEL_32:
    v41 = objc_allocWithZone((Class)UITextFormattingViewControllerComponentGroup);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_release(v39);
    v43 = objc_msgSend(v41, "initWithComponents:", isa);

    goto LABEL_35;
  }
LABEL_30:
  if ((v39 & 0x4000000000000000) != 0)
    goto LABEL_33;
  if (*(_QWORD *)(v39 + 16))
    goto LABEL_32;
LABEL_34:
  swift_release(v39);
  v43 = 0;
LABEL_35:
  *a4 = v43;
}

uint64_t sub_10002CA44(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;

  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(UITextFormattingViewControllerFormattingStylesComponentKey);
  v4 = v3;
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  if (v2 == v5 && v4 == v6)
    goto LABEL_17;
  v8 = v6;
  v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, v4, v5, v6, 0);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v8);
  if ((v9 & 1) == 0)
  {
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(UITextFormattingViewControllerFontAttributesComponentKey);
    v4 = v12;
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v11 != v13 || v4 != v14)
    {
      v16 = v14;
      v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v4, v13, v14, 0);
      swift_bridgeObjectRelease(v4);
      swift_bridgeObjectRelease(v16);
      if ((v17 & 1) != 0)
        goto LABEL_6;
      v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(UITextFormattingViewControllerFontPickerComponentKey);
      v4 = v19;
      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
      v22 = v20;
      if (v18 != v21 || v4 != v20)
      {
        v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v4, v21, v20, 0);
        swift_bridgeObjectRelease(v4);
        swift_bridgeObjectRelease(v22);
        if ((v23 & 1) != 0)
          goto LABEL_6;
        v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(UITextFormattingViewControllerFontSizeComponentKey);
        v4 = v25;
        v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
        v28 = v26;
        if (v24 != v27 || v4 != v26)
        {
          v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v4, v27, v26, 0);
          swift_bridgeObjectRelease(v4);
          swift_bridgeObjectRelease(v28);
          if ((v31 & 1) != 0)
            goto LABEL_6;
          v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(UITextFormattingViewControllerFontPointSizeComponentKey);
          v4 = v33;
          v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          v36 = v34;
          if (v32 != v35 || v4 != v34)
          {
            v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v32, v4, v35, v34, 0);
            swift_bridgeObjectRelease(v4);
            swift_bridgeObjectRelease(v36);
            if ((v37 & 1) != 0)
              goto LABEL_6;
            v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(UITextFormattingViewControllerTextAlignmentComponentKey);
            v4 = v39;
            v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
            v42 = v40;
            if (v38 != v41 || v4 != v40)
            {
              v43 = _stringCompareWithSmolCheck(_:_:expecting:)(v38, v4, v41, v40, 0);
              swift_bridgeObjectRelease(v4);
              swift_bridgeObjectRelease(v42);
              if ((v43 & 1) != 0)
                goto LABEL_6;
              v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(UITextFormattingViewControllerTextAlignmentAndJustificationComponentKey);
              v4 = v45;
              v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
              v48 = v46;
              if (v44 != v47 || v4 != v46)
              {
                v49 = _stringCompareWithSmolCheck(_:_:expecting:)(v44, v4, v47, v46, 0);
                swift_bridgeObjectRelease(v4);
                swift_bridgeObjectRelease(v48);
                if ((v49 & 1) != 0)
                  goto LABEL_6;
                v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(UITextFormattingViewControllerTextIndentationComponentKey);
                v4 = v51;
                v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
                v54 = v52;
                if (v50 != v53 || v4 != v52)
                {
                  v55 = _stringCompareWithSmolCheck(_:_:expecting:)(v50, v4, v53, v52, 0);
                  swift_bridgeObjectRelease(v4);
                  swift_bridgeObjectRelease(v54);
                  if ((v55 & 1) != 0)
                    goto LABEL_6;
                  v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(UITextFormattingViewControllerLineHeightComponentKey);
                  v4 = v57;
                  v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
                  v60 = v58;
                  if (v56 != v59 || v4 != v58)
                  {
                    v61 = _stringCompareWithSmolCheck(_:_:expecting:)(v56, v4, v59, v58, 0);
                    swift_bridgeObjectRelease(v4);
                    swift_bridgeObjectRelease(v60);
                    if ((v61 & 1) != 0)
                      goto LABEL_6;
                    v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(UITextFormattingViewControllerListStylesComponentKey);
                    v4 = v63;
                    v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
                    v66 = v64;
                    if (v62 != v65 || v4 != v64)
                    {
                      v67 = _stringCompareWithSmolCheck(_:_:expecting:)(v62, v4, v65, v64, 0);
                      swift_bridgeObjectRelease(v4);
                      swift_bridgeObjectRelease(v66);
                      if ((v67 & 1) != 0)
                        goto LABEL_6;
                      v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(UITextFormattingViewControllerTextColorComponentKey);
                      v4 = v69;
                      v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
                      v72 = v70;
                      if (v68 != v71 || v4 != v70)
                      {
                        v73 = _stringCompareWithSmolCheck(_:_:expecting:)(v68, v4, v71, v70, 0);
                        swift_bridgeObjectRelease(v4);
                        swift_bridgeObjectRelease(v72);
                        if ((v73 & 1) != 0)
                          goto LABEL_6;
                        v74 = static String._unconditionallyBridgeFromObjectiveC(_:)(UITextFormattingViewControllerQuoteLevelComponentKey);
                        v4 = v75;
                        v77 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
                        v78 = v76;
                        if (v74 != v77 || v4 != v76)
                        {
                          v79 = _stringCompareWithSmolCheck(_:_:expecting:)(v74, v4, v77, v76, 0);
                          swift_bridgeObjectRelease(v4);
                          swift_bridgeObjectRelease(v78);
                          if ((v79 & 1) != 0)
                            goto LABEL_6;
                          v80 = static String._unconditionallyBridgeFromObjectiveC(_:)(UITextFormattingViewControllerBlockquoteComponentKey);
                          v4 = v81;
                          v83 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
                          v84 = v82;
                          if (v80 != v83 || v4 != v82)
                          {
                            v85 = _stringCompareWithSmolCheck(_:_:expecting:)(v80, v4, v83, v82, 0);
                            swift_bridgeObjectRelease(v4);
                            swift_bridgeObjectRelease(v84);
                            if ((v85 & 1) != 0)
                              goto LABEL_6;
                            v86 = static String._unconditionallyBridgeFromObjectiveC(_:)(UITextFormattingViewControllerEmphasisStylesComponentKey);
                            v4 = v87;
                            v89 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
                            v90 = v88;
                            if (v86 != v89 || v4 != v88)
                            {
                              v91 = _stringCompareWithSmolCheck(_:_:expecting:)(v86, v4, v89, v88, 0);
                              swift_bridgeObjectRelease(v4);
                              swift_bridgeObjectRelease(v90);
                              if ((v91 & 1) != 0)
                                goto LABEL_6;
                              v92 = static String._unconditionallyBridgeFromObjectiveC(_:)(UITextFormattingViewControllerHighlightComponentKey);
                              v4 = v93;
                              v95 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
                              v96 = v94;
                              if (v92 != v95 || v4 != v94)
                              {
                                v97 = _stringCompareWithSmolCheck(_:_:expecting:)(v92, v4, v95, v94, 0);
                                swift_bridgeObjectRelease(v4);
                                swift_bridgeObjectRelease(v96);
                                if ((v97 & 1) != 0)
                                  goto LABEL_6;
                                v98 = static String._unconditionallyBridgeFromObjectiveC(_:)(UITextFormattingViewControllerHighlightPickerComponentKey);
                                v4 = v99;
                                v101 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
                                v29 = v100;
                                if (v98 == v101 && v4 == v100)
                                  v10 = 1;
                                else
                                  v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v98, v4, v101, v100, 0);
LABEL_18:
                                swift_bridgeObjectRelease(v4);
                                swift_bridgeObjectRelease(v29);
                                return v10 & 1;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_17:
    v10 = 1;
    v29 = v4;
    goto LABEL_18;
  }
LABEL_6:
  v10 = 1;
  return v10 & 1;
}

uint64_t sub_10002D0BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = v0 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState__groups;
  v2 = sub_10000498C(&qword_100099610);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState__useLandscapeLayout;
  v4 = sub_10000498C(&qword_100098750);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(v3, v4);
  v6 = v0 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState__recentFonts;
  v7 = sub_10000498C(&qword_100098738);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = v0 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState__formattingDescriptor;
  v9 = sub_10000498C(&qword_100099618);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = v0 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState__formattingStyles;
  v11 = sub_10000498C(&qword_100099620);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = v0 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState__emphasisStyles;
  v13 = sub_10000498C(&qword_100099628);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  v5(v0 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState__isFormattingUITextView, v4);
  v14 = v0 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState__disabledComponents;
  v15 = sub_10000498C(&qword_100099630);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_cancellables));

  v16 = v0 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState__layout;
  v17 = sub_10000498C(&qword_100099638);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  v18 = v0 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState__uiConfig;
  v19 = sub_10000498C(&qword_100099640);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
  v20 = v0 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState__availableWidth;
  v21 = sub_10000498C(&qword_100098758);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
  v22 = v0 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState__idealHeight;
  v23 = sub_10000498C(&qword_100099648);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v22, v23);
  v5(v0 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState__hasParentBottomSafeAreaInset, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_allHighlightStyles));
  swift_release();
  sub_100020C80(*(_QWORD *)(v0 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_close), *(_QWORD *)(v0 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_close + 8));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v24 = v0 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState__highlightPreviewImages;
  v25 = sub_10000498C(&qword_100099650);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v24, v25);
  swift_release();
  return v0;
}

uint64_t sub_10002D3D4()
{
  uint64_t v0;

  sub_10002D0BC();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10002D3F8()
{
  return type metadata accessor for TextFormattingState(0);
}

uint64_t type metadata accessor for TextFormattingState(uint64_t a1)
{
  uint64_t result;

  result = qword_1000993C8;
  if (!qword_1000993C8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TextFormattingState);
  return result;
}

void sub_10002D43C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD v27[33];

  sub_1000046A4(319, &qword_1000993D8, &qword_1000993E0);
  if (v3 <= 0x3F)
  {
    v27[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10002D710(319, &qword_1000983B8, (uint64_t)&type metadata for Bool);
    if (v5 <= 0x3F)
    {
      v6 = *(_QWORD *)(v4 - 8) + 64;
      v27[1] = v6;
      sub_1000046A4(319, &qword_100098390, &qword_100098398);
      if (v8 <= 0x3F)
      {
        v27[2] = *(_QWORD *)(v7 - 8) + 64;
        sub_1000046A4(319, &qword_1000993E8, &qword_100098FC8);
        if (v10 <= 0x3F)
        {
          v27[3] = *(_QWORD *)(v9 - 8) + 64;
          sub_1000046A4(319, &qword_1000993F0, &qword_1000993F8);
          if (v12 <= 0x3F)
          {
            v27[4] = *(_QWORD *)(v11 - 8) + 64;
            sub_1000046A4(319, &qword_100099400, &qword_100098B70);
            if (v14 <= 0x3F)
            {
              v27[5] = *(_QWORD *)(v13 - 8) + 64;
              v27[6] = v6;
              sub_1000046A4(319, &qword_100099408, &qword_100099410);
              if (v16 <= 0x3F)
              {
                v27[7] = *(_QWORD *)(v15 - 8) + 64;
                v27[8] = &unk_100074388;
                v27[9] = &unk_100074388;
                v27[10] = &unk_100074388;
                v27[11] = &unk_100074388;
                v27[12] = &unk_100074388;
                v27[13] = &unk_100074388;
                v27[14] = &unk_100074388;
                v27[15] = (char *)&value witness table for Builtin.BridgeObject + 64;
                v27[16] = &unk_1000743A0;
                sub_10002D710(319, &qword_100099418, (uint64_t)&type metadata for TextFormattingLayout);
                if (v18 <= 0x3F)
                {
                  v27[17] = *(_QWORD *)(v17 - 8) + 64;
                  sub_10002D710(319, &qword_100099420, (uint64_t)&type metadata for TFUIConfig);
                  if (v20 <= 0x3F)
                  {
                    v27[18] = *(_QWORD *)(v19 - 8) + 64;
                    sub_10002D710(319, &qword_1000983C0, (uint64_t)&type metadata for CGFloat);
                    if (v22 <= 0x3F)
                    {
                      v27[19] = *(_QWORD *)(v21 - 8) + 64;
                      sub_1000046A4(319, &qword_100099428, &qword_100099430);
                      if (v24 <= 0x3F)
                      {
                        v27[20] = *(_QWORD *)(v23 - 8) + 64;
                        v27[21] = v6;
                        v27[22] = &unk_1000743B8;
                        v27[23] = &unk_1000743D0;
                        v27[24] = (char *)&value witness table for Builtin.BridgeObject + 64;
                        v27[25] = (char *)&value witness table for () + 64;
                        v27[26] = &unk_1000743E8;
                        v27[27] = (char *)&value witness table for () + 64;
                        v27[28] = (char *)&value witness table for () + 64;
                        v27[29] = (char *)&value witness table for () + 64;
                        v27[30] = (char *)&value witness table for () + 64;
                        sub_1000046A4(319, &qword_100099438, (uint64_t *)&unk_100099440);
                        if (v26 <= 0x3F)
                        {
                          v27[31] = *(_QWORD *)(v25 - 8) + 64;
                          v27[32] = &unk_1000743A0;
                          swift_updateClassMetadata2(a1, 256, 33, v27, a1 + 80);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_10002D710(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = type metadata accessor for Published(0, a3);
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t sub_10002D75C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100020990(a1, (uint64_t)&unk_100074480, (uint64_t)&unk_1000744A8, a2);
}

uint64_t sub_10002D784@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100020990(a1, (uint64_t)&unk_1000744C8, (uint64_t)&unk_1000744F0, a2);
}

uint64_t sub_10002D7C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v0 = sub_100011500(1, (uint64_t)&off_10008E008);
  v2 = v1;
  v4 = v3;
  v6 = v5;
  if ((v5 & 1) == 0)
    goto LABEL_2;
  v8 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v9 = swift_unknownObjectRetain_n(v0, 2);
  v10 = (_QWORD *)swift_dynamicCastClass(v9, v8);
  if (!v10)
  {
    swift_unknownObjectRelease(v0);
    v10 = _swiftEmptyArrayStorage;
  }
  v11 = v10[2];
  v12 = swift_release();
  if (__OFSUB__(v6 >> 1, v4))
  {
    __break(1u);
    goto LABEL_11;
  }
  v12 = v0;
  if (v11 != (v6 >> 1) - v4)
  {
LABEL_11:
    swift_unknownObjectRelease(v12);
LABEL_2:
    v7 = sub_100013C24(v0, v2, v4, v6);
    goto LABEL_9;
  }
  v7 = (_QWORD *)swift_dynamicCastClass(v0, v8);
  if (!v7)
  {
    swift_unknownObjectRelease(v0);
    v7 = _swiftEmptyArrayStorage;
  }
LABEL_9:
  result = swift_unknownObjectRelease(v0);
  qword_10009B600 = (uint64_t)v7;
  return result;
}

void sub_10002D8BC(char *a1)
{
  sub_100024FB0(*a1);
}

void sub_10002D8C8()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_10002D90C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6E6568707968, 0xE600000000000000);
  swift_bridgeObjectRelease(0xE600000000000000);
  return Hasher._finalize()();
}

void sub_10002D974()
{
  __asm { BR              X10 }
}

uint64_t sub_10002D9A8(uint64_t a1)
{
  String.hash(into:)(a1, 0x6E6568707968, 0xE600000000000000);
  return swift_bridgeObjectRelease(0xE600000000000000);
}

void sub_10002D9FC(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_10002DA3C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6E6568707968, 0xE600000000000000);
  swift_bridgeObjectRelease(0xE600000000000000);
  return Hasher._finalize()();
}

unint64_t sub_10002DAA4@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10003100C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10002DAD0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_10002DAF8 + 4 * byte_100074359[*v0]))();
}

void sub_10002DAF8(_QWORD *a1@<X8>)
{
  *a1 = 0x6E6568707968;
  a1[1] = 0xE600000000000000;
}

void sub_10002DB10(_QWORD *a1@<X8>)
{
  *a1 = 0x6C616D69636564;
  a1[1] = 0xE700000000000000;
}

void sub_10002DB2C(_QWORD *a1@<X8>)
{
  *a1 = 0x726568746FLL;
  a1[1] = 0xE500000000000000;
}

void sub_10002DB44(_QWORD *a1@<X8>)
{
  *a1 = &off_10008E0B0;
}

BOOL sub_10002DB54(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

BOOL sub_10002DB68(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 >= *a1;
}

BOOL sub_10002DB7C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 >= *a2;
}

BOOL sub_10002DB90(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 < *a1;
}

void sub_10002DBA4()
{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;

  v0 = sub_10000498C(&qword_1000996B8);
  v1 = swift_allocObject(v0, 72, 7);
  v2 = j__malloc_size((const void *)v1);
  v3 = v2 - 32;
  if (v2 < 32)
    v3 = v2 - 25;
  *(_QWORD *)(v1 + 16) = 5;
  *(_QWORD *)(v1 + 24) = 2 * (v3 >> 3);
  *(_OWORD *)(v1 + 32) = xmmword_100074A30;
  *(_OWORD *)(v1 + 48) = xmmword_100074A40;
  *(_QWORD *)(v1 + 64) = 4;
  swift_retain();
  v4 = 32;
  while (1)
  {
    v5 = *(_QWORD *)(v1 + v4);
    sub_100013D7C(0, 6, 0);
    v6 = exp2((double)v5);
    if ((~*(_QWORD *)&v6 & 0x7FF0000000000000) == 0)
      break;
    if (v6 <= -9.22337204e18)
      goto LABEL_28;
    if (v6 >= 9.22337204e18)
      goto LABEL_29;
    v7 = (uint64_t)v6;
    v8 = 7 * (uint64_t)v6;
    if ((unsigned __int128)(7 * (__int128)(uint64_t)v6) >> 64 != v8 >> 63)
      goto LABEL_30;
    v10 = _swiftEmptyArrayStorage[2];
    v9 = _swiftEmptyArrayStorage[3];
    v11 = v10 + 1;
    if (v10 >= v9 >> 1)
      sub_100013D7C(v9 > 1, v10 + 1, 1);
    _swiftEmptyArrayStorage[2] = v11;
    *(double *)&_swiftEmptyArrayStorage[v10 + 4] = (double)v8;
    if ((unsigned __int128)(8 * (__int128)v7) >> 64 != (8 * v7) >> 63)
      goto LABEL_31;
    v12 = _swiftEmptyArrayStorage[3];
    v13 = v10 + 2;
    if (v11 >= v12 >> 1)
      sub_100013D7C(v12 > 1, v13, 1);
    _swiftEmptyArrayStorage[2] = v13;
    *(double *)&_swiftEmptyArrayStorage[v11 + 4] = (double)(8 * v7);
    if ((unsigned __int128)(9 * (__int128)v7) >> 64 != (9 * v7) >> 63)
      goto LABEL_32;
    v15 = _swiftEmptyArrayStorage[2];
    v14 = _swiftEmptyArrayStorage[3];
    v16 = v15 + 1;
    if (v15 >= v14 >> 1)
      sub_100013D7C(v14 > 1, v15 + 1, 1);
    _swiftEmptyArrayStorage[2] = v16;
    *(double *)&_swiftEmptyArrayStorage[v15 + 4] = (double)(9 * v7);
    if ((unsigned __int128)(10 * (__int128)v7) >> 64 != (10 * v7) >> 63)
      goto LABEL_33;
    v17 = _swiftEmptyArrayStorage[3];
    v18 = v15 + 2;
    if (v16 >= v17 >> 1)
      sub_100013D7C(v17 > 1, v18, 1);
    _swiftEmptyArrayStorage[2] = v18;
    *(double *)&_swiftEmptyArrayStorage[v16 + 4] = (double)(10 * v7);
    if ((unsigned __int128)(11 * (__int128)v7) >> 64 != (11 * v7) >> 63)
      goto LABEL_34;
    v20 = _swiftEmptyArrayStorage[2];
    v19 = _swiftEmptyArrayStorage[3];
    v21 = v20 + 1;
    if (v20 >= v19 >> 1)
      sub_100013D7C(v19 > 1, v20 + 1, 1);
    _swiftEmptyArrayStorage[2] = v21;
    *(double *)&_swiftEmptyArrayStorage[v20 + 4] = (double)(11 * v7);
    if ((unsigned __int128)(12 * (__int128)v7) >> 64 != (12 * v7) >> 63)
      goto LABEL_35;
    v22 = _swiftEmptyArrayStorage[3];
    v23 = v20 + 2;
    if (v21 >= v22 >> 1)
      sub_100013D7C(v22 > 1, v23, 1);
    _swiftEmptyArrayStorage[2] = v23;
    *(double *)&_swiftEmptyArrayStorage[v21 + 4] = (double)(12 * v7);
    sub_10001A4CC((uint64_t)_swiftEmptyArrayStorage);
    v4 += 8;
    if (v4 == 72)
    {
      swift_release_n(v1, 2);
      qword_10009B608 = (uint64_t)_swiftEmptyArrayStorage;
      return;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
}

uint64_t sub_10002DF28()
{
  if (qword_100098218 != -1)
    swift_once(&qword_100098218, sub_10002DBA4);
  qword_10009B610 = qword_10009B608;
  return swift_bridgeObjectRetain(qword_10009B608);
}

id sub_10002DF70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  Class isa;
  id result;
  uint64_t v7;

  v0 = type metadata accessor for Locale(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin();
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = objc_msgSend(objc_allocWithZone((Class)NSNumberFormatter), "init");
  static Locale.current.getter(objc_msgSend(v4, "setNumberStyle:", 1));
  isa = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  objc_msgSend(v4, "setLocale:", isa);

  result = objc_msgSend(v4, "setMaximumFractionDigits:", 0);
  qword_100099300 = (uint64_t)v4;
  return result;
}

void sub_10002E054()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSString v4;
  NSString v5;
  id v6;

  if (qword_1000981A8 != -1)
    swift_once(&qword_1000981A8, sub_100024330);
  v0 = *(_QWORD *)algn_10009B548;
  v1 = (void *)objc_opt_self(UIColor);
  swift_bridgeObjectRetain(v0);
  v2 = objc_msgSend(v1, "secondaryLabelColor");
  v3 = objc_allocWithZone((Class)_UITextFormattingViewControllerEmphasisStyle);
  v4 = String._bridgeToObjectiveC()();
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v0);
  v6 = objc_msgSend(v3, "initWithStyleKey:title:color:", v4, v5, v2);

  qword_10009B618 = (uint64_t)v6;
}

void sub_10002E160()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSString v4;
  NSString v5;
  id v6;

  if (qword_1000981A8 != -1)
    swift_once(&qword_1000981A8, sub_100024330);
  v0 = *(_QWORD *)algn_10009B548;
  v1 = (void *)objc_opt_self(UIColor);
  swift_bridgeObjectRetain(v0);
  v2 = objc_msgSend(v1, "systemPurpleColor");
  v3 = objc_allocWithZone((Class)_UITextFormattingViewControllerEmphasisStyle);
  v4 = String._bridgeToObjectiveC()();
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v0);
  v6 = objc_msgSend(v3, "initWithStyleKey:title:color:", v4, v5, v2);

  qword_10009B620 = (uint64_t)v6;
}

void sub_10002E26C()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSString v4;
  NSString v5;
  id v6;

  if (qword_1000981A8 != -1)
    swift_once(&qword_1000981A8, sub_100024330);
  v0 = *(_QWORD *)algn_10009B548;
  v1 = (void *)objc_opt_self(UIColor);
  swift_bridgeObjectRetain(v0);
  v2 = objc_msgSend(v1, "systemPurpleColor");
  v3 = objc_allocWithZone((Class)_UITextFormattingViewControllerEmphasisStyle);
  v4 = String._bridgeToObjectiveC()();
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v0);
  v6 = objc_msgSend(v3, "initWithStyleKey:title:color:", v4, v5, v2);

  qword_10009B628 = (uint64_t)v6;
}

void sub_10002E378()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSString v4;
  NSString v5;
  id v6;

  if (qword_1000981B0 != -1)
    swift_once(&qword_1000981B0, sub_100024430);
  v0 = *(_QWORD *)algn_10009B558;
  v1 = (void *)objc_opt_self(UIColor);
  swift_bridgeObjectRetain(v0);
  v2 = objc_msgSend(v1, "systemPinkColor");
  v3 = objc_allocWithZone((Class)_UITextFormattingViewControllerEmphasisStyle);
  v4 = String._bridgeToObjectiveC()();
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v0);
  v6 = objc_msgSend(v3, "initWithStyleKey:title:color:", v4, v5, v2);

  qword_10009B630 = (uint64_t)v6;
}

void sub_10002E484()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSString v4;
  NSString v5;
  id v6;

  if (qword_1000981B8 != -1)
    swift_once(&qword_1000981B8, sub_10002452C);
  v0 = *(_QWORD *)algn_10009B568;
  v1 = (void *)objc_opt_self(UIColor);
  swift_bridgeObjectRetain(v0);
  v2 = objc_msgSend(v1, "systemOrangeColor");
  v3 = objc_allocWithZone((Class)_UITextFormattingViewControllerEmphasisStyle);
  v4 = String._bridgeToObjectiveC()();
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v0);
  v6 = objc_msgSend(v3, "initWithStyleKey:title:color:", v4, v5, v2);

  qword_10009B638 = (uint64_t)v6;
}

void sub_10002E590()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSString v4;
  NSString v5;
  id v6;

  if (qword_1000981C0 != -1)
    swift_once(&qword_1000981C0, sub_10002462C);
  v0 = *(_QWORD *)algn_10009B578;
  v1 = (void *)objc_opt_self(UIColor);
  swift_bridgeObjectRetain(v0);
  v2 = objc_msgSend(v1, "systemMintColor");
  v3 = objc_allocWithZone((Class)_UITextFormattingViewControllerEmphasisStyle);
  v4 = String._bridgeToObjectiveC()();
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v0);
  v6 = objc_msgSend(v3, "initWithStyleKey:title:color:", v4, v5, v2);

  qword_10009B640 = (uint64_t)v6;
}

void sub_10002E69C()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSString v4;
  NSString v5;
  id v6;

  if (qword_1000981C8 != -1)
    swift_once(&qword_1000981C8, sub_100024728);
  v0 = *(_QWORD *)algn_10009B588;
  v1 = (void *)objc_opt_self(UIColor);
  swift_bridgeObjectRetain(v0);
  v2 = objc_msgSend(v1, "systemBlueColor");
  v3 = objc_allocWithZone((Class)_UITextFormattingViewControllerEmphasisStyle);
  v4 = String._bridgeToObjectiveC()();
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v0);
  v6 = objc_msgSend(v3, "initWithStyleKey:title:color:", v4, v5, v2);

  qword_10009B648 = (uint64_t)v6;
}

id sub_10002E7A8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  void *v16;

  v0 = sub_10000498C(&qword_100098B10);
  v1 = swift_allocObject(v0, 72, 7);
  *(_OWORD *)(v1 + 16) = xmmword_100074A50;
  if (qword_100098240 != -1)
    swift_once(&qword_100098240, sub_10002E26C);
  v2 = (void *)qword_10009B628;
  *(_QWORD *)(v1 + 32) = qword_10009B628;
  v3 = qword_100098248;
  v4 = v2;
  if (v3 != -1)
    swift_once(&qword_100098248, sub_10002E378);
  v5 = (void *)qword_10009B630;
  *(_QWORD *)(v1 + 40) = qword_10009B630;
  v6 = qword_100098250;
  v7 = v5;
  if (v6 != -1)
    swift_once(&qword_100098250, sub_10002E484);
  v8 = (void *)qword_10009B638;
  *(_QWORD *)(v1 + 48) = qword_10009B638;
  v9 = qword_100098258;
  v10 = v8;
  if (v9 != -1)
    swift_once(&qword_100098258, sub_10002E590);
  v11 = (void *)qword_10009B640;
  *(_QWORD *)(v1 + 56) = qword_10009B640;
  v12 = qword_100098260;
  v13 = v11;
  if (v12 != -1)
    swift_once(&qword_100098260, sub_10002E69C);
  v14 = qword_10009B648;
  v16 = (void *)qword_10009B648;
  *(_QWORD *)(v1 + 64) = qword_10009B648;
  specialized Array._endMutation()(v14);
  qword_10009B650 = v1;
  return v16;
}

uint64_t sub_10002E91C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100020990(a1, (uint64_t)&unk_100074738, (uint64_t)&unk_100074760, a2);
}

uint64_t sub_10002E930(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10002E96C(a1, a2, a3, a4, (uint64_t)&unk_100074738, (uint64_t)&unk_100074760);
}

uint64_t sub_10002E944@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100020990(a1, (uint64_t)&unk_1000745E8, (uint64_t)&unk_100074610, a2);
}

uint64_t sub_10002E958(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10002E96C(a1, a2, a3, a4, (uint64_t)&unk_1000745E8, (uint64_t)&unk_100074610);
}

uint64_t sub_10002E96C(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v12;

  v7 = *a1;
  v8 = *a2;
  KeyPath = swift_getKeyPath(a5);
  v10 = swift_getKeyPath(a6);
  v12 = v7;
  swift_bridgeObjectRetain(v7);
  swift_retain(v8);
  return static Published.subscript.setter(&v12, v8, KeyPath, v10);
}

uint64_t sub_10002E9E0(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_10002EA44;
  return v6(a1);
}

uint64_t sub_10002EA44()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10002EA90@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10002EAB8(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.foregroundColor.setter(v1);
}

uint64_t sub_10002EAE0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10002EB08(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

Swift::Int sub_10002EB30(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  Swift::Int result;
  _QWORD v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_10001ADD0(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_10002EB98(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_10002EB98(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  Swift::Int v18;
  Swift::Int v19;
  char v20;
  Swift::Int v21;
  _BYTE *v22;
  unsigned int v23;
  Swift::Int v24;
  _BYTE *v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  char v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  unint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  Swift::Int v95;
  Swift::Int v96;
  uint64_t v97;
  unsigned __int8 *__dst;

  v2 = a1;
  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)v3 < 2)
        return result;
      v80 = 0;
      v81 = *v2;
      v82 = 1;
      while (1)
      {
        v83 = *(unsigned __int8 *)(v81 + v82);
        v84 = v80;
        do
        {
          v85 = *(unsigned __int8 *)(v81 + v84);
          if (v83 >= v85)
            break;
          if (!v81)
            goto LABEL_143;
          *(_BYTE *)(v81 + v84 + 1) = v85;
          *(_BYTE *)(v81 + v84--) = v83;
        }
        while (v84 != -1);
        ++v82;
        ++v80;
        if (v82 == v3)
          return result;
      }
    }
    goto LABEL_139;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
  {
LABEL_148:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    return result;
  }
  v95 = result;
  v96 = v3;
  if (v3 < 2)
  {
    v8 = _swiftEmptyArrayStorage;
    __dst = (unsigned __int8 *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v12 = _swiftEmptyArrayStorage[2];
      v11 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_104;
    }
    v94 = _swiftEmptyArrayStorage;
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for TFListStyle);
    *(_QWORD *)(v7 + 16) = v6;
    v3 = v96;
    v94 = (_QWORD *)v7;
    __dst = (unsigned __int8 *)(v7 + 32);
  }
  v9 = 0;
  v93 = v2;
  v10 = *v2;
  v11 = (char *)_swiftEmptyArrayStorage;
  v97 = *v2;
  while (1)
  {
    v13 = v9++;
    if (v9 < v3)
    {
      v14 = *(unsigned __int8 *)(v10 + v9);
      v15 = *(unsigned __int8 *)(v10 + v13);
      v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        v16 = v14;
        while (1)
        {
          v17 = *(unsigned __int8 *)(v10 + v9);
          if (v14 < v15 == v17 >= v16)
            break;
          ++v9;
          v16 = v17;
          if (v3 == v9)
          {
            v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13)
          goto LABEL_140;
        if (v13 < v9)
        {
          v18 = v9 - 1;
          v19 = v13;
          do
          {
            if (v19 != v18)
            {
              if (!v10)
                goto LABEL_146;
              v20 = *(_BYTE *)(v10 + v19);
              *(_BYTE *)(v10 + v19) = *(_BYTE *)(v10 + v18);
              *(_BYTE *)(v10 + v18) = v20;
            }
            v59 = ++v19 < v18--;
          }
          while (v59);
        }
      }
    }
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13))
        goto LABEL_138;
      if (v9 - v13 < v95)
      {
        v21 = v13 + v95;
        if (__OFADD__(v13, v95))
          goto LABEL_141;
        if (v21 >= v3)
          v21 = v3;
        if (v21 < v13)
          goto LABEL_142;
        if (v9 != v21)
        {
          v22 = (_BYTE *)(v10 + v9);
          do
          {
            v23 = *(unsigned __int8 *)(v10 + v9);
            v24 = v13;
            v25 = v22;
            do
            {
              v26 = *(v25 - 1);
              if (v23 >= v26)
                break;
              if (!v10)
                goto LABEL_144;
              *v25 = v26;
              *--v25 = v23;
              ++v24;
            }
            while (v9 != v24);
            ++v9;
            ++v22;
          }
          while (v9 != v21);
          v9 = v21;
        }
      }
    }
    if (v9 < v13)
    {
LABEL_133:
      __break(1u);
      goto LABEL_134;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
      v11 = sub_100019EA8(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v28 = *((_QWORD *)v11 + 2);
    v27 = *((_QWORD *)v11 + 3);
    v12 = v28 + 1;
    v10 = v97;
    if (v28 >= v27 >> 1)
    {
      v77 = sub_100019EA8((char *)(v27 > 1), v28 + 1, 1, v11);
      v10 = v97;
      v11 = v77;
    }
    *((_QWORD *)v11 + 2) = v12;
    v29 = v11 + 32;
    v30 = &v11[16 * v28 + 32];
    *(_QWORD *)v30 = v13;
    *((_QWORD *)v30 + 1) = v9;
    if (v28)
      break;
    v12 = 1;
LABEL_15:
    v3 = v96;
    if (v9 >= v96)
    {
      v2 = v93;
      v8 = v94;
LABEL_104:
      v94 = v8;
      if (v12 < 2)
      {
LABEL_115:
        v79 = v11;
        goto LABEL_116;
      }
      v86 = *v2;
      while (1)
      {
        v87 = v12 - 2;
        if (v12 < 2)
          break;
        if (!v86)
          goto LABEL_147;
        v78 = v11;
        v88 = v11 + 32;
        v89 = *(_QWORD *)&v11[16 * v87 + 32];
        v90 = *(_QWORD *)&v11[16 * v12 + 24];
        sub_10002F210((unsigned __int8 *)(v86 + v89), (unsigned __int8 *)(v86 + *(_QWORD *)&v88[16 * v12 - 16]), v86 + v90, __dst);
        if (v1)
          goto LABEL_95;
        if (v90 < v89)
          goto LABEL_135;
        if ((swift_isUniquelyReferenced_nonNull_native(v78) & 1) == 0)
          v78 = sub_10001A194((uint64_t)v78);
        if (v87 >= *((_QWORD *)v78 + 2))
          goto LABEL_136;
        v91 = &v78[16 * v87 + 32];
        *(_QWORD *)v91 = v89;
        *((_QWORD *)v91 + 1) = v90;
        v92 = *((_QWORD *)v78 + 2);
        if (v12 > v92)
          goto LABEL_137;
        memmove(&v78[16 * v12 + 16], &v78[16 * v12 + 32], 16 * (v92 - v12));
        v11 = v78;
        *((_QWORD *)v78 + 2) = v92 - 1;
        v12 = v92 - 1;
        if (v92 <= 2)
          goto LABEL_115;
      }
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
      goto LABEL_148;
    }
  }
  while (1)
  {
    v31 = v12 - 1;
    if (v12 >= 4)
    {
      v36 = &v29[16 * v12];
      v37 = *((_QWORD *)v36 - 8);
      v38 = *((_QWORD *)v36 - 7);
      v42 = __OFSUB__(v38, v37);
      v39 = v38 - v37;
      if (v42)
        goto LABEL_122;
      v41 = *((_QWORD *)v36 - 6);
      v40 = *((_QWORD *)v36 - 5);
      v42 = __OFSUB__(v40, v41);
      v34 = v40 - v41;
      v35 = v42;
      if (v42)
        goto LABEL_123;
      v43 = v12 - 2;
      v44 = &v29[16 * v12 - 32];
      v46 = *(_QWORD *)v44;
      v45 = *((_QWORD *)v44 + 1);
      v42 = __OFSUB__(v45, v46);
      v47 = v45 - v46;
      if (v42)
        goto LABEL_125;
      v42 = __OFADD__(v34, v47);
      v48 = v34 + v47;
      if (v42)
        goto LABEL_128;
      if (v48 >= v39)
      {
        v66 = &v29[16 * v31];
        v68 = *(_QWORD *)v66;
        v67 = *((_QWORD *)v66 + 1);
        v42 = __OFSUB__(v67, v68);
        v69 = v67 - v68;
        if (v42)
          goto LABEL_132;
        v59 = v34 < v69;
        goto LABEL_84;
      }
    }
    else
    {
      if (v12 != 3)
      {
        v60 = *((_QWORD *)v11 + 4);
        v61 = *((_QWORD *)v11 + 5);
        v42 = __OFSUB__(v61, v60);
        v53 = v61 - v60;
        v54 = v42;
        goto LABEL_78;
      }
      v33 = *((_QWORD *)v11 + 4);
      v32 = *((_QWORD *)v11 + 5);
      v42 = __OFSUB__(v32, v33);
      v34 = v32 - v33;
      v35 = v42;
    }
    if ((v35 & 1) != 0)
      goto LABEL_124;
    v43 = v12 - 2;
    v49 = &v29[16 * v12 - 32];
    v51 = *(_QWORD *)v49;
    v50 = *((_QWORD *)v49 + 1);
    v52 = __OFSUB__(v50, v51);
    v53 = v50 - v51;
    v54 = v52;
    if (v52)
      goto LABEL_127;
    v55 = &v29[16 * v31];
    v57 = *(_QWORD *)v55;
    v56 = *((_QWORD *)v55 + 1);
    v42 = __OFSUB__(v56, v57);
    v58 = v56 - v57;
    if (v42)
      goto LABEL_130;
    if (__OFADD__(v53, v58))
      goto LABEL_131;
    if (v53 + v58 >= v34)
    {
      v59 = v34 < v58;
LABEL_84:
      if (v59)
        v31 = v43;
      goto LABEL_86;
    }
LABEL_78:
    if ((v54 & 1) != 0)
      goto LABEL_126;
    v62 = &v29[16 * v31];
    v64 = *(_QWORD *)v62;
    v63 = *((_QWORD *)v62 + 1);
    v42 = __OFSUB__(v63, v64);
    v65 = v63 - v64;
    if (v42)
      goto LABEL_129;
    if (v65 < v53)
      goto LABEL_15;
LABEL_86:
    v70 = v31 - 1;
    if (v31 - 1 >= v12)
    {
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
      goto LABEL_133;
    }
    if (!v10)
      goto LABEL_145;
    v71 = &v29[16 * v70];
    v72 = *(_QWORD *)v71;
    v73 = v29;
    v74 = &v29[16 * v31];
    v75 = *((_QWORD *)v74 + 1);
    sub_10002F210((unsigned __int8 *)(v10 + *(_QWORD *)v71), (unsigned __int8 *)(v10 + *(_QWORD *)v74), v10 + v75, __dst);
    if (v1)
      break;
    if (v75 < v72)
      goto LABEL_119;
    if (v31 > *((_QWORD *)v11 + 2))
      goto LABEL_120;
    *(_QWORD *)v71 = v72;
    *(_QWORD *)&v73[16 * v70 + 8] = v75;
    v76 = *((_QWORD *)v11 + 2);
    if (v31 >= v76)
      goto LABEL_121;
    v12 = v76 - 1;
    memmove(v74, v74 + 16, 16 * (v76 - 1 - v31));
    v29 = v73;
    *((_QWORD *)v11 + 2) = v76 - 1;
    v10 = v97;
    if (v76 <= 2)
      goto LABEL_15;
  }
  v78 = v11;
LABEL_95:
  v79 = v78;
LABEL_116:
  swift_bridgeObjectRelease(v79);
  v94[2] = 0;
  return swift_bridgeObjectRelease(v94);
}

uint64_t sub_10002F210(unsigned __int8 *__src, unsigned __int8 *a2, unint64_t a3, unsigned __int8 *__dst)
{
  unsigned __int8 *v4;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  size_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned int v18;
  uint64_t result;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;

  v22 = __src;
  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a3 - (_QWORD)a2;
  v21 = __dst;
  if (a2 - __src >= (uint64_t)(a3 - (_QWORD)a2))
  {
    if ((v9 & 0x8000000000000000) == 0)
    {
      if (__dst != a2 || a3 <= (unint64_t)__dst)
        memmove(__dst, a2, a3 - (_QWORD)a2);
      v14 = &v4[v9];
      v20 = &v4[v9];
      v22 = v6;
      if (v7 < v6 && (unsigned __int8 *)a3 != v6)
      {
        v15 = (unsigned __int8 *)(a3 - 1);
        while (1)
        {
          v16 = v15 + 1;
          v17 = v6 - 1;
          v18 = *(v6 - 1);
          if (*(v14 - 1) >= v18)
          {
            v20 = v14 - 1;
            if (v16 < v14 || v15 >= v14 || v16 != v14)
              *v15 = *(v14 - 1);
            --v14;
            if (v6 <= v7)
              goto LABEL_38;
          }
          else
          {
            if (v16 != v6 || v15 >= v6)
              *v15 = v18;
            v22 = --v6;
            if (v17 <= v7)
              goto LABEL_38;
          }
          --v15;
          if (v14 <= v4)
            goto LABEL_38;
        }
      }
      goto LABEL_38;
    }
  }
  else if ((v8 & 0x8000000000000000) == 0)
  {
    if (__dst != __src || a2 <= __dst)
      memmove(__dst, __src, v8);
    v10 = &v4[v8];
    v20 = &v4[v8];
    if (v6 != v7 && (unint64_t)v6 < a3)
    {
      do
      {
        v11 = *v6;
        v12 = *v4;
        if (v11 >= v12)
        {
          if (v7 != v4)
            *v7 = v12;
          v21 = ++v4;
          v13 = v6;
        }
        else
        {
          v13 = v6 + 1;
          if (v7 < v6 || v7 >= v13 || v7 != v6)
            *v7 = v11;
        }
        ++v7;
        if (v4 >= v10)
          break;
        v6 = v13;
      }
      while ((unint64_t)v13 < a3);
      v22 = v7;
    }
LABEL_38:
    sub_10001A104((void **)&v22, (const void **)&v21, &v20);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

void sub_10002F448(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v5 = v4;
  v10 = *v4;
  v12 = sub_1000171E8(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_100017A60();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];

      *(_QWORD *)(v19 + 8 * v12) = a1;
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v22 = (uint64_t *)(v18[6] + 16 * v12);
    *v22 = a2;
    v22[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v23 = v18[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      swift_bridgeObjectRetain(a3);
      return;
    }
    goto LABEL_14;
  }
  sub_1000183C4(v15, a4 & 1);
  v20 = sub_1000171E8(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    v12 = v20;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

_OWORD *sub_10002F5A4(_OWORD *a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _OWORD *result;
  unint64_t v18;
  char v19;
  uint64_t v20;

  v4 = (_QWORD **)v3;
  v7 = (_QWORD *)*v3;
  v9 = sub_1000172B0((uint64_t)a2);
  v10 = v7[2];
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    v13 = v8;
    v14 = v7[3];
    if (v14 >= v12 && (a3 & 1) != 0)
    {
LABEL_7:
      v15 = *v4;
      if ((v13 & 1) != 0)
      {
LABEL_8:
        v16 = (_QWORD *)(v15[7] + 32 * v9);
        sub_10002178C(v16);
        return sub_10001E97C(a1, v16);
      }
      goto LABEL_11;
    }
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      sub_100017C10();
      goto LABEL_7;
    }
    sub_1000186D0(v12, a3 & 1);
    v18 = sub_1000172B0((uint64_t)a2);
    if ((v13 & 1) == (v19 & 1))
    {
      v9 = v18;
      v15 = *v4;
      if ((v13 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10002F6C4(v9, (uint64_t)a2, a1, v15);
      return a2;
    }
  }
  type metadata accessor for Key(0);
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v20);
  __break(1u);
  return result;
}

_OWORD *sub_10002F6C4(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  _OWORD *result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = sub_10001E97C(a3, (_OWORD *)(a4[7] + 32 * a1));
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

void (*sub_10002F728(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(_QWORD *)
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_10002F800(v6, a2, a3);
  return sub_10002F77C;
}

void (*sub_10002F780(void (**a1)(id *), unint64_t a2, uint64_t a3))(_QWORD *)
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_10002F874(v6, a2, a3);
  return sub_10002F77C;
}

void sub_10002F7D4(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

void (*sub_10002F800(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return sub_10002F86C;
  }
  __break(1u);
  return result;
}

void sub_10002F86C(id *a1)
{

}

void (*sub_10002F874(void (*result)(id *), unint64_t a2, uint64_t a3))(id *)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return sub_1000312D8;
  }
  __break(1u);
  return result;
}

_QWORD *sub_10002F8E0(uint64_t a1, uint64_t a2, SEL *a3)
{
  uint64_t v4;
  unint64_t v5;
  id v6;
  void *v7;
  unint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v19[2];
  _QWORD *v20;

  v20 = _swiftEmptyArrayStorage;
  if ((unint64_t)a1 >> 62)
    goto LABEL_16;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    while (1)
    {
      v5 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
LABEL_9:
        v7 = v6;
        v8 = v5 + 1;
        if (__OFADD__(v5, 1))
          goto LABEL_15;
        v9 = objc_msgSend(v6, *a3);
        v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
        v12 = v11;

        LOBYTE(v12) = sub_10001463C(v19, v10, v12);
        v13 = swift_bridgeObjectRelease(v19[1]);
        if ((v12 & 1) != 0)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
          v14 = v20[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
          v15 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v7);
          specialized ContiguousArray._endMutation()(v15);
        }
        else
        {

        }
        ++v5;
        if (v8 == v4)
          return v20;
      }
      if (v5 < *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        break;
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      if (a1 < 0)
        v17 = a1;
      else
        v17 = a1 & 0xFFFFFFFFFFFFFF8;
      v4 = _CocoaArrayWrapper.endIndex.getter(v17);
      if (!v4)
        return _swiftEmptyArrayStorage;
    }
    v6 = *(id *)(a1 + 8 * v5 + 32);
    goto LABEL_9;
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10002FA6C(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;

  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(UITextFormattingViewControllerTextListDisc);
  v4 = v3;
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  if (v2 == v5 && v4 == v6)
  {
    swift_bridgeObjectRelease_n(v4, 2);
    goto LABEL_15;
  }
  v8 = v6;
  v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, v4, v5, v6, 0);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v8);
  if ((v9 & 1) != 0)
  {
LABEL_15:

    return 0;
  }
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(UITextFormattingViewControllerTextListHyphen);
  v12 = v11;
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  if (v10 == v13 && v12 == v14)
  {
    swift_bridgeObjectRelease_n(v12, 2);
    goto LABEL_18;
  }
  v16 = v14;
  v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v12, v13, v14, 0);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v16);
  if ((v17 & 1) != 0)
  {
LABEL_18:

    return 1;
  }
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(UITextFormattingViewControllerTextListDecimal);
  v20 = v19;
  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v23 = v21;
  if (v18 == v22 && v20 == v21)
  {
    swift_bridgeObjectRelease_n(v20, 2);
LABEL_20:

    return 2;
  }
  v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v20, v22, v21, 0);
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v23);
  if ((v26 & 1) != 0)
    goto LABEL_20;
  v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(UITextFormattingViewControllerTextListOther);
  v29 = v28;
  v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v32 = v30;
  v24 = 3;
  if (v27 != v31 || v29 != v30)
  {
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(v27, v29, v31, v30, 0) & 1) != 0)
      v24 = 3;
    else
      v24 = 4;
  }
  v33 = a1;

  swift_bridgeObjectRelease(v29);
  swift_bridgeObjectRelease(v32);
  return v24;
}

uint64_t sub_10002FC84@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100020990(a1, (uint64_t)&unk_1000745E8, (uint64_t)&unk_100074610, a2);
}

uint64_t sub_10002FCA8(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10002E96C(a1, a2, a3, a4, (uint64_t)&unk_1000745E8, (uint64_t)&unk_100074610);
}

uint64_t sub_10002FCCC()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10002FCF8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1000995CC);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10002FD64;
  return sub_10002C124(a1, v4, v5, v6);
}

uint64_t sub_10002FD64()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10002FDAC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002FDD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1000995DC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10002FD64;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1000995D8 + dword_1000995D8))(a1, v4);
}

uint64_t sub_10002FE40@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10002FE68(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.foregroundColor.setter(v1);
}

uint64_t sub_10002FE90@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10002FEB8(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

uint64_t sub_10002FEE0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  AttributeScopes.uiKit.getter();
  result = type metadata accessor for AttributeScopes.UIKitAttributes(0);
  *a1 = result;
  return result;
}

void sub_10002FF0C()
{
  AttributeScopes.UIKitAttributes.font.getter();
  __break(1u);
}

unint64_t sub_10002FF24()
{
  unint64_t result;

  result = qword_100099608;
  if (!qword_100099608)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AttributeScopes.UIKitAttributes.FontAttribute, &type metadata for AttributeScopes.UIKitAttributes.FontAttribute);
    atomic_store(result, (unint64_t *)&qword_100099608);
  }
  return result;
}

uint64_t sub_10002FF68(unint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char **v5;
  char v6;
  BOOL v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  unint64_t v25;

  v2 = a1;
  if (a1 >> 62)
    goto LABEL_21;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v3; v3 = _CocoaArrayWrapper.endIndex.getter(v22))
  {
    v24 = v2;
    v25 = v2 & 0xC000000000000001;
    v4 = 4;
    v5 = &selRef_runWithFontNamesForFamilyName_usingBlock_;
    while (1)
    {
      v8 = v25 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, v2) : *(id *)(v2 + 8 * v4);
      v9 = v8;
      v10 = v4 - 3;
      if (__OFADD__(v4 - 4, 1))
        break;
      v11 = v3;
      v12 = objc_msgSend(v8, v5[172]);
      if (v12)
      {
        v13 = v12;
        v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
        v16 = v15;

      }
      else
      {
        v14 = 0;
        v16 = 0;
      }
      v17 = objc_msgSend(a2, v5[172]);
      v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
      v20 = v19;

      if (v16)
      {
        if (v14 == v18 && v16 == v20)
        {
          swift_bridgeObjectRelease(v24);

          swift_bridgeObjectRelease(v16);
          v21 = 1;
          v2 = v20;
          goto LABEL_26;
        }
        v6 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v16, v18, v20, 0);

        swift_bridgeObjectRelease(v16);
        swift_bridgeObjectRelease(v20);
        if ((v6 & 1) != 0)
        {
          v21 = 1;
          v2 = v24;
          goto LABEL_26;
        }
      }
      else
      {

        swift_bridgeObjectRelease(v20);
      }
      ++v4;
      v3 = v11;
      v7 = v10 == v11;
      v2 = v24;
      v5 = &selRef_runWithFontNamesForFamilyName_usingBlock_;
      if (v7)
      {
        v21 = 0;
        goto LABEL_26;
      }
    }
    __break(1u);
LABEL_21:
    if (v2 < 0)
      v22 = v2;
    else
      v22 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
  }
  v21 = 0;
LABEL_26:
  swift_bridgeObjectRelease(v2);
  return v21;
}

uint64_t sub_10003016C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100020990(a1, (uint64_t)&unk_100074738, (uint64_t)&unk_100074760, a2);
}

uint64_t sub_100030190(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10002E96C(a1, a2, a3, a4, (uint64_t)&unk_100074738, (uint64_t)&unk_100074760);
}

uint64_t sub_1000301B4(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;
  uint64_t v18;
  void *v21;

  if ((unint64_t)a1 >> 62)
    goto LABEL_20;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v3)
  {
    for (i = 4; ; ++i)
    {
      v5 = i - 4;
      if ((a1 & 0xC000000000000001) == 0)
        break;
      v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a1);
      v7 = i - 3;
      if (__OFADD__(v5, 1))
        goto LABEL_19;
LABEL_9:
      v21 = v6;
      v8 = objc_msgSend(v6, "familyName");
      v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
      v11 = v10;

      v12 = objc_msgSend(a2, "familyName");
      v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      v15 = v14;

      if (v9 == v13 && v11 == v15)
      {
        swift_bridgeObjectRelease(a1);
        swift_bridgeObjectRelease(v11);
LABEL_18:
        v3 = (uint64_t)v21;
        swift_bridgeObjectRelease(v11);
        return v3;
      }
      v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v11, v13, v15, 0);
      swift_bridgeObjectRelease(v11);
      swift_bridgeObjectRelease(v15);
      if ((v17 & 1) != 0)
      {
        v11 = a1;
        goto LABEL_18;
      }

      if (v7 == v3)
      {
        swift_bridgeObjectRelease(a1);
        return 0;
      }
    }
    v6 = *(id *)(a1 + 8 * i);
    v7 = i - 3;
    if (!__OFADD__(v5, 1))
      goto LABEL_9;
LABEL_19:
    __break(1u);
LABEL_20:
    if (a1 < 0)
      v18 = a1;
    else
      v18 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v18);
  }
  swift_bridgeObjectRelease(a1);
  return v3;
}

unint64_t sub_100030374()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100099660;
  if (!qword_100099660)
  {
    v1 = sub_1000096AC(255, &qword_1000986D0, _UIFontPickerFontInfo_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100099660);
  }
  return result;
}

uint64_t sub_1000303F4()
{
  uint64_t v0;

  swift_unownedRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100030418()
{
  uint64_t v0;

  swift_unownedRetainStrong(*(_QWORD *)(v0 + 16));
  sub_100027E00();
  return swift_release();
}

uint64_t getEnumTagSinglePayload for TFListStyle(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for TFListStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100030520 + 4 * byte_100074362[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100030554 + 4 * byte_10007435D[v4]))();
}

uint64_t sub_100030554(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003055C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100030564);
  return result;
}

uint64_t sub_100030570(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100030578);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10003057C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100030584(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TFListStyle()
{
  return &type metadata for TFListStyle;
}

unint64_t sub_1000305A4()
{
  unint64_t result;

  result = qword_100099670;
  if (!qword_100099670)
  {
    result = swift_getWitnessTable(&unk_1000749EC, &type metadata for TFListStyle);
    atomic_store(result, (unint64_t *)&qword_100099670);
  }
  return result;
}

uint64_t sub_1000305E8()
{
  return sub_10000966C(&qword_100099678, &qword_100099680, (uint64_t)&protocol conformance descriptor for [A]);
}

void sub_100030614(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void (*v7)(_QWORD *, unint64_t);
  uint64_t v8;
  uint64_t inited;
  id v10;
  NSString *v11;
  unint64_t v12;
  id v13;
  id v14;
  _BYTE v16[72];

  v3 = type metadata accessor for UITextFormattingViewController.ChangeValue(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v16[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = *(void (**)(_QWORD *, unint64_t))(v1
                                                         + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_didChangeValue);
  *v6 = a1;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for UITextFormattingViewController.ChangeValue.font(_:), v3);
  v8 = sub_10000498C(&qword_10009AA80);
  inited = swift_initStackObject(v8, v16);
  *(_OWORD *)(inited + 16) = xmmword_100074A20;
  *(_QWORD *)(inited + 32) = NSFontAttributeName;
  *(_QWORD *)(inited + 64) = sub_1000096AC(0, &qword_10009A370, UIFont_ptr);
  *(_QWORD *)(inited + 40) = a1;
  v10 = a1;
  swift_retain();
  v11 = NSFontAttributeName;
  v12 = sub_1000283F8(inited);
  v7(v6, v12);
  swift_release();
  swift_bridgeObjectRelease(v12);
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  if ((objc_msgSend(v10, "isSystemFont") & 1) == 0)
  {
    v13 = objc_msgSend(v10, "fontDescriptor");
    v14 = objc_msgSend(objc_allocWithZone((Class)_UIFontPickerFontInfo), "initWithFontDescriptor:", v13);

    _UIFontPickerPersistToRecentsForSuite(v14, 0);
  }
}

uint64_t sub_1000307C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void (*v8)(_QWORD *, unint64_t);
  uint64_t v9;
  uint64_t inited;
  id v11;
  NSString *v12;
  unint64_t v13;
  _BYTE v16[72];

  v1 = type metadata accessor for UITextFormattingViewController.ChangeValue(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = sub_1000096AC(0, &qword_1000996D0, UIColor_ptr);
  v6 = swift_retain();
  v7 = (void *)UIColor.init(_:)(v6);
  v8 = *(void (**)(_QWORD *, unint64_t))(v0
                                                         + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_didChangeValue);
  *v4 = v7;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for UITextFormattingViewController.ChangeValue.textColor(_:), v1);
  v9 = sub_10000498C(&qword_10009AA80);
  inited = swift_initStackObject(v9, v16);
  *(_OWORD *)(inited + 16) = xmmword_100074A20;
  *(_QWORD *)(inited + 64) = v5;
  *(_QWORD *)(inited + 32) = NSForegroundColorAttributeName;
  *(_QWORD *)(inited + 40) = v7;
  v11 = v7;
  swift_retain();
  v12 = NSForegroundColorAttributeName;
  v13 = sub_1000283F8(inited);
  v8(v4, v13);

  swift_release();
  swift_bridgeObjectRelease(v13);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
}

_QWORD *sub_10003092C()
{
  id v0;
  char v1;
  id v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  id v6;
  char v7;
  id v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  char v13;
  id v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  id v18;
  char v19;
  id v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  char v25;
  id v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  id v30;
  char v31;
  id v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;

  v0 = UITextFormattingViewControllerHighlightDefault;
  v1 = sub_100011198();

  if ((v1 & 1) != 0)
  {
    if (qword_100098238 != -1)
      swift_once(&qword_100098238, sub_10002E160);
    v2 = (id)qword_10009B620;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    v4 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
    v3 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v4 >= v3 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1);
    v5 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v4, v2);
    specialized Array._endMutation()(v5);
  }
  v6 = UITextFormattingViewControllerHighlightPurple;
  v7 = sub_100011198();

  if ((v7 & 1) != 0)
  {
    if (qword_100098240 != -1)
      swift_once(&qword_100098240, sub_10002E26C);
    v8 = (id)qword_10009B628;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    v10 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
    v9 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v10 >= v9 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
    v11 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, v8);
    specialized Array._endMutation()(v11);
  }
  v12 = UITextFormattingViewControllerHighlightPink;
  v13 = sub_100011198();

  if ((v13 & 1) != 0)
  {
    if (qword_100098248 != -1)
      swift_once(&qword_100098248, sub_10002E378);
    v14 = (id)qword_10009B630;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    v16 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
    v15 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v16 >= v15 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
    v17 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v14);
    specialized Array._endMutation()(v17);
  }
  v18 = UITextFormattingViewControllerHighlightOrange;
  v19 = sub_100011198();

  if ((v19 & 1) != 0)
  {
    if (qword_100098250 != -1)
      swift_once(&qword_100098250, sub_10002E484);
    v20 = (id)qword_10009B638;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    v22 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
    v21 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v22 >= v21 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
    v23 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, v20);
    specialized Array._endMutation()(v23);
  }
  v24 = UITextFormattingViewControllerHighlightMint;
  v25 = sub_100011198();

  if ((v25 & 1) != 0)
  {
    if (qword_100098258 != -1)
      swift_once(&qword_100098258, sub_10002E590);
    v26 = (id)qword_10009B640;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    v28 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
    v27 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v28 >= v27 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1);
    v29 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v28, v26);
    specialized Array._endMutation()(v29);
  }
  v30 = UITextFormattingViewControllerHighlightBlue;
  v31 = sub_100011198();

  if ((v31 & 1) != 0)
  {
    if (qword_100098260 != -1)
      swift_once(&qword_100098260, sub_10002E69C);
    v32 = (id)qword_10009B648;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    v34 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
    v33 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v34 >= v33 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1);
    v35 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v34, v32);
    specialized Array._endMutation()(v35);
  }
  return _swiftEmptyArrayStorage;
}

void *sub_100030D88(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v4 = v3;
  v7 = a1;
  if (a1 >> 62)
    goto LABEL_21;
  v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v8)
  {
    v23 = v4;
    v24 = v7;
    v25 = v7 & 0xC000000000000001;
    v4 = 4;
    while (1)
    {
      v9 = v4 - 4;
      if (!v25)
        break;
      v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, v7);
      v11 = v4 - 3;
      if (__OFADD__(v9, 1))
        goto LABEL_20;
LABEL_9:
      v12 = v8;
      v13 = v10;
      v14 = a3;
      v15 = objc_msgSend(v10, "styleKey", v23);
      v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
      v18 = v17;

      a3 = v14;
      v19 = v16 == a2 && v18 == v14;
      if (v19)
      {
        swift_bridgeObjectRelease(v24);
LABEL_19:
        swift_bridgeObjectRelease(a3);
        return v13;
      }
      v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v18, a2, v14, 0);
      swift_bridgeObjectRelease(v18);
      if ((v20 & 1) != 0)
      {
        a3 = v24;
        goto LABEL_19;
      }

      ++v4;
      v8 = v12;
      v19 = v11 == v12;
      v7 = v24;
      if (v19)
      {
        swift_bridgeObjectRelease(v24);
        return 0;
      }
    }
    v10 = *(id *)(v7 + 8 * v4);
    v11 = v4 - 3;
    if (!__OFADD__(v9, 1))
      goto LABEL_9;
LABEL_20:
    __break(1u);
LABEL_21:
    if (v7 < 0)
      v21 = v7;
    else
      v21 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v7);
    v8 = _CocoaArrayWrapper.endIndex.getter(v21);
  }
  swift_bridgeObjectRelease(v7);
  return 0;
}

void sub_100030F2C(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  NSString v5;
  NSString v6;

  if (a1)
  {
    v1 = objc_msgSend(a1, "styleKey");
    static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
    v3 = v2;

    v4 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v3);
    v6 = String._bridgeToObjectiveC()();
    objc_msgSend(v4, "setObject:forKey:", v5, v6);

  }
}

unint64_t sub_10003100C(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10008E030, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

uint64_t sub_100031054(char a1, Swift::Double a2)
{
  void *v4;
  Class isa;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (qword_100098228 != -1)
    swift_once(&qword_100098228, sub_10002DF70);
  v4 = (void *)qword_100099300;
  sub_1000096AC(0, &qword_100099698, NSNumber_ptr);
  isa = NSNumber.init(floatLiteral:)(a2).super.super.isa;
  v6 = objc_msgSend(v4, "stringFromNumber:", isa);

  if (!v6)
  {
    v15 = sub_10000498C(&qword_1000996A0);
    v16 = swift_allocObject(v15, 72, 7);
    *(_OWORD *)(v16 + 16) = xmmword_100074A20;
    *(_QWORD *)(v16 + 56) = &type metadata for CGFloat;
    *(_QWORD *)(v16 + 64) = sub_100031224();
    *(Swift::Double *)(v16 + 32) = a2;
    v7 = String.init(format:_:)(808347173, 0xE400000000000000, v16);
    v9 = v17;
    if ((a1 & 1) != 0)
      goto LABEL_5;
    return v7;
  }
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v9 = v8;

  if ((a1 & 1) == 0)
    return v7;
LABEL_5:
  if (qword_100098128 != -1)
    swift_once(&qword_100098128, sub_100023268);
  v10 = qword_10009B440;
  v11 = *(_QWORD *)algn_10009B448;
  v12 = sub_10000498C(&qword_1000996A0);
  v13 = swift_allocObject(v12, 72, 7);
  *(_OWORD *)(v13 + 16) = xmmword_100074A20;
  *(_QWORD *)(v13 + 56) = &type metadata for String;
  *(_QWORD *)(v13 + 64) = sub_100031268();
  *(_QWORD *)(v13 + 32) = v7;
  *(_QWORD *)(v13 + 40) = v9;
  return String.init(format:_:)(v10, v11, v13);
}

unint64_t sub_100031224()
{
  unint64_t result;

  result = qword_1000996A8;
  if (!qword_1000996A8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_1000996A8);
  }
  return result;
}

unint64_t sub_100031268()
{
  unint64_t result;

  result = qword_1000996B0;
  if (!qword_1000996B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1000996B0);
  }
  return result;
}

uint64_t sub_1000312AC()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
    sub_10002178C((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 48, 7);
}

void *sub_1000312DC()
{
  return &protocol witness table for String;
}

__n128 sub_1000312E8@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void (*a17)(uint64_t, uint64_t, uint64_t), uint64_t *a18)
{
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  double v34;
  double v35;
  double v36;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __n128 result;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  double v49;
  double v50;
  double v51;
  double v52;
  _OWORD v53[7];

  v19 = a9;
  v20 = a17;
  v21 = a18;
  v22 = a15;
  v23 = a14;
  v24 = a12;
  v25 = a10;
  v26 = a2 & 1;
  v27 = a1;
  if ((_DWORD)v26)
    v27 = -INFINITY;
  v28 = a4 & 1;
  v29 = a3;
  if ((_DWORD)v28)
    v29 = v27;
  v30 = a6 & 1;
  v31 = a8 & 1;
  v32 = a5;
  if ((a6 & 1) != 0)
    v32 = v29;
  if (v27 > v29 || v29 > v32)
    goto LABEL_22;
  v34 = a7;
  if ((_DWORD)v31)
    v34 = -INFINITY;
  v35 = a10;
  if ((a11 & 1) != 0)
    v35 = v34;
  v36 = a12;
  if ((a13 & 1) != 0)
    v36 = v35;
  if (v34 > v35 || v35 > v36)
  {
LABEL_22:
    v51 = a5;
    v52 = a7;
    v49 = a1;
    v50 = a3;
    v47 = v28;
    v48 = v26;
    v46 = v31;
    v39 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v40 = (void *)static Log.runtimeIssuesLog.getter();
    v41 = v39;
    v19 = a9;
    os_log(_:dso:log:_:_:)(v41, &_mh_execute_header, v40, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v31 = v46;
    v28 = v47;
    v26 = v48;
    v23 = a14;
    v22 = a15;
    v24 = a12;
    v25 = a10;
    a1 = v49;
    a3 = v50;
    a5 = v51;
    a7 = v52;
    v21 = a18;
    v20 = a17;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v53, *(_QWORD *)&a1, v26, *(_QWORD *)&a3, v28, *(_QWORD *)&a5, v30, *(_QWORD *)&a7, v31, *(_QWORD *)&v25, a11 & 1, *(_QWORD *)&v24, a13 & 1, v23, v22);
  v20(v18, v19, a16);
  v42 = v19 + *(int *)(sub_10000498C(v21) + 36);
  v43 = v53[5];
  *(_OWORD *)(v42 + 64) = v53[4];
  *(_OWORD *)(v42 + 80) = v43;
  *(_OWORD *)(v42 + 96) = v53[6];
  v44 = v53[1];
  *(_OWORD *)v42 = v53[0];
  *(_OWORD *)(v42 + 16) = v44;
  result = (__n128)v53[3];
  *(_OWORD *)(v42 + 32) = v53[2];
  *(__n128 *)(v42 + 48) = result;
  return result;
}

uint64_t sub_1000314C4@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  unsigned int v40;
  double v41;
  double v42;
  double v43;
  double v44;
  _OWORD v45[7];

  v17 = a15;
  v18 = a12;
  v19 = a10;
  v20 = a2 & 1;
  v21 = a1;
  if ((_DWORD)v20)
    v21 = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (v21 > v23 || v23 > v26)
    goto LABEL_22;
  v28 = a7;
  if ((a8 & 1) != 0)
    v28 = -INFINITY;
  v29 = a10;
  if ((a11 & 1) != 0)
    v29 = v28;
  v30 = a12;
  if ((a13 & 1) != 0)
    v30 = v29;
  if (v28 > v29 || v29 > v30)
  {
LABEL_22:
    v44 = a7;
    v42 = a1;
    v43 = a5;
    v41 = a3;
    v40 = v20;
    v32 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v17 = a15;
    v19 = a10;
    v20 = v40;
    a3 = v41;
    a1 = v42;
    a5 = v43;
    v18 = a12;
    a7 = v44;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v45, *(_QWORD *)&a1, v20, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, *(_QWORD *)&a7, v25, *(_QWORD *)&v19, a11 & 1, *(_QWORD *)&v18, a13 & 1, a14, v17);
  v34 = *(_OWORD *)(v15 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v15 + 32);
  *(_OWORD *)(a9 + 48) = v34;
  *(_OWORD *)(a9 + 64) = *(_OWORD *)(v15 + 64);
  v35 = *(_OWORD *)(v15 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v15;
  *(_OWORD *)(a9 + 16) = v35;
  v36 = v45[2];
  *(_OWORD *)(a9 + 136) = v45[3];
  v37 = v45[5];
  *(_OWORD *)(a9 + 152) = v45[4];
  *(_OWORD *)(a9 + 168) = v37;
  *(_OWORD *)(a9 + 184) = v45[6];
  v38 = v45[1];
  *(_OWORD *)(a9 + 88) = v45[0];
  *(_OWORD *)(a9 + 104) = v38;
  *(_BYTE *)(a9 + 80) = *(_BYTE *)(v15 + 80);
  *(_OWORD *)(a9 + 120) = v36;
  return sub_1000506EC(v15);
}

uint64_t sub_100031684@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  unsigned int v40;
  double v41;
  double v42;
  double v43;
  double v44;
  _OWORD v45[7];

  v17 = a15;
  v18 = a12;
  v19 = a10;
  v20 = a2 & 1;
  v21 = a1;
  if ((_DWORD)v20)
    v21 = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (v21 > v23 || v23 > v26)
    goto LABEL_22;
  v28 = a7;
  if ((a8 & 1) != 0)
    v28 = -INFINITY;
  v29 = a10;
  if ((a11 & 1) != 0)
    v29 = v28;
  v30 = a12;
  if ((a13 & 1) != 0)
    v30 = v29;
  if (v28 > v29 || v29 > v30)
  {
LABEL_22:
    v44 = a7;
    v42 = a1;
    v43 = a5;
    v41 = a3;
    v40 = v20;
    v32 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v17 = a15;
    v19 = a10;
    v20 = v40;
    a3 = v41;
    a1 = v42;
    a5 = v43;
    v18 = a12;
    a7 = v44;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v45, *(_QWORD *)&a1, v20, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, *(_QWORD *)&a7, v25, *(_QWORD *)&v19, a11 & 1, *(_QWORD *)&v18, a13 & 1, a14, v17);
  v34 = *(_OWORD *)(v15 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v15 + 32);
  *(_OWORD *)(a9 + 48) = v34;
  *(_OWORD *)(a9 + 64) = *(_OWORD *)(v15 + 64);
  v35 = *(_OWORD *)(v15 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v15;
  *(_OWORD *)(a9 + 16) = v35;
  v36 = v45[2];
  *(_OWORD *)(a9 + 136) = v45[3];
  v37 = v45[5];
  *(_OWORD *)(a9 + 152) = v45[4];
  *(_OWORD *)(a9 + 168) = v37;
  *(_OWORD *)(a9 + 184) = v45[6];
  v38 = v45[1];
  *(_OWORD *)(a9 + 88) = v45[0];
  *(_OWORD *)(a9 + 104) = v38;
  *(_BYTE *)(a9 + 80) = *(_BYTE *)(v15 + 80);
  *(_OWORD *)(a9 + 120) = v36;
  return sub_100051CA4(v15);
}

double sub_100031844@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_1000312E8(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t)type metadata accessor for TFLabel, (void (*)(uint64_t, uint64_t, uint64_t))sub_10000920C, &qword_10009A220).n128_u64[0];
  return result;
}

double sub_1000318A8@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_1000312E8(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t)&unk_10009AB10, (void (*)(uint64_t, uint64_t, uint64_t))sub_10000928C, &qword_10009AB00).n128_u64[0];
  return result;
}

double sub_10003190C@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_1000312E8(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t)&unk_10009A278, (void (*)(uint64_t, uint64_t, uint64_t))sub_10000928C, &qword_10009AAE0).n128_u64[0];
  return result;
}

double sub_100031970@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_1000312E8(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t)&unk_10009A9A0, (void (*)(uint64_t, uint64_t, uint64_t))sub_10000928C, &qword_10009A228).n128_u64[0];
  return result;
}

uint64_t sub_1000319D4@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  unsigned int v38;
  double v39;
  double v40;
  double v41;
  double v42;
  _OWORD v43[7];

  v17 = a15;
  v18 = a12;
  v19 = a10;
  v20 = a2 & 1;
  v21 = a1;
  if ((_DWORD)v20)
    v21 = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (v21 > v23 || v23 > v26)
    goto LABEL_22;
  v28 = a7;
  if ((a8 & 1) != 0)
    v28 = -INFINITY;
  v29 = a10;
  if ((a11 & 1) != 0)
    v29 = v28;
  v30 = a12;
  if ((a13 & 1) != 0)
    v30 = v29;
  if (v28 > v29 || v29 > v30)
  {
LABEL_22:
    v42 = a7;
    v40 = a1;
    v41 = a5;
    v39 = a3;
    v38 = v20;
    v32 = static os_log_type_t.fault.getter();
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v17 = a15;
    v20 = v38;
    v19 = a10;
    a3 = v39;
    a1 = v40;
    a5 = v41;
    v18 = a12;
    a7 = v42;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v43, *(_QWORD *)&a1, v20, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, *(_QWORD *)&a7, v25, *(_QWORD *)&v19, a11 & 1, *(_QWORD *)&v18, a13 & 1, a14, v17);
  v34 = v43[2];
  *(_OWORD *)(a9 + 56) = v43[3];
  v35 = v43[5];
  *(_OWORD *)(a9 + 72) = v43[4];
  *(_OWORD *)(a9 + 88) = v35;
  *(_OWORD *)(a9 + 104) = v43[6];
  v36 = v43[1];
  *(_OWORD *)(a9 + 8) = v43[0];
  *(_OWORD *)(a9 + 24) = v36;
  *(_QWORD *)a9 = a16;
  *(_OWORD *)(a9 + 40) = v34;
  return swift_retain(a16);
}

uint64_t sub_100031B7C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  char v42;
  int *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  double v61;
  double v62;
  double v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  _QWORD *v70;
  unint64_t v71;
  char v72;
  uint64_t v73;
  char v74;
  char v75;
  uint64_t v76;
  double v77;
  double v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char v87;
  char v88;
  uint64_t v89;
  double v90;
  double v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t *v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t OpaqueTypeConformance2;
  char *v118;
  uint64_t v119;
  void (*v120)(char *, uint64_t);
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t result;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  char *v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char v167;
  uint64_t v168;
  unint64_t v169;

  v166 = a1;
  v161 = sub_10000498C(&qword_1000998F0);
  v2 = __chkstk_darwin(v161);
  v143 = (char *)&v138 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v151 = (uint64_t)&v138 - v4;
  v157 = sub_10000498C(&qword_1000998F8);
  __chkstk_darwin(v157);
  v160 = (uint64_t)&v138 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v150 = type metadata accessor for ContentMarginPlacement(0);
  v146 = *(_QWORD *)(v150 - 8);
  __chkstk_darwin(v150);
  v149 = (char *)&v138 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v154 = sub_10000498C(&qword_100099900);
  __chkstk_darwin(v154);
  v139 = (uint64_t)&v138 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v155 = sub_10000498C(&qword_100099908);
  v141 = *(_QWORD *)(v155 - 8);
  __chkstk_darwin(v155);
  v140 = (char *)&v138 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v156 = sub_10000498C(&qword_100099910);
  v145 = *(_QWORD *)(v156 - 8);
  __chkstk_darwin(v156);
  v144 = (char *)&v138 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v158 = sub_10000498C(&qword_100099918);
  v148 = *(_QWORD *)(v158 - 8);
  v10 = __chkstk_darwin(v158);
  v142 = (char *)&v138 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v147 = (char *)&v138 - v12;
  v165 = sub_10000498C(&qword_100099920);
  __chkstk_darwin(v165);
  v159 = (char *)&v138 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v163 = sub_10000498C(&qword_100099928);
  __chkstk_darwin(v163);
  v164 = (uint64_t)&v138 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (int *)sub_10000498C(&qword_100099930);
  __chkstk_darwin(v15);
  v17 = (char *)&v138 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v152 = sub_10000498C(&qword_100099938);
  __chkstk_darwin(v152);
  v19 = (char *)&v138 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v162 = sub_10000498C(&qword_100099940);
  v20 = __chkstk_darwin(v162);
  v22 = (char *)&v138 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v153 = (uint64_t)&v138 - v23;
  v24 = *(_QWORD *)(v1 + 16);
  v25 = *(unsigned __int8 *)(v1 + 24);
  v26 = *(unsigned __int8 *)(v1 + 25);
  sub_10001D970(v24, v25, *(_BYTE *)(v1 + 25));
  v27 = sub_1000119BC(v24, v25 | (v26 << 8));
  v29 = v28;
  sub_10001D9CC(v24, v25, v26);
  if ((v29 & 1) != 0 || v27 > 2)
  {
    v35 = *(_QWORD *)(v1 + 32);
    v36 = *(_BYTE *)(v1 + 40);
    sub_10001D97C(v35, v36);
    v37 = sub_100011B90(v35, v36);
    sub_10001D9D8(v35, v36);
    if ((v37 & 1) != 0)
    {
      v38 = *(_QWORD *)(v1 + 48);
      v39 = *(_BYTE *)(v1 + 56);
      sub_10001D97C(v38, v39);
      v40 = sub_1000117FC(v38, v39);
      sub_10001D9D8(v38, v39);
      v41 = *(_QWORD *)v1;
      if (!*(_QWORD *)v1)
        goto LABEL_23;
      if ((*(_BYTE *)(v41 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_isInPopoverPresentation) & 1) != 0)
        v42 = 0;
      else
        v42 = *(_BYTE *)(v41 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_hasParentViewController) ^ 1;
      sub_100065E58(v42 & 1, *(_BYTE *)(v41 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_useReducedMetrics), v40);
      v107 = v106;
      v109 = v108;
      v110 = v139;
      sub_100033378(v139);
      v111 = sub_10004F238();
      v112 = v140;
      v113 = v154;
      View.scrollClipDisabled(_:)(1, v154, v111);
      v114 = sub_1000092D0(v110, &qword_100099900);
      v115 = static Edge.Set.leading.getter(v114);
      v116 = v149;
      static ContentMarginPlacement.automatic.getter();
      v168 = v113;
      v169 = v111;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v168, &opaque type descriptor for <<opaque return type of View.scrollClipDisabled(_:)>>, 1);
      v118 = v144;
      v119 = v155;
      View.contentMargins(_:_:for:)(v115, v107, 0, v116, v155, OpaqueTypeConformance2);
      v120 = *(void (**)(char *, uint64_t))(v146 + 8);
      v121 = v150;
      v120(v116, v150);
      v122 = (*(uint64_t (**)(char *, uint64_t))(v141 + 8))(v112, v119);
      v123 = static Edge.Set.trailing.getter(v122);
      static ContentMarginPlacement.automatic.getter();
      v168 = v119;
      v169 = OpaqueTypeConformance2;
      v124 = swift_getOpaqueTypeConformance2(&v168, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 1);
      v125 = v142;
      v126 = v156;
      View.contentMargins(_:_:for:)(v123, v109, 0, v116, v156, v124);
      v120(v116, v121);
      (*(void (**)(char *, uint64_t))(v145 + 8))(v118, v126);
      v127 = v148;
      v128 = v147;
      v129 = v158;
      (*(void (**)(char *, char *, uint64_t))(v148 + 32))(v147, v125, v158);
      v130 = v160;
      (*(void (**)(uint64_t, char *, uint64_t))(v127 + 16))(v160, v128, v129);
      swift_storeEnumTagMultiPayload(v130, v157, 0);
      v168 = v126;
      v169 = v124;
      v131 = swift_getOpaqueTypeConformance2(&v168, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 1);
      v132 = sub_10000966C(&qword_100099960, &qword_1000998F0, (uint64_t)&unk_100075FB0);
      v59 = (uint64_t)v159;
      _ConditionalContent<>.init(storage:)(v130, v129, v161, v131, v132);
      (*(void (**)(char *, uint64_t))(v127 + 8))(v128, v129);
    }
    else
    {
      v43 = (int *)v161;
      v44 = (uint64_t)v143;
      v45 = &v143[*(int *)(v161 + 40)];
      v46 = type metadata accessor for HoverEffect(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v45, 1, 1, v46);
      *(_QWORD *)v44 = 0;
      *(_WORD *)(v44 + 8) = 257;
      sub_100033378(v44 + v43[11]);
      v47 = v44 + v43[12];
      *(_QWORD *)v47 = swift_getKeyPath(&unk_100074C50);
      *(_BYTE *)(v47 + 8) = 0;
      v48 = v44 + v43[13];
      *(_QWORD *)v48 = swift_getKeyPath(&unk_100074BF8);
      *(_BYTE *)(v48 + 8) = 0;
      v49 = v44 + v43[14];
      *(_QWORD *)v49 = swift_getKeyPath(&unk_1000752D8);
      *(_BYTE *)(v49 + 8) = 0;
      v50 = v44 + v43[15];
      v167 = 0;
      State.init(wrappedValue:)(&v168, &v167, &type metadata for Bool);
      v51 = v169;
      *(_BYTE *)v50 = v168;
      *(_QWORD *)(v50 + 8) = v51;
      v52 = v151;
      sub_10000930C(v44, v151, &qword_1000998F0);
      v53 = v160;
      sub_10000928C(v52, v160, &qword_1000998F0);
      swift_storeEnumTagMultiPayload(v53, v157, 1);
      v54 = sub_10004F238();
      v168 = v154;
      v169 = v54;
      v55 = swift_getOpaqueTypeConformance2(&v168, &opaque type descriptor for <<opaque return type of View.scrollClipDisabled(_:)>>, 1);
      v168 = v155;
      v169 = v55;
      v56 = swift_getOpaqueTypeConformance2(&v168, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 1);
      v168 = v156;
      v169 = v56;
      v57 = swift_getOpaqueTypeConformance2(&v168, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 1);
      v58 = sub_10000966C(&qword_100099960, &qword_1000998F0, (uint64_t)&unk_100075FB0);
      v59 = (uint64_t)v159;
      _ConditionalContent<>.init(storage:)(v53, v158, v43, v57, v58);
      sub_1000092D0(v52, &qword_1000998F0);
    }
    v100 = &qword_100099920;
    v133 = v164;
    sub_10000928C(v59, v164, &qword_100099920);
    swift_storeEnumTagMultiPayload(v133, v163, 1);
    v102 = sub_10004F300();
    v103 = sub_10004F3F0();
    v104 = v133;
    v105 = v162;
LABEL_22:
    _ConditionalContent<>.init(storage:)(v104, v105, v165, v102, v103);
    return sub_1000092D0(v59, v100);
  }
  v30 = *(_QWORD *)(v1 + 48);
  v31 = *(_BYTE *)(v1 + 56);
  sub_10001D97C(v30, v31);
  v32 = sub_1000117FC(v30, v31);
  sub_10001D9D8(v30, v31);
  v33 = *(_QWORD *)v1;
  if (*(_QWORD *)v1)
  {
    if ((*(_BYTE *)(v33 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_isInPopoverPresentation) & 1) != 0)
      v34 = 0;
    else
      v34 = *(_BYTE *)(v33 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_hasParentViewController) ^ 1;
    sub_100065E58(v34 & 1, *(_BYTE *)(v33 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_useReducedMetrics), v32);
    v61 = v60;
    v63 = v62;
    v64 = &v17[v15[10]];
    v65 = type metadata accessor for HoverEffect(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(v64, 1, 1, v65);
    *(_QWORD *)v17 = 0;
    *((_WORD *)v17 + 4) = 257;
    sub_100032808(v1, (uint64_t)&v17[v15[11]]);
    v66 = &v17[v15[12]];
    *(_QWORD *)v66 = swift_getKeyPath(&unk_100074C50);
    v66[8] = 0;
    v67 = &v17[v15[13]];
    *(_QWORD *)v67 = swift_getKeyPath(&unk_100074BF8);
    v67[8] = 0;
    v68 = &v17[v15[14]];
    *(_QWORD *)v68 = swift_getKeyPath(&unk_1000752D8);
    v68[8] = 0;
    v69 = &v17[v15[15]];
    v167 = 0;
    v70 = State.init(wrappedValue:)(&v168, &v167, &type metadata for Bool);
    v71 = v169;
    *v69 = v168;
    *((_QWORD *)v69 + 1) = v71;
    v72 = static Edge.Set.leading.getter(v70);
    v73 = *(_QWORD *)(v1 + 32);
    v74 = *(_BYTE *)(v1 + 40);
    sub_10001D97C(v73, v74);
    v75 = sub_100011B90(v73, v74);
    v76 = sub_10001D9D8(v73, v74);
    if ((v75 & 1) != 0)
      v77 = v61;
    else
      v77 = 0.0;
    v78 = EdgeInsets.init(_all:)(v76, v77);
    v80 = v79;
    v82 = v81;
    v84 = v83;
    sub_10000928C((uint64_t)v17, (uint64_t)v19, &qword_100099930);
    v85 = &v19[*(int *)(v152 + 36)];
    *v85 = v72;
    *((double *)v85 + 1) = v78;
    *((_QWORD *)v85 + 2) = v80;
    *((_QWORD *)v85 + 3) = v82;
    *((_QWORD *)v85 + 4) = v84;
    v85[40] = 0;
    v86 = sub_1000092D0((uint64_t)v17, &qword_100099930);
    v87 = static Edge.Set.trailing.getter(v86);
    sub_10001D97C(v73, v74);
    v88 = sub_100011B90(v73, v74);
    v89 = sub_10001D9D8(v73, v74);
    if ((v88 & 1) != 0)
      v90 = v63;
    else
      v90 = 0.0;
    v91 = EdgeInsets.init(_all:)(v89, v90);
    v93 = v92;
    v95 = v94;
    v97 = v96;
    sub_10000928C((uint64_t)v19, (uint64_t)v22, &qword_100099938);
    v98 = v162;
    v99 = &v22[*(int *)(v162 + 36)];
    *v99 = v87;
    *((double *)v99 + 1) = v91;
    *((_QWORD *)v99 + 2) = v93;
    *((_QWORD *)v99 + 3) = v95;
    *((_QWORD *)v99 + 4) = v97;
    v99[40] = 0;
    sub_1000092D0((uint64_t)v19, &qword_100099938);
    v100 = &qword_100099940;
    v59 = v153;
    sub_10000930C((uint64_t)v22, v153, &qword_100099940);
    v101 = v164;
    sub_10000928C(v59, v164, &qword_100099940);
    swift_storeEnumTagMultiPayload(v101, v163, 0);
    v102 = sub_10004F300();
    v103 = sub_10004F3F0();
    v104 = v101;
    v105 = v98;
    goto LABEL_22;
  }
LABEL_23:
  v135 = *(_QWORD *)(v1 + 8);
  v136 = type metadata accessor for TextFormattingState(0);
  v137 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
  result = EnvironmentObject.error()(0, v135, v136, v137);
  __break(1u);
  return result;
}

uint64_t sub_100032808@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t KeyPath;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42[16];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;

  v41 = a2;
  v3 = sub_10000498C(&qword_100099988);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10000498C(&qword_100099990);
  v39 = *(_QWORD *)(v7 - 8);
  v40 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_10000498C(&qword_100099998);
  __chkstk_darwin(v38);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = a1;
  v12 = sub_10000498C(&qword_1000999A0);
  v13 = sub_10000498C(&qword_1000999A8);
  v14 = sub_10000966C(&qword_1000999B0, &qword_1000999A0, (uint64_t)&unk_100075E88);
  v15 = sub_10004F4FC(&qword_1000999B8, &qword_1000999A8);
  Menu.init(content:label:)(sub_10004F4F4, v42, sub_10003336C, 0, v12, v13, v14, v15);
  v47 = 0;
  State.init(wrappedValue:)(&v44, &v47, &type metadata for Bool);
  v16 = v44;
  v17 = v45;
  LOBYTE(v44) = 0;
  LOBYTE(v45) = v16;
  v46 = v17;
  v18 = sub_10000966C(&qword_1000999D0, &qword_100099988, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
  v19 = sub_10004EC30();
  View.menuStyle<A>(_:)(&v44, v3, &type metadata for TFMenuStyle, v18, v19);
  swift_release();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  if (*(_QWORD *)a1)
  {
    KeyPath = swift_getKeyPath(&unk_100075438);
    swift_getKeyPath(&unk_100075460);
    v21 = swift_retain();
    static Published.subscript.getter(&v44, v21, KeyPath);
    swift_release();
    swift_release();
    swift_release();
    v22 = *(_QWORD *)(v44 + 16);
    swift_bridgeObjectRelease(v44);
    if (v22)
    {
      v23 = *(_QWORD *)(a1 + 64);
      v24 = *(_BYTE *)(a1 + 72);
      sub_10001D97C(v23, v24);
      v25 = sub_100011B90(v23, v24);
      sub_10001D9D8(v23, v24);
      v26 = v25 ^ 1;
    }
    else
    {
      v26 = 1;
    }
    v28 = v40;
    v27 = v41;
    v30 = v38;
    v29 = v39;
    v31 = swift_getKeyPath(&unk_100075480);
    v32 = swift_allocObject(&unk_10008F6C0, 17, 7);
    *(_BYTE *)(v32 + 16) = v26 & 1;
    (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v11, v9, v28);
    v33 = (uint64_t *)&v11[*(int *)(v30 + 36)];
    *v33 = v31;
    v33[1] = (uint64_t)sub_10004F58C;
    v33[2] = v32;
    (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v28);
    return sub_10000930C((uint64_t)v11, v27, &qword_100099998);
  }
  else
  {
    v35 = *(_QWORD *)(a1 + 8);
    v36 = type metadata accessor for TextFormattingState(0);
    v37 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    result = EnvironmentObject.error()(0, v35, v36, v37);
    __break(1u);
  }
  return result;
}

uint64_t sub_100032B84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = sub_10000498C(&qword_1000999A8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)a1)
  {
    KeyPath = swift_getKeyPath(&unk_100075438);
    swift_getKeyPath(&unk_100075460);
    v9 = swift_retain();
    static Published.subscript.getter(&v24, v9, KeyPath);
    swift_release();
    swift_release();
    swift_release();
    v10 = swift_getKeyPath(&unk_1000754B0);
    v11 = swift_allocObject(&unk_10008F6E8, 120, 7);
    v12 = *(_OWORD *)(a1 + 80);
    *(_OWORD *)(v11 + 80) = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(v11 + 96) = v12;
    *(_QWORD *)(v11 + 112) = *(_QWORD *)(a1 + 96);
    v13 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v11 + 16) = *(_OWORD *)a1;
    *(_OWORD *)(v11 + 32) = v13;
    v14 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v11 + 48) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v11 + 64) = v14;
    sub_10001E710(a1);
    v15 = sub_10000498C(&qword_1000993F8);
    v16 = sub_10000498C(&qword_1000999C8);
    v17 = sub_10000966C(&qword_1000999D8, &qword_1000993F8, (uint64_t)&protocol conformance descriptor for [A]);
    v18 = sub_10000966C(&qword_1000999C0, &qword_1000999C8, (uint64_t)&protocol conformance descriptor for Toggle<A>);
    ForEach<>.init(_:id:content:)(&v24, v10, sub_10004F5C0, v11, v15, v16, v17, &protocol witness table for String, v18);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v7, v4);
  }
  else
  {
    v20 = *(_QWORD *)(a1 + 8);
    v21 = type metadata accessor for TextFormattingState(0);
    v22 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    result = EnvironmentObject.error()(0, v20, v21, v22);
    __break(1u);
  }
  return result;
}

uint64_t sub_100032DA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  void (*v19)(uint64_t, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[16];
  uint64_t v32;
  _QWORD v33[2];
  unsigned __int8 v34;

  v29 = a3;
  v30 = a1;
  v5 = type metadata accessor for UITextFormattingViewController.FormattingStyle(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v28(v8, a1, v5);
  type metadata accessor for MainActor(0);
  v9 = sub_10001E710(a2);
  v10 = static MainActor.shared.getter(v9);
  v11 = *(unsigned __int8 *)(v6 + 80);
  v12 = (v11 + 136) & ~v11;
  v13 = v12 + v7;
  v14 = v11 | 7;
  v15 = swift_allocObject(&unk_10008F710, v12 + v7, v11 | 7);
  *(_QWORD *)(v15 + 16) = v10;
  *(_QWORD *)(v15 + 24) = &protocol witness table for MainActor;
  v16 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v15 + 96) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v15 + 112) = v16;
  *(_QWORD *)(v15 + 128) = *(_QWORD *)(a2 + 96);
  v17 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v15 + 32) = *(_OWORD *)a2;
  *(_OWORD *)(v15 + 48) = v17;
  v18 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v15 + 64) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v15 + 80) = v18;
  v19 = *(void (**)(uint64_t, char *, uint64_t))(v6 + 32);
  v19(v15 + v12, v8, v5);
  v28(v8, v30, v5);
  v20 = sub_10001E710(a2);
  v21 = static MainActor.shared.getter(v20);
  v22 = swift_allocObject(&unk_10008F738, v13, v14);
  *(_QWORD *)(v22 + 16) = v21;
  *(_QWORD *)(v22 + 24) = &protocol witness table for MainActor;
  v23 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v22 + 96) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v22 + 112) = v23;
  *(_QWORD *)(v22 + 128) = *(_QWORD *)(a2 + 96);
  v24 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v22 + 32) = *(_OWORD *)a2;
  *(_OWORD *)(v22 + 48) = v24;
  v25 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v22 + 64) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v22 + 80) = v25;
  v19(v22 + v12, v8, v5);
  Binding.init(get:set:)(v33, sub_10004F5CC, v15, sub_10004F6D4, v22, &type metadata for Bool);
  v32 = v30;
  return Toggle.init(isOn:label:)(v33[0], v33[1], v34, sub_10004F718, v31, &type metadata for Text, &protocol witness table for Text);
}

uint64_t sub_100032FA0@<X0>(_QWORD *a1@<X2>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = sub_10000498C(&qword_100098FC8);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (*a1)
  {
    KeyPath = swift_getKeyPath(&unk_100075300);
    swift_getKeyPath(&unk_100075328);
    v8 = swift_retain();
    static Published.subscript.getter(v6, v8, KeyPath);
    swift_release();
    swift_release();
    swift_release();
    v9 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor(0);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v6, 1, v9))
    {
      result = sub_1000092D0((uint64_t)v6, &qword_100098FC8);
      v11 = 0;
    }
    else
    {
      v12 = UITextFormattingViewController.FormattingDescriptor.formattingStyleKey.getter();
      v14 = v13;
      result = sub_1000092D0((uint64_t)v6, &qword_100098FC8);
      if (v14)
      {
        v15 = UITextFormattingViewController.FormattingStyle.styleKey.getter(result);
        v17 = v16;
        if (v12 == v15 && v14 == v16)
          v19 = 1;
        else
          v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, v15, v16, 0);
        swift_bridgeObjectRelease(v14);
        result = swift_bridgeObjectRelease(v17);
        v11 = v19 & 1;
      }
      else
      {
        v11 = 0;
      }
    }
    *a2 = v11;
  }
  else
  {
    v20 = a1[1];
    v21 = type metadata accessor for TextFormattingState(0);
    v22 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    result = EnvironmentObject.error()(0, v20, v21, v22);
    __break(1u);
  }
  return result;
}

uint64_t sub_100033164(_BYTE *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  _QWORD *v13;
  void (*v14)(_QWORD *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = type metadata accessor for AttributeContainer(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UITextFormattingViewController.ChangeValue(0);
  v10 = *(_QWORD *)(v9 - 8);
  result = __chkstk_darwin(v9);
  v13 = (uint64_t *)((char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (*a1 == 1)
  {
    if (*a4)
    {
      v14 = *(void (**)(_QWORD *, uint64_t))(*a4
                                                     + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_didChangeValue);
      v15 = swift_retain();
      *v13 = UITextFormattingViewController.FormattingStyle.styleKey.getter(v15);
      v13[1] = v16;
      v17 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(v10 + 104))(v13, enum case for UITextFormattingViewController.ChangeValue.formattingStyle(_:), v9);
      UITextFormattingViewController.FormattingStyle.attributes.getter(v17);
      v18 = Dictionary<>.init(_:)(v8);
      v14(v13, v18);
      swift_release();
      swift_bridgeObjectRelease(v18);
      return (*(uint64_t (**)(_QWORD *, uint64_t))(v10 + 8))(v13, v9);
    }
    else
    {
      v19 = a4[1];
      v20 = type metadata accessor for TextFormattingState(0);
      v21 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
      result = EnvironmentObject.error()(0, v19, v20, v21);
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1000332EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t result;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for LocalizedStringResource(0);
  v2 = __chkstk_darwin();
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  UITextFormattingViewController.FormattingStyle.title.getter(v2);
  result = Text.init(_:)(v4);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = v7 & 1;
  *(_QWORD *)(a1 + 24) = v8;
  return result;
}

uint64_t sub_10003336C@<X0>(uint64_t a1@<X8>)
{
  return sub_100040398(a1, (__n128)xmmword_100074A60);
}

uint64_t sub_100033378@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t OpaqueTypeConformance2;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t (**v24)();
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[16];
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  _QWORD v32[4];

  v2 = v1;
  v27 = a1;
  v3 = sub_10000498C(&qword_100099950);
  v26 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10000498C(&qword_1000999E0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = static Axis.Set.horizontal.getter(v8);
  v29 = v2;
  v12 = sub_10000498C(&qword_1000999E8);
  v13 = sub_100004660(&qword_1000999F0);
  v14 = sub_10000966C(&qword_1000999F8, &qword_1000999F0, (uint64_t)&protocol conformance descriptor for HStack<A>);
  v32[0] = v13;
  v32[1] = v14;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v32, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 1);
  ScrollView.init(_:showsIndicators:content:)(v11, 0, sub_10004F720, v28, v12, OpaqueTypeConformance2);
  v30 = *(_OWORD *)(v2 + 80);
  v31 = *(_QWORD *)(v2 + 96);
  v16 = sub_10000498C(&qword_1000986B0);
  State.projectedValue.getter(v32, v16);
  v17 = v32[3];
  v18 = sub_10000966C(&qword_100099958, &qword_100099950, (uint64_t)&protocol conformance descriptor for ScrollView<A>);
  View.scrollPosition<A>(id:anchor:)(v32, 0, 0, 1, v3, &type metadata for String, v18, &protocol witness table for String);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease(v17);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v5, v3);
  v19 = swift_allocObject(&unk_10008F760, 120, 7);
  v20 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(v19 + 80) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(v19 + 96) = v20;
  *(_QWORD *)(v19 + 112) = *(_QWORD *)(v2 + 96);
  v21 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v19 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v19 + 32) = v21;
  v22 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v19 + 48) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v19 + 64) = v22;
  v23 = v27;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 16))(v27, v10, v6);
  v24 = (uint64_t (**)())(v23 + *(int *)(sub_10000498C(&qword_100099900) + 36));
  *v24 = sub_10004F72C;
  v24[1] = (uint64_t (*)())v19;
  v24[2] = 0;
  v24[3] = 0;
  sub_10001E710(v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_100033600@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t KeyPath;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v46 = a2;
  v3 = sub_10000498C(&qword_100099A00);
  v44 = *(_QWORD *)(v3 - 8);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v40 - v7;
  v45 = sub_10000498C(&qword_1000999F0);
  __chkstk_darwin(v45);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10000498C(&qword_1000999E8);
  v42 = *(_QWORD *)(v11 - 8);
  v43 = v11;
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = static VerticalAlignment.center.getter(v12);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_BYTE *)(a1 + 40);
  sub_10001D97C(v16, v17);
  v18 = sub_100011B90(v16, v17);
  sub_10001D9D8(v16, v17);
  if ((v18 & 1) != 0)
  {
    v19 = 0;
  }
  else
  {
    v20 = *(_QWORD *)(a1 + 48);
    v21 = *(_BYTE *)(a1 + 56);
    sub_10001D97C(v20, v21);
    v22 = sub_1000117FC(v20, v21);
    sub_10001D9D8(v20, v21);
    v19 = qword_100075A08[v22];
  }
  *(_QWORD *)v10 = v15;
  *((_QWORD *)v10 + 1) = v19;
  v10[16] = 0;
  if (*(_QWORD *)a1)
  {
    v41 = &v10[*(int *)(sub_10000498C(&qword_100099A08) + 44)];
    KeyPath = swift_getKeyPath(&unk_100075438);
    swift_getKeyPath(&unk_100075460);
    v24 = swift_retain();
    static Published.subscript.getter(&v47, v24, KeyPath);
    swift_release();
    swift_release();
    swift_release();
    v25 = swift_getKeyPath(&unk_1000754B0);
    v26 = swift_allocObject(&unk_10008F788, 120, 7);
    v27 = *(_OWORD *)(a1 + 80);
    *(_OWORD *)(v26 + 80) = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(v26 + 96) = v27;
    *(_QWORD *)(v26 + 112) = *(_QWORD *)(a1 + 96);
    v28 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v26 + 16) = *(_OWORD *)a1;
    *(_OWORD *)(v26 + 32) = v28;
    v29 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v26 + 48) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v26 + 64) = v29;
    sub_10001E710(a1);
    v30 = sub_10000498C(&qword_1000993F8);
    v31 = sub_10000498C(&qword_100099A10);
    v32 = sub_10000966C(&qword_1000999D8, &qword_1000993F8, (uint64_t)&protocol conformance descriptor for [A]);
    v33 = sub_10004F7A8();
    ForEach<>.init(_:id:content:)(&v47, v25, sub_10004F7A0, v26, v30, v31, v32, &protocol witness table for String, v33);
    v34 = *(void (**)(char *, char *, uint64_t))(v44 + 32);
    v34(v8, v6, v3);
    v34(v41, v8, v3);
    v35 = sub_10000966C(&qword_1000999F8, &qword_1000999F0, (uint64_t)&protocol conformance descriptor for HStack<A>);
    View.scrollTargetLayout(isEnabled:)(1, v45, v35);
    sub_1000092D0((uint64_t)v10, &qword_1000999F0);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v42 + 32))(v46, v14, v43);
  }
  else
  {
    v37 = *(_QWORD *)(a1 + 8);
    v38 = type metadata accessor for TextFormattingState(0);
    v39 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    result = EnvironmentObject.error()(0, v37, v38, v39);
    __break(1u);
  }
  return result;
}

uint64_t sub_1000339B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t KeyPath;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  NSString v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _OWORD *v57;
  __int128 v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t result;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;

  v87 = a3;
  v88 = a1;
  v4 = type metadata accessor for LocalizedStringResource(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v76 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UITextFormattingViewController.FormattingStyle(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v10 = sub_10000498C(&qword_100099A30);
  v78 = *(_QWORD *)(v10 - 8);
  v79 = v10;
  __chkstk_darwin(v10);
  v77 = (char *)&v76 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10000498C(&qword_100099A48);
  v83 = *(_QWORD *)(v12 - 8);
  v84 = v12;
  __chkstk_darwin(v12);
  v81 = (char *)&v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = sub_10000498C(&qword_100099A28);
  __chkstk_darwin(v80);
  v85 = (char *)&v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10000498C(&qword_100099A10);
  __chkstk_darwin(v15);
  v82 = (uint64_t)&v76 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10000498C(&qword_100098FC8);
  __chkstk_darwin(v17);
  v19 = (uint64_t *)((char *)&v76 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
  {
    v73 = *(_QWORD *)(a2 + 8);
    v74 = type metadata accessor for TextFormattingState(0);
    v75 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    result = EnvironmentObject.error()(0, v73, v74, v75);
    __break(1u);
    return result;
  }
  KeyPath = swift_getKeyPath(&unk_100075300);
  swift_getKeyPath(&unk_100075328);
  v22 = swift_retain();
  static Published.subscript.getter(v19, v22, KeyPath);
  swift_release();
  swift_release();
  swift_release();
  v23 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor(0);
  v24 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 48))(v19, 1, v23);
  v86 = v6;
  if (v24)
  {
    sub_1000092D0((uint64_t)v19, &qword_100098FC8);
  }
  else
  {
    v66 = UITextFormattingViewController.FormattingDescriptor.formattingStyleKey.getter();
    v68 = v67;
    v69 = sub_1000092D0((uint64_t)v19, &qword_100098FC8);
    if (v68)
    {
      v71 = UITextFormattingViewController.FormattingStyle.styleKey.getter(v69);
      v72 = v70;
      if (v66 == v71 && v68 == v70)
      {
        swift_bridgeObjectRelease(v68);
        swift_bridgeObjectRelease(v72);
        v25 = 1;
      }
      else
      {
        v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v66, v68, v71, v70, 0);
        swift_bridgeObjectRelease(v68);
        swift_bridgeObjectRelease(v72);
      }
      goto LABEL_5;
    }
  }
  v25 = 0;
LABEL_5:
  v26 = v88;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v88, v7);
  v27 = *(unsigned __int8 *)(v8 + 80);
  v28 = (v27 + 120) & ~v27;
  v29 = swift_allocObject(&unk_10008F7B0, v28 + v9, v27 | 7);
  v30 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v29 + 80) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v29 + 96) = v30;
  *(_QWORD *)(v29 + 112) = *(_QWORD *)(a2 + 96);
  v31 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v29 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v29 + 32) = v31;
  v32 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v29 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v29 + 64) = v32;
  v33 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(v29 + v28, (char *)&v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  __chkstk_darwin(v33);
  *(&v76 - 2) = v26;
  *(&v76 - 1) = a2;
  sub_10001E710(a2);
  v34 = sub_10000498C(&qword_100099A50);
  v35 = sub_10004FA28();
  v36 = v77;
  Button.init(action:label:)(sub_10004F9F0, v29, sub_10004FA20, &v76 - 4, v34, v35);
  v37 = *(_QWORD *)(a2 + 32);
  LOBYTE(v29) = *(_BYTE *)(a2 + 40);
  sub_10001D97C(v37, v29);
  LOBYTE(v34) = sub_100011B90(v37, v29);
  sub_10001D9D8(v37, v29);
  v38 = swift_getKeyPath(&unk_100074BF8);
  v39 = v25 & 1;
  LOBYTE(v89) = v25 & 1;
  BYTE1(v89) = (v34 & 1) == 0;
  *((_QWORD *)&v89 + 1) = v38;
  LOBYTE(v90) = 0;
  v40 = sub_10000966C(&qword_100099A38, &qword_100099A30, (uint64_t)&protocol conformance descriptor for Button<A>);
  v41 = sub_10004F8F4();
  v42 = v81;
  v43 = v79;
  View.buttonStyle<A>(_:)(&v89, v79, &type metadata for TFFormattingStylesControl.FormatButtonStyle, v40, v41);
  swift_release();
  (*(void (**)(char *, uint64_t))(v78 + 8))(v36, v43);
  v44 = *(_QWORD *)(a2 + 48);
  LOBYTE(v29) = *(_BYTE *)(a2 + 56);
  sub_10001D97C(v44, v29);
  v45 = sub_1000117FC(v44, v29);
  sub_10001D9D8(v44, v29);
  swift_retain();
  v46 = String._bridgeToObjectiveC()();
  v47 = swift_getKeyPath(&unk_100075290);
  swift_getKeyPath(&unk_1000752B8);
  static Published.subscript.getter(&v89, v20, v47);
  swift_release();
  swift_release();
  v48 = 0;
  if ((*(_BYTE *)(v20 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_isInPopoverPresentation) & 1) == 0)
    v48 = *(_BYTE *)(v20 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_hasParentViewController) ^ 1;
  sub_100066310((uint64_t)v46, v89, SBYTE8(v89), v48 & 1, *(_BYTE *)(v20 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_useReducedMetrics), v45);
  v50 = v49;
  swift_release();

  v52 = static Alignment.center.getter(v51);
  _FrameLayout.init(width:height:alignment:)(&v89, 0, 1, v50, 0, v52, v53);
  v55 = v83;
  v54 = v84;
  v56 = (uint64_t)v85;
  (*(void (**)(char *, char *, uint64_t))(v83 + 16))(v85, v42, v84);
  v57 = (_OWORD *)(v56 + *(int *)(v80 + 36));
  v58 = v90;
  *v57 = v89;
  v57[1] = v58;
  v57[2] = v91;
  v59 = (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v42, v54);
  v60 = v86;
  UITextFormattingViewController.FormattingStyle.title.getter(v59);
  v61 = String.init(localized:)(v60);
  v63 = v62;
  v64 = v82;
  sub_100034AA8(v39, v61, v62, &qword_100099A10, &qword_100099A28, (uint64_t (*)(void))sub_10004F82C, v82);
  swift_bridgeObjectRelease(v63);
  sub_1000092D0(v56, &qword_100099A28);
  return sub_10000930C(v64, v87, &qword_100099A10);
}

uint64_t sub_10003408C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void (*v11)(_QWORD *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[16];

  v4 = type metadata accessor for AttributeContainer(0);
  __chkstk_darwin(v4);
  v6 = &v22[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for UITextFormattingViewController.ChangeValue(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = &v22[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (*a1)
  {
    v11 = *(void (**)(_QWORD *, uint64_t))(*a1
                                                   + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_didChangeValue);
    v12 = swift_retain();
    *v10 = UITextFormattingViewController.FormattingStyle.styleKey.getter(v12);
    v10[1] = v13;
    v14 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for UITextFormattingViewController.ChangeValue.formattingStyle(_:), v7);
    UITextFormattingViewController.FormattingStyle.attributes.getter(v14);
    v15 = Dictionary<>.init(_:)(v6);
    v11(v10, v15);
    swift_release();
    swift_bridgeObjectRelease(v15);
    (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(v10, v7);
    static Animation.spring(response:dampingFraction:blendDuration:)(0.5, 1.0, 0.0);
    v16 = Animation.speed(_:)(4.0);
    v17 = swift_release();
    __chkstk_darwin(v17);
    *(_QWORD *)&v22[-16] = a1;
    *(_QWORD *)&v22[-8] = a2;
    withAnimation<A>(_:_:)(v16, sub_10004FB3C, &v22[-32], (char *)&type metadata for () + 8);
    return swift_release();
  }
  else
  {
    v19 = a1[1];
    v20 = type metadata accessor for TextFormattingState(0);
    v21 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    result = EnvironmentObject.error()(0, v19, v20, v21);
    __break(1u);
  }
  return result;
}

uint64_t sub_10003428C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  __int128 v7;
  uint64_t v8;

  v2 = UITextFormattingViewController.FormattingStyle.styleKey.getter(a1);
  v7 = *(_OWORD *)(a1 + 80);
  v8 = *(_QWORD *)(a1 + 96);
  v6[0] = v2;
  v6[1] = v3;
  v4 = sub_10000498C(&qword_1000986B0);
  return State.wrappedValue.setter(v6, v4);
}

uint64_t sub_1000342F8@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t KeyPath;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v42 = a1;
  v44 = a2;
  v43 = type metadata accessor for TFFontModifier(0);
  __chkstk_darwin(v43);
  v3 = (char *)&KeyPath - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10000498C(&qword_1000995F8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&KeyPath - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AttributeContainer(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&KeyPath - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource(0);
  __chkstk_darwin(v12);
  v14 = (char *)&KeyPath - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_10000498C(&qword_100099A50);
  v15 = __chkstk_darwin(v41);
  v17 = (char *)&KeyPath - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  UITextFormattingViewController.FormattingStyle.title.getter(v15);
  v18 = String.init(localized:)(v14);
  v39 = v19;
  v40 = v18;
  KeyPath = swift_getKeyPath(&unk_100074C20);
  UITextFormattingViewController.FormattingStyle.attributes.getter(KeyPath);
  v20 = swift_getKeyPath(&unk_1000754E0);
  v21 = type metadata accessor for AttributeScopes.UIKitAttributes(0);
  v22 = sub_100007D90(&qword_100099600, (uint64_t (*)(uint64_t))&type metadata accessor for AttributeScopes.UIKitAttributes, (uint64_t)&protocol conformance descriptor for AttributeScopes.UIKitAttributes);
  AttributeContainer.subscript.getter(v20, v21, v22);
  swift_release();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v23 = swift_getKeyPath(&unk_100075510);
  v24 = sub_10002FF24();
  ScopedAttributeContainer.subscript.getter(&v45, v23, v4, v24);
  swift_release();
  v25 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (*v42)
  {
    v26 = v45;
    v27 = *v42 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_largestFontSizeInFormattingStyles;
    v28 = *(_QWORD *)v27;
    v29 = *(_BYTE *)(v27 + 8);
    v30 = static Font.title3.getter(v25);
    *(_QWORD *)v3 = v26;
    *((_QWORD *)v3 + 1) = v30;
    *((_QWORD *)v3 + 2) = 0x4044000000000000;
    *((_QWORD *)v3 + 3) = v28;
    v3[32] = v29;
    v31 = &v3[*(int *)(v43 + 32)];
    *(_QWORD *)v31 = swift_getKeyPath(&unk_100075540);
    v32 = sub_10000498C(&qword_100099A68);
    swift_storeEnumTagMultiPayload(v31, v32, 0);
    sub_10000920C((uint64_t)v3, (uint64_t)&v17[*(int *)(v41 + 36)], type metadata accessor for TFFontModifier);
    v33 = v39;
    *(_QWORD *)v17 = v40;
    *((_QWORD *)v17 + 1) = v33;
    v17[16] = 0;
    *((_QWORD *)v17 + 3) = KeyPath;
    v17[32] = 0;
    sub_100009250((uint64_t)v3, type metadata accessor for TFFontModifier);
    return sub_10000930C((uint64_t)v17, v44, &qword_100099A50);
  }
  else
  {
    v35 = v42[1];
    v36 = type metadata accessor for TextFormattingState(0);
    v37 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    result = EnvironmentObject.error()(0, v35, v36, v37);
    __break(1u);
  }
  return result;
}

uint64_t sub_10003464C@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[2];

  v29 = a4;
  v7 = type metadata accessor for AccessibilityTraits(0);
  v27 = *(_QWORD *)(v7 - 8);
  v28 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10000498C(&qword_1000997D8);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v26 - v14;
  if ((a1 & 1) != 0)
  {
    if (qword_1000981D0 != -1)
      swift_once(&qword_1000981D0, sub_100024860);
    v17 = qword_10009B590;
    v16 = *(_QWORD *)algn_10009B598;
    v18 = sub_10000498C(&qword_1000996A0);
    v19 = swift_allocObject(v18, 72, 7);
    *(_OWORD *)(v19 + 16) = xmmword_100074A20;
    *(_QWORD *)(v19 + 56) = &type metadata for String;
    *(_QWORD *)(v19 + 64) = sub_100031268();
    *(_QWORD *)(v19 + 32) = a2;
    *(_QWORD *)(v19 + 40) = a3;
    swift_bridgeObjectRetain(a3);
    a2 = String.init(format:_:)(v17, v16, v19);
    a3 = v20;
  }
  else
  {
    swift_bridgeObjectRetain(a3);
  }
  v30[0] = a2;
  v30[1] = a3;
  v21 = type metadata accessor for TFToggle(0);
  v22 = sub_100007D90(&qword_100099818, type metadata accessor for TFToggle, (uint64_t)&unk_100075F10);
  v23 = sub_100008EDC();
  View.accessibilityLabel<A>(_:)(v30, v21, &type metadata for String, v22, v23);
  v24 = swift_bridgeObjectRelease(a3);
  static AccessibilityTraits.isButton.getter(v24);
  ModifiedContent<>.accessibilityRemoveTraits(_:)(v9, v10);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v9, v28);
  sub_1000092D0((uint64_t)v13, &qword_1000997D8);
  return sub_10000930C((uint64_t)v15, v29, &qword_1000997D8);
}

uint64_t sub_10003487C@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, unint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[2];

  v33 = a6;
  v34 = a7;
  v37 = a8;
  v13 = type metadata accessor for AccessibilityTraits(0);
  v35 = *(_QWORD *)(v13 - 8);
  v36 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10000498C(a4);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v31 - v20;
  if ((a1 & 1) != 0)
  {
    if (qword_1000981D0 != -1)
      swift_once(&qword_1000981D0, sub_100024860);
    v22 = qword_10009B590;
    v32 = *(_QWORD *)algn_10009B598;
    v23 = sub_10000498C(&qword_1000996A0);
    v24 = swift_allocObject(v23, 72, 7);
    *(_OWORD *)(v24 + 16) = xmmword_100074A20;
    *(_QWORD *)(v24 + 56) = &type metadata for String;
    *(_QWORD *)(v24 + 64) = sub_100031268();
    *(_QWORD *)(v24 + 32) = a2;
    *(_QWORD *)(v24 + 40) = a3;
    swift_bridgeObjectRetain(a3);
    a2 = String.init(format:_:)(v22, v32, v24);
    a3 = v25;
  }
  else
  {
    swift_bridgeObjectRetain(a3);
  }
  v38[0] = a2;
  v38[1] = a3;
  v26 = sub_10000498C(a5);
  v27 = sub_10000966C(v33, a5, v34);
  v28 = sub_100008EDC();
  View.accessibilityLabel<A>(_:)(v38, v26, &type metadata for String, v27, v28);
  v29 = swift_bridgeObjectRelease(a3);
  static AccessibilityTraits.isButton.getter(v29);
  ModifiedContent<>.accessibilityRemoveTraits(_:)(v15, v16);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v15, v36);
  sub_1000092D0((uint64_t)v19, a4);
  return sub_10000930C((uint64_t)v21, v37, a4);
}

uint64_t sub_100034AA8@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t (*a6)(void)@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t *v32;
  uint64_t (*v33)(void);
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];

  v32 = a5;
  v33 = a6;
  v12 = type metadata accessor for AccessibilityTraits(0);
  v34 = *(_QWORD *)(v12 - 8);
  v35 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10000498C(a4);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v31 - v19;
  if ((a1 & 1) != 0)
  {
    v31 = a7;
    if (qword_1000981D0 != -1)
      swift_once(&qword_1000981D0, sub_100024860);
    v21 = qword_10009B590;
    v22 = *(_QWORD *)algn_10009B598;
    v23 = sub_10000498C(&qword_1000996A0);
    v24 = swift_allocObject(v23, 72, 7);
    *(_OWORD *)(v24 + 16) = xmmword_100074A20;
    *(_QWORD *)(v24 + 56) = &type metadata for String;
    *(_QWORD *)(v24 + 64) = sub_100031268();
    *(_QWORD *)(v24 + 32) = a2;
    *(_QWORD *)(v24 + 40) = a3;
    swift_bridgeObjectRetain(a3);
    a2 = String.init(format:_:)(v21, v22, v24);
    a3 = v25;
    a7 = v31;
  }
  else
  {
    swift_bridgeObjectRetain(a3);
  }
  v36[0] = a2;
  v36[1] = a3;
  v26 = sub_10000498C(v32);
  v27 = v33();
  v28 = sub_100008EDC();
  View.accessibilityLabel<A>(_:)(v36, v26, &type metadata for String, v27, v28);
  v29 = swift_bridgeObjectRelease(a3);
  static AccessibilityTraits.isButton.getter(v29);
  ModifiedContent<>.accessibilityRemoveTraits(_:)(v14, v15);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v14, v35);
  sub_1000092D0((uint64_t)v18, a4);
  return sub_10000930C((uint64_t)v20, a7, a4);
}

uint64_t sub_100034CD0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];
  __int128 v17;
  uint64_t v18;

  v2 = sub_10000498C(&qword_100098FC8);
  __chkstk_darwin(v2);
  v4 = (_QWORD *)((char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (*(_QWORD *)a1)
  {
    KeyPath = swift_getKeyPath(&unk_100075300);
    swift_getKeyPath(&unk_100075328);
    v6 = swift_retain();
    static Published.subscript.getter(v4, v6, KeyPath);
    swift_release();
    swift_release();
    swift_release();
    v7 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor(0);
    v8 = 0;
    v9 = 0;
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v4, 1, v7))
    {
      v8 = UITextFormattingViewController.FormattingDescriptor.formattingStyleKey.getter();
      v9 = v10;
    }
    sub_1000092D0((uint64_t)v4, &qword_100098FC8);
    v17 = *(_OWORD *)(a1 + 80);
    v18 = *(_QWORD *)(a1 + 96);
    v16[0] = v8;
    v16[1] = v9;
    v11 = sub_10000498C(&qword_1000986B0);
    return State.wrappedValue.setter(v16, v11);
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 8);
    v14 = type metadata accessor for TextFormattingState(0);
    v15 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    result = EnvironmentObject.error()(0, v13, v14, v15);
    __break(1u);
  }
  return result;
}

uint64_t sub_100034E50@<X0>(uint64_t a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  _BYTE *v23;
  _BYTE *v24;
  uint64_t v25;
  _BYTE v27[7];
  char v28;
  _QWORD v29[3];

  v10 = a2 & 1;
  v11 = sub_10000498C(&qword_1000997A0);
  __chkstk_darwin(v11);
  v13 = &v27[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = (int *)sub_10000498C(&qword_10009A230);
  v15 = __chkstk_darwin(v14);
  v17 = &v27[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if ((a2 & 0x100) != 0)
  {
    v18 = type metadata accessor for HoverEffect(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v13, 1, 1, v18);
    v19 = 256;
  }
  else
  {
    if (v10)
      static HoverEffect.lift.getter(v15);
    else
      static HoverEffect.highlight.getter(v15);
    v20 = type metadata accessor for HoverEffect(0);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v13, 0, 1, v20);
    v19 = 0;
  }
  *(_QWORD *)v17 = 0;
  *((_WORD *)v17 + 4) = 257;
  sub_10000930C((uint64_t)v13, (uint64_t)&v17[v14[10]], &qword_1000997A0);
  sub_100035060(a1, v19 | v10, a3, a4 & 1, (uint64_t)&v17[v14[11]]);
  v21 = &v17[v14[12]];
  *(_QWORD *)v21 = swift_getKeyPath(&unk_100074C50);
  v21[8] = 0;
  v22 = &v17[v14[13]];
  *(_QWORD *)v22 = swift_getKeyPath(&unk_100074BF8);
  v22[8] = 0;
  v23 = &v17[v14[14]];
  *(_QWORD *)v23 = swift_getKeyPath(&unk_1000752D8);
  v23[8] = 0;
  v24 = &v17[v14[15]];
  v28 = 0;
  State.init(wrappedValue:)(v29, &v28, &type metadata for Bool);
  v25 = v29[1];
  *v24 = v29[0];
  *((_QWORD *)v24 + 1) = v25;
  return sub_10000930C((uint64_t)v17, a5, &qword_10009A230);
}

uint64_t sub_100035060@<X0>(uint64_t a1@<X0>, unsigned __int16 a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  char v5;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t KeyPath;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  char v52;
  uint64_t v53;
  uint64_t (**v54)();
  char v55;
  double v56;
  double *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  double *v81;
  uint64_t v82;

  v69 = a3;
  v5 = a2;
  v82 = a5;
  v76 = a2;
  v78 = a2 & 1;
  v7 = a4 & 1;
  v80 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v80);
  v81 = (double *)((char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v67 = type metadata accessor for ButtonStyleConfiguration.Label(0);
  v9 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67);
  v11 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_10000498C(&qword_10009A238);
  __chkstk_darwin(v65);
  v13 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = sub_10000498C(&qword_10009A240);
  __chkstk_darwin(v68);
  v15 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10000498C(&qword_10009A248);
  __chkstk_darwin(v16);
  v66 = (uint64_t)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = sub_10000498C(&qword_10009A250);
  __chkstk_darwin(v70);
  v19 = (char *)&v64 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10000498C(&qword_10009A258);
  __chkstk_darwin(v20);
  v73 = (uint64_t)&v64 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = sub_10000498C(&qword_10009A260);
  __chkstk_darwin(v72);
  v23 = (char *)&v64 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = sub_10000498C(&qword_10009A268);
  __chkstk_darwin(v71);
  v77 = (uint64_t)&v64 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = sub_10000498C(&qword_10009A270);
  v25 = __chkstk_darwin(v74);
  v75 = (char *)&v64 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = a1;
  v27 = ButtonStyleConfiguration.label.getter(v25);
  if ((v5 & 1) != 0)
    v28 = static Color.white.getter(v27);
  else
    v28 = static Color.primary.getter(v27);
  v29 = v28;
  KeyPath = swift_getKeyPath(&unk_1000759D0);
  v31 = v67;
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v13, v11, v67);
  v32 = (uint64_t *)&v13[*(int *)(v65 + 36)];
  *v32 = KeyPath;
  v32[1] = v29;
  v33 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v31);
  LOBYTE(v29) = static Edge.Set.horizontal.getter(v33);
  v34 = v69;
  sub_10001D97C(v69, v7);
  sub_1000117FC(v34, v7);
  v35 = sub_10001D9D8(v34, v7);
  v36 = EdgeInsets.init(_all:)(v35, 12.0);
  v38 = v37;
  v40 = v39;
  v42 = v41;
  sub_10000928C((uint64_t)v13, (uint64_t)v15, &qword_10009A238);
  v43 = &v15[*(int *)(v68 + 36)];
  *v43 = v29;
  *((double *)v43 + 1) = v36;
  *((_QWORD *)v43 + 2) = v38;
  *((_QWORD *)v43 + 3) = v40;
  *((_QWORD *)v43 + 4) = v42;
  v43[40] = 0;
  v44 = sub_1000092D0((uint64_t)v13, &qword_10009A238);
  v45 = static Alignment.center.getter(v44);
  v46 = v66;
  sub_1000312E8(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, v66, 0.0, 1, INFINITY, 0, v45, v47, (uint64_t)&qword_10009A240, (void (*)(uint64_t, uint64_t, uint64_t))sub_10000928C, &qword_10009A248);
  sub_1000092D0((uint64_t)v15, &qword_10009A240);
  LOBYTE(v29) = (v76 & 0x101) == 0;
  sub_10000928C(v46, (uint64_t)v19, &qword_10009A248);
  v48 = &v19[*(int *)(v70 + 36)];
  *v48 = v29;
  *(_WORD *)(v48 + 1) = v78;
  sub_1000092D0(v46, &qword_10009A248);
  v49 = v73;
  sub_10000928C((uint64_t)v19, v73, &qword_10009A250);
  v50 = sub_1000092D0((uint64_t)v19, &qword_10009A250);
  v51 = 1.0;
  if ((ButtonStyleConfiguration.isPressed.getter(v50) & 1) != 0)
  {
    sub_10001D97C(v34, v7);
    v52 = sub_1000117FC(v34, v7);
    sub_10001D9D8(v34, v7);
    if ((v52 - 2) >= 3u)
      v51 = 0.7;
    else
      v51 = 0.5;
  }
  sub_10000928C(v49, (uint64_t)v23, &qword_10009A258);
  *(double *)&v23[*(int *)(v72 + 36)] = v51;
  sub_1000092D0(v49, &qword_10009A258);
  v53 = v77;
  sub_10000928C((uint64_t)v23, v77, &qword_10009A260);
  v54 = (uint64_t (**)())(v53 + *(int *)(v71 + 36));
  *v54 = sub_1000527B4;
  v54[1] = 0;
  sub_1000092D0((uint64_t)v23, &qword_10009A260);
  sub_10001D97C(v34, v7);
  v55 = sub_1000117FC(v34, v7);
  sub_10001D9D8(v34, v7);
  if (((v55 - 2) & 0xFD) != 0)
    v56 = 10.0;
  else
    v56 = 14.0;
  v57 = v81;
  v58 = (char *)v81 + *(int *)(v80 + 20);
  v59 = enum case for RoundedCornerStyle.continuous(_:);
  v60 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 104))(v58, v59, v60);
  *v57 = v56;
  v57[1] = v56;
  v61 = (uint64_t)v75;
  v62 = (uint64_t)&v75[*(int *)(v74 + 36)];
  sub_10000920C((uint64_t)v57, v62, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_BYTE *)(v62 + *(int *)(sub_10000498C(&qword_100098890) + 36)) = 0;
  sub_10000928C(v53, v61, &qword_10009A268);
  sub_100009250((uint64_t)v57, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  sub_1000092D0(v53, &qword_10009A268);
  return sub_10000930C(v61, v82, &qword_10009A270);
}

uint64_t sub_1000356E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *v2;
  __int16 v3;

  if (v2[1])
    v3 = 256;
  else
    v3 = 0;
  return sub_100034E50(a1, v3 | *v2, *((_QWORD *)v2 + 1), v2[16], a2);
}

uint64_t sub_10003570C@<X0>(uint64_t a1@<X8>)
{
  return sub_100031B7C(a1);
}

uint64_t sub_100035754@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t KeyPath;
  char *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  _QWORD v50[2];

  v2 = v1;
  v48 = a1;
  v3 = (int *)sub_10000498C(&qword_100099A70);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v46 - v7;
  v9 = sub_10000498C(&qword_100099A78);
  __chkstk_darwin(v9);
  v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10000498C(&qword_100099A80);
  __chkstk_darwin(v12);
  v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10000498C(&qword_100099A88);
  __chkstk_darwin(v15);
  v17 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10000498C(&qword_100099A90);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v46 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(_QWORD *)v2;
  if (*(_QWORD *)v2)
  {
    v47 = v19;
    if ((*(_BYTE *)(v22 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_isTextAnimationsUI) & 1) != 0)
    {
      v23 = *(_QWORD *)(v2 + 32);
      v24 = *(_BYTE *)(v2 + 40);
      sub_10001D97C(v23, v24);
      sub_1000117FC(v23, v24);
      v25 = sub_10001D9D8(v23, v24);
      *(_QWORD *)v21 = static VerticalAlignment.center.getter(v25);
      *((_QWORD *)v21 + 1) = 0x4008000000000000;
      v21[16] = 0;
      v26 = (uint64_t)&v21[*(int *)(sub_10000498C(&qword_100099AA8) + 44)];
      sub_100035BD8((uint64_t *)v2, (uint64_t)v14);
      KeyPath = swift_getKeyPath(&unk_1000752D8);
      sub_10000928C((uint64_t)v14, (uint64_t)v17, &qword_100099A80);
      v28 = &v17[*(int *)(v15 + 36)];
      *(_QWORD *)v28 = KeyPath;
      v28[8] = 1;
      sub_1000092D0((uint64_t)v14, &qword_100099A80);
      sub_10000930C((uint64_t)v17, v26, &qword_100099A88);
      v29 = &qword_100099A90;
      sub_10000928C((uint64_t)v21, (uint64_t)v11, &qword_100099A90);
      swift_storeEnumTagMultiPayload(v11, v9, 0);
      v30 = sub_10000966C(&qword_100099A98, &qword_100099A90, (uint64_t)&protocol conformance descriptor for HStack<A>);
      v31 = sub_10000966C(&qword_100099AA0, &qword_100099A70, (uint64_t)&unk_100075FB0);
      _ConditionalContent<>.init(storage:)(v11, v47, v3, v30, v31);
      v32 = (uint64_t)v21;
    }
    else
    {
      v33 = &v6[v3[10]];
      v34 = type metadata accessor for HoverEffect(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v33, 1, 1, v34);
      *(_QWORD *)v6 = 0;
      *((_WORD *)v6 + 4) = 257;
      sub_100037848(v2, (uint64_t)&v6[v3[11]]);
      v35 = &v6[v3[12]];
      *(_QWORD *)v35 = swift_getKeyPath(&unk_100074C50);
      v35[8] = 0;
      v36 = &v6[v3[13]];
      *(_QWORD *)v36 = swift_getKeyPath(&unk_100074BF8);
      v36[8] = 0;
      v37 = &v6[v3[14]];
      *(_QWORD *)v37 = swift_getKeyPath(&unk_1000752D8);
      v37[8] = 0;
      v38 = &v6[v3[15]];
      v49 = 0;
      State.init(wrappedValue:)(v50, &v49, &type metadata for Bool);
      v39 = v50[1];
      *v38 = v50[0];
      *((_QWORD *)v38 + 1) = v39;
      v29 = &qword_100099A70;
      sub_10000930C((uint64_t)v6, (uint64_t)v8, &qword_100099A70);
      sub_10000928C((uint64_t)v8, (uint64_t)v11, &qword_100099A70);
      swift_storeEnumTagMultiPayload(v11, v9, 1);
      v40 = sub_10000966C(&qword_100099A98, &qword_100099A90, (uint64_t)&protocol conformance descriptor for HStack<A>);
      v41 = sub_10000966C(&qword_100099AA0, &qword_100099A70, (uint64_t)&unk_100075FB0);
      _ConditionalContent<>.init(storage:)(v11, v47, v3, v40, v41);
      v32 = (uint64_t)v8;
    }
    return sub_1000092D0(v32, v29);
  }
  else
  {
    v43 = *(_QWORD *)(v2 + 8);
    v44 = type metadata accessor for TextFormattingState(0);
    v45 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    result = EnvironmentObject.error()(0, v43, v44, v45);
    __break(1u);
  }
  return result;
}

uint64_t sub_100035BD8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t KeyPath;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, _QWORD, uint64_t, uint64_t);
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  unsigned int (*v73)(_QWORD *, uint64_t, uint64_t);
  uint64_t v74;
  _QWORD *v75;
  char v76;
  uint64_t v77;
  int *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int *v107;
  uint64_t result;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  _QWORD *v115;
  char *v116;
  char *v117;
  _QWORD *v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  char v130;
  uint64_t v131;
  uint64_t v132;

  v123 = a2;
  v3 = sub_10000498C(&qword_100098FC8);
  v4 = __chkstk_darwin(v3);
  v117 = (char *)&v112 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v115 = (uint64_t *)((char *)&v112 - v6);
  v126 = sub_10000498C(&qword_100099AB0);
  v7 = __chkstk_darwin(v126);
  v122 = (uint64_t)&v112 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v121 = (char *)&v112 - v10;
  v11 = __chkstk_darwin(v9);
  v118 = (uint64_t *)((char *)&v112 - v12);
  v13 = __chkstk_darwin(v11);
  v127 = (uint64_t)&v112 - v14;
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v112 - v16;
  __chkstk_darwin(v15);
  v124 = (char *)&v112 - v18;
  v19 = sub_10000498C(&qword_1000997A0);
  v20 = __chkstk_darwin(v19);
  v116 = (char *)&v112 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20);
  v114 = (char *)&v112 - v23;
  v24 = __chkstk_darwin(v22);
  v113 = (char *)&v112 - v25;
  __chkstk_darwin(v24);
  v27 = (char *)&v112 - v26;
  v28 = (int *)sub_10000498C(&qword_100099AB8);
  v29 = __chkstk_darwin(v28);
  v120 = (char *)&v112 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __chkstk_darwin(v29);
  v119 = (uint64_t)&v112 - v32;
  v33 = __chkstk_darwin(v31);
  v35 = (char *)&v112 - v34;
  v36 = __chkstk_darwin(v33);
  v125 = (uint64_t)&v112 - v37;
  v38 = __chkstk_darwin(v36);
  v40 = (char *)&v112 - v39;
  __chkstk_darwin(v38);
  v128 = (uint64_t)&v112 - v41;
  v42 = a1[4];
  v43 = *((_BYTE *)a1 + 40);
  sub_10001D97C(v42, v43);
  v44 = sub_1000117FC(v42, v43);
  sub_10001D9D8(v42, v43);
  v129 = a1;
  v45 = *a1;
  if (*a1)
  {
    v46 = UITextFormattingViewControllerFontAttributesComponentKey;
    KeyPath = swift_getKeyPath(&unk_100075290);
    swift_getKeyPath(&unk_1000752B8);
    v48 = swift_retain();
    static Published.subscript.getter(&v131, v48, KeyPath);
    swift_release();
    swift_release();
    if ((*(_BYTE *)(v45 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_isInPopoverPresentation) & 1) != 0)
      v49 = 0;
    else
      v49 = *(_BYTE *)(v45 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_hasParentViewController) ^ 1;
    sub_100066310(v46, v131, v132, v49 & 1, *(_BYTE *)(v45 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_useReducedMetrics), v44);
    v51 = v50;
    swift_release();
    swift_retain();
    v52 = sub_100028524();
    v53 = swift_release();
    if ((v52 & 1) != 0)
      static HoverEffect.lift.getter(v53);
    else
      static HoverEffect.highlight.getter(v53);
    v54 = type metadata accessor for HoverEffect(0);
    v55 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56);
    v55(v27, 0, 1, v54);
    *(_QWORD *)v40 = v51;
    *((_WORD *)v40 + 4) = 256;
    sub_10000930C((uint64_t)v27, (uint64_t)&v40[v28[10]], &qword_1000997A0);
    sub_100036740(0, (uint64_t)&v40[v28[11]]);
    v56 = &v40[v28[12]];
    *(_QWORD *)v56 = swift_getKeyPath(&unk_100074C50);
    v56[8] = 0;
    v57 = &v40[v28[13]];
    *(_QWORD *)v57 = swift_getKeyPath(&unk_100074BF8);
    v57[8] = 0;
    v58 = &v40[v28[14]];
    *(_QWORD *)v58 = swift_getKeyPath(&unk_1000752D8);
    v58[8] = 0;
    v59 = &v40[v28[15]];
    v130 = 0;
    State.init(wrappedValue:)(&v131, &v130, &type metadata for Bool);
    v60 = v132;
    *v59 = v131;
    *((_QWORD *)v59 + 1) = v60;
    sub_10000930C((uint64_t)v40, v128, &qword_100099AB8);
    swift_retain();
    LOBYTE(v59) = sub_100028E50();
    v61 = swift_release();
    if ((v59 & 1) != 0)
    {
      v62 = (uint64_t)v113;
      static HoverEffect.lift.getter(v61);
    }
    else
    {
      v62 = (uint64_t)v113;
      static HoverEffect.highlight.getter(v61);
    }
    v63 = (uint64_t)v124;
    v124 = (char *)v54;
    v55((char *)v62, 0, 1, v54);
    *(_QWORD *)v35 = v51;
    *((_WORD *)v35 + 4) = 256;
    sub_10000930C(v62, (uint64_t)&v35[v28[10]], &qword_1000997A0);
    sub_100036B90(0, (uint64_t)&v35[v28[11]]);
    v64 = &v35[v28[12]];
    *(_QWORD *)v64 = swift_getKeyPath(&unk_100074C50);
    v64[8] = 0;
    v65 = &v35[v28[13]];
    *(_QWORD *)v65 = swift_getKeyPath(&unk_100074BF8);
    v65[8] = 0;
    v66 = &v35[v28[14]];
    *(_QWORD *)v66 = swift_getKeyPath(&unk_1000752D8);
    v66[8] = 0;
    v67 = &v35[v28[15]];
    v130 = 0;
    State.init(wrappedValue:)(&v131, &v130, &type metadata for Bool);
    v68 = v132;
    *v67 = v131;
    *((_QWORD *)v67 + 1) = v68;
    sub_10000930C((uint64_t)v35, v125, &qword_100099AB8);
    v69 = swift_getKeyPath(&unk_100075300);
    swift_getKeyPath(&unk_100075328);
    v70 = swift_retain();
    v71 = v115;
    static Published.subscript.getter(v115, v70, v69);
    swift_release();
    swift_release();
    v72 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor(0);
    v73 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 48);
    if (v73(v71, 1, v72))
    {
      sub_1000092D0((uint64_t)v71, &qword_100098FC8);
      v74 = swift_release();
      v75 = v117;
    }
    else
    {
      v76 = UITextFormattingViewController.FormattingDescriptor.underlinePresent.getter();
      sub_1000092D0((uint64_t)v71, &qword_100098FC8);
      v74 = swift_release();
      v75 = v117;
      if ((v76 & 1) != 0)
      {
        v77 = (uint64_t)v114;
        static HoverEffect.lift.getter(v74);
        goto LABEL_16;
      }
    }
    v77 = (uint64_t)v114;
    static HoverEffect.highlight.getter(v74);
LABEL_16:
    v55((char *)v77, 0, 1, (uint64_t)v124);
    *(_QWORD *)v17 = v51;
    *((_WORD *)v17 + 4) = 256;
    v78 = (int *)v126;
    sub_10000930C(v77, (uint64_t)&v17[*(int *)(v126 + 40)], &qword_1000997A0);
    sub_100036FC0(0, (uint64_t)&v17[v78[11]]);
    v79 = &v17[v78[12]];
    *(_QWORD *)v79 = swift_getKeyPath(&unk_100074C50);
    v79[8] = 0;
    v80 = &v17[v78[13]];
    *(_QWORD *)v80 = swift_getKeyPath(&unk_100074BF8);
    v80[8] = 0;
    v81 = &v17[v78[14]];
    *(_QWORD *)v81 = swift_getKeyPath(&unk_1000752D8);
    v81[8] = 0;
    v82 = &v17[v78[15]];
    v130 = 0;
    State.init(wrappedValue:)(&v131, &v130, &type metadata for Bool);
    v83 = v132;
    *v82 = v131;
    *((_QWORD *)v82 + 1) = v83;
    sub_10000930C((uint64_t)v17, v63, &qword_100099AB0);
    v84 = swift_getKeyPath(&unk_100075300);
    swift_getKeyPath(&unk_100075328);
    v85 = swift_retain();
    static Published.subscript.getter(v75, v85, v84);
    swift_release();
    swift_release();
    if (v73(v75, 1, v72))
    {
      sub_1000092D0((uint64_t)v75, &qword_100098FC8);
      v86 = swift_release();
      v87 = v123;
      v88 = (uint64_t)v121;
      v89 = v127;
    }
    else
    {
      v90 = UITextFormattingViewController.FormattingDescriptor.strikethroughPresent.getter();
      sub_1000092D0((uint64_t)v75, &qword_100098FC8);
      v86 = swift_release();
      v87 = v123;
      v88 = (uint64_t)v121;
      v89 = v127;
      if ((v90 & 1) != 0)
      {
        v91 = v63;
        v92 = (uint64_t)v116;
        static HoverEffect.lift.getter(v86);
LABEL_21:
        v93 = (uint64_t)v120;
        v55((char *)v92, 0, 1, (uint64_t)v124);
        v94 = (uint64_t)v118;
        *v118 = v51;
        *(_WORD *)(v94 + 8) = 256;
        v95 = (int *)v126;
        sub_10000930C(v92, v94 + *(int *)(v126 + 40), &qword_1000997A0);
        sub_10003748C(0, v94 + v95[11]);
        v96 = v94 + v95[12];
        *(_QWORD *)v96 = swift_getKeyPath(&unk_100074C50);
        *(_BYTE *)(v96 + 8) = 0;
        v97 = v94 + v95[13];
        *(_QWORD *)v97 = swift_getKeyPath(&unk_100074BF8);
        *(_BYTE *)(v97 + 8) = 0;
        v98 = v94 + v95[14];
        *(_QWORD *)v98 = swift_getKeyPath(&unk_1000752D8);
        *(_BYTE *)(v98 + 8) = 0;
        v99 = v94 + v95[15];
        v130 = 0;
        State.init(wrappedValue:)(&v131, &v130, &type metadata for Bool);
        v100 = v132;
        *(_BYTE *)v99 = v131;
        *(_QWORD *)(v99 + 8) = v100;
        sub_10000930C(v94, v89, &qword_100099AB0);
        v101 = v119;
        sub_10000928C(v128, v119, &qword_100099AB8);
        v102 = v125;
        sub_10000928C(v125, v93, &qword_100099AB8);
        sub_10000928C(v91, v88, &qword_100099AB0);
        v103 = v89;
        v104 = v93;
        v105 = v88;
        v106 = v122;
        sub_10000928C(v103, v122, &qword_100099AB0);
        sub_10000928C(v101, v87, &qword_100099AB8);
        v107 = (int *)sub_10000498C(&qword_100099AC0);
        sub_10000928C(v104, v87 + v107[12], &qword_100099AB8);
        sub_10000928C(v105, v87 + v107[16], &qword_100099AB0);
        sub_10000928C(v106, v87 + v107[20], &qword_100099AB0);
        sub_1000092D0(v127, &qword_100099AB0);
        sub_1000092D0(v91, &qword_100099AB0);
        sub_1000092D0(v102, &qword_100099AB8);
        sub_1000092D0(v128, &qword_100099AB8);
        sub_1000092D0(v106, &qword_100099AB0);
        sub_1000092D0(v105, &qword_100099AB0);
        sub_1000092D0(v104, &qword_100099AB8);
        return sub_1000092D0(v101, &qword_100099AB8);
      }
    }
    v91 = v63;
    v92 = (uint64_t)v116;
    static HoverEffect.highlight.getter(v86);
    goto LABEL_21;
  }
  v109 = v129[1];
  v110 = type metadata accessor for TextFormattingState(0);
  v111 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
  result = EnvironmentObject.error()(0, v109, v110, v111);
  __break(1u);
  return result;
}

uint64_t sub_100036714@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_100028524();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100036740@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t KeyPath;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t *v28;
  char *v29;
  char *v30;
  char v31;
  uint64_t v32;
  char v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  char v40;
  uint64_t v41;
  uint64_t result;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v3 = v2;
  v48 = a1;
  v52 = a2;
  v4 = type metadata accessor for SymbolRenderingMode(0);
  v46 = *(_QWORD *)(v4 - 8);
  v47 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (int *)type metadata accessor for TFToggle(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_10000498C(&qword_100099AC8);
  __chkstk_darwin(v49);
  v51 = (uint64_t)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10000498C(&qword_100099AD0);
  v12 = __chkstk_darwin(v11);
  v50 = (uint64_t)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  static SymbolRenderingMode.monochrome.getter(v12);
  v14 = *(_QWORD *)(v2 + 16);
  v15 = *(unsigned __int8 *)(v2 + 24);
  v16 = *(unsigned __int8 *)(v2 + 25);
  sub_10001D970(v14, v15, *(_BYTE *)(v2 + 25));
  v17 = sub_1000119BC(v14, v15 | (v16 << 8));
  v19 = v18;
  sub_10001D9CC(v14, v15, v16);
  v20 = 0;
  v21 = 0;
  if ((v19 & 1) == 0 && v17 == 1)
  {
    if (qword_100098130 != -1)
      swift_once(&qword_100098130, sub_100023368);
    v20 = qword_10009B450;
    v21 = *(_QWORD *)algn_10009B458;
    swift_bridgeObjectRetain(*(_QWORD *)algn_10009B458);
  }
  KeyPath = swift_getKeyPath(&unk_1000755E8);
  v23 = sub_1000389B8(KeyPath);
  v25 = v24;
  v27 = v26;
  swift_release();
  *(_OWORD *)v9 = xmmword_100074A70;
  *((_QWORD *)v9 + 2) = 0;
  *((_QWORD *)v9 + 3) = 0;
  (*(void (**)(char *, char *, uint64_t))(v46 + 32))(&v9[v7[6]], v6, v47);
  v28 = (uint64_t *)&v9[v7[7]];
  *v28 = v20;
  v28[1] = v21;
  v9[v7[8]] = v48 & 1;
  v29 = &v9[v7[9]];
  *(_QWORD *)v29 = v23;
  *((_QWORD *)v29 + 1) = v25;
  v29[16] = v27 & 1;
  v30 = &v9[v7[10]];
  *(_QWORD *)v30 = swift_getKeyPath(&unk_100074BF8);
  v30[8] = 0;
  if (*(_QWORD *)v3)
  {
    swift_retain();
    v31 = sub_100028AD8();
    swift_release();
    if ((v31 & 1) != 0)
    {
      v32 = *(_QWORD *)(v3 + 48);
      v33 = *(_BYTE *)(v3 + 56);
      sub_10001D97C(v32, v33);
      v34 = sub_100011B90(v32, v33);
      sub_10001D9D8(v32, v33);
      v35 = v34 ^ 1;
    }
    else
    {
      v35 = 1;
    }
    v36 = swift_getKeyPath(&unk_100075480);
    v37 = swift_allocObject(&unk_10008F850, 17, 7);
    *(_BYTE *)(v37 + 16) = v35 & 1;
    v38 = v51;
    sub_10000920C((uint64_t)v9, v51, type metadata accessor for TFToggle);
    v39 = (uint64_t *)(v38 + *(int *)(v49 + 36));
    *v39 = v36;
    v39[1] = (uint64_t)sub_10005277C;
    v39[2] = v37;
    sub_100009250((uint64_t)v9, type metadata accessor for TFToggle);
    swift_retain();
    v40 = sub_100028524();
    swift_release();
    if (qword_100098130 != -1)
      swift_once(&qword_100098130, sub_100023368);
    v41 = v50;
    sub_100034AA8(v40 & 1, qword_10009B450, *(uint64_t *)algn_10009B458, &qword_100099AD0, &qword_100099AC8, (uint64_t (*)(void))sub_10004FC54, v50);
    sub_1000092D0(v38, &qword_100099AC8);
    return sub_10000930C(v41, v52, &qword_100099AD0);
  }
  else
  {
    v43 = *(_QWORD *)(v3 + 8);
    v44 = type metadata accessor for TextFormattingState(0);
    v45 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    result = EnvironmentObject.error()(0, v43, v44, v45);
    __break(1u);
  }
  return result;
}

uint64_t sub_100036B64@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_100028E50();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100036B90@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t KeyPath;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t *v28;
  char *v29;
  char *v30;
  char v31;
  uint64_t v32;
  char v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  char v40;
  uint64_t v41;
  uint64_t result;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v3 = v2;
  v48 = a1;
  v52 = a2;
  v4 = type metadata accessor for SymbolRenderingMode(0);
  v46 = *(_QWORD *)(v4 - 8);
  v47 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (int *)type metadata accessor for TFToggle(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_10000498C(&qword_100099AC8);
  __chkstk_darwin(v49);
  v51 = (uint64_t)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10000498C(&qword_100099AD0);
  v12 = __chkstk_darwin(v11);
  v50 = (uint64_t)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  static SymbolRenderingMode.monochrome.getter(v12);
  v14 = *(_QWORD *)(v2 + 16);
  v15 = *(unsigned __int8 *)(v2 + 24);
  v16 = *(unsigned __int8 *)(v2 + 25);
  sub_10001D970(v14, v15, *(_BYTE *)(v2 + 25));
  v17 = sub_1000119BC(v14, v15 | (v16 << 8));
  v19 = v18;
  sub_10001D9CC(v14, v15, v16);
  v20 = 0;
  v21 = 0;
  if ((v19 & 1) == 0 && v17 == 1)
  {
    if (qword_100098138 != -1)
      swift_once(&qword_100098138, sub_100023470);
    v20 = qword_10009B460;
    v21 = *(_QWORD *)algn_10009B468;
    swift_bridgeObjectRetain(*(_QWORD *)algn_10009B468);
  }
  KeyPath = swift_getKeyPath(&unk_1000755C0);
  v23 = sub_1000389B8(KeyPath);
  v25 = v24;
  v27 = v26;
  swift_release();
  *(_OWORD *)v9 = xmmword_100074A80;
  *((_QWORD *)v9 + 2) = 0;
  *((_QWORD *)v9 + 3) = 0;
  (*(void (**)(char *, char *, uint64_t))(v46 + 32))(&v9[v7[6]], v6, v47);
  v28 = (uint64_t *)&v9[v7[7]];
  *v28 = v20;
  v28[1] = v21;
  v9[v7[8]] = v48 & 1;
  v29 = &v9[v7[9]];
  *(_QWORD *)v29 = v23;
  *((_QWORD *)v29 + 1) = v25;
  v29[16] = v27 & 1;
  v30 = &v9[v7[10]];
  *(_QWORD *)v30 = swift_getKeyPath(&unk_100074BF8);
  v30[8] = 0;
  if (*(_QWORD *)v3)
  {
    swift_retain();
    v31 = sub_100029404();
    swift_release();
    if ((v31 & 1) != 0)
    {
      v32 = *(_QWORD *)(v3 + 48);
      v33 = *(_BYTE *)(v3 + 56);
      sub_10001D97C(v32, v33);
      v34 = sub_100011B90(v32, v33);
      sub_10001D9D8(v32, v33);
      v35 = v34 ^ 1;
    }
    else
    {
      v35 = 1;
    }
    v36 = swift_getKeyPath(&unk_100075480);
    v37 = swift_allocObject(&unk_10008F828, 17, 7);
    *(_BYTE *)(v37 + 16) = v35 & 1;
    v38 = v51;
    sub_10000920C((uint64_t)v9, v51, type metadata accessor for TFToggle);
    v39 = (uint64_t *)(v38 + *(int *)(v49 + 36));
    *v39 = v36;
    v39[1] = (uint64_t)sub_10005277C;
    v39[2] = v37;
    sub_100009250((uint64_t)v9, type metadata accessor for TFToggle);
    swift_retain();
    v40 = sub_100028E50();
    swift_release();
    if (qword_100098138 != -1)
      swift_once(&qword_100098138, sub_100023470);
    v41 = v50;
    sub_100034AA8(v40 & 1, qword_10009B460, *(uint64_t *)algn_10009B468, &qword_100099AD0, &qword_100099AC8, (uint64_t (*)(void))sub_10004FC54, v50);
    sub_1000092D0(v38, &qword_100099AC8);
    return sub_10000930C(v41, v52, &qword_100099AD0);
  }
  else
  {
    v43 = *(_QWORD *)(v3 + 8);
    v44 = type metadata accessor for TextFormattingState(0);
    v45 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    result = EnvironmentObject.error()(0, v43, v44, v45);
    __break(1u);
  }
  return result;
}

uint64_t sub_100036FB4@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100037388(a1, (uint64_t (*)(void))&UITextFormattingViewController.FormattingDescriptor.underlinePresent.getter, a2);
}

uint64_t sub_100036FC0@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t KeyPath;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;

  v45 = a1;
  v48 = a2;
  v3 = sub_10000498C(&qword_100098FC8);
  __chkstk_darwin(v3);
  v47 = (uint64_t *)((char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for SymbolRenderingMode(0);
  v43 = *(_QWORD *)(v5 - 8);
  v44 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (int *)type metadata accessor for TFToggle(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10000498C(&qword_1000997D8);
  v12 = __chkstk_darwin(v11);
  v46 = (uint64_t)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  static SymbolRenderingMode.monochrome.getter(v12);
  v14 = *(_QWORD *)(v2 + 16);
  v15 = *(unsigned __int8 *)(v2 + 24);
  v16 = *(unsigned __int8 *)(v2 + 25);
  sub_10001D970(v14, v15, *(_BYTE *)(v2 + 25));
  v17 = sub_1000119BC(v14, v15 | (v16 << 8));
  v19 = v18;
  sub_10001D9CC(v14, v15, v16);
  v20 = 0;
  v21 = 0;
  if ((v19 & 1) == 0 && v17 == 1)
  {
    if (qword_100098140 != -1)
      swift_once(&qword_100098140, sub_100023580);
    v20 = qword_10009B470;
    v21 = *(_QWORD *)algn_10009B478;
    swift_bridgeObjectRetain(*(_QWORD *)algn_10009B478);
  }
  KeyPath = swift_getKeyPath(&unk_100075598);
  v23 = sub_1000389B8(KeyPath);
  v25 = v24;
  v27 = v26;
  swift_release();
  *(_OWORD *)v10 = xmmword_100074A90;
  *((_QWORD *)v10 + 2) = 0;
  *((_QWORD *)v10 + 3) = 0;
  (*(void (**)(char *, char *, uint64_t))(v43 + 32))(&v10[v8[6]], v7, v44);
  v28 = (uint64_t *)&v10[v8[7]];
  *v28 = v20;
  v28[1] = v21;
  v10[v8[8]] = v45 & 1;
  v29 = &v10[v8[9]];
  *(_QWORD *)v29 = v23;
  *((_QWORD *)v29 + 1) = v25;
  v29[16] = v27 & 1;
  v30 = &v10[v8[10]];
  *(_QWORD *)v30 = swift_getKeyPath(&unk_100074BF8);
  v30[8] = 0;
  if (*(_QWORD *)v2)
  {
    v31 = swift_getKeyPath(&unk_100075300);
    swift_getKeyPath(&unk_100075328);
    v32 = swift_retain();
    v33 = v47;
    static Published.subscript.getter(v47, v32, v31);
    swift_release();
    swift_release();
    v34 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor(0);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 48))(v33, 1, v34))
      v35 = 0;
    else
      v35 = UITextFormattingViewController.FormattingDescriptor.underlinePresent.getter();
    v36 = v48;
    sub_1000092D0((uint64_t)v33, &qword_100098FC8);
    swift_release();
    if (qword_100098140 != -1)
      swift_once(&qword_100098140, sub_100023580);
    v37 = v46;
    sub_10003464C(v35 & 1, qword_10009B470, *(uint64_t *)algn_10009B478, v46);
    sub_100009250((uint64_t)v10, type metadata accessor for TFToggle);
    return sub_10000930C(v37, v36, &qword_1000997D8);
  }
  else
  {
    v39 = *(_QWORD *)(v2 + 8);
    v40 = type metadata accessor for TextFormattingState(0);
    v41 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    result = EnvironmentObject.error()(0, v39, v40, v41);
    __break(1u);
  }
  return result;
}

uint64_t sub_10003737C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100037388(a1, (uint64_t (*)(void))&UITextFormattingViewController.FormattingDescriptor.strikethroughPresent.getter, a2);
}

uint64_t sub_100037388@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(void)@<X3>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  char v12;
  uint64_t result;
  uint64_t v14;

  v6 = sub_10000498C(&qword_100098FC8);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *a1;
  KeyPath = swift_getKeyPath(&unk_100075300);
  swift_getKeyPath(&unk_100075328);
  static Published.subscript.getter(v8, v9, KeyPath);
  swift_release();
  swift_release();
  v11 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor(0);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v8, 1, v11))
    v12 = 0;
  else
    v12 = a2();
  result = sub_1000092D0((uint64_t)v8, &qword_100098FC8);
  *a3 = v12 & 1;
  return result;
}

uint64_t sub_10003748C@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t KeyPath;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;

  v45 = a1;
  v48 = a2;
  v3 = sub_10000498C(&qword_100098FC8);
  __chkstk_darwin(v3);
  v47 = (uint64_t *)((char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for SymbolRenderingMode(0);
  v43 = *(_QWORD *)(v5 - 8);
  v44 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (int *)type metadata accessor for TFToggle(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10000498C(&qword_1000997D8);
  v12 = __chkstk_darwin(v11);
  v46 = (uint64_t)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  static SymbolRenderingMode.monochrome.getter(v12);
  v14 = *(_QWORD *)(v2 + 16);
  v15 = *(unsigned __int8 *)(v2 + 24);
  v16 = *(unsigned __int8 *)(v2 + 25);
  sub_10001D970(v14, v15, *(_BYTE *)(v2 + 25));
  v17 = sub_1000119BC(v14, v15 | (v16 << 8));
  v19 = v18;
  sub_10001D9CC(v14, v15, v16);
  v20 = 0;
  v21 = 0;
  if ((v19 & 1) == 0 && v17 == 1)
  {
    if (qword_100098148 != -1)
      swift_once(&qword_100098148, sub_100023690);
    v20 = qword_10009B480;
    v21 = *(_QWORD *)algn_10009B488;
    swift_bridgeObjectRetain(*(_QWORD *)algn_10009B488);
  }
  KeyPath = swift_getKeyPath(&unk_100075570);
  v23 = sub_1000389B8(KeyPath);
  v25 = v24;
  v27 = v26;
  swift_release();
  *(_OWORD *)v10 = xmmword_100074AA0;
  *((_QWORD *)v10 + 2) = 0;
  *((_QWORD *)v10 + 3) = 0;
  (*(void (**)(char *, char *, uint64_t))(v43 + 32))(&v10[v8[6]], v7, v44);
  v28 = (uint64_t *)&v10[v8[7]];
  *v28 = v20;
  v28[1] = v21;
  v10[v8[8]] = v45 & 1;
  v29 = &v10[v8[9]];
  *(_QWORD *)v29 = v23;
  *((_QWORD *)v29 + 1) = v25;
  v29[16] = v27 & 1;
  v30 = &v10[v8[10]];
  *(_QWORD *)v30 = swift_getKeyPath(&unk_100074BF8);
  v30[8] = 0;
  if (*(_QWORD *)v2)
  {
    v31 = swift_getKeyPath(&unk_100075300);
    swift_getKeyPath(&unk_100075328);
    v32 = swift_retain();
    v33 = v47;
    static Published.subscript.getter(v47, v32, v31);
    swift_release();
    swift_release();
    v34 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor(0);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 48))(v33, 1, v34))
      v35 = 0;
    else
      v35 = UITextFormattingViewController.FormattingDescriptor.strikethroughPresent.getter();
    v36 = v48;
    sub_1000092D0((uint64_t)v33, &qword_100098FC8);
    swift_release();
    if (qword_100098148 != -1)
      swift_once(&qword_100098148, sub_100023690);
    v37 = v46;
    sub_10003464C(v35 & 1, qword_10009B480, *(uint64_t *)algn_10009B488, v46);
    sub_100009250((uint64_t)v10, type metadata accessor for TFToggle);
    return sub_10000930C(v37, v36, &qword_1000997D8);
  }
  else
  {
    v39 = *(_QWORD *)(v2 + 8);
    v40 = type metadata accessor for TextFormattingState(0);
    v41 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    result = EnvironmentObject.error()(0, v39, v40, v41);
    __break(1u);
  }
  return result;
}

uint64_t sub_100037848@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char v53;
  ValueMetadata *v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t OpaqueTypeConformance2;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  uint64_t v136;
  ValueMetadata *v137;
  uint64_t v138;
  unint64_t v139;

  v126 = a2;
  v123 = sub_10000498C(&qword_100099AE0);
  __chkstk_darwin(v123);
  v120 = (uint64_t)&v106 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = sub_10000498C(&qword_100099AE8);
  __chkstk_darwin(v130);
  v131 = (uint64_t)&v106 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = sub_10000498C(&qword_100099AF0);
  __chkstk_darwin(v122);
  v112 = (uint64_t)&v106 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = sub_10000498C(&qword_100099AF8);
  __chkstk_darwin(v128);
  v121 = (char *)&v106 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10000498C(&qword_1000997D8);
  v8 = __chkstk_darwin(v7);
  v129 = (char *)&v106 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v106 - v11;
  v13 = __chkstk_darwin(v10);
  v133 = (uint64_t)&v106 - v14;
  __chkstk_darwin(v13);
  v132 = (uint64_t)&v106 - v15;
  v118 = sub_10000498C(&qword_100099B00);
  __chkstk_darwin(v118);
  v111 = (uint64_t)&v106 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10000498C(&qword_100099AD0);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v106 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v106 - v22;
  v24 = __chkstk_darwin(v21);
  v134 = (uint64_t)&v106 - v25;
  __chkstk_darwin(v24);
  v27 = (char *)&v106 - v26;
  v125 = sub_10000498C(&qword_100099B08);
  __chkstk_darwin(v125);
  v124 = (uint64_t)&v106 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = sub_10000498C(&qword_100099B10);
  __chkstk_darwin(v114);
  v115 = (uint64_t)&v106 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = sub_10000498C(&qword_100099B18);
  __chkstk_darwin(v127);
  v117 = (char *)&v106 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = sub_10000498C(&qword_100099B20);
  v108 = *(_QWORD *)(v113 - 8);
  __chkstk_darwin(v113);
  v107 = (char *)&v106 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = sub_10000498C(&qword_100099B28);
  v110 = *(_QWORD *)(v116 - 8);
  __chkstk_darwin(v116);
  v109 = (char *)&v106 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = *(_QWORD *)(a1 + 16);
  v34 = *(unsigned __int8 *)(a1 + 24);
  v35 = *(unsigned __int8 *)(a1 + 25);
  sub_10001D970(v33, v34, *(_BYTE *)(a1 + 25));
  v36 = sub_1000119BC(v33, v34 | (v35 << 8));
  v38 = v37;
  v39 = v33;
  v40 = (uint64_t)v129;
  v41 = sub_10001D9CC(v39, v34, v35);
  if ((v38 & 1) == 0)
  {
    v42 = v12;
    v43 = v40;
    v44 = v132;
    v45 = v133;
    v47 = v130;
    v46 = v131;
    v48 = v134;
    if (v36 == 3)
    {
      v119 = v27;
      sub_100036740(0, (uint64_t)v27);
      sub_100036B90(0, v48);
      sub_100036FC0(0, v44);
      sub_10000928C((uint64_t)v27, (uint64_t)v23, &qword_100099AD0);
      sub_10000928C(v48, (uint64_t)v20, &qword_100099AD0);
      v84 = v44;
      v85 = v45;
      sub_10000928C(v44, v45, &qword_1000997D8);
      v86 = v112;
      sub_10000928C((uint64_t)v23, v112, &qword_100099AD0);
      v87 = sub_10000498C(&qword_100099B68);
      sub_10000928C((uint64_t)v20, v86 + *(int *)(v87 + 48), &qword_100099AD0);
      sub_10000928C(v85, v86 + *(int *)(v87 + 64), &qword_1000997D8);
      sub_1000092D0(v85, &qword_1000997D8);
      sub_1000092D0((uint64_t)v20, &qword_100099AD0);
      sub_1000092D0((uint64_t)v23, &qword_100099AD0);
      sub_10000928C(v86, v46, &qword_100099AF0);
      swift_storeEnumTagMultiPayload(v46, v47, 0);
      v88 = sub_10000966C(&qword_100099B38, &qword_100099AF0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
      v89 = sub_10000966C(&qword_100099B40, &qword_100099AE0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
      v90 = (uint64_t)v121;
      _ConditionalContent<>.init(storage:)(v46, v122, v123, v88, v89);
      sub_1000092D0(v86, &qword_100099AF0);
      v91 = v124;
      sub_10000928C(v90, v124, &qword_100099AF8);
      swift_storeEnumTagMultiPayload(v91, v125, 1);
      v92 = sub_10004FD24();
      v93 = sub_10004FE04();
      _ConditionalContent<>.init(storage:)(v91, v127, v128, v92, v93);
      sub_1000092D0(v90, &qword_100099AF8);
      v82 = v84;
      goto LABEL_7;
    }
    if (v36 == 2)
    {
      sub_100036740(0, (uint64_t)v27);
      sub_100036B90(0, v48);
      sub_10000928C((uint64_t)v27, (uint64_t)v23, &qword_100099AD0);
      v94 = (uint64_t)v20;
      sub_10000928C(v48, (uint64_t)v20, &qword_100099AD0);
      v95 = v111;
      sub_10000928C((uint64_t)v23, v111, &qword_100099AD0);
      v96 = sub_10000498C(&qword_100099B70);
      sub_10000928C(v94, v95 + *(int *)(v96 + 48), &qword_100099AD0);
      sub_1000092D0(v94, &qword_100099AD0);
      sub_1000092D0((uint64_t)v23, &qword_100099AD0);
      v97 = v115;
      sub_10000928C(v95, v115, &qword_100099B00);
      swift_storeEnumTagMultiPayload(v97, v114, 1);
      v98 = sub_10000966C(&qword_100099B50, &qword_100099B20, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
      v99 = sub_10004EC30();
      v136 = v113;
      v137 = &type metadata for TFMenuStyle;
      v138 = v98;
      v139 = v99;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v136, &opaque type descriptor for <<opaque return type of View.menuStyle<A>(_:)>>, 1);
      v101 = sub_10000966C(&qword_100099B58, &qword_100099B00, (uint64_t)&protocol conformance descriptor for TupleView<A>);
      v102 = (uint64_t)v117;
      _ConditionalContent<>.init(storage:)(v97, v116, v118, OpaqueTypeConformance2, v101);
      sub_1000092D0(v95, &qword_100099B00);
      v103 = v124;
      sub_10000928C(v102, v124, &qword_100099B18);
      swift_storeEnumTagMultiPayload(v103, v125, 0);
      v104 = sub_10004FD24();
      v105 = sub_10004FE04();
      _ConditionalContent<>.init(storage:)(v103, v127, v128, v104, v105);
      sub_1000092D0(v102, &qword_100099B18);
      sub_1000092D0(v48, &qword_100099AD0);
      v83 = (uint64_t)v27;
      return sub_1000092D0(v83, &qword_100099AD0);
    }
    v40 = v43;
    v12 = v42;
    if (v36 == 1)
    {
      __chkstk_darwin(v41);
      *(&v106 - 2) = a1;
      v49 = sub_10000498C(&qword_1000999A0);
      v50 = sub_10000966C(&qword_1000999B0, &qword_1000999A0, (uint64_t)&unk_100075E88);
      v51 = sub_10000966C(&qword_100099B40, &qword_100099AE0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
      v52 = v107;
      Menu.init(content:label:)(sub_10004FEA8, &v106 - 4, sub_100038838, 0, v49, v123, v50, v51);
      v135 = 0;
      State.init(wrappedValue:)(&v136, &v135, &type metadata for Bool);
      v53 = v136;
      v54 = v137;
      LOBYTE(v136) = 0;
      LOBYTE(v137) = v53;
      v138 = (uint64_t)v54;
      v55 = sub_10000966C(&qword_100099B50, &qword_100099B20, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
      v56 = sub_10004EC30();
      v57 = v109;
      v58 = v113;
      View.menuStyle<A>(_:)(&v136, v113, &type metadata for TFMenuStyle, v55, v56);
      swift_release();
      (*(void (**)(char *, uint64_t))(v108 + 8))(v52, v58);
      v59 = v110;
      v60 = v115;
      v61 = v116;
      (*(void (**)(uint64_t, char *, uint64_t))(v110 + 16))(v115, v57, v116);
      swift_storeEnumTagMultiPayload(v60, v114, 0);
      v136 = v58;
      v137 = &type metadata for TFMenuStyle;
      v138 = v55;
      v139 = v56;
      v62 = swift_getOpaqueTypeConformance2(&v136, &opaque type descriptor for <<opaque return type of View.menuStyle<A>(_:)>>, 1);
      v63 = sub_10000966C(&qword_100099B58, &qword_100099B00, (uint64_t)&protocol conformance descriptor for TupleView<A>);
      v64 = (uint64_t)v117;
      _ConditionalContent<>.init(storage:)(v60, v61, v118, v62, v63);
      v65 = v124;
      sub_10000928C(v64, v124, &qword_100099B18);
      swift_storeEnumTagMultiPayload(v65, v125, 0);
      v66 = sub_10004FD24();
      v67 = sub_10004FE04();
      _ConditionalContent<>.init(storage:)(v65, v127, v128, v66, v67);
      sub_1000092D0(v64, &qword_100099B18);
      return (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v57, v61);
    }
  }
  v69 = (uint64_t)v27;
  v119 = v27;
  sub_100036740(0, (uint64_t)v27);
  v70 = v134;
  sub_100036B90(0, v134);
  v71 = v132;
  sub_100036FC0(0, v132);
  v72 = v133;
  sub_10003748C(0, v133);
  sub_10000928C(v69, (uint64_t)v23, &qword_100099AD0);
  sub_10000928C(v70, (uint64_t)v20, &qword_100099AD0);
  sub_10000928C(v71, (uint64_t)v12, &qword_1000997D8);
  sub_10000928C(v72, v40, &qword_1000997D8);
  v73 = v120;
  sub_10000928C((uint64_t)v23, v120, &qword_100099AD0);
  v74 = (int *)sub_10000498C(&qword_100099B30);
  sub_10000928C((uint64_t)v20, v73 + v74[12], &qword_100099AD0);
  sub_10000928C((uint64_t)v12, v73 + v74[16], &qword_1000997D8);
  sub_10000928C(v40, v73 + v74[20], &qword_1000997D8);
  sub_1000092D0(v40, &qword_1000997D8);
  sub_1000092D0((uint64_t)v12, &qword_1000997D8);
  sub_1000092D0((uint64_t)v20, &qword_100099AD0);
  sub_1000092D0((uint64_t)v23, &qword_100099AD0);
  v75 = v131;
  sub_10000928C(v73, v131, &qword_100099AE0);
  swift_storeEnumTagMultiPayload(v75, v130, 1);
  v76 = sub_10000966C(&qword_100099B38, &qword_100099AF0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v77 = sub_10000966C(&qword_100099B40, &qword_100099AE0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v78 = (uint64_t)v121;
  _ConditionalContent<>.init(storage:)(v75, v122, v123, v76, v77);
  sub_1000092D0(v73, &qword_100099AE0);
  v79 = v124;
  sub_10000928C(v78, v124, &qword_100099AF8);
  swift_storeEnumTagMultiPayload(v79, v125, 1);
  v80 = sub_10004FD24();
  v81 = sub_10004FE04();
  _ConditionalContent<>.init(storage:)(v79, v127, v128, v80, v81);
  sub_1000092D0(v78, &qword_100099AF8);
  sub_1000092D0(v133, &qword_1000997D8);
  v82 = v132;
LABEL_7:
  sub_1000092D0(v82, &qword_1000997D8);
  sub_1000092D0(v134, &qword_100099AD0);
  v83 = (uint64_t)v119;
  return sub_1000092D0(v83, &qword_100099AD0);
}

uint64_t sub_100038580@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;

  v33 = a1;
  v1 = sub_10000498C(&qword_1000997D8);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v2);
  v7 = (char *)&v30 - v6;
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v30 - v9;
  __chkstk_darwin(v8);
  v12 = (char *)&v30 - v11;
  v13 = sub_10000498C(&qword_100099AD0);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v30 - v18;
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v30 - v21;
  __chkstk_darwin(v20);
  v24 = (char *)&v30 - v23;
  sub_100036740(1, (uint64_t)&v30 - v23);
  sub_100036B90(1, (uint64_t)v22);
  sub_100036FC0(1, (uint64_t)v12);
  v31 = v10;
  sub_10003748C(1, (uint64_t)v10);
  v25 = (uint64_t)v19;
  v32 = v19;
  sub_10000928C((uint64_t)v24, (uint64_t)v19, &qword_100099AD0);
  sub_10000928C((uint64_t)v22, (uint64_t)v16, &qword_100099AD0);
  sub_10000928C((uint64_t)v12, (uint64_t)v7, &qword_1000997D8);
  v26 = (uint64_t)v4;
  sub_10000928C((uint64_t)v10, (uint64_t)v4, &qword_1000997D8);
  v27 = v33;
  sub_10000928C(v25, v33, &qword_100099AD0);
  v28 = (int *)sub_10000498C(&qword_100099B30);
  sub_10000928C((uint64_t)v16, v27 + v28[12], &qword_100099AD0);
  sub_10000928C((uint64_t)v7, v27 + v28[16], &qword_1000997D8);
  sub_10000928C(v26, v27 + v28[20], &qword_1000997D8);
  sub_1000092D0((uint64_t)v31, &qword_1000997D8);
  sub_1000092D0((uint64_t)v12, &qword_1000997D8);
  sub_1000092D0((uint64_t)v22, &qword_100099AD0);
  sub_1000092D0((uint64_t)v24, &qword_100099AD0);
  sub_1000092D0(v26, &qword_1000997D8);
  sub_1000092D0((uint64_t)v7, &qword_1000997D8);
  sub_1000092D0((uint64_t)v16, &qword_100099AD0);
  return sub_1000092D0((uint64_t)v32, &qword_100099AD0);
}

uint64_t sub_100038838@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  char v17;
  _QWORD v18[2];

  v2 = (int *)type metadata accessor for TFSymbol(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = static SymbolRenderingMode.monochrome.getter(v3);
  v7 = static Font.title3.getter(v6);
  *(_QWORD *)v5 = 0xD000000000000015;
  *((_QWORD *)v5 + 1) = 0x8000000100078080;
  *((_QWORD *)v5 + 2) = 0;
  *((_QWORD *)v5 + 3) = 0;
  v5[32] = 0;
  *((_QWORD *)v5 + 5) = v7;
  *((_QWORD *)v5 + 6) = 0;
  v5[v2[10]] = 1;
  v5[v2[11]] = 1;
  v8 = &v5[v2[12]];
  *(_QWORD *)v8 = swift_getKeyPath(&unk_100075348);
  v8[8] = 0;
  v9 = &v5[v2[13]];
  *(_QWORD *)v9 = swift_getKeyPath(&unk_100074C20);
  v9[8] = 0;
  sub_100008F30((uint64_t)v5, a1, type metadata accessor for TFSymbol);
  v10 = (int *)sub_10000498C(&qword_1000999A0);
  v11 = a1 + v10[9];
  v17 = 0;
  State.init(wrappedValue:)(v18, &v17, &type metadata for Bool);
  v12 = v18[1];
  *(_BYTE *)v11 = v18[0];
  *(_QWORD *)(v11 + 8) = v12;
  v13 = a1 + v10[10];
  *(_QWORD *)v13 = swift_getKeyPath(&unk_100074C50);
  *(_BYTE *)(v13 + 8) = 0;
  v14 = a1 + v10[11];
  result = swift_getKeyPath(&unk_100074BF8);
  *(_QWORD *)v14 = result;
  *(_BYTE *)(v14 + 8) = 0;
  return result;
}

uint64_t sub_1000389B8(uint64_t a1)
{
  __int128 *v1;
  _OWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  __int16 v19;
  __int128 v20;

  v2 = v1;
  type metadata accessor for MainActor(0);
  v20 = *v1;
  v18 = *((_QWORD *)v1 + 2);
  v19 = *((_WORD *)v1 + 12);
  v16 = *((_QWORD *)v1 + 4);
  v17 = *((_BYTE *)v1 + 40);
  v14 = *((_QWORD *)v1 + 6);
  v15 = *((_BYTE *)v1 + 56);
  sub_10004EF38(&v20);
  sub_10004EC80((uint64_t)&v18);
  sub_10004ECB0((uint64_t)&v16);
  sub_10004ECB0((uint64_t)&v14);
  v4 = swift_retain();
  v5 = static MainActor.shared.getter(v4);
  v6 = swift_allocObject(&unk_10008F7D8, 104, 7);
  *(_QWORD *)(v6 + 16) = v5;
  *(_QWORD *)(v6 + 24) = &protocol witness table for MainActor;
  v7 = v1[1];
  *(_OWORD *)(v6 + 32) = *v1;
  *(_OWORD *)(v6 + 48) = v7;
  *(_OWORD *)(v6 + 64) = v1[2];
  *(_OWORD *)(v6 + 73) = *(__int128 *)((char *)v1 + 41);
  *(_QWORD *)(v6 + 96) = a1;
  sub_10004EF38(&v20);
  sub_10004EC80((uint64_t)&v18);
  sub_10004ECB0((uint64_t)&v16);
  sub_10004ECB0((uint64_t)&v14);
  v8 = swift_retain();
  v9 = static MainActor.shared.getter(v8);
  v10 = swift_allocObject(&unk_10008F800, 104, 7);
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = &protocol witness table for MainActor;
  v11 = v2[1];
  *(_OWORD *)(v10 + 32) = *v2;
  *(_OWORD *)(v10 + 48) = v11;
  *(_OWORD *)(v10 + 64) = v2[2];
  *(_OWORD *)(v10 + 73) = *(_OWORD *)((char *)v2 + 41);
  *(_QWORD *)(v10 + 96) = a1;
  Binding.init(get:set:)(&v13, sub_10004FB7C, v6, sub_10004FBEC, v10, &type metadata for Bool);
  return v13;
}

uint64_t sub_100038B38@<X0>(uint64_t *a1@<X2>, uint64_t a2@<X3>, _BYTE *a3@<X8>)
{
  void (*v5)(_BYTE *, _QWORD);
  _BYTE *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[32];
  uint64_t v12;

  if (*a1)
  {
    v12 = *a1;
    swift_retain();
    v5 = (void (*)(_BYTE *, _QWORD))swift_readAtKeyPath(v11, &v12, a2);
    *a3 = *v6;
    v5(v11, 0);
    return swift_release();
  }
  else
  {
    v8 = a1[1];
    v9 = type metadata accessor for TextFormattingState(0);
    v10 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    result = EnvironmentObject.error()(0, v8, v9, v10);
    __break(1u);
  }
  return result;
}

uint64_t sub_100038BE0(char *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  char v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  if (*a4)
  {
    v6 = *a1;
    v12 = *a4;
    v11 = v6;
    swift_retain();
    swift_setAtReferenceWritableKeyPath(&v12, a5, &v11);
    return swift_release();
  }
  else
  {
    v8 = a4[1];
    v9 = type metadata accessor for TextFormattingState(0);
    v10 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    result = EnvironmentObject.error()(0, v8, v9, v10);
    __break(1u);
  }
  return result;
}

uint64_t sub_100038C7C@<X0>(uint64_t a1@<X8>)
{
  return sub_100035754(a1);
}

uint64_t sub_100038CBC()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;

  v1 = v0;
  v2 = (int *)sub_10000498C(&qword_100099B78);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = &v5[*(int *)(v3 + 40)];
  v7 = type metadata accessor for HoverEffect(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  *(_QWORD *)v5 = 0;
  *((_WORD *)v5 + 4) = 257;
  sub_100038ED4(v1, (uint64_t)&v5[v2[11]]);
  v8 = &v5[v2[12]];
  *(_QWORD *)v8 = swift_getKeyPath(&unk_100074C50);
  v8[8] = 0;
  v9 = &v5[v2[13]];
  *(_QWORD *)v9 = swift_getKeyPath(&unk_100074BF8);
  v9[8] = 0;
  v10 = &v5[v2[14]];
  *(_QWORD *)v10 = swift_getKeyPath(&unk_1000752D8);
  v10[8] = 0;
  v11 = &v5[v2[15]];
  v25 = 0;
  State.init(wrappedValue:)(&v26, &v25, &type metadata for Bool);
  v12 = v27;
  *v11 = v26;
  *((_QWORD *)v11 + 1) = v12;
  if (qword_1000980E8 != -1)
    swift_once(&qword_1000980E8, sub_100022A00);
  v13 = *(_QWORD *)algn_10009B3C8;
  v26 = qword_10009B3C0;
  v27 = *(_QWORD *)algn_10009B3C8;
  v14 = sub_100008EDC();
  swift_bridgeObjectRetain(v13);
  v15 = Text.init<A>(_:)(&v26, &type metadata for String, v14);
  v17 = v16;
  v19 = v18;
  v21 = v20 & 1;
  v22 = sub_10000966C(&qword_100099B80, &qword_100099B78, (uint64_t)&unk_100075FB0);
  View.accessibilityLabel(_:)(v15, v17, v21, v19, v2, v22);
  sub_100008F20(v15, v17, v21);
  swift_bridgeObjectRelease(v19);
  return sub_1000092D0((uint64_t)v5, &qword_100099B78);
}

uint64_t sub_100038ED4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  _OWORD *v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t KeyPath;
  char *v32;
  uint64_t (**v33)();
  char *v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t OpaqueTypeConformance2;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[4];
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  __int128 v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  __int16 v80;
  __int128 v81;

  v71 = a2;
  v69 = sub_10000498C(&qword_100099B88);
  v64 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69);
  v4 = (char *)&v64 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = sub_10000498C(&qword_100099B90);
  v66 = *(char **)(v70 - 8);
  v5 = __chkstk_darwin(v70);
  v7 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v65 = (char *)&v64 - v8;
  v67 = sub_10000498C(&qword_100099B98);
  __chkstk_darwin(v67);
  v68 = (uint64_t)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10000498C(&qword_100099BA0);
  __chkstk_darwin(v10);
  v12 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10000498C(&qword_100099BA8);
  __chkstk_darwin(v13);
  v15 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10000498C(&qword_100099BB0);
  __chkstk_darwin(v16);
  v18 = (char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (int *)sub_10000498C(&qword_100099BB8);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v64 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v24 = (char *)&v64 - v23;
  v81 = *(_OWORD *)a1;
  v25 = sub_10004E360(v81, *((uint64_t *)&v81 + 1));
  if ((v25 & 1) != 0)
  {
    v79 = *(_QWORD *)(a1 + 16);
    v80 = *(_WORD *)(a1 + 24);
    v77 = *(_QWORD *)(a1 + 32);
    v78 = *(_BYTE *)(a1 + 40);
    v26 = (_OWORD *)swift_allocObject(&unk_10008F878, 57, 7);
    v27 = *(_OWORD *)(a1 + 16);
    v26[1] = *(_OWORD *)a1;
    v26[2] = v27;
    *(_OWORD *)((char *)v26 + 41) = *(_OWORD *)(a1 + 25);
    *(_WORD *)v22 = 0;
    v22[2] = 1;
    v66 = &v22[v19[11]];
    sub_10004EF38(&v81);
    sub_10004EC80((uint64_t)&v79);
    sub_10004ECB0((uint64_t)&v77);
    v28 = sub_10003A700(a1, (uint64_t)v12);
    v29 = static Alignment.leading.getter(v28);
    sub_1000312E8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v15, 0.0, 1, 0.0, 1, v29, v30, (uint64_t)&qword_100099BA0, (void (*)(uint64_t, uint64_t, uint64_t))sub_10000928C, &qword_100099BA8);
    sub_1000092D0((uint64_t)v12, &qword_100099BA0);
    KeyPath = swift_getKeyPath(&unk_100075610);
    sub_10000928C((uint64_t)v15, (uint64_t)v18, &qword_100099BA8);
    v32 = &v18[*(int *)(v16 + 36)];
    *(_QWORD *)v32 = KeyPath;
    *((_QWORD *)v32 + 1) = 1;
    v32[16] = 0;
    sub_1000092D0((uint64_t)v15, &qword_100099BA8);
    sub_10000930C((uint64_t)v18, (uint64_t)v66, &qword_100099BB0);
    v33 = (uint64_t (**)())&v22[v19[12]];
    *v33 = sub_10005279C;
    v33[1] = (uint64_t (*)())v26;
    v34 = &v22[v19[13]];
    v72 = 0;
    v73 = 1;
    v35 = sub_10000498C(&qword_100099430);
    State.init(wrappedValue:)(&v74, &v72, v35);
    v36 = BYTE8(v74);
    v37 = v75;
    *(_QWORD *)v34 = v74;
    v34[8] = v36;
    *((_QWORD *)v34 + 2) = v37;
    v38 = v19[14];
    v72 = 0;
    v39 = sub_10000498C(&qword_100099838);
    State.init(wrappedValue:)(&v74, &v72, v39);
    *(_OWORD *)&v22[v38] = v74;
    v40 = &v22[v19[15]];
    *(_QWORD *)v40 = swift_getKeyPath(&unk_100074BF8);
    v40[8] = 0;
    sub_10000930C((uint64_t)v22, (uint64_t)v24, &qword_100099BB8);
    v41 = v68;
    sub_10000928C((uint64_t)v24, v68, &qword_100099BB8);
    swift_storeEnumTagMultiPayload(v41, v67, 0);
    v42 = sub_10000966C(&qword_100099BE8, &qword_100099BB8, (uint64_t)&unk_100075F60);
    v43 = sub_10000966C(&qword_100099BE0, &qword_100099B88, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
    v44 = sub_10004EC30();
    *(_QWORD *)&v74 = v69;
    *((_QWORD *)&v74 + 1) = &type metadata for TFMenuStyle;
    v75 = v43;
    v76 = v44;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v74, &opaque type descriptor for <<opaque return type of View.menuStyle<A>(_:)>>, 1);
    _ConditionalContent<>.init(storage:)(v41, v19, v70, v42, OpaqueTypeConformance2);
    return sub_1000092D0((uint64_t)v24, &qword_100099BB8);
  }
  else
  {
    v47 = __chkstk_darwin(v25);
    __chkstk_darwin(v47);
    v63[2] = a1;
    v48 = sub_10000498C(&qword_100099BC0);
    v49 = sub_10000498C(&qword_100099BC8);
    v50 = sub_10000966C(&qword_100099BD0, &qword_100099BC0, (uint64_t)&unk_100075E88);
    v51 = sub_10000966C(&qword_100099BD8, &qword_100099BC8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    Menu.init(content:label:)(sub_10004FEB0, v63, sub_10004FEB8, v63, v48, v49, v50, v51);
    LOBYTE(v79) = 0;
    State.init(wrappedValue:)(&v74, &v79, &type metadata for Bool);
    v52 = v74;
    v53 = *((_QWORD *)&v74 + 1);
    LOBYTE(v74) = 0;
    BYTE8(v74) = v52;
    v75 = v53;
    v54 = sub_10000966C(&qword_100099BE0, &qword_100099B88, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
    v55 = sub_10004EC30();
    v56 = v69;
    View.menuStyle<A>(_:)(&v74, v69, &type metadata for TFMenuStyle, v54, v55);
    swift_release();
    (*(void (**)(char *, uint64_t))(v64 + 8))(v4, v56);
    v57 = v65;
    v58 = (uint64_t)v66;
    v59 = v70;
    (*((void (**)(char *, char *, uint64_t))v66 + 4))(v65, v7, v70);
    v60 = v68;
    (*(void (**)(uint64_t, char *, uint64_t))(v58 + 16))(v68, v57, v59);
    swift_storeEnumTagMultiPayload(v60, v67, 1);
    v61 = sub_10000966C(&qword_100099BE8, &qword_100099BB8, (uint64_t)&unk_100075F60);
    *(_QWORD *)&v74 = v56;
    *((_QWORD *)&v74 + 1) = &type metadata for TFMenuStyle;
    v75 = v54;
    v76 = v55;
    v62 = swift_getOpaqueTypeConformance2(&v74, &opaque type descriptor for <<opaque return type of View.menuStyle<A>(_:)>>, 1);
    _ConditionalContent<>.init(storage:)(v60, v19, v59, v61, v62);
    return (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v57, v59);
  }
}

uint64_t sub_1000395F4@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)();
  _OWORD *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  char *v55;
  uint64_t v56;
  void (*v57)(char *, char *, uint64_t);
  char *v58;
  uint64_t v59;
  char *v60;
  int *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  id v97;
  uint64_t v98;
  void (*v99)(char *, uint64_t);
  uint64_t v100;
  void (*v101)(char *, uint64_t);
  uint64_t v102;
  uint64_t result;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  _OWORD *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t (*v121)();
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _OWORD *v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  char v139;
  char v140;
  uint64_t v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char v147;
  uint64_t v148;
  __int16 v149;

  v113 = a2;
  v129 = type metadata accessor for Divider(0);
  v126 = *(_QWORD *)(v129 - 8);
  v3 = __chkstk_darwin(v129);
  v128 = (char *)&v107 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v131 = (char *)&v107 - v5;
  v130 = sub_10000498C(&qword_100099C40);
  v118 = *(_QWORD *)(v130 - 8);
  v6 = __chkstk_darwin(v130);
  v127 = (char *)&v107 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v107 - v9;
  __chkstk_darwin(v8);
  v117 = (char *)&v107 - v11;
  if (*(_QWORD *)a1)
  {
    KeyPath = swift_getKeyPath(&unk_100075640);
    swift_getKeyPath(&unk_100075668);
    v13 = swift_retain();
    static Published.subscript.getter(&v143, v13, KeyPath);
    swift_release();
    swift_release();
    swift_release();
    v14 = swift_getKeyPath(&unk_100075698);
    v148 = *(_QWORD *)(a1 + 16);
    v149 = *(_WORD *)(a1 + 24);
    v146 = *(_QWORD *)(a1 + 32);
    v147 = *(_BYTE *)(a1 + 40);
    v15 = (_OWORD *)swift_allocObject(&unk_10008F8A0, 57, 7);
    v16 = *(_OWORD *)(a1 + 16);
    v15[1] = *(_OWORD *)a1;
    v15[2] = v16;
    *(_OWORD *)((char *)v15 + 41) = *(_OWORD *)(a1 + 25);
    swift_retain();
    sub_10004ECB0((uint64_t)&v146);
    sub_10004EC80((uint64_t)&v148);
    v17 = sub_10000498C(&qword_100098398);
    v18 = type metadata accessor for TFToggle(0);
    v19 = sub_10000966C(&qword_1000986C0, &qword_100098398, (uint64_t)&protocol conformance descriptor for [A]);
    v20 = sub_100050168();
    v21 = sub_100007D90(&qword_100099818, type metadata accessor for TFToggle, (uint64_t)&unk_100075F10);
    ForEach<>.init(_:id:content:)(&v143, v14, sub_100050160, v15, v17, v18, v19, v20, v21);
    v22 = v118;
    v23 = v117;
    v24 = (*(uint64_t (**)(char *, char *, uint64_t))(v118 + 32))(v117, v10, v130);
    Divider.init()(v24);
    v25 = swift_getKeyPath(&unk_1000756C0);
    swift_getKeyPath(&unk_1000756E8);
    v26 = swift_retain();
    static Published.subscript.getter(&v143, v26, v25);
    swift_release();
    swift_release();
    swift_release();
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v136 = 0;
    v137 = 0;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v134 = 0;
    v135 = 0;
    v132 = 0;
    v133 = 0;
    v33 = 0;
    if ((v143 & 1) != 0)
    {
      v32 = (_OWORD *)swift_allocObject(&unk_10008F8F0, 57, 7);
      v34 = *(_OWORD *)(a1 + 16);
      v32[1] = *(_OWORD *)a1;
      v32[2] = v34;
      *(_OWORD *)((char *)v32 + 41) = *(_OWORD *)(a1 + 25);
      swift_retain();
      sub_10004ECB0((uint64_t)&v146);
      sub_10004EC80((uint64_t)&v148);
      if (qword_100098178 != -1)
        swift_once(&qword_100098178, sub_100023CD8);
      v35 = *(_QWORD *)algn_10009B4E8;
      v143 = qword_10009B4E0;
      v144 = *(_QWORD *)algn_10009B4E8;
      v36 = sub_100008EDC();
      swift_bridgeObjectRetain(v35);
      v28 = Text.init<A>(_:)(&v143, &type metadata for String, v36);
      v29 = v37;
      v30 = v38;
      v137 = v39 & 1;
      v141 = 0;
      v142 = 1;
      v40 = sub_10000498C(&qword_100099430);
      State.init(wrappedValue:)(&v143, &v141, v40);
      v135 = v144;
      v136 = v143;
      v134 = v145;
      v141 = 0;
      v41 = sub_10000498C(&qword_100099838);
      State.init(wrappedValue:)(&v143, &v141, v41);
      v132 = v144;
      v133 = (void *)v143;
      v33 = swift_getKeyPath(&unk_100074BF8);
      v31 = sub_100050348;
      v27 = 0x10000;
    }
    v119 = v33;
    v120 = v27;
    v121 = v31;
    v122 = v30;
    v123 = v29;
    v124 = v28;
    v125 = v32;
    v42 = (_OWORD *)swift_allocObject(&unk_10008F8C8, 57, 7);
    v43 = *(_OWORD *)(a1 + 16);
    v42[1] = *(_OWORD *)a1;
    v42[2] = v43;
    v44 = *(_OWORD *)(a1 + 25);
    v112 = v42;
    *(_OWORD *)((char *)v42 + 41) = v44;
    swift_retain();
    sub_10004ECB0((uint64_t)&v146);
    sub_10004EC80((uint64_t)&v148);
    if (qword_100098170 != -1)
      swift_once(&qword_100098170, sub_100023BC8);
    v45 = *(_QWORD *)algn_10009B4D8;
    v143 = qword_10009B4D0;
    v144 = *(_QWORD *)algn_10009B4D8;
    v46 = sub_100008EDC();
    swift_bridgeObjectRetain(v45);
    v47 = Text.init<A>(_:)(&v143, &type metadata for String, v46);
    v115 = v48;
    LOBYTE(v46) = v49;
    v116 = v50;
    v141 = 0;
    v142 = 1;
    v51 = sub_10000498C(&qword_100099430);
    State.init(wrappedValue:)(&v143, &v141, v51);
    v111 = v143;
    v52 = v144;
    v110 = v145;
    v141 = 0;
    v53 = sub_10000498C(&qword_100099838);
    State.init(wrappedValue:)(&v143, &v141, v53);
    v109 = (void *)v143;
    v114 = v144;
    v108 = swift_getKeyPath(&unk_100074BF8);
    v54 = *(void (**)(char *, char *, uint64_t))(v22 + 16);
    v55 = v127;
    v56 = v130;
    v54(v127, v23, v130);
    v57 = *(void (**)(char *, char *, uint64_t))(v126 + 16);
    v58 = v128;
    v59 = v129;
    v57(v128, v131, v129);
    LOBYTE(v143) = 0;
    LOBYTE(v141) = 1;
    v140 = v46 & 1;
    v139 = v52;
    v138 = 0;
    v60 = v113;
    v54(v113, v55, v56);
    v61 = (int *)sub_10000498C(&qword_100099C50);
    v57(&v60[v61[12]], v58, v59);
    v62 = &v60[v61[16]];
    v63 = v120;
    *(_QWORD *)v62 = v120;
    v64 = v63;
    v65 = v124;
    *((_QWORD *)v62 + 1) = v124;
    v66 = v65;
    v67 = v123;
    *((_QWORD *)v62 + 2) = v123;
    v68 = v67;
    v69 = v137;
    *((_QWORD *)v62 + 3) = v137;
    v70 = v69;
    v137 = v69;
    v71 = v122;
    *((_QWORD *)v62 + 4) = v122;
    v72 = v71;
    v73 = (uint64_t)v121;
    *((_QWORD *)v62 + 5) = v121;
    v74 = v73;
    v75 = (uint64_t)v125;
    *((_QWORD *)v62 + 6) = v125;
    v76 = v75;
    v77 = v136;
    *((_QWORD *)v62 + 7) = v136;
    v78 = v77;
    v136 = v77;
    v79 = v135;
    *((_QWORD *)v62 + 8) = v135;
    v80 = v79;
    v135 = v79;
    v81 = v134;
    *((_QWORD *)v62 + 9) = v134;
    v82 = v81;
    v134 = v81;
    v83 = v133;
    *((_QWORD *)v62 + 10) = v133;
    v84 = v83;
    v133 = v83;
    v85 = v132;
    *((_QWORD *)v62 + 11) = v132;
    v86 = v85;
    v132 = v85;
    v87 = v119;
    *((_QWORD *)v62 + 12) = v119;
    v88 = v87;
    v62[104] = 0;
    v89 = &v60[v61[20]];
    LOBYTE(v87) = v143;
    v90 = v141;
    LOBYTE(v60) = v140;
    v91 = v139;
    LOBYTE(v61) = v138;
    *v89 = 0;
    v89[1] = v87;
    v89[2] = v90;
    v92 = v115;
    *((_QWORD *)v89 + 1) = v47;
    *((_QWORD *)v89 + 2) = v92;
    v89[24] = (char)v60;
    v93 = v116;
    *((_QWORD *)v89 + 4) = v116;
    *((_QWORD *)v89 + 5) = sub_1000501CC;
    v94 = v111;
    *((_QWORD *)v89 + 6) = v112;
    *((_QWORD *)v89 + 7) = v94;
    v89[64] = v91;
    v95 = v109;
    *((_QWORD *)v89 + 9) = v110;
    *((_QWORD *)v89 + 10) = v95;
    v96 = v108;
    *((_QWORD *)v89 + 11) = v114;
    *((_QWORD *)v89 + 12) = v96;
    v89[104] = (char)v61;
    sub_1000501EC(v64, v66, v68, v70, v72, v74, v76, v78, v80, v82, v84, v86, v88, 0);
    sub_10000A91C(v47, v92, (char)v60);
    swift_retain();
    swift_bridgeObjectRetain(v93);
    swift_retain();
    swift_retain();
    v97 = v95;
    v98 = v96;
    sub_10001D97C(v96, (char)v61);
    v99 = *(void (**)(char *, uint64_t))(v126 + 8);
    v100 = v129;
    v99(v131, v129);
    v101 = *(void (**)(char *, uint64_t))(v118 + 8);
    v102 = v130;
    v101(v117, v130);
    LOBYTE(v61) = v138;
    sub_100008F20(v47, v115, v140);
    swift_release();

    swift_release();
    swift_release();
    swift_bridgeObjectRelease(v116);
    sub_10001D9D8(v98, (char)v61);
    sub_100050278(v120, v124, v123, v137, v122, (uint64_t)v121, (uint64_t)v125, v136, v135, v134, v133, v132, v119, 0);
    v99(v128, v100);
    return ((uint64_t (*)(char *, uint64_t))v101)(v127, v102);
  }
  else
  {
    v104 = *(_QWORD *)(a1 + 8);
    v105 = type metadata accessor for TextFormattingState(0);
    v106 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    result = EnvironmentObject.error()(0, v104, v105, v106);
    __break(1u);
  }
  return result;
}

uint64_t sub_100039FC0@<X0>(void **a1@<X0>, __int128 *a2@<X1>, _OWORD *a3@<X8>)
{
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t *v22;
  char *v23;
  char *v24;
  uint64_t result;
  _QWORD v26[2];
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  __int16 v31;
  __int128 v32;

  v5 = *a1;
  v32 = *a2;
  v30 = *((_QWORD *)a2 + 2);
  v31 = *((_WORD *)a2 + 12);
  v28 = *((_QWORD *)a2 + 4);
  v29 = *((_BYTE *)a2 + 40);
  type metadata accessor for MainActor(0);
  sub_10004EF38(&v32);
  sub_10004EC80((uint64_t)&v30);
  sub_10004ECB0((uint64_t)&v28);
  v6 = v5;
  v7 = static MainActor.shared.getter(v6);
  v8 = swift_allocObject(&unk_10008F918, 88, 7);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = &protocol witness table for MainActor;
  v9 = a2[1];
  *(_OWORD *)(v8 + 32) = *a2;
  *(_OWORD *)(v8 + 48) = v9;
  *(_OWORD *)(v8 + 57) = *(__int128 *)((char *)a2 + 25);
  *(_QWORD *)(v8 + 80) = v6;
  sub_10004EF38(&v32);
  sub_10004EC80((uint64_t)&v30);
  sub_10004ECB0((uint64_t)&v28);
  v10 = v6;
  v11 = static MainActor.shared.getter(v10);
  v12 = swift_allocObject(&unk_10008F940, 88, 7);
  *(_QWORD *)(v12 + 16) = v11;
  *(_QWORD *)(v12 + 24) = &protocol witness table for MainActor;
  v13 = a2[1];
  *(_OWORD *)(v12 + 32) = *a2;
  *(_OWORD *)(v12 + 48) = v13;
  *(_OWORD *)(v12 + 57) = *(__int128 *)((char *)a2 + 25);
  *(_QWORD *)(v12 + 80) = v10;
  Binding.init(get:set:)(v26, sub_10005036C, v8, sub_1000503D0, v12, &type metadata for Bool);
  v14 = v26[0];
  v15 = v26[1];
  v16 = v27;
  v17 = objc_msgSend(v10, "localizedFullName");
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v20 = v19;

  v21 = (int *)type metadata accessor for TFToggle(0);
  static SymbolRenderingMode.hierarchical.getter();
  *a3 = 0u;
  a3[1] = 0u;
  v22 = (uint64_t *)((char *)a3 + v21[7]);
  *v22 = v18;
  v22[1] = v20;
  *((_BYTE *)a3 + v21[8]) = 1;
  v23 = (char *)a3 + v21[9];
  *(_QWORD *)v23 = v14;
  *((_QWORD *)v23 + 1) = v15;
  v23[16] = v16;
  v24 = (char *)a3 + v21[10];
  result = swift_getKeyPath(&unk_100074BF8);
  *(_QWORD *)v24 = result;
  v24[8] = 0;
  return result;
}

void sub_10003A1AC(_QWORD *a1@<X2>, void *a2@<X3>, _BYTE *a3@<X8>)
{
  _QWORD *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*a1)
  {
    swift_retain();
    v5 = sub_1000256CC();
    swift_release();
    v6 = a2;
    LOBYTE(a2) = sub_10004B90C((unint64_t)v5, v6, (SEL *)&selRef_familyName);
    swift_bridgeObjectRelease(v5);

    *a3 = a2 & 1;
  }
  else
  {
    v7 = a1[1];
    v8 = type metadata accessor for TextFormattingState(0);
    v9 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    EnvironmentObject.error()(0, v7, v8, v9);
    __break(1u);
  }
}

void sub_10003A278(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, void *a5)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  _UNKNOWN **v9;
  id v10;
  id v11;
  void *v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;

  if (!*a4)
    goto LABEL_15;
  swift_retain();
  v6 = objc_msgSend(a5, "fontDescriptor");
  swift_retain();
  v7 = (uint64_t)sub_1000256CC();
  v8 = v7;
  if ((unint64_t)v7 >> 62)
  {
    if (v7 >= 0)
      v7 &= 0xFFFFFFFFFFFFFF8uLL;
    v9 = &_s7SwiftUI7CapsuleVAA5ShapeAAMc_ptr;
    if (_CocoaArrayWrapper.endIndex.getter(v7))
      goto LABEL_4;
LABEL_11:
    swift_bridgeObjectRelease(v8);
    v12 = (void *)objc_opt_self(v9[277]);
    objc_msgSend(v12, "systemFontSize");
    v11 = objc_msgSend(v12, "systemFontOfSize:");
    swift_release();
    goto LABEL_12;
  }
  v9 = &_s7SwiftUI7CapsuleVAA5ShapeAAMc_ptr;
  if (!*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_11;
LABEL_4:
  if ((v8 & 0xC000000000000001) != 0)
  {
    v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v8);
    goto LABEL_7;
  }
  if (*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v10 = *(id *)(v8 + 32);
LABEL_7:
    v11 = v10;
    swift_release();
    swift_bridgeObjectRelease(v8);
LABEL_12:
    objc_msgSend(v11, "pointSize");
    v14 = v13;

    v18 = objc_msgSend((id)objc_opt_self(v9[277]), "fontWithDescriptor:size:", v6, v14);
    sub_100030614(v18);
    swift_release();

    return;
  }
  __break(1u);
LABEL_15:
  v15 = a4[1];
  v16 = type metadata accessor for TextFormattingState(0);
  v17 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
  EnvironmentObject.error()(0, v15, v16, v17);
  __break(1u);
}

uint64_t sub_10003A448(_QWORD *a1, _QWORD *a2)
{
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*a1)
  {
    v2 = *(void (**)(uint64_t))(*a1 + *a2);
    v3 = swift_retain();
    v2(v3);
    return swift_release();
  }
  else
  {
    v5 = a1[1];
    v6 = type metadata accessor for TextFormattingState(0);
    v7 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    result = EnvironmentObject.error()(0, v5, v6, v7);
    __break(1u);
  }
  return result;
}

uint64_t sub_10003A4C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t KeyPath;
  _BYTE *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  _BYTE v24[15];
  char v25;
  _QWORD v26[2];

  v4 = sub_10000498C(&qword_100099BA0);
  __chkstk_darwin(v4);
  v6 = &v24[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_10000498C(&qword_100099BA8);
  __chkstk_darwin(v7);
  v9 = &v24[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = sub_10000498C(&qword_100099BB0);
  __chkstk_darwin(v10);
  v12 = &v24[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = sub_10003A700(a1, (uint64_t)v6);
  v14 = static Alignment.leading.getter(v13);
  sub_1000312E8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v9, 0.0, 1, 0.0, 1, v14, v15, (uint64_t)&qword_100099BA0, (void (*)(uint64_t, uint64_t, uint64_t))sub_10000928C, &qword_100099BA8);
  sub_1000092D0((uint64_t)v6, &qword_100099BA0);
  KeyPath = swift_getKeyPath(&unk_100075610);
  sub_10000928C((uint64_t)v9, (uint64_t)v12, &qword_100099BA8);
  v17 = &v12[*(int *)(v10 + 36)];
  *(_QWORD *)v17 = KeyPath;
  *((_QWORD *)v17 + 1) = 1;
  v17[16] = 0;
  sub_1000092D0((uint64_t)v9, &qword_100099BA8);
  sub_10000930C((uint64_t)v12, a2, &qword_100099BB0);
  v18 = (int *)sub_10000498C(&qword_100099BC0);
  v19 = a2 + v18[9];
  v25 = 0;
  State.init(wrappedValue:)(v26, &v25, &type metadata for Bool);
  v20 = v26[1];
  *(_BYTE *)v19 = v26[0];
  *(_QWORD *)(v19 + 8) = v20;
  v21 = a2 + v18[10];
  *(_QWORD *)v21 = swift_getKeyPath(&unk_100074C50);
  *(_BYTE *)(v21 + 8) = 0;
  v22 = a2 + v18[11];
  result = swift_getKeyPath(&unk_100074BF8);
  *(_QWORD *)v22 = result;
  *(_BYTE *)(v22 + 8) = 0;
  return result;
}

uint64_t sub_10003A700@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t result;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  id v46;
  uint64_t v47;
  void *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  char v66;
  double v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE v75[4];
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;

  v83 = sub_10000498C(&qword_100099BF0);
  __chkstk_darwin(v83);
  v5 = (uint64_t *)&v75[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v84 = type metadata accessor for TFSymbol(0);
  v6 = __chkstk_darwin(v84);
  v8 = &v75[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  v10 = &v75[-v9];
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(unsigned __int8 *)(a1 + 24);
  v13 = *(unsigned __int8 *)(a1 + 25);
  sub_10001D970(v11, v12, *(_BYTE *)(a1 + 25));
  v14 = sub_1000119BC(v11, v12 | (v13 << 8));
  v16 = v15;
  v17 = sub_10001D9CC(v11, v12, v13);
  if ((v16 & 1) == 0 && v14 == 1)
  {
    v18 = static Font.title3.getter(v17);
    v19 = (int *)v84;
    static SymbolRenderingMode.hierarchical.getter();
    *(_OWORD *)v8 = xmmword_100074AB0;
    *((_QWORD *)v8 + 2) = 0;
    *((_QWORD *)v8 + 3) = 0;
    v8[32] = 0;
    *((_QWORD *)v8 + 5) = v18;
    *((_QWORD *)v8 + 6) = 0;
    v8[v19[10]] = 1;
    v8[v19[11]] = 1;
    v20 = (uint64_t)v5;
    v21 = &v8[v19[12]];
    *(_QWORD *)v21 = swift_getKeyPath(&unk_100075348);
    v21[8] = 0;
    v22 = &v8[v19[13]];
    *(_QWORD *)v22 = swift_getKeyPath(&unk_100074C20);
    v22[8] = 0;
    sub_100008F30((uint64_t)v8, (uint64_t)v10, type metadata accessor for TFSymbol);
    sub_10000920C((uint64_t)v10, v20, type metadata accessor for TFSymbol);
    swift_storeEnumTagMultiPayload(v20, v83, 0);
    v23 = sub_10000498C(&qword_100099BF8);
    v24 = sub_100007D90(&qword_100099C00, type metadata accessor for TFSymbol, (uint64_t)&unk_100075D10);
    v25 = sub_10004FF70();
    _ConditionalContent<>.init(storage:)(v20, v19, v23, v24, v25);
    return sub_100009250((uint64_t)v10, type metadata accessor for TFSymbol);
  }
  if (!*(_QWORD *)a1)
    goto LABEL_24;
  swift_retain();
  v27 = sub_100028144();
  swift_release();
  v28 = v27[2];
  swift_bridgeObjectRelease(v27);
  swift_retain();
  v29 = (uint64_t)sub_1000256CC();
  v30 = v29;
  v82 = v28;
  if (!((unint64_t)v29 >> 62))
  {
    if (*(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_7;
LABEL_14:
    swift_bridgeObjectRelease(v30);
    v33 = (void *)objc_opt_self(UIFont);
    objc_msgSend(v33, "systemFontSize");
    v32 = objc_msgSend(v33, "systemFontOfSize:");
    swift_release();
    goto LABEL_15;
  }
  if (v29 >= 0)
    v29 &= 0xFFFFFFFFFFFFFF8uLL;
  if (!_CocoaArrayWrapper.endIndex.getter(v29))
    goto LABEL_14;
LABEL_7:
  if ((v30 & 0xC000000000000001) != 0)
  {
    v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v30);
    goto LABEL_10;
  }
  if (!*(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
LABEL_24:
    v72 = *(_QWORD *)(a1 + 8);
    v73 = type metadata accessor for TextFormattingState(0);
    v74 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    result = EnvironmentObject.error()(0, v72, v73, v74);
    __break(1u);
    return result;
  }
  v31 = *(id *)(v30 + 32);
LABEL_10:
  v32 = v31;
  swift_release();
  swift_bridgeObjectRelease(v30);
LABEL_15:
  v34 = sub_10006655C();
  v36 = v35;

  v85 = v34;
  v86 = v36;
  v37 = sub_100008EDC();
  v38 = Text.init<A>(_:)(&v85, &type metadata for String, v37);
  v40 = v39;
  v42 = v41;
  v44 = v43;
  v45 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v46 = objc_msgSend(v45, "userInterfaceIdiom");

  v80 = v5;
  v81 = a2;
  if (v46 == (id)6)
  {
    LODWORD(v85) = static HierarchicalShapeStyle.primary.getter(v47);
    v48 = &type metadata for HierarchicalShapeStyle;
    v49 = &protocol witness table for HierarchicalShapeStyle;
  }
  else
  {
    v85 = static Color.primary.getter(v47);
    v48 = &type metadata for Color;
    v49 = &protocol witness table for Color;
  }
  v85 = AnyShapeStyle.init<A>(_:)(&v85, v48, v49);
  v50 = v42 & 1;
  v51 = Text.foregroundStyle<A>(_:)(&v85, v38, v40, v50, v44, &type metadata for AnyShapeStyle, &protocol witness table for AnyShapeStyle);
  v77 = v52;
  v78 = v51;
  v53 = v52;
  v55 = v54;
  v79 = v54;
  v57 = v56 & 1;
  v76 = v56 & 1;
  sub_100008F20(v38, v40, v50);
  swift_release();
  swift_bridgeObjectRelease(v44);
  sub_10003AD1C(v82, v51, v53, v57, v55, (uint64_t)&v85);
  v59 = v85;
  v58 = v86;
  v61 = v87;
  v60 = v88;
  v62 = v89;
  v63 = v90;
  v64 = v91;
  v65 = *(_QWORD *)(a1 + 32);
  v66 = *(_BYTE *)(a1 + 40);
  sub_10001D97C(v65, v66);
  LOBYTE(v55) = sub_100011B90(v65, v66);
  sub_10001D9D8(v65, v66);
  v67 = 0.5;
  v68 = v80;
  *v80 = v59;
  v68[1] = v58;
  if ((v55 & 1) != 0)
    v67 = 1.0;
  v68[2] = v61;
  v68[3] = v60;
  v68[4] = v62;
  v68[5] = v63;
  *((_BYTE *)v68 + 48) = v64;
  *((double *)v68 + 7) = v67;
  swift_storeEnumTagMultiPayload(v68, v83, 1);
  sub_10004FF20(v59, v58, v61, v60, v62, v63, v64);
  sub_10004FF20(v59, v58, v61, v60, v62, v63, v64);
  v69 = sub_10000498C(&qword_100099BF8);
  v70 = sub_100007D90(&qword_100099C00, type metadata accessor for TFSymbol, (uint64_t)&unk_100075D10);
  v71 = sub_10004FF70();
  _ConditionalContent<>.init(storage:)(v68, v84, v69, v70, v71);
  sub_100008F20(v78, v77, v76);
  swift_bridgeObjectRelease(v79);
  sub_1000500CC(v59, v58, v61, v60, v62, v63, v64);
  return sub_1000500CC(v59, v58, v61, v60, v62, v63, v64);
}

double sub_10003AD1C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  double result;
  __int128 v49;
  __int128 v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)();
  uint64_t v58;
  char v59;
  _OWORD v60[3];
  char v61;

  v11 = a4 & 1;
  v12 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 < 2)
  {
    v53 = a2;
    v54 = a3;
    v55 = v11;
    v56 = a5;
    v57 = 0;
    v58 = 0;
    v59 = 1;
    sub_10000A91C(a2, a3, v11);
    swift_bridgeObjectRetain(a5);
  }
  else
  {
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(34, 2);
    v15._object = (void *)0x80000001000780A0;
    v15._countAndFlagsBits = 0xD000000000000021;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v15);
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(a2, a3, (_DWORD)v11 != 0, a5);
    v16._countAndFlagsBits = 32;
    v16._object = (void *)0xE100000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v16);
    *(_QWORD *)&v60[0] = a1 - 1;
    LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:specifier:)(v60, 1684827173, 0xE400000000000000, &type metadata for Int, &protocol witness table for Int);
    v17._countAndFlagsBits = 0;
    v17._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v17);
    v18 = LocalizedStringKey.init(stringInterpolation:)(v14);
    v20 = v19;
    v22 = v21;
    v24 = v23;
    if (qword_1000980D0 != -1)
      swift_once(&qword_1000980D0, sub_100022794);
    v25 = qword_10009B398;
    v26 = (id)qword_10009B398;
    v27 = Text.init(_:tableName:bundle:comment:)(v18, v20, v22 & 1, v24, 0, 0, v25, 0, 0, 256);
    v29 = v28;
    v31 = v30;
    v33 = v32;
    v34 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
    v35 = objc_msgSend(v34, "userInterfaceIdiom");

    if (v35 == (id)6)
    {
      LODWORD(v60[0]) = static HierarchicalShapeStyle.secondary.getter();
      v36 = &type metadata for HierarchicalShapeStyle;
      v37 = &protocol witness table for HierarchicalShapeStyle;
    }
    else
    {
      *(_QWORD *)&v60[0] = static Color.secondary.getter();
      v36 = &type metadata for Color;
      v37 = &protocol witness table for Color;
    }
    *(_QWORD *)&v60[0] = AnyShapeStyle.init<A>(_:)(v60, v36, v37);
    v38 = v31 & 1;
    v39 = Text.foregroundStyle<A>(_:)(v60, v27, v29, v38, v33, &type metadata for AnyShapeStyle, &protocol witness table for AnyShapeStyle);
    v41 = v40;
    v43 = v42;
    v45 = v44 & 1;
    sub_100008F20(v27, v29, v38);
    swift_release();
    swift_bridgeObjectRelease(v33);
    v53 = v39;
    v54 = v41;
    v55 = v45;
    v56 = v43;
    v57 = sub_10003B048;
    v58 = 0;
    v59 = 0;
  }
  v46 = sub_10000498C(&qword_100099C38);
  v47 = sub_100050068();
  _ConditionalContent<>.init(storage:)(&v53, v46, &type metadata for Text, v47, &protocol witness table for Text);
  result = *(double *)v60;
  v49 = v60[1];
  v50 = v60[2];
  v51 = v61;
  *(_OWORD *)a6 = v60[0];
  *(_OWORD *)(a6 + 16) = v49;
  *(_OWORD *)(a6 + 32) = v50;
  *(_BYTE *)(a6 + 48) = v51;
  return result;
}

uint64_t sub_10003B048()
{
  return Transaction.animation.setter(0);
}

uint64_t sub_10003B06C()
{
  return sub_100038CBC();
}

uint64_t sub_10003B0A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v59[2];
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE v71[2];

  v67 = a1;
  v2 = (int *)sub_10000498C(&qword_100099C58);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)v59 - v6;
  v64 = sub_10000498C(&qword_100099C60);
  __chkstk_darwin(v64);
  v66 = (uint64_t)v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10000498C(&qword_100099C68);
  v61 = *(_QWORD *)(v9 - 8);
  v62 = v9;
  __chkstk_darwin(v9);
  v60 = (char *)v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_10000498C(&qword_100099C70);
  v11 = __chkstk_darwin(v65);
  v13 = (char *)v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v63 = (uint64_t)v59 - v14;
  v15 = *(_QWORD *)(v1 + 24);
  v16 = *(unsigned __int8 *)(v1 + 32);
  v17 = *(unsigned __int8 *)(v1 + 33);
  sub_10001D970(v15, v16, *(_BYTE *)(v1 + 33));
  v18 = sub_1000119BC(v15, v16 | (v17 << 8));
  v20 = v19;
  sub_10001D9CC(v15, v16, v17);
  if ((v20 & 1) != 0)
    goto LABEL_5;
  v21 = 1;
  if ((*(_BYTE *)v1 & 1) != 0)
    v21 = 2;
  if (v21 < v18)
  {
LABEL_5:
    v22 = &v5[v2[10]];
    v23 = type metadata accessor for HoverEffect(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v22, 1, 1, v23);
    *(_QWORD *)v5 = 0;
    *((_WORD *)v5 + 4) = 257;
    sub_10003C544(v1, (uint64_t)&v5[v2[11]]);
    v24 = &v5[v2[12]];
    *(_QWORD *)v24 = swift_getKeyPath(&unk_100074C50);
    v24[8] = 0;
    v25 = &v5[v2[13]];
    *(_QWORD *)v25 = swift_getKeyPath(&unk_100074BF8);
    v25[8] = 0;
    v26 = &v5[v2[14]];
    *(_QWORD *)v26 = swift_getKeyPath(&unk_1000752D8);
    v26[8] = 0;
    v27 = &v5[v2[15]];
    v71[0] = 0;
    State.init(wrappedValue:)(&v68, v71, &type metadata for Bool);
    v28 = v69;
    *v27 = v68;
    *((_QWORD *)v27 + 1) = v28;
    v29 = &qword_100099C58;
    sub_10000930C((uint64_t)v5, (uint64_t)v7, &qword_100099C58);
    v30 = v66;
    sub_10000928C((uint64_t)v7, v66, &qword_100099C58);
    swift_storeEnumTagMultiPayload(v30, v64, 1);
    v31 = sub_10000966C(&qword_100099C78, &qword_100099C70, (uint64_t)&unk_100075FB0);
    v32 = sub_10000966C(&qword_100099C80, &qword_100099C58, (uint64_t)&unk_100075FB0);
    _ConditionalContent<>.init(storage:)(v30, v65, v2, v31, v32);
    v33 = (uint64_t)v7;
  }
  else
  {
    v34 = (int *)v65;
    v35 = &v13[*(int *)(v65 + 40)];
    v36 = type metadata accessor for HoverEffect(0);
    v37 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v35, 1, 1, v36);
    *(_QWORD *)v13 = 0;
    *((_WORD *)v13 + 4) = 257;
    v59[1] = &v13[v34[11]];
    v38 = __chkstk_darwin(v37);
    v59[-2] = v1;
    __chkstk_darwin(v38);
    v59[-2] = v1;
    v39 = sub_10000498C(&qword_100099C88);
    v40 = sub_10000498C(&qword_100099C90);
    v41 = sub_1000503F0();
    v42 = sub_10000966C(&qword_100099CE8, &qword_100099C90, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v43 = v60;
    Menu.init(content:label:)(sub_1000503E0, &v59[-4], sub_1000503E8, &v59[-4], v39, v40, v41, v42);
    v71[0] = 0;
    State.init(wrappedValue:)(&v68, v71, &type metadata for Bool);
    v44 = v68;
    v45 = v69;
    LOBYTE(v68) = 0;
    LOBYTE(v69) = v44;
    v70 = v45;
    v46 = sub_10000966C(&qword_100099CF0, &qword_100099C68, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
    v47 = sub_10004EC30();
    v48 = v62;
    View.menuStyle<A>(_:)(&v68, v62, &type metadata for TFMenuStyle, v46, v47);
    swift_release();
    (*(void (**)(char *, uint64_t))(v61 + 8))(v43, v48);
    v49 = &v13[v34[12]];
    *(_QWORD *)v49 = swift_getKeyPath(&unk_100074C50);
    v49[8] = 0;
    v50 = &v13[v34[13]];
    *(_QWORD *)v50 = swift_getKeyPath(&unk_100074BF8);
    v50[8] = 0;
    v51 = &v13[v34[14]];
    *(_QWORD *)v51 = swift_getKeyPath(&unk_1000752D8);
    v51[8] = 0;
    v52 = &v13[v34[15]];
    v71[0] = 0;
    State.init(wrappedValue:)(&v68, v71, &type metadata for Bool);
    v53 = v69;
    *v52 = v68;
    *((_QWORD *)v52 + 1) = v53;
    v29 = &qword_100099C70;
    v54 = v63;
    sub_10000930C((uint64_t)v13, v63, &qword_100099C70);
    v55 = v66;
    sub_10000928C(v54, v66, &qword_100099C70);
    swift_storeEnumTagMultiPayload(v55, v64, 0);
    v56 = sub_10000966C(&qword_100099C78, &qword_100099C70, (uint64_t)&unk_100075FB0);
    v57 = sub_10000966C(&qword_100099C80, &qword_100099C58, (uint64_t)&unk_100075FB0);
    _ConditionalContent<>.init(storage:)(v55, v34, v2, v56, v57);
    v33 = v54;
  }
  return sub_1000092D0(v33, v29);
}

uint64_t sub_10003B69C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t (**v28)();
  char *v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t (**v39)();
  char *v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  void (*v65)(char *, char *, uint64_t);
  char *v66;
  uint64_t v67;
  void (*v68)(char *, char *, uint64_t);
  uint64_t v69;
  void (*v70)(char *, uint64_t);
  void (*v71)(char *, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char v97[16];
  uint64_t v98;
  char v99[16];
  uint64_t v100;
  uint64_t v101;
  char v102;
  __int128 v103;
  uint64_t v104;

  v95 = a2;
  v82 = sub_10000498C(&qword_100099D00);
  v81 = *(_QWORD *)(v82 - 8);
  __chkstk_darwin(v82);
  v80 = (char *)&v79 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_10000498C(&qword_100099D08);
  v86 = *(_QWORD *)(v88 - 8);
  v4 = __chkstk_darwin(v88);
  v87 = (char *)&v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v84 = (char *)&v79 - v6;
  v85 = type metadata accessor for Divider(0);
  v90 = *(_QWORD *)(v85 - 8);
  v7 = __chkstk_darwin(v85);
  v83 = (char *)&v79 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v96 = (char *)&v79 - v9;
  v10 = sub_10000498C(&qword_100099D10);
  v11 = __chkstk_darwin(v10);
  v89 = (char *)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v93 = (uint64_t)&v79 - v13;
  v14 = (int *)sub_10000498C(&qword_100099D18);
  v15 = __chkstk_darwin(v14);
  v94 = (uint64_t)&v79 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v79 - v18;
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v79 - v21;
  __chkstk_darwin(v20);
  v24 = (char *)&v79 - v23;
  v25 = swift_allocObject(&unk_10008F968, 97, 7);
  v26 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v25 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v25 + 64) = v26;
  *(_OWORD *)(v25 + 80) = *(_OWORD *)(a1 + 64);
  *(_BYTE *)(v25 + 96) = *(_BYTE *)(a1 + 80);
  v27 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v25 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v25 + 32) = v27;
  *(_WORD *)v22 = 0;
  v22[2] = 1;
  v100 = a1;
  sub_100051D8C(a1, (void (*)(uint64_t, uint64_t))sub_10001D97C, (void (*)(uint64_t, uint64_t))sub_1000527AC);
  Label.init(title:icon:)(sub_10003BF50, 0, sub_100050804, v99, &type metadata for Text, &type metadata for Image, &protocol witness table for Text, &protocol witness table for Image);
  v28 = (uint64_t (**)())&v22[v14[12]];
  *v28 = sub_1000507E4;
  v28[1] = (uint64_t (*)())v25;
  v29 = &v22[v14[13]];
  v101 = 0;
  v102 = 1;
  v30 = sub_10000498C(&qword_100099430);
  State.init(wrappedValue:)(&v103, &v101, v30);
  v31 = BYTE8(v103);
  v32 = v104;
  *(_QWORD *)v29 = v103;
  v29[8] = v31;
  *((_QWORD *)v29 + 2) = v32;
  v33 = v14[14];
  v101 = 0;
  v34 = sub_10000498C(&qword_100099838);
  State.init(wrappedValue:)(&v103, &v101, v34);
  *(_OWORD *)&v22[v33] = v103;
  v35 = &v22[v14[15]];
  *(_QWORD *)v35 = swift_getKeyPath(&unk_100074BF8);
  v35[8] = 0;
  v92 = v24;
  sub_10000930C((uint64_t)v22, (uint64_t)v24, &qword_100099D18);
  v36 = swift_allocObject(&unk_10008F990, 97, 7);
  v37 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v36 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v36 + 64) = v37;
  *(_OWORD *)(v36 + 80) = *(_OWORD *)(a1 + 64);
  *(_BYTE *)(v36 + 96) = *(_BYTE *)(a1 + 80);
  v38 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v36 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v36 + 32) = v38;
  *(_WORD *)v22 = 0;
  v22[2] = 1;
  v98 = a1;
  sub_100051D8C(a1, (void (*)(uint64_t, uint64_t))sub_10001D97C, (void (*)(uint64_t, uint64_t))sub_1000527AC);
  Label.init(title:icon:)(sub_10003BF70, 0, sub_100050870, v97, &type metadata for Text, &type metadata for Image, &protocol witness table for Text, &protocol witness table for Image);
  v39 = (uint64_t (**)())&v22[v14[12]];
  *v39 = sub_100050850;
  v39[1] = (uint64_t (*)())v36;
  v40 = &v22[v14[13]];
  v101 = 0;
  v102 = 1;
  State.init(wrappedValue:)(&v103, &v101, v30);
  v41 = BYTE8(v103);
  v42 = v104;
  *(_QWORD *)v40 = v103;
  v40[8] = v41;
  *((_QWORD *)v40 + 2) = v42;
  v43 = v14[14];
  v101 = 0;
  State.init(wrappedValue:)(&v103, &v101, v34);
  *(_OWORD *)&v22[v43] = v103;
  v44 = &v22[v14[15]];
  *(_QWORD *)v44 = swift_getKeyPath(&unk_100074BF8);
  v44[8] = 0;
  v91 = v19;
  v45 = sub_10000930C((uint64_t)v22, (uint64_t)v19, &qword_100099D18);
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v49 = Divider.init()(v45);
    v50 = __chkstk_darwin(v49);
    *(&v79 - 2) = a1;
    __chkstk_darwin(v50);
    *(&v79 - 2) = a1;
    *((_WORD *)&v79 - 4) = 1;
    v51 = sub_10000498C(&qword_100099D30);
    v52 = sub_10000498C(&qword_100099D38);
    v53 = sub_1000508B8();
    v54 = sub_10004F4FC(&qword_100099D50, &qword_100099D38);
    v55 = v80;
    Menu.init(content:label:)(sub_1000508A0, &v79 - 4, sub_1000508A8, &v79 - 4, v51, v52, v53, v54);
    LOBYTE(v101) = 0;
    State.init(wrappedValue:)(&v103, &v101, &type metadata for Bool);
    v56 = v103;
    v57 = *((_QWORD *)&v103 + 1);
    LOBYTE(v103) = 1;
    BYTE8(v103) = v56;
    v104 = v57;
    v58 = sub_10000966C(&qword_100099D58, &qword_100099D00, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
    v59 = sub_10004EC30();
    v60 = v87;
    v61 = v82;
    View.menuStyle<A>(_:)(&v103, v82, &type metadata for TFMenuStyle, v58, v59);
    swift_release();
    (*(void (**)(char *, uint64_t))(v81 + 8))(v55, v61);
    v62 = v86;
    v63 = v84;
    v64 = v88;
    (*(void (**)(char *, char *, uint64_t))(v86 + 32))(v84, v60, v88);
    v65 = *(void (**)(char *, char *, uint64_t))(v90 + 16);
    v66 = v83;
    v67 = v85;
    v65(v83, v96, v85);
    v68 = *(void (**)(char *, char *, uint64_t))(v62 + 16);
    v68(v60, v63, v64);
    v48 = (uint64_t)v89;
    v65(v89, v66, v67);
    v69 = sub_10000498C(&qword_100099D60);
    v68((char *)(v48 + *(int *)(v69 + 48)), v60, v64);
    v70 = *(void (**)(char *, uint64_t))(v62 + 8);
    v70(v63, v64);
    v71 = *(void (**)(char *, uint64_t))(v90 + 8);
    v71(v96, v67);
    v70(v60, v64);
    v71(v66, v67);
    v72 = sub_10000498C(&qword_100099D20);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 56))(v48, 0, 1, v72);
    v47 = v93;
    sub_10000930C(v48, v93, &qword_100099D10);
  }
  else
  {
    v46 = sub_10000498C(&qword_100099D20);
    v47 = v93;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v93, 1, 1, v46);
    v48 = (uint64_t)v89;
  }
  v73 = (uint64_t)v92;
  sub_10000928C((uint64_t)v92, (uint64_t)v22, &qword_100099D18);
  v74 = (uint64_t)v91;
  v75 = v94;
  sub_10000928C((uint64_t)v91, v94, &qword_100099D18);
  sub_10000928C(v47, v48, &qword_100099D10);
  v76 = v95;
  sub_10000928C((uint64_t)v22, v95, &qword_100099D18);
  v77 = sub_10000498C(&qword_100099D28);
  sub_10000928C(v75, v76 + *(int *)(v77 + 48), &qword_100099D18);
  sub_10000928C(v48, v76 + *(int *)(v77 + 64), &qword_100099D10);
  sub_1000092D0(v47, &qword_100099D10);
  sub_1000092D0(v74, &qword_100099D18);
  sub_1000092D0(v73, &qword_100099D18);
  sub_1000092D0(v48, &qword_100099D10);
  sub_1000092D0(v75, &qword_100099D18);
  return sub_1000092D0((uint64_t)v22, &qword_100099D18);
}

uint64_t sub_10003BF50@<X0>(uint64_t a1@<X8>)
{
  return sub_10003BF90(&qword_100098120, &xmmword_10009B430, (uint64_t *)&xmmword_10009B430 + 1, (uint64_t)sub_10002315C, a1);
}

uint64_t sub_10003BF70@<X0>(uint64_t a1@<X8>)
{
  return sub_10003BF90(&qword_100098118, &xmmword_10009B420, (uint64_t *)&xmmword_10009B420 + 1, (uint64_t)sub_100023050, a1);
}

uint64_t sub_10003BF90@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  char v12;
  uint64_t v13;
  _QWORD v14[2];

  if (*a1 != -1)
    swift_once(a1, a4);
  v8 = *a3;
  v14[0] = *a2;
  v14[1] = v8;
  v9 = sub_100008EDC();
  swift_bridgeObjectRetain(v8);
  result = Text.init<A>(_:)(v14, &type metadata for String, v9);
  *(_QWORD *)a5 = result;
  *(_QWORD *)(a5 + 8) = v11;
  *(_BYTE *)(a5 + 16) = v12 & 1;
  *(_QWORD *)(a5 + 24) = v13;
  return result;
}

uint64_t sub_10003C01C(_BYTE *a1)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _OWORD v33[5];
  char v34;
  _OWORD v35[12];
  uint64_t v36;
  _OWORD v37[5];
  char v38;

  v2 = (int *)type metadata accessor for TFSymbol(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)v33 - v6;
  v8 = sub_10000498C(&qword_100099CF8);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*a1 & 1) != 0)
  {
    v19 = sub_10003C33C(0, (uint64_t)v33);
    v37[2] = v33[2];
    v37[3] = v33[3];
    v37[4] = v33[4];
    v38 = v34;
    v37[0] = v33[0];
    v37[1] = v33[1];
    v20 = static Alignment.center.getter(v19);
    sub_1000314C4(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v35, 0.0, 1, INFINITY, 0, v20, v21);
    sub_10005066C((uint64_t)v37);
    v22 = v35[9];
    v23 = v35[11];
    *((_OWORD *)v11 + 10) = v35[10];
    *((_OWORD *)v11 + 11) = v23;
    v24 = v35[5];
    v25 = v35[7];
    v26 = v35[8];
    *((_OWORD *)v11 + 6) = v35[6];
    *((_OWORD *)v11 + 7) = v25;
    *((_OWORD *)v11 + 8) = v26;
    *((_OWORD *)v11 + 9) = v22;
    v27 = v35[3];
    v28 = v35[4];
    *((_OWORD *)v11 + 2) = v35[2];
    *((_OWORD *)v11 + 3) = v27;
    *((_QWORD *)v11 + 24) = v36;
    *((_OWORD *)v11 + 4) = v28;
    *((_OWORD *)v11 + 5) = v24;
    v29 = v35[1];
    *(_OWORD *)v11 = v35[0];
    *((_OWORD *)v11 + 1) = v29;
    swift_storeEnumTagMultiPayload(v11, v8, 0);
    v30 = sub_10000498C(&qword_100099CA8);
    v31 = sub_100050474();
    v32 = sub_100007D90(&qword_100099C00, type metadata accessor for TFSymbol, (uint64_t)&unk_100075D10);
    return _ConditionalContent<>.init(storage:)(v11, v30, v2, v31, v32);
  }
  else
  {
    v12 = static Font.title3.getter(v9);
    static SymbolRenderingMode.hierarchical.getter();
    *(_OWORD *)v5 = xmmword_100074AC0;
    *((_QWORD *)v5 + 2) = 0;
    *((_QWORD *)v5 + 3) = 0;
    v5[32] = 0;
    *((_QWORD *)v5 + 5) = v12;
    *((_QWORD *)v5 + 6) = 0;
    v5[v2[10]] = 1;
    v5[v2[11]] = 1;
    v13 = &v5[v2[12]];
    *(_QWORD *)v13 = swift_getKeyPath(&unk_100075348);
    v13[8] = 0;
    v14 = &v5[v2[13]];
    *(_QWORD *)v14 = swift_getKeyPath(&unk_100074C20);
    v14[8] = 0;
    sub_100008F30((uint64_t)v5, (uint64_t)v7, type metadata accessor for TFSymbol);
    sub_10000920C((uint64_t)v7, (uint64_t)v11, type metadata accessor for TFSymbol);
    swift_storeEnumTagMultiPayload(v11, v8, 1);
    v15 = sub_10000498C(&qword_100099CA8);
    v16 = sub_100050474();
    v17 = sub_100007D90(&qword_100099C00, type metadata accessor for TFSymbol, (uint64_t)&unk_100075D10);
    _ConditionalContent<>.init(storage:)(v11, v15, v2, v16, v17);
    return sub_100009250((uint64_t)v7, type metadata accessor for TFSymbol);
  }
}

uint64_t sub_10003C33C@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  void *v10;
  double v11;
  Swift::Double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    goto LABEL_15;
  swift_retain();
  v2 = v3;
  v6 = (uint64_t)sub_1000256CC();
  v7 = v6;
  if ((unint64_t)v6 >> 62)
  {
    if (v6 >= 0)
      v6 &= 0xFFFFFFFFFFFFFF8uLL;
    if (_CocoaArrayWrapper.endIndex.getter(v6))
      goto LABEL_4;
LABEL_11:
    swift_bridgeObjectRelease(v7);
    v10 = (void *)objc_opt_self(UIFont);
    objc_msgSend(v10, "systemFontSize");
    v9 = objc_msgSend(v10, "systemFontOfSize:");
    swift_release();
    goto LABEL_12;
  }
  if (!*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_11;
LABEL_4:
  if ((v7 & 0xC000000000000001) != 0)
  {
    v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v7);
    goto LABEL_7;
  }
  if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v8 = *(id *)(v7 + 32);
LABEL_7:
    v9 = v8;
    swift_release();
    swift_bridgeObjectRelease(v7);
LABEL_12:
    objc_msgSend(v9, "pointSize");
    v12 = v11;

    v13 = sub_100031054(a1 & 1, v12);
    v15 = v14;
    KeyPath = swift_getKeyPath(&unk_100074C20);
    static Font.body.getter(KeyPath);
    v17 = Font.monospacedDigit()();
    swift_release();
    v18 = swift_getKeyPath(&unk_100075708);
    v19 = swift_getKeyPath(&unk_100075738);
    result = swift_getKeyPath(&unk_100075768);
    *(_QWORD *)a2 = v13;
    *(_QWORD *)(a2 + 8) = v15;
    *(_BYTE *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = KeyPath;
    *(_BYTE *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = v18;
    *(_QWORD *)(a2 + 48) = v17;
    *(_QWORD *)(a2 + 56) = v19;
    *(_QWORD *)(a2 + 64) = 0x3FE999999999999ALL;
    *(_QWORD *)(a2 + 72) = result;
    *(_BYTE *)(a2 + 80) = 1;
    return result;
  }
  __break(1u);
LABEL_15:
  v21 = *(_QWORD *)(v2 + 16);
  v22 = type metadata accessor for TextFormattingState(0);
  v23 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
  result = EnvironmentObject.error()(0, v21, v22, v23);
  __break(1u);
  return result;
}

uint64_t sub_10003C544@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  int *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BOOL8 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t OpaqueTypeConformance2;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  int *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int *v84;
  _QWORD *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  int *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  int *v125;
  char *v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  __int128 v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  char v138;

  v130 = a2;
  v112 = sub_10000498C(&qword_100099D00);
  v111 = *(_QWORD *)(v112 - 8);
  __chkstk_darwin(v112);
  v110 = (char *)&v109 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = sub_10000498C(&qword_100099D08);
  v114 = *(_QWORD *)(v115 - 8);
  __chkstk_darwin(v115);
  v122 = (char *)&v109 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10000498C(&qword_100099D78);
  v123 = *(_QWORD *)(v5 - 8);
  v124 = v5;
  __chkstk_darwin(v5);
  v113 = (char *)&v109 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10000498C(&qword_100099D80);
  v8 = __chkstk_darwin(v7);
  v129 = (uint64_t)&v109 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v133 = (uint64_t)&v109 - v10;
  v11 = (int *)type metadata accessor for TFSymbol(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v109 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (int *)sub_10000498C(&qword_100099D88);
  __chkstk_darwin(v14);
  v16 = (char *)&v109 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10000498C(&qword_100099D90);
  v18 = __chkstk_darwin(v17);
  v127 = (uint64_t)&v109 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v128 = (char *)&v109 - v21;
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v109 - v23;
  __chkstk_darwin(v22);
  v132 = (uint64_t)&v109 - v25;
  v26 = swift_allocObject(&unk_10008FA30, 97, 7);
  v27 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v26 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v26 + 64) = v27;
  *(_OWORD *)(v26 + 80) = *(_OWORD *)(a1 + 64);
  *(_BYTE *)(v26 + 96) = *(_BYTE *)(a1 + 80);
  v28 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v26 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v26 + 32) = v28;
  *(_WORD *)v16 = 0;
  v16[2] = 1;
  v29 = (uint64_t)&v16[v14[11]];
  v116 = a1;
  v30 = sub_100051D8C(a1, (void (*)(uint64_t, uint64_t))sub_10001D97C, (void (*)(uint64_t, uint64_t))sub_1000527AC);
  v31 = static Font.title3.getter(v30);
  static SymbolRenderingMode.hierarchical.getter();
  *(_OWORD *)v13 = xmmword_100074AD0;
  *((_QWORD *)v13 + 2) = 0;
  v120 = v13 + 16;
  *((_QWORD *)v13 + 3) = 0;
  v13[32] = 0;
  *((_QWORD *)v13 + 5) = v31;
  *((_QWORD *)v13 + 6) = 0;
  v13[v11[10]] = 0;
  v13[v11[11]] = 1;
  v32 = &v13[v11[12]];
  *(_QWORD *)v32 = swift_getKeyPath(&unk_100075348);
  v32[8] = 0;
  v125 = v11;
  v33 = &v13[v11[13]];
  *(_QWORD *)v33 = swift_getKeyPath(&unk_100074C20);
  v33[8] = 0;
  sub_100008F30((uint64_t)v13, v29, type metadata accessor for TFSymbol);
  v34 = &v16[v14[12]];
  *(_QWORD *)v34 = sub_1000527A0;
  *((_QWORD *)v34 + 1) = v26;
  v35 = &v16[v14[13]];
  v137 = 0;
  v138 = 1;
  v119 = sub_10000498C(&qword_100099430);
  State.init(wrappedValue:)(&v134, &v137, v119);
  v36 = BYTE8(v134);
  v37 = v135;
  *(_QWORD *)v35 = v134;
  v35[8] = v36;
  *((_QWORD *)v35 + 2) = v37;
  v38 = v14[14];
  v137 = 0;
  v118 = sub_10000498C(&qword_100099838);
  State.init(wrappedValue:)(&v134, &v137, v118);
  *(_OWORD *)&v16[v38] = v134;
  v39 = &v16[v14[15]];
  *(_QWORD *)v39 = swift_getKeyPath(&unk_100074BF8);
  v39[8] = 0;
  if (qword_100098120 != -1)
    swift_once(&qword_100098120, sub_10002315C);
  v40 = *((_QWORD *)&xmmword_10009B430 + 1);
  v134 = xmmword_10009B430;
  v41 = sub_100008EDC();
  swift_bridgeObjectRetain(v40);
  v131 = v41;
  v42 = Text.init<A>(_:)(&v134, &type metadata for String, v41);
  v44 = v43;
  v46 = v45;
  v48 = v47 & 1;
  v49 = sub_10000966C(&qword_100099D98, &qword_100099D88, (uint64_t)&unk_100075F60);
  v121 = v14;
  v117 = v49;
  View.accessibilityLabel(_:)(v42, v44, v48, v46, v14, v49);
  sub_100008F20(v42, v44, v48);
  swift_bridgeObjectRelease(v46);
  sub_1000092D0((uint64_t)v16, &qword_100099D88);
  v126 = v24;
  v50 = v132;
  sub_10000930C((uint64_t)v24, v132, &qword_100099D90);
  v51 = v116;
  v52 = sub_10003D094();
  v53 = 1;
  if (v52)
  {
    v109 = (uint64_t)&v109;
    v54 = __chkstk_darwin(v52);
    *(&v109 - 2) = v51;
    __chkstk_darwin(v54);
    *(&v109 - 2) = v51;
    *((_WORD *)&v109 - 4) = 256;
    v55 = sub_10000498C(&qword_100099D30);
    v56 = sub_10000498C(&qword_100099D38);
    v57 = sub_1000508B8();
    v58 = sub_10004F4FC(&qword_100099D50, &qword_100099D38);
    v59 = v110;
    Menu.init(content:label:)(sub_100052780, &v109 - 4, sub_100052784, &v109 - 4, v55, v56, v57, v58);
    LOBYTE(v137) = 0;
    State.init(wrappedValue:)(&v134, &v137, &type metadata for Bool);
    v60 = v134;
    v61 = *((_QWORD *)&v134 + 1);
    LOBYTE(v134) = 1;
    BYTE8(v134) = v60;
    v135 = v61;
    v62 = sub_10000966C(&qword_100099D58, &qword_100099D00, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
    v63 = sub_10004EC30();
    v64 = v112;
    v109 = v62;
    View.menuStyle<A>(_:)(&v134, v112, &type metadata for TFMenuStyle, v62, v63);
    swift_release();
    (*(void (**)(char *, uint64_t))(v111 + 8))(v59, v64);
    if (qword_1000980F0 != -1)
      swift_once(&qword_1000980F0, sub_100022B10);
    v134 = xmmword_10009B3D0;
    swift_bridgeObjectRetain(*((_QWORD *)&xmmword_10009B3D0 + 1));
    v65 = Text.init<A>(_:)(&v134, &type metadata for String, v131);
    v67 = v66;
    v69 = v68;
    *(_QWORD *)&v134 = v64;
    v71 = v70 & 1;
    *((_QWORD *)&v134 + 1) = &type metadata for TFMenuStyle;
    v135 = v109;
    v136 = v63;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v134, &opaque type descriptor for <<opaque return type of View.menuStyle<A>(_:)>>, 1);
    v73 = (uint64_t)v113;
    v74 = v115;
    v75 = v122;
    View.accessibilityLabel(_:)(v65, v67, v71, v69, v115, OpaqueTypeConformance2);
    sub_100008F20(v65, v67, v71);
    swift_bridgeObjectRelease(v69);
    (*(void (**)(char *, uint64_t))(v114 + 8))(v75, v74);
    sub_10000930C(v73, v133, &qword_100099D78);
    v53 = 0;
    v50 = v132;
  }
  v76 = v133;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v123 + 56))(v133, v53, 1, v124);
  v77 = swift_allocObject(&unk_10008FA58, 97, 7);
  v78 = *(_OWORD *)(v51 + 48);
  *(_OWORD *)(v77 + 48) = *(_OWORD *)(v51 + 32);
  *(_OWORD *)(v77 + 64) = v78;
  *(_OWORD *)(v77 + 80) = *(_OWORD *)(v51 + 64);
  *(_BYTE *)(v77 + 96) = *(_BYTE *)(v51 + 80);
  v79 = *(_OWORD *)(v51 + 16);
  *(_OWORD *)(v77 + 16) = *(_OWORD *)v51;
  *(_OWORD *)(v77 + 32) = v79;
  *(_WORD *)v16 = 0;
  v16[2] = 1;
  v80 = v121;
  v81 = (uint64_t)&v16[v121[11]];
  v82 = sub_100051D8C(v51, (void (*)(uint64_t, uint64_t))sub_10001D97C, (void (*)(uint64_t, uint64_t))sub_1000527AC);
  v83 = static Font.title3.getter(v82);
  v84 = v125;
  static SymbolRenderingMode.hierarchical.getter();
  *(_OWORD *)v13 = xmmword_100074AE0;
  v85 = v120;
  *v120 = 0;
  v85[1] = 0;
  *((_BYTE *)v85 + 16) = 0;
  *((_QWORD *)v13 + 5) = v83;
  *((_QWORD *)v13 + 6) = 0;
  v13[v84[10]] = 0;
  v13[v84[11]] = 1;
  v86 = &v13[v84[12]];
  *(_QWORD *)v86 = swift_getKeyPath(&unk_100075348);
  v86[8] = 0;
  v87 = &v13[v84[13]];
  *(_QWORD *)v87 = swift_getKeyPath(&unk_100074C20);
  v87[8] = 0;
  sub_100008F30((uint64_t)v13, v81, type metadata accessor for TFSymbol);
  v88 = &v16[v80[12]];
  *(_QWORD *)v88 = sub_1000527A4;
  *((_QWORD *)v88 + 1) = v77;
  v89 = &v16[v80[13]];
  v137 = 0;
  v138 = 1;
  State.init(wrappedValue:)(&v134, &v137, v119);
  v90 = BYTE8(v134);
  v91 = v135;
  *(_QWORD *)v89 = v134;
  v89[8] = v90;
  *((_QWORD *)v89 + 2) = v91;
  v92 = v80[14];
  v137 = 0;
  State.init(wrappedValue:)(&v134, &v137, v118);
  *(_OWORD *)&v16[v92] = v134;
  v93 = &v16[v80[15]];
  *(_QWORD *)v93 = swift_getKeyPath(&unk_100074BF8);
  v93[8] = 0;
  if (qword_100098118 != -1)
    swift_once(&qword_100098118, sub_100023050);
  v134 = xmmword_10009B420;
  swift_bridgeObjectRetain(*((_QWORD *)&xmmword_10009B420 + 1));
  v94 = Text.init<A>(_:)(&v134, &type metadata for String, v131);
  v96 = v95;
  v98 = v97;
  v100 = v99 & 1;
  v101 = (uint64_t)v128;
  View.accessibilityLabel(_:)(v94, v95, v99 & 1, v97, v80, v117);
  sub_100008F20(v94, v96, v100);
  swift_bridgeObjectRelease(v98);
  sub_1000092D0((uint64_t)v16, &qword_100099D88);
  v102 = (uint64_t)v126;
  sub_10000930C(v101, (uint64_t)v126, &qword_100099D90);
  sub_10000928C(v50, v101, &qword_100099D90);
  v103 = v129;
  sub_10000928C(v76, v129, &qword_100099D80);
  v104 = v50;
  v105 = v127;
  sub_10000928C(v102, v127, &qword_100099D90);
  v106 = v130;
  sub_10000928C(v101, v130, &qword_100099D90);
  v107 = sub_10000498C(&qword_100099DA0);
  sub_10000928C(v103, v106 + *(int *)(v107 + 48), &qword_100099D80);
  sub_10000928C(v105, v106 + *(int *)(v107 + 64), &qword_100099D90);
  sub_1000092D0(v102, &qword_100099D90);
  sub_1000092D0(v76, &qword_100099D80);
  sub_1000092D0(v104, &qword_100099D90);
  sub_1000092D0(v105, &qword_100099D90);
  sub_1000092D0(v103, &qword_100099D80);
  return sub_1000092D0(v101, &qword_100099D90);
}

BOOL sub_10003D094()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  double v3;
  uint64_t v4;
  char v5;
  unsigned __int8 v6;
  double v7;
  uint64_t v8;
  char v9;
  double v10;
  double v11;
  double v12;
  double v13;

  if ((*(_BYTE *)v0 & 1) == 0)
    return 0;
  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_BYTE *)(v0 + 64);
  sub_10001D97C(v1, v2);
  v3 = sub_100011D48(v1, v2);
  sub_10001D9D8(v1, v2);
  v4 = *(_QWORD *)(v0 + 72);
  v5 = *(_BYTE *)(v0 + 80);
  sub_10001D97C(v4, v5);
  v6 = sub_1000117FC(v4, v5);
  sub_10001D9D8(v4, v5);
  sub_100066220(v6);
  if (v7 >= v3)
    return 0;
  v8 = *(_QWORD *)(v0 + 40);
  v9 = *(_BYTE *)(v0 + 48);
  sub_10001D97C(v8, v9);
  v10 = sub_100011D48(v8, v9);
  sub_10001D9D8(v8, v9);
  sub_10001D97C(v1, v2);
  v11 = sub_100011D48(v1, v2);
  sub_10001D9D8(v1, v2);
  v12 = v10 - (v11 + v11) + -2.0;
  sub_10001D97C(v1, v2);
  v13 = sub_100011D48(v1, v2);
  sub_10001D9D8(v1, v2);
  return v13 < v12;
}

uint64_t sub_10003D1DC(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, _QWORD);
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = type metadata accessor for UITextFormattingViewController.ChangeValue(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = *(void (**)(char *, _QWORD))(v8
                                               + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_didChangeValue);
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *a2, v4);
    swift_retain();
    v9(v7, 0);
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = type metadata accessor for TextFormattingState(0);
    v13 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    result = EnvironmentObject.error()(0, v11, v12, v13);
    __break(1u);
  }
  return result;
}

uint64_t sub_10003D2EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  if (qword_100098218 != -1)
    swift_once(&qword_100098218, sub_10002DBA4);
  v2 = qword_10009B608;
  v13 = qword_10009B608;
  KeyPath = swift_getKeyPath(&unk_1000757A0);
  v4 = swift_allocObject(&unk_10008F9B8, 97, 7);
  v5 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v4 + 64) = v5;
  *(_OWORD *)(v4 + 80) = *(_OWORD *)(a1 + 64);
  *(_BYTE *)(v4 + 96) = *(_BYTE *)(a1 + 80);
  v6 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v4 + 32) = v6;
  swift_bridgeObjectRetain(v2);
  sub_100051D8C(a1, (void (*)(uint64_t, uint64_t))sub_10001D97C, (void (*)(uint64_t, uint64_t))sub_1000527AC);
  v7 = sub_10000498C(&qword_100099D68);
  v8 = sub_10000498C(&qword_1000999C8);
  v9 = sub_10000966C(&qword_100099D70, &qword_100099D68, (uint64_t)&protocol conformance descriptor for [A]);
  v10 = sub_10001C9B4();
  v11 = sub_10000966C(&qword_1000999C0, &qword_1000999C8, (uint64_t)&protocol conformance descriptor for Toggle<A>);
  return ForEach<>.init(_:id:content:)(&v13, KeyPath, sub_100050954, v4, v7, v8, v9, v10, v11);
}

__n128 sub_10003D45C@<Q0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  double v10;
  uint64_t v11;
  char v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __n128 result;
  _OWORD v23[12];
  uint64_t v24;
  _OWORD v25[5];
  char v26;
  _OWORD v27[5];
  char v28;

  v7 = sub_10003C33C(a2, (uint64_t)v25);
  v27[2] = v25[2];
  v27[3] = v25[3];
  v27[4] = v25[4];
  v28 = v26;
  v27[0] = v25[0];
  v27[1] = v25[1];
  if ((a3 & 1) != 0)
  {
    v8 = *(_QWORD *)(a1 + 40);
    v9 = *(_BYTE *)(a1 + 48);
    sub_10001D97C(v8, v9);
    v10 = sub_100011D48(v8, v9);
    sub_10001D9D8(v8, v9);
    v11 = *(_QWORD *)(a1 + 56);
    v12 = *(_BYTE *)(a1 + 64);
    sub_10001D97C(v11, v12);
    v13 = sub_100011D48(v11, v12);
    v7 = sub_10001D9D8(v11, v12);
    v14 = v10 - (v13 + v13) + -2.0;
  }
  else
  {
    v14 = 0.0;
  }
  v15 = static Alignment.center.getter(v7);
  sub_1000314C4(v14, (a3 & 1) == 0, 0.0, 1, 0.0, 1, 0.0, 1, (uint64_t)v23, 0.0, 1, INFINITY, 0, v15, v16);
  sub_10005066C((uint64_t)v27);
  v17 = v23[11];
  *(_OWORD *)(a4 + 160) = v23[10];
  *(_OWORD *)(a4 + 176) = v17;
  *(_QWORD *)(a4 + 192) = v24;
  v18 = v23[7];
  *(_OWORD *)(a4 + 96) = v23[6];
  *(_OWORD *)(a4 + 112) = v18;
  v19 = v23[9];
  *(_OWORD *)(a4 + 128) = v23[8];
  *(_OWORD *)(a4 + 144) = v19;
  v20 = v23[3];
  *(_OWORD *)(a4 + 32) = v23[2];
  *(_OWORD *)(a4 + 48) = v20;
  v21 = v23[5];
  *(_OWORD *)(a4 + 64) = v23[4];
  *(_OWORD *)(a4 + 80) = v21;
  result = (__n128)v23[1];
  *(_OWORD *)a4 = v23[0];
  *(__n128 *)(a4 + 16) = result;
  *(_BYTE *)(a4 + 200) = 0;
  return result;
}

uint64_t sub_10003D5E0(double *a1, uint64_t a2)
{
  Swift::Double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  Class isa;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 v35;

  v3 = *a1;
  type metadata accessor for MainActor(0);
  v4 = sub_100051D8C(a2, (void (*)(uint64_t, uint64_t))sub_10001D97C, (void (*)(uint64_t, uint64_t))sub_1000527AC);
  v5 = static MainActor.shared.getter(v4);
  v6 = swift_allocObject(&unk_10008F9E0, 128, 7);
  *(_QWORD *)(v6 + 16) = v5;
  *(_QWORD *)(v6 + 24) = &protocol witness table for MainActor;
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v6 + 64) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v6 + 80) = v7;
  *(_OWORD *)(v6 + 96) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(v6 + 112) = *(_BYTE *)(a2 + 80);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v6 + 32) = *(_OWORD *)a2;
  *(_OWORD *)(v6 + 48) = v8;
  *(Swift::Double *)(v6 + 120) = v3;
  v9 = sub_100051D8C(a2, (void (*)(uint64_t, uint64_t))sub_10001D97C, (void (*)(uint64_t, uint64_t))sub_1000527AC);
  v10 = static MainActor.shared.getter(v9);
  v11 = swift_allocObject(&unk_10008FA08, 128, 7);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = &protocol witness table for MainActor;
  v12 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v11 + 64) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v11 + 80) = v12;
  *(_OWORD *)(v11 + 96) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(v11 + 112) = *(_BYTE *)(a2 + 80);
  v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v11 + 32) = *(_OWORD *)a2;
  *(_OWORD *)(v11 + 48) = v13;
  *(Swift::Double *)(v11 + 120) = v3;
  Binding.init(get:set:)(&v33, sub_100050970, v6, sub_100050994, v11, &type metadata for Bool);
  v14 = v33;
  v15 = v34;
  v16 = v35;
  if (qword_100098228 != -1)
    swift_once(&qword_100098228, sub_10002DF70);
  v17 = (void *)qword_100099300;
  sub_1000096AC(0, &qword_100099698, NSNumber_ptr);
  isa = NSNumber.init(floatLiteral:)(v3).super.super.isa;
  v19 = objc_msgSend(v17, "stringFromNumber:", isa);

  if (v19)
  {
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v22 = v21;

  }
  else
  {
    v23 = sub_10000498C(&qword_1000996A0);
    v24 = swift_allocObject(v23, 72, 7);
    *(_OWORD *)(v24 + 16) = xmmword_100074A20;
    *(_QWORD *)(v24 + 56) = &type metadata for CGFloat;
    *(_QWORD *)(v24 + 64) = sub_100031224();
    *(Swift::Double *)(v24 + 32) = v3;
    v20 = String.init(format:_:)(808347173, 0xE400000000000000, v24);
    v22 = v25;
  }
  if (qword_100098128 != -1)
    swift_once(&qword_100098128, sub_100023268);
  v26 = qword_10009B440;
  v27 = *(_QWORD *)algn_10009B448;
  v28 = sub_10000498C(&qword_1000996A0);
  v29 = swift_allocObject(v28, 72, 7);
  *(_OWORD *)(v29 + 16) = xmmword_100074A20;
  *(_QWORD *)(v29 + 56) = &type metadata for String;
  *(_QWORD *)(v29 + 64) = sub_100031268();
  *(_QWORD *)(v29 + 32) = v20;
  *(_QWORD *)(v29 + 40) = v22;
  v33 = String.init(format:_:)(v26, v27, v29);
  v34 = v30;
  v31 = sub_100008EDC();
  return Toggle<>.init<A>(_:isOn:)(&v33, v14, v15, v16, &type metadata for String, v31);
}

uint64_t sub_10003D8D0@<X0>(uint64_t a1@<X2>, BOOL *a2@<X8>, double a3@<D0>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  double v11;
  double v12;
  BOOL v13;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (*(_QWORD *)(a1 + 8))
  {
    swift_retain();
    v5 = (uint64_t)sub_1000256CC();
    swift_release();
    if ((unint64_t)v5 >> 62)
      goto LABEL_16;
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v5);
    for (; v6; v6 = _CocoaArrayWrapper.endIndex.getter(v15))
    {
      v7 = 4;
      while (1)
      {
        v8 = (v5 & 0xC000000000000001) != 0
           ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, v5)
           : *(id *)(v5 + 8 * v7);
        v9 = v8;
        v10 = v7 - 3;
        if (__OFADD__(v7 - 4, 1))
          break;
        objc_msgSend(v8, "pointSize");
        v12 = v11;

        v13 = v12 == a3;
        ++v7;
        if (v12 == a3 || v10 == v6)
          goto LABEL_21;
      }
      __break(1u);
LABEL_16:
      if (v5 < 0)
        v15 = v5;
      else
        v15 = v5 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v5);
    }
    v13 = 0;
LABEL_21:
    result = swift_bridgeObjectRelease_n(v5, 2);
    *a2 = v13;
  }
  else
  {
    v17 = *(_QWORD *)(a1 + 16);
    v18 = type metadata accessor for TextFormattingState(0);
    v19 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    result = EnvironmentObject.error()(0, v17, v18, v19);
    __break(1u);
  }
  return result;
}

uint64_t sub_10003DA3C(_BYTE *a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  double *v12;
  uint64_t v13;
  void (*v14)(double *, _QWORD);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v8 = type metadata accessor for UITextFormattingViewController.ChangeValue(0);
  v9 = *(_QWORD *)(v8 - 8);
  result = __chkstk_darwin(v8);
  v12 = (double *)((char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (*a1 == 1)
  {
    v13 = *(_QWORD *)(a5 + 8);
    if (v13)
    {
      v14 = *(void (**)(double *, _QWORD))(v13
                                                    + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_didChangeValue);
      *v12 = a2;
      (*(void (**)(double *, _QWORD, uint64_t))(v9 + 104))(v12, enum case for UITextFormattingViewController.ChangeValue.fontSize(_:), v8);
      swift_retain();
      v14(v12, 0);
      swift_release();
      return (*(uint64_t (**)(double *, uint64_t))(v9 + 8))(v12, v8);
    }
    else
    {
      v15 = *(_QWORD *)(a5 + 16);
      v16 = type metadata accessor for TextFormattingState(0);
      v17 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
      result = EnvironmentObject.error()(0, v15, v16, v17);
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_10003DB6C@<X0>(uint64_t a1@<X8>)
{
  return sub_10003B0A4(a1);
}

_QWORD *sub_10003DBB4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  char v13;
  _QWORD v14[2];

  v2 = v1;
  v4 = (int *)sub_10000498C(&qword_100099DA8);
  v5 = a1 + v4[10];
  v6 = type metadata accessor for HoverEffect(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 257;
  sub_10003DCC0(v2, a1 + v4[11]);
  v7 = a1 + v4[12];
  *(_QWORD *)v7 = swift_getKeyPath(&unk_100074C50);
  *(_BYTE *)(v7 + 8) = 0;
  v8 = a1 + v4[13];
  *(_QWORD *)v8 = swift_getKeyPath(&unk_100074BF8);
  *(_BYTE *)(v8 + 8) = 0;
  v9 = a1 + v4[14];
  *(_QWORD *)v9 = swift_getKeyPath(&unk_1000752D8);
  *(_BYTE *)(v9 + 8) = 0;
  v10 = a1 + v4[15];
  v13 = 0;
  result = State.init(wrappedValue:)(v14, &v13, &type metadata for Bool);
  v12 = v14[1];
  *(_BYTE *)v10 = v14[0];
  *(_QWORD *)(v10 + 8) = v12;
  return result;
}

uint64_t sub_10003DCC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t OpaqueTypeConformance2;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  ValueMetadata *v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98[9];
  uint64_t v99;
  ValueMetadata *v100;
  unint64_t v101;
  unint64_t v102;

  v94 = a2;
  v95 = sub_10000498C(&qword_100099DB0);
  __chkstk_darwin(v95);
  v4 = (char *)&v78 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10000498C(&qword_100099DB8);
  v6 = __chkstk_darwin(v5);
  v87 = (uint64_t)&v78 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v89 = (uint64_t)&v78 - v8;
  v9 = sub_10000498C(&qword_1000997D8);
  v85 = *(_QWORD *)(v9 - 8);
  v86 = v9;
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v78 - v14;
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v78 - v17;
  v19 = __chkstk_darwin(v16);
  v88 = (uint64_t)&v78 - v20;
  v21 = __chkstk_darwin(v19);
  v97 = (uint64_t)&v78 - v22;
  __chkstk_darwin(v21);
  v96 = (uint64_t)&v78 - v23;
  v91 = sub_10000498C(&qword_100099DC0);
  __chkstk_darwin(v91);
  v93 = (uint64_t)&v78 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = sub_10000498C(&qword_100099DC8);
  v79 = *(_QWORD *)(v80 - 8);
  __chkstk_darwin(v80);
  v78 = (char *)&v78 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = sub_10000498C(&qword_100099DD0);
  __chkstk_darwin(v90);
  v82 = (char *)&v78 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = sub_10000498C(&qword_100099DD8);
  v84 = *(_QWORD *)(v92 - 8);
  v27 = __chkstk_darwin(v92);
  v81 = (char *)&v78 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v83 = (char *)&v78 - v29;
  v30 = *(_QWORD *)(a1 + 24);
  v31 = *(unsigned __int8 *)(a1 + 32);
  v32 = *(unsigned __int8 *)(a1 + 33);
  sub_10001D970(v30, v31, *(_BYTE *)(a1 + 33));
  v33 = sub_1000119BC(v30, v31 | (v32 << 8));
  v35 = v34;
  v36 = sub_10001D9CC(v30, v31, v32);
  if ((v35 & 1) != 0)
    goto LABEL_5;
  v37 = 2;
  if ((*(_BYTE *)a1 & 1) != 0)
    v37 = 3;
  if (v37 < v33)
  {
LABEL_5:
    sub_10003E7FC(0, v96);
    sub_10003EC4C(0, v97);
    v38 = v88;
    sub_10003F0AC(0, v88);
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v40 = v89;
      sub_10003F4FC(0, v89);
      v39 = 0;
    }
    else
    {
      v39 = 1;
      v40 = v89;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v85 + 56))(v40, v39, 1, v86);
    sub_10000928C(v96, (uint64_t)v18, &qword_1000997D8);
    sub_10000928C(v97, (uint64_t)v15, &qword_1000997D8);
    sub_10000928C(v38, (uint64_t)v12, &qword_1000997D8);
    v41 = v87;
    sub_10000928C(v40, v87, &qword_100099DB8);
    sub_10000928C((uint64_t)v18, (uint64_t)v4, &qword_1000997D8);
    v42 = (int *)sub_10000498C(&qword_100099DE0);
    sub_10000928C((uint64_t)v15, (uint64_t)&v4[v42[12]], &qword_1000997D8);
    sub_10000928C((uint64_t)v12, (uint64_t)&v4[v42[16]], &qword_1000997D8);
    sub_10000928C(v41, (uint64_t)&v4[v42[20]], &qword_100099DB8);
    sub_1000092D0(v41, &qword_100099DB8);
    sub_1000092D0((uint64_t)v12, &qword_1000997D8);
    sub_1000092D0((uint64_t)v15, &qword_1000997D8);
    sub_1000092D0((uint64_t)v18, &qword_1000997D8);
    v43 = v93;
    sub_10000928C((uint64_t)v4, v93, &qword_100099DB0);
    swift_storeEnumTagMultiPayload(v43, v91, 1);
    v44 = sub_1000509D4();
    v45 = sub_10004EC30();
    v99 = v90;
    v100 = &type metadata for TFMenuStyle;
    v101 = v44;
    v102 = v45;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v99, &opaque type descriptor for <<opaque return type of View.menuStyle<A>(_:)>>, 1);
    v47 = sub_10000966C(&qword_100099DF8, &qword_100099DB0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    _ConditionalContent<>.init(storage:)(v43, v92, v95, OpaqueTypeConformance2, v47);
    sub_1000092D0((uint64_t)v4, &qword_100099DB0);
    sub_1000092D0(v40, &qword_100099DB8);
    sub_1000092D0(v38, &qword_1000997D8);
    sub_1000092D0(v97, &qword_1000997D8);
    return sub_1000092D0(v96, &qword_1000997D8);
  }
  else
  {
    v49 = __chkstk_darwin(v36);
    *(&v78 - 2) = (char *)a1;
    __chkstk_darwin(v49);
    *(&v78 - 2) = (char *)a1;
    v50 = sub_10000498C(&qword_1000999A0);
    v51 = sub_10000966C(&qword_1000999B0, &qword_1000999A0, (uint64_t)&unk_100075E88);
    v52 = sub_10000966C(&qword_100099DF8, &qword_100099DB0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v53 = v78;
    v54 = v95;
    v97 = v52;
    Menu.init(content:label:)(sub_100050A70, &v78 - 4, sub_100050A78, &v78 - 4, v50, v95, v51, v52);
    if (qword_1000981D8 != -1)
      swift_once(&qword_1000981D8, sub_10002496C);
    v55 = *(_QWORD *)algn_10009B5A8;
    v99 = qword_10009B5A0;
    v100 = *(ValueMetadata **)algn_10009B5A8;
    v56 = sub_100008EDC();
    swift_bridgeObjectRetain(v55);
    v57 = Text.init<A>(_:)(&v99, &type metadata for String, v56);
    v59 = v58;
    v61 = v60;
    v63 = v62 & 1;
    v64 = sub_10000966C(&qword_100099DF0, &qword_100099DC8, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
    v65 = (uint64_t)v82;
    v66 = v80;
    View.accessibilityLabel(_:)(v57, v59, v63, v61, v80, v64);
    sub_100008F20(v57, v59, v63);
    swift_bridgeObjectRelease(v61);
    (*(void (**)(char *, uint64_t))(v79 + 8))(v53, v66);
    v98[0] = 0;
    State.init(wrappedValue:)(&v99, v98, &type metadata for Bool);
    v67 = v99;
    v68 = v100;
    LOBYTE(v99) = 0;
    LOBYTE(v100) = v67;
    v101 = (unint64_t)v68;
    v69 = sub_1000509D4();
    v70 = sub_10004EC30();
    v71 = v81;
    v72 = v90;
    View.menuStyle<A>(_:)(&v99, v90, &type metadata for TFMenuStyle, v69, v70);
    swift_release();
    sub_1000092D0(v65, &qword_100099DD0);
    v73 = v84;
    v74 = v83;
    v75 = v92;
    (*(void (**)(char *, char *, uint64_t))(v84 + 32))(v83, v71, v92);
    v76 = v93;
    (*(void (**)(uint64_t, char *, uint64_t))(v73 + 16))(v93, v74, v75);
    swift_storeEnumTagMultiPayload(v76, v91, 0);
    v99 = v72;
    v100 = &type metadata for TFMenuStyle;
    v101 = v69;
    v102 = v70;
    v77 = swift_getOpaqueTypeConformance2(&v99, &opaque type descriptor for <<opaque return type of View.menuStyle<A>(_:)>>, 1);
    _ConditionalContent<>.init(storage:)(v76, v75, v54, v77, v97);
    return (*(uint64_t (**)(char *, uint64_t))(v73 + 8))(v74, v75);
  }
}

uint64_t sub_10003E504@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v42 = a2;
  v3 = sub_10000498C(&qword_100099DB8);
  v4 = __chkstk_darwin(v3);
  v41 = (uint64_t)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v7 = (char *)&v37 - v6;
  v39 = sub_10000498C(&qword_1000997D8);
  v8 = *(_QWORD *)(v39 - 8);
  v9 = __chkstk_darwin(v39);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v37 - v13;
  v15 = __chkstk_darwin(v12);
  v40 = (uint64_t)&v37 - v16;
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v37 - v18;
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v37 - v21;
  __chkstk_darwin(v20);
  v23 = 1;
  v25 = (char *)&v37 - v24;
  sub_10003E7FC(1, (uint64_t)&v37 - v24);
  v26 = (uint64_t)v22;
  sub_10003EC4C(1, (uint64_t)v22);
  v27 = (uint64_t)v19;
  sub_10003F0AC(1, (uint64_t)v19);
  if ((*a1 & 1) != 0)
  {
    sub_10003F4FC(1, (uint64_t)v7);
    v23 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v7, v23, 1, v39);
  v38 = v25;
  v28 = (uint64_t)v25;
  v29 = v40;
  sub_10000928C(v28, v40, &qword_1000997D8);
  sub_10000928C(v26, (uint64_t)v14, &qword_1000997D8);
  sub_10000928C((uint64_t)v19, (uint64_t)v11, &qword_1000997D8);
  v30 = v41;
  sub_10000928C((uint64_t)v7, v41, &qword_100099DB8);
  v31 = (uint64_t)v7;
  v32 = (uint64_t)v14;
  v33 = (uint64_t)v11;
  v34 = v42;
  sub_10000928C(v29, v42, &qword_1000997D8);
  v35 = (int *)sub_10000498C(&qword_100099DE0);
  sub_10000928C(v32, v34 + v35[12], &qword_1000997D8);
  sub_10000928C(v33, v34 + v35[16], &qword_1000997D8);
  sub_10000928C(v30, v34 + v35[20], &qword_100099DB8);
  sub_1000092D0(v31, &qword_100099DB8);
  sub_1000092D0(v27, &qword_1000997D8);
  sub_1000092D0(v26, &qword_1000997D8);
  sub_1000092D0((uint64_t)v38, &qword_1000997D8);
  sub_1000092D0(v30, &qword_100099DB8);
  sub_1000092D0(v33, &qword_1000997D8);
  sub_1000092D0(v32, &qword_1000997D8);
  return sub_1000092D0(v29, &qword_1000997D8);
}

uint64_t sub_10003E7FC@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t result;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  _QWORD *v50;
  char *v51;
  uint64_t v52;
  _QWORD v53[2];
  char v54;
  uint64_t v55;
  __int16 v56;

  v3 = v2;
  v6 = sub_10000498C(&qword_100098FC8);
  __chkstk_darwin(v6);
  v50 = (uint64_t *)((char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = (int *)type metadata accessor for TFToggle(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10000498C(&qword_1000997D8);
  __chkstk_darwin(v11);
  v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = 0;
  v15 = 0;
  v49 = a1;
  if ((a1 & 1) != 0)
  {
    if (qword_1000980F8 != -1)
      swift_once(&qword_1000980F8, sub_100022C20);
    v14 = qword_10009B3E0;
    v15 = swift_bridgeObjectRetain(*(_QWORD *)algn_10009B3E8);
  }
  v48 = v15;
  v51 = v13;
  v52 = a2;
  KeyPath = swift_getKeyPath(&unk_100075830);
  type metadata accessor for MainActor(0);
  v17 = *(_QWORD *)(v3 + 8);
  v47 = *(_QWORD *)(v3 + 16);
  v55 = *(_QWORD *)(v3 + 24);
  v56 = *(_WORD *)(v3 + 32);
  swift_retain();
  swift_retain();
  v18 = sub_10004EC80((uint64_t)&v55);
  v19 = static MainActor.shared.getter(v18);
  v20 = swift_allocObject(&unk_10008FB70, 80, 7);
  *(_QWORD *)(v20 + 16) = v19;
  *(_QWORD *)(v20 + 24) = &protocol witness table for MainActor;
  v21 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v20 + 32) = *(_OWORD *)v3;
  *(_OWORD *)(v20 + 48) = v21;
  *(_WORD *)(v20 + 64) = *(_WORD *)(v3 + 32);
  *(_QWORD *)(v20 + 72) = KeyPath;
  swift_retain();
  swift_retain();
  v22 = sub_10004EC80((uint64_t)&v55);
  v23 = static MainActor.shared.getter(v22);
  v24 = swift_allocObject(&unk_10008FB98, 80, 7);
  *(_QWORD *)(v24 + 16) = v23;
  *(_QWORD *)(v24 + 24) = &protocol witness table for MainActor;
  v25 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v24 + 32) = *(_OWORD *)v3;
  *(_OWORD *)(v24 + 48) = v25;
  *(_WORD *)(v24 + 64) = *(_WORD *)(v3 + 32);
  *(_QWORD *)(v24 + 72) = KeyPath;
  Binding.init(get:set:)(v53, sub_1000527B8, v20, sub_1000527BC, v24, &type metadata for Bool);
  v26 = swift_release();
  v27 = v53[0];
  v28 = v53[1];
  v29 = v54;
  static SymbolRenderingMode.hierarchical.getter(v26);
  *(_OWORD *)v10 = xmmword_100074AF0;
  *((_QWORD *)v10 + 2) = 0;
  *((_QWORD *)v10 + 3) = 0;
  v30 = (uint64_t *)&v10[v8[7]];
  v31 = v48;
  *v30 = v14;
  v30[1] = v31;
  v10[v8[8]] = v49 & 1;
  v32 = &v10[v8[9]];
  *(_QWORD *)v32 = v27;
  *((_QWORD *)v32 + 1) = v28;
  v32[16] = v29;
  v33 = &v10[v8[10]];
  *(_QWORD *)v33 = swift_getKeyPath(&unk_100074BF8);
  v33[8] = 0;
  if (v17)
  {
    v34 = swift_getKeyPath(&unk_100075300);
    swift_getKeyPath(&unk_100075328);
    v35 = swift_retain();
    v36 = v50;
    static Published.subscript.getter(v50, v35, v34);
    swift_release();
    swift_release();
    v37 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor(0);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 48))(v36, 1, v37))
    {
      sub_1000092D0((uint64_t)v36, &qword_100098FC8);
      swift_release();
      v38 = 0;
    }
    else
    {
      v39 = UITextFormattingViewController.FormattingDescriptor.textAlignments.getter();
      sub_1000092D0((uint64_t)v36, &qword_100098FC8);
      v40 = UITextFormattingViewControllerTextAlignmentLeft;
      v38 = sub_100011198();
      swift_release();

      swift_bridgeObjectRelease(v39);
    }
    v42 = (uint64_t)v51;
    v41 = v52;
    if (qword_1000980F8 != -1)
      swift_once(&qword_1000980F8, sub_100022C20);
    sub_10003464C(v38 & 1, qword_10009B3E0, *(uint64_t *)algn_10009B3E8, v42);
    sub_100009250((uint64_t)v10, type metadata accessor for TFToggle);
    return sub_10000930C(v42, v41, &qword_1000997D8);
  }
  else
  {
    v44 = type metadata accessor for TextFormattingState(0);
    v45 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    result = EnvironmentObject.error()(0, v47, v44, v45);
    __break(1u);
  }
  return result;
}

uint64_t sub_10003EC4C@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t result;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  _QWORD *v50;
  char *v51;
  uint64_t v52;
  _QWORD v53[2];
  char v54;
  uint64_t v55;
  __int16 v56;

  v3 = v2;
  v6 = sub_10000498C(&qword_100098FC8);
  __chkstk_darwin(v6);
  v50 = (uint64_t *)((char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = (int *)type metadata accessor for TFToggle(0);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = sub_10000498C(&qword_1000997D8);
  __chkstk_darwin(v11);
  v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = 0;
  v15 = 0;
  v49 = a1;
  if ((a1 & 1) != 0)
  {
    if (qword_100098100 != -1)
      swift_once(&qword_100098100, sub_100022D2C);
    v14 = qword_10009B3F0;
    v15 = swift_bridgeObjectRetain(*(_QWORD *)algn_10009B3F8);
  }
  v48 = v15;
  v51 = v13;
  v52 = a2;
  KeyPath = swift_getKeyPath(&unk_100075808);
  type metadata accessor for MainActor(0);
  v17 = *(_QWORD *)(v3 + 8);
  v47 = *(_QWORD *)(v3 + 16);
  v55 = *(_QWORD *)(v3 + 24);
  v56 = *(_WORD *)(v3 + 32);
  swift_retain();
  swift_retain();
  v18 = sub_10004EC80((uint64_t)&v55);
  v19 = static MainActor.shared.getter(v18);
  v20 = swift_allocObject(&unk_10008FB20, 80, 7);
  *(_QWORD *)(v20 + 16) = v19;
  *(_QWORD *)(v20 + 24) = &protocol witness table for MainActor;
  v21 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v20 + 32) = *(_OWORD *)v3;
  *(_OWORD *)(v20 + 48) = v21;
  *(_WORD *)(v20 + 64) = *(_WORD *)(v3 + 32);
  *(_QWORD *)(v20 + 72) = KeyPath;
  swift_retain();
  swift_retain();
  v22 = sub_10004EC80((uint64_t)&v55);
  v23 = static MainActor.shared.getter(v22);
  v24 = swift_allocObject(&unk_10008FB48, 80, 7);
  *(_QWORD *)(v24 + 16) = v23;
  *(_QWORD *)(v24 + 24) = &protocol witness table for MainActor;
  v25 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v24 + 32) = *(_OWORD *)v3;
  *(_OWORD *)(v24 + 48) = v25;
  *(_WORD *)(v24 + 64) = *(_WORD *)(v3 + 32);
  *(_QWORD *)(v24 + 72) = KeyPath;
  Binding.init(get:set:)(v53, sub_1000527B8, v20, sub_1000527BC, v24, &type metadata for Bool);
  v26 = swift_release();
  v27 = v53[0];
  v28 = v53[1];
  v29 = v54;
  static SymbolRenderingMode.hierarchical.getter(v26);
  *v10 = 0xD000000000000010;
  v10[1] = 0x80000001000780F0;
  v10[2] = 0;
  v10[3] = 0;
  v30 = (_QWORD *)((char *)v10 + v8[7]);
  v31 = v48;
  *v30 = v14;
  v30[1] = v31;
  *((_BYTE *)v10 + v8[8]) = v49 & 1;
  v32 = (char *)v10 + v8[9];
  *(_QWORD *)v32 = v27;
  *((_QWORD *)v32 + 1) = v28;
  v32[16] = v29;
  v33 = (char *)v10 + v8[10];
  *(_QWORD *)v33 = swift_getKeyPath(&unk_100074BF8);
  v33[8] = 0;
  if (v17)
  {
    v34 = swift_getKeyPath(&unk_100075300);
    swift_getKeyPath(&unk_100075328);
    v35 = swift_retain();
    v36 = v50;
    static Published.subscript.getter(v50, v35, v34);
    swift_release();
    swift_release();
    v37 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor(0);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 48))(v36, 1, v37))
    {
      sub_1000092D0((uint64_t)v36, &qword_100098FC8);
      swift_release();
      v38 = 0;
    }
    else
    {
      v39 = UITextFormattingViewController.FormattingDescriptor.textAlignments.getter();
      sub_1000092D0((uint64_t)v36, &qword_100098FC8);
      v40 = UITextFormattingViewControllerTextAlignmentCenter;
      v38 = sub_100011198();
      swift_release();

      swift_bridgeObjectRelease(v39);
    }
    v42 = (uint64_t)v51;
    v41 = v52;
    if (qword_100098100 != -1)
      swift_once(&qword_100098100, sub_100022D2C);
    sub_10003464C(v38 & 1, qword_10009B3F0, *(uint64_t *)algn_10009B3F8, v42);
    sub_100009250((uint64_t)v10, type metadata accessor for TFToggle);
    return sub_10000930C(v42, v41, &qword_1000997D8);
  }
  else
  {
    v44 = type metadata accessor for TextFormattingState(0);
    v45 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    result = EnvironmentObject.error()(0, v47, v44, v45);
    __break(1u);
  }
  return result;
}

uint64_t sub_10003F0AC@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t result;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  _QWORD *v50;
  char *v51;
  uint64_t v52;
  _QWORD v53[2];
  char v54;
  uint64_t v55;
  __int16 v56;

  v3 = v2;
  v6 = sub_10000498C(&qword_100098FC8);
  __chkstk_darwin(v6);
  v50 = (uint64_t *)((char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = (int *)type metadata accessor for TFToggle(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10000498C(&qword_1000997D8);
  __chkstk_darwin(v11);
  v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = 0;
  v15 = 0;
  v49 = a1;
  if ((a1 & 1) != 0)
  {
    if (qword_100098108 != -1)
      swift_once(&qword_100098108, sub_100022E38);
    v14 = qword_10009B400;
    v15 = swift_bridgeObjectRetain(*(_QWORD *)algn_10009B408);
  }
  v48 = v15;
  v51 = v13;
  v52 = a2;
  KeyPath = swift_getKeyPath(&unk_1000757E0);
  type metadata accessor for MainActor(0);
  v17 = *(_QWORD *)(v3 + 8);
  v47 = *(_QWORD *)(v3 + 16);
  v55 = *(_QWORD *)(v3 + 24);
  v56 = *(_WORD *)(v3 + 32);
  swift_retain();
  swift_retain();
  v18 = sub_10004EC80((uint64_t)&v55);
  v19 = static MainActor.shared.getter(v18);
  v20 = swift_allocObject(&unk_10008FAD0, 80, 7);
  *(_QWORD *)(v20 + 16) = v19;
  *(_QWORD *)(v20 + 24) = &protocol witness table for MainActor;
  v21 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v20 + 32) = *(_OWORD *)v3;
  *(_OWORD *)(v20 + 48) = v21;
  *(_WORD *)(v20 + 64) = *(_WORD *)(v3 + 32);
  *(_QWORD *)(v20 + 72) = KeyPath;
  swift_retain();
  swift_retain();
  v22 = sub_10004EC80((uint64_t)&v55);
  v23 = static MainActor.shared.getter(v22);
  v24 = swift_allocObject(&unk_10008FAF8, 80, 7);
  *(_QWORD *)(v24 + 16) = v23;
  *(_QWORD *)(v24 + 24) = &protocol witness table for MainActor;
  v25 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v24 + 32) = *(_OWORD *)v3;
  *(_OWORD *)(v24 + 48) = v25;
  *(_WORD *)(v24 + 64) = *(_WORD *)(v3 + 32);
  *(_QWORD *)(v24 + 72) = KeyPath;
  Binding.init(get:set:)(v53, sub_1000527B8, v20, sub_1000527BC, v24, &type metadata for Bool);
  v26 = swift_release();
  v27 = v53[0];
  v28 = v53[1];
  v29 = v54;
  static SymbolRenderingMode.hierarchical.getter(v26);
  *(_OWORD *)v10 = xmmword_100074B00;
  *((_QWORD *)v10 + 2) = 0;
  *((_QWORD *)v10 + 3) = 0;
  v30 = (uint64_t *)&v10[v8[7]];
  v31 = v48;
  *v30 = v14;
  v30[1] = v31;
  v10[v8[8]] = v49 & 1;
  v32 = &v10[v8[9]];
  *(_QWORD *)v32 = v27;
  *((_QWORD *)v32 + 1) = v28;
  v32[16] = v29;
  v33 = &v10[v8[10]];
  *(_QWORD *)v33 = swift_getKeyPath(&unk_100074BF8);
  v33[8] = 0;
  if (v17)
  {
    v34 = swift_getKeyPath(&unk_100075300);
    swift_getKeyPath(&unk_100075328);
    v35 = swift_retain();
    v36 = v50;
    static Published.subscript.getter(v50, v35, v34);
    swift_release();
    swift_release();
    v37 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor(0);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 48))(v36, 1, v37))
    {
      sub_1000092D0((uint64_t)v36, &qword_100098FC8);
      swift_release();
      v38 = 0;
    }
    else
    {
      v39 = UITextFormattingViewController.FormattingDescriptor.textAlignments.getter();
      sub_1000092D0((uint64_t)v36, &qword_100098FC8);
      v40 = UITextFormattingViewControllerTextAlignmentRight;
      v38 = sub_100011198();
      swift_release();

      swift_bridgeObjectRelease(v39);
    }
    v42 = (uint64_t)v51;
    v41 = v52;
    if (qword_100098108 != -1)
      swift_once(&qword_100098108, sub_100022E38);
    sub_10003464C(v38 & 1, qword_10009B400, *(uint64_t *)algn_10009B408, v42);
    sub_100009250((uint64_t)v10, type metadata accessor for TFToggle);
    return sub_10000930C(v42, v41, &qword_1000997D8);
  }
  else
  {
    v44 = type metadata accessor for TextFormattingState(0);
    v45 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    result = EnvironmentObject.error()(0, v47, v44, v45);
    __break(1u);
  }
  return result;
}

uint64_t sub_10003F4FC@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t result;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  _QWORD *v50;
  char *v51;
  uint64_t v52;
  _QWORD v53[2];
  char v54;
  uint64_t v55;
  __int16 v56;

  v3 = v2;
  v6 = sub_10000498C(&qword_100098FC8);
  __chkstk_darwin(v6);
  v50 = (uint64_t *)((char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = (int *)type metadata accessor for TFToggle(0);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = sub_10000498C(&qword_1000997D8);
  __chkstk_darwin(v11);
  v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = 0;
  v15 = 0;
  v49 = a1;
  if ((a1 & 1) != 0)
  {
    if (qword_100098110 != -1)
      swift_once(&qword_100098110, sub_100022F44);
    v14 = qword_10009B410;
    v15 = swift_bridgeObjectRetain(*(_QWORD *)algn_10009B418);
  }
  v48 = v15;
  v51 = v13;
  v52 = a2;
  KeyPath = swift_getKeyPath(&unk_1000757B8);
  type metadata accessor for MainActor(0);
  v17 = *(_QWORD *)(v3 + 8);
  v47 = *(_QWORD *)(v3 + 16);
  v55 = *(_QWORD *)(v3 + 24);
  v56 = *(_WORD *)(v3 + 32);
  swift_retain();
  swift_retain();
  v18 = sub_10004EC80((uint64_t)&v55);
  v19 = static MainActor.shared.getter(v18);
  v20 = swift_allocObject(&unk_10008FA80, 80, 7);
  *(_QWORD *)(v20 + 16) = v19;
  *(_QWORD *)(v20 + 24) = &protocol witness table for MainActor;
  v21 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v20 + 32) = *(_OWORD *)v3;
  *(_OWORD *)(v20 + 48) = v21;
  *(_WORD *)(v20 + 64) = *(_WORD *)(v3 + 32);
  *(_QWORD *)(v20 + 72) = KeyPath;
  swift_retain();
  swift_retain();
  v22 = sub_10004EC80((uint64_t)&v55);
  v23 = static MainActor.shared.getter(v22);
  v24 = swift_allocObject(&unk_10008FAA8, 80, 7);
  *(_QWORD *)(v24 + 16) = v23;
  *(_QWORD *)(v24 + 24) = &protocol witness table for MainActor;
  v25 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v24 + 32) = *(_OWORD *)v3;
  *(_OWORD *)(v24 + 48) = v25;
  *(_WORD *)(v24 + 64) = *(_WORD *)(v3 + 32);
  *(_QWORD *)(v24 + 72) = KeyPath;
  Binding.init(get:set:)(v53, sub_100050AA0, v20, sub_100050AB4, v24, &type metadata for Bool);
  v26 = swift_release();
  v27 = v53[0];
  v28 = v53[1];
  v29 = v54;
  static SymbolRenderingMode.hierarchical.getter(v26);
  *v10 = 0xD000000000000014;
  v10[1] = 0x80000001000780D0;
  v10[2] = 0;
  v10[3] = 0;
  v30 = (_QWORD *)((char *)v10 + v8[7]);
  v31 = v48;
  *v30 = v14;
  v30[1] = v31;
  *((_BYTE *)v10 + v8[8]) = v49 & 1;
  v32 = (char *)v10 + v8[9];
  *(_QWORD *)v32 = v27;
  *((_QWORD *)v32 + 1) = v28;
  v32[16] = v29;
  v33 = (char *)v10 + v8[10];
  *(_QWORD *)v33 = swift_getKeyPath(&unk_100074BF8);
  v33[8] = 0;
  if (v17)
  {
    v34 = swift_getKeyPath(&unk_100075300);
    swift_getKeyPath(&unk_100075328);
    v35 = swift_retain();
    v36 = v50;
    static Published.subscript.getter(v50, v35, v34);
    swift_release();
    swift_release();
    v37 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor(0);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 48))(v36, 1, v37))
    {
      sub_1000092D0((uint64_t)v36, &qword_100098FC8);
      swift_release();
      v38 = 0;
    }
    else
    {
      v39 = UITextFormattingViewController.FormattingDescriptor.textAlignments.getter();
      sub_1000092D0((uint64_t)v36, &qword_100098FC8);
      v40 = UITextFormattingViewControllerTextAlignmentJustified;
      v38 = sub_100011198();
      swift_release();

      swift_bridgeObjectRelease(v39);
    }
    v42 = (uint64_t)v51;
    v41 = v52;
    if (qword_100098110 != -1)
      swift_once(&qword_100098110, sub_100022F44);
    sub_10003464C(v38 & 1, qword_10009B410, *(uint64_t *)algn_10009B418, v42);
    sub_100009250((uint64_t)v10, type metadata accessor for TFToggle);
    return sub_10000930C(v42, v41, &qword_1000997D8);
  }
  else
  {
    v44 = type metadata accessor for TextFormattingState(0);
    v45 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    result = EnvironmentObject.error()(0, v47, v44, v45);
    __break(1u);
  }
  return result;
}

uint64_t sub_10003F95C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  char v20;
  _QWORD v21[2];

  v4 = (int *)type metadata accessor for TFSymbol(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10004E4D0(*(_BYTE *)a1 & 1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  v9 = v8;
  v10 = static Font.title3.getter(v7);
  static SymbolRenderingMode.hierarchical.getter(v10);
  *(_QWORD *)v6 = v7;
  *((_QWORD *)v6 + 1) = v9;
  *((_QWORD *)v6 + 2) = 0;
  *((_QWORD *)v6 + 3) = 0;
  v6[32] = 0;
  *((_QWORD *)v6 + 5) = v10;
  *((_QWORD *)v6 + 6) = 0;
  v6[v4[10]] = 1;
  v6[v4[11]] = 1;
  v11 = &v6[v4[12]];
  *(_QWORD *)v11 = swift_getKeyPath(&unk_100075348);
  v11[8] = 0;
  v12 = &v6[v4[13]];
  *(_QWORD *)v12 = swift_getKeyPath(&unk_100074C20);
  v12[8] = 0;
  sub_100008F30((uint64_t)v6, a2, type metadata accessor for TFSymbol);
  v13 = (int *)sub_10000498C(&qword_1000999A0);
  v14 = a2 + v13[9];
  v20 = 0;
  State.init(wrappedValue:)(v21, &v20, &type metadata for Bool);
  v15 = v21[1];
  *(_BYTE *)v14 = v21[0];
  *(_QWORD *)(v14 + 8) = v15;
  v16 = a2 + v13[10];
  *(_QWORD *)v16 = swift_getKeyPath(&unk_100074C50);
  *(_BYTE *)(v16 + 8) = 0;
  v17 = a2 + v13[11];
  result = swift_getKeyPath(&unk_100074BF8);
  *(_QWORD *)v17 = result;
  *(_BYTE *)(v17 + 8) = 0;
  return result;
}

uint64_t sub_10003FAEC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_100029A44();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10003FB18@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_100029EEC();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10003FB44@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_10002A024();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10003FB70@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_10002A030();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10003FB9C(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  uint64_t v13;

  v7 = type metadata accessor for UITextFormattingViewController.ChangeValue(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (uint64_t *)((char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (*a1)
    v11 = *a5;
  else
    v11 = (void *)UITextFormattingViewControllerTextAlignmentNatural;
  *v10 = v11;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for UITextFormattingViewController.ChangeValue.textAlignment(_:), v7);
  sub_100029A50((uint64_t)v10);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_10003FC68@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, _BYTE *a3@<X8>)
{
  void (*v5)(_BYTE *, _QWORD);
  _BYTE *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[32];
  uint64_t v12;

  if (*(_QWORD *)(a1 + 8))
  {
    v12 = *(_QWORD *)(a1 + 8);
    swift_retain();
    v5 = (void (*)(_BYTE *, _QWORD))swift_readAtKeyPath(v11, &v12, a2);
    *a3 = *v6;
    v5(v11, 0);
    return swift_release();
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 16);
    v9 = type metadata accessor for TextFormattingState(0);
    v10 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    result = EnvironmentObject.error()(0, v8, v9, v10);
    __break(1u);
  }
  return result;
}

uint64_t sub_10003FD10(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  if (*(_QWORD *)(a4 + 8))
  {
    v6 = *a1;
    v12 = *(_QWORD *)(a4 + 8);
    v11 = v6;
    swift_retain();
    swift_setAtReferenceWritableKeyPath(&v12, a5, &v11);
    return swift_release();
  }
  else
  {
    v8 = *(_QWORD *)(a4 + 16);
    v9 = type metadata accessor for TextFormattingState(0);
    v10 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    result = EnvironmentObject.error()(0, v8, v9, v10);
    __break(1u);
  }
  return result;
}

_QWORD *sub_10003FDAC@<X0>(uint64_t a1@<X8>)
{
  return sub_10003DBB4(a1);
}

uint64_t sub_10003FDE4@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;

  v42 = a3;
  v43 = a4;
  v41 = a2;
  v45 = a6;
  v8 = (int *)type metadata accessor for TFToggle(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = 0;
  v12 = 0;
  v44 = a1;
  if ((a1 & 1) != 0)
  {
    if (qword_100098188 != -1)
      swift_once(&qword_100098188, sub_100023EF4);
    v11 = qword_10009B500;
    v12 = swift_bridgeObjectRetain(*(_QWORD *)algn_10009B508);
  }
  v40 = v12;
  v13 = type metadata accessor for MainActor(0);
  v14 = static MainActor.shared.getter(v13);
  v15 = swift_allocObject(&unk_10008FC10, 32, 7);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = &protocol witness table for MainActor;
  v16 = v41;
  swift_retain();
  v17 = v43;
  v18 = sub_10001D970(v43, a5, BYTE1(a5) & 1);
  v19 = static MainActor.shared.getter(v18);
  v20 = swift_allocObject(&unk_10008FC38, 58, 7);
  *(_QWORD *)(v20 + 16) = v19;
  *(_QWORD *)(v20 + 24) = &protocol witness table for MainActor;
  v21 = v42;
  *(_QWORD *)(v20 + 32) = v16;
  *(_QWORD *)(v20 + 40) = v21;
  *(_QWORD *)(v20 + 48) = v17;
  *(_BYTE *)(v20 + 56) = a5;
  *(_BYTE *)(v20 + 57) = BYTE1(a5) & 1;
  v22 = Binding.init(get:set:)(&v46, sub_100050BAC, v15, sub_100050BCC, v20, &type metadata for Bool);
  v23 = v46;
  v24 = v47;
  LOBYTE(v15) = v48;
  static SymbolRenderingMode.hierarchical.getter(v22);
  *(_OWORD *)v10 = xmmword_100074B10;
  *((_QWORD *)v10 + 2) = 0;
  *((_QWORD *)v10 + 3) = 0;
  v25 = (uint64_t *)&v10[v8[7]];
  v26 = v40;
  *v25 = v11;
  v25[1] = v26;
  v10[v8[8]] = v44 & 1;
  v27 = &v10[v8[9]];
  *(_QWORD *)v27 = v23;
  *((_QWORD *)v27 + 1) = v24;
  v27[16] = v15;
  v28 = &v10[v8[10]];
  *(_QWORD *)v28 = swift_getKeyPath(&unk_100074BF8);
  v28[8] = 0;
  if (qword_100098188 != -1)
    swift_once(&qword_100098188, sub_100023EF4);
  v29 = *(_QWORD *)algn_10009B508;
  v46 = qword_10009B500;
  v47 = *(_QWORD *)algn_10009B508;
  v30 = sub_100008EDC();
  swift_bridgeObjectRetain(v29);
  v31 = Text.init<A>(_:)(&v46, &type metadata for String, v30);
  v33 = v32;
  v35 = v34;
  v37 = v36 & 1;
  v38 = sub_100007D90(&qword_100099818, type metadata accessor for TFToggle, (uint64_t)&unk_100075F10);
  View.accessibilityLabel(_:)(v31, v33, v37, v35, v8, v38);
  sub_100008F20(v31, v33, v37);
  swift_bridgeObjectRelease(v35);
  return sub_100009250((uint64_t)v10, type metadata accessor for TFToggle);
}

uint64_t sub_1000400B8@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;

  v42 = a3;
  v43 = a4;
  v41 = a2;
  v45 = a6;
  v8 = (int *)type metadata accessor for TFToggle(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = 0;
  v12 = 0;
  v44 = a1;
  if ((a1 & 1) != 0)
  {
    if (qword_100098180 != -1)
      swift_once(&qword_100098180, sub_100023DE8);
    v11 = qword_10009B4F0;
    v12 = swift_bridgeObjectRetain(*(_QWORD *)algn_10009B4F8);
  }
  v40 = v12;
  v13 = type metadata accessor for MainActor(0);
  v14 = static MainActor.shared.getter(v13);
  v15 = swift_allocObject(&unk_10008FBC0, 32, 7);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = &protocol witness table for MainActor;
  v16 = v41;
  swift_retain();
  v17 = v43;
  v18 = sub_10001D970(v43, a5, BYTE1(a5) & 1);
  v19 = static MainActor.shared.getter(v18);
  v20 = swift_allocObject(&unk_10008FBE8, 58, 7);
  *(_QWORD *)(v20 + 16) = v19;
  *(_QWORD *)(v20 + 24) = &protocol witness table for MainActor;
  v21 = v42;
  *(_QWORD *)(v20 + 32) = v16;
  *(_QWORD *)(v20 + 40) = v21;
  *(_QWORD *)(v20 + 48) = v17;
  *(_BYTE *)(v20 + 56) = a5;
  *(_BYTE *)(v20 + 57) = BYTE1(a5) & 1;
  v22 = Binding.init(get:set:)(&v46, sub_100050BAC, v15, sub_100050BBC, v20, &type metadata for Bool);
  v23 = v46;
  v24 = v47;
  LOBYTE(v15) = v48;
  static SymbolRenderingMode.hierarchical.getter(v22);
  *(_OWORD *)v10 = xmmword_100074B20;
  *((_QWORD *)v10 + 2) = 0;
  *((_QWORD *)v10 + 3) = 0;
  v25 = (uint64_t *)&v10[v8[7]];
  v26 = v40;
  *v25 = v11;
  v25[1] = v26;
  v10[v8[8]] = v44 & 1;
  v27 = &v10[v8[9]];
  *(_QWORD *)v27 = v23;
  *((_QWORD *)v27 + 1) = v24;
  v27[16] = v15;
  v28 = &v10[v8[10]];
  *(_QWORD *)v28 = swift_getKeyPath(&unk_100074BF8);
  v28[8] = 0;
  if (qword_100098180 != -1)
    swift_once(&qword_100098180, sub_100023DE8);
  v29 = *(_QWORD *)algn_10009B4F8;
  v46 = qword_10009B4F0;
  v47 = *(_QWORD *)algn_10009B4F8;
  v30 = sub_100008EDC();
  swift_bridgeObjectRetain(v29);
  v31 = Text.init<A>(_:)(&v46, &type metadata for String, v30);
  v33 = v32;
  v35 = v34;
  v37 = v36 & 1;
  v38 = sub_100007D90(&qword_100099818, type metadata accessor for TFToggle, (uint64_t)&unk_100075F10);
  View.accessibilityLabel(_:)(v31, v33, v37, v35, v8, v38);
  sub_100008F20(v31, v33, v37);
  swift_bridgeObjectRelease(v35);
  return sub_100009250((uint64_t)v10, type metadata accessor for TFToggle);
}

uint64_t sub_10004038C@<X0>(uint64_t a1@<X8>)
{
  return sub_100040398(a1, (__n128)xmmword_100074B20);
}

uint64_t sub_100040398@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  int *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  __n128 v16;
  char v17;
  _QWORD v18[2];

  v16 = a2;
  v3 = (int *)type metadata accessor for TFSymbol(0);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = static Font.title3.getter(v4);
  static SymbolRenderingMode.hierarchical.getter();
  *(__n128 *)v6 = v16;
  *((_QWORD *)v6 + 2) = 0;
  *((_QWORD *)v6 + 3) = 0;
  v6[32] = 0;
  *((_QWORD *)v6 + 5) = v7;
  *((_QWORD *)v6 + 6) = 0;
  v6[v3[10]] = 1;
  v6[v3[11]] = 1;
  v8 = &v6[v3[12]];
  *(_QWORD *)v8 = swift_getKeyPath(&unk_100075348);
  v8[8] = 0;
  v9 = &v6[v3[13]];
  *(_QWORD *)v9 = swift_getKeyPath(&unk_100074C20);
  v9[8] = 0;
  sub_100008F30((uint64_t)v6, a1, type metadata accessor for TFSymbol);
  v10 = (int *)sub_10000498C(&qword_1000999A0);
  v11 = a1 + v10[9];
  v17 = 0;
  State.init(wrappedValue:)(v18, &v17, &type metadata for Bool);
  v12 = v18[1];
  *(_BYTE *)v11 = v18[0];
  *(_QWORD *)(v11 + 8) = v12;
  v13 = a1 + v10[10];
  *(_QWORD *)v13 = swift_getKeyPath(&unk_100074C50);
  *(_BYTE *)(v13 + 8) = 0;
  v14 = a1 + v10[11];
  result = swift_getKeyPath(&unk_100074BF8);
  *(_QWORD *)v14 = result;
  *(_BYTE *)(v14 + 8) = 0;
  return result;
}

uint64_t sub_10004050C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;

  if (a4)
  {
    swift_retain();
    sub_10002BC80(a8 & 1);
    return swift_release();
  }
  else
  {
    v11 = type metadata accessor for TextFormattingState(0);
    v12 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    result = EnvironmentObject.error()(0, a5, v11, v12);
    __break(1u);
  }
  return result;
}

_QWORD *sub_100040588@<X0>(uint64_t a1@<X8>)
{
  return sub_100045A2C((uint64_t)sub_100050B74, (uint64_t)sub_10004038C, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))sub_10003FDE4, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000400B8, a1);
}

uint64_t sub_1000405AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __int16 a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE v51[16];
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;

  v50 = a5;
  v9 = sub_10000498C(&qword_100099E40);
  v49 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10000498C(&qword_100099E48);
  v47 = *(_QWORD *)(v12 - 8);
  v48 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (int *)sub_10000498C(&qword_100099E50);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = &v18[*(int *)(v16 + 40)];
  v20 = type metadata accessor for HoverEffect(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
  *(_QWORD *)v18 = 0;
  *((_WORD *)v18 + 4) = 257;
  v46 = &v18[v15[11]];
  v52 = a1;
  v53 = a2;
  v54 = a3;
  v55 = a4 & 0x1FF;
  v21 = sub_10000498C(&qword_1000999A0);
  v22 = sub_10000498C(&qword_100099D38);
  v23 = sub_10000966C(&qword_1000999B0, &qword_1000999A0, (uint64_t)&unk_100075E88);
  v24 = sub_10004F4FC(&qword_100099D50, &qword_100099D38);
  Menu.init(content:label:)(sub_100050C0C, v51, sub_100040B04, 0, v21, v22, v23, v24);
  v59 = 0;
  State.init(wrappedValue:)(&v56, &v59, &type metadata for Bool);
  v25 = v56;
  v26 = v57;
  LOBYTE(v56) = 0;
  LOBYTE(v57) = v25;
  v58 = v26;
  v27 = sub_10000966C(&qword_100099E58, &qword_100099E40, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
  v28 = sub_10004EC30();
  View.menuStyle<A>(_:)(&v56, v9, &type metadata for TFMenuStyle, v27, v28);
  swift_release();
  (*(void (**)(char *, uint64_t))(v49 + 8))(v11, v9);
  (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v46, v14, v48);
  v29 = &v18[v15[12]];
  *(_QWORD *)v29 = swift_getKeyPath(&unk_100074C50);
  v29[8] = 0;
  v30 = &v18[v15[13]];
  *(_QWORD *)v30 = swift_getKeyPath(&unk_100074BF8);
  v30[8] = 0;
  v31 = &v18[v15[14]];
  *(_QWORD *)v31 = swift_getKeyPath(&unk_1000752D8);
  v31[8] = 0;
  v32 = &v18[v15[15]];
  v59 = 0;
  State.init(wrappedValue:)(&v56, &v59, &type metadata for Bool);
  v33 = v57;
  *v32 = v56;
  *((_QWORD *)v32 + 1) = v33;
  if (qword_1000981E0 != -1)
    swift_once(&qword_1000981E0, sub_100024A78);
  v34 = *(_QWORD *)algn_10009B5B8;
  v56 = qword_10009B5B0;
  v57 = *(_QWORD *)algn_10009B5B8;
  v35 = sub_100008EDC();
  swift_bridgeObjectRetain(v34);
  v36 = Text.init<A>(_:)(&v56, &type metadata for String, v35);
  v38 = v37;
  v40 = v39;
  v42 = v41 & 1;
  v43 = sub_10000966C(&qword_100099E60, &qword_100099E50, (uint64_t)&unk_100075FB0);
  View.accessibilityLabel(_:)(v36, v38, v42, v40, v15, v43);
  sub_100008F20(v36, v38, v42);
  swift_bridgeObjectRelease(v40);
  return sub_1000092D0((uint64_t)v18, &qword_100099E50);
}

uint64_t sub_10004098C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;

  if (qword_100098220 != -1)
    swift_once(&qword_100098220, sub_10002DF28);
  v8 = qword_10009B610;
  v17 = qword_10009B610;
  KeyPath = swift_getKeyPath(&unk_1000757A0);
  v10 = swift_allocObject(&unk_10008FC60, 42, 7);
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  *(_QWORD *)(v10 + 32) = a3;
  *(_BYTE *)(v10 + 40) = a4;
  *(_BYTE *)(v10 + 41) = BYTE1(a4) & 1;
  swift_retain();
  swift_bridgeObjectRetain(v8);
  sub_10001D970(a3, a4, BYTE1(a4) & 1);
  v11 = sub_10000498C(&qword_100099D68);
  v12 = sub_10000498C(&qword_1000999C8);
  v13 = sub_10000966C(&qword_100099D70, &qword_100099D68, (uint64_t)&protocol conformance descriptor for [A]);
  v14 = sub_10001C9B4();
  v15 = sub_10000966C(&qword_1000999C0, &qword_1000999C8, (uint64_t)&protocol conformance descriptor for Toggle<A>);
  return ForEach<>.init(_:id:content:)(&v17, KeyPath, sub_100050C1C, v10, v11, v12, v13, v14, v15);
}

uint64_t sub_100040B04@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  char v16;
  _QWORD v17[2];

  v2 = (int *)type metadata accessor for TFSymbol(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = static Font.title3.getter(v3);
  static SymbolRenderingMode.hierarchical.getter(v6);
  *(_QWORD *)v5 = 0xD000000000000021;
  *((_QWORD *)v5 + 1) = 0x8000000100078110;
  *((_QWORD *)v5 + 2) = 0;
  *((_QWORD *)v5 + 3) = 0;
  v5[32] = 0;
  *((_QWORD *)v5 + 5) = v6;
  *((_QWORD *)v5 + 6) = 0;
  v5[v2[10]] = 1;
  v5[v2[11]] = 1;
  v7 = &v5[v2[12]];
  *(_QWORD *)v7 = swift_getKeyPath(&unk_100075348);
  v7[8] = 0;
  v8 = &v5[v2[13]];
  *(_QWORD *)v8 = swift_getKeyPath(&unk_100074C20);
  v8[8] = 0;
  sub_100008F30((uint64_t)v5, a1, type metadata accessor for TFSymbol);
  v9 = (int *)sub_10000498C(&qword_1000999A0);
  v10 = a1 + v9[9];
  v16 = 0;
  State.init(wrappedValue:)(v17, &v16, &type metadata for Bool);
  v11 = v17[1];
  *(_BYTE *)v10 = v17[0];
  *(_QWORD *)(v10 + 8) = v11;
  v12 = a1 + v9[10];
  *(_QWORD *)v12 = swift_getKeyPath(&unk_100074C50);
  *(_BYTE *)(v12 + 8) = 0;
  v13 = a1 + v9[11];
  result = swift_getKeyPath(&unk_100074BF8);
  *(_QWORD *)v13 = result;
  *(_BYTE *)(v13 + 8) = 0;
  return result;
}

uint64_t sub_100040C88@<X0>(double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  Swift::Double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  Class isa;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 v46;

  v43 = a6;
  v11 = (a5 >> 8) & 1;
  v12 = sub_10000498C(&qword_1000999C8);
  v41 = *(_QWORD *)(v12 - 8);
  v42 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *a1;
  type metadata accessor for MainActor(0);
  swift_retain();
  v16 = sub_10001D970(a4, a5, v11);
  v17 = static MainActor.shared.getter(v16);
  v18 = swift_allocObject(&unk_10008FC88, 72, 7);
  *(_QWORD *)(v18 + 16) = v17;
  *(_QWORD *)(v18 + 24) = &protocol witness table for MainActor;
  *(_QWORD *)(v18 + 32) = a2;
  *(_QWORD *)(v18 + 40) = a3;
  *(_QWORD *)(v18 + 48) = a4;
  *(_BYTE *)(v18 + 56) = a5;
  *(_BYTE *)(v18 + 57) = v11;
  *(Swift::Double *)(v18 + 64) = v15;
  swift_retain();
  v19 = sub_10001D970(a4, a5, v11);
  v20 = static MainActor.shared.getter(v19);
  v21 = swift_allocObject(&unk_10008FCB0, 72, 7);
  *(_QWORD *)(v21 + 16) = v20;
  *(_QWORD *)(v21 + 24) = &protocol witness table for MainActor;
  *(_QWORD *)(v21 + 32) = a2;
  *(_QWORD *)(v21 + 40) = a3;
  *(_QWORD *)(v21 + 48) = a4;
  *(_BYTE *)(v21 + 56) = a5;
  *(_BYTE *)(v21 + 57) = v11;
  *(Swift::Double *)(v21 + 64) = v15;
  Binding.init(get:set:)(&v44, sub_100050C44, v18, sub_100050C74, v21, &type metadata for Bool);
  v22 = v44;
  v23 = v45;
  v24 = v46;
  if (qword_100098228 != -1)
    swift_once(&qword_100098228, sub_10002DF70);
  v25 = (void *)qword_100099300;
  sub_1000096AC(0, &qword_100099698, NSNumber_ptr);
  isa = NSNumber.init(floatLiteral:)(v15).super.super.isa;
  v27 = objc_msgSend(v25, "stringFromNumber:", isa);

  if (v27)
  {
    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
    v30 = v29;

  }
  else
  {
    v31 = sub_10000498C(&qword_1000996A0);
    v32 = swift_allocObject(v31, 72, 7);
    *(_OWORD *)(v32 + 16) = xmmword_100074A20;
    *(_QWORD *)(v32 + 56) = &type metadata for CGFloat;
    *(_QWORD *)(v32 + 64) = sub_100031224();
    *(Swift::Double *)(v32 + 32) = v15;
    v28 = String.init(format:_:)(808347173, 0xE400000000000000, v32);
    v30 = v33;
  }
  if (qword_100098128 != -1)
    swift_once(&qword_100098128, sub_100023268);
  v34 = qword_10009B440;
  v35 = *(_QWORD *)algn_10009B448;
  v36 = sub_10000498C(&qword_1000996A0);
  v37 = swift_allocObject(v36, 72, 7);
  *(_OWORD *)(v37 + 16) = xmmword_100074A20;
  *(_QWORD *)(v37 + 56) = &type metadata for String;
  *(_QWORD *)(v37 + 64) = sub_100031268();
  *(_QWORD *)(v37 + 32) = v28;
  *(_QWORD *)(v37 + 40) = v30;
  v44 = String.init(format:_:)(v34, v35, v37);
  v45 = v38;
  v39 = sub_100008EDC();
  Toggle<>.init<A>(_:isOn:)(&v44, v22, v23, v24, &type metadata for String, v39);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v41 + 32))(v43, v14, v42);
}

uint64_t sub_100040FBC@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, BOOL *a3@<X8>, double a4@<D0>)
{
  double v6;
  char v7;
  char v8;
  uint64_t result;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;

  if (a1)
  {
    swift_retain();
    v6 = COERCE_DOUBLE(sub_10002A830());
    v8 = v7;
    result = swift_release();
    v10 = v6 == a4;
    if ((v8 & 1) != 0)
      v10 = 0;
    *a3 = v10;
  }
  else
  {
    v12 = type metadata accessor for TextFormattingState(0);
    v13 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    result = EnvironmentObject.error()(0, a2, v12, v13);
    __break(1u);
  }
  return result;
}

_BYTE *sub_100041070(_BYTE *result, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;

  if (*result == 1)
  {
    if (a5)
    {
      swift_retain();
      sub_10002AA48(*(uint64_t *)&a2, 0);
      return (_BYTE *)swift_release();
    }
    else
    {
      v8 = type metadata accessor for TextFormattingState(0);
      v9 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
      result = (_BYTE *)EnvironmentObject.error()(0, a6, v8, v9);
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_100041108(uint64_t a1, uint64_t a2)
{
  return sub_100041114(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_1000405AC);
}

uint64_t sub_100041114(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v3;

  return a3(*(_QWORD *)v3, *(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16), *(unsigned __int8 *)(v3 + 24) | (*(unsigned __int8 *)(v3 + 25) << 8));
}

_QWORD *sub_100041138@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __int16 a4@<W3>, uint64_t a5@<X8>)
{
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *result;
  uint64_t v18;
  char v19;
  _QWORD v20[3];

  v10 = (int *)sub_10000498C(&qword_100099E68);
  v11 = a5 + v10[10];
  v12 = type metadata accessor for HoverEffect(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  *(_QWORD *)a5 = 0;
  *(_WORD *)(a5 + 8) = 257;
  sub_10004126C(a1, a2, a3, a4 & 0x1FF, a5 + v10[11]);
  v13 = a5 + v10[12];
  *(_QWORD *)v13 = swift_getKeyPath(&unk_100074C50);
  *(_BYTE *)(v13 + 8) = 0;
  v14 = a5 + v10[13];
  *(_QWORD *)v14 = swift_getKeyPath(&unk_100074BF8);
  *(_BYTE *)(v14 + 8) = 0;
  v15 = a5 + v10[14];
  *(_QWORD *)v15 = swift_getKeyPath(&unk_1000752D8);
  *(_BYTE *)(v15 + 8) = 0;
  v16 = a5 + v10[15];
  v19 = 0;
  result = State.init(wrappedValue:)(v20, &v19, &type metadata for Bool);
  v18 = v20[1];
  *(_BYTE *)v16 = v20[0];
  *(_QWORD *)(v16 + 8) = v18;
  return result;
}

uint64_t sub_10004126C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t OpaqueTypeConformance2;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  ValueMetadata *v50;
  unint64_t v51;
  unint64_t v52;

  v44 = a2;
  v47 = a5;
  v8 = a4 >> 8;
  v9 = (a4 >> 8) & 1;
  v48 = sub_10000498C(&qword_100099E70);
  v43 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v42 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_10000498C(&qword_100099E78);
  __chkstk_darwin(v45);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_10000498C(&qword_100099E80);
  v13 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D970(a3, a4, v9);
  v16 = sub_1000119BC(a3, a4 | ((v8 & 1) << 8));
  LOBYTE(v8) = v17;
  sub_10001D9CC(a3, a4, v9);
  if ((v8 & 1) != 0 || (unint64_t)(v16 - 1) > 1)
  {
    if (qword_100098210 != -1)
      swift_once(&qword_100098210, sub_10002D7C4);
    v25 = qword_10009B600;
    v49 = qword_10009B600;
    v26 = swift_allocObject(&unk_10008FCD8, 42, 7);
    v27 = v44;
    *(_QWORD *)(v26 + 16) = a1;
    *(_QWORD *)(v26 + 24) = v27;
    *(_QWORD *)(v26 + 32) = a3;
    *(_BYTE *)(v26 + 40) = a4;
    *(_BYTE *)(v26 + 41) = v9;
    sub_10001D970(a3, a4, v9);
    swift_retain();
    swift_bridgeObjectRetain(v25);
    v28 = sub_10000498C(&qword_100099680);
    v29 = sub_10000498C(&qword_1000997D8);
    v30 = sub_10000966C(&qword_100099E88, &qword_100099680, (uint64_t)&protocol conformance descriptor for [A]);
    v31 = sub_10004EB94();
    v32 = sub_100050CAC();
    v33 = v42;
    ForEach<>.init(_:content:)(&v49, sub_100050CA0, v26, v28, &type metadata for String, v29, v30, v31, v32);
    v34 = v43;
    v35 = v48;
    (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v12, v33, v48);
    swift_storeEnumTagMultiPayload(v12, v45, 1);
    v36 = sub_100004660(&qword_100099E98);
    v37 = sub_100050CF0();
    v38 = sub_10004EC30();
    v49 = v36;
    v50 = &type metadata for TFMenuStyle;
    v51 = v37;
    v52 = v38;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v49, &opaque type descriptor for <<opaque return type of View.menuStyle<A>(_:)>>, 1);
    v40 = sub_100051940(&qword_100099EB8, &qword_100099E70, (void (*)(void))sub_10004EB94, (uint64_t)&protocol conformance descriptor for <> ForEach<A, B, C>);
    _ConditionalContent<>.init(storage:)(v12, v46, v35, OpaqueTypeConformance2, v40);
    return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v33, v35);
  }
  else
  {
    sub_10004166C(a1, v44, a3, a4 & 0x1FF);
    v18 = v46;
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v12, v15, v46);
    swift_storeEnumTagMultiPayload(v12, v45, 0);
    v19 = sub_100004660(&qword_100099E98);
    v20 = sub_100050CF0();
    v21 = sub_10004EC30();
    v49 = v19;
    v50 = &type metadata for TFMenuStyle;
    v51 = v20;
    v52 = v21;
    v22 = swift_getOpaqueTypeConformance2(&v49, &opaque type descriptor for <<opaque return type of View.menuStyle<A>(_:)>>, 1);
    v23 = sub_100051940(&qword_100099EB8, &qword_100099E70, (void (*)(void))sub_10004EB94, (uint64_t)&protocol conformance descriptor for <> ForEach<A, B, C>);
    _ConditionalContent<>.init(storage:)(v12, v18, v48, v22, v23);
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v18);
  }
}

uint64_t sub_10004166C(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _BYTE v34[16];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;
  _BYTE v39[16];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE v47[9];

  v8 = sub_10000498C(&qword_100099EB0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v34[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = sub_10000498C(&qword_100099E98);
  __chkstk_darwin(v12);
  v14 = &v34[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v40 = a1;
  v41 = a2;
  v42 = a3;
  v43 = a4 & 0x1FF;
  v35 = a1;
  v36 = a2;
  v37 = a3;
  v38 = a4 & 0x1FF;
  v15 = sub_10000498C(&qword_1000999A0);
  v16 = sub_10000498C(&qword_100099EC0);
  v17 = sub_10000966C(&qword_1000999B0, &qword_1000999A0, (uint64_t)&unk_100075E88);
  v18 = sub_10000966C(&qword_100099EC8, &qword_100099EC0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  Menu.init(content:label:)(sub_100050D8C, v39, sub_100050D98, v34, v15, v16, v17, v18);
  if (qword_1000981E8 != -1)
    swift_once(&qword_1000981E8, sub_100024B84);
  v19 = *(_QWORD *)algn_10009B5C8;
  v44 = qword_10009B5C0;
  v45 = *(_QWORD *)algn_10009B5C8;
  v20 = sub_100008EDC();
  swift_bridgeObjectRetain(v19);
  v21 = Text.init<A>(_:)(&v44, &type metadata for String, v20);
  v23 = v22;
  v25 = v24;
  v27 = v26 & 1;
  v28 = sub_10000966C(&qword_100099EA8, &qword_100099EB0, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
  View.accessibilityLabel(_:)(v21, v23, v27, v25, v8, v28);
  sub_100008F20(v21, v23, v27);
  swift_bridgeObjectRelease(v25);
  (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
  v47[0] = 0;
  State.init(wrappedValue:)(&v44, v47, &type metadata for Bool);
  v29 = v44;
  v30 = v45;
  LOBYTE(v44) = 0;
  LOBYTE(v45) = v29;
  v46 = v30;
  v31 = sub_100050CF0();
  v32 = sub_10004EC30();
  View.menuStyle<A>(_:)(&v44, v12, &type metadata for TFMenuStyle, v31, v32);
  swift_release();
  return sub_1000092D0((uint64_t)v14, &qword_100099E98);
}

uint64_t sub_10004192C@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unsigned int v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v19;
  uint64_t v21[2];
  unsigned __int8 v22;

  v19 = a5 >> 8;
  v10 = (a5 >> 8) & 1;
  v11 = *a1;
  type metadata accessor for MainActor(0);
  swift_retain();
  v12 = sub_10001D970(a4, a5, v10);
  v13 = static MainActor.shared.getter(v12);
  v14 = swift_allocObject(&unk_10008FDC8, 59, 7);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = &protocol witness table for MainActor;
  *(_QWORD *)(v14 + 32) = a2;
  *(_QWORD *)(v14 + 40) = a3;
  *(_QWORD *)(v14 + 48) = a4;
  *(_BYTE *)(v14 + 56) = a5;
  *(_BYTE *)(v14 + 57) = v10;
  *(_BYTE *)(v14 + 58) = v11;
  swift_retain();
  v15 = sub_10001D970(a4, a5, v10);
  v16 = static MainActor.shared.getter(v15);
  v17 = swift_allocObject(&unk_10008FDF0, 59, 7);
  *(_QWORD *)(v17 + 16) = v16;
  *(_QWORD *)(v17 + 24) = &protocol witness table for MainActor;
  *(_QWORD *)(v17 + 32) = a2;
  *(_QWORD *)(v17 + 40) = a3;
  *(_QWORD *)(v17 + 48) = a4;
  *(_BYTE *)(v17 + 56) = a5;
  *(_BYTE *)(v17 + 57) = v10;
  *(_BYTE *)(v17 + 58) = v11;
  Binding.init(get:set:)(v21, sub_100050E80, v14, sub_100050E8C, v17, &type metadata for Bool);
  sub_100041AB4(v11, 0, v21[0], v21[1], v22, a4, a6, a5 | ((v19 & 1) << 8));
  swift_release();
  return swift_release();
}

void sub_100041AB4(char a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X7>, uint64_t a7@<X8>, unsigned __int16 a8)
{
  int v13;
  int *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;

  v33 = a2;
  v34 = a5;
  v36 = a7;
  v13 = HIBYTE(a8) & 1;
  v14 = (int *)type metadata accessor for TFToggle(0);
  __chkstk_darwin(v14);
  v16 = (uint64_t *)((char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = sub_10000498C(&qword_1000997D8);
  __chkstk_darwin(v17);
  v35 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = 8 * a1;
  v20 = *(_QWORD *)&aListBullistDas[v19];
  v31 = *(_QWORD *)&aListBullistDas[v19 + 32];
  v32 = v20;
  sub_10001D970(a6, a8, v13);
  v21 = sub_1000119BC(a6, a8 | (v13 << 8));
  v23 = v22;
  sub_10001D9CC(a6, a8, v13);
  if ((v23 & 1) == 0 && (unint64_t)(v21 - 1) <= 1)
    __asm { BR              X10 }
  swift_retain();
  v24 = swift_retain();
  static SymbolRenderingMode.hierarchical.getter(v24);
  v25 = v31;
  *v16 = v32;
  v16[1] = v25;
  v16[2] = 0;
  v16[3] = 0;
  v26 = (_QWORD *)((char *)v16 + v14[7]);
  *v26 = 0;
  v26[1] = 0;
  *((_BYTE *)v16 + v14[8]) = v33 & 1;
  v27 = (char *)v16 + v14[9];
  *(_QWORD *)v27 = a3;
  *((_QWORD *)v27 + 1) = a4;
  v28 = v34 & 1;
  v27[16] = v34 & 1;
  v29 = (char *)v16 + v14[10];
  *(_QWORD *)v29 = swift_getKeyPath(&unk_100074BF8);
  v29[8] = 0;
  v37 = a3;
  v38 = a4;
  v39 = v28;
  v30 = sub_10000498C(&qword_100099EF0);
  Binding.wrappedValue.getter(&v40, v30);
  __asm { BR              X10 }
}

uint64_t sub_100041D3C()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (qword_100098158 != -1)
    swift_once(&qword_100098158, sub_10002389C);
  v4 = qword_10009B4A0;
  v3 = *(_QWORD *)algn_10009B4A8;
  swift_bridgeObjectRetain(*(_QWORD *)algn_10009B4A8);
  v5 = *(_QWORD *)(v2 - 120);
  sub_10003464C(v0, v4, v3, v5);
  swift_bridgeObjectRelease(v3);
  sub_100009250(v1, type metadata accessor for TFToggle);
  return sub_10000930C(v5, *(_QWORD *)(v2 - 112), &qword_1000997D8);
}

uint64_t sub_100041EDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[3];
  int v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;

  v10 = sub_10000498C(&qword_1000997D8);
  v11 = __chkstk_darwin(v10);
  v53 = (char *)v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v51 = (char *)v44 - v13;
  v52 = type metadata accessor for Divider(0);
  v48 = *(_QWORD *)(v52 - 8);
  v14 = __chkstk_darwin(v52);
  v50 = (char *)v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v47 = (char *)v44 - v16;
  v17 = sub_10000498C(&qword_100099ED0);
  v18 = __chkstk_darwin(v17);
  v54 = (char *)v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v57 = (char *)v44 - v20;
  v58 = sub_10000498C(&qword_100099E70);
  v55 = *(_QWORD *)(v58 - 8);
  v21 = __chkstk_darwin(v58);
  v56 = (char *)v44 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v24 = (char *)v44 - v23;
  if (qword_100098210 != -1)
    swift_once(&qword_100098210, sub_10002D7C4);
  v25 = qword_10009B600;
  v59 = qword_10009B600;
  v26 = swift_allocObject(&unk_10008FD00, 42, 7);
  *(_QWORD *)(v26 + 16) = a1;
  *(_QWORD *)(v26 + 24) = a2;
  v49 = a2;
  *(_QWORD *)(v26 + 32) = a3;
  *(_BYTE *)(v26 + 40) = a4;
  *(_BYTE *)(v26 + 41) = BYTE1(a4) & 1;
  swift_retain();
  swift_bridgeObjectRetain(v25);
  v46 = a3;
  v45 = a4;
  sub_10001D970(a3, a4, BYTE1(a4) & 1);
  v27 = sub_10000498C(&qword_100099680);
  v28 = sub_10000966C(&qword_100099E88, &qword_100099680, (uint64_t)&protocol conformance descriptor for [A]);
  v29 = sub_10004EB94();
  v30 = sub_100050CAC();
  ForEach<>.init(_:content:)(&v59, sub_100050E00, v26, v27, &type metadata for String, v10, v28, v29, v30);
  if (a1)
  {
    swift_retain();
    v31 = sub_10002A03C();
    swift_release();
    if (v31[2])
    {
      v44[2] = a5;
      swift_bridgeObjectRetain(v31);
      __asm { BR              X9 }
    }
    swift_bridgeObjectRelease(v31);
    v32 = sub_10000498C(&qword_100099ED8);
    v33 = (uint64_t)v57;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v57, 1, 1, v32);
    v34 = (uint64_t)v54;
    v36 = v55;
    v35 = v56;
    v37 = *(void (**)(char *, char *, uint64_t))(v55 + 16);
    v38 = v58;
    v37(v56, v24, v58);
    sub_10000928C(v33, v34, &qword_100099ED0);
    v37(a5, v35, v38);
    v39 = sub_10000498C(&qword_100099EE0);
    sub_10000928C(v34, (uint64_t)&a5[*(int *)(v39 + 48)], &qword_100099ED0);
    sub_1000092D0(v33, &qword_100099ED0);
    v40 = *(void (**)(char *, uint64_t))(v36 + 8);
    v40(v24, v38);
    sub_1000092D0(v34, &qword_100099ED0);
    return ((uint64_t (*)(char *, uint64_t))v40)(v35, v38);
  }
  else
  {
    v42 = type metadata accessor for TextFormattingState(0);
    v43 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    result = EnvironmentObject.error()(0, v49, v42, v43);
    __break(1u);
  }
  return result;
}

uint64_t sub_1000425C8@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unsigned int v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v19;
  uint64_t v21[2];
  unsigned __int8 v22;

  v19 = a5 >> 8;
  v10 = (a5 >> 8) & 1;
  v11 = *a1;
  type metadata accessor for MainActor(0);
  swift_retain();
  v12 = sub_10001D970(a4, a5, v10);
  v13 = static MainActor.shared.getter(v12);
  v14 = swift_allocObject(&unk_10008FD78, 59, 7);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = &protocol witness table for MainActor;
  *(_QWORD *)(v14 + 32) = a2;
  *(_QWORD *)(v14 + 40) = a3;
  *(_QWORD *)(v14 + 48) = a4;
  *(_BYTE *)(v14 + 56) = a5;
  *(_BYTE *)(v14 + 57) = v10;
  *(_BYTE *)(v14 + 58) = v11;
  swift_retain();
  v15 = sub_10001D970(a4, a5, v10);
  v16 = static MainActor.shared.getter(v15);
  v17 = swift_allocObject(&unk_10008FDA0, 59, 7);
  *(_QWORD *)(v17 + 16) = v16;
  *(_QWORD *)(v17 + 24) = &protocol witness table for MainActor;
  *(_QWORD *)(v17 + 32) = a2;
  *(_QWORD *)(v17 + 40) = a3;
  *(_QWORD *)(v17 + 48) = a4;
  *(_BYTE *)(v17 + 56) = a5;
  *(_BYTE *)(v17 + 57) = v10;
  *(_BYTE *)(v17 + 58) = v11;
  Binding.init(get:set:)(v21, sub_100050E80, v14, sub_100050E8C, v17, &type metadata for Bool);
  sub_100041AB4(v11, 1, v21[0], v21[1], v22, a4, a6, a5 | ((v19 & 1) << 8));
  swift_release();
  return swift_release();
}

uint64_t sub_100042750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  if (a4)
  {
    swift_retain();
    sub_10002A184((uint64_t)_swiftEmptyArrayStorage);
    return swift_release();
  }
  else
  {
    v7 = type metadata accessor for TextFormattingState(0);
    v8 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    result = EnvironmentObject.error()(0, a5, v7, v8);
    __break(1u);
  }
  return result;
}

uint64_t sub_1000427CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int *v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  _QWORD v28[2];

  v6 = (int *)type metadata accessor for TFSymbol(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_retain();
    v9 = sub_10002A03C();
    swift_release();
    if (v9[2])
    {
      v10 = *((char *)v9 + 32);
      v11 = swift_bridgeObjectRelease(v9);
      v12 = 8 * v10;
      v13 = *(_QWORD *)&aListBullistDas[8 * v10];
      v14 = *(_QWORD *)&aListBullistDas[v12 + 32];
    }
    else
    {
      v11 = swift_bridgeObjectRelease(v9);
      v14 = 0xEB0000000074656CLL;
      v13 = 0x6C75622E7473696CLL;
    }
    v15 = static Font.title3.getter(v11);
    static SymbolRenderingMode.hierarchical.getter(v15);
    *(_QWORD *)v8 = v13;
    *((_QWORD *)v8 + 1) = v14;
    *((_QWORD *)v8 + 2) = 0;
    *((_QWORD *)v8 + 3) = 0;
    v8[32] = 0;
    *((_QWORD *)v8 + 5) = v15;
    *((_QWORD *)v8 + 6) = 0;
    v8[v6[10]] = 1;
    v8[v6[11]] = 1;
    v16 = &v8[v6[12]];
    *(_QWORD *)v16 = swift_getKeyPath(&unk_100075348);
    v16[8] = 0;
    v17 = &v8[v6[13]];
    *(_QWORD *)v17 = swift_getKeyPath(&unk_100074C20);
    v17[8] = 0;
    sub_100008F30((uint64_t)v8, a3, type metadata accessor for TFSymbol);
    v18 = (int *)sub_10000498C(&qword_1000999A0);
    v19 = a3 + v18[9];
    v27 = 0;
    State.init(wrappedValue:)(v28, &v27, &type metadata for Bool);
    v20 = v28[1];
    *(_BYTE *)v19 = v28[0];
    *(_QWORD *)(v19 + 8) = v20;
    v21 = a3 + v18[10];
    *(_QWORD *)v21 = swift_getKeyPath(&unk_100074C50);
    *(_BYTE *)(v21 + 8) = 0;
    v22 = a3 + v18[11];
    result = swift_getKeyPath(&unk_100074BF8);
    *(_QWORD *)v22 = result;
    *(_BYTE *)(v22 + 8) = 0;
  }
  else
  {
    v24 = type metadata accessor for TextFormattingState(0);
    v25 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    result = EnvironmentObject.error()(0, a2, v24, v25);
    __break(1u);
  }
  return result;
}

uint64_t sub_1000429F4@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X6>, _BYTE *a4@<X8>)
{
  _QWORD *v6;
  char v7;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  if (a1)
  {
    swift_retain();
    v6 = sub_10002A03C();
    swift_release();
    v7 = sub_1000064BC(a3, (uint64_t)v6);
    result = swift_bridgeObjectRelease(v6);
    *a4 = v7 & 1;
  }
  else
  {
    v10 = type metadata accessor for TextFormattingState(0);
    v11 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    result = EnvironmentObject.error()(0, a2, v10, v11);
    __break(1u);
  }
  return result;
}

uint64_t sub_100042AA0(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a4)
  {
    if ((*a1 & 1) != 0)
    {
      v9 = sub_10000498C(&qword_100098F40);
      v10 = (_QWORD *)swift_allocObject(v9, 33, 7);
      *((_OWORD *)v10 + 1) = xmmword_100074A20;
      *((_BYTE *)v10 + 32) = a8;
    }
    else
    {
      v10 = _swiftEmptyArrayStorage;
    }
    swift_retain();
    sub_10002A184((uint64_t)v10);
    return swift_release();
  }
  else
  {
    v13 = type metadata accessor for TextFormattingState(0);
    v14 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    result = EnvironmentObject.error()(0, a5, v13, v14);
    __break(1u);
  }
  return result;
}

uint64_t sub_100042B64(uint64_t a1, uint64_t a2)
{
  return sub_100041114(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_100041138);
}

uint64_t sub_100042B70()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_100042B98 + 4 * byte_100074B6C[*v0]))();
}

void sub_100042B98(_QWORD *a1@<X8>)
{
  *a1 = 0x6E6568707968;
  a1[1] = 0xE600000000000000;
}

void sub_100042BB0(_QWORD *a1@<X8>)
{
  *a1 = 0x6C616D69636564;
  a1[1] = 0xE700000000000000;
}

void sub_100042BCC(_QWORD *a1@<X8>)
{
  *a1 = 0x726568746FLL;
  a1[1] = 0xE500000000000000;
}

uint64_t sub_100042BE4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  NSString v14;
  uint64_t KeyPath;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v1 = v0;
  v2 = sub_10000498C(&qword_100098F18);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v24 - v6;
  type metadata accessor for TFTextColorControl(0);
  sub_100011F08((uint64_t)v7);
  v8 = type metadata accessor for UserInterfaceSizeClass(0);
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) != 1)
  {
    sub_10000928C((uint64_t)v7, (uint64_t)v5, &qword_100098F18);
    if ((*(unsigned int (**)(char *, uint64_t))(v9 + 88))(v5, v8) == enum case for UserInterfaceSizeClass.compact(_:))
    {
      v10 = v1[4];
      v11 = *((_BYTE *)v1 + 40);
      sub_10001D97C(v10, v11);
      v12 = sub_1000117FC(v10, v11);
      sub_10001D9D8(v10, v11);
      v13 = *v1;
      if (*v1)
      {
        swift_retain();
        v14 = String._bridgeToObjectiveC()();
        KeyPath = swift_getKeyPath(&unk_100075290);
        swift_getKeyPath(&unk_1000752B8);
        static Published.subscript.getter(&v24, v13, KeyPath);
        swift_release();
        swift_release();
        if ((*(_BYTE *)(v13 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_isInPopoverPresentation) & 1) != 0)
          v16 = 0;
        else
          v16 = *(_BYTE *)(v13 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_hasParentViewController) ^ 1;
LABEL_12:
        sub_100066310((uint64_t)v14, v24, v25, v16 & 1, *(_BYTE *)(v13 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_useReducedMetrics), v12);
        swift_release();

        return sub_1000092D0((uint64_t)v7, &qword_100098F18);
      }
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v5, v8);
  }
  v17 = v1[4];
  v18 = *((_BYTE *)v1 + 40);
  sub_10001D97C(v17, v18);
  v12 = sub_1000117FC(v17, v18);
  sub_10001D9D8(v17, v18);
  v13 = *v1;
  if (*v1)
  {
    swift_retain();
    v14 = String._bridgeToObjectiveC()();
    v19 = swift_getKeyPath(&unk_100075290);
    swift_getKeyPath(&unk_1000752B8);
    static Published.subscript.getter(&v24, v13, v19);
    swift_release();
    swift_release();
    if ((*(_BYTE *)(v13 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_isInPopoverPresentation) & 1) != 0)
      v16 = 0;
    else
      v16 = *(_BYTE *)(v13 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_hasParentViewController) ^ 1;
    goto LABEL_12;
  }
LABEL_13:
  v21 = v1[1];
  v22 = type metadata accessor for TextFormattingState(0);
  v23 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
  result = EnvironmentObject.error()(0, v21, v22, v23);
  __break(1u);
  return result;
}

_QWORD *sub_100042F70@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  char v13;
  _QWORD v14[2];

  v2 = v1;
  v4 = (int *)sub_10000498C(&qword_100099EF8);
  v5 = a1 + v4[10];
  v6 = type metadata accessor for HoverEffect(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 257;
  sub_10004307C(v2, a1 + v4[11]);
  v7 = a1 + v4[12];
  *(_QWORD *)v7 = swift_getKeyPath(&unk_100074C50);
  *(_BYTE *)(v7 + 8) = 0;
  v8 = a1 + v4[13];
  *(_QWORD *)v8 = swift_getKeyPath(&unk_100074BF8);
  *(_BYTE *)(v8 + 8) = 0;
  v9 = a1 + v4[14];
  *(_QWORD *)v9 = swift_getKeyPath(&unk_1000752D8);
  *(_BYTE *)(v9 + 8) = 0;
  v10 = a1 + v4[15];
  v13 = 0;
  result = State.init(wrappedValue:)(v14, &v13, &type metadata for Bool);
  v12 = v14[1];
  *(_BYTE *)v10 = v14[0];
  *(_QWORD *)(v10 + 8) = v12;
  return result;
}

uint64_t sub_10004307C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  void (**v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t OpaqueTypeConformance2;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int *v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t (**v97)(double *);
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  char *v109;
  void (**v110)(char *, uint64_t);
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _WORD *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char v130;

  v125 = a2;
  v118 = sub_10000498C(&qword_100099F00);
  __chkstk_darwin(v118);
  v120 = (uint64_t)&v103 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = sub_10000498C(&qword_100099F08);
  __chkstk_darwin(v115);
  v114 = (_WORD *)((char *)&v103 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_10000498C(&qword_100099F10);
  __chkstk_darwin(v5);
  v117 = (char *)&v103 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = sub_10000498C(&qword_100099F18);
  v7 = __chkstk_darwin(v124);
  v116 = (uint64_t)&v103 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v119 = (uint64_t)&v103 - v9;
  v122 = sub_10000498C(&qword_100099F20);
  __chkstk_darwin(v122);
  v123 = (uint64_t)&v103 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = type metadata accessor for BorderlessButtonStyle(0);
  v106 = *(_QWORD *)(v113 - 8);
  __chkstk_darwin(v113);
  v105 = (char *)&v103 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for TFTextColorControl(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12);
  v108 = sub_10000498C(&qword_100099F28);
  v104 = *(_QWORD *)(v108 - 8);
  __chkstk_darwin(v108);
  v16 = (char *)&v103 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = sub_10000498C(&qword_100099F30);
  v110 = *(void (***)(char *, uint64_t))(v111 - 8);
  __chkstk_darwin(v111);
  v109 = (char *)&v103 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = sub_10000498C(&qword_100099F38);
  v18 = __chkstk_darwin(v121);
  v107 = (char *)&v103 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v112 = (uint64_t)&v103 - v20;
  v21 = *(_QWORD *)(a1 + 16);
  v22 = *(unsigned __int8 *)(a1 + 24);
  v23 = *(unsigned __int8 *)(a1 + 25);
  sub_10001D970(v21, v22, *(_BYTE *)(a1 + 25));
  v24 = sub_1000119BC(v21, v22 | (v23 << 8));
  v26 = v25;
  v27 = v21;
  v28 = (void (**)(char *, uint64_t))((char *)&v103 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v29 = a1;
  sub_10001D9CC(v27, v22, v23);
  sub_10000920C(a1, (uint64_t)v28, type metadata accessor for TFTextColorControl);
  v30 = *(unsigned __int8 *)(v13 + 80);
  v31 = (v30 + 16) & ~v30;
  v32 = v31 + v14;
  v33 = v30 | 7;
  if ((v26 & 1) != 0 || v24 > 2)
  {
    v113 = v31 + v14;
    v112 = v30 | 7;
    v63 = swift_allocObject(&unk_10008FE18, v32, v33);
    sub_100008F30((uint64_t)&v103 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v63 + v31, type metadata accessor for TFTextColorControl);
    v64 = (uint64_t)v114;
    *v114 = 0;
    v111 = v31;
    *(_BYTE *)(v64 + 2) = 1;
    v65 = (int *)v115;
    v66 = v64 + *(int *)(v115 + 44);
    v67 = *(_QWORD *)(v29 + 32);
    v110 = v28;
    v68 = *(_BYTE *)(v29 + 40);
    sub_10001D97C(v67, v68);
    sub_1000117FC(v67, v68);
    v69 = sub_10001D9D8(v67, v68);
    *(_QWORD *)v66 = static VerticalAlignment.center.getter(v69);
    *(_QWORD *)(v66 + 8) = 0x4028000000000000;
    *(_BYTE *)(v66 + 16) = 0;
    v70 = sub_10000498C(&qword_100099F40);
    sub_1000441D4((uint64_t *)v29, v66 + *(int *)(v70 + 44));
    v71 = (_QWORD *)(v64 + v65[12]);
    *v71 = sub_100050EF4;
    v71[1] = v63;
    v72 = v64 + v65[13];
    v129 = 0;
    v130 = 1;
    v73 = sub_10000498C(&qword_100099430);
    State.init(wrappedValue:)(&v126, &v129, v73);
    v74 = BYTE8(v126);
    v75 = v127;
    *(_QWORD *)v72 = v126;
    *(_BYTE *)(v72 + 8) = v74;
    *(_QWORD *)(v72 + 16) = v75;
    v76 = v65[14];
    v129 = 0;
    v77 = sub_10000498C(&qword_100099838);
    State.init(wrappedValue:)(&v126, &v129, v77);
    *(_OWORD *)(v64 + v76) = v126;
    v78 = v64 + v65[15];
    *(_QWORD *)v78 = swift_getKeyPath(&unk_100074BF8);
    *(_BYTE *)(v78 + 8) = 0;
    if (qword_1000980E0 != -1)
      swift_once(&qword_1000980E0, sub_1000228F4);
    v79 = *((_QWORD *)&xmmword_10009B3B0 + 1);
    v126 = xmmword_10009B3B0;
    v80 = sub_100008EDC();
    swift_bridgeObjectRetain(v79);
    v81 = Text.init<A>(_:)(&v126, &type metadata for String, v80);
    v83 = v82;
    v85 = v84;
    v87 = v86 & 1;
    v88 = sub_10000966C(&qword_100099F48, &qword_100099F08, (uint64_t)&unk_100075F60);
    v89 = (uint64_t)v117;
    View.accessibilityLabel(_:)(v81, v83, v87, v85, v65, v88);
    sub_100008F20(v81, v83, v87);
    swift_bridgeObjectRelease(v85);
    sub_1000092D0(v64, &qword_100099F08);
    v90 = (uint64_t)v110;
    sub_10000920C(v29, (uint64_t)v110, type metadata accessor for TFTextColorControl);
    v91 = swift_allocObject(&unk_10008FE40, v113, v112);
    sub_100008F30(v90, v91 + v111, type metadata accessor for TFTextColorControl);
    v92 = v120;
    sub_10000928C(v89, v120, &qword_100099F10);
    v93 = (_QWORD *)(v92 + *(int *)(v118 + 36));
    *v93 = 2003134806;
    v93[1] = 0xE400000000000000;
    v94 = swift_allocObject(&unk_10008FE68, 32, 7);
    *(_QWORD *)(v94 + 16) = sub_100050EFC;
    *(_QWORD *)(v94 + 24) = v91;
    v95 = v116;
    sub_10000928C(v92, v116, &qword_100099F00);
    v96 = v124;
    v97 = (uint64_t (**)(double *))(v95 + *(int *)(v124 + 36));
    *v97 = sub_100050F24;
    v97[1] = (uint64_t (*)(double *))v94;
    sub_1000092D0(v92, &qword_100099F00);
    sub_1000092D0(v89, &qword_100099F10);
    v57 = &qword_100099F18;
    v98 = v119;
    sub_10000930C(v95, v119, &qword_100099F18);
    v99 = v123;
    sub_10000928C(v98, v123, &qword_100099F18);
    swift_storeEnumTagMultiPayload(v99, v122, 1);
    v100 = sub_100050F2C();
    v101 = sub_100051034();
    _ConditionalContent<>.init(storage:)(v99, v121, v96, v100, v101);
    v62 = v98;
  }
  else
  {
    v34 = swift_allocObject(&unk_10008FE90, v32, v33);
    v35 = sub_100008F30((uint64_t)&v103 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v34 + v31, type metadata accessor for TFTextColorControl);
    __chkstk_darwin(v35);
    *(&v103 - 2) = a1;
    v36 = sub_10000498C(&qword_100099F88);
    v37 = sub_1000511F4();
    v38 = Button.init(action:label:)(sub_100050EF4, v34, sub_1000511EC, &v103 - 4, v36, v37);
    v39 = v105;
    BorderlessButtonStyle.init()(v38);
    v40 = sub_10000966C(&qword_100099F58, &qword_100099F28, (uint64_t)&protocol conformance descriptor for Button<A>);
    v41 = sub_100007D90(&qword_100099F60, (uint64_t (*)(uint64_t))&type metadata accessor for BorderlessButtonStyle, (uint64_t)&protocol conformance descriptor for BorderlessButtonStyle);
    v42 = v109;
    v43 = v108;
    v44 = v113;
    View.buttonStyle<A>(_:)(v39, v108, v113, v40, v41);
    (*(void (**)(char *, uint64_t))(v106 + 8))(v39, v44);
    (*(void (**)(char *, uint64_t))(v104 + 8))(v16, v43);
    if (qword_1000980E0 != -1)
      swift_once(&qword_1000980E0, sub_1000228F4);
    v45 = *((_QWORD *)&xmmword_10009B3B0 + 1);
    v126 = xmmword_10009B3B0;
    v46 = sub_100008EDC();
    swift_bridgeObjectRetain(v45);
    v47 = Text.init<A>(_:)(&v126, &type metadata for String, v46);
    v49 = v48;
    v51 = v50;
    *(_QWORD *)&v126 = v43;
    *((_QWORD *)&v126 + 1) = v44;
    v53 = v52 & 1;
    v127 = v40;
    v128 = v41;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v126, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    v55 = (uint64_t)v107;
    v56 = v111;
    View.accessibilityLabel(_:)(v47, v49, v53, v51, v111, OpaqueTypeConformance2);
    sub_100008F20(v47, v49, v53);
    swift_bridgeObjectRelease(v51);
    v110[1](v42, v56);
    v57 = &qword_100099F38;
    v58 = v112;
    sub_10000930C(v55, v112, &qword_100099F38);
    v59 = v123;
    sub_10000928C(v58, v123, &qword_100099F38);
    swift_storeEnumTagMultiPayload(v59, v122, 0);
    v60 = sub_100050F2C();
    v61 = sub_100051034();
    _ConditionalContent<>.init(storage:)(v59, v121, v124, v60, v61);
    v62 = v58;
  }
  return sub_1000092D0(v62, v57);
}

uint64_t sub_100043A48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t (**v37)(double *);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t KeyPath;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  double v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;

  v83 = a2;
  v71 = sub_10000498C(&qword_100099FE0);
  __chkstk_darwin(v71);
  v4 = (char *)&v65 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TFTextColorControl(0);
  v68 = *(_QWORD *)(v5 - 8);
  v69 = *(_QWORD *)(v68 + 64);
  __chkstk_darwin(v5);
  v67 = (uint64_t)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = sub_10000498C(&qword_10009A000);
  v7 = *(_QWORD *)(v66 - 8);
  __chkstk_darwin(v66);
  v9 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_10000498C(&qword_100099FF0);
  __chkstk_darwin(v65);
  v11 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = sub_10000498C(&qword_100099FD0);
  __chkstk_darwin(v70);
  v13 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = sub_10000498C(&qword_100099FC0);
  __chkstk_darwin(v73);
  v72 = (uint64_t)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_10000498C(&qword_100099FA8);
  __chkstk_darwin(v78);
  v74 = (uint64_t)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = sub_10000498C(&qword_10009A008);
  v79 = *(_QWORD *)(v81 - 8);
  __chkstk_darwin(v81);
  v75 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = sub_10000498C(&qword_100099FA0);
  __chkstk_darwin(v77);
  v76 = (char *)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_10000498C(&qword_100099F88);
  __chkstk_darwin(v82);
  v80 = (uint64_t)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD *)(a1 + 8);
  v21 = type metadata accessor for TextFormattingState(0);
  v22 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
  EnvironmentObject.projectedValue.getter(v19, v20, v21, v22);
  swift_getKeyPath(&unk_100075858);
  EnvironmentObject.Wrapper.subscript.getter(&v84);
  swift_release();
  swift_release();
  ColorPicker.init(selection:supportsOpacity:label:)(v84, *((_QWORD *)&v84 + 1), v85, 1, nullsub_1, 0, &type metadata for EmptyView, &protocol witness table for EmptyView);
  v23 = sub_100042BE4();
  v25 = v24;
  v26 = static UnitPoint.center.getter(v23);
  v28 = v27;
  v29 = v66;
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v11, v9, v66);
  v30 = (double *)&v11[*(int *)(v65 + 36)];
  *(_QWORD *)v30 = v25;
  *((_QWORD *)v30 + 1) = v25;
  v30[2] = v26;
  *((_QWORD *)v30 + 3) = v28;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v29);
  v31 = v67;
  sub_10000920C(a1, v67, type metadata accessor for TFTextColorControl);
  v32 = *(unsigned __int8 *)(v68 + 80);
  v33 = (v32 + 16) & ~v32;
  v34 = swift_allocObject(&unk_10008FEB8, v33 + v69, v32 | 7);
  sub_100008F30(v31, v34 + v33, type metadata accessor for TFTextColorControl);
  sub_10000928C((uint64_t)v11, (uint64_t)v4, &qword_100099FF0);
  v35 = &v4[*(int *)(v71 + 36)];
  *(_QWORD *)v35 = 2003134806;
  *((_QWORD *)v35 + 1) = 0xE400000000000000;
  v36 = swift_allocObject(&unk_10008FEE0, 32, 7);
  *(_QWORD *)(v36 + 16) = sub_100050EFC;
  *(_QWORD *)(v36 + 24) = v34;
  sub_10000928C((uint64_t)v4, (uint64_t)v13, &qword_100099FE0);
  v37 = (uint64_t (**)(double *))&v13[*(int *)(v70 + 36)];
  *v37 = sub_1000527A8;
  v37[1] = (uint64_t (*)(double *))v36;
  sub_1000092D0((uint64_t)v4, &qword_100099FE0);
  sub_1000092D0((uint64_t)v11, &qword_100099FF0);
  v38 = *(_QWORD *)(a1 + 32);
  LOBYTE(v4) = *(_BYTE *)(a1 + 40);
  sub_10001D97C(v38, (char)v4);
  LOBYTE(v36) = sub_1000117FC(v38, (char)v4);
  sub_10001D9D8(v38, (char)v4);
  sub_100066220(v36);
  v40 = v39;
  sub_10001D97C(v38, (char)v4);
  LOBYTE(v20) = sub_1000117FC(v38, (char)v4);
  sub_10001D9D8(v38, (char)v4);
  v41 = sub_1000668B0(v20);
  v43 = v42;
  v44 = static Alignment.center.getter(v41);
  _FrameLayout.init(width:height:alignment:)(&v84, v40, 0, v43, 0, v44, v45);
  v46 = v72;
  sub_10000928C((uint64_t)v13, v72, &qword_100099FD0);
  v47 = (_OWORD *)(v46 + *(int *)(v73 + 36));
  v48 = v85;
  *v47 = v84;
  v47[1] = v48;
  v47[2] = v86;
  v49 = sub_1000092D0((uint64_t)v13, &qword_100099FD0);
  v50 = static Alignment.center.getter(v49);
  v51 = v74;
  sub_1000312E8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v74, 0.0, 1, INFINITY, 0, v50, v52, (uint64_t)&qword_100099FC0, (void (*)(uint64_t, uint64_t, uint64_t))sub_10000928C, &qword_100099FA8);
  sub_1000092D0(v46, &qword_100099FC0);
  v53 = sub_10005130C();
  v54 = v75;
  View.labelsHidden()(v78, v53);
  sub_1000092D0(v51, &qword_100099FA8);
  KeyPath = swift_getKeyPath(&unk_100075480);
  v56 = swift_allocObject(&unk_10008FF08, 17, 7);
  *(_BYTE *)(v56 + 16) = 1;
  v57 = v79;
  v58 = (uint64_t)v76;
  v59 = v81;
  (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v76, v54, v81);
  v60 = (uint64_t *)(v58 + *(int *)(v77 + 36));
  *v60 = KeyPath;
  v60[1] = (uint64_t)sub_10005277C;
  v60[2] = v56;
  (*(void (**)(char *, uint64_t))(v57 + 8))(v54, v59);
  v61 = *(_QWORD *)(a1 + 48);
  LOBYTE(v56) = *(_BYTE *)(a1 + 56);
  sub_10001D97C(v61, v56);
  LOBYTE(a1) = sub_100011B90(v61, v56);
  sub_10001D9D8(v61, v56);
  if ((a1 & 1) != 0)
    v62 = 1.0;
  else
    v62 = 0.7;
  v63 = v80;
  sub_10000928C(v58, v80, &qword_100099FA0);
  *(double *)(v63 + *(int *)(v82 + 36)) = v62;
  sub_1000092D0(v58, &qword_100099FA0);
  return sub_10000930C(v63, v83, &qword_100099F88);
}

uint64_t sub_1000441D4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  NSString v24;
  uint64_t KeyPath;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t result;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;

  v64 = a2;
  v57 = sub_10000498C(&qword_10009A000);
  v54 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v4 = (char *)&v54 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = sub_10000498C(&qword_10009A010);
  __chkstk_darwin(v55);
  v6 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = sub_10000498C(&qword_10009A018);
  v59 = *(_QWORD *)(v61 - 8);
  __chkstk_darwin(v61);
  v8 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = sub_10000498C(&qword_10009A020);
  __chkstk_darwin(v56);
  v10 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = sub_10000498C(&qword_10009A028);
  v11 = __chkstk_darwin(v60);
  v63 = (uint64_t)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v58 = (uint64_t)&v54 - v14;
  __chkstk_darwin(v13);
  v62 = (uint64_t)&v54 - v15;
  v16 = *a1;
  v17 = a1[1];
  v18 = type metadata accessor for TextFormattingState(0);
  v19 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
  EnvironmentObject.projectedValue.getter(v16, v17, v18, v19);
  swift_getKeyPath(&unk_100075858);
  EnvironmentObject.Wrapper.subscript.getter(&v65);
  swift_release();
  swift_release();
  ColorPicker.init(selection:supportsOpacity:label:)(v65, *((_QWORD *)&v65 + 1), v66, 1, nullsub_1, 0, &type metadata for EmptyView, &protocol witness table for EmptyView);
  v20 = a1[4];
  v21 = *((_BYTE *)a1 + 40);
  sub_10001D97C(v20, v21);
  v22 = sub_1000117FC(v20, v21);
  sub_10001D9D8(v20, v21);
  v23 = *a1;
  if (*a1)
  {
    swift_retain();
    v24 = String._bridgeToObjectiveC()();
    KeyPath = swift_getKeyPath(&unk_100075290);
    swift_getKeyPath(&unk_1000752B8);
    static Published.subscript.getter(&v65, v23, KeyPath);
    swift_release();
    swift_release();
    if ((*(_BYTE *)(v23 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_isInPopoverPresentation) & 1) != 0)
      v26 = 0;
    else
      v26 = *(_BYTE *)(v23 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_hasParentViewController) ^ 1;
    sub_100066310((uint64_t)v24, v65, SBYTE8(v65), v26 & 1, *(_BYTE *)(v23 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_useReducedMetrics), v22);
    v28 = v27;
    swift_release();

    v30 = static Alignment.center.getter(v29);
    _FrameLayout.init(width:height:alignment:)(&v65, 0, 1, v28, 0, v30, v31);
    v32 = v54;
    v33 = v57;
    (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v6, v4, v57);
    v34 = v55;
    v35 = &v6[*(int *)(v55 + 36)];
    v36 = v66;
    *(_OWORD *)v35 = v65;
    *((_OWORD *)v35 + 1) = v36;
    *((_OWORD *)v35 + 2) = v67;
    (*(void (**)(char *, uint64_t))(v32 + 8))(v4, v33);
    v37 = sub_1000514EC(&qword_10009A030, &qword_10009A010);
    View.labelsHidden()(v34, v37);
    sub_1000092D0((uint64_t)v6, &qword_10009A010);
    v38 = swift_getKeyPath(&unk_100075480);
    v39 = swift_allocObject(&unk_10008FF30, 17, 7);
    *(_BYTE *)(v39 + 16) = 1;
    v40 = v59;
    v41 = v61;
    (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v10, v8, v61);
    v42 = (uint64_t *)&v10[*(int *)(v56 + 36)];
    *v42 = v38;
    v42[1] = (uint64_t)sub_10005277C;
    v42[2] = v39;
    (*(void (**)(char *, uint64_t))(v40 + 8))(v8, v41);
    v43 = a1[6];
    LOBYTE(v39) = *((_BYTE *)a1 + 56);
    sub_10001D97C(v43, v39);
    LOBYTE(v41) = sub_100011B90(v43, v39);
    sub_10001D9D8(v43, v39);
    if ((v41 & 1) != 0)
      v44 = 1.0;
    else
      v44 = 0.7;
    v45 = v58;
    sub_10000928C((uint64_t)v10, v58, &qword_10009A020);
    *(double *)(v45 + *(int *)(v60 + 36)) = v44;
    sub_1000092D0((uint64_t)v10, &qword_10009A020);
    v46 = v62;
    sub_10000930C(v45, v62, &qword_10009A028);
    if (qword_1000981A0 != -1)
      swift_once(&qword_1000981A0, sub_100024220);
    v48 = qword_10009B530;
    v47 = *(_QWORD *)algn_10009B538;
    v49 = swift_getKeyPath(&unk_100074C20);
    v50 = v63;
    sub_10000928C(v46, v63, &qword_10009A028);
    v51 = v64;
    sub_10000928C(v50, v64, &qword_10009A028);
    v52 = v51 + *(int *)(sub_10000498C(&qword_10009A038) + 48);
    *(_QWORD *)v52 = v48;
    *(_QWORD *)(v52 + 8) = v47;
    *(_BYTE *)(v52 + 16) = 0;
    *(_QWORD *)(v52 + 24) = v49;
    *(_BYTE *)(v52 + 32) = 0;
    swift_bridgeObjectRetain(v47);
    sub_10001D97C(v49, 0);
    swift_bridgeObjectRetain(v47);
    sub_1000092D0(v46, &qword_10009A028);
    swift_bridgeObjectRelease(v47);
    sub_10001D9D8(v49, 0);
    return sub_1000092D0(v50, &qword_10009A028);
  }
  else
  {
    result = EnvironmentObject.error()(0, a1[1], v18, v19);
    __break(1u);
  }
  return result;
}

uint64_t sub_1000447F8(_QWORD *a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*a1)
  {
    v1 = *(void (**)(uint64_t))(*a1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_pickColor);
    v2 = swift_retain();
    v1(v2);
    return swift_release();
  }
  else
  {
    v4 = a1[1];
    v5 = type metadata accessor for TextFormattingState(0);
    v6 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    result = EnvironmentObject.error()(0, v4, v5, v6);
    __break(1u);
  }
  return result;
}

_QWORD *sub_100044880(_QWORD *result, double a2, double a3, double a4, double a5)
{
  double *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*result)
  {
    v5 = (double *)(*result + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_colorPickerRect);
    *v5 = a2;
    v5[1] = a3;
    v5[2] = a4;
    v5[3] = a5;
  }
  else
  {
    v6 = result[1];
    v7 = type metadata accessor for TextFormattingState(0);
    v8 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    result = (_QWORD *)EnvironmentObject.error()(0, v6, v7, v8);
    __break(1u);
  }
  return result;
}

_QWORD *sub_100044900@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __int16 a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void (*a7)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t)@<X6>, void (*a8)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t)@<X7>, uint64_t a9@<X8>)
{
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *result;
  uint64_t v25;
  char v27;
  _QWORD v28[3];

  v17 = (int *)sub_10000498C(&qword_100099E00);
  v18 = a9 + v17[10];
  v19 = type metadata accessor for HoverEffect(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
  *(_QWORD *)a9 = 0;
  *(_WORD *)(a9 + 8) = 257;
  sub_100044A5C(a1, a2, a3, a4 & 0x1FF, a5, a6, a7, a8, a9 + v17[11]);
  v20 = a9 + v17[12];
  *(_QWORD *)v20 = swift_getKeyPath(&unk_100074C50);
  *(_BYTE *)(v20 + 8) = 0;
  v21 = a9 + v17[13];
  *(_QWORD *)v21 = swift_getKeyPath(&unk_100074BF8);
  *(_BYTE *)(v21 + 8) = 0;
  v22 = a9 + v17[14];
  *(_QWORD *)v22 = swift_getKeyPath(&unk_1000752D8);
  *(_BYTE *)(v22 + 8) = 0;
  v23 = a9 + v17[15];
  v27 = 0;
  result = State.init(wrappedValue:)(v28, &v27, &type metadata for Bool);
  v25 = v28[1];
  *(_BYTE *)v23 = v28[0];
  *(_QWORD *)(v23 + 8) = v25;
  return result;
}

uint64_t sub_100044A5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void (*a7)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t)@<X6>, void (*a8)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t)@<X7>, uint64_t a9@<X8>)
{
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  ValueMetadata *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t OpaqueTypeConformance2;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v69)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t);
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  ValueMetadata *v83;
  uint64_t v84;
  unint64_t v85;

  v68 = a7;
  v69 = a8;
  v66 = a5;
  v67 = a6;
  v73 = a1;
  v74 = a2;
  v80 = a9;
  v11 = a4 >> 8;
  v12 = (a4 >> 8) & 1;
  v79 = sub_10000498C(&qword_100099E08);
  __chkstk_darwin(v79);
  v72 = (uint64_t)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10000498C(&qword_1000997D8);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v62 - v19;
  v21 = __chkstk_darwin(v18);
  v71 = (char *)&v62 - v22;
  __chkstk_darwin(v21);
  v70 = (char *)&v62 - v23;
  v75 = sub_10000498C(&qword_100099E10);
  __chkstk_darwin(v75);
  v78 = (uint64_t)&v62 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = sub_10000498C(&qword_100099E18);
  v63 = *(_QWORD *)(v76 - 8);
  __chkstk_darwin(v76);
  v26 = (char *)&v62 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = sub_10000498C(&qword_100099E20);
  v65 = *(_QWORD *)(v77 - 8);
  v27 = __chkstk_darwin(v77);
  v29 = (char *)&v62 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v64 = (char *)&v62 - v30;
  sub_10001D970(a3, a4, v12);
  v31 = sub_1000119BC(a3, a4 | ((v11 & 1) << 8));
  LOBYTE(v11) = v32;
  v33 = sub_10001D9CC(a3, a4, v12);
  if ((v11 & 1) != 0 || v31 != 1)
  {
    v50 = a4 & 0x1FF;
    v51 = (uint64_t)v70;
    v53 = v73;
    v52 = v74;
    v68(0, v73, v74, a3, v50);
    v54 = (uint64_t)v71;
    v69(0, v53, v52, a3, v50);
    sub_10000928C(v51, (uint64_t)v20, &qword_1000997D8);
    sub_10000928C(v54, (uint64_t)v17, &qword_1000997D8);
    v55 = v72;
    sub_10000928C((uint64_t)v20, v72, &qword_1000997D8);
    v56 = sub_10000498C(&qword_100099E28);
    sub_10000928C((uint64_t)v17, v55 + *(int *)(v56 + 48), &qword_1000997D8);
    sub_1000092D0((uint64_t)v17, &qword_1000997D8);
    sub_1000092D0((uint64_t)v20, &qword_1000997D8);
    v57 = v78;
    sub_10000928C(v55, v78, &qword_100099E08);
    swift_storeEnumTagMultiPayload(v57, v75, 1);
    v58 = sub_10000966C(&qword_100099E30, &qword_100099E18, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
    v59 = sub_10004EC30();
    v82 = v76;
    v83 = &type metadata for TFMenuStyle;
    v84 = v58;
    v85 = v59;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v82, &opaque type descriptor for <<opaque return type of View.menuStyle<A>(_:)>>, 1);
    v61 = sub_10000966C(&qword_100099E38, &qword_100099E08, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    _ConditionalContent<>.init(storage:)(v57, v77, v79, OpaqueTypeConformance2, v61);
    sub_1000092D0(v55, &qword_100099E08);
    sub_1000092D0(v54, &qword_1000997D8);
    return sub_1000092D0(v51, &qword_1000997D8);
  }
  else
  {
    __chkstk_darwin(v33);
    v34 = v74;
    *(&v62 - 4) = v73;
    *(&v62 - 3) = v34;
    *(&v62 - 2) = a3;
    *((_BYTE *)&v62 - 8) = a4;
    *((_BYTE *)&v62 - 7) = v12;
    v35 = sub_10000498C(&qword_1000999A0);
    v36 = sub_10000966C(&qword_1000999B0, &qword_1000999A0, (uint64_t)&unk_100075E88);
    v37 = sub_10000966C(&qword_100099E38, &qword_100099E08, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v38 = v79;
    Menu.init(content:label:)(v66, &v62 - 6, v67, 0, v35, v79, v36, v37);
    v81 = 0;
    State.init(wrappedValue:)(&v82, &v81, &type metadata for Bool);
    v39 = v82;
    v40 = v83;
    LOBYTE(v82) = 0;
    LOBYTE(v83) = v39;
    v84 = (uint64_t)v40;
    v41 = sub_10000966C(&qword_100099E30, &qword_100099E18, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
    v42 = sub_10004EC30();
    v43 = v76;
    View.menuStyle<A>(_:)(&v82, v76, &type metadata for TFMenuStyle, v41, v42);
    swift_release();
    (*(void (**)(char *, uint64_t))(v63 + 8))(v26, v43);
    v44 = v65;
    v45 = v64;
    v46 = v77;
    (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v64, v29, v77);
    v47 = v78;
    (*(void (**)(uint64_t, char *, uint64_t))(v44 + 16))(v78, v45, v46);
    swift_storeEnumTagMultiPayload(v47, v75, 0);
    v82 = v43;
    v83 = &type metadata for TFMenuStyle;
    v84 = v41;
    v85 = v42;
    v48 = swift_getOpaqueTypeConformance2(&v82, &opaque type descriptor for <<opaque return type of View.menuStyle<A>(_:)>>, 1);
    _ConditionalContent<>.init(storage:)(v47, v46, v38, v48, v37);
    return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v45, v46);
  }
}

uint64_t sub_100045050@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __int16 a4@<W3>, void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X4>, void (*a6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v29)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v28 = a5;
  v29 = a6;
  v12 = sub_10000498C(&qword_1000997D8);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v27 - v17;
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v27 - v20;
  __chkstk_darwin(v19);
  v23 = (char *)&v27 - v22;
  v24 = a4 & 0x1FF;
  v28(1, a1, a2, a3, v24);
  v29(1, a1, a2, a3, v24);
  sub_10000928C((uint64_t)v23, (uint64_t)v18, &qword_1000997D8);
  sub_10000928C((uint64_t)v21, (uint64_t)v15, &qword_1000997D8);
  sub_10000928C((uint64_t)v18, a7, &qword_1000997D8);
  v25 = sub_10000498C(&qword_100099E28);
  sub_10000928C((uint64_t)v15, a7 + *(int *)(v25 + 48), &qword_1000997D8);
  sub_1000092D0((uint64_t)v21, &qword_1000997D8);
  sub_1000092D0((uint64_t)v23, &qword_1000997D8);
  sub_1000092D0((uint64_t)v15, &qword_1000997D8);
  return sub_1000092D0((uint64_t)v18, &qword_1000997D8);
}

uint64_t sub_1000451FC@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;

  v41 = a3;
  v42 = a4;
  v44 = a6;
  v9 = (int *)type metadata accessor for TFToggle(0);
  __chkstk_darwin(v9);
  v11 = (uint64_t *)((char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = 0;
  v13 = 0;
  v43 = a1;
  if ((a1 & 1) != 0)
  {
    if (qword_100098198 != -1)
      swift_once(&qword_100098198, sub_100024110);
    v12 = qword_10009B520;
    v13 = *(_QWORD *)algn_10009B528;
    swift_bridgeObjectRetain(*(_QWORD *)algn_10009B528);
  }
  v40 = v12;
  v14 = type metadata accessor for MainActor(0);
  v15 = static MainActor.shared.getter(v14);
  v16 = swift_allocObject(&unk_10008FFA8, 32, 7);
  *(_QWORD *)(v16 + 16) = v15;
  *(_QWORD *)(v16 + 24) = &protocol witness table for MainActor;
  swift_retain();
  v17 = v42;
  v18 = sub_10001D970(v42, a5, BYTE1(a5) & 1);
  v19 = static MainActor.shared.getter(v18);
  v20 = swift_allocObject(&unk_10008FFD0, 58, 7);
  *(_QWORD *)(v20 + 16) = v19;
  *(_QWORD *)(v20 + 24) = &protocol witness table for MainActor;
  v21 = v41;
  *(_QWORD *)(v20 + 32) = a2;
  *(_QWORD *)(v20 + 40) = v21;
  *(_QWORD *)(v20 + 48) = v17;
  *(_BYTE *)(v20 + 56) = a5;
  *(_BYTE *)(v20 + 57) = BYTE1(a5) & 1;
  v22 = Binding.init(get:set:)(&v45, sub_100050BAC, v16, sub_1000517AC, v20, &type metadata for Bool);
  v23 = v45;
  v24 = v46;
  LOBYTE(v16) = v47;
  static SymbolRenderingMode.hierarchical.getter(v22);
  *v11 = 0xD000000000000013;
  v11[1] = 0x8000000100078160;
  v11[2] = 0;
  v11[3] = 0;
  v25 = (_QWORD *)((char *)v11 + v9[7]);
  *v25 = v40;
  v25[1] = v13;
  *((_BYTE *)v11 + v9[8]) = v43 & 1;
  v26 = (char *)v11 + v9[9];
  *(_QWORD *)v26 = v23;
  *((_QWORD *)v26 + 1) = v24;
  v26[16] = v16;
  v27 = (char *)v11 + v9[10];
  *(_QWORD *)v27 = swift_getKeyPath(&unk_100074BF8);
  v27[8] = 0;
  if (qword_100098198 != -1)
    swift_once(&qword_100098198, sub_100024110);
  v28 = *(_QWORD *)algn_10009B528;
  v45 = qword_10009B520;
  v46 = *(_QWORD *)algn_10009B528;
  v29 = sub_100008EDC();
  swift_bridgeObjectRetain(v28);
  v30 = Text.init<A>(_:)(&v45, &type metadata for String, v29);
  v32 = v31;
  v34 = v33;
  v36 = v35 & 1;
  v37 = sub_100007D90(&qword_100099818, type metadata accessor for TFToggle, (uint64_t)&unk_100075F10);
  View.accessibilityLabel(_:)(v30, v32, v36, v34, v9, v37);
  sub_100008F20(v30, v32, v36);
  swift_bridgeObjectRelease(v34);
  return sub_100009250((uint64_t)v11, type metadata accessor for TFToggle);
}

uint64_t sub_1000454E0@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;

  v41 = a3;
  v42 = a4;
  v44 = a6;
  v9 = (int *)type metadata accessor for TFToggle(0);
  __chkstk_darwin(v9);
  v11 = (uint64_t *)((char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = 0;
  v13 = 0;
  v43 = a1;
  if ((a1 & 1) != 0)
  {
    if (qword_100098190 != -1)
      swift_once(&qword_100098190, sub_100024000);
    v12 = qword_10009B510;
    v13 = *(_QWORD *)algn_10009B518;
    swift_bridgeObjectRetain(*(_QWORD *)algn_10009B518);
  }
  v40 = v12;
  v14 = type metadata accessor for MainActor(0);
  v15 = static MainActor.shared.getter(v14);
  v16 = swift_allocObject(&unk_10008FF58, 32, 7);
  *(_QWORD *)(v16 + 16) = v15;
  *(_QWORD *)(v16 + 24) = &protocol witness table for MainActor;
  swift_retain();
  v17 = v42;
  v18 = sub_10001D970(v42, a5, BYTE1(a5) & 1);
  v19 = static MainActor.shared.getter(v18);
  v20 = swift_allocObject(&unk_10008FF80, 58, 7);
  *(_QWORD *)(v20 + 16) = v19;
  *(_QWORD *)(v20 + 24) = &protocol witness table for MainActor;
  v21 = v41;
  *(_QWORD *)(v20 + 32) = a2;
  *(_QWORD *)(v20 + 40) = v21;
  *(_QWORD *)(v20 + 48) = v17;
  *(_BYTE *)(v20 + 56) = a5;
  *(_BYTE *)(v20 + 57) = BYTE1(a5) & 1;
  v22 = Binding.init(get:set:)(&v45, sub_100050BAC, v16, sub_100051798, v20, &type metadata for Bool);
  v23 = v45;
  v24 = v46;
  LOBYTE(v16) = v47;
  static SymbolRenderingMode.hierarchical.getter(v22);
  *v11 = 0xD000000000000013;
  v11[1] = 0x8000000100078140;
  v11[2] = 0;
  v11[3] = 0;
  v25 = (_QWORD *)((char *)v11 + v9[7]);
  *v25 = v40;
  v25[1] = v13;
  *((_BYTE *)v11 + v9[8]) = v43 & 1;
  v26 = (char *)v11 + v9[9];
  *(_QWORD *)v26 = v23;
  *((_QWORD *)v26 + 1) = v24;
  v26[16] = v16;
  v27 = (char *)v11 + v9[10];
  *(_QWORD *)v27 = swift_getKeyPath(&unk_100074BF8);
  v27[8] = 0;
  if (qword_100098190 != -1)
    swift_once(&qword_100098190, sub_100024000);
  v28 = *(_QWORD *)algn_10009B518;
  v45 = qword_10009B510;
  v46 = *(_QWORD *)algn_10009B518;
  v29 = sub_100008EDC();
  swift_bridgeObjectRetain(v28);
  v30 = Text.init<A>(_:)(&v45, &type metadata for String, v29);
  v32 = v31;
  v34 = v33;
  v36 = v35 & 1;
  v37 = sub_100007D90(&qword_100099818, type metadata accessor for TFToggle, (uint64_t)&unk_100075F10);
  View.accessibilityLabel(_:)(v30, v32, v36, v34, v9, v37);
  sub_100008F20(v30, v32, v36);
  swift_bridgeObjectRelease(v34);
  return sub_100009250((uint64_t)v11, type metadata accessor for TFToggle);
}

uint64_t sub_1000457C4@<X0>(uint64_t a1@<X8>)
{
  return sub_100040398(a1, (__n128)xmmword_100074B30);
}

uint64_t sub_1000457D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, _QWORD);
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v7 = type metadata accessor for UITextFormattingViewController.ChangeValue(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a4)
  {
    v11 = *(void (**)(char *, _QWORD))(a4
                                                + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_didChangeValue);
    (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for UITextFormattingViewController.ChangeValue.increaseQuoteLevel(_:), v7);
    swift_retain();
    swift_retain();
    v11(v10, 0);
    swift_release();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    return swift_release();
  }
  else
  {
    v13 = type metadata accessor for TextFormattingState(0);
    v14 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    result = EnvironmentObject.error()(0, a5, v13, v14);
    __break(1u);
  }
  return result;
}

uint64_t sub_1000458EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, _QWORD);
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v7 = type metadata accessor for UITextFormattingViewController.ChangeValue(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a4)
  {
    v11 = *(void (**)(char *, _QWORD))(a4
                                                + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_didChangeValue);
    (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for UITextFormattingViewController.ChangeValue.decreaseQuoteLevel(_:), v7);
    swift_retain();
    swift_retain();
    v11(v10, 0);
    swift_release();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    return swift_release();
  }
  else
  {
    v13 = type metadata accessor for TextFormattingState(0);
    v14 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    result = EnvironmentObject.error()(0, a5, v13, v14);
    __break(1u);
  }
  return result;
}

_QWORD *sub_100045A08@<X0>(uint64_t a1@<X8>)
{
  return sub_100045A2C((uint64_t)sub_100051744, (uint64_t)sub_1000457C4, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000451FC, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000454E0, a1);
}

_QWORD *sub_100045A2C@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, void (*a3)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t)@<X4>, void (*a4)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t)@<X5>, uint64_t a5@<X8>)
{
  uint64_t v5;

  return sub_100044900(*(_QWORD *)v5, *(_QWORD *)(v5 + 8), *(_QWORD *)(v5 + 16), *(unsigned __int8 *)(v5 + 24) | (unsigned __int16)(*(unsigned __int8 *)(v5 + 25) << 8), a1, a2, a3, a4, a5);
}

uint64_t sub_100045A6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __int16 a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  _BYTE *v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[7];
  char v35;
  _QWORD v36[3];

  v10 = sub_10000498C(&qword_100098FC8);
  __chkstk_darwin(v10);
  v12 = &v34[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = (int *)sub_10000498C(&qword_10009A040);
  __chkstk_darwin(v13);
  v15 = &v34[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = sub_10000498C(&qword_10009A048);
  __chkstk_darwin(v16);
  v18 = &v34[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = &v15[v13[10]];
  v20 = type metadata accessor for HoverEffect(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
  *(_QWORD *)v15 = 0;
  *((_WORD *)v15 + 4) = 257;
  sub_100045DC4(a1, a2, a3, a4 & 0x1FF, &v15[v13[11]]);
  v21 = &v15[v13[12]];
  *(_QWORD *)v21 = swift_getKeyPath(&unk_100074C50);
  v21[8] = 0;
  v22 = &v15[v13[13]];
  *(_QWORD *)v22 = swift_getKeyPath(&unk_100074BF8);
  v22[8] = 0;
  v23 = &v15[v13[14]];
  *(_QWORD *)v23 = swift_getKeyPath(&unk_1000752D8);
  v23[8] = 0;
  v24 = &v15[v13[15]];
  v35 = 0;
  State.init(wrappedValue:)(v36, &v35, &type metadata for Bool);
  v25 = v36[1];
  *v24 = v36[0];
  *((_QWORD *)v24 + 1) = v25;
  if (a1)
  {
    KeyPath = swift_getKeyPath(&unk_100075300);
    swift_getKeyPath(&unk_100075328);
    v27 = swift_retain();
    static Published.subscript.getter(v12, v27, KeyPath);
    swift_release();
    swift_release();
    v28 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor(0);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 48))(v12, 1, v28))
    {
      sub_1000092D0((uint64_t)v12, &qword_100098FC8);
      swift_release();
      v29 = 0;
    }
    else
    {
      v30 = UITextFormattingViewController.FormattingDescriptor._blockquote.getter();
      sub_1000092D0((uint64_t)v12, &qword_100098FC8);
      swift_release();
      v29 = v30 == 1;
    }
    if (qword_1000981F0 != -1)
      swift_once(&qword_1000981F0, sub_100024C90);
    sub_10003487C(v29, qword_10009B5D0, *(uint64_t *)algn_10009B5D8, &qword_10009A048, &qword_10009A040, &qword_10009A050, (uint64_t)&unk_100075FB0, (uint64_t)v18);
    sub_1000092D0((uint64_t)v15, &qword_10009A040);
    return sub_10000930C((uint64_t)v18, a5, &qword_10009A048);
  }
  else
  {
    v32 = type metadata accessor for TextFormattingState(0);
    v33 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    result = EnvironmentObject.error()(0, a2, v32, v33);
    __break(1u);
  }
  return result;
}

uint64_t sub_100045DC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  _QWORD *v20;
  char *v21;
  char *v22;
  uint64_t result;
  _QWORD v24[2];
  char v25;

  v10 = (a4 >> 8) & 1;
  type metadata accessor for MainActor(0);
  swift_retain();
  v11 = sub_10001D970(a3, a4, v10);
  v12 = static MainActor.shared.getter(v11);
  v13 = swift_allocObject(&unk_10008FFF8, 58, 7);
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = &protocol witness table for MainActor;
  *(_QWORD *)(v13 + 32) = a1;
  *(_QWORD *)(v13 + 40) = a2;
  *(_QWORD *)(v13 + 48) = a3;
  *(_BYTE *)(v13 + 56) = a4;
  *(_BYTE *)(v13 + 57) = v10;
  swift_retain();
  v14 = sub_10001D970(a3, a4, v10);
  v15 = static MainActor.shared.getter(v14);
  v16 = swift_allocObject(&unk_100090020, 58, 7);
  *(_QWORD *)(v16 + 16) = v15;
  *(_QWORD *)(v16 + 24) = &protocol witness table for MainActor;
  *(_QWORD *)(v16 + 32) = a1;
  *(_QWORD *)(v16 + 40) = a2;
  *(_QWORD *)(v16 + 48) = a3;
  *(_BYTE *)(v16 + 56) = a4;
  *(_BYTE *)(v16 + 57) = v10;
  Binding.init(get:set:)(v24, sub_1000517C0, v13, sub_100051834, v16, &type metadata for Bool);
  v17 = v24[0];
  v18 = v24[1];
  LOBYTE(a2) = v25;
  v19 = (int *)type metadata accessor for TFToggle(0);
  static SymbolRenderingMode.hierarchical.getter(v19);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0xD000000000000020;
  a5[3] = 0x8000000100078180;
  v20 = (_QWORD *)((char *)a5 + v19[7]);
  *v20 = 0;
  v20[1] = 0;
  *((_BYTE *)a5 + v19[8]) = 0;
  v21 = (char *)a5 + v19[9];
  *(_QWORD *)v21 = v17;
  *((_QWORD *)v21 + 1) = v18;
  v21[16] = a2;
  v22 = (char *)a5 + v19[10];
  result = swift_getKeyPath(&unk_100074BF8);
  *(_QWORD *)v22 = result;
  v22[8] = 0;
  return result;
}

uint64_t sub_100045F6C@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, BOOL *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = sub_10000498C(&qword_100098FC8);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a1)
  {
    KeyPath = swift_getKeyPath(&unk_100075300);
    swift_getKeyPath(&unk_100075328);
    v10 = swift_retain();
    static Published.subscript.getter(v8, v10, KeyPath);
    swift_release();
    swift_release();
    v11 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor(0);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v8, 1, v11))
    {
      sub_1000092D0((uint64_t)v8, &qword_100098FC8);
      result = swift_release();
      v13 = 0;
    }
    else
    {
      v14 = UITextFormattingViewController.FormattingDescriptor._blockquote.getter();
      sub_1000092D0((uint64_t)v8, &qword_100098FC8);
      result = swift_release();
      v13 = v14 == 1;
    }
    *a3 = v13;
  }
  else
  {
    v15 = type metadata accessor for TextFormattingState(0);
    v16 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    result = EnvironmentObject.error()(0, a2, v15, v16);
    __break(1u);
  }
  return result;
}

uint64_t sub_1000460D8(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  char v12;
  void (*v13)(_BYTE *, _QWORD);
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v8 = type metadata accessor for UITextFormattingViewController.ChangeValue(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a4)
  {
    v12 = *a1;
    v13 = *(void (**)(_BYTE *, _QWORD))(a4
                                                 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_didChangeValue);
    *v11 = v12;
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for UITextFormattingViewController.ChangeValue.toggleBlockquote(_:), v8);
    swift_retain();
    swift_retain();
    v13(v11, 0);
    swift_release();
    (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
    return swift_release();
  }
  else
  {
    v15 = type metadata accessor for TextFormattingState(0);
    v16 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    result = EnvironmentObject.error()(0, a5, v15, v16);
    __break(1u);
  }
  return result;
}

uint64_t sub_100046200(uint64_t a1, uint64_t a2)
{
  return sub_100041114(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_100045A6C);
}

_QWORD *sub_10004620C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  char v13;
  _QWORD v14[2];

  v2 = v1;
  v4 = (int *)sub_10000498C(&qword_10009A058);
  v5 = a1 + v4[10];
  v6 = type metadata accessor for HoverEffect(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 257;
  sub_100046318(v2, a1 + v4[11]);
  v7 = a1 + v4[12];
  *(_QWORD *)v7 = swift_getKeyPath(&unk_100074C50);
  *(_BYTE *)(v7 + 8) = 0;
  v8 = a1 + v4[13];
  *(_QWORD *)v8 = swift_getKeyPath(&unk_100074BF8);
  *(_BYTE *)(v8 + 8) = 0;
  v9 = a1 + v4[14];
  *(_QWORD *)v9 = swift_getKeyPath(&unk_1000752D8);
  *(_BYTE *)(v9 + 8) = 0;
  v10 = a1 + v4[15];
  v13 = 0;
  result = State.init(wrappedValue:)(v14, &v13, &type metadata for Bool);
  v12 = v14[1];
  *(_BYTE *)v10 = v14[0];
  *(_QWORD *)(v10 + 8) = v12;
  return result;
}

uint64_t sub_100046318@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t KeyPath;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98[17];

  v94 = a2;
  v3 = sub_10000498C(&qword_10009A060);
  v84 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v77 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10000498C(&qword_10009A068);
  __chkstk_darwin(v6);
  v8 = (char *)&v77 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10000498C(&qword_10009A070);
  __chkstk_darwin(v9);
  v11 = (char *)&v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10000498C(&qword_10009A078);
  v85 = *(_QWORD *)(v12 - 8);
  v86 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v77 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = sub_10000498C(&qword_10009A080);
  __chkstk_darwin(v87);
  v88 = (char *)&v77 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10000498C(&qword_10009A088);
  v91 = *(_QWORD *)(v16 - 8);
  v92 = v16;
  __chkstk_darwin(v16);
  v90 = (char *)&v77 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = sub_10000498C(&qword_10009A090);
  v18 = __chkstk_darwin(v89);
  v20 = (char *)&v77 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v93 = (uint64_t)&v77 - v21;
  v22 = sub_10000498C(&qword_10009A098);
  v23 = __chkstk_darwin(v22);
  __chkstk_darwin(v23);
  v26 = (char *)&v77 - v25;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v79 = v24;
    v80 = v11;
    v81 = v6;
    v82 = v9;
    v83 = v8;
    v31 = *(_QWORD *)(a1 + 24);
    v32 = *(unsigned __int8 *)(a1 + 32);
    v33 = *(unsigned __int8 *)(a1 + 33);
    sub_10001D970(v31, v32, *(_BYTE *)(a1 + 33));
    v34 = sub_1000119BC(v31, v32 | (v33 << 8));
    v36 = v35;
    sub_10001D9CC(v31, v32, v33);
    if ((v36 & 1) != 0 || v34 >= 2)
    {
      sub_100046A84((uint64_t)v26);
      v38 = (uint64_t)v26;
      v37 = 0;
    }
    else
    {
      v37 = 1;
      v38 = (uint64_t)v26;
    }
    v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v84 + 56);
    v84 = v38;
    v40 = v39(v38, v37, 1, v3);
    v78 = v3;
    v41 = __chkstk_darwin(v40);
    *(&v77 - 2) = a1;
    __chkstk_darwin(v41);
    *(&v77 - 2) = a1;
    v42 = sub_10000498C(&qword_10009A0C0);
    v43 = sub_10000498C(&qword_10009A0C8);
    v44 = sub_10000966C(&qword_10009A0D0, &qword_10009A0C0, (uint64_t)&unk_100075E88);
    v45 = sub_100051940(&qword_10009A0D8, &qword_10009A0C8, (void (*)(void))sub_1000519A4, (uint64_t)&protocol conformance descriptor for <> ForEach<A, B, C>);
    Menu.init(content:label:)(sub_100051930, &v77 - 4, sub_100051938, &v77 - 4, v42, v43, v44, v45);
    if (qword_100098200 != -1)
      swift_once(&qword_100098200, sub_100024EA4);
    v46 = *(_QWORD *)algn_10009B5F8;
    v95 = qword_10009B5F0;
    v96 = *(_QWORD *)algn_10009B5F8;
    v47 = sub_100008EDC();
    swift_bridgeObjectRetain(v46);
    v48 = Text.init<A>(_:)(&v95, &type metadata for String, v47);
    v50 = v49;
    v52 = v51;
    v54 = v53 & 1;
    v55 = sub_10000966C(&qword_10009A108, &qword_10009A078, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
    v56 = (uint64_t)v88;
    v57 = v86;
    View.accessibilityLabel(_:)(v48, v50, v54, v52, v86, v55);
    sub_100008F20(v48, v50, v54);
    swift_bridgeObjectRelease(v52);
    (*(void (**)(char *, uint64_t))(v85 + 8))(v14, v57);
    v98[0] = 0;
    State.init(wrappedValue:)(&v95, v98, &type metadata for Bool);
    v58 = v95;
    v59 = v96;
    LOBYTE(v95) = 0;
    LOBYTE(v96) = v58;
    v97 = v59;
    v60 = sub_100051AAC();
    v61 = sub_10004EC30();
    v62 = v90;
    View.menuStyle<A>(_:)(&v95, v87, &type metadata for TFMenuStyle, v60, v61);
    swift_release();
    sub_1000092D0(v56, &qword_10009A080);
    LOBYTE(v59) = sub_1000485B8();
    KeyPath = swift_getKeyPath(&unk_100075480);
    v64 = swift_allocObject(&unk_100090048, 17, 7);
    *(_BYTE *)(v64 + 16) = v59 & 1;
    v66 = v91;
    v65 = v92;
    (*(void (**)(char *, char *, uint64_t))(v91 + 16))(v20, v62, v92);
    v67 = (uint64_t *)&v20[*(int *)(v89 + 36)];
    *v67 = KeyPath;
    v67[1] = (uint64_t)sub_10005277C;
    v67[2] = v64;
    (*(void (**)(char *, uint64_t))(v66 + 8))(v62, v65);
    v68 = v93;
    sub_10000930C((uint64_t)v20, v93, &qword_10009A090);
    v69 = v84;
    v70 = v79;
    sub_10000928C(v84, v79, &qword_10009A098);
    sub_10000928C(v68, (uint64_t)v20, &qword_10009A090);
    v71 = (uint64_t)v80;
    sub_10000928C(v70, (uint64_t)v80, &qword_10009A098);
    v72 = sub_10000498C(&qword_10009A118);
    sub_10000928C((uint64_t)v20, v71 + *(int *)(v72 + 48), &qword_10009A090);
    sub_1000092D0((uint64_t)v20, &qword_10009A090);
    sub_1000092D0(v70, &qword_10009A098);
    v73 = (uint64_t)v83;
    sub_10000928C(v71, (uint64_t)v83, &qword_10009A070);
    swift_storeEnumTagMultiPayload(v73, v81, 0);
    v74 = sub_10000966C(&qword_10009A0A0, &qword_10009A070, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v75 = sub_100051840();
    _ConditionalContent<>.init(storage:)(v73, v82, v78, v74, v75);
    sub_1000092D0(v71, &qword_10009A070);
    sub_1000092D0(v68, &qword_10009A090);
    v29 = v69;
    v30 = &qword_10009A098;
  }
  else
  {
    sub_100046A84((uint64_t)v5);
    sub_10000928C((uint64_t)v5, (uint64_t)v8, &qword_10009A060);
    swift_storeEnumTagMultiPayload(v8, v6, 1);
    v27 = sub_10000966C(&qword_10009A0A0, &qword_10009A070, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v28 = sub_100051840();
    _ConditionalContent<>.init(storage:)(v8, v9, v3, v27, v28);
    v29 = (uint64_t)v5;
    v30 = &qword_10009A060;
  }
  return sub_1000092D0(v29, v30);
}

uint64_t sub_100046A84@<X0>(uint64_t a1@<X8>)
{
  _OWORD *v1;
  _OWORD *v2;
  int *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t KeyPath;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  double v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  char v43;
  unsigned __int8 v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t result;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[2];
  char v64;

  v2 = v1;
  v60 = a1;
  v3 = (int *)type metadata accessor for TFToggle(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = sub_10000498C(&qword_100099AC8);
  __chkstk_darwin(v61);
  v7 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10000498C(&qword_10009A0B8);
  __chkstk_darwin(v8);
  v62 = (uint64_t)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10000498C(&qword_10009A060);
  __chkstk_darwin(v10);
  v59 = (uint64_t)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for MainActor(0);
  v12 = sub_100051D8C((uint64_t)v1, (void (*)(uint64_t, uint64_t))sub_1000527AC, (void (*)(uint64_t, uint64_t))sub_1000527AC);
  v13 = static MainActor.shared.getter(v12);
  v14 = swift_allocObject(&unk_1000900E8, 128, 7);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = &protocol witness table for MainActor;
  v15 = v1[3];
  *(_OWORD *)(v14 + 64) = v1[2];
  *(_OWORD *)(v14 + 80) = v15;
  v16 = v1[5];
  *(_OWORD *)(v14 + 96) = v1[4];
  *(_OWORD *)(v14 + 112) = v16;
  v17 = v1[1];
  *(_OWORD *)(v14 + 32) = *v1;
  *(_OWORD *)(v14 + 48) = v17;
  v18 = sub_100051D8C((uint64_t)v1, (void (*)(uint64_t, uint64_t))sub_1000527AC, (void (*)(uint64_t, uint64_t))sub_1000527AC);
  v19 = static MainActor.shared.getter(v18);
  v20 = swift_allocObject(&unk_100090110, 128, 7);
  *(_QWORD *)(v20 + 16) = v19;
  *(_QWORD *)(v20 + 24) = &protocol witness table for MainActor;
  v21 = v2[3];
  *(_OWORD *)(v20 + 64) = v2[2];
  *(_OWORD *)(v20 + 80) = v21;
  v22 = v2[5];
  *(_OWORD *)(v20 + 96) = v2[4];
  *(_OWORD *)(v20 + 112) = v22;
  v23 = v2[1];
  *(_OWORD *)(v20 + 32) = *v2;
  *(_OWORD *)(v20 + 48) = v23;
  Binding.init(get:set:)(v63, sub_100051F60, v14, sub_100051FF8, v20, &type metadata for Bool);
  v24 = v63[0];
  v25 = v63[1];
  LOBYTE(v14) = v64;
  swift_retain();
  v26 = swift_retain();
  static SymbolRenderingMode.hierarchical.getter(v26);
  *(_OWORD *)v5 = xmmword_100074B40;
  *((_QWORD *)v5 + 2) = 0;
  *((_QWORD *)v5 + 3) = 0;
  v27 = &v5[v3[7]];
  *(_QWORD *)v27 = 0;
  *((_QWORD *)v27 + 1) = 0;
  v5[v3[8]] = 0;
  v28 = &v5[v3[9]];
  *(_QWORD *)v28 = v24;
  *((_QWORD *)v28 + 1) = v25;
  v28[16] = v14;
  v29 = &v5[v3[10]];
  *(_QWORD *)v29 = swift_getKeyPath(&unk_100074BF8);
  v29[8] = 0;
  LOBYTE(v29) = sub_1000485B8();
  KeyPath = swift_getKeyPath(&unk_100075480);
  v31 = swift_allocObject(&unk_100090138, 17, 7);
  *(_BYTE *)(v31 + 16) = v29 & 1;
  sub_10000920C((uint64_t)v5, (uint64_t)v7, type metadata accessor for TFToggle);
  v32 = (uint64_t *)&v7[*(int *)(v61 + 36)];
  *v32 = KeyPath;
  v32[1] = (uint64_t)sub_10005277C;
  v32[2] = v31;
  v33 = sub_100009250((uint64_t)v5, type metadata accessor for TFToggle);
  if ((*(_BYTE *)v2 & 1) != 0)
  {
    v36 = *((_QWORD *)v2 + 3);
    v37 = *((unsigned __int8 *)v2 + 32);
    v38 = *((unsigned __int8 *)v2 + 33);
    sub_10001D970(v36, v37, *((_BYTE *)v2 + 33));
    v39 = sub_1000119BC(v36, v37 | (v38 << 8));
    v41 = v40;
    v33 = sub_10001D9CC(v36, v37, v38);
    v34 = 0.0;
    v35 = 1;
    if ((v41 & 1) == 0 && v39 >= 4)
    {
      v42 = *((_QWORD *)v2 + 7);
      v43 = *((_BYTE *)v2 + 64);
      sub_10001D97C(v42, v43);
      v44 = sub_1000117FC(v42, v43);
      sub_10001D9D8(v42, v43);
      v33 = sub_100066220(v44);
      v35 = 0;
      v34 = v45;
    }
  }
  else
  {
    v34 = 0.0;
    v35 = 1;
  }
  v46 = static Alignment.center.getter(v33);
  v47 = v62;
  sub_1000312E8(0.0, 1, 0.0, 1, v34, v35, 0.0, 1, v62, 0.0, 1, 0.0, 1, v46, v48, (uint64_t)&qword_100099AC8, (void (*)(uint64_t, uint64_t, uint64_t))sub_10000928C, &qword_10009A0B8);
  sub_1000092D0((uint64_t)v7, &qword_100099AC8);
  if (*((_QWORD *)v2 + 1))
  {
    swift_retain();
    v49 = (uint64_t)sub_10002AE28();
    swift_release();
    if ((unint64_t)v49 >> 62)
      goto LABEL_12;
    v50 = *(_QWORD *)((v49 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v50)
    {
      while ((v49 & 0xC000000000000001) == 0)
      {
        v51 = *(_QWORD *)((v49 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRelease(v49);
        if (v51)
          goto LABEL_19;
        __break(1u);
LABEL_12:
        if (v49 < 0)
          v52 = v49;
        else
          v52 = v49 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v49);
        v50 = _CocoaArrayWrapper.endIndex.getter(v52);
        swift_bridgeObjectRelease(v49);
        if (!v50)
          goto LABEL_18;
      }
      v53 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v49);
      swift_unknownObjectRelease(v53);
    }
LABEL_18:
    swift_bridgeObjectRelease(v49);
LABEL_19:
    if (qword_1000981F8 != -1)
      swift_once(&qword_1000981F8, sub_100024D98);
    v54 = v59;
    sub_100034AA8(v50 != 0, qword_10009B5E0, *(uint64_t *)algn_10009B5E8, &qword_10009A060, &qword_10009A0B8, (uint64_t (*)(void))sub_1000518C4, v59);
    swift_release();
    swift_release();
    sub_1000092D0(v47, &qword_10009A0B8);
    return sub_10000930C(v54, v60, &qword_10009A060);
  }
  else
  {
    v56 = *((_QWORD *)v2 + 2);
    v57 = type metadata accessor for TextFormattingState(0);
    v58 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    result = EnvironmentObject.error()(0, v56, v57, v58);
    __break(1u);
  }
  return result;
}

uint64_t sub_100047030@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = sub_10000498C(&qword_10009A0C8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(a1 + 1) & 1) == 0)
  {
    if (qword_100098268 != -1)
      swift_once(&qword_100098268, sub_10002E7A8);
    v8 = swift_bridgeObjectRetain(qword_10009B650);
    goto LABEL_7;
  }
  if (*(_QWORD *)(a1 + 8))
  {
    KeyPath = swift_getKeyPath(&unk_100075880);
    swift_getKeyPath(&unk_1000758A8);
    v10 = swift_retain();
    static Published.subscript.getter(&v25, v10, KeyPath);
    swift_release();
    swift_release();
    swift_release();
    v8 = v25;
LABEL_7:
    v25 = v8;
    v11 = swift_getKeyPath(&unk_100075908);
    v12 = (_OWORD *)swift_allocObject(&unk_100090070, 112, 7);
    v13 = *(_OWORD *)(a1 + 48);
    v12[3] = *(_OWORD *)(a1 + 32);
    v12[4] = v13;
    v14 = *(_OWORD *)(a1 + 80);
    v12[5] = *(_OWORD *)(a1 + 64);
    v12[6] = v14;
    v15 = *(_OWORD *)(a1 + 16);
    v12[1] = *(_OWORD *)a1;
    v12[2] = v15;
    sub_100051D8C(a1, (void (*)(uint64_t, uint64_t))sub_1000527AC, (void (*)(uint64_t, uint64_t))sub_1000527AC);
    v16 = sub_10000498C(&qword_100098B70);
    v17 = sub_10000498C(&qword_10009A0E8);
    v18 = sub_10000966C(&qword_10009A160, &qword_100098B70, (uint64_t)&protocol conformance descriptor for [A]);
    v19 = sub_1000519A4();
    ForEach<>.init(_:id:content:)(&v25, v11, sub_100051D84, v12, v16, v17, v18, &protocol witness table for String, v19);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v7, v4);
  }
  v21 = *(_QWORD *)(a1 + 16);
  v22 = type metadata accessor for TextFormattingState(0);
  v23 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
  result = EnvironmentObject.error()(0, v21, v22, v23);
  __break(1u);
  return result;
}

void sub_100047280(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = objc_msgSend(*a1, "styleKey");
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  *a2 = v4;
  a2[1] = v6;
}

uint64_t sub_1000472D4@<X0>(void **a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t OpaqueTypeConformance2;
  uint64_t v56;
  char *v57;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69[16];
  id v70;
  _OWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v68 = a3;
  v5 = type metadata accessor for ButtonToggleStyle(0);
  v6 = *(_QWORD *)(v5 - 8);
  v64 = v5;
  v65 = v6;
  __chkstk_darwin(v5);
  v61 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10000498C(&qword_10009A0F0);
  v9 = *(_QWORD *)(v8 - 8);
  v62 = v8;
  v63 = v9;
  __chkstk_darwin(v8);
  v11 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10000498C(&qword_10009A168);
  v13 = *(_QWORD *)(v12 - 8);
  v66 = v12;
  v67 = v13;
  __chkstk_darwin(v12);
  v60 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *a1;
  type metadata accessor for MainActor(0);
  sub_100051D8C((uint64_t)a2, (void (*)(uint64_t, uint64_t))sub_1000527AC, (void (*)(uint64_t, uint64_t))sub_1000527AC);
  v16 = v15;
  v17 = static MainActor.shared.getter(v16);
  v18 = swift_allocObject(&unk_100090098, 136, 7);
  *(_QWORD *)(v18 + 16) = v17;
  *(_QWORD *)(v18 + 24) = &protocol witness table for MainActor;
  v19 = a2[3];
  *(_OWORD *)(v18 + 64) = a2[2];
  *(_OWORD *)(v18 + 80) = v19;
  v20 = a2[5];
  *(_OWORD *)(v18 + 96) = a2[4];
  *(_OWORD *)(v18 + 112) = v20;
  v21 = a2[1];
  *(_OWORD *)(v18 + 32) = *a2;
  *(_OWORD *)(v18 + 48) = v21;
  *(_QWORD *)(v18 + 128) = v16;
  sub_100051D8C((uint64_t)a2, (void (*)(uint64_t, uint64_t))sub_1000527AC, (void (*)(uint64_t, uint64_t))sub_1000527AC);
  v22 = v16;
  v23 = static MainActor.shared.getter(v22);
  v24 = swift_allocObject(&unk_1000900C0, 136, 7);
  *(_QWORD *)(v24 + 16) = v23;
  *(_QWORD *)(v24 + 24) = &protocol witness table for MainActor;
  v25 = a2[3];
  *(_OWORD *)(v24 + 64) = a2[2];
  *(_OWORD *)(v24 + 80) = v25;
  v26 = a2[5];
  *(_OWORD *)(v24 + 96) = a2[4];
  *(_OWORD *)(v24 + 112) = v26;
  v27 = a2[1];
  *(_OWORD *)(v24 + 32) = *a2;
  *(_OWORD *)(v24 + 48) = v27;
  *(_QWORD *)(v24 + 128) = v22;
  Binding.init(get:set:)(&v72, sub_100051E44, v18, sub_100051EC0, v24, &type metadata for Bool);
  v28 = v72;
  v29 = v73;
  v30 = v74;
  v70 = v22;
  v71 = a2;
  swift_retain();
  swift_retain();
  v31 = sub_10000498C(&qword_10009A170);
  v32 = sub_10000966C(&qword_10009A178, &qword_10009A170, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  v33 = Toggle.init(isOn:label:)(v28, v29, v30, sub_100051ED0, v69, v31, v32);
  v34 = v61;
  ButtonToggleStyle.init()(v33);
  v35 = sub_10000966C(&qword_10009A0F8, &qword_10009A0F0, (uint64_t)&protocol conformance descriptor for Toggle<A>);
  v36 = sub_100007D90(&qword_10009A100, (uint64_t (*)(uint64_t))&type metadata accessor for ButtonToggleStyle, (uint64_t)&protocol conformance descriptor for ButtonToggleStyle);
  v37 = v62;
  v38 = v64;
  View.toggleStyle<A>(_:)(v34, v62, v64, v35, v36);
  v39 = v34;
  v40 = v38;
  (*(void (**)(char *, uint64_t))(v65 + 8))(v39, v38);
  v41 = v11;
  v42 = v37;
  (*(void (**)(char *, uint64_t))(v63 + 8))(v41, v37);
  v43 = objc_msgSend(v22, "title");
  v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
  v46 = v45;

  v72 = v44;
  v73 = v46;
  v47 = sub_100008EDC();
  v48 = Text.init<A>(_:)(&v72, &type metadata for String, v47);
  v50 = v49;
  v52 = v51;
  v72 = v42;
  v73 = v40;
  v54 = v53 & 1;
  v74 = v35;
  v75 = v36;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v72, &opaque type descriptor for <<opaque return type of View.toggleStyle<A>(_:)>>, 1);
  v56 = v66;
  v57 = v60;
  View.accessibilityLabel(_:)(v48, v50, v54, v52, v66, OpaqueTypeConformance2);
  sub_100008F20(v48, v50, v54);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease(v52);
  return (*(uint64_t (**)(char *, uint64_t))(v67 + 8))(v57, v56);
}

void sub_1000476C0(uint64_t a1@<X2>, void *a2@<X3>, _BYTE *a3@<X8>)
{
  _QWORD *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*(_QWORD *)(a1 + 8))
  {
    swift_retain();
    v5 = sub_10002AE28();
    swift_release();
    v6 = a2;
    LOBYTE(a2) = sub_10004B90C((unint64_t)v5, v6, (SEL *)&selRef_styleKey);
    swift_bridgeObjectRelease(v5);

    *a3 = a2 & 1;
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 16);
    v8 = type metadata accessor for TextFormattingState(0);
    v9 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    EnvironmentObject.error()(0, v7, v8, v9);
    __break(1u);
  }
}

uint64_t sub_10004778C(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  if (*(_QWORD *)(a4 + 8))
  {
    if ((*a1 & 1) != 0)
    {
      v6 = sub_10000498C(&qword_100098B10);
      v7 = swift_allocObject(v6, 40, 7);
      *(_OWORD *)(v7 + 16) = xmmword_1000738A0;
      *(_QWORD *)(v7 + 32) = a5;
      v17 = (_QWORD *)v7;
      specialized Array._endMutation()(v7);
      v8 = v17;
      swift_retain();
    }
    else
    {
      if ((*(_BYTE *)(a4 + 1) & 1) != 0)
      {
        swift_retain();
        v8 = _swiftEmptyArrayStorage;
        goto LABEL_10;
      }
      v9 = sub_10000498C(&qword_100098B10);
      v8 = (_QWORD *)swift_allocObject(v9, 40, 7);
      *((_OWORD *)v8 + 1) = xmmword_1000738A0;
      v10 = qword_100098230;
      v11 = swift_retain();
      if (v10 != -1)
        v11 = swift_once(&qword_100098230, sub_10002E054);
      a5 = (void *)qword_10009B618;
      v8[4] = qword_10009B618;
      specialized Array._endMutation()(v11);
    }
    v12 = a5;
LABEL_10:
    sub_10002B0EC((uint64_t)v8);
    return swift_release();
  }
  v14 = *(_QWORD *)(a4 + 16);
  v15 = type metadata accessor for TextFormattingState(0);
  v16 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
  result = EnvironmentObject.error()(0, v14, v15, v16);
  __break(1u);
  return result;
}

uint64_t sub_1000478F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[4];
  _BYTE v6[16];
  uint64_t v7;

  v7 = a1;
  v5[2] = a2;
  v5[3] = a1;
  v2 = sub_10000498C(&qword_10009A180);
  v3 = sub_100051EE8(&qword_10009A188, &qword_10009A180, (uint64_t)&protocol witness table for Image, (uint64_t)&protocol conformance descriptor for <A> A?);
  return Label.init(title:icon:)(sub_100051ED8, v6, sub_100051EE0, v5, &type metadata for Text, v2, &protocol witness table for Text, v3);
}

uint64_t sub_100047994@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  char v10;
  uint64_t v11;
  _QWORD v12[2];

  v3 = objc_msgSend(a1, "title");
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  v12[0] = v4;
  v12[1] = v6;
  v7 = sub_100008EDC();
  result = Text.init<A>(_:)(v12, &type metadata for String, v7);
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v9;
  *(_BYTE *)(a2 + 16) = v10 & 1;
  *(_QWORD *)(a2 + 24) = v11;
  return result;
}

uint64_t sub_100047A14@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  unint64_t v12;
  char v13;
  id v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    swift_retain();
    v6 = objc_msgSend(a2, "styleKey");
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    v9 = v8;

    KeyPath = swift_getKeyPath(&unk_100075930);
    swift_getKeyPath(&unk_100075958);
    static Published.subscript.getter(&v19, v3, KeyPath);
    swift_release();
    swift_release();
    swift_release();
    v11 = v19;
    if (*(_QWORD *)(v19 + 16) && (v12 = sub_1000171E8(v7, v9), (v13 & 1) != 0))
    {
      v14 = *(id *)(*(_QWORD *)(v11 + 56) + 8 * v12);
      swift_bridgeObjectRelease(v9);
      swift_bridgeObjectRelease(v11);
      result = Image.init(uiImage:)(v14);
    }
    else
    {
      swift_bridgeObjectRelease(v9);
      swift_bridgeObjectRelease(v11);
      result = 0;
    }
    *a3 = result;
  }
  else
  {
    v16 = *(_QWORD *)(a1 + 16);
    v17 = type metadata accessor for TextFormattingState(0);
    v18 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    result = EnvironmentObject.error()(0, v16, v17, v18);
    __break(1u);
  }
  return result;
}

uint64_t sub_100047B78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  char v9;
  _QWORD v10[2];

  sub_100047C20(a1, a2);
  v3 = (int *)sub_10000498C(&qword_10009A0C0);
  v4 = a2 + v3[9];
  v9 = 0;
  State.init(wrappedValue:)(v10, &v9, &type metadata for Bool);
  v5 = v10[1];
  *(_BYTE *)v4 = v10[0];
  *(_QWORD *)(v4 + 8) = v5;
  v6 = a2 + v3[10];
  *(_QWORD *)v6 = swift_getKeyPath(&unk_100074C50);
  *(_BYTE *)(v6 + 8) = 0;
  v7 = a2 + v3[11];
  result = swift_getKeyPath(&unk_100074BF8);
  *(_QWORD *)v7 = result;
  *(_BYTE *)(v7 + 8) = 0;
  return result;
}

uint64_t sub_100047C20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v33 = a2;
  v34 = sub_10000498C(&qword_10009A120);
  __chkstk_darwin(v34);
  v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_10000498C(&qword_10009A128);
  __chkstk_darwin(v31);
  v32 = (uint64_t)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (int *)type metadata accessor for TFSymbol(0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v30 - v10;
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(unsigned __int8 *)(a1 + 32);
  v14 = *(unsigned __int8 *)(a1 + 33);
  sub_10001D970(v12, v13, *(_BYTE *)(a1 + 33));
  v15 = sub_1000119BC(v12, v13 | (v14 << 8));
  v17 = v16;
  v18 = sub_10001D9CC(v12, v13, v14);
  if ((v17 & 1) != 0 || v15 > 1)
  {
    *(_QWORD *)v4 = static VerticalAlignment.center.getter(v18);
    *((_QWORD *)v4 + 1) = 0;
    v4[16] = 0;
    v26 = sub_10000498C(&qword_10009A130);
    sub_100047F48(a1, (uint64_t)&v4[*(int *)(v26 + 44)]);
    v27 = v32;
    sub_10000928C((uint64_t)v4, v32, &qword_10009A120);
    swift_storeEnumTagMultiPayload(v27, v31, 1);
    v28 = sub_100007D90(&qword_100099C00, type metadata accessor for TFSymbol, (uint64_t)&unk_100075D10);
    v29 = sub_10000966C(&qword_10009A138, &qword_10009A120, (uint64_t)&protocol conformance descriptor for HStack<A>);
    _ConditionalContent<>.init(storage:)(v27, v6, v34, v28, v29);
    return sub_1000092D0((uint64_t)v4, &qword_10009A120);
  }
  else
  {
    v19 = static Font.title3.getter(v18);
    static SymbolRenderingMode.hierarchical.getter(v19);
    *(_OWORD *)v9 = xmmword_100074B40;
    *((_QWORD *)v9 + 2) = 0;
    *((_QWORD *)v9 + 3) = 0;
    v9[32] = 0;
    *((_QWORD *)v9 + 5) = v19;
    *((_QWORD *)v9 + 6) = 0;
    v9[v6[10]] = 1;
    v9[v6[11]] = 1;
    v20 = &v9[v6[12]];
    *(_QWORD *)v20 = swift_getKeyPath(&unk_100075348);
    v20[8] = 0;
    v21 = &v9[v6[13]];
    *(_QWORD *)v21 = swift_getKeyPath(&unk_100074C20);
    v21[8] = 0;
    sub_100008F30((uint64_t)v9, (uint64_t)v11, type metadata accessor for TFSymbol);
    v22 = v32;
    sub_10000920C((uint64_t)v11, v32, type metadata accessor for TFSymbol);
    swift_storeEnumTagMultiPayload(v22, v31, 0);
    v23 = sub_100007D90(&qword_100099C00, type metadata accessor for TFSymbol, (uint64_t)&unk_100075D10);
    v24 = sub_10000966C(&qword_10009A138, &qword_10009A120, (uint64_t)&protocol conformance descriptor for HStack<A>);
    _ConditionalContent<>.init(storage:)(v22, v6, v34, v23, v24);
    return sub_100009250((uint64_t)v11, type metadata accessor for TFSymbol);
  }
}

uint64_t sub_100047F48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t KeyPath;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  void *v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  char v47;
  double v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE v69[208];
  _OWORD v70[12];
  uint64_t v71;
  _OWORD v72[12];
  uint64_t v73;
  uint64_t v74;
  _QWORD v75[28];
  char v76;
  uint64_t v77;
  char v78;
  char v79;
  double v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;

  v65 = a2;
  v67 = type metadata accessor for Image.Scale(0);
  v3 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67);
  v5 = (char *)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (int *)type metadata accessor for TFSymbol(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10000498C(&qword_10009A140);
  v10 = __chkstk_darwin(v9);
  v64 = (uint64_t)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v64 - v13;
  __chkstk_darwin(v12);
  v66 = (uint64_t)&v64 - v15;
  v68 = a1;
  if (!*(_QWORD *)(a1 + 8))
    goto LABEL_22;
  swift_retain();
  v16 = sub_10002BB94();
  swift_release();
  v75[0] = Color.init(uiColor:)(v16);
  v17 = AnyShapeStyle.init<A>(_:)(v75, &type metadata for Color, &protocol witness table for Color);
  v18 = static Font.title3.getter(v17);
  static SymbolRenderingMode.hierarchical.getter(v18);
  *(_OWORD *)v8 = xmmword_100074B50;
  *((_QWORD *)v8 + 2) = 0;
  *((_QWORD *)v8 + 3) = 0;
  v8[32] = 0;
  *((_QWORD *)v8 + 5) = v18;
  *((_QWORD *)v8 + 6) = v17;
  v8[v6[10]] = 1;
  v8[v6[11]] = 1;
  v19 = &v8[v6[12]];
  *(_QWORD *)v19 = swift_getKeyPath(&unk_100075348);
  v19[8] = 0;
  v20 = &v8[v6[13]];
  *(_QWORD *)v20 = swift_getKeyPath(&unk_100074C20);
  v20[8] = 0;
  v21 = v67;
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for Image.Scale.small(_:), v67);
  KeyPath = swift_getKeyPath(&unk_1000758C8);
  v23 = (uint64_t *)&v14[*(int *)(v9 + 36)];
  v24 = sub_10000498C(&qword_10009A148);
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))((char *)v23 + *(int *)(v24 + 28), v5, v21);
  *v23 = KeyPath;
  sub_10000920C((uint64_t)v8, (uint64_t)v14, type metadata accessor for TFSymbol);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v21);
  sub_100009250((uint64_t)v8, type metadata accessor for TFSymbol);
  v25 = v66;
  sub_10000930C((uint64_t)v14, v66, &qword_10009A140);
  swift_retain();
  v26 = (uint64_t)sub_10002AE28();
  v27 = v26;
  if ((unint64_t)v26 >> 62)
  {
    if (v26 >= 0)
      v26 &= 0xFFFFFFFFFFFFFF8uLL;
    v31 = _CocoaArrayWrapper.endIndex.getter(v26);
    v28 = v68;
    if (v31)
      goto LABEL_4;
LABEL_11:
    swift_bridgeObjectRelease(v27);
    v30 = (void *)sub_10002BA00();
    swift_release();
    if (!v30)
      goto LABEL_14;
    goto LABEL_12;
  }
  v28 = v68;
  if (!*(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_11;
LABEL_4:
  if ((v27 & 0xC000000000000001) != 0)
  {
    v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v27);
    goto LABEL_7;
  }
  if (*(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v29 = *(id *)(v27 + 32);
LABEL_7:
    v30 = v29;
    swift_release();
    swift_bridgeObjectRelease(v27);
LABEL_12:
    v32 = objc_msgSend(v30, "title");

    v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    v35 = v34;

    if ((*(_BYTE *)v28 & 1) != 0)
    {
      v40 = *(_QWORD *)(v28 + 24);
      v41 = *(unsigned __int8 *)(v28 + 32);
      v42 = *(unsigned __int8 *)(v28 + 33);
      sub_10001D970(v40, v41, *(_BYTE *)(v28 + 33));
      v43 = sub_1000119BC(v40, v41 | (v42 << 8));
      v45 = v44;
      sub_10001D9CC(v40, v41, v42);
      if ((v45 & 1) == 0 && v43 >= 4)
      {
        v46 = *(_QWORD *)(v28 + 40);
        v47 = *(_BYTE *)(v28 + 48);
        sub_10001D97C(v46, v47);
        v48 = sub_100011D48(v46, v47);
        sub_10001D9D8(v46, v47);
        if (*(double *)(v28 + 88) < v48)
        {
          v49 = swift_getKeyPath(&unk_100074C20);
          v50 = static Edge.Set.horizontal.getter(v49);
          v51 = *(_QWORD *)(v28 + 56);
          v52 = *(_BYTE *)(v28 + 64);
          sub_10001D97C(v51, v52);
          sub_1000117FC(v51, v52);
          v53 = sub_10001D9D8(v51, v52);
          v54 = EdgeInsets.init(_all:)(v53, 11.0);
          v75[26] = v33;
          v75[27] = v35;
          v76 = 0;
          v77 = v49;
          v78 = 0;
          v79 = v50;
          v80 = v54;
          v81 = v55;
          v82 = v56;
          v83 = v57;
          v84 = 0;
          v59 = static Alignment.leading.getter(v58);
          sub_100031684(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v70, 0.0, 1, 0.0, 1, v59, v60);
          swift_release();
          swift_bridgeObjectRelease(v35);
          v72[10] = v70[10];
          v72[11] = v70[11];
          v72[6] = v70[6];
          v72[7] = v70[7];
          v72[8] = v70[8];
          v72[9] = v70[9];
          v72[2] = v70[2];
          v72[3] = v70[3];
          v72[4] = v70[4];
          v72[5] = v70[5];
          v72[0] = v70[0];
          v72[1] = v70[1];
          v73 = v71;
          v74 = 0x3FF0000000000000;
          nullsub_1(v72);
          goto LABEL_15;
        }
      }
    }
    swift_bridgeObjectRelease(v35);
LABEL_14:
    sub_100051BA4(v72);
LABEL_15:
    sub_10000930C((uint64_t)v72, (uint64_t)v75, &qword_10009A150);
    v36 = v64;
    sub_10000928C(v25, v64, &qword_10009A140);
    sub_10000930C((uint64_t)v75, (uint64_t)v69, &qword_10009A150);
    v37 = v65;
    sub_10000928C(v36, v65, &qword_10009A140);
    v38 = v37 + *(int *)(sub_10000498C(&qword_10009A158) + 48);
    sub_10000930C((uint64_t)v69, (uint64_t)v70, &qword_10009A150);
    sub_10000930C((uint64_t)v70, v38, &qword_10009A150);
    sub_100051C00(v70, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100051BC8);
    sub_1000092D0(v25, &qword_10009A140);
    sub_10000930C((uint64_t)v69, (uint64_t)v72, &qword_10009A150);
    sub_100051C00(v72, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100051C6C);
    return sub_1000092D0(v36, &qword_10009A140);
  }
  __break(1u);
LABEL_22:
  v61 = *(_QWORD *)(v68 + 16);
  v62 = type metadata accessor for TextFormattingState(0);
  v63 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
  result = EnvironmentObject.error()(0, v61, v62, v63);
  __break(1u);
  return result;
}

uint64_t sub_1000485B8()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if ((*(_BYTE *)(v0 + 1) & 1) == 0)
    goto LABEL_6;
  if (*(_QWORD *)(v0 + 8))
  {
    KeyPath = swift_getKeyPath(&unk_100075880);
    swift_getKeyPath(&unk_1000758A8);
    v2 = swift_retain();
    static Published.subscript.getter(&v14, v2, KeyPath);
    swift_release();
    swift_release();
    swift_release();
    v3 = v14;
    if ((unint64_t)v14 >> 62)
    {
      if (v14 < 0)
        v10 = v14;
      else
        v10 = v14 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v14);
      v4 = _CocoaArrayWrapper.endIndex.getter(v10);
      swift_bridgeObjectRelease(v3);
    }
    else
    {
      v4 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease(v3);
    if (!v4)
    {
      v8 = 1;
      return v8 & 1;
    }
LABEL_6:
    v5 = *(_QWORD *)(v0 + 72);
    v6 = *(_BYTE *)(v0 + 80);
    sub_10001D97C(v5, v6);
    v7 = sub_100011B90(v5, v6);
    sub_10001D9D8(v5, v6);
    v8 = v7 ^ 1;
    return v8 & 1;
  }
  v11 = *(_QWORD *)(v0 + 16);
  v12 = type metadata accessor for TextFormattingState(0);
  v13 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
  result = EnvironmentObject.error()(0, v11, v12, v13);
  __break(1u);
  return result;
}

uint64_t sub_100048710@<X0>(uint64_t a1@<X2>, BOOL *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (*(_QWORD *)(a1 + 8))
  {
    swift_retain();
    v3 = (uint64_t)sub_10002AE28();
    swift_release();
    if ((unint64_t)v3 >> 62)
      goto LABEL_7;
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v4)
    {
      while ((v3 & 0xC000000000000001) == 0)
      {
        v5 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
        result = swift_bridgeObjectRelease(v3);
        if (v5)
          goto LABEL_14;
        __break(1u);
LABEL_7:
        if (v3 < 0)
          v7 = v3;
        else
          v7 = v3 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v3);
        v4 = _CocoaArrayWrapper.endIndex.getter(v7);
        swift_bridgeObjectRelease(v3);
        if (!v4)
          goto LABEL_13;
      }
      v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v3);
      swift_unknownObjectRelease(v8);
    }
LABEL_13:
    result = swift_bridgeObjectRelease(v3);
LABEL_14:
    *a2 = v4 != 0;
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 16);
    v10 = type metadata accessor for TextFormattingState(0);
    v11 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    result = EnvironmentObject.error()(0, v9, v10, v11);
    __break(1u);
  }
  return result;
}

void sub_100048824(unsigned __int8 *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  void *v7;
  id v8;
  int v9;
  uint64_t KeyPath;
  id v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;

  v4 = a4;
  v5 = a4[1];
  if (!v5)
    goto LABEL_35;
  v6 = *a1;
  swift_retain();
  v7 = (void *)sub_10002BA00();
  swift_release();
  if ((*((_BYTE *)v4 + 1) & 1) == 0)
  {
    if (!v6)
    {
      if (qword_100098230 != -1)
        swift_once(&qword_100098230, sub_10002E054);
      v4 = (_QWORD *)qword_10009B618;
      v18 = (id)qword_10009B618;
      goto LABEL_24;
    }
    if ((*(_BYTE *)v4 & 1) == 0)
    {
      if (qword_100098238 != -1)
        swift_once(&qword_100098238, sub_10002E160);
      v4 = (_QWORD *)qword_10009B620;
      v8 = (id)qword_10009B620;
      goto LABEL_24;
    }
    if (v7)
    {
      v19 = v7;
      v4 = v7;
      goto LABEL_24;
    }
    goto LABEL_25;
  }
  if (v7)
    v9 = v6;
  else
    v9 = 0;
  if (v9 != 1)
  {
LABEL_25:
    v4 = 0;
LABEL_26:
    v22 = _swiftEmptyArrayStorage;
    goto LABEL_27;
  }
  KeyPath = swift_getKeyPath(&unk_100075880);
  swift_getKeyPath(&unk_1000758A8);
  swift_retain();
  v11 = v7;
  static Published.subscript.getter(&v28, v5, KeyPath);
  swift_release();
  swift_release();
  swift_release();
  v12 = v28;
  v13 = sub_10000666C((uint64_t)v11, v28);
  swift_bridgeObjectRelease(v12);
  v4 = v7;
  if ((v13 & 1) != 0)
  {
LABEL_24:
    v20 = sub_10000498C(&qword_100098B10);
    v21 = swift_allocObject(v20, 40, 7);
    *(_OWORD *)(v21 + 16) = xmmword_1000738A0;
    *(_QWORD *)(v21 + 32) = v4;
    v28 = v21;
    specialized Array._endMutation()(v21);
    v22 = (_QWORD *)v28;
LABEL_27:
    v23 = v4;
    swift_retain();
    sub_10002B0EC((uint64_t)v22);
    swift_release();

    return;
  }
  v14 = swift_getKeyPath(&unk_100075880);
  swift_getKeyPath(&unk_1000758A8);
  v15 = swift_retain();
  static Published.subscript.getter(&v28, v15, v14);
  swift_release();
  swift_release();
  swift_release();
  v16 = v28;
  if (v28 >> 62)
  {
    if ((v28 & 0x8000000000000000) != 0)
      v24 = v28;
    else
      v24 = v28 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v28);
    v4 = (_QWORD *)_CocoaArrayWrapper.endIndex.getter(v24);
    swift_bridgeObjectRelease(v16);
    if (v4)
      goto LABEL_15;
LABEL_32:

    swift_bridgeObjectRelease(v16);
    goto LABEL_26;
  }
  v4 = *(_QWORD **)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v4)
    goto LABEL_32;
LABEL_15:
  if ((v16 & 0xC000000000000001) != 0)
  {
    v17 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v16);
    goto LABEL_18;
  }
  if (*(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v17 = *(id *)(v16 + 32);
LABEL_18:
    v4 = v17;

    swift_bridgeObjectRelease(v16);
    goto LABEL_24;
  }
  __break(1u);
LABEL_35:
  v25 = v4[2];
  v26 = type metadata accessor for TextFormattingState(0);
  v27 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
  EnvironmentObject.error()(0, v25, v26, v27);
  __break(1u);
}

_QWORD *sub_100048B40@<X0>(uint64_t a1@<X8>)
{
  return sub_10004620C(a1);
}

uint64_t sub_100048B80@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t KeyPath;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  char v29;
  char v30;
  NSString v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  _BYTE *v35;
  _BYTE *v36;
  _BYTE *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE v51[4];
  int v52;
  uint64_t v53;
  void *v54;
  _BYTE *v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;

  v2 = v1;
  v4 = (int *)sub_10000498C(&qword_100099790);
  __chkstk_darwin(v4);
  v6 = &v51[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_10000498C(&qword_100099798);
  __chkstk_darwin(v7);
  v9 = &v51[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = sub_10000498C(&qword_1000997A0);
  __chkstk_darwin(v10);
  v12 = &v51[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = *(id *)v2;
  v14 = objc_msgSend(*(id *)v2, "_textAnimationName");
  if (v14
    && (v14,
        v15 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice"),
        v16 = objc_msgSend(v15, "userInterfaceIdiom"),
        v15,
        v16 != (id)6))
  {
    static HoverEffect.lift.getter(v17);
    v19 = type metadata accessor for HoverEffect(0);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v12, 0, 1, v19);
  }
  else
  {
    v18 = type metadata accessor for HoverEffect(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v12, 1, 1, v18);
  }
  v20 = *(_QWORD *)(v2 + 40);
  v21 = *(_BYTE *)(v2 + 48);
  sub_10001D97C(v20, v21);
  v52 = sub_1000117FC(v20, v21);
  sub_10001D9D8(v20, v21);
  v22 = *(_QWORD *)(v2 + 8);
  if (v22)
  {
    v54 = v13;
    KeyPath = swift_getKeyPath(&unk_100075290);
    swift_getKeyPath(&unk_1000752B8);
    v24 = swift_retain();
    static Published.subscript.getter(&v58, v24, KeyPath);
    swift_release();
    swift_release();
    swift_release();
    v25 = v58;
    v26 = v59;
    v27 = *(_BYTE *)(v22 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_isInPopoverPresentation);
    v55 = v9;
    v56 = a1;
    v28 = (uint64_t)v12;
    if ((v27 & 1) != 0)
      v29 = 0;
    else
      v29 = *(_BYTE *)(v22 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_hasParentViewController) ^ 1;
    v53 = OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_useReducedMetrics;
    v30 = *(_BYTE *)(v22 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_useReducedMetrics);
    v31 = String._bridgeToObjectiveC()();
    sub_100066310((uint64_t)v31, v25, v26, v29 & 1, v30, v52);
    v33 = v32;

    *(_QWORD *)v6 = v33;
    *((_WORD *)v6 + 4) = 256;
    sub_10000928C(v28, (uint64_t)&v6[v4[10]], &qword_1000997A0);
    sub_10004900C((void **)v2, (uint64_t)&v6[v4[11]]);
    v34 = &v6[v4[12]];
    *(_QWORD *)v34 = swift_getKeyPath(&unk_100074C50);
    v34[8] = 0;
    v35 = &v6[v4[13]];
    *(_QWORD *)v35 = swift_getKeyPath(&unk_100074BF8);
    v35[8] = 0;
    v36 = &v6[v4[14]];
    *(_QWORD *)v36 = swift_getKeyPath(&unk_1000752D8);
    v36[8] = 0;
    v37 = &v6[v4[15]];
    v57 = 0;
    State.init(wrappedValue:)(&v58, &v57, &type metadata for Bool);
    v38 = v59;
    *v37 = v58;
    *((_QWORD *)v37 + 1) = v38;
    v39 = sub_10004E99C(v54);
    v41 = v40;
    v42 = sub_10000966C(&qword_1000997A8, &qword_100099790, (uint64_t)&unk_100075FB0);
    v43 = (uint64_t)v55;
    View.accessibilityIdentifier(_:)(v39, v41, v4, v42);
    swift_bridgeObjectRelease(v41);
    sub_1000092D0((uint64_t)v6, &qword_100099790);
    v44 = swift_getKeyPath(&unk_1000752D8);
    LOBYTE(v39) = *(_BYTE *)(v22 + v53);
    v45 = v56;
    sub_10000928C(v43, v56, &qword_100099798);
    v46 = v45 + *(int *)(sub_10000498C(&qword_1000997B0) + 36);
    *(_QWORD *)v46 = v44;
    *(_BYTE *)(v46 + 8) = v39;
    sub_1000092D0(v43, &qword_100099798);
    return sub_1000092D0(v28, &qword_1000997A0);
  }
  else
  {
    v48 = *(_QWORD *)(v2 + 16);
    v49 = type metadata accessor for TextFormattingState(0);
    v50 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    result = EnvironmentObject.error()(0, v48, v49, v50);
    __break(1u);
  }
  return result;
}

uint64_t sub_10004900C@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (**v33)(char *, uint64_t);
  uint64_t v34;
  char *v35;
  id v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t OpaqueTypeConformance2;
  uint64_t v56;
  uint64_t result;
  _QWORD *v58;
  id v59;
  void *v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(_QWORD *, uint64_t, uint64_t);
  int v69;
  BOOL v70;
  int *v71;
  char v72;
  id v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  id *v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  int *v96;
  char *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t (**v100)();
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  int *v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  char v126;
  char v127;
  id v128;
  uint64_t v129;
  uint64_t v130;
  id v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  char v137;
  uint64_t *v138;
  char *v139;
  char *v140;
  uint64_t KeyPath;
  uint64_t v142;
  _QWORD *v143;
  int v144;
  uint64_t v145;
  char v146;
  uint64_t v147;
  id v148;
  uint64_t v149;
  id v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  char *v170;
  char *v171;
  uint64_t v172;
  _QWORD *v173;
  int *v174;
  _QWORD *v175;
  uint64_t v176;
  _WORD *v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  void (**v187)(char *, uint64_t);
  char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  char v196;
  __int128 v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  char v201;
  uint64_t v202;
  __int16 v203;

  v194 = a2;
  v182 = sub_10000498C(&qword_1000997C0);
  __chkstk_darwin(v182);
  v183 = (uint64_t)&v169 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v179 = sub_10000498C(&qword_1000997C8);
  __chkstk_darwin(v179);
  v177 = (_WORD *)((char *)&v169 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v181 = sub_10000498C(&qword_1000997D0);
  v5 = __chkstk_darwin(v181);
  v176 = (uint64_t)&v169 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v178 = (uint64_t)&v169 - v7;
  v185 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor(0);
  v184 = *(_QWORD *)(v185 - 8);
  __chkstk_darwin(v185);
  v171 = (char *)&v169 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10000498C(&qword_100098FC8);
  v10 = __chkstk_darwin(v9);
  v175 = (char **)((char *)&v169 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = __chkstk_darwin(v10);
  v172 = (uint64_t)&v169 - v13;
  v14 = __chkstk_darwin(v12);
  v173 = (char **)((char *)&v169 - v15);
  __chkstk_darwin(v14);
  v180 = (char *)&v169 - v16;
  v174 = (int *)type metadata accessor for TFToggle(0);
  __chkstk_darwin(v174);
  v18 = (char *)&v169 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10000498C(&qword_1000997D8);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v169 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v24 = (char *)&v169 - v23;
  v190 = sub_10000498C(&qword_1000997E0);
  __chkstk_darwin(v190);
  v193 = (char *)&v169 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v191 = sub_10000498C(&qword_1000997E8);
  v187 = *(void (***)(char *, uint64_t))(v191 - 8);
  __chkstk_darwin(v191);
  v27 = (char *)&v169 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_10000498C(&qword_1000997F0);
  v189 = *(_QWORD *)(v28 - 8);
  v29 = __chkstk_darwin(v28);
  v186 = (char *)&v169 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v188 = (char *)&v169 - v31;
  v192 = sub_10000498C(&qword_1000997F8);
  __chkstk_darwin(v192);
  v33 = (void (**)(char *, uint64_t))((char *)&v169 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
  v34 = (uint64_t)a1;
  v35 = (char *)*a1;
  v36 = objc_msgSend(v35, "_subcomponents");
  if (v36)
  {
    v37 = v36;
    v38 = sub_1000096AC(0, &qword_100099840, _UITextFormattingViewControllerCustomComponent_ptr);
    v39 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v37, v38);

    v41 = __chkstk_darwin(v40);
    *(&v169 - 2) = (char *)v39;
    *(&v169 - 1) = (char *)v34;
    __chkstk_darwin(v41);
    *(&v169 - 2) = (char *)v34;
    v42 = sub_10000498C(&qword_100099848);
    v43 = sub_10000498C(&qword_100099850);
    v44 = sub_10000966C(&qword_100099858, &qword_100099848, (uint64_t)&unk_100075E88);
    v45 = sub_100051940(&qword_100099860, &qword_100099850, (void (*)(void))sub_10004ECEC, (uint64_t)&protocol conformance descriptor for <> ForEach<A, B, C>);
    Menu.init(content:label:)(sub_10004ECDC, &v169 - 4, sub_10004ECE4, &v169 - 4, v42, v43, v44, v45);
    swift_bridgeObjectRelease(v39);
    LOBYTE(v202) = 0;
    State.init(wrappedValue:)(&v197, &v202, &type metadata for Bool);
    v46 = v197;
    v47 = *((_QWORD *)&v197 + 1);
    LOBYTE(v197) = 0;
    BYTE8(v197) = v46;
    v198 = v47;
    v48 = sub_10000966C(&qword_100099820, &qword_1000997E8, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
    v49 = sub_10004EC30();
    v50 = v186;
    v51 = v191;
    View.menuStyle<A>(_:)(&v197, v191, &type metadata for TFMenuStyle, v48, v49);
    swift_release();
    v187[1](v27, v51);
    v53 = v188;
    v52 = v189;
    (*(void (**)(char *, char *, uint64_t))(v189 + 32))(v188, v50, v28);
    v54 = v193;
    (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v193, v53, v28);
    swift_storeEnumTagMultiPayload(v54, v190, 0);
    *(_QWORD *)&v197 = v51;
    *((_QWORD *)&v197 + 1) = &type metadata for TFMenuStyle;
    v198 = v48;
    v199 = v49;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v197, &opaque type descriptor for <<opaque return type of View.menuStyle<A>(_:)>>, 1);
    v56 = sub_10001DE88(&qword_100099830, &qword_1000997F8, (void (*)(void))sub_10004EAF8, (void (*)(void))sub_10004EB94);
    _ConditionalContent<>.init(storage:)(v54, v28, v192, OpaqueTypeConformance2, v56);
    return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v53, v28);
  }
  v58 = v180;
  v169 = v22;
  v186 = v18;
  v170 = v24;
  v187 = v33;
  v188 = (char *)v19;
  v189 = v28;
  v59 = objc_msgSend(v35, "_textAnimationName");
  if (!v59)
  {
    v73 = objc_msgSend(v35, "systemImageName");
    v74 = v34;
    if (v73)
    {
      v75 = v73;
      v180 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)(v73);
      v77 = v76;

    }
    else
    {
      v180 = 0;
      v77 = 0;
    }
    v120 = v186;
    v121 = v174;
    v122 = *(_QWORD *)(v74 + 24);
    v123 = *(unsigned __int8 *)(v74 + 32);
    v124 = *(unsigned __int8 *)(v74 + 33);
    sub_10001D970(v122, v123, *(_BYTE *)(v74 + 33));
    v125 = sub_1000119BC(v122, v123 | (v124 << 8));
    v127 = v126;
    sub_10001D9CC(v122, v123, v124);
    if ((v127 & 1) != 0
      || v125 > 2
      || (v128 = objc_msgSend(v35, "systemImageName")) == 0)
    {
      v131 = objc_msgSend(v35, "title");
      v129 = static String._unconditionallyBridgeFromObjectiveC(_:)(v131);
      v130 = v132;

    }
    else
    {

      v129 = 0;
      v130 = 0;
    }
    v133 = sub_10004AF70(v35);
    v135 = v134;
    v137 = v136;
    static SymbolRenderingMode.hierarchical.getter(v133);
    *v120 = v180;
    v120[1] = v77;
    v120[2] = 0;
    v120[3] = 0;
    v138 = (_QWORD *)((char *)v120 + v121[7]);
    *v138 = v129;
    v138[1] = v130;
    *((_BYTE *)v120 + v121[8]) = 0;
    v139 = (char *)v120 + v121[9];
    *(_QWORD *)v139 = v133;
    *((_QWORD *)v139 + 1) = v135;
    v139[16] = v137 & 1;
    v140 = (char *)v120 + v121[10];
    *(_QWORD *)v140 = swift_getKeyPath(&unk_100074BF8);
    v140[8] = 0;
    if (*(_QWORD *)(v74 + 8))
    {
      KeyPath = swift_getKeyPath(&unk_100075300);
      swift_getKeyPath(&unk_100075328);
      v142 = swift_retain();
      v143 = v175;
      static Published.subscript.getter(v175, v142, KeyPath);
      swift_release();
      swift_release();
      swift_release();
      v144 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v184 + 48))(v143, 1, v185);
      v118 = (uint64_t)v193;
      v119 = v189;
      v145 = v183;
      if (v144)
      {
        sub_1000092D0((uint64_t)v143, &qword_100098FC8);
        v146 = 0;
      }
      else
      {
        v147 = ((uint64_t (*)(void))UITextFormattingViewController.FormattingDescriptor._customComponentKeys.getter)();
        sub_1000092D0((uint64_t)v143, &qword_100098FC8);
        v148 = objc_msgSend(v35, "componentKey");
        v146 = sub_100011198();

        swift_bridgeObjectRelease(v147);
      }
      v149 = v182;
      v150 = objc_msgSend(v35, "accessibilityLabel");
      if (!v150)
        v150 = objc_msgSend(v35, "title");
      v151 = static String._unconditionallyBridgeFromObjectiveC(_:)(v150);
      v153 = v152;

      v154 = (uint64_t)v169;
      v155 = (uint64_t)v186;
      sub_10003464C(v146 & 1, v151, v153, (uint64_t)v169);
      swift_bridgeObjectRelease(v153);
      sub_100009250(v155, type metadata accessor for TFToggle);
      v156 = (uint64_t)v170;
      sub_10000930C(v154, (uint64_t)v170, &qword_1000997D8);
      sub_10000928C(v156, v145, &qword_1000997D8);
      swift_storeEnumTagMultiPayload(v145, v149, 1);
      v157 = sub_10004EAF8();
      v158 = sub_10004EB94();
      v65 = (uint64_t)v187;
      _ConditionalContent<>.init(storage:)(v145, v181, v188, v157, v158);
      sub_1000092D0(v156, &qword_1000997D8);
      goto LABEL_31;
    }
    v166 = *(_QWORD *)(v74 + 16);
LABEL_36:
    v167 = type metadata accessor for TextFormattingState(0);
    v168 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    result = EnvironmentObject.error()(0, v166, v167, v168);
    __break(1u);
    return result;
  }
  v60 = v59;
  v186 = v35;
  v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
  v63 = v62;

  v64 = *(_QWORD *)(v34 + 8);
  v65 = (uint64_t)v187;
  if (!v64)
  {
    v166 = *(_QWORD *)(v34 + 16);
    goto LABEL_36;
  }
  v174 = (int *)v61;
  v175 = v63;
  v66 = swift_getKeyPath(&unk_100075300);
  swift_getKeyPath(&unk_100075328);
  v67 = swift_retain();
  static Published.subscript.getter(v58, v67, v66);
  swift_release();
  swift_release();
  swift_release();
  v68 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v184 + 48);
  v69 = v68(v58, 1, v185);
  v70 = v69 == 0;
  v71 = (int *)v179;
  if (v69)
  {
    v72 = 0;
LABEL_14:
    sub_1000092D0((uint64_t)v58, &qword_100098FC8);
    v80 = v70;
    goto LABEL_15;
  }
  v78 = ((uint64_t (*)(void))UITextFormattingViewController.FormattingDescriptor._customComponentKeys.getter)();
  sub_1000092D0((uint64_t)v58, &qword_100098FC8);
  v79 = objc_msgSend(v186, "componentKey");
  v80 = sub_100011198();

  swift_bridgeObjectRelease(v78);
  v72 = (*(_BYTE *)(v64 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_isTextAnimationsUI) ^ 1) & v80;
  if (((*(_BYTE *)(v64 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_isTextAnimationsUI) ^ 1) & 1) != 0)
  {
    v71 = (int *)v179;
    goto LABEL_15;
  }
  v71 = (int *)v179;
  if ((v80 & 1) != 0)
  {
    v81 = swift_getKeyPath(&unk_100075300);
    swift_getKeyPath(&unk_100075328);
    v82 = swift_retain();
    v58 = v173;
    static Published.subscript.getter(v173, v82, v81);
    swift_release();
    swift_release();
    swift_release();
    v83 = v172;
    sub_10000928C((uint64_t)v58, v172, &qword_100098FC8);
    v72 = 1;
    v84 = v185;
    if (v68((_QWORD *)v83, 1, v185) != 1)
    {
      v85 = v184;
      v86 = v83;
      v87 = v171;
      v88 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v184 + 32))(v171, v86, v84);
      v89 = UITextFormattingViewController.FormattingDescriptor._customComponentKeys.getter(v88);
      v90 = *(_QWORD *)(v89 + 16);
      swift_bridgeObjectRelease(v89);
      v72 = v90 == 1;
      (*(void (**)(char *, uint64_t))(v85 + 8))(v87, v84);
    }
    v71 = (int *)v179;
    goto LABEL_14;
  }
LABEL_15:
  v91 = (id *)v34;
  v202 = *(_QWORD *)(v34 + 24);
  v203 = *(_WORD *)(v34 + 32);
  v200 = *(_QWORD *)(v34 + 40);
  v201 = *(_BYTE *)(v34 + 48);
  v92 = swift_allocObject(&unk_10008F5F8, 65, 7);
  v93 = *(_OWORD *)(v34 + 16);
  *(_OWORD *)(v92 + 16) = *(_OWORD *)v34;
  *(_OWORD *)(v92 + 32) = v93;
  *(_OWORD *)(v92 + 48) = *(_OWORD *)(v34 + 32);
  *(_BYTE *)(v92 + 64) = *(_BYTE *)(v34 + 48);
  v94 = (uint64_t)v177;
  *v177 = 256;
  *(_BYTE *)(v94 + 2) = 0;
  v95 = v94 + v71[11];
  swift_retain();
  v96 = v71;
  v97 = v186;
  sub_10004EC80((uint64_t)&v202);
  sub_10004ECB0((uint64_t)&v200);
  v98 = v95;
  v99 = v175;
  sub_10004AB20(v91, (uint64_t)v174, (uint64_t)v175, v72 & 1, v98);
  v100 = (uint64_t (**)())(v94 + v96[12]);
  *v100 = sub_10004EC78;
  v100[1] = (uint64_t (*)())v92;
  v101 = v94 + v96[13];
  v195 = 0;
  v196 = 1;
  v102 = sub_10000498C(&qword_100099430);
  State.init(wrappedValue:)(&v197, &v195, v102);
  v103 = BYTE8(v197);
  v104 = v198;
  *(_QWORD *)v101 = v197;
  *(_BYTE *)(v101 + 8) = v103;
  *(_QWORD *)(v101 + 16) = v104;
  v105 = v96[14];
  v195 = 0;
  v106 = sub_10000498C(&qword_100099838);
  State.init(wrappedValue:)(&v197, &v195, v106);
  *(_OWORD *)(v94 + v105) = v197;
  v107 = v94 + v96[15];
  v108 = swift_getKeyPath(&unk_100074BF8);
  swift_bridgeObjectRelease(v99);
  *(_QWORD *)v107 = v108;
  *(_BYTE *)(v107 + 8) = 0;
  v109 = objc_msgSend(v97, "accessibilityLabel");
  if (!v109)
    v109 = objc_msgSend(v97, "title");
  v110 = static String._unconditionallyBridgeFromObjectiveC(_:)(v109);
  v112 = v111;

  v113 = v176;
  sub_10003487C(v80 & 1, v110, v112, &qword_1000997D0, &qword_1000997C8, &qword_100099808, (uint64_t)&unk_100075F60, v176);
  swift_bridgeObjectRelease(v112);
  sub_1000092D0(v94, &qword_1000997C8);
  v114 = v178;
  sub_10000930C(v113, v178, &qword_1000997D0);
  v115 = v183;
  sub_10000928C(v114, v183, &qword_1000997D0);
  swift_storeEnumTagMultiPayload(v115, v182, 0);
  v116 = sub_10004EAF8();
  v117 = sub_10004EB94();
  _ConditionalContent<>.init(storage:)(v115, v181, v188, v116, v117);
  sub_1000092D0(v114, &qword_1000997D0);
  v118 = (uint64_t)v193;
  v119 = v189;
LABEL_31:
  v160 = v191;
  v159 = v192;
  v161 = v190;
  sub_10000928C(v65, v118, &qword_1000997F8);
  swift_storeEnumTagMultiPayload(v118, v161, 1);
  v162 = sub_10000966C(&qword_100099820, &qword_1000997E8, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
  v163 = sub_10004EC30();
  *(_QWORD *)&v197 = v160;
  *((_QWORD *)&v197 + 1) = &type metadata for TFMenuStyle;
  v198 = v162;
  v199 = v163;
  v164 = swift_getOpaqueTypeConformance2(&v197, &opaque type descriptor for <<opaque return type of View.menuStyle<A>(_:)>>, 1);
  v165 = sub_10001DE88(&qword_100099830, &qword_1000997F8, (void (*)(void))sub_10004EAF8, (void (*)(void))sub_10004EB94);
  _ConditionalContent<>.init(storage:)(v118, v119, v159, v164, v165);
  return sub_1000092D0(v65, &qword_1000997F8);
}

uint64_t sub_10004A01C(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  void *v5;
  uint64_t v6;
  __int128 v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  __int16 v18;
  __int128 v19;

  v14 = a1;
  KeyPath = swift_getKeyPath(&unk_100075370);
  v5 = *(void **)a2;
  v19 = *(_OWORD *)(a2 + 8);
  v17 = *(_QWORD *)(a2 + 24);
  v18 = *(_WORD *)(a2 + 32);
  v15 = *(_QWORD *)(a2 + 40);
  v16 = *(_BYTE *)(a2 + 48);
  v6 = swift_allocObject(&unk_10008F620, 65, 7);
  v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v6 + 32) = v7;
  *(_OWORD *)(v6 + 48) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(v6 + 64) = *(_BYTE *)(a2 + 48);
  swift_bridgeObjectRetain(a1);
  v8 = v5;
  sub_10004EF38(&v19);
  sub_10004EC80((uint64_t)&v17);
  sub_10004ECB0((uint64_t)&v15);
  v9 = sub_10000498C(&qword_100099890);
  v10 = sub_10000498C(&qword_100099870);
  v11 = sub_10000966C(&qword_100099898, &qword_100099890, (uint64_t)&protocol conformance descriptor for [A]);
  v12 = sub_10004ECEC();
  return ForEach<>.init(_:id:content:)(&v14, KeyPath, sub_10004EF14, v6, v9, v10, v11, &protocol witness table for String, v12);
}

uint64_t sub_10004A164@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  ValueMetadata *v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t OpaqueTypeConformance2;
  int *v41;
  uint64_t v42;
  id v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[2];
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  ValueMetadata *v77;
  uint64_t v78;
  unint64_t v79;

  v73 = a2;
  v74 = type metadata accessor for TFToggle(0);
  v4 = __chkstk_darwin(v74);
  v6 = (_QWORD *)((char *)v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  v8 = (char *)v63 - v7;
  v71 = sub_10000498C(&qword_1000998A0);
  __chkstk_darwin(v71);
  v70 = (char *)v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = sub_10000498C(&qword_100099878);
  v65 = *(_QWORD *)(v72 - 8);
  __chkstk_darwin(v72);
  v11 = (char *)v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10000498C(&qword_1000998A8);
  v67 = *(_QWORD *)(v12 - 8);
  v13 = __chkstk_darwin(v12);
  v64 = (char *)v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v66 = (char *)v63 - v15;
  v16 = sub_10004AF70(a1);
  v18 = v17;
  v20 = v19;
  v21 = objc_msgSend(a1, "_subcomponents");
  v68 = v16;
  v69 = v18;
  if (v21)
  {
    v22 = v21;
    v23 = sub_1000096AC(0, &qword_100099840, _UITextFormattingViewControllerCustomComponent_ptr);
    v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v22, v23);

    v63[1] = v63;
    v26 = __chkstk_darwin(v25);
    v63[-2] = v24;
    v63[-1] = v2;
    __chkstk_darwin(v26);
    v63[-4] = a1;
    v63[-3] = v16;
    v63[-2] = v18;
    LOBYTE(v63[-1]) = v20 & 1;
    v27 = sub_10000498C(&qword_1000998B0);
    v28 = sub_100007D90(&qword_100099818, type metadata accessor for TFToggle, (uint64_t)&unk_100075F10);
    v29 = sub_100051EE8(&qword_1000998B8, &qword_1000998B0, (uint64_t)&protocol witness table for AnyView, (uint64_t)&protocol conformance descriptor for <> ForEach<A, B, C>);
    Menu.init(content:label:)(sub_10004EF60, &v63[-4], sub_10004EF68, &v63[-6], v74, v27, v28, v29);
    swift_bridgeObjectRelease(v24);
    v75 = 0;
    State.init(wrappedValue:)(&v76, &v75, &type metadata for Bool);
    v30 = v76;
    v31 = v77;
    LOBYTE(v76) = 0;
    LOBYTE(v77) = v30;
    v78 = (uint64_t)v31;
    v32 = sub_10000966C(&qword_100099880, &qword_100099878, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
    v33 = sub_10004EC30();
    v34 = v64;
    v35 = v72;
    View.menuStyle<A>(_:)(&v76, v72, &type metadata for TFMenuStyle, v32, v33);
    swift_release();
    (*(void (**)(char *, uint64_t))(v65 + 8))(v11, v35);
    v37 = (uint64_t)v66;
    v36 = v67;
    (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v66, v34, v12);
    v38 = v70;
    (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v70, v37, v12);
    swift_storeEnumTagMultiPayload(v38, v71, 0);
    v76 = v35;
    v77 = &type metadata for TFMenuStyle;
    v78 = v32;
    v79 = v33;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v76, &opaque type descriptor for <<opaque return type of View.menuStyle<A>(_:)>>, 1);
    _ConditionalContent<>.init(storage:)(v38, v12, v74, OpaqueTypeConformance2, v28);
    swift_release();
    swift_release();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v36 + 8))(v37, v12);
  }
  else
  {
    LODWORD(v65) = v20;
    v41 = (int *)v74;
    v66 = v8;
    v67 = v12;
    v42 = (uint64_t)v70;
    v43 = objc_msgSend(a1, "systemImageName");
    if (v43)
    {
      v44 = v43;
      v64 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
      v46 = v45;

    }
    else
    {
      v64 = 0;
      v46 = 0;
    }
    v47 = objc_msgSend(a1, "title");
    v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
    v50 = v49;

    v51 = v41;
    v52 = v68;
    swift_retain();
    v53 = v69;
    v54 = swift_retain();
    static SymbolRenderingMode.hierarchical.getter(v54);
    *v6 = v64;
    v6[1] = v46;
    v6[2] = 0;
    v6[3] = 0;
    v55 = (_QWORD *)((char *)v6 + v51[7]);
    *v55 = v48;
    v55[1] = v50;
    *((_BYTE *)v6 + v51[8]) = 1;
    v56 = (char *)v6 + v51[9];
    *(_QWORD *)v56 = v52;
    *((_QWORD *)v56 + 1) = v53;
    v56[16] = v65 & 1;
    v57 = (char *)v6 + v51[10];
    *(_QWORD *)v57 = swift_getKeyPath(&unk_100074BF8);
    v57[8] = 0;
    v58 = (uint64_t)v66;
    sub_100008F30((uint64_t)v6, (uint64_t)v66, type metadata accessor for TFToggle);
    sub_10000920C(v58, v42, type metadata accessor for TFToggle);
    swift_storeEnumTagMultiPayload(v42, v71, 1);
    v59 = sub_10000966C(&qword_100099880, &qword_100099878, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
    v60 = sub_10004EC30();
    v76 = v72;
    v77 = &type metadata for TFMenuStyle;
    v78 = v59;
    v79 = v60;
    v61 = swift_getOpaqueTypeConformance2(&v76, &opaque type descriptor for <<opaque return type of View.menuStyle<A>(_:)>>, 1);
    v62 = sub_100007D90(&qword_100099818, type metadata accessor for TFToggle, (uint64_t)&unk_100075F10);
    _ConditionalContent<>.init(storage:)(v42, v67, v51, v61, v62);
    swift_release();
    swift_release();
    return sub_100009250(v58, type metadata accessor for TFToggle);
  }
}

uint64_t sub_10004A740@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  char v9;
  _QWORD v10[2];

  sub_10004A7E8(a1, a2);
  v3 = (int *)sub_10000498C(&qword_100099848);
  v4 = a2 + v3[9];
  v9 = 0;
  State.init(wrappedValue:)(v10, &v9, &type metadata for Bool);
  v5 = v10[1];
  *(_BYTE *)v4 = v10[0];
  *(_QWORD *)(v4 + 8) = v5;
  v6 = a2 + v3[10];
  *(_QWORD *)v6 = swift_getKeyPath(&unk_100074C50);
  *(_BYTE *)(v6 + 8) = 0;
  v7 = a2 + v3[11];
  result = swift_getKeyPath(&unk_100074BF8);
  *(_QWORD *)v7 = result;
  *(_BYTE *)(v7 + 8) = 0;
  return result;
}

uint64_t sub_10004A7E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  int *v7;
  uint64_t v8;
  uint64_t *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char v18;
  char v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t KeyPath;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  char *v36;
  char *v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;

  v4 = sub_10000498C(&qword_100098FC8);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = (int *)type metadata accessor for TFLabel(0);
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v46 = *(id *)a1;
  v10 = objc_msgSend(v46, "systemImageName");
  v45 = a2;
  if (v10)
  {
    v11 = v10;
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v43 = v13;
    v44 = v12;

  }
  else
  {
    v43 = 0;
    v44 = 0;
  }
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(unsigned __int8 *)(a1 + 32);
  v16 = *(unsigned __int8 *)(a1 + 33);
  sub_10001D970(v14, v15, *(_BYTE *)(a1 + 33));
  v17 = sub_1000119BC(v14, v15 | (v16 << 8));
  v19 = v18;
  sub_10001D9CC(v14, v15, v16);
  if ((v19 & 1) != 0
    || v17 > 2
    || (v20 = objc_msgSend(v46, "systemImageName")) == 0)
  {
    v23 = objc_msgSend(v46, "title");
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    v22 = v24;

  }
  else
  {

    v21 = 0;
    v22 = 0;
  }
  if (*(_QWORD *)(a1 + 8))
  {
    KeyPath = swift_getKeyPath(&unk_100075300);
    swift_getKeyPath(&unk_100075328);
    v26 = swift_retain();
    static Published.subscript.getter(v6, v26, KeyPath);
    swift_release();
    swift_release();
    swift_release();
    v27 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor(0);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 48))(v6, 1, v27))
    {
      v28 = sub_1000092D0((uint64_t)v6, &qword_100098FC8);
      v29 = 0;
    }
    else
    {
      v30 = UITextFormattingViewController.FormattingDescriptor._customComponentKeys.getter();
      sub_1000092D0((uint64_t)v6, &qword_100098FC8);
      v31 = objc_msgSend(v46, "componentKey");
      v29 = sub_100011198();

      v28 = swift_bridgeObjectRelease(v30);
    }
    v33 = v44;
    v32 = v45;
    v34 = v43;
    static SymbolRenderingMode.hierarchical.getter(v28);
    *v9 = v33;
    v9[1] = v34;
    v9[2] = 0;
    v9[3] = 0;
    v35 = (uint64_t *)((char *)v9 + v7[7]);
    *v35 = v21;
    v35[1] = v22;
    *((_BYTE *)v9 + v7[8]) = v29 & 1;
    v36 = (char *)v9 + v7[9];
    *(_QWORD *)v36 = swift_getKeyPath(&unk_100074BF8);
    v36[8] = 0;
    v37 = (char *)v9 + v7[10];
    *(_QWORD *)v37 = swift_getKeyPath(&unk_100075348);
    v37[8] = 0;
    return sub_100008F30((uint64_t)v9, v32, type metadata accessor for TFLabel);
  }
  else
  {
    v39 = *(_QWORD *)(a1 + 16);
    v40 = type metadata accessor for TextFormattingState(0);
    v41 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    result = EnvironmentObject.error()(0, v39, v40, v41);
    __break(1u);
  }
  return result;
}

uint64_t sub_10004AB20@<X0>(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v36 = a4;
  v35 = a2;
  v38 = a5;
  v39 = type metadata accessor for AccessibilityChildBehavior(0);
  v37 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (int *)type metadata accessor for TFAnimatedText(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10000498C(&qword_1000998C0);
  __chkstk_darwin(v12);
  v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10000498C(&qword_1000998C8);
  __chkstk_darwin(v15);
  v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = objc_msgSend(*a1, "title");
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v21 = v20;

  *(_QWORD *)v11 = v19;
  *((_QWORD *)v11 + 1) = v21;
  *((_QWORD *)v11 + 2) = v35;
  *((_QWORD *)v11 + 3) = a3;
  LOBYTE(v19) = v36;
  v11[32] = v36;
  v22 = &v11[v9[7]];
  *(_QWORD *)v22 = swift_getKeyPath(&unk_1000753A8);
  v23 = sub_10000498C((uint64_t *)&unk_10009A390);
  swift_storeEnumTagMultiPayload(v22, v23, 0);
  v24 = &v11[v9[8]];
  *(_QWORD *)v24 = swift_getKeyPath(&unk_1000753D8);
  v25 = sub_10000498C((uint64_t *)&unk_100098F50);
  swift_storeEnumTagMultiPayload(v24, v25, 0);
  v26 = &v11[v9[9]];
  *(_QWORD *)v26 = swift_getKeyPath(&unk_100075408);
  v26[8] = 0;
  v27 = swift_bridgeObjectRetain(a3);
  v28 = static Alignment.center.getter(v27);
  sub_1000312E8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v14, 0.0, 1, INFINITY, 0, v28, v29, (uint64_t)type metadata accessor for TFAnimatedText, (void (*)(uint64_t, uint64_t, uint64_t))sub_10000920C, &qword_1000998C0);
  sub_100009250((uint64_t)v11, type metadata accessor for TFAnimatedText);
  sub_10000928C((uint64_t)v14, (uint64_t)v17, &qword_1000998C0);
  v30 = &v17[*(int *)(v15 + 36)];
  *v30 = 0;
  v30[1] = v19;
  v30[2] = 0;
  v31 = sub_1000092D0((uint64_t)v14, &qword_1000998C0);
  static AccessibilityChildBehavior.ignore.getter(v31);
  v32 = sub_10004F080(&qword_1000998D0, &qword_1000998C8, (void (*)(void))sub_10004F0F0, (void (*)(void))sub_10004F174);
  View.accessibilityElement(children:)(v8, v15, v32);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v8, v39);
  return sub_1000092D0((uint64_t)v17, &qword_1000998C8);
}

uint64_t sub_10004AE3C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void (*v7)(_QWORD *, _QWORD);
  void *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = type metadata accessor for UITextFormattingViewController.ChangeValue(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = *(void (**)(_QWORD *, _QWORD))(v6
                                                 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_didChangeValue);
    v8 = *(void **)a1;
    swift_retain();
    *v5 = objc_msgSend(v8, "componentKey");
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for UITextFormattingViewController.ChangeValue.customComponentSelected(_:), v2);
    v7(v5, 0);
    swift_release();
    return (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 16);
    v11 = type metadata accessor for TextFormattingState(0);
    v12 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    result = EnvironmentObject.error()(0, v10, v11, v12);
    __break(1u);
  }
  return result;
}

uint64_t sub_10004AF70(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  __int16 v20;
  __int128 v21;

  v2 = v1;
  type metadata accessor for MainActor(0);
  v4 = *(void **)v1;
  v21 = *(_OWORD *)(v1 + 8);
  v19 = *(_QWORD *)(v1 + 24);
  v20 = *(_WORD *)(v1 + 32);
  v17 = *(_QWORD *)(v1 + 40);
  v18 = *(_BYTE *)(v1 + 48);
  v5 = v4;
  sub_10004EF38(&v21);
  sub_10004EC80((uint64_t)&v19);
  sub_10004ECB0((uint64_t)&v17);
  v6 = a1;
  v7 = static MainActor.shared.getter(v6);
  v8 = swift_allocObject(&unk_10008F670, 96, 7);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = &protocol witness table for MainActor;
  v9 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v8 + 32) = *(_OWORD *)v1;
  *(_OWORD *)(v8 + 48) = v9;
  *(_OWORD *)(v8 + 64) = *(_OWORD *)(v1 + 32);
  *(_BYTE *)(v8 + 80) = *(_BYTE *)(v1 + 48);
  *(_QWORD *)(v8 + 88) = v6;
  v10 = v5;
  sub_10004EF38(&v21);
  sub_10004EC80((uint64_t)&v19);
  sub_10004ECB0((uint64_t)&v17);
  v11 = v6;
  v12 = static MainActor.shared.getter(v11);
  v13 = swift_allocObject(&unk_10008F698, 96, 7);
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = &protocol witness table for MainActor;
  v14 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v13 + 32) = *(_OWORD *)v2;
  *(_OWORD *)(v13 + 48) = v14;
  *(_OWORD *)(v13 + 64) = *(_OWORD *)(v2 + 32);
  *(_BYTE *)(v13 + 80) = *(_BYTE *)(v2 + 48);
  *(_QWORD *)(v13 + 88) = v11;
  Binding.init(get:set:)(&v16, sub_10004F1BC, v8, sub_10004F228, v13, &type metadata for Bool);
  return v16;
}

uint64_t sub_10004B0E8(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  void *v5;
  uint64_t v6;
  __int128 v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  __int16 v16;
  __int128 v17;

  v12 = a1;
  KeyPath = swift_getKeyPath(&unk_100075370);
  v5 = *(void **)a2;
  v17 = *(_OWORD *)(a2 + 8);
  v15 = *(_QWORD *)(a2 + 24);
  v16 = *(_WORD *)(a2 + 32);
  v13 = *(_QWORD *)(a2 + 40);
  v14 = *(_BYTE *)(a2 + 48);
  v6 = swift_allocObject(&unk_10008F648, 65, 7);
  v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v6 + 32) = v7;
  *(_OWORD *)(v6 + 48) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(v6 + 64) = *(_BYTE *)(a2 + 48);
  swift_bridgeObjectRetain(a1);
  v8 = v5;
  sub_10004EF38(&v17);
  sub_10004EC80((uint64_t)&v15);
  sub_10004ECB0((uint64_t)&v13);
  v9 = sub_10000498C(&qword_100099890);
  v10 = sub_10000966C(&qword_100099898, &qword_100099890, (uint64_t)&protocol conformance descriptor for [A]);
  return ForEach<>.init(_:id:content:)(&v12, KeyPath, sub_10004EFC4, v6, v9, &type metadata for AnyView, v10, &protocol witness table for String, &protocol witness table for AnyView);
}

uint64_t sub_10004B224@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;

  v4 = sub_10000498C(&qword_100099870);
  __chkstk_darwin(v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004A164(*a1);
  v7 = sub_10004ECEC();
  result = AnyView.init<A>(_:)(v6, v4, v7);
  *a2 = result;
  return result;
}

uint64_t sub_10004B2BC@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  int *v9;
  uint64_t v10;
  uint64_t *v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  char *v23;
  char *v24;
  uint64_t v26;
  uint64_t v27;

  v27 = a5;
  v9 = (int *)type metadata accessor for TFToggle(0);
  __chkstk_darwin(v9);
  v11 = (uint64_t *)((char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = objc_msgSend(a1, "systemImageName");
  if (v12)
  {
    v13 = v12;
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v16 = v15;

  }
  else
  {
    v14 = 0;
    v16 = 0;
  }
  v17 = objc_msgSend(a1, "title");
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v20 = v19;

  swift_retain();
  v21 = swift_retain();
  static SymbolRenderingMode.hierarchical.getter(v21);
  *v11 = v14;
  v11[1] = v16;
  v11[2] = 0;
  v11[3] = 0;
  v22 = (uint64_t *)((char *)v11 + v9[7]);
  *v22 = v18;
  v22[1] = v20;
  *((_BYTE *)v11 + v9[8]) = 0;
  v23 = (char *)v11 + v9[9];
  *(_QWORD *)v23 = a2;
  *((_QWORD *)v23 + 1) = a3;
  v23[16] = a4 & 1;
  v24 = (char *)v11 + v9[10];
  *(_QWORD *)v24 = swift_getKeyPath(&unk_100074BF8);
  v24[8] = 0;
  return sub_100008F30((uint64_t)v11, v27, type metadata accessor for TFToggle);
}

uint64_t sub_10004B430@<X0>(uint64_t a1@<X2>, void *a2@<X3>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char v13;
  uint64_t v14;
  id v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = sub_10000498C(&qword_100098FC8);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (*(_QWORD *)(a1 + 8))
  {
    KeyPath = swift_getKeyPath(&unk_100075300);
    swift_getKeyPath(&unk_100075328);
    v10 = swift_retain();
    static Published.subscript.getter(v8, v10, KeyPath);
    swift_release();
    swift_release();
    swift_release();
    v11 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor(0);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v8, 1, v11))
    {
      result = sub_1000092D0((uint64_t)v8, &qword_100098FC8);
      v13 = 0;
    }
    else
    {
      v14 = UITextFormattingViewController.FormattingDescriptor._customComponentKeys.getter();
      sub_1000092D0((uint64_t)v8, &qword_100098FC8);
      v15 = objc_msgSend(a2, "componentKey");
      v16 = sub_100011198();

      result = swift_bridgeObjectRelease(v14);
      v13 = v16 & 1;
    }
    *a3 = v13;
  }
  else
  {
    v17 = *(_QWORD *)(a1 + 16);
    v18 = type metadata accessor for TextFormattingState(0);
    v19 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    result = EnvironmentObject.error()(0, v17, v18, v19);
    __break(1u);
  }
  return result;
}

uint64_t sub_10004B5CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void (*v12)(_QWORD *, _QWORD);
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v7 = type metadata accessor for UITextFormattingViewController.ChangeValue(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (uint64_t *)((char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *(_QWORD *)(a4 + 8);
  if (v11)
  {
    v12 = *(void (**)(_QWORD *, _QWORD))(v11
                                                  + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_didChangeValue);
    swift_retain();
    *v10 = objc_msgSend(a5, "componentKey");
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for UITextFormattingViewController.ChangeValue.customComponentSelected(_:), v7);
    v12(v10, 0);
    swift_release();
    return (*(uint64_t (**)(_QWORD *, uint64_t))(v8 + 8))(v10, v7);
  }
  else
  {
    v14 = *(_QWORD *)(a4 + 16);
    v15 = type metadata accessor for TextFormattingState(0);
    v16 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    result = EnvironmentObject.error()(0, v14, v15, v16);
    __break(1u);
  }
  return result;
}

uint64_t sub_10004B700@<X0>(uint64_t a1@<X8>)
{
  return sub_100048B80(a1);
}

_QWORD *sub_10004B740@<X0>(_BYTE *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_10004EE60();
  result = EnvironmentValues.subscript.getter(&v4, &type metadata for TFMenuLabelChevronDisplayedKey, &type metadata for TFMenuLabelChevronDisplayedKey, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_10004B78C(char *a1)
{
  unint64_t v1;
  char v3;

  v3 = *a1;
  v1 = sub_10004EE60();
  return EnvironmentValues.subscript.setter(&v3, &type metadata for TFMenuLabelChevronDisplayedKey, &type metadata for TFMenuLabelChevronDisplayedKey, v1);
}

uint64_t sub_10004B7D4()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_10004B7F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10004B890(a1, a2, a3, a4, (void (*)(_QWORD))&type metadata accessor for ColorScheme, (uint64_t (*)(char *))&EnvironmentValues.colorScheme.setter);
}

uint64_t sub_10004B808@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.accessibilityReduceMotion.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10004B834@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_10004B864(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_10004B890(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD), uint64_t (*a6)(char *))
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  a5(0);
  __chkstk_darwin();
  v9 = (char *)&v12 - v8;
  (*(void (**)(char *, uint64_t))(v10 + 16))((char *)&v12 - v8, a1);
  return a6(v9);
}

uint64_t sub_10004B90C(unint64_t a1, void *a2, SEL *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v20;

  v3 = a1;
  if (a1 >> 62)
    goto LABEL_16;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v4; v4 = _CocoaArrayWrapper.endIndex.getter(v18))
  {
    v20 = v4;
    v5 = 4;
    while (1)
    {
      v6 = (v3 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, v3)
         : *(id *)(v3 + 8 * v5);
      v7 = v6;
      v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1))
        break;
      v9 = objc_msgSend(v6, *a3);
      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
      v12 = v11;

      v13 = objc_msgSend(a2, *a3);
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v16 = v15;

      if (v10 == v14 && v12 == v16)
      {
        swift_bridgeObjectRelease(v3);

        swift_bridgeObjectRelease(v12);
        v17 = 1;
        v3 = v12;
        goto LABEL_21;
      }
      v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v12, v14, v16, 0);

      swift_bridgeObjectRelease(v12);
      swift_bridgeObjectRelease(v16);
      if ((v17 & 1) == 0)
      {
        ++v5;
        if (v8 != v20)
          continue;
      }
      goto LABEL_21;
    }
    __break(1u);
LABEL_16:
    if (v3 < 0)
      v18 = v3;
    else
      v18 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
  }
  v17 = 0;
LABEL_21:
  swift_bridgeObjectRelease(v3);
  return v17 & 1;
}

__n128 sub_10004BAC0@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __n128 result;
  _QWORD v14[2];
  __n128 v15;
  unint64_t v16;

  v2 = type metadata accessor for TextFormattingState(0);
  v3 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
  v4 = EnvironmentObject.init()(v2, v3);
  v6 = v5;
  KeyPath = swift_getKeyPath(&unk_100074BA8);
  v8 = swift_getKeyPath(&unk_100074BD0);
  v9 = swift_getKeyPath(&unk_100074BF8);
  v10 = swift_getKeyPath(&unk_100074C20);
  v14[0] = 0;
  v14[1] = 0;
  v11 = sub_10000498C(&qword_100098768);
  State.init(wrappedValue:)(&v15, v14, v11);
  v12 = v16;
  result = v15;
  a1->n128_u64[0] = v4;
  a1->n128_u64[1] = v6;
  a1[1].n128_u64[0] = KeyPath;
  a1[1].n128_u16[4] = 0;
  a1[2].n128_u64[0] = v8;
  a1[2].n128_u8[8] = 0;
  a1[3].n128_u64[0] = v9;
  a1[3].n128_u8[8] = 0;
  a1[4].n128_u64[0] = v10;
  a1[4].n128_u8[8] = 0;
  a1[5] = result;
  a1[6].n128_u64[0] = v12;
  return result;
}

uint64_t sub_10004BBEC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v2 = type metadata accessor for TextFormattingState(0);
  v3 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
  v4 = EnvironmentObject.init()(v2, v3);
  v6 = v5;
  KeyPath = swift_getKeyPath(&unk_100074BA8);
  v8 = swift_getKeyPath(&unk_100074C50);
  v9 = swift_getKeyPath(&unk_100074C78);
  result = swift_getKeyPath(&unk_100074BF8);
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = KeyPath;
  *(_WORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = v9;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = result;
  *(_BYTE *)(a1 + 80) = 0;
  return result;
}

uint64_t destroy for TFCustomControl(uint64_t a1)
{

  swift_release();
  sub_10001D9CC(*(_QWORD *)(a1 + 24), *(unsigned __int8 *)(a1 + 32), *(_BYTE *)(a1 + 33));
  return sub_10001D9D8(*(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
}

uint64_t initializeWithCopy for TFCustomControl(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  id v9;
  uint64_t v10;

  v2 = a2;
  v4 = *(void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 33);
  v8 = *(unsigned __int8 *)(a2 + 32);
  v9 = v4;
  swift_retain();
  sub_10001D970(v6, v8, v7);
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 33) = v7;
  v10 = *(_QWORD *)(v2 + 40);
  LOBYTE(v2) = *(_BYTE *)(v2 + 48);
  sub_10001D97C(v10, v2);
  *(_QWORD *)(a1 + 40) = v10;
  *(_BYTE *)(a1 + 48) = v2;
  return a1;
}

uint64_t assignWithCopy for TFCustomControl(uint64_t a1, void **a2)
{
  void **v2;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  char v8;
  unsigned __int8 v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v2 = a2;
  v4 = *a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = v2[1];
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = v2[2];
  v7 = (uint64_t)v2[3];
  v8 = *((_BYTE *)v2 + 33);
  v9 = *((_BYTE *)v2 + 32);
  sub_10001D970(v7, v9, v8);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_BYTE *)(a1 + 33);
  *(_QWORD *)(a1 + 24) = v7;
  v12 = *(unsigned __int8 *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v9;
  *(_BYTE *)(a1 + 33) = v8;
  sub_10001D9CC(v10, v12, v11);
  v13 = (uint64_t)v2[5];
  LOBYTE(v2) = *((_BYTE *)v2 + 48);
  sub_10001D97C(v13, (char)v2);
  v14 = *(_QWORD *)(a1 + 40);
  v15 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v13;
  *(_BYTE *)(a1 + 48) = (_BYTE)v2;
  sub_10001D9D8(v14, v15);
  return a1;
}

__n128 initializeWithTake for TFCustomControl(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for TFCustomControl(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  v4 = *(_BYTE *)(a2 + 32);
  v5 = *(_BYTE *)(a2 + 33);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_BYTE *)(a1 + 33);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v8 = *(unsigned __int8 *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 33) = v5;
  sub_10001D9CC(v6, v8, v7);
  v9 = *(_BYTE *)(a2 + 48);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = v9;
  sub_10001D9D8(v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for TFCustomControl(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 49))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TFCustomControl(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 49) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TFCustomControl()
{
  return &type metadata for TFCustomControl;
}

uint64_t destroy for TFHighlightControl(uint64_t a1, uint64_t a2)
{
  return sub_10004D3D0(a1, a2, (void (*)(_QWORD, _QWORD))sub_1000527B0, (uint64_t (*)(_QWORD, _QWORD))sub_1000527B0);
}

uint64_t initializeWithCopy for TFHighlightControl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;

  *(_WORD *)a1 = *(_WORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_BYTE *)(a2 + 33);
  v7 = *(unsigned __int8 *)(a2 + 32);
  swift_retain();
  sub_10001D970(v5, v7, v6);
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 33) = v6;
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_BYTE *)(a2 + 48);
  sub_10001D97C(v8, v9);
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = v9;
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_BYTE *)(a2 + 64);
  sub_10001D97C(v10, v11);
  *(_QWORD *)(a1 + 56) = v10;
  *(_BYTE *)(a1 + 64) = v11;
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_BYTE *)(a2 + 80);
  sub_10001D97C(v12, v13);
  *(_QWORD *)(a1 + 72) = v12;
  *(_BYTE *)(a1 + 80) = v13;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  return a1;
}

uint64_t assignWithCopy for TFHighlightControl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  unsigned __int8 v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_BYTE *)(a2 + 33);
  v6 = *(_BYTE *)(a2 + 32);
  sub_10001D970(v4, v6, v5);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_BYTE *)(a1 + 33);
  *(_QWORD *)(a1 + 24) = v4;
  v9 = *(unsigned __int8 *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 33) = v5;
  sub_10001D9CC(v7, v9, v8);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_BYTE *)(a2 + 48);
  sub_10001D97C(v10, v11);
  v12 = *(_QWORD *)(a1 + 40);
  v13 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v10;
  *(_BYTE *)(a1 + 48) = v11;
  sub_10001D9D8(v12, v13);
  v14 = *(_QWORD *)(a2 + 56);
  v15 = *(_BYTE *)(a2 + 64);
  sub_10001D97C(v14, v15);
  v16 = *(_QWORD *)(a1 + 56);
  v17 = *(_BYTE *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = v14;
  *(_BYTE *)(a1 + 64) = v15;
  sub_10001D9D8(v16, v17);
  v18 = *(_QWORD *)(a2 + 72);
  v19 = *(_BYTE *)(a2 + 80);
  sub_10001D97C(v18, v19);
  v20 = *(_QWORD *)(a1 + 72);
  v21 = *(_BYTE *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = v18;
  *(_BYTE *)(a1 + 80) = v19;
  sub_10001D9D8(v20, v21);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  return a1;
}

__n128 initializeWithTake for TFHighlightControl(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t assignWithTake for TFHighlightControl(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  char v17;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  v4 = *(_BYTE *)(a2 + 32);
  v5 = *(_BYTE *)(a2 + 33);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_BYTE *)(a1 + 33);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v8 = *(unsigned __int8 *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 33) = v5;
  sub_10001D9CC(v6, v8, v7);
  v9 = *(_BYTE *)(a2 + 48);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = v9;
  sub_10001D9D8(v10, v11);
  v12 = *(_BYTE *)(a2 + 64);
  v13 = *(_QWORD *)(a1 + 56);
  v14 = *(_BYTE *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = v12;
  sub_10001D9D8(v13, v14);
  v15 = *(_BYTE *)(a2 + 80);
  v16 = *(_QWORD *)(a1 + 72);
  v17 = *(_BYTE *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = v15;
  sub_10001D9D8(v16, v17);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  return a1;
}

uint64_t getEnumTagSinglePayload for TFHighlightControl(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 96))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TFHighlightControl(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 96) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for TFHighlightControl()
{
  return &type metadata for TFHighlightControl;
}

__n128 initializeWithTake for TFBlockquoteControl(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 10) = *(_OWORD *)(a2 + 10);
  *(__n128 *)a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for TFBlockquoteControl()
{
  return &type metadata for TFBlockquoteControl;
}

ValueMetadata *type metadata accessor for TFQuoteLevelControl()
{
  return &type metadata for TFQuoteLevelControl;
}

uint64_t sub_10004C3AC(uint64_t a1, uint64_t *a2, int *a3)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    v8 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    v9 = *((_BYTE *)a2 + 25);
    v10 = *((unsigned __int8 *)a2 + 24);
    swift_retain();
    sub_10001D970(v8, v10, v9);
    *(_QWORD *)(a1 + 16) = v8;
    *(_BYTE *)(a1 + 24) = v10;
    *(_BYTE *)(a1 + 25) = v9;
    v11 = a2[4];
    v12 = *((_BYTE *)a2 + 40);
    sub_10001D97C(v11, v12);
    *(_QWORD *)(a1 + 32) = v11;
    *(_BYTE *)(a1 + 40) = v12;
    v13 = a2[6];
    v14 = *((_BYTE *)a2 + 56);
    sub_10001D97C(v13, v14);
    *(_QWORD *)(a1 + 48) = v13;
    *(_BYTE *)(a1 + 56) = v14;
    v15 = a3[8];
    v16 = (_QWORD *)(a1 + v15);
    v17 = (uint64_t *)((char *)a2 + v15);
    v18 = sub_10000498C(&qword_100098F10);
    if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
    {
      v19 = type metadata accessor for UserInterfaceSizeClass(0);
      v20 = *(_QWORD *)(v19 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v20 + 48))(v17, 1, v19))
      {
        v21 = sub_10000498C(&qword_100098F18);
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
        v22 = 1;
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v20 + 16))(v16, v17, v19);
        v22 = 1;
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v16, 0, 1, v19);
      }
    }
    else
    {
      *v16 = *v17;
      swift_retain();
      v22 = 0;
    }
    swift_storeEnumTagMultiPayload(v16, v18, v22);
    v23 = a3[10];
    *(_QWORD *)(a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    *(_QWORD *)(a1 + v23) = *(uint64_t *)((char *)a2 + v23);
  }
  return a1;
}

uint64_t sub_10004C568(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  swift_release();
  sub_10001D9CC(*(_QWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 24), *(_BYTE *)(a1 + 25));
  sub_10001D9D8(*(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  sub_10001D9D8(*(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
  v4 = a1 + *(int *)(a2 + 32);
  v5 = sub_10000498C(&qword_100098F10);
  if (swift_getEnumCaseMultiPayload(v4, v5) != 1)
    return swift_release();
  v6 = type metadata accessor for UserInterfaceSizeClass(0);
  v7 = *(_QWORD *)(v6 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v4, 1, v6);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v4, v6);
  return result;
}

uint64_t sub_10004C640(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_BYTE *)(a2 + 25);
  v9 = *(unsigned __int8 *)(a2 + 24);
  swift_retain();
  sub_10001D970(v7, v9, v8);
  *(_QWORD *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 24) = v9;
  *(_BYTE *)(a1 + 25) = v8;
  v10 = *(_QWORD *)(a2 + 32);
  v11 = *(_BYTE *)(a2 + 40);
  sub_10001D97C(v10, v11);
  *(_QWORD *)(a1 + 32) = v10;
  *(_BYTE *)(a1 + 40) = v11;
  v12 = *(_QWORD *)(a2 + 48);
  v13 = *(_BYTE *)(a2 + 56);
  sub_10001D97C(v12, v13);
  *(_QWORD *)(a1 + 48) = v12;
  *(_BYTE *)(a1 + 56) = v13;
  v14 = a3[8];
  v15 = (_QWORD *)(a1 + v14);
  v16 = (_QWORD *)(a2 + v14);
  v17 = sub_10000498C(&qword_100098F10);
  if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
  {
    v18 = type metadata accessor for UserInterfaceSizeClass(0);
    v19 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v19 + 48))(v16, 1, v18))
    {
      v20 = sub_10000498C(&qword_100098F18);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      v21 = 1;
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v19 + 16))(v15, v16, v18);
      v21 = 1;
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v15, 0, 1, v18);
    }
  }
  else
  {
    *v15 = *v16;
    swift_retain();
    v21 = 0;
  }
  swift_storeEnumTagMultiPayload(v15, v17, v21);
  v22 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  *(_QWORD *)(a1 + v22) = *(_QWORD *)(a2 + v22);
  return a1;
}

uint64_t sub_10004C7D4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char v7;
  unsigned __int8 v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 25);
  v8 = *(_BYTE *)(a2 + 24);
  sub_10001D970(v6, v8, v7);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_BYTE *)(a1 + 25);
  *(_QWORD *)(a1 + 16) = v6;
  v11 = *(unsigned __int8 *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v8;
  *(_BYTE *)(a1 + 25) = v7;
  sub_10001D9CC(v9, v11, v10);
  v12 = *(_QWORD *)(a2 + 32);
  v13 = *(_BYTE *)(a2 + 40);
  sub_10001D97C(v12, v13);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v12;
  *(_BYTE *)(a1 + 40) = v13;
  sub_10001D9D8(v14, v15);
  v16 = *(_QWORD *)(a2 + 48);
  v17 = *(_BYTE *)(a2 + 56);
  sub_10001D97C(v16, v17);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_BYTE *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v16;
  *(_BYTE *)(a1 + 56) = v17;
  sub_10001D9D8(v18, v19);
  if (a1 != a2)
  {
    v20 = a3[8];
    v21 = (_QWORD *)(a1 + v20);
    v22 = (_QWORD *)(a2 + v20);
    sub_1000092D0(a1 + v20, &qword_100098F10);
    v23 = sub_10000498C(&qword_100098F10);
    if (swift_getEnumCaseMultiPayload(v22, v23) == 1)
    {
      v24 = type metadata accessor for UserInterfaceSizeClass(0);
      v25 = *(_QWORD *)(v24 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v25 + 48))(v22, 1, v24))
      {
        v26 = sub_10000498C(&qword_100098F18);
        memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
        v27 = 1;
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v25 + 16))(v21, v22, v24);
        v27 = 1;
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v21, 0, 1, v24);
      }
    }
    else
    {
      *v21 = *v22;
      swift_retain();
      v27 = 0;
    }
    swift_storeEnumTagMultiPayload(v21, v23, v27);
  }
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  return a1;
}

uint64_t sub_10004C9C0(uint64_t a1, __int128 *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  void *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_WORD *)(a1 + 24) = *((_WORD *)a2 + 12);
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  v7 = a3[8];
  v8 = (void *)(a1 + v7);
  v9 = (char *)a2 + v7;
  *(_OWORD *)a1 = v6;
  v10 = sub_10000498C(&qword_100098F10);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for UserInterfaceSizeClass(0);
    v12 = *(_QWORD *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v11))
    {
      v13 = sub_10000498C(&qword_100098F18);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v12 + 32))(v8, v9, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v8, 0, 1, v11);
    }
    swift_storeEnumTagMultiPayload(v8, v10, 1);
  }
  else
  {
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  v14 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  *(_QWORD *)(a1 + v14) = *(_QWORD *)((char *)a2 + v14);
  return a1;
}

uint64_t sub_10004CB1C(uint64_t a1, uint64_t a2, int *a3)
{
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  v6 = *(_BYTE *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 25);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_BYTE *)(a1 + 25);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v10 = *(unsigned __int8 *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 25) = v7;
  sub_10001D9CC(v8, v10, v9);
  v11 = *(_BYTE *)(a2 + 40);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = v11;
  sub_10001D9D8(v12, v13);
  v14 = *(_BYTE *)(a2 + 56);
  v15 = *(_QWORD *)(a1 + 48);
  v16 = *(_BYTE *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = v14;
  sub_10001D9D8(v15, v16);
  if (a1 != a2)
  {
    v17 = a3[8];
    v18 = (void *)(a1 + v17);
    v19 = (const void *)(a2 + v17);
    sub_1000092D0(a1 + v17, &qword_100098F10);
    v20 = sub_10000498C(&qword_100098F10);
    if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
    {
      v21 = type metadata accessor for UserInterfaceSizeClass(0);
      v22 = *(_QWORD *)(v21 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48))(v19, 1, v21))
      {
        v23 = sub_10000498C(&qword_100098F18);
        memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v22 + 32))(v18, v19, v21);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v18, 0, 1, v21);
      }
      swift_storeEnumTagMultiPayload(v18, v20, 1);
    }
    else
    {
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
  }
  v24 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  *(_QWORD *)(a1 + v24) = *(_QWORD *)(a2 + v24);
  return a1;
}

uint64_t sub_10004CCC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10004CCD4);
}

uint64_t sub_10004CCD4(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = sub_10000498C(&qword_1000996D8);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(&a1[*(int *)(a3 + 32)], a2, v9);
  }
}

uint64_t sub_10004CD60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10004CD6C);
}

char *sub_10004CD6C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)result = a2;
  }
  else
  {
    v7 = sub_10000498C(&qword_1000996D8);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 32)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for TFTextColorControl(uint64_t a1)
{
  uint64_t result;

  result = qword_100099738;
  if (!qword_100099738)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TFTextColorControl);
  return result;
}

void sub_10004CE20(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = &unk_100074D38;
  v4[1] = &unk_100074D50;
  v4[2] = &unk_100074D68;
  v4[3] = &unk_100074D68;
  sub_10004CEB8(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(v2 - 8) + 64;
    v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 7, v4, a1 + 16);
  }
}

void sub_10004CEB8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100099748)
  {
    v2 = sub_100004660(&qword_100098F18);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100099748);
  }
}

ValueMetadata *type metadata accessor for TFListStylesControl()
{
  return &type metadata for TFListStylesControl;
}

ValueMetadata *type metadata accessor for TFLineHeightControl()
{
  return &type metadata for TFLineHeightControl;
}

uint64_t _s19FontPickerUIService19TFBlockquoteControlVwxx_0(uint64_t a1)
{
  swift_release();
  return sub_10001D9CC(*(_QWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 24), *(_BYTE *)(a1 + 25));
}

uint64_t _s19FontPickerUIService19TFBlockquoteControlVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_BYTE *)(a2 + 25);
  v6 = *(unsigned __int8 *)(a2 + 24);
  swift_retain();
  sub_10001D970(v4, v6, v5);
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 25) = v5;
  return a1;
}

uint64_t _s19FontPickerUIService19TFBlockquoteControlVwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_BYTE *)(a2 + 25);
  v6 = *(unsigned __int8 *)(a2 + 24);
  sub_10001D970(v4, v6, v5);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_BYTE *)(a1 + 25);
  *(_QWORD *)(a1 + 16) = v4;
  v9 = *(unsigned __int8 *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 25) = v5;
  sub_10001D9CC(v7, v9, v8);
  return a1;
}

uint64_t _s19FontPickerUIService19TFBlockquoteControlVwta_0(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(_BYTE *)(a2 + 25);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_BYTE *)(a1 + 25);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v8 = *(unsigned __int8 *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 25) = v5;
  sub_10001D9CC(v6, v8, v7);
  return a1;
}

uint64_t _s19FontPickerUIService19TFBlockquoteControlVwet_0(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 26))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t _s19FontPickerUIService19TFBlockquoteControlVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_WORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 26) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 26) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for TFTextIndentationControl()
{
  return &type metadata for TFTextIndentationControl;
}

uint64_t destroy for TFTextAlignmentControl(uint64_t a1)
{
  swift_release();
  return sub_10001D9CC(*(_QWORD *)(a1 + 24), *(unsigned __int8 *)(a1 + 32), *(_BYTE *)(a1 + 33));
}

uint64_t initializeWithCopy for TFTextAlignmentControl(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_BYTE *)(a2 + 33);
  v6 = *(unsigned __int8 *)(a2 + 32);
  swift_retain();
  sub_10001D970(v4, v6, v5);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 33) = v5;
  return a1;
}

uint64_t assignWithCopy for TFTextAlignmentControl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_BYTE *)(a2 + 33);
  v6 = *(unsigned __int8 *)(a2 + 32);
  sub_10001D970(v4, v6, v5);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_BYTE *)(a1 + 33);
  *(_QWORD *)(a1 + 24) = v4;
  v9 = *(unsigned __int8 *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 33) = v5;
  sub_10001D9CC(v7, v9, v8);
  return a1;
}

__n128 initializeWithTake for TFTextAlignmentControl(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for TFTextAlignmentControl(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  v4 = *(_BYTE *)(a2 + 32);
  v5 = *(_BYTE *)(a2 + 33);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_BYTE *)(a1 + 33);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v8 = *(unsigned __int8 *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 33) = v5;
  sub_10001D9CC(v6, v8, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for TFTextAlignmentControl(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 34))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TFTextAlignmentControl(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_WORD *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 34) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 34) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for TFTextAlignmentControl()
{
  return &type metadata for TFTextAlignmentControl;
}

uint64_t destroy for TFFontSizeControl(uint64_t a1, uint64_t a2)
{
  return sub_10004D3D0(a1, a2, (void (*)(_QWORD, _QWORD))sub_10001D9D8, (uint64_t (*)(_QWORD, _QWORD))sub_1000527B0);
}

uint64_t sub_10004D3D0(uint64_t a1, uint64_t a2, void (*a3)(_QWORD, _QWORD), uint64_t (*a4)(_QWORD, _QWORD))
{
  swift_release();
  sub_10001D9CC(*(_QWORD *)(a1 + 24), *(unsigned __int8 *)(a1 + 32), *(_BYTE *)(a1 + 33));
  sub_10001D9D8(*(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
  a3(*(_QWORD *)(a1 + 56), *(unsigned __int8 *)(a1 + 64));
  return a4(*(_QWORD *)(a1 + 72), *(unsigned __int8 *)(a1 + 80));
}

uint64_t initializeWithCopy for TFFontSizeControl(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v2 = a2;
  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_BYTE *)(a2 + 33);
  v7 = *(unsigned __int8 *)(a2 + 32);
  swift_retain();
  sub_10001D970(v5, v7, v6);
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 33) = v6;
  v8 = *(_QWORD *)(v2 + 40);
  v9 = *(_BYTE *)(v2 + 48);
  sub_10001D97C(v8, v9);
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = v9;
  v10 = *(_QWORD *)(v2 + 56);
  v11 = *(_BYTE *)(v2 + 64);
  sub_10001D97C(v10, v11);
  *(_QWORD *)(a1 + 56) = v10;
  *(_BYTE *)(a1 + 64) = v11;
  v12 = *(_QWORD *)(v2 + 72);
  LOBYTE(v2) = *(_BYTE *)(v2 + 80);
  sub_10001D97C(v12, v2);
  *(_QWORD *)(a1 + 72) = v12;
  *(_BYTE *)(a1 + 80) = v2;
  return a1;
}

uint64_t assignWithCopy for TFFontSizeControl(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  unsigned __int8 v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v2 = a2;
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 24);
  v5 = *(_BYTE *)(v2 + 33);
  v6 = *(_BYTE *)(v2 + 32);
  sub_10001D970(v4, v6, v5);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_BYTE *)(a1 + 33);
  *(_QWORD *)(a1 + 24) = v4;
  v9 = *(unsigned __int8 *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 33) = v5;
  sub_10001D9CC(v7, v9, v8);
  v10 = *(_QWORD *)(v2 + 40);
  v11 = *(_BYTE *)(v2 + 48);
  sub_10001D97C(v10, v11);
  v12 = *(_QWORD *)(a1 + 40);
  v13 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v10;
  *(_BYTE *)(a1 + 48) = v11;
  sub_10001D9D8(v12, v13);
  v14 = *(_QWORD *)(v2 + 56);
  v15 = *(_BYTE *)(v2 + 64);
  sub_10001D97C(v14, v15);
  v16 = *(_QWORD *)(a1 + 56);
  v17 = *(_BYTE *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = v14;
  *(_BYTE *)(a1 + 64) = v15;
  sub_10001D9D8(v16, v17);
  v18 = *(_QWORD *)(v2 + 72);
  LOBYTE(v2) = *(_BYTE *)(v2 + 80);
  sub_10001D97C(v18, v2);
  v19 = *(_QWORD *)(a1 + 72);
  v20 = *(_BYTE *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = v18;
  *(_BYTE *)(a1 + 80) = v2;
  sub_10001D9D8(v19, v20);
  return a1;
}

uint64_t assignWithTake for TFFontSizeControl(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  char v17;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  v4 = *(_BYTE *)(a2 + 32);
  v5 = *(_BYTE *)(a2 + 33);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_BYTE *)(a1 + 33);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v8 = *(unsigned __int8 *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 33) = v5;
  sub_10001D9CC(v6, v8, v7);
  v9 = *(_BYTE *)(a2 + 48);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = v9;
  sub_10001D9D8(v10, v11);
  v12 = *(_BYTE *)(a2 + 64);
  v13 = *(_QWORD *)(a1 + 56);
  v14 = *(_BYTE *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = v12;
  sub_10001D9D8(v13, v14);
  v15 = *(_BYTE *)(a2 + 80);
  v16 = *(_QWORD *)(a1 + 72);
  v17 = *(_BYTE *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = v15;
  sub_10001D9D8(v16, v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for TFFontSizeControl(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 81))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TFFontSizeControl(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 80) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 81) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 81) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for TFFontSizeControl()
{
  return &type metadata for TFFontSizeControl;
}

uint64_t destroy for TFFontPickerControl(uint64_t a1)
{
  swift_release();
  sub_10001D9CC(*(_QWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 24), *(_BYTE *)(a1 + 25));
  return sub_10001D9D8(*(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
}

uint64_t initializeWithCopy for TFFontPickerControl(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 25);
  v7 = *(unsigned __int8 *)(a2 + 24);
  swift_retain();
  sub_10001D970(v5, v7, v6);
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 25) = v6;
  v8 = *(_QWORD *)(v2 + 32);
  LOBYTE(v2) = *(_BYTE *)(v2 + 40);
  sub_10001D97C(v8, v2);
  *(_QWORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 40) = v2;
  return a1;
}

uint64_t assignWithCopy for TFFontPickerControl(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  char v5;
  unsigned __int8 v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v2 = a2;
  *(_QWORD *)a1 = *a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = v2[1];
  v4 = v2[2];
  v5 = *((_BYTE *)v2 + 25);
  v6 = *((_BYTE *)v2 + 24);
  sub_10001D970(v4, v6, v5);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_BYTE *)(a1 + 25);
  *(_QWORD *)(a1 + 16) = v4;
  v9 = *(unsigned __int8 *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 25) = v5;
  sub_10001D9CC(v7, v9, v8);
  v10 = v2[4];
  LOBYTE(v2) = *((_BYTE *)v2 + 40);
  sub_10001D97C(v10, (char)v2);
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v10;
  *(_BYTE *)(a1 + 40) = (_BYTE)v2;
  sub_10001D9D8(v11, v12);
  return a1;
}

__n128 initializeWithTake for TFFontPickerControl(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for TFFontPickerControl(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(_BYTE *)(a2 + 25);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_BYTE *)(a1 + 25);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v8 = *(unsigned __int8 *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 25) = v5;
  sub_10001D9CC(v6, v8, v7);
  v9 = *(_BYTE *)(a2 + 40);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = v9;
  sub_10001D9D8(v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for TFFontPickerControl(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 41))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TFFontPickerControl(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for TFFontPickerControl()
{
  return &type metadata for TFFontPickerControl;
}

uint64_t destroy for TFFontAttributesControl(uint64_t a1)
{
  swift_release();
  sub_10001D9CC(*(_QWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 24), *(_BYTE *)(a1 + 25));
  sub_10001D9D8(*(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  return sub_10001D9D8(*(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
}

uint64_t initializeWithCopy for TFFontAttributesControl(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 25);
  v7 = *(unsigned __int8 *)(a2 + 24);
  swift_retain();
  sub_10001D970(v5, v7, v6);
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 25) = v6;
  v8 = *(_QWORD *)(v2 + 32);
  v9 = *(_BYTE *)(v2 + 40);
  sub_10001D97C(v8, v9);
  *(_QWORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 40) = v9;
  v10 = *(_QWORD *)(v2 + 48);
  LOBYTE(v2) = *(_BYTE *)(v2 + 56);
  sub_10001D97C(v10, v2);
  *(_QWORD *)(a1 + 48) = v10;
  *(_BYTE *)(a1 + 56) = v2;
  return a1;
}

uint64_t assignWithCopy for TFFontAttributesControl(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  char v5;
  unsigned __int8 v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v2 = a2;
  *(_QWORD *)a1 = *a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = v2[1];
  v4 = v2[2];
  v5 = *((_BYTE *)v2 + 25);
  v6 = *((_BYTE *)v2 + 24);
  sub_10001D970(v4, v6, v5);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_BYTE *)(a1 + 25);
  *(_QWORD *)(a1 + 16) = v4;
  v9 = *(unsigned __int8 *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 25) = v5;
  sub_10001D9CC(v7, v9, v8);
  v10 = v2[4];
  v11 = *((_BYTE *)v2 + 40);
  sub_10001D97C(v10, v11);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v10;
  *(_BYTE *)(a1 + 40) = v11;
  sub_10001D9D8(v12, v13);
  v14 = v2[6];
  LOBYTE(v2) = *((_BYTE *)v2 + 56);
  sub_10001D97C(v14, (char)v2);
  v15 = *(_QWORD *)(a1 + 48);
  v16 = *(_BYTE *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v14;
  *(_BYTE *)(a1 + 56) = (_BYTE)v2;
  sub_10001D9D8(v15, v16);
  return a1;
}

__n128 initializeWithTake for TFFontAttributesControl(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for TFFontAttributesControl(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  char v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(_BYTE *)(a2 + 25);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_BYTE *)(a1 + 25);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v8 = *(unsigned __int8 *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 25) = v5;
  sub_10001D9CC(v6, v8, v7);
  v9 = *(_BYTE *)(a2 + 40);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = v9;
  sub_10001D9D8(v10, v11);
  v12 = *(_BYTE *)(a2 + 56);
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_BYTE *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = v12;
  sub_10001D9D8(v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for TFFontAttributesControl(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 57))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TFFontAttributesControl(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 57) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for TFFontAttributesControl()
{
  return &type metadata for TFFontAttributesControl;
}

uint64_t destroy for TFFormattingStylesControl(uint64_t a1)
{
  swift_release();
  sub_10001D9CC(*(_QWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 24), *(_BYTE *)(a1 + 25));
  sub_10001D9D8(*(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  sub_10001D9D8(*(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
  sub_10001D9D8(*(_QWORD *)(a1 + 64), *(_BYTE *)(a1 + 72));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 88));
  return swift_release();
}

uint64_t initializeWithCopy for TFFormattingStylesControl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 25);
  v7 = *(unsigned __int8 *)(a2 + 24);
  swift_retain();
  sub_10001D970(v5, v7, v6);
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 25) = v6;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_BYTE *)(a2 + 40);
  sub_10001D97C(v8, v9);
  *(_QWORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 40) = v9;
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_BYTE *)(a2 + 56);
  sub_10001D97C(v10, v11);
  *(_QWORD *)(a1 + 48) = v10;
  *(_BYTE *)(a1 + 56) = v11;
  v12 = *(_QWORD *)(a2 + 64);
  v13 = *(_BYTE *)(a2 + 72);
  sub_10001D97C(v12, v13);
  *(_QWORD *)(a1 + 64) = v12;
  *(_BYTE *)(a1 + 72) = v13;
  v14 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v14;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain(v14);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for TFFormattingStylesControl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  unsigned __int8 v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_BYTE *)(a2 + 25);
  v6 = *(_BYTE *)(a2 + 24);
  sub_10001D970(v4, v6, v5);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_BYTE *)(a1 + 25);
  *(_QWORD *)(a1 + 16) = v4;
  v9 = *(unsigned __int8 *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 25) = v5;
  sub_10001D9CC(v7, v9, v8);
  v10 = *(_QWORD *)(a2 + 32);
  v11 = *(_BYTE *)(a2 + 40);
  sub_10001D97C(v10, v11);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v10;
  *(_BYTE *)(a1 + 40) = v11;
  sub_10001D9D8(v12, v13);
  v14 = *(_QWORD *)(a2 + 48);
  v15 = *(_BYTE *)(a2 + 56);
  sub_10001D97C(v14, v15);
  v16 = *(_QWORD *)(a1 + 48);
  v17 = *(_BYTE *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v14;
  *(_BYTE *)(a1 + 56) = v15;
  sub_10001D9D8(v16, v17);
  v18 = *(_QWORD *)(a2 + 64);
  v19 = *(_BYTE *)(a2 + 72);
  sub_10001D97C(v18, v19);
  v20 = *(_QWORD *)(a1 + 64);
  v21 = *(_BYTE *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = v18;
  *(_BYTE *)(a1 + 72) = v19;
  sub_10001D9D8(v20, v21);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v22 = *(_QWORD *)(a2 + 88);
  v23 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for TFFormattingStylesControl(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for TFFormattingStylesControl(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  char v17;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(_BYTE *)(a2 + 25);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_BYTE *)(a1 + 25);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v8 = *(unsigned __int8 *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 25) = v5;
  sub_10001D9CC(v6, v8, v7);
  v9 = *(_BYTE *)(a2 + 40);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = v9;
  sub_10001D9D8(v10, v11);
  v12 = *(_BYTE *)(a2 + 56);
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_BYTE *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = v12;
  sub_10001D9D8(v13, v14);
  v15 = *(_BYTE *)(a2 + 72);
  v16 = *(_QWORD *)(a1 + 64);
  v17 = *(_BYTE *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = v15;
  sub_10001D9D8(v16, v17);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 88));
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for TFFormattingStylesControl(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 104))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TFFormattingStylesControl(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 104) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for TFFormattingStylesControl()
{
  return &type metadata for TFFormattingStylesControl;
}

uint64_t sub_10004E1F4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100079264, 1);
}

uint64_t sub_10004E204(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007923C, 1);
}

uint64_t sub_10004E214(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100079214, 1);
}

uint64_t sub_10004E224(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000791EC, 1);
}

uint64_t sub_10004E234(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000791C4, 1);
}

uint64_t sub_10004E244(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007919C, 1);
}

uint64_t sub_10004E254(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100079174, 1);
}

uint64_t sub_10004E264(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007914C, 1);
}

uint64_t sub_10004E274(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100079124, 1);
}

uint64_t sub_10004E284(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000790FC, 1);
}

uint64_t sub_10004E294(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000790D4, 1);
}

uint64_t sub_10004E2A4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000790AC, 1);
}

uint64_t sub_10004E2B4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100079084, 1);
}

_QWORD *sub_10004E2CC@<X0>(_BYTE *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_10004EAAC();
  result = EnvironmentValues.subscript.getter(&v4, &type metadata for TFReducedComponentCornerSizeKey, &type metadata for TFReducedComponentCornerSizeKey, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_10004E318(char *a1)
{
  unint64_t v1;
  char v3;

  v3 = *a1;
  v1 = sub_10004EAAC();
  return EnvironmentValues.subscript.setter(&v3, &type metadata for TFReducedComponentCornerSizeKey, &type metadata for TFReducedComponentCornerSizeKey, v1);
}

uint64_t sub_10004E360(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  if (a1)
  {
    KeyPath = swift_getKeyPath(&unk_100075640);
    swift_getKeyPath(&unk_100075668);
    v3 = swift_retain();
    static Published.subscript.getter(&v15, v3, KeyPath);
    swift_release();
    swift_release();
    swift_release();
    v4 = v15;
    if ((unint64_t)v15 >> 62)
    {
      if (v15 < 0)
        v10 = v15;
      else
        v10 = v15 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v15);
      v5 = _CocoaArrayWrapper.endIndex.getter(v10);
      swift_bridgeObjectRelease(v4);
    }
    else
    {
      v5 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease(v4);
    if (v5)
    {
      v6 = 0;
    }
    else
    {
      v7 = swift_getKeyPath(&unk_1000756C0);
      swift_getKeyPath(&unk_1000756E8);
      v8 = swift_retain();
      static Published.subscript.getter(&v14, v8, v7);
      swift_release();
      swift_release();
      swift_release();
      v6 = v14 ^ 1;
    }
    return v6 & 1;
  }
  else
  {
    v12 = type metadata accessor for TextFormattingState(0);
    v13 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
    result = EnvironmentObject.error()(0, a2, v12, v13);
    __break(1u);
  }
  return result;
}

uint64_t sub_10004E4D0(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(_QWORD *, uint64_t, uint64_t);
  uint64_t v22;
  id v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  char v39;
  uint64_t result;
  uint64_t v41;
  uint64_t v42;
  _BYTE v43[12];
  int v44;

  v44 = a1;
  v5 = sub_10000498C(&qword_100098FC8);
  v6 = __chkstk_darwin(v5);
  v8 = &v43[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = __chkstk_darwin(v6);
  v11 = &v43[-v10];
  v12 = __chkstk_darwin(v9);
  v14 = &v43[-v13];
  __chkstk_darwin(v12);
  v16 = &v43[-v15];
  if (a2)
  {
    v17 = 0x696C612E74786574;
    KeyPath = swift_getKeyPath(&unk_100075300);
    swift_getKeyPath(&unk_100075328);
    v19 = swift_retain();
    static Published.subscript.getter(v16, v19, KeyPath);
    swift_release();
    swift_release();
    v20 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor(0);
    v21 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 48);
    if (v21(v16, 1, v20))
    {
      sub_1000092D0((uint64_t)v16, &qword_100098FC8);
      swift_release();
    }
    else
    {
      v22 = UITextFormattingViewController.FormattingDescriptor.textAlignments.getter();
      sub_1000092D0((uint64_t)v16, &qword_100098FC8);
      v23 = UITextFormattingViewControllerTextAlignmentLeft;
      v24 = sub_100011198();
      swift_release();

      swift_bridgeObjectRelease(v22);
      if ((v24 & 1) != 0)
        return v17;
    }
    v25 = swift_getKeyPath(&unk_100075300);
    swift_getKeyPath(&unk_100075328);
    v26 = swift_retain();
    static Published.subscript.getter(v14, v26, v25);
    swift_release();
    swift_release();
    if (v21(v14, 1, v20))
    {
      sub_1000092D0((uint64_t)v14, &qword_100098FC8);
      swift_release();
    }
    else
    {
      v27 = UITextFormattingViewController.FormattingDescriptor.textAlignments.getter();
      sub_1000092D0((uint64_t)v14, &qword_100098FC8);
      v28 = UITextFormattingViewControllerTextAlignmentCenter;
      v29 = sub_100011198();
      swift_release();

      swift_bridgeObjectRelease(v27);
      if ((v29 & 1) != 0)
        return 0xD000000000000010;
    }
    v30 = swift_getKeyPath(&unk_100075300);
    swift_getKeyPath(&unk_100075328);
    v31 = swift_retain();
    static Published.subscript.getter(v11, v31, v30);
    swift_release();
    swift_release();
    if (v21(v11, 1, v20))
    {
      sub_1000092D0((uint64_t)v11, &qword_100098FC8);
      swift_release();
      goto LABEL_12;
    }
    v32 = UITextFormattingViewController.FormattingDescriptor.textAlignments.getter();
    sub_1000092D0((uint64_t)v11, &qword_100098FC8);
    v33 = UITextFormattingViewControllerTextAlignmentRight;
    v34 = sub_100011198();
    swift_release();

    swift_bridgeObjectRelease(v32);
    if ((v34 & 1) == 0)
    {
LABEL_12:
      v35 = swift_getKeyPath(&unk_100075300);
      swift_getKeyPath(&unk_100075328);
      v36 = swift_retain();
      static Published.subscript.getter(v8, v36, v35);
      swift_release();
      swift_release();
      if (v21(v8, 1, v20))
      {
        sub_1000092D0((uint64_t)v8, &qword_100098FC8);
        swift_release();
      }
      else
      {
        v37 = UITextFormattingViewController.FormattingDescriptor.textAlignments.getter();
        sub_1000092D0((uint64_t)v8, &qword_100098FC8);
        v38 = UITextFormattingViewControllerTextAlignmentJustified;
        v39 = sub_100011198();
        swift_release();

        swift_bridgeObjectRelease(v37);
        if ((v39 & 1) != 0 && (v44 & 1) != 0)
          return 0xD000000000000014;
      }
    }
    return v17;
  }
  v41 = type metadata accessor for TextFormattingState(0);
  v42 = sub_100007D90((unint64_t *)&unk_100098FE0, type metadata accessor for TextFormattingState, (uint64_t)&unk_100074400);
  result = EnvironmentObject.error()(0, a3, v41, v42);
  __break(1u);
  return result;
}

unint64_t sub_10004E99C(void *a1)
{
  id v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  Swift::String v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  Swift::String v13;
  unint64_t v15;

  v2 = objc_msgSend(a1, "_textAnimationName");
  if (v2)
  {
    v3 = v2;
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
    v6 = v5;

    v15 = 0x6566666574786574;
    v7._countAndFlagsBits = v4;
    v7._object = v6;
    String.append(_:)(v7);
    v8 = v6;
  }
  else
  {
    _StringGuts.grow(_:)(18);
    swift_bridgeObjectRelease(0xE000000000000000);
    v15 = 0xD000000000000010;
    v9 = objc_msgSend(a1, "componentKey");
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v12 = v11;

    v13._countAndFlagsBits = v10;
    v13._object = v12;
    String.append(_:)(v13);
    v8 = v12;
  }
  swift_bridgeObjectRelease(v8);
  return v15;
}

unint64_t sub_10004EAAC()
{
  unint64_t result;

  result = qword_1000997B8;
  if (!qword_1000997B8)
  {
    result = swift_getWitnessTable(&unk_1000769CC, &type metadata for TFReducedComponentCornerSizeKey);
    atomic_store(result, (unint64_t *)&qword_1000997B8);
  }
  return result;
}

unint64_t sub_10004EAF8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100099800;
  if (!qword_100099800)
  {
    v1 = sub_100004660(&qword_1000997D0);
    sub_10000966C(&qword_100099808, &qword_1000997C8, (uint64_t)&unk_100075F60);
    sub_100007D90(&qword_1000987F0, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100099800);
  }
  return result;
}

unint64_t sub_10004EB94()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100099810;
  if (!qword_100099810)
  {
    v1 = sub_100004660(&qword_1000997D8);
    sub_100007D90(&qword_100099818, type metadata accessor for TFToggle, (uint64_t)&unk_100075F10);
    sub_100007D90(&qword_1000987F0, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100099810);
  }
  return result;
}

unint64_t sub_10004EC30()
{
  unint64_t result;

  result = qword_100099828;
  if (!qword_100099828)
  {
    result = swift_getWitnessTable(&unk_100075ED8, &type metadata for TFMenuStyle);
    atomic_store(result, (unint64_t *)&qword_100099828);
  }
  return result;
}

uint64_t sub_10004EC78()
{
  uint64_t v0;

  return sub_10004AE3C(v0 + 16);
}

uint64_t sub_10004EC80(uint64_t a1)
{
  sub_10001D970(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8), *(_BYTE *)(a1 + 9));
  return a1;
}

uint64_t sub_10004ECB0(uint64_t a1)
{
  sub_10001D97C(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  return a1;
}

uint64_t sub_10004ECDC()
{
  uint64_t v0;

  return sub_10004A01C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10004ECE4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10004A740(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_10004ECEC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_100099868;
  if (!qword_100099868)
  {
    v1 = sub_100004660(&qword_100099870);
    v2[0] = sub_100004660(&qword_100099878);
    v2[1] = &type metadata for TFMenuStyle;
    v2[2] = sub_10000966C(&qword_100099880, &qword_100099878, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
    v2[3] = sub_10004EC30();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.menuStyle<A>(_:)>>, 1);
    sub_100007D90(&qword_100099818, type metadata accessor for TFToggle, (uint64_t)&unk_100075F10);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100099868);
  }
  return result;
}

_QWORD *sub_10004EDCC@<X0>(_BYTE *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_10004EE60();
  result = EnvironmentValues.subscript.getter(&v4, &type metadata for TFMenuLabelChevronDisplayedKey, &type metadata for TFMenuLabelChevronDisplayedKey, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_10004EE18(char *a1)
{
  unint64_t v1;
  char v3;

  v3 = *a1;
  v1 = sub_10004EE60();
  return EnvironmentValues.subscript.setter(&v3, &type metadata for TFMenuLabelChevronDisplayedKey, &type metadata for TFMenuLabelChevronDisplayedKey, v1);
}

unint64_t sub_10004EE60()
{
  unint64_t result;

  result = qword_100099888;
  if (!qword_100099888)
  {
    result = swift_getWitnessTable(&unk_100075E50, &type metadata for TFMenuLabelChevronDisplayedKey);
    atomic_store(result, (unint64_t *)&qword_100099888);
  }
  return result;
}

const char *sub_10004EEA4()
{
  return "componentKey";
}

id sub_10004EEB0@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "componentKey");
  *a2 = result;
  return result;
}

uint64_t sub_10004EEE8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_10004EF14@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10004A164(*a1, a2);
}

_QWORD *sub_10004EF38(_QWORD *a1)
{
  swift_retain(*a1);
  return a1;
}

uint64_t sub_10004EF60()
{
  uint64_t v0;

  return sub_10004B0E8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10004EF68@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10004B2BC(*(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_BYTE *)(v1 + 40), a1);
}

uint64_t sub_10004EF7C()
{
  uint64_t v0;

  swift_release();
  sub_10001D9CC(*(_QWORD *)(v0 + 40), *(unsigned __int8 *)(v0 + 48), *(_BYTE *)(v0 + 49));
  sub_10001D9D8(*(_QWORD *)(v0 + 56), *(_BYTE *)(v0 + 64));
  return swift_deallocObject(v0, 65, 7);
}

uint64_t sub_10004EFC4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10004B224(a1, a2);
}

uint64_t sub_10004EFCC()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_10004EFEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10004B890(a1, a2, a3, a4, (void (*)(_QWORD))&type metadata accessor for ColorScheme, (uint64_t (*)(char *))&EnvironmentValues.colorScheme.setter);
}

uint64_t sub_10004F010()
{
  return EnvironmentValues.dynamicTypeSize.getter();
}

uint64_t sub_10004F030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10004B890(a1, a2, a3, a4, (void (*)(_QWORD))&type metadata accessor for DynamicTypeSize, (uint64_t (*)(char *))&EnvironmentValues.dynamicTypeSize.setter);
}

uint64_t sub_10004F054@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.accessibilityReduceMotion.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10004F080(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100004660(a2);
    a3();
    a4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10004F0F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000998D8;
  if (!qword_1000998D8)
  {
    v1 = sub_100004660(&qword_1000998C0);
    sub_100007D90(&qword_1000998E0, type metadata accessor for TFAnimatedText, (uint64_t)&unk_100075E00);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000998D8);
  }
  return result;
}

unint64_t sub_10004F174()
{
  unint64_t result;

  result = qword_1000998E8;
  if (!qword_1000998E8)
  {
    result = swift_getWitnessTable(&unk_100075DB0, &type metadata for TFComponentBackgroundModifier);
    atomic_store(result, (unint64_t *)&qword_1000998E8);
  }
  return result;
}

uint64_t sub_10004F1BC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_10004B430(v1 + 32, *(void **)(v1 + 88), a1);
}

uint64_t sub_10004F1D0()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  swift_release();
  sub_10001D9CC(*(_QWORD *)(v0 + 56), *(unsigned __int8 *)(v0 + 64), *(_BYTE *)(v0 + 65));
  sub_10001D9D8(*(_QWORD *)(v0 + 72), *(_BYTE *)(v0 + 80));

  return swift_deallocObject(v0, 96, 7);
}

uint64_t sub_10004F228(uint64_t a1)
{
  uint64_t v1;

  return sub_10004B5CC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + 32, *(void **)(v1 + 88));
}

unint64_t sub_10004F238()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_100099948;
  if (!qword_100099948)
  {
    v1 = sub_100004660(&qword_100099900);
    v2[0] = sub_100004660(&qword_100099950);
    v2[1] = &type metadata for String;
    v2[2] = sub_10000966C(&qword_100099958, &qword_100099950, (uint64_t)&protocol conformance descriptor for ScrollView<A>);
    v2[3] = &protocol witness table for String;
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.scrollPosition<A>(id:anchor:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100099948);
  }
  return result;
}

unint64_t sub_10004F300()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100099968;
  if (!qword_100099968)
  {
    v1 = sub_100004660(&qword_100099940);
    sub_10004F36C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100099968);
  }
  return result;
}

unint64_t sub_10004F36C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100099970;
  if (!qword_100099970)
  {
    v1 = sub_100004660(&qword_100099938);
    sub_10000966C(&qword_100099978, &qword_100099930, (uint64_t)&unk_100075FB0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100099970);
  }
  return result;
}

unint64_t sub_10004F3F0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  result = qword_100099980;
  if (!qword_100099980)
  {
    v1 = sub_100004660(&qword_100099920);
    v2 = sub_100004660(&qword_100099910);
    v3 = sub_100004660(&qword_100099908);
    v6 = sub_100004660(&qword_100099900);
    v7 = sub_10004F238();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.scrollClipDisabled(_:)>>, 1);
    v6 = v3;
    v7 = OpaqueTypeConformance2;
    v5 = swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 1);
    v6 = v2;
    v7 = v5;
    swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 1);
    sub_10000966C(&qword_100099960, &qword_1000998F0, (uint64_t)&unk_100075FB0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100099980);
  }
  return result;
}

uint64_t sub_10004F4F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100032B84(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10004F4FC(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100004660(a2);
    sub_10000966C(&qword_1000999C0, &qword_1000999C8, (uint64_t)&protocol conformance descriptor for Toggle<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10004F57C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

_BYTE *sub_10004F58C(_BYTE *a1)
{
  uint64_t v1;

  return sub_10001A610(a1, *(_BYTE *)(v1 + 16));
}

uint64_t sub_10004F594@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = UITextFormattingViewController.FormattingStyle.styleKey.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_10004F5C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100032DA4(a1, v2 + 16, a2);
}

uint64_t sub_10004F5CC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  type metadata accessor for UITextFormattingViewController.FormattingStyle(0);
  return sub_100032FA0((_QWORD *)(v1 + 32), a1);
}

uint64_t sub_10004F614()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UITextFormattingViewController.FormattingStyle(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 136) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release();
  sub_10001D9CC(*(_QWORD *)(v0 + 48), *(unsigned __int8 *)(v0 + 56), *(_BYTE *)(v0 + 57));
  sub_10001D9D8(*(_QWORD *)(v0 + 64), *(_BYTE *)(v0 + 72));
  sub_10001D9D8(*(_QWORD *)(v0 + 80), *(_BYTE *)(v0 + 88));
  sub_10001D9D8(*(_QWORD *)(v0 + 96), *(_BYTE *)(v0 + 104));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10004F6D4(_BYTE *a1)
{
  uint64_t *v1;

  type metadata accessor for UITextFormattingViewController.FormattingStyle(0);
  return sub_100033164(a1, v1[2], v1[3], v1 + 4);
}

uint64_t sub_10004F718@<X0>(uint64_t a1@<X8>)
{
  return sub_1000332EC(a1);
}

uint64_t sub_10004F720@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100033600(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10004F72C()
{
  uint64_t v0;

  return sub_100034CD0(v0 + 16);
}

uint64_t sub_10004F738()
{
  uint64_t v0;

  swift_release();
  sub_10001D9CC(*(_QWORD *)(v0 + 32), *(unsigned __int8 *)(v0 + 40), *(_BYTE *)(v0 + 41));
  sub_10001D9D8(*(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 56));
  sub_10001D9D8(*(_QWORD *)(v0 + 64), *(_BYTE *)(v0 + 72));
  sub_10001D9D8(*(_QWORD *)(v0 + 80), *(_BYTE *)(v0 + 88));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 104));
  swift_release();
  return swift_deallocObject(v0, 120, 7);
}

uint64_t sub_10004F7A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1000339B0(a1, v2 + 16, a2);
}

unint64_t sub_10004F7A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100099A18;
  if (!qword_100099A18)
  {
    v1 = sub_100004660(&qword_100099A10);
    sub_10004F82C();
    sub_100007D90(&qword_1000987F0, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100099A18);
  }
  return result;
}

unint64_t sub_10004F82C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_100099A20;
  if (!qword_100099A20)
  {
    v1 = sub_100004660(&qword_100099A28);
    v2[0] = sub_100004660(&qword_100099A30);
    v2[1] = &type metadata for TFFormattingStylesControl.FormatButtonStyle;
    v2[2] = sub_10000966C(&qword_100099A38, &qword_100099A30, (uint64_t)&protocol conformance descriptor for Button<A>);
    v2[3] = sub_10004F8F4();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100099A20);
  }
  return result;
}

unint64_t sub_10004F8F4()
{
  unint64_t result;

  result = qword_100099A40;
  if (!qword_100099A40)
  {
    result = swift_getWitnessTable(&unk_100075994, &type metadata for TFFormattingStylesControl.FormatButtonStyle);
    atomic_store(result, (unint64_t *)&qword_100099A40);
  }
  return result;
}

uint64_t sub_10004F938()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UITextFormattingViewController.FormattingStyle(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 120) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release();
  sub_10001D9CC(*(_QWORD *)(v0 + 32), *(unsigned __int8 *)(v0 + 40), *(_BYTE *)(v0 + 41));
  sub_10001D9D8(*(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 56));
  sub_10001D9D8(*(_QWORD *)(v0 + 64), *(_BYTE *)(v0 + 72));
  sub_10001D9D8(*(_QWORD *)(v0 + 80), *(_BYTE *)(v0 + 88));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 104));
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10004F9F0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UITextFormattingViewController.FormattingStyle(0)
                                      - 8)
                          + 80);
  return sub_10003408C((_QWORD *)(v0 + 16), v0 + ((v1 + 120) & ~v1));
}

uint64_t sub_10004FA20@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000342F8(*(_QWORD **)(v1 + 24), a1);
}

unint64_t sub_10004FA28()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100099A58;
  if (!qword_100099A58)
  {
    v1 = sub_100004660(&qword_100099A50);
    sub_10004FAAC();
    sub_100007D90(&qword_100099A60, type metadata accessor for TFFontModifier, (uint64_t)&unk_10007697C);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100099A58);
  }
  return result;
}

unint64_t sub_10004FAAC()
{
  unint64_t result;

  result = qword_10009AB60;
  if (!qword_10009AB60)
  {
    result = swift_getWitnessTable(&unk_100075D60, &type metadata for TFText);
    atomic_store(result, (unint64_t *)&qword_10009AB60);
  }
  return result;
}

uint64_t sub_10004FAF8()
{
  return EnvironmentValues.sizeCategory.getter();
}

uint64_t sub_10004FB18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10004B890(a1, a2, a3, a4, (void (*)(_QWORD))&type metadata accessor for ContentSizeCategory, (uint64_t (*)(char *))&EnvironmentValues.sizeCategory.setter);
}

uint64_t sub_10004FB3C()
{
  uint64_t v0;

  return sub_10003428C(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10004FB54(char *a1)
{
  return sub_10002989C(*a1);
}

uint64_t sub_10004FB7C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_100038B38((uint64_t *)(v1 + 32), *(_QWORD *)(v1 + 96), a1);
}

uint64_t sub_10004FB90()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release();
  sub_10001D9CC(*(_QWORD *)(v0 + 48), *(unsigned __int8 *)(v0 + 56), *(_BYTE *)(v0 + 57));
  sub_10001D9D8(*(_QWORD *)(v0 + 64), *(_BYTE *)(v0 + 72));
  sub_10001D9D8(*(_QWORD *)(v0 + 80), *(_BYTE *)(v0 + 88));
  swift_release();
  return swift_deallocObject(v0, 104, 7);
}

uint64_t sub_10004FBEC(char *a1)
{
  uint64_t *v1;

  return sub_100038BE0(a1, v1[2], v1[3], v1 + 4, v1[12]);
}

uint64_t sub_10004FBFC(char *a1)
{
  return sub_100029784(*a1);
}

uint64_t sub_10004FC20(char *a1)
{
  return sub_100028F68(*a1);
}

uint64_t sub_10004FC44()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

unint64_t sub_10004FC54()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100099AD8;
  if (!qword_100099AD8)
  {
    v1 = sub_100004660(&qword_100099AC8);
    sub_100007D90(&qword_100099818, type metadata accessor for TFToggle, (uint64_t)&unk_100075F10);
    sub_10000966C(&qword_100098F30, &qword_100098F38, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyTransformModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100099AD8);
  }
  return result;
}

uint64_t sub_10004FCF0(char *a1)
{
  return sub_10002863C(*a1);
}

uint64_t sub_10004FD14()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

unint64_t sub_10004FD24()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_100099B48;
  if (!qword_100099B48)
  {
    v1 = sub_100004660(&qword_100099B18);
    v2[0] = sub_100004660(&qword_100099B20);
    v2[1] = &type metadata for TFMenuStyle;
    v2[2] = sub_10000966C(&qword_100099B50, &qword_100099B20, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
    v2[3] = sub_10004EC30();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.menuStyle<A>(_:)>>, 1);
    sub_10000966C(&qword_100099B58, &qword_100099B00, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100099B48);
  }
  return result;
}

unint64_t sub_10004FE04()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100099B60;
  if (!qword_100099B60)
  {
    v1 = sub_100004660(&qword_100099AF8);
    sub_10000966C(&qword_100099B38, &qword_100099AF0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    sub_10000966C(&qword_100099B40, &qword_100099AE0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100099B60);
  }
  return result;
}

uint64_t sub_10004FEA8@<X0>(uint64_t a1@<X8>)
{
  return sub_100038580(a1);
}

uint64_t sub_10004FEB0@<X0>(char *a1@<X8>)
{
  uint64_t v1;

  return sub_1000395F4(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10004FEB8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10003A4C8(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10004FEC4@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_10004FEF4(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_10004FF20(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if ((a7 & 1) != 0)
  {
    sub_10000A91C(a1, a2, a3 & 1);
    return swift_bridgeObjectRetain(a4);
  }
  else
  {
    sub_10000A91C(a1, a2, a3 & 1);
    swift_bridgeObjectRetain(a4);
    return swift_retain();
  }
}

unint64_t sub_10004FF70()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100099C08;
  if (!qword_100099C08)
  {
    v1 = sub_100004660(&qword_100099BF8);
    sub_100051940(&qword_100099C10, &qword_100099C18, (void (*)(void))sub_10004FFFC, (uint64_t)&protocol conformance descriptor for <A> Group<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100099C08);
  }
  return result;
}

unint64_t sub_10004FFFC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100099C20;
  if (!qword_100099C20)
  {
    v1 = sub_100004660(&qword_100099C28);
    sub_100050068();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100099C20);
  }
  return result;
}

unint64_t sub_100050068()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100099C30;
  if (!qword_100099C30)
  {
    v1 = sub_100004660(&qword_100099C38);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100099C30);
  }
  return result;
}

uint64_t sub_1000500CC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if ((a7 & 1) != 0)
  {
    sub_100008F20(a1, a2, a3 & 1);
  }
  else
  {
    sub_100008F20(a1, a2, a3 & 1);
    swift_release();
  }
  return swift_bridgeObjectRelease(a4);
}

const char *sub_100050118()
{
  return "fontDescriptor";
}

id sub_100050124@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "fontDescriptor");
  *a2 = result;
  return result;
}

uint64_t sub_100050160@<X0>(void **a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_100039FC0(a1, (__int128 *)(v2 + 16), a2);
}

unint64_t sub_100050168()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100099C48;
  if (!qword_100099C48)
  {
    v1 = sub_1000096AC(255, (unint64_t *)&qword_100099150, UIFontDescriptor_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100099C48);
  }
  return result;
}

uint64_t sub_1000501CC()
{
  uint64_t v0;

  return sub_10003A448((_QWORD *)(v0 + 16), &OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_pickFont);
}

uint64_t sub_1000501EC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, char a14)
{
  id v15;
  uint64_t result;

  if (a5)
  {
    sub_10000A91C(a2, a3, a4 & 1);
    swift_retain();
    swift_bridgeObjectRetain(a5);
    swift_retain();
    swift_retain();
    v15 = a11;
    return sub_10001D97C(a13, a14 & 1);
  }
  return result;
}

uint64_t sub_100050278(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t result;

  if (a5)
  {
    sub_100008F20(a2, a3, a4 & 1);
    swift_release();
    swift_bridgeObjectRelease(a5);
    swift_release();

    swift_release();
    return sub_10001D9D8(a13, a14 & 1);
  }
  return result;
}

uint64_t sub_100050308()
{
  uint64_t v0;

  swift_release();
  sub_10001D9CC(*(_QWORD *)(v0 + 32), *(unsigned __int8 *)(v0 + 40), *(_BYTE *)(v0 + 41));
  sub_10001D9D8(*(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 56));
  return swift_deallocObject(v0, 57, 7);
}

uint64_t sub_100050348()
{
  uint64_t v0;

  return sub_10003A448((_QWORD *)(v0 + 16), &OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_showTypographySettings);
}

void sub_10005036C(_BYTE *a1@<X8>)
{
  uint64_t v1;

  sub_10003A1AC((_QWORD *)(v1 + 32), *(void **)(v1 + 80), a1);
}

uint64_t sub_100050380()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release();
  sub_10001D9CC(*(_QWORD *)(v0 + 48), *(unsigned __int8 *)(v0 + 56), *(_BYTE *)(v0 + 57));
  sub_10001D9D8(*(_QWORD *)(v0 + 64), *(_BYTE *)(v0 + 72));

  return swift_deallocObject(v0, 88, 7);
}

void sub_1000503D0(uint64_t a1)
{
  uint64_t v1;

  sub_10003A278(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (_QWORD *)(v1 + 32), *(void **)(v1 + 80));
}

uint64_t sub_1000503E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10003B69C(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1000503E8()
{
  uint64_t v0;

  return sub_10003C01C(*(_BYTE **)(v0 + 16));
}

unint64_t sub_1000503F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100099C98;
  if (!qword_100099C98)
  {
    v1 = sub_100004660(&qword_100099C88);
    sub_100050474();
    sub_100007D90(&qword_100099C00, type metadata accessor for TFSymbol, (uint64_t)&unk_100075D10);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100099C98);
  }
  return result;
}

unint64_t sub_100050474()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100099CA0;
  if (!qword_100099CA0)
  {
    v1 = sub_100004660(&qword_100099CA8);
    sub_1000504E0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100099CA0);
  }
  return result;
}

unint64_t sub_1000504E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100099CB0;
  if (!qword_100099CB0)
  {
    v1 = sub_100004660(&qword_100099CB8);
    sub_100050564();
    sub_10000966C(&qword_100098D28, &qword_10009A9F0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100099CB0);
  }
  return result;
}

unint64_t sub_100050564()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100099CC0;
  if (!qword_100099CC0)
  {
    v1 = sub_100004660(&qword_100099CC8);
    sub_1000505E8();
    sub_10000966C(&qword_100098D18, &qword_100098D20, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100099CC0);
  }
  return result;
}

unint64_t sub_1000505E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100099CD0;
  if (!qword_100099CD0)
  {
    v1 = sub_100004660(&qword_100099CD8);
    sub_10004FAAC();
    sub_10000966C(&qword_100099CE0, &qword_10009ADC0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100099CD0);
  }
  return result;
}

uint64_t sub_10005066C(uint64_t a1)
{
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_BYTE *)(a1 + 32);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  sub_10001D9D8(v2, v3);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

uint64_t sub_1000506EC(uint64_t a1)
{
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_BYTE *)(a1 + 32);
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
  sub_10001D97C(v2, v3);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_10005077C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.allowsTightening.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1000507A8(unsigned __int8 *a1)
{
  return EnvironmentValues.allowsTightening.setter(*a1);
}

uint64_t sub_1000507CC()
{
  return sub_100051D10((void (*)(_QWORD, _QWORD))sub_10001D9D8, (void (*)(_QWORD, _QWORD))sub_1000527B0, 97);
}

uint64_t sub_1000507E4()
{
  uint64_t v0;

  return sub_10003D1DC(v0 + 16, &enum case for UITextFormattingViewController.ChangeValue.decreaseFontSize(_:));
}

uint64_t sub_100050804@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Image.init(systemName:)(0x73756E696DLL, 0xE500000000000000);
  *a1 = result;
  return result;
}

uint64_t sub_100050838()
{
  return sub_100051D10((void (*)(_QWORD, _QWORD))sub_10001D9D8, (void (*)(_QWORD, _QWORD))sub_1000527B0, 97);
}

uint64_t sub_100050850()
{
  uint64_t v0;

  return sub_10003D1DC(v0 + 16, &enum case for UITextFormattingViewController.ChangeValue.increaseFontSize(_:));
}

uint64_t sub_100050870@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Image.init(systemName:)(1937075312, 0xE400000000000000);
  *a1 = result;
  return result;
}

uint64_t sub_1000508A0()
{
  uint64_t v0;

  return sub_10003D2EC(*(_QWORD *)(v0 + 16));
}

double sub_1000508A8@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_10003D45C(*(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24), *(_BYTE *)(v1 + 25), a1).n128_u64[0];
  return result;
}

unint64_t sub_1000508B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100099D40;
  if (!qword_100099D40)
  {
    v1 = sub_100004660(&qword_100099D30);
    sub_100050474();
    sub_10000966C(&qword_100099D48, &qword_10009AA10, (uint64_t)&protocol conformance descriptor for _ContentShapeModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100099D40);
  }
  return result;
}

uint64_t sub_10005093C()
{
  return sub_100051D10((void (*)(_QWORD, _QWORD))sub_10001D9D8, (void (*)(_QWORD, _QWORD))sub_1000527B0, 97);
}

uint64_t sub_100050954(double *a1)
{
  uint64_t v1;

  return sub_10003D5E0(a1, v1 + 16);
}

uint64_t sub_10005095C()
{
  return sub_100051F80((void (*)(_QWORD, _QWORD))sub_10001D9D8, (void (*)(_QWORD, _QWORD))sub_1000527B0);
}

uint64_t sub_100050970@<X0>(BOOL *a1@<X8>)
{
  uint64_t v1;

  return sub_10003D8D0(v1 + 32, a1, *(double *)(v1 + 120));
}

uint64_t sub_100050980()
{
  return sub_100051F80((void (*)(_QWORD, _QWORD))sub_10001D9D8, (void (*)(_QWORD, _QWORD))sub_1000527B0);
}

uint64_t sub_100050994(_BYTE *a1)
{
  uint64_t v1;

  return sub_10003DA3C(a1, *(double *)(v1 + 120), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + 32);
}

uint64_t sub_1000509A4()
{
  return sub_100051D10((void (*)(_QWORD, _QWORD))sub_10001D9D8, (void (*)(_QWORD, _QWORD))sub_1000527B0, 97);
}

uint64_t sub_1000509BC()
{
  return sub_100051D10((void (*)(_QWORD, _QWORD))sub_10001D9D8, (void (*)(_QWORD, _QWORD))sub_1000527B0, 97);
}

unint64_t sub_1000509D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100099DE8;
  if (!qword_100099DE8)
  {
    v1 = sub_100004660(&qword_100099DD0);
    sub_10000966C(&qword_100099DF0, &qword_100099DC8, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
    sub_100007D90(&qword_1000987F0, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100099DE8);
  }
  return result;
}

uint64_t sub_100050A70@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10003E504(*(_BYTE **)(v1 + 16), a1);
}

uint64_t sub_100050A78@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10003F95C(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_100050A80(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10003FB9C(a1, a2, a3, a4, (void **)&UITextFormattingViewControllerTextAlignmentJustified);
}

uint64_t sub_100050AA0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_10003FC68(v1 + 32, *(_QWORD *)(v1 + 72), a1);
}

uint64_t sub_100050AB4(char *a1)
{
  uint64_t *v1;

  return sub_10003FD10(a1, v1[2], v1[3], (uint64_t)(v1 + 4), v1[9]);
}

uint64_t sub_100050AC4(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10003FB9C(a1, a2, a3, a4, (void **)&UITextFormattingViewControllerTextAlignmentRight);
}

uint64_t sub_100050AE8(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10003FB9C(a1, a2, a3, a4, (void **)&UITextFormattingViewControllerTextAlignmentCenter);
}

uint64_t sub_100050B0C(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10003FB9C(a1, a2, a3, a4, (void **)&UITextFormattingViewControllerTextAlignmentLeft);
}

uint64_t sub_100050B30()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release();
  sub_10001D9CC(*(_QWORD *)(v0 + 56), *(unsigned __int8 *)(v0 + 64), *(_BYTE *)(v0 + 65));
  swift_release();
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_100050B74@<X0>(uint64_t a1@<X8>)
{
  return sub_100051758((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10003FDE4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000400B8, a1);
}

uint64_t sub_100050B88()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100050BAC(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_100050BB4()
{
  return sub_1000517EC(58);
}

uint64_t sub_100050BBC(uint64_t a1)
{
  return sub_100050BD4(a1, 1);
}

uint64_t sub_100050BC4()
{
  return sub_1000517EC(58);
}

uint64_t sub_100050BCC(uint64_t a1)
{
  return sub_100050BD4(a1, 0);
}

uint64_t sub_100050BD4(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_10004050C(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(unsigned __int8 *)(v2 + 56) | (*(unsigned __int8 *)(v2 + 57) << 8), a2);
}

uint64_t sub_100050C0C()
{
  return sub_100050DA4(sub_10004098C);
}

uint64_t sub_100050C1C@<X0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100040C88(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(unsigned __int8 *)(v2 + 40) | (*(unsigned __int8 *)(v2 + 41) << 8), a2);
}

uint64_t sub_100050C3C()
{
  return sub_1000517EC(72);
}

uint64_t sub_100050C44@<X0>(BOOL *a1@<X8>)
{
  uint64_t v1;

  return sub_100040FBC(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), a1, *(double *)(v1 + 64));
}

uint64_t sub_100050C6C()
{
  return sub_1000517EC(72);
}

_BYTE *sub_100050C74(_BYTE *a1)
{
  uint64_t v1;

  return sub_100041070(a1, *(double *)(v1 + 64), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_100050CA0(uint64_t a1)
{
  return sub_100050E0C(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_10004192C);
}

unint64_t sub_100050CAC()
{
  unint64_t result;

  result = qword_100099E90;
  if (!qword_100099E90)
  {
    result = swift_getWitnessTable(&unk_100074B70, &type metadata for TFListStyle);
    atomic_store(result, (unint64_t *)&qword_100099E90);
  }
  return result;
}

unint64_t sub_100050CF0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100099EA0;
  if (!qword_100099EA0)
  {
    v1 = sub_100004660(&qword_100099E98);
    sub_10000966C(&qword_100099EA8, &qword_100099EB0, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
    sub_100007D90(&qword_1000987F0, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100099EA0);
  }
  return result;
}

uint64_t sub_100050D8C()
{
  return sub_100050DA4((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_100041EDC);
}

uint64_t sub_100050D98()
{
  return sub_100050DA4((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_1000427CC);
}

uint64_t sub_100050DA4(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v1;

  return a1(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(unsigned __int8 *)(v1 + 40) | (*(unsigned __int8 *)(v1 + 41) << 8));
}

uint64_t sub_100050DCC()
{
  uint64_t v0;

  swift_release();
  sub_10001D9CC(*(_QWORD *)(v0 + 32), *(unsigned __int8 *)(v0 + 40), *(_BYTE *)(v0 + 41));
  return swift_deallocObject(v0, 42, 7);
}

uint64_t sub_100050E00(uint64_t a1)
{
  return sub_100050E0C(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000425C8);
}

uint64_t sub_100050E0C(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(unsigned __int8 *)(v2 + 40) | (*(unsigned __int8 *)(v2 + 41) << 8));
}

void sub_100050E30(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_100050E3C()
{
  return sub_1000517EC(58);
}

uint64_t sub_100050E44(uint64_t a1)
{
  return sub_100050E50(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100042750);
}

uint64_t sub_100050E50(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(unsigned __int8 *)(v2 + 56) | (*(unsigned __int8 *)(v2 + 57) << 8));
}

uint64_t sub_100050E78()
{
  return sub_1000517EC(59);
}

uint64_t sub_100050E84()
{
  return sub_1000517EC(59);
}

uint64_t sub_100050E90()
{
  return sub_1000517EC(59);
}

uint64_t sub_100050E98@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_1000429F4(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(unsigned __int8 *)(v1 + 58), a1);
}

uint64_t sub_100050EC0()
{
  return sub_1000517EC(59);
}

uint64_t sub_100050EC8(_BYTE *a1)
{
  uint64_t v1;

  return sub_100042AA0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(unsigned __int8 *)(v1 + 56) | (*(unsigned __int8 *)(v1 + 57) << 8), *(_BYTE *)(v1 + 58));
}

uint64_t sub_100050F00()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100050F24(double *a1)
{
  uint64_t v1;

  return sub_100067650(a1, *(uint64_t (**)(double, double, double, double))(v1 + 16));
}

unint64_t sub_100050F2C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_100099F50;
  if (!qword_100099F50)
  {
    v1 = sub_100004660(&qword_100099F38);
    v2[0] = sub_100004660(&qword_100099F28);
    v2[1] = type metadata accessor for BorderlessButtonStyle(255);
    v2[2] = sub_10000966C(&qword_100099F58, &qword_100099F28, (uint64_t)&protocol conformance descriptor for Button<A>);
    v2[3] = sub_100007D90(&qword_100099F60, (uint64_t (*)(uint64_t))&type metadata accessor for BorderlessButtonStyle, (uint64_t)&protocol conformance descriptor for BorderlessButtonStyle);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    sub_100007D90(&qword_1000987F0, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100099F50);
  }
  return result;
}

unint64_t sub_100051034()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100099F68;
  if (!qword_100099F68)
  {
    v1 = sub_100004660(&qword_100099F18);
    sub_10004F080(&qword_100099F70, &qword_100099F00, (void (*)(void))sub_1000510D8, (void (*)(void))sub_100051174);
    sub_10000966C(&qword_100099F80, &qword_10009A870, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100099F68);
  }
  return result;
}

unint64_t sub_1000510D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100099F78;
  if (!qword_100099F78)
  {
    v1 = sub_100004660(&qword_100099F10);
    sub_10000966C(&qword_100099F48, &qword_100099F08, (uint64_t)&unk_100075F60);
    sub_100007D90(&qword_1000987F0, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100099F78);
  }
  return result;
}

unint64_t sub_100051174()
{
  unint64_t result;

  result = qword_10009A890;
  if (!qword_10009A890)
  {
    result = swift_getWitnessTable(&unk_10007692C, &type metadata for TFFrameTracker);
    atomic_store(result, (unint64_t *)&qword_10009A890);
  }
  return result;
}

uint64_t sub_1000511BC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TFTextColorControl(0) - 8) + 80);
  return sub_1000447F8((_QWORD *)(v0 + ((v1 + 16) & ~v1)));
}

uint64_t sub_1000511EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100043A48(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_1000511F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100099F90;
  if (!qword_100099F90)
  {
    v1 = sub_100004660(&qword_100099F88);
    sub_100051260();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100099F90);
  }
  return result;
}

unint64_t sub_100051260()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100099F98;
  if (!qword_100099F98)
  {
    v1 = sub_100004660(&qword_100099FA0);
    v2[0] = sub_100004660(&qword_100099FA8);
    v2[1] = sub_10005130C();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.labelsHidden()>>, 1);
    sub_10000966C(&qword_100098F30, &qword_100098F38, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyTransformModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100099F98);
  }
  return result;
}

unint64_t sub_10005130C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100099FB0;
  if (!qword_100099FB0)
  {
    v1 = sub_100004660(&qword_100099FA8);
    sub_100051378();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100099FB0);
  }
  return result;
}

unint64_t sub_100051378()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100099FB8;
  if (!qword_100099FB8)
  {
    v1 = sub_100004660(&qword_100099FC0);
    sub_1000513E4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100099FB8);
  }
  return result;
}

unint64_t sub_1000513E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100099FC8;
  if (!qword_100099FC8)
  {
    v1 = sub_100004660(&qword_100099FD0);
    sub_100051468();
    sub_10000966C(&qword_100099F80, &qword_10009A870, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100099FC8);
  }
  return result;
}

unint64_t sub_100051468()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100099FD8;
  if (!qword_100099FD8)
  {
    v1 = sub_100004660(&qword_100099FE0);
    sub_1000514EC(&qword_100099FE8, &qword_100099FF0);
    sub_100051174();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100099FD8);
  }
  return result;
}

uint64_t sub_1000514EC(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100004660(a2);
    sub_10000966C(&qword_100099FF8, &qword_10009A000, (uint64_t)&protocol conformance descriptor for ColorPicker<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100051568@<X0>(uint64_t *a1@<X8>)
{
  id v2;
  uint64_t result;

  v2 = sub_100025810();
  result = Color.init(uiColor:)(v2);
  *a1 = result;
  return result;
}

uint64_t sub_100051594()
{
  swift_retain();
  sub_1000307C0();
  return swift_release();
}

uint64_t sub_1000515C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = type metadata accessor for TFTextColorControl(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  swift_release();
  sub_10001D9CC(*(_QWORD *)(v6 + 16), *(unsigned __int8 *)(v6 + 24), *(_BYTE *)(v6 + 25));
  sub_10001D9D8(*(_QWORD *)(v6 + 32), *(_BYTE *)(v6 + 40));
  sub_10001D9D8(*(_QWORD *)(v6 + 48), *(_BYTE *)(v6 + 56));
  v7 = v0 + v4 + *(int *)(v1 + 32);
  v8 = sub_10000498C(&qword_100098F10);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for UserInterfaceSizeClass(0);
    v10 = *(_QWORD *)(v9 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v7, 1, v9))
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v7, v9);
  }
  else
  {
    swift_release();
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

_QWORD *sub_1000516C4(double a1, double a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v9;

  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TFTextColorControl(0) - 8) + 80);
  return sub_100044880((_QWORD *)(v4 + ((v9 + 16) & ~v9)), a1, a2, a3, a4);
}

uint64_t sub_100051724()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100051734()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100051744@<X0>(uint64_t a1@<X8>)
{
  return sub_100051758((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000451FC, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000454E0, a1);
}

uint64_t sub_100051758@<X0>(void (*a1)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X0>, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_100045050(*(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), *(unsigned __int8 *)(v3 + 40) | (unsigned __int16)(*(unsigned __int8 *)(v3 + 41) << 8), a1, a2, a3);
}

uint64_t sub_100051790()
{
  return sub_1000517EC(58);
}

uint64_t sub_100051798(uint64_t a1)
{
  return sub_100050E50(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000457D0);
}

uint64_t sub_1000517A4()
{
  return sub_1000517EC(58);
}

uint64_t sub_1000517AC(uint64_t a1)
{
  return sub_100050E50(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000458EC);
}

uint64_t sub_1000517B8()
{
  return sub_1000517EC(58);
}

uint64_t sub_1000517C0@<X0>(BOOL *a1@<X8>)
{
  uint64_t v1;

  return sub_100045F6C(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), a1);
}

uint64_t sub_1000517E4()
{
  return sub_1000517EC(58);
}

uint64_t sub_1000517EC(uint64_t a1)
{
  uint64_t v1;

  swift_unknownObjectRelease(*(_QWORD *)(v1 + 16));
  swift_release();
  sub_10001D9CC(*(_QWORD *)(v1 + 48), *(unsigned __int8 *)(v1 + 56), *(_BYTE *)(v1 + 57));
  return swift_deallocObject(v1, a1, 7);
}

uint64_t sub_100051834(uint64_t a1)
{
  return sub_100050E50(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000460D8);
}

unint64_t sub_100051840()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10009A0A8;
  if (!qword_10009A0A8)
  {
    v1 = sub_100004660(&qword_10009A060);
    sub_1000518C4();
    sub_100007D90(&qword_1000987F0, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10009A0A8);
  }
  return result;
}

unint64_t sub_1000518C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10009A0B0;
  if (!qword_10009A0B0)
  {
    v1 = sub_100004660(&qword_10009A0B8);
    sub_10004FC54();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10009A0B0);
  }
  return result;
}

uint64_t sub_100051930@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100047030(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_100051938@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100047B78(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_100051940(unint64_t *a1, uint64_t *a2, void (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100004660(a2);
    a3();
    result = swift_getWitnessTable(a4, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000519A4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_10009A0E0;
  if (!qword_10009A0E0)
  {
    v1 = sub_100004660(&qword_10009A0E8);
    v2[0] = sub_100004660(&qword_10009A0F0);
    v2[1] = type metadata accessor for ButtonToggleStyle(255);
    v2[2] = sub_10000966C(&qword_10009A0F8, &qword_10009A0F0, (uint64_t)&protocol conformance descriptor for Toggle<A>);
    v2[3] = sub_100007D90(&qword_10009A100, (uint64_t (*)(uint64_t))&type metadata accessor for ButtonToggleStyle, (uint64_t)&protocol conformance descriptor for ButtonToggleStyle);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.toggleStyle<A>(_:)>>, 1);
    sub_100007D90(&qword_1000987F0, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10009A0E0);
  }
  return result;
}

unint64_t sub_100051AAC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10009A110;
  if (!qword_10009A110)
  {
    v1 = sub_100004660(&qword_10009A080);
    sub_10000966C(&qword_10009A108, &qword_10009A078, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
    sub_100007D90(&qword_1000987F0, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10009A110);
  }
  return result;
}

uint64_t sub_100051B48()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100051B60()
{
  return EnvironmentValues.imageScale.getter();
}

uint64_t sub_100051B80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10004B890(a1, a2, a3, a4, (void (*)(_QWORD))&type metadata accessor for Image.Scale, (uint64_t (*)(char *))&EnvironmentValues.imageScale.setter);
}

double sub_100051BA4(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t sub_100051BC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  char v6;
  uint64_t result;

  if (a2)
  {
    v6 = a5 & 1;
    swift_bridgeObjectRetain(a2);
    return sub_10001D97C(a4, v6);
  }
  return result;
}

_QWORD *sub_100051C00(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19],
    a1[20],
    a1[21],
    a1[22],
    a1[23],
    a1[24],
    a1[25]);
  return a1;
}

uint64_t sub_100051C6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    return sub_10001D9D8(a4, a5 & 1);
  }
  return result;
}

uint64_t sub_100051CA4(uint64_t a1)
{
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_BYTE *)(a1 + 32);
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
  sub_10001D97C(v2, v3);
  return a1;
}

const char *sub_100051CE8()
{
  return "styleKey";
}

uint64_t sub_100051CF8()
{
  return sub_100051D10((void (*)(_QWORD, _QWORD))sub_1000527B0, (void (*)(_QWORD, _QWORD))sub_1000527B0, 112);
}

uint64_t sub_100051D10(void (*a1)(_QWORD, _QWORD), void (*a2)(_QWORD, _QWORD), uint64_t a3)
{
  uint64_t v3;

  swift_release();
  sub_10001D9CC(*(_QWORD *)(v3 + 40), *(unsigned __int8 *)(v3 + 48), *(_BYTE *)(v3 + 49));
  sub_10001D9D8(*(_QWORD *)(v3 + 56), *(_BYTE *)(v3 + 64));
  a1(*(_QWORD *)(v3 + 72), *(unsigned __int8 *)(v3 + 80));
  a2(*(_QWORD *)(v3 + 88), *(unsigned __int8 *)(v3 + 96));
  return swift_deallocObject(v3, a3, 7);
}

uint64_t sub_100051D84@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1000472D4(a1, (_OWORD *)(v2 + 16), a2);
}

uint64_t sub_100051D8C(uint64_t a1, void (*a2)(uint64_t, uint64_t), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_BYTE *)(a1 + 33);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_BYTE *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 56);
  v9 = *(unsigned __int8 *)(a1 + 64);
  v10 = *(_QWORD *)(a1 + 72);
  v11 = *(unsigned __int8 *)(a1 + 80);
  v12 = *(unsigned __int8 *)(a1 + 32);
  swift_retain();
  sub_10001D970(v4, v12, v5);
  sub_10001D97C(v6, v7);
  a2(v8, v9);
  a3(v10, v11);
  return a1;
}

void sub_100051E44(_BYTE *a1@<X8>)
{
  uint64_t v1;

  sub_1000476C0(v1 + 32, *(void **)(v1 + 128), a1);
}

uint64_t sub_100051E58()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release();
  sub_10001D9CC(*(_QWORD *)(v0 + 56), *(unsigned __int8 *)(v0 + 64), *(_BYTE *)(v0 + 65));
  sub_10001D9D8(*(_QWORD *)(v0 + 72), *(_BYTE *)(v0 + 80));
  sub_10001D9D8(*(_QWORD *)(v0 + 88), *(_BYTE *)(v0 + 96));
  sub_10001D9D8(*(_QWORD *)(v0 + 104), *(_BYTE *)(v0 + 112));

  return swift_deallocObject(v0, 136, 7);
}

uint64_t sub_100051EC0(_BYTE *a1)
{
  uint64_t v1;

  return sub_10004778C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + 32, *(void **)(v1 + 128));
}

uint64_t sub_100051ED0()
{
  uint64_t v0;

  return sub_1000478F4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100051ED8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100047994(*(void **)(v1 + 16), a1);
}

uint64_t sub_100051EE0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_100047A14(*(_QWORD *)(v1 + 16), *(void **)(v1 + 24), a1);
}

uint64_t sub_100051EE8(unint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_100004660(a2);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100051F4C()
{
  return sub_100051F80((void (*)(_QWORD, _QWORD))sub_1000527B0, (void (*)(_QWORD, _QWORD))sub_1000527B0);
}

uint64_t sub_100051F60@<X0>(BOOL *a1@<X8>)
{
  uint64_t v1;

  return sub_100048710(v1 + 32, a1);
}

uint64_t sub_100051F6C()
{
  return sub_100051F80((void (*)(_QWORD, _QWORD))sub_1000527B0, (void (*)(_QWORD, _QWORD))sub_1000527B0);
}

uint64_t sub_100051F80(void (*a1)(_QWORD, _QWORD), void (*a2)(_QWORD, _QWORD))
{
  uint64_t v2;

  swift_unknownObjectRelease(*(_QWORD *)(v2 + 16));
  swift_release();
  sub_10001D9CC(*(_QWORD *)(v2 + 56), *(unsigned __int8 *)(v2 + 64), *(_BYTE *)(v2 + 65));
  sub_10001D9D8(*(_QWORD *)(v2 + 72), *(_BYTE *)(v2 + 80));
  a1(*(_QWORD *)(v2 + 88), *(unsigned __int8 *)(v2 + 96));
  a2(*(_QWORD *)(v2 + 104), *(unsigned __int8 *)(v2 + 112));
  return swift_deallocObject(v2, 128, 7);
}

void sub_100051FF8(unsigned __int8 *a1)
{
  uint64_t *v1;

  sub_100048824(a1, v1[2], v1[3], v1 + 4);
}

uint64_t sub_100052004()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t destroy for TFFormattingStylesControl.FormatButtonStyle(uint64_t a1)
{
  return sub_10001D9D8(*(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s19FontPickerUIService25TFFormattingStylesControlV17FormatButtonStyleVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;

  *(_WORD *)a1 = *(_WORD *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 16);
  sub_10001D97C(v3, v4);
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4;
  return a1;
}

uint64_t assignWithCopy for TFFormattingStylesControl.FormatButtonStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 16);
  sub_10001D97C(v3, v4);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4;
  sub_10001D9D8(v5, v6);
  return a1;
}

__n128 initializeWithTake for TFFormattingStylesControl.FormatButtonStyle(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for TFFormattingStylesControl.FormatButtonStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4;
  sub_10001D9D8(v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for TFFormattingStylesControl.FormatButtonStyle(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[17])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TFFormattingStylesControl.FormatButtonStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for TFFormattingStylesControl.FormatButtonStyle()
{
  return &type metadata for TFFormattingStylesControl.FormatButtonStyle;
}

unint64_t sub_1000521E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10009A190;
  if (!qword_10009A190)
  {
    v1 = sub_100004660(&qword_1000997B0);
    sub_100052264();
    sub_10000966C(&qword_100098D28, &qword_10009A9F0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10009A190);
  }
  return result;
}

unint64_t sub_100052264()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10009A198;
  if (!qword_10009A198)
  {
    v1 = sub_100004660(&qword_100099798);
    sub_10000966C(&qword_1000997A8, &qword_100099790, (uint64_t)&unk_100075FB0);
    sub_100007D90(&qword_1000987F0, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10009A198);
  }
  return result;
}

uint64_t sub_100052300()
{
  return sub_10001DE88(&qword_10009A1A0, &qword_10009A1A8, (void (*)(void))sub_10004F300, (void (*)(void))sub_10004F3F0);
}

unint64_t sub_100052338()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10009A1B0;
  if (!qword_10009A1B0)
  {
    v1 = sub_100004660(&qword_10009A1B8);
    sub_10000966C(&qword_100099A98, &qword_100099A90, (uint64_t)&protocol conformance descriptor for HStack<A>);
    sub_10000966C(&qword_100099AA0, &qword_100099A70, (uint64_t)&unk_100075FB0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10009A1B0);
  }
  return result;
}

unint64_t sub_1000523D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10009A1C0;
  if (!qword_10009A1C0)
  {
    v1 = sub_100004660(&qword_10009A1C8);
    sub_10000966C(&qword_100099B80, &qword_100099B78, (uint64_t)&unk_100075FB0);
    sub_100007D90(&qword_1000987F0, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10009A1C0);
  }
  return result;
}

unint64_t sub_100052478()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10009A1D0;
  if (!qword_10009A1D0)
  {
    v1 = sub_100004660(&qword_10009A1D8);
    sub_10000966C(&qword_100099C78, &qword_100099C70, (uint64_t)&unk_100075FB0);
    sub_10000966C(&qword_100099C80, &qword_100099C58, (uint64_t)&unk_100075FB0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10009A1D0);
  }
  return result;
}

uint64_t sub_10005251C()
{
  return sub_10000966C(&qword_10009A1E0, &qword_100099DA8, (uint64_t)&unk_100075FB0);
}

uint64_t sub_100052548()
{
  return sub_10000966C(&qword_10009A1E8, &qword_100099E00, (uint64_t)&unk_100075FB0);
}

unint64_t sub_100052578()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10009A1F0;
  if (!qword_10009A1F0)
  {
    v1 = sub_100004660(&qword_10009A1F8);
    sub_10000966C(&qword_100099E60, &qword_100099E50, (uint64_t)&unk_100075FB0);
    sub_100007D90(&qword_1000987F0, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10009A1F0);
  }
  return result;
}

uint64_t sub_100052614()
{
  return sub_10000966C(&qword_10009A200, &qword_100099E68, (uint64_t)&unk_100075FB0);
}

uint64_t sub_100052640()
{
  return sub_10000966C(&qword_10009A208, &qword_100099EF8, (uint64_t)&unk_100075FB0);
}

unint64_t sub_100052670()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10009A210;
  if (!qword_10009A210)
  {
    v1 = sub_100004660(&qword_10009A048);
    sub_10000966C(&qword_10009A050, &qword_10009A040, (uint64_t)&unk_100075FB0);
    sub_100007D90(&qword_1000987F0, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10009A210);
  }
  return result;
}

uint64_t sub_10005270C()
{
  return sub_10000966C(&qword_10009A218, &qword_10009A058, (uint64_t)&unk_100075FB0);
}

uint64_t sub_100052738(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007928C, 1);
}

uint64_t sub_100052750()
{
  return sub_10000966C((unint64_t *)&unk_10009A280, &qword_10009A230, (uint64_t)&unk_100075FB0);
}

uint64_t sub_1000527C0(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t TupleTypeMetadata;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;

  v5 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 == 1)
  {
    TupleTypeMetadata = *v5;
    __chkstk_darwin();
    v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
LABEL_12:
    v22 = 32;
    v23 = a2;
    do
    {
      if (a2 == 1)
        v24 = 0;
      else
        v24 = *(_DWORD *)(TupleTypeMetadata + v22);
      v26 = *v5++;
      v25 = v26;
      v27 = *a1++;
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(&v8[v24], v27);
      v22 += 16;
      --v23;
    }
    while (v23);
    return TupleView.init(_:)(v8, TupleTypeMetadata);
  }
  __chkstk_darwin();
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v11 = 0;
    if (a2 < 4)
      goto LABEL_9;
    if ((unint64_t)(v10 - (char *)v5) < 0x20)
      goto LABEL_9;
    v11 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (__int128 *)(v5 + 2);
    v13 = v10 + 16;
    v14 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v11 != a2)
    {
LABEL_9:
      v16 = a2 - v11;
      v17 = v11;
      v18 = &v10[8 * v11];
      v19 = &v5[v17];
      do
      {
        v20 = *v19++;
        *(_QWORD *)v18 = v20;
        v18 += 8;
        --v16;
      }
      while (v16);
    }
  }
  TupleTypeMetadata = swift_getTupleTypeMetadata(0, a2);
  __chkstk_darwin();
  v8 = (char *)&v29 - v21;
  if (a2)
    goto LABEL_12;
  return TupleView.init(_:)(v8, TupleTypeMetadata);
}

uint64_t sub_100052974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v10 = type metadata accessor for _ConditionalContent.Storage(0);
  __chkstk_darwin();
  v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))((char *)&v14 - v11, a1, a2);
  swift_storeEnumTagMultiPayload(v12, v10, 0);
  return _ConditionalContent<>.init(storage:)(v12, a2, a3, a4, a5);
}

uint64_t sub_100052A38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v10 = type metadata accessor for _ConditionalContent.Storage(0);
  __chkstk_darwin();
  v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))((char *)&v14 - v11, a1, a3);
  swift_storeEnumTagMultiPayload(v12, v10, 1);
  return _ConditionalContent<>.init(storage:)(v12, a2, a3, a4, a5);
}

id sub_100052AFC()
{
  uint64_t v0;
  uint64_t ObjCClassFromMetadata;
  id result;

  v0 = type metadata accessor for _TFUIBundleDetector();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v0);
  result = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  qword_10009A290 = (uint64_t)result;
  return result;
}

uint64_t sub_100052B50()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for _TFUIBundleDetector()
{
  return objc_opt_self(_TtC19FontPickerUIServiceP33_364789B77C608B517795CE5B8DEADC4419_TFUIBundleDetector);
}

uint64_t sub_100052B80@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t OpaqueTypeConformance2;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 v65;
  void (*v66)(_QWORD, _QWORD, _QWORD);
  id v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  double *v71;
  uint64_t v72;
  double *v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  char v81;
  double v82;
  uint64_t v83;
  double *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  unint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  double v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  BOOL v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(char *, char *, uint64_t);
  char *v115;
  void (*v116)(char *, uint64_t);
  uint64_t v118;
  char *v119;
  uint64_t v120;
  double *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char v170[8];
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  void *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  void *v187;
  uint64_t WitnessTable;
  void *v189;
  uint64_t v190;
  unint64_t v191;

  v165 = a2;
  v3 = sub_10000498C(&qword_1000997A0);
  __chkstk_darwin(v3);
  v162 = (uint64_t)&v118 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v169 = type metadata accessor for HoverEffect(0);
  v164 = *(_QWORD *)(v169 - 8);
  v5 = __chkstk_darwin(v169);
  v163 = (char *)&v118 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v161 = *(_QWORD *)(a1 - 8);
  __chkstk_darwin(v5);
  v159 = v7;
  v160 = (char *)&v118 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v122);
  v121 = (double *)((char *)&v118 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v120 = type metadata accessor for Capsule(0);
  __chkstk_darwin(v120);
  v119 = (char *)&v118 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10000498C(&qword_10009A7F0);
  __chkstk_darwin(v10);
  v138 = (uint64_t *)((char *)&v118 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = a1;
  v126 = (int *)a1;
  v168 = *(_QWORD *)(a1 + 16);
  v13 = type metadata accessor for ModifiedContent(255, v168, &type metadata for ComponentItem);
  v14 = type metadata accessor for ModifiedContent(255, v13, &type metadata for _FrameLayout);
  v15 = *(_QWORD *)(v12 + 24);
  v167 = v15;
  v16 = sub_1000619F0();
  v190 = v15;
  v191 = v16;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v13);
  v189 = &protocol witness table for _FrameLayout;
  v130 = v14;
  v129 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v14);
  v17 = type metadata accessor for HStack(0, v14, v129);
  v132 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v127 = (char *)&v118 - v18;
  v19 = type metadata accessor for ModifiedContent(0, v17, &type metadata for _FlexFrameLayout);
  v133 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v131 = (char *)&v118 - v20;
  v128 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v17);
  v186 = v128;
  v187 = &protocol witness table for _FlexFrameLayout;
  v21 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v19);
  v22 = sub_10000966C(&qword_10009A800, &qword_10009A7F0, (uint64_t)&protocol conformance descriptor for ClosedRange<A>);
  v182 = v19;
  v183 = v10;
  v23 = v10;
  v125 = v10;
  v184 = v21;
  v185 = v22;
  v124 = v21;
  v123 = v22;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v182, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 0);
  v151 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2);
  v166 = (char *)&v118 - v25;
  v26 = sub_100004660(&qword_10009A808);
  v153 = OpaqueTypeMetadata2;
  v27 = type metadata accessor for ModifiedContent(0, OpaqueTypeMetadata2, v26);
  v148 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v146 = (char *)&v118 - v28;
  v29 = type metadata accessor for ModifiedContent(0, v27, &type metadata for _FixedSizeLayout);
  v147 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v145 = (char *)&v118 - v30;
  v31 = sub_100004660(&qword_10009A810);
  v32 = type metadata accessor for ModifiedContent(0, v29, v31);
  v154 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v152 = (char *)&v118 - v33;
  v34 = type metadata accessor for ModifiedContent(0, v32, &type metadata for _HoverRegionModifier);
  v157 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v156 = (char *)&v118 - v35;
  v182 = v19;
  v183 = v23;
  v184 = v21;
  v185 = v22;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v182, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
  v37 = sub_10000966C(&qword_10009A818, &qword_10009A808, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
  v134 = OpaqueTypeConformance2;
  v180 = OpaqueTypeConformance2;
  v181 = v37;
  v38 = v126;
  v150 = v27;
  v135 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v27);
  v178 = v135;
  v179 = &protocol witness table for _FixedSizeLayout;
  v149 = v29;
  v39 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v29);
  v40 = sub_10000966C(&qword_10009A820, &qword_10009A810, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
  v136 = v39;
  v176 = v39;
  v177 = v40;
  v155 = v32;
  v41 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v32);
  v42 = sub_100061A34();
  v139 = v41;
  v174 = v41;
  v175 = v42;
  v43 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v34);
  v44 = sub_100007D90(&qword_10009A830, (uint64_t (*)(uint64_t))&type metadata accessor for HoverEffect, (uint64_t)&protocol conformance descriptor for HoverEffect);
  v158 = v34;
  v182 = v34;
  v183 = v169;
  v144 = v43;
  v184 = v43;
  v185 = v44;
  v140 = v44;
  v45 = swift_getOpaqueTypeMetadata2(0, &v182, &opaque type descriptor for <<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>, 0);
  v143 = *(_QWORD *)(v45 - 8);
  v46 = __chkstk_darwin(v45);
  v141 = (char *)&v118 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = __chkstk_darwin(v46);
  v142 = (char *)&v118 - v49;
  v50 = v137;
  if (*(_BYTE *)(v137 + 9))
    v51 = 0x3FF0000000000000;
  else
    v51 = 0;
  v171 = v168;
  v172 = v167;
  v173 = v137;
  v52 = static VerticalAlignment.center.getter(v48);
  v53 = v127;
  HStack.init(alignment:spacing:content:)(v52, v51, 0, sub_100061A78, v170, v130, v129);
  v54 = v50;
  v55 = v50 + v38[12];
  v56 = *(_QWORD *)v55;
  v57 = *(_BYTE *)(v55 + 8);
  sub_10001D97C(*(_QWORD *)v55, v57);
  v58 = sub_100011D48(v56, v57);
  v59 = sub_10001D9D8(v56, v57);
  v60 = static Alignment.center.getter(v59);
  v61 = v131;
  View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(0, 1, 0, 1, *(_QWORD *)&v58, 0, 0, 1, 0, 1, 0, 1, v60, v62, v17, v128);
  (*(void (**)(char *, uint64_t))(v132 + 8))(v53, v17);
  v63 = v54 + v38[13];
  v64 = *(_QWORD *)v63;
  LOBYTE(v53) = *(_BYTE *)(v63 + 8);
  sub_10001D97C(*(_QWORD *)v63, (char)v53);
  v65 = sub_1000117FC(v64, (char)v53);
  sub_10001D9D8(v64, (char)v53);
  v66 = (void (*)(_QWORD, _QWORD, _QWORD))v138;
  sub_1000669A0(v65, (void (*)(_QWORD, _QWORD, _QWORD))v138);
  View.dynamicTypeSize<A>(_:)(v66, v19, v125, v124, v123);
  sub_1000092D0((uint64_t)v66, &qword_10009A7F0);
  (*(void (**)(char *, uint64_t))(v133 + 8))(v61, v19);
  v67 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v68 = objc_msgSend(v67, "userInterfaceIdiom");

  if (v68 == (id)6)
  {
    v69 = enum case for RoundedCornerStyle.continuous(_:);
    v70 = type metadata accessor for RoundedCornerStyle(0);
    v71 = (double *)v119;
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 104))(v119, v69, v70);
    v72 = sub_100007D90(&qword_10009A848, (uint64_t (*)(uint64_t))&type metadata accessor for Capsule, (uint64_t)&protocol conformance descriptor for Capsule);
    v73 = v71;
    v74 = v120;
  }
  else
  {
    v75 = *(_QWORD *)v63;
    v76 = *(_BYTE *)(v63 + 8);
    sub_10001D97C(*(_QWORD *)v63, v76);
    v77 = sub_1000117FC(v75, v76);
    sub_10001D9D8(v75, v76);
    v78 = v54 + v38[14];
    v79 = *(_QWORD *)v78;
    v80 = *(_BYTE *)(v78 + 8);
    sub_10001D97C(*(_QWORD *)v78, v80);
    v81 = sub_100011B90(v79, v80);
    sub_10001D9D8(v79, v80);
    if (v77 == 4 || (v82 = 10.0, v77 == 2))
    {
      if ((v81 & 1) != 0)
        v82 = 12.0;
      else
        v82 = 14.0;
    }
    v83 = v122;
    v84 = v121;
    v85 = (char *)v121 + *(int *)(v122 + 20);
    v86 = enum case for RoundedCornerStyle.continuous(_:);
    v87 = type metadata accessor for RoundedCornerStyle(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v87 - 8) + 104))(v85, v86, v87);
    *v84 = v82;
    v84[1] = v82;
    v72 = sub_100007D90(&qword_10009A838, (uint64_t (*)(uint64_t))&type metadata accessor for RoundedRectangle, (uint64_t)&protocol conformance descriptor for RoundedRectangle);
    v73 = v84;
    v74 = v83;
  }
  v88 = AnyShape.init<A>(_:)(v73, v74, v72);
  v89 = v164;
  v90 = v163;
  v182 = v88;
  v91 = sub_100061A84();
  v92 = v146;
  v93 = v153;
  v94 = v166;
  View.clipShape<A>(_:style:)(&v182, 256, v153, &type metadata for AnyShape, v134, v91);
  swift_release();
  (*(void (**)(char *, uint64_t))(v151 + 8))(v94, v93);
  v95 = v145;
  v96 = v150;
  View.fixedSize(horizontal:vertical:)(0, 1, v150, v135);
  (*(void (**)(char *, uint64_t))(v148 + 8))(v92, v96);
  v97 = sub_100053C64((uint64_t)v38);
  v98 = v152;
  v99 = v149;
  View.zIndex(_:)(v149, v136, v97);
  (*(void (**)(char *, uint64_t))(v147 + 8))(v95, v99);
  v100 = v161;
  v101 = v160;
  (*(void (**)(char *, uint64_t, int *))(v161 + 16))(v160, v54, v38);
  v102 = *(unsigned __int8 *)(v100 + 80);
  v103 = (v102 + 32) & ~v102;
  v104 = swift_allocObject(&unk_100090610, v103 + v159, v102 | 7);
  v105 = v167;
  *(_QWORD *)(v104 + 16) = v168;
  *(_QWORD *)(v104 + 24) = v105;
  (*(void (**)(uint64_t, char *, int *))(v100 + 32))(v104 + v103, v101, v38);
  v106 = v156;
  v107 = v155;
  View.onHover(perform:)(sub_100061BE4, v104, v155, v139);
  swift_release();
  (*(void (**)(char *, uint64_t))(v154 + 8))(v98, v107);
  v108 = v162;
  sub_10000928C(v54 + v38[10], v162, &qword_1000997A0);
  v109 = v169;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v89 + 48))(v108, 1, v169) == 1)
  {
    static HoverEffect.automatic.getter();
    sub_1000092D0(v108, &qword_1000997A0);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v89 + 32))(v90, v108, v109);
  }
  v110 = sub_100053DC0((uint64_t)v38);
  v111 = v141;
  v112 = v158;
  View.hoverEffect<A>(_:isEnabled:)(v90, v110, v158, v109, v144, v140);
  (*(void (**)(char *, uint64_t))(v89 + 8))(v90, v109);
  (*(void (**)(char *, uint64_t))(v157 + 8))(v106, v112);
  v113 = v143;
  v114 = *(void (**)(char *, char *, uint64_t))(v143 + 16);
  v115 = v142;
  v114(v142, v111, v45);
  v116 = *(void (**)(char *, uint64_t))(v113 + 8);
  v116(v111, v45);
  v114(v165, v115, v45);
  return ((uint64_t (*)(char *, uint64_t))v116)(v115, v45);
}

uint64_t sub_10005392C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char *v23;
  uint64_t v24;
  char v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t WitnessTable;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  void (*v37)(char *, uint64_t);
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  unint64_t v48;

  v44 = a5;
  v8 = type metadata accessor for TFComponent(0, a2, a3, a4);
  v39 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v39 - v9;
  v11 = type metadata accessor for ModifiedContent(0, a2, &type metadata for ComponentItem);
  v41 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v39 - v12;
  v14 = type metadata accessor for ModifiedContent(0, v11, &type metadata for _FrameLayout);
  v42 = *(_QWORD *)(v14 - 8);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v40 = (char *)&v39 - v18;
  v43 = a3;
  v19 = a3;
  v20 = v39;
  sub_100053BDC(a2, v19);
  v21 = *a1;
  v22 = *((unsigned __int8 *)a1 + 8);
  (*(void (**)(char *, uint64_t *, uint64_t))(v20 + 16))(v10, a1, v8);
  if (v22 == 1)
  {
    v23 = &v10[*(int *)(v8 + 52)];
    v24 = *(_QWORD *)v23;
    v25 = v23[8];
    sub_10001D97C(*(_QWORD *)v23, v25);
    v26 = sub_1000117FC(v24, v25);
    sub_10001D9D8(v24, v25);
    sub_1000668B0(v26);
    v21 = v27;
  }
  v28 = (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v10, v8);
  v29 = static Alignment.center.getter(v28);
  v31 = v30;
  v32 = sub_1000619F0();
  v47 = v43;
  v48 = v32;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v11);
  View.frame(width:height:alignment:)(0, 1, v21, 0, v29, v31, v11, WitnessTable);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v13, v11);
  v45 = WitnessTable;
  v46 = &protocol witness table for _FrameLayout;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v14);
  v34 = v42;
  v35 = *(void (**)(char *, char *, uint64_t))(v42 + 16);
  v36 = v40;
  v35(v40, v17, v14);
  v37 = *(void (**)(char *, uint64_t))(v34 + 8);
  v37(v17, v14);
  v35(v44, v36, v14);
  return ((uint64_t (*)(char *, uint64_t))v37)(v36, v14);
}

uint64_t sub_100053BDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v6;
  _QWORD v7[2];

  v6 = 0;
  State.init(wrappedValue:)(v7, &v6, &type metadata for Bool);
  v4 = v7[1];
  View.modifier<A>(_:)(v7, a1, &type metadata for ComponentItem, a2);
  return swift_release(v4);
}

double sub_100053C64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  BOOL v7;
  _BYTE *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];
  uint64_t v14;
  uint64_t v15;

  v3 = *(_QWORD *)(a1 - 8);
  v4 = __chkstk_darwin(a1);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_100053DC0(v4);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v3 + 16))(v6, v1, a1);
  if (v7)
  {
    v8 = &v6[*(int *)(a1 + 60)];
    v9 = *v8;
    v10 = *((_QWORD *)v8 + 1);
    v13[8] = v9;
    v14 = v10;
    v11 = sub_10000498C((uint64_t *)&unk_10009A850);
    State.wrappedValue.getter(&v15, v11);
    (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v6, a1);
    if ((v15 & 1) != 0)
      return 1000.0;
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v6, a1);
  }
  return 0.0;
}

uint64_t sub_100053D50(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[9];
  uint64_t v11;

  v5 = (char *)(a2 + *(int *)(type metadata accessor for TFComponent(0, a3, a4, a4) + 60));
  v6 = *v5;
  v7 = *((_QWORD *)v5 + 1);
  v10[1] = v6;
  v11 = v7;
  v10[0] = a1;
  v8 = sub_10000498C((uint64_t *)&unk_10009A850);
  return State.wrappedValue.setter(v10, v8);
}

BOOL sub_100053DC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _BOOL8 v7;
  uint64_t v9;

  v3 = sub_10000498C(&qword_1000997A0);
  __chkstk_darwin(v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000928C(v1 + *(int *)(a1 + 40), (uint64_t)v5, &qword_1000997A0);
  v6 = type metadata accessor for HoverEffect(0);
  v7 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6) != 1;
  sub_1000092D0((uint64_t)v5, &qword_1000997A0);
  return v7;
}

uint64_t sub_100053E7C()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

uint64_t sub_100053E94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (**v12)(char);
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[16];
  uint64_t v18;
  uint64_t v19;

  v5 = sub_10000498C(&qword_10009ADF8);
  __chkstk_darwin(v5);
  v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = *v2;
  v9 = *((_QWORD *)v2 + 1);
  v10 = swift_allocObject(&unk_1000909B8, 32, 7);
  *(_BYTE *)(v10 + 16) = v8;
  *(_QWORD *)(v10 + 24) = v9;
  v11 = sub_10000498C(&qword_10009AE00);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v7, a1, v11);
  v12 = (uint64_t (**)(char))&v7[*(int *)(v5 + 36)];
  *v12 = sub_1000654B8;
  v12[1] = (uint64_t (*)(char))v10;
  KeyPath = swift_getKeyPath(&unk_1000760B0);
  v17[8] = v8;
  v18 = v9;
  swift_retain();
  v14 = sub_10000498C((uint64_t *)&unk_10009A850);
  State.wrappedValue.getter(&v19, v14);
  LOBYTE(v9) = v19;
  sub_10000928C((uint64_t)v7, a2, &qword_10009ADF8);
  v15 = a2 + *(int *)(sub_10000498C(&qword_10009AE08) + 36);
  *(_QWORD *)v15 = KeyPath;
  *(_BYTE *)(v15 + 8) = v9;
  return sub_1000092D0((uint64_t)v7, &qword_10009ADF8);
}

uint64_t sub_100053FE8@<X0>(uint64_t a1@<X8>)
{
  char **v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (**v8)(char *, ValueMetadata *);
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char **v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char **v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  ValueMetadata *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  ValueMetadata *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t OpaqueTypeConformance2;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  int *v70;
  char **v71;
  void *v72;
  id v73;
  id v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  ValueMetadata *v85;
  uint64_t v86;
  char v87;
  _QWORD *v88;
  char *v89;
  char *v90;
  uint64_t KeyPath;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  void (**v119)(char *, ValueMetadata *);
  id v120;
  id v121;
  unint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  ValueMetadata *v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  char *v152;
  uint64_t v153;
  void (**v154)(uint64_t, _QWORD, _QWORD);
  char *v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char **v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  char *v167;
  char *v168;
  char *v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  id v173;
  char *v174;
  char *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  void (**v182)(char *, ValueMetadata *);
  uint64_t v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD v203[2];
  char v204;
  uint64_t v205;
  ValueMetadata *v206;
  unint64_t v207;
  unint64_t v208;
  char v209;

  v200 = sub_10000498C(&qword_10009A8C8);
  v169 = *(char **)(v200 - 8);
  __chkstk_darwin(v200);
  v168 = (char *)&v162 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v201 = sub_10000498C((uint64_t *)&unk_10009A8D0);
  v173 = *(id *)(v201 - 8);
  v4 = __chkstk_darwin(v201);
  v167 = (char *)&v162 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v170 = (char *)&v162 - v6;
  v195 = type metadata accessor for HighlightHoverEffect(0);
  v164 = *(_QWORD *)(v195 - 8);
  __chkstk_darwin(v195);
  v8 = (void (**)(char *, ValueMetadata *))((char *)&v162 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v178 = type metadata accessor for AccessibilityActionKind(0);
  v177 = *(_QWORD *)(v178 - 8);
  __chkstk_darwin(v178);
  v176 = (char *)&v162 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (int *)type metadata accessor for TFToggle(0);
  v184 = *((_QWORD *)v10 - 1);
  __chkstk_darwin(v10);
  v186 = v11;
  v187 = (uint64_t)&v162 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for TFComponentBackground(0);
  __chkstk_darwin(v12);
  v165 = (uint64_t)&v162 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v196 = type metadata accessor for TFLabel(0);
  __chkstk_darwin(v196);
  v15 = (char **)((char *)&v162 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = sub_10000498C(&qword_10009A220);
  __chkstk_darwin(v16);
  v18 = (char *)&v162 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v183 = sub_10000498C(&qword_10009A8E0);
  __chkstk_darwin(v183);
  v166 = (char *)&v162 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v172 = sub_10000498C(&qword_10009A8E8);
  v171 = *(_QWORD *)(v172 - 8);
  __chkstk_darwin(v172);
  v185 = (char *)&v162 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v192 = sub_10000498C(&qword_10009A8F0);
  __chkstk_darwin(v192);
  v175 = (char *)&v162 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v194 = sub_10000498C(&qword_10009A8F8);
  v180 = *(_QWORD *)(v194 - 8);
  v22 = __chkstk_darwin(v194);
  v174 = (char *)&v162 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v179 = (char *)&v162 - v24;
  v197 = sub_10000498C(&qword_10009A900);
  __chkstk_darwin(v197);
  v199 = (uint64_t)&v162 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v189 = sub_10000498C(&qword_10009A908);
  __chkstk_darwin(v189);
  v190 = (char *)&v162 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v198 = sub_10000498C(&qword_10009A910);
  __chkstk_darwin(v198);
  v193 = (char *)&v162 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v188 = type metadata accessor for ButtonToggleStyle(0);
  v182 = *(void (***)(char *, ValueMetadata *))(v188 - 8);
  __chkstk_darwin(v188);
  v29 = (char *)&v162 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_10000498C(&qword_10009A918);
  v181 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v32 = (char *)&v162 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_10000498C(&qword_10009A920);
  v34 = __chkstk_darwin(v33);
  v36 = (char *)&v162 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __chkstk_darwin(v34);
  v40 = *((unsigned __int8 *)v1 + v10[8]);
  v202 = a1;
  v191 = v37;
  if (v40 == 1)
  {
    v41 = (char *)v1 + v10[9];
    v42 = *(_QWORD *)v41;
    v43 = *((_QWORD *)v41 + 1);
    LOBYTE(v41) = v41[16];
    v203[0] = v42;
    v203[1] = v43;
    v204 = (char)v41;
    v44 = v1;
    v186 = v39;
    v187 = (uint64_t)&v162 - v38;
    v45 = sub_10000498C(&qword_100099EF0);
    v46 = Binding.projectedValue.getter(&v205, v45);
    v47 = v205;
    v48 = v206;
    v49 = v207;
    __chkstk_darwin(v46);
    v161 = v44;
    v50 = sub_100007D90(&qword_10009A938, type metadata accessor for TFLabel, (uint64_t)&unk_100075CC0);
    v51 = Toggle.init(isOn:label:)(v47, v48, v49, sub_1000622A0, &v160, v196, v50);
    ButtonToggleStyle.init()(v51);
    v52 = sub_10000966C((unint64_t *)&unk_10009A960, &qword_10009A918, (uint64_t)&protocol conformance descriptor for Toggle<A>);
    v53 = sub_100007D90(&qword_10009A100, (uint64_t (*)(uint64_t))&type metadata accessor for ButtonToggleStyle, (uint64_t)&protocol conformance descriptor for ButtonToggleStyle);
    v54 = (ValueMetadata *)v188;
    View.toggleStyle<A>(_:)(v29, v30, v188, v52, v53);
    v182[1](v29, v54);
    (*(void (**)(char *, uint64_t))(v181 + 8))(v32, v30);
    v55 = v186;
    v56 = v187;
    v57 = v191;
    (*(void (**)(uint64_t, char *, uint64_t))(v186 + 32))(v187, v36, v191);
    v58 = v190;
    (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v190, v56, v57);
    swift_storeEnumTagMultiPayload(v58, v189, 0);
    v205 = v30;
    v206 = v54;
    v207 = v52;
    v208 = v53;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v205, &opaque type descriptor for <<opaque return type of View.toggleStyle<A>(_:)>>, 1);
    v60 = sub_100061FDC();
    v61 = sub_100007D90(&qword_10009A860, (uint64_t (*)(uint64_t))&type metadata accessor for HighlightHoverEffect, (uint64_t)&protocol conformance descriptor for HighlightHoverEffect);
    v205 = v192;
    v206 = (ValueMetadata *)v195;
    v207 = v60;
    v208 = v61;
    v62 = swift_getOpaqueTypeConformance2(&v205, &opaque type descriptor for <<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>, 1);
    v63 = (uint64_t)v193;
    _ConditionalContent<>.init(storage:)(v58, v57, v194, OpaqueTypeConformance2, v62);
    v64 = v199;
    sub_10000928C(v63, v199, &qword_10009A910);
    swift_storeEnumTagMultiPayload(v64, v197, 0);
    v65 = sub_100061E90();
    v66 = sub_10000966C(&qword_10009A950, &qword_10009A8C8, (uint64_t)&protocol conformance descriptor for Button<A>);
    v67 = sub_100061C3C();
    v205 = v200;
    v206 = &type metadata for TFPressedButtonStyle;
    v207 = v66;
    v208 = v67;
    v68 = swift_getOpaqueTypeConformance2(&v205, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    _ConditionalContent<>.init(storage:)(v64, v198, v201, v65, v68);
    sub_1000092D0(v63, &qword_10009A910);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v55 + 8))(v56, v57);
  }
  else
  {
    v163 = v18;
    v70 = (int *)v196;
    v181 = v30;
    v182 = v8;
    v71 = v1;
    v72 = (void *)objc_opt_self(UIDevice);
    v73 = objc_msgSend(v72, "currentDevice");
    v74 = objc_msgSend(v73, "userInterfaceIdiom");

    if (v74 == (id)6)
    {
      v75 = v71[1];
      v170 = *v71;
      v76 = v71[3];
      v169 = v71[2];
      v77 = (char *)v71 + v10[6];
      v78 = (char *)v15 + v70[6];
      v79 = type metadata accessor for SymbolRenderingMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v79 - 8) + 16))(v78, v77, v79);
      v80 = (uint64_t *)((char *)v71 + v10[7]);
      v81 = *v80;
      v82 = v80[1];
      v83 = (char *)v71 + v10[9];
      v84 = *(_QWORD *)v83;
      v85 = (ValueMetadata *)*((_QWORD *)v83 + 1);
      LOBYTE(v83) = v83[16];
      v205 = v84;
      v206 = v85;
      LOBYTE(v207) = (_BYTE)v83;
      swift_bridgeObjectRetain(v82);
      swift_bridgeObjectRetain(v75);
      swift_bridgeObjectRetain(v76);
      v86 = sub_10000498C(&qword_100099EF0);
      v173 = v72;
      Binding.wrappedValue.getter(v203, v86);
      v87 = v203[0];
      *v15 = v170;
      v15[1] = v75;
      v15[2] = v169;
      v15[3] = v76;
      v88 = (char **)((char *)v15 + v70[7]);
      *v88 = v81;
      v88[1] = v82;
      *((_BYTE *)v15 + v70[8]) = v87;
      v89 = (char *)v15 + v70[9];
      *(_QWORD *)v89 = swift_getKeyPath(&unk_100076000);
      v89[8] = 0;
      v90 = (char *)v15 + v70[10];
      KeyPath = swift_getKeyPath(&unk_100076028);
      *(_QWORD *)v90 = KeyPath;
      v90[8] = 0;
      v92 = static Alignment.center.getter(KeyPath);
      v93 = (uint64_t)v163;
      sub_100031844(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v163, 0.0, 1, INFINITY, 0, v92, v94);
      sub_100009250((uint64_t)v15, type metadata accessor for TFLabel);
      v95 = v165;
      v96 = sub_100055234(v165);
      v97 = static Alignment.center.getter(v96);
      v99 = v98;
      v100 = (uint64_t)v166;
      v101 = (uint64_t)&v166[*(int *)(v183 + 36)];
      sub_10000920C(v95, v101, type metadata accessor for TFComponentBackground);
      v102 = (uint64_t *)(v101 + *(int *)(sub_10000498C(&qword_10009A948) + 36));
      *v102 = v97;
      v102[1] = v99;
      sub_10000928C(v93, v100, &qword_10009A220);
      sub_100009250(v95, type metadata accessor for TFComponentBackground);
      sub_1000092D0(v93, &qword_10009A220);
      v103 = v187;
      sub_10000920C((uint64_t)v71, v187, type metadata accessor for TFToggle);
      v104 = *(unsigned __int8 *)(v184 + 80);
      v105 = (v104 + 16) & ~v104;
      v106 = v105 + v186;
      v107 = v104 | 7;
      v108 = swift_allocObject(&unk_100090700, v105 + v186, v104 | 7);
      sub_100008F30(v103, v108 + v105, type metadata accessor for TFToggle);
      v109 = sub_100062088();
      v110 = v183;
      View.onTapGesture(count:perform:)(1, sub_100061DE8, v108, v183, v109);
      swift_release();
      sub_1000092D0(v100, &qword_10009A8E0);
      sub_10000920C((uint64_t)v71, v103, type metadata accessor for TFToggle);
      v111 = swift_allocObject(&unk_100090728, v106, v107);
      v112 = sub_100008F30(v103, v111 + v105, type metadata accessor for TFToggle);
      v113 = v176;
      static AccessibilityActionKind.default.getter(v112);
      v205 = v110;
      v206 = (ValueMetadata *)v109;
      v114 = swift_getOpaqueTypeConformance2(&v205, &opaque type descriptor for <<opaque return type of View.onTapGesture(count:perform:)>>, 1);
      v115 = (uint64_t)v175;
      v116 = v172;
      v117 = v185;
      View.accessibilityAction(_:_:)(v113, sub_100061DE8, v111, v172, v114);
      swift_release();
      (*(void (**)(char *, uint64_t))(v177 + 8))(v113, v178);
      v118 = (*(uint64_t (**)(char *, uint64_t))(v171 + 8))(v117, v116);
      v119 = v182;
      static CustomHoverEffect<>.highlight.getter(v118);
      v120 = objc_msgSend(v173, "currentDevice");
      v121 = objc_msgSend(v120, "userInterfaceIdiom");

      v122 = sub_100061FDC();
      v123 = sub_100007D90(&qword_10009A860, (uint64_t (*)(uint64_t))&type metadata accessor for HighlightHoverEffect, (uint64_t)&protocol conformance descriptor for HighlightHoverEffect);
      v124 = v174;
      v125 = v192;
      v126 = (ValueMetadata *)v195;
      View.hoverEffect<A>(_:isEnabled:)(v119, v121 == (id)6, v192, v195, v122, v123);
      (*(void (**)(_QWORD, ValueMetadata *))(v164 + 8))(v119, v126);
      sub_1000092D0(v115, &qword_10009A8F0);
      v127 = v180;
      v128 = v179;
      v129 = v194;
      (*(void (**)(char *, char *, uint64_t))(v180 + 32))(v179, v124, v194);
      v130 = v190;
      (*(void (**)(char *, char *, uint64_t))(v127 + 16))(v190, v128, v129);
      swift_storeEnumTagMultiPayload(v130, v189, 1);
      v131 = sub_10000966C((unint64_t *)&unk_10009A960, &qword_10009A918, (uint64_t)&protocol conformance descriptor for Toggle<A>);
      v132 = sub_100007D90(&qword_10009A100, (uint64_t (*)(uint64_t))&type metadata accessor for ButtonToggleStyle, (uint64_t)&protocol conformance descriptor for ButtonToggleStyle);
      v205 = v181;
      v206 = (ValueMetadata *)v188;
      v207 = v131;
      v208 = v132;
      v133 = swift_getOpaqueTypeConformance2(&v205, &opaque type descriptor for <<opaque return type of View.toggleStyle<A>(_:)>>, 1);
      v205 = v125;
      v206 = v126;
      v207 = v122;
      v208 = v123;
      v134 = swift_getOpaqueTypeConformance2(&v205, &opaque type descriptor for <<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>, 1);
      v135 = (uint64_t)v193;
      _ConditionalContent<>.init(storage:)(v130, v191, v129, v133, v134);
      v136 = v199;
      sub_10000928C(v135, v199, &qword_10009A910);
      swift_storeEnumTagMultiPayload(v136, v197, 0);
      v137 = sub_100061E90();
      v138 = sub_10000966C(&qword_10009A950, &qword_10009A8C8, (uint64_t)&protocol conformance descriptor for Button<A>);
      v139 = sub_100061C3C();
      v205 = v200;
      v206 = &type metadata for TFPressedButtonStyle;
      v207 = v138;
      v208 = v139;
      v140 = swift_getOpaqueTypeConformance2(&v205, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
      _ConditionalContent<>.init(storage:)(v136, v198, v201, v137, v140);
      sub_1000092D0(v135, &qword_10009A910);
      return (*(uint64_t (**)(char *, uint64_t))(v127 + 8))(v128, v129);
    }
    else
    {
      v141 = v187;
      sub_10000920C((uint64_t)v71, v187, type metadata accessor for TFToggle);
      v142 = *(unsigned __int8 *)(v184 + 80);
      v143 = (v142 + 16) & ~v142;
      v144 = swift_allocObject(&unk_1000906D8, v143 + v186, v142 | 7);
      v145 = sub_100008F30(v141, v144 + v143, type metadata accessor for TFToggle);
      __chkstk_darwin(v145);
      v161 = v71;
      v146 = sub_10000498C(&qword_10009A928);
      v147 = sub_100061DF4();
      v148 = v168;
      Button.init(action:label:)(sub_100061DE8, v144, sub_100061DEC, &v160, v146, v147);
      v149 = swift_getKeyPath(&unk_100076000);
      v205 = 0;
      v206 = 0;
      LOBYTE(v207) = 0;
      v208 = v149;
      v209 = 0;
      v150 = sub_10000966C(&qword_10009A950, &qword_10009A8C8, (uint64_t)&protocol conformance descriptor for Button<A>);
      v151 = sub_100061C3C();
      v152 = v167;
      v153 = v200;
      View.buttonStyle<A>(_:)(&v205, v200, &type metadata for TFPressedButtonStyle, v150, v151);
      swift_release();
      (*((void (**)(char *, uint64_t))v169 + 1))(v148, v153);
      v154 = (void (**)(uint64_t, _QWORD, _QWORD))v173;
      v155 = v170;
      v156 = v201;
      (*((void (**)(char *, char *, uint64_t))v173 + 4))(v170, v152, v201);
      v157 = v199;
      ((void (**)(uint64_t, char *, uint64_t))v154)[2](v199, v155, v156);
      swift_storeEnumTagMultiPayload(v157, v197, 1);
      v158 = sub_100061E90();
      v205 = v153;
      v206 = &type metadata for TFPressedButtonStyle;
      v207 = v150;
      v208 = v151;
      v159 = swift_getOpaqueTypeConformance2(&v205, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
      _ConditionalContent<>.init(storage:)(v157, v198, v156, v158, v159);
      return ((uint64_t (*)(char *, uint64_t))v154[1])(v155, v156);
    }
  }
}

uint64_t sub_1000550F0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  char *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _QWORD *v18;
  char *v19;
  char *v20;
  uint64_t result;
  uint64_t v22;

  v5 = *a1;
  v4 = a1[1];
  v7 = a1[2];
  v6 = a1[3];
  v8 = type metadata accessor for TFToggle(0);
  v9 = (char *)a1 + *(int *)(v8 + 24);
  v10 = (int *)type metadata accessor for TFLabel(0);
  v11 = (char *)a2 + v10[6];
  v12 = type metadata accessor for SymbolRenderingMode(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v11, v9, v12);
  v13 = (uint64_t *)((char *)a1 + *(int *)(v8 + 28));
  v15 = *v13;
  v14 = v13[1];
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v6);
  v16 = sub_10000498C(&qword_100099EF0);
  Binding.wrappedValue.getter(&v22, v16);
  v17 = v22;
  *a2 = v5;
  a2[1] = v4;
  a2[2] = v7;
  a2[3] = v6;
  v18 = (_QWORD *)((char *)a2 + v10[7]);
  *v18 = v15;
  v18[1] = v14;
  *((_BYTE *)a2 + v10[8]) = v17;
  v19 = (char *)a2 + v10[9];
  *(_QWORD *)v19 = swift_getKeyPath(&unk_100076000);
  v19[8] = 0;
  v20 = (char *)a2 + v10[10];
  result = swift_getKeyPath(&unk_100076028);
  *(_QWORD *)v20 = result;
  v20[8] = 0;
  return result;
}

uint64_t sub_100055234@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  char v26;
  BOOL v27;
  uint64_t KeyPath;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;

  v3 = sub_10000498C(&qword_10009A3A0);
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for TFToggle(0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v1 + *(int *)(v7 + 40);
  v11 = *(_QWORD *)v10;
  v12 = *(_BYTE *)(v10 + 8);
  sub_10001D97C(*(_QWORD *)v10, v12);
  v13 = sub_1000117FC(v11, v12);
  sub_10001D9D8(v11, v12);
  sub_10000920C(v1, (uint64_t)v9, type metadata accessor for TFToggle);
  if ((v13 - 2) > 2u)
  {
    v18 = 0;
  }
  else
  {
    v14 = &v9[*(int *)(v6 + 36)];
    v15 = *(_QWORD *)v14;
    v16 = *((_QWORD *)v14 + 1);
    LOBYTE(v14) = v14[16];
    v39 = v15;
    v40 = v16;
    v41 = (char)v14;
    v17 = sub_10000498C(&qword_100099EF0);
    Binding.wrappedValue.getter(&v42, v17);
    v18 = v42 ^ 1;
  }
  sub_100009250((uint64_t)v9, type metadata accessor for TFToggle);
  v19 = v1 + *(int *)(v6 + 36);
  v20 = *(_QWORD *)v19;
  v21 = *(_QWORD *)(v19 + 8);
  LOBYTE(v19) = *(_BYTE *)(v19 + 16);
  v39 = v20;
  v40 = v21;
  v41 = v19;
  v22 = sub_10000498C(&qword_100099EF0);
  Binding.wrappedValue.getter(&v42, v22);
  v23 = v42;
  v24 = *(_QWORD *)v10;
  v25 = *(_BYTE *)(v10 + 8);
  sub_10001D97C(*(_QWORD *)v10, v25);
  v26 = sub_1000117FC(v24, v25);
  sub_10001D9D8(v24, v25);
  v27 = (v26 - 2) < 3u;
  KeyPath = swift_getKeyPath(&unk_100076000);
  *v5 = swift_getKeyPath(&unk_100076050);
  v29 = sub_10000498C((uint64_t *)&unk_10009A390);
  swift_storeEnumTagMultiPayload(v5, v29, 0);
  v30 = swift_getKeyPath(&unk_100076080);
  v31 = swift_getKeyPath(&unk_1000760B0);
  *(_BYTE *)a1 = v18 & 1;
  *(_BYTE *)(a1 + 1) = v23;
  *(_BYTE *)(a1 + 2) = v27;
  *(_QWORD *)(a1 + 8) = KeyPath;
  *(_BYTE *)(a1 + 16) = 0;
  v32 = (int *)type metadata accessor for TFComponentBackground(0);
  sub_10000930C((uint64_t)v5, a1 + v32[8], &qword_10009A3A0);
  v33 = a1 + v32[9];
  *(_QWORD *)v33 = v30;
  *(_BYTE *)(v33 + 8) = 0;
  v34 = a1 + v32[10];
  *(_QWORD *)v34 = v31;
  *(_BYTE *)(v34 + 8) = 0;
  v35 = a1 + v32[11];
  *(_QWORD *)v35 = swift_getKeyPath(&unk_1000760D8);
  *(_BYTE *)(v35 + 8) = 0;
  v36 = a1 + v32[12];
  result = swift_getKeyPath(&unk_100076108);
  *(_QWORD *)v36 = result;
  *(_BYTE *)(v36 + 8) = 0;
  return result;
}

uint64_t sub_100055500(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  v1 = (uint64_t *)(a1 + *(int *)(type metadata accessor for TFToggle(0) + 36));
  v2 = *v1;
  v3 = v1[1];
  v4 = *((_BYTE *)v1 + 16);
  swift_retain();
  swift_retain();
  v5 = sub_10000498C(&qword_100099EF0);
  Binding.wrappedValue.getter(&v11, v5);
  v8 = v2;
  v9 = v3;
  v10 = v4;
  v7 = (v11 & 1) == 0;
  Binding.wrappedValue.setter(&v7, v5);
  swift_release();
  return swift_release();
}

uint64_t sub_1000555B8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  _QWORD *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;

  v38 = a2;
  v3 = type metadata accessor for TFComponentBackground(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (int *)type metadata accessor for TFLabel(0);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *a1;
  v10 = a1[1];
  v11 = a1[3];
  v37 = a1[2];
  v12 = (int *)type metadata accessor for TFToggle(0);
  v13 = (char *)a1 + v12[6];
  v14 = (char *)v8 + v6[6];
  v15 = type metadata accessor for SymbolRenderingMode(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v14, v13, v15);
  v16 = (uint64_t *)((char *)a1 + v12[7]);
  v18 = *v16;
  v17 = v16[1];
  v19 = (char *)a1 + v12[9];
  v20 = *(_QWORD *)v19;
  v21 = *((_QWORD *)v19 + 1);
  LOBYTE(v19) = v19[16];
  v39 = v20;
  v40 = v21;
  v41 = (char)v19;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  v22 = sub_10000498C(&qword_100099EF0);
  Binding.wrappedValue.getter(&v42, v22);
  v23 = v42;
  *v8 = v9;
  v8[1] = v10;
  v8[2] = v37;
  v8[3] = v11;
  v24 = (_QWORD *)((char *)v8 + v6[7]);
  *v24 = v18;
  v24[1] = v17;
  *((_BYTE *)v8 + v6[8]) = v23;
  v25 = (char *)v8 + v6[9];
  *(_QWORD *)v25 = swift_getKeyPath(&unk_100076000);
  v25[8] = 0;
  v26 = (char *)v8 + v6[10];
  *(_QWORD *)v26 = swift_getKeyPath(&unk_100076028);
  v26[8] = 0;
  v27 = sub_100055234((uint64_t)v5);
  v28 = static Alignment.center.getter(v27);
  v30 = v29;
  v31 = sub_10000498C(&qword_10009A928);
  v32 = v38;
  v33 = v38 + *(int *)(v31 + 36);
  sub_10000920C((uint64_t)v5, v33, type metadata accessor for TFComponentBackground);
  v34 = (uint64_t *)(v33 + *(int *)(sub_10000498C(&qword_10009A948) + 36));
  *v34 = v28;
  v34[1] = v30;
  sub_10000920C((uint64_t)v8, v32, type metadata accessor for TFLabel);
  sub_100009250((uint64_t)v5, type metadata accessor for TFComponentBackground);
  return sub_100009250((uint64_t)v8, type metadata accessor for TFLabel);
}

uint64_t sub_1000557F4@<X0>(uint64_t a1@<X8>)
{
  return sub_10005639C(&qword_10009A8B8, (void (*)(uint64_t))sub_100053FE8, &qword_10009A8C0, a1);
}

uint64_t sub_100055810@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v2 = v1;
  v4 = sub_10000498C(&qword_10009AB10);
  __chkstk_darwin(v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10000498C(&qword_10009AB00);
  __chkstk_darwin(v7);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100055980(v2, (uint64_t)v6);
  v10 = v2 + *(int *)(type metadata accessor for TFLabel(0) + 40);
  v11 = *(_QWORD *)v10;
  v12 = *(_BYTE *)(v10 + 8);
  sub_10001D97C(*(_QWORD *)v10, v12);
  v13 = sub_100012138(v11, v12);
  v14 = sub_10001D9D8(v11, v12);
  if ((v13 & 1) != 0)
    v15 = static Alignment.leading.getter(v14);
  else
    v15 = static Alignment.center.getter(v14);
  sub_1000318A8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v9, 0.0, 1, INFINITY, 0, v15, v16);
  sub_1000092D0((uint64_t)v6, &qword_10009AB10);
  return sub_10000930C((uint64_t)v9, a1, &qword_10009AB00);
}

uint64_t sub_100055980@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v4 = sub_10000498C(&qword_10009AB18);
  __chkstk_darwin(v4);
  v6 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10000498C(&qword_10009AB20);
  __chkstk_darwin(v7);
  v9 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10000498C(&qword_10009AB28);
  v61 = *(_QWORD *)(v10 - 8);
  v62 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_10000498C(&qword_10009AB30);
  v13 = __chkstk_darwin(v63);
  v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v56 - v16;
  v18 = type metadata accessor for TFLabel(0);
  v19 = (uint64_t *)(a1 + *(int *)(v18 + 28));
  v20 = v19[1];
  if (!v20)
    goto LABEL_8;
  v21 = *v19;
  v22 = HIBYTE(v20) & 0xF;
  if ((v20 & 0x2000000000000000) == 0)
    v22 = v21 & 0xFFFFFFFFFFFFLL;
  if (v22)
  {
    v23 = v18;
    v58 = v7;
    v59 = a2;
    v57 = &v56;
    v24 = __chkstk_darwin(v18);
    *(&v56 - 4) = v26;
    *(&v56 - 3) = v25;
    *(&v56 - 2) = a1;
    __chkstk_darwin(v24);
    *(&v56 - 2) = a1;
    v27 = sub_10004FAAC();
    v28 = sub_100062C30();
    v60 = v4;
    v29 = v28;
    v30 = Label.init(title:icon:)(sub_100062D18, &v56 - 6, sub_100062D24, &v56 - 4, &type metadata for TFText, v4, v27, v28);
    LODWORD(v57) = static Edge.Set.horizontal.getter(v30);
    v31 = a1 + *(int *)(v23 + 40);
    v32 = *(_QWORD *)v31;
    LOBYTE(v27) = *(_BYTE *)(v31 + 8);
    sub_10001D97C(*(_QWORD *)v31, v27);
    v33 = sub_100012138(v32, v27);
    v34 = sub_10001D9D8(v32, v27);
    v35 = 0.0;
    if (v33 == 2)
    {
      v36 = a1 + *(int *)(v23 + 36);
      v37 = *(_QWORD *)v36;
      v38 = *(_BYTE *)(v36 + 8);
      sub_10001D97C(*(_QWORD *)v36, v38);
      sub_1000117FC(v37, v38);
      v34 = sub_10001D9D8(v37, v38);
      v35 = 12.0;
    }
    v39 = EdgeInsets.init(_all:)(v34, v35);
    v41 = v40;
    v43 = v42;
    v45 = v44;
    v47 = v61;
    v46 = v62;
    (*(void (**)(char *, char *, uint64_t))(v61 + 16))(v15, v12, v62);
    v48 = v63;
    v49 = &v15[*(int *)(v63 + 36)];
    *v49 = (char)v57;
    *((double *)v49 + 1) = v39;
    *((_QWORD *)v49 + 2) = v41;
    *((_QWORD *)v49 + 3) = v43;
    *((_QWORD *)v49 + 4) = v45;
    v49[40] = 0;
    (*(void (**)(char *, uint64_t))(v47 + 8))(v12, v46);
    v50 = &qword_10009AB30;
    sub_10000930C((uint64_t)v15, (uint64_t)v17, &qword_10009AB30);
    sub_10000928C((uint64_t)v17, (uint64_t)v9, &qword_10009AB30);
    swift_storeEnumTagMultiPayload(v9, v58, 0);
    v51 = sub_100062BAC();
    _ConditionalContent<>.init(storage:)(v9, v48, v60, v51, v29);
    v52 = (uint64_t)v17;
  }
  else
  {
LABEL_8:
    sub_100055DC4((uint64_t)v6);
    v50 = &qword_10009AB18;
    sub_10000928C((uint64_t)v6, (uint64_t)v9, &qword_10009AB18);
    swift_storeEnumTagMultiPayload(v9, v7, 1);
    v53 = sub_100062BAC();
    v54 = sub_100062C30();
    _ConditionalContent<>.init(storage:)(v9, v63, v4, v53, v54);
    v52 = (uint64_t)v6;
  }
  return sub_1000092D0(v52, v50);
}

uint64_t sub_100055D64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v7;
  uint64_t KeyPath;

  v7 = *(_BYTE *)(a3 + *(int *)(type metadata accessor for TFLabel(0) + 32));
  KeyPath = swift_getKeyPath(&unk_1000760D8);
  *(_QWORD *)a4 = a1;
  *(_QWORD *)(a4 + 8) = a2;
  *(_BYTE *)(a4 + 16) = v7;
  *(_QWORD *)(a4 + 24) = KeyPath;
  *(_BYTE *)(a4 + 32) = 0;
  return swift_bridgeObjectRetain(a2);
}

uint64_t sub_100055DC4@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  char v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int *v43;
  char v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v65 = sub_10000498C(&qword_10009AB68);
  __chkstk_darwin(v65);
  v64 = (uint64_t)&v59 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = sub_10000498C(&qword_10009AB70);
  __chkstk_darwin(v62);
  v61 = (uint64_t)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = sub_10000498C(&qword_10009AB58);
  __chkstk_darwin(v66);
  v63 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SymbolRenderingMode(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v59 - v11;
  v13 = (int *)type metadata accessor for TFSymbol(0);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v59 - v19;
  __chkstk_darwin(v18);
  v23 = v1[1];
  if (v23)
  {
    v24 = *v1;
    v59 = (uint64_t)&v59 - v21;
    v25 = (int *)type metadata accessor for TFLabel(0);
    v26 = v25[8];
    v60 = a1;
    v27 = *((_BYTE *)v1 + v26);
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v12, (char *)v1 + v25[6], v6);
    v28 = *(_QWORD *)((char *)v1 + v25[7] + 8) == 0;
    v29 = swift_bridgeObjectRetain(v23);
    v30 = static Font.title3.getter(v29);
    *(_QWORD *)v20 = v24;
    *((_QWORD *)v20 + 1) = v23;
    *((_QWORD *)v20 + 2) = 0;
    *((_QWORD *)v20 + 3) = 0;
    v20[32] = v27;
    *((_QWORD *)v20 + 5) = v30;
    *((_QWORD *)v20 + 6) = 0;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v20[v13[9]], v12, v6);
    v20[v13[10]] = 0;
    v20[v13[11]] = v28;
    v31 = &v20[v13[12]];
    *(_QWORD *)v31 = swift_getKeyPath(&unk_100076028);
    v31[8] = 0;
    v32 = &v20[v13[13]];
    *(_QWORD *)v32 = swift_getKeyPath(&unk_1000760D8);
    v32[8] = 0;
    v33 = v59;
    sub_100008F30((uint64_t)v20, v59, type metadata accessor for TFSymbol);
    v34 = v61;
    sub_10000920C(v33, v61, type metadata accessor for TFSymbol);
    swift_storeEnumTagMultiPayload(v34, v62, 0);
    v35 = sub_100007D90(&qword_100099C00, type metadata accessor for TFSymbol, (uint64_t)&unk_100075D10);
    v36 = (uint64_t)v63;
    _ConditionalContent<>.init(storage:)(v34, v13, v13, v35, v35);
    v37 = v64;
    sub_10000928C(v36, v64, &qword_10009AB58);
    swift_storeEnumTagMultiPayload(v37, v65, 0);
    v38 = sub_100062C9C();
    _ConditionalContent<>.init(storage:)(v37, v66, &type metadata for EmptyView, v38, &protocol witness table for EmptyView);
    sub_1000092D0(v36, &qword_10009AB58);
    v39 = v33;
  }
  else
  {
    v40 = v7;
    v41 = v1[3];
    if (!v41)
    {
      v57 = v64;
      swift_storeEnumTagMultiPayload(v64, v65, 1);
      v58 = sub_100062C9C();
      return _ConditionalContent<>.init(storage:)(v57, v66, &type metadata for EmptyView, v58, &protocol witness table for EmptyView);
    }
    v59 = v22;
    v60 = a1;
    v42 = v1[2];
    v43 = (int *)type metadata accessor for TFLabel(0);
    v44 = *((_BYTE *)v1 + v43[8]);
    (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v10, (char *)v1 + v43[6], v6);
    v45 = *(_QWORD *)((char *)v1 + v43[7] + 8) == 0;
    v46 = swift_bridgeObjectRetain(v41);
    v47 = static Font.title3.getter(v46);
    *(_QWORD *)v16 = 0;
    *((_QWORD *)v16 + 1) = 0;
    *((_QWORD *)v16 + 2) = v42;
    *((_QWORD *)v16 + 3) = v41;
    v16[32] = v44;
    *((_QWORD *)v16 + 5) = v47;
    *((_QWORD *)v16 + 6) = 0;
    (*(void (**)(char *, char *, uint64_t))(v40 + 32))(&v16[v13[9]], v10, v6);
    v16[v13[10]] = 0;
    v16[v13[11]] = v45;
    v48 = &v16[v13[12]];
    *(_QWORD *)v48 = swift_getKeyPath(&unk_100076028);
    v48[8] = 0;
    v49 = &v16[v13[13]];
    *(_QWORD *)v49 = swift_getKeyPath(&unk_1000760D8);
    v49[8] = 0;
    v50 = v59;
    sub_100008F30((uint64_t)v16, v59, type metadata accessor for TFSymbol);
    v51 = v61;
    sub_10000920C(v50, v61, type metadata accessor for TFSymbol);
    swift_storeEnumTagMultiPayload(v51, v62, 1);
    v52 = sub_100007D90(&qword_100099C00, type metadata accessor for TFSymbol, (uint64_t)&unk_100075D10);
    v53 = (uint64_t)v63;
    _ConditionalContent<>.init(storage:)(v51, v13, v13, v52, v52);
    v54 = v64;
    sub_10000928C(v53, v64, &qword_10009AB58);
    swift_storeEnumTagMultiPayload(v54, v65, 0);
    v55 = sub_100062C9C();
    _ConditionalContent<>.init(storage:)(v54, v66, &type metadata for EmptyView, v55, &protocol witness table for EmptyView);
    sub_1000092D0(v53, &qword_10009AB58);
    v39 = v50;
  }
  return sub_100009250(v39, type metadata accessor for TFSymbol);
}

uint64_t sub_100056348()
{
  unint64_t v0;
  uint64_t var1;

  v0 = sub_10004EE60();
  EnvironmentValues.subscript.getter(&var1, &type metadata for TFMenuLabelChevronDisplayedKey, &type metadata for TFMenuLabelChevronDisplayedKey, v0);
  return var1;
}

uint64_t sub_100056380@<X0>(uint64_t a1@<X8>)
{
  return sub_10005639C(&qword_10009AB00, (void (*)(uint64_t))sub_100055810, &qword_10009AB08, a1);
}

uint64_t sub_10005639C@<X0>(uint64_t *a1@<X2>, void (*a2)(uint64_t)@<X3>, uint64_t *a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  char v17;
  _QWORD v18[2];

  v8 = sub_10000498C(a1);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2(v9);
  v17 = 0;
  State.init(wrappedValue:)(v18, &v17, &type metadata for Bool);
  v12 = v18[0];
  v13 = v18[1];
  sub_10000928C((uint64_t)v11, a4, a1);
  v14 = a4 + *(int *)(sub_10000498C(a3) + 36);
  *(_BYTE *)v14 = v12;
  *(_QWORD *)(v14 + 8) = v13;
  return sub_1000092D0((uint64_t)v11, a1);
}

uint64_t sub_10005646C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  char v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char *v55;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t KeyPath;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  int *v77;
  _QWORD v78[2];
  unsigned __int8 v79;
  uint64_t v80;
  uint64_t v81;
  unsigned __int8 v82;

  v2 = v1;
  v62 = a1;
  v3 = type metadata accessor for TFSymbol(0);
  v4 = __chkstk_darwin(v3);
  v61 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v60 = (char *)&v57 - v6;
  v73 = sub_10000498C(&qword_10009AAC8);
  __chkstk_darwin(v73);
  v76 = (uint64_t *)((char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = sub_10000498C((uint64_t *)&unk_10009AAD0);
  __chkstk_darwin(v8);
  v71 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = sub_10000498C(&qword_10009A278);
  __chkstk_darwin(v72);
  v11 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10000498C(&qword_10009AAE0);
  __chkstk_darwin(v12);
  v75 = (uint64_t)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = sub_10000498C(&qword_10009AAE8);
  __chkstk_darwin(v74);
  v59 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = sub_10000498C(&qword_10009AAB8);
  v15 = __chkstk_darwin(v57);
  v58 = (char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = static HorizontalAlignment.center.getter(v15);
  v68 = static VerticalAlignment.firstTextBaseline.getter();
  v70 = v1;
  sub_100056AC4(v1, (uint64_t)v78);
  v17 = v78[0];
  v18 = v78[1];
  v64 = v79;
  v65 = v81;
  v66 = v80;
  v67 = v82;
  v19 = v1[5];
  KeyPath = swift_getKeyPath(&unk_100076228);
  swift_retain();
  v20 = sub_100056C50();
  v77 = (int *)v3;
  v21 = (char *)v2 + *(int *)(v3 + 36);
  v22 = type metadata accessor for SymbolRenderingMode(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = (uint64_t)v71;
  (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v71, v21, v22);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v23 + 56))(v24, 0, 1, v22);
  v25 = swift_getKeyPath(&unk_100076258);
  v26 = v76;
  sub_10000928C(v24, (uint64_t)v76 + *(int *)(v73 + 28), (uint64_t *)&unk_10009AAD0);
  *v26 = v25;
  sub_10000928C((uint64_t)v26, (uint64_t)&v11[*(int *)(v72 + 36)], &qword_10009AAC8);
  v27 = v68;
  *(_QWORD *)v11 = v69;
  *((_QWORD *)v11 + 1) = v27;
  *((_QWORD *)v11 + 2) = v17;
  *((_QWORD *)v11 + 3) = v18;
  LOBYTE(v22) = v64;
  v11[32] = v64;
  v29 = v65;
  v28 = v66;
  *((_QWORD *)v11 + 5) = v66;
  *((_QWORD *)v11 + 6) = v29;
  v11[56] = v67;
  *((_QWORD *)v11 + 8) = KeyPath;
  *((_QWORD *)v11 + 9) = v19;
  *((_QWORD *)v11 + 10) = v20;
  sub_10000A91C(v17, v18, v22);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain(v28);
  sub_1000092D0((uint64_t)v76, &qword_10009AAC8);
  sub_1000092D0(v24, (uint64_t *)&unk_10009AAD0);
  sub_100008F20(v17, v18, v22);
  swift_release();
  v30 = (uint64_t)v70;
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease(v28);
  v31 = v77[12];
  if (*(_BYTE *)(v30 + v77[11]))
    v32 = INFINITY;
  else
    v32 = 0.0;
  v33 = *(_BYTE *)(v30 + v77[11]) ^ 1;
  v34 = *(_QWORD *)(v30 + v31);
  v35 = *(_BYTE *)(v30 + v31 + 8);
  sub_10001D97C(v34, v35);
  v36 = sub_100012138(v34, v35);
  v37 = sub_10001D9D8(v34, v35);
  if ((v36 & 1) != 0)
    v38 = static Alignment.leading.getter(v37);
  else
    v38 = static Alignment.center.getter(v37);
  v40 = v62;
  v41 = (uint64_t)v61;
  v42 = (uint64_t)v60;
  v43 = (uint64_t)v59;
  v44 = (uint64_t)v58;
  v45 = v75;
  sub_10003190C(0.0, 1, 0.0, 1, v32, v33, 0.0, 1, v75, 0.0, 1, INFINITY, 0, v38, v39);
  sub_1000092D0((uint64_t)v11, &qword_10009A278);
  sub_10000928C(v45, v43, &qword_10009AAE0);
  *(_BYTE *)(v43 + *(int *)(v74 + 36)) = 0;
  sub_1000092D0(v45, &qword_10009AAE0);
  v46 = *(unsigned __int8 *)(v30 + v77[10]);
  sub_10000920C(v30, v42, type metadata accessor for TFSymbol);
  if (v46 != 1)
  {
    sub_100009250(v42, type metadata accessor for TFSymbol);
    sub_10000920C(v30, v41, type metadata accessor for TFSymbol);
    v48 = v57;
    goto LABEL_11;
  }
  v47 = *(_BYTE *)(v42 + 32);
  sub_100009250(v42, type metadata accessor for TFSymbol);
  sub_10000920C(v30, v41, type metadata accessor for TFSymbol);
  v48 = v57;
  if ((v47 & 1) == 0)
  {
LABEL_11:
    sub_100009250(v41, type metadata accessor for TFSymbol);
    v53 = 1;
    goto LABEL_12;
  }
  v49 = v41 + v77[12];
  v50 = *(_QWORD *)v49;
  v51 = *(_BYTE *)(v49 + 8);
  sub_10001D97C(*(_QWORD *)v49, v51);
  v52 = sub_100012138(v50, v51);
  sub_10001D9D8(v50, v51);
  sub_100009250(v41, type metadata accessor for TFSymbol);
  v53 = v52 & 1;
LABEL_12:
  v54 = *(_BYTE *)(v30 + 32);
  sub_10000928C(v43, v44, &qword_10009AAE8);
  v55 = (char *)(v44 + *(int *)(v48 + 36));
  *v55 = v53;
  v55[1] = v54;
  v55[2] = 0;
  sub_1000092D0(v43, &qword_10009AAE8);
  return sub_10000930C(v44, v40, &qword_10009AAB8);
}

uint64_t sub_100056AC4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;

  v4 = LocalizedStringKey.init(stringLiteral:)(72, 0xE100000000000000);
  v8 = Text.init(_:tableName:bundle:comment:)(v4, v6, v5 & 1, v7, 0, 0, 0, 0, 0, 256);
  v10 = v9;
  v12 = v11;
  v14 = v13;
  v15 = a1[3];
  if (v15)
  {
    v16 = a1[2];
    v17 = qword_100098270;
    swift_bridgeObjectRetain(v15);
    if (v17 != -1)
      swift_once(&qword_100098270, sub_100052AFC);
    v18 = qword_10009A290;
    v19 = (id)qword_10009A290;
    v27 = Image.init(_:bundle:)(v16, v15, v18);
    v28 = 0;
  }
  else
  {
    v20 = a1[1];
    if (v20)
    {
      v21 = *a1;
      v22 = v20;
    }
    else
    {
      v21 = 0;
      v22 = 0xE000000000000000;
    }
    swift_bridgeObjectRetain(v20);
    v27 = Image.init(systemName:)(v21, v22);
    v28 = 1;
  }
  _ConditionalContent<>.init(storage:)(&v27, &type metadata for Image, &type metadata for Image, &protocol witness table for Image, &protocol witness table for Image);
  v23 = v29;
  v24 = v30;
  v25 = v12 & 1;
  *(_QWORD *)a2 = v8;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = v25;
  *(_QWORD *)(a2 + 24) = v14;
  *(_QWORD *)(a2 + 32) = v23;
  *(_BYTE *)(a2 + 40) = v24;
  sub_10000A91C(v8, v10, v25);
  swift_bridgeObjectRetain(v14);
  sub_100008F20(v8, v10, v25);
  return swift_bridgeObjectRelease(v14);
}

uint64_t sub_100056C50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char *v4;
  void *v5;
  void *v6;
  int v7;
  char *v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  float v22;
  uint64_t v23;
  uint64_t v25;
  unint64_t v26;

  v1 = type metadata accessor for TFSymbol(0);
  __chkstk_darwin(v1);
  v3 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = (char *)&v25 - v3;
  if (*(_QWORD *)(v0 + 48))
  {
    v26 = *(_QWORD *)(v0 + 48);
    swift_retain();
    v5 = &type metadata for AnyShapeStyle;
    v6 = &protocol witness table for AnyShapeStyle;
    return AnyShapeStyle.init<A>(_:)(&v26, v5, v6);
  }
  v7 = *(unsigned __int8 *)(v0 + 32);
  sub_10000920C(v0, (uint64_t)&v25 - v3, type metadata accessor for TFSymbol);
  if (v7 == 1)
  {
    v8 = &v4[*(int *)(v1 + 48)];
    v9 = *(_QWORD *)v8;
    v10 = v8[8];
    sub_10001D97C(*(_QWORD *)v8, v10);
    v11 = sub_100012138(v9, v10);
    sub_10001D9D8(v9, v10);
    v12 = sub_100009250((uint64_t)v4, type metadata accessor for TFSymbol);
    if ((v11 & 1) == 0)
    {
      v13 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
      v14 = objc_msgSend(v13, "userInterfaceIdiom");

      if (v14 == (id)6)
        v16 = static Color.black.getter();
      else
        v16 = static Color.white.getter(v15);
      v26 = v16;
      v5 = &type metadata for Color;
      v6 = &protocol witness table for Color;
      return AnyShapeStyle.init<A>(_:)(&v26, v5, v6);
    }
  }
  else
  {
    v12 = sub_100009250((uint64_t)v4, type metadata accessor for TFSymbol);
  }
  v17 = static HierarchicalShapeStyle.primary.getter(v12);
  v18 = v0 + *(int *)(v1 + 52);
  v19 = *(_QWORD *)v18;
  v20 = *(_BYTE *)(v18 + 8);
  sub_10001D97C(*(_QWORD *)v18, v20);
  v21 = sub_100011B90(v19, v20);
  sub_10001D9D8(v19, v20);
  v22 = 0.5;
  if ((v21 & 1) != 0)
    v22 = 1.0;
  v26 = __PAIR64__(LODWORD(v22), v17);
  v23 = sub_10000498C(&qword_10009AAF0);
  v6 = (void *)sub_10000966C(&qword_10009AAF8, &qword_10009AAF0, (uint64_t)&protocol conformance descriptor for _OpacityShapeStyle<A>);
  v5 = (void *)v23;
  return AnyShapeStyle.init<A>(_:)(&v26, v5, v6);
}

void sub_100056E54()
{
  qword_10009B6C8 = 0x4024000000000000;
}

uint64_t sub_100056E64@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  __int128 v16;
  _OWORD v18[3];

  v2 = (int *)type metadata accessor for TFSymbol(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Font.callout.getter(v3);
  v6 = Font.bold()();
  v7 = swift_release();
  LODWORD(v18[0]) = static HierarchicalShapeStyle.secondary.getter(v7);
  v8 = AnyShapeStyle.init<A>(_:)(v18, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
  static SymbolRenderingMode.hierarchical.getter(v8);
  *(_QWORD *)v5 = 0xD000000000000017;
  *((_QWORD *)v5 + 1) = 0x8000000100078320;
  *((_QWORD *)v5 + 2) = 0;
  *((_QWORD *)v5 + 3) = 0;
  v5[32] = 0;
  *((_QWORD *)v5 + 5) = v6;
  *((_QWORD *)v5 + 6) = v8;
  v5[v2[10]] = 1;
  v5[v2[11]] = 1;
  v9 = &v5[v2[12]];
  *(_QWORD *)v9 = swift_getKeyPath(&unk_100076028);
  v9[8] = 0;
  v10 = &v5[v2[13]];
  KeyPath = swift_getKeyPath(&unk_1000760D8);
  *(_QWORD *)v10 = KeyPath;
  v10[8] = 0;
  if (qword_100098278 != -1)
    KeyPath = swift_once(&qword_100098278, sub_100056E54);
  v12 = qword_10009B6C8;
  v13 = static Alignment.center.getter(KeyPath);
  _FrameLayout.init(width:height:alignment:)(v18, v12, 0, 0, 1, v13, v14);
  sub_10000920C((uint64_t)v5, a1, type metadata accessor for TFSymbol);
  v15 = (_OWORD *)(a1 + *(int *)(sub_10000498C(&qword_10009AA30) + 36));
  v16 = v18[1];
  *v15 = v18[0];
  v15[1] = v16;
  v15[2] = v18[2];
  return sub_100009250((uint64_t)v5, type metadata accessor for TFSymbol);
}

BOOL sub_100057028(char a1, char a2)
{
  return a1 == a2;
}

void sub_100057038(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int sub_10005705C(unsigned __int8 a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

uint64_t sub_1000570A0@<X0>(uint64_t a1@<X8>)
{
  return sub_10005639C(&qword_10009AAB8, (void (*)(uint64_t))sub_10005646C, &qword_10009AAC0, a1);
}

BOOL sub_1000570BC(char *a1, char *a2)
{
  return sub_100057028(*a1, *a2);
}

Swift::Int sub_1000570C8()
{
  unsigned __int8 *v0;

  return sub_10005705C(*v0);
}

void sub_1000570D0(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_100057038(a1, *v1);
}

Swift::Int sub_1000570D8(uint64_t a1)
{
  unsigned __int8 *v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  sub_100057038((uint64_t)v3, *v1);
  return Hasher._finalize()();
}

uint64_t sub_100057114@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  ValueMetadata *v3;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v5;
  uint64_t v6;
  uint64_t OpaqueTypeConformance2;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  void (*v38)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t WitnessTable;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  void *v65;
  ValueMetadata *v66;
  uint64_t v67;
  uint64_t v68;
  ValueMetadata *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v47 = a2;
  v46 = a1;
  v3 = *(ValueMetadata **)(a1 + 24);
  v68 = *(_QWORD *)(a1 + 16);
  v2 = v68;
  v69 = v3;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v68, &opaque type descriptor for <<opaque return type of View.onTapGesture(count:perform:)>>, 0);
  v5 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v6 = type metadata accessor for ModifiedContent(255, OpaqueTypeMetadata2, v5);
  v44 = type metadata accessor for HighlightHoverEffect(255);
  v68 = v2;
  v69 = v3;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v68, &opaque type descriptor for <<opaque return type of View.onTapGesture(count:perform:)>>, 1);
  v8 = sub_100007D90(&qword_1000987F0, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  v72 = OpaqueTypeConformance2;
  v73 = v8;
  v45 = v6;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
  v42 = sub_100007D90(&qword_10009A860, (uint64_t (*)(uint64_t))&type metadata accessor for HighlightHoverEffect, (uint64_t)&protocol conformance descriptor for HighlightHoverEffect);
  v68 = v6;
  v69 = (ValueMetadata *)v44;
  v70 = WitnessTable;
  v71 = v42;
  v41 = swift_getOpaqueTypeMetadata2(255, &v68, &opaque type descriptor for <<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>, 0);
  v9 = sub_100004660(&qword_10009A868);
  v10 = type metadata accessor for ModifiedContent(255, v2, v9);
  v11 = type metadata accessor for ModifiedContent(255, v10, &type metadata for _FlexFrameLayout);
  v12 = type metadata accessor for ModifiedContent(255, v11, &type metadata for _PaddingLayout);
  v13 = type metadata accessor for ModifiedContent(255, v12, &type metadata for TFComponentBackgroundModifier);
  v14 = type metadata accessor for ModifiedContent(255, v13, &type metadata for TFFrameTracker);
  v15 = sub_100004660(&qword_10009A870);
  v16 = type metadata accessor for ModifiedContent(255, v14, v15);
  v17 = type metadata accessor for ModifiedContent(255, v16, &type metadata for _FrameLayout);
  v18 = sub_100004660(&qword_10009A878);
  v19 = type metadata accessor for ModifiedContent(255, v17, v18);
  v66 = v3;
  v67 = sub_10000966C((unint64_t *)&unk_10009A880, &qword_10009A868, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
  v64 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v10);
  v65 = &protocol witness table for _FlexFrameLayout;
  v62 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v11);
  v63 = &protocol witness table for _PaddingLayout;
  v60 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v12);
  v61 = sub_10004F174();
  v58 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v13);
  v59 = sub_100051174();
  v56 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v14);
  v57 = sub_10000966C(&qword_100099F80, &qword_10009A870, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
  v54 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v16);
  v55 = &protocol witness table for _FrameLayout;
  v52 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v17);
  v53 = sub_10000966C(&qword_10009A8A0, &qword_10009A878, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v19);
  v20 = type metadata accessor for Button(255, v19);
  v21 = swift_getWitnessTable(&protocol conformance descriptor for Button<A>, v20);
  v22 = sub_100061C3C();
  v68 = v20;
  v69 = &type metadata for TFPressedButtonStyle;
  v70 = v21;
  v71 = v22;
  swift_getOpaqueTypeMetadata2(255, &v68, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 0);
  v23 = type metadata accessor for _ConditionalContent(0);
  v41 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v25 = (char *)&v40 - v24;
  v26 = type metadata accessor for ModifiedContent(0, v23, &type metadata for ComponentItem);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = __chkstk_darwin(v26);
  v30 = (char *)&v40 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v32 = (char *)&v40 - v31;
  sub_1000576C4(v46, (uint64_t)v25);
  v68 = v45;
  v69 = (ValueMetadata *)v44;
  v70 = WitnessTable;
  v71 = v42;
  v33 = swift_getOpaqueTypeConformance2(&v68, &opaque type descriptor for <<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>, 1);
  v68 = v20;
  v69 = &type metadata for TFPressedButtonStyle;
  v70 = v21;
  v71 = v22;
  v34 = swift_getOpaqueTypeConformance2(&v68, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
  v50 = v33;
  v51 = v34;
  v35 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v23);
  sub_100053BDC(v23, v35);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v25, v23);
  v36 = sub_1000619F0();
  v48 = v35;
  v49 = v36;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v26);
  v37 = *(void (**)(char *, char *, uint64_t))(v27 + 16);
  v37(v32, v30, v26);
  v38 = *(void (**)(char *, uint64_t))(v27 + 8);
  v38(v30, v26);
  v37(v47, v32, v26);
  return ((uint64_t (*)(char *, uint64_t))v38)(v32, v26);
}

uint64_t sub_1000576C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  ValueMetadata *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t OpaqueTypeConformance2;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  id v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t, uint64_t);
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  ValueMetadata *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  id v77;
  id v78;
  uint64_t v79;
  ValueMetadata *v80;
  unint64_t v81;
  uint64_t v82;
  char *v83;
  void (*v84)(char *, uint64_t, uint64_t);
  char *v85;
  uint64_t v86;
  void (*v87)(uint64_t, uint64_t);
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  ValueMetadata *v99;
  uint64_t v100;
  char *v101;
  uint64_t KeyPath;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(char *, uint64_t, uint64_t);
  char *v107;
  uint64_t v108;
  void (*v109)(uint64_t, uint64_t);
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v117;
  void (*v118)(uint64_t, char *, uint64_t);
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  id v130;
  char *v131;
  char *v132;
  char *v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  ValueMetadata *v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  ValueMetadata *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  ValueMetadata *v158;
  uint64_t v159;
  unint64_t v160;
  char v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  void *v175;
  uint64_t WitnessTable;
  void *v177;
  ValueMetadata *v178;
  uint64_t v179;

  v147 = a2;
  v2 = *(_QWORD *)(a1 + 16);
  v148 = a1;
  v153 = v2;
  v4 = sub_100004660(&qword_10009A868);
  v5 = type metadata accessor for ModifiedContent(255, v2, v4);
  v6 = type metadata accessor for ModifiedContent(255, v5, &type metadata for _FlexFrameLayout);
  v7 = type metadata accessor for ModifiedContent(255, v6, &type metadata for _PaddingLayout);
  v8 = type metadata accessor for ModifiedContent(255, v7, &type metadata for TFComponentBackgroundModifier);
  v9 = type metadata accessor for ModifiedContent(255, v8, &type metadata for TFFrameTracker);
  v10 = sub_100004660(&qword_10009A870);
  v11 = type metadata accessor for ModifiedContent(255, v9, v10);
  v12 = type metadata accessor for ModifiedContent(255, v11, &type metadata for _FrameLayout);
  v13 = sub_100004660(&qword_10009A878);
  v14 = type metadata accessor for ModifiedContent(255, v12, v13);
  v15 = *(ValueMetadata **)(a1 + 24);
  v178 = v15;
  v179 = sub_10000966C((unint64_t *)&unk_10009A880, &qword_10009A868, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v5);
  v177 = &protocol witness table for _FlexFrameLayout;
  v174 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
  v175 = &protocol witness table for _PaddingLayout;
  v172 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v7);
  v173 = sub_10004F174();
  v170 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
  v171 = sub_100051174();
  v168 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v9);
  v169 = sub_10000966C(&qword_100099F80, &qword_10009A870, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
  v166 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v11);
  v167 = &protocol witness table for _FrameLayout;
  v164 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v12);
  v165 = sub_10000966C(&qword_10009A8A0, &qword_10009A878, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
  v135 = (char *)v14;
  v127 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v14);
  v16 = type metadata accessor for Button(0, v14);
  v130 = *(id *)(v16 - 8);
  __chkstk_darwin(v16);
  v129 = (char *)&v117 - v17;
  v18 = swift_getWitnessTable(&protocol conformance descriptor for Button<A>, v16);
  v19 = sub_100061C3C();
  v146 = v16;
  v157 = v16;
  v158 = &type metadata for TFPressedButtonStyle;
  v145 = v18;
  v159 = v18;
  v160 = v19;
  v144 = v19;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v157, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 0);
  v128 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  v21 = __chkstk_darwin(OpaqueTypeMetadata2);
  v133 = (char *)&v117 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v132 = (char *)&v117 - v23;
  v24 = type metadata accessor for HighlightHoverEffect(0);
  v134 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v131 = (char *)&v117 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = type metadata accessor for AccessibilityActionKind(0);
  v125 = *(_QWORD *)(v126 - 8);
  v26 = __chkstk_darwin(v126);
  v124 = (char *)&v117 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = *(_QWORD *)(v148 - 8);
  v29 = *(_QWORD *)(v28 + 64);
  v30 = __chkstk_darwin(v26);
  v137 = (char *)&v117 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = v153;
  v136 = *(_QWORD *)(v153 - 8);
  __chkstk_darwin(v30);
  v33 = (char *)&v117 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v157 = v31;
  v158 = v15;
  v34 = swift_getOpaqueTypeMetadata2(0, &v157, &opaque type descriptor for <<opaque return type of View.onTapGesture(count:perform:)>>, 0);
  v120 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v119 = (char *)&v117 - v35;
  v36 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v121 = v34;
  v37 = type metadata accessor for ModifiedContent(0, v34, v36);
  v123 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v122 = (char *)&v117 - v38;
  v157 = v31;
  v141 = v15;
  v158 = v15;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v157, &opaque type descriptor for <<opaque return type of View.onTapGesture(count:perform:)>>, 1);
  v40 = sub_100007D90(&qword_1000987F0, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  v162 = OpaqueTypeConformance2;
  v163 = v40;
  v41 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v37);
  v42 = sub_100007D90(&qword_10009A860, (uint64_t (*)(uint64_t))&type metadata accessor for HighlightHoverEffect, (uint64_t)&protocol conformance descriptor for HighlightHoverEffect);
  v152 = v37;
  v157 = v37;
  v154 = (ValueMetadata *)v24;
  v158 = (ValueMetadata *)v24;
  v151 = v41;
  v159 = v41;
  v160 = v42;
  v150 = v42;
  v43 = swift_getOpaqueTypeMetadata2(0, &v157, &opaque type descriptor for <<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>, 0);
  v44 = *(char **)(v43 - 8);
  v45 = __chkstk_darwin(v43);
  v47 = (char *)&v117 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v45);
  v49 = (char *)&v117 - v48;
  v138 = v50;
  v143 = OpaqueTypeMetadata2;
  v140 = type metadata accessor for _ConditionalContent(0);
  v139 = *(_QWORD *)(v140 - 8);
  __chkstk_darwin(v140);
  v149 = (char *)&v117 - v51;
  v52 = (void *)objc_opt_self(UIDevice);
  v53 = objc_msgSend(v52, "currentDevice");
  v54 = objc_msgSend(v53, "userInterfaceIdiom");

  if (v54 == (id)6)
  {
    v135 = v49;
    v55 = v148;
    v56 = *(int *)(v148 + 44);
    v132 = v47;
    v57 = v142;
    v58 = v142 + v56;
    v59 = *(void (**)(char *, uint64_t, uint64_t))(v136 + 16);
    v133 = v44;
    v60 = v153;
    v59(v33, v58, v153);
    v128 = *(_QWORD *)(v28 + 16);
    v61 = v137;
    ((void (*)(char *, uint64_t, uint64_t))v128)(v137, v57, v55);
    v62 = *(unsigned __int8 *)(v28 + 80);
    v130 = v52;
    v63 = (v62 + 32) & ~v62;
    v64 = v63 + v29;
    v127 = v62 | 7;
    v65 = swift_allocObject(&unk_100090660, v63 + v29, v62 | 7);
    v129 = (char *)OpaqueTypeConformance2;
    v66 = v141;
    *(_QWORD *)(v65 + 16) = v60;
    *(_QWORD *)(v65 + 24) = v66;
    v118 = *(void (**)(uint64_t, char *, uint64_t))(v28 + 32);
    v118(v65 + v63, v61, v55);
    v67 = v119;
    View.onTapGesture(count:perform:)(1, sub_100061C84, v65, v60, v66);
    swift_release();
    (*(void (**)(char *, uint64_t))(v136 + 8))(v33, v60);
    ((void (*)(char *, uint64_t, uint64_t))v128)(v61, v57, v55);
    v68 = swift_allocObject(&unk_100090688, v64, v127);
    *(_QWORD *)(v68 + 16) = v60;
    *(_QWORD *)(v68 + 24) = v66;
    v69 = v151;
    v70 = v152;
    v71 = ((uint64_t (*)(uint64_t, char *, uint64_t))v118)(v68 + v63, v61, v55);
    v72 = v124;
    static AccessibilityActionKind.default.getter(v71);
    v73 = v122;
    v74 = v121;
    View.accessibilityAction(_:_:)(v72, sub_100061C84, v68, v121, v129);
    swift_release();
    (*(void (**)(char *, uint64_t))(v125 + 8))(v72, v126);
    v75 = (*(uint64_t (**)(char *, uint64_t))(v120 + 8))(v67, v74);
    v76 = v131;
    static CustomHoverEffect<>.highlight.getter(v75);
    v77 = objc_msgSend(v130, "currentDevice");
    v78 = objc_msgSend(v77, "userInterfaceIdiom");

    v79 = (uint64_t)v132;
    v80 = v154;
    v81 = v150;
    View.hoverEffect<A>(_:isEnabled:)(v76, v78 == (id)6, v70, v154, v69, v150);
    (*(void (**)(char *, ValueMetadata *))(v134 + 8))(v76, v80);
    (*(void (**)(char *, uint64_t))(v123 + 8))(v73, v70);
    v157 = v70;
    v158 = v80;
    v159 = v69;
    v160 = v81;
    v82 = swift_getOpaqueTypeConformance2(&v157, &opaque type descriptor for <<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>, 1);
    v83 = v133;
    v84 = (void (*)(char *, uint64_t, uint64_t))*((_QWORD *)v133 + 2);
    v85 = v135;
    v86 = v138;
    v84(v135, v79, v138);
    v87 = (void (*)(uint64_t, uint64_t))*((_QWORD *)v83 + 1);
    v87(v79, v86);
    v84((char *)v79, (uint64_t)v85, v86);
    v88 = v146;
    v157 = v146;
    v158 = &type metadata for TFPressedButtonStyle;
    v89 = v145;
    v90 = v144;
    v159 = v145;
    v160 = v144;
    v91 = swift_getOpaqueTypeConformance2(&v157, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    sub_100052974(v79, v86, v143, v82, v91);
    v87(v79, v86);
    v87((uint64_t)v85, v86);
  }
  else
  {
    v92 = v137;
    v93 = v142;
    v94 = v148;
    (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v137, v142, v148);
    v95 = *(unsigned __int8 *)(v28 + 80);
    v96 = (v95 + 32) & ~v95;
    v97 = swift_allocObject(&unk_100090638, v96 + v29, v95 | 7);
    v98 = v153;
    v99 = v141;
    *(_QWORD *)(v97 + 16) = v153;
    *(_QWORD *)(v97 + 24) = v99;
    v100 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v28 + 32))(v97 + v96, v92, v94);
    __chkstk_darwin(v100);
    *(&v117 - 4) = v98;
    *(&v117 - 3) = (uint64_t)v99;
    *(&v117 - 2) = v93;
    v101 = v129;
    Button.init(action:label:)(sub_100061C84, v97, sub_100061C88, &v117 - 6, v135, v127);
    KeyPath = swift_getKeyPath(&unk_100076000);
    v158 = 0;
    v157 = 0;
    LOBYTE(v159) = 0;
    v160 = KeyPath;
    v161 = 0;
    v103 = (uint64_t)v133;
    v88 = v146;
    v89 = v145;
    v90 = v144;
    View.buttonStyle<A>(_:)(&v157, v146, &type metadata for TFPressedButtonStyle, v145, v144);
    swift_release();
    (*((void (**)(char *, uint64_t))v130 + 1))(v101, v88);
    v157 = v88;
    v158 = &type metadata for TFPressedButtonStyle;
    v159 = v89;
    v160 = v90;
    v104 = swift_getOpaqueTypeConformance2(&v157, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    v105 = v128;
    v106 = *(void (**)(char *, uint64_t, uint64_t))(v128 + 16);
    v107 = v132;
    v108 = v143;
    v106(v132, v103, v143);
    v109 = *(void (**)(uint64_t, uint64_t))(v105 + 8);
    v109(v103, v108);
    v106((char *)v103, (uint64_t)v107, v108);
    v157 = v152;
    v158 = v154;
    v159 = v151;
    v160 = v150;
    v110 = swift_getOpaqueTypeConformance2(&v157, &opaque type descriptor for <<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>, 1);
    sub_100052A38(v103, v138, v108, v110, v104);
    v109(v103, v108);
    v109((uint64_t)v107, v108);
  }
  v157 = v152;
  v158 = v154;
  v159 = v151;
  v160 = v150;
  v111 = swift_getOpaqueTypeConformance2(&v157, &opaque type descriptor for <<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>, 1);
  v157 = v88;
  v158 = &type metadata for TFPressedButtonStyle;
  v159 = v89;
  v160 = v90;
  v112 = swift_getOpaqueTypeConformance2(&v157, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
  v155 = v111;
  v156 = v112;
  v113 = v140;
  swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v140);
  v114 = v139;
  v115 = v149;
  (*(void (**)(uint64_t, char *, uint64_t))(v139 + 16))(v147, v149, v113);
  return (*(uint64_t (**)(char *, uint64_t))(v114 + 8))(v115, v113);
}

uint64_t sub_1000584E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  void (*v32)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t WitnessTable;
  void *v52;
  uint64_t v53;
  uint64_t v54;

  v34 = a1;
  v38 = a4;
  v6 = sub_100004660(&qword_10009A868);
  v7 = type metadata accessor for ModifiedContent(255, a2, v6);
  v8 = type metadata accessor for ModifiedContent(255, v7, &type metadata for _FlexFrameLayout);
  v9 = type metadata accessor for ModifiedContent(255, v8, &type metadata for _PaddingLayout);
  v10 = type metadata accessor for ModifiedContent(255, v9, &type metadata for TFComponentBackgroundModifier);
  v35 = type metadata accessor for ModifiedContent(255, v10, &type metadata for TFFrameTracker);
  v11 = sub_100004660(&qword_10009A870);
  v37 = type metadata accessor for ModifiedContent(255, v35, v11);
  v36 = type metadata accessor for ModifiedContent(255, v37, &type metadata for _FrameLayout);
  v12 = sub_100004660(&qword_10009A878);
  v13 = type metadata accessor for ModifiedContent(0, v36, v12);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v34 - v18;
  v21 = type metadata accessor for TFButton(0, a2, a3, v20);
  sub_1000587E0(v21, (uint64_t)v17);
  v22 = sub_10000966C((unint64_t *)&unk_10009A880, &qword_10009A868, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
  v53 = a3;
  v54 = v22;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v7);
  v52 = &protocol witness table for _FlexFrameLayout;
  v49 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
  v50 = &protocol witness table for _PaddingLayout;
  v23 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v9);
  v24 = sub_10004F174();
  v47 = v23;
  v48 = v24;
  v25 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v10);
  v26 = sub_100051174();
  v45 = v25;
  v46 = v26;
  v27 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v35);
  v28 = sub_10000966C(&qword_100099F80, &qword_10009A870, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
  v43 = v27;
  v44 = v28;
  v41 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v37);
  v42 = &protocol witness table for _FrameLayout;
  v29 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v36);
  v30 = sub_10000966C(&qword_10009A8A0, &qword_10009A878, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
  v39 = v29;
  v40 = v30;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v13);
  v31 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  v31(v19, v17, v13);
  v32 = *(void (**)(char *, uint64_t))(v14 + 8);
  v32(v17, v13);
  v31(v38, v19, v13);
  return ((uint64_t (*)(char *, uint64_t))v32)(v19, v13);
}

uint64_t sub_1000587E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  void (*v29)(char *, _BYTE *, uint64_t);
  id v30;
  id v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t WitnessTable;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  _BYTE *v49;
  uint64_t v50;
  char v51;
  _BYTE *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  double v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  _BYTE *v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  unsigned __int8 v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;

  v107 = a2;
  v104 = *(_QWORD *)(a1 - 8);
  v4 = __chkstk_darwin(a1);
  v98 = v5;
  v101 = (char *)&v90 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v4);
  v9 = (char *)&v90 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100004660(&qword_10009A868);
  v11 = type metadata accessor for ModifiedContent(0, v6, v10);
  v90 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v108 = (char *)&v90 - v12;
  v13 = type metadata accessor for ModifiedContent(0, v11, &type metadata for _FlexFrameLayout);
  v91 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v109 = (char *)&v90 - v14;
  v15 = type metadata accessor for ModifiedContent(0, v13, &type metadata for _PaddingLayout);
  v93 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v92 = (char *)&v90 - v16;
  v17 = type metadata accessor for ModifiedContent(0, v15, &type metadata for TFComponentBackgroundModifier);
  v95 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v94 = (char *)&v90 - v18;
  v96 = v19;
  v20 = type metadata accessor for ModifiedContent(255, v19, &type metadata for TFFrameTracker);
  v21 = sub_100004660(&qword_10009A870);
  v97 = v20;
  v22 = type metadata accessor for ModifiedContent(0, v20, v21);
  v100 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v99 = (uint64_t)&v90 - v23;
  v102 = v24;
  v106 = type metadata accessor for ModifiedContent(0, v24, &type metadata for _FrameLayout);
  v105 = *(_QWORD *)(v106 - 8);
  __chkstk_darwin(v106);
  v103 = (char *)&v90 - v25;
  v26 = *(int *)(a1 + 44);
  v111 = v2;
  v27 = &v2[v26];
  v28 = v7;
  v29 = *(void (**)(char *, _BYTE *, uint64_t))(v7 + 16);
  v110 = v6;
  v29(v9, v27, v6);
  v30 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v31 = objc_msgSend(v30, "userInterfaceIdiom");

  if (v31 == (id)6)
  {
    LODWORD(v118) = static HierarchicalShapeStyle.primary.getter(v32);
    v33 = &type metadata for HierarchicalShapeStyle;
    v34 = &protocol witness table for HierarchicalShapeStyle;
  }
  else
  {
    v118 = static Color.primary.getter(v32);
    v33 = &type metadata for Color;
    v34 = &protocol witness table for Color;
  }
  v118 = AnyShapeStyle.init<A>(_:)(&v118, v33, v34);
  v35 = *(_QWORD *)(a1 + 24);
  v36 = v110;
  View.foregroundStyle<A>(_:)(&v118, v110, &type metadata for AnyShapeStyle, v35, &protocol witness table for AnyShapeStyle);
  swift_release();
  v37 = (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v9, v36);
  if (*v111 == 1)
    v38 = static Alignment.leading.getter(v37);
  else
    v38 = static Alignment.center.getter(v37);
  v40 = v38;
  v41 = v39;
  v42 = sub_10000966C((unint64_t *)&unk_10009A880, &qword_10009A868, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
  v129 = v35;
  v130 = v42;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v11);
  v89 = v40;
  v44 = v108;
  View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(0, 1, 0, 1, 0x7FF0000000000000, 0, 0, 1, 0, 1, 0x7FF0000000000000, 0, v89, v41, v11, WitnessTable);
  v45 = (*(uint64_t (**)(char *, uint64_t))(v90 + 8))(v44, v11);
  v46 = static Edge.Set.horizontal.getter(v45);
  v47 = 0;
  v48 = v111;
  if (v111[2] == 1)
  {
    v49 = &v111[*(int *)(a1 + 60)];
    v50 = *(_QWORD *)v49;
    v51 = v49[8];
    sub_10001D97C(*(_QWORD *)v49, v51);
    sub_1000117FC(v50, v51);
    sub_10001D9D8(v50, v51);
    v47 = 0x4028000000000000;
  }
  v127 = WitnessTable;
  v128 = &protocol witness table for _FlexFrameLayout;
  v52 = v48;
  v53 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v13);
  v54 = v92;
  v55 = v46;
  v56 = v109;
  View.padding(_:_:)(v55, v47, 0, v13, v53);
  (*(void (**)(char *, uint64_t))(v91 + 8))(v56, v13);
  LOBYTE(v56) = v52[1];
  v125 = v53;
  v126 = &protocol witness table for _PaddingLayout;
  v57 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v15);
  LOBYTE(v118) = (_BYTE)v56;
  *(_WORD *)((char *)&v118 + 1) = 0;
  v58 = v94;
  View.modifier<A>(_:)(&v118, v15, &type metadata for TFComponentBackgroundModifier, v57);
  (*(void (**)(char *, uint64_t))(v93 + 8))(v54, v15);
  v59 = v104;
  v60 = v101;
  (*(void (**)(char *, _BYTE *, uint64_t))(v104 + 16))(v101, v52, a1);
  v61 = *(unsigned __int8 *)(v59 + 80);
  v62 = (v61 + 32) & ~v61;
  v63 = swift_allocObject(&unk_1000906B0, v62 + v98, v61 | 7);
  *(_QWORD *)(v63 + 16) = v110;
  *(_QWORD *)(v63 + 24) = v35;
  (*(void (**)(uint64_t, char *, uint64_t))(v59 + 32))(v63 + v62, v60, a1);
  v64 = sub_10004F174();
  v123 = v57;
  v124 = v64;
  v65 = v96;
  v66 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v96);
  v67 = v99;
  sub_100066738(2003134806, 0xE400000000000000, (uint64_t)sub_100061DBC, v63, v65, v66, v99);
  swift_release();
  (*(void (**)(char *, uint64_t))(v95 + 8))(v58, v65);
  v68 = &v52[*(int *)(a1 + 52)];
  v69 = *(_QWORD *)v68;
  v70 = v68[8];
  v71 = *((_QWORD *)v68 + 2);
  v118 = v69;
  v119 = v70;
  v120 = v71;
  v72 = sub_10000498C(&qword_10009A8B0);
  v73 = State.wrappedValue.getter(&v121, v72);
  v74 = v121;
  v75 = v122;
  v76 = static Alignment.center.getter(v73);
  v78 = v77;
  v79 = sub_100051174();
  v116 = v66;
  v117 = v79;
  v80 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v97);
  v81 = sub_10000966C(&qword_100099F80, &qword_10009A870, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
  v114 = v80;
  v115 = v81;
  v82 = v102;
  v83 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v102);
  v84 = v103;
  View.frame(width:height:alignment:)(v74, v75, 0, 1, v76, v78, v82, v83);
  (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v67, v82);
  if (*v52 == 1)
    v85 = 1.0;
  else
    v85 = 0.0;
  v112 = v83;
  v113 = &protocol witness table for _FrameLayout;
  v86 = v106;
  v87 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v106);
  View.layoutPriority(_:)(v86, v87, v85);
  return (*(uint64_t (**)(char *, uint64_t))(v105 + 8))(v84, v86);
}

uint64_t sub_100059020(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7, double a8)
{
  int v8;
  BOOL v9;
  double v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  double v17;
  BOOL v18;
  uint64_t v19;
  unsigned __int8 v20;
  uint64_t v21;

  v8 = *a1;
  v9 = v8 != 2;
  if (v8 == 2)
    v10 = a8;
  else
    v10 = 0.0;
  v11 = &a1[*(int *)(type metadata accessor for TFButton(0, a2, a3, a4) + 52)];
  v12 = *(_QWORD *)v11;
  v13 = v11[8];
  v14 = *((_QWORD *)v11 + 2);
  v19 = v12;
  v20 = v13;
  v21 = v14;
  v17 = v10;
  v18 = v9;
  v15 = sub_10000498C(&qword_10009A8B0);
  return State.wrappedValue.setter(&v17, v15);
}

uint64_t sub_1000590B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t (**v22)();
  uint64_t v24;
  uint64_t v25;

  v2 = v1;
  v25 = a1;
  v3 = type metadata accessor for ButtonStyleConfiguration.Label(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10000498C(&qword_10009AE10);
  __chkstk_darwin(v7);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10000498C(&qword_10009AE18);
  __chkstk_darwin(v10);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10000498C(&qword_10009AE20);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  ButtonStyleConfiguration.label.getter(v14);
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v9, v6, v3);
  v17 = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v18 = 1.0;
  if ((ButtonStyleConfiguration.isPressed.getter(v17) & 1) != 0)
  {
    v19 = *(_QWORD *)(v1 + 24);
    v20 = *(_BYTE *)(v2 + 32);
    sub_10001D97C(v19, v20);
    v21 = sub_1000117FC(v19, v20);
    sub_10001D9D8(v19, v20);
    if ((v21 - 2) >= 3u)
      v18 = 0.7;
    else
      v18 = 0.5;
  }
  sub_10000928C((uint64_t)v9, (uint64_t)v12, &qword_10009AE10);
  *(double *)&v12[*(int *)(v10 + 36)] = v18;
  sub_1000092D0((uint64_t)v9, &qword_10009AE10);
  sub_10000928C((uint64_t)v12, (uint64_t)v16, &qword_10009AE18);
  v22 = (uint64_t (**)())&v16[*(int *)(v13 + 36)];
  *v22 = sub_10003B048;
  v22[1] = 0;
  sub_1000092D0((uint64_t)v12, &qword_10009AE18);
  return sub_10000930C((uint64_t)v16, v25, &qword_10009AE20);
}

uint64_t sub_1000592F0@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t TupleTypeMetadata2;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t KeyPath;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(char *, char *, uint64_t);
  char *v101;
  void (*v102)(char *, uint64_t);
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t WitnessTable;
  char *v135;
  char v136[8];
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  uint64_t v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  char v156[8];
  uint64_t v157;
  uint64_t v158;

  v135 = a2;
  v133 = *(_QWORD *)(a1 - 8);
  v4 = __chkstk_darwin(a1);
  v130 = v5;
  v132 = (char *)&v104 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v4 + 16);
  v7 = type metadata accessor for ModifiedContent(255, v6, &type metadata for _FlexFrameLayout);
  v8 = sub_100004660(&qword_10009AA00);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v7, v8, 0, 0);
  v10 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v10);
  v11 = type metadata accessor for HStack(0, v10, WitnessTable);
  v106 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v104 - v12;
  v14 = sub_100004660(&qword_10009AA08);
  v15 = type metadata accessor for ModifiedContent(0, v11, v14);
  v107 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v105 = (char *)&v104 - v16;
  v17 = type metadata accessor for ModifiedContent(0, v15, &type metadata for _PaddingLayout);
  v110 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v109 = (char *)&v104 - v18;
  v111 = v19;
  v20 = type metadata accessor for ModifiedContent(0, v19, &type metadata for _PaddingLayout);
  v113 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v112 = (char *)&v104 - v21;
  v22 = sub_100004660(&qword_10009AA10);
  v114 = v20;
  v23 = type metadata accessor for ModifiedContent(0, v20, v22);
  v116 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v115 = (char *)&v104 - v24;
  v117 = v25;
  v26 = type metadata accessor for ModifiedContent(0, v25, &type metadata for _FlexFrameLayout);
  v120 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v118 = (char *)&v104 - v27;
  v121 = v28;
  v29 = type metadata accessor for ModifiedContent(255, v28, &type metadata for TFFrameTracker);
  v30 = sub_100004660(&qword_10009A870);
  v119 = v29;
  v31 = type metadata accessor for ModifiedContent(0, v29, v30);
  v123 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v122 = (uint64_t)&v104 - v32;
  v125 = v33;
  v128 = type metadata accessor for ModifiedContent(0, v33, &type metadata for ComponentItem);
  v127 = *(_QWORD *)(v128 - 8);
  v34 = __chkstk_darwin(v128);
  v124 = (char *)&v104 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  v126 = (char *)&v104 - v36;
  v37 = v2 + *(int *)(a1 + 44);
  v38 = *(_QWORD *)v37;
  v39 = *(_BYTE *)(v37 + 8);
  sub_10001D97C(*(_QWORD *)v37, v39);
  sub_1000117FC(v38, v39);
  v40 = sub_10001D9D8(v38, v39);
  v41 = *(_QWORD *)(a1 + 24);
  v131 = v6;
  v137 = v6;
  v108 = v41;
  v138 = v41;
  v139 = v2;
  v42 = static VerticalAlignment.center.getter(v40);
  v43 = v10;
  v44 = v105;
  HStack.init(alignment:spacing:content:)(v42, 0x4010000000000000, 0, sub_100062790, v136, v43, WitnessTable);
  KeyPath = swift_getKeyPath(&unk_100076028);
  WitnessTable = a1;
  v46 = *(int *)(a1 + 36);
  v129 = v2;
  v47 = (char *)(v2 + v46);
  v48 = *(_QWORD *)(v2 + v46 + 8);
  v156[0] = *(_BYTE *)(v2 + v46);
  v157 = v48;
  v49 = sub_10000498C((uint64_t *)&unk_10009A850);
  State.wrappedValue.getter(&v158, v49);
  v156[0] = v158;
  v50 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v11);
  View.environment<A>(_:_:)(KeyPath, v156, v11, v50);
  swift_release();
  v51 = (*(uint64_t (**)(char *, uint64_t))(v106 + 8))(v13, v11);
  v52 = static Edge.Set.leading.getter(v51);
  v53 = *((_QWORD *)v47 + 1);
  v156[0] = *v47;
  v157 = v53;
  State.wrappedValue.getter(&v158, v49);
  v54 = 0;
  if (v158 == 1)
  {
    v55 = *(_QWORD *)v37;
    v56 = *(_BYTE *)(v37 + 8);
    sub_10001D97C(*(_QWORD *)v37, v56);
    sub_1000117FC(v55, v56);
    sub_10001D9D8(v55, v56);
    v54 = 0x4028000000000000;
  }
  v57 = sub_10000966C(&qword_10009AA18, &qword_10009AA08, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
  v154 = v50;
  v155 = v57;
  v58 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v15);
  v59 = v109;
  View.padding(_:_:)(v52, v54, 0, v15, v58);
  v60 = (*(uint64_t (**)(char *, uint64_t))(v107 + 8))(v44, v15);
  v61 = static Edge.Set.trailing.getter(v60);
  v62 = *((_QWORD *)v47 + 1);
  v156[0] = *v47;
  v157 = v62;
  State.wrappedValue.getter(&v158, v49);
  if (v158 == 1)
  {
    v63 = *(_QWORD *)v37;
    v64 = *(_BYTE *)(v37 + 8);
    sub_10001D97C(*(_QWORD *)v37, v64);
    sub_1000117FC(v63, v64);
    sub_10001D9D8(v63, v64);
    v65 = 0x402C000000000000;
  }
  else
  {
    v65 = 0;
  }
  v152 = v58;
  v153 = &protocol witness table for _PaddingLayout;
  v66 = v111;
  v67 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v111);
  v68 = v112;
  View.padding(_:_:)(v61, v65, 0, v66, v67);
  (*(void (**)(char *, uint64_t))(v110 + 8))(v59, v66);
  v150 = v67;
  v151 = &protocol witness table for _PaddingLayout;
  v69 = v114;
  v70 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v114);
  v71 = sub_10006279C();
  v72 = v115;
  View.contentShape<A>(_:eoFill:)(v71, 0, v69, &type metadata for Rectangle, v70, v71);
  v73 = (*(uint64_t (**)(char *, uint64_t))(v113 + 8))(v68, v69);
  v74 = static Alignment.center.getter(v73);
  v76 = v75;
  v77 = sub_10000966C(&qword_100099D48, &qword_10009AA10, (uint64_t)&protocol conformance descriptor for _ContentShapeModifier<A>);
  v148 = v70;
  v149 = v77;
  v78 = v117;
  v79 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v117);
  v80 = v118;
  View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(0, 1, 0, 1, 0x7FF0000000000000, 0, 0, 1, 0, 1, 0x7FF0000000000000, 0, v74, v76, v78, v79);
  (*(void (**)(char *, uint64_t))(v116 + 8))(v72, v78);
  v81 = v133;
  v82 = v132;
  v83 = WitnessTable;
  (*(void (**)(char *, uint64_t, uint64_t))(v133 + 16))(v132, v129, WitnessTable);
  v84 = *(unsigned __int8 *)(v81 + 80);
  v85 = (v84 + 32) & ~v84;
  v86 = swift_allocObject(&unk_100090778, v85 + v130, v84 | 7);
  v87 = v108;
  *(_QWORD *)(v86 + 16) = v131;
  *(_QWORD *)(v86 + 24) = v87;
  (*(void (**)(uint64_t, char *, uint64_t))(v81 + 32))(v86 + v85, v82, v83);
  v146 = v79;
  v147 = &protocol witness table for _FlexFrameLayout;
  v88 = v121;
  v89 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v121);
  v90 = v122;
  sub_100066738(2003134806, 0xE400000000000000, (uint64_t)sub_100062894, v86, v88, v89, v122);
  swift_release();
  (*(void (**)(char *, uint64_t))(v120 + 8))(v80, v88);
  v91 = sub_100051174();
  v144 = v89;
  v145 = v91;
  v92 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v119);
  v93 = sub_10000966C(&qword_100099F80, &qword_10009A870, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
  v142 = v92;
  v143 = v93;
  v94 = v125;
  v95 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v125);
  v96 = v124;
  sub_100053BDC(v94, v95);
  (*(void (**)(uint64_t, uint64_t))(v123 + 8))(v90, v94);
  v97 = sub_1000619F0();
  v140 = v95;
  v141 = v97;
  v98 = v128;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v128);
  v99 = v127;
  v100 = *(void (**)(char *, char *, uint64_t))(v127 + 16);
  v101 = v126;
  v100(v126, v96, v98);
  v102 = *(void (**)(char *, uint64_t))(v99 + 8);
  v102(v96, v98);
  v100(v135, v101, v98);
  return ((uint64_t (*)(char *, uint64_t))v102)(v101, v98);
}

uint64_t sub_100059CF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t WitnessTable;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v40;
  char v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[4];
  uint64_t v51;
  uint64_t v52;

  v47 = a4;
  v44 = sub_10000498C(&qword_10009AA00);
  v7 = __chkstk_darwin(v44);
  v46 = (uint64_t)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v45 = (uint64_t)&v42 - v10;
  v11 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(v9);
  v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ModifiedContent(0, a2, &type metadata for _FlexFrameLayout);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v43 = (char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v42 - v19;
  __chkstk_darwin(v18);
  v42 = (char *)&v42 - v21;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, a2);
  v23 = a1 + *(int *)(type metadata accessor for TFMenuLabel(0, a2, a3, v22) + 36);
  v24 = *(_QWORD *)(v23 + 8);
  LOBYTE(v51) = *(_BYTE *)v23;
  v52 = v24;
  v25 = sub_10000498C((uint64_t *)&unk_10009A850);
  v26 = State.wrappedValue.getter(v50, v25);
  if (LOBYTE(v50[0]) == 1)
    v27 = static Alignment.leading.getter(v26);
  else
    v27 = static Alignment.center.getter(v26);
  v41 = 1;
  v40 = 1;
  View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(0, 1, 0, 1, 0x7FF0000000000000, 0, 0, 1, 0, v40, 0, v41, v27, v28, a2, a3);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, a2);
  v50[2] = a3;
  v50[3] = &protocol witness table for _FlexFrameLayout;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v14);
  v30 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
  v31 = v42;
  v30(v42, v20, v14);
  v32 = *(void (**)(char *, uint64_t))(v15 + 8);
  v32(v20, v14);
  v33 = *(_QWORD *)(v23 + 8);
  LOBYTE(v51) = *(_BYTE *)v23;
  v52 = v33;
  State.wrappedValue.getter(v50, v25);
  if (LOBYTE(v50[0]) == 1)
  {
    v34 = v45;
    sub_100056E64(v45);
    v35 = sub_10000498C(&qword_10009AA30);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v34, 0, 1, v35);
  }
  else
  {
    v36 = sub_10000498C(&qword_10009AA30);
    v34 = v45;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v45, 1, 1, v36);
  }
  v37 = (uint64_t)v43;
  v30(v43, v31, v14);
  v51 = v37;
  v38 = v46;
  sub_10000928C(v34, v46, &qword_10009AA00);
  v52 = v38;
  v50[0] = v14;
  v50[1] = v44;
  v48 = WitnessTable;
  v49 = sub_100051940(&qword_10009AA38, &qword_10009AA00, (void (*)(void))sub_10006293C, (uint64_t)&protocol conformance descriptor for <A> A?);
  sub_1000527C0(&v51, 2uLL, (uint64_t)v50);
  sub_1000092D0(v34, &qword_10009AA00);
  v32(v31, v14);
  sub_1000092D0(v38, &qword_10009AA00);
  return ((uint64_t (*)(uint64_t, uint64_t))v32)(v37, v14);
}

uint64_t sub_10005A0AC(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7)
{
  double Width;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned __int8 v16;
  double v17;
  double v18;
  double v19;
  char *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v25[9];
  uint64_t v26;

  Width = CGRectGetWidth(*(CGRect *)&a4);
  v12 = type metadata accessor for TFMenuLabel(0, a2, a3, v11);
  v13 = a1 + *(int *)(v12 + 44);
  v14 = *(_QWORD *)v13;
  v15 = *(_BYTE *)(v13 + 8);
  sub_10001D97C(*(_QWORD *)v13, v15);
  v16 = sub_1000117FC(v14, v15);
  sub_10001D9D8(v14, v15);
  sub_100066220(v16);
  v18 = v17;
  sub_10001D97C(v14, v15);
  sub_1000117FC(v14, v15);
  sub_10001D9D8(v14, v15);
  if (qword_100098278 != -1)
    swift_once(&qword_100098278, sub_100056E54);
  v19 = v18 + 4.0 + *(double *)&qword_10009B6C8;
  sub_10001D97C(v14, v15);
  sub_1000117FC(v14, v15);
  sub_10001D9D8(v14, v15);
  v20 = (char *)(a1 + *(int *)(v12 + 36));
  v21 = *v20;
  v22 = *((_QWORD *)v20 + 1);
  v25[1] = v21;
  v26 = v22;
  v25[0] = v19 + 24.0 < Width;
  v23 = sub_10000498C((uint64_t *)&unk_10009A850);
  return State.wrappedValue.setter(v25, v23);
}

void sub_10005A220(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_10005A22C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;

  v8 = sub_1000629C0();
  return static EnvironmentKey<>._valuesEqual(_:_:)(a1, a2, a3, a4, v8);
}

uint64_t sub_10005A27C@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t KeyPath;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t *v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[2];

  v46 = a1;
  v43 = sub_10000498C(&qword_10009AA98);
  __chkstk_darwin(v43);
  v42 = (uint64_t *)((char *)&v37 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v39 = type metadata accessor for Text.TruncationMode(0);
  v47 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v38 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_10000498C(&qword_10009AAA0);
  __chkstk_darwin(v40);
  v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_10000498C((uint64_t *)&unk_10009AAA8);
  __chkstk_darwin(v45);
  v44 = (uint64_t)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v9 = v1;
  v41 = v1;
  v48[0] = v7;
  v48[1] = v8;
  v10 = sub_100008EDC();
  swift_bridgeObjectRetain(v8);
  v11 = Text.init<A>(_:)(v48, &type metadata for String, v10);
  v13 = v12;
  v15 = v14;
  v17 = v16 & 1;
  v48[0] = sub_100062AA8(v9[2] & 1);
  v18 = Text.foregroundStyle<A>(_:)(v48, v11, v13, v17, v15, &type metadata for AnyShapeStyle, &protocol witness table for AnyShapeStyle);
  v20 = v19;
  v37 = v21;
  LOBYTE(v10) = v22 & 1;
  sub_100008F20(v11, v13, v17);
  swift_release();
  swift_bridgeObjectRelease(v15);
  KeyPath = swift_getKeyPath(&unk_1000761C8);
  v24 = v47;
  v26 = v38;
  v25 = v39;
  (*(void (**)(char *, _QWORD, uint64_t))(v47 + 104))(v38, enum case for Text.TruncationMode.tail(_:), v39);
  v27 = swift_getKeyPath(&unk_1000761F8);
  v28 = v42;
  v29 = *(void (**)(char *, char *, uint64_t))(v24 + 16);
  v30 = v25;
  v29((char *)v42 + *(int *)(v43 + 28), v26, v25);
  *v28 = v27;
  v31 = (uint64_t)v28;
  sub_10000928C((uint64_t)v28, (uint64_t)&v5[*(int *)(v40 + 36)], &qword_10009AA98);
  *(_QWORD *)v5 = v18;
  *((_QWORD *)v5 + 1) = v20;
  v5[16] = v10;
  v32 = v37;
  *((_QWORD *)v5 + 3) = v37;
  *((_QWORD *)v5 + 4) = KeyPath;
  *((_QWORD *)v5 + 5) = 1;
  v5[48] = 0;
  sub_10000A91C(v18, v20, v10);
  swift_bridgeObjectRetain(v32);
  swift_retain();
  sub_1000092D0(v31, &qword_10009AA98);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v26, v30);
  sub_100008F20(v18, v20, v10);
  swift_release();
  swift_bridgeObjectRelease(v32);
  v33 = v41[3];
  LOBYTE(v27) = *((_BYTE *)v41 + 32);
  sub_10001D97C(v33, v27);
  LOBYTE(v10) = sub_100011B90(v33, v27);
  sub_10001D9D8(v33, v27);
  if ((v10 & 1) != 0)
    v34 = 1.0;
  else
    v34 = 0.5;
  v35 = v44;
  sub_10000928C((uint64_t)v5, v44, &qword_10009AAA0);
  *(double *)(v35 + *(int *)(v45 + 36)) = v34;
  sub_1000092D0((uint64_t)v5, &qword_10009AAA0);
  return sub_10000930C(v35, v46, (uint64_t *)&unk_10009AAA8);
}

uint64_t sub_10005A60C@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  char v28;
  char *v29;
  uint64_t v30;
  uint64_t KeyPath;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  id v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  char *v46;
  id v47;
  id v48;
  _BOOL8 v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  int v88;
  char v89;
  uint64_t v90;
  uint64_t v91;

  v88 = a3;
  LODWORD(v85) = a2;
  v87 = a5;
  v82 = type metadata accessor for HighlightHoverEffect(0);
  v80 = *(_QWORD *)(v82 - 8);
  __chkstk_darwin(v82);
  v77 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = sub_10000498C(&qword_10009A998);
  v8 = *(_QWORD *)(v73 - 8);
  __chkstk_darwin(v73);
  v10 = (char *)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = sub_10000498C((uint64_t *)&unk_10009A9A0);
  __chkstk_darwin(v72);
  v12 = (char *)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10000498C(&qword_10009A228);
  __chkstk_darwin(v13);
  v15 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = sub_10000498C(&qword_10009A9B0);
  __chkstk_darwin(v75);
  v74 = (uint64_t)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = sub_10000498C(&qword_10009A9B8);
  v81 = *(_QWORD *)(v83 - 8);
  __chkstk_darwin(v83);
  v79 = (char *)&v70 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = sub_10000498C(&qword_10009A9C0);
  __chkstk_darwin(v76);
  v86 = (char *)&v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for MenuStyleConfiguration(0);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v70 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v24 = (char *)&v70 - v23;
  v84 = v25;
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 16);
  v26((char *)&v70 - v23, a1, v19);
  v27 = swift_allocObject(&unk_100090750, 40, 7);
  v28 = v85;
  *(_BYTE *)(v27 + 16) = v85;
  v71 = v28 & 1;
  *(_BYTE *)(v27 + 24) = v88;
  *(_QWORD *)(v27 + 32) = a4;
  v70 = a4;
  swift_retain();
  MenuStyleConfiguration.onPresentationChanged.setter(sub_100062430, v27);
  v78 = v24;
  v85 = v19;
  v26(v22, (uint64_t)v24, v19);
  v29 = v22;
  v30 = (uint64_t)v15;
  Menu<>.init(_:)(v29);
  KeyPath = swift_getKeyPath(&unk_100076138);
  v32 = v73;
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v12, v10, v73);
  v33 = &v12[*(int *)(v72 + 36)];
  *(_QWORD *)v33 = KeyPath;
  v33[8] = 0;
  v34 = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v32);
  v35 = static Alignment.center.getter(v34);
  sub_100031970(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v15, 0.0, 1, INFINITY, 0, v35, v36);
  sub_1000092D0((uint64_t)v12, (uint64_t *)&unk_10009A9A0);
  v37 = (void *)objc_opt_self(UIDevice);
  v38 = objc_msgSend(v37, "currentDevice");
  v39 = objc_msgSend(v38, "userInterfaceIdiom");

  v40 = 0;
  if (v39 == (id)6)
  {
    LOBYTE(v90) = v88 & 1;
    v91 = v70;
    v41 = sub_10000498C((uint64_t *)&unk_10009A850);
    State.wrappedValue.getter(&v89, v41);
    v40 = v89;
  }
  v42 = v74;
  sub_10000928C(v30, v74, &qword_10009A228);
  v43 = v75;
  v44 = (_BYTE *)(v42 + *(int *)(v75 + 36));
  *v44 = v40;
  v44[1] = 0;
  v44[2] = v71;
  v45 = sub_1000092D0(v30, &qword_10009A228);
  v46 = v77;
  static CustomHoverEffect<>.highlight.getter(v45);
  v47 = objc_msgSend(v37, "currentDevice");
  v48 = objc_msgSend(v47, "userInterfaceIdiom");

  v49 = v48 == (id)6;
  v50 = sub_1000624D0();
  v51 = sub_100007D90(&qword_10009A860, (uint64_t (*)(uint64_t))&type metadata accessor for HighlightHoverEffect, (uint64_t)&protocol conformance descriptor for HighlightHoverEffect);
  v52 = v79;
  v53 = v43;
  v54 = v82;
  View.hoverEffect<A>(_:isEnabled:)(v46, v49, v53, v82, v50, v51);
  (*(void (**)(char *, uint64_t))(v80 + 8))(v46, v54);
  sub_1000092D0(v42, &qword_10009A9B0);
  v55 = objc_msgSend(v37, "currentDevice");
  v56 = objc_msgSend(v55, "userInterfaceIdiom");

  if (v56 == (id)6)
    v58 = static Color.clear.getter(v57);
  else
    v58 = static Color.primary.getter(v57);
  v59 = v58;
  v60 = swift_getKeyPath(&unk_100076168);
  v90 = v59;
  swift_retain();
  v61 = AnyShapeStyle.init<A>(_:)(&v90, &type metadata for Color, &protocol witness table for Color);
  v62 = v81;
  v63 = (uint64_t)v86;
  v64 = v83;
  (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v86, v52, v83);
  swift_release();
  v65 = (uint64_t *)(v63 + *(int *)(v76 + 36));
  *v65 = v60;
  v65[1] = v61;
  (*(void (**)(char *, uint64_t))(v62 + 8))(v52, v64);
  v89 = 0;
  State.init(wrappedValue:)(&v90, &v89, &type metadata for Bool);
  LOBYTE(v60) = v90;
  v66 = v91;
  v67 = v87;
  sub_10000928C(v63, v87, &qword_10009A9C0);
  v68 = v67 + *(int *)(sub_10000498C(&qword_10009A9F8) + 36);
  *(_BYTE *)v68 = v60;
  *(_QWORD *)(v68 + 8) = v66;
  sub_1000092D0(v63, &qword_10009A9C0);
  return (*(uint64_t (**)(char *, uint64_t))(v84 + 8))(v78, v85);
}

uint64_t sub_10005AC48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *v2;

  return sub_10005A60C(a1, *v2, v2[8], *((_QWORD *)v2 + 2), a2);
}

__n128 sub_10005AC58@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  void *v3;
  NSString v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  __n128 result;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __n128 v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unint64_t v34;
  unsigned __int8 v35;
  unint64_t v36;
  unsigned __int8 v37;
  unint64_t v38;
  unsigned __int8 v39;
  unint64_t v40;
  unsigned __int8 v41;
  unint64_t v42;
  unsigned __int8 v43;
  unint64_t v44;
  unint64_t v45;
  unsigned __int8 v46;
  unsigned __int8 v47;
  unsigned __int8 v48;
  unsigned __int8 v49;
  unsigned __int8 v50;
  unsigned __int8 v51;

  v3 = (void *)objc_opt_self(_UITextAnimation);
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v3, "animationWithName:", v4);

  v7 = static Color.clear.getter(v6);
  v8 = static Alignment.center.getter(v7);
  sub_1000319D4(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v31, 0.0, 1, INFINITY, 0, v8, v9, v7);
  v10 = swift_release();
  v11 = v31;
  v12 = v34;
  v13 = v36;
  v14 = v38;
  v29 = v42;
  v30 = v40;
  v27 = v45;
  v28 = v44;
  v51 = v32;
  v50 = v35;
  v49 = v37;
  v48 = v39;
  v47 = v41;
  v46 = v43;
  v15 = static Alignment.center.getter(v10);
  v17 = v16;
  sub_10005AE34(v1, (uint64_t)v5, (uint64_t)&v31);
  swift_unknownObjectRelease(v5);
  v18 = v32;
  v19 = v33;
  result = v31;
  v21 = v51;
  v22 = v50;
  v23 = v49;
  v24 = v48;
  v25 = v47;
  v26 = v46;
  *a1 = v11;
  a1[1].n128_u8[0] = v21;
  a1[1].n128_u64[1] = v12;
  a1[2].n128_u8[0] = v22;
  a1[2].n128_u64[1] = v13;
  a1[3].n128_u8[0] = v23;
  a1[3].n128_u64[1] = v14;
  a1[4].n128_u8[0] = v24;
  a1[4].n128_u64[1] = v30;
  a1[5].n128_u8[0] = v25;
  a1[5].n128_u64[1] = v29;
  a1[6].n128_u8[0] = v26;
  a1[6].n128_u64[1] = v28;
  a1[7].n128_u64[0] = v27;
  a1[7].n128_u8[8] = 0;
  a1[8] = result;
  a1[9].n128_u8[0] = v18;
  a1[9].n128_u8[1] = v19;
  a1[9].n128_u64[1] = v15;
  a1[10].n128_u64[0] = v17;
  return result;
}

double sub_10005AE34@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  id v14;
  uint64_t KeyPath;
  unint64_t v16;
  unint64_t v17;
  double result;
  char v19;
  char v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  __int16 v24;
  __int128 v25;
  char v26;
  char v27;

  v6 = type metadata accessor for DynamicTypeSize(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1 + *(int *)(type metadata accessor for TFAnimatedText(0) + 36);
  v11 = *(_QWORD *)v10;
  v12 = *(_BYTE *)(v10 + 8);
  sub_10001D97C(*(_QWORD *)v10, v12);
  v13 = sub_100011B90(v11, v12);
  sub_10001D9D8(v11, v12);
  sub_100012568((uint64_t)v9);
  v14 = sub_10005AFA0((uint64_t)v9, a2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if ((v13 & 1) != 0)
  {
    v22 = v14;
    v23 = 0;
    v24 = 256;
  }
  else
  {
    KeyPath = swift_getKeyPath(&unk_100076198);
    v22 = v14;
    v23 = KeyPath;
    v24 = 0;
  }
  v16 = sub_100062A20();
  v17 = sub_100062A64();
  _ConditionalContent<>.init(storage:)(&v22, &type metadata for _TFUITextView, &type metadata for _TFUILabel, v16, v17);
  result = *(double *)&v25;
  v19 = v26;
  v20 = v27;
  *(_OWORD *)a3 = v25;
  *(_BYTE *)(a3 + 16) = v19;
  *(_BYTE *)(a3 + 17) = v20;
  return result;
}

id sub_10005AFA0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  char v22;
  void (*v23)(char *, uint64_t);
  id v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t inited;
  uint64_t v30;
  NSString *v31;
  id v32;
  NSString *v33;
  id v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v40;
  id v41;
  NSString v42;
  Class isa;
  id v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _OWORD v51[2];
  __int128 v52;
  uint64_t ObjectType;
  _BYTE v54[120];

  v49 = a2;
  v3 = type metadata accessor for ColorScheme(0);
  v47 = *(_QWORD *)(v3 - 8);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v46 - v7;
  v46 = type metadata accessor for TFAnimatedText(0);
  __chkstk_darwin(v46);
  v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10000498C((uint64_t *)&unk_10009AA70);
  __chkstk_darwin(v11);
  v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (void *)objc_opt_self(UIFont);
  v15 = type metadata accessor for DynamicTypeSize(0);
  v16 = *(_QWORD *)(v15 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v13, a1, v15);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  v17 = (void *)UIContentSizeCategory.init(_:)(v13);
  v18 = objc_msgSend((id)objc_opt_self(UITraitCollection), "traitCollectionWithPreferredContentSizeCategory:", v17);

  v19 = v48;
  v20 = objc_msgSend(v14, "preferredFontForTextStyle:compatibleWithTraitCollection:", UIFontTextStyleTitle3, v18);

  LODWORD(v17) = *(unsigned __int8 *)(v19 + 32);
  sub_10000920C(v19, (uint64_t)v10, type metadata accessor for TFAnimatedText);
  if ((_DWORD)v17 == 1)
  {
    sub_100009250((uint64_t)v10, type metadata accessor for TFAnimatedText);
LABEL_4:
    v24 = objc_msgSend((id)objc_opt_self(UIColor), "whiteColor");
    goto LABEL_6;
  }
  sub_100012300((uint64_t)v8);
  v21 = v47;
  (*(void (**)(char *, _QWORD, uint64_t))(v47 + 104))(v6, enum case for ColorScheme.dark(_:), v3);
  v22 = static ColorScheme.== infix(_:_:)(v8, v6);
  v23 = *(void (**)(char *, uint64_t))(v21 + 8);
  v23(v6, v3);
  v23(v8, v3);
  sub_100009250((uint64_t)v10, type metadata accessor for TFAnimatedText);
  if ((v22 & 1) != 0)
    goto LABEL_4;
  v25 = sub_1000096AC(0, &qword_1000996D0, UIColor_ptr);
  v26 = static Color.primary.getter(v25);
  v24 = (id)UIColor.init(_:)(v26);
LABEL_6:
  v27 = v24;
  v28 = sub_10000498C(&qword_10009AA80);
  inited = swift_initStackObject(v28, v54);
  *(_OWORD *)(inited + 16) = xmmword_100073880;
  *(_QWORD *)(inited + 32) = NSFontAttributeName;
  v30 = sub_1000096AC(0, &qword_10009A370, UIFont_ptr);
  *(_QWORD *)(inited + 40) = v20;
  *(_QWORD *)(inited + 64) = v30;
  *(_QWORD *)(inited + 72) = NSForegroundColorAttributeName;
  *(_QWORD *)(inited + 104) = sub_1000096AC(0, &qword_1000996D0, UIColor_ptr);
  *(_QWORD *)(inited + 80) = v27;
  v31 = NSFontAttributeName;
  v32 = v20;
  v33 = NSForegroundColorAttributeName;
  v34 = v27;
  v35 = sub_1000283F8(inited);
  v36 = v49;
  if (v49)
  {
    v37 = (void *)NSTextAnimationAttributeName;
    ObjectType = swift_getObjectType(v49);
    *(_QWORD *)&v52 = v36;
    sub_10001E97C(&v52, v51);
    swift_unknownObjectRetain_n(v36, 2);
    v38 = v37;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v35);
    v50 = v35;
    sub_10002F5A4(v51, v38, isUniquelyReferenced_nonNull_native);
    v35 = v50;
    swift_unknownObjectRelease(v36);

    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v40 = *(_QWORD *)(v19 + 8);
  v41 = objc_allocWithZone((Class)NSAttributedString);
  swift_bridgeObjectRetain(v40);
  v42 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v40);
  type metadata accessor for Key(0);
  sub_100007D90(&qword_100098620, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_100073348);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v35);
  v44 = objc_msgSend(v41, "initWithString:attributes:", v42, isa);

  return v44;
}

unsigned __int8 *sub_10005B464(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v6;
  uint64_t v7;
  objc_class *ObjCClassFromMetadata;
  id v9;
  void *v10;
  unsigned __int8 *v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  double left;
  double bottom;
  double right;
  char v19;
  int v20;
  id v21;
  void *v22;
  Class isa;
  NSString v24;

  v6 = a4 & 1;
  v7 = type metadata accessor for _UIAnimatedTextView();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata(v7);
  v9 = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), "initReadonlyAndUnselectableWithFrame:textContainer:", 0, 0.0, 0.0, 0.0, 0.0);
  if (!v9)
    v9 = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), "init");
  v10 = (void *)objc_opt_self(UIColor);
  v11 = (unsigned __int8 *)v9;
  v12 = objc_msgSend(v10, "clearColor");
  objc_msgSend(v11, "setBackgroundColor:", v12);

  objc_msgSend(v11, "setSelectable:", 0);
  objc_msgSend(v11, "setEditable:", 0);
  v13 = objc_msgSend(v11, "textLayoutManager");
  if (v13)
  {
    v14 = v13;
    v15 = objc_msgSend(v13, "textContainer");

    if (v15)
    {
      objc_msgSend(v15, "setMaximumNumberOfLines:", 1);

    }
  }
  left = UIEdgeInsetsZero.left;
  bottom = UIEdgeInsetsZero.bottom;
  right = UIEdgeInsetsZero.right;
  objc_msgSend(v11, "setContentInset:", UIEdgeInsetsZero.top, left, bottom, right);
  objc_msgSend(v11, "setAttributedText:", a2);
  objc_msgSend(v11, "setTextAlignment:", 1);
  objc_msgSend(v11, "setContentInset:", UIEdgeInsetsZero.top, left, bottom, right);
  sub_10005BE48(0, 1);
  sub_10001D97C(a3, v6);
  v19 = sub_100011B90(a3, v6);
  sub_10001D9D8(a3, v6);
  if ((v19 & 1) != 0)
  {
    v20 = v11[OBJC_IVAR____TtC19FontPickerUIServiceP33_364789B77C608B517795CE5B8DEADC4419_UIAnimatedTextView_shouldAnimate];
    v11[OBJC_IVAR____TtC19FontPickerUIServiceP33_364789B77C608B517795CE5B8DEADC4419_UIAnimatedTextView_shouldAnimate] = 0;
    if (v20 == 1)
    {
      objc_msgSend(v11, "setAllowsTextAnimations:", 0);
      v21 = objc_msgSend(v11, "textLayoutManager");
      if (v21)
      {
        v22 = v21;
        isa = Bool._bridgeToObjectiveC()().super.super.isa;
        v24 = String._bridgeToObjectiveC()();
        objc_msgSend(v22, "setValue:forKey:", isa, v24);

      }
    }
  }
  else
  {
    sub_10005BB04();
  }
  return v11;
}

void sub_10005B724(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  char v11;
  char v12;
  int v13;
  id v14;
  void *v15;
  Class isa;
  NSString v17;
  void *v18;
  id v19;

  objc_msgSend(a1, "setAttributedText:");
  objc_msgSend(a1, "setTextAlignment:", 1);
  v8 = type metadata accessor for _UIAnimatedTextView();
  v9 = swift_dynamicCastClass(a1, v8);
  if (v9)
  {
    v10 = (_BYTE *)v9;
    v19 = a1;
    sub_10005BE48(0, 1);
    v11 = a5 & 1;
    sub_10001D97C(a4, v11);
    v12 = sub_100011B90(a4, v11);
    sub_10001D9D8(a4, v11);
    if ((v12 & 1) != 0)
    {
      v13 = v10[OBJC_IVAR____TtC19FontPickerUIServiceP33_364789B77C608B517795CE5B8DEADC4419_UIAnimatedTextView_shouldAnimate];
      v10[OBJC_IVAR____TtC19FontPickerUIServiceP33_364789B77C608B517795CE5B8DEADC4419_UIAnimatedTextView_shouldAnimate] = 0;
      if (v13 == 1)
      {
        objc_msgSend(v10, "setAllowsTextAnimations:", 0);
        v14 = objc_msgSend(v10, "textLayoutManager");
        if (v14)
        {
          v15 = v14;
          isa = Bool._bridgeToObjectiveC()().super.super.isa;
          v17 = String._bridgeToObjectiveC()();
          objc_msgSend(v15, "setValue:forKey:", isa, v17);

          v18 = v17;
LABEL_9:

          return;
        }
      }
    }
    else
    {
      sub_10005BB04();
    }
    v18 = v19;
    goto LABEL_9;
  }
}

unsigned __int8 *sub_10005B89C(uint64_t a1)
{
  uint64_t v1;

  return sub_10005B464(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16));
}

void sub_10005B8A8(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_10005B724(a1, a2, *(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(_BYTE *)(v2 + 16));
}

uint64_t sub_10005B8C4(uint64_t a1, unsigned __int8 a2, uint64_t a3, unsigned __int8 a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;

  if (((a2 | a4) & 1) != 0)
    return 0;
  v5 = a1;
  v8 = type metadata accessor for _UIAnimatedTextView();
  if (swift_dynamicCastClass(a5, v8))
    sub_10005BE48(a3, 0);
  return v5;
}

uint64_t sub_10005B948(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100065508();
  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_10005B998(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100065508();
  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_10005B9E8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100065508();
  UIViewRepresentable.body.getter(a1, v2);
  __break(1u);
}

uint64_t sub_10005BB04()
{
  void *v0;
  uint64_t result;
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  char v6;
  id v7;
  void *v8;
  Class isa;
  NSString v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  _QWORD aBlock[3];
  void *v16;
  void (*v17)(void *);
  uint64_t v18;
  void *v19;
  _OWORD v20[2];

  result = (uint64_t)objc_msgSend(v0, "attributedText");
  if (result)
  {
    v2 = (void *)result;
    v3 = objc_msgSend((id)result, "attribute:atIndex:effectiveRange:", NSTextAnimationAttributeName, 0, 0);

    if (v3)
    {
      _bridgeAnyObjectToAny(_:)(v20, v3);
      swift_unknownObjectRelease(v3);
    }
    else
    {
      memset(v20, 0, sizeof(v20));
    }
    sub_10000930C((uint64_t)v20, (uint64_t)aBlock, (uint64_t *)&unk_10009A360);
    if (v16)
    {
      v4 = sub_10000498C(&qword_10009A378);
      result = swift_dynamicCast(&v19, aBlock, (char *)&type metadata for Any + 8, v4, 6);
      if ((result & 1) != 0)
      {
        v5 = v19;
        v6 = *((_BYTE *)v0
             + OBJC_IVAR____TtC19FontPickerUIServiceP33_364789B77C608B517795CE5B8DEADC4419_UIAnimatedTextView_shouldAnimate);
        *((_BYTE *)v0
        + OBJC_IVAR____TtC19FontPickerUIServiceP33_364789B77C608B517795CE5B8DEADC4419_UIAnimatedTextView_shouldAnimate) = 1;
        if ((v6 & 1) == 0)
        {
          objc_msgSend(v0, "setAllowsTextAnimations:", 1);
          v7 = objc_msgSend(v0, "textLayoutManager");
          if (v7)
          {
            v8 = v7;
            isa = Bool._bridgeToObjectiveC()().super.super.isa;
            v10 = String._bridgeToObjectiveC()();
            objc_msgSend(v8, "setValue:forKey:", isa, v10);

          }
        }
        v11 = swift_allocObject(&unk_100090308, 24, 7);
        swift_unknownObjectWeakInit(v11 + 16, v0);
        v17 = sub_10005C2C8;
        v18 = v11;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_10005BE00;
        v16 = &unk_100090320;
        v12 = _Block_copy(aBlock);
        swift_release();
        v13 = objc_msgSend(v0, "_animatorForTextAnimation:notify:", v5, v12);
        _Block_release(v12);
        if (v13)
        {
          objc_msgSend(v13, "start");
          swift_unknownObjectRelease(v5);
          v14 = v13;
        }
        else
        {
          v14 = v5;
        }
        return swift_unknownObjectRelease(v14);
      }
    }
    else
    {
      return sub_1000092D0((uint64_t)aBlock, (uint64_t *)&unk_10009A360);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10005BD74(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  _BYTE v6[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    if (*(_BYTE *)(Strong
                  + OBJC_IVAR____TtC19FontPickerUIServiceP33_364789B77C608B517795CE5B8DEADC4419_UIAnimatedTextView_shouldAnimate) == 1
      && objc_msgSend(a1, "state") == (id)1)
    {
      objc_msgSend(a1, "start");
    }

  }
}

uint64_t sub_10005BE00(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = swift_unknownObjectRetain(a2);
  v4(v5);
  swift_release(v3);
  return swift_unknownObjectRelease(a2);
}

void sub_10005BE48(uint64_t a1, char a2)
{
  void *v2;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  id v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double Height;
  id v23;
  void *v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Class isa;
  double v34;
  id v35;
  _OWORD v36[2];
  _BYTE v37[24];
  uint64_t v38;
  CGRect v39;

  v5 = objc_msgSend(v2, "attributedText");
  if (!v5)
  {
    __break(1u);
    goto LABEL_22;
  }
  v6 = v5;
  v7 = objc_msgSend(v5, "string");

  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v10 = v9;

  swift_bridgeObjectRelease(v10);
  v11 = HIBYTE(v10) & 0xF;
  if ((v10 & 0x2000000000000000) == 0)
    v11 = v8 & 0xFFFFFFFFFFFFLL;
  if (v11)
  {
    v12 = objc_msgSend(v2, "attributedText");
    if (v12)
    {
      v13 = v12;
      v14 = objc_msgSend(v12, "attribute:atIndex:effectiveRange:", NSFontAttributeName, 0, 0);

      if (v14)
      {
        _bridgeAnyObjectToAny(_:)(v36, v14);
        swift_unknownObjectRelease(v14);
      }
      else
      {
        memset(v36, 0, sizeof(v36));
      }
      sub_10000930C((uint64_t)v36, (uint64_t)v37, (uint64_t *)&unk_10009A360);
      if (v38)
      {
        v15 = sub_1000096AC(0, &qword_10009A370, UIFont_ptr);
        if ((swift_dynamicCast(&v35, v37, (char *)&type metadata for Any + 8, v15, 6) & 1) != 0)
        {
          v16 = v35;
          objc_msgSend(v35, "ascender");
          v18 = v17;
          objc_msgSend(v16, "descender");
          v20 = v19;

          v21 = v18 + fabs(v20);
          if ((a2 & 1) != 0)
          {
LABEL_12:
            objc_msgSend(v2, "bounds");
            Height = CGRectGetHeight(v39);
LABEL_19:
            objc_msgSend(v2, "setTextContainerInset:", (Height - v21) * 0.5, 0.0, 0.0, 0.0);
            return;
          }
LABEL_18:
          Height = *(double *)&a1;
          goto LABEL_19;
        }
      }
      else
      {
        sub_1000092D0((uint64_t)v37, (uint64_t *)&unk_10009A360);
      }
      v23 = objc_msgSend(v2, "attributedText");
      if (v23)
      {
        v24 = v23;
        v25 = objc_msgSend(v23, "string");

        if (v25)
        {
          v26 = objc_msgSend(v2, "attributedText");
          if (v26)
          {
            v27 = v26;
            v28 = objc_msgSend(v26, "attributesAtIndex:effectiveRange:", 0, 0);

            type metadata accessor for Key(0);
            v30 = v29;
            v31 = sub_100007D90(&qword_100098620, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_100073348);
            v32 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v28, v30, (char *)&type metadata for Any + 8, v31);

            isa = Dictionary._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease(v32);
            objc_msgSend(v25, "sizeWithAttributes:", isa);
            v21 = v34;

            if ((a2 & 1) != 0)
              goto LABEL_12;
            goto LABEL_18;
          }
LABEL_25:
          __break(1u);
          return;
        }
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
}

id sub_10005C250()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for _UIAnimatedTextView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for _UIAnimatedTextView()
{
  return objc_opt_self(_TtC19FontPickerUIServiceP33_364789B77C608B517795CE5B8DEADC4419_UIAnimatedTextView);
}

uint64_t sub_10005C2A4()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_10005C2C8(void *a1)
{
  uint64_t v1;

  sub_10005BD74(a1, v1);
}

uint64_t sub_10005C2D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10005C2E0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

id sub_10005C2E8()
{
  uint64_t *v0;
  uint64_t v1;
  id v2;
  void *v3;
  id v4;
  id v5;

  v1 = *v0;
  v2 = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  v3 = (void *)objc_opt_self(UIColor);
  v4 = v2;
  v5 = objc_msgSend(v3, "clearColor");
  objc_msgSend(v4, "setBackgroundColor:", v5);

  objc_msgSend(v4, "setAttributedText:", v1);
  return v4;
}

id sub_10005C390(void *a1)
{
  _QWORD *v1;

  return objc_msgSend(a1, "setAttributedText:", *v1);
}

double sub_10005C3A0(uint64_t a1, char a2)
{
  id *v2;
  double result;
  double v6;

  objc_msgSend(*v2, "size");
  v6 = *(double *)&a1;
  if ((a2 & 1) != 0)
    v6 = result;
  if (v6 < result)
    return v6;
  return result;
}

uint64_t sub_10005C41C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10006554C();
  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_10005C46C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10006554C();
  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_10005C4BC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006554C();
  UIViewRepresentable.body.getter(a1, v2);
  __break(1u);
}

uint64_t sub_10005C4E0@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v28;

  v6 = sub_10000498C(&qword_10009A3A0);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = (int *)type metadata accessor for TFComponentBackground(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_100076000);
  *v8 = swift_getKeyPath(&unk_100076050);
  v13 = sub_10000498C((uint64_t *)&unk_10009A390);
  swift_storeEnumTagMultiPayload(v8, v13, 0);
  v14 = swift_getKeyPath(&unk_100076080);
  v15 = swift_getKeyPath(&unk_1000760B0);
  *v11 = a2 & 1;
  v11[1] = BYTE1(a2) & 1;
  v11[2] = BYTE2(a2) & 1;
  *((_QWORD *)v11 + 1) = KeyPath;
  v11[16] = 0;
  sub_10000930C((uint64_t)v8, (uint64_t)&v11[v9[8]], &qword_10009A3A0);
  v16 = &v11[v9[9]];
  *(_QWORD *)v16 = v14;
  v16[8] = 0;
  v17 = &v11[v9[10]];
  *(_QWORD *)v17 = v15;
  v17[8] = 0;
  v18 = &v11[v9[11]];
  *(_QWORD *)v18 = swift_getKeyPath(&unk_1000760D8);
  v18[8] = 0;
  v19 = &v11[v9[12]];
  v20 = swift_getKeyPath(&unk_100076108);
  *(_QWORD *)v19 = v20;
  v19[8] = 0;
  v21 = static Alignment.center.getter(v20);
  v23 = v22;
  v24 = a3 + *(int *)(sub_10000498C(&qword_10009AA88) + 36);
  sub_10000920C((uint64_t)v11, v24, type metadata accessor for TFComponentBackground);
  v25 = (uint64_t *)(v24 + *(int *)(sub_10000498C(&qword_10009A948) + 36));
  *v25 = v21;
  v25[1] = v23;
  v26 = sub_10000498C(&qword_10009AA90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(a3, a1, v26);
  return sub_100009250((uint64_t)v11, type metadata accessor for TFComponentBackground);
}

uint64_t sub_10005C704@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *v2;
  int v3;
  int v4;

  if (v2[2])
    v3 = 0x10000;
  else
    v3 = 0;
  if (v2[1])
    v4 = 256;
  else
    v4 = 0;
  return sub_10005C4E0(a1, v4 | *v2 | v3, a2);
}

uint64_t sub_10005C734@<X0>(uint64_t a1@<X8>)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char v6;
  uint64_t (*v7)(_QWORD);
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char v11;
  char v12;
  id v13;
  id v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  float v22;
  uint64_t v23;
  uint64_t v24;

  v3 = type metadata accessor for TFComponentBackground(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v1;
  sub_10000920C((uint64_t)v1, (uint64_t)v5, v7);
  if ((v6 & 1) != 0)
  {
    v8 = sub_100009250((uint64_t)v5, type metadata accessor for TFComponentBackground);
    goto LABEL_7;
  }
  v9 = &v5[*(int *)(v3 + 40)];
  v10 = *(_QWORD *)v9;
  v11 = v9[8];
  sub_10001D97C(*(_QWORD *)v9, v11);
  v12 = sub_100011B90(v10, v11);
  sub_10001D9D8(v10, v11);
  v8 = sub_100009250((uint64_t)v5, type metadata accessor for TFComponentBackground);
  if ((v12 & 1) == 0)
  {
LABEL_7:
    if ((*v1 & 1) != 0)
    {
      v15 = 0;
      goto LABEL_9;
    }
    v15 = 0;
    if ((v1[1] & 1) == 0)
      goto LABEL_11;
LABEL_6:
    v16 = sub_10005C8E8();
    goto LABEL_12;
  }
  v13 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v14 = objc_msgSend(v13, "userInterfaceIdiom");

  v15 = v14 != (id)6;
  if ((*v1 & 1) != 0)
  {
LABEL_9:
    v24 = static Color.clear.getter(v8);
    v16 = AnyShapeStyle.init<A>(_:)(&v24, &type metadata for Color, &protocol witness table for Color);
    goto LABEL_12;
  }
  if ((v1[1] & 1) != 0)
    goto LABEL_6;
LABEL_11:
  v16 = sub_10005CB6C();
LABEL_12:
  v17 = v16;
  v18 = static Alignment.center.getter(v16);
  v20 = v19;
  result = static HierarchicalShapeStyle.quaternary.getter();
  v22 = 0.0;
  *(_QWORD *)a1 = v17;
  *(_DWORD *)(a1 + 8) = result;
  if (v15)
    v22 = 0.5;
  *(float *)(a1 + 12) = v22;
  *(_QWORD *)(a1 + 16) = v18;
  *(_QWORD *)(a1 + 24) = v20;
  return result;
}

uint64_t sub_10005C8E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  id v9;
  id v10;
  uint64_t v11;
  char v13;
  void (*v14)(char *, uint64_t);
  void *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  __n128 v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = v0;
  v2 = type metadata accessor for ColorScheme(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v27 - v7;
  v9 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v10 = objc_msgSend(v9, "userInterfaceIdiom");

  if (v10 == (id)6)
    return AnyShapeStyle.init<A>(_:)(v11, &type metadata for ForegroundStyle, &protocol witness table for ForegroundStyle);
  if (*(_BYTE *)(v1 + 2) == 1)
  {
    type metadata accessor for TFComponentBackground(0);
    sub_100012300((uint64_t)v8);
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for ColorScheme.dark(_:), v2);
    v13 = static ColorScheme.== infix(_:_:)(v8, v6);
    v14 = *(void (**)(char *, uint64_t))(v3 + 8);
    v14(v6, v2);
    v14(v8, v2);
    v15 = (void *)objc_opt_self(UIColor);
    if ((v13 & 1) != 0)
    {
      v16 = Color.init(uiColor:)(objc_msgSend(v15, "systemGray3Color"));
      v17 = *(_QWORD *)(v1 + 8);
      v18 = *(_BYTE *)(v1 + 16);
      sub_10001D97C(v17, v18);
      v19 = sub_1000117FC(v17, v18);
      sub_10001D9D8(v17, v18);
      v21 = (v19 - 2) >= 3u;
      v22 = 0x3FE6666666666666;
    }
    else
    {
      v16 = Color.init(uiColor:)(objc_msgSend(v15, "systemGray2Color"));
      v23 = *(_QWORD *)(v1 + 8);
      v24 = *(_BYTE *)(v1 + 16);
      sub_10001D97C(v23, v24);
      v25 = sub_1000117FC(v23, v24);
      sub_10001D9D8(v23, v24);
      v21 = (v25 - 2) >= 3u;
      v22 = 0x3FEB333333333333;
    }
    v20.n128_u64[0] = v22;
    if (v21)
      v20.n128_f64[0] = 1.0;
    v26 = Color.opacity(_:)(v16, v20);
    swift_release();
    v28 = v26;
  }
  else
  {
    v28 = static Color.accentColor.getter(v11);
  }
  return AnyShapeStyle.init<A>(_:)(&v28, &type metadata for Color, &protocol witness table for Color);
}

uint64_t sub_10005CB6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  id v13;
  id v14;
  void *v15;
  uint64_t *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  int v22;
  char *v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  void *v29;
  char **v30;
  id v31;
  char v32;
  void *v33;
  char **v34;
  id v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  int v41;
  char *v42;
  char v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  float v49;
  uint64_t v50;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;

  v0 = type metadata accessor for ColorScheme(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v52 - v5;
  v7 = type metadata accessor for TFComponentBackground(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Material(0);
  __chkstk_darwin(v10);
  v12 = (uint64_t *)((char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v14 = objc_msgSend(v13, "userInterfaceIdiom");

  if (v14 == (id)6)
  {
    static Material.thin.getter();
    v15 = &protocol witness table for Material;
    v16 = v12;
    v17 = (void *)v10;
    return AnyShapeStyle.init<A>(_:)(v16, v17, v15);
  }
  v53 = v4;
  v18 = v54;
  v19 = *(_QWORD *)(v54 + 8);
  v20 = *(_BYTE *)(v54 + 16);
  sub_10001D97C(v19, v20);
  v21 = sub_1000117FC(v19, v20);
  sub_10001D9D8(v19, v20);
  if ((v21 - 2) < 3u)
  {
    v22 = *(unsigned __int8 *)(v18 + 2);
    sub_10000920C(v18, (uint64_t)v9, type metadata accessor for TFComponentBackground);
    v23 = v6;
    if (v22 == 1)
    {
      sub_100009250((uint64_t)v9, type metadata accessor for TFComponentBackground);
      v24 = 0.15;
    }
    else
    {
      v39 = *((_QWORD *)v9 + 1);
      v40 = v9[16];
      sub_10001D97C(v39, v40);
      v41 = sub_1000117FC(v39, v40);
      sub_10001D9D8(v39, v40);
      sub_100009250((uint64_t)v9, type metadata accessor for TFComponentBackground);
      if (v41 == 3)
        v24 = 0.15;
      else
        v24 = 0.3;
    }
    v42 = v53;
    sub_100012300((uint64_t)v6);
    (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v42, enum case for ColorScheme.dark(_:), v0);
    v43 = static ColorScheme.== infix(_:_:)(v6, v42);
    v44 = *(void (**)(char *, uint64_t))(v1 + 8);
    v44(v42, v0);
    v45 = ((uint64_t (*)(char *, uint64_t))v44)(v23, v0);
    if ((v43 & 1) != 0)
    {
      v46 = static Color.primary.getter(v45);
      v47.n128_f64[0] = v24;
      v48 = Color.opacity(_:)(v46, v47);
      swift_release();
      v55 = v48;
      v17 = &type metadata for Color;
      v15 = &protocol witness table for Color;
      v16 = &v55;
    }
    else
    {
      v49 = 0.85;
      if (*(_BYTE *)(v18 + 2))
        v49 = 0.7;
      *(float *)&v55 = v49;
      v50 = sub_10000498C(&qword_10009AE38);
      v15 = (void *)sub_10000966C(&qword_10009AE40, &qword_10009AE38, (uint64_t)&protocol conformance descriptor for _OpacityShapeStyle<A>);
      v16 = &v55;
      v17 = (void *)v50;
    }
    return AnyShapeStyle.init<A>(_:)(v16, v17, v15);
  }
  v25 = v18 + *(int *)(v7 + 48);
  v26 = *(_QWORD *)v25;
  v27 = *(_BYTE *)(v25 + 8);
  sub_10001D97C(*(_QWORD *)v25, v27);
  v28 = sub_100011B90(v26, v27);
  sub_10001D9D8(v26, v27);
  v29 = (void *)objc_opt_self(UIColor);
  v30 = &selRef_secondarySystemFillColor;
  if ((v28 & 1) == 0)
    v30 = &selRef_tertiarySystemFillColor;
  v31 = objc_msgSend(v29, *v30);
  sub_10001D97C(v26, v27);
  v32 = sub_100011B90(v26, v27);
  sub_10001D9D8(v26, v27);
  v33 = (void *)objc_opt_self(UIColor);
  v34 = &selRef_quaternarySystemFillColor;
  if ((v32 & 1) != 0)
    v34 = &selRef_tertiarySystemFillColor;
  v35 = objc_msgSend(v33, *v34);
  v36 = v35;
  if (*(_BYTE *)(v18 + 2))
    v37 = v35;
  else
    v37 = v31;
  v55 = Color.init(uiColor:)(v37);
  v38 = AnyShapeStyle.init<A>(_:)(&v55, &type metadata for Color, &protocol witness table for Color);

  return v38;
}

ValueMetadata *type metadata accessor for TFMenuLabelChevronDisplayedKey()
{
  return &type metadata for TFMenuLabelChevronDisplayedKey;
}

uint64_t initializeBufferWithCopyOfBuffer for TFComponentBackgroundModifier(uint64_t result, __int16 *a2)
{
  __int16 v2;

  v2 = *a2;
  *(_BYTE *)(result + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for TFComponentBackgroundModifier(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  unsigned int v4;
  BOOL v5;
  int v6;

  if (!a2)
    return 0;
  if (a2 >= 0xFF)
  {
    if ((a2 + 33554177) >> 24)
    {
      v2 = *((unsigned __int8 *)a1 + 3);
      if (*((_BYTE *)a1 + 3))
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
    }
    else
    {
      v2 = *(unsigned __int16 *)((char *)a1 + 3);
      if (*(unsigned __int16 *)((char *)a1 + 3))
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
    }
  }
  v4 = *(unsigned __int8 *)a1;
  v5 = v4 >= 2;
  v6 = (v4 + 2147483646) & 0x7FFFFFFF;
  if (!v5)
    v6 = -1;
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for TFComponentBackgroundModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;

  if ((a3 + 33554177) >> 24)
    v3 = 1;
  else
    v3 = 2;
  if (a3 <= 0xFE)
    v3 = 0;
  if (a2 > 0xFE)
  {
    *(_WORD *)result = a2 - 255;
    *(_BYTE *)(result + 2) = (a2 - 255) >> 16;
    if (v3)
    {
      v4 = ((a2 - 255) >> 24) + 1;
      if (v3 == 2)
        *(_WORD *)(result + 3) = v4;
      else
        *(_BYTE *)(result + 3) = v4;
    }
  }
  else
  {
    if (!v3)
      goto LABEL_10;
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2)
        return result;
LABEL_16:
      *(_BYTE *)result = a2 + 1;
      return result;
    }
    *(_BYTE *)(result + 3) = 0;
    if (a2)
      goto LABEL_16;
  }
  return result;
}

ValueMetadata *type metadata accessor for TFComponentBackgroundModifier()
{
  return &type metadata for TFComponentBackgroundModifier;
}

uint64_t sub_10005D114(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v15 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v8;
    v9 = a3[7];
    v10 = (_QWORD *)(a1 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    v12 = sub_10000498C((uint64_t *)&unk_10009A390);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = type metadata accessor for ColorScheme(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v11, v13);
      v14 = 1;
    }
    else
    {
      *v10 = *v11;
      swift_retain();
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v12, v14);
    v16 = a3[8];
    v17 = (_QWORD *)(a1 + v16);
    v18 = (uint64_t *)((char *)a2 + v16);
    v19 = sub_10000498C((uint64_t *)&unk_100098F50);
    if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
    {
      v20 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v17, v18, v20);
      v21 = 1;
    }
    else
    {
      *v17 = *v18;
      swift_retain();
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v19, v21);
    v22 = a3[9];
    v23 = a1 + v22;
    v24 = (uint64_t)a2 + v22;
    v25 = *(_QWORD *)v24;
    v26 = *(_BYTE *)(v24 + 8);
    sub_10001D97C(*(_QWORD *)v24, v26);
    *(_QWORD *)v23 = v25;
    *(_BYTE *)(v23 + 8) = v26;
  }
  return a1;
}

uint64_t sub_10005D2AC(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v4 = a1 + a2[7];
  v5 = sub_10000498C((uint64_t *)&unk_10009A390);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release();
  }
  v7 = a1 + a2[8];
  v8 = sub_10000498C((uint64_t *)&unk_100098F50);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    swift_release();
  }
  return sub_10001D9D8(*(_QWORD *)(a1 + a2[9]), *(_BYTE *)(a1 + a2[9] + 8));
}

uint64_t sub_10005D394(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v8 = a3[7];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  v11 = sub_10000498C((uint64_t *)&unk_10009A390);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
    v13 = 1;
  }
  else
  {
    *v9 = *v10;
    swift_retain();
    v13 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v11, v13);
  v14 = a3[8];
  v15 = (_QWORD *)(a1 + v14);
  v16 = (_QWORD *)(a2 + v14);
  v17 = sub_10000498C((uint64_t *)&unk_100098F50);
  if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
  {
    v18 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
    v19 = 1;
  }
  else
  {
    *v15 = *v16;
    swift_retain();
    v19 = 0;
  }
  swift_storeEnumTagMultiPayload(v15, v17, v19);
  v20 = a3[9];
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = *(_QWORD *)v22;
  v24 = *(_BYTE *)(v22 + 8);
  sub_10001D97C(*(_QWORD *)v22, v24);
  *(_QWORD *)v21 = v23;
  *(_BYTE *)(v21 + 8) = v24;
  return a1;
}

uint64_t sub_10005D500(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  if (a1 != a2)
  {
    v10 = a3[7];
    v11 = (_QWORD *)(a1 + v10);
    v12 = (_QWORD *)(a2 + v10);
    sub_1000092D0(a1 + v10, (uint64_t *)&unk_10009A390);
    v13 = sub_10000498C((uint64_t *)&unk_10009A390);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for ColorScheme(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
      v15 = 1;
    }
    else
    {
      *v11 = *v12;
      swift_retain();
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v13, v15);
    v16 = a3[8];
    v17 = (_QWORD *)(a1 + v16);
    v18 = (_QWORD *)(a2 + v16);
    sub_1000092D0(a1 + v16, (uint64_t *)&unk_100098F50);
    v19 = sub_10000498C((uint64_t *)&unk_100098F50);
    if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
    {
      v20 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v17, v18, v20);
      v21 = 1;
    }
    else
    {
      *v17 = *v18;
      swift_retain();
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v19, v21);
  }
  v22 = a3[9];
  v23 = a1 + v22;
  v24 = a2 + v22;
  v25 = *(_QWORD *)v24;
  v26 = *(_BYTE *)(v24 + 8);
  sub_10001D97C(*(_QWORD *)v24, v26);
  v27 = *(_QWORD *)v23;
  v28 = *(_BYTE *)(v23 + 8);
  *(_QWORD *)v23 = v25;
  *(_BYTE *)(v23 + 8) = v26;
  sub_10001D9D8(v27, v28);
  return a1;
}

uint64_t sub_10005D6C4(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v7 = a3[7];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = sub_10000498C((uint64_t *)&unk_10009A390);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for ColorScheme(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
    swift_storeEnumTagMultiPayload(v8, v10, 1);
  }
  else
  {
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  v12 = a3[8];
  v13 = (void *)(a1 + v12);
  v14 = (const void *)(a2 + v12);
  v15 = sub_10000498C((uint64_t *)&unk_100098F50);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v13, v14, v16);
    swift_storeEnumTagMultiPayload(v13, v15, 1);
  }
  else
  {
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  v17 = a3[9];
  v18 = a1 + v17;
  v19 = a2 + v17;
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
  return a1;
}

uint64_t sub_10005D818(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  if (a1 != a2)
  {
    v10 = a3[7];
    v11 = (void *)(a1 + v10);
    v12 = (const void *)(a2 + v10);
    sub_1000092D0(a1 + v10, (uint64_t *)&unk_10009A390);
    v13 = sub_10000498C((uint64_t *)&unk_10009A390);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for ColorScheme(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v11, v12, v14);
      swift_storeEnumTagMultiPayload(v11, v13, 1);
    }
    else
    {
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    v15 = a3[8];
    v16 = (void *)(a1 + v15);
    v17 = (const void *)(a2 + v15);
    sub_1000092D0(a1 + v15, (uint64_t *)&unk_100098F50);
    v18 = sub_10000498C((uint64_t *)&unk_100098F50);
    if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
    {
      v19 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v16, v17, v19);
      swift_storeEnumTagMultiPayload(v16, v18, 1);
    }
    else
    {
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
  }
  v20 = a3[9];
  v21 = a1 + v20;
  v22 = (uint64_t *)(a2 + v20);
  v23 = *v22;
  LOBYTE(v22) = *((_BYTE *)v22 + 8);
  v24 = *(_QWORD *)v21;
  v25 = *(_BYTE *)(v21 + 8);
  *(_QWORD *)v21 = v23;
  *(_BYTE *)(v21 + 8) = (_BYTE)v22;
  sub_10001D9D8(v24, v25);
  return a1;
}

uint64_t sub_10005D9B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005D9C4);
}

uint64_t sub_10005D9C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_10000498C(&qword_10009A3A0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 28);
    }
    else
    {
      v10 = sub_10000498C(&qword_10009A3A8);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_10005DA6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005DA78);
}

uint64_t sub_10005DA78(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = sub_10000498C(&qword_10009A3A0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 28);
    }
    else
    {
      v10 = sub_10000498C(&qword_10009A3A8);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for TFAnimatedText(uint64_t a1)
{
  return sub_1000050B8(a1, (uint64_t *)&unk_10009A408, (uint64_t)&nominal type descriptor for TFAnimatedText);
}

void sub_10005DB30(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[6];

  v6[0] = &unk_100075B50;
  v6[1] = &unk_100075B50;
  v6[2] = &unk_100075B68;
  sub_10000470C(319, &qword_10009A418, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v6[3] = *(_QWORD *)(v2 - 8) + 64;
    sub_10000470C(319, (unint64_t *)&unk_10009A420, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v5 <= 0x3F)
    {
      v6[4] = *(_QWORD *)(v4 - 8) + 64;
      v6[5] = &unk_100075B80;
      swift_initStructMetadata(a1, 256, 6, v6, a1 + 16);
    }
  }
}

_QWORD *sub_10005DC04(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v27 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v27 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = a3;
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a3[6];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for SymbolRenderingMode(0);
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    v13(v10, v11, v12);
    v14 = v6[7];
    v15 = v6[8];
    v16 = (_QWORD *)((char *)v4 + v14);
    v17 = (_QWORD *)((char *)a2 + v14);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    *((_BYTE *)v4 + v15) = *((_BYTE *)a2 + v15);
    v19 = v6[9];
    v20 = (char *)v4 + v19;
    v21 = (char *)a2 + v19;
    v22 = *(_QWORD *)v21;
    LOBYTE(v8) = v21[8];
    swift_bridgeObjectRetain(v18);
    sub_10001D97C(v22, v8);
    *(_QWORD *)v20 = v22;
    v20[8] = v8;
    v23 = v6[10];
    v24 = (char *)v4 + v23;
    v25 = (char *)a2 + v23;
    v26 = *(_QWORD *)v25;
    LOBYTE(v6) = v25[8];
    sub_10001D97C(*(_QWORD *)v25, (char)v6);
    *(_QWORD *)v24 = v26;
    v24[8] = (char)v6;
  }
  return v4;
}

uint64_t sub_10005DD38(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v4 = a1 + a2[6];
  v5 = type metadata accessor for SymbolRenderingMode(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8));
  sub_10001D9D8(*(_QWORD *)(a1 + a2[9]), *(_BYTE *)(a1 + a2[9] + 8));
  return sub_10001D9D8(*(_QWORD *)(a1 + a2[10]), *(_BYTE *)(a1 + a2[10] + 8));
}

_QWORD *sub_10005DDC8(_QWORD *a1, _QWORD *a2, int *a3)
{
  int *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;

  v3 = a3;
  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a3[6];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for SymbolRenderingMode(0);
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  v12(v9, v10, v11);
  v13 = v3[7];
  v14 = v3[8];
  v15 = (_QWORD *)((char *)a1 + v13);
  v16 = (_QWORD *)((char *)a2 + v13);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  *((_BYTE *)a1 + v14) = *((_BYTE *)a2 + v14);
  v18 = v3[9];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = *(_QWORD *)v20;
  LOBYTE(v7) = v20[8];
  swift_bridgeObjectRetain(v17);
  sub_10001D97C(v21, v7);
  *(_QWORD *)v19 = v21;
  v19[8] = v7;
  v22 = v3[10];
  v23 = (char *)a1 + v22;
  v24 = (char *)a2 + v22;
  v25 = *(_QWORD *)v24;
  LOBYTE(v3) = v24[8];
  sub_10001D97C(*(_QWORD *)v24, (char)v3);
  *(_QWORD *)v23 = v25;
  v23[8] = (char)v3;
  return a1;
}

_QWORD *sub_10005DED0(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for SymbolRenderingMode(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  v14 = a3[7];
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (_QWORD *)((char *)a2 + v14);
  *v15 = *v16;
  v17 = v16[1];
  v18 = v15[1];
  v15[1] = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v19 = a3[9];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = *(_QWORD *)v21;
  LOBYTE(v12) = v21[8];
  sub_10001D97C(*(_QWORD *)v21, (char)v12);
  v23 = *(_QWORD *)v20;
  v24 = v20[8];
  *(_QWORD *)v20 = v22;
  v20[8] = (char)v12;
  sub_10001D9D8(v23, v24);
  v25 = a3[10];
  v26 = (char *)a1 + v25;
  v27 = (char *)a2 + v25;
  v28 = *(_QWORD *)v27;
  LOBYTE(a3) = v27[8];
  sub_10001D97C(*(_QWORD *)v27, (char)a3);
  v29 = *(_QWORD *)v26;
  v30 = v26[8];
  *(_QWORD *)v26 = v28;
  v26[8] = (char)a3;
  sub_10001D9D8(v29, v30);
  return a1;
}

_OWORD *sub_10005E014(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for SymbolRenderingMode(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[8];
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  *((_BYTE *)a1 + v11) = *((_BYTE *)a2 + v11);
  v12 = a3[9];
  v13 = a3[10];
  v14 = (char *)a1 + v12;
  v15 = (char *)a2 + v12;
  v14[8] = v15[8];
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v16 = (char *)a1 + v13;
  v17 = (char *)a2 + v13;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v16[8] = v17[8];
  return a1;
}

_QWORD *sub_10005E0C8(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for SymbolRenderingMode(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  v14 = a3[7];
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (_QWORD *)((char *)a2 + v14);
  v18 = *v16;
  v17 = v16[1];
  v19 = v15[1];
  *v15 = v18;
  v15[1] = v17;
  swift_bridgeObjectRelease(v19);
  v20 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  v23 = *(_QWORD *)v22;
  LOBYTE(v22) = v22[8];
  v24 = *(_QWORD *)v21;
  v25 = v21[8];
  *(_QWORD *)v21 = v23;
  v21[8] = (char)v22;
  sub_10001D9D8(v24, v25);
  v26 = a3[10];
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  v29 = *(_QWORD *)v28;
  LOBYTE(v28) = v28[8];
  v30 = *(_QWORD *)v27;
  v31 = v27[8];
  *(_QWORD *)v27 = v29;
  v27[8] = (char)v28;
  sub_10001D9D8(v30, v31);
  return a1;
}

uint64_t sub_10005E1C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005E1CC);
}

uint64_t sub_10005E1CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = type metadata accessor for SymbolRenderingMode(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v9);
  }
}

uint64_t sub_10005E254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005E260);
}

uint64_t sub_10005E260(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 8) = a2;
  }
  else
  {
    v7 = type metadata accessor for SymbolRenderingMode(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for TFLabel(uint64_t a1)
{
  return sub_1000050B8(a1, qword_10009A4B8, (uint64_t)&nominal type descriptor for TFLabel);
}

uint64_t sub_10005E2E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10006085C(a1, a2, a3, (uint64_t)&unk_100075B80);
}

uint64_t sub_10005E2F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 48);
}

uint64_t sub_10005E2FC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[8];

  v4[0] = &unk_100075BC8;
  v4[1] = &unk_100075B68;
  v4[2] = &unk_100075B68;
  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    v4[4] = (char *)&value witness table for () + 64;
    v4[5] = &unk_100075BE0;
    v4[6] = &unk_100075BA0;
    v4[7] = &unk_100075B80;
    swift_initStructMetadata(a1, 0, 8, v4, a1 + 32);
    return 0;
  }
  return result;
}

_QWORD *sub_10005E3AC(_BYTE *a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  _QWORD *v18;
  unint64_t v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  id v25;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64) + 7;
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((((((((v6 + ((v5 + 3) & ~v5)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
       + 23) & 0xFFFFFFFFFFFFFFF8)
     + 9 > 0x18)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v9 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain();
  }
  else
  {
    *a1 = *(_BYTE *)a2;
    a1[1] = *((_BYTE *)a2 + 1);
    a1[2] = *((_BYTE *)a2 + 2);
    v10 = (unint64_t)&a1[v5 + 3] & ~v5;
    v11 = ((unint64_t)a2 + v5 + 3) & ~v5;
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v10, v11);
    v12 = (_QWORD *)((v6 + v10) & 0xFFFFFFFFFFFFFFF8);
    v13 = (_QWORD *)((v6 + v11) & 0xFFFFFFFFFFFFFFF8);
    v14 = v13[1];
    *v12 = *v13;
    v12[1] = v14;
    v15 = ((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8;
    v16 = ((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8;
    v17 = *(_BYTE *)(v16 + 8);
    *(_QWORD *)v15 = *(_QWORD *)v16;
    *(_BYTE *)(v15 + 8) = v17;
    *(_QWORD *)(v15 + 16) = *(_QWORD *)(v16 + 16);
    v18 = (_QWORD *)((v15 + 31) & 0xFFFFFFFFFFFFFFF8);
    v19 = (v16 + 31) & 0xFFFFFFFFFFFFFFF8;
    v20 = *(void **)v19;
    *v18 = *(_QWORD *)v19;
    v18[1] = *(_QWORD *)(v19 + 8);
    v21 = ((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFFFF8;
    v22 = (v19 + 23) & 0xFFFFFFFFFFFFFFF8;
    v23 = *(_QWORD *)v22;
    v24 = *(_BYTE *)(v22 + 8);
    swift_retain();
    swift_retain();
    v25 = v20;
    swift_retain();
    sub_10001D97C(v23, v24);
    *(_QWORD *)v21 = v23;
    *(_BYTE *)(v21 + 8) = v24;
  }
  return v3;
}

uint64_t sub_10005E548(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  id *v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = (a1 + *(unsigned __int8 *)(v2 + 80) + 3) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  (*(void (**)(unint64_t))(v2 + 8))(v3);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  v5 = (id *)((((v4 + 23) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8);

  swift_release();
  return sub_10001D9D8(*(_QWORD *)(((unint64_t)v5 + 23) & 0xFFFFFFFFFFFFFFF8), *(_BYTE *)((((unint64_t)v5 + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
}

_BYTE *sub_10005E5D4(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  _QWORD *v15;
  unint64_t v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  id v22;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (unint64_t)&a1[v5 + 3] & ~v5;
  v7 = (unint64_t)&a2[v5 + 3] & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  v9 = (_QWORD *)((v8 + v6) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)((v8 + v7) & 0xFFFFFFFFFFFFFFF8);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = ((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF8;
  v13 = ((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8;
  v14 = *(_BYTE *)(v13 + 8);
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = v14;
  *(_QWORD *)(v12 + 16) = *(_QWORD *)(v13 + 16);
  v15 = (_QWORD *)((v12 + 31) & 0xFFFFFFFFFFFFFFF8);
  v16 = (v13 + 31) & 0xFFFFFFFFFFFFFFF8;
  v17 = *(void **)v16;
  *v15 = *(_QWORD *)v16;
  v15[1] = *(_QWORD *)(v16 + 8);
  v18 = ((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8;
  v19 = (v16 + 23) & 0xFFFFFFFFFFFFFFF8;
  v20 = *(_QWORD *)v19;
  v21 = *(_BYTE *)(v19 + 8);
  swift_retain();
  swift_retain();
  v22 = v17;
  swift_retain();
  sub_10001D97C(v20, v21);
  *(_QWORD *)v18 = v20;
  *(_BYTE *)(v18 + 8) = v21;
  return a1;
}

_BYTE *sub_10005E700(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  void *v18;
  id v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (unint64_t)&a1[v5 + 3] & ~v5;
  v7 = (unint64_t)&a2[v5 + 3] & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 24))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  v9 = (_QWORD *)((v8 + v6) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)((v8 + v7) & 0xFFFFFFFFFFFFFFF8);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  swift_retain();
  swift_release();
  v12 = ((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF8;
  v13 = ((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8;
  v14 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(v13 + 8);
  *(_QWORD *)v12 = v14;
  *(_QWORD *)(v12 + 16) = *(_QWORD *)(v13 + 16);
  swift_retain();
  swift_release();
  v15 = (v12 + 31) & 0xFFFFFFFFFFFFFFF8;
  v16 = (v13 + 31) & 0xFFFFFFFFFFFFFFF8;
  v17 = *(void **)v15;
  v18 = *(void **)v16;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v19 = v18;

  *(_QWORD *)(v15 + 8) = *(_QWORD *)(v16 + 8);
  swift_retain();
  swift_release();
  v20 = (v15 + 23) & 0xFFFFFFFFFFFFFFF8;
  v21 = (v16 + 23) & 0xFFFFFFFFFFFFFFF8;
  v22 = *(_QWORD *)v21;
  LOBYTE(v16) = *(_BYTE *)(v21 + 8);
  sub_10001D97C(*(_QWORD *)v21, v16);
  v23 = *(_QWORD *)v20;
  v24 = *(_BYTE *)(v20 + 8);
  *(_QWORD *)v20 = v22;
  *(_BYTE *)(v20 + 8) = v16;
  sub_10001D9D8(v23, v24);
  return a1;
}

_BYTE *sub_10005E84C(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _OWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (unint64_t)&a1[v5 + 3] & ~v5;
  v7 = (unint64_t)&a2[v5 + 3] & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  v9 = v8 + v6;
  v10 = (_OWORD *)((v8 + v7) & 0xFFFFFFFFFFFFFFF8);
  v9 &= 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v9 = *v10;
  v11 = (v9 + 23) & 0xFFFFFFFFFFFFFFF8;
  v12 = ((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_QWORD *)(v12 + 16);
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *(_QWORD *)(v11 + 16) = v13;
  v14 = (_OWORD *)((v11 + 31) & 0xFFFFFFFFFFFFFFF8);
  v15 = (_OWORD *)((v12 + 31) & 0xFFFFFFFFFFFFFFF8);
  *v14 = *v15;
  v16 = ((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8;
  v17 = ((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8;
  v18 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  *(_QWORD *)v16 = v18;
  return a1;
}

_BYTE *sub_10005E920(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  void *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (unint64_t)&a1[v5 + 3] & ~v5;
  v7 = (unint64_t)&a2[v5 + 3] & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 40))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  v9 = (_OWORD *)((v8 + v6) & 0xFFFFFFFFFFFFFFF8);
  v10 = v8 + v7;
  v11 = (v10 & 0xFFFFFFFFFFFFFFF8) + 23;
  *v9 = *(_OWORD *)(v10 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  v12 = ((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF8;
  v11 &= 0xFFFFFFFFFFFFFFF8;
  v13 = *(_QWORD *)v11;
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(v11 + 8);
  *(_QWORD *)v12 = v13;
  *(_QWORD *)(v12 + 16) = *(_QWORD *)(v11 + 16);
  swift_release();
  v14 = (v12 + 31) & 0xFFFFFFFFFFFFFFF8;
  v15 = (_QWORD *)((v11 + 31) & 0xFFFFFFFFFFFFFFF8);
  v16 = *(void **)v14;
  *(_QWORD *)v14 = *v15;

  *(_QWORD *)(v14 + 8) = v15[1];
  swift_release();
  v17 = (v14 + 23) & 0xFFFFFFFFFFFFFFF8;
  v18 = ((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8;
  v19 = *(_QWORD *)v18;
  LOBYTE(v18) = *(_BYTE *)(v18 + 8);
  v20 = *(_QWORD *)v17;
  v21 = *(_BYTE *)(v17 + 8);
  *(_QWORD *)v17 = v19;
  *(_BYTE *)(v17 + 8) = v18;
  sub_10001D9D8(v20, v21);
  return a1;
}

uint64_t sub_10005EA40(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  if (v6 >= a2)
  {
    v15 = (a1 + v7 + 3) & ~v7;
    if (v5 < 0x7FFFFFFF)
    {
      v16 = *(_QWORD *)((v8 + v15) & 0xFFFFFFFFFFFFF8);
      if (v16 >= 0xFFFFFFFF)
        LODWORD(v16) = -1;
      return (v16 + 1);
    }
    else
    {
      return (*(uint64_t (**)(uint64_t))(v4 + 48))(v15);
    }
  }
  else
  {
    v9 = ((((((((v8 + ((v7 + 3) & ~(_DWORD)v7)) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 31) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8)
       + 9;
    v10 = (a2 - v6 + 255) >> (8 * v9);
    if (v9 < 4)
      v11 = v10 + 1;
    else
      v11 = 2;
    if (v11 >= 0x10000)
      v12 = 4;
    else
      v12 = 2;
    if (v11 < 0x100)
      v12 = 1;
    if (v11 >= 2)
      v13 = v12;
    else
      v13 = 0;
    return ((uint64_t (*)(void))((char *)&loc_10005EAF0 + 4 * byte_100075A80[v13]))();
  }
}

void sub_10005EB90(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((((((((*(_QWORD *)(v5 + 64)
             + 7
             + ((*(unsigned __int8 *)(v5 + 80) + 3) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))) & 0xFFFFFFFFFFFFFFF8)
           + 23) & 0xFFFFFFFFFFFFFFF8)
         + 31) & 0xFFFFFFFFFFFFFFF8)
       + 23) & 0xFFFFFFFFFFFFFFF8)
     + 9;
  if (v6 >= a3)
  {
    v10 = 0;
    if (v6 >= a2)
      goto LABEL_17;
  }
  else
  {
    if (v7 <= 3)
      v8 = ((a3 - v6 + 255) >> (8 * v7)) + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (v6 >= a2)
LABEL_17:
      __asm { BR              X14 }
  }
  if (v7 >= 4)
    v11 = ~v6 + a2;
  else
    v11 = (~(_BYTE)v6 + a2);
  bzero(a1, v7);
  if ((_DWORD)v7 == 1)
    *a1 = v11;
  else
    *(_DWORD *)a1 = v11;
  __asm { BR              X10 }
}

void sub_10005ECD8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x10005ED54);
}

void sub_10005ECE0(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x10005ECE8);
  JUMPOUT(0x10005ED54);
}

void sub_10005ED2C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x10005ED54);
}

void sub_10005ED34()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x10005ED54);
}

uint64_t sub_10005ED3C@<X0>(int a1@<W1>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a1)
    JUMPOUT(0x10005ED54);
  if (a2 < 0x7FFFFFFF)
  {
    if ((a1 & 0x80000000) == 0)
      JUMPOUT(0x10005ED50);
    JUMPOUT(0x10005ED48);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))((v6 + v5 + 3) & a3);
}

uint64_t type metadata accessor for TFButton(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100062D44(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TFButton);
}

uint64_t destroy for TFMenuStyle(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 16));
}

uint64_t _s19FontPickerUIService11TFMenuStyleVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  swift_retain(v3);
  return a1;
}

uint64_t assignWithCopy for TFMenuStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_retain(v4);
  swift_release(v3);
  return a1;
}

__n128 initializeWithTake for TFMenuStyle(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for TFMenuStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for TFMenuStyle(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TFMenuStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for TFMenuStyle()
{
  return &type metadata for TFMenuStyle;
}

uint64_t destroy for TFText(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return sub_10001D9D8(*(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t initializeWithCopy for TFText(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain(v3);
  sub_10001D97C(v4, v5);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = v5;
  return a1;
}

uint64_t assignWithCopy for TFText(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v2 = a2;
  *(_QWORD *)a1 = *a2;
  v4 = a2[1];
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *((_BYTE *)v2 + 16);
  v6 = v2[3];
  LOBYTE(v2) = *((_BYTE *)v2 + 32);
  sub_10001D97C(v6, (char)v2);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = (_BYTE)v2;
  sub_10001D9D8(v7, v8);
  return a1;
}

__n128 initializeWithTake for TFText(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for TFText(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = v6;
  sub_10001D9D8(v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for TFText(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 33))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TFText(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TFText()
{
  return &type metadata for TFText;
}

_QWORD *sub_10005F124(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v23 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = a3;
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v8;
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    v9 = a2[6];
    v10 = a3[9];
    v25 = a1 + v10;
    v11 = (uint64_t)a2 + v10;
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v9;
    v12 = type metadata accessor for SymbolRenderingMode(0);
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_retain();
    swift_retain();
    v13(v25, v11, v12);
    v14 = v6[11];
    *((_BYTE *)v4 + v6[10]) = *((_BYTE *)a2 + v6[10]);
    *((_BYTE *)v4 + v14) = *((_BYTE *)a2 + v14);
    v15 = v6[12];
    v16 = (char *)v4 + v15;
    v17 = (uint64_t)a2 + v15;
    v18 = *(_QWORD *)v17;
    LOBYTE(v8) = *(_BYTE *)(v17 + 8);
    sub_10001D97C(*(_QWORD *)v17, v8);
    *(_QWORD *)v16 = v18;
    v16[8] = v8;
    v19 = v6[13];
    v20 = (char *)v4 + v19;
    v21 = (uint64_t)a2 + v19;
    v22 = *(_QWORD *)v21;
    LOBYTE(v6) = *(_BYTE *)(v21 + 8);
    sub_10001D97C(*(_QWORD *)v21, (char)v6);
    *(_QWORD *)v20 = v22;
    v20[8] = (char)v6;
  }
  return v4;
}

uint64_t sub_10005F278(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  swift_release();
  swift_release();
  v4 = a1 + a2[9];
  v5 = type metadata accessor for SymbolRenderingMode(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  sub_10001D9D8(*(_QWORD *)(a1 + a2[12]), *(_BYTE *)(a1 + a2[12] + 8));
  return sub_10001D9D8(*(_QWORD *)(a1 + a2[13]), *(_BYTE *)(a1 + a2[13] + 8));
}

uint64_t sub_10005F308(uint64_t a1, uint64_t a2, int *a3)
{
  int *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v3 = a3;
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = a3[9];
  v23 = a1 + v9;
  v10 = a2 + v9;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  v11 = type metadata accessor for SymbolRenderingMode(0);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_retain();
  swift_retain();
  v12(v23, v10, v11);
  v13 = v3[11];
  *(_BYTE *)(a1 + v3[10]) = *(_BYTE *)(a2 + v3[10]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  v14 = v3[12];
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = *(_QWORD *)v16;
  LOBYTE(v7) = *(_BYTE *)(v16 + 8);
  sub_10001D97C(*(_QWORD *)v16, v7);
  *(_QWORD *)v15 = v17;
  *(_BYTE *)(v15 + 8) = v7;
  v18 = v3[13];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = *(_QWORD *)v20;
  LOBYTE(v3) = *(_BYTE *)(v20 + 8);
  sub_10001D97C(*(_QWORD *)v20, (char)v3);
  *(_QWORD *)v19 = v21;
  *(_BYTE *)(v19 + 8) = (_BYTE)v3;
  return a1;
}

uint64_t sub_10005F430(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  swift_release();
  v10 = a3[9];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for SymbolRenderingMode(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  v14 = a3[12];
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = *(_QWORD *)v16;
  LOBYTE(v12) = *(_BYTE *)(v16 + 8);
  sub_10001D97C(*(_QWORD *)v16, v12);
  v18 = *(_QWORD *)v15;
  v19 = *(_BYTE *)(v15 + 8);
  *(_QWORD *)v15 = v17;
  *(_BYTE *)(v15 + 8) = v12;
  sub_10001D9D8(v18, v19);
  v20 = a3[13];
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = *(_QWORD *)v22;
  LOBYTE(a3) = *(_BYTE *)(v22 + 8);
  sub_10001D97C(*(_QWORD *)v22, (char)a3);
  v24 = *(_QWORD *)v21;
  v25 = *(_BYTE *)(v21 + 8);
  *(_QWORD *)v21 = v23;
  *(_BYTE *)(v21 + 8) = (_BYTE)a3;
  sub_10001D9D8(v24, v25);
  return a1;
}

uint64_t sub_10005F58C(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  v8 = a3[9];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for SymbolRenderingMode(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + v12) = *(_BYTE *)(a2 + v12);
  v13 = a3[12];
  v14 = a3[13];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  v17 = a1 + v14;
  v18 = a2 + v14;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  return a1;
}

uint64_t sub_10005F650(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_release();
  v10 = a3[9];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for SymbolRenderingMode(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  v14 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + v14) = *(_BYTE *)(a2 + v14);
  v15 = a3[12];
  v16 = a1 + v15;
  v17 = (uint64_t *)(a2 + v15);
  v18 = *v17;
  LOBYTE(v17) = *((_BYTE *)v17 + 8);
  v19 = *(_QWORD *)v16;
  v20 = *(_BYTE *)(v16 + 8);
  *(_QWORD *)v16 = v18;
  *(_BYTE *)(v16 + 8) = (_BYTE)v17;
  sub_10001D9D8(v19, v20);
  v21 = a3[13];
  v22 = a1 + v21;
  v23 = (uint64_t *)(a2 + v21);
  v24 = *v23;
  LOBYTE(v23) = *((_BYTE *)v23 + 8);
  v25 = *(_QWORD *)v22;
  v26 = *(_BYTE *)(v22 + 8);
  *(_QWORD *)v22 = v24;
  *(_BYTE *)(v22 + 8) = (_BYTE)v23;
  sub_10001D9D8(v25, v26);
  return a1;
}

uint64_t sub_10005F760(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005F76C);
}

uint64_t sub_10005F76C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 40);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for SymbolRenderingMode(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 36), a2, v8);
  }
}

uint64_t sub_10005F7E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005F7F4);
}

uint64_t sub_10005F7F4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 40) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for SymbolRenderingMode(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 36), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for TFSymbol(uint64_t a1)
{
  return sub_1000050B8(a1, qword_10009A5E0, (uint64_t)&nominal type descriptor for TFSymbol);
}

uint64_t sub_10005F87C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[10];

  v4[0] = &unk_100075BA0;
  v4[1] = &unk_100075BA0;
  v4[2] = &unk_100075B68;
  v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[4] = "\b";
  result = type metadata accessor for SymbolRenderingMode(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(result - 8) + 64;
    v4[6] = &unk_100075B68;
    v4[7] = &unk_100075B68;
    v4[8] = &unk_100075B80;
    v4[9] = &unk_100075B80;
    swift_initStructMetadata(a1, 256, 10, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10005F924(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 32);
}

uint64_t sub_10005F92C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100075BA0;
    v4[2] = &unk_100075B80;
    v4[3] = &unk_100075B80;
    swift_initStructMetadata(a1, 0, 4, v4, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t *sub_10005F9AC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 9 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_BYTE *)v10 = *(_BYTE *)v11;
    *(_QWORD *)(v10 + 8) = *(_QWORD *)(v11 + 8);
    v12 = (v10 + 23) & 0xFFFFFFFFFFFFFFF8;
    v13 = (v11 + 23) & 0xFFFFFFFFFFFFFFF8;
    v14 = *(_QWORD *)v13;
    v15 = *(_BYTE *)(v13 + 8);
    swift_retain();
    sub_10001D97C(v14, v15);
    *(_QWORD *)v12 = v14;
    *(_BYTE *)(v12 + 8) = v15;
    v16 = (v10 + 39) & 0xFFFFFFFFFFFFFFF8;
    v17 = (v11 + 39) & 0xFFFFFFFFFFFFFFF8;
    v18 = *(_QWORD *)v17;
    v19 = *(_BYTE *)(v17 + 8);
    sub_10001D97C(*(_QWORD *)v17, v19);
    *(_QWORD *)v16 = v18;
    *(_BYTE *)(v16 + 8) = v19;
  }
  return v4;
}

uint64_t sub_10005FAD0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = (a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  sub_10001D9D8(*(_QWORD *)((v4 + 23) & 0xFFFFFFFFFFFFFFF8), *(_BYTE *)(((v4 + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
  return sub_10001D9D8(*(_QWORD *)((v4 + 39) & 0xFFFFFFFFFFFFFFF8), *(_BYTE *)(((v4 + 39) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_10005FB38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v7 = *(_BYTE *)v8;
  *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 + 8);
  v9 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)v10;
  LOBYTE(v5) = *(_BYTE *)(v10 + 8);
  swift_retain();
  sub_10001D97C(v11, v5);
  *(_QWORD *)v9 = v11;
  *(_BYTE *)(v9 + 8) = v5;
  v12 = (v7 + 39) & 0xFFFFFFFFFFFFFFF8;
  v13 = (v8 + 39) & 0xFFFFFFFFFFFFFFF8;
  v14 = *(_QWORD *)v13;
  LOBYTE(v5) = *(_BYTE *)(v13 + 8);
  sub_10001D97C(*(_QWORD *)v13, v5);
  *(_QWORD *)v12 = v14;
  *(_BYTE *)(v12 + 8) = v5;
  return a1;
}

uint64_t sub_10005FC00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v7 = *(_BYTE *)v8;
  *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 + 8);
  swift_retain();
  swift_release();
  v9 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)v10;
  LOBYTE(v5) = *(_BYTE *)(v10 + 8);
  sub_10001D97C(*(_QWORD *)v10, v5);
  v12 = *(_QWORD *)v9;
  v13 = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v9 = v11;
  *(_BYTE *)(v9 + 8) = v5;
  sub_10001D9D8(v12, v13);
  v14 = (v7 + 39) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v8 + 39) & 0xFFFFFFFFFFFFFFF8;
  v16 = *(_QWORD *)v15;
  LOBYTE(v5) = *(_BYTE *)(v15 + 8);
  sub_10001D97C(*(_QWORD *)v15, v5);
  v17 = *(_QWORD *)v14;
  v18 = *(_BYTE *)(v14 + 8);
  *(_QWORD *)v14 = v16;
  *(_BYTE *)(v14 + 8) = v5;
  sub_10001D9D8(v17, v18);
  return a1;
}

uint64_t sub_10005FCEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = ((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  *(_QWORD *)v9 = v11;
  v12 = ((unint64_t)v7 + 39) & 0xFFFFFFFFFFFFFFF8;
  v13 = ((unint64_t)v8 + 39) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v9) = *(_BYTE *)(v13 + 8);
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = v9;
  return a1;
}

uint64_t sub_10005FD88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v7 = *(_BYTE *)v8;
  *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 + 8);
  swift_release();
  v9 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)v10;
  LOBYTE(v10) = *(_BYTE *)(v10 + 8);
  v12 = *(_QWORD *)v9;
  v13 = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v9 = v11;
  *(_BYTE *)(v9 + 8) = v10;
  sub_10001D9D8(v12, v13);
  v14 = (v7 + 39) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v8 + 39) & 0xFFFFFFFFFFFFFFF8;
  v16 = *(_QWORD *)v15;
  LOBYTE(v15) = *(_BYTE *)(v15 + 8);
  v17 = *(_QWORD *)v14;
  v18 = *(_BYTE *)(v14 + 8);
  *(_QWORD *)v14 = v16;
  *(_BYTE *)(v14 + 8) = v15;
  sub_10001D9D8(v17, v18);
  return a1;
}

uint64_t sub_10005FE4C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v14;
  int v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFE)
    {
      v14 = *(_QWORD *)(((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 8);
      if (v14 >= 0xFFFFFFFF)
        LODWORD(v14) = -1;
      v15 = v14 - 1;
      if (v15 < 0)
        v15 = -1;
      return (v15 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    v8 = ((((v7 + 7) & 0xFFFFFFF8) + 39) & 0xFFFFFFF8) + 9;
    v9 = (a2 - v6 + 255) >> (8 * v8);
    if (v8 < 4)
      v10 = v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    return ((uint64_t (*)(void))((char *)&loc_10005FEDC + 4 * byte_100075A8F[v12]))();
  }
}

void sub_10005FF7C(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 9;
  if (v6 >= a3)
  {
    v10 = 0;
    if (v6 >= a2)
      goto LABEL_17;
  }
  else
  {
    if (v7 <= 3)
      v8 = ((a3 - v6 + 255) >> (8 * v7)) + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (v6 >= a2)
LABEL_17:
      __asm { BR              X12 }
  }
  if (v7 >= 4)
    v11 = ~v6 + a2;
  else
    v11 = (~(_BYTE)v6 + a2);
  bzero(a1, v7);
  if ((_DWORD)v7 == 1)
    *a1 = v11;
  else
    *(_DWORD *)a1 = v11;
  __asm { BR              X10 }
}

void sub_1000600A0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x100060120);
}

void sub_1000600A8(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1000600B0);
  JUMPOUT(0x100060120);
}

void sub_1000600F8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x100060120);
}

void sub_100060100()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x100060120);
}

uint64_t sub_100060108(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFE)
  {
    if (a2 > 0x7FFFFFFE)
      JUMPOUT(0x100060114);
    *(_QWORD *)(((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) = a2;
LABEL_6:
    JUMPOUT(0x100060120);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

uint64_t type metadata accessor for TFMenuLabel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100062D44(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TFMenuLabel);
}

_QWORD *sub_100060144(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v27 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v27 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a3[6];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for SymbolRenderingMode(0);
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    v13(v10, v11, v12);
    v14 = a3[7];
    v15 = a3[8];
    v16 = (_QWORD *)((char *)v4 + v14);
    v17 = (_QWORD *)((char *)a2 + v14);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    *((_BYTE *)v4 + v15) = *((_BYTE *)a2 + v15);
    v19 = a3[9];
    v20 = a3[10];
    v21 = (char *)v4 + v19;
    v22 = (char *)a2 + v19;
    v23 = *((_QWORD *)v22 + 1);
    *(_QWORD *)v21 = *(_QWORD *)v22;
    *((_QWORD *)v21 + 1) = v23;
    v21[16] = v22[16];
    v24 = (char *)v4 + v20;
    v25 = (char *)a2 + v20;
    v26 = *(_QWORD *)((char *)a2 + v20);
    LOBYTE(v8) = v25[8];
    swift_bridgeObjectRetain(v18);
    swift_retain();
    swift_retain();
    sub_10001D97C(v26, v8);
    *(_QWORD *)v24 = v26;
    v24[8] = v8;
  }
  return v4;
}

uint64_t sub_100060278(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v4 = a1 + a2[6];
  v5 = type metadata accessor for SymbolRenderingMode(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8));
  swift_release();
  swift_release();
  return sub_10001D9D8(*(_QWORD *)(a1 + a2[10]), *(_BYTE *)(a1 + a2[10] + 8));
}

_QWORD *sub_10006030C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a3[6];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for SymbolRenderingMode(0);
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  v12(v9, v10, v11);
  v13 = a3[7];
  v14 = a3[8];
  v15 = (_QWORD *)((char *)a1 + v13);
  v16 = (_QWORD *)((char *)a2 + v13);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  *((_BYTE *)a1 + v14) = *((_BYTE *)a2 + v14);
  v18 = a3[9];
  v19 = a3[10];
  v20 = (char *)a1 + v18;
  v21 = (char *)a2 + v18;
  v22 = *((_QWORD *)v21 + 1);
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *((_QWORD *)v20 + 1) = v22;
  v20[16] = v21[16];
  v23 = (char *)a1 + v19;
  v24 = (char *)a2 + v19;
  v25 = *(_QWORD *)((char *)a2 + v19);
  LOBYTE(v7) = v24[8];
  swift_bridgeObjectRetain(v17);
  swift_retain();
  swift_retain();
  sub_10001D97C(v25, v7);
  *(_QWORD *)v23 = v25;
  v23[8] = v7;
  return a1;
}

_QWORD *sub_100060414(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for SymbolRenderingMode(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  v14 = a3[7];
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (_QWORD *)((char *)a2 + v14);
  *v15 = *v16;
  v17 = v16[1];
  v18 = v15[1];
  v15[1] = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v19 = a3[9];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  *(_QWORD *)((char *)a1 + v19) = *(_QWORD *)((char *)a2 + v19);
  swift_retain();
  swift_release();
  *((_QWORD *)v20 + 1) = *((_QWORD *)v21 + 1);
  swift_retain();
  swift_release();
  v20[16] = v21[16];
  v22 = a3[10];
  v23 = (char *)a1 + v22;
  v24 = (char *)a2 + v22;
  v25 = *(_QWORD *)v24;
  LOBYTE(a3) = v24[8];
  sub_10001D97C(*(_QWORD *)v24, (char)a3);
  v26 = *(_QWORD *)v23;
  v27 = v23[8];
  *(_QWORD *)v23 = v25;
  v23[8] = (char)a3;
  sub_10001D9D8(v26, v27);
  return a1;
}

_OWORD *sub_100060568(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for SymbolRenderingMode(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[8];
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  *((_BYTE *)a1 + v11) = *((_BYTE *)a2 + v11);
  v12 = a3[9];
  v13 = a3[10];
  v14 = (char *)a1 + v12;
  v15 = (char *)a2 + v12;
  v14[16] = v15[16];
  *(_OWORD *)v14 = *(_OWORD *)v15;
  v16 = (char *)a1 + v13;
  v17 = (char *)a2 + v13;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v16[8] = v17[8];
  return a1;
}

_QWORD *sub_10006061C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for SymbolRenderingMode(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  v14 = a3[7];
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (_QWORD *)((char *)a2 + v14);
  v18 = *v16;
  v17 = v16[1];
  v19 = v15[1];
  *v15 = v18;
  v15[1] = v17;
  swift_bridgeObjectRelease(v19);
  v20 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  *(_QWORD *)((char *)a1 + v20) = *(_QWORD *)((char *)a2 + v20);
  swift_release();
  *((_QWORD *)v21 + 1) = *((_QWORD *)v22 + 1);
  swift_release();
  v21[16] = v22[16];
  v23 = a3[10];
  v24 = (char *)a1 + v23;
  v25 = (char *)a2 + v23;
  v26 = *(_QWORD *)v25;
  LOBYTE(v25) = v25[8];
  v27 = *(_QWORD *)v24;
  v28 = v24[8];
  *(_QWORD *)v24 = v26;
  v24[8] = (char)v25;
  sub_10001D9D8(v27, v28);
  return a1;
}

uint64_t sub_100060720(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006072C);
}

uint64_t sub_10006072C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for SymbolRenderingMode(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 24), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 36) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1000607B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000607BC);
}

uint64_t sub_1000607BC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for SymbolRenderingMode(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 24), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 36) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for TFToggle(uint64_t a1)
{
  return sub_1000050B8(a1, qword_10009A710, (uint64_t)&nominal type descriptor for TFToggle);
}

uint64_t sub_100060850(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10006085C(a1, a2, a3, (uint64_t)&unk_100075C70);
}

uint64_t sub_10006085C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v7;
  _QWORD v8[7];

  v8[0] = &unk_100075BA0;
  v8[1] = &unk_100075BA0;
  result = type metadata accessor for SymbolRenderingMode(319);
  if (v7 <= 0x3F)
  {
    v8[2] = *(_QWORD *)(result - 8) + 64;
    v8[3] = &unk_100075BA0;
    v8[4] = &unk_100075B68;
    v8[5] = a4;
    v8[6] = &unk_100075B80;
    swift_initStructMetadata(a1, 256, 7, v8, a1 + 16);
    return 0;
  }
  return result;
}

void sub_1000608F4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[8];

  v6[0] = "\t";
  v6[1] = &unk_100075B68;
  sub_10000470C(319, (unint64_t *)&unk_10009A7E0, (uint64_t (*)(uint64_t))&type metadata accessor for HoverEffect, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v3 <= 0x3F)
  {
    v6[2] = *(_QWORD *)(v2 - 8) + 64;
    v4 = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      v6[4] = &unk_100075B80;
      v6[5] = &unk_100075B80;
      v6[6] = &unk_100075B80;
      v6[7] = &unk_100075BA0;
      swift_initStructMetadata(a1, 0, 8, v6, a1 + 32);
    }
  }
}

uint64_t sub_1000609C0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char *v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;

  v6 = type metadata accessor for HoverEffect(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  if (*(_DWORD *)(v7 + 84))
    v9 = *(_QWORD *)(v7 + 64);
  else
    v9 = *(_QWORD *)(v7 + 64) + 1;
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_DWORD *)(v11 + 80);
  v13 = *(_QWORD *)(v11 + 64);
  if ((v12 | v8) > 7
    || ((*(_DWORD *)(v11 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || ((v13 + ((v9 + ((v8 + 10) & ~v8) + v12) & ~v12) + 55) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v16 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v16 + (((v12 | v8) & 0xF8 ^ 0x1F8) & ((v12 | v8) + 16));
  }
  else
  {
    v17 = v6;
    v18 = ~v8;
    v40 = ~v12;
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    *(_BYTE *)(a1 + 9) = *((_BYTE *)a2 + 9);
    v19 = a1 + v8;
    v20 = (uint64_t)a2 + v8;
    v21 = (void *)((v19 + 10) & v18);
    v22 = (char *)((v20 + 10) & v18);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v22, 1, v6))
    {
      memcpy(v21, v22, v9);
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v7 + 16))(v21, v22, v17);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v21, 0, 1, v17);
    }
    v23 = &v22[v9];
    v24 = ((unint64_t)v21 + v9 + v12) & v40;
    v25 = (unint64_t)&v23[v12] & v40;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 16))(v24, v25, v10);
    v26 = v24 + v13;
    v27 = v25 + v13;
    v28 = (v24 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
    v29 = (v27 + 7) & 0xFFFFFFFFFFFFFFF8;
    v30 = *(_QWORD *)v29;
    LOBYTE(v24) = *(_BYTE *)(v29 + 8);
    sub_10001D97C(*(_QWORD *)v29, v24);
    *(_QWORD *)v28 = v30;
    *(_BYTE *)(v28 + 8) = v24;
    v31 = (v26 + 23) & 0xFFFFFFFFFFFFFFF8;
    v32 = (v27 + 23) & 0xFFFFFFFFFFFFFFF8;
    v33 = *(_QWORD *)v32;
    LOBYTE(v24) = *(_BYTE *)(v32 + 8);
    sub_10001D97C(*(_QWORD *)v32, v24);
    *(_QWORD *)v31 = v33;
    *(_BYTE *)(v31 + 8) = v24;
    v34 = (v26 + 39) & 0xFFFFFFFFFFFFFFF8;
    v35 = (v27 + 39) & 0xFFFFFFFFFFFFFFF8;
    v36 = *(_QWORD *)v35;
    LOBYTE(v24) = *(_BYTE *)(v35 + 8);
    sub_10001D97C(*(_QWORD *)v35, v24);
    *(_QWORD *)v34 = v36;
    *(_BYTE *)(v34 + 8) = v24;
    v37 = (v26 + 55) & 0xFFFFFFFFFFFFFFF8;
    v38 = (v27 + 55) & 0xFFFFFFFFFFFFFFF8;
    *(_BYTE *)v37 = *(_BYTE *)v38;
    *(_QWORD *)(v37 + 8) = *(_QWORD *)(v38 + 8);
  }
  swift_retain();
  return a1;
}

uint64_t sub_100060C1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v4 = type metadata accessor for HoverEffect(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = (a1 + *(unsigned __int8 *)(v5 + 80) + 10) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4))
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v6, v4);
  v7 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v8 = *(_QWORD *)(v5 + 64) + v6;
  if (!*(_DWORD *)(v5 + 84))
    ++v8;
  v9 = (v8 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  (*(void (**)(unint64_t))(v7 + 8))(v9);
  v10 = v9 + *(_QWORD *)(v7 + 64);
  sub_10001D9D8(*(_QWORD *)((v10 + 7) & 0xFFFFFFFFFFFFFFF8), *(_BYTE *)(((v10 + 7) & 0xFFFFFFFFFFFFFFF8) + 8));
  sub_10001D9D8(*(_QWORD *)((v10 + 23) & 0xFFFFFFFFFFFFFFF8), *(_BYTE *)(((v10 + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
  sub_10001D9D8(*(_QWORD *)((v10 + 39) & 0xFFFFFFFFFFFFFFF8), *(_BYTE *)(((v10 + 39) & 0xFFFFFFFFFFFFFFF8) + 8));
  return swift_release();
}

uint64_t sub_100060D10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  int v11;
  size_t v12;
  size_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  v6 = type metadata accessor for HoverEffect(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (void *)((v8 + 10 + a1) & ~v8);
  v10 = (const void *)((v8 + 10 + a2) & ~v8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6))
  {
    v11 = *(_DWORD *)(v7 + 84);
    v12 = *(_QWORD *)(v7 + 64);
    if (v11)
      v13 = v12;
    else
      v13 = v12 + 1;
    memcpy(v9, v10, v13);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v9, v10, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
    v11 = *(_DWORD *)(v7 + 84);
    v12 = *(_QWORD *)(v7 + 64);
  }
  if (v11)
    v14 = v12;
  else
    v14 = v12 + 1;
  v15 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = v14 + v16;
  v18 = ((unint64_t)v9 + v17) & ~v16;
  v19 = ((unint64_t)v10 + v17) & ~v16;
  (*(void (**)(unint64_t, unint64_t))(v15 + 16))(v18, v19);
  v20 = *(_QWORD *)(v15 + 64);
  v21 = v18 + v20;
  v22 = v19 + v20;
  v23 = (v18 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = (v19 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v25 = *(_QWORD *)v24;
  LOBYTE(v19) = *(_BYTE *)(v24 + 8);
  sub_10001D97C(*(_QWORD *)v24, v19);
  *(_QWORD *)v23 = v25;
  *(_BYTE *)(v23 + 8) = v19;
  v26 = (v21 + 23) & 0xFFFFFFFFFFFFFFF8;
  v27 = (v22 + 23) & 0xFFFFFFFFFFFFFFF8;
  v28 = *(_QWORD *)v27;
  LOBYTE(v19) = *(_BYTE *)(v27 + 8);
  sub_10001D97C(*(_QWORD *)v27, v19);
  *(_QWORD *)v26 = v28;
  *(_BYTE *)(v26 + 8) = v19;
  v29 = (v21 + 39) & 0xFFFFFFFFFFFFFFF8;
  v30 = (v22 + 39) & 0xFFFFFFFFFFFFFFF8;
  v31 = *(_QWORD *)v30;
  LOBYTE(v19) = *(_BYTE *)(v30 + 8);
  sub_10001D97C(*(_QWORD *)v30, v19);
  *(_QWORD *)v29 = v31;
  *(_BYTE *)(v29 + 8) = v19;
  v32 = (v21 + 55) & 0xFFFFFFFFFFFFFFF8;
  v33 = (v22 + 55) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v32 = *(_BYTE *)v33;
  *(_QWORD *)(v32 + 8) = *(_QWORD *)(v33 + 8);
  swift_retain();
  return a1;
}

uint64_t sub_100060EE0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  int v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  unint64_t v41;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 9) = *((_BYTE *)a2 + 9);
  v7 = type metadata accessor for HoverEffect(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (void *)((v9 + 10 + a1) & ~v9);
  v11 = (void *)(((unint64_t)a2 + v9 + 10) & ~v9);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  v13 = v12(v10, 1, v7);
  v14 = v12(v11, 1, v7);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 16))(v10, v11, v7);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, v7);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 24))(v10, v11, v7);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v10, v7);
  }
  if (*(_DWORD *)(v8 + 84))
    v15 = *(_QWORD *)(v8 + 64);
  else
    v15 = *(_QWORD *)(v8 + 64) + 1;
  memcpy(v10, v11, v15);
LABEL_10:
  if (*(_DWORD *)(v8 + 84))
    v16 = *(_QWORD *)(v8 + 64);
  else
    v16 = *(_QWORD *)(v8 + 64) + 1;
  v17 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v19 = v16 + v18;
  v20 = ((unint64_t)v10 + v19) & ~v18;
  v21 = ((unint64_t)v11 + v19) & ~v18;
  (*(void (**)(unint64_t, unint64_t))(v17 + 24))(v20, v21);
  v22 = *(_QWORD *)(v17 + 64);
  v23 = v20 + v22;
  v24 = v21 + v22;
  v25 = (v20 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v26 = (v21 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v27 = *(_QWORD *)v26;
  LOBYTE(v21) = *(_BYTE *)(v26 + 8);
  sub_10001D97C(*(_QWORD *)v26, v21);
  v28 = *(_QWORD *)v25;
  v29 = *(_BYTE *)(v25 + 8);
  *(_QWORD *)v25 = v27;
  *(_BYTE *)(v25 + 8) = v21;
  sub_10001D9D8(v28, v29);
  v30 = (v23 + 23) & 0xFFFFFFFFFFFFFFF8;
  v31 = (v24 + 23) & 0xFFFFFFFFFFFFFFF8;
  v32 = *(_QWORD *)v31;
  LOBYTE(v21) = *(_BYTE *)(v31 + 8);
  sub_10001D97C(*(_QWORD *)v31, v21);
  v33 = *(_QWORD *)v30;
  v34 = *(_BYTE *)(v30 + 8);
  *(_QWORD *)v30 = v32;
  *(_BYTE *)(v30 + 8) = v21;
  sub_10001D9D8(v33, v34);
  v35 = (v23 + 39) & 0xFFFFFFFFFFFFFFF8;
  v36 = (v24 + 39) & 0xFFFFFFFFFFFFFFF8;
  v37 = *(_QWORD *)v36;
  LOBYTE(v21) = *(_BYTE *)(v36 + 8);
  sub_10001D97C(*(_QWORD *)v36, v21);
  v38 = *(_QWORD *)v35;
  v39 = *(_BYTE *)(v35 + 8);
  *(_QWORD *)v35 = v37;
  *(_BYTE *)(v35 + 8) = v21;
  sub_10001D9D8(v38, v39);
  v40 = (v23 + 55) & 0xFFFFFFFFFFFFFFF8;
  v41 = (v24 + 55) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v40 = *(_BYTE *)v41;
  *(_QWORD *)(v40 + 8) = *(_QWORD *)(v41 + 8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_10006112C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  int v11;
  size_t v12;
  size_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  v6 = type metadata accessor for HoverEffect(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (void *)((v8 + 10 + a1) & ~v8);
  v10 = (const void *)((v8 + 10 + a2) & ~v8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6))
  {
    v11 = *(_DWORD *)(v7 + 84);
    v12 = *(_QWORD *)(v7 + 64);
    if (v11)
      v13 = v12;
    else
      v13 = v12 + 1;
    memcpy(v9, v10, v13);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(v9, v10, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
    v11 = *(_DWORD *)(v7 + 84);
    v12 = *(_QWORD *)(v7 + 64);
  }
  if (v11)
    v14 = v12;
  else
    v14 = v12 + 1;
  v15 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = v14 + v16;
  v18 = ((unint64_t)v9 + v17) & ~v16;
  v19 = ((unint64_t)v10 + v17) & ~v16;
  (*(void (**)(unint64_t, unint64_t))(v15 + 32))(v18, v19);
  v20 = *(_QWORD *)(v15 + 64);
  v21 = v18 + v20;
  v22 = v19 + v20;
  v23 = (v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = (v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v25 = *(_QWORD *)v24;
  *(_BYTE *)(v23 + 8) = *(_BYTE *)(v24 + 8);
  *(_QWORD *)v23 = v25;
  v26 = (v21 + 23) & 0xFFFFFFFFFFFFFFF8;
  v27 = (v22 + 23) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v25) = *(_BYTE *)(v27 + 8);
  *(_QWORD *)v26 = *(_QWORD *)v27;
  *(_BYTE *)(v26 + 8) = v25;
  v28 = (v21 + 39) & 0xFFFFFFFFFFFFFFF8;
  v29 = (v22 + 39) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v25) = *(_BYTE *)(v29 + 8);
  *(_QWORD *)v28 = *(_QWORD *)v29;
  *(_BYTE *)(v28 + 8) = v25;
  *(_OWORD *)((v21 + 55) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v22 + 55) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1000612CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  unint64_t v40;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  v6 = type metadata accessor for HoverEffect(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (void *)((v8 + 10 + a1) & ~v8);
  v10 = (void *)((v8 + 10 + a2) & ~v8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v12 = v11(v9, 1, v6);
  v13 = v11(v10, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v9, v10, v6);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(v9, v10, v6);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  }
  if (*(_DWORD *)(v7 + 84))
    v14 = *(_QWORD *)(v7 + 64);
  else
    v14 = *(_QWORD *)(v7 + 64) + 1;
  memcpy(v9, v10, v14);
LABEL_10:
  if (*(_DWORD *)(v7 + 84))
    v15 = *(_QWORD *)(v7 + 64);
  else
    v15 = *(_QWORD *)(v7 + 64) + 1;
  v16 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v17 = *(unsigned __int8 *)(v16 + 80);
  v18 = v15 + v17;
  v19 = ((unint64_t)v9 + v18) & ~v17;
  v20 = ((unint64_t)v10 + v18) & ~v17;
  (*(void (**)(unint64_t, unint64_t))(v16 + 40))(v19, v20);
  v21 = *(_QWORD *)(v16 + 64);
  v22 = v19 + v21;
  v23 = v20 + v21;
  v24 = (v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v25 = (v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  v26 = *(_QWORD *)v25;
  LOBYTE(v25) = *(_BYTE *)(v25 + 8);
  v27 = *(_QWORD *)v24;
  v28 = *(_BYTE *)(v24 + 8);
  *(_QWORD *)v24 = v26;
  *(_BYTE *)(v24 + 8) = v25;
  sub_10001D9D8(v27, v28);
  v29 = (v22 + 23) & 0xFFFFFFFFFFFFFFF8;
  v30 = (v23 + 23) & 0xFFFFFFFFFFFFFFF8;
  v31 = *(_QWORD *)v30;
  LOBYTE(v30) = *(_BYTE *)(v30 + 8);
  v32 = *(_QWORD *)v29;
  v33 = *(_BYTE *)(v29 + 8);
  *(_QWORD *)v29 = v31;
  *(_BYTE *)(v29 + 8) = v30;
  sub_10001D9D8(v32, v33);
  v34 = (v22 + 39) & 0xFFFFFFFFFFFFFFF8;
  v35 = (v23 + 39) & 0xFFFFFFFFFFFFFFF8;
  v36 = *(_QWORD *)v35;
  LOBYTE(v35) = *(_BYTE *)(v35 + 8);
  v37 = *(_QWORD *)v34;
  v38 = *(_BYTE *)(v34 + 8);
  *(_QWORD *)v34 = v36;
  *(_BYTE *)(v34 + 8) = v35;
  sub_10001D9D8(v37, v38);
  v39 = (v22 + 55) & 0xFFFFFFFFFFFFFFF8;
  v40 = (v23 + 55) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v39 = *(_BYTE *)v40;
  *(_QWORD *)(v39 + 8) = *(_QWORD *)(v40 + 8);
  swift_release();
  return a1;
}

uint64_t sub_1000614EC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  int v24;

  v6 = *(_QWORD *)(type metadata accessor for HoverEffect(0) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7)
    v8 = v7 - 1;
  else
    v8 = 0;
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v10 = *(_DWORD *)(v9 + 84);
  if (v8 <= v10)
    v11 = *(_DWORD *)(v9 + 84);
  else
    v11 = v8;
  if (v11 <= 0x7FFFFFFE)
    v11 = 2147483646;
  v12 = *(_QWORD *)(v6 + 64);
  if (!v7)
    ++v12;
  if (!a2)
    return 0;
  v13 = *(unsigned __int8 *)(v6 + 80);
  v14 = *(unsigned __int8 *)(v9 + 80);
  v15 = *(_QWORD *)(v9 + 64) + 55;
  if (v11 < a2)
  {
    if (((((v15 + ((v12 + ((v13 + 10) & ~v13) + v14) & ~v14)) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v16 = 2;
    else
      v16 = a2 - v11 + 1;
    if (v16 >= 0x10000)
      v17 = 4;
    else
      v17 = 2;
    if (v16 < 0x100)
      v17 = 1;
    if (v16 >= 2)
      v18 = v17;
    else
      v18 = 0;
    __asm { BR              X6 }
  }
  v19 = (a1 + v13 + 10) & ~v13;
  if (v8 == v11)
  {
    if (v7 < 2)
      return 0;
    v22 = (*(uint64_t (**)(uint64_t))(v6 + 48))(v19);
    if (v22 >= 2)
      return v22 - 1;
    else
      return 0;
  }
  else
  {
    v21 = (v19 + v12 + v14) & ~v14;
    if (v10 == v11)
    {
      return (*(uint64_t (**)(uint64_t, _QWORD))(v9 + 48))(v21, *(unsigned int *)(v9 + 84));
    }
    else
    {
      v23 = *(_QWORD *)(((v15 + v21) & 0xFFFFFFFFFFFFF8) + 8);
      if (v23 >= 0xFFFFFFFF)
        LODWORD(v23) = -1;
      v24 = v23 - 1;
      if (v24 < 0)
        v24 = -1;
      return (v24 + 1);
    }
  }
}

void sub_1000616C4(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;

  v8 = 0;
  v9 = *(_QWORD *)(type metadata accessor for HoverEffect(0) - 8);
  v10 = *(_DWORD *)(v9 + 84);
  if (v10)
    v11 = v10 - 1;
  else
    v11 = 0;
  v12 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (v11 <= *(_DWORD *)(v12 + 84))
    v13 = *(_DWORD *)(v12 + 84);
  else
    v13 = v11;
  if (v13 <= 0x7FFFFFFE)
    v13 = 2147483646;
  if (v10)
    v15 = *(_QWORD *)(v9 + 64);
  else
    v15 = *(_QWORD *)(v9 + 64) + 1;
  v16 = *(unsigned __int8 *)(v12 + 80);
  v14 = (*(unsigned __int8 *)(v9 + 80) + 10) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  if (v13 < a3)
  {
    if (((*(_DWORD *)(v12 + 64) + 55 + (((_DWORD)v15 + (_DWORD)v14 + (_DWORD)v16) & ~(_DWORD)v16)) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v17 = a3 - v13 + 1;
    else
      v17 = 2;
    if (v17 >= 0x10000)
      v18 = 4;
    else
      v18 = 2;
    if (v17 < 0x100)
      v18 = 1;
    if (v17 >= 2)
      v8 = v18;
    else
      v8 = 0;
  }
  if (a2 > v13)
  {
    if (((*(_DWORD *)(v12 + 64) + 55 + (((_DWORD)v15 + (_DWORD)v14 + (_DWORD)v16) & ~(_DWORD)v16)) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      v19 = ~v13 + a2;
      bzero(a1, ((*(_QWORD *)(v12 + 64) + 55 + ((v15 + v14 + v16) & ~v16)) & 0xFFFFFFFFFFFFFFF8) + 16);
      *a1 = v19;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X6 }
}

uint64_t sub_10006180C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v19;

  *(_BYTE *)(v15 + v16) = 0;
  if ((_DWORD)v14)
  {
    result &= v15 + v13 + 10;
    if (v9 == v8)
    {
      v17 = (v14 + 1);
      v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56);
      a4 = a5;
      return v18(result, v17, a3, a4);
    }
    result = (result + v11 + v10) & a2;
    if ((_DWORD)v5 == v8)
    {
      v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);
      v17 = v14;
      a3 = v5;
      return v18(result, v17, a3, a4);
    }
    v19 = (_QWORD *)((v12 + result) & 0xFFFFFFFFFFFFFFF8);
    if (v14 > 0x7FFFFFFE)
    {
      *v19 = (v14 - 0x7FFFFFFF);
      v19[1] = 0;
    }
    else
    {
      v19[1] = v14;
    }
  }
  return result;
}

uint64_t type metadata accessor for TFComponent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100062D44(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TFComponent);
}

uint64_t sub_1000618E4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000797B8, 1);
}

uint64_t sub_1000618F4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100079790, 1);
}

uint64_t sub_100061904(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100079768, 1);
}

uint64_t sub_100061914(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100079740, 1);
}

uint64_t sub_100061924(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100079718, 1);
}

uint64_t sub_100061934(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_1000796E4, 1);
}

uint64_t sub_100061968(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000796BC, 1);
}

uint64_t sub_100061978(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100079694, 1);
}

uint64_t sub_100061988(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_100079660, 1);
}

uint64_t sub_1000619BC(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_10007962C, 1);
}

unint64_t sub_1000619F0()
{
  unint64_t result;

  result = qword_10009A7F8;
  if (!qword_10009A7F8)
  {
    result = swift_getWitnessTable(&unk_1000765B0, &type metadata for ComponentItem);
    atomic_store(result, (unint64_t *)&qword_10009A7F8);
  }
  return result;
}

unint64_t sub_100061A34()
{
  unint64_t result;

  result = qword_10009A828;
  if (!qword_10009A828)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for _HoverRegionModifier, &type metadata for _HoverRegionModifier);
    atomic_store(result, (unint64_t *)&qword_10009A828);
  }
  return result;
}

uint64_t sub_100061A78@<X0>(uint64_t a1@<X3>, char *a2@<X8>)
{
  uint64_t v2;

  return sub_10005392C(*(uint64_t **)(v2 + 32), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a1, a2);
}

unint64_t sub_100061A84()
{
  unint64_t result;

  result = qword_10009A840;
  if (!qword_10009A840)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AnyShape, &type metadata for AnyShape);
    atomic_store(result, (unint64_t *)&qword_10009A840);
  }
  return result;
}

uint64_t sub_100061AC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = (int *)type metadata accessor for TFComponent(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = *(_QWORD *)(v7 + 64);
  v11 = v4 + v9;
  v12 = v4 + v9 + v6[10];
  v13 = type metadata accessor for HoverEffect(0);
  v14 = *(_QWORD *)(v13 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v11 + v6[11], v5);
  sub_10001D9D8(*(_QWORD *)(v11 + v6[12]), *(_BYTE *)(v11 + v6[12] + 8));
  sub_10001D9D8(*(_QWORD *)(v11 + v6[13]), *(_BYTE *)(v11 + v6[13] + 8));
  sub_10001D9D8(*(_QWORD *)(v11 + v6[14]), *(_BYTE *)(v11 + v6[14] + 8));
  swift_release();
  return swift_deallocObject(v4, v9 + v10, v8 | 7);
}

uint64_t sub_100061BE4(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TFComponent(0, v6, v7, a4) - 8) + 80);
  return sub_100053D50(a1, v4 + ((v8 + 32) & ~v8), v6, v7);
}

unint64_t sub_100061C3C()
{
  unint64_t result;

  result = qword_10009A8A8;
  if (!qword_10009A8A8)
  {
    result = swift_getWitnessTable(&unk_100076578, &type metadata for TFPressedButtonStyle);
    atomic_store(result, (unint64_t *)&qword_10009A8A8);
  }
  return result;
}

uint64_t sub_100061C88@<X0>(char *a1@<X8>)
{
  uint64_t *v1;

  return sub_1000584E0(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_100061CA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = type metadata accessor for TFButton(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80);
  return (*(uint64_t (**)(void))(v4 + *(int *)(v5 + 48) + ((v6 + 32) & ~v6)))();
}

uint64_t sub_100061CF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = (int *)type metadata accessor for TFButton(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v8 | 7;
  v12 = v4 + v9;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4 + v9 + v6[11], v5);
  swift_release();
  swift_release();

  swift_release();
  sub_10001D9D8(*(_QWORD *)(v12 + v6[15]), *(_BYTE *)(v12 + v6[15] + 8));
  return swift_deallocObject(v4, v10, v11);
}

uint64_t sub_100061DBC(double a1, double a2, double a3, double a4)
{
  return sub_1000628A8((uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TFButton, (uint64_t (*)(uint64_t, uint64_t, uint64_t, double, double, double, double))sub_100059020, a1, a2, a3, a4);
}

uint64_t type metadata accessor for TFComponentBackground(uint64_t a1)
{
  return sub_1000050B8(a1, qword_10009ABD0, (uint64_t)&nominal type descriptor for TFComponentBackground);
}

uint64_t sub_100061DEC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000555B8(*(uint64_t **)(v1 + 16), a1);
}

unint64_t sub_100061DF4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10009A930;
  if (!qword_10009A930)
  {
    v1 = sub_100004660(&qword_10009A928);
    sub_100007D90(&qword_10009A938, type metadata accessor for TFLabel, (uint64_t)&unk_100075CC0);
    sub_10000966C(&qword_10009A940, &qword_10009A948, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10009A930);
  }
  return result;
}

unint64_t sub_100061E90()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = qword_10009A958;
  if (!qword_10009A958)
  {
    v1 = sub_100004660(&qword_10009A910);
    v6 = sub_100004660(&qword_10009A918);
    v7 = type metadata accessor for ButtonToggleStyle(255);
    v8 = sub_10000966C((unint64_t *)&unk_10009A960, &qword_10009A918, (uint64_t)&protocol conformance descriptor for Toggle<A>);
    v9 = sub_100007D90(&qword_10009A100, (uint64_t (*)(uint64_t))&type metadata accessor for ButtonToggleStyle, (uint64_t)&protocol conformance descriptor for ButtonToggleStyle);
    swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.toggleStyle<A>(_:)>>, 1);
    v2 = sub_100004660(&qword_10009A8F0);
    v3 = type metadata accessor for HighlightHoverEffect(255);
    v4 = sub_100061FDC();
    v5 = sub_100007D90(&qword_10009A860, (uint64_t (*)(uint64_t))&type metadata accessor for HighlightHoverEffect, (uint64_t)&protocol conformance descriptor for HighlightHoverEffect);
    v6 = v2;
    v7 = v3;
    v8 = v4;
    v9 = v5;
    swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10009A958);
  }
  return result;
}

unint64_t sub_100061FDC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_10009A970;
  if (!qword_10009A970)
  {
    v1 = sub_100004660(&qword_10009A8F0);
    v2[0] = sub_100004660(&qword_10009A8E0);
    v2[1] = sub_100062088();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.onTapGesture(count:perform:)>>, 1);
    sub_100007D90(&qword_1000987F0, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10009A970);
  }
  return result;
}

unint64_t sub_100062088()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10009A978;
  if (!qword_10009A978)
  {
    v1 = sub_100004660(&qword_10009A8E0);
    sub_10006210C();
    sub_10000966C(&qword_10009A940, &qword_10009A948, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10009A978);
  }
  return result;
}

unint64_t sub_10006210C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10009A980;
  if (!qword_10009A980)
  {
    v1 = sub_100004660(&qword_10009A220);
    sub_100007D90(&qword_10009A938, type metadata accessor for TFLabel, (uint64_t)&unk_100075CC0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10009A980);
  }
  return result;
}

uint64_t sub_10006219C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = (int *)type metadata accessor for TFToggle(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + 24));
  v8 = v7 + v1[6];
  v9 = type metadata accessor for SymbolRenderingMode(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[7] + 8));
  swift_release();
  swift_release();
  sub_10001D9D8(*(_QWORD *)(v7 + v1[10]), *(_BYTE *)(v7 + v1[10] + 8));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100062270()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TFToggle(0) - 8) + 80);
  return sub_100055500(v0 + ((v1 + 16) & ~v1));
}

uint64_t sub_1000622A0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_1000550F0(*(uint64_t **)(v1 + 16), a1);
}

uint64_t sub_1000622B0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isHoverEffectEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1000622DC(unsigned __int8 *a1)
{
  return EnvironmentValues.isHoverEffectEnabled.setter(*a1);
}

_QWORD *sub_100062300@<X0>(_BYTE *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_1000623C8();
  result = EnvironmentValues.subscript.getter(&v4, &type metadata for TFComponentIsHoveredKey, &type metadata for TFComponentIsHoveredKey, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_10006234C(char *a1)
{
  unint64_t v1;
  char v3;

  v3 = *a1;
  v1 = sub_1000623C8();
  return EnvironmentValues.subscript.setter(&v3, &type metadata for TFComponentIsHoveredKey, &type metadata for TFComponentIsHoveredKey, v1);
}

uint64_t sub_10006239C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.accessibilityShowButtonShapes.getter();
  *a1 = result & 1;
  return result;
}

unint64_t sub_1000623C8()
{
  unint64_t result;

  result = qword_10009A990;
  if (!qword_10009A990)
  {
    result = swift_getWitnessTable(&unk_100076A58, &type metadata for TFComponentIsHoveredKey);
    atomic_store(result, (unint64_t *)&qword_10009A990);
  }
  return result;
}

uint64_t sub_10006240C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100062430(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[9];
  uint64_t v6;

  v2 = *(_QWORD *)(v1 + 32);
  v5[1] = *(_BYTE *)(v1 + 24);
  v6 = v2;
  v5[0] = a1;
  v3 = sub_10000498C((uint64_t *)&unk_10009A850);
  return State.wrappedValue.setter(v5, v3);
}

uint64_t sub_100062480@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues._accessibilityShowButtonShapes.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1000624AC(unsigned __int8 *a1)
{
  return EnvironmentValues._accessibilityShowButtonShapes.setter(*a1);
}

unint64_t sub_1000624D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10009A9C8;
  if (!qword_10009A9C8)
  {
    v1 = sub_100004660(&qword_10009A9B0);
    sub_10006253C();
    sub_10004F174();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10009A9C8);
  }
  return result;
}

unint64_t sub_10006253C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10009A9D0;
  if (!qword_10009A9D0)
  {
    v1 = sub_100004660(&qword_10009A228);
    sub_1000625A8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10009A9D0);
  }
  return result;
}

unint64_t sub_1000625A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10009A9D8;
  if (!qword_10009A9D8)
  {
    v1 = sub_100004660((uint64_t *)&unk_10009A9A0);
    sub_10000966C((unint64_t *)&unk_10009A9E0, &qword_10009A998, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
    sub_10000966C(&qword_100098D28, &qword_10009A9F0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10009A9D8);
  }
  return result;
}

uint64_t sub_100062644(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = sub_10000498C((uint64_t *)&unk_10009AAD0);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000928C(a1, (uint64_t)v4, (uint64_t *)&unk_10009AAD0);
  return EnvironmentValues.symbolRenderingMode.setter(v4);
}

uint64_t sub_1000626C4(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  type metadata accessor for Text.TruncationMode(0);
  __chkstk_darwin();
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v4 + 16))(v3, a1);
  return EnvironmentValues.truncationMode.setter(v3);
}

uint64_t sub_100062740@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.tint.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100062768(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.tint.setter(v1);
}

uint64_t sub_100062790@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_100059CF8(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_10006279C()
{
  unint64_t result;

  result = qword_10009AA20;
  if (!qword_10009AA20)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Rectangle, &type metadata for Rectangle);
    atomic_store(result, (unint64_t *)&qword_10009AA20);
  }
  return result;
}

uint64_t sub_1000627E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for TFMenuLabel(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v8 | 7;
  v12 = v4 + v9;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4 + v9, v5);
  swift_release();
  sub_10001D9D8(*(_QWORD *)(v12 + *(int *)(v6 + 40)), *(_BYTE *)(v12 + *(int *)(v6 + 40) + 8));
  sub_10001D9D8(*(_QWORD *)(v12 + *(int *)(v6 + 44)), *(_BYTE *)(v12 + *(int *)(v6 + 44) + 8));
  return swift_deallocObject(v4, v10, v11);
}

uint64_t sub_100062894(double a1, double a2, double a3, double a4)
{
  return sub_1000628A8((uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TFMenuLabel, sub_10005A0AC, a1, a2, a3, a4);
}

uint64_t sub_1000628A8(uint64_t (*a1)(_QWORD, uint64_t, uint64_t), uint64_t (*a2)(uint64_t, uint64_t, uint64_t, double, double, double, double), double a3, double a4, double a5, double a6)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v11 = *(_QWORD *)(v6 + 16);
  v12 = *(_QWORD *)(v6 + 24);
  v13 = *(unsigned __int8 *)(*(_QWORD *)(a1(0, v11, v12) - 8) + 80);
  return a2(v6 + ((v13 + 32) & ~v13), v11, v12, a3, a4, a5, a6);
}

unint64_t sub_10006293C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10009AA40;
  if (!qword_10009AA40)
  {
    v1 = sub_100004660(&qword_10009AA30);
    sub_100007D90(&qword_100099C00, type metadata accessor for TFSymbol, (uint64_t)&unk_100075D10);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10009AA40);
  }
  return result;
}

unint64_t sub_1000629C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10009AA50;
  if (!qword_10009AA50)
  {
    v1 = sub_100004660(&qword_10009AA58);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_10009AA50);
  }
  return result;
}

unint64_t sub_100062A20()
{
  unint64_t result;

  result = qword_10009AA60;
  if (!qword_10009AA60)
  {
    result = swift_getWitnessTable(&unk_100076528, &type metadata for _TFUITextView);
    atomic_store(result, (unint64_t *)&qword_10009AA60);
  }
  return result;
}

unint64_t sub_100062A64()
{
  unint64_t result;

  result = qword_10009AA68;
  if (!qword_10009AA68)
  {
    result = swift_getWitnessTable(&unk_1000764D8, &type metadata for _TFUILabel);
    atomic_store(result, (unint64_t *)&qword_10009AA68);
  }
  return result;
}

uint64_t sub_100062AA8(char a1)
{
  id v1;
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t *v6;
  uint64_t v8;
  int v9;

  if ((a1 & 1) != 0)
  {
    v1 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
    v2 = objc_msgSend(v1, "userInterfaceIdiom");

    if (v2 == (id)6)
      v3 = static Color.black.getter();
    else
      v3 = static Color.white.getter();
    v8 = v3;
    v4 = &type metadata for Color;
    v5 = &protocol witness table for Color;
    v6 = &v8;
  }
  else
  {
    v9 = static HierarchicalShapeStyle.primary.getter();
    v4 = &type metadata for HierarchicalShapeStyle;
    v5 = &protocol witness table for HierarchicalShapeStyle;
    v6 = (uint64_t *)&v9;
  }
  return AnyShapeStyle.init<A>(_:)(v6, v4, v5);
}

uint64_t sub_100062B5C()
{
  return EnvironmentValues.truncationMode.getter();
}

uint64_t sub_100062B88()
{
  return EnvironmentValues.symbolRenderingMode.getter();
}

unint64_t sub_100062BAC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10009AB38;
  if (!qword_10009AB38)
  {
    v1 = sub_100004660(&qword_10009AB30);
    sub_10000966C(&qword_10009AB40, &qword_10009AB28, (uint64_t)&protocol conformance descriptor for Label<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10009AB38);
  }
  return result;
}

unint64_t sub_100062C30()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10009AB48;
  if (!qword_10009AB48)
  {
    v1 = sub_100004660(&qword_10009AB18);
    sub_100062C9C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10009AB48);
  }
  return result;
}

unint64_t sub_100062C9C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10009AB50;
  if (!qword_10009AB50)
  {
    v1 = sub_100004660(&qword_10009AB58);
    sub_100007D90(&qword_100099C00, type metadata accessor for TFSymbol, (uint64_t)&unk_100075D10);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10009AB50);
  }
  return result;
}

uint64_t sub_100062D18@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_100055D64(v1[2], v1[3], v1[4], a1);
}

uint64_t sub_100062D24@<X0>(uint64_t a1@<X8>)
{
  return sub_100055DC4(a1);
}

uint64_t sub_100062D44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t destroy for TFPressedButtonStyle(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8))
  {
    swift_release();
    swift_release();
  }
  return sub_10001D9D8(*(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t initializeWithCopy for TFPressedButtonStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v4;
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  }
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_BYTE *)(a2 + 32);
  sub_10001D97C(v5, v6);
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v6;
  return a1;
}

uint64_t assignWithCopy for TFPressedButtonStyle(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  char v5;
  __int128 v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;

  v4 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)(a1 + 8))
  {
    if (v4)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
      swift_retain();
      swift_release();
      *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    }
    else
    {
      sub_1000092D0(a1, &qword_100099EF0);
      v5 = *((_BYTE *)a2 + 16);
      *(_OWORD *)a1 = *a2;
      *(_BYTE *)(a1 + 16) = v5;
    }
  }
  else if (v4)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    swift_retain();
    swift_retain();
  }
  else
  {
    v6 = *a2;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    *(_OWORD *)a1 = v6;
  }
  v7 = *((_QWORD *)a2 + 3);
  v8 = *((_BYTE *)a2 + 32);
  sub_10001D97C(v7, v8);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v8;
  sub_10001D9D8(v9, v10);
  return a1;
}

uint64_t assignWithTake for TFPressedButtonStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  if (!*(_QWORD *)(a1 + 8))
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
  {
    sub_1000092D0(a1, &qword_100099EF0);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = v4;
  swift_release();
LABEL_6:
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_BYTE *)(a2 + 32);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = v5;
  sub_10001D9D8(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for TFPressedButtonStyle(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TFPressedButtonStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for TFPressedButtonStyle()
{
  return &type metadata for TFPressedButtonStyle;
}

ValueMetadata *type metadata accessor for _TFUILabel()
{
  return &type metadata for _TFUILabel;
}

uint64_t destroy for _TFUITextView(uint64_t a1)
{

  return sub_10001D9D8(*(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s19FontPickerUIService13_TFUITextViewVwCP_0(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  char v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 16);
  v6 = v3;
  sub_10001D97C(v4, v5);
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for _TFUITextView(uint64_t a1, void **a2)
{
  void **v2;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v2 = a2;
  v4 = *a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *a2;
  v6 = v4;

  v7 = (uint64_t)v2[1];
  LOBYTE(v2) = *((_BYTE *)v2 + 16);
  sub_10001D97C(v7, (char)v2);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = (_BYTE)v2;
  sub_10001D9D8(v8, v9);
  return a1;
}

uint64_t assignWithTake for _TFUITextView(uint64_t a1, uint64_t a2)
{
  void *v4;
  char v5;
  uint64_t v6;
  char v7;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v5 = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = v5;
  sub_10001D9D8(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for _TFUITextView(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 17))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _TFUITextView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for _TFUITextView()
{
  return &type metadata for _TFUITextView;
}

uint64_t sub_100063264(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4;
  int v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v15 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_WORD *)(a1 + 1) = *(_WORD *)((char *)a2 + 1);
    v7 = a2[1];
    v8 = *((_BYTE *)a2 + 16);
    sub_10001D97C(v7, v8);
    *(_QWORD *)(v4 + 8) = v7;
    *(_BYTE *)(v4 + 16) = v8;
    v9 = a3[8];
    v10 = (_QWORD *)(v4 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    v12 = sub_10000498C((uint64_t *)&unk_10009A390);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = type metadata accessor for ColorScheme(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v11, v13);
      v14 = 1;
    }
    else
    {
      *v10 = *v11;
      swift_retain();
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v12, v14);
    v16 = a3[9];
    v17 = v4 + v16;
    v18 = (uint64_t)a2 + v16;
    v19 = *(_QWORD *)v18;
    v20 = *(_BYTE *)(v18 + 8);
    sub_10001D97C(*(_QWORD *)v18, v20);
    *(_QWORD *)v17 = v19;
    *(_BYTE *)(v17 + 8) = v20;
    v21 = a3[10];
    v22 = v4 + v21;
    v23 = (uint64_t)a2 + v21;
    v24 = *(_QWORD *)v23;
    v25 = *(_BYTE *)(v23 + 8);
    sub_10001D97C(*(_QWORD *)v23, v25);
    *(_QWORD *)v22 = v24;
    *(_BYTE *)(v22 + 8) = v25;
    v26 = a3[11];
    v27 = v4 + v26;
    v28 = (uint64_t)a2 + v26;
    v29 = *(_QWORD *)v28;
    v30 = *(_BYTE *)(v28 + 8);
    sub_10001D97C(*(_QWORD *)v28, v30);
    *(_QWORD *)v27 = v29;
    *(_BYTE *)(v27 + 8) = v30;
    v31 = a3[12];
    v32 = v4 + v31;
    v33 = (uint64_t)a2 + v31;
    v34 = *(_QWORD *)v33;
    v35 = *(_BYTE *)(v33 + 8);
    sub_10001D97C(*(_QWORD *)v33, v35);
    *(_QWORD *)v32 = v34;
    *(_BYTE *)(v32 + 8) = v35;
  }
  return v4;
}

uint64_t sub_100063408(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_10001D9D8(*(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  v4 = a1 + a2[8];
  v5 = sub_10000498C((uint64_t *)&unk_10009A390);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release();
  }
  sub_10001D9D8(*(_QWORD *)(a1 + a2[9]), *(_BYTE *)(a1 + a2[9] + 8));
  sub_10001D9D8(*(_QWORD *)(a1 + a2[10]), *(_BYTE *)(a1 + a2[10] + 8));
  sub_10001D9D8(*(_QWORD *)(a1 + a2[11]), *(_BYTE *)(a1 + a2[11] + 8));
  return sub_10001D9D8(*(_QWORD *)(a1 + a2[12]), *(_BYTE *)(a1 + a2[12] + 8));
}

uint64_t sub_1000634D8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_BYTE *)(a2 + 16);
  sub_10001D97C(v6, v7);
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = v7;
  v8 = a3[8];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  v11 = sub_10000498C((uint64_t *)&unk_10009A390);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
    v13 = 1;
  }
  else
  {
    *v9 = *v10;
    swift_retain();
    v13 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v11, v13);
  v14 = a3[9];
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = *(_QWORD *)v16;
  v18 = *(_BYTE *)(v16 + 8);
  sub_10001D97C(*(_QWORD *)v16, v18);
  *(_QWORD *)v15 = v17;
  *(_BYTE *)(v15 + 8) = v18;
  v19 = a3[10];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = *(_QWORD *)v21;
  v23 = *(_BYTE *)(v21 + 8);
  sub_10001D97C(*(_QWORD *)v21, v23);
  *(_QWORD *)v20 = v22;
  *(_BYTE *)(v20 + 8) = v23;
  v24 = a3[11];
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = *(_QWORD *)v26;
  v28 = *(_BYTE *)(v26 + 8);
  sub_10001D97C(*(_QWORD *)v26, v28);
  *(_QWORD *)v25 = v27;
  *(_BYTE *)(v25 + 8) = v28;
  v29 = a3[12];
  v30 = a1 + v29;
  v31 = a2 + v29;
  v32 = *(_QWORD *)v31;
  v33 = *(_BYTE *)(v31 + 8);
  sub_10001D97C(*(_QWORD *)v31, v33);
  *(_QWORD *)v30 = v32;
  *(_BYTE *)(v30 + 8) = v33;
  return a1;
}

uint64_t sub_100063650(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_BYTE *)(a2 + 16);
  sub_10001D97C(v6, v7);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = v7;
  sub_10001D9D8(v8, v9);
  if (a1 != a2)
  {
    v10 = a3[8];
    v11 = (_QWORD *)(a1 + v10);
    v12 = (_QWORD *)(a2 + v10);
    sub_1000092D0(a1 + v10, (uint64_t *)&unk_10009A390);
    v13 = sub_10000498C((uint64_t *)&unk_10009A390);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for ColorScheme(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
      v15 = 1;
    }
    else
    {
      *v11 = *v12;
      swift_retain();
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v13, v15);
  }
  v16 = a3[9];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = *(_QWORD *)v18;
  v20 = *(_BYTE *)(v18 + 8);
  sub_10001D97C(*(_QWORD *)v18, v20);
  v21 = *(_QWORD *)v17;
  v22 = *(_BYTE *)(v17 + 8);
  *(_QWORD *)v17 = v19;
  *(_BYTE *)(v17 + 8) = v20;
  sub_10001D9D8(v21, v22);
  v23 = a3[10];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = *(_QWORD *)v25;
  v27 = *(_BYTE *)(v25 + 8);
  sub_10001D97C(*(_QWORD *)v25, v27);
  v28 = *(_QWORD *)v24;
  v29 = *(_BYTE *)(v24 + 8);
  *(_QWORD *)v24 = v26;
  *(_BYTE *)(v24 + 8) = v27;
  sub_10001D9D8(v28, v29);
  v30 = a3[11];
  v31 = a1 + v30;
  v32 = a2 + v30;
  v33 = *(_QWORD *)v32;
  v34 = *(_BYTE *)(v32 + 8);
  sub_10001D97C(*(_QWORD *)v32, v34);
  v35 = *(_QWORD *)v31;
  v36 = *(_BYTE *)(v31 + 8);
  *(_QWORD *)v31 = v33;
  *(_BYTE *)(v31 + 8) = v34;
  sub_10001D9D8(v35, v36);
  v37 = a3[12];
  v38 = a1 + v37;
  v39 = a2 + v37;
  v40 = *(_QWORD *)v39;
  v41 = *(_BYTE *)(v39 + 8);
  sub_10001D97C(*(_QWORD *)v39, v41);
  v42 = *(_QWORD *)v38;
  v43 = *(_BYTE *)(v38 + 8);
  *(_QWORD *)v38 = v40;
  *(_BYTE *)(v38 + 8) = v41;
  sub_10001D9D8(v42, v43);
  return a1;
}

uint64_t sub_100063824(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = a3[8];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_10000498C((uint64_t *)&unk_10009A390);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for ColorScheme(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v11 = a3[9];
  v12 = a3[10];
  v13 = a1 + v11;
  v14 = a2 + v11;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  v15 = a1 + v12;
  v16 = a2 + v12;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  v17 = a3[11];
  v18 = a3[12];
  v19 = a1 + v17;
  v20 = a2 + v17;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
  v21 = a1 + v18;
  v22 = a2 + v18;
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *(_BYTE *)(v21 + 8) = *(_BYTE *)(v22 + 8);
  return a1;
}

uint64_t sub_10006395C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_BYTE *)(a2 + 16);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = v7;
  sub_10001D9D8(v8, v9);
  if (a1 != a2)
  {
    v10 = a3[8];
    v11 = (void *)(a1 + v10);
    v12 = (const void *)(a2 + v10);
    sub_1000092D0(a1 + v10, (uint64_t *)&unk_10009A390);
    v13 = sub_10000498C((uint64_t *)&unk_10009A390);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for ColorScheme(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v11, v12, v14);
      swift_storeEnumTagMultiPayload(v11, v13, 1);
    }
    else
    {
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
  }
  v15 = a3[9];
  v16 = a1 + v15;
  v17 = (uint64_t *)(a2 + v15);
  v18 = *v17;
  LOBYTE(v17) = *((_BYTE *)v17 + 8);
  v19 = *(_QWORD *)v16;
  v20 = *(_BYTE *)(v16 + 8);
  *(_QWORD *)v16 = v18;
  *(_BYTE *)(v16 + 8) = (_BYTE)v17;
  sub_10001D9D8(v19, v20);
  v21 = a3[10];
  v22 = a1 + v21;
  v23 = (uint64_t *)(a2 + v21);
  v24 = *v23;
  LOBYTE(v23) = *((_BYTE *)v23 + 8);
  v25 = *(_QWORD *)v22;
  v26 = *(_BYTE *)(v22 + 8);
  *(_QWORD *)v22 = v24;
  *(_BYTE *)(v22 + 8) = (_BYTE)v23;
  sub_10001D9D8(v25, v26);
  v27 = a3[11];
  v28 = a1 + v27;
  v29 = (uint64_t *)(a2 + v27);
  v30 = *v29;
  LOBYTE(v29) = *((_BYTE *)v29 + 8);
  v31 = *(_QWORD *)v28;
  v32 = *(_BYTE *)(v28 + 8);
  *(_QWORD *)v28 = v30;
  *(_BYTE *)(v28 + 8) = (_BYTE)v29;
  sub_10001D9D8(v31, v32);
  v33 = a3[12];
  v34 = a1 + v33;
  v35 = (uint64_t *)(a2 + v33);
  v36 = *v35;
  LOBYTE(v35) = *((_BYTE *)v35 + 8);
  v37 = *(_QWORD *)v34;
  v38 = *(_BYTE *)(v34 + 8);
  *(_QWORD *)v34 = v36;
  *(_BYTE *)(v34 + 8) = (_BYTE)v35;
  sub_10001D9D8(v37, v38);
  return a1;
}

uint64_t sub_100063AF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100063B04);
}

uint64_t sub_100063B04(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v10;

  if ((_DWORD)a2 == 254)
  {
    v4 = *a1;
    v5 = v4 >= 2;
    v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5)
      return (v6 + 1);
    else
      return 0;
  }
  else
  {
    v10 = sub_10000498C(&qword_10009A3A0);
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(&a1[*(int *)(a3 + 32)], a2, v10);
  }
}

uint64_t sub_100063B84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100063B90);
}

_BYTE *sub_100063B90(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *result = a2 + 1;
  }
  else
  {
    v7 = sub_10000498C(&qword_10009A3A0);
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 32)], a2, a2, v7);
  }
  return result;
}

void sub_100063C04(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[9];

  v4[0] = &unk_100075B68;
  v4[1] = &unk_100075B68;
  v4[2] = &unk_100075B68;
  v4[3] = &unk_100075B80;
  sub_10000470C(319, &qword_10009A418, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(v2 - 8) + 64;
    v4[5] = &unk_100075B80;
    v4[6] = &unk_100075B80;
    v4[7] = &unk_100075B80;
    v4[8] = &unk_100075B80;
    swift_initStructMetadata(a1, 256, 9, v4, a1 + 16);
  }
}

uint64_t initializeBufferWithCopyOfBuffer for ComponentItem(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  swift_retain(v3);
  return a1;
}

uint64_t assignWithCopy for ComponentItem(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_retain(v4);
  swift_release(v3);
  return a1;
}

uint64_t assignWithTake for ComponentItem(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for ComponentItem(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ComponentItem(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ComponentItem()
{
  return &type metadata for ComponentItem;
}

uint64_t sub_100063E0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 16);
}

uint64_t sub_100063E14(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t sub_100063EA4(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100063EF0 + 4 * byte_100075AB2[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100063F24 + 4 * byte_100075AAD[v4]))();
}

uint64_t sub_100063F24(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100063F2C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100063F34);
  return result;
}

uint64_t sub_100063F40(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100063F48);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100063F4C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100063F54(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t type metadata accessor for TFButton.Sizing(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100062D44(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TFButton.Sizing);
}

uint64_t sub_100063F6C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t WitnessTable;
  void *v28;
  uint64_t v29;
  unint64_t v30;

  v1 = a1[1];
  v2 = type metadata accessor for ModifiedContent(255, *a1, &type metadata for ComponentItem);
  v3 = type metadata accessor for ModifiedContent(255, v2, &type metadata for _FrameLayout);
  v29 = v1;
  v30 = sub_1000619F0();
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
  v28 = &protocol witness table for _FrameLayout;
  v4 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v3);
  v5 = type metadata accessor for HStack(255, v3, v4);
  v6 = type metadata accessor for ModifiedContent(255, v5, &type metadata for _FlexFrameLayout);
  v7 = sub_100004660(&qword_10009A7F0);
  v25 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v5);
  v26 = &protocol witness table for _FlexFrameLayout;
  v8 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
  v9 = sub_10000966C(&qword_10009A800, &qword_10009A7F0, (uint64_t)&protocol conformance descriptor for ClosedRange<A>);
  v21 = v6;
  v22 = v7;
  v23 = v8;
  v24 = v9;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v21, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 0);
  v11 = sub_100004660(&qword_10009A808);
  v12 = type metadata accessor for ModifiedContent(255, OpaqueTypeMetadata2, v11);
  v13 = type metadata accessor for ModifiedContent(255, v12, &type metadata for _FixedSizeLayout);
  v14 = sub_100004660(&qword_10009A810);
  v15 = type metadata accessor for ModifiedContent(255, v13, v14);
  v16 = type metadata accessor for ModifiedContent(255, v15, &type metadata for _HoverRegionModifier);
  v17 = type metadata accessor for HoverEffect(255);
  v21 = v6;
  v22 = v7;
  v23 = v8;
  v24 = v9;
  swift_getOpaqueTypeConformance2(&v21, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
  sub_10000966C(&qword_10009A818, &qword_10009A808, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v12);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v13);
  sub_10000966C(&qword_10009A820, &qword_10009A810, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v15);
  sub_100061A34();
  v18 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v16);
  v19 = sub_100007D90(&qword_10009A830, (uint64_t (*)(uint64_t))&type metadata accessor for HoverEffect, (uint64_t)&protocol conformance descriptor for HoverEffect);
  v21 = v16;
  v22 = v17;
  v23 = v18;
  v24 = v19;
  return swift_getOpaqueTypeConformance2(&v21, &opaque type descriptor for <<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>, 1);
}

uint64_t sub_10006423C(uint64_t *a1)
{
  ValueMetadata *v1;
  uint64_t v2;
  ValueMetadata *v3;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v5;
  uint64_t v6;
  uint64_t OpaqueTypeConformance2;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t WitnessTable;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  ValueMetadata *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v1 = (ValueMetadata *)a1[1];
  v30 = *a1;
  v2 = v30;
  v31 = v1;
  v3 = v1;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v30, &opaque type descriptor for <<opaque return type of View.onTapGesture(count:perform:)>>, 0);
  v5 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v6 = type metadata accessor for ModifiedContent(255, OpaqueTypeMetadata2, v5);
  v28 = type metadata accessor for HighlightHoverEffect(255);
  v30 = v2;
  v31 = v3;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v30, &opaque type descriptor for <<opaque return type of View.onTapGesture(count:perform:)>>, 1);
  v8 = sub_100007D90(&qword_1000987F0, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  v34 = OpaqueTypeConformance2;
  v35 = v8;
  v29 = v6;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
  v26 = sub_100007D90(&qword_10009A860, (uint64_t (*)(uint64_t))&type metadata accessor for HighlightHoverEffect, (uint64_t)&protocol conformance descriptor for HighlightHoverEffect);
  v30 = v6;
  v31 = (ValueMetadata *)v28;
  v32 = WitnessTable;
  v33 = v26;
  swift_getOpaqueTypeMetadata2(255, &v30, &opaque type descriptor for <<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>, 0);
  v9 = sub_100004660(&qword_10009A868);
  v10 = type metadata accessor for ModifiedContent(255, v2, v9);
  v11 = type metadata accessor for ModifiedContent(255, v10, &type metadata for _FlexFrameLayout);
  v12 = type metadata accessor for ModifiedContent(255, v11, &type metadata for _PaddingLayout);
  v13 = type metadata accessor for ModifiedContent(255, v12, &type metadata for TFComponentBackgroundModifier);
  v14 = type metadata accessor for ModifiedContent(255, v13, &type metadata for TFFrameTracker);
  v15 = sub_100004660(&qword_10009A870);
  v16 = type metadata accessor for ModifiedContent(255, v14, v15);
  v17 = type metadata accessor for ModifiedContent(255, v16, &type metadata for _FrameLayout);
  v18 = sub_100004660(&qword_10009A878);
  v19 = type metadata accessor for ModifiedContent(255, v17, v18);
  sub_10000966C((unint64_t *)&unk_10009A880, &qword_10009A868, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v10);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v11);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v12);
  sub_10004F174();
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v13);
  sub_100051174();
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v14);
  sub_10000966C(&qword_100099F80, &qword_10009A870, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v16);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v17);
  sub_10000966C(&qword_10009A8A0, &qword_10009A878, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v19);
  v20 = type metadata accessor for Button(255, v19);
  v21 = swift_getWitnessTable(&protocol conformance descriptor for Button<A>, v20);
  v22 = sub_100061C3C();
  v30 = v20;
  v31 = &type metadata for TFPressedButtonStyle;
  v32 = v21;
  v33 = v22;
  swift_getOpaqueTypeMetadata2(255, &v30, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 0);
  v23 = type metadata accessor for _ConditionalContent(255);
  v24 = type metadata accessor for ModifiedContent(255, v23, &type metadata for ComponentItem);
  v30 = v29;
  v31 = (ValueMetadata *)v28;
  v32 = WitnessTable;
  v33 = v26;
  swift_getOpaqueTypeConformance2(&v30, &opaque type descriptor for <<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>, 1);
  v30 = v20;
  v31 = &type metadata for TFPressedButtonStyle;
  v32 = v21;
  v33 = v22;
  swift_getOpaqueTypeConformance2(&v30, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
  swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v23);
  sub_1000619F0();
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v24);
}

unint64_t sub_10006468C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10009ACA8;
  if (!qword_10009ACA8)
  {
    v1 = sub_100004660(&qword_10009A8C0);
    sub_1000646F8();
    sub_1000619F0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10009ACA8);
  }
  return result;
}

unint64_t sub_1000646F8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_10009ACB0;
  if (!qword_10009ACB0)
  {
    v1 = sub_100004660(&qword_10009A8B8);
    sub_100061E90();
    v2[0] = sub_100004660(&qword_10009A8C8);
    v2[1] = &type metadata for TFPressedButtonStyle;
    v2[2] = sub_10000966C(&qword_10009A950, &qword_10009A8C8, (uint64_t)&protocol conformance descriptor for Button<A>);
    v2[3] = sub_100061C3C();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10009ACB0);
  }
  return result;
}

unint64_t sub_1000647C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10009ACB8;
  if (!qword_10009ACB8)
  {
    v1 = sub_100004660(&qword_10009A9F8);
    sub_100064830();
    sub_1000619F0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10009ACB8);
  }
  return result;
}

unint64_t sub_100064830()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_10009ACC0;
  if (!qword_10009ACC0)
  {
    v1 = sub_100004660(&qword_10009A9C0);
    v2[0] = sub_100004660(&qword_10009A9B0);
    v2[1] = type metadata accessor for HighlightHoverEffect(255);
    v2[2] = sub_1000624D0();
    v2[3] = sub_100007D90(&qword_10009A860, (uint64_t (*)(uint64_t))&type metadata accessor for HighlightHoverEffect, (uint64_t)&protocol conformance descriptor for HighlightHoverEffect);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>, 1);
    sub_10000966C(&qword_10009ACC8, &qword_10009ACD0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10009ACC0);
  }
  return result;
}

uint64_t sub_100064920(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t TupleTypeMetadata2;
  uint64_t v4;
  uint64_t WitnessTable;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = type metadata accessor for ModifiedContent(255, *a1, &type metadata for _FlexFrameLayout);
  v2 = sub_100004660(&qword_10009AA00);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v1, v2, 0, 0);
  v4 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v4);
  v6 = type metadata accessor for HStack(255, v4, WitnessTable);
  v7 = sub_100004660(&qword_10009AA08);
  v8 = type metadata accessor for ModifiedContent(255, v6, v7);
  v9 = type metadata accessor for ModifiedContent(255, v8, &type metadata for _PaddingLayout);
  v10 = type metadata accessor for ModifiedContent(255, v9, &type metadata for _PaddingLayout);
  v11 = sub_100004660(&qword_10009AA10);
  v12 = type metadata accessor for ModifiedContent(255, v10, v11);
  v13 = type metadata accessor for ModifiedContent(255, v12, &type metadata for _FlexFrameLayout);
  v14 = type metadata accessor for ModifiedContent(255, v13, &type metadata for TFFrameTracker);
  v15 = sub_100004660(&qword_10009A870);
  v16 = type metadata accessor for ModifiedContent(255, v14, v15);
  v17 = type metadata accessor for ModifiedContent(255, v16, &type metadata for ComponentItem);
  swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v6);
  sub_10000966C(&qword_10009AA18, &qword_10009AA08, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v9);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v10);
  sub_10000966C(&qword_100099D48, &qword_10009AA10, (uint64_t)&protocol conformance descriptor for _ContentShapeModifier<A>);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v12);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v13);
  sub_100051174();
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v14);
  sub_10000966C(&qword_100099F80, &qword_10009A870, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v16);
  sub_1000619F0();
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v17);
}

unint64_t sub_100064BE4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10009ACD8;
  if (!qword_10009ACD8)
  {
    v1 = sub_100004660(&qword_10009ACE0);
    sub_100064C68();
    sub_10000966C(&qword_10009AD08, &qword_10009AD10, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10009ACD8);
  }
  return result;
}

unint64_t sub_100064C68()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10009ACE8;
  if (!qword_10009ACE8)
  {
    v1 = sub_100004660(&qword_10009ACF0);
    sub_100064CEC();
    sub_10000966C(&qword_100099D48, &qword_10009AA10, (uint64_t)&protocol conformance descriptor for _ContentShapeModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10009ACE8);
  }
  return result;
}

unint64_t sub_100064CEC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10009ACF8;
  if (!qword_10009ACF8)
  {
    v1 = sub_100004660(&qword_10009AD00);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10009ACF8);
  }
  return result;
}

unint64_t sub_100064D54()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10009AD18;
  if (!qword_10009AD18)
  {
    v1 = sub_100004660(&qword_10009AA88);
    sub_10000966C(&qword_10009AD20, &qword_10009AA90, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_10000966C(&qword_10009A940, &qword_10009A948, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10009AD18);
  }
  return result;
}

unint64_t sub_100064DF4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10009AD28;
  if (!qword_10009AD28)
  {
    v1 = sub_100004660((uint64_t *)&unk_10009AAA8);
    sub_100064E60();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10009AD28);
  }
  return result;
}

unint64_t sub_100064E60()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10009AD30;
  if (!qword_10009AD30)
  {
    v1 = sub_100004660(&qword_10009AAA0);
    sub_100064EE4();
    sub_10000966C(&qword_10009AD58, &qword_10009AA98, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10009AD30);
  }
  return result;
}

unint64_t sub_100064EE4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10009AD38;
  if (!qword_10009AD38)
  {
    v1 = sub_100004660(&qword_10009AD40);
    sub_10000966C(&qword_10009AD48, &qword_10009AD50, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10009AD38);
  }
  return result;
}

unint64_t sub_100064F6C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10009AD60;
  if (!qword_10009AD60)
  {
    v1 = sub_100004660(&qword_10009AAC0);
    sub_100064FD8();
    sub_1000619F0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10009AD60);
  }
  return result;
}

unint64_t sub_100064FD8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10009AD68;
  if (!qword_10009AD68)
  {
    v1 = sub_100004660(&qword_10009AAB8);
    sub_100065044();
    sub_10004F174();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10009AD68);
  }
  return result;
}

unint64_t sub_100065044()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10009AD70;
  if (!qword_10009AD70)
  {
    v1 = sub_100004660(&qword_10009AAE8);
    sub_1000650C8();
    sub_10000966C(&qword_100099D48, &qword_10009AA10, (uint64_t)&protocol conformance descriptor for _ContentShapeModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10009AD70);
  }
  return result;
}

unint64_t sub_1000650C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10009AD78;
  if (!qword_10009AD78)
  {
    v1 = sub_100004660(&qword_10009AAE0);
    sub_100065134();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10009AD78);
  }
  return result;
}

unint64_t sub_100065134()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10009AD80;
  if (!qword_10009AD80)
  {
    v1 = sub_100004660(&qword_10009A278);
    sub_1000651B8();
    sub_10000966C(&qword_10009ADC8, &qword_10009AAC8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10009AD80);
  }
  return result;
}

unint64_t sub_1000651B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10009AD88;
  if (!qword_10009AD88)
  {
    v1 = sub_100004660(&qword_10009AD90);
    sub_10006523C();
    sub_10000966C((unint64_t *)&unk_10009A880, &qword_10009A868, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10009AD88);
  }
  return result;
}

unint64_t sub_10006523C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10009AD98;
  if (!qword_10009AD98)
  {
    v1 = sub_100004660(&qword_10009ADA0);
    sub_10000966C(&qword_10009ADA8, (uint64_t *)&unk_10009ADB0, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    sub_10000966C(&qword_100099CE0, &qword_10009ADC0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10009AD98);
  }
  return result;
}

unint64_t sub_1000652DC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10009ADD0;
  if (!qword_10009ADD0)
  {
    v1 = sub_100004660(&qword_10009AB08);
    sub_100065348();
    sub_1000619F0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10009ADD0);
  }
  return result;
}

unint64_t sub_100065348()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10009ADD8;
  if (!qword_10009ADD8)
  {
    v1 = sub_100004660(&qword_10009AB00);
    sub_100051940(&qword_10009ADE0, &qword_10009AB10, (void (*)(void))sub_1000653D4, (uint64_t)&protocol conformance descriptor for <A> Group<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10009ADD8);
  }
  return result;
}

unint64_t sub_1000653D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10009ADE8;
  if (!qword_10009ADE8)
  {
    v1 = sub_100004660(&qword_10009ADF0);
    sub_100062BAC();
    sub_100062C30();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10009ADE8);
  }
  return result;
}

uint64_t sub_100065440(uint64_t a1)
{
  return swift_getWitnessTable(&unk_100076340, a1);
}

uint64_t sub_100065450(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100079830, 1);
}

void *sub_100065468()
{
  return &protocol witness table for Never;
}

uint64_t sub_100065474(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100079808, 1);
}

uint64_t sub_100065484(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000797E0, 1);
}

uint64_t sub_100065494()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000654B8(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[9];
  uint64_t v6;

  v2 = *(_QWORD *)(v1 + 24);
  v5[1] = *(_BYTE *)(v1 + 16);
  v6 = v2;
  v5[0] = a1;
  v3 = sub_10000498C((uint64_t *)&unk_10009A850);
  return State.wrappedValue.setter(v5, v3);
}

unint64_t sub_100065508()
{
  unint64_t result;

  result = qword_10009AE28;
  if (!qword_10009AE28)
  {
    result = swift_getWitnessTable(&unk_1000763B8, &type metadata for _TFUITextView);
    atomic_store(result, (unint64_t *)&qword_10009AE28);
  }
  return result;
}

unint64_t sub_10006554C()
{
  unint64_t result;

  result = qword_10009AE30;
  if (!qword_10009AE30)
  {
    result = swift_getWitnessTable(&unk_100076448, &type metadata for _TFUILabel);
    atomic_store(result, (unint64_t *)&qword_10009AE30);
  }
  return result;
}

unint64_t sub_100065594()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10009AE48;
  if (!qword_10009AE48)
  {
    v1 = sub_100004660(&qword_10009AE08);
    sub_100065618();
    sub_10000966C(&qword_100098D28, &qword_10009A9F0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10009AE48);
  }
  return result;
}

unint64_t sub_100065618()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10009AE50;
  if (!qword_10009AE50)
  {
    v1 = sub_100004660(&qword_10009ADF8);
    sub_10000966C(&qword_10009AE58, &qword_10009AE00, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_100061A34();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10009AE50);
  }
  return result;
}

unint64_t sub_1000656A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10009AE60;
  if (!qword_10009AE60)
  {
    v1 = sub_100004660(&qword_10009AE20);
    sub_10006570C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10009AE60);
  }
  return result;
}

unint64_t sub_10006570C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10009AE68;
  if (!qword_10009AE68)
  {
    v1 = sub_100004660(&qword_10009AE18);
    sub_100065778();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10009AE68);
  }
  return result;
}

unint64_t sub_100065778()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10009AE70;
  if (!qword_10009AE70)
  {
    v1 = sub_100004660(&qword_10009AE10);
    sub_100007D90(&qword_100098870, (uint64_t (*)(uint64_t))&type metadata accessor for ButtonStyleConfiguration.Label, (uint64_t)&protocol conformance descriptor for ButtonStyleConfiguration.Label);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10009AE70);
  }
  return result;
}

unint64_t sub_100065800()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10009AE80;
  if (!qword_10009AE80)
  {
    v1 = sub_100004660(&qword_10009AE88);
    sub_100065884();
    sub_10000966C(&qword_10009AEA8, (uint64_t *)&unk_10009AEB0, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10009AE80);
  }
  return result;
}

unint64_t sub_100065884()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10009AE90;
  if (!qword_10009AE90)
  {
    v1 = sub_100004660(&qword_10009AE98);
    sub_100065908();
    sub_10000966C((unint64_t *)&unk_10009A880, &qword_10009A868, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10009AE90);
  }
  return result;
}

unint64_t sub_100065908()
{
  unint64_t result;

  result = qword_10009AEA0;
  if (!qword_10009AEA0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Rectangle, &type metadata for Rectangle);
    atomic_store(result, (unint64_t *)&qword_10009AEA0);
  }
  return result;
}

id sub_100065A04()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for _UIFontPickerUIServiceAppDelegate();
  return objc_msgSendSuper2(&v2, "dealloc");
}

int main(int argc, const char **argv, const char **envp)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  objc_class *ObjCClassFromMetadata;
  NSString *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = type metadata accessor for _UIFontPickerUIServiceAppDelegate();
  v4 = static CommandLine.unsafeArgv.getter();
  v5 = ((uint64_t (*)(void))static CommandLine.argc.getter)();
  v6 = static CommandLine.argc.getter(v5);
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata(v3);
  v8 = NSStringFromClass(ObjCClassFromMetadata);
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v11 = v10;

  LODWORD(v8) = UIApplicationMain(_:_:_:_:)(v6, v4, 0, 0, v9, v11);
  swift_bridgeObjectRelease(v11);
  exit((int)v8);
}

uint64_t type metadata accessor for _UIFontPickerUIServiceAppDelegate()
{
  return objc_opt_self(_TtC19FontPickerUIService33_UIFontPickerUIServiceAppDelegate);
}

id sub_100065ADC(void *a1)
{
  id v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  char v11;
  void *v12;
  void *v13;
  Swift::String v14;
  Swift::String v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v20;
  unint64_t v21;

  v1 = a1;
  v2 = (uint64_t *)objc_msgSend(a1, "role");
  v3 = _UISceneSessionRoleSceneHosting;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v6 = v5;
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  if (v4 == v7 && v6 == v8)
    goto LABEL_7;
  v10 = v8;
  v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, v7, v8, 0);

  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v10);
  if ((v11 & 1) == 0)
  {
    v20 = 0;
    v21 = 0xE000000000000000;
    _StringGuts.grow(_:)(136);
    v1 = objc_msgSend(v1, "role");
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
    v13 = v12;

    v14._countAndFlagsBits = v6;
    v14._object = v13;
    String.append(_:)(v14);
    swift_bridgeObjectRelease(v13);
    v15._object = (void *)0x80000001000783F0;
    v2 = &v20;
    v15._countAndFlagsBits = 0xD000000000000086;
    String.append(_:)(v15);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v20, v21, "FontPickerUIService/_UIFontPickerUIServiceAppDelegate.swift", 59, 2, 19, 0);
    __break(1u);
LABEL_7:

    swift_bridgeObjectRelease_n(v6, 2);
  }
  v16 = objc_msgSend(v1, "role");
  v17 = objc_msgSend(objc_allocWithZone((Class)UISceneConfiguration), "initWithName:sessionRole:", 0, v16);

  v18 = type metadata accessor for _UIFontPickerUIServiceSceneDelegate();
  objc_msgSend(v17, "setDelegateClass:", swift_getObjCClassFromMetadata(v18));
  return v17;
}

uint64_t getEnumTagSinglePayload for TFUIConfig(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for TFUIConfig(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_100065D90 + 4 * byte_100076635[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100065DC4 + 4 * asc_100076630[v4]))();
}

uint64_t sub_100065DC4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100065DCC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100065DD4);
  return result;
}

uint64_t sub_100065DE0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100065DE8);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_100065DEC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100065DF4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TFUIConfig()
{
  return &type metadata for TFUIConfig;
}

unint64_t sub_100065E14()
{
  unint64_t result;

  result = qword_10009AF80;
  if (!qword_10009AF80)
  {
    result = swift_getWitnessTable(&unk_100076690, &type metadata for TFUIConfig);
    atomic_store(result, (unint64_t *)&qword_10009AF80);
  }
  return result;
}

double sub_100065E58(char a1, char a2, char a3)
{
  id v5;
  double v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  double v14;
  void *v15;
  id v16;
  double v17;
  CGFloat v18;
  double v19;
  CGFloat v20;
  double v21;
  CGFloat v22;
  double v23;
  CGFloat v24;
  id v25;
  double v26;
  CGFloat v27;
  double v28;
  CGFloat v29;
  double v30;
  CGFloat v31;
  double v32;
  CGFloat v33;
  CGRect v35;
  CGRect v36;
  CGRect v37;

  if (a3 == 2 || a3 == 4)
  {
    v5 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
    objc_msgSend(v5, "_referenceBounds");
    v7 = v6;
    v9 = v8;
    v11 = v10;
    v13 = v12;

    v35.origin.x = v7;
    v35.origin.y = v9;
    v35.size.width = v11;
    v35.size.height = v13;
    v14 = 10.0;
    if (CGRectGetHeight(v35) > 667.0)
    {
      if ((a2 & 1) != 0)
        return 10.0;
      else
        return 11.0;
    }
  }
  else if (a3 == 3)
  {
    v15 = (void *)objc_opt_self(UIScreen);
    v16 = objc_msgSend(v15, "mainScreen");
    objc_msgSend(v16, "_referenceBounds");
    v18 = v17;
    v20 = v19;
    v22 = v21;
    v24 = v23;

    v36.origin.x = v18;
    v36.origin.y = v20;
    v36.size.width = v22;
    v36.size.height = v24;
    if ((CGRectGetHeight(v36) <= 667.0) | a2 & 1)
      v14 = 7.0;
    else
      v14 = 10.0;
    v25 = objc_msgSend(v15, "mainScreen");
    objc_msgSend(v25, "_referenceBounds");
    v27 = v26;
    v29 = v28;
    v31 = v30;
    v33 = v32;

    v37.origin.x = v27;
    v37.origin.y = v29;
    v37.size.width = v31;
    v37.size.height = v33;
    CGRectGetHeight(v37);
  }
  else if ((a1 & 1) != 0)
  {
    return 0.0;
  }
  else
  {
    return 16.0;
  }
  return v14;
}

void sub_100066074(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

double sub_1000660B0()
{
  char v0;
  double v1;
  id v2;
  double v3;
  CGFloat v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  CGRect v12;

  v2 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
  objc_msgSend(v2, "_referenceBounds");
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;

  v12.origin.x = v4;
  v12.origin.y = v6;
  v12.size.width = v8;
  v12.size.height = v10;
  if (CGRectGetHeight(v12) > 667.0)
  {
    if ((v0 & 1) != 0)
      return 8.0;
    else
      return 12.0;
  }
  return v1;
}

uint64_t sub_1000661E8()
{
  unint64_t v0;
  uint64_t var1;

  v0 = sub_1000174B4();
  EnvironmentValues.subscript.getter(&var1, &type metadata for TFUIConfigKey, &type metadata for TFUIConfigKey, v0);
  return var1;
}

uint64_t sub_100066220(unsigned __int8 a1)
{
  return ((uint64_t (*)(double))((char *)&loc_100066234 + dword_1000662FC[a1]))(44.0);
}

void sub_100066244()
{
  id v0;
  double v1;
  CGFloat v2;
  double v3;
  CGFloat v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  CGRect v9;

  v0 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
  objc_msgSend(v0, "_referenceBounds");
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;

  v9.origin.x = v2;
  v9.origin.y = v4;
  v9.size.width = v6;
  v9.size.height = v8;
  CGRectGetHeight(v9);
}

double sub_1000662EC()
{
  return 45.0;
}

void sub_100066310(uint64_t a1, uint64_t a2, char a3, char a4, char a5, char a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(UITextFormattingViewControllerFontAttributesComponentKey);
  v13 = v12;
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  if (v11 == v14 && v13 == v15)
  {
    swift_bridgeObjectRelease_n(v13, 2);
    goto LABEL_10;
  }
  v17 = v15;
  v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v13, v14, v15, 0);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v17);
  if ((v18 & 1) != 0)
  {
LABEL_10:
    sub_100067270(a5 & 1, a6);
    return;
  }
  if ((a6 - 2) >= 3u)
    goto LABEL_12;
  if ((a3 & 1) == 0)
  {
    v19 = a5 & 1;
    sub_100065E58(a4 & 1, v19, a6);
    sub_100067270(v19, a6);
    sub_100066074(v19, a6);
    return;
  }
  if ((a5 & 1) == 0)
LABEL_12:
    sub_1000668B0(a6);
}

uint64_t sub_100066490()
{
  unint64_t v0;
  uint64_t v2;

  v0 = sub_10001D92C();
  EnvironmentValues.subscript.getter(&v2, &type metadata for TFEffectiveComponentSizeKey, &type metadata for TFEffectiveComponentSizeKey, v0);
  return v2;
}

double sub_1000664CC()
{
  return sub_1000664F4((uint64_t (*)(void))sub_10001D8E8, (uint64_t)&type metadata for TFComponentWidthKey);
}

double sub_1000664E0()
{
  return sub_1000664F4((uint64_t (*)(void))sub_10001D8A4, (uint64_t)&type metadata for TFComponentColumnWidthKey);
}

double sub_1000664F4(uint64_t (*a1)(void), uint64_t a2)
{
  uint64_t v3;
  double v5;

  v3 = a1();
  EnvironmentValues.subscript.getter(&v5, a2, a2, v3);
  return v5;
}

uint64_t sub_100066534()
{
  return sub_100066C7C((uint64_t (*)(void))sub_10001D860, (uint64_t)&type metadata for TFComponentSpansWidthKey);
}

uint64_t sub_100066548()
{
  return sub_100066C7C((uint64_t (*)(void))sub_10004EAAC, (uint64_t)&type metadata for TFReducedComponentCornerSizeKey);
}

uint64_t sub_10006655C()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  CFStringRef v17;
  __CFString *v18;
  uint64_t v19;

  v1 = objc_msgSend(v0, "familyName");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v3 = v2;

  v4._countAndFlagsBits = 46;
  v4._object = (void *)0xE100000000000000;
  LOBYTE(v1) = String.hasPrefix(_:)(v4);
  swift_bridgeObjectRelease(v3);
  if ((v1 & 1) == 0)
  {
    v5 = objc_msgSend(v0, "familyName");
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    v8 = v7;

    v9 = (void *)objc_opt_self(UIFont);
    objc_msgSend(v9, "systemFontSize");
    v10 = objc_msgSend(v9, "systemFontOfSize:");
    v11 = objc_msgSend(v10, "familyName");

    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v14 = v13;

    if (v6 == v12 && v8 == v14)
    {
      swift_bridgeObjectRelease_n(v8, 2);
    }
    else
    {
      v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v8, v12, v14, 0);
      swift_bridgeObjectRelease(v8);
      swift_bridgeObjectRelease(v14);
      if ((v16 & 1) == 0)
      {
        v17 = CTFontCopyName((CTFontRef)v0, kCTFontFamilyNameKey);
        if (!v17)
          v17 = (CFStringRef)objc_msgSend(v0, "familyName");
        v18 = (__CFString *)v17;
        v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);

        return v19;
      }
    }
  }
  if (qword_1000980D8 != -1)
    swift_once(&qword_1000980D8, sub_1000227E8);
  v19 = qword_10009B3A0;
  swift_bridgeObjectRetain(*(_QWORD *)algn_10009B3A8);
  return v19;
}

uint64_t sub_100066738@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t WitnessTable;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD v26[2];

  v22 = a7;
  v13 = type metadata accessor for ModifiedContent(0, a5, &type metadata for TFFrameTracker);
  v23 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v22 - v14;
  v26[0] = a1;
  v26[1] = a2;
  View.modifier<A>(_:)(v26, a5, &type metadata for TFFrameTracker, a6);
  v16 = swift_allocObject(&unk_100090CE8, 32, 7);
  *(_QWORD *)(v16 + 16) = a3;
  *(_QWORD *)(v16 + 24) = a4;
  v17 = sub_100051174();
  v24 = a6;
  v25 = v17;
  swift_retain();
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v13);
  v19 = sub_100067F64();
  v20 = sub_100007D90(&qword_10009AFA8, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
  View.onPreferenceChange<A>(_:perform:)(&type metadata for TFFrameTrackerKey, sub_100067F3C, v16, v13, &type metadata for TFFrameTrackerKey, WitnessTable, v19, v20);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v15, v13);
}

uint64_t sub_1000668B0(unsigned __int8 a1)
{
  return ((uint64_t (*)(double))((char *)&loc_1000668C4 + dword_10006698C[a1]))(44.0);
}

void sub_1000668D4()
{
  id v0;
  double v1;
  CGFloat v2;
  double v3;
  CGFloat v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  CGRect v9;

  v0 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
  objc_msgSend(v0, "_referenceBounds");
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;

  v9.origin.x = v2;
  v9.origin.y = v4;
  v9.size.width = v6;
  v9.size.height = v8;
  CGRectGetHeight(v9);
}

double sub_10006697C()
{
  return 45.0;
}

uint64_t sub_1000669A0@<X0>(unsigned __int8 a1@<W0>, void (*a2)(_QWORD, _QWORD, _QWORD)@<X8>)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, char *, uint64_t);
  char *v22;
  void (*v23)(char *, char *, uint64_t);
  void (*v24)(char *, uint64_t);
  char *v25;
  uint64_t v27;
  void (*v28)(_QWORD, _QWORD, _QWORD);
  uint64_t v29;

  v3 = a1;
  v4 = sub_10000498C(&qword_10009B060);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v28 - v8;
  v29 = sub_10000498C(&qword_10009A7F0);
  __chkstk_darwin(v29);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DynamicTypeSize(0);
  v13 = *(_QWORD **)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v28 - v17;
  if ((v3 - 2) < 3)
  {
    v28 = a2;
    a2 = (void (*)(_QWORD, _QWORD, _QWORD))v13[13];
    a2((char *)&v28 - v17, enum case for DynamicTypeSize.small(_:), v12);
    a2(v16, enum case for DynamicTypeSize.xxxLarge(_:), v12);
    v19 = sub_100007D90(&qword_10009B068, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
    if ((dispatch thunk of static Comparable.<= infix(_:_:)(v18, v16, v12, v19) & 1) != 0)
    {
      v20 = &v9[*(int *)(v4 + 48)];
      v21 = (void (*)(char *, char *, uint64_t))v13[4];
      v21(v9, v18, v12);
      v21(v20, v16, v12);
      v22 = &v7[*(int *)(v4 + 48)];
      v23 = (void (*)(char *, char *, uint64_t))v13[2];
      v23(v7, v9, v12);
      v23(v22, v20, v12);
      v21(v11, v7, v12);
      v24 = (void (*)(char *, uint64_t))v13[1];
      v24(v22, v12);
      v25 = &v7[*(int *)(v4 + 48)];
      v21(v7, v9, v12);
      v21(v25, v20, v12);
      v21(&v11[*(int *)(v29 + 36)], v25, v12);
      v24(v7, v12);
      return sub_10006871C((uint64_t)v11, (uint64_t)v28);
    }
    __break(1u);
    goto LABEL_7;
  }
  if (qword_100098298 != -1)
LABEL_7:
    swift_once(&qword_100098298, sub_100066E64);
  v27 = sub_100021774(v29, (uint64_t)qword_10009B6F0);
  return sub_10000928C(v27, (uint64_t)a2, &qword_10009A7F0);
}

uint64_t sub_100066C68()
{
  return sub_100066C7C((uint64_t (*)(void))sub_1000623C8, (uint64_t)&type metadata for TFComponentIsHoveredKey);
}

uint64_t sub_100066C7C(uint64_t (*a1)(void), uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  v3 = a1();
  EnvironmentValues.subscript.getter(&v5, a2, a2, v3);
  return v5;
}

void sub_100066CBC()
{
  id v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v1 = objc_msgSend(v0, "bundleIdentifier");

  if (v1)
  {
    v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
    v4 = v3;

    qword_10009AF50 = v2;
    *(_QWORD *)algn_10009AF58 = v4;
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100066D44()
{
  uint64_t v0;
  char has_internal_content;
  uint64_t result;

  if (qword_100098280 != -1)
    swift_once(&qword_100098280, sub_100066CBC);
  v0 = String.utf8CString.getter(qword_10009AF50, *(_QWORD *)algn_10009AF58);
  has_internal_content = os_variant_has_internal_content(v0 + 32);
  result = swift_release();
  byte_10009B6D0 = has_internal_content;
  return result;
}

uint64_t sub_100066DB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100067DC8(v0, qword_10009B6D8);
  sub_100021774(v0, (uint64_t)qword_10009B6D8);
  if (qword_100098280 != -1)
    swift_once(&qword_100098280, sub_100066CBC);
  v1 = qword_10009AF50;
  v2 = *(_QWORD *)algn_10009AF58;
  swift_bridgeObjectRetain(*(_QWORD *)algn_10009AF58);
  return Logger.init(subsystem:category:)(v1, v2, 0xD00000000000001ALL, 0x8000000100078480);
}

uint64_t sub_100066E64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, _QWORD, uint64_t);
  uint64_t v17;
  char *v18;
  uint64_t result;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  char *v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;

  v0 = sub_10000498C(&qword_10009B060);
  v1 = __chkstk_darwin(v0);
  v3 = (char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  v5 = (char *)&v28 - v4;
  v6 = sub_10000498C(&qword_10009A7F0);
  __chkstk_darwin(v6);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DynamicTypeSize(0);
  v10 = *(_QWORD **)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v28 - v14;
  sub_100067DC8(v6, qword_10009B6F0);
  v31 = sub_100021774(v6, (uint64_t)qword_10009B6F0);
  v16 = (void (*)(char *, _QWORD, uint64_t))v10[13];
  v16(v15, enum case for DynamicTypeSize.small(_:), v9);
  v16(v13, enum case for DynamicTypeSize.xxLarge(_:), v9);
  v17 = sub_100007D90(&qword_10009B068, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  v18 = v15;
  result = dispatch thunk of static Comparable.<= infix(_:_:)(v15, v13, v9, v17);
  if ((result & 1) != 0)
  {
    v20 = &v5[*(int *)(v0 + 48)];
    v29 = v6;
    v30 = v18;
    v21 = v0;
    v22 = (void (*)(char *, char *, uint64_t))v10[2];
    v22(v5, v18, v9);
    v22(v20, v13, v9);
    v23 = &v3[*(int *)(v21 + 48)];
    v22(v3, v5, v9);
    v22(v23, v20, v9);
    v24 = (void (*)(char *, char *, uint64_t))v10[4];
    v24(v8, v3, v9);
    v28 = v13;
    v25 = (uint64_t)v8;
    v26 = (void (*)(char *, uint64_t))v10[1];
    v26(v23, v9);
    v27 = &v3[*(int *)(v21 + 48)];
    v24(v3, v5, v9);
    v24(v27, v20, v9);
    v24((char *)(v25 + *(int *)(v29 + 36)), v27, v9);
    v26(v3, v9);
    sub_10006871C(v25, v31);
    v26(v28, v9);
    return ((uint64_t (*)(char *, uint64_t))v26)(v30, v9);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100067118(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

double sub_10006716C()
{
  uint64_t v0;
  int v1;
  id v2;
  double v3;
  CGFloat v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  double v11;
  double v12;
  uint64_t v13;
  BOOL v14;
  double v15;
  double v16;
  CGRect v18;

  v2 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
  objc_msgSend(v2, "_referenceBounds");
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;

  v18.origin.x = v4;
  v18.origin.y = v6;
  v18.size.width = v8;
  v18.size.height = v10;
  if (CGRectGetHeight(v18) > 667.0)
    v11 = 50.0;
  else
    v11 = 45.0;
  v12 = 8.0;
  if ((v1 - 2) < 3)
    v12 = 10.0;
  if (v0 <= 1)
    v13 = 1;
  else
    v13 = v0;
  v14 = v1 == 4 || v1 == 1;
  v15 = v11 * (double)v13 + ((double)v13 + -1.0) * v12;
  v16 = 32.0;
  if (v14)
    v16 = 40.0;
  return v16 + v15;
}

void sub_100067270(uint64_t a1, unsigned __int8 a2)
{
  id v2;
  double v3;
  CGFloat v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  CGRect v11;

  if (a2 - 2 < 3)
  {
    v2 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
    objc_msgSend(v2, "_referenceBounds");
    v4 = v3;
    v6 = v5;
    v8 = v7;
    v10 = v9;

    v11.origin.x = v4;
    v11.origin.y = v6;
    v11.size.width = v8;
    v11.size.height = v10;
    CGRectGetHeight(v11);
  }
}

void sub_100067364()
{
  qword_10009B708 = 0x407F400000000000;
}

BOOL sub_100067378(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_10006738C()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1000673D0()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1000673F8(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

double sub_100067438()
{
  double result;

  result = 0.0;
  xmmword_10009AF60 = 0u;
  *(_OWORD *)algn_10009AF70 = 0u;
  return result;
}

double sub_10006744C@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;

  if (qword_1000982A8 != -1)
    swift_once(&qword_1000982A8, sub_100067438);
  result = *(double *)&xmmword_10009AF60;
  v3 = *(_OWORD *)algn_10009AF70;
  *a1 = xmmword_10009AF60;
  a1[1] = v3;
  return result;
}

uint64_t sub_1000674A8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  _QWORD v20[2];

  v6 = type metadata accessor for NamedCoordinateSpace(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin();
  v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = static Color.clear.getter(v8);
  v20[0] = a1;
  v20[1] = a2;
  static CoordinateSpaceProtocol<>.named<A>(_:)(v20, &type metadata for String, &protocol witness table for String);
  v12 = GeometryProxy.frame<A>(in:)(v10, v6, &protocol witness table for NamedCoordinateSpace);
  v14 = v13;
  v16 = v15;
  v18 = v17;
  result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  *a3 = v11;
  *((double *)a3 + 1) = v12;
  a3[2] = v14;
  a3[3] = v16;
  a3[4] = v18;
  return result;
}

uint64_t sub_1000675A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)@<X0>(uint64_t *@<X8>);
  uint64_t (*v11)@<X0>(uint64_t *@<X8>);
  uint64_t v12;
  uint64_t result;
  uint64_t (**v14)@<X0>(uint64_t *@<X8>);

  v6 = *v2;
  v5 = v2[1];
  v7 = swift_allocObject(&unk_100090DD0, 32, 7);
  *(_QWORD *)(v7 + 16) = v6;
  *(_QWORD *)(v7 + 24) = v5;
  v8 = swift_bridgeObjectRetain(v5);
  v9 = static Alignment.center.getter(v8);
  v11 = v10;
  v12 = sub_10000498C(&qword_10009B0B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a2, a1, v12);
  result = sub_10000498C(&qword_10009B0C0);
  v14 = (uint64_t (**)@<X0>(uint64_t *@<X8>))(a2 + *(int *)(result + 36));
  *v14 = sub_1000688F4;
  v14[1] = (uint64_t (*)@<X0>(uint64_t *@<X8>))v7;
  v14[2] = (uint64_t (*)@<X0>(uint64_t *@<X8>))v9;
  v14[3] = v11;
  return result;
}

uint64_t sub_100067650(double *a1, uint64_t (*a2)(double, double, double, double))
{
  return a2(*a1, a1[1], a1[2], a1[3]);
}

uint64_t sub_100067678(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v23;

  v4 = sub_10000498C(&qword_10009B0B0);
  __chkstk_darwin(v4);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10000498C(&qword_10009B098);
  __chkstk_darwin(v7);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100067880();
  if (v10)
  {
    v11 = v10;
    v12 = Font.init(_:)();
    KeyPath = swift_getKeyPath(&unk_100076A08);
    v14 = sub_10000498C(&qword_10009B0A8);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v9, a2, v14);
    v15 = (uint64_t *)&v9[*(int *)(v7 + 36)];
    *v15 = KeyPath;
    v15[1] = v12;
    sub_10000928C((uint64_t)v9, (uint64_t)v6, &qword_10009B098);
    swift_storeEnumTagMultiPayload(v6, v4, 0);
    v16 = sub_10006882C();
    _ConditionalContent<>.init(storage:)(v6, v7, v7, v16, v16);

  }
  else
  {
    v17 = *(_QWORD *)(a1 + 8);
    v18 = swift_getKeyPath(&unk_100076A08);
    v19 = sub_10000498C(&qword_10009B0A8);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v9, a2, v19);
    v20 = (uint64_t *)&v9[*(int *)(v7 + 36)];
    *v20 = v18;
    v20[1] = v17;
    sub_10000928C((uint64_t)v9, (uint64_t)v6, &qword_10009B098);
    swift_storeEnumTagMultiPayload(v6, v4, 1);
    v21 = sub_10006882C();
    swift_retain();
    _ConditionalContent<>.init(storage:)(v6, v7, v7, v21, v21);
  }
  return sub_1000092D0((uint64_t)v9, &qword_10009B098);
}

id sub_100067880()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  double v5;
  id v6;
  double v7;
  id v8;
  double v9;
  double v10;
  id v11;
  double v12;
  id v13;
  id v14;

  v1 = *(void **)v0;
  if (!*(_QWORD *)v0)
    return 0;
  v2 = (void *)objc_opt_self(UIFontMetrics);
  v3 = v1;
  v4 = objc_msgSend(v2, "defaultMetrics");
  v5 = *(double *)(v0 + 16);
  v6 = objc_msgSend(v4, "scaledFontForFont:maximumPointSize:", v3, v5);

  if ((*(_BYTE *)(v0 + 32) & 1) == 0)
  {
    v7 = *(double *)(v0 + 24);
    v8 = objc_msgSend(v2, "defaultMetrics");
    objc_msgSend(v8, "scaledValueForValue:", v7);
    v10 = v9;

    if (v5 < v10)
    {
      v11 = objc_msgSend(v2, "defaultMetrics");
      objc_msgSend(v3, "pointSize");
      v13 = objc_msgSend(v3, "fontWithSize:", v5 / v10 * v12);
      v14 = objc_msgSend(v11, "scaledFontForFont:", v13);

      v3 = v6;
      v6 = v14;
    }
  }

  return v6;
}

uint64_t sub_1000679E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = v1;
  v4 = sub_10000498C(&qword_10009B070);
  __chkstk_darwin(v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100067678(v2, a1);
  if (qword_100098298 != -1)
    swift_once(&qword_100098298, sub_100066E64);
  v7 = sub_10000498C(&qword_10009A7F0);
  v8 = sub_100021774(v7, (uint64_t)qword_10009B6F0);
  v9 = sub_100068764();
  v10 = sub_10000966C(&qword_10009A800, &qword_10009A7F0, (uint64_t)&protocol conformance descriptor for ClosedRange<A>);
  View.dynamicTypeSize<A>(_:)(v8, v4, v7, v9, v10);
  return sub_1000092D0((uint64_t)v6, &qword_10009B070);
}

id sub_100067B10(int a1)
{
  void *v1;
  id v3;
  id v4;
  unsigned int v5;
  uint64_t v6;
  id v7;
  double v8;
  id v9;
  id v11;

  v3 = objc_msgSend(v1, "fontDescriptor");
  v4 = objc_msgSend(v11, "fontDescriptor");
  v5 = objc_msgSend(v4, "symbolicTraits");

  if ((a1 & ~v5) != 0)
    v6 = v5 | a1;
  else
    v6 = v5 & ~a1;
  v7 = objc_msgSend(v3, "fontDescriptorWithSymbolicTraits:", v6);

  if (!v7)
    return v11;
  objc_msgSend(v11, "pointSize");
  v9 = objc_msgSend((id)objc_opt_self(UIFont), "fontWithDescriptor:size:", v7, v8);

  return v9;
}

void sub_100067C28(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
}

uint64_t sub_100067C38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;

  v8 = sub_100067E9C();
  return static EnvironmentKey<>._valuesEqual(_:_:)(a1, a2, a3, a4, v8);
}

void sub_100067C88()
{
  qword_10009B710 = 0;
}

double sub_100067C94@<D0>(_QWORD *a1@<X8>)
{
  return sub_100067D28(&qword_1000982B0, (double *)&qword_10009B710, (uint64_t)sub_100067C88, a1);
}

uint64_t sub_100067CB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;

  v8 = sub_100067E58();
  return static EnvironmentKey<>._valuesEqual(_:_:)(a1, a2, a3, a4, v8);
}

void sub_100067D00()
{
  qword_10009B718 = 0;
}

double sub_100067D0C@<D0>(_QWORD *a1@<X8>)
{
  return sub_100067D28(&qword_1000982B8, (double *)&qword_10009B718, (uint64_t)sub_100067D00, a1);
}

double sub_100067D28@<D0>(_QWORD *a1@<X2>, double *a2@<X3>, uint64_t a3@<X4>, _QWORD *a4@<X8>)
{
  double result;

  if (*a1 != -1)
    swift_once(a1, a3);
  result = *a2;
  *a4 = *(_QWORD *)a2;
  return result;
}

uint64_t sub_100067D6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static EnvironmentKey<>._valuesEqual(_:_:)(a1, a2, a3, a4, &protocol witness table for Bool);
}

uint64_t sub_100067D78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;

  v8 = sub_100065E14();
  return static EnvironmentKey<>._valuesEqual(_:_:)(a1, a2, a3, a4, v8);
}

uint64_t *sub_100067DC8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

ValueMetadata *type metadata accessor for TFUIConfigKey()
{
  return &type metadata for TFUIConfigKey;
}

ValueMetadata *type metadata accessor for TFEffectiveComponentSizeKey()
{
  return &type metadata for TFEffectiveComponentSizeKey;
}

ValueMetadata *type metadata accessor for TFComponentWidthKey()
{
  return &type metadata for TFComponentWidthKey;
}

ValueMetadata *type metadata accessor for TFComponentColumnWidthKey()
{
  return &type metadata for TFComponentColumnWidthKey;
}

ValueMetadata *type metadata accessor for TFComponentSpansWidthKey()
{
  return &type metadata for TFComponentSpansWidthKey;
}

unint64_t sub_100067E58()
{
  unint64_t result;

  result = qword_10009AF88;
  if (!qword_10009AF88)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_10009AF88);
  }
  return result;
}

unint64_t sub_100067E9C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10009AF90;
  if (!qword_10009AF90)
  {
    v1 = sub_100004660(&qword_10009AF98);
    sub_100007D90(&qword_1000985D0, (uint64_t (*)(uint64_t))type metadata accessor for ComponentSize, (uint64_t)&unk_100073410);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_10009AF90);
  }
  return result;
}

uint64_t sub_100067F18()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100067F3C(double *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(double, double, double, double))(v1 + 16))(*a1, a1[1], a1[2], a1[3]);
}

unint64_t sub_100067F64()
{
  unint64_t result;

  result = qword_10009AFA0;
  if (!qword_10009AFA0)
  {
    result = swift_getWitnessTable(&unk_1000768E4, &type metadata for TFFrameTrackerKey);
    atomic_store(result, (unint64_t *)&qword_10009AFA0);
  }
  return result;
}

ValueMetadata *type metadata accessor for TFReducedComponentCornerSizeKey()
{
  return &type metadata for TFReducedComponentCornerSizeKey;
}

char *sub_100067FB8(char *a1, char **a2, uint64_t a3)
{
  int v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = &v5[(v4 + 16) & ~(unint64_t)v4];
    swift_retain();
  }
  else
  {
    v6 = a2[2];
    *((_QWORD *)a1 + 1) = a2[1];
    *((_QWORD *)a1 + 2) = v6;
    *((_QWORD *)a1 + 3) = a2[3];
    a1[32] = *((_BYTE *)a2 + 32);
    v7 = *(int *)(a3 + 32);
    v8 = &a1[v7];
    v9 = (char **)((char *)a2 + v7);
    v10 = v5;
    swift_retain();
    v11 = sub_10000498C(&qword_100099A68);
    if (swift_getEnumCaseMultiPayload(v9, v11) == 1)
    {
      v12 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(char *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v8, v9, v12);
      v13 = v8;
      v14 = v11;
      v15 = 1;
    }
    else
    {
      *(_QWORD *)v8 = *v9;
      swift_retain();
      v13 = v8;
      v14 = v11;
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v13, v14, v15);
  }
  return a1;
}

uint64_t sub_1000680AC(id *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;

  swift_release();
  v4 = (char *)a1 + *(int *)(a2 + 32);
  v5 = sub_10000498C(&qword_100099A68);
  if (swift_getEnumCaseMultiPayload(v4, v5) != 1)
    return swift_release();
  v6 = type metadata accessor for ContentSizeCategory(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
}

uint64_t sub_10006812C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v7 = *(int *)(a3 + 32);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v4;
  swift_retain();
  v11 = sub_10000498C(&qword_100099A68);
  if (swift_getEnumCaseMultiPayload(v9, v11) == 1)
  {
    v12 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v8, v9, v12);
    v13 = 1;
  }
  else
  {
    *v8 = *v9;
    swift_retain();
    v13 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v11, v13);
  return a1;
}

uint64_t sub_1000681EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *(void **)a1;
  v7 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v7;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v9;
  if (a1 != a2)
  {
    v10 = *(int *)(a3 + 32);
    v11 = (_QWORD *)(a1 + v10);
    v12 = (_QWORD *)(a2 + v10);
    sub_1000092D0(a1 + v10, &qword_100099A68);
    v13 = sub_10000498C(&qword_100099A68);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
      v15 = 1;
    }
    else
    {
      *v11 = *v12;
      swift_retain();
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v13, v15);
  }
  return a1;
}

uint64_t sub_1000682EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v4 = *(int *)(a3 + 32);
  v5 = (void *)(a1 + v4);
  v6 = (const void *)(a2 + v4);
  v7 = sub_10000498C(&qword_100099A68);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v5, v6, v8);
    swift_storeEnumTagMultiPayload(v5, v7, 1);
  }
  else
  {
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  return a1;
}

uint64_t sub_1000683AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  if (a1 != a2)
  {
    v7 = *(int *)(a3 + 32);
    v8 = (void *)(a1 + v7);
    v9 = (const void *)(a2 + v7);
    sub_1000092D0(a1 + v7, &qword_100099A68);
    v10 = sub_10000498C(&qword_100099A68);
    if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
    {
      v11 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
      swift_storeEnumTagMultiPayload(v8, v10, 1);
    }
    else
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000684A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000684B0);
}

uint64_t sub_1000684B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_10000498C(&qword_10009AFB0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t sub_100068530(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006853C);
}

uint64_t sub_10006853C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_10000498C(&qword_10009AFB0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for TFFontModifier(uint64_t a1)
{
  uint64_t result;

  result = qword_10009B010;
  if (!qword_10009B010)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TFFontModifier);
  return result;
}

void sub_1000685F0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = "\b";
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[3] = &unk_1000768A8;
  sub_100068688(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
  }
}

void sub_100068688(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10009B020)
  {
    v2 = type metadata accessor for ContentSizeCategory(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10009B020);
  }
}

ValueMetadata *type metadata accessor for TFFrameTrackerKey()
{
  return &type metadata for TFFrameTrackerKey;
}

ValueMetadata *type metadata accessor for TFFrameTracker()
{
  return &type metadata for TFFrameTracker;
}

uint64_t sub_1000686FC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100079A0C, 1);
}

uint64_t sub_10006870C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000799E4, 1);
}

uint64_t sub_10006871C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000498C(&qword_10009A7F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100068764()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10009B078;
  if (!qword_10009B078)
  {
    v1 = sub_100004660(&qword_10009B070);
    sub_1000687C8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10009B078);
  }
  return result;
}

unint64_t sub_1000687C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10009B080;
  if (!qword_10009B080)
  {
    v1 = sub_100004660(&qword_10009B088);
    sub_10006882C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10009B080);
  }
  return result;
}

unint64_t sub_10006882C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10009B090;
  if (!qword_10009B090)
  {
    v1 = sub_100004660(&qword_10009B098);
    sub_10000966C(&qword_10009B0A0, &qword_10009B0A8, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_10000966C(&qword_100099CE0, &qword_10009ADC0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10009B090);
  }
  return result;
}

uint64_t sub_1000688D0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000688F4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1000674A8(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

ValueMetadata *type metadata accessor for TFComponentIsHoveredKey()
{
  return &type metadata for TFComponentIsHoveredKey;
}

uint64_t sub_10006890C()
{
  _QWORD v1[4];

  v1[0] = sub_100004660(&qword_10009B070);
  v1[1] = sub_100004660(&qword_10009A7F0);
  v1[2] = sub_100068764();
  v1[3] = sub_10000966C(&qword_10009A800, &qword_10009A7F0, (uint64_t)&protocol conformance descriptor for ClosedRange<A>);
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
}

unint64_t sub_100068998()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10009B0C8;
  if (!qword_10009B0C8)
  {
    v1 = sub_100004660(&qword_10009B0C0);
    sub_10000966C(&qword_10009B0D0, &qword_10009B0B8, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_10000966C(&qword_10009B0D8, &qword_10009B0E0, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10009B0C8);
  }
  return result;
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return objc_opt_self(_TtC19FontPickerUIServiceP33_62B5439BB915AF267293EC982F09963519ResourceBundleClass);
}

void sub_100068A58()
{
  id v0;
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[LSApplicationWorkspace defaultWorkspace](LSApplicationWorkspace, "defaultWorkspace"));
  v0 = objc_msgSend(objc_alloc((Class)NSURL), "initWithString:", CFSTR("settings-navigation://com.apple.Settings.General/FONT_SETTING"));
  objc_msgSend(v1, "openSensitiveURL:withOptions:", v0, 0);

}

id sub_100068BA8()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_10009E9A0;
  v7 = qword_10009E9A0;
  if (!qword_10009E9A0)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_10006DB34;
    v3[3] = &unk_100091178;
    v3[4] = &v4;
    sub_10006DB34((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_100068C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100068F64(uint64_t a1)
{
  void *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;

  v2 = *(void **)(a1 + 32);
  v3 = *(double *)(a1 + 40);
  objc_msgSend(v2, "size");
  v5 = (v3 - v4) * 0.5;
  v6 = *(double *)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "size");
  v8 = (v6 - v7) * 0.5;
  objc_msgSend(*(id *)(a1 + 32), "size");
  v10 = v9;
  objc_msgSend(*(id *)(a1 + 32), "size");
  return _objc_msgSend(v2, "drawInRect:", v5, v8, v10, v11);
}

void sub_10006933C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  id obj;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];

  v3 = a2;
  if (objc_msgSend(v3, "count"))
  {
    v4 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", 1));
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(void **)(v5 + 440);
    *(_QWORD *)(v5 + 440) = v4;

    v7 = objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", 1));
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(void **)(v8 + 448);
    *(_QWORD *)(v8 + 448) = v7;

    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 448), "addObject:", &off_100091718);
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = v3;
    obj = v3;
    v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v23;
      do
      {
        v13 = 0;
        do
        {
          if (*(_QWORD *)v23 != v12)
            objc_enumerationMutation(obj);
          v14 = *(_QWORD *)(*((_QWORD *)&v22 + 1) + 8 * (_QWORD)v13);
          v15 = objc_alloc((Class)_UIFontPickerFontInfo);
          +[UIFont defaultFontSize](UIFont, "defaultFontSize");
          v16 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont fontWithName:size:](UIFont, "fontWithName:size:", v14));
          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "fontDescriptor"));
          v18 = objc_msgSend(v15, "initWithFontDescriptor:", v17);

          if (objc_msgSend(v18, "matchesConfiguration:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 496)))
          {
            v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 440), "objectForKeyedSubscript:", &off_100091718));
            if (!v19)
            {
              v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
              objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 440), "setObject:forKey:", v19, &off_100091718);
            }
            objc_msgSend(v19, "addObject:", v18, v20);

          }
          v13 = (char *)v13 + 1;
        }
        while (v11 != v13);
        v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
      }
      while (v11);
    }

    v3 = v20;
  }

}

void sub_100069590(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id *v16;
  void *v17;
  void *v18;
  id obj;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _QWORD v24[5];
  _BYTE v25[128];

  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  v24[2] = sub_100069814;
  v24[3] = &unk_100090F30;
  v2 = *(void **)(a1 + 32);
  v24[4] = *(_QWORD *)(a1 + 40);
  objc_msgSend(v2, "enumerateFontFamilyNamesUsingBlock:", v24);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 448), "sortUsingSelector:", "compare:");
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  obj = *(id *)(*(_QWORD *)(a1 + 40) + 448);
  v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v20, v25, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v21;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v21 != v5)
          objc_enumerationMutation(obj);
        v7 = *(_QWORD *)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)i);
        v8 = *(_QWORD *)(a1 + 40);
        v9 = *(void **)(v8 + 432);
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v8 + 440), "objectForKeyedSubscript:", v7));
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "sortedArrayFromArray:collationStringSelector:", v10, "localizedFamilyName"));
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 440), "setObject:forKeyedSubscript:", v11, v7);

      }
      v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v20, v25, 16);
    }
    while (v4);
  }

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_loadRecents"));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 440), "setObject:forKeyedSubscript:", v12, &off_100091730);

  v13 = *(_QWORD *)(a1 + 40);
  v14 = *(void **)(v13 + 528);
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v13 + 440), "objectForKeyedSubscript:", &off_100091730));
  objc_msgSend(v14, "_setRecents:", v15);

  v16 = *(id **)(a1 + 40);
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16[55], "objectForKeyedSubscript:", &off_100091730));
  objc_msgSend(v16, "_setRecentsHidden:", objc_msgSend(v17, "count") == 0);

  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_loadSystemExtras"));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 440), "setObject:forKeyedSubscript:", v18, &off_100091748);

}

void sub_100069814(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;

  v5 = a3;
  v6 = a2;
  v16 = objc_msgSend(objc_alloc((Class)_UIFontPickerFontInfo), "initWithFamilyName:", v6);

  v7 = objc_msgSend(v5, "count");
  objc_msgSend(v16, "setHasMultipleFaces:", (unint64_t)v7 > 1);
  if (objc_msgSend(v16, "matchesConfiguration:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 496)))
  {
    v8 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 432), "sectionForObject:collationStringSelector:", v16, "localizedFamilyName");
    v9 = *(void **)(*(_QWORD *)(a1 + 32) + 440);
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v8));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v10));

    if (!v11)
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
      v12 = *(void **)(*(_QWORD *)(a1 + 32) + 440);
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v8));
      objc_msgSend(v12, "setObject:forKey:", v11, v13);

      v14 = *(void **)(*(_QWORD *)(a1 + 32) + 448);
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v8));
      objc_msgSend(v14, "addObject:", v15);

    }
    objc_msgSend(v11, "addObject:", v16);

  }
}

void sub_10006A1D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *location)
{
  id *v11;
  uint64_t v12;

  objc_destroyWeak(v11);
  objc_destroyWeak((id *)(v12 - 192));
  _Unwind_Resume(a1);
}

void sub_10006A21C(uint64_t a1, void *a2)
{
  id v3;
  id *WeakRetained;
  void *v5;
  id v6;
  id v7;

  v3 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v7 = v3;
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v7, 1));
    objc_msgSend(WeakRetained, "_setSelectedFonts:scrollToVisible:updatingRecentsSection:", v5, 0, 1);

    v6 = objc_loadWeakRetained(WeakRetained + 71);
    objc_msgSend(v6, "_pickerDidSelectFont:", v3);

  }
}

void sub_10006A2EC(uint64_t a1)
{
  id *WeakRetained;
  void *v2;
  void *v3;
  id v4;
  void *v5;
  id *v6;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v6 = WeakRetained;
    objc_msgSend(WeakRetained, "_loadFonts");
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6[59], "searchBar"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "text"));

    if (objc_msgSend(v3, "length"))
    {
      v4 = v6[60];
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "_fontsForSearchTerm:", v3));
      objc_msgSend(v4, "_setResultFonts:", v5);

    }
    WeakRetained = v6;
  }

}

void sub_10006AC98(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_indexPathForFont:fontInfo:", a2, 0));
  if (v3)
  {
    v4 = v3;
    objc_msgSend(*(id *)(a1 + 40), "addObject:", v3);
    v3 = v4;
  }

}

void sub_10006ACEC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  _QWORD *v19;
  void *v20;
  void *v21;
  _QWORD v22[5];
  char v23;
  _QWORD v24[4];
  id v25;

  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  v24[2] = sub_10006AF10;
  v24[3] = &unk_100090FF8;
  v2 = *(void **)(a1 + 32);
  v25 = *(id *)(a1 + 40);
  objc_msgSend(v2, "enumerateObjectsUsingBlock:", v24);
  if (objc_msgSend(*(id *)(a1 + 40), "count"))
  {
    v3 = *(_QWORD *)(a1 + 48);
    v4 = *(id *)(a1 + 40);
    v5 = *(void **)(v3 + 464);
    *(_QWORD *)(v3 + 464) = v4;
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 48);
    v5 = *(void **)(v6 + 464);
    *(_QWORD *)(v6 + 464) = 0;
  }

  v7 = *(_QWORD **)(a1 + 48);
  if (v7[57])
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "tableView"));
    v9 = v8;
    if (*(_BYTE *)(a1 + 64))
      v10 = 5;
    else
      v10 = 0;
    objc_msgSend(v8, "reloadRowsAtIndexPaths:withRowAnimation:", *(_QWORD *)(*(_QWORD *)(a1 + 48) + 456), v10);

  }
  if (objc_msgSend(*(id *)(a1 + 56), "count"))
  {
    objc_storeStrong((id *)(*(_QWORD *)(a1 + 48) + 456), *(id *)(a1 + 56));
    if (*(_BYTE *)(a1 + 64))
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "firstObject"));

      if (v11)
      {
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "tableView"));
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "firstObject"));
        objc_msgSend(v12, "scrollToRowAtIndexPath:atScrollPosition:animated:", v13, 1, 0);

      }
    }
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "tableView"));
    v15 = v14;
    if (*(_BYTE *)(a1 + 64))
      v16 = 5;
    else
      v16 = 0;
    objc_msgSend(v14, "reloadRowsAtIndexPaths:withRowAnimation:", *(_QWORD *)(a1 + 56), v16);
  }
  else
  {
    v17 = *(_QWORD *)(a1 + 48);
    v15 = *(void **)(v17 + 456);
    *(_QWORD *)(v17 + 456) = 0;
  }

  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "_selectedFontsForCurrentConfiguration"));
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_10006AF74;
  v22[3] = &unk_100091020;
  v23 = *(_BYTE *)(a1 + 65);
  v22[4] = *(_QWORD *)(a1 + 48);
  objc_msgSend(v18, "enumerateObjectsWithOptions:usingBlock:", 2, v22);

  v19 = *(_QWORD **)(a1 + 48);
  v20 = (void *)v19[66];
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "_selectedFontsForCurrentConfiguration"));
  objc_msgSend(v20, "_setSelectedFontsInfo:", v21);

}

void sub_10006AF10(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  v4 = objc_msgSend(objc_alloc((Class)_UIFontPickerFontInfo), "initWithFontDescriptor:", v3);

  objc_msgSend(*(id *)(a1 + 32), "addObject:", v4);
}

void sub_10006AF74(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_msgSend(v4, "isSystemFont") & 1) == 0)
  {
    v3 = *(void **)(a1 + 32);
    if (*(_BYTE *)(a1 + 40))
      objc_msgSend(v3, "_addToRecents:", v4);
    else
      objc_msgSend(v3, "_persistToRecents:", v4);
  }

}

uint64_t sub_10006B058(uint64_t a1)
{
  return _UIFontPickerPersistToRecents(*(_QWORD *)(a1 + 32));
}

void sub_10006B278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10006B290(uint64_t a1, void *a2)
{
  id result;

  result = objc_msgSend(a2, "count");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = (unint64_t)result > 1;
  return result;
}

void sub_10006B800(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "familyInfo"));
  objc_msgSend(v2, "addObject:", v3);

}

void sub_10006C1E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10006C204(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "setFontInfo:usingSystemFont:", *(_QWORD *)(a1 + 40), objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 496), "displayUsingSystemFont"));
}

void sub_10006C240(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6;
  int v7;
  void *v8;
  id v9;

  v6 = a2;
  v7 = *(unsigned __int8 *)(a1 + 48);
  v9 = v6;
  v8 = v6;
  if (!*(_BYTE *)(a1 + 48))
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "familyInfo"));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(v8, "isEqual:", *(_QWORD *)(a1 + 32));
  if (!v7)

  *a4 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
}

id sub_10006D080(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "setFontInfo:usingSystemFont:", *(_QWORD *)(a1 + 40), objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 440), "displayUsingSystemFont"));
}

Class sub_10006DB34(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  __int128 v7;
  uint64_t v8;

  v6 = 0;
  if (!qword_10009E9A8)
  {
    v7 = off_100091198;
    v8 = 0;
    qword_10009E9A8 = _sl_dlopen(&v7, &v6);
  }
  if (!qword_10009E9A8)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *FontServicesLibrary(void)"));
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("_UIFontPickerContentViewController.m"), 35, CFSTR("%s"), v6);

    goto LABEL_10;
  }
  if (v6)
    free(v6);
  result = objc_getClass("FontPickerClientFontContext");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getFontPickerClientFontContextClass(void)_block_invoke"));
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("_UIFontPickerContentViewController.m"), 36, CFSTR("Unable to find class %s"), "FontPickerClientFontContext");

LABEL_10:
    __break(1u);
  }
  qword_10009E9A0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

id objc_msgSend_CGImage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CGImage");
}

id objc_msgSend_CGRectValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CGRectValue");
}

id objc_msgSend__addToRecents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addToRecents:");
}

id objc_msgSend__clientFontContext(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clientFontContext");
}

id objc_msgSend__clientFontContextEndpoint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clientFontContextEndpoint");
}

id objc_msgSend__constants(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_constants");
}

id objc_msgSend__filterFamilyName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_filterFamilyName");
}

id objc_msgSend__filterResultsForSearchTerm_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_filterResultsForSearchTerm:");
}

id objc_msgSend__fontsForSearchTerm_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fontsForSearchTerm:");
}

id objc_msgSend__hasMultipleFacesInClientFontContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_hasMultipleFacesInClientFontContext:");
}

id objc_msgSend__hasSettingsLinkSection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_hasSettingsLinkSection");
}

id objc_msgSend__hideSearchBar(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_hideSearchBar");
}

id objc_msgSend__hostedWindowScene(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_hostedWindowScene");
}

id objc_msgSend__identifierForSection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_identifierForSection:");
}

id objc_msgSend__includeDefaultFont(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_includeDefaultFont");
}

id objc_msgSend__indexPathForFont_fontInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_indexPathForFont:fontInfo:");
}

id objc_msgSend__infoForIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_infoForIndexPath:");
}

id objc_msgSend__isSettingsLinkSection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isSettingsLinkSection:");
}

id objc_msgSend__loadFonts(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loadFonts");
}

id objc_msgSend__loadRecents(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loadRecents");
}

id objc_msgSend__loadSystemExtras(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loadSystemExtras");
}

id objc_msgSend__numberOfExtraTopSections(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_numberOfExtraTopSections");
}

id objc_msgSend__persistToRecents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_persistToRecents:");
}

id objc_msgSend__pickerDidCancel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pickerDidCancel");
}

id objc_msgSend__pickerDidSelectFont_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pickerDidSelectFont:");
}

id objc_msgSend__pickerIsShowingKeyboard_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pickerIsShowingKeyboard:");
}

id objc_msgSend__presentColorPicker_selectedColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_presentColorPicker:selectedColor:");
}

id objc_msgSend__presentFontPickerWithConfiguration_selectedFonts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_presentFontPickerWithConfiguration:selectedFonts:");
}

id objc_msgSend__presentTypographySettingsForFont_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_presentTypographySettingsForFont:");
}

id objc_msgSend__sectionContentInset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sectionContentInset");
}

id objc_msgSend__selectedFontsForCurrentConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_selectedFontsForCurrentConfiguration");
}

id objc_msgSend__setAdjustForIndexBar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setAdjustForIndexBar:");
}

id objc_msgSend__setConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setConfiguration:");
}

id objc_msgSend__setConstants_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setConstants:");
}

id objc_msgSend__setHideNavigationBar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setHideNavigationBar:");
}

id objc_msgSend__setLayoutMarginLeading_trailing_header_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setLayoutMarginLeading:trailing:header:");
}

id objc_msgSend__setPreferredContentSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setPreferredContentSize:");
}

id objc_msgSend__setRecents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setRecents:");
}

id objc_msgSend__setRecentsHidden_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setRecentsHidden:");
}

id objc_msgSend__setResultFonts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setResultFonts:");
}

id objc_msgSend__setSelectedFonts_scrollToVisible_updatingRecentsSection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setSelectedFonts:scrollToVisible:updatingRecentsSection:");
}

id objc_msgSend__setSelectedFontsInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setSelectedFontsInfo:");
}

id objc_msgSend__setSelectionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setSelectionHandler:");
}

id objc_msgSend__setShowsGrabber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setShowsGrabber:");
}

id objc_msgSend__settingsLinkSymbolImage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_settingsLinkSymbolImage");
}

id objc_msgSend__setupTitleViewWhenNavigationBarHidden_searchBarHidden_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setupTitleViewWhenNavigationBarHidden:searchBarHidden:");
}

id objc_msgSend__showsSectionIndexBar(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showsSectionIndexBar");
}

id objc_msgSend__textFormattingDidChangeValue_textAttributesData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_textFormattingDidChangeValue:textAttributesData:");
}

id objc_msgSend__textFormattingDidFinish(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_textFormattingDidFinish");
}

id objc_msgSend__tintColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_tintColor");
}

id objc_msgSend__updateSettingsLinkSymbolImageIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateSettingsLinkSymbolImageIfNeeded");
}

id objc_msgSend_actionForChangeValue_textAttributesData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionForChangeValue:textAttributesData:");
}

id objc_msgSend_actionForDidFinish(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionForDidFinish");
}

id objc_msgSend_actionForPresentColorPickerWithRect_selectedColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionForPresentColorPickerWithRect:selectedColor:");
}

id objc_msgSend_actionForPresentFontPickerWithConfiguration_selectedFonts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionForPresentFontPickerWithConfiguration:selectedFonts:");
}

id objc_msgSend_actionForPresentTypographySettingsForFont_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionForPresentTypographySettingsForFont:");
}

id objc_msgSend_actionWithHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionWithHandler:");
}

id objc_msgSend_activateConstraints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activateConstraints:");
}

id objc_msgSend_addAttribute_value_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAttribute:value:range:");
}

id objc_msgSend_addChildViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addChildViewController:");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addObserverForName_object_queue_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserverForName:object:queue:usingBlock:");
}

id objc_msgSend_addSubview_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSubview:");
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "array");
}

id objc_msgSend_arrayWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithCapacity:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_attributedString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributedString");
}

id objc_msgSend_backgroundColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backgroundColor");
}

id objc_msgSend_beginUpdates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginUpdates");
}

id objc_msgSend_bottomAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bottomAnchor");
}

id objc_msgSend_bounds(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bounds");
}

id objc_msgSend_bs_secureDataFromObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bs_secureDataFromObject:");
}

id objc_msgSend_bs_secureDecodedFromData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bs_secureDecodedFromData:");
}

id objc_msgSend_bs_secureDecodedFromData_withAdditionalClasses_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bs_secureDecodedFromData:withAdditionalClasses:");
}

id objc_msgSend_bundleForClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleForClass:");
}

id objc_msgSend_clearColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearColor");
}

id objc_msgSend_clearConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearConfiguration");
}

id objc_msgSend_color(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "color");
}

id objc_msgSend_configureWithOpaqueBackground(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureWithOpaqueBackground");
}

id objc_msgSend_configureWithTransparentBackground(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureWithTransparentBackground");
}

id objc_msgSend_conformsToProtocol_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "conformsToProtocol:");
}

id objc_msgSend_constraintEqualToAnchor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintEqualToAnchor:");
}

id objc_msgSend_contentType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentType");
}

id objc_msgSend_contentView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentView");
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copy");
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "count");
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_currentCollation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentCollation");
}

id objc_msgSend_currentHandler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentHandler");
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultCenter");
}

id objc_msgSend_defaultContentConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultContentConfiguration");
}

id objc_msgSend_defaultFontSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultFontSize");
}

id objc_msgSend_defaultWorkspace(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultWorkspace");
}

id objc_msgSend_delegate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "delegate");
}

id objc_msgSend_deleteRowsAtIndexPaths_withRowAnimation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteRowsAtIndexPaths:withRowAnimation:");
}

id objc_msgSend_dequeueReusableCellWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dequeueReusableCellWithIdentifier:");
}

id objc_msgSend_dequeueReusableHeaderFooterViewWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dequeueReusableHeaderFooterViewWithIdentifier:");
}

id objc_msgSend_deselectRowAtIndexPath_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deselectRowAtIndexPath:animated:");
}

id objc_msgSend_dictionaryWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithCapacity:");
}

id objc_msgSend_didMoveToParentViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didMoveToParentViewController:");
}

id objc_msgSend_directionalLayoutMargins(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "directionalLayoutMargins");
}

id objc_msgSend_displayScale(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayScale");
}

id objc_msgSend_displayUsingSystemFont(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayUsingSystemFont");
}

id objc_msgSend_endUpdates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endUpdates");
}

id objc_msgSend_enumerateFontFamilyNamesUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateFontFamilyNamesUsingBlock:");
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateObjectsUsingBlock:");
}

id objc_msgSend_enumerateObjectsWithOptions_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateObjectsWithOptions:usingBlock:");
}

id objc_msgSend_familyInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "familyInfo");
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstObject");
}

id objc_msgSend_font(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "font");
}

id objc_msgSend_fontCanRenderLocalizedName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fontCanRenderLocalizedName");
}

id objc_msgSend_fontDescriptor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fontDescriptor");
}

id objc_msgSend_fontSelected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fontSelected:");
}

id objc_msgSend_fontWithName_size_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fontWithName:size:");
}

id objc_msgSend_frame(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "frame");
}

id objc_msgSend_handleFailureInFunction_file_lineNumber_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:");
}

id objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFailureInMethod:object:file:lineNumber:description:");
}

id objc_msgSend_hasMultipleFaces(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasMultipleFaces");
}

id objc_msgSend_headerViewForSection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "headerViewForSection:");
}

id objc_msgSend_imageForGraphicSymbolDescriptor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageForGraphicSymbolDescriptor:");
}

id objc_msgSend_imageProperties(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageProperties");
}

id objc_msgSend_imageWithActions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageWithActions:");
}

id objc_msgSend_includeFaces(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "includeFaces");
}

id objc_msgSend_indexOfObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexOfObject:");
}

id objc_msgSend_indexPathForRow_inSection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexPathForRow:inSection:");
}

id objc_msgSend_info(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "info");
}

id objc_msgSend_initWithBarButtonSystemItem_target_action_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBarButtonSystemItem:target:action:");
}

id objc_msgSend_initWithCGImage_scale_orientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCGImage:scale:orientation:");
}

id objc_msgSend_initWithFamilyName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFamilyName:");
}

id objc_msgSend_initWithFontDescriptor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFontDescriptor:");
}

id objc_msgSend_initWithFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFrame:");
}

id objc_msgSend_initWithInfo_responder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithInfo:responder:");
}

id objc_msgSend_initWithReuseIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithReuseIdentifier:");
}

id objc_msgSend_initWithSearchResultsController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSearchResultsController:");
}

id objc_msgSend_initWithSize_format_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSize:format:");
}

id objc_msgSend_initWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithString:");
}

id objc_msgSend_initWithStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStyle:");
}

id objc_msgSend_initWithStyle_reuseIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStyle:reuseIdentifier:");
}

id objc_msgSend_initWithSymbolName_bundleURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSymbolName:bundleURL:");
}

id objc_msgSend_initWithSystemDefaultFont(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSystemDefaultFont");
}

id objc_msgSend_insertObject_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertObject:atIndex:");
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "integerValue");
}

id objc_msgSend_intrinsicContentSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intrinsicContentSize");
}

id objc_msgSend_invalidateSharedInstanceForEndpoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidateSharedInstanceForEndpoint:");
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqual:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isFontFamilyAvailable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isFontFamilyAvailable");
}

id objc_msgSend_isHidden(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isHidden");
}

id objc_msgSend_isSystemFont(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSystemFont");
}

id objc_msgSend_labelColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "labelColor");
}

id objc_msgSend_layoutDirection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "layoutDirection");
}

id objc_msgSend_layoutMargins(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "layoutMargins");
}

id objc_msgSend_leadingAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "leadingAnchor");
}

id objc_msgSend_leftAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "leftAnchor");
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "length");
}

id objc_msgSend_lineHeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lineHeight");
}

id objc_msgSend_localizedFamilyName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedFamilyName");
}

id objc_msgSend_localizedName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedName");
}

id objc_msgSend_localizedStringForKey_value_table_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringForKey:value:table:");
}

id objc_msgSend_localizedStringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringWithFormat:");
}

id objc_msgSend_mainQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainQueue");
}

id objc_msgSend_matchesConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "matchesConfiguration:");
}

id objc_msgSend_matchesFamilyForFontDescriptor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "matchesFamilyForFontDescriptor:");
}

id objc_msgSend_matchesFontDescriptor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "matchesFontDescriptor:");
}

id objc_msgSend_matchesSearchString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "matchesSearchString:");
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mutableCopy");
}

id objc_msgSend_navigationController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "navigationController");
}

id objc_msgSend_navigationItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "navigationItem");
}

id objc_msgSend_numberOfSectionsInTableView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberOfSectionsInTableView:");
}

id objc_msgSend_numberWithInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInteger:");
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndexedSubscript:");
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKey:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_objectForSetting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForSetting:");
}

id objc_msgSend_openSensitiveURL_withOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openSensitiveURL:withOptions:");
}

id objc_msgSend_plainButtonConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "plainButtonConfiguration");
}

id objc_msgSend_pointSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pointSize");
}

id objc_msgSend_postscriptName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postscriptName");
}

id objc_msgSend_preferredContentSizeCategory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferredContentSizeCategory");
}

id objc_msgSend_preferredFontForTextStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferredFontForTextStyle:");
}

id objc_msgSend_preferredFontForTextStyle_compatibleWithTraitCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferredFontForTextStyle:compatibleWithTraitCollection:");
}

id objc_msgSend_previewImage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "previewImage");
}

id objc_msgSend_pushViewController_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pushViewController:animated:");
}

id objc_msgSend_rangeOfString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfString:");
}

id objc_msgSend_rangeOfString_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfString:options:");
}

id objc_msgSend_registerClass_forCellReuseIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerClass:forCellReuseIdentifier:");
}

id objc_msgSend_registerClass_forHeaderFooterViewReuseIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerClass:forHeaderFooterViewReuseIdentifier:");
}

id objc_msgSend_reloadData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reloadData");
}

id objc_msgSend_reloadRowsAtIndexPaths_withRowAnimation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reloadRowsAtIndexPaths:withRowAnimation:");
}

id objc_msgSend_removeLastObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeLastObject");
}

id objc_msgSend_removeObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:");
}

id objc_msgSend_rightAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rightAnchor");
}

id objc_msgSend_row(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "row");
}

id objc_msgSend_runBlockInClientFontContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "runBlockInClientFontContext:");
}

id objc_msgSend_runWithFontNamesForFamilyName_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "runWithFontNamesForFamilyName:usingBlock:");
}

id objc_msgSend_safeAreaInsets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "safeAreaInsets");
}

id objc_msgSend_safeAreaLayoutGuide(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "safeAreaLayoutGuide");
}

id objc_msgSend_scale(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scale");
}

id objc_msgSend_scrollToRowAtIndexPath_atScrollPosition_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrollToRowAtIndexPath:atScrollPosition:animated:");
}

id objc_msgSend_searchBar(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "searchBar");
}

id objc_msgSend_searchConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "searchConfiguration");
}

id objc_msgSend_searchTerm(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "searchTerm");
}

id objc_msgSend_secondaryButtonProperties(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "secondaryButtonProperties");
}

id objc_msgSend_section(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "section");
}

id objc_msgSend_sectionForObject_collationStringSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sectionForObject:collationStringSelector:");
}

id objc_msgSend_sectionForSectionIndexTitleAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sectionForSectionIndexTitleAtIndex:");
}

id objc_msgSend_sectionIndexTitles(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sectionIndexTitles");
}

id objc_msgSend_sectionTitles(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sectionTitles");
}

id objc_msgSend_sendAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendAction:");
}

id objc_msgSend_setAccessoryType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccessoryType:");
}

id objc_msgSend_setAttributedText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttributedText:");
}

id objc_msgSend_setAxesPreservingSuperviewLayoutMargins_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAxesPreservingSuperviewLayoutMargins:");
}

id objc_msgSend_setBackground_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackground:");
}

id objc_msgSend_setBackgroundColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackgroundColor:");
}

id objc_msgSend_setCompactScrollEdgeAppearance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompactScrollEdgeAppearance:");
}

id objc_msgSend_setContentConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentConfiguration:");
}

id objc_msgSend_setContentInset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentInset:");
}

id objc_msgSend_setContentUnavailableConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentUnavailableConfiguration:");
}

id objc_msgSend_setDataDetectorTypes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDataDetectorTypes:");
}

id objc_msgSend_setDefinesPresentationContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDefinesPresentationContext:");
}

id objc_msgSend_setDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelegate:");
}

id objc_msgSend_setDirectionalLayoutMargins_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDirectionalLayoutMargins:");
}

id objc_msgSend_setEditable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEditable:");
}

id objc_msgSend_setEnclosureColors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEnclosureColors:");
}

id objc_msgSend_setFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFrame:");
}

id objc_msgSend_setHasMultipleFaces_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasMultipleFaces:");
}

id objc_msgSend_setHidden_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHidden:");
}

id objc_msgSend_setHidesNavigationBarDuringPresentation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHidesNavigationBarDuringPresentation:");
}

id objc_msgSend_setHidesSearchBarWhenScrolling_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHidesSearchBarWhenScrolling:");
}

id objc_msgSend_setImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImage:");
}

id objc_msgSend_setImageToTextPadding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImageToTextPadding:");
}

id objc_msgSend_setKeyboardDismissMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeyboardDismissMode:");
}

id objc_msgSend_setLineFragmentPadding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLineFragmentPadding:");
}

id objc_msgSend_setNeedsLayout(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedsLayout");
}

id objc_msgSend_setNeedsUpdateContentUnavailableConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedsUpdateContentUnavailableConfiguration");
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKey:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setObject_forSetting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forSetting:");
}

id objc_msgSend_setOpaque_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOpaque:");
}

id objc_msgSend_setPreferredSearchBarPlacement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreferredSearchBarPlacement:");
}

id objc_msgSend_setPrimaryAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrimaryAction:");
}

id objc_msgSend_setRenderingMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRenderingMode:");
}

id objc_msgSend_setRightBarButtonItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRightBarButtonItem:");
}

id objc_msgSend_setScale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScale:");
}

id objc_msgSend_setScrollEdgeAppearance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScrollEdgeAppearance:");
}

id objc_msgSend_setScrollEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScrollEnabled:");
}

id objc_msgSend_setSearchController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSearchController:");
}

id objc_msgSend_setSearchResultsUpdater_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSearchResultsUpdater:");
}

id objc_msgSend_setSearchTerm_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSearchTerm:");
}

id objc_msgSend_setSearchText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSearchText:");
}

id objc_msgSend_setSecondaryButton_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSecondaryButton:");
}

id objc_msgSend_setSectionFooterHeight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSectionFooterHeight:");
}

id objc_msgSend_setSelectable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectable:");
}

id objc_msgSend_setSeparatorInsetReference_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSeparatorInsetReference:");
}

id objc_msgSend_setSymbolColors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSymbolColors:");
}

id objc_msgSend_setTableHeaderView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTableHeaderView:");
}

id objc_msgSend_setTableView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTableView:");
}

id objc_msgSend_setText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setText:");
}

id objc_msgSend_setTextContainerInset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTextContainerInset:");
}

id objc_msgSend_setTintColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTintColor:");
}

id objc_msgSend_setTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTitle:");
}

id objc_msgSend_setTitleView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTitleView:");
}

id objc_msgSend_setTranslatesAutoresizingMaskIntoConstraints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTranslatesAutoresizingMaskIntoConstraints:");
}

id objc_msgSend_setView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setView:");
}

id objc_msgSend_setWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithObject:");
}

id objc_msgSend_set_filterFamilyName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_filterFamilyName:");
}

id objc_msgSend_sharedInstanceForEndpoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedInstanceForEndpoint:");
}

id objc_msgSend_size(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "size");
}

id objc_msgSend_sizeThatFits_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sizeThatFits:");
}

id objc_msgSend_sortUsingSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortUsingSelector:");
}

id objc_msgSend_sortedArrayFromArray_collationStringSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortedArrayFromArray:collationStringSelector:");
}

id objc_msgSend_stringWithUTF8String_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithUTF8String:");
}

id objc_msgSend_tableHeaderView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tableHeaderView");
}

id objc_msgSend_tableView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tableView");
}

id objc_msgSend_text(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "text");
}

id objc_msgSend_textContainer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "textContainer");
}

id objc_msgSend_textProperties(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "textProperties");
}

id objc_msgSend_topAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topAnchor");
}

id objc_msgSend_trailingAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trailingAnchor");
}

id objc_msgSend_traitCollection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "traitCollection");
}

id objc_msgSend_traitCollectionWithPreferredContentSizeCategory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "traitCollectionWithPreferredContentSizeCategory:");
}

id objc_msgSend_userInterfaceIdiom(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userInterfaceIdiom");
}

id objc_msgSend_valueWithBytes_objCType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueWithBytes:objCType:");
}

id objc_msgSend_view(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "view");
}

id objc_msgSend_viewControllers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "viewControllers");
}

id objc_msgSend_willMoveToParentViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "willMoveToParentViewController:");
}
