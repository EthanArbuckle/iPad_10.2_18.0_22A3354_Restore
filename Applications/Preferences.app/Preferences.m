uint64_t sub_100004FC8(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t sub_100005008()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015BE18;
  if (!qword_10015BE18)
  {
    v1 = type metadata accessor for OS_dispatch_queue.Attributes(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for OS_dispatch_queue.Attributes, v1);
    atomic_store(result, (unint64_t *)&qword_10015BE18);
  }
  return result;
}

uint64_t sub_100005050(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100005060(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100005070(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100005080(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100005090(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000050A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000050B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000050C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000050D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000050E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000050F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100005100(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100005110(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100005120(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100005130(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100005140(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100005150(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100005160(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100005170(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100005180(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100005190(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000051A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000051B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000051C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000051D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000051E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000051F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100005200(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100005210(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100005220(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100005230(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100005240(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100005250(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100005258(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100005260(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100005268(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100005270(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100005278(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100005280(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100005288(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100005290(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100005298(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000052A0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000052A8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000052B0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000052B8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000052C0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000052C8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000052D0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000052D8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000052E0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000052E8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000052F0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000052F8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100005300(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100005308(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100005310(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100005318(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100005320(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100005328(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100005330(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100005338(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100005340(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100005348(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100005350(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

int main(int argc, const char **argv, const char **envp)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = objc_autoreleasePoolPush();
  sub_100049E88();
  objc_autoreleasePoolPop(v3);
  v4 = type metadata accessor for SettingsApp(0);
  v5 = sub_100007828(&qword_1001589C8, type metadata accessor for SettingsApp, (uint64_t)&unk_10011ABD0);
  static App.main()(v4, v5);
  return 0;
}

uint64_t sub_100005430(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_100005474(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

unint64_t sub_100005494()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159D30;
  if (!qword_100159D30)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100159D30);
  }
  return result;
}

unint64_t sub_1000054D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015BE28;
  if (!qword_10015BE28)
  {
    v1 = sub_100005430(&qword_10015BE20);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10015BE28);
  }
  return result;
}

unint64_t sub_10000551C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015BAC0;
  if (!qword_10015BAC0)
  {
    v1 = sub_100005430((uint64_t *)&unk_100156F40);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10015BAC0);
  }
  return result;
}

uint64_t sub_100005568(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

PSUIConnectedHeadphoneInfo *__cdecl sub_100005660(id a1, HPSConnectedHeadphoneInfo *a2)
{
  HPSConnectedHeadphoneInfo *v2;
  PSUIConnectedHeadphoneInfo *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  PSUIConnectedHeadphoneInfo *v8;

  v2 = a2;
  v3 = [PSUIConnectedHeadphoneInfo alloc];
  v4 = (void *)objc_claimAutoreleasedReturnValue(-[HPSConnectedHeadphoneInfo deviceID](v2, "deviceID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[HPSConnectedHeadphoneInfo deviceName](v2, "deviceName"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(-[HPSConnectedHeadphoneInfo deviceImage](v2, "deviceImage"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(-[HPSConnectedHeadphoneInfo deviceSpecifier](v2, "deviceSpecifier"));

  v8 = -[PSUIConnectedHeadphoneInfo initWithID:name:image:specifier:](v3, "initWithID:name:image:specifier:", v4, v5, v6, v7);
  return v8;
}

uint64_t sub_100005948()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];

  if (!MGGetBoolAnswer(CFSTR("cellular-data")))
    return 0;
  v0 = (void *)objc_claimAutoreleasedReturnValue(+[PSSimStatusCache sharedInstance](PSSimStatusCache, "sharedInstance"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "subscriptionContexts"));

  if (objc_msgSend(v1, "count"))
  {
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v2 = v1;
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)v14;
      v6 = kCTSIMSupportSIMStatusNotInserted;
      while (2)
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v14 != v5)
            objc_enumerationMutation(v2);
          v8 = *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)v7);
          v9 = (void *)objc_claimAutoreleasedReturnValue(+[PSSimStatusCache sharedInstance](PSSimStatusCache, "sharedInstance", (_QWORD)v13));
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "simStatus:", v8));

          LODWORD(v9) = objc_msgSend(v10, "isEqualToString:", v6);
          if (!(_DWORD)v9)
          {
            v11 = 0;
            goto LABEL_14;
          }
          v7 = (char *)v7 + 1;
        }
        while (v4 != v7);
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
        if (v4)
          continue;
        break;
      }
    }
    v11 = 1;
LABEL_14:

  }
  else
  {
    v11 = 0;
  }

  return v11;
}

BOOL sub_100005AE4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_100005AF8()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100005B3C()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100005B64(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

_QWORD *sub_100005BA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[24];
  _QWORD v30[5];

  swift_beginAccess(v0 + 24, v29, 1, 0);
  v1 = *(_QWORD *)(v0 + 24);
  v26 = v0;
  if ((v1 & 0xC000000000000001) != 0)
  {
    if (v1 < 0)
      v2 = *(_QWORD *)(v0 + 24);
    else
      v2 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = type metadata accessor for AnyCancellable(0);
    v5 = sub_100007828((unint64_t *)&qword_100156FB8, (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable, (uint64_t)&protocol conformance descriptor for AnyCancellable);
    result = Set.Iterator.init(_cocoa:)(v30, v3, v4, v5);
    v1 = v30[0];
    v7 = v30[1];
    v8 = v30[2];
    v9 = v30[3];
    v10 = v30[4];
  }
  else
  {
    v11 = -1 << *(_BYTE *)(v1 + 32);
    v7 = v1 + 56;
    v8 = ~v11;
    v12 = -v11;
    if (v12 < 64)
      v13 = ~(-1 << v12);
    else
      v13 = -1;
    v10 = v13 & *(_QWORD *)(v1 + 56);
    result = (_QWORD *)swift_bridgeObjectRetain(v1);
    v9 = 0;
  }
  v14 = (unint64_t)(v8 + 64) >> 6;
  if (v1 < 0)
    goto LABEL_13;
  while (1)
  {
    if (v10)
    {
      v15 = (v10 - 1) & v10;
      v16 = __clz(__rbit64(v10)) | (v9 << 6);
      v17 = v9;
      goto LABEL_30;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
      break;
    if (v22 >= v14)
      goto LABEL_33;
    v23 = *(_QWORD *)(v7 + 8 * v22);
    v17 = v9 + 1;
    if (!v23)
    {
      v17 = v9 + 2;
      if (v9 + 2 >= v14)
        goto LABEL_33;
      v23 = *(_QWORD *)(v7 + 8 * v17);
      if (!v23)
      {
        v17 = v9 + 3;
        if (v9 + 3 >= v14)
          goto LABEL_33;
        v23 = *(_QWORD *)(v7 + 8 * v17);
        if (!v23)
        {
          v17 = v9 + 4;
          if (v9 + 4 >= v14)
            goto LABEL_33;
          v23 = *(_QWORD *)(v7 + 8 * v17);
          if (!v23)
          {
            v24 = v9 + 5;
            while (v14 != v24)
            {
              v23 = *(_QWORD *)(v7 + 8 * v24++);
              if (v23)
              {
                v17 = v24 - 1;
                goto LABEL_29;
              }
            }
LABEL_33:
            sub_100007C50(v1);
            v25 = *(_QWORD *)(v26 + 24);
            *(_QWORD *)(v26 + 24) = &_swiftEmptySetSingleton;
            swift_bridgeObjectRelease(v25);
            sub_1000076B4(v26 + OBJC_IVAR____TtC11SettingsApp33WalletAndApplePayListItemProvider_id, type metadata accessor for PrimarySettingsListItemIdentifier);
            sub_100005474((_QWORD *)(v26 + OBJC_IVAR____TtC11SettingsApp33WalletAndApplePayListItemProvider_invalidator));
            return (_QWORD *)v26;
          }
        }
      }
    }
LABEL_29:
    v15 = (v23 - 1) & v23;
    v16 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_30:
    v21 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v16);
    swift_retain(v21);
    if (!v21)
      goto LABEL_33;
    while (1)
    {
      AnyCancellable.cancel()();
      result = (_QWORD *)swift_release(v21);
      v9 = v17;
      v10 = v15;
      if ((v1 & 0x8000000000000000) == 0)
        break;
LABEL_13:
      v18 = __CocoaSet.Iterator.next()(result);
      if (v18)
      {
        v19 = v18;
        v27 = v18;
        v20 = type metadata accessor for AnyCancellable(0);
        swift_unknownObjectRetain(v19);
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v20, 7);
        v21 = v28;
        swift_unknownObjectRelease(v19);
        v17 = v9;
        v15 = v10;
        if (v21)
          continue;
      }
      goto LABEL_33;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100005E64()
{
  uint64_t v0;

  sub_100005BA4();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

void sub_100005E88(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v3 = v2;
  v6 = type metadata accessor for PrimarySettingsListItemViewType(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PrimarySettingsListLinkModel(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100004FC8((uint64_t *)&unk_100156F00);
  __chkstk_darwin(v15);
  v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(unsigned __int8 *)(v3 + 16);
  if (*(_BYTE *)(v3 + 16))
  {
    v41 = a2;
    v36 = v6;
    if (v18 == 2)
    {
      sub_10009BD7C();
    }
    else
    {
      v24 = LocalizedStringKey.init(stringLiteral:)(0x74656C6C6157, 0xE600000000000000);
      v19 = Text.init(_:tableName:bundle:comment:)(v24);
    }
    v38 = v19;
    v39 = v20;
    v37 = v21;
    v40 = v22;
    sub_1000076F0(v3 + OBJC_IVAR____TtC11SettingsApp33WalletAndApplePayListItemProvider_id, (uint64_t)v14, type metadata accessor for PrimarySettingsListItemIdentifier);
    v25 = type metadata accessor for StaticPrimarySettingsListItemProvider(0);
    v26 = swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
    sub_100007670((uint64_t)v14, v26 + OBJC_IVAR____TtC11SettingsApp37StaticPrimarySettingsListItemProvider_id, type metadata accessor for PrimarySettingsListItemIdentifier);
    sub_1000B2604(a1, (uint64_t)v17);
    swift_setDeallocating(v26);
    sub_1000076B4(v26 + OBJC_IVAR____TtC11SettingsApp37StaticPrimarySettingsListItemProvider_id, type metadata accessor for PrimarySettingsListItemIdentifier);
    swift_deallocClassInstance(v26, *(unsigned int *)(*(_QWORD *)v26 + 48), *(unsigned __int16 *)(*(_QWORD *)v26 + 52));
    v27 = type metadata accessor for PrimarySettingsListItemModel(0);
    v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 48);
    if (v28(v17, 1, v27))
    {
      sub_100007618(v38, v39, v37 & 1);
      swift_bridgeObjectRelease(v40);
    }
    else
    {
      sub_1000076F0((uint64_t)&v17[*(int *)(v27 + 20)], (uint64_t)v8, type metadata accessor for PrimarySettingsListItemViewType);
      v29 = v36;
      if (swift_getEnumCaseMultiPayload(v8, v36) == 6)
      {
        sub_100007670((uint64_t)v8, (uint64_t)v11, type metadata accessor for PrimarySettingsListLinkModel);
        v30 = &v11[*(int *)(v9 + 24)];
        sub_100007618(*(_QWORD *)v30, *((_QWORD *)v30 + 1), v30[16]);
        swift_bridgeObjectRelease(*((_QWORD *)v30 + 3));
        v31 = v39;
        *(_QWORD *)v30 = v38;
        *((_QWORD *)v30 + 1) = v31;
        v30[16] = v37 & 1;
        *((_QWORD *)v30 + 3) = v40;
        if (!v28(v17, 1, v27))
        {
          v32 = (uint64_t)&v17[*(int *)(v27 + 20)];
          sub_1000076B4(v32, type metadata accessor for PrimarySettingsListItemViewType);
          sub_1000076F0((uint64_t)v11, v32, type metadata accessor for PrimarySettingsListLinkModel);
          swift_storeEnumTagMultiPayload(v32, v29, 6);
        }
        v33 = type metadata accessor for PrimarySettingsListLinkModel;
        v34 = (uint64_t)v11;
      }
      else
      {
        sub_100007618(v38, v39, v37 & 1);
        swift_bridgeObjectRelease(v40);
        v33 = type metadata accessor for PrimarySettingsListItemViewType;
        v34 = (uint64_t)v8;
      }
      sub_1000076B4(v34, v33);
    }
    sub_100007628((uint64_t)v17, v41);
    sub_100006260(v3);
  }
  else
  {
    v23 = type metadata accessor for PrimarySettingsListItemModel(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(a2, 1, 1, v23);
    sub_100006260(v3);
  }
}

void sub_100006260(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  unint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  id v37;
  uint64_t v38;
  id v39[3];
  _BYTE v40[24];

  v2 = sub_100004FC8((uint64_t *)&unk_10015C970);
  __chkstk_darwin(v2);
  v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for NSNotificationCenter.Publisher(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100004FC8((uint64_t *)&unk_100156F10);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = objc_msgSend((id)objc_opt_self(PSLaunchTracker), "sharedInstance");
  v14 = objc_msgSend(v13, "launchHasCompleted");

  if (v14)
  {
    v38 = a1 + 24;
    swift_beginAccess(a1 + 24, v40, 0, 0);
    v15 = a1;
    v16 = *(_QWORD *)(a1 + 24);
    if ((v16 & 0xC000000000000001) != 0)
    {
      if (v16 < 0)
        v17 = *(_QWORD *)(a1 + 24);
      else
        v17 = v16 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v16);
      v18 = __CocoaSet.count.getter(v17);
      swift_bridgeObjectRelease(v16);
      if (!v18)
        goto LABEL_7;
    }
    else if (!*(_QWORD *)(v16 + 16))
    {
LABEL_7:
      v37 = (id)objc_opt_self(NSNotificationCenter);
      v19 = objc_msgSend(v37, "defaultCenter");
      NSNotificationCenter.publisher(for:object:)(NSCurrentLocaleDidChangeNotification, 0);

      v20 = sub_100007BBC(0, (unint64_t *)&qword_100159D30, OS_dispatch_queue_ptr);
      v39[0] = (id)static OS_dispatch_queue.main.getter();
      v21 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
      v35 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56);
      v36 = v21;
      v35(v4, 1, 1, v21);
      v22 = sub_100007828((unint64_t *)&unk_100156F20, (uint64_t (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Publisher, (uint64_t)&protocol conformance descriptor for NSNotificationCenter.Publisher);
      v34 = v22;
      v33 = sub_100007734();
      Publisher.receive<A>(on:options:)(v39, v4, v5, v20, v22, v33);
      sub_10000778C((uint64_t)v4);

      v32 = *(void (**)(char *, uint64_t))(v6 + 8);
      v32(v8, v5);
      v23 = swift_allocObject(&unk_100148500, 24, 7);
      swift_weakInit(v23 + 16, v15);
      v31 = sub_100007868((unint64_t *)&qword_100156F30, (uint64_t *)&unk_100156F10, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
      v24 = Publisher<>.sink(receiveValue:)(sub_1000077F0, v23, v9, v31);
      swift_release(v23);
      v25 = *(void (**)(char *, uint64_t))(v10 + 8);
      v25(v12, v9);
      v26 = v15;
      v27 = v38;
      swift_beginAccess(v38, v39, 33, 0);
      AnyCancellable.store(in:)(v27);
      swift_endAccess(v39);
      swift_release(v24);
      v28 = objc_msgSend(v37, "defaultCenter");
      NSNotificationCenter.publisher(for:object:)(UIApplicationWillEnterForegroundNotification, 0);

      v39[0] = (id)static OS_dispatch_queue.main.getter();
      v35(v4, 1, 1, v36);
      Publisher.receive<A>(on:options:)(v39, v4, v5, v20, v34, v33);
      sub_10000778C((uint64_t)v4);

      v32(v8, v5);
      v29 = swift_allocObject(&unk_100148500, 24, 7);
      swift_weakInit(v29 + 16, v26);
      v30 = Publisher<>.sink(receiveValue:)(sub_1000077F0, v29, v9, v31);
      swift_release(v29);
      v25(v12, v9);
      swift_beginAccess(v27, v39, 33, 0);
      AnyCancellable.store(in:)(v27);
      swift_endAccess(v39);
      swift_release(v30);
      sub_1000066C8();
    }
  }
}

uint64_t sub_1000066C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_signpost_type_t v18;
  uint8_t *v19;
  uint8_t *v20;
  os_signpost_id_t v21;
  uint8_t *v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  _QWORD aBlock[5];
  uint64_t v40;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v36 = *(_QWORD *)(v2 - 8);
  v37 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v34 = *(_QWORD *)(v5 - 8);
  v35 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OSSignpostID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v33 - v13;
  if (qword_100156CD8 != -1)
    swift_once(&qword_100156CD8, sub_10008BEEC);
  v15 = type metadata accessor for OSSignposter(0);
  sub_100007808(v15, (uint64_t)qword_10015D340);
  v16 = static OSSignpostID.exclusive.getter();
  v17 = OSSignposter.logHandle.getter(v16);
  v18 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    v33 = v7;
    v20 = v19;
    *(_WORD *)v19 = 0;
    v21 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, v18, v21, "WalletAndApplePayListItemProvider.resolveApplePayState began", "", v20, 2u);
    v22 = v20;
    v1 = v0;
    v7 = v33;
    swift_slowDealloc(v22, -1, -1);

    v23 = *(void (**)(char *, uint64_t))(v9 + 8);
    v23(v14, v8);
    v23(v12, v8);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  }
  if (qword_100156D60 != -1)
    swift_once(&qword_100156D60, sub_1000D34BC);
  v24 = swift_allocObject(&unk_100148500, 24, 7);
  swift_weakInit(v24 + 16, v1);
  aBlock[4] = sub_100007820;
  v40 = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100005350;
  aBlock[3] = &unk_100148518;
  v25 = _Block_copy(aBlock);
  v26 = swift_retain(v24);
  static DispatchQoS.unspecified.getter(v26);
  v38 = &_swiftEmptyArrayStorage;
  v27 = sub_100007828((unint64_t *)&qword_10015BAB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v28 = sub_100004FC8((uint64_t *)&unk_100156F40);
  v29 = sub_100007868((unint64_t *)&qword_10015BAC0, (uint64_t *)&unk_100156F40, (uint64_t)&protocol conformance descriptor for [A]);
  v30 = v37;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v38, v28, v29, v37, v27);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v4, v25);
  _Block_release(v25);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v4, v30);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v7, v35);
  v31 = v40;
  swift_release(v24);
  return swift_release(v31);
}

void sub_100006A70(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[5];
  uint64_t v15;

  if (objc_msgSend((id)objc_opt_self(PKPassLibrary), "isPassLibraryAvailable"))
  {
    v2 = objc_msgSend(objc_allocWithZone((Class)PKPassLibrary), "init");
    v3 = objc_msgSend(v2, "passesOfType:", 1);

    v4 = sub_100007BBC(0, &qword_100156F50, PKPass_ptr);
    v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

    if ((unint64_t)v5 >> 62)
    {
      if (v5 < 0)
        v13 = v5;
      else
        v13 = v5 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v5);
      v6 = _CocoaArrayWrapper.endIndex.getter(v13);
      swift_bridgeObjectRelease(v5);
    }
    else
    {
      v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease(v5);
    v7 = v6 != 0;
  }
  else
  {
    v7 = 0;
  }
  v8 = (void *)objc_opt_self(PKPaymentRegistrationUtilities);
  v9 = objc_msgSend((id)objc_opt_self(PKPaymentWebService), "sharedService");
  v10 = swift_allocObject(&unk_100148550, 32, 7);
  *(_BYTE *)(v10 + 16) = v7;
  *(_QWORD *)(v10 + 24) = a1;
  v14[4] = sub_100007BB0;
  v15 = v10;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256;
  v14[2] = sub_1000070B4;
  v14[3] = &unk_100148568;
  v11 = _Block_copy(v14);
  v12 = v15;
  swift_retain(a1);
  swift_release(v12);
  objc_msgSend(v8, "shouldShowWalletInSettingsWithApplePaySupportInformation:completion:", v9, v11);
  _Block_release(v11);

}

uint64_t sub_100006C44(char a1, char a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  _QWORD aBlock[5];
  uint64_t v27;

  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v25 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for DispatchQoS(0);
  v12 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007BBC(0, (unint64_t *)&qword_100159D30, OS_dispatch_queue_ptr);
  v15 = (void *)static OS_dispatch_queue.main.getter();
  v16 = swift_allocObject(&unk_1001485A0, 32, 7);
  *(_BYTE *)(v16 + 16) = a1;
  *(_BYTE *)(v16 + 17) = a4;
  *(_BYTE *)(v16 + 18) = a2;
  *(_QWORD *)(v16 + 24) = a5;
  aBlock[4] = sub_100007C18;
  v27 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100005350;
  aBlock[3] = &unk_1001485B8;
  v17 = _Block_copy(aBlock);
  v18 = v27;
  swift_retain(a5);
  v19 = swift_release(v18);
  static DispatchQoS.unspecified.getter(v19);
  aBlock[0] = &_swiftEmptyArrayStorage;
  v20 = sub_100007828((unint64_t *)&qword_10015BAB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v21 = sub_100004FC8((uint64_t *)&unk_100156F40);
  v22 = sub_100007868((unint64_t *)&qword_10015BAC0, (uint64_t *)&unk_100156F40, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v21, v22, v9, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v11, v17);
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v25 + 8))(v11, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v24);
}

uint64_t sub_100006E70(unsigned __int8 a1, unsigned __int8 a2, char a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char v16;
  unsigned __int8 v17;
  uint64_t Strong;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_signpost_type_t v23;
  uint8_t *v24;
  os_signpost_id_t v25;
  void (*v26)(char *, uint64_t);
  _QWORD v28[2];
  char v29;
  _BYTE v30[24];

  v8 = type metadata accessor for OSSignpostID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = ((uint64_t (*)(void))__chkstk_darwin)();
  v12 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)v28 - v13;
  v15 = a4 + 16;
  if ((a3 & 1) != 0)
    v16 = 2;
  else
    v16 = 1;
  if (((a1 | a2) & 1) != 0)
    v17 = v16;
  else
    v17 = 0;
  swift_beginAccess(v15, v30, 0, 0);
  Strong = swift_weakLoadStrong(v15);
  if (Strong)
  {
    v19 = Strong;
    if (*(unsigned __int8 *)(Strong + 16) != v17)
    {
      sub_100007C2C((_QWORD *)(Strong + OBJC_IVAR____TtC11SettingsApp33WalletAndApplePayListItemProvider_invalidator), *(_QWORD *)(Strong + OBJC_IVAR____TtC11SettingsApp33WalletAndApplePayListItemProvider_invalidator + 24));
      v28[0] = "Wallet & Apple Pay";
      v28[1] = 18;
      v29 = 2;
      PassthroughSubject.send(_:)(v28);
    }
    *(_BYTE *)(v19 + 16) = v17;
    swift_release(v19);
  }
  if (qword_100156CD8 != -1)
    swift_once(&qword_100156CD8, sub_10008BEEC);
  v20 = type metadata accessor for OSSignposter(0);
  sub_100007808(v20, (uint64_t)qword_10015D340);
  v21 = static OSSignpostID.exclusive.getter();
  v22 = OSSignposter.logHandle.getter(v21);
  v23 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
    v24 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v24 = 0;
    v25 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v22, v23, v25, "WalletAndApplePayListItemProvider.resolveApplePayState completed", "", v24, 2u);
    swift_slowDealloc(v24, -1, -1);

    v26 = *(void (**)(char *, uint64_t))(v9 + 8);
    v26(v14, v8);
    return ((uint64_t (*)(char *, uint64_t))v26)(v12, v8);
  }
  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  }
}

void sub_1000070B4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, void *);
  id v9;

  v8 = *(void (**)(uint64_t, uint64_t, void *))(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  swift_retain(v7);
  v9 = a4;
  v8(a2, a3, a4);
  swift_release(v7);

}

uint64_t sub_100007124@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_1000076F0(*v1 + OBJC_IVAR____TtC11SettingsApp33WalletAndApplePayListItemProvider_id, a1, type metadata accessor for PrimarySettingsListItemIdentifier);
}

void sub_100007154(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100005E88(a1, a2);
}

uint64_t variable initialization expression of RestrictionsManager.isInEDUMode()
{
  return PSIsInEDUMode();
}

uint64_t variable initialization expression of RestrictionsManager._blockedAppBundleIDs()
{
  return 0;
}

uint64_t sub_100007194()
{
  return type metadata accessor for WalletAndApplePayListItemProvider(0);
}

uint64_t type metadata accessor for WalletAndApplePayListItemProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_100156E48;
  if (!qword_100156E48)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for WalletAndApplePayListItemProvider);
  return result;
}

uint64_t sub_1000071D8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_100113D38;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for PrimarySettingsListItemIdentifier(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = &unk_100113D50;
    result = swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

void type metadata accessor for NEVPNConnectivityState(uint64_t a1)
{
  sub_100007D18(a1, &qword_100156EE8, (uint64_t)&unk_100148410);
}

void type metadata accessor for NEVPNSettingsVisibilityStyle(uint64_t a1)
{
  sub_100007D18(a1, &qword_100156EF0, (uint64_t)&unk_100148430);
}

_BYTE *initializeBufferWithCopyOfBuffer for WalletAndApplePayListItemProvider.VisibilityStyle(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for WalletAndApplePayListItemProvider.VisibilityStyle(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for WalletAndApplePayListItemProvider.VisibilityStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100007374 + 4 * byte_100113CE5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000073A8 + 4 * byte_100113CE0[v4]))();
}

uint64_t sub_1000073A8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000073B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000073B8);
  return result;
}

uint64_t sub_1000073C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000073CCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000073D0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000073D8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000073E4(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1000073F0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for WalletAndApplePayListItemProvider.VisibilityStyle()
{
  return &type metadata for WalletAndApplePayListItemProvider.VisibilityStyle;
}

unint64_t sub_10000740C()
{
  unint64_t result;

  result = qword_100156EF8;
  if (!qword_100156EF8)
  {
    result = swift_getWitnessTable(&unk_100113E00, &type metadata for WalletAndApplePayListItemProvider.VisibilityStyle);
    atomic_store(result, (unint64_t *)&qword_100156EF8);
  }
  return result;
}

uint64_t sub_100007450(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v4 = result;
    sub_1000066C8();
    return swift_release(v4);
  }
  return result;
}

uint64_t sub_1000074A4(uint64_t a1, uint64_t a2)
{
  return sub_100007A3C(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_1000074C4(uint64_t a1, id *a2)
{
  uint64_t result;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  v5 = v8;
  if (v8)
  {
    v6 = String._bridgeToObjectiveC()();
    result = swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_100007538(uint64_t a1, id *a2)
{
  char v4;
  uint64_t v5;
  NSString v6;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_1000075B4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  NSString v4;
  uint64_t result;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = v2;
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a1 = v4;
  return result;
}

BOOL sub_1000075F4(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

_QWORD *sub_100007608@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t sub_100007618(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_release(a1);
  else
    return swift_bridgeObjectRelease(a2);
}

uint64_t sub_100007628(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004FC8((uint64_t *)&unk_100156F00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100007670(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000076B4(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000076F0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_100007734()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015C990;
  if (!qword_10015C990)
  {
    v1 = sub_100007BBC(255, (unint64_t *)&qword_100159D30, OS_dispatch_queue_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for OS_dispatch_queue, v1);
    atomic_store(result, (unint64_t *)&qword_10015C990);
  }
  return result;
}

uint64_t sub_10000778C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004FC8((uint64_t *)&unk_10015C970);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000077CC()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000077F0(uint64_t a1)
{
  uint64_t v1;

  return sub_100007450(a1, v1);
}

uint64_t sub_100007808(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

void sub_100007820()
{
  uint64_t v0;

  sub_100006A70(v0);
}

uint64_t sub_100007828(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100007868(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100005430(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

void sub_1000078AC(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_1000078BC@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000078E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100007828(&qword_100157018, (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType, (uint64_t)&unk_1001141C0);
  v3 = sub_100007828((unint64_t *)&unk_100157020, (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType, (uint64_t)&unk_100114160);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100007968@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  NSString v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_1000079AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100007828((unint64_t *)&qword_100159E50, (uint64_t (*)(uint64_t))type metadata accessor for LaunchOptionsKey, (uint64_t)&unk_100114070);
  v3 = sub_100007828(&qword_100156FF0, (uint64_t (*)(uint64_t))type metadata accessor for LaunchOptionsKey, (uint64_t)&unk_100113FC4);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100007A30(uint64_t a1, uint64_t a2)
{
  return sub_100007A3C(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_100007A3C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  v7 = v6;
  v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_100007A78(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100007AB8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

uint64_t sub_100007B28(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_100007BB0(char a1, char a2, uint64_t a3)
{
  uint64_t v3;

  return sub_100006C44(a1, a2, a3, *(_BYTE *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t sub_100007BBC(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_100007BF4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100007C18()
{
  uint64_t v0;

  return sub_100006E70(*(_BYTE *)(v0 + 16), *(_BYTE *)(v0 + 17), *(_BYTE *)(v0 + 18), *(_QWORD *)(v0 + 24));
}

_QWORD *sub_100007C2C(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_100007C50(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

void type metadata accessor for LaunchOptionsKey(uint64_t a1)
{
  sub_100007D18(a1, &qword_100156FC0, (uint64_t)&unk_1001485F0);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_100007D18(a1, &qword_100156FC8, (uint64_t)&unk_100148618);
}

uint64_t sub_100007C80()
{
  return sub_100007828(&qword_100156FD0, (uint64_t (*)(uint64_t))type metadata accessor for LaunchOptionsKey, (uint64_t)&unk_100113F88);
}

uint64_t sub_100007CAC()
{
  return sub_100007828(&qword_100156FD8, (uint64_t (*)(uint64_t))type metadata accessor for LaunchOptionsKey, (uint64_t)&unk_100113F5C);
}

uint64_t sub_100007CD8()
{
  return sub_100007828((unint64_t *)&unk_100156FE0, (uint64_t (*)(uint64_t))type metadata accessor for LaunchOptionsKey, (uint64_t)&unk_100113FF8);
}

void type metadata accessor for FileProtectionType(uint64_t a1)
{
  sub_100007D18(a1, &qword_100156FF8, (uint64_t)&unk_100148640);
}

void sub_100007D18(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_100007D5C()
{
  return sub_100007828(&qword_100157000, (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType, (uint64_t)&unk_100114124);
}

uint64_t sub_100007D88()
{
  return sub_100007828(&qword_100157008, (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType, (uint64_t)&unk_1001140F8);
}

uint64_t sub_100007DB4()
{
  return sub_100007828(&qword_100157010, (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType, (uint64_t)&unk_100114194);
}

ValueMetadata *type metadata accessor for ESIMProvisioningURLRoute()
{
  return &type metadata for ESIMProvisioningURLRoute;
}

void sub_100007E14(uint64_t a1@<X0>, unint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  void (*v59)(char *, char *, uint64_t);
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  int *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86[2];

  v81 = a1;
  v3 = type metadata accessor for URLQueryItem(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v83 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v77 = (char *)&v70 - v8;
  v9 = __chkstk_darwin(v7);
  v76 = (char *)&v70 - v10;
  v11 = __chkstk_darwin(v9);
  v75 = (char *)&v70 - v12;
  __chkstk_darwin(v11);
  v14 = (char *)&v70 - v13;
  v15 = (_QWORD *)type metadata accessor for URL(0);
  v16 = *(v15 - 1);
  __chkstk_darwin(v15);
  v18 = (unint64_t)&v70 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100004FC8(&qword_1001570F0);
  __chkstk_darwin(v19);
  v21 = (char *)&v70 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for URLComponents(0);
  v79 = *(_QWORD *)(v22 - 8);
  v80 = (_QWORD *)v22;
  __chkstk_darwin(v22);
  v78 = (char *)&v70 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100156CB0 != -1)
LABEL_37:
    swift_once(&qword_100156CB0, sub_10008BE28);
  v24 = type metadata accessor for Logger(0);
  v25 = sub_100007808(v24, (uint64_t)qword_10015D2C8);
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.default.getter();
  v28 = os_log_type_enabled(v26, v27);
  v82 = v3;
  v71 = v16;
  v72 = v15;
  v74 = v18;
  if (v28)
  {
    v29 = swift_slowAlloc(22, -1);
    v30 = swift_slowAlloc(64, -1);
    v73 = a2;
    v31 = v30;
    v86[0] = v30;
    *(_DWORD *)v29 = 136315394;
    v84 = sub_1000DA1F0(0xD00000000000001DLL, 0x800000010011FCF0, v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, &v85, v29 + 4, v29 + 12);
    *(_WORD *)(v29 + 12) = 2080;
    v84 = sub_1000DA1F0(0xD000000000000026, 0x800000010011FD10, v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, &v85, v29 + 14, v29 + 22);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Start (%s.%s)…", (uint8_t *)v29, 0x16u);
    swift_arrayDestroy(v31, 2, (char *)&type metadata for Any + 8);
    a2 = v73;
    swift_slowDealloc(v31, -1, -1);
    v32 = v29;
    v3 = v82;
    swift_slowDealloc(v32, -1, -1);
  }

  URLComponents.init(url:resolvingAgainstBaseURL:)(v81, 1);
  v33 = v79;
  v15 = v80;
  if ((*(unsigned int (**)(char *, uint64_t, _QWORD *))(v79 + 48))(v21, 1, v80) == 1)
  {
    sub_100008678((uint64_t)v21);
LABEL_8:
    v42 = sub_100004FC8(&qword_1001570F8);
    (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(a2, 1, 1, v42);
    goto LABEL_9;
  }
  v34 = v78;
  v35 = (*(uint64_t (**)(char *, char *, _QWORD *))(v33 + 32))(v78, v21, v15);
  v36 = v33;
  v37 = URLComponents.path.getter(v35);
  v16 = v38;
  v86[0] = v37;
  v86[1] = v38;
  v84 = 0xD000000000000019;
  v85 = 0x800000010011FCB0;
  v39 = sub_100008A5C();
  v40 = StringProtocol.caseInsensitiveCompare<A>(_:)(&v84, &type metadata for String, &type metadata for String, v39, v39);
  v41 = swift_bridgeObjectRelease(v16);
  if (v40)
  {
    (*(void (**)(char *, _QWORD *))(v36 + 8))(v34, v15);
    goto LABEL_8;
  }
  v43 = URLComponents.percentEncodedQueryItems.getter(v41);
  if (!v43)
  {
    (*(void (**)(char *, _QWORD *))(v79 + 8))(v34, v80);
    goto LABEL_8;
  }
  v21 = (char *)v43;
  v44 = v74;
  sub_100019DF4(v74);
  v45 = (char *)&_swiftEmptyArrayStorage;
  v86[0] = (uint64_t)&_swiftEmptyArrayStorage;
  v81 = *((_QWORD *)v21 + 2);
  if (v81)
  {
    v73 = a2;
    v18 = 0;
    while (1)
    {
      if (v18 >= *((_QWORD *)v21 + 2))
      {
        __break(1u);
        goto LABEL_37;
      }
      a2 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
      v46 = *(_QWORD *)(v4 + 72);
      v47 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 16))(v14, &v21[a2 + v46 * v18], v3);
      v48 = URLQueryItem.name.getter(v47);
      v50 = v49;
      if (v48 == 0x6174616464726163 && v49 == 0xE800000000000000)
        break;
      v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v48, v49, 0x6174616464726163, 0xE800000000000000, 0);
      swift_bridgeObjectRelease(v50);
      if ((v16 & 1) != 0)
        goto LABEL_20;
      (*(void (**)(char *, uint64_t))(v4 + 8))(v14, v3);
LABEL_14:
      if (v81 == ++v18)
      {
        v45 = (char *)v86[0];
        a2 = v73;
        v44 = v74;
        goto LABEL_27;
      }
    }
    swift_bridgeObjectRelease(0xE800000000000000);
LABEL_20:
    v15 = *(_QWORD **)(v4 + 32);
    ((void (*)(char *, char *, uint64_t))v15)(v83, v14, v3);
    v51 = v86[0];
    if ((swift_isUniquelyReferenced_nonNull_native(v86[0]) & 1) == 0)
    {
      sub_10000F274(0, *(_QWORD *)(v51 + 16) + 1, 1);
      v51 = v86[0];
    }
    v53 = *(_QWORD *)(v51 + 16);
    v52 = *(_QWORD *)(v51 + 24);
    v16 = v53 + 1;
    if (v53 >= v52 >> 1)
    {
      sub_10000F274(v52 > 1, v53 + 1, 1);
      v51 = v86[0];
    }
    *(_QWORD *)(v51 + 16) = v16;
    v54 = v51 + a2 + v53 * v46;
    v3 = v82;
    ((void (*)(unint64_t, char *, uint64_t))v15)(v54, v83, v82);
    v86[0] = v51;
    goto LABEL_14;
  }
LABEL_27:
  swift_bridgeObjectRelease(v21);
  URLQueryItem.init(name:value:)(1953460082, 0xE400000000000000, 0xD000000000000017, 0x800000010011F150);
  if ((swift_isUniquelyReferenced_nonNull_native(v45) & 1) == 0)
    v45 = (char *)sub_10005270C(0, *((_QWORD *)v45 + 2) + 1, 1, (unint64_t)v45);
  v56 = *((_QWORD *)v45 + 2);
  v55 = *((_QWORD *)v45 + 3);
  if (v56 >= v55 >> 1)
    v45 = (char *)sub_10005270C(v55 > 1, v56 + 1, 1, (unint64_t)v45);
  *((_QWORD *)v45 + 2) = v56 + 1;
  v57 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v58 = *(_QWORD *)(v4 + 72);
  v59 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
  v59(&v45[v57 + v58 * v56], v75, v3);
  URLQueryItem.init(name:value:)(1752457584, 0xE400000000000000, 0x52414C554C4C4543, 0xE800000000000000);
  v61 = *((_QWORD *)v45 + 2);
  v60 = *((_QWORD *)v45 + 3);
  if (v61 >= v60 >> 1)
    v45 = (char *)sub_10005270C(v60 > 1, v61 + 1, 1, (unint64_t)v45);
  *((_QWORD *)v45 + 2) = v61 + 1;
  v59(&v45[v57 + v61 * v58], v76, v3);
  URLQueryItem.init(name:value:)(1701869940, 0xE400000000000000, 0xD000000000000018, 0x800000010011FCD0);
  v63 = *((_QWORD *)v45 + 2);
  v62 = *((_QWORD *)v45 + 3);
  if (v63 >= v62 >> 1)
    v45 = (char *)sub_10005270C(v62 > 1, v63 + 1, 1, (unint64_t)v45);
  *((_QWORD *)v45 + 2) = v63 + 1;
  v59(&v45[v57 + v63 * v58], v77, v3);
  (*(void (**)(char *, _QWORD *))(v79 + 8))(v78, v80);
  v64 = (int *)type metadata accessor for SettingsURLDestination(0);
  v65 = a2 + v64[5];
  v66 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  swift_storeEnumTagMultiPayload(v65, v66, 12);
  v67 = type metadata accessor for SettingsURLDestination.Action(0);
  swift_storeEnumTagMultiPayload(v65, v67, 1);
  v68 = (_QWORD *)(a2 + v64[7]);
  (*(void (**)(unint64_t, uint64_t, _QWORD *))(v71 + 32))(a2, v44, v72);
  *(_QWORD *)(a2 + v64[6]) = v45;
  *v68 = 0;
  v68[1] = 0;
  v69 = sub_100004FC8(&qword_1001570F8);
  (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 56))(a2, 0, 1, v69);
LABEL_9:
  sub_100008890();
}

uint64_t sub_100008678(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004FC8(&qword_1001570F0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000086B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  char v15;
  uint64_t v17;

  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin();
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.scheme.getter(v4);
  if (!v7)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, a1, v2);
    goto LABEL_11;
  }
  v8 = v7;
  v9 = String.lowercased()();
  swift_bridgeObjectRelease(v8);
  if (v9._countAndFlagsBits == 0x7370747468 && v9._object == (void *)0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, a1, v2);
    goto LABEL_7;
  }
  v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v9._countAndFlagsBits, v9._object, 0x7370747468, 0xE500000000000000, 0);
  swift_bridgeObjectRelease(v9._object);
  v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, a1, v2);
  if ((v11 & 1) == 0)
  {
LABEL_11:
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    v15 = 0;
    return v15 & 1;
  }
LABEL_7:
  URL.host.getter(v10);
  if (!v12)
    goto LABEL_11;
  v13 = v12;
  v14 = String.lowercased()();
  swift_bridgeObjectRelease(v13);
  if (v14._countAndFlagsBits == 0xD000000000000013 && v14._object == (void *)0x800000010011FD40)
    v15 = 1;
  else
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v14._countAndFlagsBits, v14._object, 0xD000000000000013, 0x800000010011FD40, 0);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  swift_bridgeObjectRelease(v14._object);
  return v15 & 1;
}

void sub_100008890()
{
  uint64_t v0;
  uint64_t v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *oslog;
  uint64_t v6;
  uint64_t v7;

  if (qword_100156CB0 != -1)
    swift_once(&qword_100156CB0, sub_10008BE28);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_100007808(v0, (uint64_t)qword_10015D2C8);
  oslog = Logger.logObject.getter(v1);
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v2))
  {
    v3 = swift_slowAlloc(22, -1);
    v4 = swift_slowAlloc(64, -1);
    v7 = v4;
    *(_DWORD *)v3 = 136315394;
    v6 = sub_1000DA1F0(0xD00000000000001DLL, 0x800000010011FCF0, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v6, &v7, v3 + 4, v3 + 12);
    *(_WORD *)(v3 + 12) = 2080;
    v6 = sub_1000DA1F0(0xD000000000000026, 0x800000010011FD10, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v6, &v7, v3 + 14, v3 + 22);
    _os_log_impl((void *)&_mh_execute_header, oslog, v2, "…Complete (%s.%s)", (uint8_t *)v3, 0x16u);
    swift_arrayDestroy(v4, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v4, -1, -1);
    swift_slowDealloc(v3, -1, -1);

  }
  else
  {

  }
}

unint64_t sub_100008A5C()
{
  unint64_t result;

  result = qword_10015A960;
  if (!qword_10015A960)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_10015A960);
  }
  return result;
}

uint64_t *sub_100008AA0(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *__dst;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v6 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain(v4);
  }
  else
  {
    v6 = a1;
    v7 = a2[2];
    a1[1] = a2[1];
    a1[2] = v7;
    v9 = a2[3];
    v8 = a2[4];
    a1[3] = v9;
    a1[4] = v8;
    v11 = a2[5];
    v10 = a2[6];
    a1[5] = v11;
    a1[6] = v10;
    v12 = a2[7];
    v13 = a3[11];
    __dst = (char *)a1 + v13;
    v33 = (char *)a2 + v13;
    v34 = a2[8];
    a1[7] = v12;
    a1[8] = v34;
    v14 = type metadata accessor for FLFollowUpGroupSectionElement(0);
    v35 = *(_QWORD *)(v14 - 8);
    v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48);
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v34);
    if (v15(v33, 1, v14))
    {
      v16 = sub_100004FC8(&qword_100157100);
      memcpy(__dst, v33, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      v17 = v35;
    }
    else
    {
      v17 = v35;
      (*(void (**)(char *, char *, uint64_t))(v35 + 16))(__dst, v33, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(__dst, 0, 1, v14);
    }
    v18 = a3[12];
    v19 = a3[13];
    v20 = *(uint64_t *)((char *)a2 + v18);
    *(uint64_t *)((char *)v6 + v18) = v20;
    v21 = (char *)v6 + v19;
    v22 = (char *)a2 + v19;
    swift_bridgeObjectRetain(v20);
    if (v15(v22, 1, v14))
    {
      v23 = sub_100004FC8(&qword_100157100);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v21, v22, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v21, 0, 1, v14);
    }
    v24 = a3[14];
    v25 = a3[15];
    v26 = *(uint64_t *)((char *)a2 + v24);
    *(uint64_t *)((char *)v6 + v24) = v26;
    v27 = (char *)v6 + v25;
    v28 = (char *)a2 + v25;
    swift_bridgeObjectRetain(v26);
    if (v15(v28, 1, v14))
    {
      v29 = sub_100004FC8(&qword_100157100);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v27, v28, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v27, 0, 1, v14);
    }
    v30 = a3[16];
    v31 = *(uint64_t *)((char *)a2 + v30);
    *(uint64_t *)((char *)v6 + v30) = v31;
    swift_bridgeObjectRetain(v31);
  }
  return v6;
}

uint64_t sub_100008D1C(_QWORD *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(char *, uint64_t, uint64_t);
  char *v8;
  char *v9;

  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[8]);
  v4 = (char *)a1 + a2[11];
  v5 = type metadata accessor for FLFollowUpGroupSectionElement(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[12]));
  v8 = (char *)a1 + a2[13];
  if (!v7(v8, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[14]));
  v9 = (char *)a1 + a2[15];
  if (!v7(v9, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  return swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[16]));
}

uint64_t *sub_100008E3C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *__dst;

  v6 = *a2;
  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v7 = a2[2];
  v8 = a2[3];
  a1[2] = v7;
  a1[3] = v8;
  v9 = a2[5];
  a1[4] = a2[4];
  a1[5] = v9;
  v11 = a2[6];
  v10 = a2[7];
  a1[6] = v11;
  a1[7] = v10;
  v12 = a3[11];
  __dst = (char *)a1 + v12;
  v32 = (char *)a2 + v12;
  v33 = a2[8];
  a1[8] = v33;
  v13 = type metadata accessor for FLFollowUpGroupSectionElement(0);
  v34 = *(_QWORD *)(v13 - 8);
  v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v33);
  if (v14(v32, 1, v13))
  {
    v15 = sub_100004FC8(&qword_100157100);
    memcpy(__dst, v32, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    v16 = v34;
  }
  else
  {
    v16 = v34;
    (*(void (**)(char *, char *, uint64_t))(v34 + 16))(__dst, v32, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(__dst, 0, 1, v13);
  }
  v17 = a3[12];
  v18 = a3[13];
  v19 = *(uint64_t *)((char *)a2 + v17);
  *(uint64_t *)((char *)a1 + v17) = v19;
  v20 = (char *)a1 + v18;
  v21 = (char *)a2 + v18;
  swift_bridgeObjectRetain(v19);
  if (v14(v21, 1, v13))
  {
    v22 = sub_100004FC8(&qword_100157100);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v20, v21, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v20, 0, 1, v13);
  }
  v23 = a3[14];
  v24 = a3[15];
  v25 = *(uint64_t *)((char *)a2 + v23);
  *(uint64_t *)((char *)a1 + v23) = v25;
  v26 = (char *)a1 + v24;
  v27 = (char *)a2 + v24;
  swift_bridgeObjectRetain(v25);
  if (v14(v27, 1, v13))
  {
    v28 = sub_100004FC8(&qword_100157100);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v26, v27, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v26, 0, 1, v13);
  }
  v29 = a3[16];
  v30 = *(uint64_t *)((char *)a2 + v29);
  *(uint64_t *)((char *)a1 + v29) = v30;
  swift_bridgeObjectRetain(v30);
  return a1;
}

uint64_t *sub_100009090(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(char *, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[1] = a2[1];
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a2[3];
  v11 = a1[3];
  a1[3] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  a1[4] = a2[4];
  v12 = a2[5];
  v13 = a1[5];
  a1[5] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = a2[6];
  v15 = a1[6];
  a1[6] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v16 = a2[7];
  v17 = a1[7];
  a1[7] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  v18 = a2[8];
  v19 = a1[8];
  a1[8] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  v20 = a3[11];
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  v23 = type metadata accessor for FLFollowUpGroupSectionElement(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48);
  v26 = v25(v21, 1, v23);
  v27 = v25(v22, 1, v23);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v24 + 8))(v21, v23);
LABEL_6:
    v28 = sub_100004FC8(&qword_100157100);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v24 + 24))(v21, v22, v23);
LABEL_7:
  v29 = a3[12];
  v30 = *(uint64_t *)((char *)a2 + v29);
  v31 = *(uint64_t *)((char *)a1 + v29);
  *(uint64_t *)((char *)a1 + v29) = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  v32 = a3[13];
  v33 = (char *)a1 + v32;
  v34 = (char *)a2 + v32;
  v35 = v25((char *)a1 + v32, 1, v23);
  v36 = v25(v34, 1, v23);
  if (v35)
  {
    if (!v36)
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v33, v34, v23);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v33, 0, 1, v23);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v36)
  {
    (*(void (**)(char *, uint64_t))(v24 + 8))(v33, v23);
LABEL_12:
    v37 = sub_100004FC8(&qword_100157100);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v24 + 24))(v33, v34, v23);
LABEL_13:
  v38 = a3[14];
  v39 = *(uint64_t *)((char *)a2 + v38);
  v40 = *(uint64_t *)((char *)a1 + v38);
  *(uint64_t *)((char *)a1 + v38) = v39;
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRelease(v40);
  v41 = a3[15];
  v42 = (char *)a1 + v41;
  v43 = (char *)a2 + v41;
  v44 = v25((char *)a1 + v41, 1, v23);
  v45 = v25(v43, 1, v23);
  if (!v44)
  {
    if (!v45)
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 24))(v42, v43, v23);
      goto LABEL_19;
    }
    (*(void (**)(char *, uint64_t))(v24 + 8))(v42, v23);
    goto LABEL_18;
  }
  if (v45)
  {
LABEL_18:
    v46 = sub_100004FC8(&qword_100157100);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v42, v43, v23);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v42, 0, 1, v23);
LABEL_19:
  v47 = a3[16];
  v48 = *(uint64_t *)((char *)a2 + v47);
  v49 = *(uint64_t *)((char *)a1 + v47);
  *(uint64_t *)((char *)a1 + v47) = v48;
  swift_bridgeObjectRetain(v48);
  swift_bridgeObjectRelease(v49);
  return a1;
}

uint64_t sub_100009414(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(const void *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const void *v21;
  uint64_t v22;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_OWORD *)(a2 + 32);
  v7 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v8 = a3[11];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = v7;
  v11 = type metadata accessor for FLFollowUpGroupSectionElement(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48);
  if (v13(v10, 1, v11))
  {
    v14 = sub_100004FC8(&qword_100157100);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v15 = a3[13];
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  v16 = (void *)(a1 + v15);
  v17 = (const void *)(a2 + v15);
  if (v13((const void *)(a2 + v15), 1, v11))
  {
    v18 = sub_100004FC8(&qword_100157100);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v16, v17, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v16, 0, 1, v11);
  }
  v19 = a3[15];
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  v20 = (void *)(a1 + v19);
  v21 = (const void *)(a2 + v19);
  if (v13((const void *)(a2 + v19), 1, v11))
  {
    v22 = sub_100004FC8(&qword_100157100);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v20, v21, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v20, 0, 1, v11);
  }
  *(_QWORD *)(a1 + a3[16]) = *(_QWORD *)(a2 + a3[16]);
  return a1;
}

uint64_t *sub_1000095FC(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  v7 = a2[2];
  v8 = a1[2];
  a1[1] = a2[1];
  a1[2] = v7;
  swift_bridgeObjectRelease(v8);
  v9 = a1[3];
  a1[3] = a2[3];
  swift_bridgeObjectRelease(v9);
  v10 = a2[5];
  v11 = a1[5];
  a1[4] = a2[4];
  a1[5] = v10;
  swift_bridgeObjectRelease(v11);
  v12 = a1[6];
  a1[6] = a2[6];
  swift_bridgeObjectRelease(v12);
  v13 = a1[7];
  a1[7] = a2[7];
  swift_bridgeObjectRelease(v13);
  v14 = a1[8];
  a1[8] = a2[8];
  swift_bridgeObjectRelease(v14);
  v15 = a3[11];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = type metadata accessor for FLFollowUpGroupSectionElement(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v22 = v20(v17, 1, v18);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v16, v17, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
LABEL_6:
    v23 = sub_100004FC8(&qword_100157100);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 40))(v16, v17, v18);
LABEL_7:
  v24 = a3[12];
  v25 = *(uint64_t *)((char *)a1 + v24);
  *(uint64_t *)((char *)a1 + v24) = *(uint64_t *)((char *)a2 + v24);
  swift_bridgeObjectRelease(v25);
  v26 = a3[13];
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  v29 = v20((char *)a1 + v26, 1, v18);
  v30 = v20(v28, 1, v18);
  if (v29)
  {
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v27, v28, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v27, 0, 1, v18);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v30)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v27, v18);
LABEL_12:
    v31 = sub_100004FC8(&qword_100157100);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 40))(v27, v28, v18);
LABEL_13:
  v32 = a3[14];
  v33 = *(uint64_t *)((char *)a1 + v32);
  *(uint64_t *)((char *)a1 + v32) = *(uint64_t *)((char *)a2 + v32);
  swift_bridgeObjectRelease(v33);
  v34 = a3[15];
  v35 = (char *)a1 + v34;
  v36 = (char *)a2 + v34;
  v37 = v20((char *)a1 + v34, 1, v18);
  v38 = v20(v36, 1, v18);
  if (!v37)
  {
    if (!v38)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 40))(v35, v36, v18);
      goto LABEL_19;
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v35, v18);
    goto LABEL_18;
  }
  if (v38)
  {
LABEL_18:
    v39 = sub_100004FC8(&qword_100157100);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v35, v36, v18);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v35, 0, 1, v18);
LABEL_19:
  v40 = a3[16];
  v41 = *(uint64_t *)((char *)a1 + v40);
  *(uint64_t *)((char *)a1 + v40) = *(uint64_t *)((char *)a2 + v40);
  swift_bridgeObjectRelease(v41);
  return a1;
}

uint64_t sub_100009920(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10000992C);
}

uint64_t sub_10000992C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100004FC8(&qword_100157100);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 44)], a2, v8);
  }
}

uint64_t sub_1000099AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000099B8);
}

char *sub_1000099B8(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_100004FC8(&qword_100157100);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 44)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for FollowUpInformationProviderSnapshot(uint64_t a1)
{
  uint64_t result;

  result = qword_100157160;
  if (!qword_100157160)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FollowUpInformationProviderSnapshot);
  return result;
}

void sub_100009A6C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[7];
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = &unk_1001142D8;
  v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[3] = &unk_1001142D8;
  v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
  sub_100009B00(319);
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(v2 - 8) + 64;
    v6 = (char *)&value witness table for Builtin.BridgeObject + 64;
    v7 = v5;
    v8 = (char *)&value witness table for Builtin.BridgeObject + 64;
    v9 = v5;
    v10 = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256, 13, v4, a1 + 16);
  }
}

void sub_100009B00(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100157170)
  {
    v2 = type metadata accessor for FLFollowUpGroupSectionElement(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100157170);
  }
}

uint64_t sub_100009B58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  BOOL v19;
  uint64_t v21;

  v4 = type metadata accessor for PrimarySettingsListItemModel(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v10 = (char *)&v21 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 != *(_QWORD *)(a2 + 16))
  {
LABEL_14:
    v17 = 0;
    return v17 & 1;
  }
  if (v11 && a1 != a2)
  {
    v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v13 = *(_QWORD *)(v8 + 72);
    v14 = v11 - 1;
    while (1)
    {
      sub_1000076F0(a1 + v12, (uint64_t)v10, type metadata accessor for PrimarySettingsListItemModel);
      sub_1000076F0(a2 + v12, (uint64_t)v7, type metadata accessor for PrimarySettingsListItemModel);
      sub_1000A103C((uint64_t)v10, (uint64_t)v7);
      if ((v15 & 1) == 0)
        break;
      sub_100022740((uint64_t)&v10[*(int *)(v4 + 20)], (uint64_t)&v7[*(int *)(v4 + 20)]);
      v17 = v16;
      sub_1000076B4((uint64_t)v7, type metadata accessor for PrimarySettingsListItemModel);
      sub_1000076B4((uint64_t)v10, type metadata accessor for PrimarySettingsListItemModel);
      v19 = v14-- != 0;
      if ((v17 & 1) != 0)
      {
        v12 += v13;
        if (v19)
          continue;
      }
      return v17 & 1;
    }
    sub_1000076B4((uint64_t)v7, type metadata accessor for PrimarySettingsListItemModel);
    sub_1000076B4((uint64_t)v10, type metadata accessor for PrimarySettingsListItemModel);
    goto LABEL_14;
  }
  v17 = 1;
  return v17 & 1;
}

uint64_t sub_100009CCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t result;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  char v108;
  char v109;
  char v110;

  v4 = type metadata accessor for PrimarySettingsListItemModel(0);
  v5 = __chkstk_darwin(v4);
  v6 = __chkstk_darwin(v5);
  v10 = *(_QWORD *)(a1 + 16);
  if (v10 == *(_QWORD *)(a2 + 16))
  {
    if (!v10 || a1 == a2)
      return 1;
    v75 = v8;
    v76 = v6;
    v11 = 0;
    v81 = a1 + 32;
    v80 = a2 + 32;
    v77 = v10;
    v79 = v9;
    v78 = (char *)&v74 - v7;
    while (1)
    {
      v12 = v81 + 96 * v11;
      v14 = *(_QWORD *)v12;
      v13 = *(_QWORD *)(v12 + 8);
      v15 = *(unsigned __int8 *)(v12 + 16);
      v100 = *(_QWORD *)(v12 + 24);
      v103 = *(_QWORD *)(v12 + 32);
      v16 = *(_QWORD *)(v12 + 48);
      v101 = *(_QWORD *)(v12 + 40);
      v18 = *(_QWORD *)(v12 + 56);
      v17 = *(_QWORD *)(v12 + 64);
      v19 = *(_QWORD *)(v12 + 72);
      v20 = *(_QWORD *)(v12 + 80);
      v21 = *(_QWORD *)(v12 + 88);
      v22 = v80 + 96 * v11;
      v23 = *(_QWORD *)v22;
      v24 = *(_QWORD *)(v22 + 8);
      v25 = *(unsigned __int8 *)(v22 + 16);
      v26 = *(_QWORD *)(v22 + 32);
      v27 = *(_QWORD *)(v22 + 40);
      v28 = *(_QWORD *)(v22 + 48);
      v93 = *(_QWORD *)(v22 + 24);
      v94 = v27;
      v29 = *(_QWORD *)(v22 + 64);
      v96 = *(_QWORD *)(v22 + 56);
      v97 = v29;
      v30 = *(_QWORD *)(v22 + 80);
      v98 = *(_QWORD *)(v22 + 72);
      v99 = v17;
      v106 = *(_QWORD *)(v22 + 88);
      v92 = v13;
      v90 = v14;
      v104 = v19;
      v102 = v30;
      v95 = v18;
      if (v15)
      {
        if (v15 != 1)
          __asm { BR              X8 }
        if (v25 != 1)
          return 0;
      }
      else if (v25)
      {
        return 0;
      }
      if (v14 != v23 || v13 != v24)
      {
        v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v92, v23, v24, 0);
        v14 = v90;
        v13 = v92;
        if ((v31 & 1) == 0)
          return 0;
      }
      v105 = v21;
      v89 = v16;
      v88 = v15;
      v82 = v11;
      v87 = v26;
      v86 = v25;
      v85 = v24;
      v84 = v23;
      v91 = v20;
      if (v16)
      {
        if (!v28)
          return 0;
        sub_10000BA8C(v14, v13, v15);
        v32 = v28;
        v33 = v101;
        sub_10000BAA4(v100, v103, v101, v16);
        sub_10000BAA4(v95, v99, v104, v20);
        swift_bridgeObjectRetain(v21);
        sub_10000BA8C(v23, v24, v25);
        v35 = v93;
        v34 = v94;
        sub_10000BAA4(v93, v26, v94, v32);
        sub_10000BAA4(v96, v97, v98, v102);
        swift_bridgeObjectRetain(v106);
        sub_10000BAA4(v35, v26, v34, v32);
        v36 = v100;
        v37 = v103;
        sub_10000BAA4(v100, v103, v33, v16);
        v108 = v33 & 1;
        v107 = v34 & 1;
        v38 = static Text.== infix(_:_:)(v36, v37, v33 & 1, v16, v35, v26, v34 & 1, v32);
        v39 = v91;
        v40 = v38;
        v28 = v32;
        sub_10000BAFC(v35, v26, v34, v32);
        sub_10000BAFC(v36, v103, v101, v16);
        if ((v40 & 1) == 0)
        {
          sub_10000BAE4(v84, v85, v86);
          sub_10000BAFC(v93, v87, v94, v32);
          sub_10000BAFC(v96, v97, v98, v102);
          swift_bridgeObjectRelease(v106);
          sub_10000BAE4(v90, v92, v88);
          sub_10000BAFC(v100, v103, v101, v89);
          v71 = v95;
          v72 = v99;
          v73 = v104;
          goto LABEL_49;
        }
      }
      else
      {
        if (v28)
          return 0;
        sub_10000BA8C(v14, v13, v15);
        sub_10000BAA4(v100, v103, v101, 0);
        sub_10000BAA4(v95, v99, v104, v20);
        swift_bridgeObjectRetain(v21);
        sub_10000BA8C(v23, v24, v25);
        sub_10000BAA4(v93, v26, v94, 0);
        sub_10000BAA4(v96, v97, v98, v102);
        swift_bridgeObjectRetain(v106);
        v39 = v20;
      }
      v83 = v28;
      if (v39)
      {
        v41 = v104;
        v42 = v102;
        v43 = v79;
        v44 = (uint64_t)v78;
        if (!v102)
        {
          sub_10000BAE4(v84, v85, v86);
          sub_10000BAFC(v93, v87, v94, v28);
          sub_10000BAFC(v96, v97, v98, 0);
          swift_bridgeObjectRelease(v106);
          sub_10000BAE4(v90, v92, v88);
          sub_10000BAFC(v100, v103, v101, v89);
          v71 = v95;
          v72 = v99;
          v73 = v41;
LABEL_49:
          v69 = v39;
          goto LABEL_43;
        }
        v45 = v96;
        v46 = v97;
        v47 = v98;
        sub_10000BAA4(v96, v97, v98, v102);
        v48 = v95;
        v49 = v99;
        sub_10000BAA4(v95, v99, v104, v39);
        v110 = v104 & 1;
        v109 = v47 & 1;
        v50 = v39;
        v51 = static Text.== infix(_:_:)(v48, v49, v104 & 1, v39, v45, v46, v47 & 1, v42);
        v52 = v46;
        v28 = v83;
        v53 = v42;
        v54 = v104;
        sub_10000BAFC(v45, v52, v47, v53);
        sub_10000BAFC(v48, v49, v54, v50);
        if ((v51 & 1) == 0)
        {
          sub_10000BAE4(v84, v85, v86);
          sub_10000BAFC(v93, v87, v94, v28);
          sub_10000BAFC(v96, v97, v98, v102);
          swift_bridgeObjectRelease(v106);
          sub_10000BAE4(v90, v92, v88);
          sub_10000BAFC(v100, v103, v101, v89);
          v71 = v48;
          v72 = v99;
          v73 = v54;
          goto LABEL_42;
        }
      }
      else
      {
        v54 = v104;
        v43 = v79;
        v44 = (uint64_t)v78;
        v48 = v95;
        if (v102)
        {
          sub_10000BAE4(v84, v85, v86);
          sub_10000BAFC(v93, v87, v94, v28);
          sub_10000BAFC(v96, v97, v98, v102);
          swift_bridgeObjectRelease(v106);
          sub_10000BAE4(v90, v92, v88);
          sub_10000BAFC(v100, v103, v101, v89);
          v71 = v48;
          v72 = v99;
          v73 = v54;
          v69 = 0;
          goto LABEL_43;
        }
      }
      v55 = v48;
      v56 = v105;
      v57 = *(_QWORD *)(v105 + 16);
      if (v57 != *(_QWORD *)(v106 + 16))
        break;
      if (v57)
      {
        if (v105 != v106)
        {
          v58 = (*(unsigned __int8 *)(v75 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80);
          v59 = *(_QWORD *)(v75 + 72);
          v60 = v76;
          while (1)
          {
            sub_1000076F0(v56 + v58, v44, type metadata accessor for PrimarySettingsListItemModel);
            sub_1000076F0(v106 + v58, v43, type metadata accessor for PrimarySettingsListItemModel);
            sub_1000A103C(v44, v43);
            if ((v61 & 1) == 0)
              break;
            sub_100022740(v44 + *(int *)(v60 + 20), v43 + *(int *)(v60 + 20));
            v63 = v62;
            sub_1000076B4(v43, type metadata accessor for PrimarySettingsListItemModel);
            sub_1000076B4(v44, type metadata accessor for PrimarySettingsListItemModel);
            if ((v63 & 1) == 0)
              goto LABEL_41;
            v58 += v59;
            --v57;
            v56 = v105;
            if (!v57)
            {
              sub_10000BAE4(v84, v85, v86);
              sub_10000BAFC(v93, v87, v94, v83);
              sub_10000BAFC(v96, v97, v98, v102);
              swift_bridgeObjectRelease(v106);
              sub_10000BAE4(v90, v92, v88);
              sub_10000BAFC(v100, v103, v101, v89);
              v64 = v55;
              v65 = v99;
              v66 = v104;
              goto LABEL_37;
            }
          }
          sub_1000076B4(v43, type metadata accessor for PrimarySettingsListItemModel);
          sub_1000076B4(v44, type metadata accessor for PrimarySettingsListItemModel);
LABEL_41:
          sub_10000BAE4(v84, v85, v86);
          sub_10000BAFC(v93, v87, v94, v83);
          sub_10000BAFC(v96, v97, v98, v102);
          swift_bridgeObjectRelease(v106);
          sub_10000BAE4(v90, v92, v88);
          sub_10000BAFC(v100, v103, v101, v89);
          v71 = v55;
          v72 = v99;
          v73 = v104;
LABEL_42:
          v69 = v91;
LABEL_43:
          sub_10000BAFC(v71, v72, v73, v69);
          v70 = v105;
          goto LABEL_44;
        }
        sub_10000BAE4(v84, v85, v86);
        sub_10000BAFC(v93, v87, v94, v28);
        sub_10000BAFC(v96, v97, v98, v102);
        v67 = v56;
      }
      else
      {
        sub_10000BAE4(v84, v85, v86);
        sub_10000BAFC(v93, v87, v94, v28);
        sub_10000BAFC(v96, v97, v98, v102);
        v67 = v106;
      }
      swift_bridgeObjectRelease(v67);
      sub_10000BAE4(v90, v92, v88);
      sub_10000BAFC(v100, v103, v101, v89);
      v64 = v48;
      v65 = v99;
      v66 = v54;
LABEL_37:
      sub_10000BAFC(v64, v65, v66, v91);
      swift_bridgeObjectRelease(v56);
      v11 = v82 + 1;
      result = 1;
      if (v82 + 1 == v77)
        return result;
    }
    sub_10000BAE4(v84, v85, v86);
    sub_10000BAFC(v93, v87, v94, v28);
    sub_10000BAFC(v96, v97, v98, v102);
    swift_bridgeObjectRelease(v106);
    sub_10000BAE4(v90, v92, v88);
    sub_10000BAFC(v100, v103, v101, v89);
    sub_10000BAFC(v48, v99, v54, v91);
    v70 = v56;
LABEL_44:
    swift_bridgeObjectRelease(v70);
  }
  return 0;
}

uint64_t sub_10000A8C8(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  BOOL v26;
  _QWORD v27[4];

  v4 = (int *)type metadata accessor for SearchResult(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v10 = (char *)v27 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v11 || a1 == a2)
    return 1;
  v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v27[2] = *(_QWORD *)(v8 + 72);
  v27[3] = a1;
  v27[1] = a2;
  sub_1000076F0(a1 + v12, (uint64_t)v27 - v9, type metadata accessor for SearchResult);
  sub_1000076F0(a2 + v12, (uint64_t)v7, type metadata accessor for SearchResult);
  sub_1000A103C((uint64_t)v10, (uint64_t)v7);
  if ((v14 & 1) != 0 && (static URL.== infix(_:_:)(&v10[v4[5]], &v7[v4[5]]) & 1) != 0)
  {
    v15 = v4[6];
    v16 = *(_QWORD *)&v10[v15];
    v17 = *(_QWORD *)&v10[v15 + 8];
    v18 = &v7[v15];
    v19 = *((_QWORD *)v18 + 1);
    v20 = v16 == *(_QWORD *)v18 && v17 == v19;
    if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, *(_QWORD *)v18, v19, 0) & 1) != 0)
    {
      v21 = v4[7];
      v22 = &v10[v21];
      v23 = *(_QWORD *)&v10[v21 + 8];
      v24 = &v7[v21];
      v25 = *((_QWORD *)v24 + 1);
      if (v23)
      {
        if (!v25)
          goto LABEL_24;
        v26 = *(_QWORD *)v22 == *(_QWORD *)v24 && v23 == v25;
        if (!v26
          && (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v22, v23, *(_QWORD *)v24, v25, 0) & 1) == 0)
        {
          goto LABEL_24;
        }
        goto LABEL_22;
      }
      if (!v25)
      {
LABEL_22:
        if (*(_QWORD *)&v10[v4[8]] == *(_QWORD *)&v7[v4[8]])
          __asm { BR              X10 }
      }
    }
  }
LABEL_24:
  sub_1000076B4((uint64_t)v7, type metadata accessor for SearchResult);
  sub_1000076B4((uint64_t)v10, type metadata accessor for SearchResult);
  return 0;
}

uint64_t sub_10000ABBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void (*v19)(char *, uint64_t);
  BOOL v21;
  uint64_t v23;
  uint64_t v24;

  v4 = type metadata accessor for URLQueryItem(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v10 = (char *)&v23 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      v18 = 1;
    }
    else
    {
      v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v23 = *(_QWORD *)(v8 + 72);
      v24 = v8;
      v13 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
      v14 = v11 - 1;
      do
      {
        v15 = a1;
        v13(v10, a1 + v12, v4);
        v16 = a2;
        v13(v7, a2 + v12, v4);
        v17 = sub_100007828(&qword_1001571E0, (uint64_t (*)(uint64_t))&type metadata accessor for URLQueryItem, (uint64_t)&protocol conformance descriptor for URLQueryItem);
        v18 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v7, v4, v17);
        v19 = *(void (**)(char *, uint64_t))(v24 + 8);
        v19(v7, v4);
        v19(v10, v4);
        v21 = v14-- != 0;
        if ((v18 & 1) == 0)
          break;
        v12 += v23;
        a2 = v16;
        a1 = v15;
      }
      while (v21);
    }
  }
  else
  {
    v18 = 0;
  }
  return v18 & 1;
}

uint64_t sub_10000AD40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (uint64_t *)(a1 + 48);
    v4 = (uint64_t *)(a2 + 48);
    do
    {
      v5 = *(v3 - 2);
      v6 = *(v3 - 1);
      v8 = *v3;
      v7 = v3[1];
      v9 = v3[2];
      v10 = v3[3];
      v11 = *(v4 - 2);
      v12 = *(v4 - 1);
      v13 = *v4;
      v14 = v4[1];
      v15 = v4[2];
      v16 = v4[3];
      v34 = v4[4];
      v35 = v3[4];
      if ((v3[6] & 1) != 0)
      {
        if ((v4[6] & 1) == 0)
          return 0;
        if (v5 != v11 || v6 != v12)
        {
          v17 = v4[2];
          v32 = v3[1];
          v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v11, v12, 0);
          v7 = v32;
          v15 = v17;
          if ((v18 & 1) == 0)
            return 0;
        }
        if (v8 != v13 || v7 != v14)
        {
          v19 = v8;
          v20 = v15;
          v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v7, v13, v14, 0);
          v15 = v20;
          if ((v21 & 1) == 0)
            return 0;
        }
        if (v9 == v15 && v10 == v16)
        {
          if (v35 != v34)
            return 0;
        }
        else
        {
          v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v10, v15, v16, 0);
          result = 0;
          if ((v28 & 1) == 0 || v35 != v34)
            return result;
        }
      }
      else
      {
        if ((v4[6] & 1) != 0)
          return 0;
        v31 = v3[5];
        v22 = v4[5];
        if (v5 != v11 || v6 != v12)
        {
          v30 = v4[5];
          v23 = v4[2];
          v33 = v3[1];
          v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v11, v12, 0);
          v7 = v33;
          v15 = v23;
          v22 = v30;
          if ((v24 & 1) == 0)
            return 0;
        }
        if (v8 != v13 || v7 != v14)
        {
          v25 = v8;
          v26 = v15;
          v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v7, v13, v14, 0);
          v15 = v26;
          if ((v27 & 1) == 0)
            return 0;
        }
        if ((v9 != v15 || v10 != v16) && (_stringCompareWithSmolCheck(_:_:expecting:)(v9, v10, v15, v16, 0) & 1) == 0
          || (v35 != v34 || v31 != v22)
          && (_stringCompareWithSmolCheck(_:_:expecting:)(v35, v31, v34, v22, 0) & 1) == 0)
        {
          return 0;
        }
      }
      v3 += 9;
      v4 += 9;
      --v2;
    }
    while (v2);
  }
  return 1;
}

uint64_t sub_10000AF7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v7;
  char v8;
  char v9;
  BOOL v11;
  _QWORD v13[10];
  _BYTE v14[32];
  uint64_t v15;
  _BYTE v16[16];
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[16];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    goto LABEL_24;
  if (!v2 || a1 == a2)
  {
    v9 = 1;
    return v9 & 1;
  }
  v3 = (_QWORD *)(a1 + 32);
  v4 = (_QWORD *)(a2 + 32);
  v5 = v2 - 1;
  while (1)
  {
    sub_10000BB7C(v3, (uint64_t)&v24);
    sub_10000BB7C(v4, (uint64_t)&v22);
    if (v24 == v22 && v25 == v23)
    {
      sub_10000BB7C(&v24, (uint64_t)v19);
      sub_10000BB7C(&v22, (uint64_t)v16);
      goto LABEL_12;
    }
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, v22, v23, 0);
    sub_10000BB7C(&v24, (uint64_t)v19);
    sub_10000BB7C(&v22, (uint64_t)v16);
    if ((v7 & 1) == 0)
      break;
LABEL_12:
    if (v20 == v17 && v21 == v18)
    {
      sub_10000BBB8((uint64_t)v19);
      sub_10000BBB8((uint64_t)v16);
      sub_10000BB7C(&v24, (uint64_t)v14);
      sub_10000BB7C(&v22, (uint64_t)v13);
    }
    else
    {
      v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v21, v17, v18, 0);
      sub_10000BBB8((uint64_t)v19);
      sub_10000BBB8((uint64_t)v16);
      sub_10000BB7C(&v24, (uint64_t)v14);
      sub_10000BB7C(&v22, (uint64_t)v13);
      if ((v8 & 1) == 0)
        goto LABEL_23;
    }
    sub_10000BBEC();
    v9 = static NSObject.== infix(_:_:)(v15, v13[4]);
    sub_10000BBB8((uint64_t)v14);
    sub_10000BBB8((uint64_t)v13);
    sub_10000BBB8((uint64_t)&v22);
    sub_10000BBB8((uint64_t)&v24);
    v11 = v5-- != 0;
    if ((v9 & 1) != 0)
    {
      v3 += 10;
      v4 += 10;
      if (v11)
        continue;
    }
    return v9 & 1;
  }
  sub_10000BBB8((uint64_t)v19);
  sub_10000BBB8((uint64_t)v16);
  sub_10000BB7C(&v24, (uint64_t)v14);
  sub_10000BB7C(&v22, (uint64_t)v13);
LABEL_23:
  sub_10000BBB8((uint64_t)v14);
  sub_10000BBB8((uint64_t)v13);
  sub_10000BBB8((uint64_t)&v22);
  sub_10000BBB8((uint64_t)&v24);
LABEL_24:
  v9 = 0;
  return v9 & 1;
}

uint64_t sub_10000B170(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  unsigned int (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  int *v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  char v56;
  void (*v57)(_BYTE *, uint64_t);
  _BYTE *v58;
  _BYTE *v59;
  uint64_t v60;
  unsigned int (*v61)(uint64_t, uint64_t, uint64_t);
  _BYTE *v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  char v66;
  void (*v67)(_BYTE *, uint64_t);
  _BYTE v69[4];
  int v70;
  unsigned int (*v71)(uint64_t, uint64_t, uint64_t);
  int *v72;
  _BYTE *v73;
  _BYTE *v74;
  _BYTE *v75;
  _BYTE *v76;
  _BYTE *v77;
  _BYTE *v78;
  _BYTE *v79;
  uint64_t v80;
  uint64_t v81;

  v4 = type metadata accessor for FLFollowUpGroupSectionElement(0);
  v81 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v79 = &v69[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v80 = sub_100004FC8(&qword_1001571D0);
  v6 = __chkstk_darwin(v80);
  v76 = &v69[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = __chkstk_darwin(v6);
  v78 = &v69[-v9];
  __chkstk_darwin(v8);
  v11 = &v69[-v10];
  v12 = sub_100004FC8(&qword_100157100);
  v13 = __chkstk_darwin(v12);
  v74 = &v69[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = __chkstk_darwin(v13);
  v77 = &v69[-v16];
  v17 = __chkstk_darwin(v15);
  v75 = &v69[-v18];
  v19 = __chkstk_darwin(v17);
  v21 = &v69[-v20];
  v22 = __chkstk_darwin(v19);
  v24 = &v69[-v23];
  v25 = __chkstk_darwin(v22);
  v27 = &v69[-v26];
  v28 = __chkstk_darwin(v25);
  v30 = &v69[-v29];
  v31 = __chkstk_darwin(v28);
  v33 = &v69[-v32];
  __chkstk_darwin(v31);
  v35 = &v69[-v34];
  if ((sub_100009B58(*a1, *a2) & 1) == 0)
    goto LABEL_44;
  v36 = a1[2];
  v37 = a2[2];
  if (v36)
  {
    if (!v37)
      goto LABEL_44;
    v38 = a1[1];
    v39 = a2[1];
    if (v38 != v39 || v36 != v37)
    {
      v40 = _stringCompareWithSmolCheck(_:_:expecting:)(v38, v36, v39, v37, 0);
      v41 = 0;
      if ((v40 & 1) == 0)
        return v41 & 1;
    }
  }
  else if (v37)
  {
    goto LABEL_44;
  }
  if ((sub_100009B58(a1[3], a2[3]) & 1) == 0)
    goto LABEL_44;
  v42 = a1[5];
  v43 = a2[5];
  if (!v42)
  {
    if (v43)
      goto LABEL_44;
    goto LABEL_17;
  }
  if (!v43)
    goto LABEL_44;
  v44 = a1[4];
  v45 = a2[4];
  if (v44 == v45 && v42 == v43
    || (v46 = _stringCompareWithSmolCheck(_:_:expecting:)(v44, v42, v45, v43, 0), v41 = 0, (v46 & 1) != 0))
  {
LABEL_17:
    if ((sub_100009CCC(a1[6], a2[6]) & 1) == 0
      || (sub_100009B58(a1[7], a2[7]) & 1) == 0
      || (sub_100009CCC(a1[8], a2[8]) & 1) == 0)
    {
      goto LABEL_44;
    }
    v72 = (int *)type metadata accessor for FollowUpInformationProviderSnapshot(0);
    sub_10000BA08((uint64_t)a1 + v72[11], (uint64_t)v35);
    sub_10000BA08((uint64_t)a2 + v72[11], (uint64_t)v33);
    v73 = &v11[*(int *)(v80 + 48)];
    sub_10000BA08((uint64_t)v35, (uint64_t)v11);
    sub_10000BA08((uint64_t)v33, (uint64_t)v73);
    v71 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v81 + 48);
    if (v71((uint64_t)v11, 1, v4) == 1)
    {
      sub_10000BA50((uint64_t)v33, &qword_100157100);
      sub_10000BA50((uint64_t)v35, &qword_100157100);
      v47 = v71;
      if (v71((uint64_t)v73, 1, v4) == 1)
      {
        sub_10000BA50((uint64_t)v11, &qword_100157100);
        goto LABEL_28;
      }
    }
    else
    {
      sub_10000BA08((uint64_t)v11, (uint64_t)v30);
      if (v71((uint64_t)v73, 1, v4) != 1)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v81 + 32))(v79, v73, v4);
        v49 = sub_100007828(&qword_1001571D8, (uint64_t (*)(uint64_t))&type metadata accessor for FLFollowUpGroupSectionElement, (uint64_t)&protocol conformance descriptor for FLFollowUpGroupSectionElement);
        v70 = dispatch thunk of static Equatable.== infix(_:_:)(v30, v79, v4, v49);
        v73 = *(_BYTE **)(v81 + 8);
        ((void (*)(_BYTE *, uint64_t))v73)(v79, v4);
        sub_10000BA50((uint64_t)v33, &qword_100157100);
        sub_10000BA50((uint64_t)v35, &qword_100157100);
        ((void (*)(_BYTE *, uint64_t))v73)(v30, v4);
        sub_10000BA50((uint64_t)v11, &qword_100157100);
        v47 = v71;
        if ((v70 & 1) == 0)
          goto LABEL_44;
LABEL_28:
        v50 = v72;
        if ((sub_100009B58(*(uint64_t *)((char *)a1 + v72[12]), *(uint64_t *)((char *)a2 + v72[12])) & 1) == 0)
          goto LABEL_44;
        sub_10000BA08((uint64_t)a1 + v50[13], (uint64_t)v27);
        sub_10000BA08((uint64_t)a2 + v50[13], (uint64_t)v24);
        v51 = v78;
        v52 = (uint64_t)&v78[*(int *)(v80 + 48)];
        sub_10000BA08((uint64_t)v27, (uint64_t)v78);
        sub_10000BA08((uint64_t)v24, v52);
        if (v47((uint64_t)v51, 1, v4) == 1)
        {
          sub_10000BA50((uint64_t)v24, &qword_100157100);
          sub_10000BA50((uint64_t)v27, &qword_100157100);
          if (v47(v52, 1, v4) == 1)
          {
            sub_10000BA50((uint64_t)v51, &qword_100157100);
LABEL_36:
            if ((sub_100009B58(*(uint64_t *)((char *)a1 + v50[14]), *(uint64_t *)((char *)a2 + v50[14])) & 1) == 0)
              goto LABEL_44;
            v58 = v75;
            sub_10000BA08((uint64_t)a1 + v50[15], (uint64_t)v75);
            v59 = v77;
            sub_10000BA08((uint64_t)a2 + v50[15], (uint64_t)v77);
            v11 = v76;
            v60 = (uint64_t)&v76[*(int *)(v80 + 48)];
            sub_10000BA08((uint64_t)v58, (uint64_t)v76);
            sub_10000BA08((uint64_t)v59, v60);
            v61 = v71;
            if (v71((uint64_t)v11, 1, v4) == 1)
            {
              sub_10000BA50((uint64_t)v77, &qword_100157100);
              sub_10000BA50((uint64_t)v58, &qword_100157100);
              if (v61(v60, 1, v4) == 1)
              {
                sub_10000BA50((uint64_t)v11, &qword_100157100);
LABEL_43:
                v41 = sub_100009B58(*(uint64_t *)((char *)a1 + v72[16]), *(uint64_t *)((char *)a2 + v72[16]));
                return v41 & 1;
              }
              goto LABEL_25;
            }
            v62 = v74;
            sub_10000BA08((uint64_t)v11, (uint64_t)v74);
            if (v61(v60, 1, v4) == 1)
            {
              sub_10000BA50((uint64_t)v77, &qword_100157100);
              sub_10000BA50((uint64_t)v58, &qword_100157100);
              (*(void (**)(_BYTE *, uint64_t))(v81 + 8))(v62, v4);
              goto LABEL_25;
            }
            v63 = v81;
            v64 = v79;
            (*(void (**)(_BYTE *, uint64_t, uint64_t))(v81 + 32))(v79, v60, v4);
            v65 = sub_100007828(&qword_1001571D8, (uint64_t (*)(uint64_t))&type metadata accessor for FLFollowUpGroupSectionElement, (uint64_t)&protocol conformance descriptor for FLFollowUpGroupSectionElement);
            v66 = dispatch thunk of static Equatable.== infix(_:_:)(v62, v64, v4, v65);
            v67 = *(void (**)(_BYTE *, uint64_t))(v63 + 8);
            v67(v64, v4);
            sub_10000BA50((uint64_t)v77, &qword_100157100);
            sub_10000BA50((uint64_t)v58, &qword_100157100);
            v67(v62, v4);
            sub_10000BA50((uint64_t)v11, &qword_100157100);
            if ((v66 & 1) != 0)
              goto LABEL_43;
LABEL_44:
            v41 = 0;
            return v41 & 1;
          }
        }
        else
        {
          sub_10000BA08((uint64_t)v51, (uint64_t)v21);
          if (v47(v52, 1, v4) != 1)
          {
            v53 = v81;
            v54 = v79;
            (*(void (**)(_BYTE *, uint64_t, uint64_t))(v81 + 32))(v79, v52, v4);
            v55 = sub_100007828(&qword_1001571D8, (uint64_t (*)(uint64_t))&type metadata accessor for FLFollowUpGroupSectionElement, (uint64_t)&protocol conformance descriptor for FLFollowUpGroupSectionElement);
            v56 = dispatch thunk of static Equatable.== infix(_:_:)(v21, v54, v4, v55);
            v57 = *(void (**)(_BYTE *, uint64_t))(v53 + 8);
            v57(v54, v4);
            sub_10000BA50((uint64_t)v24, &qword_100157100);
            sub_10000BA50((uint64_t)v27, &qword_100157100);
            v57(v21, v4);
            v50 = v72;
            sub_10000BA50((uint64_t)v78, &qword_100157100);
            if ((v56 & 1) == 0)
              goto LABEL_44;
            goto LABEL_36;
          }
          sub_10000BA50((uint64_t)v24, &qword_100157100);
          sub_10000BA50((uint64_t)v27, &qword_100157100);
          (*(void (**)(_BYTE *, uint64_t))(v81 + 8))(v21, v4);
        }
        v48 = (uint64_t)v51;
        goto LABEL_26;
      }
      sub_10000BA50((uint64_t)v33, &qword_100157100);
      sub_10000BA50((uint64_t)v35, &qword_100157100);
      (*(void (**)(_BYTE *, uint64_t))(v81 + 8))(v30, v4);
    }
LABEL_25:
    v48 = (uint64_t)v11;
LABEL_26:
    sub_10000BA50(v48, &qword_1001571D0);
    goto LABEL_44;
  }
  return v41 & 1;
}

uint64_t sub_10000BA08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004FC8(&qword_100157100);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000BA50(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_100004FC8(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10000BA8C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 1u)
    return swift_bridgeObjectRetain(a2);
  return result;
}

uint64_t sub_10000BAA4(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_10000BAD4(result, a2, a3 & 1);
    return swift_bridgeObjectRetain(a4);
  }
  return result;
}

uint64_t sub_10000BAD4(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_retain(a1);
  else
    return swift_bridgeObjectRetain(a2);
}

uint64_t sub_10000BAE4(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 1u)
    return swift_bridgeObjectRelease(a2);
  return result;
}

uint64_t sub_10000BAFC(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_100007618(result, a2, a3 & 1);
    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

uint64_t sub_10000BB2C(uint64_t result, uint64_t a2, char a3)
{
  if (a3 == 2 || a3 == 1)
    return swift_bridgeObjectRetain(a2);
  if (!a3)
    return swift_retain(result);
  return result;
}

uint64_t sub_10000BB54(uint64_t result, uint64_t a2, char a3)
{
  if (a3 == 2 || a3 == 1)
    return swift_bridgeObjectRelease(a2);
  if (!a3)
    return swift_release(result);
  return result;
}

uint64_t sub_10000BB7C(_QWORD *a1, uint64_t a2)
{
  initializeWithCopy for ConnectedHeadphoneItem(a2, a1);
  return a2;
}

uint64_t sub_10000BBB8(uint64_t a1)
{
  destroy for ConnectedHeadphoneItem(a1);
  return a1;
}

unint64_t sub_10000BBEC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001571E8;
  if (!qword_1001571E8)
  {
    v1 = objc_opt_self(NSObject);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001571E8);
  }
  return result;
}

void sub_10000BC28()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  Class isa;
  char v13;
  _OWORD v14[2];
  _BYTE v15[24];
  uint64_t v16;

  v1 = v0;
  swift_beginAccess(&unk_1001571F0, v14, 32, 0);
  v2 = objc_getAssociatedObject(v0, &unk_1001571F0);
  swift_endAccess(v14);
  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v14, v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v14, 0, sizeof(v14));
  }
  sub_10000BFAC((uint64_t)v14, (uint64_t)v15);
  if (v16)
  {
    if ((swift_dynamicCast(&v13, v15, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0)
      return;
  }
  else
  {
    sub_10000BFF4((uint64_t)v15);
  }
  v3 = objc_msgSend(v1, "splitViewController");
  v4 = v3;
  if (v3)
    v5 = objc_msgSend(v3, "parentViewController");
  else
    v5 = 0;
  v6 = objc_msgSend(v1, "view");
  if (v6)
  {
    v7 = v6;
    v8 = objc_msgSend(v6, "window");

    v9 = objc_msgSend(v8, "rootViewController");
    if (v5)
    {
      if (v9)
      {
        sub_10000C034();
        v10 = v9;
        v11 = v5;
        static NSObject.== infix(_:_:)(v11, v10);

      }
    }
    isa = Bool._bridgeToObjectiveC()().super.super.isa;
    swift_beginAccess(&unk_1001571F0, v15, 32, 0);
    objc_setAssociatedObject(v1, &unk_1001571F0, isa, 0);
    swift_endAccess(v15);

  }
  else
  {

    __break(1u);
  }
}

void sub_10000BE54(char a1, char a2)
{
  void *v2;
  char v5;
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  NSObject *oslog;

  sub_10000BC28();
  if ((v5 & 1) != 0 && (a1 & 1) != 0)
  {
    if (qword_100156CA0 != -1)
      swift_once(&qword_100156CA0, sub_10008BDE8);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_100007808(v6, (uint64_t)qword_10015D298);
    oslog = Logger.logObject.getter(v7);
    v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v8, "Ignoring request to hide navigation bar.", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }

  }
  else
  {
    objc_msgSend(v2, "sa_setNavigationBarHidden:animated:", a1 & 1, a2 & 1);
  }
}

uint64_t sub_10000BFAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004FC8(&qword_10015BA90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000BFF4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004FC8(&qword_10015BA90);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10000C034()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001571F8;
  if (!qword_1001571F8)
  {
    v1 = objc_opt_self(UIViewController);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001571F8);
  }
  return result;
}

uint64_t *sub_10000C070(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  id v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  _OWORD *v50;
  _OWORD *v51;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v18);
  }
  else
  {
    v7 = type metadata accessor for URL(0);
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = (char *)a1 + v9;
    v11 = (uint64_t *)((char *)a2 + v9);
    v12 = type metadata accessor for SettingsURLDestination.Action(0);
    switch(swift_getEnumCaseMultiPayload(v11, v12))
    {
      case 1u:
        v13 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
        switch(swift_getEnumCaseMultiPayload(v11, v13))
        {
          case 0u:
            v14 = type metadata accessor for FLFollowUpInformation(0);
            (*(void (**)(char *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v10, v11, v14);
            v15 = v10;
            v16 = v13;
            v17 = 0;
            goto LABEL_19;
          case 1u:
            v22 = type metadata accessor for FLFollowUpInformation(0);
            (*(void (**)(char *, _QWORD *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v10, v11, v22);
            v15 = v10;
            v16 = v13;
            v17 = 1;
            goto LABEL_19;
          case 2u:
            v23 = type metadata accessor for FLFollowUpInformation(0);
            (*(void (**)(char *, _QWORD *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v10, v11, v23);
            v24 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
            v25 = &v10[v24];
            v26 = (_QWORD *)((char *)v11 + v24);
            v27 = v26[1];
            *(_QWORD *)v25 = *v26;
            *((_QWORD *)v25 + 1) = v27;
            swift_bridgeObjectRetain(v27);
            v15 = v10;
            v16 = v13;
            v17 = 2;
            goto LABEL_19;
          case 3u:
            v28 = v11[1];
            *(_QWORD *)v10 = *v11;
            *((_QWORD *)v10 + 1) = v28;
            v29 = v11[3];
            *((_QWORD *)v10 + 2) = v11[2];
            *((_QWORD *)v10 + 3) = v29;
            v30 = v11[5];
            *((_QWORD *)v10 + 4) = v11[4];
            *((_QWORD *)v10 + 5) = v30;
            v31 = v11[6];
            v32 = v11[7];
            *((_QWORD *)v10 + 6) = v31;
            *((_QWORD *)v10 + 7) = v32;
            swift_bridgeObjectRetain(v28);
            swift_bridgeObjectRetain(v29);
            swift_bridgeObjectRetain(v30);
            swift_bridgeObjectRetain(v32);
            v15 = v10;
            v16 = v13;
            v17 = 3;
            goto LABEL_19;
          case 4u:
            v33 = v11[1];
            *(_QWORD *)v10 = *v11;
            *((_QWORD *)v10 + 1) = v33;
            v34 = v11[3];
            *((_QWORD *)v10 + 2) = v11[2];
            *((_QWORD *)v10 + 3) = v34;
            v35 = v11[5];
            *((_QWORD *)v10 + 4) = v11[4];
            *((_QWORD *)v10 + 5) = v35;
            *((_QWORD *)v10 + 6) = v11[6];
            swift_bridgeObjectRetain(v33);
            swift_bridgeObjectRetain(v34);
            swift_bridgeObjectRetain(v35);
            v15 = v10;
            v16 = v13;
            v17 = 4;
            goto LABEL_19;
          case 5u:
            v36 = v11[1];
            *(_QWORD *)v10 = *v11;
            *((_QWORD *)v10 + 1) = v36;
            v37 = v11[3];
            *((_QWORD *)v10 + 2) = v11[2];
            *((_QWORD *)v10 + 3) = v37;
            v39 = (void *)v11[4];
            v38 = v11[5];
            *((_QWORD *)v10 + 4) = v39;
            *((_QWORD *)v10 + 5) = v38;
            v50 = v11 + 6;
            v51 = v10 + 48;
            v40 = v11[9];
            swift_bridgeObjectRetain(v36);
            swift_bridgeObjectRetain(v37);
            v41 = v39;
            swift_bridgeObjectRetain(v38);
            if (v40)
            {
              *((_QWORD *)v10 + 9) = v40;
              (**(void (***)(_OWORD *, _OWORD *, uint64_t))(v40 - 8))(v51, v50, v40);
            }
            else
            {
              v42 = v50[1];
              *v51 = *v50;
              *((_OWORD *)v10 + 4) = v42;
            }
            v15 = v10;
            v16 = v13;
            v17 = 5;
LABEL_19:
            swift_storeEnumTagMultiPayload(v15, v16, v17);
            break;
          default:
            memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
            break;
        }
        v19 = v10;
        v20 = v12;
        v21 = 1;
        goto LABEL_21;
      case 2u:
        v8((uint64_t *)v10, v11, v7);
        v19 = v10;
        v20 = v12;
        v21 = 2;
        goto LABEL_21;
      case 3u:
        v8((uint64_t *)v10, v11, v7);
        v19 = v10;
        v20 = v12;
        v21 = 3;
        goto LABEL_21;
      case 4u:
        v8((uint64_t *)v10, v11, v7);
        v19 = v10;
        v20 = v12;
        v21 = 4;
LABEL_21:
        swift_storeEnumTagMultiPayload(v19, v20, v21);
        break;
      default:
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
        break;
    }
    v43 = a3[6];
    v44 = a3[7];
    v45 = *(uint64_t *)((char *)a2 + v43);
    *(uint64_t *)((char *)a1 + v43) = v45;
    v46 = (uint64_t *)((char *)a1 + v44);
    v47 = (uint64_t *)((char *)a2 + v44);
    v48 = v47[1];
    *v46 = *v47;
    v46[1] = v48;
    swift_bridgeObjectRetain(v45);
    swift_bridgeObjectRetain(v48);
  }
  return a1;
}

uint64_t type metadata accessor for SettingsURLDestination.Action(uint64_t a1)
{
  return sub_10000D3C4(a1, qword_100157308, (uint64_t)&nominal type descriptor for SettingsURLDestination.Action);
}

uint64_t sub_10000C434(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = type metadata accessor for URL(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = a1 + a2[5];
  v7 = type metadata accessor for SettingsURLDestination.Action(0);
  switch(swift_getEnumCaseMultiPayload(v6, v7))
  {
    case 1u:
      v9 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
      switch(swift_getEnumCaseMultiPayload(v6, v9))
      {
        case 0u:
        case 1u:
          v10 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v6, v10);
          break;
        case 2u:
          v11 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v6, v11);
          v12 = sub_100004FC8(&qword_10015C420);
          swift_bridgeObjectRelease(*(_QWORD *)(v6 + *(int *)(v12 + 48) + 8));
          break;
        case 3u:
          swift_bridgeObjectRelease(*(_QWORD *)(v6 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v6 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(v6 + 40));
          swift_bridgeObjectRelease(*(_QWORD *)(v6 + 56));
          break;
        case 4u:
          swift_bridgeObjectRelease(*(_QWORD *)(v6 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v6 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(v6 + 40));
          break;
        case 5u:
          swift_bridgeObjectRelease(*(_QWORD *)(v6 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v6 + 24));

          swift_bridgeObjectRelease(*(_QWORD *)(v6 + 40));
          if (*(_QWORD *)(v6 + 72))
            sub_100005474((_QWORD *)(v6 + 48));
          break;
        default:
          goto LABEL_3;
      }
      break;
    case 2u:
    case 3u:
    case 4u:
      v5(v6, v4);
      break;
    default:
      break;
  }
LABEL_3:
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6]));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8));
}

uint64_t sub_10000C5F0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  id v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  _OWORD *v48;
  _OWORD *v49;

  v6 = type metadata accessor for URL(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  v11 = type metadata accessor for SettingsURLDestination.Action(0);
  switch(swift_getEnumCaseMultiPayload(v10, v11))
  {
    case 1u:
      v12 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
      switch(swift_getEnumCaseMultiPayload(v10, v12))
      {
        case 0u:
          v13 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(char *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v9, v10, v13);
          v14 = v9;
          v15 = v12;
          v16 = 0;
          goto LABEL_17;
        case 1u:
          v20 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(char *, _QWORD *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v9, v10, v20);
          v14 = v9;
          v15 = v12;
          v16 = 1;
          goto LABEL_17;
        case 2u:
          v21 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(char *, _QWORD *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v9, v10, v21);
          v22 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
          v23 = &v9[v22];
          v24 = (_QWORD *)((char *)v10 + v22);
          v25 = v24[1];
          *(_QWORD *)v23 = *v24;
          *((_QWORD *)v23 + 1) = v25;
          swift_bridgeObjectRetain(v25);
          v14 = v9;
          v15 = v12;
          v16 = 2;
          goto LABEL_17;
        case 3u:
          v26 = v10[1];
          *(_QWORD *)v9 = *v10;
          *((_QWORD *)v9 + 1) = v26;
          v27 = v10[3];
          *((_QWORD *)v9 + 2) = v10[2];
          *((_QWORD *)v9 + 3) = v27;
          v28 = v10[5];
          *((_QWORD *)v9 + 4) = v10[4];
          *((_QWORD *)v9 + 5) = v28;
          v29 = v10[6];
          v30 = v10[7];
          *((_QWORD *)v9 + 6) = v29;
          *((_QWORD *)v9 + 7) = v30;
          swift_bridgeObjectRetain(v26);
          swift_bridgeObjectRetain(v27);
          swift_bridgeObjectRetain(v28);
          swift_bridgeObjectRetain(v30);
          v14 = v9;
          v15 = v12;
          v16 = 3;
          goto LABEL_17;
        case 4u:
          v31 = v10[1];
          *(_QWORD *)v9 = *v10;
          *((_QWORD *)v9 + 1) = v31;
          v32 = v10[3];
          *((_QWORD *)v9 + 2) = v10[2];
          *((_QWORD *)v9 + 3) = v32;
          v33 = v10[5];
          *((_QWORD *)v9 + 4) = v10[4];
          *((_QWORD *)v9 + 5) = v33;
          *((_QWORD *)v9 + 6) = v10[6];
          swift_bridgeObjectRetain(v31);
          swift_bridgeObjectRetain(v32);
          swift_bridgeObjectRetain(v33);
          v14 = v9;
          v15 = v12;
          v16 = 4;
          goto LABEL_17;
        case 5u:
          v34 = v10[1];
          *(_QWORD *)v9 = *v10;
          *((_QWORD *)v9 + 1) = v34;
          v35 = v10[3];
          *((_QWORD *)v9 + 2) = v10[2];
          *((_QWORD *)v9 + 3) = v35;
          v37 = (void *)v10[4];
          v36 = v10[5];
          *((_QWORD *)v9 + 4) = v37;
          *((_QWORD *)v9 + 5) = v36;
          v48 = v10 + 6;
          v49 = v9 + 48;
          v38 = v10[9];
          swift_bridgeObjectRetain(v34);
          swift_bridgeObjectRetain(v35);
          v39 = v37;
          swift_bridgeObjectRetain(v36);
          if (v38)
          {
            *((_QWORD *)v9 + 9) = v38;
            (**(void (***)(_OWORD *, _OWORD *, uint64_t))(v38 - 8))(v49, v48, v38);
          }
          else
          {
            v40 = v48[1];
            *v49 = *v48;
            *((_OWORD *)v9 + 4) = v40;
          }
          v14 = v9;
          v15 = v12;
          v16 = 5;
LABEL_17:
          swift_storeEnumTagMultiPayload(v14, v15, v16);
          break;
        default:
          memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
          break;
      }
      v17 = v9;
      v18 = v11;
      v19 = 1;
      goto LABEL_19;
    case 2u:
      v7((uint64_t)v9, (uint64_t)v10, v6);
      v17 = v9;
      v18 = v11;
      v19 = 2;
      goto LABEL_19;
    case 3u:
      v7((uint64_t)v9, (uint64_t)v10, v6);
      v17 = v9;
      v18 = v11;
      v19 = 3;
      goto LABEL_19;
    case 4u:
      v7((uint64_t)v9, (uint64_t)v10, v6);
      v17 = v9;
      v18 = v11;
      v19 = 4;
LABEL_19:
      swift_storeEnumTagMultiPayload(v17, v18, v19);
      break;
    default:
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
      break;
  }
  v41 = a3[6];
  v42 = a3[7];
  v43 = *(_QWORD *)(a2 + v41);
  *(_QWORD *)(a1 + v41) = v43;
  v44 = (_QWORD *)(a1 + v42);
  v45 = (_QWORD *)(a2 + v42);
  v46 = v45[1];
  *v44 = *v45;
  v44[1] = v46;
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRetain(v46);
  return a1;
}

uint64_t sub_10000C974(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD *v49;
  _OWORD *v50;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24))(a1, a2, v6);
  if (a1 != a2)
  {
    v8 = a3[5];
    v9 = (char *)(a1 + v8);
    v10 = (_QWORD *)(a2 + v8);
    sub_1000076B4(a1 + v8, type metadata accessor for SettingsURLDestination.Action);
    v11 = type metadata accessor for SettingsURLDestination.Action(0);
    switch(swift_getEnumCaseMultiPayload(v10, v11))
    {
      case 1u:
        v12 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
        switch(swift_getEnumCaseMultiPayload(v10, v12))
        {
          case 0u:
            v13 = type metadata accessor for FLFollowUpInformation(0);
            (*(void (**)(char *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v9, v10, v13);
            v14 = v9;
            v15 = v12;
            v16 = 0;
            goto LABEL_18;
          case 1u:
            v20 = type metadata accessor for FLFollowUpInformation(0);
            (*(void (**)(char *, _QWORD *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v9, v10, v20);
            v14 = v9;
            v15 = v12;
            v16 = 1;
            goto LABEL_18;
          case 2u:
            v21 = type metadata accessor for FLFollowUpInformation(0);
            (*(void (**)(char *, _QWORD *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v9, v10, v21);
            v22 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
            v23 = &v9[v22];
            v24 = (_QWORD *)((char *)v10 + v22);
            *(_QWORD *)v23 = *v24;
            v25 = v24[1];
            *((_QWORD *)v23 + 1) = v25;
            swift_bridgeObjectRetain(v25);
            v14 = v9;
            v15 = v12;
            v16 = 2;
            goto LABEL_18;
          case 3u:
            *(_QWORD *)v9 = *v10;
            v26 = v10[1];
            *((_QWORD *)v9 + 1) = v26;
            *((_QWORD *)v9 + 2) = v10[2];
            v27 = v10[3];
            *((_QWORD *)v9 + 3) = v27;
            *((_QWORD *)v9 + 4) = v10[4];
            v28 = v10[5];
            *((_QWORD *)v9 + 5) = v28;
            *((_QWORD *)v9 + 6) = v10[6];
            v29 = v10[7];
            *((_QWORD *)v9 + 7) = v29;
            swift_bridgeObjectRetain(v26);
            swift_bridgeObjectRetain(v27);
            swift_bridgeObjectRetain(v28);
            swift_bridgeObjectRetain(v29);
            v14 = v9;
            v15 = v12;
            v16 = 3;
            goto LABEL_18;
          case 4u:
            *(_QWORD *)v9 = *v10;
            v30 = v10[1];
            *((_QWORD *)v9 + 1) = v30;
            *((_QWORD *)v9 + 2) = v10[2];
            v31 = v10[3];
            *((_QWORD *)v9 + 3) = v31;
            *((_QWORD *)v9 + 4) = v10[4];
            v32 = v10[5];
            *((_QWORD *)v9 + 5) = v32;
            *((_QWORD *)v9 + 6) = v10[6];
            swift_bridgeObjectRetain(v30);
            swift_bridgeObjectRetain(v31);
            swift_bridgeObjectRetain(v32);
            v14 = v9;
            v15 = v12;
            v16 = 4;
            goto LABEL_18;
          case 5u:
            *(_QWORD *)v9 = *v10;
            v33 = v10[1];
            *((_QWORD *)v9 + 1) = v33;
            *((_QWORD *)v9 + 2) = v10[2];
            v34 = v10[3];
            *((_QWORD *)v9 + 3) = v34;
            v35 = (void *)v10[4];
            *((_QWORD *)v9 + 4) = v35;
            v36 = v10[5];
            *((_QWORD *)v9 + 5) = v36;
            v49 = v10 + 6;
            v50 = v9 + 48;
            v37 = v10[9];
            swift_bridgeObjectRetain(v33);
            swift_bridgeObjectRetain(v34);
            v38 = v35;
            swift_bridgeObjectRetain(v36);
            if (v37)
            {
              *((_QWORD *)v9 + 9) = v37;
              (**(void (***)(_OWORD *, _OWORD *, uint64_t))(v37 - 8))(v50, v49, v37);
            }
            else
            {
              v39 = v49[1];
              *v50 = *v49;
              *((_OWORD *)v9 + 4) = v39;
            }
            v14 = v9;
            v15 = v12;
            v16 = 5;
LABEL_18:
            swift_storeEnumTagMultiPayload(v14, v15, v16);
            break;
          default:
            memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
            break;
        }
        v17 = v9;
        v18 = v11;
        v19 = 1;
        goto LABEL_20;
      case 2u:
        (*(void (**)(char *, _QWORD *, uint64_t))(v7 + 16))(v9, v10, v6);
        v17 = v9;
        v18 = v11;
        v19 = 2;
        goto LABEL_20;
      case 3u:
        (*(void (**)(char *, _QWORD *, uint64_t))(v7 + 16))(v9, v10, v6);
        v17 = v9;
        v18 = v11;
        v19 = 3;
        goto LABEL_20;
      case 4u:
        (*(void (**)(char *, _QWORD *, uint64_t))(v7 + 16))(v9, v10, v6);
        v17 = v9;
        v18 = v11;
        v19 = 4;
LABEL_20:
        swift_storeEnumTagMultiPayload(v17, v18, v19);
        break;
      default:
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
        break;
    }
  }
  v40 = a3[6];
  v41 = *(_QWORD *)(a2 + v40);
  v42 = *(_QWORD *)(a1 + v40);
  *(_QWORD *)(a1 + v40) = v41;
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRelease(v42);
  v43 = a3[7];
  v44 = (_QWORD *)(a1 + v43);
  v45 = (_QWORD *)(a2 + v43);
  *v44 = *v45;
  v46 = v45[1];
  v47 = v44[1];
  v44[1] = v46;
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRelease(v47);
  return a1;
}

uint64_t sub_10000CD94(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int EnumCaseMultiPayload;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for URL(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = type metadata accessor for SettingsURLDestination.Action(0);
  switch(swift_getEnumCaseMultiPayload(v10, v11))
  {
    case 1u:
      v12 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v10, v12);
      if (EnumCaseMultiPayload == 2)
      {
        v18 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v9, v10, v18);
        v19 = sub_100004FC8(&qword_10015C420);
        *(_OWORD *)&v9[*(int *)(v19 + 48)] = *(_OWORD *)&v10[*(int *)(v19 + 48)];
        swift_storeEnumTagMultiPayload(v9, v12, 2);
      }
      else if (EnumCaseMultiPayload == 1)
      {
        v20 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v9, v10, v20);
        swift_storeEnumTagMultiPayload(v9, v12, 1);
      }
      else if (EnumCaseMultiPayload)
      {
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      }
      else
      {
        v14 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v9, v10, v14);
        swift_storeEnumTagMultiPayload(v9, v12, 0);
      }
      v15 = v9;
      v16 = v11;
      v17 = 1;
      goto LABEL_14;
    case 2u:
      v7((uint64_t)v9, (uint64_t)v10, v6);
      v15 = v9;
      v16 = v11;
      v17 = 2;
      goto LABEL_14;
    case 3u:
      v7((uint64_t)v9, (uint64_t)v10, v6);
      v15 = v9;
      v16 = v11;
      v17 = 3;
      goto LABEL_14;
    case 4u:
      v7((uint64_t)v9, (uint64_t)v10, v6);
      v15 = v9;
      v16 = v11;
      v17 = 4;
LABEL_14:
      swift_storeEnumTagMultiPayload(v15, v16, v17);
      break;
    default:
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
      break;
  }
  v21 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_OWORD *)(a1 + v21) = *(_OWORD *)(a2 + v21);
  return a1;
}

uint64_t sub_10000CFD0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int EnumCaseMultiPayload;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40))(a1, a2, v6);
  if (a1 != a2)
  {
    v8 = a3[5];
    v9 = (char *)(a1 + v8);
    v10 = (char *)(a2 + v8);
    sub_1000076B4(a1 + v8, type metadata accessor for SettingsURLDestination.Action);
    v11 = type metadata accessor for SettingsURLDestination.Action(0);
    switch(swift_getEnumCaseMultiPayload(v10, v11))
    {
      case 1u:
        v12 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v10, v12);
        if (EnumCaseMultiPayload == 2)
        {
          v18 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v9, v10, v18);
          v19 = sub_100004FC8(&qword_10015C420);
          *(_OWORD *)&v9[*(int *)(v19 + 48)] = *(_OWORD *)&v10[*(int *)(v19 + 48)];
          swift_storeEnumTagMultiPayload(v9, v12, 2);
        }
        else if (EnumCaseMultiPayload == 1)
        {
          v20 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v9, v10, v20);
          swift_storeEnumTagMultiPayload(v9, v12, 1);
        }
        else if (EnumCaseMultiPayload)
        {
          memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
        }
        else
        {
          v14 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v9, v10, v14);
          swift_storeEnumTagMultiPayload(v9, v12, 0);
        }
        v15 = v9;
        v16 = v11;
        v17 = 1;
        goto LABEL_15;
      case 2u:
        (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v10, v6);
        v15 = v9;
        v16 = v11;
        v17 = 2;
        goto LABEL_15;
      case 3u:
        (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v10, v6);
        v15 = v9;
        v16 = v11;
        v17 = 3;
        goto LABEL_15;
      case 4u:
        (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v10, v6);
        v15 = v9;
        v16 = v11;
        v17 = 4;
LABEL_15:
        swift_storeEnumTagMultiPayload(v15, v16, v17);
        break;
      default:
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
        break;
    }
  }
  v21 = a3[6];
  v22 = *(_QWORD *)(a1 + v21);
  *(_QWORD *)(a1 + v21) = *(_QWORD *)(a2 + v21);
  swift_bridgeObjectRelease(v22);
  v23 = a3[7];
  v24 = (_QWORD *)(a1 + v23);
  v25 = (uint64_t *)(a2 + v23);
  v27 = *v25;
  v26 = v25[1];
  v28 = v24[1];
  *v24 = v27;
  v24[1] = v26;
  swift_bridgeObjectRelease(v28);
  return a1;
}

uint64_t sub_10000D24C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10000D258);
}

uint64_t sub_10000D258(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for SettingsURLDestination.Action(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_10000D300(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10000D30C);
}

uint64_t sub_10000D30C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for SettingsURLDestination.Action(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for SettingsURLDestination(uint64_t a1)
{
  return sub_10000D3C4(a1, qword_100157258, (uint64_t)&nominal type descriptor for SettingsURLDestination);
}

uint64_t sub_10000D3C4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

uint64_t sub_10000D3F8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[4];

  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for SettingsURLDestination.Action(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      v5[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v5[3] = &unk_1001143B8;
      swift_initStructMetadata(a1, 256, 4, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

_QWORD *sub_10000D494(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  _OWORD *v36;
  uint64_t v37;
  id v38;
  __int128 v39;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v13 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v13);
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 1u:
        v8 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
        switch(swift_getEnumCaseMultiPayload(a2, v8))
        {
          case 0u:
            v9 = type metadata accessor for FLFollowUpInformation(0);
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
            v10 = a1;
            v11 = v8;
            v12 = 0;
            goto LABEL_20;
          case 1u:
            v18 = type metadata accessor for FLFollowUpInformation(0);
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(a1, a2, v18);
            v10 = a1;
            v11 = v8;
            v12 = 1;
            goto LABEL_20;
          case 2u:
            v19 = type metadata accessor for FLFollowUpInformation(0);
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(a1, a2, v19);
            v20 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
            v21 = (_QWORD *)((char *)a1 + v20);
            v22 = (_QWORD *)((char *)a2 + v20);
            v23 = v22[1];
            *v21 = *v22;
            v21[1] = v23;
            swift_bridgeObjectRetain(v23);
            v10 = a1;
            v11 = v8;
            v12 = 2;
            goto LABEL_20;
          case 3u:
            v24 = a2[1];
            *a1 = *a2;
            a1[1] = v24;
            v25 = a2[3];
            a1[2] = a2[2];
            a1[3] = v25;
            v26 = a2[5];
            a1[4] = a2[4];
            a1[5] = v26;
            v27 = a2[6];
            v28 = a2[7];
            a1[6] = v27;
            a1[7] = v28;
            swift_bridgeObjectRetain(v24);
            swift_bridgeObjectRetain(v25);
            swift_bridgeObjectRetain(v26);
            swift_bridgeObjectRetain(v28);
            v10 = a1;
            v11 = v8;
            v12 = 3;
            goto LABEL_20;
          case 4u:
            v29 = a2[1];
            *a1 = *a2;
            a1[1] = v29;
            v30 = a2[3];
            a1[2] = a2[2];
            a1[3] = v30;
            v31 = a2[5];
            a1[4] = a2[4];
            a1[5] = v31;
            a1[6] = a2[6];
            swift_bridgeObjectRetain(v29);
            swift_bridgeObjectRetain(v30);
            swift_bridgeObjectRetain(v31);
            v10 = a1;
            v11 = v8;
            v12 = 4;
            goto LABEL_20;
          case 5u:
            v32 = a2[1];
            *a1 = *a2;
            a1[1] = v32;
            v33 = a2[3];
            a1[2] = a2[2];
            a1[3] = v33;
            v35 = (void *)a2[4];
            v34 = a2[5];
            a1[4] = v35;
            a1[5] = v34;
            v36 = a2 + 6;
            v37 = a2[9];
            swift_bridgeObjectRetain(v32);
            swift_bridgeObjectRetain(v33);
            v38 = v35;
            swift_bridgeObjectRetain(v34);
            if (v37)
            {
              a1[9] = v37;
              (**(void (***)(uint64_t, _OWORD *, uint64_t))(v37 - 8))((uint64_t)(a1 + 6), v36, v37);
            }
            else
            {
              v39 = v36[1];
              *((_OWORD *)a1 + 3) = *v36;
              *((_OWORD *)a1 + 4) = v39;
            }
            v10 = a1;
            v11 = v8;
            v12 = 5;
LABEL_20:
            swift_storeEnumTagMultiPayload(v10, v11, v12);
            break;
          default:
            memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
            break;
        }
        swift_storeEnumTagMultiPayload(a1, a3, 1);
        break;
      case 2u:
        v15 = type metadata accessor for URL(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(a1, a2, v15);
        swift_storeEnumTagMultiPayload(a1, a3, 2);
        break;
      case 3u:
        v16 = type metadata accessor for URL(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(a1, a2, v16);
        swift_storeEnumTagMultiPayload(a1, a3, 3);
        break;
      case 4u:
        v17 = type metadata accessor for URL(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(a1, a2, v17);
        swift_storeEnumTagMultiPayload(a1, a3, 4);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_10000D808(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((int)result)
  {
    case 1:
      v5 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
      result = swift_getEnumCaseMultiPayload(a1, v5);
      switch((int)result)
      {
        case 0:
        case 1:
          v4 = type metadata accessor for FLFollowUpInformation(0);
          goto LABEL_3;
        case 2:
          v6 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
          v7 = *(_QWORD *)(a1 + *(int *)(sub_100004FC8(&qword_10015C420) + 48) + 8);
          goto LABEL_9;
        case 3:
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
          v7 = *(_QWORD *)(a1 + 56);
          goto LABEL_9;
        case 4:
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
          v7 = *(_QWORD *)(a1 + 40);
LABEL_9:
          result = swift_bridgeObjectRelease(v7);
          break;
        case 5:
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));

          result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
          if (*(_QWORD *)(a1 + 72))
            result = sub_100005474((_QWORD *)(a1 + 48));
          break;
        default:
          return result;
      }
      break;
    case 2:
    case 3:
    case 4:
      v4 = type metadata accessor for URL(0);
LABEL_3:
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
      break;
    default:
      return result;
  }
  return result;
}

_QWORD *sub_10000D964(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  _OWORD *v35;
  uint64_t v36;
  id v37;
  __int128 v38;

  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 1u:
      v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
      switch(swift_getEnumCaseMultiPayload(a2, v6))
      {
        case 0u:
          v7 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
          v8 = a1;
          v9 = v6;
          v10 = 0;
          goto LABEL_17;
        case 1u:
          v17 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(a1, a2, v17);
          v8 = a1;
          v9 = v6;
          v10 = 1;
          goto LABEL_17;
        case 2u:
          v18 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(a1, a2, v18);
          v19 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
          v20 = (_QWORD *)((char *)a1 + v19);
          v21 = (_QWORD *)((char *)a2 + v19);
          v22 = v21[1];
          *v20 = *v21;
          v20[1] = v22;
          swift_bridgeObjectRetain(v22);
          v8 = a1;
          v9 = v6;
          v10 = 2;
          goto LABEL_17;
        case 3u:
          v23 = a2[1];
          *a1 = *a2;
          a1[1] = v23;
          v24 = a2[3];
          a1[2] = a2[2];
          a1[3] = v24;
          v25 = a2[5];
          a1[4] = a2[4];
          a1[5] = v25;
          v26 = a2[6];
          v27 = a2[7];
          a1[6] = v26;
          a1[7] = v27;
          swift_bridgeObjectRetain(v23);
          swift_bridgeObjectRetain(v24);
          swift_bridgeObjectRetain(v25);
          swift_bridgeObjectRetain(v27);
          v8 = a1;
          v9 = v6;
          v10 = 3;
          goto LABEL_17;
        case 4u:
          v28 = a2[1];
          *a1 = *a2;
          a1[1] = v28;
          v29 = a2[3];
          a1[2] = a2[2];
          a1[3] = v29;
          v30 = a2[5];
          a1[4] = a2[4];
          a1[5] = v30;
          a1[6] = a2[6];
          swift_bridgeObjectRetain(v28);
          swift_bridgeObjectRetain(v29);
          swift_bridgeObjectRetain(v30);
          v8 = a1;
          v9 = v6;
          v10 = 4;
          goto LABEL_17;
        case 5u:
          v31 = a2[1];
          *a1 = *a2;
          a1[1] = v31;
          v32 = a2[3];
          a1[2] = a2[2];
          a1[3] = v32;
          v34 = (void *)a2[4];
          v33 = a2[5];
          a1[4] = v34;
          a1[5] = v33;
          v35 = a2 + 6;
          v36 = a2[9];
          swift_bridgeObjectRetain(v31);
          swift_bridgeObjectRetain(v32);
          v37 = v34;
          swift_bridgeObjectRetain(v33);
          if (v36)
          {
            a1[9] = v36;
            (**(void (***)(uint64_t, _OWORD *, uint64_t))(v36 - 8))((uint64_t)(a1 + 6), v35, v36);
          }
          else
          {
            v38 = v35[1];
            *((_OWORD *)a1 + 3) = *v35;
            *((_OWORD *)a1 + 4) = v38;
          }
          v8 = a1;
          v9 = v6;
          v10 = 5;
LABEL_17:
          swift_storeEnumTagMultiPayload(v8, v9, v10);
          break;
        default:
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
          break;
      }
      v12 = a1;
      v13 = a3;
      v14 = 1;
      goto LABEL_19;
    case 2u:
      v11 = type metadata accessor for URL(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      v12 = a1;
      v13 = a3;
      v14 = 2;
      goto LABEL_19;
    case 3u:
      v15 = type metadata accessor for URL(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(a1, a2, v15);
      v12 = a1;
      v13 = a3;
      v14 = 3;
      goto LABEL_19;
    case 4u:
      v16 = type metadata accessor for URL(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(a1, a2, v16);
      v12 = a1;
      v13 = a3;
      v14 = 4;
LABEL_19:
      swift_storeEnumTagMultiPayload(v12, v13, v14);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_QWORD *sub_10000DCA4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  _OWORD *v34;
  uint64_t v35;
  id v36;
  __int128 v37;

  if (a1 != a2)
  {
    sub_1000076B4((uint64_t)a1, type metadata accessor for SettingsURLDestination.Action);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 1u:
        v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
        switch(swift_getEnumCaseMultiPayload(a2, v6))
        {
          case 0u:
            v7 = type metadata accessor for FLFollowUpInformation(0);
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
            v8 = a1;
            v9 = v6;
            v10 = 0;
            goto LABEL_18;
          case 1u:
            v17 = type metadata accessor for FLFollowUpInformation(0);
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(a1, a2, v17);
            v8 = a1;
            v9 = v6;
            v10 = 1;
            goto LABEL_18;
          case 2u:
            v18 = type metadata accessor for FLFollowUpInformation(0);
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(a1, a2, v18);
            v19 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
            v20 = (_QWORD *)((char *)a1 + v19);
            v21 = (_QWORD *)((char *)a2 + v19);
            *v20 = *v21;
            v22 = v21[1];
            v20[1] = v22;
            swift_bridgeObjectRetain(v22);
            v8 = a1;
            v9 = v6;
            v10 = 2;
            goto LABEL_18;
          case 3u:
            *a1 = *a2;
            v23 = a2[1];
            a1[1] = v23;
            a1[2] = a2[2];
            v24 = a2[3];
            a1[3] = v24;
            a1[4] = a2[4];
            v25 = a2[5];
            a1[5] = v25;
            a1[6] = a2[6];
            v26 = a2[7];
            a1[7] = v26;
            swift_bridgeObjectRetain(v23);
            swift_bridgeObjectRetain(v24);
            swift_bridgeObjectRetain(v25);
            swift_bridgeObjectRetain(v26);
            v8 = a1;
            v9 = v6;
            v10 = 3;
            goto LABEL_18;
          case 4u:
            *a1 = *a2;
            v27 = a2[1];
            a1[1] = v27;
            a1[2] = a2[2];
            v28 = a2[3];
            a1[3] = v28;
            a1[4] = a2[4];
            v29 = a2[5];
            a1[5] = v29;
            a1[6] = a2[6];
            swift_bridgeObjectRetain(v27);
            swift_bridgeObjectRetain(v28);
            swift_bridgeObjectRetain(v29);
            v8 = a1;
            v9 = v6;
            v10 = 4;
            goto LABEL_18;
          case 5u:
            *a1 = *a2;
            v30 = a2[1];
            a1[1] = v30;
            a1[2] = a2[2];
            v31 = a2[3];
            a1[3] = v31;
            v32 = (void *)a2[4];
            a1[4] = v32;
            v33 = a2[5];
            a1[5] = v33;
            v34 = a2 + 6;
            v35 = a2[9];
            swift_bridgeObjectRetain(v30);
            swift_bridgeObjectRetain(v31);
            v36 = v32;
            swift_bridgeObjectRetain(v33);
            if (v35)
            {
              a1[9] = v35;
              (**(void (***)(uint64_t, _OWORD *, uint64_t))(v35 - 8))((uint64_t)(a1 + 6), v34, v35);
            }
            else
            {
              v37 = v34[1];
              *((_OWORD *)a1 + 3) = *v34;
              *((_OWORD *)a1 + 4) = v37;
            }
            v8 = a1;
            v9 = v6;
            v10 = 5;
LABEL_18:
            swift_storeEnumTagMultiPayload(v8, v9, v10);
            break;
          default:
            memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
            break;
        }
        v12 = a1;
        v13 = a3;
        v14 = 1;
        goto LABEL_20;
      case 2u:
        v11 = type metadata accessor for URL(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
        v12 = a1;
        v13 = a3;
        v14 = 2;
        goto LABEL_20;
      case 3u:
        v15 = type metadata accessor for URL(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(a1, a2, v15);
        v12 = a1;
        v13 = a3;
        v14 = 3;
        goto LABEL_20;
      case 4u:
        v16 = type metadata accessor for URL(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(a1, a2, v16);
        v12 = a1;
        v13 = a3;
        v14 = 4;
LABEL_20:
        swift_storeEnumTagMultiPayload(v12, v13, v14);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

char *sub_10000E054(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 1u:
      v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
      if (EnumCaseMultiPayload == 2)
      {
        v15 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(a1, a2, v15);
        v16 = sub_100004FC8(&qword_10015C420);
        *(_OWORD *)&a1[*(int *)(v16 + 48)] = *(_OWORD *)&a2[*(int *)(v16 + 48)];
        swift_storeEnumTagMultiPayload(a1, v6, 2);
      }
      else if (EnumCaseMultiPayload == 1)
      {
        v17 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(a1, a2, v17);
        swift_storeEnumTagMultiPayload(a1, v6, 1);
      }
      else if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      }
      else
      {
        v8 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
        swift_storeEnumTagMultiPayload(a1, v6, 0);
      }
      v10 = a1;
      v11 = a3;
      v12 = 1;
      goto LABEL_14;
    case 2u:
      v9 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      v10 = a1;
      v11 = a3;
      v12 = 2;
      goto LABEL_14;
    case 3u:
      v13 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(a1, a2, v13);
      v10 = a1;
      v11 = a3;
      v12 = 3;
      goto LABEL_14;
    case 4u:
      v14 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a1, a2, v14);
      v10 = a1;
      v11 = a3;
      v12 = 4;
LABEL_14:
      swift_storeEnumTagMultiPayload(v10, v11, v12);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

char *sub_10000E260(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 != a2)
  {
    sub_1000076B4((uint64_t)a1, type metadata accessor for SettingsURLDestination.Action);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 1u:
        v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
        if (EnumCaseMultiPayload == 2)
        {
          v15 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(a1, a2, v15);
          v16 = sub_100004FC8(&qword_10015C420);
          *(_OWORD *)&a1[*(int *)(v16 + 48)] = *(_OWORD *)&a2[*(int *)(v16 + 48)];
          swift_storeEnumTagMultiPayload(a1, v6, 2);
        }
        else if (EnumCaseMultiPayload == 1)
        {
          v17 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(a1, a2, v17);
          swift_storeEnumTagMultiPayload(a1, v6, 1);
        }
        else if (EnumCaseMultiPayload)
        {
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
        }
        else
        {
          v8 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
          swift_storeEnumTagMultiPayload(a1, v6, 0);
        }
        v10 = a1;
        v11 = a3;
        v12 = 1;
        goto LABEL_15;
      case 2u:
        v9 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
        v10 = a1;
        v11 = a3;
        v12 = 2;
        goto LABEL_15;
      case 3u:
        v13 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(a1, a2, v13);
        v10 = a1;
        v11 = a3;
        v12 = 3;
        goto LABEL_15;
      case 4u:
        v14 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a1, a2, v14);
        v10 = a1;
        v11 = a3;
        v12 = 4;
LABEL_15:
        swift_storeEnumTagMultiPayload(v10, v11, v12);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_10000E484(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t sub_10000E490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_10000E4A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t sub_10000E4B0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[2];
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[0] = &unk_1001143D8;
  result = type metadata accessor for PrimarySettingsListItemIdentifier(319);
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for URL(319);
    if (v4 <= 0x3F)
    {
      v6 = *(_QWORD *)(result - 8) + 64;
      v7 = v6;
      v8 = v6;
      swift_initEnumMetadataMultiPayload(a1, 256, 5, v5);
      return 0;
    }
  }
  return result;
}

unint64_t sub_10000E540()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  void *object;
  Swift::String v7;
  uint64_t v8;
  Swift::String v9;
  void *v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t *v22;
  void *v23;
  uint64_t v24;
  Swift::String v25;
  Swift::String v26;
  unint64_t v27;
  unint64_t v28;
  Swift::String v29;

  v1 = v0;
  v2 = 0xE000000000000000;
  _StringGuts.grow(_:)(50);
  swift_bridgeObjectRelease(0xE000000000000000);
  v3 = type metadata accessor for URL(0);
  v4 = sub_100007828((unint64_t *)&qword_10015C650, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v3, v4);
  object = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(object);
  v7._countAndFlagsBits = 0x6F69746361202C27;
  v7._object = (void *)0xEC00000027203A6ELL;
  String.append(_:)(v7);
  v8 = type metadata accessor for SettingsURLDestination(0);
  sub_10000EE4C();
  v10 = v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(v10);
  v11._object = (void *)0x800000010011FDA0;
  v11._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v11);
  v12 = *(_QWORD *)(v0 + *(int *)(v8 + 24));
  v13 = swift_bridgeObjectRetain(v12);
  v14 = sub_10000E7A8(v13);
  swift_bridgeObjectRelease(v12);
  v15 = sub_100004FC8(&qword_100157350);
  v16 = sub_10000F228();
  v17 = BidirectionalCollection<>.joined(separator:)(44, 0xE100000000000000, v15, v16);
  v19 = v18;
  swift_bridgeObjectRelease(v14);
  v20._countAndFlagsBits = v17;
  v20._object = v19;
  String.append(_:)(v20);
  swift_bridgeObjectRelease(v19);
  v21._countAndFlagsBits = 93;
  v21._object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  v22 = (uint64_t *)(v1 + *(int *)(v8 + 28));
  v23 = (void *)v22[1];
  if (v23)
  {
    v24 = *v22;
    _StringGuts.grow(_:)(19);
    swift_bridgeObjectRelease(0xE000000000000000);
    swift_bridgeObjectRetain(v23);
    v25._countAndFlagsBits = v24;
    v25._object = v23;
    String.append(_:)(v25);
    swift_bridgeObjectRelease(v23);
    v26._countAndFlagsBits = 39;
    v26._object = (void *)0xE100000000000000;
    String.append(_:)(v26);
    v27 = 0xD000000000000010;
    v2 = 0x800000010011FDC0;
  }
  else
  {
    v27 = 0;
  }
  v28 = v2;
  String.append(_:)(*(Swift::String *)&v27);
  swift_bridgeObjectRelease(v2);
  v29._countAndFlagsBits = 125;
  v29._object = (void *)0xE100000000000000;
  String.append(_:)(v29);
  return 0xD000000000000020;
}

_QWORD *sub_10000E7A8(uint64_t a1)
{
  int64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_10000F2A0(0, v1, 0);
    v3 = *(_QWORD *)(type metadata accessor for URLQueryItem(0) - 8);
    v4 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v5 = *(_QWORD *)(v3 + 72);
    do
    {
      v6 = URLQueryItem.description.getter();
      v8 = v7;
      v10 = _swiftEmptyArrayStorage[2];
      v9 = _swiftEmptyArrayStorage[3];
      if (v10 >= v9 >> 1)
        sub_10000F2A0(v9 > 1, v10 + 1, 1);
      _swiftEmptyArrayStorage[2] = v10 + 1;
      v11 = (char *)&_swiftEmptyArrayStorage[2 * v10];
      *((_QWORD *)v11 + 4) = v6;
      *((_QWORD *)v11 + 5) = v8;
      v4 += v5;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

Swift::Int sub_10000E8AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::UInt v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[9];

  Hasher.init(_seed:)(v12, 0);
  v1 = type metadata accessor for URL(0);
  v2 = sub_100007828((unint64_t *)&unk_10015BAD0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  dispatch thunk of Hashable.hash(into:)(v12, v1, v2);
  v3 = type metadata accessor for SettingsURLDestination(0);
  sub_10000E9C4();
  v4 = *(_QWORD *)(v0 + *(int *)(v3 + 24));
  v5 = *(_QWORD *)(v4 + 16);
  Hasher._combine(_:)(v5);
  if (v5)
  {
    v6 = type metadata accessor for URLQueryItem(0);
    v7 = *(_QWORD *)(v6 - 8);
    v8 = v4 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v9 = *(_QWORD *)(v7 + 72);
    v10 = sub_100007828(&qword_100157378, (uint64_t (*)(uint64_t))&type metadata accessor for URLQueryItem, (uint64_t)&protocol conformance descriptor for URLQueryItem);
    do
    {
      dispatch thunk of Hashable.hash(into:)(v12, v6, v10);
      v8 += v9;
      --v5;
    }
    while (v5);
  }
  return Hasher._finalize()();
}

void sub_10000E9C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t (*v6)(_QWORD);
  char *v7;
  uint64_t v8;

  v1 = type metadata accessor for URL(0);
  __chkstk_darwin(v1);
  v2 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  __chkstk_darwin(v2);
  v3 = type metadata accessor for SettingsURLDestination.Action(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000076F0(v0, (uint64_t)v5, v6);
  v7 = (char *)sub_10000EAC4 + 4 * byte_100114380[swift_getEnumCaseMultiPayload(v5, v3)];
  __asm { BR              X10 }
}

void sub_10000EAC4()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher._combine(_:)(1uLL);
  Hasher._combine(_:)(v1);
}

void sub_10000EBCC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::UInt v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = type metadata accessor for URL(0);
  v6 = sub_100007828((unint64_t *)&unk_10015BAD0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  dispatch thunk of Hashable.hash(into:)(a1, v5, v6);
  sub_10000E9C4();
  v7 = *(_QWORD *)(v2 + *(int *)(a2 + 24));
  v8 = *(_QWORD *)(v7 + 16);
  Hasher._combine(_:)(v8);
  if (v8)
  {
    v9 = type metadata accessor for URLQueryItem(0);
    v10 = *(_QWORD *)(v9 - 8);
    v11 = v7 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v12 = *(_QWORD *)(v10 + 72);
    v13 = sub_100007828(&qword_100157378, (uint64_t (*)(uint64_t))&type metadata accessor for URLQueryItem, (uint64_t)&protocol conformance descriptor for URLQueryItem);
    do
    {
      dispatch thunk of Hashable.hash(into:)(a1, v9, v13);
      v11 += v12;
      --v8;
    }
    while (v8);
  }
}

Swift::Int sub_10000ECC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[9];

  Hasher.init(_seed:)(v14, a1);
  v4 = type metadata accessor for URL(0);
  v5 = sub_100007828((unint64_t *)&unk_10015BAD0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  dispatch thunk of Hashable.hash(into:)(v14, v4, v5);
  sub_10000E9C4();
  v6 = *(_QWORD *)(v2 + *(int *)(a2 + 24));
  v7 = *(_QWORD *)(v6 + 16);
  Hasher._combine(_:)(v7);
  if (v7)
  {
    v8 = type metadata accessor for URLQueryItem(0);
    v9 = *(_QWORD *)(v8 - 8);
    v10 = v6 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v11 = *(_QWORD *)(v9 + 72);
    v12 = sub_100007828(&qword_100157378, (uint64_t (*)(uint64_t))&type metadata accessor for URLQueryItem, (uint64_t)&protocol conformance descriptor for URLQueryItem);
    do
    {
      dispatch thunk of Hashable.hash(into:)(v14, v8, v12);
      v10 += v11;
      --v7;
    }
    while (v7);
  }
  return Hasher._finalize()();
}

Swift::Int sub_10000EDD0()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  sub_10000E9C4();
  return Hasher._finalize()();
}

Swift::Int sub_10000EE10(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  sub_10000E9C4();
  return Hasher._finalize()();
}

void sub_10000EE4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t (*v6)(_QWORD);
  char *v7;
  uint64_t v8;

  v1 = type metadata accessor for URL(0);
  __chkstk_darwin(v1);
  v2 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  __chkstk_darwin(v2);
  v3 = type metadata accessor for SettingsURLDestination.Action(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000076F0(v0, (uint64_t)v5, v6);
  v7 = (char *)sub_10000EF54 + 4 * byte_100114386[swift_getEnumCaseMultiPayload(v5, v3)];
  __asm { BR              X10 }
}

uint64_t sub_10000EF54()
{
  unsigned __int8 *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(v1 - 80) = 0;
  *(_QWORD *)(v1 - 72) = 0xE000000000000000;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease(*(_QWORD *)(v1 - 72));
  strcpy((char *)(v1 - 80), "Presentation: ");
  *(_BYTE *)(v1 - 65) = -18;
  return ((uint64_t (*)(unint64_t))((char *)sub_10000EFCC + 4 * byte_10011438C[v2]))(0xD000000000000016);
}

uint64_t sub_10000EFCC()
{
  uint64_t v0;
  Swift::String v1;

  v1._countAndFlagsBits = 0xD000000000000010;
  v1._object = (void *)0x800000010011FEE0;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(0x800000010011FEE0);
  return *(_QWORD *)(v0 - 80);
}

uint64_t sub_10000F1D0()
{
  return sub_100007828(&qword_100157340, type metadata accessor for SettingsURLDestination.Action, (uint64_t)&unk_100114418);
}

uint64_t sub_10000F1FC()
{
  return sub_100007828(&qword_100157348, type metadata accessor for SettingsURLDestination, (uint64_t)&unk_1001144C0);
}

unint64_t sub_10000F228()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100157358;
  if (!qword_100157358)
  {
    v1 = sub_100005430(&qword_100157350);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100157358);
  }
  return result;
}

uint64_t sub_10000F274(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10000F4F8(a1, a2, a3, (_QWORD *)*v3, &qword_100157390, (uint64_t (*)(_QWORD))&type metadata accessor for URLQueryItem);
  *v3 = result;
  return result;
}

uint64_t sub_10000F2A0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10000F320(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10000F2BC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10000F4F8(a1, a2, a3, (_QWORD *)*v3, &qword_100157398, type metadata accessor for SearchResultSection);
  *v3 = result;
  return result;
}

uint64_t sub_10000F2E8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10000F6D8(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10000F304(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10000F858(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_10000F320(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100004FC8(&qword_100157360);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10000F48C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000F4D0(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_10000F4F8(a1, a2, a3, a4, &qword_100157398, type metadata accessor for SearchResultSection);
}

uint64_t sub_10000F4E4(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_10000F4F8(a1, a2, a3, a4, &qword_1001573A0, type metadata accessor for SearchResult);
}

uint64_t sub_10000F4F8(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_100004FC8(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
    goto LABEL_34;
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = *(_QWORD *)(a6(0) - 8);
  v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  v23 = (char *)v18 + v22;
  v24 = (char *)a4 + v22;
  if ((a1 & 1) != 0)
  {
    if (v18 < a4 || v23 >= &v24[*(_QWORD *)(v21 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v23, v24);
    }
    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v23, v24);
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v25 = *(_QWORD *)(v21 + 72) * v11;
  v26 = &v23[v25];
  v27 = (unint64_t)&v24[v25];
  if (v24 >= v26 || (unint64_t)v23 >= v27)
  {
    swift_arrayInitWithCopy(v23);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v18;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10000F6D8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100004FC8(&qword_100157388);
    v11 = (char *)swift_allocObject(v10, 80 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 80);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[80 * v8])
      memmove(v13, v14, 80 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[80 * v8] || v13 >= &v14[80 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10000F858(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100004FC8((uint64_t *)&unk_10015CA20);
    v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v13 = (unint64_t)(v11 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 40 * v8)
      memmove(v11 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v14 >= v13 + 40 * v8 || v13 >= v14 + 40 * v8)
  {
    sub_100004FC8(&qword_100157368);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

void sub_10000F9F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  _QWORD v20[6];
  uint64_t v21;
  uint64_t v22;

  v21 = a1;
  v22 = a2;
  v2 = type metadata accessor for URL(0);
  v20[4] = *(_QWORD *)(v2 - 8);
  v20[5] = v2;
  v3 = __chkstk_darwin(v2);
  v20[3] = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v20[2] = (char *)v20 - v6;
  __chkstk_darwin(v5);
  v20[1] = (char *)v20 - v7;
  v8 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  __chkstk_darwin(v8);
  v9 = type metadata accessor for SettingsURLDestination.Action(0);
  v10 = __chkstk_darwin(v9);
  v11 = __chkstk_darwin(v10);
  v12 = __chkstk_darwin(v11);
  v13 = __chkstk_darwin(v12);
  __chkstk_darwin(v13);
  v14 = sub_100004FC8(&qword_100157370);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (uint64_t)&v17[*(int *)(v15 + 48)];
  sub_1000076F0(v21, (uint64_t)v17, type metadata accessor for SettingsURLDestination.Action);
  sub_1000076F0(v22, v18, type metadata accessor for SettingsURLDestination.Action);
  v19 = (char *)sub_10000FC04 + 4 * byte_100114393[swift_getEnumCaseMultiPayload(v17, v9)];
  __asm { BR              X10 }
}

BOOL sub_10000FC04()
{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  BOOL v4;

  sub_1000076F0(v0, (uint64_t)v3, type metadata accessor for SettingsURLDestination.Action);
  if (swift_getEnumCaseMultiPayload(v2, v1))
  {
    sub_100010098(v0);
    return 0;
  }
  else
  {
    v4 = *v3 == *v2;
    sub_1000076B4(v0, type metadata accessor for SettingsURLDestination.Action);
  }
  return v4;
}

uint64_t sub_10000FEB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char v16;
  char v17;
  char v18;
  char v19;
  uint64_t v21;

  v4 = type metadata accessor for SettingsURLDestination(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v21 - v9;
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v21 - v12;
  __chkstk_darwin(v11);
  v15 = (char *)&v21 - v14;
  v16 = static URL.== infix(_:_:)(a1, a2);
  sub_1000076F0(a1, (uint64_t)v15, type metadata accessor for SettingsURLDestination);
  sub_1000076F0(a2, (uint64_t)v13, type metadata accessor for SettingsURLDestination);
  if ((v16 & 1) == 0)
  {
    sub_1000076B4((uint64_t)v13, type metadata accessor for SettingsURLDestination);
    sub_1000076B4((uint64_t)v15, type metadata accessor for SettingsURLDestination);
    sub_1000076F0(a1, (uint64_t)v10, type metadata accessor for SettingsURLDestination);
    sub_1000076F0(a2, (uint64_t)v7, type metadata accessor for SettingsURLDestination);
    goto LABEL_5;
  }
  sub_10000F9F8((uint64_t)&v15[*(int *)(v4 + 20)], (uint64_t)&v13[*(int *)(v4 + 20)]);
  v18 = v17;
  sub_1000076B4((uint64_t)v13, type metadata accessor for SettingsURLDestination);
  sub_1000076B4((uint64_t)v15, type metadata accessor for SettingsURLDestination);
  sub_1000076F0(a1, (uint64_t)v10, type metadata accessor for SettingsURLDestination);
  sub_1000076F0(a2, (uint64_t)v7, type metadata accessor for SettingsURLDestination);
  if ((v18 & 1) == 0)
  {
LABEL_5:
    v19 = 0;
    goto LABEL_6;
  }
  v19 = sub_10000ABBC(*(_QWORD *)&v10[*(int *)(v4 + 24)], *(_QWORD *)&v7[*(int *)(v4 + 24)]);
LABEL_6:
  sub_1000076B4((uint64_t)v10, type metadata accessor for SettingsURLDestination);
  sub_1000076B4((uint64_t)v7, type metadata accessor for SettingsURLDestination);
  return v19 & 1;
}

uint64_t sub_100010098(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004FC8(&qword_100157370);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *sub_1000100D8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  id v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;

  v4 = type metadata accessor for PrimarySettingsListValueLinkModel(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v6 = (int *)v4;
    v7 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(a2, v7))
    {
      case 0u:
        v8 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
        v9 = a1;
        v10 = v7;
        v11 = 0;
        goto LABEL_14;
      case 1u:
        v13 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
        v9 = a1;
        v10 = v7;
        v11 = 1;
        goto LABEL_14;
      case 2u:
        v14 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
        v15 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v16 = (_QWORD *)((char *)a1 + v15);
        v17 = (_QWORD *)((char *)a2 + v15);
        v18 = v17[1];
        *v16 = *v17;
        v16[1] = v18;
        swift_bridgeObjectRetain(v18);
        v9 = a1;
        v10 = v7;
        v11 = 2;
        goto LABEL_14;
      case 3u:
        v19 = a2[1];
        *a1 = *a2;
        a1[1] = v19;
        v20 = a2[3];
        a1[2] = a2[2];
        a1[3] = v20;
        v21 = a2[5];
        a1[4] = a2[4];
        a1[5] = v21;
        v22 = a2[7];
        a1[6] = a2[6];
        a1[7] = v22;
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v22);
        v9 = a1;
        v10 = v7;
        v11 = 3;
        goto LABEL_14;
      case 4u:
        v23 = a2[1];
        *a1 = *a2;
        a1[1] = v23;
        v24 = a2[3];
        a1[2] = a2[2];
        a1[3] = v24;
        v25 = a2[5];
        a1[4] = a2[4];
        a1[5] = v25;
        a1[6] = a2[6];
        swift_bridgeObjectRetain(v23);
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v25);
        v9 = a1;
        v10 = v7;
        v11 = 4;
        goto LABEL_14;
      case 5u:
        v26 = a2[1];
        *a1 = *a2;
        a1[1] = v26;
        v27 = a2[3];
        a1[2] = a2[2];
        a1[3] = v27;
        v29 = (void *)a2[4];
        v28 = a2[5];
        a1[4] = v29;
        a1[5] = v28;
        v30 = a2[9];
        swift_bridgeObjectRetain(v26);
        swift_bridgeObjectRetain(v27);
        v31 = v29;
        swift_bridgeObjectRetain(v28);
        if (v30)
        {
          a1[9] = v30;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v30 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v30);
        }
        else
        {
          v32 = *((_OWORD *)a2 + 4);
          *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
          *((_OWORD *)a1 + 4) = v32;
        }
        v9 = a1;
        v10 = v7;
        v11 = 5;
LABEL_14:
        swift_storeEnumTagMultiPayload(v9, v10, v11);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
        break;
    }
    *((_BYTE *)a1 + v6[5]) = *((_BYTE *)a2 + v6[5]);
    v33 = v6[6];
    v34 = (char *)a1 + v33;
    v35 = (char *)a2 + v33;
    v36 = *(_QWORD *)((char *)a2 + v33);
    v37 = *(_QWORD *)((char *)a2 + v33 + 8);
    v38 = *((_BYTE *)a2 + v33 + 16);
    sub_10000BAD4(v36, v37, v38);
    *(_QWORD *)v34 = v36;
    *((_QWORD *)v34 + 1) = v37;
    v34[16] = v38;
    v39 = *((_QWORD *)v35 + 3);
    *((_QWORD *)v34 + 3) = v39;
    v40 = v6[7];
    v41 = (char *)a1 + v40;
    v42 = (char *)a2 + v40;
    v43 = *(_QWORD *)((char *)a2 + v40);
    v44 = *(_QWORD *)((char *)a2 + v40 + 8);
    v45 = *((_BYTE *)a2 + v40 + 16);
    swift_bridgeObjectRetain(v39);
    sub_10000BAD4(v43, v44, v45);
    *(_QWORD *)v41 = v43;
    *((_QWORD *)v41 + 1) = v44;
    v41[16] = v45;
    v46 = *((_QWORD *)v42 + 3);
    *((_QWORD *)v41 + 3) = v46;
    v47 = v6[8];
    v48 = (char *)a1 + v47;
    v49 = (char *)a2 + v47;
    v50 = *((unsigned __int8 *)a2 + v47 + 16);
    swift_bridgeObjectRetain(v46);
    if (v50 == 255)
    {
      *(_OWORD *)v48 = *(_OWORD *)v49;
      v48[16] = v49[16];
    }
    else
    {
      v51 = *(_QWORD *)v49;
      v52 = *((_QWORD *)v49 + 1);
      sub_10000BB2C(v51, v52, v50);
      *(_QWORD *)v48 = v51;
      *((_QWORD *)v48 + 1) = v52;
      v48[16] = v50;
    }
    *((_BYTE *)a1 + v6[9]) = *((_BYTE *)a2 + v6[9]);
  }
  return a1;
}

uint64_t sub_100010434(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  int v11;

  v2 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(a1, v2))
  {
    case 0u:
    case 1u:
      v3 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
      break;
    case 2u:
      v4 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
      v5 = sub_100004FC8(&qword_10015C420);
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v5 + 48) + 8));
      break;
    case 3u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
      break;
    case 4u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      break;
    case 5u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));

      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      if (*(_QWORD *)(a1 + 72))
        sub_100005474((_QWORD *)(a1 + 48));
      break;
    default:
      break;
  }
  v6 = (int *)type metadata accessor for PrimarySettingsListValueLinkModel(0);
  v7 = a1 + v6[6];
  sub_100007618(*(_QWORD *)v7, *(_QWORD *)(v7 + 8), *(_BYTE *)(v7 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + 24));
  v8 = a1 + v6[7];
  sub_100007618(*(_QWORD *)v8, *(_QWORD *)(v8 + 8), *(_BYTE *)(v8 + 16));
  result = swift_bridgeObjectRelease(*(_QWORD *)(v8 + 24));
  v10 = a1 + v6[8];
  v11 = *(unsigned __int8 *)(v10 + 16);
  if (v11 != 255)
    return sub_10000BB54(*(_QWORD *)v10, *(_QWORD *)(v10 + 8), v11);
  return result;
}

_QWORD *sub_1000105C8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  id v27;
  __int128 v28;
  int *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;

  v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(a2, v4))
  {
    case 0u:
      v5 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
      v6 = a1;
      v7 = v4;
      v8 = 0;
      goto LABEL_12;
    case 1u:
      v9 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      v6 = a1;
      v7 = v4;
      v8 = 1;
      goto LABEL_12;
    case 2u:
      v10 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      v11 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
      v12 = (_QWORD *)((char *)a1 + v11);
      v13 = (_QWORD *)((char *)a2 + v11);
      v14 = v13[1];
      *v12 = *v13;
      v12[1] = v14;
      swift_bridgeObjectRetain(v14);
      v6 = a1;
      v7 = v4;
      v8 = 2;
      goto LABEL_12;
    case 3u:
      v15 = a2[1];
      *a1 = *a2;
      a1[1] = v15;
      v16 = a2[3];
      a1[2] = a2[2];
      a1[3] = v16;
      v17 = a2[5];
      a1[4] = a2[4];
      a1[5] = v17;
      v18 = a2[7];
      a1[6] = a2[6];
      a1[7] = v18;
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v18);
      v6 = a1;
      v7 = v4;
      v8 = 3;
      goto LABEL_12;
    case 4u:
      v19 = a2[1];
      *a1 = *a2;
      a1[1] = v19;
      v20 = a2[3];
      a1[2] = a2[2];
      a1[3] = v20;
      v21 = a2[5];
      a1[4] = a2[4];
      a1[5] = v21;
      a1[6] = a2[6];
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRetain(v21);
      v6 = a1;
      v7 = v4;
      v8 = 4;
      goto LABEL_12;
    case 5u:
      v22 = a2[1];
      *a1 = *a2;
      a1[1] = v22;
      v23 = a2[3];
      a1[2] = a2[2];
      a1[3] = v23;
      v25 = (void *)a2[4];
      v24 = a2[5];
      a1[4] = v25;
      a1[5] = v24;
      v26 = a2[9];
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v23);
      v27 = v25;
      swift_bridgeObjectRetain(v24);
      if (v26)
      {
        a1[9] = v26;
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v26 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v26);
      }
      else
      {
        v28 = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 4) = v28;
      }
      v6 = a1;
      v7 = v4;
      v8 = 5;
LABEL_12:
      swift_storeEnumTagMultiPayload(v6, v7, v8);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
      break;
  }
  v29 = (int *)type metadata accessor for PrimarySettingsListValueLinkModel(0);
  *((_BYTE *)a1 + v29[5]) = *((_BYTE *)a2 + v29[5]);
  v30 = v29[6];
  v31 = (char *)a1 + v30;
  v32 = (char *)a2 + v30;
  v33 = *(_QWORD *)((char *)a2 + v30);
  v34 = *(_QWORD *)((char *)a2 + v30 + 8);
  v35 = *((_BYTE *)a2 + v30 + 16);
  sub_10000BAD4(v33, v34, v35);
  *(_QWORD *)v31 = v33;
  *((_QWORD *)v31 + 1) = v34;
  v31[16] = v35;
  v36 = *((_QWORD *)v32 + 3);
  *((_QWORD *)v31 + 3) = v36;
  v37 = v29[7];
  v38 = (char *)a1 + v37;
  v39 = (char *)a2 + v37;
  v40 = *(_QWORD *)((char *)a2 + v37);
  v41 = *(_QWORD *)((char *)a2 + v37 + 8);
  v42 = *((_BYTE *)a2 + v37 + 16);
  swift_bridgeObjectRetain(v36);
  sub_10000BAD4(v40, v41, v42);
  *(_QWORD *)v38 = v40;
  *((_QWORD *)v38 + 1) = v41;
  v38[16] = v42;
  v43 = *((_QWORD *)v39 + 3);
  *((_QWORD *)v38 + 3) = v43;
  v44 = v29[8];
  v45 = (char *)a1 + v44;
  v46 = (char *)a2 + v44;
  v47 = *((unsigned __int8 *)a2 + v44 + 16);
  swift_bridgeObjectRetain(v43);
  if (v47 == 255)
  {
    *(_OWORD *)v45 = *(_OWORD *)v46;
    v45[16] = v46[16];
  }
  else
  {
    v48 = *(_QWORD *)v46;
    v49 = *((_QWORD *)v46 + 1);
    sub_10000BB2C(v48, v49, v47);
    *(_QWORD *)v45 = v48;
    *((_QWORD *)v45 + 1) = v49;
    v45[16] = v47;
  }
  *((_BYTE *)a1 + v29[9]) = *((_BYTE *)a2 + v29[9]);
  return a1;
}

_QWORD *sub_1000108F8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  __int128 v28;
  int *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  __int128 v64;

  if (a1 != a2)
  {
    sub_1000076B4((uint64_t)a1, type metadata accessor for PrimarySettingsListItemIdentifier);
    v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(a2, v4))
    {
      case 0u:
        v5 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
        v6 = a1;
        v7 = v4;
        v8 = 0;
        goto LABEL_13;
      case 1u:
        v9 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
        v6 = a1;
        v7 = v4;
        v8 = 1;
        goto LABEL_13;
      case 2u:
        v10 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
        v11 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v12 = (_QWORD *)((char *)a1 + v11);
        v13 = (_QWORD *)((char *)a2 + v11);
        *v12 = *v13;
        v14 = v13[1];
        v12[1] = v14;
        swift_bridgeObjectRetain(v14);
        v6 = a1;
        v7 = v4;
        v8 = 2;
        goto LABEL_13;
      case 3u:
        *a1 = *a2;
        v15 = a2[1];
        a1[1] = v15;
        a1[2] = a2[2];
        v16 = a2[3];
        a1[3] = v16;
        a1[4] = a2[4];
        v17 = a2[5];
        a1[5] = v17;
        a1[6] = a2[6];
        v18 = a2[7];
        a1[7] = v18;
        swift_bridgeObjectRetain(v15);
        swift_bridgeObjectRetain(v16);
        swift_bridgeObjectRetain(v17);
        swift_bridgeObjectRetain(v18);
        v6 = a1;
        v7 = v4;
        v8 = 3;
        goto LABEL_13;
      case 4u:
        *a1 = *a2;
        v19 = a2[1];
        a1[1] = v19;
        a1[2] = a2[2];
        v20 = a2[3];
        a1[3] = v20;
        a1[4] = a2[4];
        v21 = a2[5];
        a1[5] = v21;
        a1[6] = a2[6];
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v21);
        v6 = a1;
        v7 = v4;
        v8 = 4;
        goto LABEL_13;
      case 5u:
        *a1 = *a2;
        v22 = a2[1];
        a1[1] = v22;
        a1[2] = a2[2];
        v23 = a2[3];
        a1[3] = v23;
        v24 = (void *)a2[4];
        a1[4] = v24;
        v25 = a2[5];
        a1[5] = v25;
        v26 = a2[9];
        swift_bridgeObjectRetain(v22);
        swift_bridgeObjectRetain(v23);
        v27 = v24;
        swift_bridgeObjectRetain(v25);
        if (v26)
        {
          a1[9] = v26;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v26 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v26);
        }
        else
        {
          v28 = *((_OWORD *)a2 + 4);
          *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
          *((_OWORD *)a1 + 4) = v28;
        }
        v6 = a1;
        v7 = v4;
        v8 = 5;
LABEL_13:
        swift_storeEnumTagMultiPayload(v6, v7, v8);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
        break;
    }
  }
  v29 = (int *)type metadata accessor for PrimarySettingsListValueLinkModel(0);
  *((_BYTE *)a1 + v29[5]) = *((_BYTE *)a2 + v29[5]);
  v30 = v29[6];
  v31 = (char *)a1 + v30;
  v32 = (char *)a2 + v30;
  v33 = *(_QWORD *)((char *)a2 + v30);
  v34 = *(_QWORD *)((char *)a2 + v30 + 8);
  v35 = *((_BYTE *)a2 + v30 + 16);
  sub_10000BAD4(v33, v34, v35);
  v36 = *(_QWORD *)v31;
  v37 = *((_QWORD *)v31 + 1);
  v38 = v31[16];
  *(_QWORD *)v31 = v33;
  *((_QWORD *)v31 + 1) = v34;
  v31[16] = v35;
  sub_100007618(v36, v37, v38);
  v39 = *((_QWORD *)v32 + 3);
  v40 = *((_QWORD *)v31 + 3);
  *((_QWORD *)v31 + 3) = v39;
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRelease(v40);
  v41 = v29[7];
  v42 = (char *)a1 + v41;
  v43 = (char *)a2 + v41;
  v44 = *(_QWORD *)((char *)a2 + v41);
  v45 = *(_QWORD *)((char *)a2 + v41 + 8);
  v46 = *((_BYTE *)a2 + v41 + 16);
  sub_10000BAD4(v44, v45, v46);
  v47 = *(_QWORD *)v42;
  v48 = *((_QWORD *)v42 + 1);
  v49 = v42[16];
  *(_QWORD *)v42 = v44;
  *((_QWORD *)v42 + 1) = v45;
  v42[16] = v46;
  sub_100007618(v47, v48, v49);
  v50 = *((_QWORD *)v43 + 3);
  v51 = *((_QWORD *)v42 + 3);
  *((_QWORD *)v42 + 3) = v50;
  swift_bridgeObjectRetain(v50);
  swift_bridgeObjectRelease(v51);
  v52 = v29[8];
  v53 = (uint64_t)a1 + v52;
  v54 = (char *)a2 + v52;
  v55 = *((unsigned __int8 *)a2 + v52 + 16);
  if (*((unsigned __int8 *)a1 + v52 + 16) == 255)
  {
    if (v55 == 255)
    {
      v64 = *(_OWORD *)v54;
      *(_BYTE *)(v53 + 16) = v54[16];
      *(_OWORD *)v53 = v64;
    }
    else
    {
      v61 = *(_QWORD *)v54;
      v62 = *((_QWORD *)v54 + 1);
      sub_10000BB2C(v61, v62, v55);
      *(_QWORD *)v53 = v61;
      *(_QWORD *)(v53 + 8) = v62;
      *(_BYTE *)(v53 + 16) = v55;
    }
  }
  else if (v55 == 255)
  {
    sub_100010D24(v53);
    v63 = v54[16];
    *(_OWORD *)v53 = *(_OWORD *)v54;
    *(_BYTE *)(v53 + 16) = v63;
  }
  else
  {
    v56 = *(_QWORD *)v54;
    v57 = *((_QWORD *)v54 + 1);
    sub_10000BB2C(v56, v57, v55);
    v58 = *(_QWORD *)v53;
    v59 = *(_QWORD *)(v53 + 8);
    *(_QWORD *)v53 = v56;
    *(_QWORD *)(v53 + 8) = v57;
    v60 = *(_BYTE *)(v53 + 16);
    *(_BYTE *)(v53 + 16) = v55;
    sub_10000BB54(v58, v59, v60);
  }
  *((_BYTE *)a1 + v29[9]) = *((_BYTE *)a2 + v29[9]);
  return a1;
}

uint64_t sub_100010D24(uint64_t a1)
{
  destroy for Icon.IconType(a1);
  return a1;
}

char *sub_100010D58(char *a1, char *a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  char *v20;
  char *v21;

  v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v4);
  if (EnumCaseMultiPayload == 2)
  {
    v7 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    v8 = sub_100004FC8(&qword_10015C420);
    *(_OWORD *)&a1[*(int *)(v8 + 48)] = *(_OWORD *)&a2[*(int *)(v8 + 48)];
    swift_storeEnumTagMultiPayload(a1, v4, 2);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v9 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
    swift_storeEnumTagMultiPayload(a1, v4, 1);
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    v6 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, v4, 0);
  }
  v10 = (int *)type metadata accessor for PrimarySettingsListValueLinkModel(0);
  a1[v10[5]] = a2[v10[5]];
  v11 = v10[6];
  v12 = &a1[v11];
  v13 = &a2[v11];
  v14 = *((_OWORD *)v13 + 1);
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *((_OWORD *)v12 + 1) = v14;
  v15 = v10[7];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = *((_OWORD *)v17 + 1);
  *(_OWORD *)v16 = *(_OWORD *)v17;
  *((_OWORD *)v16 + 1) = v18;
  v19 = v10[8];
  v20 = &a1[v19];
  v21 = &a2[v19];
  *(_OWORD *)v20 = *(_OWORD *)v21;
  v20[16] = v21[16];
  a1[v10[9]] = a2[v10[9]];
  return a1;
}

char *sub_100010EDC(char *a1, char *a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;

  if (a1 != a2)
  {
    sub_1000076B4((uint64_t)a1, type metadata accessor for PrimarySettingsListItemIdentifier);
    v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v4);
    if (EnumCaseMultiPayload == 2)
    {
      v7 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      v8 = sub_100004FC8(&qword_10015C420);
      *(_OWORD *)&a1[*(int *)(v8 + 48)] = *(_OWORD *)&a2[*(int *)(v8 + 48)];
      swift_storeEnumTagMultiPayload(a1, v4, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v9 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      swift_storeEnumTagMultiPayload(a1, v4, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, v4, 0);
    }
  }
  v10 = (int *)type metadata accessor for PrimarySettingsListValueLinkModel(0);
  a1[v10[5]] = a2[v10[5]];
  v11 = v10[6];
  v12 = &a1[v11];
  v13 = &a2[v11];
  LOBYTE(v11) = a2[v11 + 16];
  v14 = *(_QWORD *)v12;
  v15 = *((_QWORD *)v12 + 1);
  v16 = v12[16];
  *(_OWORD *)v12 = *(_OWORD *)v13;
  v12[16] = v11;
  sub_100007618(v14, v15, v16);
  v17 = *((_QWORD *)v12 + 3);
  *((_QWORD *)v12 + 3) = *((_QWORD *)v13 + 3);
  swift_bridgeObjectRelease(v17);
  v18 = v10[7];
  v19 = &a1[v18];
  v20 = &a2[v18];
  LOBYTE(v18) = a2[v18 + 16];
  v21 = *(_QWORD *)v19;
  v22 = *((_QWORD *)v19 + 1);
  v23 = v19[16];
  *(_OWORD *)v19 = *(_OWORD *)v20;
  v19[16] = v18;
  sub_100007618(v21, v22, v23);
  v24 = *((_QWORD *)v19 + 3);
  *((_QWORD *)v19 + 3) = *((_QWORD *)v20 + 3);
  swift_bridgeObjectRelease(v24);
  v25 = v10[8];
  v26 = (uint64_t)&a1[v25];
  v27 = &a2[v25];
  v28 = a1[v25 + 16];
  if (v28 == 255)
    goto LABEL_13;
  v29 = v27[16];
  if (v29 == 255)
  {
    sub_100010D24(v26);
LABEL_13:
    *(_OWORD *)v26 = *(_OWORD *)v27;
    *(_BYTE *)(v26 + 16) = v27[16];
    goto LABEL_14;
  }
  v30 = *(_QWORD *)v26;
  v31 = *(_QWORD *)(v26 + 8);
  *(_OWORD *)v26 = *(_OWORD *)v27;
  *(_BYTE *)(v26 + 16) = v29;
  sub_10000BB54(v30, v31, v28);
LABEL_14:
  a1[v10[9]] = a2[v10[9]];
  return a1;
}

uint64_t sub_100011104(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100011110);
}

uint64_t sub_100011110(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PrimarySettingsListValueLinkModel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_10001114C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100011158);
}

uint64_t sub_100011158(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PrimarySettingsListValueLinkModel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for PrimarySettingsListValueLink(uint64_t a1)
{
  uint64_t result;

  result = qword_100157400;
  if (!qword_100157400)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PrimarySettingsListValueLink);
  return result;
}

uint64_t sub_1000111D4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for PrimarySettingsListValueLinkModel(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10001123C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100129CE0, 1);
}

uint64_t sub_10001124C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  char v10;
  uint64_t v11;
  int v12;

  v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for PrimarySettingsListValueLinkModel(0) + 28));
  v4 = *v3;
  v5 = v3[1];
  v6 = *((unsigned __int8 *)v3 + 16);
  v7 = v3[3];
  v12 = static HierarchicalShapeStyle.secondary.getter();
  result = Text.foregroundStyle<A>(_:)(&v12, v4, v5, v6, v7, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v9;
  *(_BYTE *)(a2 + 16) = v10 & 1;
  *(_QWORD *)(a2 + 24) = v11;
  *(_QWORD *)(a2 + 32) = sub_1000112EC;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000112EC()
{
  return Transaction.animation.setter(0);
}

uint64_t sub_100011310(uint64_t a1)
{
  unint64_t v1;
  _QWORD v3[4];
  _BYTE v4[16];
  uint64_t v5;

  v5 = a1;
  v3[2] = a1;
  v1 = sub_1000116EC();
  return Label.init(title:icon:)(sub_1000116DC, v4, sub_1000116E4, v3, &type metadata for Text, &type metadata for Icon, &protocol witness table for Text, v1);
}

uint64_t sub_10001137C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v3 = a1 + *(int *)(type metadata accessor for PrimarySettingsListValueLinkModel(0) + 24);
  v4 = *(_QWORD *)v3;
  v5 = *(_QWORD *)(v3 + 8);
  v6 = *(_BYTE *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  *(_QWORD *)a2 = *(_QWORD *)v3;
  *(_QWORD *)(a2 + 8) = v5;
  *(_BYTE *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 24) = v7;
  sub_10000BAD4(v4, v5, v6);
  return swift_bridgeObjectRetain(v7);
}

uint64_t sub_1000113CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t result;
  uint64_t v18;

  v4 = type metadata accessor for PrimarySettingsListValueLink(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1 + *(int *)(type metadata accessor for PrimarySettingsListValueLinkModel(0) + 32);
  v8 = *(_QWORD *)v7;
  v9 = *(_QWORD *)(v7 + 8);
  v10 = *(unsigned __int8 *)(v7 + 16);
  sub_100011730(a1, (uint64_t)v6);
  v11 = v8;
  v12 = v9;
  v13 = v10;
  if (v10 == 255)
  {
    sub_10009C7A4();
    v11 = v14;
    v12 = v15;
    v13 = v16;
  }
  sub_100011774(v8, v9, v10);
  sub_1000076B4((uint64_t)v6, type metadata accessor for PrimarySettingsListValueLink);
  result = swift_getKeyPath(&unk_1001145A0);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = v11;
  *(_QWORD *)(a2 + 24) = v12;
  *(_BYTE *)(a2 + 32) = v13;
  return result;
}

uint64_t sub_1000114C8()
{
  return static View._viewListCount(inputs:)();
}

uint64_t sub_1000114E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  double v11;
  _BYTE v13[16];
  uint64_t v14;
  _BYTE v15[16];
  uint64_t v16;

  v3 = sub_100004FC8(&qword_100157438);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = v1;
  v14 = v1;
  v7 = sub_100004FC8(&qword_100157440);
  v8 = sub_100004FC8(&qword_100157448);
  v9 = sub_10001162C();
  v10 = sub_100011678();
  LabeledContent<>.init(content:label:)(sub_10001161C, v15, sub_100011624, v13, v7, v8, v9, v10);
  if (*(_BYTE *)(v1 + *(int *)(type metadata accessor for PrimarySettingsListValueLinkModel(0) + 20)))
    v11 = 0.5;
  else
    v11 = 1.0;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v4 + 16))(a1, v6, v3);
  *(double *)(a1 + *(int *)(sub_100004FC8(&qword_100157460) + 36)) = v11;
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_10001161C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10001124C(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_100011624()
{
  uint64_t v0;

  return sub_100011310(*(_QWORD *)(v0 + 16));
}

unint64_t sub_10001162C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100157450;
  if (!qword_100157450)
  {
    v1 = sub_100005430(&qword_100157440);
    result = swift_getWitnessTable(&protocol conformance descriptor for Label<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100157450);
  }
  return result;
}

unint64_t sub_100011678()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100157458;
  if (!qword_100157458)
  {
    v1 = sub_100005430(&qword_100157448);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100157458);
  }
  return result;
}

uint64_t sub_1000116DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10001137C(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1000116E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000113CC(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_1000116EC()
{
  unint64_t result;

  result = qword_100157468;
  if (!qword_100157468)
  {
    result = swift_getWitnessTable(&unk_100115C94, &type metadata for Icon);
    atomic_store(result, (unint64_t *)&qword_100157468);
  }
  return result;
}

uint64_t sub_100011730(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PrimarySettingsListValueLink(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100011774(uint64_t result, uint64_t a2, char a3)
{
  if (a3 != -1)
    return sub_10000BB2C(result, a2, a3);
  return result;
}

unint64_t sub_100011794()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100157470;
  if (!qword_100157470)
  {
    v1 = sub_100005430(&qword_100157460);
    sub_100011800();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100157470);
  }
  return result;
}

unint64_t sub_100011800()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100157478;
  if (!qword_100157478)
  {
    v1 = sub_100005430(&qword_100157438);
    sub_10001162C();
    sub_100011678();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> LabeledContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100157478);
  }
  return result;
}

Swift::Int sub_10001186C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::UInt v3;
  _QWORD v5[9];

  v2 = *v0;
  v1 = v0[1];
  Hasher.init(_seed:)(v5, 0);
  switch(v1)
  {
    case 0:
      v3 = 0;
      goto LABEL_7;
    case 1:
      v3 = 1;
      goto LABEL_7;
    case 2:
      v3 = 2;
      goto LABEL_7;
    case 3:
      v3 = 3;
LABEL_7:
      Hasher._combine(_:)(v3);
      break;
    default:
      Hasher._combine(_:)(4uLL);
      String.hash(into:)(v5, v2, v1);
      break;
  }
  return Hasher._finalize()();
}

void sub_10001191C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  Swift::UInt v4;
  uint64_t v5;

  v3 = v1[1];
  switch(v3)
  {
    case 0:
      v4 = 0;
      goto LABEL_7;
    case 1:
      v4 = 1;
      goto LABEL_7;
    case 2:
      v4 = 2;
      goto LABEL_7;
    case 3:
      v4 = 3;
LABEL_7:
      Hasher._combine(_:)(v4);
      break;
    default:
      v5 = *v1;
      Hasher._combine(_:)(4uLL);
      String.hash(into:)(a1, v5, v3);
      break;
  }
}

Swift::Int sub_1000119B4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  Swift::UInt v4;
  _QWORD v6[9];

  v3 = *v1;
  v2 = v1[1];
  Hasher.init(_seed:)(v6, a1);
  switch(v2)
  {
    case 0:
      v4 = 0;
      goto LABEL_7;
    case 1:
      v4 = 1;
      goto LABEL_7;
    case 2:
      v4 = 2;
      goto LABEL_7;
    case 3:
      v4 = 3;
LABEL_7:
      Hasher._combine(_:)(v4);
      break;
    default:
      Hasher._combine(_:)(4uLL);
      String.hash(into:)(v6, v3, v2);
      break;
  }
  return Hasher._finalize()();
}

uint64_t sub_100011A60(uint64_t *a1, uint64_t a2)
{
  return sub_100012F88(*a1, a1[1], *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
}

uint64_t sub_100011A74()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = OBJC_IVAR____TtC11SettingsApp20WiFiListItemProvider_wifiMonitor;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC11SettingsApp20WiFiListItemProvider_wifiMonitor);
  if (v2 && (objc_msgSend(v2, "setHandler:", 0), (v3 = *(void **)(v0 + v1)) != 0))
  {
    objc_msgSend(v3, "stopMonitoring");
    v4 = *(void **)(v0 + v1);
  }
  else
  {
    v4 = 0;
  }
  *(_QWORD *)(v0 + v1) = 0;

  sub_100012F74(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  sub_100013014(v0 + OBJC_IVAR____TtC11SettingsApp20WiFiListItemProvider_id);

  sub_100005474((_QWORD *)(v0 + OBJC_IVAR____TtC11SettingsApp20WiFiListItemProvider_invalidator));
  return v0;
}

uint64_t sub_100011B08()
{
  uint64_t v0;

  sub_100011A74();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100011B2C()
{
  return type metadata accessor for WiFiListItemProvider(0);
}

uint64_t type metadata accessor for WiFiListItemProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_1001574B8;
  if (!qword_1001574B8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for WiFiListItemProvider);
  return result;
}

uint64_t sub_100011B70(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_100114608;
  result = type metadata accessor for PrimarySettingsListItemIdentifier(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_100114620;
    v4[3] = &unk_100114638;
    result = swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

unint64_t destroy for WiFiListItemProvider.WiFiState(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t _s11SettingsApp20WiFiListItemProviderC9WiFiStateOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_bridgeObjectRetain(v3);
  }
  return a1;
}

_QWORD *assignWithCopy for WiFiListItemProvider.WiFiState(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1[1];
  v5 = a2[1];
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      v7 = a2[1];
      a1[1] = v7;
      swift_bridgeObjectRetain(v7);
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(a1[1]);
    goto LABEL_7;
  }
  *a1 = *a2;
  v6 = a2[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v4);
  return a1;
}

__n128 initializeWithTake for WiFiListItemProvider.WiFiState(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t assignWithTake for WiFiListItemProvider.WiFiState(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 < 0xFFFFFFFF)
    goto LABEL_5;
  v5 = *(_QWORD *)(a2 + 8);
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(v4);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for WiFiListItemProvider.WiFiState(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFC && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483644);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 3;
  if (v4 >= 5)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for WiFiListItemProvider.WiFiState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFB)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483644;
    if (a3 >= 0x7FFFFFFC)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFC)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 3;
  }
  return result;
}

uint64_t sub_100011E1C(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_100011E34(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for WiFiListItemProvider.WiFiState()
{
  return &type metadata for WiFiListItemProvider.WiFiState;
}

unint64_t sub_100011E68()
{
  unint64_t result;

  result = qword_100157558;
  if (!qword_100157558)
  {
    result = swift_getWitnessTable(&unk_10011465C, &type metadata for WiFiListItemProvider.WiFiState);
    atomic_store(result, (unint64_t *)&qword_100157558);
  }
  return result;
}

void sub_100011EAC(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v29;

  v2 = v1;
  v4 = v2 + OBJC_IVAR____TtC11SettingsApp20WiFiListItemProvider_id;
  v29 = type metadata accessor for PrimarySettingsListItemModel(0);
  v5 = a1 + *(int *)(v29 + 20);
  sub_100012DC4(v4, v5);
  v27 = *(_QWORD *)(v2 + 24) == 1;
  sub_10009BD7C();
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v26 = v12;
  v13 = sub_100012154();
  v15 = v14;
  v17 = v16;
  v19 = v18;
  v20 = (int *)type metadata accessor for PrimarySettingsListValueLinkModel(0);
  v21 = v20[9];
  v22 = v5 + v20[8];
  *(_BYTE *)(v5 + v20[5]) = v27;
  v23 = v5 + v20[6];
  *(_QWORD *)v23 = v7;
  *(_QWORD *)(v23 + 8) = v9;
  *(_BYTE *)(v23 + 16) = v11 & 1;
  *(_QWORD *)(v23 + 24) = v26;
  v24 = v5 + v20[7];
  *(_QWORD *)v24 = v13;
  *(_QWORD *)(v24 + 8) = v15;
  *(_BYTE *)(v24 + 16) = v17 & 1;
  *(_QWORD *)(v24 + 24) = v19;
  *(_QWORD *)v22 = 0;
  *(_QWORD *)(v22 + 8) = 0;
  *(_BYTE *)(v22 + 16) = -1;
  *(_BYTE *)(v5 + v21) = 2;
  sub_100012DC4(v4, a1);
  v25 = type metadata accessor for PrimarySettingsListItemViewType(0);
  swift_storeEnumTagMultiPayload(v5, v25, 8);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(a1, 0, 1);
  sub_100012010(v2);
}

void sub_100012010(uint64_t a1)
{
  id v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  _QWORD v11[5];
  uint64_t v12;

  v2 = objc_msgSend((id)objc_opt_self(PSLaunchTracker), "sharedInstance");
  v3 = objc_msgSend(v2, "launchHasCompleted");

  if (v3)
  {
    v4 = OBJC_IVAR____TtC11SettingsApp20WiFiListItemProvider_wifiMonitor;
    if (!*(_QWORD *)(a1 + OBJC_IVAR____TtC11SettingsApp20WiFiListItemProvider_wifiMonitor))
    {
      v5 = swift_allocObject(&unk_1001488B0, 24, 7);
      swift_weakInit(v5 + 16, a1);
      v6 = objc_allocWithZone((Class)WFWiFiStateMonitor);
      v11[4] = sub_100012E80;
      v12 = v5;
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 1107296256;
      v11[2] = sub_100012E88;
      v11[3] = &unk_1001488C8;
      v7 = _Block_copy(v11);
      v8 = v12;
      swift_retain(v5);
      swift_release(v8);
      v9 = objc_msgSend(v6, "initWithClient:handler:", 0, v7);
      _Block_release(v7);
      swift_release(v5);
      v10 = *(void **)(a1 + v4);
      *(_QWORD *)(a1 + v4) = v9;

    }
  }
}

uint64_t sub_100012154()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];

  v1 = *(_QWORD *)(v0 + 24);
  switch(v1)
  {
    case 0:
      return v1;
    case 1:
      v2 = 0x616C696176616E55;
      v3 = 0xEB00000000656C62;
      goto LABEL_6;
    case 2:
      v6 = LocalizedStringKey.init(stringLiteral:)(0x494649575F46464FLL, 0xE800000000000000);
      goto LABEL_7;
    case 3:
      v2 = 0x6E6E6F4320746F4ELL;
      v3 = 0xED00006465746365;
LABEL_6:
      v6 = LocalizedStringKey.init(stringLiteral:)(v2, v3);
LABEL_7:
      v5 = Text.init(_:tableName:bundle:comment:)(v6);
      break;
    default:
      v8[0] = *(_QWORD *)(v0 + 16);
      v8[1] = v1;
      v4 = sub_100008A5C();
      swift_bridgeObjectRetain(v1);
      v5 = Text.init<A>(_:)(v8, &type metadata for String, v4);
      break;
  }
  return v5;
}

uint64_t sub_10001228C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_signpost_type_t v18;
  uint8_t *v19;
  uint8_t *v20;
  os_signpost_id_t v21;
  uint8_t *v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  _QWORD aBlock[5];
  uint64_t v40;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v36 = *(_QWORD *)(v2 - 8);
  v37 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v34 = *(_QWORD *)(v5 - 8);
  v35 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OSSignpostID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v33 - v13;
  if (qword_100156CD8 != -1)
    swift_once(&qword_100156CD8, sub_10008BEEC);
  v15 = type metadata accessor for OSSignposter(0);
  sub_100007808(v15, (uint64_t)qword_10015D340);
  v16 = static OSSignpostID.exclusive.getter();
  v17 = OSSignposter.logHandle.getter(v16);
  v18 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    v33 = v7;
    v20 = v19;
    *(_WORD *)v19 = 0;
    v21 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, v18, v21, "WiFiListItemProvider.updateWiFiState began", "", v20, 2u);
    v22 = v20;
    v1 = v0;
    v7 = v33;
    swift_slowDealloc(v22, -1, -1);

    v23 = *(void (**)(char *, uint64_t))(v9 + 8);
    v23(v14, v8);
    v23(v12, v8);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  }
  if (qword_100156D60 != -1)
    swift_once(&qword_100156D60, sub_1000D34BC);
  v24 = swift_allocObject(&unk_1001488B0, 24, 7);
  swift_weakInit(v24 + 16, v1);
  aBlock[4] = sub_100012ED0;
  v40 = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100005350;
  aBlock[3] = &unk_1001488F0;
  v25 = _Block_copy(aBlock);
  v26 = swift_retain(v24);
  static DispatchQoS.unspecified.getter(v26);
  v38 = &_swiftEmptyArrayStorage;
  v27 = sub_100012ED8();
  v28 = sub_100004FC8((uint64_t *)&unk_100156F40);
  v29 = sub_10000551C();
  v30 = v37;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v38, v28, v29, v37, v27);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v4, v25);
  _Block_release(v25);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v4, v30);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v7, v35);
  v31 = v40;
  swift_release(v24);
  return swift_release(v31);
}

uint64_t sub_100012604(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t Strong;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_signpost_type_t v30;
  uint8_t *v31;
  os_signpost_id_t v32;
  void (*v33)(char *, uint64_t);
  id v35;
  uint64_t v36;
  void *v37;
  _QWORD *v38;
  void *v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD aBlock[5];
  _QWORD *v50;
  char v51[24];
  char v52[24];

  v2 = type metadata accessor for OSSignpostID(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v45 - v7;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v48 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v46 = *(_QWORD *)(v12 - 8);
  v47 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(a1 + 16, v52, 0, 0);
  Strong = swift_weakLoadStrong(a1 + 16);
  if (Strong)
  {
    v16 = Strong;
    v17 = *(void **)(Strong + OBJC_IVAR____TtC11SettingsApp20WiFiListItemProvider_wifiMonitor);
    v18 = v17;
    swift_release(v16);
    if (v17)
    {
      v19 = objc_msgSend(v18, "state");

      swift_beginAccess(a1 + 16, v51, 0, 0);
      v20 = swift_weakLoadStrong(a1 + 16);
      v21 = (id)v20;
      if (!v20)
        goto LABEL_15;
      v22 = *(void **)(v20 + OBJC_IVAR____TtC11SettingsApp20WiFiListItemProvider_wifiMonitor);
      v23 = v22;
      swift_release(v21);
      if (v22)
      {
        v21 = objc_msgSend(v23, "linkQuality");

        if (v21)
        {
          v24 = objc_msgSend(v21, "ssid");

          if (v24)
          {
            v21 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
            v26 = v25;

            if ((unint64_t)v19 > 5)
            {
LABEL_18:
              swift_bridgeObjectRelease(v26);
              v35 = 0;
              v36 = 1;
LABEL_26:
              sub_100005494();
              v37 = (void *)static OS_dispatch_queue.main.getter();
              v38 = (_QWORD *)swift_allocObject(&unk_100148928, 40, 7);
              v38[2] = a1;
              v38[3] = v35;
              v38[4] = v36;
              aBlock[4] = sub_100012F54;
              v50 = v38;
              aBlock[0] = _NSConcreteStackBlock;
              aBlock[1] = 1107296256;
              aBlock[2] = sub_100005350;
              aBlock[3] = &unk_100148940;
              v39 = _Block_copy(aBlock);
              v40 = v50;
              swift_retain(a1);
              v41 = swift_release(v40);
              static DispatchQoS.unspecified.getter(v41);
              aBlock[0] = &_swiftEmptyArrayStorage;
              v42 = sub_100012ED8();
              v43 = sub_100004FC8((uint64_t *)&unk_100156F40);
              v44 = sub_10000551C();
              dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v43, v44, v9, v42);
              OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v11, v39);
              _Block_release(v39);

              (*(void (**)(char *, uint64_t))(v48 + 8))(v11, v9);
              return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v14, v47);
            }
LABEL_16:
            switch((unint64_t)v19)
            {
              case 1uLL:
                swift_bridgeObjectRelease(v26);
                v35 = 0;
                v36 = 2;
                break;
              case 2uLL:
              case 3uLL:
              case 5uLL:
                swift_bridgeObjectRelease(v26);
                v35 = 0;
                v36 = 3;
                break;
              case 4uLL:
                if (v26)
                  v35 = v21;
                else
                  v35 = 0;
                if (v26)
                  v36 = v26;
                else
                  v36 = 3;
                break;
              default:
                goto LABEL_18;
            }
            goto LABEL_26;
          }
          v21 = 0;
        }
LABEL_15:
        v26 = 0;
        goto LABEL_16;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    JUMPOUT(0x100012AC0);
  }
  if (qword_100156CD8 != -1)
    swift_once(&qword_100156CD8, sub_10008BEEC);
  v27 = type metadata accessor for OSSignposter(0);
  sub_100007808(v27, (uint64_t)qword_10015D340);
  v28 = static OSSignpostID.exclusive.getter();
  v29 = OSSignposter.logHandle.getter(v28);
  v30 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v8, v2);
    v31 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v31 = 0;
    v32 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v29, v30, v32, "WiFiListItemProvider.updateWiFiState bailed", "", v31, 2u);
    swift_slowDealloc(v31, -1, -1);

    v33 = *(void (**)(char *, uint64_t))(v3 + 8);
    v33(v8, v2);
    return ((uint64_t (*)(char *, uint64_t))v33)(v6, v2);
  }
  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  }
}

uint64_t sub_100012AD8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t Strong;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_signpost_type_t v23;
  uint8_t *v24;
  os_signpost_id_t v25;
  void (*v26)(char *, uint64_t);
  _QWORD v28[2];
  char v29;
  _BYTE v30[24];

  v6 = type metadata accessor for OSSignpostID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)v28 - v11;
  a1 += 16;
  swift_beginAccess(a1, v30, 0, 0);
  Strong = swift_weakLoadStrong(a1);
  if (Strong)
  {
    v14 = Strong;
    v15 = *(_QWORD *)(Strong + 24);
    switch(a3)
    {
      case 0uLL:
        if (v15)
          goto LABEL_17;
        break;
      case 1uLL:
        if (v15 != 1)
          goto LABEL_17;
        break;
      case 2uLL:
        if (v15 != 2)
          goto LABEL_17;
        break;
      case 3uLL:
        if (v15 != 3)
          goto LABEL_17;
        break;
      default:
        if (v15 >= 4
          && ((v16 = *(_QWORD *)(Strong + 16), v16 == a2) ? (v17 = v15 == a3) : (v17 = 0),
              v17 || (_stringCompareWithSmolCheck(_:_:expecting:)(a2, a3, v16, v15, 0) & 1) != 0))
        {
          swift_bridgeObjectRetain(a3);
        }
        else
        {
LABEL_17:
          sub_100007C2C((_QWORD *)(v14 + OBJC_IVAR____TtC11SettingsApp20WiFiListItemProvider_invalidator), *(_QWORD *)(v14 + OBJC_IVAR____TtC11SettingsApp20WiFiListItemProvider_invalidator + 24));
          v28[0] = "WiFi State";
          v28[1] = 10;
          v29 = 2;
          sub_100012F60(a2, a3);
          PassthroughSubject.send(_:)(v28);
        }
        break;
    }
    v18 = *(_QWORD *)(v14 + 16);
    v19 = *(_QWORD *)(v14 + 24);
    *(_QWORD *)(v14 + 16) = a2;
    *(_QWORD *)(v14 + 24) = a3;
    sub_100012F74(v18, v19);
    swift_release(v14);
  }
  if (qword_100156CD8 != -1)
    swift_once(&qword_100156CD8, sub_10008BEEC);
  v20 = type metadata accessor for OSSignposter(0);
  sub_100007808(v20, (uint64_t)qword_10015D340);
  v21 = static OSSignpostID.exclusive.getter();
  v22 = OSSignposter.logHandle.getter(v21);
  v23 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, v6);
    v24 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v24 = 0;
    v25 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v22, v23, v25, "WiFiListItemProvider.updateWiFiState completed", "", v24, 2u);
    swift_slowDealloc(v24, -1, -1);

    v26 = *(void (**)(char *, uint64_t))(v7 + 8);
    v26(v12, v6);
    return ((uint64_t (*)(char *, uint64_t))v26)(v10, v6);
  }
  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  }
}

uint64_t sub_100012D8C@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_100012DC4(*v1 + OBJC_IVAR____TtC11SettingsApp20WiFiListItemProvider_id, a1);
}

void sub_100012DA4(uint64_t a1@<X8>)
{
  sub_100011EAC(a1);
}

uint64_t sub_100012DC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100012E08()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100012E2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _BYTE v6[24];

  v3 = a3 + 16;
  swift_beginAccess(a3 + 16, v6, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    sub_10001228C();
    return swift_release(v5);
  }
  return result;
}

uint64_t sub_100012E80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100012E2C(a1, a2, v2);
}

uint64_t sub_100012E88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  v6 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v6(a2, a3);
  return swift_release(v5);
}

uint64_t sub_100012ED0()
{
  uint64_t v0;

  return sub_100012604(v0);
}

unint64_t sub_100012ED8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015BAB0;
  if (!qword_10015BAB0)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_10015BAB0);
  }
  return result;
}

uint64_t sub_100012F20()
{
  uint64_t v0;
  unint64_t v1;

  swift_release(*(_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 32);
  if (v1 >= 4)
    swift_bridgeObjectRelease(v1);
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100012F54()
{
  uint64_t v0;

  return sub_100012AD8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_100012F60(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 4)
    return swift_bridgeObjectRetain(a2);
  return result;
}

uint64_t sub_100012F74(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 4)
    return swift_bridgeObjectRelease(a2);
  return result;
}

uint64_t sub_100012F88(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t result;

  switch(a2)
  {
    case 0:
      if (a4)
        goto LABEL_14;
      result = 1;
      break;
    case 1:
      if (a4 != 1)
        goto LABEL_14;
      result = 1;
      break;
    case 2:
      if (a4 != 2)
        goto LABEL_14;
      result = 1;
      break;
    case 3:
      if (a4 != 3)
        goto LABEL_14;
      result = 1;
      break;
    default:
      if (a4 < 4)
      {
LABEL_14:
        result = 0;
      }
      else if (a1 == a3 && a2 == a4)
      {
        result = 1;
      }
      else
      {
        result = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0);
      }
      break;
  }
  return result;
}

uint64_t sub_100013014(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100013058()
{
  Swift::Int v0;
  uint64_t result;

  v0 = sub_1000559A0((uint64_t)&off_1001472B0);
  result = swift_arrayDestroy(&unk_1001472D0, 2, &type metadata for String);
  qword_100157560 = v0;
  return result;
}

uint64_t sub_1000130A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  _BOOL4 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  void (*v70)(char *, uint64_t);
  uint64_t v71;
  void (*v72)(char *, uint64_t);
  char v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  char *v85;
  Swift::String_optional v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  NSObject *v93;
  os_log_type_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  void (*v101)(char *, uint64_t);
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t (*v107)(char *, unint64_t, uint64_t);
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  void (*v115)(char *, uint64_t);
  uint64_t v116;
  char v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  char *v135;
  uint64_t v136;
  NSObject *v137;
  os_log_type_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  void (*v145)(char *, uint64_t);
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  NSString v150;
  id v151;
  uint64_t v152;
  unint64_t v153;
  char v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char v190;
  uint64_t v191;
  void (*v192)(uint64_t, uint64_t);
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  void *v205;
  void *v206;
  uint64_t v207;
  uint64_t v208;
  unsigned __int8 *v209;
  char v210;
  unsigned __int8 v211;
  uint64_t v212;
  uint64_t v213;
  Swift::String v214;
  Swift::Bool v215;
  uint64_t v216;
  char v217;
  uint64_t v218;
  unsigned int (*v219)(uint64_t, uint64_t, uint64_t);
  char *v220;
  char v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  NSObject *v227;
  os_log_type_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  unint64_t v234;
  void (*v235)(char *, uint64_t);
  uint64_t v236;
  uint64_t v237;
  void (*v238)(uint64_t, uint64_t);
  char *v239;
  void (*v240)(char *, uint64_t);
  uint64_t v241;
  uint64_t v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  char *v246;
  uint64_t v247;
  char *v248;
  uint64_t v249;
  char *v250;
  char *v251;
  char *v252;
  uint64_t v253;
  char *v254;
  char *v255;
  char *v256;
  uint64_t v257;
  char *v258;
  uint64_t v259;
  char *v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  char *v265;
  uint64_t v266;
  unint64_t v267;
  __int128 v268;
  __int128 v269;
  uint64_t v270;
  uint64_t v271;

  v2 = sub_100004FC8(&qword_10015C890);
  v3 = __chkstk_darwin(v2);
  v250 = (char *)&v243 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v246 = (char *)&v243 - v6;
  __chkstk_darwin(v5);
  v247 = (uint64_t)&v243 - v7;
  v257 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v253 = *(_QWORD *)(v257 - 8);
  v8 = __chkstk_darwin(v257);
  v249 = (uint64_t)&v243 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v245 = (uint64_t)&v243 - v11;
  __chkstk_darwin(v10);
  v252 = (char *)&v243 - v12;
  v13 = sub_100004FC8(&qword_10015C510);
  __chkstk_darwin(v13);
  v15 = (char *)&v243 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for URLQueryItem(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v243 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v258 = (char *)&v243 - v21;
  v22 = sub_100004FC8(&qword_1001570F0);
  v23 = __chkstk_darwin(v22);
  v255 = (char *)&v243 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v23);
  v256 = (char *)&v243 - v26;
  __chkstk_darwin(v25);
  v28 = (char *)&v243 - v27;
  v259 = type metadata accessor for URLComponents(0);
  v261 = *(_QWORD *)(v259 - 8);
  v29 = __chkstk_darwin(v259);
  v251 = (char *)&v243 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __chkstk_darwin(v29);
  v254 = (char *)&v243 - v32;
  __chkstk_darwin(v31);
  v34 = (char *)&v243 - v33;
  v35 = type metadata accessor for URL(0);
  v36 = *(_QWORD *)(v35 - 8);
  v262 = v35;
  v263 = v36;
  v37 = __chkstk_darwin(v35);
  v39 = (char *)&v243 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __chkstk_darwin(v37);
  v248 = (char *)&v243 - v41;
  v42 = __chkstk_darwin(v40);
  v44 = (char *)&v243 - v43;
  v45 = __chkstk_darwin(v42);
  v260 = (char *)&v243 - v46;
  __chkstk_darwin(v45);
  v48 = (char *)&v243 - v47;
  v264 = a1;
  v49 = sub_100019DF4((uint64_t)&v243 - v47);
  v265 = v48;
  v50 = URL.scheme.getter(v49);
  if (v51)
  {
    v52 = v50;
    v53 = v51;
    if (qword_100156C10 != -1)
      swift_once(&qword_100156C10, sub_100013058);
    if ((sub_10003A760(v52, v53, qword_100157560) & 1) != 0)
    {
      if (v52 == 0x7366657270 && v53 == 0xE500000000000000)
      {
        v54 = swift_bridgeObjectRelease(0xE500000000000000);
      }
      else
      {
        v73 = _stringCompareWithSmolCheck(_:_:expecting:)(v52, v53, 0x7366657270, 0xE500000000000000, 0);
        v54 = swift_bridgeObjectRelease(v53);
        if ((v73 & 1) == 0)
        {
          v85 = v265;
          v86 = URL.host(percentEncoded:)(1);
          v87 = v263;
          if (!v86.value._object
            || (v88 = sub_1000B1ED4(v86.value._countAndFlagsBits, (uint64_t)v86.value._object), v88 == 44))
          {
            if (qword_100156CA8 != -1)
              swift_once(&qword_100156CA8, sub_10008BE0C);
            v89 = type metadata accessor for Logger(0);
            sub_100007808(v89, (uint64_t)qword_10015D2B0);
            v90 = v264;
            v91 = v262;
            v92 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v87 + 16))(v44, v264, v262);
            v93 = Logger.logObject.getter(v92);
            v94 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v93, v94))
            {
              v95 = swift_slowAlloc(22, -1);
              v96 = swift_slowAlloc(32, -1);
              v266 = v96;
              *(_DWORD *)v95 = 141558275;
              *(_QWORD *)&v268 = 1752392040;
              v97 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v268, (char *)&v268 + 8, v95 + 4, v95 + 12);
              *(_WORD *)(v95 + 12) = 2081;
              v98 = URL.absoluteString.getter(v97);
              v100 = v99;
              *(_QWORD *)&v268 = sub_1000DA1F0(v98, v99, &v266);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v268, (char *)&v268 + 8, v95 + 14, v95 + 22);
              swift_bridgeObjectRelease(v100);
              v101 = *(void (**)(char *, uint64_t))(v263 + 8);
              v101(v44, v91);
              _os_log_impl((void *)&_mh_execute_header, v93, v94, "Failed to resolve an icon from URL: '%{private,mask.hash}s' due to unsupported host value.", (uint8_t *)v95, 0x16u);
              swift_arrayDestroy(v96, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v96, -1, -1);
              swift_slowDealloc(v95, -1, -1);

              v101((char *)v90, v91);
              v101(v265, v91);
            }
            else
            {

              v115 = *(void (**)(char *, uint64_t))(v87 + 8);
              v115(v44, v91);
              v115((char *)v90, v91);
              v115(v85, v91);
            }
            return 0;
          }
          v116 = v88;
          v117 = 74;
          goto LABEL_35;
        }
      }
      v74 = URL.absoluteString.getter(v54);
      v76 = v75;
      v266 = v74;
      v267 = v75;
      v77 = sub_100008A5C();
      v78 = StringProtocol.removingPercentEncoding.getter(&type metadata for String, v77);
      v80 = v79;
      swift_bridgeObjectRelease(v76);
      if (!v80)
      {
LABEL_52:
        if (qword_100156CA8 != -1)
          swift_once(&qword_100156CA8, sub_10008BE0C);
        v132 = type metadata accessor for Logger(0);
        sub_100007808(v132, (uint64_t)qword_10015D2B0);
        v134 = v263;
        v133 = v264;
        v135 = v260;
        v57 = v262;
        v136 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v263 + 16))(v260, v264, v262);
        v137 = Logger.logObject.getter(v136);
        v138 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v137, v138))
        {

          v145 = *(void (**)(char *, uint64_t))(v134 + 8);
          v145(v135, v57);
          v145((char *)v133, v57);
          v145(v265, v57);
          return 0;
        }
        v139 = swift_slowAlloc(22, -1);
        v140 = swift_slowAlloc(32, -1);
        v266 = v140;
        *(_DWORD *)v139 = 141558275;
        *(_QWORD *)&v268 = 1752392040;
        v141 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v268, (char *)&v268 + 8, v139 + 4, v139 + 12);
        *(_WORD *)(v139 + 12) = 2081;
        v142 = URL.absoluteString.getter(v141);
        v144 = v143;
        *(_QWORD *)&v268 = sub_1000DA1F0(v142, v143, &v266);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v268, (char *)&v268 + 8, v139 + 14, v139 + 22);
        swift_bridgeObjectRelease(v144);
        v70 = *(void (**)(char *, uint64_t))(v263 + 8);
        v70(v135, v57);
        _os_log_impl((void *)&_mh_execute_header, v137, v138, "Failed to resolve an icon from URL: '%{private,mask.hash}s' due to invalid root value.", (uint8_t *)v139, 0x16u);
        swift_arrayDestroy(v140, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v140, -1, -1);
        swift_slowDealloc(v139, -1, -1);

        v71 = v133;
        goto LABEL_56;
      }
      URLComponents.init(string:)(v78);
      swift_bridgeObjectRelease(v80);
      v81 = v261;
      v82 = v259;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v261 + 48))(v28, 1, v259) == 1)
      {
        v83 = &qword_1001570F0;
        v84 = (uint64_t)v28;
LABEL_51:
        sub_10000BA50(v84, v83);
        goto LABEL_52;
      }
      v102 = (*(uint64_t (**)(char *, char *, uint64_t))(v81 + 32))(v34, v28, v82);
      v103 = URLComponents.queryItems.getter(v102);
      if (!v103)
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, 1, 1, v16);
        v114 = v261;
LABEL_50:
        (*(void (**)(char *, uint64_t))(v114 + 8))(v34, v82);
        v83 = &qword_10015C510;
        v84 = (uint64_t)v15;
        goto LABEL_51;
      }
      v104 = v103;
      v105 = *(_QWORD *)(v103 + 16);
      if (v105)
      {
        v106 = v103 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
        v244 = *(_QWORD *)(v17 + 72);
        v107 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v17 + 16);
        v243 = v103;
        swift_bridgeObjectRetain(v103);
        while (1)
        {
          v108 = v107(v20, v106, v16);
          v109 = URLQueryItem.name.getter(v108);
          v111 = v110;
          if (v109 == 1953460082 && v110 == 0xE400000000000000)
          {
            v104 = v243;
            swift_bridgeObjectRelease(v243);
            v131 = 0xE400000000000000;
            goto LABEL_48;
          }
          v112 = _stringCompareWithSmolCheck(_:_:expecting:)(v109, v110, 1953460082, 0xE400000000000000, 0);
          swift_bridgeObjectRelease(v111);
          if ((v112 & 1) != 0)
            break;
          (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
          v106 += v244;
          if (!--v105)
          {
            v104 = v243;
            swift_bridgeObjectRelease(v243);
            v113 = 1;
            v82 = v259;
            goto LABEL_39;
          }
        }
        v104 = v243;
        v131 = v243;
LABEL_48:
        v114 = v261;
        v124 = v258;
        swift_bridgeObjectRelease(v131);
        (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v15, v20, v16);
        v113 = 0;
        v82 = v259;
      }
      else
      {
        v113 = 1;
LABEL_39:
        v114 = v261;
        v124 = v258;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, v113, 1, v16);
      swift_bridgeObjectRelease(v104);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
        goto LABEL_50;
      v147 = (*(uint64_t (**)(char *, char *, uint64_t))(v17 + 32))(v124, v15, v16);
      URLQueryItem.value.getter(v147);
      if (!v148)
      {
        (*(void (**)(char *, uint64_t))(v17 + 8))(v124, v16);
        (*(void (**)(char *, uint64_t))(v261 + 8))(v34, v82);
        goto LABEL_52;
      }
      v149 = v148;
      v150 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v149);
      v151 = (id)SFObjectAndOffsetForURLPair(v150);

      v152 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v151, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
      v270 = 0x7463656A626FLL;
      v271 = 0xE600000000000000;
      AnyHashable.init<A>(_:)(&v266, &v270, &type metadata for String, &protocol witness table for String);
      if (*(_QWORD *)(v152 + 16) && (v153 = sub_1000DA95C((uint64_t)&v266), (v154 & 1) != 0))
      {
        sub_1000148AC(*(_QWORD *)(v152 + 56) + 32 * v153, (uint64_t)&v268);
      }
      else
      {
        v268 = 0u;
        v269 = 0u;
      }
      swift_bridgeObjectRelease(v152);
      sub_100014878((uint64_t)&v266);
      if (*((_QWORD *)&v269 + 1))
      {
        if ((swift_dynamicCast(&v270, &v268, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
        {
          v117 = sub_10006A148(v270, v271);
          (*(void (**)(char *, uint64_t))(v17 + 8))(v124, v16);
          (*(void (**)(char *, uint64_t))(v261 + 8))(v34, v82);
          if (v117 == 74)
            goto LABEL_52;
          v116 = sub_1000697A0(v117);
          v85 = v265;
LABEL_35:
          v118 = 0xD000000000000012;
          v119 = sub_1000B1860(v116);
          v121 = v120;
          v122 = v259;
          if (v119 == 0xD000000000000017 && v120 == 0x800000010011FA20)
          {
            swift_bridgeObjectRelease(0x800000010011FA20);
            v123 = v261;
          }
          else
          {
            v125 = _stringCompareWithSmolCheck(_:_:expecting:)(v119, v120, 0xD000000000000017, 0x800000010011FA20, 0);
            swift_bridgeObjectRelease(v121);
            v123 = v261;
            if ((v125 & 1) == 0)
              goto LABEL_72;
          }
          if (v117 != 74)
          {
            v126 = sub_1000697B4(v117);
            if (v127)
            {
              v128 = v126;
              v129 = v127;
              goto LABEL_73;
            }
          }
          v130 = (uint64_t)v256;
          URLComponents.init(url:resolvingAgainstBaseURL:)(v85, 0);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v123 + 48))(v130, 1, v122) == 1)
          {
            sub_10000BA50(v130, &qword_1001570F0);
          }
          else
          {
            v155 = v254;
            v156 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v123 + 32))(v254, v130, v122);
            v157 = v123;
            v158 = URLComponents.path.getter(v156);
            v160 = v159;
            v266 = v158;
            v267 = v159;
            *(_QWORD *)&v268 = 47;
            *((_QWORD *)&v268 + 1) = 0xE100000000000000;
            v161 = sub_100008A5C();
            v162 = StringProtocol.components<A>(separatedBy:)(&v268, &type metadata for String, &type metadata for String, v161, v161);
            swift_bridgeObjectRelease(v160);
            v163 = *(_QWORD *)(v162 + 16);
            v164 = v163 != 0;
            if (v163 != v164)
            {
              if (v163 <= v164)
              {
                __break(1u);
                goto LABEL_127;
              }
              v199 = v162 + 16 * v164;
              v128 = *(_QWORD *)(v199 + 32);
              v129 = *(_QWORD *)(v199 + 40);
              swift_bridgeObjectRetain(v129);
              swift_bridgeObjectRelease(v162);
              (*(void (**)(char *, uint64_t))(v261 + 8))(v254, v122);
LABEL_73:
              v165 = sub_1000B1860(v116);
              v167 = v166;
              if (v165 == 0xD000000000000012 && v166 == 0x800000010011F480)
              {
                v168 = swift_bridgeObjectRelease(0x800000010011F480);
              }
              else
              {
                v169 = _stringCompareWithSmolCheck(_:_:expecting:)(v165, v166, 0xD000000000000012, 0x800000010011F480, 0);
                v168 = swift_bridgeObjectRelease(v167);
                if ((v169 & 1) == 0)
                  goto LABEL_80;
              }
              v170 = URL.absoluteString.getter(v168);
              v172 = v171;
              v266 = v170;
              v267 = v171;
              v173 = sub_100008A5C();
              v174 = StringProtocol.removingPercentEncoding.getter(&type metadata for String, v173);
              v176 = v175;
              swift_bridgeObjectRelease(v172);
              if (v176)
              {
                v177 = (uint64_t)v255;
                URLComponents.init(string:)(v174);
                swift_bridgeObjectRelease(v176);
                v178 = v261;
                v179 = v259;
                if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v261 + 48))(v177, 1, v259) != 1)
                {
                  v182 = v116;
                  v116 = (uint64_t)v251;
                  v183 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v178 + 32))(v251, v177, v179);
                  v184 = URLComponents.fragment.getter(v183);
                  v181 = v185;
                  v186 = v116;
                  LODWORD(v116) = v182;
                  v180 = v184;
                  (*(void (**)(uint64_t, uint64_t))(v178 + 8))(v186, v179);
                  goto LABEL_82;
                }
                sub_10000BA50(v177, &qword_1001570F0);
              }
LABEL_80:
              v180 = 0;
              v181 = 0;
LABEL_82:
              v187 = sub_1000B1860(v116);
              v189 = v188;
              if (v187 == 0xD000000000000017 && v188 == 0x800000010011FA20)
              {
                swift_bridgeObjectRelease(0x800000010011FA20);
                v116 = v264;
LABEL_86:
                swift_bridgeObjectRelease(v181);
                if (v129)
                {
                  v191 = v262;
                  v192 = *(void (**)(uint64_t, uint64_t))(v263 + 8);
                  v192(v116, v262);
                  v192((uint64_t)v265, v191);
                  return v128;
                }
                v193 = (uint64_t)v252;
                swift_storeEnumTagMultiPayload(v252, v257, 52);
                goto LABEL_123;
              }
              LODWORD(v261) = v116;
              v190 = _stringCompareWithSmolCheck(_:_:expecting:)(v187, v188, 0xD000000000000017, 0x800000010011FA20, 0);
              swift_bridgeObjectRelease(v189);
              v116 = v264;
              if ((v190 & 1) != 0)
                goto LABEL_86;
              swift_bridgeObjectRelease(v129);
              v194 = sub_1000B1860(v261);
              v196 = v195;
              if (v194 == 0xD000000000000012 && v195 == 0x800000010011F480)
              {
                swift_bridgeObjectRelease(0x800000010011F480);
                v197 = v257;
              }
              else
              {
                v200 = _stringCompareWithSmolCheck(_:_:expecting:)(v194, v195, 0xD000000000000012, 0x800000010011F480, 0);
                swift_bridgeObjectRelease(v196);
                v197 = v257;
                if ((v200 & 1) == 0)
                {
                  swift_bridgeObjectRelease(v181);
                  v201 = v253;
                  goto LABEL_118;
                }
              }
              v201 = v253;
              if (v181)
              {
                v202 = HIBYTE(v181) & 0xF;
                if ((v181 & 0x2000000000000000) == 0)
                  v202 = v180 & 0xFFFFFFFFFFFFLL;
                if (v202)
                {
                  v266 = v180;
                  v267 = v181;
                  *(_QWORD *)&v268 = 35;
                  *((_QWORD *)&v268 + 1) = 0xE100000000000000;
                  v270 = 0;
                  v271 = 0xE000000000000000;
                  v203 = sub_100008A5C();
                  v204 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v268, &v270, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v203, v203, v203);
                  v206 = v205;
                  v207 = 44;
                  v208 = v204;
                  v209 = (unsigned __int8 *)&byte_100147E60;
                  while (1)
                  {
                    v211 = *v209++;
                    v210 = v211;
                    sub_1000B1860(v211);
                    v213 = v212;
                    v214._countAndFlagsBits = v208;
                    v214._object = v206;
                    v215 = String.hasSuffix(_:)(v214);
                    swift_bridgeObjectRelease(v213);
                    if (v215)
                      break;
                    if (!--v207)
                    {
                      swift_bridgeObjectRelease(v206);
                      v201 = v253;
                      v216 = (uint64_t)v246;
                      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v253 + 56))(v246, 1, 1, v197);
                      goto LABEL_106;
                    }
                  }
                  swift_bridgeObjectRelease(v206);
                  v216 = (uint64_t)v246;
                  sub_1000B1370(v210);
                  v201 = v253;
                  v219 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v253 + 48);
                  if (v219(v216, 1, v197) != 1)
                  {
                    swift_bridgeObjectRelease(v181);
                    v218 = v247;
                    sub_10000F48C(v216, v247);
                    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v201 + 56))(v218, 0, 1, v197);
                    v116 = v264;
                    v220 = v265;
                    goto LABEL_116;
                  }
LABEL_106:
                  v217 = sub_10006A148(v180, v181);
                  v116 = v264;
                  if (v217 == 74)
                  {
                    v218 = v247;
                    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v201 + 56))(v247, 1, 1, v197);
                  }
                  else
                  {
                    v218 = v247;
                    if (v217 == 73)
                    {
                      swift_storeEnumTagMultiPayload(v247, v197, 8);
                      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v201 + 56))(v218, 0, 1, v197);
                    }
                    else
                    {
                      v221 = sub_1000697A0(v217);
                      sub_1000B1370(v221);
                    }
                  }
                  v220 = v265;
                  sub_10000BA50(v216, &qword_10015C890);
                  v219 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v201 + 48);
LABEL_116:
                  if (v219(v218, 1, v197) != 1)
                  {
                    v241 = v245;
                    sub_10000F48C(v218, v245);
                    sub_10009C7A4();
                    v128 = v242;
                    v237 = v262;
                    v238 = *(void (**)(uint64_t, uint64_t))(v263 + 8);
                    v238(v116, v262);
                    sub_100013014(v241);
                    v239 = v220;
                    goto LABEL_124;
                  }
                  sub_10000BA50(v218, &qword_10015C890);
                }
                else
                {
                  swift_bridgeObjectRelease(v181);
                }
              }
LABEL_118:
              v222 = (uint64_t)v250;
              sub_1000B1370(v261);
              if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v201 + 48))(v222, 1, v197) != 1)
              {
                v193 = v249;
                sub_10000F48C(v222, v249);
LABEL_123:
                sub_10009C7A4();
                v128 = v236;
                v237 = v262;
                v238 = *(void (**)(uint64_t, uint64_t))(v263 + 8);
                v238(v116, v262);
                sub_100013014(v193);
                v239 = v265;
LABEL_124:
                v238((uint64_t)v239, v237);
                return v128;
              }
              sub_10000BA50(v222, &qword_10015C890);
              v85 = v265;
              v118 = v263;
              if (qword_100156CA8 == -1)
              {
LABEL_120:
                v223 = type metadata accessor for Logger(0);
                sub_100007808(v223, (uint64_t)qword_10015D2B0);
                v224 = v248;
                v225 = v262;
                v226 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v118 + 16))(v248, v116, v262);
                v227 = Logger.logObject.getter(v226);
                v228 = static os_log_type_t.error.getter();
                if (os_log_type_enabled(v227, v228))
                {
                  v229 = swift_slowAlloc(22, -1);
                  v230 = swift_slowAlloc(32, -1);
                  v266 = v230;
                  *(_DWORD *)v229 = 141558275;
                  *(_QWORD *)&v268 = 1752392040;
                  v231 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v268, (char *)&v268 + 8, v229 + 4, v229 + 12);
                  *(_WORD *)(v229 + 12) = 2081;
                  v232 = URL.absoluteString.getter(v231);
                  v234 = v233;
                  *(_QWORD *)&v268 = sub_1000DA1F0(v232, v233, &v266);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v268, (char *)&v268 + 8, v229 + 14, v229 + 22);
                  swift_bridgeObjectRelease(v234);
                  v235 = *(void (**)(char *, uint64_t))(v263 + 8);
                  v235(v224, v225);
                  _os_log_impl((void *)&_mh_execute_header, v227, v228, "Failed to resolve an icon from URL: '%{private,mask.hash}s' after processing URL.", (uint8_t *)v229, 0x16u);
                  swift_arrayDestroy(v230, 1, (char *)&type metadata for Any + 8);
                  swift_slowDealloc(v230, -1, -1);
                  swift_slowDealloc(v229, -1, -1);

                  v235((char *)v116, v225);
                  v235(v265, v225);
                }
                else
                {

                  v240 = *(void (**)(char *, uint64_t))(v118 + 8);
                  v240(v224, v225);
                  v240((char *)v116, v225);
                  v240(v85, v225);
                }
                return 0;
              }
LABEL_127:
              swift_once(&qword_100156CA8, sub_10008BE0C);
              goto LABEL_120;
            }
            swift_bridgeObjectRelease(v162);
            (*(void (**)(char *, uint64_t))(v157 + 8))(v155, v122);
          }
LABEL_72:
          v128 = 0;
          v129 = 0;
          goto LABEL_73;
        }
      }
      else
      {
        sub_10000BA50((uint64_t)&v268, &qword_10015BA90);
      }
      v198 = v261;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v124, v16);
      (*(void (**)(char *, uint64_t))(v198 + 8))(v34, v82);
      goto LABEL_52;
    }
    swift_bridgeObjectRelease(v53);
  }
  if (qword_100156CA8 != -1)
    swift_once(&qword_100156CA8, sub_10008BE0C);
  v55 = type metadata accessor for Logger(0);
  sub_100007808(v55, (uint64_t)qword_10015D2B0);
  v57 = v262;
  v56 = v263;
  v58 = v265;
  v59 = (*(uint64_t (**)(char *, char *, uint64_t))(v263 + 16))(v39, v265, v262);
  v60 = Logger.logObject.getter(v59);
  v61 = static os_log_type_t.error.getter();
  v62 = os_log_type_enabled(v60, v61);
  v63 = v264;
  if (v62)
  {
    v64 = swift_slowAlloc(22, -1);
    v65 = swift_slowAlloc(32, -1);
    v266 = v65;
    *(_DWORD *)v64 = 141558275;
    *(_QWORD *)&v268 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v268, (char *)&v268 + 8, v64 + 4, v64 + 12);
    *(_WORD *)(v64 + 12) = 2081;
    v66 = sub_100014830();
    v67 = dispatch thunk of CustomStringConvertible.description.getter(v57, v66);
    v69 = v68;
    *(_QWORD *)&v268 = sub_1000DA1F0(v67, v68, &v266);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v268, (char *)&v268 + 8, v64 + 14, v64 + 22);
    swift_bridgeObjectRelease(v69);
    v70 = *(void (**)(char *, uint64_t))(v56 + 8);
    v70(v39, v57);
    _os_log_impl((void *)&_mh_execute_header, v60, v61, "Cannot resolve icon from unsupported url scheme '%{private,mask.hash}s'", (uint8_t *)v64, 0x16u);
    swift_arrayDestroy(v65, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v65, -1, -1);
    swift_slowDealloc(v64, -1, -1);

    v71 = v264;
LABEL_56:
    v70((char *)v71, v57);
    v70(v265, v57);
    return 0;
  }

  v72 = *(void (**)(char *, uint64_t))(v56 + 8);
  v72(v39, v57);
  v72((char *)v63, v57);
  v72(v58, v57);
  return 0;
}

unint64_t sub_100014830()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015C650;
  if (!qword_10015C650)
  {
    v1 = type metadata accessor for URL(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for URL, v1);
    atomic_store(result, (unint64_t *)&qword_10015C650);
  }
  return result;
}

uint64_t sub_100014878(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for AnyHashable - 1) + 8))();
  return a1;
}

uint64_t sub_1000148AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

_QWORD *sub_1000148E8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  id v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;

  v4 = type metadata accessor for PrimarySettingsListImagelessLinkModel(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v6 = (int *)v4;
    v7 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(a2, v7))
    {
      case 0u:
        v8 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
        v9 = a1;
        v10 = v7;
        v11 = 0;
        goto LABEL_14;
      case 1u:
        v13 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
        v9 = a1;
        v10 = v7;
        v11 = 1;
        goto LABEL_14;
      case 2u:
        v14 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
        v15 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v16 = (_QWORD *)((char *)a1 + v15);
        v17 = (_QWORD *)((char *)a2 + v15);
        v18 = v17[1];
        *v16 = *v17;
        v16[1] = v18;
        swift_bridgeObjectRetain(v18);
        v9 = a1;
        v10 = v7;
        v11 = 2;
        goto LABEL_14;
      case 3u:
        v19 = a2[1];
        *a1 = *a2;
        a1[1] = v19;
        v20 = a2[3];
        a1[2] = a2[2];
        a1[3] = v20;
        v21 = a2[5];
        a1[4] = a2[4];
        a1[5] = v21;
        v22 = a2[7];
        a1[6] = a2[6];
        a1[7] = v22;
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v22);
        v9 = a1;
        v10 = v7;
        v11 = 3;
        goto LABEL_14;
      case 4u:
        v23 = a2[1];
        *a1 = *a2;
        a1[1] = v23;
        v24 = a2[3];
        a1[2] = a2[2];
        a1[3] = v24;
        v25 = a2[5];
        a1[4] = a2[4];
        a1[5] = v25;
        a1[6] = a2[6];
        swift_bridgeObjectRetain(v23);
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v25);
        v9 = a1;
        v10 = v7;
        v11 = 4;
        goto LABEL_14;
      case 5u:
        v26 = a2[1];
        *a1 = *a2;
        a1[1] = v26;
        v27 = a2[3];
        a1[2] = a2[2];
        a1[3] = v27;
        v29 = (void *)a2[4];
        v28 = a2[5];
        a1[4] = v29;
        a1[5] = v28;
        v30 = a2[9];
        swift_bridgeObjectRetain(v26);
        swift_bridgeObjectRetain(v27);
        v31 = v29;
        swift_bridgeObjectRetain(v28);
        if (v30)
        {
          a1[9] = v30;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v30 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v30);
        }
        else
        {
          v32 = *((_OWORD *)a2 + 4);
          *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
          *((_OWORD *)a1 + 4) = v32;
        }
        v9 = a1;
        v10 = v7;
        v11 = 5;
LABEL_14:
        swift_storeEnumTagMultiPayload(v9, v10, v11);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
        break;
    }
    *((_BYTE *)a1 + v6[5]) = *((_BYTE *)a2 + v6[5]);
    v33 = v6[6];
    v34 = (char *)a1 + v33;
    v35 = (char *)a2 + v33;
    v36 = *(_QWORD *)((char *)a2 + v33);
    v37 = *(_QWORD *)((char *)a2 + v33 + 8);
    v38 = *((_BYTE *)a2 + v33 + 16);
    sub_10000BAD4(v36, v37, v38);
    *(_QWORD *)v34 = v36;
    *((_QWORD *)v34 + 1) = v37;
    v34[16] = v38;
    v39 = *((_QWORD *)v35 + 3);
    *((_QWORD *)v34 + 3) = v39;
    *((_BYTE *)a1 + v6[7]) = *((_BYTE *)a2 + v6[7]);
    swift_bridgeObjectRetain(v39);
  }
  return a1;
}

uint64_t sub_100014BC4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(a1, v2))
  {
    case 0u:
    case 1u:
      v3 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
      break;
    case 2u:
      v4 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
      v5 = sub_100004FC8(&qword_10015C420);
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v5 + 48) + 8));
      break;
    case 3u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
      break;
    case 4u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      break;
    case 5u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));

      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      if (*(_QWORD *)(a1 + 72))
        sub_100005474((_QWORD *)(a1 + 48));
      break;
    default:
      break;
  }
  v6 = a1 + *(int *)(type metadata accessor for PrimarySettingsListImagelessLinkModel(0) + 24);
  sub_100007618(*(_QWORD *)v6, *(_QWORD *)(v6 + 8), *(_BYTE *)(v6 + 16));
  return swift_bridgeObjectRelease(*(_QWORD *)(v6 + 24));
}

_QWORD *sub_100014D04(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  id v27;
  __int128 v28;
  int *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;

  v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(a2, v4))
  {
    case 0u:
      v5 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
      v6 = a1;
      v7 = v4;
      v8 = 0;
      goto LABEL_12;
    case 1u:
      v9 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      v6 = a1;
      v7 = v4;
      v8 = 1;
      goto LABEL_12;
    case 2u:
      v10 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      v11 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
      v12 = (_QWORD *)((char *)a1 + v11);
      v13 = (_QWORD *)((char *)a2 + v11);
      v14 = v13[1];
      *v12 = *v13;
      v12[1] = v14;
      swift_bridgeObjectRetain(v14);
      v6 = a1;
      v7 = v4;
      v8 = 2;
      goto LABEL_12;
    case 3u:
      v15 = a2[1];
      *a1 = *a2;
      a1[1] = v15;
      v16 = a2[3];
      a1[2] = a2[2];
      a1[3] = v16;
      v17 = a2[5];
      a1[4] = a2[4];
      a1[5] = v17;
      v18 = a2[7];
      a1[6] = a2[6];
      a1[7] = v18;
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v18);
      v6 = a1;
      v7 = v4;
      v8 = 3;
      goto LABEL_12;
    case 4u:
      v19 = a2[1];
      *a1 = *a2;
      a1[1] = v19;
      v20 = a2[3];
      a1[2] = a2[2];
      a1[3] = v20;
      v21 = a2[5];
      a1[4] = a2[4];
      a1[5] = v21;
      a1[6] = a2[6];
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRetain(v21);
      v6 = a1;
      v7 = v4;
      v8 = 4;
      goto LABEL_12;
    case 5u:
      v22 = a2[1];
      *a1 = *a2;
      a1[1] = v22;
      v23 = a2[3];
      a1[2] = a2[2];
      a1[3] = v23;
      v25 = (void *)a2[4];
      v24 = a2[5];
      a1[4] = v25;
      a1[5] = v24;
      v26 = a2[9];
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v23);
      v27 = v25;
      swift_bridgeObjectRetain(v24);
      if (v26)
      {
        a1[9] = v26;
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v26 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v26);
      }
      else
      {
        v28 = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 4) = v28;
      }
      v6 = a1;
      v7 = v4;
      v8 = 5;
LABEL_12:
      swift_storeEnumTagMultiPayload(v6, v7, v8);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
      break;
  }
  v29 = (int *)type metadata accessor for PrimarySettingsListImagelessLinkModel(0);
  *((_BYTE *)a1 + v29[5]) = *((_BYTE *)a2 + v29[5]);
  v30 = v29[6];
  v31 = (char *)a1 + v30;
  v32 = (char *)a2 + v30;
  v33 = *(_QWORD *)((char *)a2 + v30);
  v34 = *(_QWORD *)((char *)a2 + v30 + 8);
  v35 = *((_BYTE *)a2 + v30 + 16);
  sub_10000BAD4(v33, v34, v35);
  *(_QWORD *)v31 = v33;
  *((_QWORD *)v31 + 1) = v34;
  v31[16] = v35;
  v36 = *((_QWORD *)v32 + 3);
  *((_QWORD *)v31 + 3) = v36;
  *((_BYTE *)a1 + v29[7]) = *((_BYTE *)a2 + v29[7]);
  swift_bridgeObjectRetain(v36);
  return a1;
}

_QWORD *sub_100014FB4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  __int128 v28;
  int *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;

  if (a1 != a2)
  {
    sub_100013014((uint64_t)a1);
    v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(a2, v4))
    {
      case 0u:
        v5 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
        v6 = a1;
        v7 = v4;
        v8 = 0;
        goto LABEL_13;
      case 1u:
        v9 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
        v6 = a1;
        v7 = v4;
        v8 = 1;
        goto LABEL_13;
      case 2u:
        v10 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
        v11 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v12 = (_QWORD *)((char *)a1 + v11);
        v13 = (_QWORD *)((char *)a2 + v11);
        *v12 = *v13;
        v14 = v13[1];
        v12[1] = v14;
        swift_bridgeObjectRetain(v14);
        v6 = a1;
        v7 = v4;
        v8 = 2;
        goto LABEL_13;
      case 3u:
        *a1 = *a2;
        v15 = a2[1];
        a1[1] = v15;
        a1[2] = a2[2];
        v16 = a2[3];
        a1[3] = v16;
        a1[4] = a2[4];
        v17 = a2[5];
        a1[5] = v17;
        a1[6] = a2[6];
        v18 = a2[7];
        a1[7] = v18;
        swift_bridgeObjectRetain(v15);
        swift_bridgeObjectRetain(v16);
        swift_bridgeObjectRetain(v17);
        swift_bridgeObjectRetain(v18);
        v6 = a1;
        v7 = v4;
        v8 = 3;
        goto LABEL_13;
      case 4u:
        *a1 = *a2;
        v19 = a2[1];
        a1[1] = v19;
        a1[2] = a2[2];
        v20 = a2[3];
        a1[3] = v20;
        a1[4] = a2[4];
        v21 = a2[5];
        a1[5] = v21;
        a1[6] = a2[6];
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v21);
        v6 = a1;
        v7 = v4;
        v8 = 4;
        goto LABEL_13;
      case 5u:
        *a1 = *a2;
        v22 = a2[1];
        a1[1] = v22;
        a1[2] = a2[2];
        v23 = a2[3];
        a1[3] = v23;
        v24 = (void *)a2[4];
        a1[4] = v24;
        v25 = a2[5];
        a1[5] = v25;
        v26 = a2[9];
        swift_bridgeObjectRetain(v22);
        swift_bridgeObjectRetain(v23);
        v27 = v24;
        swift_bridgeObjectRetain(v25);
        if (v26)
        {
          a1[9] = v26;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v26 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v26);
        }
        else
        {
          v28 = *((_OWORD *)a2 + 4);
          *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
          *((_OWORD *)a1 + 4) = v28;
        }
        v6 = a1;
        v7 = v4;
        v8 = 5;
LABEL_13:
        swift_storeEnumTagMultiPayload(v6, v7, v8);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
        break;
    }
  }
  v29 = (int *)type metadata accessor for PrimarySettingsListImagelessLinkModel(0);
  *((_BYTE *)a1 + v29[5]) = *((_BYTE *)a2 + v29[5]);
  v30 = v29[6];
  v31 = (char *)a1 + v30;
  v32 = (char *)a2 + v30;
  v33 = *(_QWORD *)((char *)a2 + v30);
  v34 = *(_QWORD *)((char *)a2 + v30 + 8);
  v35 = *((_BYTE *)a2 + v30 + 16);
  sub_10000BAD4(v33, v34, v35);
  v36 = *(_QWORD *)v31;
  v37 = *((_QWORD *)v31 + 1);
  v38 = v31[16];
  *(_QWORD *)v31 = v33;
  *((_QWORD *)v31 + 1) = v34;
  v31[16] = v35;
  sub_100007618(v36, v37, v38);
  v39 = *((_QWORD *)v32 + 3);
  v40 = *((_QWORD *)v31 + 3);
  *((_QWORD *)v31 + 3) = v39;
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRelease(v40);
  *((_BYTE *)a1 + v29[7]) = *((_BYTE *)a2 + v29[7]);
  return a1;
}

char *sub_1000152E4(char *a1, char *a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;

  v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v4);
  if (EnumCaseMultiPayload == 2)
  {
    v7 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    v8 = sub_100004FC8(&qword_10015C420);
    *(_OWORD *)&a1[*(int *)(v8 + 48)] = *(_OWORD *)&a2[*(int *)(v8 + 48)];
    swift_storeEnumTagMultiPayload(a1, v4, 2);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v9 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
    swift_storeEnumTagMultiPayload(a1, v4, 1);
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    v6 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, v4, 0);
  }
  v10 = (int *)type metadata accessor for PrimarySettingsListImagelessLinkModel(0);
  a1[v10[5]] = a2[v10[5]];
  v11 = v10[6];
  v12 = &a1[v11];
  v13 = &a2[v11];
  v14 = *((_OWORD *)v13 + 1);
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *((_OWORD *)v12 + 1) = v14;
  a1[v10[7]] = a2[v10[7]];
  return a1;
}

char *sub_100015438(char *a1, char *a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;

  if (a1 != a2)
  {
    sub_100013014((uint64_t)a1);
    v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v4);
    if (EnumCaseMultiPayload == 2)
    {
      v7 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      v8 = sub_100004FC8(&qword_10015C420);
      *(_OWORD *)&a1[*(int *)(v8 + 48)] = *(_OWORD *)&a2[*(int *)(v8 + 48)];
      swift_storeEnumTagMultiPayload(a1, v4, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v9 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      swift_storeEnumTagMultiPayload(a1, v4, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, v4, 0);
    }
  }
  v10 = (int *)type metadata accessor for PrimarySettingsListImagelessLinkModel(0);
  a1[v10[5]] = a2[v10[5]];
  v11 = v10[6];
  v12 = &a1[v11];
  v13 = &a2[v11];
  LOBYTE(v11) = a2[v11 + 16];
  v14 = *(_QWORD *)v12;
  v15 = *((_QWORD *)v12 + 1);
  v16 = v12[16];
  *(_OWORD *)v12 = *(_OWORD *)v13;
  v12[16] = v11;
  sub_100007618(v14, v15, v16);
  v17 = *((_QWORD *)v12 + 3);
  *((_QWORD *)v12 + 3) = *((_QWORD *)v13 + 3);
  swift_bridgeObjectRelease(v17);
  a1[v10[7]] = a2[v10[7]];
  return a1;
}

uint64_t sub_1000155CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000155D8);
}

uint64_t sub_1000155D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PrimarySettingsListImagelessLinkModel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_100015614(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100015620);
}

uint64_t sub_100015620(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PrimarySettingsListImagelessLinkModel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for PrimarySettingsListImagelessLink(uint64_t a1)
{
  uint64_t result;

  result = qword_1001575C0;
  if (!qword_1001575C0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PrimarySettingsListImagelessLink);
  return result;
}

uint64_t sub_10001569C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for PrimarySettingsListImagelessLinkModel(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100015704(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100129D94, 1);
}

uint64_t sub_100015714@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  double v10;

  v3 = type metadata accessor for PrimarySettingsListImagelessLinkModel(0);
  v4 = *(int *)(v3 + 20);
  v5 = v1 + *(int *)(v3 + 24);
  v6 = *(_QWORD *)v5;
  v7 = *(_QWORD *)(v5 + 8);
  v8 = *(_BYTE *)(v5 + 16);
  v9 = *(_QWORD *)(v5 + 24);
  v10 = 1.0;
  if (*(_BYTE *)(v1 + v4))
    v10 = 0.5;
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  *(double *)(a1 + 32) = v10;
  sub_10000BAD4(v6, v7, v8);
  return swift_bridgeObjectRetain(v9);
}

unint64_t sub_100015784()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001575F8;
  if (!qword_1001575F8)
  {
    v1 = sub_100005430(&qword_100157600);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001575F8);
  }
  return result;
}

uint64_t sub_1000157E8()
{
  uint64_t v0;
  uint64_t result;

  if (*(_BYTE *)(v0 + 32) != 1)
    return *(_QWORD *)(v0 + 24);
  result = sub_100015820(v0);
  *(_QWORD *)(v0 + 24) = result;
  *(_BYTE *)(v0 + 32) = 0;
  return result;
}

uint64_t sub_100015820(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  NSString v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  id aBlock[5];
  uint64_t v29;

  v2 = sub_100004FC8((uint64_t *)&unk_10015C970);
  __chkstk_darwin(v2);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for NSNotificationCenter.Publisher(0);
  v26 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004FC8((uint64_t *)&unk_100156F10);
  v27 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = String._bridgeToObjectiveC()();
  v12 = sub_100005494();
  v13 = (void *)static OS_dispatch_queue.main.getter();
  v14 = _CTServerConnectionCreateOnTargetQueue(kCFAllocatorDefault, v11, v13, 0);

  v15 = kCTCellularDataSettingsChangeNotification;
  v16 = swift_allocObject(&unk_1001489F8, 24, 7);
  swift_weakInit(v16 + 16, a1);
  aBlock[4] = sub_1000161FC;
  v29 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_100015D2C;
  aBlock[3] = &unk_100148A10;
  v17 = _Block_copy(aBlock);
  swift_release(v29);
  _CTServerConnectionRegisterBlockForNotification(v14, v15, v17);
  _Block_release(v17);
  v18 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  NSNotificationCenter.publisher(for:object:)(UIApplicationWillEnterForegroundNotification, 0);

  aBlock[0] = (id)static OS_dispatch_queue.main.getter();
  v19 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v4, 1, 1, v19);
  v20 = sub_100007828((unint64_t *)&unk_100156F20, (uint64_t (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Publisher, (uint64_t)&protocol conformance descriptor for NSNotificationCenter.Publisher);
  v21 = sub_100007828((unint64_t *)&qword_10015C990, (uint64_t (*)(uint64_t))sub_100005494, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(aBlock, v4, v5, v12, v20, v21);
  sub_10000778C((uint64_t)v4);

  (*(void (**)(char *, uint64_t))(v26 + 8))(v7, v5);
  v22 = swift_allocObject(&unk_1001489F8, 24, 7);
  swift_weakInit(v22 + 16, a1);
  v23 = sub_100016204();
  v24 = Publisher<>.sink(receiveValue:)(sub_1000161FC, v22, v8, v23);
  swift_release(v22);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v10, v8);
  a1 += 80;
  swift_beginAccess(a1, aBlock, 33, 0);
  AnyCancellable.store(in:)(a1);
  swift_endAccess(aBlock);
  swift_release(v24);
  return v14;
}

uint64_t sub_100015B9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v7, 0, 0);
  Strong = swift_weakLoadStrong(v2);
  if (Strong)
  {
    *(_BYTE *)(Strong + 16) = 0;
    swift_release(Strong);
  }
  swift_beginAccess(v2, &v6, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v5 = result;
    sub_100015C18();
    return swift_release(v5);
  }
  return result;
}

void sub_100015C18()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  void *v3;
  int cellularDataCapability;
  uint64_t v5;
  int v6;
  _QWORD v7[2];
  char v8;
  unsigned __int8 v9;

  v1 = v0;
  if ((PSIsInEDUMode() & 1) == 0)
  {
    v2 = (id)MobileGestalt_get_current_device();
    if (v2)
    {
      v3 = v2;
      cellularDataCapability = MobileGestalt_get_cellularDataCapability(v2);

      if (cellularDataCapability)
      {
        if ((*(_BYTE *)(v1 + 16) & 1) == 0)
        {
          v9 = *(_BYTE *)(v1 + 18);
          v5 = sub_1000157E8();
          if (!_CTServerConnectionGetCellularDataIsEnabled(v5, &v9))
          {
            v6 = v9;
            if ((v9 != 0) != *(_BYTE *)(v1 + 18))
            {
              sub_100007C2C((_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 64));
              v7[0] = "Cellular Data";
              v7[1] = 13;
              v8 = 2;
              PassthroughSubject.send(_:)(v7);
            }
            *(_BYTE *)(v1 + 18) = v6 != 0;
            *(_BYTE *)(v1 + 16) = 1;
          }
        }
      }
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_100015D2C(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void *);
  id v5;

  v4 = *(void (**)(void *))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4(a2);
  swift_release(v3);

}

_QWORD *sub_100015D80()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *result;
  void *v3;
  int cellularDataCapability;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[24];
  _QWORD v33[5];

  v1 = v0;
  if ((PSIsInEDUMode() & 1) != 0)
    goto LABEL_37;
  result = (id)MobileGestalt_get_current_device();
  if (!result)
    goto LABEL_39;
  v3 = result;
  cellularDataCapability = MobileGestalt_get_cellularDataCapability(result);

  if (!cellularDataCapability)
  {
LABEL_37:
    sub_100005474((_QWORD *)(v1 + 40));
    swift_bridgeObjectRelease(*(_QWORD *)(v1 + 80));
    return (_QWORD *)v1;
  }
  swift_beginAccess(v1 + 80, v32, 1, 0);
  v5 = *(_QWORD *)(v1 + 80);
  if ((v5 & 0xC000000000000001) != 0)
  {
    if (v5 < 0)
      v6 = *(_QWORD *)(v1 + 80);
    else
      v6 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)(v1 + 80));
    v7 = __CocoaSet.makeIterator()(v6);
    v8 = type metadata accessor for AnyCancellable(0);
    v9 = sub_100007828((unint64_t *)&qword_100156FB8, (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable, (uint64_t)&protocol conformance descriptor for AnyCancellable);
    result = Set.Iterator.init(_cocoa:)(v33, v7, v8, v9);
    v5 = v33[0];
    v29 = v33[1];
    v10 = v33[2];
    v11 = v33[3];
    v12 = v33[4];
  }
  else
  {
    v13 = -1 << *(_BYTE *)(v5 + 32);
    v29 = v5 + 56;
    v10 = ~v13;
    v14 = -v13;
    if (v14 < 64)
      v15 = ~(-1 << v14);
    else
      v15 = -1;
    v12 = v15 & *(_QWORD *)(v5 + 56);
    result = (_QWORD *)swift_bridgeObjectRetain(v5);
    v11 = 0;
  }
  v16 = (unint64_t)(v10 + 64) >> 6;
  if (v5 < 0)
    goto LABEL_16;
  while (1)
  {
    if (v12)
    {
      v17 = (v12 - 1) & v12;
      v18 = __clz(__rbit64(v12)) | (v11 << 6);
      v19 = v11;
      goto LABEL_33;
    }
    v24 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v24 >= v16)
      goto LABEL_36;
    v25 = *(_QWORD *)(v29 + 8 * v24);
    v19 = v11 + 1;
    if (!v25)
    {
      v19 = v11 + 2;
      if (v11 + 2 >= v16)
        goto LABEL_36;
      v25 = *(_QWORD *)(v29 + 8 * v19);
      if (!v25)
      {
        v19 = v11 + 3;
        if (v11 + 3 >= v16)
          goto LABEL_36;
        v25 = *(_QWORD *)(v29 + 8 * v19);
        if (!v25)
        {
          v19 = v11 + 4;
          if (v11 + 4 >= v16)
            goto LABEL_36;
          v25 = *(_QWORD *)(v29 + 8 * v19);
          if (!v25)
          {
            v26 = v11 + 5;
            while (v16 != v26)
            {
              v25 = *(_QWORD *)(v29 + 8 * v26++);
              if (v25)
              {
                v19 = v26 - 1;
                goto LABEL_32;
              }
            }
LABEL_36:
            sub_100007C50(v5);
            v27 = *(_QWORD *)(v1 + 80);
            *(_QWORD *)(v1 + 80) = &_swiftEmptySetSingleton;
            swift_bridgeObjectRelease(v27);
            v28 = sub_1000157E8();
            _CTServerConnectionUnregisterForNotification(v28, kCTCellularDataSettingsChangeNotification);
            *(_QWORD *)(v1 + 24) = 0;
            *(_BYTE *)(v1 + 32) = 0;
            goto LABEL_37;
          }
        }
      }
    }
LABEL_32:
    v17 = (v25 - 1) & v25;
    v18 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_33:
    v23 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v18);
    swift_retain(v23);
    if (!v23)
      goto LABEL_36;
    while (1)
    {
      AnyCancellable.cancel()();
      result = (_QWORD *)swift_release(v23);
      v11 = v19;
      v12 = v17;
      if ((v5 & 0x8000000000000000) == 0)
        break;
LABEL_16:
      v20 = __CocoaSet.Iterator.next()(result);
      if (v20)
      {
        v21 = v20;
        v30 = v20;
        v22 = type metadata accessor for AnyCancellable(0);
        swift_unknownObjectRetain(v21);
        swift_dynamicCast(&v31, &v30, (char *)&type metadata for Swift.AnyObject + 8, v22, 7);
        v23 = v31;
        swift_unknownObjectRelease(v21);
        v19 = v11;
        v17 = v12;
        if (v23)
          continue;
      }
      goto LABEL_36;
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_10001608C()
{
  uint64_t v0;

  sub_100015D80();
  return swift_deallocClassInstance(v0, 88, 7);
}

uint64_t type metadata accessor for CellularDataSettingObserver()
{
  return objc_opt_self(_TtC11SettingsApp27CellularDataSettingObserver);
}

void sub_1000160CC()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  void *v3;
  int cellularDataCapability;
  uint64_t v5;
  int v6;
  _QWORD v7[2];
  char v8;
  unsigned __int8 v9;

  v1 = v0;
  if ((PSIsInEDUMode() & 1) == 0)
  {
    v2 = (id)MobileGestalt_get_current_device();
    if (v2)
    {
      v3 = v2;
      cellularDataCapability = MobileGestalt_get_cellularDataCapability(v2);

      if (cellularDataCapability && (*(_BYTE *)(v1 + 17) & 1) == 0)
      {
        v9 = 0;
        v5 = sub_1000157E8();
        _CTServerConnectionGetRadioModuleIsDead(v5, &v9);
        v6 = v9;
        if ((v9 != 0) != *(_BYTE *)(v1 + 19))
        {
          sub_100007C2C((_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 64));
          v7[0] = "Cellular Radio Check";
          v7[1] = 20;
          v8 = 2;
          PassthroughSubject.send(_:)(v7);
        }
        *(_BYTE *)(v1 + 19) = v6 != 0;
        *(_BYTE *)(v1 + 17) = 1;
      }
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t sub_1000161D8()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000161FC(uint64_t a1)
{
  uint64_t v1;

  return sub_100015B9C(a1, v1);
}

unint64_t sub_100016204()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100156F30;
  if (!qword_100156F30)
  {
    v1 = sub_100005430((uint64_t *)&unk_100156F10);
    result = swift_getWitnessTable(&protocol conformance descriptor for Publishers.ReceiveOn<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100156F30);
  }
  return result;
}

id sub_10001627C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100016304()
{
  return type metadata accessor for AppleAccountSignInSheet.Coordinator(0);
}

uint64_t type metadata accessor for AppleAccountSignInSheet.Coordinator(uint64_t a1)
{
  return sub_10000D3C4(a1, (uint64_t *)&unk_100157708, (uint64_t)&nominal type descriptor for AppleAccountSignInSheet.Coordinator);
}

uint64_t sub_100016320(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v4;
  _QWORD v5[2];

  result = type metadata accessor for DismissAction(319, a2);
  if (v4 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = (char *)&value witness table for () + 64;
    result = swift_updateClassMetadata2(a1, 256, 2, v5, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

id sub_100016398()
{
  id v0;
  uint64_t v1;
  void *v2;
  void *v4;

  v0 = objc_msgSend(objc_allocWithZone((Class)AAUISignInController), "init");
  v1 = sub_100004FC8(&qword_100157838);
  UIViewControllerRepresentableContext.coordinator.getter(&v4, v1);
  v2 = v4;
  objc_msgSend(v0, "setDelegate:", v4);

  return v0;
}

uint64_t sub_100016414@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  objc_class *v13;
  char *v14;
  char *v15;
  id v16;
  uint64_t result;
  objc_super v18;

  v6 = type metadata accessor for DismissAction(0, a2);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100063238((uint64_t)v9);
  v10 = (uint64_t *)(v3 + *(int *)(a1 + 20));
  v12 = *v10;
  v11 = v10[1];
  v13 = (objc_class *)type metadata accessor for AppleAccountSignInSheet.Coordinator(0);
  v14 = (char *)objc_allocWithZone(v13);
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(&v14[OBJC_IVAR____TtCV11SettingsApp23AppleAccountSignInSheet11Coordinator_dismissAction], v9, v6);
  v15 = &v14[OBJC_IVAR____TtCV11SettingsApp23AppleAccountSignInSheet11Coordinator_onSuccess];
  *(_QWORD *)v15 = v12;
  *((_QWORD *)v15 + 1) = v11;
  v18.receiver = v14;
  v18.super_class = v13;
  swift_retain(v11);
  v16 = objc_msgSendSuper2(&v18, "init");
  result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  *a3 = v16;
  return result;
}

uint64_t sub_100016518(uint64_t a1, char a2)
{
  return UIViewControllerRepresentable.sizeThatFits(_:uiViewController:context:)(a1, a2 & 1);
}

uint64_t sub_100016550(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100016EA8(&qword_100157830, (uint64_t)&unk_100114818);
  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000165B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100016EA8(&qword_100157830, (uint64_t)&unk_100114818);
  return static UIViewControllerRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_100016610(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100016EA8(&qword_100157830, (uint64_t)&unk_100114818);
  UIViewControllerRepresentable.body.getter(a1, v2);
  __break(1u);
}

unint64_t sub_100016710()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100157778;
  if (!qword_100157778)
  {
    v1 = objc_opt_self(AIDAServiceOperationResult);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100157778);
  }
  return result;
}

void sub_10001674C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  id v9;

  v2 = v1;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(AIDAServiceTypeCloud);
  v6 = v5;
  if (*(_QWORD *)(a1 + 16) && (v7 = sub_1000DA98C(v4, v5), (v8 & 1) != 0))
  {
    v9 = *(id *)(*(_QWORD *)(a1 + 56) + 8 * v7);
    swift_bridgeObjectRelease(v6);
    if (objc_msgSend(v9, "success"))
      (*(void (**)(void))(v2 + OBJC_IVAR____TtCV11SettingsApp23AppleAccountSignInSheet11Coordinator_onSuccess))();

  }
  else
  {
    swift_bridgeObjectRelease(v6);
  }
  DismissAction.callAsFunction()();
}

uint64_t *sub_1000167FC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_100004FC8(&qword_100157780);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v9 = type metadata accessor for DismissAction(0, v8);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      v10 = a1;
      v11 = v7;
      v12 = 1;
    }
    else
    {
      v14 = *a2;
      *a1 = *a2;
      swift_retain(v14);
      v10 = a1;
      v11 = v7;
      v12 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v11, v12);
    v15 = *(int *)(a3 + 20);
    v16 = (uint64_t *)((char *)a1 + v15);
    v17 = (uint64_t *)((char *)a2 + v15);
    v13 = v17[1];
    *v16 = *v17;
    v16[1] = v13;
  }
  swift_retain(v13);
  return a1;
}

uint64_t sub_1000168DC(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_100004FC8(&qword_100157780);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v6 = type metadata accessor for DismissAction(0, v5);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  }
  else
  {
    swift_release(*a1);
  }
  return swift_release(*(_QWORD *)((char *)a1 + *(int *)(a2 + 20) + 8));
}

uint64_t *sub_100016950(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;

  v6 = sub_100004FC8(&qword_100157780);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v8 = type metadata accessor for DismissAction(0, v7);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    v9 = a1;
    v10 = v6;
    v11 = 1;
  }
  else
  {
    v12 = *a2;
    *a1 = *a2;
    swift_retain(v12);
    v9 = a1;
    v10 = v6;
    v11 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v10, v11);
  v13 = *(int *)(a3 + 20);
  v14 = (uint64_t *)((char *)a1 + v13);
  v15 = (uint64_t *)((char *)a2 + v13);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  swift_retain(v16);
  return a1;
}

uint64_t *sub_100016A08(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 != a2)
  {
    sub_100016ADC((uint64_t)a1);
    v6 = sub_100004FC8(&qword_100157780);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v8 = type metadata accessor for DismissAction(0, v7);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v6;
      v11 = 1;
    }
    else
    {
      v12 = *a2;
      *a1 = *a2;
      swift_retain(v12);
      v9 = a1;
      v10 = v6;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
  }
  v13 = *(int *)(a3 + 20);
  v14 = (uint64_t *)((char *)a1 + v13);
  v15 = (uint64_t *)((char *)a2 + v13);
  v16 = v15[1];
  v17 = v14[1];
  *v14 = *v15;
  v14[1] = v16;
  swift_retain(v16);
  swift_release(v17);
  return a1;
}

uint64_t sub_100016ADC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004FC8(&qword_100157780);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *sub_100016B1C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_100004FC8(&qword_100157780);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v8 = type metadata accessor for DismissAction(0, v7);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

char *sub_100016BC4(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    sub_100016ADC((uint64_t)a1);
    v6 = sub_100004FC8(&qword_100157780);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v8 = type metadata accessor for DismissAction(0, v7);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v9 = *(int *)(a3 + 20);
  v10 = *(_QWORD *)&a1[v9 + 8];
  *(_OWORD *)&a1[v9] = *(_OWORD *)&a2[v9];
  swift_release(v10);
  return a1;
}

uint64_t sub_100016C88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100016C94);
}

uint64_t sub_100016C94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_100004FC8(&qword_100157788);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100016D14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100016D20);
}

uint64_t sub_100016D20(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100004FC8(&qword_100157788);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for AppleAccountSignInSheet(uint64_t a1)
{
  return sub_10000D3C4(a1, (uint64_t *)&unk_1001577E8, (uint64_t)&nominal type descriptor for AppleAccountSignInSheet);
}

void sub_100016DB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD v5[2];

  sub_100016E24(319, a2);
  if (v4 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(v3 - 8) + 64;
    v5[1] = (char *)&value witness table for () + 64;
    swift_initStructMetadata(a1, 256, 2, v5, a1 + 16);
  }
}

void sub_100016E24(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_1001577F8)
  {
    v3 = type metadata accessor for DismissAction(255, a2);
    v4 = type metadata accessor for Environment.Content(a1, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_1001577F8);
  }
}

uint64_t sub_100016E78()
{
  return sub_100016EA8(&qword_100157828, (uint64_t)&unk_100114890);
}

void *sub_100016E9C()
{
  return &protocol witness table for Never;
}

uint64_t sub_100016EA8(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for AppleAccountSignInSheet(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

_QWORD *sub_100016EE8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  id v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  id v39;
  __int128 v40;

  v4 = type metadata accessor for PrimarySettingsListAppleAccountLinkModel(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v6 = v4;
    v7 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(a2, v7))
    {
      case 0u:
        v8 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
        v9 = a1;
        v10 = v7;
        v11 = 0;
        goto LABEL_14;
      case 1u:
        v13 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
        v9 = a1;
        v10 = v7;
        v11 = 1;
        goto LABEL_14;
      case 2u:
        v14 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
        v15 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v16 = (_QWORD *)((char *)a1 + v15);
        v17 = (_QWORD *)((char *)a2 + v15);
        v18 = v17[1];
        *v16 = *v17;
        v16[1] = v18;
        swift_bridgeObjectRetain(v18);
        v9 = a1;
        v10 = v7;
        v11 = 2;
        goto LABEL_14;
      case 3u:
        v19 = a2[1];
        *a1 = *a2;
        a1[1] = v19;
        v20 = a2[3];
        a1[2] = a2[2];
        a1[3] = v20;
        v21 = a2[5];
        a1[4] = a2[4];
        a1[5] = v21;
        v22 = a2[7];
        a1[6] = a2[6];
        a1[7] = v22;
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v22);
        v9 = a1;
        v10 = v7;
        v11 = 3;
        goto LABEL_14;
      case 4u:
        v23 = a2[1];
        *a1 = *a2;
        a1[1] = v23;
        v24 = a2[3];
        a1[2] = a2[2];
        a1[3] = v24;
        v25 = a2[5];
        a1[4] = a2[4];
        a1[5] = v25;
        a1[6] = a2[6];
        swift_bridgeObjectRetain(v23);
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v25);
        v9 = a1;
        v10 = v7;
        v11 = 4;
        goto LABEL_14;
      case 5u:
        v26 = a2[1];
        *a1 = *a2;
        a1[1] = v26;
        v27 = a2[3];
        a1[2] = a2[2];
        a1[3] = v27;
        v29 = (void *)a2[4];
        v28 = a2[5];
        a1[4] = v29;
        a1[5] = v28;
        v30 = a2[9];
        swift_bridgeObjectRetain(v26);
        swift_bridgeObjectRetain(v27);
        v31 = v29;
        swift_bridgeObjectRetain(v28);
        if (v30)
        {
          a1[9] = v30;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v30 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v30);
        }
        else
        {
          v32 = *((_OWORD *)a2 + 4);
          *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
          *((_OWORD *)a1 + 4) = v32;
        }
        v9 = a1;
        v10 = v7;
        v11 = 5;
LABEL_14:
        swift_storeEnumTagMultiPayload(v9, v10, v11);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
        break;
    }
    v33 = *(int *)(v6 + 20);
    v34 = (char *)a1 + v33;
    v35 = (char *)a2 + v33;
    v36 = *((_QWORD *)v35 + 1);
    if (v36)
    {
      *(_QWORD *)v34 = *(_QWORD *)v35;
      *((_QWORD *)v34 + 1) = v36;
      v37 = *((_QWORD *)v35 + 3);
      *((_QWORD *)v34 + 2) = *((_QWORD *)v35 + 2);
      *((_QWORD *)v34 + 3) = v37;
      v34[32] = v35[32];
      v38 = (void *)*((_QWORD *)v35 + 5);
      *((_QWORD *)v34 + 5) = v38;
      swift_bridgeObjectRetain(v36);
      swift_bridgeObjectRetain(v37);
      v39 = v38;
    }
    else
    {
      v40 = *((_OWORD *)v35 + 1);
      *(_OWORD *)v34 = *(_OWORD *)v35;
      *((_OWORD *)v34 + 1) = v40;
      *((_OWORD *)v34 + 2) = *((_OWORD *)v35 + 2);
    }
    *((_BYTE *)a1 + *(int *)(v6 + 24)) = *((_BYTE *)a2 + *(int *)(v6 + 24));
  }
  return a1;
}

void sub_1000171D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(a1, v2))
  {
    case 0u:
    case 1u:
      v3 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
      break;
    case 2u:
      v4 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
      v5 = sub_100004FC8(&qword_10015C420);
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v5 + 48) + 8));
      break;
    case 3u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
      break;
    case 4u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      break;
    case 5u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));

      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      if (*(_QWORD *)(a1 + 72))
        sub_100005474((_QWORD *)(a1 + 48));
      break;
    default:
      break;
  }
  v6 = a1 + *(int *)(type metadata accessor for PrimarySettingsListAppleAccountLinkModel(0) + 20);
  v7 = *(_QWORD *)(v6 + 8);
  if (v7)
  {
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(*(_QWORD *)(v6 + 24));

  }
}

_QWORD *sub_10001732C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  id v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  id v36;
  __int128 v37;

  v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(a2, v4))
  {
    case 0u:
      v5 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
      v6 = a1;
      v7 = v4;
      v8 = 0;
      goto LABEL_12;
    case 1u:
      v9 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      v6 = a1;
      v7 = v4;
      v8 = 1;
      goto LABEL_12;
    case 2u:
      v10 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      v11 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
      v12 = (_QWORD *)((char *)a1 + v11);
      v13 = (_QWORD *)((char *)a2 + v11);
      v14 = v13[1];
      *v12 = *v13;
      v12[1] = v14;
      swift_bridgeObjectRetain(v14);
      v6 = a1;
      v7 = v4;
      v8 = 2;
      goto LABEL_12;
    case 3u:
      v15 = a2[1];
      *a1 = *a2;
      a1[1] = v15;
      v16 = a2[3];
      a1[2] = a2[2];
      a1[3] = v16;
      v17 = a2[5];
      a1[4] = a2[4];
      a1[5] = v17;
      v18 = a2[7];
      a1[6] = a2[6];
      a1[7] = v18;
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v18);
      v6 = a1;
      v7 = v4;
      v8 = 3;
      goto LABEL_12;
    case 4u:
      v19 = a2[1];
      *a1 = *a2;
      a1[1] = v19;
      v20 = a2[3];
      a1[2] = a2[2];
      a1[3] = v20;
      v21 = a2[5];
      a1[4] = a2[4];
      a1[5] = v21;
      a1[6] = a2[6];
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRetain(v21);
      v6 = a1;
      v7 = v4;
      v8 = 4;
      goto LABEL_12;
    case 5u:
      v22 = a2[1];
      *a1 = *a2;
      a1[1] = v22;
      v23 = a2[3];
      a1[2] = a2[2];
      a1[3] = v23;
      v25 = (void *)a2[4];
      v24 = a2[5];
      a1[4] = v25;
      a1[5] = v24;
      v26 = a2[9];
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v23);
      v27 = v25;
      swift_bridgeObjectRetain(v24);
      if (v26)
      {
        a1[9] = v26;
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v26 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v26);
      }
      else
      {
        v28 = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 4) = v28;
      }
      v6 = a1;
      v7 = v4;
      v8 = 5;
LABEL_12:
      swift_storeEnumTagMultiPayload(v6, v7, v8);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
      break;
  }
  v29 = type metadata accessor for PrimarySettingsListAppleAccountLinkModel(0);
  v30 = *(int *)(v29 + 20);
  v31 = (char *)a1 + v30;
  v32 = (char *)a2 + v30;
  v33 = *((_QWORD *)v32 + 1);
  if (v33)
  {
    *(_QWORD *)v31 = *(_QWORD *)v32;
    *((_QWORD *)v31 + 1) = v33;
    v34 = *((_QWORD *)v32 + 3);
    *((_QWORD *)v31 + 2) = *((_QWORD *)v32 + 2);
    *((_QWORD *)v31 + 3) = v34;
    v31[32] = v32[32];
    v35 = (void *)*((_QWORD *)v32 + 5);
    *((_QWORD *)v31 + 5) = v35;
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v34);
    v36 = v35;
  }
  else
  {
    v37 = *((_OWORD *)v32 + 1);
    *(_OWORD *)v31 = *(_OWORD *)v32;
    *((_OWORD *)v31 + 1) = v37;
    *((_OWORD *)v31 + 2) = *((_OWORD *)v32 + 2);
  }
  *((_BYTE *)a1 + *(int *)(v29 + 24)) = *((_BYTE *)a2 + *(int *)(v29 + 24));
  return a1;
}

_QWORD *sub_1000175F0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  id v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;

  if (a1 != a2)
  {
    sub_100013014((uint64_t)a1);
    v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(a2, v4))
    {
      case 0u:
        v5 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
        v6 = a1;
        v7 = v4;
        v8 = 0;
        goto LABEL_13;
      case 1u:
        v9 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
        v6 = a1;
        v7 = v4;
        v8 = 1;
        goto LABEL_13;
      case 2u:
        v10 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
        v11 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v12 = (_QWORD *)((char *)a1 + v11);
        v13 = (_QWORD *)((char *)a2 + v11);
        *v12 = *v13;
        v14 = v13[1];
        v12[1] = v14;
        swift_bridgeObjectRetain(v14);
        v6 = a1;
        v7 = v4;
        v8 = 2;
        goto LABEL_13;
      case 3u:
        *a1 = *a2;
        v15 = a2[1];
        a1[1] = v15;
        a1[2] = a2[2];
        v16 = a2[3];
        a1[3] = v16;
        a1[4] = a2[4];
        v17 = a2[5];
        a1[5] = v17;
        a1[6] = a2[6];
        v18 = a2[7];
        a1[7] = v18;
        swift_bridgeObjectRetain(v15);
        swift_bridgeObjectRetain(v16);
        swift_bridgeObjectRetain(v17);
        swift_bridgeObjectRetain(v18);
        v6 = a1;
        v7 = v4;
        v8 = 3;
        goto LABEL_13;
      case 4u:
        *a1 = *a2;
        v19 = a2[1];
        a1[1] = v19;
        a1[2] = a2[2];
        v20 = a2[3];
        a1[3] = v20;
        a1[4] = a2[4];
        v21 = a2[5];
        a1[5] = v21;
        a1[6] = a2[6];
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v21);
        v6 = a1;
        v7 = v4;
        v8 = 4;
        goto LABEL_13;
      case 5u:
        *a1 = *a2;
        v22 = a2[1];
        a1[1] = v22;
        a1[2] = a2[2];
        v23 = a2[3];
        a1[3] = v23;
        v24 = (void *)a2[4];
        a1[4] = v24;
        v25 = a2[5];
        a1[5] = v25;
        v26 = a2[9];
        swift_bridgeObjectRetain(v22);
        swift_bridgeObjectRetain(v23);
        v27 = v24;
        swift_bridgeObjectRetain(v25);
        if (v26)
        {
          a1[9] = v26;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v26 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v26);
        }
        else
        {
          v28 = *((_OWORD *)a2 + 4);
          *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
          *((_OWORD *)a1 + 4) = v28;
        }
        v6 = a1;
        v7 = v4;
        v8 = 5;
LABEL_13:
        swift_storeEnumTagMultiPayload(v6, v7, v8);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
        break;
    }
  }
  v29 = type metadata accessor for PrimarySettingsListAppleAccountLinkModel(0);
  v30 = *(int *)(v29 + 20);
  v31 = (uint64_t)a1 + v30;
  v32 = (char *)a2 + v30;
  v33 = *(_QWORD *)((char *)a1 + v30 + 8);
  v34 = *(_QWORD *)((char *)a2 + v30 + 8);
  if (v33)
  {
    if (v34)
    {
      *(_QWORD *)v31 = *(_QWORD *)v32;
      v35 = *((_QWORD *)v32 + 1);
      *(_QWORD *)(v31 + 8) = v35;
      swift_bridgeObjectRetain(v35);
      swift_bridgeObjectRelease(v33);
      *(_QWORD *)(v31 + 16) = *((_QWORD *)v32 + 2);
      v36 = *((_QWORD *)v32 + 3);
      v37 = *(_QWORD *)(v31 + 24);
      *(_QWORD *)(v31 + 24) = v36;
      swift_bridgeObjectRetain(v36);
      swift_bridgeObjectRelease(v37);
      *(_BYTE *)(v31 + 32) = v32[32];
      v38 = *(void **)(v31 + 40);
      v39 = (void *)*((_QWORD *)v32 + 5);
      *(_QWORD *)(v31 + 40) = v39;
      v40 = v39;

    }
    else
    {
      sub_10000BA50(v31, &qword_100157900);
      v46 = *((_OWORD *)v32 + 1);
      v45 = *((_OWORD *)v32 + 2);
      *(_OWORD *)v31 = *(_OWORD *)v32;
      *(_OWORD *)(v31 + 16) = v46;
      *(_OWORD *)(v31 + 32) = v45;
    }
  }
  else if (v34)
  {
    *(_QWORD *)v31 = *(_QWORD *)v32;
    v41 = *((_QWORD *)v32 + 1);
    *(_QWORD *)(v31 + 8) = v41;
    *(_QWORD *)(v31 + 16) = *((_QWORD *)v32 + 2);
    v42 = *((_QWORD *)v32 + 3);
    *(_QWORD *)(v31 + 24) = v42;
    *(_BYTE *)(v31 + 32) = v32[32];
    v43 = (void *)*((_QWORD *)v32 + 5);
    *(_QWORD *)(v31 + 40) = v43;
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRetain(v42);
    v44 = v43;
  }
  else
  {
    v47 = *(_OWORD *)v32;
    v48 = *((_OWORD *)v32 + 2);
    *(_OWORD *)(v31 + 16) = *((_OWORD *)v32 + 1);
    *(_OWORD *)(v31 + 32) = v48;
    *(_OWORD *)v31 = v47;
  }
  *((_BYTE *)a1 + *(int *)(v29 + 24)) = *((_BYTE *)a2 + *(int *)(v29 + 24));
  return a1;
}

char *sub_1000179B8(char *a1, char *a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;

  v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v4);
  if (EnumCaseMultiPayload == 2)
  {
    v7 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    v8 = sub_100004FC8(&qword_10015C420);
    *(_OWORD *)&a1[*(int *)(v8 + 48)] = *(_OWORD *)&a2[*(int *)(v8 + 48)];
    swift_storeEnumTagMultiPayload(a1, v4, 2);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v9 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
    swift_storeEnumTagMultiPayload(a1, v4, 1);
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    v6 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, v4, 0);
  }
  v10 = type metadata accessor for PrimarySettingsListAppleAccountLinkModel(0);
  v11 = *(int *)(v10 + 20);
  v12 = &a1[v11];
  v13 = &a2[v11];
  v14 = *((_OWORD *)v13 + 1);
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *((_OWORD *)v12 + 1) = v14;
  *((_OWORD *)v12 + 2) = *((_OWORD *)v13 + 2);
  a1[*(int *)(v10 + 24)] = a2[*(int *)(v10 + 24)];
  return a1;
}

char *sub_100017B08(char *a1, char *a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  __int128 v19;

  if (a1 != a2)
  {
    sub_100013014((uint64_t)a1);
    v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v4);
    if (EnumCaseMultiPayload == 2)
    {
      v7 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      v8 = sub_100004FC8(&qword_10015C420);
      *(_OWORD *)&a1[*(int *)(v8 + 48)] = *(_OWORD *)&a2[*(int *)(v8 + 48)];
      swift_storeEnumTagMultiPayload(a1, v4, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v9 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      swift_storeEnumTagMultiPayload(a1, v4, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, v4, 0);
    }
  }
  v10 = type metadata accessor for PrimarySettingsListAppleAccountLinkModel(0);
  v11 = *(int *)(v10 + 20);
  v12 = (uint64_t)&a1[v11];
  v13 = &a2[v11];
  v14 = *(_QWORD *)&a1[v11 + 8];
  if (!v14)
    goto LABEL_13;
  v15 = *((_QWORD *)v13 + 1);
  if (!v15)
  {
    sub_10000BA50(v12, &qword_100157900);
LABEL_13:
    v19 = *((_OWORD *)v13 + 1);
    *(_OWORD *)v12 = *(_OWORD *)v13;
    *(_OWORD *)(v12 + 16) = v19;
    *(_OWORD *)(v12 + 32) = *((_OWORD *)v13 + 2);
    goto LABEL_14;
  }
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_QWORD *)(v12 + 8) = v15;
  swift_bridgeObjectRelease(v14);
  v16 = *((_QWORD *)v13 + 3);
  v17 = *(_QWORD *)(v12 + 24);
  *(_QWORD *)(v12 + 16) = *((_QWORD *)v13 + 2);
  *(_QWORD *)(v12 + 24) = v16;
  swift_bridgeObjectRelease(v17);
  *(_BYTE *)(v12 + 32) = v13[32];
  v18 = *(void **)(v12 + 40);
  *(_QWORD *)(v12 + 40) = *((_QWORD *)v13 + 5);

LABEL_14:
  a1[*(int *)(v10 + 24)] = a2[*(int *)(v10 + 24)];
  return a1;
}

uint64_t sub_100017CCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100017CD8);
}

uint64_t sub_100017CD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PrimarySettingsListAppleAccountLinkModel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_100017D14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100017D20);
}

uint64_t sub_100017D20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PrimarySettingsListAppleAccountLinkModel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for PrimarySettingsListAppleAccountLink(uint64_t a1)
{
  uint64_t result;

  result = qword_100157960;
  if (!qword_100157960)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PrimarySettingsListAppleAccountLink);
  return result;
}

uint64_t sub_100017D9C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for PrimarySettingsListAppleAccountLinkModel(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100017E04(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100129E90, 1);
}

uint64_t sub_100017E14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v21[16];
  uint64_t v22;

  v4 = sub_100004FC8(&qword_1001579B0);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  v9 = &v21[-v8];
  v10 = sub_100004FC8(&qword_1001579B8);
  v11 = __chkstk_darwin(v10);
  v13 = &v21[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v11);
  v15 = &v21[-v14];
  v16 = sub_100018004((uint64_t)&v21[-v14]);
  *(_QWORD *)v9 = static HorizontalAlignment.leading.getter(v16);
  *((_QWORD *)v9 + 1) = 0;
  v9[16] = 1;
  sub_100004FC8(&qword_1001579C0);
  v22 = a1;
  v17 = sub_100004FC8(&qword_1001579C8);
  v18 = sub_100007868(&qword_1001579D0, &qword_1001579C8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  LabelGroup.init(content:)(sub_10001894C, v21, v17, v18);
  sub_100018C00((uint64_t)v15, (uint64_t)v13, &qword_1001579B8);
  sub_100018C00((uint64_t)v9, (uint64_t)v7, &qword_1001579B0);
  sub_100018C00((uint64_t)v13, a2, &qword_1001579B8);
  v19 = sub_100004FC8(&qword_1001579D8);
  sub_100018C00((uint64_t)v7, a2 + *(int *)(v19 + 48), &qword_1001579B0);
  sub_10000BA50((uint64_t)v9, &qword_1001579B0);
  sub_10000BA50((uint64_t)v15, &qword_1001579B8);
  sub_10000BA50((uint64_t)v7, &qword_1001579B0);
  return sub_10000BA50((uint64_t)v13, &qword_1001579B8);
}

uint64_t sub_100018004@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t KeyPath;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD v38[3];
  _BYTE v39[48];

  v37 = a1;
  v36 = sub_100004FC8(&qword_1001579F0);
  __chkstk_darwin(v36);
  v3 = (uint64_t *)((char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = sub_100004FC8(&qword_1001579F8);
  __chkstk_darwin(v4);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Image.ResizingMode(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_100004FC8(&qword_100157A00);
  __chkstk_darwin(v33);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_100004FC8(&qword_100157A08);
  __chkstk_darwin(v34);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_100004FC8(&qword_100157A10);
  __chkstk_darwin(v35);
  v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for PrimarySettingsListAppleAccountLinkModel(0);
  sub_100018BA0(v1 + *(int *)(v17 + 20), (uint64_t)v39);
  v18 = sub_1000A7B9C();
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for Image.ResizingMode.stretch(_:), v7);
  v19 = Image.resizable(capInsets:resizingMode:)(v10, v18, 0.0, 0.0, 0.0, 0.0);
  swift_release(v18);
  v20 = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  static SymbolRenderingMode.hierarchical.getter(v20);
  v21 = type metadata accessor for SymbolRenderingMode(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v6, 0, 1, v21);
  KeyPath = swift_getKeyPath(&unk_1001149A8);
  sub_100018C00((uint64_t)v6, (uint64_t)v3 + *(int *)(v36 + 28), &qword_1001579F8);
  *v3 = KeyPath;
  sub_100018C00((uint64_t)v3, (uint64_t)&v12[*(int *)(v33 + 36)], &qword_1001579F0);
  *(_QWORD *)v12 = v19;
  *((_WORD *)v12 + 4) = 256;
  swift_retain(v19);
  sub_10000BA50((uint64_t)v3, &qword_1001579F0);
  sub_10000BA50((uint64_t)v6, &qword_1001579F8);
  v23 = swift_release(v19);
  v24 = static Color.blue.getter(v23);
  sub_100018C00((uint64_t)v12, (uint64_t)v14, &qword_100157A00);
  *(_QWORD *)&v14[*(int *)(v34 + 36)] = v24;
  v25 = sub_10000BA50((uint64_t)v12, &qword_100157A00);
  v26 = static Alignment.center.getter(v25);
  _FrameLayout.init(width:height:alignment:)(v38, 0x404E000000000000, 0, 0x404E000000000000, 0, v26, v27);
  sub_100018C00((uint64_t)v14, (uint64_t)v16, &qword_100157A08);
  v28 = &v16[*(int *)(v35 + 36)];
  v29 = v38[1];
  *(_OWORD *)v28 = v38[0];
  *((_OWORD *)v28 + 1) = v29;
  *((_OWORD *)v28 + 2) = v38[2];
  sub_10000BA50((uint64_t)v14, &qword_100157A08);
  v30 = v37;
  sub_100018C00((uint64_t)v16, v37, &qword_100157A10);
  *(_BYTE *)(v30 + *(int *)(sub_100004FC8(&qword_1001579B8) + 36)) = 1;
  return sub_10000BA50((uint64_t)v16, &qword_100157A10);
}

uint64_t sub_1000183B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unsigned __int8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  char v29;

  v2 = a1;
  v4 = sub_100018560(a1, (uint64_t)&v24);
  v5 = v24;
  v22 = v26;
  v23 = v25;
  v21 = v27;
  v20 = v28;
  v6 = static Font.title3.getter(v4);
  v19 = Font.bold()();
  swift_release(v6);
  KeyPath = swift_getKeyPath(&unk_100114978);
  v8 = sub_100018670(v2, (uint64_t)&v24);
  v10 = v24;
  v9 = v25;
  v11 = v27;
  v16 = v26;
  v17 = v25;
  LOBYTE(v2) = v29;
  v18 = v29;
  v12 = v28;
  v13 = static Font.footnote.getter(v8);
  v14 = swift_getKeyPath(&unk_100114978);
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v23;
  *(_QWORD *)(a2 + 16) = v22;
  *(_QWORD *)(a2 + 24) = v21;
  *(_BYTE *)(a2 + 32) = v20;
  *(_QWORD *)(a2 + 40) = KeyPath;
  *(_QWORD *)(a2 + 48) = v19;
  *(_QWORD *)(a2 + 56) = v10;
  *(_QWORD *)(a2 + 64) = v9;
  *(_QWORD *)(a2 + 72) = v16;
  *(_QWORD *)(a2 + 80) = v11;
  *(_BYTE *)(a2 + 88) = v12;
  *(_BYTE *)(a2 + 89) = v2;
  *(_QWORD *)(a2 + 96) = v14;
  *(_QWORD *)(a2 + 104) = v13;
  sub_100018A74(v5, v23, v22, v21);
  swift_retain(KeyPath);
  swift_retain(v19);
  sub_100018A9C(v10, v17, v16, v11, v12, v18);
  swift_retain(v14);
  swift_retain(v13);
  sub_100018ADC(v10, v17, v16, v11, v12, v18);
  swift_release(v13);
  swift_release(v14);
  sub_100018B1C(v5, v23, v22, v21);
  swift_release(v19);
  return swift_release(KeyPath);
}

double sub_100018560@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  double result;
  __int128 v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _OWORD v21[2];
  char v22;

  v3 = (_QWORD *)(a1 + *(int *)(type metadata accessor for PrimarySettingsListAppleAccountLinkModel(0) + 20));
  v4 = v3[1];
  if (v4)
  {
    *(_QWORD *)&v21[0] = *v3;
    *((_QWORD *)&v21[0] + 1) = swift_bridgeObjectRetain(v4);
    v5 = sub_100008A5C();
    v16 = Text.init<A>(_:)(v21, &type metadata for String, v5);
    v17 = v6;
    v18 = v7 & 1;
    v19 = v8;
    v20 = 0;
  }
  else
  {
    v9 = LocalizedStringKey.init(stringLiteral:)(0x634120656C707041, 0xED0000746E756F63);
    v16 = Text.init(_:tableName:bundle:comment:)(v9);
    v17 = v11;
    v18 = v10 & 1;
    v19 = v12;
    v20 = 1;
  }
  _ConditionalContent<>.init(storage:)(&v16, &type metadata for Text, &type metadata for Text, &protocol witness table for Text, &protocol witness table for Text);
  result = *(double *)v21;
  v14 = v21[1];
  v15 = v22;
  *(_OWORD *)a2 = v21[0];
  *(_OWORD *)(a2 + 16) = v14;
  *(_BYTE *)(a2 + 32) = v15;
  return result;
}

double sub_100018670@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  double result;
  __int128 v19;
  unsigned __int8 v20;
  char v21;
  __int128 v22;
  __int128 v23;
  __int16 v24;
  __int128 v25;
  __int128 v26;
  unsigned __int8 v27;
  char v28;

  v3 = a1 + *(int *)(type metadata accessor for PrimarySettingsListAppleAccountLinkModel(0) + 20);
  if (*(_QWORD *)(v3 + 8))
  {
    if ((*(_BYTE *)(v3 + 32) & 1) != 0)
    {
      v12 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000020, 0x80000001001202B0);
      *(_QWORD *)&v22 = Text.init(_:tableName:bundle:comment:)(v12);
      *((_QWORD *)&v22 + 1) = v13;
      *(_QWORD *)&v23 = v14 & 1;
      *((_QWORD *)&v23 + 1) = v15;
      LOBYTE(v24) = 0;
    }
    else
    {
      v4 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000001FLL, 0x8000000100120290);
      *(_QWORD *)&v22 = Text.init(_:tableName:bundle:comment:)(v4);
      *((_QWORD *)&v22 + 1) = v6;
      *(_QWORD *)&v23 = v5 & 1;
      *((_QWORD *)&v23 + 1) = v7;
      LOBYTE(v24) = 1;
    }
    _ConditionalContent<>.init(storage:)(&v22, &type metadata for Text, &type metadata for Text, &protocol witness table for Text, &protocol witness table for Text);
    v22 = v25;
    v23 = v26;
    v24 = v27;
  }
  else
  {
    v8 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000004CLL, 0x8000000100120240);
    *(_QWORD *)&v22 = Text.init(_:tableName:bundle:comment:)(v8);
    *((_QWORD *)&v22 + 1) = v10;
    *(_QWORD *)&v23 = v9 & 1;
    *((_QWORD *)&v23 + 1) = v11;
    v24 = 256;
  }
  v16 = sub_100004FC8(&qword_1001579E0);
  v17 = sub_100018B44();
  _ConditionalContent<>.init(storage:)(&v22, v16, &type metadata for Text, v17, &protocol witness table for Text);
  result = *(double *)&v25;
  v19 = v26;
  v20 = v27;
  v21 = v28;
  *(_OWORD *)a2 = v25;
  *(_OWORD *)(a2 + 16) = v19;
  *(_BYTE *)(a2 + 32) = v20;
  *(_BYTE *)(a2 + 33) = v21;
  return result;
}

uint64_t sub_100018860@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  double v9;
  uint64_t v11;

  v2 = v1;
  v4 = sub_100004FC8(&qword_100157998);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v7 = static VerticalAlignment.center.getter(v5);
  *((_QWORD *)v7 + 1) = 0;
  v7[16] = 1;
  v8 = sub_100004FC8(&qword_1001579A0);
  sub_100017E14(v2, (uint64_t)&v7[*(int *)(v8 + 44)]);
  if (*(_BYTE *)(v2 + *(int *)(type metadata accessor for PrimarySettingsListAppleAccountLinkModel(0) + 24)))
    v9 = 0.5;
  else
    v9 = 1.0;
  sub_100018C00((uint64_t)v7, a1, &qword_100157998);
  *(double *)(a1 + *(int *)(sub_100004FC8(&qword_1001579A8) + 36)) = v9;
  return sub_10000BA50((uint64_t)v7, &qword_100157998);
}

uint64_t sub_10001894C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000183B0(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_100018954(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = sub_100004FC8(&qword_1001579F8);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100018C00(a1, (uint64_t)v4, &qword_1001579F8);
  return EnvironmentValues.symbolRenderingMode.setter(v4);
}

uint64_t sub_1000189D4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000189FC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100018A24(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

uint64_t sub_100018A4C(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

uint64_t sub_100018A74(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  sub_10000BAD4(a1, a2, a3 & 1);
  return swift_bridgeObjectRetain(a4);
}

uint64_t sub_100018A9C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if ((a6 & 1) == 0)
    return sub_100018A74(a1, a2, a3, a4);
  sub_10000BAD4(a1, a2, a3 & 1);
  return swift_bridgeObjectRetain(a4);
}

uint64_t sub_100018ADC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if ((a6 & 1) == 0)
    return sub_100018B1C(a1, a2, a3, a4);
  sub_100007618(a1, a2, a3 & 1);
  return swift_bridgeObjectRelease(a4);
}

uint64_t sub_100018B1C(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  sub_100007618(a1, a2, a3 & 1);
  return swift_bridgeObjectRelease(a4);
}

unint64_t sub_100018B44()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001579E8;
  if (!qword_1001579E8)
  {
    v1 = sub_100005430(&qword_1001579E0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001579E8);
  }
  return result;
}

uint64_t sub_100018BA0(uint64_t a1, uint64_t a2)
{
  initializeWithTake for PrimaryAppleAccountStatus(a2, a1);
  return a2;
}

uint64_t sub_100018BDC()
{
  return EnvironmentValues.symbolRenderingMode.getter();
}

uint64_t sub_100018C00(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100004FC8(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_100018C48()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100157A18;
  if (!qword_100157A18)
  {
    v1 = sub_100005430(&qword_1001579A8);
    sub_100007868(qword_100157A20, &qword_100157998, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100157A18);
  }
  return result;
}

uint64_t sub_100018CCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 16);
}

uint64_t type metadata accessor for SettingsAppDependency(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100018CE0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SettingsAppDependency);
}

uint64_t sub_100018CE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

_QWORD *sub_100018D0C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  id v31;
  __int128 v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v4 = type metadata accessor for PrimarySettingsListSecondaryAppleAccountLinkModel(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v6 = v4;
    v7 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(a2, v7))
    {
      case 0u:
        v8 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
        v9 = a1;
        v10 = v7;
        v11 = 0;
        goto LABEL_14;
      case 1u:
        v13 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
        v9 = a1;
        v10 = v7;
        v11 = 1;
        goto LABEL_14;
      case 2u:
        v14 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
        v15 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v16 = (_QWORD *)((char *)a1 + v15);
        v17 = (_QWORD *)((char *)a2 + v15);
        v18 = v17[1];
        *v16 = *v17;
        v16[1] = v18;
        swift_bridgeObjectRetain(v18);
        v9 = a1;
        v10 = v7;
        v11 = 2;
        goto LABEL_14;
      case 3u:
        v19 = a2[1];
        *a1 = *a2;
        a1[1] = v19;
        v20 = a2[3];
        a1[2] = a2[2];
        a1[3] = v20;
        v21 = a2[5];
        a1[4] = a2[4];
        a1[5] = v21;
        v22 = a2[7];
        a1[6] = a2[6];
        a1[7] = v22;
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v22);
        v9 = a1;
        v10 = v7;
        v11 = 3;
        goto LABEL_14;
      case 4u:
        v23 = a2[1];
        *a1 = *a2;
        a1[1] = v23;
        v24 = a2[3];
        a1[2] = a2[2];
        a1[3] = v24;
        v25 = a2[5];
        a1[4] = a2[4];
        a1[5] = v25;
        a1[6] = a2[6];
        swift_bridgeObjectRetain(v23);
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v25);
        v9 = a1;
        v10 = v7;
        v11 = 4;
        goto LABEL_14;
      case 5u:
        v26 = a2[1];
        *a1 = *a2;
        a1[1] = v26;
        v27 = a2[3];
        a1[2] = a2[2];
        a1[3] = v27;
        v29 = (void *)a2[4];
        v28 = a2[5];
        a1[4] = v29;
        a1[5] = v28;
        v30 = a2[9];
        swift_bridgeObjectRetain(v26);
        swift_bridgeObjectRetain(v27);
        v31 = v29;
        swift_bridgeObjectRetain(v28);
        if (v30)
        {
          a1[9] = v30;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v30 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v30);
        }
        else
        {
          v32 = *((_OWORD *)a2 + 4);
          *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
          *((_OWORD *)a1 + 4) = v32;
        }
        v9 = a1;
        v10 = v7;
        v11 = 5;
LABEL_14:
        swift_storeEnumTagMultiPayload(v9, v10, v11);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
        break;
    }
    v33 = *(int *)(v6 + 20);
    v34 = (_QWORD *)((char *)a1 + v33);
    v35 = (_QWORD *)((char *)a2 + v33);
    v36 = v35[1];
    *v34 = *v35;
    v34[1] = v36;
    v37 = v35[3];
    v34[2] = v35[2];
    v34[3] = v37;
    v38 = v35[5];
    v34[4] = v35[4];
    v34[5] = v38;
    v39 = v35[7];
    v34[6] = v35[6];
    v34[7] = v39;
    swift_bridgeObjectRetain(v36);
    swift_bridgeObjectRetain(v37);
    swift_bridgeObjectRetain(v38);
    swift_bridgeObjectRetain(v39);
  }
  return a1;
}

uint64_t sub_100018FE0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(a1, v2))
  {
    case 0u:
    case 1u:
      v3 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
      break;
    case 2u:
      v4 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
      v5 = sub_100004FC8(&qword_10015C420);
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v5 + 48) + 8));
      break;
    case 3u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
      break;
    case 4u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      break;
    case 5u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));

      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      if (*(_QWORD *)(a1 + 72))
        sub_100005474((_QWORD *)(a1 + 48));
      break;
    default:
      break;
  }
  v6 = (_QWORD *)(a1 + *(int *)(type metadata accessor for PrimarySettingsListSecondaryAppleAccountLinkModel(0) + 20));
  swift_bridgeObjectRelease(v6[1]);
  swift_bridgeObjectRelease(v6[3]);
  swift_bridgeObjectRelease(v6[5]);
  return swift_bridgeObjectRelease(v6[7]);
}

_QWORD *sub_10001912C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  id v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(a2, v4))
  {
    case 0u:
      v5 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
      v6 = a1;
      v7 = v4;
      v8 = 0;
      goto LABEL_12;
    case 1u:
      v9 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      v6 = a1;
      v7 = v4;
      v8 = 1;
      goto LABEL_12;
    case 2u:
      v10 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      v11 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
      v12 = (_QWORD *)((char *)a1 + v11);
      v13 = (_QWORD *)((char *)a2 + v11);
      v14 = v13[1];
      *v12 = *v13;
      v12[1] = v14;
      swift_bridgeObjectRetain(v14);
      v6 = a1;
      v7 = v4;
      v8 = 2;
      goto LABEL_12;
    case 3u:
      v15 = a2[1];
      *a1 = *a2;
      a1[1] = v15;
      v16 = a2[3];
      a1[2] = a2[2];
      a1[3] = v16;
      v17 = a2[5];
      a1[4] = a2[4];
      a1[5] = v17;
      v18 = a2[7];
      a1[6] = a2[6];
      a1[7] = v18;
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v18);
      v6 = a1;
      v7 = v4;
      v8 = 3;
      goto LABEL_12;
    case 4u:
      v19 = a2[1];
      *a1 = *a2;
      a1[1] = v19;
      v20 = a2[3];
      a1[2] = a2[2];
      a1[3] = v20;
      v21 = a2[5];
      a1[4] = a2[4];
      a1[5] = v21;
      a1[6] = a2[6];
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRetain(v21);
      v6 = a1;
      v7 = v4;
      v8 = 4;
      goto LABEL_12;
    case 5u:
      v22 = a2[1];
      *a1 = *a2;
      a1[1] = v22;
      v23 = a2[3];
      a1[2] = a2[2];
      a1[3] = v23;
      v25 = (void *)a2[4];
      v24 = a2[5];
      a1[4] = v25;
      a1[5] = v24;
      v26 = a2[9];
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v23);
      v27 = v25;
      swift_bridgeObjectRetain(v24);
      if (v26)
      {
        a1[9] = v26;
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v26 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v26);
      }
      else
      {
        v28 = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 4) = v28;
      }
      v6 = a1;
      v7 = v4;
      v8 = 5;
LABEL_12:
      swift_storeEnumTagMultiPayload(v6, v7, v8);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
      break;
  }
  v29 = *(int *)(type metadata accessor for PrimarySettingsListSecondaryAppleAccountLinkModel(0) + 20);
  v30 = (_QWORD *)((char *)a1 + v29);
  v31 = (_QWORD *)((char *)a2 + v29);
  v32 = v31[1];
  *v30 = *v31;
  v30[1] = v32;
  v33 = v31[3];
  v30[2] = v31[2];
  v30[3] = v33;
  v34 = v31[5];
  v30[4] = v31[4];
  v30[5] = v34;
  v35 = v31[7];
  v30[6] = v31[6];
  v30[7] = v35;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRetain(v35);
  return a1;
}

_QWORD *sub_1000193D0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  if (a1 != a2)
  {
    sub_100013014((uint64_t)a1);
    v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(a2, v4))
    {
      case 0u:
        v5 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
        v6 = a1;
        v7 = v4;
        v8 = 0;
        goto LABEL_13;
      case 1u:
        v9 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
        v6 = a1;
        v7 = v4;
        v8 = 1;
        goto LABEL_13;
      case 2u:
        v10 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
        v11 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v12 = (_QWORD *)((char *)a1 + v11);
        v13 = (_QWORD *)((char *)a2 + v11);
        *v12 = *v13;
        v14 = v13[1];
        v12[1] = v14;
        swift_bridgeObjectRetain(v14);
        v6 = a1;
        v7 = v4;
        v8 = 2;
        goto LABEL_13;
      case 3u:
        *a1 = *a2;
        v15 = a2[1];
        a1[1] = v15;
        a1[2] = a2[2];
        v16 = a2[3];
        a1[3] = v16;
        a1[4] = a2[4];
        v17 = a2[5];
        a1[5] = v17;
        a1[6] = a2[6];
        v18 = a2[7];
        a1[7] = v18;
        swift_bridgeObjectRetain(v15);
        swift_bridgeObjectRetain(v16);
        swift_bridgeObjectRetain(v17);
        swift_bridgeObjectRetain(v18);
        v6 = a1;
        v7 = v4;
        v8 = 3;
        goto LABEL_13;
      case 4u:
        *a1 = *a2;
        v19 = a2[1];
        a1[1] = v19;
        a1[2] = a2[2];
        v20 = a2[3];
        a1[3] = v20;
        a1[4] = a2[4];
        v21 = a2[5];
        a1[5] = v21;
        a1[6] = a2[6];
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v21);
        v6 = a1;
        v7 = v4;
        v8 = 4;
        goto LABEL_13;
      case 5u:
        *a1 = *a2;
        v22 = a2[1];
        a1[1] = v22;
        a1[2] = a2[2];
        v23 = a2[3];
        a1[3] = v23;
        v24 = (void *)a2[4];
        a1[4] = v24;
        v25 = a2[5];
        a1[5] = v25;
        v26 = a2[9];
        swift_bridgeObjectRetain(v22);
        swift_bridgeObjectRetain(v23);
        v27 = v24;
        swift_bridgeObjectRetain(v25);
        if (v26)
        {
          a1[9] = v26;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v26 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v26);
        }
        else
        {
          v28 = *((_OWORD *)a2 + 4);
          *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
          *((_OWORD *)a1 + 4) = v28;
        }
        v6 = a1;
        v7 = v4;
        v8 = 5;
LABEL_13:
        swift_storeEnumTagMultiPayload(v6, v7, v8);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
        break;
    }
  }
  v29 = *(int *)(type metadata accessor for PrimarySettingsListSecondaryAppleAccountLinkModel(0) + 20);
  v30 = (_QWORD *)((char *)a1 + v29);
  v31 = (_QWORD *)((char *)a2 + v29);
  *v30 = *(_QWORD *)((char *)a2 + v29);
  v32 = *(_QWORD *)((char *)a2 + v29 + 8);
  v33 = *(_QWORD *)((char *)a1 + v29 + 8);
  v30[1] = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v33);
  v30[2] = v31[2];
  v34 = v31[3];
  v35 = v30[3];
  v30[3] = v34;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRelease(v35);
  v30[4] = v31[4];
  v36 = v31[5];
  v37 = v30[5];
  v30[5] = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease(v37);
  v30[6] = v31[6];
  v38 = v31[7];
  v39 = v30[7];
  v30[7] = v38;
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRelease(v39);
  return a1;
}

char *sub_100019720(char *a1, char *a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;

  v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v4);
  if (EnumCaseMultiPayload == 2)
  {
    v7 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    v8 = sub_100004FC8(&qword_10015C420);
    *(_OWORD *)&a1[*(int *)(v8 + 48)] = *(_OWORD *)&a2[*(int *)(v8 + 48)];
    swift_storeEnumTagMultiPayload(a1, v4, 2);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v9 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
    swift_storeEnumTagMultiPayload(a1, v4, 1);
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    v6 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, v4, 0);
  }
  v10 = *(int *)(type metadata accessor for PrimarySettingsListSecondaryAppleAccountLinkModel(0) + 20);
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = *((_OWORD *)v12 + 1);
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *((_OWORD *)v11 + 1) = v13;
  v14 = *((_OWORD *)v12 + 3);
  *((_OWORD *)v11 + 2) = *((_OWORD *)v12 + 2);
  *((_OWORD *)v11 + 3) = v14;
  return a1;
}

char *sub_100019864(char *a1, char *a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (a1 != a2)
  {
    sub_100013014((uint64_t)a1);
    v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v4);
    if (EnumCaseMultiPayload == 2)
    {
      v7 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      v8 = sub_100004FC8(&qword_10015C420);
      *(_OWORD *)&a1[*(int *)(v8 + 48)] = *(_OWORD *)&a2[*(int *)(v8 + 48)];
      swift_storeEnumTagMultiPayload(a1, v4, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v9 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      swift_storeEnumTagMultiPayload(a1, v4, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, v4, 0);
    }
  }
  v10 = *(int *)(type metadata accessor for PrimarySettingsListSecondaryAppleAccountLinkModel(0) + 20);
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = *((_QWORD *)v12 + 1);
  v14 = *(_QWORD *)&a1[v10 + 8];
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *((_QWORD *)v11 + 1) = v13;
  swift_bridgeObjectRelease(v14);
  v15 = *((_QWORD *)v12 + 3);
  v16 = *((_QWORD *)v11 + 3);
  *((_QWORD *)v11 + 2) = *((_QWORD *)v12 + 2);
  *((_QWORD *)v11 + 3) = v15;
  swift_bridgeObjectRelease(v16);
  v17 = *((_QWORD *)v12 + 5);
  v18 = *((_QWORD *)v11 + 5);
  *((_QWORD *)v11 + 4) = *((_QWORD *)v12 + 4);
  *((_QWORD *)v11 + 5) = v17;
  swift_bridgeObjectRelease(v18);
  v19 = *((_QWORD *)v12 + 7);
  v20 = *((_QWORD *)v11 + 7);
  *((_QWORD *)v11 + 6) = *((_QWORD *)v12 + 6);
  *((_QWORD *)v11 + 7) = v19;
  swift_bridgeObjectRelease(v20);
  return a1;
}

uint64_t sub_1000199E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000199F4);
}

uint64_t sub_1000199F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PrimarySettingsListSecondaryAppleAccountLinkModel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_100019A30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100019A3C);
}

uint64_t sub_100019A3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PrimarySettingsListSecondaryAppleAccountLinkModel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for PrimarySettingsListSecondaryAppleAccountLink(uint64_t a1)
{
  uint64_t result;

  result = qword_100157B00;
  if (!qword_100157B00)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PrimarySettingsListSecondaryAppleAccountLink);
  return result;
}

uint64_t sub_100019AB8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for PrimarySettingsListSecondaryAppleAccountLinkModel(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100019B20(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100129F10, 1);
}

uint64_t sub_100019B30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = (_QWORD *)(a1 + *(int *)(type metadata accessor for PrimarySettingsListSecondaryAppleAccountLinkModel(0) + 20));
  v4 = v3[5];
  v31 = v3[4];
  v32 = v4;
  v5 = sub_100008A5C();
  swift_bridgeObjectRetain(v4);
  v6 = Text.init<A>(_:)(&v31, &type metadata for String, v5);
  v28 = v7;
  v29 = v6;
  v30 = v8;
  v9 = v3[7];
  v27 = v10 & 1;
  v31 = v3[6];
  v32 = v9;
  swift_bridgeObjectRetain(v9);
  v11 = Text.init<A>(_:)(&v31, &type metadata for String, v5);
  v13 = v12;
  v15 = v14;
  v17 = v16 & 1;
  v18 = static Font.caption.getter();
  v19 = Text.font(_:)(v18, v11, v13, v17, v15);
  v21 = v20;
  v23 = v22;
  v25 = v24;
  swift_release(v18);
  v23 &= 1u;
  sub_100007618(v11, v13, v17);
  swift_bridgeObjectRelease(v15);
  LOBYTE(v31) = v27;
  *(_QWORD *)a2 = v29;
  *(_QWORD *)(a2 + 8) = v28;
  *(_BYTE *)(a2 + 16) = v27;
  *(_QWORD *)(a2 + 24) = v30;
  *(_QWORD *)(a2 + 32) = v19;
  *(_QWORD *)(a2 + 40) = v21;
  *(_BYTE *)(a2 + 48) = v23;
  *(_QWORD *)(a2 + 56) = v25;
  sub_10000BAD4(v29, v28, v27);
  swift_bridgeObjectRetain(v30);
  sub_10000BAD4(v19, v21, v23);
  swift_bridgeObjectRetain(v25);
  sub_100007618(v19, v21, v23);
  swift_bridgeObjectRelease(v25);
  sub_100007618(v29, v28, v31);
  return swift_bridgeObjectRelease(v30);
}

uint64_t sub_100019CC8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v4;
  _BYTE v5[16];

  v0 = sub_100004FC8(&qword_100157B38);
  v1 = sub_100007868(&qword_100157B40, &qword_100157B38, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v2 = sub_1000116EC();
  return Label.init(title:icon:)(sub_100019D64, v5, sub_100019D6C, &v4, v0, &type metadata for Icon, v1, v2);
}

uint64_t sub_100019D64@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100019B30(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_100019D6C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t result;

  sub_10009C7A4();
  v3 = v2;
  v5 = v4;
  v7 = v6;
  result = swift_getKeyPath(&unk_100114AC0);
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v7;
  return result;
}

uint64_t sub_100019DC8()
{
  return sub_100007868(&qword_100157B48, &qword_100157B50, (uint64_t)&protocol conformance descriptor for Label<A, B>);
}

uint64_t sub_100019DF4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v2 = v1;
  v33 = a1;
  v3 = sub_100004FC8((uint64_t *)&unk_10015C9A0);
  __chkstk_darwin(v3);
  v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.scheme.getter(v8);
  if (v11)
  {
    v12 = v11;
    v13 = String.lowercased()();
    swift_bridgeObjectRelease(v12);
    if (v13._countAndFlagsBits == 0x7366657270 && v13._object == (void *)0xE500000000000000)
    {
      swift_bridgeObjectRelease(0xE500000000000000);
      v32 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
      v32(v10, v1, v6);
LABEL_7:
      v16 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      goto LABEL_17;
    }
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v13._countAndFlagsBits, v13._object, 0x7366657270, 0xE500000000000000, 0);
    swift_bridgeObjectRelease(v13._object);
    v32 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v14 = ((uint64_t (*)(char *, uint64_t, uint64_t))v32)(v10, v1, v6);
    if ((v15 & 1) != 0)
      goto LABEL_7;
  }
  else
  {
    v32 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v14 = ((uint64_t (*)(char *, uint64_t, uint64_t))v32)(v10, v1, v6);
  }
  URL.scheme.getter(v14);
  if (!v17)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v32)(v33, v2, v6);
  }
  v18 = v17;
  v19 = String.lowercased()();
  swift_bridgeObjectRelease(v18);
  if (v19._countAndFlagsBits == 0x666572702D707061 && v19._object == (void *)0xE900000000000073)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    v16 = swift_bridgeObjectRelease(0xE900000000000073);
  }
  else
  {
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v19._countAndFlagsBits, v19._object, 0x666572702D707061, 0xE900000000000073, 0);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    v16 = swift_bridgeObjectRelease(v19._object);
    if ((v21 & 1) == 0)
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v32)(v33, v2, v6);
  }
LABEL_17:
  v34 = URL.absoluteString.getter(v16);
  v35 = v22;
  if (qword_100156C18 != -1)
    swift_once(&qword_100156C18, sub_10001A184);
  v23 = sub_100004FC8(&qword_100157B70);
  v24 = sub_100007808(v23, (uint64_t)qword_100157B58);
  v25 = sub_100004FC8(&qword_100157B78);
  v26 = sub_10001AE4C();
  v27 = sub_10001AE90();
  v28 = sub_100007868(&qword_100157B90, &qword_100157B70, (uint64_t)&protocol conformance descriptor for Regex<A>);
  RangeReplaceableCollection<>.replace<A, B, C>(_:maxReplacements:with:)(v24, 0x7FFFFFFFFFFFFFFFLL, sub_10001ADA0, 0, &type metadata for String, v25, &type metadata for String, v23, v26, v27, v28);
  v29 = v35;
  URL.init(string:)(v34, v35);
  swift_bridgeObjectRelease(v29);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_10000BA50((uint64_t)v5, (uint64_t *)&unk_10015C9A0);
    return ((uint64_t (*)(_QWORD, _QWORD, _QWORD))v32)(v33, v2, v6);
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(v33, v5, v6);
}

uint64_t sub_10001A184()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_100004FC8(&qword_100157B70);
  sub_10001AED4(v0, qword_100157B58);
  sub_100007808(v0, (uint64_t)qword_100157B58);
  v1 = sub_100004FC8(&qword_100157B78);
  v2 = sub_100007868(&qword_100157B90, &qword_100157B70, (uint64_t)&protocol conformance descriptor for Regex<A>);
  return Regex.init<A>(_:)(sub_10001A220, 0, v1, v0, v2);
}

uint64_t sub_10001A220@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  void (*v71)(char *, uint64_t);
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(char *, uint64_t);
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  void (*v83)(char *, uint64_t);
  uint64_t v84;
  void (*v85)(char *, uint64_t);
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t (*v90)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v91;
  char *v92;
  void (*v93)(char *, uint64_t);
  void (*v94)(char *, uint64_t);
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  char *v110;
  void (*v111)(char *, uint64_t);
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  char *v119;

  v98 = a1;
  v1 = sub_100004FC8(&qword_100157BA0);
  __chkstk_darwin(v1);
  v92 = (char *)&v87 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = sub_100004FC8(&qword_100157BA8);
  v94 = *(void (**)(char *, uint64_t))(v113 - 8);
  v3 = __chkstk_darwin(v113);
  v95 = (char *)&v87 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v108 = (char *)&v87 - v6;
  __chkstk_darwin(v5);
  v110 = (char *)&v87 - v7;
  v8 = sub_100004FC8(&qword_100157BB0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v87 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100004FC8(&qword_100157BB8);
  v112 = *(_QWORD *)(v12 - 8);
  v13 = v12;
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v87 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v87 - v18;
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v87 - v21;
  __chkstk_darwin(v20);
  v24 = (char *)&v87 - v23;
  v101 = sub_100004FC8(&qword_100157B70);
  v97 = *(_QWORD *)(v101 - 8);
  v25 = __chkstk_darwin(v101);
  v96 = (char *)&v87 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v25);
  v100 = (char *)&v87 - v28;
  __chkstk_darwin(v27);
  v105 = (char *)&v87 - v29;
  v106 = type metadata accessor for _RegexFactory(0);
  v99 = *(_QWORD *)(v106 - 8);
  __chkstk_darwin(v106);
  v31 = (char *)&v87 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = sub_100004FC8(&qword_100157BC0);
  v102 = *(_QWORD *)(v109 - 8);
  v32 = __chkstk_darwin(v109);
  v34 = (char *)&v87 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __chkstk_darwin(v32);
  v104 = (char *)&v87 - v36;
  makeFactory()(v35);
  ChoiceOf.init(_:)(sub_10001AB94, 0, &type metadata for Substring);
  ChoiceOf.regex.getter(v8);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v37 = v13;
  Regex.ignoresCase(_:)(1, v13);
  v38 = *(void (**)(char *, uint64_t))(v112 + 8);
  v38(v16, v13);
  v39 = sub_100007868(&qword_100157BC8, &qword_100157BB8, (uint64_t)&protocol conformance descriptor for Regex<A>);
  v40 = v22;
  static RegexComponentBuilder.buildExpression<A>(_:)(v19, v37, v39);
  v38(v19, v37);
  v41 = v24;
  v103 = v39;
  static RegexComponentBuilder.buildPartialBlock<A>(first:)(v40, v37, v39);
  v38(v40, v37);
  v111 = v38;
  v42 = sub_100004FC8(&qword_100157B78);
  v43 = v105;
  v107 = v42;
  _RegexFactory.capture<A, B>(_:)(v41, v42, v37, v39);
  v38(v41, v37);
  v112 = *(_QWORD *)(v99 + 8);
  ((void (*)(char *, uint64_t))v112)(v31, v106);
  Capture.init(_:)(v43, v42);
  v91 = sub_100007868(&qword_100157BD0, &qword_100157BC0, (uint64_t)&protocol conformance descriptor for Capture<A>);
  v44 = v109;
  static RegexComponentBuilder.buildExpression<A>(_:)(v34, v109, v91);
  v93 = *(void (**)(char *, uint64_t))(v102 + 8);
  v93(v34, v44);
  v116 = 58;
  v117 = 0xE100000000000000;
  v45 = sub_10001AF14();
  v99 = v45;
  static RegexComponentBuilder.buildExpression<A>(_:)(&v116, &type metadata for String, v45);
  v46 = type metadata accessor for RegexRepetitionBehavior(0);
  v90 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56);
  v47 = (uint64_t)v92;
  v48 = v90(v92, 1, 1, v46);
  makeFactory()(v48);
  v114 = 47;
  v115 = 0xE100000000000000;
  static RegexComponentBuilder.buildExpression<A>(_:)(&v114, &type metadata for String, v45);
  v49 = v117;
  v114 = v116;
  v115 = v117;
  static RegexComponentBuilder.buildPartialBlock<A>(first:)(&v114, &type metadata for String, v45);
  swift_bridgeObjectRelease(v49);
  v88 = v41;
  v89 = v37;
  _RegexFactory.zeroOrMore<A, B>(_:_:)(v40, v47, &type metadata for Substring, v37, v103);
  sub_10000BA50(v47, &qword_100157BA0);
  v111(v40, v37);
  v50 = v106;
  ((void (*)(char *, uint64_t))v112)(v31, v106);
  v51 = v108;
  ZeroOrMore.init(_:)(v41, &type metadata for Substring);
  v102 = sub_100007868(&qword_100157BE0, &qword_100157BA8, (uint64_t)&protocol conformance descriptor for ZeroOrMore<A>);
  v52 = v113;
  static RegexComponentBuilder.buildExpression<A>(_:)(v51, v113, v102);
  v53 = (void (*)(char *, uint64_t))*((_QWORD *)v94 + 1);
  v53(v51, v52);
  v94 = v53;
  v54 = v90((char *)v47, 1, 1, v46);
  makeFactory()(v54);
  v114 = 63;
  v115 = 0xE100000000000000;
  v55 = v99;
  static RegexComponentBuilder.buildExpression<A>(_:)(&v114, &type metadata for String, v99);
  v56 = v117;
  v114 = v116;
  v115 = v117;
  static RegexComponentBuilder.buildPartialBlock<A>(first:)(&v114, &type metadata for String, v55);
  swift_bridgeObjectRelease(v56);
  v57 = v88;
  v58 = v89;
  v59 = v103;
  _RegexFactory.zeroOrMore<A, B>(_:_:)(v40, v47, &type metadata for Substring, v89, v103);
  sub_10000BA50(v47, &qword_100157BA0);
  v111(v40, v58);
  v60 = v50;
  ((void (*)(char *, uint64_t))v112)(v31, v50);
  v61 = v95;
  ZeroOrMore.init(_:)(v57, &type metadata for Substring);
  v62 = v113;
  static RegexComponentBuilder.buildExpression<A>(_:)(v61, v113, v102);
  v53(v61, v62);
  v63 = v105;
  v64 = static RegexComponentBuilder.buildPartialBlock<A>(first:)(v104, v109, v91);
  v65 = v118;
  v66 = (unint64_t)v119;
  v95 = v119;
  makeFactory()(v64);
  v116 = v65;
  v117 = v66;
  v67 = v57;
  _RegexFactory.ignoreCapturesInTypedOutput<A>(_:)(&v116, &type metadata for String, v99);
  v99 = sub_100007868(&qword_100157B90, &qword_100157B70, (uint64_t)&protocol conformance descriptor for Regex<A>);
  v68 = v100;
  v69 = v57;
  v70 = v101;
  _RegexFactory.accumulate<A, B, C>(_:_:)(v63, v69, v107, v101, v58, v99, v59);
  v71 = v111;
  v111(v67, v58);
  ((void (*)(char *, uint64_t))v112)(v31, v60);
  v72 = swift_bridgeObjectRelease(v95);
  makeFactory()(v72);
  v73 = v113;
  _RegexFactory.ignoreCapturesInTypedOutput<A>(_:)(v110, v113, v102);
  v74 = v96;
  v75 = v70;
  v76 = v99;
  _RegexFactory.accumulate<A, B, C>(_:_:)(v68, v67, v107, v75, v58, v99, v59);
  v71(v67, v58);
  v77 = v106;
  v78 = (void (*)(char *, uint64_t))v112;
  v79 = ((uint64_t (*)(char *, uint64_t))v112)(v31, v106);
  makeFactory()(v79);
  v80 = v67;
  v81 = v108;
  _RegexFactory.ignoreCapturesInTypedOutput<A>(_:)(v108, v73, v102);
  v82 = v101;
  _RegexFactory.accumulate<A, B, C>(_:_:)(v74, v80, v107, v101, v58, v76, v103);
  v111(v80, v58);
  v78(v31, v77);
  v83 = *(void (**)(char *, uint64_t))(v97 + 8);
  v83(v74, v82);
  v83(v100, v82);
  v83(v105, v82);
  v84 = v113;
  v85 = v94;
  v94(v81, v113);
  v85(v110, v84);
  return ((uint64_t (*)(char *, uint64_t))v93)(v104, v109);
}

uint64_t sub_10001AB94@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD v17[2];
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v17[1] = a1;
  v1 = sub_100004FC8(&qword_100157BB8);
  __chkstk_darwin(v1);
  v3 = (char *)v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[0] = type metadata accessor for _RegexFactory(0);
  v4 = *(_QWORD *)(v17[0] - 8);
  __chkstk_darwin(v17[0]);
  v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004FC8(&qword_100157BB0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = 0x7366657270;
  v21 = 0xE500000000000000;
  v11 = sub_10001AF14();
  static AlternationBuilder.buildExpression<A>(_:)(&v22, &v20, &type metadata for String, v11);
  v18 = 0x666572702D707061;
  v19 = 0xE900000000000073;
  static AlternationBuilder.buildExpression<A>(_:)(&v20, &v18, &type metadata for String, v11);
  v12 = v23;
  v18 = v22;
  v19 = v23;
  static AlternationBuilder.buildPartialBlock<A>(first:)(&v18, &type metadata for String, v11);
  v13 = swift_bridgeObjectRelease(v12);
  v14 = v21;
  v18 = v20;
  v19 = v21;
  makeFactory()(v13);
  v15 = sub_100007868(&qword_100157BE8, &qword_100157BB0, (uint64_t)&protocol conformance descriptor for ChoiceOf<A>);
  _RegexFactory.accumulateAlternation<A, B, C>(_:_:)(v10, &v18, &type metadata for Substring, v7, &type metadata for String, v15, v11);
  (*(void (**)(char *, _QWORD))(v4 + 8))(v6, v17[0]);
  ChoiceOf.init(_:)(v3, &type metadata for Substring);
  swift_bridgeObjectRelease(v14);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_10001ADA0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t result;
  void *object;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;

  v2 = sub_100004FC8(&qword_100157B98);
  Regex.Match.output.getter(&v8, v2);
  swift_bridgeObjectRelease(v9);
  v3 = v10;
  v4 = Substring.lowercased()();
  swift_bridgeObjectRelease(v3);
  v8 = v4;
  swift_bridgeObjectRetain(v4._object);
  v5._countAndFlagsBits = 1060056890;
  v5._object = (void *)0xE400000000000000;
  String.append(_:)(v5);
  result = swift_bridgeObjectRelease(v4._object);
  object = v8._object;
  *a1 = v8._countAndFlagsBits;
  a1[1] = (uint64_t)object;
  return result;
}

unint64_t sub_10001AE4C()
{
  unint64_t result;

  result = qword_100157B80;
  if (!qword_100157B80)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100157B80);
  }
  return result;
}

unint64_t sub_10001AE90()
{
  unint64_t result;

  result = qword_100157B88;
  if (!qword_100157B88)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100157B88);
  }
  return result;
}

uint64_t *sub_10001AED4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

unint64_t sub_10001AF14()
{
  unint64_t result;

  result = qword_100157BD8;
  if (!qword_100157BD8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100157BD8);
  }
  return result;
}

uint64_t sub_10001AF58@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  Swift::Int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  Swift::String_optional v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t (*v56)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t (*v65)(char *, unint64_t, uint64_t);
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  NSString v84;
  id v85;
  uint64_t v86;
  unint64_t v87;
  char v88;
  char v89;
  uint64_t v90;
  char v91;
  char *v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD v114[5];
  __int128 v115;
  __int128 v116;

  v2 = sub_100004FC8(&qword_10015C890);
  v3 = __chkstk_darwin(v2);
  v100 = (char *)&v97 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v98 = (char *)&v97 - v5;
  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v110 = *(_QWORD *)(v6 - 8);
  v111 = v6;
  v7 = __chkstk_darwin(v6);
  v99 = (uint64_t)&v97 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v97 = (uint64_t)&v97 - v9;
  v10 = sub_100004FC8(&qword_10015C510);
  __chkstk_darwin(v10);
  v102 = (char *)&v97 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for URLQueryItem(0);
  v107 = *(_QWORD *)(v12 - 8);
  v108 = v12;
  v13 = __chkstk_darwin(v12);
  v106 = (char *)&v97 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v101 = (char *)&v97 - v15;
  v16 = sub_100004FC8(&qword_1001570F0);
  __chkstk_darwin(v16);
  v18 = (char *)&v97 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for URLComponents(0);
  v104 = *(_QWORD *)(v19 - 8);
  v105 = v19;
  __chkstk_darwin(v19);
  v103 = (char *)&v97 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for URL(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = __chkstk_darwin(v21);
  v25 = (char *)&v97 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v27 = (char *)&v97 - v26;
  v28 = sub_1000559A0((uint64_t)&off_100147E90);
  v29 = swift_arrayDestroy(&unk_100147EB0, 2, &type metadata for String);
  v30 = URL.scheme.getter(v29);
  if (!v31)
  {
    swift_bridgeObjectRelease(v28);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v110 + 56))(a1, 1, 1, v111);
  }
  v32 = v30;
  v33 = v31;
  v109 = a1;
  v34 = sub_10003A760(v30, v31, v28);
  swift_bridgeObjectRelease(v28);
  if ((v34 & 1) == 0)
  {
    swift_bridgeObjectRelease(v33);
    a1 = v109;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v110 + 56))(a1, 1, 1, v111);
  }
  if (v32 == 0x7366657270 && v33 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    v35 = v111;
  }
  else
  {
    v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v32, v33, 0x7366657270, 0xE500000000000000, 0);
    swift_bridgeObjectRelease(v33);
    v35 = v111;
    if ((v37 & 1) == 0)
    {
      sub_100019DF4((uint64_t)v25);
      v51 = URL.host(percentEncoded:)(1);
      (*(void (**)(char *, uint64_t))(v22 + 8))(v25, v21);
      v52 = v109;
      v53 = v110;
      if (v51.value._object)
      {
        v54 = sub_1000B1ED4(v51.value._countAndFlagsBits, (uint64_t)v51.value._object);
        if (v54 != 44)
        {
          v55 = (uint64_t)v100;
          sub_1000B1370(v54);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48))(v55, 1, v35) != 1)
          {
            v77 = v55;
            v78 = v99;
            sub_10000F48C(v77, v99);
            sub_10000F48C(v78, v52);
            v56 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v53 + 56);
            v57 = v52;
            goto LABEL_31;
          }
          sub_10000BA50(v55, &qword_10015C890);
        }
      }
      v56 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v53 + 56);
      v57 = v52;
LABEL_53:
      v79 = 1;
      return v56(v57, v79, 1, v35);
    }
  }
  v38 = sub_100019DF4((uint64_t)v27);
  v39 = URL.absoluteString.getter(v38);
  v41 = v40;
  (*(void (**)(char *, uint64_t))(v22 + 8))(v27, v21);
  v114[0] = v39;
  v114[1] = v41;
  v42 = sub_100008A5C();
  v43 = StringProtocol.removingPercentEncoding.getter(&type metadata for String, v42);
  v45 = v44;
  swift_bridgeObjectRelease(v41);
  v46 = v109;
  if (!v45)
  {
LABEL_52:
    v56 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v110 + 56);
    v57 = v46;
    goto LABEL_53;
  }
  URLComponents.init(string:)(v43);
  swift_bridgeObjectRelease(v45);
  v48 = v104;
  v47 = v105;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v104 + 48))(v18, 1, v105) == 1)
  {
    v49 = &qword_1001570F0;
    v50 = (uint64_t)v18;
LABEL_13:
    sub_10000BA50(v50, v49);
    goto LABEL_52;
  }
  v58 = v103;
  v59 = (*(uint64_t (**)(char *, char *, uint64_t))(v48 + 32))(v103, v18, v47);
  v60 = URLComponents.queryItems.getter(v59);
  if (!v60)
  {
    v76 = (uint64_t)v102;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v107 + 56))(v102, 1, 1, v108);
LABEL_36:
    (*(void (**)(char *, uint64_t))(v48 + 8))(v58, v47);
    sub_10000BA50(v76, &qword_10015C510);
LABEL_51:
    v35 = v111;
    goto LABEL_52;
  }
  v61 = v60;
  v62 = *(_QWORD *)(v60 + 16);
  if (v62)
  {
    v63 = v60 + ((*(unsigned __int8 *)(v107 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v107 + 80));
    v64 = *(_QWORD *)(v107 + 72);
    v65 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v107 + 16);
    swift_bridgeObjectRetain(v60);
    v66 = v108;
    v67 = v106;
    while (1)
    {
      v68 = v65(v67, v63, v66);
      v69 = URLQueryItem.name.getter(v68);
      v71 = v70;
      if (v69 == 1953460082 && v70 == 0xE400000000000000)
      {
        swift_bridgeObjectRelease(v61);
        v80 = 0xE400000000000000;
        goto LABEL_34;
      }
      v72 = _stringCompareWithSmolCheck(_:_:expecting:)(v69, v70, 1953460082, 0xE400000000000000, 0);
      swift_bridgeObjectRelease(v71);
      if ((v72 & 1) != 0)
        break;
      v67 = v106;
      v66 = v108;
      (*(void (**)(char *, uint64_t))(v107 + 8))(v106, v108);
      v63 += v64;
      --v62;
      v46 = v109;
      if (!v62)
      {
        swift_bridgeObjectRelease(v61);
        v73 = 1;
        v48 = v104;
        v47 = v105;
        v74 = v107;
        v75 = v101;
        v58 = v103;
        goto LABEL_29;
      }
    }
    v80 = v61;
    v46 = v109;
LABEL_34:
    v74 = v107;
    v66 = v108;
    v48 = v104;
    v47 = v105;
    v75 = v101;
    v58 = v103;
    v76 = (uint64_t)v102;
    swift_bridgeObjectRelease(v80);
    (*(void (**)(uint64_t, char *, uint64_t))(v74 + 32))(v76, v106, v66);
    v73 = 0;
  }
  else
  {
    v73 = 1;
    v74 = v107;
    v66 = v108;
    v75 = v101;
LABEL_29:
    v76 = (uint64_t)v102;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v74 + 56))(v76, v73, 1, v66);
  swift_bridgeObjectRelease(v61);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48))(v76, 1, v66) == 1)
    goto LABEL_36;
  v81 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v74 + 32))(v75, v76, v66);
  URLQueryItem.value.getter(v81);
  if (!v82)
  {
    (*(void (**)(char *, uint64_t))(v74 + 8))(v75, v66);
LABEL_50:
    (*(void (**)(char *, uint64_t))(v48 + 8))(v58, v47);
    goto LABEL_51;
  }
  v83 = v82;
  v84 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v83);
  v85 = (id)SFObjectAndOffsetForURLPair(v84);

  v86 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v85, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  v112 = 0x7463656A626FLL;
  v113 = 0xE600000000000000;
  AnyHashable.init<A>(_:)(v114, &v112, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v86 + 16) && (v87 = sub_1000DA95C((uint64_t)v114), (v88 & 1) != 0))
  {
    sub_1000148AC(*(_QWORD *)(v86 + 56) + 32 * v87, (uint64_t)&v115);
  }
  else
  {
    v115 = 0u;
    v116 = 0u;
  }
  swift_bridgeObjectRelease(v86);
  sub_100014878((uint64_t)v114);
  if (!*((_QWORD *)&v116 + 1))
  {
    sub_10000BA50((uint64_t)&v115, &qword_10015BA90);
    v90 = v108;
    goto LABEL_49;
  }
  v89 = swift_dynamicCast(&v112, &v115, (char *)&type metadata for Any + 8, &type metadata for String, 6);
  v90 = v108;
  if ((v89 & 1) == 0)
  {
LABEL_49:
    (*(void (**)(char *, uint64_t))(v74 + 8))(v75, v90);
    goto LABEL_50;
  }
  v91 = sub_10006A148(v112, v113);
  (*(void (**)(char *, uint64_t))(v74 + 8))(v75, v90);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v58, v47);
  v35 = v111;
  if (v91 == 74)
    goto LABEL_52;
  if (v91 == 73)
  {
    v92 = v98;
    swift_storeEnumTagMultiPayload(v98, v111, 8);
    v93 = v110;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v110 + 56))(v92, 0, 1, v35);
  }
  else
  {
    v94 = sub_1000697A0(v91);
    v92 = v98;
    sub_1000B1370(v94);
    v93 = v110;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v110 + 48))(v92, 1, v35) == 1)
    {
      v49 = &qword_10015C890;
      v50 = (uint64_t)v92;
      goto LABEL_13;
    }
  }
  v95 = (uint64_t)v92;
  v96 = v97;
  sub_10000F48C(v95, v97);
  sub_10000F48C(v96, v46);
  v56 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v93 + 56);
  v57 = v46;
LABEL_31:
  v79 = 0;
  return v56(v57, v79, 1, v35);
}

uint64_t sub_10001B894@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  Swift::Int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 *v53;
  char v54;
  unsigned __int8 v55;
  uint64_t v56;
  uint64_t v57;
  Swift::String v58;
  Swift::Bool v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD v80[2];
  _QWORD v81[2];
  uint64_t v82;
  uint64_t v83;

  v77 = a1;
  v1 = sub_100004FC8(&qword_10015C890);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v72 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v72 - v5;
  v7 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v78 = *(_QWORD *)(v7 - 8);
  v79 = v7;
  v8 = __chkstk_darwin(v7);
  v73 = (uint64_t)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v72 - v10;
  v12 = sub_100004FC8(&qword_1001570F0);
  __chkstk_darwin(v12);
  v14 = (char *)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for URLComponents(0);
  v75 = *(_QWORD *)(v15 - 8);
  v76 = v15;
  __chkstk_darwin(v15);
  v74 = (char *)&v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for URL(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v72 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1000559A0((uint64_t)&off_100147ED0);
  v22 = swift_arrayDestroy(&unk_100147EF0, 2, &type metadata for String);
  v23 = URL.scheme.getter(v22);
  if (!v24)
  {
    swift_bridgeObjectRelease(v21);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v78 + 56))(v77, 1, 1, v79);
  }
  v25 = v24;
  v72 = v4;
  v26 = sub_10003A760(v23, v24, v21);
  swift_bridgeObjectRelease(v25);
  swift_bridgeObjectRelease(v21);
  if ((v26 & 1) == 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v78 + 56))(v77, 1, 1, v79);
  v27 = sub_100019DF4((uint64_t)v20);
  v28 = URL.absoluteString.getter(v27);
  v30 = v29;
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  v82 = v28;
  v83 = v30;
  v31 = sub_100008A5C();
  v32 = StringProtocol.removingPercentEncoding.getter(&type metadata for String, v31);
  v34 = v33;
  swift_bridgeObjectRelease(v30);
  if (v34)
  {
    URLComponents.init(string:)(v32);
    swift_bridgeObjectRelease(v34);
    v36 = v75;
    v35 = v76;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(v14, 1, v76) == 1)
    {
      sub_10000BA50((uint64_t)v14, &qword_1001570F0);
      goto LABEL_18;
    }
    v38 = v74;
    v39 = (*(uint64_t (**)(char *, char *, uint64_t))(v36 + 32))(v74, v14, v35);
    v40 = URLComponents.fragment.getter(v39);
    if (!v41)
    {
      (*(void (**)(char *, uint64_t))(v36 + 8))(v38, v35);
      goto LABEL_18;
    }
    v42 = v40;
    v43 = v41;
    swift_bridgeObjectRetain(v41);
    v44 = sub_10006A148(v42, v43);
    if (v44 == 73)
    {
      v46 = v79;
      swift_storeEnumTagMultiPayload(v6, v79, 8);
      v47 = v78;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v78 + 56))(v6, 0, 1, v46);
    }
    else
    {
      if (v44 == 74)
        goto LABEL_13;
      v45 = sub_1000697A0(v44);
      sub_1000B1370(v45);
      v47 = v78;
      v46 = v79;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48))(v6, 1, v79) == 1)
      {
        sub_10000BA50((uint64_t)v6, &qword_10015C890);
LABEL_13:
        v82 = v42;
        v83 = v43;
        v81[0] = 35;
        v81[1] = 0xE100000000000000;
        v80[0] = 0;
        v80[1] = 0xE000000000000000;
        v48 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v81, v80, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v31, v31, v31);
        v50 = v49;
        v51 = 44;
        v52 = v48;
        v53 = (unsigned __int8 *)&byte_100147E60;
        while (1)
        {
          v55 = *v53++;
          v54 = v55;
          sub_1000B1860(v55);
          v57 = v56;
          v58._countAndFlagsBits = v52;
          v58._object = v50;
          v59 = String.hasSuffix(_:)(v58);
          swift_bridgeObjectRelease(v57);
          if (v59)
            break;
          if (!--v51)
          {
            swift_bridgeObjectRelease(v50);
            v61 = v78;
            v60 = v79;
            v62 = (uint64_t)v72;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v78 + 56))(v72, 1, 1, v79);
            goto LABEL_24;
          }
        }
        swift_bridgeObjectRelease(v50);
        v62 = (uint64_t)v72;
        sub_1000B1370(v54);
        v61 = v78;
        v60 = v79;
LABEL_24:
        swift_bridgeObjectRelease(v43);
        (*(void (**)(char *, uint64_t))(v75 + 8))(v74, v76);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48))(v62, 1, v60) == 1)
        {
          sub_10000BA50(v62, &qword_10015C890);
          v64 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v61 + 56);
          v63 = v77;
          v65 = 1;
        }
        else
        {
          v68 = v62;
          v69 = v73;
          sub_10000F48C(v68, v73);
          v70 = v69;
          v71 = v77;
          sub_10000F48C(v70, v77);
          v64 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v61 + 56);
          v63 = v71;
          v65 = 0;
        }
        v66 = v60;
        return v64(v63, v65, 1, v66);
      }
    }
    (*(void (**)(char *, uint64_t))(v36 + 8))(v38, v35);
    swift_bridgeObjectRelease(v43);
    sub_10000F48C((uint64_t)v6, (uint64_t)v11);
    v67 = v77;
    sub_10000F48C((uint64_t)v11, v77);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v47 + 56))(v67, 0, 1, v46);
  }
LABEL_18:
  v63 = v77;
  v64 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v78 + 56);
  v65 = 1;
  v66 = v79;
  return v64(v63, v65, 1, v66);
}

objc_method *sub_10001BE24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t (*v34)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSString v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSString v43;
  void *v44;
  void (*v45)(void);
  uint64_t v46;
  objc_class *ObjCClassFromMetadata;
  uint64_t v48;
  objc_class *v49;
  objc_method *InstanceMethod;
  objc_method *result;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD aBlock[6];

  v1 = type metadata accessor for IntentDonationSettingsNavigationEventResponder(0);
  v55 = *(_QWORD *)(v1 - 8);
  v56 = v1;
  __chkstk_darwin(v1);
  v3 = (char *)&v55 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for URL(0);
  v58 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v55 - v9;
  v57 = v0;
  ObservationRegistrar.init()(v8);
  v11 = (void *)objc_opt_self(PSListController);
  v12 = objc_msgSend(v11, "appearance");
  v13 = (void *)objc_opt_self(UIColor);
  v14 = objc_msgSend(v13, "labelColor");
  objc_msgSend(v12, "setTextColor:", v14);

  v15 = objc_msgSend(v11, "appearance");
  v16 = objc_msgSend(v13, "secondaryLabelColor");
  objc_msgSend(v15, "setAltTextColor:", v16);

  v17 = objc_msgSend(v11, "appearance");
  v18 = objc_msgSend(v13, "placeholderTextColor");
  objc_msgSend(v17, "setEditablePlaceholderTextColor:", v18);

  v19 = objc_msgSend(v11, "appearance");
  v20 = objc_msgSend(v13, "labelColor");
  objc_msgSend(v19, "setEditableTextColor:", v20);

  v21 = objc_msgSend(v11, "appearance");
  v22 = objc_msgSend(v13, "linkColor");
  objc_msgSend(v21, "setButtonTextColor:", v22);

  v23 = objc_msgSend(v11, "appearance");
  v24 = objc_msgSend(v13, "linkColor");
  objc_msgSend(v23, "setFooterHyperlinkColor:", v24);

  v25 = objc_msgSend(v11, "appearance");
  v26 = objc_msgSend(v13, "systemGroupedBackgroundColor");
  objc_msgSend(v25, "setBackgroundColor:", v26);

  v27 = objc_msgSend(v11, "appearance");
  v28 = objc_msgSend(v13, "secondarySystemGroupedBackgroundColor");
  objc_msgSend(v27, "setForegroundColor:", v28);

  v29 = objc_msgSend(v11, "appearance");
  v30 = objc_msgSend(v13, "separatorColor");
  objc_msgSend(v29, "setSeparatorColor:", v30);

  v31 = type metadata accessor for PreferencesListControllerNavigationCoordinator();
  objc_msgSend(v11, "registerDefaultNavigationCoordinatorClass:", swift_getObjCClassFromMetadata(v31));
  v32 = (void *)objc_opt_self(NSUserDefaults);
  v33 = objc_msgSend(v32, "standardUserDefaults");
  static URL.libraryDirectory.getter();
  URL.appendingPathComponent(_:)(0xD000000000000013, 0x8000000100120330);
  v34 = *(uint64_t (**)(char *, uint64_t))(v58 + 8);
  v35 = v34(v7, v4);
  URL.path.getter(v35);
  v37 = v36;
  v34(v10, v4);
  v38 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v37);
  objc_msgSend(v33, "setObject:forKey:", v38, WebStorageDirectoryDefaultsKey);

  v39 = objc_msgSend(v32, "standardUserDefaults");
  static URL.libraryDirectory.getter();
  URL.appendingPathComponent(_:)(0xD000000000000010, 0x8000000100120350);
  v40 = v34(v7, v4);
  URL.path.getter(v40);
  v42 = v41;
  v34(v10, v4);
  v43 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v42);
  objc_msgSend(v39, "setObject:forKey:", v43, WebDatabaseDirectoryDefaultsKey);

  aBlock[4] = variable initialization expression of RestrictionsManager._blockedAppBundleIDs;
  aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001C5BC;
  aBlock[3] = &unk_100148B60;
  v44 = _Block_copy(aBlock);
  v45 = imp_implementationWithBlock(v44);
  v46 = sub_100007BBC(0, &qword_100157CA8, UIApplication_ptr);
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata(v46);
  class_addMethod(ObjCClassFromMetadata, "rootController", v45, 0);
  _Block_release(v44);
  v48 = sub_100007BBC(0, &qword_100157CB0, UINavigationController_ptr);
  v49 = (objc_class *)swift_getObjCClassFromMetadata(v48);
  InstanceMethod = class_getInstanceMethod(v49, "setNavigationBarHidden:animated:");
  result = class_getInstanceMethod(v49, "sa_setNavigationBarHidden:animated:");
  if (InstanceMethod)
  {
    if (result)
    {
      method_exchangeImplementations(InstanceMethod, result);
      type metadata accessor for SettingsEventCenter(0);
      v52 = static SettingsEventCenter.default.getter();
      v53 = static IntentDonationSettingsNavigationEventResponder.defaultPlatformSettingsHostApplicationBundleIdentifier.getter();
      IntentDonationSettingsNavigationEventResponder.init(settingsHostApplicationBundleIdentifier:)(v53);
      v54 = v56;
      SettingsEventCenter.addResponder<A>(_:)(v3, v56, &protocol witness table for IntentDonationSettingsNavigationEventResponder);
      swift_release(v52);
      (*(void (**)(char *, uint64_t))(v55 + 8))(v3, v54);
      return (objc_method *)v57;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10001C4BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC11SettingsApp24SettingsAppLaunchActions___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10001C50C()
{
  return type metadata accessor for SettingsAppLaunchActions(0);
}

uint64_t type metadata accessor for SettingsAppLaunchActions(uint64_t a1)
{
  uint64_t result;

  result = qword_100157C20;
  if (!qword_100157C20)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SettingsAppLaunchActions);
  return result;
}

uint64_t sub_10001C550(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 1, &v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

id sub_10001C5BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  void *v6;

  v4 = *(uint64_t (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = swift_unknownObjectRetain(a2);
  v6 = (void *)v4(v5);
  swift_release(v3);
  swift_unknownObjectRelease(a2);
  return v6;
}

uint64_t *sub_10001C610(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t *, uint64_t *, uint64_t);
  int *v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  void (*v48)(uint64_t *, _QWORD, uint64_t, uint64_t);
  void *v50;
  uint64_t v51;
  _OWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _OWORD *v55;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v9);
  }
  else
  {
    v7 = sub_100004FC8(&qword_1001570F8);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v10 = type metadata accessor for URL(0);
      v11 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
      v11(a1, a2, v10);
      v12 = (int *)type metadata accessor for SettingsURLDestination(0);
      v13 = v12[5];
      v14 = (char *)a1 + v13;
      v15 = (uint64_t *)((char *)a2 + v13);
      v16 = type metadata accessor for SettingsURLDestination.Action(0);
      switch(swift_getEnumCaseMultiPayload(v15, v16))
      {
        case 1u:
          v17 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
          switch(swift_getEnumCaseMultiPayload(v15, v17))
          {
            case 0u:
              v18 = type metadata accessor for FLFollowUpInformation(0);
              (*(void (**)(char *, _QWORD *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v14, v15, v18);
              v19 = v14;
              v20 = v17;
              v21 = 0;
              goto LABEL_21;
            case 1u:
              v25 = type metadata accessor for FLFollowUpInformation(0);
              (*(void (**)(char *, _QWORD *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v14, v15, v25);
              v19 = v14;
              v20 = v17;
              v21 = 1;
              goto LABEL_21;
            case 2u:
              v26 = type metadata accessor for FLFollowUpInformation(0);
              (*(void (**)(char *, _QWORD *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v14, v15, v26);
              v27 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
              v28 = &v14[v27];
              v29 = (_QWORD *)((char *)v15 + v27);
              v30 = v29[1];
              *(_QWORD *)v28 = *v29;
              *((_QWORD *)v28 + 1) = v30;
              swift_bridgeObjectRetain(v30);
              v19 = v14;
              v20 = v17;
              v21 = 2;
              goto LABEL_21;
            case 3u:
              v31 = v15[1];
              *(_QWORD *)v14 = *v15;
              *((_QWORD *)v14 + 1) = v31;
              v53 = v15[3];
              *((_QWORD *)v14 + 2) = v15[2];
              *((_QWORD *)v14 + 3) = v53;
              v32 = v15[5];
              *((_QWORD *)v14 + 4) = v15[4];
              *((_QWORD *)v14 + 5) = v32;
              v33 = v15[6];
              v34 = v15[7];
              *((_QWORD *)v14 + 6) = v33;
              *((_QWORD *)v14 + 7) = v34;
              swift_bridgeObjectRetain(v31);
              swift_bridgeObjectRetain(v53);
              swift_bridgeObjectRetain(v32);
              swift_bridgeObjectRetain(v34);
              v19 = v14;
              v20 = v17;
              v21 = 3;
              goto LABEL_21;
            case 4u:
              v35 = v15[1];
              *(_QWORD *)v14 = *v15;
              *((_QWORD *)v14 + 1) = v35;
              v54 = v15[3];
              *((_QWORD *)v14 + 2) = v15[2];
              *((_QWORD *)v14 + 3) = v54;
              v36 = v15[5];
              *((_QWORD *)v14 + 4) = v15[4];
              *((_QWORD *)v14 + 5) = v36;
              *((_QWORD *)v14 + 6) = v15[6];
              swift_bridgeObjectRetain(v35);
              swift_bridgeObjectRetain(v54);
              swift_bridgeObjectRetain(v36);
              v19 = v14;
              v20 = v17;
              v21 = 4;
              goto LABEL_21;
            case 5u:
              v37 = v15[1];
              *(_QWORD *)v14 = *v15;
              *((_QWORD *)v14 + 1) = v37;
              v38 = v15[3];
              *((_QWORD *)v14 + 2) = v15[2];
              *((_QWORD *)v14 + 3) = v38;
              v50 = (void *)v15[4];
              v51 = v15[5];
              *((_QWORD *)v14 + 4) = v50;
              *((_QWORD *)v14 + 5) = v51;
              v52 = v15 + 6;
              v55 = v14 + 48;
              v39 = v15[9];
              swift_bridgeObjectRetain(v37);
              swift_bridgeObjectRetain(v38);
              v40 = v50;
              swift_bridgeObjectRetain(v51);
              if (v39)
              {
                *((_QWORD *)v14 + 9) = v39;
                (**(void (***)(_OWORD *, _OWORD *, uint64_t))(v39 - 8))(v55, v52, v39);
              }
              else
              {
                v41 = v52[1];
                *v55 = *v52;
                *((_OWORD *)v14 + 4) = v41;
              }
              v19 = v14;
              v20 = v17;
              v21 = 5;
LABEL_21:
              swift_storeEnumTagMultiPayload(v19, v20, v21);
              break;
            default:
              memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
              break;
          }
          v22 = v14;
          v23 = v16;
          v24 = 1;
          goto LABEL_23;
        case 2u:
          v11((uint64_t *)v14, v15, v10);
          v22 = v14;
          v23 = v16;
          v24 = 2;
          goto LABEL_23;
        case 3u:
          v11((uint64_t *)v14, v15, v10);
          v22 = v14;
          v23 = v16;
          v24 = 3;
          goto LABEL_23;
        case 4u:
          v11((uint64_t *)v14, v15, v10);
          v22 = v14;
          v23 = v16;
          v24 = 4;
LABEL_23:
          swift_storeEnumTagMultiPayload(v22, v23, v24);
          break;
        default:
          memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
          break;
      }
      v42 = v12[6];
      v43 = *(uint64_t *)((char *)a2 + v42);
      *(uint64_t *)((char *)a1 + v42) = v43;
      v44 = v12[7];
      v45 = (uint64_t *)((char *)a1 + v44);
      v46 = (uint64_t *)((char *)a2 + v44);
      v47 = v46[1];
      *v45 = *v46;
      v45[1] = v47;
      v48 = *(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56);
      swift_bridgeObjectRetain(v43);
      swift_bridgeObjectRetain(v47);
      v48(a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_10001CA34(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = sub_100004FC8(&qword_1001570F8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 1, v2);
  if (!(_DWORD)result)
  {
    v4 = type metadata accessor for URL(0);
    v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
    v5(a1, v4);
    v6 = (int *)type metadata accessor for SettingsURLDestination(0);
    v7 = a1 + v6[5];
    v8 = type metadata accessor for SettingsURLDestination.Action(0);
    switch(swift_getEnumCaseMultiPayload(v7, v8))
    {
      case 1u:
        v9 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
        switch(swift_getEnumCaseMultiPayload(v7, v9))
        {
          case 0u:
          case 1u:
            v10 = type metadata accessor for FLFollowUpInformation(0);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v7, v10);
            break;
          case 2u:
            v11 = type metadata accessor for FLFollowUpInformation(0);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v7, v11);
            v12 = sub_100004FC8(&qword_10015C420);
            swift_bridgeObjectRelease(*(_QWORD *)(v7 + *(int *)(v12 + 48) + 8));
            break;
          case 3u:
            swift_bridgeObjectRelease(*(_QWORD *)(v7 + 8));
            swift_bridgeObjectRelease(*(_QWORD *)(v7 + 24));
            swift_bridgeObjectRelease(*(_QWORD *)(v7 + 40));
            swift_bridgeObjectRelease(*(_QWORD *)(v7 + 56));
            break;
          case 4u:
            swift_bridgeObjectRelease(*(_QWORD *)(v7 + 8));
            swift_bridgeObjectRelease(*(_QWORD *)(v7 + 24));
            swift_bridgeObjectRelease(*(_QWORD *)(v7 + 40));
            break;
          case 5u:
            swift_bridgeObjectRelease(*(_QWORD *)(v7 + 8));
            swift_bridgeObjectRelease(*(_QWORD *)(v7 + 24));

            swift_bridgeObjectRelease(*(_QWORD *)(v7 + 40));
            if (*(_QWORD *)(v7 + 72))
              sub_100005474((_QWORD *)(v7 + 48));
            break;
          default:
            goto LABEL_4;
        }
        break;
      case 2u:
      case 3u:
      case 4u:
        v5(v7, v4);
        break;
      default:
        break;
    }
LABEL_4:
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + v6[6]));
    return swift_bridgeObjectRelease(*(_QWORD *)(a1 + v6[7] + 8));
  }
  return result;
}

char *sub_10001CC34(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  void (*v46)(char *, _QWORD, uint64_t, uint64_t);
  void *v48;
  uint64_t v49;
  _OWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _OWORD *v53;

  v6 = sub_100004FC8(&qword_1001570F8);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v8 = type metadata accessor for URL(0);
    v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
    v9(a1, a2, v8);
    v10 = (int *)type metadata accessor for SettingsURLDestination(0);
    v11 = v10[5];
    v12 = &a1[v11];
    v13 = &a2[v11];
    v14 = type metadata accessor for SettingsURLDestination.Action(0);
    switch(swift_getEnumCaseMultiPayload(v13, v14))
    {
      case 1u:
        v15 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
        switch(swift_getEnumCaseMultiPayload(v13, v15))
        {
          case 0u:
            v16 = type metadata accessor for FLFollowUpInformation(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v12, v13, v16);
            v17 = v12;
            v18 = v15;
            v19 = 0;
            goto LABEL_19;
          case 1u:
            v23 = type metadata accessor for FLFollowUpInformation(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v12, v13, v23);
            v17 = v12;
            v18 = v15;
            v19 = 1;
            goto LABEL_19;
          case 2u:
            v24 = type metadata accessor for FLFollowUpInformation(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v12, v13, v24);
            v25 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
            v26 = &v12[v25];
            v27 = &v13[v25];
            v28 = *((_QWORD *)v27 + 1);
            *(_QWORD *)v26 = *(_QWORD *)v27;
            *((_QWORD *)v26 + 1) = v28;
            swift_bridgeObjectRetain(v28);
            v17 = v12;
            v18 = v15;
            v19 = 2;
            goto LABEL_19;
          case 3u:
            v29 = *((_QWORD *)v13 + 1);
            *(_QWORD *)v12 = *(_QWORD *)v13;
            *((_QWORD *)v12 + 1) = v29;
            v51 = *((_QWORD *)v13 + 3);
            *((_QWORD *)v12 + 2) = *((_QWORD *)v13 + 2);
            *((_QWORD *)v12 + 3) = v51;
            v30 = *((_QWORD *)v13 + 5);
            *((_QWORD *)v12 + 4) = *((_QWORD *)v13 + 4);
            *((_QWORD *)v12 + 5) = v30;
            v31 = *((_QWORD *)v13 + 6);
            v32 = *((_QWORD *)v13 + 7);
            *((_QWORD *)v12 + 6) = v31;
            *((_QWORD *)v12 + 7) = v32;
            swift_bridgeObjectRetain(v29);
            swift_bridgeObjectRetain(v51);
            swift_bridgeObjectRetain(v30);
            swift_bridgeObjectRetain(v32);
            v17 = v12;
            v18 = v15;
            v19 = 3;
            goto LABEL_19;
          case 4u:
            v33 = *((_QWORD *)v13 + 1);
            *(_QWORD *)v12 = *(_QWORD *)v13;
            *((_QWORD *)v12 + 1) = v33;
            v52 = *((_QWORD *)v13 + 3);
            *((_QWORD *)v12 + 2) = *((_QWORD *)v13 + 2);
            *((_QWORD *)v12 + 3) = v52;
            v34 = *((_QWORD *)v13 + 5);
            *((_QWORD *)v12 + 4) = *((_QWORD *)v13 + 4);
            *((_QWORD *)v12 + 5) = v34;
            *((_QWORD *)v12 + 6) = *((_QWORD *)v13 + 6);
            swift_bridgeObjectRetain(v33);
            swift_bridgeObjectRetain(v52);
            swift_bridgeObjectRetain(v34);
            v17 = v12;
            v18 = v15;
            v19 = 4;
            goto LABEL_19;
          case 5u:
            v35 = *((_QWORD *)v13 + 1);
            *(_QWORD *)v12 = *(_QWORD *)v13;
            *((_QWORD *)v12 + 1) = v35;
            v36 = *((_QWORD *)v13 + 3);
            *((_QWORD *)v12 + 2) = *((_QWORD *)v13 + 2);
            *((_QWORD *)v12 + 3) = v36;
            v48 = (void *)*((_QWORD *)v13 + 4);
            v49 = *((_QWORD *)v13 + 5);
            *((_QWORD *)v12 + 4) = v48;
            *((_QWORD *)v12 + 5) = v49;
            v50 = v13 + 48;
            v53 = v12 + 48;
            v37 = *((_QWORD *)v13 + 9);
            swift_bridgeObjectRetain(v35);
            swift_bridgeObjectRetain(v36);
            v38 = v48;
            swift_bridgeObjectRetain(v49);
            if (v37)
            {
              *((_QWORD *)v12 + 9) = v37;
              (**(void (***)(_OWORD *, _OWORD *, uint64_t))(v37 - 8))(v53, v50, v37);
            }
            else
            {
              v39 = v50[1];
              *v53 = *v50;
              *((_OWORD *)v12 + 4) = v39;
            }
            v17 = v12;
            v18 = v15;
            v19 = 5;
LABEL_19:
            swift_storeEnumTagMultiPayload(v17, v18, v19);
            break;
          default:
            memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
            break;
        }
        v20 = v12;
        v21 = v14;
        v22 = 1;
        goto LABEL_21;
      case 2u:
        v9(v12, v13, v8);
        v20 = v12;
        v21 = v14;
        v22 = 2;
        goto LABEL_21;
      case 3u:
        v9(v12, v13, v8);
        v20 = v12;
        v21 = v14;
        v22 = 3;
        goto LABEL_21;
      case 4u:
        v9(v12, v13, v8);
        v20 = v12;
        v21 = v14;
        v22 = 4;
LABEL_21:
        swift_storeEnumTagMultiPayload(v20, v21, v22);
        break;
      default:
        memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
        break;
    }
    v40 = v10[6];
    v41 = *(_QWORD *)&a2[v40];
    *(_QWORD *)&a1[v40] = v41;
    v42 = v10[7];
    v43 = &a1[v42];
    v44 = &a2[v42];
    v45 = *((_QWORD *)v44 + 1);
    *(_QWORD *)v43 = *(_QWORD *)v44;
    *((_QWORD *)v43 + 1) = v45;
    v46 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56);
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRetain(v45);
    v46(a1, 0, 1, v6);
  }
  return a1;
}

char *sub_10001D034(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  void (*v83)(char *, _QWORD, uint64_t, uint64_t);
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  void *v94;
  uint64_t v95;
  _OWORD *v96;
  _OWORD *v97;
  uint64_t v98;
  uint64_t v99;
  _OWORD *v100;
  _OWORD *v101;

  v6 = sub_100004FC8(&qword_1001570F8);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      v11 = type metadata accessor for URL(0);
      v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
      v12(a1, a2, v11);
      v13 = (int *)type metadata accessor for SettingsURLDestination(0);
      v14 = v13[5];
      v15 = &a1[v14];
      v16 = &a2[v14];
      v17 = type metadata accessor for SettingsURLDestination.Action(0);
      switch(swift_getEnumCaseMultiPayload(v16, v17))
      {
        case 1u:
          v18 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
          switch(swift_getEnumCaseMultiPayload(v16, v18))
          {
            case 0u:
              v19 = type metadata accessor for FLFollowUpInformation(0);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v15, v16, v19);
              v20 = v15;
              v21 = v18;
              v22 = 0;
              goto LABEL_37;
            case 1u:
              v42 = type metadata accessor for FLFollowUpInformation(0);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v15, v16, v42);
              v20 = v15;
              v21 = v18;
              v22 = 1;
              goto LABEL_37;
            case 2u:
              v43 = type metadata accessor for FLFollowUpInformation(0);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v15, v16, v43);
              v44 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
              v45 = &v15[v44];
              v46 = &v16[v44];
              *(_QWORD *)v45 = *(_QWORD *)v46;
              v47 = *((_QWORD *)v46 + 1);
              *((_QWORD *)v45 + 1) = v47;
              swift_bridgeObjectRetain(v47);
              v20 = v15;
              v21 = v18;
              v22 = 2;
              goto LABEL_37;
            case 3u:
              *(_QWORD *)v15 = *(_QWORD *)v16;
              v48 = *((_QWORD *)v16 + 1);
              *((_QWORD *)v15 + 1) = v48;
              *((_QWORD *)v15 + 2) = *((_QWORD *)v16 + 2);
              v98 = *((_QWORD *)v16 + 3);
              *((_QWORD *)v15 + 3) = v98;
              *((_QWORD *)v15 + 4) = *((_QWORD *)v16 + 4);
              v49 = *((_QWORD *)v16 + 5);
              *((_QWORD *)v15 + 5) = v49;
              *((_QWORD *)v15 + 6) = *((_QWORD *)v16 + 6);
              v50 = *((_QWORD *)v16 + 7);
              *((_QWORD *)v15 + 7) = v50;
              swift_bridgeObjectRetain(v48);
              swift_bridgeObjectRetain(v98);
              swift_bridgeObjectRetain(v49);
              swift_bridgeObjectRetain(v50);
              v20 = v15;
              v21 = v18;
              v22 = 3;
              goto LABEL_37;
            case 4u:
              *(_QWORD *)v15 = *(_QWORD *)v16;
              v51 = *((_QWORD *)v16 + 1);
              *((_QWORD *)v15 + 1) = v51;
              *((_QWORD *)v15 + 2) = *((_QWORD *)v16 + 2);
              v99 = *((_QWORD *)v16 + 3);
              *((_QWORD *)v15 + 3) = v99;
              *((_QWORD *)v15 + 4) = *((_QWORD *)v16 + 4);
              v52 = *((_QWORD *)v16 + 5);
              *((_QWORD *)v15 + 5) = v52;
              *((_QWORD *)v15 + 6) = *((_QWORD *)v16 + 6);
              swift_bridgeObjectRetain(v51);
              swift_bridgeObjectRetain(v99);
              swift_bridgeObjectRetain(v52);
              v20 = v15;
              v21 = v18;
              v22 = 4;
              goto LABEL_37;
            case 5u:
              *(_QWORD *)v15 = *(_QWORD *)v16;
              v53 = *((_QWORD *)v16 + 1);
              *((_QWORD *)v15 + 1) = v53;
              *((_QWORD *)v15 + 2) = *((_QWORD *)v16 + 2);
              v54 = *((_QWORD *)v16 + 3);
              *((_QWORD *)v15 + 3) = v54;
              v94 = (void *)*((_QWORD *)v16 + 4);
              *((_QWORD *)v15 + 4) = v94;
              v95 = *((_QWORD *)v16 + 5);
              *((_QWORD *)v15 + 5) = v95;
              v96 = v16 + 48;
              v100 = v15 + 48;
              v55 = *((_QWORD *)v16 + 9);
              swift_bridgeObjectRetain(v53);
              swift_bridgeObjectRetain(v54);
              v56 = v94;
              swift_bridgeObjectRetain(v95);
              if (v55)
              {
                *((_QWORD *)v15 + 9) = v55;
                (**(void (***)(_OWORD *, _OWORD *, uint64_t))(v55 - 8))(v100, v96, v55);
              }
              else
              {
                v76 = v96[1];
                *v100 = *v96;
                *((_OWORD *)v15 + 4) = v76;
              }
              v20 = v15;
              v21 = v18;
              v22 = 5;
LABEL_37:
              swift_storeEnumTagMultiPayload(v20, v21, v22);
              break;
            default:
              memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
              break;
          }
          v36 = v15;
          v37 = v17;
          v38 = 1;
          goto LABEL_39;
        case 2u:
          v12(v15, v16, v11);
          v36 = v15;
          v37 = v17;
          v38 = 2;
          goto LABEL_39;
        case 3u:
          v12(v15, v16, v11);
          v36 = v15;
          v37 = v17;
          v38 = 3;
          goto LABEL_39;
        case 4u:
          v12(v15, v16, v11);
          v36 = v15;
          v37 = v17;
          v38 = 4;
LABEL_39:
          swift_storeEnumTagMultiPayload(v36, v37, v38);
          break;
        default:
          memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
          break;
      }
      v77 = v13[6];
      v78 = *(_QWORD *)&a2[v77];
      *(_QWORD *)&a1[v77] = v78;
      v79 = v13[7];
      v80 = &a1[v79];
      v81 = &a2[v79];
      *(_QWORD *)v80 = *(_QWORD *)v81;
      v82 = *((_QWORD *)v81 + 1);
      *((_QWORD *)v80 + 1) = v82;
      v83 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56);
      swift_bridgeObjectRetain(v78);
      swift_bridgeObjectRetain(v82);
      v83(a1, 0, 1, v6);
      return a1;
    }
LABEL_8:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  if (v10)
  {
    sub_10000BA50((uint64_t)a1, &qword_1001570F8);
    goto LABEL_8;
  }
  v23 = type metadata accessor for URL(0);
  v24 = *(_QWORD *)(v23 - 8);
  (*(void (**)(char *, char *, uint64_t))(v24 + 24))(a1, a2, v23);
  v25 = type metadata accessor for SettingsURLDestination(0);
  v26 = v25;
  if (a1 != a2)
  {
    v27 = *(int *)(v25 + 20);
    v28 = &a1[v27];
    v29 = &a2[v27];
    sub_1000076B4((uint64_t)&a1[v27], type metadata accessor for SettingsURLDestination.Action);
    v30 = type metadata accessor for SettingsURLDestination.Action(0);
    switch(swift_getEnumCaseMultiPayload(v29, v30))
    {
      case 1u:
        v31 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
        switch(swift_getEnumCaseMultiPayload(v29, v31))
        {
          case 0u:
            v32 = type metadata accessor for FLFollowUpInformation(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v28, v29, v32);
            v33 = v28;
            v34 = v31;
            v35 = 0;
            goto LABEL_43;
          case 1u:
            v57 = type metadata accessor for FLFollowUpInformation(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 16))(v28, v29, v57);
            v33 = v28;
            v34 = v31;
            v35 = 1;
            goto LABEL_43;
          case 2u:
            v58 = type metadata accessor for FLFollowUpInformation(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 16))(v28, v29, v58);
            v59 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
            v60 = &v28[v59];
            v61 = &v29[v59];
            *(_QWORD *)v60 = *(_QWORD *)v61;
            v62 = *((_QWORD *)v61 + 1);
            *((_QWORD *)v60 + 1) = v62;
            swift_bridgeObjectRetain(v62);
            v33 = v28;
            v34 = v31;
            v35 = 2;
            goto LABEL_43;
          case 3u:
            *(_QWORD *)v28 = *(_QWORD *)v29;
            v63 = *((_QWORD *)v29 + 1);
            *((_QWORD *)v28 + 1) = v63;
            *((_QWORD *)v28 + 2) = *((_QWORD *)v29 + 2);
            v64 = *((_QWORD *)v29 + 3);
            *((_QWORD *)v28 + 3) = v64;
            *((_QWORD *)v28 + 4) = *((_QWORD *)v29 + 4);
            v65 = *((_QWORD *)v29 + 5);
            *((_QWORD *)v28 + 5) = v65;
            *((_QWORD *)v28 + 6) = *((_QWORD *)v29 + 6);
            v66 = *((_QWORD *)v29 + 7);
            *((_QWORD *)v28 + 7) = v66;
            swift_bridgeObjectRetain(v63);
            swift_bridgeObjectRetain(v64);
            swift_bridgeObjectRetain(v65);
            swift_bridgeObjectRetain(v66);
            v33 = v28;
            v34 = v31;
            v35 = 3;
            goto LABEL_43;
          case 4u:
            *(_QWORD *)v28 = *(_QWORD *)v29;
            v67 = *((_QWORD *)v29 + 1);
            *((_QWORD *)v28 + 1) = v67;
            *((_QWORD *)v28 + 2) = *((_QWORD *)v29 + 2);
            v68 = *((_QWORD *)v29 + 3);
            *((_QWORD *)v28 + 3) = v68;
            *((_QWORD *)v28 + 4) = *((_QWORD *)v29 + 4);
            v69 = *((_QWORD *)v29 + 5);
            *((_QWORD *)v28 + 5) = v69;
            *((_QWORD *)v28 + 6) = *((_QWORD *)v29 + 6);
            swift_bridgeObjectRetain(v67);
            swift_bridgeObjectRetain(v68);
            swift_bridgeObjectRetain(v69);
            v33 = v28;
            v34 = v31;
            v35 = 4;
            goto LABEL_43;
          case 5u:
            *(_QWORD *)v28 = *(_QWORD *)v29;
            v70 = *((_QWORD *)v29 + 1);
            *((_QWORD *)v28 + 1) = v70;
            *((_QWORD *)v28 + 2) = *((_QWORD *)v29 + 2);
            v71 = *((_QWORD *)v29 + 3);
            *((_QWORD *)v28 + 3) = v71;
            v72 = (void *)*((_QWORD *)v29 + 4);
            *((_QWORD *)v28 + 4) = v72;
            v73 = *((_QWORD *)v29 + 5);
            *((_QWORD *)v28 + 5) = v73;
            v97 = v29 + 48;
            v101 = v28 + 48;
            v74 = *((_QWORD *)v29 + 9);
            swift_bridgeObjectRetain(v70);
            swift_bridgeObjectRetain(v71);
            v75 = v72;
            swift_bridgeObjectRetain(v73);
            if (v74)
            {
              *((_QWORD *)v28 + 9) = v74;
              (**(void (***)(_OWORD *, _OWORD *, uint64_t))(v74 - 8))(v101, v97, v74);
            }
            else
            {
              v84 = v97[1];
              *v101 = *v97;
              *((_OWORD *)v28 + 4) = v84;
            }
            v33 = v28;
            v34 = v31;
            v35 = 5;
LABEL_43:
            swift_storeEnumTagMultiPayload(v33, v34, v35);
            break;
          default:
            memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
            break;
        }
        v39 = v28;
        v40 = v30;
        v41 = 1;
        goto LABEL_45;
      case 2u:
        (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v28, v29, v23);
        v39 = v28;
        v40 = v30;
        v41 = 2;
        goto LABEL_45;
      case 3u:
        (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v28, v29, v23);
        v39 = v28;
        v40 = v30;
        v41 = 3;
        goto LABEL_45;
      case 4u:
        (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v28, v29, v23);
        v39 = v28;
        v40 = v30;
        v41 = 4;
LABEL_45:
        swift_storeEnumTagMultiPayload(v39, v40, v41);
        break;
      default:
        memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
        break;
    }
  }
  v85 = *(int *)(v26 + 24);
  v86 = *(_QWORD *)&a2[v85];
  v87 = *(_QWORD *)&a1[v85];
  *(_QWORD *)&a1[v85] = v86;
  swift_bridgeObjectRetain(v86);
  swift_bridgeObjectRelease(v87);
  v88 = *(int *)(v26 + 28);
  v89 = &a1[v88];
  v90 = &a2[v88];
  *(_QWORD *)v89 = *(_QWORD *)v90;
  v91 = *((_QWORD *)v90 + 1);
  v92 = *((_QWORD *)v89 + 1);
  *((_QWORD *)v89 + 1) = v91;
  swift_bridgeObjectRetain(v91);
  swift_bridgeObjectRelease(v92);
  return a1;
}

char *sub_10001D8A4(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  int EnumCaseMultiPayload;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = sub_100004FC8(&qword_1001570F8);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v8 = type metadata accessor for URL(0);
    v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32);
    v9(a1, a2, v8);
    v10 = (int *)type metadata accessor for SettingsURLDestination(0);
    v11 = v10[5];
    v12 = &a1[v11];
    v13 = &a2[v11];
    v14 = type metadata accessor for SettingsURLDestination.Action(0);
    switch(swift_getEnumCaseMultiPayload(v13, v14))
    {
      case 1u:
        v15 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v13, v15);
        if (EnumCaseMultiPayload == 2)
        {
          v21 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v12, v13, v21);
          v22 = sub_100004FC8(&qword_10015C420);
          *(_OWORD *)&v12[*(int *)(v22 + 48)] = *(_OWORD *)&v13[*(int *)(v22 + 48)];
          swift_storeEnumTagMultiPayload(v12, v15, 2);
        }
        else if (EnumCaseMultiPayload == 1)
        {
          v23 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v12, v13, v23);
          swift_storeEnumTagMultiPayload(v12, v15, 1);
        }
        else if (EnumCaseMultiPayload)
        {
          memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
        }
        else
        {
          v17 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v12, v13, v17);
          swift_storeEnumTagMultiPayload(v12, v15, 0);
        }
        v18 = v12;
        v19 = v14;
        v20 = 1;
        goto LABEL_16;
      case 2u:
        v9(v12, v13, v8);
        v18 = v12;
        v19 = v14;
        v20 = 2;
        goto LABEL_16;
      case 3u:
        v9(v12, v13, v8);
        v18 = v12;
        v19 = v14;
        v20 = 3;
        goto LABEL_16;
      case 4u:
        v9(v12, v13, v8);
        v18 = v12;
        v19 = v14;
        v20 = 4;
LABEL_16:
        swift_storeEnumTagMultiPayload(v18, v19, v20);
        break;
      default:
        memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
        break;
    }
    *(_QWORD *)&a1[v10[6]] = *(_QWORD *)&a2[v10[6]];
    *(_OWORD *)&a1[v10[7]] = *(_OWORD *)&a2[v10[7]];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

char *sub_10001DB54(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int EnumCaseMultiPayload;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v6 = sub_100004FC8(&qword_1001570F8);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      v11 = type metadata accessor for URL(0);
      v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32);
      v12(a1, a2, v11);
      v13 = (int *)type metadata accessor for SettingsURLDestination(0);
      v14 = v13[5];
      v15 = &a1[v14];
      v16 = &a2[v14];
      v17 = type metadata accessor for SettingsURLDestination.Action(0);
      switch(swift_getEnumCaseMultiPayload(v16, v17))
      {
        case 1u:
          v18 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
          EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v16, v18);
          if (EnumCaseMultiPayload == 2)
          {
            v38 = type metadata accessor for FLFollowUpInformation(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v15, v16, v38);
            v39 = sub_100004FC8(&qword_10015C420);
            *(_OWORD *)&v15[*(int *)(v39 + 48)] = *(_OWORD *)&v16[*(int *)(v39 + 48)];
            swift_storeEnumTagMultiPayload(v15, v18, 2);
          }
          else if (EnumCaseMultiPayload == 1)
          {
            v40 = type metadata accessor for FLFollowUpInformation(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 32))(v15, v16, v40);
            swift_storeEnumTagMultiPayload(v15, v18, 1);
          }
          else if (EnumCaseMultiPayload)
          {
            memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
          }
          else
          {
            v20 = type metadata accessor for FLFollowUpInformation(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v15, v16, v20);
            swift_storeEnumTagMultiPayload(v15, v18, 0);
          }
          v32 = v15;
          v33 = v17;
          v34 = 1;
          goto LABEL_29;
        case 2u:
          v12(v15, v16, v11);
          v32 = v15;
          v33 = v17;
          v34 = 2;
          goto LABEL_29;
        case 3u:
          v12(v15, v16, v11);
          v32 = v15;
          v33 = v17;
          v34 = 3;
          goto LABEL_29;
        case 4u:
          v12(v15, v16, v11);
          v32 = v15;
          v33 = v17;
          v34 = 4;
LABEL_29:
          swift_storeEnumTagMultiPayload(v32, v33, v34);
          break;
        default:
          memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
          break;
      }
      *(_QWORD *)&a1[v13[6]] = *(_QWORD *)&a2[v13[6]];
      *(_OWORD *)&a1[v13[7]] = *(_OWORD *)&a2[v13[7]];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      return a1;
    }
LABEL_10:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  if (v10)
  {
    sub_10000BA50((uint64_t)a1, &qword_1001570F8);
    goto LABEL_10;
  }
  v21 = type metadata accessor for URL(0);
  v22 = *(_QWORD *)(v21 - 8);
  (*(void (**)(char *, char *, uint64_t))(v22 + 40))(a1, a2, v21);
  v23 = type metadata accessor for SettingsURLDestination(0);
  v24 = v23;
  if (a1 != a2)
  {
    v25 = *(int *)(v23 + 20);
    v26 = &a1[v25];
    v27 = &a2[v25];
    sub_1000076B4((uint64_t)&a1[v25], type metadata accessor for SettingsURLDestination.Action);
    v28 = type metadata accessor for SettingsURLDestination.Action(0);
    switch(swift_getEnumCaseMultiPayload(v27, v28))
    {
      case 1u:
        v29 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
        v30 = swift_getEnumCaseMultiPayload(v27, v29);
        if (v30 == 2)
        {
          v41 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 32))(v26, v27, v41);
          v42 = sub_100004FC8(&qword_10015C420);
          *(_OWORD *)&v26[*(int *)(v42 + 48)] = *(_OWORD *)&v27[*(int *)(v42 + 48)];
          swift_storeEnumTagMultiPayload(v26, v29, 2);
        }
        else if (v30 == 1)
        {
          v43 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 32))(v26, v27, v43);
          swift_storeEnumTagMultiPayload(v26, v29, 1);
        }
        else if (v30)
        {
          memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
        }
        else
        {
          v31 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v26, v27, v31);
          swift_storeEnumTagMultiPayload(v26, v29, 0);
        }
        v35 = v26;
        v36 = v28;
        v37 = 1;
        goto LABEL_35;
      case 2u:
        (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v26, v27, v21);
        v35 = v26;
        v36 = v28;
        v37 = 2;
        goto LABEL_35;
      case 3u:
        (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v26, v27, v21);
        v35 = v26;
        v36 = v28;
        v37 = 3;
        goto LABEL_35;
      case 4u:
        (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v26, v27, v21);
        v35 = v26;
        v36 = v28;
        v37 = 4;
LABEL_35:
        swift_storeEnumTagMultiPayload(v35, v36, v37);
        break;
      default:
        memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
        break;
    }
  }
  v44 = *(int *)(v24 + 24);
  v45 = *(_QWORD *)&a1[v44];
  *(_QWORD *)&a1[v44] = *(_QWORD *)&a2[v44];
  swift_bridgeObjectRelease(v45);
  v46 = *(int *)(v24 + 28);
  v47 = &a1[v46];
  v48 = &a2[v46];
  v50 = *(_QWORD *)v48;
  v49 = *((_QWORD *)v48 + 1);
  v51 = *((_QWORD *)v47 + 1);
  *(_QWORD *)v47 = v50;
  *((_QWORD *)v47 + 1) = v49;
  swift_bridgeObjectRelease(v51);
  return a1;
}

uint64_t sub_10001E07C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001E088);
}

uint64_t sub_10001E088(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = sub_100004FC8(&qword_1001570F8);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 2)
    return v5 - 1;
  else
    return 0;
}

uint64_t sub_10001E0D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001E0E4);
}

uint64_t sub_10001E0E4(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 1);
  else
    v5 = 0;
  v6 = sub_100004FC8(&qword_1001570F8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, v5, a3, v6);
}

uint64_t sub_10001E138(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004FC8(&qword_1001570F8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 1, v2);
}

uint64_t sub_10001E174(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004FC8(&qword_1001570F8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, 1, v4);
}

uint64_t type metadata accessor for SettingsURLRoute(uint64_t a1)
{
  uint64_t result;

  result = qword_100157D28;
  if (!qword_100157D28)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SettingsURLRoute);
  return result;
}

uint64_t sub_10001E1F4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  result = type metadata accessor for SettingsURLDestination(319);
  if (v3 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload(a1, 256, *(_QWORD *)(result - 8) + 64, 1);
    return 0;
  }
  return result;
}

uint64_t sub_10001E248()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  void *object;
  _QWORD v13[2];

  v1 = v0;
  v2 = type metadata accessor for SettingsURLDestination(0);
  __chkstk_darwin(v2);
  v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SettingsURLRoute(0);
  __chkstk_darwin(v5);
  v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001E980(v1, (uint64_t)v7);
  v8 = sub_100004FC8(&qword_1001570F8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8) == 1)
    return 0x6564726163736964;
  sub_10001E9C4((uint64_t)v7, (uint64_t)v4);
  v13[0] = 0x2064656C646E6168;
  v13[1] = 0xE800000000000000;
  v10._countAndFlagsBits = sub_10000E540();
  object = v10._object;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(object);
  v9 = v13[0];
  sub_1000076B4((uint64_t)v4, type metadata accessor for SettingsURLDestination);
  return v9;
}

void sub_10001E38C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::UInt v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = v1;
  v4 = type metadata accessor for SettingsURLDestination(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SettingsURLRoute(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001E980(v2, (uint64_t)v9);
  v10 = sub_100004FC8(&qword_1001570F8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    sub_10001E9C4((uint64_t)v9, (uint64_t)v6);
    Hasher._combine(_:)(1uLL);
    v11 = type metadata accessor for URL(0);
    v12 = sub_100007828((unint64_t *)&unk_10015BAD0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    dispatch thunk of Hashable.hash(into:)(a1, v11, v12);
    sub_10000E9C4();
    v13 = *(_QWORD *)&v6[*(int *)(v4 + 24)];
    v14 = *(_QWORD *)(v13 + 16);
    Hasher._combine(_:)(v14);
    if (v14)
    {
      v15 = type metadata accessor for URLQueryItem(0);
      v16 = *(_QWORD *)(v15 - 8);
      v17 = v13 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
      v18 = *(_QWORD *)(v16 + 72);
      v19 = sub_100007828(&qword_100157378, (uint64_t (*)(uint64_t))&type metadata accessor for URLQueryItem, (uint64_t)&protocol conformance descriptor for URLQueryItem);
      do
      {
        dispatch thunk of Hashable.hash(into:)(a1, v15, v19);
        v17 += v18;
        --v14;
      }
      while (v14);
    }
    sub_1000076B4((uint64_t)v6, type metadata accessor for SettingsURLDestination);
  }
}

Swift::Int sub_10001E56C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::UInt v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v20[9];

  v1 = v0;
  v2 = type metadata accessor for SettingsURLDestination(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v20[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SettingsURLRoute(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v20[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)(v20, 0);
  sub_10001E980(v1, (uint64_t)v7);
  v8 = sub_100004FC8(&qword_1001570F8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    sub_10001E9C4((uint64_t)v7, (uint64_t)v4);
    Hasher._combine(_:)(1uLL);
    v9 = type metadata accessor for URL(0);
    v10 = sub_100007828((unint64_t *)&unk_10015BAD0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    dispatch thunk of Hashable.hash(into:)(v20, v9, v10);
    sub_10000E9C4();
    v11 = *(_QWORD *)&v4[*(int *)(v2 + 24)];
    v12 = *(_QWORD *)(v11 + 16);
    Hasher._combine(_:)(v12);
    if (v12)
    {
      v13 = type metadata accessor for URLQueryItem(0);
      v14 = *(_QWORD *)(v13 - 8);
      v15 = v11 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
      v16 = *(_QWORD *)(v14 + 72);
      v17 = sub_100007828(&qword_100157378, (uint64_t (*)(uint64_t))&type metadata accessor for URLQueryItem, (uint64_t)&protocol conformance descriptor for URLQueryItem);
      do
      {
        dispatch thunk of Hashable.hash(into:)(v20, v13, v17);
        v15 += v16;
        --v12;
      }
      while (v12);
    }
    sub_1000076B4((uint64_t)v4, type metadata accessor for SettingsURLDestination);
  }
  return Hasher._finalize()();
}

Swift::Int sub_10001E760(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::UInt v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v22[9];

  v2 = v1;
  v4 = type metadata accessor for SettingsURLDestination(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v22[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v22[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)(v22, a1);
  sub_10001E980(v2, (uint64_t)v9);
  v10 = sub_100004FC8(&qword_1001570F8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    sub_10001E9C4((uint64_t)v9, (uint64_t)v7);
    Hasher._combine(_:)(1uLL);
    v11 = type metadata accessor for URL(0);
    v12 = sub_100007828((unint64_t *)&unk_10015BAD0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    dispatch thunk of Hashable.hash(into:)(v22, v11, v12);
    sub_10000E9C4();
    v13 = *(_QWORD *)&v7[*(int *)(v4 + 24)];
    v14 = *(_QWORD *)(v13 + 16);
    Hasher._combine(_:)(v14);
    if (v14)
    {
      v15 = type metadata accessor for URLQueryItem(0);
      v16 = *(_QWORD *)(v15 - 8);
      v17 = v13 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
      v18 = *(_QWORD *)(v16 + 72);
      v19 = sub_100007828(&qword_100157378, (uint64_t (*)(uint64_t))&type metadata accessor for URLQueryItem, (uint64_t)&protocol conformance descriptor for URLQueryItem);
      do
      {
        dispatch thunk of Hashable.hash(into:)(v22, v15, v19);
        v17 += v18;
        --v14;
      }
      while (v14);
    }
    sub_1000076B4((uint64_t)v7, type metadata accessor for SettingsURLDestination);
  }
  return Hasher._finalize()();
}

uint64_t sub_10001E954()
{
  return sub_100007828(&qword_100157D38, type metadata accessor for SettingsURLRoute, (uint64_t)&unk_100114B94);
}

uint64_t sub_10001E980(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SettingsURLRoute(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001E9C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SettingsURLDestination(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001EA08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(uint64_t, uint64_t, uint64_t);
  char v17;
  uint64_t v19;

  v4 = type metadata accessor for SettingsURLDestination(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SettingsURLRoute(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100004FC8(&qword_100157D40);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_10001E980(a1, (uint64_t)v13);
  sub_10001E980(a2, v14);
  v15 = sub_100004FC8(&qword_1001570F8);
  v16 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48);
  if (v16((uint64_t)v13, 1, v15) != 1)
  {
    sub_10001E980((uint64_t)v13, (uint64_t)v9);
    if (v16(v14, 1, v15) != 1)
    {
      sub_10001E9C4(v14, (uint64_t)v6);
      v17 = sub_10000E8A8((uint64_t)v9, (uint64_t)v6);
      sub_1000076B4((uint64_t)v6, type metadata accessor for SettingsURLDestination);
      sub_1000076B4((uint64_t)v9, type metadata accessor for SettingsURLDestination);
      sub_1000076B4((uint64_t)v13, type metadata accessor for SettingsURLRoute);
      return v17 & 1;
    }
    sub_1000076B4((uint64_t)v9, type metadata accessor for SettingsURLDestination);
    goto LABEL_6;
  }
  if (v16(v14, 1, v15) != 1)
  {
LABEL_6:
    sub_10000BA50((uint64_t)v13, &qword_100157D40);
    v17 = 0;
    return v17 & 1;
  }
  sub_1000076B4((uint64_t)v13, type metadata accessor for SettingsURLRoute);
  v17 = 1;
  return v17 & 1;
}

id sub_10001EBF8()
{
  if (qword_100156CF0 != -1)
    swift_once(&qword_100156CF0, sub_1000A90C8);
  qword_10015D170 = qword_10015D390;
  return (id)qword_10015D390;
}

void sub_10001EC40(char a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  int v5;
  Class isa;
  NSString v7;
  uint64_t v8;
  _QWORD v9[2];
  char v10;

  v2 = v1;
  if (qword_100156C20 != -1)
    swift_once(&qword_100156C20, sub_10001EBF8);
  v4 = (void *)qword_10015D170;
  v5 = a1 & 1;
  isa = Bool._bridgeToObjectiveC()().super.super.isa;
  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setValue:forKey:", isa, v7);

  v8 = OBJC_IVAR____TtC11SettingsApp19VPNListItemProvider_hasRelayConfigurations;
  if (*(unsigned __int8 *)(v2 + OBJC_IVAR____TtC11SettingsApp19VPNListItemProvider_hasRelayConfigurations) != v5)
  {
    sub_100007C2C((_QWORD *)(v2 + OBJC_IVAR____TtC11SettingsApp19VPNListItemProvider_invalidator), *(_QWORD *)(v2 + OBJC_IVAR____TtC11SettingsApp19VPNListItemProvider_invalidator + 24));
    v9[0] = "VPN Relay Configuration";
    v9[1] = 23;
    v10 = 2;
    PassthroughSubject.send(_:)(v9);
  }
  *(_BYTE *)(v2 + v8) = v5;
}

void sub_10001ED54(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  Class isa;
  NSString v6;
  uint64_t v7;
  _QWORD v8[2];
  char v9;

  v2 = v1;
  if (qword_100156C20 != -1)
    swift_once(&qword_100156C20, sub_10001EBF8);
  v4 = (void *)qword_10015D170;
  isa = UInt._bridgeToObjectiveC()().super.super.isa;
  v6 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setValue:forKey:", isa, v6);

  v7 = OBJC_IVAR____TtC11SettingsApp19VPNListItemProvider_visibilityStyle;
  if (*(_QWORD *)(v2 + OBJC_IVAR____TtC11SettingsApp19VPNListItemProvider_visibilityStyle) != a1)
  {
    sub_100007C2C((_QWORD *)(v2 + OBJC_IVAR____TtC11SettingsApp19VPNListItemProvider_invalidator), *(_QWORD *)(v2 + OBJC_IVAR____TtC11SettingsApp19VPNListItemProvider_invalidator + 24));
    v8[0] = "VPN Visibility";
    v8[1] = 14;
    v9 = 2;
    PassthroughSubject.send(_:)(v8);
  }
  *(_QWORD *)(v2 + v7) = a1;
}

void sub_10001EE6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  Class isa;
  NSString v6;
  uint64_t v7;
  _QWORD v8[2];
  char v9;

  v2 = v1;
  if (qword_100156C20 != -1)
    swift_once(&qword_100156C20, sub_10001EBF8);
  v4 = (void *)qword_10015D170;
  isa = UInt._bridgeToObjectiveC()().super.super.isa;
  v6 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setValue:forKey:", isa, v6);

  v7 = OBJC_IVAR____TtC11SettingsApp19VPNListItemProvider_connectivityState;
  if (*(_QWORD *)(v2 + OBJC_IVAR____TtC11SettingsApp19VPNListItemProvider_connectivityState) != a1)
  {
    sub_100007C2C((_QWORD *)(v2 + OBJC_IVAR____TtC11SettingsApp19VPNListItemProvider_invalidator), *(_QWORD *)(v2 + OBJC_IVAR____TtC11SettingsApp19VPNListItemProvider_invalidator + 24));
    v8[0] = "VPN Connectivity";
    v8[1] = 16;
    v9 = 2;
    PassthroughSubject.send(_:)(v8);
  }
  *(_QWORD *)(v2 + v7) = a1;
}

void *sub_10001EF84()
{
  uint64_t v0;
  uint64_t v1;
  void *result;
  void *v3;

  v1 = OBJC_IVAR____TtC11SettingsApp19VPNListItemProvider_vpnConnectivityManager;
  result = *(void **)(v0 + OBJC_IVAR____TtC11SettingsApp19VPNListItemProvider_vpnConnectivityManager);
  if (result)
  {
    objc_msgSend(result, "setDelegate:", 0);
    v3 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = 0;

    sub_1000076B4(v0 + OBJC_IVAR____TtC11SettingsApp19VPNListItemProvider_id, type metadata accessor for PrimarySettingsListItemIdentifier);
    sub_100005474((_QWORD *)(v0 + OBJC_IVAR____TtC11SettingsApp19VPNListItemProvider_invalidator));

    return (void *)swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10001F00C()
{
  return type metadata accessor for VPNListItemProvider(0);
}

uint64_t type metadata accessor for VPNListItemProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_100157D98;
  if (!qword_100157D98)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for VPNListItemProvider);
  return result;
}

uint64_t sub_10001F050(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  result = type metadata accessor for PrimarySettingsListItemIdentifier(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100114C58;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[4] = &unk_100114C70;
    v4[5] = &unk_100114C88;
    result = swift_updateClassMetadata2(a1, 256, 6, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_10001F0E8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  void (**v37)(char);
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  int *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  unsigned int v67;
  uint64_t v68;
  id v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v3 = v2;
  v79 = a2;
  v77 = type metadata accessor for PrimarySettingsListItemViewType(0);
  __chkstk_darwin(v77);
  v78 = (uint64_t)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100004FC8((uint64_t *)&unk_100156F00);
  __chkstk_darwin(v9);
  v11 = (char *)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for PrimarySettingsListItemModel(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = v2 + OBJC_IVAR____TtC11SettingsApp19VPNListItemProvider_id;
  sub_1000076F0(v2 + OBJC_IVAR____TtC11SettingsApp19VPNListItemProvider_id, (uint64_t)v8, type metadata accessor for PrimarySettingsListItemIdentifier);
  v16 = type metadata accessor for StaticPrimarySettingsListItemProvider(0);
  v17 = swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  sub_100007670((uint64_t)v8, v17 + OBJC_IVAR____TtC11SettingsApp37StaticPrimarySettingsListItemProvider_id, type metadata accessor for PrimarySettingsListItemIdentifier);
  sub_1000B2604(a1, (uint64_t)v11);
  swift_setDeallocating(v17);
  sub_1000076B4(v17 + OBJC_IVAR____TtC11SettingsApp37StaticPrimarySettingsListItemProvider_id, type metadata accessor for PrimarySettingsListItemIdentifier);
  swift_deallocClassInstance(v17, *(unsigned int *)(*(_QWORD *)v17 + 48), *(unsigned __int16 *)(*(_QWORD *)v17 + 52));
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_100020148((uint64_t)v11);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v79, 1, 1, v12);
  }
  v19 = v79;
  sub_100007670((uint64_t)v11, (uint64_t)v15, type metadata accessor for PrimarySettingsListItemModel);
  v20 = *(_QWORD *)(v3 + OBJC_IVAR____TtC11SettingsApp19VPNListItemProvider_visibilityStyle);
  v21 = v3;
  if (v20 == 2)
  {
    v40 = *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC11SettingsApp19VPNListItemProvider_hasRelayConfigurations);
    v74 = v12;
    v75 = v15;
    v73 = v13;
    if (v40 == 1)
    {
      v41 = LocalizedStringKey.init(stringLiteral:)(0x65522026204E5056, 0xEC0000007379616CLL);
      v42 = Text.init(_:tableName:bundle:comment:)(v41);
      v71 = v43;
      v72 = v42;
      v45 = v44;
      v47 = v46;
      v48 = v76;
      v39 = v77;
    }
    else
    {
      v48 = v76;
      sub_10009BD7C();
      v71 = v50;
      v72 = v49;
      v45 = v51;
      v47 = v52;
      v39 = v77;
    }
    v34 = v78;
    sub_1000076F0(v48, v78, type metadata accessor for PrimarySettingsListItemIdentifier);
    v53 = sub_10003A4B8(*(_QWORD *)(v21 + OBJC_IVAR____TtC11SettingsApp19VPNListItemProvider_connectivityState));
    v55 = v54;
    v57 = v56;
    v59 = v58;
    v60 = (int *)type metadata accessor for PrimarySettingsListValueLinkModel(0);
    v61 = v60[9];
    v62 = v34 + v60[8];
    *(_BYTE *)(v34 + v60[5]) = 0;
    v63 = v34 + v60[6];
    *(_QWORD *)v63 = v72;
    *(_QWORD *)(v63 + 8) = v71;
    *(_BYTE *)(v63 + 16) = v45 & 1;
    *(_QWORD *)(v63 + 24) = v47;
    v64 = v34 + v60[7];
    *(_QWORD *)v64 = v53;
    *(_QWORD *)(v64 + 8) = v55;
    *(_BYTE *)(v64 + 16) = v57 & 1;
    *(_QWORD *)(v64 + 24) = v59;
    *(_QWORD *)v62 = 0;
    *(_QWORD *)(v62 + 8) = 0;
    *(_BYTE *)(v62 + 16) = -1;
    *(_BYTE *)(v34 + v61) = 2;
    v38 = 8;
    goto LABEL_13;
  }
  if (v20 == 1)
  {
    v23 = *(_QWORD *)(v3 + OBJC_IVAR____TtC11SettingsApp19VPNListItemProvider_connectivityState);
    if (v23 < 6)
    {
      v73 = v13;
      v74 = v12;
      v75 = v15;
      v24 = (0x26u >> v23) & 1;
      sub_1000076F0(v76, (uint64_t)v8, type metadata accessor for PrimarySettingsListItemIdentifier);
      v25 = sub_10003A414(v23);
      v27 = v26;
      v29 = v28;
      v31 = v30;
      v32 = swift_allocObject(&unk_100148C28, 24, 7);
      swift_weakInit(v32 + 16, v3);
      v33 = (uint64_t)v8;
      v34 = v78;
      sub_100007670(v33, v78, type metadata accessor for PrimarySettingsListItemIdentifier);
      v35 = (int *)type metadata accessor for PrimarySettingsListToggleModel(0);
      *(_BYTE *)(v34 + v35[5]) = 0;
      v36 = v34 + v35[6];
      *(_QWORD *)v36 = v25;
      *(_QWORD *)(v36 + 8) = v27;
      *(_BYTE *)(v36 + 16) = v29 & 1;
      *(_QWORD *)(v36 + 24) = v31;
      *(_BYTE *)(v34 + v35[7]) = v24;
      v21 = v3;
      v37 = (void (**)(char))(v34 + v35[8]);
      *v37 = sub_1000201F0;
      v37[1] = (void (*)(char))v32;
      v38 = 3;
      v39 = v77;
LABEL_13:
      swift_storeEnumTagMultiPayload(v34, v39, v38);
      v65 = v74;
      v15 = v75;
      sub_100020188(v34, (uint64_t)&v75[*(int *)(v74 + 20)]);
      sub_1000076F0((uint64_t)v15, v19, type metadata accessor for PrimarySettingsListItemModel);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v73 + 56))(v19, 0, 1, v65);
      v22 = objc_msgSend((id)objc_opt_self(PSLaunchTracker), "sharedInstance");
      goto LABEL_14;
    }
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v19, 1, 1, v12);
  v22 = objc_msgSend((id)objc_opt_self(PSLaunchTracker), "sharedInstance");
LABEL_14:
  v66 = v22;
  v67 = objc_msgSend(v66, "launchHasCompleted");

  if (v67)
  {
    v68 = OBJC_IVAR____TtC11SettingsApp19VPNListItemProvider_vpnConnectivityManager;
    if (!*(_QWORD *)(v21 + OBJC_IVAR____TtC11SettingsApp19VPNListItemProvider_vpnConnectivityManager))
    {
      v69 = objc_msgSend(objc_allocWithZone((Class)NEVPNConnectivityManager), "initWithDelegate:", v21);
      v70 = *(void **)(v21 + v68);
      *(_QWORD *)(v21 + v68) = v69;

      sub_10001F76C();
    }
  }
  return sub_1000076B4((uint64_t)v15, type metadata accessor for PrimarySettingsListItemModel);
}

void sub_10001F6CC(char a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Strong;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  _BYTE v9[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v9, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    v5 = Strong;
    v6 = *(void **)(Strong + OBJC_IVAR____TtC11SettingsApp19VPNListItemProvider_vpnConnectivityManager);
    v7 = v6;
    swift_release(v5);
    if (v6)
    {
      v8 = objc_msgSend(v7, "toggleVPNConnectivity:", a1 & 1);

    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t sub_10001F76C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_signpost_type_t v18;
  uint8_t *v19;
  uint8_t *v20;
  os_signpost_id_t v21;
  uint8_t *v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD aBlock[5];
  uint64_t v40;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v36 = *(_QWORD *)(v2 - 8);
  v37 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v34 = *(_QWORD *)(v5 - 8);
  v35 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OSSignpostID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v33 - v13;
  if (qword_100156CD8 != -1)
    swift_once(&qword_100156CD8, sub_10008BEEC);
  v15 = type metadata accessor for OSSignposter(0);
  sub_100007808(v15, (uint64_t)qword_10015D340);
  v16 = static OSSignpostID.exclusive.getter();
  v17 = OSSignposter.logHandle.getter(v16);
  v18 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    v33 = v7;
    v20 = v19;
    *(_WORD *)v19 = 0;
    v21 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, v18, v21, "VPNListItemProvider.updateVPNState began", "", v20, 2u);
    v22 = v20;
    v1 = v0;
    v7 = v33;
    swift_slowDealloc(v22, -1, -1);

    v23 = *(void (**)(char *, uint64_t))(v9 + 8);
    v23(v14, v8);
    v23(v12, v8);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  }
  if (qword_100156D60 != -1)
    swift_once(&qword_100156D60, sub_1000D34BC);
  v24 = swift_allocObject(&unk_100148C28, 24, 7);
  swift_weakInit(v24 + 16, v1);
  aBlock[4] = sub_1000201F8;
  v40 = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100005350;
  aBlock[3] = &unk_100148C40;
  v25 = _Block_copy(aBlock);
  v26 = swift_retain(v24);
  static DispatchQoS.unspecified.getter(v26);
  v38 = _swiftEmptyArrayStorage;
  v27 = sub_100012ED8();
  v28 = sub_100004FC8((uint64_t *)&unk_100156F40);
  v29 = sub_10000551C();
  v30 = v37;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v38, v28, v29, v37, v27);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v4, v25);
  _Block_release(v25);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v4, v30);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v7, v35);
  v31 = v40;
  swift_release(v24);
  return swift_release(v31);
}

uint64_t sub_10001FAE4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t Strong;
  unint64_t *v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t result;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  char *v21;
  char *v22;
  unint64_t *v23;
  void *v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  unsigned __int8 v32;
  id v33;
  BOOL v34;
  void *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD aBlock[5];
  uint64_t v49;
  char v50[24];
  char v51[24];
  char v52[32];

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v47 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1 + 16;
  swift_beginAccess(a1 + 16, v52, 0, 0);
  Strong = swift_weakLoadStrong(a1 + 16);
  v11 = &qword_100157000;
  if (Strong)
  {
    v12 = Strong;
    v13 = *(void **)(Strong + OBJC_IVAR____TtC11SettingsApp19VPNListItemProvider_vpnConnectivityManager);
    v14 = v13;
    result = swift_release(v12);
    if (!v13)
    {
      __break(1u);
      goto LABEL_15;
    }
    v16 = objc_msgSend(v14, "hasRelayConfigurations");

    v11 = &qword_100157000;
  }
  else
  {
    v16 = 2;
  }
  v45 = v6;
  swift_beginAccess(a1 + 16, v51, 0, 0);
  v17 = swift_weakLoadStrong(a1 + 16);
  v18 = v17;
  v46 = v3;
  v44 = v2;
  if (!v17)
  {
    v26 = 0;
    goto LABEL_9;
  }
  v19 = a1;
  v20 = v16;
  v21 = v8;
  v22 = v5;
  v23 = v11;
  v24 = *(void **)(v17 + v11[429]);
  v25 = v24;
  result = swift_release(v18);
  if (!v24)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v26 = objc_msgSend(v25, "visibilityStyle");

  v11 = v23;
  v5 = v22;
  v8 = v21;
  v16 = v20;
  a1 = v19;
LABEL_9:
  swift_beginAccess(v9, v50, 0, 0);
  v27 = swift_weakLoadStrong(v9);
  v28 = v27;
  v29 = a1;
  if (!v27)
  {
    v32 = v16;
    v33 = 0;
    goto LABEL_13;
  }
  v30 = *(void **)(v27 + v11[429]);
  v31 = v30;
  result = swift_release(v28);
  if (v30)
  {
    v32 = v16;
    v33 = objc_msgSend(v31, "connectivityState");

LABEL_13:
    v34 = v18 == 0;
    sub_100005494();
    v35 = (void *)static OS_dispatch_queue.main.getter();
    v36 = swift_allocObject(&unk_100148C78, 57, 7);
    *(_BYTE *)(v36 + 16) = v32;
    *(_QWORD *)(v36 + 24) = v29;
    *(_QWORD *)(v36 + 32) = v26;
    *(_BYTE *)(v36 + 40) = v34;
    *(_QWORD *)(v36 + 48) = v33;
    *(_BYTE *)(v36 + 56) = v28 == 0;
    aBlock[4] = sub_100020224;
    v49 = v36;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100005350;
    aBlock[3] = &unk_100148C90;
    v37 = _Block_copy(aBlock);
    v38 = v49;
    swift_retain(v29);
    v39 = swift_release(v38);
    static DispatchQoS.unspecified.getter(v39);
    aBlock[0] = _swiftEmptyArrayStorage;
    v40 = sub_100012ED8();
    v41 = sub_100004FC8((uint64_t *)&unk_100156F40);
    v42 = sub_10000551C();
    v43 = v44;
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v41, v42, v44, v40);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v5, v37);
    _Block_release(v37);

    (*(void (**)(char *, uint64_t))(v46 + 8))(v5, v43);
    return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v8, v45);
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_10001FE58(unsigned __int8 a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t Strong;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_signpost_type_t v28;
  uint8_t *v29;
  os_signpost_id_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v33;
  _BYTE v34[24];
  _BYTE v35[24];
  _BYTE v36[24];

  v33 = a5;
  v10 = a1;
  v11 = type metadata accessor for OSSignpostID(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = &v34[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v13);
  v17 = &v34[-v16 - 8];
  v18 = a2 + 16;
  if (v10 != 2)
  {
    swift_beginAccess(a2 + 16, v34, 0, 0);
    Strong = swift_weakLoadStrong(a2 + 16);
    if (Strong)
    {
      v20 = Strong;
      sub_10001EC40(v10 & 1);
      swift_release(v20);
    }
  }
  if ((a4 & 1) == 0)
  {
    swift_beginAccess(v18, v35, 0, 0);
    v21 = swift_weakLoadStrong(v18);
    if (v21)
    {
      v22 = v21;
      sub_10001ED54(a3);
      swift_release(v22);
    }
  }
  if ((a6 & 1) == 0)
  {
    swift_beginAccess(v18, v36, 0, 0);
    v23 = swift_weakLoadStrong(v18);
    if (v23)
    {
      v24 = v23;
      sub_10001EE6C(v33);
      swift_release(v24);
    }
  }
  if (qword_100156CD8 != -1)
    swift_once(&qword_100156CD8, sub_10008BEEC);
  v25 = type metadata accessor for OSSignposter(0);
  sub_100007808(v25, (uint64_t)qword_10015D340);
  v26 = static OSSignpostID.exclusive.getter();
  v27 = OSSignposter.logHandle.getter(v26);
  v28 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v17, v11);
    v29 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v29 = 0;
    v30 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v27, v28, v30, "VPNListItemProvider.updateVPNState completed", "", v29, 2u);
    swift_slowDealloc(v29, -1, -1);

    v31 = *(void (**)(char *, uint64_t))(v12 + 8);
    v31(v17, v11);
    return ((uint64_t (*)(char *, uint64_t))v31)(v15, v11);
  }
  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v17, v11);
  }
}

uint64_t sub_1000200C0@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_1000076F0(*v1 + OBJC_IVAR____TtC11SettingsApp19VPNListItemProvider_id, a1, type metadata accessor for PrimarySettingsListItemIdentifier);
}

uint64_t sub_1000200F0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10001F0E8(a1, a2);
}

uint64_t sub_100020148(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004FC8((uint64_t *)&unk_100156F00);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100020188(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PrimarySettingsListItemViewType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000201CC()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000201F0(char a1)
{
  uint64_t v1;

  sub_10001F6CC(a1, v1);
}

uint64_t sub_1000201F8()
{
  uint64_t v0;

  return sub_10001FAE4(v0);
}

uint64_t sub_100020200()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 57, 7);
}

uint64_t sub_100020224()
{
  uint64_t v0;

  return sub_10001FE58(*(_BYTE *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 56));
}

uint64_t destroy for PrimarySettingsListDataModel(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[1]);
  return swift_bridgeObjectRelease(a1[2]);
}

uint64_t *_s11SettingsApp28PrimarySettingsListDataModelVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  a1[2] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t *assignWithCopy for PrimarySettingsListDataModel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

__n128 initializeWithTake for PrimarySettingsListDataModel(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

_QWORD *assignWithTake for PrimarySettingsListDataModel(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v4);
  v5 = a1[2];
  a1[2] = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for PrimarySettingsListDataModel(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PrimarySettingsListDataModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PrimarySettingsListDataModel()
{
  return &type metadata for PrimarySettingsListDataModel;
}

void sub_100020430(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_10002048C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1000204E4 + 4 * byte_100114CB4[a2]))(1768319351);
}

uint64_t sub_1000204E4(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 1768319351 && v1 == 0xE400000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 1768319351, 0xE400000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE400000000000000);
  return v2 & 1;
}

uint64_t sub_100020584()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v0 = type metadata accessor for FamilyRowStatus(0);
  v1 = sub_100007828(&qword_100157EB0, (uint64_t (*)(uint64_t))&type metadata accessor for FamilyRowStatus, (uint64_t)&protocol conformance descriptor for FamilyRowStatus);
  dispatch thunk of RawRepresentable.rawValue.getter(&v9, v0, v1);
  dispatch thunk of RawRepresentable.rawValue.getter(&v7, v0, v1);
  v2 = v10;
  v3 = v8;
  if (v9 == v7 && v10 == v8)
  {
    v5 = 1;
    v3 = v10;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v10, v7, v8, 0);
  }
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  return v5 & 1;
}

void sub_100020650()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t (*v19)(_QWORD);
  char *v20;
  _QWORD v21[3];
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;

  v29 = type metadata accessor for PrimarySettingsListFollowUpModel.ViewType(0);
  __chkstk_darwin(v29);
  v30 = (char *)v21 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for PrimarySettingsListFollowUpModel(0);
  __chkstk_darwin(v28);
  v31 = (char *)v21 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21[0] = type metadata accessor for PrimarySettingsListValueLinkModel(0);
  v2 = __chkstk_darwin(v21[0]);
  v21[2] = (char *)v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v21[1] = (char *)v21 - v4;
  v25 = type metadata accessor for PrimarySettingsListBadgedLinkModel(0);
  v5 = __chkstk_darwin(v25);
  v27 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v26 = (char *)v21 - v7;
  v22 = type metadata accessor for PrimarySettingsListLinkModel(0);
  v8 = __chkstk_darwin(v22);
  v24 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v23 = (char *)v21 - v10;
  v11 = type metadata accessor for PrimarySettingsListBadgedImagelessLinkModel(0);
  v12 = __chkstk_darwin(v11);
  __chkstk_darwin(v12);
  v13 = type metadata accessor for PrimarySettingsListImagelessLinkModel(0);
  v14 = __chkstk_darwin(v13);
  __chkstk_darwin(v14);
  v15 = type metadata accessor for PrimarySettingsListAppleAccountLinkModel(0);
  __chkstk_darwin(v15);
  v16 = type metadata accessor for PrimarySettingsListItemViewType(0);
  __chkstk_darwin(v16);
  v18 = (char *)v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000076F0(v32, (uint64_t)v18, v19);
  v20 = (char *)sub_100020954 + 4 * byte_100114CB8[swift_getEnumCaseMultiPayload(v18, v16)];
  __asm { BR              X10 }
}

BOOL sub_100020954()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;

  sub_100007670(v0, v2, type metadata accessor for PrimarySettingsListAppleAccountLinkModel);
  v3 = (*(_BYTE *)(v2 + *(int *)(v1 + 24)) & 1) == 0 && *(_QWORD *)(v2 + *(int *)(v1 + 20) + 8) != 0;
  sub_1000076B4(v2, type metadata accessor for PrimarySettingsListAppleAccountLinkModel);
  return v3;
}

void sub_100020C6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(_QWORD);
  char *v12;
  _QWORD v13[2];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;

  v14 = type metadata accessor for PrimarySettingsListFollowUpActionModel(0);
  __chkstk_darwin(v14);
  v13[1] = (char *)v13 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for PrimarySettingsListFollowUpModel.ViewType(0);
  __chkstk_darwin(v22);
  v23 = (char *)v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for PrimarySettingsListFollowUpModel(0);
  __chkstk_darwin(v21);
  v24 = (char *)v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for PrimarySettingsListValueLinkModel(0);
  __chkstk_darwin(v20);
  v19 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for PrimarySettingsListBadgedLinkModel(0);
  __chkstk_darwin(v18);
  v17 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for PrimarySettingsListLinkModel(0);
  __chkstk_darwin(v16);
  v15 = type metadata accessor for PrimarySettingsListBadgedImagelessLinkModel(0);
  __chkstk_darwin(v15);
  v5 = type metadata accessor for PrimarySettingsListImagelessLinkModel(0);
  __chkstk_darwin(v5);
  v6 = type metadata accessor for PrimarySettingsListToggleModel(0);
  __chkstk_darwin(v6);
  v7 = type metadata accessor for PrimarySettingsListAppleAccountLinkModel(0);
  __chkstk_darwin(v7);
  v8 = type metadata accessor for PrimarySettingsListItemViewType(0);
  __chkstk_darwin(v8);
  v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000076F0(v25, (uint64_t)v10, v11);
  v12 = (char *)sub_100020F48 + 4 * byte_100114CC2[swift_getEnumCaseMultiPayload(v10, v8)];
  __asm { BR              X10 }
}

uint64_t sub_100020F48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_100007670(v1, v0, type metadata accessor for PrimarySettingsListAppleAccountLinkModel);
  v3 = *(unsigned __int8 *)(v0 + *(int *)(v2 + 24));
  sub_1000076B4(v0, type metadata accessor for PrimarySettingsListAppleAccountLinkModel);
  return v3;
}

void sub_1000211AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;

  sub_1000A103C(a1, a2);
  if ((v6 & 1) != 0)
    sub_100022740(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20));
}

uint64_t sub_100021200@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000076F0(v1, a1, type metadata accessor for PrimarySettingsListItemIdentifier);
}

unint64_t sub_100021224()
{
  Swift::String v0;
  void *object;

  sub_1000A03B0();
  object = v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  return 0xD00000000000001DLL;
}

uint64_t sub_10002127C(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v9[6];
  _OWORD v10[6];

  v2 = a1[3];
  v9[2] = a1[2];
  v9[3] = v2;
  v3 = a1[5];
  v9[4] = a1[4];
  v9[5] = v3;
  v4 = a1[1];
  v9[0] = *a1;
  v9[1] = v4;
  v5 = a2[3];
  v10[2] = a2[2];
  v10[3] = v5;
  v6 = a2[5];
  v10[4] = a2[4];
  v10[5] = v6;
  v7 = a2[1];
  v10[0] = *a2;
  v10[1] = v7;
  return sub_10002345C((uint64_t)v9, (uint64_t)v10) & 1;
}

uint64_t sub_1000212D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;

  v2 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_BYTE *)(v1 + 16);
  *(_BYTE *)(a1 + 16) = v4;
  return sub_10000BA8C(v2, v3, v4);
}

unint64_t sub_1000212E8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  char v3;
  Swift::String v4;
  void *object;

  v1 = *(_QWORD *)v0;
  v2 = *(void **)(v0 + 8);
  v3 = *(_BYTE *)(v0 + 16);
  sub_10000BA8C(*(_QWORD *)v0, (uint64_t)v2, v3);
  v4._countAndFlagsBits = sub_1000B9650(v1, v2, v3);
  object = v4._object;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(object);
  sub_10000BAE4(v1, (uint64_t)v2, v3);
  return 0xD000000000000020;
}

uint64_t sub_100021384()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_10000BA8C(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
  return v1;
}

uint64_t sub_1000213C8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  v6 = *(_QWORD *)(v1 + 40);
  v7 = *(_QWORD *)(v1 + 48);
  v9 = *(_QWORD *)(v1 + 56);
  v8 = *(_QWORD *)(v1 + 64);
  v10 = *(_QWORD *)(v1 + 80);
  v12 = *(_QWORD *)v1;
  v13 = *(_QWORD *)(v1 + 72);
  v14 = *(unsigned __int8 *)(v1 + 16);
  v15 = *(_QWORD *)(v1 + 88);
  sub_10000BA8C(*(_QWORD *)v1, v3, *(_BYTE *)(v1 + 16));
  sub_10000BAA4(v4, v5, v6, v7);
  sub_10000BAA4(v9, v8, v13, v10);
  *a1 = v12;
  a1[1] = v3;
  a1[2] = v14;
  a1[3] = v4;
  a1[4] = v5;
  a1[5] = v6;
  a1[6] = v7;
  a1[7] = v9;
  a1[8] = v8;
  a1[9] = v13;
  a1[10] = v10;
  a1[11] = v15;
  return swift_bridgeObjectRetain(v15);
}

uint64_t sub_100021488(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a2[1];
  v5 = a2[2];
  if ((sub_100009CCC(*a1, *a2) & 1) != 0 && (sub_1000214F4(v2, v4) & 1) != 0)
    return sub_100022284(v3, v5);
  else
    return 0;
}

uint64_t sub_1000214F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  char v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  char v86;
  char v87;
  uint64_t v88;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned __int8 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int64_t v110;
  uint64_t v111;
  uint64_t v112;
  int64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  char v139;
  char v140;
  char v141;

  v4 = type metadata accessor for PrimarySettingsListItemModel(0);
  v115 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v6 = __chkstk_darwin(v5);
  v9 = (char *)&v105 - v8;
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v10 = 0;
  v11 = *(_QWORD *)(a1 + 64);
  v109 = a1 + 64;
  v12 = 1 << *(_BYTE *)(a1 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & v11;
  v110 = (unint64_t)(v12 + 63) >> 6;
  v111 = a2;
  v107 = v6;
  v106 = v7;
  v134 = v9;
  v108 = a1;
  if (!v14)
    goto LABEL_7;
LABEL_6:
  v112 = (v14 - 1) & v14;
  v113 = v10;
  for (i = __clz(__rbit64(v14)) | (v10 << 6); ; i = __clz(__rbit64(v17)) + (v18 << 6))
  {
    v20 = *(_QWORD *)(a1 + 56);
    v21 = *(_QWORD *)(a1 + 48) + 24 * i;
    v22 = *(_QWORD *)(v21 + 8);
    v130 = *(_QWORD *)v21;
    v23 = v20 + 96 * i;
    v24 = *(_QWORD *)(v23 + 8);
    v135 = *(_QWORD *)v23;
    v136 = v22;
    v25 = *(unsigned __int8 *)(v23 + 16);
    v26 = *(_QWORD *)(v23 + 32);
    v133 = *(_QWORD *)(v23 + 24);
    v28 = *(_QWORD *)(v23 + 40);
    v27 = *(_QWORD *)(v23 + 48);
    v29 = *(_QWORD *)(v23 + 56);
    v30 = *(_QWORD *)(v23 + 64);
    v31 = *(_QWORD *)(v23 + 72);
    v32 = *(_QWORD *)(v23 + 80);
    v137 = *(_QWORD *)(v23 + 88);
    v33 = *(_BYTE *)(v21 + 16);
    sub_10000BA8C(v130, v22, v33);
    v129 = v24;
    v128 = v25;
    sub_10000BA8C(v135, v24, v25);
    v132 = v27;
    sub_10000BAA4(v133, v26, v28, v27);
    v122 = v29;
    v123 = v30;
    v124 = v31;
    v131 = v32;
    sub_10000BAA4(v29, v30, v31, v32);
    swift_bridgeObjectRetain(v137);
    v34 = v130;
    v35 = v136;
    v36 = v111;
    v37 = sub_1000DA888(v130, v136, v33);
    LOBYTE(v32) = v38;
    sub_10000BAE4(v34, v35, v33);
    if ((v32 & 1) == 0)
    {
      sub_10000BAE4(v135, v129, v128);
      v91 = v133;
      v92 = v26;
      v93 = v28;
      goto LABEL_77;
    }
    v39 = *(_QWORD *)(v36 + 56) + 96 * v37;
    v41 = *(_QWORD *)v39;
    v40 = *(_QWORD *)(v39 + 8);
    v42 = *(unsigned __int8 *)(v39 + 16);
    v43 = *(_QWORD *)(v39 + 32);
    v44 = *(_QWORD *)(v39 + 40);
    v125 = *(_QWORD *)(v39 + 24);
    v126 = v43;
    v45 = *(_QWORD *)(v39 + 48);
    v130 = *(_QWORD *)(v39 + 56);
    v46 = *(_QWORD *)(v39 + 72);
    v127 = *(_QWORD *)(v39 + 64);
    v47 = *(_QWORD *)(v39 + 80);
    v136 = *(_QWORD *)(v39 + 88);
    v121 = v26;
    if (v42)
    {
      if (v42 != 1)
        __asm { BR              X8 }
      if (v128 != 1)
      {
LABEL_69:
        v102 = v135;
        v103 = v129;
        v104 = v128;
        goto LABEL_70;
      }
      v48 = v41 == v135 && v40 == v129;
      if (!v48 && (_stringCompareWithSmolCheck(_:_:expecting:)(v41, v40, v135, v129, 0) & 1) == 0)
      {
        v102 = v135;
        v103 = v129;
        v104 = 1;
LABEL_70:
        sub_10000BAE4(v102, v103, v104);
        v91 = v133;
        v92 = v121;
        v93 = v28;
        goto LABEL_77;
      }
    }
    else
    {
      if (v128)
        goto LABEL_69;
      v49 = v41 == v135 && v40 == v129;
      if (!v49 && (_stringCompareWithSmolCheck(_:_:expecting:)(v41, v40, v135, v129, 0) & 1) == 0)
      {
        v102 = v135;
        v103 = v129;
        v104 = 0;
        goto LABEL_70;
      }
    }
    v119 = v44;
    v118 = v42;
    v117 = v40;
    v120 = v41;
    if (v45)
    {
      if (!v132)
      {
        sub_10000BAE4(v135, v129, v128);
        v91 = v133;
        v92 = v121;
        v93 = v28;
        v90 = 0;
        goto LABEL_78;
      }
      sub_10000BA8C(v41, v40, v42);
      v50 = v125;
      v51 = v126;
      sub_10000BAA4(v125, v126, v44, v45);
      v52 = v46;
      sub_10000BAA4(v130, v127, v46, v47);
      swift_bridgeObjectRetain(v136);
      v54 = v132;
      v53 = v133;
      v55 = v121;
      sub_10000BAA4(v133, v121, v28, v132);
      sub_10000BAA4(v50, v51, v44, v45);
      v139 = v44 & 1;
      v138 = v28 & 1;
      v56 = static Text.== infix(_:_:)(v50, v51, v44 & 1, v45, v53, v55, v28 & 1, v54);
      v57 = v28;
      v58 = v56;
      v59 = v55;
      v60 = v57;
      sub_10000BAFC(v53, v59, v57, v54);
      sub_10000BAFC(v50, v51, v44, v45);
      if ((v58 & 1) == 0)
      {
        sub_10000BAE4(v120, v117, v118);
        sub_10000BAFC(v125, v126, v119, v45);
        sub_10000BAFC(v130, v127, v52, v47);
        swift_bridgeObjectRelease(v136);
        sub_10000BAE4(v135, v129, v128);
        v91 = v133;
        v92 = v121;
        v93 = v60;
        goto LABEL_77;
      }
    }
    else
    {
      if (v132)
        goto LABEL_69;
      v60 = v28;
      sub_10000BA8C(v41, v40, v42);
      sub_10000BAA4(v125, v126, v44, 0);
      v52 = v46;
      sub_10000BAA4(v130, v127, v46, v47);
      swift_bridgeObjectRetain(v136);
    }
    v116 = v60;
    if (v47)
    {
      v61 = v127;
      if (!v131)
      {
        sub_10000BAE4(v120, v117, v118);
        sub_10000BAFC(v125, v126, v119, v45);
        sub_10000BAFC(v130, v61, v52, v47);
        swift_bridgeObjectRelease(v136);
        sub_10000BAE4(v135, v129, v128);
        sub_10000BAFC(v133, v121, v60, v132);
        v94 = v122;
        v95 = v123;
        v96 = v124;
        v97 = 0;
        goto LABEL_79;
      }
      v62 = v122;
      v63 = v123;
      v64 = v131;
      v65 = v47;
      v66 = v127;
      v67 = v124;
      sub_10000BAA4(v122, v123, v124, v131);
      v68 = v45;
      v69 = v130;
      sub_10000BAA4(v130, v66, v52, v65);
      v141 = v52 & 1;
      v140 = v67 & 1;
      v70 = static Text.== infix(_:_:)(v69, v66, v52 & 1, v65, v62, v63, v67 & 1, v64);
      v71 = v62;
      v72 = v116;
      v73 = v67;
      v74 = v66;
      v47 = v65;
      sub_10000BAFC(v71, v63, v73, v64);
      v75 = v69;
      v45 = v68;
      sub_10000BAFC(v75, v74, v52, v65);
      v76 = v120;
      if ((v70 & 1) == 0)
      {
        sub_10000BAE4(v120, v117, v118);
        sub_10000BAFC(v125, v126, v119, v68);
        v98 = v130;
        v99 = v74;
        v100 = v52;
        v101 = v65;
LABEL_76:
        sub_10000BAFC(v98, v99, v100, v101);
        swift_bridgeObjectRelease(v136);
        sub_10000BAE4(v135, v129, v128);
        v91 = v133;
        v92 = v121;
        v93 = v72;
        goto LABEL_77;
      }
    }
    else
    {
      v72 = v60;
      v76 = v120;
      v74 = v127;
      if (v131)
      {
        sub_10000BAE4(v120, v117, v118);
        sub_10000BAFC(v125, v126, v119, v45);
        v98 = v130;
        v99 = v74;
        v100 = v52;
        v101 = 0;
        goto LABEL_76;
      }
    }
    v114 = v47;
    v77 = v74;
    v78 = *(_QWORD *)(v136 + 16);
    if (v78 != *(_QWORD *)(v137 + 16))
    {
      sub_10000BAE4(v76, v117, v118);
      sub_10000BAFC(v125, v126, v119, v45);
      v98 = v130;
      v99 = v77;
      v100 = v52;
      v101 = v114;
      goto LABEL_76;
    }
    if (v78)
      break;
    sub_10000BAE4(v76, v117, v118);
    sub_10000BAFC(v125, v126, v119, v45);
    sub_10000BAFC(v130, v77, v52, v114);
    v88 = v136;
LABEL_63:
    swift_bridgeObjectRelease(v88);
LABEL_64:
    sub_10000BAE4(v135, v129, v128);
    sub_10000BAFC(v133, v121, v72, v132);
    sub_10000BAFC(v122, v123, v124, v131);
    swift_bridgeObjectRelease(v137);
    a1 = v108;
    v10 = v113;
    v14 = v112;
    if (v112)
      goto LABEL_6;
LABEL_7:
    v16 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_82;
    if (v16 >= v110)
      return 1;
    v17 = *(_QWORD *)(v109 + 8 * v16);
    v18 = v10 + 1;
    if (!v17)
    {
      v18 = v10 + 2;
      if (v10 + 2 >= v110)
        return 1;
      v17 = *(_QWORD *)(v109 + 8 * v18);
      if (!v17)
      {
        v18 = v10 + 3;
        if (v10 + 3 >= v110)
          return 1;
        v17 = *(_QWORD *)(v109 + 8 * v18);
        if (!v17)
        {
          v18 = v10 + 4;
          if (v10 + 4 >= v110)
            return 1;
          v17 = *(_QWORD *)(v109 + 8 * v18);
          if (!v17)
          {
            v19 = v10 + 5;
            if (v10 + 5 >= v110)
              return 1;
            v17 = *(_QWORD *)(v109 + 8 * v19);
            if (!v17)
            {
              while (1)
              {
                v18 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_83;
                if (v18 >= v110)
                  return 1;
                v17 = *(_QWORD *)(v109 + 8 * v18);
                ++v19;
                if (v17)
                  goto LABEL_22;
              }
            }
            v18 = v10 + 5;
          }
        }
      }
    }
LABEL_22:
    v112 = (v17 - 1) & v17;
    v113 = v18;
  }
  v79 = (uint64_t)v134;
  if (v136 == v137)
  {
    sub_10000BAE4(v76, v117, v118);
    sub_10000BAFC(v125, v126, v119, v45);
    sub_10000BAFC(v130, v77, v52, v114);
    v88 = v137;
    goto LABEL_63;
  }
  v105 = v45;
  v127 = v52;
  v80 = 0;
  v81 = (*(unsigned __int8 *)(v115 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v115 + 80);
  v82 = *(_QWORD *)(v115 + 72);
  v83 = v107;
  v84 = v106;
  while (1)
  {
    sub_1000076F0(v136 + v81, v79, type metadata accessor for PrimarySettingsListItemModel);
    if (v80 >= *(_QWORD *)(v137 + 16))
    {
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
      JUMPOUT(0x100022240);
    }
    sub_1000076F0(v137 + v81, v84, type metadata accessor for PrimarySettingsListItemModel);
    sub_1000A103C(v79, v84);
    if ((v85 & 1) == 0)
      break;
    sub_100022740(v79 + *(int *)(v83 + 20), v84 + *(int *)(v83 + 20));
    v87 = v86;
    sub_1000076B4(v84, type metadata accessor for PrimarySettingsListItemModel);
    sub_1000076B4(v79, type metadata accessor for PrimarySettingsListItemModel);
    if ((v87 & 1) == 0)
      goto LABEL_68;
    ++v80;
    v81 += v82;
    v79 = (uint64_t)v134;
    if (v78 == v80)
    {
      sub_10000BAE4(v120, v117, v118);
      sub_10000BAFC(v125, v126, v119, v105);
      sub_10000BAFC(v130, v77, v127, v114);
      swift_bridgeObjectRelease(v136);
      v72 = v116;
      goto LABEL_64;
    }
  }
  sub_1000076B4(v84, type metadata accessor for PrimarySettingsListItemModel);
  sub_1000076B4(v79, type metadata accessor for PrimarySettingsListItemModel);
LABEL_68:
  sub_10000BAE4(v120, v117, v118);
  sub_10000BAFC(v125, v126, v119, v105);
  sub_10000BAFC(v130, v77, v127, v114);
  swift_bridgeObjectRelease(v136);
  sub_10000BAE4(v135, v129, v128);
  v91 = v133;
  v92 = v121;
  v93 = v116;
LABEL_77:
  v90 = v132;
LABEL_78:
  sub_10000BAFC(v91, v92, v93, v90);
  v94 = v122;
  v95 = v123;
  v96 = v124;
  v97 = v131;
LABEL_79:
  sub_10000BAFC(v94, v95, v96, v97);
  swift_bridgeObjectRelease(v137);
  return 0;
}

uint64_t sub_100022284(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int64_t v53;
  uint64_t v54;
  _BOOL4 v55;
  unint64_t v56;
  uint64_t v57;

  v52 = type metadata accessor for PrimarySettingsListItemModel(0);
  v57 = *(_QWORD *)(v52 - 8);
  v4 = __chkstk_darwin(v52);
  v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v46 - v7;
  v9 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v51 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v54 = (uint64_t)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004FC8(&qword_100157EB8);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v12);
  v17 = (char *)&v46 - v16;
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v53 = 0;
  v50 = a1;
  v20 = *(_QWORD *)(a1 + 64);
  v19 = a1 + 64;
  v18 = v20;
  v21 = 1 << *(_BYTE *)(v19 - 32);
  v22 = -1;
  if (v21 < 64)
    v22 = ~(-1 << v21);
  v23 = v22 & v18;
  v48 = v19;
  v49 = (unint64_t)(v21 + 63) >> 6;
  v47 = v49 - 1;
  while (1)
  {
    if (v23)
    {
      v24 = __clz(__rbit64(v23));
      v25 = (v23 - 1) & v23;
      v26 = v24 | (v53 << 6);
LABEL_8:
      v27 = v50;
      sub_1000076F0(*(_QWORD *)(v50 + 48) + *(_QWORD *)(v51 + 72) * v26, (uint64_t)v14, type metadata accessor for PrimarySettingsListItemIdentifier);
      v28 = *(_QWORD *)(v27 + 56) + *(_QWORD *)(v57 + 72) * v26;
      v29 = sub_100004FC8(&qword_100157EC0);
      sub_1000076F0(v28, (uint64_t)&v14[*(int *)(v29 + 48)], type metadata accessor for PrimarySettingsListItemModel);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v14, 0, 1, v29);
      goto LABEL_30;
    }
    v30 = v53 + 1;
    if (__OFADD__(v53, 1))
    {
      __break(1u);
      goto LABEL_41;
    }
    if (v30 < v49)
    {
      v31 = *(_QWORD *)(v48 + 8 * v30);
      if (v31)
        goto LABEL_12;
      v32 = v53 + 2;
      ++v53;
      if (v30 + 1 < v49)
      {
        v31 = *(_QWORD *)(v48 + 8 * v32);
        if (v31)
          goto LABEL_15;
        v53 = v30 + 1;
        if (v30 + 2 < v49)
        {
          v31 = *(_QWORD *)(v48 + 8 * (v30 + 2));
          if (v31)
          {
            v30 += 2;
            goto LABEL_12;
          }
          v53 = v30 + 2;
          if (v30 + 3 < v49)
          {
            v31 = *(_QWORD *)(v48 + 8 * (v30 + 3));
            if (v31)
            {
              v30 += 3;
              goto LABEL_12;
            }
            v32 = v30 + 4;
            v53 = v30 + 3;
            if (v30 + 4 < v49)
              break;
          }
        }
      }
    }
LABEL_29:
    v33 = sub_100004FC8(&qword_100157EC0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v14, 1, 1, v33);
    v25 = 0;
LABEL_30:
    sub_100023DB4((uint64_t)v14, (uint64_t)v17);
    v34 = sub_100004FC8(&qword_100157EC0);
    v35 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 48))(v17, 1, v34);
    v55 = v35 == 1;
    if (v35 == 1)
      return v55;
    v56 = v25;
    v36 = v14;
    v37 = (uint64_t)v6;
    v38 = (uint64_t)&v17[*(int *)(v34 + 48)];
    v39 = v54;
    sub_100007670((uint64_t)v17, v54, type metadata accessor for PrimarySettingsListItemIdentifier);
    sub_100007670(v38, (uint64_t)v8, type metadata accessor for PrimarySettingsListItemModel);
    v40 = sub_1000DA830(v39);
    v42 = v41;
    sub_1000076B4(v39, type metadata accessor for PrimarySettingsListItemIdentifier);
    if ((v42 & 1) == 0)
      goto LABEL_37;
    v6 = (char *)v37;
    sub_1000076F0(*(_QWORD *)(a2 + 56) + *(_QWORD *)(v57 + 72) * v40, v37, type metadata accessor for PrimarySettingsListItemModel);
    sub_1000A103C(v37, (uint64_t)v8);
    if ((v43 & 1) == 0)
    {
      sub_1000076B4(v37, type metadata accessor for PrimarySettingsListItemModel);
LABEL_37:
      sub_1000076B4((uint64_t)v8, type metadata accessor for PrimarySettingsListItemModel);
      return 0;
    }
    sub_100022740(v37 + *(int *)(v52 + 20), (uint64_t)&v8[*(int *)(v52 + 20)]);
    v45 = v44;
    sub_1000076B4(v37, type metadata accessor for PrimarySettingsListItemModel);
    result = sub_1000076B4((uint64_t)v8, type metadata accessor for PrimarySettingsListItemModel);
    v14 = v36;
    v23 = v56;
    if ((v45 & 1) == 0)
      return v55;
  }
  v31 = *(_QWORD *)(v48 + 8 * v32);
  if (v31)
  {
LABEL_15:
    v30 = v32;
LABEL_12:
    v25 = (v31 - 1) & v31;
    v26 = __clz(__rbit64(v31)) + (v30 << 6);
    v53 = v30;
    goto LABEL_8;
  }
  while (1)
  {
    v30 = v32 + 1;
    if (__OFADD__(v32, 1))
      break;
    if (v30 >= v49)
    {
      v53 = v47;
      goto LABEL_29;
    }
    v31 = *(_QWORD *)(v48 + 8 * v30);
    ++v32;
    if (v31)
      goto LABEL_12;
  }
LABEL_41:
  __break(1u);
  return result;
}

void sub_100022740(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;

  v55 = a1;
  v56 = a2;
  v39 = type metadata accessor for PrimarySettingsListFollowUpModel(0);
  __chkstk_darwin(v39);
  v50 = (char *)&v36 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for PrimarySettingsListValueLinkModel(0);
  __chkstk_darwin(v3);
  v48 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PrimarySettingsListBadgedLinkModel(0);
  __chkstk_darwin(v5);
  v46 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for PrimarySettingsListLinkModel(0);
  __chkstk_darwin(v7);
  v45 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PrimarySettingsListBadgedImagelessLinkModel(0);
  __chkstk_darwin(v9);
  v44 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for PrimarySettingsListImagelessLinkModel(0);
  __chkstk_darwin(v41);
  v47 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for PrimarySettingsListToggleModel(0);
  __chkstk_darwin(v12);
  v43 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = type metadata accessor for PrimarySettingsListFamilyLinkModel(0);
  __chkstk_darwin(v42);
  v49 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for PrimarySettingsListSecondaryAppleAccountLinkModel(0);
  __chkstk_darwin(v37);
  v53 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for PrimarySettingsListAppleAccountLinkModel(0);
  __chkstk_darwin(v38);
  v40 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for PrimarySettingsListItemViewType(0);
  v18 = __chkstk_darwin(v17);
  v52 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v21 = __chkstk_darwin(v20);
  v22 = __chkstk_darwin(v21);
  v23 = __chkstk_darwin(v22);
  v24 = __chkstk_darwin(v23);
  v51 = (char *)&v36 - v25;
  v26 = __chkstk_darwin(v24);
  v27 = __chkstk_darwin(v26);
  v28 = __chkstk_darwin(v27);
  v54 = (char *)&v36 - v29;
  __chkstk_darwin(v28);
  v30 = sub_100004FC8(&qword_100157EA8);
  v31 = __chkstk_darwin(v30);
  v33 = (char *)&v36 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = (uint64_t)&v33[*(int *)(v31 + 48)];
  sub_1000076F0(v55, (uint64_t)v33, type metadata accessor for PrimarySettingsListItemViewType);
  sub_1000076F0(v56, v34, type metadata accessor for PrimarySettingsListItemViewType);
  v35 = (char *)sub_100022BB0 + 4 * word_100114CCC[swift_getEnumCaseMultiPayload(v33, v17)];
  __asm { BR              X10 }
}

uint64_t sub_100022BB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  sub_1000076F0(v2, v1, type metadata accessor for PrimarySettingsListItemViewType);
  if (swift_getEnumCaseMultiPayload(v0, v3))
  {
    sub_1000076B4(v1, type metadata accessor for PrimarySettingsListAppleAccountLinkModel);
    sub_100023D74(v2);
LABEL_8:
    v10 = 0;
    return v10 & 1;
  }
  v5 = v0;
  v6 = *(_QWORD *)(v4 - 336);
  sub_100007670(v5, v6, type metadata accessor for PrimarySettingsListAppleAccountLinkModel);
  sub_1000A103C(v1, v6);
  if ((v7 & 1) == 0
    || (v8 = *(_QWORD *)(v4 - 352),
        sub_100018BA0(v1 + *(int *)(v8 + 20), v4 - 184),
        sub_100018BA0(v6 + *(int *)(v8 + 20), v4 - 136),
        (sub_1000A8380(v4 - 184, v4 - 136) & 1) == 0)
    || (v9 = *(int *)(*(_QWORD *)(v4 - 352) + 24), *(unsigned __int8 *)(v1 + v9) != *(unsigned __int8 *)(v6 + v9)))
  {
    sub_1000076B4(v6, type metadata accessor for PrimarySettingsListAppleAccountLinkModel);
    sub_1000076B4(v1, type metadata accessor for PrimarySettingsListAppleAccountLinkModel);
    sub_1000076B4(v2, type metadata accessor for PrimarySettingsListItemViewType);
    goto LABEL_8;
  }
  sub_1000076B4(v6, type metadata accessor for PrimarySettingsListAppleAccountLinkModel);
  sub_1000076B4(v1, type metadata accessor for PrimarySettingsListAppleAccountLinkModel);
  sub_1000076B4(v2, type metadata accessor for PrimarySettingsListItemViewType);
  v10 = 1;
  return v10 & 1;
}

uint64_t sub_10002345C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  if ((sub_1000B98A0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 16)) & 1) == 0)return 0;
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a2 + 48);
  if (v4)
  {
    if (!v5)
      return 0;
    v6 = *(_QWORD *)(a1 + 24);
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(_QWORD *)(a1 + 40);
    v9 = *(_QWORD *)(a2 + 24);
    v10 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40);
    sub_10000BAA4(v9, v10, v11, *(_QWORD *)(a2 + 48));
    v21 = v6;
    sub_10000BAA4(v6, v7, v8, v4);
    LOBYTE(v6) = static Text.== infix(_:_:)(v6, v7, v8 & 1, v4, v9, v10, v11 & 1, v5);
    sub_10000BAFC(v9, v10, v11, v5);
    sub_10000BAFC(v21, v7, v8, v4);
    if ((v6 & 1) == 0)
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v12 = *(_QWORD *)(a1 + 80);
  v13 = *(_QWORD *)(a2 + 80);
  if (v12)
  {
    if (v13)
    {
      v14 = *(_QWORD *)(a1 + 56);
      v15 = *(_QWORD *)(a1 + 64);
      v16 = *(_QWORD *)(a1 + 72);
      v17 = *(_QWORD *)(a2 + 56);
      v18 = *(_QWORD *)(a2 + 64);
      v19 = *(_QWORD *)(a2 + 72);
      sub_10000BAA4(v17, v18, v19, *(_QWORD *)(a2 + 80));
      v22 = v14;
      sub_10000BAA4(v14, v15, v16, v12);
      LOBYTE(v14) = static Text.== infix(_:_:)(v14, v15, v16 & 1, v12, v17, v18, v19 & 1, v13);
      sub_10000BAFC(v17, v18, v19, v13);
      sub_10000BAFC(v22, v15, v16, v12);
      if ((v14 & 1) != 0)
        return sub_100009B58(*(_QWORD *)(a1 + 88), *(_QWORD *)(a2 + 88));
    }
  }
  else if (!v13)
  {
    return sub_100009B58(*(_QWORD *)(a1 + 88), *(_QWORD *)(a2 + 88));
  }
  return 0;
}

uint64_t sub_100023658(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  _QWORD *v27;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v29;
  unint64_t v30;
  uint64_t v31;
  _BOOL8 v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  char v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  unsigned __int8 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  unint64_t v68;
  uint64_t v69;
  _BOOL8 v70;
  uint64_t v71;
  char v72;
  unint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t result;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;

  v2 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v102 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v78 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PrimarySettingsListItemModel(0);
  v80 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v103 = (uint64_t)&v78 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v78 - v8;
  v87 = *(_QWORD *)(a1 + 16);
  v79 = a1;
  if (!v87)
  {
    swift_bridgeObjectRetain(a1);
    v89 = &_swiftEmptyDictionarySingleton;
    return v79;
  }
  v78 = v2;
  v86 = a1 + 32;
  swift_bridgeObjectRetain(a1);
  v10 = 0;
  v11 = &_swiftEmptyDictionarySingleton;
  v89 = &_swiftEmptyDictionarySingleton;
  while (1)
  {
    v88 = v10;
    v14 = v86 + 96 * v10;
    v15 = *(_QWORD *)v14;
    v91 = *(_QWORD *)(v14 + 8);
    v92 = *(unsigned __int8 *)(v14 + 16);
    v17 = *(_QWORD *)(v14 + 24);
    v16 = *(_QWORD *)(v14 + 32);
    v96 = v15;
    v97 = v17;
    v18 = *(_QWORD *)(v14 + 48);
    v19 = *(_QWORD *)(v14 + 56);
    v100 = *(_QWORD *)(v14 + 40);
    v101 = v18;
    v98 = v16;
    v99 = v19;
    v20 = *(_QWORD *)(v14 + 64);
    v21 = *(_QWORD *)(v14 + 72);
    v23 = *(_QWORD *)(v14 + 80);
    v22 = *(_QWORD *)(v14 + 88);
    sub_10000BA8C(v15, v91, v92);
    sub_10000BAA4(v17, v16, v100, v101);
    sub_10000BAA4(v19, v20, v21, v23);
    swift_bridgeObjectRetain(v22);
    v24 = v96;
    v25 = v91;
    v26 = v92;
    sub_10000BA8C(v96, v91, v92);
    sub_10000BAA4(v97, v98, v100, v101);
    v93 = v20;
    v94 = v21;
    v95 = v23;
    sub_10000BAA4(v99, v20, v21, v23);
    v90 = v22;
    swift_bridgeObjectRetain(v22);
    sub_10000BA8C(v24, v25, v26);
    v27 = v89;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v89);
    v104 = v27;
    v30 = sub_1000DA888(v24, v25, v26);
    v31 = v27[2];
    v32 = (v29 & 1) == 0;
    v33 = v31 + v32;
    if (__OFADD__(v31, v32))
      goto LABEL_35;
    v34 = v29;
    if (v27[3] >= v33)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_1000EE494();
    }
    else
    {
      sub_1000EC9D0(v33, isUniquelyReferenced_nonNull_native);
      v35 = sub_1000DA888(v24, v25, v26);
      if ((v34 & 1) != (v36 & 1))
        goto LABEL_38;
      v30 = v35;
    }
    v37 = v104;
    v89 = v104;
    if ((v34 & 1) != 0)
    {
      v38 = v104[7] + 96 * v30;
      v39 = *(_QWORD *)v38;
      v40 = *(_QWORD *)(v38 + 8);
      v41 = *(_QWORD *)(v38 + 24);
      v42 = *(_QWORD *)(v38 + 32);
      v43 = v25;
      v44 = *(_QWORD *)(v38 + 40);
      v45 = *(_QWORD *)(v38 + 48);
      v84 = *(_QWORD *)(v38 + 56);
      v83 = *(_QWORD *)(v38 + 64);
      v82 = *(_QWORD *)(v38 + 72);
      v81 = *(_QWORD *)(v38 + 80);
      v85 = *(_QWORD *)(v38 + 88);
      sub_10000BAE4(v39, v40, *(_BYTE *)(v38 + 16));
      v46 = v45;
      v25 = v43;
      sub_10000BAFC(v41, v42, v44, v46);
      sub_10000BAFC(v84, v83, v82, v81);
      swift_bridgeObjectRelease(v85);
      *(_QWORD *)v38 = v96;
      *(_QWORD *)(v38 + 8) = v43;
      *(_BYTE *)(v38 + 16) = v26;
      v47 = v98;
      *(_QWORD *)(v38 + 24) = v97;
      *(_QWORD *)(v38 + 32) = v47;
      v48 = v101;
      *(_QWORD *)(v38 + 40) = v100;
      *(_QWORD *)(v38 + 48) = v48;
      v49 = v93;
      *(_QWORD *)(v38 + 56) = v99;
      *(_QWORD *)(v38 + 64) = v49;
      v50 = v95;
      *(_QWORD *)(v38 + 72) = v94;
      *(_QWORD *)(v38 + 80) = v50;
      v51 = v90;
      *(_QWORD *)(v38 + 88) = v90;
      v24 = v96;
    }
    else
    {
      v104[(v30 >> 6) + 8] |= 1 << v30;
      v52 = v37[6] + 24 * v30;
      *(_QWORD *)v52 = v24;
      *(_QWORD *)(v52 + 8) = v25;
      *(_BYTE *)(v52 + 16) = v26;
      v53 = v37[7] + 96 * v30;
      *(_QWORD *)v53 = v24;
      *(_QWORD *)(v53 + 8) = v25;
      *(_BYTE *)(v53 + 16) = v26;
      v54 = v98;
      *(_QWORD *)(v53 + 24) = v97;
      *(_QWORD *)(v53 + 32) = v54;
      v55 = v101;
      *(_QWORD *)(v53 + 40) = v100;
      *(_QWORD *)(v53 + 48) = v55;
      v56 = v93;
      *(_QWORD *)(v53 + 56) = v99;
      *(_QWORD *)(v53 + 64) = v56;
      v57 = v95;
      *(_QWORD *)(v53 + 72) = v94;
      *(_QWORD *)(v53 + 80) = v57;
      v51 = v90;
      *(_QWORD *)(v53 + 88) = v90;
      v58 = v37[2];
      v59 = __OFADD__(v58, 1);
      v60 = v58 + 1;
      if (v59)
        goto LABEL_36;
      v37[2] = v60;
      sub_10000BA8C(v24, v25, v26);
    }
    swift_bridgeObjectRelease(0x8000000000000000);
    sub_10000BAE4(v24, v25, v26);
    v61 = v26;
    v62 = *(_QWORD *)(v51 + 16);
    if (v62)
      break;
    sub_10000BAE4(v24, v25, v61);
    sub_10000BAFC(v97, v98, v100, v101);
    sub_10000BAFC(v99, v93, v94, v95);
    v13 = v51;
LABEL_4:
    swift_bridgeObjectRelease(v13);
    v10 = v88 + 1;
    if (v88 + 1 == v87)
      return v79;
  }
  v63 = v80;
  v64 = v51 + ((*(unsigned __int8 *)(v80 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v80 + 80));
  swift_bridgeObjectRetain(v51);
  v65 = *(_QWORD *)(v63 + 72);
  while (1)
  {
    sub_1000076F0(v64, (uint64_t)v9, type metadata accessor for PrimarySettingsListItemModel);
    sub_1000076F0((uint64_t)v9, (uint64_t)v4, type metadata accessor for PrimarySettingsListItemIdentifier);
    sub_100007670((uint64_t)v9, v103, type metadata accessor for PrimarySettingsListItemModel);
    v66 = swift_isUniquelyReferenced_nonNull_native(v11);
    v104 = v11;
    v68 = sub_1000DA830((uint64_t)v4);
    v69 = v11[2];
    v70 = (v67 & 1) == 0;
    v71 = v69 + v70;
    if (__OFADD__(v69, v70))
      break;
    v72 = v67;
    if (v11[3] >= v71)
    {
      if ((v66 & 1) != 0)
      {
        v11 = v104;
        if ((v67 & 1) != 0)
          goto LABEL_17;
      }
      else
      {
        sub_1000EE1FC();
        v11 = v104;
        if ((v72 & 1) != 0)
          goto LABEL_17;
      }
    }
    else
    {
      sub_1000EC5E0(v71, v66);
      v73 = sub_1000DA830((uint64_t)v4);
      if ((v72 & 1) != (v74 & 1))
        goto LABEL_37;
      v68 = v73;
      v11 = v104;
      if ((v72 & 1) != 0)
      {
LABEL_17:
        sub_100023D1C(v103, v11[7] + v68 * v65);
        goto LABEL_18;
      }
    }
    v11[(v68 >> 6) + 8] |= 1 << v68;
    sub_1000076F0((uint64_t)v4, v11[6] + *(_QWORD *)(v102 + 72) * v68, type metadata accessor for PrimarySettingsListItemIdentifier);
    sub_100007670(v103, v11[7] + v68 * v65, type metadata accessor for PrimarySettingsListItemModel);
    v75 = v11[2];
    v59 = __OFADD__(v75, 1);
    v76 = v75 + 1;
    if (v59)
      goto LABEL_34;
    v11[2] = v76;
LABEL_18:
    swift_bridgeObjectRelease(0x8000000000000000);
    sub_1000076B4((uint64_t)v4, type metadata accessor for PrimarySettingsListItemIdentifier);
    v64 += v65;
    if (!--v62)
    {
      v12 = v90;
      swift_bridgeObjectRelease(v90);
      sub_10000BAE4(v96, v91, v92);
      sub_10000BAFC(v97, v98, v100, v101);
      sub_10000BAFC(v99, v93, v94, v95);
      v13 = v12;
      goto LABEL_4;
    }
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v78);
  __break(1u);
LABEL_38:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for PrimarySettingsListSectionIdentifier);
  __break(1u);
  return result;
}

uint64_t type metadata accessor for PrimarySettingsListItemModel(uint64_t a1)
{
  return sub_10000D3C4(a1, qword_100157FC8, (uint64_t)&nominal type descriptor for PrimarySettingsListItemModel);
}

uint64_t sub_100023D1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PrimarySettingsListItemModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for PrimarySettingsListItemViewType(uint64_t a1)
{
  return sub_10000D3C4(a1, qword_100157F38, (uint64_t)&nominal type descriptor for PrimarySettingsListItemViewType);
}

uint64_t sub_100023D74(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004FC8(&qword_100157EA8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100023DB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004FC8(&qword_100157EB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for PrimarySettingsListDataModelGenerationContext()
{
  return &type metadata for PrimarySettingsListDataModelGenerationContext;
}

uint64_t sub_100023E0C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_100023E6C + 4 * byte_100114CE0[swift_getEnumCaseMultiPayload(a2, a3)];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain(v6);
  return v7;
}

void sub_100025CB4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  switch(swift_getEnumCaseMultiPayload(a1, a2))
  {
    case 0u:
      v3 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
      switch(swift_getEnumCaseMultiPayload(a1, v3))
      {
        case 0u:
        case 1u:
          v4 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
          break;
        case 2u:
          v23 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(a1, v23);
          v24 = sub_100004FC8(&qword_10015C420);
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v24 + 48) + 8));
          break;
        case 3u:
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
          break;
        case 4u:
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
          break;
        case 5u:
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));

          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
          if (*(_QWORD *)(a1 + 72))
            sub_100005474((_QWORD *)(a1 + 48));
          break;
        default:
          break;
      }
      v25 = a1 + *(int *)(type metadata accessor for PrimarySettingsListAppleAccountLinkModel(0) + 20);
      v26 = *(_QWORD *)(v25 + 8);
      if (v26)
      {
        swift_bridgeObjectRelease(v26);
        swift_bridgeObjectRelease(*(_QWORD *)(v25 + 24));

      }
      return;
    case 1u:
      v5 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
      switch(swift_getEnumCaseMultiPayload(a1, v5))
      {
        case 0u:
        case 1u:
          v6 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
          break;
        case 2u:
          v27 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(a1, v27);
          v28 = sub_100004FC8(&qword_10015C420);
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v28 + 48) + 8));
          break;
        case 3u:
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
          break;
        case 4u:
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
          break;
        case 5u:
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));

          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
          if (*(_QWORD *)(a1 + 72))
            sub_100005474((_QWORD *)(a1 + 48));
          break;
        default:
          break;
      }
      v29 = (_QWORD *)(a1
                     + *(int *)(type metadata accessor for PrimarySettingsListSecondaryAppleAccountLinkModel(0) + 20));
      swift_bridgeObjectRelease(v29[1]);
      swift_bridgeObjectRelease(v29[3]);
      swift_bridgeObjectRelease(v29[5]);
      v30 = v29[7];
      goto LABEL_60;
    case 2u:
      v7 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
      switch(swift_getEnumCaseMultiPayload(a1, v7))
      {
        case 0u:
        case 1u:
          v8 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
          break;
        case 2u:
          v31 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(a1, v31);
          v32 = sub_100004FC8(&qword_10015C420);
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v32 + 48) + 8));
          break;
        case 3u:
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
          break;
        case 4u:
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
          break;
        case 5u:
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));

          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
          if (*(_QWORD *)(a1 + 72))
            sub_100005474((_QWORD *)(a1 + 48));
          break;
        default:
          break;
      }
      v33 = type metadata accessor for PrimarySettingsListFamilyLinkModel(0);
      v34 = a1 + *(int *)(v33 + 20);
      v35 = type metadata accessor for FamilyRowStatus(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(v34, v35);
      v30 = *(_QWORD *)(a1 + *(int *)(v33 + 24) + 8);
      goto LABEL_60;
    case 3u:
      v9 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
      switch(swift_getEnumCaseMultiPayload(a1, v9))
      {
        case 0u:
        case 1u:
          v10 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(a1, v10);
          break;
        case 2u:
          v36 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 8))(a1, v36);
          v37 = sub_100004FC8(&qword_10015C420);
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v37 + 48) + 8));
          break;
        case 3u:
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
          break;
        case 4u:
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
          break;
        case 5u:
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));

          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
          if (*(_QWORD *)(a1 + 72))
            sub_100005474((_QWORD *)(a1 + 48));
          break;
        default:
          break;
      }
      v38 = type metadata accessor for PrimarySettingsListToggleModel(0);
      v39 = a1 + *(int *)(v38 + 24);
      sub_100007618(*(_QWORD *)v39, *(_QWORD *)(v39 + 8), *(_BYTE *)(v39 + 16));
      swift_bridgeObjectRelease(*(_QWORD *)(v39 + 24));
      swift_release(*(_QWORD *)(a1 + *(int *)(v38 + 32) + 8));
      return;
    case 4u:
      v11 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
      switch(swift_getEnumCaseMultiPayload(a1, v11))
      {
        case 0u:
        case 1u:
          v12 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(a1, v12);
          break;
        case 2u:
          v40 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 8))(a1, v40);
          v41 = sub_100004FC8(&qword_10015C420);
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v41 + 48) + 8));
          break;
        case 3u:
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
          break;
        case 4u:
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
          break;
        case 5u:
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));

          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
          if (*(_QWORD *)(a1 + 72))
            sub_100005474((_QWORD *)(a1 + 48));
          break;
        default:
          break;
      }
      v42 = type metadata accessor for PrimarySettingsListImagelessLinkModel(0);
      goto LABEL_59;
    case 5u:
      v13 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
      switch(swift_getEnumCaseMultiPayload(a1, v13))
      {
        case 0u:
        case 1u:
          v14 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(a1, v14);
          break;
        case 2u:
          v43 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 8))(a1, v43);
          v44 = sub_100004FC8(&qword_10015C420);
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v44 + 48) + 8));
          break;
        case 3u:
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
          break;
        case 4u:
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
          break;
        case 5u:
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));

          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
          if (*(_QWORD *)(a1 + 72))
            sub_100005474((_QWORD *)(a1 + 48));
          break;
        default:
          break;
      }
      v42 = type metadata accessor for PrimarySettingsListBadgedImagelessLinkModel(0);
LABEL_59:
      v45 = a1 + *(int *)(v42 + 24);
      sub_100007618(*(_QWORD *)v45, *(_QWORD *)(v45 + 8), *(_BYTE *)(v45 + 16));
      v30 = *(_QWORD *)(v45 + 24);
LABEL_60:
      swift_bridgeObjectRelease(v30);
      return;
    case 6u:
      v15 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
      switch(swift_getEnumCaseMultiPayload(a1, v15))
      {
        case 0u:
        case 1u:
          v16 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(a1, v16);
          break;
        case 2u:
          v46 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 8))(a1, v46);
          v47 = sub_100004FC8(&qword_10015C420);
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v47 + 48) + 8));
          break;
        case 3u:
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
          break;
        case 4u:
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
          break;
        case 5u:
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));

          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
          if (*(_QWORD *)(a1 + 72))
            sub_100005474((_QWORD *)(a1 + 48));
          break;
        default:
          break;
      }
      v48 = type metadata accessor for PrimarySettingsListLinkModel(0);
      goto LABEL_73;
    case 7u:
      v17 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
      switch(swift_getEnumCaseMultiPayload(a1, v17))
      {
        case 0u:
        case 1u:
          v18 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(a1, v18);
          break;
        case 2u:
          v49 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 8))(a1, v49);
          v50 = sub_100004FC8(&qword_10015C420);
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v50 + 48) + 8));
          break;
        case 3u:
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
          break;
        case 4u:
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
          break;
        case 5u:
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));

          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
          if (*(_QWORD *)(a1 + 72))
            sub_100005474((_QWORD *)(a1 + 48));
          break;
        default:
          break;
      }
      v48 = type metadata accessor for PrimarySettingsListBadgedLinkModel(0);
LABEL_73:
      v51 = v48;
      v52 = a1 + *(int *)(v48 + 24);
      sub_100007618(*(_QWORD *)v52, *(_QWORD *)(v52 + 8), *(_BYTE *)(v52 + 16));
      swift_bridgeObjectRelease(*(_QWORD *)(v52 + 24));
      v53 = *(int *)(v51 + 28);
      goto LABEL_80;
    case 8u:
      v19 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
      switch(swift_getEnumCaseMultiPayload(a1, v19))
      {
        case 0u:
        case 1u:
          v20 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(a1, v20);
          break;
        case 2u:
          v54 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 8))(a1, v54);
          v55 = sub_100004FC8(&qword_10015C420);
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v55 + 48) + 8));
          break;
        case 3u:
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
          break;
        case 4u:
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
          break;
        case 5u:
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));

          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
          if (*(_QWORD *)(a1 + 72))
            sub_100005474((_QWORD *)(a1 + 48));
          break;
        default:
          break;
      }
      v56 = (int *)type metadata accessor for PrimarySettingsListValueLinkModel(0);
      v57 = a1 + v56[6];
      sub_100007618(*(_QWORD *)v57, *(_QWORD *)(v57 + 8), *(_BYTE *)(v57 + 16));
      swift_bridgeObjectRelease(*(_QWORD *)(v57 + 24));
      v58 = a1 + v56[7];
      sub_100007618(*(_QWORD *)v58, *(_QWORD *)(v58 + 8), *(_BYTE *)(v58 + 16));
      swift_bridgeObjectRelease(*(_QWORD *)(v58 + 24));
      v53 = v56[8];
LABEL_80:
      v59 = a1 + v53;
      v60 = *(unsigned __int8 *)(v59 + 16);
      if (v60 != 255)
        sub_10000BB54(*(_QWORD *)v59, *(_QWORD *)(v59 + 8), v60);
      return;
    case 9u:
      v21 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
      switch(swift_getEnumCaseMultiPayload(a1, v21))
      {
        case 0u:
        case 1u:
          v22 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(a1, v22);
          break;
        case 2u:
          v61 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 8))(a1, v61);
          v62 = sub_100004FC8(&qword_10015C420);
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v62 + 48) + 8));
          break;
        case 3u:
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
          break;
        case 4u:
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
          break;
        case 5u:
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));

          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
          if (*(_QWORD *)(a1 + 72))
            sub_100005474((_QWORD *)(a1 + 48));
          break;
        default:
          break;
      }
      v63 = type metadata accessor for PrimarySettingsListFollowUpModel(0);
      v64 = a1 + *(int *)(v63 + 20);
      v65 = type metadata accessor for PrimarySettingsListFollowUpModel.ViewType(0);
      if (swift_getEnumCaseMultiPayload(v64, v65) != 1)
      {
        sub_100007618(*(_QWORD *)v64, *(_QWORD *)(v64 + 8), *(_BYTE *)(v64 + 16));
        swift_bridgeObjectRelease(*(_QWORD *)(v64 + 24));
        sub_100007618(*(_QWORD *)(v64 + 32), *(_QWORD *)(v64 + 40), *(_BYTE *)(v64 + 48));
        swift_bridgeObjectRelease(*(_QWORD *)(v64 + 56));
        v67 = *(unsigned __int8 *)(v64 + 80);
        if (v67 == 255)
          goto LABEL_101;
        v68 = *(_QWORD *)(v64 + 64);
        v69 = *(_QWORD *)(v64 + 72);
        goto LABEL_100;
      }
      switch(swift_getEnumCaseMultiPayload(v64, v21))
      {
        case 0u:
        case 1u:
          v66 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 8))(v64, v66);
          break;
        case 2u:
          v70 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 8))(v64, v70);
          v71 = sub_100004FC8(&qword_10015C420);
          swift_bridgeObjectRelease(*(_QWORD *)(v64 + *(int *)(v71 + 48) + 8));
          break;
        case 3u:
          swift_bridgeObjectRelease(*(_QWORD *)(v64 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v64 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(v64 + 40));
          swift_bridgeObjectRelease(*(_QWORD *)(v64 + 56));
          break;
        case 4u:
          swift_bridgeObjectRelease(*(_QWORD *)(v64 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v64 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(v64 + 40));
          break;
        case 5u:
          swift_bridgeObjectRelease(*(_QWORD *)(v64 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v64 + 24));

          swift_bridgeObjectRelease(*(_QWORD *)(v64 + 40));
          if (*(_QWORD *)(v64 + 72))
            sub_100005474((_QWORD *)(v64 + 48));
          break;
        default:
          break;
      }
      v72 = (int *)type metadata accessor for PrimarySettingsListFollowUpActionModel(0);
      v73 = v64 + v72[5];
      v74 = type metadata accessor for FLFollowUpGroupIdentity(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 8))(v73, v74);
      swift_bridgeObjectRelease(*(_QWORD *)(v64 + v72[7] + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v64 + v72[8] + 8));
      v75 = v64 + v72[9];
      sub_100007618(*(_QWORD *)v75, *(_QWORD *)(v75 + 8), *(_BYTE *)(v75 + 16));
      swift_bridgeObjectRelease(*(_QWORD *)(v75 + 24));
      v76 = v64 + v72[10];
      v67 = *(unsigned __int8 *)(v76 + 16);
      if (v67 != 255)
      {
        v68 = *(_QWORD *)v76;
        v69 = *(_QWORD *)(v76 + 8);
LABEL_100:
        sub_10000BB54(v68, v69, v67);
      }
LABEL_101:
      v77 = a1 + *(int *)(v63 + 24);
      v78 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 8))(v77, v78);
      return;
    default:
      return;
  }
}

void sub_100026B38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;

  v3 = (char *)sub_100026B8C + 4 * byte_100114DEA[swift_getEnumCaseMultiPayload(a2, a3)];
  __asm { BR              X10 }
}

_QWORD *sub_100026B8C()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  id v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  __int128 v36;

  v3 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v2, v3))
  {
    case 0u:
      v4 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(v0, v2, v4);
      v5 = v0;
      v6 = v3;
      v7 = 0;
      goto LABEL_12;
    case 1u:
      v8 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v0, v2, v8);
      v5 = v0;
      v6 = v3;
      v7 = 1;
      goto LABEL_12;
    case 2u:
      v9 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v0, v2, v9);
      v10 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
      v11 = (_QWORD *)((char *)v0 + v10);
      v12 = (_QWORD *)((char *)v2 + v10);
      v13 = v12[1];
      *v11 = *v12;
      v11[1] = v13;
      swift_bridgeObjectRetain(v13);
      v5 = v0;
      v6 = v3;
      v7 = 2;
      goto LABEL_12;
    case 3u:
      v14 = v2[1];
      *v0 = *v2;
      v0[1] = v14;
      v15 = v2[3];
      v0[2] = v2[2];
      v0[3] = v15;
      v16 = v2[5];
      v0[4] = v2[4];
      v0[5] = v16;
      v17 = v2[7];
      v0[6] = v2[6];
      v0[7] = v17;
      swift_bridgeObjectRetain(v14);
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRetain(v17);
      v5 = v0;
      v6 = v3;
      v7 = 3;
      goto LABEL_12;
    case 4u:
      v18 = v2[1];
      *v0 = *v2;
      v0[1] = v18;
      v19 = v2[3];
      v0[2] = v2[2];
      v0[3] = v19;
      v20 = v2[5];
      v0[4] = v2[4];
      v0[5] = v20;
      v0[6] = v2[6];
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v20);
      v5 = v0;
      v6 = v3;
      v7 = 4;
      goto LABEL_12;
    case 5u:
      v21 = v2[1];
      *v0 = *v2;
      v0[1] = v21;
      v22 = v2[3];
      v0[2] = v2[2];
      v0[3] = v22;
      v24 = (void *)v2[4];
      v23 = v2[5];
      v0[4] = v24;
      v0[5] = v23;
      v25 = v2[9];
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(v22);
      v26 = v24;
      swift_bridgeObjectRetain(v23);
      if (v25)
      {
        v0[9] = v25;
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v25 - 8))((uint64_t)(v0 + 6), (uint64_t)(v2 + 6), v25);
      }
      else
      {
        v27 = *((_OWORD *)v2 + 4);
        *((_OWORD *)v0 + 3) = *((_OWORD *)v2 + 3);
        *((_OWORD *)v0 + 4) = v27;
      }
      v5 = v0;
      v6 = v3;
      v7 = 5;
LABEL_12:
      swift_storeEnumTagMultiPayload(v5, v6, v7);
      break;
    default:
      memcpy(v0, v2, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
      break;
  }
  v28 = type metadata accessor for PrimarySettingsListAppleAccountLinkModel(0);
  v29 = *(int *)(v28 + 20);
  v30 = (char *)v0 + v29;
  v31 = (char *)v2 + v29;
  v32 = *((_QWORD *)v31 + 1);
  if (v32)
  {
    *(_QWORD *)v30 = *(_QWORD *)v31;
    *((_QWORD *)v30 + 1) = v32;
    v33 = *((_QWORD *)v31 + 3);
    *((_QWORD *)v30 + 2) = *((_QWORD *)v31 + 2);
    *((_QWORD *)v30 + 3) = v33;
    v30[32] = v31[32];
    v34 = (void *)*((_QWORD *)v31 + 5);
    *((_QWORD *)v30 + 5) = v34;
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v33);
    v35 = v34;
  }
  else
  {
    v36 = *((_OWORD *)v31 + 1);
    *(_OWORD *)v30 = *(_OWORD *)v31;
    *((_OWORD *)v30 + 1) = v36;
    *((_OWORD *)v30 + 2) = *((_OWORD *)v31 + 2);
  }
  *((_BYTE *)v0 + *(int *)(v28 + 24)) = *((_BYTE *)v2 + *(int *)(v28 + 24));
  swift_storeEnumTagMultiPayload(v0, v1, 0);
  return v0;
}

uint64_t sub_1000289B4(uint64_t result, uint64_t a2, uint64_t a3)
{
  char *v5;

  if (result != a2)
  {
    sub_1000076B4(result, type metadata accessor for PrimarySettingsListItemViewType);
    v5 = (char *)&loc_100028A20 + 4 * byte_100114E72[swift_getEnumCaseMultiPayload(a2, a3)];
    __asm { BR              X10 }
  }
  return result;
}

void sub_10002AC58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;

  v3 = (char *)sub_10002ACA8 + 4 * byte_100114EFA[swift_getEnumCaseMultiPayload(a2, a3)];
  __asm { BR              X10 }
}

char *sub_10002ACA8()
{
  char *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  __int128 v13;

  v3 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v2, v3);
  if (EnumCaseMultiPayload == 2)
  {
    v6 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v0, v2, v6);
    v7 = sub_100004FC8(&qword_10015C420);
    *(_OWORD *)&v0[*(int *)(v7 + 48)] = *(_OWORD *)&v2[*(int *)(v7 + 48)];
    swift_storeEnumTagMultiPayload(v0, v3, 2);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v8 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v0, v2, v8);
    swift_storeEnumTagMultiPayload(v0, v3, 1);
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(v0, v2, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    v5 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v0, v2, v5);
    swift_storeEnumTagMultiPayload(v0, v3, 0);
  }
  v9 = type metadata accessor for PrimarySettingsListAppleAccountLinkModel(0);
  v10 = *(int *)(v9 + 20);
  v11 = &v0[v10];
  v12 = &v2[v10];
  v13 = *((_OWORD *)v12 + 1);
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *((_OWORD *)v11 + 1) = v13;
  *((_OWORD *)v11 + 2) = *((_OWORD *)v12 + 2);
  v0[*(int *)(v9 + 24)] = v2[*(int *)(v9 + 24)];
  swift_storeEnumTagMultiPayload(v0, v1, 0);
  return v0;
}

uint64_t sub_10002BB4C(uint64_t result, uint64_t a2, uint64_t a3)
{
  char *v5;

  if (result != a2)
  {
    sub_1000076B4(result, type metadata accessor for PrimarySettingsListItemViewType);
    v5 = (char *)&loc_10002BBB4 + 4 * byte_100114F04[swift_getEnumCaseMultiPayload(a2, a3)];
    __asm { BR              X10 }
  }
  return result;
}

uint64_t sub_10002CA58(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD v13[10];

  result = type metadata accessor for PrimarySettingsListAppleAccountLinkModel(319);
  if (v3 <= 0x3F)
  {
    v13[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for PrimarySettingsListSecondaryAppleAccountLinkModel(319);
    if (v4 <= 0x3F)
    {
      v13[1] = *(_QWORD *)(result - 8) + 64;
      result = type metadata accessor for PrimarySettingsListFamilyLinkModel(319);
      if (v5 <= 0x3F)
      {
        v13[2] = *(_QWORD *)(result - 8) + 64;
        result = type metadata accessor for PrimarySettingsListToggleModel(319);
        if (v6 <= 0x3F)
        {
          v13[3] = *(_QWORD *)(result - 8) + 64;
          result = type metadata accessor for PrimarySettingsListImagelessLinkModel(319);
          if (v7 <= 0x3F)
          {
            v13[4] = *(_QWORD *)(result - 8) + 64;
            result = type metadata accessor for PrimarySettingsListBadgedImagelessLinkModel(319);
            if (v8 <= 0x3F)
            {
              v13[5] = *(_QWORD *)(result - 8) + 64;
              result = type metadata accessor for PrimarySettingsListLinkModel(319);
              if (v9 <= 0x3F)
              {
                v13[6] = *(_QWORD *)(result - 8) + 64;
                result = type metadata accessor for PrimarySettingsListBadgedLinkModel(319);
                if (v10 <= 0x3F)
                {
                  v13[7] = *(_QWORD *)(result - 8) + 64;
                  result = type metadata accessor for PrimarySettingsListValueLinkModel(319);
                  if (v11 <= 0x3F)
                  {
                    v13[8] = *(_QWORD *)(result - 8) + 64;
                    result = type metadata accessor for PrimarySettingsListFollowUpModel(319);
                    if (v12 <= 0x3F)
                    {
                      v13[9] = *(_QWORD *)(result - 8) + 64;
                      swift_initEnumMetadataMultiPayload(a1, 256, 10, v13);
                      return 0;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ConnectedHeadphoneItem(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t destroy for PrimarySettingsListSectionModel(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  sub_10000BAE4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    sub_100007618(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
    swift_bridgeObjectRelease(v2);
  }
  v3 = *(_QWORD *)(a1 + 80);
  if (v3)
  {
    sub_100007618(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_BYTE *)(a1 + 72));
    swift_bridgeObjectRelease(v3);
  }
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 88));
}

uint64_t initializeWithCopy for PrimarySettingsListSectionModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_10000BA8C(*(_QWORD *)a2, v5, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 48);
  if (!v7)
  {
    v15 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v15;
    v11 = *(_QWORD *)(a2 + 80);
    if (v11)
      goto LABEL_3;
LABEL_5:
    v16 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v16;
    goto LABEL_6;
  }
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_BYTE *)(a2 + 40);
  sub_10000BAD4(v8, v9, v10);
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v9;
  *(_BYTE *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = v7;
  swift_bridgeObjectRetain(v7);
  v11 = *(_QWORD *)(a2 + 80);
  if (!v11)
    goto LABEL_5;
LABEL_3:
  v12 = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a2 + 64);
  v14 = *(_BYTE *)(a2 + 72);
  sub_10000BAD4(v12, v13, v14);
  *(_QWORD *)(a1 + 56) = v12;
  *(_QWORD *)(a1 + 64) = v13;
  *(_BYTE *)(a1 + 72) = v14;
  *(_QWORD *)(a1 + 80) = v11;
  swift_bridgeObjectRetain(v11);
LABEL_6:
  v17 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 88) = v17;
  swift_bridgeObjectRetain(v17);
  return a1;
}

uint64_t assignWithCopy for PrimarySettingsListSectionModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  _OWORD *v27;
  _OWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_10000BA8C(*(_QWORD *)a2, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v9 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v6;
  sub_10000BAE4(v7, v8, v9);
  v10 = (_OWORD *)(a1 + 24);
  v11 = (_OWORD *)(a2 + 24);
  v12 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(a1 + 48))
  {
    if (v12)
    {
      v13 = *(_QWORD *)(a2 + 24);
      v14 = *(_QWORD *)(a2 + 32);
      v15 = *(_BYTE *)(a2 + 40);
      sub_10000BAD4(v13, v14, v15);
      v16 = *(_QWORD *)(a1 + 24);
      v17 = *(_QWORD *)(a1 + 32);
      v18 = *(_BYTE *)(a1 + 40);
      *(_QWORD *)(a1 + 24) = v13;
      *(_QWORD *)(a1 + 32) = v14;
      *(_BYTE *)(a1 + 40) = v15;
      sub_100007618(v16, v17, v18);
      v19 = *(_QWORD *)(a2 + 48);
      v20 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 48) = v19;
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRelease(v20);
    }
    else
    {
      sub_10002CF1C(a1 + 24);
      v25 = *(_OWORD *)(a2 + 40);
      *v10 = *v11;
      *(_OWORD *)(a1 + 40) = v25;
    }
  }
  else if (v12)
  {
    v21 = *(_QWORD *)(a2 + 24);
    v22 = *(_QWORD *)(a2 + 32);
    v23 = *(_BYTE *)(a2 + 40);
    sub_10000BAD4(v21, v22, v23);
    *(_QWORD *)(a1 + 24) = v21;
    *(_QWORD *)(a1 + 32) = v22;
    *(_BYTE *)(a1 + 40) = v23;
    v24 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 48) = v24;
    swift_bridgeObjectRetain(v24);
  }
  else
  {
    v26 = *(_OWORD *)(a2 + 40);
    *v10 = *v11;
    *(_OWORD *)(a1 + 40) = v26;
  }
  v27 = (_OWORD *)(a1 + 56);
  v28 = (_OWORD *)(a2 + 56);
  v29 = *(_QWORD *)(a2 + 80);
  if (*(_QWORD *)(a1 + 80))
  {
    if (v29)
    {
      v30 = *(_QWORD *)(a2 + 56);
      v31 = *(_QWORD *)(a2 + 64);
      v32 = *(_BYTE *)(a2 + 72);
      sub_10000BAD4(v30, v31, v32);
      v33 = *(_QWORD *)(a1 + 56);
      v34 = *(_QWORD *)(a1 + 64);
      v35 = *(_BYTE *)(a1 + 72);
      *(_QWORD *)(a1 + 56) = v30;
      *(_QWORD *)(a1 + 64) = v31;
      *(_BYTE *)(a1 + 72) = v32;
      sub_100007618(v33, v34, v35);
      v36 = *(_QWORD *)(a2 + 80);
      v37 = *(_QWORD *)(a1 + 80);
      *(_QWORD *)(a1 + 80) = v36;
      swift_bridgeObjectRetain(v36);
      swift_bridgeObjectRelease(v37);
    }
    else
    {
      sub_10002CF1C(a1 + 56);
      v42 = *(_OWORD *)(a2 + 72);
      *v27 = *v28;
      *(_OWORD *)(a1 + 72) = v42;
    }
  }
  else if (v29)
  {
    v38 = *(_QWORD *)(a2 + 56);
    v39 = *(_QWORD *)(a2 + 64);
    v40 = *(_BYTE *)(a2 + 72);
    sub_10000BAD4(v38, v39, v40);
    *(_QWORD *)(a1 + 56) = v38;
    *(_QWORD *)(a1 + 64) = v39;
    *(_BYTE *)(a1 + 72) = v40;
    v41 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 80) = v41;
    swift_bridgeObjectRetain(v41);
  }
  else
  {
    v43 = *(_OWORD *)(a2 + 72);
    *v27 = *v28;
    *(_OWORD *)(a1 + 72) = v43;
  }
  v44 = *(_QWORD *)(a2 + 88);
  v45 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v44;
  swift_bridgeObjectRetain(v44);
  swift_bridgeObjectRelease(v45);
  return a1;
}

uint64_t sub_10002CF1C(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for Text - 1) + 8))();
  return a1;
}

__n128 initializeWithTake for PrimarySettingsListSectionModel(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t assignWithTake for PrimarySettingsListSectionModel(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v7 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v4;
  sub_10000BAE4(v5, v6, v7);
  if (*(_QWORD *)(a1 + 48))
  {
    v8 = *(_QWORD *)(a2 + 48);
    if (v8)
    {
      v9 = *(_BYTE *)(a2 + 40);
      v10 = *(_QWORD *)(a1 + 24);
      v11 = *(_QWORD *)(a1 + 32);
      v12 = *(_BYTE *)(a1 + 40);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_BYTE *)(a1 + 40) = v9;
      sub_100007618(v10, v11, v12);
      v13 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 48) = v8;
      swift_bridgeObjectRelease(v13);
      goto LABEL_6;
    }
    sub_10002CF1C(a1 + 24);
  }
  v14 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = v14;
LABEL_6:
  if (!*(_QWORD *)(a1 + 80))
  {
LABEL_10:
    v21 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v21;
    goto LABEL_11;
  }
  v15 = *(_QWORD *)(a2 + 80);
  if (!v15)
  {
    sub_10002CF1C(a1 + 56);
    goto LABEL_10;
  }
  v16 = *(_BYTE *)(a2 + 72);
  v17 = *(_QWORD *)(a1 + 56);
  v18 = *(_QWORD *)(a1 + 64);
  v19 = *(_BYTE *)(a1 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 72) = v16;
  sub_100007618(v17, v18, v19);
  v20 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v15;
  swift_bridgeObjectRelease(v20);
LABEL_11:
  v22 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease(v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for PrimarySettingsListSectionModel(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 96))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 88);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PrimarySettingsListSectionModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 88) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PrimarySettingsListSectionModel()
{
  return &type metadata for PrimarySettingsListSectionModel;
}

uint64_t sub_10002D128(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  id v32;
  __int128 v33;
  char *v34;
  uint64_t v35;
  char *v36;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    v7 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(a2, v7))
    {
      case 0u:
        v8 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
        v9 = a1;
        v10 = v7;
        v11 = 0;
        goto LABEL_14;
      case 1u:
        v14 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
        v9 = a1;
        v10 = v7;
        v11 = 1;
        goto LABEL_14;
      case 2u:
        v15 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(a1, a2, v15);
        v16 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v17 = (_QWORD *)((char *)a1 + v16);
        v18 = (_QWORD *)((char *)a2 + v16);
        v19 = v18[1];
        *v17 = *v18;
        v17[1] = v19;
        swift_bridgeObjectRetain(v19);
        v9 = a1;
        v10 = v7;
        v11 = 2;
        goto LABEL_14;
      case 3u:
        v20 = a2[1];
        *a1 = *a2;
        a1[1] = v20;
        v21 = a2[3];
        a1[2] = a2[2];
        a1[3] = v21;
        v22 = a2[5];
        a1[4] = a2[4];
        a1[5] = v22;
        v23 = a2[7];
        a1[6] = a2[6];
        a1[7] = v23;
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v22);
        swift_bridgeObjectRetain(v23);
        v9 = a1;
        v10 = v7;
        v11 = 3;
        goto LABEL_14;
      case 4u:
        v24 = a2[1];
        *a1 = *a2;
        a1[1] = v24;
        v25 = a2[3];
        a1[2] = a2[2];
        a1[3] = v25;
        v26 = a2[5];
        a1[4] = a2[4];
        a1[5] = v26;
        a1[6] = a2[6];
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v25);
        swift_bridgeObjectRetain(v26);
        v9 = a1;
        v10 = v7;
        v11 = 4;
        goto LABEL_14;
      case 5u:
        v27 = a2[1];
        *a1 = *a2;
        a1[1] = v27;
        v28 = a2[3];
        a1[2] = a2[2];
        a1[3] = v28;
        v30 = (void *)a2[4];
        v29 = a2[5];
        a1[4] = v30;
        a1[5] = v29;
        v31 = a2[9];
        swift_bridgeObjectRetain(v27);
        swift_bridgeObjectRetain(v28);
        v32 = v30;
        swift_bridgeObjectRetain(v29);
        if (v31)
        {
          a1[9] = v31;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v31 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v31);
        }
        else
        {
          v33 = *((_OWORD *)a2 + 4);
          *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
          *((_OWORD *)a1 + 4) = v33;
        }
        v9 = a1;
        v10 = v7;
        v11 = 5;
LABEL_14:
        swift_storeEnumTagMultiPayload(v9, v10, v11);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
        break;
    }
    v34 = (char *)a2 + *(int *)(a3 + 20);
    v35 = type metadata accessor for PrimarySettingsListItemViewType(0);
    v36 = (char *)&loc_10002D3D0 + 4 * byte_100114F14[swift_getEnumCaseMultiPayload(v34, v35)];
    __asm { BR              X10 }
  }
  v12 = *a2;
  *a1 = *a2;
  v13 = v12 + ((v5 + 16) & ~(unint64_t)v5);
  swift_retain(v12);
  return v13;
}

void sub_10002F1DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(a1, v4))
  {
    case 0u:
    case 1u:
      v5 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
      break;
    case 2u:
      v6 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
      v7 = sub_100004FC8(&qword_10015C420);
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v7 + 48) + 8));
      break;
    case 3u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
      break;
    case 4u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      break;
    case 5u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));

      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      if (*(_QWORD *)(a1 + 72))
        sub_100005474((_QWORD *)(a1 + 48));
      break;
    default:
      break;
  }
  v8 = a1 + *(int *)(a2 + 20);
  v9 = type metadata accessor for PrimarySettingsListItemViewType(0);
  switch(swift_getEnumCaseMultiPayload(v8, v9))
  {
    case 0u:
      switch(swift_getEnumCaseMultiPayload(v8, v4))
      {
        case 0u:
        case 1u:
          v10 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
          break;
        case 2u:
          v20 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v8, v20);
          v21 = sub_100004FC8(&qword_10015C420);
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + *(int *)(v21 + 48) + 8));
          break;
        case 3u:
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 40));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 56));
          break;
        case 4u:
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 40));
          break;
        case 5u:
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 24));

          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 40));
          if (*(_QWORD *)(v8 + 72))
            sub_100005474((_QWORD *)(v8 + 48));
          break;
        default:
          break;
      }
      v22 = v8 + *(int *)(type metadata accessor for PrimarySettingsListAppleAccountLinkModel(0) + 20);
      v23 = *(_QWORD *)(v22 + 8);
      if (v23)
      {
        swift_bridgeObjectRelease(v23);
        swift_bridgeObjectRelease(*(_QWORD *)(v22 + 24));

      }
      return;
    case 1u:
      switch(swift_getEnumCaseMultiPayload(v8, v4))
      {
        case 0u:
        case 1u:
          v11 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v8, v11);
          break;
        case 2u:
          v24 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v8, v24);
          v25 = sub_100004FC8(&qword_10015C420);
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + *(int *)(v25 + 48) + 8));
          break;
        case 3u:
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 40));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 56));
          break;
        case 4u:
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 40));
          break;
        case 5u:
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 24));

          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 40));
          if (*(_QWORD *)(v8 + 72))
            sub_100005474((_QWORD *)(v8 + 48));
          break;
        default:
          break;
      }
      v26 = (_QWORD *)(v8
                     + *(int *)(type metadata accessor for PrimarySettingsListSecondaryAppleAccountLinkModel(0) + 20));
      swift_bridgeObjectRelease(v26[1]);
      swift_bridgeObjectRelease(v26[3]);
      swift_bridgeObjectRelease(v26[5]);
      v27 = v26[7];
      goto LABEL_67;
    case 2u:
      switch(swift_getEnumCaseMultiPayload(v8, v4))
      {
        case 0u:
        case 1u:
          v12 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v8, v12);
          break;
        case 2u:
          v28 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v8, v28);
          v29 = sub_100004FC8(&qword_10015C420);
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + *(int *)(v29 + 48) + 8));
          break;
        case 3u:
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 40));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 56));
          break;
        case 4u:
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 40));
          break;
        case 5u:
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 24));

          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 40));
          if (*(_QWORD *)(v8 + 72))
            sub_100005474((_QWORD *)(v8 + 48));
          break;
        default:
          break;
      }
      v30 = type metadata accessor for PrimarySettingsListFamilyLinkModel(0);
      v31 = v8 + *(int *)(v30 + 20);
      v32 = type metadata accessor for FamilyRowStatus(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(v31, v32);
      v27 = *(_QWORD *)(v8 + *(int *)(v30 + 24) + 8);
      goto LABEL_67;
    case 3u:
      switch(swift_getEnumCaseMultiPayload(v8, v4))
      {
        case 0u:
        case 1u:
          v13 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v8, v13);
          break;
        case 2u:
          v33 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v8, v33);
          v34 = sub_100004FC8(&qword_10015C420);
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + *(int *)(v34 + 48) + 8));
          break;
        case 3u:
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 40));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 56));
          break;
        case 4u:
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 40));
          break;
        case 5u:
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 24));

          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 40));
          if (*(_QWORD *)(v8 + 72))
            sub_100005474((_QWORD *)(v8 + 48));
          break;
        default:
          break;
      }
      v35 = type metadata accessor for PrimarySettingsListToggleModel(0);
      v36 = v8 + *(int *)(v35 + 24);
      sub_100007618(*(_QWORD *)v36, *(_QWORD *)(v36 + 8), *(_BYTE *)(v36 + 16));
      swift_bridgeObjectRelease(*(_QWORD *)(v36 + 24));
      swift_release(*(_QWORD *)(v8 + *(int *)(v35 + 32) + 8));
      return;
    case 4u:
      switch(swift_getEnumCaseMultiPayload(v8, v4))
      {
        case 0u:
        case 1u:
          v14 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v8, v14);
          break;
        case 2u:
          v37 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 8))(v8, v37);
          v38 = sub_100004FC8(&qword_10015C420);
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + *(int *)(v38 + 48) + 8));
          break;
        case 3u:
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 40));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 56));
          break;
        case 4u:
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 40));
          break;
        case 5u:
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 24));

          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 40));
          if (*(_QWORD *)(v8 + 72))
            sub_100005474((_QWORD *)(v8 + 48));
          break;
        default:
          break;
      }
      v39 = type metadata accessor for PrimarySettingsListImagelessLinkModel(0);
      goto LABEL_66;
    case 5u:
      switch(swift_getEnumCaseMultiPayload(v8, v4))
      {
        case 0u:
        case 1u:
          v15 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v8, v15);
          break;
        case 2u:
          v40 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 8))(v8, v40);
          v41 = sub_100004FC8(&qword_10015C420);
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + *(int *)(v41 + 48) + 8));
          break;
        case 3u:
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 40));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 56));
          break;
        case 4u:
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 40));
          break;
        case 5u:
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 24));

          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 40));
          if (*(_QWORD *)(v8 + 72))
            sub_100005474((_QWORD *)(v8 + 48));
          break;
        default:
          break;
      }
      v39 = type metadata accessor for PrimarySettingsListBadgedImagelessLinkModel(0);
LABEL_66:
      v42 = v8 + *(int *)(v39 + 24);
      sub_100007618(*(_QWORD *)v42, *(_QWORD *)(v42 + 8), *(_BYTE *)(v42 + 16));
      v27 = *(_QWORD *)(v42 + 24);
LABEL_67:
      swift_bridgeObjectRelease(v27);
      return;
    case 6u:
      switch(swift_getEnumCaseMultiPayload(v8, v4))
      {
        case 0u:
        case 1u:
          v16 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v8, v16);
          break;
        case 2u:
          v43 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 8))(v8, v43);
          v44 = sub_100004FC8(&qword_10015C420);
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + *(int *)(v44 + 48) + 8));
          break;
        case 3u:
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 40));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 56));
          break;
        case 4u:
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 40));
          break;
        case 5u:
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 24));

          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 40));
          if (*(_QWORD *)(v8 + 72))
            sub_100005474((_QWORD *)(v8 + 48));
          break;
        default:
          break;
      }
      v45 = type metadata accessor for PrimarySettingsListLinkModel(0);
      goto LABEL_80;
    case 7u:
      switch(swift_getEnumCaseMultiPayload(v8, v4))
      {
        case 0u:
        case 1u:
          v17 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v8, v17);
          break;
        case 2u:
          v46 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 8))(v8, v46);
          v47 = sub_100004FC8(&qword_10015C420);
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + *(int *)(v47 + 48) + 8));
          break;
        case 3u:
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 40));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 56));
          break;
        case 4u:
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 40));
          break;
        case 5u:
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 24));

          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 40));
          if (*(_QWORD *)(v8 + 72))
            sub_100005474((_QWORD *)(v8 + 48));
          break;
        default:
          break;
      }
      v45 = type metadata accessor for PrimarySettingsListBadgedLinkModel(0);
LABEL_80:
      v48 = v45;
      v49 = v8 + *(int *)(v45 + 24);
      sub_100007618(*(_QWORD *)v49, *(_QWORD *)(v49 + 8), *(_BYTE *)(v49 + 16));
      swift_bridgeObjectRelease(*(_QWORD *)(v49 + 24));
      v50 = *(int *)(v48 + 28);
      goto LABEL_87;
    case 8u:
      switch(swift_getEnumCaseMultiPayload(v8, v4))
      {
        case 0u:
        case 1u:
          v18 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v8, v18);
          break;
        case 2u:
          v51 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 8))(v8, v51);
          v52 = sub_100004FC8(&qword_10015C420);
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + *(int *)(v52 + 48) + 8));
          break;
        case 3u:
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 40));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 56));
          break;
        case 4u:
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 40));
          break;
        case 5u:
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 24));

          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 40));
          if (*(_QWORD *)(v8 + 72))
            sub_100005474((_QWORD *)(v8 + 48));
          break;
        default:
          break;
      }
      v53 = (int *)type metadata accessor for PrimarySettingsListValueLinkModel(0);
      v54 = v8 + v53[6];
      sub_100007618(*(_QWORD *)v54, *(_QWORD *)(v54 + 8), *(_BYTE *)(v54 + 16));
      swift_bridgeObjectRelease(*(_QWORD *)(v54 + 24));
      v55 = v8 + v53[7];
      sub_100007618(*(_QWORD *)v55, *(_QWORD *)(v55 + 8), *(_BYTE *)(v55 + 16));
      swift_bridgeObjectRelease(*(_QWORD *)(v55 + 24));
      v50 = v53[8];
LABEL_87:
      v56 = v8 + v50;
      v57 = *(unsigned __int8 *)(v56 + 16);
      if (v57 != 255)
        sub_10000BB54(*(_QWORD *)v56, *(_QWORD *)(v56 + 8), v57);
      return;
    case 9u:
      switch(swift_getEnumCaseMultiPayload(v8, v4))
      {
        case 0u:
        case 1u:
          v19 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v8, v19);
          break;
        case 2u:
          v58 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 8))(v8, v58);
          v59 = sub_100004FC8(&qword_10015C420);
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + *(int *)(v59 + 48) + 8));
          break;
        case 3u:
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 40));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 56));
          break;
        case 4u:
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 40));
          break;
        case 5u:
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 24));

          swift_bridgeObjectRelease(*(_QWORD *)(v8 + 40));
          if (*(_QWORD *)(v8 + 72))
            sub_100005474((_QWORD *)(v8 + 48));
          break;
        default:
          break;
      }
      v60 = type metadata accessor for PrimarySettingsListFollowUpModel(0);
      v61 = v8 + *(int *)(v60 + 20);
      v62 = type metadata accessor for PrimarySettingsListFollowUpModel.ViewType(0);
      if (swift_getEnumCaseMultiPayload(v61, v62) != 1)
      {
        sub_100007618(*(_QWORD *)v61, *(_QWORD *)(v61 + 8), *(_BYTE *)(v61 + 16));
        swift_bridgeObjectRelease(*(_QWORD *)(v61 + 24));
        sub_100007618(*(_QWORD *)(v61 + 32), *(_QWORD *)(v61 + 40), *(_BYTE *)(v61 + 48));
        swift_bridgeObjectRelease(*(_QWORD *)(v61 + 56));
        v64 = *(unsigned __int8 *)(v61 + 80);
        if (v64 == 255)
          goto LABEL_108;
        v65 = *(_QWORD *)(v61 + 64);
        v66 = *(_QWORD *)(v61 + 72);
        goto LABEL_107;
      }
      switch(swift_getEnumCaseMultiPayload(v61, v4))
      {
        case 0u:
        case 1u:
          v63 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 8))(v61, v63);
          break;
        case 2u:
          v67 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 8))(v61, v67);
          v68 = sub_100004FC8(&qword_10015C420);
          swift_bridgeObjectRelease(*(_QWORD *)(v61 + *(int *)(v68 + 48) + 8));
          break;
        case 3u:
          swift_bridgeObjectRelease(*(_QWORD *)(v61 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v61 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(v61 + 40));
          swift_bridgeObjectRelease(*(_QWORD *)(v61 + 56));
          break;
        case 4u:
          swift_bridgeObjectRelease(*(_QWORD *)(v61 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v61 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(v61 + 40));
          break;
        case 5u:
          swift_bridgeObjectRelease(*(_QWORD *)(v61 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v61 + 24));

          swift_bridgeObjectRelease(*(_QWORD *)(v61 + 40));
          if (*(_QWORD *)(v61 + 72))
            sub_100005474((_QWORD *)(v61 + 48));
          break;
        default:
          break;
      }
      v69 = (int *)type metadata accessor for PrimarySettingsListFollowUpActionModel(0);
      v70 = v61 + v69[5];
      v71 = type metadata accessor for FLFollowUpGroupIdentity(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 8))(v70, v71);
      swift_bridgeObjectRelease(*(_QWORD *)(v61 + v69[7] + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v61 + v69[8] + 8));
      v72 = v61 + v69[9];
      sub_100007618(*(_QWORD *)v72, *(_QWORD *)(v72 + 8), *(_BYTE *)(v72 + 16));
      swift_bridgeObjectRelease(*(_QWORD *)(v72 + 24));
      v73 = v61 + v69[10];
      v64 = *(unsigned __int8 *)(v73 + 16);
      if (v64 != 255)
      {
        v65 = *(_QWORD *)v73;
        v66 = *(_QWORD *)(v73 + 8);
LABEL_107:
        sub_10000BB54(v65, v66, v64);
      }
LABEL_108:
      v74 = v8 + *(int *)(v60 + 24);
      v75 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 8))(v74, v75);
      return;
    default:
      return;
  }
}

void sub_100030130(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  __int128 v30;
  char *v31;
  uint64_t v32;
  char *v33;

  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(a2, v6))
  {
    case 0u:
      v7 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 0;
      goto LABEL_12;
    case 1u:
      v11 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      v8 = a1;
      v9 = v6;
      v10 = 1;
      goto LABEL_12;
    case 2u:
      v12 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
      v13 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
      v14 = (_QWORD *)((char *)a1 + v13);
      v15 = (_QWORD *)((char *)a2 + v13);
      v16 = v15[1];
      *v14 = *v15;
      v14[1] = v16;
      swift_bridgeObjectRetain(v16);
      v8 = a1;
      v9 = v6;
      v10 = 2;
      goto LABEL_12;
    case 3u:
      v17 = a2[1];
      *a1 = *a2;
      a1[1] = v17;
      v18 = a2[3];
      a1[2] = a2[2];
      a1[3] = v18;
      v19 = a2[5];
      a1[4] = a2[4];
      a1[5] = v19;
      v20 = a2[7];
      a1[6] = a2[6];
      a1[7] = v20;
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v20);
      v8 = a1;
      v9 = v6;
      v10 = 3;
      goto LABEL_12;
    case 4u:
      v21 = a2[1];
      *a1 = *a2;
      a1[1] = v21;
      v22 = a2[3];
      a1[2] = a2[2];
      a1[3] = v22;
      v23 = a2[5];
      a1[4] = a2[4];
      a1[5] = v23;
      a1[6] = a2[6];
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v23);
      v8 = a1;
      v9 = v6;
      v10 = 4;
      goto LABEL_12;
    case 5u:
      v24 = a2[1];
      *a1 = *a2;
      a1[1] = v24;
      v25 = a2[3];
      a1[2] = a2[2];
      a1[3] = v25;
      v27 = (void *)a2[4];
      v26 = a2[5];
      a1[4] = v27;
      a1[5] = v26;
      v28 = a2[9];
      swift_bridgeObjectRetain(v24);
      swift_bridgeObjectRetain(v25);
      v29 = v27;
      swift_bridgeObjectRetain(v26);
      if (v28)
      {
        a1[9] = v28;
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v28 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v28);
      }
      else
      {
        v30 = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 4) = v30;
      }
      v8 = a1;
      v9 = v6;
      v10 = 5;
LABEL_12:
      swift_storeEnumTagMultiPayload(v8, v9, v10);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      break;
  }
  v31 = (char *)a2 + *(int *)(a3 + 20);
  v32 = type metadata accessor for PrimarySettingsListItemViewType(0);
  v33 = (char *)sub_1000303AC + 4 * byte_10011502A[swift_getEnumCaseMultiPayload(v31, v32)];
  __asm { BR              X10 }
}

uint64_t sub_1000303AC()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  id v36;
  __int128 v37;
  uint64_t v39;

  switch(swift_getEnumCaseMultiPayload(v2, v3))
  {
    case 0u:
      v5 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(v1, v2, v5);
      v6 = v1;
      v7 = v3;
      v8 = 0;
      goto LABEL_12;
    case 1u:
      v9 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v1, v2, v9);
      v6 = v1;
      v7 = v3;
      v8 = 1;
      goto LABEL_12;
    case 2u:
      v10 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v1, v2, v10);
      v11 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
      v12 = (_QWORD *)((char *)v1 + v11);
      v13 = (_QWORD *)((char *)v2 + v11);
      v14 = v13[1];
      *v12 = *v13;
      v12[1] = v14;
      swift_bridgeObjectRetain(v14);
      v6 = v1;
      v7 = v3;
      v8 = 2;
      goto LABEL_12;
    case 3u:
      v15 = v2[1];
      *v1 = *v2;
      v1[1] = v15;
      v16 = v2[3];
      v1[2] = v2[2];
      v1[3] = v16;
      v17 = v2[5];
      v1[4] = v2[4];
      v1[5] = v17;
      v18 = v2[7];
      v1[6] = v2[6];
      v1[7] = v18;
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v18);
      v6 = v1;
      v7 = v3;
      v8 = 3;
      goto LABEL_12;
    case 4u:
      v19 = v2[1];
      *v1 = *v2;
      v1[1] = v19;
      v20 = v2[3];
      v1[2] = v2[2];
      v1[3] = v20;
      v21 = v2[5];
      v1[4] = v2[4];
      v1[5] = v21;
      v1[6] = v2[6];
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRetain(v21);
      v6 = v1;
      v7 = v3;
      v8 = 4;
      goto LABEL_12;
    case 5u:
      v39 = v4;
      v22 = v2[1];
      *v1 = *v2;
      v1[1] = v22;
      v23 = v2[3];
      v1[2] = v2[2];
      v1[3] = v23;
      v24 = (void *)v2[4];
      v25 = v2[5];
      v1[4] = v24;
      v1[5] = v25;
      v26 = v2[9];
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v23);
      v27 = v24;
      swift_bridgeObjectRetain(v25);
      if (v26)
      {
        v1[9] = v26;
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v26 - 8))((uint64_t)(v1 + 6), (uint64_t)(v2 + 6), v26);
      }
      else
      {
        v28 = *((_OWORD *)v2 + 4);
        *((_OWORD *)v1 + 3) = *((_OWORD *)v2 + 3);
        *((_OWORD *)v1 + 4) = v28;
      }
      v4 = v39;
      v6 = v1;
      v7 = v3;
      v8 = 5;
LABEL_12:
      swift_storeEnumTagMultiPayload(v6, v7, v8);
      break;
    default:
      memcpy(v1, v2, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
      break;
  }
  v29 = type metadata accessor for PrimarySettingsListAppleAccountLinkModel(0);
  v30 = *(int *)(v29 + 20);
  v31 = (char *)v1 + v30;
  v32 = (char *)v2 + v30;
  v33 = *((_QWORD *)v32 + 1);
  if (v33)
  {
    *(_QWORD *)v31 = *(_QWORD *)v32;
    *((_QWORD *)v31 + 1) = v33;
    v34 = *((_QWORD *)v32 + 3);
    *((_QWORD *)v31 + 2) = *((_QWORD *)v32 + 2);
    *((_QWORD *)v31 + 3) = v34;
    v31[32] = v32[32];
    v35 = (void *)*((_QWORD *)v32 + 5);
    *((_QWORD *)v31 + 5) = v35;
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v34);
    v36 = v35;
  }
  else
  {
    v37 = *((_OWORD *)v32 + 1);
    *(_OWORD *)v31 = *(_OWORD *)v32;
    *((_OWORD *)v31 + 1) = v37;
    *((_OWORD *)v31 + 2) = *((_OWORD *)v32 + 2);
  }
  *((_BYTE *)v1 + *(int *)(v29 + 24)) = *((_BYTE *)v2 + *(int *)(v29 + 24));
  swift_storeEnumTagMultiPayload(v1, v4, 0);
  return v0;
}

uint64_t sub_1000321C0(uint64_t result, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;

  v3 = (_QWORD *)result;
  if ((_QWORD *)result != a2)
  {
    sub_1000076B4(result, type metadata accessor for PrimarySettingsListItemIdentifier);
    v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(a2, v6))
    {
      case 0u:
        v7 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v3, a2, v7);
        v8 = v3;
        v9 = v6;
        v10 = 0;
        goto LABEL_13;
      case 1u:
        v11 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v3, a2, v11);
        v8 = v3;
        v9 = v6;
        v10 = 1;
        goto LABEL_13;
      case 2u:
        v12 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v3, a2, v12);
        v13 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v14 = (_QWORD *)((char *)v3 + v13);
        v15 = (_QWORD *)((char *)a2 + v13);
        *v14 = *v15;
        v16 = v15[1];
        v14[1] = v16;
        swift_bridgeObjectRetain(v16);
        v8 = v3;
        v9 = v6;
        v10 = 2;
        goto LABEL_13;
      case 3u:
        *v3 = *a2;
        v17 = a2[1];
        v3[1] = v17;
        v3[2] = a2[2];
        v18 = a2[3];
        v3[3] = v18;
        v3[4] = a2[4];
        v19 = a2[5];
        v3[5] = v19;
        v3[6] = a2[6];
        v20 = a2[7];
        v3[7] = v20;
        swift_bridgeObjectRetain(v17);
        swift_bridgeObjectRetain(v18);
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        v8 = v3;
        v9 = v6;
        v10 = 3;
        goto LABEL_13;
      case 4u:
        *v3 = *a2;
        v21 = a2[1];
        v3[1] = v21;
        v3[2] = a2[2];
        v22 = a2[3];
        v3[3] = v22;
        v3[4] = a2[4];
        v23 = a2[5];
        v3[5] = v23;
        v3[6] = a2[6];
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v22);
        swift_bridgeObjectRetain(v23);
        v8 = v3;
        v9 = v6;
        v10 = 4;
        goto LABEL_13;
      case 5u:
        *v3 = *a2;
        v24 = a2[1];
        v3[1] = v24;
        v3[2] = a2[2];
        v25 = a2[3];
        v3[3] = v25;
        v26 = (void *)a2[4];
        v3[4] = v26;
        v27 = a2[5];
        v3[5] = v27;
        v28 = a2[9];
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v25);
        v29 = v26;
        swift_bridgeObjectRetain(v27);
        if (v28)
        {
          v3[9] = v28;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v28 - 8))((uint64_t)(v3 + 6), (uint64_t)(a2 + 6), v28);
        }
        else
        {
          v30 = *((_OWORD *)a2 + 4);
          *((_OWORD *)v3 + 3) = *((_OWORD *)a2 + 3);
          *((_OWORD *)v3 + 4) = v30;
        }
        v8 = v3;
        v9 = v6;
        v10 = 5;
LABEL_13:
        swift_storeEnumTagMultiPayload(v8, v9, v10);
        break;
      default:
        memcpy(v3, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
        break;
    }
    v31 = *(int *)(a3 + 20);
    v32 = (char *)a2 + v31;
    sub_1000076B4((uint64_t)v3 + v31, type metadata accessor for PrimarySettingsListItemViewType);
    v33 = type metadata accessor for PrimarySettingsListItemViewType(0);
    v34 = (char *)&loc_1000324BC + 4 * byte_1001150B8[swift_getEnumCaseMultiPayload(v32, v33)];
    __asm { BR              X10 }
  }
  return result;
}

void sub_1000346E0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
  if (EnumCaseMultiPayload == 2)
  {
    v9 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
    v10 = sub_100004FC8(&qword_10015C420);
    *(_OWORD *)&a1[*(int *)(v10 + 48)] = *(_OWORD *)&a2[*(int *)(v10 + 48)];
    swift_storeEnumTagMultiPayload(a1, v6, 2);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v11 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    v8 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload(a1, v6, 0);
  }
  v12 = &a2[*(int *)(a3 + 20)];
  v13 = type metadata accessor for PrimarySettingsListItemViewType(0);
  v14 = (char *)sub_100034840 + 4 * byte_100115140[swift_getEnumCaseMultiPayload(v12, v13)];
  __asm { BR              X10 }
}

uint64_t sub_100034840()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  char *v3;
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v3, v4);
  if (EnumCaseMultiPayload == 2)
  {
    v7 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v2, v3, v7);
    v8 = sub_100004FC8(&qword_10015C420);
    *(_OWORD *)&v2[*(int *)(v8 + 48)] = *(_OWORD *)&v3[*(int *)(v8 + 48)];
    swift_storeEnumTagMultiPayload(v2, v4, 2);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v9 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v2, v3, v9);
    swift_storeEnumTagMultiPayload(v2, v4, 1);
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(v2, v3, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    v6 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v2, v3, v6);
    swift_storeEnumTagMultiPayload(v2, v4, 0);
  }
  v10 = type metadata accessor for PrimarySettingsListAppleAccountLinkModel(0);
  v11 = *(int *)(v10 + 20);
  v12 = &v2[v11];
  v13 = &v3[v11];
  v14 = *((_OWORD *)v13 + 1);
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *((_OWORD *)v12 + 1) = v14;
  *((_OWORD *)v12 + 2) = *((_OWORD *)v13 + 2);
  v2[*(int *)(v10 + 24)] = v3[*(int *)(v10 + 24)];
  swift_storeEnumTagMultiPayload(v2, v1, 0);
  return v0;
}

uint64_t sub_100035678(uint64_t result, char *a2, uint64_t a3)
{
  char *v3;
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;

  v3 = (char *)result;
  if ((char *)result != a2)
  {
    sub_1000076B4(result, type metadata accessor for PrimarySettingsListItemIdentifier);
    v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
    if (EnumCaseMultiPayload == 2)
    {
      v9 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v3, a2, v9);
      v10 = sub_100004FC8(&qword_10015C420);
      *(_OWORD *)&v3[*(int *)(v10 + 48)] = *(_OWORD *)&a2[*(int *)(v10 + 48)];
      swift_storeEnumTagMultiPayload(v3, v6, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v11 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v3, a2, v11);
      swift_storeEnumTagMultiPayload(v3, v6, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(v3, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      v8 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v3, a2, v8);
      swift_storeEnumTagMultiPayload(v3, v6, 0);
    }
    v12 = *(int *)(a3 + 20);
    v13 = &a2[v12];
    sub_1000076B4((uint64_t)&v3[v12], type metadata accessor for PrimarySettingsListItemViewType);
    v14 = type metadata accessor for PrimarySettingsListItemViewType(0);
    v15 = (char *)&loc_100035800 + 4 * byte_10011514A[swift_getEnumCaseMultiPayload(v13, v14)];
    __asm { BR              X10 }
  }
  return result;
}

uint64_t sub_100036638(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100036644);
}

uint64_t sub_100036644(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for PrimarySettingsListItemViewType(0);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_1000366B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000366C4);
}

uint64_t sub_1000366C4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for PrimarySettingsListItemViewType(0);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_100036740(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[2];

  result = type metadata accessor for PrimarySettingsListItemIdentifier(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for PrimarySettingsListItemViewType(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000367C4()
{
  return sub_100007828((unint64_t *)&qword_100158000, type metadata accessor for PrimarySettingsListItemIdentifier, (uint64_t)&unk_1001188B8);
}

unint64_t sub_1000367F4()
{
  unint64_t result;

  result = qword_100158008;
  if (!qword_100158008)
  {
    result = swift_getWitnessTable(&unk_100119A48, &type metadata for PrimarySettingsListSectionIdentifier);
    atomic_store(result, (unint64_t *)&qword_100158008);
  }
  return result;
}

uint64_t sub_100036838(uint64_t result, uint64_t a2, char a3)
{
  if (a3 != -1)
    return sub_10000BB54(result, a2, a3);
  return result;
}

uint64_t sub_10003684C()
{
  return sub_100007828((unint64_t *)&unk_10015BAD0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
}

uint64_t sub_100036878(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v3 = *(int *)(a3 + 32);
  v4 = *(_QWORD *)(a1 + v3);
  v5 = *(_QWORD *)(a2 + v3);
  if (v4 != v5)
    return v5 < v4;
  v7 = *(int *)(a3 + 24);
  v8 = a1 + v7;
  v9 = *(_QWORD *)(a1 + v7);
  v10 = *(_QWORD *)(v8 + 8);
  v11 = (_QWORD *)(a2 + v7);
  v12 = v11[1];
  if (v9 == *v11 && v10 == v12)
    return 0;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v9, v10, *v11, v12, 1);
}

BOOL sub_1000368CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char v13;

  v3 = *(int *)(a3 + 32);
  v4 = *(_QWORD *)(a2 + v3);
  v5 = *(_QWORD *)(a1 + v3);
  if (v4 == v5)
  {
    v7 = *(int *)(a3 + 24);
    v8 = *(_QWORD *)(a2 + v7);
    v9 = *(_QWORD *)(a2 + v7 + 8);
    v10 = (_QWORD *)(a1 + v7);
    v11 = v10[1];
    if (v8 == *v10 && v9 == v11)
      v13 = 0;
    else
      v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, *v10, v11, 1);
  }
  else
  {
    v13 = v5 < v4;
  }
  return (v13 & 1) == 0;
}

BOOL sub_100036938(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char v14;

  v3 = *(int *)(a3 + 32);
  v4 = *(_QWORD *)(a1 + v3);
  v5 = *(_QWORD *)(a2 + v3);
  if (v4 == v5)
  {
    v7 = *(int *)(a3 + 24);
    v8 = a1 + v7;
    v9 = *(_QWORD *)(a1 + v7);
    v10 = *(_QWORD *)(v8 + 8);
    v11 = (_QWORD *)(a2 + v7);
    v12 = v11[1];
    if (v9 == *v11 && v10 == v12)
      v14 = 0;
    else
      v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v10, *v11, v12, 1);
  }
  else
  {
    v14 = v5 < v4;
  }
  return (v14 & 1) == 0;
}

uint64_t sub_1000369A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v3 = *(int *)(a3 + 32);
  v4 = *(_QWORD *)(a2 + v3);
  v5 = *(_QWORD *)(a1 + v3);
  if (v4 != v5)
    return v5 < v4;
  v7 = *(int *)(a3 + 24);
  v8 = *(_QWORD *)(a2 + v7);
  v9 = *(_QWORD *)(a2 + v7 + 8);
  v10 = (_QWORD *)(a1 + v7);
  v11 = v10[1];
  if (v8 == *v10 && v9 == v11)
    return 0;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, *v10, v11, 1);
}

void sub_1000369F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v2 = v1;
  sub_10009FDA0();
  v4 = (int *)type metadata accessor for SearchResult(0);
  v5 = type metadata accessor for URL(0);
  v6 = sub_100007828((unint64_t *)&unk_10015BAD0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  dispatch thunk of Hashable.hash(into:)(a1, v5, v6);
  v7 = (uint64_t *)(v1 + v4[6]);
  v8 = *v7;
  v9 = v7[1];
  swift_bridgeObjectRetain(v9);
  String.hash(into:)(a1, v8, v9);
  swift_bridgeObjectRelease(v9);
  v10 = (uint64_t *)(v2 + v4[7]);
  v11 = v10[1];
  if (v11)
  {
    v12 = *v10;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v11);
    String.hash(into:)(a1, v12, v11);
    swift_bridgeObjectRelease(v11);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(*(_QWORD *)(v2 + v4[8]));
  __asm { BR              X10 }
}

void sub_100036B18()
{
  Hasher._combine(_:)(1uLL);
}

void sub_100036B68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v0, v1, v2);
  JUMPOUT(0x100036B8CLL);
}

Swift::Int sub_100036BA4()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  sub_1000369F8((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_100036BE4(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  sub_1000369F8((uint64_t)v2);
  return Hasher._finalize()();
}

uint64_t sub_100036C1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 20);
  v5 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_100036C5C()
{
  return sub_100007828(&qword_100158010, type metadata accessor for SearchResult, (uint64_t)&unk_100115450);
}

uint64_t type metadata accessor for SearchResult(uint64_t a1)
{
  uint64_t result;

  result = qword_100158070;
  if (!qword_100158070)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SearchResult);
  return result;
}

uint64_t sub_100036CC4(uint64_t a1, uint64_t a2)
{
  char v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  BOOL v11;
  char v12;
  uint64_t result;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char v20;

  sub_1000A103C(a1, a2);
  if ((v4 & 1) == 0)
    return 0;
  v5 = (int *)type metadata accessor for SearchResult(0);
  if ((static URL.== infix(_:_:)(a1 + v5[5], a2 + v5[5]) & 1) == 0)
    return 0;
  v6 = v5[6];
  v7 = *(_QWORD *)(a1 + v6);
  v8 = *(_QWORD *)(a1 + v6 + 8);
  v9 = (_QWORD *)(a2 + v6);
  v10 = v9[1];
  v11 = v7 == *v9 && v8 == v10;
  if (v11 || (v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, *v9, v10, 0), result = 0, (v12 & 1) != 0))
  {
    v14 = v5[7];
    v15 = (_QWORD *)(a1 + v14);
    v16 = *(_QWORD *)(a1 + v14 + 8);
    v17 = (_QWORD *)(a2 + v14);
    v18 = v17[1];
    if (v16)
    {
      if (v18)
      {
        if (*v15 != *v17 || v16 != v18)
        {
          v20 = _stringCompareWithSmolCheck(_:_:expecting:)(*v15, v16, *v17, v18, 0);
          result = 0;
          if ((v20 & 1) == 0)
            return result;
        }
        goto LABEL_17;
      }
    }
    else if (!v18)
    {
LABEL_17:
      if (*(_QWORD *)(a1 + v5[8]) == *(_QWORD *)(a2 + v5[8]))
        __asm { BR              X11 }
    }
    return 0;
  }
  return result;
}

_QWORD *sub_100036E9C(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  id v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(a2, v7))
    {
      case 0u:
        v8 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
        v9 = a1;
        v10 = v7;
        v11 = 0;
        goto LABEL_14;
      case 1u:
        v13 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
        v9 = a1;
        v10 = v7;
        v11 = 1;
        goto LABEL_14;
      case 2u:
        v14 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
        v15 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v16 = (_QWORD *)((char *)a1 + v15);
        v17 = (_QWORD *)((char *)a2 + v15);
        v18 = v17[1];
        *v16 = *v17;
        v16[1] = v18;
        swift_bridgeObjectRetain(v18);
        v9 = a1;
        v10 = v7;
        v11 = 2;
        goto LABEL_14;
      case 3u:
        v19 = a2[1];
        *a1 = *a2;
        a1[1] = v19;
        v20 = a2[3];
        a1[2] = a2[2];
        a1[3] = v20;
        v21 = a2[5];
        a1[4] = a2[4];
        a1[5] = v21;
        v22 = a2[7];
        a1[6] = a2[6];
        a1[7] = v22;
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v22);
        v9 = a1;
        v10 = v7;
        v11 = 3;
        goto LABEL_14;
      case 4u:
        v23 = a2[1];
        *a1 = *a2;
        a1[1] = v23;
        v24 = a2[3];
        a1[2] = a2[2];
        a1[3] = v24;
        v25 = a2[5];
        a1[4] = a2[4];
        a1[5] = v25;
        a1[6] = a2[6];
        swift_bridgeObjectRetain(v23);
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v25);
        v9 = a1;
        v10 = v7;
        v11 = 4;
        goto LABEL_14;
      case 5u:
        v26 = a2[1];
        *a1 = *a2;
        a1[1] = v26;
        v27 = a2[3];
        a1[2] = a2[2];
        a1[3] = v27;
        v29 = (void *)a2[4];
        v28 = a2[5];
        a1[4] = v29;
        a1[5] = v28;
        v30 = a2[9];
        swift_bridgeObjectRetain(v26);
        swift_bridgeObjectRetain(v27);
        v31 = v29;
        swift_bridgeObjectRetain(v28);
        if (v30)
        {
          a1[9] = v30;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v30 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v30);
        }
        else
        {
          v32 = *((_OWORD *)a2 + 4);
          *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
          *((_OWORD *)a1 + 4) = v32;
        }
        v9 = a1;
        v10 = v7;
        v11 = 5;
LABEL_14:
        swift_storeEnumTagMultiPayload(v9, v10, v11);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
        break;
    }
    v33 = a3[5];
    v34 = (char *)a1 + v33;
    v35 = (char *)a2 + v33;
    v36 = type metadata accessor for URL(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v34, v35, v36);
    v37 = a3[6];
    v38 = a3[7];
    v39 = (_QWORD *)((char *)a1 + v37);
    v40 = (_QWORD *)((char *)a2 + v37);
    v41 = v40[1];
    *v39 = *v40;
    v39[1] = v41;
    v42 = (_QWORD *)((char *)a1 + v38);
    v43 = (_QWORD *)((char *)a2 + v38);
    v44 = v43[1];
    *v42 = *v43;
    v42[1] = v44;
    v45 = a3[9];
    *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
    v46 = (char *)a1 + v45;
    v47 = (char *)a2 + v45;
    v48 = *(_QWORD *)((char *)a2 + v45);
    v49 = *((_QWORD *)v47 + 1);
    LOBYTE(v35) = v47[16];
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRetain(v44);
    sub_10000BB2C(v48, v49, (char)v35);
    *(_QWORD *)v46 = v48;
    *((_QWORD *)v46 + 1) = v49;
    v46[16] = (char)v35;
  }
  return a1;
}

uint64_t sub_1000371B0(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(a1, v4))
  {
    case 0u:
    case 1u:
      v5 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
      break;
    case 2u:
      v6 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
      v7 = sub_100004FC8(&qword_10015C420);
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v7 + 48) + 8));
      break;
    case 3u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
      break;
    case 4u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      break;
    case 5u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));

      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      if (*(_QWORD *)(a1 + 72))
        sub_100005474((_QWORD *)(a1 + 48));
      break;
    default:
      break;
  }
  v8 = a1 + a2[5];
  v9 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8));
  return sub_10000BB54(*(_QWORD *)(a1 + a2[9]), *(_QWORD *)(a1 + a2[9] + 8), *(_BYTE *)(a1 + a2[9] + 16));
}

_QWORD *sub_100037330(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;

  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(a2, v6))
  {
    case 0u:
      v7 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 0;
      goto LABEL_12;
    case 1u:
      v11 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      v8 = a1;
      v9 = v6;
      v10 = 1;
      goto LABEL_12;
    case 2u:
      v12 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
      v13 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
      v14 = (_QWORD *)((char *)a1 + v13);
      v15 = (_QWORD *)((char *)a2 + v13);
      v16 = v15[1];
      *v14 = *v15;
      v14[1] = v16;
      swift_bridgeObjectRetain(v16);
      v8 = a1;
      v9 = v6;
      v10 = 2;
      goto LABEL_12;
    case 3u:
      v17 = a2[1];
      *a1 = *a2;
      a1[1] = v17;
      v18 = a2[3];
      a1[2] = a2[2];
      a1[3] = v18;
      v19 = a2[5];
      a1[4] = a2[4];
      a1[5] = v19;
      v20 = a2[7];
      a1[6] = a2[6];
      a1[7] = v20;
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v20);
      v8 = a1;
      v9 = v6;
      v10 = 3;
      goto LABEL_12;
    case 4u:
      v21 = a2[1];
      *a1 = *a2;
      a1[1] = v21;
      v22 = a2[3];
      a1[2] = a2[2];
      a1[3] = v22;
      v23 = a2[5];
      a1[4] = a2[4];
      a1[5] = v23;
      a1[6] = a2[6];
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v23);
      v8 = a1;
      v9 = v6;
      v10 = 4;
      goto LABEL_12;
    case 5u:
      v24 = a2[1];
      *a1 = *a2;
      a1[1] = v24;
      v25 = a2[3];
      a1[2] = a2[2];
      a1[3] = v25;
      v27 = (void *)a2[4];
      v26 = a2[5];
      a1[4] = v27;
      a1[5] = v26;
      v28 = a2[9];
      swift_bridgeObjectRetain(v24);
      swift_bridgeObjectRetain(v25);
      v29 = v27;
      swift_bridgeObjectRetain(v26);
      if (v28)
      {
        a1[9] = v28;
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v28 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v28);
      }
      else
      {
        v30 = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 4) = v30;
      }
      v8 = a1;
      v9 = v6;
      v10 = 5;
LABEL_12:
      swift_storeEnumTagMultiPayload(v8, v9, v10);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      break;
  }
  v31 = a3[5];
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v32, v33, v34);
  v35 = a3[6];
  v36 = a3[7];
  v37 = (_QWORD *)((char *)a1 + v35);
  v38 = (_QWORD *)((char *)a2 + v35);
  v39 = v38[1];
  *v37 = *v38;
  v37[1] = v39;
  v40 = (_QWORD *)((char *)a1 + v36);
  v41 = (_QWORD *)((char *)a2 + v36);
  v42 = v41[1];
  *v40 = *v41;
  v40[1] = v42;
  v43 = a3[9];
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  v44 = (char *)a1 + v43;
  v45 = (char *)a2 + v43;
  v46 = *(_QWORD *)((char *)a2 + v43);
  v47 = *((_QWORD *)v45 + 1);
  LOBYTE(v33) = v45[16];
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRetain(v42);
  sub_10000BB2C(v46, v47, (char)v33);
  *(_QWORD *)v44 = v46;
  *((_QWORD *)v44 + 1) = v47;
  v44[16] = (char)v33;
  return a1;
}

_QWORD *sub_100037618(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;

  if (a1 != a2)
  {
    sub_100013014((uint64_t)a1);
    v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(a2, v6))
    {
      case 0u:
        v7 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
        v8 = a1;
        v9 = v6;
        v10 = 0;
        goto LABEL_13;
      case 1u:
        v11 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
        v8 = a1;
        v9 = v6;
        v10 = 1;
        goto LABEL_13;
      case 2u:
        v12 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
        v13 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v14 = (_QWORD *)((char *)a1 + v13);
        v15 = (_QWORD *)((char *)a2 + v13);
        *v14 = *v15;
        v16 = v15[1];
        v14[1] = v16;
        swift_bridgeObjectRetain(v16);
        v8 = a1;
        v9 = v6;
        v10 = 2;
        goto LABEL_13;
      case 3u:
        *a1 = *a2;
        v17 = a2[1];
        a1[1] = v17;
        a1[2] = a2[2];
        v18 = a2[3];
        a1[3] = v18;
        a1[4] = a2[4];
        v19 = a2[5];
        a1[5] = v19;
        a1[6] = a2[6];
        v20 = a2[7];
        a1[7] = v20;
        swift_bridgeObjectRetain(v17);
        swift_bridgeObjectRetain(v18);
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        v8 = a1;
        v9 = v6;
        v10 = 3;
        goto LABEL_13;
      case 4u:
        *a1 = *a2;
        v21 = a2[1];
        a1[1] = v21;
        a1[2] = a2[2];
        v22 = a2[3];
        a1[3] = v22;
        a1[4] = a2[4];
        v23 = a2[5];
        a1[5] = v23;
        a1[6] = a2[6];
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v22);
        swift_bridgeObjectRetain(v23);
        v8 = a1;
        v9 = v6;
        v10 = 4;
        goto LABEL_13;
      case 5u:
        *a1 = *a2;
        v24 = a2[1];
        a1[1] = v24;
        a1[2] = a2[2];
        v25 = a2[3];
        a1[3] = v25;
        v26 = (void *)a2[4];
        a1[4] = v26;
        v27 = a2[5];
        a1[5] = v27;
        v28 = a2[9];
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v25);
        v29 = v26;
        swift_bridgeObjectRetain(v27);
        if (v28)
        {
          a1[9] = v28;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v28 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v28);
        }
        else
        {
          v30 = *((_OWORD *)a2 + 4);
          *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
          *((_OWORD *)a1 + 4) = v30;
        }
        v8 = a1;
        v9 = v6;
        v10 = 5;
LABEL_13:
        swift_storeEnumTagMultiPayload(v8, v9, v10);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
        break;
    }
  }
  v31 = a3[5];
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 24))(v32, v33, v34);
  v35 = a3[6];
  v36 = (_QWORD *)((char *)a1 + v35);
  v37 = (_QWORD *)((char *)a2 + v35);
  *v36 = *v37;
  v38 = v37[1];
  v39 = v36[1];
  v36[1] = v38;
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRelease(v39);
  v40 = a3[7];
  v41 = (_QWORD *)((char *)a1 + v40);
  v42 = (_QWORD *)((char *)a2 + v40);
  *v41 = *v42;
  v43 = v42[1];
  v44 = v41[1];
  v41[1] = v43;
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRelease(v44);
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  v45 = a3[9];
  v46 = (char *)a1 + v45;
  v47 = (char *)a2 + v45;
  v48 = *(_QWORD *)v47;
  v49 = *((_QWORD *)v47 + 1);
  LOBYTE(v44) = v47[16];
  sub_10000BB2C(*(_QWORD *)v47, v49, v44);
  v50 = *(_QWORD *)v46;
  v51 = *((_QWORD *)v46 + 1);
  *(_QWORD *)v46 = v48;
  *((_QWORD *)v46 + 1) = v49;
  v52 = v46[16];
  v46[16] = v44;
  sub_10000BB54(v50, v51, v52);
  return a1;
}

char *sub_1000379A0(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;

  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
  if (EnumCaseMultiPayload == 2)
  {
    v9 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
    v10 = sub_100004FC8(&qword_10015C420);
    *(_OWORD *)&a1[*(int *)(v10 + 48)] = *(_OWORD *)&a2[*(int *)(v10 + 48)];
    swift_storeEnumTagMultiPayload(a1, v6, 2);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v11 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    v8 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload(a1, v6, 0);
  }
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
  v16 = a3[7];
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  *(_OWORD *)&a1[v16] = *(_OWORD *)&a2[v16];
  v17 = a3[9];
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  v18 = &a1[v17];
  v19 = &a2[v17];
  *(_OWORD *)v18 = *(_OWORD *)v19;
  v18[16] = v19[16];
  return a1;
}

char *sub_100037B30(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;

  if (a1 != a2)
  {
    sub_100013014((uint64_t)a1);
    v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
    if (EnumCaseMultiPayload == 2)
    {
      v9 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      v10 = sub_100004FC8(&qword_10015C420);
      *(_OWORD *)&a1[*(int *)(v10 + 48)] = *(_OWORD *)&a2[*(int *)(v10 + 48)];
      swift_storeEnumTagMultiPayload(a1, v6, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v11 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      v8 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload(a1, v6, 0);
    }
  }
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  v16 = a3[6];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v20 = *(_QWORD *)v18;
  v19 = *((_QWORD *)v18 + 1);
  v21 = *((_QWORD *)v17 + 1);
  *(_QWORD *)v17 = v20;
  *((_QWORD *)v17 + 1) = v19;
  swift_bridgeObjectRelease(v21);
  v22 = a3[7];
  v23 = &a1[v22];
  v24 = &a2[v22];
  v26 = *(_QWORD *)v24;
  v25 = *((_QWORD *)v24 + 1);
  v27 = *((_QWORD *)v23 + 1);
  *(_QWORD *)v23 = v26;
  *((_QWORD *)v23 + 1) = v25;
  swift_bridgeObjectRelease(v27);
  v28 = a3[9];
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  v29 = &a1[v28];
  v30 = &a2[v28];
  v31 = v30[16];
  v32 = *(_QWORD *)v29;
  v33 = *((_QWORD *)v29 + 1);
  *(_OWORD *)v29 = *(_OWORD *)v30;
  v34 = v29[16];
  v29[16] = v31;
  sub_10000BB54(v32, v33, v34);
  return a1;
}

uint64_t sub_100037D00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100037D0C);
}

uint64_t sub_100037D0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_100037DB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100037DC4);
}

uint64_t sub_100037DC4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_100037E6C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[6];

  result = type metadata accessor for PrimarySettingsListItemIdentifier(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for URL(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      v5[2] = &unk_1001154D8;
      v5[3] = &unk_1001154F0;
      v5[4] = (char *)&value witness table for Builtin.Int64 + 64;
      v5[5] = &unk_100115508;
      swift_initStructMetadata(a1, 256, 6, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

BOOL sub_100037F20(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  _BOOL4 v16;

  sub_1000A103C(a1, a2);
  if ((v4 & 1) == 0)
    return 0;
  v5 = type metadata accessor for PrimarySettingsListValueLinkModel(0);
  if (*(unsigned __int8 *)(a1 + *(int *)(v5 + 20)) != *(unsigned __int8 *)(a2 + *(int *)(v5 + 20)))
    return 0;
  v6 = (int *)v5;
  v7 = *(int *)(v5 + 24);
  if ((static Text.== infix(_:_:)(*(_QWORD *)(a1 + v7), *(_QWORD *)(a1 + v7 + 8), *(unsigned __int8 *)(a1 + v7 + 16), *(_QWORD *)(a1 + v7 + 24), *(_QWORD *)(a2 + v7), *(_QWORD *)(a2 + v7 + 8), *(unsigned __int8 *)(a2 + v7 + 16), *(_QWORD *)(a2 + v7 + 24)) & 1) == 0)return 0;
  v8 = v6[7];
  if ((static Text.== infix(_:_:)(*(_QWORD *)(a1 + v8), *(_QWORD *)(a1 + v8 + 8), *(unsigned __int8 *)(a1 + v8 + 16), *(_QWORD *)(a1 + v8 + 24), *(_QWORD *)(a2 + v8), *(_QWORD *)(a2 + v8 + 8), *(unsigned __int8 *)(a2 + v8 + 16), *(_QWORD *)(a2 + v8 + 24)) & 1) == 0)return 0;
  v9 = v6[8];
  v10 = *(unsigned __int8 *)(a1 + v9 + 16);
  v11 = *(unsigned __int8 *)(a2 + v9 + 16);
  if ((_DWORD)v10 != 255)
  {
    if (v11 != 255)
      __asm { BR              X11 }
    return 0;
  }
  if (v11 != 255)
    return 0;
  v12 = v6[9];
  v13 = *(unsigned __int8 *)(a1 + v12);
  v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 != 2)
  {
    v16 = (v13 & 1) == 0;
    return v14 != 2 && ((v16 ^ v14) & 1) != 0;
  }
  return v14 == 2;
}

uint64_t type metadata accessor for PrimarySettingsListValueLinkModel(uint64_t a1)
{
  uint64_t result;

  result = qword_100158110;
  if (!qword_100158110)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PrimarySettingsListValueLinkModel);
  return result;
}

_QWORD *sub_100038170(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  id v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(a2, v7))
    {
      case 0u:
        v8 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
        v9 = a1;
        v10 = v7;
        v11 = 0;
        goto LABEL_14;
      case 1u:
        v13 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
        v9 = a1;
        v10 = v7;
        v11 = 1;
        goto LABEL_14;
      case 2u:
        v14 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
        v15 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v16 = (_QWORD *)((char *)a1 + v15);
        v17 = (_QWORD *)((char *)a2 + v15);
        v18 = v17[1];
        *v16 = *v17;
        v16[1] = v18;
        swift_bridgeObjectRetain(v18);
        v9 = a1;
        v10 = v7;
        v11 = 2;
        goto LABEL_14;
      case 3u:
        v19 = a2[1];
        *a1 = *a2;
        a1[1] = v19;
        v20 = a2[3];
        a1[2] = a2[2];
        a1[3] = v20;
        v21 = a2[5];
        a1[4] = a2[4];
        a1[5] = v21;
        v22 = a2[7];
        a1[6] = a2[6];
        a1[7] = v22;
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v22);
        v9 = a1;
        v10 = v7;
        v11 = 3;
        goto LABEL_14;
      case 4u:
        v23 = a2[1];
        *a1 = *a2;
        a1[1] = v23;
        v24 = a2[3];
        a1[2] = a2[2];
        a1[3] = v24;
        v25 = a2[5];
        a1[4] = a2[4];
        a1[5] = v25;
        a1[6] = a2[6];
        swift_bridgeObjectRetain(v23);
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v25);
        v9 = a1;
        v10 = v7;
        v11 = 4;
        goto LABEL_14;
      case 5u:
        v26 = a2[1];
        *a1 = *a2;
        a1[1] = v26;
        v27 = a2[3];
        a1[2] = a2[2];
        a1[3] = v27;
        v29 = (void *)a2[4];
        v28 = a2[5];
        a1[4] = v29;
        a1[5] = v28;
        v30 = a2[9];
        swift_bridgeObjectRetain(v26);
        swift_bridgeObjectRetain(v27);
        v31 = v29;
        swift_bridgeObjectRetain(v28);
        if (v30)
        {
          a1[9] = v30;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v30 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v30);
        }
        else
        {
          v32 = *((_OWORD *)a2 + 4);
          *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
          *((_OWORD *)a1 + 4) = v32;
        }
        v9 = a1;
        v10 = v7;
        v11 = 5;
LABEL_14:
        swift_storeEnumTagMultiPayload(v9, v10, v11);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
        break;
    }
    v33 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    v34 = (char *)a1 + v33;
    v35 = (char *)a2 + v33;
    v36 = *(_QWORD *)((char *)a2 + v33);
    v37 = *(_QWORD *)((char *)a2 + v33 + 8);
    v38 = *((_BYTE *)a2 + v33 + 16);
    sub_10000BAD4(v36, v37, v38);
    *(_QWORD *)v34 = v36;
    *((_QWORD *)v34 + 1) = v37;
    v34[16] = v38;
    v39 = *((_QWORD *)v35 + 3);
    *((_QWORD *)v34 + 3) = v39;
    v40 = a3[7];
    v41 = (char *)a1 + v40;
    v42 = (char *)a2 + v40;
    v43 = *(_QWORD *)((char *)a2 + v40);
    v44 = *(_QWORD *)((char *)a2 + v40 + 8);
    v45 = *((_BYTE *)a2 + v40 + 16);
    swift_bridgeObjectRetain(v39);
    sub_10000BAD4(v43, v44, v45);
    *(_QWORD *)v41 = v43;
    *((_QWORD *)v41 + 1) = v44;
    v41[16] = v45;
    v46 = *((_QWORD *)v42 + 3);
    *((_QWORD *)v41 + 3) = v46;
    v47 = a3[8];
    v48 = (char *)a1 + v47;
    v49 = (char *)a2 + v47;
    v50 = *((unsigned __int8 *)a2 + v47 + 16);
    swift_bridgeObjectRetain(v46);
    if (v50 == 255)
    {
      *(_OWORD *)v48 = *(_OWORD *)v49;
      v48[16] = v49[16];
    }
    else
    {
      v51 = *(_QWORD *)v49;
      v52 = *((_QWORD *)v49 + 1);
      sub_10000BB2C(v51, v52, v50);
      *(_QWORD *)v48 = v51;
      *((_QWORD *)v48 + 1) = v52;
      v48[16] = v50;
    }
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  }
  return a1;
}

uint64_t sub_1000384C0(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  int v12;

  v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(a1, v4))
  {
    case 0u:
    case 1u:
      v5 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
      break;
    case 2u:
      v6 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
      v7 = sub_100004FC8(&qword_10015C420);
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v7 + 48) + 8));
      break;
    case 3u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
      break;
    case 4u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      break;
    case 5u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));

      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      if (*(_QWORD *)(a1 + 72))
        sub_100005474((_QWORD *)(a1 + 48));
      break;
    default:
      break;
  }
  v8 = a1 + a2[6];
  sub_100007618(*(_QWORD *)v8, *(_QWORD *)(v8 + 8), *(_BYTE *)(v8 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v8 + 24));
  v9 = a1 + a2[7];
  sub_100007618(*(_QWORD *)v9, *(_QWORD *)(v9 + 8), *(_BYTE *)(v9 + 16));
  result = swift_bridgeObjectRelease(*(_QWORD *)(v9 + 24));
  v11 = a1 + a2[8];
  v12 = *(unsigned __int8 *)(v11 + 16);
  if (v12 != 255)
    return sub_10000BB54(*(_QWORD *)v11, *(_QWORD *)(v11 + 8), v12);
  return result;
}

_QWORD *sub_10003864C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;

  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(a2, v6))
  {
    case 0u:
      v7 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 0;
      goto LABEL_12;
    case 1u:
      v11 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      v8 = a1;
      v9 = v6;
      v10 = 1;
      goto LABEL_12;
    case 2u:
      v12 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
      v13 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
      v14 = (_QWORD *)((char *)a1 + v13);
      v15 = (_QWORD *)((char *)a2 + v13);
      v16 = v15[1];
      *v14 = *v15;
      v14[1] = v16;
      swift_bridgeObjectRetain(v16);
      v8 = a1;
      v9 = v6;
      v10 = 2;
      goto LABEL_12;
    case 3u:
      v17 = a2[1];
      *a1 = *a2;
      a1[1] = v17;
      v18 = a2[3];
      a1[2] = a2[2];
      a1[3] = v18;
      v19 = a2[5];
      a1[4] = a2[4];
      a1[5] = v19;
      v20 = a2[7];
      a1[6] = a2[6];
      a1[7] = v20;
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v20);
      v8 = a1;
      v9 = v6;
      v10 = 3;
      goto LABEL_12;
    case 4u:
      v21 = a2[1];
      *a1 = *a2;
      a1[1] = v21;
      v22 = a2[3];
      a1[2] = a2[2];
      a1[3] = v22;
      v23 = a2[5];
      a1[4] = a2[4];
      a1[5] = v23;
      a1[6] = a2[6];
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v23);
      v8 = a1;
      v9 = v6;
      v10 = 4;
      goto LABEL_12;
    case 5u:
      v24 = a2[1];
      *a1 = *a2;
      a1[1] = v24;
      v25 = a2[3];
      a1[2] = a2[2];
      a1[3] = v25;
      v27 = (void *)a2[4];
      v26 = a2[5];
      a1[4] = v27;
      a1[5] = v26;
      v28 = a2[9];
      swift_bridgeObjectRetain(v24);
      swift_bridgeObjectRetain(v25);
      v29 = v27;
      swift_bridgeObjectRetain(v26);
      if (v28)
      {
        a1[9] = v28;
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v28 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v28);
      }
      else
      {
        v30 = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 4) = v30;
      }
      v8 = a1;
      v9 = v6;
      v10 = 5;
LABEL_12:
      swift_storeEnumTagMultiPayload(v8, v9, v10);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      break;
  }
  v31 = a3[6];
  *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = *(_QWORD *)((char *)a2 + v31);
  v35 = *(_QWORD *)((char *)a2 + v31 + 8);
  v36 = *((_BYTE *)a2 + v31 + 16);
  sub_10000BAD4(v34, v35, v36);
  *(_QWORD *)v32 = v34;
  *((_QWORD *)v32 + 1) = v35;
  v32[16] = v36;
  v37 = *((_QWORD *)v33 + 3);
  *((_QWORD *)v32 + 3) = v37;
  v38 = a3[7];
  v39 = (char *)a1 + v38;
  v40 = (char *)a2 + v38;
  v41 = *(_QWORD *)((char *)a2 + v38);
  v42 = *(_QWORD *)((char *)a2 + v38 + 8);
  v43 = *((_BYTE *)a2 + v38 + 16);
  swift_bridgeObjectRetain(v37);
  sub_10000BAD4(v41, v42, v43);
  *(_QWORD *)v39 = v41;
  *((_QWORD *)v39 + 1) = v42;
  v39[16] = v43;
  v44 = *((_QWORD *)v40 + 3);
  *((_QWORD *)v39 + 3) = v44;
  v45 = a3[8];
  v46 = (char *)a1 + v45;
  v47 = (char *)a2 + v45;
  v48 = *((unsigned __int8 *)a2 + v45 + 16);
  swift_bridgeObjectRetain(v44);
  if (v48 == 255)
  {
    *(_OWORD *)v46 = *(_OWORD *)v47;
    v46[16] = v47[16];
  }
  else
  {
    v49 = *(_QWORD *)v47;
    v50 = *((_QWORD *)v47 + 1);
    sub_10000BB2C(v49, v50, v48);
    *(_QWORD *)v46 = v49;
    *((_QWORD *)v46 + 1) = v50;
    v46[16] = v48;
  }
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  return a1;
}

_QWORD *sub_100038970(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  __int128 v65;

  if (a1 != a2)
  {
    sub_100013014((uint64_t)a1);
    v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(a2, v6))
    {
      case 0u:
        v7 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
        v8 = a1;
        v9 = v6;
        v10 = 0;
        goto LABEL_13;
      case 1u:
        v11 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
        v8 = a1;
        v9 = v6;
        v10 = 1;
        goto LABEL_13;
      case 2u:
        v12 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
        v13 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v14 = (_QWORD *)((char *)a1 + v13);
        v15 = (_QWORD *)((char *)a2 + v13);
        *v14 = *v15;
        v16 = v15[1];
        v14[1] = v16;
        swift_bridgeObjectRetain(v16);
        v8 = a1;
        v9 = v6;
        v10 = 2;
        goto LABEL_13;
      case 3u:
        *a1 = *a2;
        v17 = a2[1];
        a1[1] = v17;
        a1[2] = a2[2];
        v18 = a2[3];
        a1[3] = v18;
        a1[4] = a2[4];
        v19 = a2[5];
        a1[5] = v19;
        a1[6] = a2[6];
        v20 = a2[7];
        a1[7] = v20;
        swift_bridgeObjectRetain(v17);
        swift_bridgeObjectRetain(v18);
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        v8 = a1;
        v9 = v6;
        v10 = 3;
        goto LABEL_13;
      case 4u:
        *a1 = *a2;
        v21 = a2[1];
        a1[1] = v21;
        a1[2] = a2[2];
        v22 = a2[3];
        a1[3] = v22;
        a1[4] = a2[4];
        v23 = a2[5];
        a1[5] = v23;
        a1[6] = a2[6];
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v22);
        swift_bridgeObjectRetain(v23);
        v8 = a1;
        v9 = v6;
        v10 = 4;
        goto LABEL_13;
      case 5u:
        *a1 = *a2;
        v24 = a2[1];
        a1[1] = v24;
        a1[2] = a2[2];
        v25 = a2[3];
        a1[3] = v25;
        v26 = (void *)a2[4];
        a1[4] = v26;
        v27 = a2[5];
        a1[5] = v27;
        v28 = a2[9];
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v25);
        v29 = v26;
        swift_bridgeObjectRetain(v27);
        if (v28)
        {
          a1[9] = v28;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v28 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v28);
        }
        else
        {
          v30 = *((_OWORD *)a2 + 4);
          *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
          *((_OWORD *)a1 + 4) = v30;
        }
        v8 = a1;
        v9 = v6;
        v10 = 5;
LABEL_13:
        swift_storeEnumTagMultiPayload(v8, v9, v10);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
        break;
    }
  }
  *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
  v31 = a3[6];
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = *(_QWORD *)((char *)a2 + v31);
  v35 = *(_QWORD *)((char *)a2 + v31 + 8);
  v36 = *((_BYTE *)a2 + v31 + 16);
  sub_10000BAD4(v34, v35, v36);
  v37 = *(_QWORD *)v32;
  v38 = *((_QWORD *)v32 + 1);
  v39 = v32[16];
  *(_QWORD *)v32 = v34;
  *((_QWORD *)v32 + 1) = v35;
  v32[16] = v36;
  sub_100007618(v37, v38, v39);
  v40 = *((_QWORD *)v33 + 3);
  v41 = *((_QWORD *)v32 + 3);
  *((_QWORD *)v32 + 3) = v40;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRelease(v41);
  v42 = a3[7];
  v43 = (char *)a1 + v42;
  v44 = (char *)a2 + v42;
  v45 = *(_QWORD *)((char *)a2 + v42);
  v46 = *(_QWORD *)((char *)a2 + v42 + 8);
  v47 = *((_BYTE *)a2 + v42 + 16);
  sub_10000BAD4(v45, v46, v47);
  v48 = *(_QWORD *)v43;
  v49 = *((_QWORD *)v43 + 1);
  v50 = v43[16];
  *(_QWORD *)v43 = v45;
  *((_QWORD *)v43 + 1) = v46;
  v43[16] = v47;
  sub_100007618(v48, v49, v50);
  v51 = *((_QWORD *)v44 + 3);
  v52 = *((_QWORD *)v43 + 3);
  *((_QWORD *)v43 + 3) = v51;
  swift_bridgeObjectRetain(v51);
  swift_bridgeObjectRelease(v52);
  v53 = a3[8];
  v54 = (uint64_t)a1 + v53;
  v55 = (char *)a2 + v53;
  v56 = *((unsigned __int8 *)a2 + v53 + 16);
  if (*((unsigned __int8 *)a1 + v53 + 16) == 255)
  {
    if (v56 == 255)
    {
      v65 = *(_OWORD *)v55;
      *(_BYTE *)(v54 + 16) = v55[16];
      *(_OWORD *)v54 = v65;
    }
    else
    {
      v62 = *(_QWORD *)v55;
      v63 = *((_QWORD *)v55 + 1);
      sub_10000BB2C(v62, v63, v56);
      *(_QWORD *)v54 = v62;
      *(_QWORD *)(v54 + 8) = v63;
      *(_BYTE *)(v54 + 16) = v56;
    }
  }
  else if (v56 == 255)
  {
    sub_100010D24(v54);
    v64 = v55[16];
    *(_OWORD *)v54 = *(_OWORD *)v55;
    *(_BYTE *)(v54 + 16) = v64;
  }
  else
  {
    v57 = *(_QWORD *)v55;
    v58 = *((_QWORD *)v55 + 1);
    sub_10000BB2C(v57, v58, v56);
    v59 = *(_QWORD *)v54;
    v60 = *(_QWORD *)(v54 + 8);
    *(_QWORD *)v54 = v57;
    *(_QWORD *)(v54 + 8) = v58;
    v61 = *(_BYTE *)(v54 + 16);
    *(_BYTE *)(v54 + 16) = v56;
    sub_10000BB54(v59, v60, v61);
  }
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  return a1;
}

char *sub_100038D8C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  char *v21;
  char *v22;

  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
  if (EnumCaseMultiPayload == 2)
  {
    v9 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
    v10 = sub_100004FC8(&qword_10015C420);
    *(_OWORD *)&a1[*(int *)(v10 + 48)] = *(_OWORD *)&a2[*(int *)(v10 + 48)];
    swift_storeEnumTagMultiPayload(a1, v6, 2);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v11 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    v8 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload(a1, v6, 0);
  }
  v12 = a3[6];
  a1[a3[5]] = a2[a3[5]];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = *((_OWORD *)v14 + 1);
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *((_OWORD *)v13 + 1) = v15;
  v16 = a3[7];
  v17 = a3[8];
  v19 = *(_OWORD *)&a2[v16];
  v18 = *(_OWORD *)&a2[v16 + 16];
  v20 = &a1[v16];
  *(_OWORD *)v20 = v19;
  *((_OWORD *)v20 + 1) = v18;
  v21 = &a1[v17];
  v22 = &a2[v17];
  *(_OWORD *)v21 = *(_OWORD *)v22;
  v21[16] = v22[16];
  a1[a3[9]] = a2[a3[9]];
  return a1;
}

char *sub_100038F04(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;

  if (a1 != a2)
  {
    sub_100013014((uint64_t)a1);
    v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
    if (EnumCaseMultiPayload == 2)
    {
      v9 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      v10 = sub_100004FC8(&qword_10015C420);
      *(_OWORD *)&a1[*(int *)(v10 + 48)] = *(_OWORD *)&a2[*(int *)(v10 + 48)];
      swift_storeEnumTagMultiPayload(a1, v6, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v11 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      v8 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload(a1, v6, 0);
    }
  }
  v12 = a3[6];
  a1[a3[5]] = a2[a3[5]];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = a2[v12 + 16];
  v16 = *(_QWORD *)&a1[v12];
  v17 = *(_QWORD *)&a1[v12 + 8];
  v18 = a1[v12 + 16];
  *(_OWORD *)v13 = *(_OWORD *)&a2[v12];
  v13[16] = v15;
  sub_100007618(v16, v17, v18);
  v19 = *((_QWORD *)v13 + 3);
  *((_QWORD *)v13 + 3) = *((_QWORD *)v14 + 3);
  swift_bridgeObjectRelease(v19);
  v20 = a3[7];
  v21 = &a1[v20];
  v22 = &a2[v20];
  LOBYTE(v20) = a2[v20 + 16];
  v23 = *(_QWORD *)v21;
  v24 = *((_QWORD *)v21 + 1);
  v25 = v21[16];
  *(_OWORD *)v21 = *(_OWORD *)v22;
  v21[16] = v20;
  sub_100007618(v23, v24, v25);
  v26 = *((_QWORD *)v21 + 3);
  *((_QWORD *)v21 + 3) = *((_QWORD *)v22 + 3);
  swift_bridgeObjectRelease(v26);
  v27 = a3[8];
  v28 = (uint64_t)&a1[v27];
  v29 = &a2[v27];
  v30 = a1[v27 + 16];
  if (v30 == 255)
    goto LABEL_13;
  v31 = v29[16];
  if (v31 == 255)
  {
    sub_100010D24(v28);
LABEL_13:
    *(_OWORD *)v28 = *(_OWORD *)v29;
    *(_BYTE *)(v28 + 16) = v29[16];
    goto LABEL_14;
  }
  v32 = *(_QWORD *)v28;
  v33 = *(_QWORD *)(v28 + 8);
  *(_OWORD *)v28 = *(_OWORD *)v29;
  *(_BYTE *)(v28 + 16) = v31;
  sub_10000BB54(v32, v33, v30);
LABEL_14:
  a1[a3[9]] = a2[a3[9]];
  return a1;
}

uint64_t sub_100039118(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100039124);
}

uint64_t sub_100039124(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 24);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1000391A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000391B0);
}

uint64_t sub_1000391B0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 24) = (a2 - 1);
  return result;
}

uint64_t sub_10003922C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  result = type metadata accessor for PrimarySettingsListItemIdentifier(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100115588;
    v4[2] = &unk_1001155A0;
    v4[3] = &unk_1001155A0;
    v4[4] = &unk_1001155B8;
    v4[5] = &unk_1001155D0;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
    return 0;
  }
  return result;
}

_QWORD *sub_1000392BC(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  id v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(a2, v7))
    {
      case 0u:
        v8 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
        v9 = a1;
        v10 = v7;
        v11 = 0;
        goto LABEL_14;
      case 1u:
        v13 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
        v9 = a1;
        v10 = v7;
        v11 = 1;
        goto LABEL_14;
      case 2u:
        v14 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
        v15 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v16 = (_QWORD *)((char *)a1 + v15);
        v17 = (_QWORD *)((char *)a2 + v15);
        v18 = v17[1];
        *v16 = *v17;
        v16[1] = v18;
        swift_bridgeObjectRetain(v18);
        v9 = a1;
        v10 = v7;
        v11 = 2;
        goto LABEL_14;
      case 3u:
        v19 = a2[1];
        *a1 = *a2;
        a1[1] = v19;
        v20 = a2[3];
        a1[2] = a2[2];
        a1[3] = v20;
        v21 = a2[5];
        a1[4] = a2[4];
        a1[5] = v21;
        v22 = a2[7];
        a1[6] = a2[6];
        a1[7] = v22;
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v22);
        v9 = a1;
        v10 = v7;
        v11 = 3;
        goto LABEL_14;
      case 4u:
        v23 = a2[1];
        *a1 = *a2;
        a1[1] = v23;
        v24 = a2[3];
        a1[2] = a2[2];
        a1[3] = v24;
        v25 = a2[5];
        a1[4] = a2[4];
        a1[5] = v25;
        a1[6] = a2[6];
        swift_bridgeObjectRetain(v23);
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v25);
        v9 = a1;
        v10 = v7;
        v11 = 4;
        goto LABEL_14;
      case 5u:
        v26 = a2[1];
        *a1 = *a2;
        a1[1] = v26;
        v27 = a2[3];
        a1[2] = a2[2];
        a1[3] = v27;
        v29 = (void *)a2[4];
        v28 = a2[5];
        a1[4] = v29;
        a1[5] = v28;
        v30 = a2[9];
        swift_bridgeObjectRetain(v26);
        swift_bridgeObjectRetain(v27);
        v31 = v29;
        swift_bridgeObjectRetain(v28);
        if (v30)
        {
          a1[9] = v30;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v30 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v30);
        }
        else
        {
          v32 = *((_OWORD *)a2 + 4);
          *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
          *((_OWORD *)a1 + 4) = v32;
        }
        v9 = a1;
        v10 = v7;
        v11 = 5;
LABEL_14:
        swift_storeEnumTagMultiPayload(v9, v10, v11);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
        break;
    }
    v33 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    v34 = (char *)a1 + v33;
    v35 = (char *)a2 + v33;
    v36 = *(_QWORD *)((char *)a2 + v33);
    v37 = *(_QWORD *)((char *)a2 + v33 + 8);
    v38 = *((_BYTE *)a2 + v33 + 16);
    sub_10000BAD4(v36, v37, v38);
    *(_QWORD *)v34 = v36;
    *((_QWORD *)v34 + 1) = v37;
    v34[16] = v38;
    v39 = *((_QWORD *)v35 + 3);
    *((_QWORD *)v34 + 3) = v39;
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    swift_bridgeObjectRetain(v39);
  }
  return a1;
}

uint64_t sub_10003958C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(a1, v4))
  {
    case 0u:
    case 1u:
      v5 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
      break;
    case 2u:
      v6 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
      v7 = sub_100004FC8(&qword_10015C420);
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v7 + 48) + 8));
      break;
    case 3u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
      break;
    case 4u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      break;
    case 5u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));

      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      if (*(_QWORD *)(a1 + 72))
        sub_100005474((_QWORD *)(a1 + 48));
      break;
    default:
      break;
  }
  v8 = a1 + *(int *)(a2 + 24);
  sub_100007618(*(_QWORD *)v8, *(_QWORD *)(v8 + 8), *(_BYTE *)(v8 + 16));
  return swift_bridgeObjectRelease(*(_QWORD *)(v8 + 24));
}

_QWORD *sub_1000396C8(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;

  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(a2, v6))
  {
    case 0u:
      v7 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 0;
      goto LABEL_12;
    case 1u:
      v11 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      v8 = a1;
      v9 = v6;
      v10 = 1;
      goto LABEL_12;
    case 2u:
      v12 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
      v13 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
      v14 = (_QWORD *)((char *)a1 + v13);
      v15 = (_QWORD *)((char *)a2 + v13);
      v16 = v15[1];
      *v14 = *v15;
      v14[1] = v16;
      swift_bridgeObjectRetain(v16);
      v8 = a1;
      v9 = v6;
      v10 = 2;
      goto LABEL_12;
    case 3u:
      v17 = a2[1];
      *a1 = *a2;
      a1[1] = v17;
      v18 = a2[3];
      a1[2] = a2[2];
      a1[3] = v18;
      v19 = a2[5];
      a1[4] = a2[4];
      a1[5] = v19;
      v20 = a2[7];
      a1[6] = a2[6];
      a1[7] = v20;
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v20);
      v8 = a1;
      v9 = v6;
      v10 = 3;
      goto LABEL_12;
    case 4u:
      v21 = a2[1];
      *a1 = *a2;
      a1[1] = v21;
      v22 = a2[3];
      a1[2] = a2[2];
      a1[3] = v22;
      v23 = a2[5];
      a1[4] = a2[4];
      a1[5] = v23;
      a1[6] = a2[6];
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v23);
      v8 = a1;
      v9 = v6;
      v10 = 4;
      goto LABEL_12;
    case 5u:
      v24 = a2[1];
      *a1 = *a2;
      a1[1] = v24;
      v25 = a2[3];
      a1[2] = a2[2];
      a1[3] = v25;
      v27 = (void *)a2[4];
      v26 = a2[5];
      a1[4] = v27;
      a1[5] = v26;
      v28 = a2[9];
      swift_bridgeObjectRetain(v24);
      swift_bridgeObjectRetain(v25);
      v29 = v27;
      swift_bridgeObjectRetain(v26);
      if (v28)
      {
        a1[9] = v28;
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v28 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v28);
      }
      else
      {
        v30 = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 4) = v30;
      }
      v8 = a1;
      v9 = v6;
      v10 = 5;
LABEL_12:
      swift_storeEnumTagMultiPayload(v8, v9, v10);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      break;
  }
  v31 = a3[6];
  *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = *(_QWORD *)((char *)a2 + v31);
  v35 = *(_QWORD *)((char *)a2 + v31 + 8);
  v36 = *((_BYTE *)a2 + v31 + 16);
  sub_10000BAD4(v34, v35, v36);
  *(_QWORD *)v32 = v34;
  *((_QWORD *)v32 + 1) = v35;
  v32[16] = v36;
  v37 = *((_QWORD *)v33 + 3);
  *((_QWORD *)v32 + 3) = v37;
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  swift_bridgeObjectRetain(v37);
  return a1;
}

_QWORD *sub_10003996C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;

  if (a1 != a2)
  {
    sub_100013014((uint64_t)a1);
    v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(a2, v6))
    {
      case 0u:
        v7 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
        v8 = a1;
        v9 = v6;
        v10 = 0;
        goto LABEL_13;
      case 1u:
        v11 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
        v8 = a1;
        v9 = v6;
        v10 = 1;
        goto LABEL_13;
      case 2u:
        v12 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
        v13 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v14 = (_QWORD *)((char *)a1 + v13);
        v15 = (_QWORD *)((char *)a2 + v13);
        *v14 = *v15;
        v16 = v15[1];
        v14[1] = v16;
        swift_bridgeObjectRetain(v16);
        v8 = a1;
        v9 = v6;
        v10 = 2;
        goto LABEL_13;
      case 3u:
        *a1 = *a2;
        v17 = a2[1];
        a1[1] = v17;
        a1[2] = a2[2];
        v18 = a2[3];
        a1[3] = v18;
        a1[4] = a2[4];
        v19 = a2[5];
        a1[5] = v19;
        a1[6] = a2[6];
        v20 = a2[7];
        a1[7] = v20;
        swift_bridgeObjectRetain(v17);
        swift_bridgeObjectRetain(v18);
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        v8 = a1;
        v9 = v6;
        v10 = 3;
        goto LABEL_13;
      case 4u:
        *a1 = *a2;
        v21 = a2[1];
        a1[1] = v21;
        a1[2] = a2[2];
        v22 = a2[3];
        a1[3] = v22;
        a1[4] = a2[4];
        v23 = a2[5];
        a1[5] = v23;
        a1[6] = a2[6];
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v22);
        swift_bridgeObjectRetain(v23);
        v8 = a1;
        v9 = v6;
        v10 = 4;
        goto LABEL_13;
      case 5u:
        *a1 = *a2;
        v24 = a2[1];
        a1[1] = v24;
        a1[2] = a2[2];
        v25 = a2[3];
        a1[3] = v25;
        v26 = (void *)a2[4];
        a1[4] = v26;
        v27 = a2[5];
        a1[5] = v27;
        v28 = a2[9];
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v25);
        v29 = v26;
        swift_bridgeObjectRetain(v27);
        if (v28)
        {
          a1[9] = v28;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v28 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v28);
        }
        else
        {
          v30 = *((_OWORD *)a2 + 4);
          *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
          *((_OWORD *)a1 + 4) = v30;
        }
        v8 = a1;
        v9 = v6;
        v10 = 5;
LABEL_13:
        swift_storeEnumTagMultiPayload(v8, v9, v10);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
        break;
    }
  }
  *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
  v31 = a3[6];
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = *(_QWORD *)((char *)a2 + v31);
  v35 = *(_QWORD *)((char *)a2 + v31 + 8);
  v36 = *((_BYTE *)a2 + v31 + 16);
  sub_10000BAD4(v34, v35, v36);
  v37 = *(_QWORD *)v32;
  v38 = *((_QWORD *)v32 + 1);
  v39 = v32[16];
  *(_QWORD *)v32 = v34;
  *((_QWORD *)v32 + 1) = v35;
  v32[16] = v36;
  sub_100007618(v37, v38, v39);
  v40 = *((_QWORD *)v33 + 3);
  v41 = *((_QWORD *)v32 + 3);
  *((_QWORD *)v32 + 3) = v40;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRelease(v41);
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  return a1;
}

char *sub_100039C94(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;

  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
  if (EnumCaseMultiPayload == 2)
  {
    v9 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
    v10 = sub_100004FC8(&qword_10015C420);
    *(_OWORD *)&a1[*(int *)(v10 + 48)] = *(_OWORD *)&a2[*(int *)(v10 + 48)];
    swift_storeEnumTagMultiPayload(a1, v6, 2);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v11 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    v8 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload(a1, v6, 0);
  }
  v12 = a3[6];
  a1[a3[5]] = a2[a3[5]];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = *((_OWORD *)v14 + 1);
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *((_OWORD *)v13 + 1) = v15;
  a1[a3[7]] = a2[a3[7]];
  return a1;
}

char *sub_100039DE0(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  if (a1 != a2)
  {
    sub_100013014((uint64_t)a1);
    v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
    if (EnumCaseMultiPayload == 2)
    {
      v9 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      v10 = sub_100004FC8(&qword_10015C420);
      *(_OWORD *)&a1[*(int *)(v10 + 48)] = *(_OWORD *)&a2[*(int *)(v10 + 48)];
      swift_storeEnumTagMultiPayload(a1, v6, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v11 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      v8 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload(a1, v6, 0);
    }
  }
  v12 = a3[6];
  a1[a3[5]] = a2[a3[5]];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = a2[v12 + 16];
  v16 = *(_QWORD *)&a1[v12];
  v17 = *(_QWORD *)&a1[v12 + 8];
  v18 = a1[v12 + 16];
  *(_OWORD *)v13 = *(_OWORD *)&a2[v12];
  v13[16] = v15;
  sub_100007618(v16, v17, v18);
  v19 = *((_QWORD *)v13 + 3);
  *((_QWORD *)v13 + 3) = *((_QWORD *)v14 + 3);
  swift_bridgeObjectRelease(v19);
  a1[a3[7]] = a2[a3[7]];
  return a1;
}

uint64_t sub_100039F68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100039F74);
}

uint64_t sub_100039F74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 24);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100039FF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003A000);
}

uint64_t sub_10003A000(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 24) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for PrimarySettingsListImagelessLinkModel(uint64_t a1)
{
  uint64_t result;

  result = qword_1001581B0;
  if (!qword_1001581B0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PrimarySettingsListImagelessLinkModel);
  return result;
}

uint64_t sub_10003A0B8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = type metadata accessor for PrimarySettingsListItemIdentifier(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100115678;
    v4[2] = &unk_100115690;
    v4[3] = &unk_1001156A8;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

BOOL sub_10003A140(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  _BOOL4 v11;

  sub_1000A103C(a1, a2);
  if ((v4 & 1) == 0)
    return 0;
  v5 = type metadata accessor for PrimarySettingsListImagelessLinkModel(0);
  if (*(unsigned __int8 *)(a1 + *(int *)(v5 + 20)) != *(unsigned __int8 *)(a2 + *(int *)(v5 + 20)))
    return 0;
  v6 = v5;
  v7 = *(int *)(v5 + 24);
  if ((static Text.== infix(_:_:)(*(_QWORD *)(a1 + v7), *(_QWORD *)(a1 + v7 + 8), *(unsigned __int8 *)(a1 + v7 + 16), *(_QWORD *)(a1 + v7 + 24), *(_QWORD *)(a2 + v7), *(_QWORD *)(a2 + v7 + 8), *(unsigned __int8 *)(a2 + v7 + 16), *(_QWORD *)(a2 + v7 + 24)) & 1) == 0)return 0;
  v8 = *(int *)(v6 + 28);
  v9 = *(unsigned __int8 *)(a1 + v8);
  v10 = *(unsigned __int8 *)(a2 + v8);
  if (v9 != 2)
  {
    v11 = (v9 & 1) == 0;
    return v10 != 2 && ((v11 ^ v10) & 1) != 0;
  }
  return v10 == 2;
}

uint64_t getEnumTagSinglePayload for DeviceOSExpertFeatureFlags(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for DeviceOSExpertFeatureFlags(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10003A2E4 + 4 * byte_1001156F5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10003A318 + 4 * byte_1001156F0[v4]))();
}

uint64_t sub_10003A318(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003A320(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10003A328);
  return result;
}

uint64_t sub_10003A334(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10003A33CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10003A340(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003A348(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_10003A354(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for DeviceOSExpertFeatureFlags()
{
  return &type metadata for DeviceOSExpertFeatureFlags;
}

unint64_t sub_10003A374()
{
  unint64_t result;

  result = qword_1001581F0;
  if (!qword_1001581F0)
  {
    result = swift_getWitnessTable(&unk_10011575C, &type metadata for DeviceOSExpertFeatureFlags);
    atomic_store(result, (unint64_t *)&qword_1001581F0);
  }
  return result;
}

BOOL sub_10003A3B8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

const char *sub_10003A3D0()
{
  return "DeviceOSExpert";
}

const char *sub_10003A3E4()
{
  _BYTE *v0;

  if (*v0)
    return "SemanticSearch";
  else
    return "DoItForMe";
}

uint64_t sub_10003A414(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (a1 == 3)
  {
    v2 = 0x1000000000000014;
    v1 = 0x8000000100120590;
  }
  else if (a1 == 1)
  {
    v1 = 0x80000001001205B0;
    v2 = 0x1000000000000011;
  }
  else
  {
    v2 = 5132374;
    v1 = 0xE300000000000000;
  }
  v3 = LocalizedStringKey.init(stringLiteral:)(v2, v1);
  return Text.init(_:tableName:bundle:comment:)(v3);
}

uint64_t sub_10003A4B8(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t result;
  uint64_t v4;

  switch(a1)
  {
    case 0:
      v1 = 0x6E6E6F4320746F4ELL;
      v2 = 0xED00006465746365;
      goto LABEL_9;
    case 1:
      v1 = 0x697463656E6E6F43;
      v2 = 0xAD0000A680E2676ELL;
      goto LABEL_9;
    case 2:
      v1 = 0x657463656E6E6F43;
      v2 = 0xE900000000000064;
      goto LABEL_9;
    case 3:
      v2 = 0x80000001001205D0;
      v1 = 0x1000000000000010;
      goto LABEL_9;
    case 4:
      v1 = 0x6576697463616E49;
      v2 = 0xE800000000000000;
      goto LABEL_9;
    case 5:
      v1 = 28239;
      v2 = 0xE200000000000000;
LABEL_9:
      v4 = LocalizedStringKey.init(stringLiteral:)(v1, v2);
      result = Text.init(_:tableName:bundle:comment:)(v4);
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t sub_10003A5DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t);
  uint64_t v15;
  char v16;
  uint64_t v18;
  uint64_t v19;

  v4 = type metadata accessor for GenerativeModelsAvailability.Availability.UnavailableInfo.UnavailableReason(0);
  v19 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a2 + 16)
    && (v7 = *(_QWORD *)(a2 + 40),
        v8 = sub_100007828(&qword_1001582A8, (uint64_t (*)(uint64_t))&type metadata accessor for GenerativeModelsAvailability.Availability.UnavailableInfo.UnavailableReason, (uint64_t)&protocol conformance descriptor for GenerativeModelsAvailability.Availability.UnavailableInfo.UnavailableReason), v9 = dispatch thunk of Hashable._rawHashValue(seed:)(v7, v4, v8), v10 = -1 << *(_BYTE *)(a2 + 32), v11 = v9 & ~v10, ((*(_QWORD *)(a2 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0))
  {
    v12 = ~v10;
    v13 = *(_QWORD *)(v19 + 72);
    v14 = *(void (**)(char *, unint64_t, uint64_t))(v19 + 16);
    do
    {
      v14(v6, *(_QWORD *)(a2 + 48) + v13 * v11, v4);
      v15 = sub_100007828(&qword_1001582B0, (uint64_t (*)(uint64_t))&type metadata accessor for GenerativeModelsAvailability.Availability.UnavailableInfo.UnavailableReason, (uint64_t)&protocol conformance descriptor for GenerativeModelsAvailability.Availability.UnavailableInfo.UnavailableReason);
      v16 = dispatch thunk of static Equatable.== infix(_:_:)(v6, a1, v4, v15);
      (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v4);
      if ((v16 & 1) != 0)
        break;
      v11 = (v11 + 1) & v12;
    }
    while (((*(_QWORD *)(a2 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t sub_10003A760(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t result;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  _QWORD v20[9];

  if (*(_QWORD *)(a3 + 16))
  {
    Hasher.init(_seed:)(v20, *(_QWORD *)(a3 + 40));
    String.hash(into:)(v20, a1, a2);
    v6 = Hasher._finalize()();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = v11[1];
      v13 = *v11 == a1 && v12 == a2;
      if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v11, v12, a1, a2, 0) & 1) != 0)
        return 1;
      v15 = ~v7;
      v16 = (v8 + 1) & v15;
      if (((*(_QWORD *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
      {
        while (1)
        {
          v17 = (_QWORD *)(v10 + 16 * v16);
          v18 = v17[1];
          v19 = *v17 == a1 && v18 == a2;
          if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
            break;
          result = 0;
          v16 = (v16 + 1) & v15;
          if (((*(_QWORD *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_10003A894(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t);
  uint64_t v15;
  char v16;
  uint64_t v18;
  uint64_t v19;

  v4 = type metadata accessor for URL(0);
  v19 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a2 + 16)
    && (v7 = *(_QWORD *)(a2 + 40),
        v8 = sub_100007828((unint64_t *)&unk_10015BAD0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL), v9 = dispatch thunk of Hashable._rawHashValue(seed:)(v7, v4, v8), v10 = -1 << *(_BYTE *)(a2 + 32), v11 = v9 & ~v10, ((*(_QWORD *)(a2 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0))
  {
    v12 = ~v10;
    v13 = *(_QWORD *)(v19 + 72);
    v14 = *(void (**)(char *, unint64_t, uint64_t))(v19 + 16);
    do
    {
      v14(v6, *(_QWORD *)(a2 + 48) + v13 * v11, v4);
      v15 = sub_100007828(&qword_1001582B8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v16 = dispatch thunk of static Equatable.== infix(_:_:)(v6, a1, v4, v15);
      (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v4);
      if ((v16 & 1) != 0)
        break;
      v11 = (v11 + 1) & v12;
    }
    while (((*(_QWORD *)(a2 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t sub_10003AA18(char *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  char v5;
  void **v6;

  v5 = *a1;
  v6 = (void **)sub_100007C2C(a4, a4[3]);
  return sub_10003AF58(v5, a3, *v6) & 1;
}

uint64_t sub_10003AA68()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for PrimarySettingsListItemVisibilityEvaluator()
{
  return objc_opt_self(_TtC11SettingsApp42PrimarySettingsListItemVisibilityEvaluator);
}

uint64_t sub_10003AA98@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100115888);
  v7 = v3;
  v5 = sub_100007828((unint64_t *)&unk_10015BA80, type metadata accessor for RestrictionsManager, (uint64_t)&protocol conformance descriptor for RestrictionsManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v5);
  result = swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3 + OBJC_IVAR____TtC11SettingsApp19RestrictionsManager__isInEDUMode);
  return result;
}

uint64_t sub_10003AB2C(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100115888);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_100007828((unint64_t *)&unk_10015BA80, type metadata accessor for RestrictionsManager, (uint64_t)&protocol conformance descriptor for RestrictionsManager);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_10003CE44, v7, (char *)&type metadata for () + 8, v5);
  return swift_release(KeyPath);
}

uint64_t sub_10003ABD4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100115810);
  v8 = v3;
  v5 = sub_100007828((unint64_t *)&unk_10015BA80, type metadata accessor for RestrictionsManager, (uint64_t)&protocol conformance descriptor for RestrictionsManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(_QWORD *)(v3 + OBJC_IVAR____TtC11SettingsApp19RestrictionsManager__restrictedFeatures);
  *a2 = v6;
  return swift_bridgeObjectRetain(v6);
}

uint64_t sub_10003AC6C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100115810);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_100007828((unint64_t *)&unk_10015BA80, type metadata accessor for RestrictionsManager, (uint64_t)&protocol conformance descriptor for RestrictionsManager);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_10003CE90, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_10003AD24@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_10003AE04(a1, (uint64_t)&unk_100115860, &OBJC_IVAR____TtC11SettingsApp19RestrictionsManager__blockedAppBundleIDs, a2);
}

uint64_t sub_10003AD38(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100115860);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_100007828((unint64_t *)&unk_10015BA80, type metadata accessor for RestrictionsManager, (uint64_t)&protocol conformance descriptor for RestrictionsManager);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_10003CE60, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_10003ADF0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_10003AE04(a1, (uint64_t)&unk_100115838, &OBJC_IVAR____TtC11SettingsApp19RestrictionsManager__allowedAppBundleIDs, a2);
}

uint64_t sub_10003AE04@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, _QWORD *a3@<X4>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v6 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v11 = v6;
  v8 = sub_100007828((unint64_t *)&unk_10015BA80, type metadata accessor for RestrictionsManager, (uint64_t)&protocol conformance descriptor for RestrictionsManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v11, KeyPath, v8);
  swift_release(KeyPath);
  v9 = *(_QWORD *)(v6 + *a3);
  *a4 = v9;
  return swift_bridgeObjectRetain(v9);
}

uint64_t sub_10003AEA0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100115838);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_100007828((unint64_t *)&unk_10015BA80, type metadata accessor for RestrictionsManager, (uint64_t)&protocol conformance descriptor for RestrictionsManager);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_10003CE78, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_10003AF58(char a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  unsigned int EnumCaseMultiPayload;
  _DWORD v22[4];
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[5];

  v6 = type metadata accessor for NSBundle.PreferencesPluginLocation(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v27 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)v22 - v10;
  v30 = type metadata accessor for PrimarySettingsListItemVisibilityRule(0);
  v31 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32[3] = &type metadata for PrimarySettingsListDataModelGenerationContext;
  v32[4] = &off_100148E38;
  v32[0] = a3;
  if (*(_QWORD *)(a2 + 16)
    && (v14 = sub_1000DA900(a1 & 1), (v15 & 1) != 0)
    && (v16 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v14), (v29 = *(_QWORD *)(v16 + 16)) != 0))
  {
    v23 = v11;
    v22[1] = a1 & 1;
    v17 = v16 + ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80));
    v18 = a3;
    swift_bridgeObjectRetain(v16);
    v24 = v6;
    v25 = v7;
    v28 = v16;
    v26 = v17;
    if (!*(_QWORD *)(v16 + 16))
    {
      __break(1u);
      JUMPOUT(0x10003CBF4);
    }
    sub_10003CD08(v17, (uint64_t)v13);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v13, v30);
    return ((uint64_t (*)(void))((char *)&loc_10003B1F0 + *((int *)qword_10003CCE8 + EnumCaseMultiPayload)))();
  }
  else
  {
    v19 = a3;
    sub_100005474(v32);
    return 0;
  }
}

uint64_t sub_10003CD08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PrimarySettingsListItemVisibilityRule(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003CD54@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_10003AE04(a1, (uint64_t)&unk_100115838, &OBJC_IVAR____TtC11SettingsApp19RestrictionsManager__allowedAppBundleIDs, a2);
}

uint64_t sub_10003CD7C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_10003AE04(a1, (uint64_t)&unk_100115860, &OBJC_IVAR____TtC11SettingsApp19RestrictionsManager__blockedAppBundleIDs, a2);
}

unint64_t sub_10003CDA4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100158298;
  if (!qword_100158298)
  {
    v1 = objc_opt_self(NSBundle);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100158298);
  }
  return result;
}

uint64_t sub_10003CDE8(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_10003CE00(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10003CE44()
{
  uint64_t v0;

  return sub_1000C6C84(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_10003CE60()
{
  uint64_t v0;

  return sub_1000C6D78(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10003CE78()
{
  uint64_t v0;

  return sub_1000C6E30(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10003CE90()
{
  uint64_t v0;

  return sub_1000C6D24(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

_QWORD *sub_10003CEA8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31[24];
  _QWORD v32[5];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC11SettingsApp24ClassKitListItemProvider_cancellables);
  swift_beginAccess(v0 + OBJC_IVAR____TtC11SettingsApp24ClassKitListItemProvider_cancellables, v31, 1, 0);
  v2 = *v1;
  v27 = v1;
  v28 = v0;
  if ((*v1 & 0xC000000000000001) != 0)
  {
    if (v2 < 0)
      v3 = *v1;
    else
      v3 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v4 = __CocoaSet.makeIterator()(v3);
    v5 = type metadata accessor for AnyCancellable(0);
    v6 = sub_100007828((unint64_t *)&qword_100156FB8, (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable, (uint64_t)&protocol conformance descriptor for AnyCancellable);
    result = Set.Iterator.init(_cocoa:)(v32, v4, v5, v6);
    v2 = v32[0];
    v8 = v32[1];
    v9 = v32[2];
    v10 = v32[3];
    v11 = v32[4];
  }
  else
  {
    v12 = -1 << *(_BYTE *)(v2 + 32);
    v8 = v2 + 56;
    v9 = ~v12;
    v13 = -v12;
    if (v13 < 64)
      v14 = ~(-1 << v13);
    else
      v14 = -1;
    v11 = v14 & *(_QWORD *)(v2 + 56);
    result = (_QWORD *)swift_bridgeObjectRetain(v2);
    v10 = 0;
  }
  v15 = (unint64_t)(v9 + 64) >> 6;
  if (v2 < 0)
    goto LABEL_13;
  while (1)
  {
    if (v11)
    {
      v16 = (v11 - 1) & v11;
      v17 = __clz(__rbit64(v11)) | (v10 << 6);
      v18 = v10;
      goto LABEL_30;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
      break;
    if (v23 >= v15)
      goto LABEL_33;
    v24 = *(_QWORD *)(v8 + 8 * v23);
    v18 = v10 + 1;
    if (!v24)
    {
      v18 = v10 + 2;
      if (v10 + 2 >= v15)
        goto LABEL_33;
      v24 = *(_QWORD *)(v8 + 8 * v18);
      if (!v24)
      {
        v18 = v10 + 3;
        if (v10 + 3 >= v15)
          goto LABEL_33;
        v24 = *(_QWORD *)(v8 + 8 * v18);
        if (!v24)
        {
          v18 = v10 + 4;
          if (v10 + 4 >= v15)
            goto LABEL_33;
          v24 = *(_QWORD *)(v8 + 8 * v18);
          if (!v24)
          {
            v25 = v10 + 5;
            while (v15 != v25)
            {
              v24 = *(_QWORD *)(v8 + 8 * v25++);
              if (v24)
              {
                v18 = v25 - 1;
                goto LABEL_29;
              }
            }
LABEL_33:
            sub_100007C50(v2);
            v26 = *v27;
            *v27 = (uint64_t)&_swiftEmptySetSingleton;
            swift_bridgeObjectRelease(v26);
            sub_100013014(v28 + OBJC_IVAR____TtC11SettingsApp24ClassKitListItemProvider_id);
            swift_bridgeObjectRelease(*v27);
            sub_100005474((_QWORD *)(v28 + OBJC_IVAR____TtC11SettingsApp24ClassKitListItemProvider_invalidator));
            return (_QWORD *)v28;
          }
        }
      }
    }
LABEL_29:
    v16 = (v24 - 1) & v24;
    v17 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_30:
    v22 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v17);
    swift_retain(v22);
    if (!v22)
      goto LABEL_33;
    while (1)
    {
      AnyCancellable.cancel()();
      result = (_QWORD *)swift_release(v22);
      v10 = v18;
      v11 = v16;
      if ((v2 & 0x8000000000000000) == 0)
        break;
LABEL_13:
      v19 = __CocoaSet.Iterator.next()(result);
      if (v19)
      {
        v20 = v19;
        v29 = v19;
        v21 = type metadata accessor for AnyCancellable(0);
        swift_unknownObjectRetain(v20);
        swift_dynamicCast(&v30, &v29, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
        v22 = v30;
        swift_unknownObjectRelease(v20);
        v18 = v10;
        v16 = v11;
        if (v22)
          continue;
      }
      goto LABEL_33;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10003D178()
{
  uint64_t v0;

  sub_10003CEA8();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10003D19C()
{
  return type metadata accessor for ClassKitListItemProvider(0);
}

uint64_t type metadata accessor for ClassKitListItemProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_100158300;
  if (!qword_100158300)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ClassKitListItemProvider);
  return result;
}

uint64_t sub_10003D1E0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = type metadata accessor for PrimarySettingsListItemIdentifier(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1001158D0;
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[3] = &unk_1001158E8;
    result = swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

void sub_10003D26C(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = v2;
  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v3 + OBJC_IVAR____TtC11SettingsApp24ClassKitListItemProvider_showClassKit) == 1)
  {
    sub_100012DC4(v3 + OBJC_IVAR____TtC11SettingsApp24ClassKitListItemProvider_id, (uint64_t)v8);
    v9 = type metadata accessor for StaticPrimarySettingsListItemProvider(0);
    v10 = swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
    sub_10000F48C((uint64_t)v8, v10 + OBJC_IVAR____TtC11SettingsApp37StaticPrimarySettingsListItemProvider_id);
    sub_1000B2604(a1, a2);
    swift_setDeallocating(v10);
    sub_100013014(v10 + OBJC_IVAR____TtC11SettingsApp37StaticPrimarySettingsListItemProvider_id);
    swift_deallocClassInstance(v10, *(unsigned int *)(*(_QWORD *)v10 + 48), *(unsigned __int16 *)(*(_QWORD *)v10 + 52));
  }
  else
  {
    v11 = type metadata accessor for PrimarySettingsListItemModel(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a2, 1, 1, v11);
  }
  sub_10003D3B0(v3);
}

void sub_10003D3B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  id v38;
  uint64_t *v39;
  id v40[3];
  char v41[24];

  v2 = sub_100004FC8((uint64_t *)&unk_10015C970);
  __chkstk_darwin(v2);
  v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for NSNotificationCenter.Publisher(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100004FC8((uint64_t *)&unk_100156F10);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = objc_msgSend((id)objc_opt_self(PSLaunchTracker), "sharedInstance");
  v14 = objc_msgSend(v13, "launchHasCompleted");

  if (v14)
  {
    v15 = a1;
    v16 = (uint64_t *)(a1 + OBJC_IVAR____TtC11SettingsApp24ClassKitListItemProvider_cancellables);
    swift_beginAccess(a1 + OBJC_IVAR____TtC11SettingsApp24ClassKitListItemProvider_cancellables, v41, 0, 0);
    v39 = v16;
    v17 = *v16;
    if ((v17 & 0xC000000000000001) != 0)
    {
      if (v17 < 0)
        v18 = v17;
      else
        v18 = v17 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v17);
      v19 = __CocoaSet.count.getter(v18);
      swift_bridgeObjectRelease(v17);
      if (!v19)
        goto LABEL_7;
    }
    else if (!*(_QWORD *)(v17 + 16))
    {
LABEL_7:
      v38 = (id)objc_opt_self(NSNotificationCenter);
      v20 = objc_msgSend(v38, "defaultCenter");
      NSNotificationCenter.publisher(for:object:)(CLSSettingsVisibilityDidChangeNotification, 0);

      v21 = sub_100005494();
      v40[0] = (id)static OS_dispatch_queue.main.getter();
      v22 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
      v36 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56);
      v37 = v22;
      v36(v4, 1, 1, v22);
      v23 = sub_100007828((unint64_t *)&unk_100156F20, (uint64_t (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Publisher, (uint64_t)&protocol conformance descriptor for NSNotificationCenter.Publisher);
      v35 = v23;
      v34 = sub_100007828((unint64_t *)&qword_10015C990, (uint64_t (*)(uint64_t))sub_100005494, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
      Publisher.receive<A>(on:options:)(v40, v4, v5, v21, v23, v34);
      sub_10000778C((uint64_t)v4);

      v33 = *(void (**)(char *, uint64_t))(v6 + 8);
      v33(v8, v5);
      v24 = swift_allocObject(&unk_1001490C0, 24, 7);
      swift_weakInit(v24 + 16, v15);
      v32 = sub_100007868((unint64_t *)&qword_100156F30, (uint64_t *)&unk_100156F10, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
      v25 = Publisher<>.sink(receiveValue:)(sub_10003E0A8, v24, v9, v32);
      swift_release(v24);
      v26 = *(void (**)(char *, uint64_t))(v10 + 8);
      v26(v12, v9);
      v27 = v15;
      v28 = v39;
      swift_beginAccess(v39, v40, 33, 0);
      AnyCancellable.store(in:)(v28);
      swift_endAccess(v40);
      swift_release(v25);
      v29 = objc_msgSend(v38, "defaultCenter");
      NSNotificationCenter.publisher(for:object:)(UIApplicationDidBecomeActiveNotification, 0);

      v40[0] = (id)static OS_dispatch_queue.main.getter();
      v36(v4, 1, 1, v37);
      Publisher.receive<A>(on:options:)(v40, v4, v5, v21, v35, v34);
      sub_10000778C((uint64_t)v4);

      v33(v8, v5);
      v30 = swift_allocObject(&unk_1001490C0, 24, 7);
      swift_weakInit(v30 + 16, v27);
      v31 = Publisher<>.sink(receiveValue:)(sub_10003E0A8, v30, v9, v32);
      swift_release(v30);
      v26(v12, v9);
      swift_beginAccess(v28, v40, 33, 0);
      AnyCancellable.store(in:)(v28);
      swift_endAccess(v40);
      swift_release(v31);
      sub_10003D82C();
    }
  }
}

uint64_t sub_10003D82C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_signpost_type_t v18;
  uint8_t *v19;
  uint8_t *v20;
  os_signpost_id_t v21;
  uint8_t *v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD aBlock[5];
  uint64_t v40;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v36 = *(_QWORD *)(v2 - 8);
  v37 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v34 = *(_QWORD *)(v5 - 8);
  v35 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OSSignpostID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v33 - v13;
  if (qword_100156CD8 != -1)
    swift_once(&qword_100156CD8, sub_10008BEEC);
  v15 = type metadata accessor for OSSignposter(0);
  sub_100007808(v15, (uint64_t)qword_10015D340);
  v16 = static OSSignpostID.exclusive.getter();
  v17 = OSSignposter.logHandle.getter(v16);
  v18 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    v33 = v7;
    v20 = v19;
    *(_WORD *)v19 = 0;
    v21 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, v18, v21, "ClassKitListItemProvider.updateClassKitVisibility began", "", v20, 2u);
    v22 = v20;
    v1 = v0;
    v7 = v33;
    swift_slowDealloc(v22, -1, -1);

    v23 = *(void (**)(char *, uint64_t))(v9 + 8);
    v23(v14, v8);
    v23(v12, v8);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  }
  if (qword_100156D60 != -1)
    swift_once(&qword_100156D60, sub_1000D34BC);
  v24 = swift_allocObject(&unk_1001490C0, 24, 7);
  swift_weakInit(v24 + 16, v1);
  aBlock[4] = sub_10003E114;
  v40 = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100005350;
  aBlock[3] = &unk_1001490D8;
  v25 = _Block_copy(aBlock);
  v26 = swift_retain(v24);
  static DispatchQoS.unspecified.getter(v26);
  v38 = _swiftEmptyArrayStorage;
  v27 = sub_100007828((unint64_t *)&qword_10015BAB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v28 = sub_100004FC8((uint64_t *)&unk_100156F40);
  v29 = sub_100007868((unint64_t *)&qword_10015BAC0, (uint64_t *)&unk_100156F40, (uint64_t)&protocol conformance descriptor for [A]);
  v30 = v37;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v38, v28, v29, v37, v27);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v4, v25);
  _Block_release(v25);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v4, v30);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v7, v35);
  v31 = v40;
  swift_release(v24);
  return swift_release(v31);
}

id sub_10003DBD4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id result;
  void *v10;
  unsigned __int8 v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD aBlock[5];
  uint64_t v23;

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v21 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = objc_msgSend((id)objc_opt_self(CLSSettingsVisibilityController), "shared");
  if (result)
  {
    v10 = result;
    v11 = objc_msgSend(result, "settingsUIVisible");

    sub_100005494();
    v12 = (void *)static OS_dispatch_queue.main.getter();
    v13 = swift_allocObject(&unk_100149110, 25, 7);
    *(_QWORD *)(v13 + 16) = a1;
    *(_BYTE *)(v13 + 24) = v11;
    aBlock[4] = sub_10003E140;
    v23 = v13;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100005350;
    aBlock[3] = &unk_100149128;
    v14 = _Block_copy(aBlock);
    v15 = v23;
    swift_retain(a1);
    v16 = swift_release(v15);
    static DispatchQoS.unspecified.getter(v16);
    aBlock[0] = _swiftEmptyArrayStorage;
    v17 = sub_100007828((unint64_t *)&qword_10015BAB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v18 = sub_100004FC8((uint64_t *)&unk_100156F40);
    v19 = sub_100007868((unint64_t *)&qword_10015BAC0, (uint64_t *)&unk_100156F40, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v18, v19, v2, v17);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v4, v14);
    _Block_release(v14);

    (*(void (**)(char *, uint64_t))(v21 + 8))(v4, v2);
    return (id)(*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10003DE1C(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Strong;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_signpost_type_t v17;
  uint8_t *v18;
  os_signpost_id_t v19;
  void (*v20)(char *, uint64_t);
  _QWORD v22[2];
  char v23;
  _BYTE v24[24];

  v4 = type metadata accessor for OSSignpostID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)v22 - v9;
  a1 += 16;
  swift_beginAccess(a1, v24, 0, 0);
  Strong = swift_weakLoadStrong(a1);
  if (Strong)
  {
    v12 = Strong;
    v13 = OBJC_IVAR____TtC11SettingsApp24ClassKitListItemProvider_showClassKit;
    if (*(_BYTE *)(Strong + OBJC_IVAR____TtC11SettingsApp24ClassKitListItemProvider_showClassKit) != (a2 & 1))
    {
      sub_100007C2C((_QWORD *)(Strong + OBJC_IVAR____TtC11SettingsApp24ClassKitListItemProvider_invalidator), *(_QWORD *)(Strong + OBJC_IVAR____TtC11SettingsApp24ClassKitListItemProvider_invalidator + 24));
      v22[0] = "ClassKit";
      v22[1] = 8;
      v23 = 2;
      PassthroughSubject.send(_:)(v22);
    }
    *(_BYTE *)(v12 + v13) = a2 & 1;
    swift_release(v12);
  }
  if (qword_100156CD8 != -1)
    swift_once(&qword_100156CD8, sub_10008BEEC);
  v14 = type metadata accessor for OSSignposter(0);
  sub_100007808(v14, (uint64_t)qword_10015D340);
  v15 = static OSSignpostID.exclusive.getter();
  v16 = OSSignposter.logHandle.getter(v15);
  v17 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v10, v4);
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    v19 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, v17, v19, "ClassKitListItemProvider.updateClassKitVisibility completed", "", v18, 2u);
    swift_slowDealloc(v18, -1, -1);

    v20 = *(void (**)(char *, uint64_t))(v5 + 8);
    v20(v10, v4);
    return ((uint64_t (*)(char *, uint64_t))v20)(v8, v4);
  }
  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  }
}

uint64_t sub_10003E04C@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_100012DC4(*v1 + OBJC_IVAR____TtC11SettingsApp24ClassKitListItemProvider_id, a1);
}

void sub_10003E064(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10003D26C(a1, a2);
}

uint64_t sub_10003E084()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10003E0A8(uint64_t a1)
{
  uint64_t v1;

  return sub_10003E0C0(a1, v1);
}

uint64_t sub_10003E0C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v4 = result;
    sub_10003D82C();
    return swift_release(v4);
  }
  return result;
}

id sub_10003E114()
{
  uint64_t v0;

  return sub_10003DBD4(v0);
}

uint64_t sub_10003E11C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

uint64_t sub_10003E140()
{
  uint64_t v0;

  return sub_10003DE1C(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

_QWORD *sub_10003E154(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  id v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(a2, v7))
    {
      case 0u:
        v8 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
        v9 = a1;
        v10 = v7;
        v11 = 0;
        goto LABEL_14;
      case 1u:
        v13 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
        v9 = a1;
        v10 = v7;
        v11 = 1;
        goto LABEL_14;
      case 2u:
        v14 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
        v15 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v16 = (_QWORD *)((char *)a1 + v15);
        v17 = (_QWORD *)((char *)a2 + v15);
        v18 = v17[1];
        *v16 = *v17;
        v16[1] = v18;
        swift_bridgeObjectRetain(v18);
        v9 = a1;
        v10 = v7;
        v11 = 2;
        goto LABEL_14;
      case 3u:
        v19 = a2[1];
        *a1 = *a2;
        a1[1] = v19;
        v20 = a2[3];
        a1[2] = a2[2];
        a1[3] = v20;
        v21 = a2[5];
        a1[4] = a2[4];
        a1[5] = v21;
        v22 = a2[7];
        a1[6] = a2[6];
        a1[7] = v22;
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v22);
        v9 = a1;
        v10 = v7;
        v11 = 3;
        goto LABEL_14;
      case 4u:
        v23 = a2[1];
        *a1 = *a2;
        a1[1] = v23;
        v24 = a2[3];
        a1[2] = a2[2];
        a1[3] = v24;
        v25 = a2[5];
        a1[4] = a2[4];
        a1[5] = v25;
        a1[6] = a2[6];
        swift_bridgeObjectRetain(v23);
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v25);
        v9 = a1;
        v10 = v7;
        v11 = 4;
        goto LABEL_14;
      case 5u:
        v26 = a2[1];
        *a1 = *a2;
        a1[1] = v26;
        v27 = a2[3];
        a1[2] = a2[2];
        a1[3] = v27;
        v29 = (void *)a2[4];
        v28 = a2[5];
        a1[4] = v29;
        a1[5] = v28;
        v30 = a2[9];
        swift_bridgeObjectRetain(v26);
        swift_bridgeObjectRetain(v27);
        v31 = v29;
        swift_bridgeObjectRetain(v28);
        if (v30)
        {
          a1[9] = v30;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v30 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v30);
        }
        else
        {
          v32 = *((_OWORD *)a2 + 4);
          *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
          *((_OWORD *)a1 + 4) = v32;
        }
        v9 = a1;
        v10 = v7;
        v11 = 5;
LABEL_14:
        swift_storeEnumTagMultiPayload(v9, v10, v11);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
        break;
    }
    v33 = *(int *)(a3 + 20);
    v34 = *(_QWORD *)((char *)a2 + v33);
    *(_QWORD *)((char *)a1 + v33) = v34;
    swift_bridgeObjectRetain(v34);
  }
  return a1;
}

uint64_t sub_10003E3E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(a1, v4))
  {
    case 0u:
    case 1u:
      v5 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
      break;
    case 2u:
      v6 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
      v7 = sub_100004FC8(&qword_10015C420);
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v7 + 48) + 8));
      break;
    case 3u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
      break;
    case 4u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      break;
    case 5u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));

      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      if (*(_QWORD *)(a1 + 72))
        sub_100005474((_QWORD *)(a1 + 48));
      break;
    default:
      return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20)));
  }
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20)));
}

_QWORD *sub_10003E514(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;

  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(a2, v6))
  {
    case 0u:
      v7 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 0;
      goto LABEL_12;
    case 1u:
      v11 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      v8 = a1;
      v9 = v6;
      v10 = 1;
      goto LABEL_12;
    case 2u:
      v12 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
      v13 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
      v14 = (_QWORD *)((char *)a1 + v13);
      v15 = (_QWORD *)((char *)a2 + v13);
      v16 = v15[1];
      *v14 = *v15;
      v14[1] = v16;
      swift_bridgeObjectRetain(v16);
      v8 = a1;
      v9 = v6;
      v10 = 2;
      goto LABEL_12;
    case 3u:
      v17 = a2[1];
      *a1 = *a2;
      a1[1] = v17;
      v18 = a2[3];
      a1[2] = a2[2];
      a1[3] = v18;
      v19 = a2[5];
      a1[4] = a2[4];
      a1[5] = v19;
      v20 = a2[7];
      a1[6] = a2[6];
      a1[7] = v20;
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v20);
      v8 = a1;
      v9 = v6;
      v10 = 3;
      goto LABEL_12;
    case 4u:
      v21 = a2[1];
      *a1 = *a2;
      a1[1] = v21;
      v22 = a2[3];
      a1[2] = a2[2];
      a1[3] = v22;
      v23 = a2[5];
      a1[4] = a2[4];
      a1[5] = v23;
      a1[6] = a2[6];
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v23);
      v8 = a1;
      v9 = v6;
      v10 = 4;
      goto LABEL_12;
    case 5u:
      v24 = a2[1];
      *a1 = *a2;
      a1[1] = v24;
      v25 = a2[3];
      a1[2] = a2[2];
      a1[3] = v25;
      v27 = (void *)a2[4];
      v26 = a2[5];
      a1[4] = v27;
      a1[5] = v26;
      v28 = a2[9];
      swift_bridgeObjectRetain(v24);
      swift_bridgeObjectRetain(v25);
      v29 = v27;
      swift_bridgeObjectRetain(v26);
      if (v28)
      {
        a1[9] = v28;
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v28 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v28);
      }
      else
      {
        v30 = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 4) = v30;
      }
      v8 = a1;
      v9 = v6;
      v10 = 5;
LABEL_12:
      swift_storeEnumTagMultiPayload(v8, v9, v10);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      break;
  }
  v31 = *(int *)(a3 + 20);
  v32 = *(_QWORD *)((char *)a2 + v31);
  *(_QWORD *)((char *)a1 + v31) = v32;
  swift_bridgeObjectRetain(v32);
  return a1;
}

_QWORD *sub_10003E77C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  if (a1 != a2)
  {
    sub_1000076B4((uint64_t)a1, type metadata accessor for PrimarySettingsListItemIdentifier);
    v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(a2, v6))
    {
      case 0u:
        v7 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
        v8 = a1;
        v9 = v6;
        v10 = 0;
        goto LABEL_13;
      case 1u:
        v11 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
        v8 = a1;
        v9 = v6;
        v10 = 1;
        goto LABEL_13;
      case 2u:
        v12 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
        v13 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v14 = (_QWORD *)((char *)a1 + v13);
        v15 = (_QWORD *)((char *)a2 + v13);
        *v14 = *v15;
        v16 = v15[1];
        v14[1] = v16;
        swift_bridgeObjectRetain(v16);
        v8 = a1;
        v9 = v6;
        v10 = 2;
        goto LABEL_13;
      case 3u:
        *a1 = *a2;
        v17 = a2[1];
        a1[1] = v17;
        a1[2] = a2[2];
        v18 = a2[3];
        a1[3] = v18;
        a1[4] = a2[4];
        v19 = a2[5];
        a1[5] = v19;
        a1[6] = a2[6];
        v20 = a2[7];
        a1[7] = v20;
        swift_bridgeObjectRetain(v17);
        swift_bridgeObjectRetain(v18);
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        v8 = a1;
        v9 = v6;
        v10 = 3;
        goto LABEL_13;
      case 4u:
        *a1 = *a2;
        v21 = a2[1];
        a1[1] = v21;
        a1[2] = a2[2];
        v22 = a2[3];
        a1[3] = v22;
        a1[4] = a2[4];
        v23 = a2[5];
        a1[5] = v23;
        a1[6] = a2[6];
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v22);
        swift_bridgeObjectRetain(v23);
        v8 = a1;
        v9 = v6;
        v10 = 4;
        goto LABEL_13;
      case 5u:
        *a1 = *a2;
        v24 = a2[1];
        a1[1] = v24;
        a1[2] = a2[2];
        v25 = a2[3];
        a1[3] = v25;
        v26 = (void *)a2[4];
        a1[4] = v26;
        v27 = a2[5];
        a1[5] = v27;
        v28 = a2[9];
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v25);
        v29 = v26;
        swift_bridgeObjectRetain(v27);
        if (v28)
        {
          a1[9] = v28;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v28 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v28);
        }
        else
        {
          v30 = *((_OWORD *)a2 + 4);
          *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
          *((_OWORD *)a1 + 4) = v30;
        }
        v8 = a1;
        v9 = v6;
        v10 = 5;
LABEL_13:
        swift_storeEnumTagMultiPayload(v8, v9, v10);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
        break;
    }
  }
  v31 = *(int *)(a3 + 20);
  v32 = *(_QWORD *)((char *)a2 + v31);
  v33 = *(_QWORD *)((char *)a1 + v31);
  *(_QWORD *)((char *)a1 + v31) = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v33);
  return a1;
}

char *sub_10003EA60(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
  if (EnumCaseMultiPayload == 2)
  {
    v9 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
    v10 = sub_100004FC8(&qword_10015C420);
    *(_OWORD *)&a1[*(int *)(v10 + 48)] = *(_OWORD *)&a2[*(int *)(v10 + 48)];
    swift_storeEnumTagMultiPayload(a1, v6, 2);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v11 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    v8 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload(a1, v6, 0);
  }
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

char *sub_10003EB90(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a1 != a2)
  {
    sub_1000076B4((uint64_t)a1, type metadata accessor for PrimarySettingsListItemIdentifier);
    v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
    if (EnumCaseMultiPayload == 2)
    {
      v9 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      v10 = sub_100004FC8(&qword_10015C420);
      *(_OWORD *)&a1[*(int *)(v10 + 48)] = *(_OWORD *)&a2[*(int *)(v10 + 48)];
      swift_storeEnumTagMultiPayload(a1, v6, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v11 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      v8 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload(a1, v6, 0);
    }
  }
  v12 = *(int *)(a3 + 20);
  v13 = *(_QWORD *)&a1[v12];
  *(_QWORD *)&a1[v12] = *(_QWORD *)&a2[v12];
  swift_bridgeObjectRelease(v13);
  return a1;
}

uint64_t sub_10003ECE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003ECEC);
}

uint64_t sub_10003ECEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10003ED68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003ED74);
}

uint64_t sub_10003ED74(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for SearchResultSection(uint64_t a1)
{
  uint64_t result;

  result = qword_1001583F8;
  if (!qword_1001583F8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SearchResultSection);
  return result;
}

uint64_t sub_10003EE28(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for PrimarySettingsListItemIdentifier(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10003EE9C()
{
  return sub_100007828(&qword_100158430, type metadata accessor for SearchResultSection, (uint64_t)&unk_1001159C4);
}

Swift::Int sub_10003EEC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  sub_10009FDA0();
  v3 = *(_QWORD *)(v1 + *(int *)(a1 + 20));
  swift_bridgeObjectRetain(v3);
  sub_10003F0D4((uint64_t)v5, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_10003EF2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  sub_10009FDA0();
  v5 = *(_QWORD *)(v2 + *(int *)(a2 + 20));
  swift_bridgeObjectRetain(v5);
  sub_10003F0D4(a1, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_10003EF78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  sub_10009FDA0();
  v4 = *(_QWORD *)(v2 + *(int *)(a2 + 20));
  swift_bridgeObjectRetain(v4);
  sub_10003F0D4((uint64_t)v6, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_10003EFD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;

  sub_1000A103C(a1, a2);
  if ((v6 & 1) != 0)
    return sub_10000A8C8(*(_QWORD *)(a1 + *(int *)(a3 + 20)), *(_QWORD *)(a2 + *(int *)(a3 + 20)));
  else
    return 0;
}

uint64_t sub_10003F02C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000076F0(v1, a1, type metadata accessor for SearchResultSection);
}

BOOL sub_10003F054(uint64_t a1, uint64_t a2)
{
  char v2;

  sub_1000A1FBC(a2, a1);
  return (v2 & 1) == 0;
}

BOOL sub_10003F07C(uint64_t a1, uint64_t a2)
{
  char v2;

  sub_1000A1FBC(a1, a2);
  return (v2 & 1) == 0;
}

void sub_10003F098(uint64_t a1, uint64_t a2)
{
  sub_1000A1FBC(a2, a1);
}

uint64_t sub_10003F0A8()
{
  return sub_100007828(&qword_100158438, type metadata accessor for SearchResultSection, (uint64_t)&unk_1001159EC);
}

void sub_10003F0D4(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  Swift::UInt v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = (int *)type metadata accessor for SearchResult(0);
  v5 = *((_QWORD *)v4 - 1);
  __chkstk_darwin(v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v8);
  if (v8)
  {
    sub_1000076F0(a2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), (uint64_t)v7, type metadata accessor for SearchResult);
    sub_10009FDA0();
    v9 = type metadata accessor for URL(0);
    v10 = sub_100007828((unint64_t *)&unk_10015BAD0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    dispatch thunk of Hashable.hash(into:)(a1, v9, v10);
    v11 = &v7[v4[6]];
    v12 = *(_QWORD *)v11;
    v13 = *((_QWORD *)v11 + 1);
    swift_bridgeObjectRetain(v13);
    String.hash(into:)(a1, v12, v13);
    swift_bridgeObjectRelease(v13);
    v14 = &v7[v4[7]];
    v15 = *((_QWORD *)v14 + 1);
    if (v15)
    {
      v16 = *(_QWORD *)v14;
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain(v15);
      String.hash(into:)(a1, v16, v15);
      swift_bridgeObjectRelease(v15);
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    Hasher._combine(_:)(*(_QWORD *)&v7[v4[8]]);
    __asm { BR              X9 }
  }
}

void sub_10003F318(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  unsigned __int8 v23;
  uint64_t v24;
  void *v25;
  unsigned int v26;
  char v27;
  uint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  char *(**v43)(char);
  uint64_t v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  id v66;
  uint64_t v67;
  uint64_t v68[2];
  char v69;

  v3 = v2;
  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = v2 + OBJC_IVAR____TtC11SettingsApp28AirplaneModeListItemProvider_id;
  v10 = sub_10009CE88();
  v11 = (void **)sub_100007C2C(a1, a1[3]);
  LOBYTE(a1) = sub_10003AF58(0, v10, *v11);
  swift_bridgeObjectRelease(v10);
  if ((a1 & 1) != 0)
  {
    if (qword_100156CC0 != -1)
      swift_once(&qword_100156CC0, sub_10008BE7C);
    v12 = type metadata accessor for Logger(0);
    sub_100007808(v12, (uint64_t)qword_10015D2F8);
    v13 = swift_retain_n(v3, 2);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = swift_slowAlloc(32, -1);
      v68[0] = v17;
      *(_DWORD *)v16 = 136446210;
      sub_1000A03B0();
      v19 = v18;
      v67 = sub_1000DA1F0(v20, v18, v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, v68, v16 + 4, v16 + 12);
      swift_release_n(v3, 2);
      swift_bridgeObjectRelease(v19);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Not including %{public}s due to being hidden.", v16, 0xCu);
      swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);

    }
    else
    {

      swift_release_n(v3, 2);
    }
    v47 = type metadata accessor for PrimarySettingsListItemModel(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(a2, 1, 1, v47);
  }
  else
  {
    v21 = (void *)objc_opt_self(PSLaunchTracker);
    v22 = objc_msgSend(v21, "sharedInstance");
    v23 = objc_msgSend(v22, "launchHasCompleted");

    if ((v23 & 1) != 0)
    {
      v66 = v21;
      if (qword_100156C28 != -1)
        swift_once(&qword_100156C28, sub_10003FC28);
      v24 = a2;
      v25 = (void *)qword_10015D188;
      objc_msgSend((id)qword_10015D188, "setNotifyForExternalChangeOnly:", 1);
      v26 = objc_msgSend(v25, "airplaneMode");
      v27 = v26;
      v28 = OBJC_IVAR____TtC11SettingsApp28AirplaneModeListItemProvider_airplaneMode;
      if (v26 != *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC11SettingsApp28AirplaneModeListItemProvider_airplaneMode))
      {
        sub_100007C2C((_QWORD *)(v3 + OBJC_IVAR____TtC11SettingsApp28AirplaneModeListItemProvider_invalidator), *(_QWORD *)(v3 + OBJC_IVAR____TtC11SettingsApp28AirplaneModeListItemProvider_invalidator + 24));
        v68[0] = (uint64_t)"Airplane Mode";
        v68[1] = 13;
        v69 = 2;
        PassthroughSubject.send(_:)(v68);
      }
      *(_BYTE *)(v3 + v28) = v27;
      v29 = *(void **)(v3 + OBJC_IVAR____TtC11SettingsApp28AirplaneModeListItemProvider_airplaneModeController);
      *(_QWORD *)(v3 + OBJC_IVAR____TtC11SettingsApp28AirplaneModeListItemProvider_airplaneModeController) = v25;
      v30 = v25;

      sub_100012DC4(v9, (uint64_t)v8);
      sub_10009BD7C();
      v32 = v31;
      v34 = v33;
      v36 = v35;
      v64 = v37;
      v65 = *(unsigned __int8 *)(v3 + v28);
      v38 = swift_allocObject(&unk_100149218, 24, 7);
      swift_weakInit(v38 + 16, v3);
      v39 = type metadata accessor for PrimarySettingsListItemModel(0);
      v40 = v24 + *(int *)(v39 + 20);
      sub_10000F48C((uint64_t)v8, v40);
      v41 = (int *)type metadata accessor for PrimarySettingsListToggleModel(0);
      *(_BYTE *)(v40 + v41[5]) = 0;
      v42 = v40 + v41[6];
      *(_QWORD *)v42 = v32;
      *(_QWORD *)(v42 + 8) = v34;
      *(_BYTE *)(v42 + 16) = v36 & 1;
      *(_QWORD *)(v42 + 24) = v64;
      *(_BYTE *)(v40 + v41[7]) = v65;
      v43 = (char *(**)(char))(v40 + v41[8]);
      *v43 = sub_10003FC7C;
      v43[1] = (char *(*)(char))v38;
      sub_100012DC4(v9, v24);
      v44 = type metadata accessor for PrimarySettingsListItemViewType(0);
      swift_storeEnumTagMultiPayload(v40, v44, 3);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v24, 0, 1, v39);
      v45 = objc_msgSend(v66, "sharedInstance");
      LODWORD(v32) = objc_msgSend(v45, "launchHasCompleted");

      if ((_DWORD)v32)
      {
        v46 = objc_msgSend((id)qword_10015D188, "delegate");
        swift_unknownObjectRelease(v46);
        if (!v46)
          objc_msgSend((id)qword_10015D188, "setDelegate:", v3);
      }
    }
    else
    {
      v48 = type metadata accessor for PrimarySettingsListItemModel(0);
      v49 = a2 + *(int *)(v48 + 20);
      sub_100012DC4(v9, v49);
      sub_10009BD7C();
      v51 = v50;
      v53 = v52;
      v55 = v54;
      v57 = v56;
      v58 = (int *)type metadata accessor for PrimarySettingsListLinkModel(0);
      v59 = v58[8];
      v60 = v49 + v58[7];
      *(_BYTE *)(v49 + v58[5]) = 0;
      v61 = v49 + v58[6];
      *(_QWORD *)v61 = v51;
      *(_QWORD *)(v61 + 8) = v53;
      *(_BYTE *)(v61 + 16) = v55 & 1;
      *(_QWORD *)(v61 + 24) = v57;
      *(_QWORD *)v60 = 0;
      *(_QWORD *)(v60 + 8) = 0;
      *(_BYTE *)(v60 + 16) = -1;
      *(_BYTE *)(v49 + v59) = 2;
      sub_100012DC4(v9, a2);
      v62 = type metadata accessor for PrimarySettingsListItemViewType(0);
      swift_storeEnumTagMultiPayload(v49, v62, 6);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(a2, 0, 1, v48);
    }
  }
}

char *sub_10003F8C0(char a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Strong;
  uint64_t v5;
  void *v6;
  id v7;
  char *result;
  char *v9;
  unsigned int v10;
  char v11;
  uint64_t v12;
  _QWORD v13[2];
  char v14;
  char v15[24];
  char v16[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v16, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    v5 = Strong;
    v6 = *(void **)(Strong + OBJC_IVAR____TtC11SettingsApp28AirplaneModeListItemProvider_airplaneModeController);
    v7 = v6;
    result = (char *)swift_release(v5);
    if (!v6)
    {
      __break(1u);
      goto LABEL_11;
    }
    objc_msgSend(v7, "setAirplaneModeWithoutMirroring:", a1 & 1);

  }
  swift_beginAccess(v3, v15, 0, 0);
  result = (char *)swift_weakLoadStrong(v3);
  if (!result)
    return result;
  v9 = result;
  result = *(char **)&result[OBJC_IVAR____TtC11SettingsApp28AirplaneModeListItemProvider_airplaneModeController];
  if (!result)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  v10 = objc_msgSend(result, "airplaneMode");
  v11 = v10;
  v12 = OBJC_IVAR____TtC11SettingsApp28AirplaneModeListItemProvider_airplaneMode;
  if (v10 != v9[OBJC_IVAR____TtC11SettingsApp28AirplaneModeListItemProvider_airplaneMode])
  {
    sub_100007C2C(&v9[OBJC_IVAR____TtC11SettingsApp28AirplaneModeListItemProvider_invalidator], *(_QWORD *)&v9[OBJC_IVAR____TtC11SettingsApp28AirplaneModeListItemProvider_invalidator + 24]);
    v13[0] = "Airplane Mode";
    v13[1] = 13;
    v14 = 2;
    PassthroughSubject.send(_:)(v13);
  }
  v9[v12] = v11;
  return (char *)swift_release(v9);
}

id sub_10003FA00()
{
  uint64_t v0;
  id result;
  char v2;
  uint64_t v3;
  _QWORD v4[2];
  char v5;

  result = *(id *)(v0 + OBJC_IVAR____TtC11SettingsApp28AirplaneModeListItemProvider_airplaneModeController);
  if (result)
  {
    result = objc_msgSend(result, "airplaneMode");
    v2 = (char)result;
    v3 = OBJC_IVAR____TtC11SettingsApp28AirplaneModeListItemProvider_airplaneMode;
    if ((_DWORD)result != *(unsigned __int8 *)(v0
                                              + OBJC_IVAR____TtC11SettingsApp28AirplaneModeListItemProvider_airplaneMode))
    {
      sub_100007C2C((_QWORD *)(v0 + OBJC_IVAR____TtC11SettingsApp28AirplaneModeListItemProvider_invalidator), *(_QWORD *)(v0 + OBJC_IVAR____TtC11SettingsApp28AirplaneModeListItemProvider_invalidator + 24));
      v4[0] = "Airplane Mode";
      v4[1] = 13;
      v5 = 2;
      result = (id)PassthroughSubject.send(_:)(v4);
    }
    *(_BYTE *)(v0 + v3) = v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10003FAAC()
{
  uint64_t v0;

  sub_100013014(v0 + OBJC_IVAR____TtC11SettingsApp28AirplaneModeListItemProvider_id);
  sub_100005474((_QWORD *)(v0 + OBJC_IVAR____TtC11SettingsApp28AirplaneModeListItemProvider_invalidator));

  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10003FAFC()
{
  return type metadata accessor for AirplaneModeListItemProvider(0);
}

uint64_t type metadata accessor for AirplaneModeListItemProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_100158478;
  if (!qword_100158478)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AirplaneModeListItemProvider);
  return result;
}

uint64_t sub_10003FB40(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = type metadata accessor for PrimarySettingsListItemIdentifier(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100115A70;
    v4[2] = &unk_100115A88;
    v4[3] = &unk_100115AA0;
    result = swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_10003FBC8@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_100012DC4(*v1 + OBJC_IVAR____TtC11SettingsApp28AirplaneModeListItemProvider_id, a1);
}

void sub_10003FBE0(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10003F318(a1, a2);
}

id sub_10003FC28()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)RadiosPreferences), "init");
  qword_10015D188 = (uint64_t)result;
  return result;
}

uint64_t sub_10003FC58()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

char *sub_10003FC7C(char a1)
{
  uint64_t v1;

  return sub_10003F8C0(a1, v1);
}

_QWORD *sub_10003FC84(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  id v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;

  v4 = type metadata accessor for PrimarySettingsListBadgedImagelessLinkModel(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v6 = (int *)v4;
    v7 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(a2, v7))
    {
      case 0u:
        v8 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
        v9 = a1;
        v10 = v7;
        v11 = 0;
        goto LABEL_14;
      case 1u:
        v13 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
        v9 = a1;
        v10 = v7;
        v11 = 1;
        goto LABEL_14;
      case 2u:
        v14 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
        v15 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v16 = (_QWORD *)((char *)a1 + v15);
        v17 = (_QWORD *)((char *)a2 + v15);
        v18 = v17[1];
        *v16 = *v17;
        v16[1] = v18;
        swift_bridgeObjectRetain(v18);
        v9 = a1;
        v10 = v7;
        v11 = 2;
        goto LABEL_14;
      case 3u:
        v19 = a2[1];
        *a1 = *a2;
        a1[1] = v19;
        v20 = a2[3];
        a1[2] = a2[2];
        a1[3] = v20;
        v21 = a2[5];
        a1[4] = a2[4];
        a1[5] = v21;
        v22 = a2[7];
        a1[6] = a2[6];
        a1[7] = v22;
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v22);
        v9 = a1;
        v10 = v7;
        v11 = 3;
        goto LABEL_14;
      case 4u:
        v23 = a2[1];
        *a1 = *a2;
        a1[1] = v23;
        v24 = a2[3];
        a1[2] = a2[2];
        a1[3] = v24;
        v25 = a2[5];
        a1[4] = a2[4];
        a1[5] = v25;
        a1[6] = a2[6];
        swift_bridgeObjectRetain(v23);
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v25);
        v9 = a1;
        v10 = v7;
        v11 = 4;
        goto LABEL_14;
      case 5u:
        v26 = a2[1];
        *a1 = *a2;
        a1[1] = v26;
        v27 = a2[3];
        a1[2] = a2[2];
        a1[3] = v27;
        v29 = (void *)a2[4];
        v28 = a2[5];
        a1[4] = v29;
        a1[5] = v28;
        v30 = a2[9];
        swift_bridgeObjectRetain(v26);
        swift_bridgeObjectRetain(v27);
        v31 = v29;
        swift_bridgeObjectRetain(v28);
        if (v30)
        {
          a1[9] = v30;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v30 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v30);
        }
        else
        {
          v32 = *((_OWORD *)a2 + 4);
          *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
          *((_OWORD *)a1 + 4) = v32;
        }
        v9 = a1;
        v10 = v7;
        v11 = 5;
LABEL_14:
        swift_storeEnumTagMultiPayload(v9, v10, v11);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
        break;
    }
    *((_BYTE *)a1 + v6[5]) = *((_BYTE *)a2 + v6[5]);
    v33 = v6[6];
    v34 = (char *)a1 + v33;
    v35 = (char *)a2 + v33;
    v36 = *(_QWORD *)((char *)a2 + v33);
    v37 = *(_QWORD *)((char *)a2 + v33 + 8);
    v38 = *((_BYTE *)a2 + v33 + 16);
    sub_10000BAD4(v36, v37, v38);
    *(_QWORD *)v34 = v36;
    *((_QWORD *)v34 + 1) = v37;
    v34[16] = v38;
    v39 = *((_QWORD *)v35 + 3);
    *((_QWORD *)v34 + 3) = v39;
    *(_QWORD *)((char *)a1 + v6[7]) = *(_QWORD *)((char *)a2 + v6[7]);
    *((_BYTE *)a1 + v6[8]) = *((_BYTE *)a2 + v6[8]);
    swift_bridgeObjectRetain(v39);
  }
  return a1;
}

uint64_t sub_10003FF6C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(a1, v2))
  {
    case 0u:
    case 1u:
      v3 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
      break;
    case 2u:
      v4 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
      v5 = sub_100004FC8(&qword_10015C420);
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v5 + 48) + 8));
      break;
    case 3u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
      break;
    case 4u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      break;
    case 5u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));

      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      if (*(_QWORD *)(a1 + 72))
        sub_100005474((_QWORD *)(a1 + 48));
      break;
    default:
      break;
  }
  v6 = a1 + *(int *)(type metadata accessor for PrimarySettingsListBadgedImagelessLinkModel(0) + 24);
  sub_100007618(*(_QWORD *)v6, *(_QWORD *)(v6 + 8), *(_BYTE *)(v6 + 16));
  return swift_bridgeObjectRelease(*(_QWORD *)(v6 + 24));
}

_QWORD *sub_1000400AC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  id v27;
  __int128 v28;
  int *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;

  v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(a2, v4))
  {
    case 0u:
      v5 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
      v6 = a1;
      v7 = v4;
      v8 = 0;
      goto LABEL_12;
    case 1u:
      v9 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      v6 = a1;
      v7 = v4;
      v8 = 1;
      goto LABEL_12;
    case 2u:
      v10 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      v11 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
      v12 = (_QWORD *)((char *)a1 + v11);
      v13 = (_QWORD *)((char *)a2 + v11);
      v14 = v13[1];
      *v12 = *v13;
      v12[1] = v14;
      swift_bridgeObjectRetain(v14);
      v6 = a1;
      v7 = v4;
      v8 = 2;
      goto LABEL_12;
    case 3u:
      v15 = a2[1];
      *a1 = *a2;
      a1[1] = v15;
      v16 = a2[3];
      a1[2] = a2[2];
      a1[3] = v16;
      v17 = a2[5];
      a1[4] = a2[4];
      a1[5] = v17;
      v18 = a2[7];
      a1[6] = a2[6];
      a1[7] = v18;
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v18);
      v6 = a1;
      v7 = v4;
      v8 = 3;
      goto LABEL_12;
    case 4u:
      v19 = a2[1];
      *a1 = *a2;
      a1[1] = v19;
      v20 = a2[3];
      a1[2] = a2[2];
      a1[3] = v20;
      v21 = a2[5];
      a1[4] = a2[4];
      a1[5] = v21;
      a1[6] = a2[6];
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRetain(v21);
      v6 = a1;
      v7 = v4;
      v8 = 4;
      goto LABEL_12;
    case 5u:
      v22 = a2[1];
      *a1 = *a2;
      a1[1] = v22;
      v23 = a2[3];
      a1[2] = a2[2];
      a1[3] = v23;
      v25 = (void *)a2[4];
      v24 = a2[5];
      a1[4] = v25;
      a1[5] = v24;
      v26 = a2[9];
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v23);
      v27 = v25;
      swift_bridgeObjectRetain(v24);
      if (v26)
      {
        a1[9] = v26;
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v26 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v26);
      }
      else
      {
        v28 = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 4) = v28;
      }
      v6 = a1;
      v7 = v4;
      v8 = 5;
LABEL_12:
      swift_storeEnumTagMultiPayload(v6, v7, v8);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
      break;
  }
  v29 = (int *)type metadata accessor for PrimarySettingsListBadgedImagelessLinkModel(0);
  *((_BYTE *)a1 + v29[5]) = *((_BYTE *)a2 + v29[5]);
  v30 = v29[6];
  v31 = (char *)a1 + v30;
  v32 = (char *)a2 + v30;
  v33 = *(_QWORD *)((char *)a2 + v30);
  v34 = *(_QWORD *)((char *)a2 + v30 + 8);
  v35 = *((_BYTE *)a2 + v30 + 16);
  sub_10000BAD4(v33, v34, v35);
  *(_QWORD *)v31 = v33;
  *((_QWORD *)v31 + 1) = v34;
  v31[16] = v35;
  v36 = *((_QWORD *)v32 + 3);
  *((_QWORD *)v31 + 3) = v36;
  *(_QWORD *)((char *)a1 + v29[7]) = *(_QWORD *)((char *)a2 + v29[7]);
  *((_BYTE *)a1 + v29[8]) = *((_BYTE *)a2 + v29[8]);
  swift_bridgeObjectRetain(v36);
  return a1;
}

_QWORD *sub_100040368(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  __int128 v28;
  int *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;

  if (a1 != a2)
  {
    sub_100013014((uint64_t)a1);
    v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(a2, v4))
    {
      case 0u:
        v5 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
        v6 = a1;
        v7 = v4;
        v8 = 0;
        goto LABEL_13;
      case 1u:
        v9 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
        v6 = a1;
        v7 = v4;
        v8 = 1;
        goto LABEL_13;
      case 2u:
        v10 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
        v11 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v12 = (_QWORD *)((char *)a1 + v11);
        v13 = (_QWORD *)((char *)a2 + v11);
        *v12 = *v13;
        v14 = v13[1];
        v12[1] = v14;
        swift_bridgeObjectRetain(v14);
        v6 = a1;
        v7 = v4;
        v8 = 2;
        goto LABEL_13;
      case 3u:
        *a1 = *a2;
        v15 = a2[1];
        a1[1] = v15;
        a1[2] = a2[2];
        v16 = a2[3];
        a1[3] = v16;
        a1[4] = a2[4];
        v17 = a2[5];
        a1[5] = v17;
        a1[6] = a2[6];
        v18 = a2[7];
        a1[7] = v18;
        swift_bridgeObjectRetain(v15);
        swift_bridgeObjectRetain(v16);
        swift_bridgeObjectRetain(v17);
        swift_bridgeObjectRetain(v18);
        v6 = a1;
        v7 = v4;
        v8 = 3;
        goto LABEL_13;
      case 4u:
        *a1 = *a2;
        v19 = a2[1];
        a1[1] = v19;
        a1[2] = a2[2];
        v20 = a2[3];
        a1[3] = v20;
        a1[4] = a2[4];
        v21 = a2[5];
        a1[5] = v21;
        a1[6] = a2[6];
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v21);
        v6 = a1;
        v7 = v4;
        v8 = 4;
        goto LABEL_13;
      case 5u:
        *a1 = *a2;
        v22 = a2[1];
        a1[1] = v22;
        a1[2] = a2[2];
        v23 = a2[3];
        a1[3] = v23;
        v24 = (void *)a2[4];
        a1[4] = v24;
        v25 = a2[5];
        a1[5] = v25;
        v26 = a2[9];
        swift_bridgeObjectRetain(v22);
        swift_bridgeObjectRetain(v23);
        v27 = v24;
        swift_bridgeObjectRetain(v25);
        if (v26)
        {
          a1[9] = v26;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v26 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v26);
        }
        else
        {
          v28 = *((_OWORD *)a2 + 4);
          *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
          *((_OWORD *)a1 + 4) = v28;
        }
        v6 = a1;
        v7 = v4;
        v8 = 5;
LABEL_13:
        swift_storeEnumTagMultiPayload(v6, v7, v8);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
        break;
    }
  }
  v29 = (int *)type metadata accessor for PrimarySettingsListBadgedImagelessLinkModel(0);
  *((_BYTE *)a1 + v29[5]) = *((_BYTE *)a2 + v29[5]);
  v30 = v29[6];
  v31 = (char *)a1 + v30;
  v32 = (char *)a2 + v30;
  v33 = *(_QWORD *)((char *)a2 + v30);
  v34 = *(_QWORD *)((char *)a2 + v30 + 8);
  v35 = *((_BYTE *)a2 + v30 + 16);
  sub_10000BAD4(v33, v34, v35);
  v36 = *(_QWORD *)v31;
  v37 = *((_QWORD *)v31 + 1);
  v38 = v31[16];
  *(_QWORD *)v31 = v33;
  *((_QWORD *)v31 + 1) = v34;
  v31[16] = v35;
  sub_100007618(v36, v37, v38);
  v39 = *((_QWORD *)v32 + 3);
  v40 = *((_QWORD *)v31 + 3);
  *((_QWORD *)v31 + 3) = v39;
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRelease(v40);
  *(_QWORD *)((char *)a1 + v29[7]) = *(_QWORD *)((char *)a2 + v29[7]);
  *((_BYTE *)a1 + v29[8]) = *((_BYTE *)a2 + v29[8]);
  return a1;
}

char *sub_1000406A4(char *a1, char *a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;

  v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v4);
  if (EnumCaseMultiPayload == 2)
  {
    v7 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    v8 = sub_100004FC8(&qword_10015C420);
    *(_OWORD *)&a1[*(int *)(v8 + 48)] = *(_OWORD *)&a2[*(int *)(v8 + 48)];
    swift_storeEnumTagMultiPayload(a1, v4, 2);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v9 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
    swift_storeEnumTagMultiPayload(a1, v4, 1);
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    v6 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, v4, 0);
  }
  v10 = (int *)type metadata accessor for PrimarySettingsListBadgedImagelessLinkModel(0);
  a1[v10[5]] = a2[v10[5]];
  v11 = v10[6];
  v12 = &a1[v11];
  v13 = &a2[v11];
  v14 = *((_OWORD *)v13 + 1);
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *((_OWORD *)v12 + 1) = v14;
  *(_QWORD *)&a1[v10[7]] = *(_QWORD *)&a2[v10[7]];
  a1[v10[8]] = a2[v10[8]];
  return a1;
}

char *sub_100040804(char *a1, char *a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;

  if (a1 != a2)
  {
    sub_100013014((uint64_t)a1);
    v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v4);
    if (EnumCaseMultiPayload == 2)
    {
      v7 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      v8 = sub_100004FC8(&qword_10015C420);
      *(_OWORD *)&a1[*(int *)(v8 + 48)] = *(_OWORD *)&a2[*(int *)(v8 + 48)];
      swift_storeEnumTagMultiPayload(a1, v4, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v9 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      swift_storeEnumTagMultiPayload(a1, v4, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, v4, 0);
    }
  }
  v10 = (int *)type metadata accessor for PrimarySettingsListBadgedImagelessLinkModel(0);
  a1[v10[5]] = a2[v10[5]];
  v11 = v10[6];
  v12 = &a1[v11];
  v13 = &a2[v11];
  LOBYTE(v11) = a2[v11 + 16];
  v14 = *(_QWORD *)v12;
  v15 = *((_QWORD *)v12 + 1);
  v16 = v12[16];
  *(_OWORD *)v12 = *(_OWORD *)v13;
  v12[16] = v11;
  sub_100007618(v14, v15, v16);
  v17 = *((_QWORD *)v12 + 3);
  *((_QWORD *)v12 + 3) = *((_QWORD *)v13 + 3);
  swift_bridgeObjectRelease(v17);
  *(_QWORD *)&a1[v10[7]] = *(_QWORD *)&a2[v10[7]];
  a1[v10[8]] = a2[v10[8]];
  return a1;
}

uint64_t sub_1000409A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000409B0);
}

uint64_t sub_1000409B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PrimarySettingsListBadgedImagelessLinkModel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1000409EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000409F8);
}

uint64_t sub_1000409F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PrimarySettingsListBadgedImagelessLinkModel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for PrimarySettingsListBadgedImagelessLink(uint64_t a1)
{
  uint64_t result;

  result = qword_1001585D0;
  if (!qword_1001585D0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PrimarySettingsListBadgedImagelessLink);
  return result;
}

uint64_t sub_100040A74(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for PrimarySettingsListBadgedImagelessLinkModel(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100040ADC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10012A244, 1);
}

uint64_t sub_100040AEC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  __int128 *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  char v33;
  uint64_t v34;

  v31 = a1;
  v30 = type metadata accessor for BadgeProminence(0);
  v2 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_100004FC8(&qword_100158608);
  v5 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004FC8(&qword_100158610);
  __chkstk_darwin(v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_100004FC8(&qword_100158618);
  __chkstk_darwin(v28);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (int *)type metadata accessor for PrimarySettingsListBadgedImagelessLinkModel(0);
  v14 = v13[6];
  v27 = v1;
  v15 = (__int128 *)(v1 + v14);
  v16 = *((_BYTE *)v15 + 16);
  v17 = *((_QWORD *)v15 + 3);
  v32 = *v15;
  v33 = v16;
  v34 = v17;
  v18 = View.badge(_:)(*(_QWORD *)(v1 + v13[7]), &type metadata for Text, &protocol witness table for Text);
  static BadgeProminence.increased.getter(v18);
  KeyPath = swift_getKeyPath(&unk_100115B68);
  v20 = (uint64_t *)&v10[*(int *)(v8 + 36)];
  v21 = sub_100004FC8(&qword_100158620);
  v22 = v30;
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))((char *)v20 + *(int *)(v21 + 28), v4, v30);
  *v20 = KeyPath;
  v23 = v29;
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v10, v7, v29);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v22);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v23);
  if (*(_BYTE *)(v27 + v13[5]))
    v24 = 0.5;
  else
    v24 = 1.0;
  sub_100040D50((uint64_t)v10, (uint64_t)v12);
  *(double *)&v12[*(int *)(v28 + 36)] = v24;
  sub_100040D98((uint64_t)v10);
  return sub_100040DD8((uint64_t)v12, v31);
}

uint64_t sub_100040D50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004FC8(&qword_100158610);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100040D98(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004FC8(&qword_100158610);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100040DD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004FC8(&qword_100158618);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100040E24()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100158628;
  if (!qword_100158628)
  {
    v1 = sub_100005430(&qword_100158618);
    sub_100040E90();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100158628);
  }
  return result;
}

unint64_t sub_100040E90()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100158630;
  if (!qword_100158630)
  {
    v1 = sub_100005430(&qword_100158610);
    v2[0] = &type metadata for Text;
    v2[1] = &protocol witness table for Text;
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.badge(_:)>>, 1);
    sub_100040F20();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100158630);
  }
  return result;
}

unint64_t sub_100040F20()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100158638;
  if (!qword_100158638)
  {
    v1 = sub_100005430(&qword_100158620);
    result = swift_getWitnessTable(&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100158638);
  }
  return result;
}

ValueMetadata *type metadata accessor for OSAutomaticUpdatesURLRoute()
{
  return &type metadata for OSAutomaticUpdatesURLRoute;
}

void sub_100040F7C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  char v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (qword_100156CB0 != -1)
    swift_once(&qword_100156CB0, sub_10008BE28);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_100007808(v4, (uint64_t)qword_10015D2C8);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = swift_slowAlloc(64, -1);
    v27 = v9;
    *(_DWORD *)v8 = 136315394;
    v26 = sub_1000DA1F0(0xD00000000000001FLL, 0x80000001001207F0, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2080;
    v26 = sub_1000DA1F0(0xD000000000000026, 0x800000010011FD10, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v8 + 14, v8 + 22);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Start (%s.%s)…", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v9, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }

  URL.scheme.getter(v10);
  if (!v11)
    goto LABEL_11;
  v12 = v11;
  v13 = String.lowercased()();
  swift_bridgeObjectRelease(v12);
  if (v13._countAndFlagsBits != 0xD000000000000014 || v13._object != (void *)0x80000001001207A0)
  {
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v13._countAndFlagsBits, v13._object, 0xD000000000000014, 0x80000001001207A0, 0);
    swift_bridgeObjectRelease(v13._object);
    if ((v14 & 1) != 0)
      goto LABEL_10;
LABEL_11:
    v25 = sub_100004FC8(&qword_1001570F8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(a2, 1, 1, v25);
    goto LABEL_12;
  }
  swift_bridgeObjectRelease(0x80000001001207A0);
LABEL_10:
  v15 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(a2, a1, v15);
  v16 = (int *)type metadata accessor for SettingsURLDestination(0);
  v17 = a2 + v16[5];
  v18 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  swift_storeEnumTagMultiPayload(v17, v18, 21);
  v19 = type metadata accessor for SettingsURLDestination.Action(0);
  swift_storeEnumTagMultiPayload(v17, v19, 1);
  v20 = sub_100004FC8(&qword_100157390);
  v21 = type metadata accessor for URLQueryItem(0);
  v22 = swift_allocObject(v20, ((*(unsigned __int8 *)(*(_QWORD *)(v21 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v21 - 8) + 80))+ 2 * *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v21 - 8) + 80) | 7);
  *(_OWORD *)(v22 + 16) = xmmword_100115BA0;
  URLQueryItem.init(name:value:)(1752457584, 0xE400000000000000, 0xD00000000000002CLL, 0x80000001001207C0);
  URLQueryItem.init(name:value:)(1953460082, 0xE400000000000000, 0x6C6172656E6547, 0xE700000000000000);
  v23 = (_QWORD *)(a2 + v16[7]);
  *(_QWORD *)(a2 + v16[6]) = v22;
  *v23 = 0;
  v23[1] = 0;
  v24 = sub_100004FC8(&qword_1001570F8);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(a2, 0, 1, v24);
LABEL_12:
  sub_1000413D4();
}

uint64_t sub_100041324(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  char v5;

  URL.scheme.getter(a1);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = String.lowercased()();
  swift_bridgeObjectRelease(v2);
  if (v3._countAndFlagsBits == 0xD000000000000014 && v3._object == (void *)0x80000001001207A0)
  {
    swift_bridgeObjectRelease(0x80000001001207A0);
    return 1;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)(v3._countAndFlagsBits, v3._object, 0xD000000000000014, 0x80000001001207A0, 0);
    swift_bridgeObjectRelease(v3._object);
    return v5 & 1;
  }
}

void sub_1000413D4()
{
  uint64_t v0;
  uint64_t v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *oslog;
  uint64_t v6;
  uint64_t v7;

  if (qword_100156CB0 != -1)
    swift_once(&qword_100156CB0, sub_10008BE28);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_100007808(v0, (uint64_t)qword_10015D2C8);
  oslog = Logger.logObject.getter(v1);
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v2))
  {
    v3 = swift_slowAlloc(22, -1);
    v4 = swift_slowAlloc(64, -1);
    v7 = v4;
    *(_DWORD *)v3 = 136315394;
    v6 = sub_1000DA1F0(0xD00000000000001FLL, 0x80000001001207F0, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v6, &v7, v3 + 4, v3 + 12);
    *(_WORD *)(v3 + 12) = 2080;
    v6 = sub_1000DA1F0(0xD000000000000026, 0x800000010011FD10, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v6, &v7, v3 + 14, v3 + 22);
    _os_log_impl((void *)&_mh_execute_header, oslog, v2, "…Complete (%s.%s)", (uint8_t *)v3, 0x16u);
    swift_arrayDestroy(v4, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v4, -1, -1);
    swift_slowDealloc(v3, -1, -1);

  }
  else
  {

  }
}

ValueMetadata *type metadata accessor for FinanceScriptURLRoute()
{
  return &type metadata for FinanceScriptURLRoute;
}

void sub_1000415B0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  char v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  int *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (qword_100156CB0 != -1)
    swift_once(&qword_100156CB0, sub_10008BE28);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_100007808(v4, (uint64_t)qword_10015D2C8);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = swift_slowAlloc(64, -1);
    v24 = v9;
    *(_DWORD *)v8 = 136315394;
    v23 = sub_1000DA1F0(0xD00000000000001ALL, 0x8000000100120830, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2080;
    v23 = sub_1000DA1F0(0xD000000000000026, 0x800000010011FD10, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v8 + 14, v8 + 22);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Start (%s.%s)…", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v9, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }

  URL.scheme.getter(v10);
  if (!v11)
    goto LABEL_11;
  v12 = v11;
  v13 = String.lowercased()();
  swift_bridgeObjectRelease(v12);
  if (v13._countAndFlagsBits != 0xD000000000000014 || v13._object != (void *)0x8000000100120810)
  {
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v13._countAndFlagsBits, v13._object, 0xD000000000000014, 0x8000000100120810, 0);
    swift_bridgeObjectRelease(v13._object);
    if ((v14 & 1) != 0)
      goto LABEL_10;
LABEL_11:
    v22 = sub_100004FC8(&qword_1001570F8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(a2, 1, 1, v22);
    goto LABEL_12;
  }
  swift_bridgeObjectRelease(0x8000000100120810);
LABEL_10:
  v15 = type metadata accessor for URL(0);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
  v16(a2, a1, v15);
  v17 = (int *)type metadata accessor for SettingsURLDestination(0);
  v18 = a2 + v17[5];
  v16(v18, a1, v15);
  v19 = type metadata accessor for SettingsURLDestination.Action(0);
  swift_storeEnumTagMultiPayload(v18, v19, 3);
  v20 = (_QWORD *)(a2 + v17[7]);
  *(_QWORD *)(a2 + v17[6]) = _swiftEmptyArrayStorage;
  *v20 = 0;
  v20[1] = 0;
  v21 = sub_100004FC8(&qword_1001570F8);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(a2, 0, 1, v21);
LABEL_12:
  sub_10004196C();
}

uint64_t sub_1000418BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  char v5;

  URL.scheme.getter(a1);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = String.lowercased()();
  swift_bridgeObjectRelease(v2);
  if (v3._countAndFlagsBits == 0xD000000000000014 && v3._object == (void *)0x8000000100120810)
  {
    swift_bridgeObjectRelease(0x8000000100120810);
    return 1;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)(v3._countAndFlagsBits, v3._object, 0xD000000000000014, 0x8000000100120810, 0);
    swift_bridgeObjectRelease(v3._object);
    return v5 & 1;
  }
}

void sub_10004196C()
{
  uint64_t v0;
  uint64_t v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *oslog;
  uint64_t v6;
  uint64_t v7;

  if (qword_100156CB0 != -1)
    swift_once(&qword_100156CB0, sub_10008BE28);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_100007808(v0, (uint64_t)qword_10015D2C8);
  oslog = Logger.logObject.getter(v1);
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v2))
  {
    v3 = swift_slowAlloc(22, -1);
    v4 = swift_slowAlloc(64, -1);
    v7 = v4;
    *(_DWORD *)v3 = 136315394;
    v6 = sub_1000DA1F0(0xD00000000000001ALL, 0x8000000100120830, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v6, &v7, v3 + 4, v3 + 12);
    *(_WORD *)(v3 + 12) = 2080;
    v6 = sub_1000DA1F0(0xD000000000000026, 0x800000010011FD10, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v6, &v7, v3 + 14, v3 + 22);
    _os_log_impl((void *)&_mh_execute_header, oslog, v2, "…Complete (%s.%s)", (uint8_t *)v3, 0x16u);
    swift_arrayDestroy(v4, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v4, -1, -1);
    swift_slowDealloc(v3, -1, -1);

  }
  else
  {

  }
}

void sub_100041B38(uint64_t a1)
{
  sub_1000424A8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

void sub_100041B54()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_100041B94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  String.hash(into:)(&v3, v0, v1);
  return Hasher._finalize()();
}

void sub_100041BDC()
{
  __asm { BR              X11 }
}

uint64_t sub_100041C0C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return String.hash(into:)(a3, a1, a2);
}

void sub_100041C1C()
{
  Hasher._combine(_:)(1uLL);
}

uint64_t destroy for Icon.IconType(uint64_t a1)
{
  return sub_10000BB54(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s11SettingsApp4IconV8IconTypeOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_10000BB2C(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for Icon.IconType(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_10000BB2C(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_10000BB54(v6, v7, v8);
  return a1;
}

__n128 initializeWithTake for Icon.IconType(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for Icon.IconType(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_10000BB54(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for Icon.IconType(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Icon.IconType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_100041DD0(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 2u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 3);
}

uint64_t sub_100041DE8(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(_QWORD *)result = a2 - 3;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Icon.IconType()
{
  return &type metadata for Icon.IconType;
}

unint64_t sub_100041E14()
{
  unint64_t result;

  result = qword_100158640;
  if (!qword_100158640)
  {
    result = swift_getWitnessTable(&unk_100115C6C, &type metadata for Icon.IconType);
    atomic_store(result, (unint64_t *)&qword_100158640);
  }
  return result;
}

void sub_100041E58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *(unsigned __int8 *)(v1 + 16);
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_100041E94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  String.hash(into:)(&v3, v0, v1);
  return Hasher._finalize()();
}

void sub_100041EDC()
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = sub_100004FC8(&qword_100158648);
  __chkstk_darwin(v4);
  v3 = sub_100004FC8(&qword_100158650);
  __chkstk_darwin(v3);
  v1 = sub_100004FC8(&qword_100158658);
  __chkstk_darwin(v1);
  v2 = sub_100004FC8(&qword_100158660);
  __chkstk_darwin(v2);
  __asm { BR              X10 }
}

uint64_t sub_100042014()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  *(_QWORD *)(v4 - 128) = v1;
  *(_BYTE *)(v4 - 120) = 0;
  sub_10000BB2C(v1, v0, 0);
  swift_retain(v1);
  _ConditionalContent<>.init(storage:)(v4 - 128, &type metadata for Image, &type metadata for EmptyView, &protocol witness table for Image, &protocol witness table for EmptyView);
  v5 = *(_BYTE *)(v4 - 104);
  *(_QWORD *)v3 = *(_QWORD *)(v4 - 112);
  *(_BYTE *)(v3 + 8) = v5;
  swift_storeEnumTagMultiPayload(v3, *(_QWORD *)(v4 - 136), 1);
  v6 = sub_100004FC8(&qword_100158668);
  v7 = v2;
  v8 = sub_100042820();
  v9 = sub_10004289C();
  _ConditionalContent<>.init(storage:)(v3, v7, v6, v8, v9);
  return sub_10000BB54(v1, v0, 0);
}

void sub_100042470()
{
  sub_100041EDC();
}

void sub_1000424A8(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }
}

uint64_t sub_1000424E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  if (a6)
    return 0;
  sub_10000BB2C(v9, v8, 0);
  sub_10000BB2C(v7, v6, 0);
  v10 = static Image.== infix(_:_:)(v9, v7);
  sub_10000BB54(v7, v6, 0);
  sub_10000BB54(v9, v8, 0);
  return v10 & 1;
}

uint64_t sub_1000425D0(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    return swift_retain(result);
  return result;
}

uint64_t destroy for Icon(uint64_t a1)
{
  sub_10004260C(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  return sub_10000BB54(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t sub_10004260C(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    return swift_release(result);
  return result;
}

uint64_t initializeWithCopy for Icon(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a2;
  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  sub_1000425D0(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(v2 + 16);
  v7 = *(_QWORD *)(v2 + 24);
  LOBYTE(v2) = *(_BYTE *)(v2 + 32);
  sub_10000BB2C(v6, v7, v2);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v2;
  return a1;
}

uint64_t assignWithCopy for Icon(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v2 = a2;
  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  sub_1000425D0(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  sub_10004260C(v6, v7);
  v8 = *(_QWORD *)(v2 + 16);
  v9 = *(_QWORD *)(v2 + 24);
  LOBYTE(v2) = *(_BYTE *)(v2 + 32);
  sub_10000BB2C(v8, v9, v2);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v2;
  sub_10000BB54(v10, v11, v12);
  return a1;
}

__n128 initializeWithTake for Icon(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for Icon(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  sub_10004260C(v6, v7);
  v8 = *((_BYTE *)a2 + 32);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  v11 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v8;
  sub_10000BB54(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for Icon(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Icon(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Icon()
{
  return &type metadata for Icon;
}

uint64_t sub_100042810(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10012A2DC, 1);
}

unint64_t sub_100042820()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100158670;
  if (!qword_100158670)
  {
    v1 = sub_100005430(&qword_100158658);
    sub_100007868(&qword_100158678, &qword_100158660, (uint64_t)&protocol conformance descriptor for AsyncIconImage<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100158670);
  }
  return result;
}

unint64_t sub_10004289C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100158680;
  if (!qword_100158680)
  {
    v1 = sub_100005430(&qword_100158668);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100158680);
  }
  return result;
}

uint64_t sub_100042900(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004FC8(&qword_100158658);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100042948(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004FC8(&qword_100158658);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100042988()
{
  return sub_100007868(&qword_100158688, &qword_100158690, (uint64_t)&protocol conformance descriptor for _UnaryViewAdaptor<A>);
}

ValueMetadata *type metadata accessor for ApplicationPrefsURLRoute()
{
  return &type metadata for ApplicationPrefsURLRoute;
}

void sub_1000429C4(void (*a1)(char *, uint64_t, uint64_t)@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v47)(char *, char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  Swift::String v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t (*v82)(char *, unint64_t, uint64_t);
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  id v92;
  uint64_t v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  NSObject *v107;
  os_log_type_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  void (*v116)(char *, uint64_t);
  uint64_t v117;
  void (*v118)(char *, char *);
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  void (*v129)(char *, uint64_t);
  void (*v130)(char *, uint64_t);
  int *v131;
  char *v132;
  char *v133;
  void (*v134)(char *, uint64_t);
  uint64_t v135;
  void (*v136)(char *, uint64_t);
  char v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void (*v145)(char *, uint64_t);
  uint64_t v146;
  int *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  char *v161;
  char *v162;
  char *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  void (*v172)(char *, uint64_t, uint64_t);
  uint64_t v173;
  unint64_t v174;
  uint64_t v175[3];

  v172 = a1;
  v3 = sub_100004FC8((uint64_t *)&unk_10015C9A0);
  __chkstk_darwin(v3);
  v158 = (char *)&v149 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v156 = type metadata accessor for SettingsURLDestination.Action(0);
  __chkstk_darwin(v156);
  v157 = (char *)&v149 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100004FC8(&qword_10015C510);
  __chkstk_darwin(v6);
  v161 = (char *)&v149 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URLQueryItem(0);
  v9 = *(_QWORD *)(v8 - 8);
  v169 = v8;
  v170 = v9;
  v10 = __chkstk_darwin(v8);
  v168 = (char *)&v149 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v159 = (char *)&v149 - v12;
  v166 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v166 - 8);
  v14 = __chkstk_darwin(v166);
  v16 = (char *)&v149 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v154 = (char *)&v149 - v18;
  v19 = __chkstk_darwin(v17);
  v160 = (char *)&v149 - v20;
  __chkstk_darwin(v19);
  v167 = (char *)&v149 - v21;
  v22 = sub_100004FC8(&qword_1001570F0);
  v23 = __chkstk_darwin(v22);
  v163 = (char *)&v149 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v26 = (char *)&v149 - v25;
  v27 = type metadata accessor for URLComponents(0);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = __chkstk_darwin(v27);
  v31 = (char *)&v149 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __chkstk_darwin(v29);
  v162 = (char *)&v149 - v33;
  __chkstk_darwin(v32);
  v35 = (char *)&v149 - v34;
  if (qword_100156CB0 != -1)
    swift_once(&qword_100156CB0, sub_10008BE28);
  v36 = type metadata accessor for Logger(0);
  v153 = sub_100007808(v36, (uint64_t)qword_10015D2C8);
  v37 = Logger.logObject.getter(v153);
  v38 = static os_log_type_t.default.getter();
  v39 = os_log_type_enabled(v37, v38);
  v164 = v31;
  v165 = v13;
  v155 = v16;
  if (v39)
  {
    v40 = swift_slowAlloc(22, -1);
    v41 = swift_slowAlloc(64, -1);
    v175[0] = v41;
    *(_DWORD *)v40 = 136315394;
    v171 = a2;
    v173 = sub_1000DA1F0(0xD00000000000001DLL, 0x8000000100120880, v175);
    v152 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v173, &v174, v40 + 4, v40 + 12);
    *(_WORD *)(v40 + 12) = 2080;
    a2 = v171;
    v173 = sub_1000DA1F0(0xD000000000000026, 0x800000010011FD10, v175);
    v28 = v152;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v173, &v174, v40 + 14, v40 + 22);
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "Start (%s.%s)…", (uint8_t *)v40, 0x16u);
    swift_arrayDestroy(v41, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1, -1);
    swift_slowDealloc(v40, -1, -1);
  }

  v43 = URL.absoluteString.getter(v42);
  v45 = v44;
  URLComponents.init(string:)(v43);
  swift_bridgeObjectRelease(v45);
  v46 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48);
  if (v46((uint64_t)v26, 1, v27) != 1)
  {
    v47 = *(uint64_t (**)(char *, char *, uint64_t))(v28 + 32);
    v48 = v47(v35, v26, v27);
    URLComponents.scheme.getter(v48);
    if (v49)
    {
      v50 = v49;
      v51 = v28;
      v151 = v35;
      v52 = String.lowercased()();
      swift_bridgeObjectRelease(v50);
      if (v52._countAndFlagsBits == 0x666572702D707061 && v52._object == (void *)0xE900000000000073)
      {
        v53 = swift_bridgeObjectRelease(0xE900000000000073);
        v35 = v151;
        goto LABEL_12;
      }
      v54 = _stringCompareWithSmolCheck(_:_:expecting:)(v52._countAndFlagsBits, v52._object, 0x666572702D707061, 0xE900000000000073, 0);
      v53 = swift_bridgeObjectRelease(v52._object);
      v35 = v151;
      if ((v54 & 1) != 0)
      {
LABEL_12:
        v171 = a2;
        v55 = URLComponents.path.getter(v53);
        v57 = v56;
        v58 = swift_bridgeObjectRelease(v56);
        v59 = HIBYTE(v57) & 0xF;
        if ((v57 & 0x2000000000000000) == 0)
          v59 = v55 & 0xFFFFFFFFFFFFLL;
        if (!v59)
        {
          (*(void (**)(char *, uint64_t))(v28 + 8))(v35, v27);
          a2 = v171;
          goto LABEL_20;
        }
        v60 = URLComponents.path.getter(v58);
        v62 = v61;
        v175[0] = v60;
        v175[1] = v61;
        v173 = 38;
        v174 = 0xE100000000000000;
        v63 = sub_100008A5C();
        v64 = (_QWORD *)StringProtocol.components<A>(separatedBy:)(&v173, &type metadata for String, &type metadata for String, v63, v63);
        swift_bridgeObjectRelease(v62);
        if (!v64[2])
        {
          swift_bridgeObjectRelease(v64);
          goto LABEL_41;
        }
        v65 = v64[4];
        v66 = v64[5];
        swift_bridgeObjectRetain(v66);
        swift_bridgeObjectRelease(v64);
        v67 = sub_100019DF4((uint64_t)v167);
        v68 = URL.absoluteString.getter(v67);
        v70 = v69;
        v71 = (uint64_t)v163;
        URLComponents.init(string:)(v68);
        swift_bridgeObjectRelease(v70);
        if (v46(v71, 1, v27) == 1)
        {
          sub_10000BA50(v71, &qword_1001570F0);
          v72 = v164;
          goto LABEL_39;
        }
        v152 = v65;
        v74 = v47(v162, (char *)v71, v27);
        v75 = URLComponents.queryItems.getter(v74);
        if (!v75)
        {
          v90 = (uint64_t)v161;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v170 + 56))(v161, 1, 1, v169);
          v72 = v164;
LABEL_38:
          (*(void (**)(char *, uint64_t))(v51 + 8))(v162, v27);
          sub_10000BA50(v90, &qword_10015C510);
          v65 = v152;
          goto LABEL_39;
        }
        v76 = v75;
        v77 = *(_QWORD *)(v75 + 16);
        v78 = v169;
        v79 = v170;
        if (v77)
        {
          v150 = v66;
          v163 = (char *)v27;
          v80 = v75 + ((*(unsigned __int8 *)(v170 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v170 + 80));
          v81 = *(_QWORD *)(v170 + 72);
          v82 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v170 + 16);
          swift_bridgeObjectRetain(v75);
          v83 = v168;
          v79 = v170;
          while (1)
          {
            v84 = v82(v83, v80, v78);
            v85 = URLQueryItem.name.getter(v84);
            v87 = v86;
            if (v85 == 0x746567726174 && v86 == 0xE600000000000000)
            {
              swift_bridgeObjectRelease(v76);
              v91 = 0xE600000000000000;
              v35 = v151;
              v72 = v164;
              goto LABEL_35;
            }
            v88 = _stringCompareWithSmolCheck(_:_:expecting:)(v85, v86, 0x746567726174, 0xE600000000000000, 0);
            swift_bridgeObjectRelease(v87);
            if ((v88 & 1) != 0)
              break;
            v83 = v168;
            v78 = v169;
            (*(void (**)(char *, uint64_t))(v79 + 8))(v168, v169);
            v80 += v81;
            if (!--v77)
            {
              swift_bridgeObjectRelease(v76);
              v89 = 1;
              v27 = (uint64_t)v163;
              v72 = v164;
              v35 = v151;
              v90 = (uint64_t)v161;
              goto LABEL_36;
            }
          }
          v91 = v76;
          v35 = v151;
          v72 = v164;
          v78 = v169;
LABEL_35:
          v79 = v170;
          swift_bridgeObjectRelease(v91);
          v90 = (uint64_t)v161;
          (*(void (**)(char *, char *, uint64_t))(v79 + 32))(v161, v168, v78);
          v89 = 0;
          v27 = (uint64_t)v163;
LABEL_36:
          v66 = v150;
        }
        else
        {
          v89 = 1;
          v72 = v164;
          v90 = (uint64_t)v161;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v79 + 56))(v90, v89, 1, v78);
        swift_bridgeObjectRelease(v76);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v79 + 48))(v90, 1, v78) == 1)
          goto LABEL_38;
        v120 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v79 + 32))(v159, v90, v78);
        v121 = URLQueryItem.value.getter(v120);
        v65 = v152;
        if (v122)
        {
          v123 = v122;
          if (v121 == 0xD000000000000020 && v122 == 0x8000000100120850)
          {
            swift_bridgeObjectRelease(v122);
LABEL_54:
            v138 = v66;
            v139 = v165;
            (*(void (**)(char *, char *, uint64_t))(v165 + 16))(v160, v167, v166);
            v140 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
            v141 = (uint64_t)v157;
            swift_storeEnumTagMultiPayload(v157, v140, 17);
            swift_storeEnumTagMultiPayload(v141, v156, 1);
            v142 = sub_100004FC8(&qword_100157390);
            v143 = v170;
            v144 = swift_allocObject(v142, ((*(unsigned __int8 *)(v170 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v170 + 80))+ 2 * *(_QWORD *)(v170 + 72), *(unsigned __int8 *)(v170 + 80) | 7);
            *(_OWORD *)(v144 + 16) = xmmword_100115BA0;
            URLQueryItem.init(name:value:)(1953460082, 0xE400000000000000, 0xD000000000000010, 0x800000010011F1A0);
            URLQueryItem.init(name:value:)(1752457584, 0xE400000000000000, v152, v138);
            swift_bridgeObjectRelease(v138);
            (*(void (**)(char *, uint64_t))(v143 + 8))(v159, v169);
            v145 = *(void (**)(char *, uint64_t))(v51 + 8);
            v145(v162, v27);
            v146 = v166;
            (*(void (**)(char *, uint64_t))(v139 + 8))(v167, v166);
            v145(v35, v27);
            v147 = (int *)type metadata accessor for SettingsURLDestination(0);
            v132 = v171;
            v133 = &v171[v147[7]];
            (*(void (**)(char *, char *, uint64_t))(v139 + 32))(v171, v160, v146);
            sub_100043CA8(v141, (uint64_t)&v132[v147[5]]);
            *(_QWORD *)&v132[v147[6]] = v144;
            goto LABEL_55;
          }
          v137 = _stringCompareWithSmolCheck(_:_:expecting:)(v121, v122, 0xD000000000000020, 0x8000000100120850, 0);
          swift_bridgeObjectRelease(v123);
          if ((v137 & 1) != 0)
            goto LABEL_54;
        }
        (*(void (**)(char *, uint64_t))(v170 + 8))(v159, v78);
        (*(void (**)(char *, uint64_t))(v51 + 8))(v162, v27);
LABEL_39:
        v92 = objc_allocWithZone((Class)LSApplicationRecord);
        swift_bridgeObjectRetain(v66);
        v94 = sub_100043A04(v65, v66, 0);

        if (v94)
        {
          URLComponents.init()();
          URLComponents.scheme.setter(0xD000000000000013, 0x800000010011F0D0);
          URLComponents.host.setter(0xD000000000000017, 0x800000010011FA20);
          v95 = sub_100004FC8(&qword_100157360);
          v96 = swift_allocObject(v95, 64, 7);
          *(_OWORD *)(v96 + 16) = xmmword_100115BA0;
          *(_QWORD *)(v96 + 32) = 0;
          *(_QWORD *)(v96 + 40) = 0xE000000000000000;
          *(_QWORD *)(v96 + 48) = v65;
          *(_QWORD *)(v96 + 56) = v66;
          v175[0] = v96;
          v97 = sub_100004FC8(&qword_100157350);
          v98 = sub_10000F228();
          v99 = BidirectionalCollection<>.joined(separator:)(47, 0xE100000000000000, v97, v98);
          v101 = v100;
          swift_bridgeObjectRelease(v96);
          v102 = URLComponents.path.setter(v99, v101);
          v103 = (uint64_t)v158;
          URLComponents.url.getter(v102);
          v104 = v165;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v165 + 48))(v103, 1, v166) == 1)
          {
            sub_10000BA50(v103, (uint64_t *)&unk_10015C9A0);
            v105 = v155;
            v106 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v104 + 16))(v155, v172, v166);
            v107 = Logger.logObject.getter(v106);
            v108 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v107, v108))
            {
              v109 = swift_slowAlloc(22, -1);
              v110 = swift_slowAlloc(32, -1);
              v175[0] = v110;
              *(_DWORD *)v109 = 141558275;
              v173 = 1752392040;
              v111 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v173, &v174, v109 + 4, v109 + 12);
              *(_WORD *)(v109 + 12) = 2081;
              v163 = (char *)v27;
              v112 = v166;
              v113 = URL.absoluteString.getter(v111);
              v115 = v114;
              v173 = sub_1000DA1F0(v113, v114, v175);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v173, &v174, v109 + 14, v109 + 22);
              swift_bridgeObjectRelease(v115);
              v116 = *(void (**)(char *, uint64_t))(v165 + 8);
              v117 = v112;
              v116(v105, v112);
              _os_log_impl((void *)&_mh_execute_header, v107, v108, "Could not create re-direct URL for settings-navigation for input URL %{private,mask.hash}s", (uint8_t *)v109, 0x16u);
              swift_arrayDestroy(v110, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v110, -1, -1);
              swift_slowDealloc(v109, -1, -1);

              v118 = *(void (**)(char *, char *))(v51 + 8);
              v119 = v163;
              v118(v164, v163);
              v116(v167, v117);
              v118(v151, v119);
            }
            else
            {

              v134 = *(void (**)(char *, uint64_t))(v104 + 8);
              v135 = v166;
              v134(v105, v166);
              v136 = *(void (**)(char *, uint64_t))(v51 + 8);
              v136(v72, v27);
              v134(v167, v135);
              v136(v35, v27);
            }
            goto LABEL_42;
          }
          v172 = *(void (**)(char *, uint64_t, uint64_t))(v104 + 32);
          v124 = v154;
          v125 = v166;
          v172(v154, v103, v166);
          (*(void (**)(char *, char *, uint64_t))(v104 + 16))(v160, v124, v125);
          v126 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
          v127 = v72;
          v128 = (uint64_t)v157;
          swift_storeEnumTagMultiPayload(v157, v126, 52);
          swift_storeEnumTagMultiPayload(v128, v156, 1);
          v129 = *(void (**)(char *, uint64_t))(v104 + 8);
          v129(v124, v125);
          v130 = *(void (**)(char *, uint64_t))(v51 + 8);
          v130(v127, v27);
          v129(v167, v125);
          v130(v35, v27);
          v131 = (int *)type metadata accessor for SettingsURLDestination(0);
          v132 = v171;
          v133 = &v171[v131[7]];
          v172(v171, (uint64_t)v160, v125);
          sub_100043CA8(v128, (uint64_t)&v132[v131[5]]);
          *(_QWORD *)&v132[v131[6]] = _swiftEmptyArrayStorage;
LABEL_55:
          *(_QWORD *)v133 = 0;
          *((_QWORD *)v133 + 1) = 0;
          v148 = sub_100004FC8(&qword_1001570F8);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v148 - 8) + 56))(v132, 0, 1, v148);
          goto LABEL_21;
        }
        swift_bridgeObjectRelease(v66);
        (*(void (**)(char *, uint64_t))(v165 + 8))(v167, v166);
LABEL_41:
        (*(void (**)(char *, uint64_t))(v51 + 8))(v35, v27);
LABEL_42:
        v93 = sub_100004FC8(&qword_1001570F8);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v93 - 8) + 56))(v171, 1, 1, v93);
        goto LABEL_21;
      }
    }
    (*(void (**)(char *, uint64_t))(v28 + 8))(v35, v27);
    goto LABEL_20;
  }
  sub_10000BA50((uint64_t)v26, &qword_1001570F0);
LABEL_20:
  v73 = sub_100004FC8(&qword_1001570F8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 56))(a2, 1, 1, v73);
LABEL_21:
  sub_100043ADC();
}

uint64_t sub_100043938(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  char v5;

  URL.scheme.getter(a1);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = String.lowercased()();
  swift_bridgeObjectRelease(v2);
  if (v3._countAndFlagsBits == 0x666572702D707061 && v3._object == (void *)0xE900000000000073)
  {
    swift_bridgeObjectRelease(0xE900000000000073);
    return 1;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)(v3._countAndFlagsBits, v3._object, 0x666572702D707061, 0xE900000000000073, 0);
    swift_bridgeObjectRelease(v3._object);
    return v5 & 1;
  }
}

id sub_100043A04(uint64_t a1, uint64_t a2, char a3)
{
  void *v3;
  NSString v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v12;

  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v12 = 0;
  v7 = objc_msgSend(v3, "initWithBundleIdentifier:allowPlaceholder:error:", v6, a3 & 1, &v12);

  v8 = v12;
  if (v7)
  {
    v9 = v12;
  }
  else
  {
    v10 = v12;
    _convertNSErrorToError(_:)(v8);

    swift_willThrow();
  }
  return v7;
}

void sub_100043ADC()
{
  uint64_t v0;
  uint64_t v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *oslog;
  uint64_t v6;
  uint64_t v7;

  if (qword_100156CB0 != -1)
    swift_once(&qword_100156CB0, sub_10008BE28);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_100007808(v0, (uint64_t)qword_10015D2C8);
  oslog = Logger.logObject.getter(v1);
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v2))
  {
    v3 = swift_slowAlloc(22, -1);
    v4 = swift_slowAlloc(64, -1);
    v7 = v4;
    *(_DWORD *)v3 = 136315394;
    v6 = sub_1000DA1F0(0xD00000000000001DLL, 0x8000000100120880, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v6, &v7, v3 + 4, v3 + 12);
    *(_WORD *)(v3 + 12) = 2080;
    v6 = sub_1000DA1F0(0xD000000000000026, 0x800000010011FD10, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v6, &v7, v3 + 14, v3 + 22);
    _os_log_impl((void *)&_mh_execute_header, oslog, v2, "…Complete (%s.%s)", (uint8_t *)v3, 0x16u);
    swift_arrayDestroy(v4, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v4, -1, -1);
    swift_slowDealloc(v3, -1, -1);

  }
  else
  {

  }
}

uint64_t sub_100043CA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SettingsURLDestination.Action(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100043CEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v11;

  v11 = a2;
  if ((a9 & 1) == 0)
  {
    swift_bridgeObjectRetain(a2);
    v11 = a4;
    a4 = a6;
    a6 = a8;
  }
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(a4);
  return swift_bridgeObjectRetain(a6);
}

uint64_t destroy for SecondaryAppleAccountItem(uint64_t a1)
{
  return sub_100043D7C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
}

uint64_t sub_100043D7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t result;

  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(a4);
  result = swift_bridgeObjectRelease(a6);
  if ((a9 & 1) == 0)
    return swift_bridgeObjectRelease(a8);
  return result;
}

uint64_t initializeWithCopy for SecondaryAppleAccountItem(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_BYTE *)(a2 + 64);
  sub_100043CEC(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v11);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_BYTE *)(a1 + 64) = v11;
  return a1;
}

uint64_t assignWithCopy for SecondaryAppleAccountItem(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_BYTE *)(a2 + 64);
  sub_100043CEC(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v11);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_BYTE *)(a1 + 64);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_BYTE *)(a1 + 64) = v11;
  sub_100043D7C(v12, v13, v14, v15, v16, v17, v18, v19, v20);
  return a1;
}

__n128 initializeWithTake for SecondaryAppleAccountItem(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for SecondaryAppleAccountItem(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  __int128 v14;

  v3 = *(_BYTE *)(a2 + 64);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_BYTE *)(a1 + 64);
  v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v13;
  v14 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v14;
  *(_BYTE *)(a1 + 64) = v3;
  sub_100043D7C(v4, v6, v5, v7, v8, v9, v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for SecondaryAppleAccountItem(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 65))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 64);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SecondaryAppleAccountItem(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 65) = 0;
    if (a2)
      *(_BYTE *)(result + 64) = -(char)a2;
  }
  return result;
}

uint64_t sub_100044050(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 64);
}

uint64_t sub_100044058(uint64_t result, char a2)
{
  *(_BYTE *)(result + 64) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for SecondaryAppleAccountItem()
{
  return &type metadata for SecondaryAppleAccountItem;
}

void sub_100044074(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::UInt v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::UInt v16;
  _QWORD v17[2];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::UInt v22;
  uint64_t v23;
  char v24;

  v2 = v1;
  sub_100044E8C(v2, (uint64_t)v17);
  v5 = v17[0];
  v4 = v17[1];
  if ((v24 & 1) != 0)
  {
    v6 = v18;
    v7 = v19;
    v8 = v20;
    v9 = v21;
    v10 = v22;
    Hasher._combine(_:)(1uLL);
    swift_bridgeObjectRetain(v4);
    String.hash(into:)(a1, v5, v4);
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRetain(v7);
    String.hash(into:)(a1, v6, v7);
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRetain(v9);
    String.hash(into:)(a1, v8, v9);
    swift_bridgeObjectRelease(v9);
    Hasher._combine(_:)(v10);
  }
  else
  {
    v11 = v18;
    v12 = v19;
    v13 = v20;
    v14 = v21;
    v16 = v22;
    v15 = v23;
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain(v4);
    String.hash(into:)(a1, v5, v4);
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRetain(v12);
    String.hash(into:)(a1, v11, v12);
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRetain(v14);
    String.hash(into:)(a1, v13, v14);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRetain(v15);
    String.hash(into:)(a1, v16, v15);
    swift_bridgeObjectRelease(v15);
  }
}

Swift::Int sub_1000441E8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  v5 = v0[4];
  v6 = v0[5];
  v8 = v0[6];
  v7 = v0[7];
  Hasher.init(_seed:)(v10, 0);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v10, v1, v2);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(v10, v3, v4);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRetain(v6);
  String.hash(into:)(v10, v5, v6);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v10, v8, v7);
  swift_bridgeObjectRelease(v7);
  return Hasher._finalize()();
}

uint64_t sub_1000442CC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = v1[1];
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = v1[5];
  v10 = v1[6];
  v9 = v1[7];
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(a1, v3, v4);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRetain(v6);
  String.hash(into:)(a1, v5, v6);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRetain(v8);
  String.hash(into:)(a1, v7, v8);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRetain(v9);
  String.hash(into:)(a1, v10, v9);
  return swift_bridgeObjectRelease(v9);
}

Swift::Int sub_100044394(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[9];

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  Hasher.init(_seed:)(v11, a1);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v11, v2, v3);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v11, v4, v5);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v11, v6, v7);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRetain(v8);
  String.hash(into:)(v11, v9, v8);
  swift_bridgeObjectRelease(v8);
  return Hasher._finalize()();
}

uint64_t sub_100044474(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[4];
  _OWORD v8[4];

  v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  v3 = a1[3];
  v7[2] = a1[2];
  v7[3] = v3;
  v4 = a2[1];
  v8[0] = *a2;
  v8[1] = v4;
  v5 = a2[3];
  v8[2] = a2[2];
  v8[3] = v5;
  return sub_100044D10((uint64_t *)v7, v8) & 1;
}

Swift::Int sub_1000444BC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt v7;
  _QWORD v9[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  v5 = v0[4];
  v6 = v0[5];
  v7 = v0[6];
  Hasher.init(_seed:)(v9, 0);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v9, v1, v2);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(v9, v3, v4);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRetain(v6);
  String.hash(into:)(v9, v5, v6);
  swift_bridgeObjectRelease(v6);
  Hasher._combine(_:)(v7);
  return Hasher._finalize()();
}

void sub_100044584(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::UInt v9;

  v3 = *v1;
  v4 = v1[1];
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = v1[5];
  v9 = v1[6];
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(a1, v3, v4);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRetain(v6);
  String.hash(into:)(a1, v5, v6);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRetain(v8);
  String.hash(into:)(a1, v7, v8);
  swift_bridgeObjectRelease(v8);
  Hasher._combine(_:)(v9);
}

Swift::Int sub_100044634(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::UInt v8;
  _QWORD v10[9];

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  Hasher.init(_seed:)(v10, a1);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v10, v2, v3);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v10, v4, v5);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v10, v6, v7);
  swift_bridgeObjectRelease(v7);
  Hasher._combine(_:)(v8);
  return Hasher._finalize()();
}

BOOL sub_1000446F8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[3];
  uint64_t v6;
  _OWORD v7[3];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v5[2] = *(_OWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 48);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v7[2] = *(_OWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  return sub_100044DDC((uint64_t *)v5, v7);
}

Swift::Int sub_100044750()
{
  uint64_t v0;
  _QWORD v2[9];
  _BYTE v3[72];

  sub_100044E8C(v0, (uint64_t)v3);
  Hasher.init(_seed:)(v2, 0);
  sub_100044074((uint64_t)v2);
  return Hasher._finalize()();
}

void sub_10004479C(uint64_t a1)
{
  uint64_t v1;
  _BYTE v3[72];

  sub_100044E8C(v1, (uint64_t)v3);
  sub_100044074(a1);
}

Swift::Int sub_1000447D8(uint64_t a1)
{
  uint64_t v1;
  _QWORD v4[9];
  _BYTE v5[72];

  sub_100044E8C(v1, (uint64_t)v5);
  Hasher.init(_seed:)(v4, a1);
  sub_100044074((uint64_t)v4);
  return Hasher._finalize()();
}

BOOL sub_100044828(uint64_t a1, uint64_t a2)
{
  _BYTE v4[72];
  _BYTE v5[72];

  sub_100044E8C(a1, (uint64_t)v4);
  sub_100044E8C(a2, (uint64_t)v5);
  return sub_100044B00((uint64_t)v4, (uint64_t)v5);
}

unint64_t sub_100044874()
{
  unint64_t result;

  result = qword_100158698;
  if (!qword_100158698)
  {
    result = swift_getWitnessTable(&unk_100115D3C, &type metadata for SecondaryAppleAccountItem);
    atomic_store(result, (unint64_t *)&qword_100158698);
  }
  return result;
}

void *sub_1000448B8()
{
  return &protocol witness table for String;
}

BOOL sub_1000448C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[4];

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  v7[2] = *(_QWORD *)(a1 + 32);
  v7[3] = v2;
  v7[0] = v3;
  v7[1] = v4;
  v5 = sub_100008A5C();
  return StringProtocol.localizedCaseInsensitiveCompare<A>(_:)(v7, &type metadata for String, &type metadata for String, v5, v5) == -1;
}

BOOL sub_100044920(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[4];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a2 + 40);
  v7[2] = *(_QWORD *)(a2 + 32);
  v7[3] = v4;
  v7[0] = v2;
  v7[1] = v3;
  v5 = sub_100008A5C();
  return StringProtocol.localizedCaseInsensitiveCompare<A>(_:)(v7, &type metadata for String, &type metadata for String, v5, v5) != -1;
}

BOOL sub_10004497C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[4];

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  v7[2] = *(_QWORD *)(a1 + 32);
  v7[3] = v2;
  v7[0] = v3;
  v7[1] = v4;
  v5 = sub_100008A5C();
  return StringProtocol.localizedCaseInsensitiveCompare<A>(_:)(v7, &type metadata for String, &type metadata for String, v5, v5) != -1;
}

BOOL sub_1000449D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[4];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a2 + 40);
  v7[2] = *(_QWORD *)(a2 + 32);
  v7[3] = v4;
  v7[0] = v2;
  v7[1] = v3;
  v5 = sub_100008A5C();
  return StringProtocol.localizedCaseInsensitiveCompare<A>(_:)(v7, &type metadata for String, &type metadata for String, v5, v5) == -1;
}

uint64_t sub_100044A34@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 24);
  *a1 = *(_QWORD *)(v1 + 16);
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_100044A40@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(v1 + 16);
  result = swift_bridgeObjectRetain(*(_QWORD *)(v1 + 24));
  *a1 = v3;
  a1[1] = result;
  return result;
}

unint64_t sub_100044A74()
{
  unint64_t result;

  result = qword_1001586A0;
  if (!qword_1001586A0)
  {
    result = swift_getWitnessTable(&unk_100115E94, &type metadata for SecondaryAppleAccountAuthenticationInformation);
    atomic_store(result, (unint64_t *)&qword_1001586A0);
  }
  return result;
}

unint64_t sub_100044ABC()
{
  unint64_t result;

  result = qword_1001586A8;
  if (!qword_1001586A8)
  {
    result = swift_getWitnessTable(&unk_100115F04, &type metadata for SecondaryAppleAccountInformation);
    atomic_store(result, (unint64_t *)&qword_1001586A8);
  }
  return result;
}

BOOL sub_100044B00(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  _QWORD v38[2];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;

  sub_100044E8C(a1, (uint64_t)v38);
  v3 = v38[0];
  v4 = v38[1];
  if ((v45 & 1) == 0)
  {
    v14 = v39;
    v13 = v40;
    v15 = v41;
    v16 = v42;
    v17 = v43;
    v18 = v44;
    sub_100044E8C(a2, (uint64_t)&v29);
    if ((v37 & 1) != 0)
      return 0;
    v26 = v18;
    v21 = v31;
    v20 = v32;
    v22 = v33;
    v28 = v34;
    v23 = v36;
    v24 = v35;
    if ((v3 != v29 || v4 != v30) && (_stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v29, v30, 0) & 1) == 0)
      return 0;
    return (v14 == v21 && v13 == v20 || (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v13, v21, v20, 0) & 1) != 0)
        && (v15 == v22 && v16 == v28 || (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v22, v28, 0) & 1) != 0)
        && (v17 == v24 && v26 == v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(v17, v26, v24, v23, 0) & 1) != 0);
  }
  v5 = v39;
  v6 = v40;
  v7 = v41;
  v8 = v42;
  v9 = v43;
  sub_100044E8C(a2, (uint64_t)&v29);
  if (v37 == 1)
  {
    if ((v10 = v31, v11 = v32, v12 = v34, v25 = v35, v27 = v33, v3 == v29) && v4 == v30
      || (_stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v29, v30, 0) & 1) != 0)
    {
      if ((v5 == v10 && v6 == v11 || (_stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v10, v11, 0) & 1) != 0)
        && (v7 == v27 && v8 == v12 || (_stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, v27, v12, 0) & 1) != 0)
        && v9 == v25)
      {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_100044D10(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  v7 = v4 == *a2 && v5 == v6;
  if (v7 || (v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0), result = 0, (v8 & 1) != 0))
  {
    v10 = a1[2];
    v11 = a1[3];
    v12 = a2[2];
    v13 = a2[3];
    v14 = v10 == v12 && v11 == v13;
    if (v14
      || (v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, v12, v13, 0), result = 0, (v15 & 1) != 0))
    {
      if ((v16 = a1[4], v17 = a1[5], v18 = a2[4], v19 = a2[5], v16 == v18) && v17 == v19
        || (v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, v18, v19, 0), result = 0, (v20 & 1) != 0))
      {
        v21 = a1[6];
        v22 = a1[7];
        v23 = a2[6];
        v24 = a2[7];
        if (v21 == v23 && v22 == v24)
          return 1;
        else
          return _stringCompareWithSmolCheck(_:_:expecting:)(v21, v22, v23, v24, 0);
      }
    }
  }
  return result;
}

BOOL sub_100044DDC(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  _BOOL8 result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  v7 = v4 == *a2 && v5 == v6;
  if (v7 || (v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0), result = 0, (v8 & 1) != 0))
  {
    v10 = a1[2];
    v11 = a1[3];
    v12 = a2[2];
    v13 = a2[3];
    v14 = v10 == v12 && v11 == v13;
    if (v14
      || (v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, v12, v13, 0), result = 0, (v15 & 1) != 0))
    {
      v16 = a1[4];
      v17 = a1[5];
      v18 = a2[4];
      v19 = a2[5];
      if (v16 == v18 && v17 == v19)
        return a1[6] == a2[6];
      v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, v18, v19, 0);
      result = 0;
      if ((v20 & 1) != 0)
        return a1[6] == a2[6];
    }
  }
  return result;
}

uint64_t sub_100044E8C(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  v2 = *(_OWORD *)(a1 + 16);
  v3 = *(_OWORD *)(a1 + 32);
  v4 = *(_OWORD *)(a1 + 48);
  *(_BYTE *)(a2 + 64) = *(_BYTE *)(a1 + 64);
  *(_OWORD *)(a2 + 32) = v3;
  *(_OWORD *)(a2 + 48) = v4;
  *(_OWORD *)(a2 + 16) = v2;
  return a2;
}

uint64_t destroy for SecondaryAppleAccountAuthenticationInformation(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  return swift_bridgeObjectRelease(a1[5]);
}

_QWORD *initializeWithCopy for SecondaryAppleAccountAuthenticationInformation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  a1[6] = a2[6];
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *assignWithCopy for SecondaryAppleAccountAuthenticationInformation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[6] = a2[6];
  return a1;
}

__n128 initializeWithTake for SecondaryAppleAccountAuthenticationInformation(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

_QWORD *assignWithTake for SecondaryAppleAccountAuthenticationInformation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[5];
  v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  a1[6] = a2[6];
  return a1;
}

uint64_t getEnumTagSinglePayload for SecondaryAppleAccountAuthenticationInformation(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SecondaryAppleAccountAuthenticationInformation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SecondaryAppleAccountAuthenticationInformation()
{
  return &type metadata for SecondaryAppleAccountAuthenticationInformation;
}

uint64_t destroy for SecondaryAppleAccountInformation(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  return swift_bridgeObjectRelease(a1[7]);
}

_QWORD *initializeWithCopy for SecondaryAppleAccountInformation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

_QWORD *assignWithCopy for SecondaryAppleAccountInformation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[6] = a2[6];
  v10 = a2[7];
  v11 = a1[7];
  a1[7] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

__n128 initializeWithTake for SecondaryAppleAccountInformation(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

_QWORD *assignWithTake for SecondaryAppleAccountInformation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[5];
  v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = a2[7];
  v11 = a1[7];
  a1[6] = a2[6];
  a1[7] = v10;
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for SecondaryAppleAccountInformation(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SecondaryAppleAccountInformation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SecondaryAppleAccountInformation()
{
  return &type metadata for SecondaryAppleAccountInformation;
}

uint64_t getEnumTagSinglePayload for SettingsAppQuickAction(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SettingsAppQuickAction(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100045438 + 4 * byte_100116015[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10004546C + 4 * byte_100116010[v4]))();
}

uint64_t sub_10004546C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100045474(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10004547CLL);
  return result;
}

uint64_t sub_100045488(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100045490);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100045494(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004549C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SettingsAppQuickAction()
{
  return &type metadata for SettingsAppQuickAction;
}

void sub_1000454B8(char *a1)
{
  sub_100020430(*a1);
}

void sub_1000454C4()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_100045514()
{
  uint64_t v1;

  String.hash(into:)(&v1, 1768319351, 0xE400000000000000);
  swift_bridgeObjectRelease(0xE400000000000000);
  return Hasher._finalize()();
}

void sub_10004557C()
{
  __asm { BR              X10 }
}

uint64_t sub_1000455BC(uint64_t a1)
{
  String.hash(into:)(a1, 1768319351, 0xE400000000000000);
  return swift_bridgeObjectRelease(0xE400000000000000);
}

void sub_100045610(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_10004565C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 1768319351, 0xE400000000000000);
  swift_bridgeObjectRelease(0xE400000000000000);
  return Hasher._finalize()();
}

unint64_t sub_1000456C4@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1000457B8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000456F0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_100045724 + 4 * byte_100116026[*v0]))();
}

void sub_100045724(_QWORD *a1@<X8>)
{
  *a1 = 1768319351;
  a1[1] = 0xE400000000000000;
}

void sub_100045738(_QWORD *a1@<X8>)
{
  *a1 = 0x72616C756C6C6563;
  a1[1] = 0xE800000000000000;
}

void sub_100045754(_QWORD *a1@<X8>)
{
  *a1 = 0x79726574746162;
  a1[1] = 0xE700000000000000;
}

unint64_t sub_100045774()
{
  unint64_t result;

  result = qword_1001586B0;
  if (!qword_1001586B0)
  {
    result = swift_getWitnessTable(&unk_1001160C0, &type metadata for SettingsAppQuickAction);
    atomic_store(result, (unint64_t *)&qword_1001586B0);
  }
  return result;
}

unint64_t sub_1000457B8(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100147F10, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

ValueMetadata *type metadata accessor for SettingsNavigationTVProviderURLRoute()
{
  return &type metadata for SettingsNavigationTVProviderURLRoute;
}

uint64_t sub_100045810@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  Swift::String v53;
  Swift::Bool v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  Swift::String v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *object;
  void *v81;
  char *v82;
  unint64_t v83;
  unint64_t v84;
  char v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  int *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  Swift::String v100;
  Swift::String v101;

  v4 = type metadata accessor for URLQueryItem(0);
  v5 = *(_QWORD *)(v4 - 8);
  v95 = v4;
  v96 = v5;
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v92 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v94 = (char *)&v92 - v9;
  v10 = type metadata accessor for SettingsURLDestination.Action(0);
  __chkstk_darwin(v10);
  v97 = (uint64_t)&v92 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100004FC8(&qword_1001570F0);
  __chkstk_darwin(v12);
  v14 = (char *)&v92 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for URLComponents(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v92 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = a1;
  URL.scheme.getter(v17);
  if (!v20)
    goto LABEL_24;
  v21 = v20;
  v98 = a2;
  v22 = String.lowercased()();
  swift_bridgeObjectRelease(v21);
  if (v22._countAndFlagsBits == 0xD000000000000013 && v22._object == (void *)0x800000010011F0D0)
  {
    v23 = swift_bridgeObjectRelease(0x800000010011F0D0);
    a2 = v98;
  }
  else
  {
    v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v22._countAndFlagsBits, v22._object, 0xD000000000000013, 0x800000010011F0D0, 0);
    v23 = swift_bridgeObjectRelease(v22._object);
    a2 = v98;
    if ((v24 & 1) == 0)
    {
LABEL_24:
      v69 = sub_100004FC8(&qword_1001570F8);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 56))(a2, 1, 1, v69);
    }
  }
  v25 = URL.absoluteString.getter(v23);
  v27 = v26;
  URLComponents.init(string:)(v25);
  swift_bridgeObjectRelease(v27);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    sub_100008678((uint64_t)v14);
    goto LABEL_24;
  }
  v28 = (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(v19, v14, v15);
  v29 = URLComponents.host.getter(v28);
  if (!v30)
    goto LABEL_23;
  v31 = sub_1000B1ED4(v29, v30);
  if (v31 == 44)
    goto LABEL_23;
  v32 = v31;
  v33 = sub_1000B1860(v31);
  v35 = v34;
  if (v33 == 0xD00000000000001DLL && v34 == 0x800000010011F9B0)
  {
    v36 = swift_bridgeObjectRelease(0x800000010011F9B0);
    goto LABEL_14;
  }
  v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v34, 0xD00000000000001DLL, 0x800000010011F9B0, 0);
  v36 = swift_bridgeObjectRelease(v35);
  if ((v37 & 1) == 0)
  {
LABEL_23:
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
    goto LABEL_24;
  }
LABEL_14:
  v38 = URLComponents.queryItems.getter(v36);
  if (v38)
    v39 = (_QWORD *)v38;
  else
    v39 = _swiftEmptyArrayStorage;
  v40 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v41 = v97;
  swift_storeEnumTagMultiPayload(v97, v40, 21);
  v42 = swift_storeEnumTagMultiPayload(v41, v10, 1);
  v43 = URLComponents.path.getter(v42);
  v45 = v44;
  v46 = swift_bridgeObjectRelease(v44);
  v47 = HIBYTE(v45) & 0xF;
  if ((v45 & 0x2000000000000000) == 0)
    v47 = v43 & 0xFFFFFFFFFFFFLL;
  if (v47)
  {
    v93 = v39;
    v48 = URLComponents.path.getter(v46);
    v50 = v49;
    URLComponents.path.getter(v48);
    v52 = v51;
    v53._countAndFlagsBits = 47;
    v53._object = (void *)0xE100000000000000;
    v54 = String.hasPrefix(_:)(v53);
    swift_bridgeObjectRelease(v52);
    v55 = sub_100045F58(v54, v48, v50);
    v57 = v56;
    v59 = v58;
    v61 = v60;
    swift_bridgeObjectRelease(v50);
    v62 = static String._fromSubstring(_:)(v55, v57, v59, v61);
    v64 = v63;
    swift_bridgeObjectRelease(v61);
    v101._countAndFlagsBits = v62;
    v101._object = v64;
    v65 = sub_1000B1860(v32);
    v67 = v66;
    if (v65 == 0xD00000000000001DLL && v66 == 0x800000010011F9B0)
    {
      swift_bridgeObjectRelease(0x800000010011F9B0);
      v68 = v95;
    }
    else
    {
      v74 = _stringCompareWithSmolCheck(_:_:expecting:)(v65, v66, 0xD00000000000001DLL, 0x800000010011F9B0, 0);
      v75 = swift_bridgeObjectRelease(v67);
      v68 = v95;
      if ((v74 & 1) == 0)
      {
LABEL_30:
        v77 = URLComponents.fragment.getter(v75);
        a2 = v98;
        if (v78)
        {
          v79 = v78;
          v100._countAndFlagsBits = 35;
          v100._object = (void *)0xE100000000000000;
          String.append(_:)(*(Swift::String *)&v77);
          swift_bridgeObjectRelease(v79);
          object = v100._object;
          String.append(_:)(v100);
          swift_bridgeObjectRelease(object);
        }
        v81 = v101._object;
        v82 = v94;
        URLQueryItem.init(name:value:)(1752457584, 0xE400000000000000, v101._countAndFlagsBits, v101._object);
        swift_bridgeObjectRelease(v81);
        v39 = v93;
        if ((swift_isUniquelyReferenced_nonNull_native(v93) & 1) == 0)
          v39 = (_QWORD *)sub_10005270C(0, v39[2] + 1, 1, (unint64_t)v39);
        v84 = v39[2];
        v83 = v39[3];
        if (v84 >= v83 >> 1)
          v39 = (_QWORD *)sub_10005270C(v83 > 1, v84 + 1, 1, (unint64_t)v39);
        v39[2] = v84 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v96 + 32))((unint64_t)v39+ ((*(unsigned __int8 *)(v96 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v96 + 80))+ *(_QWORD *)(v96 + 72) * v84, v82, v68);
        goto LABEL_43;
      }
    }
    strcpy((char *)&v100, "TV_PROVIDER/");
    BYTE5(v100._object) = 0;
    HIWORD(v100._object) = -5120;
    v76._countAndFlagsBits = v62;
    v76._object = v64;
    String.append(_:)(v76);
    v75 = swift_bridgeObjectRelease(v64);
    v101 = v100;
    goto LABEL_30;
  }
  v71 = sub_1000B1860(v32);
  v73 = v72;
  if (v71 == 0xD00000000000001DLL && v72 == 0x800000010011F9B0)
  {
    swift_bridgeObjectRelease(0x800000010011F9B0);
LABEL_38:
    URLQueryItem.init(name:value:)(1752457584, 0xE400000000000000, 0x49564F52505F5654, 0xEB00000000524544);
    if ((swift_isUniquelyReferenced_nonNull_native(v39) & 1) == 0)
      v39 = (_QWORD *)sub_10005270C(0, v39[2] + 1, 1, (unint64_t)v39);
    v87 = v39[2];
    v86 = v39[3];
    if (v87 >= v86 >> 1)
      v39 = (_QWORD *)sub_10005270C(v86 > 1, v87 + 1, 1, (unint64_t)v39);
    v39[2] = v87 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v96 + 32))((unint64_t)v39+ ((*(unsigned __int8 *)(v96 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v96 + 80))+ *(_QWORD *)(v96 + 72) * v87, v8, v95);
    goto LABEL_43;
  }
  v85 = _stringCompareWithSmolCheck(_:_:expecting:)(v71, v72, 0xD00000000000001DLL, 0x800000010011F9B0, 0);
  swift_bridgeObjectRelease(v73);
  if ((v85 & 1) != 0)
    goto LABEL_38;
LABEL_43:
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  v88 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v88 - 8) + 16))(a2, v99, v88);
  v89 = (int *)type metadata accessor for SettingsURLDestination(0);
  sub_100043CA8(v97, a2 + v89[5]);
  v90 = (_QWORD *)(a2 + v89[7]);
  *(_QWORD *)(a2 + v89[6]) = v39;
  *v90 = 0;
  v90[1] = 0;
  v91 = sub_100004FC8(&qword_1001570F8);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v91 - 8) + 56))(a2, 0, 1, v91);
}

unint64_t sub_100045F58(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
      v3 = HIBYTE(a3) & 0xF;
    else
      v3 = a2 & 0xFFFFFFFFFFFFLL;
    v4 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v4 = 11;
    v5 = v4 | (v3 << 16);
    result = String.index(_:offsetBy:limitedBy:)(15, result, v5, a2, a3);
    if ((v6 & 1) != 0)
      result = v5;
    if (4 * v3 >= result >> 14)
      return String.subscript.getter();
  }
  __break(1u);
  return result;
}

uint64_t sub_100045FF4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  Swift::String_optional v11;
  unsigned __int8 v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = URL.scheme.getter(v4);
  v9 = v8;
  if (v8)
  {
    if (v7 == 0xD000000000000013 && v8 == 0x800000010011F0D0)
    {
      swift_bridgeObjectRelease(v8);
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, a1, v2);
    }
    else
    {
      v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, 0xD000000000000013, 0x800000010011F0D0, 0);
      swift_bridgeObjectRelease(v9);
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, a1, v2);
      LOBYTE(v9) = 0;
      if ((v10 & 1) == 0)
        goto LABEL_10;
    }
    v11 = URL.host(percentEncoded:)(1);
    if (v11.value._object && (v12 = sub_1000B1ED4(v11.value._countAndFlagsBits, (uint64_t)v11.value._object), v12 != 44))
    {
      v14 = sub_1000B1860(v12);
      v16 = v15;
      if (v14 == 0xD00000000000001DLL && v15 == 0x800000010011F9B0)
      {
        swift_bridgeObjectRelease(0x800000010011F9B0);
        LOBYTE(v9) = 1;
      }
      else
      {
        LOBYTE(v9) = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, 0xD00000000000001DLL, 0x800000010011F9B0, 0);
        swift_bridgeObjectRelease(v16);
      }
    }
    else
    {
      LOBYTE(v9) = 0;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, a1, v2);
  }
LABEL_10:
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return v9 & 1;
}

uint64_t sub_1000461AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, _QWORD, uint64_t);
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char v36;
  void (*v37)(uint64_t, uint64_t);
  char *v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  char v43;
  void (*v44)(char *, uint64_t);
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[5];

  v51 = type metadata accessor for GenerativeModelsAvailability.Availability.UnavailableInfo.UnavailableReason(0);
  v55 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v54 = (char *)&v46 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1 = type metadata accessor for GenerativeModelsAvailability.Availability.UnavailableInfo(0);
  v52 = *(_QWORD *)(v1 - 8);
  v53 = v1;
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v46 - v5;
  v7 = type metadata accessor for GenerativeModelsAvailability.Availability(0);
  v57 = *(_QWORD *)(v7 - 8);
  v58 = v7;
  v8 = __chkstk_darwin(v7);
  v56 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v46 - v10;
  v12 = type metadata accessor for GenerativeModelsAvailability.Parameters(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for GenerativeModelsAvailability(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59[3] = &type metadata for SiriFeatureFlags;
  v59[4] = sub_1000465B4();
  v20 = isFeatureEnabled(_:)(v59);
  sub_100005474(v59);
  if ((v20 & 1) == 0)
    return 0;
  v49 = v17;
  v50 = v16;
  v48 = v4;
  v22 = v52;
  v21 = v53;
  v24 = v54;
  v23 = v55;
  GenerativeModelsAvailability.Parameters.init(useCaseIdentifier:)(0x73676E6974746573, 0xEC0000007070612DLL);
  static GenerativeModelsAvailability.current(parameters:)(v15);
  v25 = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  GenerativeModelsAvailability.availability.getter(v25);
  v27 = v56;
  v26 = v57;
  v28 = v58;
  (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v56, v11, v58);
  if ((*(unsigned int (**)(char *, uint64_t))(v26 + 88))(v27, v28) == enum case for GenerativeModelsAvailability.Availability.unavailable(_:))
  {
    v46 = v19;
    v47 = v11;
    (*(void (**)(char *, uint64_t))(v26 + 96))(v27, v28);
    v29 = (*(uint64_t (**)(char *, char *, uint64_t))(v22 + 32))(v6, v27, v21);
    v30 = GenerativeModelsAvailability.Availability.UnavailableInfo.reasons.getter(v29);
    v31 = *(void (**)(char *, _QWORD, uint64_t))(v23 + 104);
    v32 = (uint64_t)v24;
    v33 = v6;
    v34 = v24;
    v35 = v51;
    v31(v34, enum case for GenerativeModelsAvailability.Availability.UnavailableInfo.UnavailableReason.deviceNotCapable(_:), v51);
    v36 = sub_10003A5DC(v32, v30);
    swift_bridgeObjectRelease(v30);
    v37 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
    v37(v32, v35);
    v38 = v48;
    v39 = (*(uint64_t (**)(char *, char *, uint64_t))(v22 + 16))(v48, v33, v21);
    if ((v36 & 1) != 0)
    {
      v40 = *(void (**)(char *, uint64_t))(v22 + 8);
      v40(v38, v21);
      v40(v33, v21);
      (*(void (**)(char *, uint64_t))(v57 + 8))(v47, v58);
      (*(void (**)(char *, uint64_t))(v49 + 8))(v46, v50);
      return 0;
    }
    v42 = GenerativeModelsAvailability.Availability.UnavailableInfo.reasons.getter(v39);
    v31((char *)v32, enum case for GenerativeModelsAvailability.Availability.UnavailableInfo.UnavailableReason.regionIneligible(_:), v35);
    v43 = sub_10003A5DC(v32, v42);
    swift_bridgeObjectRelease(v42);
    v37(v32, v35);
    v44 = *(void (**)(char *, uint64_t))(v22 + 8);
    v44(v38, v21);
    v44(v33, v21);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v47, v58);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v46, v50);
    if ((v43 & 1) != 0)
      return 0;
  }
  else
  {
    v41 = *(void (**)(char *, uint64_t))(v26 + 8);
    v41(v11, v28);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v19, v50);
    v41(v27, v28);
  }
  return 1;
}

unint64_t sub_1000465B4()
{
  unint64_t result;

  result = qword_1001586B8;
  if (!qword_1001586B8)
  {
    result = swift_getWitnessTable(&unk_10011953C, &type metadata for SiriFeatureFlags);
    atomic_store(result, (unint64_t *)&qword_1001586B8);
  }
  return result;
}

uint64_t sub_1000465F8()
{
  uint64_t v0;
  uint64_t result;
  void *v2;

  v2 = &_swiftEmptyDictionarySingleton;
  v0 = sub_100004FC8(&qword_1001586C0);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  result = TaskLocal.init(wrappedValue:)(&v2);
  qword_10015D1A0 = result;
  return result;
}

ValueMetadata *type metadata accessor for SettingsAppDependencyStoreProxy()
{
  return &type metadata for SettingsAppDependencyStoreProxy;
}

id sub_100046660()
{
  if (qword_100156CF0 != -1)
    swift_once(&qword_100156CF0, sub_1000A90C8);
  qword_10015D1A8 = qword_10015D390;
  return (id)qword_10015D390;
}

void sub_1000466A8(char a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  int v5;
  Class isa;
  NSString v7;
  uint64_t v8;
  _QWORD v9[2];
  char v10;

  v2 = v1;
  if (qword_100156C38 != -1)
    swift_once(&qword_100156C38, sub_100046660);
  v4 = (void *)qword_10015D1A8;
  v5 = a1 & 1;
  isa = Bool._bridgeToObjectiveC()().super.super.isa;
  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setValue:forKey:", isa, v7);

  v8 = OBJC_IVAR____TtC11SettingsApp31PersonalHotspotListItemProvider_shouldShow;
  if (*(unsigned __int8 *)(v2 + OBJC_IVAR____TtC11SettingsApp31PersonalHotspotListItemProvider_shouldShow) != v5)
  {
    sub_100007C2C((_QWORD *)(v2 + OBJC_IVAR____TtC11SettingsApp31PersonalHotspotListItemProvider_invalidator), *(_QWORD *)(v2 + OBJC_IVAR____TtC11SettingsApp31PersonalHotspotListItemProvider_invalidator + 24));
    v9[0] = "Personal Hotspot Visibility";
    v9[1] = 27;
    v10 = 2;
    PassthroughSubject.send(_:)(v9);
  }
  *(_BYTE *)(v2 + v8) = v5;
}

void sub_1000467BC(char a1)
{
  uint64_t v1;
  void *v3;
  int v4;
  Class isa;
  NSString v6;
  _QWORD v7[2];
  char v8;

  if (qword_100156C38 != -1)
    swift_once(&qword_100156C38, sub_100046660);
  v3 = (void *)qword_10015D1A8;
  v4 = a1 & 1;
  isa = Bool._bridgeToObjectiveC()().super.super.isa;
  v6 = String._bridgeToObjectiveC()();
  objc_msgSend(v3, "setValue:forKey:", isa, v6);

  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC11SettingsApp31PersonalHotspotListItemProvider_shouldShow) == 1
    && *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC11SettingsApp31PersonalHotspotListItemProvider_shouldDisable) != v4)
  {
    sub_100007C2C((_QWORD *)(v1 + OBJC_IVAR____TtC11SettingsApp31PersonalHotspotListItemProvider_invalidator), *(_QWORD *)(v1 + OBJC_IVAR____TtC11SettingsApp31PersonalHotspotListItemProvider_invalidator + 24));
    v7[0] = "Personal Hotspot Interactivity";
    v7[1] = 30;
    v8 = 2;
    PassthroughSubject.send(_:)(v7);
  }
}

uint64_t sub_1000468DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[24];
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _BYTE v9[24];

  v1 = v0 + OBJC_IVAR____TtC11SettingsApp31PersonalHotspotListItemProvider_cancellable;
  swift_beginAccess(v0 + OBJC_IVAR____TtC11SettingsApp31PersonalHotspotListItemProvider_cancellable, v9, 0, 0);
  if (*(_QWORD *)(v1 + 24))
  {
    sub_10003CE00(v1, (uint64_t)&v6);
    v2 = *((_QWORD *)&v7 + 1);
    v3 = v8;
    sub_100007C2C(&v6, *((uint64_t *)&v7 + 1));
    dispatch thunk of Cancellable.cancel()(v2, v3);
    sub_100005474(&v6);
  }
  v8 = 0;
  v6 = 0u;
  v7 = 0u;
  swift_beginAccess(v1, v5, 33, 0);
  sub_100047EA0((uint64_t)&v6, v1);
  swift_endAccess(v5);
  sub_1000076B4(v0 + OBJC_IVAR____TtC11SettingsApp31PersonalHotspotListItemProvider_id, type metadata accessor for PrimarySettingsListItemIdentifier);
  sub_100005474((_QWORD *)(v0 + OBJC_IVAR____TtC11SettingsApp31PersonalHotspotListItemProvider_invalidator));
  swift_release(*(_QWORD *)(v0
                          + OBJC_IVAR____TtC11SettingsApp31PersonalHotspotListItemProvider_airplaneModeListItemProvider));
  swift_release(*(_QWORD *)(v0
                          + OBJC_IVAR____TtC11SettingsApp31PersonalHotspotListItemProvider_cellularDataSettingObserver));
  sub_10000BA50(v1, &qword_1001587E0);
  return v0;
}

uint64_t sub_1000469FC()
{
  uint64_t v0;

  sub_1000468DC();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100046A20()
{
  return type metadata accessor for PersonalHotspotListItemProvider(0);
}

uint64_t type metadata accessor for PersonalHotspotListItemProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_100158720;
  if (!qword_100158720)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PersonalHotspotListItemProvider);
  return result;
}

uint64_t sub_100046A64(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[8];

  v4[0] = &unk_100116180;
  result = type metadata accessor for PrimarySettingsListItemIdentifier(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_100116198;
    v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[5] = &unk_1001161B0;
    v4[6] = &unk_100116180;
    v4[7] = &unk_100116180;
    result = swift_updateClassMetadata2(a1, 256, 8, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_100046B04@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  char v41;
  uint64_t v42;
  int *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _BYTE v52[4];
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;

  v62 = a2;
  v63 = a1;
  v59 = type metadata accessor for PrimarySettingsListItemViewType(0);
  __chkstk_darwin(v59);
  v60 = &v52[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v5 = __chkstk_darwin(v4);
  v7 = &v52[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  v9 = &v52[-v8];
  v10 = sub_100004FC8((uint64_t *)&unk_100156F00);
  __chkstk_darwin(v10);
  v12 = &v52[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for PrimarySettingsListItemModel(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = &v52[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v61 = v2;
  v17 = v2 + OBJC_IVAR____TtC11SettingsApp31PersonalHotspotListItemProvider_id;
  sub_1000076F0(v2 + OBJC_IVAR____TtC11SettingsApp31PersonalHotspotListItemProvider_id, (uint64_t)v9, type metadata accessor for PrimarySettingsListItemIdentifier);
  v18 = type metadata accessor for StaticPrimarySettingsListItemProvider(0);
  v19 = swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  sub_100007670((uint64_t)v9, v19 + OBJC_IVAR____TtC11SettingsApp37StaticPrimarySettingsListItemProvider_id, type metadata accessor for PrimarySettingsListItemIdentifier);
  sub_1000B2604(v63, (uint64_t)v12);
  swift_setDeallocating(v19);
  sub_1000076B4(v19 + OBJC_IVAR____TtC11SettingsApp37StaticPrimarySettingsListItemProvider_id, type metadata accessor for PrimarySettingsListItemIdentifier);
  v20 = *(unsigned int *)(*(_QWORD *)v19 + 48);
  v21 = *(unsigned __int16 *)(*(_QWORD *)v19 + 52);
  v22 = v19;
  v23 = v14;
  swift_deallocClassInstance(v22, v20, v21);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_10000BA50((uint64_t)v12, (uint64_t *)&unk_100156F00);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v62, 1, 1, v13);
  }
  else
  {
    v25 = v60;
    sub_100007670((uint64_t)v12, (uint64_t)v16, type metadata accessor for PrimarySettingsListItemModel);
    v26 = v61;
    if (*(_BYTE *)(v61 + OBJC_IVAR____TtC11SettingsApp31PersonalHotspotListItemProvider_shouldShow) == 1)
    {
      v58 = v23;
      v63 = v16;
      v27 = v7;
      sub_1000076F0(v17, (uint64_t)v7, type metadata accessor for PrimarySettingsListItemIdentifier);
      v57 = *(unsigned __int8 *)(v26 + OBJC_IVAR____TtC11SettingsApp31PersonalHotspotListItemProvider_shouldDisable);
      sub_10009BD7C();
      v54 = v29;
      v55 = v28;
      v53 = v30;
      v56 = v31;
      v32 = (uint64_t)v25;
      if ((*(_BYTE *)(v26 + 16) & 1) != 0)
      {
        v33 = 0;
        v34 = 0;
        v35 = _swiftEmptyArrayStorage;
        v36 = 0xE000000000000000;
      }
      else
      {
        v38 = LocalizedStringKey.init(stringLiteral:)(0x53544F485F46464FLL, 0xEB00000000544F50);
        v33 = Text.init(_:tableName:bundle:comment:)(v38);
        v36 = v39;
        v35 = v40;
        v34 = v41 & 1;
      }
      v42 = v13;
      v43 = (int *)type metadata accessor for PrimarySettingsListValueLinkModel(0);
      v44 = (uint64_t)v27;
      v45 = v43[9];
      v46 = v32 + v43[8];
      sub_100007670(v44, v32, type metadata accessor for PrimarySettingsListItemIdentifier);
      *(_BYTE *)(v32 + v43[5]) = v57;
      v47 = v32 + v43[6];
      v48 = v54;
      *(_QWORD *)v47 = v55;
      *(_QWORD *)(v47 + 8) = v48;
      *(_BYTE *)(v47 + 16) = v53 & 1;
      *(_QWORD *)(v47 + 24) = v56;
      v49 = v32 + v43[7];
      *(_QWORD *)v49 = v33;
      *(_QWORD *)(v49 + 8) = v36;
      *(_BYTE *)(v49 + 16) = v34;
      *(_QWORD *)(v49 + 24) = v35;
      *(_QWORD *)v46 = 0;
      *(_QWORD *)(v46 + 8) = 0;
      *(_BYTE *)(v46 + 16) = -1;
      *(_BYTE *)(v32 + v45) = 2;
      swift_storeEnumTagMultiPayload(v32, v59, 8);
      v50 = v63;
      sub_100020188(v32, (uint64_t)v63 + *(int *)(v42 + 20));
      v51 = v62;
      sub_1000076F0((uint64_t)v50, v62, type metadata accessor for PrimarySettingsListItemModel);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v58 + 56))(v51, 0, 1, v42);
      sub_100046F4C(v26);
      v37 = (uint64_t)v50;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v62, 1, 1, v13);
      sub_100046F4C(v26);
      v37 = (uint64_t)v16;
    }
    return sub_1000076B4(v37, type metadata accessor for PrimarySettingsListItemModel);
  }
}

void sub_100046F4C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  id v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  _BYTE v27[24];
  id v28[3];
  uint64_t v29;
  void *v30;
  _BYTE v31[24];

  v2 = sub_100004FC8((uint64_t *)&unk_10015C970);
  __chkstk_darwin(v2);
  v4 = &v27[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = type metadata accessor for NSNotificationCenter.Publisher(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v27[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = sub_100004FC8((uint64_t *)&unk_100156F10);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v27[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = objc_msgSend((id)objc_opt_self(PSLaunchTracker), "sharedInstance");
  v14 = objc_msgSend(v13, "launchHasCompleted");

  if (v14)
  {
    v15 = a1 + OBJC_IVAR____TtC11SettingsApp31PersonalHotspotListItemProvider_cancellable;
    swift_beginAccess(a1 + OBJC_IVAR____TtC11SettingsApp31PersonalHotspotListItemProvider_cancellable, v31, 0, 0);
    sub_100047DD8(v15, (uint64_t)v28);
    v16 = v29;
    sub_10000BA50((uint64_t)v28, &qword_1001587E0);
    if (!v16)
    {
      v17 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
      NSNotificationCenter.publisher(for:object:)(PSNETRBChangedNotification, 0);

      v18 = sub_100005494();
      v28[0] = (id)static OS_dispatch_queue.main.getter();
      v19 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v4, 1, 1, v19);
      v20 = sub_100007828((unint64_t *)&unk_100156F20, (uint64_t (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Publisher, (uint64_t)&protocol conformance descriptor for NSNotificationCenter.Publisher);
      v26 = a1;
      v21 = v20;
      v22 = sub_100007828((unint64_t *)&qword_10015C990, (uint64_t (*)(uint64_t))sub_100005494, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
      Publisher.receive<A>(on:options:)(v28, v4, v5, v18, v21, v22);
      sub_10000BA50((uint64_t)v4, (uint64_t *)&unk_10015C970);

      (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
      v23 = swift_allocObject(&unk_100149868, 24, 7);
      swift_weakInit(v23 + 16, v26);
      v24 = sub_100007868((unint64_t *)&qword_100156F30, (uint64_t *)&unk_100156F10, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
      v25 = (void *)Publisher<>.sink(receiveValue:)(sub_100047E98, v23, v9, v24);
      swift_release(v23);
      (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);
      v29 = type metadata accessor for AnyCancellable(0);
      v30 = &protocol witness table for AnyCancellable;
      v28[0] = v25;
      swift_beginAccess(v15, v27, 33, 0);
      sub_100047EA0((uint64_t)v28, v15);
      swift_endAccess(v27);
      sub_100047284();
    }
  }
}

uint64_t sub_100047284()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_signpost_type_t v18;
  uint8_t *v19;
  uint8_t *v20;
  os_signpost_id_t v21;
  uint8_t *v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD aBlock[5];
  uint64_t v40;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v36 = *(_QWORD *)(v2 - 8);
  v37 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v34 = *(_QWORD *)(v5 - 8);
  v35 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OSSignpostID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v33 - v13;
  if (qword_100156CD8 != -1)
    swift_once(&qword_100156CD8, sub_10008BEEC);
  v15 = type metadata accessor for OSSignposter(0);
  sub_100007808(v15, (uint64_t)qword_10015D340);
  v16 = static OSSignpostID.exclusive.getter();
  v17 = OSSignposter.logHandle.getter(v16);
  v18 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    v33 = v7;
    v20 = v19;
    *(_WORD *)v19 = 0;
    v21 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, v18, v21, "PersonalHotspotListItemProvider.updatePersonalHotspotState began", "", v20, 2u);
    v22 = v20;
    v1 = v0;
    v7 = v33;
    swift_slowDealloc(v22, -1, -1);

    v23 = *(void (**)(char *, uint64_t))(v9 + 8);
    v23(v14, v8);
    v23(v12, v8);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  }
  if (qword_100156D60 != -1)
    swift_once(&qword_100156D60, sub_1000D34BC);
  v24 = swift_allocObject(&unk_100149868, 24, 7);
  swift_weakInit(v24 + 16, v1);
  aBlock[4] = sub_100047EE8;
  v40 = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100005350;
  aBlock[3] = &unk_100149880;
  v25 = _Block_copy(aBlock);
  v26 = swift_retain(v24);
  static DispatchQoS.unspecified.getter(v26);
  v38 = _swiftEmptyArrayStorage;
  v27 = sub_100007828((unint64_t *)&qword_10015BAB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v28 = sub_100004FC8((uint64_t *)&unk_100156F40);
  v29 = sub_100007868((unint64_t *)&qword_10015BAC0, (uint64_t *)&unk_100156F40, (uint64_t)&protocol conformance descriptor for [A]);
  v30 = v37;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v38, v28, v29, v37, v27);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v4, v25);
  _Block_release(v25);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v4, v30);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v7, v35);
  v31 = v40;
  swift_release(v24);
  return swift_release(v31);
}

id sub_10004762C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t Strong;
  uint64_t v17;
  void *v18;
  id result;
  void *v20;
  char v21;
  uint64_t v22;
  char v23;
  void *v24;
  unsigned __int8 v25;
  char v26;
  void *v27;
  unsigned __int8 v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_signpost_type_t v40;
  uint8_t *v41;
  os_signpost_id_t v42;
  void (*v43)(_BYTE *, uint64_t);
  _BYTE v44[12];
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD aBlock[5];
  uint64_t v50;
  _BYTE v51[24];

  v2 = type metadata accessor for OSSignpostID(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = &v44[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  v8 = &v44[-v7];
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v44[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for DispatchQoS(0);
  v47 = *(_QWORD *)(v13 - 8);
  v48 = v13;
  __chkstk_darwin(v13);
  v15 = &v44[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  a1 += 16;
  swift_beginAccess(a1, v51, 0, 0);
  Strong = swift_weakLoadStrong(a1);
  if (Strong)
  {
    v17 = Strong;
    v46 = v10;
    v18 = (void *)objc_opt_self(PSSystemConfigurationDynamicStoreNETRBWatcher);
    result = objc_msgSend(v18, "sharedManager");
    if (result)
    {
      v20 = result;
      v45 = objc_msgSend(result, "shouldShowTethering");

      v21 = *(_BYTE *)(*(_QWORD *)(v17
                                 + OBJC_IVAR____TtC11SettingsApp31PersonalHotspotListItemProvider_airplaneModeListItemProvider)
                     + OBJC_IVAR____TtC11SettingsApp28AirplaneModeListItemProvider_airplaneMode);
      v22 = *(_QWORD *)(v17 + OBJC_IVAR____TtC11SettingsApp31PersonalHotspotListItemProvider_cellularDataSettingObserver);
      sub_100015C18();
      v23 = *(_BYTE *)(v22 + 18);
      result = objc_msgSend(v18, "sharedManager");
      if (result)
      {
        v24 = result;
        v25 = objc_msgSend(result, "isDataEnabled");

        if ((v25 & 1) != 0)
          v26 = 0;
        else
          v26 = v21 | v23 ^ 1;
        result = objc_msgSend(v18, "sharedManager");
        if (result)
        {
          v27 = result;
          v28 = objc_msgSend(result, "isTetheringEnabled");

          sub_100005494();
          v29 = (void *)static OS_dispatch_queue.main.getter();
          v30 = swift_allocObject(&unk_100149868, 24, 7);
          swift_weakInit(v30 + 16, v17);
          v31 = swift_allocObject(&unk_1001498B8, 27, 7);
          *(_QWORD *)(v31 + 16) = v30;
          *(_BYTE *)(v31 + 24) = v45;
          *(_BYTE *)(v31 + 25) = v26;
          *(_BYTE *)(v31 + 26) = v28;
          aBlock[4] = sub_100047F14;
          v50 = v31;
          aBlock[0] = _NSConcreteStackBlock;
          aBlock[1] = 1107296256;
          aBlock[2] = sub_100005350;
          aBlock[3] = &unk_1001498D0;
          v32 = _Block_copy(aBlock);
          v33 = swift_release(v50);
          static DispatchQoS.unspecified.getter(v33);
          aBlock[0] = _swiftEmptyArrayStorage;
          v34 = sub_100007828((unint64_t *)&qword_10015BAB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
          v35 = sub_100004FC8((uint64_t *)&unk_100156F40);
          v36 = sub_100007868((unint64_t *)&qword_10015BAC0, (uint64_t *)&unk_100156F40, (uint64_t)&protocol conformance descriptor for [A]);
          dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v35, v36, v9, v34);
          OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v12, v32);
          _Block_release(v32);
          swift_release(v17);

          (*(void (**)(_BYTE *, uint64_t))(v46 + 8))(v12, v9);
          return (id)(*(uint64_t (**)(_BYTE *, uint64_t))(v47 + 8))(v15, v48);
        }
        goto LABEL_16;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
    return result;
  }
  if (qword_100156CD8 != -1)
    swift_once(&qword_100156CD8, sub_10008BEEC);
  v37 = type metadata accessor for OSSignposter(0);
  sub_100007808(v37, (uint64_t)qword_10015D340);
  v38 = static OSSignpostID.exclusive.getter();
  v39 = OSSignposter.logHandle.getter(v38);
  v40 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v3 + 16))(v6, v8, v2);
    v41 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v41 = 0;
    v42 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v39, v40, v42, "PersonalHotspotListItemProvider.updatePersonalHotspotState bailed", "", v41, 2u);
    swift_slowDealloc(v41, -1, -1);

    v43 = *(void (**)(_BYTE *, uint64_t))(v3 + 8);
    v43(v8, v2);
    return (id)((uint64_t (*)(_BYTE *, uint64_t))v43)(v6, v2);
  }
  else
  {

    return (id)(*(uint64_t (**)(_BYTE *, uint64_t))(v3 + 8))(v8, v2);
  }
}

uint64_t sub_100047AD4(uint64_t a1, char a2, char a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t Strong;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_signpost_type_t v27;
  uint8_t *v28;
  os_signpost_id_t v29;
  void (*v30)(char *, uint64_t);
  _QWORD v32[2];
  char v33;
  _BYTE v34[24];
  _BYTE v35[24];
  _BYTE v36[24];

  v8 = type metadata accessor for OSSignpostID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)v32 - v13;
  v15 = a1 + 16;
  swift_beginAccess(v15, v36, 0, 0);
  Strong = swift_weakLoadStrong(v15);
  if (Strong)
  {
    v17 = Strong;
    sub_1000466A8(a2 & 1);
    swift_release(v17);
  }
  swift_beginAccess(v15, v35, 0, 0);
  v18 = swift_weakLoadStrong(v15);
  if (v18)
  {
    v19 = v18;
    v20 = a3 & 1;
    sub_1000467BC(v20);
    *(_BYTE *)(v19 + OBJC_IVAR____TtC11SettingsApp31PersonalHotspotListItemProvider_shouldDisable) = v20;
    swift_release(v19);
  }
  swift_beginAccess(v15, v34, 0, 0);
  v21 = swift_weakLoadStrong(v15);
  if (v21)
  {
    v22 = v21;
    v23 = a4 & 1;
    if (*(unsigned __int8 *)(v21 + 16) != v23)
    {
      sub_100007C2C((_QWORD *)(v21 + OBJC_IVAR____TtC11SettingsApp31PersonalHotspotListItemProvider_invalidator), *(_QWORD *)(v21 + OBJC_IVAR____TtC11SettingsApp31PersonalHotspotListItemProvider_invalidator + 24));
      v32[0] = "Personal Hotspot State";
      v32[1] = 22;
      v33 = 2;
      PassthroughSubject.send(_:)(v32);
    }
    *(_BYTE *)(v22 + 16) = v23;
    swift_release(v22);
  }
  if (qword_100156CD8 != -1)
    swift_once(&qword_100156CD8, sub_10008BEEC);
  v24 = type metadata accessor for OSSignposter(0);
  sub_100007808(v24, (uint64_t)qword_10015D340);
  v25 = static OSSignpostID.exclusive.getter();
  v26 = OSSignposter.logHandle.getter(v25);
  v27 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
    v28 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v28 = 0;
    v29 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v26, v27, v29, "PersonalHotspotListItemProvider.updatePersonalHotspotState completed", "", v28, 2u);
    swift_slowDealloc(v28, -1, -1);

    v30 = *(void (**)(char *, uint64_t))(v9 + 8);
    v30(v14, v8);
    return ((uint64_t (*)(char *, uint64_t))v30)(v12, v8);
  }
  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  }
}

uint64_t sub_100047D88@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_1000076F0(*v1 + OBJC_IVAR____TtC11SettingsApp31PersonalHotspotListItemProvider_id, a1, type metadata accessor for PrimarySettingsListItemIdentifier);
}

uint64_t sub_100047DB8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100046B04(a1, a2);
}

uint64_t sub_100047DD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004FC8(&qword_1001587E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100047E20()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100047E44(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v4 = result;
    sub_100047284();
    return swift_release(v4);
  }
  return result;
}

uint64_t sub_100047E98(uint64_t a1)
{
  uint64_t v1;

  return sub_100047E44(a1, v1);
}

uint64_t sub_100047EA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004FC8(&qword_1001587E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

id sub_100047EE8()
{
  uint64_t v0;

  return sub_10004762C(v0);
}

uint64_t sub_100047EF0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 27, 7);
}

uint64_t sub_100047F14()
{
  uint64_t v0;

  return sub_100047AD4(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24), *(_BYTE *)(v0 + 25), *(_BYTE *)(v0 + 26));
}

uint64_t sub_100047F30()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = OBJC_IVAR____TtC11SettingsApp33ExposureNotificationsItemProvider_enManager;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC11SettingsApp33ExposureNotificationsItemProvider_enManager);
  if (v2)
    objc_msgSend(v2, "invalidate");
  sub_100013014(v0 + OBJC_IVAR____TtC11SettingsApp33ExposureNotificationsItemProvider_id);
  sub_100005474((_QWORD *)(v0 + OBJC_IVAR____TtC11SettingsApp33ExposureNotificationsItemProvider_invalidator));

  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100047F9C()
{
  return type metadata accessor for ExposureNotificationsItemProvider(0);
}

uint64_t type metadata accessor for ExposureNotificationsItemProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_100158828;
  if (!qword_100158828)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ExposureNotificationsItemProvider);
  return result;
}

uint64_t sub_100047FE0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = type metadata accessor for PrimarySettingsListItemIdentifier(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "(";
    v4[2] = &unk_100116220;
    v4[3] = &unk_100116238;
    result = swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

void sub_100048068(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = v2;
  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v3 + OBJC_IVAR____TtC11SettingsApp33ExposureNotificationsItemProvider_shouldShowExposureNotifications) == 1)
  {
    sub_100012DC4(v3 + OBJC_IVAR____TtC11SettingsApp33ExposureNotificationsItemProvider_id, (uint64_t)v8);
    v9 = type metadata accessor for StaticPrimarySettingsListItemProvider(0);
    v10 = swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
    sub_10000F48C((uint64_t)v8, v10 + OBJC_IVAR____TtC11SettingsApp37StaticPrimarySettingsListItemProvider_id);
    sub_1000B2604(a1, a2);
    swift_setDeallocating(v10);
    sub_100013014(v10 + OBJC_IVAR____TtC11SettingsApp37StaticPrimarySettingsListItemProvider_id);
    swift_deallocClassInstance(v10, *(unsigned int *)(*(_QWORD *)v10 + 48), *(unsigned __int16 *)(*(_QWORD *)v10 + 52));
  }
  else
  {
    v11 = type metadata accessor for PrimarySettingsListItemModel(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a2, 1, 1, v11);
  }
  sub_1000481AC(v3);
}

void sub_1000481AC(uint64_t a1)
{
  id v2;
  unsigned int v3;
  uint64_t v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  _QWORD v15[5];
  uint64_t v16;

  v2 = objc_msgSend((id)objc_opt_self(PSLaunchTracker), "sharedInstance");
  v3 = objc_msgSend(v2, "launchHasCompleted");

  if (v3)
  {
    v4 = OBJC_IVAR____TtC11SettingsApp33ExposureNotificationsItemProvider_enManager;
    if (!*(_QWORD *)(a1 + OBJC_IVAR____TtC11SettingsApp33ExposureNotificationsItemProvider_enManager))
    {
      v5 = objc_msgSend(objc_allocWithZone((Class)ENManager), "init");
      v6 = *(void **)(a1 + v4);
      *(_QWORD *)(a1 + v4) = v5;

      v7 = *(void **)(a1 + v4);
      if (v7)
      {
        v8 = qword_100156D60;
        v9 = v7;
        if (v8 != -1)
          swift_once(&qword_100156D60, sub_1000D34BC);
        objc_msgSend(v9, "setDispatchQueue:", qword_10015D420);

        v10 = *(void **)(a1 + v4);
        if (v10)
        {
          v11 = swift_allocObject(&unk_100149938, 24, 7);
          swift_weakInit(v11 + 16, a1);
          v15[4] = sub_100048734;
          v16 = v11;
          v15[0] = _NSConcreteStackBlock;
          v15[1] = 1107296256;
          v15[2] = sub_10004873C;
          v15[3] = &unk_100149950;
          v12 = _Block_copy(v15);
          v13 = v16;
          v14 = v10;
          swift_release(v13);
          objc_msgSend(v14, "getEntitiesWithCompletion:", v12);
          _Block_release(v12);

        }
      }
    }
  }
}

uint64_t sub_100048344@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_100012DC4(*v1 + OBJC_IVAR____TtC11SettingsApp33ExposureNotificationsItemProvider_id, a1);
}

void sub_10004835C(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100048068(a1, a2);
}

uint64_t sub_10004837C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000483A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t Strong;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *oslog;
  _QWORD v30[3];
  _BYTE v31[8];
  const char *v32;
  uint64_t v33;
  char v34;
  uint64_t v35[3];

  if (!a5)
  {
    v15 = a6 + 16;
    if (a1)
    {
LABEL_7:
      v16 = v15;
      goto LABEL_8;
    }
    if (a2)
    {
      if ((unint64_t)a2 >> 62)
      {
        if (a2 >= 0)
          v25 = a2 & 0xFFFFFFFFFFFFFF8;
        else
          v25 = a2;
        swift_bridgeObjectRetain(a2);
        v26 = _CocoaArrayWrapper.endIndex.getter(v25);
        swift_bridgeObjectRelease(a2);
        if (v26)
          goto LABEL_7;
      }
      else if (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_7;
      }
    }
    if (a3)
    {
      if ((unint64_t)a3 >> 62)
      {
        if (a3 >= 0)
          v27 = a3 & 0xFFFFFFFFFFFFFF8;
        else
          v27 = a3;
        swift_bridgeObjectRetain(a3);
        v28 = _CocoaArrayWrapper.endIndex.getter(v27);
        swift_bridgeObjectRelease(a3);
        if (v28)
          goto LABEL_7;
      }
      else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_7;
      }
    }
    v16 = v15;
    if (!a4)
    {
      swift_beginAccess(v15, v35, 0, 0);
      Strong = swift_weakLoadStrong(v15);
      if (!Strong)
        return;
      v18 = Strong;
      v24 = OBJC_IVAR____TtC11SettingsApp33ExposureNotificationsItemProvider_shouldShowExposureNotifications;
      if (*(_BYTE *)(Strong
                    + OBJC_IVAR____TtC11SettingsApp33ExposureNotificationsItemProvider_shouldShowExposureNotifications) == 1)
      {
        sub_100007C2C((_QWORD *)(Strong + OBJC_IVAR____TtC11SettingsApp33ExposureNotificationsItemProvider_invalidator), *(_QWORD *)(Strong + OBJC_IVAR____TtC11SettingsApp33ExposureNotificationsItemProvider_invalidator + 24));
        v32 = "Exposure Notifications";
        v33 = 22;
        v34 = 2;
        PassthroughSubject.send(_:)(&v32);
      }
      *(_BYTE *)(v18 + v24) = 0;
LABEL_12:
      swift_release(v18);
      return;
    }
LABEL_8:
    swift_beginAccess(v16, v35, 0, 0);
    v17 = swift_weakLoadStrong(v15);
    if (!v17)
      return;
    v18 = v17;
    v19 = OBJC_IVAR____TtC11SettingsApp33ExposureNotificationsItemProvider_shouldShowExposureNotifications;
    if ((*(_BYTE *)(v17
                   + OBJC_IVAR____TtC11SettingsApp33ExposureNotificationsItemProvider_shouldShowExposureNotifications) & 1) == 0)
    {
      sub_100007C2C((_QWORD *)(v17 + OBJC_IVAR____TtC11SettingsApp33ExposureNotificationsItemProvider_invalidator), *(_QWORD *)(v17 + OBJC_IVAR____TtC11SettingsApp33ExposureNotificationsItemProvider_invalidator + 24));
      v32 = "Exposure Notifications";
      v33 = 22;
      v34 = 2;
      PassthroughSubject.send(_:)(&v32);
    }
    *(_BYTE *)(v18 + v19) = 1;
    goto LABEL_12;
  }
  if (qword_100156CC0 != -1)
    swift_once(&qword_100156CC0, sub_10008BE7C);
  v7 = type metadata accessor for Logger(0);
  sub_100007808(v7, (uint64_t)qword_10015D2F8);
  swift_errorRetain(a5);
  v8 = swift_errorRetain(a5);
  oslog = Logger.logObject.getter(v8);
  v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v35[0] = v11;
    *(_DWORD *)v10 = 136446210;
    swift_getErrorValue(a5, v31, v30);
    v12 = Error.localizedDescription.getter(v30[1], v30[2]);
    v14 = v13;
    v32 = (const char *)sub_1000DA1F0(v12, v13, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease(v14);
    swift_errorRelease(a5);
    swift_errorRelease(a5);
    _os_log_impl((void *)&_mh_execute_header, oslog, v9, "Error in querying EN status: %{public}s.", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {
    swift_errorRelease(a5);
    swift_errorRelease(a5);

  }
}

void sub_100048734(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  sub_1000483A0(a1, a2, a3, a4, a5, v5);
}

uint64_t sub_10004873C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  uint64_t v9;
  uint64_t v11;
  void (*v12)(void *, uint64_t, uint64_t, void *, void *);
  unint64_t v13;
  unint64_t v14;
  id v15;
  id v16;
  id v17;

  v9 = a3;
  v12 = *(void (**)(void *, uint64_t, uint64_t, void *, void *))(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  if (a3)
  {
    v13 = sub_10004881C();
    v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, v13);
  }
  if (a4)
  {
    v14 = sub_10004881C();
    a4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a4, v14);
  }
  swift_retain(v11);
  v15 = a2;
  v16 = a5;
  v17 = a6;
  v12(a2, v9, a4, a5, a6);
  swift_release(v11);

  swift_bridgeObjectRelease(a4);
  return swift_bridgeObjectRelease(v9);
}

unint64_t sub_10004881C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001588C8;
  if (!qword_1001588C8)
  {
    v1 = objc_opt_self(ENEntity);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001588C8);
  }
  return result;
}

ValueMetadata *type metadata accessor for SettingsSearchZeroKeywordListSuggestionsRow()
{
  return &type metadata for SettingsSearchZeroKeywordListSuggestionsRow;
}

uint64_t sub_100048868(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10012A474, 1);
}

uint64_t sub_100048878@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = type metadata accessor for SettingsNavigationEventRecord(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  *(_QWORD *)a2 = swift_getKeyPath(&unk_1001162E0);
  v8 = sub_100004FC8(&qword_1001588F0);
  swift_storeEnumTagMultiPayload(a2, v8, 0);
  v9 = type metadata accessor for SettingsSearchZeroKeywordListSuggestionsItem(0);
  return (*(uint64_t (**)(char *, char *, uint64_t))(v5 + 32))(&a2[*(int *)(v9 + 20)], v7, v4);
}

uint64_t sub_100048944()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v8 = *v0;
  swift_bridgeObjectRetain(v8);
  v1 = sub_100004FC8(&qword_1001588D0);
  v2 = type metadata accessor for URL(0);
  v3 = type metadata accessor for SettingsSearchZeroKeywordListSuggestionsItem(0);
  v4 = sub_100007868(&qword_1001588D8, &qword_1001588D0, (uint64_t)&protocol conformance descriptor for [A]);
  v5 = sub_100007828(&qword_1001588E0, type metadata accessor for SettingsSearchZeroKeywordListSuggestionsItem, (uint64_t)&unk_100116DD0);
  v6 = sub_100007828(&qword_1001588E8, (uint64_t (*)(uint64_t))&type metadata accessor for SettingsNavigationEventRecord, (uint64_t)&protocol conformance descriptor for SettingsNavigationEventRecord);
  return ForEach<>.init(_:content:)(&v8, sub_100048878, 0, v1, v2, v3, v4, v5, v6);
}

unint64_t sub_100048A48()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001588F8;
  if (!qword_1001588F8)
  {
    v1 = sub_100005430(&qword_100158900);
    sub_100007868(&qword_100158908, &qword_100158910, (uint64_t)&protocol conformance descriptor for _LayoutRoot<A>);
    sub_100048ACC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _VariadicView.Tree<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001588F8);
  }
  return result;
}

unint64_t sub_100048ACC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100158918;
  if (!qword_100158918)
  {
    v1 = sub_100005430(&qword_100158920);
    sub_100007828(&qword_1001588E0, type metadata accessor for SettingsSearchZeroKeywordListSuggestionsItem, (uint64_t)&unk_100116DD0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_100158918);
  }
  return result;
}

_QWORD *sub_100048B48(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  id v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;

  v4 = type metadata accessor for PrimarySettingsListLinkModel(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v6 = (int *)v4;
    v7 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(a2, v7))
    {
      case 0u:
        v8 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
        v9 = a1;
        v10 = v7;
        v11 = 0;
        goto LABEL_14;
      case 1u:
        v13 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
        v9 = a1;
        v10 = v7;
        v11 = 1;
        goto LABEL_14;
      case 2u:
        v14 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
        v15 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v16 = (_QWORD *)((char *)a1 + v15);
        v17 = (_QWORD *)((char *)a2 + v15);
        v18 = v17[1];
        *v16 = *v17;
        v16[1] = v18;
        swift_bridgeObjectRetain(v18);
        v9 = a1;
        v10 = v7;
        v11 = 2;
        goto LABEL_14;
      case 3u:
        v19 = a2[1];
        *a1 = *a2;
        a1[1] = v19;
        v20 = a2[3];
        a1[2] = a2[2];
        a1[3] = v20;
        v21 = a2[5];
        a1[4] = a2[4];
        a1[5] = v21;
        v22 = a2[7];
        a1[6] = a2[6];
        a1[7] = v22;
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v22);
        v9 = a1;
        v10 = v7;
        v11 = 3;
        goto LABEL_14;
      case 4u:
        v23 = a2[1];
        *a1 = *a2;
        a1[1] = v23;
        v24 = a2[3];
        a1[2] = a2[2];
        a1[3] = v24;
        v25 = a2[5];
        a1[4] = a2[4];
        a1[5] = v25;
        a1[6] = a2[6];
        swift_bridgeObjectRetain(v23);
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v25);
        v9 = a1;
        v10 = v7;
        v11 = 4;
        goto LABEL_14;
      case 5u:
        v26 = a2[1];
        *a1 = *a2;
        a1[1] = v26;
        v27 = a2[3];
        a1[2] = a2[2];
        a1[3] = v27;
        v29 = (void *)a2[4];
        v28 = a2[5];
        a1[4] = v29;
        a1[5] = v28;
        v30 = a2[9];
        swift_bridgeObjectRetain(v26);
        swift_bridgeObjectRetain(v27);
        v31 = v29;
        swift_bridgeObjectRetain(v28);
        if (v30)
        {
          a1[9] = v30;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v30 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v30);
        }
        else
        {
          v32 = *((_OWORD *)a2 + 4);
          *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
          *((_OWORD *)a1 + 4) = v32;
        }
        v9 = a1;
        v10 = v7;
        v11 = 5;
LABEL_14:
        swift_storeEnumTagMultiPayload(v9, v10, v11);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
        break;
    }
    *((_BYTE *)a1 + v6[5]) = *((_BYTE *)a2 + v6[5]);
    v33 = v6[6];
    v34 = (char *)a1 + v33;
    v35 = (char *)a2 + v33;
    v36 = *(_QWORD *)((char *)a2 + v33);
    v37 = *(_QWORD *)((char *)a2 + v33 + 8);
    v38 = *((_BYTE *)a2 + v33 + 16);
    sub_10000BAD4(v36, v37, v38);
    *(_QWORD *)v34 = v36;
    *((_QWORD *)v34 + 1) = v37;
    v34[16] = v38;
    v39 = *((_QWORD *)v35 + 3);
    *((_QWORD *)v34 + 3) = v39;
    v40 = v6[7];
    v41 = (char *)a1 + v40;
    v42 = (char *)a2 + v40;
    v43 = *((unsigned __int8 *)a2 + v40 + 16);
    swift_bridgeObjectRetain(v39);
    if (v43 == 255)
    {
      *(_OWORD *)v41 = *(_OWORD *)v42;
      v41[16] = v42[16];
    }
    else
    {
      v44 = *(_QWORD *)v42;
      v45 = *((_QWORD *)v42 + 1);
      sub_10000BB2C(v44, v45, v43);
      *(_QWORD *)v41 = v44;
      *((_QWORD *)v41 + 1) = v45;
      v41[16] = v43;
    }
    *((_BYTE *)a1 + v6[8]) = *((_BYTE *)a2 + v6[8]);
  }
  return a1;
}

uint64_t sub_100048E6C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  int v10;

  v2 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(a1, v2))
  {
    case 0u:
    case 1u:
      v3 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
      break;
    case 2u:
      v4 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
      v5 = sub_100004FC8(&qword_10015C420);
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v5 + 48) + 8));
      break;
    case 3u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
      break;
    case 4u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      break;
    case 5u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));

      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      if (*(_QWORD *)(a1 + 72))
        sub_100005474((_QWORD *)(a1 + 48));
      break;
    default:
      break;
  }
  v6 = type metadata accessor for PrimarySettingsListLinkModel(0);
  v7 = a1 + *(int *)(v6 + 24);
  sub_100007618(*(_QWORD *)v7, *(_QWORD *)(v7 + 8), *(_BYTE *)(v7 + 16));
  result = swift_bridgeObjectRelease(*(_QWORD *)(v7 + 24));
  v9 = a1 + *(int *)(v6 + 28);
  v10 = *(unsigned __int8 *)(v9 + 16);
  if (v10 != 255)
    return sub_10000BB54(*(_QWORD *)v9, *(_QWORD *)(v9 + 8), v10);
  return result;
}

_QWORD *sub_100048FE4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  id v27;
  __int128 v28;
  int *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;

  v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(a2, v4))
  {
    case 0u:
      v5 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
      v6 = a1;
      v7 = v4;
      v8 = 0;
      goto LABEL_12;
    case 1u:
      v9 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      v6 = a1;
      v7 = v4;
      v8 = 1;
      goto LABEL_12;
    case 2u:
      v10 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      v11 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
      v12 = (_QWORD *)((char *)a1 + v11);
      v13 = (_QWORD *)((char *)a2 + v11);
      v14 = v13[1];
      *v12 = *v13;
      v12[1] = v14;
      swift_bridgeObjectRetain(v14);
      v6 = a1;
      v7 = v4;
      v8 = 2;
      goto LABEL_12;
    case 3u:
      v15 = a2[1];
      *a1 = *a2;
      a1[1] = v15;
      v16 = a2[3];
      a1[2] = a2[2];
      a1[3] = v16;
      v17 = a2[5];
      a1[4] = a2[4];
      a1[5] = v17;
      v18 = a2[7];
      a1[6] = a2[6];
      a1[7] = v18;
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v18);
      v6 = a1;
      v7 = v4;
      v8 = 3;
      goto LABEL_12;
    case 4u:
      v19 = a2[1];
      *a1 = *a2;
      a1[1] = v19;
      v20 = a2[3];
      a1[2] = a2[2];
      a1[3] = v20;
      v21 = a2[5];
      a1[4] = a2[4];
      a1[5] = v21;
      a1[6] = a2[6];
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRetain(v21);
      v6 = a1;
      v7 = v4;
      v8 = 4;
      goto LABEL_12;
    case 5u:
      v22 = a2[1];
      *a1 = *a2;
      a1[1] = v22;
      v23 = a2[3];
      a1[2] = a2[2];
      a1[3] = v23;
      v25 = (void *)a2[4];
      v24 = a2[5];
      a1[4] = v25;
      a1[5] = v24;
      v26 = a2[9];
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v23);
      v27 = v25;
      swift_bridgeObjectRetain(v24);
      if (v26)
      {
        a1[9] = v26;
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v26 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v26);
      }
      else
      {
        v28 = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 4) = v28;
      }
      v6 = a1;
      v7 = v4;
      v8 = 5;
LABEL_12:
      swift_storeEnumTagMultiPayload(v6, v7, v8);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
      break;
  }
  v29 = (int *)type metadata accessor for PrimarySettingsListLinkModel(0);
  *((_BYTE *)a1 + v29[5]) = *((_BYTE *)a2 + v29[5]);
  v30 = v29[6];
  v31 = (char *)a1 + v30;
  v32 = (char *)a2 + v30;
  v33 = *(_QWORD *)((char *)a2 + v30);
  v34 = *(_QWORD *)((char *)a2 + v30 + 8);
  v35 = *((_BYTE *)a2 + v30 + 16);
  sub_10000BAD4(v33, v34, v35);
  *(_QWORD *)v31 = v33;
  *((_QWORD *)v31 + 1) = v34;
  v31[16] = v35;
  v36 = *((_QWORD *)v32 + 3);
  *((_QWORD *)v31 + 3) = v36;
  v37 = v29[7];
  v38 = (char *)a1 + v37;
  v39 = (char *)a2 + v37;
  v40 = *((unsigned __int8 *)a2 + v37 + 16);
  swift_bridgeObjectRetain(v36);
  if (v40 == 255)
  {
    *(_OWORD *)v38 = *(_OWORD *)v39;
    v38[16] = v39[16];
  }
  else
  {
    v41 = *(_QWORD *)v39;
    v42 = *((_QWORD *)v39 + 1);
    sub_10000BB2C(v41, v42, v40);
    *(_QWORD *)v38 = v41;
    *((_QWORD *)v38 + 1) = v42;
    v38[16] = v40;
  }
  *((_BYTE *)a1 + v29[8]) = *((_BYTE *)a2 + v29[8]);
  return a1;
}

_QWORD *sub_1000492DC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  __int128 v28;
  int *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  __int128 v53;

  if (a1 != a2)
  {
    sub_1000076B4((uint64_t)a1, type metadata accessor for PrimarySettingsListItemIdentifier);
    v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(a2, v4))
    {
      case 0u:
        v5 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
        v6 = a1;
        v7 = v4;
        v8 = 0;
        goto LABEL_13;
      case 1u:
        v9 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
        v6 = a1;
        v7 = v4;
        v8 = 1;
        goto LABEL_13;
      case 2u:
        v10 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
        v11 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v12 = (_QWORD *)((char *)a1 + v11);
        v13 = (_QWORD *)((char *)a2 + v11);
        *v12 = *v13;
        v14 = v13[1];
        v12[1] = v14;
        swift_bridgeObjectRetain(v14);
        v6 = a1;
        v7 = v4;
        v8 = 2;
        goto LABEL_13;
      case 3u:
        *a1 = *a2;
        v15 = a2[1];
        a1[1] = v15;
        a1[2] = a2[2];
        v16 = a2[3];
        a1[3] = v16;
        a1[4] = a2[4];
        v17 = a2[5];
        a1[5] = v17;
        a1[6] = a2[6];
        v18 = a2[7];
        a1[7] = v18;
        swift_bridgeObjectRetain(v15);
        swift_bridgeObjectRetain(v16);
        swift_bridgeObjectRetain(v17);
        swift_bridgeObjectRetain(v18);
        v6 = a1;
        v7 = v4;
        v8 = 3;
        goto LABEL_13;
      case 4u:
        *a1 = *a2;
        v19 = a2[1];
        a1[1] = v19;
        a1[2] = a2[2];
        v20 = a2[3];
        a1[3] = v20;
        a1[4] = a2[4];
        v21 = a2[5];
        a1[5] = v21;
        a1[6] = a2[6];
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v21);
        v6 = a1;
        v7 = v4;
        v8 = 4;
        goto LABEL_13;
      case 5u:
        *a1 = *a2;
        v22 = a2[1];
        a1[1] = v22;
        a1[2] = a2[2];
        v23 = a2[3];
        a1[3] = v23;
        v24 = (void *)a2[4];
        a1[4] = v24;
        v25 = a2[5];
        a1[5] = v25;
        v26 = a2[9];
        swift_bridgeObjectRetain(v22);
        swift_bridgeObjectRetain(v23);
        v27 = v24;
        swift_bridgeObjectRetain(v25);
        if (v26)
        {
          a1[9] = v26;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v26 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v26);
        }
        else
        {
          v28 = *((_OWORD *)a2 + 4);
          *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
          *((_OWORD *)a1 + 4) = v28;
        }
        v6 = a1;
        v7 = v4;
        v8 = 5;
LABEL_13:
        swift_storeEnumTagMultiPayload(v6, v7, v8);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
        break;
    }
  }
  v29 = (int *)type metadata accessor for PrimarySettingsListLinkModel(0);
  *((_BYTE *)a1 + v29[5]) = *((_BYTE *)a2 + v29[5]);
  v30 = v29[6];
  v31 = (char *)a1 + v30;
  v32 = (char *)a2 + v30;
  v33 = *(_QWORD *)((char *)a2 + v30);
  v34 = *(_QWORD *)((char *)a2 + v30 + 8);
  v35 = *((_BYTE *)a2 + v30 + 16);
  sub_10000BAD4(v33, v34, v35);
  v36 = *(_QWORD *)v31;
  v37 = *((_QWORD *)v31 + 1);
  v38 = v31[16];
  *(_QWORD *)v31 = v33;
  *((_QWORD *)v31 + 1) = v34;
  v31[16] = v35;
  sub_100007618(v36, v37, v38);
  v39 = *((_QWORD *)v32 + 3);
  v40 = *((_QWORD *)v31 + 3);
  *((_QWORD *)v31 + 3) = v39;
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRelease(v40);
  v41 = v29[7];
  v42 = (uint64_t)a1 + v41;
  v43 = (char *)a2 + v41;
  v44 = *((unsigned __int8 *)a2 + v41 + 16);
  if (*((unsigned __int8 *)a1 + v41 + 16) == 255)
  {
    if (v44 == 255)
    {
      v53 = *(_OWORD *)v43;
      *(_BYTE *)(v42 + 16) = v43[16];
      *(_OWORD *)v42 = v53;
    }
    else
    {
      v50 = *(_QWORD *)v43;
      v51 = *((_QWORD *)v43 + 1);
      sub_10000BB2C(v50, v51, v44);
      *(_QWORD *)v42 = v50;
      *(_QWORD *)(v42 + 8) = v51;
      *(_BYTE *)(v42 + 16) = v44;
    }
  }
  else if (v44 == 255)
  {
    sub_100010D24(v42);
    v52 = v43[16];
    *(_OWORD *)v42 = *(_OWORD *)v43;
    *(_BYTE *)(v42 + 16) = v52;
  }
  else
  {
    v45 = *(_QWORD *)v43;
    v46 = *((_QWORD *)v43 + 1);
    sub_10000BB2C(v45, v46, v44);
    v47 = *(_QWORD *)v42;
    v48 = *(_QWORD *)(v42 + 8);
    *(_QWORD *)v42 = v45;
    *(_QWORD *)(v42 + 8) = v46;
    v49 = *(_BYTE *)(v42 + 16);
    *(_BYTE *)(v42 + 16) = v44;
    sub_10000BB54(v47, v48, v49);
  }
  *((_BYTE *)a1 + v29[8]) = *((_BYTE *)a2 + v29[8]);
  return a1;
}

char *sub_1000496B8(char *a1, char *a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  char *v16;
  char *v17;

  v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v4);
  if (EnumCaseMultiPayload == 2)
  {
    v7 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    v8 = sub_100004FC8(&qword_10015C420);
    *(_OWORD *)&a1[*(int *)(v8 + 48)] = *(_OWORD *)&a2[*(int *)(v8 + 48)];
    swift_storeEnumTagMultiPayload(a1, v4, 2);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v9 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
    swift_storeEnumTagMultiPayload(a1, v4, 1);
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    v6 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, v4, 0);
  }
  v10 = (int *)type metadata accessor for PrimarySettingsListLinkModel(0);
  a1[v10[5]] = a2[v10[5]];
  v11 = v10[6];
  v12 = &a1[v11];
  v13 = &a2[v11];
  v14 = *((_OWORD *)v13 + 1);
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *((_OWORD *)v12 + 1) = v14;
  v15 = v10[7];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v16[16] = v17[16];
  *(_OWORD *)v16 = *(_OWORD *)v17;
  a1[v10[8]] = a2[v10[8]];
  return a1;
}

char *sub_100049828(char *a1, char *a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  if (a1 != a2)
  {
    sub_1000076B4((uint64_t)a1, type metadata accessor for PrimarySettingsListItemIdentifier);
    v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v4);
    if (EnumCaseMultiPayload == 2)
    {
      v7 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      v8 = sub_100004FC8(&qword_10015C420);
      *(_OWORD *)&a1[*(int *)(v8 + 48)] = *(_OWORD *)&a2[*(int *)(v8 + 48)];
      swift_storeEnumTagMultiPayload(a1, v4, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v9 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      swift_storeEnumTagMultiPayload(a1, v4, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, v4, 0);
    }
  }
  v10 = (int *)type metadata accessor for PrimarySettingsListLinkModel(0);
  a1[v10[5]] = a2[v10[5]];
  v11 = v10[6];
  v12 = &a1[v11];
  v13 = &a2[v11];
  LOBYTE(v11) = a2[v11 + 16];
  v14 = *(_QWORD *)v12;
  v15 = *((_QWORD *)v12 + 1);
  v16 = v12[16];
  *(_OWORD *)v12 = *(_OWORD *)v13;
  v12[16] = v11;
  sub_100007618(v14, v15, v16);
  v17 = *((_QWORD *)v12 + 3);
  *((_QWORD *)v12 + 3) = *((_QWORD *)v13 + 3);
  swift_bridgeObjectRelease(v17);
  v18 = v10[7];
  v19 = (uint64_t)&a1[v18];
  v20 = &a2[v18];
  v21 = a1[v18 + 16];
  if (v21 == 255)
    goto LABEL_13;
  v22 = v20[16];
  if (v22 == 255)
  {
    sub_100010D24(v19);
LABEL_13:
    *(_OWORD *)v19 = *(_OWORD *)v20;
    *(_BYTE *)(v19 + 16) = v20[16];
    goto LABEL_14;
  }
  v23 = *(_QWORD *)v19;
  v24 = *(_QWORD *)(v19 + 8);
  *(_OWORD *)v19 = *(_OWORD *)v20;
  *(_BYTE *)(v19 + 16) = v22;
  sub_10000BB54(v23, v24, v21);
LABEL_14:
  a1[v10[8]] = a2[v10[8]];
  return a1;
}

uint64_t sub_100049A18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100049A24);
}

uint64_t sub_100049A24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PrimarySettingsListLinkModel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_100049A60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100049A6C);
}

uint64_t sub_100049A6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PrimarySettingsListLinkModel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for PrimarySettingsListLink(uint64_t a1)
{
  uint64_t result;

  result = qword_100158980;
  if (!qword_100158980)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PrimarySettingsListLink);
  return result;
}

uint64_t sub_100049AE8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for PrimarySettingsListLinkModel(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100049B50(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10012A4C4, 1);
}

uint64_t sub_100049B60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v3 = a1 + *(int *)(type metadata accessor for PrimarySettingsListLinkModel(0) + 24);
  v4 = *(_QWORD *)v3;
  v5 = *(_QWORD *)(v3 + 8);
  v6 = *(_BYTE *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  *(_QWORD *)a2 = *(_QWORD *)v3;
  *(_QWORD *)(a2 + 8) = v5;
  *(_BYTE *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 24) = v7;
  sub_10000BAD4(v4, v5, v6);
  return swift_bridgeObjectRetain(v7);
}

uint64_t sub_100049BB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t result;
  uint64_t v18;

  v4 = type metadata accessor for PrimarySettingsListLink(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1 + *(int *)(type metadata accessor for PrimarySettingsListLinkModel(0) + 28);
  v8 = *(_QWORD *)v7;
  v9 = *(_QWORD *)(v7 + 8);
  v10 = *(unsigned __int8 *)(v7 + 16);
  sub_100049DCC(a1, (uint64_t)v6);
  v11 = v8;
  v12 = v9;
  v13 = v10;
  if (v10 == 255)
  {
    sub_10009C7A4();
    v11 = v14;
    v12 = v15;
    v13 = v16;
  }
  sub_100011774(v8, v9, v10);
  sub_1000076B4((uint64_t)v6, type metadata accessor for PrimarySettingsListLink);
  result = swift_getKeyPath(&unk_100116398);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = v11;
  *(_QWORD *)(a2 + 24) = v12;
  *(_BYTE *)(a2 + 32) = v13;
  return result;
}

uint64_t sub_100049CA4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  unint64_t v7;
  double v8;
  _BYTE v10[16];
  uint64_t v11;
  _BYTE v12[16];
  uint64_t v13;

  v3 = sub_100004FC8(&qword_100157440);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v10[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = v1;
  v11 = v1;
  v7 = sub_1000116EC();
  Label.init(title:icon:)(sub_100049DBC, v12, sub_100049DC4, v10, &type metadata for Text, &type metadata for Icon, &protocol witness table for Text, v7);
  if (*(_BYTE *)(v1 + *(int *)(type metadata accessor for PrimarySettingsListLinkModel(0) + 20)))
    v8 = 0.5;
  else
    v8 = 1.0;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v4 + 16))(a1, v6, v3);
  *(double *)(a1 + *(int *)(sub_100004FC8(&qword_1001589B8) + 36)) = v8;
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_100049DBC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100049B60(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_100049DC4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100049BB0(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_100049DCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PrimarySettingsListLink(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_100049E1C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001589C0;
  if (!qword_1001589C0)
  {
    v1 = sub_100005430(&qword_1001589B8);
    sub_10001162C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001589C0);
  }
  return result;
}

uint64_t sub_100049E88()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD aBlock[6];
  void *v20;

  v0 = type metadata accessor for DispatchWorkItemFlags(0);
  v18 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin();
  v2 = (char *)&v16 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DispatchQoS(0);
  v3 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin();
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS.QoSClass(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin();
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005494();
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for DispatchQoS.QoSClass.userInteractive(_:), v6);
  v10 = (void *)static OS_dispatch_queue.global(qos:)(v9);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  aBlock[4] = sub_10004A0B4;
  aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100005350;
  aBlock[3] = &unk_100149A30;
  v11 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter();
  v20 = &_swiftEmptyArrayStorage;
  v12 = sub_100007828((unint64_t *)&qword_10015BAB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v13 = sub_100004FC8((uint64_t *)&unk_100156F40);
  v14 = sub_10000551C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v20, v13, v14, v0, v12);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v5, v2, v11);
  _Block_release(v11);

  (*(void (**)(char *, uint64_t))(v18 + 8))(v2, v0);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v17);
}

uint64_t sub_10004A0B4()
{
  uint64_t result;

  if (qword_100156D90 != -1)
    result = swift_once(&qword_100156D90, sub_100108E9C);
  if (qword_100156D50 != -1)
    return swift_once(&qword_100156D50, sub_1000C6E88);
  return result;
}

uint64_t sub_10004A114(void *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v10;
  uint64_t v11;

  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)(a2 + 16))
    {
      v7 = sub_1000DAA60((uint64_t)a1);
      if ((v8 & 1) != 0)
      {
        v6 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v7);
        swift_retain(v6);
        return v6;
      }
    }
    return 0;
  }
  v3 = a1;
  v4 = __CocoaDictionary.lookup(_:)();

  if (!v4)
    return 0;
  v10 = v4;
  v5 = type metadata accessor for OSSignpostIntervalState(0);
  swift_unknownObjectRetain(v4);
  swift_dynamicCast(&v11, &v10, (char *)&type metadata for Swift.AnyObject + 8, v5, 7);
  v6 = v11;
  swift_unknownObjectRelease(v4);
  return v6;
}

uint64_t sub_10004A1DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[5];

  v9[3] = &type metadata for DeviceOSExpertFeatureFlags;
  v9[4] = sub_1000560E4();
  LOBYTE(v9[0]) = 1;
  isFeatureEnabled(_:)(v9);
  sub_100005474(v9);
  v0 = sub_100004FC8(&qword_100158B58);
  v1 = type metadata accessor for URL(0);
  v2 = swift_allocObject(v0, ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v1 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) | 7);
  *(_OWORD *)(v2 + 16) = xmmword_1001164D0;
  v3 = String._bridgeToObjectiveC()();
  v4 = (id)SFRuntimeAbsoluteFilePathForPath();

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  URL.init(fileURLWithPath:)(v5, v7);
  swift_bridgeObjectRelease(v7);
  return v2;
}

uint64_t sub_10004A2EC()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100116710);
  v4 = v0;
  v2 = sub_100007828(&qword_100158B50, type metadata accessor for SettingsAppSearchViewModel, (uint64_t)&unk_1001166F4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10004A374@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100116710);
  v8 = v3;
  v5 = sub_100007828(&qword_100158B50, type metadata accessor for SettingsAppSearchViewModel, (uint64_t)&unk_1001166F4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(_QWORD *)(v3 + 16);
  *a2 = v6;
  return swift_bridgeObjectRetain(v6);
}

uint64_t sub_10004A404(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100116710);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_100007828(&qword_100158B50, type metadata accessor for SettingsAppSearchViewModel, (uint64_t)&unk_1001166F4);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_1000560AC, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_10004A4BC()
{
  uint64_t v0;
  NSString v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = type metadata accessor for URL(0);
  sub_10001AED4(v0, qword_1001589D0);
  sub_100007808(v0, (uint64_t)qword_1001589D0);
  v1 = String._bridgeToObjectiveC()();
  v2 = (id)SFRuntimeAbsoluteFilePathForPath();

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v5 = v4;

  URL.init(fileURLWithPath:)(v3, v5);
  return swift_bridgeObjectRelease(v5);
}

uint64_t sub_10004A564()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t result;

  v0 = sub_100004FC8(&qword_100158B58);
  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = *(unsigned __int8 *)(v2 + 80);
  v5 = (v4 + 32) & ~v4;
  v6 = swift_allocObject(v0, v5 + 10 * v3, v4 | 7);
  *(_OWORD *)(v6 + 16) = xmmword_1001164E0;
  URL.init(fileURLWithPath:)(0xD000000000000040, 0x80000001001220D0);
  URL.init(fileURLWithPath:)(0xD000000000000045, 0x8000000100122120);
  URL.init(fileURLWithPath:)(0xD000000000000052, 0x8000000100122170);
  URL.init(fileURLWithPath:)(0xD00000000000003ELL, 0x80000001001221D0);
  URL.init(fileURLWithPath:)(0xD000000000000041, 0x8000000100122210);
  URL.init(fileURLWithPath:)(0xD00000000000003DLL, 0x8000000100122260);
  URL.init(fileURLWithPath:)(0xD000000000000046, 0x80000001001222A0);
  URL.init(fileURLWithPath:)(0xD000000000000046, 0x80000001001222F0);
  URL.init(fileURLWithPath:)(0xD000000000000049, 0x8000000100122340);
  URL.init(fileURLWithPath:)(0xD00000000000005BLL, 0x8000000100122390);
  v7 = sub_100055B40(v6);
  swift_setDeallocating(v6);
  swift_arrayDestroy(v6 + v5, 10, v1);
  result = swift_deallocClassInstance(v6, 32, 7);
  qword_1001589E8 = (uint64_t)v7;
  return result;
}

uint64_t sub_10004A768()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t result;
  uint64_t v8;

  v0 = sub_100004FC8(&qword_100158B58);
  v8 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v8 - 8);
  v2 = *(_QWORD *)(v1 + 72);
  v3 = *(unsigned __int8 *)(v1 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = swift_allocObject(v0, v4 + 37 * v2, v3 | 7);
  *(_OWORD *)(v5 + 16) = xmmword_1001164F0;
  URL.init(fileURLWithPath:)(0xD000000000000080, 0x8000000100120D40);
  URL.init(fileURLWithPath:)(0xD000000000000084, 0x8000000100120DD0);
  URL.init(fileURLWithPath:)(0xD000000000000081, 0x8000000100120E60);
  URL.init(fileURLWithPath:)(0xD000000000000081, 0x8000000100120EF0);
  URL.init(fileURLWithPath:)(0xD000000000000084, 0x8000000100120F80);
  URL.init(fileURLWithPath:)(0xD00000000000007DLL, 0x8000000100121010);
  URL.init(fileURLWithPath:)(0xD000000000000084, 0x8000000100121090);
  URL.init(fileURLWithPath:)(0xD00000000000007ELL, 0x8000000100121120);
  URL.init(fileURLWithPath:)(0xD00000000000007CLL, 0x80000001001211A0);
  URL.init(fileURLWithPath:)(0xD000000000000084, 0x8000000100121220);
  URL.init(fileURLWithPath:)(0xD00000000000007DLL, 0x80000001001212B0);
  URL.init(fileURLWithPath:)(0xD000000000000080, 0x8000000100121330);
  URL.init(fileURLWithPath:)(0xD000000000000094, 0x80000001001213C0);
  URL.init(fileURLWithPath:)(0xD000000000000081, 0x8000000100121460);
  URL.init(fileURLWithPath:)(0xD00000000000007ELL, 0x80000001001214F0);
  URL.init(fileURLWithPath:)(0xD00000000000008FLL, 0x8000000100121570);
  URL.init(fileURLWithPath:)(0xD00000000000007FLL, 0x8000000100121600);
  URL.init(fileURLWithPath:)(0xD000000000000081, 0x8000000100121680);
  URL.init(fileURLWithPath:)(0xD00000000000007DLL, 0x8000000100121710);
  URL.init(fileURLWithPath:)(0xD000000000000080, 0x8000000100121790);
  URL.init(fileURLWithPath:)(0xD000000000000081, 0x8000000100121820);
  URL.init(fileURLWithPath:)(0xD000000000000082, 0x80000001001218B0);
  URL.init(fileURLWithPath:)(0xD000000000000083, 0x8000000100121940);
  URL.init(fileURLWithPath:)(0xD00000000000007CLL, 0x80000001001219D0);
  URL.init(fileURLWithPath:)(0xD000000000000081, 0x8000000100121A50);
  URL.init(fileURLWithPath:)(0xD000000000000086, 0x8000000100121AE0);
  URL.init(fileURLWithPath:)(0xD00000000000007FLL, 0x8000000100121B70);
  URL.init(fileURLWithPath:)(0xD000000000000081, 0x8000000100121BF0);
  URL.init(fileURLWithPath:)(0xD00000000000007FLL, 0x8000000100121C80);
  URL.init(fileURLWithPath:)(0xD00000000000007ELL, 0x8000000100121D00);
  URL.init(fileURLWithPath:)(0xD000000000000089, 0x8000000100121D80);
  URL.init(fileURLWithPath:)(0xD000000000000081, 0x8000000100121E10);
  URL.init(fileURLWithPath:)(0xD00000000000006CLL, 0x8000000100121EA0);
  URL.init(fileURLWithPath:)(0xD00000000000006CLL, 0x8000000100121F10);
  URL.init(fileURLWithPath:)(0xD000000000000068, 0x8000000100121F80);
  URL.init(fileURLWithPath:)(0xD00000000000006BLL, 0x8000000100121FF0);
  URL.init(fileURLWithPath:)(0xD00000000000006CLL, 0x8000000100122060);
  v6 = sub_100055B40(v5);
  swift_setDeallocating(v5);
  swift_arrayDestroy(v5 + v4, 37, v8);
  result = swift_deallocClassInstance(v5, 32, 7);
  qword_1001589F0 = (uint64_t)v6;
  return result;
}

uint64_t sub_10004AD18()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001167B0);
  v4 = v0;
  v2 = sub_100007828(&qword_100158B50, type metadata accessor for SettingsAppSearchViewModel, (uint64_t)&unk_1001166F4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + 80);
}

uint64_t sub_10004AD9C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001167B0);
  v7 = v3;
  v5 = sub_100007828(&qword_100158B50, type metadata accessor for SettingsAppSearchViewModel, (uint64_t)&unk_1001166F4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v5);
  result = swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3 + 80);
  return result;
}

uint64_t sub_10004AE28(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001167B0);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_100007828(&qword_100158B50, type metadata accessor for SettingsAppSearchViewModel, (uint64_t)&unk_1001166F4);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_100057104, v7, (char *)&type metadata for () + 8, v5);
  return swift_release(KeyPath);
}

uint64_t sub_10004AED0(char a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[7];
  _QWORD *v23;

  v2 = (_QWORD *)v1;
  if ((a1 & 1) == 0)
  {
    KeyPath = swift_getKeyPath(&unk_100116788);
    v23 = (_QWORD *)v1;
    v5 = sub_100007828(&qword_100158B50, type metadata accessor for SettingsAppSearchViewModel, (uint64_t)&unk_1001166F4);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v23, KeyPath, v5);
    swift_release(KeyPath);
    v23 = (_QWORD *)v1;
    v6 = swift_getKeyPath(&unk_100116788);
    ObservationRegistrar.willSet<A, B>(_:keyPath:)(&v23, v6, v5);
    swift_release(v6);
    v7 = swift_getKeyPath(&unk_100116738);
    v23 = (_QWORD *)v1;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v23, v7, v5);
    swift_release(v7);
    v8 = *(_BYTE *)(v1 + 81);
    v9 = swift_getKeyPath(&unk_100116760);
    v23 = (_QWORD *)v1;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v23, v9, v5);
    swift_release(v9);
    v10 = *(_QWORD *)(v1 + 128);
    v11 = v2[17];
    swift_bridgeObjectRetain(v11);
    sub_10004B2C0(v8, v10, v11, (uint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease(v11);
    v12 = v2[19];
    v2[19] = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(v12);
    v23 = v2;
    v13 = swift_getKeyPath(&unk_100116788);
    ObservationRegistrar.didSet<A, B>(_:keyPath:)(&v23, v13, v5);
    swift_release(v13);
    v14 = swift_getKeyPath(&unk_100116760);
    __chkstk_darwin(v14);
    v22[2] = v2;
    v22[3] = 0;
    v22[4] = 0xE000000000000000;
    v23 = v2;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v23, v14, sub_1000570F0, v22, (char *)&type metadata for () + 8, v5);
    swift_release(v14);
  }
  v15 = swift_getKeyPath(&unk_100116760);
  v23 = v2;
  v16 = sub_100007828(&qword_100158B50, type metadata accessor for SettingsAppSearchViewModel, (uint64_t)&unk_1001166F4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v23, v15, v16);
  swift_release(v15);
  v17 = v2[16];
  v18 = v2[17];
  v19 = swift_getKeyPath(&unk_100116788);
  v23 = v2;
  swift_bridgeObjectRetain(v18);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v23, v19, v16);
  swift_release(v19);
  v20 = v2[19];
  swift_bridgeObjectRetain(v20);
  sub_10004B2C0(a1 & 1, v17, v18, v20);
  swift_bridgeObjectRelease(v18);
  return swift_bridgeObjectRelease(v20);
}

uint64_t sub_10004B1A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v1 = v0;
  KeyPath = swift_getKeyPath(&unk_100116760);
  v6 = v0;
  v3 = sub_100007828(&qword_100158B50, type metadata accessor for SettingsAppSearchViewModel, (uint64_t)&unk_1001166F4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v3);
  swift_release(KeyPath);
  v4 = *(_QWORD *)(v0 + 128);
  swift_bridgeObjectRetain(*(_QWORD *)(v1 + 136));
  return v4;
}

uint64_t sub_10004B238()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100116788);
  v4 = v0;
  v2 = sub_100007828(&qword_100158B50, type metadata accessor for SettingsAppSearchViewModel, (uint64_t)&unk_1001166F4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 152));
}

uint64_t sub_10004B2C0(char a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t KeyPath;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[3];
  char v25;
  _QWORD v26[5];

  v5 = v4;
  v26[3] = &type metadata for DeviceOSExpertFeatureFlags;
  v26[4] = sub_1000560E4();
  LOBYTE(v26[0]) = 1;
  v10 = isFeatureEnabled(_:)(v26);
  sub_100005474(v26);
  if ((v10 & 1) == 0)
    goto LABEL_4;
  if (*(_QWORD *)(a4 + 16))
  {
    v11 = type metadata accessor for SearchResultSection(0);
    v12 = *(unsigned __int8 *)(*(_QWORD *)(v11 - 8) + 80);
    a4 = *(_QWORD *)(a4 + ((v12 + 32) & ~v12) + *(int *)(v11 + 20));
LABEL_4:
    if ((a1 & 1) != 0)
      v13 = 3;
    else
      v13 = 0;
    if ((a1 & 1) == 0 || *(_QWORD *)(a4 + 16))
      goto LABEL_25;
    goto LABEL_9;
  }
  if ((a1 & 1) == 0)
  {
    v13 = 0;
    goto LABEL_25;
  }
LABEL_9:
  KeyPath = swift_getKeyPath(&unk_100116760);
  v26[0] = v5;
  v15 = sub_100007828(&qword_100158B50, type metadata accessor for SettingsAppSearchViewModel, (uint64_t)&unk_1001166F4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v26, KeyPath, v15);
  swift_release(KeyPath);
  v16 = *(_QWORD *)(v5 + 136);
  v17 = *(_QWORD *)(v5 + 128) & 0xFFFFFFFFFFFFLL;
  if ((v16 & 0x2000000000000000) != 0)
    v17 = HIBYTE(v16) & 0xF;
  if (v17)
  {
    v18 = HIBYTE(a3) & 0xF;
    v19 = a2 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v18 = HIBYTE(a3) & 0xF;
    v19 = a2 & 0xFFFFFFFFFFFFLL;
    if ((a3 & 0x2000000000000000) != 0)
      v20 = HIBYTE(a3) & 0xF;
    else
      v20 = a2 & 0xFFFFFFFFFFFFLL;
    if (v20)
    {
      v13 = 1;
      goto LABEL_25;
    }
  }
  if ((a3 & 0x2000000000000000) == 0)
    v18 = v19;
  if (v18)
    v13 = 4;
  else
    v13 = 1;
LABEL_25:
  v21 = swift_getKeyPath(&unk_1001167B0);
  __chkstk_darwin(v21);
  v24[2] = v5;
  v25 = v13;
  v26[0] = v5;
  v22 = sub_100007828(&qword_100158B50, type metadata accessor for SettingsAppSearchViewModel, (uint64_t)&unk_1001166F4);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v26, v21, sub_100056AF0, v24, (char *)&type metadata for () + 8, v22);
  return swift_release(v21);
}

uint64_t sub_10004B4C4()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100116738);
  v4 = v0;
  v2 = sub_100007828(&qword_100158B50, type metadata accessor for SettingsAppSearchViewModel, (uint64_t)&unk_1001166F4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + 81);
}

uint64_t sub_10004B548@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100116738);
  v7 = v3;
  v5 = sub_100007828(&qword_100158B50, type metadata accessor for SettingsAppSearchViewModel, (uint64_t)&unk_1001166F4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v5);
  result = swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3 + 81);
  return result;
}

uint64_t sub_10004B5D4(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100116738);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_100007828(&qword_100158B50, type metadata accessor for SettingsAppSearchViewModel, (uint64_t)&unk_1001166F4);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_100056AA0, v7, (char *)&type metadata for () + 8, v5);
  return swift_release(KeyPath);
}

uint64_t sub_10004B67C(uint64_t a1, char a2)
{
  uint64_t result;

  result = sub_10004AED0(a2);
  *(_BYTE *)(a1 + 81) = a2;
  return result;
}

uint64_t sub_10004B6B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = v2;
  KeyPath = swift_getKeyPath(&unk_100116760);
  v19 = v2;
  v7 = sub_100007828(&qword_100158B50, type metadata accessor for SettingsAppSearchViewModel, (uint64_t)&unk_1001166F4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v19, KeyPath, v7);
  swift_release(KeyPath);
  result = *(_QWORD *)(v2 + 128);
  v9 = *(_QWORD *)(v2 + 136);
  if (result != a1 || v9 != a2)
  {
    result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v9, a1, a2, 0);
    if ((result & 1) == 0)
    {
      v10 = swift_getKeyPath(&unk_100116760);
      v19 = v2;
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v19, v10, v7);
      swift_release(v10);
      v11 = *(_QWORD *)(v2 + 128);
      v12 = *(_QWORD *)(v3 + 136);
      swift_bridgeObjectRetain(v12);
      sub_10004B8A0(v11, v12);
      swift_bridgeObjectRelease(v12);
      v13 = swift_getKeyPath(&unk_100116738);
      v19 = v3;
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v19, v13, v7);
      swift_release(v13);
      LOBYTE(v13) = *(_BYTE *)(v3 + 81);
      v14 = swift_getKeyPath(&unk_100116760);
      v19 = v3;
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v19, v14, v7);
      swift_release(v14);
      v15 = *(_QWORD *)(v3 + 128);
      v16 = *(_QWORD *)(v3 + 136);
      v17 = swift_getKeyPath(&unk_100116788);
      v19 = v3;
      swift_bridgeObjectRetain(v16);
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v19, v17, v7);
      swift_release(v17);
      v18 = *(_QWORD *)(v3 + 152);
      swift_bridgeObjectRetain(v18);
      sub_10004B2C0(v13, v15, v16, v18);
      swift_bridgeObjectRelease(v16);
      return swift_bridgeObjectRelease(v18);
    }
  }
  return result;
}

void sub_10004B8A0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  char v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  void *v30;
  uint64_t v31;
  char v32;
  id v33;
  uint64_t KeyPath;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  NSString v45;
  NSString v46;
  Class isa;
  id v48;
  id v49;
  Class v50;
  uint64_t v51;
  uint64_t v52;
  NSString *v53;
  NSString *v54;
  Class v55;
  uint64_t v56;
  void *v57;
  id v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  void *v71;
  uint64_t v72;
  id v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint8_t *v77;
  uint64_t v78;
  os_signpost_id_t v79;
  os_log_t v80;
  void (*v81)(char *, uint64_t);
  const char *v82;
  os_log_t v83;
  int v84;
  char *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  const char *v92;
  void **aBlock;
  uint64_t v94;
  void *v95;
  ValueMetadata *v96;
  unint64_t v97;
  uint64_t v98;

  v3 = v2;
  v6 = type metadata accessor for OSSignpostError(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OSSignpostID(0);
  v88 = *(_QWORD *)(v10 - 8);
  v89 = v10;
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v82 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v82 - v14;
  v96 = &type metadata for DeviceOSExpertFeatureFlags;
  v16 = sub_1000560E4();
  v97 = v16;
  LOBYTE(aBlock) = 1;
  v17 = isFeatureEnabled(_:)(&aBlock);
  sub_100005474(&aBlock);
  if ((v17 & 1) != 0)
    v18 = "SettingsAppSearchViewModel.SemanticSearch";
  else
    v18 = "SettingsAppSearchViewModel.TopHitSearch";
  v19 = 39;
  if ((v17 & 1) != 0)
    v19 = 41;
  v91 = v19;
  v92 = v18;
  v20 = *(void **)(v3 + 112);
  if (v20)
  {
    v90 = a1;
    v21 = v20;
    if ((objc_msgSend(v21, "isCancelled") & 1) != 0
      || (swift_beginAccess(v3 + 120, &aBlock, 33, 0),
          v22 = sub_100052F08((unint64_t)v21),
          swift_endAccess(&aBlock),
          !v22))
    {

    }
    else
    {
      v85 = v13;
      v86 = v16;
      v87 = v22;
      if (qword_100156CD8 != -1)
        swift_once(&qword_100156CD8, sub_10008BEEC);
      v23 = type metadata accessor for OSSignposter(0);
      v24 = sub_100007808(v23, (uint64_t)qword_10015D340);
      v25 = OSSignposter.logHandle.getter(v24);
      v26 = v87;
      v27 = OSSignpostIntervalState.signpostID.getter();
      v84 = static os_signpost_type_t.end.getter(v27);
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        v83 = v25;
        v28 = swift_retain(v26);
        checkForErrorAndConsumeState(state:)(v28);
        swift_release(v26);
        if ((*(unsigned int (**)(char *, uint64_t))(v7 + 88))(v9, v6) == enum case for OSSignpostError.doubleEnd(_:))
        {
          v29 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
          v29 = "Settings search cancelled";
        }
        v82 = v29;
        v74 = v85;
        v16 = v86;
        v76 = v88;
        v75 = v89;
        (*(void (**)(char *, char *, uint64_t))(v88 + 16))(v85, v15, v89);
        v77 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v77 = 0;
        v79 = OSSignpostID.rawValue.getter(v77, v78);
        v80 = v83;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v83, (os_signpost_type_t)v84, v79, v92, v82, v77, 2u);
        swift_slowDealloc(v77, -1, -1);

        v81 = *(void (**)(char *, uint64_t))(v76 + 8);
        v81(v15, v75);
        swift_release(v87);
        v81(v74, v75);
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v88 + 8))(v15, v89);
        swift_release(v26);
        v16 = v86;
      }
    }
    v30 = *(void **)(v3 + 112);
    a1 = v90;
    if (v30)
      objc_msgSend(v30, "cancel");
  }
  v31 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v31 = a1 & 0xFFFFFFFFFFFFLL;
  if (v31)
  {
    v96 = &type metadata for DeviceOSExpertFeatureFlags;
    v97 = v16;
    LOBYTE(aBlock) = 1;
    v32 = isFeatureEnabled(_:)(&aBlock);
    sub_100005474(&aBlock);
    if ((v32 & 1) != 0)
    {
      v33 = (id)dispatch thunk of LinkMetadataIndexer.searchQueryFor(_:)(a1, a2);
    }
    else
    {
      v44 = objc_allocWithZone((Class)CSTopHitSearchQuery);
      swift_bridgeObjectRetain(a2);
      v45 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(a2);
      v46 = String._bridgeToObjectiveC()();
      isa = Array._bridgeToObjectiveC()().super.isa;
      v48 = objc_msgSend(v44, "initWithSearchString:keyboardLanguage:attributes:hitCount:", v45, v46, isa, 500);

      v49 = v48;
      v50 = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v49, "setBundleIDs:", v50);

      v51 = sub_100004FC8(&qword_100158BB8);
      v52 = swift_allocObject(v51, 48, 7);
      *(_OWORD *)(v52 + 16) = xmmword_100115BA0;
      *(_QWORD *)(v52 + 32) = NSFileProtectionComplete;
      *(_QWORD *)(v52 + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      type metadata accessor for FileProtectionType(0);
      v33 = v49;
      v53 = NSFileProtectionComplete;
      v54 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v55 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v52);
      objc_msgSend(v33, "setProtectionClasses:", v55);

    }
    v56 = v91;
    v57 = *(void **)(v3 + 112);
    *(_QWORD *)(v3 + 112) = v33;
    v58 = v33;

    v59 = swift_allocObject(&unk_100149C58, 24, 7);
    *(_QWORD *)(v59 + 16) = _swiftEmptyArrayStorage;
    v97 = (unint64_t)sub_100056B3C;
    v98 = v59;
    aBlock = _NSConcreteStackBlock;
    v94 = 1107296256;
    v95 = sub_10004EE58;
    v96 = (ValueMetadata *)&unk_100149C70;
    v60 = _Block_copy(&aBlock);
    v61 = v98;
    swift_retain(v59);
    swift_release(v61);
    objc_msgSend(v58, "setFoundItemsHandler:", v60);
    _Block_release(v60);
    sub_100007C2C((_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 64));
    v62 = sub_1000F49BC();
    v64 = v63;
    v66 = v65;
    v67 = swift_allocObject(&unk_100149CA8, 24, 7);
    *(_QWORD *)(v67 + 16) = &_swiftEmptySetSingleton;
    v68 = swift_allocObject(&unk_100149AF8, 24, 7);
    swift_weakInit(v68 + 16, v3);
    v69 = swift_allocObject(&unk_100149CD0, 96, 7);
    *(_QWORD *)(v69 + 16) = v68;
    *(_QWORD *)(v69 + 24) = v58;
    v70 = v92;
    *(_QWORD *)(v69 + 32) = v92;
    *(_QWORD *)(v69 + 40) = v56;
    *(_BYTE *)(v69 + 48) = 2;
    *(_QWORD *)(v69 + 56) = v59;
    *(_QWORD *)(v69 + 64) = v62;
    *(_QWORD *)(v69 + 72) = v64;
    *(_QWORD *)(v69 + 80) = v66;
    *(_QWORD *)(v69 + 88) = v67;
    v97 = (unint64_t)sub_100056B98;
    v98 = v69;
    aBlock = _NSConcreteStackBlock;
    v94 = 1107296256;
    v95 = sub_100015D2C;
    v96 = (ValueMetadata *)&unk_100149CE8;
    v71 = _Block_copy(&aBlock);
    v72 = v98;
    v73 = v58;
    swift_retain(v59);
    swift_retain(v67);
    swift_release(v72);
    objc_msgSend(v73, "setCompletionHandler:", v71);
    _Block_release(v71);
    swift_release(v59);
    swift_release(v67);
    sub_10004E980(v70, v56, 2, v3, v73);

  }
  else
  {
    KeyPath = swift_getKeyPath(&unk_100116788);
    aBlock = (void **)v3;
    v35 = sub_100007828(&qword_100158B50, type metadata accessor for SettingsAppSearchViewModel, (uint64_t)&unk_1001166F4);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&aBlock, KeyPath, v35);
    swift_release(KeyPath);
    if (*(_QWORD *)(*(_QWORD *)(v3 + 152) + 16))
    {
      v36 = swift_getKeyPath(&unk_100116788);
      aBlock = (void **)v3;
      ObservationRegistrar.access<A, B>(_:keyPath:)(&aBlock, v36, v35);
      swift_release(v36);
      aBlock = (void **)v3;
      v37 = swift_getKeyPath(&unk_100116788);
      ObservationRegistrar.willSet<A, B>(_:keyPath:)(&aBlock, v37, v35);
      swift_release(v37);
      v38 = swift_getKeyPath(&unk_100116738);
      aBlock = (void **)v3;
      ObservationRegistrar.access<A, B>(_:keyPath:)(&aBlock, v38, v35);
      swift_release(v38);
      LOBYTE(v38) = *(_BYTE *)(v3 + 81);
      v39 = swift_getKeyPath(&unk_100116760);
      aBlock = (void **)v3;
      ObservationRegistrar.access<A, B>(_:keyPath:)(&aBlock, v39, v35);
      swift_release(v39);
      v40 = *(_QWORD *)(v3 + 128);
      v41 = *(_QWORD *)(v3 + 136);
      swift_bridgeObjectRetain(v41);
      sub_10004B2C0(v38, v40, v41, (uint64_t)_swiftEmptyArrayStorage);
      swift_bridgeObjectRelease(v41);
      v42 = *(_QWORD *)(v3 + 152);
      *(_QWORD *)(v3 + 152) = _swiftEmptyArrayStorage;
      swift_bridgeObjectRelease(v42);
      aBlock = (void **)v3;
      v43 = swift_getKeyPath(&unk_100116788);
      ObservationRegistrar.didSet<A, B>(_:keyPath:)(&aBlock, v43, v35);
      swift_release(v43);
    }
  }
}

uint64_t sub_10004C128@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100116760);
  v8 = v3;
  v5 = sub_100007828(&qword_100158B50, type metadata accessor for SettingsAppSearchViewModel, (uint64_t)&unk_1001166F4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(_QWORD *)(v3 + 136);
  *a2 = *(_QWORD *)(v3 + 128);
  a2[1] = v6;
  return swift_bridgeObjectRetain(v6);
}

uint64_t sub_10004C1B8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  _QWORD v8[7];
  uint64_t v9;

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  KeyPath = swift_getKeyPath(&unk_100116760);
  v8[2] = v4;
  v8[3] = v3;
  v8[4] = v2;
  v9 = v4;
  v6 = sub_100007828(&qword_100158B50, type metadata accessor for SettingsAppSearchViewModel, (uint64_t)&unk_1001166F4);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_1000570F0, v8, (char *)&type metadata for () + 8, v6);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_10004C274(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 128);
  v4 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 128) = a2;
  *(_QWORD *)(a1 + 136) = a3;
  swift_bridgeObjectRetain(a3);
  sub_10004B6B8(v3, v4);
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_10004C2C4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100116788);
  v8 = v3;
  v5 = sub_100007828(&qword_100158B50, type metadata accessor for SettingsAppSearchViewModel, (uint64_t)&unk_1001166F4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(_QWORD *)(v3 + 152);
  *a2 = v6;
  return swift_bridgeObjectRetain(v6);
}

uint64_t sub_10004C354(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100116788);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_100007828(&qword_100158B50, type metadata accessor for SettingsAppSearchViewModel, (uint64_t)&unk_1001166F4);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_100056B00, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_10004C40C(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  KeyPath = swift_getKeyPath(&unk_100116738);
  v11 = a1;
  v5 = sub_100007828(&qword_100158B50, type metadata accessor for SettingsAppSearchViewModel, (uint64_t)&unk_1001166F4);
  swift_bridgeObjectRetain(a2);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v11, KeyPath, v5);
  swift_release(KeyPath);
  LOBYTE(KeyPath) = *(_BYTE *)(a1 + 81);
  v6 = swift_getKeyPath(&unk_100116760);
  v11 = a1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v11, v6, v5);
  swift_release(v6);
  v7 = *(_QWORD *)(a1 + 128);
  v8 = *(_QWORD *)(a1 + 136);
  swift_bridgeObjectRetain(v8);
  sub_10004B2C0(KeyPath, v7, v8, a2);
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = a2;
  return swift_bridgeObjectRelease(v9);
}

uint64_t sub_10004C514()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v1 = sub_100004FC8(&qword_10015C5A0);
  result = __chkstk_darwin(v1);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v0 + 168) == 1)
  {
    v5 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
    v6 = swift_allocObject(&unk_100149AF8, 24, 7);
    swift_weakInit(v6 + 16, v0);
    v7 = (_QWORD *)swift_allocObject(&unk_100149B20, 40, 7);
    v7[2] = 0;
    v7[3] = 0;
    v7[4] = v6;
    v8 = sub_10004CF9C((uint64_t)v4, (uint64_t)&unk_100158B30, (uint64_t)v7);
    swift_release(v8);
    result = sub_10000BA50((uint64_t)v4, &qword_10015C5A0);
    *(_BYTE *)(v0 + 168) = 0;
  }
  return result;
}

uint64_t sub_10004C60C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 64) = a4;
  return swift_task_switch(sub_10004C624, 0, 0);
}

uint64_t sub_10004C624()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;

  v1 = *(_QWORD *)(v0 + 64) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  *(_QWORD *)(v0 + 72) = Strong;
  if (Strong)
  {
    v3 = (_QWORD *)swift_task_alloc(dword_100158B4C);
    *(_QWORD *)(v0 + 80) = v3;
    *v3 = v0;
    v3[1] = sub_10004C6F8;
    return sub_10004C7C8();
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 64) + 16;
    swift_beginAccess(v5, v0 + 40, 0, 0);
    v6 = swift_weakLoadStrong(v5);
    if (v6)
    {
      v7 = v6;
      v8 = *(id *)(v6 + 104);
      swift_release(v7);
      dispatch_resume(v8);

    }
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10004C6F8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 72);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 80));
  swift_release(v1);
  return swift_task_switch(sub_10004C754, 0, 0);
}

uint64_t sub_10004C754()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  NSObject *v4;

  v1 = *(_QWORD *)(v0 + 64) + 16;
  swift_beginAccess(v1, v0 + 40, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    v4 = *(id *)(Strong + 104);
    swift_release(v3);
    dispatch_resume(v4);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004C7C8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[42] = v0;
  v2 = type metadata accessor for URL(0);
  v1[43] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[44] = v3;
  v1[45] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10004C828, 0, 0);
}

id sub_10004C828()
{
  _QWORD *v0;
  void *v1;
  id result;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = (void *)objc_opt_self(PSCoreSpotlightIndexer);
  v0[46] = v1;
  result = objc_msgSend(v1, "sharedInstance");
  v0[47] = result;
  if (result)
  {
    v3 = result;
    v4 = v0 + 10;
    v0[15] = v0 + 55;
    v0[10] = v0;
    v0[11] = sub_10004C8EC;
    v5 = swift_continuation_init(v0 + 10, 0);
    v0[26] = _NSConcreteStackBlock;
    v6 = v0 + 26;
    v6[1] = 0x40000000;
    v6[2] = sub_10004E964;
    v6[3] = &unk_100149B60;
    v6[4] = v5;
    objc_msgSend(v3, "hasfirstPartyIndexItems:", v6);
    return (id)swift_continuation_await(v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10004C8EC()
{
  return swift_task_switch(sub_10004C938, 0, 0);
}

id sub_10004C938()
{
  uint64_t v0;
  void *v1;
  int v2;
  id result;
  void *v4;
  id v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  id v11;
  NSString v12;
  void *v13;

  v1 = *(void **)(v0 + 368);
  v2 = *(unsigned __int8 *)(v0 + 440);

  result = objc_msgSend(v1, "sharedInstance");
  if (result)
  {
    v4 = result;
    v5 = objc_msgSend(result, "needsIndex");

    *(_QWORD *)(v0 + 384) = type metadata accessor for LinkMetadataIndexer(0);
    v6 = ((uint64_t (*)(void))static LinkMetadataIndexer.shared.getter)();
    v7 = dispatch thunk of LinkMetadataIndexer.needsIndexing.getter();
    v8 = swift_release(v6);
    v9 = v2 ^ 1;
    if ((v5 & 1) != 0 || v9)
    {
      v10 = static LinkMetadataIndexer.shared.getter(v8);
      dispatch thunk of LinkMetadataIndexer.needsIndexing.setter(v5);
      swift_release(v10);
    }
    v11 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v12 = String._bridgeToObjectiveC()();
    *(_BYTE *)(v0 + 441) = objc_msgSend(v11, "BOOLForKey:", v12);

    if (((v9 | v5 | v7) & 1) == 0)
    {
      swift_task_dealloc(*(_QWORD *)(v0 + 360));
      return (id)(*(uint64_t (**)(void))(v0 + 8))();
    }
    result = objc_msgSend(*(id *)(v0 + 368), "sharedInstance");
    *(_QWORD *)(v0 + 392) = result;
    if (result)
    {
      v13 = result;
      *(_QWORD *)(v0 + 144) = v0;
      *(_QWORD *)(v0 + 152) = sub_10004CB34;
      *(_QWORD *)(v0 + 320) = swift_continuation_init(v0 + 144, 0);
      *(_QWORD *)(v0 + 288) = _NSConcreteStackBlock;
      *(_QWORD *)(v0 + 296) = 0x40000000;
      *(_QWORD *)(v0 + 304) = sub_10004E978;
      *(_QWORD *)(v0 + 312) = &unk_100149B78;
      objc_msgSend(v13, "deleteIndexWithCompletionBlock:", v0 + 288);
      return (id)swift_continuation_await(v0 + 144);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10004CB34()
{
  return swift_task_switch(sub_10004CB80, 0, 0);
}

id sub_10004CB80()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id result;
  void *v17;
  NSArray v18;
  NSSet v19;
  uint64_t v20;
  Class isa;
  uint64_t v22;
  _QWORD *v23;

  v1 = *(_BYTE *)(v0 + 441);
  v2 = *(_QWORD *)(v0 + 336);

  KeyPath = swift_getKeyPath(&unk_100116710);
  *(_QWORD *)(v0 + 328) = v2;
  v4 = sub_100007828(&qword_100158B50, type metadata accessor for SettingsAppSearchViewModel, (uint64_t)&unk_1001166F4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 328, KeyPath, v4);
  swift_release(KeyPath);
  v5 = *(_QWORD *)(v2 + 16);
  if ((v1 & 1) != 0)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v2 + 16));
  }
  else
  {
    v6 = qword_100156C40;
    swift_bridgeObjectRetain(*(_QWORD *)(v2 + 16));
    if (v6 != -1)
      swift_once(&qword_100156C40, sub_10004A4BC);
    v8 = *(_QWORD *)(v0 + 352);
    v7 = *(_QWORD *)(v0 + 360);
    v9 = *(_QWORD *)(v0 + 344);
    v10 = sub_100007808(v9, (uint64_t)qword_1001589D0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v10, v9);
    if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
      v5 = sub_100052734(0, *(_QWORD *)(v5 + 16) + 1, 1, v5, &qword_100158B58, (uint64_t (*)(_QWORD))&type metadata accessor for URL);
    v12 = *(_QWORD *)(v5 + 16);
    v11 = *(_QWORD *)(v5 + 24);
    if (v12 >= v11 >> 1)
      v5 = sub_100052734(v11 > 1, v12 + 1, 1, v5, &qword_100158B58, (uint64_t (*)(_QWORD))&type metadata accessor for URL);
    v14 = *(_QWORD *)(v0 + 352);
    v13 = *(_QWORD *)(v0 + 360);
    v15 = *(_QWORD *)(v0 + 344);
    *(_QWORD *)(v5 + 16) = v12 + 1;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v14 + 32))(v5+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(_QWORD *)(v14 + 72) * v12, v13, v15);
  }
  *(_QWORD *)(v0 + 400) = v5;
  result = objc_msgSend(*(id *)(v0 + 368), "sharedInstance");
  *(_QWORD *)(v0 + 408) = result;
  if (result)
  {
    v17 = result;
    swift_bridgeObjectRetain(v5);
    v18.super.isa = Array._bridgeToObjectiveC()().super.isa;
    *(NSArray *)(v0 + 416) = v18;
    swift_bridgeObjectRelease(v5);
    if (qword_100156C48 != -1)
      swift_once(&qword_100156C48, sub_10004A564);
    sub_100007828((unint64_t *)&unk_10015BAD0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v19.super.isa = Set._bridgeToObjectiveC()().super.isa;
    *(NSSet *)(v0 + 424) = v19;
    if (qword_100156C50 != -1)
      swift_once(&qword_100156C50, sub_10004A768);
    v20 = v0 + 16;
    isa = Set._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)(v0 + 432) = isa;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_10004CEA4;
    v22 = swift_continuation_init(v0 + 16, 0);
    *(_QWORD *)(v0 + 248) = _NSConcreteStackBlock;
    v23 = (_QWORD *)(v0 + 248);
    v23[1] = 0x40000000;
    v23[2] = sub_10004E978;
    v23[3] = &unk_100149B90;
    v23[4] = v22;
    objc_msgSend(v17, "indexManifestBundlesAtURLs:skippingBundles:skippingManifests:withCompletion:", v18.super.isa, v19.super.isa, isa, v23);
    return (id)swift_continuation_await(v20);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10004CEA4()
{
  return swift_task_switch(sub_10004CEF0, 0, 0);
}

id sub_10004CEF0()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  id result;
  void *v6;
  uint64_t v7;

  v2 = *(void **)(v0 + 424);
  v1 = *(void **)(v0 + 432);
  v3 = *(void **)(v0 + 416);
  v4 = *(void **)(v0 + 368);

  result = objc_msgSend(v4, "sharedInstance");
  if (result)
  {
    v6 = result;
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 400));
    objc_msgSend(v6, "setHasIndexed");

    v7 = static LinkMetadataIndexer.shared.getter();
    dispatch thunk of LinkMetadataIndexer.donateToSpotlight()();
    swift_release(v7);
    swift_task_dealloc(*(_QWORD *)(v0 + 360));
    return (id)(*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10004CF9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD v22[4];

  v6 = sub_100004FC8(&qword_10015C5A0);
  __chkstk_darwin(v6);
  v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004D840(a1, (uint64_t)v8);
  v9 = type metadata accessor for TaskPriority(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_10000BA50((uint64_t)v8, &qword_10015C5A0);
    v11 = 4096;
    v12 = *(_QWORD *)(a3 + 16);
    if (v12)
    {
LABEL_3:
      v13 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v12);
      swift_unknownObjectRetain(v12);
      v15 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v13);
      v17 = v16;
      swift_unknownObjectRelease(v12);
      goto LABEL_6;
    }
  }
  else
  {
    v18 = TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    v11 = v18 | 0x1000;
    v12 = *(_QWORD *)(a3 + 16);
    if (v12)
      goto LABEL_3;
  }
  v15 = 0;
  v17 = 0;
LABEL_6:
  v19 = swift_allocObject(&unk_100149B48, 32, 7);
  *(_QWORD *)(v19 + 16) = a2;
  *(_QWORD *)(v19 + 24) = a3;
  if (v17 | v15)
  {
    v22[0] = 0;
    v22[1] = 0;
    v20 = v22;
    v22[2] = v15;
    v22[3] = v17;
  }
  else
  {
    v20 = 0;
  }
  return swift_task_create(v11, v20, (char *)&type metadata for () + 8, &unk_100158B40, v19);
}

uint64_t sub_10004D12C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v4 = result;
    sub_10004C514();
    return swift_release(v4);
  }
  return result;
}

_QWORD *sub_10004D180()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[24];
  _QWORD v32[5];

  v1 = v0;
  swift_beginAccess(v0 + 160, v31, 1, 0);
  v2 = *(_QWORD *)(v0 + 160);
  if ((v2 & 0xC000000000000001) != 0)
  {
    if (v2 < 0)
      v3 = *(_QWORD *)(v0 + 160);
    else
      v3 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v4 = __CocoaSet.makeIterator()(v3);
    v5 = type metadata accessor for AnyCancellable(0);
    v6 = sub_100007828((unint64_t *)&qword_100156FB8, (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable, (uint64_t)&protocol conformance descriptor for AnyCancellable);
    result = Set.Iterator.init(_cocoa:)(v32, v4, v5, v6);
    v2 = v32[0];
    v28 = v32[1];
    v8 = v32[2];
    v9 = v32[3];
    v10 = v32[4];
  }
  else
  {
    v11 = -1 << *(_BYTE *)(v2 + 32);
    v28 = v2 + 56;
    v8 = ~v11;
    v12 = -v11;
    if (v12 < 64)
      v13 = ~(-1 << v12);
    else
      v13 = -1;
    v10 = v13 & *(_QWORD *)(v2 + 56);
    result = (_QWORD *)swift_bridgeObjectRetain(v2);
    v9 = 0;
  }
  v14 = (unint64_t)(v8 + 64) >> 6;
  if (v2 < 0)
    goto LABEL_13;
  while (1)
  {
    if (v10)
    {
      v15 = (v10 - 1) & v10;
      v16 = __clz(__rbit64(v10)) | (v9 << 6);
      v17 = v9;
      goto LABEL_30;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
      break;
    if (v22 >= v14)
      goto LABEL_33;
    v23 = *(_QWORD *)(v28 + 8 * v22);
    v17 = v9 + 1;
    if (!v23)
    {
      v17 = v9 + 2;
      if (v9 + 2 >= v14)
        goto LABEL_33;
      v23 = *(_QWORD *)(v28 + 8 * v17);
      if (!v23)
      {
        v17 = v9 + 3;
        if (v9 + 3 >= v14)
          goto LABEL_33;
        v23 = *(_QWORD *)(v28 + 8 * v17);
        if (!v23)
        {
          v17 = v9 + 4;
          if (v9 + 4 >= v14)
            goto LABEL_33;
          v23 = *(_QWORD *)(v28 + 8 * v17);
          if (!v23)
          {
            v24 = v9 + 5;
            while (v14 != v24)
            {
              v23 = *(_QWORD *)(v28 + 8 * v24++);
              if (v23)
              {
                v17 = v24 - 1;
                goto LABEL_29;
              }
            }
LABEL_33:
            sub_100007C50(v2);
            v25 = *(_QWORD *)(v1 + 160);
            *(_QWORD *)(v1 + 160) = &_swiftEmptySetSingleton;
            swift_bridgeObjectRelease(v25);
            swift_bridgeObjectRelease(*(_QWORD *)(v1 + 16));
            swift_release(*(_QWORD *)(v1 + 32));
            sub_100005474((_QWORD *)(v1 + 40));
            swift_bridgeObjectRelease(*(_QWORD *)(v1 + 96));

            swift_bridgeObjectRelease(*(_QWORD *)(v1 + 120));
            swift_bridgeObjectRelease(*(_QWORD *)(v1 + 136));
            swift_release(*(_QWORD *)(v1 + 144));
            swift_bridgeObjectRelease(*(_QWORD *)(v1 + 152));
            swift_bridgeObjectRelease(*(_QWORD *)(v1 + 160));
            v26 = v1 + OBJC_IVAR____TtC11SettingsApp26SettingsAppSearchViewModel___observationRegistrar;
            v27 = type metadata accessor for ObservationRegistrar(0);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(v26, v27);
            return (_QWORD *)v1;
          }
        }
      }
    }
LABEL_29:
    v15 = (v23 - 1) & v23;
    v16 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_30:
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v16);
    swift_retain(v21);
    if (!v21)
      goto LABEL_33;
    while (1)
    {
      AnyCancellable.cancel()();
      result = (_QWORD *)swift_release(v21);
      v9 = v17;
      v10 = v15;
      if ((v2 & 0x8000000000000000) == 0)
        break;
LABEL_13:
      v18 = __CocoaSet.Iterator.next()(result);
      if (v18)
      {
        v19 = v18;
        v29 = v18;
        v20 = type metadata accessor for AnyCancellable(0);
        swift_unknownObjectRetain(v19);
        swift_dynamicCast(&v30, &v29, (char *)&type metadata for Swift.AnyObject + 8, v20, 7);
        v21 = v30;
        swift_unknownObjectRelease(v19);
        v17 = v9;
        v15 = v10;
        if (v21)
          continue;
      }
      goto LABEL_33;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10004D4AC()
{
  uint64_t v0;

  sub_10004D180();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10004D4D0()
{
  return type metadata accessor for SettingsAppSearchViewModel(0);
}

uint64_t type metadata accessor for SettingsAppSearchViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_100158A28;
  if (!qword_100158A28)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SettingsAppSearchViewModel);
  return result;
}

uint64_t sub_10004D514(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[15];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = (char *)&value witness table for () + 64;
  v4[2] = "(";
  v4[3] = &unk_100116608;
  v4[4] = &unk_100116620;
  v4[5] = &unk_100116638;
  v4[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[7] = &unk_100116650;
  v4[8] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[9] = &unk_100116668;
  v4[10] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[11] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[12] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[13] = (char *)&value witness table for Builtin.Int8 + 64;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[14] = *(_QWORD *)(result - 8) + 64;
    return swift_updateClassMetadata2(a1, 256, 15, v4, a1 + 80);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SettingsAppSearchViewModel.SearchState(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SettingsAppSearchViewModel.SearchState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10004D6E0 + 4 * byte_100116545[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10004D714 + 4 * byte_100116540[v4]))();
}

uint64_t sub_10004D714(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004D71C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10004D724);
  return result;
}

uint64_t sub_10004D730(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10004D738);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_10004D73C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004D744(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SettingsAppSearchViewModel.SearchState()
{
  return &type metadata for SettingsAppSearchViewModel.SearchState;
}

unint64_t sub_10004D764()
{
  unint64_t result;

  result = qword_100158B20;
  if (!qword_100158B20)
  {
    result = swift_getWitnessTable(&unk_10011668C, &type metadata for SettingsAppSearchViewModel.SearchState);
    atomic_store(result, &qword_100158B20);
  }
  return result;
}

uint64_t sub_10004D7A8()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10004D7CC()
{
  return sub_10005699C((void (*)(_QWORD))&_swift_unknownObjectRelease, (void (*)(_QWORD))&_swift_release);
}

uint64_t sub_10004D7E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_100158B2C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1000570A0;
  v3[8] = v2;
  return swift_task_switch(sub_10004C624, 0, 0);
}

uint64_t sub_10004D840(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004FC8(&qword_10015C5A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004D888(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD aBlock[4];

  v2 = v1;
  v4 = (int *)type metadata accessor for SearchResult(0);
  v57 = *((_QWORD *)v4 - 1);
  __chkstk_darwin(v4);
  v52 = v5;
  v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004FC8(&qword_10015C5A0);
  __chkstk_darwin(v7);
  v53 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  __chkstk_darwin(v9);
  v47 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_100116788);
  v12 = v1 + OBJC_IVAR____TtC11SettingsApp26SettingsAppSearchViewModel___observationRegistrar;
  aBlock[0] = v2;
  v49 = sub_100007828(&qword_100158B50, type metadata accessor for SettingsAppSearchViewModel, (uint64_t)&unk_1001166F4);
  v50 = v12;
  ObservationRegistrar.access<A, B>(_:keyPath:)(aBlock, KeyPath, v49);
  swift_release(KeyPath);
  v54 = v2;
  v13 = *(_QWORD *)(v2 + 152);
  v60 = *(_QWORD *)(v13 + 16);
  if (v60)
  {
    v51 = v6;
    v61 = type metadata accessor for SearchResultSection(0);
    v14 = *(_QWORD *)(v61 - 8);
    v46 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    v58 = v13 + v46;
    v59 = *(_QWORD *)(v14 + 72);
    v48 = v13;
    swift_bridgeObjectRetain(v13);
    v15 = 0;
    while (1)
    {
      v16 = *(_QWORD *)(v58 + v59 * v15 + *(int *)(v61 + 20));
      v17 = *(_QWORD *)(v16 + 16);
      if (v17)
        break;
LABEL_4:
      if (++v15 == v60)
      {
        swift_bridgeObjectRelease(v48);
        v6 = v51;
        goto LABEL_26;
      }
    }
    v56 = v59 * v15;
    v62 = v15;
    v18 = v57;
    v19 = (*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80);
    swift_bridgeObjectRetain_n(v16, 2);
    v20 = *(_QWORD *)(v18 + 72);
    v55 = v19;
    while (1)
    {
      sub_1000A103C(v16 + v19, a1);
      if ((v21 & 1) == 0 || (static URL.== infix(_:_:)(v16 + v19 + v4[5], a1 + v4[5]) & 1) == 0)
        goto LABEL_8;
      v22 = v4[6];
      v23 = v16 + v19;
      v24 = (_QWORD *)(v16 + v19 + v22);
      v25 = v24[1];
      v26 = *(_QWORD *)(a1 + v22);
      v27 = *(_QWORD *)(a1 + v22 + 8);
      v28 = *v24 == v26 && v25 == v27;
      if (!v28 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v24, v25, v26, v27, 0) & 1) == 0)
        goto LABEL_8;
      v29 = v4[7];
      v30 = (_QWORD *)(v23 + v29);
      v31 = *(_QWORD *)(v23 + v29 + 8);
      v32 = (_QWORD *)(a1 + v29);
      v33 = *(_QWORD *)(a1 + v29 + 8);
      if (v31)
        break;
      if (!v33)
        goto LABEL_23;
LABEL_8:
      v19 += v20;
      if (!--v17)
      {
        swift_bridgeObjectRelease_n(v16, 2);
        v15 = v62;
        goto LABEL_4;
      }
    }
    if (!v33)
      goto LABEL_8;
    v34 = *v30 == *v32 && v31 == v33;
    if (!v34 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v30, v31, *v32, v33, 0) & 1) == 0)
      goto LABEL_8;
LABEL_23:
    if (*(_QWORD *)(v16 + v4[8] + v19) == *(_QWORD *)(a1 + v4[8]))
      __asm { BR              X10 }
    goto LABEL_8;
  }
LABEL_26:
  v35 = type metadata accessor for TaskPriority(0);
  v36 = (uint64_t)v53;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v53, 1, 1, v35);
  v37 = swift_allocObject(&unk_100149AF8, 24, 7);
  swift_weakInit(v37 + 16, v54);
  sub_1000076F0(a1, (uint64_t)v6, type metadata accessor for SearchResult);
  type metadata accessor for MainActor(0);
  v38 = swift_retain(v37);
  v39 = static MainActor.shared.getter(v38);
  v40 = *(unsigned __int8 *)(v57 + 80);
  v41 = (v40 + 40) & ~v40;
  v42 = (_QWORD *)swift_allocObject(&unk_100149DC0, v41 + v52, v40 | 7);
  v42[2] = v39;
  v42[3] = &protocol witness table for MainActor;
  v42[4] = v37;
  sub_100007670((uint64_t)v6, (uint64_t)v42 + v41, type metadata accessor for SearchResult);
  swift_release(v37);
  v43 = sub_1000F1E18(v36, (uint64_t)&unk_100158C08, (uint64_t)v42);
  return swift_release(v43);
}

Class sub_10004E7D4(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSDictionary v5;

  v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v4 = v1(v3);
  swift_release(v2);
  if (v4)
  {
    sub_100007BBC(0, (unint64_t *)&qword_1001571E8, NSObject_ptr);
    v5.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v4);
  }
  else
  {
    v5.super.isa = 0;
  }
  return v5.super.isa;
}

uint64_t sub_10004E858(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[5] = a4;
  v5[6] = a5;
  v6 = type metadata accessor for MainActor(0);
  v5[7] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  return swift_task_switch(sub_10004E8C4, v7, v8);
}

uint64_t sub_10004E8C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 56));
  v1 += 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    v4 = *(_QWORD *)(v0 + 48);
    v6 = *(void (**)(uint64_t))(Strong + 24);
    v5 = *(_QWORD *)(Strong + 32);
    v7 = v4 + *(int *)(type metadata accessor for SearchResult(0) + 20);
    swift_retain(v5);
    v6(v7);
    swift_release(v5);
    swift_release(v3);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004E964(uint64_t a1, char a2)
{
  **(_BYTE **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) + 40) = a2;
  return swift_continuation_resume();
}

uint64_t sub_10004E978(uint64_t a1)
{
  return swift_continuation_resume(*(_QWORD *)(a1 + 32));
}

uint64_t sub_10004E980(const char *a1, uint64_t a2, char a3, uint64_t a4, void *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_signpost_type_t v20;
  uint64_t result;
  void (*v22)(char *, char *, uint64_t);
  uint8_t *v23;
  uint64_t v24;
  os_signpost_id_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  _BYTE v32[24];
  char v33;

  v30 = a4;
  v8 = type metadata accessor for OSSignpostID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v30 - v13;
  if (qword_100156CD8 != -1)
    swift_once(&qword_100156CD8, sub_10008BEEC);
  v15 = type metadata accessor for OSSignposter(0);
  v16 = sub_100007808(v15, (uint64_t)qword_10015D340);
  v17 = OSSignposter.logHandle.getter(v16);
  v18 = OSSignpostID.init(log:)(v17);
  v19 = OSSignposter.logHandle.getter(v18);
  v20 = static os_signpost_type_t.begin.getter();
  result = OS_os_log.signpostsEnabled.getter();
  v31 = a5;
  if ((result & 1) == 0)
    goto LABEL_7;
  if ((a3 & 1) == 0)
  {
    if (!a1)
    {
      __break(1u);
LABEL_7:

      (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
LABEL_13:
      v26 = type metadata accessor for OSSignpostIntervalState(0);
      swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
      v27 = OSSignpostIntervalState.init(id:isOpen:)(v12, 1);
      swift_beginAccess(v30 + 120, v32, 33, 0);
      v28 = v31;
      v29 = swift_retain(v27);
      sub_100053054(v29, v28);
      swift_endAccess(v32);

      objc_msgSend(v28, "start");
      swift_release(v27);
      return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    }
LABEL_12:
    v22 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
    v22(v12, v14, v8);
    v23 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v23 = 0;
    v25 = OSSignpostID.rawValue.getter(v23, v24);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, v20, v25, a1, "Settings search begin", v23, 2u);
    swift_slowDealloc(v23, -1, -1);

    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    v22(v12, v14, v8);
    goto LABEL_13;
  }
  if ((unint64_t)a1 >> 32)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (a1 >> 11 != 27)
  {
    if (a1 >> 16 <= 0x10)
    {
      a1 = &v33;
      goto LABEL_12;
    }
    goto LABEL_15;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_10004EBFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_signpost_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  os_signpost_id_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = type metadata accessor for OSSignpostID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v25 - v9;
  if (qword_100156CD8 != -1)
    swift_once(&qword_100156CD8, sub_10008BEEC);
  v11 = type metadata accessor for OSSignposter(0);
  sub_100007808(v11, (uint64_t)qword_10015D340);
  v12 = swift_bridgeObjectRetain_n(a1, 2);
  v13 = static OSSignpostID.exclusive.getter(v12);
  v14 = OSSignposter.logHandle.getter(v13);
  v15 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v10, v4);
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v16 = 134217984;
    if ((unint64_t)a1 >> 62)
    {
      if (a1 < 0)
        v24 = a1;
      else
        v24 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v17 = _CocoaArrayWrapper.endIndex.getter(v24);
      swift_bridgeObjectRelease(a1);
    }
    else
    {
      v17 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease(a1);
    v26 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v16 + 4, v16 + 12);
    v18 = swift_bridgeObjectRelease(a1);
    v20 = OSSignpostID.rawValue.getter(v18, v19);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, v15, v20, "SettingsAppSearchViewModel.SearchFoundItems", "Settings search found %ld", v16, 0xCu);
    swift_slowDealloc(v16, -1, -1);

    v21 = *(void (**)(char *, uint64_t))(v5 + 8);
    v21(v10, v4);
    v21(v8, v4);
  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  }
  swift_beginAccess(a2 + 16, &v26, 33, 0);
  v22 = swift_bridgeObjectRetain(a1);
  sub_1000F20CC(v22);
  return swift_endAccess(&v26);
}

uint64_t sub_10004EE58(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v5 = sub_100007BBC(0, &qword_100158BD8, CSSearchableItem_ptr);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v5);
  swift_retain(v3);
  v4(v6);
  swift_release(v3);
  return swift_bridgeObjectRelease(v6);
}

void sub_10004EEC4(unint64_t a1, uint64_t a2, void *a3, const char *a4, uint64_t a5, int a6, _QWORD *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t Strong;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  _BYTE *v56;
  uint8_t *v57;
  uint64_t v58;
  os_signpost_id_t v59;
  void (*v60)(_BYTE *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint8_t *v71;
  void **v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  char v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _BYTE *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  _BYTE *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  _BYTE *v97;
  uint64_t v98;
  uint64_t v99;
  const char *v100;
  void **v101;
  uint64_t (*v102)(uint64_t);
  _BYTE *v103;
  _BYTE *v104;
  uint64_t (*v105)(uint64_t);
  uint64_t isUniquelyReferenced_nonNull_native;
  char v107;
  void *v108;
  _BOOL8 v109;
  uint64_t v110;
  char v111;
  unint64_t v112;
  char v113;
  char *v114;
  BOOL v115;
  void *v116;
  _QWORD *v117;
  unint64_t v118;
  char v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  const char *v123;
  void *v124;
  _BYTE *v125;
  uint64_t v126;
  _BYTE *v127;
  char *v128;
  char v129;
  unint64_t v130;
  _BYTE *v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _BYTE *v135;
  uint64_t v136;
  _BYTE *v137;
  uint64_t v138;
  _BYTE *v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  _BYTE *v143;
  uint64_t v144;
  _BYTE *v145;
  void **v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  void **v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  _BYTE *v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  _BYTE *v166;
  uint64_t v167;
  uint64_t v168;
  _BYTE v169[12];
  int v170;
  uint64_t v171;
  _BYTE *v172;
  uint64_t v173;
  _BYTE *v174;
  uint64_t v175;
  _BYTE *v176;
  uint64_t v177;
  _BYTE *v178;
  uint64_t v179;
  _BYTE *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  id v188;
  _BYTE *v189;
  _BYTE *v190;
  _BYTE *v191;
  _BYTE *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  _BYTE *v196;
  uint64_t v197;
  _BYTE *v198;
  unint64_t v199;
  _BYTE *v200;
  char v201[12];
  char v202[8];
  uint64_t v203;
  uint64_t v204;
  char v205[8];
  _QWORD *v206;
  void **aBlock;
  uint64_t v208;
  uint64_t (*v209)(uint64_t);
  ValueMetadata *v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char v215[8];
  char v216[8];
  char v217;

  v186 = a8;
  v184 = a7;
  LODWORD(v177) = a6;
  v187 = (unint64_t)a4;
  v188 = a3;
  v199 = a1;
  v193 = sub_100004FC8(&qword_100158BC8);
  v12 = __chkstk_darwin(v193);
  v192 = &v169[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = __chkstk_darwin(v12);
  v191 = &v169[-v15];
  v16 = __chkstk_darwin(v14);
  v190 = &v169[-v17];
  __chkstk_darwin(v16);
  v189 = &v169[-v18];
  v175 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v197 = *(_QWORD *)(v175 - 8);
  __chkstk_darwin(v175);
  v20 = &v169[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v21 = type metadata accessor for SearchResult(0);
  v171 = *(_QWORD *)(v21 - 8);
  v22 = __chkstk_darwin(v21);
  v198 = &v169[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v22);
  v196 = &v169[-v24];
  v183 = type metadata accessor for DispatchWorkItemFlags(0);
  v181 = *(_QWORD *)(v183 - 8);
  __chkstk_darwin(v183);
  v180 = &v169[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v182 = type metadata accessor for DispatchQoS(0);
  v179 = *(_QWORD *)(v182 - 8);
  __chkstk_darwin(v182);
  v178 = &v169[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v194 = type metadata accessor for SearchResultSection(0);
  v195 = *(_QWORD *)(v194 - 8);
  v27 = __chkstk_darwin(v194);
  v200 = &v169[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v29 = __chkstk_darwin(v27);
  v172 = &v169[-v30];
  v173 = v31;
  __chkstk_darwin(v29);
  v174 = &v169[-v32];
  v33 = type metadata accessor for OSSignpostError(0);
  v34 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v36 = &v169[-((v35 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v37 = type metadata accessor for OSSignpostID(0);
  v38 = *(_QWORD *)(v37 - 8);
  v39 = __chkstk_darwin(v37);
  v176 = &v169[-((v40 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v39);
  v42 = &v169[-v41];
  a2 += 16;
  swift_beginAccess(a2, v216, 0, 0);
  v185 = a2;
  Strong = swift_weakLoadStrong(a2);
  if (!Strong)
    goto LABEL_22;
  v44 = Strong;
  swift_beginAccess(Strong + 120, &aBlock, 32, 0);
  v45 = *(_QWORD *)(v44 + 120);
  v46 = v188;
  v47 = sub_10004A114(v46, v45);
  swift_endAccess(&aBlock);
  swift_release(v44);
  v188 = v46;

  if (!v47)
    goto LABEL_22;
  v48 = v38;
  if (qword_100156CD8 != -1)
    swift_once(&qword_100156CD8, sub_10008BEEC);
  v49 = type metadata accessor for OSSignposter(0);
  v50 = sub_100007808(v49, (uint64_t)qword_10015D340);
  v51 = OSSignposter.logHandle.getter(v50);
  v52 = OSSignpostIntervalState.signpostID.getter();
  v170 = static os_signpost_type_t.end.getter(v52);
  v53 = (uint64_t)v51;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    goto LABEL_9;
  if ((v177 & 1) != 0)
  {
    if (HIDWORD(v187))
    {
      __break(1u);
    }
    else
    {
      if (v187 >> 11 == 27)
      {
LABEL_86:
        __break(1u);
LABEL_87:
        swift_release(v53);
        __break(1u);
LABEL_88:
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v175);
        __break(1u);
        goto LABEL_89;
      }
      if (WORD1(v187) <= 0x10u)
      {
        v187 = (unint64_t)&v217;
        goto LABEL_14;
      }
    }
    __break(1u);
    goto LABEL_86;
  }
  if (v187)
  {
LABEL_14:
    v54 = swift_retain(v47);
    checkForErrorAndConsumeState(state:)(v54);
    v177 = v47;
    swift_release(v47);
    if ((*(unsigned int (**)(_BYTE *, uint64_t))(v34 + 88))(v36, v33) == enum case for OSSignpostError.doubleEnd(_:))
    {
      v55 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(_BYTE *, uint64_t))(v34 + 8))(v36, v33);
      v55 = "Settings search completion";
    }
    v56 = v176;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v48 + 16))(v176, v42, v37);
    v57 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v57 = 0;
    v59 = OSSignpostID.rawValue.getter(v57, v58);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v51, (os_signpost_type_t)v170, v59, (const char *)v187, v55, v57, 2u);
    swift_slowDealloc(v57, -1, -1);

    v60 = *(void (**)(_BYTE *, uint64_t))(v48 + 8);
    v60(v42, v37);
    v60(v56, v37);
    v47 = v177;
    goto LABEL_18;
  }
  __break(1u);
LABEL_9:

  (*(void (**)(_BYTE *, uint64_t))(v48 + 8))(v42, v37);
LABEL_18:
  v61 = v185;
  swift_beginAccess(v185, v201, 0, 0);
  v62 = swift_weakLoadStrong(v61);
  if (v62)
  {
    v63 = v62;
    swift_beginAccess(v62 + 120, &aBlock, 33, 0);
    v64 = sub_100052F08((unint64_t)v188);
    swift_endAccess(&aBlock);
    swift_release(v63);
    swift_release(v47);
    v65 = v64;
  }
  else
  {
    v65 = v47;
  }
  swift_release(v65);
LABEL_22:
  v66 = v199;
  if (v199)
  {
    swift_errorRetain(v199);
    if (qword_100156CA8 == -1)
      goto LABEL_24;
    goto LABEL_83;
  }
  v76 = v184 + 2;
  swift_beginAccess(v184 + 2, &v214, 0, 0);
  v77 = *v76;
  v78 = v186;
  swift_bridgeObjectRetain(v186);
  swift_bridgeObjectRetain(a9);
  swift_bridgeObjectRetain(a10);
  v79 = swift_bridgeObjectRetain(v77);
  v80 = sub_100056330(v79, v78, a9, a10, (uint64_t *)(a11 + 16));
  swift_bridgeObjectRelease(v77);
  swift_bridgeObjectRelease(a10);
  swift_bridgeObjectRelease(a9);
  swift_bridgeObjectRelease(v78);
  v210 = &type metadata for DeviceOSExpertFeatureFlags;
  v211 = sub_1000560E4();
  LOBYTE(aBlock) = 1;
  v81 = isFeatureEnabled(_:)(&aBlock);
  sub_100005474(&aBlock);
  if ((v81 & 1) != 0)
  {
    v82 = (uint64_t)v174;
    swift_storeEnumTagMultiPayload(v174, v175, 8);
    *(_QWORD *)(v82 + *(int *)(v194 + 20)) = v80;
    sub_100007BBC(0, (unint64_t *)&qword_100159D30, OS_dispatch_queue_ptr);
    v83 = (void *)static OS_dispatch_queue.main.getter();
    v84 = swift_allocObject(&unk_100149AF8, 24, 7);
    v85 = v185;
    swift_beginAccess(v185, &v213, 0, 0);
    v86 = swift_weakLoadStrong(v85);
    swift_weakInit(v84 + 16, v86);
    swift_release(v86);
    v87 = v172;
    sub_1000076F0(v82, (uint64_t)v172, type metadata accessor for SearchResultSection);
    v88 = *(unsigned __int8 *)(v195 + 80);
    v89 = (v88 + 24) & ~v88;
    v90 = swift_allocObject(&unk_100149D70, v89 + v173, v88 | 7);
    *(_QWORD *)(v90 + 16) = v84;
    sub_100007670((uint64_t)v87, v90 + v89, type metadata accessor for SearchResultSection);
    v211 = (unint64_t)sub_100056DC8;
    v212 = v90;
    aBlock = _NSConcreteStackBlock;
    v208 = 1107296256;
    v209 = sub_100005350;
    v210 = (ValueMetadata *)&unk_100149D88;
    v91 = _Block_copy(&aBlock);
    v92 = swift_retain(v84);
    v93 = v178;
    static DispatchQoS.unspecified.getter(v92);
    v206 = _swiftEmptyArrayStorage;
    v94 = sub_100007828((unint64_t *)&qword_10015BAB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v95 = sub_100004FC8((uint64_t *)&unk_100156F40);
    v96 = sub_10000551C();
    v97 = v180;
    v98 = v183;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v206, v95, v96, v183, v94);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v93, v97, v91);
    _Block_release(v91);

    (*(void (**)(_BYTE *, uint64_t))(v181 + 8))(v97, v98);
    (*(void (**)(_BYTE *, uint64_t))(v179 + 8))(v93, v182);
    sub_1000076B4(v82, type metadata accessor for SearchResultSection);
LABEL_74:
    v168 = v212;
    swift_release(v84);
    swift_release(v168);
    return;
  }
  v199 = 0;
  v99 = v80[2];
  if (v99)
  {
    v187 = (*(unsigned __int8 *)(v171 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v171 + 80);
    v100 = (char *)v80 + v187;
    v186 = *(_QWORD *)(v171 + 72);
    v184 = v80;
    swift_bridgeObjectRetain(v80);
    v101 = (void **)&_swiftEmptyDictionarySingleton;
    v102 = type metadata accessor for PrimarySettingsListItemIdentifier;
    v188 = v20;
    v103 = v198;
    v104 = v196;
    while (1)
    {
      sub_1000076F0((uint64_t)v100, (uint64_t)v104, type metadata accessor for SearchResult);
      v105 = v102;
      sub_1000076F0((uint64_t)v104, (uint64_t)v20, v102);
      sub_1000076F0((uint64_t)v104, (uint64_t)v103, type metadata accessor for SearchResult);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v101);
      aBlock = v101;
      v66 = sub_1000DA830((uint64_t)v20);
      v108 = v101[2];
      v109 = (v107 & 1) == 0;
      v110 = (uint64_t)v108 + v109;
      if (__OFADD__(v108, v109))
        break;
      v111 = v107;
      if ((uint64_t)v101[3] >= v110)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1000EE8C0();
          v101 = aBlock;
        }
      }
      else
      {
        sub_1000ED270(v110, isUniquelyReferenced_nonNull_native);
        v101 = aBlock;
        v112 = sub_1000DA830((uint64_t)v20);
        if ((v111 & 1) != (v113 & 1))
          goto LABEL_88;
        v66 = v112;
      }
      swift_bridgeObjectRelease(0x8000000000000000);
      if ((v111 & 1) == 0)
      {
        v101[(v66 >> 6) + 8] = (void *)((unint64_t)v101[(v66 >> 6) + 8] | (1 << v66));
        sub_1000076F0((uint64_t)v20, (uint64_t)v101[6] + *(_QWORD *)(v197 + 72) * v66, v105);
        *((_QWORD *)v101[7] + v66) = _swiftEmptyArrayStorage;
        v114 = (char *)v101[2];
        v115 = __OFADD__(v114, 1);
        v116 = v114 + 1;
        if (v115)
          goto LABEL_82;
        v101[2] = v116;
      }
      v117 = v101[7];
      v118 = v117[v66];
      v119 = swift_isUniquelyReferenced_nonNull_native(v118);
      v117[v66] = v118;
      if ((v119 & 1) == 0)
      {
        v118 = sub_100052734(0, *(_QWORD *)(v118 + 16) + 1, 1, v118, &qword_1001573A0, type metadata accessor for SearchResult);
        v117[v66] = v118;
      }
      v121 = *(_QWORD *)(v118 + 16);
      v120 = *(_QWORD *)(v118 + 24);
      if (v121 >= v120 >> 1)
      {
        v118 = sub_100052734(v120 > 1, v121 + 1, 1, v118, &qword_1001573A0, type metadata accessor for SearchResult);
        v117[v66] = v118;
      }
      *(_QWORD *)(v118 + 16) = v121 + 1;
      v122 = v186;
      v123 = (const char *)(v118 + v187 + v121 * v186);
      v103 = v198;
      sub_100007670((uint64_t)v198, (uint64_t)v123, type metadata accessor for SearchResult);
      v20 = v188;
      v102 = v105;
      sub_1000076B4((uint64_t)v188, v105);
      v104 = v196;
      sub_1000076B4((uint64_t)v196, type metadata accessor for SearchResult);
      v100 += v122;
      if (!--v99)
      {
        v80 = v184;
        swift_bridgeObjectRelease(v184);
        goto LABEL_47;
      }
    }
    __break(1u);
    goto LABEL_76;
  }
  v101 = (void **)&_swiftEmptyDictionarySingleton;
LABEL_47:
  swift_bridgeObjectRelease(v80);
  v124 = v101[2];
  if (!v124)
  {
    swift_bridgeObjectRelease(v101);
    v146 = (void **)_swiftEmptyArrayStorage;
LABEL_72:
    aBlock = v146;
    swift_bridgeObjectRetain(v146);
    v154 = v199;
    sub_1000524E8((uint64_t *)&aBlock, type metadata accessor for SearchResultSection, (uint64_t (*)(uint64_t))sub_1000C19E8, sub_10005332C);
    if (!v154)
    {
      swift_bridgeObjectRelease(v146);
      v155 = aBlock;
      sub_100007BBC(0, (unint64_t *)&qword_100159D30, OS_dispatch_queue_ptr);
      v156 = (void *)static OS_dispatch_queue.main.getter();
      v84 = swift_allocObject(&unk_100149AF8, 24, 7);
      v157 = v185;
      swift_beginAccess(v185, &v213, 0, 0);
      v158 = swift_weakLoadStrong(v157);
      swift_weakInit(v84 + 16, v158);
      swift_release(v158);
      v159 = swift_allocObject(&unk_100149D20, 32, 7);
      *(_QWORD *)(v159 + 16) = v84;
      *(_QWORD *)(v159 + 24) = v155;
      v211 = (unint64_t)sub_100056C48;
      v212 = v159;
      aBlock = _NSConcreteStackBlock;
      v208 = 1107296256;
      v209 = sub_100005350;
      v210 = (ValueMetadata *)&unk_100149D38;
      v160 = _Block_copy(&aBlock);
      v161 = swift_retain(v84);
      v162 = v178;
      static DispatchQoS.unspecified.getter(v161);
      v206 = _swiftEmptyArrayStorage;
      v163 = sub_100007828((unint64_t *)&qword_10015BAB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v164 = sub_100004FC8((uint64_t *)&unk_100156F40);
      v165 = sub_10000551C();
      v166 = v180;
      v167 = v183;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v206, v164, v165, v183, v163);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v162, v166, v160);
      _Block_release(v160);

      (*(void (**)(_BYTE *, uint64_t))(v181 + 8))(v166, v167);
      (*(void (**)(_BYTE *, uint64_t))(v179 + 8))(v162, v182);
      goto LABEL_74;
    }
LABEL_89:
    swift_release(aBlock);
    __break(1u);
    return;
  }
  aBlock = (void **)_swiftEmptyArrayStorage;
  sub_10000F2BC(0, (int64_t)v124, 0);
  v126 = sub_100055918((uint64_t)v101);
  v127 = 0;
  v128 = (char *)(v101 + 8);
  v129 = *((_BYTE *)v101 + 32);
  v187 = (unint64_t)(v101 + 10);
  v66 = (unint64_t)type metadata accessor for PrimarySettingsListItemIdentifier;
  v188 = v124;
  v196 = v125;
  while ((v126 & 0x8000000000000000) == 0 && v126 < 1 << v129)
  {
    v132 = (unint64_t)v126 >> 6;
    if ((*(_QWORD *)&v128[8 * ((unint64_t)v126 >> 6)] & (1 << v126)) == 0)
      goto LABEL_77;
    if (*((_DWORD *)v101 + 9) != (_DWORD)v125)
      goto LABEL_78;
    v198 = v127;
    v133 = v193;
    v134 = *(int *)(v193 + 48);
    v135 = v189;
    sub_1000076F0((uint64_t)v101[6] + *(_QWORD *)(v197 + 72) * v126, (uint64_t)v189, type metadata accessor for PrimarySettingsListItemIdentifier);
    v136 = *((_QWORD *)v101[7] + v126);
    *(_QWORD *)&v135[v134] = v136;
    v137 = v190;
    sub_1000076F0((uint64_t)v135, (uint64_t)v190, type metadata accessor for PrimarySettingsListItemIdentifier);
    *(_QWORD *)&v137[*(int *)(v133 + 48)] = v136;
    v138 = (uint64_t)v137;
    v139 = v191;
    sub_100056BD4(v138, (uint64_t)v191);
    swift_bridgeObjectRetain_n(v136, 2);
    sub_10000BA50((uint64_t)v135, &qword_100158BC8);
    v140 = *(int *)(v133 + 48);
    v141 = (uint64_t)v139;
    v213 = *(_QWORD *)&v139[v140];
    swift_bridgeObjectRetain(v213);
    v142 = v199;
    sub_1000524E8(&v213, type metadata accessor for SearchResult, (uint64_t (*)(uint64_t))sub_1000C19FC, sub_100053CFC);
    v53 = v213;
    v199 = v142;
    if (v142)
      goto LABEL_87;
    v143 = v192;
    sub_1000076F0(v141, (uint64_t)v192, type metadata accessor for PrimarySettingsListItemIdentifier);
    v144 = (uint64_t)v143;
    v145 = v200;
    sub_100007670(v144, (uint64_t)v200, type metadata accessor for PrimarySettingsListItemIdentifier);
    *(_QWORD *)&v145[*(int *)(v194 + 20)] = v53;
    sub_10000BA50(v141, &qword_100158BC8);
    v146 = aBlock;
    if ((swift_isUniquelyReferenced_nonNull_native(aBlock) & 1) == 0)
    {
      sub_10000F2BC(0, (int64_t)v146[2] + 1, 1);
      v146 = aBlock;
    }
    v148 = (unint64_t)v146[2];
    v147 = (unint64_t)v146[3];
    if (v148 >= v147 >> 1)
    {
      sub_10000F2BC(v147 > 1, v148 + 1, 1);
      v146 = aBlock;
    }
    v146[2] = (void *)(v148 + 1);
    sub_100007670((uint64_t)v200, (uint64_t)v146+ ((*(unsigned __int8 *)(v195 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v195 + 80))+ *(_QWORD *)(v195 + 72) * v148, type metadata accessor for SearchResultSection);
    v129 = *((_BYTE *)v101 + 32);
    v130 = 1 << v129;
    if (v126 >= 1 << v129)
      goto LABEL_79;
    v149 = *(_QWORD *)&v128[8 * v132];
    if ((v149 & (1 << v126)) == 0)
      goto LABEL_80;
    LODWORD(v125) = (_DWORD)v196;
    if (*((_DWORD *)v101 + 9) != (_DWORD)v196)
      goto LABEL_81;
    v150 = v149 & (-2 << (v126 & 0x3F));
    if (v150)
    {
      v130 = __clz(__rbit64(v150)) | v126 & 0xFFFFFFFFFFFFFFC0;
      v131 = v188;
      v66 = (unint64_t)type metadata accessor for PrimarySettingsListItemIdentifier;
    }
    else
    {
      v151 = v132 + 1;
      v152 = (v130 + 63) >> 6;
      v131 = v188;
      v66 = (unint64_t)type metadata accessor for PrimarySettingsListItemIdentifier;
      if (v132 + 1 < v152)
      {
        v153 = *(_QWORD *)&v128[8 * v151];
        if (v153)
        {
LABEL_69:
          v130 = __clz(__rbit64(v153)) + (v151 << 6);
        }
        else
        {
          while (v152 - 2 != v132)
          {
            v153 = *(_QWORD *)(v187 + 8 * v132++);
            if (v153)
            {
              v151 = v132 + 1;
              goto LABEL_69;
            }
          }
        }
      }
    }
    v127 = v198 + 1;
    v126 = v130;
    if (v198 + 1 == v131)
    {
      swift_bridgeObjectRelease(v101);
      goto LABEL_72;
    }
  }
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  swift_once(&qword_100156CA8, sub_10008BE0C);
LABEL_24:
  v67 = type metadata accessor for Logger(0);
  sub_100007808(v67, (uint64_t)qword_10015D2B0);
  swift_errorRetain(v66);
  v68 = swift_errorRetain(v66);
  v69 = Logger.logObject.getter(v68);
  v70 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v69, v70))
  {
    v71 = (uint8_t *)swift_slowAlloc(12, -1);
    v72 = (void **)swift_slowAlloc(32, -1);
    aBlock = v72;
    *(_DWORD *)v71 = 136446210;
    swift_getErrorValue(v66, v205, v202);
    v73 = Error.localizedDescription.getter(v203, v204);
    v75 = v74;
    v214 = sub_1000DA1F0(v73, v74, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v214, v215, v71 + 4, v71 + 12);
    swift_bridgeObjectRelease(v75);
    swift_errorRelease(v66);
    swift_errorRelease(v66);
    _os_log_impl((void *)&_mh_execute_header, v69, v70, "Encountered error while performing search: %{public}s", v71, 0xCu);
    swift_arrayDestroy(v72, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v72, -1, -1);
    swift_slowDealloc(v71, -1, -1);

    swift_errorRelease(v66);
  }
  else
  {
    swift_errorRelease(v66);
    swift_errorRelease(v66);
    swift_errorRelease(v66);

  }
}

uint64_t sub_10005027C@<X0>(void **a1@<X0>, uint64_t a2@<X3>, uint64_t *a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  id v42;
  id v43;
  id v44;
  uint64_t v45;
  id v46;
  id v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t, uint64_t);
  uint64_t v50;
  void (*v51)(char *, _QWORD, uint64_t, uint64_t);
  unsigned int (*v52)(char *, uint64_t, uint64_t);
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  uint64_t v66;
  id v67;
  id v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  id v73;
  id v74;
  id v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  id v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  char *v85;
  unsigned int (*v86)(uint64_t, uint64_t, _QWORD *);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  NSObject *v92;
  os_log_type_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void (*v100)(char *, uint64_t);
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  unint64_t v107;
  char v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  NSObject *v124;
  os_log_type_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  char *v134;
  void (*v135)(char *, uint64_t);
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  void (*v142)(uint64_t, uint64_t);
  void (*v143)(uint64_t, uint64_t, uint64_t);
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  char v150;
  void (*v151)(uint64_t, uint64_t);
  uint64_t v152;
  int *v153;
  char *v155;
  void (*v156)(char *, uint64_t, uint64_t);
  uint64_t v157;
  id v158;
  id v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  NSObject *v166;
  os_log_type_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  void (*v174)(uint64_t, uint64_t);
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t *v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  void (*v183)(char *, uint64_t);
  uint64_t v184;
  void (*v185)(uint64_t, uint64_t);
  id v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  char *v192;
  char *v193;
  uint64_t *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  char *v202;
  _QWORD *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  _BYTE v213[16];
  uint64_t v214[2];
  char *v215;

  v194 = a3;
  v199 = a2;
  v210 = a4;
  v209 = type metadata accessor for SearchResult(0);
  v211 = *(_QWORD *)(v209 - 8);
  __chkstk_darwin(v209);
  v6 = (char *)&v186 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004FC8((uint64_t *)&unk_100156F00);
  __chkstk_darwin(v7);
  v198 = (uint64_t)&v186 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100004FC8(&qword_10015C890);
  v10 = __chkstk_darwin(v9);
  v208 = (char *)&v186 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v201 = (uint64_t)&v186 - v12;
  v207 = (_QWORD *)type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v203 = (_QWORD *)*(v207 - 1);
  v13 = __chkstk_darwin(v207);
  v197 = (uint64_t)&v186 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v196 = (uint64_t)&v186 - v16;
  __chkstk_darwin(v15);
  v204 = (uint64_t)&v186 - v17;
  v18 = sub_100004FC8((uint64_t *)&unk_10015C9A0);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v186 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v23 = (char *)&v186 - v22;
  v24 = type metadata accessor for URL(0);
  v25 = *(_QWORD **)(v24 - 8);
  v26 = __chkstk_darwin(v24);
  v200 = (char *)&v186 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v26);
  v193 = (char *)&v186 - v29;
  v30 = __chkstk_darwin(v28);
  v192 = (char *)&v186 - v31;
  v32 = __chkstk_darwin(v30);
  v195 = (char *)&v186 - v33;
  v34 = __chkstk_darwin(v32);
  v202 = (char *)&v186 - v35;
  v36 = __chkstk_darwin(v34);
  v191 = (uint64_t)&v186 - v37;
  v38 = __chkstk_darwin(v36);
  v205 = (uint64_t)&v186 - v39;
  __chkstk_darwin(v38);
  v215 = (char *)&v186 - v40;
  v41 = *a1;
  v42 = objc_msgSend(v41, "attributeSet");
  v43 = objc_msgSend(v42, "title");

  if (!v43)
  {
    v44 = objc_msgSend(v41, "attributeSet");
    v43 = objc_msgSend(v44, "subject");

    if (!v43)
      goto LABEL_10;
  }
  v190 = v6;
  v189 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
  v206 = v45;

  v46 = objc_msgSend(v41, "attributeSet");
  v47 = objc_msgSend(v46, "URL");

  if (v47)
  {
    v48 = v205;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v47);

    v49 = (void (*)(char *, uint64_t, uint64_t))v25[4];
    v50 = v24;
    v49(v21, v48, v24);
    v51 = (void (*)(char *, _QWORD, uint64_t, uint64_t))v25[7];
    v51(v21, 0, 1, v24);
    v52 = (unsigned int (*)(char *, uint64_t, uint64_t))v25[6];
    if (v52(v21, 1, v24) != 1)
    {
      v49(v23, (uint64_t)v21, v24);
      v51(v23, 0, 1, v24);
      goto LABEL_8;
    }
  }
  else
  {
    v50 = v24;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v25[7])(v21, 1, 1, v24);
  }
  v53 = objc_msgSend(v41, "uniqueIdentifier");
  v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
  v56 = v55;

  URL.init(string:)(v54, v56);
  swift_bridgeObjectRelease(v56);
  sub_10000BA50((uint64_t)v21, (uint64_t *)&unk_10015C9A0);
  v52 = (unsigned int (*)(char *, uint64_t, uint64_t))v25[6];
LABEL_8:
  v57 = v207;
  v58 = v52(v23, 1, v50);
  v59 = (uint64_t)v215;
  v60 = (uint64_t)v208;
  if (v58 == 1)
  {
    swift_bridgeObjectRelease(v206);
    sub_10000BA50((uint64_t)v23, (uint64_t *)&unk_10015C9A0);
LABEL_10:
    if (qword_100156CA8 != -1)
      swift_once(&qword_100156CA8, sub_10008BE0C);
    v61 = type metadata accessor for Logger(0);
    sub_100007808(v61, (uint64_t)qword_10015D2B0);
    v62 = v41;
    v63 = Logger.logObject.getter(v62);
    v64 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v63, v64))
    {
      v65 = (uint8_t *)swift_slowAlloc(12, -1);
      v66 = swift_slowAlloc(32, -1);
      v214[0] = v66;
      *(_DWORD *)v65 = 136380675;
      v215 = (char *)(v65 + 4);
      v67 = objc_msgSend(v62, "attributeSet");
      v68 = objc_msgSend(v67, "description");

      v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
      v71 = v70;

      v212 = sub_1000DA1F0(v69, v71, v214);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v212, v213, v215, v65 + 12);

      swift_bridgeObjectRelease(v71);
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "Search result has malformed attributeSet (missing title or URL): '%{private}s'.", v65, 0xCu);
      swift_arrayDestroy(v66, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v66, -1, -1);
      swift_slowDealloc(v65, -1, -1);

      v72 = 1;
LABEL_43:
      v152 = v210;
      v153 = (int *)v209;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v211 + 56))(v152, v72, 1, v153);
    }

    goto LABEL_42;
  }
  ((void (*)(char *, char *, uint64_t))v25[4])(v215, v23, v50);
  v73 = objc_msgSend(v41, "attributeSet");
  v74 = objc_msgSend(v73, "rankingHint");

  if (v74)
  {
    v186 = objc_msgSend(v74, "integerValue");

  }
  else
  {
    v186 = 0;
  }
  v75 = objc_msgSend(v41, "attributeSet", v186);
  v76 = objc_msgSend(v75, "thumbnailContentType");

  if (v76)
  {
    v188 = static String._unconditionallyBridgeFromObjectiveC(_:)(v76);
    v78 = v77;

    v191 = v78;
    swift_bridgeObjectRetain(v78);
    v79 = 2;
LABEL_22:
    v187 = v79;
    v84 = v203;
    goto LABEL_23;
  }
  v80 = objc_msgSend(v41, "attributeSet");
  v81 = objc_msgSend(v80, "thumbnailBundleID");

  if (v81)
  {
    v188 = static String._unconditionallyBridgeFromObjectiveC(_:)(v81);
    v83 = v82;

    v191 = v83;
    swift_bridgeObjectRetain(v83);
    v79 = 1;
    goto LABEL_22;
  }
  v143 = (void (*)(uint64_t, uint64_t, uint64_t))v25[2];
  v144 = v205;
  v143(v205, v59, v50);
  v145 = sub_1000130A0(v144);
  v84 = v203;
  if ((_BYTE)v147 == 0xFF)
  {
    swift_bridgeObjectRelease(v206);
    if (qword_100156CA8 != -1)
      swift_once(&qword_100156CA8, sub_10008BE0C);
    v163 = type metadata accessor for Logger(0);
    sub_100007808(v163, (uint64_t)qword_10015D2B0);
    v164 = v191;
    v165 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v143)(v191, v59, v50);
    v166 = Logger.logObject.getter(v165);
    v167 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v166, v167))
    {
      v168 = swift_slowAlloc(22, -1);
      v169 = swift_slowAlloc(32, -1);
      v214[0] = v169;
      *(_DWORD *)v168 = 141558275;
      v212 = 1752392040;
      v170 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v212, v213, v168 + 4, v168 + 12);
      *(_WORD *)(v168 + 12) = 2081;
      v171 = URL.absoluteString.getter(v170);
      v173 = v172;
      v212 = sub_1000DA1F0(v171, v172, v214);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v212, v213, v168 + 14, v168 + 22);
      swift_bridgeObjectRelease(v173);
      v174 = (void (*)(uint64_t, uint64_t))v25[1];
      v174(v191, v50);
      _os_log_impl((void *)&_mh_execute_header, v166, v167, "Could not determine icon type for '%{private,mask.hash}s'.", (uint8_t *)v168, 0x16u);
      swift_arrayDestroy(v169, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v169, -1, -1);
      swift_slowDealloc(v168, -1, -1);

      v174((uint64_t)v215, v50);
      v72 = 1;
      goto LABEL_43;
    }

    v185 = (void (*)(uint64_t, uint64_t))v25[1];
    v185(v164, v50);
    v185(v59, v50);
    goto LABEL_42;
  }
  v188 = v145;
  v191 = v146;
  v187 = v147;
  sub_10000BB2C(v145, v146, v147);
LABEL_23:
  sub_10001AF58(v60);
  v85 = v202;
  v203 = (_QWORD *)v25[2];
  ((void (*)(char *, uint64_t, uint64_t))v203)(v202, v59, v50);
  v86 = (unsigned int (*)(uint64_t, uint64_t, _QWORD *))v84[6];
  if (v86(v60, 1, v57) == 1)
  {
    v87 = v60;
    v88 = v201;
    sub_10001B894(v201);
    v207 = (_QWORD *)v25[1];
    ((void (*)(char *, uint64_t))v207)(v85, v50);
    sub_10000BA50(v87, &qword_10015C890);
    if (v86(v88, 1, v57) == 1)
    {
      swift_bridgeObjectRelease(v206);
      sub_10000BA50(v88, &qword_10015C890);
      if (qword_100156CA8 != -1)
        swift_once(&qword_100156CA8, sub_10008BE0C);
      v89 = type metadata accessor for Logger(0);
      sub_100007808(v89, (uint64_t)qword_10015D2B0);
      v90 = v195;
      v91 = ((uint64_t (*)(char *, uint64_t, uint64_t))v203)(v195, v59, v50);
      v92 = Logger.logObject.getter(v91);
      v93 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v92, v93))
      {
        v94 = swift_slowAlloc(22, -1);
        v95 = swift_slowAlloc(32, -1);
        v214[0] = v95;
        *(_DWORD *)v94 = 141558275;
        v212 = 1752392040;
        v96 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v212, v213, v94 + 4, v94 + 12);
        *(_WORD *)(v94 + 12) = 2081;
        v97 = URL.absoluteString.getter(v96);
        v99 = v98;
        v212 = sub_1000DA1F0(v97, v98, v214);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v212, v213, v94 + 14, v94 + 22);
        swift_bridgeObjectRelease(v99);
        v100 = (void (*)(char *, uint64_t))v207;
        ((void (*)(char *, uint64_t))v207)(v90, v50);
        _os_log_impl((void *)&_mh_execute_header, v92, v93, "Could not resolve primarySettingsListItemIdentifier for '%{private,mask.hash}s'.", (uint8_t *)v94, 0x16u);
        v72 = 1;
        swift_arrayDestroy(v95, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v95, -1, -1);
        swift_slowDealloc(v94, -1, -1);

        v101 = v188;
        v102 = v191;
        LOBYTE(v94) = v187;
        sub_10000BB54(v188, v191, v187);
        sub_100036838(v101, v102, v94);
        v100(v215, v50);
        goto LABEL_43;
      }

      v148 = v188;
      v149 = v191;
      v150 = v187;
      sub_10000BB54(v188, v191, v187);
      v151 = (void (*)(uint64_t, uint64_t))v207;
      ((void (*)(char *, uint64_t))v207)(v90, v50);
      sub_100036838(v148, v149, v150);
      v151(v59, v50);
LABEL_42:
      v72 = 1;
      goto LABEL_43;
    }
  }
  else
  {
    v207 = (_QWORD *)v25[1];
    ((void (*)(char *, uint64_t))v207)(v85, v50);
    v103 = v60;
    v88 = v201;
    sub_100007670(v103, v201, type metadata accessor for PrimarySettingsListItemIdentifier);
    ((void (*)(uint64_t, _QWORD, uint64_t, _QWORD *))v84[7])(v88, 0, 1, v57);
  }
  v104 = v204;
  sub_100007670(v88, v204, type metadata accessor for PrimarySettingsListItemIdentifier);
  v105 = v199;
  v106 = v200;
  if (!*(_QWORD *)(v199 + 16) || (v107 = sub_1000DA830(v104), (v108 & 1) == 0))
  {
    v119 = type metadata accessor for PrimarySettingsListItemModel(0);
    v120 = v198;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v119 - 8) + 56))(v198, 1, 1, v119);
    swift_bridgeObjectRelease(v206);
    sub_10000BA50(v120, (uint64_t *)&unk_100156F00);
    if (qword_100156CA8 != -1)
      swift_once(&qword_100156CA8, sub_10008BE0C);
    v121 = type metadata accessor for Logger(0);
    sub_100007808(v121, (uint64_t)qword_10015D2B0);
    v122 = v197;
    sub_1000076F0(v104, v197, type metadata accessor for PrimarySettingsListItemIdentifier);
    v123 = ((uint64_t (*)(char *, uint64_t, uint64_t))v203)(v106, v59, v50);
    v124 = Logger.logObject.getter(v123);
    v125 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v124, v125))
    {
      v126 = swift_slowAlloc(32, -1);
      v208 = (char *)swift_slowAlloc(64, -1);
      v214[0] = (uint64_t)v208;
      *(_DWORD *)v126 = 136315651;
      sub_1000A03B0();
      v128 = v127;
      v212 = sub_1000DA1F0(v129, v127, v214);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v212, v213, v126 + 4, v126 + 12);
      swift_bridgeObjectRelease(v128);
      sub_1000076B4(v122, type metadata accessor for PrimarySettingsListItemIdentifier);
      *(_WORD *)(v126 + 12) = 2160;
      v212 = 1752392040;
      v130 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v212, v213, v126 + 14, v126 + 22);
      *(_WORD *)(v126 + 22) = 2081;
      v131 = URL.absoluteString.getter(v130);
      v133 = v132;
      v212 = sub_1000DA1F0(v131, v132, v214);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v212, v213, v126 + 24, v126 + 32);
      swift_bridgeObjectRelease(v133);
      v134 = v106;
      v135 = (void (*)(char *, uint64_t))v207;
      ((void (*)(char *, uint64_t))v207)(v134, v50);
      _os_log_impl((void *)&_mh_execute_header, v124, v125, "PrimarySettingsListItemIdentifier '%s' for search result with url '%{private,mask.hash}s' not found in currentDataModel, hiding result.", (uint8_t *)v126, 0x20u);
      v136 = v208;
      swift_arrayDestroy(v208, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v136, -1, -1);
      swift_slowDealloc(v126, -1, -1);

      v137 = v188;
      v138 = v191;
      LOBYTE(v136) = v187;
      sub_10000BB54(v188, v191, v187);
      sub_100036838(v137, v138, (char)v136);
      sub_1000076B4(v204, type metadata accessor for PrimarySettingsListItemIdentifier);
      v135(v215, v50);
    }
    else
    {

      v139 = v188;
      v140 = v191;
      v141 = v187;
      sub_10000BB54(v188, v191, v187);
      v142 = (void (*)(uint64_t, uint64_t))v207;
      ((void (*)(char *, uint64_t))v207)(v106, v50);
      sub_1000076B4(v122, type metadata accessor for PrimarySettingsListItemIdentifier);
      sub_100036838(v139, v140, v141);
      sub_1000076B4(v204, type metadata accessor for PrimarySettingsListItemIdentifier);
      v142(v59, v50);
    }
    goto LABEL_42;
  }
  v109 = v107;
  v110 = *(_QWORD *)(v105 + 56);
  v111 = type metadata accessor for PrimarySettingsListItemModel(0);
  v112 = *(_QWORD *)(v111 - 8);
  v113 = v198;
  sub_1000076F0(v110 + *(_QWORD *)(v112 + 72) * v109, v198, type metadata accessor for PrimarySettingsListItemModel);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v112 + 56))(v113, 0, 1, v111);
  sub_10000BA50(v113, (uint64_t *)&unk_100156F00);
  v114 = v194;
  swift_beginAccess(v194, v214, 0, 0);
  v115 = *v114;
  swift_bridgeObjectRetain(*v114);
  LOBYTE(v113) = sub_10003A894(v59, v115);
  swift_bridgeObjectRelease(v115);
  if ((v113 & 1) != 0)
  {
    swift_bridgeObjectRelease(v206);
    v116 = v188;
    v117 = v191;
    v118 = v187;
    sub_10000BB54(v188, v191, v187);
    sub_100036838(v116, v117, v118);
    sub_1000076B4(v104, type metadata accessor for PrimarySettingsListItemIdentifier);
    ((void (*)(uint64_t, uint64_t))v207)(v59, v50);
    goto LABEL_42;
  }
  v155 = v192;
  v156 = (void (*)(char *, uint64_t, uint64_t))v203;
  ((void (*)(char *, uint64_t, uint64_t))v203)(v192, v59, v50);
  swift_beginAccess(v114, &v212, 33, 0);
  v157 = v205;
  sub_1000C7E54(v205, v155);
  swift_endAccess(&v212);
  ((void (*)(uint64_t, uint64_t))v207)(v157, v50);
  sub_1000076F0(v104, v196, type metadata accessor for PrimarySettingsListItemIdentifier);
  v156(v193, v59, v50);
  v158 = objc_msgSend(v41, "attributeSet");
  v159 = objc_msgSend(v158, "contentDescription");

  if (v159)
  {
    v160 = static String._unconditionallyBridgeFromObjectiveC(_:)(v159);
    v162 = v161;

  }
  else
  {
    v160 = 0;
    v162 = 0;
  }
  v152 = v210;
  v153 = (int *)v209;
  v175 = v206;
  v176 = (uint64_t)v190;
  sub_1000076F0(v196, (uint64_t)v190, type metadata accessor for PrimarySettingsListItemIdentifier);
  v177 = v193;
  ((void (*)(uint64_t, char *, uint64_t))v203)(v176 + v153[5], v193, v50);
  v178 = (uint64_t *)(v176 + v153[6]);
  *v178 = v189;
  v178[1] = v175;
  v179 = (uint64_t *)(v176 + v153[7]);
  *v179 = v160;
  v179[1] = v162;
  *(_QWORD *)(v176 + v153[8]) = v186;
  v180 = v188;
  v181 = v191;
  LOBYTE(v175) = v187;
  sub_10000BB2C(v188, v191, v187);
  v182 = v177;
  v183 = (void (*)(char *, uint64_t))v207;
  ((void (*)(char *, uint64_t))v207)(v182, v50);
  sub_1000076B4(v196, type metadata accessor for PrimarySettingsListItemIdentifier);
  v184 = v176 + v153[9];
  *(_QWORD *)v184 = v180;
  *(_QWORD *)(v184 + 8) = v181;
  *(_BYTE *)(v184 + 16) = v175;
  sub_100007670(v176, v152, type metadata accessor for SearchResult);
  sub_10000BB54(v180, v181, v175);
  sub_100036838(v180, v181, v175);
  sub_1000076B4(v204, type metadata accessor for PrimarySettingsListItemIdentifier);
  v183(v215, v50);
  v72 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v211 + 56))(v152, v72, 1, v153);
}

uint64_t sub_100051660(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  _QWORD v14[6];
  uint64_t v15;
  char v16[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v16, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    v6 = sub_100004FC8(&qword_100157398);
    v7 = *(_QWORD *)(type metadata accessor for SearchResultSection(0) - 8);
    v8 = *(_QWORD *)(v7 + 72);
    v9 = *(unsigned __int8 *)(v7 + 80);
    v10 = (v9 + 32) & ~v9;
    v11 = swift_allocObject(v6, v10 + v8, v9 | 7);
    *(_OWORD *)(v11 + 16) = xmmword_1001164D0;
    sub_1000076F0(a2, v11 + v10, type metadata accessor for SearchResultSection);
    KeyPath = swift_getKeyPath(&unk_100116788);
    __chkstk_darwin(KeyPath);
    v14[2] = v5;
    v14[3] = v11;
    v15 = v5;
    v13 = sub_100007828(&qword_100158B50, type metadata accessor for SettingsAppSearchViewModel, (uint64_t)&unk_1001166F4);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v15, KeyPath, sub_1000570DC, v14, (char *)&type metadata for () + 8, v13);
    swift_release(v5);
    swift_release(KeyPath);
    return swift_bridgeObjectRelease(v11);
  }
  return result;
}

uint64_t sub_1000517C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  _QWORD v8[6];
  uint64_t v9;
  char v10[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v10, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    KeyPath = swift_getKeyPath(&unk_100116788);
    __chkstk_darwin(KeyPath);
    v8[2] = v5;
    v8[3] = a2;
    v9 = v5;
    v7 = sub_100007828(&qword_100158B50, type metadata accessor for SettingsAppSearchViewModel, (uint64_t)&unk_1001166F4);
    swift_bridgeObjectRetain(a2);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_1000570DC, v8, (char *)&type metadata for () + 8, v7);
    swift_release(v5);
    swift_release(KeyPath);
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

void sub_1000518E0(uint8_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t);
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  _QWORD *v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  void **v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint8_t *v57;
  void **aBlock;
  uint64_t v59;
  uint64_t (*v60)(uint64_t);
  void *v61;
  uint64_t (*v62)();
  _QWORD *v63;
  void **v64;
  uint64_t v65;

  v2 = type metadata accessor for PPTTestCase(0);
  v51 = *(_QWORD *)(v2 - 8);
  v52 = v2;
  __chkstk_darwin(v2);
  v50 = (char *)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v56 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v54 = *(_QWORD *)(v7 - 8);
  v55 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for PPTTestCase.Name(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v50 - v16;
  v57 = a1;
  PPTTestCase.name.getter(v15);
  if (qword_100156C70 != -1)
    swift_once(&qword_100156C70, sub_100062AF4);
  sub_100007808(v10, (uint64_t)qword_10015D208);
  v18 = sub_100007828(&qword_100158BA0, (uint64_t (*)(uint64_t))&type metadata accessor for PPTTestCase.Name, (uint64_t)&protocol conformance descriptor for PPTTestCase.Name);
  dispatch thunk of RawRepresentable.rawValue.getter(&aBlock, v10, v18);
  dispatch thunk of RawRepresentable.rawValue.getter(&v64, v10, v18);
  v19 = v59;
  v20 = v65;
  if (aBlock == v64 && v59 == v65)
  {
    swift_bridgeObjectRelease_n(v59, 2);
    v21 = *(uint64_t (**)(char *, uint64_t))(v11 + 8);
    v22 = v21(v17, v10);
LABEL_7:
    v24 = PPTTestCase.name.getter(v22);
    v25 = PPTTestCase.Name.rawValue.getter(v24);
    v27 = v26;
    v21(v14, v10);
    v28 = v53;
    v29 = *(void **)(v53 + 104);
    v30 = (_QWORD *)swift_allocObject(&unk_100149BB8, 40, 7);
    v30[2] = v28;
    v30[3] = v25;
    v30[4] = v27;
    v62 = sub_1000569D8;
    v63 = v30;
    aBlock = _NSConcreteStackBlock;
    v59 = 1107296256;
    v60 = sub_100005350;
    v61 = &unk_100149BD0;
    v31 = _Block_copy(&aBlock);
    v32 = v29;
    v33 = swift_retain(v28);
    static DispatchQoS.unspecified.getter(v33);
    v64 = (void **)_swiftEmptyArrayStorage;
    v34 = sub_100007828((unint64_t *)&qword_10015BAB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v35 = sub_100004FC8((uint64_t *)&unk_100156F40);
    v36 = sub_10000551C();
    dispatch thunk of SetAlgebra.init<A>(_:)(&v64, v35, v36, v4, v34);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v6, v31);
    _Block_release(v31);

    (*(void (**)(char *, uint64_t))(v56 + 8))(v6, v4);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v9, v55);
    swift_release(v63);
    return;
  }
  v23 = _stringCompareWithSmolCheck(_:_:expecting:)(aBlock, v59, v64, v65, 0);
  swift_bridgeObjectRelease(v19);
  swift_bridgeObjectRelease(v20);
  v21 = *(uint64_t (**)(char *, uint64_t))(v11 + 8);
  v22 = v21(v17, v10);
  if ((v23 & 1) != 0)
    goto LABEL_7;
  if (qword_100156CD0 != -1)
    swift_once(&qword_100156CD0, sub_10008BEC4);
  v37 = type metadata accessor for Logger(0);
  sub_100007808(v37, (uint64_t)qword_10015D328);
  v39 = v50;
  v38 = v51;
  v40 = v52;
  v41 = (*(uint64_t (**)(char *, uint8_t *, uint64_t))(v51 + 16))(v50, v57, v52);
  v42 = Logger.logObject.getter(v41);
  v43 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v42, v43))
  {
    v44 = (uint8_t *)swift_slowAlloc(12, -1);
    v45 = (void **)swift_slowAlloc(32, -1);
    *(_DWORD *)v44 = 136446210;
    v57 = v44 + 4;
    aBlock = v45;
    v46 = PPTTestCase.name.getter(v45);
    v47 = PPTTestCase.Name.rawValue.getter(v46);
    v49 = v48;
    v21(v14, v10);
    v64 = (void **)sub_1000DA1F0(v47, v49, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65, v57, v44 + 12);
    swift_bridgeObjectRelease(v49);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v50, v52);
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "Unknown test: %{public}s", v44, 0xCu);
    swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v45, -1, -1);
    swift_slowDealloc(v44, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v40);
  }

}

uint64_t sub_100051E20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;

  v6 = sub_100004FC8(&qword_10015C5A0);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = swift_allocObject(&unk_100149AF8, 24, 7);
  swift_weakInit(v10 + 16, a1);
  type metadata accessor for MainActor(0);
  swift_retain(v10);
  v11 = swift_bridgeObjectRetain(a3);
  v12 = static MainActor.shared.getter(v11);
  v13 = (_QWORD *)swift_allocObject(&unk_100149C08, 56, 7);
  v13[2] = v12;
  v13[3] = &protocol witness table for MainActor;
  v13[4] = v10;
  v13[5] = a2;
  v13[6] = a3;
  swift_release(v10);
  v14 = sub_1000F1E18((uint64_t)v8, (uint64_t)&unk_100158BB0, (uint64_t)v13);
  return swift_release(v14);
}

uint64_t sub_100051F48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6[17] = a5;
  v6[18] = a6;
  v6[16] = a4;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v6[19] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[20] = v8;
  v6[21] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v6[22] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v6[23] = v10;
  v6[24] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchTimeInterval(0);
  v6[25] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v6[26] = v12;
  v6[27] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchTime(0);
  v6[28] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v6[29] = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[30] = swift_task_alloc(v15);
  v6[31] = swift_task_alloc(v15);
  v16 = type metadata accessor for MainActor(0);
  v6[32] = static MainActor.shared.getter(v16);
  v17 = dispatch thunk of Actor.unownedExecutor.getter(v16, &protocol witness table for MainActor);
  return swift_task_switch(sub_100052068, v17, v18);
}

uint64_t sub_100052068()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v1 = v0[16];
  swift_release(v0[32]);
  v1 += 16;
  swift_beginAccess(v1, v0 + 8, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    KeyPath = swift_getKeyPath(&unk_100116738);
    v5 = swift_task_alloc(32);
    *(_QWORD *)(v5 + 16) = v3;
    *(_BYTE *)(v5 + 24) = 1;
    v0[14] = v3;
    v6 = sub_100007828(&qword_100158B50, type metadata accessor for SettingsAppSearchViewModel, (uint64_t)&unk_1001166F4);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 14, KeyPath, sub_100056AA0, v5, (char *)&type metadata for () + 8, v6);
    swift_release(KeyPath);
    swift_release(v3);
    swift_task_dealloc(v5);
  }
  v7 = v0[16] + 16;
  swift_beginAccess(v7, v0 + 11, 0, 0);
  v8 = swift_weakLoadStrong(v7);
  if (v8)
  {
    v9 = v8;
    v10 = v0[18];
    v11 = *(_QWORD *)(v8 + 96);
    *(_QWORD *)(v9 + 88) = v0[17];
    *(_QWORD *)(v9 + 96) = v10;
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRetain(v10);
    swift_release(v9);
  }
  v12 = v0[30];
  v13 = v0[31];
  v14 = v0[28];
  v27 = v0[29];
  v16 = v0[26];
  v15 = (_QWORD *)v0[27];
  v17 = v0[24];
  v18 = v0[25];
  v33 = v0[23];
  v34 = v0[22];
  v32 = v0[20];
  v30 = v0[21];
  v31 = v0[19];
  v19 = v0[16];
  v20 = sub_100007BBC(0, (unint64_t *)&qword_100159D30, OS_dispatch_queue_ptr);
  v29 = (void *)static OS_dispatch_queue.main.getter(v20);
  static DispatchTime.now()();
  *v15 = 1;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v16 + 104))(v15, enum case for DispatchTimeInterval.seconds(_:), v18);
  + infix(_:_:)(v12, v15);
  (*(void (**)(_QWORD *, uint64_t))(v16 + 8))(v15, v18);
  v28 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
  v28(v12, v14);
  v0[6] = sub_100056AB4;
  v0[7] = v19;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256;
  v0[4] = sub_100005350;
  v0[5] = &unk_100149C20;
  v21 = _Block_copy(v0 + 2);
  v22 = swift_retain(v19);
  static DispatchQoS.unspecified.getter(v22);
  v0[15] = _swiftEmptyArrayStorage;
  v23 = sub_100007828((unint64_t *)&qword_10015BAB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v24 = sub_100004FC8((uint64_t *)&unk_100156F40);
  v25 = sub_10000551C();
  dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 15, v24, v25, v31, v23);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v13, v17, v30, v21);
  _Block_release(v21);

  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v30, v31);
  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v17, v34);
  v28(v13, v14);
  swift_release(v0[7]);
  swift_task_dealloc(v13);
  swift_task_dealloc(v12);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v30);
  return ((uint64_t (*)(void))v0[1])();
}

uint64_t sub_1000523D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v6[8];
  uint64_t v7;
  char v8[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v8, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v3 = result;
    KeyPath = swift_getKeyPath(&unk_100116760);
    __chkstk_darwin(KeyPath);
    v6[2] = v3;
    v6[3] = 0x6C6172656E6547;
    v6[4] = 0xE700000000000000;
    v7 = v3;
    v5 = sub_100007828(&qword_100158B50, type metadata accessor for SettingsAppSearchViewModel, (uint64_t)&unk_1001166F4);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_100056AC4, v6, (char *)&type metadata for () + 8, v5);
    swift_release(v3);
    return swift_release(KeyPath);
  }
  return result;
}

uint64_t sub_1000524E8(uint64_t *a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(uint64_t), uint64_t (*a4)(_QWORD *))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[2];

  v7 = *(_QWORD *)(a2(0) - 8);
  v8 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v8 = a3(v8);
  v9 = *(_QWORD *)(v8 + 16);
  v11[0] = v8 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  v11[1] = v9;
  result = a4(v11);
  *a1 = v8;
  return result;
}

uint64_t sub_100052578(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_1000525DC;
  return v6(a1);
}

uint64_t sub_1000525DC()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100052628()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10005264C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_100158B3C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1000526BC;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_100158B38 + dword_100158B38))(a1, v4);
}

uint64_t sub_1000526BC()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10005270C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100052734(a1, a2, a3, a4, &qword_100157390, (uint64_t (*)(_QWORD))&type metadata accessor for URLQueryItem);
}

uint64_t sub_100052720(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100052734(a1, a2, a3, a4, &qword_100157380, type metadata accessor for PrimarySettingsListItemModel);
}

uint64_t sub_100052734(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_100004FC8(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
    goto LABEL_29;
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = *(_QWORD *)(a6(0) - 8);
  v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  v23 = (unint64_t)v18 + v22;
  if ((a1 & 1) != 0)
  {
    v24 = a4 + v22;
    if ((unint64_t)v18 < a4 || v23 >= v24 + *(_QWORD *)(v21 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v18 + v22, v24);
    }
    else if (v18 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v18 + v22, v24);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_100056218(0, v11, v23, a4, a6);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v18;
}

_QWORD *sub_100052940(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100004FC8(&qword_100157360);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100056128(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100052A4C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100004FC8(&qword_100158B90);
      v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4])
          memmove(v14, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100055FA4(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100052B58(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100004FC8(&qword_100158B68);
      v11 = (_QWORD *)swift_allocObject(v10, 96 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 96);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[12 * v8 + 4])
          memmove(v13, a4 + 4, 96 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_100055EB0(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100052C7C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100004FC8(&qword_100158B70);
      v11 = (_QWORD *)swift_allocObject(v10, 72 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 72);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[9 * v8 + 4])
          memmove(v13, a4 + 4, 72 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_100056894(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100052DA0(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100052DC8(a1, a2, a3, a4, (uint64_t *)&unk_10015CA20, &qword_100157368);
}

_QWORD *sub_100052DB4(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100052DC8(a1, a2, a3, a4, &qword_100158B80, &qword_100158B88);
}

_QWORD *sub_100052DC8(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  _QWORD *v16;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      v13 = sub_100004FC8(a5);
      v14 = (_QWORD *)swift_allocObject(v13, 40 * v12 + 32, 7);
      v15 = j__malloc_size(v14);
      v14[2] = v11;
      v14[3] = 2 * ((uint64_t)(v15 - 32) / 40);
      v16 = v14 + 4;
      if ((v8 & 1) != 0)
      {
LABEL_13:
        if (v14 != a4 || v16 >= &a4[5 * v11 + 4])
          memmove(v16, a4 + 4, 40 * v11);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v14 = _swiftEmptyArrayStorage;
      v16 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_100055DA8(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v14;
  }
  __break(1u);
  return result;
}

uint64_t sub_100052EF4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100052734(a1, a2, a3, a4, &qword_100158BF8, (uint64_t (*)(_QWORD))&type metadata accessor for SettingsNavigationEventRecord);
}

uint64_t sub_100052F08(unint64_t a1)
{
  Swift::Int *v1;
  Swift::Int *v2;
  Swift::Int v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  char v12;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  Swift::Int v15;
  Swift::Int v17;

  v2 = v1;
  v4 = *v1;
  if ((v4 & 0xC000000000000001) == 0)
  {
LABEL_8:
    swift_bridgeObjectRetain(v4);
    a1 = sub_1000DAA60(a1);
    v12 = v11;
    swift_bridgeObjectRelease(v4);
    if ((v12 & 1) != 0)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
      v4 = *v2;
      v17 = *v2;
      *v2 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        sub_1000EE718();
        v4 = v17;
      }
      goto LABEL_11;
    }
    return 0;
  }
  if (v4 < 0)
    v5 = v4;
  else
    v5 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v4);
  v6 = (id)a1;
  v7 = __CocoaDictionary.lookup(_:)();

  if (!v7)
  {
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  swift_unknownObjectRelease(v7);
  v8 = __CocoaDictionary.count.getter(v5);
  v4 = sub_1000530F4(v5, v8);
  swift_retain(v4);
  a1 = sub_1000DAA60((uint64_t)v6);
  v10 = v9;
  swift_release(v4);
  if ((v10 & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
LABEL_11:

  v14 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * a1);
  sub_1000ED920(a1, v4);
  v15 = *v2;
  *v2 = v4;
  swift_bridgeObjectRelease(v15);
  return v14;
}

uint64_t sub_100053054(uint64_t a1, void *a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  Swift::Int v6;
  uint64_t v7;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  Swift::Int v10;
  Swift::Int v11;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) == 0)
    goto LABEL_7;
  if (v6 < 0)
    v7 = *v2;
  else
    v7 = v6 & 0xFFFFFFFFFFFFFF8;
  result = __CocoaDictionary.count.getter(v7);
  if (!__OFADD__(result, 1))
  {
    v6 = sub_1000530F4(v7, result + 1);
    *v3 = v6;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v6);
    v11 = *v3;
    *v3 = 0x8000000000000000;
    sub_1000EDCB8(a1, a2, isUniquelyReferenced_nonNull_native);
    v10 = *v3;
    *v3 = v11;
    return swift_bridgeObjectRelease(v10);
  }
  __break(1u);
  return result;
}

Swift::Int sub_1000530F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a2)
  {
    sub_100004FC8(&qword_100158BC0);
    v4 = static _DictionaryStorage.convert(_:capacity:)(a1, a2);
    v30 = v4;
    v5 = __CocoaDictionary.makeIterator()(a1);
    v6 = __CocoaDictionary.Iterator.next()();
    if (v6)
    {
      v8 = v6;
      v9 = v7;
      v10 = sub_100007BBC(0, (unint64_t *)&qword_10015C640, CSSearchQuery_ptr);
      do
      {
        v28 = v8;
        swift_dynamicCast(&v29, &v28, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
        v27 = v9;
        v21 = type metadata accessor for OSSignpostIntervalState(0);
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
        v4 = v30;
        v22 = *(_QWORD *)(v30 + 16);
        if (*(_QWORD *)(v30 + 24) <= v22)
        {
          sub_1000ECF9C(v22 + 1, 1);
          v4 = v30;
        }
        v12 = v28;
        v11 = v29;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
        v14 = v4 + 64;
        v15 = -1 << *(_BYTE *)(v4 + 32);
        v16 = result & ~v15;
        v17 = v16 >> 6;
        if (((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6))) != 0)
        {
          v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v23 = 0;
          v24 = (unint64_t)(63 - v15) >> 6;
          do
          {
            if (++v17 == v24 && (v23 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v25 = v17 == v24;
            if (v17 == v24)
              v17 = 0;
            v23 |= v25;
            v26 = *(_QWORD *)(v14 + 8 * v17);
          }
          while (v26 == -1);
          v18 = __clz(__rbit64(~v26)) + (v17 << 6);
        }
        *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
        v19 = 8 * v18;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + v19) = v11;
        *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v12;
        ++*(_QWORD *)(v4 + 16);
        v8 = __CocoaDictionary.Iterator.next()();
        v9 = v20;
      }
      while (v8);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  return v4;
}

Swift::Int sub_10005332C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  Swift::Int result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  Swift::Int v19;
  unint64_t v20;
  Swift::Int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  Swift::Int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::Int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  Swift::Int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  Swift::Int v46;
  uint64_t v47;
  Swift::Int v48;
  Swift::Int v49;
  uint64_t v50;
  uint64_t v51;
  Swift::Int v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  Swift::Int v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  BOOL v88;
  uint64_t v89;
  char v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  unint64_t v119;
  char *v120;
  _QWORD *v121;
  char *v122;
  _QWORD *v123;
  Swift::Int v124;
  uint64_t v125;
  Swift::Int v126;
  uint64_t v127;
  Swift::Int v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  Swift::Int v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;

  v2 = v1;
  v4 = type metadata accessor for SearchResultSection(0);
  v130 = *(_QWORD *)(v4 - 8);
  v131 = v4;
  v5 = __chkstk_darwin(v4);
  v127 = (uint64_t)&v122 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v137 = (uint64_t)&v122 - v8;
  v9 = __chkstk_darwin(v7);
  v134 = (uint64_t)&v122 - v10;
  __chkstk_darwin(v9);
  v133 = (uint64_t)&v122 - v11;
  v12 = a1[1];
  result = _minimumMergeRunLength(_:)(v12);
  if (result >= v12)
  {
    if (v12 < 0)
      goto LABEL_143;
    if (v12)
      return sub_100054848(0, v12, 1, a1);
    return result;
  }
  if (v12 >= 0)
    v14 = v12;
  else
    v14 = v12 + 1;
  if (v12 < -1)
    goto LABEL_151;
  v124 = result;
  if (v12 < 2)
  {
    v18 = (char *)_swiftEmptyArrayStorage;
    v129 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v130 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v130 + 80));
    v123 = _swiftEmptyArrayStorage;
    if (v12 != 1)
    {
      v20 = _swiftEmptyArrayStorage[2];
LABEL_106:
      if (v20 >= 2)
      {
        v114 = *a1;
        do
        {
          v115 = v20 - 2;
          if (v20 < 2)
            goto LABEL_138;
          if (!v114)
            goto LABEL_150;
          v108 = v18;
          v116 = *(_QWORD *)&v18[16 * v115 + 32];
          v117 = *(_QWORD *)&v18[16 * v20 + 24];
          sub_100054D1C(v114 + *(_QWORD *)(v130 + 72) * v116, v114 + *(_QWORD *)(v130 + 72) * *(_QWORD *)&v18[16 * v20 + 16], v114 + *(_QWORD *)(v130 + 72) * v117, v129);
          if (v2)
            goto LABEL_118;
          if (v117 < v116)
            goto LABEL_139;
          if ((swift_isUniquelyReferenced_nonNull_native(v18) & 1) == 0)
            v108 = sub_1000C19D4((uint64_t)v18);
          if (v115 >= *((_QWORD *)v108 + 2))
            goto LABEL_140;
          v118 = &v108[16 * v115 + 32];
          *(_QWORD *)v118 = v116;
          *((_QWORD *)v118 + 1) = v117;
          v119 = *((_QWORD *)v108 + 2);
          if (v20 > v119)
            goto LABEL_141;
          memmove(&v108[16 * v20 + 16], &v108[16 * v20 + 32], 16 * (v119 - v20));
          *((_QWORD *)v108 + 2) = v119 - 1;
          v20 = v119 - 1;
          v18 = v108;
        }
        while (v119 > 2);
      }
      v120 = v18;
LABEL_120:
      swift_bridgeObjectRelease(v120);
      v121 = v123;
      v123[2] = 0;
      return swift_bridgeObjectRelease(v121);
    }
  }
  else
  {
    v15 = v14 >> 1;
    v16 = static Array._allocateBufferUninitialized(minimumCapacity:)(v14 >> 1, v131);
    *(_QWORD *)(v16 + 16) = v15;
    v17 = *(unsigned __int8 *)(v130 + 80);
    v123 = (_QWORD *)v16;
    v129 = v16 + ((v17 + 32) & ~v17);
  }
  v19 = 0;
  v18 = (char *)_swiftEmptyArrayStorage;
  v136 = a1;
  while (1)
  {
    v21 = v19 + 1;
    v128 = v19;
    if (v19 + 1 >= v12)
    {
      v39 = v19 + 1;
      goto LABEL_58;
    }
    v125 = v2;
    v22 = *a1;
    v23 = *(_QWORD *)(v130 + 72);
    v24 = v133;
    sub_1000076F0(*a1 + v23 * v21, v133, type metadata accessor for SearchResultSection);
    v132 = v22;
    v135 = v12;
    v25 = v134;
    sub_1000076F0(v22 + v23 * v19, v134, type metadata accessor for SearchResultSection);
    sub_1000A1FBC(v24, v25);
    v27 = v26;
    v28 = v25;
    v29 = v135;
    sub_1000076B4(v28, type metadata accessor for SearchResultSection);
    sub_1000076B4(v24, type metadata accessor for SearchResultSection);
    v138 = v23;
    if (v19 + 2 >= v29)
    {
      v33 = v19 + 2;
      if ((v27 & 1) == 0)
        goto LABEL_37;
    }
    else
    {
      v30 = v23;
      v31 = v23 * v21;
      v32 = v132;
      v33 = v19 + 2;
      v34 = v30 * (v19 + 2);
      do
      {
        v35 = v133;
        sub_1000076F0(v32 + v34, v133, type metadata accessor for SearchResultSection);
        v36 = v134;
        sub_1000076F0(v32 + v31, v134, type metadata accessor for SearchResultSection);
        sub_1000A1FBC(v35, v36);
        v38 = v37;
        sub_1000076B4(v36, type metadata accessor for SearchResultSection);
        sub_1000076B4(v35, type metadata accessor for SearchResultSection);
        if (((v27 ^ v38) & 1) != 0)
        {
          v29 = v135;
          a1 = v136;
          v19 = v128;
          if ((v27 & 1) == 0)
            goto LABEL_37;
          goto LABEL_24;
        }
        v32 += v138;
        ++v33;
      }
      while (v135 != v33);
      v29 = v135;
      a1 = v136;
      v33 = v135;
      v19 = v128;
      if ((v27 & 1) == 0)
      {
LABEL_37:
        v39 = v33;
        break;
      }
    }
LABEL_24:
    v40 = v138;
    if (v33 < v19)
      goto LABEL_144;
    v39 = v33;
    if (v19 >= v33)
      break;
    v122 = v18;
    v41 = 0;
    v42 = v138 * (v33 - 1);
    v43 = v33 * v138;
    v44 = v19 * v138;
    v45 = v132;
    do
    {
      if (v19 != v39 + v41 - 1)
      {
        if (!v45)
          goto LABEL_149;
        sub_100007670(v45 + v44, v127, type metadata accessor for SearchResultSection);
        if (v44 < v42 || v45 + v44 >= (unint64_t)(v45 + v43))
        {
          swift_arrayInitWithTakeFrontToBack(v45 + v44, v45 + v42);
        }
        else if (v44 != v42)
        {
          swift_arrayInitWithTakeBackToFront(v45 + v44, v45 + v42);
        }
        sub_100007670(v127, v45 + v42, type metadata accessor for SearchResultSection);
        a1 = v136;
        v39 = v33;
        v40 = v138;
      }
      ++v19;
      --v41;
      v42 -= v40;
      v43 -= v40;
      v44 += v40;
    }
    while (v19 < v39 + v41);
    v18 = v122;
    v2 = v125;
    v19 = v128;
    v29 = v135;
    if (v39 < v135)
      goto LABEL_41;
LABEL_58:
    if (v39 < v19)
      goto LABEL_137;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v18);
    v135 = v39;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v18 = sub_1000C1710(0, *((_QWORD *)v18 + 2) + 1, 1, v18);
    v63 = *((_QWORD *)v18 + 2);
    v62 = *((_QWORD *)v18 + 3);
    v20 = v63 + 1;
    if (v63 >= v62 >> 1)
      v18 = sub_1000C1710((char *)(v62 > 1), v63 + 1, 1, v18);
    *((_QWORD *)v18 + 2) = v20;
    v64 = v18 + 32;
    v65 = &v18[16 * v63 + 32];
    v66 = v135;
    *(_QWORD *)v65 = v19;
    *((_QWORD *)v65 + 1) = v66;
    if (v63)
    {
      while (1)
      {
        v67 = v20 - 1;
        if (v20 >= 4)
        {
          v72 = &v64[16 * v20];
          v73 = *((_QWORD *)v72 - 8);
          v74 = *((_QWORD *)v72 - 7);
          v78 = __OFSUB__(v74, v73);
          v75 = v74 - v73;
          if (v78)
            goto LABEL_126;
          v77 = *((_QWORD *)v72 - 6);
          v76 = *((_QWORD *)v72 - 5);
          v78 = __OFSUB__(v76, v77);
          v70 = v76 - v77;
          v71 = v78;
          if (v78)
            goto LABEL_127;
          v79 = v20 - 2;
          v80 = &v64[16 * v20 - 32];
          v82 = *(_QWORD *)v80;
          v81 = *((_QWORD *)v80 + 1);
          v78 = __OFSUB__(v81, v82);
          v83 = v81 - v82;
          if (v78)
            goto LABEL_129;
          v78 = __OFADD__(v70, v83);
          v84 = v70 + v83;
          if (v78)
            goto LABEL_132;
          if (v84 >= v75)
          {
            v102 = &v64[16 * v67];
            v104 = *(_QWORD *)v102;
            v103 = *((_QWORD *)v102 + 1);
            v78 = __OFSUB__(v103, v104);
            v105 = v103 - v104;
            if (v78)
              goto LABEL_136;
            v95 = v70 < v105;
            goto LABEL_95;
          }
        }
        else
        {
          if (v20 != 3)
          {
            v96 = *((_QWORD *)v18 + 4);
            v97 = *((_QWORD *)v18 + 5);
            v78 = __OFSUB__(v97, v96);
            v89 = v97 - v96;
            v90 = v78;
            goto LABEL_89;
          }
          v69 = *((_QWORD *)v18 + 4);
          v68 = *((_QWORD *)v18 + 5);
          v78 = __OFSUB__(v68, v69);
          v70 = v68 - v69;
          v71 = v78;
        }
        if ((v71 & 1) != 0)
          goto LABEL_128;
        v79 = v20 - 2;
        v85 = &v64[16 * v20 - 32];
        v87 = *(_QWORD *)v85;
        v86 = *((_QWORD *)v85 + 1);
        v88 = __OFSUB__(v86, v87);
        v89 = v86 - v87;
        v90 = v88;
        if (v88)
          goto LABEL_131;
        v91 = &v64[16 * v67];
        v93 = *(_QWORD *)v91;
        v92 = *((_QWORD *)v91 + 1);
        v78 = __OFSUB__(v92, v93);
        v94 = v92 - v93;
        if (v78)
          goto LABEL_134;
        if (__OFADD__(v89, v94))
          goto LABEL_135;
        if (v89 + v94 >= v70)
        {
          v95 = v70 < v94;
LABEL_95:
          if (v95)
            v67 = v79;
          goto LABEL_97;
        }
LABEL_89:
        if ((v90 & 1) != 0)
          goto LABEL_130;
        v98 = &v64[16 * v67];
        v100 = *(_QWORD *)v98;
        v99 = *((_QWORD *)v98 + 1);
        v78 = __OFSUB__(v99, v100);
        v101 = v99 - v100;
        if (v78)
          goto LABEL_133;
        if (v101 < v89)
          goto LABEL_14;
LABEL_97:
        v106 = v67 - 1;
        if (v67 - 1 >= v20)
        {
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
          goto LABEL_146;
        }
        v107 = *a1;
        if (!*a1)
          goto LABEL_148;
        v108 = v18;
        v109 = &v64[16 * v106];
        v110 = *(_QWORD *)v109;
        v111 = &v64[16 * v67];
        v112 = *((_QWORD *)v111 + 1);
        sub_100054D1C(v107 + *(_QWORD *)(v130 + 72) * *(_QWORD *)v109, v107 + *(_QWORD *)(v130 + 72) * *(_QWORD *)v111, v107 + *(_QWORD *)(v130 + 72) * v112, v129);
        if (v2)
        {
LABEL_118:
          v120 = v108;
          goto LABEL_120;
        }
        if (v112 < v110)
          goto LABEL_123;
        if (v67 > *((_QWORD *)v108 + 2))
          goto LABEL_124;
        *(_QWORD *)v109 = v110;
        *(_QWORD *)&v64[16 * v106 + 8] = v112;
        v113 = *((_QWORD *)v108 + 2);
        if (v67 >= v113)
          goto LABEL_125;
        v18 = v108;
        v20 = v113 - 1;
        memmove(&v64[16 * v67], v111 + 16, 16 * (v113 - 1 - v67));
        *((_QWORD *)v108 + 2) = v113 - 1;
        a1 = v136;
        if (v113 <= 2)
          goto LABEL_14;
      }
    }
    v20 = 1;
LABEL_14:
    v12 = a1[1];
    v19 = v135;
    if (v135 >= v12)
      goto LABEL_106;
  }
  v2 = v125;
  if (v39 >= v29)
    goto LABEL_58;
LABEL_41:
  if (__OFSUB__(v39, v19))
    goto LABEL_142;
  if (v39 - v19 >= v124)
    goto LABEL_58;
  if (__OFADD__(v19, v124))
    goto LABEL_145;
  if (v19 + v124 >= v29)
    v46 = v29;
  else
    v46 = v19 + v124;
  if (v46 >= v19)
  {
    if (v39 != v46)
    {
      v122 = v18;
      v125 = v2;
      v126 = v46;
      v47 = *(_QWORD *)(v130 + 72);
      v138 = v47 * (v39 - 1);
      v132 = v47;
      v48 = v39 * v47;
      do
      {
        v50 = 0;
        v135 = v39;
        while (1)
        {
          v51 = *a1;
          v52 = v48;
          v53 = v48 + v50 + *a1;
          v54 = a1;
          v55 = v133;
          sub_1000076F0(v53, v133, type metadata accessor for SearchResultSection);
          v56 = v134;
          sub_1000076F0(v138 + v50 + v51, v134, type metadata accessor for SearchResultSection);
          sub_1000A1FBC(v55, v56);
          LOBYTE(v51) = v57;
          sub_1000076B4(v56, type metadata accessor for SearchResultSection);
          sub_1000076B4(v55, type metadata accessor for SearchResultSection);
          if ((v51 & 1) == 0)
            break;
          v58 = *v54;
          if (!*v54)
            goto LABEL_147;
          v48 = v52;
          v59 = v58 + v52 + v50;
          v60 = v58 + v138 + v50;
          sub_100007670(v59, v137, type metadata accessor for SearchResultSection);
          swift_arrayInitWithTakeFrontToBack(v59, v60);
          sub_100007670(v137, v60, type metadata accessor for SearchResultSection);
          v50 -= v132;
          ++v19;
          v49 = v135;
          a1 = v136;
          if (v135 == v19)
            goto LABEL_51;
        }
        v49 = v135;
        a1 = v54;
        v48 = v52;
LABEL_51:
        v39 = v49 + 1;
        v138 += v132;
        v48 += v132;
        v19 = v128;
      }
      while (v39 != v126);
      v39 = v126;
      v2 = v125;
      v18 = v122;
    }
    goto LABEL_58;
  }
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  __break(1u);
LABEL_151:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

Swift::Int sub_100053CFC(Swift::Int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  Swift::Int v23;
  Swift::Int result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  Swift::Int v30;
  unint64_t v31;
  Swift::Int v32;
  Swift::Int v33;
  Swift::Int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v48;
  Swift::Int v49;
  uint64_t v50;
  Swift::Int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  int v64;
  _BOOL4 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  Swift::Int v69;
  uint64_t v70;
  uint64_t v71;
  Swift::Int v72;
  uint64_t v73;
  Swift::Int v74;
  unint64_t v75;
  Swift::Int v76;
  uint64_t v77;
  Swift::Int v78;
  uint64_t v79;
  Swift::Int v80;
  Swift::Int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  char v92;
  Swift::Int v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  char *v98;
  char *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  BOOL v111;
  unint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  BOOL v121;
  uint64_t v122;
  char v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  BOOL v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  Swift::Int v139;
  unint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  char *v148;
  Swift::Int v149;
  unint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  unint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  Swift::Int v158;
  _QWORD *v159;
  Swift::Int v160;
  char *v161;
  char *v162;
  char *v163;
  Swift::Int v164;
  Swift::Int v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  Swift::Int *v178;

  v2 = v1;
  v174 = type metadata accessor for SearchResult(0);
  v170 = *(_QWORD *)(v174 - 8);
  v4 = __chkstk_darwin(v174);
  v166 = (uint64_t)&v157 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v175 = (uint64_t)&v157 - v7;
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v157 - v9;
  v11 = __chkstk_darwin(v8);
  v176 = (uint64_t)&v157 - v12;
  v13 = __chkstk_darwin(v11);
  v167 = (uint64_t)&v157 - v14;
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v157 - v16;
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v157 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)&v157 - v21;
  v178 = a1;
  v23 = a1[1];
  result = _minimumMergeRunLength(_:)(v23);
  if (result >= v23)
  {
    if (v23 < 0)
      goto LABEL_165;
    if (v23)
      return sub_100054A7C(0, v23, 1, v178);
    return result;
  }
  if (v23 >= 0)
    v25 = v23;
  else
    v25 = v23 + 1;
  if (v23 < -1)
    goto LABEL_173;
  v172 = v10;
  v162 = v22;
  v163 = v20;
  v160 = result;
  if (v23 < 2)
  {
    v29 = (char *)_swiftEmptyArrayStorage;
    v169 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v170 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v170 + 80));
    v159 = _swiftEmptyArrayStorage;
    if (v23 != 1)
    {
      v31 = _swiftEmptyArrayStorage[2];
      if (v31 >= 2)
        goto LABEL_129;
LABEL_141:
      v148 = v29;
LABEL_142:
      swift_bridgeObjectRelease(v148);
      v156 = v159;
      v159[2] = 0;
      return swift_bridgeObjectRelease(v156);
    }
    v171 = v1;
  }
  else
  {
    v171 = v1;
    v26 = v25 >> 1;
    v27 = static Array._allocateBufferUninitialized(minimumCapacity:)(v25 >> 1, v174);
    *(_QWORD *)(v27 + 16) = v26;
    v28 = *(unsigned __int8 *)(v170 + 80);
    v159 = (_QWORD *)v27;
    v169 = v27 + ((v28 + 32) & ~v28);
  }
  v30 = 0;
  v29 = (char *)_swiftEmptyArrayStorage;
  v168 = v17;
LABEL_16:
  v32 = v30;
  v33 = v30 + 1;
  if (v30 + 1 >= v23)
  {
    ++v30;
    v48 = v171;
    goto LABEL_80;
  }
  v34 = *v178;
  v35 = *(_QWORD *)(v170 + 72);
  v36 = (uint64_t)v162;
  sub_1000076F0(*v178 + v35 * v33, (uint64_t)v162, type metadata accessor for SearchResult);
  v164 = v34;
  v177 = v35;
  v37 = v34 + v35 * v32;
  v38 = (uint64_t)v163;
  sub_1000076F0(v37, (uint64_t)v163, type metadata accessor for SearchResult);
  v39 = *(int *)(v174 + 32);
  v40 = *(_QWORD *)(v36 + v39);
  v41 = *(_QWORD *)(v38 + v39);
  if (v40 == v41)
  {
    v42 = *(int *)(v174 + 24);
    v43 = *(_QWORD *)(v36 + v42);
    v44 = *(_QWORD *)(v36 + v42 + 8);
    v45 = (_QWORD *)(v38 + v42);
    v46 = v45[1];
    if (v43 == *v45 && v44 == v46)
      LODWORD(v173) = 0;
    else
      LODWORD(v173) = _stringCompareWithSmolCheck(_:_:expecting:)(v43, v44, *v45, v46, 1);
  }
  else
  {
    LODWORD(v173) = v41 < v40;
  }
  sub_1000076B4((uint64_t)v163, type metadata accessor for SearchResult);
  sub_1000076B4((uint64_t)v162, type metadata accessor for SearchResult);
  v30 = v32 + 2;
  if (v32 + 2 < v23)
  {
    v49 = v23;
    v161 = v29;
    v50 = v177 * v33;
    v51 = v164;
    v52 = v177 * v30;
    while (1)
    {
      sub_1000076F0(v51 + v52, (uint64_t)v17, type metadata accessor for SearchResult);
      v53 = v167;
      sub_1000076F0(v51 + v50, v167, type metadata accessor for SearchResult);
      v54 = v53;
      v55 = *(int *)(v174 + 32);
      v56 = *(_QWORD *)&v17[v55];
      v57 = *(_QWORD *)(v53 + v55);
      if (v56 == v57)
      {
        v58 = *(int *)(v174 + 24);
        v59 = *(_QWORD *)&v17[v58];
        v60 = *(_QWORD *)&v17[v58 + 8];
        v61 = (_QWORD *)(v53 + v58);
        v62 = v61[1];
        if (v59 == *v61 && v60 == v62)
        {
          v65 = 0;
        }
        else
        {
          v64 = _stringCompareWithSmolCheck(_:_:expecting:)(v59, v60, *v61, v62, 1);
          v54 = v167;
          v65 = v64;
        }
      }
      else
      {
        v65 = v57 < v56;
      }
      sub_1000076B4(v54, type metadata accessor for SearchResult);
      sub_1000076B4((uint64_t)v17, type metadata accessor for SearchResult);
      if (((v173 ^ v65) & 1) != 0)
        break;
      v51 += v177;
      if (v49 == ++v30)
      {
        v23 = v49;
        v30 = v49;
        v29 = v161;
        goto LABEL_40;
      }
    }
    v29 = v161;
    v23 = v49;
  }
LABEL_40:
  v48 = v171;
  if ((v173 & 1) == 0)
    goto LABEL_53;
  if (v30 < v32)
    goto LABEL_166;
  if (v32 < v30)
  {
    v158 = v23;
    v161 = v29;
    v66 = 0;
    v67 = v177 * (v30 - 1);
    v68 = v30 * v177;
    v69 = v32;
    v70 = v32 * v177;
    v71 = (uint64_t)v172;
    do
    {
      if (v69 != v30 + v66 - 1)
      {
        v74 = v164;
        if (!v164)
          goto LABEL_171;
        v75 = v164 + v70;
        v173 = v164 + v67;
        sub_100007670(v164 + v70, v166, type metadata accessor for SearchResult);
        if (v70 < v67 || v75 >= v74 + v68)
        {
          v72 = v74 + v70;
          v73 = v173;
          swift_arrayInitWithTakeFrontToBack(v72, v173);
        }
        else
        {
          v73 = v173;
          if (v70 != v67)
            swift_arrayInitWithTakeBackToFront(v75, v173);
        }
        sub_100007670(v166, v73, type metadata accessor for SearchResult);
        v71 = (uint64_t)v172;
      }
      ++v69;
      --v66;
      v67 -= v177;
      v68 -= v177;
      v70 += v177;
    }
    while (v69 < v30 + v66);
    v29 = v161;
    v17 = v168;
    v48 = v171;
    v23 = v158;
    if (v30 >= v158)
      goto LABEL_80;
  }
  else
  {
LABEL_53:
    v71 = (uint64_t)v172;
    if (v30 >= v23)
      goto LABEL_80;
  }
  if (__OFSUB__(v30, v32))
    goto LABEL_164;
  if (v30 - v32 >= v160)
    goto LABEL_80;
  if (__OFADD__(v32, v160))
    goto LABEL_167;
  if (v32 + v160 >= v23)
    v76 = v23;
  else
    v76 = v32 + v160;
  if (v76 >= v32)
  {
    if (v30 == v76)
      goto LABEL_80;
    v161 = v29;
    v171 = v48;
    v77 = *(_QWORD *)(v170 + 72);
    v177 = v77 * (v30 - 1);
    v173 = v77;
    v78 = v30 * v77;
    v164 = v76;
    v165 = v32;
LABEL_67:
    v79 = 0;
    v80 = v32;
    while (1)
    {
      v81 = *v178;
      v82 = v176;
      sub_1000076F0(v78 + v79 + *v178, v176, type metadata accessor for SearchResult);
      sub_1000076F0(v177 + v79 + v81, v71, type metadata accessor for SearchResult);
      v83 = *(int *)(v174 + 32);
      v84 = *(_QWORD *)(v82 + v83);
      v85 = *(_QWORD *)(v71 + v83);
      if (v84 == v85)
      {
        v86 = *(int *)(v174 + 24);
        v87 = *(_QWORD *)(v82 + v86);
        v88 = *(_QWORD *)(v82 + v86 + 8);
        v89 = (_QWORD *)(v71 + v86);
        v90 = v89[1];
        if (v87 == *v89 && v88 == v90)
        {
          sub_1000076B4(v71, type metadata accessor for SearchResult);
          sub_1000076B4(v82, type metadata accessor for SearchResult);
LABEL_66:
          ++v30;
          v177 += v173;
          v78 += v173;
          v32 = v165;
          if (v30 != v164)
            goto LABEL_67;
          v30 = v164;
          v48 = v171;
          v29 = v161;
          v17 = v168;
LABEL_80:
          if (v30 < v32)
            goto LABEL_159;
          if ((swift_isUniquelyReferenced_nonNull_native(v29) & 1) == 0)
            v29 = sub_1000C1710(0, *((_QWORD *)v29 + 2) + 1, 1, v29);
          v97 = *((_QWORD *)v29 + 2);
          v96 = *((_QWORD *)v29 + 3);
          v31 = v97 + 1;
          v171 = v48;
          if (v97 >= v96 >> 1)
            v29 = sub_1000C1710((char *)(v96 > 1), v97 + 1, 1, v29);
          *((_QWORD *)v29 + 2) = v31;
          v98 = v29 + 32;
          v99 = &v29[16 * v97 + 32];
          *(_QWORD *)v99 = v32;
          *((_QWORD *)v99 + 1) = v30;
          if (v97)
          {
LABEL_86:
            v100 = v31 - 1;
            if (v31 >= 4)
            {
              v105 = &v98[16 * v31];
              v106 = *((_QWORD *)v105 - 8);
              v107 = *((_QWORD *)v105 - 7);
              v111 = __OFSUB__(v107, v106);
              v108 = v107 - v106;
              if (v111)
                goto LABEL_148;
              v110 = *((_QWORD *)v105 - 6);
              v109 = *((_QWORD *)v105 - 5);
              v111 = __OFSUB__(v109, v110);
              v103 = v109 - v110;
              v104 = v111;
              if (v111)
                goto LABEL_149;
              v112 = v31 - 2;
              v113 = &v98[16 * v31 - 32];
              v115 = *(_QWORD *)v113;
              v114 = *((_QWORD *)v113 + 1);
              v111 = __OFSUB__(v114, v115);
              v116 = v114 - v115;
              if (v111)
                goto LABEL_151;
              v111 = __OFADD__(v103, v116);
              v117 = v103 + v116;
              if (v111)
                goto LABEL_154;
              if (v117 >= v108)
              {
                v135 = &v98[16 * v100];
                v137 = *(_QWORD *)v135;
                v136 = *((_QWORD *)v135 + 1);
                v111 = __OFSUB__(v136, v137);
                v138 = v136 - v137;
                if (v111)
                  goto LABEL_158;
                v128 = v103 < v138;
              }
              else
              {
LABEL_99:
                if ((v104 & 1) != 0)
                  goto LABEL_150;
                v112 = v31 - 2;
                v118 = &v98[16 * v31 - 32];
                v120 = *(_QWORD *)v118;
                v119 = *((_QWORD *)v118 + 1);
                v121 = __OFSUB__(v119, v120);
                v122 = v119 - v120;
                v123 = v121;
                if (v121)
                  goto LABEL_153;
                v124 = &v98[16 * v100];
                v126 = *(_QWORD *)v124;
                v125 = *((_QWORD *)v124 + 1);
                v111 = __OFSUB__(v125, v126);
                v127 = v125 - v126;
                if (v111)
                  goto LABEL_156;
                if (__OFADD__(v122, v127))
                  goto LABEL_157;
                if (v122 + v127 < v103)
                  goto LABEL_111;
                v128 = v103 < v127;
              }
              if (v128)
                v100 = v112;
            }
            else
            {
              if (v31 == 3)
              {
                v102 = *((_QWORD *)v29 + 4);
                v101 = *((_QWORD *)v29 + 5);
                v111 = __OFSUB__(v101, v102);
                v103 = v101 - v102;
                v104 = v111;
                goto LABEL_99;
              }
              v129 = *((_QWORD *)v29 + 4);
              v130 = *((_QWORD *)v29 + 5);
              v111 = __OFSUB__(v130, v129);
              v122 = v130 - v129;
              v123 = v111;
LABEL_111:
              if ((v123 & 1) != 0)
                goto LABEL_152;
              v131 = &v98[16 * v100];
              v133 = *(_QWORD *)v131;
              v132 = *((_QWORD *)v131 + 1);
              v111 = __OFSUB__(v132, v133);
              v134 = v132 - v133;
              if (v111)
                goto LABEL_155;
              if (v134 < v122)
                goto LABEL_15;
            }
            v139 = v30;
            v140 = v100 - 1;
            if (v100 - 1 >= v31)
            {
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
LABEL_147:
              __break(1u);
LABEL_148:
              __break(1u);
LABEL_149:
              __break(1u);
LABEL_150:
              __break(1u);
LABEL_151:
              __break(1u);
LABEL_152:
              __break(1u);
LABEL_153:
              __break(1u);
LABEL_154:
              __break(1u);
LABEL_155:
              __break(1u);
LABEL_156:
              __break(1u);
LABEL_157:
              __break(1u);
LABEL_158:
              __break(1u);
LABEL_159:
              __break(1u);
LABEL_160:
              __break(1u);
LABEL_161:
              __break(1u);
LABEL_162:
              __break(1u);
LABEL_163:
              __break(1u);
LABEL_164:
              __break(1u);
LABEL_165:
              __break(1u);
LABEL_166:
              __break(1u);
LABEL_167:
              __break(1u);
              break;
            }
            if (!*v178)
              goto LABEL_170;
            v141 = v29;
            v142 = &v98[16 * v140];
            v143 = *(_QWORD *)v142;
            v144 = &v98[16 * v100];
            v145 = *((_QWORD *)v144 + 1);
            v146 = v171;
            sub_1000551BC(*v178 + *(_QWORD *)(v170 + 72) * *(_QWORD *)v142, *v178 + *(_QWORD *)(v170 + 72) * *(_QWORD *)v144, *v178 + *(_QWORD *)(v170 + 72) * v145, v169);
            v171 = v146;
            if (v146)
            {
LABEL_127:
              v148 = v141;
              goto LABEL_142;
            }
            if (v145 < v143)
              goto LABEL_145;
            if (v100 > *((_QWORD *)v141 + 2))
              goto LABEL_146;
            *(_QWORD *)v142 = v143;
            *(_QWORD *)&v98[16 * v140 + 8] = v145;
            v147 = *((_QWORD *)v141 + 2);
            if (v100 >= v147)
              goto LABEL_147;
            v29 = v141;
            v31 = v147 - 1;
            memmove(&v98[16 * v100], v144 + 16, 16 * (v147 - 1 - v100));
            *((_QWORD *)v141 + 2) = v147 - 1;
            v128 = v147 > 2;
            v17 = v168;
            v30 = v139;
            if (!v128)
              goto LABEL_15;
            goto LABEL_86;
          }
          v31 = 1;
LABEL_15:
          v23 = v178[1];
          if (v30 >= v23)
          {
            v2 = v171;
            if (v31 < 2)
              goto LABEL_141;
LABEL_129:
            v149 = *v178;
            while (1)
            {
              v150 = v31 - 2;
              if (v31 < 2)
                goto LABEL_160;
              if (!v149)
                goto LABEL_172;
              v141 = v29;
              v151 = v29 + 32;
              v152 = *(_QWORD *)&v29[16 * v150 + 32];
              v153 = *(_QWORD *)&v29[16 * v31 + 24];
              sub_1000551BC(v149 + *(_QWORD *)(v170 + 72) * v152, v149 + *(_QWORD *)(v170 + 72) * *(_QWORD *)&v151[16 * v31 - 16], v149 + *(_QWORD *)(v170 + 72) * v153, v169);
              if (v2)
                goto LABEL_127;
              if (v153 < v152)
                goto LABEL_161;
              if ((swift_isUniquelyReferenced_nonNull_native(v141) & 1) == 0)
                v141 = sub_1000C19D4((uint64_t)v141);
              if (v150 >= *((_QWORD *)v141 + 2))
                goto LABEL_162;
              v154 = &v141[16 * v150 + 32];
              *(_QWORD *)v154 = v152;
              *((_QWORD *)v154 + 1) = v153;
              v155 = *((_QWORD *)v141 + 2);
              if (v31 > v155)
                goto LABEL_163;
              v29 = v141;
              memmove(&v141[16 * v31 + 16], &v141[16 * v31 + 32], 16 * (v155 - v31));
              *((_QWORD *)v141 + 2) = v155 - 1;
              v31 = v155 - 1;
              if (v155 <= 2)
                goto LABEL_141;
            }
          }
          goto LABEL_16;
        }
        v92 = _stringCompareWithSmolCheck(_:_:expecting:)(v87, v88, *v89, v90, 1);
      }
      else
      {
        v92 = v85 < v84;
      }
      sub_1000076B4(v71, type metadata accessor for SearchResult);
      sub_1000076B4(v176, type metadata accessor for SearchResult);
      if ((v92 & 1) == 0)
        goto LABEL_66;
      v93 = *v178;
      if (!*v178)
        goto LABEL_169;
      v94 = v93 + v78 + v79;
      v95 = v93 + v177 + v79;
      sub_100007670(v94, v175, type metadata accessor for SearchResult);
      swift_arrayInitWithTakeFrontToBack(v94, v95);
      sub_100007670(v175, v95, type metadata accessor for SearchResult);
      v71 = (uint64_t)v172;
      v79 -= v173;
      if (v30 == ++v80)
        goto LABEL_66;
    }
  }
  __break(1u);
LABEL_169:
  __break(1u);
LABEL_170:
  __break(1u);
LABEL_171:
  __break(1u);
LABEL_172:
  __break(1u);
LABEL_173:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

uint64_t sub_100054848(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v27 = a1;
  v28 = type metadata accessor for SearchResultSection(0);
  v7 = __chkstk_darwin(v28);
  v32 = (uint64_t)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v29 = (uint64_t)&v25 - v10;
  result = __chkstk_darwin(v9);
  v14 = (char *)&v25 - v13;
  v31 = a3;
  v26 = a2;
  if (a3 != a2)
  {
    v15 = *(_QWORD *)(v12 + 72);
    v34 = v15 * (v31 - 1);
    v30 = v15;
    v33 = v15 * v31;
LABEL_5:
    v16 = 0;
    v17 = v27;
    while (1)
    {
      v18 = *a4;
      sub_1000076F0(v33 + v16 + *a4, (uint64_t)v14, type metadata accessor for SearchResultSection);
      v19 = v29;
      sub_1000076F0(v34 + v16 + v18, v29, type metadata accessor for SearchResultSection);
      sub_1000A1FBC((uint64_t)v14, v19);
      LOBYTE(v18) = v20;
      sub_1000076B4(v19, type metadata accessor for SearchResultSection);
      result = sub_1000076B4((uint64_t)v14, type metadata accessor for SearchResultSection);
      if ((v18 & 1) == 0)
      {
LABEL_4:
        v34 += v30;
        v33 += v30;
        if (++v31 == v26)
          return result;
        goto LABEL_5;
      }
      v21 = *a4;
      if (!*a4)
        break;
      v22 = a4;
      v23 = v21 + v33 + v16;
      v24 = v21 + v34 + v16;
      sub_100007670(v23, v32, type metadata accessor for SearchResultSection);
      swift_arrayInitWithTakeFrontToBack(v23, v24);
      result = sub_100007670(v32, v24, type metadata accessor for SearchResultSection);
      v16 -= v30;
      ++v17;
      a4 = v22;
      if (v31 == v17)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100054A7C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v38 = a1;
  v7 = type metadata accessor for SearchResult(0);
  v8 = __chkstk_darwin(v7);
  v42 = (uint64_t)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  result = __chkstk_darwin(v10);
  v15 = (char *)&v36 - v13;
  v41 = a3;
  v37 = a2;
  if (a3 != a2)
  {
    v16 = v14;
    v17 = *(_QWORD *)(v12 + 72);
    v45 = v17 * (v41 - 1);
    v40 = v17;
    v44 = v17 * v41;
    v39 = (char *)&v36 - v13;
LABEL_6:
    v18 = 0;
    v19 = v38;
    while (1)
    {
      v20 = *a4;
      sub_1000076F0(v44 + v18 + *a4, (uint64_t)v15, type metadata accessor for SearchResult);
      v43 = v45 + v18;
      sub_1000076F0(v45 + v18 + v20, v16, type metadata accessor for SearchResult);
      v21 = *(int *)(v7 + 32);
      v22 = *(_QWORD *)&v15[v21];
      v23 = *(_QWORD *)(v16 + v21);
      if (v22 == v23)
      {
        v24 = *(int *)(v7 + 24);
        v25 = *(_QWORD *)&v15[v24];
        v26 = *(_QWORD *)&v15[v24 + 8];
        v27 = (_QWORD *)(v16 + v24);
        v28 = v27[1];
        if (v25 == *v27 && v26 == v28)
        {
          sub_1000076B4(v16, type metadata accessor for SearchResult);
          result = sub_1000076B4((uint64_t)v15, type metadata accessor for SearchResult);
LABEL_5:
          v45 += v40;
          v44 += v40;
          if (++v41 == v37)
            return result;
          goto LABEL_6;
        }
        v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v26, *v27, v28, 1);
      }
      else
      {
        v30 = v23 < v22;
      }
      sub_1000076B4(v16, type metadata accessor for SearchResult);
      result = sub_1000076B4((uint64_t)v15, type metadata accessor for SearchResult);
      if ((v30 & 1) == 0)
        goto LABEL_5;
      v31 = *a4;
      if (!*a4)
        break;
      v32 = v16;
      v33 = a4;
      v34 = v31 + v44 + v18;
      v35 = v31 + v45 + v18;
      sub_100007670(v34, v42, type metadata accessor for SearchResult);
      swift_arrayInitWithTakeFrontToBack(v34, v35);
      result = sub_100007670(v42, v35, type metadata accessor for SearchResult);
      v18 -= v40;
      ++v19;
      a4 = v33;
      v16 = v32;
      v15 = v39;
      if (v41 == v19)
        goto LABEL_5;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100054D1C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  BOOL v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t result;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;

  v46 = type metadata accessor for SearchResultSection(0);
  v8 = __chkstk_darwin(v46);
  v47 = (uint64_t)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v43 - v10;
  v13 = *(_QWORD *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (a2 - a1 == 0x8000000000000000 && v13 == -1)
    goto LABEL_62;
  v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v13 == -1)
    goto LABEL_63;
  v15 = (uint64_t)(a2 - a1) / v13;
  v50 = a1;
  v49 = a4;
  v16 = v14 / v13;
  if (v15 >= v14 / v13)
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
      v18 = v16 * v13;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2);
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4, a2);
      }
      v26 = a4 + v18;
      v48 = a4 + v18;
      v50 = a2;
      if (v18 >= 1 && a1 < a2)
      {
        v28 = -v13;
        v44 = a4;
        v45 = a1;
        do
        {
          v29 = a3 + v28;
          sub_1000076F0(v26 + v28, (uint64_t)v11, type metadata accessor for SearchResultSection);
          v30 = a2 + v28;
          v31 = a3;
          v32 = (uint64_t)v11;
          v33 = v47;
          sub_1000076F0(a2 + v28, v47, type metadata accessor for SearchResultSection);
          sub_1000A1FBC(v32, v33);
          v35 = v34;
          v36 = v33;
          v11 = (char *)v32;
          sub_1000076B4(v36, type metadata accessor for SearchResultSection);
          sub_1000076B4(v32, type metadata accessor for SearchResultSection);
          if ((v35 & 1) != 0)
          {
            if (v31 < a2 || v29 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack(v29, a2 + v28);
              v39 = v44;
              v38 = v45;
            }
            else
            {
              v37 = v31 == a2;
              v39 = v44;
              v38 = v45;
              if (!v37)
                swift_arrayInitWithTakeBackToFront(v29, a2 + v28);
            }
            v50 += v28;
          }
          else
          {
            v40 = v48;
            v41 = v48 + v28;
            v48 += v28;
            if (v31 < v40 || v29 >= v40)
            {
              swift_arrayInitWithTakeFrontToBack(v29, v41);
              v30 = a2;
              v39 = v44;
              v38 = v45;
            }
            else
            {
              v37 = v31 == v40;
              v39 = v44;
              v38 = v45;
              if (!v37)
                swift_arrayInitWithTakeBackToFront(v29, v41);
              v30 = a2;
            }
          }
          v26 = v48;
          if (v48 <= v39)
            break;
          a2 = v30;
          a3 = v29;
        }
        while (v30 > v38);
      }
      goto LABEL_60;
    }
  }
  else if ((v15 & 0x8000000000000000) == 0)
  {
    v17 = v15 * v13;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1);
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4, a1);
    }
    v45 = a4 + v17;
    v48 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      v20 = v47;
      do
      {
        sub_1000076F0(a2, (uint64_t)v11, type metadata accessor for SearchResultSection);
        sub_1000076F0(a4, v20, type metadata accessor for SearchResultSection);
        sub_1000A1FBC((uint64_t)v11, v20);
        v22 = v21;
        sub_1000076B4(v20, type metadata accessor for SearchResultSection);
        sub_1000076B4((uint64_t)v11, type metadata accessor for SearchResultSection);
        v23 = v50;
        if ((v22 & 1) != 0)
        {
          v24 = a2 + v13;
          if (v50 < a2 || v50 >= v24)
          {
            swift_arrayInitWithTakeFrontToBack(v50, a2);
          }
          else if (v50 == a2)
          {
            v23 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront(v50, a2);
          }
        }
        else
        {
          v25 = v49 + v13;
          if (v50 < v49 || v50 >= v25)
          {
            swift_arrayInitWithTakeFrontToBack(v50, v49);
          }
          else if (v50 != v49)
          {
            swift_arrayInitWithTakeBackToFront(v50, v49);
          }
          v49 = v25;
          v24 = a2;
        }
        v50 = v23 + v13;
        a4 = v49;
        if (v49 >= v45)
          break;
        a2 = v24;
      }
      while (v24 < a3);
    }
LABEL_60:
    sub_1000C1808(&v50, &v49, (uint64_t *)&v48);
    return 1;
  }
LABEL_64:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000551BC(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t result;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;

  v8 = type metadata accessor for SearchResult(0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v61 - v13;
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v61 - v16;
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v61 - v19;
  v63 = *(char **)(v21 + 72);
  if (!v63)
  {
    __break(1u);
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
    goto LABEL_79;
  }
  if (a2 - a1 == 0x8000000000000000 && v63 == (char *)-1)
    goto LABEL_77;
  v22 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v63 == (char *)-1)
    goto LABEL_78;
  v23 = (uint64_t)(a2 - a1) / (uint64_t)v63;
  v67 = (char *)a1;
  v66 = a4;
  v24 = v22 / (uint64_t)v63;
  v64 = v18;
  if (v23 >= v22 / (uint64_t)v63)
  {
    if ((v24 & 0x8000000000000000) == 0)
    {
      v26 = v24 * (_QWORD)v63;
      if (a4 < a2 || a2 + v26 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2);
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4, a2);
      }
      v42 = a4 + v26;
      v65 = a4 + v26;
      v67 = (char *)a2;
      if (v26 >= 1 && a1 < a2)
      {
        v44 = -(uint64_t)v63;
        v62 = a1;
        v63 = v14;
        do
        {
          sub_1000076F0(v42 + v44, (uint64_t)v14, type metadata accessor for SearchResult);
          v45 = a2 + v44;
          sub_1000076F0(a2 + v44, (uint64_t)v11, type metadata accessor for SearchResult);
          v46 = *(int *)(v64 + 32);
          v47 = *(_QWORD *)&v14[v46];
          v48 = *(_QWORD *)&v11[v46];
          if (v47 == v48)
          {
            v49 = *(int *)(v64 + 24);
            v50 = *(_QWORD *)&v14[v49];
            v51 = *(_QWORD *)&v14[v49 + 8];
            v52 = &v11[v49];
            v53 = *((_QWORD *)v52 + 1);
            if (v50 == *(_QWORD *)v52 && v51 == v53)
              v55 = 0;
            else
              v55 = _stringCompareWithSmolCheck(_:_:expecting:)(v50, v51, *(_QWORD *)v52, v53, 1);
          }
          else
          {
            v55 = v48 < v47;
          }
          v56 = a3 + v44;
          sub_1000076B4((uint64_t)v11, type metadata accessor for SearchResult);
          sub_1000076B4((uint64_t)v63, type metadata accessor for SearchResult);
          if ((v55 & 1) != 0)
          {
            if (a3 < a2 || v56 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack(a3 + v44, a2 + v44);
              v57 = v62;
            }
            else
            {
              v57 = v62;
              if (a3 != a2)
                swift_arrayInitWithTakeBackToFront(a3 + v44, a2 + v44);
            }
            v67 += v44;
          }
          else
          {
            v58 = v65;
            v59 = v65 + v44;
            v65 += v44;
            if (a3 < v58 || v56 >= v58)
            {
              swift_arrayInitWithTakeFrontToBack(a3 + v44, v59);
              v45 = a2;
              v57 = v62;
            }
            else
            {
              v57 = v62;
              if (a3 != v58)
                swift_arrayInitWithTakeBackToFront(a3 + v44, v59);
              v45 = a2;
            }
          }
          v14 = v63;
          v42 = v65;
          if (v65 <= a4)
            break;
          a2 = v45;
          a3 += v44;
        }
        while (v45 > v57);
      }
LABEL_75:
      sub_1000C1814((unint64_t *)&v67, &v66, (uint64_t *)&v65);
      return 1;
    }
  }
  else if ((v23 & 0x8000000000000000) == 0)
  {
    v25 = v23 * (_QWORD)v63;
    if (a4 < a1 || a1 + v25 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1);
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4, a1);
    }
    v27 = a4 + v25;
    v65 = a4 + v25;
    if (v25 >= 1 && a2 < a3)
    {
      while (1)
      {
        sub_1000076F0(a2, (uint64_t)v20, type metadata accessor for SearchResult);
        sub_1000076F0(a4, (uint64_t)v17, type metadata accessor for SearchResult);
        v29 = *(int *)(v64 + 32);
        v30 = *(_QWORD *)&v20[v29];
        v31 = *(_QWORD *)&v17[v29];
        if (v30 == v31)
        {
          v32 = *(int *)(v64 + 24);
          v33 = *(_QWORD *)&v20[v32];
          v34 = *(_QWORD *)&v20[v32 + 8];
          v35 = &v17[v32];
          v36 = *((_QWORD *)v35 + 1);
          if (v33 == *(_QWORD *)v35 && v34 == v36)
          {
            sub_1000076B4((uint64_t)v17, type metadata accessor for SearchResult);
            sub_1000076B4((uint64_t)v20, type metadata accessor for SearchResult);
LABEL_35:
            v39 = (unint64_t)v67;
            v41 = (unint64_t)&v63[v66];
            if ((unint64_t)v67 < v66 || (unint64_t)v67 >= v41)
            {
              swift_arrayInitWithTakeFrontToBack(v67, v66);
            }
            else if (v67 != (char *)v66)
            {
              swift_arrayInitWithTakeBackToFront(v67, v66);
            }
            v66 = v41;
            v40 = a2;
            goto LABEL_43;
          }
          v38 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v34, *(_QWORD *)v35, v36, 1);
        }
        else
        {
          v38 = v31 < v30;
        }
        sub_1000076B4((uint64_t)v17, type metadata accessor for SearchResult);
        sub_1000076B4((uint64_t)v20, type metadata accessor for SearchResult);
        if ((v38 & 1) == 0)
          goto LABEL_35;
        v39 = (unint64_t)v67;
        v40 = (unint64_t)&v63[a2];
        if ((unint64_t)v67 < a2 || (unint64_t)v67 >= v40)
        {
          swift_arrayInitWithTakeFrontToBack(v67, a2);
        }
        else if (v67 == (char *)a2)
        {
          v39 = a2;
        }
        else
        {
          swift_arrayInitWithTakeBackToFront(v67, a2);
        }
LABEL_43:
        v67 = &v63[v39];
        a4 = v66;
        if (v66 < v27)
        {
          a2 = v40;
          if (v40 < a3)
            continue;
        }
        goto LABEL_75;
      }
    }
    goto LABEL_75;
  }
LABEL_79:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

void (*sub_100055760(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(_QWORD *)
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_100055838(v6, a2, a3);
  return sub_1000557B4;
}

void (*sub_1000557B8(void (**a1)(id *), unint64_t a2, uint64_t a3))(_QWORD *)
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_1000558AC(v6, a2, a3);
  return sub_1000557B4;
}

void sub_10005580C(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

void (*sub_100055838(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return sub_1000558A4;
  }
  __break(1u);
  return result;
}

void sub_1000558A4(id *a1)
{

}

void (*sub_1000558AC(void (*result)(id *), unint64_t a2, uint64_t a3))(id *)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return sub_100057118;
  }
  __break(1u);
  return result;
}

uint64_t sub_100055918(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

Swift::Int sub_1000559A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[9];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100004FC8(&qword_100158B78);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v5 = v3 + 56;
    v27 = a1 + 32;
    while (1)
    {
      v6 = (uint64_t *)(v27 + 16 * v4);
      v8 = *v6;
      v7 = v6[1];
      Hasher.init(_seed:)(v28, *(_QWORD *)(v3 + 40));
      swift_bridgeObjectRetain(v7);
      String.hash(into:)(v28, v8, v7);
      result = Hasher._finalize()();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = result & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        v15 = *(_QWORD *)(v3 + 48);
        v16 = (_QWORD *)(v15 + 16 * v11);
        v17 = v16[1];
        v18 = *v16 == v8 && v17 == v7;
        if (v18 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, v7, 0), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease(v7);
          goto LABEL_4;
        }
        v19 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v19;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          v20 = (_QWORD *)(v15 + 16 * v11);
          v21 = v20[1];
          if (*v20 != v8 || v21 != v7)
          {
            result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, v7, 0);
            if ((result & 1) == 0)
              continue;
          }
          goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      v23 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v11);
      *v23 = v8;
      v23[1] = v7;
      v24 = *(_QWORD *)(v3 + 16);
      v25 = __OFADD__(v24, 1);
      v26 = v24 + 1;
      if (v25)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v26;
LABEL_4:
      if (++v4 == v1)
        return v3;
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

void *sub_100055B40(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  void *result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;

  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v30 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    sub_100004FC8((uint64_t *)&unk_10015BAE0);
    v10 = static _SetStorage.allocate(capacity:)(v9);
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v31 = v9;
    v32 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v35 = v10 + 56;
    while (1)
    {
      v33 = v11;
      v34(v8, v32 + v13 * v11, v2);
      v14 = *(_QWORD *)(v10 + 40);
      v15 = sub_100007828((unint64_t *)&unk_10015BAD0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v2, v15);
      v17 = ~(-1 << *(_BYTE *)(v10 + 32));
      v18 = v16 & v17;
      v19 = (v16 & (unint64_t)v17) >> 6;
      v20 = *(_QWORD *)(v35 + 8 * v19);
      v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        do
        {
          v34(v6, *(_QWORD *)(v10 + 48) + v18 * v13, v2);
          v22 = sub_100007828(&qword_1001582B8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
          v23 = dispatch thunk of static Equatable.== infix(_:_:)(v6, v8, v2, v22);
          v24 = v3;
          v25 = *(void (**)(char *, uint64_t))(v3 + 8);
          v25(v6, v2);
          if ((v23 & 1) != 0)
          {
            v25(v8, v2);
            v3 = v24;
            v9 = v31;
            goto LABEL_4;
          }
          v18 = (v18 + 1) & v17;
          v19 = v18 >> 6;
          v20 = *(_QWORD *)(v35 + 8 * (v18 >> 6));
          v21 = 1 << v18;
          v3 = v24;
        }
        while ((v20 & (1 << v18)) != 0);
        v9 = v31;
      }
      *(_QWORD *)(v35 + 8 * v19) = v21 | v20;
      result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v18 * v13, v8, v2);
      v27 = *(_QWORD *)(v10 + 16);
      v28 = __OFADD__(v27, 1);
      v29 = v27 + 1;
      if (v28)
        break;
      *(_QWORD *)(v10 + 16) = v29;
LABEL_4:
      v11 = v33 + 1;
      if (v33 + 1 == v9)
        return (void *)v10;
    }
    __break(1u);
  }
  else
  {
    return &_swiftEmptySetSingleton;
  }
  return result;
}

uint64_t sub_100055DA8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v7 = a4 + 40 * a1 + 32;
  v8 = a3 + 40 * v5;
  if (v7 >= v8 || v7 + 40 * v5 <= a3)
  {
    sub_100004FC8(a5);
    swift_arrayInitWithCopy(a3);
    return v8;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100055EB0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 96 * a1 + 32;
  v6 = a3 + 96 * v4;
  if (v5 >= v6 || v5 + 96 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100055FA4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + 8 * a1 + 32;
    v7 = a3 + 8 * v4;
    if (v6 >= v7 || v6 + 8 * v4 <= a3)
    {
      sub_100004FC8(&qword_100158B98);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000560AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 16) = v1;
  swift_bridgeObjectRetain(v1);
  return swift_bridgeObjectRelease(v3);
}

unint64_t sub_1000560E4()
{
  unint64_t result;

  result = qword_100158B60;
  if (!qword_100158B60)
  {
    result = swift_getWitnessTable(&unk_100115784, &type metadata for DeviceOSExpertFeatureFlags);
    atomic_store(result, (unint64_t *)&qword_100158B60);
  }
  return result;
}

uint64_t sub_100056128(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_100056218(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(a5(0) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 72);
  v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

_QWORD *sub_100056330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;

  v6 = v5;
  v34 = a3;
  v35 = a4;
  v33 = a2;
  v9 = sub_100004FC8(&qword_100158BD0);
  __chkstk_darwin(v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for SearchResult(0);
  v12 = *(_QWORD *)(v32 - 8);
  v13 = __chkstk_darwin(v32);
  v31 = (uint64_t)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v28 = (uint64_t)&v26 - v15;
  if ((unint64_t)a1 >> 62)
    goto LABEL_20;
  v16 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v16; v16 = _CocoaArrayWrapper.endIndex.getter(v24))
  {
    v30 = a1 & 0xC000000000000001;
    v17 = _swiftEmptyArrayStorage;
    v18 = 4;
    v27 = a5;
    v29 = a1;
    while (1)
    {
      v19 = v30 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v18 - 4, a1) : *(id *)(a1 + 8 * v18);
      a1 = (uint64_t)v19;
      v20 = v18 - 3;
      if (__OFADD__(v18 - 4, 1))
        break;
      v36 = v19;
      sub_10005027C(&v36, v35, a5, (uint64_t)v11);
      if (v6)
      {
        swift_bridgeObjectRelease(v17);
        swift_bridgeObjectRelease(v29);

        return v17;
      }

      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v32) == 1)
      {
        sub_10000BA50((uint64_t)v11, &qword_100158BD0);
      }
      else
      {
        v21 = v28;
        sub_100007670((uint64_t)v11, v28, type metadata accessor for SearchResult);
        sub_100007670(v21, v31, type metadata accessor for SearchResult);
        if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
          v17 = (_QWORD *)sub_100052734(0, v17[2] + 1, 1, (unint64_t)v17, &qword_1001573A0, type metadata accessor for SearchResult);
        v23 = v17[2];
        v22 = v17[3];
        if (v23 >= v22 >> 1)
          v17 = (_QWORD *)sub_100052734(v22 > 1, v23 + 1, 1, (unint64_t)v17, &qword_1001573A0, type metadata accessor for SearchResult);
        v17[2] = v23 + 1;
        sub_100007670(v31, (uint64_t)v17+ ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(_QWORD *)(v12 + 72) * v23, type metadata accessor for SearchResult);
        a5 = v27;
      }
      a1 = v29;
      ++v18;
      if (v20 == v16)
      {
        swift_bridgeObjectRelease(v29);
        return v17;
      }
    }
    __break(1u);
LABEL_20:
    if (a1 < 0)
      v24 = a1;
    else
      v24 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
  swift_bridgeObjectRelease(a1);
  return _swiftEmptyArrayStorage;
}

void *sub_10005662C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  void *result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;

  v2 = type metadata accessor for PresentationDetent(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v30 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    sub_100004FC8(&qword_100158BE0);
    v10 = static _SetStorage.allocate(capacity:)(v9);
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v31 = v9;
    v32 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v35 = v10 + 56;
    while (1)
    {
      v33 = v11;
      v34(v8, v32 + v13 * v11, v2);
      v14 = *(_QWORD *)(v10 + 40);
      v15 = sub_100007828(&qword_100158BE8, (uint64_t (*)(uint64_t))&type metadata accessor for PresentationDetent, (uint64_t)&protocol conformance descriptor for PresentationDetent);
      v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v2, v15);
      v17 = ~(-1 << *(_BYTE *)(v10 + 32));
      v18 = v16 & v17;
      v19 = (v16 & (unint64_t)v17) >> 6;
      v20 = *(_QWORD *)(v35 + 8 * v19);
      v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        do
        {
          v34(v6, *(_QWORD *)(v10 + 48) + v18 * v13, v2);
          v22 = sub_100007828(&qword_100158BF0, (uint64_t (*)(uint64_t))&type metadata accessor for PresentationDetent, (uint64_t)&protocol conformance descriptor for PresentationDetent);
          v23 = dispatch thunk of static Equatable.== infix(_:_:)(v6, v8, v2, v22);
          v24 = v3;
          v25 = *(void (**)(char *, uint64_t))(v3 + 8);
          v25(v6, v2);
          if ((v23 & 1) != 0)
          {
            v25(v8, v2);
            v3 = v24;
            v9 = v31;
            goto LABEL_4;
          }
          v18 = (v18 + 1) & v17;
          v19 = v18 >> 6;
          v20 = *(_QWORD *)(v35 + 8 * (v18 >> 6));
          v21 = 1 << v18;
          v3 = v24;
        }
        while ((v20 & (1 << v18)) != 0);
        v9 = v31;
      }
      *(_QWORD *)(v35 + 8 * v19) = v21 | v20;
      result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v18 * v13, v8, v2);
      v27 = *(_QWORD *)(v10 + 16);
      v28 = __OFADD__(v27, 1);
      v29 = v27 + 1;
      if (v28)
        break;
      *(_QWORD *)(v10 + 16) = v29;
LABEL_4:
      v11 = v33 + 1;
      if (v33 + 1 == v9)
        return (void *)v10;
    }
    __break(1u);
  }
  else
  {
    return &_swiftEmptySetSingleton;
  }
  return result;
}

uint64_t sub_100056894(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 72 * a1 + 32;
  v6 = a3 + 72 * v4;
  if (v5 >= v6 || v5 + 72 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100056988()
{
  return sub_10005699C((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_10005699C(void (*a1)(_QWORD), void (*a2)(_QWORD))
{
  uint64_t v2;

  a1(*(_QWORD *)(v2 + 16));
  a2(*(_QWORD *)(v2 + 32));
  return swift_deallocObject(v2, 40, 7);
}

uint64_t sub_1000569D8()
{
  uint64_t *v0;

  return sub_100051E20(v0[2], v0[3], v0[4]);
}

uint64_t sub_1000569E4()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100056A18(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_100158BAC);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_1000526BC;
  return sub_100051F48(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_100056AA0()
{
  return sub_100056DF8();
}

uint64_t sub_100056AB4()
{
  uint64_t v0;

  return sub_1000523D8(v0);
}

uint64_t sub_100056AC4()
{
  uint64_t *v0;

  return sub_10004C274(v0[2], v0[3], v0[4]);
}

void sub_100056AF0()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 80) = *(_BYTE *)(v0 + 24);
}

uint64_t sub_100056B00()
{
  uint64_t v0;

  return sub_10004C40C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100056B18()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100056B3C(uint64_t a1)
{
  uint64_t v1;

  return sub_10004EBFC(a1, v1);
}

uint64_t sub_100056B44()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));
  swift_release(*(_QWORD *)(v0 + 88));
  return swift_deallocObject(v0, 96, 7);
}

void sub_100056B98(unint64_t a1)
{
  uint64_t v1;

  sub_10004EEC4(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(const char **)(v1 + 32), *(_QWORD *)(v1 + 40), *(unsigned __int8 *)(v1 + 48), *(_QWORD **)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88));
}

uint64_t sub_100056BD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004FC8(&qword_100158BC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100056C1C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100056C48()
{
  uint64_t v0;

  return sub_1000517C8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100056C50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = type metadata accessor for SearchResultSection(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  v6 = v0 + v4;
  v7 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v0 + v4, v7))
  {
    case 0u:
    case 1u:
      v8 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
      break;
    case 2u:
      v9 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v0 + v4, v9);
      v10 = sub_100004FC8(&qword_10015C420);
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + *(int *)(v10 + 48) + 8));
      break;
    case 3u:
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 40));
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 56));
      break;
    case 4u:
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 40));
      break;
    case 5u:
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 24));

      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 40));
      if (*(_QWORD *)(v6 + 72))
        sub_100005474((_QWORD *)(v6 + 48));
      break;
    default:
      break;
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + *(int *)(v1 + 20)));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100056DC8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SearchResultSection(0) - 8) + 80);
  return sub_100051660(*(_QWORD *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t sub_100056DF8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 24);
  result = sub_10004AED0(v2);
  *(_BYTE *)(v1 + 81) = v2;
  return result;
}

uint64_t sub_100056E38()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = (int *)type metadata accessor for SearchResult(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  v6 = v0 + v4;
  v7 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v0 + v4, v7))
  {
    case 0u:
    case 1u:
      v8 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
      break;
    case 2u:
      v9 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v0 + v4, v9);
      v10 = sub_100004FC8(&qword_10015C420);
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + *(int *)(v10 + 48) + 8));
      break;
    case 3u:
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 40));
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 56));
      break;
    case 4u:
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 40));
      break;
    case 5u:
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 24));

      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 40));
      if (*(_QWORD *)(v6 + 72))
        sub_100005474((_QWORD *)(v6 + 48));
      break;
    default:
      break;
  }
  v11 = v4 + v5;
  v12 = v6 + v1[5];
  v13 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[7] + 8));
  sub_10000BB54(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8), *(_BYTE *)(v6 + v1[9] + 16));
  return swift_deallocObject(v0, v11, v3 | 7);
}

uint64_t sub_100057004(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SearchResult(0) - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc(dword_100158C04);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_1000570A0;
  return sub_10004E858(a1, v5, v6, v7, v8);
}

uint64_t sub_100057098()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000570DC()
{
  return sub_100056B00();
}

uint64_t sub_1000570F0()
{
  return sub_100056AC4();
}

void sub_100057104()
{
  sub_100056AF0();
}

uint64_t initializeBufferWithCopyOfBuffer for SettingsSearchResultsList(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = v4;
  swift_retain(v3);
  return a1;
}

uint64_t destroy for SettingsSearchResultsList(_QWORD *a1)
{
  return swift_release(*a1);
}

uint64_t *assignWithCopy for SettingsSearchResultsList(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  v5 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v4;
  swift_retain(v3);
  swift_release(v5);
  return a1;
}

uint64_t initializeWithTake for SettingsSearchResultsList(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t *assignWithTake for SettingsSearchResultsList(uint64_t *a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;

  v3 = *((_BYTE *)a2 + 8);
  v4 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v3;
  swift_release(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for SettingsSearchResultsList(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SettingsSearchResultsList(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SettingsSearchResultsList()
{
  return &type metadata for SettingsSearchResultsList;
}

uint64_t sub_100057280(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10012A624, 1);
}

uint64_t sub_100057290@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t KeyPath;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t OpaqueTypeConformance2;
  uint64_t v71;
  char *v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char v102[16];
  uint64_t v103;
  char v104;
  _QWORD v105[4];

  v92 = a1;
  v99 = a4;
  v5 = a3 & 1;
  v6 = type metadata accessor for ScrollViewProxy(0);
  v94 = *(_QWORD *)(v6 - 8);
  v95 = v6;
  __chkstk_darwin(v6);
  v91 = v7;
  v93 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PPTTestCase.Name(0);
  v97 = *(_QWORD *)(v8 - 8);
  v98 = v8;
  __chkstk_darwin(v8);
  v96 = (char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = type metadata accessor for PlainListStyle(0);
  v90 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89);
  v87 = (char *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = type metadata accessor for ScrollDismissesKeyboardMode(0);
  v84 = *(_QWORD *)(v85 - 8);
  __chkstk_darwin(v85);
  v81 = (char *)&v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100004FC8(&qword_100158C30);
  v75 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_100004FC8(&qword_100158C38);
  v77 = *(_QWORD *)(v78 - 8);
  __chkstk_darwin(v78);
  v16 = (char *)&v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = sub_100004FC8(&qword_100158C40);
  __chkstk_darwin(v76);
  v18 = (char *)&v74 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = sub_100004FC8(&qword_100158C48);
  v82 = *(_QWORD *)(v83 - 8);
  __chkstk_darwin(v83);
  v20 = (char *)&v74 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = sub_100004FC8(&qword_100158C50);
  __chkstk_darwin(v80);
  v22 = (char *)&v74 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = sub_100004FC8(&qword_100158C58);
  __chkstk_darwin(v100);
  v79 = (char *)&v74 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_100004FC8(&qword_100158C60);
  v86 = *(_QWORD *)(v88 - 8);
  __chkstk_darwin(v88);
  v101 = (char *)&v74 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = a2;
  v104 = v5;
  v25 = sub_100004FC8(&qword_100158C68);
  v26 = sub_100058440(&qword_100158C70, &qword_100158C68, (void (*)(void))sub_1000583B8);
  List<>.init(content:)(sub_1000583AC, v102, v25, v26);
  v27 = sub_100007868(&qword_100158CA0, &qword_100158C30, (uint64_t)&protocol conformance descriptor for List<A, B>);
  v28 = sub_1000584E8();
  View.buttonStyle<A>(_:)(v28, v12, &type metadata for SettingsSearchListItemButtonStyle, v27, v28);
  v29 = (*(uint64_t (**)(char *, uint64_t))(v75 + 8))(v14, v12);
  v30 = static Animation.default.getter(v29);
  v31 = swift_retain(a2);
  v32 = sub_10006342C(v31, v5);
  swift_release(a2);
  KeyPath = swift_getKeyPath(&unk_100116860);
  v105[0] = v32;
  v34 = sub_100007828(&qword_100158B50, type metadata accessor for SettingsAppSearchViewModel, (uint64_t)&unk_1001166F4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v105, KeyPath, v34);
  swift_release(KeyPath);
  v35 = *(_QWORD *)(v32 + 152);
  swift_bridgeObjectRetain(v35);
  swift_release(v32);
  v36 = v77;
  v37 = v78;
  (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v18, v16, v78);
  v38 = v76;
  v39 = (uint64_t *)&v18[*(int *)(v76 + 36)];
  *v39 = v30;
  v39[1] = v35;
  v40 = (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v16, v37);
  v41 = v81;
  static ScrollDismissesKeyboardMode.immediately.getter(v40);
  v42 = sub_100058534();
  View.scrollDismissesKeyboard(_:)(v41, v38, v42);
  (*(void (**)(char *, uint64_t))(v84 + 8))(v41, v85);
  v43 = sub_10000BA50((uint64_t)v18, &qword_100158C40);
  v44 = static Alignment.center.getter(v43);
  v46 = v45;
  v47 = objc_msgSend((id)objc_opt_self(UIColor), "systemGroupedBackgroundColor");
  v48 = Color.init(uiColor:)(v47);
  v49 = static SafeAreaRegions.all.getter();
  LOBYTE(v36) = static Edge.Set.all.getter();
  v50 = v82;
  v51 = v83;
  (*(void (**)(char *, char *, uint64_t))(v82 + 16))(v22, v20, v83);
  v52 = v80;
  v53 = &v22[*(int *)(v80 + 36)];
  *(_QWORD *)v53 = v48;
  *((_QWORD *)v53 + 1) = v49;
  v53[16] = v36;
  *((_QWORD *)v53 + 3) = v44;
  *((_QWORD *)v53 + 4) = v46;
  (*(void (**)(char *, uint64_t))(v50 + 8))(v20, v51);
  v54 = sub_100058614();
  v55 = (uint64_t)v79;
  View.accessibilityIdentifier(_:)(0xD000000000000033, 0x80000001001226B0, v52, v54);
  v56 = sub_10000BA50((uint64_t)v22, &qword_100158C50);
  v57 = v87;
  PlainListStyle.init()(v56);
  v58 = sub_1000586C0();
  v59 = v89;
  View.listStyle<A>(_:)(v57, v100, v89, v58, &protocol witness table for PlainListStyle);
  (*(void (**)(char *, uint64_t))(v90 + 8))(v57, v59);
  sub_10000BA50(v55, &qword_100158C58);
  if (qword_100156C70 != -1)
    swift_once(&qword_100156C70, sub_100062AF4);
  v60 = v98;
  v61 = sub_100007808(v98, (uint64_t)qword_10015D208);
  v63 = v96;
  v62 = v97;
  (*(void (**)(char *, uint64_t, uint64_t))(v97 + 16))(v96, v61, v60);
  v65 = v93;
  v64 = v94;
  v66 = v95;
  (*(void (**)(char *, uint64_t, uint64_t))(v94 + 16))(v93, v92, v95);
  v67 = *(unsigned __int8 *)(v64 + 80);
  v68 = (v67 + 16) & ~v67;
  v69 = swift_allocObject(&unk_100149F20, v68 + v91, v67 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v64 + 32))(v69 + v68, v65, v66);
  v105[0] = v100;
  v105[1] = v59;
  v105[2] = v58;
  v105[3] = &protocol witness table for PlainListStyle;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v105, &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>, 1);
  v71 = v88;
  v72 = v101;
  View.onTest(_:handler:)(v63, sub_1000587A4, v69, v88, OpaqueTypeConformance2);
  swift_release(v69);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v63, v60);
  return (*(uint64_t (**)(char *, uint64_t))(v86 + 8))(v72, v71);
}

uint64_t sub_100057A1C(uint64_t a1, char a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v3 = a2 & 1;
  v4 = swift_retain(a1);
  v5 = sub_10006342C(v4, v3);
  swift_release(a1);
  KeyPath = swift_getKeyPath(&unk_100116860);
  v17 = v5;
  v7 = sub_100007828(&qword_100158B50, type metadata accessor for SettingsAppSearchViewModel, (uint64_t)&unk_1001166F4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v17, KeyPath, v7);
  swift_release(KeyPath);
  v8 = *(_QWORD *)(v5 + 152);
  swift_bridgeObjectRetain(v8);
  swift_release(v5);
  v17 = v8;
  v9 = swift_allocObject(&unk_100149F98, 25, 7);
  *(_QWORD *)(v9 + 16) = a1;
  *(_BYTE *)(v9 + 24) = v3;
  swift_retain(a1);
  v10 = sub_100004FC8(&qword_100158CF0);
  v11 = type metadata accessor for SearchResultSection(0);
  v12 = sub_100004FC8(&qword_100158C80);
  v13 = sub_100007868(&qword_100158CF8, &qword_100158CF0, (uint64_t)&protocol conformance descriptor for [A]);
  v14 = sub_1000583B8();
  v15 = sub_100007828(&qword_100158D00, type metadata accessor for SearchResultSection, (uint64_t)&unk_10011598C);
  return ForEach<>.init(_:content:)(&v17, sub_1000588FC, v9, v10, v11, v12, v13, v14, v15);
}

uint64_t sub_100057BB0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[4];
  char v7;

  v6[2] = a1;
  v6[3] = a2;
  v7 = a3 & 1;
  v3 = sub_100004FC8(&qword_100158C90);
  v4 = sub_100058440(&qword_100158C88, &qword_100158C90, (void (*)(void))sub_1000584A4);
  return Section<>.init(content:)(sub_100058908, v6, v3, v4);
}

uint64_t sub_100057C30(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v5 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for SearchResultSection(0) + 20));
  v13 = v5;
  v6 = swift_allocObject(&unk_100149FC0, 25, 7);
  *(_QWORD *)(v6 + 16) = a2;
  *(_BYTE *)(v6 + 24) = a3 & 1;
  swift_retain(a2);
  swift_bridgeObjectRetain(v5);
  v7 = sub_100004FC8(&qword_100158D08);
  v8 = type metadata accessor for URL(0);
  v9 = sub_100007868(&qword_100158D10, &qword_100158D08, (uint64_t)&protocol conformance descriptor for [A]);
  v10 = sub_1000584A4();
  v11 = sub_100007828(&qword_100158D18, type metadata accessor for SearchResult, (uint64_t)&unk_1001153D8);
  return ForEach<>.init(_:content:)(&v13, sub_100058914, v6, v7, v8, &type metadata for SettingsSearchListItem, v9, v10, v11);
}

uint64_t sub_100057D4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;

  v29 = a3;
  v28 = a2;
  v6 = type metadata accessor for SearchResult(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = (int *)__chkstk_darwin(v6);
  v10 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1 + v9[9];
  v12 = *(_QWORD *)v11;
  v13 = *(_QWORD *)(v11 + 8);
  v14 = (uint64_t *)(a1 + v9[6]);
  v15 = *v14;
  v16 = v14[1];
  v17 = (uint64_t *)(a1 + v9[7]);
  v18 = *v17;
  v19 = v17[1];
  v26 = v15;
  v27 = v18;
  v20 = *(_BYTE *)(v11 + 16);
  sub_100058920(a1, (uint64_t)v10);
  v21 = *(unsigned __int8 *)(v7 + 80);
  v22 = (v21 + 25) & ~v21;
  v23 = swift_allocObject(&unk_100149FE8, v22 + v8, v21 | 7);
  v24 = v28;
  *(_QWORD *)(v23 + 16) = v28;
  *(_BYTE *)(v23 + 24) = v29 & 1;
  sub_100058B28((uint64_t)v10, v23 + v22);
  *(_QWORD *)a4 = v12;
  *(_QWORD *)(a4 + 8) = v13;
  *(_BYTE *)(a4 + 16) = v20;
  *(_QWORD *)(a4 + 24) = v26;
  *(_QWORD *)(a4 + 32) = v16;
  *(_QWORD *)(a4 + 40) = v27;
  *(_QWORD *)(a4 + 48) = v19;
  *(_QWORD *)(a4 + 56) = sub_100058B6C;
  *(_QWORD *)(a4 + 64) = v23;
  sub_10000BB2C(v12, v13, v20);
  swift_retain(v24);
  swift_bridgeObjectRetain(v16);
  return swift_bridgeObjectRetain(v19);
}

uint64_t sub_100057E94(uint64_t a1, char a2, uint64_t a3)
{
  char v5;
  uint64_t v6;
  uint64_t v7;

  v5 = a2 & 1;
  v6 = swift_retain(a1);
  v7 = sub_10006342C(v6, v5);
  swift_release(a1);
  sub_10004D888(a3);
  return swift_release(v7);
}

uint64_t sub_100057EE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD aBlock[5];
  uint64_t v58;

  v48 = a2;
  v46 = a1;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v54 = *(_QWORD *)(v2 - 8);
  v55 = v2;
  __chkstk_darwin(v2);
  v53 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v51 = *(_QWORD *)(v4 - 8);
  v52 = v4;
  __chkstk_darwin(v4);
  v50 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = type metadata accessor for ScrollViewProxy(0);
  v6 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v44 = v7;
  v45 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PPTTestCase(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = type metadata accessor for DispatchTime(0);
  v12 = *(_QWORD *)(v56 - 8);
  v13 = __chkstk_darwin(v56);
  v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v49 = (char *)&v42 - v16;
  if (qword_100156CD0 != -1)
    swift_once(&qword_100156CD0, sub_10008BEC4);
  v17 = type metadata accessor for Logger(0);
  v18 = sub_100007808(v17, (uint64_t)qword_10015D328);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Running search scroll test", v21, 2u);
    swift_slowDealloc(v21, -1, -1);
  }

  v22 = sub_100005494();
  v42 = static OS_dispatch_queue.main.getter(v22);
  static DispatchTime.now()();
  v23 = v49;
  + infix(_:_:)(v15, 2.0);
  v43 = *(void (**)(char *, uint64_t))(v12 + 8);
  v43(v15, v56);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v46, v8);
  v24 = v45;
  v25 = v47;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v45, v48, v47);
  v26 = *(unsigned __int8 *)(v9 + 80);
  v27 = (v26 + 16) & ~v26;
  v28 = *(unsigned __int8 *)(v6 + 80);
  v29 = (v10 + v28 + v27) & ~v28;
  v30 = swift_allocObject(&unk_100149F48, v29 + v44, v26 | v28 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v30 + v27, v11, v8);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v30 + v29, v24, v25);
  aBlock[4] = sub_100058894;
  v58 = v30;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100005350;
  aBlock[3] = &unk_100149F60;
  v31 = _Block_copy(aBlock);
  v32 = swift_release(v58);
  v33 = v50;
  static DispatchQoS.unspecified.getter(v32);
  aBlock[0] = _swiftEmptyArrayStorage;
  v34 = sub_100007828((unint64_t *)&qword_10015BAB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v35 = sub_100004FC8((uint64_t *)&unk_100156F40);
  v36 = sub_100007868((unint64_t *)&qword_10015BAC0, (uint64_t *)&unk_100156F40, (uint64_t)&protocol conformance descriptor for [A]);
  v37 = v53;
  v38 = v35;
  v39 = v55;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v38, v36, v55, v34);
  v40 = (void *)v42;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v23, v33, v37, v31);
  _Block_release(v31);

  (*(void (**)(char *, uint64_t))(v54 + 8))(v37, v39);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v33, v52);
  return ((uint64_t (*)(char *, uint64_t))v43)(v23, v56);
}

uint64_t sub_100058324@<X0>(uint64_t (**a1)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  char v4;
  uint64_t v5;

  v3 = *v1;
  v4 = *((_BYTE *)v1 + 8);
  v5 = swift_allocObject(&unk_100149EF8, 25, 7);
  *(_QWORD *)(v5 + 16) = v3;
  *(_BYTE *)(v5 + 24) = v4;
  *a1 = sub_1000583A0;
  a1[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v5;
  return swift_retain(v3);
}

uint64_t sub_10005837C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

uint64_t sub_1000583A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100057290(a1, *(_QWORD *)(v2 + 16), *(_BYTE *)(v2 + 24), a2);
}

uint64_t sub_1000583AC()
{
  uint64_t v0;

  return sub_100057A1C(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

unint64_t sub_1000583B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100158C78;
  if (!qword_100158C78)
  {
    v1 = sub_100005430(&qword_100158C80);
    sub_100058440(&qword_100158C88, &qword_100158C90, (void (*)(void))sub_1000584A4);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> Section<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_100158C78);
  }
  return result;
}

uint64_t sub_100058440(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100005430(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000584A4()
{
  unint64_t result;

  result = qword_100158C98;
  if (!qword_100158C98)
  {
    result = swift_getWitnessTable(&unk_100119898, &type metadata for SettingsSearchListItem);
    atomic_store(result, (unint64_t *)&qword_100158C98);
  }
  return result;
}

unint64_t sub_1000584E8()
{
  unint64_t result;

  result = qword_100158CA8;
  if (!qword_100158CA8)
  {
    result = swift_getWitnessTable(&unk_1001177E4, &type metadata for SettingsSearchListItemButtonStyle);
    atomic_store(result, (unint64_t *)&qword_100158CA8);
  }
  return result;
}

unint64_t sub_100058534()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_100158CB0;
  if (!qword_100158CB0)
  {
    v1 = sub_100005430(&qword_100158C40);
    v2[0] = sub_100005430(&qword_100158C30);
    v2[1] = &type metadata for SettingsSearchListItemButtonStyle;
    v2[2] = sub_100007868(&qword_100158CA0, &qword_100158C30, (uint64_t)&protocol conformance descriptor for List<A, B>);
    v2[3] = sub_1000584E8();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    sub_100007868(&qword_100158CB8, &qword_100158CC0, (uint64_t)&protocol conformance descriptor for _AnimationModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100158CB0);
  }
  return result;
}

unint64_t sub_100058614()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100158CC8;
  if (!qword_100158CC8)
  {
    v1 = sub_100005430(&qword_100158C50);
    v2[0] = sub_100005430(&qword_100158C40);
    v2[1] = sub_100058534();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.scrollDismissesKeyboard(_:)>>, 1);
    sub_100007868(&qword_100158CD0, &qword_100158CD8, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100158CC8);
  }
  return result;
}

unint64_t sub_1000586C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100158CE0;
  if (!qword_100158CE0)
  {
    v1 = sub_100005430(&qword_100158C58);
    sub_100058614();
    sub_100007828(&qword_100158CE8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100158CE0);
  }
  return result;
}

uint64_t sub_100058744()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for ScrollViewProxy(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000587A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ScrollViewProxy(0) - 8) + 80);
  return sub_100057EE8(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_1000587E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for PPTTestCase(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for ScrollViewProxy(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v3 | v8 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v10, v11);
}

uint64_t sub_100058894()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(type metadata accessor for PPTTestCase(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ScrollViewProxy(0) - 8) + 80);
  return PPTTestCase.performScrollTest(_:)(v0 + ((v2 + v3 + v4) & ~v4));
}

uint64_t sub_1000588FC(uint64_t a1)
{
  uint64_t v1;

  return sub_100057BB0(a1, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24));
}

uint64_t sub_100058908()
{
  uint64_t v0;

  return sub_100057C30(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
}

uint64_t sub_100058914@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100057D4C(a1, *(_QWORD *)(v2 + 16), *(unsigned __int8 *)(v2 + 24), a2);
}

uint64_t sub_100058920(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SearchResult(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100058964()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = (int *)type metadata accessor for SearchResult(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 25) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  v6 = v0 + v4;
  v7 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v0 + v4, v7))
  {
    case 0u:
    case 1u:
      v8 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
      break;
    case 2u:
      v9 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v0 + v4, v9);
      v10 = sub_100004FC8(&qword_10015C420);
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + *(int *)(v10 + 48) + 8));
      break;
    case 3u:
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 40));
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 56));
      break;
    case 4u:
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 40));
      break;
    case 5u:
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 24));

      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 40));
      if (*(_QWORD *)(v6 + 72))
        sub_100005474((_QWORD *)(v6 + 48));
      break;
    default:
      break;
  }
  v11 = v4 + v5;
  v12 = v6 + v1[5];
  v13 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[7] + 8));
  sub_10000BB54(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8), *(_BYTE *)(v6 + v1[9] + 16));
  return swift_deallocObject(v0, v11, v3 | 7);
}

uint64_t sub_100058B28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SearchResult(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100058B6C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SearchResult(0) - 8) + 80);
  return sub_100057E94(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24), v0 + ((v1 + 25) & ~v1));
}

uint64_t sub_100058BA0()
{
  return sub_100007868(&qword_100158D20, &qword_100158D28, (uint64_t)&protocol conformance descriptor for ScrollViewReader<A>);
}

ValueMetadata *type metadata accessor for LegacyPreferencesURLRoute()
{
  return &type metadata for LegacyPreferencesURLRoute;
}

void sub_100058BE8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  _BOOL4 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  unsigned int (*v54)(char *, uint64_t, uint64_t);
  uint64_t *v55;
  uint64_t v56;
  uint64_t (*v57)(char *, char *, uint64_t);
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t (*v65)(uint64_t, unint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  NSObject *v91;
  os_log_type_t v92;
  BOOL v93;
  uint64_t v94;
  uint8_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint8_t *v103;
  void (*v104)(char *, uint64_t);
  uint64_t v105;
  char v106;
  char *v107;
  char *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  NSObject *v112;
  os_log_type_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  void (*v121)(char *, uint64_t);
  uint64_t v122;
  void (*v123)(char *, uint64_t);
  uint64_t v124;
  char v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  NSObject *v131;
  os_log_type_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  void (*v145)(char *, uint64_t);
  uint64_t v146;
  void (*v147)(char *, uint64_t);
  uint64_t v148;
  void (*v149)(char *, uint64_t);
  uint64_t v150;
  void (*v151)(char *, uint64_t);
  uint64_t v152;
  void (*v153)(char *, uint64_t);
  uint64_t v154;
  int *v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  void (*v160)(char *, uint64_t);
  void (*v161)(char *, uint64_t);
  char *v162;
  uint64_t v163;
  uint64_t (*v164)(char *, char *, uint64_t);
  unsigned int (*v165)(char *, uint64_t, uint64_t);
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  char *v171;
  char *v172;
  uint64_t v173;
  char *v174;
  char *v175;
  char *v176;
  uint64_t v177;
  char *v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187[3];

  v185 = a1;
  v3 = sub_100004FC8(&qword_10015C890);
  __chkstk_darwin(v3);
  v171 = (char *)&v162 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v168 = *(_QWORD *)(v5 - 8);
  v169 = v5;
  __chkstk_darwin(v5);
  v167 = (uint64_t)&v162 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004FC8(&qword_10015C510);
  __chkstk_darwin(v7);
  v178 = (char *)&v162 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URLQueryItem(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v182 = (uint64_t)&v162 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v176 = (char *)&v162 - v13;
  v14 = sub_100004FC8(&qword_1001570F0);
  v15 = __chkstk_darwin(v14);
  v175 = (char *)&v162 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v179 = (char *)&v162 - v17;
  v18 = type metadata accessor for URLComponents(0);
  v180 = *(_QWORD *)(v18 - 8);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v162 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v23 = (char *)&v162 - v22;
  v24 = type metadata accessor for URL(0);
  v181 = *(_QWORD *)(v24 - 8);
  v25 = __chkstk_darwin(v24);
  v170 = (char *)&v162 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v25);
  v172 = (char *)&v162 - v28;
  __chkstk_darwin(v27);
  v30 = (char *)&v162 - v29;
  if (qword_100156CB0 != -1)
    swift_once(&qword_100156CB0, sub_10008BE28);
  v31 = type metadata accessor for Logger(0);
  v173 = sub_100007808(v31, (uint64_t)qword_10015D2C8);
  v32 = Logger.logObject.getter(v173);
  v33 = static os_log_type_t.default.getter();
  v34 = os_log_type_enabled(v32, v33);
  v183 = v9;
  v174 = v21;
  if (v34)
  {
    v35 = swift_slowAlloc(22, -1);
    v177 = v18;
    v36 = v35;
    v37 = swift_slowAlloc(64, -1);
    v187[0] = v37;
    *(_DWORD *)v36 = 136315394;
    v184 = v10;
    v186 = sub_1000DA1F0(0xD00000000000001ELL, 0x80000001001226F0, v187);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v186, v187, v36 + 4, v36 + 12);
    *(_WORD *)(v36 + 12) = 2080;
    v186 = sub_1000DA1F0(0xD000000000000026, 0x800000010011FD10, v187);
    v10 = v184;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v186, v187, v36 + 14, v36 + 22);
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Start (%s.%s)…", (uint8_t *)v36, 0x16u);
    swift_arrayDestroy(v37, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    v38 = v36;
    v18 = v177;
    swift_slowDealloc(v38, -1, -1);
  }

  v40 = URL.scheme.getter(v39);
  if (!v41)
    goto LABEL_32;
  v42 = v41;
  if (v40 == 0x7366657270 && v41 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
  }
  else
  {
    v43 = _stringCompareWithSmolCheck(_:_:expecting:)(v40, v41, 0x7366657270, 0xE500000000000000, 0);
    swift_bridgeObjectRelease(v42);
    if ((v43 & 1) == 0)
      goto LABEL_32;
  }
  v44 = sub_100019DF4((uint64_t)v30);
  v45 = URL.absoluteString.getter(v44);
  v47 = v46;
  v187[0] = v45;
  v187[1] = v46;
  v48 = sub_100008A5C();
  v49 = StringProtocol.removingPercentEncoding.getter(&type metadata for String, v48);
  v51 = v50;
  swift_bridgeObjectRelease(v47);
  if (!v51)
  {
    (*(void (**)(char *, uint64_t))(v181 + 8))(v30, v24);
    goto LABEL_32;
  }
  v52 = v179;
  URLComponents.init(string:)(v49);
  swift_bridgeObjectRelease(v51);
  v53 = v180;
  v54 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v180 + 48);
  if (v54(v52, 1, v18) == 1)
  {
    (*(void (**)(char *, uint64_t))(v181 + 8))(v30, v24);
    v55 = &qword_1001570F0;
    v56 = (uint64_t)v52;
LABEL_31:
    sub_10000BA50(v56, v55);
    goto LABEL_32;
  }
  v57 = *(uint64_t (**)(char *, char *, uint64_t))(v53 + 32);
  v58 = v57(v23, v52, v18);
  v59 = URLComponents.queryItems.getter(v58);
  if (!v59)
  {
    v73 = v178;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v178, 1, 1, v183);
LABEL_29:
    (*(void (**)(char *, uint64_t))(v180 + 8))(v23, v18);
    (*(void (**)(char *, uint64_t))(v181 + 8))(v30, v24);
    v55 = &qword_10015C510;
LABEL_30:
    v56 = (uint64_t)v73;
    goto LABEL_31;
  }
  v60 = v59;
  v164 = v57;
  v165 = v54;
  v184 = v10;
  v61 = *(_QWORD *)(v59 + 16);
  v62 = v183;
  if (v61)
  {
    v179 = v23;
    v177 = v18;
    v166 = a2;
    v63 = v59 + ((*(unsigned __int8 *)(v184 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v184 + 80));
    v64 = *(_QWORD *)(v184 + 72);
    v65 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v184 + 16);
    swift_bridgeObjectRetain(v59);
    v66 = v182;
    while (1)
    {
      v67 = v65(v66, v63, v62);
      v68 = URLQueryItem.name.getter(v67);
      v70 = v69;
      if (v68 == 1953460082 && v69 == 0xE400000000000000)
      {
        swift_bridgeObjectRelease(v60);
        v76 = 0xE400000000000000;
        a2 = v166;
        goto LABEL_27;
      }
      v71 = _stringCompareWithSmolCheck(_:_:expecting:)(v68, v69, 1953460082, 0xE400000000000000, 0);
      swift_bridgeObjectRelease(v70);
      if ((v71 & 1) != 0)
        break;
      v62 = v183;
      v66 = v182;
      (*(void (**)(uint64_t, uint64_t))(v184 + 8))(v182, v183);
      v63 += v64;
      if (!--v61)
      {
        swift_bridgeObjectRelease(v60);
        v72 = 1;
        a2 = v166;
        v18 = v177;
        v23 = v179;
        goto LABEL_24;
      }
    }
    v76 = v60;
    a2 = v166;
    v62 = v183;
LABEL_27:
    v75 = v176;
    swift_bridgeObjectRelease(v76);
    v74 = v184;
    v73 = v178;
    (*(void (**)(char *, uint64_t, uint64_t))(v184 + 32))(v178, v182, v62);
    v72 = 0;
    v18 = v177;
    v23 = v179;
  }
  else
  {
    v72 = 1;
LABEL_24:
    v74 = v184;
    v75 = v176;
    v73 = v178;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v74 + 56))(v73, v72, 1, v62);
  swift_bridgeObjectRelease(v60);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48))(v73, 1, v62) == 1)
    goto LABEL_29;
  v163 = v24;
  v78 = (*(uint64_t (**)(char *, char *, uint64_t))(v74 + 32))(v75, v73, v62);
  v79 = URLQueryItem.value.getter(v78);
  if (!v80)
  {
    (*(void (**)(char *, uint64_t))(v74 + 8))(v75, v62);
    (*(void (**)(char *, uint64_t))(v180 + 8))(v23, v18);
LABEL_42:
    (*(void (**)(char *, uint64_t))(v181 + 8))(v30, v163);
    goto LABEL_32;
  }
  v81 = v80;
  v182 = v79;
  v82 = URL.absoluteString.getter(v79);
  v84 = v83;
  v73 = v175;
  URLComponents.init(string:)(v82);
  swift_bridgeObjectRelease(v84);
  if (v165(v73, 1, v18) == 1)
  {
    swift_bridgeObjectRelease(v81);
    (*(void (**)(char *, uint64_t))(v74 + 8))(v75, v62);
    (*(void (**)(char *, uint64_t))(v180 + 8))(v23, v18);
    (*(void (**)(char *, uint64_t))(v181 + 8))(v30, v163);
    v55 = &qword_1001570F0;
    goto LABEL_30;
  }
  v179 = v23;
  v85 = v73;
  v86 = v174;
  v87 = v164(v174, v85, v18);
  v88 = URLComponents.queryItems.getter(v87);
  if (!v88)
  {
    swift_bridgeObjectRelease(v81);
    v104 = *(void (**)(char *, uint64_t))(v180 + 8);
    v104(v86, v18);
    (*(void (**)(char *, uint64_t))(v74 + 8))(v75, v62);
    v104(v179, v18);
    goto LABEL_42;
  }
  v89 = v88;
  v90 = swift_bridgeObjectRetain_n(v88, 2);
  v91 = Logger.logObject.getter(v90);
  v92 = static os_log_type_t.default.getter();
  v93 = os_log_type_enabled(v91, v92);
  v162 = v30;
  if (v93)
  {
    v94 = swift_slowAlloc(12, -1);
    v177 = v18;
    v95 = (uint8_t *)v94;
    v96 = swift_slowAlloc(32, -1);
    v187[0] = v96;
    v166 = a2;
    *(_DWORD *)v95 = 136315138;
    v97 = swift_bridgeObjectRetain(v89);
    v98 = Array.description.getter(v97, v183);
    v100 = v99;
    swift_bridgeObjectRelease(v89);
    v101 = v98;
    v74 = v184;
    v186 = sub_1000DA1F0(v101, v100, v187);
    a2 = v166;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v186, v187, v95 + 4, v95 + 12);
    swift_bridgeObjectRelease_n(v89, 2);
    swift_bridgeObjectRelease(v100);
    _os_log_impl((void *)&_mh_execute_header, v91, v92, "queryItems = %s", v95, 0xCu);
    swift_arrayDestroy(v96, 1, (char *)&type metadata for Any + 8);
    v102 = v96;
    v62 = v183;
    swift_slowDealloc(v102, -1, -1);
    v103 = v95;
    v18 = v177;
    swift_slowDealloc(v103, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v89, 2);
  }
  v105 = v182;
  swift_bridgeObjectRetain(v81);
  v106 = sub_10006A148(v105, v81);
  v107 = v176;
  v108 = v172;
  if (v106 == 74)
  {
    swift_bridgeObjectRelease(v89);
    v109 = v181;
    v110 = v170;
    (*(void (**)(char *, uint64_t, uint64_t))(v181 + 16))(v170, v185, v163);
    v111 = swift_bridgeObjectRetain(v81);
    v112 = Logger.logObject.getter(v111);
    v113 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v112, v113))
    {
      v114 = swift_slowAlloc(42, -1);
      v177 = v18;
      v115 = v114;
      v116 = swift_slowAlloc(64, -1);
      *(_DWORD *)v115 = 141558787;
      v186 = 1752392040;
      v187[0] = v116;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v186, v187, v115 + 4, v115 + 12);
      *(_WORD *)(v115 + 12) = 2081;
      swift_bridgeObjectRetain(v81);
      v186 = sub_1000DA1F0(v182, v81, v187);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v186, v187, v115 + 14, v115 + 22);
      swift_bridgeObjectRelease_n(v81, 3);
      *(_WORD *)(v115 + 22) = 2160;
      v186 = 1752392040;
      v117 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v186, v187, v115 + 24, v115 + 32);
      *(_WORD *)(v115 + 32) = 2081;
      v118 = URL.absoluteString.getter(v117);
      v120 = v119;
      v186 = sub_1000DA1F0(v118, v119, v187);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v186, v187, v115 + 34, v115 + 42);
      swift_bridgeObjectRelease(v120);
      v121 = *(void (**)(char *, uint64_t))(v181 + 8);
      v122 = v163;
      v121(v110, v163);
      _os_log_impl((void *)&_mh_execute_header, v112, v113, "Unable to resolve classic settings specifier identifier for root value %{private,mask.hash}s from input URL %{private,mask.hash}s.", (uint8_t *)v115, 0x2Au);
      swift_arrayDestroy(v116, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v116, -1, -1);
      swift_slowDealloc(v115, -1, -1);

      v123 = *(void (**)(char *, uint64_t))(v180 + 8);
      v124 = v177;
      v123(v174, v177);
      (*(void (**)(char *, uint64_t))(v184 + 8))(v176, v183);
      v123(v179, v124);
      v121(v162, v122);
    }
    else
    {

      v149 = *(void (**)(char *, uint64_t))(v109 + 8);
      v150 = v163;
      v149(v110, v163);
      swift_bridgeObjectRelease_n(v81, 2);
      v151 = *(void (**)(char *, uint64_t))(v180 + 8);
      v151(v174, v18);
      (*(void (**)(char *, uint64_t))(v74 + 8))(v107, v183);
      v151(v179, v18);
      v149(v162, v150);
    }
  }
  else
  {
    v125 = v106;
    swift_bridgeObjectRelease(v81);
    v126 = sub_1000697A0(v125);
    v127 = (uint64_t)v171;
    sub_1000B1370(v126);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v168 + 48))(v127, 1, v169) != 1)
    {
      v152 = v127;
      v153 = *(void (**)(char *, uint64_t))(v180 + 8);
      v153(v174, v18);
      (*(void (**)(char *, uint64_t))(v74 + 8))(v107, v62);
      v153(v179, v18);
      v154 = v167;
      sub_10000F48C(v152, v167);
      (*(void (**)(uint64_t, char *, uint64_t))(v181 + 32))(a2, v162, v163);
      v155 = (int *)type metadata accessor for SettingsURLDestination(0);
      v156 = a2 + v155[5];
      sub_10000F48C(v154, v156);
      v157 = type metadata accessor for SettingsURLDestination.Action(0);
      swift_storeEnumTagMultiPayload(v156, v157, 1);
      v158 = (_QWORD *)(a2 + v155[7]);
      *(_QWORD *)(a2 + v155[6]) = v89;
      *v158 = 0;
      v158[1] = 0;
      v159 = sub_100004FC8(&qword_1001570F8);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v159 - 8) + 56))(a2, 0, 1, v159);
      goto LABEL_33;
    }
    swift_bridgeObjectRelease(v89);
    sub_10000BA50(v127, &qword_10015C890);
    v128 = v181;
    v129 = v163;
    v130 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v181 + 16))(v108, v185, v163);
    v131 = Logger.logObject.getter(v130);
    v132 = static os_log_type_t.fault.getter(v131);
    if (os_log_type_enabled(v131, v132))
    {
      v133 = swift_slowAlloc(42, -1);
      v134 = swift_slowAlloc(64, -1);
      v177 = v18;
      v135 = v134;
      *(_DWORD *)v133 = 141558787;
      v186 = 1752392040;
      v187[0] = v134;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v186, v187, v133 + 4, v133 + 12);
      *(_WORD *)(v133 + 12) = 2081;
      v136 = sub_100069A58(v125);
      v137 = a2;
      v139 = v138;
      v186 = sub_1000DA1F0(v136, v138, v187);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v186, v187, v133 + 14, v133 + 22);
      swift_bridgeObjectRelease(v139);
      *(_WORD *)(v133 + 22) = 2160;
      v186 = 1752392040;
      v140 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v186, v187, v133 + 24, v133 + 32);
      *(_WORD *)(v133 + 32) = 2081;
      v141 = v172;
      v142 = URL.absoluteString.getter(v140);
      v144 = v143;
      v186 = sub_1000DA1F0(v142, v143, v187);
      a2 = v137;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v186, v187, v133 + 34, v133 + 42);
      swift_bridgeObjectRelease(v144);
      v145 = *(void (**)(char *, uint64_t))(v128 + 8);
      v146 = v163;
      v145(v141, v163);
      _os_log_impl((void *)&_mh_execute_header, v131, v132, "Unable to resolve primary settings list item identifier for classic settings specifier identifier %{private,mask.hash}s from input URL %{private,mask.hash}s.", (uint8_t *)v133, 0x2Au);
      swift_arrayDestroy(v135, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v135, -1, -1);
      swift_slowDealloc(v133, -1, -1);

      v147 = *(void (**)(char *, uint64_t))(v180 + 8);
      v148 = v177;
      v147(v174, v177);
      (*(void (**)(char *, uint64_t))(v184 + 8))(v176, v183);
      v147(v179, v148);
      v145(v162, v146);
    }
    else
    {

      v160 = *(void (**)(char *, uint64_t))(v128 + 8);
      v160(v172, v129);
      v161 = *(void (**)(char *, uint64_t))(v180 + 8);
      v161(v174, v18);
      (*(void (**)(char *, uint64_t))(v74 + 8))(v107, v183);
      v161(v179, v18);
      v160(v162, v129);
    }
  }
LABEL_32:
  v77 = sub_100004FC8(&qword_1001570F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 56))(a2, 1, 1, v77);
LABEL_33:
  sub_100059D1C();
}

uint64_t sub_100059C94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v1 = URL.scheme.getter(a1);
  if (v2)
  {
    v3 = v2;
    if (v1 == 0x7366657270 && v2 == 0xE500000000000000)
      v4 = 1;
    else
      v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v1, v2, 0x7366657270, 0xE500000000000000, 0);
    swift_bridgeObjectRelease(v3);
  }
  else
  {
    v4 = 0;
  }
  return v4 & 1;
}

void sub_100059D1C()
{
  uint64_t v0;
  uint64_t v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *oslog;
  uint64_t v6;
  uint64_t v7;

  if (qword_100156CB0 != -1)
    swift_once(&qword_100156CB0, sub_10008BE28);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_100007808(v0, (uint64_t)qword_10015D2C8);
  oslog = Logger.logObject.getter(v1);
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v2))
  {
    v3 = swift_slowAlloc(22, -1);
    v4 = swift_slowAlloc(64, -1);
    v7 = v4;
    *(_DWORD *)v3 = 136315394;
    v6 = sub_1000DA1F0(0xD00000000000001ELL, 0x80000001001226F0, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v6, &v7, v3 + 4, v3 + 12);
    *(_WORD *)(v3 + 12) = 2080;
    v6 = sub_1000DA1F0(0xD000000000000026, 0x800000010011FD10, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v6, &v7, v3 + 14, v3 + 22);
    _os_log_impl((void *)&_mh_execute_header, oslog, v2, "…Complete (%s.%s)", (uint8_t *)v3, 0x16u);
    swift_arrayDestroy(v4, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v4, -1, -1);
    swift_slowDealloc(v3, -1, -1);

  }
  else
  {

  }
}

uint64_t *sub_100059EE8(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v5);
  }
  else
  {
    v8 = a2[1];
    a1[1] = v8;
    v9 = a3[6];
    v10 = (uint64_t *)((char *)a1 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    swift_retain(v5);
    swift_retain(v8);
    v12 = sub_100004FC8(&qword_100158D30);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = type metadata accessor for WithCurrentHostingControllerAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v11, v13);
      v14 = 1;
    }
    else
    {
      v15 = *v11;
      *v10 = *v11;
      swift_retain(v15);
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v12, v14);
    v16 = a3[7];
    v17 = a3[8];
    v18 = (char *)a1 + v16;
    v19 = (char *)a2 + v16;
    v20 = *(_QWORD *)v19;
    LOBYTE(v19) = v19[8];
    *(_QWORD *)v18 = v20;
    v18[8] = (char)v19;
    v21 = (char *)a1 + v17;
    v22 = (char *)a2 + v17;
    v23 = *(_QWORD *)v22;
    LOBYTE(v22) = v22[8];
    *(_QWORD *)v21 = v23;
    v21[8] = (char)v22;
    v24 = a3[10];
    *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    v25 = (char *)a1 + v24;
    v26 = (char *)a2 + v24;
    swift_retain(v20);
    swift_retain(v23);
    v27 = sub_100004FC8(&qword_100158D38);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
  }
  return a1;
}

uint64_t sub_10005A04C(_QWORD *a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  swift_release(*a1);
  swift_release(a1[1]);
  v4 = (_QWORD *)((char *)a1 + a2[6]);
  v5 = sub_100004FC8(&qword_100158D30);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for WithCurrentHostingControllerAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  swift_release(*(_QWORD *)((char *)a1 + a2[7]));
  swift_release(*(_QWORD *)((char *)a1 + a2[8]));
  v7 = (char *)a1 + a2[10];
  v8 = sub_100004FC8(&qword_100158D38);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t *sub_10005A110(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;

  v6 = *a2;
  v7 = a2[1];
  *a1 = *a2;
  a1[1] = v7;
  v8 = a3[6];
  v9 = (uint64_t *)((char *)a1 + v8);
  v10 = (uint64_t *)((char *)a2 + v8);
  swift_retain(v6);
  swift_retain(v7);
  v11 = sub_100004FC8(&qword_100158D30);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for WithCurrentHostingControllerAction(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
    v13 = 1;
  }
  else
  {
    v14 = *v10;
    *v9 = *v10;
    swift_retain(v14);
    v13 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v11, v13);
  v15 = a3[7];
  v16 = a3[8];
  v17 = (char *)a1 + v15;
  v18 = (char *)a2 + v15;
  v19 = *(_QWORD *)v18;
  LOBYTE(v18) = v18[8];
  *(_QWORD *)v17 = v19;
  v17[8] = (char)v18;
  v20 = (char *)a1 + v16;
  v21 = (char *)a2 + v16;
  v22 = *(_QWORD *)v21;
  LOBYTE(v21) = v21[8];
  *(_QWORD *)v20 = v22;
  v20[8] = (char)v21;
  v23 = a3[10];
  *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  v24 = (char *)a1 + v23;
  v25 = (char *)a2 + v23;
  swift_retain(v19);
  swift_retain(v22);
  v26 = sub_100004FC8(&qword_100158D38);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
  return a1;
}

uint64_t *sub_10005A248(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_retain(v6);
  swift_release(v7);
  v8 = a2[1];
  v9 = a1[1];
  a1[1] = v8;
  swift_retain(v8);
  swift_release(v9);
  if (a1 != a2)
  {
    v10 = a3[6];
    v11 = (uint64_t *)((char *)a1 + v10);
    v12 = (uint64_t *)((char *)a2 + v10);
    sub_10000BA50((uint64_t)a1 + v10, &qword_100158D30);
    v13 = sub_100004FC8(&qword_100158D30);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for WithCurrentHostingControllerAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
      v15 = 1;
    }
    else
    {
      v16 = *v12;
      *v11 = *v12;
      swift_retain(v16);
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v13, v15);
  }
  v17 = a3[7];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = *(_QWORD *)v19;
  LOBYTE(v19) = v19[8];
  v21 = *(_QWORD *)v18;
  *(_QWORD *)v18 = v20;
  v18[8] = (char)v19;
  swift_retain(v20);
  swift_release(v21);
  v22 = a3[8];
  v23 = (char *)a1 + v22;
  v24 = (char *)a2 + v22;
  v25 = *(_QWORD *)v24;
  LOBYTE(v24) = v24[8];
  v26 = *(_QWORD *)v23;
  *(_QWORD *)v23 = v25;
  v23[8] = (char)v24;
  swift_retain(v25);
  swift_release(v26);
  *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  v27 = a3[10];
  v28 = (char *)a1 + v27;
  v29 = (char *)a2 + v27;
  v30 = sub_100004FC8(&qword_100158D38);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 24))(v28, v29, v30);
  return a1;
}

_OWORD *sub_10005A3D0(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;

  *a1 = *a2;
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_100004FC8(&qword_100158D30);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for WithCurrentHostingControllerAction(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v11 = a3[7];
  v12 = a3[8];
  v13 = (char *)a1 + v11;
  v14 = (char *)a2 + v11;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  v15 = (char *)a1 + v12;
  v16 = (char *)a2 + v12;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v15[8] = v16[8];
  v17 = a3[10];
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = sub_100004FC8(&qword_100158D38);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
  return a1;
}

uint64_t *sub_10005A4F4(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  v7 = a1[1];
  a1[1] = a2[1];
  swift_release(v7);
  if (a1 != a2)
  {
    v8 = a3[6];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    sub_10000BA50((uint64_t)a1 + v8, &qword_100158D30);
    v11 = sub_100004FC8(&qword_100158D30);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for WithCurrentHostingControllerAction(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  v13 = a3[7];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = *(_QWORD *)v15;
  LOBYTE(v15) = v15[8];
  v17 = *(_QWORD *)v14;
  *(_QWORD *)v14 = v16;
  v14[8] = (char)v15;
  swift_release(v17);
  v18 = a3[8];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = *(_QWORD *)v20;
  LOBYTE(v20) = v20[8];
  v22 = *(_QWORD *)v19;
  *(_QWORD *)v19 = v21;
  v19[8] = (char)v20;
  swift_release(v22);
  v23 = a3[10];
  *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  v24 = (char *)a1 + v23;
  v25 = (char *)a2 + v23;
  v26 = sub_100004FC8(&qword_100158D38);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 40))(v24, v25, v26);
  return a1;
}

uint64_t sub_10005A65C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005A668);
}

uint64_t sub_10005A668(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100004FC8(&qword_100158D40);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      v10 = sub_100004FC8(&qword_100158D38);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 40);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t sub_10005A710(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005A71C);
}

char *sub_10005A71C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = sub_100004FC8(&qword_100158D40);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = sub_100004FC8(&qword_100158D38);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 40);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for SettingsNavigationSplitView(uint64_t a1)
{
  uint64_t result;

  result = qword_100158DA0;
  if (!qword_100158DA0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SettingsNavigationSplitView);
  return result;
}

void sub_10005A7FC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[7];

  v6[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v6[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  sub_10005A8D8(319, &qword_100158DB0, (uint64_t (*)(uint64_t))&type metadata accessor for WithCurrentHostingControllerAction, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v6[2] = *(_QWORD *)(v2 - 8) + 64;
    v6[3] = "\t";
    v6[4] = "\t";
    v6[5] = (char *)&value witness table for Builtin.Int64 + 64;
    sub_10005A8D8(319, (unint64_t *)&unk_100158DB8, type metadata accessor for SettingsAppNavigationModel, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Bindable);
    if (v5 <= 0x3F)
    {
      v6[6] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 7, v6, a1 + 16);
    }
  }
}

void sub_10005A8D8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t sub_10005A930(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10012A690, 1);
}

uint64_t sub_10005A940(char a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v8 = swift_allocObject(&unk_10014A420, 50, 7);
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = a2;
  *(_QWORD *)(v8 + 40) = a3;
  *(_BYTE *)(v8 + 48) = a4;
  *(_BYTE *)(v8 + 49) = a1;
  v9 = swift_allocObject(&unk_10014A448, 50, 7);
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 32) = a2;
  *(_QWORD *)(v9 + 40) = a3;
  *(_BYTE *)(v9 + 48) = a4;
  *(_BYTE *)(v9 + 49) = a1;
  swift_retain_n(a2, 2);
  swift_retain_n(a3, 2);
  Binding.init(get:set:)(&v11, sub_1000643D4, v8, sub_10006441C, v9, &type metadata for Bool);
  return v11;
}

uint64_t sub_10005AA18@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t KeyPath;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(_QWORD *, _QWORD, uint64_t, uint64_t);
  char *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t OpaqueTypeConformance2;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t (**v135)(unsigned __int8 *);
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t (**v145)(uint64_t);
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  char *v170;
  void (*v171)(char *, uint64_t);
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  char *v200;
  uint64_t v201;
  void *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t (**v209)();
  uint64_t v210;
  unint64_t v211;
  char *v212;
  uint64_t v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  uint64_t v222;
  char *v223;
  void (*v224)(char *, uint64_t);
  void (*v225)(char *, uint64_t);
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  int v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  char *v238;
  char *v239;
  void (*v240)(char *, uint64_t);
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  char v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  char *v255;
  char *v256;
  char *v257;
  void (*v258)(char *, uint64_t);
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  char v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  char *v272;
  uint64_t v273;
  char *v274;
  char *v275;
  void (*v276)(char *, uint64_t);
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  int v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  char *v288;
  char *v289;
  char *v290;
  void (*v291)(char *, uint64_t);
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  int v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  char *v303;
  char *v304;
  char *v305;
  void (*v306)(char *, uint64_t);
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  id v310;
  uint64_t v311;
  uint64_t v312;
  char *v313;
  char v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  char v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  char *v324;
  char *v325;
  char *v326;
  char *v327;
  void (*v328)(char *, uint64_t);
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  id v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  char v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  char v341;
  uint64_t v342;
  uint64_t v343;
  char *v344;
  uint64_t v345;
  unint64_t v346;
  uint64_t v347;
  uint64_t v348;
  char *v349;
  uint64_t v350;
  char *v351;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  char *v363;
  uint64_t v364;
  char *v365;
  _QWORD *v366;
  char *v367;
  uint64_t v368;
  char *v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  char *v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  char *v378;
  uint64_t v379;
  char *v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  char *v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  char *v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  char *v397;
  uint64_t v398;
  uint64_t v399;
  char *v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  char *v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  char *v413;
  char *v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  char *v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  char *v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  char *v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  char *v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  char *v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  char *v451;
  char *v452;
  char *v453;
  uint64_t appended;
  char *v455;
  char *v456;
  char *v457;
  char *v458;
  char *v459;
  char *v460;
  char *v461;
  char *v462;
  uint64_t v463;
  char *v464;
  void (*v465)(char *, uint64_t, uint64_t);
  char *v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  char *v470;
  uint64_t v471;
  char *v472;
  uint64_t *v473;
  char v474[8];
  uint64_t v475;
  char v476[8];
  uint64_t v477;
  char *v478;
  char *v479;
  char v480;
  uint64_t v481;
  void *v482;
  uint64_t v483;
  void *v484;
  uint64_t v485;

  v2 = v1;
  v450 = a1;
  v3 = sub_100004FC8(&qword_100158E00);
  v436 = *(_QWORD *)(v3 - 8);
  v4 = __chkstk_darwin(v3);
  v466 = (char *)&v362 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v470 = (char *)&v362 - v6;
  v435 = type metadata accessor for SettingsAppPrimaryNavigationMode(0);
  v434 = *(_QWORD *)(v435 - 8);
  __chkstk_darwin(v435);
  v433 = (char *)&v362 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v429 = type metadata accessor for PPTTestCase.Name(0);
  v418 = *(_QWORD *)(v429 - 8);
  __chkstk_darwin(v429);
  v428 = (char *)&v362 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v395 = type metadata accessor for BalancedNavigationSplitViewStyle(0);
  v396 = *(_QWORD *)(v395 - 8);
  __chkstk_darwin(v395);
  v391 = (char *)&v362 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SettingsNavigationSplitView(0);
  v386 = *(_QWORD *)(v10 - 8);
  v467 = *(_QWORD *)(v386 + 64);
  __chkstk_darwin(v10);
  v468 = (uint64_t)&v362 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v390 = type metadata accessor for ResetSettingsNavigationStateAction(0);
  v388 = *(_QWORD *)(v390 - 8);
  __chkstk_darwin(v390);
  v385 = (char *)&v362 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v382 = type metadata accessor for ClearSettingsNavigationPathAction(0);
  v381 = *(_QWORD *)(v382 - 8);
  __chkstk_darwin(v382);
  v378 = (char *)&v362 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100004FC8(&qword_100158D38);
  v370 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v365 = (char *)&v362 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100004FC8(&qword_100158E08);
  __chkstk_darwin(v16);
  v366 = (uint64_t *)((char *)&v362 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  appended = type metadata accessor for AppendSettingsNavigationPathAction(0);
  v371 = *(_QWORD *)(appended - 8);
  __chkstk_darwin(appended);
  v367 = (char *)&v362 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for NavigationSplitViewVisibility(0);
  v364 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v21 = (char *)&v362 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100004FC8(&qword_100158E10);
  __chkstk_darwin(v22);
  v363 = (char *)&v362 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v471 = sub_100004FC8(&qword_100158E18);
  v368 = *(_QWORD *)(v471 - 8);
  __chkstk_darwin(v471);
  v25 = (char *)&v362 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v372 = sub_100004FC8(&qword_100158E20);
  v373 = *(_QWORD *)(v372 - 8);
  __chkstk_darwin(v372);
  v472 = (char *)&v362 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v375 = sub_100004FC8(&qword_100158E28);
  v376 = *(_QWORD *)(v375 - 8);
  __chkstk_darwin(v375);
  v369 = (char *)&v362 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v377 = sub_100004FC8(&qword_100158E30);
  v379 = *(_QWORD *)(v377 - 8);
  __chkstk_darwin(v377);
  v374 = (char *)&v362 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v383 = sub_100004FC8(&qword_100158E38);
  v384 = *(_QWORD *)(v383 - 8);
  __chkstk_darwin(v383);
  v451 = (char *)&v362 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v387 = sub_100004FC8(&qword_100158E40);
  v389 = *(_QWORD *)(v387 - 8);
  __chkstk_darwin(v387);
  v380 = (char *)&v362 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v394 = sub_100004FC8(&qword_100158E48);
  v393 = *(_QWORD *)(v394 - 8);
  __chkstk_darwin(v394);
  v452 = (char *)&v362 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v392 = sub_100004FC8(&qword_100158E50);
  __chkstk_darwin(v392);
  v397 = (char *)&v362 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v399 = sub_100004FC8(&qword_100158E58);
  __chkstk_darwin(v399);
  v398 = (uint64_t)&v362 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v402 = sub_100004FC8(&qword_100158E60);
  v401 = *(_QWORD *)(v402 - 8);
  __chkstk_darwin(v402);
  v400 = (char *)&v362 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v404 = sub_100004FC8(&qword_100158E68);
  v403 = *(_QWORD *)(v404 - 8);
  __chkstk_darwin(v404);
  v453 = (char *)&v362 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v407 = sub_100004FC8(&qword_100158E70);
  v406 = *(_QWORD *)(v407 - 8);
  __chkstk_darwin(v407);
  v405 = (char *)&v362 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v409 = sub_100004FC8(&qword_100158E78);
  v408 = *(_QWORD *)(v409 - 8);
  __chkstk_darwin(v409);
  v455 = (char *)&v362 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v411 = sub_100004FC8(&qword_100158E80);
  v410 = *(_QWORD *)(v411 - 8);
  __chkstk_darwin(v411);
  v464 = (char *)&v362 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v416 = sub_100004FC8(&qword_100158E88);
  v415 = *(_QWORD *)(v416 - 8);
  __chkstk_darwin(v416);
  v413 = (char *)&v362 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v412 = sub_100004FC8(&qword_100158E90);
  __chkstk_darwin(v412);
  v414 = (char *)&v362 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v420 = sub_100004FC8(&qword_100158E98);
  __chkstk_darwin(v420);
  v417 = (uint64_t)&v362 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v422 = sub_100004FC8(&qword_100158EA0);
  v421 = *(_QWORD *)(v422 - 8);
  __chkstk_darwin(v422);
  v419 = (char *)&v362 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v425 = sub_100004FC8(&qword_100158EA8);
  v424 = *(_QWORD *)(v425 - 8);
  __chkstk_darwin(v425);
  v423 = (char *)&v362 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v427 = sub_100004FC8(&qword_100158EB0);
  v426 = *(_QWORD *)(v427 - 8);
  __chkstk_darwin(v427);
  v456 = (char *)&v362 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v431 = sub_100004FC8(&qword_100158EB8);
  v430 = *(_QWORD *)(v431 - 8);
  __chkstk_darwin(v431);
  v457 = (char *)&v362 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v437 = sub_100004FC8(&qword_100158EC0);
  v432 = *(_QWORD *)(v437 - 8);
  __chkstk_darwin(v437);
  v458 = (char *)&v362 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v439 = sub_100004FC8(&qword_100158EC8);
  v438 = *(_QWORD *)(v439 - 8);
  __chkstk_darwin(v439);
  v459 = (char *)&v362 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v441 = sub_100004FC8(&qword_100158ED0);
  v440 = *(_QWORD *)(v441 - 8);
  __chkstk_darwin(v441);
  v460 = (char *)&v362 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v443 = sub_100004FC8(&qword_100158ED8);
  v442 = *(_QWORD *)(v443 - 8);
  __chkstk_darwin(v443);
  v461 = (char *)&v362 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v448 = sub_100004FC8(&qword_100158EE0);
  v447 = *(_QWORD *)(v448 - 8);
  __chkstk_darwin(v448);
  v462 = (char *)&v362 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v446 = sub_100004FC8(&qword_100158EE8);
  v445 = *(_QWORD *)(v446 - 8);
  __chkstk_darwin(v446);
  v444 = (char *)&v362 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  v449 = v3;
  v463 = swift_allocBox(v3);
  v53 = v52;
  v465 = (void (*)(char *, uint64_t, uint64_t))(v1 + *(int *)(v10 + 40));
  Bindable.wrappedValue.getter(&v481);
  v54 = v481;
  v55 = sub_1000DB598();
  swift_release(v54);
  v56 = type metadata accessor for PrimarySettingsListModel(0);
  v57 = sub_100007828(&qword_100158EF0, type metadata accessor for PrimarySettingsListModel, (uint64_t)&unk_10011B328);
  v469 = v53;
  v58 = Bindable<A>.init(wrappedValue:)(v55, v56, v57);
  static NavigationSplitViewVisibility.all.getter(v58);
  v59 = v363;
  static Binding.constant(_:)(v21, v19);
  (*(void (**)(char *, uint64_t))(v364 + 8))(v21, v19);
  v477 = v2;
  v475 = v2;
  v473 = (uint64_t *)v2;
  v60 = sub_100004FC8(&qword_100158EF8);
  v61 = sub_100004FC8(&qword_100158F00);
  v62 = sub_1000627C8();
  v63 = sub_100007868(&qword_100158F50, &qword_100158F00, (uint64_t)&protocol conformance descriptor for NavigationStack<A, B>);
  v64 = v25;
  NavigationSplitView.init<>(columnVisibility:sidebar:detail:)(v59, sub_1000627B8, v476, sub_1000627C0, v474, v60, v61, v62, v63);
  v364 = *(int *)(v10 + 36);
  v65 = Namespace.wrappedValue.getter(*(_QWORD *)(v2 + v364));
  v66 = v365;
  Bindable.projectedValue.getter(v14);
  KeyPath = swift_getKeyPath(&unk_100116968);
  v68 = v366;
  Bindable<A>.subscript.getter(v366, KeyPath, v14);
  swift_release(KeyPath);
  v370 = *(_QWORD *)(v370 + 8);
  v69 = v14;
  ((void (*)(char *, uint64_t))v370)(v66, v14);
  v70 = sub_100004FC8(&qword_100158F58);
  v71 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 56);
  v71(v68, 0, 1, v70);
  v72 = v367;
  v73 = v68;
  AppendSettingsNavigationPathAction.init(namespace:navigationPath:)(v65, 0, v68);
  v74 = sub_100007868(&qword_100158F60, &qword_100158E18, (uint64_t)&protocol conformance descriptor for NavigationSplitView<A, B, C>);
  v75 = v471;
  View.appendSettingsNavigationPathAction(_:)(v72, v471, v74);
  (*(void (**)(char *, uint64_t))(v371 + 8))(v72, appended);
  (*(void (**)(char *, uint64_t))(v368 + 8))(v64, v75);
  v76 = v364;
  v77 = Namespace.wrappedValue.getter(*(uint64_t *)((char *)v473 + v364));
  Bindable.projectedValue.getter(v69);
  v78 = swift_getKeyPath(&unk_100116968);
  Bindable<A>.subscript.getter(v73, v78, v69);
  swift_release(v78);
  appended = v69;
  ((void (*)(char *, uint64_t))v370)(v66, v69);
  v71(v73, 0, 1, v70);
  v79 = v378;
  v80 = v77;
  v81 = v468;
  ClearSettingsNavigationPathAction.init(namespace:navigationPath:)(v80, 0, v73);
  v481 = v471;
  v482 = (void *)v74;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v481, &opaque type descriptor for <<opaque return type of View.appendSettingsNavigationPathAction(_:)>>, 1);
  v83 = v369;
  v84 = v372;
  v85 = v472;
  View.clearSettingsNavigationPathAction(_:)(v79, v372, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v381 + 8))(v79, v382);
  v86 = v84;
  (*(void (**)(char *, uint64_t))(v373 + 8))(v85, v84);
  v87 = (uint64_t)v473;
  v88 = Namespace.wrappedValue.getter(*(uint64_t *)((char *)v473 + v76));
  v89 = v81;
  sub_1000076F0(v87, v81, type metadata accessor for SettingsNavigationSplitView);
  v90 = *(unsigned __int8 *)(v386 + 80);
  v467 += (v90 + 16) & ~v90;
  v91 = (v90 + 16) & ~v90;
  v471 = v91;
  v472 = (char *)(v90 | 7);
  v92 = swift_allocObject(&unk_10014A088, v467, v90 | 7);
  sub_100007670(v81, v92 + v91, type metadata accessor for SettingsNavigationSplitView);
  v93 = v385;
  ResetSettingsNavigationStateAction.init(namespace:onReset:)(v88, 0, sub_100062948, v92);
  v481 = v86;
  v482 = (void *)OpaqueTypeConformance2;
  v94 = swift_getOpaqueTypeConformance2(&v481, &opaque type descriptor for <<opaque return type of View.clearSettingsNavigationPathAction(_:)>>, 1);
  v95 = v374;
  v96 = v93;
  v97 = v93;
  v98 = v375;
  View.resetSettingsNavigationStateAction(_:)(v97, v375, v94);
  (*(void (**)(char *, uint64_t))(v388 + 8))(v96, v390);
  v99 = (*(uint64_t (**)(char *, uint64_t))(v376 + 8))(v83, v98);
  v100 = v391;
  static NavigationSplitViewStyle<>.balanced.getter(v99);
  v481 = v98;
  v482 = (void *)v94;
  v101 = swift_getOpaqueTypeConformance2(&v481, &opaque type descriptor for <<opaque return type of View.resetSettingsNavigationStateAction(_:)>>, 1);
  v102 = sub_100007828(&qword_100158F68, (uint64_t (*)(uint64_t))&type metadata accessor for BalancedNavigationSplitViewStyle, (uint64_t)&protocol conformance descriptor for BalancedNavigationSplitViewStyle);
  v103 = v377;
  v104 = (void *)v395;
  View.navigationSplitViewStyle<A>(_:)(v100, v377, v395, v101, v102);
  (*(void (**)(char *, void *))(v396 + 8))(v100, v104);
  (*(void (**)(char *, uint64_t))(v379 + 8))(v95, v103);
  v105 = swift_getKeyPath(&unk_100116990);
  sub_1000076F0((uint64_t)v473, v89, type metadata accessor for SettingsNavigationSplitView);
  v106 = v467;
  v107 = swift_allocObject(&unk_10014A0B0, v467, v472);
  v108 = v471;
  sub_100007670(v89, v107 + v471, type metadata accessor for SettingsNavigationSplitView);
  v481 = v103;
  v482 = v104;
  v483 = v101;
  v484 = (void *)v102;
  v109 = swift_getOpaqueTypeConformance2(&v481, &opaque type descriptor for <<opaque return type of View.navigationSplitViewStyle<A>(_:)>>, 1);
  v110 = sub_100062988();
  v111 = v380;
  v112 = v383;
  v113 = v451;
  View._onEnvironmentChange<A>(_:perform:)(v105, sub_10006297C, v107, v383, v109, v110);
  swift_release(v105);
  swift_release(v107);
  v114 = v113;
  v115 = v112;
  (*(void (**)(char *, uint64_t))(v384 + 8))(v114, v112);
  v116 = swift_getKeyPath(&unk_1001169C0);
  v117 = (uint64_t)v473;
  sub_1000076F0((uint64_t)v473, v89, type metadata accessor for SettingsNavigationSplitView);
  v118 = swift_allocObject(&unk_10014A0D8, v106, v472);
  sub_100007670(v89, v118 + v108, type metadata accessor for SettingsNavigationSplitView);
  v119 = sub_100005430((uint64_t *)&unk_10015C3F0);
  v481 = v115;
  v482 = (void *)v119;
  v483 = v109;
  v484 = (void *)v110;
  v120 = swift_getOpaqueTypeConformance2(&v481, &opaque type descriptor for <<opaque return type of View._onEnvironmentChange<A>(_:perform:)>>, 1);
  v121 = sub_100007828((unint64_t *)&unk_10015C660, (uint64_t (*)(uint64_t))&type metadata accessor for ScenePhase, (uint64_t)&protocol conformance descriptor for ScenePhase);
  v122 = v387;
  View._onEnvironmentChange<A>(_:perform:)(v116, sub_100062A2C, v118, v387, v120, v121);
  swift_release(v116);
  swift_release(v118);
  (*(void (**)(char *, uint64_t))(v389 + 8))(v111, v122);
  v123 = *(_QWORD *)(v117 + 8);
  if (qword_100156C30 != -1)
    swift_once(&qword_100156C30, sub_1000465F8);
  TaskLocal.get()(&v481);
  v124 = v481;
  v125 = sub_1000D8AE4(v123, v481);
  swift_bridgeObjectRelease(v124);
  v126 = v473;
  v127 = v468;
  sub_1000076F0((uint64_t)v473, v468, type metadata accessor for SettingsNavigationSplitView);
  v128 = v467;
  v129 = swift_allocObject(&unk_10014A100, v467, v472);
  sub_100007670(v127, v129 + v108, type metadata accessor for SettingsNavigationSplitView);
  v130 = v393;
  v131 = (uint64_t)v397;
  v132 = v452;
  v133 = v394;
  (*(void (**)(char *, char *, uint64_t))(v393 + 16))(v397, v452, v394);
  v134 = v392;
  *(_QWORD *)(v131 + *(int *)(v392 + 52)) = v125;
  v135 = (uint64_t (**)(unsigned __int8 *))(v131 + *(int *)(v134 + 56));
  *v135 = sub_100062A3C;
  v135[1] = (uint64_t (*)(unsigned __int8 *))v129;
  (*(void (**)(char *, uint64_t))(v130 + 8))(v132, v133);
  v136 = (uint64_t)v126;
  v137 = *v126;
  TaskLocal.get()(&v481);
  v138 = v481;
  v139 = sub_1000D8AD8(v137, v481);
  swift_bridgeObjectRelease(v138);
  sub_1000076F0((uint64_t)v126, v127, type metadata accessor for SettingsNavigationSplitView);
  v140 = v472;
  v141 = swift_allocObject(&unk_10014A128, v128, v472);
  v142 = v471;
  sub_100007670(v127, v141 + v471, type metadata accessor for SettingsNavigationSplitView);
  v143 = v398;
  sub_100018C00(v131, v398, &qword_100158E50);
  v144 = v399;
  *(_QWORD *)(v143 + *(int *)(v399 + 52)) = v139;
  v145 = (uint64_t (**)(uint64_t))(v143 + *(int *)(v144 + 56));
  *v145 = sub_100062A7C;
  v145[1] = (uint64_t (*)(uint64_t))v141;
  sub_10000BA50(v131, &qword_100158E50);
  Bindable.wrappedValue.getter(&v481);
  v146 = v481;
  v147 = swift_getKeyPath(&unk_1001169F0);
  v481 = v146;
  v148 = sub_100007828((unint64_t *)&qword_100158F78, type metadata accessor for SettingsAppNavigationModel, (uint64_t)&unk_10011B030);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v481, v147, v148);
  swift_release(v147);
  LOBYTE(v141) = *(_BYTE *)(v146 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__shouldDismissSearch);
  swift_release(v146);
  LOBYTE(v481) = v141;
  sub_1000076F0(v136, v127, type metadata accessor for SettingsNavigationSplitView);
  v149 = v467;
  v150 = swift_allocObject(&unk_10014A150, v467, v140);
  sub_100007670(v127, v150 + v142, type metadata accessor for SettingsNavigationSplitView);
  v151 = sub_100007868(&qword_100158F80, &qword_100158E58, (uint64_t)&protocol conformance descriptor for SubscriptionView<A, B>);
  v152 = v149;
  v153 = v400;
  View.onChange<A>(of:initial:_:)(&v481, 0, sub_100062C70, v150, v144, &type metadata for Bool, v151, &protocol witness table for Bool);
  swift_release(v150);
  sub_10000BA50(v143, &qword_100158E58);
  v154 = static String._unconditionallyBridgeFromObjectiveC(_:)(CSQueryContinuationActionType);
  v156 = v155;
  sub_1000076F0((uint64_t)v473, v127, type metadata accessor for SettingsNavigationSplitView);
  v157 = swift_allocObject(&unk_10014A178, v152, v472);
  sub_100007670(v127, v157 + v471, type metadata accessor for SettingsNavigationSplitView);
  v481 = v144;
  v482 = &type metadata for Bool;
  v483 = v151;
  v484 = &protocol witness table for Bool;
  v158 = swift_getOpaqueTypeConformance2(&v481, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v159 = v402;
  View.onContinueUserActivity(_:perform:)(v154, v156, sub_100062CC0, v157, v402, v158);
  swift_bridgeObjectRelease(v156);
  swift_release(v157);
  (*(void (**)(char *, uint64_t))(v401 + 8))(v153, v159);
  v160 = v159;
  if (qword_100156C70 != -1)
    swift_once(&qword_100156C70, sub_100062AF4);
  v161 = v429;
  v162 = sub_100007808(v429, (uint64_t)qword_10015D208);
  v163 = v418;
  v164 = v428;
  v452 = *(char **)(v418 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v452)(v428, v162, v161);
  v165 = v468;
  sub_1000076F0((uint64_t)v473, v468, type metadata accessor for SettingsNavigationSplitView);
  v166 = swift_allocObject(&unk_10014A1A0, v152, v472);
  sub_100007670(v165, v166 + v471, type metadata accessor for SettingsNavigationSplitView);
  v481 = v160;
  v482 = (void *)v158;
  v167 = swift_getOpaqueTypeConformance2(&v481, &opaque type descriptor for <<opaque return type of View.onContinueUserActivity(_:perform:)>>, 1);
  v168 = v405;
  v169 = v404;
  v170 = v453;
  View.onTest(_:handler:)(v164, sub_100062D00, v166, v404, v167);
  swift_release(v166);
  v171 = *(void (**)(char *, uint64_t))(v163 + 8);
  v172 = v169;
  v171(v164, v161);
  (*(void (**)(char *, uint64_t))(v403 + 8))(v170, v169);
  v173 = v407;
  if (qword_100156C60 != -1)
    swift_once(&qword_100156C60, sub_100062AAC);
  v174 = sub_100007808(v161, (uint64_t)qword_10015D1D8);
  ((void (*)(char *, uint64_t, uint64_t))v452)(v164, v174, v161);
  v175 = v468;
  sub_1000076F0((uint64_t)v473, v468, type metadata accessor for SettingsNavigationSplitView);
  v176 = swift_allocObject(&unk_10014A1C8, v467, v472);
  sub_100007670(v175, v176 + v471, type metadata accessor for SettingsNavigationSplitView);
  v481 = v172;
  v482 = (void *)v167;
  v177 = swift_getOpaqueTypeConformance2(&v481, &opaque type descriptor for <<opaque return type of View.onTest(_:handler:)>>, 1);
  View.onTest(_:handler:)(v164, sub_100062D5C, v176, v173, v177);
  swift_release(v176);
  v171(v164, v161);
  (*(void (**)(char *, uint64_t))(v406 + 8))(v168, v173);
  v453 = (char *)v171;
  v178 = v173;
  if (qword_100156C68 != -1)
    swift_once(&qword_100156C68, sub_100062AD0);
  v179 = sub_100007808(v161, (uint64_t)qword_10015D1F0);
  v180 = v452;
  ((void (*)(char *, uint64_t, uint64_t))v452)(v164, v179, v161);
  v181 = v468;
  sub_1000076F0((uint64_t)v473, v468, type metadata accessor for SettingsNavigationSplitView);
  v182 = v467;
  v183 = swift_allocObject(&unk_10014A1F0, v467, v472);
  v184 = v471;
  sub_100007670(v181, v183 + v471, type metadata accessor for SettingsNavigationSplitView);
  v481 = v178;
  v482 = (void *)v177;
  v185 = swift_getOpaqueTypeConformance2(&v481, &opaque type descriptor for <<opaque return type of View.onTest(_:handler:)>>, 1);
  v186 = v409;
  v187 = v455;
  View.onTest(_:handler:)(v164, sub_100062D5C, v183, v409, v185);
  swift_release(v183);
  ((void (*)(char *, uint64_t))v453)(v164, v161);
  (*(void (**)(char *, uint64_t))(v408 + 8))(v187, v186);
  v188 = v182;
  v189 = v184;
  if (qword_100156C78 != -1)
    swift_once(&qword_100156C78, sub_100062B18);
  v190 = sub_100007808(v161, (uint64_t)qword_10015D220);
  ((void (*)(char *, uint64_t, uint64_t))v180)(v164, v190, v161);
  v191 = (uint64_t)v473;
  v192 = v468;
  sub_1000076F0((uint64_t)v473, v468, type metadata accessor for SettingsNavigationSplitView);
  v193 = swift_allocObject(&unk_10014A218, v188, v472);
  sub_100007670(v192, v193 + v189, type metadata accessor for SettingsNavigationSplitView);
  v481 = v186;
  v482 = (void *)v185;
  v194 = swift_getOpaqueTypeConformance2(&v481, &opaque type descriptor for <<opaque return type of View.onTest(_:handler:)>>, 1);
  v195 = v413;
  v196 = v411;
  v197 = v189;
  v198 = v188;
  v199 = v464;
  View.onTest(_:handler:)(v164, sub_100062D5C, v193, v411, v194);
  swift_release(v193);
  ((void (*)(char *, uint64_t))v453)(v164, v161);
  (*(void (**)(char *, uint64_t))(v410 + 8))(v199, v196);
  sub_1000076F0(v191, v192, type metadata accessor for SettingsNavigationSplitView);
  v200 = v472;
  v201 = swift_allocObject(&unk_10014A240, v198, v472);
  sub_100007670(v192, v201 + v197, type metadata accessor for SettingsNavigationSplitView);
  LOBYTE(v478) = 0;
  swift_retain(v201);
  State.init(wrappedValue:)(&v481, &v478, &type metadata for Bool);
  LOBYTE(v199) = v481;
  v202 = v482;
  v203 = v415;
  v204 = (uint64_t)v414;
  v205 = v416;
  (*(void (**)(char *, char *, uint64_t))(v415 + 16))(v414, v195, v416);
  swift_release(v201);
  v206 = v204 + *(int *)(v412 + 36);
  *(_QWORD *)v206 = sub_100062DAC;
  *(_QWORD *)(v206 + 8) = v201;
  *(_BYTE *)(v206 + 16) = (_BYTE)v199;
  *(_QWORD *)(v206 + 24) = v202;
  (*(void (**)(char *, uint64_t))(v203 + 8))(v195, v205);
  v207 = v417;
  sub_100018C00(v204, v417, &qword_100158E90);
  v208 = v420;
  v209 = (uint64_t (**)())(v207 + *(int *)(v420 + 36));
  v210 = v463;
  *v209 = sub_100062DB8;
  v209[1] = (uint64_t (*)())v210;
  swift_retain(v210);
  sub_10000BA50(v204, &qword_100158E90);
  Bindable.wrappedValue.getter(&v481);
  v484 = (void *)type metadata accessor for SettingsAppNavigationModel(0);
  v485 = sub_100007828(&qword_100158F88, type metadata accessor for SettingsAppNavigationModel, (uint64_t)&unk_10011B04C);
  v211 = sub_100062DD4();
  v212 = v419;
  View.navigationPresentationAdaptor(_:)(&v481, v208, v211);
  sub_10000BA50(v207, &qword_100158E98);
  sub_100005474(&v481);
  v481 = v208;
  v482 = (void *)v211;
  v213 = swift_getOpaqueTypeConformance2(&v481, &opaque type descriptor for <<opaque return type of View.navigationPresentationAdaptor(_:)>>, 1);
  v214 = v423;
  v215 = v422;
  View.navigationTransitionEagerRenderEnabled(_:)(1, v422, v213);
  (*(void (**)(char *, uint64_t))(v421 + 8))(v212, v215);
  v216 = v434;
  v217 = v433;
  v218 = v435;
  (*(void (**)(char *, _QWORD, uint64_t))(v434 + 104))(v433, enum case for SettingsAppPrimaryNavigationMode.stateDriven(_:), v435);
  v481 = v215;
  v482 = (void *)v213;
  v455 = (char *)swift_getOpaqueTypeConformance2(&v481, &opaque type descriptor for <<opaque return type of View.navigationTransitionEagerRenderEnabled(_:)>>, 1);
  v219 = v425;
  View.settingsAppPrimaryNavigationMode(_:)(v217, v425, v455);
  (*(void (**)(char *, uint64_t))(v216 + 8))(v217, v218);
  (*(void (**)(char *, uint64_t))(v424 + 8))(v214, v219);
  v220 = v436;
  v465 = *(void (**)(char *, uint64_t, uint64_t))(v436 + 16);
  v221 = v466;
  v222 = v449;
  v465(v466, v469, v449);
  v223 = v470;
  Bindable.projectedValue.getter(v222);
  v224 = *(void (**)(char *, uint64_t))(v220 + 8);
  v224(v221, v222);
  v225 = v224;
  v464 = (char *)v224;
  v226 = swift_getKeyPath(&unk_100116A18);
  Bindable<A>.subscript.getter(&v481, v226, v222);
  swift_release(v226);
  v225(v223, v222);
  v227 = v481;
  v228 = (uint64_t)v482;
  LOBYTE(v199) = v483;
  sub_1000076F0((uint64_t)v473, v192, type metadata accessor for SettingsNavigationSplitView);
  v229 = swift_allocObject(&unk_10014A268, v467, v200);
  sub_100007670(v192, v229 + v471, type metadata accessor for SettingsNavigationSplitView);
  v230 = sub_10005A940(0, v227, v228, (char)v199);
  v232 = v231;
  LODWORD(v452) = v233;
  v234 = swift_allocObject(&unk_10014A290, 56, 7);
  *(_QWORD *)(v234 + 16) = v227;
  *(_QWORD *)(v234 + 24) = v228;
  *(_BYTE *)(v234 + 32) = (_BYTE)v199;
  *(_BYTE *)(v234 + 33) = 0;
  *(_QWORD *)(v234 + 40) = sub_10006306C;
  *(_QWORD *)(v234 + 48) = v229;
  swift_retain(v227);
  swift_retain(v228);
  swift_retain(v229);
  v235 = sub_100004FC8(&qword_100158FB0);
  v453 = (char *)v235;
  v478 = (char *)v219;
  v479 = v455;
  v236 = swift_getOpaqueTypeConformance2(&v478, &opaque type descriptor for <<opaque return type of View.settingsAppPrimaryNavigationMode(_:)>>, 1);
  appended = v236;
  v455 = (char *)sub_10006397C();
  v355 = v235;
  v359 = v236;
  v237 = v427;
  v238 = v456;
  View.sheet<A>(isPresented:onDismiss:content:)(v230, v232, v452 & 1, 0, 0, sub_100063970, v234, v427, v355, v359, v455);
  swift_release(v228);
  swift_release(v227);
  swift_release(v229);
  swift_release(v232);
  swift_release(v234);
  swift_release(v230);
  (*(void (**)(char *, uint64_t))(v426 + 8))(v238, v237);
  v465(v221, v469, v222);
  v239 = v470;
  Bindable.projectedValue.getter(v222);
  v240 = (void (*)(char *, uint64_t))v464;
  ((void (*)(char *, uint64_t))v464)(v221, v222);
  v241 = swift_getKeyPath(&unk_100116A18);
  Bindable<A>.subscript.getter(&v478, v241, v222);
  swift_release(v241);
  v240(v239, v222);
  v242 = (uint64_t)v478;
  v243 = (uint64_t)v479;
  LOBYTE(v241) = v480;
  v244 = v468;
  sub_1000076F0((uint64_t)v473, v468, type metadata accessor for SettingsNavigationSplitView);
  v245 = swift_allocObject(&unk_10014A2B8, v467, v472);
  sub_100007670(v244, v245 + v471, type metadata accessor for SettingsNavigationSplitView);
  v246 = sub_10005A940(1, v242, v243, v241);
  v248 = v247;
  LOBYTE(v238) = v249;
  v250 = swift_allocObject(&unk_10014A2E0, 56, 7);
  *(_QWORD *)(v250 + 16) = v242;
  *(_QWORD *)(v250 + 24) = v243;
  *(_BYTE *)(v250 + 32) = v241;
  *(_BYTE *)(v250 + 33) = 1;
  *(_QWORD *)(v250 + 40) = sub_1000639FC;
  *(_QWORD *)(v250 + 48) = v245;
  swift_retain(v242);
  swift_retain(v243);
  swift_retain(v245);
  v251 = sub_100004FC8(&qword_100158FD0);
  v467 = v251;
  v481 = v237;
  v482 = v453;
  v483 = appended;
  v484 = v455;
  v252 = swift_getOpaqueTypeConformance2(&v481, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 1);
  v471 = v252;
  v472 = (char *)sub_100063A8C();
  v360 = v252;
  v253 = v238 & 1;
  v254 = v431;
  v255 = v457;
  View.sheet<A>(isPresented:onDismiss:content:)(v246, v248, v253, 0, 0, sub_100063A58, v250, v431, v251, v360, v472);
  swift_release(v243);
  swift_release(v242);
  swift_release(v245);
  swift_release(v248);
  swift_release(v250);
  swift_release(v246);
  (*(void (**)(char *, uint64_t))(v430 + 8))(v255, v254);
  v256 = v466;
  v465(v466, v469, v222);
  v257 = v470;
  Bindable.projectedValue.getter(v222);
  v258 = (void (*)(char *, uint64_t))v464;
  ((void (*)(char *, uint64_t))v464)(v256, v222);
  v259 = swift_getKeyPath(&unk_100116A18);
  Bindable<A>.subscript.getter(&v478, v259, v222);
  swift_release(v259);
  v258(v257, v222);
  v260 = (uint64_t)v478;
  v261 = (uint64_t)v479;
  LOBYTE(v245) = v480;
  v262 = v463;
  swift_retain(v463);
  v263 = sub_10005A940(2, v260, v261, v245);
  v265 = v264;
  LOBYTE(v256) = v266;
  v267 = swift_allocObject(&unk_10014A308, 56, 7);
  *(_QWORD *)(v267 + 16) = v260;
  *(_QWORD *)(v267 + 24) = v261;
  *(_BYTE *)(v267 + 32) = v245;
  *(_BYTE *)(v267 + 33) = 2;
  *(_QWORD *)(v267 + 40) = sub_100063B08;
  *(_QWORD *)(v267 + 48) = v262;
  swift_retain(v260);
  swift_retain(v261);
  swift_retain(v262);
  v268 = sub_100004FC8(&qword_100158FF0);
  v468 = v268;
  v481 = v254;
  v482 = (void *)v467;
  v483 = v471;
  v484 = v472;
  v269 = swift_getOpaqueTypeConformance2(&v481, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 1);
  v471 = v269;
  v472 = (char *)sub_100063B20(&qword_100158FF8, &qword_100158FF0, (void (*)(void))sub_100063B84, (uint64_t)&protocol conformance descriptor for <A> A?);
  v270 = v256 & 1;
  v271 = v437;
  v272 = v458;
  View.sheet<A>(isPresented:onDismiss:content:)(v263, v265, v270, 0, 0, sub_100063B14, v267, v437, v268, v269, v472);
  swift_release(v261);
  swift_release(v260);
  v273 = v463;
  swift_release(v463);
  swift_release(v265);
  swift_release(v267);
  swift_release(v263);
  (*(void (**)(char *, uint64_t))(v432 + 8))(v272, v271);
  v274 = v466;
  v465(v466, v469, v222);
  v275 = v470;
  Bindable.projectedValue.getter(v222);
  v276 = (void (*)(char *, uint64_t))v464;
  ((void (*)(char *, uint64_t))v464)(v274, v222);
  v277 = swift_getKeyPath(&unk_100116A18);
  Bindable<A>.subscript.getter(&v478, v277, v222);
  swift_release(v277);
  v276(v275, v222);
  v278 = (uint64_t)v478;
  v279 = (uint64_t)v479;
  LOBYTE(v260) = v480;
  swift_retain_n(v273, 2);
  v280 = sub_10005A940(6, v278, v279, v260);
  v282 = v281;
  LODWORD(v458) = v283;
  v284 = swift_allocObject(&unk_10014A330, 56, 7);
  *(_QWORD *)(v284 + 16) = v278;
  *(_QWORD *)(v284 + 24) = v279;
  *(_BYTE *)(v284 + 32) = v260;
  *(_BYTE *)(v284 + 33) = 6;
  *(_QWORD *)(v284 + 40) = sub_100063C3C;
  *(_QWORD *)(v284 + 48) = v273;
  swift_retain(v278);
  swift_retain(v279);
  swift_retain(v273);
  v285 = sub_100004FC8(&qword_100159018);
  v467 = v285;
  v481 = v271;
  v482 = (void *)v468;
  v483 = v471;
  v484 = v472;
  v286 = swift_getOpaqueTypeConformance2(&v481, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 1);
  v471 = v286;
  v472 = (char *)sub_100063B20(&qword_100159020, &qword_100159018, (void (*)(void))sub_100063C54, (uint64_t)&protocol conformance descriptor for <A> A?);
  v356 = v285;
  v361 = v286;
  v287 = v439;
  v288 = v459;
  View.fullScreenCover<A>(isPresented:onDismiss:content:)(v280, v282, v458 & 1, sub_100063C20, v273, sub_100063C48, v284, v439, v356, v361, v472);
  swift_release(v279);
  swift_release(v278);
  swift_release_n(v273, 2);
  swift_release(v282);
  swift_release(v284);
  swift_release(v280);
  (*(void (**)(char *, uint64_t))(v438 + 8))(v288, v287);
  v289 = v466;
  v465(v466, v469, v222);
  v290 = v470;
  Bindable.projectedValue.getter(v222);
  v291 = (void (*)(char *, uint64_t))v464;
  ((void (*)(char *, uint64_t))v464)(v289, v222);
  v292 = swift_getKeyPath(&unk_100116A18);
  Bindable<A>.subscript.getter(&v478, v292, v222);
  swift_release(v292);
  v291(v290, v222);
  v293 = (uint64_t)v478;
  v294 = (uint64_t)v479;
  LOBYTE(v289) = v480;
  v295 = sub_10005A940(3, (uint64_t)v478, (uint64_t)v479, v480);
  v297 = v296;
  LODWORD(v468) = v298;
  v299 = swift_allocObject(&unk_10014A358, 56, 7);
  *(_QWORD *)(v299 + 16) = v293;
  *(_QWORD *)(v299 + 24) = v294;
  *(_BYTE *)(v299 + 32) = (_BYTE)v289;
  *(_BYTE *)(v299 + 33) = 3;
  *(_QWORD *)(v299 + 40) = sub_1000608F4;
  *(_QWORD *)(v299 + 48) = 0;
  swift_retain(v293);
  swift_retain(v294);
  v300 = sub_100004FC8(&qword_100159040);
  v459 = (char *)v300;
  v481 = v287;
  v482 = (void *)v467;
  v483 = v471;
  v484 = v472;
  v301 = swift_getOpaqueTypeConformance2(&v481, &opaque type descriptor for <<opaque return type of View.fullScreenCover<A>(isPresented:onDismiss:content:)>>, 1);
  v471 = v301;
  v472 = (char *)sub_100063B20(&qword_100159048, &qword_100159040, (void (*)(void))sub_100063D4C, (uint64_t)&protocol conformance descriptor for <A> A?);
  v302 = v441;
  v303 = v460;
  View.formSheet<A>(isPresented:content:)(v295, v297, v468 & 1, sub_100063D40, v299, v441, v300, v301, v472);
  swift_release(v294);
  swift_release(v293);
  swift_release(v297);
  swift_release(v299);
  swift_release(v295);
  (*(void (**)(char *, uint64_t))(v440 + 8))(v303, v302);
  v304 = v466;
  v465(v466, v469, v222);
  v305 = v470;
  Bindable.projectedValue.getter(v222);
  v306 = (void (*)(char *, uint64_t))v464;
  ((void (*)(char *, uint64_t))v464)(v304, v222);
  v307 = swift_getKeyPath(&unk_100116A18);
  Bindable<A>.subscript.getter(&v478, v307, v222);
  swift_release(v307);
  v306(v305, v222);
  v308 = (uint64_t)v478;
  v309 = (uint64_t)v479;
  v467 = (uint64_t)v478;
  v460 = v479;
  LOBYTE(v307) = v480;
  v310 = sub_100060A68();
  v312 = v311;
  v458 = v313;
  v315 = v314 & 1;
  v316 = sub_10005A940(4, v308, v309, v307);
  v318 = v317;
  LOBYTE(v304) = v319;
  v320 = sub_100004FC8(&qword_100159068);
  v468 = v320;
  v481 = v302;
  v482 = v459;
  v483 = v471;
  v484 = v472;
  v321 = swift_getOpaqueTypeConformance2(&v481, &opaque type descriptor for <<opaque return type of View.formSheet<A>(isPresented:content:)>>, 1);
  v471 = v321;
  v472 = (char *)sub_100007868(&qword_100159070, &qword_100159068, (uint64_t)&protocol conformance descriptor for Button<A>);
  v322 = v304 & 1;
  v357 = v320;
  v323 = v443;
  v324 = v458;
  v325 = v461;
  View.alert<A>(_:isPresented:actions:)(v310, v312, v315, v458, v316, v318, v322, sub_100060B6C, 0, v443, v357, v321, v472);
  swift_release(v318);
  swift_release(v316);
  sub_100007618((uint64_t)v310, v312, v315);
  swift_release(v460);
  swift_bridgeObjectRelease(v324);
  swift_release(v467);
  (*(void (**)(char *, uint64_t))(v442 + 8))(v325, v323);
  v326 = v466;
  v465(v466, v469, v222);
  v327 = v470;
  Bindable.projectedValue.getter(v222);
  v328 = (void (*)(char *, uint64_t))v464;
  ((void (*)(char *, uint64_t))v464)(v326, v222);
  v329 = swift_getKeyPath(&unk_100116A18);
  Bindable<A>.subscript.getter(&v478, v329, v222);
  swift_release(v329);
  v328(v327, v222);
  v330 = (uint64_t)v478;
  v331 = (uint64_t)v479;
  v470 = v478;
  v469 = (uint64_t)v479;
  LOBYTE(v329) = v480;
  v332 = sub_100060BB0();
  v334 = v333;
  v473 = (uint64_t *)v335;
  v337 = v336 & 1;
  v338 = sub_10005A940(5, v330, v331, v329);
  v340 = v339;
  LOBYTE(v325) = v341;
  v342 = sub_100004FC8(&qword_100159078);
  v481 = v323;
  v343 = v468;
  v344 = v472;
  v482 = (void *)v468;
  v483 = v471;
  v484 = v472;
  v345 = swift_getOpaqueTypeConformance2(&v481, &opaque type descriptor for <<opaque return type of View.alert<A>(_:isPresented:actions:)>>, 1);
  v346 = sub_100063DC8();
  v354 = v342;
  v358 = v345;
  v347 = v325 & 1;
  v353 = v343;
  v348 = v448;
  v349 = v444;
  v350 = (uint64_t)v473;
  v351 = v462;
  View.alert<A, B>(_:isPresented:actions:message:)(v332, v334, v337, v473, v338, v340, v347, sub_100060B6C, 0, sub_100060CB4, 0, v448, v353, v354, v358, v344, v346);
  swift_release(v340);
  swift_release(v338);
  sub_100007618((uint64_t)v332, v334, v337);
  swift_release(v469);
  swift_bridgeObjectRelease(v350);
  swift_release(v470);
  (*(void (**)(char *, uint64_t))(v447 + 8))(v351, v348);
  (*(void (**)(uint64_t, char *, uint64_t))(v445 + 32))(v450, v349, v446);
  return swift_release(v463);
}

uint64_t sub_10005D79C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = sub_100004FC8(&qword_100158F18);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005D840((uint64_t)v4);
  sub_100018C00((uint64_t)v4, a1, &qword_100158F18);
  *(_BYTE *)(a1 + *(int *)(sub_100004FC8(&qword_100158EF8) + 36)) = 1;
  return sub_10000BA50((uint64_t)v4, &qword_100158F18);
}

uint64_t sub_10005D840@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t KeyPath;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  uint64_t (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t OpaqueTypeConformance2;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t (*v71)(char *, uint64_t);
  char *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  _QWORD v92[2];
  unsigned __int8 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;

  v88 = a1;
  v2 = sub_100004FC8(&qword_1001591A0);
  __chkstk_darwin(v2);
  v86 = (char *)&v68 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = type metadata accessor for SearchFieldPlacement(0);
  v79 = *(_QWORD *)(v81 - 8);
  __chkstk_darwin(v81);
  v75 = (char *)&v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = type metadata accessor for PrimarySettingsList(0);
  __chkstk_darwin(v73);
  v6 = (char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = sub_100004FC8(&qword_100158F20);
  v87 = *(_QWORD *)(v83 - 8);
  __chkstk_darwin(v83);
  v74 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004FC8(&qword_1001591A8);
  v84 = *(_QWORD *)(v8 - 8);
  v85 = v8;
  __chkstk_darwin(v8);
  v76 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_100004FC8(&qword_100158F18);
  __chkstk_darwin(v82);
  v77 = (char *)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = sub_100004FC8(&qword_100158E00);
  v78 = *(_QWORD *)(v80 - 8);
  __chkstk_darwin(v80);
  v91 = (char *)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = sub_100004FC8(&qword_1001591B0);
  v71 = *(uint64_t (**)(char *, uint64_t))(v90 - 8);
  v12 = __chkstk_darwin(v90);
  v72 = (char *)&v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v68 - v15;
  __chkstk_darwin(v14);
  v89 = (char *)&v68 - v17;
  v18 = (uint64_t *)(v1 + *(int *)(type metadata accessor for SettingsNavigationSplitView(0) + 32));
  v19 = *v18;
  v20 = *((_BYTE *)v18 + 8);
  v21 = swift_retain(*v18);
  v22 = sub_100063744(v21, v20, 0xD00000000000001ALL, 0x8000000100122A00);
  swift_release(v19);
  v23 = type metadata accessor for SettingsAppSearchViewModel(0);
  v24 = sub_100007828(&qword_100158B50, type metadata accessor for SettingsAppSearchViewModel, (uint64_t)&unk_1001166F4);
  Bindable<A>.init(wrappedValue:)(v22, v23, v24);
  sub_100004FC8(&qword_100158D38);
  Bindable.wrappedValue.getter(&v94);
  v25 = v94;
  v26 = sub_1000DB598();
  swift_release(v25);
  v27 = type metadata accessor for PrimarySettingsListModel(0);
  v28 = sub_100007828(&qword_100158EF0, type metadata accessor for PrimarySettingsListModel, (uint64_t)&unk_10011B328);
  Bindable<A>.init(wrappedValue:)(v26, v27, v28);
  Bindable.wrappedValue.getter(&v94);
  v29 = v94;
  v30 = sub_1000DB598();
  swift_release(v29);
  *(_QWORD *)v6 = swift_getKeyPath(&unk_100116B38);
  *((_QWORD *)v6 + 1) = swift_getKeyPath(&unk_100116B58);
  v6[16] = 0;
  v31 = Environment.init<A>(_:)(v23, v23, v24);
  v70 = v6;
  *((_QWORD *)v6 + 3) = v31;
  v6[32] = v32 & 1;
  v33 = v73;
  Bindable<A>.init(wrappedValue:)(v30, v27, v28);
  v34 = v90;
  Bindable.projectedValue.getter(v90);
  KeyPath = swift_getKeyPath(&unk_100116A98);
  Bindable<A>.subscript.getter(&v94, KeyPath, v34);
  swift_release(KeyPath);
  v36 = (void (*)(char *, uint64_t))*((_QWORD *)v71 + 1);
  v37 = v34;
  v36(v16, v34);
  v38 = (uint64_t (*)(char *, uint64_t))v36;
  v71 = (uint64_t (*)(char *, uint64_t))v36;
  v39 = v94;
  v40 = v95;
  v41 = v97;
  v69 = v96;
  v42 = v72;
  Bindable.projectedValue.getter(v37);
  v43 = swift_getKeyPath(&unk_100116A70);
  Bindable<A>.subscript.getter(v92, v43, v37);
  swift_release(v43);
  v44 = v38(v42, v37);
  v45 = v92[0];
  v46 = v92[1];
  v47 = v93;
  v48 = v75;
  static SearchFieldPlacement.automatic.getter(v44);
  v49 = sub_100007828(&qword_100158F28, type metadata accessor for PrimarySettingsList, (uint64_t)&unk_100117960);
  v50 = v74;
  v51 = v47;
  v52 = (uint64_t)v70;
  View.searchable(text:isPresented:placement:prompt:)(v39, v40, v69, v41, v45, v46, v51, v48, 0, 0, 0, 0, v33, v49);
  swift_bridgeObjectRelease(v41);
  swift_release(v40);
  swift_release(v46);
  swift_release(v45);
  swift_release(v39);
  (*(void (**)(char *, uint64_t))(v79 + 8))(v48, v81);
  v53 = sub_1000076B4(v52, type metadata accessor for PrimarySettingsList);
  v54 = (uint64_t)v86;
  static ToolbarDefaultItemKind.sidebarToggle.getter(v53);
  v55 = type metadata accessor for ToolbarDefaultItemKind(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v54, 0, 1, v55);
  v94 = v33;
  v95 = v49;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v94, &opaque type descriptor for <<opaque return type of View.searchable(text:isPresented:placement:prompt:)>>, 1);
  v57 = v76;
  v58 = v83;
  View.toolbar(removing:)(v54, v83, OpaqueTypeConformance2);
  sub_10000BA50(v54, &qword_1001591A0);
  v59 = (*(uint64_t (**)(char *, uint64_t))(v87 + 8))(v50, v58);
  v60 = static Alignment.center.getter(v59);
  v62 = v61;
  v64 = v84;
  v63 = v85;
  v65 = (uint64_t)v77;
  (*(void (**)(char *, char *, uint64_t))(v84 + 16))(v77, v57, v85);
  v66 = (uint64_t *)(v65 + *(int *)(v82 + 36));
  *v66 = v60;
  v66[1] = v62;
  (*(void (**)(char *, uint64_t))(v64 + 8))(v57, v63);
  (*(void (**)(char *, uint64_t))(v78 + 8))(v91, v80);
  sub_100064A4C(v65, v88);
  return v71(v89, v90);
}

uint64_t sub_10005DF10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t KeyPath;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t OpaqueTypeConformance2;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[16];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;

  v30 = a2;
  v3 = sub_100004FC8(&qword_100158F58);
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_100004FC8(&qword_100158D38);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SettingsNavigationSplitView(0);
  Bindable.projectedValue.getter(v6);
  KeyPath = swift_getKeyPath(&unk_100116968);
  Bindable<A>.subscript.getter(v5, KeyPath, v6);
  swift_release(KeyPath);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v32 = a1;
  v29 = sub_100004FC8(&qword_100159100);
  v28 = sub_100005430(&qword_100159108);
  v27 = type metadata accessor for SettingsAnyPlatformViewControllerRecipe(255);
  v11 = type metadata accessor for SettingsAnyPlatformViewControllerView(255);
  v12 = sub_100005430(&qword_100159110);
  v13 = type metadata accessor for SettingsAnyViewRecipe(255);
  v14 = sub_100005430(&qword_100159118);
  v15 = type metadata accessor for PreferencesControllerRecipe(255);
  v16 = type metadata accessor for PreferencesControllerView(255);
  v17 = sub_100007868(&qword_100159120, &qword_100159118, (uint64_t)&protocol conformance descriptor for IDView<A, B>);
  v18 = sub_100007828((unint64_t *)&qword_10015C620, (uint64_t (*)(uint64_t))&type metadata accessor for PreferencesControllerRecipe, (uint64_t)&protocol conformance descriptor for PreferencesControllerRecipe);
  v19 = sub_100007828(&qword_100159128, (uint64_t (*)(uint64_t))&type metadata accessor for PreferencesControllerView, (uint64_t)&protocol conformance descriptor for PreferencesControllerView);
  v33 = v14;
  v34 = v15;
  v35 = (void *)v16;
  v36 = v17;
  v37 = v18;
  v38 = (void *)v19;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v33, &opaque type descriptor for <<opaque return type of View.navigationDestination<A, B>(for:destination:)>>, 1);
  v21 = sub_100007828(&qword_100159130, (uint64_t (*)(uint64_t))&type metadata accessor for SettingsAnyViewRecipe, (uint64_t)&protocol conformance descriptor for SettingsAnyViewRecipe);
  v33 = v12;
  v34 = v13;
  v35 = &type metadata for AnyView;
  v36 = OpaqueTypeConformance2;
  v37 = v21;
  v38 = &protocol witness table for AnyView;
  v22 = swift_getOpaqueTypeConformance2(&v33, &opaque type descriptor for <<opaque return type of View.navigationDestination<A, B>(for:destination:)>>, 1);
  v23 = sub_100007828(&qword_100159138, (uint64_t (*)(uint64_t))&type metadata accessor for SettingsAnyPlatformViewControllerRecipe, (uint64_t)&protocol conformance descriptor for SettingsAnyPlatformViewControllerRecipe);
  v24 = sub_100007828(&qword_100159038, (uint64_t (*)(uint64_t))&type metadata accessor for SettingsAnyPlatformViewControllerView, (uint64_t)&protocol conformance descriptor for SettingsAnyPlatformViewControllerView);
  v33 = v28;
  v34 = v27;
  v35 = (void *)v11;
  v36 = v22;
  v37 = v23;
  v38 = (void *)v24;
  v25 = swift_getOpaqueTypeConformance2(&v33, &opaque type descriptor for <<opaque return type of View.navigationDestination<A, B>(for:destination:)>>, 1);
  return NavigationStack.init<>(path:root:)(v5, sub_10006489C, v31, v29, v25);
}

uint64_t sub_10005E1F4()
{
  uint64_t v0;
  uint64_t v2;

  type metadata accessor for SettingsNavigationSplitView(0);
  sub_100004FC8(&qword_100158D38);
  Bindable.wrappedValue.getter(&v2);
  v0 = v2;
  sub_1000DB8BC();
  return swift_release(v0);
}

uint64_t sub_10005E24C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = sub_100004FC8((uint64_t *)&unk_10015C3F0);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100018C00(a1, (uint64_t)v4, (uint64_t *)&unk_10015C3F0);
  return EnvironmentValues.horizontalSizeClass.setter(v4);
}

uint64_t sub_10005E2CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  _BYTE v9[16];
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;

  v2 = sub_100004FC8((uint64_t *)&unk_10015C3F0);
  __chkstk_darwin(v2);
  v4 = &v9[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for SettingsNavigationSplitView(0);
  sub_100004FC8(&qword_100158D38);
  Bindable.wrappedValue.getter(&v12);
  v5 = v12;
  sub_100018C00(a1, (uint64_t)v4, (uint64_t *)&unk_10015C3F0);
  KeyPath = swift_getKeyPath(&unk_100116AE8);
  v10 = v5;
  v11 = v4;
  v12 = v5;
  v7 = sub_100007828((unint64_t *)&qword_100158F78, type metadata accessor for SettingsAppNavigationModel, (uint64_t)&unk_10011B030);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v12, KeyPath, sub_100064884, v9, (char *)&type metadata for () + 8, v7);
  swift_release(KeyPath);
  sub_10000BA50((uint64_t)v4, (uint64_t *)&unk_10015C3F0);
  return swift_release(v5);
}

uint64_t sub_10005E400(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  type metadata accessor for ScenePhase(0);
  __chkstk_darwin();
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v4 + 16))(v3, a1);
  return EnvironmentValues.scenePhase.setter(v3);
}

uint64_t sub_10005E47C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  _BYTE v11[16];
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;

  v2 = sub_100004FC8((uint64_t *)&unk_10015C630);
  __chkstk_darwin(v2);
  v4 = &v11[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for SettingsNavigationSplitView(0);
  sub_100004FC8(&qword_100158D38);
  Bindable.wrappedValue.getter(&v14);
  v5 = v14;
  v6 = type metadata accessor for ScenePhase(0);
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(v4, a1, v6);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v4, 0, 1, v6);
  KeyPath = swift_getKeyPath(&unk_100116AC0);
  v12 = v5;
  v13 = v4;
  v14 = v5;
  v9 = sub_100007828((unint64_t *)&qword_100158F78, type metadata accessor for SettingsAppNavigationModel, (uint64_t)&unk_10011B030);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v14, KeyPath, sub_100064864, v11, (char *)&type metadata for () + 8, v9);
  swift_release(KeyPath);
  sub_10000BA50((uint64_t)v4, (uint64_t *)&unk_10015C630);
  return swift_release(v5);
}

uint64_t sub_10005E5DC(unsigned __int8 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v1 = *a1;
  type metadata accessor for SettingsNavigationSplitView(0);
  sub_100004FC8(&qword_100158D38);
  Bindable.wrappedValue.getter(&v4);
  v2 = v4;
  sub_1000DBA60(v1);
  return swift_release(v2);
}

uint64_t sub_10005E644(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE v9[16];
  uint64_t v10;
  uint64_t v11;

  v4 = type metadata accessor for WithCurrentHostingControllerAction(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v9[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for SettingsNavigationSplitView(0);
  sub_100063448(&qword_100158D30, (uint64_t (*)(_QWORD))&type metadata accessor for WithCurrentHostingControllerAction, 0xD000000000000022, 0x8000000100122940, (uint64_t)v7);
  v10 = a2;
  v11 = a1;
  WithCurrentHostingControllerAction.callAsFunction(_:)(sub_100064854, v9);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_10005E728(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;

  type metadata accessor for SettingsNavigationSplitView(0);
  sub_100004FC8(&qword_100158D38);
  Bindable.wrappedValue.getter(&v7);
  v5 = v7;
  sub_1000EF280(a3, a1);
  return swift_release(v5);
}

void sub_10005E798(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[16];
  uint64_t v16;
  char v17;
  uint64_t v18;

  if (*a2 == 1)
  {
    v4 = type metadata accessor for SettingsNavigationSplitView(0);
    sub_100004FC8(&qword_100158D38);
    Bindable.wrappedValue.getter(&v18);
    v5 = v18;
    KeyPath = swift_getKeyPath(&unk_1001169F0);
    __chkstk_darwin(KeyPath);
    v16 = v5;
    v17 = 0;
    v18 = v5;
    v7 = sub_100007828((unint64_t *)&qword_100158F78, type metadata accessor for SettingsAppNavigationModel, (uint64_t)&unk_10011B030);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v18, KeyPath, sub_100064838, v15, (char *)&type metadata for () + 8, v7);
    swift_release(v5);
    swift_release(KeyPath);
    v8 = (uint64_t *)(a3 + *(int *)(v4 + 32));
    v9 = *v8;
    v10 = *((_BYTE *)v8 + 8);
    v11 = swift_retain(*v8);
    v12 = sub_100063744(v11, v10, 0xD00000000000001ALL, 0x8000000100122A00);
    swift_release(v9);
    v13 = swift_getKeyPath(&unk_100116A70);
    __chkstk_darwin(v13);
    v16 = v12;
    v17 = 0;
    v18 = v12;
    v14 = sub_100007828(&qword_100158B50, type metadata accessor for SettingsAppSearchViewModel, (uint64_t)&unk_1001166F4);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v18, v13, sub_100064DBC, v15, (char *)&type metadata for () + 8, v14);
    swift_release(v12);
    swift_release(v13);
  }
}

uint64_t sub_10005E990(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];
  uint64_t v26;
  char v27;
  uint64_t v28;
  _QWORD v29[2];
  _QWORD v30[5];
  __int128 v31;
  __int128 v32;

  v3 = objc_msgSend(a1, "userInfo");
  if (!v3)
  {
    v31 = 0u;
    v32 = 0u;
    return sub_10000BA50((uint64_t)&v31, &qword_10015BA90);
  }
  v4 = v3;
  v5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v3, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

  v29[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(CSSearchQueryString);
  v29[1] = v6;
  AnyHashable.init<A>(_:)(v30, v29, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v5 + 16) && (v7 = sub_1000DA95C((uint64_t)v30), (v8 & 1) != 0))
  {
    sub_1000148AC(*(_QWORD *)(v5 + 56) + 32 * v7, (uint64_t)&v31);
  }
  else
  {
    v31 = 0u;
    v32 = 0u;
  }
  sub_100014878((uint64_t)v30);
  swift_bridgeObjectRelease(v5);
  if (!*((_QWORD *)&v32 + 1))
    return sub_10000BA50((uint64_t)&v31, &qword_10015BA90);
  result = swift_dynamicCast(v30, &v31, (char *)&type metadata for Any + 8, &type metadata for String, 6);
  if ((result & 1) != 0)
  {
    v10 = v30[1];
    v28 = v30[0];
    v11 = type metadata accessor for SettingsNavigationSplitView(0);
    sub_100004FC8(&qword_100158D38);
    Bindable.wrappedValue.getter(v30);
    v12 = v30[0];
    sub_1000DB8BC();
    swift_release(v12);
    v13 = (_QWORD *)(a2 + *(int *)(v11 + 32));
    v14 = *v13;
    v15 = *((_BYTE *)v13 + 8);
    v16 = swift_retain(*v13);
    v17 = sub_100063744(v16, v15, 0xD00000000000001ALL, 0x8000000100122A00);
    swift_release(v14);
    KeyPath = swift_getKeyPath(&unk_100116A70);
    __chkstk_darwin(KeyPath);
    v26 = v17;
    v27 = 1;
    v30[0] = v17;
    v19 = sub_100007828(&qword_100158B50, type metadata accessor for SettingsAppSearchViewModel, (uint64_t)&unk_1001166F4);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v30, KeyPath, sub_100064814, v25, (char *)&type metadata for () + 8, v19);
    swift_release(v17);
    swift_release(KeyPath);
    v20 = *v13;
    LOBYTE(v17) = *((_BYTE *)v13 + 8);
    v21 = swift_retain(*v13);
    v22 = sub_100063744(v21, v17, 0xD00000000000001ALL, 0x8000000100122A00);
    swift_release(v20);
    v23 = swift_getKeyPath(&unk_100116A98);
    __chkstk_darwin(v23);
    v25[0] = v22;
    v25[1] = v28;
    v26 = v10;
    v30[0] = v22;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v30, v23, sub_100056AC4, &v24, (char *)&type metadata for () + 8, v19);
    swift_release(v22);
    swift_release(v23);
    return swift_bridgeObjectRelease(v10);
  }
  return result;
}

uint64_t sub_10005ECB8(uint8_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = type metadata accessor for SettingsNavigationSplitView(0);
  sub_100004FC8(&qword_100158D38);
  Bindable.wrappedValue.getter(&v11);
  v5 = v11;
  sub_1000DB8BC();
  swift_release(v5);
  v6 = (uint64_t *)(a2 + *(int *)(v4 + 32));
  v7 = *v6;
  LOBYTE(v5) = *((_BYTE *)v6 + 8);
  v8 = swift_retain(*v6);
  v9 = sub_100063744(v8, v5, 0xD00000000000001ALL, 0x8000000100122A00);
  swift_release(v7);
  sub_1000518E0(a1);
  return swift_release(v9);
}

uint64_t sub_10005ED74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  void (*v17)(char *, uint64_t);
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  void *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD aBlock[5];
  uint64_t v51;

  v39 = a1;
  v45 = type metadata accessor for DispatchWorkItemFlags(0);
  v48 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v44 = (char *)&v35 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for DispatchQoS(0);
  v46 = *(_QWORD *)(v2 - 8);
  v47 = v2;
  __chkstk_darwin(v2);
  v43 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for SettingsNavigationSplitView(0);
  v37 = *(_QWORD *)(v4 - 8);
  v5 = *(_QWORD *)(v37 + 64);
  __chkstk_darwin(v4);
  v36 = (uint64_t)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for PPTTestCase(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchTime(0);
  v11 = *(_QWORD *)(v10 - 8);
  v42 = v10;
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v38 = (char *)&v35 - v15;
  v16 = sub_100005494();
  v41 = static OS_dispatch_queue.main.getter(v16);
  static DispatchTime.now()();
  + infix(_:_:)(v14, 2.0);
  v17 = *(void (**)(char *, uint64_t))(v11 + 8);
  v17(v14, v10);
  v18 = v17;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v39, v6);
  v19 = v36;
  sub_1000076F0(v40, v36, type metadata accessor for SettingsNavigationSplitView);
  v20 = *(unsigned __int8 *)(v7 + 80);
  v21 = (v20 + 16) & ~v20;
  v22 = *(unsigned __int8 *)(v37 + 80);
  v23 = (v8 + v22 + v21) & ~v22;
  v24 = swift_allocObject(&unk_10014A498, v23 + v5, v20 | v22 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v24 + v21, v9, v6);
  sub_100007670(v19, v24 + v23, type metadata accessor for SettingsNavigationSplitView);
  aBlock[4] = sub_1000647AC;
  v51 = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100005350;
  aBlock[3] = &unk_10014A4B0;
  v25 = _Block_copy(aBlock);
  v26 = v43;
  static DispatchQoS.unspecified.getter(v25);
  v49 = _swiftEmptyArrayStorage;
  v27 = sub_100007828((unint64_t *)&qword_10015BAB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v28 = sub_100004FC8((uint64_t *)&unk_100156F40);
  v29 = sub_100007868((unint64_t *)&qword_10015BAC0, (uint64_t *)&unk_100156F40, (uint64_t)&protocol conformance descriptor for [A]);
  v31 = v44;
  v30 = v45;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v49, v28, v29, v45, v27);
  v32 = v38;
  v33 = (void *)v41;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v38, v26, v31, v25);
  _Block_release(v25);

  (*(void (**)(char *, uint64_t))(v48 + 8))(v31, v30);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v26, v47);
  v18(v32, v42);
  return swift_release(v51);
}

uint64_t sub_10005F100(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  _BYTE v7[16];
  uint64_t v8;

  v2 = type metadata accessor for WithCurrentHostingControllerAction(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v7[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for SettingsNavigationSplitView(0);
  sub_100063448(&qword_100158D30, (uint64_t (*)(_QWORD))&type metadata accessor for WithCurrentHostingControllerAction, 0xD000000000000022, 0x8000000100122940, (uint64_t)v5);
  v8 = a1;
  WithCurrentHostingControllerAction.callAsFunction(_:)(sub_10006465C, v7);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
}

void sub_10005F1D8(void *a1)
{
  uint64_t v2;
  _BYTE *v3;
  void **v4;
  void *v5;
  id v6;
  _QWORD v7[3];

  type metadata accessor for SettingsNavigationSplitView(0);
  sub_100004FC8(&qword_100158D38);
  Bindable.wrappedValue.getter(v7);
  v2 = v7[0];
  v3 = sub_1000DB598();
  swift_release(v2);
  v4 = (void **)&v3[OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_viewControllerForPresentation];
  swift_beginAccess(&v3[OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_viewControllerForPresentation], v7, 1, 0);
  v5 = *v4;
  *v4 = a1;
  v6 = a1;
  swift_release(v3);

}

uint64_t sub_10005F27C(uint64_t a1)
{
  uint64_t v1;
  uint64_t OpaqueTypeConformance2;
  _QWORD v4[4];
  _QWORD v5[4];

  v4[2] = a1;
  v1 = sub_100004FC8(&qword_1001590F0);
  v5[0] = &type metadata for AboutSecurityResearchDeviceRepresentable;
  v5[1] = sub_100005430(&qword_100159068);
  v5[2] = sub_1000644D0();
  v5[3] = sub_100007868(&qword_100159070, &qword_100159068, (uint64_t)&protocol conformance descriptor for Button<A>);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v5, &opaque type descriptor for <<opaque return type of View.navigationBarItems<A>(trailing:)>>, 1);
  return NavigationStack.init<>(root:)(sub_1000644C8, v4, v1, OpaqueTypeConformance2);
}

uint64_t sub_10005F338(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v2 = type metadata accessor for SettingsNavigationSplitView(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = sub_100004FC8(&qword_100159068);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000076F0(a1, (uint64_t)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for SettingsNavigationSplitView);
  v9 = *(unsigned __int8 *)(v3 + 80);
  v10 = (v9 + 16) & ~v9;
  v11 = swift_allocObject(&unk_10014A470, v10 + v4, v9 | 7);
  sub_100007670((uint64_t)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v11 + v10, type metadata accessor for SettingsNavigationSplitView);
  Button.init(action:label:)(sub_100064230, v11, sub_10006272C, 0, &type metadata for Text, &protocol witness table for Text);
  v12 = sub_1000644D0();
  v13 = sub_100007868(&qword_100159070, &qword_100159068, (uint64_t)&protocol conformance descriptor for Button<A>);
  View.navigationBarItems<A>(trailing:)(v8, &type metadata for AboutSecurityResearchDeviceRepresentable, v5, v12, v13);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10005F4BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t OpaqueTypeConformance2;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  ValueMetadata *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v10[2] = a1;
  v1 = sub_100004FC8(&qword_1001590C0);
  v2 = sub_100005430(&qword_1001590C8);
  v3 = sub_100005430(&qword_100159068);
  v4 = sub_100005430(&qword_1001590D0);
  v11 = &type metadata for AboutSupervisedDeviceRepresentable;
  v12 = sub_1000641E8();
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v11 = (ValueMetadata *)v4;
  v12 = OpaqueTypeConformance2;
  v6 = swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of View.navigationBarTitle(_:)>>, 1);
  v7 = sub_100007868(&qword_100159070, &qword_100159068, (uint64_t)&protocol conformance descriptor for Button<A>);
  v11 = (ValueMetadata *)v2;
  v12 = v3;
  v13 = v6;
  v14 = v7;
  v8 = swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of View.navigationBarItems<A>(trailing:)>>, 1);
  return NavigationStack.init<>(root:)(sub_1000641E0, v10, v1, v8);
}

uint64_t sub_10005F5C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t OpaqueTypeConformance2;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  ValueMetadata *v49;
  unint64_t v50;

  v45 = a1;
  v48 = a2;
  v2 = type metadata accessor for SettingsNavigationSplitView(0);
  v3 = *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64);
  v41 = *(_QWORD *)(v2 - 8);
  v42 = v3;
  __chkstk_darwin(v2);
  v39 = (uint64_t)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100004FC8(&qword_100159068);
  v6 = *(_QWORD *)(v5 - 8);
  v46 = v5;
  v47 = v6;
  __chkstk_darwin(v5);
  v43 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100004FC8(&qword_1001590D0);
  v38 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_100004FC8(&qword_1001590C8);
  v44 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v8);
  v17 = sub_1000641E8();
  View.navigationBarTitleDisplayMode(_:)(v11, &type metadata for AboutSupervisedDeviceRepresentable, v17);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v18 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000012, 0x80000001001228F0);
  v19 = Text.init(_:tableName:bundle:comment:)(v18);
  v21 = v20;
  v23 = v22;
  v25 = v24 & 1;
  v49 = &type metadata for AboutSupervisedDeviceRepresentable;
  v50 = v17;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v49, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  View.navigationBarTitle(_:)(v19, v21, v25, v23, v12, OpaqueTypeConformance2);
  sub_100007618(v19, v21, v25);
  swift_bridgeObjectRelease(v23);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v14, v12);
  v27 = v39;
  sub_1000076F0(v45, v39, type metadata accessor for SettingsNavigationSplitView);
  v28 = *(unsigned __int8 *)(v41 + 80);
  v29 = (v28 + 16) & ~v28;
  v30 = swift_allocObject(&unk_10014A3D0, v29 + v42, v28 | 7);
  sub_100007670(v27, v30 + v29, type metadata accessor for SettingsNavigationSplitView);
  v31 = v43;
  Button.init(action:label:)(sub_100064230, v30, sub_10006272C, 0, &type metadata for Text, &protocol witness table for Text);
  v49 = (ValueMetadata *)v12;
  v50 = OpaqueTypeConformance2;
  v32 = swift_getOpaqueTypeConformance2(&v49, &opaque type descriptor for <<opaque return type of View.navigationBarTitle(_:)>>, 1);
  v33 = sub_100007868(&qword_100159070, &qword_100159068, (uint64_t)&protocol conformance descriptor for Button<A>);
  v34 = v40;
  v35 = v46;
  View.navigationBarItems<A>(trailing:)(v31, v40, v46, v32, v33);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v31, v35);
  return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v16, v34);
}

uint64_t sub_10005F970@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t KeyPath;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (**v42)();
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v55 = a1;
  v56 = a2;
  v57 = type metadata accessor for AppleAccountSignInSheet(0);
  v2 = __chkstk_darwin(v57);
  v49 = (uint64_t *)((char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v2);
  v51 = (uint64_t)&v47 - v4;
  v5 = sub_100004FC8(&qword_100158E00);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v47 = *(_QWORD *)(v9 - 8);
  v10 = *(_QWORD *)(v47 + 64);
  v11 = __chkstk_darwin(v9);
  v48 = (uint64_t)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v50 = (uint64_t)&v47 - v12;
  v52 = sub_100004FC8(&qword_1001590A8);
  __chkstk_darwin(v52);
  v53 = (uint64_t)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = type metadata accessor for AppleIDSignInView(0);
  v14 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for AppleIDSetupFeature(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v18 + 104))(v20, enum case for AppleIDSetupFeature.personalizedChildSetupSpyglass(_:), v17);
  v22 = AppleIDSetupFeature.isFeatureEnabled.getter(v21);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  if ((v22 & 1) != 0)
  {
    v23 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AISAppleIDSignInConfiguration(0)), "init");
    v24 = v55;
    swift_retain_n(v55, 2);
    AppleIDSignInView.init(configuration:onSkip:completion:)(v23, sub_100063C20, v24, sub_100063FD0, v24);
    v26 = v53;
    v25 = v54;
    (*(void (**)(uint64_t, char *, uint64_t))(v14 + 16))(v53, v16, v54);
    swift_storeEnumTagMultiPayload(v26, v52, 0);
    v27 = sub_100007828(&qword_100159010, (uint64_t (*)(uint64_t))&type metadata accessor for AppleIDSignInView, (uint64_t)&protocol conformance descriptor for AppleIDSignInView);
    v28 = sub_100007828(&qword_100157828, type metadata accessor for AppleAccountSignInSheet, (uint64_t)&unk_100114890);
    _ConditionalContent<>.init(storage:)(v26, v25, v57, v27, v28);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v25);
  }
  else
  {
    v30 = v55;
    v31 = swift_projectBox(v55);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v31, v5);
    Bindable.wrappedValue.getter(&v58);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v32 = v58;
    v33 = v50;
    sub_1000F32BC(v50);
    swift_release(v32);
    v34 = v48;
    sub_1000076F0(v33, v48, type metadata accessor for PrimarySettingsListItemIdentifier);
    v35 = *(unsigned __int8 *)(v47 + 80);
    v36 = (v35 + 24) & ~v35;
    v37 = swift_allocObject(&unk_10014A380, v36 + v10, v35 | 7);
    *(_QWORD *)(v37 + 16) = v30;
    sub_100007670(v34, v37 + v36, type metadata accessor for PrimarySettingsListItemIdentifier);
    KeyPath = swift_getKeyPath(&unk_100116A40);
    v39 = (uint64_t)v49;
    *v49 = KeyPath;
    v40 = sub_100004FC8(&qword_100157780);
    swift_storeEnumTagMultiPayload(v39, v40, 0);
    v41 = v57;
    v42 = (uint64_t (**)())(v39 + *(int *)(v57 + 20));
    *v42 = sub_100063FA0;
    v42[1] = (uint64_t (*)())v37;
    v43 = v51;
    sub_100007670(v39, v51, type metadata accessor for AppleAccountSignInSheet);
    v44 = v53;
    sub_1000076F0(v43, v53, type metadata accessor for AppleAccountSignInSheet);
    swift_storeEnumTagMultiPayload(v44, v52, 1);
    v45 = sub_100007828(&qword_100159010, (uint64_t (*)(uint64_t))&type metadata accessor for AppleIDSignInView, (uint64_t)&protocol conformance descriptor for AppleIDSignInView);
    v46 = sub_100007828(&qword_100157828, type metadata accessor for AppleAccountSignInSheet, (uint64_t)&unk_100114890);
    swift_retain(v30);
    _ConditionalContent<>.init(storage:)(v44, v54, v41, v45, v46);
    sub_1000076B4(v43, type metadata accessor for AppleAccountSignInSheet);
    return sub_1000076B4(v33, type metadata accessor for PrimarySettingsListItemIdentifier);
  }
}

uint64_t sub_10005FE20(void *a1, char a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t, uint64_t);
  void (*v51)(char *, uint64_t);
  void *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;

  v6 = sub_100004FC8(&qword_10015C5A0);
  __chkstk_darwin(v6);
  v55 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004FC8(&qword_100158E00);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v53 = *(_QWORD *)(v12 - 8);
  v13 = *(_QWORD *)(v53 + 64);
  v14 = __chkstk_darwin(v12);
  v54 = (uint64_t)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v48 - v15;
  v56 = a3;
  v17 = swift_projectBox(a3);
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v18(v11, v17, v8);
  Bindable.wrappedValue.getter(&v57);
  v19 = *(void (**)(char *, uint64_t))(v9 + 8);
  v19(v11, v8);
  v20 = v57;
  sub_1000F32BC((uint64_t)v16);
  swift_release(v20);
  if ((a2 & 1) != 0)
    goto LABEL_15;
  v49 = v17;
  v50 = v18;
  a1;
  v21 = ((uint64_t (*)(void))AISAppleIDSignInResult.authResults.getter)();
  v22 = v21;
  v23 = *(_QWORD *)(v21 + 16);
  v51 = v19;
  v52 = a1;
  if (v23)
  {
    sub_1000DA98C(0x495344746C414B41, 0xE900000000000044);
    v25 = v24;
    v26 = swift_bridgeObjectRelease(v22);
    if ((v25 & 1) != 0)
      goto LABEL_13;
  }
  else
  {
    v26 = swift_bridgeObjectRelease(v21);
  }
  v27 = AISAppleIDSignInResult.authResults.getter(v26);
  v28 = v27;
  if (*(_QWORD *)(v27 + 16))
  {
    sub_1000DA98C(0x444953444B41, 0xE600000000000000);
    v30 = v29;
    swift_bridgeObjectRelease(v28);
    if ((v30 & 1) != 0)
      goto LABEL_13;
  }
  else
  {
    swift_bridgeObjectRelease(v27);
  }
  v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(AIDAServiceTypeCloud);
  v33 = v32;
  v34 = AISAppleIDSignInResult.authResults.getter(v31);
  if (!*(_QWORD *)(v34 + 16) || (sub_1000DA98C(v31, v33), (v35 & 1) == 0))
  {
    swift_bridgeObjectRelease(v33);
    swift_bridgeObjectRelease(v34);
    sub_100063FDC(v52, 0);
    v18 = v50;
    v19 = v51;
    v17 = v49;
LABEL_15:
    v18(v11, v17, v8);
    Bindable.wrappedValue.getter(&v57);
    v19(v11, v8);
    goto LABEL_16;
  }
  swift_bridgeObjectRelease(v33);
  swift_bridgeObjectRelease(v34);
LABEL_13:
  v36 = type metadata accessor for TaskPriority(0);
  v37 = (uint64_t)v55;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v55, 1, 1, v36);
  v38 = v54;
  sub_1000076F0((uint64_t)v16, v54, type metadata accessor for PrimarySettingsListItemIdentifier);
  type metadata accessor for MainActor(0);
  v39 = v56;
  v40 = swift_retain(v56);
  v41 = static MainActor.shared.getter(v40);
  v42 = *(unsigned __int8 *)(v53 + 80);
  v43 = (v42 + 40) & ~v42;
  v44 = (_QWORD *)swift_allocObject(&unk_10014A3A8, v43 + v13, v42 | 7);
  v44[2] = v41;
  v44[3] = &protocol witness table for MainActor;
  v44[4] = v39;
  sub_100007670(v38, (uint64_t)v44 + v43, type metadata accessor for PrimarySettingsListItemIdentifier);
  v45 = sub_1000F1E18(v37, (uint64_t)&unk_1001590B8, (uint64_t)v44);
  sub_100063FDC(v52, 0);
  swift_release(v45);
  v50(v11, v49, v8);
  Bindable.wrappedValue.getter(&v57);
  v51(v11, v8);
LABEL_16:
  v46 = v57;
  sub_1000F2DEC(7);
  swift_release(v46);
  return sub_1000076B4((uint64_t)v16, type metadata accessor for PrimarySettingsListItemIdentifier);
}

uint64_t sub_100060204(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5[3] = a4;
  v5[4] = a5;
  v6 = sub_100004FC8(&qword_10015C890);
  v5[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004FC8(&qword_100158E00);
  v5[6] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[7] = v8;
  v5[8] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MainActor(0);
  v5[9] = static MainActor.shared.getter(v9);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000602C0, v10, v11);
}

uint64_t sub_1000602C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 72));
  v7 = swift_projectBox(v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v7, v2);
  Bindable.wrappedValue.getter((_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v8 = *(_QWORD *)(v0 + 16);
  sub_1000076F0(v5, v4, type metadata accessor for PrimarySettingsListItemIdentifier);
  v9 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 0, 1, v9);
  sub_1000F3614(v4);
  swift_release(v8);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000603B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v4 = sub_100004FC8(&qword_10015C890);
  __chkstk_darwin(v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004FC8(&qword_100158E00);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = swift_projectBox(a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v11, v7);
  Bindable.wrappedValue.getter(&v16);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v12 = v16;
  sub_1000076F0(a2, (uint64_t)v6, type metadata accessor for PrimarySettingsListItemIdentifier);
  v13 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v6, 0, 1, v13);
  sub_1000F3614((uint64_t)v6);
  return swift_release(v12);
}

uint64_t sub_1000604E4(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v4 = sub_100004FC8(&qword_100158E00);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = swift_projectBox(a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  Bindable.wrappedValue.getter(&v12);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v9 = v12;
  sub_1000F2DEC(a2);
  return swift_release(v9);
}

uint64_t sub_1000605A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v42 = a2;
  v3 = type metadata accessor for SettingsAnyPlatformViewControllerView(0);
  v38 = *(_QWORD *)(v3 - 8);
  v39 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100004FC8(&qword_100159098);
  v40 = *(_QWORD *)(v6 - 8);
  v41 = v6;
  __chkstk_darwin(v6);
  v37 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004FC8(&qword_100158E00);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100004FC8(&qword_1001590A0);
  __chkstk_darwin(v12);
  v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for SettingsAnyPlatformViewControllerRecipe(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v36 - v20;
  v22 = swift_projectBox(a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v22, v8);
  Bindable.wrappedValue.getter(&v43);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v23 = v43;
  v24 = *(void **)(v43 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_pendingFollowUpController);
  if (!v24)
  {
    swift_release(v43);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v14, 1, 1, v15);
    goto LABEL_5;
  }
  *(_QWORD *)(v43 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_pendingFollowUpController) = 0;
  swift_release(v23);
  v25 = v24;
  SettingsAnyPlatformViewControllerRecipe.init(_:)(v25);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v14, 0, 1, v15);

  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
LABEL_5:
    sub_10000BA50((uint64_t)v14, &qword_1001590A0);
    v34 = 1;
    v31 = v41;
    v33 = v42;
    v32 = v40;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56))(v33, v34, 1, v31);
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v21, v14, v15);
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v19, v21, v15);
  v26 = SettingsAnyPlatformViewControllerView.init(platformViewControllerRecipe:)(v19);
  v27 = static Color.clear.getter(v26);
  v43 = v27;
  v28 = sub_100007828(&qword_100159038, (uint64_t (*)(uint64_t))&type metadata accessor for SettingsAnyPlatformViewControllerView, (uint64_t)&protocol conformance descriptor for SettingsAnyPlatformViewControllerView);
  v29 = v37;
  v30 = v39;
  View.presentationBackground<A>(_:)(&v43, v39, &type metadata for Color, v28, &protocol witness table for Color);
  swift_release(v27);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v5, v30);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v21, v15);
  v32 = v40;
  v31 = v41;
  v33 = v42;
  (*(void (**)(uint64_t, char *, uint64_t))(v40 + 32))(v42, v29, v41);
  v34 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56))(v33, v34, 1, v31);
}

uint64_t sub_1000608F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  id v6;
  unsigned int v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v14;

  v2 = type metadata accessor for SettingsApplicationDebugRoot(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v7 = objc_msgSend(v6, "sf_isInternalInstall");

  if (!v7)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(a1, 1, 1, v2);
  *v5 = swift_getKeyPath(&unk_100116A40);
  v8 = sub_100004FC8(&qword_100157780);
  swift_storeEnumTagMultiPayload(v5, v8, 0);
  v9 = (char *)v5 + *(int *)(v2 + 20);
  v10 = type metadata accessor for SettingsAppModel(0);
  v11 = sub_100007828((unint64_t *)&qword_100159090, type metadata accessor for SettingsAppModel, (uint64_t)&unk_10011AF44);
  *(_QWORD *)v9 = Environment.init<A>(_:)(v10, v10, v11);
  v9[8] = v12 & 1;
  sub_100007670((uint64_t)v5, a1, type metadata accessor for SettingsApplicationDebugRoot);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56))(a1, 0, 1, v2);
}

id sub_100060A68()
{
  id result;
  void *v1;
  int wapiCapability;
  unint64_t v3;
  const char *v4;
  unint64_t v5;
  uint64_t v6;

  if (qword_100156C28 != -1)
    swift_once(&qword_100156C28, sub_10003FC28);
  if (!objc_msgSend((id)qword_10015D188, "airplaneMode"))
  {
    v5 = 0x8000000100122830;
    v3 = 0xD000000000000032;
LABEL_10:
    v6 = LocalizedStringKey.init(stringLiteral:)(v3, v5);
    return (id)Text.init(_:tableName:bundle:comment:)(v6);
  }
  result = (id)MobileGestalt_get_current_device();
  if (result)
  {
    v1 = result;
    wapiCapability = MobileGestalt_get_wapiCapability();

    if (wapiCapability)
    {
      v3 = 0xD00000000000003DLL;
      v4 = "Turn off Airplane Mode or use WLAN to sign in to your Device.";
    }
    else
    {
      v3 = 0xD00000000000003ELL;
      v4 = "Turn off Airplane Mode or use Wi-Fi to sign in to your Device.";
    }
    v5 = (unint64_t)(v4 - 32) | 0x8000000000000000;
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100060B6C()
{
  return Button.init(action:label:)(nullsub_1, 0, sub_100060B98, 0, &type metadata for Text, &protocol witness table for Text);
}

uint64_t sub_100060B98@<X0>(uint64_t a1@<X8>)
{
  return sub_100062748(27471, 0xE200000000000000, a1);
}

id sub_100060BB0()
{
  id result;
  void *v1;
  int wapiCapability;
  unint64_t v3;
  const char *v4;
  unint64_t v5;
  uint64_t v6;

  if (qword_100156C28 != -1)
    swift_once(&qword_100156C28, sub_10003FC28);
  if (!objc_msgSend((id)qword_10015D188, "airplaneMode"))
  {
    v5 = 0x8000000100122790;
    v3 = 0xD000000000000013;
LABEL_10:
    v6 = LocalizedStringKey.init(stringLiteral:)(v3, v5);
    return (id)Text.init(_:tableName:bundle:comment:)(v6);
  }
  result = (id)MobileGestalt_get_current_device();
  if (result)
  {
    v1 = result;
    wapiCapability = MobileGestalt_get_wapiCapability();

    if (wapiCapability)
    {
      v3 = 0xD00000000000002ELL;
      v4 = "Turn Off Airplane Mode or Use WLAN to Continue";
    }
    else
    {
      v3 = 0xD00000000000002FLL;
      v4 = "Turn Off Airplane Mode or Use Wi-Fi to Continue";
    }
    v5 = (unint64_t)(v4 - 32) | 0x8000000000000000;
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100060CB4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  if (qword_100156C28 != -1)
    swift_once(&qword_100156C28, sub_10003FC28);
  if (objc_msgSend((id)qword_10015D188, "airplaneMode"))
  {
    v2 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000002DLL, 0x8000000100122710);
    result = Text.init(_:tableName:bundle:comment:)(v2);
    v7 = v6 & 1;
  }
  else
  {
    result = 0;
    v4 = 0;
    v7 = 0;
    v5 = 0;
  }
  *a1 = result;
  a1[1] = v4;
  a1[2] = v7;
  a1[3] = v5;
  return result;
}

void sub_100060D80(uint64_t a1, uint8_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  int v57;
  uint64_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint8_t *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint8_t *v67;
  uint8_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint8_t *v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(uint64_t, uint64_t);
  uint8_t *v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint8_t *v97;
  uint8_t *v98;
  uint64_t v99;
  int v100;
  os_log_t v101;
  uint64_t v102;
  char *v103;
  uint8_t *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111[5];
  __int128 v112;
  __int128 v113;

  v104 = a2;
  v3 = type metadata accessor for PPTTestCase.Name(0);
  v107 = *(_QWORD *)(v3 - 8);
  v108 = v3;
  __chkstk_darwin(v3);
  v106 = (char *)&v96 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100004FC8((uint64_t *)&unk_10015C9A0);
  __chkstk_darwin(v5);
  v7 = (char *)&v96 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL(0);
  v105 = *(_QWORD *)(v8 - 8);
  v9 = __chkstk_darwin(v8);
  v102 = (uint64_t)&v96 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v103 = (char *)&v96 - v12;
  __chkstk_darwin(v11);
  v14 = (char *)&v96 - v13;
  v15 = type metadata accessor for PPTTestCase(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v96 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v96 - v21;
  v23 = __chkstk_darwin(v20);
  v25 = (char *)&v96 - v24;
  v26 = PPTTestCase.parameters.getter(v23);
  v109 = 5001813;
  v110 = 0xE300000000000000;
  AnyHashable.init<A>(_:)(v111, &v109, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v26 + 16) && (v27 = sub_1000DA95C((uint64_t)v111), (v28 & 1) != 0))
  {
    sub_1000148AC(*(_QWORD *)(v26 + 56) + 32 * v27, (uint64_t)&v112);
  }
  else
  {
    v112 = 0u;
    v113 = 0u;
  }
  swift_bridgeObjectRelease(v26);
  sub_100014878((uint64_t)v111);
  if (*((_QWORD *)&v113 + 1))
  {
    if ((swift_dynamicCast(&v109, &v112, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
    {
      v29 = v110;
      URL.init(string:)(v109, v110);
      swift_bridgeObjectRelease(v29);
      v30 = v105;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v105 + 48))(v7, 1, v8) == 1)
      {
        sub_10000BA50((uint64_t)v7, (uint64_t *)&unk_10015C9A0);
        if (qword_100156CD0 != -1)
          swift_once(&qword_100156CD0, sub_10008BEC4);
        v31 = type metadata accessor for Logger(0);
        sub_100007808(v31, (uint64_t)qword_10015D328);
        v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 16))(v22, a1, v15);
        v33 = Logger.logObject.getter(v32);
        v34 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v33, v34))
        {
          v35 = (uint8_t *)swift_slowAlloc(12, -1);
          v36 = swift_slowAlloc(32, -1);
          v111[0] = v36;
          *(_DWORD *)v35 = 136446210;
          v104 = v35 + 4;
          v105 = v16;
          v37 = v106;
          v38 = PPTTestCase.name.getter(v36);
          v39 = PPTTestCase.Name.rawValue.getter(v38);
          v41 = v40;
          (*(void (**)(char *, uint64_t))(v107 + 8))(v37, v108);
          *(_QWORD *)&v112 = sub_1000DA1F0(v39, v41, v111);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, (char *)&v112 + 8, v104, v35 + 12);
          swift_bridgeObjectRelease(v41);
          (*(void (**)(char *, uint64_t))(v105 + 8))(v22, v15);
          _os_log_impl((void *)&_mh_execute_header, v33, v34, "Cannot run Scroll PPT Test '%{public}s': no url found", v35, 0xCu);
          swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v36, -1, -1);
          swift_slowDealloc(v35, -1, -1);
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v16 + 8))(v22, v15);
        }

        return;
      }
      (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v14, v7, v8);
      if (qword_100156CD0 != -1)
        swift_once(&qword_100156CD0, sub_10008BEC4);
      v53 = type metadata accessor for Logger(0);
      sub_100007808(v53, (uint64_t)qword_10015D328);
      v54 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, a1, v15);
      v55 = Logger.logObject.getter(v54);
      v56 = static os_log_type_t.default.getter();
      v57 = v56;
      if (os_log_type_enabled(v55, v56))
      {
        v101 = v55;
        v58 = swift_slowAlloc(12, -1);
        v100 = v57;
        v59 = (uint8_t *)v58;
        v60 = swift_slowAlloc(32, -1);
        v99 = v60;
        v111[0] = v60;
        v98 = v59;
        *(_DWORD *)v59 = 136446210;
        v61 = v59 + 12;
        v97 = v59 + 4;
        v62 = v106;
        v63 = PPTTestCase.name.getter(v60);
        v64 = PPTTestCase.Name.rawValue.getter(v63);
        v66 = v65;
        (*(void (**)(char *, uint64_t))(v107 + 8))(v62, v108);
        *(_QWORD *)&v112 = sub_1000DA1F0(v64, v66, v111);
        v67 = v61;
        v30 = v105;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, (char *)&v112 + 8, v97, v67);
        swift_bridgeObjectRelease(v66);
        (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
        v55 = v101;
        v68 = v98;
        _os_log_impl((void *)&_mh_execute_header, v101, (os_log_type_t)v100, "Running Scroll PPT Test '%{public}s'", v98, 0xCu);
        v69 = v99;
        swift_arrayDestroy(v99, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v69, -1, -1);
        swift_slowDealloc(v68, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
      }

      v71 = URL.scheme.getter(v70);
      if (v72)
      {
        v73 = v72;
        if (v71 == 0x7366657270 && v72 == 0xE500000000000000)
        {
          swift_bridgeObjectRelease(0xE500000000000000);
LABEL_31:
          v75 = &v104[*(int *)(type metadata accessor for SettingsNavigationSplitView(0) + 28)];
          v76 = *(_QWORD *)v75;
          v77 = v75[8];
          v78 = swift_retain(*(_QWORD *)v75);
          v79 = sub_100063744(v78, v77, 0xD000000000000010, 0x8000000100122970);
          swift_release(v76);
          v80 = v102;
          sub_100019DF4(v102);
          v81 = sub_100004FC8(&qword_100157390);
          v82 = type metadata accessor for URLQueryItem(0);
          v83 = swift_allocObject(v81, ((*(unsigned __int8 *)(*(_QWORD *)(v82 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v82 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v82 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v82 - 8) + 80) | 7);
          *(_OWORD *)(v83 + 16) = xmmword_1001164D0;
          v84 = v106;
          v85 = PPTTestCase.name.getter(v83);
          v86 = PPTTestCase.Name.rawValue.getter(v85);
          v88 = v87;
          (*(void (**)(char *, uint64_t))(v107 + 8))(v84, v108);
          URLQueryItem.init(name:value:)(0x4E74736554747070, 0xEB00000000656D61, v86, v88);
          swift_bridgeObjectRelease(v88);
          v89 = (uint64_t)v103;
          URL.appending(queryItems:)(v83);
          swift_bridgeObjectRelease(v83);
          v90 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
          v90(v80, v8);
          sub_1000D8D44(v89);
          swift_release(v79);
          v90(v89, v8);
          v90((uint64_t)v14, v8);
          return;
        }
        v74 = _stringCompareWithSmolCheck(_:_:expecting:)(v71, v72, 0x7366657270, 0xE500000000000000, 0);
        swift_bridgeObjectRelease(v73);
        if ((v74 & 1) != 0)
          goto LABEL_31;
      }
      v91 = &v104[*(int *)(type metadata accessor for SettingsNavigationSplitView(0) + 28)];
      v92 = *(_QWORD *)v91;
      v93 = v91[8];
      v94 = swift_retain(*(_QWORD *)v91);
      v95 = sub_100063744(v94, v93, 0xD000000000000010, 0x8000000100122970);
      swift_release(v92);
      sub_1000D8D44((uint64_t)v14);
      swift_release(v95);
      (*(void (**)(char *, uint64_t))(v30 + 8))(v14, v8);
      return;
    }
  }
  else
  {
    sub_10000BA50((uint64_t)&v112, &qword_10015BA90);
  }
  if (qword_100156CD0 != -1)
    swift_once(&qword_100156CD0, sub_10008BEC4);
  v42 = type metadata accessor for Logger(0);
  sub_100007808(v42, (uint64_t)qword_10015D328);
  v43 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 16))(v25, a1, v15);
  v44 = Logger.logObject.getter(v43);
  v45 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v44, v45))
  {
    v46 = (uint8_t *)swift_slowAlloc(12, -1);
    v47 = swift_slowAlloc(32, -1);
    v111[0] = v47;
    v104 = (uint8_t *)v15;
    v105 = v16;
    *(_DWORD *)v46 = 136446210;
    v48 = v106;
    v49 = PPTTestCase.name.getter(v47);
    v50 = PPTTestCase.Name.rawValue.getter(v49);
    v52 = v51;
    (*(void (**)(char *, uint64_t))(v107 + 8))(v48, v108);
    *(_QWORD *)&v112 = sub_1000DA1F0(v50, v52, v111);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, (char *)&v112 + 8, v46 + 4, v46 + 12);
    swift_bridgeObjectRelease(v52);
    (*(void (**)(char *, uint8_t *))(v105 + 8))(v25, v104);
    _os_log_impl((void *)&_mh_execute_header, v44, v45, "Cannot run Scroll PPT Test '%{public}s': no url string found", v46, 0xCu);
    swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v47, -1, -1);
    swift_slowDealloc(v46, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v25, v15);
  }

}

uint64_t sub_1000617A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t KeyPath;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t OpaqueTypeConformance2;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  char v59[24];

  v52 = a1;
  v1 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100004FC8(&qword_100159140);
  __chkstk_darwin(v5);
  v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004FC8(&qword_100159148);
  v44 = *(_QWORD *)(v8 - 8);
  v45 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004FC8(&qword_100159118);
  __chkstk_darwin(v11);
  v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100004FC8(&qword_100159110);
  v15 = *(_QWORD *)(v14 - 8);
  v48 = v14;
  v49 = v15;
  __chkstk_darwin(v14);
  v46 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100004FC8(&qword_100159108);
  v18 = *(_QWORD *)(v17 - 8);
  v50 = v17;
  v51 = v18;
  __chkstk_darwin(v17);
  v47 = (char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100061CF4((uint64_t)v7);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v1);
  v20 = sub_100063B20(&qword_100159150, &qword_100159140, (void (*)(void))sub_1000648A4, (uint64_t)&protocol conformance descriptor for <A> Group<A>);
  View.navigationBarTitleDisplayMode(_:)(v4, v5, v20);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  sub_10000BA50((uint64_t)v7, &qword_100159140);
  type metadata accessor for SettingsNavigationSplitView(0);
  sub_100004FC8(&qword_100158D38);
  Bindable.wrappedValue.getter(&v53);
  v21 = v53;
  KeyPath = swift_getKeyPath(&unk_100116B10);
  v53 = v21;
  v23 = sub_100007828((unint64_t *)&qword_100158F78, type metadata accessor for SettingsAppNavigationModel, (uint64_t)&unk_10011B030);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v53, KeyPath, v23);
  swift_release(KeyPath);
  v24 = v21 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__detailContent;
  swift_beginAccess(v21 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__detailContent, v59, 0, 0);
  v25 = v11;
  sub_1000076F0(v24, (uint64_t)&v13[*(int *)(v11 + 52)], type metadata accessor for SettingsAppDetailContent);
  swift_release(v21);
  (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v13, v10, v45);
  v26 = type metadata accessor for PreferencesControllerRecipe(0);
  v27 = type metadata accessor for PreferencesControllerView(0);
  v28 = sub_100007868(&qword_100159120, &qword_100159118, (uint64_t)&protocol conformance descriptor for IDView<A, B>);
  v29 = sub_100007828((unint64_t *)&qword_10015C620, (uint64_t (*)(uint64_t))&type metadata accessor for PreferencesControllerRecipe, (uint64_t)&protocol conformance descriptor for PreferencesControllerRecipe);
  v30 = sub_100007828(&qword_100159128, (uint64_t (*)(uint64_t))&type metadata accessor for PreferencesControllerView, (uint64_t)&protocol conformance descriptor for PreferencesControllerView);
  v31 = v46;
  View.navigationDestination<A, B>(for:destination:)(v26, sub_10006242C, 0, v25, v26, v27, v28, v29, v30);
  sub_10000BA50((uint64_t)v13, &qword_100159118);
  v32 = type metadata accessor for SettingsAnyViewRecipe(0);
  v53 = v25;
  v54 = v26;
  v55 = (void *)v27;
  v56 = v28;
  v57 = v29;
  v58 = (void *)v30;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v53, &opaque type descriptor for <<opaque return type of View.navigationDestination<A, B>(for:destination:)>>, 1);
  v34 = sub_100007828(&qword_100159130, (uint64_t (*)(uint64_t))&type metadata accessor for SettingsAnyViewRecipe, (uint64_t)&protocol conformance descriptor for SettingsAnyViewRecipe);
  v36 = v47;
  v35 = v48;
  View.navigationDestination<A, B>(for:destination:)(v32, sub_100062440, 0, v48, v32, &type metadata for AnyView, OpaqueTypeConformance2, v34, &protocol witness table for AnyView);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v31, v35);
  v37 = type metadata accessor for SettingsAnyPlatformViewControllerRecipe(0);
  v38 = type metadata accessor for SettingsAnyPlatformViewControllerView(0);
  v53 = v35;
  v54 = v32;
  v55 = &type metadata for AnyView;
  v56 = OpaqueTypeConformance2;
  v57 = v34;
  v58 = &protocol witness table for AnyView;
  v39 = swift_getOpaqueTypeConformance2(&v53, &opaque type descriptor for <<opaque return type of View.navigationDestination<A, B>(for:destination:)>>, 1);
  v40 = sub_100007828(&qword_100159138, (uint64_t (*)(uint64_t))&type metadata accessor for SettingsAnyPlatformViewControllerRecipe, (uint64_t)&protocol conformance descriptor for SettingsAnyPlatformViewControllerRecipe);
  v41 = sub_100007828(&qword_100159038, (uint64_t (*)(uint64_t))&type metadata accessor for SettingsAnyPlatformViewControllerView, (uint64_t)&protocol conformance descriptor for SettingsAnyPlatformViewControllerView);
  v42 = v50;
  View.navigationDestination<A, B>(for:destination:)(v37, sub_100062468, 0, v50, v37, v38, v39, v40, v41);
  return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v36, v42);
}

void sub_100061CF4(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[7];
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[4];

  v25 = a1;
  v1 = type metadata accessor for SettingsExperienceConnectionOptions(0);
  v16[5] = *(_QWORD *)(v1 - 8);
  v16[6] = v1;
  __chkstk_darwin(v1);
  v16[4] = (char *)v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100004FC8(&qword_100159188);
  __chkstk_darwin(v17);
  v18 = (char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_100004FC8(&qword_100159180);
  __chkstk_darwin(v24);
  v21 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for PreferencesControllerView(0);
  v16[3] = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v16[2] = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for SettingsAnyPlatformViewControllerView(0);
  v16[1] = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v16[0] = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100004FC8(&qword_100159190);
  __chkstk_darwin(v22);
  v7 = sub_100004FC8(&qword_100159198);
  __chkstk_darwin(v7);
  v23 = sub_100004FC8(&qword_100159170);
  __chkstk_darwin(v23);
  v8 = type metadata accessor for SettingsAppDetailContent(0);
  __chkstk_darwin(v8);
  v10 = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SettingsNavigationSplitView(0);
  sub_100004FC8(&qword_100158D38);
  Bindable.wrappedValue.getter(v26);
  v11 = v26[0];
  KeyPath = swift_getKeyPath(&unk_100116B10);
  v26[0] = v11;
  v13 = sub_100007828((unint64_t *)&qword_100158F78, type metadata accessor for SettingsAppNavigationModel, (uint64_t)&unk_10011B030);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v26, KeyPath, v13);
  swift_release(KeyPath);
  v14 = v11 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__detailContent;
  swift_beginAccess(v11 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__detailContent, v26, 0, 0);
  sub_1000076F0(v14, (uint64_t)v10, type metadata accessor for SettingsAppDetailContent);
  swift_release(v11);
  v15 = *(_QWORD *)&v10[*(int *)(v8 + 20)];
  swift_retain(v15 & 0x3FFFFFFFFFFFFFFFLL);
  sub_1000076B4((uint64_t)v10, type metadata accessor for SettingsAppDetailContent);
  __asm { BR              X10 }
}

uint64_t sub_10006203C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v7 = swift_retain(v3);
  v8 = *(_QWORD *)(v6 - 240);
  ((void (*)(uint64_t))SettingsAnyPlatformViewControllerView.init(platformViewControllerModel:))(v7);
  v9 = *(_QWORD *)(v6 - 232);
  v10 = *(_QWORD *)(v6 - 168);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v4, v8, v10);
  swift_storeEnumTagMultiPayload(v4, v5, 1);
  v11 = sub_100007828(&qword_100159038, (uint64_t (*)(uint64_t))&type metadata accessor for SettingsAnyPlatformViewControllerView, (uint64_t)&protocol conformance descriptor for SettingsAnyPlatformViewControllerView);
  _ConditionalContent<>.init(storage:)(v4, &type metadata for Color, v10, &protocol witness table for Color, v11);
  sub_100018C00(v0, v2, &qword_100159170);
  swift_storeEnumTagMultiPayload(v2, *(_QWORD *)(v6 - 144), 0);
  v12 = sub_100064910();
  v13 = sub_100064994();
  _ConditionalContent<>.init(storage:)(v2, *(_QWORD *)(v6 - 136), *(_QWORD *)(v6 - 128), v12, v13);
  swift_release(v1);
  sub_10000BA50(v0, &qword_100159170);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
}

uint64_t sub_10006242C(uint64_t a1)
{
  return sub_10006247C(a1, (void (*)(_QWORD))&type metadata accessor for PreferencesControllerRecipe, (uint64_t (*)(char *))&PreferencesControllerView.init(preferencesControllerRecipe:));
}

uint64_t sub_100062440@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = SettingsAnyViewRecipe.view.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100062468(uint64_t a1)
{
  return sub_10006247C(a1, (void (*)(_QWORD))&type metadata accessor for SettingsAnyPlatformViewControllerRecipe, (uint64_t (*)(char *))&SettingsAnyPlatformViewControllerView.init(platformViewControllerRecipe:));
}

uint64_t sub_10006247C(uint64_t a1, void (*a2)(_QWORD), uint64_t (*a3)(char *))
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  a2(0);
  __chkstk_darwin();
  v6 = (char *)&v9 - v5;
  (*(void (**)(char *, uint64_t))(v7 + 16))((char *)&v9 - v5, a1);
  return a3(v6);
}

uint64_t sub_1000624FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v2 = type metadata accessor for SettingsNavigationSplitView(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100004FC8(&qword_10015C5A0);
  __chkstk_darwin(v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  sub_1000076F0(a1, (uint64_t)v5, type metadata accessor for SettingsNavigationSplitView);
  v10 = type metadata accessor for MainActor(0);
  v11 = static MainActor.shared.getter(v10);
  v12 = *(unsigned __int8 *)(v3 + 80);
  v13 = (v12 + 32) & ~v12;
  v14 = swift_allocObject(&unk_10014A3F8, v13 + v4, v12 | 7);
  *(_QWORD *)(v14 + 16) = v11;
  *(_QWORD *)(v14 + 24) = &protocol witness table for MainActor;
  sub_100007670((uint64_t)v5, v14 + v13, type metadata accessor for SettingsNavigationSplitView);
  v15 = sub_1000F1E18((uint64_t)v8, (uint64_t)&unk_1001590E8, v14);
  return swift_release(v15);
}

uint64_t sub_100062640(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v4 + 24) = a4;
  v5 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v4 + 32) = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000626AC, v6, v7);
}

uint64_t sub_1000626AC()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;

  swift_release(*(_QWORD *)(v0 + 32));
  type metadata accessor for SettingsNavigationSplitView(0);
  sub_100004FC8(&qword_100158D38);
  Bindable.wrappedValue.getter((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 16);
  v2 = sub_1000DB598();
  swift_release(v1);
  sub_1000F2DEC(7);
  swift_release(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006272C@<X0>(uint64_t a1@<X8>)
{
  return sub_100062748(1701736260, 0xE400000000000000, a1);
}

uint64_t sub_100062748@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v4 = LocalizedStringKey.init(stringLiteral:)(a1, a2);
  result = Text.init(_:tableName:bundle:comment:)(v4);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = v7 & 1;
  *(_QWORD *)(a3 + 24) = v8;
  return result;
}

uint64_t sub_1000627B8@<X0>(uint64_t a1@<X8>)
{
  return sub_10005D79C(a1);
}

uint64_t sub_1000627C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10005DF10(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_1000627C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100158F08;
  if (!qword_100158F08)
  {
    v1 = sub_100005430(&qword_100158EF8);
    sub_10006284C();
    sub_100007868(&qword_100158F40, &qword_100158F48, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100158F08);
  }
  return result;
}

unint64_t sub_10006284C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v4;
  uint64_t v5;

  result = qword_100158F10;
  if (!qword_100158F10)
  {
    v1 = sub_100005430(&qword_100158F18);
    v2 = sub_100005430(&qword_100158F20);
    v4 = type metadata accessor for PrimarySettingsList(255);
    v5 = sub_100007828(&qword_100158F28, type metadata accessor for PrimarySettingsList, (uint64_t)&unk_100117960);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.searchable(text:isPresented:placement:prompt:)>>, 1);
    v4 = v2;
    v5 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.toolbar(removing:)>>, 1);
    sub_100007868(&qword_100158F30, &qword_100158F38, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100158F10);
  }
  return result;
}

uint64_t sub_100062948()
{
  return sub_100064620((uint64_t (*)(uint64_t))sub_10005E1F4);
}

uint64_t sub_100062954()
{
  return EnvironmentValues.horizontalSizeClass.getter();
}

uint64_t sub_10006297C(uint64_t a1)
{
  return sub_100062D0C(a1, (uint64_t (*)(uint64_t, uint64_t))sub_10005E2CC);
}

unint64_t sub_100062988()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100158F70;
  if (!qword_100158F70)
  {
    v1 = sub_100005430((uint64_t *)&unk_10015C3F0);
    sub_100007828((unint64_t *)&unk_10015C410, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100158F70);
  }
  return result;
}

uint64_t sub_100062A04()
{
  return EnvironmentValues.scenePhase.getter();
}

uint64_t sub_100062A2C(uint64_t a1)
{
  return sub_100062D0C(a1, (uint64_t (*)(uint64_t, uint64_t))sub_10005E47C);
}

uint64_t sub_100062A3C(unsigned __int8 *a1)
{
  type metadata accessor for SettingsNavigationSplitView(0);
  return sub_10005E5DC(a1);
}

uint64_t sub_100062A7C(uint64_t a1)
{
  return sub_100062D0C(a1, sub_10005E644);
}

uint64_t sub_100062A88(uint64_t a1)
{
  return sub_100062B3C(a1, qword_10015D1C0, 0xD000000000000018, 0x8000000100122A40);
}

uint64_t sub_100062AAC(uint64_t a1)
{
  return sub_100062B3C(a1, qword_10015D1D8, 0xD00000000000001BLL, 0x80000001001229E0);
}

uint64_t sub_100062AD0(uint64_t a1)
{
  return sub_100062B3C(a1, qword_10015D1F0, 0xD00000000000001CLL, 0x80000001001229C0);
}

uint64_t sub_100062AF4(uint64_t a1)
{
  return sub_100062B3C(a1, qword_10015D208, 0xD000000000000013, 0x8000000100122A20);
}

uint64_t sub_100062B18(uint64_t a1)
{
  return sub_100062B3C(a1, qword_10015D220, 0xD000000000000022, 0x8000000100122990);
}

uint64_t sub_100062B3C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = type metadata accessor for PPTTestCase.Name(0);
  sub_10001AED4(v7, a2);
  sub_100007808(v7, (uint64_t)a2);
  return PPTTestCase.Name.init(_:)(a3, a4);
}

uint64_t sub_100062B98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, void (*a5)(_QWORD *)@<X4>, uint64_t *a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v17 = a1;
  v18 = a2;
  v19 = a3;
  v11 = sub_100004FC8(&qword_100159088);
  v12 = Binding.wrappedValue.getter(&v16, v11);
  if (v16 == 7 || v16 != a4)
  {
    v15 = sub_100004FC8(a6);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a7, 1, 1, v15);
  }
  else
  {
    a5(v12);
    v13 = sub_100004FC8(a6);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a7, 0, 1, v13);
  }
}

void sub_100062C70(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SettingsNavigationSplitView(0) - 8) + 80);
  sub_10005E798(a1, a2, v2 + ((v5 + 16) & ~v5));
}

uint64_t sub_100062CC0(void *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SettingsNavigationSplitView(0) - 8) + 80);
  return sub_10005E990(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_100062D00(uint64_t a1)
{
  return sub_100062D0C(a1, (uint64_t (*)(uint64_t, uint64_t))sub_10005ECB8);
}

uint64_t sub_100062D0C(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SettingsNavigationSplitView(0) - 8) + 80);
  return a2(a1, v2 + ((v4 + 16) & ~v4));
}

uint64_t sub_100062D68(uint64_t a1)
{
  type metadata accessor for SettingsNavigationSplitView(0);
  return sub_10005ED74(a1);
}

uint64_t sub_100062DAC()
{
  return sub_100064620(sub_10005F100);
}

uint64_t sub_100062DB8()
{
  uint64_t v0;

  return sub_1000604E4(v0, 3);
}

unint64_t sub_100062DD4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100158F90;
  if (!qword_100158F90)
  {
    v1 = sub_100005430(&qword_100158E98);
    sub_100062E40();
    sub_10006301C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100158F90);
  }
  return result;
}

unint64_t sub_100062E40()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t OpaqueTypeConformance2;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;

  result = qword_100158F98;
  if (!qword_100158F98)
  {
    v1 = sub_100005430(&qword_100158E90);
    v2 = sub_100005430(&qword_100158E80);
    v3 = sub_100005430(&qword_100158E78);
    v4 = sub_100005430(&qword_100158E70);
    v5 = sub_100005430(&qword_100158E68);
    v6 = sub_100005430(&qword_100158E60);
    v12 = sub_100005430(&qword_100158E58);
    v13 = &type metadata for Bool;
    v14 = sub_100007868(&qword_100158F80, &qword_100158E58, (uint64_t)&protocol conformance descriptor for SubscriptionView<A, B>);
    v15 = &protocol witness table for Bool;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v12, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    v12 = v6;
    v13 = (void *)OpaqueTypeConformance2;
    v8 = swift_getOpaqueTypeConformance2(&v12, &opaque type descriptor for <<opaque return type of View.onContinueUserActivity(_:perform:)>>, 1);
    v12 = v5;
    v13 = (void *)v8;
    v9 = swift_getOpaqueTypeConformance2(&v12, &opaque type descriptor for <<opaque return type of View.onTest(_:handler:)>>, 1);
    v12 = v4;
    v13 = (void *)v9;
    v10 = swift_getOpaqueTypeConformance2(&v12, &opaque type descriptor for <<opaque return type of View.onTest(_:handler:)>>, 1);
    v12 = v3;
    v13 = (void *)v10;
    v11 = swift_getOpaqueTypeConformance2(&v12, &opaque type descriptor for <<opaque return type of View.onTest(_:handler:)>>, 1);
    v12 = v2;
    v13 = (void *)v11;
    swift_getOpaqueTypeConformance2(&v12, &opaque type descriptor for <<opaque return type of View.onTest(_:handler:)>>, 1);
    sub_100062FD8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100158F98);
  }
  return result;
}

unint64_t sub_100062FD8()
{
  unint64_t result;

  result = qword_100158FA0;
  if (!qword_100158FA0)
  {
    result = swift_getWitnessTable(&unk_100116BA8, &type metadata for FirstAppearanceModifier);
    atomic_store(result, (unint64_t *)&qword_100158FA0);
  }
  return result;
}

unint64_t sub_10006301C()
{
  unint64_t result;

  result = qword_100158FA8;
  if (!qword_100158FA8)
  {
    result = swift_getWitnessTable(&unk_100118354, &type metadata for DebugMenuModifier);
    atomic_store(result, (unint64_t *)&qword_100158FA8);
  }
  return result;
}

uint64_t sub_10006306C()
{
  return sub_100063A08(sub_10005F27C);
}

uint64_t sub_100063078@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100116AC0);
  v8[0] = v3;
  v5 = sub_100007828((unint64_t *)&qword_100158F78, type metadata accessor for SettingsAppNavigationModel, (uint64_t)&unk_10011B030);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = v3 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__scenePhase;
  swift_beginAccess(v3 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__scenePhase, v8, 0, 0);
  return sub_100018C00(v6, a2, (uint64_t *)&unk_10015C630);
}

uint64_t sub_100063130(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  _BYTE v11[16];
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;

  v4 = sub_100004FC8((uint64_t *)&unk_10015C630);
  __chkstk_darwin(v4);
  v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100018C00(a1, (uint64_t)v6, (uint64_t *)&unk_10015C630);
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_100116AC0);
  v12 = v7;
  v13 = v6;
  v14 = v7;
  v9 = sub_100007828((unint64_t *)&qword_100158F78, type metadata accessor for SettingsAppNavigationModel, (uint64_t)&unk_10011B030);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v14, KeyPath, sub_100064DD0, v11, (char *)&type metadata for () + 8, v9);
  swift_release(KeyPath);
  return sub_10000BA50((uint64_t)v6, (uint64_t *)&unk_10015C630);
}

uint64_t sub_100063238@<X0>(uint64_t a1@<X8>)
{
  return sub_100063448(&qword_100157780, (uint64_t (*)(_QWORD))&type metadata accessor for DismissAction, 0x417373696D736944, 0xED00006E6F697463, a1);
}

double sub_10006326C(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v15;
  double v16;

  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
    return *(double *)&a1;
  v8 = swift_retain(a1);
  v9 = static os_log_type_t.fault.getter(v8);
  v10 = static Log.runtimeIssuesLog.getter();
  v11 = v9;
  if (os_log_type_enabled(v10, v9))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v16 = *(double *)&v13;
    *(_DWORD *)v12 = 136315138;
    v15 = sub_1000DA1F0(0x74616F6C464743, 0xE700000000000000, (uint64_t *)&v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v12 + 4, v12 + 12);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath(v7, a1);
  sub_10004260C(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v16;
}

uint64_t sub_10006342C(uint64_t a1, char a2)
{
  return sub_100063744(a1, a2, 0xD00000000000001ALL, 0x8000000100122A00);
}

uint64_t sub_100063448@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v20;
  os_log_type_t v21;
  NSObject *v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v29 = a3;
  v9 = v5;
  v11 = type metadata accessor for EnvironmentValues(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100004FC8(a1);
  __chkstk_darwin(v15);
  v17 = (uint64_t *)((char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100018C00(v9, (uint64_t)v17, a1);
  if (swift_getEnumCaseMultiPayload(v17, v15) == 1)
  {
    v18 = a2(0);
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(a5, v17, v18);
  }
  else
  {
    v20 = *v17;
    v21 = static os_log_type_t.fault.getter();
    v22 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v22, v21))
    {
      v27 = a4;
      v23 = swift_slowAlloc(12, -1);
      v28 = a5;
      v24 = (uint8_t *)v23;
      v25 = swift_slowAlloc(32, -1);
      v31 = v25;
      *(_DWORD *)v24 = 136315138;
      v30 = sub_1000DA1F0(v29, v27, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v24 + 4, v24 + 12);
      _os_log_impl((void *)&_mh_execute_header, v22, v21, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v24, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(v14, v20);
    swift_release(v20);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

uint64_t sub_100063680(uint64_t a1, char a2)
{
  return sub_100063744(a1, a2, 0xD000000000000010, 0x8000000100122970);
}

uint64_t sub_10006369C@<X0>(uint64_t a1@<X8>)
{
  return sub_100063448(&qword_1001588F0, (uint64_t (*)(_QWORD))&type metadata accessor for OpenURLAction, 0x414C52556E65704FLL, 0xED00006E6F697463, a1);
}

uint64_t sub_1000636D0@<X0>(uint64_t a1@<X8>)
{
  return sub_100063448(&qword_1001591C0, (uint64_t (*)(_QWORD))&type metadata accessor for Locale, 0x656C61636F4CLL, 0xE600000000000000, a1);
}

uint64_t sub_1000636F4@<X0>(uint64_t a1@<X8>)
{
  return sub_100063448(&qword_1001591B8, (uint64_t (*)(_QWORD))&type metadata accessor for LayoutDirection, 0x694474756F79614CLL, 0xEF6E6F6974636572, a1);
}

uint64_t sub_100063728(uint64_t a1, char a2)
{
  return sub_100063744(a1, a2, 0xD00000000000002ALL, 0x8000000100122A60);
}

uint64_t sub_100063744(uint64_t a1, char a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  os_log_type_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v8 = type metadata accessor for EnvironmentValues(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = swift_retain(a1);
  if ((a2 & 1) == 0)
  {
    v13 = static os_log_type_t.fault.getter(v12);
    v14 = static Log.runtimeIssuesLog.getter();
    v15 = v13;
    if (os_log_type_enabled(v14, v13))
    {
      v22 = a4;
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = swift_slowAlloc(32, -1);
      v18 = a3;
      v19 = v17;
      v24 = v17;
      *(_DWORD *)v16 = 136315138;
      v23 = sub_1000DA1F0(v18, v22, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v16 + 4, v16 + 12);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v16, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v16, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(v11, a1);
    swift_release(a1);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    return v24;
  }
  return a1;
}

_QWORD *sub_100063900@<X0>(uint64_t *a1@<X2>, unsigned __int8 *a2@<X3>, BOOL *a3@<X8>)
{
  uint64_t v4;
  char v5;
  int v6;
  uint64_t v7;
  _QWORD *result;
  BOOL v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v4 = a1[1];
  v5 = *((_BYTE *)a1 + 16);
  v6 = *a2;
  v12 = *a1;
  v13 = v4;
  v14 = v5;
  v7 = sub_100004FC8(&qword_100159088);
  result = Binding.wrappedValue.getter(&v11, v7);
  v10 = v11 != 7 && v11 == v6;
  *a3 = v10;
  return result;
}

uint64_t sub_100063970@<X0>(uint64_t a1@<X8>)
{
  return sub_100063A64(&qword_100158FC8, a1);
}

unint64_t sub_10006397C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100158FB8;
  if (!qword_100158FB8)
  {
    v1 = sub_100005430(&qword_100158FB0);
    sub_100007868(&qword_100158FC0, &qword_100158FC8, (uint64_t)&protocol conformance descriptor for NavigationStack<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100158FB8);
  }
  return result;
}

uint64_t sub_1000639FC()
{
  return sub_100063A08(sub_10005F4BC);
}

uint64_t sub_100063A08(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SettingsNavigationSplitView(0) - 8) + 80);
  return a1(v1 + ((v2 + 16) & ~v2));
}

uint64_t sub_100063A58@<X0>(uint64_t a1@<X8>)
{
  return sub_100063A64(&qword_100158FE8, a1);
}

uint64_t sub_100063A64@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100062B98(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_BYTE *)(v2 + 32), *(_BYTE *)(v2 + 33), *(void (**)(_QWORD *))(v2 + 40), a1, a2);
}

unint64_t sub_100063A8C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100158FD8;
  if (!qword_100158FD8)
  {
    v1 = sub_100005430(&qword_100158FD0);
    sub_100007868(&qword_100158FE0, &qword_100158FE8, (uint64_t)&protocol conformance descriptor for NavigationStack<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100158FD8);
  }
  return result;
}

uint64_t sub_100063B08@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10005F970(v1, a1);
}

uint64_t sub_100063B14@<X0>(uint64_t a1@<X8>)
{
  return sub_100063A64(&qword_100159008, a1);
}

uint64_t sub_100063B20(unint64_t *a1, uint64_t *a2, void (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100005430(a2);
    a3();
    result = swift_getWitnessTable(a4, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100063B84()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159000;
  if (!qword_100159000)
  {
    v1 = sub_100005430(&qword_100159008);
    sub_100007828(&qword_100159010, (uint64_t (*)(uint64_t))&type metadata accessor for AppleIDSignInView, (uint64_t)&protocol conformance descriptor for AppleIDSignInView);
    sub_100007828(&qword_100157828, type metadata accessor for AppleAccountSignInSheet, (uint64_t)&unk_100114890);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100159000);
  }
  return result;
}

uint64_t sub_100063C20()
{
  uint64_t v0;

  return sub_1000604E4(v0, 7);
}

uint64_t sub_100063C3C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000605A8(v1, a1);
}

uint64_t sub_100063C48@<X0>(uint64_t a1@<X8>)
{
  return sub_100063A64(&qword_100159030, a1);
}

unint64_t sub_100063C54()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_100159028;
  if (!qword_100159028)
  {
    v1 = sub_100005430(&qword_100159030);
    v2[0] = type metadata accessor for SettingsAnyPlatformViewControllerView(255);
    v2[1] = &type metadata for Color;
    v2[2] = sub_100007828(&qword_100159038, (uint64_t (*)(uint64_t))&type metadata accessor for SettingsAnyPlatformViewControllerView, (uint64_t)&protocol conformance descriptor for SettingsAnyPlatformViewControllerView);
    v2[3] = &protocol witness table for Color;
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.presentationBackground<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100159028);
  }
  return result;
}

uint64_t sub_100063D0C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100063D40@<X0>(uint64_t a1@<X8>)
{
  return sub_100063A64(&qword_100159058, a1);
}

unint64_t sub_100063D4C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159050;
  if (!qword_100159050)
  {
    v1 = sub_100005430(&qword_100159058);
    sub_100007828(&qword_100159060, type metadata accessor for SettingsApplicationDebugRoot, (uint64_t)&unk_100116CB8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100159050);
  }
  return result;
}

unint64_t sub_100063DC8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159080;
  if (!qword_100159080)
  {
    v1 = sub_100005430(&qword_100159078);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100159080);
  }
  return result;
}

uint64_t sub_100063E24()
{
  return EnvironmentValues.dismiss.getter();
}

uint64_t sub_100063E44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  v6 = v0 + v4;
  switch(swift_getEnumCaseMultiPayload(v0 + v4, v1))
  {
    case 0u:
    case 1u:
      v7 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v0 + v4, v7);
      break;
    case 2u:
      v8 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
      v9 = sub_100004FC8(&qword_10015C420);
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + *(int *)(v9 + 48) + 8));
      break;
    case 3u:
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 40));
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 56));
      break;
    case 4u:
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 40));
      break;
    case 5u:
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 24));

      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 40));
      if (*(_QWORD *)(v6 + 72))
        sub_100005474((_QWORD *)(v6 + 48));
      break;
    default:
      return swift_deallocObject(v0, v4 + v5, v3 | 7);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100063FA0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PrimarySettingsListItemIdentifier(0) - 8) + 80);
  return sub_1000603B0(*(_QWORD *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t sub_100063FD0(void *a1, char a2)
{
  uint64_t v2;

  return sub_10005FE20(a1, a2 & 1, v2);
}

void sub_100063FDC(void *a1, char a2)
{
  if ((a2 & 1) != 0)
    swift_errorRelease();
  else

}

uint64_t sub_100063FE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  v6 = v0 + v4;
  switch(swift_getEnumCaseMultiPayload(v0 + v4, v1))
  {
    case 0u:
    case 1u:
      v7 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v0 + v4, v7);
      break;
    case 2u:
      v8 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
      v9 = sub_100004FC8(&qword_10015C420);
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + *(int *)(v9 + 48) + 8));
      break;
    case 3u:
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 40));
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 56));
      break;
    case 4u:
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 40));
      break;
    case 5u:
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 24));

      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 40));
      if (*(_QWORD *)(v6 + 72))
        sub_100005474((_QWORD *)(v6 + 48));
      break;
    default:
      return swift_deallocObject(v0, v4 + v5, v3 | 7);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10006414C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PrimarySettingsListItemIdentifier(0) - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc(dword_1001590B4);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_1000570A0;
  return sub_100060204(a1, v5, v6, v7, v8);
}

uint64_t sub_1000641E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10005F5C8(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_1000641E8()
{
  unint64_t result;

  result = qword_1001590D8;
  if (!qword_1001590D8)
  {
    result = swift_getWitnessTable(&unk_10011A0BC, &type metadata for AboutSupervisedDeviceRepresentable);
    atomic_store(result, &qword_1001590D8);
  }
  return result;
}

uint64_t sub_100064230()
{
  return sub_100064620(sub_1000624FC);
}

uint64_t sub_10006423C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = (int *)type metadata accessor for SettingsNavigationSplitView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  v6 = v0 + v4;
  swift_release(*(_QWORD *)(v0 + v4));
  swift_release(*(_QWORD *)(v0 + v4 + 8));
  v7 = (_QWORD *)(v0 + v4 + v1[6]);
  v8 = sub_100004FC8(&qword_100158D30);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for WithCurrentHostingControllerAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  swift_release(*(_QWORD *)(v6 + v1[7]));
  swift_release(*(_QWORD *)(v6 + v1[8]));
  v10 = v6 + v1[10];
  v11 = sub_100004FC8(&qword_100158D38);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10006434C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SettingsNavigationSplitView(0) - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = v1 + ((v4 + 32) & ~v4);
  v8 = (_QWORD *)swift_task_alloc(dword_1001590E4);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_1000526BC;
  return sub_100062640(a1, v5, v6, v7);
}

_QWORD *sub_1000643D4@<X0>(BOOL *a1@<X8>)
{
  uint64_t v1;

  return sub_100063900((uint64_t *)(v1 + 32), (unsigned __int8 *)(v1 + 49), a1);
}

uint64_t sub_1000643E8()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 50, 7);
}

uint64_t sub_10006441C(char *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100064430(*a1, a2, *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_BYTE *)(v2 + 48), *(_BYTE *)(v2 + 49));
}

uint64_t sub_100064430(char a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  uint64_t v9;
  char v10;
  char v12;
  _QWORD v13[5];
  char v14;

  v13[3] = a3;
  v13[4] = a4;
  v14 = a5;
  v9 = sub_100004FC8(&qword_100159088);
  Binding.transaction(_:)(v13, a2, v9);
  if ((a1 & 1) != 0)
    v10 = a6;
  else
    v10 = 7;
  v12 = v10;
  Binding.wrappedValue.setter(&v12, v9);
  swift_release(v13[0]);
  return swift_release(v13[1]);
}

uint64_t sub_1000644C8()
{
  uint64_t v0;

  return sub_10005F338(*(_QWORD *)(v0 + 16));
}

unint64_t sub_1000644D0()
{
  unint64_t result;

  result = qword_1001590F8;
  if (!qword_1001590F8)
  {
    result = swift_getWitnessTable(&unk_10011A924, &type metadata for AboutSecurityResearchDeviceRepresentable);
    atomic_store(result, (unint64_t *)&qword_1001590F8);
  }
  return result;
}

uint64_t sub_100064518()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = (int *)type metadata accessor for SettingsNavigationSplitView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  swift_release(*(_QWORD *)(v0 + v4));
  swift_release(*(_QWORD *)(v0 + v4 + 8));
  v7 = (_QWORD *)(v0 + v4 + v1[6]);
  v8 = sub_100004FC8(&qword_100158D30);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for WithCurrentHostingControllerAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  swift_release(*(_QWORD *)(v6 + v1[7]));
  swift_release(*(_QWORD *)(v6 + v1[8]));
  v10 = v6 + v1[10];
  v11 = sub_100004FC8(&qword_100158D38);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100064620(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SettingsNavigationSplitView(0) - 8) + 80);
  return a1(v1 + ((v2 + 16) & ~v2));
}

void sub_10006465C(void *a1)
{
  sub_10005F1D8(a1);
}

uint64_t sub_100064664()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = type metadata accessor for PPTTestCase(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (int *)type metadata accessor for SettingsNavigationSplitView(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v10 = *(_QWORD *)(v7 + 64);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  v11 = v0 + v9;
  swift_release(*(_QWORD *)(v0 + v9));
  swift_release(*(_QWORD *)(v0 + v9 + 8));
  v12 = (_QWORD *)(v0 + v9 + v6[6]);
  v13 = sub_100004FC8(&qword_100158D30);
  if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
  {
    v14 = type metadata accessor for WithCurrentHostingControllerAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v12, v14);
  }
  else
  {
    swift_release(*v12);
  }
  swift_release(*(_QWORD *)(v11 + v6[7]));
  swift_release(*(_QWORD *)(v11 + v6[8]));
  v15 = v11 + v6[10];
  v16 = sub_100004FC8(&qword_100158D38);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  return swift_deallocObject(v0, v9 + v10, v3 | v8 | 7);
}

void sub_1000647AC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(type metadata accessor for PPTTestCase(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SettingsNavigationSplitView(0) - 8) + 80);
  sub_100060D80(v0 + v2, (uint8_t *)(v0 + ((v2 + v3 + v4) & ~v4)));
}

uint64_t sub_100064814()
{
  uint64_t v0;

  return sub_10004B67C(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_100064838()
{
  uint64_t v0;

  return sub_1000DEC00(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_100064854(void *a1)
{
  uint64_t v1;

  return sub_10005E728(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100064864()
{
  uint64_t v0;

  return sub_1000E224C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100064884()
{
  uint64_t v0;

  return sub_1000DF4D4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10006489C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000617A4(a1);
}

unint64_t sub_1000648A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159158;
  if (!qword_100159158)
  {
    v1 = sub_100005430(&qword_100159160);
    sub_100064910();
    sub_100064994();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100159158);
  }
  return result;
}

unint64_t sub_100064910()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159168;
  if (!qword_100159168)
  {
    v1 = sub_100005430(&qword_100159170);
    sub_100007828(&qword_100159038, (uint64_t (*)(uint64_t))&type metadata accessor for SettingsAnyPlatformViewControllerView, (uint64_t)&protocol conformance descriptor for SettingsAnyPlatformViewControllerView);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100159168);
  }
  return result;
}

unint64_t sub_100064994()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159178;
  if (!qword_100159178)
  {
    v1 = sub_100005430(&qword_100159180);
    sub_100007828(&qword_100159128, (uint64_t (*)(uint64_t))&type metadata accessor for PreferencesControllerView, (uint64_t)&protocol conformance descriptor for PreferencesControllerView);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100159178);
  }
  return result;
}

uint64_t sub_100064A20@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isSearching.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100064A4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004FC8(&qword_100158F18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100064A94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t OpaqueTypeConformance2;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;

  v32 = sub_100005430(&qword_100158EE0);
  v30 = sub_100005430(&qword_100159068);
  v31 = sub_100005430(&qword_100159078);
  v29 = sub_100005430(&qword_100158ED8);
  v28 = sub_100005430(&qword_100158ED0);
  v27 = sub_100005430(&qword_100159040);
  v26 = sub_100005430(&qword_100158EC8);
  v0 = sub_100005430(&qword_100159018);
  v1 = sub_100005430(&qword_100158EC0);
  v2 = sub_100005430(&qword_100158FF0);
  v3 = sub_100005430(&qword_100158EB8);
  v4 = sub_100005430(&qword_100158FD0);
  v5 = sub_100005430(&qword_100158EB0);
  v6 = sub_100005430(&qword_100158FB0);
  v7 = sub_100005430(&qword_100158EA8);
  v8 = sub_100005430(&qword_100158EA0);
  v33 = sub_100005430(&qword_100158E98);
  v34 = sub_100062DD4();
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v33, &opaque type descriptor for <<opaque return type of View.navigationPresentationAdaptor(_:)>>, 1);
  v33 = v8;
  v34 = OpaqueTypeConformance2;
  v10 = swift_getOpaqueTypeConformance2(&v33, &opaque type descriptor for <<opaque return type of View.navigationTransitionEagerRenderEnabled(_:)>>, 1);
  v33 = v7;
  v34 = v10;
  v11 = swift_getOpaqueTypeConformance2(&v33, &opaque type descriptor for <<opaque return type of View.settingsAppPrimaryNavigationMode(_:)>>, 1);
  v12 = sub_10006397C();
  v33 = v5;
  v34 = v6;
  v35 = v11;
  v36 = v12;
  v13 = swift_getOpaqueTypeConformance2(&v33, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 1);
  v14 = sub_100063A8C();
  v33 = v3;
  v34 = v4;
  v35 = v13;
  v36 = v14;
  v15 = swift_getOpaqueTypeConformance2(&v33, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 1);
  v16 = sub_100063B20(&qword_100158FF8, &qword_100158FF0, (void (*)(void))sub_100063B84, (uint64_t)&protocol conformance descriptor for <A> A?);
  v33 = v1;
  v34 = v2;
  v35 = v15;
  v36 = v16;
  v17 = swift_getOpaqueTypeConformance2(&v33, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 1);
  v18 = sub_100063B20(&qword_100159020, &qword_100159018, (void (*)(void))sub_100063C54, (uint64_t)&protocol conformance descriptor for <A> A?);
  v33 = v26;
  v34 = v0;
  v35 = v17;
  v36 = v18;
  v19 = swift_getOpaqueTypeConformance2(&v33, &opaque type descriptor for <<opaque return type of View.fullScreenCover<A>(isPresented:onDismiss:content:)>>, 1);
  v20 = sub_100063B20(&qword_100159048, &qword_100159040, (void (*)(void))sub_100063D4C, (uint64_t)&protocol conformance descriptor for <A> A?);
  v33 = v28;
  v34 = v27;
  v35 = v19;
  v36 = v20;
  v21 = swift_getOpaqueTypeConformance2(&v33, &opaque type descriptor for <<opaque return type of View.formSheet<A>(isPresented:content:)>>, 1);
  v22 = sub_100007868(&qword_100159070, &qword_100159068, (uint64_t)&protocol conformance descriptor for Button<A>);
  v33 = v29;
  v34 = v30;
  v35 = v21;
  v36 = v22;
  v23 = swift_getOpaqueTypeConformance2(&v33, &opaque type descriptor for <<opaque return type of View.alert<A>(_:isPresented:actions:)>>, 1);
  v24 = sub_100063DC8();
  v33 = v32;
  v34 = v30;
  v35 = v31;
  v36 = v23;
  v37 = v22;
  v38 = v24;
  return swift_getOpaqueTypeConformance2(&v33, &opaque type descriptor for <<opaque return type of View.alert<A, B>(_:isPresented:actions:message:)>>, 1);
}

uint64_t sub_100064DBC()
{
  return sub_100064814();
}

uint64_t sub_100064DD0()
{
  return sub_100064864();
}

uint64_t destroy for FirstAppearanceModifier(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + 8));
  return swift_release(*(_QWORD *)(a1 + 24));
}

uint64_t initializeWithCopy for FirstAppearanceModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t assignWithCopy for FirstAppearanceModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_retain(v4);
  swift_release(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  swift_retain(v7);
  swift_release(v6);
  return a1;
}

__n128 initializeWithTake for FirstAppearanceModifier(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t assignWithTake for FirstAppearanceModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for FirstAppearanceModifier(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FirstAppearanceModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FirstAppearanceModifier()
{
  return &type metadata for FirstAppearanceModifier;
}

uint64_t sub_100064FA4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10012A6DC, 1);
}

_QWORD *sub_100064FB4(uint64_t (*a1)(uint64_t))
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;

  v2 = sub_100004FC8(&qword_1001591D8);
  result = State.wrappedValue.getter(&v5);
  if ((v5 & 1) == 0)
  {
    LOBYTE(v5) = 1;
    v4 = State.wrappedValue.setter(&v5, v2);
    return (_QWORD *)a1(v4);
  }
  return result;
}

uint64_t sub_100065054()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

uint64_t sub_10006506C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v6 = *v2;
  v5 = v2[1];
  v7 = *((_BYTE *)v2 + 16);
  v8 = v2[3];
  v9 = swift_allocObject(&unk_10014A5C0, 48, 7);
  *(_QWORD *)(v9 + 16) = v6;
  *(_QWORD *)(v9 + 24) = v5;
  *(_BYTE *)(v9 + 32) = v7;
  *(_QWORD *)(v9 + 40) = v8;
  v10 = sub_100004FC8(&qword_1001591C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a2, a1, v10);
  v11 = (_QWORD *)(a2 + *(int *)(sub_100004FC8(&qword_1001591D0) + 36));
  *v11 = sub_100065154;
  v11[1] = v9;
  v11[2] = 0;
  v11[3] = 0;
  swift_retain(v8);
  return swift_retain(v5);
}

uint64_t sub_100065128()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

_QWORD *sub_100065154()
{
  uint64_t v0;

  return sub_100064FB4(*(uint64_t (**)(uint64_t))(v0 + 16));
}

unint64_t sub_100065168()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001591E0;
  if (!qword_1001591E0)
  {
    v1 = sub_100005430(&qword_1001591D0);
    sub_1000651D4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001591E0);
  }
  return result;
}

unint64_t sub_1000651D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001591E8;
  if (!qword_1001591E8)
  {
    v1 = sub_100005430(&qword_1001591C8);
    result = swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001591E8);
  }
  return result;
}

uint64_t *sub_100065220(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_100004FC8(&qword_100157780);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v9 = type metadata accessor for DismissAction(0, v8);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      v10 = a1;
      v11 = v7;
      v12 = 1;
    }
    else
    {
      v14 = *a2;
      *a1 = *a2;
      swift_retain(v14);
      v10 = a1;
      v11 = v7;
      v12 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v11, v12);
    v15 = *(int *)(a3 + 20);
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    v13 = *(_QWORD *)v17;
    LOBYTE(v17) = v17[8];
    *(_QWORD *)v16 = v13;
    v16[8] = (char)v17;
  }
  swift_retain(v13);
  return a1;
}

uint64_t sub_100065308(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_100004FC8(&qword_100157780);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v6 = type metadata accessor for DismissAction(0, v5);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  }
  else
  {
    swift_release(*a1);
  }
  return swift_release(*(_QWORD *)((char *)a1 + *(int *)(a2 + 20)));
}

uint64_t *sub_100065378(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v6 = sub_100004FC8(&qword_100157780);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v8 = type metadata accessor for DismissAction(0, v7);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    v9 = a1;
    v10 = v6;
    v11 = 1;
  }
  else
  {
    v12 = *a2;
    *a1 = *a2;
    swift_retain(v12);
    v9 = a1;
    v10 = v6;
    v11 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v10, v11);
  v13 = *(int *)(a3 + 20);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = *(_QWORD *)v15;
  LOBYTE(v15) = v15[8];
  *(_QWORD *)v14 = v16;
  v14[8] = (char)v15;
  swift_retain(v16);
  return a1;
}

uint64_t *sub_100065438(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 != a2)
  {
    sub_10000BA50((uint64_t)a1, &qword_100157780);
    v6 = sub_100004FC8(&qword_100157780);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v8 = type metadata accessor for DismissAction(0, v7);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v6;
      v11 = 1;
    }
    else
    {
      v12 = *a2;
      *a1 = *a2;
      swift_retain(v12);
      v9 = a1;
      v10 = v6;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
  }
  v13 = *(int *)(a3 + 20);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = *(_QWORD *)v15;
  LOBYTE(v15) = v15[8];
  v17 = *(_QWORD *)v14;
  *(_QWORD *)v14 = v16;
  v14[8] = (char)v15;
  swift_retain(v16);
  swift_release(v17);
  return a1;
}

char *sub_10006551C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;

  v6 = sub_100004FC8(&qword_100157780);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v8 = type metadata accessor for DismissAction(0, v7);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v9 = *(int *)(a3 + 20);
  v10 = &a1[v9];
  v11 = &a2[v9];
  *(_QWORD *)v10 = *(_QWORD *)v11;
  v10[8] = v11[8];
  return a1;
}

char *sub_1000655D4(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  if (a1 != a2)
  {
    sub_10000BA50((uint64_t)a1, &qword_100157780);
    v6 = sub_100004FC8(&qword_100157780);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v8 = type metadata accessor for DismissAction(0, v7);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v9 = *(int *)(a3 + 20);
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = *(_QWORD *)v11;
  LOBYTE(v11) = v11[8];
  v13 = *(_QWORD *)v10;
  *(_QWORD *)v10 = v12;
  v10[8] = (char)v11;
  swift_release(v13);
  return a1;
}

uint64_t sub_1000656AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000656B8);
}

uint64_t sub_1000656B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = sub_100004FC8(&qword_100157788);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 > 1)
    return (v9 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t sub_100065738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100065744);
}

uint64_t sub_100065744(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100004FC8(&qword_100157788);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20) + 8) = -(char)a2;
  return result;
}

uint64_t type metadata accessor for SettingsApplicationDebugRoot(uint64_t a1)
{
  uint64_t result;

  result = qword_100159248;
  if (!qword_100159248)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SettingsApplicationDebugRoot);
  return result;
}

void sub_100065800(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD v5[2];

  sub_100016E24(319, a2);
  if (v4 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(v3 - 8) + 64;
    v5[1] = "\t";
    swift_initStructMetadata(a1, 256, 2, v5, a1 + 16);
  }
}

uint64_t sub_100065870(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10012A72C, 1);
}

void sub_100065880(double *a1@<X8>)
{
  *a1 = EnvironmentValues.displayScale.getter();
}

uint64_t sub_1000658A8(double *a1)
{
  return EnvironmentValues.displayScale.setter(*a1);
}

uint64_t sub_1000658CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t OpaqueTypeConformance2;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[16];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v34 = a1;
  v2 = sub_100004FC8(&qword_100159280);
  v33 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100004FC8(&qword_100159288);
  v31 = *(_QWORD *)(v5 - 8);
  v32 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = v1;
  v8 = sub_100004FC8(&qword_100159290);
  v9 = sub_100005430(&qword_100159298);
  v10 = sub_100005430(&qword_1001592A0);
  v11 = sub_100005430(&qword_1001592A8);
  v12 = sub_100005430(&qword_1001592B0);
  v13 = sub_100007868(&qword_1001592B8, &qword_1001592B0, (uint64_t)&protocol conformance descriptor for List<A, B>);
  v37 = v12;
  v38 = v13;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v37, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v15 = sub_100007868(&qword_1001592C0, &qword_1001592A8, (uint64_t)&protocol conformance descriptor for TupleToolbarContent<A>);
  v37 = v10;
  v38 = v11;
  v39 = OpaqueTypeConformance2;
  v40 = v15;
  v16 = swift_getOpaqueTypeConformance2(&v37, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
  v37 = v9;
  v38 = v16;
  v17 = swift_getOpaqueTypeConformance2(&v37, &opaque type descriptor for <<opaque return type of View.settingsListAppearance()>>, 1);
  NavigationStack.init<>(root:)(sub_100067A5C, v35, v8, v17);
  v18 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v19 = objc_msgSend(v18, "userInterfaceIdiom");

  if (v19)
  {
    v20 = &_swiftEmptySetSingleton;
  }
  else
  {
    v21 = sub_100004FC8(&qword_1001592D0);
    v22 = type metadata accessor for PresentationDetent(0);
    v23 = *(_QWORD *)(v22 - 8);
    v24 = *(_QWORD *)(v23 + 72);
    v25 = *(unsigned __int8 *)(v23 + 80);
    v26 = (v25 + 32) & ~v25;
    v27 = swift_allocObject(v21, v26 + 2 * v24, v25 | 7);
    *(_OWORD *)(v27 + 16) = xmmword_100115BA0;
    v28 = static PresentationDetent.medium.getter();
    static PresentationDetent.large.getter(v28);
    v20 = sub_10005662C(v27);
    swift_setDeallocating(v27);
    swift_arrayDestroy(v27 + v26, 2, v22);
    swift_deallocClassInstance(v27, 32, 7);
  }
  v29 = sub_100007868(&qword_1001592C8, &qword_100159280, (uint64_t)&protocol conformance descriptor for NavigationStack<A, B>);
  View.presentationDetents(_:)(v20, v2, v29);
  swift_bridgeObjectRelease(v20);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v4, v2);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v31 + 32))(v34, v7, v32);
}

uint64_t sub_100065BC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t OpaqueTypeConformance2;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32[16];
  uint64_t v33;
  char v34[16];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v26 = a1;
  v31 = a2;
  v3 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004FC8(&qword_1001592B0);
  v27 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100004FC8(&qword_1001592A0);
  v28 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100004FC8(&qword_100159298);
  v14 = *(_QWORD *)(v13 - 8);
  v29 = v13;
  v30 = v14;
  __chkstk_darwin(v13);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = a1;
  v17 = sub_100004FC8(&qword_1001592D8);
  v18 = sub_100007868(&qword_1001592E0, &qword_1001592D8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  List<>.init(content:)(sub_100067A64, v34, v17, v18);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v3);
  v19 = sub_100007868(&qword_1001592B8, &qword_1001592B0, (uint64_t)&protocol conformance descriptor for List<A, B>);
  View.navigationBarTitleDisplayMode(_:)(v6, v7, v19);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v9, v7);
  v33 = v26;
  v20 = sub_100004FC8(&qword_1001592A8);
  v36 = v7;
  v37 = v19;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v36, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v22 = sub_100007868(&qword_1001592C0, &qword_1001592A8, (uint64_t)&protocol conformance descriptor for TupleToolbarContent<A>);
  View.toolbar<A>(content:)(sub_100067A6C, v32, v10, v20, OpaqueTypeConformance2, v22);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v12, v10);
  v36 = v10;
  v37 = v20;
  v38 = OpaqueTypeConformance2;
  v39 = v22;
  v23 = swift_getOpaqueTypeConformance2(&v36, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
  v24 = v29;
  View.settingsListAppearance()(v29, v23);
  return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v16, v24);
}

uint64_t sub_100065EA0@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t KeyPath;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  void (*v58)(char *, char *, uint64_t);
  char *v59;
  void (*v60)(char *, char *, uint64_t);
  void (*v61)(char *, char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  void (*v64)(char *, char *, uint64_t);
  uint64_t v65;
  char *v66;
  int *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  void (*v72)(char *, uint64_t);
  void (*v73)(char *, uint64_t);
  void (*v74)(char *, uint64_t);
  void (*v75)(char *, uint64_t);
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  __int128 v100;
  char v101;
  _QWORD *v102;
  _BYTE v103[32];

  v82 = a2;
  v84 = sub_100004FC8(&qword_100159328);
  v81 = *(_QWORD *)(v84 - 8);
  v3 = __chkstk_darwin(v84);
  v97 = (char *)&v78 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v94 = (char *)&v78 - v5;
  v83 = sub_100004FC8(&qword_100159330);
  v93 = *(_QWORD *)(v83 - 8);
  v6 = __chkstk_darwin(v83);
  v96 = (char *)&v78 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v92 = (char *)&v78 - v8;
  v95 = sub_100004FC8(&qword_100159338);
  v91 = *(_QWORD *)(v95 - 8);
  v9 = __chkstk_darwin(v95);
  v99 = (char *)&v78 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v90 = (char *)&v78 - v11;
  v80 = type metadata accessor for NavigationPath(0);
  v12 = *(_QWORD *)(v80 - 8);
  __chkstk_darwin(v80);
  v14 = (char *)&v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100004FC8(&qword_100159340);
  v16 = __chkstk_darwin(v15);
  v98 = (uint64_t)&v78 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v85 = (uint64_t)&v78 - v18;
  v19 = type metadata accessor for SettingsApplicationDebugRoot(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(_QWORD *)(v20 + 64);
  __chkstk_darwin(v19);
  v22 = (char *)&v78 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = sub_100004FC8(&qword_100159068);
  v87 = *(_QWORD *)(v89 - 8);
  v23 = __chkstk_darwin(v89);
  v88 = (char *)&v78 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v26 = (char *)&v78 - v25;
  sub_100067A7C(a1, (uint64_t)v22);
  v27 = *(unsigned __int8 *)(v20 + 80);
  v28 = (v27 + 16) & ~v27;
  v29 = v28 + v21;
  v30 = v27 | 7;
  v79 = v29;
  v31 = swift_allocObject(&unk_10014A650, v29, v27 | 7);
  sub_100067AC4((uint64_t)v22, v31 + v28);
  v86 = v26;
  v32 = a1;
  Button.init(action:label:)(sub_100067B64, v31, sub_1000666A8, 0, &type metadata for Text, &protocol witness table for Text);
  v33 = a1 + *(int *)(v19 + 20);
  v34 = *(_QWORD *)v33;
  LOBYTE(v31) = *(_BYTE *)(v33 + 8);
  v35 = swift_retain(*(_QWORD *)v33);
  v36 = sub_100063680(v35, v31);
  swift_release(v34);
  v37 = *(_QWORD *)(v36 + 32);
  swift_retain(v37);
  swift_release(v36);
  KeyPath = swift_getKeyPath(&unk_100116D38);
  *(_QWORD *)&v100 = v37;
  v39 = sub_100067B78();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v100, KeyPath, v39);
  swift_release(KeyPath);
  v40 = v37 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__navigationPath;
  swift_beginAccess(v37 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__navigationPath, v103, 0, 0);
  v41 = v80;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v40, v80);
  v42 = swift_release(v37);
  LOBYTE(v40) = NavigationPath.isEmpty.getter(v42);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v41);
  if ((v40 & 1) != 0)
  {
    v43 = 1;
    v44 = v85;
  }
  else
  {
    sub_100067A7C(v32, (uint64_t)v22);
    v45 = swift_allocObject(&unk_10014A678, v79, v30);
    v46 = sub_100067AC4((uint64_t)v22, v45 + v28);
    __chkstk_darwin(v46);
    *(&v78 - 2) = v32;
    v44 = v85;
    Button.init(action:label:)(sub_100067C78, v45, sub_100067CC0, &v78 - 4, &type metadata for Text, &protocol witness table for Text);
    v43 = 0;
  }
  v47 = v87;
  v48 = v89;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v87 + 56))(v44, v43, 1, v89);
  v49 = sub_100004FC8(&qword_100159348);
  v50 = sub_100007868(&qword_100159350, &qword_100159348, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v51 = v90;
  Section<>.init(content:)(sub_100066A08, 0, v49, v50);
  v100 = xmmword_100116C00;
  v101 = 0;
  v102 = _swiftEmptyArrayStorage;
  v52 = sub_100004FC8(&qword_100159358);
  v53 = sub_100007868(&qword_100159360, &qword_100159358, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v54 = v92;
  Section<>.init(header:content:)(&v100, sub_100066DEC, 0, &type metadata for Text, v52, &protocol witness table for Text, v53);
  v100 = xmmword_100116C10;
  v101 = 0;
  v102 = _swiftEmptyArrayStorage;
  v55 = sub_100004FC8(&qword_100159368);
  v56 = sub_100067CC8();
  v57 = v94;
  Section<>.init(header:content:)(&v100, sub_100067180, 0, &type metadata for Text, v55, &protocol witness table for Text, v56);
  v58 = *(void (**)(char *, char *, uint64_t))(v47 + 16);
  v59 = v88;
  v58(v88, v86, v48);
  sub_100067D98(v44, v98);
  v60 = *(void (**)(char *, char *, uint64_t))(v91 + 16);
  v60(v99, v51, v95);
  v61 = *(void (**)(char *, char *, uint64_t))(v93 + 16);
  v62 = v83;
  v61(v96, v54, v83);
  v63 = v81;
  v64 = *(void (**)(char *, char *, uint64_t))(v81 + 16);
  v65 = v84;
  v64(v97, v57, v84);
  v66 = v82;
  v58(v82, v59, v48);
  v67 = (int *)sub_100004FC8(&qword_100159388);
  sub_100067D98(v98, (uint64_t)&v66[v67[12]]);
  v68 = v95;
  v60(&v66[v67[16]], v99, v95);
  v69 = v96;
  v61(&v66[v67[20]], v96, v62);
  v70 = &v66[v67[24]];
  v71 = v97;
  v64(v70, v97, v65);
  v72 = *(void (**)(char *, uint64_t))(v63 + 8);
  v72(v94, v65);
  v73 = *(void (**)(char *, uint64_t))(v93 + 8);
  v73(v92, v62);
  v74 = *(void (**)(char *, uint64_t))(v91 + 8);
  v74(v90, v68);
  sub_10000BA50(v85, &qword_100159340);
  v75 = *(void (**)(char *, uint64_t))(v87 + 8);
  v76 = v89;
  v75(v86, v89);
  v72(v71, v65);
  v73(v69, v62);
  v74(v99, v68);
  sub_10000BA50(v98, &qword_100159340);
  return ((uint64_t (*)(char *, uint64_t))v75)(v88, v76);
}

uint64_t sub_100066638(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = (uint64_t *)(a1 + *(int *)(type metadata accessor for SettingsApplicationDebugRoot(0) + 20));
  v2 = *v1;
  v3 = *((_BYTE *)v1 + 8);
  v4 = swift_retain(*v1);
  v5 = sub_100063680(v4, v3);
  swift_release(v2);
  v6 = *(_QWORD *)(v5 + 32);
  swift_retain(v6);
  swift_release(v5);
  sub_1000DB8BC();
  return swift_release(v6);
}

void sub_1000666A8(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0xD00000000000001BLL;
  *(_QWORD *)(a1 + 8) = 0x8000000100122BC0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = &_swiftEmptyArrayStorage;
}

uint64_t sub_1000666D8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];

  v1 = (uint64_t *)(a1 + *(int *)(type metadata accessor for SettingsApplicationDebugRoot(0) + 20));
  v2 = *v1;
  v3 = *((_BYTE *)v1 + 8);
  v4 = swift_retain(*v1);
  v5 = sub_100063680(v4, v3);
  swift_release(v2);
  v6 = *(_QWORD *)(v5 + 32);
  swift_retain(v6);
  swift_release(v5);
  KeyPath = swift_getKeyPath(&unk_100116D38);
  v12[0] = v6;
  v8 = sub_100067B78();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v12, KeyPath, v8);
  swift_release(KeyPath);
  v12[0] = v6;
  v9 = swift_getKeyPath(&unk_100116D38);
  ObservationRegistrar.willSet<A, B>(_:keyPath:)(v12, v9, v8);
  swift_release(v9);
  swift_beginAccess(v6 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__navigationPath, v12, 33, 0);
  NavigationPath.removeLast(_:)(1);
  swift_endAccess(v12);
  v12[0] = v6;
  v10 = swift_getKeyPath(&unk_100116D38);
  ObservationRegistrar.didSet<A, B>(_:keyPath:)(v12, v10, v8);
  swift_release(v6);
  return swift_release(v10);
}

void sub_100066828(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t KeyPath;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  Swift::String v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;

  v4 = type metadata accessor for NavigationPath(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = 0;
  v25 = 0xE000000000000000;
  _StringGuts.grow(_:)(16);
  v26 = v24;
  v27 = v25;
  v8 = (uint64_t *)(a1 + *(int *)(type metadata accessor for SettingsApplicationDebugRoot(0) + 20));
  v9 = *v8;
  LOBYTE(a1) = *((_BYTE *)v8 + 8);
  v10 = swift_retain(*v8);
  v11 = sub_100063680(v10, a1);
  swift_release(v9);
  v12 = *(_QWORD *)(v11 + 32);
  swift_retain(v12);
  swift_release(v11);
  KeyPath = swift_getKeyPath(&unk_100116D38);
  v24 = v12;
  v14 = sub_100067B78();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v24, KeyPath, v14);
  swift_release(KeyPath);
  v15 = v12 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__navigationPath;
  swift_beginAccess(v12 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__navigationPath, &v24, 0, 0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v15, v4);
  v16 = swift_release(v12);
  v17 = NavigationPath.count.getter(v16);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v23 = v17;
  v18 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v20 = v19;
  swift_bridgeObjectRelease(v27);
  v26 = v18;
  v27 = v20;
  v21._countAndFlagsBits = 0x6F20736D65746920;
  v21._object = (void *)0xEE0068746170206ELL;
  String.append(_:)(v21);
  v22 = v27;
  *(_QWORD *)a2 = v26;
  *(_QWORD *)(a2 + 8) = v22;
  *(_BYTE *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = _swiftEmptyArrayStorage;
}

uint64_t sub_100066A08@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  char *v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  void (*v37)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v42 = a1;
  v1 = sub_100004FC8(&qword_1001593A8);
  v2 = *(_QWORD *)(v1 - 8);
  v40 = v1;
  v41 = v2;
  v3 = __chkstk_darwin(v1);
  v43 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v6 = (char *)&v39 - v5;
  v7 = sub_100004FC8(&qword_1001593B0);
  v44 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v39 - v11;
  v13 = AppStorage.init<A>(wrappedValue:_:store:)(0, 0xD00000000000001FLL, 0x8000000100122AB0, 0);
  v14 = AppStorage.init<A>(wrappedValue:_:store:)(0, 0xD000000000000020, 0x8000000100122AD0, 0);
  v15 = AppStorage.init<A>(wrappedValue:_:store:)(0, 0xD00000000000001FLL, 0x8000000100122B00, 0);
  v16 = AppStorage.init<A>(wrappedValue:_:store:)(0, 0xD00000000000001ELL, 0x8000000100122B20, 0);
  v45 = v13;
  v46 = v14;
  v47 = v15;
  v48 = v16;
  v17 = sub_100067E00();
  v18 = v12;
  NavigationLink.init(destination:label:)(&v45, sub_100066DAC, 0, &type metadata for Text, &type metadata for SettingsSearchDebug, &protocol witness table for Text, v17);
  if (qword_100156CF0 != -1)
    swift_once(&qword_100156CF0, sub_1000A90C8);
  v19 = qword_10015D390;
  v20 = (id)qword_10015D390;
  v21 = AppStorage.init<A>(wrappedValue:_:store:)(0, 0xD000000000000014, 0x8000000100122B40, v19);
  v22 = v20;
  v23 = AppStorage.init<A>(wrappedValue:_:store:)(0, 0xD00000000000001ALL, 0x8000000100122B60, v19);
  v24 = v22;
  v25 = AppStorage.init<A>(wrappedValue:_:store:)(0, 0xD000000000000015, 0x8000000100122B80, v19);
  v26 = v24;
  v27 = AppStorage.init<A>(wrappedValue:_:store:)(0, 0xD000000000000019, 0x8000000100122BA0, v19);
  v45 = v21;
  v46 = v23;
  v47 = v25;
  v48 = v27;
  v28 = sub_100067E44();
  NavigationLink.init(destination:label:)(&v45, sub_100066DCC, 0, &type metadata for Text, &type metadata for DebugSettingsList, &protocol witness table for Text, v28);
  v29 = *(void (**)(char *, char *, uint64_t))(v44 + 16);
  v29(v10, v18, v7);
  v30 = v40;
  v31 = v41;
  v32 = *(void (**)(char *, char *, uint64_t))(v41 + 16);
  v33 = v43;
  v32(v43, v6, v40);
  v34 = v42;
  v29(v42, v10, v7);
  v35 = sub_100004FC8(&qword_1001593C8);
  v32(&v34[*(int *)(v35 + 48)], v33, v30);
  v36 = *(void (**)(char *, uint64_t))(v31 + 8);
  v36(v6, v30);
  v37 = *(void (**)(char *, uint64_t))(v44 + 8);
  v37(v18, v7);
  v36(v33, v30);
  return ((uint64_t (*)(char *, uint64_t))v37)(v10, v7);
}

double sub_100066DAC@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 0x686372616553;
  *(_OWORD *)a1 = xmmword_100116C20;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = &_swiftEmptyArrayStorage;
  return result;
}

double sub_100066DCC@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 1.24009431e180;
  *(_OWORD *)a1 = xmmword_100116C30;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = &_swiftEmptyArrayStorage;
  return result;
}

uint64_t sub_100066DEC@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  char *v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  void (*v22)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;

  v27 = a1;
  v1 = sub_100004FC8(&qword_100159398);
  v26 = *(_QWORD *)(v1 - 8);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v24 - v5;
  v7 = sub_100004FC8(&qword_100159380);
  v25 = *(_QWORD *)(v7 - 8);
  v8 = v25;
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v24 - v12;
  v14 = sub_100004FC8(&qword_100159078);
  v15 = sub_100063DC8();
  LabeledContent<>.init(content:label:)(sub_10006700C, 0, sub_100067110, 0, &type metadata for Text, v14, &protocol witness table for Text, v15);
  LabeledContent<>.init(content:label:)(sub_100067130, 0, sub_100067150, 0, &type metadata for Text, &type metadata for Text, &protocol witness table for Text, &protocol witness table for Text);
  v16 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  v16(v11, v13, v7);
  v17 = v26;
  v18 = *(void (**)(char *, char *, uint64_t))(v26 + 16);
  v18(v4, v6, v1);
  v19 = v27;
  v16(v27, v11, v7);
  v20 = sub_100004FC8(&qword_1001593A0);
  v18(&v19[*(int *)(v20 + 48)], v4, v1);
  v21 = *(void (**)(char *, uint64_t))(v17 + 8);
  v21(v6, v1);
  v22 = *(void (**)(char *, uint64_t))(v25 + 8);
  v22(v13, v7);
  v21(v4, v1);
  return ((uint64_t (*)(char *, uint64_t))v22)(v11, v7);
}

void sub_10006700C(uint64_t *a1@<X8>)
{
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v2 = (void *)objc_opt_self(NSBundle);
  v3 = objc_msgSend(v2, "mainBundle");
  v4 = sub_100109470();
  v6 = v5;

  if (!v6)
    goto LABEL_5;
  v7 = objc_msgSend(v2, "mainBundle");
  v8 = sub_100109494();
  v10 = v9;

  if (!v10)
  {
    swift_bridgeObjectRelease(v6);
LABEL_5:
    v14 = 0;
    v15 = 0;
    v16 = 0;
    goto LABEL_6;
  }
  v11._countAndFlagsBits = 10272;
  v11._object = (void *)0xE200000000000000;
  String.append(_:)(v11);
  v12._countAndFlagsBits = v8;
  v12._object = v10;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(v10);
  v13._countAndFlagsBits = 41;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  v14 = v4;
  v15 = v6;
  v16 = _swiftEmptyArrayStorage;
LABEL_6:
  *a1 = v14;
  a1[1] = v15;
  a1[2] = 0;
  a1[3] = (uint64_t)v16;
}

double sub_100067110@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 1.35441148e-306;
  *(_OWORD *)a1 = xmmword_100116C40;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = &_swiftEmptyArrayStorage;
  return result;
}

double sub_100067130@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 28494;
  *(_OWORD *)a1 = xmmword_100116C50;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = &_swiftEmptyArrayStorage;
  return result;
}

void sub_100067150(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0xD000000000000013;
  *(_QWORD *)(a1 + 8) = 0x8000000100122A90;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = &_swiftEmptyArrayStorage;
}

uint64_t sub_100067180()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;

  if (qword_100156DE8 != -1)
    swift_once(&qword_100156DE8, sub_100109A30);
  v0 = qword_10015D4B8;
  v7 = qword_10015D4B8;
  KeyPath = swift_getKeyPath(&unk_100116D70);
  swift_bridgeObjectRetain(v0);
  v2 = sub_100004FC8(&qword_10015CB20);
  v3 = sub_100004FC8(&qword_100159380);
  v4 = sub_100007868(&qword_100159390, &qword_10015CB20, (uint64_t)&protocol conformance descriptor for [A]);
  v5 = sub_100067D2C();
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t (*)(uint64_t *), _QWORD, uint64_t, uint64_t, uint64_t, void *, unint64_t))ForEach<>.init(_:id:content:))(&v7, KeyPath, sub_1000672CC, 0, v2, v3, v4, &protocol witness table for String, v5);
}

void sub_100067278(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = objc_msgSend(*a1, "bundlePath");
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  *a2 = v4;
  a2[1] = v6;
}

uint64_t sub_1000672CC(uint64_t *a1)
{
  uint64_t v1;
  unint64_t v2;
  _QWORD v4[4];
  _BYTE v5[16];
  uint64_t v6;

  v6 = *a1;
  v4[2] = v6;
  v1 = sub_100004FC8(&qword_100159078);
  v2 = sub_100063DC8();
  return LabeledContent<>.init(content:label:)(sub_100067DF0, v5, sub_100067DF8, v4, &type metadata for Text, v1, &protocol witness table for Text, v2);
}

void sub_100067348(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v2 = sub_100109470();
  if (!v3)
    goto LABEL_5;
  v4 = v2;
  v5 = v3;
  v6 = sub_100109494();
  if (!v7)
  {
    swift_bridgeObjectRelease(v5);
LABEL_5:
    v13 = 0;
    v14 = 0;
    v15 = 0;
    goto LABEL_6;
  }
  v8 = v6;
  v9 = v7;
  v10._countAndFlagsBits = 10272;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  v11._countAndFlagsBits = v8;
  v11._object = v9;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v9);
  v12._countAndFlagsBits = 41;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  v13 = v4;
  v14 = v5;
  v15 = _swiftEmptyArrayStorage;
LABEL_6:
  *a1 = v13;
  a1[1] = v14;
  a1[2] = 0;
  a1[3] = (uint64_t)v15;
}

uint64_t sub_100067408@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;
  _QWORD v8[2];

  v8[0] = sub_1001095C4();
  v8[1] = v2;
  v3 = sub_100008A5C();
  result = Text.init<A>(_:)(v8, &type metadata for String, v3);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6 & 1;
  *(_QWORD *)(a1 + 24) = v7;
  return result;
}

uint64_t sub_100067460@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30[16];
  uint64_t v31;

  v29 = a2;
  v28 = sub_100004FC8(&qword_1001592E8);
  __chkstk_darwin(v28);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_100004FC8(&qword_1001592F0);
  v5 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ToolbarItemPlacement(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004FC8(&qword_1001592F8);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ToolbarItemPlacement.principal.getter(v13);
  v16 = sub_100004FC8(&qword_100159300);
  v17 = sub_100007868(&qword_100159308, &qword_100159300, (uint64_t)&protocol conformance descriptor for HStack<A>);
  v18 = ToolbarItem<>.init(placement:content:)(v10, sub_1000676A4, 0, v16, v17);
  static ToolbarItemPlacement.navigationBarTrailing.getter(v18);
  v31 = a1;
  v19 = sub_100004FC8(&qword_100159068);
  v20 = sub_100007868(&qword_100159070, &qword_100159068, (uint64_t)&protocol conformance descriptor for Button<A>);
  ToolbarItem<>.init(placement:content:)(v10, sub_100067A74, v30, v19, v20);
  v21 = v28;
  v22 = &v4[*(int *)(v28 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v4, v15, v11);
  v23 = v22;
  v24 = v27;
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v23, v7, v27);
  TupleToolbarContent.init(_:)(v4, v21);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v24);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t sub_1000676A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  *(_QWORD *)a2 = static VerticalAlignment.center.getter(a1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  v3 = sub_100004FC8(&qword_100159310);
  return sub_1000676E8((char *)(a2 + *(int *)(v3 + 44)));
}

uint64_t sub_1000676E8@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  char *v16;
  void (*v17)(char *, uint64_t);
  _QWORD v19[2];
  char v20;
  unint64_t v21;
  unint64_t v22;
  char v23;

  v2 = sub_100004FC8(&qword_100159318);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)v19 - v7;
  KeyPath = swift_getKeyPath(&unk_100116D08);
  v19[1] = KeyPath;
  v20 = 0;
  v21 = 0xD000000000000015;
  v22 = 0x800000010011FB30;
  v23 = 1;
  if (qword_100156D40 != -1)
    swift_once(&qword_100156D40, sub_1000B2BCC);
  objc_msgSend((id)qword_10015D3F8, "size");
  v11 = v10;
  v13 = v12;
  v14 = sub_1000116EC();
  View.iconSize(_:)(v11, v13, 0, &type metadata for Icon, v14);
  swift_release(KeyPath);
  v15 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  v15(v6, v8, v2);
  v15(a1, v6, v2);
  v16 = &a1[*(int *)(sub_100004FC8(&qword_100159320) + 48)];
  *(_OWORD *)v16 = xmmword_100116C60;
  v16[16] = 0;
  *((_QWORD *)v16 + 3) = _swiftEmptyArrayStorage;
  sub_10000BAD4(0x6775626544, 0xE500000000000000, 0);
  v17 = *(void (**)(char *, uint64_t))(v3 + 8);
  swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
  v17(v8, v2);
  sub_100007618(0x6775626544, 0xE500000000000000, 0);
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  return ((uint64_t (*)(char *, uint64_t))v17)(v6, v2);
}

uint64_t sub_1000678E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v2 = type metadata accessor for SettingsApplicationDebugRoot(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  sub_100067A7C(a1, (uint64_t)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 16) & ~v5;
  v7 = swift_allocObject(&unk_10014A628, v6 + v4, v5 | 7);
  sub_100067AC4((uint64_t)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v7 + v6);
  return Button.init(action:label:)(sub_100067B08, v7, sub_100067A38, 0, &type metadata for Text, &protocol witness table for Text);
}

uint64_t sub_1000679B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = type metadata accessor for DismissAction(0, a2);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100063238((uint64_t)v5);
  DismissAction.callAsFunction()();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

double sub_100067A38@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 1.73118111e-306;
  *(_OWORD *)a1 = xmmword_100116C70;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = &_swiftEmptyArrayStorage;
  return result;
}

uint64_t sub_100067A5C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100065BC8(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_100067A64@<X0>(char *a1@<X8>)
{
  uint64_t v1;

  return sub_100065EA0(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_100067A6C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100067460(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_100067A74()
{
  uint64_t v0;

  return sub_1000678E4(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100067A7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SettingsApplicationDebugRoot(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100067AC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SettingsApplicationDebugRoot(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100067B08()
{
  return sub_100067C84((uint64_t (*)(uint64_t))sub_1000679B8);
}

void sub_100067B14(double *a1@<X8>)
{
  *a1 = EnvironmentValues.displayScale.getter();
}

uint64_t sub_100067B3C(double *a1)
{
  return EnvironmentValues.displayScale.setter(*a1);
}

uint64_t sub_100067B64()
{
  return sub_100067C84(sub_100066638);
}

unint64_t sub_100067B78()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100158F78;
  if (!qword_100158F78)
  {
    v1 = type metadata accessor for SettingsAppNavigationModel(255);
    result = swift_getWitnessTable(&unk_10011B030, v1);
    atomic_store(result, (unint64_t *)&qword_100158F78);
  }
  return result;
}

uint64_t sub_100067BC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for SettingsApplicationDebugRoot(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  v7 = sub_100004FC8(&qword_100157780);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v9 = type metadata accessor for DismissAction(0, v8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v0 + v4, v9);
  }
  else
  {
    swift_release(*v6);
  }
  swift_release(*(_QWORD *)((char *)v6 + *(int *)(v1 + 20)));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100067C78()
{
  return sub_100067C84(sub_1000666D8);
}

uint64_t sub_100067C84(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SettingsApplicationDebugRoot(0) - 8) + 80);
  return a1(v1 + ((v2 + 16) & ~v2));
}

void sub_100067CC0(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_100066828(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_100067CC8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159370;
  if (!qword_100159370)
  {
    v1 = sub_100005430(&qword_100159368);
    sub_100067D2C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_100159370);
  }
  return result;
}

unint64_t sub_100067D2C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159378;
  if (!qword_100159378)
  {
    v1 = sub_100005430(&qword_100159380);
    sub_100063DC8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> LabeledContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100159378);
  }
  return result;
}

uint64_t sub_100067D98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004FC8(&qword_100159340);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

const char *sub_100067DE0()
{
  return "bundlePath";
}

void sub_100067DF0(uint64_t *a1@<X8>)
{
  sub_100067348(a1);
}

uint64_t sub_100067DF8@<X0>(uint64_t a1@<X8>)
{
  return sub_100067408(a1);
}

unint64_t sub_100067E00()
{
  unint64_t result;

  result = qword_1001593B8;
  if (!qword_1001593B8)
  {
    result = swift_getWitnessTable(&unk_100117134, &type metadata for SettingsSearchDebug);
    atomic_store(result, (unint64_t *)&qword_1001593B8);
  }
  return result;
}

unint64_t sub_100067E44()
{
  unint64_t result;

  result = qword_1001593C0;
  if (!qword_1001593C0)
  {
    result = swift_getWitnessTable(&unk_100117B94, &type metadata for DebugSettingsList);
    atomic_store(result, (unint64_t *)&qword_1001593C0);
  }
  return result;
}

uint64_t sub_100067E88()
{
  _QWORD v1[2];

  v1[0] = sub_100005430(&qword_100159280);
  v1[1] = sub_100007868(&qword_1001592C8, &qword_100159280, (uint64_t)&protocol conformance descriptor for NavigationStack<A, B>);
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.presentationDetents(_:)>>, 1);
}

uint64_t *sub_100067EEC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_100004FC8(&qword_1001588F0);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = *(int *)(a3 + 20);
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = type metadata accessor for SettingsNavigationEventRecord(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
  }
  return a1;
}

uint64_t sub_100067FE4(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  v4 = sub_100004FC8(&qword_1001588F0);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (char *)a1 + *(int *)(a2 + 20);
  v7 = type metadata accessor for SettingsNavigationEventRecord(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

uint64_t *sub_10006806C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v6 = sub_100004FC8(&qword_1001588F0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = *(int *)(a3 + 20);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for SettingsNavigationEventRecord(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  return a1;
}

uint64_t *sub_100068138(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  if (a1 != a2)
  {
    sub_10000BA50((uint64_t)a1, &qword_1001588F0);
    v6 = sub_100004FC8(&qword_1001588F0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = *(int *)(a3 + 20);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for SettingsNavigationEventRecord(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  return a1;
}

char *sub_10006821C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = sub_100004FC8(&qword_1001588F0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for SettingsNavigationEventRecord(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  return a1;
}

char *sub_1000682E4(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  if (a1 != a2)
  {
    sub_10000BA50((uint64_t)a1, &qword_1001588F0);
    v6 = sub_100004FC8(&qword_1001588F0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for SettingsNavigationEventRecord(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_1000683C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000683D0);
}

uint64_t sub_1000683D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = sub_100004FC8(&qword_1001593D0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for SettingsNavigationEventRecord(0);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_100068448(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100068454);
}

uint64_t sub_100068454(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = sub_100004FC8(&qword_1001593D0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for SettingsNavigationEventRecord(0);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for SettingsSearchZeroKeywordListSuggestionsItem(uint64_t a1)
{
  uint64_t result;

  result = qword_100159430;
  if (!qword_100159430)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SettingsSearchZeroKeywordListSuggestionsItem);
  return result;
}

void sub_100068510(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  sub_100068594(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for SettingsNavigationEventRecord(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v6, a1 + 16);
    }
  }
}

void sub_100068594(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100159440)
  {
    v2 = type metadata accessor for OpenURLAction(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100159440);
  }
}

uint64_t sub_1000685E8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10012A77C, 1);
}

uint64_t sub_1000685F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[16];
  uint64_t v30;

  v2 = v1;
  v28 = a1;
  v3 = type metadata accessor for SettingsSearchZeroKeywordListSuggestionsItem(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004FC8(&qword_100159470);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004FC8(&qword_100159478);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100069390(v2, (uint64_t)v6);
  v15 = *(unsigned __int8 *)(v4 + 80);
  v16 = (v15 + 16) & ~v15;
  v17 = swift_allocObject(&unk_10014A6E0, v16 + v5, v15 | 7);
  sub_1000694A0((uint64_t)v6, v17 + v16);
  v30 = v2;
  v18 = sub_100004FC8(&qword_100159480);
  v19 = sub_100007868(&qword_100159488, &qword_100159480, (uint64_t)&protocol conformance descriptor for VStack<A>);
  Button.init(action:label:)(sub_1000694E4, v17, sub_100069510, v29, v18, v19);
  v20 = sub_100007868(&qword_100159490, &qword_100159470, (uint64_t)&protocol conformance descriptor for Button<A>);
  v21 = sub_100069518();
  View.buttonStyle<A>(_:)(v21, v7, &type metadata for SettingsSearchImageButtonStyle, v20, v21);
  v22 = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v23 = static Alignment.center.getter(v22);
  v25 = sub_100068DD8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v28, 0.0, 1, 0.0, 1, v23, v24);
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v12 + 8))(v14, v11, v25);
}

uint64_t sub_100068830()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v0 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OpenURLAction(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006369C((uint64_t)v7);
  type metadata accessor for SettingsSearchZeroKeywordListSuggestionsItem(0);
  SettingsNavigationEventRecord.navigationLink.getter();
  OpenURLAction.callAsFunction(_:)(v3);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_100068924@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  *(_QWORD *)a1 = static HorizontalAlignment.center.getter();
  *(_QWORD *)(a1 + 8) = 0x4024000000000000;
  *(_BYTE *)(a1 + 16) = 0;
  v2 = sub_100004FC8(&qword_1001594A8);
  return sub_100068970((char *)(a1 + *(int *)(v2 + 44)));
}

uint64_t sub_100068970@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  char *v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  char *v28;
  char *v29;
  _QWORD v30[2];
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 v35;
  uint64_t v36;
  unsigned __int8 v37;

  v29 = a1;
  v1 = sub_100004FC8(&qword_1001594B0);
  __chkstk_darwin(v1);
  v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100004FC8(&qword_1001594B8);
  v5 = *(_QWORD **)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v24 - v9;
  sub_100068FA4((uint64_t)v3);
  v11 = sub_10006955C();
  View.iconSize(_:)(0x404E000000000000, 0x404E000000000000, 0, v1, v11);
  sub_10000BA50((uint64_t)v3, &qword_1001594B0);
  v12 = (void (*)(char *, char *, uint64_t))v5[4];
  v28 = v10;
  v12(v10, v8, v4);
  sub_100068BAC((uint64_t)v30);
  v13 = v30[0];
  v14 = v30[1];
  v15 = v31;
  v16 = v33;
  v24 = v32;
  v27 = v34;
  v17 = v36;
  v25 = v37;
  v26 = v35;
  v18 = (void (*)(char *, char *, uint64_t))v5[2];
  v18(v8, v10, v4);
  v19 = v29;
  v18(v29, v8, v4);
  v20 = &v19[*(int *)(sub_100004FC8(&qword_1001594D8) + 48)];
  *(_QWORD *)v20 = v13;
  *((_QWORD *)v20 + 1) = v14;
  v20[16] = v15;
  v21 = v24;
  *((_QWORD *)v20 + 3) = v24;
  *((_QWORD *)v20 + 4) = v16;
  *((_QWORD *)v20 + 5) = v27;
  v20[48] = v26;
  *((_QWORD *)v20 + 7) = v17;
  v20[64] = v25;
  sub_10000BAD4(v13, v14, v15);
  v22 = (void (*)(char *, uint64_t))v5[1];
  swift_bridgeObjectRetain(v21);
  swift_retain(v16);
  swift_retain(v17);
  v22(v28, v4);
  sub_100007618(v13, v14, v15);
  swift_release(v17);
  swift_release(v16);
  swift_bridgeObjectRelease(v21);
  return ((uint64_t (*)(char *, uint64_t))v22)(v8, v4);
}

uint64_t sub_100068BAC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t KeyPath;
  uint64_t result;
  _BYTE v35[4];
  _DWORD v36[3];

  v2 = type metadata accessor for Font.Leading(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v35[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for LocalizedStringResource(0);
  __chkstk_darwin(v6);
  v8 = &v35[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for SettingsSearchZeroKeywordListSuggestionsItem(0);
  SettingsNavigationEventRecord.title.getter();
  v9 = Text.init(_:)(v8);
  v11 = v10;
  v13 = v12;
  v15 = v14 & 1;
  v17 = static Font.footnote.getter(v16);
  static Font.Weight.semibold.getter();
  v18 = Font.weight(_:)(v17);
  swift_release(v17);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for Font.Leading.tight(_:), v2);
  v19 = Font.leading(_:)(v5, v18);
  swift_release(v18);
  (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
  v20 = Text.font(_:)(v19, v9, v11, v15, v13);
  v22 = v21;
  LOBYTE(v18) = v23;
  v25 = v24;
  swift_release(v19);
  sub_100007618(v9, v11, v15);
  v26 = swift_bridgeObjectRelease(v13);
  v36[0] = static HierarchicalShapeStyle.secondary.getter(v26);
  v27 = Text.foregroundStyle<A>(_:)(v36, v20, v22, v18 & 1, v25, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
  v29 = v28;
  LOBYTE(v11) = v30;
  v32 = v31;
  sub_100007618(v20, v22, v18 & 1);
  swift_bridgeObjectRelease(v25);
  KeyPath = swift_getKeyPath(&unk_100116E20);
  result = swift_getKeyPath(&unk_100116E50);
  *(_QWORD *)a1 = v27;
  *(_QWORD *)(a1 + 8) = v29;
  *(_BYTE *)(a1 + 16) = v11 & 1;
  *(_QWORD *)(a1 + 24) = v32;
  *(_QWORD *)(a1 + 32) = KeyPath;
  *(_QWORD *)(a1 + 40) = 2;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = result;
  *(_BYTE *)(a1 + 64) = 1;
  return result;
}

__n128 sub_100068DD8@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v29;
  double v30;
  double v31;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __n128 result;
  unsigned int v40;
  double v41;
  double v42;
  double v43;
  double v44;
  _OWORD v45[7];

  v16 = v15;
  v18 = a15;
  v19 = a12;
  v20 = a10;
  v21 = a2 & 1;
  v22 = a1;
  if ((_DWORD)v21)
    v22 = -INFINITY;
  v23 = a4 & 1;
  v24 = a3;
  if ((a4 & 1) != 0)
    v24 = v22;
  v25 = a6 & 1;
  v26 = a8 & 1;
  v27 = a5;
  if ((a6 & 1) != 0)
    v27 = v24;
  if (v22 > v24 || v24 > v27)
    goto LABEL_22;
  v29 = a7;
  if ((a8 & 1) != 0)
    v29 = -INFINITY;
  v30 = a10;
  if ((a11 & 1) != 0)
    v30 = v29;
  v31 = a12;
  if ((a13 & 1) != 0)
    v31 = v30;
  if (v29 > v30 || v30 > v31)
  {
LABEL_22:
    v43 = a5;
    v44 = a7;
    v42 = a3;
    v41 = a1;
    v40 = v21;
    v33 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v34 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v33, &_mh_execute_header, v34, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v18 = a15;
    v21 = v40;
    a1 = v41;
    v20 = a10;
    a3 = v42;
    v19 = a12;
    a5 = v43;
    a7 = v44;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v45, *(_QWORD *)&a1, v21, *(_QWORD *)&a3, v23, *(_QWORD *)&a5, v25, *(_QWORD *)&a7, v26, *(_QWORD *)&v20, a11 & 1, *(_QWORD *)&v19, a13 & 1, a14, v18);
  v35 = sub_100004FC8(&qword_100159478);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(a9, v16, v35);
  v36 = a9 + *(int *)(sub_100004FC8(&qword_1001594A0) + 36);
  v37 = v45[5];
  *(_OWORD *)(v36 + 64) = v45[4];
  *(_OWORD *)(v36 + 80) = v37;
  *(_OWORD *)(v36 + 96) = v45[6];
  v38 = v45[1];
  *(_OWORD *)v36 = v45[0];
  *(_OWORD *)(v36 + 16) = v38;
  result = (__n128)v45[3];
  *(_OWORD *)(v36 + 32) = v45[2];
  *(__n128 *)(v36 + 48) = result;
  return result;
}

uint64_t sub_100068FA4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  uint64_t v16;
  id v17;
  NSString v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  NSString v23;
  id v24;
  unint64_t v25;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v31 = a1;
  v30 = sub_100004FC8(&qword_1001594E0);
  __chkstk_darwin(v30);
  v2 = (char *)&v28 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_100004FC8(&qword_100158650);
  __chkstk_darwin(v28);
  v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_100004FC8(&qword_100158658);
  __chkstk_darwin(v29);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004FC8(&qword_100158660);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for SettingsEventImage(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SettingsSearchZeroKeywordListSuggestionsItem(0);
  SettingsNavigationEventRecord.icon.getter();
  v15 = (*(uint64_t (**)(char *, uint64_t))(v12 + 88))(v14, v11);
  if (v15 == enum case for SettingsEventImage.graphicIcon(_:))
  {
    (*(void (**)(char *, uint64_t))(v12 + 96))(v14, v11);
    v16 = *((_QWORD *)v14 + 1);
    v17 = objc_allocWithZone((Class)ISIcon);
    v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v16);
    v19 = objc_msgSend(v17, "initWithType:", v18);

    AsyncIconImage.init<>(icon:descriptor:)(v19, 0);
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v4, v10, v7);
    swift_storeEnumTagMultiPayload(v4, v28, 0);
    v20 = sub_100007868(&qword_100158678, &qword_100158660, (uint64_t)&protocol conformance descriptor for AsyncIconImage<A>);
LABEL_5:
    _ConditionalContent<>.init(storage:)(v4, v7, v7, v20, v20);
    sub_100042900((uint64_t)v6, (uint64_t)v2);
    swift_storeEnumTagMultiPayload(v2, v30, 0);
    v25 = sub_100042820();
    _ConditionalContent<>.init(storage:)(v2, v29, &type metadata for EmptyView, v25, &protocol witness table for EmptyView);
    sub_10000BA50((uint64_t)v6, &qword_100158658);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  if (v15 == enum case for SettingsEventImage.applicationIcon(_:))
  {
    (*(void (**)(char *, uint64_t))(v12 + 96))(v14, v11);
    v21 = *((_QWORD *)v14 + 1);
    v22 = objc_allocWithZone((Class)ISIcon);
    v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v21);
    v24 = objc_msgSend(v22, "initWithBundleIdentifier:", v23);

    AsyncIconImage.init<>(icon:descriptor:)(v24, 0);
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v4, v10, v7);
    swift_storeEnumTagMultiPayload(v4, v28, 1);
    v20 = sub_100007868(&qword_100158678, &qword_100158660, (uint64_t)&protocol conformance descriptor for AsyncIconImage<A>);
    goto LABEL_5;
  }
  swift_storeEnumTagMultiPayload(v2, v30, 1);
  v27 = sub_100042820();
  _ConditionalContent<>.init(storage:)(v2, v29, &type metadata for EmptyView, v27, &protocol witness table for EmptyView);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_100069390(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SettingsSearchZeroKeywordListSuggestionsItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000693D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;

  v1 = type metadata accessor for SettingsSearchZeroKeywordListSuggestionsItem(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  v7 = sub_100004FC8(&qword_1001588F0);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v9 = (char *)v6 + *(int *)(v1 + 20);
  v10 = type metadata accessor for SettingsNavigationEventRecord(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1000694A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SettingsSearchZeroKeywordListSuggestionsItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000694E4()
{
  type metadata accessor for SettingsSearchZeroKeywordListSuggestionsItem(0);
  return sub_100068830();
}

uint64_t sub_100069510@<X0>(uint64_t a1@<X8>)
{
  return sub_100068924(a1);
}

unint64_t sub_100069518()
{
  unint64_t result;

  result = qword_100159498;
  if (!qword_100159498)
  {
    result = swift_getWitnessTable(&unk_100118D20, &type metadata for SettingsSearchImageButtonStyle);
    atomic_store(result, (unint64_t *)&qword_100159498);
  }
  return result;
}

unint64_t sub_10006955C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001594C0;
  if (!qword_1001594C0)
  {
    v1 = sub_100005430(&qword_1001594B0);
    sub_1000695C0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001594C0);
  }
  return result;
}

unint64_t sub_1000695C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001594C8;
  if (!qword_1001594C8)
  {
    v1 = sub_100005430(&qword_1001594D0);
    sub_100042820();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001594C8);
  }
  return result;
}

uint64_t sub_10006962C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_10006965C(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_100069688@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000696B0(unsigned __int8 *a1)
{
  return EnvironmentValues.multilineTextAlignment.setter(*a1);
}

unint64_t sub_1000696D8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_1001594E8;
  if (!qword_1001594E8)
  {
    v1 = sub_100005430(&qword_1001594A0);
    v2[0] = sub_100005430(&qword_100159470);
    v2[1] = &type metadata for SettingsSearchImageButtonStyle;
    v2[2] = sub_100007868(&qword_100159490, &qword_100159470, (uint64_t)&protocol conformance descriptor for Button<A>);
    v2[3] = sub_100069518();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001594E8);
  }
  return result;
}

uint64_t sub_1000697A0(char a1)
{
  return byte_100116F5E[a1];
}

uint64_t sub_1000697B4(unsigned __int8 a1)
{
  return ((uint64_t (*)(_QWORD, _QWORD))((char *)nullsub_2 + 4 * byte_100116E80[a1]))(0, 0);
}

unint64_t sub_1000697E0()
{
  return 0xD000000000000014;
}

uint64_t sub_100069A58(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100069A84 + 4 * word_100116ECA[a1]))(1414483794, 0xE400000000000000);
}

unint64_t sub_100069A84()
{
  return 0xD000000000000029;
}

uint64_t sub_10006A124()
{
  return 0x454E414C50524941;
}

uint64_t sub_10006A148(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_1001472F0, a1, a2, &unk_100156DF8);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x4A)
    return 74;
  else
    return v3;
}

uint64_t sub_10006A198(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v15 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v15);
  }
  else
  {
    v7 = *a2;
    v8 = *((_BYTE *)a2 + 8);
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = v8;
    v9 = a3[5];
    v10 = (uint64_t *)(a1 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    swift_retain(v7);
    v12 = sub_100004FC8(&qword_1001588F0);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v11, v13);
      v14 = 1;
    }
    else
    {
      v16 = *v11;
      *v10 = *v11;
      swift_retain(v16);
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v12, v14);
    v17 = a3[6];
    v18 = (uint64_t *)(a1 + v17);
    v19 = (uint64_t *)((char *)a2 + v17);
    v20 = sub_100004FC8(&qword_1001591B8);
    if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
    {
      v21 = type metadata accessor for LayoutDirection(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v18, v19, v21);
      v22 = 1;
    }
    else
    {
      v23 = *v19;
      *v18 = *v19;
      swift_retain(v23);
      v22 = 0;
    }
    swift_storeEnumTagMultiPayload(v18, v20, v22);
    v24 = a3[7];
    v25 = (uint64_t *)(a1 + v24);
    v26 = (uint64_t *)((char *)a2 + v24);
    v27 = sub_100004FC8(&qword_1001591C0);
    if (swift_getEnumCaseMultiPayload(v26, v27) == 1)
    {
      v28 = type metadata accessor for Locale(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v25, v26, v28);
      v29 = 1;
    }
    else
    {
      v30 = *v26;
      *v25 = *v26;
      swift_retain(v30);
      v29 = 0;
    }
    swift_storeEnumTagMultiPayload(v25, v27, v29);
    v31 = a3[8];
    v32 = a1 + v31;
    v33 = (uint64_t)a2 + v31;
    v34 = type metadata accessor for SettingsNavigationEventRecord(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v32, v33, v34);
  }
  return a1;
}

uint64_t sub_10006A398(_QWORD *a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;

  swift_release(*a1);
  v4 = (_QWORD *)((char *)a1 + a2[5]);
  v5 = sub_100004FC8(&qword_1001588F0);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  v7 = (_QWORD *)((char *)a1 + a2[6]);
  v8 = sub_100004FC8(&qword_1001591B8);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  v10 = (_QWORD *)((char *)a1 + a2[7]);
  v11 = sub_100004FC8(&qword_1001591C0);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for Locale(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
  }
  else
  {
    swift_release(*v10);
  }
  v13 = (char *)a1 + a2[8];
  v14 = type metadata accessor for SettingsNavigationEventRecord(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
}

uint64_t sub_10006A4D8(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = v7;
  v8 = a3[5];
  v9 = (uint64_t *)(a1 + v8);
  v10 = (uint64_t *)((char *)a2 + v8);
  swift_retain(v6);
  v11 = sub_100004FC8(&qword_1001588F0);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
    v13 = 1;
  }
  else
  {
    v14 = *v10;
    *v9 = *v10;
    swift_retain(v14);
    v13 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v11, v13);
  v15 = a3[6];
  v16 = (uint64_t *)(a1 + v15);
  v17 = (uint64_t *)((char *)a2 + v15);
  v18 = sub_100004FC8(&qword_1001591B8);
  if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
  {
    v19 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v16, v17, v19);
    v20 = 1;
  }
  else
  {
    v21 = *v17;
    *v16 = *v17;
    swift_retain(v21);
    v20 = 0;
  }
  swift_storeEnumTagMultiPayload(v16, v18, v20);
  v22 = a3[7];
  v23 = (uint64_t *)(a1 + v22);
  v24 = (uint64_t *)((char *)a2 + v22);
  v25 = sub_100004FC8(&qword_1001591C0);
  if (swift_getEnumCaseMultiPayload(v24, v25) == 1)
  {
    v26 = type metadata accessor for Locale(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v23, v24, v26);
    v27 = 1;
  }
  else
  {
    v28 = *v24;
    *v23 = *v24;
    swift_retain(v28);
    v27 = 0;
  }
  swift_storeEnumTagMultiPayload(v23, v25, v27);
  v29 = a3[8];
  v30 = a1 + v29;
  v31 = (uint64_t)a2 + v29;
  v32 = type metadata accessor for SettingsNavigationEventRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v30, v31, v32);
  return a1;
}

uint64_t *sub_10006A6AC(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v7;
  swift_retain(v6);
  swift_release(v8);
  if (a1 != a2)
  {
    v9 = a3[5];
    v10 = (uint64_t *)((char *)a1 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    sub_10000BA50((uint64_t)a1 + v9, &qword_1001588F0);
    v12 = sub_100004FC8(&qword_1001588F0);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v11, v13);
      v14 = 1;
    }
    else
    {
      v15 = *v11;
      *v10 = *v11;
      swift_retain(v15);
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v12, v14);
    v16 = a3[6];
    v17 = (uint64_t *)((char *)a1 + v16);
    v18 = (uint64_t *)((char *)a2 + v16);
    sub_10000BA50((uint64_t)a1 + v16, &qword_1001591B8);
    v19 = sub_100004FC8(&qword_1001591B8);
    if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
    {
      v20 = type metadata accessor for LayoutDirection(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v17, v18, v20);
      v21 = 1;
    }
    else
    {
      v22 = *v18;
      *v17 = *v18;
      swift_retain(v22);
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v19, v21);
    v23 = a3[7];
    v24 = (uint64_t *)((char *)a1 + v23);
    v25 = (uint64_t *)((char *)a2 + v23);
    sub_10000BA50((uint64_t)a1 + v23, &qword_1001591C0);
    v26 = sub_100004FC8(&qword_1001591C0);
    if (swift_getEnumCaseMultiPayload(v25, v26) == 1)
    {
      v27 = type metadata accessor for Locale(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v24, v25, v27);
      v28 = 1;
    }
    else
    {
      v29 = *v25;
      *v24 = *v25;
      swift_retain(v29);
      v28 = 0;
    }
    swift_storeEnumTagMultiPayload(v24, v26, v28);
  }
  v30 = a3[8];
  v31 = (uint64_t)a1 + v30;
  v32 = (uint64_t)a2 + v30;
  v33 = type metadata accessor for SettingsNavigationEventRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 24))(v31, v32, v33);
  return a1;
}

uint64_t sub_10006A8C4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = a3[5];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_100004FC8(&qword_1001588F0);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v11 = a3[6];
  v12 = (void *)(a1 + v11);
  v13 = (const void *)(a2 + v11);
  v14 = sub_100004FC8(&qword_1001591B8);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v15 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v12, v13, v15);
    swift_storeEnumTagMultiPayload(v12, v14, 1);
  }
  else
  {
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  v16 = a3[7];
  v17 = (void *)(a1 + v16);
  v18 = (const void *)(a2 + v16);
  v19 = sub_100004FC8(&qword_1001591C0);
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    v20 = type metadata accessor for Locale(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v17, v18, v20);
    swift_storeEnumTagMultiPayload(v17, v19, 1);
  }
  else
  {
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  v21 = a3[8];
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = type metadata accessor for SettingsNavigationEventRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v22, v23, v24);
  return a1;
}

uint64_t *sub_10006AAA0(uint64_t *a1, uint64_t *a2, int *a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = *((_BYTE *)a2 + 8);
  v7 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v6;
  swift_release(v7);
  if (a1 != a2)
  {
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    sub_10000BA50((uint64_t)a1 + v8, &qword_1001588F0);
    v11 = sub_100004FC8(&qword_1001588F0);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    v13 = a3[6];
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    sub_10000BA50((uint64_t)a1 + v13, &qword_1001591B8);
    v16 = sub_100004FC8(&qword_1001591B8);
    if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
    {
      v17 = type metadata accessor for LayoutDirection(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v14, v15, v17);
      swift_storeEnumTagMultiPayload(v14, v16, 1);
    }
    else
    {
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    v18 = a3[7];
    v19 = (char *)a1 + v18;
    v20 = (char *)a2 + v18;
    sub_10000BA50((uint64_t)a1 + v18, &qword_1001591C0);
    v21 = sub_100004FC8(&qword_1001591C0);
    if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
    {
      v22 = type metadata accessor for Locale(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v19, v20, v22);
      swift_storeEnumTagMultiPayload(v19, v21, 1);
    }
    else
    {
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
  }
  v23 = a3[8];
  v24 = (uint64_t)a1 + v23;
  v25 = (uint64_t)a2 + v23;
  v26 = type metadata accessor for SettingsNavigationEventRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 40))(v24, v25, v26);
  return a1;
}

uint64_t sub_10006ACBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006ACC8);
}

uint64_t sub_10006ACC8(uint64_t a1, uint64_t a2, int *a3)
{
  unsigned int v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 8);
    if (v4 > 1)
      return (v4 ^ 0xFF) + 1;
    else
      return 0;
  }
  else
  {
    v8 = sub_100004FC8(&qword_1001593D0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[5];
    }
    else
    {
      v12 = sub_100004FC8(&qword_1001594F0);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[6];
      }
      else
      {
        v13 = sub_100004FC8(&qword_1001594F8);
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
        {
          v10 = v13;
          v11 = a3[7];
        }
        else
        {
          v10 = type metadata accessor for SettingsNavigationEventRecord(0);
          v9 = *(_QWORD *)(v10 - 8);
          v11 = a3[8];
        }
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_10006ADB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006ADC0);
}

uint64_t sub_10006ADC0(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 8) = -(char)a2;
  }
  else
  {
    v8 = sub_100004FC8(&qword_1001593D0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[5];
    }
    else
    {
      v12 = sub_100004FC8(&qword_1001594F0);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[6];
      }
      else
      {
        v13 = sub_100004FC8(&qword_1001594F8);
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == a3)
        {
          v10 = v13;
          v11 = a4[7];
        }
        else
        {
          v10 = type metadata accessor for SettingsNavigationEventRecord(0);
          v9 = *(_QWORD *)(v10 - 8);
          v11 = a4[8];
        }
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for SettingsSearchZeroKeywordListRecentItem(uint64_t a1)
{
  uint64_t result;

  result = qword_100159558;
  if (!qword_100159558)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SettingsSearchZeroKeywordListRecentItem);
  return result;
}

void sub_10006AEE8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[5];

  v10[0] = "\t";
  sub_10006AFE0(319, (unint64_t *)&qword_100159440, (uint64_t (*)(uint64_t))&type metadata accessor for OpenURLAction);
  if (v3 <= 0x3F)
  {
    v10[1] = *(_QWORD *)(v2 - 8) + 64;
    sub_10006AFE0(319, &qword_100159568, (uint64_t (*)(uint64_t))&type metadata accessor for LayoutDirection);
    if (v5 <= 0x3F)
    {
      v10[2] = *(_QWORD *)(v4 - 8) + 64;
      sub_10006AFE0(319, (unint64_t *)&unk_100159570, (uint64_t (*)(uint64_t))&type metadata accessor for Locale);
      if (v7 <= 0x3F)
      {
        v10[3] = *(_QWORD *)(v6 - 8) + 64;
        v8 = type metadata accessor for SettingsNavigationEventRecord(319);
        if (v9 <= 0x3F)
        {
          v10[4] = *(_QWORD *)(v8 - 8) + 64;
          swift_initStructMetadata(a1, 256, 5, v10, a1 + 16);
        }
      }
    }
  }
}

void sub_10006AFE0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Environment.Content(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t sub_10006B02C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10012A7CC, 1);
}

uint64_t sub_10006B03C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t (**v17)(_QWORD, _QWORD);
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t result;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v3 = type metadata accessor for SettingsSearchZeroKeywordListRecentItem(0);
  v50 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v51 = v4;
  v53 = (uint64_t)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for LayoutDirection(0);
  v47 = *(_QWORD *)(v5 - 8);
  v48 = v5;
  __chkstk_darwin(v5);
  v46 = (uint64_t)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Locale(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = type metadata accessor for LocalizedStringResource(0);
  v10 = *(_QWORD *)(v45 - 8);
  v11 = __chkstk_darwin(v45);
  v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v42 - v14;
  v16 = type metadata accessor for SettingsEventImage(0);
  v17 = *(uint64_t (***)(_QWORD, _QWORD))(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (uint64_t *)((char *)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v49 = v3;
  v52 = v1;
  SettingsNavigationEventRecord.icon.getter(v18);
  v21 = ((uint64_t (**)(uint64_t *, uint64_t))v17)[11](v20, v16);
  if (v21 == enum case for SettingsEventImage.graphicIcon(_:))
  {
    v22 = ((uint64_t (**)(uint64_t *, uint64_t))v17)[12](v20, v16);
    v23 = *v20;
    v43 = v20[1];
    v44 = v23;
    v24 = 2;
  }
  else if (v21 == enum case for SettingsEventImage.applicationIcon(_:))
  {
    v22 = ((uint64_t (**)(uint64_t *, uint64_t))v17)[12](v20, v16);
    v25 = *v20;
    v43 = v20[1];
    v44 = v25;
    v24 = 1;
  }
  else
  {
    v22 = ((uint64_t (**)(uint64_t *, uint64_t))v17)[1](v20, v16);
    v43 = 0;
    v44 = 0;
    v24 = 3;
  }
  SettingsNavigationEventRecord.title.getter(v22);
  v26 = v52;
  sub_1000636D0((uint64_t)v9);
  LocalizedStringResource.locale.setter(v9);
  v27 = v45;
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v15, v45);
  v28 = String.init(localized:)(v13);
  v30 = v29;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v27);
  v31 = v46;
  sub_1000636F4(v46);
  v32 = SettingsNavigationEventRecord.resolveLocalizedPathComponents(layoutDirection:)(v31);
  v34 = v33;
  (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v31, v48);
  v35 = HIBYTE(v34) & 0xF;
  if ((v34 & 0x2000000000000000) == 0)
    v35 = v32 & 0xFFFFFFFFFFFFLL;
  if (!v35)
  {
    swift_bridgeObjectRelease(v34);
    v32 = 0;
    v34 = 0;
  }
  v36 = v53;
  sub_10006B470(v26, v53);
  v37 = *(unsigned __int8 *)(v50 + 80);
  v38 = (v37 + 16) & ~v37;
  v39 = swift_allocObject(&unk_10014A750, v38 + v51, v37 | 7);
  result = sub_10006B638(v36, v39 + v38);
  v41 = v43;
  *(_QWORD *)a1 = v44;
  *(_QWORD *)(a1 + 8) = v41;
  *(_BYTE *)(a1 + 16) = v24;
  *(_QWORD *)(a1 + 24) = v28;
  *(_QWORD *)(a1 + 32) = v30;
  *(_QWORD *)(a1 + 40) = v32;
  *(_QWORD *)(a1 + 48) = v34;
  *(_QWORD *)(a1 + 56) = sub_10006B67C;
  *(_QWORD *)(a1 + 64) = v39;
  return result;
}

uint64_t sub_10006B3A4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *a1;
  v7 = *((_BYTE *)a1 + 8);
  v8 = swift_retain(*a1);
  v9 = sub_100063680(v8, v7);
  swift_release(v6);
  type metadata accessor for SettingsSearchZeroKeywordListRecentItem(0);
  SettingsNavigationEventRecord.navigationLink.getter();
  sub_1000D8D44((uint64_t)v5);
  swift_release(v9);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_10006B470(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SettingsSearchZeroKeywordListRecentItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006B4B4()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = (int *)type metadata accessor for SettingsSearchZeroKeywordListRecentItem(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  swift_release(*(_QWORD *)(v0 + v4));
  v7 = (_QWORD *)(v0 + v4 + v1[5]);
  v8 = sub_100004FC8(&qword_1001588F0);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  v10 = (_QWORD *)(v6 + v1[6]);
  v11 = sub_100004FC8(&qword_1001591B8);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
  }
  else
  {
    swift_release(*v10);
  }
  v13 = (_QWORD *)(v6 + v1[7]);
  v14 = sub_100004FC8(&qword_1001591C0);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v15 = type metadata accessor for Locale(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v13, v15);
  }
  else
  {
    swift_release(*v13);
  }
  v16 = v6 + v1[8];
  v17 = type metadata accessor for SettingsNavigationEventRecord(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10006B638(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SettingsSearchZeroKeywordListRecentItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006B67C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SettingsSearchZeroKeywordListRecentItem(0) - 8)
                          + 80);
  return sub_10006B3A4((uint64_t *)(v0 + ((v1 + 16) & ~v1)));
}

id sub_10006B6AC()
{
  if (qword_100156CF0 != -1)
    swift_once(&qword_100156CF0, sub_1000A90C8);
  qword_10015D238 = qword_10015D390;
  return (id)qword_10015D390;
}

_BYTE *sub_10006B6F4()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *result;

  v0 = type metadata accessor for CellularSettings();
  v1 = swift_allocObject(v0, 20, 7);
  result = sub_10006BF68();
  qword_10015D240 = v1;
  return result;
}

uint64_t sub_10006B72C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD aBlock[5];
  _QWORD *v33;

  v27 = a1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v30 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v28 = *(_QWORD *)(v7 - 8);
  v29 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS.QoSClass(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005494();
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DispatchQoS.QoSClass.userInitiated(_:), v10);
  v14 = (void *)static OS_dispatch_queue.global(qos:)(v13);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v15 = swift_unownedRetainStrong(v2);
  v16 = swift_unownedRetain(v15);
  v17 = swift_unownedRetain(v16);
  swift_release(v17);
  v18 = (_QWORD *)swift_allocObject(&unk_10014A7F8, 40, 7);
  v19 = v27;
  v18[2] = v2;
  v18[3] = v19;
  v18[4] = a2;
  aBlock[4] = sub_10006CF14;
  v33 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100005350;
  aBlock[3] = &unk_10014A810;
  v20 = _Block_copy(aBlock);
  v21 = swift_retain(a2);
  static DispatchQoS.unspecified.getter(v21);
  v31 = _swiftEmptyArrayStorage;
  v22 = sub_100007828((unint64_t *)&qword_10015BAB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v23 = sub_100004FC8((uint64_t *)&unk_100156F40);
  v24 = sub_100007868((unint64_t *)&qword_10015BAC0, (uint64_t *)&unk_100156F40, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v23, v24, v4, v22);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v6, v20);
  swift_unownedRelease(v2);
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v30 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v9, v29);
  return swift_release(v33);
}

id sub_10006B9C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  char IsRequired;
  id result;
  void *v14;
  unsigned __int8 v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD aBlock[5];
  uint64_t v35;

  v30 = a2;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v33 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v31 = *(_QWORD *)(v8 - 8);
  v32 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100005948();
  IsRequired = PSSimIsRequired();
  result = objc_msgSend((id)objc_opt_self(PSUICellularPlanManagerCache), "sharedInstance");
  if (result)
  {
    v14 = result;
    v15 = objc_msgSend(result, "isCellularDisabled");

    v16 = sub_100005494();
    v17 = (void *)static OS_dispatch_queue.main.getter(v16);
    v18 = swift_unownedRetainStrong(a1);
    v19 = swift_unownedRetain(v18);
    v20 = swift_unownedRetain(v19);
    swift_release(v20);
    v21 = swift_unownedRetainStrong(a1);
    swift_unownedRelease(v21);
    swift_unownedRelease(a1);
    v22 = swift_unownedRetain(a1);
    swift_release(v22);
    v23 = swift_allocObject(&unk_10014A848, 48, 7);
    *(_QWORD *)(v23 + 16) = a1;
    *(_BYTE *)(v23 + 24) = v11;
    *(_BYTE *)(v23 + 25) = IsRequired;
    *(_BYTE *)(v23 + 26) = v15;
    *(_QWORD *)(v23 + 32) = v30;
    *(_QWORD *)(v23 + 40) = a3;
    aBlock[4] = sub_10006CF4C;
    v35 = v23;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100005350;
    aBlock[3] = &unk_10014A860;
    v24 = _Block_copy(aBlock);
    v25 = v35;
    swift_retain(a3);
    v26 = swift_release(v25);
    static DispatchQoS.unspecified.getter(v26);
    aBlock[0] = _swiftEmptyArrayStorage;
    v27 = sub_100007828((unint64_t *)&qword_10015BAB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v28 = sub_100004FC8((uint64_t *)&unk_100156F40);
    v29 = sub_100007868((unint64_t *)&qword_10015BAC0, (uint64_t *)&unk_100156F40, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v28, v29, v5, v27);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v7, v24);
    _Block_release(v24);

    (*(void (**)(char *, uint64_t))(v33 + 8))(v7, v5);
    return (id)(*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v10, v32);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10006BC64(_BYTE *a1, char a2, char a3, char a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v10;
  char v11;
  char v12;
  uint64_t (*v13)(_QWORD);
  void *v14;
  Class isa;
  NSString v16;
  uint64_t v17;
  int v18;
  void *v19;
  Class v20;
  NSString v21;
  uint64_t v22;
  int v23;
  void *v24;
  Class v25;
  NSString v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  char v30;

  v10 = ((uint64_t (*)(void))swift_unownedRetainStrong)();
  v11 = *(_BYTE *)(v10 + 17);
  swift_release(v10);
  v12 = v11 ^ a2;
  if ((v12 & 1) != 0)
  {
    v13 = a5;
    swift_unownedRetainStrong(a1);
    if (qword_100156C80 != -1)
      swift_once(&qword_100156C80, sub_10006B6AC);
    v14 = (void *)qword_10015D238;
    isa = Bool._bridgeToObjectiveC()().super.super.isa;
    v16 = String._bridgeToObjectiveC()();
    objc_msgSend(v14, "setValue:forKey:", isa, v16);

    a1[17] = a2 & 1;
    swift_release(a1);
    a5 = v13;
  }
  v17 = swift_unownedRetainStrong(a1);
  v18 = a1[18];
  swift_release(v17);
  if (v18 != (a3 & 1))
  {
    swift_unownedRetainStrong(a1);
    if (qword_100156C80 != -1)
      swift_once(&qword_100156C80, sub_10006B6AC);
    v19 = (void *)qword_10015D238;
    v20 = Bool._bridgeToObjectiveC()().super.super.isa;
    v21 = String._bridgeToObjectiveC()();
    objc_msgSend(v19, "setValue:forKey:", v20, v21);

    a1[18] = a3 & 1;
    swift_release(a1);
    v12 = 1;
  }
  v22 = swift_unownedRetainStrong(a1);
  v23 = a1[19];
  swift_release(v22);
  swift_unownedRetainStrong(a1);
  if (v23 != (a4 & 1))
  {
    if (qword_100156C80 != -1)
      swift_once(&qword_100156C80, sub_10006B6AC);
    v24 = (void *)qword_10015D238;
    v25 = Bool._bridgeToObjectiveC()().super.super.isa;
    v26 = String._bridgeToObjectiveC()();
    objc_msgSend(v24, "setValue:forKey:", v25, v26);

    a1[19] = a4 & 1;
    swift_release(a1);
    v27 = swift_unownedRetainStrong(a1);
    a1[16] = 1;
    result = swift_release(v27);
    return a5(result);
  }
  a1[16] = 1;
  result = swift_release(a1);
  if ((v12 & 1) != 0)
    return a5(result);
  v29 = swift_unownedRetainStrong(a1);
  v30 = a1[16];
  result = swift_release(v29);
  if ((v30 & 1) == 0)
    return a5(result);
  return result;
}

uint64_t sub_10006BF38()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 20, 7);
}

uint64_t type metadata accessor for CellularSettings()
{
  return objc_opt_self(_TtC11SettingsApp16CellularSettings);
}

_BYTE *sub_10006BF68()
{
  _BYTE *v0;
  void *v1;
  NSString v2;
  void *v3;
  NSString v4;
  void *v5;
  NSString v6;

  v0[16] = 0;
  if (qword_100156C80 != -1)
    swift_once(&qword_100156C80, sub_10006B6AC);
  v1 = (void *)qword_10015D238;
  v2 = String._bridgeToObjectiveC()();
  LOBYTE(v1) = objc_msgSend(v1, "BOOLForKey:", v2);

  v0[17] = (_BYTE)v1;
  v3 = (void *)qword_10015D238;
  v4 = String._bridgeToObjectiveC()();
  LOBYTE(v3) = objc_msgSend(v3, "BOOLForKey:", v4);

  v0[18] = (_BYTE)v3;
  v5 = (void *)qword_10015D238;
  v6 = String._bridgeToObjectiveC()();
  LOBYTE(v5) = objc_msgSend(v5, "BOOLForKey:", v6);

  v0[19] = (_BYTE)v5;
  return v0;
}

id sub_10006C088()
{
  char *v0;
  objc_class *ObjectType;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  objc_super v6;
  _BYTE v7[24];
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _BYTE v11[24];

  ObjectType = (objc_class *)swift_getObjectType(v0);
  v2 = (uint64_t)&v0[OBJC_IVAR____TtC11SettingsApp28CellularDataListItemProvider_cancellable];
  swift_beginAccess(&v0[OBJC_IVAR____TtC11SettingsApp28CellularDataListItemProvider_cancellable], v11, 0, 0);
  if (*(_QWORD *)(v2 + 24))
  {
    sub_10003CE00(v2, (uint64_t)&v8);
    v3 = *((_QWORD *)&v9 + 1);
    v4 = v10;
    sub_100007C2C(&v8, *((uint64_t *)&v9 + 1));
    dispatch thunk of Cancellable.cancel()(v3, v4);
    sub_100005474(&v8);
  }
  v10 = 0;
  v8 = 0u;
  v9 = 0u;
  swift_beginAccess(v2, v7, 33, 0);
  sub_100047EA0((uint64_t)&v8, v2);
  swift_endAccess(v7);
  v6.receiver = v0;
  v6.super_class = ObjectType;
  return objc_msgSendSuper2(&v6, "dealloc");
}

uint64_t sub_10006C20C()
{
  return type metadata accessor for CellularDataListItemProvider(0);
}

uint64_t type metadata accessor for CellularDataListItemProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_1001596B0;
  if (!qword_1001596B0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CellularDataListItemProvider);
  return result;
}

uint64_t sub_10006C250(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  void *v3;
  _QWORD v4[5];
  _BYTE v5[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v5, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v1);
  if (result)
  {
    v3 = (void *)result;
    sub_10003CE00(result + OBJC_IVAR____TtC11SettingsApp28CellularDataListItemProvider_invalidator, (uint64_t)v4);

    sub_100007C2C(v4, v4[3]);
    type metadata accessor for PrimarySettingsListModel(0);
    sub_100103798((uint64_t)"Cellular Settings Updated", 25, 2);
    return sub_100005474(v4);
  }
  return result;
}

uint64_t sub_10006C300@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[2];
  char v53;
  uint64_t v54;
  char v55;

  v49 = a1;
  v51 = a2;
  v48 = type metadata accessor for PrimarySettingsListItemViewType(0);
  __chkstk_darwin(v48);
  v4 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004FC8((uint64_t *)&unk_100156F00);
  __chkstk_darwin(v8);
  v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PrimarySettingsListItemModel(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v47 = (uint64_t)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100156C88 != -1)
    swift_once(&qword_100156C88, sub_10006B6F4);
  v14 = (_BYTE *)qword_10015D240;
  v50 = v2;
  v15 = v2 + OBJC_IVAR____TtC11SettingsApp28CellularDataListItemProvider_id;
  sub_1000076F0(v2 + OBJC_IVAR____TtC11SettingsApp28CellularDataListItemProvider_id, (uint64_t)v7, type metadata accessor for PrimarySettingsListItemIdentifier);
  v16 = type metadata accessor for StaticPrimarySettingsListItemProvider(0);
  v17 = swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  sub_100007670((uint64_t)v7, v17 + OBJC_IVAR____TtC11SettingsApp37StaticPrimarySettingsListItemProvider_id, type metadata accessor for PrimarySettingsListItemIdentifier);
  sub_1000B2604(v49, (uint64_t)v10);
  swift_setDeallocating(v17);
  sub_1000076B4(v17 + OBJC_IVAR____TtC11SettingsApp37StaticPrimarySettingsListItemProvider_id, type metadata accessor for PrimarySettingsListItemIdentifier);
  swift_deallocClassInstance(v17, *(unsigned int *)(*(_QWORD *)v17 + 48), *(unsigned __int16 *)(*(_QWORD *)v17 + 52));
  v18 = v11;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_10000BA50((uint64_t)v10, (uint64_t *)&unk_100156F00);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(v51, 1, 1, v11);
  }
  else
  {
    v20 = v47;
    sub_100007670((uint64_t)v10, v47, type metadata accessor for PrimarySettingsListItemModel);
    v21 = *(_QWORD *)(v50 + OBJC_IVAR____TtC11SettingsApp28CellularDataListItemProvider_airplaneModeListItemProvider);
    v49 = (_QWORD *)v12;
    v22 = v18;
    v23 = *(_BYTE *)(v21 + OBJC_IVAR____TtC11SettingsApp28AirplaneModeListItemProvider_airplaneMode);
    v24 = v14[17];
    v25 = v14[18];
    v26 = *(_QWORD *)(v50 + OBJC_IVAR____TtC11SettingsApp28CellularDataListItemProvider_cellularDataSettingObserver);
    sub_1000160CC();
    v27 = v14[19];
    sub_100015C18();
    sub_10006CD68(v23, v24, v25, v27, *(_BYTE *)(v26 + 18), (uint64_t)v52);
    v28 = v52[1];
    v29 = v53;
    v45 = v54;
    v46 = v52[0];
    v30 = v55;
    sub_1000076F0(v15, (uint64_t)v4, type metadata accessor for PrimarySettingsListItemIdentifier);
    sub_10009BD7C();
    v32 = v31;
    v34 = v33;
    v36 = v35;
    v38 = v37;
    v39 = (int *)type metadata accessor for PrimarySettingsListValueLinkModel(0);
    v40 = v39[9];
    v41 = &v4[v39[8]];
    v4[v39[5]] = v30;
    v42 = &v4[v39[6]];
    *(_QWORD *)v42 = v32;
    *((_QWORD *)v42 + 1) = v34;
    v42[16] = v36 & 1;
    *((_QWORD *)v42 + 3) = v38;
    v43 = &v4[v39[7]];
    *(_QWORD *)v43 = v46;
    *((_QWORD *)v43 + 1) = v28;
    v43[16] = v29;
    *((_QWORD *)v43 + 3) = v45;
    *(_QWORD *)v41 = 0;
    *((_QWORD *)v41 + 1) = 0;
    v41[16] = -1;
    v4[v40] = 2;
    swift_storeEnumTagMultiPayload(v4, v48, 8);
    sub_100020188((uint64_t)v4, v20 + *(int *)(v22 + 20));
    v44 = v51;
    sub_1000076F0(v20, v51, type metadata accessor for PrimarySettingsListItemModel);
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v49[7])(v44, 0, 1, v22);
    sub_10006C6C0(v50);
    return sub_1000076B4(v20, type metadata accessor for PrimarySettingsListItemModel);
  }
}

uint64_t sub_10006C6C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  id v23;
  void (*v24)(char *, uint64_t);
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v41[24];
  id v42[3];
  uint64_t v43;
  void *v44;
  char v45[24];

  v40 = a1;
  v1 = sub_100004FC8((uint64_t *)&unk_10015C970);
  __chkstk_darwin(v1);
  v3 = (char *)&v36 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for NSNotificationCenter.Publisher(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v36 - v9;
  v11 = sub_100004FC8(&qword_1001596C0);
  v37 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100004FC8(&qword_1001596C8);
  v38 = *(_QWORD *)(v14 - 8);
  v39 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = objc_msgSend((id)objc_opt_self(PSLaunchTracker), "sharedInstance");
  v18 = objc_msgSend(v17, "launchHasCompleted");

  if (v18)
  {
    v19 = v40 + OBJC_IVAR____TtC11SettingsApp28CellularDataListItemProvider_cancellable;
    swift_beginAccess(v40 + OBJC_IVAR____TtC11SettingsApp28CellularDataListItemProvider_cancellable, v45, 0, 0);
    sub_100047DD8(v19, (uint64_t)v42);
    v20 = v43;
    sub_10000BA50((uint64_t)v42, &qword_1001587E0);
    if (!v20)
    {
      v36 = v19;
      v21 = (void *)objc_opt_self(NSNotificationCenter);
      v22 = objc_msgSend(v21, "defaultCenter");
      if (qword_100156D80 != -1)
        swift_once(&qword_100156D80, sub_100108E34);
      NSNotificationCenter.publisher(for:object:)(qword_10015D450, 0);

      v23 = objc_msgSend(v21, "defaultCenter");
      if (qword_100156D88 != -1)
        swift_once(&qword_100156D88, sub_100108E68);
      NSNotificationCenter.publisher(for:object:)(qword_10015D458, 0);

      sub_100007828((unint64_t *)&unk_100156F20, (uint64_t (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Publisher, (uint64_t)&protocol conformance descriptor for NSNotificationCenter.Publisher);
      Publisher.merge(with:)(v8);
      v24 = *(void (**)(char *, uint64_t))(v5 + 8);
      v24(v8, v4);
      v24(v10, v4);
      v25 = sub_100005494();
      v42[0] = (id)static OS_dispatch_queue.main.getter(v25);
      v26 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v3, 1, 1, v26);
      v27 = sub_100007868(&qword_1001596D0, &qword_1001596C0, (uint64_t)&protocol conformance descriptor for Publishers.MergeMany<A>);
      v28 = sub_100007828((unint64_t *)&qword_10015C990, (uint64_t (*)(uint64_t))sub_100005494, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
      Publisher.receive<A>(on:options:)(v42, v3, v11, v25, v27, v28);
      sub_10000BA50((uint64_t)v3, (uint64_t *)&unk_10015C970);

      (*(void (**)(char *, uint64_t))(v37 + 8))(v13, v11);
      v29 = swift_allocObject(&unk_10014A7D0, 24, 7);
      swift_unknownObjectWeakInit(v29 + 16, v40);
      v30 = sub_100007868(&qword_1001596D8, &qword_1001596C8, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
      v31 = v39;
      v32 = (void *)Publisher<>.sink(receiveValue:)(sub_10006CEE0, v29, v39, v30);
      swift_release(v29);
      (*(void (**)(char *, uint64_t))(v38 + 8))(v16, v31);
      v43 = type metadata accessor for AnyCancellable(0);
      v44 = &protocol witness table for AnyCancellable;
      v42[0] = v32;
      v33 = v36;
      swift_beginAccess(v36, v41, 33, 0);
      sub_100047EA0((uint64_t)v42, v33);
      swift_endAccess(v41);
    }
  }
  if (qword_100156C88 != -1)
    swift_once(&qword_100156C88, sub_10006B6F4);
  v34 = swift_allocObject(&unk_10014A7D0, 24, 7);
  swift_unknownObjectWeakInit(v34 + 16, v40);
  swift_retain(v34);
  sub_10006B72C((uint64_t)sub_10006CED8, v34);
  return swift_release_n(v34, 2);
}

uint64_t sub_10006CBD8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  result = type metadata accessor for PrimarySettingsListItemIdentifier(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "(";
    v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[4] = &unk_1001170B8;
    result = swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_10006CC68@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_1000076F0(*v1 + OBJC_IVAR____TtC11SettingsApp28CellularDataListItemProvider_id, a1, type metadata accessor for PrimarySettingsListItemIdentifier);
}

uint64_t sub_10006CC98@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10006C300(a1, a2);
}

uint64_t sub_10006CCB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  void *v4;
  _QWORD v5[5];
  _BYTE v6[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v2);
  if (result)
  {
    v4 = (void *)result;
    sub_10003CE00(result + OBJC_IVAR____TtC11SettingsApp28CellularDataListItemProvider_invalidator, (uint64_t)v5);

    sub_100007C2C(v5, v5[3]);
    type metadata accessor for PrimarySettingsListModel(0);
    sub_100103798((uint64_t)"SIM Status change", 17, 2);
    return sub_100005474(v5);
  }
  return result;
}

uint64_t sub_10006CD68@<X0>(char a1@<W0>, char a2@<W1>, char a3@<W2>, char a4@<W3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  void *v11;
  char v12;
  char v13;
  char v14;
  char v15;

  if ((a4 & 1) == 0 && (a5 & 1) == 0)
  {
    v7 = LocalizedStringKey.init(stringLiteral:)(0x4C4C45435F46464FLL, 0xEC00000052414C55);
LABEL_10:
    result = Text.init(_:tableName:bundle:comment:)(v7);
    v14 = 0;
    v13 = v15 & 1;
    goto LABEL_11;
  }
  if ((a2 & 1) == 0 || (a3 & 1) == 0 || (a4 & 1) == 0)
  {
    if ((a1 & 1) == 0)
    {
      v14 = 0;
      result = 0;
      v13 = 0;
      v11 = &_swiftEmptyArrayStorage;
      v10 = 0xE000000000000000;
      goto LABEL_11;
    }
    v7 = LocalizedStringKey.init(stringLiteral:)(0x656E616C70726941, 0xED000065646F4D20);
    goto LABEL_10;
  }
  v8 = LocalizedStringKey.init(stringLiteral:)(0x4D4953206F4ELL, 0xE600000000000000);
  result = Text.init(_:tableName:bundle:comment:)(v8);
  v13 = v12 & 1;
  v14 = 1;
LABEL_11:
  *(_QWORD *)a6 = result;
  *(_QWORD *)(a6 + 8) = v10;
  *(_BYTE *)(a6 + 16) = v13;
  *(_QWORD *)(a6 + 24) = v11;
  *(_BYTE *)(a6 + 32) = v14;
  return result;
}

uint64_t sub_10006CEB4()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10006CED8()
{
  uint64_t v0;

  return sub_10006C250(v0);
}

uint64_t sub_10006CEE0(uint64_t a1)
{
  uint64_t v1;

  return sub_10006CCB8(a1, v1);
}

uint64_t sub_10006CEE8()
{
  uint64_t v0;

  swift_unownedRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

id sub_10006CF14()
{
  uint64_t *v0;

  return sub_10006B9C0(v0[2], v0[3], v0[4]);
}

uint64_t sub_10006CF20()
{
  uint64_t v0;

  swift_unownedRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10006CF4C()
{
  uint64_t v0;

  return sub_10006BC64(*(_BYTE **)(v0 + 16), *(_BYTE *)(v0 + 24), *(_BYTE *)(v0 + 25), *(_BYTE *)(v0 + 26), *(uint64_t (**)(_QWORD))(v0 + 32));
}

uint64_t destroy for SettingsSearchDebug(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[1]);
  swift_release(a1[2]);
  return swift_release(a1[3]);
}

uint64_t *initializeWithCopy for SettingsSearchDebug(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  v6 = a2[3];
  a1[2] = v5;
  a1[3] = v6;
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  return a1;
}

uint64_t *assignWithCopy for SettingsSearchDebug(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = a2[3];
  v11 = a1[3];
  a1[3] = v10;
  swift_retain(v10);
  swift_release(v11);
  return a1;
}

_QWORD *assignWithTake for SettingsSearchDebug(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_release(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_release(v4);
  swift_release(a1[2]);
  v5 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  swift_release(v5);
  return a1;
}

ValueMetadata *type metadata accessor for SettingsSearchDebug()
{
  return &type metadata for SettingsSearchDebug;
}

uint64_t sub_10006D0E0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10012A894, 1);
}

uint64_t sub_10006D0F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t OpaqueTypeConformance2;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[16];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v28 = a3;
  v29 = a4;
  v34 = a5;
  v32 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
  v30 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100004FC8(&qword_1001596E0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100004FC8(&qword_1001596E8);
  v31 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100004FC8(&qword_1001596F0);
  v33 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = a1;
  v37 = a2;
  v38 = v28;
  v39 = v29;
  v19 = sub_100004FC8(&qword_1001596F8);
  v20 = sub_100007868(&qword_100159700, &qword_1001596F8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  List<>.init(content:)(sub_10006E1FC, v35, v19, v20);
  v21 = sub_100007868(&qword_100159708, &qword_1001596E0, (uint64_t)&protocol conformance descriptor for List<A, B>);
  View.navigationTitle(_:)(0x686372616553, 0xE600000000000000, 0, _swiftEmptyArrayStorage, v9, v21);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v22 = v30;
  v23 = v32;
  (*(void (**)(char *, _QWORD, uint64_t))(v30 + 104))(v8, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v32);
  v40 = v9;
  v41 = v21;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v40, &opaque type descriptor for <<opaque return type of View.navigationTitle(_:)>>, 1);
  View.navigationBarTitleDisplayMode(_:)(v8, v13, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v8, v23);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v15, v13);
  v40 = v13;
  v41 = OpaqueTypeConformance2;
  v25 = swift_getOpaqueTypeConformance2(&v40, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  View.settingsListAppearance()(v16, v25);
  return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v18, v16);
}

uint64_t sub_10006D3A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  char *v34;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  void (*v42)(char *, uint64_t);
  void (*v43)(char *, uint64_t);
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char v59[16];
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64[16];
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  char v70;
  _QWORD *v71;

  v53 = a5;
  v52 = sub_100004FC8(&qword_100159710);
  v58 = *(_QWORD *)(v52 - 8);
  v9 = __chkstk_darwin(v52);
  v51 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v50 = (char *)&v45 - v11;
  v12 = sub_100004FC8(&qword_100159718);
  v55 = *(_QWORD *)(v12 - 8);
  v56 = v12;
  v13 = __chkstk_darwin(v12);
  v57 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v16 = (char *)&v45 - v15;
  v46 = (char *)&v45 - v15;
  v49 = sub_100004FC8(&qword_100159720);
  v48 = *(_QWORD *)(v49 - 8);
  v17 = v48;
  v18 = __chkstk_darwin(v49);
  v54 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v21 = (char *)&v45 - v20;
  v65 = a1;
  v66 = a2;
  v22 = a2;
  v67 = a3;
  v68 = a4;
  v23 = a4;
  v69 = xmmword_1001170E0;
  v70 = 0;
  v71 = _swiftEmptyArrayStorage;
  v24 = sub_100004FC8(&qword_100159728);
  v25 = sub_100007868(&qword_100159730, &qword_100159728, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v47 = v21;
  Section<>.init(header:content:)(&v69, sub_10006E208, v64, &type metadata for Text, v24, &protocol witness table for Text, v25);
  v60 = a1;
  v61 = v22;
  v62 = a3;
  v63 = v23;
  *(_QWORD *)&v69 = 0xD000000000000010;
  *((_QWORD *)&v69 + 1) = 0x8000000100123060;
  v70 = 0;
  v71 = _swiftEmptyArrayStorage;
  v26 = sub_100004FC8(&qword_100159738);
  v27 = sub_100007868(&qword_100159740, &qword_100159738, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  Section<>.init(header:content:)(&v69, sub_10006E214, v59, &type metadata for Text, v26, &protocol witness table for Text, v27);
  v28 = v50;
  Section<>.init(content:)(nullsub_1, 0, &type metadata for EmptyView, &protocol witness table for EmptyView);
  v29 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
  v30 = v54;
  v31 = v21;
  v32 = v49;
  v29(v54, v31, v49);
  v33 = *(void (**)(char *, char *, uint64_t))(v55 + 16);
  v34 = v57;
  v33(v57, v16, v56);
  v35 = *(void (**)(char *, char *, uint64_t))(v58 + 16);
  v36 = v51;
  v37 = v52;
  v35(v51, v28, v52);
  v38 = v53;
  v29(v53, v30, v32);
  v39 = sub_100004FC8(&qword_100159748);
  v40 = v56;
  v33(&v38[*(int *)(v39 + 48)], v34, v56);
  v35(&v38[*(int *)(v39 + 64)], v36, v37);
  v41 = *(void (**)(char *, uint64_t))(v58 + 8);
  v41(v28, v37);
  v42 = *(void (**)(char *, uint64_t))(v55 + 8);
  v42(v46, v40);
  v43 = *(void (**)(char *, uint64_t))(v48 + 8);
  v43(v47, v32);
  v41(v36, v37);
  v42(v57, v40);
  return ((uint64_t (*)(char *, uint64_t))v43)(v54, v32);
}

uint64_t sub_10006D7B4@<X0>(uint64_t a1@<X3>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  char *v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  void (*v24)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _QWORD v29[2];
  unsigned __int8 v30;

  v27 = a1;
  v28 = a2;
  v2 = sub_100004FC8(&qword_100159750);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v26 - v7;
  v9 = sub_100004FC8(&qword_100159758);
  v26 = *(_QWORD *)(v9 - 8);
  v10 = v26;
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v26 - v14;
  v16 = sub_100004FC8(&qword_1001579E0);
  v17 = sub_100018B44();
  LabeledContent<>.init(content:label:)(sub_10006D9DC, 0, sub_10006D9F8, 0, &type metadata for Text, v16, &protocol witness table for Text, v17);
  AppStorage.projectedValue.getter(v29, v27, &type metadata for Bool);
  Toggle.init(isOn:label:)(v29[0], v29[1], v30, sub_10006DA18, 0, &type metadata for Text, &protocol witness table for Text);
  v18 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v18(v13, v15, v9);
  v19 = v3;
  v20 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  v20(v6, v8, v2);
  v21 = v28;
  v18(v28, v13, v9);
  v22 = sub_100004FC8(&qword_100159770);
  v20(&v21[*(int *)(v22 + 48)], v6, v2);
  v23 = *(void (**)(char *, uint64_t))(v19 + 8);
  v23(v8, v2);
  v24 = *(void (**)(char *, uint64_t))(v26 + 8);
  v24(v15, v9);
  v23(v6, v2);
  return ((uint64_t (*)(char *, uint64_t))v24)(v13, v9);
}

uint64_t sub_10006D9DC@<X0>(uint64_t a1@<X8>)
{
  return sub_10006DE28(a1);
}

double sub_10006D9F8@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 5.99244987e175;
  *(_OWORD *)a1 = xmmword_1001170F0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = &_swiftEmptyArrayStorage;
  return result;
}

void sub_10006DA18(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0xD00000000000001ALL;
  *(_QWORD *)(a1 + 8) = 0x80000001001230A0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = &_swiftEmptyArrayStorage;
}

uint64_t sub_10006DA48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  int *v40;
  void (*v41)(char *, uint64_t);
  void (*v42)(char *, uint64_t);
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 v61;

  v52 = a2;
  v53 = a3;
  v56 = a4;
  v5 = sub_100004FC8(&qword_100159750);
  v57 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v55 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v54 = (char *)&v44 - v9;
  v10 = __chkstk_darwin(v8);
  v58 = (char *)&v44 - v11;
  v12 = __chkstk_darwin(v10);
  v51 = (char *)&v44 - v13;
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v44 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v44 - v17;
  v19 = sub_100004FC8(&qword_100159758);
  v49 = *(_QWORD *)(v19 - 8);
  v20 = v49;
  v50 = v19;
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v44 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v25 = (char *)&v44 - v24;
  v26 = sub_100004FC8(&qword_1001579E0);
  v27 = sub_100018B44();
  v48 = v25;
  LabeledContent<>.init(content:label:)(sub_10006DE0C, 0, sub_10006E2DC, 0, &type metadata for Text, v26, &protocol witness table for Text, v27);
  AppStorage.projectedValue.getter(&v59, a1, &type metadata for Bool);
  v28 = v18;
  v46 = v18;
  Toggle.init(isOn:label:)(v59, v60, v61, sub_10006E2E0, 0, &type metadata for Text, &protocol witness table for Text);
  AppStorage.projectedValue.getter(&v59, v52, &type metadata for Bool);
  v45 = v16;
  Toggle.init(isOn:label:)(v59, v60, v61, sub_10006E1A0, 0, &type metadata for Text, &protocol witness table for Text);
  AppStorage.projectedValue.getter(&v59, v53, &type metadata for Bool);
  v29 = v51;
  Toggle.init(isOn:label:)(v59, v60, v61, sub_10006E1D0, 0, &type metadata for Text, &protocol witness table for Text);
  v30 = *(void (**)(char *, char *, uint64_t))(v20 + 16);
  v31 = v23;
  v47 = v23;
  v32 = v25;
  v33 = v50;
  v30(v23, v32, v50);
  v34 = v58;
  v35 = *(void (**)(char *, char *, uint64_t))(v57 + 16);
  v35(v58, v28, v5);
  v36 = v54;
  v35(v54, v16, v5);
  v37 = v55;
  v38 = v29;
  v35(v55, v29, v5);
  v39 = v56;
  v30(v56, v31, v33);
  v40 = (int *)sub_100004FC8(&qword_100159760);
  v35(&v39[v40[12]], v34, v5);
  v35(&v39[v40[16]], v36, v5);
  v35(&v39[v40[20]], v37, v5);
  v41 = *(void (**)(char *, uint64_t))(v57 + 8);
  v41(v38, v5);
  v41(v45, v5);
  v41(v46, v5);
  v42 = *(void (**)(char *, uint64_t))(v49 + 8);
  v42(v48, v33);
  v41(v37, v5);
  v41(v36, v5);
  v41(v58, v5);
  return ((uint64_t (*)(char *, uint64_t))v42)(v47, v33);
}

uint64_t sub_10006DE0C@<X0>(uint64_t a1@<X8>)
{
  return sub_10006DE28(a1);
}

uint64_t sub_10006DE28@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  NSString v15;
  id v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t result;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  char v37;
  __int128 v38;
  __int128 v39;
  char v40;

  *(_QWORD *)&v34 = type metadata accessor for Date.FormatStyle.TimeStyle(0);
  *(_QWORD *)&v33 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v3 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Date.FormatStyle.DateStyle(0);
  v31 = *(_QWORD *)(v4 - 8);
  v32 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004FC8(&qword_100159768);
  __chkstk_darwin(v7);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v15 = String._bridgeToObjectiveC()();
  v16 = objc_msgSend(v14, "objectForKey:", v15);

  if (v16)
  {
    _bridgeAnyObjectToAny(_:)(&v35, v16);
    swift_unknownObjectRelease(v16);
  }
  else
  {
    v35 = 0u;
    v36 = 0u;
  }
  sub_10000BFAC((uint64_t)&v35, (uint64_t)&v38);
  if (!*((_QWORD *)&v39 + 1))
  {
    sub_10000BA50((uint64_t)&v38, &qword_10015BA90);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
    goto LABEL_8;
  }
  v17 = swift_dynamicCast(v9, &v38, (char *)&type metadata for Any + 8, v10, 6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v9, v17 ^ 1u, 1, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
LABEL_8:
    sub_10000BA50((uint64_t)v9, &qword_100159768);
    v35 = xmmword_100117100;
    *(_QWORD *)&v36 = 0;
    *((_QWORD *)&v36 + 1) = _swiftEmptyArrayStorage;
    v37 = 1;
    result = _ConditionalContent<>.init(storage:)(&v35, &type metadata for Text, &type metadata for Text, &protocol witness table for Text, &protocol witness table for Text);
    v29 = v38;
    v30 = v39;
    v27 = v40;
    goto LABEL_9;
  }
  v18 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
  v19 = static Date.FormatStyle.DateStyle.abbreviated.getter(v18);
  static Date.FormatStyle.TimeStyle.shortened.getter(v19);
  v20 = Date.formatted(date:time:)(v6, v3);
  v22 = v21;
  (*(void (**)(char *, _QWORD))(v33 + 8))(v3, v34);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v6, v32);
  *(_QWORD *)&v38 = v20;
  *((_QWORD *)&v38 + 1) = v22;
  v23 = sub_100008A5C();
  *(_QWORD *)&v35 = Text.init<A>(_:)(&v38, &type metadata for String, v23);
  *((_QWORD *)&v35 + 1) = v24;
  *(_QWORD *)&v36 = v25 & 1;
  *((_QWORD *)&v36 + 1) = v26;
  v37 = 0;
  _ConditionalContent<>.init(storage:)(&v35, &type metadata for Text, &type metadata for Text, &protocol witness table for Text, &protocol witness table for Text);
  v33 = v39;
  v34 = v38;
  v27 = v40;
  result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v30 = v33;
  v29 = v34;
LABEL_9:
  *(_OWORD *)a1 = v29;
  *(_OWORD *)(a1 + 16) = v30;
  *(_BYTE *)(a1 + 32) = v27;
  return result;
}

void sub_10006E1A0(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0xD000000000000016;
  *(_QWORD *)(a1 + 8) = 0x8000000100123080;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = &_swiftEmptyArrayStorage;
}

double sub_10006E1D0@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 1.81653197e223;
  *(_OWORD *)a1 = xmmword_100117110;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = &_swiftEmptyArrayStorage;
  return result;
}

uint64_t sub_10006E1F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_10006D0F0(*v1, v1[1], v1[2], v1[3], a1);
}

uint64_t sub_10006E1FC@<X0>(char *a1@<X8>)
{
  uint64_t *v1;

  return sub_10006D3A8(v1[2], v1[3], v1[4], v1[5], a1);
}

uint64_t sub_10006E208@<X0>(char *a1@<X8>)
{
  uint64_t v1;

  return sub_10006D7B4(*(_QWORD *)(v1 + 40), a1);
}

uint64_t sub_10006E214@<X0>(char *a1@<X8>)
{
  uint64_t *v1;

  return sub_10006DA48(v1[2], v1[3], v1[4], a1);
}

uint64_t sub_10006E220()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t OpaqueTypeConformance2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v0 = sub_100005430(&qword_1001596F0);
  v1 = sub_100005430(&qword_1001596E8);
  v5 = sub_100005430(&qword_1001596E0);
  v6 = sub_100007868(&qword_100159708, &qword_1001596E0, (uint64_t)&protocol conformance descriptor for List<A, B>);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.navigationTitle(_:)>>, 1);
  v5 = v1;
  v6 = OpaqueTypeConformance2;
  v3 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v5 = v0;
  v6 = v3;
  return swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.settingsListAppearance()>>, 1);
}

id sub_10006E2E4()
{
  uint64_t v0;

  v0 = type metadata accessor for NavigationSplitViewProxyViewController();
  return objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v0)), "init");
}

uint64_t sub_10006E310(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10006E770();
  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_10006E360(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10006E770();
  return static UIViewControllerRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_10006E3B0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006E770();
  UIViewControllerRepresentable.body.getter(a1, v2);
  __break(1u);
}

void sub_10006E3D4()
{
  void *v0;
  uint64_t v1;
  id v2;
  void *v3;

  v1 = OBJC_IVAR____TtC11SettingsAppP33_D5FB2F106141AAB1D580745497402FE038NavigationSplitViewProxyViewController____lazy_storage___oneTimeConfiguration;
  if (*((_BYTE *)v0
       + OBJC_IVAR____TtC11SettingsAppP33_D5FB2F106141AAB1D580745497402FE038NavigationSplitViewProxyViewController____lazy_storage___oneTimeConfiguration) == 1)
  {
    v2 = objc_msgSend(v0, "navigationController");
    if (v2)
    {
      v3 = v2;
      objc_msgSend(v2, "_scrollToRevealNavigationBarPart:animated:", 4, 1);

    }
    *((_BYTE *)v0 + v1) = 0;
  }
}

id sub_10006E6C4()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NavigationSplitViewProxyViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for NavigationSplitViewProxyViewController()
{
  return objc_opt_self(_TtC11SettingsAppP33_D5FB2F106141AAB1D580745497402FE038NavigationSplitViewProxyViewController);
}

ValueMetadata *type metadata accessor for NavigationSplitViewProxyToWorkaroundMissingSPI()
{
  return &type metadata for NavigationSplitViewProxyToWorkaroundMissingSPI;
}

unint64_t sub_10006E72C()
{
  unint64_t result;

  result = qword_1001597A8;
  if (!qword_1001597A8)
  {
    result = swift_getWitnessTable(&unk_1001171F0, &type metadata for NavigationSplitViewProxyToWorkaroundMissingSPI);
    atomic_store(result, (unint64_t *)&qword_1001597A8);
  }
  return result;
}

unint64_t sub_10006E770()
{
  unint64_t result;

  result = qword_1001597B0;
  if (!qword_1001597B0)
  {
    result = swift_getWitnessTable(&unk_100117240, &type metadata for NavigationSplitViewProxyToWorkaroundMissingSPI);
    atomic_store(result, (unint64_t *)&qword_1001597B0);
  }
  return result;
}

_QWORD *sub_10006E7B4(void (*a1)(__int128 *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  void (*v26)(__int128 *__return_ptr, uint64_t);

  v26 = a1;
  v4 = *(_QWORD *)(a3 + 16);
  if (!v4)
    return _swiftEmptyArrayStorage;
  v5 = a3 + 32;
  swift_bridgeObjectRetain(a3);
  v6 = _swiftEmptyArrayStorage;
  do
  {
    v26(&v19, v5);
    if (v3)
    {
      swift_bridgeObjectRelease(v6);
      swift_bridgeObjectRelease(a3);
      return v6;
    }
    v8 = v25;
    if (v25)
    {
      v9 = v20;
      v17 = v22;
      v18 = v21;
      v16 = v23;
      v14 = v19;
      v15 = v24;
      if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
        v6 = sub_100052B58(0, v6[2] + 1, 1, v6);
      v11 = v6[2];
      v10 = v6[3];
      if (v11 >= v10 >> 1)
        v6 = sub_100052B58((_QWORD *)(v10 > 1), v11 + 1, 1, v6);
      v6[2] = v11 + 1;
      v7 = &v6[12 * v11];
      *((_OWORD *)v7 + 2) = v14;
      *((_BYTE *)v7 + 48) = v9;
      *(_OWORD *)(v7 + 7) = v18;
      *(_OWORD *)(v7 + 9) = v17;
      *(_OWORD *)(v7 + 11) = v16;
      *(_OWORD *)(v7 + 13) = v15;
      v7[15] = v8;
    }
    v5 += 40;
    --v4;
  }
  while (v4);
  swift_bridgeObjectRelease(a3);
  return v6;
}

_QWORD *sub_10006E940(void (*a1)(_QWORD), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  void (*v21)(_QWORD);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = sub_100004FC8((uint64_t *)&unk_100156F00);
  __chkstk_darwin(v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for PrimarySettingsListItemModel(0);
  v9 = *(_QWORD *)(v24 - 8);
  v10 = __chkstk_darwin(v24);
  v23 = (uint64_t)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v22 = (uint64_t)&v20 - v12;
  v13 = *(_QWORD *)(a3 + 16);
  if (!v13)
    return _swiftEmptyArrayStorage;
  v14 = a3 + 32;
  v20 = a3;
  swift_bridgeObjectRetain(a3);
  v15 = _swiftEmptyArrayStorage;
  v21 = a1;
  do
  {
    a1(v14);
    if (v3)
    {
      swift_bridgeObjectRelease(v15);
      swift_bridgeObjectRelease(v20);
      return v15;
    }
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v24) == 1)
    {
      sub_100020148((uint64_t)v8);
    }
    else
    {
      v16 = v22;
      sub_10006F788((uint64_t)v8, v22);
      sub_10006F788(v16, v23);
      if ((swift_isUniquelyReferenced_nonNull_native(v15) & 1) == 0)
        v15 = (_QWORD *)sub_100052720(0, v15[2] + 1, 1, (unint64_t)v15);
      v18 = v15[2];
      v17 = v15[3];
      if (v18 >= v17 >> 1)
        v15 = (_QWORD *)sub_100052720(v17 > 1, v18 + 1, 1, (unint64_t)v15);
      v15[2] = v18 + 1;
      sub_10006F788(v23, (uint64_t)v15+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v18);
      a1 = v21;
    }
    v14 += 40;
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease(v20);
  return v15;
}

_QWORD *sub_10006EB68(void (*a1)(_QWORD), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  void (*v21)(_QWORD);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = sub_100004FC8((uint64_t *)&unk_100156F00);
  __chkstk_darwin(v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for PrimarySettingsListItemModel(0);
  v9 = *(_QWORD *)(v24 - 8);
  v10 = __chkstk_darwin(v24);
  v23 = (uint64_t)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v22 = (uint64_t)&v20 - v12;
  v13 = *(_QWORD *)(a3 + 16);
  if (!v13)
    return _swiftEmptyArrayStorage;
  v14 = a3 + 32;
  v20 = a3;
  swift_bridgeObjectRetain(a3);
  v15 = _swiftEmptyArrayStorage;
  v21 = a1;
  do
  {
    a1(v14);
    if (v3)
    {
      swift_bridgeObjectRelease(v15);
      swift_bridgeObjectRelease(v20);
      return v15;
    }
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v24) == 1)
    {
      sub_100020148((uint64_t)v8);
    }
    else
    {
      v16 = v22;
      sub_10006F788((uint64_t)v8, v22);
      sub_10006F788(v16, v23);
      if ((swift_isUniquelyReferenced_nonNull_native(v15) & 1) == 0)
        v15 = (_QWORD *)sub_100052720(0, v15[2] + 1, 1, (unint64_t)v15);
      v18 = v15[2];
      v17 = v15[3];
      if (v18 >= v17 >> 1)
        v15 = (_QWORD *)sub_100052720(v17 > 1, v18 + 1, 1, (unint64_t)v15);
      v15[2] = v18 + 1;
      sub_10006F788(v23, (uint64_t)v15+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v18);
      a1 = v21;
    }
    v14 += 80;
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease(v20);
  return v15;
}

_QWORD *sub_10006ED90(void (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t *);
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45[8];
  char v46;
  uint64_t v47;

  v4 = v3;
  v38 = a1;
  v6 = sub_100004FC8((uint64_t *)&unk_100156F00);
  __chkstk_darwin(v6);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a3;
  v37 = type metadata accessor for PrimarySettingsListItemModel(0);
  v39 = *(_QWORD *)(v37 - 8);
  v10 = __chkstk_darwin(v37);
  v36 = (uint64_t)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v34 = (uint64_t)&v33 - v12;
  v13 = *(_QWORD *)(a3 + 16);
  if (!v13)
    return _swiftEmptyArrayStorage;
  v35 = v8;
  v47 = v4;
  swift_bridgeObjectRetain(v9);
  v33 = v9;
  v14 = v9 + 48;
  v40 = _swiftEmptyArrayStorage;
  do
  {
    v41 = v14;
    v42 = v13;
    v15 = *(_QWORD *)(v14 - 8);
    v16 = *(_QWORD *)v14;
    v17 = *(_QWORD *)(v14 + 8);
    v19 = *(_QWORD *)(v14 + 16);
    v18 = *(_QWORD *)(v14 + 24);
    v20 = *(_QWORD *)(v14 + 32);
    v21 = *(_QWORD *)(v14 + 40);
    v22 = *(_BYTE *)(v14 + 48);
    v45[0] = *(_QWORD *)(v14 - 16);
    v45[1] = v15;
    v45[2] = v16;
    v45[3] = v17;
    v45[4] = v19;
    v45[5] = v18;
    v45[6] = v20;
    v45[7] = v21;
    v46 = v22;
    v23 = v45[0];
    v24 = v15;
    v43 = v21;
    v44 = v20;
    sub_100043CEC(v45[0], v15, v16, v17, v19, v18, v20, v21, v22);
    v25 = (uint64_t)v35;
    v26 = v47;
    v38(v45);
    v47 = v26;
    if (v26)
    {
      sub_100043D7C(v23, v24, v16, v17, v19, v18, v44, v43, v22);
      swift_bridgeObjectRelease(v40);
      swift_bridgeObjectRelease(v33);
      return v40;
    }
    sub_100043D7C(v23, v24, v16, v17, v19, v18, v44, v43, v22);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v25, 1, v37) == 1)
    {
      sub_100020148(v25);
    }
    else
    {
      v27 = v34;
      sub_10006F788(v25, v34);
      sub_10006F788(v27, v36);
      if ((swift_isUniquelyReferenced_nonNull_native(v40) & 1) == 0)
        v40 = (_QWORD *)sub_100052720(0, v40[2] + 1, 1, (unint64_t)v40);
      v29 = v40[2];
      v28 = v40[3];
      if (v29 >= v28 >> 1)
        v40 = (_QWORD *)sub_100052720(v28 > 1, v29 + 1, 1, (unint64_t)v40);
      v31 = v39;
      v30 = v40;
      v40[2] = v29 + 1;
      sub_10006F788(v36, (uint64_t)v30+ ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80))+ *(_QWORD *)(v31 + 72) * v29);
    }
    v14 = v41 + 72;
    v13 = v42 - 1;
  }
  while (v42 != 1);
  swift_bridgeObjectRelease(v33);
  return v40;
}

uint64_t sub_10006F08C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  char v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  NSObject *v26;
  uint64_t v27;
  os_signpost_type_t v28;
  char *v29;
  uint64_t v30;
  os_signpost_id_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  os_signpost_id_t v37;
  uint64_t v38;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[3];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v45 = a2;
  v47 = a3;
  v48 = type metadata accessor for OSSignpostID(0);
  v46 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OSSignposter(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100156CD8 != -1)
    swift_once(&qword_100156CD8, sub_10008BEEC);
  v10 = sub_100007808(v6, (uint64_t)qword_10015D340);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
  v11 = sub_10003CE00(a1, (uint64_t)v49);
  static OSSignpostID.exclusive.getter(v11);
  v41 = v5;
  v44 = v6;
  v12 = (uint8_t *)swift_slowAlloc(12, -1);
  v13 = swift_slowAlloc(32, -1);
  v40 = v9;
  v42 = v13;
  v54 = v13;
  *(_DWORD *)v12 = 136315138;
  v43 = v7;
  v14 = v50;
  v15 = v51;
  sub_100007C2C(v49, v50);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v14, v15);
  v18 = (uint64_t)v17;
  LOBYTE(v15) = v19;
  v20 = (_QWORD *)a1;
  v21 = sub_1000B9650(v16, v17, v19);
  v23 = v22;
  sub_10000BAE4(v16, v18, v15);
  v52 = sub_1000DA1F0(v21, v23, &v54);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v12 + 4, v12 + 12);
  swift_bridgeObjectRelease(v23);
  v24 = sub_100005474(v49);
  v25 = v40;
  v26 = OSSignposter.logHandle.getter(v24);
  v27 = static os_signpost_type_t.begin.getter();
  v28 = v27;
  v29 = v41;
  v31 = OSSignpostID.rawValue.getter(v27, v30);
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v26, v28, v31, "PrimarySettingsList Data Model Item Snapshot", "%s", v12, 0xCu);
  v32 = v20[3];
  v33 = v20[4];
  sub_100007C2C(v20, v32);
  v34 = (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(v33 + 16))(&v52, v45, v32, v33);
  v35 = static os_signpost_type_t.end.getter(v34);
  LOBYTE(v32) = v35;
  v37 = OSSignpostID.rawValue.getter(v35, v36);
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v26, (os_signpost_type_t)v32, v37, "PrimarySettingsList Data Model Item Snapshot", "%s", v12, 0xCu);

  v38 = v42;
  swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v38, -1, -1);
  swift_slowDealloc(v12, -1, -1);
  sub_10006F728((uint64_t)&v52, v47);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v29, v48);
  return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v25, v44);
}

uint64_t sub_10006F3F0()
{
  uint64_t v0;

  sub_10000BAE4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for ComposablePrimarySettingsListSectionProvider()
{
  return objc_opt_self(_TtC11SettingsApp44ComposablePrimarySettingsListSectionProvider);
}

uint64_t sub_10006F440()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  sub_10000BA8C(v1, *(_QWORD *)(*(_QWORD *)v0 + 24), *(_BYTE *)(*(_QWORD *)v0 + 32));
  return v1;
}

uint64_t sub_10006F488@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  void **v5;
  _BYTE v7[96];

  v4 = *v2;
  v5 = (void **)sub_100007C2C(a1, a1[3]);
  sub_10006F4D4(*v5, v4, (uint64_t)v7);
  return sub_10006F728((uint64_t)v7, a2);
}

double sub_10006F4D4@<D0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  id v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  double result;
  _QWORD v24[5];
  _QWORD *v25;
  _QWORD v26[5];

  v26[3] = &type metadata for PrimarySettingsListDataModelGenerationContext;
  v26[4] = &off_100148E38;
  v26[0] = a1;
  v4 = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(v4 + 16))
  {
    v24[2] = v26;
    v6 = a1;
    swift_bridgeObjectRetain(v4);
    v7 = sub_10006E7B4((void (*)(__int128 *__return_ptr, uint64_t))sub_10006F770, (uint64_t)v24, v4);
    swift_bridgeObjectRelease(v4);
    v8 = v7[2];
    if (v8)
    {
      swift_bridgeObjectRetain(v7);
      v9 = _swiftEmptyArrayStorage;
      v10 = 15;
      do
      {
        v11 = v7[v10];
        swift_bridgeObjectRetain(v11);
        if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
          v9 = sub_100052A4C(0, v9[2] + 1, 1, v9);
        v13 = v9[2];
        v12 = v9[3];
        if (v13 >= v12 >> 1)
          v9 = sub_100052A4C((_QWORD *)(v12 > 1), v13 + 1, 1, v9);
        v9[2] = v13 + 1;
        v9[v13 + 4] = v11;
        v10 += 12;
        --v8;
      }
      while (v8);
      swift_bridgeObjectRelease(v7);
    }
    else
    {
      v9 = _swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease(v7);
    v19 = v9[2];
    if (v19)
    {
      swift_bridgeObjectRetain(v9);
      v20 = 0;
      v18 = _swiftEmptyArrayStorage;
      do
      {
        v21 = v9[v20++ + 4];
        v25 = v18;
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v18);
        sub_1000F20B8(v21);
        swift_bridgeObjectRelease(v18);
        v18 = v25;
      }
      while (v19 != v20);
      swift_bridgeObjectRelease(v9);
    }
    else
    {
      v18 = _swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease(v9);
    v15 = *(_QWORD *)(a2 + 16);
    v16 = *(_QWORD *)(a2 + 24);
    v22 = *(_BYTE *)(a2 + 32);
    v17 = v22;
    sub_10000BA8C(v15, v16, v22);
  }
  else
  {
    v14 = a1;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
  }
  sub_100005474(v26);
  *(_QWORD *)a3 = v15;
  *(_QWORD *)(a3 + 8) = v16;
  *(_QWORD *)(a3 + 16) = v17;
  result = 0.0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_QWORD *)(a3 + 88) = v18;
  return result;
}

uint64_t sub_10006F728(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004FC8((uint64_t *)&unk_10015C9B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006F770@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10006F08C(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_10006F788(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PrimarySettingsListItemModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006F7CC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  id v35;
  __int128 v36;
  char *v37;
  uint64_t v38;
  char *v39;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = *a2;
    v6 = *((_BYTE *)a2 + 8);
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = v6;
    v7 = *(int *)(a3 + 20);
    v8 = (_QWORD *)(a1 + v7);
    v9 = (uint64_t *)((char *)a2 + v7);
    v10 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    swift_retain(v5);
    switch(swift_getEnumCaseMultiPayload(v9, v10))
    {
      case 0u:
        v11 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v8, v9, v11);
        v12 = v8;
        v13 = v10;
        v14 = 0;
        goto LABEL_14;
      case 1u:
        v17 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v8, v9, v17);
        v12 = v8;
        v13 = v10;
        v14 = 1;
        goto LABEL_14;
      case 2u:
        v18 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v8, v9, v18);
        v19 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v20 = (_QWORD *)((char *)v8 + v19);
        v21 = (_QWORD *)((char *)v9 + v19);
        v22 = v21[1];
        *v20 = *v21;
        v20[1] = v22;
        swift_bridgeObjectRetain(v22);
        v12 = v8;
        v13 = v10;
        v14 = 2;
        goto LABEL_14;
      case 3u:
        v23 = v9[1];
        *v8 = *v9;
        v8[1] = v23;
        v24 = v9[3];
        v8[2] = v9[2];
        v8[3] = v24;
        v25 = v9[5];
        v8[4] = v9[4];
        v8[5] = v25;
        v26 = v9[7];
        v8[6] = v9[6];
        v8[7] = v26;
        swift_bridgeObjectRetain(v23);
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v25);
        swift_bridgeObjectRetain(v26);
        v12 = v8;
        v13 = v10;
        v14 = 3;
        goto LABEL_14;
      case 4u:
        v27 = v9[1];
        *v8 = *v9;
        v8[1] = v27;
        v28 = v9[3];
        v8[2] = v9[2];
        v8[3] = v28;
        v29 = v9[5];
        v8[4] = v9[4];
        v8[5] = v29;
        v8[6] = v9[6];
        swift_bridgeObjectRetain(v27);
        swift_bridgeObjectRetain(v28);
        swift_bridgeObjectRetain(v29);
        v12 = v8;
        v13 = v10;
        v14 = 4;
        goto LABEL_14;
      case 5u:
        v30 = v9[1];
        *v8 = *v9;
        v8[1] = v30;
        v31 = v9[3];
        v8[2] = v9[2];
        v8[3] = v31;
        v33 = (void *)v9[4];
        v32 = v9[5];
        v8[4] = v33;
        v8[5] = v32;
        v34 = v9[9];
        swift_bridgeObjectRetain(v30);
        swift_bridgeObjectRetain(v31);
        v35 = v33;
        swift_bridgeObjectRetain(v32);
        if (v34)
        {
          v8[9] = v34;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v34 - 8))((uint64_t)(v8 + 6), (uint64_t)(v9 + 6), v34);
        }
        else
        {
          v36 = *((_OWORD *)v9 + 4);
          *((_OWORD *)v8 + 3) = *((_OWORD *)v9 + 3);
          *((_OWORD *)v8 + 4) = v36;
        }
        v12 = v8;
        v13 = v10;
        v14 = 5;
LABEL_14:
        swift_storeEnumTagMultiPayload(v12, v13, v14);
        break;
      default:
        memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
        break;
    }
    v37 = (char *)v9 + *(int *)(type metadata accessor for PrimarySettingsListItemModel(0) + 20);
    v38 = type metadata accessor for PrimarySettingsListItemViewType(0);
    v39 = (char *)&loc_10006FA98 + 4 * byte_100117316[swift_getEnumCaseMultiPayload(v37, v38)];
    __asm { BR              X10 }
  }
  v15 = *a2;
  *(_QWORD *)a1 = *a2;
  v16 = v15 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain(v15);
  return v16;
}

void sub_1000718AC(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int *v54;
  char *v55;
  char *v56;
  char *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;

  swift_release(*a1);
  v4 = (char *)a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v4, v5))
  {
    case 0u:
    case 1u:
      v6 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
      break;
    case 2u:
      v7 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v4, v7);
      v8 = sub_100004FC8(&qword_10015C420);
      swift_bridgeObjectRelease(*(_QWORD *)&v4[*(int *)(v8 + 48) + 8]);
      break;
    case 3u:
      swift_bridgeObjectRelease(*((_QWORD *)v4 + 1));
      swift_bridgeObjectRelease(*((_QWORD *)v4 + 3));
      swift_bridgeObjectRelease(*((_QWORD *)v4 + 5));
      swift_bridgeObjectRelease(*((_QWORD *)v4 + 7));
      break;
    case 4u:
      swift_bridgeObjectRelease(*((_QWORD *)v4 + 1));
      swift_bridgeObjectRelease(*((_QWORD *)v4 + 3));
      swift_bridgeObjectRelease(*((_QWORD *)v4 + 5));
      break;
    case 5u:
      swift_bridgeObjectRelease(*((_QWORD *)v4 + 1));
      swift_bridgeObjectRelease(*((_QWORD *)v4 + 3));

      swift_bridgeObjectRelease(*((_QWORD *)v4 + 5));
      if (*((_QWORD *)v4 + 9))
        sub_100005474((_QWORD *)v4 + 6);
      break;
    default:
      break;
  }
  v9 = &v4[*(int *)(type metadata accessor for PrimarySettingsListItemModel(0) + 20)];
  v10 = type metadata accessor for PrimarySettingsListItemViewType(0);
  switch(swift_getEnumCaseMultiPayload(v9, v10))
  {
    case 0u:
      switch(swift_getEnumCaseMultiPayload(v9, v5))
      {
        case 0u:
        case 1u:
          v11 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v9, v11);
          break;
        case 2u:
          v21 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v9, v21);
          v22 = sub_100004FC8(&qword_10015C420);
          swift_bridgeObjectRelease(*(_QWORD *)&v9[*(int *)(v22 + 48) + 8]);
          break;
        case 3u:
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 1));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 3));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 5));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 7));
          break;
        case 4u:
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 1));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 3));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 5));
          break;
        case 5u:
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 1));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 3));

          swift_bridgeObjectRelease(*((_QWORD *)v9 + 5));
          if (*((_QWORD *)v9 + 9))
            sub_100005474((_QWORD *)v9 + 6);
          break;
        default:
          break;
      }
      v23 = &v9[*(int *)(type metadata accessor for PrimarySettingsListAppleAccountLinkModel(0) + 20)];
      v24 = *((_QWORD *)v23 + 1);
      if (v24)
      {
        swift_bridgeObjectRelease(v24);
        swift_bridgeObjectRelease(*((_QWORD *)v23 + 3));

      }
      return;
    case 1u:
      switch(swift_getEnumCaseMultiPayload(v9, v5))
      {
        case 0u:
        case 1u:
          v12 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v9, v12);
          break;
        case 2u:
          v25 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v9, v25);
          v26 = sub_100004FC8(&qword_10015C420);
          swift_bridgeObjectRelease(*(_QWORD *)&v9[*(int *)(v26 + 48) + 8]);
          break;
        case 3u:
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 1));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 3));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 5));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 7));
          break;
        case 4u:
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 1));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 3));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 5));
          break;
        case 5u:
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 1));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 3));

          swift_bridgeObjectRelease(*((_QWORD *)v9 + 5));
          if (*((_QWORD *)v9 + 9))
            sub_100005474((_QWORD *)v9 + 6);
          break;
        default:
          break;
      }
      v27 = &v9[*(int *)(type metadata accessor for PrimarySettingsListSecondaryAppleAccountLinkModel(0) + 20)];
      swift_bridgeObjectRelease(*((_QWORD *)v27 + 1));
      swift_bridgeObjectRelease(*((_QWORD *)v27 + 3));
      swift_bridgeObjectRelease(*((_QWORD *)v27 + 5));
      v28 = *((_QWORD *)v27 + 7);
      goto LABEL_67;
    case 2u:
      switch(swift_getEnumCaseMultiPayload(v9, v5))
      {
        case 0u:
        case 1u:
          v13 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v9, v13);
          break;
        case 2u:
          v29 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v29 - 8) + 8))(v9, v29);
          v30 = sub_100004FC8(&qword_10015C420);
          swift_bridgeObjectRelease(*(_QWORD *)&v9[*(int *)(v30 + 48) + 8]);
          break;
        case 3u:
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 1));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 3));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 5));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 7));
          break;
        case 4u:
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 1));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 3));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 5));
          break;
        case 5u:
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 1));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 3));

          swift_bridgeObjectRelease(*((_QWORD *)v9 + 5));
          if (*((_QWORD *)v9 + 9))
            sub_100005474((_QWORD *)v9 + 6);
          break;
        default:
          break;
      }
      v31 = type metadata accessor for PrimarySettingsListFamilyLinkModel(0);
      v32 = &v9[*(int *)(v31 + 20)];
      v33 = type metadata accessor for FamilyRowStatus(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v32, v33);
      v28 = *(_QWORD *)&v9[*(int *)(v31 + 24) + 8];
      goto LABEL_67;
    case 3u:
      switch(swift_getEnumCaseMultiPayload(v9, v5))
      {
        case 0u:
        case 1u:
          v14 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v9, v14);
          break;
        case 2u:
          v34 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v34 - 8) + 8))(v9, v34);
          v35 = sub_100004FC8(&qword_10015C420);
          swift_bridgeObjectRelease(*(_QWORD *)&v9[*(int *)(v35 + 48) + 8]);
          break;
        case 3u:
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 1));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 3));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 5));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 7));
          break;
        case 4u:
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 1));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 3));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 5));
          break;
        case 5u:
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 1));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 3));

          swift_bridgeObjectRelease(*((_QWORD *)v9 + 5));
          if (*((_QWORD *)v9 + 9))
            sub_100005474((_QWORD *)v9 + 6);
          break;
        default:
          break;
      }
      v36 = type metadata accessor for PrimarySettingsListToggleModel(0);
      v37 = &v9[*(int *)(v36 + 24)];
      sub_100007618(*(_QWORD *)v37, *((_QWORD *)v37 + 1), v37[16]);
      swift_bridgeObjectRelease(*((_QWORD *)v37 + 3));
      swift_release(*(_QWORD *)&v9[*(int *)(v36 + 32) + 8]);
      return;
    case 4u:
      switch(swift_getEnumCaseMultiPayload(v9, v5))
      {
        case 0u:
        case 1u:
          v15 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v9, v15);
          break;
        case 2u:
          v38 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v38 - 8) + 8))(v9, v38);
          v39 = sub_100004FC8(&qword_10015C420);
          swift_bridgeObjectRelease(*(_QWORD *)&v9[*(int *)(v39 + 48) + 8]);
          break;
        case 3u:
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 1));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 3));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 5));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 7));
          break;
        case 4u:
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 1));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 3));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 5));
          break;
        case 5u:
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 1));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 3));

          swift_bridgeObjectRelease(*((_QWORD *)v9 + 5));
          if (*((_QWORD *)v9 + 9))
            sub_100005474((_QWORD *)v9 + 6);
          break;
        default:
          break;
      }
      v40 = type metadata accessor for PrimarySettingsListImagelessLinkModel(0);
      goto LABEL_66;
    case 5u:
      switch(swift_getEnumCaseMultiPayload(v9, v5))
      {
        case 0u:
        case 1u:
          v16 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v9, v16);
          break;
        case 2u:
          v41 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v41 - 8) + 8))(v9, v41);
          v42 = sub_100004FC8(&qword_10015C420);
          swift_bridgeObjectRelease(*(_QWORD *)&v9[*(int *)(v42 + 48) + 8]);
          break;
        case 3u:
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 1));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 3));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 5));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 7));
          break;
        case 4u:
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 1));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 3));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 5));
          break;
        case 5u:
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 1));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 3));

          swift_bridgeObjectRelease(*((_QWORD *)v9 + 5));
          if (*((_QWORD *)v9 + 9))
            sub_100005474((_QWORD *)v9 + 6);
          break;
        default:
          break;
      }
      v40 = type metadata accessor for PrimarySettingsListBadgedImagelessLinkModel(0);
LABEL_66:
      v43 = &v9[*(int *)(v40 + 24)];
      sub_100007618(*(_QWORD *)v43, *((_QWORD *)v43 + 1), v43[16]);
      v28 = *((_QWORD *)v43 + 3);
LABEL_67:
      swift_bridgeObjectRelease(v28);
      return;
    case 6u:
      switch(swift_getEnumCaseMultiPayload(v9, v5))
      {
        case 0u:
        case 1u:
          v17 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v9, v17);
          break;
        case 2u:
          v44 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v44 - 8) + 8))(v9, v44);
          v45 = sub_100004FC8(&qword_10015C420);
          swift_bridgeObjectRelease(*(_QWORD *)&v9[*(int *)(v45 + 48) + 8]);
          break;
        case 3u:
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 1));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 3));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 5));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 7));
          break;
        case 4u:
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 1));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 3));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 5));
          break;
        case 5u:
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 1));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 3));

          swift_bridgeObjectRelease(*((_QWORD *)v9 + 5));
          if (*((_QWORD *)v9 + 9))
            sub_100005474((_QWORD *)v9 + 6);
          break;
        default:
          break;
      }
      v46 = type metadata accessor for PrimarySettingsListLinkModel(0);
      goto LABEL_80;
    case 7u:
      switch(swift_getEnumCaseMultiPayload(v9, v5))
      {
        case 0u:
        case 1u:
          v18 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v9, v18);
          break;
        case 2u:
          v47 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v47 - 8) + 8))(v9, v47);
          v48 = sub_100004FC8(&qword_10015C420);
          swift_bridgeObjectRelease(*(_QWORD *)&v9[*(int *)(v48 + 48) + 8]);
          break;
        case 3u:
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 1));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 3));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 5));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 7));
          break;
        case 4u:
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 1));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 3));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 5));
          break;
        case 5u:
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 1));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 3));

          swift_bridgeObjectRelease(*((_QWORD *)v9 + 5));
          if (*((_QWORD *)v9 + 9))
            sub_100005474((_QWORD *)v9 + 6);
          break;
        default:
          break;
      }
      v46 = type metadata accessor for PrimarySettingsListBadgedLinkModel(0);
LABEL_80:
      v49 = v46;
      v50 = &v9[*(int *)(v46 + 24)];
      sub_100007618(*(_QWORD *)v50, *((_QWORD *)v50 + 1), v50[16]);
      swift_bridgeObjectRelease(*((_QWORD *)v50 + 3));
      v51 = *(int *)(v49 + 28);
      goto LABEL_87;
    case 8u:
      switch(swift_getEnumCaseMultiPayload(v9, v5))
      {
        case 0u:
        case 1u:
          v19 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v9, v19);
          break;
        case 2u:
          v52 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v52 - 8) + 8))(v9, v52);
          v53 = sub_100004FC8(&qword_10015C420);
          swift_bridgeObjectRelease(*(_QWORD *)&v9[*(int *)(v53 + 48) + 8]);
          break;
        case 3u:
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 1));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 3));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 5));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 7));
          break;
        case 4u:
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 1));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 3));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 5));
          break;
        case 5u:
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 1));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 3));

          swift_bridgeObjectRelease(*((_QWORD *)v9 + 5));
          if (*((_QWORD *)v9 + 9))
            sub_100005474((_QWORD *)v9 + 6);
          break;
        default:
          break;
      }
      v54 = (int *)type metadata accessor for PrimarySettingsListValueLinkModel(0);
      v55 = &v9[v54[6]];
      sub_100007618(*(_QWORD *)v55, *((_QWORD *)v55 + 1), v55[16]);
      swift_bridgeObjectRelease(*((_QWORD *)v55 + 3));
      v56 = &v9[v54[7]];
      sub_100007618(*(_QWORD *)v56, *((_QWORD *)v56 + 1), v56[16]);
      swift_bridgeObjectRelease(*((_QWORD *)v56 + 3));
      v51 = v54[8];
LABEL_87:
      v57 = &v9[v51];
      v58 = v57[16];
      if (v58 != 255)
        sub_10000BB54(*(_QWORD *)v57, *((_QWORD *)v57 + 1), v58);
      return;
    case 9u:
      switch(swift_getEnumCaseMultiPayload(v9, v5))
      {
        case 0u:
        case 1u:
          v20 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v9, v20);
          break;
        case 2u:
          v59 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v59 - 8) + 8))(v9, v59);
          v60 = sub_100004FC8(&qword_10015C420);
          swift_bridgeObjectRelease(*(_QWORD *)&v9[*(int *)(v60 + 48) + 8]);
          break;
        case 3u:
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 1));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 3));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 5));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 7));
          break;
        case 4u:
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 1));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 3));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 5));
          break;
        case 5u:
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 1));
          swift_bridgeObjectRelease(*((_QWORD *)v9 + 3));

          swift_bridgeObjectRelease(*((_QWORD *)v9 + 5));
          if (*((_QWORD *)v9 + 9))
            sub_100005474((_QWORD *)v9 + 6);
          break;
        default:
          break;
      }
      v61 = type metadata accessor for PrimarySettingsListFollowUpModel(0);
      v62 = &v9[*(int *)(v61 + 20)];
      v63 = type metadata accessor for PrimarySettingsListFollowUpModel.ViewType(0);
      if (swift_getEnumCaseMultiPayload(v62, v63) != 1)
      {
        sub_100007618(*(_QWORD *)v62, *((_QWORD *)v62 + 1), v62[16]);
        swift_bridgeObjectRelease(*((_QWORD *)v62 + 3));
        sub_100007618(*((_QWORD *)v62 + 4), *((_QWORD *)v62 + 5), v62[48]);
        swift_bridgeObjectRelease(*((_QWORD *)v62 + 7));
        v65 = v62[80];
        if (v65 == 255)
          goto LABEL_108;
        v66 = *((_QWORD *)v62 + 8);
        v67 = *((_QWORD *)v62 + 9);
        goto LABEL_107;
      }
      switch(swift_getEnumCaseMultiPayload(v62, v5))
      {
        case 0u:
        case 1u:
          v64 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v64 - 8) + 8))(v62, v64);
          break;
        case 2u:
          v68 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v68 - 8) + 8))(v62, v68);
          v69 = sub_100004FC8(&qword_10015C420);
          swift_bridgeObjectRelease(*(_QWORD *)&v62[*(int *)(v69 + 48) + 8]);
          break;
        case 3u:
          swift_bridgeObjectRelease(*((_QWORD *)v62 + 1));
          swift_bridgeObjectRelease(*((_QWORD *)v62 + 3));
          swift_bridgeObjectRelease(*((_QWORD *)v62 + 5));
          swift_bridgeObjectRelease(*((_QWORD *)v62 + 7));
          break;
        case 4u:
          swift_bridgeObjectRelease(*((_QWORD *)v62 + 1));
          swift_bridgeObjectRelease(*((_QWORD *)v62 + 3));
          swift_bridgeObjectRelease(*((_QWORD *)v62 + 5));
          break;
        case 5u:
          swift_bridgeObjectRelease(*((_QWORD *)v62 + 1));
          swift_bridgeObjectRelease(*((_QWORD *)v62 + 3));

          swift_bridgeObjectRelease(*((_QWORD *)v62 + 5));
          if (*((_QWORD *)v62 + 9))
            sub_100005474((_QWORD *)v62 + 6);
          break;
        default:
          break;
      }
      v70 = (int *)type metadata accessor for PrimarySettingsListFollowUpActionModel(0);
      v71 = &v62[v70[5]];
      v72 = type metadata accessor for FLFollowUpGroupIdentity(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v72 - 8) + 8))(v71, v72);
      swift_bridgeObjectRelease(*(_QWORD *)&v62[v70[7] + 8]);
      swift_bridgeObjectRelease(*(_QWORD *)&v62[v70[8] + 8]);
      v73 = &v62[v70[9]];
      sub_100007618(*(_QWORD *)v73, *((_QWORD *)v73 + 1), v73[16]);
      swift_bridgeObjectRelease(*((_QWORD *)v73 + 3));
      v74 = &v62[v70[10]];
      v65 = v74[16];
      if (v65 != 255)
      {
        v66 = *(_QWORD *)v74;
        v67 = *((_QWORD *)v74 + 1);
LABEL_107:
        sub_10000BB54(v66, v67, v65);
      }
LABEL_108:
      v75 = &v9[*(int *)(v61 + 24)];
      v76 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v76 - 8) + 8))(v75, v76);
      return;
    default:
      return;
  }
}

void sub_100072818(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  id v31;
  __int128 v32;
  char *v33;
  uint64_t v34;
  char *v35;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (_QWORD *)(a1 + v5);
  v7 = (uint64_t *)((char *)a2 + v5);
  v8 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  swift_retain(v3);
  switch(swift_getEnumCaseMultiPayload(v7, v8))
  {
    case 0u:
      v9 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v6, v7, v9);
      v10 = v6;
      v11 = v8;
      v12 = 0;
      goto LABEL_12;
    case 1u:
      v13 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v6, v7, v13);
      v10 = v6;
      v11 = v8;
      v12 = 1;
      goto LABEL_12;
    case 2u:
      v14 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v6, v7, v14);
      v15 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
      v16 = (_QWORD *)((char *)v6 + v15);
      v17 = (_QWORD *)((char *)v7 + v15);
      v18 = v17[1];
      *v16 = *v17;
      v16[1] = v18;
      swift_bridgeObjectRetain(v18);
      v10 = v6;
      v11 = v8;
      v12 = 2;
      goto LABEL_12;
    case 3u:
      v19 = v7[1];
      *v6 = *v7;
      v6[1] = v19;
      v20 = v7[3];
      v6[2] = v7[2];
      v6[3] = v20;
      v21 = v7[5];
      v6[4] = v7[4];
      v6[5] = v21;
      v22 = v7[7];
      v6[6] = v7[6];
      v6[7] = v22;
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(v22);
      v10 = v6;
      v11 = v8;
      v12 = 3;
      goto LABEL_12;
    case 4u:
      v23 = v7[1];
      *v6 = *v7;
      v6[1] = v23;
      v24 = v7[3];
      v6[2] = v7[2];
      v6[3] = v24;
      v25 = v7[5];
      v6[4] = v7[4];
      v6[5] = v25;
      v6[6] = v7[6];
      swift_bridgeObjectRetain(v23);
      swift_bridgeObjectRetain(v24);
      swift_bridgeObjectRetain(v25);
      v10 = v6;
      v11 = v8;
      v12 = 4;
      goto LABEL_12;
    case 5u:
      v26 = v7[1];
      *v6 = *v7;
      v6[1] = v26;
      v27 = v7[3];
      v6[2] = v7[2];
      v6[3] = v27;
      v29 = (void *)v7[4];
      v28 = v7[5];
      v6[4] = v29;
      v6[5] = v28;
      v30 = v7[9];
      swift_bridgeObjectRetain(v26);
      swift_bridgeObjectRetain(v27);
      v31 = v29;
      swift_bridgeObjectRetain(v28);
      if (v30)
      {
        v6[9] = v30;
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v30 - 8))((uint64_t)(v6 + 6), (uint64_t)(v7 + 6), v30);
      }
      else
      {
        v32 = *((_OWORD *)v7 + 4);
        *((_OWORD *)v6 + 3) = *((_OWORD *)v7 + 3);
        *((_OWORD *)v6 + 4) = v32;
      }
      v10 = v6;
      v11 = v8;
      v12 = 5;
LABEL_12:
      swift_storeEnumTagMultiPayload(v10, v11, v12);
      break;
    default:
      memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
      break;
  }
  v33 = (char *)v7 + *(int *)(type metadata accessor for PrimarySettingsListItemModel(0) + 20);
  v34 = type metadata accessor for PrimarySettingsListItemViewType(0);
  v35 = (char *)sub_100072ABC + 4 * byte_10011742C[swift_getEnumCaseMultiPayload(v33, v34)];
  __asm { BR              X10 }
}

uint64_t sub_100072ABC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  __int128 v38;
  uint64_t v40;

  switch(swift_getEnumCaseMultiPayload(v3, v4))
  {
    case 0u:
      v6 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v1, v3, v6);
      v7 = v1;
      v8 = v4;
      v9 = 0;
      goto LABEL_12;
    case 1u:
      v10 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v1, v3, v10);
      v7 = v1;
      v8 = v4;
      v9 = 1;
      goto LABEL_12;
    case 2u:
      v11 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v1, v3, v11);
      v12 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
      v13 = (_QWORD *)((char *)v1 + v12);
      v14 = (_QWORD *)((char *)v3 + v12);
      v15 = v14[1];
      *v13 = *v14;
      v13[1] = v15;
      swift_bridgeObjectRetain(v15);
      v7 = v1;
      v8 = v4;
      v9 = 2;
      goto LABEL_12;
    case 3u:
      v16 = v3[1];
      *v1 = *v3;
      v1[1] = v16;
      v17 = v3[3];
      v1[2] = v3[2];
      v1[3] = v17;
      v18 = v3[5];
      v1[4] = v3[4];
      v1[5] = v18;
      v19 = v3[7];
      v1[6] = v3[6];
      v1[7] = v19;
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v19);
      v7 = v1;
      v8 = v4;
      v9 = 3;
      goto LABEL_12;
    case 4u:
      v20 = v3[1];
      *v1 = *v3;
      v1[1] = v20;
      v21 = v3[3];
      v1[2] = v3[2];
      v1[3] = v21;
      v22 = v3[5];
      v1[4] = v3[4];
      v1[5] = v22;
      v1[6] = v3[6];
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(v22);
      v7 = v1;
      v8 = v4;
      v9 = 4;
      goto LABEL_12;
    case 5u:
      v40 = v5;
      v23 = v3[1];
      *v1 = *v3;
      v1[1] = v23;
      v24 = v3[3];
      v1[2] = v3[2];
      v1[3] = v24;
      v25 = (void *)v3[4];
      v26 = v3[5];
      v1[4] = v25;
      v1[5] = v26;
      v27 = v3[9];
      swift_bridgeObjectRetain(v23);
      swift_bridgeObjectRetain(v24);
      v28 = v25;
      swift_bridgeObjectRetain(v26);
      if (v27)
      {
        v1[9] = v27;
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v27 - 8))((uint64_t)(v1 + 6), (uint64_t)(v3 + 6), v27);
      }
      else
      {
        v29 = *((_OWORD *)v3 + 4);
        *((_OWORD *)v1 + 3) = *((_OWORD *)v3 + 3);
        *((_OWORD *)v1 + 4) = v29;
      }
      v5 = v40;
      v2 = v2;
      v7 = v1;
      v8 = v4;
      v9 = 5;
LABEL_12:
      swift_storeEnumTagMultiPayload(v7, v8, v9);
      break;
    default:
      memcpy(v1, v3, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
      break;
  }
  v30 = type metadata accessor for PrimarySettingsListAppleAccountLinkModel(0);
  v31 = *(int *)(v30 + 20);
  v32 = (char *)v1 + v31;
  v33 = (char *)v3 + v31;
  v34 = *((_QWORD *)v33 + 1);
  if (v34)
  {
    *(_QWORD *)v32 = *(_QWORD *)v33;
    *((_QWORD *)v32 + 1) = v34;
    v35 = *((_QWORD *)v33 + 3);
    *((_QWORD *)v32 + 2) = *((_QWORD *)v33 + 2);
    *((_QWORD *)v32 + 3) = v35;
    v32[32] = v33[32];
    v36 = (void *)*((_QWORD *)v33 + 5);
    *((_QWORD *)v32 + 5) = v36;
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRetain(v35);
    v37 = v36;
  }
  else
  {
    v38 = *((_OWORD *)v33 + 1);
    *(_OWORD *)v32 = *(_OWORD *)v33;
    *((_OWORD *)v32 + 1) = v38;
    *((_OWORD *)v32 + 2) = *((_OWORD *)v33 + 2);
  }
  *((_BYTE *)v1 + *(int *)(v30 + 24)) = *((_BYTE *)v3 + *(int *)(v30 + 24));
  swift_storeEnumTagMultiPayload(v1, v5, v2);
  return v0;
}

uint64_t *sub_100074868(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  __int128 v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v7;
  swift_retain(v6);
  swift_release(v8);
  if (a1 != a2)
  {
    v9 = *(int *)(a3 + 20);
    v10 = (uint64_t *)((char *)a1 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    sub_1000076B4((uint64_t)a1 + v9, type metadata accessor for PrimarySettingsListItemIdentifier);
    v12 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(v11, v12))
    {
      case 0u:
        v13 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v11, v13);
        v14 = v10;
        v15 = v12;
        v16 = 0;
        goto LABEL_14;
      case 1u:
        v17 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v10, v11, v17);
        v14 = v10;
        v15 = v12;
        v16 = 1;
        goto LABEL_14;
      case 2u:
        v18 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v10, v11, v18);
        v19 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v20 = (_QWORD *)((char *)v10 + v19);
        v21 = (_QWORD *)((char *)v11 + v19);
        *v20 = *v21;
        v22 = v21[1];
        v20[1] = v22;
        swift_bridgeObjectRetain(v22);
        v14 = v10;
        v15 = v12;
        v16 = 2;
        goto LABEL_14;
      case 3u:
        *v10 = *v11;
        v23 = v11[1];
        v10[1] = v23;
        v10[2] = v11[2];
        v24 = v11[3];
        v10[3] = v24;
        v10[4] = v11[4];
        v25 = v11[5];
        v10[5] = v25;
        v10[6] = v11[6];
        v26 = v11[7];
        v10[7] = v26;
        swift_bridgeObjectRetain(v23);
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v25);
        swift_bridgeObjectRetain(v26);
        v14 = v10;
        v15 = v12;
        v16 = 3;
        goto LABEL_14;
      case 4u:
        *v10 = *v11;
        v27 = v11[1];
        v10[1] = v27;
        v10[2] = v11[2];
        v28 = v11[3];
        v10[3] = v28;
        v10[4] = v11[4];
        v29 = v11[5];
        v10[5] = v29;
        v10[6] = v11[6];
        swift_bridgeObjectRetain(v27);
        swift_bridgeObjectRetain(v28);
        swift_bridgeObjectRetain(v29);
        v14 = v10;
        v15 = v12;
        v16 = 4;
        goto LABEL_14;
      case 5u:
        *v10 = *v11;
        v30 = v11[1];
        v10[1] = v30;
        v10[2] = v11[2];
        v31 = v11[3];
        v10[3] = v31;
        v32 = (void *)v11[4];
        v10[4] = v32;
        v33 = v11[5];
        v10[5] = v33;
        v34 = v11[9];
        swift_bridgeObjectRetain(v30);
        swift_bridgeObjectRetain(v31);
        v35 = v32;
        swift_bridgeObjectRetain(v33);
        if (v34)
        {
          v10[9] = v34;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v34 - 8))((uint64_t)(v10 + 6), (uint64_t)(v11 + 6), v34);
        }
        else
        {
          v36 = *((_OWORD *)v11 + 4);
          *((_OWORD *)v10 + 3) = *((_OWORD *)v11 + 3);
          *((_OWORD *)v10 + 4) = v36;
        }
        v14 = v10;
        v15 = v12;
        v16 = 5;
LABEL_14:
        swift_storeEnumTagMultiPayload(v14, v15, v16);
        break;
      default:
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
        break;
    }
    v37 = *(int *)(type metadata accessor for PrimarySettingsListItemModel(0) + 20);
    v38 = (char *)v11 + v37;
    sub_1000076B4((uint64_t)v10 + v37, type metadata accessor for PrimarySettingsListItemViewType);
    v39 = type metadata accessor for PrimarySettingsListItemViewType(0);
    v40 = (char *)&loc_100074BA4 + 4 * byte_1001174BA[swift_getEnumCaseMultiPayload(v38, v39)];
    __asm { BR              X10 }
  }
  type metadata accessor for PrimarySettingsListItemModel(0);
  return a1;
}

void sub_100076DC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(int *)(a3 + 20);
  v4 = (char *)(a1 + v3);
  v5 = (char *)(a2 + v3);
  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v5, v6);
  if (EnumCaseMultiPayload == 2)
  {
    v9 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v4, v5, v9);
    v10 = sub_100004FC8(&qword_10015C420);
    *(_OWORD *)&v4[*(int *)(v10 + 48)] = *(_OWORD *)&v5[*(int *)(v10 + 48)];
    swift_storeEnumTagMultiPayload(v4, v6, 2);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v11 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v4, v5, v11);
    swift_storeEnumTagMultiPayload(v4, v6, 1);
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(v4, v5, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    v8 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v4, v5, v8);
    swift_storeEnumTagMultiPayload(v4, v6, 0);
  }
  v12 = &v5[*(int *)(type metadata accessor for PrimarySettingsListItemModel(0) + 20)];
  v13 = type metadata accessor for PrimarySettingsListItemViewType(0);
  v14 = (char *)sub_100076F44 + 4 * byte_100117542[swift_getEnumCaseMultiPayload(v12, v13)];
  __asm { BR              X10 }
}

uint64_t sub_100076F44()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  char *v3;
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v3, v4);
  if (EnumCaseMultiPayload == 2)
  {
    v7 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v2, v3, v7);
    v8 = sub_100004FC8(&qword_10015C420);
    *(_OWORD *)&v2[*(int *)(v8 + 48)] = *(_OWORD *)&v3[*(int *)(v8 + 48)];
    swift_storeEnumTagMultiPayload(v2, v4, 2);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v9 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v2, v3, v9);
    swift_storeEnumTagMultiPayload(v2, v4, 1);
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(v2, v3, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    v6 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v2, v3, v6);
    swift_storeEnumTagMultiPayload(v2, v4, 0);
  }
  v10 = type metadata accessor for PrimarySettingsListAppleAccountLinkModel(0);
  v11 = *(int *)(v10 + 20);
  v12 = &v2[v11];
  v13 = &v3[v11];
  v14 = *((_OWORD *)v13 + 1);
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *((_OWORD *)v12 + 1) = v14;
  *((_OWORD *)v12 + 2) = *((_OWORD *)v13 + 2);
  v2[*(int *)(v10 + 24)] = v3[*(int *)(v10 + 24)];
  swift_storeEnumTagMultiPayload(v2, v1, 0);
  return v0;
}

uint64_t *sub_100077D7C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int EnumCaseMultiPayload;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;

  v6 = *((_BYTE *)a2 + 8);
  v7 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v6;
  swift_release(v7);
  if (a1 != a2)
  {
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    sub_1000076B4((uint64_t)a1 + v8, type metadata accessor for PrimarySettingsListItemIdentifier);
    v11 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v10, v11);
    if (EnumCaseMultiPayload == 2)
    {
      v17 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v9, v10, v17);
      v18 = sub_100004FC8(&qword_10015C420);
      *(_OWORD *)&v9[*(int *)(v18 + 48)] = *(_OWORD *)&v10[*(int *)(v18 + 48)];
      v14 = v9;
      v15 = v11;
      v16 = 2;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v19 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v9, v10, v19);
      v14 = v9;
      v15 = v11;
      v16 = 1;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
LABEL_11:
        v20 = *(int *)(type metadata accessor for PrimarySettingsListItemModel(0) + 20);
        v21 = &v10[v20];
        sub_1000076B4((uint64_t)&v9[v20], type metadata accessor for PrimarySettingsListItemViewType);
        v22 = type metadata accessor for PrimarySettingsListItemViewType(0);
        v23 = (char *)&loc_100077F34 + 4 * byte_10011754C[swift_getEnumCaseMultiPayload(v21, v22)];
        __asm { BR              X10 }
      }
      v13 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v9, v10, v13);
      v14 = v9;
      v15 = v11;
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(v14, v15, v16);
    goto LABEL_11;
  }
  type metadata accessor for PrimarySettingsListItemModel(0);
  return a1;
}

uint64_t sub_100078D6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100078D78);
}

uint64_t sub_100078D78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 8);
    if (v4 > 1)
      return (v4 ^ 0xFF) + 1;
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for PrimarySettingsListItemModel(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_100078DEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100078DF8);
}

uint64_t sub_100078DF8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 8) = -(char)a2;
  }
  else
  {
    v7 = type metadata accessor for PrimarySettingsListItemModel(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for PrimarySettingsListItem(uint64_t a1)
{
  uint64_t result;

  result = qword_1001598C0;
  if (!qword_1001598C0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PrimarySettingsListItem);
  return result;
}

uint64_t sub_100078EA4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = "\t";
  result = type metadata accessor for PrimarySettingsListItemModel(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100078F18(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10012A998, 1);
}

uint64_t sub_100078F28@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t OpaqueTypeConformance2;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(char *, uint64_t);
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char v72;
  char v73;
  uint64_t KeyPath;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD v108[3];

  v107 = a1;
  v106 = type metadata accessor for AccessibilityTraits(0);
  v104 = *(_QWORD *)(v106 - 8);
  v2 = __chkstk_darwin(v106);
  v105 = (char *)&v79 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v103 = (char *)&v79 - v4;
  v5 = type metadata accessor for AccessibilityChildBehavior(0);
  v101 = *(_QWORD *)(v5 - 8);
  v102 = v5;
  __chkstk_darwin(v5);
  v100 = (char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004FC8(&qword_1001598F8);
  __chkstk_darwin(v7);
  v92 = (uint64_t)&v79 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100004FC8(&qword_100159900);
  __chkstk_darwin(v9);
  v81 = (uint64_t)&v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_100004FC8(&qword_100159908);
  __chkstk_darwin(v88);
  v84 = (char *)&v79 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = type metadata accessor for PrimarySettingsListItem(0);
  v12 = *(_QWORD *)(v80 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v80);
  v14 = (char *)&v79 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100004FC8(&qword_100159910);
  __chkstk_darwin(v15);
  v17 = (char *)&v79 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = sub_100004FC8(&qword_100159918);
  v18 = *(_QWORD *)(v83 - 8);
  __chkstk_darwin(v83);
  v20 = (char *)&v79 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = sub_100004FC8(&qword_100159920);
  __chkstk_darwin(v86);
  v85 = (char *)&v79 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = sub_100004FC8(&qword_100159928);
  __chkstk_darwin(v91);
  v89 = (uint64_t)&v79 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_100004FC8(&qword_100159930);
  v24 = *(_QWORD *)(v23 - 8);
  v93 = v23;
  v94 = v24;
  __chkstk_darwin(v23);
  v90 = (char *)&v79 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = sub_100004FC8(&qword_100159938);
  v26 = __chkstk_darwin(v96);
  v87 = (char *)&v79 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v26);
  v95 = (char *)&v79 - v29;
  __chkstk_darwin(v28);
  v99 = (char *)&v79 - v30;
  v97 = sub_100004FC8(&qword_100159940);
  __chkstk_darwin(v97);
  v98 = (uint64_t)&v79 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100079788((uint64_t)v17);
  v32 = v1;
  v82 = v1;
  sub_1000076F0(v1, (uint64_t)v14, type metadata accessor for PrimarySettingsListItem);
  v33 = *(unsigned __int8 *)(v12 + 80);
  v34 = (v33 + 16) & ~v33;
  v35 = swift_allocObject(&unk_10014AA40, v34 + v13, v33 | 7);
  sub_100007670((uint64_t)v14, v35 + v34, type metadata accessor for PrimarySettingsListItem);
  v36 = sub_100007868(&qword_100159948, &qword_100159910, (uint64_t)&protocol conformance descriptor for _UnaryViewAdaptor<A>);
  v37 = v20;
  View.onScrollVisibilityChange(threshold:_:)(sub_10007D83C, v35, v15, v36, 0.5);
  swift_release(v35);
  sub_10000BA50((uint64_t)v17, &qword_100159910);
  v38 = v32 + *(int *)(v80 + 20);
  v39 = v81;
  sub_1000076F0(v38, v81, type metadata accessor for PrimarySettingsListItemIdentifier);
  v40 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v41 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56);
  v41(v39, 0, 1, v40);
  v42 = (uint64_t)v84;
  sub_100018C00(v39, (uint64_t)&v84[*(int *)(v88 + 36)], &qword_100159900);
  v43 = v18;
  v44 = *(void (**)(uint64_t, char *, uint64_t))(v18 + 16);
  v45 = v83;
  v44(v42, v37, v83);
  sub_10000BA50(v39, &qword_100159900);
  v46 = v92;
  sub_1000076F0(v38, v92, type metadata accessor for PrimarySettingsListItemIdentifier);
  v41(v46, 0, 1, v40);
  v47 = sub_100004FC8(&qword_10015C890);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v46, 0, 1, v47);
  v48 = (uint64_t)v85;
  sub_100018C00(v46, (uint64_t)&v85[*(int *)(v86 + 36)], &qword_1001598F8);
  sub_100018C00(v42, v48, &qword_100159908);
  sub_10000BA50(v46, &qword_1001598F8);
  sub_10000BA50(v42, &qword_100159908);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v37, v45);
  type metadata accessor for PrimarySettingsListItemModel(0);
  sub_100020650();
  LOBYTE(v34) = v49;
  v50 = v89;
  sub_100018C00(v48, v89, &qword_100159920);
  v51 = v91;
  *(_BYTE *)(v50 + *(int *)(v91 + 36)) = v34 & 1;
  v52 = sub_10000BA50(v48, &qword_100159920);
  v53 = v100;
  static AccessibilityChildBehavior.combine.getter(v52);
  v54 = sub_10007D878();
  v55 = v90;
  View.accessibilityElement(children:)(v53, v51, v54);
  v56 = v53;
  v57 = (uint64_t)v87;
  (*(void (**)(char *, uint64_t))(v101 + 8))(v56, v102);
  sub_10000BA50(v50, &qword_100159928);
  sub_10009E97C();
  v59 = v58;
  v61 = v60;
  v108[0] = v51;
  v108[1] = v54;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v108, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v63 = v93;
  View.accessibility(identifier:)(v59, v61, v93, OpaqueTypeConformance2);
  swift_bridgeObjectRelease(v61);
  (*(void (**)(char *, uint64_t))(v94 + 8))(v55, v63);
  if (sub_10007C72C())
  {
    v64 = v103;
    static AccessibilityTraits.isHeader.getter();
  }
  else
  {
    v64 = v103;
    static AccessibilityTraits.isButton.getter();
  }
  v66 = (uint64_t)v95;
  v65 = v96;
  ModifiedContent<>.accessibilityAddTraits(_:)(v64, v96);
  v67 = *(void (**)(char *, uint64_t))(v104 + 8);
  v68 = v106;
  v67(v64, v106);
  v69 = sub_10000BA50(v57, &qword_100159938);
  v70 = v105;
  static AccessibilityTraits.isStaticText.getter(v69);
  v71 = (uint64_t)v99;
  ModifiedContent<>.accessibilityAddTraits(_:)(v70, v65);
  v67(v70, v68);
  sub_10000BA50(v66, &qword_100159938);
  sub_100020C6C();
  v73 = v72;
  KeyPath = swift_getKeyPath(&unk_100117690);
  v75 = swift_allocObject(&unk_10014AA68, 17, 7);
  *(_BYTE *)(v75 + 16) = v73 & 1;
  v76 = v98;
  sub_100018C00(v71, v98, &qword_100159938);
  v77 = (uint64_t *)(v76 + *(int *)(v97 + 36));
  *v77 = KeyPath;
  v77[1] = (uint64_t)sub_10007DACC;
  v77[2] = v75;
  sub_10000BA50(v71, &qword_100159938);
  return sub_10007E96C(v76, v107, &qword_100159940);
}

void sub_100079788(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  _QWORD v107[22];
  uint64_t v108;
  char *v109;
  char *v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  char *v166;
  char *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  char *v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  char *v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;

  v196 = a1;
  v150 = type metadata accessor for PrimarySettingsListFollowUpItem(0);
  __chkstk_darwin(v150);
  v146 = (char *)v107 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for PrimarySettingsListFollowUpModel(0);
  __chkstk_darwin(v3);
  v144 = (char *)v107 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v148 = sub_100004FC8(&qword_100159998);
  __chkstk_darwin(v148);
  v149 = (char *)v107 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v195 = sub_100004FC8(&qword_1001599A0);
  __chkstk_darwin(v195);
  v151 = (char *)v107 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for PrimarySettingsListValueLink(0);
  v107[2] = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v107[4] = (char *)v107 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107[3] = v9;
  __chkstk_darwin(v8);
  v107[6] = (char *)v107 - v10;
  v147 = sub_100004FC8(&qword_1001599A8);
  v11 = __chkstk_darwin(v147);
  v107[5] = (char *)v107 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v107[8] = (char *)v107 - v13;
  v107[0] = type metadata accessor for PrimarySettingsListValueLinkModel(0);
  v14 = __chkstk_darwin(v107[0]);
  v107[1] = (char *)v107 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v107[7] = (char *)v107 - v16;
  v17 = type metadata accessor for PrimarySettingsListBadgedLink(0);
  v138 = *(_QWORD *)(v17 - 8);
  v18 = __chkstk_darwin(v17);
  v140 = (char *)v107 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = v19;
  __chkstk_darwin(v18);
  v142 = (char *)v107 - v20;
  v175 = sub_100004FC8(&qword_1001599B0);
  v21 = __chkstk_darwin(v175);
  v141 = (char *)v107 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v145 = (char *)v107 - v23;
  v133 = type metadata accessor for PrimarySettingsListBadgedLinkModel(0);
  v24 = __chkstk_darwin(v133);
  v135 = (char *)v107 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v172 = (char *)v107 - v26;
  v171 = sub_100004FC8(&qword_1001599B8);
  __chkstk_darwin(v171);
  v173 = (char *)v107 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v185 = sub_100004FC8(&qword_1001599C0);
  __chkstk_darwin(v185);
  v174 = (char *)v107 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for PrimarySettingsListLink(0);
  v130 = *(_QWORD *)(v29 - 8);
  v30 = __chkstk_darwin(v29);
  v132 = (char *)v107 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = v31;
  __chkstk_darwin(v30);
  v136 = (char *)v107 - v32;
  v170 = sub_100004FC8(&qword_1001599C8);
  v33 = __chkstk_darwin(v170);
  v134 = (char *)v107 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  v143 = (char *)v107 - v35;
  v122 = type metadata accessor for PrimarySettingsListLinkModel(0);
  v36 = __chkstk_darwin(v122);
  v123 = (char *)v107 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  v168 = (char *)v107 - v38;
  v39 = type metadata accessor for PrimarySettingsListBadgedImagelessLink(0);
  v124 = *(_QWORD *)(v39 - 8);
  v40 = __chkstk_darwin(v39);
  v126 = (char *)v107 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = v41;
  __chkstk_darwin(v40);
  v129 = (char *)v107 - v42;
  v169 = sub_100004FC8(&qword_1001599D0);
  v43 = __chkstk_darwin(v169);
  v128 = (char *)v107 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v43);
  v137 = (char *)v107 - v45;
  v120 = type metadata accessor for PrimarySettingsListBadgedImagelessLinkModel(0);
  v46 = __chkstk_darwin(v120);
  v121 = (char *)v107 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v46);
  v165 = (char *)v107 - v48;
  v181 = sub_100004FC8(&qword_1001599D8);
  __chkstk_darwin(v181);
  v183 = (char *)v107 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v164 = sub_100004FC8(&qword_1001599E0);
  __chkstk_darwin(v164);
  v166 = (char *)v107 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v182 = sub_100004FC8(&qword_1001599E8);
  __chkstk_darwin(v182);
  v167 = (char *)v107 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  v191 = sub_100004FC8(&qword_1001599F0);
  __chkstk_darwin(v191);
  v184 = (char *)v107 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = type metadata accessor for PrimarySettingsListImagelessLink(0);
  v113 = *(_QWORD *)(v53 - 8);
  v54 = __chkstk_darwin(v53);
  v116 = (char *)v107 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = v55;
  __chkstk_darwin(v54);
  v118 = (char *)v107 - v56;
  v163 = sub_100004FC8(&qword_1001599F8);
  v57 = __chkstk_darwin(v163);
  v119 = (char *)v107 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v57);
  v127 = (char *)v107 - v59;
  v108 = type metadata accessor for PrimarySettingsListImagelessLinkModel(0);
  v60 = __chkstk_darwin(v108);
  v109 = (char *)v107 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v60);
  v162 = (char *)v107 - v62;
  v160 = type metadata accessor for PrimarySettingsListToggle(0);
  __chkstk_darwin(v160);
  v117 = (char *)v107 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = type metadata accessor for PrimarySettingsListToggleModel(0);
  __chkstk_darwin(v64);
  v112 = (char *)v107 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  v157 = sub_100004FC8(&qword_100159A00);
  __chkstk_darwin(v157);
  v159 = (char *)v107 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  v180 = sub_100004FC8(&qword_100159A08);
  __chkstk_darwin(v180);
  v161 = (char *)v107 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = type metadata accessor for PrimarySettingsListFamilyLink(0);
  v107[17] = *(_QWORD *)(v68 - 8);
  v69 = __chkstk_darwin(v68);
  v107[19] = (char *)v107 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107[18] = v70;
  __chkstk_darwin(v69);
  v107[21] = (char *)v107 - v71;
  v156 = sub_100004FC8(&qword_100159A10);
  v72 = __chkstk_darwin(v156);
  v107[20] = (char *)v107 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v72);
  v115 = (char *)v107 - v74;
  v75 = type metadata accessor for PrimarySettingsListFamilyLinkModel(0);
  __chkstk_darwin(v75);
  v110 = (char *)v107 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = type metadata accessor for PrimarySettingsListSecondaryAppleAccountLink(0);
  v107[12] = *(_QWORD *)(v77 - 8);
  v78 = __chkstk_darwin(v77);
  v107[14] = (char *)v107 - ((v79 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107[13] = v79;
  __chkstk_darwin(v78);
  v107[16] = (char *)v107 - v80;
  v158 = sub_100004FC8(&qword_100159A18);
  v81 = __chkstk_darwin(v158);
  v107[15] = (char *)v107 - ((v82 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v81);
  v111 = (char *)v107 - v83;
  v84 = type metadata accessor for PrimarySettingsListSecondaryAppleAccountLinkModel(0);
  __chkstk_darwin(v84);
  v107[11] = (char *)v107 - ((v85 + 15) & 0xFFFFFFFFFFFFFFF0);
  v192 = sub_100004FC8(&qword_100159A20);
  __chkstk_darwin(v192);
  v194 = (char *)v107 - ((v86 + 15) & 0xFFFFFFFFFFFFFFF0);
  v187 = sub_100004FC8(&qword_100159A28);
  __chkstk_darwin(v187);
  v189 = (char *)v107 - ((v87 + 15) & 0xFFFFFFFFFFFFFFF0);
  v176 = sub_100004FC8(&qword_100159A30);
  __chkstk_darwin(v176);
  v178 = (char *)v107 - ((v88 + 15) & 0xFFFFFFFFFFFFFFF0);
  v153 = sub_100004FC8(&qword_100159A38);
  __chkstk_darwin(v153);
  v154 = (char *)v107 - ((v89 + 15) & 0xFFFFFFFFFFFFFFF0);
  v177 = sub_100004FC8(&qword_100159A40);
  __chkstk_darwin(v177);
  v155 = (char *)v107 - ((v90 + 15) & 0xFFFFFFFFFFFFFFF0);
  v188 = sub_100004FC8(&qword_100159A48);
  __chkstk_darwin(v188);
  v179 = (char *)v107 - ((v91 + 15) & 0xFFFFFFFFFFFFFFF0);
  v193 = sub_100004FC8(&qword_100159A50);
  __chkstk_darwin(v193);
  v190 = (char *)v107 - ((v92 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  __chkstk_darwin(v93);
  v186 = (char *)v107 - ((v94 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = type metadata accessor for PrimarySettingsListAppleAccountLink(0);
  v96 = __chkstk_darwin(v95);
  __chkstk_darwin(v96);
  v107[9] = (char *)v107 - v97;
  v152 = sub_100004FC8(&qword_100159A58);
  v98 = __chkstk_darwin(v152);
  __chkstk_darwin(v98);
  v107[10] = (char *)v107 - v99;
  v100 = type metadata accessor for PrimarySettingsListAppleAccountLinkModel(0);
  __chkstk_darwin(v100);
  v101 = type metadata accessor for PrimarySettingsListItemViewType(0);
  __chkstk_darwin(v101);
  v103 = (char *)v107 - ((v102 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = v1 + *(int *)(type metadata accessor for PrimarySettingsListItem(0) + 20);
  v105 = type metadata accessor for PrimarySettingsListItemModel(0);
  sub_1000076F0(v104 + *(int *)(v105 + 20), (uint64_t)v103, type metadata accessor for PrimarySettingsListItemViewType);
  v106 = (char *)sub_10007A774 + 4 * word_100117556[swift_getEnumCaseMultiPayload(v103, v101)];
  __asm { BR              X10 }
}

uint64_t sub_10007A774()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  int *v20;
  uint64_t (**v21)@<X0>(uint64_t@<X8>);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;

  v8 = v1;
  sub_100007670(v4, v1, type metadata accessor for PrimarySettingsListAppleAccountLinkModel);
  v9 = v1;
  v10 = *(_QWORD *)(v7 - 904);
  sub_1000076F0(v9, v10, type metadata accessor for PrimarySettingsListAppleAccountLinkModel);
  v11 = (*(_BYTE *)(v8 + *(int *)(v6 + 24)) & 1) != 0 || *(_QWORD *)(v8 + *(int *)(v6 + 20) + 8) == 0;
  v12 = v8;
  *(_QWORD *)(v7 - 184) = v8;
  v13 = *(_QWORD *)(v7 - 176);
  sub_1000076F0(v12, v13, type metadata accessor for PrimarySettingsListItemIdentifier);
  sub_1000076F0(v10, v0, type metadata accessor for PrimarySettingsListAppleAccountLink);
  v14 = *(unsigned __int8 *)(v2 + 80);
  v15 = (v14 + 16) & ~v14;
  v16 = swift_allocObject(&unk_10014ABA8, v15 + v3, v14 | 7);
  sub_100007670(v0, v16 + v15, type metadata accessor for PrimarySettingsListAppleAccountLink);
  v17 = type metadata accessor for SettingsAppModel(0);
  v18 = sub_100007828((unint64_t *)&qword_100159090, type metadata accessor for SettingsAppModel, (uint64_t)&unk_10011AF44);
  *(_QWORD *)v5 = Environment.init<A>(_:)(v17, v17, v18);
  *(_BYTE *)(v5 + 8) = v19 & 1;
  v20 = *(int **)(v7 - 448);
  sub_100007670(v13, v5 + v20[9], type metadata accessor for PrimarySettingsListItemIdentifier);
  *(_BYTE *)(v5 + v20[10]) = v11;
  v21 = (uint64_t (**)@<X0>(uint64_t@<X8>))(v5 + v20[11]);
  *v21 = sub_10007E960;
  v21[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v16;
  sub_1000076B4(v10, type metadata accessor for PrimarySettingsListAppleAccountLink);
  v22 = *(_QWORD *)(v7 - 896);
  sub_10007E96C(v5, v22, &qword_100159A58);
  v23 = *(_QWORD *)(v7 - 432);
  sub_100018C00(v22, v23, &qword_100159A58);
  swift_storeEnumTagMultiPayload(v23, *(_QWORD *)(v7 - 440), 0);
  v24 = sub_100007868(&qword_100159A88, &qword_100159A58, (uint64_t)&unk_10011B660);
  v25 = sub_100007868(&qword_100159A90, &qword_100159A18, (uint64_t)&unk_10011B660);
  v26 = *(_QWORD *)(v7 - 424);
  _ConditionalContent<>.init(storage:)(v23, v20, *(_QWORD *)(v7 - 400), v24, v25);
  v27 = *(_QWORD *)(v7 - 240);
  sub_100018C00(v26, v27, &qword_100159A40);
  swift_storeEnumTagMultiPayload(v27, *(_QWORD *)(v7 - 256), 0);
  v28 = sub_10007DB78();
  v29 = sub_10007DC1C();
  v30 = *(_QWORD *)(v7 - 232);
  _ConditionalContent<>.init(storage:)(v27, *(_QWORD *)(v7 - 248), *(_QWORD *)(v7 - 224), v28, v29);
  sub_10000BA50(v26, &qword_100159A40);
  v31 = *(_QWORD *)(v7 - 152);
  sub_100018C00(v30, v31, &qword_100159A48);
  swift_storeEnumTagMultiPayload(v31, *(_QWORD *)(v7 - 168), 0);
  v32 = sub_10007DAE4();
  v33 = sub_10007DCB8();
  v34 = *(_QWORD *)(v7 - 144);
  _ConditionalContent<>.init(storage:)(v31, *(_QWORD *)(v7 - 160), *(_QWORD *)(v7 - 136), v32, v33);
  sub_10000BA50(v30, &qword_100159A48);
  v35 = *(_QWORD *)(v7 - 112);
  sub_100018C00(v34, v35, &qword_100159A50);
  swift_storeEnumTagMultiPayload(v35, *(_QWORD *)(v7 - 128), 0);
  v36 = sub_10007DB08(&qword_100159A70, &qword_100159A50, (void (*)(void))sub_10007DAE4, (void (*)(void))sub_10007DCB8);
  v37 = sub_10007DE24();
  _ConditionalContent<>.init(storage:)(v35, *(_QWORD *)(v7 - 120), *(_QWORD *)(v7 - 104), v36, v37);
  sub_10000BA50(v34, &qword_100159A50);
  sub_10000BA50(v22, &qword_100159A58);
  return sub_1000076B4(*(_QWORD *)(v7 - 184), type metadata accessor for PrimarySettingsListAppleAccountLinkModel);
}

uint64_t sub_10007C69C(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;

  if ((result & 1) != 0)
  {
    v3 = *a2;
    v4 = *((_BYTE *)a2 + 8);
    v5 = swift_retain(*a2);
    v6 = sub_100063680(v5, v4);
    swift_release(v3);
    v7 = *(_QWORD *)(v6 + 32);
    swift_retain(v7);
    swift_release(v6);
    v8 = sub_1000DB598();
    swift_release(v7);
    v9 = type metadata accessor for PrimarySettingsListItem(0);
    sub_1000F4424((uint64_t)a2 + *(int *)(v9 + 20));
    return swift_release(v8);
  }
  return result;
}

BOOL sub_10007C72C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v14;

  v1 = type metadata accessor for PrimarySettingsListFollowUpModel.ViewType(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for PrimarySettingsListItemViewType(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for PrimarySettingsListFollowUpModel(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v0 + *(int *)(type metadata accessor for PrimarySettingsListItem(0) + 20);
  v11 = type metadata accessor for PrimarySettingsListItemModel(0);
  sub_1000076F0(v10 + *(int *)(v11 + 20), (uint64_t)v6, type metadata accessor for PrimarySettingsListItemViewType);
  if (swift_getEnumCaseMultiPayload(v6, v4) == 9)
  {
    sub_100007670((uint64_t)v6, (uint64_t)v9, type metadata accessor for PrimarySettingsListFollowUpModel);
    sub_1000076F0((uint64_t)&v9[*(int *)(v7 + 20)], (uint64_t)v3, type metadata accessor for PrimarySettingsListFollowUpModel.ViewType);
    sub_1000076B4((uint64_t)v9, type metadata accessor for PrimarySettingsListFollowUpModel);
    v12 = swift_getEnumCaseMultiPayload(v3, v1) != 1;
    sub_1000076B4((uint64_t)v3, type metadata accessor for PrimarySettingsListFollowUpModel.ViewType);
  }
  else
  {
    sub_1000076B4((uint64_t)v6, type metadata accessor for PrimarySettingsListItemViewType);
    return 0;
  }
  return v12;
}

uint64_t sub_10007C8D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v1 = type metadata accessor for PrimarySettingsListItem(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + v4));
  v6 = v0 + v4 + *(int *)(v1 + 20);
  v7 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v6, v7))
  {
    case 0u:
    case 1u:
      v8 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
      break;
    case 2u:
      v9 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v6, v9);
      v10 = sub_100004FC8(&qword_10015C420);
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + *(int *)(v10 + 48) + 8));
      break;
    case 3u:
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 40));
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 56));
      break;
    case 4u:
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 40));
      break;
    case 5u:
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 24));

      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 40));
      if (*(_QWORD *)(v6 + 72))
        sub_100005474((_QWORD *)(v6 + 48));
      break;
    default:
      break;
  }
  v11 = v6 + *(int *)(type metadata accessor for PrimarySettingsListItemModel(0) + 20);
  v12 = type metadata accessor for PrimarySettingsListItemViewType(0);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
      switch(swift_getEnumCaseMultiPayload(v11, v7))
      {
        case 0u:
        case 1u:
          v13 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v11, v13);
          break;
        case 2u:
          v23 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v11, v23);
          v24 = sub_100004FC8(&qword_10015C420);
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + *(int *)(v24 + 48) + 8));
          break;
        case 3u:
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 40));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 56));
          break;
        case 4u:
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 40));
          break;
        case 5u:
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 24));

          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 40));
          if (*(_QWORD *)(v11 + 72))
            sub_100005474((_QWORD *)(v11 + 48));
          break;
        default:
          break;
      }
      v25 = v11 + *(int *)(type metadata accessor for PrimarySettingsListAppleAccountLinkModel(0) + 20);
      v26 = *(_QWORD *)(v25 + 8);
      if (v26)
      {
        swift_bridgeObjectRelease(v26);
        swift_bridgeObjectRelease(*(_QWORD *)(v25 + 24));

      }
      return swift_deallocObject(v0, v4 + v5, v3 | 7);
    case 1u:
      switch(swift_getEnumCaseMultiPayload(v11, v7))
      {
        case 0u:
        case 1u:
          v14 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v11, v14);
          break;
        case 2u:
          v27 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(v11, v27);
          v28 = sub_100004FC8(&qword_10015C420);
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + *(int *)(v28 + 48) + 8));
          break;
        case 3u:
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 40));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 56));
          break;
        case 4u:
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 40));
          break;
        case 5u:
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 24));

          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 40));
          if (*(_QWORD *)(v11 + 72))
            sub_100005474((_QWORD *)(v11 + 48));
          break;
        default:
          break;
      }
      v29 = (_QWORD *)(v11
                     + *(int *)(type metadata accessor for PrimarySettingsListSecondaryAppleAccountLinkModel(0) + 20));
      swift_bridgeObjectRelease(v29[1]);
      swift_bridgeObjectRelease(v29[3]);
      swift_bridgeObjectRelease(v29[5]);
      swift_bridgeObjectRelease(v29[7]);
      return swift_deallocObject(v0, v4 + v5, v3 | 7);
    case 2u:
      switch(swift_getEnumCaseMultiPayload(v11, v7))
      {
        case 0u:
        case 1u:
          v15 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v11, v15);
          break;
        case 2u:
          v30 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(v11, v30);
          v31 = sub_100004FC8(&qword_10015C420);
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + *(int *)(v31 + 48) + 8));
          break;
        case 3u:
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 40));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 56));
          break;
        case 4u:
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 40));
          break;
        case 5u:
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 24));

          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 40));
          if (*(_QWORD *)(v11 + 72))
            sub_100005474((_QWORD *)(v11 + 48));
          break;
        default:
          break;
      }
      v32 = type metadata accessor for PrimarySettingsListFamilyLinkModel(0);
      v33 = v11 + *(int *)(v32 + 20);
      v34 = type metadata accessor for FamilyRowStatus(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 8))(v33, v34);
      swift_bridgeObjectRelease(*(_QWORD *)(v11 + *(int *)(v32 + 24) + 8));
      return swift_deallocObject(v0, v4 + v5, v3 | 7);
    case 3u:
      switch(swift_getEnumCaseMultiPayload(v11, v7))
      {
        case 0u:
        case 1u:
          v16 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v11, v16);
          break;
        case 2u:
          v35 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(v11, v35);
          v36 = sub_100004FC8(&qword_10015C420);
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + *(int *)(v36 + 48) + 8));
          break;
        case 3u:
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 40));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 56));
          break;
        case 4u:
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 40));
          break;
        case 5u:
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 24));

          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 40));
          if (*(_QWORD *)(v11 + 72))
            sub_100005474((_QWORD *)(v11 + 48));
          break;
        default:
          break;
      }
      v37 = type metadata accessor for PrimarySettingsListToggleModel(0);
      v38 = v11 + *(int *)(v37 + 24);
      sub_100007618(*(_QWORD *)v38, *(_QWORD *)(v38 + 8), *(_BYTE *)(v38 + 16));
      swift_bridgeObjectRelease(*(_QWORD *)(v38 + 24));
      swift_release(*(_QWORD *)(v11 + *(int *)(v37 + 32) + 8));
      return swift_deallocObject(v0, v4 + v5, v3 | 7);
    case 4u:
      switch(swift_getEnumCaseMultiPayload(v11, v7))
      {
        case 0u:
        case 1u:
          v17 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v11, v17);
          break;
        case 2u:
          v39 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 8))(v11, v39);
          v40 = sub_100004FC8(&qword_10015C420);
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + *(int *)(v40 + 48) + 8));
          break;
        case 3u:
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 40));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 56));
          break;
        case 4u:
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 40));
          break;
        case 5u:
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 24));

          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 40));
          if (*(_QWORD *)(v11 + 72))
            sub_100005474((_QWORD *)(v11 + 48));
          break;
        default:
          break;
      }
      v41 = type metadata accessor for PrimarySettingsListImagelessLinkModel(0);
      goto LABEL_66;
    case 5u:
      switch(swift_getEnumCaseMultiPayload(v11, v7))
      {
        case 0u:
        case 1u:
          v18 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v11, v18);
          break;
        case 2u:
          v42 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 8))(v11, v42);
          v43 = sub_100004FC8(&qword_10015C420);
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + *(int *)(v43 + 48) + 8));
          break;
        case 3u:
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 40));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 56));
          break;
        case 4u:
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 40));
          break;
        case 5u:
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 24));

          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 40));
          if (*(_QWORD *)(v11 + 72))
            sub_100005474((_QWORD *)(v11 + 48));
          break;
        default:
          break;
      }
      v41 = type metadata accessor for PrimarySettingsListBadgedImagelessLinkModel(0);
LABEL_66:
      v44 = v11 + *(int *)(v41 + 24);
      sub_100007618(*(_QWORD *)v44, *(_QWORD *)(v44 + 8), *(_BYTE *)(v44 + 16));
      swift_bridgeObjectRelease(*(_QWORD *)(v44 + 24));
      return swift_deallocObject(v0, v4 + v5, v3 | 7);
    case 6u:
      switch(swift_getEnumCaseMultiPayload(v11, v7))
      {
        case 0u:
        case 1u:
          v19 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v11, v19);
          break;
        case 2u:
          v45 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 8))(v11, v45);
          v46 = sub_100004FC8(&qword_10015C420);
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + *(int *)(v46 + 48) + 8));
          break;
        case 3u:
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 40));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 56));
          break;
        case 4u:
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 40));
          break;
        case 5u:
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 24));

          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 40));
          if (*(_QWORD *)(v11 + 72))
            sub_100005474((_QWORD *)(v11 + 48));
          break;
        default:
          break;
      }
      v47 = type metadata accessor for PrimarySettingsListLinkModel(0);
      goto LABEL_79;
    case 7u:
      switch(swift_getEnumCaseMultiPayload(v11, v7))
      {
        case 0u:
        case 1u:
          v20 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v11, v20);
          break;
        case 2u:
          v48 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 8))(v11, v48);
          v49 = sub_100004FC8(&qword_10015C420);
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + *(int *)(v49 + 48) + 8));
          break;
        case 3u:
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 40));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 56));
          break;
        case 4u:
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 40));
          break;
        case 5u:
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 24));

          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 40));
          if (*(_QWORD *)(v11 + 72))
            sub_100005474((_QWORD *)(v11 + 48));
          break;
        default:
          break;
      }
      v47 = type metadata accessor for PrimarySettingsListBadgedLinkModel(0);
LABEL_79:
      v50 = v47;
      v51 = v11 + *(int *)(v47 + 24);
      sub_100007618(*(_QWORD *)v51, *(_QWORD *)(v51 + 8), *(_BYTE *)(v51 + 16));
      swift_bridgeObjectRelease(*(_QWORD *)(v51 + 24));
      v52 = *(int *)(v50 + 28);
      goto LABEL_86;
    case 8u:
      switch(swift_getEnumCaseMultiPayload(v11, v7))
      {
        case 0u:
        case 1u:
          v21 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v11, v21);
          break;
        case 2u:
          v53 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 8))(v11, v53);
          v54 = sub_100004FC8(&qword_10015C420);
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + *(int *)(v54 + 48) + 8));
          break;
        case 3u:
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 40));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 56));
          break;
        case 4u:
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 40));
          break;
        case 5u:
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 24));

          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 40));
          if (*(_QWORD *)(v11 + 72))
            sub_100005474((_QWORD *)(v11 + 48));
          break;
        default:
          break;
      }
      v55 = (int *)type metadata accessor for PrimarySettingsListValueLinkModel(0);
      v56 = v11 + v55[6];
      sub_100007618(*(_QWORD *)v56, *(_QWORD *)(v56 + 8), *(_BYTE *)(v56 + 16));
      swift_bridgeObjectRelease(*(_QWORD *)(v56 + 24));
      v57 = v11 + v55[7];
      sub_100007618(*(_QWORD *)v57, *(_QWORD *)(v57 + 8), *(_BYTE *)(v57 + 16));
      swift_bridgeObjectRelease(*(_QWORD *)(v57 + 24));
      v52 = v55[8];
LABEL_86:
      v58 = v11 + v52;
      v59 = *(unsigned __int8 *)(v58 + 16);
      if (v59 != 255)
        sub_10000BB54(*(_QWORD *)v58, *(_QWORD *)(v58 + 8), v59);
      return swift_deallocObject(v0, v4 + v5, v3 | 7);
    case 9u:
      switch(swift_getEnumCaseMultiPayload(v11, v7))
      {
        case 0u:
        case 1u:
          v22 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v11, v22);
          break;
        case 2u:
          v60 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 8))(v11, v60);
          v61 = sub_100004FC8(&qword_10015C420);
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + *(int *)(v61 + 48) + 8));
          break;
        case 3u:
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 40));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 56));
          break;
        case 4u:
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 40));
          break;
        case 5u:
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 24));

          swift_bridgeObjectRelease(*(_QWORD *)(v11 + 40));
          if (*(_QWORD *)(v11 + 72))
            sub_100005474((_QWORD *)(v11 + 48));
          break;
        default:
          break;
      }
      v62 = type metadata accessor for PrimarySettingsListFollowUpModel(0);
      v63 = v11 + *(int *)(v62 + 20);
      v64 = type metadata accessor for PrimarySettingsListFollowUpModel.ViewType(0);
      if (swift_getEnumCaseMultiPayload(v63, v64) != 1)
      {
        sub_100007618(*(_QWORD *)v63, *(_QWORD *)(v63 + 8), *(_BYTE *)(v63 + 16));
        swift_bridgeObjectRelease(*(_QWORD *)(v63 + 24));
        sub_100007618(*(_QWORD *)(v63 + 32), *(_QWORD *)(v63 + 40), *(_BYTE *)(v63 + 48));
        swift_bridgeObjectRelease(*(_QWORD *)(v63 + 56));
        v66 = *(unsigned __int8 *)(v63 + 80);
        if (v66 == 255)
          goto LABEL_106;
        v67 = *(_QWORD *)(v63 + 64);
        v68 = *(_QWORD *)(v63 + 72);
        goto LABEL_105;
      }
      switch(swift_getEnumCaseMultiPayload(v63, v7))
      {
        case 0u:
        case 1u:
          v65 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 8))(v63, v65);
          break;
        case 2u:
          v69 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 8))(v63, v69);
          v70 = sub_100004FC8(&qword_10015C420);
          swift_bridgeObjectRelease(*(_QWORD *)(v63 + *(int *)(v70 + 48) + 8));
          break;
        case 3u:
          swift_bridgeObjectRelease(*(_QWORD *)(v63 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v63 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(v63 + 40));
          swift_bridgeObjectRelease(*(_QWORD *)(v63 + 56));
          break;
        case 4u:
          swift_bridgeObjectRelease(*(_QWORD *)(v63 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v63 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(v63 + 40));
          break;
        case 5u:
          swift_bridgeObjectRelease(*(_QWORD *)(v63 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v63 + 24));

          swift_bridgeObjectRelease(*(_QWORD *)(v63 + 40));
          if (*(_QWORD *)(v63 + 72))
            sub_100005474((_QWORD *)(v63 + 48));
          break;
        default:
          break;
      }
      v71 = (int *)type metadata accessor for PrimarySettingsListFollowUpActionModel(0);
      v72 = v63 + v71[5];
      v73 = type metadata accessor for FLFollowUpGroupIdentity(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 8))(v72, v73);
      swift_bridgeObjectRelease(*(_QWORD *)(v63 + v71[7] + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v63 + v71[8] + 8));
      v74 = v63 + v71[9];
      sub_100007618(*(_QWORD *)v74, *(_QWORD *)(v74 + 8), *(_BYTE *)(v74 + 16));
      swift_bridgeObjectRelease(*(_QWORD *)(v74 + 24));
      v75 = v63 + v71[10];
      v66 = *(unsigned __int8 *)(v75 + 16);
      if (v66 != 255)
      {
        v67 = *(_QWORD *)v75;
        v68 = *(_QWORD *)(v75 + 8);
LABEL_105:
        sub_10000BB54(v67, v68, v66);
      }
LABEL_106:
      v76 = v11 + *(int *)(v62 + 24);
      v77 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 8))(v76, v77);
      return swift_deallocObject(v0, v4 + v5, v3 | 7);
    default:
      return swift_deallocObject(v0, v4 + v5, v3 | 7);
  }
}

uint64_t sub_10007D83C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PrimarySettingsListItem(0) - 8) + 80);
  return sub_10007C69C(a1, (uint64_t *)(v1 + ((v3 + 16) & ~v3)));
}

unint64_t sub_10007D878()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159950;
  if (!qword_100159950)
  {
    v1 = sub_100005430(&qword_100159928);
    sub_10007D8FC();
    sub_100007868(&qword_100159988, &qword_100159990, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100159950);
  }
  return result;
}

unint64_t sub_10007D8FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159958;
  if (!qword_100159958)
  {
    v1 = sub_100005430(&qword_100159920);
    sub_10007D980();
    sub_100007868(&qword_100159978, &qword_100159980, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100159958);
  }
  return result;
}

unint64_t sub_10007D980()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100159960;
  if (!qword_100159960)
  {
    v1 = sub_100005430(&qword_100159908);
    v2[0] = sub_100005430(&qword_100159910);
    v2[1] = sub_100007868(&qword_100159948, &qword_100159910, (uint64_t)&protocol conformance descriptor for _UnaryViewAdaptor<A>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.onScrollVisibilityChange(threshold:_:)>>, 1);
    sub_100007868(&qword_100159968, &qword_100159970, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100159960);
  }
  return result;
}

uint64_t sub_10007DA4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000076F0(a1, a2, type metadata accessor for PrimarySettingsListFollowUpAction);
}

uint64_t sub_10007DA6C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10007DA98(unsigned __int8 *a1)
{
  return EnvironmentValues.isEnabled.setter(*a1);
}

uint64_t sub_10007DABC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

_BYTE *sub_10007DACC(_BYTE *result)
{
  uint64_t v1;

  *result &= ~*(_BYTE *)(v1 + 16) & 1;
  return result;
}

uint64_t sub_10007DAE4()
{
  return sub_10007DB08(&qword_100159A78, &qword_100159A48, (void (*)(void))sub_10007DB78, (void (*)(void))sub_10007DC1C);
}

uint64_t sub_10007DB08(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100005430(a2);
    a3();
    a4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10007DB78()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159A80;
  if (!qword_100159A80)
  {
    v1 = sub_100005430(&qword_100159A40);
    sub_100007868(&qword_100159A88, &qword_100159A58, (uint64_t)&unk_10011B660);
    sub_100007868(&qword_100159A90, &qword_100159A18, (uint64_t)&unk_10011B660);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100159A80);
  }
  return result;
}

unint64_t sub_10007DC1C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159A98;
  if (!qword_100159A98)
  {
    v1 = sub_100005430(&qword_100159A08);
    sub_100007868(&qword_100159AA0, &qword_100159A10, (uint64_t)&unk_10011B660);
    sub_100007828(&qword_100159AA8, type metadata accessor for PrimarySettingsListToggle, (uint64_t)&unk_100117C2C);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100159A98);
  }
  return result;
}

uint64_t sub_10007DCB8()
{
  return sub_10007DB08(&qword_100159AB0, &qword_1001599F0, (void (*)(void))sub_10007DCDC, (void (*)(void))sub_10007DD80);
}

unint64_t sub_10007DCDC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159AB8;
  if (!qword_100159AB8)
  {
    v1 = sub_100005430(&qword_1001599E8);
    sub_100007868(&qword_100159AC0, &qword_1001599F8, (uint64_t)&unk_10011B660);
    sub_100007868(&qword_100159AC8, &qword_1001599D0, (uint64_t)&unk_10011B660);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100159AB8);
  }
  return result;
}

unint64_t sub_10007DD80()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159AD0;
  if (!qword_100159AD0)
  {
    v1 = sub_100005430(&qword_1001599C0);
    sub_100007868(&qword_100159AD8, &qword_1001599C8, (uint64_t)&unk_10011B660);
    sub_100007868(&qword_100159AE0, &qword_1001599B0, (uint64_t)&unk_10011B660);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100159AD0);
  }
  return result;
}

unint64_t sub_10007DE24()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159AE8;
  if (!qword_100159AE8)
  {
    v1 = sub_100005430(&qword_1001599A0);
    sub_100007868(&qword_100159A60, &qword_1001599A8, (uint64_t)&unk_10011B660);
    sub_100007828(&qword_100159A68, type metadata accessor for PrimarySettingsListFollowUpItem, (uint64_t)&unk_10011AEB0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100159AE8);
  }
  return result;
}

uint64_t sub_10007DEC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  v1 = *(_QWORD *)(type metadata accessor for PrimarySettingsListValueLink(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v5 = v0 + v3;
  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v0 + v3, v6))
  {
    case 0u:
    case 1u:
      v7 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v0 + v3, v7);
      break;
    case 2u:
      v8 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v3, v8);
      v9 = sub_100004FC8(&qword_10015C420);
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + *(int *)(v9 + 48) + 8));
      break;
    case 3u:
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 40));
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 56));
      break;
    case 4u:
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 40));
      break;
    case 5u:
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 24));

      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 40));
      if (*(_QWORD *)(v5 + 72))
        sub_100005474((_QWORD *)(v5 + 48));
      break;
    default:
      break;
  }
  v10 = (int *)type metadata accessor for PrimarySettingsListValueLinkModel(0);
  v11 = v5 + v10[6];
  sub_100007618(*(_QWORD *)v11, *(_QWORD *)(v11 + 8), *(_BYTE *)(v11 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v11 + 24));
  v12 = v5 + v10[7];
  sub_100007618(*(_QWORD *)v12, *(_QWORD *)(v12 + 8), *(_BYTE *)(v12 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v12 + 24));
  v13 = v5 + v10[8];
  v14 = *(unsigned __int8 *)(v13 + 16);
  if (v14 != 255)
    sub_10000BB54(*(_QWORD *)v13, *(_QWORD *)(v13 + 8), v14);
  return swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_10007E080@<X0>(uint64_t a1@<X8>)
{
  return sub_10007E0AC(type metadata accessor for PrimarySettingsListValueLink, a1);
}

uint64_t sub_10007E08C()
{
  return sub_10007E110(type metadata accessor for PrimarySettingsListBadgedLink, type metadata accessor for PrimarySettingsListBadgedLinkModel);
}

uint64_t sub_10007E0A0@<X0>(uint64_t a1@<X8>)
{
  return sub_10007E0AC(type metadata accessor for PrimarySettingsListBadgedLink, a1);
}

uint64_t sub_10007E0AC@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(a1(0) - 8) + 80);
  return sub_1000076F0(v2 + ((v5 + 16) & ~v5), a2, a1);
}

uint64_t sub_10007E0FC()
{
  return sub_10007E110(type metadata accessor for PrimarySettingsListLink, type metadata accessor for PrimarySettingsListLinkModel);
}

uint64_t sub_10007E110(uint64_t (*a1)(_QWORD), uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v4 = *(_QWORD *)(a1(0) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 16) & ~v5;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = v2 + v6;
  v9 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v2 + v6, v9))
  {
    case 0u:
    case 1u:
      v10 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v2 + v6, v10);
      break;
    case 2u:
      v11 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v2 + v6, v11);
      v12 = sub_100004FC8(&qword_10015C420);
      swift_bridgeObjectRelease(*(_QWORD *)(v8 + *(int *)(v12 + 48) + 8));
      break;
    case 3u:
      swift_bridgeObjectRelease(*(_QWORD *)(v8 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v8 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(v8 + 40));
      swift_bridgeObjectRelease(*(_QWORD *)(v8 + 56));
      break;
    case 4u:
      swift_bridgeObjectRelease(*(_QWORD *)(v8 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v8 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(v8 + 40));
      break;
    case 5u:
      swift_bridgeObjectRelease(*(_QWORD *)(v8 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v8 + 24));

      swift_bridgeObjectRelease(*(_QWORD *)(v8 + 40));
      if (*(_QWORD *)(v8 + 72))
        sub_100005474((_QWORD *)(v8 + 48));
      break;
    default:
      break;
  }
  v13 = a2(0);
  v14 = v8 + *(int *)(v13 + 24);
  sub_100007618(*(_QWORD *)v14, *(_QWORD *)(v14 + 8), *(_BYTE *)(v14 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v14 + 24));
  v15 = v8 + *(int *)(v13 + 28);
  v16 = *(unsigned __int8 *)(v15 + 16);
  if (v16 != 255)
    sub_10000BB54(*(_QWORD *)v15, *(_QWORD *)(v15 + 8), v16);
  return swift_deallocObject(v2, v6 + v7, v5 | 7);
}

uint64_t sub_10007E2BC@<X0>(uint64_t a1@<X8>)
{
  return sub_10007E0AC(type metadata accessor for PrimarySettingsListLink, a1);
}

uint64_t sub_10007E2C8()
{
  return sub_10007E2FC(type metadata accessor for PrimarySettingsListBadgedImagelessLink, type metadata accessor for PrimarySettingsListBadgedImagelessLinkModel);
}

uint64_t sub_10007E2DC@<X0>(uint64_t a1@<X8>)
{
  return sub_10007E0AC(type metadata accessor for PrimarySettingsListBadgedImagelessLink, a1);
}

uint64_t sub_10007E2E8()
{
  return sub_10007E2FC(type metadata accessor for PrimarySettingsListImagelessLink, type metadata accessor for PrimarySettingsListImagelessLinkModel);
}

uint64_t sub_10007E2FC(uint64_t (*a1)(_QWORD), uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a1(0) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 16) & ~v5;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = v2 + v6;
  v9 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v2 + v6, v9))
  {
    case 0u:
    case 1u:
      v10 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v2 + v6, v10);
      break;
    case 2u:
      v11 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v2 + v6, v11);
      v12 = sub_100004FC8(&qword_10015C420);
      swift_bridgeObjectRelease(*(_QWORD *)(v8 + *(int *)(v12 + 48) + 8));
      break;
    case 3u:
      swift_bridgeObjectRelease(*(_QWORD *)(v8 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v8 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(v8 + 40));
      swift_bridgeObjectRelease(*(_QWORD *)(v8 + 56));
      break;
    case 4u:
      swift_bridgeObjectRelease(*(_QWORD *)(v8 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v8 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(v8 + 40));
      break;
    case 5u:
      swift_bridgeObjectRelease(*(_QWORD *)(v8 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v8 + 24));

      swift_bridgeObjectRelease(*(_QWORD *)(v8 + 40));
      if (*(_QWORD *)(v8 + 72))
        sub_100005474((_QWORD *)(v8 + 48));
      break;
    default:
      break;
  }
  v13 = v8 + *(int *)(a2(0) + 24);
  sub_100007618(*(_QWORD *)v13, *(_QWORD *)(v13 + 8), *(_BYTE *)(v13 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v13 + 24));
  return swift_deallocObject(v2, v6 + v7, v5 | 7);
}

uint64_t sub_10007E488@<X0>(uint64_t a1@<X8>)
{
  return sub_10007E0AC(type metadata accessor for PrimarySettingsListImagelessLink, a1);
}

uint64_t sub_10007E494()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(type metadata accessor for PrimarySettingsListFamilyLink(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v5 = v0 + v3;
  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v0 + v3, v6))
  {
    case 0u:
    case 1u:
      v7 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v0 + v3, v7);
      break;
    case 2u:
      v8 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v3, v8);
      v9 = sub_100004FC8(&qword_10015C420);
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + *(int *)(v9 + 48) + 8));
      break;
    case 3u:
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 40));
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 56));
      break;
    case 4u:
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 40));
      break;
    case 5u:
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 24));

      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 40));
      if (*(_QWORD *)(v5 + 72))
        sub_100005474((_QWORD *)(v5 + 48));
      break;
    default:
      break;
  }
  v10 = v3 + v4;
  v11 = type metadata accessor for PrimarySettingsListFamilyLinkModel(0);
  v12 = v5 + *(int *)(v11 + 20);
  v13 = type metadata accessor for FamilyRowStatus(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  swift_bridgeObjectRelease(*(_QWORD *)(v5 + *(int *)(v11 + 24) + 8));
  return swift_deallocObject(v0, v10, v2 | 7);
}

uint64_t sub_10007E634@<X0>(uint64_t a1@<X8>)
{
  return sub_10007E0AC(type metadata accessor for PrimarySettingsListFamilyLink, a1);
}

uint64_t sub_10007E640()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = *(_QWORD *)(type metadata accessor for PrimarySettingsListSecondaryAppleAccountLink(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v5 = v0 + v3;
  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v0 + v3, v6))
  {
    case 0u:
    case 1u:
      v7 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v0 + v3, v7);
      break;
    case 2u:
      v8 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v3, v8);
      v9 = sub_100004FC8(&qword_10015C420);
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + *(int *)(v9 + 48) + 8));
      break;
    case 3u:
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 40));
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 56));
      break;
    case 4u:
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 40));
      break;
    case 5u:
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 24));

      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 40));
      if (*(_QWORD *)(v5 + 72))
        sub_100005474((_QWORD *)(v5 + 48));
      break;
    default:
      break;
  }
  v10 = (_QWORD *)(v5 + *(int *)(type metadata accessor for PrimarySettingsListSecondaryAppleAccountLinkModel(0) + 20));
  swift_bridgeObjectRelease(v10[1]);
  swift_bridgeObjectRelease(v10[3]);
  swift_bridgeObjectRelease(v10[5]);
  swift_bridgeObjectRelease(v10[7]);
  return swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_10007E7D0@<X0>(uint64_t a1@<X8>)
{
  return sub_10007E0AC(type metadata accessor for PrimarySettingsListSecondaryAppleAccountLink, a1);
}

uint64_t sub_10007E7DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(type metadata accessor for PrimarySettingsListAppleAccountLink(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v5 = v0 + v3;
  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v0 + v3, v6))
  {
    case 0u:
    case 1u:
      v7 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v0 + v3, v7);
      break;
    case 2u:
      v8 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v3, v8);
      v9 = sub_100004FC8(&qword_10015C420);
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + *(int *)(v9 + 48) + 8));
      break;
    case 3u:
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 40));
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 56));
      break;
    case 4u:
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 40));
      break;
    case 5u:
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 24));

      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 40));
      if (*(_QWORD *)(v5 + 72))
        sub_100005474((_QWORD *)(v5 + 48));
      break;
    default:
      break;
  }
  v10 = v5 + *(int *)(type metadata accessor for PrimarySettingsListAppleAccountLinkModel(0) + 20);
  v11 = *(_QWORD *)(v10 + 8);
  if (v11)
  {
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(*(_QWORD *)(v10 + 24));

  }
  return swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_10007E960@<X0>(uint64_t a1@<X8>)
{
  return sub_10007E0AC(type metadata accessor for PrimarySettingsListAppleAccountLink, a1);
}

uint64_t sub_10007E96C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100004FC8(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_10007E9B4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159AF0;
  if (!qword_100159AF0)
  {
    v1 = sub_100005430(&qword_100159940);
    sub_10007EA38();
    sub_100007868(&qword_100159B00, &qword_100159B08, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyTransformModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100159AF0);
  }
  return result;
}

unint64_t sub_10007EA38()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100159AF8;
  if (!qword_100159AF8)
  {
    v1 = sub_100005430(&qword_100159938);
    v2[0] = sub_100005430(&qword_100159928);
    v2[1] = sub_10007D878();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_100007828(&qword_100158CE8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100159AF8);
  }
  return result;
}

id sub_10007EAE4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC11SettingsApp25ClassroomListItemProvider____lazy_storage___classroomVisibilityArbitrator;
  v2 = *(void **)(v0
                + OBJC_IVAR____TtC11SettingsApp25ClassroomListItemProvider____lazy_storage___classroomVisibilityArbitrator);
  if (v2)
  {
    v3 = *(id *)(v0
               + OBJC_IVAR____TtC11SettingsApp25ClassroomListItemProvider____lazy_storage___classroomVisibilityArbitrator);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)CRKDefaultSettingsUIVisibilityProvider), "init");
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

_QWORD *sub_10007EB54()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31[24];
  _QWORD v32[5];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC11SettingsApp25ClassroomListItemProvider_cancellables);
  swift_beginAccess(v0 + OBJC_IVAR____TtC11SettingsApp25ClassroomListItemProvider_cancellables, v31, 1, 0);
  v2 = *v1;
  v27 = v1;
  v28 = v0;
  if ((*v1 & 0xC000000000000001) != 0)
  {
    if (v2 < 0)
      v3 = *v1;
    else
      v3 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v4 = __CocoaSet.makeIterator()(v3);
    v5 = type metadata accessor for AnyCancellable(0);
    v6 = sub_100007828((unint64_t *)&qword_100156FB8, (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable, (uint64_t)&protocol conformance descriptor for AnyCancellable);
    result = Set.Iterator.init(_cocoa:)(v32, v4, v5, v6);
    v2 = v32[0];
    v8 = v32[1];
    v9 = v32[2];
    v10 = v32[3];
    v11 = v32[4];
  }
  else
  {
    v12 = -1 << *(_BYTE *)(v2 + 32);
    v8 = v2 + 56;
    v9 = ~v12;
    v13 = -v12;
    if (v13 < 64)
      v14 = ~(-1 << v13);
    else
      v14 = -1;
    v11 = v14 & *(_QWORD *)(v2 + 56);
    result = (_QWORD *)swift_bridgeObjectRetain(v2);
    v10 = 0;
  }
  v15 = (unint64_t)(v9 + 64) >> 6;
  if (v2 < 0)
    goto LABEL_13;
  while (1)
  {
    if (v11)
    {
      v16 = (v11 - 1) & v11;
      v17 = __clz(__rbit64(v11)) | (v10 << 6);
      v18 = v10;
      goto LABEL_30;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
      break;
    if (v23 >= v15)
      goto LABEL_33;
    v24 = *(_QWORD *)(v8 + 8 * v23);
    v18 = v10 + 1;
    if (!v24)
    {
      v18 = v10 + 2;
      if (v10 + 2 >= v15)
        goto LABEL_33;
      v24 = *(_QWORD *)(v8 + 8 * v18);
      if (!v24)
      {
        v18 = v10 + 3;
        if (v10 + 3 >= v15)
          goto LABEL_33;
        v24 = *(_QWORD *)(v8 + 8 * v18);
        if (!v24)
        {
          v18 = v10 + 4;
          if (v10 + 4 >= v15)
            goto LABEL_33;
          v24 = *(_QWORD *)(v8 + 8 * v18);
          if (!v24)
          {
            v25 = v10 + 5;
            while (v15 != v25)
            {
              v24 = *(_QWORD *)(v8 + 8 * v25++);
              if (v24)
              {
                v18 = v25 - 1;
                goto LABEL_29;
              }
            }
LABEL_33:
            sub_100007C50(v2);
            v26 = *v27;
            *v27 = (uint64_t)&_swiftEmptySetSingleton;
            swift_bridgeObjectRelease(v26);
            sub_1000076B4(v28 + OBJC_IVAR____TtC11SettingsApp25ClassroomListItemProvider_id, type metadata accessor for PrimarySettingsListItemIdentifier);
            sub_100005474((_QWORD *)(v28 + OBJC_IVAR____TtC11SettingsApp25ClassroomListItemProvider_invalidator));
            swift_bridgeObjectRelease(*v27);
            objc_release(*(id *)(v28
                               + OBJC_IVAR____TtC11SettingsApp25ClassroomListItemProvider____lazy_storage___classroomVisibilityArbitrator));
            swift_bridgeObjectRelease(*(_QWORD *)(v28
                                                + OBJC_IVAR____TtC11SettingsApp25ClassroomListItemProvider_classroomStatus
                                                + 8));
            return (_QWORD *)v28;
          }
        }
      }
    }
LABEL_29:
    v16 = (v24 - 1) & v24;
    v17 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_30:
    v22 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v17);
    swift_retain(v22);
    if (!v22)
      goto LABEL_33;
    while (1)
    {
      AnyCancellable.cancel()();
      result = (_QWORD *)swift_release(v22);
      v10 = v18;
      v11 = v16;
      if ((v2 & 0x8000000000000000) == 0)
        break;
LABEL_13:
      v19 = __CocoaSet.Iterator.next()(result);
      if (v19)
      {
        v20 = v19;
        v29 = v19;
        v21 = type metadata accessor for AnyCancellable(0);
        swift_unknownObjectRetain(v20);
        swift_dynamicCast(&v30, &v29, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
        v22 = v30;
        swift_unknownObjectRelease(v20);
        v18 = v10;
        v16 = v11;
        if (v22)
          continue;
      }
      goto LABEL_33;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10007EE50()
{
  uint64_t v0;

  sub_10007EB54();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10007EE74()
{
  return type metadata accessor for ClassroomListItemProvider(0);
}

uint64_t type metadata accessor for ClassroomListItemProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_100159B60;
  if (!qword_100159B60)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ClassroomListItemProvider);
  return result;
}

uint64_t sub_10007EEB8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  result = type metadata accessor for PrimarySettingsListItemIdentifier(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "(";
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[3] = &unk_1001176F8;
    v4[4] = &unk_100117710;
    v4[5] = &unk_100117728;
    result = swift_updateClassMetadata2(a1, 256, 6, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

void sub_10007EF58(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  id v18;
  unsigned __int8 v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  int *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD v56[2];

  v54 = a1;
  v53 = type metadata accessor for PrimarySettingsListItemViewType(0);
  __chkstk_darwin(v53);
  v5 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v7 = __chkstk_darwin(v6);
  v55 = (uint64_t)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v10 = (char *)&v46 - v9;
  v11 = sub_100004FC8((uint64_t *)&unk_100156F00);
  __chkstk_darwin(v11);
  v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for PrimarySettingsListItemModel(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = objc_msgSend((id)objc_opt_self(PSLaunchTracker), "sharedInstance");
  v19 = objc_msgSend(v18, "launchHasCompleted");

  if ((v19 & 1) != 0)
  {
    v52 = a2;
    if (*(_BYTE *)(v2 + OBJC_IVAR____TtC11SettingsApp25ClassroomListItemProvider_classroomVisible) == 1)
    {
      v51 = v2 + OBJC_IVAR____TtC11SettingsApp25ClassroomListItemProvider_id;
      sub_1000076F0(v2 + OBJC_IVAR____TtC11SettingsApp25ClassroomListItemProvider_id, (uint64_t)v10, type metadata accessor for PrimarySettingsListItemIdentifier);
      v20 = type metadata accessor for StaticPrimarySettingsListItemProvider(0);
      v21 = (_QWORD *)v2;
      v22 = swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
      sub_100007670((uint64_t)v10, v22 + OBJC_IVAR____TtC11SettingsApp37StaticPrimarySettingsListItemProvider_id, type metadata accessor for PrimarySettingsListItemIdentifier);
      sub_1000B2604(v54, (uint64_t)v13);
      swift_setDeallocating(v22);
      sub_1000076B4(v22 + OBJC_IVAR____TtC11SettingsApp37StaticPrimarySettingsListItemProvider_id, type metadata accessor for PrimarySettingsListItemIdentifier);
      swift_deallocClassInstance(v22, *(unsigned int *)(*(_QWORD *)v22 + 48), *(unsigned __int16 *)(*(_QWORD *)v22 + 52));
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
      {
        sub_10000BA50((uint64_t)v13, (uint64_t *)&unk_100156F00);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(v52, 1, 1, v14);
        v23 = v21;
      }
      else
      {
        sub_100007670((uint64_t)v13, (uint64_t)v17, type metadata accessor for PrimarySettingsListItemModel);
        sub_1000076F0(v51, v55, type metadata accessor for PrimarySettingsListItemIdentifier);
        sub_10009BD7C();
        v54 = v21;
        v24 = (_QWORD *)((char *)v21 + OBJC_IVAR____TtC11SettingsApp25ClassroomListItemProvider_classroomStatus);
        v25 = *(_QWORD *)((char *)v21 + OBJC_IVAR____TtC11SettingsApp25ClassroomListItemProvider_classroomStatus + 8);
        v50 = v26;
        v51 = v27;
        v49 = v28;
        v30 = v29;
        if (v25)
        {
          v31 = *v24;
          v32 = v25;
        }
        else
        {
          v31 = 0;
          v32 = 0xE000000000000000;
        }
        v56[0] = v31;
        v56[1] = v32;
        v33 = sub_100008A5C();
        swift_bridgeObjectRetain(v25);
        v47 = Text.init<A>(_:)(v56, &type metadata for String, v33);
        v48 = v34;
        v36 = v35;
        v38 = v37;
        v39 = (int *)type metadata accessor for PrimarySettingsListValueLinkModel(0);
        v40 = v39[9];
        v41 = &v5[v39[8]];
        sub_100007670(v55, (uint64_t)v5, type metadata accessor for PrimarySettingsListItemIdentifier);
        v5[v39[5]] = 0;
        v42 = &v5[v39[6]];
        v43 = v50;
        *(_QWORD *)v42 = v30;
        *((_QWORD *)v42 + 1) = v43;
        v42[16] = v49 & 1;
        *((_QWORD *)v42 + 3) = v51;
        v44 = &v5[v39[7]];
        *(_QWORD *)v44 = v47;
        *((_QWORD *)v44 + 1) = v36;
        v44[16] = v38 & 1;
        *((_QWORD *)v44 + 3) = v48;
        *(_QWORD *)v41 = 0;
        *((_QWORD *)v41 + 1) = 0;
        v41[16] = -1;
        v5[v40] = 2;
        swift_storeEnumTagMultiPayload(v5, v53, 8);
        sub_100020188((uint64_t)v5, (uint64_t)&v17[*(int *)(v14 + 20)]);
        v45 = v52;
        sub_1000076F0((uint64_t)v17, v52, type metadata accessor for PrimarySettingsListItemModel);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(v45, 0, 1, v14);
        sub_1000076B4((uint64_t)v17, type metadata accessor for PrimarySettingsListItemModel);
        v23 = v54;
      }
      sub_10007F3CC((uint64_t)v23);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(v52, 1, 1, v14);
      sub_10007F3CC(v2);
    }
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(a2, 1, 1, v14);
  }
}

void sub_10007F3CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  id v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  uint64_t KeyPath;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  id v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t *v66;
  void (*v67)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  id v84[3];
  char v85[32];

  v2 = type metadata accessor for NSNotificationCenter.Publisher(0);
  v80 = *(_QWORD *)(v2 - 8);
  v81 = v2;
  __chkstk_darwin(v2);
  v79 = (char *)&v63 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100004FC8((uint64_t *)&unk_100156F10);
  v82 = *(_QWORD *)(v4 - 8);
  v83 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004FC8(&qword_100159C10);
  v73 = *(_QWORD *)(v7 - 8);
  v74 = v7;
  __chkstk_darwin(v7);
  v72 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100004FC8(&qword_100159C18);
  v76 = *(_QWORD *)(v9 - 8);
  v77 = v9;
  __chkstk_darwin(v9);
  v75 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004FC8((uint64_t *)&unk_10015C970);
  __chkstk_darwin(v11);
  v78 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100004FC8(&qword_100159C20);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100004FC8(&qword_100159C28);
  v71 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v19 = (char *)&v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = objc_msgSend((id)objc_opt_self(PSLaunchTracker), "sharedInstance");
  v21 = objc_msgSend(v20, "launchHasCompleted");

  if (v21)
  {
    v22 = a1;
    v23 = (uint64_t *)(a1 + OBJC_IVAR____TtC11SettingsApp25ClassroomListItemProvider_cancellables);
    swift_beginAccess(v23, v85, 0, 0);
    v24 = *v23;
    if ((*v23 & 0xC000000000000001) != 0)
    {
      if (v24 < 0)
        v25 = *v23;
      else
        v25 = v24 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*v23);
      v26 = __CocoaSet.count.getter(v25);
      swift_bridgeObjectRelease(v24);
      if (!v26)
        goto LABEL_7;
    }
    else if (!*(_QWORD *)(v24 + 16))
    {
LABEL_7:
      v69 = v6;
      v64 = v22;
      v27 = sub_10007EAE4();
      objc_msgSend(v27, "connectToDaemon");

      v28 = sub_10007EAE4();
      KeyPath = swift_getKeyPath(&unk_100117768);
      _KeyValueCodingAndObservingPublishing<>.publisher<A>(for:options:)(KeyPath, 5);

      swift_release(KeyPath);
      v30 = sub_100005494();
      v65 = v30;
      v84[0] = (id)static OS_dispatch_queue.main.getter(v30);
      v68 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
      v67 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 56);
      v31 = v23;
      v32 = (uint64_t)v78;
      v67(v78, 1, 1, v68);
      v33 = sub_100007868(&qword_100159C30, &qword_100159C20, (uint64_t)&protocol conformance descriptor for NSObject.KeyValueObservingPublisher<A, B>);
      v70 = sub_100007828((unint64_t *)&qword_10015C990, (uint64_t (*)(uint64_t))sub_100005494, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
      Publisher.receive<A>(on:options:)(v84, v32, v13, v30, v33, v70);
      sub_10000BA50(v32, (uint64_t *)&unk_10015C970);

      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      v34 = swift_allocObject(&unk_10014AC30, 24, 7);
      v35 = v64;
      swift_weakInit(v34 + 16, v64);
      v36 = sub_100007868(&qword_100159C38, &qword_100159C28, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
      v37 = Publisher<>.sink(receiveValue:)(sub_10008068C, v34, v17, v36);
      swift_release(v34);
      (*(void (**)(char *, uint64_t))(v71 + 8))(v19, v17);
      v66 = v31;
      swift_beginAccess(v31, v84, 33, 0);
      AnyCancellable.store(in:)(v31);
      swift_endAccess(v84);
      swift_release(v37);
      v38 = sub_10007EAE4();
      v39 = swift_getKeyPath(&unk_100117798);
      v40 = v72;
      _KeyValueCodingAndObservingPublishing<>.publisher<A>(for:options:)(v39, 5);

      v41 = swift_release(v39);
      v42 = v65;
      v84[0] = (id)static OS_dispatch_queue.main.getter(v41);
      v43 = v68;
      v44 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v67;
      v67((char *)v32, 1, 1, v68);
      v45 = sub_100007868(&qword_100159C40, &qword_100159C10, (uint64_t)&protocol conformance descriptor for NSObject.KeyValueObservingPublisher<A, B>);
      v46 = v74;
      v47 = v75;
      Publisher.receive<A>(on:options:)(v84, v32, v74, v42, v45, v70);
      sub_10000BA50(v32, (uint64_t *)&unk_10015C970);

      (*(void (**)(char *, uint64_t))(v73 + 8))(v40, v46);
      v48 = swift_allocObject(&unk_10014AC30, 24, 7);
      swift_weakInit(v48 + 16, v35);
      v49 = sub_100007868(&qword_100159C48, &qword_100159C18, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
      v50 = v77;
      v51 = Publisher<>.sink(receiveValue:)(sub_10008068C, v48, v77, v49);
      swift_release(v48);
      (*(void (**)(char *, uint64_t))(v76 + 8))(v47, v50);
      v52 = v66;
      swift_beginAccess(v66, v84, 33, 0);
      AnyCancellable.store(in:)(v52);
      swift_endAccess(v84);
      swift_release(v51);
      v53 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
      v54 = v79;
      NSNotificationCenter.publisher(for:object:)(UIApplicationWillEnterForegroundNotification, 0);

      v84[0] = (id)static OS_dispatch_queue.main.getter(v55);
      v44(v32, 1, 1, v43);
      v56 = sub_100007828((unint64_t *)&unk_100156F20, (uint64_t (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Publisher, (uint64_t)&protocol conformance descriptor for NSNotificationCenter.Publisher);
      v57 = v69;
      v58 = v81;
      Publisher.receive<A>(on:options:)(v84, v32, v81, v42, v56, v70);
      sub_10000BA50(v32, (uint64_t *)&unk_10015C970);

      (*(void (**)(char *, uint64_t))(v80 + 8))(v54, v58);
      v59 = swift_allocObject(&unk_10014AC30, 24, 7);
      swift_weakInit(v59 + 16, v35);
      v60 = sub_100007868((unint64_t *)&qword_100156F30, (uint64_t *)&unk_100156F10, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
      v61 = v83;
      v62 = Publisher<>.sink(receiveValue:)(sub_10008068C, v59, v83, v60);
      swift_release(v59);
      (*(void (**)(char *, uint64_t))(v82 + 8))(v57, v61);
      swift_beginAccess(v52, v84, 33, 0);
      AnyCancellable.store(in:)(v52);
      swift_endAccess(v84);
      swift_release(v62);
    }
  }
}

uint64_t sub_10007FB78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_signpost_type_t v19;
  uint8_t *v20;
  uint8_t *v21;
  uint64_t v22;
  os_signpost_id_t v23;
  uint8_t *v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD aBlock[5];
  uint64_t v42;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v38 = *(_QWORD *)(v2 - 8);
  v39 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v36 = *(_QWORD *)(v5 - 8);
  v37 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OSSignpostID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v35 - v13;
  if (qword_100156CD8 != -1)
    swift_once(&qword_100156CD8, sub_10008BEEC);
  v15 = type metadata accessor for OSSignposter(0);
  v16 = sub_100007808(v15, (uint64_t)qword_10015D340);
  v17 = static OSSignpostID.exclusive.getter(v16);
  v18 = OSSignposter.logHandle.getter(v17);
  v19 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    v35 = v7;
    v21 = v20;
    *(_WORD *)v20 = 0;
    v23 = OSSignpostID.rawValue.getter(v20, v22);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, v19, v23, "ClassroomListItemProvider.updateUpdateClassroom began", "", v21, 2u);
    v24 = v21;
    v1 = v0;
    v7 = v35;
    swift_slowDealloc(v24, -1, -1);

    v25 = *(void (**)(char *, uint64_t))(v9 + 8);
    v25(v14, v8);
    v25(v12, v8);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  }
  if (qword_100156D60 != -1)
    swift_once(&qword_100156D60, sub_1000D34BC);
  v26 = swift_allocObject(&unk_10014AC30, 24, 7);
  swift_weakInit(v26 + 16, v1);
  aBlock[4] = sub_1000806A4;
  v42 = v26;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100005350;
  aBlock[3] = &unk_10014AC48;
  v27 = _Block_copy(aBlock);
  v28 = swift_retain(v26);
  static DispatchQoS.unspecified.getter(v28);
  v40 = _swiftEmptyArrayStorage;
  v29 = sub_100007828((unint64_t *)&qword_10015BAB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v30 = sub_100004FC8((uint64_t *)&unk_100156F40);
  v31 = sub_100007868((unint64_t *)&qword_10015BAC0, (uint64_t *)&unk_100156F40, (uint64_t)&protocol conformance descriptor for [A]);
  v32 = v39;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v40, v30, v31, v39, v29);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v4, v27);
  _Block_release(v27);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v4, v32);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v7, v37);
  v33 = v42;
  swift_release(v26);
  return swift_release(v33);
}

uint64_t sub_10007FF20(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t Strong;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  unsigned __int8 v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  _QWORD aBlock[5];
  uint64_t v34;
  char v35[24];
  char v36[24];

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(a1 + 16, v36, 0, 0);
  Strong = swift_weakLoadStrong(a1 + 16);
  v31 = v6;
  v32 = v3;
  if (Strong
    && (v11 = Strong,
        v12 = sub_10007EAE4(),
        swift_release(v11),
        v13 = objc_msgSend(v12, "paneStatus"),
        v12,
        v13))
  {
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v16 = v15;

  }
  else
  {
    v14 = 0;
    v16 = 0;
  }
  swift_beginAccess(a1 + 16, v35, 0, 0);
  v17 = swift_weakLoadStrong(a1 + 16);
  if (v17)
  {
    v18 = v17;
    v19 = sub_10007EAE4();
    swift_release(v18);
    v20 = objc_msgSend(v19, "settingsUIVisible");

  }
  else
  {
    v20 = 2;
  }
  v21 = sub_100005494();
  v22 = (void *)static OS_dispatch_queue.main.getter(v21);
  v23 = swift_allocObject(&unk_10014AC80, 48, 7);
  *(_BYTE *)(v23 + 16) = v20;
  *(_QWORD *)(v23 + 24) = a1;
  *(_QWORD *)(v23 + 32) = v14;
  *(_QWORD *)(v23 + 40) = v16;
  aBlock[4] = sub_1000806D8;
  v34 = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100005350;
  aBlock[3] = &unk_10014AC98;
  v24 = _Block_copy(aBlock);
  v25 = v34;
  swift_retain(a1);
  v26 = swift_release(v25);
  static DispatchQoS.unspecified.getter(v26);
  aBlock[0] = _swiftEmptyArrayStorage;
  v27 = sub_100007828((unint64_t *)&qword_10015BAB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v28 = sub_100004FC8((uint64_t *)&unk_100156F40);
  v29 = sub_100007868((unint64_t *)&qword_10015BAC0, (uint64_t *)&unk_100156F40, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v28, v29, v2, v27);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v5, v24);
  _Block_release(v24);

  (*(void (**)(char *, uint64_t))(v32 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v31);
}

uint64_t sub_1000801FC(unsigned __int8 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t Strong;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_signpost_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  os_signpost_id_t v33;
  void (*v34)(char *, uint64_t);
  uint64_t v36;
  _BYTE v37[24];
  _QWORD v38[2];
  char v39;
  _QWORD v40[2];
  char v41;

  v7 = a1;
  v8 = type metadata accessor for OSSignpostID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = &v37[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v10);
  v14 = &v37[-v13 - 8];
  v15 = a2 + 16;
  if (v7 != 2)
  {
    swift_beginAccess(a2 + 16, v37, 0, 0);
    Strong = swift_weakLoadStrong(a2 + 16);
    if (Strong)
    {
      v17 = Strong;
      v36 = a3;
      v18 = v7 & 1;
      v19 = OBJC_IVAR____TtC11SettingsApp25ClassroomListItemProvider_classroomVisible;
      if ((v18 != 0) != *(_BYTE *)(Strong + OBJC_IVAR____TtC11SettingsApp25ClassroomListItemProvider_classroomVisible))
      {
        sub_100007C2C((_QWORD *)(Strong + OBJC_IVAR____TtC11SettingsApp25ClassroomListItemProvider_invalidator), *(_QWORD *)(Strong + OBJC_IVAR____TtC11SettingsApp25ClassroomListItemProvider_invalidator + 24));
        v40[0] = "Classroom Visibility";
        v40[1] = 20;
        v41 = 2;
        PassthroughSubject.send(_:)(v40);
      }
      *(_BYTE *)(v17 + v19) = v18;
      swift_release(v17);
      a3 = v36;
    }
  }
  swift_beginAccess(v15, v40, 0, 0);
  v20 = swift_weakLoadStrong(v15);
  if (v20)
  {
    v21 = v20;
    v22 = (_QWORD *)(v20 + OBJC_IVAR____TtC11SettingsApp25ClassroomListItemProvider_classroomStatus);
    v23 = *(_QWORD *)(v20 + OBJC_IVAR____TtC11SettingsApp25ClassroomListItemProvider_classroomStatus + 8);
    if (a4)
    {
      if (v23)
      {
        v24 = *v22 == a3 && v23 == a4;
        if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)(a3, a4, *v22, v23, 0) & 1) != 0)
        {
          swift_bridgeObjectRetain(a4);
LABEL_17:
          v25 = v22[1];
          *v22 = a3;
          v22[1] = a4;
          swift_release(v21);
          swift_bridgeObjectRelease(v25);
          goto LABEL_18;
        }
      }
    }
    else if (!v23)
    {
      goto LABEL_17;
    }
    sub_100007C2C((_QWORD *)(v21 + OBJC_IVAR____TtC11SettingsApp25ClassroomListItemProvider_invalidator), *(_QWORD *)(v21 + OBJC_IVAR____TtC11SettingsApp25ClassroomListItemProvider_invalidator + 24));
    v38[0] = "Classroom Status";
    v38[1] = 16;
    v39 = 2;
    swift_bridgeObjectRetain(a4);
    PassthroughSubject.send(_:)(v38);
    goto LABEL_17;
  }
LABEL_18:
  if (qword_100156CD8 != -1)
    swift_once(&qword_100156CD8, sub_10008BEEC);
  v26 = type metadata accessor for OSSignposter(0);
  v27 = sub_100007808(v26, (uint64_t)qword_10015D340);
  v28 = static OSSignpostID.exclusive.getter(v27);
  v29 = OSSignposter.logHandle.getter(v28);
  v30 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
    v31 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v31 = 0;
    v33 = OSSignpostID.rawValue.getter(v31, v32);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v29, v30, v33, "ClassroomListItemProvider.updateUpdateClassroom completed", "", v31, 2u);
    swift_slowDealloc(v31, -1, -1);

    v34 = *(void (**)(char *, uint64_t))(v9 + 8);
    v34(v14, v8);
    return ((uint64_t (*)(char *, uint64_t))v34)(v12, v8);
  }
  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  }
}

uint64_t sub_100080524@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_1000076F0(*v1 + OBJC_IVAR____TtC11SettingsApp25ClassroomListItemProvider_id, a1, type metadata accessor for PrimarySettingsListItemIdentifier);
}

void sub_100080554(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10007EF58(a1, a2);
}

const char *sub_100080574()
{
  return "settingsUIVisible";
}

id sub_100080580@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "settingsUIVisible");
  *a2 = (_BYTE)result;
  return result;
}

uint64_t sub_1000805B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v4 = result;
    sub_10007FB78();
    return swift_release(v4);
  }
  return result;
}

void sub_100080604(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = objc_msgSend(*a1, "paneStatus");
  if (v3)
  {
    v4 = v3;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

uint64_t sub_100080668()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10008068C(uint64_t a1)
{
  uint64_t v1;

  return sub_1000805B0(a1, v1);
}

const char *sub_100080694()
{
  return "paneStatus";
}

uint64_t sub_1000806A4()
{
  uint64_t v0;

  return sub_10007FF20(v0);
}

uint64_t sub_1000806AC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000806D8()
{
  uint64_t v0;

  return sub_1000801FC(*(_BYTE *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

ValueMetadata *type metadata accessor for SettingsSearchListItemButtonStyle()
{
  return &type metadata for SettingsSearchListItemButtonStyle;
}

uint64_t sub_100080700(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10012AA24, 1);
}

uint64_t sub_100080710@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v19;

  v2 = type metadata accessor for ButtonStyleConfiguration.Label(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100004FC8(&qword_100159C50);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = ButtonStyleConfiguration.label.getter(v7);
  v11 = ButtonStyleConfiguration.isPressed.getter(v10);
  v12 = 0;
  if ((v11 & 1) != 0)
  {
    v13 = objc_msgSend((id)objc_opt_self(UIColor), "tableCellDefaultSelectionTintColor");
    v11 = Color.init(uiColor:)(v13);
    v12 = v11;
  }
  v14 = static Alignment.center.getter(v11);
  v16 = v15;
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v9, v5, v2);
  v17 = &v9[*(int *)(v6 + 36)];
  *(_QWORD *)v17 = v12;
  *((_QWORD *)v17 + 1) = v14;
  *((_QWORD *)v17 + 2) = v16;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return sub_100080854((uint64_t)v9, a1);
}

uint64_t sub_100080854(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004FC8(&qword_100159C50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000808A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159C58;
  if (!qword_100159C58)
  {
    v1 = sub_100005430(&qword_100159C50);
    sub_10008090C();
    sub_100080954();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100159C58);
  }
  return result;
}

unint64_t sub_10008090C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159C60;
  if (!qword_100159C60)
  {
    v1 = type metadata accessor for ButtonStyleConfiguration.Label(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for ButtonStyleConfiguration.Label, v1);
    atomic_store(result, (unint64_t *)&qword_100159C60);
  }
  return result;
}

unint64_t sub_100080954()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159C68;
  if (!qword_100159C68)
  {
    v1 = sub_100005430((uint64_t *)&unk_100159C70);
    result = swift_getWitnessTable(&protocol conformance descriptor for _BackgroundModifier<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100159C68);
  }
  return result;
}

id sub_1000809A0()
{
  char *v0;
  objc_class *ObjectType;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  objc_super v7;

  ObjectType = (objc_class *)swift_getObjectType(v0);
  v2 = OBJC_IVAR____TtC11SettingsApp31GeneralSettingsListItemProvider_softwareUpdateClient;
  v3 = *(void **)&v0[OBJC_IVAR____TtC11SettingsApp31GeneralSettingsListItemProvider_softwareUpdateClient];
  if (v3 && (objc_msgSend(v3, "setDelegate:", 0), (v4 = *(void **)&v0[v2]) != 0))
  {
    objc_msgSend(v4, "invalidate");
    v5 = *(void **)&v0[v2];
  }
  else
  {
    v5 = 0;
  }
  *(_QWORD *)&v0[v2] = 0;

  v7.receiver = v0;
  v7.super_class = ObjectType;
  return objc_msgSendSuper2(&v7, "dealloc");
}

uint64_t sub_100080AA4()
{
  return type metadata accessor for GeneralSettingsListItemProvider(0);
}

uint64_t type metadata accessor for GeneralSettingsListItemProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_100159CC0;
  if (!qword_100159CC0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for GeneralSettingsListItemProvider);
  return result;
}

void sub_100080AE8(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(char *, uint64_t, uint64_t);
  uint64_t (*v22)(uint64_t);
  uint64_t v23;
  id v24;
  unsigned int v25;
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v3 = v2;
  v43 = a2;
  v42 = type metadata accessor for PrimarySettingsListItemViewType(0);
  v5 = __chkstk_darwin(v42);
  v41 = (uint64_t)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (char *)&v38 - v7;
  v9 = type metadata accessor for PrimarySettingsListLinkModel(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100004FC8((uint64_t *)&unk_100156F00);
  __chkstk_darwin(v15);
  v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000076F0(v2 + OBJC_IVAR____TtC11SettingsApp31GeneralSettingsListItemProvider_id, (uint64_t)v14, type metadata accessor for PrimarySettingsListItemIdentifier);
  v18 = type metadata accessor for StaticPrimarySettingsListItemProvider(0);
  v19 = swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  sub_100007670((uint64_t)v14, v19 + OBJC_IVAR____TtC11SettingsApp37StaticPrimarySettingsListItemProvider_id, type metadata accessor for PrimarySettingsListItemIdentifier);
  sub_1000B2604(a1, (uint64_t)v17);
  swift_setDeallocating(v19);
  sub_1000076B4(v19 + OBJC_IVAR____TtC11SettingsApp37StaticPrimarySettingsListItemProvider_id, type metadata accessor for PrimarySettingsListItemIdentifier);
  swift_deallocClassInstance(v19, *(unsigned int *)(*(_QWORD *)v19 + 48), *(unsigned __int16 *)(*(_QWORD *)v19 + 52));
  if (*(_BYTE *)(v3 + OBJC_IVAR____TtC11SettingsApp31GeneralSettingsListItemProvider_badgedForSoftwareUpdate) == 1)
  {
    v20 = type metadata accessor for PrimarySettingsListItemModel(0);
    v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 48);
    if (!v21(v17, 1, v20))
    {
      sub_1000076F0((uint64_t)&v17[*(int *)(v20 + 20)], (uint64_t)v8, type metadata accessor for PrimarySettingsListItemViewType);
      if (swift_getEnumCaseMultiPayload(v8, v42) == 6)
      {
        sub_100007670((uint64_t)v8, (uint64_t)v11, type metadata accessor for PrimarySettingsListLinkModel);
        if (!v21(v17, 1, v20))
        {
          sub_1000076F0((uint64_t)v11, (uint64_t)v14, type metadata accessor for PrimarySettingsListItemIdentifier);
          v29 = *(int *)(v9 + 24);
          v40 = v11[*(int *)(v9 + 20)];
          v30 = *(_QWORD *)&v11[v29];
          v31 = *(_QWORD *)&v11[v29 + 8];
          v32 = v11[v29 + 16];
          v39 = *(_QWORD *)&v11[v29 + 24];
          v33 = v39;
          sub_10000BAD4(v30, v31, v32);
          swift_bridgeObjectRetain(v33);
          sub_1000076B4((uint64_t)v11, type metadata accessor for PrimarySettingsListLinkModel);
          v34 = (int *)type metadata accessor for PrimarySettingsListBadgedLinkModel(0);
          v35 = v41;
          v36 = v41 + v34[7];
          v38 = v34[9];
          sub_100007670((uint64_t)v14, v41, type metadata accessor for PrimarySettingsListItemIdentifier);
          *(_BYTE *)(v35 + v34[5]) = v40;
          v37 = v35 + v34[6];
          *(_QWORD *)v37 = v30;
          *(_QWORD *)(v37 + 8) = v31;
          *(_BYTE *)(v37 + 16) = v32;
          *(_QWORD *)(v37 + 24) = v39;
          *(_QWORD *)(v35 + v34[8]) = 1;
          *(_QWORD *)v36 = 0;
          *(_QWORD *)(v36 + 8) = 0;
          *(_BYTE *)(v36 + 16) = -1;
          *(_BYTE *)(v35 + v38) = 2;
          swift_storeEnumTagMultiPayload(v35, v42, 7);
          sub_100020188(v35, (uint64_t)&v17[*(int *)(v20 + 20)]);
          goto LABEL_8;
        }
        v22 = type metadata accessor for PrimarySettingsListLinkModel;
        v23 = (uint64_t)v11;
      }
      else
      {
        v22 = type metadata accessor for PrimarySettingsListItemViewType;
        v23 = (uint64_t)v8;
      }
      sub_1000076B4(v23, v22);
    }
  }
LABEL_8:
  sub_100007628((uint64_t)v17, v43);
  v24 = objc_msgSend((id)objc_opt_self(PSLaunchTracker), "sharedInstance");
  v25 = objc_msgSend(v24, "launchHasCompleted");

  if (v25)
  {
    v26 = OBJC_IVAR____TtC11SettingsApp31GeneralSettingsListItemProvider_softwareUpdateClient;
    if (!*(_QWORD *)(v3 + OBJC_IVAR____TtC11SettingsApp31GeneralSettingsListItemProvider_softwareUpdateClient))
    {
      if (qword_100156D60 != -1)
        swift_once(&qword_100156D60, sub_1000D34BC);
      v27 = objc_msgSend(objc_allocWithZone((Class)SUManagerClient), "initWithDelegate:queue:clientType:", v3, qword_10015D420, 1);
      v28 = *(void **)(v3 + v26);
      *(_QWORD *)(v3 + v26) = v27;

      sub_100080F28();
    }
  }
}

uint64_t sub_100080F28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_signpost_type_t v19;
  uint8_t *v20;
  uint8_t *v21;
  uint64_t v22;
  os_signpost_id_t v23;
  uint8_t *v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD aBlock[5];
  uint64_t v42;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v38 = *(_QWORD *)(v2 - 8);
  v39 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v36 = *(_QWORD *)(v5 - 8);
  v37 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OSSignpostID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v35 - v13;
  if (qword_100156CD8 != -1)
    swift_once(&qword_100156CD8, sub_10008BEEC);
  v15 = type metadata accessor for OSSignposter(0);
  v16 = sub_100007808(v15, (uint64_t)qword_10015D340);
  v17 = static OSSignpostID.exclusive.getter(v16);
  v18 = OSSignposter.logHandle.getter(v17);
  v19 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    v35 = v7;
    v21 = v20;
    *(_WORD *)v20 = 0;
    v23 = OSSignpostID.rawValue.getter(v20, v22);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, v19, v23, "GeneralSettingsListItemProvider.updateBadgeForSoftwareUpdate began", "", v21, 2u);
    v24 = v21;
    v1 = v0;
    v7 = v35;
    swift_slowDealloc(v24, -1, -1);

    v25 = *(void (**)(char *, uint64_t))(v9 + 8);
    v25(v14, v8);
    v25(v12, v8);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  }
  if (qword_100156D60 != -1)
    swift_once(&qword_100156D60, sub_1000D34BC);
  v26 = swift_allocObject(&unk_10014AD48, 24, 7);
  swift_unknownObjectWeakInit(v26 + 16, v1);
  aBlock[4] = sub_10008184C;
  v42 = v26;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100005350;
  aBlock[3] = &unk_10014AD60;
  v27 = _Block_copy(aBlock);
  v28 = swift_retain(v26);
  static DispatchQoS.unspecified.getter(v28);
  v40 = _swiftEmptyArrayStorage;
  v29 = sub_100012ED8();
  v30 = sub_100004FC8((uint64_t *)&unk_100156F40);
  v31 = sub_10000551C();
  v32 = v39;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v40, v30, v31, v39, v29);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v4, v27);
  _Block_release(v27);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v4, v32);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v7, v37);
  v33 = v42;
  swift_release(v26);
  return swift_release(v33);
}

uint64_t sub_1000812A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char IsBadgedForSoftwareUpdate;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD aBlock[5];
  uint64_t v23;

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  IsBadgedForSoftwareUpdate = SUSUISettingsIsBadgedForSoftwareUpdate(v8);
  v12 = sub_100005494();
  v13 = (void *)static OS_dispatch_queue.main.getter(v12);
  v14 = swift_allocObject(&unk_10014AD98, 25, 7);
  *(_QWORD *)(v14 + 16) = a1;
  *(_BYTE *)(v14 + 24) = IsBadgedForSoftwareUpdate;
  aBlock[4] = sub_100081878;
  v23 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100005350;
  aBlock[3] = &unk_10014ADB0;
  v15 = _Block_copy(aBlock);
  v16 = v23;
  swift_retain(a1);
  v17 = swift_release(v16);
  static DispatchQoS.unspecified.getter(v17);
  aBlock[0] = _swiftEmptyArrayStorage;
  v18 = sub_100012ED8();
  v19 = sub_100004FC8((uint64_t *)&unk_100156F40);
  v20 = sub_10000551C();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v19, v20, v2, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v5, v15);
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_100081478(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Strong;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_signpost_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  os_signpost_id_t v21;
  void (*v22)(char *, uint64_t);
  _QWORD v24[2];
  char v25;
  _BYTE v26[24];

  v4 = type metadata accessor for OSSignpostID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)v24 - v9;
  a1 += 16;
  swift_beginAccess(a1, v26, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a1);
  if (Strong)
  {
    v12 = (_BYTE *)Strong;
    v13 = OBJC_IVAR____TtC11SettingsApp31GeneralSettingsListItemProvider_badgedForSoftwareUpdate;
    if (*(_BYTE *)(Strong + OBJC_IVAR____TtC11SettingsApp31GeneralSettingsListItemProvider_badgedForSoftwareUpdate) != (a2 & 1))
    {
      sub_100007C2C((_QWORD *)(Strong + OBJC_IVAR____TtC11SettingsApp31GeneralSettingsListItemProvider_invalidator), *(_QWORD *)(Strong + OBJC_IVAR____TtC11SettingsApp31GeneralSettingsListItemProvider_invalidator + 24));
      v24[0] = "General Software Update Badge";
      v24[1] = 29;
      v25 = 2;
      PassthroughSubject.send(_:)(v24);
    }
    v12[v13] = a2 & 1;

  }
  if (qword_100156CD8 != -1)
    swift_once(&qword_100156CD8, sub_10008BEEC);
  v14 = type metadata accessor for OSSignposter(0);
  v15 = sub_100007808(v14, (uint64_t)qword_10015D340);
  v16 = static OSSignpostID.exclusive.getter(v15);
  v17 = OSSignposter.logHandle.getter(v16);
  v18 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v10, v4);
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    v21 = OSSignpostID.rawValue.getter(v19, v20);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, v18, v21, "GeneralSettingsListItemProvider.updateBadgeForSoftwareUpdate completed", "", v19, 2u);
    swift_slowDealloc(v19, -1, -1);

    v22 = *(void (**)(char *, uint64_t))(v5 + 8);
    v22(v10, v4);
    return ((uint64_t (*)(char *, uint64_t))v22)(v8, v4);
  }
  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  }
}

uint64_t sub_1000816D0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = type metadata accessor for PrimarySettingsListItemIdentifier(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100117850;
    v4[2] = &unk_100117868;
    v4[3] = &unk_100117880;
    result = swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_100081758@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_1000076F0(*v1 + OBJC_IVAR____TtC11SettingsApp31GeneralSettingsListItemProvider_id, a1, type metadata accessor for PrimarySettingsListItemIdentifier);
}

void sub_100081788(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100080AE8(a1, a2);
}

uint64_t sub_100081828()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10008184C()
{
  uint64_t v0;

  return sub_1000812A0(v0);
}

uint64_t sub_100081854()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

uint64_t sub_100081878()
{
  uint64_t v0;

  return sub_100081478(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

id sub_10008188C()
{
  char *v0;
  id result;
  void *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  objc_super v13;
  char v14[24];

  result = objc_msgSend((id)objc_opt_self(MCProfileConnection), "sharedConnection");
  if (!result)
    goto LABEL_16;
  v2 = result;
  objc_msgSend(result, "unregisterObserver:", v0);

  v12 = v0;
  v3 = (uint64_t *)&v0[OBJC_IVAR____TtC11SettingsApp27SettingsApplicationDelegate_observationTokens];
  swift_beginAccess(v3, v14, 1, 0);
  v4 = *v3;
  if ((unint64_t)*v3 >> 62)
  {
    if (v4 < 0)
      v10 = *v3;
    else
      v10 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v3);
    v5 = _CocoaArrayWrapper.endIndex.getter(v10);
    if (v5)
      goto LABEL_4;
LABEL_14:
    swift_bridgeObjectRelease(v4);
    v11 = *v3;
    *v3 = (uint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(v11);
    v13.receiver = v12;
    v13.super_class = (Class)type metadata accessor for SettingsApplicationDelegate(0);
    return objc_msgSendSuper2(&v13, "dealloc");
  }
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(*v3);
  if (!v5)
    goto LABEL_14;
LABEL_4:
  result = (id)objc_opt_self(NSNotificationCenter);
  if (v5 >= 1)
  {
    v6 = result;
    v7 = 0;
    do
    {
      if ((v4 & 0xC000000000000001) != 0)
      {
        v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v4);
      }
      else
      {
        v8 = *(_QWORD *)(v4 + 8 * v7 + 32);
        swift_unknownObjectRetain(v8);
      }
      ++v7;
      v9 = objc_msgSend(v6, "defaultCenter", v12);
      objc_msgSend(v9, "removeObserver:", v8);
      swift_unknownObjectRelease(v8);

    }
    while (v5 != v7);
    goto LABEL_14;
  }
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_100081AB8()
{
  return type metadata accessor for SettingsApplicationDelegate(0);
}

uint64_t type metadata accessor for SettingsApplicationDelegate(uint64_t a1)
{
  uint64_t result;

  result = qword_100159DD8;
  if (!qword_100159DD8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SettingsApplicationDelegate);
  return result;
}

void sub_100081BC8()
{
  sub_100081BF0();
}

void sub_100081BDC()
{
  sub_100081BF0();
}

void sub_100081BF0()
{
  id v0;
  NSString v1;

  v0 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  v1 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "postNotificationName:object:", v1, 0);

}

void sub_100081C6C()
{
  id v0;
  void *v1;
  int cellularDataCapability;
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  void *v15;
  void *v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  id v21;
  Class isa;

  v0 = (id)MobileGestalt_get_current_device();
  if (v0)
  {
    v1 = v0;
    cellularDataCapability = MobileGestalt_get_cellularDataCapability(v0);

    v3 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
    v4 = sub_100004FC8(&qword_100158C10);
    if (cellularDataCapability)
    {
      v5 = swift_allocObject(v4, 64, 7);
      *(_OWORD *)(v5 + 16) = xmmword_1001178C0;
      if (qword_100156D00 != -1)
        swift_once(&qword_100156D00, sub_1000ADBCC);
      v6 = (void *)qword_10015D3B0;
      *(_QWORD *)(v5 + 32) = qword_10015D3B0;
      v7 = qword_100156D08;
      v8 = v6;
      if (v7 != -1)
        swift_once(&qword_100156D08, sub_1000ADD38);
      v9 = (void *)qword_10015D3B8;
      *(_QWORD *)(v5 + 40) = qword_10015D3B8;
      v10 = qword_100156D10;
      v11 = v9;
      if (v10 != -1)
        swift_once(&qword_100156D10, sub_1000ADEC8);
      v12 = (void *)qword_10015D3C0;
      *(_QWORD *)(v5 + 48) = qword_10015D3C0;
      v13 = qword_100156D18;
      v14 = v12;
      if (v13 != -1)
        v14 = (id)swift_once(&qword_100156D18, sub_1000AE02C);
      v15 = (void *)qword_10015D3C8;
      *(_QWORD *)(v5 + 56) = qword_10015D3C8;
    }
    else
    {
      v5 = swift_allocObject(v4, 56, 7);
      *(_OWORD *)(v5 + 16) = xmmword_1001178B0;
      if (qword_100156D00 != -1)
        swift_once(&qword_100156D00, sub_1000ADBCC);
      v16 = (void *)qword_10015D3B0;
      *(_QWORD *)(v5 + 32) = qword_10015D3B0;
      v17 = qword_100156D08;
      v18 = v16;
      if (v17 != -1)
        swift_once(&qword_100156D08, sub_1000ADD38);
      v19 = (void *)qword_10015D3B8;
      *(_QWORD *)(v5 + 40) = qword_10015D3B8;
      v20 = qword_100156D18;
      v14 = v19;
      if (v20 != -1)
        v14 = (id)swift_once(&qword_100156D18, sub_1000AE02C);
      v15 = (void *)qword_10015D3C8;
      *(_QWORD *)(v5 + 48) = qword_10015D3C8;
    }
    specialized Array._endMutation()(v14);
    sub_1000826A8();
    v21 = v15;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v5);
    objc_msgSend(v3, "setShortcutItems:", isa);

  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100081FEC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1000820A0(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v6;
  id v7;
  id v8;

  if (a4)
    v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a4, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  else
    v6 = 0;
  v7 = a3;
  v8 = a1;
  sub_100082594(v6);

  return swift_bridgeObjectRelease(v6);
}

uint64_t sub_100082174()
{
  uint64_t v0;
  uint64_t result;
  void *v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void **v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t);
  void *v33;
  void (*v34)();
  uint64_t v35;

  result = (uint64_t)objc_msgSend((id)objc_opt_self(MCProfileConnection), "sharedConnection");
  if (result)
  {
    v2 = (void *)result;
    objc_msgSend((id)result, "registerObserver:", v0);

    v3 = (void *)objc_opt_self(NSNotificationCenter);
    v4 = objc_msgSend(v3, "defaultCenter");
    v5 = (void *)objc_opt_self(NSOperationQueue);
    v6 = objc_msgSend(v5, "mainQueue");
    v34 = sub_100081BC8;
    v35 = 0;
    v30 = _NSConcreteStackBlock;
    v31 = 1107296256;
    v32 = sub_1000A3448;
    v33 = &unk_10014ADE8;
    v7 = _Block_copy(&v30);
    v8 = objc_msgSend(v4, "addObserverForName:object:queue:usingBlock:", UIApplicationDidBecomeActiveNotification, 0, v6, v7);
    _Block_release(v7);

    v9 = (_QWORD *)(v0 + OBJC_IVAR____TtC11SettingsApp27SettingsApplicationDelegate_observationTokens);
    swift_beginAccess(v9, &v30, 33, 0);
    v10 = swift_unknownObjectRetain(v8);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v10);
    v12 = *(_QWORD *)((*v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v11 = *(_QWORD *)((*v9 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v12 >= v11 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
    v13 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v8);
    specialized Array._endMutation()(v13);
    swift_endAccess(&v30);
    v14 = objc_msgSend(v3, "defaultCenter");
    v15 = objc_msgSend(v5, "mainQueue");
    v34 = sub_100081BDC;
    v35 = 0;
    v30 = _NSConcreteStackBlock;
    v31 = 1107296256;
    v32 = sub_1000A3448;
    v33 = &unk_10014AE10;
    v16 = _Block_copy(&v30);
    v17 = objc_msgSend(v14, "addObserverForName:object:queue:usingBlock:", UIApplicationWillResignActiveNotification, 0, v15, v16);
    _Block_release(v16);

    swift_beginAccess(v9, &v30, 33, 0);
    v18 = swift_unknownObjectRetain(v17);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v18);
    v20 = *(_QWORD *)((*v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v19 = *(_QWORD *)((*v9 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v20 >= v19 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
    v21 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, v17);
    specialized Array._endMutation()(v21);
    swift_endAccess(&v30);
    v22 = objc_msgSend(v3, "defaultCenter");
    v23 = objc_msgSend(v5, "mainQueue");
    v34 = sub_100081C6C;
    v35 = 0;
    v30 = _NSConcreteStackBlock;
    v31 = 1107296256;
    v32 = sub_1000A3448;
    v33 = &unk_10014AE38;
    v24 = _Block_copy(&v30);
    v25 = objc_msgSend(v22, "addObserverForName:object:queue:usingBlock:", UIApplicationDidEnterBackgroundNotification, 0, v23, v24);
    _Block_release(v24);

    swift_beginAccess(v9, &v30, 33, 0);
    v26 = swift_unknownObjectRetain(v25);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v26);
    v28 = *(_QWORD *)((*v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v27 = *(_QWORD *)((*v9 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v28 >= v27 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1);
    v29 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v28, v25);
    specialized Array._endMutation()(v29);
    swift_endAccess(&v30);
    swift_unknownObjectRelease(v25);
    swift_unknownObjectRelease(v17);
    swift_unknownObjectRelease(v8);
    return 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100082594(uint64_t a1)
{
  uint64_t v1;
  id v3;
  NSString v4;
  NSDictionary v5;
  Class isa;

  v3 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  v4 = String._bridgeToObjectiveC()();
  if (a1)
    v5.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  else
    v5.super.isa = 0;
  isa = v5.super.isa;
  objc_msgSend(v3, "postNotificationName:object:userInfo:", v4, v1);

}

unint64_t sub_100082660()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159E50;
  if (!qword_100159E50)
  {
    type metadata accessor for LaunchOptionsKey(255);
    result = swift_getWitnessTable(&unk_100114070, v1);
    atomic_store(result, (unint64_t *)&qword_100159E50);
  }
  return result;
}

unint64_t sub_1000826A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159E60;
  if (!qword_100159E60)
  {
    v1 = objc_opt_self(UIApplicationShortcutItem);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100159E60);
  }
  return result;
}

uint64_t sub_1000826F4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain(v5);
  }
  else
  {
    v8 = a2[1];
    v9 = *((_BYTE *)a2 + 16);
    swift_retain(v5);
    sub_1000425D0(v8, v9);
    *(_QWORD *)(a1 + 8) = v8;
    *(_BYTE *)(a1 + 16) = v9;
    v10 = a2[3];
    v11 = *((_BYTE *)a2 + 32);
    *(_QWORD *)(a1 + 24) = v10;
    *(_BYTE *)(a1 + 32) = v11;
    v12 = *(int *)(a3 + 28);
    v13 = a1 + v12;
    v14 = (uint64_t)a2 + v12;
    swift_retain(v10);
    v15 = sub_100004FC8(&qword_100158E00);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t sub_1000827BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_release(*(_QWORD *)a1);
  sub_10004260C(*(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_release(*(_QWORD *)(a1 + 24));
  v4 = a1 + *(int *)(a2 + 28);
  v5 = sub_100004FC8(&qword_100158E00);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t sub_10008281C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *a2;
  v7 = a2[1];
  *(_QWORD *)a1 = *a2;
  v8 = *((_BYTE *)a2 + 16);
  swift_retain(v6);
  sub_1000425D0(v7, v8);
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  v9 = a2[3];
  v10 = *((_BYTE *)a2 + 32);
  *(_QWORD *)(a1 + 24) = v9;
  *(_BYTE *)(a1 + 32) = v10;
  v11 = *(int *)(a3 + 28);
  v12 = a1 + v11;
  v13 = (uint64_t)a2 + v11;
  swift_retain(v9);
  v14 = sub_100004FC8(&qword_100158E00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

uint64_t *sub_1000828BC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_retain(v6);
  swift_release(v7);
  v8 = a2[1];
  v9 = *((_BYTE *)a2 + 16);
  sub_1000425D0(v8, v9);
  v10 = a1[1];
  v11 = *((_BYTE *)a1 + 16);
  a1[1] = v8;
  *((_BYTE *)a1 + 16) = v9;
  sub_10004260C(v10, v11);
  v12 = a2[3];
  v13 = *((_BYTE *)a2 + 32);
  v14 = a1[3];
  a1[3] = v12;
  *((_BYTE *)a1 + 32) = v13;
  swift_retain(v12);
  swift_release(v14);
  v15 = *(int *)(a3 + 28);
  v16 = (uint64_t)a1 + v15;
  v17 = (uint64_t)a2 + v15;
  v18 = sub_100004FC8(&qword_100158E00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  return a1;
}

uint64_t sub_100082984(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(int *)(a3 + 28);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = sub_100004FC8(&qword_100158E00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t *sub_1000829FC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  v7 = *((_BYTE *)a2 + 16);
  v8 = a1[1];
  v9 = *((_BYTE *)a1 + 16);
  a1[1] = a2[1];
  *((_BYTE *)a1 + 16) = v7;
  sub_10004260C(v8, v9);
  v10 = *((_BYTE *)a2 + 32);
  v11 = a1[3];
  a1[3] = a2[3];
  *((_BYTE *)a1 + 32) = v10;
  swift_release(v11);
  v12 = *(int *)(a3 + 28);
  v13 = (uint64_t)a1 + v12;
  v14 = (uint64_t)a2 + v12;
  v15 = sub_100004FC8(&qword_100158E00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  return a1;
}

uint64_t sub_100082AA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100082AAC);
}

uint64_t sub_100082AAC(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100004FC8(&qword_100158E00);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 28)], a2, v8);
  }
}

uint64_t sub_100082B2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100082B38);
}

char *sub_100082B38(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_100004FC8(&qword_100158E00);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 28)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for PrimarySettingsList(uint64_t a1)
{
  uint64_t result;

  result = qword_100159EC0;
  if (!qword_100159EC0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PrimarySettingsList);
  return result;
}

void sub_100082BEC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = "\t";
  v4[2] = "\t";
  sub_100082C70(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
  }
}

void sub_100082C70(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100159ED0)
  {
    v2 = type metadata accessor for PrimarySettingsListModel(255);
    v3 = type metadata accessor for Bindable(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100159ED0);
  }
}

uint64_t sub_100082CC4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10012AB34, 1);
}

uint64_t sub_100082CD4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t KeyPath;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t OpaqueTypeConformance2;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t (**v99)(uint64_t);
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t *v130;
  char v131[16];
  uint64_t *v132;
  uint64_t (*v133)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  void *v138;

  v130 = a2;
  v125 = a1;
  v126 = a3;
  v124 = type metadata accessor for ScrollViewProxy(0);
  v119 = *(_QWORD *)(v124 - 8);
  __chkstk_darwin(v124);
  v118 = v3;
  v123 = (char *)&v101 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for PPTTestCase.Name(0);
  v121 = *(_QWORD *)(v4 - 8);
  v122 = v4;
  __chkstk_darwin(v4);
  v120 = (char *)&v101 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = type metadata accessor for InsetGroupedListStyle(0);
  v113 = *(_QWORD *)(v112 - 8);
  __chkstk_darwin(v112);
  v111 = (char *)&v101 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004FC8(&qword_100158E00);
  v102 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v101 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100004FC8(&qword_100159FB8);
  v11 = __chkstk_darwin(v10);
  v103 = (uint64_t)&v101 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (uint64_t *)((char *)&v101 - v13);
  v106 = sub_100004FC8(&qword_100159FC0);
  v105 = *(_QWORD *)(v106 - 8);
  __chkstk_darwin(v106);
  v16 = (char *)&v101 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = sub_100004FC8(&qword_100159FC8);
  __chkstk_darwin(v104);
  v18 = (char *)&v101 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = sub_100004FC8(&qword_100159FD0);
  __chkstk_darwin(v109);
  v107 = (uint64_t)&v101 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = sub_100004FC8(&qword_100159FD8);
  v110 = *(_QWORD *)(v127 - 8);
  __chkstk_darwin(v127);
  v108 = (char *)&v101 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = sub_100004FC8(&qword_100159FE0);
  v114 = *(_QWORD *)(v115 - 8);
  __chkstk_darwin(v115);
  v128 = (char *)&v101 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = sub_100004FC8(&qword_100159FE8);
  v116 = *(_QWORD *)(v117 - 8);
  __chkstk_darwin(v117);
  v129 = (char *)&v101 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PrimarySettingsList(0);
  Bindable.wrappedValue.getter(&v135);
  v23 = v135;
  v24 = sub_1000F49BC();
  v26 = v25;
  v28 = v27;
  swift_release(v23);
  swift_bridgeObjectRelease(v26);
  swift_bridgeObjectRelease(v28);
  Bindable.projectedValue.getter(v7);
  KeyPath = swift_getKeyPath(&unk_1001179D8);
  Bindable<A>.subscript.getter(v14, KeyPath, v7);
  swift_release(KeyPath);
  (*(void (**)(char *, uint64_t))(v102 + 8))(v9, v7);
  v30 = sub_100004FC8(&qword_100159FF0);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v14, 0, 1, v30);
  v135 = v24;
  v31 = v103;
  sub_100018C00((uint64_t)v14, v103, &qword_100159FB8);
  v132 = &v135;
  v133 = sub_1000836D4;
  v134 = 0;
  v32 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v33 = sub_100004FC8(&qword_100159FF8);
  v34 = sub_100007828((unint64_t *)&qword_100158000, type metadata accessor for PrimarySettingsListItemIdentifier, (uint64_t)&unk_1001188B8);
  v35 = sub_100084840();
  List.init(selection:content:)(v31, sub_100084834, v131, v32, v33, v34, v35);
  sub_10000BA50((uint64_t)v14, &qword_100159FB8);
  v36 = swift_bridgeObjectRelease(v135);
  v37 = static Animation.default.getter(v36);
  Bindable.wrappedValue.getter(&v135);
  v38 = v135;
  v39 = sub_1000F49BC();
  v41 = v40;
  v43 = v42;
  swift_release(v38);
  v44 = v105;
  v45 = v106;
  (*(void (**)(char *, char *, uint64_t))(v105 + 16))(v18, v16, v106);
  v46 = (uint64_t *)&v18[*(int *)(v104 + 36)];
  *v46 = v37;
  v46[1] = v39;
  v46[2] = v41;
  v46[3] = v43;
  v47 = v130;
  v48 = (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v16, v45);
  v49 = static Animation.default.getter(v48);
  v50 = v47[3];
  LOBYTE(v47) = *((_BYTE *)v47 + 32);
  v51 = swift_retain(v50);
  v52 = sub_10006342C(v51, (char)v47);
  swift_release(v50);
  v53 = swift_getKeyPath(&unk_1001179B0);
  v135 = v52;
  v54 = sub_100007828(&qword_100158B50, type metadata accessor for SettingsAppSearchViewModel, (uint64_t)&unk_1001166F4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v135, v53, v54);
  swift_release(v53);
  LOBYTE(v50) = *(_BYTE *)(v52 + 80);
  swift_release(v52);
  v55 = v107;
  sub_100018C00((uint64_t)v18, v107, &qword_100159FC8);
  v56 = v109;
  v57 = v55 + *(int *)(v109 + 36);
  *(_QWORD *)v57 = v49;
  *(_BYTE *)(v57 + 8) = v50;
  v58 = sub_10000BA50((uint64_t)v18, &qword_100159FC8);
  v59 = v111;
  InsetGroupedListStyle.init()(v58);
  v60 = sub_1000848E8();
  v61 = v108;
  v62 = v56;
  v63 = v56;
  v64 = v112;
  View.listStyle<A>(_:)(v59, v62, v112, v60, &protocol witness table for InsetGroupedListStyle);
  v65 = v64;
  (*(void (**)(char *, uint64_t))(v113 + 8))(v59, v64);
  sub_10000BA50(v55, &qword_100159FD0);
  v66 = LocalizedStringKey.init(stringLiteral:)(0x73676E6974746553, 0xE800000000000000);
  v67 = Text.init(_:tableName:bundle:comment:)(v66);
  v69 = v68;
  v71 = v70;
  v135 = v63;
  v136 = v65;
  v73 = v72 & 1;
  v137 = v60;
  v138 = &protocol witness table for InsetGroupedListStyle;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v135, &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>, 1);
  v75 = v127;
  View.navigationTitle(_:)(v67, v69, v73, v71, v127, OpaqueTypeConformance2);
  sub_100007618(v67, v69, v73);
  swift_bridgeObjectRelease(v71);
  (*(void (**)(char *, uint64_t))(v110 + 8))(v61, v75);
  if (qword_100156C58 != -1)
    swift_once(&qword_100156C58, sub_100062A88);
  v76 = v122;
  v77 = sub_100007808(v122, (uint64_t)qword_10015D1C0);
  v78 = v121;
  v79 = v120;
  (*(void (**)(char *, uint64_t, uint64_t))(v121 + 16))(v120, v77, v76);
  v80 = v119;
  v81 = v123;
  v82 = v124;
  v83 = v125;
  v113 = *(_QWORD *)(v119 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v113)(v123, v125, v124);
  v84 = *(unsigned __int8 *)(v80 + 80);
  v85 = (v84 + 16) & ~v84;
  v118 += v85;
  v112 = v84 | 7;
  v86 = swift_allocObject(&unk_10014AEA0, v118, v84 | 7);
  v119 = *(_QWORD *)(v80 + 32);
  ((void (*)(uint64_t, char *, uint64_t))v119)(v86 + v85, v81, v82);
  v135 = v127;
  v136 = OpaqueTypeConformance2;
  v87 = swift_getOpaqueTypeConformance2(&v135, &opaque type descriptor for <<opaque return type of View.navigationTitle(_:)>>, 1);
  v88 = v128;
  v89 = v115;
  View.onTest(_:handler:)(v79, sub_100084A0C, v86, v115, v87);
  swift_release(v86);
  (*(void (**)(char *, uint64_t))(v78 + 8))(v79, v76);
  (*(void (**)(char *, uint64_t))(v114 + 8))(v88, v89);
  v90 = *v130;
  if (qword_100156C30 != -1)
    swift_once(&qword_100156C30, sub_1000465F8);
  TaskLocal.get()(&v135);
  v91 = v135;
  v92 = sub_1000D8C18(v90, v135);
  swift_bridgeObjectRelease(v91);
  ((void (*)(char *, uint64_t, uint64_t))v113)(v81, v83, v82);
  v93 = swift_allocObject(&unk_10014AEC8, v118, v112);
  ((void (*)(uint64_t, char *, uint64_t))v119)(v93 + v85, v81, v82);
  v94 = v116;
  v95 = v126;
  v96 = v129;
  v97 = v117;
  (*(void (**)(uint64_t, char *, uint64_t))(v116 + 16))(v126, v129, v117);
  v98 = sub_100004FC8(&qword_10015A048);
  *(_QWORD *)(v95 + *(int *)(v98 + 52)) = v92;
  v99 = (uint64_t (**)(uint64_t))(v95 + *(int *)(v98 + 56));
  *v99 = sub_100084AB0;
  v99[1] = (uint64_t (*)(uint64_t))v93;
  return (*(uint64_t (**)(char *, uint64_t))(v94 + 8))(v96, v97);
}

uint64_t sub_1000836D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = *(_QWORD *)a1;
  v15 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  v18 = v4;
  v19 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 64);
  v10 = *(_QWORD *)(a1 + 80);
  v20 = *(_QWORD *)(a1 + 72);
  v17 = *(_QWORD *)(a1 + 88);
  v11 = *(_BYTE *)(a1 + 16);
  v16 = type metadata accessor for SettingsAppModel(0);
  sub_10000BA8C(v3, v15, v11);
  sub_10000BAA4(v4, v5, v6, v7);
  sub_10000BAA4(v9, v8, v20, v10);
  v12 = sub_100007828((unint64_t *)&qword_100159090, type metadata accessor for SettingsAppModel, (uint64_t)&unk_10011AF44);
  swift_bridgeObjectRetain(v17);
  result = Environment.init<A>(_:)(v16, v16, v12);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v14 & 1;
  *(_QWORD *)(a2 + 16) = v19;
  *(_QWORD *)(a2 + 24) = v15;
  *(_BYTE *)(a2 + 32) = v11;
  *(_QWORD *)(a2 + 40) = v18;
  *(_QWORD *)(a2 + 48) = v5;
  *(_QWORD *)(a2 + 56) = v6;
  *(_QWORD *)(a2 + 64) = v7;
  *(_QWORD *)(a2 + 72) = v9;
  *(_QWORD *)(a2 + 80) = v8;
  *(_QWORD *)(a2 + 88) = v20;
  *(_QWORD *)(a2 + 96) = v10;
  *(_QWORD *)(a2 + 104) = v17;
  return result;
}

uint64_t sub_100083804(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[6];

  v4[2] = a2;
  v4[3] = a1;
  v2 = static Animation.default.getter(a1);
  withAnimation<A>(_:_:)(v2, sub_100084AEC, v4, (char *)&type metadata for () + 8);
  return swift_release(v2);
}

uint64_t sub_100083860(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v4 = sub_100007828((unint64_t *)&qword_100158000, type metadata accessor for PrimarySettingsListItemIdentifier, (uint64_t)&unk_1001188B8);
  return ScrollViewProxy.scrollTo<A>(_:anchor:)(a2, 0, 0, 1, v3, v4);
}

uint64_t sub_1000838D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;

  v37 = a2;
  v3 = type metadata accessor for AccessibilityTraits(0);
  v4 = *(_QWORD *)(v3 - 8);
  v35 = v3;
  v36 = v4;
  __chkstk_darwin(v3);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004FC8(&qword_100159F18);
  __chkstk_darwin(v7);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_100004FC8(&qword_100159F20);
  v10 = __chkstk_darwin(v34);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v33 - v13;
  sub_100083C18();
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_BYTE *)(a1 + 32);
  v17 = swift_retain(v15);
  v18 = sub_10006342C(v17, v16);
  swift_release(v15);
  KeyPath = swift_getKeyPath(&unk_1001179B0);
  v38 = (_QWORD *)v18;
  v20 = sub_100007828(&qword_100158B50, type metadata accessor for SettingsAppSearchViewModel, (uint64_t)&unk_1001166F4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v38, KeyPath, v20);
  swift_release(KeyPath);
  LODWORD(v15) = *(unsigned __int8 *)(v18 + 80);
  swift_release(v18);
  v21 = sub_10007DB08(&qword_100159F28, &qword_100159F18, (void (*)(void))sub_100084570, (void (*)(void))sub_1000846AC);
  View.accessibilityHidden(_:)((_DWORD)v15 == 0, v7, v21);
  sub_10000BA50((uint64_t)v9, &qword_100159F18);
  v22 = *(_QWORD *)(a1 + 24);
  LOBYTE(v15) = *(_BYTE *)(a1 + 32);
  v23 = swift_retain(v22);
  v24 = sub_10006342C(v23, v15);
  swift_release(v22);
  v25 = swift_getKeyPath(&unk_1001179B0);
  v38 = (_QWORD *)v24;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v38, v25, v20);
  swift_release(v25);
  LODWORD(v25) = *(unsigned __int8 *)(v24 + 80);
  v26 = swift_release(v24);
  if ((_DWORD)v25)
  {
    static AccessibilityTraits.isModal.getter(v26);
    v27 = v35;
  }
  else
  {
    v38 = _swiftEmptyArrayStorage;
    v28 = sub_100007828(&qword_100159F90, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityTraits, (uint64_t)&protocol conformance descriptor for AccessibilityTraits);
    v29 = sub_100004FC8(&qword_100159F98);
    v30 = sub_100007868(&qword_100159FA0, &qword_100159F98, (uint64_t)&protocol conformance descriptor for [A]);
    v31 = v35;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v38, v29, v30, v35, v28);
    v27 = v31;
  }
  ModifiedContent<>.accessibilityAddTraits(_:)(v6, v34);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v6, v27);
  sub_10000BA50((uint64_t)v12, &qword_100159F20);
  return sub_10007E96C((uint64_t)v14, v37, &qword_100159F20);
}

void sub_100083C18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  v1 = sub_100004FC8(&qword_100159F88);
  __chkstk_darwin(v1);
  v14 = sub_100004FC8(&qword_100159F78);
  v2 = __chkstk_darwin(v14);
  __chkstk_darwin(v2);
  v12 = sub_100004FC8(&qword_100159FA8);
  __chkstk_darwin(v12);
  v13 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_QWORD *)(v0 + 24);
  v5 = *(_BYTE *)(v0 + 32);
  v6 = swift_retain(v4);
  v7 = sub_10006342C(v6, v5);
  swift_release(v4);
  KeyPath = swift_getKeyPath(&unk_1001179B0);
  v15 = v7;
  v9 = sub_100007828(&qword_100158B50, type metadata accessor for SettingsAppSearchViewModel, (uint64_t)&unk_1001166F4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v15, KeyPath, v9);
  swift_release(KeyPath);
  v10 = *(unsigned __int8 *)(v7 + 80);
  swift_release(v7);
  __asm { BR              X9 }
}

uint64_t sub_100083DB0()
{
  uint64_t v0;
  unint64_t v1;
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int16 v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  *(_QWORD *)(v0 - 112) = 0;
  *(_WORD *)(v0 - 104) = 0;
  v1 = sub_100084600();
  _ConditionalContent<>.init(storage:)(v0 - 112, &type metadata for EmptyView, &type metadata for SettingsSearchZeroKeywordList, &protocol witness table for EmptyView, v1);
  v2 = *(unsigned __int8 *)(v0 - 88);
  if (*(_BYTE *)(v0 - 87))
    v3 = 256;
  else
    v3 = 0;
  *(_QWORD *)(v0 - 112) = *(_QWORD *)(v0 - 96);
  *(_WORD *)(v0 - 104) = v3 | v2;
  *(_BYTE *)(v0 - 102) = 0;
  v4 = sub_100004FC8(&qword_100159F48);
  v5 = sub_100004FC8(&qword_100159F60);
  v6 = sub_100084594();
  v7 = sub_100084644();
  _ConditionalContent<>.init(storage:)(v0 - 112, v4, v5, v6, v7);
  v8 = *(_WORD *)(v0 - 88);
  v9 = *(_BYTE *)(v0 - 86);
  v10 = *(_QWORD *)(v0 - 136);
  v11 = *(_QWORD *)(v0 - 128);
  *(_QWORD *)v11 = *(_QWORD *)(v0 - 96);
  *(_WORD *)(v11 + 8) = v8;
  *(_BYTE *)(v11 + 10) = v9;
  swift_storeEnumTagMultiPayload(v11, v10, 0);
  v12 = sub_100004FC8(&qword_100159F38);
  v13 = sub_100084570();
  v14 = sub_1000846AC();
  return _ConditionalContent<>.init(storage:)(v11, v12, *(_QWORD *)(v0 - 120), v13, v14);
}

uint64_t sub_1000842AC@<X0>(uint64_t a1@<X0>, uint64_t (**a2)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v23;

  v4 = v2;
  v6 = sub_100004FC8(&qword_100159F08);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a1 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v7);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000843F0(v4, (uint64_t)v12);
  v13 = *(unsigned __int8 *)(v10 + 80);
  v14 = (v13 + 16) & ~v13;
  v15 = swift_allocObject(&unk_10014AE78, v14 + v11, v13 | 7);
  v16 = sub_1000844D8((uint64_t)v12, v15 + v14);
  v17 = static Alignment.center.getter(v16);
  v19 = v18;
  sub_1000838D8(v4, (uint64_t)v9);
  v20 = (uint64_t *)&v9[*(int *)(v6 + 36)];
  *v20 = v17;
  v20[1] = v19;
  v21 = sub_100004FC8(&qword_100159F10);
  sub_100018C00((uint64_t)v9, (uint64_t)a2 + *(int *)(v21 + 36), &qword_100159F08);
  *a2 = sub_10008451C;
  a2[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v15;
  return sub_10000BA50((uint64_t)v9, &qword_100159F08);
}

uint64_t sub_1000843F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PrimarySettingsList(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100084434()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for PrimarySettingsList(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  swift_release(*(_QWORD *)(v0 + v4));
  sub_10004260C(*(_QWORD *)(v7 + 8), *(_BYTE *)(v7 + 16));
  swift_release(*(_QWORD *)(v7 + 24));
  v8 = v7 + *(int *)(v1 + 28);
  v9 = sub_100004FC8(&qword_100158E00);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000844D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PrimarySettingsList(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10008451C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PrimarySettingsList(0) - 8) + 80);
  return sub_100082CD4(a1, (uint64_t *)(v2 + ((v5 + 16) & ~v5)), a2);
}

uint64_t sub_100084570()
{
  return sub_10007DB08(&qword_100159F30, &qword_100159F38, (void (*)(void))sub_100084594, (void (*)(void))sub_100084644);
}

unint64_t sub_100084594()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159F40;
  if (!qword_100159F40)
  {
    v1 = sub_100005430(&qword_100159F48);
    sub_100084600();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100159F40);
  }
  return result;
}

unint64_t sub_100084600()
{
  unint64_t result;

  result = qword_100159F50;
  if (!qword_100159F50)
  {
    result = swift_getWitnessTable(&unk_10011B890, &type metadata for SettingsSearchZeroKeywordList);
    atomic_store(result, (unint64_t *)&qword_100159F50);
  }
  return result;
}

uint64_t sub_100084644()
{
  return sub_10007DB08(&qword_100159F58, &qword_100159F60, (void (*)(void))sub_100084600, (void (*)(void))sub_100084668);
}

unint64_t sub_100084668()
{
  unint64_t result;

  result = qword_100159F68;
  if (!qword_100159F68)
  {
    result = swift_getWitnessTable(&unk_10011680C, &type metadata for SettingsSearchResultsList);
    atomic_store(result, (unint64_t *)&qword_100159F68);
  }
  return result;
}

unint64_t sub_1000846AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159F70;
  if (!qword_100159F70)
  {
    v1 = sub_100005430(&qword_100159F78);
    sub_100007868(&qword_100159F80, &qword_100159F88, (uint64_t)&protocol conformance descriptor for ContentUnavailableView<A, B, C>);
    sub_100007868(&qword_100158CD0, &qword_100158CD8, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100159F70);
  }
  return result;
}

uint64_t sub_100084750(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v12 = *a1;
  v5 = v12;
  v6 = swift_allocObject(&unk_10014AEF0, 32, 7);
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = a3;
  swift_bridgeObjectRetain(v5);
  swift_retain(a3);
  v7 = sub_100004FC8(&qword_10015A050);
  v8 = sub_100007868(&qword_10015A058, &qword_10015A050, (uint64_t)&protocol conformance descriptor for [A]);
  v9 = sub_1000848A4();
  v10 = sub_100084BE8();
  return ForEach<>.init(_:content:)(&v12, sub_100084BE0, v6, v7, &type metadata for PrimarySettingsListSectionIdentifier, &type metadata for PrimarySettingsListSection, v8, v9, v10);
}

uint64_t sub_100084834()
{
  uint64_t v0;

  return sub_100084750(*(uint64_t **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

unint64_t sub_100084840()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015A000;
  if (!qword_10015A000)
  {
    v1 = sub_100005430(&qword_100159FF8);
    sub_1000848A4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_10015A000);
  }
  return result;
}

unint64_t sub_1000848A4()
{
  unint64_t result;

  result = qword_10015A008;
  if (!qword_10015A008)
  {
    result = swift_getWitnessTable(&unk_100117CCC, &type metadata for PrimarySettingsListSection);
    atomic_store(result, (unint64_t *)&qword_10015A008);
  }
  return result;
}

unint64_t sub_1000848E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015A010;
  if (!qword_10015A010)
  {
    v1 = sub_100005430(&qword_100159FD0);
    sub_10008496C();
    sub_100007868(&qword_10015A038, &qword_10015A040, (uint64_t)&protocol conformance descriptor for _AnimationModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015A010);
  }
  return result;
}

unint64_t sub_10008496C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015A018;
  if (!qword_10015A018)
  {
    v1 = sub_100005430(&qword_100159FC8);
    sub_100007868(&qword_10015A020, &qword_100159FC0, (uint64_t)&protocol conformance descriptor for List<A, B>);
    sub_100007868(&qword_10015A028, &qword_10015A030, (uint64_t)&protocol conformance descriptor for _AnimationModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015A018);
  }
  return result;
}

uint64_t sub_100084A0C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ScrollViewProxy(0) - 8) + 80);
  return PPTTestCase.performScrollTest(_:)(v0 + ((v1 + 16) & ~v1));
}

uint64_t sub_100084A50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for ScrollViewProxy(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100084AB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ScrollViewProxy(0) - 8) + 80);
  return sub_100083804(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_100084AEC()
{
  uint64_t v0;

  return sub_100083860(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

__n128 sub_100084B04@<Q0>(__int128 *a1@<X0>, void (*a2)(uint64_t *__return_ptr, __int128 *)@<X1>, uint64_t a3@<X8>)
{
  char v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  __n128 result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  char v15;
  __n128 v16;
  char v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v4 = *((_BYTE *)a1 + 16);
  v5 = *((_QWORD *)a1 + 11);
  v23 = *a1;
  v24 = v4;
  v25 = *(__int128 *)((char *)a1 + 24);
  v26 = *(__int128 *)((char *)a1 + 40);
  v27 = *(__int128 *)((char *)a1 + 56);
  v28 = *(__int128 *)((char *)a1 + 72);
  v29 = v5;
  a2(&v14, &v23);
  v6 = v15;
  v7 = v17;
  v8 = v22;
  result = v16;
  v10 = v18;
  v11 = v19;
  v12 = v20;
  v13 = v21;
  *(_QWORD *)a3 = v14;
  *(_BYTE *)(a3 + 8) = v6;
  *(__n128 *)(a3 + 16) = result;
  *(_BYTE *)(a3 + 32) = v7;
  *(_OWORD *)(a3 + 40) = v10;
  *(_OWORD *)(a3 + 56) = v11;
  *(_OWORD *)(a3 + 72) = v12;
  *(_OWORD *)(a3 + 88) = v13;
  *(_QWORD *)(a3 + 104) = v8;
  return result;
}

uint64_t sub_100084BBC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

double sub_100084BE0@<D0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  *(_QWORD *)&result = sub_100084B04(a1, (void (*)(uint64_t *__return_ptr, __int128 *))*(_QWORD *)(v2 + 16), a2).n128_u64[0];
  return result;
}

unint64_t sub_100084BE8()
{
  unint64_t result;

  result = qword_10015A060;
  if (!qword_10015A060)
  {
    result = swift_getWitnessTable(&unk_100115320, &type metadata for PrimarySettingsListSectionModel);
    atomic_store(result, (unint64_t *)&qword_10015A060);
  }
  return result;
}

unint64_t sub_100084C30()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015A068;
  if (!qword_10015A068)
  {
    v1 = sub_100005430(&qword_100159F10);
    sub_100007868(&qword_10015A070, &qword_10015A078, (uint64_t)&protocol conformance descriptor for ScrollViewReader<A>);
    sub_100007868(&qword_10015A080, &qword_100159F08, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015A068);
  }
  return result;
}

_QWORD *sub_100084CCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[24];
  _QWORD v30[5];

  swift_beginAccess(v0 + 24, v29, 1, 0);
  v1 = *(_QWORD *)(v0 + 24);
  v26 = v0;
  if ((v1 & 0xC000000000000001) != 0)
  {
    if (v1 < 0)
      v2 = *(_QWORD *)(v0 + 24);
    else
      v2 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = type metadata accessor for AnyCancellable(0);
    v5 = sub_100007828((unint64_t *)&qword_100156FB8, (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable, (uint64_t)&protocol conformance descriptor for AnyCancellable);
    result = Set.Iterator.init(_cocoa:)(v30, v3, v4, v5);
    v1 = v30[0];
    v7 = v30[1];
    v8 = v30[2];
    v9 = v30[3];
    v10 = v30[4];
  }
  else
  {
    v11 = -1 << *(_BYTE *)(v1 + 32);
    v7 = v1 + 56;
    v8 = ~v11;
    v12 = -v11;
    if (v12 < 64)
      v13 = ~(-1 << v12);
    else
      v13 = -1;
    v10 = v13 & *(_QWORD *)(v1 + 56);
    result = (_QWORD *)swift_bridgeObjectRetain(v1);
    v9 = 0;
  }
  v14 = (unint64_t)(v8 + 64) >> 6;
  if (v1 < 0)
    goto LABEL_13;
  while (1)
  {
    if (v10)
    {
      v15 = (v10 - 1) & v10;
      v16 = __clz(__rbit64(v10)) | (v9 << 6);
      v17 = v9;
      goto LABEL_30;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
      break;
    if (v22 >= v14)
      goto LABEL_33;
    v23 = *(_QWORD *)(v7 + 8 * v22);
    v17 = v9 + 1;
    if (!v23)
    {
      v17 = v9 + 2;
      if (v9 + 2 >= v14)
        goto LABEL_33;
      v23 = *(_QWORD *)(v7 + 8 * v17);
      if (!v23)
      {
        v17 = v9 + 3;
        if (v9 + 3 >= v14)
          goto LABEL_33;
        v23 = *(_QWORD *)(v7 + 8 * v17);
        if (!v23)
        {
          v17 = v9 + 4;
          if (v9 + 4 >= v14)
            goto LABEL_33;
          v23 = *(_QWORD *)(v7 + 8 * v17);
          if (!v23)
          {
            v24 = v9 + 5;
            while (v14 != v24)
            {
              v23 = *(_QWORD *)(v7 + 8 * v24++);
              if (v23)
              {
                v17 = v24 - 1;
                goto LABEL_29;
              }
            }
LABEL_33:
            sub_100007C50(v1);
            v25 = *(_QWORD *)(v26 + 24);
            *(_QWORD *)(v26 + 24) = &_swiftEmptySetSingleton;
            swift_bridgeObjectRelease(v25);
            sub_100013014(v26 + OBJC_IVAR____TtC11SettingsApp31AppInstallationListItemProvider_id);
            sub_100005474((_QWORD *)(v26 + OBJC_IVAR____TtC11SettingsApp31AppInstallationListItemProvider_invalidator));
            return (_QWORD *)v26;
          }
        }
      }
    }
LABEL_29:
    v15 = (v23 - 1) & v23;
    v16 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_30:
    v21 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v16);
    swift_retain(v21);
    if (!v21)
      goto LABEL_33;
    while (1)
    {
      AnyCancellable.cancel()();
      result = (_QWORD *)swift_release(v21);
      v9 = v17;
      v10 = v15;
      if ((v1 & 0x8000000000000000) == 0)
        break;
LABEL_13:
      v18 = __CocoaSet.Iterator.next()(result);
      if (v18)
      {
        v19 = v18;
        v27 = v18;
        v20 = type metadata accessor for AnyCancellable(0);
        swift_unknownObjectRetain(v19);
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v20, 7);
        v21 = v28;
        swift_unknownObjectRelease(v19);
        v17 = v9;
        v15 = v10;
        if (v21)
          continue;
      }
      goto LABEL_33;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100084F84()
{
  uint64_t v0;

  sub_100084CCC();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100084FA8()
{
  return type metadata accessor for AppInstallationListItemProvider(0);
}

uint64_t type metadata accessor for AppInstallationListItemProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_10015A0B8;
  if (!qword_10015A0B8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AppInstallationListItemProvider);
  return result;
}

uint64_t sub_100084FEC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_100117A30;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for PrimarySettingsListItemIdentifier(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = &unk_100117A48;
    result = swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

void sub_100085078(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = v2;
  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v3 + 16) == 1)
  {
    sub_100012DC4(v3 + OBJC_IVAR____TtC11SettingsApp31AppInstallationListItemProvider_id, (uint64_t)v8);
    v9 = type metadata accessor for StaticPrimarySettingsListItemProvider(0);
    v10 = swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
    sub_10000F48C((uint64_t)v8, v10 + OBJC_IVAR____TtC11SettingsApp37StaticPrimarySettingsListItemProvider_id);
    sub_1000B2604(a1, a2);
    swift_setDeallocating(v10);
    sub_100013014(v10 + OBJC_IVAR____TtC11SettingsApp37StaticPrimarySettingsListItemProvider_id);
    swift_deallocClassInstance(v10, *(unsigned int *)(*(_QWORD *)v10 + 48), *(unsigned __int16 *)(*(_QWORD *)v10 + 52));
  }
  else
  {
    v11 = type metadata accessor for PrimarySettingsListItemModel(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a2, 1, 1, v11);
  }
  sub_1000851B4(v3);
}

void sub_1000851B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  id v38[3];
  _BYTE v39[24];

  v2 = sub_100004FC8(&qword_10015C5A0);
  __chkstk_darwin(v2);
  v37 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100004FC8((uint64_t *)&unk_10015C970);
  __chkstk_darwin(v4);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for NSNotificationCenter.Publisher(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004FC8((uint64_t *)&unk_100156F10);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = objc_msgSend((id)objc_opt_self(PSLaunchTracker), "sharedInstance");
  v16 = objc_msgSend(v15, "launchHasCompleted");

  if (v16)
  {
    v36 = a1 + 24;
    swift_beginAccess(a1 + 24, v39, 0, 0);
    v17 = a1;
    v18 = *(_QWORD *)(a1 + 24);
    if ((v18 & 0xC000000000000001) != 0)
    {
      if (v18 < 0)
        v19 = *(_QWORD *)(a1 + 24);
      else
        v19 = v18 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v18);
      v20 = __CocoaSet.count.getter(v19);
      swift_bridgeObjectRelease(v18);
      if (!v20)
        goto LABEL_7;
    }
    else if (!*(_QWORD *)(v18 + 16))
    {
LABEL_7:
      v21 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
      v22 = (void *)static AppDistributor.AppDistributorsOrTrustedDevelopersChangedNotification.getter();
      NSNotificationCenter.publisher(for:object:)(v22, 0);

      v23 = sub_100005494();
      v38[0] = (id)static OS_dispatch_queue.main.getter(v23);
      v24 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v6, 1, 1, v24);
      v25 = sub_100007828((unint64_t *)&unk_100156F20, (uint64_t (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Publisher, (uint64_t)&protocol conformance descriptor for NSNotificationCenter.Publisher);
      v26 = sub_100007828((unint64_t *)&qword_10015C990, (uint64_t (*)(uint64_t))sub_100005494, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
      Publisher.receive<A>(on:options:)(v38, v6, v7, v23, v25, v26);
      sub_10000BA50((uint64_t)v6, (uint64_t *)&unk_10015C970);

      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      v27 = swift_allocObject(&unk_10014AF70, 24, 7);
      swift_weakInit(v27 + 16, v17);
      v28 = sub_100016204();
      v29 = Publisher<>.sink(receiveValue:)(sub_100085944, v27, v11, v28);
      swift_release(v27);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
      v30 = v36;
      swift_beginAccess(v36, v38, 33, 0);
      AnyCancellable.store(in:)(v30);
      swift_endAccess(v38);
      v31 = swift_release(v29);
      v32 = (uint64_t)v37;
      static TaskPriority.userInitiated.getter(v31);
      v33 = type metadata accessor for TaskPriority(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v32, 0, 1, v33);
      v34 = (_QWORD *)swift_allocObject(&unk_10014AF98, 40, 7);
      v34[2] = 0;
      v34[3] = 0;
      v34[4] = v17;
      swift_retain(v17);
      v35 = sub_10004CF9C(v32, (uint64_t)&unk_10015A160, (uint64_t)v34);
      swift_release(v35);
      sub_10000BA50(v32, &qword_10015C5A0);
    }
  }
}

uint64_t sub_10008558C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  *(_QWORD *)(v4 + 24) = a4;
  v5 = (_QWORD *)swift_task_alloc(async function pointer to static AppDistributor.shouldShowAppInstallationSettings()[1]);
  *(_QWORD *)(v4 + 32) = v5;
  *v5 = v4;
  v5[1] = sub_1000855D8;
  return static AppDistributor.shouldShowAppInstallationSettings()();
}

uint64_t sub_1000855D8(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 32);
  *(_BYTE *)(*(_QWORD *)v1 + 49) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100085634, 0, 0);
}

uint64_t sub_100085634()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_weakInit(v0 + 16, *(_QWORD *)(v0 + 24));
  v1 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v0 + 40) = static MainActor.shared.getter(v1);
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000856A8, v2, v3);
}

uint64_t sub_1000856A8()
{
  uint64_t v0;
  char v1;

  v1 = *(_BYTE *)(v0 + 49);
  swift_release(*(_QWORD *)(v0 + 40));
  sub_100085708(v0 + 16, v1, (BOOL *)(v0 + 48));
  swift_weakDestroy(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100085708@<X0>(uint64_t a1@<X0>, char a2@<W1>, BOOL *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  _QWORD v8[2];
  char v9;
  _BYTE v10[24];

  swift_beginAccess(a1, v10, 0, 0);
  result = swift_weakLoadStrong(a1);
  v7 = result;
  if (result)
  {
    if (*(_BYTE *)(result + 16) != (a2 & 1))
    {
      sub_100007C2C((_QWORD *)(result + OBJC_IVAR____TtC11SettingsApp31AppInstallationListItemProvider_invalidator), *(_QWORD *)(result + OBJC_IVAR____TtC11SettingsApp31AppInstallationListItemProvider_invalidator + 24));
      v8[0] = "App Installation";
      v8[1] = 16;
      v9 = 2;
      PassthroughSubject.send(_:)(v8);
    }
    *(_BYTE *)(v7 + 16) = a2 & 1;
    result = swift_release(v7);
  }
  *a3 = v7 == 0;
  return result;
}

uint64_t sub_1000857D8@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_100012DC4(*v1 + OBJC_IVAR____TtC11SettingsApp31AppInstallationListItemProvider_id, a1);
}

void sub_1000857F0(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100085078(a1, a2);
}

uint64_t sub_100085810()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100085834(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _BYTE v12[24];

  v3 = sub_100004FC8(&qword_10015C5A0);
  __chkstk_darwin(v3);
  v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a2 += 16;
  swift_beginAccess(a2, v12, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v7 = result;
    static TaskPriority.userInitiated.getter();
    v8 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v5, 0, 1, v8);
    v9 = (_QWORD *)swift_allocObject(&unk_10014AFC0, 40, 7);
    v9[2] = 0;
    v9[3] = 0;
    v9[4] = v7;
    swift_retain(v7);
    v10 = sub_10004CF9C((uint64_t)v5, (uint64_t)&unk_10015A168, (uint64_t)v9);
    swift_release(v10);
    sub_10000BA50((uint64_t)v5, &qword_10015C5A0);
    return swift_release(v7);
  }
  return result;
}

uint64_t sub_100085944(uint64_t a1)
{
  uint64_t v1;

  return sub_100085834(a1, v1);
}

uint64_t sub_100085950()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_10015A15C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1000570A0;
  v3[3] = v2;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to static AppDistributor.shouldShowAppInstallationSettings()[1]);
  v3[4] = v4;
  *v4 = v3;
  v4[1] = sub_1000855D8;
  return static AppDistributor.shouldShowAppInstallationSettings()();
}

uint64_t sub_1000859C4()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000859F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_10015A15C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1000526BC;
  v3[3] = v2;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to static AppDistributor.shouldShowAppInstallationSettings()[1]);
  v3[4] = v4;
  *v4 = v3;
  v4[1] = sub_1000855D8;
  return static AppDistributor.shouldShowAppInstallationSettings()();
}

uint64_t destroy for PrimarySettingsListFollowUpHeaderModel(uint64_t a1)
{
  uint64_t result;
  int v3;

  sub_100007618(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  sub_100007618(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
  result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
  v3 = *(unsigned __int8 *)(a1 + 80);
  if (v3 != 255)
    return sub_10000BB54(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), v3);
  return result;
}

uint64_t initializeWithCopy for PrimarySettingsListFollowUpHeaderModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_10000BAD4(*(_QWORD *)a2, v5, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v7;
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_BYTE *)(a2 + 48);
  swift_bridgeObjectRetain(v7);
  sub_10000BAD4(v8, v9, v10);
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_BYTE *)(a1 + 48) = v10;
  v11 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v11;
  v12 = *(unsigned __int8 *)(a2 + 80);
  swift_bridgeObjectRetain(v11);
  if (v12 == 255)
  {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  }
  else
  {
    v14 = *(_QWORD *)(a2 + 64);
    v13 = *(_QWORD *)(a2 + 72);
    sub_10000BB2C(v14, v13, v12);
    *(_QWORD *)(a1 + 64) = v14;
    *(_QWORD *)(a1 + 72) = v13;
    *(_BYTE *)(a1 + 80) = v12;
  }
  return a1;
}

uint64_t assignWithCopy for PrimarySettingsListFollowUpHeaderModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  __int128 *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  __int128 v31;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_10000BAD4(*(_QWORD *)a2, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  sub_100007618(v7, v8, v9);
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 32);
  v13 = *(_QWORD *)(a2 + 40);
  v14 = *(_BYTE *)(a2 + 48);
  sub_10000BAD4(v12, v13, v14);
  v15 = *(_QWORD *)(a1 + 32);
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = v12;
  *(_QWORD *)(a1 + 40) = v13;
  *(_BYTE *)(a1 + 48) = v14;
  sub_100007618(v15, v16, v17);
  v18 = *(_QWORD *)(a2 + 56);
  v19 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  v20 = (__int128 *)(a1 + 64);
  v21 = (__int128 *)(a2 + 64);
  v22 = *(unsigned __int8 *)(a2 + 80);
  if (*(unsigned __int8 *)(a1 + 80) == 255)
  {
    if (v22 == 255)
    {
      v31 = *v21;
      *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
      *v20 = v31;
    }
    else
    {
      v29 = *(_QWORD *)(a2 + 64);
      v28 = *(_QWORD *)(a2 + 72);
      sub_10000BB2C(v29, v28, v22);
      *(_QWORD *)(a1 + 64) = v29;
      *(_QWORD *)(a1 + 72) = v28;
      *(_BYTE *)(a1 + 80) = v22;
    }
  }
  else if (v22 == 255)
  {
    sub_100010D24(a1 + 64);
    v30 = *(_BYTE *)(a2 + 80);
    *v20 = *v21;
    *(_BYTE *)(a1 + 80) = v30;
  }
  else
  {
    v24 = *(_QWORD *)(a2 + 64);
    v23 = *(_QWORD *)(a2 + 72);
    sub_10000BB2C(v24, v23, v22);
    v25 = *(_QWORD *)(a1 + 64);
    v26 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 64) = v24;
    *(_QWORD *)(a1 + 72) = v23;
    v27 = *(_BYTE *)(a1 + 80);
    *(_BYTE *)(a1 + 80) = v22;
    sub_10000BB54(v25, v26, v27);
  }
  return a1;
}

__n128 initializeWithTake for PrimarySettingsListFollowUpHeaderModel(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for PrimarySettingsListFollowUpHeaderModel(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  _OWORD *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  sub_100007618(v5, v6, v7);
  v8 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v8);
  v9 = *(_BYTE *)(a2 + 48);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_BYTE *)(a1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = v9;
  sub_100007618(v10, v11, v12);
  v13 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v13);
  v14 = (_OWORD *)(a2 + 64);
  v15 = *(unsigned __int8 *)(a1 + 80);
  if (v15 == 255)
    goto LABEL_5;
  v16 = *(unsigned __int8 *)(a2 + 80);
  if (v16 == 255)
  {
    sub_100010D24(a1 + 64);
LABEL_5:
    *(_OWORD *)(a1 + 64) = *v14;
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
    return a1;
  }
  v17 = *(_QWORD *)(a1 + 64);
  v18 = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 64) = *v14;
  *(_BYTE *)(a1 + 80) = v16;
  sub_10000BB54(v17, v18, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for PrimarySettingsListFollowUpHeaderModel(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 81))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PrimarySettingsListFollowUpHeaderModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 80) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 81) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 81) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PrimarySettingsListFollowUpHeader()
{
  return &type metadata for PrimarySettingsListFollowUpHeader;
}

uint64_t sub_100085E9C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10012ABC0, 1);
}

uint64_t sub_100085EAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t KeyPath;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v4 = sub_100004FC8(&qword_10015A178);
  v42 = *(_QWORD *)(v4 - 8);
  v43 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_100004FC8(&qword_10015A180);
  __chkstk_darwin(v37);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100004FC8(&qword_10015A188);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v36 - v13;
  v15 = *(_QWORD *)(a1 + 64);
  v16 = *(_QWORD *)(a1 + 72);
  v17 = *(unsigned __int8 *)(a1 + 80);
  if (v17 == 255)
  {
    v40 = 0;
    v41 = 0;
    v39 = 0;
    v38 = 0;
    v19 = 255;
  }
  else
  {
    KeyPath = swift_getKeyPath(&unk_100117B18);
    v40 = v15;
    v41 = KeyPath;
    v19 = 0;
    v39 = v16;
    v38 = v17;
  }
  v20 = sub_100011774(v15, v16, v17);
  *(_QWORD *)v14 = static HorizontalAlignment.leading.getter(v20);
  *((_QWORD *)v14 + 1) = 0;
  v14[16] = 1;
  v21 = sub_100004FC8(&qword_10015A190);
  v36 = &v14[*(int *)(v21 + 44)];
  __chkstk_darwin(v21);
  *(&v36 - 2) = (char *)a1;
  v22 = sub_100004FC8(&qword_100157B38);
  v23 = sub_100007868(&qword_100157B40, &qword_100157B38, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v24 = LabelGroup.init(content:)(sub_100086360, &v36 - 4, v22, v23);
  v25 = static Font.body.getter(v24);
  v26 = swift_getKeyPath(&unk_100117AE8);
  v28 = v42;
  v27 = v43;
  (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v8, v6, v43);
  v29 = (uint64_t *)&v8[*(int *)(v37 + 36)];
  *v29 = v26;
  v29[1] = v25;
  (*(void (**)(char *, uint64_t))(v28 + 8))(v6, v27);
  sub_100086370((uint64_t)v8, (uint64_t)v36);
  sub_1000863B8((uint64_t)v14, (uint64_t)v12);
  v31 = v40;
  v30 = v41;
  *(_QWORD *)a2 = v41;
  *(_QWORD *)(a2 + 8) = v19;
  v32 = v39;
  *(_QWORD *)(a2 + 16) = v31;
  *(_QWORD *)(a2 + 24) = v32;
  v33 = v38;
  *(_BYTE *)(a2 + 32) = v38;
  v34 = sub_100004FC8(&qword_10015A198);
  sub_1000863B8((uint64_t)v12, a2 + *(int *)(v34 + 48));
  sub_100086440(v30, v19, v31, v32, v33, (void (*)(uint64_t, _QWORD))sub_1000425D0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10000BB2C);
  sub_100086400((uint64_t)v14);
  sub_100086400((uint64_t)v12);
  return sub_100086440(v30, v19, v31, v32, v33, (void (*)(uint64_t, _QWORD))sub_10004260C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10000BB54);
}

uint64_t sub_1000861A4@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __int128 v4;
  char v5;
  uint64_t v6;
  __int128 v7;
  char v8;
  char v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _BYTE v17[24];
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _BYTE v21[24];

  v12 = a1[2];
  v13 = a1[3];
  v11 = a1[1];
  v18 = *a1;
  v19 = v11;
  sub_1000864A8((uint64_t)&v18, (uint64_t)v21);
  v20 = *((_QWORD *)&v19 + 1);
  v14 = v12;
  v15 = v13;
  sub_1000864A8((uint64_t)&v14, (uint64_t)v17);
  v3 = *((_QWORD *)&v15 + 1);
  v16 = *((_QWORD *)&v15 + 1);
  v4 = v18;
  v5 = v19;
  v6 = *((_QWORD *)&v19 + 1);
  v7 = v14;
  v8 = v19 & 1;
  v9 = v15 & 1;
  *(_OWORD *)a2 = v18;
  *(_BYTE *)(a2 + 16) = v5 & 1;
  *(_QWORD *)(a2 + 24) = v6;
  *(_OWORD *)(a2 + 32) = v7;
  *(_BYTE *)(a2 + 48) = v9;
  *(_QWORD *)(a2 + 56) = v3;
  sub_10000BAD4(v4, *((uint64_t *)&v4 + 1), v5 & 1);
  swift_bridgeObjectRetain(v6);
  sub_10000BAD4(v7, *((uint64_t *)&v7 + 1), v9);
  swift_bridgeObjectRetain(v3);
  sub_1000864E4((uint64_t)v21);
  sub_100086514(&v20);
  sub_1000864E4((uint64_t)v17);
  sub_100086514(&v16);
  sub_100007618(v7, *((uint64_t *)&v7 + 1), v9);
  swift_bridgeObjectRelease(v3);
  sub_100007618(v4, *((uint64_t *)&v4 + 1), v8);
  return swift_bridgeObjectRelease(v6);
}

uint64_t sub_1000862F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  __int128 *v9;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char v20;

  v11 = v9[3];
  v17 = v9[2];
  v18 = v11;
  v19 = v9[4];
  v20 = *((_BYTE *)v9 + 80);
  v12 = v9[1];
  v15 = *v9;
  *((_QWORD *)&v16 + 1) = *((_QWORD *)&v12 + 1);
  *(_QWORD *)a9 = static VerticalAlignment.top.getter(a1, a2, a3, a4, a5, a6, a7, a8, v15, *((_QWORD *)&v15 + 1), v12);
  *(_QWORD *)(a9 + 8) = 0;
  *(_BYTE *)(a9 + 16) = 1;
  v13 = sub_100004FC8(&qword_10015A170);
  return sub_100085EAC((uint64_t)&v15, a9 + *(int *)(v13 + 44));
}

uint64_t sub_100086360@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000861A4(*(__int128 **)(v1 + 16), a1);
}

uint64_t sub_100086370(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004FC8(&qword_10015A180);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000863B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004FC8(&qword_10015A188);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100086400(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004FC8(&qword_10015A188);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100086440(uint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, _QWORD), uint64_t (*a7)(uint64_t, uint64_t, uint64_t))
{
  if (a2 != -1)
  {
    a6(result, a2 & 1);
    return a7(a3, a4, a5);
  }
  return result;
}

uint64_t sub_1000864A8(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for Text.Storage - 1) + 32))(a2, a1);
  return a2;
}

uint64_t sub_1000864E4(uint64_t a1)
{
  sub_10000BAD4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return a1;
}

_QWORD *sub_100086514(_QWORD *a1)
{
  swift_bridgeObjectRetain(*a1);
  return a1;
}

uint64_t sub_10008653C()
{
  return sub_100007868(&qword_10015A1A0, &qword_10015A1A8, (uint64_t)&protocol conformance descriptor for HStack<A>);
}

ValueMetadata *type metadata accessor for SettingsNavigationURLRoute()
{
  return &type metadata for SettingsNavigationURLRoute;
}

uint64_t sub_100086578@<X0>(uint64_t a1@<X0>, unint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::String v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t (*v48)(char *, char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t);
  int64_t v60;
  char *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t result;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t (*v79)(unint64_t, char *, uint64_t);
  char v81;
  uint64_t v82;
  unsigned __int8 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  Swift::String v105;
  Swift::Bool v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void *object;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  uint64_t countAndFlagsBits;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  int *v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  void (*v144)(char *, uint64_t);
  uint64_t v145;
  uint64_t v146;
  char *v147;
  _QWORD *v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  Swift::String v154;
  Swift::String v155;
  char *v156;

  v4 = sub_100004FC8(&qword_10015C890);
  v5 = __chkstk_darwin(v4);
  v140 = (uint64_t)&v134 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v145 = (uint64_t)&v134 - v7;
  v143 = type metadata accessor for SettingsURLDestination.Action(0);
  __chkstk_darwin(v143);
  v146 = (uint64_t)&v134 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URLQueryItem(0);
  v153 = *(_QWORD *)(v9 - 8);
  v10 = __chkstk_darwin(v9);
  v144 = (void (*)(char *, uint64_t))((char *)&v134 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = __chkstk_darwin(v10);
  v142 = (char *)&v134 - v13;
  v14 = __chkstk_darwin(v12);
  v141 = (char *)&v134 - v15;
  v16 = __chkstk_darwin(v14);
  v150 = (char *)&v134 - v17;
  v18 = __chkstk_darwin(v16);
  v151 = (char *)&v134 - v19;
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v134 - v21;
  __chkstk_darwin(v20);
  v24 = (char *)&v134 - v23;
  v25 = sub_100004FC8(&qword_1001570F0);
  __chkstk_darwin(v25);
  v27 = (char *)&v134 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for URLComponents(0);
  v149 = *(_QWORD *)(v28 - 8);
  v29 = __chkstk_darwin(v28);
  v147 = (char *)&v134 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.scheme.getter(v29);
  if (!v31)
    goto LABEL_61;
  v32 = v31;
  v148 = (_QWORD *)v28;
  v33 = String.lowercased()();
  swift_bridgeObjectRelease(v32);
  if (v33._countAndFlagsBits == 0xD000000000000013 && v33._object == (void *)0x800000010011F0D0)
  {
    v34 = swift_bridgeObjectRelease(0x800000010011F0D0);
    v35 = v148;
  }
  else
  {
    v36 = _stringCompareWithSmolCheck(_:_:expecting:)(v33._countAndFlagsBits, v33._object, 0xD000000000000013, 0x800000010011F0D0, 0);
    v34 = swift_bridgeObjectRelease(v33._object);
    v35 = v148;
    if ((v36 & 1) == 0)
    {
LABEL_61:
      v82 = sub_100004FC8(&qword_1001570F8);
      return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 56))(a2, 1, 1, v82);
    }
  }
  v37 = URL.absoluteString.getter(v34);
  v39 = v38;
  URLComponents.init(string:)(v37);
  swift_bridgeObjectRelease(v39);
  v40 = v149;
  if ((*(unsigned int (**)(char *, uint64_t, _QWORD *))(v149 + 48))(v27, 1, v35) == 1)
  {
    sub_10000BA50((uint64_t)v27, &qword_1001570F0);
    goto LABEL_61;
  }
  v41 = (unint64_t)v147;
  v42 = (*(uint64_t (**)(void))(v40 + 32))();
  v43 = URLComponents.host.getter(v42);
  if (!v44)
  {
    (*(void (**)(unint64_t, _QWORD *))(v40 + 8))(v41, v35);
    goto LABEL_61;
  }
  v138 = v44;
  v139 = v43;
  v137 = a1;
  v45 = URLComponents.queryItems.getter(v43);
  if (v45)
    v46 = (_QWORD *)v45;
  else
    v46 = _swiftEmptyArrayStorage;
  v156 = (char *)v46;
  v47 = v46[2];
  if (!v47)
  {
    v60 = 0;
    v46 = v148;
    goto LABEL_59;
  }
  v136 = a2;
  a2 = (*(unsigned __int8 *)(v153 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v153 + 80);
  v152 = *(_QWORD *)(v153 + 72);
  v48 = *(uint64_t (**)(char *, char *, uint64_t))(v153 + 16);
  swift_bridgeObjectRetain(v46);
  v41 = 0;
  v135 = a2;
  while (1)
  {
    v49 = v48(v24, (char *)v46 + a2, v9);
    v50 = URLQueryItem.name.getter(v49);
    v52 = v51;
    if (v50 == 1953460082 && v51 == 0xE400000000000000)
    {
      swift_bridgeObjectRelease(0xE400000000000000);
      v48(v22, v24, v9);
      v53 = 1;
    }
    else
    {
      v54 = _stringCompareWithSmolCheck(_:_:expecting:)(v50, v51, 1953460082, 0xE400000000000000, 0);
      swift_bridgeObjectRelease(v52);
      v55 = v48(v22, v24, v9);
      if ((v54 & 1) != 0)
      {
        v53 = 1;
      }
      else
      {
        v56 = URLQueryItem.name.getter(v55);
        v58 = v57;
        if (v56 == 1752457584 && v57 == 0xE400000000000000)
        {
          swift_bridgeObjectRelease(0xE400000000000000);
          v53 = 1;
        }
        else
        {
          v53 = _stringCompareWithSmolCheck(_:_:expecting:)(v56, v57, 1752457584, 0xE400000000000000, 0);
          swift_bridgeObjectRelease(v58);
        }
      }
    }
    v59 = *(void (**)(char *, uint64_t))(v153 + 8);
    v59(v22, v9);
    v59(v24, v9);
    if ((v53 & 1) != 0)
      break;
    ++v41;
    a2 += v152;
    if (v47 == v41)
    {
      swift_bridgeObjectRelease(v46);
      v60 = *((_QWORD *)v156 + 2);
LABEL_31:
      a2 = v136;
LABEL_58:
      v41 = (unint64_t)v147;
      v46 = v148;
      if (v60 >= v47)
      {
LABEL_59:
        sub_1000EF6F0(v47, v60);
        v81 = sub_1000B1ED4(v139, v138);
        if (v81 == 44)
        {
          swift_bridgeObjectRelease(v156);
          (*(void (**)(unint64_t, _QWORD *))(v149 + 8))(v41, v46);
          goto LABEL_61;
        }
        v83 = v81;
        v84 = v145;
        sub_1000B1370(v81);
        v85 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v85 - 8) + 48))(v84, 1, v85) == 1)
        {
          v86 = sub_1000B1860(v83);
          v88 = v87;
          v47 = v137;
          if (v86 == 0xD000000000000012 && v87 == 0x800000010011F480)
          {
            swift_bridgeObjectRelease(0x800000010011F480);
            v89 = 5;
            v90 = v146;
          }
          else
          {
            v93 = _stringCompareWithSmolCheck(_:_:expecting:)(v86, v87, 0xD000000000000012, 0x800000010011F480, 0);
            swift_bridgeObjectRelease(v88);
            if ((v93 & 1) == 0)
            {
              swift_bridgeObjectRelease(v156);
              (*(void (**)(unint64_t, _QWORD *))(v149 + 8))(v41, v46);
              v133 = sub_100004FC8(&qword_1001570F8);
              (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v133 - 8) + 56))(a2, 1, 1, v133);
              return sub_10000BA50(v145, &qword_10015C890);
            }
            v89 = 5;
            v84 = v145;
            v90 = v146;
          }
        }
        else
        {
          v91 = v140;
          sub_1000871E0(v84, v140);
          v92 = v91;
          v90 = v146;
          sub_100007670(v92, v146, type metadata accessor for PrimarySettingsListItemIdentifier);
          v89 = 1;
          v47 = v137;
        }
        swift_storeEnumTagMultiPayload(v90, v143, v89);
        v94 = sub_10000BA50(v84, &qword_10015C890);
        v155 = (Swift::String)0;
        v95 = URLComponents.path.getter(v94);
        v97 = v96;
        v98 = swift_bridgeObjectRelease(v96);
        v99 = HIBYTE(v97) & 0xF;
        if ((v97 & 0x2000000000000000) == 0)
          v99 = v95 & 0xFFFFFFFFFFFFLL;
        if (v99)
        {
          v100 = URLComponents.path.getter(v98);
          v102 = v101;
          URLComponents.path.getter(v100);
          v104 = v103;
          v105._countAndFlagsBits = 47;
          v105._object = (void *)0xE100000000000000;
          v106 = String.hasPrefix(_:)(v105);
          swift_bridgeObjectRelease(v104);
          v107 = sub_100045F58(v106, v100, v102);
          v109 = v108;
          v111 = v110;
          v113 = v112;
          swift_bridgeObjectRelease(v102);
          v114 = static String._fromSubstring(_:)(v107, v109, v111, v113);
          v116 = v115;
          v117 = v113;
          v41 = (unint64_t)v147;
          v118 = swift_bridgeObjectRelease(v117);
          v155._countAndFlagsBits = v114;
          v155._object = v116;
          v119 = URLComponents.fragment.getter(v118);
          v59 = v144;
          if (!v120)
            goto LABEL_78;
          v121 = v120;
          if (v116)
          {
            v154._countAndFlagsBits = 35;
            v154._object = (void *)0xE100000000000000;
            String.append(_:)(*(Swift::String *)&v119);
            swift_bridgeObjectRelease(v121);
            object = v154._object;
            String.append(_:)(v154);
            swift_bridgeObjectRelease(object);
            goto LABEL_78;
          }
LABEL_77:
          v154._countAndFlagsBits = 35;
          v154._object = (void *)0xE100000000000000;
          v124 = v121;
          String.append(_:)(*(Swift::String *)&v119);
          swift_bridgeObjectRelease(v121);
          v125 = v154._object;
          v155 = v154;
        }
        else
        {
          v119 = URLComponents.fragment.getter(v98);
          v59 = v144;
          if (v123)
          {
            v121 = v123;
            goto LABEL_77;
          }
LABEL_78:
          v125 = v155._object;
        }
        if (v125)
        {
          countAndFlagsBits = v155._countAndFlagsBits;
          swift_bridgeObjectRetain(v125);
          URLQueryItem.init(name:value:)(1752457584, 0xE400000000000000, countAndFlagsBits, v125);
          swift_bridgeObjectRelease(v125);
          v24 = v156;
          if ((swift_isUniquelyReferenced_nonNull_native(v156) & 1) != 0)
            goto LABEL_81;
          goto LABEL_91;
        }
        goto LABEL_84;
      }
LABEL_88:
      __break(1u);
LABEL_89:
      __break(1u);
LABEL_90:
      __break(1u);
LABEL_91:
      v24 = (char *)sub_10005270C(0, *((_QWORD *)v24 + 2) + 1, 1, (unint64_t)v24);
LABEL_81:
      v128 = *((_QWORD *)v24 + 2);
      v127 = *((_QWORD *)v24 + 3);
      if (v128 >= v127 >> 1)
        v24 = (char *)sub_10005270C(v127 > 1, v128 + 1, 1, (unint64_t)v24);
      *((_QWORD *)v24 + 2) = v128 + 1;
      (*(void (**)(char *, void (*)(char *, uint64_t), uint64_t))(v153 + 32))(&v24[((*(unsigned __int8 *)(v153 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v153 + 80))+ *(_QWORD *)(v153 + 72) * v128], v59, v9);
      v156 = v24;
LABEL_84:
      (*(void (**)(unint64_t, _QWORD *))(v149 + 8))(v41, v46);
      v129 = type metadata accessor for URL(0);
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v129 - 8) + 16))(a2, v47, v129);
      v130 = (int *)type metadata accessor for SettingsURLDestination(0);
      sub_100007670(v146, a2 + v130[5], type metadata accessor for SettingsURLDestination.Action);
      v131 = (_QWORD *)(a2 + v130[7]);
      *(_QWORD *)(a2 + v130[6]) = v156;
      *v131 = 0;
      v131[1] = 0;
      v132 = sub_100004FC8(&qword_1001570F8);
      (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v132 - 8) + 56))(a2, 0, 1, v132);
      return swift_bridgeObjectRelease(v155._object);
    }
  }
  swift_bridgeObjectRelease(v46);
  v60 = v41 + 1;
  if (__OFADD__(v41, 1))
    goto LABEL_89;
  v61 = v156;
  v62 = *((_QWORD *)v156 + 2);
  v24 = v151;
  if (v60 == v62)
  {
    v47 = v41;
    goto LABEL_31;
  }
  v47 = v152 + a2;
  v46 = (_QWORD *)(v41 + 1);
  a2 = v136;
  while (1)
  {
    if ((unint64_t)v46 >= v62)
    {
      __break(1u);
LABEL_87:
      __break(1u);
      goto LABEL_88;
    }
    v63 = v48(v24, &v61[v47], v9);
    v64 = URLQueryItem.name.getter(v63);
    v66 = v65;
    if (v64 == 1953460082 && v65 == 0xE400000000000000)
    {
      swift_bridgeObjectRelease(0xE400000000000000);
      v67 = v150;
      v24 = v151;
      v48(v150, v151, v9);
LABEL_41:
      v59(v67, v9);
      v59(v24, v9);
      goto LABEL_42;
    }
    v68 = _stringCompareWithSmolCheck(_:_:expecting:)(v64, v65, 1953460082, 0xE400000000000000, 0);
    swift_bridgeObjectRelease(v66);
    v67 = v150;
    v24 = v151;
    v69 = v48(v150, v151, v9);
    if ((v68 & 1) != 0)
      goto LABEL_41;
    v70 = URLQueryItem.name.getter(v69);
    v72 = v71;
    if (v70 == 1752457584 && v71 == 0xE400000000000000)
    {
      swift_bridgeObjectRelease(0xE400000000000000);
      v67 = v150;
      v24 = v151;
      goto LABEL_41;
    }
    v73 = _stringCompareWithSmolCheck(_:_:expecting:)(v70, v71, 1752457584, 0xE400000000000000, 0);
    swift_bridgeObjectRelease(v72);
    v59(v150, v9);
    v24 = v151;
    result = ((uint64_t (*)(char *, uint64_t))v59)(v151, v9);
    if ((v73 & 1) == 0)
      break;
LABEL_42:
    v60 = (int64_t)v46 + 1;
    if (__OFADD__(v46, 1))
      goto LABEL_87;
    v61 = v156;
    v62 = *((_QWORD *)v156 + 2);
    v46 = (_QWORD *)((char *)v46 + 1);
    v47 += v152;
    if (v60 == v62)
    {
      v47 = v41;
      goto LABEL_58;
    }
  }
  if (v46 == (_QWORD *)v41)
  {
LABEL_55:
    if (__OFADD__(v41++, 1))
      goto LABEL_90;
    goto LABEL_42;
  }
  if ((v41 & 0x8000000000000000) == 0)
  {
    v75 = (unint64_t)v156;
    v76 = *((_QWORD *)v156 + 2);
    if (v41 >= v76)
      goto LABEL_93;
    v77 = v41 * v152;
    result = v48(v141, &v156[v135 + v41 * v152], v9);
    if ((unint64_t)v46 >= v76)
      goto LABEL_94;
    v48(v142, (char *)(v75 + v47), v9);
    result = swift_isUniquelyReferenced_nonNull_native(v75);
    v156 = (char *)v75;
    a2 = v136;
    if ((result & 1) == 0)
    {
      result = sub_1000EEFA8(v75);
      v75 = result;
      v156 = (char *)result;
    }
    if (v41 >= *(_QWORD *)(v75 + 16))
      goto LABEL_95;
    v78 = v75 + v135 + v77;
    v79 = *(uint64_t (**)(unint64_t, char *, uint64_t))(v153 + 40);
    result = v79(v78, v142, v9);
    if ((unint64_t)v46 >= *((_QWORD *)v156 + 2))
      goto LABEL_96;
    v79((unint64_t)&v156[v47], v141, v9);
    v24 = v151;
    goto LABEL_55;
  }
  __break(1u);
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
  return result;
}

uint64_t sub_1000871E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004FC8(&qword_10015C890);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100087228(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v1 = URL.scheme.getter(a1);
  if (v2)
  {
    v3 = v2;
    if (v1 == 0xD000000000000013 && v2 == 0x800000010011F0D0)
      v4 = 1;
    else
      v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v1, v2, 0xD000000000000013, 0x800000010011F0D0, 0);
    swift_bridgeObjectRelease(v3);
  }
  else
  {
    v4 = 0;
  }
  return v4 & 1;
}

uint64_t sub_1000872B4@<X0>(unint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  uint64_t (*v50)(_BYTE *, uint64_t, uint64_t);
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t (*v66)(_BYTE *, char *, unint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  void (*v72)(__int128 *, _QWORD, uint64_t, unint64_t);
  __int128 *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  __int128 *v79;
  uint64_t v80;
  __int128 *v81;
  uint64_t (*v82)(_QWORD, _QWORD, _QWORD);
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  NSString v86;
  id v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  int v91;
  int v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t (*v96)(_QWORD *, uint64_t, unint64_t);
  uint64_t v97;
  NSObject *v98;
  os_log_type_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  void (*v106)(_QWORD *, unint64_t);
  uint64_t v107;
  void (*v108)(_QWORD *, unint64_t);
  int v109;
  unsigned __int8 v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  _BYTE *v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  _QWORD *v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t (*v130)(_BYTE *, char *, unint64_t);
  _BYTE *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  void (*v139)(uint64_t, _QWORD, uint64_t, unint64_t);
  uint64_t v140;
  _BYTE *v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char v148;
  Swift::String v149;
  uint64_t v150;
  uint64_t v151;
  NSObject *v152;
  os_log_type_t v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  _BYTE *v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  _QWORD *v163;
  _QWORD *v164;
  _QWORD *v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  _BYTE *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t (*v183)(_QWORD, _QWORD, _QWORD);
  int64_t v184;
  unint64_t v185;
  _BYTE *v186;
  uint64_t (*v187)(_QWORD, _QWORD, _QWORD);
  __int128 *v188;
  unint64_t v189;
  unint64_t v190;
  _BYTE *v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  _BYTE *v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;
  _BYTE *v199;
  uint64_t v200;
  uint64_t v201;
  _BYTE *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t (*v209)(_QWORD, _QWORD, _QWORD);
  char v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  __int128 *v215;
  uint64_t (*v216)(_QWORD, _QWORD, _QWORD);
  unint64_t v217;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v219;
  void (*v220)(_QWORD, _QWORD, _QWORD);
  BOOL v221;
  NSString v222;
  id v223;
  uint64_t v224;
  unint64_t v225;
  char v226;
  unint64_t v227;
  uint64_t v228;
  _BYTE *v229;
  _BYTE *v230;
  uint64_t v231;
  uint64_t v232;
  NSObject *v233;
  os_log_type_t v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  unint64_t v238;
  unint64_t v239;
  void (*v240)(_BYTE *, _BYTE *);
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  void (*v244)(_BYTE *, _BYTE *);
  _BYTE v245[4];
  int v246;
  unint64_t v247;
  uint64_t v248;
  void (*v249)(uint64_t, _QWORD, uint64_t, unint64_t);
  _BYTE *v250;
  uint64_t (*v251)(_BYTE *, uint64_t, uint64_t);
  uint64_t v252;
  _BYTE *v253;
  _BYTE *v254;
  _BYTE *v255;
  _BYTE *v256;
  _BYTE *v257;
  _BYTE *v258;
  _BYTE *v259;
  _BYTE *v260;
  NSObject *v261;
  _BYTE *v262;
  _BYTE *v263;
  _BYTE *v264;
  uint64_t v265;
  _BYTE *v266;
  _BYTE *v267;
  _QWORD *v268;
  __int128 *v269;
  unint64_t v270;
  unint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t (*v274)(_QWORD *, uint64_t, unint64_t);
  uint64_t v275;
  unint64_t v276;
  uint64_t v277[2];
  __int128 v278;
  __int128 v279;
  unint64_t v280;

  v2 = v1;
  v271 = a1;
  v3 = sub_100004FC8((uint64_t *)&unk_10015C9A0);
  __chkstk_darwin(v3);
  v259 = &v245[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for URLComponents(0);
  v270 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v262 = &v245[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for URLQueryItem(0);
  v273 = *(_QWORD *)(v7 - 8);
  v274 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))v7;
  v8 = __chkstk_darwin(v7);
  v256 = &v245[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = __chkstk_darwin(v8);
  v255 = &v245[-v11];
  v12 = __chkstk_darwin(v10);
  v257 = &v245[-v13];
  v14 = __chkstk_darwin(v12);
  v264 = &v245[-v15];
  v16 = __chkstk_darwin(v14);
  v263 = &v245[-v17];
  v18 = __chkstk_darwin(v16);
  v267 = &v245[-v19];
  v20 = __chkstk_darwin(v18);
  v258 = &v245[-v21];
  __chkstk_darwin(v20);
  v23 = &v245[-v22];
  v24 = sub_100004FC8(&qword_10015C510);
  v25 = __chkstk_darwin(v24);
  v261 = &v245[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v25);
  v269 = (__int128 *)&v245[-v27];
  v28 = sub_100004FC8(&qword_1001570F0);
  v29 = __chkstk_darwin(v28);
  v260 = &v245[-((v30 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v31 = __chkstk_darwin(v29);
  v33 = &v245[-v32];
  __chkstk_darwin(v31);
  v35 = &v245[-v34];
  v272 = type metadata accessor for URL(0);
  v36 = *(_QWORD *)(v272 - 8);
  v37 = __chkstk_darwin(v272);
  v268 = &v245[-((v38 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v39 = __chkstk_darwin(v37);
  v41 = &v245[-v40];
  v42 = __chkstk_darwin(v39);
  v44 = &v245[-v43];
  v45 = URL.scheme.getter(v42);
  if (!v46)
    goto LABEL_8;
  v47 = v46;
  if (v45 == 0x7366657270 && v46 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    goto LABEL_6;
  }
  v48 = _stringCompareWithSmolCheck(_:_:expecting:)(v45, v46, 0x7366657270, 0xE500000000000000, 0);
  swift_bridgeObjectRelease(v47);
  if ((v48 & 1) == 0)
  {
LABEL_8:
    if (qword_100156CB0 != -1)
      swift_once(&qword_100156CB0, sub_10008BE28);
    v53 = type metadata accessor for Logger(0);
    v54 = sub_100007808(v53, (uint64_t)qword_10015D2C8);
    v55 = Logger.logObject.getter(v54);
    v56 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v55, v56))
    {
      v57 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v57 = 0;
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "URL transformation not needed.", v57, 2u);
      swift_slowDealloc(v57, -1, -1);
    }

    return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v36 + 16))(v271, v2, v272);
  }
LABEL_6:
  v250 = v41;
  sub_100019DF4((uint64_t)v44);
  URLComponents.init(url:resolvingAgainstBaseURL:)(v44, 0);
  sub_100088E8C((uint64_t)v35, (uint64_t)v33);
  v49 = v270;
  v50 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v270 + 48);
  v51 = v50(v33, 1, v5);
  v252 = v5;
  v265 = v2;
  v266 = v35;
  v254 = v44;
  v251 = v50;
  if ((_DWORD)v51 == 1)
  {
    sub_10000BA50((uint64_t)v33, &qword_1001570F0);
    v52 = (_BYTE *)v36;
  }
  else
  {
    v59 = (_QWORD *)URLComponents.queryItems.getter(v51);
    (*(void (**)(_BYTE *, uint64_t))(v49 + 8))(v33, v5);
    v52 = (_BYTE *)v36;
    if (v59)
      goto LABEL_15;
  }
  swift_bridgeObjectRelease(0);
  v59 = _swiftEmptyArrayStorage;
LABEL_15:
  v61 = v272;
  v60 = (_QWORD *)v273;
  v280 = (unint64_t)v59;
  v62 = v59[2];
  v63 = (unint64_t)v274;
  if (v62)
  {
    v253 = v52;
    v64 = (char *)v59 + ((*(unsigned __int8 *)(v273 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v273 + 80));
    v65 = *(_QWORD *)(v273 + 72);
    v66 = *(uint64_t (**)(_BYTE *, char *, unint64_t))(v273 + 16);
    swift_bridgeObjectRetain_n(v59, 2);
    while (1)
    {
      v67 = v66(v23, v64, v63);
      v68 = URLQueryItem.name.getter(v67);
      v70 = v69;
      if (v68 == 1953460082 && v69 == 0xE400000000000000)
      {
        swift_bridgeObjectRelease(v59);
        swift_bridgeObjectRelease(0xE400000000000000);
        goto LABEL_26;
      }
      v71 = _stringCompareWithSmolCheck(_:_:expecting:)(v68, v69, 1953460082, 0xE400000000000000, 0);
      swift_bridgeObjectRelease(v70);
      if ((v71 & 1) != 0)
        break;
      v63 = (unint64_t)v274;
      (*(void (**)(_BYTE *, uint64_t (*)(_QWORD *, uint64_t, unint64_t)))(v273 + 8))(v23, (uint64_t (*)(_QWORD *, uint64_t, unint64_t))v274);
      v64 += v65;
      if (!--v62)
      {
        swift_bridgeObjectRelease(v59);
        v61 = v272;
        v60 = (_QWORD *)v273;
        v52 = v253;
        goto LABEL_23;
      }
    }
    swift_bridgeObjectRelease(v59);
    v63 = (unint64_t)v274;
LABEL_26:
    v60 = (_QWORD *)v273;
    v73 = v269;
    (*(void (**)(__int128 *, _BYTE *, unint64_t))(v273 + 32))(v269, v23, v63);
    v72 = (void (*)(__int128 *, _QWORD, uint64_t, unint64_t))v60[7];
    v72(v73, 0, 1, v63);
    v74 = v265;
    v61 = v272;
    v75 = (unint64_t)v266;
    v52 = v253;
  }
  else
  {
    swift_bridgeObjectRetain(v59);
LABEL_23:
    v72 = (void (*)(__int128 *, _QWORD, uint64_t, unint64_t))v60[7];
    v73 = v269;
    v72(v269, 1, 1, v63);
    v74 = v265;
    v75 = (unint64_t)v266;
  }
  swift_bridgeObjectRelease(v59);
  v76 = v60[6];
  v77 = ((uint64_t (*)(__int128 *, uint64_t, unint64_t))v76)(v73, 1, v63);
  if ((_DWORD)v77 == 1)
  {
    v78 = &qword_10015C510;
    v79 = v73;
LABEL_29:
    sub_10000BA50((uint64_t)v79, v78);
LABEL_45:
    v93 = (_QWORD *)v280;
    goto LABEL_46;
  }
  v249 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v72;
  v80 = URLQueryItem.value.getter(v77);
  v81 = v73;
  v83 = (unint64_t)v82;
  v269 = (__int128 *)v60[1];
  ((void (*)(__int128 *, unint64_t))v269)(v81, v63);
  if (!v83)
    goto LABEL_45;
  v84 = HIBYTE(v83) & 0xF;
  if ((v83 & 0x2000000000000000) == 0)
    v84 = v80 & 0xFFFFFFFFFFFFLL;
  if (!v84)
  {
    v93 = (_QWORD *)v280;
    swift_bridgeObjectRelease(v83);
    goto LABEL_46;
  }
  v85 = v74;
  v248 = v80;
  v86 = String._bridgeToObjectiveC()();
  v87 = (id)SFObjectAndOffsetForURLPair(v86);

  v88 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v87, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  v275 = 0x7463656A626FLL;
  v276 = 0xE600000000000000;
  AnyHashable.init<A>(_:)(v277, &v275, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v88 + 16) && (v89 = sub_1000DA95C((uint64_t)v277), (v90 & 1) != 0))
  {
    sub_1000148AC(*(_QWORD *)(v88 + 56) + 32 * v89, (uint64_t)&v278);
  }
  else
  {
    v278 = 0u;
    v279 = 0u;
  }
  v74 = v85;
  swift_bridgeObjectRelease(v88);
  sub_100014878((uint64_t)v277);
  if (!*((_QWORD *)&v279 + 1))
  {
    swift_bridgeObjectRelease(v83);
    v78 = &qword_10015BA90;
    v79 = &v278;
    goto LABEL_29;
  }
  if ((swift_dynamicCast(&v275, &v278, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {
    swift_bridgeObjectRelease(v83);
    goto LABEL_45;
  }
  v91 = sub_10006A148(v275, v276);
  v92 = v91;
  if (v91 == 74)
  {
    v93 = (_QWORD *)v280;
    swift_bridgeObjectRelease(v83);
    v74 = v85;
LABEL_46:
    v94 = v268;
    swift_bridgeObjectRelease(v93);
    if (qword_100156CB0 != -1)
      swift_once(&qword_100156CB0, sub_10008BE28);
    v95 = type metadata accessor for Logger(0);
    sub_100007808(v95, (uint64_t)qword_10015D2C8);
    v96 = (uint64_t (*)(_QWORD *, uint64_t, unint64_t))*((_QWORD *)v52 + 2);
    v97 = v96(v94, v74, v61);
    v98 = Logger.logObject.getter(v97);
    v99 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v98, v99))
    {
      v100 = swift_slowAlloc(22, -1);
      v101 = swift_slowAlloc(32, -1);
      v277[0] = v101;
      *(_DWORD *)v100 = 141558275;
      *(_QWORD *)&v278 = 1752392040;
      v274 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))v96;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v278, (char *)&v278 + 8, v100 + 4, v100 + 12);
      *(_WORD *)(v100 + 12) = 2081;
      v102 = sub_100014830();
      v103 = dispatch thunk of CustomStringConvertible.description.getter(v61, v102);
      v105 = v104;
      *(_QWORD *)&v278 = sub_1000DA1F0(v103, v104, v277);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v278, (char *)&v278 + 8, v100 + 14, v100 + 22);
      swift_bridgeObjectRelease(v105);
      v106 = (void (*)(_QWORD *, unint64_t))*((_QWORD *)v52 + 1);
      v96 = (uint64_t (*)(_QWORD *, uint64_t, unint64_t))v274;
      v106(v94, v61);
      _os_log_impl((void *)&_mh_execute_header, v98, v99, "Failed to resolve specifier identifier to transform URL %{private,mask.hash}s into a settings-navigation URL.", (uint8_t *)v100, 0x16u);
      swift_arrayDestroy(v101, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v101, -1, -1);
      v107 = v100;
      v74 = v265;
      swift_slowDealloc(v107, -1, -1);

      sub_10000BA50((uint64_t)v266, &qword_1001570F0);
      v106(v254, v61);
    }
    else
    {

      v108 = (void (*)(_QWORD *, unint64_t))*((_QWORD *)v52 + 1);
      v108(v94, v61);
      sub_10000BA50(v75, &qword_1001570F0);
      v108(v254, v61);
    }
    return v96((_QWORD *)v271, v74, v61);
  }
  v109 = v91;
  URLComponents.init()();
  URLComponents.scheme.setter(0xD000000000000013, 0x800000010011F0D0);
  v246 = v109;
  v110 = sub_1000697A0(v109);
  v111 = sub_1000B1860(v110);
  URLComponents.host.setter(v111, v112);
  switch(v92)
  {
    case 2:
      v113 = &off_100148050;
      break;
    case 72:
      v113 = &off_1001480B0;
      break;
    case 68:
      v113 = &off_100148080;
      break;
    default:
      v113 = _swiftEmptyArrayStorage;
      break;
  }
  v277[0] = (uint64_t)&off_1001480E0;
  sub_1000F2284((uint64_t)v113);
  v268 = (_QWORD *)v277[0];
  v114 = sub_1000B1860(v110);
  v116 = v115;
  if (v114 == 0xD000000000000017 && v115 == 0x800000010011FA20)
  {
    swift_bridgeObjectRelease(0x800000010011FA20);
  }
  else
  {
    v117 = _stringCompareWithSmolCheck(_:_:expecting:)(v114, v115, 0xD000000000000017, 0x800000010011FA20, 0);
    swift_bridgeObjectRelease(v116);
    if ((v117 & 1) == 0)
      goto LABEL_68;
  }
  v118 = sub_1000697B4(v246);
  if (v119)
  {
    v120 = (_BYTE *)v118;
    v121 = v119;
    if ((swift_isUniquelyReferenced_nonNull_native(v268) & 1) == 0)
LABEL_184:
      v268 = sub_100052940(0, v268[2] + 1, 1, v268);
    v123 = v268[2];
    v122 = v268[3];
    if (v123 >= v122 >> 1)
      v268 = sub_100052940((_QWORD *)(v122 > 1), v123 + 1, 1, v268);
    v124 = v268;
    v268[2] = v123 + 1;
    v125 = &v124[2 * v123];
    v125[4] = v120;
    v125[5] = v121;
    v63 = (unint64_t)v274;
  }
LABEL_68:
  v126 = (_QWORD *)v280;
  v127 = *(_QWORD *)(v280 + 16);
  v247 = v83;
  v253 = v52;
  if (v127)
  {
    v128 = (char *)(v280
                  + ((*(unsigned __int8 *)(v273 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v273 + 80)));
    v129 = *(_QWORD *)(v273 + 72);
    v130 = *(uint64_t (**)(_BYTE *, char *, unint64_t))(v273 + 16);
    swift_bridgeObjectRetain_n(v280, 2);
    v131 = v258;
    while (1)
    {
      v132 = v130(v131, v128, v63);
      v133 = URLQueryItem.name.getter(v132);
      v135 = v134;
      if (v133 == 1752457584 && v134 == 0xE400000000000000)
      {
        swift_bridgeObjectRelease(v126);
        swift_bridgeObjectRelease(0xE400000000000000);
        goto LABEL_79;
      }
      v136 = _stringCompareWithSmolCheck(_:_:expecting:)(v133, v134, 1752457584, 0xE400000000000000, 0);
      swift_bridgeObjectRelease(v135);
      if ((v136 & 1) != 0)
        break;
      v63 = (unint64_t)v274;
      ((void (*)(_BYTE *, uint64_t (*)(_QWORD *, uint64_t, unint64_t)))v269)(v131, (uint64_t (*)(_QWORD *, uint64_t, unint64_t))v274);
      v128 += v129;
      if (!--v127)
      {
        swift_bridgeObjectRelease(v126);
        v61 = v272;
        v75 = (unint64_t)v266;
        v52 = v253;
        goto LABEL_76;
      }
    }
    swift_bridgeObjectRelease(v126);
    v63 = (unint64_t)v274;
LABEL_79:
    v139 = v249;
    v137 = v273;
    v138 = (uint64_t)v261;
    (*(void (**)(NSObject *, _BYTE *, unint64_t))(v273 + 32))(v261, v131, v63);
    v61 = v272;
    v75 = (unint64_t)v266;
    v52 = v253;
    v139(v138, 0, 1, v63);
  }
  else
  {
    swift_bridgeObjectRetain(v280);
LABEL_76:
    v137 = v273;
    v138 = (uint64_t)v261;
    v249(v261, 1, 1, v63);
  }
  swift_bridgeObjectRelease(v126);
  v140 = ((uint64_t (*)(uint64_t, uint64_t, unint64_t))v76)(v138, 1, v63);
  if ((_DWORD)v140 != 1)
  {
    v141 = v52;
    v76 = v75;
    v52 = (_BYTE *)v61;
    v75 = URLQueryItem.value.getter(v140);
    v143 = v142;
    ((void (*)(uint64_t, unint64_t))v269)(v138, v63);
    if (!v143)
      goto LABEL_102;
    v144 = HIBYTE(v143) & 0xF;
    if ((v143 & 0x2000000000000000) == 0)
      v144 = v75 & 0xFFFFFFFFFFFFLL;
    if (!v144)
    {
      swift_bridgeObjectRelease(v143);
      goto LABEL_102;
    }
    v145 = sub_100069A58(v246);
    v147 = v146;
    if (v145 == 0x6C6172656E6547 && v146 == 0xE700000000000000)
    {
      swift_bridgeObjectRelease(0xE700000000000000);
    }
    else
    {
      v148 = _stringCompareWithSmolCheck(_:_:expecting:)(v145, v146, 0x6C6172656E6547, 0xE700000000000000, 0);
      swift_bridgeObjectRelease(v147);
      if ((v148 & 1) == 0)
        goto LABEL_98;
    }
    v149._object = (void *)0x8000000100123780;
    v149._countAndFlagsBits = 0xD000000000000017;
    if (String.hasPrefix(_:)(v149))
    {
      if (qword_100156CB0 != -1)
        swift_once(&qword_100156CB0, sub_10008BE28);
      v150 = type metadata accessor for Logger(0);
      sub_100007808(v150, (uint64_t)qword_10015D2C8);
      v151 = swift_bridgeObjectRetain_n(v143, 2);
      v152 = Logger.logObject.getter(v151);
      v153 = static os_log_type_t.default.getter();
      v154 = v153;
      if (os_log_type_enabled(v152, v153))
      {
        v155 = swift_slowAlloc(22, -1);
        LODWORD(v261) = v154;
        v156 = v155;
        v258 = (_BYTE *)swift_slowAlloc(32, -1);
        v277[0] = (uint64_t)v258;
        *(_DWORD *)v156 = 141558275;
        *(_QWORD *)&v278 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v278, (char *)&v278 + 8, v156 + 4, v156 + 12);
        *(_WORD *)(v156 + 12) = 2081;
        v249 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))(v156 + 14);
        swift_bridgeObjectRetain(v143);
        *(_QWORD *)&v278 = sub_1000DA1F0(v75, v143, v277);
        v63 = (unint64_t)v274;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v278, (char *)&v278 + 8, v249, v156 + 22);
        swift_bridgeObjectRelease_n(v143, 3);
        _os_log_impl((void *)&_mh_execute_header, v152, (os_log_type_t)v261, "Replaced About/WARRANTY_COVERAGE with COVERAGE in path: %{private,mask.hash}s", (uint8_t *)v156, 0x16u);
        v261 = v152;
        v157 = v258;
        swift_arrayDestroy(v258, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v157, -1, -1);
        swift_slowDealloc(v156, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v143, 2);
      }
      v277[0] = v75;
      v277[1] = v143;
      *(_QWORD *)&v278 = 0xD000000000000017;
      *((_QWORD *)&v278 + 1) = 0x8000000100123780;
      v275 = 0x4547415245564F43;
      v276 = 0xE800000000000000;
      v158 = sub_100008A5C();
      v75 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v278, &v275, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v158, v158, v158);
      v160 = v159;
      swift_bridgeObjectRelease(v143);
      v143 = v160;
    }
LABEL_98:
    if ((swift_isUniquelyReferenced_nonNull_native(v268) & 1) == 0)
      goto LABEL_190;
    goto LABEL_99;
  }
  sub_10000BA50(v138, &qword_10015C510);
  while (1)
  {
    v165 = v268;
    v277[0] = (uint64_t)v268;
    swift_bridgeObjectRetain(v268);
    v166 = sub_100004FC8(&qword_100157350);
    v167 = sub_10000F228();
    v168 = BidirectionalCollection<>.joined(separator:)(47, 0xE100000000000000, v166, v167);
    v170 = v169;
    swift_bridgeObjectRelease(v165);
    URLComponents.path.setter(v168, v170);
    v120 = (_BYTE *)v280;
    v171 = *(_QWORD *)(v280 + 16);
    if (!v171)
      break;
    v172 = (*(unsigned __int8 *)(v137 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v137 + 80);
    v76 = *(_QWORD *)(v137 + 72);
    v83 = *(_QWORD *)(v137 + 16);
    swift_bridgeObjectRetain(v280);
    v75 = 0;
    v61 = v172;
    v173 = v172;
    while (1)
    {
      v174 = ((uint64_t (*)(_BYTE *, _BYTE *, unint64_t))v83)(v267, &v120[v173], v63);
      v175 = URLQueryItem.name.getter(v174);
      v177 = v176;
      if (v175 == 1953460082 && v176 == 0xE400000000000000)
      {
        swift_bridgeObjectRelease(0xE400000000000000);
        v178 = v263;
        ((void (*)(_BYTE *, _BYTE *, unint64_t))v83)(v263, v267, v63);
        goto LABEL_116;
      }
      v52 = (_BYTE *)v63;
      v63 = _stringCompareWithSmolCheck(_:_:expecting:)(v175, v176, 1953460082, 0xE400000000000000, 0);
      swift_bridgeObjectRelease(v177);
      v178 = v263;
      v179 = ((uint64_t (*)(_BYTE *, _BYTE *, _BYTE *))v83)(v263, v267, v52);
      if ((v63 & 1) != 0)
        goto LABEL_116;
      v180 = URLQueryItem.name.getter(v179);
      v182 = v181;
      if (v180 == 1752457584 && v181 == 0xE400000000000000)
        break;
      v63 = _stringCompareWithSmolCheck(_:_:expecting:)(v180, v181, 1752457584, 0xE400000000000000, 0);
      swift_bridgeObjectRelease(v182);
      v183 = v274;
      v52 = v269;
      ((void (*)(_BYTE *, uint64_t (*)(_QWORD *, uint64_t, unint64_t)))v269)(v263, (uint64_t (*)(_QWORD *, uint64_t, unint64_t))v274);
      ((void (*)(_BYTE *, uint64_t (*)(_QWORD, _QWORD, _QWORD)))v52)(v267, v183);
      if ((v63 & 1) != 0)
        goto LABEL_117;
      ++v75;
      v173 += v76;
      v63 = (unint64_t)v274;
      if (v171 == v75)
      {
        swift_bridgeObjectRelease(v120);
        v184 = *(_QWORD *)(v280 + 16);
        goto LABEL_120;
      }
    }
    swift_bridgeObjectRelease(0xE400000000000000);
    v178 = v263;
LABEL_116:
    v186 = v178;
    v187 = v274;
    v188 = v269;
    ((void (*)(_BYTE *, uint64_t (*)(_QWORD *, uint64_t, unint64_t)))v269)(v186, (uint64_t (*)(_QWORD *, uint64_t, unint64_t))v274);
    ((void (*)(_BYTE *, uint64_t (*)(_QWORD, _QWORD, _QWORD)))v188)(v267, v187);
LABEL_117:
    swift_bridgeObjectRelease(v120);
    v184 = v75 + 1;
    v120 = v264;
    if (__OFADD__(v75, 1))
      goto LABEL_182;
    v189 = v280;
    v190 = *(_QWORD *)(v280 + 16);
    if (v184 == v190)
    {
LABEL_119:
      v171 = v75;
LABEL_120:
      v63 = v271;
      v61 = v272;
      v75 = (unint64_t)v266;
      v52 = v253;
      v76 = v270;
      v185 = v247;
      if (v184 >= v171)
        goto LABEL_121;
LABEL_181:
      __break(1u);
LABEL_182:
      __break(1u);
      goto LABEL_183;
    }
    v141 = (_BYTE *)(v76 + v173);
    v63 = v75 + 1;
    v143 = (unint64_t)v257;
    while (1)
    {
      if (v63 >= v190)
      {
        __break(1u);
LABEL_180:
        __break(1u);
        goto LABEL_181;
      }
      v205 = ((uint64_t (*)(_BYTE *, _BYTE *, _QWORD))v83)(v120, &v141[v189], v274);
      v206 = URLQueryItem.name.getter(v205);
      v208 = v207;
      if (v206 == 1953460082 && v207 == 0xE400000000000000)
      {
        swift_bridgeObjectRelease(0xE400000000000000);
        v52 = v264;
        v209 = v274;
        ((void (*)(unint64_t, _BYTE *, uint64_t (*)(_QWORD *, uint64_t, unint64_t)))v83)(v143, v264, (uint64_t (*)(_QWORD *, uint64_t, unint64_t))v274);
LABEL_140:
        v215 = v269;
        ((void (*)(unint64_t, uint64_t (*)(_QWORD, _QWORD, _QWORD)))v269)(v143, v209);
        ((void (*)(_BYTE *, uint64_t (*)(_QWORD, _QWORD, _QWORD)))v215)(v52, v209);
        v120 = v52;
        goto LABEL_141;
      }
      v210 = _stringCompareWithSmolCheck(_:_:expecting:)(v206, v207, 1953460082, 0xE400000000000000, 0);
      swift_bridgeObjectRelease(v208);
      v52 = v264;
      v209 = v274;
      v211 = ((uint64_t (*)(unint64_t, _BYTE *, _QWORD))v83)(v143, v264, v274);
      if ((v210 & 1) != 0)
        goto LABEL_140;
      v212 = URLQueryItem.name.getter(v211);
      v214 = v213;
      if (v212 == 1752457584 && v213 == 0xE400000000000000)
      {
        swift_bridgeObjectRelease(0xE400000000000000);
        v209 = v274;
        v52 = v264;
        goto LABEL_140;
      }
      v121 = _stringCompareWithSmolCheck(_:_:expecting:)(v212, v213, 1752457584, 0xE400000000000000, 0);
      swift_bridgeObjectRelease(v214);
      v216 = v274;
      v52 = v269;
      ((void (*)(unint64_t, uint64_t (*)(_QWORD *, uint64_t, unint64_t)))v269)(v143, (uint64_t (*)(_QWORD *, uint64_t, unint64_t))v274);
      ((void (*)(_BYTE *, uint64_t (*)(_QWORD, _QWORD, _QWORD)))v52)(v264, v216);
      if ((v121 & 1) != 0)
      {
        v120 = v264;
        goto LABEL_141;
      }
      if (v63 != v75)
        break;
LABEL_155:
      v221 = __OFADD__(v75++, 1);
      v120 = v264;
      if (v221)
      {
        __break(1u);
        goto LABEL_184;
      }
LABEL_141:
      v184 = v63 + 1;
      if (__OFADD__(v63, 1))
        goto LABEL_180;
      v189 = v280;
      v190 = *(_QWORD *)(v280 + 16);
      ++v63;
      v141 += v76;
      if (v184 == v190)
        goto LABEL_119;
    }
    if ((v75 & 0x8000000000000000) == 0)
    {
      v217 = v280;
      v143 = *(_QWORD *)(v280 + 16);
      if (v75 >= v143)
        goto LABEL_186;
      v52 = v274;
      ((void (*)(_BYTE *, unint64_t, uint64_t (*)(_QWORD *, uint64_t, unint64_t)))v83)(v255, v280 + v61 + v75 * v76, (uint64_t (*)(_QWORD *, uint64_t, unint64_t))v274);
      if (v63 >= v143)
        goto LABEL_187;
      ((void (*)(_BYTE *, _BYTE *, _BYTE *))v83)(v256, &v141[v217], v52);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v217);
      v280 = v217;
      v143 = v273;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v217 = sub_1000EEFA8(v217);
        v280 = v217;
      }
      if (v75 >= *(_QWORD *)(v217 + 16))
        goto LABEL_188;
      v219 = v217 + v61 + v75 * v76;
      v220 = *(void (**)(_QWORD, _QWORD, _QWORD))(v143 + 40);
      v121 = (uint64_t)v274;
      v220(v219, v256, (uint64_t (*)(_QWORD *, uint64_t, unint64_t))v274);
      if (v63 >= *(_QWORD *)(v280 + 16))
        goto LABEL_189;
      v220(&v141[v280], v255, v121);
      v143 = (unint64_t)v257;
      goto LABEL_155;
    }
    __break(1u);
LABEL_186:
    __break(1u);
LABEL_187:
    __break(1u);
LABEL_188:
    __break(1u);
LABEL_189:
    __break(1u);
LABEL_190:
    v268 = sub_100052940(0, v268[2] + 1, 1, v268);
LABEL_99:
    v162 = v268[2];
    v161 = v268[3];
    if (v162 >= v161 >> 1)
      v268 = sub_100052940((_QWORD *)(v161 > 1), v162 + 1, 1, v268);
    v163 = v268;
    v268[2] = v162 + 1;
    v164 = &v163[2 * v162];
    v164[4] = v75;
    v164[5] = v143;
LABEL_102:
    v61 = (unint64_t)v52;
    v75 = v76;
    v52 = v141;
    v137 = v273;
  }
  v184 = 0;
  v76 = v270;
  v63 = v271;
  v185 = v247;
LABEL_121:
  sub_1000EF6F0(v171, v184);
  swift_bridgeObjectRelease(v268);
  if (*(_QWORD *)(v280 + 16))
    URLComponents.queryItems.setter();
  else
    swift_bridgeObjectRelease(v280);
  v191 = v260;
  sub_100088E8C(v75, (uint64_t)v260);
  v192 = v252;
  v193 = v251(v191, 1, v252);
  if ((_DWORD)v193 == 1)
  {
    sub_10000BA50((uint64_t)v191, &qword_1001570F0);
LABEL_159:
    v222 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v185);
    v223 = (id)SFObjectAndOffsetForURLPair(v222);

    v224 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v223, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
    v275 = 0x744974657366666FLL;
    v276 = 0xEA00000000006D65;
    AnyHashable.init<A>(_:)(v277, &v275, &type metadata for String, &protocol witness table for String);
    if (*(_QWORD *)(v224 + 16) && (v225 = sub_1000DA95C((uint64_t)v277), (v226 & 1) != 0))
    {
      sub_1000148AC(*(_QWORD *)(v224 + 56) + 32 * v225, (uint64_t)&v278);
    }
    else
    {
      v278 = 0u;
      v279 = 0u;
    }
    v204 = (uint64_t)v259;
    swift_bridgeObjectRelease(v224);
    sub_100014878((uint64_t)v277);
    if (*((_QWORD *)&v279 + 1))
    {
      v203 = swift_dynamicCast(&v275, &v278, (char *)&type metadata for Any + 8, &type metadata for String, 6);
      if ((v203 & 1) != 0)
      {
        v227 = HIBYTE(v276) & 0xF;
        if ((v276 & 0x2000000000000000) == 0)
          v227 = v275 & 0xFFFFFFFFFFFFLL;
        if (v227)
        {
          v202 = v262;
          v203 = URLComponents.fragment.setter(v275, v276);
          goto LABEL_172;
        }
        v203 = swift_bridgeObjectRelease(v276);
      }
    }
    else
    {
      v203 = sub_10000BA50((uint64_t)&v278, &qword_10015BA90);
    }
    v202 = v262;
    goto LABEL_172;
  }
  v194 = v63;
  v195 = v191;
  v196 = URLComponents.fragment.getter(v193);
  v198 = v197;
  v199 = v195;
  v63 = v194;
  (*(void (**)(_BYTE *, uint64_t))(v76 + 8))(v199, v192);
  if (!v198)
    goto LABEL_159;
  v200 = HIBYTE(v198) & 0xF;
  if ((v198 & 0x2000000000000000) == 0)
    v200 = v196 & 0xFFFFFFFFFFFFLL;
  if (!v200)
  {
    swift_bridgeObjectRelease(v198);
    goto LABEL_159;
  }
  swift_bridgeObjectRelease(v185);
  v201 = v196;
  v202 = v262;
  v203 = URLComponents.fragment.setter(v201, v198);
  v204 = (uint64_t)v259;
LABEL_172:
  URLComponents.url.getter(v203);
  if ((*((unsigned int (**)(uint64_t, uint64_t, unint64_t))v52 + 6))(v204, 1, v61) == 1)
  {
    v120 = v52;
    v52 = (_BYTE *)v61;
    sub_10000BA50(v204, (uint64_t *)&unk_10015C9A0);
    if (qword_100156CB0 != -1)
LABEL_183:
      swift_once(&qword_100156CB0, sub_10008BE28);
    v228 = type metadata accessor for Logger(0);
    sub_100007808(v228, (uint64_t)qword_10015D2C8);
    v229 = v120;
    v230 = v250;
    v231 = v265;
    v274 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))*((_QWORD *)v120 + 2);
    v232 = v274(v250, v265, v52);
    v233 = Logger.logObject.getter(v232);
    v234 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v233, v234))
    {
      v235 = swift_slowAlloc(22, -1);
      v273 = swift_slowAlloc(32, -1);
      v277[0] = v273;
      *(_DWORD *)v235 = 141558275;
      *(_QWORD *)&v278 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v278, (char *)&v278 + 8, v235 + 4, v235 + 12);
      *(_WORD *)(v235 + 12) = 2081;
      v236 = sub_100014830();
      v237 = dispatch thunk of CustomStringConvertible.description.getter(v52, v236);
      v239 = v238;
      *(_QWORD *)&v278 = sub_1000DA1F0(v237, v238, v277);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v278, (char *)&v278 + 8, v235 + 14, v235 + 22);
      swift_bridgeObjectRelease(v239);
      v240 = (void (*)(_BYTE *, _BYTE *))*((_QWORD *)v229 + 1);
      v240(v230, v52);
      _os_log_impl((void *)&_mh_execute_header, v233, v234, "Failed to transform URL %{private,mask.hash}s into a settings-navigation URL.", (uint8_t *)v235, 0x16u);
      v241 = v273;
      swift_arrayDestroy(v273, 1, (char *)&type metadata for Any + 8);
      v242 = v241;
      v63 = v271;
      swift_slowDealloc(v242, -1, -1);
      v243 = v235;
      v231 = v265;
      swift_slowDealloc(v243, -1, -1);

      (*(void (**)(_BYTE *, uint64_t))(v270 + 8))(v262, v252);
      sub_10000BA50(v75, &qword_1001570F0);
      v240(v254, v52);
    }
    else
    {

      v244 = (void (*)(_BYTE *, _BYTE *))*((_QWORD *)v229 + 1);
      v244(v230, v52);
      (*(void (**)(_BYTE *, uint64_t))(v76 + 8))(v262, v252);
      sub_10000BA50(v75, &qword_1001570F0);
      v244(v254, v52);
    }
    return v274(v63, v231, v52);
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v76 + 8))(v202, v252);
    sub_10000BA50(v75, &qword_1001570F0);
    (*((void (**)(_BYTE *, unint64_t))v52 + 1))(v254, v61);
    return (*((uint64_t (**)(unint64_t, uint64_t, unint64_t))v52 + 4))(v63, v204, v61);
  }
}

uint64_t sub_100088E8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004FC8(&qword_1001570F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for DebugSettingsList()
{
  return &type metadata for DebugSettingsList;
}

uint64_t sub_100088EE4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10012AC20, 1);
}

uint64_t sub_100088EF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  int *v50;
  void (*v51)(char *, uint64_t);
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int8 v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 v71;

  v56 = a3;
  v57 = a4;
  v54 = a2;
  v63 = a5;
  v6 = sub_100004FC8(&qword_100159750);
  v61 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v62 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v60 = (char *)&v53 - v10;
  v11 = __chkstk_darwin(v9);
  v59 = (char *)&v53 - v12;
  v13 = __chkstk_darwin(v11);
  v58 = (char *)&v53 - v14;
  v15 = __chkstk_darwin(v13);
  v55 = (char *)&v53 - v16;
  v17 = __chkstk_darwin(v15);
  v64 = (char *)&v53 - v18;
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v53 - v20;
  __chkstk_darwin(v19);
  v65 = (char *)&v53 - v22;
  v23 = AppStorage.projectedValue.getter(&v69, a1, &type metadata for Bool);
  v24 = v69;
  v25 = v70;
  v66 = v69;
  v67 = v70;
  v68 = v71;
  v26 = static Animation.default.getter(v23);
  v27 = sub_100004FC8(&qword_10015A1D0);
  Binding.animation(_:)(&v69, v26, v27);
  swift_release(v25);
  swift_release(v26);
  swift_release(v24);
  Toggle.init(isOn:label:)(v69, v70, v71, sub_1000895BC, 0, &type metadata for Text, &protocol witness table for Text);
  v28 = AppStorage.projectedValue.getter(&v69, v54, &type metadata for Bool);
  v29 = v69;
  v30 = v70;
  v66 = v69;
  v67 = v70;
  v68 = v71;
  v31 = static Animation.default.getter(v28);
  Binding.animation(_:)(&v69, v31, v27);
  swift_release(v30);
  swift_release(v31);
  swift_release(v29);
  v53 = v21;
  Toggle.init(isOn:label:)(v69, v70, v71, sub_100089388, 0, &type metadata for Text, &protocol witness table for Text);
  v32 = AppStorage.projectedValue.getter(&v69, v56, &type metadata for Bool);
  v33 = v69;
  v34 = v70;
  v66 = v69;
  v67 = v70;
  v68 = v71;
  v35 = static Animation.default.getter(v32);
  Binding.animation(_:)(&v69, v35, v27);
  swift_release(v34);
  swift_release(v35);
  swift_release(v33);
  v36 = v64;
  Toggle.init(isOn:label:)(v69, v70, v71, sub_1000893B8, 0, &type metadata for Text, &protocol witness table for Text);
  v37 = AppStorage.projectedValue.getter(&v69, v57, &type metadata for Bool);
  v38 = v69;
  v39 = v70;
  v66 = v69;
  v67 = v70;
  v68 = v71;
  v40 = static Animation.default.getter(v37);
  Binding.animation(_:)(&v69, v40, v27);
  swift_release(v39);
  swift_release(v40);
  swift_release(v38);
  v41 = v55;
  Toggle.init(isOn:label:)(v69, v70, v71, sub_1000893E8, 0, &type metadata for Text, &protocol witness table for Text);
  v42 = v61;
  v43 = *(void (**)(char *, char *, uint64_t))(v61 + 16);
  v44 = v58;
  v43(v58, v65, v6);
  v45 = v59;
  v43(v59, v21, v6);
  v46 = v60;
  v43(v60, v36, v6);
  v47 = v62;
  v48 = v41;
  v43(v62, v41, v6);
  v49 = v63;
  v43(v63, v44, v6);
  v50 = (int *)sub_100004FC8(&qword_10015A1D8);
  v43(&v49[v50[12]], v45, v6);
  v43(&v49[v50[16]], v46, v6);
  v43(&v49[v50[20]], v47, v6);
  v51 = *(void (**)(char *, uint64_t))(v42 + 8);
  v51(v48, v6);
  v51(v64, v6);
  v51(v53, v6);
  v51(v65, v6);
  v51(v47, v6);
  v51(v46, v6);
  v51(v45, v6);
  return ((uint64_t (*)(char *, uint64_t))v51)(v44, v6);
}

void sub_100089388(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0xD000000000000012;
  *(_QWORD *)(a1 + 8) = 0x80000001001237E0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = &_swiftEmptyArrayStorage;
}

void sub_1000893B8(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0xD000000000000012;
  *(_QWORD *)(a1 + 8) = 0x80000001001237C0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = &_swiftEmptyArrayStorage;
}

void sub_1000893E8(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0xD000000000000013;
  *(_QWORD *)(a1 + 8) = 0x80000001001237A0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = &_swiftEmptyArrayStorage;
}

uint64_t sub_100089418()
{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[16];
  __int128 v11;
  __int128 v12;

  v1 = sub_100004FC8(&qword_10015A1B0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = &v10[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = v0[1];
  v11 = *v0;
  v12 = v5;
  v6 = sub_100004FC8(&qword_10015A1B8);
  v7 = sub_100007868(&qword_10015A1C0, &qword_10015A1B8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  List<>.init(content:)(sub_10008954C, v10, v6, v7);
  v8 = sub_100007868(&qword_10015A1C8, &qword_10015A1B0, (uint64_t)&protocol conformance descriptor for List<A, B>);
  View.navigationTitle(_:)(0x6553206775626544, 0xEE0073676E697474, 0, _swiftEmptyArrayStorage, v1, v8);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v2 + 8))(v4, v1);
}

uint64_t sub_10008954C@<X0>(char *a1@<X8>)
{
  uint64_t *v1;

  return sub_100088EF4(v1[2], v1[3], v1[4], v1[5], a1);
}

uint64_t sub_100089558()
{
  _QWORD v1[2];

  v1[0] = sub_100005430(&qword_10015A1B0);
  v1[1] = sub_100007868(&qword_10015A1C8, &qword_10015A1B0, (uint64_t)&protocol conformance descriptor for List<A, B>);
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.navigationTitle(_:)>>, 1);
}

_QWORD *sub_1000895C0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  id v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;

  v4 = type metadata accessor for PrimarySettingsListToggleModel(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = v12;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v6 = (int *)v4;
    v7 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(a2, v7))
    {
      case 0u:
        v8 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
        v9 = a1;
        v10 = v7;
        v11 = 0;
        goto LABEL_14;
      case 1u:
        v13 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
        v9 = a1;
        v10 = v7;
        v11 = 1;
        goto LABEL_14;
      case 2u:
        v14 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
        v15 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v16 = (_QWORD *)((char *)a1 + v15);
        v17 = (_QWORD *)((char *)a2 + v15);
        v18 = v17[1];
        *v16 = *v17;
        v16[1] = v18;
        swift_bridgeObjectRetain(v18);
        v9 = a1;
        v10 = v7;
        v11 = 2;
        goto LABEL_14;
      case 3u:
        v19 = a2[1];
        *a1 = *a2;
        a1[1] = v19;
        v20 = a2[3];
        a1[2] = a2[2];
        a1[3] = v20;
        v21 = a2[5];
        a1[4] = a2[4];
        a1[5] = v21;
        v22 = a2[7];
        a1[6] = a2[6];
        a1[7] = v22;
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v22);
        v9 = a1;
        v10 = v7;
        v11 = 3;
        goto LABEL_14;
      case 4u:
        v23 = a2[1];
        *a1 = *a2;
        a1[1] = v23;
        v24 = a2[3];
        a1[2] = a2[2];
        a1[3] = v24;
        v25 = a2[5];
        a1[4] = a2[4];
        a1[5] = v25;
        a1[6] = a2[6];
        swift_bridgeObjectRetain(v23);
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v25);
        v9 = a1;
        v10 = v7;
        v11 = 4;
        goto LABEL_14;
      case 5u:
        v26 = a2[1];
        *a1 = *a2;
        a1[1] = v26;
        v27 = a2[3];
        a1[2] = a2[2];
        a1[3] = v27;
        v29 = (void *)a2[4];
        v28 = a2[5];
        a1[4] = v29;
        a1[5] = v28;
        v30 = a2[9];
        swift_bridgeObjectRetain(v26);
        swift_bridgeObjectRetain(v27);
        v31 = v29;
        swift_bridgeObjectRetain(v28);
        if (v30)
        {
          a1[9] = v30;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v30 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v30);
        }
        else
        {
          v32 = *((_OWORD *)a2 + 4);
          *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
          *((_OWORD *)a1 + 4) = v32;
        }
        v9 = a1;
        v10 = v7;
        v11 = 5;
LABEL_14:
        swift_storeEnumTagMultiPayload(v9, v10, v11);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
        break;
    }
    *((_BYTE *)a1 + v6[5]) = *((_BYTE *)a2 + v6[5]);
    v33 = v6[6];
    v34 = (char *)a1 + v33;
    v35 = (char *)a2 + v33;
    v36 = *(_QWORD *)((char *)a2 + v33);
    v37 = *(_QWORD *)((char *)a2 + v33 + 8);
    v38 = *((_BYTE *)a2 + v33 + 16);
    sub_10000BAD4(v36, v37, v38);
    *(_QWORD *)v34 = v36;
    *((_QWORD *)v34 + 1) = v37;
    v34[16] = v38;
    v39 = *((_QWORD *)v35 + 3);
    *((_QWORD *)v34 + 3) = v39;
    *((_BYTE *)a1 + v6[7]) = *((_BYTE *)a2 + v6[7]);
    v40 = v6[8];
    v41 = (_QWORD *)((char *)a1 + v40);
    v42 = (_QWORD *)((char *)a2 + v40);
    v12 = v42[1];
    *v41 = *v42;
    v41[1] = v12;
    swift_bridgeObjectRetain(v39);
  }
  swift_retain(v12);
  return a1;
}

uint64_t sub_1000898B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(a1, v2))
  {
    case 0u:
    case 1u:
      v3 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
      break;
    case 2u:
      v4 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
      v5 = sub_100004FC8(&qword_10015C420);
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v5 + 48) + 8));
      break;
    case 3u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
      break;
    case 4u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      break;
    case 5u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));

      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      if (*(_QWORD *)(a1 + 72))
        sub_100005474((_QWORD *)(a1 + 48));
      break;
    default:
      break;
  }
  v6 = type metadata accessor for PrimarySettingsListToggleModel(0);
  v7 = a1 + *(int *)(v6 + 24);
  sub_100007618(*(_QWORD *)v7, *(_QWORD *)(v7 + 8), *(_BYTE *)(v7 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + 24));
  return swift_release(*(_QWORD *)(a1 + *(int *)(v6 + 32) + 8));
}

_QWORD *sub_100089A10(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  id v27;
  __int128 v28;
  int *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;

  v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(a2, v4))
  {
    case 0u:
      v5 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
      v6 = a1;
      v7 = v4;
      v8 = 0;
      goto LABEL_12;
    case 1u:
      v9 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      v6 = a1;
      v7 = v4;
      v8 = 1;
      goto LABEL_12;
    case 2u:
      v10 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      v11 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
      v12 = (_QWORD *)((char *)a1 + v11);
      v13 = (_QWORD *)((char *)a2 + v11);
      v14 = v13[1];
      *v12 = *v13;
      v12[1] = v14;
      swift_bridgeObjectRetain(v14);
      v6 = a1;
      v7 = v4;
      v8 = 2;
      goto LABEL_12;
    case 3u:
      v15 = a2[1];
      *a1 = *a2;
      a1[1] = v15;
      v16 = a2[3];
      a1[2] = a2[2];
      a1[3] = v16;
      v17 = a2[5];
      a1[4] = a2[4];
      a1[5] = v17;
      v18 = a2[7];
      a1[6] = a2[6];
      a1[7] = v18;
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v18);
      v6 = a1;
      v7 = v4;
      v8 = 3;
      goto LABEL_12;
    case 4u:
      v19 = a2[1];
      *a1 = *a2;
      a1[1] = v19;
      v20 = a2[3];
      a1[2] = a2[2];
      a1[3] = v20;
      v21 = a2[5];
      a1[4] = a2[4];
      a1[5] = v21;
      a1[6] = a2[6];
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRetain(v21);
      v6 = a1;
      v7 = v4;
      v8 = 4;
      goto LABEL_12;
    case 5u:
      v22 = a2[1];
      *a1 = *a2;
      a1[1] = v22;
      v23 = a2[3];
      a1[2] = a2[2];
      a1[3] = v23;
      v25 = (void *)a2[4];
      v24 = a2[5];
      a1[4] = v25;
      a1[5] = v24;
      v26 = a2[9];
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v23);
      v27 = v25;
      swift_bridgeObjectRetain(v24);
      if (v26)
      {
        a1[9] = v26;
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v26 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v26);
      }
      else
      {
        v28 = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 4) = v28;
      }
      v6 = a1;
      v7 = v4;
      v8 = 5;
LABEL_12:
      swift_storeEnumTagMultiPayload(v6, v7, v8);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
      break;
  }
  v29 = (int *)type metadata accessor for PrimarySettingsListToggleModel(0);
  *((_BYTE *)a1 + v29[5]) = *((_BYTE *)a2 + v29[5]);
  v30 = v29[6];
  v31 = (char *)a1 + v30;
  v32 = (char *)a2 + v30;
  v33 = *(_QWORD *)((char *)a2 + v30);
  v34 = *(_QWORD *)((char *)a2 + v30 + 8);
  v35 = *((_BYTE *)a2 + v30 + 16);
  sub_10000BAD4(v33, v34, v35);
  *(_QWORD *)v31 = v33;
  *((_QWORD *)v31 + 1) = v34;
  v31[16] = v35;
  v36 = *((_QWORD *)v32 + 3);
  *((_QWORD *)v31 + 3) = v36;
  *((_BYTE *)a1 + v29[7]) = *((_BYTE *)a2 + v29[7]);
  v37 = v29[8];
  v38 = (_QWORD *)((char *)a1 + v37);
  v39 = (_QWORD *)((char *)a2 + v37);
  v40 = v39[1];
  *v38 = *v39;
  v38[1] = v40;
  swift_bridgeObjectRetain(v36);
  swift_retain(v40);
  return a1;
}

_QWORD *sub_100089CDC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  __int128 v28;
  int *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;

  if (a1 != a2)
  {
    sub_100013014((uint64_t)a1);
    v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(a2, v4))
    {
      case 0u:
        v5 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
        v6 = a1;
        v7 = v4;
        v8 = 0;
        goto LABEL_13;
      case 1u:
        v9 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
        v6 = a1;
        v7 = v4;
        v8 = 1;
        goto LABEL_13;
      case 2u:
        v10 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
        v11 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v12 = (_QWORD *)((char *)a1 + v11);
        v13 = (_QWORD *)((char *)a2 + v11);
        *v12 = *v13;
        v14 = v13[1];
        v12[1] = v14;
        swift_bridgeObjectRetain(v14);
        v6 = a1;
        v7 = v4;
        v8 = 2;
        goto LABEL_13;
      case 3u:
        *a1 = *a2;
        v15 = a2[1];
        a1[1] = v15;
        a1[2] = a2[2];
        v16 = a2[3];
        a1[3] = v16;
        a1[4] = a2[4];
        v17 = a2[5];
        a1[5] = v17;
        a1[6] = a2[6];
        v18 = a2[7];
        a1[7] = v18;
        swift_bridgeObjectRetain(v15);
        swift_bridgeObjectRetain(v16);
        swift_bridgeObjectRetain(v17);
        swift_bridgeObjectRetain(v18);
        v6 = a1;
        v7 = v4;
        v8 = 3;
        goto LABEL_13;
      case 4u:
        *a1 = *a2;
        v19 = a2[1];
        a1[1] = v19;
        a1[2] = a2[2];
        v20 = a2[3];
        a1[3] = v20;
        a1[4] = a2[4];
        v21 = a2[5];
        a1[5] = v21;
        a1[6] = a2[6];
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v21);
        v6 = a1;
        v7 = v4;
        v8 = 4;
        goto LABEL_13;
      case 5u:
        *a1 = *a2;
        v22 = a2[1];
        a1[1] = v22;
        a1[2] = a2[2];
        v23 = a2[3];
        a1[3] = v23;
        v24 = (void *)a2[4];
        a1[4] = v24;
        v25 = a2[5];
        a1[5] = v25;
        v26 = a2[9];
        swift_bridgeObjectRetain(v22);
        swift_bridgeObjectRetain(v23);
        v27 = v24;
        swift_bridgeObjectRetain(v25);
        if (v26)
        {
          a1[9] = v26;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v26 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v26);
        }
        else
        {
          v28 = *((_OWORD *)a2 + 4);
          *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
          *((_OWORD *)a1 + 4) = v28;
        }
        v6 = a1;
        v7 = v4;
        v8 = 5;
LABEL_13:
        swift_storeEnumTagMultiPayload(v6, v7, v8);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
        break;
    }
  }
  v29 = (int *)type metadata accessor for PrimarySettingsListToggleModel(0);
  *((_BYTE *)a1 + v29[5]) = *((_BYTE *)a2 + v29[5]);
  v30 = v29[6];
  v31 = (char *)a1 + v30;
  v32 = (char *)a2 + v30;
  v33 = *(_QWORD *)((char *)a2 + v30);
  v34 = *(_QWORD *)((char *)a2 + v30 + 8);
  v35 = *((_BYTE *)a2 + v30 + 16);
  sub_10000BAD4(v33, v34, v35);
  v36 = *(_QWORD *)v31;
  v37 = *((_QWORD *)v31 + 1);
  v38 = v31[16];
  *(_QWORD *)v31 = v33;
  *((_QWORD *)v31 + 1) = v34;
  v31[16] = v35;
  sub_100007618(v36, v37, v38);
  v39 = *((_QWORD *)v32 + 3);
  v40 = *((_QWORD *)v31 + 3);
  *((_QWORD *)v31 + 3) = v39;
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRelease(v40);
  *((_BYTE *)a1 + v29[7]) = *((_BYTE *)a2 + v29[7]);
  v41 = v29[8];
  v42 = (_QWORD *)((char *)a1 + v41);
  v43 = (_QWORD *)((char *)a2 + v41);
  v44 = v43[1];
  v45 = v42[1];
  *v42 = *v43;
  v42[1] = v44;
  swift_retain(v44);
  swift_release(v45);
  return a1;
}

char *sub_10008A030(char *a1, char *a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;

  v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v4);
  if (EnumCaseMultiPayload == 2)
  {
    v7 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    v8 = sub_100004FC8(&qword_10015C420);
    *(_OWORD *)&a1[*(int *)(v8 + 48)] = *(_OWORD *)&a2[*(int *)(v8 + 48)];
    swift_storeEnumTagMultiPayload(a1, v4, 2);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v9 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
    swift_storeEnumTagMultiPayload(a1, v4, 1);
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    v6 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, v4, 0);
  }
  v10 = (int *)type metadata accessor for PrimarySettingsListToggleModel(0);
  a1[v10[5]] = a2[v10[5]];
  v11 = v10[6];
  v12 = &a1[v11];
  v13 = &a2[v11];
  v14 = *((_OWORD *)v13 + 1);
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *((_OWORD *)v12 + 1) = v14;
  a1[v10[7]] = a2[v10[7]];
  *(_OWORD *)&a1[v10[8]] = *(_OWORD *)&a2[v10[8]];
  return a1;
}

char *sub_10008A190(char *a1, char *a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (a1 != a2)
  {
    sub_100013014((uint64_t)a1);
    v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v4);
    if (EnumCaseMultiPayload == 2)
    {
      v7 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      v8 = sub_100004FC8(&qword_10015C420);
      *(_OWORD *)&a1[*(int *)(v8 + 48)] = *(_OWORD *)&a2[*(int *)(v8 + 48)];
      swift_storeEnumTagMultiPayload(a1, v4, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v9 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      swift_storeEnumTagMultiPayload(a1, v4, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, v4, 0);
    }
  }
  v10 = (int *)type metadata accessor for PrimarySettingsListToggleModel(0);
  a1[v10[5]] = a2[v10[5]];
  v11 = v10[6];
  v12 = &a1[v11];
  v13 = &a2[v11];
  LOBYTE(v11) = a2[v11 + 16];
  v14 = *(_QWORD *)v12;
  v15 = *((_QWORD *)v12 + 1);
  v16 = v12[16];
  *(_OWORD *)v12 = *(_OWORD *)v13;
  v12[16] = v11;
  sub_100007618(v14, v15, v16);
  v17 = *((_QWORD *)v12 + 3);
  *((_QWORD *)v12 + 3) = *((_QWORD *)v13 + 3);
  swift_bridgeObjectRelease(v17);
  a1[v10[7]] = a2[v10[7]];
  v18 = v10[8];
  v19 = *(_QWORD *)&a1[v18 + 8];
  *(_OWORD *)&a1[v18] = *(_OWORD *)&a2[v18];
  swift_release(v19);
  return a1;
}

uint64_t sub_10008A33C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008A348);
}

uint64_t sub_10008A348(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PrimarySettingsListToggleModel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_10008A384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008A390);
}

uint64_t sub_10008A390(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PrimarySettingsListToggleModel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for PrimarySettingsListToggle(uint64_t a1)
{
  uint64_t result;

  result = qword_10015A238;
  if (!qword_10015A238)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PrimarySettingsListToggle);
  return result;
}

uint64_t sub_10008A40C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for PrimarySettingsListToggleModel(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10008A474(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10012AC70, 1);
}

uint64_t sub_10008A484()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[16];
  uint64_t v23;
  _QWORD v24[2];
  unsigned __int8 v25;

  v1 = v0;
  v2 = type metadata accessor for PrimarySettingsListToggle(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = &v22[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10008A6E8(v0, (uint64_t)v5);
  v6 = type metadata accessor for MainActor(0);
  v7 = static MainActor.shared.getter(v6);
  v8 = *(unsigned __int8 *)(v3 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = v9 + v4;
  v11 = v8 | 7;
  v12 = swift_allocObject(&unk_10014B1C0, v10, v8 | 7);
  *(_QWORD *)(v12 + 16) = v7;
  *(_QWORD *)(v12 + 24) = &protocol witness table for MainActor;
  sub_10008A730((uint64_t)v5, v12 + v9);
  v13 = sub_10008A6E8(v0, (uint64_t)v5);
  v14 = static MainActor.shared.getter(v13);
  v15 = swift_allocObject(&unk_10014B1E8, v10, v11);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = &protocol witness table for MainActor;
  sub_10008A730((uint64_t)v5, v15 + v9);
  Binding.init(get:set:)(v24, sub_10008A774, v12, sub_10008A964, v15, &type metadata for Bool);
  v16 = v24[0];
  v17 = v24[1];
  v18 = v25;
  v23 = v1;
  v19 = sub_100004FC8(&qword_100157440);
  v20 = sub_100007868((unint64_t *)&qword_100157450, &qword_100157440, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  return Toggle.init(isOn:label:)(v16, v17, v18, sub_10008A9C4, v22, v19, v20);
}

uint64_t sub_10008A628(uint64_t a1)
{
  unint64_t v1;
  _QWORD v3[4];
  _BYTE v4[16];
  uint64_t v5;

  v5 = a1;
  v3[2] = a1;
  v1 = sub_1000116EC();
  return Label.init(title:icon:)(sub_10008A9CC, v4, sub_10008A9D4, v3, &type metadata for Text, &type metadata for Icon, &protocol witness table for Text, v1);
}

uint64_t sub_10008A694@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v3 = a1 + *(int *)(type metadata accessor for PrimarySettingsListToggleModel(0) + 24);
  v4 = *(_QWORD *)v3;
  v5 = *(_QWORD *)(v3 + 8);
  v6 = *(_BYTE *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  *(_QWORD *)a2 = *(_QWORD *)v3;
  *(_QWORD *)(a2 + 8) = v5;
  *(_BYTE *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 24) = v7;
  sub_10000BAD4(v4, v5, v6);
  return swift_bridgeObjectRetain(v7);
}

uint64_t sub_10008A6E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PrimarySettingsListToggle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10008A730(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PrimarySettingsListToggle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10008A774@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PrimarySettingsListToggle(0) - 8) + 80);
  v4 = v1 + ((v3 + 32) & ~v3);
  result = type metadata accessor for PrimarySettingsListToggleModel(0);
  *a1 = *(_BYTE *)(v4 + *(int *)(result + 28));
  return result;
}

uint64_t sub_10008A7C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(type metadata accessor for PrimarySettingsListToggle(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  v5 = v0 + v3;
  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v0 + v3, v6))
  {
    case 0u:
    case 1u:
      v7 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v0 + v3, v7);
      break;
    case 2u:
      v8 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v3, v8);
      v9 = sub_100004FC8(&qword_10015C420);
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + *(int *)(v9 + 48) + 8));
      break;
    case 3u:
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 40));
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 56));
      break;
    case 4u:
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 40));
      break;
    case 5u:
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 24));

      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 40));
      if (*(_QWORD *)(v5 + 72))
        sub_100005474((_QWORD *)(v5 + 48));
      break;
    default:
      break;
  }
  v10 = v3 + v4;
  v11 = type metadata accessor for PrimarySettingsListToggleModel(0);
  v12 = v5 + *(int *)(v11 + 24);
  sub_100007618(*(_QWORD *)v12, *(_QWORD *)(v12 + 8), *(_BYTE *)(v12 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v12 + 24));
  swift_release(*(_QWORD *)(v5 + *(int *)(v11 + 32) + 8));
  return swift_deallocObject(v0, v10, v2 | 7);
}

uint64_t sub_10008A964(unsigned __int8 *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PrimarySettingsListToggle(0) - 8) + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *a1;
  v6 = type metadata accessor for PrimarySettingsListToggleModel(0);
  return (*(uint64_t (**)(uint64_t))(v1 + *(int *)(v6 + 32) + v4))(v5);
}

uint64_t sub_10008A9C4()
{
  uint64_t v0;

  return sub_10008A628(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10008A9CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10008A694(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10008A9D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t result;

  sub_10009C7A4();
  v3 = v2;
  v5 = v4;
  v7 = v6;
  result = swift_getKeyPath(&unk_100117C80);
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v7;
  return result;
}

uint64_t sub_10008AA30()
{
  return sub_100007868(&qword_10015A270, &qword_10015A278, (uint64_t)&protocol conformance descriptor for Toggle<A>);
}

uint64_t destroy for PrimarySettingsListSection(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  swift_release(*(_QWORD *)a1);
  sub_10000BAE4(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  v2 = *(_QWORD *)(a1 + 64);
  if (v2)
  {
    sub_100007618(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
    swift_bridgeObjectRelease(v2);
  }
  v3 = *(_QWORD *)(a1 + 96);
  if (v3)
  {
    sub_100007618(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_BYTE *)(a1 + 88));
    swift_bridgeObjectRelease(v3);
  }
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 104));
}

uint64_t initializeWithCopy for PrimarySettingsListSection(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = v5;
  v6 = a2[2];
  v7 = a2[3];
  v8 = *((_BYTE *)a2 + 32);
  swift_retain(v4);
  sub_10000BA8C(v6, v7, v8);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v8;
  v9 = a2[8];
  if (!v9)
  {
    v17 = *(_OWORD *)(a2 + 7);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
    *(_OWORD *)(a1 + 56) = v17;
    v13 = a2[12];
    if (v13)
      goto LABEL_3;
LABEL_5:
    v18 = *(_OWORD *)(a2 + 11);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
    *(_OWORD *)(a1 + 88) = v18;
    goto LABEL_6;
  }
  v10 = a2[5];
  v11 = a2[6];
  v12 = *((_BYTE *)a2 + 56);
  sub_10000BAD4(v10, v11, v12);
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = v11;
  *(_BYTE *)(a1 + 56) = v12;
  *(_QWORD *)(a1 + 64) = v9;
  swift_bridgeObjectRetain(v9);
  v13 = a2[12];
  if (!v13)
    goto LABEL_5;
LABEL_3:
  v14 = a2[9];
  v15 = a2[10];
  v16 = *((_BYTE *)a2 + 88);
  sub_10000BAD4(v14, v15, v16);
  *(_QWORD *)(a1 + 72) = v14;
  *(_QWORD *)(a1 + 80) = v15;
  *(_BYTE *)(a1 + 88) = v16;
  *(_QWORD *)(a1 + 96) = v13;
  swift_bridgeObjectRetain(v13);
LABEL_6:
  v19 = a2[13];
  *(_QWORD *)(a1 + 104) = v19;
  swift_bridgeObjectRetain(v19);
  return a1;
}

uint64_t *assignWithCopy for PrimarySettingsListSection(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  _OWORD *v30;
  _OWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v5;
  swift_retain(v4);
  swift_release(v6);
  v7 = a2[2];
  v8 = a2[3];
  v9 = *((_BYTE *)a2 + 32);
  sub_10000BA8C(v7, v8, v9);
  v10 = a1[2];
  v11 = a1[3];
  a1[2] = v7;
  a1[3] = v8;
  v12 = *((_BYTE *)a1 + 32);
  *((_BYTE *)a1 + 32) = v9;
  sub_10000BAE4(v10, v11, v12);
  v13 = a1 + 5;
  v14 = a2 + 5;
  v15 = a2[8];
  if (a1[8])
  {
    if (v15)
    {
      v16 = a2[5];
      v17 = a2[6];
      v18 = *((_BYTE *)a2 + 56);
      sub_10000BAD4(v16, v17, v18);
      v19 = a1[5];
      v20 = a1[6];
      v21 = *((_BYTE *)a1 + 56);
      a1[5] = v16;
      a1[6] = v17;
      *((_BYTE *)a1 + 56) = v18;
      sub_100007618(v19, v20, v21);
      v22 = a2[8];
      v23 = a1[8];
      a1[8] = v22;
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRelease(v23);
    }
    else
    {
      sub_10002CF1C((uint64_t)(a1 + 5));
      v28 = *(_OWORD *)(a2 + 7);
      *v13 = *v14;
      *(_OWORD *)(a1 + 7) = v28;
    }
  }
  else if (v15)
  {
    v24 = a2[5];
    v25 = a2[6];
    v26 = *((_BYTE *)a2 + 56);
    sub_10000BAD4(v24, v25, v26);
    a1[5] = v24;
    a1[6] = v25;
    *((_BYTE *)a1 + 56) = v26;
    v27 = a2[8];
    a1[8] = v27;
    swift_bridgeObjectRetain(v27);
  }
  else
  {
    v29 = *(_OWORD *)(a2 + 7);
    *v13 = *v14;
    *(_OWORD *)(a1 + 7) = v29;
  }
  v30 = a1 + 9;
  v31 = a2 + 9;
  v32 = a2[12];
  if (a1[12])
  {
    if (v32)
    {
      v33 = a2[9];
      v34 = a2[10];
      v35 = *((_BYTE *)a2 + 88);
      sub_10000BAD4(v33, v34, v35);
      v36 = a1[9];
      v37 = a1[10];
      v38 = *((_BYTE *)a1 + 88);
      a1[9] = v33;
      a1[10] = v34;
      *((_BYTE *)a1 + 88) = v35;
      sub_100007618(v36, v37, v38);
      v39 = a2[12];
      v40 = a1[12];
      a1[12] = v39;
      swift_bridgeObjectRetain(v39);
      swift_bridgeObjectRelease(v40);
    }
    else
    {
      sub_10002CF1C((uint64_t)(a1 + 9));
      v45 = *(_OWORD *)(a2 + 11);
      *v30 = *v31;
      *(_OWORD *)(a1 + 11) = v45;
    }
  }
  else if (v32)
  {
    v41 = a2[9];
    v42 = a2[10];
    v43 = *((_BYTE *)a2 + 88);
    sub_10000BAD4(v41, v42, v43);
    a1[9] = v41;
    a1[10] = v42;
    *((_BYTE *)a1 + 88) = v43;
    v44 = a2[12];
    a1[12] = v44;
    swift_bridgeObjectRetain(v44);
  }
  else
  {
    v46 = *(_OWORD *)(a2 + 11);
    *v30 = *v31;
    *(_OWORD *)(a1 + 11) = v46;
  }
  v47 = a2[13];
  v48 = a1[13];
  a1[13] = v47;
  swift_bridgeObjectRetain(v47);
  swift_bridgeObjectRelease(v48);
  return a1;
}

__n128 initializeWithTake for PrimarySettingsListSection(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t *assignWithTake for PrimarySettingsListSection(uint64_t *a1, uint64_t *a2)
{
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v4 = *((_BYTE *)a2 + 8);
  v5 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v4;
  swift_release(v5);
  v6 = *((_BYTE *)a2 + 32);
  v7 = a1[2];
  v8 = a1[3];
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  v9 = *((_BYTE *)a1 + 32);
  *((_BYTE *)a1 + 32) = v6;
  sub_10000BAE4(v7, v8, v9);
  if (a1[8])
  {
    v10 = a2[8];
    if (v10)
    {
      v11 = *((_BYTE *)a2 + 56);
      v12 = a1[5];
      v13 = a1[6];
      v14 = *((_BYTE *)a1 + 56);
      *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
      *((_BYTE *)a1 + 56) = v11;
      sub_100007618(v12, v13, v14);
      v15 = a1[8];
      a1[8] = v10;
      swift_bridgeObjectRelease(v15);
      goto LABEL_6;
    }
    sub_10002CF1C((uint64_t)(a1 + 5));
  }
  v16 = *(_OWORD *)(a2 + 7);
  *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
  *(_OWORD *)(a1 + 7) = v16;
LABEL_6:
  if (!a1[12])
  {
LABEL_10:
    v23 = *(_OWORD *)(a2 + 11);
    *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
    *(_OWORD *)(a1 + 11) = v23;
    goto LABEL_11;
  }
  v17 = a2[12];
  if (!v17)
  {
    sub_10002CF1C((uint64_t)(a1 + 9));
    goto LABEL_10;
  }
  v18 = *((_BYTE *)a2 + 88);
  v19 = a1[9];
  v20 = a1[10];
  v21 = *((_BYTE *)a1 + 88);
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *((_BYTE *)a1 + 88) = v18;
  sub_100007618(v19, v20, v21);
  v22 = a1[12];
  a1[12] = v17;
  swift_bridgeObjectRelease(v22);
LABEL_11:
  v24 = a1[13];
  a1[13] = a2[13];
  swift_bridgeObjectRelease(v24);
  return a1;
}

uint64_t getEnumTagSinglePayload for PrimarySettingsListSection(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 112))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 104);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PrimarySettingsListSection(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 104) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 112) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PrimarySettingsListSection()
{
  return &type metadata for PrimarySettingsListSection;
}

uint64_t sub_10008AFC0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10012ACB4, 1);
}

uint64_t sub_10008AFD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v8 = *(_QWORD *)(a1 + 104);
  swift_bridgeObjectRetain(v8);
  v1 = sub_100004FC8(&qword_100158B98);
  v2 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v3 = type metadata accessor for PrimarySettingsListItem(0);
  v4 = sub_100007868(&qword_10015A2D8, &qword_100158B98, (uint64_t)&protocol conformance descriptor for [A]);
  v5 = sub_100007828(&qword_10015A298, type metadata accessor for PrimarySettingsListItem, (uint64_t)&unk_100117640);
  v6 = sub_100007828(&qword_10015A2E0, type metadata accessor for PrimarySettingsListItemModel, (uint64_t)&unk_100115298);
  return ForEach<>.init(_:content:)(&v8, sub_10008B0C8, 0, v1, v2, v3, v4, v5, v6);
}

uint64_t sub_10008B0C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  char v8;

  v4 = type metadata accessor for PrimarySettingsListItem(0);
  sub_10008BCDC(a1, a2 + *(int *)(v4 + 20));
  v5 = type metadata accessor for SettingsAppModel(0);
  v6 = sub_100007828((unint64_t *)&qword_100159090, type metadata accessor for SettingsAppModel, (uint64_t)&unk_10011AF44);
  result = Environment.init<A>(_:)(v5, v5, v6);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v8 & 1;
  return result;
}

uint64_t sub_10008B144@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t KeyPath;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  _OWORD v26[3];
  _OWORD v27[3];
  uint64_t v28[4];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _BYTE v34[32];

  v4 = sub_100004FC8(&qword_10015A2C0);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for OpenURLAction(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004FC8(&qword_10015A280);
  __chkstk_darwin(v11);
  v13 = (_OWORD *)((char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = a1[4];
  v26[2] = a1[3];
  v27[0] = v14;
  v15 = a1[6];
  v27[1] = a1[5];
  v27[2] = v15;
  v16 = a1[2];
  v26[0] = a1[1];
  v26[1] = v16;
  sub_10007E96C((uint64_t)v27 + 8, (uint64_t)v28, &qword_100159078);
  sub_10007E96C((uint64_t)v28, (uint64_t)&v29, &qword_100159078);
  if (*((_QWORD *)&v30 + 1))
  {
    v31 = v29;
    v32 = v30;
    KeyPath = swift_getKeyPath(&unk_100117D20);
    v18 = (_OWORD *)swift_allocObject(&unk_10014B2D0, 128, 7);
    v19 = a1[5];
    v18[5] = a1[4];
    v18[6] = v19;
    v18[7] = a1[6];
    v20 = a1[1];
    v18[1] = *a1;
    v18[2] = v20;
    v21 = a1[3];
    v18[3] = a1[2];
    v18[4] = v21;
    sub_10008B828(v28);
    sub_10008BA58((uint64_t)a1);
    OpenURLAction.init(handler:)(sub_10008BA50, v18);
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))((char *)v6 + *(int *)(v4 + 28), v10, v7);
    *v6 = KeyPath;
    sub_1000864A8((uint64_t)&v31, (uint64_t)v34);
    v33 = *((_QWORD *)&v32 + 1);
    v22 = sub_100004FC8(&qword_10015A2B0);
    sub_10008BB08((uint64_t)v6, (uint64_t)v13 + *(int *)(v22 + 36));
    v23 = v32;
    *v13 = v31;
    v13[1] = v23;
    sub_1000864E4((uint64_t)v34);
    sub_100086514(&v33);
    sub_10008BB50((uint64_t)v6);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    sub_10008BB90((uint64_t)v34);
    sub_10008BBC0(&v33);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v13, 0, 1, v22);
  }
  else
  {
    v24 = sub_100004FC8(&qword_10015A2B0);
    (*(void (**)(_OWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v13, 1, 1, v24);
  }
  return sub_10007E96C((uint64_t)v13, a2, &qword_10015A280);
}

uint64_t sub_10008B3F8(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  type metadata accessor for OpenURLAction(0);
  __chkstk_darwin();
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v4 + 16))(v3, a1);
  return EnvironmentValues.openURL.setter(v3);
}

uint64_t sub_10008B474(uint64_t a1, _OWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = sub_100004FC8(&qword_10015C5A0);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = URL.scheme.getter(v4);
  v9 = sub_1000C61A8(v7, v8);
  if (v9 == 7)
    return static OpenURLAction.Result.systemAction.getter();
  v11 = v9;
  v12 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v6, 1, 1, v12);
  type metadata accessor for MainActor(0);
  v13 = sub_10008BA58((uint64_t)a2);
  v14 = static MainActor.shared.getter(v13);
  v15 = swift_allocObject(&unk_10014B2F8, 145, 7);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = &protocol witness table for MainActor;
  v16 = a2[5];
  *(_OWORD *)(v15 + 96) = a2[4];
  *(_OWORD *)(v15 + 112) = v16;
  *(_OWORD *)(v15 + 128) = a2[6];
  v17 = a2[1];
  *(_OWORD *)(v15 + 32) = *a2;
  *(_OWORD *)(v15 + 48) = v17;
  v18 = a2[3];
  *(_OWORD *)(v15 + 64) = a2[2];
  *(_OWORD *)(v15 + 80) = v18;
  *(_BYTE *)(v15 + 144) = v11;
  v19 = sub_1000F1E18((uint64_t)v6, (uint64_t)&unk_10015A2D0, v15);
  v20 = swift_release(v19);
  return static OpenURLAction.Result.handled.getter(v20);
}

uint64_t sub_10008B5BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)(v5 + 32) = a5;
  *(_QWORD *)(v5 + 16) = a4;
  v6 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v5 + 24) = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  return swift_task_switch(sub_10008B62C, v7, v8);
}

uint64_t sub_10008B62C()
{
  uint64_t v0;
  uint64_t *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;

  v1 = *(uint64_t **)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 32);
  swift_release(*(_QWORD *)(v0 + 24));
  v3 = *v1;
  LOBYTE(v1) = *((_BYTE *)v1 + 8);
  v4 = swift_retain(v3);
  v5 = sub_100063680(v4, (char)v1);
  swift_release(v3);
  v6 = *(_QWORD *)(v5 + 32);
  swift_retain(v6);
  swift_release(v5);
  v7 = sub_1000DB598();
  swift_release(v6);
  sub_1000F2DEC(v2);
  swift_release(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008B6C4()
{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD v13[4];
  _BYTE v14[32];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD v23[5];
  uint64_t v24[4];

  v1 = sub_100004FC8(&qword_10015A280);
  __chkstk_darwin(v1);
  v3 = (char *)v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = v0[6];
  v20 = v0[5];
  v21 = v4;
  v5 = v0[4];
  v18 = v0[3];
  v19 = v5;
  v6 = v0[2];
  v16 = v0[1];
  v17 = v6;
  v15 = *v0;
  v13[2] = &v15;
  v22 = v16;
  v23[0] = v6;
  v23[3] = v20;
  v23[4] = v4;
  v23[1] = v18;
  v23[2] = v5;
  sub_10007E96C((uint64_t)v23 + 8, (uint64_t)v24, &qword_100159078);
  sub_10007E96C((uint64_t)v24, (uint64_t)v14, &qword_100159078);
  sub_10008B828(v24);
  sub_10008B144(&v15, (uint64_t)v3);
  v7 = sub_100004FC8(&qword_100159078);
  v8 = sub_100004FC8(&qword_10015A288);
  v9 = sub_100063DC8();
  v10 = sub_10008B858();
  v11 = sub_10008B8D4();
  return Section<>.init(header:footer:content:)(v14, v3, sub_10008B820, v13, v7, v8, v1, v9, v10, v11);
}

uint64_t sub_10008B820()
{
  uint64_t v0;

  return sub_10008AFD0(*(_QWORD *)(v0 + 16));
}

uint64_t *sub_10008B828(uint64_t *a1)
{
  sub_10000BAA4(*a1, a1[1], a1[2], a1[3]);
  return a1;
}

unint64_t sub_10008B858()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015A290;
  if (!qword_10015A290)
  {
    v1 = sub_100005430(&qword_10015A288);
    sub_100007828(&qword_10015A298, type metadata accessor for PrimarySettingsListItem, (uint64_t)&unk_100117640);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_10015A290);
  }
  return result;
}

unint64_t sub_10008B8D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015A2A0;
  if (!qword_10015A2A0)
  {
    v1 = sub_100005430(&qword_10015A280);
    sub_10008B938();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_10015A2A0);
  }
  return result;
}

unint64_t sub_10008B938()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015A2A8;
  if (!qword_10015A2A8)
  {
    v1 = sub_100005430(&qword_10015A2B0);
    sub_100007868(&qword_10015A2B8, &qword_10015A2C0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015A2A8);
  }
  return result;
}

uint64_t sub_10008B9BC()
{
  return EnvironmentValues.openURL.getter();
}

uint64_t sub_10008B9E0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  sub_10000BAE4(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
  if (*(_QWORD *)(v0 + 80))
  {
    sub_100007618(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_BYTE *)(v0 + 72));
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));
  }
  if (*(_QWORD *)(v0 + 112))
  {
    sub_100007618(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_BYTE *)(v0 + 104));
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 112));
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
  return swift_deallocObject(v0, 128, 7);
}

uint64_t sub_10008BA50(uint64_t a1)
{
  uint64_t v1;

  return sub_10008B474(a1, (_OWORD *)(v1 + 16));
}

uint64_t sub_10008BA58(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 80);
  v9 = *(_QWORD *)(a1 + 88);
  v12 = *(_QWORD *)(a1 + 96);
  v13 = *(_QWORD *)(a1 + 72);
  v14 = *(_QWORD *)(a1 + 104);
  v10 = *(_BYTE *)(a1 + 32);
  swift_retain(*(_QWORD *)a1);
  sub_10000BA8C(v2, v3, v10);
  sub_10000BAA4(v4, v5, v6, v7);
  sub_10000BAA4(v13, v8, v9, v12);
  swift_bridgeObjectRetain(v14);
  return a1;
}

uint64_t sub_10008BB08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004FC8(&qword_10015A2C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10008BB50(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004FC8(&qword_10015A2C0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10008BB90(uint64_t a1)
{
  sub_100007618(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return a1;
}

_QWORD *sub_10008BBC0(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return a1;
}

uint64_t sub_10008BBE8()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  sub_10000BAE4(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_BYTE *)(v0 + 64));
  if (*(_QWORD *)(v0 + 96))
  {
    sub_100007618(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_BYTE *)(v0 + 88));
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 96));
  }
  if (*(_QWORD *)(v0 + 128))
  {
    sub_100007618(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_BYTE *)(v0 + 120));
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128));
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 136));
  return swift_deallocObject(v0, 145, 7);
}

uint64_t sub_10008BC60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _QWORD *v8;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = v1 + 32;
  v7 = *(_BYTE *)(v1 + 144);
  v8 = (_QWORD *)swift_task_alloc(dword_10015A2CC);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_1000526BC;
  return sub_10008B5BC(a1, v4, v5, v6, v7);
}

uint64_t sub_10008BCDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PrimarySettingsListItemModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_10008BD24()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015A2E8;
  if (!qword_10015A2E8)
  {
    v1 = sub_100005430(&qword_10015A2F0);
    sub_100063DC8();
    sub_10008B858();
    sub_10008B8D4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> Section<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_10015A2E8);
  }
  return result;
}

uint64_t sub_10008BDA4(uint64_t a1)
{
  return sub_10008BFF8(a1, qword_10015D268, 0x746C7561666544, 0xE700000000000000);
}

uint64_t sub_10008BDC4(uint64_t a1)
{
  return sub_10008BFF8(a1, qword_10015D280, 0xD000000000000015, 0x8000000100123860);
}

uint64_t sub_10008BDE8(uint64_t a1)
{
  return sub_10008BFF8(a1, qword_10015D298, 0x697461676976614ELL, 0xEA00000000006E6FLL);
}

uint64_t sub_10008BE0C(uint64_t a1)
{
  return sub_10008BFF8(a1, qword_10015D2B0, 0x686372616553, 0xE600000000000000);
}

uint64_t sub_10008BE28(uint64_t a1)
{
  return sub_10008BFF8(a1, qword_10015D2C8, 0x646E6148204C5255, 0xEC000000676E696CLL);
}

uint64_t sub_10008BE50(uint64_t a1)
{
  return sub_10008BFF8(a1, qword_10015D2E0, 0x736956206D657449, 0xEF7974696C696269);
}

uint64_t sub_10008BE7C(uint64_t a1)
{
  return sub_10008BFF8(a1, qword_10015D2F8, 0xD000000000000017, 0x8000000100123840);
}

uint64_t sub_10008BEA0(uint64_t a1)
{
  return sub_10008BFF8(a1, qword_10015D310, 0xD000000000000014, 0x8000000100123820);
}

uint64_t sub_10008BEC4(uint64_t a1)
{
  return sub_10008BFF8(a1, qword_10015D328, 0x7473655420545050, 0xEB00000000676E69);
}

uint64_t sub_10008BEEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v0 = type metadata accessor for Logger(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin();
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OSSignposter(0);
  sub_10001AED4(v4, qword_10015D340);
  sub_100007808(v4, (uint64_t)qword_10015D340);
  if (qword_100156CD0 != -1)
    swift_once(&qword_100156CD0, sub_10008BEC4);
  v5 = sub_100007808(v0, (uint64_t)qword_10015D328);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5, v0);
  return OSSignposter.init(logger:)(v3);
}

uint64_t sub_10008BFD4(uint64_t a1)
{
  return sub_10008BFF8(a1, qword_10015D358, 0x746F6F7465756C42, 0xE900000000000068);
}

uint64_t sub_10008BFF8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;

  v7 = type metadata accessor for Logger(0);
  sub_10001AED4(v7, a2);
  sub_100007808(v7, (uint64_t)a2);
  v8 = qword_10015A2F8;
  v9 = off_10015A300;
  swift_bridgeObjectRetain(off_10015A300);
  return Logger.init(subsystem:category:)(v8, v9, a3, a4);
}

uint64_t sub_10008C080(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;

  sub_1000A103C(a1, a2);
  if ((v6 & 1) != 0 && (sub_10008C4E4(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20)) & 1) != 0)
    return static FLFollowUpInformation.== infix(_:_:)(a1 + *(int *)(a3 + 24), a2 + *(int *)(a3 + 24));
  else
    return 0;
}

uint64_t sub_10008C0E8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  char v8;
  _OWORD v9[5];
  char v10;

  v2 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v2;
  v7[4] = *(_OWORD *)(a1 + 64);
  v8 = *(_BYTE *)(a1 + 80);
  v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v4;
  v9[4] = *(_OWORD *)(a2 + 64);
  v10 = *(_BYTE *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return sub_10008C154((uint64_t)v7, (uint64_t)v9) & 1;
}

uint64_t sub_10008C154(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;

  if ((static Text.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(unsigned __int8 *)(a2 + 16), *(_QWORD *)(a2 + 24)) & 1) != 0&& (static Text.== infix(_:_:)(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), *(unsigned __int8 *)(a2 + 48), *(_QWORD *)(a2 + 56)) & 1) != 0)
  {
    v4 = *(unsigned __int8 *)(a1 + 80);
    v5 = *(unsigned __int8 *)(a2 + 80);
    if ((_DWORD)v4 == 255)
    {
      if (v5 == 255)
        return 1;
    }
    else if (v5 != 255)
    {
      __asm { BR              X11 }
    }
  }
  return 0;
}

void sub_10008C21C(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  if (!a1)
  {
    sub_100011774(v4, v2, 0);
    sub_100011774(v3, v1, 0);
    v5 = static Image.== infix(_:_:)(v3, v4);
    sub_100036838(v4, v2, 0);
    sub_100036838(v3, v1, 0);
    if ((v5 & 1) != 0)
      JUMPOUT(0x10008C1D0);
  }
  JUMPOUT(0x10008C1E0);
}

uint64_t sub_10008C2D0(uint64_t a1, uint64_t a2)
{
  char v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  BOOL v11;
  char v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;

  sub_1000A103C(a1, a2);
  if ((v4 & 1) == 0)
    return 0;
  v5 = (int *)type metadata accessor for PrimarySettingsListFollowUpActionModel(0);
  if ((static FLFollowUpGroupIdentity.== infix(_:_:)(a1 + v5[5], a2 + v5[5]) & 1) == 0
    || *(unsigned __int8 *)(a1 + v5[6]) != *(unsigned __int8 *)(a2 + v5[6]))
  {
    return 0;
  }
  v6 = v5[7];
  v7 = *(_QWORD *)(a1 + v6);
  v8 = *(_QWORD *)(a1 + v6 + 8);
  v9 = (_QWORD *)(a2 + v6);
  v10 = v9[1];
  v11 = v7 == *v9 && v8 == v10;
  if (v11 || (v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, *v9, v10, 0), result = 0, (v12 & 1) != 0))
  {
    v14 = v5[8];
    v15 = *(_QWORD *)(a1 + v14);
    v16 = *(_QWORD *)(a1 + v14 + 8);
    v17 = (_QWORD *)(a2 + v14);
    v18 = v17[1];
    v19 = v15 == *v17 && v16 == v18;
    if (v19
      || (v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, *v17, v18, 0), result = 0, (v20 & 1) != 0))
    {
      v21 = v5[9];
      if ((static Text.== infix(_:_:)(*(_QWORD *)(a1 + v21), *(_QWORD *)(a1 + v21 + 8), *(unsigned __int8 *)(a1 + v21 + 16), *(_QWORD *)(a1 + v21 + 24), *(_QWORD *)(a2 + v21), *(_QWORD *)(a2 + v21 + 8), *(unsigned __int8 *)(a2 + v21 + 16), *(_QWORD *)(a2 + v21 + 24)) & 1) != 0)
      {
        v22 = v5[10];
        v23 = *(unsigned __int8 *)(a1 + v22 + 16);
        v24 = *(unsigned __int8 *)(a2 + v22 + 16);
        if ((_DWORD)v23 == 255)
        {
          if (v24 == 255)
            return 1;
        }
        else if (v24 != 255)
        {
          __asm { BR              X11 }
        }
      }
      return 0;
    }
  }
  return result;
}

void sub_10008C430(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  if (!a1)
  {
    sub_100011774(v4, v2, 0);
    sub_100011774(v3, v1, 0);
    v5 = static Image.== infix(_:_:)(v3, v4);
    sub_100036838(v4, v2, 0);
    sub_100036838(v3, v1, 0);
    if ((v5 & 1) != 0)
      JUMPOUT(0x10008C3E4);
  }
  JUMPOUT(0x10008C3F4);
}

uint64_t sub_10008C4E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD v24[5];
  char v25;
  _OWORD v26[5];
  char v27;

  v4 = type metadata accessor for PrimarySettingsListFollowUpActionModel(0);
  __chkstk_darwin(v4);
  v6 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for PrimarySettingsListFollowUpModel.ViewType(0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)v24 - v11;
  v13 = sub_100004FC8(&qword_10015A308);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (uint64_t)&v16[*(int *)(v14 + 48)];
  sub_10008C770(a1, (uint64_t)v16);
  sub_10008C770(a2, v17);
  if (swift_getEnumCaseMultiPayload(v16, v7) == 1)
  {
    sub_10008C770((uint64_t)v16, (uint64_t)v10);
    if (swift_getEnumCaseMultiPayload(v17, v7) == 1)
    {
      sub_10008C7F4(v17, (uint64_t)v6);
      v18 = sub_10008C2D0((uint64_t)v10, (uint64_t)v6);
      sub_1000076B4((uint64_t)v6, type metadata accessor for PrimarySettingsListFollowUpActionModel);
      sub_1000076B4((uint64_t)v10, type metadata accessor for PrimarySettingsListFollowUpActionModel);
LABEL_9:
      sub_1000076B4((uint64_t)v16, type metadata accessor for PrimarySettingsListFollowUpModel.ViewType);
      return v18 & 1;
    }
    sub_1000076B4((uint64_t)v10, type metadata accessor for PrimarySettingsListFollowUpActionModel);
  }
  else
  {
    sub_10008C770((uint64_t)v16, (uint64_t)v12);
    v19 = *((_OWORD *)v12 + 3);
    v24[2] = *((_OWORD *)v12 + 2);
    v24[3] = v19;
    v24[4] = *((_OWORD *)v12 + 4);
    v25 = v12[80];
    v20 = *((_OWORD *)v12 + 1);
    v24[0] = *(_OWORD *)v12;
    v24[1] = v20;
    if (swift_getEnumCaseMultiPayload(v17, v7) != 1)
    {
      v21 = *(_OWORD *)(v17 + 48);
      v26[2] = *(_OWORD *)(v17 + 32);
      v26[3] = v21;
      v26[4] = *(_OWORD *)(v17 + 64);
      v27 = *(_BYTE *)(v17 + 80);
      v22 = *(_OWORD *)(v17 + 16);
      v26[0] = *(_OWORD *)v17;
      v26[1] = v22;
      v18 = sub_10008C154((uint64_t)v24, (uint64_t)v26);
      sub_10008C838((uint64_t)v26);
      sub_10008C838((uint64_t)v24);
      goto LABEL_9;
    }
    sub_10008C838((uint64_t)v24);
  }
  sub_10008C7B4((uint64_t)v16);
  v18 = 0;
  return v18 & 1;
}

uint64_t type metadata accessor for PrimarySettingsListFollowUpActionModel(uint64_t a1)
{
  return sub_10000D3C4(a1, qword_10015A4A8, (uint64_t)&nominal type descriptor for PrimarySettingsListFollowUpActionModel);
}

uint64_t type metadata accessor for PrimarySettingsListFollowUpModel.ViewType(uint64_t a1)
{
  return sub_10000D3C4(a1, qword_10015A418, (uint64_t)&nominal type descriptor for PrimarySettingsListFollowUpModel.ViewType);
}

uint64_t sub_10008C770(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PrimarySettingsListFollowUpModel.ViewType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10008C7B4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004FC8(&qword_10015A308);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10008C7F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PrimarySettingsListFollowUpActionModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10008C838(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_BYTE *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 72);
  v9 = *(_BYTE *)(a1 + 80);
  sub_100007618(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRelease(v2);
  sub_100007618(v3, v4, v5);
  swift_bridgeObjectRelease(v6);
  sub_100036838(v7, v8, v9);
  return a1;
}

_QWORD *sub_10008C8D0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  id v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  __int128 v72;
  int *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  _OWORD *v104;
  _OWORD *v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;

  v3 = a2;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v6 = a3;
    v7 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(v3, v7))
    {
      case 0u:
        v8 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, v3, v8);
        v9 = a1;
        v10 = v7;
        v11 = 0;
        goto LABEL_14;
      case 1u:
        v13 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, v3, v13);
        v9 = a1;
        v10 = v7;
        v11 = 1;
        goto LABEL_14;
      case 2u:
        v14 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, v3, v14);
        v15 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v16 = (_QWORD *)((char *)a1 + v15);
        v17 = (_QWORD *)((char *)v3 + v15);
        v18 = v17[1];
        *v16 = *v17;
        v16[1] = v18;
        swift_bridgeObjectRetain(v18);
        v9 = a1;
        v10 = v7;
        v11 = 2;
        goto LABEL_14;
      case 3u:
        v19 = v3[1];
        *a1 = *v3;
        a1[1] = v19;
        v20 = v3[3];
        a1[2] = v3[2];
        a1[3] = v20;
        v21 = v3[5];
        a1[4] = v3[4];
        a1[5] = v21;
        v22 = v3[7];
        a1[6] = v3[6];
        a1[7] = v22;
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v22);
        v9 = a1;
        v10 = v7;
        v11 = 3;
        goto LABEL_14;
      case 4u:
        v23 = v3[1];
        *a1 = *v3;
        a1[1] = v23;
        v24 = v3[3];
        a1[2] = v3[2];
        a1[3] = v24;
        v25 = v3[5];
        a1[4] = v3[4];
        a1[5] = v25;
        a1[6] = v3[6];
        swift_bridgeObjectRetain(v23);
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v25);
        v9 = a1;
        v10 = v7;
        v11 = 4;
        goto LABEL_14;
      case 5u:
        v26 = v3[1];
        *a1 = *v3;
        a1[1] = v26;
        v27 = v3[3];
        a1[2] = v3[2];
        a1[3] = v27;
        v29 = (void *)v3[4];
        v28 = v3[5];
        a1[4] = v29;
        a1[5] = v28;
        v30 = v3[9];
        swift_bridgeObjectRetain(v26);
        swift_bridgeObjectRetain(v27);
        v31 = v29;
        swift_bridgeObjectRetain(v28);
        if (v30)
        {
          a1[9] = v30;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v30 - 8))((uint64_t)(a1 + 6), (uint64_t)(v3 + 6), v30);
        }
        else
        {
          v32 = *((_OWORD *)v3 + 4);
          *((_OWORD *)a1 + 3) = *((_OWORD *)v3 + 3);
          *((_OWORD *)a1 + 4) = v32;
        }
        v9 = a1;
        v10 = v7;
        v11 = 5;
LABEL_14:
        swift_storeEnumTagMultiPayload(v9, v10, v11);
        break;
      default:
        memcpy(a1, v3, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
        break;
    }
    v33 = *(int *)(v6 + 20);
    v34 = (char *)a1 + v33;
    v35 = (char *)v3 + v33;
    v36 = type metadata accessor for PrimarySettingsListFollowUpModel.ViewType(0);
    if (swift_getEnumCaseMultiPayload(v35, v36) == 1)
    {
      v107 = v6;
      v108 = v3;
      v106 = v36;
      switch(swift_getEnumCaseMultiPayload(v35, v7))
      {
        case 0u:
          v37 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v34, v35, v37);
          v38 = v34;
          v39 = v7;
          v40 = 0;
          goto LABEL_30;
        case 1u:
          v53 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 16))(v34, v35, v53);
          v38 = v34;
          v39 = v7;
          v40 = 1;
          goto LABEL_30;
        case 2u:
          v54 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(v34, v35, v54);
          v55 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
          v56 = &v34[v55];
          v57 = &v35[v55];
          v58 = *((_QWORD *)v57 + 1);
          *(_QWORD *)v56 = *(_QWORD *)v57;
          *((_QWORD *)v56 + 1) = v58;
          swift_bridgeObjectRetain(v58);
          v38 = v34;
          v39 = v7;
          v40 = 2;
          goto LABEL_30;
        case 3u:
          v59 = *((_QWORD *)v35 + 1);
          *(_QWORD *)v34 = *(_QWORD *)v35;
          *((_QWORD *)v34 + 1) = v59;
          v60 = *((_QWORD *)v35 + 3);
          *((_QWORD *)v34 + 2) = *((_QWORD *)v35 + 2);
          *((_QWORD *)v34 + 3) = v60;
          v61 = *((_QWORD *)v35 + 5);
          *((_QWORD *)v34 + 4) = *((_QWORD *)v35 + 4);
          *((_QWORD *)v34 + 5) = v61;
          v62 = *((_QWORD *)v35 + 7);
          *((_QWORD *)v34 + 6) = *((_QWORD *)v35 + 6);
          *((_QWORD *)v34 + 7) = v62;
          swift_bridgeObjectRetain(v59);
          swift_bridgeObjectRetain(v60);
          swift_bridgeObjectRetain(v61);
          swift_bridgeObjectRetain(v62);
          v38 = v34;
          v39 = v7;
          v40 = 3;
          goto LABEL_30;
        case 4u:
          v63 = *((_QWORD *)v35 + 1);
          *(_QWORD *)v34 = *(_QWORD *)v35;
          *((_QWORD *)v34 + 1) = v63;
          v64 = *((_QWORD *)v35 + 3);
          *((_QWORD *)v34 + 2) = *((_QWORD *)v35 + 2);
          *((_QWORD *)v34 + 3) = v64;
          v65 = *((_QWORD *)v35 + 5);
          *((_QWORD *)v34 + 4) = *((_QWORD *)v35 + 4);
          *((_QWORD *)v34 + 5) = v65;
          *((_QWORD *)v34 + 6) = *((_QWORD *)v35 + 6);
          swift_bridgeObjectRetain(v63);
          swift_bridgeObjectRetain(v64);
          swift_bridgeObjectRetain(v65);
          v38 = v34;
          v39 = v7;
          v40 = 4;
          goto LABEL_30;
        case 5u:
          v66 = *((_QWORD *)v35 + 1);
          *(_QWORD *)v34 = *(_QWORD *)v35;
          *((_QWORD *)v34 + 1) = v66;
          v67 = *((_QWORD *)v35 + 3);
          *((_QWORD *)v34 + 2) = *((_QWORD *)v35 + 2);
          *((_QWORD *)v34 + 3) = v67;
          v68 = (void *)*((_QWORD *)v35 + 4);
          v69 = *((_QWORD *)v35 + 5);
          *((_QWORD *)v34 + 4) = v68;
          *((_QWORD *)v34 + 5) = v69;
          v104 = v35 + 48;
          v105 = v34 + 48;
          v70 = *((_QWORD *)v35 + 9);
          swift_bridgeObjectRetain(v66);
          swift_bridgeObjectRetain(v67);
          v71 = v68;
          swift_bridgeObjectRetain(v69);
          if (v70)
          {
            *((_QWORD *)v34 + 9) = v70;
            (**(void (***)(_OWORD *, _OWORD *, uint64_t))(v70 - 8))(v105, v104, v70);
          }
          else
          {
            v72 = *((_OWORD *)v35 + 4);
            *v105 = *v104;
            *((_OWORD *)v34 + 4) = v72;
          }
          v38 = v34;
          v39 = v7;
          v40 = 5;
LABEL_30:
          swift_storeEnumTagMultiPayload(v38, v39, v40);
          break;
        default:
          memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
          break;
      }
      v73 = (int *)type metadata accessor for PrimarySettingsListFollowUpActionModel(0);
      v74 = v73[5];
      v75 = &v34[v74];
      v76 = &v35[v74];
      v77 = type metadata accessor for FLFollowUpGroupIdentity(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v77 - 8) + 16))(v75, v76, v77);
      v34[v73[6]] = v35[v73[6]];
      v78 = v73[7];
      v79 = &v34[v78];
      v80 = &v35[v78];
      v81 = *((_QWORD *)v80 + 1);
      *(_QWORD *)v79 = *(_QWORD *)v80;
      *((_QWORD *)v79 + 1) = v81;
      v82 = v73[8];
      v83 = &v34[v82];
      v84 = &v35[v82];
      v85 = *((_QWORD *)v84 + 1);
      *(_QWORD *)v83 = *(_QWORD *)v84;
      *((_QWORD *)v83 + 1) = v85;
      v86 = v73[9];
      v87 = &v34[v86];
      v88 = &v35[v86];
      v89 = *(_QWORD *)&v35[v86];
      v90 = *(_QWORD *)&v35[v86 + 8];
      v91 = v35[v86 + 16];
      swift_bridgeObjectRetain(v81);
      swift_bridgeObjectRetain(v85);
      sub_10000BAD4(v89, v90, v91);
      *(_QWORD *)v87 = v89;
      *((_QWORD *)v87 + 1) = v90;
      v87[16] = v91;
      v92 = *((_QWORD *)v88 + 3);
      *((_QWORD *)v87 + 3) = v92;
      v93 = v73[10];
      v94 = &v34[v93];
      v95 = &v35[v93];
      v96 = v95[16];
      swift_bridgeObjectRetain(v92);
      if (v96 == 255)
      {
        *(_OWORD *)v94 = *(_OWORD *)v95;
        v94[16] = v95[16];
        v52 = 1;
      }
      else
      {
        v97 = *(_QWORD *)v95;
        v98 = *((_QWORD *)v95 + 1);
        sub_10000BB2C(v97, v98, v96);
        *(_QWORD *)v94 = v97;
        *((_QWORD *)v94 + 1) = v98;
        v52 = 1;
        v94[16] = v96;
      }
      v6 = v107;
      v3 = v108;
      v36 = v106;
    }
    else
    {
      v41 = *(_QWORD *)v35;
      v42 = *((_QWORD *)v35 + 1);
      v43 = v35[16];
      sub_10000BAD4(*(_QWORD *)v35, v42, v43);
      *(_QWORD *)v34 = v41;
      *((_QWORD *)v34 + 1) = v42;
      v34[16] = v43;
      v44 = *((_QWORD *)v35 + 3);
      v45 = *((_QWORD *)v35 + 4);
      *((_QWORD *)v34 + 3) = v44;
      v46 = *((_QWORD *)v35 + 5);
      v47 = v35[48];
      swift_bridgeObjectRetain(v44);
      sub_10000BAD4(v45, v46, v47);
      *((_QWORD *)v34 + 4) = v45;
      *((_QWORD *)v34 + 5) = v46;
      v34[48] = v47;
      v48 = *((_QWORD *)v35 + 7);
      *((_QWORD *)v34 + 7) = v48;
      v49 = v35[80];
      swift_bridgeObjectRetain(v48);
      if (v49 == 255)
      {
        v52 = 0;
        *((_OWORD *)v34 + 4) = *((_OWORD *)v35 + 4);
        v34[80] = v35[80];
      }
      else
      {
        v51 = *((_QWORD *)v35 + 8);
        v50 = *((_QWORD *)v35 + 9);
        sub_10000BB2C(v51, v50, v49);
        v52 = 0;
        *((_QWORD *)v34 + 8) = v51;
        *((_QWORD *)v34 + 9) = v50;
        v34[80] = v49;
      }
    }
    swift_storeEnumTagMultiPayload(v34, v36, v52);
    v99 = *(int *)(v6 + 24);
    v100 = (char *)a1 + v99;
    v101 = (char *)v3 + v99;
    v102 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v102 - 8) + 16))(v100, v101, v102);
  }
  return a1;
}

uint64_t sub_10008CF84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(a1, v4))
  {
    case 0u:
    case 1u:
      v5 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
      break;
    case 2u:
      v6 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
      v7 = sub_100004FC8(&qword_10015C420);
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v7 + 48) + 8));
      break;
    case 3u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
      break;
    case 4u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      break;
    case 5u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));

      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      if (*(_QWORD *)(a1 + 72))
        sub_100005474((_QWORD *)(a1 + 48));
      break;
    default:
      break;
  }
  v8 = a1 + *(int *)(a2 + 20);
  v9 = type metadata accessor for PrimarySettingsListFollowUpModel.ViewType(0);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    switch(swift_getEnumCaseMultiPayload(v8, v4))
    {
      case 0u:
      case 1u:
        v10 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
        break;
      case 2u:
        v14 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v8, v14);
        v15 = sub_100004FC8(&qword_10015C420);
        swift_bridgeObjectRelease(*(_QWORD *)(v8 + *(int *)(v15 + 48) + 8));
        break;
      case 3u:
        swift_bridgeObjectRelease(*(_QWORD *)(v8 + 8));
        swift_bridgeObjectRelease(*(_QWORD *)(v8 + 24));
        swift_bridgeObjectRelease(*(_QWORD *)(v8 + 40));
        swift_bridgeObjectRelease(*(_QWORD *)(v8 + 56));
        break;
      case 4u:
        swift_bridgeObjectRelease(*(_QWORD *)(v8 + 8));
        swift_bridgeObjectRelease(*(_QWORD *)(v8 + 24));
        swift_bridgeObjectRelease(*(_QWORD *)(v8 + 40));
        break;
      case 5u:
        swift_bridgeObjectRelease(*(_QWORD *)(v8 + 8));
        swift_bridgeObjectRelease(*(_QWORD *)(v8 + 24));

        swift_bridgeObjectRelease(*(_QWORD *)(v8 + 40));
        if (*(_QWORD *)(v8 + 72))
          sub_100005474((_QWORD *)(v8 + 48));
        break;
      default:
        break;
    }
    v16 = (int *)type metadata accessor for PrimarySettingsListFollowUpActionModel(0);
    v17 = v8 + v16[5];
    v18 = type metadata accessor for FLFollowUpGroupIdentity(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
    swift_bridgeObjectRelease(*(_QWORD *)(v8 + v16[7] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v8 + v16[8] + 8));
    v19 = v8 + v16[9];
    sub_100007618(*(_QWORD *)v19, *(_QWORD *)(v19 + 8), *(_BYTE *)(v19 + 16));
    swift_bridgeObjectRelease(*(_QWORD *)(v19 + 24));
    v20 = v8 + v16[10];
    v11 = *(unsigned __int8 *)(v20 + 16);
    if (v11 != 255)
    {
      v12 = *(_QWORD *)v20;
      v13 = *(_QWORD *)(v20 + 8);
      goto LABEL_20;
    }
  }
  else
  {
    sub_100007618(*(_QWORD *)v8, *(_QWORD *)(v8 + 8), *(_BYTE *)(v8 + 16));
    swift_bridgeObjectRelease(*(_QWORD *)(v8 + 24));
    sub_100007618(*(_QWORD *)(v8 + 32), *(_QWORD *)(v8 + 40), *(_BYTE *)(v8 + 48));
    swift_bridgeObjectRelease(*(_QWORD *)(v8 + 56));
    v11 = *(unsigned __int8 *)(v8 + 80);
    if (v11 != 255)
    {
      v12 = *(_QWORD *)(v8 + 64);
      v13 = *(_QWORD *)(v8 + 72);
LABEL_20:
      sub_10000BB54(v12, v13, v11);
    }
  }
  v21 = a1 + *(int *)(a2 + 24);
  v22 = type metadata accessor for FLFollowUpInformation(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
}

_QWORD *sub_10008D2C0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  __int128 v70;
  int *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  _OWORD *v102;
  _OWORD *v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;

  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(a2, v6))
  {
    case 0u:
      v7 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 0;
      goto LABEL_12;
    case 1u:
      v11 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      v8 = a1;
      v9 = v6;
      v10 = 1;
      goto LABEL_12;
    case 2u:
      v12 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
      v13 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
      v14 = (_QWORD *)((char *)a1 + v13);
      v15 = (_QWORD *)((char *)a2 + v13);
      v16 = v15[1];
      *v14 = *v15;
      v14[1] = v16;
      swift_bridgeObjectRetain(v16);
      v8 = a1;
      v9 = v6;
      v10 = 2;
      goto LABEL_12;
    case 3u:
      v17 = a2[1];
      *a1 = *a2;
      a1[1] = v17;
      v18 = a2[3];
      a1[2] = a2[2];
      a1[3] = v18;
      v19 = a2[5];
      a1[4] = a2[4];
      a1[5] = v19;
      v20 = a2[7];
      a1[6] = a2[6];
      a1[7] = v20;
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v20);
      v8 = a1;
      v9 = v6;
      v10 = 3;
      goto LABEL_12;
    case 4u:
      v21 = a2[1];
      *a1 = *a2;
      a1[1] = v21;
      v22 = a2[3];
      a1[2] = a2[2];
      a1[3] = v22;
      v23 = a2[5];
      a1[4] = a2[4];
      a1[5] = v23;
      a1[6] = a2[6];
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v23);
      v8 = a1;
      v9 = v6;
      v10 = 4;
      goto LABEL_12;
    case 5u:
      v24 = a2[1];
      *a1 = *a2;
      a1[1] = v24;
      v25 = a2[3];
      a1[2] = a2[2];
      a1[3] = v25;
      v26 = (void *)a2[4];
      v27 = a2[5];
      a1[4] = v26;
      a1[5] = v27;
      v28 = a2[9];
      swift_bridgeObjectRetain(v24);
      swift_bridgeObjectRetain(v25);
      v29 = v26;
      swift_bridgeObjectRetain(v27);
      if (v28)
      {
        a1[9] = v28;
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v28 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v28);
      }
      else
      {
        v30 = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 4) = v30;
      }
      v8 = a1;
      v9 = v6;
      v10 = 5;
LABEL_12:
      swift_storeEnumTagMultiPayload(v8, v9, v10);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      break;
  }
  v31 = *(int *)(a3 + 20);
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = type metadata accessor for PrimarySettingsListFollowUpModel.ViewType(0);
  if (swift_getEnumCaseMultiPayload(v33, v34) == 1)
  {
    v105 = a3;
    v106 = a2;
    v104 = v34;
    switch(swift_getEnumCaseMultiPayload(v33, v6))
    {
      case 0u:
        v35 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v32, v33, v35);
        v36 = v32;
        v37 = v6;
        v38 = 0;
        goto LABEL_28;
      case 1u:
        v51 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v32, v33, v51);
        v36 = v32;
        v37 = v6;
        v38 = 1;
        goto LABEL_28;
      case 2u:
        v52 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 16))(v32, v33, v52);
        v53 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v54 = &v32[v53];
        v55 = &v33[v53];
        v56 = *((_QWORD *)v55 + 1);
        *(_QWORD *)v54 = *(_QWORD *)v55;
        *((_QWORD *)v54 + 1) = v56;
        swift_bridgeObjectRetain(v56);
        v36 = v32;
        v37 = v6;
        v38 = 2;
        goto LABEL_28;
      case 3u:
        v57 = *((_QWORD *)v33 + 1);
        *(_QWORD *)v32 = *(_QWORD *)v33;
        *((_QWORD *)v32 + 1) = v57;
        v58 = *((_QWORD *)v33 + 3);
        *((_QWORD *)v32 + 2) = *((_QWORD *)v33 + 2);
        *((_QWORD *)v32 + 3) = v58;
        v59 = *((_QWORD *)v33 + 5);
        *((_QWORD *)v32 + 4) = *((_QWORD *)v33 + 4);
        *((_QWORD *)v32 + 5) = v59;
        v60 = *((_QWORD *)v33 + 7);
        *((_QWORD *)v32 + 6) = *((_QWORD *)v33 + 6);
        *((_QWORD *)v32 + 7) = v60;
        swift_bridgeObjectRetain(v57);
        swift_bridgeObjectRetain(v58);
        swift_bridgeObjectRetain(v59);
        swift_bridgeObjectRetain(v60);
        v36 = v32;
        v37 = v6;
        v38 = 3;
        goto LABEL_28;
      case 4u:
        v61 = *((_QWORD *)v33 + 1);
        *(_QWORD *)v32 = *(_QWORD *)v33;
        *((_QWORD *)v32 + 1) = v61;
        v62 = *((_QWORD *)v33 + 3);
        *((_QWORD *)v32 + 2) = *((_QWORD *)v33 + 2);
        *((_QWORD *)v32 + 3) = v62;
        v63 = *((_QWORD *)v33 + 5);
        *((_QWORD *)v32 + 4) = *((_QWORD *)v33 + 4);
        *((_QWORD *)v32 + 5) = v63;
        *((_QWORD *)v32 + 6) = *((_QWORD *)v33 + 6);
        swift_bridgeObjectRetain(v61);
        swift_bridgeObjectRetain(v62);
        swift_bridgeObjectRetain(v63);
        v36 = v32;
        v37 = v6;
        v38 = 4;
        goto LABEL_28;
      case 5u:
        v64 = *((_QWORD *)v33 + 1);
        *(_QWORD *)v32 = *(_QWORD *)v33;
        *((_QWORD *)v32 + 1) = v64;
        v65 = *((_QWORD *)v33 + 3);
        *((_QWORD *)v32 + 2) = *((_QWORD *)v33 + 2);
        *((_QWORD *)v32 + 3) = v65;
        v66 = (void *)*((_QWORD *)v33 + 4);
        v67 = *((_QWORD *)v33 + 5);
        *((_QWORD *)v32 + 4) = v66;
        *((_QWORD *)v32 + 5) = v67;
        v102 = v33 + 48;
        v103 = v32 + 48;
        v68 = *((_QWORD *)v33 + 9);
        swift_bridgeObjectRetain(v64);
        swift_bridgeObjectRetain(v65);
        v69 = v66;
        swift_bridgeObjectRetain(v67);
        if (v68)
        {
          *((_QWORD *)v32 + 9) = v68;
          (**(void (***)(_OWORD *, _OWORD *, uint64_t))(v68 - 8))(v103, v102, v68);
        }
        else
        {
          v70 = *((_OWORD *)v33 + 4);
          *v103 = *v102;
          *((_OWORD *)v32 + 4) = v70;
        }
        v36 = v32;
        v37 = v6;
        v38 = 5;
LABEL_28:
        swift_storeEnumTagMultiPayload(v36, v37, v38);
        break;
      default:
        memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
        break;
    }
    v71 = (int *)type metadata accessor for PrimarySettingsListFollowUpActionModel(0);
    v72 = v71[5];
    v73 = &v32[v72];
    v74 = &v33[v72];
    v75 = type metadata accessor for FLFollowUpGroupIdentity(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v75 - 8) + 16))(v73, v74, v75);
    v32[v71[6]] = v33[v71[6]];
    v76 = v71[7];
    v77 = &v32[v76];
    v78 = &v33[v76];
    v79 = *((_QWORD *)v78 + 1);
    *(_QWORD *)v77 = *(_QWORD *)v78;
    *((_QWORD *)v77 + 1) = v79;
    v80 = v71[8];
    v81 = &v32[v80];
    v82 = &v33[v80];
    v83 = *((_QWORD *)v82 + 1);
    *(_QWORD *)v81 = *(_QWORD *)v82;
    *((_QWORD *)v81 + 1) = v83;
    v84 = v71[9];
    v85 = &v32[v84];
    v86 = &v33[v84];
    v87 = *(_QWORD *)&v33[v84];
    v88 = *(_QWORD *)&v33[v84 + 8];
    v89 = v33[v84 + 16];
    swift_bridgeObjectRetain(v79);
    swift_bridgeObjectRetain(v83);
    sub_10000BAD4(v87, v88, v89);
    *(_QWORD *)v85 = v87;
    *((_QWORD *)v85 + 1) = v88;
    v85[16] = v89;
    v90 = *((_QWORD *)v86 + 3);
    *((_QWORD *)v85 + 3) = v90;
    v91 = v71[10];
    v92 = &v32[v91];
    v93 = &v33[v91];
    v94 = v93[16];
    swift_bridgeObjectRetain(v90);
    if (v94 == 255)
    {
      *(_OWORD *)v92 = *(_OWORD *)v93;
      v92[16] = v93[16];
      v50 = 1;
    }
    else
    {
      v95 = *(_QWORD *)v93;
      v96 = *((_QWORD *)v93 + 1);
      sub_10000BB2C(v95, v96, v94);
      *(_QWORD *)v92 = v95;
      *((_QWORD *)v92 + 1) = v96;
      v50 = 1;
      v92[16] = v94;
    }
    a3 = v105;
    a2 = v106;
    v34 = v104;
  }
  else
  {
    v39 = *(_QWORD *)v33;
    v40 = *((_QWORD *)v33 + 1);
    v41 = v33[16];
    sub_10000BAD4(*(_QWORD *)v33, v40, v41);
    *(_QWORD *)v32 = v39;
    *((_QWORD *)v32 + 1) = v40;
    v32[16] = v41;
    v42 = *((_QWORD *)v33 + 3);
    v43 = *((_QWORD *)v33 + 4);
    *((_QWORD *)v32 + 3) = v42;
    v44 = *((_QWORD *)v33 + 5);
    v45 = v33[48];
    swift_bridgeObjectRetain(v42);
    sub_10000BAD4(v43, v44, v45);
    *((_QWORD *)v32 + 4) = v43;
    *((_QWORD *)v32 + 5) = v44;
    v32[48] = v45;
    v46 = *((_QWORD *)v33 + 7);
    *((_QWORD *)v32 + 7) = v46;
    v47 = v33[80];
    swift_bridgeObjectRetain(v46);
    if (v47 == 255)
    {
      v50 = 0;
      *((_OWORD *)v32 + 4) = *((_OWORD *)v33 + 4);
      v32[80] = v33[80];
    }
    else
    {
      v49 = *((_QWORD *)v33 + 8);
      v48 = *((_QWORD *)v33 + 9);
      sub_10000BB2C(v49, v48, v47);
      v50 = 0;
      *((_QWORD *)v32 + 8) = v49;
      *((_QWORD *)v32 + 9) = v48;
      v32[80] = v47;
    }
  }
  swift_storeEnumTagMultiPayload(v32, v34, v50);
  v97 = *(int *)(a3 + 24);
  v98 = (char *)a1 + v97;
  v99 = (char *)a2 + v97;
  v100 = type metadata accessor for FLFollowUpInformation(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v100 - 8) + 16))(v98, v99, v100);
  return a1;
}

_QWORD *sub_10008D948(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  __int128 v71;
  int *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  _OWORD *v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;

  v4 = a2;
  if (a1 != a2)
  {
    sub_1000076B4((uint64_t)a1, type metadata accessor for PrimarySettingsListItemIdentifier);
    v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(v4, v6))
    {
      case 0u:
        v7 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, v4, v7);
        v8 = a1;
        v9 = v6;
        v10 = 0;
        goto LABEL_13;
      case 1u:
        v11 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, v4, v11);
        v8 = a1;
        v9 = v6;
        v10 = 1;
        goto LABEL_13;
      case 2u:
        v12 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, v4, v12);
        v13 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v14 = (_QWORD *)((char *)a1 + v13);
        v15 = (_QWORD *)((char *)v4 + v13);
        *v14 = *v15;
        v16 = v15[1];
        v14[1] = v16;
        swift_bridgeObjectRetain(v16);
        v8 = a1;
        v9 = v6;
        v10 = 2;
        goto LABEL_13;
      case 3u:
        *a1 = *v4;
        v17 = v4[1];
        a1[1] = v17;
        a1[2] = v4[2];
        v18 = v4[3];
        a1[3] = v18;
        a1[4] = v4[4];
        v19 = v4[5];
        a1[5] = v19;
        a1[6] = v4[6];
        v20 = v4[7];
        a1[7] = v20;
        swift_bridgeObjectRetain(v17);
        swift_bridgeObjectRetain(v18);
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        v8 = a1;
        v9 = v6;
        v10 = 3;
        goto LABEL_13;
      case 4u:
        *a1 = *v4;
        v21 = v4[1];
        a1[1] = v21;
        a1[2] = v4[2];
        v22 = v4[3];
        a1[3] = v22;
        a1[4] = v4[4];
        v23 = v4[5];
        a1[5] = v23;
        a1[6] = v4[6];
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v22);
        swift_bridgeObjectRetain(v23);
        v8 = a1;
        v9 = v6;
        v10 = 4;
        goto LABEL_13;
      case 5u:
        *a1 = *v4;
        v24 = v4[1];
        a1[1] = v24;
        a1[2] = v4[2];
        v25 = v4[3];
        a1[3] = v25;
        v26 = (void *)v4[4];
        a1[4] = v26;
        v27 = v4[5];
        a1[5] = v27;
        v28 = v4[9];
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v25);
        v29 = v26;
        swift_bridgeObjectRetain(v27);
        if (v28)
        {
          a1[9] = v28;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v28 - 8))((uint64_t)(a1 + 6), (uint64_t)(v4 + 6), v28);
        }
        else
        {
          v30 = *((_OWORD *)v4 + 4);
          *((_OWORD *)a1 + 3) = *((_OWORD *)v4 + 3);
          *((_OWORD *)a1 + 4) = v30;
        }
        v8 = a1;
        v9 = v6;
        v10 = 5;
LABEL_13:
        swift_storeEnumTagMultiPayload(v8, v9, v10);
        break;
      default:
        memcpy(a1, v4, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
        break;
    }
    v31 = *(int *)(a3 + 20);
    v32 = (char *)a1 + v31;
    v33 = (char *)v4 + v31;
    sub_1000076B4((uint64_t)a1 + v31, type metadata accessor for PrimarySettingsListFollowUpModel.ViewType);
    v34 = type metadata accessor for PrimarySettingsListFollowUpModel.ViewType(0);
    if (swift_getEnumCaseMultiPayload(v33, v34) == 1)
    {
      v106 = a3;
      v107 = v4;
      v105 = v34;
      switch(swift_getEnumCaseMultiPayload(v33, v6))
      {
        case 0u:
          v35 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v32, v33, v35);
          v36 = v32;
          v37 = v6;
          v38 = 0;
          goto LABEL_29;
        case 1u:
          v52 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 16))(v32, v33, v52);
          v36 = v32;
          v37 = v6;
          v38 = 1;
          goto LABEL_29;
        case 2u:
          v53 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 16))(v32, v33, v53);
          v54 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
          v55 = &v32[v54];
          v56 = &v33[v54];
          *(_QWORD *)v55 = *(_QWORD *)v56;
          v57 = *((_QWORD *)v56 + 1);
          *((_QWORD *)v55 + 1) = v57;
          swift_bridgeObjectRetain(v57);
          v36 = v32;
          v37 = v6;
          v38 = 2;
          goto LABEL_29;
        case 3u:
          *(_QWORD *)v32 = *(_QWORD *)v33;
          v58 = *((_QWORD *)v33 + 1);
          *((_QWORD *)v32 + 1) = v58;
          *((_QWORD *)v32 + 2) = *((_QWORD *)v33 + 2);
          v59 = *((_QWORD *)v33 + 3);
          *((_QWORD *)v32 + 3) = v59;
          *((_QWORD *)v32 + 4) = *((_QWORD *)v33 + 4);
          v60 = *((_QWORD *)v33 + 5);
          *((_QWORD *)v32 + 5) = v60;
          *((_QWORD *)v32 + 6) = *((_QWORD *)v33 + 6);
          v61 = *((_QWORD *)v33 + 7);
          *((_QWORD *)v32 + 7) = v61;
          swift_bridgeObjectRetain(v58);
          swift_bridgeObjectRetain(v59);
          swift_bridgeObjectRetain(v60);
          swift_bridgeObjectRetain(v61);
          v36 = v32;
          v37 = v6;
          v38 = 3;
          goto LABEL_29;
        case 4u:
          *(_QWORD *)v32 = *(_QWORD *)v33;
          v62 = *((_QWORD *)v33 + 1);
          *((_QWORD *)v32 + 1) = v62;
          *((_QWORD *)v32 + 2) = *((_QWORD *)v33 + 2);
          v63 = *((_QWORD *)v33 + 3);
          *((_QWORD *)v32 + 3) = v63;
          *((_QWORD *)v32 + 4) = *((_QWORD *)v33 + 4);
          v64 = *((_QWORD *)v33 + 5);
          *((_QWORD *)v32 + 5) = v64;
          *((_QWORD *)v32 + 6) = *((_QWORD *)v33 + 6);
          swift_bridgeObjectRetain(v62);
          swift_bridgeObjectRetain(v63);
          swift_bridgeObjectRetain(v64);
          v36 = v32;
          v37 = v6;
          v38 = 4;
          goto LABEL_29;
        case 5u:
          *(_QWORD *)v32 = *(_QWORD *)v33;
          v65 = *((_QWORD *)v33 + 1);
          *((_QWORD *)v32 + 1) = v65;
          *((_QWORD *)v32 + 2) = *((_QWORD *)v33 + 2);
          v66 = *((_QWORD *)v33 + 3);
          *((_QWORD *)v32 + 3) = v66;
          v67 = (void *)*((_QWORD *)v33 + 4);
          *((_QWORD *)v32 + 4) = v67;
          v68 = *((_QWORD *)v33 + 5);
          *((_QWORD *)v32 + 5) = v68;
          v104 = v33 + 48;
          v69 = *((_QWORD *)v33 + 9);
          swift_bridgeObjectRetain(v65);
          swift_bridgeObjectRetain(v66);
          v70 = v67;
          swift_bridgeObjectRetain(v68);
          if (v69)
          {
            *((_QWORD *)v32 + 9) = v69;
            (**(void (***)(uint64_t, _OWORD *, uint64_t))(v69 - 8))((uint64_t)(v32 + 48), v104, v69);
          }
          else
          {
            v71 = *((_OWORD *)v33 + 4);
            *((_OWORD *)v32 + 3) = *v104;
            *((_OWORD *)v32 + 4) = v71;
          }
          v36 = v32;
          v37 = v6;
          v38 = 5;
LABEL_29:
          swift_storeEnumTagMultiPayload(v36, v37, v38);
          break;
        default:
          memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
          break;
      }
      v72 = (int *)type metadata accessor for PrimarySettingsListFollowUpActionModel(0);
      v73 = v72[5];
      v74 = &v32[v73];
      v75 = &v33[v73];
      v76 = type metadata accessor for FLFollowUpGroupIdentity(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v76 - 8) + 16))(v74, v75, v76);
      v32[v72[6]] = v33[v72[6]];
      v77 = v72[7];
      v78 = &v32[v77];
      v79 = &v33[v77];
      *(_QWORD *)v78 = *(_QWORD *)v79;
      v80 = *((_QWORD *)v79 + 1);
      *((_QWORD *)v78 + 1) = v80;
      v81 = v72[8];
      v82 = &v32[v81];
      v83 = &v33[v81];
      *(_QWORD *)v82 = *(_QWORD *)v83;
      v84 = *((_QWORD *)v83 + 1);
      *((_QWORD *)v82 + 1) = v84;
      v85 = v72[9];
      v86 = &v32[v85];
      v87 = &v33[v85];
      v88 = *(_QWORD *)&v33[v85];
      v89 = *(_QWORD *)&v33[v85 + 8];
      v90 = v33[v85 + 16];
      swift_bridgeObjectRetain(v80);
      swift_bridgeObjectRetain(v84);
      sub_10000BAD4(v88, v89, v90);
      *(_QWORD *)v86 = v88;
      *((_QWORD *)v86 + 1) = v89;
      v86[16] = v90;
      v91 = *((_QWORD *)v87 + 3);
      *((_QWORD *)v86 + 3) = v91;
      v92 = v72[10];
      v93 = &v32[v92];
      v94 = &v33[v92];
      v95 = v94[16];
      swift_bridgeObjectRetain(v91);
      if (v95 == 255)
      {
        v98 = *(_OWORD *)v94;
        v93[16] = v94[16];
        *(_OWORD *)v93 = v98;
        v50 = 1;
      }
      else
      {
        v96 = *(_QWORD *)v94;
        v97 = *((_QWORD *)v94 + 1);
        sub_10000BB2C(v96, v97, v95);
        *(_QWORD *)v93 = v96;
        *((_QWORD *)v93 + 1) = v97;
        v50 = 1;
        v93[16] = v95;
      }
      a3 = v106;
      v4 = v107;
      v34 = v105;
    }
    else
    {
      v39 = *(_QWORD *)v33;
      v40 = *((_QWORD *)v33 + 1);
      v41 = v33[16];
      sub_10000BAD4(*(_QWORD *)v33, v40, v41);
      *(_QWORD *)v32 = v39;
      *((_QWORD *)v32 + 1) = v40;
      v32[16] = v41;
      v42 = *((_QWORD *)v33 + 3);
      *((_QWORD *)v32 + 3) = v42;
      v43 = *((_QWORD *)v33 + 4);
      v44 = *((_QWORD *)v33 + 5);
      v45 = v33[48];
      swift_bridgeObjectRetain(v42);
      sub_10000BAD4(v43, v44, v45);
      *((_QWORD *)v32 + 4) = v43;
      *((_QWORD *)v32 + 5) = v44;
      v32[48] = v45;
      v46 = *((_QWORD *)v33 + 7);
      *((_QWORD *)v32 + 7) = v46;
      v47 = v33[80];
      swift_bridgeObjectRetain(v46);
      if (v47 == 255)
      {
        v50 = 0;
        v51 = *((_OWORD *)v33 + 4);
        v32[80] = v33[80];
        *((_OWORD *)v32 + 4) = v51;
      }
      else
      {
        v49 = *((_QWORD *)v33 + 8);
        v48 = *((_QWORD *)v33 + 9);
        sub_10000BB2C(v49, v48, v47);
        v50 = 0;
        *((_QWORD *)v32 + 8) = v49;
        *((_QWORD *)v32 + 9) = v48;
        v32[80] = v47;
      }
    }
    swift_storeEnumTagMultiPayload(v32, v34, v50);
  }
  v99 = *(int *)(a3 + 24);
  v100 = (char *)a1 + v99;
  v101 = (char *)v4 + v99;
  v102 = type metadata accessor for FLFollowUpInformation(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v102 - 8) + 24))(v100, v101, v102);
  return a1;
}

char *sub_10008E0B8(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  __int128 v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;

  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
  if (EnumCaseMultiPayload == 2)
  {
    v9 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
    v10 = sub_100004FC8(&qword_10015C420);
    *(_OWORD *)&a1[*(int *)(v10 + 48)] = *(_OWORD *)&a2[*(int *)(v10 + 48)];
    swift_storeEnumTagMultiPayload(a1, v6, 2);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v11 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    v8 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload(a1, v6, 0);
  }
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for PrimarySettingsListFollowUpModel.ViewType(0);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = swift_getEnumCaseMultiPayload(v14, v6);
    if (v16 == 2)
    {
      v18 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v13, v14, v18);
      v19 = sub_100004FC8(&qword_10015C420);
      *(_OWORD *)&v13[*(int *)(v19 + 48)] = *(_OWORD *)&v14[*(int *)(v19 + 48)];
      swift_storeEnumTagMultiPayload(v13, v6, 2);
    }
    else if (v16 == 1)
    {
      v20 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v13, v14, v20);
      swift_storeEnumTagMultiPayload(v13, v6, 1);
    }
    else if (v16)
    {
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      v17 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v13, v14, v17);
      swift_storeEnumTagMultiPayload(v13, v6, 0);
    }
    v21 = (int *)type metadata accessor for PrimarySettingsListFollowUpActionModel(0);
    v22 = v21[5];
    v23 = &v13[v22];
    v24 = &v14[v22];
    v25 = type metadata accessor for FLFollowUpGroupIdentity(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v23, v24, v25);
    v13[v21[6]] = v14[v21[6]];
    *(_OWORD *)&v13[v21[7]] = *(_OWORD *)&v14[v21[7]];
    *(_OWORD *)&v13[v21[8]] = *(_OWORD *)&v14[v21[8]];
    v26 = v21[9];
    v27 = &v13[v26];
    v28 = &v14[v26];
    v29 = *((_OWORD *)v28 + 1);
    *(_OWORD *)v27 = *(_OWORD *)v28;
    *((_OWORD *)v27 + 1) = v29;
    v30 = v21[10];
    v31 = &v13[v30];
    v32 = &v14[v30];
    *(_OWORD *)v31 = *(_OWORD *)v32;
    v31[16] = v32[16];
    swift_storeEnumTagMultiPayload(v13, v15, 1);
  }
  else
  {
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  v33 = *(int *)(a3 + 24);
  v34 = &a1[v33];
  v35 = &a2[v33];
  v36 = type metadata accessor for FLFollowUpInformation(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v34, v35, v36);
  return a1;
}

char *sub_10008E3E8(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  __int128 v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;

  if (a1 != a2)
  {
    sub_1000076B4((uint64_t)a1, type metadata accessor for PrimarySettingsListItemIdentifier);
    v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
    if (EnumCaseMultiPayload == 2)
    {
      v9 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      v10 = sub_100004FC8(&qword_10015C420);
      *(_OWORD *)&a1[*(int *)(v10 + 48)] = *(_OWORD *)&a2[*(int *)(v10 + 48)];
      swift_storeEnumTagMultiPayload(a1, v6, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v11 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      v8 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload(a1, v6, 0);
    }
    v12 = *(int *)(a3 + 20);
    v13 = &a1[v12];
    v14 = &a2[v12];
    sub_1000076B4((uint64_t)&a1[v12], type metadata accessor for PrimarySettingsListFollowUpModel.ViewType);
    v15 = type metadata accessor for PrimarySettingsListFollowUpModel.ViewType(0);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = swift_getEnumCaseMultiPayload(v14, v6);
      if (v16 == 2)
      {
        v18 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v13, v14, v18);
        v19 = sub_100004FC8(&qword_10015C420);
        *(_OWORD *)&v13[*(int *)(v19 + 48)] = *(_OWORD *)&v14[*(int *)(v19 + 48)];
        swift_storeEnumTagMultiPayload(v13, v6, 2);
      }
      else if (v16 == 1)
      {
        v20 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v13, v14, v20);
        swift_storeEnumTagMultiPayload(v13, v6, 1);
      }
      else if (v16)
      {
        memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      }
      else
      {
        v17 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v13, v14, v17);
        swift_storeEnumTagMultiPayload(v13, v6, 0);
      }
      v21 = (int *)type metadata accessor for PrimarySettingsListFollowUpActionModel(0);
      v22 = v21[5];
      v23 = &v13[v22];
      v24 = &v14[v22];
      v25 = type metadata accessor for FLFollowUpGroupIdentity(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v23, v24, v25);
      v13[v21[6]] = v14[v21[6]];
      *(_OWORD *)&v13[v21[7]] = *(_OWORD *)&v14[v21[7]];
      *(_OWORD *)&v13[v21[8]] = *(_OWORD *)&v14[v21[8]];
      v26 = v21[9];
      v27 = &v13[v26];
      v28 = &v14[v26];
      v29 = *((_OWORD *)v28 + 1);
      *(_OWORD *)v27 = *(_OWORD *)v28;
      *((_OWORD *)v27 + 1) = v29;
      v30 = v21[10];
      v31 = &v13[v30];
      v32 = &v14[v30];
      *(_OWORD *)v31 = *(_OWORD *)v32;
      v31[16] = v32[16];
      swift_storeEnumTagMultiPayload(v13, v15, 1);
    }
    else
    {
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
  }
  v33 = *(int *)(a3 + 24);
  v34 = &a1[v33];
  v35 = &a2[v33];
  v36 = type metadata accessor for FLFollowUpInformation(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 40))(v34, v35, v36);
  return a1;
}

uint64_t sub_10008E740(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008E74C);
}

uint64_t sub_10008E74C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = type metadata accessor for PrimarySettingsListFollowUpModel.ViewType(0);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = type metadata accessor for FLFollowUpInformation(0);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_10008E7E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008E7F0);
}

uint64_t sub_10008E7F0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = type metadata accessor for PrimarySettingsListFollowUpModel.ViewType(0);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = type metadata accessor for FLFollowUpInformation(0);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for PrimarySettingsListFollowUpModel(uint64_t a1)
{
  return sub_10000D3C4(a1, qword_10015A368, (uint64_t)&nominal type descriptor for PrimarySettingsListFollowUpModel);
}

uint64_t sub_10008E8A4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  result = type metadata accessor for PrimarySettingsListItemIdentifier(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for PrimarySettingsListFollowUpModel.ViewType(319);
    if (v4 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(result - 8) + 64;
      result = type metadata accessor for FLFollowUpInformation(319);
      if (v5 <= 0x3F)
      {
        v6[2] = *(_QWORD *)(result - 8) + 64;
        swift_initStructMetadata(a1, 256, 3, v6, a1 + 16);
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_10008E944(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  id v45;
  __int128 v46;
  int *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v12 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v12);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v7 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
      switch(swift_getEnumCaseMultiPayload(a2, v7))
      {
        case 0u:
          v8 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
          v9 = a1;
          v10 = v7;
          v11 = 0;
          goto LABEL_19;
        case 1u:
          v27 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(a1, a2, v27);
          v9 = a1;
          v10 = v7;
          v11 = 1;
          goto LABEL_19;
        case 2u:
          v28 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(a1, a2, v28);
          v29 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
          v30 = (_QWORD *)(a1 + v29);
          v31 = (uint64_t *)((char *)a2 + v29);
          v32 = v31[1];
          *v30 = *v31;
          v30[1] = v32;
          swift_bridgeObjectRetain(v32);
          v9 = a1;
          v10 = v7;
          v11 = 2;
          goto LABEL_19;
        case 3u:
          v33 = a2[1];
          *(_QWORD *)a1 = *a2;
          *(_QWORD *)(a1 + 8) = v33;
          v34 = a2[3];
          *(_QWORD *)(a1 + 16) = a2[2];
          *(_QWORD *)(a1 + 24) = v34;
          v35 = a2[5];
          *(_QWORD *)(a1 + 32) = a2[4];
          *(_QWORD *)(a1 + 40) = v35;
          v36 = a2[7];
          *(_QWORD *)(a1 + 48) = a2[6];
          *(_QWORD *)(a1 + 56) = v36;
          swift_bridgeObjectRetain(v33);
          swift_bridgeObjectRetain(v34);
          swift_bridgeObjectRetain(v35);
          swift_bridgeObjectRetain(v36);
          v9 = a1;
          v10 = v7;
          v11 = 3;
          goto LABEL_19;
        case 4u:
          v37 = a2[1];
          *(_QWORD *)a1 = *a2;
          *(_QWORD *)(a1 + 8) = v37;
          v38 = a2[3];
          *(_QWORD *)(a1 + 16) = a2[2];
          *(_QWORD *)(a1 + 24) = v38;
          v39 = a2[5];
          *(_QWORD *)(a1 + 32) = a2[4];
          *(_QWORD *)(a1 + 40) = v39;
          *(_QWORD *)(a1 + 48) = a2[6];
          swift_bridgeObjectRetain(v37);
          swift_bridgeObjectRetain(v38);
          swift_bridgeObjectRetain(v39);
          v9 = a1;
          v10 = v7;
          v11 = 4;
          goto LABEL_19;
        case 5u:
          v40 = a2[1];
          *(_QWORD *)a1 = *a2;
          *(_QWORD *)(a1 + 8) = v40;
          v41 = a2[3];
          *(_QWORD *)(a1 + 16) = a2[2];
          *(_QWORD *)(a1 + 24) = v41;
          v43 = (void *)a2[4];
          v42 = a2[5];
          *(_QWORD *)(a1 + 32) = v43;
          *(_QWORD *)(a1 + 40) = v42;
          v44 = a2[9];
          swift_bridgeObjectRetain(v40);
          swift_bridgeObjectRetain(v41);
          v45 = v43;
          swift_bridgeObjectRetain(v42);
          if (v44)
          {
            *(_QWORD *)(a1 + 72) = v44;
            (**(void (***)(uint64_t, uint64_t, uint64_t))(v44 - 8))(a1 + 48, (uint64_t)(a2 + 6), v44);
          }
          else
          {
            v46 = *((_OWORD *)a2 + 4);
            *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
            *(_OWORD *)(a1 + 64) = v46;
          }
          v9 = a1;
          v10 = v7;
          v11 = 5;
LABEL_19:
          swift_storeEnumTagMultiPayload(v9, v10, v11);
          break;
        default:
          memcpy((void *)a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
          break;
      }
      v47 = (int *)type metadata accessor for PrimarySettingsListFollowUpActionModel(0);
      v48 = v47[5];
      v49 = a1 + v48;
      v50 = (uint64_t)a2 + v48;
      v51 = type metadata accessor for FLFollowUpGroupIdentity(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v49, v50, v51);
      *(_BYTE *)(a1 + v47[6]) = *((_BYTE *)a2 + v47[6]);
      v52 = v47[7];
      v53 = (_QWORD *)(a1 + v52);
      v54 = (uint64_t *)((char *)a2 + v52);
      v55 = v54[1];
      *v53 = *v54;
      v53[1] = v55;
      v56 = v47[8];
      v57 = (_QWORD *)(a1 + v56);
      v58 = (uint64_t *)((char *)a2 + v56);
      v59 = v58[1];
      *v57 = *v58;
      v57[1] = v59;
      v60 = v47[9];
      v61 = a1 + v60;
      v62 = (uint64_t)a2 + v60;
      v63 = *(uint64_t *)((char *)a2 + v60);
      v64 = *(uint64_t *)((char *)a2 + v60 + 8);
      v65 = *((_BYTE *)a2 + v60 + 16);
      swift_bridgeObjectRetain(v55);
      swift_bridgeObjectRetain(v59);
      sub_10000BAD4(v63, v64, v65);
      *(_QWORD *)v61 = v63;
      *(_QWORD *)(v61 + 8) = v64;
      *(_BYTE *)(v61 + 16) = v65;
      v66 = *(_QWORD *)(v62 + 24);
      *(_QWORD *)(v61 + 24) = v66;
      v67 = v47[10];
      v68 = a1 + v67;
      v69 = (uint64_t)a2 + v67;
      v70 = *((unsigned __int8 *)a2 + v67 + 16);
      swift_bridgeObjectRetain(v66);
      if (v70 == 255)
      {
        *(_OWORD *)v68 = *(_OWORD *)v69;
        *(_BYTE *)(v68 + 16) = *(_BYTE *)(v69 + 16);
      }
      else
      {
        v71 = *(_QWORD *)v69;
        v72 = *(_QWORD *)(v69 + 8);
        sub_10000BB2C(v71, v72, v70);
        *(_QWORD *)v68 = v71;
        *(_QWORD *)(v68 + 8) = v72;
        *(_BYTE *)(v68 + 16) = v70;
      }
      v24 = a1;
      v25 = a3;
      v26 = 1;
    }
    else
    {
      v13 = *a2;
      v14 = a2[1];
      v15 = *((_BYTE *)a2 + 16);
      sub_10000BAD4(*a2, v14, v15);
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v14;
      *(_BYTE *)(a1 + 16) = v15;
      v16 = a2[3];
      v17 = a2[4];
      *(_QWORD *)(a1 + 24) = v16;
      v18 = a2[5];
      v19 = *((_BYTE *)a2 + 48);
      swift_bridgeObjectRetain(v16);
      sub_10000BAD4(v17, v18, v19);
      *(_QWORD *)(a1 + 32) = v17;
      *(_QWORD *)(a1 + 40) = v18;
      *(_BYTE *)(a1 + 48) = v19;
      v20 = a2[7];
      *(_QWORD *)(a1 + 56) = v20;
      v21 = *((unsigned __int8 *)a2 + 80);
      swift_bridgeObjectRetain(v20);
      if (v21 == 255)
      {
        *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
        *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
      }
      else
      {
        v23 = a2[8];
        v22 = a2[9];
        sub_10000BB2C(v23, v22, v21);
        *(_QWORD *)(a1 + 64) = v23;
        *(_QWORD *)(a1 + 72) = v22;
        *(_BYTE *)(a1 + 80) = v21;
      }
      v24 = a1;
      v25 = a3;
      v26 = 0;
    }
    swift_storeEnumTagMultiPayload(v24, v25, v26);
  }
  return a1;
}

uint64_t sub_10008ED90(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (swift_getEnumCaseMultiPayload(a1, a2) != 1)
  {
    sub_100007618(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
    sub_100007618(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
    result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
    v6 = *(unsigned __int8 *)(a1 + 80);
    if (v6 == 255)
      return result;
    v7 = *(_QWORD *)(a1 + 64);
    v8 = *(_QWORD *)(a1 + 72);
    return sub_10000BB54(v7, v8, v6);
  }
  v3 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(a1, v3))
  {
    case 0u:
    case 1u:
      v4 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
      break;
    case 2u:
      v9 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(a1, v9);
      v10 = sub_100004FC8(&qword_10015C420);
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v10 + 48) + 8));
      break;
    case 3u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
      break;
    case 4u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      break;
    case 5u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));

      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      if (*(_QWORD *)(a1 + 72))
        sub_100005474((_QWORD *)(a1 + 48));
      break;
    default:
      break;
  }
  v11 = (int *)type metadata accessor for PrimarySettingsListFollowUpActionModel(0);
  v12 = a1 + v11[5];
  v13 = type metadata accessor for FLFollowUpGroupIdentity(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v11[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v11[8] + 8));
  v14 = a1 + v11[9];
  sub_100007618(*(_QWORD *)v14, *(_QWORD *)(v14 + 8), *(_BYTE *)(v14 + 16));
  result = swift_bridgeObjectRelease(*(_QWORD *)(v14 + 24));
  v15 = a1 + v11[10];
  v6 = *(unsigned __int8 *)(v15 + 16);
  if (v6 != 255)
  {
    v7 = *(_QWORD *)v15;
    v8 = *(_QWORD *)(v15 + 8);
    return sub_10000BB54(v7, v8, v6);
  }
  return result;
}

uint64_t sub_10008EF94(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  id v41;
  __int128 v42;
  int *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(a2, v6))
    {
      case 0u:
        v7 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
        v8 = a1;
        v9 = v6;
        v10 = 0;
        goto LABEL_16;
      case 1u:
        v23 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(a1, a2, v23);
        v8 = a1;
        v9 = v6;
        v10 = 1;
        goto LABEL_16;
      case 2u:
        v24 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(a1, a2, v24);
        v25 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v26 = (_QWORD *)(a1 + v25);
        v27 = (uint64_t *)((char *)a2 + v25);
        v28 = v27[1];
        *v26 = *v27;
        v26[1] = v28;
        swift_bridgeObjectRetain(v28);
        v8 = a1;
        v9 = v6;
        v10 = 2;
        goto LABEL_16;
      case 3u:
        v29 = a2[1];
        *(_QWORD *)a1 = *a2;
        *(_QWORD *)(a1 + 8) = v29;
        v30 = a2[3];
        *(_QWORD *)(a1 + 16) = a2[2];
        *(_QWORD *)(a1 + 24) = v30;
        v31 = a2[5];
        *(_QWORD *)(a1 + 32) = a2[4];
        *(_QWORD *)(a1 + 40) = v31;
        v32 = a2[7];
        *(_QWORD *)(a1 + 48) = a2[6];
        *(_QWORD *)(a1 + 56) = v32;
        swift_bridgeObjectRetain(v29);
        swift_bridgeObjectRetain(v30);
        swift_bridgeObjectRetain(v31);
        swift_bridgeObjectRetain(v32);
        v8 = a1;
        v9 = v6;
        v10 = 3;
        goto LABEL_16;
      case 4u:
        v33 = a2[1];
        *(_QWORD *)a1 = *a2;
        *(_QWORD *)(a1 + 8) = v33;
        v34 = a2[3];
        *(_QWORD *)(a1 + 16) = a2[2];
        *(_QWORD *)(a1 + 24) = v34;
        v35 = a2[5];
        *(_QWORD *)(a1 + 32) = a2[4];
        *(_QWORD *)(a1 + 40) = v35;
        *(_QWORD *)(a1 + 48) = a2[6];
        swift_bridgeObjectRetain(v33);
        swift_bridgeObjectRetain(v34);
        swift_bridgeObjectRetain(v35);
        v8 = a1;
        v9 = v6;
        v10 = 4;
        goto LABEL_16;
      case 5u:
        v36 = a2[1];
        *(_QWORD *)a1 = *a2;
        *(_QWORD *)(a1 + 8) = v36;
        v37 = a2[3];
        *(_QWORD *)(a1 + 16) = a2[2];
        *(_QWORD *)(a1 + 24) = v37;
        v39 = (void *)a2[4];
        v38 = a2[5];
        *(_QWORD *)(a1 + 32) = v39;
        *(_QWORD *)(a1 + 40) = v38;
        v40 = a2[9];
        swift_bridgeObjectRetain(v36);
        swift_bridgeObjectRetain(v37);
        v41 = v39;
        swift_bridgeObjectRetain(v38);
        if (v40)
        {
          *(_QWORD *)(a1 + 72) = v40;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v40 - 8))(a1 + 48, (uint64_t)(a2 + 6), v40);
        }
        else
        {
          v42 = *((_OWORD *)a2 + 4);
          *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
          *(_OWORD *)(a1 + 64) = v42;
        }
        v8 = a1;
        v9 = v6;
        v10 = 5;
LABEL_16:
        swift_storeEnumTagMultiPayload(v8, v9, v10);
        break;
      default:
        memcpy((void *)a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
        break;
    }
    v43 = (int *)type metadata accessor for PrimarySettingsListFollowUpActionModel(0);
    v44 = v43[5];
    v45 = a1 + v44;
    v46 = (uint64_t)a2 + v44;
    v47 = type metadata accessor for FLFollowUpGroupIdentity(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v45, v46, v47);
    *(_BYTE *)(a1 + v43[6]) = *((_BYTE *)a2 + v43[6]);
    v48 = v43[7];
    v49 = (_QWORD *)(a1 + v48);
    v50 = (uint64_t *)((char *)a2 + v48);
    v51 = v50[1];
    *v49 = *v50;
    v49[1] = v51;
    v52 = v43[8];
    v53 = (_QWORD *)(a1 + v52);
    v54 = (uint64_t *)((char *)a2 + v52);
    v55 = v54[1];
    *v53 = *v54;
    v53[1] = v55;
    v56 = v43[9];
    v57 = a1 + v56;
    v58 = (uint64_t)a2 + v56;
    v59 = *(uint64_t *)((char *)a2 + v56);
    v60 = *(uint64_t *)((char *)a2 + v56 + 8);
    v61 = *((_BYTE *)a2 + v56 + 16);
    swift_bridgeObjectRetain(v51);
    swift_bridgeObjectRetain(v55);
    sub_10000BAD4(v59, v60, v61);
    *(_QWORD *)v57 = v59;
    *(_QWORD *)(v57 + 8) = v60;
    *(_BYTE *)(v57 + 16) = v61;
    v62 = *(_QWORD *)(v58 + 24);
    *(_QWORD *)(v57 + 24) = v62;
    v63 = v43[10];
    v64 = a1 + v63;
    v65 = (uint64_t)a2 + v63;
    v66 = *((unsigned __int8 *)a2 + v63 + 16);
    swift_bridgeObjectRetain(v62);
    if (v66 == 255)
    {
      *(_OWORD *)v64 = *(_OWORD *)v65;
      *(_BYTE *)(v64 + 16) = *(_BYTE *)(v65 + 16);
      v22 = 1;
    }
    else
    {
      v67 = *(_QWORD *)v65;
      v68 = *(_QWORD *)(v65 + 8);
      sub_10000BB2C(v67, v68, v66);
      *(_QWORD *)v64 = v67;
      *(_QWORD *)(v64 + 8) = v68;
      v22 = 1;
      *(_BYTE *)(v64 + 16) = v66;
    }
  }
  else
  {
    v11 = *a2;
    v12 = a2[1];
    v13 = *((_BYTE *)a2 + 16);
    sub_10000BAD4(*a2, v12, v13);
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v12;
    *(_BYTE *)(a1 + 16) = v13;
    v14 = a2[3];
    v15 = a2[4];
    *(_QWORD *)(a1 + 24) = v14;
    v16 = a2[5];
    v17 = *((_BYTE *)a2 + 48);
    swift_bridgeObjectRetain(v14);
    sub_10000BAD4(v15, v16, v17);
    *(_QWORD *)(a1 + 32) = v15;
    *(_QWORD *)(a1 + 40) = v16;
    *(_BYTE *)(a1 + 48) = v17;
    v18 = a2[7];
    *(_QWORD *)(a1 + 56) = v18;
    v19 = *((unsigned __int8 *)a2 + 80);
    swift_bridgeObjectRetain(v18);
    if (v19 == 255)
    {
      v22 = 0;
      *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
      *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
    }
    else
    {
      v21 = a2[8];
      v20 = a2[9];
      sub_10000BB2C(v21, v20, v19);
      v22 = 0;
      *(_QWORD *)(a1 + 64) = v21;
      *(_QWORD *)(a1 + 72) = v20;
      *(_BYTE *)(a1 + 80) = v19;
    }
  }
  swift_storeEnumTagMultiPayload(a1, a3, v22);
  return a1;
}

uint64_t sub_10008F3B4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  __int128 v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 *v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;

  if ((uint64_t *)a1 != a2)
  {
    sub_1000076B4(a1, type metadata accessor for PrimarySettingsListFollowUpModel.ViewType);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
      switch(swift_getEnumCaseMultiPayload(a2, v6))
      {
        case 0u:
          v7 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
          v8 = a1;
          v9 = v6;
          v10 = 0;
          goto LABEL_17;
        case 1u:
          v24 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(a1, a2, v24);
          v8 = a1;
          v9 = v6;
          v10 = 1;
          goto LABEL_17;
        case 2u:
          v25 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(a1, a2, v25);
          v26 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
          v27 = (_QWORD *)(a1 + v26);
          v28 = (uint64_t *)((char *)a2 + v26);
          *v27 = *v28;
          v29 = v28[1];
          v27[1] = v29;
          swift_bridgeObjectRetain(v29);
          v8 = a1;
          v9 = v6;
          v10 = 2;
          goto LABEL_17;
        case 3u:
          *(_QWORD *)a1 = *a2;
          v30 = a2[1];
          *(_QWORD *)(a1 + 8) = v30;
          *(_QWORD *)(a1 + 16) = a2[2];
          v31 = a2[3];
          *(_QWORD *)(a1 + 24) = v31;
          *(_QWORD *)(a1 + 32) = a2[4];
          v32 = a2[5];
          *(_QWORD *)(a1 + 40) = v32;
          *(_QWORD *)(a1 + 48) = a2[6];
          v33 = a2[7];
          *(_QWORD *)(a1 + 56) = v33;
          swift_bridgeObjectRetain(v30);
          swift_bridgeObjectRetain(v31);
          swift_bridgeObjectRetain(v32);
          swift_bridgeObjectRetain(v33);
          v8 = a1;
          v9 = v6;
          v10 = 3;
          goto LABEL_17;
        case 4u:
          *(_QWORD *)a1 = *a2;
          v34 = a2[1];
          *(_QWORD *)(a1 + 8) = v34;
          *(_QWORD *)(a1 + 16) = a2[2];
          v35 = a2[3];
          *(_QWORD *)(a1 + 24) = v35;
          *(_QWORD *)(a1 + 32) = a2[4];
          v36 = a2[5];
          *(_QWORD *)(a1 + 40) = v36;
          *(_QWORD *)(a1 + 48) = a2[6];
          swift_bridgeObjectRetain(v34);
          swift_bridgeObjectRetain(v35);
          swift_bridgeObjectRetain(v36);
          v8 = a1;
          v9 = v6;
          v10 = 4;
          goto LABEL_17;
        case 5u:
          *(_QWORD *)a1 = *a2;
          v37 = a2[1];
          *(_QWORD *)(a1 + 8) = v37;
          *(_QWORD *)(a1 + 16) = a2[2];
          v38 = a2[3];
          *(_QWORD *)(a1 + 24) = v38;
          v39 = (void *)a2[4];
          *(_QWORD *)(a1 + 32) = v39;
          v40 = a2[5];
          *(_QWORD *)(a1 + 40) = v40;
          v41 = a2[9];
          swift_bridgeObjectRetain(v37);
          swift_bridgeObjectRetain(v38);
          v42 = v39;
          swift_bridgeObjectRetain(v40);
          if (v41)
          {
            *(_QWORD *)(a1 + 72) = v41;
            (**(void (***)(uint64_t, uint64_t, uint64_t))(v41 - 8))(a1 + 48, (uint64_t)(a2 + 6), v41);
          }
          else
          {
            v43 = *((_OWORD *)a2 + 4);
            *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
            *(_OWORD *)(a1 + 64) = v43;
          }
          v8 = a1;
          v9 = v6;
          v10 = 5;
LABEL_17:
          swift_storeEnumTagMultiPayload(v8, v9, v10);
          break;
        default:
          memcpy((void *)a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
          break;
      }
      v44 = (int *)type metadata accessor for PrimarySettingsListFollowUpActionModel(0);
      v45 = v44[5];
      v46 = a1 + v45;
      v47 = (uint64_t)a2 + v45;
      v48 = type metadata accessor for FLFollowUpGroupIdentity(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v46, v47, v48);
      *(_BYTE *)(a1 + v44[6]) = *((_BYTE *)a2 + v44[6]);
      v49 = v44[7];
      v50 = (_QWORD *)(a1 + v49);
      v51 = (uint64_t *)((char *)a2 + v49);
      *v50 = *v51;
      v52 = v51[1];
      v50[1] = v52;
      v53 = v44[8];
      v54 = (_QWORD *)(a1 + v53);
      v55 = (uint64_t *)((char *)a2 + v53);
      *v54 = *v55;
      v56 = v55[1];
      v54[1] = v56;
      v57 = v44[9];
      v58 = a1 + v57;
      v59 = (uint64_t)a2 + v57;
      v60 = *(uint64_t *)((char *)a2 + v57);
      v61 = *(uint64_t *)((char *)a2 + v57 + 8);
      v62 = *((_BYTE *)a2 + v57 + 16);
      swift_bridgeObjectRetain(v52);
      swift_bridgeObjectRetain(v56);
      sub_10000BAD4(v60, v61, v62);
      *(_QWORD *)v58 = v60;
      *(_QWORD *)(v58 + 8) = v61;
      *(_BYTE *)(v58 + 16) = v62;
      v63 = *(_QWORD *)(v59 + 24);
      *(_QWORD *)(v58 + 24) = v63;
      v64 = v44[10];
      v65 = a1 + v64;
      v66 = (__int128 *)((char *)a2 + v64);
      v67 = *((unsigned __int8 *)a2 + v64 + 16);
      swift_bridgeObjectRetain(v63);
      if (v67 == 255)
      {
        v70 = *v66;
        *(_BYTE *)(v65 + 16) = *((_BYTE *)v66 + 16);
        *(_OWORD *)v65 = v70;
        v22 = 1;
      }
      else
      {
        v68 = *(_QWORD *)v66;
        v69 = *((_QWORD *)v66 + 1);
        sub_10000BB2C(v68, v69, v67);
        *(_QWORD *)v65 = v68;
        *(_QWORD *)(v65 + 8) = v69;
        v22 = 1;
        *(_BYTE *)(v65 + 16) = v67;
      }
    }
    else
    {
      v11 = *a2;
      v12 = a2[1];
      v13 = *((_BYTE *)a2 + 16);
      sub_10000BAD4(*a2, v12, v13);
      *(_QWORD *)a1 = v11;
      *(_QWORD *)(a1 + 8) = v12;
      *(_BYTE *)(a1 + 16) = v13;
      v14 = a2[3];
      *(_QWORD *)(a1 + 24) = v14;
      v15 = a2[4];
      v16 = a2[5];
      v17 = *((_BYTE *)a2 + 48);
      swift_bridgeObjectRetain(v14);
      sub_10000BAD4(v15, v16, v17);
      *(_QWORD *)(a1 + 32) = v15;
      *(_QWORD *)(a1 + 40) = v16;
      *(_BYTE *)(a1 + 48) = v17;
      v18 = a2[7];
      *(_QWORD *)(a1 + 56) = v18;
      v19 = *((unsigned __int8 *)a2 + 80);
      swift_bridgeObjectRetain(v18);
      if (v19 == 255)
      {
        v22 = 0;
        v23 = *((_OWORD *)a2 + 4);
        *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
        *(_OWORD *)(a1 + 64) = v23;
      }
      else
      {
        v21 = a2[8];
        v20 = a2[9];
        sub_10000BB2C(v21, v20, v19);
        v22 = 0;
        *(_QWORD *)(a1 + 64) = v21;
        *(_QWORD *)(a1 + 72) = v20;
        *(_BYTE *)(a1 + 80) = v19;
      }
    }
    swift_storeEnumTagMultiPayload(a1, a3, v22);
  }
  return a1;
}

char *sub_10008F854(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  char *v23;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
    if (EnumCaseMultiPayload == 2)
    {
      v9 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      v10 = sub_100004FC8(&qword_10015C420);
      *(_OWORD *)&a1[*(int *)(v10 + 48)] = *(_OWORD *)&a2[*(int *)(v10 + 48)];
      swift_storeEnumTagMultiPayload(a1, v6, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v11 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      v8 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload(a1, v6, 0);
    }
    v12 = (int *)type metadata accessor for PrimarySettingsListFollowUpActionModel(0);
    v13 = v12[5];
    v14 = &a1[v13];
    v15 = &a2[v13];
    v16 = type metadata accessor for FLFollowUpGroupIdentity(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
    a1[v12[6]] = a2[v12[6]];
    *(_OWORD *)&a1[v12[7]] = *(_OWORD *)&a2[v12[7]];
    *(_OWORD *)&a1[v12[8]] = *(_OWORD *)&a2[v12[8]];
    v17 = v12[9];
    v18 = &a1[v17];
    v19 = &a2[v17];
    v20 = *((_OWORD *)v19 + 1);
    *(_OWORD *)v18 = *(_OWORD *)v19;
    *((_OWORD *)v18 + 1) = v20;
    v21 = v12[10];
    v22 = &a1[v21];
    v23 = &a2[v21];
    *(_OWORD *)v22 = *(_OWORD *)v23;
    v22[16] = v23[16];
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *sub_10008FA48(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  char *v23;

  if (a1 != a2)
  {
    sub_1000076B4((uint64_t)a1, type metadata accessor for PrimarySettingsListFollowUpModel.ViewType);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
      if (EnumCaseMultiPayload == 2)
      {
        v9 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
        v10 = sub_100004FC8(&qword_10015C420);
        *(_OWORD *)&a1[*(int *)(v10 + 48)] = *(_OWORD *)&a2[*(int *)(v10 + 48)];
        swift_storeEnumTagMultiPayload(a1, v6, 2);
      }
      else if (EnumCaseMultiPayload == 1)
      {
        v11 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
        swift_storeEnumTagMultiPayload(a1, v6, 1);
      }
      else if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      }
      else
      {
        v8 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
        swift_storeEnumTagMultiPayload(a1, v6, 0);
      }
      v12 = (int *)type metadata accessor for PrimarySettingsListFollowUpActionModel(0);
      v13 = v12[5];
      v14 = &a1[v13];
      v15 = &a2[v13];
      v16 = type metadata accessor for FLFollowUpGroupIdentity(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
      a1[v12[6]] = a2[v12[6]];
      *(_OWORD *)&a1[v12[7]] = *(_OWORD *)&a2[v12[7]];
      *(_OWORD *)&a1[v12[8]] = *(_OWORD *)&a2[v12[8]];
      v17 = v12[9];
      v18 = &a1[v17];
      v19 = &a2[v17];
      v20 = *((_OWORD *)v19 + 1);
      *(_OWORD *)v18 = *(_OWORD *)v19;
      *((_OWORD *)v18 + 1) = v20;
      v21 = v12[10];
      v22 = &a1[v21];
      v23 = &a2[v21];
      *(_OWORD *)v22 = *(_OWORD *)v23;
      v22[16] = v23[16];
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10008FC54(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = "Q";
  result = type metadata accessor for PrimarySettingsListFollowUpActionModel(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initEnumMetadataMultiPayload(a1, 256, 2, v4);
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for PrimarySettingsListFollowUpHeaderModel()
{
  return &type metadata for PrimarySettingsListFollowUpHeaderModel;
}

_QWORD *sub_10008FCD4(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  id v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(a2, v7))
    {
      case 0u:
        v8 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
        v9 = a1;
        v10 = v7;
        v11 = 0;
        goto LABEL_14;
      case 1u:
        v13 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
        v9 = a1;
        v10 = v7;
        v11 = 1;
        goto LABEL_14;
      case 2u:
        v14 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
        v15 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v16 = (_QWORD *)((char *)a1 + v15);
        v17 = (_QWORD *)((char *)a2 + v15);
        v18 = v17[1];
        *v16 = *v17;
        v16[1] = v18;
        swift_bridgeObjectRetain(v18);
        v9 = a1;
        v10 = v7;
        v11 = 2;
        goto LABEL_14;
      case 3u:
        v19 = a2[1];
        *a1 = *a2;
        a1[1] = v19;
        v20 = a2[3];
        a1[2] = a2[2];
        a1[3] = v20;
        v21 = a2[5];
        a1[4] = a2[4];
        a1[5] = v21;
        v22 = a2[7];
        a1[6] = a2[6];
        a1[7] = v22;
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v22);
        v9 = a1;
        v10 = v7;
        v11 = 3;
        goto LABEL_14;
      case 4u:
        v23 = a2[1];
        *a1 = *a2;
        a1[1] = v23;
        v24 = a2[3];
        a1[2] = a2[2];
        a1[3] = v24;
        v25 = a2[5];
        a1[4] = a2[4];
        a1[5] = v25;
        a1[6] = a2[6];
        swift_bridgeObjectRetain(v23);
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v25);
        v9 = a1;
        v10 = v7;
        v11 = 4;
        goto LABEL_14;
      case 5u:
        v26 = a2[1];
        *a1 = *a2;
        a1[1] = v26;
        v27 = a2[3];
        a1[2] = a2[2];
        a1[3] = v27;
        v29 = (void *)a2[4];
        v28 = a2[5];
        a1[4] = v29;
        a1[5] = v28;
        v30 = a2[9];
        swift_bridgeObjectRetain(v26);
        swift_bridgeObjectRetain(v27);
        v31 = v29;
        swift_bridgeObjectRetain(v28);
        if (v30)
        {
          a1[9] = v30;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v30 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v30);
        }
        else
        {
          v32 = *((_OWORD *)a2 + 4);
          *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
          *((_OWORD *)a1 + 4) = v32;
        }
        v9 = a1;
        v10 = v7;
        v11 = 5;
LABEL_14:
        swift_storeEnumTagMultiPayload(v9, v10, v11);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
        break;
    }
    v33 = a3[5];
    v34 = (char *)a1 + v33;
    v35 = (char *)a2 + v33;
    v36 = type metadata accessor for FLFollowUpGroupIdentity(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v34, v35, v36);
    v37 = a3[7];
    *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
    v38 = (_QWORD *)((char *)a1 + v37);
    v39 = (_QWORD *)((char *)a2 + v37);
    v40 = v39[1];
    *v38 = *v39;
    v38[1] = v40;
    v41 = a3[8];
    v42 = a3[9];
    v43 = (_QWORD *)((char *)a1 + v41);
    v44 = (_QWORD *)((char *)a2 + v41);
    v45 = v44[1];
    *v43 = *v44;
    v43[1] = v45;
    v46 = (char *)a1 + v42;
    v47 = (char *)a2 + v42;
    v48 = *(_QWORD *)((char *)a2 + v42);
    v49 = *(_QWORD *)((char *)a2 + v42 + 8);
    v50 = *((_BYTE *)a2 + v42 + 16);
    swift_bridgeObjectRetain(v40);
    swift_bridgeObjectRetain(v45);
    sub_10000BAD4(v48, v49, v50);
    *(_QWORD *)v46 = v48;
    *((_QWORD *)v46 + 1) = v49;
    v46[16] = v50;
    v51 = *((_QWORD *)v47 + 3);
    *((_QWORD *)v46 + 3) = v51;
    v52 = a3[10];
    v53 = (char *)a1 + v52;
    v54 = (char *)a2 + v52;
    v55 = *((unsigned __int8 *)a2 + v52 + 16);
    swift_bridgeObjectRetain(v51);
    if (v55 == 255)
    {
      *(_OWORD *)v53 = *(_OWORD *)v54;
      v53[16] = v54[16];
    }
    else
    {
      v56 = *(_QWORD *)v54;
      v57 = *((_QWORD *)v54 + 1);
      sub_10000BB2C(v56, v57, v55);
      *(_QWORD *)v53 = v56;
      *((_QWORD *)v53 + 1) = v57;
      v53[16] = v55;
    }
  }
  return a1;
}

uint64_t sub_10009003C(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  int v13;

  v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(a1, v4))
  {
    case 0u:
    case 1u:
      v5 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
      break;
    case 2u:
      v6 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
      v7 = sub_100004FC8(&qword_10015C420);
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v7 + 48) + 8));
      break;
    case 3u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
      break;
    case 4u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      break;
    case 5u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));

      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      if (*(_QWORD *)(a1 + 72))
        sub_100005474((_QWORD *)(a1 + 48));
      break;
    default:
      break;
  }
  v8 = a1 + a2[5];
  v9 = type metadata accessor for FLFollowUpGroupIdentity(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8] + 8));
  v10 = a1 + a2[9];
  sub_100007618(*(_QWORD *)v10, *(_QWORD *)(v10 + 8), *(_BYTE *)(v10 + 16));
  result = swift_bridgeObjectRelease(*(_QWORD *)(v10 + 24));
  v12 = a1 + a2[10];
  v13 = *(unsigned __int8 *)(v12 + 16);
  if (v13 != 255)
    return sub_10000BB54(*(_QWORD *)v12, *(_QWORD *)(v12 + 8), v13);
  return result;
}

_QWORD *sub_1000901F0(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;

  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(a2, v6))
  {
    case 0u:
      v7 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 0;
      goto LABEL_12;
    case 1u:
      v11 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      v8 = a1;
      v9 = v6;
      v10 = 1;
      goto LABEL_12;
    case 2u:
      v12 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
      v13 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
      v14 = (_QWORD *)((char *)a1 + v13);
      v15 = (_QWORD *)((char *)a2 + v13);
      v16 = v15[1];
      *v14 = *v15;
      v14[1] = v16;
      swift_bridgeObjectRetain(v16);
      v8 = a1;
      v9 = v6;
      v10 = 2;
      goto LABEL_12;
    case 3u:
      v17 = a2[1];
      *a1 = *a2;
      a1[1] = v17;
      v18 = a2[3];
      a1[2] = a2[2];
      a1[3] = v18;
      v19 = a2[5];
      a1[4] = a2[4];
      a1[5] = v19;
      v20 = a2[7];
      a1[6] = a2[6];
      a1[7] = v20;
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v20);
      v8 = a1;
      v9 = v6;
      v10 = 3;
      goto LABEL_12;
    case 4u:
      v21 = a2[1];
      *a1 = *a2;
      a1[1] = v21;
      v22 = a2[3];
      a1[2] = a2[2];
      a1[3] = v22;
      v23 = a2[5];
      a1[4] = a2[4];
      a1[5] = v23;
      a1[6] = a2[6];
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v23);
      v8 = a1;
      v9 = v6;
      v10 = 4;
      goto LABEL_12;
    case 5u:
      v24 = a2[1];
      *a1 = *a2;
      a1[1] = v24;
      v25 = a2[3];
      a1[2] = a2[2];
      a1[3] = v25;
      v27 = (void *)a2[4];
      v26 = a2[5];
      a1[4] = v27;
      a1[5] = v26;
      v28 = a2[9];
      swift_bridgeObjectRetain(v24);
      swift_bridgeObjectRetain(v25);
      v29 = v27;
      swift_bridgeObjectRetain(v26);
      if (v28)
      {
        a1[9] = v28;
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v28 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v28);
      }
      else
      {
        v30 = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 4) = v30;
      }
      v8 = a1;
      v9 = v6;
      v10 = 5;
LABEL_12:
      swift_storeEnumTagMultiPayload(v8, v9, v10);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      break;
  }
  v31 = a3[5];
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = type metadata accessor for FLFollowUpGroupIdentity(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v32, v33, v34);
  v35 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v36 = (_QWORD *)((char *)a1 + v35);
  v37 = (_QWORD *)((char *)a2 + v35);
  v38 = v37[1];
  *v36 = *v37;
  v36[1] = v38;
  v39 = a3[8];
  v40 = a3[9];
  v41 = (_QWORD *)((char *)a1 + v39);
  v42 = (_QWORD *)((char *)a2 + v39);
  v43 = v42[1];
  *v41 = *v42;
  v41[1] = v43;
  v44 = (char *)a1 + v40;
  v45 = (char *)a2 + v40;
  v46 = *(_QWORD *)((char *)a2 + v40);
  v47 = *(_QWORD *)((char *)a2 + v40 + 8);
  v48 = *((_BYTE *)a2 + v40 + 16);
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRetain(v43);
  sub_10000BAD4(v46, v47, v48);
  *(_QWORD *)v44 = v46;
  *((_QWORD *)v44 + 1) = v47;
  v44[16] = v48;
  v49 = *((_QWORD *)v45 + 3);
  *((_QWORD *)v44 + 3) = v49;
  v50 = a3[10];
  v51 = (char *)a1 + v50;
  v52 = (char *)a2 + v50;
  v53 = *((unsigned __int8 *)a2 + v50 + 16);
  swift_bridgeObjectRetain(v49);
  if (v53 == 255)
  {
    *(_OWORD *)v51 = *(_OWORD *)v52;
    v51[16] = v52[16];
  }
  else
  {
    v54 = *(_QWORD *)v52;
    v55 = *((_QWORD *)v52 + 1);
    sub_10000BB2C(v54, v55, v53);
    *(_QWORD *)v51 = v54;
    *((_QWORD *)v51 + 1) = v55;
    v51[16] = v53;
  }
  return a1;
}

_QWORD *sub_10009052C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  __int128 v68;

  if (a1 != a2)
  {
    sub_1000076B4((uint64_t)a1, type metadata accessor for PrimarySettingsListItemIdentifier);
    v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(a2, v6))
    {
      case 0u:
        v7 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
        v8 = a1;
        v9 = v6;
        v10 = 0;
        goto LABEL_13;
      case 1u:
        v11 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
        v8 = a1;
        v9 = v6;
        v10 = 1;
        goto LABEL_13;
      case 2u:
        v12 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
        v13 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v14 = (_QWORD *)((char *)a1 + v13);
        v15 = (_QWORD *)((char *)a2 + v13);
        *v14 = *v15;
        v16 = v15[1];
        v14[1] = v16;
        swift_bridgeObjectRetain(v16);
        v8 = a1;
        v9 = v6;
        v10 = 2;
        goto LABEL_13;
      case 3u:
        *a1 = *a2;
        v17 = a2[1];
        a1[1] = v17;
        a1[2] = a2[2];
        v18 = a2[3];
        a1[3] = v18;
        a1[4] = a2[4];
        v19 = a2[5];
        a1[5] = v19;
        a1[6] = a2[6];
        v20 = a2[7];
        a1[7] = v20;
        swift_bridgeObjectRetain(v17);
        swift_bridgeObjectRetain(v18);
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        v8 = a1;
        v9 = v6;
        v10 = 3;
        goto LABEL_13;
      case 4u:
        *a1 = *a2;
        v21 = a2[1];
        a1[1] = v21;
        a1[2] = a2[2];
        v22 = a2[3];
        a1[3] = v22;
        a1[4] = a2[4];
        v23 = a2[5];
        a1[5] = v23;
        a1[6] = a2[6];
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v22);
        swift_bridgeObjectRetain(v23);
        v8 = a1;
        v9 = v6;
        v10 = 4;
        goto LABEL_13;
      case 5u:
        *a1 = *a2;
        v24 = a2[1];
        a1[1] = v24;
        a1[2] = a2[2];
        v25 = a2[3];
        a1[3] = v25;
        v26 = (void *)a2[4];
        a1[4] = v26;
        v27 = a2[5];
        a1[5] = v27;
        v28 = a2[9];
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v25);
        v29 = v26;
        swift_bridgeObjectRetain(v27);
        if (v28)
        {
          a1[9] = v28;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v28 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v28);
        }
        else
        {
          v30 = *((_OWORD *)a2 + 4);
          *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
          *((_OWORD *)a1 + 4) = v30;
        }
        v8 = a1;
        v9 = v6;
        v10 = 5;
LABEL_13:
        swift_storeEnumTagMultiPayload(v8, v9, v10);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
        break;
    }
  }
  v31 = a3[5];
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = type metadata accessor for FLFollowUpGroupIdentity(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 24))(v32, v33, v34);
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v35 = a3[7];
  v36 = (_QWORD *)((char *)a1 + v35);
  v37 = (_QWORD *)((char *)a2 + v35);
  *v36 = *v37;
  v38 = v37[1];
  v39 = v36[1];
  v36[1] = v38;
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRelease(v39);
  v40 = a3[8];
  v41 = (_QWORD *)((char *)a1 + v40);
  v42 = (_QWORD *)((char *)a2 + v40);
  *v41 = *v42;
  v43 = v42[1];
  v44 = v41[1];
  v41[1] = v43;
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRelease(v44);
  v45 = a3[9];
  v46 = (char *)a1 + v45;
  v47 = (char *)a2 + v45;
  v48 = *(_QWORD *)((char *)a2 + v45);
  v49 = *(_QWORD *)((char *)a2 + v45 + 8);
  v50 = *((_BYTE *)a2 + v45 + 16);
  sub_10000BAD4(v48, v49, v50);
  v51 = *(_QWORD *)v46;
  v52 = *((_QWORD *)v46 + 1);
  v53 = v46[16];
  *(_QWORD *)v46 = v48;
  *((_QWORD *)v46 + 1) = v49;
  v46[16] = v50;
  sub_100007618(v51, v52, v53);
  v54 = *((_QWORD *)v47 + 3);
  v55 = *((_QWORD *)v46 + 3);
  *((_QWORD *)v46 + 3) = v54;
  swift_bridgeObjectRetain(v54);
  swift_bridgeObjectRelease(v55);
  v56 = a3[10];
  v57 = (uint64_t)a1 + v56;
  v58 = (char *)a2 + v56;
  v59 = *((unsigned __int8 *)a2 + v56 + 16);
  if (*((unsigned __int8 *)a1 + v56 + 16) == 255)
  {
    if (v59 == 255)
    {
      v68 = *(_OWORD *)v58;
      *(_BYTE *)(v57 + 16) = v58[16];
      *(_OWORD *)v57 = v68;
    }
    else
    {
      v65 = *(_QWORD *)v58;
      v66 = *((_QWORD *)v58 + 1);
      sub_10000BB2C(v65, v66, v59);
      *(_QWORD *)v57 = v65;
      *(_QWORD *)(v57 + 8) = v66;
      *(_BYTE *)(v57 + 16) = v59;
    }
  }
  else if (v59 == 255)
  {
    sub_100010D24(v57);
    v67 = v58[16];
    *(_OWORD *)v57 = *(_OWORD *)v58;
    *(_BYTE *)(v57 + 16) = v67;
  }
  else
  {
    v60 = *(_QWORD *)v58;
    v61 = *((_QWORD *)v58 + 1);
    sub_10000BB2C(v60, v61, v59);
    v62 = *(_QWORD *)v57;
    v63 = *(_QWORD *)(v57 + 8);
    *(_QWORD *)v57 = v60;
    *(_QWORD *)(v57 + 8) = v61;
    v64 = *(_BYTE *)(v57 + 16);
    *(_BYTE *)(v57 + 16) = v59;
    sub_10000BB54(v62, v63, v64);
  }
  return a1;
}

char *sub_100090978(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  char *v23;

  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
  if (EnumCaseMultiPayload == 2)
  {
    v9 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
    v10 = sub_100004FC8(&qword_10015C420);
    *(_OWORD *)&a1[*(int *)(v10 + 48)] = *(_OWORD *)&a2[*(int *)(v10 + 48)];
    swift_storeEnumTagMultiPayload(a1, v6, 2);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v11 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    v8 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload(a1, v6, 0);
  }
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for FLFollowUpGroupIdentity(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
  v16 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  *(_OWORD *)&a1[v16] = *(_OWORD *)&a2[v16];
  v17 = a3[9];
  *(_OWORD *)&a1[a3[8]] = *(_OWORD *)&a2[a3[8]];
  v18 = &a1[v17];
  v19 = &a2[v17];
  v20 = *((_OWORD *)v19 + 1);
  *(_OWORD *)v18 = *(_OWORD *)v19;
  *((_OWORD *)v18 + 1) = v20;
  v21 = a3[10];
  v22 = &a1[v21];
  v23 = &a2[v21];
  *(_OWORD *)v22 = *(_OWORD *)v23;
  v22[16] = v23[16];
  return a1;
}

char *sub_100090B1C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;

  if (a1 != a2)
  {
    sub_1000076B4((uint64_t)a1, type metadata accessor for PrimarySettingsListItemIdentifier);
    v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
    if (EnumCaseMultiPayload == 2)
    {
      v9 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      v10 = sub_100004FC8(&qword_10015C420);
      *(_OWORD *)&a1[*(int *)(v10 + 48)] = *(_OWORD *)&a2[*(int *)(v10 + 48)];
      swift_storeEnumTagMultiPayload(a1, v6, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v11 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      v8 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload(a1, v6, 0);
    }
  }
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for FLFollowUpGroupIdentity(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  v16 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v20 = *(_QWORD *)v18;
  v19 = *((_QWORD *)v18 + 1);
  v21 = *((_QWORD *)v17 + 1);
  *(_QWORD *)v17 = v20;
  *((_QWORD *)v17 + 1) = v19;
  swift_bridgeObjectRelease(v21);
  v22 = a3[8];
  v23 = &a1[v22];
  v24 = &a2[v22];
  v26 = *(_QWORD *)v24;
  v25 = *((_QWORD *)v24 + 1);
  v27 = *((_QWORD *)v23 + 1);
  *(_QWORD *)v23 = v26;
  *((_QWORD *)v23 + 1) = v25;
  swift_bridgeObjectRelease(v27);
  v28 = a3[9];
  v29 = &a1[v28];
  v30 = &a2[v28];
  LOBYTE(v28) = a2[v28 + 16];
  v31 = *(_QWORD *)v29;
  v32 = *((_QWORD *)v29 + 1);
  v33 = v29[16];
  *(_OWORD *)v29 = *(_OWORD *)v30;
  v29[16] = v28;
  sub_100007618(v31, v32, v33);
  v34 = *((_QWORD *)v29 + 3);
  *((_QWORD *)v29 + 3) = *((_QWORD *)v30 + 3);
  swift_bridgeObjectRelease(v34);
  v35 = a3[10];
  v36 = (uint64_t)&a1[v35];
  v37 = &a2[v35];
  v38 = a1[v35 + 16];
  if (v38 == 255)
    goto LABEL_13;
  v39 = v37[16];
  if (v39 == 255)
  {
    sub_100010D24(v36);
LABEL_13:
    *(_OWORD *)v36 = *(_OWORD *)v37;
    *(_BYTE *)(v36 + 16) = v37[16];
    return a1;
  }
  v40 = *(_QWORD *)v36;
  v41 = *(_QWORD *)(v36 + 8);
  *(_OWORD *)v36 = *(_OWORD *)v37;
  *(_BYTE *)(v36 + 16) = v39;
  sub_10000BB54(v40, v41, v38);
  return a1;
}

uint64_t sub_100090D58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100090D64);
}

uint64_t sub_100090D64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for FLFollowUpGroupIdentity(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 28) + 8);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_100090E10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100090E1C);
}

uint64_t sub_100090E1C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for FLFollowUpGroupIdentity(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 28) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_100090EC4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[7];

  result = type metadata accessor for PrimarySettingsListItemIdentifier(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for FLFollowUpGroupIdentity(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      v5[2] = &unk_100117F08;
      v5[3] = &unk_100117F20;
      v5[4] = &unk_100117F20;
      v5[5] = &unk_100117F38;
      v5[6] = &unk_100117F50;
      swift_initStructMetadata(a1, 256, 7, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

void sub_100090F70()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  NSString v10;
  id v11;
  id v12;
  NSString v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;

  v1 = objc_msgSend(v0, "representingBundlePath");
  if (!v1)
    return;
  v2 = v1;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v4 = v3;

  v5 = objc_msgSend(v0, "bundleIconName");
  if (!v5)
  {
    v17 = v4;
LABEL_9:
    swift_bridgeObjectRelease(v17);
    return;
  }
  v6 = v5;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v8 = v7;

  v9 = objc_allocWithZone((Class)NSBundle);
  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v4);
  v11 = objc_msgSend(v9, "initWithPath:", v10);

  if (!v11)
  {
    v17 = v8;
    goto LABEL_9;
  }
  v12 = v11;
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v8);
  v14 = objc_msgSend((id)objc_opt_self(UIImage), "imageNamed:inBundle:", v13, v12);

  if (v14)
  {
    v15 = (id)SFAppTintColor();
    if (v15)
    {
      v16 = v15;
      objc_msgSend(v14, "imageWithTintColor:", v15);

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_1000910FC()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  NSString v6;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;

  v1 = objc_msgSend(v0, "representingBundlePath");
  if (!v1)
    return 0;
  v2 = v1;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v4 = v3;

  v5 = objc_allocWithZone((Class)NSBundle);
  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v4);
  v7 = objc_msgSend(v5, "initWithPath:", v6);

  if (!v7)
    return 0;
  v8 = objc_msgSend(v7, "bundleIdentifier");
  if (!v8)
  {

    return 0;
  }
  v9 = v8;
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);

  return v10;
}

BOOL sub_1000911E4(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  _BOOL4 v15;

  sub_1000A103C(a1, a2);
  if ((v4 & 1) == 0)
    return 0;
  v5 = type metadata accessor for PrimarySettingsListLinkModel(0);
  if (*(unsigned __int8 *)(a1 + *(int *)(v5 + 20)) != *(unsigned __int8 *)(a2 + *(int *)(v5 + 20)))
    return 0;
  v6 = v5;
  v7 = *(int *)(v5 + 24);
  if ((static Text.== infix(_:_:)(*(_QWORD *)(a1 + v7), *(_QWORD *)(a1 + v7 + 8), *(unsigned __int8 *)(a1 + v7 + 16), *(_QWORD *)(a1 + v7 + 24), *(_QWORD *)(a2 + v7), *(_QWORD *)(a2 + v7 + 8), *(unsigned __int8 *)(a2 + v7 + 16), *(_QWORD *)(a2 + v7 + 24)) & 1) == 0)return 0;
  v8 = *(int *)(v6 + 28);
  v9 = *(unsigned __int8 *)(a1 + v8 + 16);
  v10 = *(unsigned __int8 *)(a2 + v8 + 16);
  if ((_DWORD)v9 != 255)
  {
    if (v10 != 255)
      __asm { BR              X11 }
    return 0;
  }
  if (v10 != 255)
    return 0;
  v11 = *(int *)(v6 + 32);
  v12 = *(unsigned __int8 *)(a1 + v11);
  v13 = *(unsigned __int8 *)(a2 + v11);
  if (v12 != 2)
  {
    v15 = (v12 & 1) == 0;
    return v13 != 2 && ((v15 ^ v13) & 1) != 0;
  }
  return v13 == 2;
}

uint64_t type metadata accessor for PrimarySettingsListLinkModel(uint64_t a1)
{
  uint64_t result;

  result = qword_10015A550;
  if (!qword_10015A550)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PrimarySettingsListLinkModel);
  return result;
}

_QWORD *sub_100091400(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  id v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(a2, v7))
    {
      case 0u:
        v8 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
        v9 = a1;
        v10 = v7;
        v11 = 0;
        goto LABEL_14;
      case 1u:
        v13 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
        v9 = a1;
        v10 = v7;
        v11 = 1;
        goto LABEL_14;
      case 2u:
        v14 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
        v15 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v16 = (_QWORD *)((char *)a1 + v15);
        v17 = (_QWORD *)((char *)a2 + v15);
        v18 = v17[1];
        *v16 = *v17;
        v16[1] = v18;
        swift_bridgeObjectRetain(v18);
        v9 = a1;
        v10 = v7;
        v11 = 2;
        goto LABEL_14;
      case 3u:
        v19 = a2[1];
        *a1 = *a2;
        a1[1] = v19;
        v20 = a2[3];
        a1[2] = a2[2];
        a1[3] = v20;
        v21 = a2[5];
        a1[4] = a2[4];
        a1[5] = v21;
        v22 = a2[7];
        a1[6] = a2[6];
        a1[7] = v22;
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v22);
        v9 = a1;
        v10 = v7;
        v11 = 3;
        goto LABEL_14;
      case 4u:
        v23 = a2[1];
        *a1 = *a2;
        a1[1] = v23;
        v24 = a2[3];
        a1[2] = a2[2];
        a1[3] = v24;
        v25 = a2[5];
        a1[4] = a2[4];
        a1[5] = v25;
        a1[6] = a2[6];
        swift_bridgeObjectRetain(v23);
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v25);
        v9 = a1;
        v10 = v7;
        v11 = 4;
        goto LABEL_14;
      case 5u:
        v26 = a2[1];
        *a1 = *a2;
        a1[1] = v26;
        v27 = a2[3];
        a1[2] = a2[2];
        a1[3] = v27;
        v29 = (void *)a2[4];
        v28 = a2[5];
        a1[4] = v29;
        a1[5] = v28;
        v30 = a2[9];
        swift_bridgeObjectRetain(v26);
        swift_bridgeObjectRetain(v27);
        v31 = v29;
        swift_bridgeObjectRetain(v28);
        if (v30)
        {
          a1[9] = v30;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v30 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v30);
        }
        else
        {
          v32 = *((_OWORD *)a2 + 4);
          *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
          *((_OWORD *)a1 + 4) = v32;
        }
        v9 = a1;
        v10 = v7;
        v11 = 5;
LABEL_14:
        swift_storeEnumTagMultiPayload(v9, v10, v11);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
        break;
    }
    v33 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    v34 = (char *)a1 + v33;
    v35 = (char *)a2 + v33;
    v36 = *(_QWORD *)((char *)a2 + v33);
    v37 = *(_QWORD *)((char *)a2 + v33 + 8);
    v38 = *((_BYTE *)a2 + v33 + 16);
    sub_10000BAD4(v36, v37, v38);
    *(_QWORD *)v34 = v36;
    *((_QWORD *)v34 + 1) = v37;
    v34[16] = v38;
    v39 = *((_QWORD *)v35 + 3);
    *((_QWORD *)v34 + 3) = v39;
    v40 = a3[7];
    v41 = (char *)a1 + v40;
    v42 = (char *)a2 + v40;
    v43 = *((unsigned __int8 *)a2 + v40 + 16);
    swift_bridgeObjectRetain(v39);
    if (v43 == 255)
    {
      *(_OWORD *)v41 = *(_OWORD *)v42;
      v41[16] = v42[16];
    }
    else
    {
      v44 = *(_QWORD *)v42;
      v45 = *((_QWORD *)v42 + 1);
      sub_10000BB2C(v44, v45, v43);
      *(_QWORD *)v41 = v44;
      *((_QWORD *)v41 + 1) = v45;
      v41[16] = v43;
    }
    *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  }
  return a1;
}

uint64_t sub_100091718(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  int v11;

  v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(a1, v4))
  {
    case 0u:
    case 1u:
      v5 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
      break;
    case 2u:
      v6 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
      v7 = sub_100004FC8(&qword_10015C420);
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v7 + 48) + 8));
      break;
    case 3u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
      break;
    case 4u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      break;
    case 5u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));

      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      if (*(_QWORD *)(a1 + 72))
        sub_100005474((_QWORD *)(a1 + 48));
      break;
    default:
      break;
  }
  v8 = a1 + *(int *)(a2 + 24);
  sub_100007618(*(_QWORD *)v8, *(_QWORD *)(v8 + 8), *(_BYTE *)(v8 + 16));
  result = swift_bridgeObjectRelease(*(_QWORD *)(v8 + 24));
  v10 = a1 + *(int *)(a2 + 28);
  v11 = *(unsigned __int8 *)(v10 + 16);
  if (v11 != 255)
    return sub_10000BB54(*(_QWORD *)v10, *(_QWORD *)(v10 + 8), v11);
  return result;
}

_QWORD *sub_100091888(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;

  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(a2, v6))
  {
    case 0u:
      v7 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 0;
      goto LABEL_12;
    case 1u:
      v11 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      v8 = a1;
      v9 = v6;
      v10 = 1;
      goto LABEL_12;
    case 2u:
      v12 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
      v13 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
      v14 = (_QWORD *)((char *)a1 + v13);
      v15 = (_QWORD *)((char *)a2 + v13);
      v16 = v15[1];
      *v14 = *v15;
      v14[1] = v16;
      swift_bridgeObjectRetain(v16);
      v8 = a1;
      v9 = v6;
      v10 = 2;
      goto LABEL_12;
    case 3u:
      v17 = a2[1];
      *a1 = *a2;
      a1[1] = v17;
      v18 = a2[3];
      a1[2] = a2[2];
      a1[3] = v18;
      v19 = a2[5];
      a1[4] = a2[4];
      a1[5] = v19;
      v20 = a2[7];
      a1[6] = a2[6];
      a1[7] = v20;
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v20);
      v8 = a1;
      v9 = v6;
      v10 = 3;
      goto LABEL_12;
    case 4u:
      v21 = a2[1];
      *a1 = *a2;
      a1[1] = v21;
      v22 = a2[3];
      a1[2] = a2[2];
      a1[3] = v22;
      v23 = a2[5];
      a1[4] = a2[4];
      a1[5] = v23;
      a1[6] = a2[6];
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v23);
      v8 = a1;
      v9 = v6;
      v10 = 4;
      goto LABEL_12;
    case 5u:
      v24 = a2[1];
      *a1 = *a2;
      a1[1] = v24;
      v25 = a2[3];
      a1[2] = a2[2];
      a1[3] = v25;
      v27 = (void *)a2[4];
      v26 = a2[5];
      a1[4] = v27;
      a1[5] = v26;
      v28 = a2[9];
      swift_bridgeObjectRetain(v24);
      swift_bridgeObjectRetain(v25);
      v29 = v27;
      swift_bridgeObjectRetain(v26);
      if (v28)
      {
        a1[9] = v28;
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v28 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v28);
      }
      else
      {
        v30 = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 4) = v30;
      }
      v8 = a1;
      v9 = v6;
      v10 = 5;
LABEL_12:
      swift_storeEnumTagMultiPayload(v8, v9, v10);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      break;
  }
  v31 = a3[6];
  *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = *(_QWORD *)((char *)a2 + v31);
  v35 = *(_QWORD *)((char *)a2 + v31 + 8);
  v36 = *((_BYTE *)a2 + v31 + 16);
  sub_10000BAD4(v34, v35, v36);
  *(_QWORD *)v32 = v34;
  *((_QWORD *)v32 + 1) = v35;
  v32[16] = v36;
  v37 = *((_QWORD *)v33 + 3);
  *((_QWORD *)v32 + 3) = v37;
  v38 = a3[7];
  v39 = (char *)a1 + v38;
  v40 = (char *)a2 + v38;
  v41 = *((unsigned __int8 *)a2 + v38 + 16);
  swift_bridgeObjectRetain(v37);
  if (v41 == 255)
  {
    *(_OWORD *)v39 = *(_OWORD *)v40;
    v39[16] = v40[16];
  }
  else
  {
    v42 = *(_QWORD *)v40;
    v43 = *((_QWORD *)v40 + 1);
    sub_10000BB2C(v42, v43, v41);
    *(_QWORD *)v39 = v42;
    *((_QWORD *)v39 + 1) = v43;
    v39[16] = v41;
  }
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  return a1;
}

_QWORD *sub_100091B74(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  __int128 v54;

  if (a1 != a2)
  {
    sub_100013014((uint64_t)a1);
    v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(a2, v6))
    {
      case 0u:
        v7 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
        v8 = a1;
        v9 = v6;
        v10 = 0;
        goto LABEL_13;
      case 1u:
        v11 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
        v8 = a1;
        v9 = v6;
        v10 = 1;
        goto LABEL_13;
      case 2u:
        v12 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
        v13 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v14 = (_QWORD *)((char *)a1 + v13);
        v15 = (_QWORD *)((char *)a2 + v13);
        *v14 = *v15;
        v16 = v15[1];
        v14[1] = v16;
        swift_bridgeObjectRetain(v16);
        v8 = a1;
        v9 = v6;
        v10 = 2;
        goto LABEL_13;
      case 3u:
        *a1 = *a2;
        v17 = a2[1];
        a1[1] = v17;
        a1[2] = a2[2];
        v18 = a2[3];
        a1[3] = v18;
        a1[4] = a2[4];
        v19 = a2[5];
        a1[5] = v19;
        a1[6] = a2[6];
        v20 = a2[7];
        a1[7] = v20;
        swift_bridgeObjectRetain(v17);
        swift_bridgeObjectRetain(v18);
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        v8 = a1;
        v9 = v6;
        v10 = 3;
        goto LABEL_13;
      case 4u:
        *a1 = *a2;
        v21 = a2[1];
        a1[1] = v21;
        a1[2] = a2[2];
        v22 = a2[3];
        a1[3] = v22;
        a1[4] = a2[4];
        v23 = a2[5];
        a1[5] = v23;
        a1[6] = a2[6];
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v22);
        swift_bridgeObjectRetain(v23);
        v8 = a1;
        v9 = v6;
        v10 = 4;
        goto LABEL_13;
      case 5u:
        *a1 = *a2;
        v24 = a2[1];
        a1[1] = v24;
        a1[2] = a2[2];
        v25 = a2[3];
        a1[3] = v25;
        v26 = (void *)a2[4];
        a1[4] = v26;
        v27 = a2[5];
        a1[5] = v27;
        v28 = a2[9];
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v25);
        v29 = v26;
        swift_bridgeObjectRetain(v27);
        if (v28)
        {
          a1[9] = v28;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v28 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v28);
        }
        else
        {
          v30 = *((_OWORD *)a2 + 4);
          *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
          *((_OWORD *)a1 + 4) = v30;
        }
        v8 = a1;
        v9 = v6;
        v10 = 5;
LABEL_13:
        swift_storeEnumTagMultiPayload(v8, v9, v10);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
        break;
    }
  }
  *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
  v31 = a3[6];
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = *(_QWORD *)((char *)a2 + v31);
  v35 = *(_QWORD *)((char *)a2 + v31 + 8);
  v36 = *((_BYTE *)a2 + v31 + 16);
  sub_10000BAD4(v34, v35, v36);
  v37 = *(_QWORD *)v32;
  v38 = *((_QWORD *)v32 + 1);
  v39 = v32[16];
  *(_QWORD *)v32 = v34;
  *((_QWORD *)v32 + 1) = v35;
  v32[16] = v36;
  sub_100007618(v37, v38, v39);
  v40 = *((_QWORD *)v33 + 3);
  v41 = *((_QWORD *)v32 + 3);
  *((_QWORD *)v32 + 3) = v40;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRelease(v41);
  v42 = a3[7];
  v43 = (uint64_t)a1 + v42;
  v44 = (char *)a2 + v42;
  v45 = *((unsigned __int8 *)a2 + v42 + 16);
  if (*((unsigned __int8 *)a1 + v42 + 16) == 255)
  {
    if (v45 == 255)
    {
      v54 = *(_OWORD *)v44;
      *(_BYTE *)(v43 + 16) = v44[16];
      *(_OWORD *)v43 = v54;
    }
    else
    {
      v51 = *(_QWORD *)v44;
      v52 = *((_QWORD *)v44 + 1);
      sub_10000BB2C(v51, v52, v45);
      *(_QWORD *)v43 = v51;
      *(_QWORD *)(v43 + 8) = v52;
      *(_BYTE *)(v43 + 16) = v45;
    }
  }
  else if (v45 == 255)
  {
    sub_100010D24(v43);
    v53 = v44[16];
    *(_OWORD *)v43 = *(_OWORD *)v44;
    *(_BYTE *)(v43 + 16) = v53;
  }
  else
  {
    v46 = *(_QWORD *)v44;
    v47 = *((_QWORD *)v44 + 1);
    sub_10000BB2C(v46, v47, v45);
    v48 = *(_QWORD *)v43;
    v49 = *(_QWORD *)(v43 + 8);
    *(_QWORD *)v43 = v46;
    *(_QWORD *)(v43 + 8) = v47;
    v50 = *(_BYTE *)(v43 + 16);
    *(_BYTE *)(v43 + 16) = v45;
    sub_10000BB54(v48, v49, v50);
  }
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  return a1;
}

char *sub_100091F40(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;

  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
  if (EnumCaseMultiPayload == 2)
  {
    v9 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
    v10 = sub_100004FC8(&qword_10015C420);
    *(_OWORD *)&a1[*(int *)(v10 + 48)] = *(_OWORD *)&a2[*(int *)(v10 + 48)];
    swift_storeEnumTagMultiPayload(a1, v6, 2);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v11 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    v8 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload(a1, v6, 0);
  }
  v12 = a3[6];
  a1[a3[5]] = a2[a3[5]];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = *((_OWORD *)v14 + 1);
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *((_OWORD *)v13 + 1) = v15;
  v16 = a3[7];
  v17 = a3[8];
  v18 = &a1[v16];
  v19 = &a2[v16];
  *(_OWORD *)v18 = *(_OWORD *)v19;
  v18[16] = v19[16];
  a1[v17] = a2[v17];
  return a1;
}

char *sub_1000920A4(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;

  if (a1 != a2)
  {
    sub_100013014((uint64_t)a1);
    v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
    if (EnumCaseMultiPayload == 2)
    {
      v9 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      v10 = sub_100004FC8(&qword_10015C420);
      *(_OWORD *)&a1[*(int *)(v10 + 48)] = *(_OWORD *)&a2[*(int *)(v10 + 48)];
      swift_storeEnumTagMultiPayload(a1, v6, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v11 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      v8 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload(a1, v6, 0);
    }
  }
  v12 = a3[6];
  a1[a3[5]] = a2[a3[5]];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = a2[v12 + 16];
  v16 = *(_QWORD *)&a1[v12];
  v17 = *(_QWORD *)&a1[v12 + 8];
  v18 = a1[v12 + 16];
  *(_OWORD *)v13 = *(_OWORD *)&a2[v12];
  v13[16] = v15;
  sub_100007618(v16, v17, v18);
  v19 = *((_QWORD *)v13 + 3);
  *((_QWORD *)v13 + 3) = *((_QWORD *)v14 + 3);
  swift_bridgeObjectRelease(v19);
  v20 = a3[7];
  v21 = (uint64_t)&a1[v20];
  v22 = &a2[v20];
  v23 = a1[v20 + 16];
  if (v23 == 255)
    goto LABEL_13;
  v24 = v22[16];
  if (v24 == 255)
  {
    sub_100010D24(v21);
LABEL_13:
    *(_OWORD *)v21 = *(_OWORD *)v22;
    *(_BYTE *)(v21 + 16) = v22[16];
    goto LABEL_14;
  }
  v25 = *(_QWORD *)v21;
  v26 = *(_QWORD *)(v21 + 8);
  *(_OWORD *)v21 = *(_OWORD *)v22;
  *(_BYTE *)(v21 + 16) = v24;
  sub_10000BB54(v25, v26, v23);
LABEL_14:
  a1[a3[8]] = a2[a3[8]];
  return a1;
}

uint64_t sub_100092280(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10009228C);
}

uint64_t sub_10009228C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 24);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10009230C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100092318);
}

uint64_t sub_100092318(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 24) = (a2 - 1);
  return result;
}

uint64_t sub_100092394(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  result = type metadata accessor for PrimarySettingsListItemIdentifier(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100118070;
    v4[2] = &unk_100118088;
    v4[3] = &unk_1001180A0;
    v4[4] = &unk_1001180B8;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100092424(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char v7;
  _QWORD v9[2];
  char v10;
  _BYTE v11[24];

  v3 = type metadata accessor for FollowUpInformationProviderSnapshot(0);
  __chkstk_darwin(v3);
  v5 = (_QWORD *)((char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = v1 + OBJC_IVAR____TtC11SettingsApp29FollowUpListElementsGenerator_currentSnapshot;
  swift_beginAccess(v1 + OBJC_IVAR____TtC11SettingsApp29FollowUpListElementsGenerator_currentSnapshot, v11, 0, 0);
  sub_1000076F0(v6, (uint64_t)v5, type metadata accessor for FollowUpInformationProviderSnapshot);
  v7 = sub_10000B170(a1, v5);
  sub_1000076B4((uint64_t)v5, type metadata accessor for FollowUpInformationProviderSnapshot);
  if ((v7 & 1) == 0)
  {
    sub_100007C2C((_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 40));
    v9[0] = "Follow Ups";
    v9[1] = 10;
    v10 = 2;
    PassthroughSubject.send(_:)(v9);
  }
  swift_beginAccess(v6, v9, 33, 0);
  sub_100096EB0((uint64_t)a1, v6);
  return swift_endAccess(v9);
}

_QWORD *sub_100092548()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[24];
  _QWORD v31[5];

  swift_beginAccess(v0 + 80, v30, 1, 0);
  v1 = *(_QWORD *)(v0 + 80);
  v27 = v0;
  if ((v1 & 0xC000000000000001) != 0)
  {
    if (v1 < 0)
      v2 = *(_QWORD *)(v0 + 80);
    else
      v2 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = type metadata accessor for AnyCancellable(0);
    v5 = sub_100096FAC();
    result = Set.Iterator.init(_cocoa:)(v31, v3, v4, v5);
    v1 = v31[0];
    v7 = v31[1];
    v8 = v31[2];
    v9 = v31[3];
    v10 = v31[4];
  }
  else
  {
    v11 = -1 << *(_BYTE *)(v1 + 32);
    v7 = v1 + 56;
    v8 = ~v11;
    v12 = -v11;
    if (v12 < 64)
      v13 = ~(-1 << v12);
    else
      v13 = -1;
    v10 = v13 & *(_QWORD *)(v1 + 56);
    result = (_QWORD *)swift_bridgeObjectRetain(v1);
    v9 = 0;
  }
  v14 = (unint64_t)(v8 + 64) >> 6;
  if (v1 < 0)
    goto LABEL_13;
  while (1)
  {
    if (v10)
    {
      v15 = (v10 - 1) & v10;
      v16 = __clz(__rbit64(v10)) | (v9 << 6);
      v17 = v9;
      goto LABEL_30;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
      break;
    if (v22 >= v14)
      goto LABEL_33;
    v23 = *(_QWORD *)(v7 + 8 * v22);
    v17 = v9 + 1;
    if (!v23)
    {
      v17 = v9 + 2;
      if (v9 + 2 >= v14)
        goto LABEL_33;
      v23 = *(_QWORD *)(v7 + 8 * v17);
      if (!v23)
      {
        v17 = v9 + 3;
        if (v9 + 3 >= v14)
          goto LABEL_33;
        v23 = *(_QWORD *)(v7 + 8 * v17);
        if (!v23)
        {
          v17 = v9 + 4;
          if (v9 + 4 >= v14)
            goto LABEL_33;
          v23 = *(_QWORD *)(v7 + 8 * v17);
          if (!v23)
          {
            v24 = v9 + 5;
            while (v14 != v24)
            {
              v23 = *(_QWORD *)(v7 + 8 * v24++);
              if (v23)
              {
                v17 = v24 - 1;
                goto LABEL_29;
              }
            }
LABEL_33:
            sub_100007C50(v1);
            v25 = *(_QWORD *)(v27 + 80);
            *(_QWORD *)(v27 + 80) = &_swiftEmptySetSingleton;
            swift_bridgeObjectRelease(v25);
            v26 = *(_QWORD *)(v27 + 72);
            *(_QWORD *)(v27 + 72) = 0;
            swift_release(v26);
            sub_100005474((_QWORD *)(v27 + 16));

            swift_release(*(_QWORD *)(v27 + 64));
            swift_release(*(_QWORD *)(v27 + 72));
            swift_bridgeObjectRelease(*(_QWORD *)(v27 + 80));
            sub_1000076B4(v27 + OBJC_IVAR____TtC11SettingsApp29FollowUpListElementsGenerator_currentSnapshot, type metadata accessor for FollowUpInformationProviderSnapshot);
            return (_QWORD *)v27;
          }
        }
      }
    }
LABEL_29:
    v15 = (v23 - 1) & v23;
    v16 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_30:
    v21 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v16);
    swift_retain(v21);
    if (!v21)
      goto LABEL_33;
    while (1)
    {
      AnyCancellable.cancel()();
      result = (_QWORD *)swift_release(v21);
      v9 = v17;
      v10 = v15;
      if ((v1 & 0x8000000000000000) == 0)
        break;
LABEL_13:
      v18 = __CocoaSet.Iterator.next()(result);
      if (v18)
      {
        v19 = v18;
        v28 = v18;
        v20 = type metadata accessor for AnyCancellable(0);
        swift_unknownObjectRetain(v19);
        swift_dynamicCast(&v29, &v28, (char *)&type metadata for Swift.AnyObject + 8, v20, 7);
        v21 = v29;
        swift_unknownObjectRelease(v19);
        v17 = v9;
        v15 = v10;
        if (v21)
          continue;
      }
      goto LABEL_33;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100092814()
{
  uint64_t v0;

  sub_100092548();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100092838()
{
  return type metadata accessor for FollowUpListElementsGenerator(0);
}

uint64_t type metadata accessor for FollowUpListElementsGenerator(uint64_t a1)
{
  uint64_t result;

  result = qword_10015A5C0;
  if (!qword_10015A5C0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FollowUpListElementsGenerator);
  return result;
}

uint64_t sub_10009287C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = "(";
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[3] = &unk_100118168;
  v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for FollowUpInformationProviderSnapshot(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 6, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_100092928(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  char v14[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v14, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (!Strong)
    return 0;
  v3 = Strong;
  v4 = (char *)*(id *)(Strong + 56);
  swift_release(v3);
  v5 = *(_QWORD *)&v4[OBJC_IVAR____TtC11SettingsApp33PrimaryAppleAccountStatusObserver_accountStatus];
  v6 = *(_QWORD *)&v4[OBJC_IVAR____TtC11SettingsApp33PrimaryAppleAccountStatusObserver_accountStatus + 8];
  v7 = *(_QWORD *)&v4[OBJC_IVAR____TtC11SettingsApp33PrimaryAppleAccountStatusObserver_accountStatus + 16];
  v8 = *(_QWORD *)&v4[OBJC_IVAR____TtC11SettingsApp33PrimaryAppleAccountStatusObserver_accountStatus + 24];
  v9 = *(_QWORD *)&v4[OBJC_IVAR____TtC11SettingsApp33PrimaryAppleAccountStatusObserver_accountStatus + 32];
  v10 = *(void **)&v4[OBJC_IVAR____TtC11SettingsApp33PrimaryAppleAccountStatusObserver_accountStatus + 40];
  sub_100096F30(v5, v6, v7, v8, v9, v10);
  sub_1000A63C4(v4);

  if (!v6)
    return 0;
  v11 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000) == 0)
    v11 = v7 & 0xFFFFFFFFFFFFLL;
  if (v11)
  {
    swift_bridgeObjectRetain(v8);
    v12 = v7;
  }
  else
  {
    v12 = 0;
  }
  sub_100096F68(v5, v6, v7, v8, v9, v10);
  return v12;
}

_QWORD *sub_100092A44(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _BYTE *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _BYTE v15[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v15, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    v4 = *(_QWORD *)(Strong + 64);
    swift_retain(v4);
    swift_release(v3);
    v5 = *(_QWORD **)(v4 + 16);
    swift_bridgeObjectRetain(v5);
    sub_1000C1E48(v4);
    swift_release(v4);
    v6 = v5[2];
    if (v6)
      goto LABEL_3;
LABEL_13:
    v8 = _swiftEmptyArrayStorage;
    goto LABEL_14;
  }
  v5 = _swiftEmptyArrayStorage;
  v6 = _swiftEmptyArrayStorage[2];
  if (!v6)
    goto LABEL_13;
LABEL_3:
  swift_bridgeObjectRetain(v5);
  v7 = v5 + 12;
  v8 = _swiftEmptyArrayStorage;
  do
  {
    if ((*v7 & 1) == 0)
    {
      v11 = *((_QWORD *)v7 - 8);
      v10 = *((_QWORD *)v7 - 7);
      swift_bridgeObjectRetain(v10);
      if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
        v8 = sub_100052940(0, v8[2] + 1, 1, v8);
      v13 = v8[2];
      v12 = v8[3];
      if (v13 >= v12 >> 1)
        v8 = sub_100052940((_QWORD *)(v12 > 1), v13 + 1, 1, v8);
      v8[2] = v13 + 1;
      v9 = &v8[2 * v13];
      v9[4] = v11;
      v9[5] = v10;
    }
    v7 += 72;
    --v6;
  }
  while (v6);
  swift_bridgeObjectRelease(v5);
LABEL_14:
  swift_bridgeObjectRelease(v5);
  return v8;
}

uint64_t sub_100092BAC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[24];

  v3 = sub_100004FC8(&qword_10015C5A0);
  __chkstk_darwin(v3);
  v5 = &v13[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a2 += 16;
  swift_beginAccess(a2, v13, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v7 = result;
    v8 = *(_QWORD *)(result + 72);
    if (v8)
    {
      v9 = type metadata accessor for TaskPriority(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v5, 1, 1, v9);
      v10 = (_QWORD *)swift_allocObject(&unk_10014B4C8, 48, 7);
      v10[2] = 0;
      v10[3] = 0;
      v10[4] = v8;
      v10[5] = v7;
      swift_retain_n(v8, 2);
      swift_retain(v7);
      v11 = sub_10004CF9C((uint64_t)v5, (uint64_t)&unk_10015A678, (uint64_t)v10);
      swift_release(v8);
      swift_release(v11);
      sub_10000BA50((uint64_t)v5, &qword_10015C5A0);
    }
    return swift_release(v7);
  }
  return result;
}

uint64_t sub_100092CD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;

  v5[30] = a4;
  v5[31] = a5;
  v6 = sub_100004FC8(&qword_10015C5A0);
  v5[32] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for FollowUpInformationProviderSnapshot(0);
  v5[33] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[34] = v8;
  v9 = *(_QWORD *)(v8 + 64);
  v5[35] = v9;
  v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[36] = swift_task_alloc(v10);
  v5[37] = swift_task_alloc(v10);
  v11 = (*(_QWORD *)(*(_QWORD *)(sub_100004FC8(&qword_100157100) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[38] = swift_task_alloc(v11);
  v5[39] = swift_task_alloc(v11);
  v5[40] = swift_task_alloc(v11);
  v12 = type metadata accessor for PrimarySettingsListItemViewType(0);
  v5[41] = v12;
  v13 = (*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[42] = swift_task_alloc(v13);
  v5[43] = swift_task_alloc(v13);
  v5[44] = swift_task_alloc(v13);
  v5[45] = swift_task_alloc(v13);
  v5[46] = swift_task_alloc(v13);
  v5[47] = swift_task_alloc(v13);
  v14 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v5[48] = v14;
  v15 = (*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[49] = swift_task_alloc(v15);
  v5[50] = swift_task_alloc(v15);
  v5[51] = swift_task_alloc(v15);
  v5[52] = swift_task_alloc(v15);
  v5[53] = swift_task_alloc(v15);
  v5[54] = swift_task_alloc(v15);
  v16 = type metadata accessor for FLRenderStyle(0);
  v5[55] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v5[56] = v17;
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[57] = swift_task_alloc(v18);
  v5[58] = swift_task_alloc(v18);
  v19 = (*(_QWORD *)(*(_QWORD *)(sub_100004FC8((uint64_t *)&unk_100156F00) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[59] = swift_task_alloc(v19);
  v5[60] = swift_task_alloc(v19);
  v5[61] = swift_task_alloc(v19);
  v5[62] = swift_task_alloc(v19);
  v5[63] = swift_task_alloc(v19);
  v5[64] = swift_task_alloc(v19);
  v20 = type metadata accessor for PrimarySettingsListItemModel(0);
  v5[65] = v20;
  v21 = *(_QWORD *)(v20 - 8);
  v5[66] = v21;
  v22 = (*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[67] = swift_task_alloc(v22);
  v5[68] = swift_task_alloc(v22);
  v5[69] = swift_task_alloc(v22);
  v5[70] = swift_task_alloc(v22);
  v5[71] = swift_task_alloc(v22);
  v5[72] = swift_task_alloc(v22);
  v5[73] = swift_task_alloc(v22);
  v5[74] = swift_task_alloc(v22);
  v5[75] = swift_task_alloc(v22);
  v5[76] = swift_task_alloc(v22);
  v5[77] = swift_task_alloc(v22);
  v5[78] = swift_task_alloc(v22);
  v23 = (*(_QWORD *)(*(_QWORD *)(sub_100004FC8(&qword_10015C8E0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[79] = swift_task_alloc(v23);
  v5[80] = swift_task_alloc(v23);
  v24 = type metadata accessor for FLFollowUpInformation(0);
  v5[81] = v24;
  v25 = *(_QWORD *)(v24 - 8);
  v5[82] = v25;
  v26 = (*(_QWORD *)(v25 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[83] = swift_task_alloc(v26);
  v5[84] = swift_task_alloc(v26);
  v5[85] = swift_task_alloc(v26);
  v5[86] = swift_task_alloc(v26);
  v5[87] = swift_task_alloc(v26);
  v5[88] = swift_task_alloc(v26);
  v5[89] = swift_task_alloc(v26);
  return swift_task_switch(sub_10009306C, 0, 0);
}

uint64_t sub_10009306C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v0 + 720) = v1;
  *(_QWORD *)(v0 + 728) = static MainActor.shared.getter(v1);
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000930D8, v2, v3);
}

uint64_t sub_1000930D8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_release(*(_QWORD *)(v0 + 728));
  *(_QWORD *)(v0 + 736) = FLFollowUpModelObserver.primaryAppleAccountFollowUps.getter(v1);
  return swift_task_switch(sub_100093120, 0, 0);
}

uint64_t sub_100093120()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD, _QWORD, _QWORD);
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t result;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int (*v67)(uint64_t, uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t (*v73)();
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t (*v83)(_QWORD, _QWORD, _QWORD);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v1 = *(_QWORD *)(v0 + 736);
  v2 = *(_QWORD *)(v1 + 16);
  v84 = *(_QWORD *)(v0 + 656);
  if (v2)
  {
    v85 = *(_QWORD *)(v0 + 528);
    v79 = *(_QWORD *)(v0 + 520);
    v3 = v1 + ((*(unsigned __int8 *)(v84 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80));
    v81 = *(_QWORD *)(v84 + 72);
    v82 = *(_QWORD *)(v0 + 448);
    v4 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v84 + 16);
    v80 = enum case for FLRenderStyle.standard(_:);
    v78 = *(_QWORD *)(v0 + 736);
    swift_bridgeObjectRetain(v1);
    v5 = _swiftEmptyArrayStorage;
    v77 = v3;
    v83 = v4;
    do
    {
      v86 = v2;
      v7 = *(_QWORD *)(v0 + 456);
      v6 = *(_QWORD *)(v0 + 464);
      v8 = *(_QWORD *)(v0 + 440);
      v9 = v4(*(_QWORD *)(v0 + 704), v3, *(_QWORD *)(v0 + 648));
      FLFollowUpInformation.renderStyle.getter(v9);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v82 + 104))(v7, v80, v8);
      v10 = static FLRenderStyle.== infix(_:_:)(v6, v7);
      v11 = *(void (**)(uint64_t, uint64_t))(v82 + 8);
      v11(v7, v8);
      v11(v6, v8);
      if ((v10 & 1) != 0)
      {
        v12 = *(_QWORD *)(v0 + 432);
        v13 = *(_QWORD *)(v0 + 384);
        v4(v12, *(_QWORD *)(v0 + 704), *(_QWORD *)(v0 + 648));
        v14 = swift_storeEnumTagMultiPayload(v12, v13, 0);
        v15 = FLFollowUpInformation.badgeValue.getter(v14);
        v16 = *(_QWORD *)(v0 + 432);
        v17 = *(_QWORD *)(v0 + 376);
        if ((v18 & 1) != 0)
        {
          v34 = sub_1000076F0(v16, *(_QWORD *)(v0 + 376), type metadata accessor for PrimarySettingsListItemIdentifier);
          *(_QWORD *)(v0 + 176) = FLFollowUpInformation.title.getter(v34);
          *(_QWORD *)(v0 + 184) = v35;
          v36 = sub_100008A5C();
          v37 = Text.init<A>(_:)(v0 + 176, &type metadata for String, v36);
          v39 = v38;
          v41 = v40;
          v43 = v42;
          v44 = (int *)type metadata accessor for PrimarySettingsListImagelessLinkModel(0);
          v30 = v44[7];
          *(_BYTE *)(v17 + v44[5]) = 0;
          v45 = v17 + v44[6];
          *(_QWORD *)v45 = v37;
          *(_QWORD *)(v45 + 8) = v39;
          *(_BYTE *)(v45 + 16) = v41 & 1;
          *(_QWORD *)(v45 + 24) = v43;
          v32 = 4;
        }
        else
        {
          v19 = sub_1000076F0(v16, *(_QWORD *)(v0 + 376), type metadata accessor for PrimarySettingsListItemIdentifier);
          *(_QWORD *)(v0 + 192) = FLFollowUpInformation.title.getter(v19);
          *(_QWORD *)(v0 + 200) = v20;
          v21 = sub_100008A5C();
          v22 = Text.init<A>(_:)(v0 + 192, &type metadata for String, v21);
          v24 = v23;
          v26 = v25;
          v28 = v27;
          v29 = (int *)type metadata accessor for PrimarySettingsListBadgedImagelessLinkModel(0);
          v30 = v29[8];
          *(_BYTE *)(v17 + v29[5]) = 0;
          v31 = v17 + v29[6];
          *(_QWORD *)v31 = v22;
          *(_QWORD *)(v31 + 8) = v24;
          *(_BYTE *)(v31 + 16) = v26 & 1;
          *(_QWORD *)(v31 + 24) = v28;
          *(_QWORD *)(v17 + v29[7]) = v15;
          v32 = 5;
        }
        v46 = *(_QWORD *)(v0 + 512);
        v47 = *(_QWORD *)(v0 + 432);
        v48 = *(_QWORD *)(v0 + 376);
        v49 = *(_QWORD *)(v0 + 328);
        *(_BYTE *)(v48 + v30) = 0;
        swift_storeEnumTagMultiPayload(v48, v49, v32);
        sub_1000076F0(v47, v46, type metadata accessor for PrimarySettingsListItemIdentifier);
        sub_100007670(v48, v46 + *(int *)(v79 + 20), type metadata accessor for PrimarySettingsListItemViewType);
        sub_1000076B4(v47, type metadata accessor for PrimarySettingsListItemIdentifier);
        v33 = 0;
      }
      else
      {
        v33 = 1;
      }
      v50 = *(_QWORD *)(v0 + 704);
      v51 = *(_QWORD *)(v0 + 648);
      v52 = *(_QWORD *)(v0 + 520);
      v53 = *(_QWORD *)(v0 + 512);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v85 + 56))(v53, v33, 1, v52);
      (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v50, v51);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v85 + 48))(v53, 1, v52) == 1)
      {
        sub_10000BA50(*(_QWORD *)(v0 + 512), (uint64_t *)&unk_100156F00);
        v4 = v83;
      }
      else
      {
        v54 = *(_QWORD *)(v0 + 624);
        v55 = *(_QWORD *)(v0 + 616);
        sub_100007670(*(_QWORD *)(v0 + 512), v54, type metadata accessor for PrimarySettingsListItemModel);
        sub_100007670(v54, v55, type metadata accessor for PrimarySettingsListItemModel);
        v4 = v83;
        if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
          v5 = (_QWORD *)sub_100052720(0, v5[2] + 1, 1, (unint64_t)v5);
        v57 = v5[2];
        v56 = v5[3];
        if (v57 >= v56 >> 1)
          v5 = (_QWORD *)sub_100052720(v56 > 1, v57 + 1, 1, (unint64_t)v5);
        v58 = *(_QWORD *)(v0 + 616);
        v5[2] = v57 + 1;
        sub_100007670(v58, (uint64_t)v5+ ((*(unsigned __int8 *)(v85 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80))+ *(_QWORD *)(v85 + 72) * v57, type metadata accessor for PrimarySettingsListItemModel);
      }
      v3 += v81;
      v2 = v86 - 1;
    }
    while (v86 != 1);
    result = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 736));
    if (!*(_QWORD *)(v78 + 16))
    {
      __break(1u);
      return result;
    }
    v60 = *(_QWORD *)(v0 + 656);
    v61 = *(_QWORD *)(v0 + 648);
    v62 = *(_QWORD *)(v0 + 640);
    v4(v62, v77, v61);
    v63 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v60 + 56);
    v63(v62, 0, 1, v61);
  }
  else
  {
    v63 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v84 + 56);
    v63(*(_QWORD *)(v0 + 640), 1, 1, *(_QWORD *)(v0 + 648));
    v5 = _swiftEmptyArrayStorage;
  }
  *(_QWORD *)(v0 + 752) = v5;
  *(_QWORD *)(v0 + 744) = v63;
  v64 = *(_QWORD *)(v0 + 656);
  v65 = *(_QWORD *)(v0 + 648);
  v66 = *(_QWORD *)(v0 + 640);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 736));
  v67 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48);
  *(_QWORD *)(v0 + 760) = v67;
  if (v67(v66, 1, v65) == 1)
  {
    v68 = sub_10000BA50(*(_QWORD *)(v0 + 640), &qword_10015C8E0);
    *(_OWORD *)(v0 + 784) = 0u;
    v69 = *(_QWORD *)(v0 + 720);
    *(_QWORD *)(v0 + 800) = static MainActor.shared.getter(v68);
    v70 = dispatch thunk of Actor.unownedExecutor.getter(v69, &protocol witness table for MainActor);
    v72 = v71;
    v73 = sub_1000937C0;
  }
  else
  {
    v74 = *(_QWORD *)(v0 + 720);
    v75 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 656) + 32))(*(_QWORD *)(v0 + 712), *(_QWORD *)(v0 + 640), *(_QWORD *)(v0 + 648));
    *(_QWORD *)(v0 + 768) = static MainActor.shared.getter(v75);
    v70 = dispatch thunk of Actor.unownedExecutor.getter(v74, &protocol witness table for MainActor);
    v72 = v76;
    v73 = sub_100093698;
  }
  return swift_task_switch(v73, v70, v72);
}

uint64_t sub_100093698()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[89];
  swift_release(v0[96]);
  v0[97] = FLFollowUpModelObserver.followUpGroup(with:)(v1);
  return swift_task_switch(sub_1000936E8, 0, 0);
}

uint64_t sub_1000936E8()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 776);
  if (!v1)
    goto LABEL_5;
  v2 = objc_msgSend(*(id *)(v0 + 776), "footerText");
  if (!v2)
  {
    swift_unknownObjectRelease(v1);
LABEL_5:
    v4 = 0;
    v6 = 0;
    goto LABEL_6;
  }
  v3 = v2;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v6 = v5;
  swift_unknownObjectRelease(v1);

LABEL_6:
  v7 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 656) + 8))(*(_QWORD *)(v0 + 712), *(_QWORD *)(v0 + 648));
  *(_QWORD *)(v0 + 792) = v6;
  *(_QWORD *)(v0 + 784) = v4;
  v8 = *(_QWORD *)(v0 + 720);
  *(_QWORD *)(v0 + 800) = static MainActor.shared.getter(v7);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v8, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000937C0, v9, v10);
}

uint64_t sub_1000937C0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_release(*(_QWORD *)(v0 + 800));
  *(_QWORD *)(v0 + 808) = FLFollowUpModelObserver.appleServicesFollowUps.getter(v1);
  return swift_task_switch(sub_100093808, 0, 0);
}

uint64_t sub_100093808()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  int v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t result;
  uint64_t v62;
  unsigned int (*v63)(uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t (*v85)(uint64_t, uint64_t, _QWORD);

  v1 = *(_QWORD *)(v0 + 808);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v83 = *(_QWORD *)(v0 + 656);
    v84 = *(_QWORD *)(v0 + 528);
    v79 = *(_QWORD *)(v0 + 520);
    v3 = v1 + ((*(unsigned __int8 *)(v83 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80));
    v81 = *(_QWORD *)(v83 + 72);
    v82 = *(_QWORD *)(v0 + 448);
    v85 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v83 + 16);
    v80 = enum case for FLRenderStyle.standard(_:);
    v77 = *(_QWORD *)(v0 + 808);
    swift_bridgeObjectRetain(v1);
    v4 = _swiftEmptyArrayStorage;
    v76 = v3;
    v5 = v3;
    do
    {
      v7 = *(_QWORD *)(v0 + 456);
      v6 = *(_QWORD *)(v0 + 464);
      v8 = *(_QWORD *)(v0 + 440);
      v9 = v85(*(_QWORD *)(v0 + 696), v5, *(_QWORD *)(v0 + 648));
      FLFollowUpInformation.renderStyle.getter(v9);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v82 + 104))(v7, v80, v8);
      v10 = static FLRenderStyle.== infix(_:_:)(v6, v7);
      v11 = *(void (**)(uint64_t, uint64_t))(v82 + 8);
      v11(v7, v8);
      v11(v6, v8);
      if ((v10 & 1) != 0)
      {
        v12 = *(_QWORD *)(v0 + 424);
        v13 = *(_QWORD *)(v0 + 384);
        v85(v12, *(_QWORD *)(v0 + 696), *(_QWORD *)(v0 + 648));
        v14 = swift_storeEnumTagMultiPayload(v12, v13, 0);
        v15 = FLFollowUpInformation.badgeValue.getter(v14);
        v16 = *(_QWORD *)(v0 + 424);
        v17 = *(_QWORD *)(v0 + 368);
        if ((v18 & 1) != 0)
        {
          v36 = sub_1000076F0(v16, *(_QWORD *)(v0 + 368), type metadata accessor for PrimarySettingsListItemIdentifier);
          *(_QWORD *)(v0 + 144) = FLFollowUpInformation.title.getter(v36);
          *(_QWORD *)(v0 + 152) = v37;
          v38 = sub_100008A5C();
          v39 = Text.init<A>(_:)(v0 + 144, &type metadata for String, v38);
          v41 = v40;
          v43 = v42;
          v45 = v44;
          v46 = (int *)type metadata accessor for PrimarySettingsListImagelessLinkModel(0);
          v31 = v46[7];
          *(_BYTE *)(v17 + v46[5]) = 0;
          v47 = v17 + v46[6];
          *(_QWORD *)v47 = v39;
          *(_QWORD *)(v47 + 8) = v41;
          *(_BYTE *)(v47 + 16) = v43 & 1;
          *(_QWORD *)(v47 + 24) = v45;
          v34 = 4;
        }
        else
        {
          v78 = v15;
          v19 = sub_1000076F0(v16, *(_QWORD *)(v0 + 368), type metadata accessor for PrimarySettingsListItemIdentifier);
          *(_QWORD *)(v0 + 160) = FLFollowUpInformation.title.getter(v19);
          *(_QWORD *)(v0 + 168) = v20;
          v21 = sub_100008A5C();
          v22 = Text.init<A>(_:)(v0 + 160, &type metadata for String, v21);
          v24 = v23;
          v25 = v4;
          v27 = v26;
          v29 = v28;
          v30 = (int *)type metadata accessor for PrimarySettingsListBadgedImagelessLinkModel(0);
          v31 = v30[8];
          *(_BYTE *)(v17 + v30[5]) = 0;
          v32 = v17 + v30[6];
          *(_QWORD *)v32 = v22;
          *(_QWORD *)(v32 + 8) = v24;
          v33 = v27 & 1;
          v4 = v25;
          *(_BYTE *)(v32 + 16) = v33;
          *(_QWORD *)(v32 + 24) = v29;
          *(_QWORD *)(v17 + v30[7]) = v78;
          v34 = 5;
        }
        v48 = *(_QWORD *)(v0 + 504);
        v49 = *(_QWORD *)(v0 + 424);
        v50 = *(_QWORD *)(v0 + 368);
        v51 = *(_QWORD *)(v0 + 328);
        *(_BYTE *)(v50 + v31) = 0;
        swift_storeEnumTagMultiPayload(v50, v51, v34);
        sub_1000076F0(v49, v48, type metadata accessor for PrimarySettingsListItemIdentifier);
        sub_100007670(v50, v48 + *(int *)(v79 + 20), type metadata accessor for PrimarySettingsListItemViewType);
        sub_1000076B4(v49, type metadata accessor for PrimarySettingsListItemIdentifier);
        v35 = 0;
      }
      else
      {
        v35 = 1;
      }
      v52 = *(_QWORD *)(v0 + 696);
      v53 = *(_QWORD *)(v0 + 648);
      v54 = *(_QWORD *)(v0 + 520);
      v55 = *(_QWORD *)(v0 + 504);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v84 + 56))(v55, v35, 1, v54);
      (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v52, v53);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v84 + 48))(v55, 1, v54) == 1)
      {
        sub_10000BA50(*(_QWORD *)(v0 + 504), (uint64_t *)&unk_100156F00);
      }
      else
      {
        v56 = *(_QWORD *)(v0 + 608);
        v57 = *(_QWORD *)(v0 + 600);
        sub_100007670(*(_QWORD *)(v0 + 504), v56, type metadata accessor for PrimarySettingsListItemModel);
        sub_100007670(v56, v57, type metadata accessor for PrimarySettingsListItemModel);
        if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) == 0)
          v4 = (_QWORD *)sub_100052720(0, v4[2] + 1, 1, (unint64_t)v4);
        v59 = v4[2];
        v58 = v4[3];
        if (v59 >= v58 >> 1)
          v4 = (_QWORD *)sub_100052720(v58 > 1, v59 + 1, 1, (unint64_t)v4);
        v60 = *(_QWORD *)(v0 + 600);
        v4[2] = v59 + 1;
        sub_100007670(v60, (uint64_t)v4+ ((*(unsigned __int8 *)(v84 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80))+ *(_QWORD *)(v84 + 72) * v59, type metadata accessor for PrimarySettingsListItemModel);
      }
      v5 += v81;
      --v2;
    }
    while (v2);
    result = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 808));
    if (!*(_QWORD *)(v77 + 16))
    {
      __break(1u);
      return result;
    }
    v85(*(_QWORD *)(v0 + 632), v76, *(_QWORD *)(v0 + 648));
    v62 = 0;
    v1 = *(_QWORD *)(v0 + 808);
  }
  else
  {
    v4 = _swiftEmptyArrayStorage;
    v62 = 1;
  }
  *(_QWORD *)(v0 + 816) = v4;
  v63 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 760);
  v64 = *(_QWORD *)(v0 + 648);
  v65 = *(_QWORD *)(v0 + 632);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 744))(v65, v62, 1, v64);
  swift_bridgeObjectRelease(v1);
  if (v63(v65, 1, v64) == 1)
  {
    v66 = sub_10000BA50(*(_QWORD *)(v0 + 632), &qword_10015C8E0);
    v67 = 0;
    v68 = 0;
  }
  else
  {
    v69 = *(_QWORD *)(v0 + 656);
    v70 = *(_QWORD *)(v0 + 648);
    v71 = *(_QWORD *)(v0 + 632);
    v67 = FLFollowUpInformation.subtitle.getter();
    v68 = v72;
    v66 = (*(uint64_t (**)(uint64_t, uint64_t))(v69 + 8))(v71, v70);
  }
  *(_QWORD *)(v0 + 832) = v68;
  *(_QWORD *)(v0 + 824) = v67;
  v73 = *(_QWORD *)(v0 + 720);
  *(_QWORD *)(v0 + 840) = static MainActor.shared.getter(v66);
  v74 = dispatch thunk of Actor.unownedExecutor.getter(v73, &protocol witness table for MainActor);
  return swift_task_switch(sub_100093D38, v74, v75);
}

uint64_t sub_100093D38()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = swift_release(v0[105]);
  v2 = FLFollowUpModelObserver.primaryAppleAccountNoGroupFollowUps.getter(v1);
  v0[106] = v2;
  v3 = (_QWORD *)swift_task_alloc(dword_10015A684);
  v0[107] = v3;
  *v3 = v0;
  v3[1] = sub_100093D9C;
  return sub_100095970(v2);
}

uint64_t sub_100093D9C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)*v1;
  v2[26] = v1;
  v2[27] = a1;
  v3 = v2[106];
  swift_task_dealloc(v2[107]);
  swift_bridgeObjectRelease(v3);
  return swift_task_switch(sub_100093E00, 0, 0);
}

uint64_t sub_100093E00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v1 + 720);
  *(_QWORD *)(v1 + 864) = static MainActor.shared.getter(a1);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  return swift_task_switch(sub_100093E60, v3, v4);
}

uint64_t sub_100093E60()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_release(*(_QWORD *)(v0 + 864));
  *(_QWORD *)(v0 + 872) = FLFollowUpModelObserver.secondaryAppleAccountFollowUps.getter(v1);
  return swift_task_switch(sub_100093EA8, 0, 0);
}

uint64_t sub_100093EA8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD, _QWORD, _QWORD);
  _QWORD *v5;
  uint64_t (*v6)(uint64_t);
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t (*v21)(uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  unsigned int v69;
  uint64_t (*v70)(_QWORD, _QWORD, _QWORD);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;

  v1 = v0[109];
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v73 = v0[82];
    v74 = v0[66];
    v68 = v0[65];
    v3 = v1 + ((*(unsigned __int8 *)(v73 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80));
    v71 = *(_QWORD *)(v73 + 72);
    v72 = v0[56];
    v4 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v73 + 16);
    v69 = enum case for FLRenderStyle.standard(_:);
    swift_bridgeObjectRetain(v1);
    v5 = _swiftEmptyArrayStorage;
    v6 = type metadata accessor for PrimarySettingsListItemIdentifier;
    v70 = v4;
    do
    {
      v7 = v6;
      v75 = (unint64_t)v5;
      v9 = v0[57];
      v8 = v0[58];
      v10 = v0[55];
      v11 = v4(v0[86], v3, v0[81]);
      FLFollowUpInformation.renderStyle.getter(v11);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v72 + 104))(v9, v69, v10);
      v12 = static FLRenderStyle.== infix(_:_:)(v8, v9);
      v13 = *(void (**)(uint64_t, uint64_t))(v72 + 8);
      v13(v9, v10);
      v13(v8, v10);
      if ((v12 & 1) != 0)
      {
        v14 = v0[52];
        v15 = v0[48];
        v4(v14, v0[86], v0[81]);
        v16 = swift_storeEnumTagMultiPayload(v14, v15, 0);
        v17 = FLFollowUpInformation.badgeValue.getter(v16);
        v18 = v0[52];
        v19 = v0[45];
        v6 = v7;
        if ((v20 & 1) != 0)
        {
          v38 = sub_1000076F0(v18, v0[45], v7);
          v0[14] = FLFollowUpInformation.title.getter(v38);
          v0[15] = v39;
          v40 = sub_100008A5C();
          v41 = Text.init<A>(_:)(v0 + 14, &type metadata for String, v40);
          v43 = v42;
          v45 = v44;
          v47 = v46;
          v48 = (int *)type metadata accessor for PrimarySettingsListImagelessLinkModel(0);
          v34 = v48[7];
          *(_BYTE *)(v19 + v48[5]) = 0;
          v49 = v19 + v48[6];
          *(_QWORD *)v49 = v41;
          *(_QWORD *)(v49 + 8) = v43;
          *(_BYTE *)(v49 + 16) = v45 & 1;
          *(_QWORD *)(v49 + 24) = v47;
          v36 = 4;
        }
        else
        {
          v21 = v7;
          v22 = v17;
          v23 = sub_1000076F0(v18, v0[45], v21);
          v0[16] = FLFollowUpInformation.title.getter(v23);
          v0[17] = v24;
          v25 = sub_100008A5C();
          v26 = Text.init<A>(_:)(v0 + 16, &type metadata for String, v25);
          v28 = v27;
          v30 = v29;
          v32 = v31;
          v33 = (int *)type metadata accessor for PrimarySettingsListBadgedImagelessLinkModel(0);
          v34 = v33[8];
          *(_BYTE *)(v19 + v33[5]) = 0;
          v35 = v19 + v33[6];
          *(_QWORD *)v35 = v26;
          *(_QWORD *)(v35 + 8) = v28;
          *(_BYTE *)(v35 + 16) = v30 & 1;
          *(_QWORD *)(v35 + 24) = v32;
          *(_QWORD *)(v19 + v33[7]) = v22;
          v36 = 5;
        }
        v50 = v0[62];
        v51 = v0[52];
        v52 = v0[45];
        v53 = v0[41];
        *(_BYTE *)(v52 + v34) = 0;
        swift_storeEnumTagMultiPayload(v52, v53, v36);
        sub_1000076F0(v51, v50, v6);
        sub_100007670(v52, v50 + *(int *)(v68 + 20), type metadata accessor for PrimarySettingsListItemViewType);
        sub_1000076B4(v51, v6);
        v37 = 0;
      }
      else
      {
        v37 = 1;
        v6 = v7;
      }
      v54 = v0[86];
      v55 = v0[81];
      v56 = v0[65];
      v57 = v0[62];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v74 + 56))(v57, v37, 1, v56);
      (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v54, v55);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48))(v57, 1, v56) == 1)
      {
        sub_10000BA50(v0[62], (uint64_t *)&unk_100156F00);
        v5 = (_QWORD *)v75;
        v4 = v70;
      }
      else
      {
        v58 = v0[74];
        v59 = v0[73];
        sub_100007670(v0[62], v58, type metadata accessor for PrimarySettingsListItemModel);
        sub_100007670(v58, v59, type metadata accessor for PrimarySettingsListItemModel);
        v5 = (_QWORD *)v75;
        if ((swift_isUniquelyReferenced_nonNull_native(v75) & 1) == 0)
          v5 = (_QWORD *)sub_100052720(0, *(_QWORD *)(v75 + 16) + 1, 1, v75);
        v4 = v70;
        v61 = v5[2];
        v60 = v5[3];
        if (v61 >= v60 >> 1)
          v5 = (_QWORD *)sub_100052720(v60 > 1, v61 + 1, 1, (unint64_t)v5);
        v62 = v0[73];
        v5[2] = v61 + 1;
        sub_100007670(v62, (uint64_t)v5+ ((*(unsigned __int8 *)(v74 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v74 + 80))+ *(_QWORD *)(v74 + 72) * v61, type metadata accessor for PrimarySettingsListItemModel);
      }
      v3 += v71;
      --v2;
    }
    while (v2);
    v63 = swift_bridgeObjectRelease_n(v0[109], 2);
  }
  else
  {
    v63 = swift_bridgeObjectRelease(v1);
    v5 = _swiftEmptyArrayStorage;
  }
  v0[110] = v5;
  v64 = v0[90];
  v0[111] = static MainActor.shared.getter(v63);
  v65 = dispatch thunk of Actor.unownedExecutor.getter(v64, &protocol witness table for MainActor);
  return swift_task_switch(sub_100094314, v65, v66);
}

uint64_t sub_100094314()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = swift_release(v0[111]);
  v2 = FLFollowUpModelObserver.secondaryAppleAccountNoGroupFollowUps.getter(v1);
  v0[112] = v2;
  v3 = (_QWORD *)swift_task_alloc(dword_10015A684);
  v0[113] = v3;
  *v3 = v0;
  v3[1] = sub_100094378;
  return sub_100095970(v2);
}

uint64_t sub_100094378(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)*v1;
  v2[28] = v1;
  v2[29] = a1;
  v3 = v2[112];
  swift_task_dealloc(v2[113]);
  swift_bridgeObjectRelease(v3);
  return swift_task_switch(sub_1000943DC, 0, 0);
}

uint64_t sub_1000943DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v1 + 720);
  *(_QWORD *)(v1 + 912) = static MainActor.shared.getter(a1);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  return swift_task_switch(sub_10009443C, v3, v4);
}

uint64_t sub_10009443C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_release(*(_QWORD *)(v0 + 912));
  FLFollowUpModelObserver.deviceFollowUpGroupSectionElement.getter(v1);
  return swift_task_switch(sub_100094488, 0, 0);
}

uint64_t sub_100094488(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v1 + 720);
  *(_QWORD *)(v1 + 920) = static MainActor.shared.getter(a1);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000944E8, v3, v4);
}

uint64_t sub_1000944E8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_release(*(_QWORD *)(v0 + 920));
  *(_QWORD *)(v0 + 928) = FLFollowUpModelObserver.deviceFollowUps.getter(v1);
  return swift_task_switch(sub_100094530, 0, 0);
}

uint64_t sub_100094530()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD, _QWORD, _QWORD);
  _QWORD *v5;
  uint64_t (*v6)(uint64_t);
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t (*v21)(uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  unsigned int v69;
  uint64_t (*v70)(_QWORD, _QWORD, _QWORD);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;

  v1 = v0[116];
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v73 = v0[82];
    v74 = v0[66];
    v68 = v0[65];
    v3 = v1 + ((*(unsigned __int8 *)(v73 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80));
    v71 = *(_QWORD *)(v73 + 72);
    v72 = v0[56];
    v4 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v73 + 16);
    v69 = enum case for FLRenderStyle.standard(_:);
    swift_bridgeObjectRetain(v1);
    v5 = _swiftEmptyArrayStorage;
    v6 = type metadata accessor for PrimarySettingsListItemIdentifier;
    v70 = v4;
    do
    {
      v7 = v6;
      v75 = (unint64_t)v5;
      v9 = v0[57];
      v8 = v0[58];
      v10 = v0[55];
      v11 = v4(v0[85], v3, v0[81]);
      FLFollowUpInformation.renderStyle.getter(v11);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v72 + 104))(v9, v69, v10);
      v12 = static FLRenderStyle.== infix(_:_:)(v8, v9);
      v13 = *(void (**)(uint64_t, uint64_t))(v72 + 8);
      v13(v9, v10);
      v13(v8, v10);
      if ((v12 & 1) != 0)
      {
        v14 = v0[51];
        v15 = v0[48];
        v4(v14, v0[85], v0[81]);
        v16 = swift_storeEnumTagMultiPayload(v14, v15, 0);
        v17 = FLFollowUpInformation.badgeValue.getter(v16);
        v18 = v0[51];
        v19 = v0[44];
        v6 = v7;
        if ((v20 & 1) != 0)
        {
          v38 = sub_1000076F0(v18, v0[44], v7);
          v0[10] = FLFollowUpInformation.title.getter(v38);
          v0[11] = v39;
          v40 = sub_100008A5C();
          v41 = Text.init<A>(_:)(v0 + 10, &type metadata for String, v40);
          v43 = v42;
          v45 = v44;
          v47 = v46;
          v48 = (int *)type metadata accessor for PrimarySettingsListImagelessLinkModel(0);
          v34 = v48[7];
          *(_BYTE *)(v19 + v48[5]) = 0;
          v49 = v19 + v48[6];
          *(_QWORD *)v49 = v41;
          *(_QWORD *)(v49 + 8) = v43;
          *(_BYTE *)(v49 + 16) = v45 & 1;
          *(_QWORD *)(v49 + 24) = v47;
          v36 = 4;
        }
        else
        {
          v21 = v7;
          v22 = v17;
          v23 = sub_1000076F0(v18, v0[44], v21);
          v0[12] = FLFollowUpInformation.title.getter(v23);
          v0[13] = v24;
          v25 = sub_100008A5C();
          v26 = Text.init<A>(_:)(v0 + 12, &type metadata for String, v25);
          v28 = v27;
          v30 = v29;
          v32 = v31;
          v33 = (int *)type metadata accessor for PrimarySettingsListBadgedImagelessLinkModel(0);
          v34 = v33[8];
          *(_BYTE *)(v19 + v33[5]) = 0;
          v35 = v19 + v33[6];
          *(_QWORD *)v35 = v26;
          *(_QWORD *)(v35 + 8) = v28;
          *(_BYTE *)(v35 + 16) = v30 & 1;
          *(_QWORD *)(v35 + 24) = v32;
          *(_QWORD *)(v19 + v33[7]) = v22;
          v36 = 5;
        }
        v50 = v0[61];
        v51 = v0[51];
        v52 = v0[44];
        v53 = v0[41];
        *(_BYTE *)(v52 + v34) = 0;
        swift_storeEnumTagMultiPayload(v52, v53, v36);
        sub_1000076F0(v51, v50, v6);
        sub_100007670(v52, v50 + *(int *)(v68 + 20), type metadata accessor for PrimarySettingsListItemViewType);
        sub_1000076B4(v51, v6);
        v37 = 0;
      }
      else
      {
        v37 = 1;
        v6 = v7;
      }
      v54 = v0[85];
      v55 = v0[81];
      v56 = v0[65];
      v57 = v0[61];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v74 + 56))(v57, v37, 1, v56);
      (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v54, v55);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48))(v57, 1, v56) == 1)
      {
        sub_10000BA50(v0[61], (uint64_t *)&unk_100156F00);
        v5 = (_QWORD *)v75;
        v4 = v70;
      }
      else
      {
        v58 = v0[72];
        v59 = v0[71];
        sub_100007670(v0[61], v58, type metadata accessor for PrimarySettingsListItemModel);
        sub_100007670(v58, v59, type metadata accessor for PrimarySettingsListItemModel);
        v5 = (_QWORD *)v75;
        if ((swift_isUniquelyReferenced_nonNull_native(v75) & 1) == 0)
          v5 = (_QWORD *)sub_100052720(0, *(_QWORD *)(v75 + 16) + 1, 1, v75);
        v4 = v70;
        v61 = v5[2];
        v60 = v5[3];
        if (v61 >= v60 >> 1)
          v5 = (_QWORD *)sub_100052720(v60 > 1, v61 + 1, 1, (unint64_t)v5);
        v62 = v0[71];
        v5[2] = v61 + 1;
        sub_100007670(v62, (uint64_t)v5+ ((*(unsigned __int8 *)(v74 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v74 + 80))+ *(_QWORD *)(v74 + 72) * v61, type metadata accessor for PrimarySettingsListItemModel);
      }
      v3 += v71;
      --v2;
    }
    while (v2);
    v63 = swift_bridgeObjectRelease_n(v0[116], 2);
  }
  else
  {
    v63 = swift_bridgeObjectRelease(v1);
    v5 = _swiftEmptyArrayStorage;
  }
  v0[117] = v5;
  v64 = v0[90];
  v0[118] = static MainActor.shared.getter(v63);
  v65 = dispatch thunk of Actor.unownedExecutor.getter(v64, &protocol witness table for MainActor);
  return swift_task_switch(sub_10009499C, v65, v66);
}

uint64_t sub_10009499C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_release(*(_QWORD *)(v0 + 944));
  FLFollowUpModelObserver.newDeviceOutreachFollowUpGroupSectionElement.getter(v1);
  return swift_task_switch(sub_1000949E8, 0, 0);
}

uint64_t sub_1000949E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v1 + 720);
  *(_QWORD *)(v1 + 952) = static MainActor.shared.getter(a1);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  return swift_task_switch(sub_100094A48, v3, v4);
}

uint64_t sub_100094A48()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_release(*(_QWORD *)(v0 + 952));
  *(_QWORD *)(v0 + 960) = FLFollowUpModelObserver.newDeviceOutreachFollowUps.getter(v1);
  return swift_task_switch(sub_100094A90, 0, 0);
}

uint64_t sub_100094A90()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD, _QWORD, _QWORD);
  _QWORD *v5;
  uint64_t (*v6)(uint64_t);
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t (*v21)(uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  unsigned int v69;
  uint64_t (*v70)(_QWORD, _QWORD, _QWORD);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;

  v1 = v0[120];
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v73 = v0[82];
    v74 = v0[66];
    v68 = v0[65];
    v3 = v1 + ((*(unsigned __int8 *)(v73 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80));
    v71 = *(_QWORD *)(v73 + 72);
    v72 = v0[56];
    v4 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v73 + 16);
    v69 = enum case for FLRenderStyle.standard(_:);
    swift_bridgeObjectRetain(v1);
    v5 = _swiftEmptyArrayStorage;
    v6 = type metadata accessor for PrimarySettingsListItemIdentifier;
    v70 = v4;
    do
    {
      v7 = v6;
      v75 = (unint64_t)v5;
      v9 = v0[57];
      v8 = v0[58];
      v10 = v0[55];
      v11 = v4(v0[84], v3, v0[81]);
      FLFollowUpInformation.renderStyle.getter(v11);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v72 + 104))(v9, v69, v10);
      v12 = static FLRenderStyle.== infix(_:_:)(v8, v9);
      v13 = *(void (**)(uint64_t, uint64_t))(v72 + 8);
      v13(v9, v10);
      v13(v8, v10);
      if ((v12 & 1) != 0)
      {
        v14 = v0[50];
        v15 = v0[48];
        v4(v14, v0[84], v0[81]);
        v16 = swift_storeEnumTagMultiPayload(v14, v15, 0);
        v17 = FLFollowUpInformation.badgeValue.getter(v16);
        v18 = v0[50];
        v19 = v0[43];
        v6 = v7;
        if ((v20 & 1) != 0)
        {
          v38 = sub_1000076F0(v18, v0[43], v7);
          v0[6] = FLFollowUpInformation.title.getter(v38);
          v0[7] = v39;
          v40 = sub_100008A5C();
          v41 = Text.init<A>(_:)(v0 + 6, &type metadata for String, v40);
          v43 = v42;
          v45 = v44;
          v47 = v46;
          v48 = (int *)type metadata accessor for PrimarySettingsListImagelessLinkModel(0);
          v34 = v48[7];
          *(_BYTE *)(v19 + v48[5]) = 0;
          v49 = v19 + v48[6];
          *(_QWORD *)v49 = v41;
          *(_QWORD *)(v49 + 8) = v43;
          *(_BYTE *)(v49 + 16) = v45 & 1;
          *(_QWORD *)(v49 + 24) = v47;
          v36 = 4;
        }
        else
        {
          v21 = v7;
          v22 = v17;
          v23 = sub_1000076F0(v18, v0[43], v21);
          v0[8] = FLFollowUpInformation.title.getter(v23);
          v0[9] = v24;
          v25 = sub_100008A5C();
          v26 = Text.init<A>(_:)(v0 + 8, &type metadata for String, v25);
          v28 = v27;
          v30 = v29;
          v32 = v31;
          v33 = (int *)type metadata accessor for PrimarySettingsListBadgedImagelessLinkModel(0);
          v34 = v33[8];
          *(_BYTE *)(v19 + v33[5]) = 0;
          v35 = v19 + v33[6];
          *(_QWORD *)v35 = v26;
          *(_QWORD *)(v35 + 8) = v28;
          *(_BYTE *)(v35 + 16) = v30 & 1;
          *(_QWORD *)(v35 + 24) = v32;
          *(_QWORD *)(v19 + v33[7]) = v22;
          v36 = 5;
        }
        v50 = v0[60];
        v51 = v0[50];
        v52 = v0[43];
        v53 = v0[41];
        *(_BYTE *)(v52 + v34) = 0;
        swift_storeEnumTagMultiPayload(v52, v53, v36);
        sub_1000076F0(v51, v50, v6);
        sub_100007670(v52, v50 + *(int *)(v68 + 20), type metadata accessor for PrimarySettingsListItemViewType);
        sub_1000076B4(v51, v6);
        v37 = 0;
      }
      else
      {
        v37 = 1;
        v6 = v7;
      }
      v54 = v0[84];
      v55 = v0[81];
      v56 = v0[65];
      v57 = v0[60];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v74 + 56))(v57, v37, 1, v56);
      (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v54, v55);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48))(v57, 1, v56) == 1)
      {
        sub_10000BA50(v0[60], (uint64_t *)&unk_100156F00);
        v5 = (_QWORD *)v75;
        v4 = v70;
      }
      else
      {
        v58 = v0[70];
        v59 = v0[69];
        sub_100007670(v0[60], v58, type metadata accessor for PrimarySettingsListItemModel);
        sub_100007670(v58, v59, type metadata accessor for PrimarySettingsListItemModel);
        v5 = (_QWORD *)v75;
        if ((swift_isUniquelyReferenced_nonNull_native(v75) & 1) == 0)
          v5 = (_QWORD *)sub_100052720(0, *(_QWORD *)(v75 + 16) + 1, 1, v75);
        v4 = v70;
        v61 = v5[2];
        v60 = v5[3];
        if (v61 >= v60 >> 1)
          v5 = (_QWORD *)sub_100052720(v60 > 1, v61 + 1, 1, (unint64_t)v5);
        v62 = v0[69];
        v5[2] = v61 + 1;
        sub_100007670(v62, (uint64_t)v5+ ((*(unsigned __int8 *)(v74 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v74 + 80))+ *(_QWORD *)(v74 + 72) * v61, type metadata accessor for PrimarySettingsListItemModel);
      }
      v3 += v71;
      --v2;
    }
    while (v2);
    v63 = swift_bridgeObjectRelease_n(v0[120], 2);
  }
  else
  {
    v63 = swift_bridgeObjectRelease(v1);
    v5 = _swiftEmptyArrayStorage;
  }
  v0[121] = v5;
  v64 = v0[90];
  v0[122] = static MainActor.shared.getter(v63);
  v65 = dispatch thunk of Actor.unownedExecutor.getter(v64, &protocol witness table for MainActor);
  return swift_task_switch(sub_100094EFC, v65, v66);
}

uint64_t sub_100094EFC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_release(*(_QWORD *)(v0 + 976));
  FLFollowUpModelObserver.unauthorizedFollowUpGroupSectionElement.getter(v1);
  return swift_task_switch(sub_100094F48, 0, 0);
}

uint64_t sub_100094F48(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v1 + 720);
  *(_QWORD *)(v1 + 984) = static MainActor.shared.getter(a1);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  return swift_task_switch(sub_100094FA8, v3, v4);
}

uint64_t sub_100094FA8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_release(*(_QWORD *)(v0 + 984));
  *(_QWORD *)(v0 + 992) = FLFollowUpModelObserver.unauthorizedFollowUps.getter(v1);
  return swift_task_switch(sub_100094FF0, 0, 0);
}

uint64_t sub_100094FF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD, _QWORD, _QWORD);
  uint64_t (*v5)(uint64_t);
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  int *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t (*v133)(_QWORD, _QWORD, _QWORD);
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;

  v1 = *(_QWORD *)(v0 + 992);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v139 = *(_QWORD *)(v0 + 656);
    v141 = *(_QWORD *)(v0 + 528);
    v129 = *(_QWORD *)(v0 + 520);
    v3 = v1 + ((*(unsigned __int8 *)(v139 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v139 + 80));
    v135 = *(_QWORD *)(v139 + 72);
    v137 = *(_QWORD *)(v0 + 448);
    v4 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v139 + 16);
    v131 = enum case for FLRenderStyle.standard(_:);
    swift_bridgeObjectRetain(v1);
    v143 = _swiftEmptyArrayStorage;
    v5 = type metadata accessor for PrimarySettingsListItemIdentifier;
    v133 = v4;
    do
    {
      v6 = v5;
      v8 = *(_QWORD *)(v0 + 456);
      v7 = *(_QWORD *)(v0 + 464);
      v9 = *(_QWORD *)(v0 + 440);
      v10 = v4(*(_QWORD *)(v0 + 664), v3, *(_QWORD *)(v0 + 648));
      FLFollowUpInformation.renderStyle.getter(v10);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v137 + 104))(v8, v131, v9);
      v11 = static FLRenderStyle.== infix(_:_:)(v7, v8);
      v12 = *(void (**)(uint64_t, uint64_t))(v137 + 8);
      v12(v8, v9);
      v12(v7, v9);
      if ((v11 & 1) != 0)
      {
        v14 = *(_QWORD *)(v0 + 384);
        v13 = *(_QWORD *)(v0 + 392);
        v4(v13, *(_QWORD *)(v0 + 664), *(_QWORD *)(v0 + 648));
        v15 = swift_storeEnumTagMultiPayload(v13, v14, 0);
        v16 = FLFollowUpInformation.badgeValue.getter(v15);
        v17 = *(_QWORD *)(v0 + 392);
        v18 = *(_QWORD *)(v0 + 336);
        v5 = v6;
        if ((v19 & 1) != 0)
        {
          v37 = sub_1000076F0(v17, *(_QWORD *)(v0 + 336), v6);
          *(_QWORD *)(v0 + 16) = FLFollowUpInformation.title.getter(v37);
          *(_QWORD *)(v0 + 24) = v38;
          v39 = sub_100008A5C();
          v40 = Text.init<A>(_:)(v0 + 16, &type metadata for String, v39);
          v42 = v41;
          v44 = v43;
          v46 = v45;
          v47 = (int *)type metadata accessor for PrimarySettingsListImagelessLinkModel(0);
          v33 = v47[7];
          *(_BYTE *)(v18 + v47[5]) = 0;
          v48 = v18 + v47[6];
          *(_QWORD *)v48 = v40;
          *(_QWORD *)(v48 + 8) = v42;
          *(_BYTE *)(v48 + 16) = v44 & 1;
          *(_QWORD *)(v48 + 24) = v46;
          v35 = 4;
        }
        else
        {
          v20 = v6;
          v21 = v16;
          v22 = sub_1000076F0(v17, *(_QWORD *)(v0 + 336), v20);
          *(_QWORD *)(v0 + 32) = FLFollowUpInformation.title.getter(v22);
          *(_QWORD *)(v0 + 40) = v23;
          v24 = sub_100008A5C();
          v25 = Text.init<A>(_:)(v0 + 32, &type metadata for String, v24);
          v27 = v26;
          v29 = v28;
          v31 = v30;
          v32 = (int *)type metadata accessor for PrimarySettingsListBadgedImagelessLinkModel(0);
          v33 = v32[8];
          *(_BYTE *)(v18 + v32[5]) = 0;
          v34 = v18 + v32[6];
          *(_QWORD *)v34 = v25;
          *(_QWORD *)(v34 + 8) = v27;
          *(_BYTE *)(v34 + 16) = v29 & 1;
          *(_QWORD *)(v34 + 24) = v31;
          *(_QWORD *)(v18 + v32[7]) = v21;
          v35 = 5;
        }
        v49 = *(_QWORD *)(v0 + 472);
        v50 = *(_QWORD *)(v0 + 392);
        v51 = *(_QWORD *)(v0 + 328);
        v52 = *(_QWORD *)(v0 + 336);
        *(_BYTE *)(v52 + v33) = 0;
        swift_storeEnumTagMultiPayload(v52, v51, v35);
        sub_1000076F0(v50, v49, v5);
        sub_100007670(v52, v49 + *(int *)(v129 + 20), type metadata accessor for PrimarySettingsListItemViewType);
        sub_1000076B4(v50, v5);
        v36 = 0;
      }
      else
      {
        v36 = 1;
        v5 = v6;
      }
      v53 = *(_QWORD *)(v0 + 664);
      v54 = *(_QWORD *)(v0 + 648);
      v55 = *(_QWORD *)(v0 + 520);
      v56 = *(_QWORD *)(v0 + 472);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v141 + 56))(v56, v36, 1, v55);
      (*(void (**)(uint64_t, uint64_t))(v139 + 8))(v53, v54);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v141 + 48))(v56, 1, v55) == 1)
      {
        sub_10000BA50(*(_QWORD *)(v0 + 472), (uint64_t *)&unk_100156F00);
        v4 = v133;
      }
      else
      {
        v57 = *(_QWORD *)(v0 + 544);
        v58 = *(_QWORD *)(v0 + 536);
        sub_100007670(*(_QWORD *)(v0 + 472), v57, type metadata accessor for PrimarySettingsListItemModel);
        sub_100007670(v57, v58, type metadata accessor for PrimarySettingsListItemModel);
        if ((swift_isUniquelyReferenced_nonNull_native(v143) & 1) != 0)
          v59 = (unint64_t)v143;
        else
          v59 = sub_100052720(0, v143[2] + 1, 1, (unint64_t)v143);
        v4 = v133;
        v61 = *(_QWORD *)(v59 + 16);
        v60 = *(_QWORD *)(v59 + 24);
        if (v61 >= v60 >> 1)
          v59 = sub_100052720(v60 > 1, v61 + 1, 1, v59);
        v62 = *(_QWORD *)(v0 + 536);
        *(_QWORD *)(v59 + 16) = v61 + 1;
        v143 = (_QWORD *)v59;
        sub_100007670(v62, v59+ ((*(unsigned __int8 *)(v141 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v141 + 80))+ *(_QWORD *)(v141 + 72) * v61, type metadata accessor for PrimarySettingsListItemModel);
      }
      v3 += v135;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 992), 2);
  }
  else
  {
    swift_bridgeObjectRelease(v1);
    v143 = _swiftEmptyArrayStorage;
  }
  v90 = *(_QWORD *)(v0 + 936);
  v91 = *(_QWORD *)(v0 + 968);
  v88 = *(_QWORD *)(v0 + 880);
  v89 = *(_QWORD *)(v0 + 232);
  v85 = *(_QWORD *)(v0 + 832);
  v86 = *(_QWORD *)(v0 + 216);
  v83 = *(_QWORD *)(v0 + 816);
  v84 = *(_QWORD *)(v0 + 824);
  v81 = *(_QWORD *)(v0 + 784);
  v82 = *(_QWORD *)(v0 + 792);
  v63 = *(_QWORD *)(v0 + 752);
  v95 = *(_QWORD *)(v0 + 712);
  v96 = *(_QWORD *)(v0 + 704);
  v98 = *(_QWORD *)(v0 + 696);
  v100 = *(_QWORD *)(v0 + 688);
  v102 = *(_QWORD *)(v0 + 680);
  v104 = *(_QWORD *)(v0 + 672);
  v106 = *(_QWORD *)(v0 + 664);
  v108 = *(_QWORD *)(v0 + 640);
  v109 = *(_QWORD *)(v0 + 632);
  v111 = *(_QWORD *)(v0 + 624);
  v113 = *(_QWORD *)(v0 + 616);
  v115 = *(_QWORD *)(v0 + 608);
  v117 = *(_QWORD *)(v0 + 600);
  v119 = *(_QWORD *)(v0 + 592);
  v65 = *(_QWORD **)(v0 + 296);
  v64 = *(_QWORD *)(v0 + 304);
  v92 = v64;
  v66 = *(int **)(v0 + 264);
  v87 = *(_QWORD *)(v0 + 272);
  v97 = *(_QWORD *)(v0 + 584);
  v99 = *(_QWORD *)(v0 + 576);
  v101 = *(_QWORD *)(v0 + 568);
  v103 = *(_QWORD *)(v0 + 560);
  v105 = *(_QWORD *)(v0 + 552);
  v107 = *(_QWORD *)(v0 + 544);
  v110 = *(_QWORD *)(v0 + 536);
  v112 = *(_QWORD *)(v0 + 512);
  v114 = *(_QWORD *)(v0 + 504);
  v116 = *(_QWORD *)(v0 + 496);
  v118 = *(_QWORD *)(v0 + 488);
  v120 = *(_QWORD *)(v0 + 480);
  v121 = *(_QWORD *)(v0 + 472);
  v122 = *(_QWORD *)(v0 + 464);
  v123 = *(_QWORD *)(v0 + 456);
  v124 = *(_QWORD *)(v0 + 432);
  v125 = *(_QWORD *)(v0 + 424);
  v126 = *(_QWORD *)(v0 + 416);
  v127 = *(_QWORD *)(v0 + 408);
  v128 = *(_QWORD *)(v0 + 400);
  v130 = *(_QWORD *)(v0 + 392);
  v132 = *(_QWORD *)(v0 + 376);
  v134 = *(_QWORD *)(v0 + 368);
  v136 = *(_QWORD *)(v0 + 360);
  v138 = *(_QWORD *)(v0 + 352);
  v140 = *(_QWORD *)(v0 + 344);
  v142 = *(_QWORD *)(v0 + 336);
  v67 = *(_QWORD *)(v0 + 312);
  v93 = v67;
  v94 = *(_QWORD *)(v0 + 320);
  v69 = *(_QWORD *)(v0 + 280);
  v68 = *(_QWORD *)(v0 + 288);
  v71 = *(_QWORD *)(v0 + 248);
  v70 = *(_QWORD *)(v0 + 256);
  sub_10000BA08(v94, (uint64_t)v65 + v66[11]);
  sub_10000BA08(v67, (uint64_t)v65 + v66[13]);
  sub_10000BA08(v64, (uint64_t)v65 + v66[15]);
  *v65 = v63;
  v65[1] = v81;
  v65[2] = v82;
  v65[3] = v83;
  v65[4] = v84;
  v65[5] = v85;
  v65[6] = v86;
  v65[7] = v88;
  v65[8] = v89;
  *(_QWORD *)((char *)v65 + v66[12]) = v90;
  *(_QWORD *)((char *)v65 + v66[14]) = v91;
  *(_QWORD *)((char *)v65 + v66[16]) = v143;
  v72 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 56))(v70, 1, 1, v72);
  v73 = swift_allocObject(&unk_10014B4F0, 24, 7);
  swift_weakInit(v73 + 16, v71);
  sub_1000076F0((uint64_t)v65, v68, type metadata accessor for FollowUpInformationProviderSnapshot);
  v74 = swift_retain(v73);
  v75 = static MainActor.shared.getter(v74);
  v76 = *(unsigned __int8 *)(v87 + 80);
  v77 = (v76 + 40) & ~v76;
  v78 = (_QWORD *)swift_allocObject(&unk_10014B518, v77 + v69, v76 | 7);
  v78[2] = v75;
  v78[3] = &protocol witness table for MainActor;
  v78[4] = v73;
  sub_100007670(v68, (uint64_t)v78 + v77, type metadata accessor for FollowUpInformationProviderSnapshot);
  swift_release(v73);
  v79 = sub_1000F1F64(v70, (uint64_t)&unk_10015A690, (uint64_t)v78);
  swift_release(v79);
  sub_1000076B4((uint64_t)v65, type metadata accessor for FollowUpInformationProviderSnapshot);
  sub_10000BA50(v92, &qword_100157100);
  sub_10000BA50(v93, &qword_100157100);
  sub_10000BA50(v94, &qword_100157100);
  swift_task_dealloc(v95);
  swift_task_dealloc(v96);
  swift_task_dealloc(v98);
  swift_task_dealloc(v100);
  swift_task_dealloc(v102);
  swift_task_dealloc(v104);
  swift_task_dealloc(v106);
  swift_task_dealloc(v108);
  swift_task_dealloc(v109);
  swift_task_dealloc(v111);
  swift_task_dealloc(v113);
  swift_task_dealloc(v115);
  swift_task_dealloc(v117);
  swift_task_dealloc(v119);
  swift_task_dealloc(v97);
  swift_task_dealloc(v99);
  swift_task_dealloc(v101);
  swift_task_dealloc(v103);
  swift_task_dealloc(v105);
  swift_task_dealloc(v107);
  swift_task_dealloc(v110);
  swift_task_dealloc(v112);
  swift_task_dealloc(v114);
  swift_task_dealloc(v116);
  swift_task_dealloc(v118);
  swift_task_dealloc(v120);
  swift_task_dealloc(v121);
  swift_task_dealloc(v122);
  swift_task_dealloc(v123);
  swift_task_dealloc(v124);
  swift_task_dealloc(v125);
  swift_task_dealloc(v126);
  swift_task_dealloc(v127);
  swift_task_dealloc(v128);
  swift_task_dealloc(v130);
  swift_task_dealloc(v132);
  swift_task_dealloc(v134);
  swift_task_dealloc(v136);
  swift_task_dealloc(v138);
  swift_task_dealloc(v140);
  swift_task_dealloc(v142);
  swift_task_dealloc(v94);
  swift_task_dealloc(v93);
  swift_task_dealloc(v92);
  swift_task_dealloc(v65);
  swift_task_dealloc(v68);
  swift_task_dealloc(v70);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000958C4()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000958F8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_10015A674);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_1000526BC;
  return sub_100092CD8(a1, v4, v5, v7, v6);
}

uint64_t sub_100095970(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2[8] = a1;
  v2[9] = v1;
  v3 = type metadata accessor for FLAccountType(0);
  v2[10] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[11] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[12] = swift_task_alloc(v5);
  v2[13] = swift_task_alloc(v5);
  v6 = type metadata accessor for FLFollowUpGroupIdentity(0);
  v2[14] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[15] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[16] = swift_task_alloc(v8);
  v2[17] = swift_task_alloc(v8);
  v9 = type metadata accessor for PrimarySettingsListFollowUpActionModel(0);
  v2[18] = v9;
  v2[19] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for PrimarySettingsListItemModel(0);
  v2[20] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v2[21] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[22] = swift_task_alloc(v12);
  v2[23] = swift_task_alloc(v12);
  v13 = type metadata accessor for PrimarySettingsListFollowUpModel(0);
  v2[24] = v13;
  v14 = (*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[25] = swift_task_alloc(v14);
  v2[26] = swift_task_alloc(v14);
  v15 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v2[27] = v15;
  v16 = (*(_QWORD *)(*(_QWORD *)(v15 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[28] = swift_task_alloc(v16);
  v2[29] = swift_task_alloc(v16);
  v2[30] = swift_task_alloc(v16);
  v17 = type metadata accessor for FLRenderStyle(0);
  v2[31] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v2[32] = v18;
  v19 = (*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[33] = swift_task_alloc(v19);
  v2[34] = swift_task_alloc(v19);
  v20 = type metadata accessor for FLFollowUpInformation(0);
  v2[35] = v20;
  v21 = *(_QWORD *)(v20 - 8);
  v2[36] = v21;
  v2[37] = swift_task_alloc((*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100095B48, 0, 0);
}

uint64_t sub_100095B48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 304) = v2;
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 288);
    *(_DWORD *)(v0 + 368) = *(_DWORD *)(v3 + 80);
    *(_QWORD *)(v0 + 312) = *(_QWORD *)(v3 + 72);
    *(_QWORD *)(v0 + 320) = *(_QWORD *)(v3 + 16);
    *(_DWORD *)(v0 + 372) = enum case for FLRenderStyle.headerAndActions(_:);
    *(_DWORD *)(v0 + 376) = enum case for FLAccountType.primary(_:);
    swift_bridgeObjectRetain(v1);
    v4 = 0;
    do
    {
      *(_QWORD *)(v0 + 328) = v4;
      *(_QWORD *)(v0 + 336) = _swiftEmptyArrayStorage;
      v5 = *(unsigned int *)(v0 + 372);
      v6 = *(_QWORD *)(v0 + 272);
      v8 = *(_QWORD *)(v0 + 256);
      v7 = *(_QWORD *)(v0 + 264);
      v9 = *(_QWORD *)(v0 + 248);
      v10 = (*(uint64_t (**)(_QWORD, unint64_t, _QWORD))(v0 + 320))(*(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 64)+ ((*(unsigned __int8 *)(v0 + 368) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 368))+ *(_QWORD *)(v0 + 312) * v4, *(_QWORD *)(v0 + 280));
      FLFollowUpInformation.renderStyle.getter(v10);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 104))(v7, v5, v9);
      v11 = static FLRenderStyle.== infix(_:_:)(v6, v7);
      v12 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
      v12(v7, v9);
      v12(v6, v9);
      if ((v11 & 1) != 0)
      {
        v13 = *(_QWORD *)(*(_QWORD *)(v0 + 72) + 72);
        *(_QWORD *)(v0 + 344) = v13;
        if (v13)
        {
          v14 = type metadata accessor for MainActor(0);
          v15 = swift_retain(v13);
          *(_QWORD *)(v0 + 352) = static MainActor.shared.getter(v15);
          v16 = dispatch thunk of Actor.unownedExecutor.getter(v14, &protocol witness table for MainActor);
          return swift_task_switch(sub_100095DD4, v16, v17);
        }
      }
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 288) + 8))(*(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 280));
      v4 = *(_QWORD *)(v0 + 328) + 1;
    }
    while (v4 != *(_QWORD *)(v0 + 304));
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  }
  v19 = *(_QWORD *)(v0 + 264);
  v20 = *(_QWORD *)(v0 + 272);
  v22 = *(_QWORD *)(v0 + 232);
  v21 = *(_QWORD *)(v0 + 240);
  v23 = *(_QWORD *)(v0 + 224);
  v25 = *(_QWORD *)(v0 + 200);
  v24 = *(_QWORD *)(v0 + 208);
  v27 = *(_QWORD *)(v0 + 176);
  v26 = *(_QWORD *)(v0 + 184);
  v28 = *(_QWORD *)(v0 + 152);
  v29 = *(_QWORD *)(v0 + 136);
  v30 = *(_QWORD *)(v0 + 128);
  v31 = *(_QWORD *)(v0 + 104);
  v32 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 296));
  swift_task_dealloc(v20);
  swift_task_dealloc(v19);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
}

uint64_t sub_100095DD4()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[37];
  swift_release(v0[44]);
  v0[45] = FLFollowUpModelObserver.followUpItem(with:)(v1);
  return swift_task_switch(sub_100095E20, 0, 0);
}

uint64_t sub_100095E20()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char **v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  void *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  void *v49;
  id v50;
  void (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  char **v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  id v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  int *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  void (*v113)(uint64_t, uint64_t);
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  void (*v136)(uint64_t, uint64_t);
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  uint64_t v152;
  char v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char v168;
  unint64_t v169;
  id v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  void (*v182)(uint64_t, uint64_t, uint64_t);
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  uint64_t v191;
  char v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  void (*v196)(uint64_t, uint64_t, uint64_t);
  unint64_t v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  void *v201;
  char v202;
  uint64_t v203;

  v1 = *(void **)(v0 + 360);
  if (!v1)
  {
    v3 = *(_QWORD *)(v0 + 344);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 288) + 8))(*(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 280));
    swift_release(v3);
    v4 = *(_QWORD *)(v0 + 336);
    goto LABEL_67;
  }
  sub_100090F70();
  if (v2)
  {
    v166 = Image.init(uiImage:)(v2);
    v167 = 0;
    v168 = 0;
  }
  else
  {
    v5 = sub_1000910FC();
    if (v6)
      v7 = v5;
    else
      v7 = 0;
    if (v6)
      v8 = v6;
    else
      v8 = 0;
    v166 = v7;
    v167 = v8;
    if (v6)
      v9 = 1;
    else
      v9 = -1;
    v168 = v9;
  }
  v10 = *(_QWORD *)(v0 + 240);
  v4 = *(_QWORD *)(v0 + 216);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v0 + 320))(v10, *(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 280));
  swift_storeEnumTagMultiPayload(v10, v4, 1);
  v11 = objc_msgSend(v1, "title");
  if (!v11)
    goto LABEL_59;
  v12 = v11;
  v4 = v0 + 16;
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v15 = v14;

  *(_QWORD *)(v0 + 16) = v13;
  *(_QWORD *)(v0 + 24) = v15;
  v16 = sub_100008A5C();
  v156 = Text.init<A>(_:)(v0 + 16, &type metadata for String, v16);
  v157 = v17;
  v19 = v18;
  v158 = v20;
  v170 = v1;
  v21 = objc_msgSend(v1, "informativeText");
  if (!v21)
  {
LABEL_60:
    sub_100036838(v166, v167, v168);
    __break(1u);
LABEL_61:
    sub_100036838(v166, v167, v168);
    __break(1u);
    goto LABEL_62;
  }
  v22 = v21;
  v183 = *(_QWORD *)(v0 + 280);
  v186 = *(_QWORD *)(v0 + 296);
  v23 = *(_QWORD *)(v0 + 240);
  v24 = *(_QWORD *)(v0 + 208);
  v25 = *(_QWORD *)(v0 + 192);
  v189 = *(_QWORD *)(v0 + 184);
  v196 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 320);
  v200 = *(_QWORD *)(v0 + 160);
  v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
  v28 = v27;

  *(_QWORD *)(v0 + 32) = v26;
  *(_QWORD *)(v0 + 40) = v28;
  v165 = v16;
  v29 = Text.init<A>(_:)(v0 + 32, &type metadata for String, v16);
  v31 = v30;
  v154 = v30;
  v155 = v32;
  v33 = v32;
  v151 = v34;
  LOBYTE(v26) = v34 & 1;
  v192 = v34 & 1;
  sub_1000076F0(v23, v24, type metadata accessor for PrimarySettingsListItemIdentifier);
  v35 = v24 + *(int *)(v25 + 20);
  *(_QWORD *)v35 = v156;
  *(_QWORD *)(v35 + 8) = v157;
  v153 = v19;
  *(_BYTE *)(v35 + 16) = v19 & 1;
  *(_QWORD *)(v35 + 24) = v158;
  *(_QWORD *)(v35 + 32) = v29;
  *(_QWORD *)(v35 + 40) = v31;
  *(_BYTE *)(v35 + 48) = v26;
  *(_QWORD *)(v35 + 56) = v33;
  *(_QWORD *)(v35 + 64) = v166;
  *(_QWORD *)(v35 + 72) = v167;
  *(_BYTE *)(v35 + 80) = v168;
  v164 = type metadata accessor for PrimarySettingsListFollowUpModel.ViewType(0);
  swift_storeEnumTagMultiPayload(v35, v164, 0);
  v196(v24 + *(int *)(v25 + 24), v186, v183);
  sub_1000076F0(v23, v189, type metadata accessor for PrimarySettingsListItemIdentifier);
  v36 = v189 + *(int *)(v200 + 20);
  sub_1000076F0(v24, v36, type metadata accessor for PrimarySettingsListFollowUpModel);
  v163 = type metadata accessor for PrimarySettingsListItemViewType(0);
  swift_storeEnumTagMultiPayload(v36, v163, 9);
  sub_100011774(v166, v167, v168);
  sub_10000BAD4(v156, v157, v19 & 1);
  swift_bridgeObjectRetain(v158);
  v152 = v29;
  sub_10000BAD4(v29, v154, v192);
  swift_bridgeObjectRetain(v155);
  sub_100011774(v166, v167, v168);
  v37 = sub_100052720(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
  v4 = *(_QWORD *)(v37 + 16);
  v38 = *(_QWORD *)(v37 + 24);
  v39 = (char **)(v4 + 1);
  if (v4 >= v38 >> 1)
    goto LABEL_40;
  while (1)
  {
    v40 = *(_QWORD *)(v0 + 184);
    v41 = *(_QWORD *)(v0 + 168);
    *(_QWORD *)(v37 + 16) = v39;
    v162 = (*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
    v161 = *(_QWORD *)(v41 + 72);
    sub_100007670(v40, v37 + v162 + v161 * v4, type metadata accessor for PrimarySettingsListItemModel);
    v42 = objc_msgSend(v170, "actions");
    if (!v42)
      goto LABEL_61;
    v43 = v42;
    v44 = sub_100096EF4();
    v45 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v43, v44);

    if ((unint64_t)v45 >> 62)
      break;
    v46 = *(_QWORD *)((v45 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v46)
      goto LABEL_45;
LABEL_21:
    v47 = 0;
    v159 = v46;
    v169 = v45 & 0xC000000000000001;
    v39 = &selRef_visibilityStyle;
    v160 = v45;
    while (1)
    {
      v48 = v169
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v47, v45)
          : *(id *)(v45 + 8 * v47 + 32);
      v49 = v48;
      v4 = v47 + 1;
      if (__OFADD__(v47, 1))
        break;
      v50 = objc_msgSend(v48, v39[99]);
      if (v50 || (v50 = objc_msgSend(v49, "label")) != 0)
      {
        v190 = (_QWORD *)(v47 + 1);
        v193 = v47;
        v197 = v37;
        v201 = v49;
        v51 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 320);
        v52 = *(_QWORD *)(v0 + 296);
        v53 = *(_QWORD *)(v0 + 280);
        v54 = v39;
        v55 = *(_QWORD *)(v0 + 232);

        v56 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v51(v55, v52, v53);
        v4 = (unint64_t)objc_msgSend(v201, v54[99]);
        if (!v4)
        {
          v4 = (unint64_t)objc_msgSend(v201, "label");
          if (!v4)
            goto LABEL_57;
        }
        v57 = (uint64_t *)(v55 + v56);
        v59 = *(_QWORD *)(v0 + 224);
        v58 = *(_QWORD *)(v0 + 232);
        v60 = *(_QWORD *)(v0 + 216);
        v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
        v63 = v62;

        *v57 = v61;
        v57[1] = v63;
        swift_storeEnumTagMultiPayload(v58, v60, 2);
        v64 = sub_1000076F0(v58, v59, type metadata accessor for PrimarySettingsListItemIdentifier);
        v65 = FLFollowUpInformation.groupIdentity.getter(v64);
        v66 = FLFollowUpInformation.restrictionEnabled.getter(v65);
        v67 = objc_msgSend(v170, "uniqueIdentifier");
        if (!v67)
        {
          sub_100036838(v166, v167, v168);
          __break(1u);
LABEL_56:
          sub_100036838(v166, v167, v168);
          __break(1u);
LABEL_57:
          sub_100036838(v166, v167, v168);
          __break(1u);
LABEL_58:
          sub_100036838(v166, v167, v168);
          __break(1u);
LABEL_59:
          sub_100036838(v166, v167, v168);
          __break(1u);
          goto LABEL_60;
        }
        v68 = v67;
        v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v67);
        v71 = v70;

        v4 = (unint64_t)objc_msgSend(v201, "identifier");
        if (!v4)
        {
          v4 = (unint64_t)objc_msgSend(v201, "label");
          if (!v4)
            goto LABEL_58;
        }
        v184 = v71;
        v187 = v69;
        v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
        v74 = v73;

        v75 = objc_msgSend(v201, "label");
        if (!v75)
          goto LABEL_56;
        v76 = v75;
        v182 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 320);
        v179 = *(_QWORD *)(v0 + 280);
        v180 = *(_QWORD *)(v0 + 296);
        v176 = *(_QWORD *)(v0 + 232);
        v173 = *(_QWORD *)(v0 + 224);
        v77 = *(_QWORD *)(v0 + 200);
        v177 = *(_QWORD *)(v0 + 192);
        v178 = *(_QWORD *)(v0 + 176);
        v78 = *(_QWORD *)(v0 + 152);
        v181 = *(_QWORD *)(v0 + 160);
        v79 = *(int **)(v0 + 144);
        v175 = *(_QWORD *)(v0 + 136);
        v171 = *(_QWORD *)(v0 + 120);
        v174 = *(_QWORD *)(v0 + 112);
        v80 = static String._unconditionallyBridgeFromObjectiveC(_:)(v75);
        v82 = v81;

        *(_QWORD *)(v0 + 48) = v80;
        *(_QWORD *)(v0 + 56) = v82;
        v83 = Text.init<A>(_:)(v0 + 48, &type metadata for String, v165);
        v85 = v84;
        LOBYTE(v80) = v86;
        v172 = v87;
        sub_100007670(v173, v78, type metadata accessor for PrimarySettingsListItemIdentifier);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v171 + 32))(v78 + v79[5], v175, v174);
        *(_BYTE *)(v78 + v79[6]) = v66 & 1;
        v88 = (uint64_t *)(v78 + v79[7]);
        *v88 = v187;
        v88[1] = v184;
        v89 = (uint64_t *)(v78 + v79[8]);
        *v89 = v72;
        v89[1] = v74;
        v90 = v78 + v79[9];
        *(_QWORD *)v90 = v83;
        *(_QWORD *)(v90 + 8) = v85;
        *(_BYTE *)(v90 + 16) = v80 & 1;
        *(_QWORD *)(v90 + 24) = v172;
        v91 = v78 + v79[10];
        *(_QWORD *)v91 = v166;
        *(_QWORD *)(v91 + 8) = v167;
        *(_BYTE *)(v91 + 16) = v168;
        sub_1000076F0(v176, v77, type metadata accessor for PrimarySettingsListItemIdentifier);
        v92 = v77 + *(int *)(v177 + 20);
        sub_1000076F0(v78, v92, type metadata accessor for PrimarySettingsListFollowUpActionModel);
        swift_storeEnumTagMultiPayload(v92, v164, 1);
        v182(v77 + *(int *)(v177 + 24), v180, v179);
        sub_1000076F0(v176, v178, type metadata accessor for PrimarySettingsListItemIdentifier);
        v93 = v178 + *(int *)(v181 + 20);
        sub_1000076F0(v77, v93, type metadata accessor for PrimarySettingsListFollowUpModel);
        swift_storeEnumTagMultiPayload(v93, v163, 9);
        sub_100011774(v166, v167, v168);
        v37 = v197;
        v95 = *(_QWORD *)(v197 + 16);
        v94 = *(_QWORD *)(v197 + 24);
        if (v95 >= v94 >> 1)
          v37 = sub_100052720(v94 > 1, v95 + 1, 1, v197);
        v46 = v159;
        v45 = v160;
        v47 = v193;
        v96 = *(_QWORD *)(v0 + 232);
        v97 = *(_QWORD *)(v0 + 200);
        v98 = *(_QWORD *)(v0 + 176);
        v99 = *(_QWORD *)(v0 + 152);
        *(_QWORD *)(v37 + 16) = v95 + 1;
        sub_100007670(v98, v37 + v162 + v95 * v161, type metadata accessor for PrimarySettingsListItemModel);

        sub_1000076B4(v97, type metadata accessor for PrimarySettingsListFollowUpModel);
        sub_1000076B4(v99, type metadata accessor for PrimarySettingsListFollowUpActionModel);
        sub_1000076B4(v96, type metadata accessor for PrimarySettingsListItemIdentifier);
        v39 = &selRef_visibilityStyle;
        v4 = (unint64_t)v190;
      }
      else
      {

      }
      ++v47;
      if (v4 == v46)
        goto LABEL_45;
    }
    __break(1u);
LABEL_40:
    v37 = sub_100052720(v38 > 1, (int64_t)v39, 1, v37);
  }
  if (v45 < 0)
    v100 = v45;
  else
    v100 = v45 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v45);
  v46 = _CocoaArrayWrapper.endIndex.getter(v100);
  swift_bridgeObjectRelease(v45);
  if (v46)
    goto LABEL_21;
LABEL_45:
  v198 = v37;
  v101 = *(unsigned int *)(v0 + 376);
  v103 = *(_QWORD *)(v0 + 120);
  v102 = *(_QWORD *)(v0 + 128);
  v105 = *(_QWORD *)(v0 + 104);
  v104 = *(_QWORD *)(v0 + 112);
  v107 = *(_QWORD *)(v0 + 88);
  v106 = *(_QWORD *)(v0 + 96);
  v108 = v45;
  v109 = *(_QWORD *)(v0 + 80);
  v110 = swift_bridgeObjectRelease(v108);
  v111 = FLFollowUpInformation.groupIdentity.getter(v110);
  FLFollowUpGroupIdentity.accountType.getter(v111);
  (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v102, v104);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v107 + 104))(v106, v101, v109);
  v112 = static FLAccountType.== infix(_:_:)(v105, v106);
  v113 = *(void (**)(uint64_t, uint64_t))(v107 + 8);
  v113(v106, v109);
  v113(v105, v109);
  v114 = objc_msgSend(v170, "uniqueIdentifier");
  v4 = (unint64_t)v114;
  if ((v112 & 1) == 0)
  {
    if (v114)
    {
      v202 = 1;
      goto LABEL_50;
    }
LABEL_63:
    sub_100036838(v166, v167, v168);
    __break(1u);
    goto LABEL_64;
  }
  if (!v114)
  {
LABEL_62:
    sub_100036838(v166, v167, v168);
    __break(1u);
    goto LABEL_63;
  }
  v202 = 0;
LABEL_50:
  v115 = *(_QWORD *)(v0 + 336);
  v116 = static String._unconditionallyBridgeFromObjectiveC(_:)(v114);
  v194 = v117;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v115);
  v4 = *(_QWORD *)(v0 + 336);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v4 = (unint64_t)sub_100052B58(0, *(_QWORD *)(v4 + 16) + 1, 1, *(_QWORD **)(v0 + 336));
  v120 = *(_QWORD *)(v4 + 16);
  v119 = *(_QWORD *)(v4 + 24);
  if (v120 >= v119 >> 1)
    v4 = (unint64_t)sub_100052B58((_QWORD *)(v119 > 1), v120 + 1, 1, (_QWORD *)v4);
  v121 = *(_QWORD *)(v0 + 344);
  v123 = *(_QWORD *)(v0 + 288);
  v122 = *(_QWORD *)(v0 + 296);
  v124 = *(_QWORD *)(v0 + 280);
  v125 = *(_QWORD *)(v0 + 240);
  v126 = *(_QWORD *)(v0 + 208);
  *(_QWORD *)(v4 + 16) = v120 + 1;
  v127 = (_QWORD *)(v4 + 96 * v120);
  v127[4] = v116;
  v127[5] = v194;
  *((_BYTE *)v127 + 48) = v202;
  *(_OWORD *)(v127 + 7) = 0u;
  *(_OWORD *)(v127 + 9) = 0u;
  *(_OWORD *)(v127 + 11) = 0u;
  *(_OWORD *)(v127 + 13) = 0u;
  v127[15] = v198;
  swift_release(v121);

  sub_100007618(v156, v157, v153 & 1);
  swift_bridgeObjectRelease(v158);
  sub_100007618(v152, v154, v151 & 1);
  swift_bridgeObjectRelease(v155);
  sub_100036838(v166, v167, v168);
  sub_100036838(v166, v167, v168);
  sub_1000076B4(v126, type metadata accessor for PrimarySettingsListFollowUpModel);
  sub_1000076B4(v125, type metadata accessor for PrimarySettingsListItemIdentifier);
  (*(void (**)(uint64_t, uint64_t))(v123 + 8))(v122, v124);
  while (1)
  {
LABEL_67:
    v128 = *(_QWORD *)(v0 + 328) + 1;
    if (v128 == *(_QWORD *)(v0 + 304))
    {
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
      v139 = *(_QWORD *)(v0 + 264);
      v138 = *(_QWORD *)(v0 + 272);
      v141 = *(_QWORD *)(v0 + 232);
      v140 = *(_QWORD *)(v0 + 240);
      v142 = *(_QWORD *)(v0 + 224);
      v144 = *(_QWORD *)(v0 + 200);
      v143 = *(_QWORD *)(v0 + 208);
      v145 = *(_QWORD *)(v0 + 184);
      v185 = *(_QWORD *)(v0 + 176);
      v188 = *(_QWORD *)(v0 + 152);
      v191 = *(_QWORD *)(v0 + 136);
      v195 = *(_QWORD *)(v0 + 128);
      v199 = *(_QWORD *)(v0 + 104);
      v203 = *(_QWORD *)(v0 + 96);
      swift_task_dealloc(*(_QWORD *)(v0 + 296));
      swift_task_dealloc(v138);
      swift_task_dealloc(v139);
      swift_task_dealloc(v140);
      swift_task_dealloc(v141);
      swift_task_dealloc(v142);
      swift_task_dealloc(v143);
      swift_task_dealloc(v144);
      swift_task_dealloc(v145);
      swift_task_dealloc(v185);
      swift_task_dealloc(v188);
      swift_task_dealloc(v191);
      swift_task_dealloc(v195);
      swift_task_dealloc(v199);
      swift_task_dealloc(v203);
      return (*(uint64_t (**)(unint64_t))(v0 + 8))(v4);
    }
LABEL_64:
    *(_QWORD *)(v0 + 328) = v128;
    *(_QWORD *)(v0 + 336) = v4;
    v129 = *(unsigned int *)(v0 + 372);
    v130 = *(_QWORD *)(v0 + 272);
    v132 = *(_QWORD *)(v0 + 256);
    v131 = *(_QWORD *)(v0 + 264);
    v133 = *(_QWORD *)(v0 + 248);
    v134 = (*(uint64_t (**)(_QWORD, unint64_t, _QWORD))(v0 + 320))(*(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 64)+ ((*(unsigned __int8 *)(v0 + 368) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 368))+ *(_QWORD *)(v0 + 312) * v128, *(_QWORD *)(v0 + 280));
    FLFollowUpInformation.renderStyle.getter(v134);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v132 + 104))(v131, v129, v133);
    v135 = static FLRenderStyle.== infix(_:_:)(v130, v131);
    v136 = *(void (**)(uint64_t, uint64_t))(v132 + 8);
    v136(v131, v133);
    v136(v130, v133);
    if ((v135 & 1) != 0)
    {
      v137 = *(_QWORD *)(*(_QWORD *)(v0 + 72) + 72);
      *(_QWORD *)(v0 + 344) = v137;
      if (v137)
        break;
    }
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 288) + 8))(*(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 280));
  }
  v147 = type metadata accessor for MainActor(0);
  v148 = swift_retain(v137);
  *(_QWORD *)(v0 + 352) = static MainActor.shared.getter(v148);
  v149 = dispatch thunk of Actor.unownedExecutor.getter(v147, &protocol witness table for MainActor);
  return swift_task_switch(sub_100095DD4, v149, v150);
}

uint64_t sub_100096B58()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100096B7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5[6] = a4;
  v5[7] = a5;
  v5[5] = a1;
  v6 = type metadata accessor for FollowUpInformationProviderSnapshot(0);
  v5[8] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MainActor(0);
  v5[9] = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  return swift_task_switch(sub_100096C0C, v8, v9);
}

uint64_t sub_100096C0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t *v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 72));
  v1 += 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v3 = *(uint64_t **)(v0 + 64);
    sub_1000076F0(*(_QWORD *)(v0 + 56), (uint64_t)v3, type metadata accessor for FollowUpInformationProviderSnapshot);
    sub_100092424(v3);
    swift_release(Strong);
  }
  v4 = *(_QWORD *)(v0 + 64);
  **(_BYTE **)(v0 + 40) = Strong == 0;
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100096CA8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;

  v1 = (int *)type metadata accessor for FollowUpInformationProviderSnapshot(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  v6 = v0 + v4;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 64));
  v7 = v0 + v4 + v1[11];
  v8 = type metadata accessor for FLFollowUpGroupSectionElement(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v10(v7, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[12]));
  v11 = v6 + v1[13];
  if (!v10(v11, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v11, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[14]));
  v12 = v6 + v1[15];
  if (!v10(v12, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v12, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[16]));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100096E1C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FollowUpInformationProviderSnapshot(0) - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc(dword_10015A68C);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_1000570A0;
  return sub_100096B7C(a1, v5, v6, v7, v8);
}

uint64_t sub_100096EB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FollowUpInformationProviderSnapshot(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_100096EF4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015A698;
  if (!qword_10015A698)
  {
    v1 = objc_opt_self(FLFollowUpAction);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10015A698);
  }
  return result;
}

uint64_t sub_100096F30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  id v8;
  uint64_t result;

  if (a2)
  {
    v8 = a6;
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRetain(a4);
  }
  return result;
}

void sub_100096F68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);

  }
}

unint64_t sub_100096FAC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100156FB8;
  if (!qword_100156FB8)
  {
    v1 = type metadata accessor for AnyCancellable(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for AnyCancellable, v1);
    atomic_store(result, (unint64_t *)&qword_100156FB8);
  }
  return result;
}

_QWORD *sub_100096FF4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  id v31;
  __int128 v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(a2, v7))
    {
      case 0u:
        v8 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
        v9 = a1;
        v10 = v7;
        v11 = 0;
        goto LABEL_14;
      case 1u:
        v13 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
        v9 = a1;
        v10 = v7;
        v11 = 1;
        goto LABEL_14;
      case 2u:
        v14 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
        v15 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v16 = (_QWORD *)((char *)a1 + v15);
        v17 = (_QWORD *)((char *)a2 + v15);
        v18 = v17[1];
        *v16 = *v17;
        v16[1] = v18;
        swift_bridgeObjectRetain(v18);
        v9 = a1;
        v10 = v7;
        v11 = 2;
        goto LABEL_14;
      case 3u:
        v19 = a2[1];
        *a1 = *a2;
        a1[1] = v19;
        v20 = a2[3];
        a1[2] = a2[2];
        a1[3] = v20;
        v21 = a2[5];
        a1[4] = a2[4];
        a1[5] = v21;
        v22 = a2[7];
        a1[6] = a2[6];
        a1[7] = v22;
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v22);
        v9 = a1;
        v10 = v7;
        v11 = 3;
        goto LABEL_14;
      case 4u:
        v23 = a2[1];
        *a1 = *a2;
        a1[1] = v23;
        v24 = a2[3];
        a1[2] = a2[2];
        a1[3] = v24;
        v25 = a2[5];
        a1[4] = a2[4];
        a1[5] = v25;
        a1[6] = a2[6];
        swift_bridgeObjectRetain(v23);
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v25);
        v9 = a1;
        v10 = v7;
        v11 = 4;
        goto LABEL_14;
      case 5u:
        v26 = a2[1];
        *a1 = *a2;
        a1[1] = v26;
        v27 = a2[3];
        a1[2] = a2[2];
        a1[3] = v27;
        v29 = (void *)a2[4];
        v28 = a2[5];
        a1[4] = v29;
        a1[5] = v28;
        v30 = a2[9];
        swift_bridgeObjectRetain(v26);
        swift_bridgeObjectRetain(v27);
        v31 = v29;
        swift_bridgeObjectRetain(v28);
        if (v30)
        {
          a1[9] = v30;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v30 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v30);
        }
        else
        {
          v32 = *((_OWORD *)a2 + 4);
          *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
          *((_OWORD *)a1 + 4) = v32;
        }
        v9 = a1;
        v10 = v7;
        v11 = 5;
LABEL_14:
        swift_storeEnumTagMultiPayload(v9, v10, v11);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
        break;
    }
    v33 = *(int *)(a3 + 20);
    v34 = (_QWORD *)((char *)a1 + v33);
    v35 = (_QWORD *)((char *)a2 + v33);
    v36 = v35[1];
    *v34 = *v35;
    v34[1] = v36;
    v37 = v35[3];
    v34[2] = v35[2];
    v34[3] = v37;
    v38 = v35[5];
    v34[4] = v35[4];
    v34[5] = v38;
    v39 = v35[7];
    v34[6] = v35[6];
    v34[7] = v39;
    swift_bridgeObjectRetain(v36);
    swift_bridgeObjectRetain(v37);
    swift_bridgeObjectRetain(v38);
    swift_bridgeObjectRetain(v39);
  }
  return a1;
}

uint64_t sub_1000972C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(a1, v4))
  {
    case 0u:
    case 1u:
      v5 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
      break;
    case 2u:
      v6 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
      v7 = sub_100004FC8(&qword_10015C420);
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v7 + 48) + 8));
      break;
    case 3u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
      break;
    case 4u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      break;
    case 5u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));

      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      if (*(_QWORD *)(a1 + 72))
        sub_100005474((_QWORD *)(a1 + 48));
      break;
    default:
      break;
  }
  v8 = (_QWORD *)(a1 + *(int *)(a2 + 20));
  swift_bridgeObjectRelease(v8[1]);
  swift_bridgeObjectRelease(v8[3]);
  swift_bridgeObjectRelease(v8[5]);
  return swift_bridgeObjectRelease(v8[7]);
}

_QWORD *sub_100097408(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  __int128 v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(a2, v6))
  {
    case 0u:
      v7 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 0;
      goto LABEL_12;
    case 1u:
      v11 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      v8 = a1;
      v9 = v6;
      v10 = 1;
      goto LABEL_12;
    case 2u:
      v12 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
      v13 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
      v14 = (_QWORD *)((char *)a1 + v13);
      v15 = (_QWORD *)((char *)a2 + v13);
      v16 = v15[1];
      *v14 = *v15;
      v14[1] = v16;
      swift_bridgeObjectRetain(v16);
      v8 = a1;
      v9 = v6;
      v10 = 2;
      goto LABEL_12;
    case 3u:
      v17 = a2[1];
      *a1 = *a2;
      a1[1] = v17;
      v18 = a2[3];
      a1[2] = a2[2];
      a1[3] = v18;
      v19 = a2[5];
      a1[4] = a2[4];
      a1[5] = v19;
      v20 = a2[7];
      a1[6] = a2[6];
      a1[7] = v20;
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v20);
      v8 = a1;
      v9 = v6;
      v10 = 3;
      goto LABEL_12;
    case 4u:
      v21 = a2[1];
      *a1 = *a2;
      a1[1] = v21;
      v22 = a2[3];
      a1[2] = a2[2];
      a1[3] = v22;
      v23 = a2[5];
      a1[4] = a2[4];
      a1[5] = v23;
      a1[6] = a2[6];
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v23);
      v8 = a1;
      v9 = v6;
      v10 = 4;
      goto LABEL_12;
    case 5u:
      v24 = a2[1];
      *a1 = *a2;
      a1[1] = v24;
      v25 = a2[3];
      a1[2] = a2[2];
      a1[3] = v25;
      v27 = (void *)a2[4];
      v26 = a2[5];
      a1[4] = v27;
      a1[5] = v26;
      v28 = a2[9];
      swift_bridgeObjectRetain(v24);
      swift_bridgeObjectRetain(v25);
      v29 = v27;
      swift_bridgeObjectRetain(v26);
      if (v28)
      {
        a1[9] = v28;
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v28 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v28);
      }
      else
      {
        v30 = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 4) = v30;
      }
      v8 = a1;
      v9 = v6;
      v10 = 5;
LABEL_12:
      swift_storeEnumTagMultiPayload(v8, v9, v10);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      break;
  }
  v31 = *(int *)(a3 + 20);
  v32 = (_QWORD *)((char *)a1 + v31);
  v33 = (_QWORD *)((char *)a2 + v31);
  v34 = v33[1];
  *v32 = *v33;
  v32[1] = v34;
  v35 = v33[3];
  v32[2] = v33[2];
  v32[3] = v35;
  v36 = v33[5];
  v32[4] = v33[4];
  v32[5] = v36;
  v37 = v33[7];
  v32[6] = v33[6];
  v32[7] = v37;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRetain(v37);
  return a1;
}

_QWORD *sub_1000976A8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  __int128 v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  if (a1 != a2)
  {
    sub_100013014((uint64_t)a1);
    v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(a2, v6))
    {
      case 0u:
        v7 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
        v8 = a1;
        v9 = v6;
        v10 = 0;
        goto LABEL_13;
      case 1u:
        v11 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
        v8 = a1;
        v9 = v6;
        v10 = 1;
        goto LABEL_13;
      case 2u:
        v12 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
        v13 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v14 = (_QWORD *)((char *)a1 + v13);
        v15 = (_QWORD *)((char *)a2 + v13);
        *v14 = *v15;
        v16 = v15[1];
        v14[1] = v16;
        swift_bridgeObjectRetain(v16);
        v8 = a1;
        v9 = v6;
        v10 = 2;
        goto LABEL_13;
      case 3u:
        *a1 = *a2;
        v17 = a2[1];
        a1[1] = v17;
        a1[2] = a2[2];
        v18 = a2[3];
        a1[3] = v18;
        a1[4] = a2[4];
        v19 = a2[5];
        a1[5] = v19;
        a1[6] = a2[6];
        v20 = a2[7];
        a1[7] = v20;
        swift_bridgeObjectRetain(v17);
        swift_bridgeObjectRetain(v18);
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        v8 = a1;
        v9 = v6;
        v10 = 3;
        goto LABEL_13;
      case 4u:
        *a1 = *a2;
        v21 = a2[1];
        a1[1] = v21;
        a1[2] = a2[2];
        v22 = a2[3];
        a1[3] = v22;
        a1[4] = a2[4];
        v23 = a2[5];
        a1[5] = v23;
        a1[6] = a2[6];
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v22);
        swift_bridgeObjectRetain(v23);
        v8 = a1;
        v9 = v6;
        v10 = 4;
        goto LABEL_13;
      case 5u:
        *a1 = *a2;
        v24 = a2[1];
        a1[1] = v24;
        a1[2] = a2[2];
        v25 = a2[3];
        a1[3] = v25;
        v26 = (void *)a2[4];
        a1[4] = v26;
        v27 = a2[5];
        a1[5] = v27;
        v28 = a2[9];
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v25);
        v29 = v26;
        swift_bridgeObjectRetain(v27);
        if (v28)
        {
          a1[9] = v28;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v28 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v28);
        }
        else
        {
          v30 = *((_OWORD *)a2 + 4);
          *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
          *((_OWORD *)a1 + 4) = v30;
        }
        v8 = a1;
        v9 = v6;
        v10 = 5;
LABEL_13:
        swift_storeEnumTagMultiPayload(v8, v9, v10);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
        break;
    }
  }
  v31 = *(int *)(a3 + 20);
  v32 = (_QWORD *)((char *)a1 + v31);
  v33 = (_QWORD *)((char *)a2 + v31);
  *v32 = *(_QWORD *)((char *)a2 + v31);
  v34 = *(_QWORD *)((char *)a2 + v31 + 8);
  v35 = *(_QWORD *)((char *)a1 + v31 + 8);
  v32[1] = v34;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRelease(v35);
  v32[2] = v33[2];
  v36 = v33[3];
  v37 = v32[3];
  v32[3] = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease(v37);
  v32[4] = v33[4];
  v38 = v33[5];
  v39 = v32[5];
  v32[5] = v38;
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRelease(v39);
  v32[6] = v33[6];
  v40 = v33[7];
  v41 = v32[7];
  v32[7] = v40;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRelease(v41);
  return a1;
}

char *sub_1000979F4(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  __int128 v16;

  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
  if (EnumCaseMultiPayload == 2)
  {
    v9 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
    v10 = sub_100004FC8(&qword_10015C420);
    *(_OWORD *)&a1[*(int *)(v10 + 48)] = *(_OWORD *)&a2[*(int *)(v10 + 48)];
    swift_storeEnumTagMultiPayload(a1, v6, 2);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v11 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    v8 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload(a1, v6, 0);
  }
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = *((_OWORD *)v14 + 1);
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *((_OWORD *)v13 + 1) = v15;
  v16 = *((_OWORD *)v14 + 3);
  *((_OWORD *)v13 + 2) = *((_OWORD *)v14 + 2);
  *((_OWORD *)v13 + 3) = v16;
  return a1;
}

char *sub_100097B34(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (a1 != a2)
  {
    sub_100013014((uint64_t)a1);
    v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
    if (EnumCaseMultiPayload == 2)
    {
      v9 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      v10 = sub_100004FC8(&qword_10015C420);
      *(_OWORD *)&a1[*(int *)(v10 + 48)] = *(_OWORD *)&a2[*(int *)(v10 + 48)];
      swift_storeEnumTagMultiPayload(a1, v6, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v11 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      v8 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload(a1, v6, 0);
    }
  }
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = *((_QWORD *)v14 + 1);
  v16 = *(_QWORD *)&a1[v12 + 8];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *((_QWORD *)v13 + 1) = v15;
  swift_bridgeObjectRelease(v16);
  v17 = *((_QWORD *)v14 + 3);
  v18 = *((_QWORD *)v13 + 3);
  *((_QWORD *)v13 + 2) = *((_QWORD *)v14 + 2);
  *((_QWORD *)v13 + 3) = v17;
  swift_bridgeObjectRelease(v18);
  v19 = *((_QWORD *)v14 + 5);
  v20 = *((_QWORD *)v13 + 5);
  *((_QWORD *)v13 + 4) = *((_QWORD *)v14 + 4);
  *((_QWORD *)v13 + 5) = v19;
  swift_bridgeObjectRelease(v20);
  v21 = *((_QWORD *)v14 + 7);
  v22 = *((_QWORD *)v13 + 7);
  *((_QWORD *)v13 + 6) = *((_QWORD *)v14 + 6);
  *((_QWORD *)v13 + 7) = v21;
  swift_bridgeObjectRelease(v22);
  return a1;
}

uint64_t sub_100097CB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100097CC0);
}

uint64_t sub_100097CC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100097D40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100097D4C);
}

uint64_t sub_100097D4C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for PrimarySettingsListSecondaryAppleAccountLinkModel(uint64_t a1)
{
  uint64_t result;

  result = qword_10015A6F8;
  if (!qword_10015A6F8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PrimarySettingsListSecondaryAppleAccountLinkModel);
  return result;
}

uint64_t sub_100097E04(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for PrimarySettingsListItemIdentifier(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "@";
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100097E78(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  uint64_t v25;
  uint64_t v26;

  sub_1000A103C(a1, a2);
  if ((v4 & 1) == 0)
    return 0;
  v5 = *(int *)(type metadata accessor for PrimarySettingsListSecondaryAppleAccountLinkModel(0) + 20);
  v6 = *(_QWORD *)(a1 + v5);
  v7 = *(_QWORD *)(a1 + v5 + 8);
  v8 = *(_QWORD *)(a1 + v5 + 16);
  v9 = *(_QWORD *)(a1 + v5 + 24);
  v10 = *(_QWORD *)(a1 + v5 + 32);
  v11 = *(_QWORD *)(a1 + v5 + 40);
  v25 = *(_QWORD *)(a1 + v5 + 56);
  v26 = *(_QWORD *)(a1 + v5 + 48);
  v12 = (_QWORD *)(a2 + v5);
  v13 = v12[1];
  v14 = v12[2];
  v15 = v12[3];
  v16 = v12[4];
  v17 = v12[5];
  v18 = v12[6];
  v19 = v12[7];
  v20 = v6 == *v12 && v7 == v13;
  if ((v20 || (_stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, *v12, v13, 0) & 1) != 0)
    && (v8 == v14 ? (v21 = v9 == v15) : (v21 = 0),
        (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, v14, v15, 0) & 1) != 0)
     && (v10 == v16 ? (v22 = v11 == v17) : (v22 = 0),
         (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, v16, v17, 0) & 1) != 0)
      && (v26 == v18 ? (v23 = v25 == v19) : (v23 = 0),
          v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(v26, v25, v18, v19, 0) & 1) != 0))))
  {
    return 1;
  }
  else
  {
    return 0;
  }
}

_QWORD *sub_100097F98(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  id v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  id v39;
  __int128 v40;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(a2, v7))
    {
      case 0u:
        v8 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
        v9 = a1;
        v10 = v7;
        v11 = 0;
        goto LABEL_14;
      case 1u:
        v13 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
        v9 = a1;
        v10 = v7;
        v11 = 1;
        goto LABEL_14;
      case 2u:
        v14 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
        v15 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v16 = (_QWORD *)((char *)a1 + v15);
        v17 = (_QWORD *)((char *)a2 + v15);
        v18 = v17[1];
        *v16 = *v17;
        v16[1] = v18;
        swift_bridgeObjectRetain(v18);
        v9 = a1;
        v10 = v7;
        v11 = 2;
        goto LABEL_14;
      case 3u:
        v19 = a2[1];
        *a1 = *a2;
        a1[1] = v19;
        v20 = a2[3];
        a1[2] = a2[2];
        a1[3] = v20;
        v21 = a2[5];
        a1[4] = a2[4];
        a1[5] = v21;
        v22 = a2[7];
        a1[6] = a2[6];
        a1[7] = v22;
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v22);
        v9 = a1;
        v10 = v7;
        v11 = 3;
        goto LABEL_14;
      case 4u:
        v23 = a2[1];
        *a1 = *a2;
        a1[1] = v23;
        v24 = a2[3];
        a1[2] = a2[2];
        a1[3] = v24;
        v25 = a2[5];
        a1[4] = a2[4];
        a1[5] = v25;
        a1[6] = a2[6];
        swift_bridgeObjectRetain(v23);
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v25);
        v9 = a1;
        v10 = v7;
        v11 = 4;
        goto LABEL_14;
      case 5u:
        v26 = a2[1];
        *a1 = *a2;
        a1[1] = v26;
        v27 = a2[3];
        a1[2] = a2[2];
        a1[3] = v27;
        v29 = (void *)a2[4];
        v28 = a2[5];
        a1[4] = v29;
        a1[5] = v28;
        v30 = a2[9];
        swift_bridgeObjectRetain(v26);
        swift_bridgeObjectRetain(v27);
        v31 = v29;
        swift_bridgeObjectRetain(v28);
        if (v30)
        {
          a1[9] = v30;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v30 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v30);
        }
        else
        {
          v32 = *((_OWORD *)a2 + 4);
          *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
          *((_OWORD *)a1 + 4) = v32;
        }
        v9 = a1;
        v10 = v7;
        v11 = 5;
LABEL_14:
        swift_storeEnumTagMultiPayload(v9, v10, v11);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
        break;
    }
    v33 = *(int *)(a3 + 20);
    v34 = (char *)a1 + v33;
    v35 = (char *)a2 + v33;
    v36 = *((_QWORD *)v35 + 1);
    if (v36)
    {
      *(_QWORD *)v34 = *(_QWORD *)v35;
      *((_QWORD *)v34 + 1) = v36;
      v37 = *((_QWORD *)v35 + 3);
      *((_QWORD *)v34 + 2) = *((_QWORD *)v35 + 2);
      *((_QWORD *)v34 + 3) = v37;
      v34[32] = v35[32];
      v38 = (void *)*((_QWORD *)v35 + 5);
      *((_QWORD *)v34 + 5) = v38;
      swift_bridgeObjectRetain(v36);
      swift_bridgeObjectRetain(v37);
      v39 = v38;
    }
    else
    {
      v40 = *((_OWORD *)v35 + 1);
      *(_OWORD *)v34 = *(_OWORD *)v35;
      *((_OWORD *)v34 + 1) = v40;
      *((_OWORD *)v34 + 2) = *((_OWORD *)v35 + 2);
    }
    *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  }
  return a1;
}

void sub_100098280(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(a1, v4))
  {
    case 0u:
    case 1u:
      v5 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
      break;
    case 2u:
      v6 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
      v7 = sub_100004FC8(&qword_10015C420);
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v7 + 48) + 8));
      break;
    case 3u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
      break;
    case 4u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      break;
    case 5u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));

      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      if (*(_QWORD *)(a1 + 72))
        sub_100005474((_QWORD *)(a1 + 48));
      break;
    default:
      break;
  }
  v8 = a1 + *(int *)(a2 + 20);
  v9 = *(_QWORD *)(v8 + 8);
  if (v9)
  {
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(*(_QWORD *)(v8 + 24));

  }
}

_QWORD *sub_1000983D0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  __int128 v38;

  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(a2, v6))
  {
    case 0u:
      v7 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 0;
      goto LABEL_12;
    case 1u:
      v11 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      v8 = a1;
      v9 = v6;
      v10 = 1;
      goto LABEL_12;
    case 2u:
      v12 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
      v13 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
      v14 = (_QWORD *)((char *)a1 + v13);
      v15 = (_QWORD *)((char *)a2 + v13);
      v16 = v15[1];
      *v14 = *v15;
      v14[1] = v16;
      swift_bridgeObjectRetain(v16);
      v8 = a1;
      v9 = v6;
      v10 = 2;
      goto LABEL_12;
    case 3u:
      v17 = a2[1];
      *a1 = *a2;
      a1[1] = v17;
      v18 = a2[3];
      a1[2] = a2[2];
      a1[3] = v18;
      v19 = a2[5];
      a1[4] = a2[4];
      a1[5] = v19;
      v20 = a2[7];
      a1[6] = a2[6];
      a1[7] = v20;
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v20);
      v8 = a1;
      v9 = v6;
      v10 = 3;
      goto LABEL_12;
    case 4u:
      v21 = a2[1];
      *a1 = *a2;
      a1[1] = v21;
      v22 = a2[3];
      a1[2] = a2[2];
      a1[3] = v22;
      v23 = a2[5];
      a1[4] = a2[4];
      a1[5] = v23;
      a1[6] = a2[6];
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v23);
      v8 = a1;
      v9 = v6;
      v10 = 4;
      goto LABEL_12;
    case 5u:
      v24 = a2[1];
      *a1 = *a2;
      a1[1] = v24;
      v25 = a2[3];
      a1[2] = a2[2];
      a1[3] = v25;
      v27 = (void *)a2[4];
      v26 = a2[5];
      a1[4] = v27;
      a1[5] = v26;
      v28 = a2[9];
      swift_bridgeObjectRetain(v24);
      swift_bridgeObjectRetain(v25);
      v29 = v27;
      swift_bridgeObjectRetain(v26);
      if (v28)
      {
        a1[9] = v28;
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v28 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v28);
      }
      else
      {
        v30 = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 4) = v30;
      }
      v8 = a1;
      v9 = v6;
      v10 = 5;
LABEL_12:
      swift_storeEnumTagMultiPayload(v8, v9, v10);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      break;
  }
  v31 = *(int *)(a3 + 20);
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = *((_QWORD *)v33 + 1);
  if (v34)
  {
    *(_QWORD *)v32 = *(_QWORD *)v33;
    *((_QWORD *)v32 + 1) = v34;
    v35 = *((_QWORD *)v33 + 3);
    *((_QWORD *)v32 + 2) = *((_QWORD *)v33 + 2);
    *((_QWORD *)v32 + 3) = v35;
    v32[32] = v33[32];
    v36 = (void *)*((_QWORD *)v33 + 5);
    *((_QWORD *)v32 + 5) = v36;
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRetain(v35);
    v37 = v36;
  }
  else
  {
    v38 = *((_OWORD *)v33 + 1);
    *(_OWORD *)v32 = *(_OWORD *)v33;
    *((_OWORD *)v32 + 1) = v38;
    *((_OWORD *)v32 + 2) = *((_OWORD *)v33 + 2);
  }
  *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

_QWORD *sub_10009868C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  id v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;

  if (a1 != a2)
  {
    sub_100013014((uint64_t)a1);
    v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(a2, v6))
    {
      case 0u:
        v7 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
        v8 = a1;
        v9 = v6;
        v10 = 0;
        goto LABEL_13;
      case 1u:
        v11 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
        v8 = a1;
        v9 = v6;
        v10 = 1;
        goto LABEL_13;
      case 2u:
        v12 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
        v13 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v14 = (_QWORD *)((char *)a1 + v13);
        v15 = (_QWORD *)((char *)a2 + v13);
        *v14 = *v15;
        v16 = v15[1];
        v14[1] = v16;
        swift_bridgeObjectRetain(v16);
        v8 = a1;
        v9 = v6;
        v10 = 2;
        goto LABEL_13;
      case 3u:
        *a1 = *a2;
        v17 = a2[1];
        a1[1] = v17;
        a1[2] = a2[2];
        v18 = a2[3];
        a1[3] = v18;
        a1[4] = a2[4];
        v19 = a2[5];
        a1[5] = v19;
        a1[6] = a2[6];
        v20 = a2[7];
        a1[7] = v20;
        swift_bridgeObjectRetain(v17);
        swift_bridgeObjectRetain(v18);
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        v8 = a1;
        v9 = v6;
        v10 = 3;
        goto LABEL_13;
      case 4u:
        *a1 = *a2;
        v21 = a2[1];
        a1[1] = v21;
        a1[2] = a2[2];
        v22 = a2[3];
        a1[3] = v22;
        a1[4] = a2[4];
        v23 = a2[5];
        a1[5] = v23;
        a1[6] = a2[6];
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v22);
        swift_bridgeObjectRetain(v23);
        v8 = a1;
        v9 = v6;
        v10 = 4;
        goto LABEL_13;
      case 5u:
        *a1 = *a2;
        v24 = a2[1];
        a1[1] = v24;
        a1[2] = a2[2];
        v25 = a2[3];
        a1[3] = v25;
        v26 = (void *)a2[4];
        a1[4] = v26;
        v27 = a2[5];
        a1[5] = v27;
        v28 = a2[9];
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v25);
        v29 = v26;
        swift_bridgeObjectRetain(v27);
        if (v28)
        {
          a1[9] = v28;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v28 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v28);
        }
        else
        {
          v30 = *((_OWORD *)a2 + 4);
          *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
          *((_OWORD *)a1 + 4) = v30;
        }
        v8 = a1;
        v9 = v6;
        v10 = 5;
LABEL_13:
        swift_storeEnumTagMultiPayload(v8, v9, v10);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
        break;
    }
  }
  v31 = *(int *)(a3 + 20);
  v32 = (uint64_t)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = *(_QWORD *)((char *)a1 + v31 + 8);
  v35 = *(_QWORD *)((char *)a2 + v31 + 8);
  if (v34)
  {
    if (v35)
    {
      *(_QWORD *)v32 = *(_QWORD *)v33;
      v36 = *((_QWORD *)v33 + 1);
      *(_QWORD *)(v32 + 8) = v36;
      swift_bridgeObjectRetain(v36);
      swift_bridgeObjectRelease(v34);
      *(_QWORD *)(v32 + 16) = *((_QWORD *)v33 + 2);
      v37 = *((_QWORD *)v33 + 3);
      v38 = *(_QWORD *)(v32 + 24);
      *(_QWORD *)(v32 + 24) = v37;
      swift_bridgeObjectRetain(v37);
      swift_bridgeObjectRelease(v38);
      *(_BYTE *)(v32 + 32) = v33[32];
      v39 = *(void **)(v32 + 40);
      v40 = (void *)*((_QWORD *)v33 + 5);
      *(_QWORD *)(v32 + 40) = v40;
      v41 = v40;

    }
    else
    {
      sub_100098A44(v32);
      v47 = *((_OWORD *)v33 + 1);
      v46 = *((_OWORD *)v33 + 2);
      *(_OWORD *)v32 = *(_OWORD *)v33;
      *(_OWORD *)(v32 + 16) = v47;
      *(_OWORD *)(v32 + 32) = v46;
    }
  }
  else if (v35)
  {
    *(_QWORD *)v32 = *(_QWORD *)v33;
    v42 = *((_QWORD *)v33 + 1);
    *(_QWORD *)(v32 + 8) = v42;
    *(_QWORD *)(v32 + 16) = *((_QWORD *)v33 + 2);
    v43 = *((_QWORD *)v33 + 3);
    *(_QWORD *)(v32 + 24) = v43;
    *(_BYTE *)(v32 + 32) = v33[32];
    v44 = (void *)*((_QWORD *)v33 + 5);
    *(_QWORD *)(v32 + 40) = v44;
    swift_bridgeObjectRetain(v42);
    swift_bridgeObjectRetain(v43);
    v45 = v44;
  }
  else
  {
    v48 = *(_OWORD *)v33;
    v49 = *((_OWORD *)v33 + 2);
    *(_OWORD *)(v32 + 16) = *((_OWORD *)v33 + 1);
    *(_OWORD *)(v32 + 32) = v49;
    *(_OWORD *)v32 = v48;
  }
  *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_100098A44(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004FC8(&qword_100157900);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *sub_100098A84(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;

  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
  if (EnumCaseMultiPayload == 2)
  {
    v9 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
    v10 = sub_100004FC8(&qword_10015C420);
    *(_OWORD *)&a1[*(int *)(v10 + 48)] = *(_OWORD *)&a2[*(int *)(v10 + 48)];
    swift_storeEnumTagMultiPayload(a1, v6, 2);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v11 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    v8 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload(a1, v6, 0);
  }
  v12 = *(int *)(a3 + 20);
  v13 = *(int *)(a3 + 24);
  v14 = &a1[v12];
  v15 = &a2[v12];
  v16 = *((_OWORD *)v15 + 1);
  *(_OWORD *)v14 = *(_OWORD *)v15;
  *((_OWORD *)v14 + 1) = v16;
  *((_OWORD *)v14 + 2) = *((_OWORD *)v15 + 2);
  a1[v13] = a2[v13];
  return a1;
}

char *sub_100098BCC(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  __int128 v20;

  if (a1 != a2)
  {
    sub_100013014((uint64_t)a1);
    v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
    if (EnumCaseMultiPayload == 2)
    {
      v9 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      v10 = sub_100004FC8(&qword_10015C420);
      *(_OWORD *)&a1[*(int *)(v10 + 48)] = *(_OWORD *)&a2[*(int *)(v10 + 48)];
      swift_storeEnumTagMultiPayload(a1, v6, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v11 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      v8 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload(a1, v6, 0);
    }
  }
  v12 = *(int *)(a3 + 20);
  v13 = (uint64_t)&a1[v12];
  v14 = &a2[v12];
  v15 = *(_QWORD *)&a1[v12 + 8];
  if (!v15)
    goto LABEL_13;
  v16 = *((_QWORD *)v14 + 1);
  if (!v16)
  {
    sub_100098A44(v13);
LABEL_13:
    v20 = *((_OWORD *)v14 + 1);
    *(_OWORD *)v13 = *(_OWORD *)v14;
    *(_OWORD *)(v13 + 16) = v20;
    *(_OWORD *)(v13 + 32) = *((_OWORD *)v14 + 2);
    goto LABEL_14;
  }
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_QWORD *)(v13 + 8) = v16;
  swift_bridgeObjectRelease(v15);
  v17 = *((_QWORD *)v14 + 3);
  v18 = *(_QWORD *)(v13 + 24);
  *(_QWORD *)(v13 + 16) = *((_QWORD *)v14 + 2);
  *(_QWORD *)(v13 + 24) = v17;
  swift_bridgeObjectRelease(v18);
  *(_BYTE *)(v13 + 32) = v14[32];
  v19 = *(void **)(v13 + 40);
  *(_QWORD *)(v13 + 40) = *((_QWORD *)v14 + 5);

LABEL_14:
  a1[*(int *)(a3 + 24)] = a2[*(int *)(a3 + 24)];
  return a1;
}

uint64_t sub_100098D80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100098D8C);
}

uint64_t sub_100098D8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_100098E18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100098E24);
}

uint64_t sub_100098E24(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  return result;
}

uint64_t type metadata accessor for PrimarySettingsListAppleAccountLinkModel(uint64_t a1)
{
  uint64_t result;

  result = qword_10015A788;
  if (!qword_10015A788)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PrimarySettingsListAppleAccountLinkModel);
  return result;
}

uint64_t sub_100098EDC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for PrimarySettingsListItemIdentifier(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "0";
    v4[2] = &unk_1001182C8;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100098F58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  char v7;
  _BYTE v9[48];
  _BYTE v10[48];

  sub_1000A103C(a1, a2);
  if ((v6 & 1) != 0
    && (sub_100018BA0(a1 + *(int *)(a3 + 20), (uint64_t)v9),
        sub_100018BA0(a2 + *(int *)(a3 + 20), (uint64_t)v10),
        (sub_1000A8380((uint64_t)v9, (uint64_t)v10) & 1) != 0))
  {
    v7 = *(_BYTE *)(a1 + *(int *)(a3 + 24)) ^ *(_BYTE *)(a2 + *(int *)(a3 + 24)) ^ 1;
  }
  else
  {
    v7 = 0;
  }
  return v7 & 1;
}

int *sub_100098FEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *result;
  void *v11;
  int appleInternalInstallCapability;
  uint64_t v13;
  _QWORD *v14;

  v6 = *v2;
  v5 = v2[1];
  v7 = static Alignment.center.getter(a1);
  v9 = v8;
  result = (int *)(id)MobileGestalt_get_current_device();
  if (result)
  {
    v11 = result;
    appleInternalInstallCapability = MobileGestalt_get_appleInternalInstallCapability();

    if (appleInternalInstallCapability)
    {
      swift_retain(v5);
    }
    else
    {
      v6 = 0;
      v5 = 0;
    }
    v13 = sub_100004FC8(&qword_10015A7F8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a2, a1, v13);
    result = (int *)sub_100004FC8(&qword_10015A800);
    v14 = (_QWORD *)(a2 + result[9]);
    *v14 = v6;
    v14[1] = v5;
    v14[2] = v7;
    v14[3] = v9;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1000990B0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  objc_class *v3;
  char *v4;
  char *v5;
  objc_super v7;

  v2 = *v0;
  v1 = v0[1];
  v3 = (objc_class *)type metadata accessor for SettingsAppDebugMenuGestureProxyView();
  v4 = (char *)objc_allocWithZone(v3);
  v5 = &v4[OBJC_IVAR____TtC11SettingsAppP33_F16170C8CD22B033163CFC9AD59D599336SettingsAppDebugMenuGestureProxyView_perform];
  *(_QWORD *)v5 = v2;
  *((_QWORD *)v5 + 1) = v1;
  v7.receiver = v4;
  v7.super_class = v3;
  swift_retain(v1);
  return objc_msgSendSuper2(&v7, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
}

uint64_t sub_10009913C(uint64_t a1, char a2)
{
  return UIViewRepresentable.sizeThatFits(_:uiView:context:)(a1, a2 & 1);
}

uint64_t sub_10009917C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10009978C();
  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000991CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10009978C();
  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_10009921C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10009978C();
  UIViewRepresentable.body.getter(a1, v2);
  __break(1u);
}

void sub_100099298(void *a1)
{
  void *v1;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  _QWORD v8[5];
  uint64_t v9;
  objc_super v10;

  v10.receiver = v1;
  v10.super_class = (Class)type metadata accessor for SettingsAppDebugMenuGestureProxyView();
  objc_msgSendSuper2(&v10, "willMoveToWindow:", a1);
  if (a1)
  {
    v3 = objc_msgSend(a1, "windowScene");
    if (v3)
    {
      v4 = v3;
      v5 = objc_msgSend(v3, "statusBarManager");

      if (v5)
      {
        v6 = swift_allocObject(&unk_10014B5C0, 24, 7);
        swift_unknownObjectWeakInit(v6 + 16, v1);
        v8[4] = sub_100099540;
        v9 = v6;
        v8[0] = _NSConcreteStackBlock;
        v8[1] = 1107296256;
        v8[2] = sub_100005350;
        v8[3] = &unk_10014B5D8;
        v7 = _Block_copy(v8);
        swift_release(v9);
        objc_msgSend(v5, "setDebugMenuHandler:", v7);
        _Block_release(v7);

      }
    }
  }
}

uint64_t sub_1000993B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  void *v3;
  uint64_t v4;
  void (*v5)(void);
  _BYTE v6[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v6, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v1);
  if (result)
  {
    v3 = (void *)result;
    v5 = *(void (**)(void))(result
                          + OBJC_IVAR____TtC11SettingsAppP33_F16170C8CD22B033163CFC9AD59D599336SettingsAppDebugMenuGestureProxyView_perform);
    v4 = *(_QWORD *)(result
                   + OBJC_IVAR____TtC11SettingsAppP33_F16170C8CD22B033163CFC9AD59D599336SettingsAppDebugMenuGestureProxyView_perform
                   + 8);
    swift_retain(v4);

    v5();
    return swift_release(v4);
  }
  return result;
}

id sub_1000994B4()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SettingsAppDebugMenuGestureProxyView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SettingsAppDebugMenuGestureProxyView()
{
  return objc_opt_self(_TtC11SettingsAppP33_F16170C8CD22B033163CFC9AD59D599336SettingsAppDebugMenuGestureProxyView);
}

uint64_t sub_10009951C()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100099540()
{
  uint64_t v0;

  return sub_1000993B8(v0);
}

ValueMetadata *type metadata accessor for DebugMenuModifier()
{
  return &type metadata for DebugMenuModifier;
}

uint64_t sub_100099564(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10012AED4, 1);
}

_QWORD *initializeBufferWithCopyOfBuffer for SettingsAppDebugMenuGesture(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain(v3);
  return a1;
}

uint64_t destroy for SettingsAppDebugMenuGesture(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 8));
}

_QWORD *_s11SettingsApp17DebugMenuModifierVwca_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain(v3);
  swift_release(v4);
  return a1;
}

uint64_t assignWithTake for SettingsAppDebugMenuGesture(uint64_t a1, _OWORD *a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *a2;
  swift_release(v3);
  return a1;
}

uint64_t _s11SettingsApp17DebugMenuModifierVwet_0(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_100099658(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SettingsAppDebugMenuGesture()
{
  return &type metadata for SettingsAppDebugMenuGesture;
}

unint64_t sub_1000996A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015A808;
  if (!qword_10015A808)
  {
    v1 = sub_100005430(&qword_10015A800);
    sub_100007868(&qword_10015A810, &qword_10015A7F8, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_100007868(&qword_10015A818, &qword_10015A820, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015A808);
  }
  return result;
}

unint64_t sub_100099748()
{
  unint64_t result;

  result = qword_10015A828;
  if (!qword_10015A828)
  {
    result = swift_getWitnessTable(&unk_1001183CC, &type metadata for SettingsAppDebugMenuGesture);
    atomic_store(result, (unint64_t *)&qword_10015A828);
  }
  return result;
}

unint64_t sub_10009978C()
{
  unint64_t result;

  result = qword_10015A830;
  if (!qword_10015A830)
  {
    result = swift_getWitnessTable(&unk_10011841C, &type metadata for SettingsAppDebugMenuGesture);
    atomic_store(result, (unint64_t *)&qword_10015A830);
  }
  return result;
}

uint64_t sub_1000997DC(uint64_t *a1, uint64_t *a2)
{
  return sub_10009AF80(*a1, a1[1], *a2, a2[1]);
}

id sub_1000997F0()
{
  char *v0;
  objc_class *ObjectType;
  void *v2;
  void *v3;
  objc_super v5;

  ObjectType = (objc_class *)swift_getObjectType(v0);
  v2 = *(void **)&v0[OBJC_IVAR____TtC11SettingsApp25SatelliteListItemProvider_stewieStateMonitor];
  *(_QWORD *)&v0[OBJC_IVAR____TtC11SettingsApp25SatelliteListItemProvider_stewieStateMonitor] = 0;

  v3 = *(void **)&v0[OBJC_IVAR____TtC11SettingsApp25SatelliteListItemProvider_idsOffGridStateManager];
  *(_QWORD *)&v0[OBJC_IVAR____TtC11SettingsApp25SatelliteListItemProvider_idsOffGridStateManager] = 0;

  v5.receiver = v0;
  v5.super_class = ObjectType;
  return objc_msgSendSuper2(&v5, "dealloc");
}

uint64_t sub_100099954()
{
  return type metadata accessor for SatelliteListItemProvider(0);
}

uint64_t type metadata accessor for SatelliteListItemProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_10015A888;
  if (!qword_10015A888)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SatelliteListItemProvider);
  return result;
}

uint64_t sub_100099998@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  os_unfair_lock_s *v20;
  os_unfair_lock_s *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v59 = a2;
  v58 = (int *)type metadata accessor for PrimarySettingsListValueLinkModel(0);
  __chkstk_darwin(v58);
  v57 = (uint64_t)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004FC8((uint64_t *)&unk_100156F00);
  __chkstk_darwin(v8);
  v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PrimarySettingsListItemModel(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = v2 + OBJC_IVAR____TtC11SettingsApp25SatelliteListItemProvider_id;
  sub_1000076F0(v2 + OBJC_IVAR____TtC11SettingsApp25SatelliteListItemProvider_id, (uint64_t)v7, type metadata accessor for PrimarySettingsListItemIdentifier);
  v15 = type metadata accessor for StaticPrimarySettingsListItemProvider(0);
  v16 = swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  sub_100007670((uint64_t)v7, v16 + OBJC_IVAR____TtC11SettingsApp37StaticPrimarySettingsListItemProvider_id, type metadata accessor for PrimarySettingsListItemIdentifier);
  sub_1000B2604(a1, (uint64_t)v10);
  swift_setDeallocating(v16);
  sub_1000076B4(v16 + OBJC_IVAR____TtC11SettingsApp37StaticPrimarySettingsListItemProvider_id, type metadata accessor for PrimarySettingsListItemIdentifier);
  swift_deallocClassInstance(v16, *(unsigned int *)(*(_QWORD *)v16 + 48), *(unsigned __int16 *)(*(_QWORD *)v16 + 52));
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_100020148((uint64_t)v10);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(v59, 1, 1, v11);
  }
  else
  {
    v18 = sub_100007670((uint64_t)v10, (uint64_t)v14, type metadata accessor for PrimarySettingsListItemModel);
    __chkstk_darwin(v18);
    v55 = v19;
    v21 = v20 + 4;
    os_unfair_lock_lock(v20 + 4);
    sub_10009AEB8(&v60);
    v22 = v60;
    v23 = v61;
    os_unfair_lock_unlock(v21);
    switch(v23)
    {
      case 0:
        v53 = v12;
        v54 = v14;
        v24 = LocalizedStringKey.init(stringLiteral:)(0x657463656E6E6F43, 0xE900000000000064);
        goto LABEL_9;
      case 1:
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(v59, 1, 1, v11);
        sub_100099EF8(v55);
        v30 = (uint64_t)v14;
        return sub_1000076B4(v30, type metadata accessor for PrimarySettingsListItemModel);
      case 2:
        v53 = v12;
        v54 = v14;
        v24 = LocalizedStringKey.init(stringLiteral:)(0x455441535F46464FLL, 0xED00004554494C4CLL);
        goto LABEL_9;
      case 3:
        v53 = v12;
        v54 = v14;
        v24 = LocalizedStringKey.init(stringLiteral:)(0x6E6E6F4320746F4ELL, 0xED00006465746365);
LABEL_9:
        v26 = Text.init(_:tableName:bundle:comment:)(v24);
        break;
      default:
        v53 = v12;
        v54 = v14;
        v60 = v22;
        v61 = v23;
        v25 = sub_100008A5C();
        v26 = Text.init<A>(_:)(&v60, &type metadata for String, v25);
        break;
    }
    v31 = v26;
    v32 = v27;
    v33 = v29;
    v34 = v28 & 1;
    v35 = v57;
    sub_1000076F0(v56, v57, type metadata accessor for PrimarySettingsListItemIdentifier);
    sub_10000BAD4(v31, v32, v34);
    swift_bridgeObjectRetain(v33);
    v36 = LocalizedStringKey.init(stringLiteral:)(0x74696C6C65746153, 0xE900000000000065);
    v37 = Text.init(_:tableName:bundle:comment:)(v36);
    v39 = v38;
    v41 = v40;
    v43 = v42;
    sub_10000BAFC(v31, v32, v34, v33);
    v44 = v58;
    v45 = v58[9];
    v46 = v35 + v58[8];
    *(_BYTE *)(v35 + v58[5]) = 0;
    v47 = v35 + v44[6];
    *(_QWORD *)v47 = v37;
    *(_QWORD *)(v47 + 8) = v39;
    *(_BYTE *)(v47 + 16) = v41 & 1;
    *(_QWORD *)(v47 + 24) = v43;
    v48 = v35 + v44[7];
    *(_QWORD *)v48 = v31;
    *(_QWORD *)(v48 + 8) = v32;
    *(_BYTE *)(v48 + 16) = v34;
    *(_QWORD *)(v48 + 24) = v33;
    *(_QWORD *)v46 = 0;
    *(_QWORD *)(v46 + 8) = 0;
    *(_BYTE *)(v46 + 16) = -1;
    *(_BYTE *)(v35 + v45) = 0;
    v49 = (uint64_t)v54;
    v50 = (uint64_t)&v54[*(int *)(v11 + 20)];
    sub_1000076B4(v50, type metadata accessor for PrimarySettingsListItemViewType);
    sub_100007670(v35, v50, type metadata accessor for PrimarySettingsListValueLinkModel);
    v51 = type metadata accessor for PrimarySettingsListItemViewType(0);
    swift_storeEnumTagMultiPayload(v50, v51, 8);
    v52 = v59;
    sub_1000076F0(v49, v59, type metadata accessor for PrimarySettingsListItemModel);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v53 + 56))(v52, 0, 1, v11);
    sub_100099EF8(v55);
    v30 = v49;
    return sub_1000076B4(v30, type metadata accessor for PrimarySettingsListItemModel);
  }
}

void sub_100099EF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  unsigned int v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD aBlock[5];
  uint64_t v22;

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = objc_msgSend((id)objc_opt_self(PSLaunchTracker), "sharedInstance");
  v11 = objc_msgSend(v10, "launchHasCompleted");

  if (v11)
  {
    v19 = v3;
    if (qword_100156D60 != -1)
      swift_once(&qword_100156D60, sub_1000D34BC);
    v12 = swift_allocObject(&unk_10014B8A8, 24, 7);
    swift_unknownObjectWeakInit(v12 + 16, a1);
    aBlock[4] = sub_10009AF48;
    v22 = v12;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100005350;
    aBlock[3] = &unk_10014B8C0;
    v13 = _Block_copy(aBlock);
    swift_retain(v12);
    static DispatchQoS.unspecified.getter(v14);
    v20 = _swiftEmptyArrayStorage;
    v15 = sub_100012ED8();
    v16 = sub_100004FC8((uint64_t *)&unk_100156F40);
    v17 = sub_10000551C();
    dispatch thunk of SetAlgebra.init<A>(_:)(&v20, v16, v17, v2, v15);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v5, v13);
    _Block_release(v13);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v5, v2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v18 = v22;
    swift_release(v12);
    swift_release(v18);
  }
}

void sub_10009A134()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;

  v2 = v0;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (uint64_t *)((char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100156D60 != -1)
    swift_once(&qword_100156D60, sub_1000D34BC);
  v7 = (void *)qword_10015D420;
  *v6 = qword_10015D420;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  v8 = v7;
  v9 = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_20:
    swift_once(&qword_100156CC0, sub_10008BE7C);
LABEL_16:
    v24 = type metadata accessor for Logger(0);
    sub_100007808(v24, (uint64_t)qword_10015D2F8);
    swift_errorRetain(v9);
    v25 = swift_errorRetain(v9);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(12, -1);
      v29 = (void *)swift_slowAlloc(32, -1);
      v36 = v29;
      *(_DWORD *)v28 = 136446210;
      v34 = v9;
      swift_errorRetain(v9);
      v30 = sub_100004FC8(&qword_10015A970);
      v31 = String.init<A>(describing:)(&v34, v30);
      v33 = v32;
      v34 = sub_1000DA1F0(v31, v32, (uint64_t *)&v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v28 + 4, v28 + 12);
      swift_bridgeObjectRelease(v33);
      swift_errorRelease(v9);
      swift_errorRelease(v9);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Error initializing IDSOffGridStateManager: %{public}s", v28, 0xCu);
      swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v28, -1, -1);

      swift_errorRelease(v9);
    }
    else
    {
      swift_errorRelease(v9);
      swift_errorRelease(v9);
      swift_errorRelease(v9);

    }
    goto LABEL_8;
  }
  v10 = OBJC_IVAR____TtC11SettingsApp25SatelliteListItemProvider_stewieStateMonitor;
  v1 = *(_QWORD *)(v2 + OBJC_IVAR____TtC11SettingsApp25SatelliteListItemProvider_stewieStateMonitor);
  if (!v1)
  {
    v11 = objc_msgSend(objc_allocWithZone((Class)CTStewieStateMonitor), "initWithDelegate:queue:", v2, qword_10015D420);
    v12 = *(void **)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v11;

    v13 = *(void **)(v2 + v10);
    if (v13)
      objc_msgSend(v13, "start");
  }
  v14 = OBJC_IVAR____TtC11SettingsApp25SatelliteListItemProvider_idsOffGridStateManager;
  if (*(_QWORD *)(v2 + OBJC_IVAR____TtC11SettingsApp25SatelliteListItemProvider_idsOffGridStateManager))
  {
LABEL_8:
    if (v1)
      return;
    goto LABEL_13;
  }
  v15 = (void *)qword_10015D420;
  v16 = objc_allocWithZone((Class)IDSOffGridStateManager);
  v36 = 0;
  v17 = v15;
  v18 = objc_msgSend(v16, "initWithQueue:error:", v17, &v36);
  v19 = v36;
  if (!v18)
  {
    v22 = v19;
    v9 = _convertNSErrorToError(_:)(v19);

    swift_willThrow(v23);
    if (qword_100156CC0 == -1)
      goto LABEL_16;
    goto LABEL_20;
  }

  v20 = *(void **)(v2 + v14);
  *(_QWORD *)(v2 + v14) = v18;

  v21 = *(void **)(v2 + v14);
  if (v21)
    objc_msgSend(v21, "setDelegate:", v2);
LABEL_13:
  sub_10009A4F0();
}

uint64_t sub_10009A4F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  id v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t v12;

  v1 = type metadata accessor for DispatchPredicate(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (uint64_t *)((char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100156D60 != -1)
    swift_once(&qword_100156D60, sub_1000D34BC);
  v5 = qword_10015D420;
  *v4 = qword_10015D420;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  v6 = (id)v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)(v4);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) != 0)
  {
    v8 = sub_10009A778(v0);
    v10 = v9;
    v11 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                         + OBJC_IVAR____TtC11SettingsApp25SatelliteListItemProvider_satelliteStateLock)
                             + 16);
    os_unfair_lock_lock(v11);
    sub_10009A628(v0, v8, v10);
    os_unfair_lock_unlock(v11);
    return sub_10009AF50(v8, v10);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10009A628(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  BOOL v12;
  _QWORD v13[2];
  char v14;

  v6 = (uint64_t *)(a1 + OBJC_IVAR____TtC11SettingsApp25SatelliteListItemProvider_satelliteState);
  v7 = *(_QWORD *)(a1 + OBJC_IVAR____TtC11SettingsApp25SatelliteListItemProvider_satelliteState + 8);
  switch(a3)
  {
    case 3:
      if (v7 == 3)
        goto LABEL_13;
      break;
    case 2:
      if (v7 == 2)
        goto LABEL_13;
      break;
    case 1:
      if (v7 == 1)
        goto LABEL_13;
      break;
    default:
      if ((unint64_t)(v7 - 1) >= 3)
      {
        v11 = *v6;
        if (!a3)
        {
          if (!v7)
          {
            sub_10009AF68(a2, 0);
            sub_10009AF68(v11, 0);
            goto LABEL_13;
          }
          break;
        }
        if (v7)
        {
          v12 = v11 == a2 && v7 == a3;
          if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)(a2, a3, *v6, v7, 0) & 1) != 0)
          {
            swift_bridgeObjectRetain(a3);
            goto LABEL_13;
          }
        }
      }
      swift_bridgeObjectRetain(a3);
      break;
  }
  sub_100007C2C((_QWORD *)(a1 + OBJC_IVAR____TtC11SettingsApp25SatelliteListItemProvider_invalidator), *(_QWORD *)(a1 + OBJC_IVAR____TtC11SettingsApp25SatelliteListItemProvider_invalidator + 24));
  v13[0] = "Satellite state changed";
  v13[1] = 23;
  v14 = 2;
  PassthroughSubject.send(_:)(v13);
LABEL_13:
  v8 = *v6;
  v9 = v6[1];
  *v6 = a2;
  v6[1] = a3;
  return sub_10009AF50(v8, v9);
}

uint64_t sub_10009A778(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v6;
  id v7;

  v2 = *(void **)(a1 + OBJC_IVAR____TtC11SettingsApp25SatelliteListItemProvider_stewieStateMonitor);
  if (v2)
  {
    v3 = objc_msgSend(v2, "getState");
    if (v3)
    {
      v4 = v3;
      if (objc_msgSend(v3, "displayStewieInStatusBar")
        && !objc_msgSend(v4, "isStewieActiveOverBB")
        && (v6 = *(void **)(a1 + OBJC_IVAR____TtC11SettingsApp25SatelliteListItemProvider_idsOffGridStateManager)) != 0)
      {
        v7 = v6;
        objc_msgSend(v7, "offGridMode");

      }
      else
      {

      }
    }
  }
  return 0;
}

uint64_t sub_10009A87C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  result = type metadata accessor for PrimarySettingsListItemIdentifier(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[2] = &unk_100118500;
    v4[3] = &unk_100118518;
    v4[4] = &unk_100118530;
    v4[5] = &unk_100118530;
    result = swift_updateClassMetadata2(a1, 256, 6, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_10009A914@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_1000076F0(*v1 + OBJC_IVAR____TtC11SettingsApp25SatelliteListItemProvider_id, a1, type metadata accessor for PrimarySettingsListItemIdentifier);
}

uint64_t sub_10009A944@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100099998(a1, a2);
}

uint64_t sub_10009A964(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  NSObject **v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;

  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100156D60 != -1)
    swift_once(&qword_100156D60, sub_1000D34BC);
  v6 = qword_10015D420;
  *v5 = qword_10015D420;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  v7 = (id)v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v5);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) != 0)
  {
    if (qword_100156CC0 == -1)
      goto LABEL_5;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100156CC0, sub_10008BE7C);
LABEL_5:
  v8 = type metadata accessor for Logger(0);
  sub_100007808(v8, (uint64_t)qword_10015D2F8);
  v9 = a1;
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = (NSObject **)swift_slowAlloc(8, -1);
    *(_DWORD *)v12 = 138543362;
    v18 = v9;
    v14 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v12 + 4, v12 + 12);
    *v13 = v9;

    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Satellite state changed to %{public}@", v12, 0xCu);
    v15 = sub_100004FC8(&qword_10015AF10);
    swift_arrayDestroy(v13, 1, v15);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }
  else
  {

    v10 = v9;
  }

  return sub_10009A4F0();
}

unint64_t destroy for SatelliteListItemProvider.SatelliteState(uint64_t a1)
{
  unint64_t result;
  int v2;

  result = *(_QWORD *)(a1 + 8);
  v2 = -1;
  if (result < 0xFFFFFFFF)
    v2 = result;
  if (v2 - 1 < 0)
    return swift_bridgeObjectRelease(result);
  return result;
}

_QWORD *_s11SettingsApp25SatelliteListItemProviderC14SatelliteStateOwCP_0(_QWORD *a1, _QWORD *a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  LODWORD(v4) = -1;
  if (v3 < 0xFFFFFFFF)
    v4 = a2[1];
  if ((int)v4 - 1 < 0)
  {
    *a1 = *a2;
    a1[1] = v3;
    swift_bridgeObjectRetain(v3);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  return a1;
}

_QWORD *assignWithCopy for SatelliteListItemProvider.SatelliteState(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v11;

  v4 = a1[1];
  LODWORD(v5) = -1;
  if (v4 >= 0xFFFFFFFF)
    LODWORD(v6) = -1;
  else
    v6 = a1[1];
  v7 = v6 - 1;
  if (a2[1] < 0xFFFFFFFFuLL)
    v5 = a2[1];
  v8 = v5 - 1;
  if (v7 < 0)
  {
    if (v8 < 0)
    {
      *a1 = *a2;
      v11 = a2[1];
      a1[1] = v11;
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRelease(v4);
      return a1;
    }
    swift_bridgeObjectRelease(a1[1]);
    goto LABEL_11;
  }
  if ((v8 & 0x80000000) == 0)
  {
LABEL_11:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *a1 = *a2;
  v9 = a2[1];
  a1[1] = v9;
  swift_bridgeObjectRetain(v9);
  return a1;
}

_QWORD *assignWithTake for SatelliteListItemProvider.SatelliteState(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;

  v4 = a1[1];
  v5 = -1;
  if (v4 < 0xFFFFFFFF)
    v5 = v4;
  if (v5 - 1 < 0)
  {
    v6 = a2[1];
    LODWORD(v7) = -1;
    if (v6 < 0xFFFFFFFF)
      v7 = a2[1];
    if ((int)v7 - 1 < 0)
    {
      *a1 = *a2;
      a1[1] = v6;
      swift_bridgeObjectRelease(v4);
      return a1;
    }
    swift_bridgeObjectRelease(v4);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  return a1;
}

uint64_t getEnumTagSinglePayload for SatelliteListItemProvider.SatelliteState(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;
  unsigned int v5;
  unsigned int v6;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFC && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483644);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  v5 = v4 + 1;
  v6 = v4 - 2;
  if (v5 >= 4)
    return v6;
  else
    return 0;
}

uint64_t sub_10009AE58(uint64_t a1)
{
  unint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  v2 = v1 - 1;
  if (v2 < 0)
    v2 = -1;
  return (v2 + 1);
}

_QWORD *sub_10009AE7C(_QWORD *result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    *result = a2 - 0x7FFFFFFF;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SatelliteListItemProvider.SatelliteState()
{
  return &type metadata for SatelliteListItemProvider.SatelliteState;
}

uint64_t sub_10009AEB8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (uint64_t *)(*(_QWORD *)(v1 + 16) + OBJC_IVAR____TtC11SettingsApp25SatelliteListItemProvider_satelliteState);
  v3 = *v2;
  v4 = v2[1];
  *a1 = *v2;
  a1[1] = v4;
  return sub_10009AF68(v3, v4);
}

void sub_10009AED4(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (void *)Strong;
    sub_10009A134();

  }
}

uint64_t sub_10009AF24()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_10009AF48()
{
  uint64_t v0;

  sub_10009AED4(v0);
}

uint64_t sub_10009AF50(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if ((unint64_t)(a2 - 1) >= 3)
    return swift_bridgeObjectRelease(a2);
  return result;
}

uint64_t sub_10009AF68(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if ((unint64_t)(a2 - 1) >= 3)
    return swift_bridgeObjectRetain(a2);
  return result;
}

uint64_t sub_10009AF80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 == 3)
    return a4 == 3;
  if (a2 == 2)
    return a4 == 2;
  if (a2 != 1)
  {
    if ((unint64_t)(a4 - 1) < 3)
      return 0;
    if (a2)
      return a4 && (a1 == a3 && a2 == a4 || (_stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0) & 1) != 0);
    if (a4)
    {
      sub_10009AF50(a1, 0);
      return 0;
    }
    return 1;
  }
  return a4 == 1;
}

uint64_t sub_10009B01C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100156D60 != -1)
    swift_once(&qword_100156D60, sub_1000D34BC);
  v6 = qword_10015D420;
  *v5 = qword_10015D420;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  v7 = (id)v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v5);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) != 0)
  {
    if (qword_100156CC0 == -1)
      goto LABEL_5;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100156CC0, sub_10008BE7C);
LABEL_5:
  v8 = type metadata accessor for Logger(0);
  v9 = sub_100007808(v8, (uint64_t)qword_10015D2F8);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v12 = 134217984;
    v15 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v12 + 4, v12 + 12);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Off grid mode changed to %ld", v12, 0xCu);
    swift_slowDealloc(v12, -1, -1);
  }

  return sub_10009A4F0();
}

_QWORD *sub_10009B1E0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  _OWORD *v29;
  uint64_t v30;
  id v31;
  __int128 v32;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v9);
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v8 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
        swift_storeEnumTagMultiPayload(a1, a3, 0);
        break;
      case 1u:
        v11 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
        swift_storeEnumTagMultiPayload(a1, a3, 1);
        break;
      case 2u:
        v12 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
        v13 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v14 = (_QWORD *)((char *)a1 + v13);
        v15 = (_QWORD *)((char *)a2 + v13);
        v16 = v15[1];
        *v14 = *v15;
        v14[1] = v16;
        swift_bridgeObjectRetain(v16);
        swift_storeEnumTagMultiPayload(a1, a3, 2);
        break;
      case 3u:
        v17 = a2[1];
        *a1 = *a2;
        a1[1] = v17;
        v18 = a2[3];
        a1[2] = a2[2];
        a1[3] = v18;
        v19 = a2[5];
        a1[4] = a2[4];
        a1[5] = v19;
        v20 = a2[6];
        v21 = a2[7];
        a1[6] = v20;
        a1[7] = v21;
        swift_bridgeObjectRetain(v17);
        swift_bridgeObjectRetain(v18);
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v21);
        swift_storeEnumTagMultiPayload(a1, a3, 3);
        break;
      case 4u:
        v22 = a2[1];
        *a1 = *a2;
        a1[1] = v22;
        v23 = a2[3];
        a1[2] = a2[2];
        a1[3] = v23;
        v24 = a2[5];
        a1[4] = a2[4];
        a1[5] = v24;
        a1[6] = a2[6];
        swift_bridgeObjectRetain(v22);
        swift_bridgeObjectRetain(v23);
        swift_bridgeObjectRetain(v24);
        swift_storeEnumTagMultiPayload(a1, a3, 4);
        break;
      case 5u:
        v25 = a2[1];
        *a1 = *a2;
        a1[1] = v25;
        v26 = a2[3];
        a1[2] = a2[2];
        a1[3] = v26;
        v28 = (void *)a2[4];
        v27 = a2[5];
        a1[4] = v28;
        a1[5] = v27;
        v29 = a2 + 6;
        v30 = a2[9];
        swift_bridgeObjectRetain(v25);
        swift_bridgeObjectRetain(v26);
        v31 = v28;
        swift_bridgeObjectRetain(v27);
        if (v30)
        {
          a1[9] = v30;
          (**(void (***)(uint64_t, _OWORD *, uint64_t))(v30 - 8))((uint64_t)(a1 + 6), v29, v30);
        }
        else
        {
          v32 = v29[1];
          *((_OWORD *)a1 + 3) = *v29;
          *((_OWORD *)a1 + 4) = v32;
        }
        swift_storeEnumTagMultiPayload(a1, a3, 5);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_10009B460(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((int)result)
  {
    case 0:
    case 1:
      v4 = type metadata accessor for FLFollowUpInformation(0);
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
    case 2:
      v5 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
      v6 = *(_QWORD *)(a1 + *(int *)(sub_100004FC8(&qword_10015C420) + 48) + 8);
      goto LABEL_6;
    case 3:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      v6 = *(_QWORD *)(a1 + 56);
      goto LABEL_6;
    case 4:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
      v6 = *(_QWORD *)(a1 + 40);
LABEL_6:
      result = swift_bridgeObjectRelease(v6);
      break;
    case 5:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));

      result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      if (*(_QWORD *)(a1 + 72))
        result = sub_100005474((_QWORD *)(a1 + 48));
      break;
    default:
      return result;
  }
  return result;
}

_QWORD *sub_10009B578(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  _OWORD *v28;
  uint64_t v29;
  id v30;
  __int128 v31;

  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      v6 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      v7 = a1;
      v8 = a3;
      v9 = 0;
      goto LABEL_12;
    case 1u:
      v10 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      v7 = a1;
      v8 = a3;
      v9 = 1;
      goto LABEL_12;
    case 2u:
      v11 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      v12 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
      v13 = (_QWORD *)((char *)a1 + v12);
      v14 = (_QWORD *)((char *)a2 + v12);
      v15 = v14[1];
      *v13 = *v14;
      v13[1] = v15;
      swift_bridgeObjectRetain(v15);
      v7 = a1;
      v8 = a3;
      v9 = 2;
      goto LABEL_12;
    case 3u:
      v16 = a2[1];
      *a1 = *a2;
      a1[1] = v16;
      v17 = a2[3];
      a1[2] = a2[2];
      a1[3] = v17;
      v18 = a2[5];
      a1[4] = a2[4];
      a1[5] = v18;
      v19 = a2[6];
      v20 = a2[7];
      a1[6] = v19;
      a1[7] = v20;
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v20);
      v7 = a1;
      v8 = a3;
      v9 = 3;
      goto LABEL_12;
    case 4u:
      v21 = a2[1];
      *a1 = *a2;
      a1[1] = v21;
      v22 = a2[3];
      a1[2] = a2[2];
      a1[3] = v22;
      v23 = a2[5];
      a1[4] = a2[4];
      a1[5] = v23;
      a1[6] = a2[6];
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v23);
      v7 = a1;
      v8 = a3;
      v9 = 4;
      goto LABEL_12;
    case 5u:
      v24 = a2[1];
      *a1 = *a2;
      a1[1] = v24;
      v25 = a2[3];
      a1[2] = a2[2];
      a1[3] = v25;
      v27 = (void *)a2[4];
      v26 = a2[5];
      a1[4] = v27;
      a1[5] = v26;
      v28 = a2 + 6;
      v29 = a2[9];
      swift_bridgeObjectRetain(v24);
      swift_bridgeObjectRetain(v25);
      v30 = v27;
      swift_bridgeObjectRetain(v26);
      if (v29)
      {
        a1[9] = v29;
        (**(void (***)(uint64_t, _OWORD *, uint64_t))(v29 - 8))((uint64_t)(a1 + 6), v28, v29);
      }
      else
      {
        v31 = v28[1];
        *((_OWORD *)a1 + 3) = *v28;
        *((_OWORD *)a1 + 4) = v31;
      }
      v7 = a1;
      v8 = a3;
      v9 = 5;
LABEL_12:
      swift_storeEnumTagMultiPayload(v7, v8, v9);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_QWORD *sub_10009B7BC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  _OWORD *v27;
  uint64_t v28;
  id v29;
  __int128 v30;

  if (a1 != a2)
  {
    sub_100013014((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v6 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
        v7 = a1;
        v8 = a3;
        v9 = 0;
        goto LABEL_13;
      case 1u:
        v10 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
        v7 = a1;
        v8 = a3;
        v9 = 1;
        goto LABEL_13;
      case 2u:
        v11 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
        v12 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v13 = (_QWORD *)((char *)a1 + v12);
        v14 = (_QWORD *)((char *)a2 + v12);
        *v13 = *v14;
        v15 = v14[1];
        v13[1] = v15;
        swift_bridgeObjectRetain(v15);
        v7 = a1;
        v8 = a3;
        v9 = 2;
        goto LABEL_13;
      case 3u:
        *a1 = *a2;
        v16 = a2[1];
        a1[1] = v16;
        a1[2] = a2[2];
        v17 = a2[3];
        a1[3] = v17;
        a1[4] = a2[4];
        v18 = a2[5];
        a1[5] = v18;
        a1[6] = a2[6];
        v19 = a2[7];
        a1[7] = v19;
        swift_bridgeObjectRetain(v16);
        swift_bridgeObjectRetain(v17);
        swift_bridgeObjectRetain(v18);
        swift_bridgeObjectRetain(v19);
        v7 = a1;
        v8 = a3;
        v9 = 3;
        goto LABEL_13;
      case 4u:
        *a1 = *a2;
        v20 = a2[1];
        a1[1] = v20;
        a1[2] = a2[2];
        v21 = a2[3];
        a1[3] = v21;
        a1[4] = a2[4];
        v22 = a2[5];
        a1[5] = v22;
        a1[6] = a2[6];
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v22);
        v7 = a1;
        v8 = a3;
        v9 = 4;
        goto LABEL_13;
      case 5u:
        *a1 = *a2;
        v23 = a2[1];
        a1[1] = v23;
        a1[2] = a2[2];
        v24 = a2[3];
        a1[3] = v24;
        v25 = (void *)a2[4];
        a1[4] = v25;
        v26 = a2[5];
        a1[5] = v26;
        v27 = a2 + 6;
        v28 = a2[9];
        swift_bridgeObjectRetain(v23);
        swift_bridgeObjectRetain(v24);
        v29 = v25;
        swift_bridgeObjectRetain(v26);
        if (v28)
        {
          a1[9] = v28;
          (**(void (***)(uint64_t, _OWORD *, uint64_t))(v28 - 8))((uint64_t)(a1 + 6), v27, v28);
        }
        else
        {
          v30 = v27[1];
          *((_OWORD *)a1 + 3) = *v27;
          *((_OWORD *)a1 + 4) = v30;
        }
        v7 = a1;
        v8 = a3;
        v9 = 5;
LABEL_13:
        swift_storeEnumTagMultiPayload(v7, v8, v9);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t type metadata accessor for PrimarySettingsListItemIdentifier(uint64_t a1)
{
  uint64_t result;

  result = qword_10015A9E8;
  if (!qword_10015A9E8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PrimarySettingsListItemIdentifier);
  return result;
}

char *sub_10009BAA4(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 2)
  {
    v8 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    v9 = sub_100004FC8(&qword_10015C420);
    *(_OWORD *)&a1[*(int *)(v9 + 48)] = *(_OWORD *)&a2[*(int *)(v9 + 48)];
    swift_storeEnumTagMultiPayload(a1, a3, 2);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v10 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v7 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, a3, 0);
  }
  return a1;
}

char *sub_10009BBBC(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    sub_100013014((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v8 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      v9 = sub_100004FC8(&qword_10015C420);
      *(_OWORD *)&a1[*(int *)(v9 + 48)] = *(_OWORD *)&a2[*(int *)(v9 + 48)];
      swift_storeEnumTagMultiPayload(a1, a3, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v10 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v7 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

uint64_t sub_10009BCE4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _BYTE v4[32];
  _QWORD v5[6];

  result = type metadata accessor for FLFollowUpInformation(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = v5[0];
    swift_getTupleTypeLayout2(v4);
    v5[2] = v4;
    v5[3] = &unk_100118800;
    v5[4] = &unk_100118818;
    v5[5] = &unk_100118830;
    swift_initEnumMetadataMultiPayload(a1, 256, 6, v5);
    return 0;
  }
  return result;
}

void sub_10009BD7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;

  v1 = type metadata accessor for FLFollowUpInformation(0);
  __chkstk_darwin(v1);
  v2 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012DC4(v0, (uint64_t)v4);
  v5 = (char *)&loc_10009BE30 + *((int *)qword_10009C6D0 + swift_getEnumCaseMultiPayload(v4, v2));
  __asm { BR              X10 }
}

uint64_t sub_10009BE40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v5 = sub_100004FC8(&qword_10015C420);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + *(int *)(v5 + 48) + 8));
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v2, v0, v1);
  *(_QWORD *)(v4 - 224) = FLFollowUpInformation.title.getter(v6);
  *(_QWORD *)(v4 - 216) = v7;
  v8 = sub_100008A5C();
  v9 = Text.init<A>(_:)(v4 - 224, &type metadata for String, v8);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v1);
  return v9;
}

void sub_10009C7A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;

  v1 = v0;
  v2 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012DC4(v1, (uint64_t)v4);
  v5 = (char *)&loc_10009C838 + dword_10009CDB4[swift_getEnumCaseMultiPayload(v4, v2)];
  __asm { BR              X10 }
}

uint64_t sub_10009C848()
{
  uint64_t v0;

  return v0 + 5;
}

void sub_10009C878()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = sub_100004FC8(&qword_10015C420);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + *(int *)(v1 + 48) + 8));
  v2 = type metadata accessor for FLFollowUpInformation(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v0, v2);
  JUMPOUT(0x10009C85CLL);
}

void sub_10009C920()
{
  _OWORD *v0;
  uint64_t v1;
  __int128 v2;
  __int128 v3;

  v2 = v0[3];
  *(_OWORD *)(v1 - 96) = v0[2];
  *(_OWORD *)(v1 - 80) = v2;
  *(_OWORD *)(v1 - 64) = v0[4];
  v3 = v0[1];
  *(_OWORD *)(v1 - 128) = *v0;
  *(_OWORD *)(v1 - 112) = v3;
  Image.init(uiImage:)(*(id *)(v1 - 96));
  sub_10000BBB8(v1 - 128);
  JUMPOUT(0x10009C85CLL);
}

void sub_10009C95C()
{
  JUMPOUT(0x10009C854);
}

void sub_10009C96C()
{
  JUMPOUT(0x10009C854);
}

void sub_10009C97C()
{
  JUMPOUT(0x10009C854);
}

void sub_10009C98C()
{
  JUMPOUT(0x10009C854);
}

void sub_10009C99C()
{
  JUMPOUT(0x10009C854);
}

void sub_10009C9AC()
{
  JUMPOUT(0x10009C854);
}

void sub_10009C9BC()
{
  JUMPOUT(0x10009C854);
}

void sub_10009C9CC()
{
  JUMPOUT(0x10009C854);
}

void sub_10009C9DC()
{
  JUMPOUT(0x10009C854);
}

void sub_10009C9EC()
{
  JUMPOUT(0x10009C854);
}

void sub_10009C9FC()
{
  JUMPOUT(0x10009C854);
}

void sub_10009CA0C()
{
  JUMPOUT(0x10009C854);
}

void sub_10009CA1C()
{
  JUMPOUT(0x10009C854);
}

void sub_10009CA2C()
{
  JUMPOUT(0x10009C854);
}

void sub_10009CA3C()
{
  JUMPOUT(0x10009C854);
}

void sub_10009CA48()
{
  id v0;
  void *v1;

  v0 = (id)MobileGestalt_get_current_device();
  if (v0)
  {
    v1 = v0;
    MobileGestalt_get_iPadCapability();

    JUMPOUT(0x10009C85CLL);
  }
  __break(1u);
  JUMPOUT(0x10009CDA4);
}

void sub_10009CAA4()
{
  JUMPOUT(0x10009C854);
}

void sub_10009CAB4()
{
  sub_1000461AC();
  JUMPOUT(0x10009C85CLL);
}

void sub_10009CB04()
{
  JUMPOUT(0x10009C854);
}

void sub_10009CB14()
{
  JUMPOUT(0x10009C854);
}

void sub_10009CB24()
{
  id v0;
  void *v1;
  int pearlIDCapability;
  id v3;
  void *v4;
  int isSimulator;
  id v6;
  void *v7;
  int v8;
  id v9;
  void *v10;

  v0 = (id)MobileGestalt_get_current_device();
  if (v0)
  {
    v1 = v0;
    pearlIDCapability = MobileGestalt_get_pearlIDCapability();

    if (pearlIDCapability)
    {
      v3 = (id)MobileGestalt_get_current_device();
      if (!v3)
      {
LABEL_13:
        __break(1u);
        goto LABEL_14;
      }
      v4 = v3;
      isSimulator = MobileGestalt_get_isSimulator();

      if (!isSimulator)
LABEL_16:
        JUMPOUT(0x10009C85CLL);
    }
    v6 = (id)MobileGestalt_get_current_device();
    if (v6)
    {
      v7 = v6;
      v8 = MobileGestalt_get_pearlIDCapability();

      if (!v8)
        goto LABEL_16;
      v9 = (id)MobileGestalt_get_current_device();
      if (v9)
      {
        v10 = v9;
        MobileGestalt_get_isSimulator();

        goto LABEL_16;
      }
LABEL_14:
      __break(1u);
      JUMPOUT(0x10009CDB4);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  goto LABEL_13;
}

unint64_t sub_10009CE88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE *v72;
  _BYTE *v73;
  _BYTE *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  _BYTE *v85;
  unint64_t *v86;
  unint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _BYTE *v97;
  _BYTE *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t inited;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t *v162;
  unint64_t v163;
  const char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  void *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  _QWORD *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  _QWORD *v225;
  _QWORD *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  _QWORD *v241;
  uint64_t v242;
  BOOL *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t *v258;
  unint64_t v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  _BYTE *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  _BYTE *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t v301;
  const char *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  __int128 v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  char v329[48];
  char v330[48];
  char v331[56];

  v1 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v310 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012DC4(v0, (uint64_t)v3);
  switch(swift_getEnumCaseMultiPayload(v3, v1))
  {
    case 6u:
    case 0x2Cu:
      v17 = sub_100004FC8(&qword_10015AA28);
      v5 = swift_allocObject(v17, 48, 7);
      v310 = xmmword_1001164D0;
      *(_OWORD *)(v5 + 16) = xmmword_1001164D0;
      *(_BYTE *)(v5 + 32) = 1;
      v6 = v5 + 32;
      v18 = sub_100004FC8(&qword_10015AA30);
      v19 = type metadata accessor for PrimarySettingsListItemVisibilityRule(0);
      v20 = *(_QWORD *)(v19 - 8);
      v21 = *(_QWORD *)(v20 + 72);
      v22 = *(unsigned __int8 *)(v20 + 80);
      v23 = (v22 + 32) & ~v22;
      v13 = swift_allocObject(v18, v23 + v21, v22 | 7);
      *(_OWORD *)(v13 + 16) = v310;
      v24 = (_QWORD *)(v13 + v23);
      *v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureAccountModificationAllowed);
      v24[1] = v25;
      v14 = v24;
      v15 = v19;
      v16 = 2;
      goto LABEL_7;
    case 8u:
    case 0x14u:
    case 0x19u:
      v4 = sub_100004FC8(&qword_10015AA28);
      v5 = swift_allocObject(v4, 48, 7);
      v310 = xmmword_1001164D0;
      *(_OWORD *)(v5 + 16) = xmmword_1001164D0;
      *(_BYTE *)(v5 + 32) = 0;
      v6 = v5 + 32;
      v7 = sub_100004FC8(&qword_10015AA30);
      v8 = type metadata accessor for PrimarySettingsListItemVisibilityRule(0);
      v9 = *(_QWORD *)(v8 - 8);
      v10 = *(_QWORD *)(v9 + 72);
      v11 = *(unsigned __int8 *)(v9 + 80);
      v12 = (v11 + 32) & ~v11;
      v13 = swift_allocObject(v7, v12 + v10, v11 | 7);
      *(_OWORD *)(v13 + 16) = v310;
      v14 = (_QWORD *)(v13 + v12);
      *(_BYTE *)(v13 + v12) = 1;
      v15 = v8;
      v16 = 7;
      goto LABEL_7;
    case 9u:
      v27 = sub_100004FC8(&qword_10015AA28);
      v5 = swift_allocObject(v27, 48, 7);
      *(_OWORD *)(v5 + 16) = xmmword_1001164D0;
      *(_BYTE *)(v5 + 32) = 0;
      v28 = v5 + 32;
      v29 = sub_100004FC8(&qword_10015AA30);
      v30 = type metadata accessor for PrimarySettingsListItemVisibilityRule(0);
      v31 = *(_QWORD *)(v30 - 8);
      v32 = *(_QWORD *)(v31 + 72);
      v33 = *(unsigned __int8 *)(v31 + 80);
      v34 = (v33 + 32) & ~v33;
      v35 = swift_allocObject(v29, v34 + 2 * v32, v33 | 7);
      *(_OWORD *)(v35 + 16) = xmmword_100115BA0;
      v36 = v35 + v34;
      *(_QWORD *)v36 = swift_getKeyPath(&unk_100118AF8);
      *(_BYTE *)(v36 + 8) = 0;
      swift_storeEnumTagMultiPayload(v36, v30, 4);
      v37 = v36 + v32;
      sub_100004FC8(&qword_100158290);
      strcpy((char *)v37, "WiFiSettings");
      *(_BYTE *)(v37 + 13) = 0;
      *(_WORD *)(v37 + 14) = -5120;
      static NSBundle.PreferencesPluginLocation.default.getter();
      v38 = v37;
      v39 = v30;
      v40 = 0;
      goto LABEL_25;
    case 0xAu:
      v41 = sub_100004FC8(&qword_10015AA28);
      v5 = swift_allocObject(v41, 48, 7);
      v310 = xmmword_1001164D0;
      *(_OWORD *)(v5 + 16) = xmmword_1001164D0;
      *(_BYTE *)(v5 + 32) = 0;
      v6 = v5 + 32;
      v42 = sub_100004FC8(&qword_10015AA30);
      v43 = type metadata accessor for PrimarySettingsListItemVisibilityRule(0);
      v44 = *(_QWORD *)(v43 - 8);
      v45 = *(_QWORD *)(v44 + 72);
      v46 = *(unsigned __int8 *)(v44 + 80);
      v47 = (v46 + 32) & ~v46;
      v13 = swift_allocObject(v42, v47 + v45, v46 | 7);
      *(_OWORD *)(v13 + 16) = v310;
      v48 = (_QWORD *)(v13 + v47);
      sub_100004FC8(&qword_100158290);
      *v48 = 0xD000000000000020;
      v48[1] = 0x8000000100123FC0;
      static NSBundle.PreferencesPluginLocation.default.getter();
      v14 = v48;
      v15 = v43;
      v16 = 0;
LABEL_7:
      swift_storeEnumTagMultiPayload(v14, v15, v16);
      *(_QWORD *)(v5 + 40) = v13;
      v26 = sub_1000EEFD0(v5);
      swift_setDeallocating(v5);
      v49 = sub_100004FC8(&qword_10015AA40);
      v50 = v6;
      v51 = 1;
      goto LABEL_27;
    case 0xBu:
      v52 = sub_100004FC8(&qword_10015AA28);
      v5 = swift_allocObject(v52, 48, 7);
      *(_OWORD *)(v5 + 16) = xmmword_1001164D0;
      *(_BYTE *)(v5 + 32) = 0;
      v28 = v5 + 32;
      v53 = sub_100004FC8(&qword_10015AA30);
      v54 = type metadata accessor for PrimarySettingsListItemVisibilityRule(0);
      v55 = *(_QWORD *)(v54 - 8);
      v56 = *(_QWORD *)(v55 + 72);
      v57 = *(unsigned __int8 *)(v55 + 80);
      v58 = (v57 + 32) & ~v57;
      v59 = 2 * v56;
      v60 = swift_allocObject(v53, v58 + 3 * v56, v57 | 7);
      *(_OWORD *)(v60 + 16) = xmmword_100118B50;
      v61 = v60 + v58;
      *(_QWORD *)v61 = swift_getKeyPath(&unk_1001189B8);
      *(_BYTE *)(v61 + 8) = 1;
      swift_storeEnumTagMultiPayload(v61, v54, 4);
      v62 = v61 + v56;
      *(_QWORD *)v62 = swift_getKeyPath(&unk_100118AD0);
      *(_BYTE *)(v62 + 8) = 0;
      swift_storeEnumTagMultiPayload(v62, v54, 4);
      v63 = (unint64_t *)(v61 + v59);
      sub_100004FC8(&qword_100158290);
      v64 = 0xD000000000000011;
      v65 = "BluetoothSettings";
      goto LABEL_10;
    case 0xCu:
      v66 = sub_100004FC8(&qword_10015AA28);
      v5 = swift_allocObject(v66, 48, 7);
      *(_OWORD *)(v5 + 16) = xmmword_1001164D0;
      *(_BYTE *)(v5 + 32) = 0;
      v28 = v5 + 32;
      v67 = sub_100004FC8(&qword_10015AA30);
      v54 = type metadata accessor for PrimarySettingsListItemVisibilityRule(0);
      v68 = *(_QWORD *)(v54 - 8);
      v69 = *(_QWORD *)(v68 + 72);
      v70 = *(unsigned __int8 *)(v68 + 80);
      v71 = (v70 + 32) & ~v70;
      v60 = swift_allocObject(v67, v71 + 4 * v69, v70 | 7);
      *(_OWORD *)(v60 + 16) = xmmword_100118B60;
      v72 = (_BYTE *)(v60 + v71);
      *v72 = 1;
      swift_storeEnumTagMultiPayload(v72, v54, 7);
      v73 = &v72[v69];
      *(_QWORD *)v73 = swift_getKeyPath(&unk_1001189B8);
      v73[8] = 1;
      swift_storeEnumTagMultiPayload(&v72[v69], v54, 4);
      v74 = &v72[2 * v69];
      *(_QWORD *)v74 = swift_getKeyPath(&unk_100118A80);
      v74[8] = 0;
      swift_storeEnumTagMultiPayload(v74, v54, 4);
      v63 = (unint64_t *)&v72[3 * v69];
      sub_100004FC8(&qword_100158290);
      v64 = 0xD000000000000010;
      v65 = "SettingsCellular";
LABEL_10:
      v75 = (unint64_t)(v65 - 32) | 0x8000000000000000;
      goto LABEL_13;
    case 0xDu:
      v76 = sub_100004FC8(&qword_10015AA28);
      v5 = swift_allocObject(v76, 48, 7);
      *(_OWORD *)(v5 + 16) = xmmword_1001164D0;
      *(_BYTE *)(v5 + 32) = 0;
      v28 = v5 + 32;
      v77 = sub_100004FC8(&qword_10015AA30);
      v78 = type metadata accessor for PrimarySettingsListItemVisibilityRule(0);
      v79 = *(_QWORD *)(v78 - 8);
      v80 = *(_QWORD *)(v79 + 72);
      v81 = *(unsigned __int8 *)(v79 + 80);
      v82 = (v81 + 32) & ~v81;
      v83 = 2 * v80;
      v60 = swift_allocObject(v77, v82 + 3 * v80, v81 | 7);
      *(_OWORD *)(v60 + 16) = xmmword_100118B50;
      v84 = (_BYTE *)(v60 + v82);
      *v84 = 1;
      swift_storeEnumTagMultiPayload(v84, v78, 7);
      v85 = &v84[v80];
      *(_QWORD *)v85 = swift_getKeyPath(&unk_100118A80);
      v85[8] = 0;
      swift_storeEnumTagMultiPayload(v85, v78, 4);
      v86 = (unint64_t *)&v84[v83];
      *v86 = swift_getKeyPath(&unk_100118AA8);
      *((_BYTE *)v86 + 8) = 0;
      v87 = v86;
      v88 = v78;
      v89 = 4;
      goto LABEL_14;
    case 0xEu:
      v90 = sub_100004FC8(&qword_10015AA28);
      v5 = swift_allocObject(v90, 48, 7);
      *(_OWORD *)(v5 + 16) = xmmword_1001164D0;
      *(_BYTE *)(v5 + 32) = 0;
      v28 = v5 + 32;
      v91 = sub_100004FC8(&qword_10015AA30);
      v54 = type metadata accessor for PrimarySettingsListItemVisibilityRule(0);
      v92 = *(_QWORD *)(v54 - 8);
      v93 = *(_QWORD *)(v92 + 72);
      v94 = *(unsigned __int8 *)(v92 + 80);
      v95 = (v94 + 32) & ~v94;
      v96 = 2 * v93;
      v60 = swift_allocObject(v91, v95 + 3 * v93, v94 | 7);
      *(_OWORD *)(v60 + 16) = xmmword_100118B50;
      v97 = (_BYTE *)(v60 + v95);
      *v97 = 1;
      swift_storeEnumTagMultiPayload(v97, v54, 7);
      v98 = &v97[v93];
      *(_QWORD *)v98 = swift_getKeyPath(&unk_1001189B8);
      v98[8] = 1;
      swift_storeEnumTagMultiPayload(v98, v54, 4);
      v63 = (unint64_t *)&v97[v96];
      sub_100004FC8(&qword_100158290);
      v64 = 0x65666572504E5056;
      v75 = 0xEE007365636E6572;
LABEL_13:
      *v63 = v64;
      v63[1] = v75;
      static NSBundle.PreferencesPluginLocation.default.getter();
      v87 = v63;
      v88 = v54;
      v89 = 0;
LABEL_14:
      swift_storeEnumTagMultiPayload(v87, v88, v89);
      *(_QWORD *)(v5 + 40) = v60;
      goto LABEL_26;
    case 0xFu:
      v99 = sub_100004FC8(&qword_10015AA28);
      v5 = swift_allocObject(v99, 48, 7);
      *(_OWORD *)(v5 + 16) = xmmword_1001164D0;
      *(_BYTE *)(v5 + 32) = 0;
      v28 = v5 + 32;
      v100 = sub_100004FC8(&qword_10015AA30);
      v101 = type metadata accessor for PrimarySettingsListItemVisibilityRule(0);
      v102 = *(_QWORD *)(v101 - 8);
      v103 = *(_QWORD *)(v102 + 72);
      v104 = *(unsigned __int8 *)(v102 + 80);
      v105 = (v104 + 32) & ~v104;
      v35 = swift_allocObject(v100, v105 + 2 * v103, v104 | 7);
      *(_OWORD *)(v35 + 16) = xmmword_100115BA0;
      v106 = v35 + v105;
      *(_QWORD *)v106 = swift_getKeyPath(&unk_100118A58);
      *(_BYTE *)(v106 + 8) = 0;
      swift_storeEnumTagMultiPayload(v106, v101, 4);
      v107 = v106 + v103;
      *(_QWORD *)v107 = swift_getKeyPath(&unk_100118990);
      *(_BYTE *)(v107 + 8) = 0;
      goto LABEL_24;
    case 0x10u:
      v108 = sub_100004FC8(&qword_10015AA28);
      inited = swift_initStackObject(v108, v331);
      v310 = xmmword_1001164D0;
      *(_OWORD *)(inited + 16) = xmmword_1001164D0;
      *(_BYTE *)(inited + 32) = 0;
      v110 = inited + 32;
      v111 = sub_100004FC8(&qword_10015AA30);
      v112 = type metadata accessor for PrimarySettingsListItemVisibilityRule(0);
      v113 = *(_QWORD *)(v112 - 8);
      v114 = *(_QWORD *)(v113 + 72);
      v115 = *(unsigned __int8 *)(v113 + 80);
      v116 = (v115 + 32) & ~v115;
      v117 = swift_allocObject(v111, v116 + v114, v115 | 7);
      *(_OWORD *)(v117 + 16) = v310;
      v118 = v117 + v116;
      *(_QWORD *)(v118 + 24) = &type metadata for CoreTelephonyFeatureFlags;
      *(_QWORD *)(v118 + 32) = sub_1000A1CFC();
      *(_BYTE *)(v118 + 40) = 0;
      v119 = (_QWORD *)v118;
      v120 = v112;
      v121 = 5;
      goto LABEL_54;
    case 0x11u:
      v122 = sub_100004FC8(&qword_10015AA28);
      v123 = &v313;
      goto LABEL_20;
    case 0x12u:
      v124 = sub_100004FC8(&qword_10015AA28);
      v125 = swift_initStackObject(v124, &v311);
      v310 = xmmword_1001164D0;
      *(_OWORD *)(v125 + 16) = xmmword_1001164D0;
      *(_BYTE *)(v125 + 32) = 0;
      v126 = v125 + 32;
      v127 = sub_100004FC8(&qword_10015AA30);
      v128 = type metadata accessor for PrimarySettingsListItemVisibilityRule(0);
      v129 = *(_QWORD *)(v128 - 8);
      v130 = *(_QWORD *)(v129 + 72);
      v131 = *(unsigned __int8 *)(v129 + 80);
      v132 = (v131 + 32) & ~v131;
      v133 = swift_allocObject(v127, v132 + v130, v131 | 7);
      *(_OWORD *)(v133 + 16) = v310;
      v134 = v133 + v132;
      *(_QWORD *)v134 = swift_getKeyPath(&unk_1001189B8);
      *(_BYTE *)(v134 + 8) = 1;
      goto LABEL_36;
    case 0x13u:
      v122 = sub_100004FC8(&qword_10015AA28);
      v123 = &v312;
LABEL_20:
      v125 = swift_initStackObject(v122, v123);
      *(_OWORD *)(v125 + 16) = xmmword_1001164D0;
      *(_BYTE *)(v125 + 32) = 0;
      v126 = v125 + 32;
      v135 = sub_100004FC8(&qword_10015AA30);
      v136 = type metadata accessor for PrimarySettingsListItemVisibilityRule(0);
      v137 = *(_QWORD *)(v136 - 8);
      v138 = *(_QWORD *)(v137 + 72);
      v139 = *(unsigned __int8 *)(v137 + 80);
      v140 = (v139 + 32) & ~v139;
      v133 = swift_allocObject(v135, v140 + 2 * v138, v139 | 7);
      *(_OWORD *)(v133 + 16) = xmmword_100115BA0;
      v141 = v133 + v140;
      *(_QWORD *)v141 = swift_getKeyPath(&unk_1001189B8);
      *(_BYTE *)(v141 + 8) = 1;
      swift_storeEnumTagMultiPayload(v141, v136, 4);
      v142 = (_QWORD *)(v141 + v138);
      *(_BYTE *)(v141 + v138) = 1;
      v143 = v136;
      v144 = 7;
      goto LABEL_37;
    case 0x16u:
      v145 = sub_100004FC8(&qword_10015AA28);
      v5 = swift_allocObject(v145, 48, 7);
      *(_OWORD *)(v5 + 16) = xmmword_1001164D0;
      *(_BYTE *)(v5 + 32) = 0;
      v28 = v5 + 32;
      v146 = sub_100004FC8(&qword_10015AA30);
      v147 = type metadata accessor for PrimarySettingsListItemVisibilityRule(0);
      v148 = *(_QWORD *)(v147 - 8);
      v149 = *(_QWORD *)(v148 + 72);
      v150 = *(unsigned __int8 *)(v148 + 80);
      v151 = (v150 + 32) & ~v150;
      v35 = swift_allocObject(v146, v151 + 2 * v149, v150 | 7);
      *(_OWORD *)(v35 + 16) = xmmword_100115BA0;
      v152 = v35 + v151;
      *(_QWORD *)v152 = swift_getKeyPath(&unk_1001189B8);
      *(_BYTE *)(v152 + 8) = 1;
      swift_storeEnumTagMultiPayload(v152, v147, 4);
      v38 = v152 + v149;
      *(_BYTE *)(v152 + v149) = 1;
      v39 = v147;
      v40 = 7;
      goto LABEL_25;
    case 0x17u:
      v153 = sub_100004FC8(&qword_10015AA28);
      v125 = swift_initStackObject(v153, &v328);
      *(_OWORD *)(v125 + 16) = xmmword_1001164D0;
      *(_BYTE *)(v125 + 32) = 0;
      v126 = v125 + 32;
      v154 = sub_100004FC8(&qword_10015AA30);
      v155 = type metadata accessor for PrimarySettingsListItemVisibilityRule(0);
      v156 = *(_QWORD *)(v155 - 8);
      v157 = *(_QWORD *)(v156 + 72);
      v158 = *(unsigned __int8 *)(v156 + 80);
      v159 = (v158 + 32) & ~v158;
      v160 = swift_allocObject(v154, v159 + 2 * v157, v158 | 7);
      *(_OWORD *)(v160 + 16) = xmmword_100115BA0;
      v161 = v160 + v159;
      *(_QWORD *)v161 = swift_getKeyPath(&unk_100118968);
      *(_BYTE *)(v161 + 8) = 0;
      swift_storeEnumTagMultiPayload(v161, v155, 4);
      v162 = (unint64_t *)(v161 + v157);
      sub_100004FC8(&qword_100158290);
      v163 = 0xD000000000000014;
      v164 = "ActionButtonSettings";
      goto LABEL_40;
    case 0x18u:
      v165 = sub_100004FC8(&qword_10015AA28);
      v5 = swift_allocObject(v165, 48, 7);
      v310 = xmmword_1001164D0;
      *(_OWORD *)(v5 + 16) = xmmword_1001164D0;
      *(_BYTE *)(v5 + 32) = 0;
      v28 = v5 + 32;
      v166 = sub_100004FC8(&qword_10015AA30);
      v101 = type metadata accessor for PrimarySettingsListItemVisibilityRule(0);
      v167 = *(_QWORD *)(v101 - 8);
      v168 = *(_QWORD *)(v167 + 72);
      v169 = *(unsigned __int8 *)(v167 + 80);
      v170 = (v169 + 32) & ~v169;
      v35 = swift_allocObject(v166, v170 + v168, v169 | 7);
      *(_OWORD *)(v35 + 16) = v310;
      v107 = v35 + v170;
      *(_QWORD *)v107 = swift_getKeyPath(&unk_1001189B8);
      *(_BYTE *)(v107 + 8) = 1;
LABEL_24:
      v38 = v107;
      v39 = v101;
      v40 = 4;
LABEL_25:
      swift_storeEnumTagMultiPayload(v38, v39, v40);
      *(_QWORD *)(v5 + 40) = v35;
LABEL_26:
      v26 = sub_1000EEFD0(v5);
      swift_setDeallocating(v5);
      v171 = *(_QWORD *)(v5 + 16);
      v49 = sub_100004FC8(&qword_10015AA40);
      v50 = v28;
      v51 = v171;
LABEL_27:
      swift_arrayDestroy(v50, v51, v49);
      swift_deallocClassInstance(v5, 32, 7);
      return v26;
    case 0x1Au:
      v172 = sub_100004FC8(&qword_10015AA28);
      v125 = swift_initStackObject(v172, &v314);
      *(_OWORD *)(v125 + 16) = xmmword_1001164D0;
      *(_BYTE *)(v125 + 32) = 0;
      v126 = v125 + 32;
      v173 = sub_100004FC8(&qword_10015AA30);
      v155 = type metadata accessor for PrimarySettingsListItemVisibilityRule(0);
      v174 = *(_QWORD *)(v155 - 8);
      v175 = *(_QWORD *)(v174 + 72);
      v176 = *(unsigned __int8 *)(v174 + 80);
      v177 = (v176 + 32) & ~v176;
      v160 = swift_allocObject(v173, v177 + 3 * v175, v176 | 7);
      *(_OWORD *)(v160 + 16) = xmmword_100118B50;
      v178 = v160 + v177;
      *(_QWORD *)v178 = swift_getKeyPath(&unk_100118990);
      *(_BYTE *)(v178 + 8) = 0;
      swift_storeEnumTagMultiPayload(v178, v155, 4);
      *(_BYTE *)(v178 + v175) = 1;
      swift_storeEnumTagMultiPayload(v178 + v175, v155, 7);
      v162 = (unint64_t *)(v178 + 2 * v175);
      sub_100004FC8(&qword_100158290);
      v163 = 0xD00000000000001FLL;
      v164 = "MultitaskingAndGesturesSettings";
      goto LABEL_40;
    case 0x1Bu:
      v179 = sub_100004FC8(&qword_10015AA28);
      v125 = swift_initStackObject(v179, &v315);
      v310 = xmmword_1001164D0;
      *(_OWORD *)(v125 + 16) = xmmword_1001164D0;
      *(_BYTE *)(v125 + 32) = 0;
      v126 = v125 + 32;
      v180 = sub_100004FC8(&qword_10015AA30);
      v128 = type metadata accessor for PrimarySettingsListItemVisibilityRule(0);
      v181 = *(_QWORD *)(v128 - 8);
      v182 = *(_QWORD *)(v181 + 72);
      v183 = *(unsigned __int8 *)(v181 + 80);
      v184 = (v183 + 32) & ~v183;
      v133 = swift_allocObject(v180, v184 + v182, v183 | 7);
      *(_OWORD *)(v133 + 16) = v310;
      v134 = v133 + v184;
      v185 = &unk_100118A30;
      goto LABEL_35;
    case 0x1Cu:
      v186 = sub_100004FC8(&qword_10015AA28);
      v125 = swift_initStackObject(v186, &v326);
      *(_OWORD *)(v125 + 16) = xmmword_1001164D0;
      *(_BYTE *)(v125 + 32) = 0;
      v126 = v125 + 32;
      v187 = sub_100004FC8(&qword_10015AA30);
      v188 = type metadata accessor for PrimarySettingsListItemVisibilityRule(0);
      v189 = *(_QWORD *)(v188 - 8);
      v190 = *(_QWORD *)(v189 + 72);
      v191 = *(unsigned __int8 *)(v189 + 80);
      v192 = (v191 + 32) & ~v191;
      v160 = swift_allocObject(v187, v192 + 3 * v190, v191 | 7);
      *(_OWORD *)(v160 + 16) = xmmword_100118B50;
      v193 = v160 + v192;
      *(_QWORD *)v193 = swift_getKeyPath(&unk_1001189B8);
      *(_BYTE *)(v193 + 8) = 1;
      swift_storeEnumTagMultiPayload(v193, v188, 4);
      *(_BYTE *)(v193 + v190) = 1;
      swift_storeEnumTagMultiPayload(v193 + v190, v188, 7);
      v194 = (_QWORD *)(v193 + 2 * v190);
      *v194 = static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureWallpaperModificationAllowed);
      v194[1] = v195;
      v196 = v194;
      v197 = v188;
      v198 = 2;
      goto LABEL_43;
    case 0x1Du:
      v199 = sub_100004FC8(&qword_10015AA28);
      v125 = swift_initStackObject(v199, &v327);
      *(_OWORD *)(v125 + 16) = xmmword_1001164D0;
      *(_BYTE *)(v125 + 32) = 0;
      v126 = v125 + 32;
      v200 = sub_100004FC8(&qword_10015AA30);
      v201 = type metadata accessor for PrimarySettingsListItemVisibilityRule(0);
      v202 = *(_QWORD *)(v201 - 8);
      v203 = *(_QWORD *)(v202 + 72);
      v204 = *(unsigned __int8 *)(v202 + 80);
      v205 = (v204 + 32) & ~v204;
      v133 = swift_allocObject(v200, v205 + 2 * v203, v204 | 7);
      *(_OWORD *)(v133 + 16) = xmmword_100115BA0;
      v206 = v133 + v205;
      *(_QWORD *)v206 = swift_getKeyPath(&unk_100118990);
      *(_BYTE *)(v206 + 8) = 1;
      swift_storeEnumTagMultiPayload(v206, v201, 4);
      v207 = (_QWORD *)(v206 + v203);
      sub_100004FC8(&qword_100158290);
      *v207 = 0x53746E6569626D41;
      v207[1] = 0xEF73676E69747465;
      static NSBundle.PreferencesPluginLocation.default.getter();
      v142 = v207;
      v143 = v201;
      v144 = 0;
      goto LABEL_37;
    case 0x1Eu:
      v208 = sub_100004FC8(&qword_10015AA28);
      v125 = swift_initStackObject(v208, &v317);
      *(_OWORD *)(v125 + 16) = xmmword_1001164D0;
      *(_BYTE *)(v125 + 32) = 0;
      v126 = v125 + 32;
      v209 = sub_100004FC8(&qword_10015AA30);
      v210 = type metadata accessor for PrimarySettingsListItemVisibilityRule(0);
      v211 = *(_QWORD *)(v210 - 8);
      v212 = *(_QWORD *)(v211 + 72);
      v213 = *(unsigned __int8 *)(v211 + 80);
      v214 = (v213 + 32) & ~v213;
      v133 = swift_allocObject(v209, v214 + 2 * v212, v213 | 7);
      *(_OWORD *)(v133 + 16) = xmmword_100115BA0;
      v215 = v133 + v214;
      *(_QWORD *)v215 = swift_getKeyPath(&unk_100118A08);
      *(_BYTE *)(v215 + 8) = 0;
      swift_storeEnumTagMultiPayload(v215, v210, 4);
      v216 = (_QWORD *)(v215 + v212);
      *v216 = static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureAssistantAllowed);
      v216[1] = v217;
      v142 = v216;
      v143 = v210;
      v144 = 2;
      goto LABEL_37;
    case 0x1Fu:
      v218 = sub_100004FC8(&qword_10015AA28);
      inited = swift_initStackObject(v218, &v318);
      v310 = xmmword_1001164D0;
      *(_OWORD *)(inited + 16) = xmmword_1001164D0;
      *(_BYTE *)(inited + 32) = 0;
      v110 = inited + 32;
      v219 = sub_100004FC8(&qword_10015AA30);
      v220 = type metadata accessor for PrimarySettingsListItemVisibilityRule(0);
      v221 = *(_QWORD *)(v220 - 8);
      v222 = *(_QWORD *)(v221 + 72);
      v223 = *(unsigned __int8 *)(v221 + 80);
      v224 = (v223 + 32) & ~v223;
      v117 = swift_allocObject(v219, v224 + v222, v223 | 7);
      *(_OWORD *)(v117 + 16) = v310;
      v225 = (_QWORD *)(v117 + v224);
      v226 = &MCFeatureSpotlightAllowed;
      goto LABEL_49;
    case 0x20u:
      v227 = sub_100004FC8(&qword_10015AA28);
      v125 = swift_initStackObject(v227, &v325);
      v310 = xmmword_1001164D0;
      *(_OWORD *)(v125 + 16) = xmmword_1001164D0;
      *(_BYTE *)(v125 + 32) = 0;
      v126 = v125 + 32;
      v228 = sub_100004FC8(&qword_10015AA30);
      v128 = type metadata accessor for PrimarySettingsListItemVisibilityRule(0);
      v229 = *(_QWORD *)(v128 - 8);
      v230 = *(_QWORD *)(v229 + 72);
      v231 = *(unsigned __int8 *)(v229 + 80);
      v232 = (v231 + 32) & ~v231;
      v133 = swift_allocObject(v228, v232 + v230, v231 | 7);
      *(_OWORD *)(v133 + 16) = v310;
      v134 = v133 + v232;
      v185 = &unk_1001189E0;
LABEL_35:
      *(_QWORD *)v134 = swift_getKeyPath(v185);
      *(_BYTE *)(v134 + 8) = 0;
LABEL_36:
      v142 = (_QWORD *)v134;
      v143 = v128;
      v144 = 4;
LABEL_37:
      swift_storeEnumTagMultiPayload(v142, v143, v144);
      *(_QWORD *)(v125 + 40) = v133;
      goto LABEL_44;
    case 0x21u:
      v233 = sub_100004FC8(&qword_10015AA28);
      v125 = swift_initStackObject(v233, &v319);
      *(_OWORD *)(v125 + 16) = xmmword_1001164D0;
      *(_BYTE *)(v125 + 32) = 0;
      v126 = v125 + 32;
      v234 = sub_100004FC8(&qword_10015AA30);
      v235 = type metadata accessor for PrimarySettingsListItemVisibilityRule(0);
      v236 = *(_QWORD *)(v235 - 8);
      v237 = *(_QWORD *)(v236 + 72);
      v238 = *(unsigned __int8 *)(v236 + 80);
      v239 = (v238 + 32) & ~v238;
      v160 = swift_allocObject(v234, v239 + 4 * v237, v238 | 7);
      *(_OWORD *)(v160 + 16) = xmmword_100118B60;
      v240 = v160 + v239;
      *(_QWORD *)v240 = swift_getKeyPath(&unk_1001189B8);
      *(_BYTE *)(v240 + 8) = 1;
      swift_storeEnumTagMultiPayload(v240, v235, 4);
      *(_BYTE *)(v240 + v237) = 1;
      swift_storeEnumTagMultiPayload(v240 + v237, v235, 7);
      v241 = (_QWORD *)(v240 + 2 * v237);
      *v241 = static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeaturePasscodeModificationAllowed);
      v241[1] = v242;
      swift_storeEnumTagMultiPayload(v241, v235, 2);
      v243 = (BOOL *)(v240 + 3 * v237);
      *v243 = sub_1000BDD20();
      v243[1] = 1;
      v196 = v243;
      v197 = v235;
      v198 = 6;
      goto LABEL_43;
    case 0x23u:
      v244 = sub_100004FC8(&qword_10015AA28);
      v125 = swift_initStackObject(v244, &v320);
      *(_OWORD *)(v125 + 16) = xmmword_1001164D0;
      *(_BYTE *)(v125 + 32) = 0;
      v126 = v125 + 32;
      v245 = sub_100004FC8(&qword_10015AA30);
      v155 = type metadata accessor for PrimarySettingsListItemVisibilityRule(0);
      v246 = *(_QWORD *)(v155 - 8);
      v247 = *(_QWORD *)(v246 + 72);
      v248 = *(unsigned __int8 *)(v246 + 80);
      v249 = (v248 + 32) & ~v248;
      v160 = swift_allocObject(v245, v249 + 2 * v247, v248 | 7);
      *(_OWORD *)(v160 + 16) = xmmword_100115BA0;
      v250 = v160 + v249;
      *(_QWORD *)v250 = swift_getKeyPath(&unk_100118990);
      *(_BYTE *)(v250 + 8) = 1;
      swift_storeEnumTagMultiPayload(v250, v155, 4);
      v162 = (unint64_t *)(v250 + v247);
      sub_100004FC8(&qword_100158290);
      v163 = 0xD00000000000001ELL;
      v164 = "ExposureNotificationSettingsUI";
LABEL_40:
      *v162 = v163;
      v162[1] = (unint64_t)(v164 - 32) | 0x8000000000000000;
      static NSBundle.PreferencesPluginLocation.default.getter();
      v196 = v162;
      v197 = v155;
      v198 = 0;
      goto LABEL_43;
    case 0x24u:
      v251 = sub_100004FC8(&qword_10015AA28);
      inited = swift_initStackObject(v251, &v316);
      v310 = xmmword_1001164D0;
      *(_OWORD *)(inited + 16) = xmmword_1001164D0;
      *(_BYTE *)(inited + 32) = 0;
      v110 = inited + 32;
      v252 = sub_100004FC8(&qword_10015AA30);
      v253 = type metadata accessor for PrimarySettingsListItemVisibilityRule(0);
      v254 = *(_QWORD *)(v253 - 8);
      v255 = *(_QWORD *)(v254 + 72);
      v256 = *(unsigned __int8 *)(v254 + 80);
      v257 = (v256 + 32) & ~v256;
      v117 = swift_allocObject(v252, v257 + v255, v256 | 7);
      *(_OWORD *)(v117 + 16) = v310;
      v258 = (unint64_t *)(v117 + v257);
      sub_100004FC8(&qword_100158290);
      v259 = 0x5579726574746142;
      v260 = 0xEE00495565676173;
      goto LABEL_46;
    case 0x26u:
      v261 = sub_100004FC8(&qword_10015AA28);
      v125 = swift_initStackObject(v261, &v323);
      *(_OWORD *)(v125 + 16) = xmmword_1001164D0;
      *(_BYTE *)(v125 + 32) = 0;
      v126 = v125 + 32;
      v262 = sub_100004FC8(&qword_10015AA30);
      v263 = type metadata accessor for PrimarySettingsListItemVisibilityRule(0);
      v264 = *(_QWORD *)(v263 - 8);
      v265 = *(_QWORD *)(v264 + 72);
      v266 = *(unsigned __int8 *)(v264 + 80);
      v267 = (v266 + 32) & ~v266;
      v160 = swift_allocObject(v262, v267 + 3 * v265, v266 | 7);
      *(_OWORD *)(v160 + 16) = xmmword_100118B50;
      v268 = v160 + v267;
      *(_QWORD *)v268 = swift_getKeyPath(&unk_1001189B8);
      *(_BYTE *)(v268 + 8) = 1;
      swift_storeEnumTagMultiPayload(v268, v263, 4);
      *(_BYTE *)(v268 + v265) = 1;
      swift_storeEnumTagMultiPayload(v268 + v265, v263, 7);
      v196 = (_QWORD *)(v268 + 2 * v265);
      *v196 = 0xD000000000000012;
      v196[1] = 0x8000000100123F00;
      v197 = v263;
      v198 = 1;
LABEL_43:
      swift_storeEnumTagMultiPayload(v196, v197, v198);
      *(_QWORD *)(v125 + 40) = v160;
LABEL_44:
      v26 = sub_1000EEFD0(v125);
      swift_setDeallocating(v125);
      v269 = *(_QWORD *)(v125 + 16);
      v270 = sub_100004FC8(&qword_10015AA40);
      v271 = v126;
      v272 = v269;
      goto LABEL_55;
    case 0x27u:
      v273 = sub_100004FC8(&qword_10015AA28);
      inited = swift_initStackObject(v273, &v324);
      v310 = xmmword_1001164D0;
      *(_OWORD *)(inited + 16) = xmmword_1001164D0;
      *(_BYTE *)(inited + 32) = 0;
      v110 = inited + 32;
      v274 = sub_100004FC8(&qword_10015AA30);
      v253 = type metadata accessor for PrimarySettingsListItemVisibilityRule(0);
      v275 = *(_QWORD *)(v253 - 8);
      v276 = *(_QWORD *)(v275 + 72);
      v277 = *(unsigned __int8 *)(v275 + 80);
      v278 = (v277 + 32) & ~v277;
      v117 = swift_allocObject(v274, v278 + v276, v277 | 7);
      *(_OWORD *)(v117 + 16) = v310;
      v258 = (unint64_t *)(v117 + v278);
      sub_100004FC8(&qword_100158290);
      v259 = 0xD000000000000017;
      v260 = 0x8000000100123EE0;
LABEL_46:
      *v258 = v259;
      v258[1] = v260;
      static NSBundle.PreferencesPluginLocation.default.getter();
      goto LABEL_53;
    case 0x2Au:
      v279 = sub_100004FC8(&qword_10015AA28);
      inited = swift_initStackObject(v279, &v321);
      *(_OWORD *)(inited + 16) = xmmword_1001164D0;
      *(_BYTE *)(inited + 32) = 0;
      v110 = inited + 32;
      v280 = sub_100004FC8(&qword_10015AA30);
      v281 = type metadata accessor for PrimarySettingsListItemVisibilityRule(0);
      v282 = *(_QWORD *)(v281 - 8);
      v283 = *(_QWORD *)(v282 + 72);
      v284 = *(unsigned __int8 *)(v282 + 80);
      v285 = (v284 + 32) & ~v284;
      v117 = swift_allocObject(v280, v285 + 2 * v283, v284 | 7);
      *(_OWORD *)(v117 + 16) = xmmword_100115BA0;
      v286 = (_BYTE *)(v117 + v285);
      *v286 = 1;
      swift_storeEnumTagMultiPayload(v286, v281, 7);
      v119 = &v286[v283];
      *v119 = 0xD000000000000010;
      v119[1] = 0x8000000100123F20;
      v120 = v281;
      v121 = 1;
      goto LABEL_54;
    case 0x2Bu:
      v287 = sub_100004FC8(&qword_10015AA28);
      inited = swift_initStackObject(v287, &v322);
      *(_OWORD *)(inited + 16) = xmmword_1001164D0;
      *(_BYTE *)(inited + 32) = 0;
      v110 = inited + 32;
      v288 = sub_100004FC8(&qword_10015AA30);
      v220 = type metadata accessor for PrimarySettingsListItemVisibilityRule(0);
      v289 = *(_QWORD *)(v220 - 8);
      v290 = *(_QWORD *)(v289 + 72);
      v291 = *(unsigned __int8 *)(v289 + 80);
      v292 = (v291 + 32) & ~v291;
      v117 = swift_allocObject(v288, v292 + 2 * v290, v291 | 7);
      *(_OWORD *)(v117 + 16) = xmmword_100115BA0;
      v293 = (_BYTE *)(v117 + v292);
      *v293 = 1;
      swift_storeEnumTagMultiPayload(v293, v220, 7);
      v225 = &v293[v290];
      v226 = &MCFeatureGameCenterAllowed;
LABEL_49:
      *v225 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v226);
      v225[1] = v294;
      v119 = v225;
      v120 = v220;
      v121 = 2;
      goto LABEL_54;
    case 0x2Eu:
      v295 = sub_100004FC8(&qword_10015AA28);
      inited = swift_initStackObject(v295, v330);
      v310 = xmmword_1001164D0;
      *(_OWORD *)(inited + 16) = xmmword_1001164D0;
      *(_BYTE *)(inited + 32) = 0;
      v110 = inited + 32;
      v296 = sub_100004FC8(&qword_10015AA30);
      v253 = type metadata accessor for PrimarySettingsListItemVisibilityRule(0);
      v297 = *(_QWORD *)(v253 - 8);
      v298 = *(_QWORD *)(v297 + 72);
      v299 = *(unsigned __int8 *)(v297 + 80);
      v300 = (v299 + 32) & ~v299;
      v117 = swift_allocObject(v296, v300 + v298, v299 | 7);
      *(_OWORD *)(v117 + 16) = v310;
      v258 = (unint64_t *)(v117 + v300);
      sub_100004FC8(&qword_100158290);
      v301 = 0xD000000000000010;
      v302 = "Carrier Settings";
      goto LABEL_52;
    case 0x2Fu:
      v303 = sub_100004FC8(&qword_10015AA28);
      inited = swift_initStackObject(v303, v329);
      v310 = xmmword_1001164D0;
      *(_OWORD *)(inited + 16) = xmmword_1001164D0;
      *(_BYTE *)(inited + 32) = 0;
      v110 = inited + 32;
      v304 = sub_100004FC8(&qword_10015AA30);
      v253 = type metadata accessor for PrimarySettingsListItemVisibilityRule(0);
      v305 = *(_QWORD *)(v253 - 8);
      v306 = *(_QWORD *)(v305 + 72);
      v307 = *(unsigned __int8 *)(v305 + 80);
      v308 = (v307 + 32) & ~v307;
      v117 = swift_allocObject(v304, v308 + v306, v307 | 7);
      *(_OWORD *)(v117 + 16) = v310;
      v258 = (unint64_t *)(v117 + v308);
      sub_100004FC8(&qword_100158290);
      v301 = 0xD000000000000011;
      v302 = "Internal Settings";
LABEL_52:
      *v258 = v301;
      v258[1] = (unint64_t)(v302 - 32) | 0x8000000000000000;
      static NSBundle.PreferencesPluginLocation.appleInternal.getter();
LABEL_53:
      v119 = v258;
      v120 = v253;
      v121 = 0;
LABEL_54:
      swift_storeEnumTagMultiPayload(v119, v120, v121);
      *(_QWORD *)(inited + 40) = v117;
      v26 = sub_1000EEFD0(inited);
      swift_setDeallocating(inited);
      v270 = sub_100004FC8(&qword_10015AA40);
      v271 = v110;
      v272 = 1;
LABEL_55:
      swift_arrayDestroy(v271, v272, v270);
      break;
    default:
      v26 = sub_1000EEFD0((uint64_t)&_swiftEmptyArrayStorage);
      sub_100013014((uint64_t)v3);
      break;
  }
  return v26;
}

