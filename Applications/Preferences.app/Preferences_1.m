void sub_10009E97C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  _QWORD v9[14];

  v1 = type metadata accessor for FLFollowUpGroupIdentity(0);
  __chkstk_darwin(v1);
  v2 = type metadata accessor for FLFollowUpInformation(0);
  v9[1] = *(_QWORD *)(v2 - 8);
  v3 = __chkstk_darwin(v2);
  v4 = __chkstk_darwin(v3);
  __chkstk_darwin(v4);
  v5 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  __chkstk_darwin(v5);
  v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012DC4(v0, (uint64_t)v7);
  v8 = (char *)&loc_10009EAC0 + dword_10009F2CC[swift_getEnumCaseMultiPayload(v7, v5)];
  __asm { BR              X10 }
}

uint64_t sub_10009EAD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v23;
  uint64_t v24;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 184) + 32))(v3, v4, v0);
  v7 = 0xE000000000000000;
  *(_QWORD *)(v6 - 160) = 0;
  *(_QWORD *)(v6 - 152) = 0xE000000000000000;
  _StringGuts.grow(_:)(36);
  v8 = swift_bridgeObjectRelease(*(_QWORD *)(v6 - 152));
  *(_QWORD *)(v6 - 160) = 0xD000000000000020;
  *(_QWORD *)(v6 - 152) = 0x8000000100124800;
  v9 = FLFollowUpInformation.groupIdentity.getter(v8);
  v10 = ((uint64_t (*)(uint64_t))FLFollowUpGroupIdentity.id.getter)(v9);
  v12 = v11;
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v1);
  v13._countAndFlagsBits = v10;
  v13._object = v12;
  String.append(_:)(v13);
  v14 = swift_bridgeObjectRelease(v12);
  ((void (*)(uint64_t))FLFollowUpInformation.itemIdentifier.getter)(v14);
  v16 = v15;
  v17 = swift_bridgeObjectRelease(v15);
  if (v16)
  {
    *(_QWORD *)(v6 - 176) = 46;
    *(_QWORD *)(v6 - 168) = 0xE100000000000000;
    v18 = ((uint64_t (*)(uint64_t))FLFollowUpInformation.itemIdentifier.getter)(v17);
    if (!v19)
    {
      __break(1u);
      JUMPOUT(0x10009F2C4);
    }
    v20 = v19;
    String.append(_:)(*(Swift::String *)&v18);
    swift_bridgeObjectRelease(v20);
    v21 = *(_QWORD *)(v6 - 176);
    v7 = *(_QWORD *)(v6 - 168);
  }
  else
  {
    v21 = 0;
  }
  v23 = v7;
  String.append(_:)(*(Swift::String *)&v21);
  swift_bridgeObjectRelease(v7);
  v24 = *(_QWORD *)(v6 - 160);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 184) + 8))(v3, v0);
  return v24;
}

id sub_10009F3A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSString v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSString v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSString v43;
  id v44;
  void *v45;
  NSString v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t inited;
  uint64_t v51;
  id v52;
  unint64_t v53;
  Class isa;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  Class v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  void *v69;
  NSString v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  unint64_t v77;
  Class v78;
  NSNumber v79;
  _QWORD *v80;
  NSString v81;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87[56];
  char v88[56];
  _QWORD v89[3];
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  _OWORD v94[2];

  v85 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v1 = __chkstk_darwin(v85);
  v86 = (uint64_t)&v83 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  v83 = (char *)&v83 - v3;
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v83 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for EnvironmentValues(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v83 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = v0;
  sub_10009BD7C();
  v12 = v11;
  v14 = v13;
  v16 = v15;
  v18 = v17 & 1;
  v19 = EnvironmentValues.init()();
  static Locale.autoupdatingCurrent.getter(v19);
  EnvironmentValues.locale.setter(v6);
  Text._resolveText(in:)(v10, v12, v14, v18, v16);
  v21 = v20;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  sub_100007618(v12, v14, v18);
  swift_bridgeObjectRelease(v16);
  v91 = 0u;
  v92 = 0u;
  v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v21);
  v23 = *((_QWORD *)&v92 + 1);
  if (*((_QWORD *)&v92 + 1))
  {
    v24 = sub_100007C2C(&v91, *((uint64_t *)&v92 + 1));
    v25 = *(_QWORD *)(v23 - 8);
    __chkstk_darwin(v24);
    v27 = (char *)&v83 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v25 + 16))(v27);
    v28 = _bridgeAnythingToObjectiveC<A>(_:)(v27, v23);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v23);
    sub_100005474(&v91);
  }
  else
  {
    v28 = 0;
  }
  v29 = objc_msgSend(objc_allocWithZone((Class)PSSpecifier), "initWithName:target:set:get:detail:cell:edit:", v22, v28, 0, 0, 0, 1, 0);

  swift_unknownObjectRelease(v28);
  v30 = v84;
  v31 = (uint64_t)v83;
  if (!v29)
    goto LABEL_31;
  v32 = sub_10009FCF0();
  if (v32 == 74)
  {
    sub_100012DC4(v30, v31);
LABEL_8:
    sub_10009E97C();
    v34 = v35;
    goto LABEL_9;
  }
  sub_100069A58(v32);
  v34 = v33;
  sub_100012DC4(v30, v31);
  if (!v34)
    goto LABEL_8;
LABEL_9:
  sub_100013014(v31);
  v36 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v34);
  objc_msgSend(v29, "setIdentifier:", v36);

  v37 = v30;
  v38 = v86;
  sub_100012DC4(v37, v86);
  switch(swift_getEnumCaseMultiPayload(v38, v85))
  {
    case 3u:
      v39 = *(_QWORD *)(v38 + 8);
      v40 = *(_QWORD *)(v38 + 24);
      v41 = *(_QWORD *)(v38 + 40);
      v42 = *(_QWORD *)(v38 + 56);
      v43 = String._bridgeToObjectiveC()();
      objc_msgSend(v29, "setIdentifier:", v43);

      v44 = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
      if (!v44)
      {
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000002CLL, 0x8000000100124030, "SettingsApp/PrimarySettingsListItemIdentifier.swift", 51, 2, 529, 0);
        __break(1u);
        JUMPOUT(0x10009FC3CLL);
      }
      v45 = v44;
      v46 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v42);
      swift_bridgeObjectRelease(v41);
      swift_bridgeObjectRelease(v40);
      swift_bridgeObjectRelease(v39);
      v47 = objc_msgSend(v45, "accountWithIdentifier:", v46);

      if (v47)
      {
        v48 = ACUIAccountKey;
        objc_msgSend(v29, "setProperty:forKey:", v47, ACUIAccountKey);
        v49 = sub_100004FC8(&qword_10015AA50);
        inited = swift_initStackObject(v49, v87);
        *(_OWORD *)(inited + 16) = xmmword_1001164D0;
        *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
        *(_QWORD *)(inited + 40) = v51;
        *(_QWORD *)(inited + 48) = v47;
        v52 = v47;
        v53 = sub_1000DB338(inited);
        sub_1000A1F80();
        isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v53);
        objc_msgSend(v29, "setUserInfo:", isa);

      }
      return v29;
    case 4u:
      v65 = *(_QWORD *)(v38 + 8);
      v66 = *(_QWORD *)(v38 + 24);
      v67 = *(_QWORD *)(v38 + 40);
      v68 = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
      if (!v68)
        goto LABEL_30;
      v69 = v68;
      v70 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v67);
      swift_bridgeObjectRelease(v66);
      swift_bridgeObjectRelease(v65);
      v71 = objc_msgSend(v69, "accountWithIdentifier:", v70);

      if (v71)
      {
        v72 = ACUIAccountKey;
        objc_msgSend(v29, "setProperty:forKey:", v71, ACUIAccountKey);
        v73 = sub_100004FC8(&qword_10015AA50);
        v74 = swift_initStackObject(v73, v88);
        *(_OWORD *)(v74 + 16) = xmmword_1001164D0;
        *(_QWORD *)(v74 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(v72);
        *(_QWORD *)(v74 + 40) = v75;
        *(_QWORD *)(v74 + 48) = v71;
        v76 = v71;
        v77 = sub_1000DB338(v74);
        sub_1000A1F80();
        v78 = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v77);
        objc_msgSend(v29, "setUserInfo:", v78);

      }
      v79.super.super.isa = Bool._bridgeToObjectiveC()().super.super.isa;
      v80 = &PSDMCHandleReauthKey;
LABEL_24:
      objc_msgSend(v29, "setProperty:forKey:", v79.super.super.isa, *v80);
LABEL_25:

      return v29;
    case 5u:
      v55 = *(_OWORD *)(v38 + 48);
      v93 = *(_OWORD *)(v38 + 32);
      v94[0] = v55;
      v94[1] = *(_OWORD *)(v38 + 64);
      v56 = *(_OWORD *)(v38 + 16);
      v91 = *(_OWORD *)v38;
      v92 = v56;
      v57 = *((_QWORD *)&v93 + 1);
      if (*((_QWORD *)&v93 + 1))
      {
        swift_bridgeObjectRetain(*((_QWORD *)&v93 + 1));
        v58 = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v57);
        objc_msgSend(v29, "setProperties:", v58);

      }
      sub_1000A1F38((uint64_t)v94, (uint64_t)v89);
      v59 = v90;
      if (v90)
      {
        v60 = sub_100007C2C(v89, v90);
        v61 = *(_QWORD *)(v59 - 8);
        __chkstk_darwin(v60);
        v63 = (char *)&v83 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v61 + 16))(v63);
        v64 = _bridgeAnythingToObjectiveC<A>(_:)(v63, v59);
        (*(void (**)(char *, uint64_t))(v61 + 8))(v63, v59);
        sub_100005474(v89);
      }
      else
      {
        v64 = 0;
      }
      objc_msgSend(v29, "setUserInfo:", v64);
      swift_unknownObjectRelease(v64);
      sub_10000BBB8((uint64_t)&v91);
      return v29;
    case 0x13u:
      v81 = String._bridgeToObjectiveC()();
      objc_msgSend(v29, "setProperty:forKey:", v81, PSIDKey);

      v79.super.super.isa = (Class)String._bridgeToObjectiveC()();
      objc_msgSend(v29, "setProperty:forKey:", v79.super.super.isa, PSDataSourceClassKey);
      goto LABEL_25;
    case 0x2Fu:
      v79.super.super.isa = (Class)String._bridgeToObjectiveC()();
      v80 = &PSDataSourceClassKey;
      goto LABEL_24;
    default:
      sub_100013014(v38);
      return v29;
  }
}

uint64_t sub_10009FCF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  unsigned int v4;
  uint64_t v6;

  v1 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012DC4(v0, (uint64_t)v3);
  v4 = swift_getEnumCaseMultiPayload(v3, v1) - 6;
  if (v4 < 0x2A && ((0x3BFFDFFFBFFuLL >> v4) & 1) != 0)
    return byte_100118B1E[v4];
  sub_100013014((uint64_t)v3);
  return 74;
}

void sub_10009FDA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  v1 = v0;
  v2 = type metadata accessor for FLFollowUpInformation(0);
  __chkstk_darwin(v2);
  v3 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012DC4(v1, (uint64_t)v5);
  v6 = (char *)sub_10009FE6C + 4 * word_10011860C[swift_getEnumCaseMultiPayload(v5, v3)];
  __asm { BR              X10 }
}

uint64_t sub_10009FE6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v3, v1, v2);
  Hasher._combine(_:)(2uLL);
  v5 = sub_100007828(&qword_10015AA58, (uint64_t (*)(uint64_t))&type metadata accessor for FLFollowUpInformation, (uint64_t)&protocol conformance descriptor for FLFollowUpInformation);
  ((void (*)(uint64_t, uint64_t, uint64_t))dispatch thunk of Hashable.hash(into:))(v0, v2, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v2);
}

Swift::Int sub_1000A0308()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  sub_10009FDA0();
  return Hasher._finalize()();
}

Swift::Int sub_1000A0348(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  sub_10009FDA0();
  return Hasher._finalize()();
}

uint64_t sub_1000A0384()
{
  return sub_100007828(&qword_10015AA20, type metadata accessor for PrimarySettingsListItemIdentifier, (uint64_t)&unk_100118848);
}

void sub_1000A03B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  _QWORD v9[14];

  v1 = type metadata accessor for FLFollowUpGroupIdentity(0);
  __chkstk_darwin(v1);
  v2 = type metadata accessor for FLFollowUpInformation(0);
  v9[1] = *(_QWORD *)(v2 - 8);
  v3 = __chkstk_darwin(v2);
  v4 = __chkstk_darwin(v3);
  __chkstk_darwin(v4);
  v5 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  __chkstk_darwin(v5);
  v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012DC4(v0, (uint64_t)v7);
  v8 = (char *)&loc_1000A04F4 + dword_1000A0E5C[swift_getEnumCaseMultiPayload(v7, v5)];
  __asm { BR              X10 }
}

uint64_t sub_1000A0504()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 184) + 32))(v3, v4, v5);
  v7 = 0xE000000000000000;
  *(_QWORD *)(v6 - 160) = 0;
  *(_QWORD *)(v6 - 152) = 0xE000000000000000;
  _StringGuts.grow(_:)(17);
  v8 = swift_bridgeObjectRelease(*(_QWORD *)(v6 - 152));
  strcpy((char *)(v6 - 160), "followUpLink.");
  *(_WORD *)(v6 - 146) = -4864;
  v9 = FLFollowUpInformation.groupIdentity.getter(v8);
  v10 = ((uint64_t (*)(uint64_t))FLFollowUpGroupIdentity.id.getter)(v9);
  v12 = v11;
  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
  v13._countAndFlagsBits = v10;
  v13._object = v12;
  String.append(_:)(v13);
  v14 = swift_bridgeObjectRelease(v12);
  ((void (*)(uint64_t))FLFollowUpInformation.itemIdentifier.getter)(v14);
  v16 = v15;
  v17 = swift_bridgeObjectRelease(v15);
  if (v16)
  {
    *(_QWORD *)(v6 - 176) = 46;
    *(_QWORD *)(v6 - 168) = 0xE100000000000000;
    v18 = ((uint64_t (*)(uint64_t))FLFollowUpInformation.itemIdentifier.getter)(v17);
    if (!v19)
    {
      __break(1u);
      JUMPOUT(0x1000A0E54);
    }
    v20 = v19;
    String.append(_:)(*(Swift::String *)&v18);
    swift_bridgeObjectRelease(v20);
    v21 = *(_QWORD *)(v6 - 176);
    v7 = *(_QWORD *)(v6 - 168);
  }
  else
  {
    v21 = 0;
  }
  v22 = v7;
  String.append(_:)(*(Swift::String *)&v21);
  swift_bridgeObjectRelease(v7);
  v23 = *(_QWORD *)(v6 - 160);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 184) + 8))(v3, v5);
  return v23;
}

uint64_t sub_1000A0F34@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100012DC4(v1, a1);
}

uint64_t sub_1000A0F40@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  __chkstk_darwin(a1);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012DC4(v2, (uint64_t)v6);
  v7 = type metadata accessor for StaticPrimarySettingsListItemProvider(0);
  v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  sub_10000F48C((uint64_t)v6, v8 + OBJC_IVAR____TtC11SettingsApp37StaticPrimarySettingsListItemProvider_id);
  sub_1000B2604(a1, a2);
  swift_setDeallocating(v8);
  sub_100013014(v8 + OBJC_IVAR____TtC11SettingsApp37StaticPrimarySettingsListItemProvider_id);
  return swift_deallocClassInstance(v8, *(unsigned int *)(*(_QWORD *)v8 + 48), *(unsigned __int16 *)(*(_QWORD *)v8 + 52));
}

uint64_t sub_1000A1010()
{
  return sub_100007828((unint64_t *)&qword_100158000, type metadata accessor for PrimarySettingsListItemIdentifier, (uint64_t)&unk_1001188B8);
}

void sub_1000A103C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  _QWORD v23[16];

  v4 = type metadata accessor for FLFollowUpInformation(0);
  v23[4] = *(_QWORD *)(v4 - 8);
  v23[5] = v4;
  v5 = __chkstk_darwin(v4);
  v23[2] = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v23[1] = (char *)v23 - v8;
  __chkstk_darwin(v7);
  v23[0] = (char *)v23 - v9;
  v10 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v11 = __chkstk_darwin(v10);
  v23[3] = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v14 = __chkstk_darwin(v13);
  v15 = __chkstk_darwin(v14);
  v16 = __chkstk_darwin(v15);
  __chkstk_darwin(v16);
  v17 = sub_100004FC8(&qword_10015AA48);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)v23 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = (uint64_t)&v20[*(int *)(v18 + 48)];
  sub_100012DC4(a1, (uint64_t)v20);
  sub_100012DC4(a2, v21);
  v22 = (char *)sub_1000A1228 + 4 * word_100118676[swift_getEnumCaseMultiPayload(v20, v10)];
  __asm { BR              X10 }
}

uint64_t sub_1000A1228()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  sub_100012DC4(v3, v0);
  if (swift_getEnumCaseMultiPayload(v2, v1))
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v4 - 176) + 8))(v0, *(_QWORD *)(v4 - 168));
    sub_1000A1EF8(v3);
    v5 = 0;
  }
  else
  {
    v7 = *(_QWORD *)(v4 - 176);
    v8 = *(_QWORD *)(v4 - 168);
    v9 = *(_QWORD *)(v4 - 208);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v9, v2, v8);
    v5 = ((uint64_t (*)(uint64_t, uint64_t))static FLFollowUpInformation.== infix(_:_:))(v0, v9);
    v10 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v10(v9, v8);
    v10(v0, v8);
    sub_100013014(v3);
  }
  return v5 & 1;
}

unint64_t sub_1000A1CFC()
{
  unint64_t result;

  result = qword_10015AA38;
  if (!qword_10015AA38)
  {
    result = swift_getWitnessTable(&unk_1001196CC, &type metadata for CoreTelephonyFeatureFlags);
    atomic_store(result, (unint64_t *)&qword_10015AA38);
  }
  return result;
}

uint64_t sub_1000A1D40@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = MobileGestalt_get_ringerButtonCapability(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A1D68@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = MobileGestalt_get_iPadCapability(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A1D90@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = MobileGestalt_get_isSimulator(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A1DB8@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = MobileGestalt_get_deviceSupportsApplePencil(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A1DE0@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = MobileGestalt_get_assistantCapability(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A1E08@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = MobileGestalt_get_accessibilityCapability(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A1E30@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = MobileGestalt_get_bluetoothLECapability(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A1E58@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = MobileGestalt_get_cellularDataCapability(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A1E80@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = MobileGestalt_get_personalHotspotCapability(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A1EA8@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = MobileGestalt_get_bluetoothCapability(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A1ED0@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = MobileGestalt_get_wifiCapability(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A1EF8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004FC8(&qword_10015AA48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000A1F38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004FC8(&qword_10015BA90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000A1F80()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015ABB0;
  if (!qword_10015ABB0)
  {
    v1 = objc_opt_self(ACAccount);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10015ABB0);
  }
  return result;
}

void sub_1000A1FBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  _QWORD v33[7];
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;

  v34 = type metadata accessor for FLFollowUpInformation(0);
  v39 = *(_QWORD *)(v34 - 8);
  v4 = __chkstk_darwin(v34);
  v33[5] = (char *)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v33[6] = (char *)v33 - v7;
  v8 = __chkstk_darwin(v6);
  v33[3] = (char *)v33 - v9;
  v10 = __chkstk_darwin(v8);
  v33[4] = (char *)v33 - v11;
  v12 = __chkstk_darwin(v10);
  v33[1] = (char *)v33 - v13;
  __chkstk_darwin(v12);
  v33[2] = (char *)v33 - v14;
  v15 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v16 = __chkstk_darwin(v15);
  v37 = (char *)v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v35 = (char *)v33 - v19;
  v20 = __chkstk_darwin(v18);
  v21 = __chkstk_darwin(v20);
  v22 = __chkstk_darwin(v21);
  v23 = __chkstk_darwin(v22);
  v24 = __chkstk_darwin(v23);
  __chkstk_darwin(v24);
  v25 = sub_100004FC8(&qword_10015AA48);
  v26 = __chkstk_darwin(v25);
  v28 = (char *)v33 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = &v28[*(int *)(v26 + 48)];
  v36 = a1;
  v30 = a1;
  v31 = (uint64_t)v29;
  sub_100012DC4(v30, (uint64_t)v28);
  v38 = a2;
  sub_100012DC4(a2, v31);
  v40 = v28;
  v32 = (char *)sub_1000A2290 + 4 * word_1001186E0[swift_getEnumCaseMultiPayload(v28, v15)];
  __asm { BR              X10 }
}

uint64_t sub_1000A2290()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  void (*v15)(uint64_t, uint64_t);

  v4 = *(_QWORD *)(v3 - 296);
  sub_100012DC4(v4, v0);
  if (swift_getEnumCaseMultiPayload(v1, v2))
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 - 304) + 8))(v0, *(_QWORD *)(v3 - 344));
    v6 = *(_QWORD *)(v3 - 336);
    sub_100012DC4(*(_QWORD *)(v3 - 328), v6);
    v7 = (char *)&loc_1000A2C1C + 4 * byte_10011874A[swift_getEnumCaseMultiPayload(v6, v2)];
    __asm { BR              X10 }
  }
  v9 = *(_QWORD *)(v3 - 304);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32);
  v11 = *(_QWORD *)(v3 - 384);
  v12 = *(_QWORD *)(v3 - 344);
  v10(v11, v0, v12);
  v13 = *(_QWORD *)(v3 - 392);
  v10(v13, v1, v12);
  if ((((uint64_t (*)(uint64_t, uint64_t))static FLFollowUpInformation.== infix(_:_:))(v11, v13) & 1) != 0)
  {
    v14 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v14(v13, v12);
    v14(v11, v12);
    sub_100013014(v4);
    v5 = 0;
  }
  else
  {
    v5 = ((uint64_t (*)(uint64_t, uint64_t))static FLFollowUpInformation.< infix(_:_:))(v11, v13);
    v15 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v15(v13, v12);
    v15(v11, v12);
    sub_100013014(v4);
  }
  return v5 & 1;
}

uint64_t sub_1000A3448(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *);
  uint64_t v11;

  v4 = type metadata accessor for Notification(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void (**)(char *))(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)(a2);
  swift_retain(v8);
  v9(v7);
  swift_release(v8);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

id sub_1000A34EC()
{
  if (qword_100156CF0 != -1)
    swift_once(&qword_100156CF0, sub_1000A90C8);
  qword_10015D388 = qword_10015D390;
  return (id)qword_10015D390;
}

uint64_t sub_1000A3534@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[24];

  v3 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  __chkstk_darwin(v3);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100004FC8(&qword_10015AAE8);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)v19 - v10;
  v12 = v1 + OBJC_IVAR____TtC11SettingsApp38PrimaryAppleAccountListSectionProvider____lazy_storage___familyModel;
  swift_beginAccess(v1 + OBJC_IVAR____TtC11SettingsApp38PrimaryAppleAccountListSectionProvider____lazy_storage___familyModel, v22, 0, 0);
  sub_100018C00(v12, (uint64_t)v11, &qword_10015AAE8);
  v13 = type metadata accessor for PrimarySettingsListFamilyLinkModel(0);
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v11, 1, v13) != 1)
    return sub_100007670((uint64_t)v11, a1, type metadata accessor for PrimarySettingsListFamilyLinkModel);
  sub_10000BA50((uint64_t)v11, &qword_10015AAE8);
  swift_storeEnumTagMultiPayload(v5, v3, 7);
  static FamilySettingsFactory.sharedProvider.getter(v19);
  v15 = v20;
  v16 = v21;
  sub_100007C2C(v19, v20);
  dispatch thunk of FamilySettingsViewsProtocol.rowStatus.getter(v15, v16);
  sub_100007670((uint64_t)v5, a1, type metadata accessor for PrimarySettingsListItemIdentifier);
  v17 = (_QWORD *)(a1 + *(int *)(v13 + 24));
  *v17 = 0;
  v17[1] = 0xE000000000000000;
  sub_100005474(v19);
  sub_1000076F0(a1, (uint64_t)v9, type metadata accessor for PrimarySettingsListFamilyLinkModel);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v9, 0, 1, v13);
  swift_beginAccess(v12, v19, 33, 0);
  sub_1000A53D8((uint64_t)v9, v12);
  return swift_endAccess(v19);
}

id sub_1000A374C()
{
  void *v0;
  objc_class *ObjectType;
  id v2;
  id v3;
  void *v4;
  objc_super v6;

  ObjectType = (objc_class *)swift_getObjectType(v0);
  v2 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  v3 = v0;
  v4 = (void *)static FamilySettingsFactory.FamilySettingsViewsHaveChanged.getter();
  objc_msgSend(v2, "removeObserver:name:object:", v3, v4, 0);

  v6.receiver = v3;
  v6.super_class = ObjectType;
  return objc_msgSendSuper2(&v6, "dealloc");
}

uint64_t sub_1000A3920()
{
  return type metadata accessor for PrimaryAppleAccountListSectionProvider(0);
}

uint64_t type metadata accessor for PrimaryAppleAccountListSectionProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_10015AAB8;
  if (!qword_10015AAB8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PrimaryAppleAccountListSectionProvider);
  return result;
}

void sub_1000A3964(_BYTE *a1, uint64_t a2)
{
  id v4;
  unsigned int v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _BYTE *v12;
  id v13;
  void *v14;
  uint64_t (*v15)(uint64_t);
  _QWORD v16[3];
  void *v17;
  uint64_t (*v18)(uint64_t);
  uint64_t v19;

  v4 = objc_msgSend((id)objc_opt_self(PSLaunchTracker), "sharedInstance");
  v5 = objc_msgSend(v4, "launchHasCompleted");

  if (v5)
  {
    if ((a1[OBJC_IVAR____TtC11SettingsApp38PrimaryAppleAccountListSectionProvider_registeredForFamilyChange] & 1) == 0)
    {
      a1[OBJC_IVAR____TtC11SettingsApp38PrimaryAppleAccountListSectionProvider_registeredForFamilyChange] = 1;
      v6 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
      v7 = (void *)static FamilySettingsFactory.FamilySettingsViewsHaveChanged.getter();
      v8 = objc_msgSend((id)objc_opt_self(NSOperationQueue), "mainQueue");
      v9 = swift_allocObject(&unk_10014B9F8, 32, 7);
      *(_QWORD *)(v9 + 16) = a1;
      *(_QWORD *)(v9 + 24) = a2;
      v18 = sub_1000A5444;
      v19 = v9;
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 1107296256;
      v16[2] = sub_1000A3448;
      v17 = &unk_10014BA10;
      v10 = _Block_copy(v16);
      v11 = v19;
      v12 = a1;
      swift_release(v11);
      v13 = objc_msgSend(v6, "addObserverForName:object:queue:usingBlock:", v7, 0, v8, v10);
      _Block_release(v10);
      swift_unknownObjectRelease(v13);

      static FamilySettingsFactory.sharedProvider.getter(v16);
      v14 = v17;
      v15 = v18;
      sub_100007C2C(v16, (uint64_t)v17);
      dispatch thunk of FamilySettingsViewsProtocol.sendWakeupNotification()(v14, v15);
      sub_100005474(v16);
    }
  }
}

void sub_1000A3B50(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = &unk_100118B98;
  v4[1] = &unk_100118BB0;
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[4] = &unk_100118BC8;
  sub_1000A3BF8(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 6, v4, a1 + 80);
  }
}

void sub_1000A3BF8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10015AAC8)
  {
    v2 = type metadata accessor for PrimarySettingsListFamilyLinkModel(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10015AAC8);
  }
}

uint64_t sub_1000A3C4C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0 + OBJC_IVAR____TtC11SettingsApp38PrimaryAppleAccountListSectionProvider_id;
  v2 = *(_QWORD *)v1;
  sub_10000BA8C(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16));
  return v2;
}

uint64_t sub_1000A3CA0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE **v2;
  _BYTE *v4;
  void **v5;
  _BYTE v7[96];

  v4 = *v2;
  v5 = (void **)sub_100007C2C(a1, a1[3]);
  sub_1000A4374(*v5, v4, (uint64_t)v7);
  return sub_10006F728((uint64_t)v7, a2);
}

uint64_t sub_1000A3CEC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  NSString v46;
  NSString v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  _QWORD v70[2];
  char v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;

  v3 = sub_100004FC8(&qword_10015AAE8);
  __chkstk_darwin(v3);
  v63 = (uint64_t)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PrimarySettingsListFamilyLinkModel(0);
  v62 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v66 = (uint64_t)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v61 - v8;
  v10 = sub_100004FC8(&qword_10015AAD8);
  __chkstk_darwin(v10);
  v12 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for FamilyRowStatus(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v61 - v19;
  v21 = Notification.userInfo.getter(v18);
  if (!v21)
    v21 = sub_1000DB458((uint64_t)_swiftEmptyArrayStorage);
  v22 = v21;
  v68 = static FamilySettingsFactory.Marquee.getter();
  v69 = v23;
  AnyHashable.init<A>(_:)(v70, &v68, &type metadata for String, &protocol witness table for String);
  v24 = *(_QWORD *)(v22 + 16);
  v67 = v5;
  if (v24 && (v25 = sub_1000DA95C((uint64_t)v70), (v26 & 1) != 0))
  {
    sub_1000148AC(*(_QWORD *)(v22 + 56) + 32 * v25, (uint64_t)&v74);
  }
  else
  {
    v74 = 0u;
    v75 = 0u;
  }
  sub_100014878((uint64_t)v70);
  if (!*((_QWORD *)&v75 + 1))
  {
    sub_10000BA50((uint64_t)&v74, &qword_10015BA90);
    goto LABEL_11;
  }
  if (!swift_dynamicCast(&v68, &v74, (char *)&type metadata for Any + 8, &type metadata for String, 6))
  {
LABEL_11:
    v64 = 0;
    v27 = 0xE000000000000000;
    goto LABEL_12;
  }
  v64 = v68;
  v27 = v69;
LABEL_12:
  v65 = v27;
  v68 = static FamilySettingsFactory.Status.getter();
  v69 = v28;
  AnyHashable.init<A>(_:)(v70, &v68, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v22 + 16) && (v29 = sub_1000DA95C((uint64_t)v70), (v30 & 1) != 0))
  {
    sub_1000148AC(*(_QWORD *)(v22 + 56) + 32 * v29, (uint64_t)&v74);
  }
  else
  {
    v74 = 0u;
    v75 = 0u;
  }
  swift_bridgeObjectRelease(v22);
  sub_100014878((uint64_t)v70);
  if (*((_QWORD *)&v75 + 1))
  {
    v31 = swift_dynamicCast(v12, &v74, (char *)&type metadata for Any + 8, v13, 6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v12, v31 ^ 1u, 1, v13);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v20, v12, v13);
      goto LABEL_21;
    }
  }
  else
  {
    sub_10000BA50((uint64_t)&v74, &qword_10015BA90);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, v13);
  }
  static FamilySettingsFactory.sharedProvider.getter(v70);
  v32 = a2;
  v33 = v72;
  v34 = v73;
  sub_100007C2C(v70, v72);
  v35 = v34;
  a2 = v32;
  dispatch thunk of FamilySettingsViewsProtocol.rowStatus.getter(v33, v35);
  sub_100005474(v70);
  sub_10000BA50((uint64_t)v12, &qword_10015AAD8);
LABEL_21:
  sub_1000A3534((uint64_t)v9);
  v36 = v67;
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, &v9[*(int *)(v67 + 20)], v13);
  sub_1000076B4((uint64_t)v9, type metadata accessor for PrimarySettingsListFamilyLinkModel);
  v37 = sub_1000A5390();
  v38 = dispatch thunk of static Equatable.== infix(_:_:)(v17, v20, v13, v37);
  v39 = *(void (**)(char *, uint64_t))(v14 + 8);
  v39(v17, v13);
  if ((v38 & 1) == 0)
  {
    sub_1000A3534((uint64_t)v9);
    (*(void (**)(char *, char *, uint64_t))(v14 + 24))(&v9[*(int *)(v36 + 20)], v20, v13);
    v40 = v63;
    sub_100007670((uint64_t)v9, v63, type metadata accessor for PrimarySettingsListFamilyLinkModel);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v62 + 56))(v40, 0, 1, v36);
    v41 = a2;
    v42 = a2 + OBJC_IVAR____TtC11SettingsApp38PrimaryAppleAccountListSectionProvider____lazy_storage___familyModel;
    swift_beginAccess(a2 + OBJC_IVAR____TtC11SettingsApp38PrimaryAppleAccountListSectionProvider____lazy_storage___familyModel, v70, 33, 0);
    sub_1000A53D8(v40, v42);
    swift_endAccess(v70);
    if (qword_100156CE8 != -1)
      swift_once(&qword_100156CE8, sub_1000A34EC);
    v43 = (void *)qword_10015D388;
    FamilyRowStatus.rawValue.getter();
    v45 = v44;
    v46 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v45);
    v47 = String._bridgeToObjectiveC()();
    objc_msgSend(v43, "setValue:forKey:", v46, v47);

    a2 = v41;
    v36 = v67;
  }
  v48 = v66;
  sub_1000A3534(v66);
  v49 = (uint64_t *)(v48 + *(int *)(v36 + 24));
  v51 = *v49;
  v50 = v49[1];
  swift_bridgeObjectRetain(v50);
  sub_1000076B4(v48, type metadata accessor for PrimarySettingsListFamilyLinkModel);
  v52 = v65;
  if (v51 == v64 && v50 == v65)
  {
    swift_bridgeObjectRelease(v65);
    goto LABEL_29;
  }
  v53 = v51;
  v54 = v64;
  v55 = _stringCompareWithSmolCheck(_:_:expecting:)(v53, v50, v64, v65, 0);
  swift_bridgeObjectRelease(v50);
  if ((v55 & 1) != 0)
  {
LABEL_29:
    swift_bridgeObjectRelease(v52);
    if ((v38 & 1) != 0)
      return ((uint64_t (*)(char *, uint64_t))v39)(v20, v13);
    goto LABEL_32;
  }
  sub_1000A3534((uint64_t)v9);
  v56 = v67;
  v57 = &v9[*(int *)(v67 + 24)];
  swift_bridgeObjectRelease(*((_QWORD *)v57 + 1));
  *(_QWORD *)v57 = v54;
  *((_QWORD *)v57 + 1) = v52;
  v58 = v63;
  sub_100007670((uint64_t)v9, v63, type metadata accessor for PrimarySettingsListFamilyLinkModel);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v62 + 56))(v58, 0, 1, v56);
  v59 = a2 + OBJC_IVAR____TtC11SettingsApp38PrimaryAppleAccountListSectionProvider____lazy_storage___familyModel;
  swift_beginAccess(a2 + OBJC_IVAR____TtC11SettingsApp38PrimaryAppleAccountListSectionProvider____lazy_storage___familyModel, v70, 33, 0);
  sub_1000A53D8(v58, v59);
  swift_endAccess(v70);
LABEL_32:
  sub_100007C2C((_QWORD *)(a2 + OBJC_IVAR____TtC11SettingsApp38PrimaryAppleAccountListSectionProvider_invalidator), *(_QWORD *)(a2 + OBJC_IVAR____TtC11SettingsApp38PrimaryAppleAccountListSectionProvider_invalidator + 24));
  v70[0] = "Family Row";
  v70[1] = 10;
  v71 = 2;
  PassthroughSubject.send(_:)(v70);
  return ((uint64_t (*)(char *, uint64_t))v39)(v20, v13);
}

double sub_1000A4374@<D0>(void *a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  id v44;
  unint64_t v45;
  void **v46;
  id v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  unint64_t v72;
  void (*v73)(char *, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  void *v95;
  NSString v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t (*v108)(uint64_t, uint64_t, uint64_t);
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  char *v124;
  unint64_t v125;
  unint64_t v126;
  void (*v127)(char *, uint64_t, uint64_t);
  uint64_t v128;
  char *v129;
  unint64_t v130;
  char v131;
  void (*v132)(char *, uint64_t);
  _BYTE *v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int v136;
  _BYTE *v137;
  double result;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t ObjectType;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  _BYTE *v163;
  _QWORD v164[2];
  _QWORD *v165;
  _QWORD v166[3];
  ValueMetadata *v167;
  _UNKNOWN **v168;
  uint64_t v169;

  v160 = a3;
  ObjectType = swift_getObjectType(a2);
  v144 = sub_100004FC8(&qword_10015AAD0);
  __chkstk_darwin(v144);
  v153 = (char *)&v139 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100004FC8(&qword_10015AAD8);
  v7 = __chkstk_darwin(v6);
  v140 = (uint64_t)&v139 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v147 = (uint64_t)&v139 - v10;
  __chkstk_darwin(v9);
  v148 = (char *)&v139 - v11;
  v156 = type metadata accessor for FamilyRowStatus(0);
  v155 = *(_QWORD *)(v156 - 8);
  v12 = __chkstk_darwin(v156);
  v152 = (char *)&v139 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v154 = (char *)&v139 - v14;
  v150 = type metadata accessor for PrimarySettingsListFamilyLinkModel(0);
  __chkstk_darwin(v150);
  v151 = (uint64_t)&v139 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for PrimarySettingsListItemModel(0);
  v162 = *(_QWORD *)(v16 - 8);
  v17 = __chkstk_darwin(v16);
  v141 = (uint64_t)&v139 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v145 = (uint64_t)&v139 - v20;
  v21 = __chkstk_darwin(v19);
  v143 = (uint64_t)&v139 - v22;
  v23 = __chkstk_darwin(v21);
  v142 = (char *)&v139 - v24;
  v25 = __chkstk_darwin(v23);
  v27 = (char *)&v139 - v26;
  v28 = __chkstk_darwin(v25);
  v30 = (char *)&v139 - v29;
  v31 = __chkstk_darwin(v28);
  v149 = (uint64_t)&v139 - v32;
  __chkstk_darwin(v31);
  v159 = (char *)&v139 - v33;
  v34 = type metadata accessor for PrimarySettingsListAppleAccountLinkModel(0);
  v35 = __chkstk_darwin(v34);
  v37 = (char *)&v139 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  v39 = (char *)&v139 - v38;
  v40 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  __chkstk_darwin(v40);
  v42 = (char *)&v139 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v167 = &type metadata for PrimarySettingsListDataModelGenerationContext;
  v168 = &off_100148E38;
  v166[0] = a1;
  v165 = _swiftEmptyArrayStorage;
  v146 = v43;
  swift_storeEnumTagMultiPayload(v42, v43, 6);
  v44 = a1;
  v45 = sub_10009CE88();
  v46 = (void **)sub_100007C2C(v166, (uint64_t)v167);
  LODWORD(v161) = sub_10003AF58(1, v45, *v46);
  swift_bridgeObjectRelease(v45);
  v47 = objc_msgSend((id)objc_opt_self(PSLaunchTracker), "sharedInstance");
  LODWORD(a1) = objc_msgSend(v47, "launchHasCompleted");

  v163 = a2;
  v157 = v16;
  if ((_DWORD)a1)
  {
    v48 = *(char **)&a2[OBJC_IVAR____TtC11SettingsApp38PrimaryAppleAccountListSectionProvider_primaryAppleAccountStatusObserver];
    v50 = *(_QWORD *)&v48[OBJC_IVAR____TtC11SettingsApp33PrimaryAppleAccountStatusObserver_accountStatus];
    v49 = *(_QWORD *)&v48[OBJC_IVAR____TtC11SettingsApp33PrimaryAppleAccountStatusObserver_accountStatus + 8];
    v52 = *(_QWORD *)&v48[OBJC_IVAR____TtC11SettingsApp33PrimaryAppleAccountStatusObserver_accountStatus + 16];
    v51 = *(_QWORD *)&v48[OBJC_IVAR____TtC11SettingsApp33PrimaryAppleAccountStatusObserver_accountStatus + 24];
    v54 = *(_QWORD *)&v48[OBJC_IVAR____TtC11SettingsApp33PrimaryAppleAccountStatusObserver_accountStatus + 32];
    v53 = *(char **)&v48[OBJC_IVAR____TtC11SettingsApp33PrimaryAppleAccountStatusObserver_accountStatus + 40];
    sub_100096F30(v50, v49, v52, v51, v54, v53);
    sub_1000A63C4(v48);
    sub_1000076F0((uint64_t)v42, (uint64_t)v39, type metadata accessor for PrimarySettingsListItemIdentifier);
    v55 = (uint64_t *)&v39[*(int *)(v34 + 20)];
    *v55 = v50;
    v55[1] = v49;
    v55[2] = v52;
    v55[3] = v51;
    v55[4] = v54;
    v55[5] = (uint64_t)v53;
    v39[*(int *)(v34 + 24)] = v161 & 1;
    v161 = (uint64_t)v42;
    v56 = (uint64_t)v42;
    v57 = (uint64_t)v159;
    sub_1000076F0(v56, (uint64_t)v159, type metadata accessor for PrimarySettingsListItemIdentifier);
    v58 = v57 + *(int *)(v157 + 20);
    v153 = v39;
    sub_1000076F0((uint64_t)v39, v58, type metadata accessor for PrimarySettingsListAppleAccountLinkModel);
    v59 = type metadata accessor for PrimarySettingsListItemViewType(0);
    swift_storeEnumTagMultiPayload(v58, v59, 0);
    v60 = v149;
    sub_1000076F0(v57, v149, type metadata accessor for PrimarySettingsListItemModel);
    v140 = v50;
    v141 = v49;
    v144 = v52;
    v145 = v51;
    v147 = v54;
    v148 = v53;
    sub_100096F30(v50, v49, v52, v51, v54, v53);
    v61 = sub_100052720(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
    v63 = *(_QWORD *)(v61 + 16);
    v62 = *(_QWORD *)(v61 + 24);
    if (v63 >= v62 >> 1)
      v61 = sub_100052720(v62 > 1, v63 + 1, 1, v61);
    *(_QWORD *)(v61 + 16) = v63 + 1;
    v64 = (*(unsigned __int8 *)(v162 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v162 + 80);
    v65 = *(_QWORD *)(v162 + 72);
    sub_100007670(v60, v61 + v64 + v65 * v63, type metadata accessor for PrimarySettingsListItemModel);
    v165 = (_QWORD *)v61;
    v66 = v151;
    v67 = v163;
    sub_1000A3534(v151);
    v68 = v155;
    v69 = v154;
    v70 = v156;
    (*(void (**)(char *, uint64_t, uint64_t))(v155 + 16))(v154, v66 + *(int *)(v150 + 20), v156);
    sub_1000076B4(v66, type metadata accessor for PrimarySettingsListFamilyLinkModel);
    v71 = v152;
    (*(void (**)(char *, _QWORD, uint64_t))(v68 + 104))(v152, enum case for FamilyRowStatus.hidden(_:), v70);
    v72 = sub_1000A5390();
    LOBYTE(v66) = dispatch thunk of static Equatable.== infix(_:_:)(v69, v71, v70, v72);
    v73 = *(void (**)(char *, uint64_t))(v68 + 8);
    v73(v71, v70);
    v73(v69, v70);
    if ((v66 & 1) == 0)
    {
      v74 = (uint64_t)v142;
      swift_storeEnumTagMultiPayload(v142, v146, 7);
      v75 = v74 + *(int *)(v157 + 20);
      sub_1000A3534(v75);
      swift_storeEnumTagMultiPayload(v75, v59, 2);
      v76 = v143;
      sub_1000076F0(v74, v143, type metadata accessor for PrimarySettingsListItemModel);
      v77 = (unint64_t)v165;
      if ((swift_isUniquelyReferenced_nonNull_native(v165) & 1) == 0)
        v77 = sub_100052720(0, *(_QWORD *)(v77 + 16) + 1, 1, v77);
      v79 = *(_QWORD *)(v77 + 16);
      v78 = *(_QWORD *)(v77 + 24);
      if (v79 >= v78 >> 1)
        v77 = sub_100052720(v78 > 1, v79 + 1, 1, v77);
      *(_QWORD *)(v77 + 16) = v79 + 1;
      sub_100007670(v76, v77 + v64 + v79 * v65, type metadata accessor for PrimarySettingsListItemModel);
      v165 = (_QWORD *)v77;
      sub_1000076B4(v74, type metadata accessor for PrimarySettingsListItemModel);
      v67 = v163;
    }
    v80 = (_QWORD *)(*(_QWORD *)&v67[OBJC_IVAR____TtC11SettingsApp38PrimaryAppleAccountListSectionProvider_followUpListElementsGenerator]
                   + OBJC_IVAR____TtC11SettingsApp29FollowUpListElementsGenerator_currentSnapshot);
    swift_beginAccess(v80, &v169, 0, 0);
    if (*(_QWORD *)(*v80 + 16))
    {
      v81 = swift_bridgeObjectRetain(*v80);
      sub_1000F20B8(v81);
      v82 = v80[2];
      v83 = (uint64_t)v159;
      v84 = v160;
      v85 = (uint64_t)v153;
      if (v82)
      {
        v86 = v80[1];
LABEL_24:
        v164[0] = v86;
        v164[1] = v82;
        v118 = sub_100008A5C();
        swift_bridgeObjectRetain(v82);
        v82 = Text.init<A>(_:)(v164, &type metadata for String, v118);
        v114 = v113;
        v116 = v115;
        LODWORD(v118) = v117 & 1;
        sub_100096F68(v140, v141, v144, v145, v147, v148);
        sub_1000076B4(v83, type metadata accessor for PrimarySettingsListItemModel);
        sub_1000076B4(v85, type metadata accessor for PrimarySettingsListAppleAccountLinkModel);
        sub_1000076B4(v161, type metadata accessor for PrimarySettingsListItemIdentifier);
LABEL_40:
        v118 = v118;
        v137 = v163;
        v134 = *(_QWORD *)&v163[OBJC_IVAR____TtC11SettingsApp38PrimaryAppleAccountListSectionProvider_id];
        v135 = *(_QWORD *)&v163[OBJC_IVAR____TtC11SettingsApp38PrimaryAppleAccountListSectionProvider_id + 8];
        v136 = v163[OBJC_IVAR____TtC11SettingsApp38PrimaryAppleAccountListSectionProvider_id + 16];
        v89 = (unint64_t)v165;
        sub_10000BA8C(v134, v135, v163[OBJC_IVAR____TtC11SettingsApp38PrimaryAppleAccountListSectionProvider_id + 16]);
        sub_1000A3964(v137, ObjectType);
        goto LABEL_41;
      }
    }
    else
    {
      v111 = v80[3];
      v83 = (uint64_t)v159;
      v84 = v160;
      v85 = (uint64_t)v153;
      if (!*(_QWORD *)(v111 + 16))
      {
        sub_100096F68(v140, v141, v144, v145, v147, v148);
        sub_1000076B4(v83, type metadata accessor for PrimarySettingsListItemModel);
        sub_1000076B4(v85, type metadata accessor for PrimarySettingsListAppleAccountLinkModel);
        sub_1000076B4(v161, type metadata accessor for PrimarySettingsListItemIdentifier);
        v82 = 0;
        goto LABEL_39;
      }
      v112 = swift_bridgeObjectRetain(v111);
      sub_1000F20B8(v112);
      v82 = v80[5];
      if (v82)
      {
        v86 = v80[4];
        goto LABEL_24;
      }
    }
    sub_100096F68(v140, v141, v144, v145, v147, v148);
    sub_1000076B4(v83, type metadata accessor for PrimarySettingsListItemModel);
    sub_1000076B4(v85, type metadata accessor for PrimarySettingsListAppleAccountLinkModel);
    sub_1000076B4(v161, type metadata accessor for PrimarySettingsListItemIdentifier);
LABEL_39:
    v114 = 0;
    LODWORD(v118) = 0;
    v116 = 0;
    goto LABEL_40;
  }
  sub_1000076F0((uint64_t)v42, (uint64_t)v37, type metadata accessor for PrimarySettingsListItemIdentifier);
  sub_1000A863C(&v169);
  sub_100018BA0((uint64_t)&v169, (uint64_t)&v37[*(int *)(v34 + 20)]);
  v37[*(int *)(v34 + 24)] = v161 & 1;
  sub_1000076F0((uint64_t)v42, (uint64_t)v30, type metadata accessor for PrimarySettingsListItemIdentifier);
  v87 = (uint64_t)&v30[*(int *)(v16 + 20)];
  sub_1000076F0((uint64_t)v37, v87, type metadata accessor for PrimarySettingsListAppleAccountLinkModel);
  v88 = type metadata accessor for PrimarySettingsListItemViewType(0);
  swift_storeEnumTagMultiPayload(v87, v88, 0);
  sub_1000076F0((uint64_t)v30, (uint64_t)v27, type metadata accessor for PrimarySettingsListItemModel);
  v89 = sub_100052720(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
  v91 = *(_QWORD *)(v89 + 16);
  v90 = *(_QWORD *)(v89 + 24);
  v92 = (uint64_t)v27;
  if (v91 >= v90 >> 1)
    v89 = sub_100052720(v90 > 1, v91 + 1, 1, v89);
  v159 = v37;
  *(_QWORD *)(v89 + 16) = v91 + 1;
  v93 = (*(unsigned __int8 *)(v162 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v162 + 80);
  v94 = *(char **)(v162 + 72);
  sub_100007670(v92, v89 + v93 + (_QWORD)v94 * v91, type metadata accessor for PrimarySettingsListItemModel);
  v165 = (_QWORD *)v89;
  if (qword_100156CE8 != -1)
    swift_once(&qword_100156CE8, sub_1000A34EC);
  v95 = (void *)qword_10015D388;
  v96 = String._bridgeToObjectiveC()();
  v97 = objc_msgSend(v95, "stringForKey:", v96);

  v98 = (uint64_t)v153;
  if (v97)
  {
    v152 = v94;
    v161 = (uint64_t)v42;
    v162 = v93;
    v99 = (uint64_t)v30;
    v100 = static String._unconditionallyBridgeFromObjectiveC(_:)(v97);
    v102 = v101;

    v103 = (uint64_t)v148;
    FamilyRowStatus.init(rawValue:)(v100, v102);
    v104 = v155;
    v105 = v147;
    v106 = v156;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v155 + 104))(v147, enum case for FamilyRowStatus.hidden(_:), v156);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v104 + 56))(v105, 0, 1, v106);
    v107 = v98 + *(int *)(v144 + 48);
    sub_100018C00(v103, v98, &qword_10015AAD8);
    sub_100018C00(v105, v107, &qword_10015AAD8);
    v108 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v104 + 48);
    if (v108(v98, 1, v106) == 1)
    {
      sub_10000BA50(v105, &qword_10015AAD8);
      sub_10000BA50(v103, &qword_10015AAD8);
      v109 = v108(v107, 1, v106);
      v110 = ObjectType;
      if (v109 == 1)
      {
        sub_10000BA50(v98, &qword_10015AAD8);
LABEL_36:
        sub_1000076B4(v99, type metadata accessor for PrimarySettingsListItemModel);
        sub_1000076B4((uint64_t)v159, type metadata accessor for PrimarySettingsListAppleAccountLinkModel);
        sub_1000076B4(v161, type metadata accessor for PrimarySettingsListItemIdentifier);
        v89 = (unint64_t)v165;
        goto LABEL_37;
      }
    }
    else
    {
      v119 = v140;
      sub_100018C00(v98, v140, &qword_10015AAD8);
      if (v108(v107, 1, v106) != 1)
      {
        v127 = *(void (**)(char *, uint64_t, uint64_t))(v104 + 32);
        v151 = v99;
        v128 = v98;
        v129 = v154;
        v127(v154, v107, v106);
        v130 = sub_1000A5390();
        v131 = dispatch thunk of static Equatable.== infix(_:_:)(v119, v129, v106, v130);
        v132 = *(void (**)(char *, uint64_t))(v104 + 8);
        v132(v129, v106);
        sub_10000BA50(v147, &qword_10015AAD8);
        sub_10000BA50((uint64_t)v148, &qword_10015AAD8);
        v132((char *)v119, v106);
        v99 = v151;
        sub_10000BA50(v128, &qword_10015AAD8);
        v110 = ObjectType;
        if ((v131 & 1) != 0)
          goto LABEL_36;
LABEL_30:
        v120 = v145;
        swift_storeEnumTagMultiPayload(v145, v146, 7);
        v121 = v120 + *(int *)(v157 + 20);
        sub_1000A3534(v121);
        swift_storeEnumTagMultiPayload(v121, v88, 2);
        v122 = v141;
        sub_1000076F0(v120, v141, type metadata accessor for PrimarySettingsListItemModel);
        v89 = (unint64_t)v165;
        if ((swift_isUniquelyReferenced_nonNull_native(v165) & 1) == 0)
          v89 = sub_100052720(0, *(_QWORD *)(v89 + 16) + 1, 1, v89);
        v123 = v162;
        v124 = v152;
        v126 = *(_QWORD *)(v89 + 16);
        v125 = *(_QWORD *)(v89 + 24);
        if (v126 >= v125 >> 1)
          v89 = sub_100052720(v125 > 1, v126 + 1, 1, v89);
        *(_QWORD *)(v89 + 16) = v126 + 1;
        sub_100007670(v122, v89 + v123 + v126 * (_QWORD)v124, type metadata accessor for PrimarySettingsListItemModel);
        sub_1000076B4(v145, type metadata accessor for PrimarySettingsListItemModel);
        sub_1000076B4(v99, type metadata accessor for PrimarySettingsListItemModel);
        sub_1000076B4((uint64_t)v159, type metadata accessor for PrimarySettingsListAppleAccountLinkModel);
        sub_1000076B4(v161, type metadata accessor for PrimarySettingsListItemIdentifier);
        goto LABEL_37;
      }
      sub_10000BA50(v147, &qword_10015AAD8);
      sub_10000BA50((uint64_t)v148, &qword_10015AAD8);
      (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v119, v106);
      v110 = ObjectType;
    }
    sub_10000BA50(v98, &qword_10015AAD0);
    goto LABEL_30;
  }
  sub_1000076B4((uint64_t)v30, type metadata accessor for PrimarySettingsListItemModel);
  sub_1000076B4((uint64_t)v159, type metadata accessor for PrimarySettingsListAppleAccountLinkModel);
  sub_1000076B4((uint64_t)v42, type metadata accessor for PrimarySettingsListItemIdentifier);
  v110 = ObjectType;
LABEL_37:
  v133 = v163;
  v134 = *(_QWORD *)&v163[OBJC_IVAR____TtC11SettingsApp38PrimaryAppleAccountListSectionProvider_id];
  v135 = *(_QWORD *)&v163[OBJC_IVAR____TtC11SettingsApp38PrimaryAppleAccountListSectionProvider_id + 8];
  v136 = v163[OBJC_IVAR____TtC11SettingsApp38PrimaryAppleAccountListSectionProvider_id + 16];
  sub_10000BA8C(v134, v135, v163[OBJC_IVAR____TtC11SettingsApp38PrimaryAppleAccountListSectionProvider_id + 16]);
  sub_1000A3964(v133, v110);
  v82 = 0;
  v114 = 0;
  v118 = 0;
  v116 = 0;
  v84 = v160;
LABEL_41:
  sub_100005474(v166);
  *(_QWORD *)v84 = v134;
  *(_QWORD *)(v84 + 8) = v135;
  *(_QWORD *)(v84 + 16) = v136;
  result = 0.0;
  *(_OWORD *)(v84 + 24) = 0u;
  *(_OWORD *)(v84 + 40) = 0u;
  *(_QWORD *)(v84 + 56) = v82;
  *(_QWORD *)(v84 + 64) = v114;
  *(_QWORD *)(v84 + 72) = v118;
  *(_QWORD *)(v84 + 80) = v116;
  *(_QWORD *)(v84 + 88) = v89;
  return result;
}

unint64_t sub_1000A5390()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015AAE0;
  if (!qword_10015AAE0)
  {
    v1 = type metadata accessor for FamilyRowStatus(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for FamilyRowStatus, v1);
    atomic_store(result, (unint64_t *)&qword_10015AAE0);
  }
  return result;
}

uint64_t sub_1000A53D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004FC8(&qword_10015AAE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A5420()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000A5444(uint64_t a1)
{
  uint64_t v1;

  return sub_1000A3CEC(a1, *(_QWORD *)(v1 + 16));
}

void sub_1000A544C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  void *v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v4 = (void *)Strong;
    sub_1000A549C();

  }
}

void sub_1000A549C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  uint64_t v14;
  void **v15;
  uint64_t ObjectType;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_signpost_type_t v25;
  uint64_t v26;
  char *v27;
  uint8_t *v28;
  uint64_t v29;
  os_signpost_id_t v30;
  void (*v31)(char *, uint64_t);
  char *v32;
  uint64_t v33;
  void *v34;
  id v35;
  char *v36;
  id v37;
  id v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  void **v45;
  id v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_signpost_type_t v52;
  char *v53;
  uint8_t *v54;
  uint64_t v55;
  os_signpost_id_t v56;
  char *v57;
  uint64_t v58;
  _OWORD *v59;
  uint64_t v60;
  id v61;
  id v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  void *v68;
  uint64_t v69;
  void **v70;
  unsigned int v71;
  char *v72;
  char *v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  void *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  NSObject *v82;
  os_log_type_t v83;
  uint8_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  NSObject *v92;
  os_log_type_t v93;
  uint8_t *v94;
  const char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  id v102;
  uint64_t v103;
  NSObject *v104;
  os_log_type_t v105;
  uint8_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  void *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  char *v118;
  char v119[24];
  void **aBlock;
  uint64_t v121;
  void (*v122)(uint64_t, void *, void *);
  void *v123;
  uint64_t (*v124)(void *, uint64_t);
  uint64_t v125;
  uint64_t v126;
  _BYTE v127[16];
  id v128[2];

  v1 = type metadata accessor for OSSignpostID(0);
  v117 = *(_QWORD *)(v1 - 8);
  v2 = __chkstk_darwin(v1);
  v116 = (char *)&v113 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __chkstk_darwin(v2);
  v114 = (char *)&v113 - v5;
  __chkstk_darwin(v4);
  v7 = (char *)&v113 - v6;
  if (qword_100156CC8 != -1)
    swift_once(&qword_100156CC8, sub_10008BEA0);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_100007808(v8, (uint64_t)qword_10015D310);
  v10 = v0;
  v115 = v9;
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  v13 = os_log_type_enabled(v11, v12);
  v118 = v10;
  if (v13)
  {
    v14 = swift_slowAlloc(22, -1);
    v15 = (void **)swift_slowAlloc(64, -1);
    aBlock = v15;
    *(_DWORD *)v14 = 136315394;
    ObjectType = swift_getObjectType(v118);
    v17 = _typeName(_:qualified:)(ObjectType, 0);
    v19 = v18;
    v126 = sub_1000DA1F0(v17, v18, (uint64_t *)&aBlock);
    v10 = v118;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, v127, v14 + 4, v14 + 12);

    swift_bridgeObjectRelease(v19);
    *(_WORD *)(v14 + 12) = 2080;
    v126 = sub_1000DA1F0(0xD000000000000015, 0x80000001001253F0, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, v127, v14 + 14, v14 + 22);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Start (%s.%s)…", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v15, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {

  }
  v20 = v116;
  if (qword_100156CD8 != -1)
    swift_once(&qword_100156CD8, sub_10008BEEC);
  v21 = type metadata accessor for OSSignposter(0);
  v22 = sub_100007808(v21, (uint64_t)qword_10015D340);
  v23 = static OSSignpostID.exclusive.getter(v22);
  v24 = OSSignposter.logHandle.getter(v23);
  v25 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v26 = v117;
    v27 = v114;
    (*(void (**)(char *, char *, uint64_t))(v117 + 16))(v114, v7, v1);
    v28 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v28 = 0;
    v30 = OSSignpostID.rawValue.getter(v28, v29);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v24, v25, v30, "PrimaryAppleAccountStatusObserver.updateAccountStatus began", "", v28, 2u);
    swift_slowDealloc(v28, -1, -1);

    v31 = *(void (**)(char *, uint64_t))(v26 + 8);
    v31(v7, v1);
    v32 = v27;
  }
  else
  {

    v31 = *(void (**)(char *, uint64_t))(v117 + 8);
    v32 = v7;
  }
  v33 = ((uint64_t (*)(char *, uint64_t))v31)(v32, v1);
  v34 = *(void **)&v10[OBJC_IVAR____TtC11SettingsApp33PrimaryAppleAccountStatusObserver_accountStore];
  if (v34)
  {
    v35 = objc_allocWithZone((Class)AIDAServiceOwnersManager);
    v36 = v34;
    v37 = objc_msgSend(v35, "initWithAccountStore:", v36);
    v38 = objc_msgSend(v37, "accountForService:", AIDAServiceTypeCloud);
    v128[0] = v38;
    if (!v38)
    {
      v39 = Logger.logObject.getter(0);
      v40 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v39, v40))
      {
        v41 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v41 = 0;
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "No Apple Account found for iCloud, falling back to store account if available.", v41, 2u);
        swift_slowDealloc(v41, -1, -1);
      }

      v38 = objc_msgSend(v37, "accountForService:", AIDAServiceTypeStore);
      v128[0] = v38;
    }
    v42 = Logger.logObject.getter(v38);
    v43 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc(12, -1);
      v45 = (void **)swift_slowAlloc(32, -1);
      aBlock = v45;
      *(_DWORD *)v44 = 136315138;
      swift_beginAccess(v128, v119, 0, 0);
      if (v128[0])
      {
        v46 = objc_msgSend(v128[0], "debugDescription");
        v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
        v49 = v48;

      }
      else
      {
        v49 = 0xE300000000000000;
        v47 = 7104878;
      }
      v126 = sub_1000DA1F0(v47, v49, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, v127, v44 + 4, v44 + 12);
      swift_bridgeObjectRelease(v49);
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Primary Apple Account is %s.", v44, 0xCu);
      swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1, -1);
      swift_slowDealloc(v44, -1, -1);
    }

    v58 = swift_allocObject(&unk_10014BA50, 64, 7);
    *(_OWORD *)(v58 + 16) = xmmword_100118BF0;
    v59 = (_OWORD *)(v58 + 16);
    *(_OWORD *)(v58 + 32) = 0u;
    *(_OWORD *)(v58 + 48) = 0u;
    v60 = swift_beginAccess(v128, &v126, 0, 0);
    if (!v128[0])
    {
      v82 = Logger.logObject.getter(v60);
      v83 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v82, v83))
      {
        v84 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v84 = 0;
        _os_log_impl((void *)&_mh_execute_header, v82, v83, "No Primary Apple Account signed in.", v84, 2u);
        swift_slowDealloc(v84, -1, -1);
      }

      swift_beginAccess(v59, &aBlock, 1, 0);
      v85 = *(_QWORD *)(v58 + 16);
      v86 = *(_QWORD *)(v58 + 24);
      v87 = *(_QWORD *)(v58 + 32);
      v88 = *(_QWORD *)(v58 + 40);
      v89 = *(_QWORD *)(v58 + 48);
      v90 = *(void **)(v58 + 56);
      *v59 = 0u;
      *(_OWORD *)(v58 + 32) = 0u;
      *(_OWORD *)(v58 + 48) = 0u;
      sub_1000A749C(v85, v86, v87, v88, v89, v90);
      v57 = v118;
      sub_1000A65D4((_QWORD *)v58, (uint64_t)v118);
      swift_release(v58);

      goto LABEL_34;
    }
    v61 = v128[0];
    v62 = objc_msgSend(v61, "userFullName");
    if (v62)
    {
      v63 = v62;
      v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
      v66 = v65;

      v67 = objc_msgSend(v61, "identifier");
      if (v67)
      {
        v68 = v67;
        aBlock = 0;
        v121 = 0;
        static String._conditionallyBridgeFromObjectiveC(_:result:)(v67, &aBlock);

        v69 = v121;
        if (v121)
        {
          v117 = v66;
          v70 = aBlock;
          v71 = objc_msgSend((id)objc_opt_self(CSFFeatureManager), "isCloudSubscriber");
          v72 = (char *)objc_msgSend(objc_allocWithZone((Class)AAUIProfilePictureStore), "initWithAppleAccount:store:", v61, v36);
          v73 = v36;
          if (!v72)
          {
            v114 = (char *)v70;
            v103 = v64;
            v116 = v73;
            v104 = Logger.logObject.getter(0);
            v105 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v104, v105))
            {
              v106 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v106 = 0;
              _os_log_impl((void *)&_mh_execute_header, v104, v105, "Apple Account is signed in (no profile picture).", v106, 2u);
              swift_slowDealloc(v106, -1, -1);
            }

            swift_beginAccess(v59, &aBlock, 1, 0);
            v107 = *(_QWORD *)(v58 + 16);
            v108 = *(_QWORD *)(v58 + 24);
            v109 = *(_QWORD *)(v58 + 32);
            v110 = *(_QWORD *)(v58 + 40);
            v115 = *(_QWORD *)(v58 + 48);
            v113 = *(void **)(v58 + 56);
            *(_QWORD *)(v58 + 16) = v103;
            v111 = v117;
            v112 = v114;
            *(_QWORD *)(v58 + 24) = v117;
            *(_QWORD *)(v58 + 32) = v112;
            *(_QWORD *)(v58 + 40) = v69;
            *(_QWORD *)(v58 + 48) = v71;
            *(_QWORD *)(v58 + 56) = 0;
            swift_bridgeObjectRetain(v111);
            swift_bridgeObjectRetain(v69);
            sub_1000A749C(v107, v108, v109, v110, v115, v113);
            v57 = v118;
            sub_1000A65D4((_QWORD *)v58, (uint64_t)v118);
            swift_release(v58);

            swift_bridgeObjectRelease(v69);
            swift_bridgeObjectRelease(v111);
            goto LABEL_35;
          }
          v36 = v72;
          v74 = v73;
          v75 = swift_allocObject(&unk_10014BA78, 65, 7);
          v76 = v117;
          v77 = v118;
          *(_QWORD *)(v75 + 16) = v58;
          *(_QWORD *)(v75 + 24) = v77;
          *(_QWORD *)(v75 + 32) = v64;
          *(_QWORD *)(v75 + 40) = v76;
          *(_QWORD *)(v75 + 48) = v70;
          *(_QWORD *)(v75 + 56) = v69;
          *(_BYTE *)(v75 + 64) = v71;
          v124 = sub_1000A74E8;
          v125 = v75;
          aBlock = _NSConcreteStackBlock;
          v121 = 1107296256;
          v122 = sub_1000A6EF4;
          v123 = &unk_10014BA90;
          v78 = _Block_copy(&aBlock);
          v79 = v125;
          v80 = v77;
          swift_retain(v58);
          v81 = v79;
          v57 = v77;
          swift_release(v81);
          objc_msgSend(v36, "fetchProfilePictureFromCacheForAccountOwner:", v78);

          _Block_release(v78);
          swift_release(v58);
LABEL_34:

LABEL_35:
          goto LABEL_42;
        }
      }
      v91 = swift_bridgeObjectRelease(v66);
      v92 = Logger.logObject.getter(v91);
      v93 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v92, v93))
      {
        v94 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v94 = 0;
        v95 = "No identifier found, unable to sign in.";
LABEL_40:
        _os_log_impl((void *)&_mh_execute_header, v92, v93, v95, v94, 2u);
        swift_slowDealloc(v94, -1, -1);
      }
    }
    else
    {
      v92 = Logger.logObject.getter(0);
      v93 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v92, v93))
      {
        v94 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v94 = 0;
        v95 = "No user full name found, unable to sign in.";
        goto LABEL_40;
      }
    }

    swift_beginAccess(v59, &aBlock, 1, 0);
    v96 = *(_QWORD *)(v58 + 16);
    v97 = *(_QWORD *)(v58 + 24);
    v98 = *(_QWORD *)(v58 + 32);
    v99 = *(_QWORD *)(v58 + 40);
    v100 = *(_QWORD *)(v58 + 48);
    v101 = *(void **)(v58 + 56);
    *v59 = 0u;
    *(_OWORD *)(v58 + 32) = 0u;
    *(_OWORD *)(v58 + 48) = 0u;
    sub_1000A749C(v96, v97, v98, v99, v100, v101);
    v57 = v118;
    sub_1000A65D4((_QWORD *)v58, (uint64_t)v118);
    swift_release(v58);

    v102 = v128[0];
    goto LABEL_42;
  }
  v50 = static OSSignpostID.exclusive.getter(v33);
  v51 = OSSignposter.logHandle.getter(v50);
  v52 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v53 = v114;
    (*(void (**)(char *, char *, uint64_t))(v117 + 16))(v114, v20, v1);
    v54 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v54 = 0;
    v56 = OSSignpostID.rawValue.getter(v54, v55);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v51, v52, v56, "PrimaryAppleAccountStatusObserver.updateAccountStatus bailed", "", v54, 2u);
    swift_slowDealloc(v54, -1, -1);

    v31(v20, v1);
    v20 = v53;
  }
  else
  {

  }
  v31(v20, v1);
  v57 = v118;
LABEL_42:
  sub_1000A70B8(v57, 0xD000000000000015, 0x80000001001253F0);
}

_QWORD *sub_1000A6024()
{
  char *v0;
  uint64_t ObjectType;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  objc_class *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  objc_super v36;
  char v37[24];
  _QWORD v38[5];

  ObjectType = swift_getObjectType(v0);
  v2 = OBJC_IVAR____TtC11SettingsApp33PrimaryAppleAccountStatusObserver_accountStore;
  v3 = *(void **)&v0[OBJC_IVAR____TtC11SettingsApp33PrimaryAppleAccountStatusObserver_accountStore];
  v32 = (objc_class *)ObjectType;
  if (v3)
  {
    objc_msgSend(v3, "removeDelegate:", v0);
    v4 = *(void **)&v0[v2];
  }
  else
  {
    v4 = 0;
  }
  *(_QWORD *)&v0[v2] = 0;

  v5 = (uint64_t *)&v0[OBJC_IVAR____TtC11SettingsApp33PrimaryAppleAccountStatusObserver_cancellables];
  swift_beginAccess(&v0[OBJC_IVAR____TtC11SettingsApp33PrimaryAppleAccountStatusObserver_cancellables], v37, 1, 0);
  v6 = *v5;
  v33 = v0;
  v31 = v5;
  if ((*v5 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v5;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v6);
    v8 = __CocoaSet.makeIterator()(v7);
    v9 = type metadata accessor for AnyCancellable(0);
    v10 = sub_100005568((unint64_t *)&qword_100156FB8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable, (uint64_t)&protocol conformance descriptor for AnyCancellable);
    result = Set.Iterator.init(_cocoa:)(v38, v8, v9, v10);
    v6 = v38[0];
    v12 = v38[1];
    v13 = v38[2];
    v14 = v38[3];
    v15 = v38[4];
  }
  else
  {
    v16 = -1 << *(_BYTE *)(v6 + 32);
    v12 = v6 + 56;
    v13 = ~v16;
    v17 = -v16;
    if (v17 < 64)
      v18 = ~(-1 << v17);
    else
      v18 = -1;
    v15 = v18 & *(_QWORD *)(v6 + 56);
    result = (_QWORD *)swift_bridgeObjectRetain(v6);
    v14 = 0;
  }
  v19 = (unint64_t)(v13 + 64) >> 6;
  if (v6 < 0)
    goto LABEL_16;
  while (1)
  {
    if (v15)
    {
      v20 = (v15 - 1) & v15;
      v21 = __clz(__rbit64(v15)) | (v14 << 6);
      v22 = v14;
      goto LABEL_33;
    }
    v27 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v27 >= v19)
      goto LABEL_36;
    v28 = *(_QWORD *)(v12 + 8 * v27);
    v22 = v14 + 1;
    if (!v28)
    {
      v22 = v14 + 2;
      if (v14 + 2 >= v19)
        goto LABEL_36;
      v28 = *(_QWORD *)(v12 + 8 * v22);
      if (!v28)
      {
        v22 = v14 + 3;
        if (v14 + 3 >= v19)
          goto LABEL_36;
        v28 = *(_QWORD *)(v12 + 8 * v22);
        if (!v28)
        {
          v22 = v14 + 4;
          if (v14 + 4 >= v19)
            goto LABEL_36;
          v28 = *(_QWORD *)(v12 + 8 * v22);
          if (!v28)
          {
            v29 = v14 + 5;
            while (v19 != v29)
            {
              v28 = *(_QWORD *)(v12 + 8 * v29++);
              if (v28)
              {
                v22 = v29 - 1;
                goto LABEL_32;
              }
            }
LABEL_36:
            sub_100007C50(v6);
            v30 = *v31;
            *v31 = (uint64_t)&_swiftEmptySetSingleton;
            swift_bridgeObjectRelease(v30);
            v36.receiver = v33;
            v36.super_class = v32;
            return objc_msgSendSuper2(&v36, "dealloc");
          }
        }
      }
    }
LABEL_32:
    v20 = (v28 - 1) & v28;
    v21 = __clz(__rbit64(v28)) + (v22 << 6);
LABEL_33:
    v26 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v21);
    swift_retain(v26);
    if (!v26)
      goto LABEL_36;
    while (1)
    {
      AnyCancellable.cancel()();
      result = (_QWORD *)swift_release(v26);
      v14 = v22;
      v15 = v20;
      if ((v6 & 0x8000000000000000) == 0)
        break;
LABEL_16:
      v23 = __CocoaSet.Iterator.next()(result);
      if (v23)
      {
        v24 = v23;
        v34 = v23;
        v25 = type metadata accessor for AnyCancellable(0);
        swift_unknownObjectRetain(v24);
        swift_dynamicCast(&v35, &v34, (char *)&type metadata for Swift.AnyObject + 8, v25, 7);
        v26 = v35;
        swift_unknownObjectRelease(v24);
        v22 = v14;
        v20 = v15;
        if (v26)
          continue;
      }
      goto LABEL_36;
    }
  }
  __break(1u);
  return result;
}

void sub_1000A63C4(char *a1)
{
  id v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t inited;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  id v10;
  char *v11;
  Class isa;
  id v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  _QWORD v20[5];
  uint64_t v21;
  char v22[64];

  v2 = objc_msgSend((id)objc_opt_self(PSLaunchTracker), "sharedInstance");
  v3 = objc_msgSend(v2, "launchHasCompleted");

  if (v3)
  {
    v4 = OBJC_IVAR____TtC11SettingsApp33PrimaryAppleAccountStatusObserver_accountStore;
    if (!*(_QWORD *)&a1[OBJC_IVAR____TtC11SettingsApp33PrimaryAppleAccountStatusObserver_accountStore])
    {
      v5 = sub_100004FC8(&qword_100157360);
      inited = swift_initStackObject(v5, v22);
      *(_OWORD *)(inited + 16) = xmmword_100115BA0;
      *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(ACAccountTypeIdentifierAppleAccount);
      *(_QWORD *)(inited + 40) = v7;
      *(_QWORD *)(inited + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)(ACAccountTypeIdentifieriTunesStore);
      *(_QWORD *)(inited + 56) = v8;
      v9 = sub_1000559A0(inited);
      swift_setDeallocating(inited);
      swift_arrayDestroy(inited + 32, 2, &type metadata for String);
      v10 = objc_allocWithZone((Class)ACMonitoredAccountStore);
      v11 = a1;
      isa = Set._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v9);
      v13 = objc_msgSend(v10, "initWithAccountTypes:delegate:", isa, v11);

      v14 = *(void **)&a1[v4];
      *(_QWORD *)&a1[v4] = v13;

      v15 = *(void **)&a1[v4];
      if (v15)
      {
        v16 = swift_allocObject(&unk_10014BAC8, 24, 7);
        swift_unknownObjectWeakInit(v16 + 16, v11);
        v20[4] = sub_1000A75C0;
        v21 = v16;
        v20[0] = _NSConcreteStackBlock;
        v20[1] = 1107296256;
        v20[2] = sub_1000A73D4;
        v20[3] = &unk_10014BB30;
        v17 = _Block_copy(v20);
        v18 = v21;
        v19 = v15;
        swift_release(v18);
        objc_msgSend(v19, "registerWithCompletion:", v17);
        _Block_release(v17);

      }
      else
      {
        __break(1u);
      }
    }
  }
}

uint64_t sub_1000A65D4(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_signpost_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  os_signpost_id_t v25;
  void (*v26)(char *, uint64_t);
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD aBlock[5];
  uint64_t v68;
  char v69[24];
  _QWORD v70[7];

  v64 = a2;
  v3 = type metadata accessor for OSSignpostID(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v57 - v8;
  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS(0);
  v65 = *(_QWORD *)(v14 - 8);
  v66 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(a1 + 2, v69, 0, 0);
  v17 = a1[3];
  if (v17 == 1)
  {
    if (qword_100156CD8 != -1)
      swift_once(&qword_100156CD8, sub_10008BEEC);
    v18 = type metadata accessor for OSSignposter(0);
    v19 = sub_100007808(v18, (uint64_t)qword_10015D340);
    v20 = static OSSignpostID.exclusive.getter(v19);
    v21 = OSSignposter.logHandle.getter(v20);
    v22 = static os_signpost_type_t.event.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v9, v3);
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      v25 = OSSignpostID.rawValue.getter(v23, v24);
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v21, v22, v25, "PrimaryAppleAccountStatusObserver.updateAccountStatus bailed", "", v23, 2u);
      swift_slowDealloc(v23, -1, -1);

      v26 = *(void (**)(char *, uint64_t))(v4 + 8);
      v26(v9, v3);
      return ((uint64_t (*)(char *, uint64_t))v26)(v7, v3);
    }
    else
    {

      return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    }
  }
  else
  {
    v29 = a1[6];
    v28 = (void *)a1[7];
    v63 = v11;
    v31 = a1[4];
    v30 = a1[5];
    v70[0] = a1[2];
    v32 = v70[0];
    v70[1] = v17;
    v70[2] = v31;
    v70[3] = v30;
    v70[4] = v29;
    v70[5] = v28;
    sub_100007BBC(0, (unint64_t *)&qword_100159D30, OS_dispatch_queue_ptr);
    v33 = v32;
    v62 = v10;
    v34 = v32;
    v58 = v32;
    v35 = v31;
    v36 = v31;
    v59 = v31;
    v37 = v30;
    v38 = v30;
    v60 = v30;
    v39 = v29;
    v40 = v29;
    v41 = v28;
    v42 = sub_100096F30(v33, v17, v35, v37, v39, v28);
    v61 = static OS_dispatch_queue.main.getter(v42);
    v43 = swift_allocObject(&unk_10014BAC8, 24, 7);
    swift_unknownObjectWeakInit(v43 + 16, v64);
    v44 = swift_allocObject(&unk_10014BAF0, 72, 7);
    *(_QWORD *)(v44 + 16) = v43;
    sub_100018BA0((uint64_t)v70, v44 + 24);
    aBlock[4] = sub_1000A757C;
    v68 = v44;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100005350;
    aBlock[3] = &unk_10014BB08;
    v45 = _Block_copy(aBlock);
    v46 = v68;
    v47 = v36;
    v48 = v38;
    v49 = v40;
    v50 = v41;
    sub_100096F30(v34, v17, v47, v48, v40, v41);
    v51 = swift_release(v46);
    static DispatchQoS.unspecified.getter(v51);
    aBlock[0] = _swiftEmptyArrayStorage;
    v52 = sub_100005568((unint64_t *)&qword_10015BAB0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v53 = sub_100004FC8((uint64_t *)&unk_100156F40);
    v54 = sub_100007868((unint64_t *)&qword_10015BAC0, (uint64_t *)&unk_100156F40, (uint64_t)&protocol conformance descriptor for [A]);
    v55 = v62;
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v53, v54, v62, v52);
    v56 = (void *)v61;
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v16, v13, v45);
    _Block_release(v45);

    sub_1000A749C(v58, v17, v59, v60, v49, v50);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v13, v55);
    return (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v16, v66);
  }
}

uint64_t sub_1000A6A50(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Strong;
  char *v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_signpost_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  os_signpost_id_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[2];
  char v40;
  char v41[24];
  _QWORD v42[6];

  v4 = type metadata accessor for OSSignpostID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v35 - v9;
  a1 += 16;
  swift_beginAccess(a1, v41, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a1);
  if (Strong)
  {
    v12 = (char *)Strong;
    v36 = v8;
    v37 = v5;
    v38 = v4;
    v13 = (uint64_t *)(Strong + OBJC_IVAR____TtC11SettingsApp33PrimaryAppleAccountStatusObserver_accountStatus);
    sub_100018BA0(Strong + OBJC_IVAR____TtC11SettingsApp33PrimaryAppleAccountStatusObserver_accountStatus, (uint64_t)v42);
    sub_1000A7588(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100096F30);
    sub_1000A7588(v42, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100096F30);
    v14 = sub_1000A8380((uint64_t)a2, (uint64_t)v42);
    sub_1000A7588(v42, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100096F68);
    if ((v14 & 1) == 0)
    {
      v15 = type metadata accessor for PrimaryAppleAccountStatusObserver();
      v17 = sub_100005568((unint64_t *)&unk_10015ABA0, v16, (uint64_t (*)(uint64_t))type metadata accessor for PrimaryAppleAccountStatusObserver, (uint64_t)&unk_100118C34);
      v18 = ObservableObject<>.objectWillChange.getter(v15, v17);
      ObservableObjectPublisher.send()();
      swift_release(v18);
      sub_100007C2C(&v12[OBJC_IVAR____TtC11SettingsApp33PrimaryAppleAccountStatusObserver_invalidator], *(_QWORD *)&v12[OBJC_IVAR____TtC11SettingsApp33PrimaryAppleAccountStatusObserver_invalidator + 24]);
      v39[0] = "Primary Apple Account Status";
      v39[1] = 28;
      v40 = 2;
      PassthroughSubject.send(_:)(v39);
    }
    v19 = *v13;
    v20 = v13[1];
    v21 = v13[2];
    v22 = v13[3];
    v24 = v13[4];
    v23 = (void *)v13[5];
    sub_100018BA0((uint64_t)a2, (uint64_t)v13);
    sub_100096F68(v19, v20, v21, v22, v24, v23);

    v5 = v37;
    v4 = v38;
    v8 = v36;
  }
  if (qword_100156CD8 != -1)
    swift_once(&qword_100156CD8, sub_10008BEEC);
  v25 = type metadata accessor for OSSignposter(0);
  v26 = sub_100007808(v25, (uint64_t)qword_10015D340);
  v27 = static OSSignpostID.exclusive.getter(v26);
  v28 = OSSignposter.logHandle.getter(v27);
  v29 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v10, v4);
    v30 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v30 = 0;
    v32 = OSSignpostID.rawValue.getter(v30, v31);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v28, v29, v32, "PrimaryAppleAccountStatusObserver.updateAccountStatus completed", "", v30, 2u);
    swift_slowDealloc(v30, -1, -1);

    v33 = *(void (**)(char *, uint64_t))(v5 + 8);
    v33(v10, v4);
    return ((uint64_t (*)(char *, uint64_t))v33)(v8, v4);
  }
  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  }
}

uint64_t sub_1000A6D4C(void *a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  id v23;
  uint64_t v25;
  _BYTE v30[24];

  if (qword_100156CC8 != -1)
    swift_once(&qword_100156CC8, sub_10008BEA0);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_100007808(v12, (uint64_t)qword_10015D310);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Apple Account is signed in (with profile picture).", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }

  swift_beginAccess(a3 + 2, v30, 1, 0);
  v17 = a3[3];
  v25 = a3[2];
  v19 = a3[4];
  v18 = a3[5];
  v20 = a3[6];
  v21 = (void *)a3[7];
  a3[2] = a5;
  a3[3] = a6;
  a3[4] = a7;
  a3[5] = a8;
  a3[6] = a9 & 1;
  a3[7] = a1;
  v22 = a1;
  swift_bridgeObjectRetain_n(a6, 2);
  swift_bridgeObjectRetain_n(a8, 2);
  v23 = v22;
  sub_1000A749C(v25, v17, v19, v18, v20, v21);
  sub_1000A65D4(a3, a4);

  swift_bridgeObjectRelease(a8);
  return swift_bridgeObjectRelease(a6);
}

void sub_1000A6EF4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void (*v6)(void *, void *);
  id v7;
  id v8;

  v6 = *(void (**)(void *, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v8 = a2;
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

uint64_t type metadata accessor for PrimaryAppleAccountStatusObserver()
{
  return objc_opt_self(_TtC11SettingsApp33PrimaryAppleAccountStatusObserver);
}

uint64_t sub_1000A6FB4@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t result;

  ObjectType = swift_getObjectType(v2);
  result = ObservableObject<>.objectWillChange.getter(ObjectType, a1);
  *a2 = result;
  return result;
}

void sub_1000A70B8(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;

  if (qword_100156CC8 != -1)
    swift_once(&qword_100156CC8, sub_10008BEA0);
  v6 = type metadata accessor for Logger(0);
  sub_100007808(v6, (uint64_t)qword_10015D310);
  v15 = a1;
  v7 = Logger.logObject.getter(v15);
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = swift_slowAlloc(22, -1);
    v10 = swift_slowAlloc(64, -1);
    v17 = v10;
    *(_DWORD *)v9 = 136315394;
    ObjectType = swift_getObjectType(v15);
    v12 = _typeName(_:qualified:)(ObjectType, 0);
    v14 = v13;
    v16 = sub_1000DA1F0(v12, v13, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v9 + 4, v9 + 12);

    swift_bridgeObjectRelease(v14);
    *(_WORD *)(v9 + 12) = 2080;
    v16 = sub_1000DA1F0(a2, a3, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v9 + 14, v9 + 22);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "…Complete (%s.%s)", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

  }
  else
  {

  }
}

void *sub_1000A7320()
{
  return &protocol witness table for ObservableObjectPublisher;
}

uint64_t sub_1000A732C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[24];

  v3 = a3 + 16;
  swift_beginAccess(a3 + 16, v9, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v3);
  if (result)
  {
    v5 = (void *)result;
    v6 = *(_QWORD *)(result + OBJC_IVAR____TtC11SettingsApp33PrimaryAppleAccountStatusObserver_updateAccountStatusSubject);
    swift_retain(v6);

    v7 = sub_100004FC8(&qword_10015C540);
    v8 = sub_100007868(&qword_10015ABC0, &qword_10015C540, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v7, v8);
    return swift_release(v6);
  }
  return result;
}

uint64_t sub_1000A73D4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, void *);
  uint64_t v7;
  id v8;

  v4 = a2;
  v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    v7 = sub_100007BBC(0, (unint64_t *)&qword_10015ABB0, ACAccount_ptr);
    v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v7);
  }
  swift_retain(v5);
  v8 = a3;
  v6(v4, a3);
  swift_release(v5);

  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_1000A7460()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  if (v1 >= 2)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));

  }
  return swift_deallocObject(v0, 64, 7);
}

void sub_1000A749C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  if (a2 != 1)
    sub_100096F68(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1000A74AC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 65, 7);
}

uint64_t sub_1000A74E8(void *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000A6D4C(a1, a2, *(_QWORD **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_BYTE *)(v2 + 64));
}

uint64_t sub_1000A7518()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000A753C()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 32);
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));

  }
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1000A757C()
{
  uint64_t v0;

  return sub_1000A6A50(*(_QWORD *)(v0 + 16), (_QWORD *)(v0 + 24));
}

_QWORD *sub_1000A7588(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5]);
  return a1;
}

uint64_t sub_1000A75C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000A732C(a1, a2, v2);
}

void sub_1000A75C8(uint64_t a1, unint64_t a2)
{
  void *v2;
  uint64_t v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (qword_100156CC8 != -1)
    swift_once(&qword_100156CC8, sub_10008BEA0);
  v5 = type metadata accessor for Logger(0);
  sub_100007808(v5, (uint64_t)qword_10015D310);
  v6 = v2;
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = swift_slowAlloc(22, -1);
    v10 = swift_slowAlloc(64, -1);
    v19 = v10;
    *(_DWORD *)v9 = 136315394;
    ObjectType = swift_getObjectType(v6);
    v12 = _typeName(_:qualified:)(ObjectType, 0);
    v14 = v13;
    v18 = sub_1000DA1F0(v12, v13, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v9 + 4, v9 + 12);

    swift_bridgeObjectRelease(v14);
    *(_WORD *)(v9 + 12) = 2080;
    v18 = sub_1000DA1F0(a1, a2, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v9 + 14, v9 + 22);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Start (%s.%s)…", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

  }
  else
  {

  }
  v15 = *(_QWORD *)&v6[OBJC_IVAR____TtC11SettingsApp33PrimaryAppleAccountStatusObserver_updateAccountStatusSubject];
  swift_retain(v15);
  v16 = sub_100004FC8(&qword_10015C540);
  v17 = sub_100007868(&qword_10015ABC0, &qword_10015C540, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  Subject<>.send()(v16, v17);
  swift_release(v15);
  sub_1000A70B8(v6, a1, a2);
}

void destroy for PrimaryAppleAccountStatus(uint64_t a1)
{
  unint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));

  }
}

uint64_t initializeWithCopy for PrimaryAppleAccountStatus(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  __int128 v7;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    v4 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v4;
    *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
    v5 = *(void **)(a2 + 40);
    *(_QWORD *)(a1 + 40) = v5;
    swift_bridgeObjectRetain(v3);
    swift_bridgeObjectRetain(v4);
    v6 = v5;
  }
  return a1;
}

uint64_t assignWithCopy for PrimaryAppleAccountStatus(uint64_t a1, __int128 *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  __int128 v16;
  __int128 v17;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *((_QWORD *)a2 + 1);
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v12 = *((_QWORD *)a2 + 1);
      *(_QWORD *)(a1 + 8) = v12;
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      v13 = *((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 24) = v13;
      *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
      v14 = (void *)*((_QWORD *)a2 + 5);
      *(_QWORD *)(a1 + 40) = v14;
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRetain(v13);
      v15 = v14;
      return a1;
    }
LABEL_7:
    v16 = *a2;
    v17 = a2[2];
    *(_OWORD *)(a1 + 16) = a2[1];
    *(_OWORD *)(a1 + 32) = v17;
    *(_OWORD *)a1 = v16;
    return a1;
  }
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));

    goto LABEL_7;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *((_QWORD *)a2 + 1);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v4);
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  v7 = *((_QWORD *)a2 + 3);
  v8 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  v9 = *(void **)(a1 + 40);
  v10 = (void *)*((_QWORD *)a2 + 5);
  *(_QWORD *)(a1 + 40) = v10;
  v11 = v10;

  return a1;
}

__n128 initializeWithTake for PrimaryAppleAccountStatus(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for PrimaryAppleAccountStatus(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __int128 v9;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 < 0xFFFFFFFF)
    goto LABEL_5;
  v5 = *(_QWORD *)(a2 + 8);
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));

LABEL_5:
    v9 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v9;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  swift_bridgeObjectRelease(v4);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v8 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);

  return a1;
}

uint64_t getEnumTagSinglePayload for PrimaryAppleAccountStatus(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PrimaryAppleAccountStatus(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

double sub_1000A7B5C(uint64_t a1, int a2)
{
  double result;

  if (a2 < 0)
  {
    *(_QWORD *)(a1 + 40) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    *(_QWORD *)(a1 + 8) = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for PrimaryAppleAccountStatus()
{
  return &type metadata for PrimaryAppleAccountStatus;
}

uint64_t sub_1000A7B9C()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  NSString v9;
  id v10;
  uint64_t v11;
  _QWORD v14[6];

  sub_100018BA0(v0, (uint64_t)v14);
  if (!v14[1])
    return Image.init(_internalSystemName:)(0x64692E656C707061, 0xE800000000000000);
  v1 = (void *)v14[5];
  v2 = objc_allocWithZone((Class)AAAppleAccountInformationCache);
  v3 = v1;
  v4 = objc_msgSend(v2, "init");
  v5 = objc_msgSend(v4, "profilePictureCacheURL");

  if (!v5)
    goto LABEL_5;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v7 = v6;

  v8 = objc_allocWithZone((Class)UIImage);
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v7);
  v10 = objc_msgSend(v8, "initWithContentsOfFile:", v9);

  if (!v10)
  {
LABEL_5:
    if (v1)
      return Image.init(uiImage:)(v3);
    return Image.init(_internalSystemName:)(0x64692E656C707061, 0xE800000000000000);
  }
  v11 = Image.init(uiImage:)(v10);

  return v11;
}

uint64_t sub_1000A7CD0(uint64_t a1, uint64_t a2)
{
  _BYTE v4[48];
  _BYTE v5[48];

  sub_100018BA0(a1, (uint64_t)v4);
  sub_100018BA0(a2, (uint64_t)v5);
  return sub_1000A8380((uint64_t)v4, (uint64_t)v5) & 1;
}

void sub_1000A7D18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_1000A7D78(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  BOOL *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v42 = v39;
  v43 = v40;
  v44 = BYTE2(v40);
  v45 = BYTE3(v40);
  v46 = BYTE4(v40);
  v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x1000A7F5CLL);
  }
  result = memcmp(v38, &v42, BYTE6(v40));
  *v37 = (_DWORD)result == 0;
  return result;
}

uint64_t sub_1000A7F80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;

  v8 = a1;
  v9 = a2;
  v10 = BYTE2(a2);
  v11 = BYTE3(a2);
  v12 = BYTE4(a2);
  v13 = BYTE5(a2);
  sub_1000A7D18((uint64_t)&v8, (uint64_t)&v8 + BYTE6(a2), a3, a4);
  if (!v4)
    v5 = v7;
  return v5 & 1;
}

uint64_t sub_1000A8054(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = __DataStorage._bytes.getter();
  v11 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = __DataStorage._length.getter();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  sub_1000A7D18(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

void sub_1000A8108(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1000A8154()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_1000A8188 + *((int *)qword_1000A8360 + (v0 >> 62))))();
}

uint64_t sub_1000A8198@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (v1 == BYTE6(v2))
  {
    if (v1 >= 1)
      __asm { BR              X10 }
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  return v3 & 1;
}

uint64_t sub_1000A8380(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  UIImage *v10;
  BOOL v11;
  char v12;
  UIImage *v13;
  NSData *v14;
  NSData *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  UIImage *v19;
  NSData *v20;
  NSData *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  UIImage *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;

  sub_100018BA0(a1, (uint64_t)&v32);
  v3 = v33;
  if (v33)
  {
    v4 = v32;
    v5 = v34;
    v6 = v35;
    v7 = v36;
    sub_100018BA0(a2, (uint64_t)&v27);
    if (!v28)
      goto LABEL_27;
    v8 = v29;
    v9 = v30;
    v10 = v31;
    v11 = v4 == v27 && v3 == v28;
    if (v11
      || (v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v3, v27, v28, 0), LOBYTE(v3) = 0, (v12 & 1) != 0))
    {
      if (v5 == v8 && v6 == v9
        || (LOBYTE(v3) = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v8, v9, 0) & 1) != 0))
      {
        if (v7)
        {
          v13 = v10;
          v14 = UIImagePNGRepresentation((UIImage *)v7);
          if (v14)
          {
            v15 = v14;
            v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            v18 = v17;

            if (!v10)
              goto LABEL_20;
LABEL_18:
            v20 = UIImagePNGRepresentation(v10);
            if (v20)
            {
              v21 = v20;
              v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
              v24 = v23;

LABEL_21:
              if (v18 >> 60 == 15)
              {

                if (v24 >> 60 == 15)
                {
                  LOBYTE(v3) = 1;
                  return v3 & 1;
                }
              }
              else
              {
                sub_1000A85F8(v16, v18);
                if (v24 >> 60 != 15)
                {
                  sub_1000A8108(v16, v18);
                  LOBYTE(v3) = v26;

                  sub_1000A85A0(v22, v24);
                  sub_1000A85A0(v16, v18);
                  sub_1000A85A0(v16, v18);
                  return v3 & 1;
                }

                sub_1000A85A0(v16, v18);
              }
              sub_1000A85A0(v16, v18);
              sub_1000A85A0(v22, v24);
LABEL_27:
              LOBYTE(v3) = 0;
              return v3 & 1;
            }
LABEL_20:
            v22 = 0;
            v24 = 0xF000000000000000;
            goto LABEL_21;
          }
        }
        else
        {
          v19 = v10;
        }
        v16 = 0;
        v18 = 0xF000000000000000;
        if (!v10)
          goto LABEL_20;
        goto LABEL_18;
      }
    }
  }
  else
  {
    sub_100018BA0(a2, (uint64_t)&v27);
    v3 = v28 == 0;
  }
  return v3 & 1;
}

uint64_t sub_1000A85A0(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_1000A85B4(result, a2);
  return result;
}

uint64_t sub_1000A85B4(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_1000A85F8(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

void sub_1000A863C(uint64_t *a1@<X8>)
{
  id v2;
  unsigned int v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v2 = objc_msgSend(objc_allocWithZone((Class)AAAppleAccountInformationCache), "init");
  v3 = objc_msgSend((id)objc_opt_self(CSFFeatureManager), "isCloudSubscriber");
  if (objc_msgSend(v2, "isSignedIn")
    && (v4 = objc_msgSend(v2, "accountFullName")) != 0)
  {
    v5 = v4;
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v8 = v7;

    v9 = v3;
    v10 = 0xE000000000000000;
  }
  else
  {

    v6 = 0;
    v8 = 0;
    v10 = 0;
    v9 = 0;
  }
  *a1 = v6;
  a1[1] = v8;
  a1[2] = 0;
  a1[3] = v10;
  a1[4] = v9;
  a1[5] = 0;
}

ValueMetadata *type metadata accessor for LegacyPreferencesRootURLRoute()
{
  return &type metadata for LegacyPreferencesRootURLRoute;
}

void sub_1000A8724(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (qword_100156CB0 != -1)
    swift_once(&qword_100156CB0, sub_10008BE28);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_100007808(v4, (uint64_t)qword_10015D2C8);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = swift_slowAlloc(64, -1);
    v17 = v9;
    *(_DWORD *)v8 = 136315394;
    v16 = sub_1000DA1F0(0xD000000000000022, 0x8000000100125520, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2080;
    v16 = sub_1000DA1F0(0xD000000000000026, 0x800000010011FD10, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v8 + 14, v8 + 22);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Start (%s.%s)…", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v9, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }

  v10 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a2, a1, v10);
  v11 = (int *)type metadata accessor for SettingsURLDestination(0);
  v12 = a2 + v11[5];
  v13 = type metadata accessor for SettingsURLDestination.Action(0);
  swift_storeEnumTagMultiPayload(v12, v13, 5);
  v14 = (_QWORD *)(a2 + v11[7]);
  *(_QWORD *)(a2 + v11[6]) = _swiftEmptyArrayStorage;
  *v14 = 0;
  v14[1] = 0;
  v15 = sub_100004FC8(&qword_1001570F8);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a2, 0, 1, v15);
  sub_1000A8EFC();
}

BOOL sub_1000A8980()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  uint64_t v21;
  _BOOL8 v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(char *, unint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;

  v0 = sub_100004FC8(&qword_10015C510);
  __chkstk_darwin(v0);
  v60 = (char *)&v57 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for URLQueryItem(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v57 - v7;
  v9 = sub_100004FC8(&qword_1001570F0);
  __chkstk_darwin(v9);
  v11 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for URLComponents(0);
  v64 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v62 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for URL(0);
  v63 = *(_QWORD *)(v14 - 8);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.scheme.getter(v15);
  if (!v18)
    return 0;
  v19 = v18;
  v61 = v12;
  v58 = v8;
  v59 = v14;
  v20 = String.lowercased()();
  swift_bridgeObjectRelease(v19);
  if (v20._countAndFlagsBits == 0x7366657270 && v20._object == (void *)0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    v21 = v61;
  }
  else
  {
    v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v20._countAndFlagsBits, v20._object, 0x7366657270, 0xE500000000000000, 0);
    swift_bridgeObjectRelease(v20._object);
    v22 = 0;
    v21 = v61;
    if ((v23 & 1) == 0)
      return v22;
  }
  v24 = sub_100019DF4((uint64_t)v17);
  v25 = URL.absoluteString.getter(v24);
  v27 = v26;
  URLComponents.init(string:)(v25);
  swift_bridgeObjectRelease(v27);
  v28 = v64;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v11, 1, v21) == 1)
  {
    (*(void (**)(char *, uint64_t))(v63 + 8))(v17, v59);
    v29 = &qword_1001570F0;
    v30 = (uint64_t)v11;
LABEL_25:
    sub_10000BA50(v30, v29);
    return 0;
  }
  v31 = v62;
  v32 = (*(uint64_t (**)(char *, char *, uint64_t))(v28 + 32))(v62, v11, v21);
  v33 = URLComponents.percentEncodedQueryItems.getter(v32);
  if (!v33)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v31, v21);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v17, v59);
    return 0;
  }
  v34 = v33;
  v35 = *(_QWORD *)(v33 + 16);
  if (v35)
  {
    v36 = v33 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v37 = *(_QWORD *)(v3 + 72);
    v38 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v3 + 16);
    v57 = v33;
    swift_bridgeObjectRetain(v33);
    while (1)
    {
      v39 = v38(v6, v36, v2);
      v40 = URLQueryItem.name.getter(v39);
      v42 = v41;
      if (v40 == 1953460082 && v41 == 0xE400000000000000)
      {
        v34 = v57;
        swift_bridgeObjectRelease(v57);
        v47 = 0xE400000000000000;
        goto LABEL_22;
      }
      v43 = _stringCompareWithSmolCheck(_:_:expecting:)(v40, v41, 1953460082, 0xE400000000000000, 0);
      swift_bridgeObjectRelease(v42);
      if ((v43 & 1) != 0)
        break;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
      v36 += v37;
      if (!--v35)
      {
        v34 = v57;
        swift_bridgeObjectRelease(v57);
        v44 = 1;
        v45 = v59;
        v28 = v64;
        v31 = v62;
        goto LABEL_19;
      }
    }
    v34 = v57;
    v47 = v57;
LABEL_22:
    swift_bridgeObjectRelease(v47);
    v46 = v60;
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v60, v6, v2);
    v44 = 0;
    v45 = v59;
    v28 = v64;
    v31 = v62;
  }
  else
  {
    v44 = 1;
    v45 = v59;
LABEL_19:
    v46 = v60;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v46, v44, 1, v2);
  swift_bridgeObjectRelease(v34);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v46, 1, v2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v31, v61);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v17, v45);
    v29 = &qword_10015C510;
    v30 = (uint64_t)v46;
    goto LABEL_25;
  }
  v48 = v58;
  v49 = (*(uint64_t (**)(char *, char *, uint64_t))(v3 + 32))(v58, v46, v2);
  v50 = URLQueryItem.value.getter(v49);
  if (!v51)
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v48, v2);
    (*(void (**)(char *, uint64_t))(v64 + 8))(v62, v61);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v17, v45);
    return 0;
  }
  v52 = v50;
  v53 = v51;
  if (v50 == 1414483794 && v51 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    v22 = 1;
  }
  else
  {
    v54 = _stringCompareWithSmolCheck(_:_:expecting:)(v50, v51, 1414483794, 0xE400000000000000, 0);
    swift_bridgeObjectRelease(v53);
    if ((v54 & 1) != 0)
    {
      v22 = 1;
    }
    else
    {
      v55 = HIBYTE(v53) & 0xF;
      if ((v53 & 0x2000000000000000) == 0)
        v55 = v52 & 0xFFFFFFFFFFFFLL;
      v22 = v55 == 0;
    }
  }
  (*(void (**)(char *, uint64_t))(v3 + 8))(v58, v2);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v62, v61);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v17, v45);
  return v22;
}

void sub_1000A8EFC()
{
  uint64_t v0;
  uint64_t v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *oslog;
  uint64_t v6;
  uint64_t v7;

  if (qword_100156CB0 != -1)
    swift_once(&qword_100156CB0, sub_10008BE28);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_100007808(v0, (uint64_t)qword_10015D2C8);
  oslog = Logger.logObject.getter(v1);
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v2))
  {
    v3 = swift_slowAlloc(22, -1);
    v4 = swift_slowAlloc(64, -1);
    v7 = v4;
    *(_DWORD *)v3 = 136315394;
    v6 = sub_1000DA1F0(0xD000000000000022, 0x8000000100125520, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v6, &v7, v3 + 4, v3 + 12);
    *(_WORD *)(v3 + 12) = 2080;
    v6 = sub_1000DA1F0(0xD000000000000026, 0x800000010011FD10, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v6, &v7, v3 + 14, v3 + 22);
    _os_log_impl((void *)&_mh_execute_header, oslog, v2, "…Complete (%s.%s)", (uint8_t *)v3, 0x16u);
    swift_arrayDestroy(v4, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v4, -1, -1);
    swift_slowDealloc(v3, -1, -1);

  }
  else
  {

  }
}

id sub_1000A90C8()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  qword_10015D390 = (uint64_t)result;
  return result;
}

ValueMetadata *type metadata accessor for SettingsSearchImageButtonStyle()
{
  return &type metadata for SettingsSearchImageButtonStyle;
}

uint64_t sub_1000A9110(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10012B0A8, 1);
}

uint64_t sub_1000A9120@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t KeyPath;
  void (*v21)(char *, char *, uint64_t);
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  char *v29;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;

  v34 = a1;
  v1 = sub_100004FC8(&qword_10015ABC8);
  __chkstk_darwin(v1);
  v3 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_100004FC8(&qword_10015ABD0);
  __chkstk_darwin(v32);
  v5 = (uint64_t *)((char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for ButtonStyleConfiguration.Label(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v31 - v11;
  v31 = sub_100004FC8(&qword_10015ABD8);
  v13 = __chkstk_darwin(v31);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = v12;
  v16 = ButtonStyleConfiguration.label.getter(v13);
  v17 = ButtonStyleConfiguration.isPressed.getter(v16);
  if ((v17 & 1) != 0)
    v18 = static Color.black.getter();
  else
    v18 = static Color.clear.getter(v17);
  v19 = v18;
  KeyPath = swift_getKeyPath(&unk_100118D58);
  ButtonStyleConfiguration.label.getter(KeyPath);
  v21 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v21(v3, v10, v6);
  sub_100018C00((uint64_t)v3, (uint64_t)v5 + *(int *)(v32 + 36), &qword_10015ABC8);
  *v5 = KeyPath;
  v5[1] = v19;
  v5[2] = 0x3FD0000000000000;
  swift_retain(KeyPath);
  swift_retain(v19);
  sub_10000BA50((uint64_t)v3, &qword_10015ABC8);
  v22 = *(void (**)(char *, uint64_t))(v7 + 8);
  v22(v10, v6);
  swift_release(v19);
  v23 = swift_release(KeyPath);
  v24 = static Alignment.center.getter(v23);
  v26 = v25;
  v27 = (uint64_t)&v15[*(int *)(v31 + 36)];
  sub_100018C00((uint64_t)v5, v27, &qword_10015ABD0);
  v28 = (uint64_t *)(v27 + *(int *)(sub_100004FC8(&qword_10015ABE0) + 36));
  *v28 = v24;
  v28[1] = v26;
  v29 = v33;
  v21(v15, v33, v6);
  sub_10000BA50((uint64_t)v5, &qword_10015ABD0);
  v22(v29, v6);
  return sub_1000A93F8((uint64_t)v15, v34);
}

uint64_t sub_1000A93A8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000A93D0(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.foregroundColor.setter(v1);
}

uint64_t sub_1000A93F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004FC8(&qword_10015ABD8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000A9444()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015ABE8;
  if (!qword_10015ABE8)
  {
    v1 = sub_100005430(&qword_10015ABD8);
    sub_10008090C();
    sub_1000A94B0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015ABE8);
  }
  return result;
}

unint64_t sub_1000A94B0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015ABF0;
  if (!qword_10015ABF0)
  {
    v1 = sub_100005430(&qword_10015ABE0);
    result = swift_getWitnessTable(&protocol conformance descriptor for _OverlayModifier<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10015ABF0);
  }
  return result;
}

_QWORD *sub_1000A94FC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  id v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;

  v4 = type metadata accessor for PrimarySettingsListBadgedLinkModel(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v6 = (int *)v4;
    v7 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(a2, v7))
    {
      case 0u:
        v8 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
        v9 = a1;
        v10 = v7;
        v11 = 0;
        goto LABEL_14;
      case 1u:
        v13 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
        v9 = a1;
        v10 = v7;
        v11 = 1;
        goto LABEL_14;
      case 2u:
        v14 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
        v15 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v16 = (_QWORD *)((char *)a1 + v15);
        v17 = (_QWORD *)((char *)a2 + v15);
        v18 = v17[1];
        *v16 = *v17;
        v16[1] = v18;
        swift_bridgeObjectRetain(v18);
        v9 = a1;
        v10 = v7;
        v11 = 2;
        goto LABEL_14;
      case 3u:
        v19 = a2[1];
        *a1 = *a2;
        a1[1] = v19;
        v20 = a2[3];
        a1[2] = a2[2];
        a1[3] = v20;
        v21 = a2[5];
        a1[4] = a2[4];
        a1[5] = v21;
        v22 = a2[7];
        a1[6] = a2[6];
        a1[7] = v22;
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v22);
        v9 = a1;
        v10 = v7;
        v11 = 3;
        goto LABEL_14;
      case 4u:
        v23 = a2[1];
        *a1 = *a2;
        a1[1] = v23;
        v24 = a2[3];
        a1[2] = a2[2];
        a1[3] = v24;
        v25 = a2[5];
        a1[4] = a2[4];
        a1[5] = v25;
        a1[6] = a2[6];
        swift_bridgeObjectRetain(v23);
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v25);
        v9 = a1;
        v10 = v7;
        v11 = 4;
        goto LABEL_14;
      case 5u:
        v26 = a2[1];
        *a1 = *a2;
        a1[1] = v26;
        v27 = a2[3];
        a1[2] = a2[2];
        a1[3] = v27;
        v29 = (void *)a2[4];
        v28 = a2[5];
        a1[4] = v29;
        a1[5] = v28;
        v30 = a2[9];
        swift_bridgeObjectRetain(v26);
        swift_bridgeObjectRetain(v27);
        v31 = v29;
        swift_bridgeObjectRetain(v28);
        if (v30)
        {
          a1[9] = v30;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v30 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v30);
        }
        else
        {
          v32 = *((_OWORD *)a2 + 4);
          *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
          *((_OWORD *)a1 + 4) = v32;
        }
        v9 = a1;
        v10 = v7;
        v11 = 5;
LABEL_14:
        swift_storeEnumTagMultiPayload(v9, v10, v11);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
        break;
    }
    *((_BYTE *)a1 + v6[5]) = *((_BYTE *)a2 + v6[5]);
    v33 = v6[6];
    v34 = (char *)a1 + v33;
    v35 = (char *)a2 + v33;
    v36 = *(_QWORD *)((char *)a2 + v33);
    v37 = *(_QWORD *)((char *)a2 + v33 + 8);
    v38 = *((_BYTE *)a2 + v33 + 16);
    sub_10000BAD4(v36, v37, v38);
    *(_QWORD *)v34 = v36;
    *((_QWORD *)v34 + 1) = v37;
    v34[16] = v38;
    v39 = *((_QWORD *)v35 + 3);
    *((_QWORD *)v34 + 3) = v39;
    v40 = v6[7];
    v41 = (char *)a1 + v40;
    v42 = (char *)a2 + v40;
    v43 = *((unsigned __int8 *)a2 + v40 + 16);
    swift_bridgeObjectRetain(v39);
    if (v43 == 255)
    {
      *(_OWORD *)v41 = *(_OWORD *)v42;
      v41[16] = v42[16];
    }
    else
    {
      v44 = *(_QWORD *)v42;
      v45 = *((_QWORD *)v42 + 1);
      sub_10000BB2C(v44, v45, v43);
      *(_QWORD *)v41 = v44;
      *((_QWORD *)v41 + 1) = v45;
      v41[16] = v43;
    }
    *(_QWORD *)((char *)a1 + v6[8]) = *(_QWORD *)((char *)a2 + v6[8]);
    *((_BYTE *)a1 + v6[9]) = *((_BYTE *)a2 + v6[9]);
  }
  return a1;
}

uint64_t sub_1000A982C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  int v10;

  v2 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(a1, v2))
  {
    case 0u:
    case 1u:
      v3 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
      break;
    case 2u:
      v4 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
      v5 = sub_100004FC8(&qword_10015C420);
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v5 + 48) + 8));
      break;
    case 3u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
      break;
    case 4u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      break;
    case 5u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));

      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      if (*(_QWORD *)(a1 + 72))
        sub_100005474((_QWORD *)(a1 + 48));
      break;
    default:
      break;
  }
  v6 = type metadata accessor for PrimarySettingsListBadgedLinkModel(0);
  v7 = a1 + *(int *)(v6 + 24);
  sub_100007618(*(_QWORD *)v7, *(_QWORD *)(v7 + 8), *(_BYTE *)(v7 + 16));
  result = swift_bridgeObjectRelease(*(_QWORD *)(v7 + 24));
  v9 = a1 + *(int *)(v6 + 28);
  v10 = *(unsigned __int8 *)(v9 + 16);
  if (v10 != 255)
    return sub_10000BB54(*(_QWORD *)v9, *(_QWORD *)(v9 + 8), v10);
  return result;
}

_QWORD *sub_1000A99A4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  id v27;
  __int128 v28;
  int *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;

  v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(a2, v4))
  {
    case 0u:
      v5 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
      v6 = a1;
      v7 = v4;
      v8 = 0;
      goto LABEL_12;
    case 1u:
      v9 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      v6 = a1;
      v7 = v4;
      v8 = 1;
      goto LABEL_12;
    case 2u:
      v10 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      v11 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
      v12 = (_QWORD *)((char *)a1 + v11);
      v13 = (_QWORD *)((char *)a2 + v11);
      v14 = v13[1];
      *v12 = *v13;
      v12[1] = v14;
      swift_bridgeObjectRetain(v14);
      v6 = a1;
      v7 = v4;
      v8 = 2;
      goto LABEL_12;
    case 3u:
      v15 = a2[1];
      *a1 = *a2;
      a1[1] = v15;
      v16 = a2[3];
      a1[2] = a2[2];
      a1[3] = v16;
      v17 = a2[5];
      a1[4] = a2[4];
      a1[5] = v17;
      v18 = a2[7];
      a1[6] = a2[6];
      a1[7] = v18;
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v18);
      v6 = a1;
      v7 = v4;
      v8 = 3;
      goto LABEL_12;
    case 4u:
      v19 = a2[1];
      *a1 = *a2;
      a1[1] = v19;
      v20 = a2[3];
      a1[2] = a2[2];
      a1[3] = v20;
      v21 = a2[5];
      a1[4] = a2[4];
      a1[5] = v21;
      a1[6] = a2[6];
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRetain(v21);
      v6 = a1;
      v7 = v4;
      v8 = 4;
      goto LABEL_12;
    case 5u:
      v22 = a2[1];
      *a1 = *a2;
      a1[1] = v22;
      v23 = a2[3];
      a1[2] = a2[2];
      a1[3] = v23;
      v25 = (void *)a2[4];
      v24 = a2[5];
      a1[4] = v25;
      a1[5] = v24;
      v26 = a2[9];
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v23);
      v27 = v25;
      swift_bridgeObjectRetain(v24);
      if (v26)
      {
        a1[9] = v26;
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v26 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v26);
      }
      else
      {
        v28 = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 4) = v28;
      }
      v6 = a1;
      v7 = v4;
      v8 = 5;
LABEL_12:
      swift_storeEnumTagMultiPayload(v6, v7, v8);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
      break;
  }
  v29 = (int *)type metadata accessor for PrimarySettingsListBadgedLinkModel(0);
  *((_BYTE *)a1 + v29[5]) = *((_BYTE *)a2 + v29[5]);
  v30 = v29[6];
  v31 = (char *)a1 + v30;
  v32 = (char *)a2 + v30;
  v33 = *(_QWORD *)((char *)a2 + v30);
  v34 = *(_QWORD *)((char *)a2 + v30 + 8);
  v35 = *((_BYTE *)a2 + v30 + 16);
  sub_10000BAD4(v33, v34, v35);
  *(_QWORD *)v31 = v33;
  *((_QWORD *)v31 + 1) = v34;
  v31[16] = v35;
  v36 = *((_QWORD *)v32 + 3);
  *((_QWORD *)v31 + 3) = v36;
  v37 = v29[7];
  v38 = (char *)a1 + v37;
  v39 = (char *)a2 + v37;
  v40 = *((unsigned __int8 *)a2 + v37 + 16);
  swift_bridgeObjectRetain(v36);
  if (v40 == 255)
  {
    *(_OWORD *)v38 = *(_OWORD *)v39;
    v38[16] = v39[16];
  }
  else
  {
    v41 = *(_QWORD *)v39;
    v42 = *((_QWORD *)v39 + 1);
    sub_10000BB2C(v41, v42, v40);
    *(_QWORD *)v38 = v41;
    *((_QWORD *)v38 + 1) = v42;
    v38[16] = v40;
  }
  *(_QWORD *)((char *)a1 + v29[8]) = *(_QWORD *)((char *)a2 + v29[8]);
  *((_BYTE *)a1 + v29[9]) = *((_BYTE *)a2 + v29[9]);
  return a1;
}

_QWORD *sub_1000A9CA8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  __int128 v28;
  int *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  __int128 v53;

  if (a1 != a2)
  {
    sub_1000076B4((uint64_t)a1, type metadata accessor for PrimarySettingsListItemIdentifier);
    v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(a2, v4))
    {
      case 0u:
        v5 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
        v6 = a1;
        v7 = v4;
        v8 = 0;
        goto LABEL_13;
      case 1u:
        v9 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
        v6 = a1;
        v7 = v4;
        v8 = 1;
        goto LABEL_13;
      case 2u:
        v10 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
        v11 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v12 = (_QWORD *)((char *)a1 + v11);
        v13 = (_QWORD *)((char *)a2 + v11);
        *v12 = *v13;
        v14 = v13[1];
        v12[1] = v14;
        swift_bridgeObjectRetain(v14);
        v6 = a1;
        v7 = v4;
        v8 = 2;
        goto LABEL_13;
      case 3u:
        *a1 = *a2;
        v15 = a2[1];
        a1[1] = v15;
        a1[2] = a2[2];
        v16 = a2[3];
        a1[3] = v16;
        a1[4] = a2[4];
        v17 = a2[5];
        a1[5] = v17;
        a1[6] = a2[6];
        v18 = a2[7];
        a1[7] = v18;
        swift_bridgeObjectRetain(v15);
        swift_bridgeObjectRetain(v16);
        swift_bridgeObjectRetain(v17);
        swift_bridgeObjectRetain(v18);
        v6 = a1;
        v7 = v4;
        v8 = 3;
        goto LABEL_13;
      case 4u:
        *a1 = *a2;
        v19 = a2[1];
        a1[1] = v19;
        a1[2] = a2[2];
        v20 = a2[3];
        a1[3] = v20;
        a1[4] = a2[4];
        v21 = a2[5];
        a1[5] = v21;
        a1[6] = a2[6];
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v21);
        v6 = a1;
        v7 = v4;
        v8 = 4;
        goto LABEL_13;
      case 5u:
        *a1 = *a2;
        v22 = a2[1];
        a1[1] = v22;
        a1[2] = a2[2];
        v23 = a2[3];
        a1[3] = v23;
        v24 = (void *)a2[4];
        a1[4] = v24;
        v25 = a2[5];
        a1[5] = v25;
        v26 = a2[9];
        swift_bridgeObjectRetain(v22);
        swift_bridgeObjectRetain(v23);
        v27 = v24;
        swift_bridgeObjectRetain(v25);
        if (v26)
        {
          a1[9] = v26;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v26 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v26);
        }
        else
        {
          v28 = *((_OWORD *)a2 + 4);
          *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
          *((_OWORD *)a1 + 4) = v28;
        }
        v6 = a1;
        v7 = v4;
        v8 = 5;
LABEL_13:
        swift_storeEnumTagMultiPayload(v6, v7, v8);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
        break;
    }
  }
  v29 = (int *)type metadata accessor for PrimarySettingsListBadgedLinkModel(0);
  *((_BYTE *)a1 + v29[5]) = *((_BYTE *)a2 + v29[5]);
  v30 = v29[6];
  v31 = (char *)a1 + v30;
  v32 = (char *)a2 + v30;
  v33 = *(_QWORD *)((char *)a2 + v30);
  v34 = *(_QWORD *)((char *)a2 + v30 + 8);
  v35 = *((_BYTE *)a2 + v30 + 16);
  sub_10000BAD4(v33, v34, v35);
  v36 = *(_QWORD *)v31;
  v37 = *((_QWORD *)v31 + 1);
  v38 = v31[16];
  *(_QWORD *)v31 = v33;
  *((_QWORD *)v31 + 1) = v34;
  v31[16] = v35;
  sub_100007618(v36, v37, v38);
  v39 = *((_QWORD *)v32 + 3);
  v40 = *((_QWORD *)v31 + 3);
  *((_QWORD *)v31 + 3) = v39;
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRelease(v40);
  v41 = v29[7];
  v42 = (uint64_t)a1 + v41;
  v43 = (char *)a2 + v41;
  v44 = *((unsigned __int8 *)a2 + v41 + 16);
  if (*((unsigned __int8 *)a1 + v41 + 16) == 255)
  {
    if (v44 == 255)
    {
      v53 = *(_OWORD *)v43;
      *(_BYTE *)(v42 + 16) = v43[16];
      *(_OWORD *)v42 = v53;
    }
    else
    {
      v50 = *(_QWORD *)v43;
      v51 = *((_QWORD *)v43 + 1);
      sub_10000BB2C(v50, v51, v44);
      *(_QWORD *)v42 = v50;
      *(_QWORD *)(v42 + 8) = v51;
      *(_BYTE *)(v42 + 16) = v44;
    }
  }
  else if (v44 == 255)
  {
    sub_100010D24(v42);
    v52 = v43[16];
    *(_OWORD *)v42 = *(_OWORD *)v43;
    *(_BYTE *)(v42 + 16) = v52;
  }
  else
  {
    v45 = *(_QWORD *)v43;
    v46 = *((_QWORD *)v43 + 1);
    sub_10000BB2C(v45, v46, v44);
    v47 = *(_QWORD *)v42;
    v48 = *(_QWORD *)(v42 + 8);
    *(_QWORD *)v42 = v45;
    *(_QWORD *)(v42 + 8) = v46;
    v49 = *(_BYTE *)(v42 + 16);
    *(_BYTE *)(v42 + 16) = v44;
    sub_10000BB54(v47, v48, v49);
  }
  *(_QWORD *)((char *)a1 + v29[8]) = *(_QWORD *)((char *)a2 + v29[8]);
  *((_BYTE *)a1 + v29[9]) = *((_BYTE *)a2 + v29[9]);
  return a1;
}

char *sub_1000AA090(char *a1, char *a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  char *v16;
  char *v17;

  v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v4);
  if (EnumCaseMultiPayload == 2)
  {
    v7 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    v8 = sub_100004FC8(&qword_10015C420);
    *(_OWORD *)&a1[*(int *)(v8 + 48)] = *(_OWORD *)&a2[*(int *)(v8 + 48)];
    swift_storeEnumTagMultiPayload(a1, v4, 2);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v9 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
    swift_storeEnumTagMultiPayload(a1, v4, 1);
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    v6 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, v4, 0);
  }
  v10 = (int *)type metadata accessor for PrimarySettingsListBadgedLinkModel(0);
  a1[v10[5]] = a2[v10[5]];
  v11 = v10[6];
  v12 = &a1[v11];
  v13 = &a2[v11];
  v14 = *((_OWORD *)v13 + 1);
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *((_OWORD *)v12 + 1) = v14;
  v15 = v10[7];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v16[16] = v17[16];
  *(_OWORD *)v16 = *(_OWORD *)v17;
  *(_QWORD *)&a1[v10[8]] = *(_QWORD *)&a2[v10[8]];
  a1[v10[9]] = a2[v10[9]];
  return a1;
}

char *sub_1000AA20C(char *a1, char *a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  if (a1 != a2)
  {
    sub_1000076B4((uint64_t)a1, type metadata accessor for PrimarySettingsListItemIdentifier);
    v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v4);
    if (EnumCaseMultiPayload == 2)
    {
      v7 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      v8 = sub_100004FC8(&qword_10015C420);
      *(_OWORD *)&a1[*(int *)(v8 + 48)] = *(_OWORD *)&a2[*(int *)(v8 + 48)];
      swift_storeEnumTagMultiPayload(a1, v4, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v9 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      swift_storeEnumTagMultiPayload(a1, v4, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, v4, 0);
    }
  }
  v10 = (int *)type metadata accessor for PrimarySettingsListBadgedLinkModel(0);
  a1[v10[5]] = a2[v10[5]];
  v11 = v10[6];
  v12 = &a1[v11];
  v13 = &a2[v11];
  LOBYTE(v11) = a2[v11 + 16];
  v14 = *(_QWORD *)v12;
  v15 = *((_QWORD *)v12 + 1);
  v16 = v12[16];
  *(_OWORD *)v12 = *(_OWORD *)v13;
  v12[16] = v11;
  sub_100007618(v14, v15, v16);
  v17 = *((_QWORD *)v12 + 3);
  *((_QWORD *)v12 + 3) = *((_QWORD *)v13 + 3);
  swift_bridgeObjectRelease(v17);
  v18 = v10[7];
  v19 = (uint64_t)&a1[v18];
  v20 = &a2[v18];
  v21 = a1[v18 + 16];
  if (v21 == 255)
    goto LABEL_13;
  v22 = v20[16];
  if (v22 == 255)
  {
    sub_100010D24(v19);
LABEL_13:
    *(_OWORD *)v19 = *(_OWORD *)v20;
    *(_BYTE *)(v19 + 16) = v20[16];
    goto LABEL_14;
  }
  v23 = *(_QWORD *)v19;
  v24 = *(_QWORD *)(v19 + 8);
  *(_OWORD *)v19 = *(_OWORD *)v20;
  *(_BYTE *)(v19 + 16) = v22;
  sub_10000BB54(v23, v24, v21);
LABEL_14:
  *(_QWORD *)&a1[v10[8]] = *(_QWORD *)&a2[v10[8]];
  a1[v10[9]] = a2[v10[9]];
  return a1;
}

uint64_t sub_1000AA408(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000AA414);
}

uint64_t sub_1000AA414(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PrimarySettingsListBadgedLinkModel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1000AA450(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000AA45C);
}

uint64_t sub_1000AA45C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PrimarySettingsListBadgedLinkModel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for PrimarySettingsListBadgedLink(uint64_t a1)
{
  uint64_t result;

  result = qword_10015AC50;
  if (!qword_10015AC50)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PrimarySettingsListBadgedLink);
  return result;
}

uint64_t sub_1000AA4D8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for PrimarySettingsListBadgedLinkModel(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1000AA540(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10012B0F8, 1);
}

uint64_t sub_1000AA550@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t KeyPath;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38[16];
  uint64_t v39;
  char v40[16];
  uint64_t v41;

  v37 = a1;
  v2 = type metadata accessor for BadgeProminence(0);
  v35 = *(_QWORD *)(v2 - 8);
  v36 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100004FC8(&qword_100157440);
  v31 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004FC8(&qword_10015AC88);
  v33 = *(_QWORD *)(v8 - 8);
  v34 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004FC8(&qword_10015AC90);
  __chkstk_darwin(v11);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_100004FC8(&qword_10015AC98);
  __chkstk_darwin(v32);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = v1;
  v39 = v1;
  v30 = v1;
  v16 = sub_1000116EC();
  Label.init(title:icon:)(sub_1000AA984, v40, sub_1000AA98C, v38, &type metadata for Text, &type metadata for Icon, &protocol witness table for Text, v16);
  v17 = type metadata accessor for PrimarySettingsListBadgedLinkModel(0);
  v18 = *(_QWORD *)(v1 + *(int *)(v17 + 32));
  v19 = sub_100007868((unint64_t *)&qword_100157450, &qword_100157440, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  View.badge(_:)(v18, v5, v19);
  v20 = (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v7, v5);
  static BadgeProminence.increased.getter(v20);
  KeyPath = swift_getKeyPath(&unk_100118E20);
  v22 = (uint64_t *)&v13[*(int *)(v11 + 36)];
  v23 = sub_100004FC8(&qword_100158620);
  v25 = v35;
  v24 = v36;
  (*(void (**)(char *, char *, uint64_t))(v35 + 16))((char *)v22 + *(int *)(v23 + 28), v4, v36);
  *v22 = KeyPath;
  v27 = v33;
  v26 = v34;
  (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v13, v10, v34);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v4, v24);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v10, v26);
  if (*(_BYTE *)(v30 + *(int *)(v17 + 20)))
    v28 = 0.5;
  else
    v28 = 1.0;
  sub_1000AAA54((uint64_t)v13, (uint64_t)v15);
  *(double *)&v15[*(int *)(v32 + 36)] = v28;
  sub_1000AAA9C((uint64_t)v13);
  return sub_1000AAADC((uint64_t)v15, v37);
}

uint64_t sub_1000AA83C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v3 = a1 + *(int *)(type metadata accessor for PrimarySettingsListBadgedLinkModel(0) + 24);
  v4 = *(_QWORD *)v3;
  v5 = *(_QWORD *)(v3 + 8);
  v6 = *(_BYTE *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  *(_QWORD *)a2 = *(_QWORD *)v3;
  *(_QWORD *)(a2 + 8) = v5;
  *(_BYTE *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 24) = v7;
  sub_10000BAD4(v4, v5, v6);
  return swift_bridgeObjectRetain(v7);
}

uint64_t sub_1000AA88C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t result;
  uint64_t v18;

  v4 = type metadata accessor for PrimarySettingsListBadgedLink(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1 + *(int *)(type metadata accessor for PrimarySettingsListBadgedLinkModel(0) + 28);
  v8 = *(_QWORD *)v7;
  v9 = *(_QWORD *)(v7 + 8);
  v10 = *(unsigned __int8 *)(v7 + 16);
  sub_1000AAB24(a1, (uint64_t)v6);
  v11 = v8;
  v12 = v9;
  v13 = v10;
  if (v10 == 255)
  {
    sub_10009C7A4();
    v11 = v14;
    v12 = v15;
    v13 = v16;
  }
  sub_100011774(v8, v9, v10);
  sub_1000076B4((uint64_t)v6, type metadata accessor for PrimarySettingsListBadgedLink);
  result = swift_getKeyPath(&unk_100118E50);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = v11;
  *(_QWORD *)(a2 + 24) = v12;
  *(_BYTE *)(a2 + 32) = v13;
  return result;
}

uint64_t sub_1000AA984@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000AA83C(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1000AA98C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000AA88C(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1000AA994()
{
  return EnvironmentValues.badgeProminence.getter();
}

uint64_t sub_1000AA9B4()
{
  return EnvironmentValues.badgeProminence.getter();
}

uint64_t sub_1000AA9D4(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  type metadata accessor for BadgeProminence(0);
  __chkstk_darwin();
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v4 + 16))(v3, a1);
  return EnvironmentValues.badgeProminence.setter(v3);
}

uint64_t sub_1000AAA54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004FC8(&qword_10015AC90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000AAA9C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004FC8(&qword_10015AC90);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000AAADC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004FC8(&qword_10015AC98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000AAB24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PrimarySettingsListBadgedLink(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000AAB74()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015ACA0;
  if (!qword_10015ACA0)
  {
    v1 = sub_100005430(&qword_10015AC98);
    sub_1000AABE0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015ACA0);
  }
  return result;
}

unint64_t sub_1000AABE0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_10015ACA8;
  if (!qword_10015ACA8)
  {
    v1 = sub_100005430(&qword_10015AC90);
    v2[0] = sub_100005430(&qword_100157440);
    v2[1] = sub_100007868((unint64_t *)&qword_100157450, &qword_100157440, (uint64_t)&protocol conformance descriptor for Label<A, B>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.badge(_:)>>, 1);
    sub_100007868((unint64_t *)&qword_100158638, &qword_100158620, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015ACA8);
  }
  return result;
}

uint64_t *sub_1000AACAC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD *v38;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_100004FC8(&qword_10015C890);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      switch(swift_getEnumCaseMultiPayload(a2, v7))
      {
        case 0u:
          v11 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
          v12 = a1;
          v13 = v7;
          v14 = 0;
          goto LABEL_16;
        case 1u:
          v15 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(a1, a2, v15);
          v12 = a1;
          v13 = v7;
          v14 = 1;
          goto LABEL_16;
        case 2u:
          v16 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(a1, a2, v16);
          v17 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
          v18 = (uint64_t *)((char *)a1 + v17);
          v19 = (uint64_t *)((char *)a2 + v17);
          v20 = v19[1];
          *v18 = *v19;
          v18[1] = v20;
          swift_bridgeObjectRetain(v20);
          v12 = a1;
          v13 = v7;
          v14 = 2;
          goto LABEL_16;
        case 3u:
          v21 = a2[1];
          *a1 = *a2;
          a1[1] = v21;
          v22 = a2[3];
          a1[2] = a2[2];
          a1[3] = v22;
          v23 = a2[5];
          a1[4] = a2[4];
          a1[5] = v23;
          v24 = a2[7];
          a1[6] = a2[6];
          a1[7] = v24;
          swift_bridgeObjectRetain(v21);
          swift_bridgeObjectRetain(v22);
          swift_bridgeObjectRetain(v23);
          swift_bridgeObjectRetain(v24);
          v12 = a1;
          v13 = v7;
          v14 = 3;
          goto LABEL_16;
        case 4u:
          v25 = a2[1];
          *a1 = *a2;
          a1[1] = v25;
          v26 = a2[3];
          a1[2] = a2[2];
          a1[3] = v26;
          v27 = a2[5];
          a1[4] = a2[4];
          a1[5] = v27;
          a1[6] = a2[6];
          swift_bridgeObjectRetain(v25);
          swift_bridgeObjectRetain(v26);
          swift_bridgeObjectRetain(v27);
          v12 = a1;
          v13 = v7;
          v14 = 4;
          goto LABEL_16;
        case 5u:
          v28 = a2[1];
          *a1 = *a2;
          a1[1] = v28;
          v29 = a2[3];
          a1[2] = a2[2];
          a1[3] = v29;
          v30 = (void *)a2[4];
          v31 = a2[5];
          a1[4] = (uint64_t)v30;
          a1[5] = v31;
          v38 = a1 + 6;
          v32 = a2[9];
          swift_bridgeObjectRetain(v28);
          swift_bridgeObjectRetain(v29);
          v33 = v30;
          swift_bridgeObjectRetain(v31);
          if (v32)
          {
            a1[9] = v32;
            (**(void (***)(_OWORD *, uint64_t, uint64_t))(v32 - 8))(v38, (uint64_t)(a2 + 6), v32);
          }
          else
          {
            v34 = *((_OWORD *)a2 + 4);
            *v38 = *((_OWORD *)a2 + 3);
            *((_OWORD *)a1 + 4) = v34;
          }
          v12 = a1;
          v13 = v7;
          v14 = 5;
LABEL_16:
          swift_storeEnumTagMultiPayload(v12, v13, v14);
          break;
        default:
          memcpy(a1, a2, *(_QWORD *)(v8 + 64));
          break;
      }
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v35 = *(int *)(a3 + 20);
    v36 = *(uint64_t *)((char *)a2 + v35);
    v10 = v36 & 0x3FFFFFFFFFFFFFFFLL;
    *(uint64_t *)((char *)a1 + v35) = v36;
  }
  swift_retain(v10);
  return a1;
}

uint64_t sub_1000AAFA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, 1, v4))
  {
    switch(swift_getEnumCaseMultiPayload(a1, v4))
    {
      case 0u:
      case 1u:
        v6 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
        break;
      case 2u:
        v7 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a1, v7);
        v8 = sub_100004FC8(&qword_10015C420);
        swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v8 + 48) + 8));
        break;
      case 3u:
        swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
        swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
        swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
        swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
        break;
      case 4u:
        swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
        swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
        swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
        break;
      case 5u:
        swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
        swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));

        swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
        if (*(_QWORD *)(a1 + 72))
          sub_100005474((_QWORD *)(a1 + 48));
        break;
      default:
        return swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 20)) & 0x3FFFFFFFFFFFFFFFLL);
    }
  }
  return swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 20)) & 0x3FFFFFFFFFFFFFFFLL);
}

_QWORD *sub_1000AB100(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD *v36;

  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_100004FC8(&qword_10015C890);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, v6))
    {
      case 0u:
        v9 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
        v10 = a1;
        v11 = v6;
        v12 = 0;
        goto LABEL_14;
      case 1u:
        v13 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
        v10 = a1;
        v11 = v6;
        v12 = 1;
        goto LABEL_14;
      case 2u:
        v14 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
        v15 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v16 = (_QWORD *)((char *)a1 + v15);
        v17 = (_QWORD *)((char *)a2 + v15);
        v18 = v17[1];
        *v16 = *v17;
        v16[1] = v18;
        swift_bridgeObjectRetain(v18);
        v10 = a1;
        v11 = v6;
        v12 = 2;
        goto LABEL_14;
      case 3u:
        v19 = a2[1];
        *a1 = *a2;
        a1[1] = v19;
        v20 = a2[3];
        a1[2] = a2[2];
        a1[3] = v20;
        v21 = a2[5];
        a1[4] = a2[4];
        a1[5] = v21;
        v22 = a2[7];
        a1[6] = a2[6];
        a1[7] = v22;
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v22);
        v10 = a1;
        v11 = v6;
        v12 = 3;
        goto LABEL_14;
      case 4u:
        v23 = a2[1];
        *a1 = *a2;
        a1[1] = v23;
        v24 = a2[3];
        a1[2] = a2[2];
        a1[3] = v24;
        v25 = a2[5];
        a1[4] = a2[4];
        a1[5] = v25;
        a1[6] = a2[6];
        swift_bridgeObjectRetain(v23);
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v25);
        v10 = a1;
        v11 = v6;
        v12 = 4;
        goto LABEL_14;
      case 5u:
        v26 = a2[1];
        *a1 = *a2;
        a1[1] = v26;
        v27 = a2[3];
        a1[2] = a2[2];
        a1[3] = v27;
        v28 = (void *)a2[4];
        v29 = a2[5];
        a1[4] = v28;
        a1[5] = v29;
        v36 = a1 + 6;
        v30 = a2[9];
        swift_bridgeObjectRetain(v26);
        swift_bridgeObjectRetain(v27);
        v31 = v28;
        swift_bridgeObjectRetain(v29);
        if (v30)
        {
          a1[9] = v30;
          (**(void (***)(_OWORD *, uint64_t, uint64_t))(v30 - 8))(v36, (uint64_t)(a2 + 6), v30);
        }
        else
        {
          v32 = *((_OWORD *)a2 + 4);
          *v36 = *((_OWORD *)a2 + 3);
          *((_OWORD *)a1 + 4) = v32;
        }
        v10 = a1;
        v11 = v6;
        v12 = 5;
LABEL_14:
        swift_storeEnumTagMultiPayload(v10, v11, v12);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v7 + 64));
        break;
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v33 = *(int *)(a3 + 20);
  v34 = *(_QWORD *)((char *)a2 + v33);
  *(_QWORD *)((char *)a1 + v33) = v34;
  swift_retain(v34 & 0x3FFFFFFFFFFFFFFFLL);
  return a1;
}

uint64_t sub_1000AB3D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v61;
  _OWORD *v62;

  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      switch(swift_getEnumCaseMultiPayload(a2, v6))
      {
        case 0u:
          v11 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
          v12 = a1;
          v13 = v6;
          v14 = 0;
          goto LABEL_28;
        case 1u:
          v17 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(a1, a2, v17);
          v12 = a1;
          v13 = v6;
          v14 = 1;
          goto LABEL_28;
        case 2u:
          v18 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(a1, a2, v18);
          v19 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
          v20 = (_QWORD *)(a1 + v19);
          v21 = (_QWORD *)(a2 + v19);
          *v20 = *v21;
          v22 = v21[1];
          v20[1] = v22;
          swift_bridgeObjectRetain(v22);
          v12 = a1;
          v13 = v6;
          v14 = 2;
          goto LABEL_28;
        case 3u:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          v23 = *(_QWORD *)(a2 + 8);
          *(_QWORD *)(a1 + 8) = v23;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
          v24 = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(a1 + 24) = v24;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
          v25 = *(_QWORD *)(a2 + 40);
          *(_QWORD *)(a1 + 40) = v25;
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
          v26 = *(_QWORD *)(a2 + 56);
          *(_QWORD *)(a1 + 56) = v26;
          swift_bridgeObjectRetain(v23);
          swift_bridgeObjectRetain(v24);
          swift_bridgeObjectRetain(v25);
          swift_bridgeObjectRetain(v26);
          v12 = a1;
          v13 = v6;
          v14 = 3;
          goto LABEL_28;
        case 4u:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          v27 = *(_QWORD *)(a2 + 8);
          *(_QWORD *)(a1 + 8) = v27;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
          v28 = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(a1 + 24) = v28;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
          v29 = *(_QWORD *)(a2 + 40);
          *(_QWORD *)(a1 + 40) = v29;
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
          swift_bridgeObjectRetain(v27);
          swift_bridgeObjectRetain(v28);
          swift_bridgeObjectRetain(v29);
          v12 = a1;
          v13 = v6;
          v14 = 4;
          goto LABEL_28;
        case 5u:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          v30 = *(_QWORD *)(a2 + 8);
          *(_QWORD *)(a1 + 8) = v30;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
          v31 = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(a1 + 24) = v31;
          v32 = *(void **)(a2 + 32);
          *(_QWORD *)(a1 + 32) = v32;
          v33 = *(_QWORD *)(a2 + 40);
          *(_QWORD *)(a1 + 40) = v33;
          v62 = (_OWORD *)(a1 + 48);
          v34 = *(_QWORD *)(a2 + 72);
          swift_bridgeObjectRetain(v30);
          swift_bridgeObjectRetain(v31);
          v35 = v32;
          swift_bridgeObjectRetain(v33);
          if (v34)
          {
            *(_QWORD *)(a1 + 72) = v34;
            (**(void (***)(_OWORD *, uint64_t, uint64_t))(v34 - 8))(v62, a2 + 48, v34);
          }
          else
          {
            v55 = *(_OWORD *)(a2 + 64);
            *v62 = *(_OWORD *)(a2 + 48);
            *(_OWORD *)(a1 + 64) = v55;
          }
          v12 = a1;
          v13 = v6;
          v14 = 5;
LABEL_28:
          swift_storeEnumTagMultiPayload(v12, v13, v14);
          break;
        default:
          memcpy((void *)a1, (const void *)a2, *(_QWORD *)(v7 + 64));
          break;
      }
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_30;
    }
    goto LABEL_7;
  }
  if (v10)
  {
    sub_100013014(a1);
LABEL_7:
    v15 = *(_QWORD *)(*(_QWORD *)(sub_100004FC8(&qword_10015C890) - 8) + 64);
LABEL_8:
    memcpy((void *)a1, (const void *)a2, v15);
    goto LABEL_30;
  }
  if (a1 != a2)
  {
    sub_100013014(a1);
    switch(swift_getEnumCaseMultiPayload(a2, v6))
    {
      case 0u:
        v16 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(a1, a2, v16);
        swift_storeEnumTagMultiPayload(a1, v6, 0);
        break;
      case 1u:
        v36 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(a1, a2, v36);
        swift_storeEnumTagMultiPayload(a1, v6, 1);
        break;
      case 2u:
        v37 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(a1, a2, v37);
        v38 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v39 = (_QWORD *)(a1 + v38);
        v40 = (_QWORD *)(a2 + v38);
        *v39 = *v40;
        v41 = v40[1];
        v39[1] = v41;
        swift_bridgeObjectRetain(v41);
        swift_storeEnumTagMultiPayload(a1, v6, 2);
        break;
      case 3u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v42 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a1 + 8) = v42;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        v43 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 24) = v43;
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        v44 = *(_QWORD *)(a2 + 40);
        *(_QWORD *)(a1 + 40) = v44;
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
        v45 = *(_QWORD *)(a2 + 56);
        *(_QWORD *)(a1 + 56) = v45;
        swift_bridgeObjectRetain(v42);
        swift_bridgeObjectRetain(v43);
        swift_bridgeObjectRetain(v44);
        swift_bridgeObjectRetain(v45);
        swift_storeEnumTagMultiPayload(a1, v6, 3);
        break;
      case 4u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v46 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a1 + 8) = v46;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        v47 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 24) = v47;
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        v48 = *(_QWORD *)(a2 + 40);
        *(_QWORD *)(a1 + 40) = v48;
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
        swift_bridgeObjectRetain(v46);
        swift_bridgeObjectRetain(v47);
        swift_bridgeObjectRetain(v48);
        swift_storeEnumTagMultiPayload(a1, v6, 4);
        break;
      case 5u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v49 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a1 + 8) = v49;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        v50 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 24) = v50;
        v51 = *(void **)(a2 + 32);
        *(_QWORD *)(a1 + 32) = v51;
        v52 = *(_QWORD *)(a2 + 40);
        *(_QWORD *)(a1 + 40) = v52;
        v53 = *(_QWORD *)(a2 + 72);
        swift_bridgeObjectRetain(v49);
        swift_bridgeObjectRetain(v50);
        v54 = v51;
        swift_bridgeObjectRetain(v52);
        if (v53)
        {
          *(_QWORD *)(a1 + 72) = v53;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v53 - 8))(a1 + 48, a2 + 48, v53);
        }
        else
        {
          v61 = *(_OWORD *)(a2 + 64);
          *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
          *(_OWORD *)(a1 + 64) = v61;
        }
        swift_storeEnumTagMultiPayload(a1, v6, 5);
        break;
      default:
        v15 = *(_QWORD *)(v7 + 64);
        goto LABEL_8;
    }
  }
LABEL_30:
  v56 = *(int *)(a3 + 20);
  v57 = *(_QWORD *)(a2 + v56);
  v58 = *(_QWORD *)(a1 + v56);
  *(_QWORD *)(a1 + v56) = v57;
  v59 = v58 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain(v57 & 0x3FFFFFFFFFFFFFFFLL);
  swift_release(v59);
  return a1;
}

char *sub_1000AB9A0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_100004FC8(&qword_10015C890);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
    if (EnumCaseMultiPayload == 2)
    {
      v11 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
      v12 = sub_100004FC8(&qword_10015C420);
      *(_OWORD *)&a1[*(int *)(v12 + 48)] = *(_OWORD *)&a2[*(int *)(v12 + 48)];
      swift_storeEnumTagMultiPayload(a1, v6, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v13 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(a1, a2, v13);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(v7 + 64));
    }
    else
    {
      v10 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
      swift_storeEnumTagMultiPayload(a1, v6, 0);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

char *sub_1000ABB2C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  size_t v13;
  int EnumCaseMultiPayload;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      if (a1 == a2)
        goto LABEL_20;
      sub_100013014((uint64_t)a1);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
      switch(EnumCaseMultiPayload)
      {
        case 2:
          v22 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(a1, a2, v22);
          v23 = sub_100004FC8(&qword_10015C420);
          *(_OWORD *)&a1[*(int *)(v23 + 48)] = *(_OWORD *)&a2[*(int *)(v23 + 48)];
          swift_storeEnumTagMultiPayload(a1, v6, 2);
          goto LABEL_20;
        case 1:
          v24 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(a1, a2, v24);
          swift_storeEnumTagMultiPayload(a1, v6, 1);
          goto LABEL_20;
        case 0:
          v15 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(a1, a2, v15);
          swift_storeEnumTagMultiPayload(a1, v6, 0);
          goto LABEL_20;
      }
      v13 = *(_QWORD *)(v7 + 64);
      goto LABEL_10;
    }
    sub_100013014((uint64_t)a1);
LABEL_9:
    v13 = *(_QWORD *)(*(_QWORD *)(sub_100004FC8(&qword_10015C890) - 8) + 64);
LABEL_10:
    memcpy(a1, a2, v13);
    goto LABEL_20;
  }
  if (v10)
    goto LABEL_9;
  v11 = swift_getEnumCaseMultiPayload(a2, v6);
  if (v11 == 2)
  {
    v16 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(a1, a2, v16);
    v17 = sub_100004FC8(&qword_10015C420);
    *(_OWORD *)&a1[*(int *)(v17 + 48)] = *(_OWORD *)&a2[*(int *)(v17 + 48)];
    swift_storeEnumTagMultiPayload(a1, v6, 2);
  }
  else if (v11 == 1)
  {
    v18 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(a1, a2, v18);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else if (v11)
  {
    memcpy(a1, a2, *(_QWORD *)(v7 + 64));
  }
  else
  {
    v12 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, a2, v12);
    swift_storeEnumTagMultiPayload(a1, v6, 0);
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_20:
  v19 = *(int *)(a3 + 20);
  v20 = *(_QWORD *)&a1[v19];
  *(_QWORD *)&a1[v19] = *(_QWORD *)&a2[v19];
  swift_release(v20 & 0x3FFFFFFFFFFFFFFFLL);
  return a1;
}

uint64_t sub_1000ABDDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000ABDE8);
}

uint64_t sub_1000ABDE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;
  unsigned int v11;

  v6 = sub_100004FC8(&qword_10015C890);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  v10 = (v9 >> 57) & 0x18 | v9 & 7;
  v11 = 128 - (((v9 >> 57) >> 5) | (4 * v10));
  if (v10)
    return v11;
  else
    return 0;
}

uint64_t sub_1000ABE7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000ABE88);
}

uint64_t sub_1000ABE88(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = sub_100004FC8(&qword_10015C890);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  v10 = (-(int)a2 >> 2) & 0x1F | (32 * (-(int)a2 & 0x7F));
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (v10 | (v10 << 57)) & 0xF000000000000007;
  return result;
}

uint64_t type metadata accessor for SettingsAppDetailContent(uint64_t a1)
{
  uint64_t result;

  result = qword_10015AD08;
  if (!qword_10015AD08)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SettingsAppDetailContent);
  return result;
}

void sub_1000ABF50(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_1000ABFC0(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = "\b";
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

void sub_1000ABFC0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10015AD18)
  {
    v2 = type metadata accessor for PrimarySettingsListItemIdentifier(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10015AD18);
  }
}

uint64_t sub_1000AC014()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v0 = type metadata accessor for SettingsAppDetailContent(0);
  sub_10001AED4(v0, qword_10015D398);
  v1 = sub_100007808(v0, (uint64_t)qword_10015D398);
  v2 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  *(_QWORD *)(v1 + *(int *)(v0 + 20)) = 0xC000000000000000;
  return result;
}

void sub_1000AC088()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  _BYTE v10[16];

  v1 = v0;
  v2 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v10[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_100004FC8(&qword_10015C890);
  __chkstk_darwin(v6);
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000871E0(v1, (uint64_t)v8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    sub_10000F48C((uint64_t)v8, (uint64_t)v5);
    Hasher._combine(_:)(1u);
    sub_10009FDA0();
    sub_100013014((uint64_t)v5);
  }
  v9 = (char *)sub_1000AC1A8
     + 4
     * byte_100118E9E[*(_QWORD *)(v1 + *(int *)(type metadata accessor for SettingsAppDetailContent(0) + 20)) >> 62];
  __asm { BR              X11 }
}

uint64_t sub_1000AC1A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v2 - 56) = a1;
  v3 = type metadata accessor for SettingsAnyPlatformViewControllerModel(0);
  v4 = sub_100007828(&qword_10015AD60, (uint64_t (*)(uint64_t))&type metadata accessor for SettingsAnyPlatformViewControllerModel, (uint64_t)&protocol conformance descriptor for SettingsAnyPlatformViewControllerModel);
  return dispatch thunk of Hashable.hash(into:)(v1, v3, v4);
}

Swift::Int sub_1000AC248()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  sub_1000AC088();
  return Hasher._finalize()();
}

Swift::Int sub_1000AC288(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  sub_1000AC088();
  return Hasher._finalize()();
}

uint64_t sub_1000AC2C4()
{
  return sub_100007828(&qword_10015AD48, type metadata accessor for SettingsAppDetailContent, (uint64_t)&unk_100118EF8);
}

unint64_t sub_1000AC2F4()
{
  unint64_t result;

  result = qword_10015AD50;
  if (!qword_10015AD50)
  {
    result = swift_getWitnessTable(&unk_100118FA0, &type metadata for SettingsAppDetailContent.ContentType);
    atomic_store(result, (unint64_t *)&qword_10015AD50);
  }
  return result;
}

void sub_1000AC338(uint64_t *a1)
{
  sub_1000AC5E0(*a1);
}

void sub_1000AC344(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1000AC378()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = type metadata accessor for SettingsAnyPlatformViewControllerModel(0);
  v2 = sub_100007828(&qword_10015AD60, (uint64_t (*)(uint64_t))&type metadata accessor for SettingsAnyPlatformViewControllerModel, (uint64_t)&protocol conformance descriptor for SettingsAnyPlatformViewControllerModel);
  return dispatch thunk of Hashable.hash(into:)(v0, v1, v2);
}

void sub_1000AC414(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_1000AC450()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v0 = type metadata accessor for SettingsAnyPlatformViewControllerModel(0);
  v1 = sub_100007828(&qword_10015AD60, (uint64_t (*)(uint64_t))&type metadata accessor for SettingsAnyPlatformViewControllerModel, (uint64_t)&protocol conformance descriptor for SettingsAnyPlatformViewControllerModel);
  dispatch thunk of Hashable.hash(into:)(&v3, v0, v1);
  return Hasher._finalize()();
}

void sub_1000AC4F4()
{
  uint64_t *v0;

  sub_1000AC414(*v0);
}

void sub_1000AC4FC(uint64_t a1)
{
  uint64_t *v1;

  sub_1000AC344(a1, *v1);
}

void sub_1000AC504(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1000AC53C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v0 = type metadata accessor for SettingsAnyPlatformViewControllerModel(0);
  v1 = sub_100007828(&qword_10015AD60, (uint64_t (*)(uint64_t))&type metadata accessor for SettingsAnyPlatformViewControllerModel, (uint64_t)&protocol conformance descriptor for SettingsAnyPlatformViewControllerModel);
  dispatch thunk of Hashable.hash(into:)(&v3, v0, v1);
  return Hasher._finalize()();
}

void sub_1000AC5E0(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1000AC614()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (v0 >> 62)
    return 0;
  ((void (*)(_QWORD))type metadata accessor for SettingsAnyPlatformViewControllerModel)(0);
  v2 = v1 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain(v1 & 0x3FFFFFFFFFFFFFFFLL);
  swift_retain(v0);
  v3 = ((uint64_t (*)(uint64_t, unint64_t))static SettingsAnyPlatformViewControllerModel.== infix(_:_:))(v1, v0);
  swift_release(v2);
  swift_release(v0);
  return v3 & 1;
}

uint64_t sub_1000AC6F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unsigned int (*v21)(uint64_t, uint64_t, uint64_t);
  char v23;
  char v24;
  char *v25;
  uint64_t v26;

  v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004FC8(&qword_10015AD68);
  __chkstk_darwin(v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004FC8(&qword_10015C890);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v26 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v26 - v18;
  sub_1000871E0(a1, (uint64_t)&v26 - v18);
  sub_1000871E0(a2, (uint64_t)v17);
  v20 = (uint64_t)&v10[*(int *)(v8 + 48)];
  sub_1000871E0((uint64_t)v19, (uint64_t)v10);
  sub_1000871E0((uint64_t)v17, v20);
  v21 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v21((uint64_t)v10, 1, v4) == 1)
  {
    sub_10000BA50((uint64_t)v17, &qword_10015C890);
    sub_10000BA50((uint64_t)v19, &qword_10015C890);
    if (v21(v20, 1, v4) == 1)
    {
      sub_10000BA50((uint64_t)v10, &qword_10015C890);
      goto LABEL_9;
    }
    goto LABEL_6;
  }
  sub_1000871E0((uint64_t)v10, (uint64_t)v14);
  if (v21(v20, 1, v4) == 1)
  {
    sub_10000BA50((uint64_t)v17, &qword_10015C890);
    sub_10000BA50((uint64_t)v19, &qword_10015C890);
    sub_100013014((uint64_t)v14);
LABEL_6:
    sub_10000BA50((uint64_t)v10, &qword_10015AD68);
    return 0;
  }
  sub_10000F48C(v20, (uint64_t)v7);
  sub_1000A103C((uint64_t)v14, (uint64_t)v7);
  v24 = v23;
  sub_100013014((uint64_t)v7);
  sub_10000BA50((uint64_t)v17, &qword_10015C890);
  sub_10000BA50((uint64_t)v19, &qword_10015C890);
  sub_100013014((uint64_t)v14);
  sub_10000BA50((uint64_t)v10, &qword_10015C890);
  if ((v24 & 1) != 0)
  {
LABEL_9:
    v25 = (char *)sub_1000AC9AC
        + 4
        * byte_100118EB2[*(_QWORD *)(a1 + *(int *)(type metadata accessor for SettingsAppDetailContent(0) + 20)) >> 62];
    __asm { BR              X10 }
  }
  return 0;
}

void sub_1000AC9AC()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (!(v0 >> 62))
  {
    type metadata accessor for SettingsAnyPlatformViewControllerModel(0);
    v2 = v1 & 0x3FFFFFFFFFFFFFFFLL;
    swift_retain(v1 & 0x3FFFFFFFFFFFFFFFLL);
    swift_retain(v0);
    v3 = static SettingsAnyPlatformViewControllerModel.== infix(_:_:)(v1, v0);
    swift_release(v2);
    swift_release(v0);
    if ((v3 & 1) != 0)
      JUMPOUT(0x1000AC900);
  }
  JUMPOUT(0x1000AC8FCLL);
}

_QWORD *initializeBufferWithCopyOfBuffer for SettingsAppDetailContent.ContentType(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = *a2 & 0x3FFFFFFFFFFFFFFFLL;
  *a1 = *a2;
  swift_retain(v3);
  return a1;
}

uint64_t destroy for SettingsAppDetailContent.ContentType(_QWORD *a1)
{
  return swift_release(*a1 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t *assignWithCopy for SettingsAppDetailContent.ContentType(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2 & 0x3FFFFFFFFFFFFFFFLL;
  v4 = *a1;
  *a1 = *a2;
  v5 = v4 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain(v3);
  swift_release(v5);
  return a1;
}

_QWORD *initializeWithTake for SettingsAppDetailContent.ContentType(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t *assignWithTake for SettingsAppDetailContent.ContentType(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  swift_release(v3 & 0x3FFFFFFFFFFFFFFFLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for SettingsAppDetailContent.ContentType(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7D && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 125);
  v3 = (((*(_QWORD *)a1 >> 57) >> 5) | (4 * ((*(_QWORD *)a1 >> 57) & 0x18 | *(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7C)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for SettingsAppDetailContent.ContentType(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7C)
  {
    *(_QWORD *)result = a2 - 125;
    if (a3 >= 0x7D)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7D)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_1000ACBE4(_QWORD *a1)
{
  uint64_t v1;

  v1 = *a1 >> 62;
  if ((_DWORD)v1 == 3)
    return (*a1 >> 3) + 3;
  else
    return v1;
}

_QWORD *sub_1000ACC00(_QWORD *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *sub_1000ACC10(unint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  if (a2 < 3)
  {
    v2 = *result & 0xFFFFFFFFFFFFFF8;
    v3 = a2 << 62;
  }
  else
  {
    v2 = 8 * (a2 - 3);
    v3 = 0xC000000000000000;
  }
  *result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for SettingsAppDetailContent.ContentType()
{
  return &type metadata for SettingsAppDetailContent.ContentType;
}

_QWORD *sub_1000ACC50(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  id v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(a2, v7))
    {
      case 0u:
        v8 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
        v9 = a1;
        v10 = v7;
        v11 = 0;
        goto LABEL_14;
      case 1u:
        v13 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
        v9 = a1;
        v10 = v7;
        v11 = 1;
        goto LABEL_14;
      case 2u:
        v14 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
        v15 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v16 = (_QWORD *)((char *)a1 + v15);
        v17 = (_QWORD *)((char *)a2 + v15);
        v18 = v17[1];
        *v16 = *v17;
        v16[1] = v18;
        swift_bridgeObjectRetain(v18);
        v9 = a1;
        v10 = v7;
        v11 = 2;
        goto LABEL_14;
      case 3u:
        v19 = a2[1];
        *a1 = *a2;
        a1[1] = v19;
        v20 = a2[3];
        a1[2] = a2[2];
        a1[3] = v20;
        v21 = a2[5];
        a1[4] = a2[4];
        a1[5] = v21;
        v22 = a2[7];
        a1[6] = a2[6];
        a1[7] = v22;
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v22);
        v9 = a1;
        v10 = v7;
        v11 = 3;
        goto LABEL_14;
      case 4u:
        v23 = a2[1];
        *a1 = *a2;
        a1[1] = v23;
        v24 = a2[3];
        a1[2] = a2[2];
        a1[3] = v24;
        v25 = a2[5];
        a1[4] = a2[4];
        a1[5] = v25;
        a1[6] = a2[6];
        swift_bridgeObjectRetain(v23);
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v25);
        v9 = a1;
        v10 = v7;
        v11 = 4;
        goto LABEL_14;
      case 5u:
        v26 = a2[1];
        *a1 = *a2;
        a1[1] = v26;
        v27 = a2[3];
        a1[2] = a2[2];
        a1[3] = v27;
        v29 = (void *)a2[4];
        v28 = a2[5];
        a1[4] = v29;
        a1[5] = v28;
        v30 = a2[9];
        swift_bridgeObjectRetain(v26);
        swift_bridgeObjectRetain(v27);
        v31 = v29;
        swift_bridgeObjectRetain(v28);
        if (v30)
        {
          a1[9] = v30;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v30 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v30);
        }
        else
        {
          v32 = *((_OWORD *)a2 + 4);
          *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
          *((_OWORD *)a1 + 4) = v32;
        }
        v9 = a1;
        v10 = v7;
        v11 = 5;
LABEL_14:
        swift_storeEnumTagMultiPayload(v9, v10, v11);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
        break;
    }
    v33 = *(int *)(a3 + 20);
    v34 = (char *)a1 + v33;
    v35 = (char *)a2 + v33;
    v36 = type metadata accessor for FamilyRowStatus(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v34, v35, v36);
    v37 = *(int *)(a3 + 24);
    v38 = (_QWORD *)((char *)a1 + v37);
    v39 = (_QWORD *)((char *)a2 + v37);
    v40 = v39[1];
    *v38 = *v39;
    v38[1] = v40;
    swift_bridgeObjectRetain(v40);
  }
  return a1;
}

uint64_t sub_1000ACF18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(a1, v4))
  {
    case 0u:
    case 1u:
      v5 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
      break;
    case 2u:
      v6 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
      v7 = sub_100004FC8(&qword_10015C420);
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v7 + 48) + 8));
      break;
    case 3u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
      break;
    case 4u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      break;
    case 5u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));

      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      if (*(_QWORD *)(a1 + 72))
        sub_100005474((_QWORD *)(a1 + 48));
      break;
    default:
      break;
  }
  v8 = a1 + *(int *)(a2 + 20);
  v9 = type metadata accessor for FamilyRowStatus(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 24) + 8));
}

_QWORD *sub_1000AD074(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;

  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(a2, v6))
  {
    case 0u:
      v7 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 0;
      goto LABEL_12;
    case 1u:
      v11 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      v8 = a1;
      v9 = v6;
      v10 = 1;
      goto LABEL_12;
    case 2u:
      v12 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
      v13 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
      v14 = (_QWORD *)((char *)a1 + v13);
      v15 = (_QWORD *)((char *)a2 + v13);
      v16 = v15[1];
      *v14 = *v15;
      v14[1] = v16;
      swift_bridgeObjectRetain(v16);
      v8 = a1;
      v9 = v6;
      v10 = 2;
      goto LABEL_12;
    case 3u:
      v17 = a2[1];
      *a1 = *a2;
      a1[1] = v17;
      v18 = a2[3];
      a1[2] = a2[2];
      a1[3] = v18;
      v19 = a2[5];
      a1[4] = a2[4];
      a1[5] = v19;
      v20 = a2[7];
      a1[6] = a2[6];
      a1[7] = v20;
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v20);
      v8 = a1;
      v9 = v6;
      v10 = 3;
      goto LABEL_12;
    case 4u:
      v21 = a2[1];
      *a1 = *a2;
      a1[1] = v21;
      v22 = a2[3];
      a1[2] = a2[2];
      a1[3] = v22;
      v23 = a2[5];
      a1[4] = a2[4];
      a1[5] = v23;
      a1[6] = a2[6];
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v23);
      v8 = a1;
      v9 = v6;
      v10 = 4;
      goto LABEL_12;
    case 5u:
      v24 = a2[1];
      *a1 = *a2;
      a1[1] = v24;
      v25 = a2[3];
      a1[2] = a2[2];
      a1[3] = v25;
      v27 = (void *)a2[4];
      v26 = a2[5];
      a1[4] = v27;
      a1[5] = v26;
      v28 = a2[9];
      swift_bridgeObjectRetain(v24);
      swift_bridgeObjectRetain(v25);
      v29 = v27;
      swift_bridgeObjectRetain(v26);
      if (v28)
      {
        a1[9] = v28;
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v28 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v28);
      }
      else
      {
        v30 = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 4) = v30;
      }
      v8 = a1;
      v9 = v6;
      v10 = 5;
LABEL_12:
      swift_storeEnumTagMultiPayload(v8, v9, v10);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      break;
  }
  v31 = *(int *)(a3 + 20);
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = type metadata accessor for FamilyRowStatus(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v32, v33, v34);
  v35 = *(int *)(a3 + 24);
  v36 = (_QWORD *)((char *)a1 + v35);
  v37 = (_QWORD *)((char *)a2 + v35);
  v38 = v37[1];
  *v36 = *v37;
  v36[1] = v38;
  swift_bridgeObjectRetain(v38);
  return a1;
}

_QWORD *sub_1000AD310(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;

  if (a1 != a2)
  {
    sub_100013014((uint64_t)a1);
    v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(a2, v6))
    {
      case 0u:
        v7 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
        v8 = a1;
        v9 = v6;
        v10 = 0;
        goto LABEL_13;
      case 1u:
        v11 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
        v8 = a1;
        v9 = v6;
        v10 = 1;
        goto LABEL_13;
      case 2u:
        v12 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
        v13 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v14 = (_QWORD *)((char *)a1 + v13);
        v15 = (_QWORD *)((char *)a2 + v13);
        *v14 = *v15;
        v16 = v15[1];
        v14[1] = v16;
        swift_bridgeObjectRetain(v16);
        v8 = a1;
        v9 = v6;
        v10 = 2;
        goto LABEL_13;
      case 3u:
        *a1 = *a2;
        v17 = a2[1];
        a1[1] = v17;
        a1[2] = a2[2];
        v18 = a2[3];
        a1[3] = v18;
        a1[4] = a2[4];
        v19 = a2[5];
        a1[5] = v19;
        a1[6] = a2[6];
        v20 = a2[7];
        a1[7] = v20;
        swift_bridgeObjectRetain(v17);
        swift_bridgeObjectRetain(v18);
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        v8 = a1;
        v9 = v6;
        v10 = 3;
        goto LABEL_13;
      case 4u:
        *a1 = *a2;
        v21 = a2[1];
        a1[1] = v21;
        a1[2] = a2[2];
        v22 = a2[3];
        a1[3] = v22;
        a1[4] = a2[4];
        v23 = a2[5];
        a1[5] = v23;
        a1[6] = a2[6];
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v22);
        swift_bridgeObjectRetain(v23);
        v8 = a1;
        v9 = v6;
        v10 = 4;
        goto LABEL_13;
      case 5u:
        *a1 = *a2;
        v24 = a2[1];
        a1[1] = v24;
        a1[2] = a2[2];
        v25 = a2[3];
        a1[3] = v25;
        v26 = (void *)a2[4];
        a1[4] = v26;
        v27 = a2[5];
        a1[5] = v27;
        v28 = a2[9];
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v25);
        v29 = v26;
        swift_bridgeObjectRetain(v27);
        if (v28)
        {
          a1[9] = v28;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v28 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v28);
        }
        else
        {
          v30 = *((_OWORD *)a2 + 4);
          *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
          *((_OWORD *)a1 + 4) = v30;
        }
        v8 = a1;
        v9 = v6;
        v10 = 5;
LABEL_13:
        swift_storeEnumTagMultiPayload(v8, v9, v10);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
        break;
    }
  }
  v31 = *(int *)(a3 + 20);
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = type metadata accessor for FamilyRowStatus(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 24))(v32, v33, v34);
  v35 = *(int *)(a3 + 24);
  v36 = (_QWORD *)((char *)a1 + v35);
  v37 = (_QWORD *)((char *)a2 + v35);
  *v36 = *v37;
  v38 = v37[1];
  v39 = v36[1];
  v36[1] = v38;
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRelease(v39);
  return a1;
}

char *sub_1000AD628(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
  if (EnumCaseMultiPayload == 2)
  {
    v9 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
    v10 = sub_100004FC8(&qword_10015C420);
    *(_OWORD *)&a1[*(int *)(v10 + 48)] = *(_OWORD *)&a2[*(int *)(v10 + 48)];
    swift_storeEnumTagMultiPayload(a1, v6, 2);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v11 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    v8 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload(a1, v6, 0);
  }
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for FamilyRowStatus(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
  *(_OWORD *)&a1[*(int *)(a3 + 24)] = *(_OWORD *)&a2[*(int *)(a3 + 24)];
  return a1;
}

char *sub_1000AD78C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (a1 != a2)
  {
    sub_100013014((uint64_t)a1);
    v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
    if (EnumCaseMultiPayload == 2)
    {
      v9 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      v10 = sub_100004FC8(&qword_10015C420);
      *(_OWORD *)&a1[*(int *)(v10 + 48)] = *(_OWORD *)&a2[*(int *)(v10 + 48)];
      swift_storeEnumTagMultiPayload(a1, v6, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v11 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      v8 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload(a1, v6, 0);
    }
  }
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for FamilyRowStatus(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  v16 = *(int *)(a3 + 24);
  v17 = &a1[v16];
  v18 = &a2[v16];
  v20 = *(_QWORD *)v18;
  v19 = *((_QWORD *)v18 + 1);
  v21 = *((_QWORD *)v17 + 1);
  *(_QWORD *)v17 = v20;
  *((_QWORD *)v17 + 1) = v19;
  swift_bridgeObjectRelease(v21);
  return a1;
}

uint64_t sub_1000AD910(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000AD91C);
}

uint64_t sub_1000AD91C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for FamilyRowStatus(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_1000AD9C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000AD9D4);
}

uint64_t sub_1000AD9D4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for FamilyRowStatus(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for PrimarySettingsListFamilyLinkModel(uint64_t a1)
{
  uint64_t result;

  result = qword_10015ADC8;
  if (!qword_10015ADC8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PrimarySettingsListFamilyLinkModel);
  return result;
}

uint64_t sub_1000ADAB8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  result = type metadata accessor for PrimarySettingsListItemIdentifier(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for FamilyRowStatus(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      v5[2] = &unk_100119028;
      swift_initStructMetadata(a1, 256, 3, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000ADB44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  sub_1000A103C(a1, a2);
  if ((v6 & 1) == 0 || (sub_100020584() & 1) == 0)
    return 0;
  v7 = *(int *)(a3 + 24);
  v8 = *(_QWORD *)(a1 + v7);
  v9 = *(_QWORD *)(a1 + v7 + 8);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  if (v8 == *v10 && v9 == v11)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, *v10, v11, 0);
}

void sub_1000ADBCC()
{
  id v0;
  Swift::String v1;
  Swift::String v2;
  void *object;
  void *v4;
  id v5;
  id v6;
  NSString v7;
  NSString v8;
  id v9;
  Swift::String v10;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v10._object = (void *)0x800000010011FBC0;
  v1._countAndFlagsBits = 0x746F6F7465756C42;
  v1._object = (void *)0xE900000000000068;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v10._countAndFlagsBits = 0xD000000000000014;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v10)._object;

  if (qword_100156D20 != -1)
    swift_once(&qword_100156D20, sub_1000AE190);
  v4 = (void *)qword_10015D3D0;
  v5 = objc_allocWithZone((Class)UIApplicationShortcutItem);
  v6 = v4;
  v7 = String._bridgeToObjectiveC()();
  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  v9 = objc_msgSend(v5, "initWithType:localizedTitle:localizedSubtitle:icon:userInfo:", v7, v8, 0, v6, 0);

  qword_10015D3B0 = (uint64_t)v9;
}

void sub_1000ADD38()
{
  id v0;
  void *v1;
  int wapiCapability;
  id v3;
  uint64_t v4;
  unint64_t v5;
  Swift::String v6;
  unint64_t v7;
  void *object;
  void *v9;
  id v10;
  id v11;
  NSString v12;
  NSString v13;
  id v14;
  unint64_t v15;

  v0 = (id)MobileGestalt_get_current_device();
  if (v0)
  {
    v1 = v0;
    wapiCapability = MobileGestalt_get_wapiCapability();

    v3 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v15 = 0x800000010011FBC0;
    if (wapiCapability)
    {
      v4 = 1312902231;
      v5 = 0xE400000000000000;
    }
    else
    {
      v4 = 0x69462D6957;
      v5 = 0xE500000000000000;
    }
    v6._countAndFlagsBits = 0;
    v6._object = (void *)0xE000000000000000;
    v7 = 0xD000000000000014;
    object = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v4, (Swift::String_optional)0, (NSBundle)v3, v6, *(Swift::String *)(&v15 + -8))._object;

    if (qword_100156D28 != -1)
      swift_once(&qword_100156D28, sub_1000AE220);
    v9 = (void *)qword_10015D3D8;
    v10 = objc_allocWithZone((Class)UIApplicationShortcutItem);
    v11 = v9;
    v12 = String._bridgeToObjectiveC()();
    v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(object);
    v14 = objc_msgSend(v10, "initWithType:localizedTitle:localizedSubtitle:icon:userInfo:", v12, v13, 0, v11, 0);

    qword_10015D3B8 = (uint64_t)v14;
  }
  else
  {
    __break(1u);
  }
}

void sub_1000ADEC8()
{
  id v0;
  Swift::String v1;
  Swift::String v2;
  void *object;
  void *v4;
  id v5;
  id v6;
  NSString v7;
  NSString v8;
  id v9;
  Swift::String v10;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v10._object = (void *)0x800000010011FBC0;
  v1._countAndFlagsBits = 0x72616C756C6C6543;
  v1._object = (void *)0xE800000000000000;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v10._countAndFlagsBits = 0xD000000000000014;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v10)._object;

  if (qword_100156D30 != -1)
    swift_once(&qword_100156D30, sub_1000AE238);
  v4 = (void *)qword_10015D3E0;
  v5 = objc_allocWithZone((Class)UIApplicationShortcutItem);
  v6 = v4;
  v7 = String._bridgeToObjectiveC()();
  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  v9 = objc_msgSend(v5, "initWithType:localizedTitle:localizedSubtitle:icon:userInfo:", v7, v8, 0, v6, 0);

  qword_10015D3C0 = (uint64_t)v9;
}

void sub_1000AE02C()
{
  id v0;
  Swift::String v1;
  Swift::String v2;
  void *object;
  void *v4;
  id v5;
  id v6;
  NSString v7;
  NSString v8;
  id v9;
  Swift::String v10;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v10._object = (void *)0x800000010011FBC0;
  v1._countAndFlagsBits = 0x79726574746142;
  v1._object = (void *)0xE700000000000000;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v10._countAndFlagsBits = 0xD000000000000014;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v10)._object;

  if (qword_100156D38 != -1)
    swift_once(&qword_100156D38, sub_1000AE25C);
  v4 = (void *)qword_10015D3E8;
  v5 = objc_allocWithZone((Class)UIApplicationShortcutItem);
  v6 = v4;
  v7 = String._bridgeToObjectiveC()();
  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  v9 = objc_msgSend(v5, "initWithType:localizedTitle:localizedSubtitle:icon:userInfo:", v7, v8, 0, v6, 0);

  qword_10015D3C8 = (uint64_t)v9;
}

void sub_1000AE190()
{
  id v0;
  NSString v1;
  id v2;
  id v3;

  v0 = objc_allocWithZone((Class)SBSApplicationShortcutSystemPrivateIcon);
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "initWithSystemImageName:", v1);

  v3 = objc_msgSend(objc_allocWithZone((Class)UIApplicationShortcutIcon), "initWithSBSApplicationShortcutIcon:", v2);
  qword_10015D3D0 = (uint64_t)v3;
}

void sub_1000AE220(uint64_t a1)
{
  sub_1000AE284(a1, 1768319351, 0xE400000000000000, &qword_10015D3D8);
}

void sub_1000AE238(uint64_t a1)
{
  sub_1000AE284(a1, 0xD000000000000021, 0x8000000100125550, &qword_10015D3E0);
}

void sub_1000AE25C(uint64_t a1)
{
  sub_1000AE284(a1, 0x2E79726574746162, 0xEB00000000303031, &qword_10015D3E8);
}

void sub_1000AE284(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  NSString v5;
  id v6;

  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend((id)objc_opt_self(UIApplicationShortcutIcon), "iconWithSystemImageName:", v5);

  *a4 = v6;
}

uint64_t sub_1000AE2E8(void *a1, void *a2)
{
  void *v2;
  void *v3;
  objc_class *ObjectType;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  os_log_t log;
  _QWORD *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  objc_super v36;

  v3 = v2;
  ObjectType = (objc_class *)swift_getObjectType(v3);
  if (qword_100156CA0 != -1)
    swift_once(&qword_100156CA0, sub_10008BDE8);
  v7 = type metadata accessor for Logger(0);
  sub_100007808(v7, (uint64_t)qword_10015D298);
  v8 = a2;
  v9 = v3;
  v10 = a1;
  v11 = v8;
  v12 = v9;
  v13 = v10;
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v14, v15))
  {

    if (a2)
      goto LABEL_5;
LABEL_7:
    v28 = 1;
    goto LABEL_8;
  }
  v16 = swift_slowAlloc(62, -1);
  v31 = (_QWORD *)swift_slowAlloc(8, -1);
  v32 = swift_slowAlloc(96, -1);
  v35 = v32;
  *(_DWORD *)v16 = 136316419;
  v17 = swift_getObjectType(v12);
  v18 = _typeName(_:qualified:)(v17, 0);
  v33 = v11;
  v20 = v19;
  v34 = sub_1000DA1F0(v18, v19, &v35);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v16 + 4, v16 + 12);

  swift_bridgeObjectRelease(v20);
  *(_WORD *)(v16 + 12) = 2080;
  v34 = sub_1000DA1F0(0xD000000000000040, 0x80000001001256E0, &v35);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v16 + 14, v16 + 22);
  *(_WORD *)(v16 + 22) = 2160;
  v34 = 1752392040;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v16 + 24, v16 + 32);
  *(_WORD *)(v16 + 32) = 2113;
  v34 = (uint64_t)v13;
  v21 = v13;
  v11 = v33;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v16 + 34, v16 + 42);
  log = v14;
  *v31 = v13;

  *(_WORD *)(v16 + 42) = 2160;
  v34 = 1752392040;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v16 + 44, v16 + 52);
  *(_WORD *)(v16 + 52) = 2081;
  v34 = (uint64_t)a2;
  v22 = v33;
  v23 = sub_100004FC8(&qword_10015AF08);
  v24 = String.init<A>(describing:)(&v34, v23);
  v26 = v25;
  v34 = sub_1000DA1F0(v24, v25, &v35);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v16 + 54, v16 + 62);

  swift_bridgeObjectRelease(v26);
  _os_log_impl((void *)&_mh_execute_header, v14, v15, "Start (%s.%s), listController: '%{private,mask.hash}@', rootController: '%{private,mask.hash}s'…", (uint8_t *)v16, 0x3Eu);
  v27 = sub_100004FC8(&qword_10015AF10);
  swift_arrayDestroy(v31, 1, v27);
  swift_slowDealloc(v31, -1, -1);
  swift_arrayDestroy(v32, 3, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v32, -1, -1);
  swift_slowDealloc(v16, -1, -1);

  if (!a2)
    goto LABEL_7;
LABEL_5:
  v36.receiver = v12;
  v36.super_class = ObjectType;
  v28 = (uint64_t)objc_msgSendSuper2(&v36, "listControllerShouldDeselectAfterFormSheetDisappearance:givenRootController:", v13, v11, log);
LABEL_8:
  sub_1000AE6A4(v12, v13, a2);
  return v28;
}

void sub_1000AE6A4(void *a1, void *a2, void *a3)
{
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  os_log_type_t type;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;

  if (qword_100156CA0 != -1)
    swift_once(&qword_100156CA0, sub_10008BDE8);
  v6 = type metadata accessor for Logger(0);
  sub_100007808(v6, (uint64_t)qword_10015D298);
  v7 = a3;
  v8 = a1;
  v9 = a2;
  v10 = v7;
  v29 = v8;
  v11 = v9;
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    type = v13;
    v14 = swift_slowAlloc(62, -1);
    v26 = (_QWORD *)swift_slowAlloc(8, -1);
    v28 = swift_slowAlloc(96, -1);
    v31 = v28;
    *(_DWORD *)v14 = 136316419;
    ObjectType = swift_getObjectType(v29);
    v16 = _typeName(_:qualified:)(ObjectType, 0);
    v18 = v17;
    v30 = sub_1000DA1F0(v16, v17, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v14 + 4, v14 + 12);

    swift_bridgeObjectRelease(v18);
    *(_WORD *)(v14 + 12) = 2080;
    v30 = sub_1000DA1F0(0xD000000000000040, 0x80000001001256E0, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v14 + 14, v14 + 22);
    *(_WORD *)(v14 + 22) = 2160;
    v30 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v14 + 24, v14 + 32);
    *(_WORD *)(v14 + 32) = 2113;
    v30 = (uint64_t)v11;
    v19 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v14 + 34, v14 + 42);
    *v26 = v11;

    *(_WORD *)(v14 + 42) = 2160;
    v30 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v14 + 44, v14 + 52);
    *(_WORD *)(v14 + 52) = 2081;
    v30 = (uint64_t)a3;
    v20 = v10;
    v21 = sub_100004FC8(&qword_10015AF08);
    v22 = String.init<A>(describing:)(&v30, v21);
    v24 = v23;
    v30 = sub_1000DA1F0(v22, v23, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v14 + 54, v14 + 62);

    swift_bridgeObjectRelease(v24);
    _os_log_impl((void *)&_mh_execute_header, v12, type, "...Complete (%s.%s), listController: '%{private,mask.hash}@', rootController: '%{private,mask.hash}s'.", (uint8_t *)v14, 0x3Eu);
    v25 = sub_100004FC8(&qword_10015AF10);
    swift_arrayDestroy(v26, 1, v25);
    swift_slowDealloc(v26, -1, -1);
    swift_arrayDestroy(v28, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {

  }
}

void sub_1000AEA84(void *a1)
{
  void *v1;
  objc_class *ObjectType;
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  id v17;
  uint64_t v18;
  id v19;
  void *v20;
  char v21;
  char v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  objc_super v37;

  ObjectType = (objc_class *)swift_getObjectType(v1);
  if (qword_100156CA0 != -1)
    swift_once(&qword_100156CA0, sub_10008BDE8);
  v4 = type metadata accessor for Logger(0);
  sub_100007808(v4, (uint64_t)qword_10015D298);
  v5 = v1;
  v6 = a1;
  v7 = v5;
  v8 = v6;
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc(42, -1);
    v12 = (_QWORD *)swift_slowAlloc(8, -1);
    v34 = swift_slowAlloc(64, -1);
    v36 = v34;
    *(_DWORD *)v11 = 136315907;
    v13 = swift_getObjectType(v7);
    v14 = _typeName(_:qualified:)(v13, 0);
    v16 = v15;
    v35 = sub_1000DA1F0(v14, v15, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v11 + 4, v11 + 12);

    swift_bridgeObjectRelease(v16);
    *(_WORD *)(v11 + 12) = 2080;
    v35 = sub_1000DA1F0(0xD000000000000030, 0x80000001001256A0, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v11 + 14, v11 + 22);
    *(_WORD *)(v11 + 22) = 2160;
    v35 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v11 + 24, v11 + 32);
    *(_WORD *)(v11 + 32) = 2113;
    v35 = (uint64_t)v8;
    v17 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v11 + 34, v11 + 42);
    *v12 = v8;

    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Start (%s.%s), listController: '%{private,mask.hash}@'…", (uint8_t *)v11, 0x2Au);
    v18 = sub_100004FC8(&qword_10015AF10);
    swift_arrayDestroy(v12, 1, v18);
    swift_slowDealloc(v12, -1, -1);
    swift_arrayDestroy(v34, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {

  }
  v19 = objc_msgSend(v8, "navigationController", v34);
  if (!v19 || (v20 = v19, sub_10000BC28(), v22 = v21, v20, (v22 & 1) == 0))
  {
    v37.receiver = v7;
    v37.super_class = ObjectType;
    objc_msgSendSuper2(&v37, "listControllerShouldNotDeselectAfterAppearing:", v8);
LABEL_24:
    sub_1000AEF08(v7, v8);
    return;
  }
  v23 = objc_msgSend(v8, "navigationController");
  v24 = objc_msgSend(v8, "splitViewController");
  if (!v24)
  {
    v29 = 0;
    if (v23)
    {
LABEL_16:

      if (!v29)
        goto LABEL_22;
LABEL_21:
      swift_unknownObjectRelease(v29);
LABEL_22:
      v31 = objc_msgSend(v8, "splitViewController");
      if (v31)
      {
        v32 = v31;
        objc_msgSend(v31, "isCollapsed");

      }
      goto LABEL_24;
    }
LABEL_20:
    if (!v29)
      goto LABEL_22;
    goto LABEL_21;
  }
  v25 = v24;
  v26 = objc_msgSend(v24, "viewControllers");

  v27 = sub_10000C034();
  v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v26, v27);

  if ((unint64_t)v28 >> 62)
  {
    if (v28 < 0)
      v33 = v28;
    else
      v33 = v28 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v28);
    v29 = _CocoaArrayWrapper.endIndex.getter(v33);
    swift_bridgeObjectRelease(v28);
    if (!v29)
    {
LABEL_15:
      swift_bridgeObjectRelease(v28);
      if (v23)
        goto LABEL_16;
      goto LABEL_20;
    }
  }
  else
  {
    v29 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v29)
      goto LABEL_15;
  }
  if ((v28 & 0xC000000000000001) != 0)
  {
    v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v28);
    goto LABEL_14;
  }
  if (*(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v30 = *(id *)(v28 + 32);
LABEL_14:
    v29 = (uint64_t)v30;
    goto LABEL_15;
  }
  __break(1u);
}

void sub_1000AEF08(void *a1, void *a2)
{
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t ObjectType;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  id v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;

  if (qword_100156CA0 != -1)
    swift_once(&qword_100156CA0, sub_10008BDE8);
  v4 = type metadata accessor for Logger(0);
  sub_100007808(v4, (uint64_t)qword_10015D298);
  v5 = a1;
  v6 = a2;
  v19 = v5;
  v7 = v6;
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc(42, -1);
    v11 = (_QWORD *)swift_slowAlloc(8, -1);
    v12 = swift_slowAlloc(64, -1);
    v21 = v12;
    *(_DWORD *)v10 = 136315907;
    ObjectType = swift_getObjectType(v19);
    v14 = _typeName(_:qualified:)(ObjectType, 0);
    v16 = v15;
    v20 = sub_1000DA1F0(v14, v15, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v10 + 4, v10 + 12);

    swift_bridgeObjectRelease(v16);
    *(_WORD *)(v10 + 12) = 2080;
    v20 = sub_1000DA1F0(0xD000000000000030, 0x80000001001256A0, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v10 + 14, v10 + 22);
    *(_WORD *)(v10 + 22) = 2160;
    v20 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v10 + 24, v10 + 32);
    *(_WORD *)(v10 + 32) = 2113;
    v20 = (uint64_t)v7;
    v17 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v10 + 34, v10 + 42);
    *v11 = v7;

    _os_log_impl((void *)&_mh_execute_header, v8, v9, "...Complete (%s.%s), listController: '%{private,mask.hash}@'.", (uint8_t *)v10, 0x2Au);
    v18 = sub_100004FC8(&qword_10015AF10);
    swift_arrayDestroy(v11, 1, v18);
    swift_slowDealloc(v11, -1, -1);
    swift_arrayDestroy(v12, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

  }
}

void sub_1000AF224(void *a1, void *a2, void **a3, uint64_t (*a4)(), uint64_t a5, int a6)
{
  void *v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  void **v20;
  id v21;
  id v22;
  id v23;
  void **v24;
  id v25;
  id v26;
  void **v27;
  NSObject *v28;
  os_log_type_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  void **v36;
  unint64_t v37;
  unint64_t v38;
  id v39;
  id v40;
  id v41;
  char v42;
  void **v43;
  void **v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  os_log_t v50;
  uint64_t v51;
  void **v52;
  void **v53;
  void **v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  void *v58;
  uint64_t v59;
  void **v60;
  void **v61;
  id v62;
  void *v63;
  char v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  void **v69;
  NSObject *v70;
  os_log_type_t v71;
  _BOOL4 v72;
  uint8_t *v73;
  void **v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  id v78;
  id v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  void **v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void **v88;
  _BYTE *v89;
  uint64_t v90;
  void (*v91)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  void **v98;
  id v99;
  void *v100;
  uint64_t (*v101)(void **, uint64_t);
  uint64_t v102;
  NSObject *v103;
  os_log_type_t v104;
  uint8_t *v105;
  void *v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  NSObject *v112;
  os_log_type_t v113;
  void **v114;
  uint8_t *v115;
  uint8_t *v116;
  void *v117;
  uint64_t v118;
  void **v119;
  NSObject *v120;
  os_log_type_t v121;
  void **v122;
  uint8_t *v123;
  uint8_t *v124;
  void *v125;
  uint64_t v126;
  NSObject *v127;
  os_log_type_t v128;
  uint8_t *v129;
  uint8_t *v130;
  uint8_t *v131;
  uint64_t v132;
  uint64_t v133;
  void **v134;
  uint64_t v135;
  _BYTE v136[12];
  int v137;
  os_log_t v138;
  void **v139;
  uint64_t v140;
  _BYTE *v141;
  uint64_t v142;
  uint64_t v143;
  _BYTE *v144;
  uint64_t v145;
  void **v146;
  uint64_t (*v147)();
  objc_class *ObjectType;
  void **v149;
  void **v150;
  uint64_t v151;
  int v152;
  objc_super v153;
  objc_super v154;
  objc_super v155;
  objc_super v156;
  void **aBlock;
  uint64_t v158;
  uint64_t (*v159)(uint64_t, uint64_t);
  void *v160;
  uint64_t (*v161)();
  uint64_t v162;
  uint64_t v163;
  _BYTE v164[4];

  v152 = a6;
  v147 = a4;
  ObjectType = (objc_class *)swift_getObjectType(v6);
  v143 = type metadata accessor for PreferencesControllerRecipe(0);
  v142 = *(_QWORD *)(v143 - 8);
  v11 = __chkstk_darwin(v143);
  v149 = (void **)&v136[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = __chkstk_darwin(v11);
  v141 = &v136[-v14];
  v140 = v15;
  __chkstk_darwin(v13);
  v144 = &v136[-v16];
  if (qword_100156CA0 != -1)
    swift_once(&qword_100156CA0, sub_10008BDE8);
  v17 = type metadata accessor for Logger(0);
  v18 = sub_100007808(v17, (uint64_t)qword_10015D298);
  v19 = a3;
  v20 = a3;
  v21 = v6;
  v22 = a1;
  v23 = a2;
  v24 = v20;
  v25 = v21;
  v26 = v22;
  v27 = (void **)v23;
  v151 = v18;
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.default.getter();
  v30 = v29;
  if (os_log_type_enabled(v28, v29))
  {
    v31 = swift_slowAlloc(88, -1);
    v138 = v28;
    v32 = v31;
    v33 = (_QWORD *)swift_slowAlloc(16, -1);
    v139 = (void **)swift_slowAlloc(96, -1);
    aBlock = v139;
    *(_DWORD *)v32 = 136317187;
    v146 = v19;
    v34 = swift_getObjectType(v25);
    v35 = _typeName(_:qualified:)(v34, 0);
    v145 = a5;
    v36 = v27;
    v38 = v37;
    v163 = sub_1000DA1F0(v35, v37, (uint64_t *)&aBlock);
    v150 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v163, v164, v32 + 4, v32 + 12);

    swift_bridgeObjectRelease(v38);
    *(_WORD *)(v32 + 12) = 2080;
    v163 = sub_1000DA1F0(0xD000000000000049, 0x8000000100125650, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v163, v164, v32 + 14, v32 + 22);
    *(_WORD *)(v32 + 22) = 2160;
    v163 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v163, v164, v32 + 24, v32 + 32);
    *(_WORD *)(v32 + 32) = 2113;
    v163 = (uint64_t)v26;
    v39 = v26;
    v137 = v30;
    v40 = v25;
    v41 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v163, v164, v32 + 34, v32 + 42);
    *v33 = v26;

    *(_WORD *)(v32 + 42) = 2160;
    v163 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v163, v164, v32 + 44, v32 + 52);
    *(_WORD *)(v32 + 52) = 2113;
    v42 = v152;
    v163 = (uint64_t)v36;
    v43 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v163, v164, v32 + 54, v32 + 62);
    v33[1] = v36;

    v25 = v40;
    *(_WORD *)(v32 + 62) = 2160;
    v163 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v163, v164, v32 + 64, v32 + 72);
    *(_WORD *)(v32 + 72) = 2081;
    v163 = (uint64_t)v146;
    v44 = v150;
    v45 = sub_100004FC8(&qword_10015AF08);
    v46 = String.init<A>(describing:)(&v163, v45);
    v48 = v47;
    v163 = sub_1000DA1F0(v46, v47, (uint64_t *)&aBlock);
    v24 = v150;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v163, v164, v32 + 74, v32 + 82);

    v19 = v146;
    v49 = v48;
    v27 = v36;
    a5 = v145;
    swift_bridgeObjectRelease(v49);
    *(_WORD *)(v32 + 82) = 1024;
    LODWORD(v163) = v42 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v163, (char *)&v163 + 4, v32 + 84, v32 + 88);
    v50 = v138;
    _os_log_impl((void *)&_mh_execute_header, v138, (os_log_type_t)v137, "Start (%s.%s), listController: '%{private,mask.hash}@', viewController: '%{private,mask.hash}@', 'rootController: '%{private,mask.hash}s', animated: '%{BOOL}d'…", (uint8_t *)v32, 0x58u);
    v51 = sub_100004FC8(&qword_10015AF10);
    swift_arrayDestroy(v33, 2, v51);
    swift_slowDealloc(v33, -1, -1);
    v52 = v139;
    swift_arrayDestroy(v139, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v52, -1, -1);
    swift_slowDealloc(v32, -1, -1);

  }
  else
  {

  }
  v53 = v149;
  if (v19)
  {
    v54 = v24;
    v55 = Logger.logObject.getter(v54);
    v56 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v55, v56))
    {
      v57 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v57 = 0;
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "rootController is non-nil, defer to default implementation.", v57, 2u);
      swift_slowDealloc(v57, -1, -1);
    }

    v161 = v147;
    v162 = a5;
    aBlock = _NSConcreteStackBlock;
    v158 = 1107296256;
    v159 = sub_1000B0548;
    v160 = &unk_10014BF38;
    v58 = _Block_copy(&aBlock);
    v59 = v162;
    v60 = v54;
    swift_retain(a5);
    swift_release(v59);
    v153.receiver = v25;
    v153.super_class = ObjectType;
    objc_msgSendSuper2(&v153, "listController:pushViewController:givenRootController:withModalStylePopupStateApplicator:animated:", v26, v27, v60, v58, v152 & 1);
    _Block_release(v58);

    v61 = v19;
    goto LABEL_36;
  }
  v62 = objc_msgSend(v26, "navigationController");
  if (v62)
  {
    v63 = v62;
    sub_10000BC28();
    v65 = v64;

  }
  else
  {
    v65 = 0;
  }
  v66 = objc_opt_self(PSSetupController);
  v67 = swift_dynamicCastObjCClass(v27, v66);
  if (v67)
  {
    v68 = (_BYTE *)v67;
    v145 = a5;
    v69 = v27;
    v70 = Logger.logObject.getter(v69);
    v71 = static os_log_type_t.default.getter();
    v72 = os_log_type_enabled(v70, v71);
    v150 = v24;
    if (v72)
    {
      v146 = v27;
      v73 = (uint8_t *)swift_slowAlloc(12, -1);
      v74 = (void **)swift_slowAlloc(32, -1);
      aBlock = v74;
      v149 = v69;
      *(_DWORD *)v73 = 136315138;
      v75 = swift_getObjectType(v68);
      v76 = _typeName(_:qualified:)(v75, 0);
      v144 = v68;
      v77 = v65;
      v78 = v26;
      v79 = v25;
      v81 = v80;
      v163 = sub_1000DA1F0(v76, v80, (uint64_t *)&aBlock);
      v27 = v146;
      v69 = v149;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v163, v164, v73 + 4, v73 + 12);

      v82 = v81;
      v25 = v79;
      v26 = v78;
      v65 = v77;
      v68 = v144;
      swift_bridgeObjectRelease(v82);
      _os_log_impl((void *)&_mh_execute_header, v70, v71, "viewController is a '%s', defer to default implementation.", v73, 0xCu);
      swift_arrayDestroy(v74, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v74, -1, -1);
      swift_slowDealloc(v73, -1, -1);

    }
    else
    {

    }
    v111 = v145;
    if ((v65 & 1) != 0)
    {
      v112 = Logger.logObject.getter(v83);
      v113 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v112, v113))
      {
        v114 = v69;
        v115 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v115 = 0;
        _os_log_impl((void *)&_mh_execute_header, v112, v113, "setupController is being presented from a list controller that is in a managed navigation controller, hooking up dismissal.", v115, 2u);
        v116 = v115;
        v69 = v114;
        swift_slowDealloc(v116, -1, -1);
      }

      objc_msgSend(v68, "setTransitioningDelegate:", v25);
    }
    v161 = v147;
    v162 = v111;
    aBlock = _NSConcreteStackBlock;
    v158 = 1107296256;
    v159 = sub_1000B0548;
    v160 = &unk_10014BF10;
    v117 = _Block_copy(&aBlock);
    v118 = v162;
    v119 = v69;
    swift_retain(v111);
    swift_release(v118);
    v154.receiver = v25;
    v154.super_class = ObjectType;
    objc_msgSendSuper2(&v154, "listController:pushViewController:givenRootController:withModalStylePopupStateApplicator:animated:", v26, v68, v150, v117, v152 & 1);
    _Block_release(v117);

    goto LABEL_35;
  }
  v160 = (void *)swift_getObjectType(v27);
  aBlock = v27;
  v84 = v27;
  v85 = sub_100004FC8(&qword_10015AF00);
  v86 = swift_dynamicCast(&v163, &aBlock, (char *)&type metadata for Any + 8, v85, 6);
  if (!(_DWORD)v86)
  {
    v120 = Logger.logObject.getter(v86);
    v121 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v120, v121))
    {
      v122 = v24;
      v123 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v123 = 0;
      _os_log_impl((void *)&_mh_execute_header, v120, v121, "viewController is not actually a PSController, defer to default implementation.", v123, 2u);
      v124 = v123;
      v24 = v122;
      swift_slowDealloc(v124, -1, -1);
    }

    v161 = v147;
    v162 = a5;
    aBlock = _NSConcreteStackBlock;
    v158 = 1107296256;
    v159 = sub_1000B0548;
    v160 = &unk_10014BE20;
    v125 = _Block_copy(&aBlock);
    v126 = v162;
    swift_retain(a5);
    swift_release(v126);
    v156.receiver = v25;
    v156.super_class = ObjectType;
    objc_msgSendSuper2(&v156, "listController:pushViewController:givenRootController:withModalStylePopupStateApplicator:animated:", v26, v84, v24, v125, v152 & 1);
    goto LABEL_34;
  }
  v87 = swift_unknownObjectRelease(v163);
  if ((v65 & 1) == 0)
  {
    v127 = Logger.logObject.getter(v87);
    v128 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v127, v128))
    {
      v129 = (uint8_t *)swift_slowAlloc(2, -1);
      v150 = v24;
      v130 = v129;
      *(_WORD *)v129 = 0;
      _os_log_impl((void *)&_mh_execute_header, v127, v128, "listController that requested presentation is not from a managed navigation stack, defer to default implementation.", v129, 2u);
      v131 = v130;
      v24 = v150;
      swift_slowDealloc(v131, -1, -1);
    }

    v161 = v147;
    v162 = a5;
    aBlock = _NSConcreteStackBlock;
    v158 = 1107296256;
    v159 = sub_1000B0548;
    v160 = &unk_10014BE48;
    v125 = _Block_copy(&aBlock);
    v132 = v162;
    swift_retain(a5);
    swift_release(v132);
    v155.receiver = v25;
    v155.super_class = ObjectType;
    objc_msgSendSuper2(&v155, "listController:pushViewController:givenRootController:withModalStylePopupStateApplicator:animated:", v26, v84, v24, v125, v152 & 1);
LABEL_34:
    _Block_release(v125);
LABEL_35:
    v61 = 0;
    goto LABEL_36;
  }
  v146 = v27;
  v88 = v84;
  v89 = v144;
  PreferencesControllerRecipe.init(viewController:)(v88);
  v90 = v142;
  v91 = *(void (**)(_QWORD, _QWORD, _QWORD))(v142 + 16);
  v92 = v141;
  v93 = v143;
  v91(v141, v89, v143);
  v91(v53, v92, v93);
  v94 = *(unsigned __int8 *)(v90 + 80);
  v95 = (v94 + 40) & ~v94;
  v96 = swift_allocObject(&unk_10014BE80, v95 + v140, v94 | 7);
  *(_BYTE *)(v96 + 16) = v152 & 1;
  *(_QWORD *)(v96 + 24) = v88;
  *(_QWORD *)(v96 + 32) = v26;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v90 + 32))(v96 + v95, v92, v93);
  v97 = v26;
  v98 = v88;
  v99 = objc_msgSend(v97, "transitionCoordinator");
  if (v99)
  {
    v100 = v99;
    v101 = *(uint64_t (**)(_QWORD, _QWORD))(v90 + 8);
    v102 = v101(v53, v93);
    v103 = Logger.logObject.getter(v102);
    v104 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v103, v104))
    {
      v105 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v105 = 0;
      _os_log_impl((void *)&_mh_execute_header, v103, v104, "listController has an active transition is flight, deferring navigation push to after active transition completes.", v105, 2u);
      swift_slowDealloc(v105, -1, -1);
    }

    v161 = nullsub_1;
    v162 = 0;
    aBlock = _NSConcreteStackBlock;
    v158 = 1107296256;
    v159 = sub_1000B0898;
    v160 = &unk_10014BE98;
    v106 = _Block_copy(&aBlock);
    v107 = swift_allocObject(&unk_10014BED0, 32, 7);
    *(_QWORD *)(v107 + 16) = sub_1000B1210;
    *(_QWORD *)(v107 + 24) = v96;
    v161 = sub_1000B1284;
    v162 = v107;
    aBlock = _NSConcreteStackBlock;
    v158 = 1107296256;
    v159 = sub_1000B0898;
    v160 = &unk_10014BEE8;
    v108 = _Block_copy(&aBlock);
    v109 = v162;
    swift_retain(v96);
    swift_release(v109);
    objc_msgSend(v100, "animateAlongsideTransition:completion:", v106, v108);
    _Block_release(v108);
    _Block_release(v106);
    swift_release(v96);
    swift_unknownObjectRelease(v100);
    v110 = v143;
  }
  else
  {
    aBlock = 0;
    v133 = Transaction.disablesAnimations.setter((v152 & 1) == 0);
    v134 = aBlock;
    __chkstk_darwin(v133);
    *(_QWORD *)&v136[-32] = v98;
    *(_QWORD *)&v136[-24] = v97;
    *(_QWORD *)&v136[-16] = v53;
    swift_retain(v134);
    withTransaction<A>(_:_:)(v135, sub_1000B1244, &v136[-48], (char *)&type metadata for () + 8);
    swift_release(v134);
    v110 = v143;
    swift_release(v96);
    swift_release(v134);
    v101 = *(uint64_t (**)(_QWORD, _QWORD))(v90 + 8);
    v101(v53, v110);
  }
  v101(v144, v110);
  v61 = 0;
  v27 = v146;
LABEL_36:
  sub_1000B0108(v25, v26, v27, v61, v152 & 1);
}

void sub_1000B0108(void *a1, void *a2, void *a3, void *a4, char a5)
{
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t ObjectType;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  char v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;

  if (qword_100156CA0 != -1)
    swift_once(&qword_100156CA0, sub_10008BDE8);
  v10 = type metadata accessor for Logger(0);
  sub_100007808(v10, (uint64_t)qword_10015D298);
  v11 = a4;
  v12 = a1;
  v13 = a2;
  v14 = a3;
  v15 = v11;
  v36 = v12;
  v16 = v13;
  v17 = v14;
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = swift_slowAlloc(88, -1);
    v33 = (_QWORD *)swift_slowAlloc(16, -1);
    v35 = swift_slowAlloc(96, -1);
    v38 = v35;
    *(_DWORD *)v20 = 136317187;
    ObjectType = swift_getObjectType(v36);
    v22 = _typeName(_:qualified:)(ObjectType, 0);
    v34 = a5;
    v24 = v23;
    v37 = sub_1000DA1F0(v22, v23, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v20 + 4, v20 + 12);

    swift_bridgeObjectRelease(v24);
    *(_WORD *)(v20 + 12) = 2080;
    v37 = sub_1000DA1F0(0xD000000000000049, 0x8000000100125650, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v20 + 14, v20 + 22);
    *(_WORD *)(v20 + 22) = 2160;
    v37 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v20 + 24, v20 + 32);
    v37 = (uint64_t)v16;
    *(_WORD *)(v20 + 32) = 2113;
    v25 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v20 + 34, v20 + 42);
    *v33 = v16;

    *(_WORD *)(v20 + 42) = 2160;
    v37 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v20 + 44, v20 + 52);
    *(_WORD *)(v20 + 52) = 2113;
    v37 = (uint64_t)v17;
    v26 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v20 + 54, v20 + 62);
    v33[1] = v17;

    *(_WORD *)(v20 + 62) = 2160;
    v37 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v20 + 64, v20 + 72);
    *(_WORD *)(v20 + 72) = 2081;
    v37 = (uint64_t)a4;
    v27 = v15;
    v28 = sub_100004FC8(&qword_10015AF08);
    v29 = String.init<A>(describing:)(&v37, v28);
    v31 = v30;
    v37 = sub_1000DA1F0(v29, v30, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v20 + 74, v20 + 82);

    swift_bridgeObjectRelease(v31);
    *(_WORD *)(v20 + 82) = 1024;
    LODWORD(v37) = v34 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, (char *)&v37 + 4, v20 + 84, v20 + 88);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "...Complete (%s.%s), listController: '%{private,mask.hash}@', viewController: '%{private,mask.hash}@', 'rootController: '%{private,mask.hash}s', animated: '%{BOOL}d'.", (uint8_t *)v20, 0x58u);
    v32 = sub_100004FC8(&qword_10015AF10);
    swift_arrayDestroy(v33, 2, v32);
    swift_slowDealloc(v33, -1, -1);
    swift_arrayDestroy(v35, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v20, -1, -1);

  }
  else
  {

  }
}

uint64_t sub_1000B0548(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v4(a2);
  return swift_release(v3);
}

uint64_t sub_1000B0584(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD v9[8];

  v9[7] = 0;
  Transaction.disablesAnimations.setter((a1 & 1) == 0);
  v9[2] = a2;
  v9[3] = a3;
  v9[4] = a4;
  swift_retain(0);
  withTransaction<A>(_:_:)(v7, sub_1000B130C, v9, (char *)&type metadata for () + 8);
  return swift_release_n(0, 2);
}

uint64_t sub_1000B060C(void *a1, void *a2, uint64_t a3)
{
  uint64_t appended;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  _QWORD *v17;
  os_log_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  os_log_t v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;

  v30 = a2;
  appended = type metadata accessor for AppendSettingsNavigationPathAction(0);
  v6 = *(_QWORD *)(appended - 8);
  __chkstk_darwin(appended);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100156CA0 != -1)
    swift_once(&qword_100156CA0, sub_10008BDE8);
  v9 = type metadata accessor for Logger(0);
  sub_100007808(v9, (uint64_t)qword_10015D298);
  v10 = a1;
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc(22, -1);
    v27 = v8;
    v14 = v13;
    v26 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v14 = 141558275;
    v31 = 1752392040;
    v29 = appended;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v14 + 4, v14 + 12);
    *(_WORD *)(v14 + 12) = 2113;
    v25 = v11;
    v31 = (uint64_t)v10;
    v15 = v10;
    v28 = a3;
    v16 = v15;
    appended = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v14 + 14, v14 + 22);
    v17 = v26;
    *v26 = v10;

    a3 = v28;
    v18 = v25;
    _os_log_impl((void *)&_mh_execute_header, v25, v12, "Appending %{private,mask.hash}@ to the navigation path.", (uint8_t *)v14, 0x16u);
    v19 = sub_100004FC8(&qword_10015AF10);
    swift_arrayDestroy(v17, 1, v19);
    swift_slowDealloc(v17, -1, -1);
    v20 = v14;
    v8 = v27;
    swift_slowDealloc(v20, -1, -1);

  }
  else
  {

  }
  v21 = objc_msgSend(v30, "traitCollection");
  UITraitCollection.appendSettingsNavigationPath.getter();

  v22 = type metadata accessor for PreferencesControllerRecipe(0);
  v23 = sub_1000B12A4();
  AppendSettingsNavigationPathAction.callAsFunction<A>(_:)(a3, v22, v23);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, appended);
}

uint64_t sub_1000B0898(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = swift_unknownObjectRetain(a2);
  v4(v5);
  swift_release(v3);
  return swift_unknownObjectRelease(a2);
}

uint64_t sub_1000B09A4(void *a1, char a2)
{
  void *v2;
  objc_class *ObjectType;
  id v6;
  void *v7;
  char v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  char v14;
  objc_super v16;

  ObjectType = (objc_class *)swift_getObjectType(v2);
  v6 = objc_msgSend(a1, "navigationController");
  if (!v6)
    goto LABEL_9;
  v7 = v6;
  sub_10000BC28();
  if ((v8 & 1) == 0)
  {

LABEL_9:
    v16.receiver = v2;
    v16.super_class = ObjectType;
    return (uint64_t)objc_msgSendSuper2(&v16, "listControllerIsOnTopOfNavigationStack:searchTopMostViewControllerChildren:", a1, a2 & 1);
  }
  v9 = objc_msgSend(v7, "topViewController");
  v10 = a1;
  do
  {
    if (v9)
    {
      sub_10000C034();
      v12 = v10;
      v13 = v9;
      v14 = static NSObject.== infix(_:_:)(v12, v13);

      if ((v14 & 1) != 0)
      {

        return 1;
      }
    }
    v11 = objc_msgSend(v10, "parentViewController");

    v10 = v11;
  }
  while (v11);

  return 0;
}

uint64_t type metadata accessor for PreferencesListControllerNavigationCoordinator()
{
  return objc_opt_self(_TtC11SettingsApp46PreferencesListControllerNavigationCoordinator);
}

void sub_1000B0BEC(void *a1)
{
  char **v1;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  id v6;
  id v7;
  id v8;
  id v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t k;
  id v18;
  void *v19;
  uint64_t v20;
  void *v21;
  id v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t j;
  id v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t m;
  id v32;
  void *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t i;
  id v42;
  void *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;

  v3 = objc_opt_self(PSSetupController);
  v4 = swift_dynamicCastObjCClass(a1, v3);
  if (v4)
  {
    v5 = v4;
    v6 = a1;
    v7 = objc_msgSend((id)v5, "parentController");
    if (!v7)
    {
LABEL_73:

      return;
    }
    v8 = v7;
    v9 = objc_msgSend(v7, "rootController");

    if (v9)
      goto LABEL_72;
    v10 = objc_msgSend((id)v5, "usePopupStyle");
    v11 = objc_opt_self(PSViewController);
    v12 = swift_dynamicCastObjCClass(v8, v11);
    if (!v12)
      goto LABEL_72;
    v13 = v12;
    v8 = v8;
    if (!v10)
    {
      v1 = &selRef_visibilityStyle;
      if (objc_msgSend((id)v5, "modalPresentationStyle") != (id)2)
      {

LABEL_55:
        v8 = v8;
        if (objc_msgSend((id)v5, v1[141]) == (id)2)
        {
          objc_msgSend((id)v13, "formSheetViewDidDisappear");
          v38 = objc_msgSend((id)v13, "childViewControllers");
          v39 = sub_10000C034();
          v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v38, v39);

          if ((unint64_t)v13 >> 62)
          {
            if (v13 < 0)
              v46 = v13;
            else
              v46 = v13 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(v13);
            v40 = _CocoaArrayWrapper.endIndex.getter(v46);
            swift_bridgeObjectRelease(v13);
            if (v40)
            {
LABEL_58:
              if (v40 >= 1)
              {
                for (i = 0; i != v40; ++i)
                {
                  if ((v13 & 0xC000000000000001) != 0)
                    v42 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v13);
                  else
                    v42 = *(id *)(v13 + 8 * i + 32);
                  v43 = v42;
                  v44 = objc_opt_self(PSViewController);
                  v45 = (void *)swift_dynamicCastObjCClass(v43, v44);
                  if (v45)
                    objc_msgSend(v45, "formSheetViewDidDisappear");

                }
                goto LABEL_71;
              }
LABEL_76:
              __break(1u);
              return;
            }
          }
          else
          {
            v40 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
            if (v40)
              goto LABEL_58;
          }
LABEL_71:

          swift_bridgeObjectRelease(v13);
          goto LABEL_72;
        }

        v6 = v8;
LABEL_72:

        v6 = v8;
        goto LABEL_73;
      }
      objc_msgSend((id)v13, "formSheetViewWillDisappear");
      v22 = objc_msgSend((id)v13, "childViewControllers");
      v23 = sub_10000C034();
      v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v22, v23);

      if (!((unint64_t)v15 >> 62))
      {
        v24 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (!v24)
        {
LABEL_54:

          swift_bridgeObjectRelease(v15);
          goto LABEL_55;
        }
LABEL_19:
        if (v24 < 1)
        {
          __break(1u);
          goto LABEL_76;
        }
        for (j = 0; j != v24; ++j)
        {
          if ((v15 & 0xC000000000000001) != 0)
            v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(j, v15);
          else
            v26 = *(id *)(v15 + 8 * j + 32);
          v27 = v26;
          v28 = objc_opt_self(PSViewController);
          v29 = (void *)swift_dynamicCastObjCClass(v27, v28);
          if (v29)
            objc_msgSend(v29, "formSheetViewWillDisappear");

        }
        swift_bridgeObjectRelease(v15);
        v1 = &selRef_visibilityStyle;
        goto LABEL_55;
      }
LABEL_50:
      if (v15 < 0)
        v37 = v15;
      else
        v37 = v15 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v15);
      v24 = _CocoaArrayWrapper.endIndex.getter(v37);
      swift_bridgeObjectRelease(v15);
      if (!v24)
        goto LABEL_54;
      goto LABEL_19;
    }
    objc_msgSend((id)v13, "popupViewWillDisappear");
    v14 = objc_msgSend((id)v13, "childViewControllers");
    v5 = sub_10000C034();
    v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, v5);

    if ((unint64_t)v15 >> 62)
    {
      if (v15 < 0)
        v30 = v15;
      else
        v30 = v15 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v15);
      v16 = _CocoaArrayWrapper.endIndex.getter(v30);
      swift_bridgeObjectRelease(v15);
      if (!v16)
        goto LABEL_33;
    }
    else
    {
      v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!v16)
        goto LABEL_33;
    }
    if (v16 < 1)
    {
      __break(1u);
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }
    for (k = 0; k != v16; ++k)
    {
      if ((v15 & 0xC000000000000001) != 0)
        v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(k, v15);
      else
        v18 = *(id *)(v15 + 8 * k + 32);
      v19 = v18;
      v20 = objc_opt_self(PSViewController);
      v21 = (void *)swift_dynamicCastObjCClass(v19, v20);
      if (v21)
        objc_msgSend(v21, "popupViewWillDisappear");

    }
LABEL_33:

    swift_bridgeObjectRelease(v15);
    v8 = v8;
    v1 = &selRef_visibilityStyle;
    objc_msgSend((id)v13, "popupViewDidDisappear");
    v15 = (uint64_t)objc_msgSend((id)v13, "childViewControllers");
    v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v15, v5);

    if ((unint64_t)v13 >> 62)
    {
      if (v13 < 0)
        v36 = v13;
      else
        v36 = v13 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v13);
      v5 = _CocoaArrayWrapper.endIndex.getter(v36);
      swift_bridgeObjectRelease(v13);
      if (!v5)
        goto LABEL_71;
    }
    else
    {
      v5 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!v5)
        goto LABEL_71;
    }
    if (v5 >= 1)
    {
      for (m = 0; m != v5; ++m)
      {
        if ((v13 & 0xC000000000000001) != 0)
          v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(m, v13);
        else
          v32 = *(id *)(v13 + 8 * m + 32);
        v33 = v32;
        v34 = objc_opt_self(PSViewController);
        v35 = (void *)swift_dynamicCastObjCClass(v33, v34);
        if (v35)
          objc_msgSend(v35, "popupViewDidDisappear");

      }
      goto LABEL_71;
    }
    goto LABEL_49;
  }
}

uint64_t sub_1000B115C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000B1180(char a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 16) + 16))(*(_QWORD *)(v1 + 16), a1 & 1);
}

uint64_t sub_1000B1194()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for PreferencesControllerRecipe(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000B1210()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PreferencesControllerRecipe(0) - 8) + 80);
  return sub_1000B0584(*(_BYTE *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), v0 + ((v1 + 40) & ~v1));
}

uint64_t sub_1000B1244()
{
  uint64_t v0;

  return sub_1000B060C(*(void **)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1000B1260()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000B1284()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

unint64_t sub_1000B12A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015C620;
  if (!qword_10015C620)
  {
    v1 = type metadata accessor for PreferencesControllerRecipe(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for PreferencesControllerRecipe, v1);
    atomic_store(result, (unint64_t *)&qword_10015C620);
  }
  return result;
}

uint64_t sub_1000B130C()
{
  return sub_1000B1244();
}

unint64_t sub_1000B1324()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015AF18;
  if (!qword_10015AF18)
  {
    v1 = sub_100005430(&qword_10015AF20);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10015AF18);
  }
  return result;
}

void sub_1000B1370(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1000B139C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v0, 1, 1, v1);
}

uint64_t sub_1000B1860(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1000B189C + 4 * byte_100119148[a1]))(0xD000000000000012, 0x800000010011F480);
}

uint64_t sub_1000B189C()
{
  uint64_t v0;

  return v0 + 6;
}

uint64_t sub_1000B1B48(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = sub_1000B1860(*a1);
  v5 = v4;
  v6 = sub_1000B1860(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int sub_1000B1BD0()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6, 0);
  v2 = sub_1000B1860(v1);
  v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_1000B1C30(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_1000B1860(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1000B1C70(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  v3 = sub_1000B1860(v2);
  v5 = v4;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_1000B1CCC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1000B1ED4(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_1000B1CF8@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1000B1860(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_1000B1D20(_QWORD *a1@<X8>)
{
  *a1 = &off_100147E40;
}

uint64_t getEnumTagSinglePayload for SettingsNavigationHost(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xD5)
    goto LABEL_17;
  if (a2 + 43 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 43) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 43;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 43;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 43;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x2C;
  v8 = v6 - 44;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SettingsNavigationHost(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 43 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 43) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xD5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xD4)
    return ((uint64_t (*)(void))((char *)&loc_1000B1E0C + 4 * byte_100119179[v4]))();
  *a1 = a2 + 43;
  return ((uint64_t (*)(void))((char *)sub_1000B1E40 + 4 * byte_100119174[v4]))();
}

uint64_t sub_1000B1E40(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B1E48(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000B1E50);
  return result;
}

uint64_t sub_1000B1E5C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000B1E64);
  *(_BYTE *)result = a2 + 43;
  return result;
}

uint64_t sub_1000B1E68(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B1E70(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SettingsNavigationHost()
{
  return &type metadata for SettingsNavigationHost;
}

unint64_t sub_1000B1E90()
{
  unint64_t result;

  result = qword_10015AF28;
  if (!qword_10015AF28)
  {
    result = swift_getWitnessTable(&unk_100119250, &type metadata for SettingsNavigationHost);
    atomic_store(result, (unint64_t *)&qword_10015AF28);
  }
  return result;
}

uint64_t sub_1000B1ED4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_100147A00, a1, a2, &unk_100156E08);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x2C)
    return 44;
  else
    return v3;
}

ValueMetadata *type metadata accessor for OAuthURLRoute()
{
  return &type metadata for OAuthURLRoute;
}

void sub_1000B1F34(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t countAndFlagsBits;
  uint64_t v13;
  Swift::String v14;
  void *object;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  void *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  int *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  if (qword_100156CB0 != -1)
    swift_once(&qword_100156CB0, sub_10008BE28);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_100007808(v4, (uint64_t)qword_10015D2C8);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = swift_slowAlloc(64, -1);
    v32 = v9;
    *(_DWORD *)v8 = 136315394;
    v31 = sub_1000DA1F0(0xD000000000000012, 0x8000000100125730, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2080;
    v31 = sub_1000DA1F0(0xD000000000000026, 0x800000010011FD10, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v8 + 14, v8 + 22);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Start (%s.%s)…", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v9, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }

  countAndFlagsBits = URL.scheme.getter(v10);
  if (v11)
  {
    v13 = v11;
    v14 = String.lowercased()();
    countAndFlagsBits = v14._countAndFlagsBits;
    object = v14._object;
    swift_bridgeObjectRelease(v13);
  }
  else
  {
    object = 0;
  }
  if (qword_100156D98 != -1)
    swift_once(&qword_100156D98, sub_100109814);
  v16 = objc_msgSend((id)qword_10015D468, "bundleIdentifier");
  if (!v16)
  {
    if (!object)
      goto LABEL_22;
    goto LABEL_17;
  }
  v17 = v16;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  v19 = v18;

  v20 = String.lowercased()();
  v21 = v20._object;
  swift_bridgeObjectRelease(v19);
  if (!object)
  {
    if (!v20._object)
      goto LABEL_22;
    goto LABEL_19;
  }
  if (!v20._object)
  {
LABEL_17:
    v21 = object;
LABEL_19:
    swift_bridgeObjectRelease(v21);
    goto LABEL_20;
  }
  if (countAndFlagsBits == v20._countAndFlagsBits && object == v20._object)
  {
    swift_bridgeObjectRelease(object);
    swift_bridgeObjectRelease(v20._object);
LABEL_22:
    v24 = type metadata accessor for URL(0);
    v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16);
    v25(a2, a1, v24);
    v26 = (int *)type metadata accessor for SettingsURLDestination(0);
    v27 = a2 + v26[5];
    v25(v27, a1, v24);
    v28 = type metadata accessor for SettingsURLDestination.Action(0);
    swift_storeEnumTagMultiPayload(v27, v28, 4);
    v29 = (_QWORD *)(a2 + v26[7]);
    *(_QWORD *)(a2 + v26[6]) = _swiftEmptyArrayStorage;
    *v29 = 0;
    v29[1] = 0;
    v30 = sub_100004FC8(&qword_1001570F8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(a2, 0, 1, v30);
    goto LABEL_23;
  }
  v23 = _stringCompareWithSmolCheck(_:_:expecting:)(countAndFlagsBits, object, v20._countAndFlagsBits, v20._object, 0);
  swift_bridgeObjectRelease(object);
  swift_bridgeObjectRelease(v20._object);
  if ((v23 & 1) != 0)
    goto LABEL_22;
LABEL_20:
  v22 = sub_100004FC8(&qword_1001570F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(a2, 1, 1, v22);
LABEL_23:
  sub_1000B2438();
}

uint64_t sub_1000B22E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t countAndFlagsBits;
  uint64_t v3;
  Swift::String v4;
  void *object;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  void *v11;
  char v12;

  countAndFlagsBits = URL.scheme.getter(a1);
  if (v1)
  {
    v3 = v1;
    v4 = String.lowercased()();
    countAndFlagsBits = v4._countAndFlagsBits;
    object = v4._object;
    swift_bridgeObjectRelease(v3);
  }
  else
  {
    object = 0;
  }
  if (qword_100156D98 != -1)
    swift_once(&qword_100156D98, sub_100109814);
  v6 = objc_msgSend((id)qword_10015D468, "bundleIdentifier");
  if (v6)
  {
    v7 = v6;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    v9 = v8;

    v10 = String.lowercased()();
    v11 = v10._object;
    swift_bridgeObjectRelease(v9);
    if (object)
    {
      if (v10._object)
      {
        if (countAndFlagsBits == v10._countAndFlagsBits && object == v10._object)
        {
          swift_bridgeObjectRelease(object);
          v12 = 1;
        }
        else
        {
          v12 = _stringCompareWithSmolCheck(_:_:expecting:)(countAndFlagsBits, object, v10._countAndFlagsBits, v10._object, 0);
          swift_bridgeObjectRelease(object);
        }
        goto LABEL_18;
      }
      goto LABEL_13;
    }
    if (v10._object)
    {
      v12 = 0;
      goto LABEL_18;
    }
  }
  else if (object)
  {
LABEL_13:
    v12 = 0;
    v11 = object;
LABEL_18:
    swift_bridgeObjectRelease(v11);
    return v12 & 1;
  }
  v12 = 1;
  return v12 & 1;
}

void sub_1000B2438()
{
  uint64_t v0;
  uint64_t v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *oslog;
  uint64_t v6;
  uint64_t v7;

  if (qword_100156CB0 != -1)
    swift_once(&qword_100156CB0, sub_10008BE28);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_100007808(v0, (uint64_t)qword_10015D2C8);
  oslog = Logger.logObject.getter(v1);
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v2))
  {
    v3 = swift_slowAlloc(22, -1);
    v4 = swift_slowAlloc(64, -1);
    v7 = v4;
    *(_DWORD *)v3 = 136315394;
    v6 = sub_1000DA1F0(0xD000000000000012, 0x8000000100125730, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v6, &v7, v3 + 4, v3 + 12);
    *(_WORD *)(v3 + 12) = 2080;
    v6 = sub_1000DA1F0(0xD000000000000026, 0x800000010011FD10, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v6, &v7, v3 + 14, v3 + 22);
    _os_log_impl((void *)&_mh_execute_header, oslog, v2, "…Complete (%s.%s)", (uint8_t *)v3, 0x16u);
    swift_arrayDestroy(v4, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v4, -1, -1);
    swift_slowDealloc(v3, -1, -1);

  }
  else
  {

  }
}

id sub_1000B2604@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  void **v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void **v26;
  char v27;
  char v28;
  id result;
  void *v30;
  unsigned int v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  int v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v3 = v2;
  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PrimarySettingsListItemViewType(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = v2 + OBJC_IVAR____TtC11SettingsApp37StaticPrimarySettingsListItemProvider_id;
  v13 = sub_10009CE88();
  v14 = (void **)sub_100007C2C(a1, a1[3]);
  v15 = sub_10003AF58(0, v13, *v14);
  swift_bridgeObjectRelease(v13);
  if ((v15 & 1) != 0)
  {
    if (qword_100156CC0 != -1)
      swift_once(&qword_100156CC0, sub_10008BE7C);
    v16 = type metadata accessor for Logger(0);
    sub_100007808(v16, (uint64_t)qword_10015D2F8);
    v17 = swift_retain_n(v3, 2);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = swift_slowAlloc(32, -1);
      v62 = v21;
      *(_DWORD *)v20 = 136446210;
      sub_1000A03B0();
      v23 = v22;
      v61 = sub_1000DA1F0(v24, v22, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62, v20 + 4, v20 + 12);
      swift_release_n(v3, 2);
      swift_bridgeObjectRelease(v23);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Not including %{public}s due to being hidden.", v20, 0xCu);
      swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);

    }
    else
    {

      swift_release_n(v3, 2);
    }
    v33 = type metadata accessor for PrimarySettingsListItemModel(0);
    return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(a2, 1, 1, v33);
  }
  else
  {
    v25 = sub_10009CE88();
    v26 = (void **)sub_100007C2C(a1, a1[3]);
    v27 = sub_10003AF58(1, v25, *v26);
    swift_bridgeObjectRelease(v25);
    swift_storeEnumTagMultiPayload(v8, v6, 33);
    sub_1000A103C(v12, (uint64_t)v8);
    LOBYTE(v25) = v28;
    sub_100013014((uint64_t)v8);
    if ((v25 & 1) != 0)
    {
      result = objc_msgSend((id)objc_opt_self(MCProfileConnection), "sharedConnection");
      if (!result)
      {
        __break(1u);
        return result;
      }
      v30 = result;
      v31 = objc_msgSend(result, "isPasscodeSet");

      if (v31)
        v32 = 0;
      else
        v32 = 2;
    }
    else
    {
      v32 = 2;
    }
    sub_10009C7A4();
    if (v36 >= 3u)
    {
      sub_100012DC4(v12, (uint64_t)v11);
      sub_10009BD7C();
      v51 = v50;
      v53 = v52;
      v55 = v54;
      v57 = v56;
      v58 = (int *)type metadata accessor for PrimarySettingsListImagelessLinkModel(0);
      v46 = v58[7];
      v11[v58[5]] = v27 & 1;
      v59 = &v11[v58[6]];
      *(_QWORD *)v59 = v51;
      *((_QWORD *)v59 + 1) = v53;
      v59[16] = v55 & 1;
      *((_QWORD *)v59 + 3) = v57;
      v49 = 4;
    }
    else
    {
      sub_10000BB54(v34, v35, v36);
      sub_100012DC4(v12, (uint64_t)v11);
      sub_10009BD7C();
      v38 = v37;
      v40 = v39;
      v42 = v41;
      v44 = v43;
      v45 = (int *)type metadata accessor for PrimarySettingsListLinkModel(0);
      v46 = v45[8];
      v47 = &v11[v45[7]];
      v11[v45[5]] = v27 & 1;
      v48 = &v11[v45[6]];
      *(_QWORD *)v48 = v38;
      *((_QWORD *)v48 + 1) = v40;
      v48[16] = v42 & 1;
      *((_QWORD *)v48 + 3) = v44;
      *(_QWORD *)v47 = 0;
      *((_QWORD *)v47 + 1) = 0;
      v47[16] = -1;
      v49 = 6;
    }
    v11[v46] = v32;
    swift_storeEnumTagMultiPayload(v11, v9, v49);
    sub_100012DC4(v12, a2);
    v60 = type metadata accessor for PrimarySettingsListItemModel(0);
    sub_1000B2B88((uint64_t)v11, a2 + *(int *)(v60 + 20));
    return (id)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 56))(a2, 0, 1, v60);
  }
}

uint64_t sub_1000B2A70()
{
  uint64_t v0;

  sub_100013014(v0 + OBJC_IVAR____TtC11SettingsApp37StaticPrimarySettingsListItemProvider_id);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000B2AA0()
{
  return type metadata accessor for StaticPrimarySettingsListItemProvider(0);
}

uint64_t type metadata accessor for StaticPrimarySettingsListItemProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_10015AF58;
  if (!qword_10015AF58)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for StaticPrimarySettingsListItemProvider);
  return result;
}

uint64_t sub_1000B2AE4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for PrimarySettingsListItemIdentifier(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 1, &v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1000B2B50@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_100012DC4(*v1 + OBJC_IVAR____TtC11SettingsApp37StaticPrimarySettingsListItemProvider_id, a1);
}

id sub_1000B2B68@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000B2604(a1, a2);
}

uint64_t sub_1000B2B88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PrimarySettingsListItemViewType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1000B2BCC()
{
  void *v0;
  void *v1;
  id v2;
  id v3;

  v0 = (void *)kISImageDescriptorTableUIName;
  v1 = (void *)objc_opt_self(ISImageDescriptor);
  v2 = v0;
  v3 = objc_msgSend(v1, "imageDescriptorNamed:", v2);

  qword_10015D3F8 = (uint64_t)v3;
}

BOOL sub_1000B2C38(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  _BOOL4 v11;

  sub_1000A103C(a1, a2);
  if ((v4 & 1) == 0)
    return 0;
  v5 = type metadata accessor for PrimarySettingsListBadgedImagelessLinkModel(0);
  if (*(unsigned __int8 *)(a1 + *(int *)(v5 + 20)) != *(unsigned __int8 *)(a2 + *(int *)(v5 + 20)))
    return 0;
  v6 = v5;
  v7 = *(int *)(v5 + 24);
  if ((static Text.== infix(_:_:)(*(_QWORD *)(a1 + v7), *(_QWORD *)(a1 + v7 + 8), *(unsigned __int8 *)(a1 + v7 + 16), *(_QWORD *)(a1 + v7 + 24), *(_QWORD *)(a2 + v7), *(_QWORD *)(a2 + v7 + 8), *(unsigned __int8 *)(a2 + v7 + 16), *(_QWORD *)(a2 + v7 + 24)) & 1) == 0|| *(_QWORD *)(a1 + *(int *)(v6 + 28)) != *(_QWORD *)(a2 + *(int *)(v6 + 28)))
  {
    return 0;
  }
  v8 = *(int *)(v6 + 32);
  v9 = *(unsigned __int8 *)(a1 + v8);
  v10 = *(unsigned __int8 *)(a2 + v8);
  if (v9 != 2)
  {
    v11 = (v9 & 1) == 0;
    return v10 != 2 && ((v11 ^ v10) & 1) != 0;
  }
  return v10 == 2;
}

uint64_t type metadata accessor for PrimarySettingsListBadgedImagelessLinkModel(uint64_t a1)
{
  uint64_t result;

  result = qword_10015B040;
  if (!qword_10015B040)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PrimarySettingsListBadgedImagelessLinkModel);
  return result;
}

_QWORD *sub_1000B2D50(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  id v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(a2, v7))
    {
      case 0u:
        v8 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
        v9 = a1;
        v10 = v7;
        v11 = 0;
        goto LABEL_14;
      case 1u:
        v13 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
        v9 = a1;
        v10 = v7;
        v11 = 1;
        goto LABEL_14;
      case 2u:
        v14 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
        v15 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v16 = (_QWORD *)((char *)a1 + v15);
        v17 = (_QWORD *)((char *)a2 + v15);
        v18 = v17[1];
        *v16 = *v17;
        v16[1] = v18;
        swift_bridgeObjectRetain(v18);
        v9 = a1;
        v10 = v7;
        v11 = 2;
        goto LABEL_14;
      case 3u:
        v19 = a2[1];
        *a1 = *a2;
        a1[1] = v19;
        v20 = a2[3];
        a1[2] = a2[2];
        a1[3] = v20;
        v21 = a2[5];
        a1[4] = a2[4];
        a1[5] = v21;
        v22 = a2[7];
        a1[6] = a2[6];
        a1[7] = v22;
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v22);
        v9 = a1;
        v10 = v7;
        v11 = 3;
        goto LABEL_14;
      case 4u:
        v23 = a2[1];
        *a1 = *a2;
        a1[1] = v23;
        v24 = a2[3];
        a1[2] = a2[2];
        a1[3] = v24;
        v25 = a2[5];
        a1[4] = a2[4];
        a1[5] = v25;
        a1[6] = a2[6];
        swift_bridgeObjectRetain(v23);
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v25);
        v9 = a1;
        v10 = v7;
        v11 = 4;
        goto LABEL_14;
      case 5u:
        v26 = a2[1];
        *a1 = *a2;
        a1[1] = v26;
        v27 = a2[3];
        a1[2] = a2[2];
        a1[3] = v27;
        v29 = (void *)a2[4];
        v28 = a2[5];
        a1[4] = v29;
        a1[5] = v28;
        v30 = a2[9];
        swift_bridgeObjectRetain(v26);
        swift_bridgeObjectRetain(v27);
        v31 = v29;
        swift_bridgeObjectRetain(v28);
        if (v30)
        {
          a1[9] = v30;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v30 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v30);
        }
        else
        {
          v32 = *((_OWORD *)a2 + 4);
          *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
          *((_OWORD *)a1 + 4) = v32;
        }
        v9 = a1;
        v10 = v7;
        v11 = 5;
LABEL_14:
        swift_storeEnumTagMultiPayload(v9, v10, v11);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
        break;
    }
    v33 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    v34 = (char *)a1 + v33;
    v35 = (char *)a2 + v33;
    v36 = *(_QWORD *)((char *)a2 + v33);
    v37 = *(_QWORD *)((char *)a2 + v33 + 8);
    v38 = *((_BYTE *)a2 + v33 + 16);
    sub_10000BAD4(v36, v37, v38);
    *(_QWORD *)v34 = v36;
    *((_QWORD *)v34 + 1) = v37;
    v34[16] = v38;
    v39 = *((_QWORD *)v35 + 3);
    *((_QWORD *)v34 + 3) = v39;
    v40 = a3[8];
    *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
    *((_BYTE *)a1 + v40) = *((_BYTE *)a2 + v40);
    swift_bridgeObjectRetain(v39);
  }
  return a1;
}

uint64_t sub_1000B3028(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(a1, v4))
  {
    case 0u:
    case 1u:
      v5 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
      break;
    case 2u:
      v6 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
      v7 = sub_100004FC8(&qword_10015C420);
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v7 + 48) + 8));
      break;
    case 3u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
      break;
    case 4u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      break;
    case 5u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));

      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      if (*(_QWORD *)(a1 + 72))
        sub_100005474((_QWORD *)(a1 + 48));
      break;
    default:
      break;
  }
  v8 = a1 + *(int *)(a2 + 24);
  sub_100007618(*(_QWORD *)v8, *(_QWORD *)(v8 + 8), *(_BYTE *)(v8 + 16));
  return swift_bridgeObjectRelease(*(_QWORD *)(v8 + 24));
}

_QWORD *sub_1000B3164(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;

  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(a2, v6))
  {
    case 0u:
      v7 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 0;
      goto LABEL_12;
    case 1u:
      v11 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      v8 = a1;
      v9 = v6;
      v10 = 1;
      goto LABEL_12;
    case 2u:
      v12 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
      v13 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
      v14 = (_QWORD *)((char *)a1 + v13);
      v15 = (_QWORD *)((char *)a2 + v13);
      v16 = v15[1];
      *v14 = *v15;
      v14[1] = v16;
      swift_bridgeObjectRetain(v16);
      v8 = a1;
      v9 = v6;
      v10 = 2;
      goto LABEL_12;
    case 3u:
      v17 = a2[1];
      *a1 = *a2;
      a1[1] = v17;
      v18 = a2[3];
      a1[2] = a2[2];
      a1[3] = v18;
      v19 = a2[5];
      a1[4] = a2[4];
      a1[5] = v19;
      v20 = a2[7];
      a1[6] = a2[6];
      a1[7] = v20;
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v20);
      v8 = a1;
      v9 = v6;
      v10 = 3;
      goto LABEL_12;
    case 4u:
      v21 = a2[1];
      *a1 = *a2;
      a1[1] = v21;
      v22 = a2[3];
      a1[2] = a2[2];
      a1[3] = v22;
      v23 = a2[5];
      a1[4] = a2[4];
      a1[5] = v23;
      a1[6] = a2[6];
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v23);
      v8 = a1;
      v9 = v6;
      v10 = 4;
      goto LABEL_12;
    case 5u:
      v24 = a2[1];
      *a1 = *a2;
      a1[1] = v24;
      v25 = a2[3];
      a1[2] = a2[2];
      a1[3] = v25;
      v27 = (void *)a2[4];
      v26 = a2[5];
      a1[4] = v27;
      a1[5] = v26;
      v28 = a2[9];
      swift_bridgeObjectRetain(v24);
      swift_bridgeObjectRetain(v25);
      v29 = v27;
      swift_bridgeObjectRetain(v26);
      if (v28)
      {
        a1[9] = v28;
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v28 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v28);
      }
      else
      {
        v30 = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 4) = v30;
      }
      v8 = a1;
      v9 = v6;
      v10 = 5;
LABEL_12:
      swift_storeEnumTagMultiPayload(v8, v9, v10);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      break;
  }
  v31 = a3[6];
  *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = *(_QWORD *)((char *)a2 + v31);
  v35 = *(_QWORD *)((char *)a2 + v31 + 8);
  v36 = *((_BYTE *)a2 + v31 + 16);
  sub_10000BAD4(v34, v35, v36);
  *(_QWORD *)v32 = v34;
  *((_QWORD *)v32 + 1) = v35;
  v32[16] = v36;
  v37 = *((_QWORD *)v33 + 3);
  *((_QWORD *)v32 + 3) = v37;
  v38 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *((_BYTE *)a1 + v38) = *((_BYTE *)a2 + v38);
  swift_bridgeObjectRetain(v37);
  return a1;
}

_QWORD *sub_1000B3410(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;

  if (a1 != a2)
  {
    sub_100013014((uint64_t)a1);
    v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(a2, v6))
    {
      case 0u:
        v7 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
        v8 = a1;
        v9 = v6;
        v10 = 0;
        goto LABEL_13;
      case 1u:
        v11 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
        v8 = a1;
        v9 = v6;
        v10 = 1;
        goto LABEL_13;
      case 2u:
        v12 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
        v13 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v14 = (_QWORD *)((char *)a1 + v13);
        v15 = (_QWORD *)((char *)a2 + v13);
        *v14 = *v15;
        v16 = v15[1];
        v14[1] = v16;
        swift_bridgeObjectRetain(v16);
        v8 = a1;
        v9 = v6;
        v10 = 2;
        goto LABEL_13;
      case 3u:
        *a1 = *a2;
        v17 = a2[1];
        a1[1] = v17;
        a1[2] = a2[2];
        v18 = a2[3];
        a1[3] = v18;
        a1[4] = a2[4];
        v19 = a2[5];
        a1[5] = v19;
        a1[6] = a2[6];
        v20 = a2[7];
        a1[7] = v20;
        swift_bridgeObjectRetain(v17);
        swift_bridgeObjectRetain(v18);
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        v8 = a1;
        v9 = v6;
        v10 = 3;
        goto LABEL_13;
      case 4u:
        *a1 = *a2;
        v21 = a2[1];
        a1[1] = v21;
        a1[2] = a2[2];
        v22 = a2[3];
        a1[3] = v22;
        a1[4] = a2[4];
        v23 = a2[5];
        a1[5] = v23;
        a1[6] = a2[6];
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v22);
        swift_bridgeObjectRetain(v23);
        v8 = a1;
        v9 = v6;
        v10 = 4;
        goto LABEL_13;
      case 5u:
        *a1 = *a2;
        v24 = a2[1];
        a1[1] = v24;
        a1[2] = a2[2];
        v25 = a2[3];
        a1[3] = v25;
        v26 = (void *)a2[4];
        a1[4] = v26;
        v27 = a2[5];
        a1[5] = v27;
        v28 = a2[9];
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v25);
        v29 = v26;
        swift_bridgeObjectRetain(v27);
        if (v28)
        {
          a1[9] = v28;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v28 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v28);
        }
        else
        {
          v30 = *((_OWORD *)a2 + 4);
          *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
          *((_OWORD *)a1 + 4) = v30;
        }
        v8 = a1;
        v9 = v6;
        v10 = 5;
LABEL_13:
        swift_storeEnumTagMultiPayload(v8, v9, v10);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
        break;
    }
  }
  *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
  v31 = a3[6];
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = *(_QWORD *)((char *)a2 + v31);
  v35 = *(_QWORD *)((char *)a2 + v31 + 8);
  v36 = *((_BYTE *)a2 + v31 + 16);
  sub_10000BAD4(v34, v35, v36);
  v37 = *(_QWORD *)v32;
  v38 = *((_QWORD *)v32 + 1);
  v39 = v32[16];
  *(_QWORD *)v32 = v34;
  *((_QWORD *)v32 + 1) = v35;
  v32[16] = v36;
  sub_100007618(v37, v38, v39);
  v40 = *((_QWORD *)v33 + 3);
  v41 = *((_QWORD *)v32 + 3);
  *((_QWORD *)v32 + 3) = v40;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRelease(v41);
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  return a1;
}

char *sub_1000B3744(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;

  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
  if (EnumCaseMultiPayload == 2)
  {
    v9 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
    v10 = sub_100004FC8(&qword_10015C420);
    *(_OWORD *)&a1[*(int *)(v10 + 48)] = *(_OWORD *)&a2[*(int *)(v10 + 48)];
    swift_storeEnumTagMultiPayload(a1, v6, 2);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v11 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    v8 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload(a1, v6, 0);
  }
  v12 = a3[6];
  a1[a3[5]] = a2[a3[5]];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = *((_OWORD *)v14 + 1);
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *((_OWORD *)v13 + 1) = v15;
  v16 = a3[8];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  a1[v16] = a2[v16];
  return a1;
}

char *sub_1000B3898(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;

  if (a1 != a2)
  {
    sub_100013014((uint64_t)a1);
    v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
    if (EnumCaseMultiPayload == 2)
    {
      v9 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      v10 = sub_100004FC8(&qword_10015C420);
      *(_OWORD *)&a1[*(int *)(v10 + 48)] = *(_OWORD *)&a2[*(int *)(v10 + 48)];
      swift_storeEnumTagMultiPayload(a1, v6, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v11 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      v8 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload(a1, v6, 0);
    }
  }
  v12 = a3[6];
  a1[a3[5]] = a2[a3[5]];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = a2[v12 + 16];
  v16 = *(_QWORD *)&a1[v12];
  v17 = *(_QWORD *)&a1[v12 + 8];
  v18 = a1[v12 + 16];
  *(_OWORD *)v13 = *(_OWORD *)&a2[v12];
  v13[16] = v15;
  sub_100007618(v16, v17, v18);
  v19 = *((_QWORD *)v13 + 3);
  *((_QWORD *)v13 + 3) = *((_QWORD *)v14 + 3);
  swift_bridgeObjectRelease(v19);
  v20 = a3[8];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  a1[v20] = a2[v20];
  return a1;
}

uint64_t sub_1000B3A28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000B3A34);
}

uint64_t sub_1000B3A34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 24);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1000B3AB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000B3AC0);
}

uint64_t sub_1000B3AC0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 24) = (a2 - 1);
  return result;
}

uint64_t sub_1000B3B3C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  result = type metadata accessor for PrimarySettingsListItemIdentifier(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100119350;
    v4[2] = &unk_100119368;
    v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[4] = &unk_100119380;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
    return 0;
  }
  return result;
}

BOOL sub_1000B3BD4(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  _BOOL4 v15;

  sub_1000A103C(a1, a2);
  if ((v4 & 1) == 0)
    return 0;
  v5 = type metadata accessor for PrimarySettingsListBadgedLinkModel(0);
  if (*(unsigned __int8 *)(a1 + *(int *)(v5 + 20)) != *(unsigned __int8 *)(a2 + *(int *)(v5 + 20)))
    return 0;
  v6 = (int *)v5;
  v7 = *(int *)(v5 + 24);
  if ((static Text.== infix(_:_:)(*(_QWORD *)(a1 + v7), *(_QWORD *)(a1 + v7 + 8), *(unsigned __int8 *)(a1 + v7 + 16), *(_QWORD *)(a1 + v7 + 24), *(_QWORD *)(a2 + v7), *(_QWORD *)(a2 + v7 + 8), *(unsigned __int8 *)(a2 + v7 + 16), *(_QWORD *)(a2 + v7 + 24)) & 1) == 0)return 0;
  v8 = v6[7];
  v9 = *(unsigned __int8 *)(a1 + v8 + 16);
  v10 = *(unsigned __int8 *)(a2 + v8 + 16);
  if ((_DWORD)v9 != 255)
  {
    if (v10 != 255)
      __asm { BR              X11 }
    return 0;
  }
  if (v10 != 255 || *(_QWORD *)(a1 + v6[8]) != *(_QWORD *)(a2 + v6[8]))
    return 0;
  v11 = v6[9];
  v12 = *(unsigned __int8 *)(a1 + v11);
  v13 = *(unsigned __int8 *)(a2 + v11);
  if (v12 != 2)
  {
    v15 = (v12 & 1) == 0;
    return v13 != 2 && ((v15 ^ v13) & 1) != 0;
  }
  return v13 == 2;
}

uint64_t type metadata accessor for PrimarySettingsListBadgedLinkModel(uint64_t a1)
{
  uint64_t result;

  result = qword_10015B0E0;
  if (!qword_10015B0E0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PrimarySettingsListBadgedLinkModel);
  return result;
}

_QWORD *sub_1000B3E04(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  id v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(a2, v7))
    {
      case 0u:
        v8 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
        v9 = a1;
        v10 = v7;
        v11 = 0;
        goto LABEL_14;
      case 1u:
        v13 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
        v9 = a1;
        v10 = v7;
        v11 = 1;
        goto LABEL_14;
      case 2u:
        v14 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
        v15 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v16 = (_QWORD *)((char *)a1 + v15);
        v17 = (_QWORD *)((char *)a2 + v15);
        v18 = v17[1];
        *v16 = *v17;
        v16[1] = v18;
        swift_bridgeObjectRetain(v18);
        v9 = a1;
        v10 = v7;
        v11 = 2;
        goto LABEL_14;
      case 3u:
        v19 = a2[1];
        *a1 = *a2;
        a1[1] = v19;
        v20 = a2[3];
        a1[2] = a2[2];
        a1[3] = v20;
        v21 = a2[5];
        a1[4] = a2[4];
        a1[5] = v21;
        v22 = a2[7];
        a1[6] = a2[6];
        a1[7] = v22;
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v22);
        v9 = a1;
        v10 = v7;
        v11 = 3;
        goto LABEL_14;
      case 4u:
        v23 = a2[1];
        *a1 = *a2;
        a1[1] = v23;
        v24 = a2[3];
        a1[2] = a2[2];
        a1[3] = v24;
        v25 = a2[5];
        a1[4] = a2[4];
        a1[5] = v25;
        a1[6] = a2[6];
        swift_bridgeObjectRetain(v23);
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v25);
        v9 = a1;
        v10 = v7;
        v11 = 4;
        goto LABEL_14;
      case 5u:
        v26 = a2[1];
        *a1 = *a2;
        a1[1] = v26;
        v27 = a2[3];
        a1[2] = a2[2];
        a1[3] = v27;
        v29 = (void *)a2[4];
        v28 = a2[5];
        a1[4] = v29;
        a1[5] = v28;
        v30 = a2[9];
        swift_bridgeObjectRetain(v26);
        swift_bridgeObjectRetain(v27);
        v31 = v29;
        swift_bridgeObjectRetain(v28);
        if (v30)
        {
          a1[9] = v30;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v30 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v30);
        }
        else
        {
          v32 = *((_OWORD *)a2 + 4);
          *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
          *((_OWORD *)a1 + 4) = v32;
        }
        v9 = a1;
        v10 = v7;
        v11 = 5;
LABEL_14:
        swift_storeEnumTagMultiPayload(v9, v10, v11);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
        break;
    }
    v33 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    v34 = (char *)a1 + v33;
    v35 = (char *)a2 + v33;
    v36 = *(_QWORD *)((char *)a2 + v33);
    v37 = *(_QWORD *)((char *)a2 + v33 + 8);
    v38 = *((_BYTE *)a2 + v33 + 16);
    sub_10000BAD4(v36, v37, v38);
    *(_QWORD *)v34 = v36;
    *((_QWORD *)v34 + 1) = v37;
    v34[16] = v38;
    v39 = *((_QWORD *)v35 + 3);
    *((_QWORD *)v34 + 3) = v39;
    v40 = a3[7];
    v41 = (char *)a1 + v40;
    v42 = (char *)a2 + v40;
    v43 = *((unsigned __int8 *)a2 + v40 + 16);
    swift_bridgeObjectRetain(v39);
    if (v43 == 255)
    {
      *(_OWORD *)v41 = *(_OWORD *)v42;
      v41[16] = v42[16];
    }
    else
    {
      v44 = *(_QWORD *)v42;
      v45 = *((_QWORD *)v42 + 1);
      sub_10000BB2C(v44, v45, v43);
      *(_QWORD *)v41 = v44;
      *((_QWORD *)v41 + 1) = v45;
      v41[16] = v43;
    }
    v46 = a3[9];
    *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
    *((_BYTE *)a1 + v46) = *((_BYTE *)a2 + v46);
  }
  return a1;
}

uint64_t sub_1000B4124(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  int v11;

  v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(a1, v4))
  {
    case 0u:
    case 1u:
      v5 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
      break;
    case 2u:
      v6 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
      v7 = sub_100004FC8(&qword_10015C420);
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v7 + 48) + 8));
      break;
    case 3u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
      break;
    case 4u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      break;
    case 5u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));

      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      if (*(_QWORD *)(a1 + 72))
        sub_100005474((_QWORD *)(a1 + 48));
      break;
    default:
      break;
  }
  v8 = a1 + *(int *)(a2 + 24);
  sub_100007618(*(_QWORD *)v8, *(_QWORD *)(v8 + 8), *(_BYTE *)(v8 + 16));
  result = swift_bridgeObjectRelease(*(_QWORD *)(v8 + 24));
  v10 = a1 + *(int *)(a2 + 28);
  v11 = *(unsigned __int8 *)(v10 + 16);
  if (v11 != 255)
    return sub_10000BB54(*(_QWORD *)v10, *(_QWORD *)(v10 + 8), v11);
  return result;
}

_QWORD *sub_1000B4294(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(a2, v6))
  {
    case 0u:
      v7 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 0;
      goto LABEL_12;
    case 1u:
      v11 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      v8 = a1;
      v9 = v6;
      v10 = 1;
      goto LABEL_12;
    case 2u:
      v12 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
      v13 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
      v14 = (_QWORD *)((char *)a1 + v13);
      v15 = (_QWORD *)((char *)a2 + v13);
      v16 = v15[1];
      *v14 = *v15;
      v14[1] = v16;
      swift_bridgeObjectRetain(v16);
      v8 = a1;
      v9 = v6;
      v10 = 2;
      goto LABEL_12;
    case 3u:
      v17 = a2[1];
      *a1 = *a2;
      a1[1] = v17;
      v18 = a2[3];
      a1[2] = a2[2];
      a1[3] = v18;
      v19 = a2[5];
      a1[4] = a2[4];
      a1[5] = v19;
      v20 = a2[7];
      a1[6] = a2[6];
      a1[7] = v20;
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v20);
      v8 = a1;
      v9 = v6;
      v10 = 3;
      goto LABEL_12;
    case 4u:
      v21 = a2[1];
      *a1 = *a2;
      a1[1] = v21;
      v22 = a2[3];
      a1[2] = a2[2];
      a1[3] = v22;
      v23 = a2[5];
      a1[4] = a2[4];
      a1[5] = v23;
      a1[6] = a2[6];
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v23);
      v8 = a1;
      v9 = v6;
      v10 = 4;
      goto LABEL_12;
    case 5u:
      v24 = a2[1];
      *a1 = *a2;
      a1[1] = v24;
      v25 = a2[3];
      a1[2] = a2[2];
      a1[3] = v25;
      v27 = (void *)a2[4];
      v26 = a2[5];
      a1[4] = v27;
      a1[5] = v26;
      v28 = a2[9];
      swift_bridgeObjectRetain(v24);
      swift_bridgeObjectRetain(v25);
      v29 = v27;
      swift_bridgeObjectRetain(v26);
      if (v28)
      {
        a1[9] = v28;
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v28 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v28);
      }
      else
      {
        v30 = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 4) = v30;
      }
      v8 = a1;
      v9 = v6;
      v10 = 5;
LABEL_12:
      swift_storeEnumTagMultiPayload(v8, v9, v10);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      break;
  }
  v31 = a3[6];
  *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = *(_QWORD *)((char *)a2 + v31);
  v35 = *(_QWORD *)((char *)a2 + v31 + 8);
  v36 = *((_BYTE *)a2 + v31 + 16);
  sub_10000BAD4(v34, v35, v36);
  *(_QWORD *)v32 = v34;
  *((_QWORD *)v32 + 1) = v35;
  v32[16] = v36;
  v37 = *((_QWORD *)v33 + 3);
  *((_QWORD *)v32 + 3) = v37;
  v38 = a3[7];
  v39 = (char *)a1 + v38;
  v40 = (char *)a2 + v38;
  v41 = *((unsigned __int8 *)a2 + v38 + 16);
  swift_bridgeObjectRetain(v37);
  if (v41 == 255)
  {
    *(_OWORD *)v39 = *(_OWORD *)v40;
    v39[16] = v40[16];
  }
  else
  {
    v42 = *(_QWORD *)v40;
    v43 = *((_QWORD *)v40 + 1);
    sub_10000BB2C(v42, v43, v41);
    *(_QWORD *)v39 = v42;
    *((_QWORD *)v39 + 1) = v43;
    v39[16] = v41;
  }
  v44 = a3[9];
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  *((_BYTE *)a1 + v44) = *((_BYTE *)a2 + v44);
  return a1;
}

_QWORD *sub_1000B4588(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  __int128 v54;

  if (a1 != a2)
  {
    sub_100013014((uint64_t)a1);
    v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(a2, v6))
    {
      case 0u:
        v7 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
        v8 = a1;
        v9 = v6;
        v10 = 0;
        goto LABEL_13;
      case 1u:
        v11 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
        v8 = a1;
        v9 = v6;
        v10 = 1;
        goto LABEL_13;
      case 2u:
        v12 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
        v13 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v14 = (_QWORD *)((char *)a1 + v13);
        v15 = (_QWORD *)((char *)a2 + v13);
        *v14 = *v15;
        v16 = v15[1];
        v14[1] = v16;
        swift_bridgeObjectRetain(v16);
        v8 = a1;
        v9 = v6;
        v10 = 2;
        goto LABEL_13;
      case 3u:
        *a1 = *a2;
        v17 = a2[1];
        a1[1] = v17;
        a1[2] = a2[2];
        v18 = a2[3];
        a1[3] = v18;
        a1[4] = a2[4];
        v19 = a2[5];
        a1[5] = v19;
        a1[6] = a2[6];
        v20 = a2[7];
        a1[7] = v20;
        swift_bridgeObjectRetain(v17);
        swift_bridgeObjectRetain(v18);
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        v8 = a1;
        v9 = v6;
        v10 = 3;
        goto LABEL_13;
      case 4u:
        *a1 = *a2;
        v21 = a2[1];
        a1[1] = v21;
        a1[2] = a2[2];
        v22 = a2[3];
        a1[3] = v22;
        a1[4] = a2[4];
        v23 = a2[5];
        a1[5] = v23;
        a1[6] = a2[6];
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v22);
        swift_bridgeObjectRetain(v23);
        v8 = a1;
        v9 = v6;
        v10 = 4;
        goto LABEL_13;
      case 5u:
        *a1 = *a2;
        v24 = a2[1];
        a1[1] = v24;
        a1[2] = a2[2];
        v25 = a2[3];
        a1[3] = v25;
        v26 = (void *)a2[4];
        a1[4] = v26;
        v27 = a2[5];
        a1[5] = v27;
        v28 = a2[9];
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v25);
        v29 = v26;
        swift_bridgeObjectRetain(v27);
        if (v28)
        {
          a1[9] = v28;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v28 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v28);
        }
        else
        {
          v30 = *((_OWORD *)a2 + 4);
          *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
          *((_OWORD *)a1 + 4) = v30;
        }
        v8 = a1;
        v9 = v6;
        v10 = 5;
LABEL_13:
        swift_storeEnumTagMultiPayload(v8, v9, v10);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
        break;
    }
  }
  *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
  v31 = a3[6];
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = *(_QWORD *)((char *)a2 + v31);
  v35 = *(_QWORD *)((char *)a2 + v31 + 8);
  v36 = *((_BYTE *)a2 + v31 + 16);
  sub_10000BAD4(v34, v35, v36);
  v37 = *(_QWORD *)v32;
  v38 = *((_QWORD *)v32 + 1);
  v39 = v32[16];
  *(_QWORD *)v32 = v34;
  *((_QWORD *)v32 + 1) = v35;
  v32[16] = v36;
  sub_100007618(v37, v38, v39);
  v40 = *((_QWORD *)v33 + 3);
  v41 = *((_QWORD *)v32 + 3);
  *((_QWORD *)v32 + 3) = v40;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRelease(v41);
  v42 = a3[7];
  v43 = (uint64_t)a1 + v42;
  v44 = (char *)a2 + v42;
  v45 = *((unsigned __int8 *)a2 + v42 + 16);
  if (*((unsigned __int8 *)a1 + v42 + 16) == 255)
  {
    if (v45 == 255)
    {
      v54 = *(_OWORD *)v44;
      *(_BYTE *)(v43 + 16) = v44[16];
      *(_OWORD *)v43 = v54;
    }
    else
    {
      v51 = *(_QWORD *)v44;
      v52 = *((_QWORD *)v44 + 1);
      sub_10000BB2C(v51, v52, v45);
      *(_QWORD *)v43 = v51;
      *(_QWORD *)(v43 + 8) = v52;
      *(_BYTE *)(v43 + 16) = v45;
    }
  }
  else if (v45 == 255)
  {
    sub_100010D24(v43);
    v53 = v44[16];
    *(_OWORD *)v43 = *(_OWORD *)v44;
    *(_BYTE *)(v43 + 16) = v53;
  }
  else
  {
    v46 = *(_QWORD *)v44;
    v47 = *((_QWORD *)v44 + 1);
    sub_10000BB2C(v46, v47, v45);
    v48 = *(_QWORD *)v43;
    v49 = *(_QWORD *)(v43 + 8);
    *(_QWORD *)v43 = v46;
    *(_QWORD *)(v43 + 8) = v47;
    v50 = *(_BYTE *)(v43 + 16);
    *(_BYTE *)(v43 + 16) = v45;
    sub_10000BB54(v48, v49, v50);
  }
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  return a1;
}

char *sub_1000B4960(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;

  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
  if (EnumCaseMultiPayload == 2)
  {
    v9 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
    v10 = sub_100004FC8(&qword_10015C420);
    *(_OWORD *)&a1[*(int *)(v10 + 48)] = *(_OWORD *)&a2[*(int *)(v10 + 48)];
    swift_storeEnumTagMultiPayload(a1, v6, 2);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v11 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    v8 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload(a1, v6, 0);
  }
  v12 = a3[6];
  a1[a3[5]] = a2[a3[5]];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = *((_OWORD *)v14 + 1);
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *((_OWORD *)v13 + 1) = v15;
  v16 = a3[7];
  v17 = a3[8];
  v18 = &a1[v16];
  v19 = &a2[v16];
  v20 = *(_OWORD *)v19;
  v18[16] = v19[16];
  *(_OWORD *)v18 = v20;
  *(_QWORD *)&a1[v17] = *(_QWORD *)&a2[v17];
  a1[a3[9]] = a2[a3[9]];
  return a1;
}

char *sub_1000B4AD0(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (a1 != a2)
  {
    sub_100013014((uint64_t)a1);
    v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
    if (EnumCaseMultiPayload == 2)
    {
      v9 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      v10 = sub_100004FC8(&qword_10015C420);
      *(_OWORD *)&a1[*(int *)(v10 + 48)] = *(_OWORD *)&a2[*(int *)(v10 + 48)];
      swift_storeEnumTagMultiPayload(a1, v6, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v11 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      v8 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload(a1, v6, 0);
    }
  }
  v12 = a3[6];
  a1[a3[5]] = a2[a3[5]];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = a2[v12 + 16];
  v16 = *(_QWORD *)&a1[v12];
  v17 = *(_QWORD *)&a1[v12 + 8];
  v18 = a1[v12 + 16];
  *(_OWORD *)v13 = *(_OWORD *)&a2[v12];
  v13[16] = v15;
  sub_100007618(v16, v17, v18);
  v19 = *((_QWORD *)v13 + 3);
  *((_QWORD *)v13 + 3) = *((_QWORD *)v14 + 3);
  swift_bridgeObjectRelease(v19);
  v20 = a3[7];
  v21 = (uint64_t)&a1[v20];
  v22 = &a2[v20];
  v23 = a1[v20 + 16];
  if (v23 == 255)
    goto LABEL_13;
  v24 = v22[16];
  if (v24 == 255)
  {
    sub_100010D24(v21);
LABEL_13:
    *(_OWORD *)v21 = *(_OWORD *)v22;
    *(_BYTE *)(v21 + 16) = v22[16];
    goto LABEL_14;
  }
  v25 = *(_QWORD *)v21;
  v26 = *(_QWORD *)(v21 + 8);
  *(_OWORD *)v21 = *(_OWORD *)v22;
  *(_BYTE *)(v21 + 16) = v24;
  sub_10000BB54(v25, v26, v23);
LABEL_14:
  v27 = a3[9];
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  a1[v27] = a2[v27];
  return a1;
}

uint64_t sub_1000B4CB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000B4CC0);
}

uint64_t sub_1000B4CC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 24);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1000B4D40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000B4D4C);
}

uint64_t sub_1000B4D4C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 24) = (a2 - 1);
  return result;
}

uint64_t sub_1000B4DC8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  result = type metadata accessor for PrimarySettingsListItemIdentifier(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100119428;
    v4[2] = &unk_100119440;
    v4[3] = &unk_100119458;
    v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[5] = &unk_100119470;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SiriFeatureFlags(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for SiriFeatureFlags(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1000B4EF8 + 4 * byte_1001194B0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1000B4F18 + 4 * byte_1001194B5[v4]))();
}

_BYTE *sub_1000B4EF8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1000B4F18(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000B4F20(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000B4F28(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000B4F30(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000B4F38(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_1000B4F44()
{
  return 0;
}

ValueMetadata *type metadata accessor for SiriFeatureFlags()
{
  return &type metadata for SiriFeatureFlags;
}

unint64_t sub_1000B4F60()
{
  unint64_t result;

  result = qword_10015B128;
  if (!qword_10015B128)
  {
    result = swift_getWitnessTable(&unk_100119514, &type metadata for SiriFeatureFlags);
    atomic_store(result, (unint64_t *)&qword_10015B128);
  }
  return result;
}

uint64_t sub_1000B4FA4()
{
  return 1;
}

Swift::Int sub_1000B4FAC()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void sub_1000B4FEC()
{
  Hasher._combine(_:)(0);
}

Swift::Int sub_1000B5010(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

const char *sub_1000B504C()
{
  return "SiriUI";
}

const char *sub_1000B5060()
{
  return "sae";
}

uint64_t storeEnumTagSinglePayload for SettingsAppFeatureFlags(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000B50C0 + 4 * byte_100119575[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000B50F4 + 4 * byte_100119570[v4]))();
}

uint64_t sub_1000B50F4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B50FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000B5104);
  return result;
}

uint64_t sub_1000B5110(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000B5118);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000B511C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B5124(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SettingsAppFeatureFlags()
{
  return &type metadata for SettingsAppFeatureFlags;
}

uint64_t storeEnumTagSinglePayload for CoreTelephonyFeatureFlags(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1000B5180 + 4 * byte_10011957A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1000B51A0 + 4 * byte_10011957F[v4]))();
}

_BYTE *sub_1000B5180(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1000B51A0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000B51A8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000B51B0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000B51B8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000B51C0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CoreTelephonyFeatureFlags()
{
  return &type metadata for CoreTelephonyFeatureFlags;
}

unint64_t sub_1000B51E0()
{
  unint64_t result;

  result = qword_10015B130;
  if (!qword_10015B130)
  {
    result = swift_getWitnessTable(&unk_10011960C, &type metadata for CoreTelephonyFeatureFlags);
    atomic_store(result, (unint64_t *)&qword_10015B130);
  }
  return result;
}

const char *sub_1000B5224()
{
  return "SettingsApp";
}

const char *sub_1000B5238()
{
  _BYTE *v0;

  if (*v0)
    return "iCloudInPrimaryList";
  else
    return "UpdatedPrivacySettings";
}

unint64_t sub_1000B526C()
{
  unint64_t result;

  result = qword_10015B138;
  if (!qword_10015B138)
  {
    result = swift_getWitnessTable(&unk_100119674, &type metadata for SettingsAppFeatureFlags);
    atomic_store(result, (unint64_t *)&qword_10015B138);
  }
  return result;
}

const char *sub_1000B52B0()
{
  return "CoreTelephony";
}

const char *sub_1000B52C4()
{
  return "IML";
}

_QWORD *initializeBufferWithCopyOfBuffer for PasscodeCredentialWrapper(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for PasscodeCredentialWrapper(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

_QWORD *assignWithCopy for PasscodeCredentialWrapper(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

_QWORD *assignWithTake for PasscodeCredentialWrapper(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for PasscodeCredentialWrapper(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PasscodeCredentialWrapper(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PasscodeCredentialWrapper()
{
  return &type metadata for PasscodeCredentialWrapper;
}

ValueMetadata *type metadata accessor for FollowUpURLRoute()
{
  return &type metadata for FollowUpURLRoute;
}

void sub_1000B5424(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(char *, unint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void (*v62)(char *, char *, uint64_t);
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char v89;
  int EnumCaseMultiPayload;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  void (*v100)(char *, uint64_t);
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  int *v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD v143[2];
  uint64_t v144;
  uint64_t v145;
  uint64_t v146[2];

  v127 = a2;
  v139 = a1;
  v4 = type metadata accessor for FLFollowUpInformation(0);
  v133 = *(_QWORD *)(v4 - 8);
  v134 = v4;
  __chkstk_darwin(v4);
  v132 = (char *)&v116 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = type metadata accessor for PrimarySettingsListItemModel(0);
  v6 = *(_QWORD *)(v124 - 8);
  __chkstk_darwin(v124);
  v136 = (char *)&v116 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004FC8((uint64_t *)&unk_100156F00);
  __chkstk_darwin(v8);
  v125 = (uint64_t)&v116 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v10 = __chkstk_darwin(v138);
  v135 = (char *)&v116 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v122 = (uint64_t)&v116 - v13;
  __chkstk_darwin(v12);
  v123 = (uint64_t)&v116 - v14;
  v142 = type metadata accessor for URLQueryItem(0);
  v15 = *(_QWORD **)(v142 - 8);
  v16 = __chkstk_darwin(v142);
  v18 = (char *)&v116 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v126 = (char *)&v116 - v20;
  __chkstk_darwin(v19);
  v129 = (char *)&v116 - v21;
  v22 = sub_100004FC8(&qword_1001570F0);
  __chkstk_darwin(v22);
  v24 = (char *)&v116 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for URLComponents(0);
  v140 = *(_QWORD *)(v25 - 8);
  v141 = v25;
  __chkstk_darwin(v25);
  v137 = (char *)&v116 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for URL(0);
  v28 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v30 = (char *)&v116 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100156CB0 != -1)
    swift_once(&qword_100156CB0, sub_10008BE28);
  v31 = type metadata accessor for Logger(0);
  v32 = sub_100007808(v31, (uint64_t)qword_10015D2C8);
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.default.getter();
  v35 = os_log_type_enabled(v33, v34);
  v128 = v6;
  if (v35)
  {
    v36 = swift_slowAlloc(22, -1);
    v37 = swift_slowAlloc(64, -1);
    v130 = a3;
    v38 = v37;
    v146[0] = v37;
    *(_DWORD *)v36 = 136315394;
    v131 = v30;
    v121 = v15;
    v144 = sub_1000DA1F0(0xD000000000000015, 0x8000000100125800, v146);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145, v36 + 4, v36 + 12);
    *(_WORD *)(v36 + 12) = 2080;
    v144 = sub_1000DA1F0(0xD000000000000026, 0x800000010011FD10, v146);
    v15 = v121;
    v30 = v131;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145, v36 + 14, v36 + 22);
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Start (%s.%s)…", (uint8_t *)v36, 0x16u);
    swift_arrayDestroy(v38, 2, (char *)&type metadata for Any + 8);
    v39 = v38;
    a3 = v130;
    swift_slowDealloc(v39, -1, -1);
    swift_slowDealloc(v36, -1, -1);
  }

  v40 = sub_100019DF4((uint64_t)v30);
  v41 = URL.absoluteString.getter(v40);
  v43 = v42;
  URLComponents.init(string:)(v41);
  swift_bridgeObjectRelease(v43);
  v45 = v140;
  v44 = v141;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v140 + 48))(v24, 1, v141) == 1)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v27);
    sub_10000BA50((uint64_t)v24, &qword_1001570F0);
    goto LABEL_18;
  }
  v46 = v137;
  v47 = (*(uint64_t (**)(char *, char *, uint64_t))(v45 + 32))(v137, v24, v44);
  v48 = URLComponents.percentEncodedQueryItems.getter(v47);
  if (!v48)
  {
    (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v44);
    goto LABEL_17;
  }
  v49 = *(_QWORD *)(v48 + 16);
  if (!v49)
    goto LABEL_15;
  v119 = v28;
  v131 = v30;
  v118 = v27;
  v130 = a3;
  v50 = v48 + ((*((unsigned __int8 *)v15 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v15 + 80));
  v51 = v15[9];
  v52 = (uint64_t (*)(char *, unint64_t, uint64_t))v15[2];
  v120 = v48;
  swift_bridgeObjectRetain(v48);
  v53 = v142;
  while (1)
  {
    v54 = v52(v18, v50, v53);
    v55 = URLQueryItem.name.getter(v54);
    v57 = v56;
    if (v55 == 1953460082 && v56 == 0xE400000000000000)
    {
      swift_bridgeObjectRelease(v120);
      v61 = 0xE400000000000000;
      goto LABEL_22;
    }
    v58 = _stringCompareWithSmolCheck(_:_:expecting:)(v55, v56, 1953460082, 0xE400000000000000, 0);
    swift_bridgeObjectRelease(v57);
    if ((v58 & 1) != 0)
      break;
    v53 = v142;
    ((void (*)(char *, uint64_t))v15[1])(v18, v142);
    v50 += v51;
    if (!--v49)
    {
      v59 = v120;
      swift_bridgeObjectRelease(v120);
      v48 = v59;
      a3 = v130;
      v30 = v131;
      v27 = v118;
      v28 = v119;
      v45 = v140;
      v44 = v141;
LABEL_15:
      swift_bridgeObjectRelease(v48);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v137, v44);
LABEL_17:
      (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v27);
      goto LABEL_18;
    }
  }
  v61 = v120;
  v53 = v142;
LABEL_22:
  swift_bridgeObjectRelease(v61);
  v62 = (void (*)(char *, char *, uint64_t))v15[4];
  v63 = v126;
  v62(v126, v18, v53);
  v64 = v129;
  v65 = ((uint64_t (*)(char *, char *, uint64_t))v62)(v129, v63, v53);
  v66 = URLQueryItem.value.getter(v65);
  v68 = v131;
  v69 = v119;
  v70 = v53;
  v71 = (uint64_t)v136;
  v72 = v137;
  v73 = v127;
  if (!v67)
  {
    swift_bridgeObjectRelease(v120);
    ((void (*)(char *, uint64_t))v15[1])(v64, v70);
    (*(void (**)(char *, uint64_t))(v140 + 8))(v72, v141);
    (*(void (**)(char *, uint64_t))(v69 + 8))(v68, v118);
    a3 = v130;
    goto LABEL_18;
  }
  v74 = v67;
  v146[0] = v66;
  v146[1] = v67;
  v75 = static String._unconditionallyBridgeFromObjectiveC(_:)(FLFollowUpPreferencesIdentifierPrefix);
  v77 = v76;
  v144 = v75;
  v145 = v76;
  v143[0] = 0;
  v143[1] = 0xE000000000000000;
  v78 = sub_100008A5C();
  v126 = (char *)StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v144, v143, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v78, v78, v78);
  v80 = v79;
  swift_bridgeObjectRelease(v74);
  swift_bridgeObjectRelease(v77);
  v146[0] = (uint64_t)_swiftEmptyArrayStorage;
  v81 = *((_QWORD *)v73 + 2);
  v121 = v80;
  if (v81)
  {
    swift_bridgeObjectRetain(v80);
    swift_bridgeObjectRetain(v73);
    v82 = 120;
    do
    {
      v83 = swift_bridgeObjectRetain(*(_QWORD *)&v73[v82]);
      sub_1000F20B8(v83);
      v82 += 96;
      --v81;
    }
    while (v81);
    swift_bridgeObjectRelease(v73);
    v84 = (_QWORD *)v146[0];
    v85 = *(_QWORD *)(v146[0] + 16);
    if (v85)
      goto LABEL_27;
LABEL_40:
    v92 = v15;
    v102 = 1;
    a3 = v130;
    v103 = v125;
    v104 = v84;
    goto LABEL_44;
  }
  swift_bridgeObjectRetain(v80);
  v84 = _swiftEmptyArrayStorage;
  v85 = _swiftEmptyArrayStorage[2];
  if (!v85)
    goto LABEL_40;
LABEL_27:
  v86 = (uint64_t)v84 + ((*(unsigned __int8 *)(v128 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v128 + 80));
  v87 = (uint64_t)v135;
  v127 = v135 + 8;
  v139 = *(_QWORD *)(v128 + 72);
  v117 = v84;
  swift_bridgeObjectRetain(v84);
  v88 = v132;
  while (1)
  {
    sub_1000076F0(v86, v71, type metadata accessor for PrimarySettingsListItemModel);
    sub_1000076F0(v71, v87, type metadata accessor for PrimarySettingsListItemIdentifier);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v87, v138);
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload != 2)
      {
        v92 = v15;
        sub_1000076B4(v87, type metadata accessor for PrimarySettingsListItemIdentifier);
        goto LABEL_29;
      }
      v91 = sub_100004FC8(&qword_10015C420);
      swift_bridgeObjectRelease(*(_QWORD *)&v127[*(int *)(v91 + 48)]);
    }
    v92 = v15;
    v93 = v133;
    v94 = v87;
    v95 = v134;
    v96 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v133 + 32))(v88, v94, v134);
    v97 = FLFollowUpInformation.itemIdentifier.getter(v96);
    v99 = v98;
    v100 = *(void (**)(char *, uint64_t))(v93 + 8);
    v101 = v95;
    v87 = (uint64_t)v135;
    v71 = (uint64_t)v136;
    v100(v88, v101);
    if (v99)
    {
      if ((char *)v97 == v126 && v99 == v121)
      {
        swift_bridgeObjectRelease(v117);
        v105 = v99;
        goto LABEL_43;
      }
      v89 = _stringCompareWithSmolCheck(_:_:expecting:)(v97, v99, v126, v121, 0);
      swift_bridgeObjectRelease(v99);
      if ((v89 & 1) != 0)
        break;
    }
LABEL_29:
    sub_1000076B4(v71, type metadata accessor for PrimarySettingsListItemModel);
    v86 += v139;
    --v85;
    v15 = v92;
    if (!v85)
    {
      v104 = v117;
      swift_bridgeObjectRelease(v117);
      v102 = 1;
      a3 = v130;
      v68 = v131;
      v103 = v125;
      v69 = v119;
      v64 = v129;
      v72 = v137;
      goto LABEL_44;
    }
  }
  v105 = v117;
LABEL_43:
  swift_bridgeObjectRelease(v105);
  v103 = v125;
  sub_100007670(v71, v125, type metadata accessor for PrimarySettingsListItemModel);
  v102 = 0;
  a3 = v130;
  v68 = v131;
  v69 = v119;
  v64 = v129;
  v72 = v137;
  v104 = v117;
LABEL_44:
  v106 = v128;
  v107 = v124;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v128 + 56))(v103, v102, 1, v124);
  swift_bridgeObjectRelease(v104);
  v108 = v121;
  swift_bridgeObjectRelease(v121);
  ((void (*)(char *, uint64_t))v92[1])(v64, v142);
  (*(void (**)(char *, uint64_t))(v140 + 8))(v72, v141);
  swift_bridgeObjectRelease(v108);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v106 + 48))(v103, 1, v107) == 1)
  {
    sub_10000BA50(v103, (uint64_t *)&unk_100156F00);
    swift_bridgeObjectRelease(v120);
    (*(void (**)(char *, uint64_t))(v69 + 8))(v68, v118);
LABEL_18:
    v60 = sub_100004FC8(&qword_1001570F8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 56))(a3, 1, 1, v60);
  }
  else
  {
    v109 = v122;
    sub_1000076F0(v103, v122, type metadata accessor for PrimarySettingsListItemIdentifier);
    sub_1000076B4(v103, type metadata accessor for PrimarySettingsListItemModel);
    v110 = v123;
    sub_100007670(v109, v123, type metadata accessor for PrimarySettingsListItemIdentifier);
    (*(void (**)(uint64_t, char *, uint64_t))(v69 + 32))(a3, v68, v118);
    v111 = (int *)type metadata accessor for SettingsURLDestination(0);
    v112 = a3 + v111[5];
    sub_100007670(v110, v112, type metadata accessor for PrimarySettingsListItemIdentifier);
    v113 = type metadata accessor for SettingsURLDestination.Action(0);
    swift_storeEnumTagMultiPayload(v112, v113, 1);
    v114 = (_QWORD *)(a3 + v111[7]);
    *(_QWORD *)(a3 + v111[6]) = v120;
    *v114 = 0;
    v114[1] = 0;
    v115 = sub_100004FC8(&qword_1001570F8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v115 - 8) + 56))(a3, 0, 1, v115);
  }
  sub_1000B64C0();
}

BOOL sub_1000B5FC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  uint64_t v21;
  char v22;
  Swift::Bool v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(char *, unint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  Swift::String v51;
  void *object;
  uint64_t v53;
  unint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v0 = sub_100004FC8(&qword_10015C510);
  __chkstk_darwin(v0);
  v57 = (char *)&v55 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for URLQueryItem(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v55 - v7;
  v9 = sub_100004FC8(&qword_1001570F0);
  __chkstk_darwin(v9);
  v11 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for URLComponents(0);
  v62 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v59 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for URL(0);
  v61 = *(_QWORD *)(v14 - 8);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.scheme.getter(v15);
  if (!v18)
    return 0;
  v19 = v18;
  v60 = v12;
  v56 = v8;
  v58 = v14;
  v20 = String.lowercased()();
  swift_bridgeObjectRelease(v19);
  if (v20._countAndFlagsBits == 0x7366657270 && v20._object == (void *)0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    v21 = v60;
  }
  else
  {
    v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v20._countAndFlagsBits, v20._object, 0x7366657270, 0xE500000000000000, 0);
    swift_bridgeObjectRelease(v20._object);
    v23 = 0;
    v21 = v60;
    if ((v22 & 1) == 0)
      return v23;
  }
  v24 = sub_100019DF4((uint64_t)v17);
  v25 = URL.absoluteString.getter(v24);
  v27 = v26;
  URLComponents.init(string:)(v25);
  swift_bridgeObjectRelease(v27);
  v28 = v62;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v11, 1, v21) == 1)
  {
    (*(void (**)(char *, uint64_t))(v61 + 8))(v17, v58);
    sub_10000BA50((uint64_t)v11, &qword_1001570F0);
    return 0;
  }
  v29 = v59;
  v30 = (*(uint64_t (**)(void))(v28 + 32))();
  v31 = URLComponents.percentEncodedQueryItems.getter(v30);
  v32 = v21;
  v33 = v58;
  if (!v31)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v29, v32);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v17, v33);
    return 0;
  }
  v34 = *(_QWORD *)(v31 + 16);
  v55 = v31;
  if (v34)
  {
    v35 = v31 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v36 = *(_QWORD *)(v3 + 72);
    v37 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v3 + 16);
    swift_bridgeObjectRetain(v31);
    while (1)
    {
      v38 = v37(v6, v35, v2);
      v39 = URLQueryItem.name.getter(v38);
      v41 = v40;
      if (v39 == 1953460082 && v40 == 0xE400000000000000)
      {
        swift_bridgeObjectRelease(v55);
        v46 = 0xE400000000000000;
        goto LABEL_20;
      }
      v42 = _stringCompareWithSmolCheck(_:_:expecting:)(v39, v40, 1953460082, 0xE400000000000000, 0);
      swift_bridgeObjectRelease(v41);
      if ((v42 & 1) != 0)
        break;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
      v35 += v36;
      if (!--v34)
      {
        swift_bridgeObjectRelease(v55);
        v43 = 1;
        v44 = (uint64_t)v57;
        v33 = v58;
        v45 = v61;
        v28 = v62;
        goto LABEL_21;
      }
    }
    v46 = v55;
LABEL_20:
    v44 = (uint64_t)v57;
    v33 = v58;
    v45 = v61;
    v28 = v62;
    swift_bridgeObjectRelease(v46);
    (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v44, v6, v2);
    v43 = 0;
  }
  else
  {
    v43 = 1;
    v45 = v61;
    v44 = (uint64_t)v57;
  }
LABEL_21:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v44, v43, 1, v2);
  swift_bridgeObjectRelease(v55);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v44, 1, v2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v59, v60);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v17, v33);
    sub_10000BA50(v44, &qword_10015C510);
    return 0;
  }
  v47 = v56;
  v48 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 32))(v56, v44, v2);
  URLQueryItem.value.getter(v48);
  if (!v49)
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v47, v2);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v59, v60);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v17, v33);
    return 0;
  }
  v50 = v49;
  v51._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(FLFollowUpPreferencesIdentifierPrefix);
  object = v51._object;
  v53 = v28;
  v23 = String.hasPrefix(_:)(v51);
  swift_bridgeObjectRelease(v50);
  swift_bridgeObjectRelease(object);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v47, v2);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v59, v60);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v17, v33);
  return v23;
}

void sub_1000B64C0()
{
  uint64_t v0;
  uint64_t v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *oslog;
  uint64_t v6;
  uint64_t v7;

  if (qword_100156CB0 != -1)
    swift_once(&qword_100156CB0, sub_10008BE28);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_100007808(v0, (uint64_t)qword_10015D2C8);
  oslog = Logger.logObject.getter(v1);
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v2))
  {
    v3 = swift_slowAlloc(22, -1);
    v4 = swift_slowAlloc(64, -1);
    v7 = v4;
    *(_DWORD *)v3 = 136315394;
    v6 = sub_1000DA1F0(0xD000000000000015, 0x8000000100125800, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v6, &v7, v3 + 4, v3 + 12);
    *(_WORD *)(v3 + 12) = 2080;
    v6 = sub_1000DA1F0(0xD000000000000026, 0x800000010011FD10, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v6, &v7, v3 + 14, v3 + 22);
    _os_log_impl((void *)&_mh_execute_header, oslog, v2, "…Complete (%s.%s)", (uint8_t *)v3, 0x16u);
    swift_arrayDestroy(v4, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v4, -1, -1);
    swift_slowDealloc(v3, -1, -1);

  }
  else
  {

  }
}

_QWORD *sub_1000B668C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  id v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;

  v4 = type metadata accessor for PrimarySettingsListFollowUpActionModel(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v6 = (int *)v4;
    v7 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(a2, v7))
    {
      case 0u:
        v8 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
        v9 = a1;
        v10 = v7;
        v11 = 0;
        goto LABEL_14;
      case 1u:
        v13 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
        v9 = a1;
        v10 = v7;
        v11 = 1;
        goto LABEL_14;
      case 2u:
        v14 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
        v15 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v16 = (_QWORD *)((char *)a1 + v15);
        v17 = (_QWORD *)((char *)a2 + v15);
        v18 = v17[1];
        *v16 = *v17;
        v16[1] = v18;
        swift_bridgeObjectRetain(v18);
        v9 = a1;
        v10 = v7;
        v11 = 2;
        goto LABEL_14;
      case 3u:
        v19 = a2[1];
        *a1 = *a2;
        a1[1] = v19;
        v20 = a2[3];
        a1[2] = a2[2];
        a1[3] = v20;
        v21 = a2[5];
        a1[4] = a2[4];
        a1[5] = v21;
        v22 = a2[7];
        a1[6] = a2[6];
        a1[7] = v22;
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v22);
        v9 = a1;
        v10 = v7;
        v11 = 3;
        goto LABEL_14;
      case 4u:
        v23 = a2[1];
        *a1 = *a2;
        a1[1] = v23;
        v24 = a2[3];
        a1[2] = a2[2];
        a1[3] = v24;
        v25 = a2[5];
        a1[4] = a2[4];
        a1[5] = v25;
        a1[6] = a2[6];
        swift_bridgeObjectRetain(v23);
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v25);
        v9 = a1;
        v10 = v7;
        v11 = 4;
        goto LABEL_14;
      case 5u:
        v26 = a2[1];
        *a1 = *a2;
        a1[1] = v26;
        v27 = a2[3];
        a1[2] = a2[2];
        a1[3] = v27;
        v29 = (void *)a2[4];
        v28 = a2[5];
        a1[4] = v29;
        a1[5] = v28;
        v30 = a2[9];
        swift_bridgeObjectRetain(v26);
        swift_bridgeObjectRetain(v27);
        v31 = v29;
        swift_bridgeObjectRetain(v28);
        if (v30)
        {
          a1[9] = v30;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v30 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v30);
        }
        else
        {
          v32 = *((_OWORD *)a2 + 4);
          *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
          *((_OWORD *)a1 + 4) = v32;
        }
        v9 = a1;
        v10 = v7;
        v11 = 5;
LABEL_14:
        swift_storeEnumTagMultiPayload(v9, v10, v11);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
        break;
    }
    v33 = v6[5];
    v34 = (char *)a1 + v33;
    v35 = (char *)a2 + v33;
    v36 = type metadata accessor for FLFollowUpGroupIdentity(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v34, v35, v36);
    *((_BYTE *)a1 + v6[6]) = *((_BYTE *)a2 + v6[6]);
    v37 = v6[7];
    v38 = (_QWORD *)((char *)a1 + v37);
    v39 = (_QWORD *)((char *)a2 + v37);
    v40 = v39[1];
    *v38 = *v39;
    v38[1] = v40;
    v41 = v6[8];
    v42 = (_QWORD *)((char *)a1 + v41);
    v43 = (_QWORD *)((char *)a2 + v41);
    v44 = v43[1];
    *v42 = *v43;
    v42[1] = v44;
    v45 = v6[9];
    v46 = (char *)a1 + v45;
    v47 = (char *)a2 + v45;
    v48 = *(_QWORD *)((char *)a2 + v45);
    v49 = *(_QWORD *)((char *)a2 + v45 + 8);
    v50 = *((_BYTE *)a2 + v45 + 16);
    swift_bridgeObjectRetain(v40);
    swift_bridgeObjectRetain(v44);
    sub_10000BAD4(v48, v49, v50);
    *(_QWORD *)v46 = v48;
    *((_QWORD *)v46 + 1) = v49;
    v46[16] = v50;
    v51 = *((_QWORD *)v47 + 3);
    *((_QWORD *)v46 + 3) = v51;
    v52 = v6[10];
    v53 = (char *)a1 + v52;
    v54 = (char *)a2 + v52;
    v55 = *((unsigned __int8 *)a2 + v52 + 16);
    swift_bridgeObjectRetain(v51);
    if (v55 == 255)
    {
      *(_OWORD *)v53 = *(_OWORD *)v54;
      v53[16] = v54[16];
    }
    else
    {
      v56 = *(_QWORD *)v54;
      v57 = *((_QWORD *)v54 + 1);
      sub_10000BB2C(v56, v57, v55);
      *(_QWORD *)v53 = v56;
      *((_QWORD *)v53 + 1) = v57;
      v53[16] = v55;
    }
  }
  return a1;
}

uint64_t sub_1000B6A04(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  int v12;

  v2 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(a1, v2))
  {
    case 0u:
    case 1u:
      v3 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
      break;
    case 2u:
      v4 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
      v5 = sub_100004FC8(&qword_10015C420);
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v5 + 48) + 8));
      break;
    case 3u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
      break;
    case 4u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      break;
    case 5u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));

      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      if (*(_QWORD *)(a1 + 72))
        sub_100005474((_QWORD *)(a1 + 48));
      break;
    default:
      break;
  }
  v6 = (int *)type metadata accessor for PrimarySettingsListFollowUpActionModel(0);
  v7 = a1 + v6[5];
  v8 = type metadata accessor for FLFollowUpGroupIdentity(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v6[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v6[8] + 8));
  v9 = a1 + v6[9];
  sub_100007618(*(_QWORD *)v9, *(_QWORD *)(v9 + 8), *(_BYTE *)(v9 + 16));
  result = swift_bridgeObjectRelease(*(_QWORD *)(v9 + 24));
  v11 = a1 + v6[10];
  v12 = *(unsigned __int8 *)(v11 + 16);
  if (v12 != 255)
    return sub_10000BB54(*(_QWORD *)v11, *(_QWORD *)(v11 + 8), v12);
  return result;
}

_QWORD *sub_1000B6BC0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  id v27;
  __int128 v28;
  int *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;

  v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(a2, v4))
  {
    case 0u:
      v5 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
      v6 = a1;
      v7 = v4;
      v8 = 0;
      goto LABEL_12;
    case 1u:
      v9 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      v6 = a1;
      v7 = v4;
      v8 = 1;
      goto LABEL_12;
    case 2u:
      v10 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      v11 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
      v12 = (_QWORD *)((char *)a1 + v11);
      v13 = (_QWORD *)((char *)a2 + v11);
      v14 = v13[1];
      *v12 = *v13;
      v12[1] = v14;
      swift_bridgeObjectRetain(v14);
      v6 = a1;
      v7 = v4;
      v8 = 2;
      goto LABEL_12;
    case 3u:
      v15 = a2[1];
      *a1 = *a2;
      a1[1] = v15;
      v16 = a2[3];
      a1[2] = a2[2];
      a1[3] = v16;
      v17 = a2[5];
      a1[4] = a2[4];
      a1[5] = v17;
      v18 = a2[7];
      a1[6] = a2[6];
      a1[7] = v18;
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v18);
      v6 = a1;
      v7 = v4;
      v8 = 3;
      goto LABEL_12;
    case 4u:
      v19 = a2[1];
      *a1 = *a2;
      a1[1] = v19;
      v20 = a2[3];
      a1[2] = a2[2];
      a1[3] = v20;
      v21 = a2[5];
      a1[4] = a2[4];
      a1[5] = v21;
      a1[6] = a2[6];
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRetain(v21);
      v6 = a1;
      v7 = v4;
      v8 = 4;
      goto LABEL_12;
    case 5u:
      v22 = a2[1];
      *a1 = *a2;
      a1[1] = v22;
      v23 = a2[3];
      a1[2] = a2[2];
      a1[3] = v23;
      v25 = (void *)a2[4];
      v24 = a2[5];
      a1[4] = v25;
      a1[5] = v24;
      v26 = a2[9];
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v23);
      v27 = v25;
      swift_bridgeObjectRetain(v24);
      if (v26)
      {
        a1[9] = v26;
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v26 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v26);
      }
      else
      {
        v28 = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 4) = v28;
      }
      v6 = a1;
      v7 = v4;
      v8 = 5;
LABEL_12:
      swift_storeEnumTagMultiPayload(v6, v7, v8);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
      break;
  }
  v29 = (int *)type metadata accessor for PrimarySettingsListFollowUpActionModel(0);
  v30 = v29[5];
  v31 = (char *)a1 + v30;
  v32 = (char *)a2 + v30;
  v33 = type metadata accessor for FLFollowUpGroupIdentity(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v31, v32, v33);
  *((_BYTE *)a1 + v29[6]) = *((_BYTE *)a2 + v29[6]);
  v34 = v29[7];
  v35 = (_QWORD *)((char *)a1 + v34);
  v36 = (_QWORD *)((char *)a2 + v34);
  v37 = v36[1];
  *v35 = *v36;
  v35[1] = v37;
  v38 = v29[8];
  v39 = (_QWORD *)((char *)a1 + v38);
  v40 = (_QWORD *)((char *)a2 + v38);
  v41 = v40[1];
  *v39 = *v40;
  v39[1] = v41;
  v42 = v29[9];
  v43 = (char *)a1 + v42;
  v44 = (char *)a2 + v42;
  v45 = *(_QWORD *)((char *)a2 + v42);
  v46 = *(_QWORD *)((char *)a2 + v42 + 8);
  v47 = *((_BYTE *)a2 + v42 + 16);
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRetain(v41);
  sub_10000BAD4(v45, v46, v47);
  *(_QWORD *)v43 = v45;
  *((_QWORD *)v43 + 1) = v46;
  v43[16] = v47;
  v48 = *((_QWORD *)v44 + 3);
  *((_QWORD *)v43 + 3) = v48;
  v49 = v29[10];
  v50 = (char *)a1 + v49;
  v51 = (char *)a2 + v49;
  v52 = *((unsigned __int8 *)a2 + v49 + 16);
  swift_bridgeObjectRetain(v48);
  if (v52 == 255)
  {
    *(_OWORD *)v50 = *(_OWORD *)v51;
    v50[16] = v51[16];
  }
  else
  {
    v53 = *(_QWORD *)v51;
    v54 = *((_QWORD *)v51 + 1);
    sub_10000BB2C(v53, v54, v52);
    *(_QWORD *)v50 = v53;
    *((_QWORD *)v50 + 1) = v54;
    v50[16] = v52;
  }
  return a1;
}

_QWORD *sub_1000B6F0C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  __int128 v28;
  int *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  __int128 v67;

  if (a1 != a2)
  {
    sub_100013014((uint64_t)a1);
    v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(a2, v4))
    {
      case 0u:
        v5 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
        v6 = a1;
        v7 = v4;
        v8 = 0;
        goto LABEL_13;
      case 1u:
        v9 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
        v6 = a1;
        v7 = v4;
        v8 = 1;
        goto LABEL_13;
      case 2u:
        v10 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
        v11 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v12 = (_QWORD *)((char *)a1 + v11);
        v13 = (_QWORD *)((char *)a2 + v11);
        *v12 = *v13;
        v14 = v13[1];
        v12[1] = v14;
        swift_bridgeObjectRetain(v14);
        v6 = a1;
        v7 = v4;
        v8 = 2;
        goto LABEL_13;
      case 3u:
        *a1 = *a2;
        v15 = a2[1];
        a1[1] = v15;
        a1[2] = a2[2];
        v16 = a2[3];
        a1[3] = v16;
        a1[4] = a2[4];
        v17 = a2[5];
        a1[5] = v17;
        a1[6] = a2[6];
        v18 = a2[7];
        a1[7] = v18;
        swift_bridgeObjectRetain(v15);
        swift_bridgeObjectRetain(v16);
        swift_bridgeObjectRetain(v17);
        swift_bridgeObjectRetain(v18);
        v6 = a1;
        v7 = v4;
        v8 = 3;
        goto LABEL_13;
      case 4u:
        *a1 = *a2;
        v19 = a2[1];
        a1[1] = v19;
        a1[2] = a2[2];
        v20 = a2[3];
        a1[3] = v20;
        a1[4] = a2[4];
        v21 = a2[5];
        a1[5] = v21;
        a1[6] = a2[6];
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v21);
        v6 = a1;
        v7 = v4;
        v8 = 4;
        goto LABEL_13;
      case 5u:
        *a1 = *a2;
        v22 = a2[1];
        a1[1] = v22;
        a1[2] = a2[2];
        v23 = a2[3];
        a1[3] = v23;
        v24 = (void *)a2[4];
        a1[4] = v24;
        v25 = a2[5];
        a1[5] = v25;
        v26 = a2[9];
        swift_bridgeObjectRetain(v22);
        swift_bridgeObjectRetain(v23);
        v27 = v24;
        swift_bridgeObjectRetain(v25);
        if (v26)
        {
          a1[9] = v26;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v26 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v26);
        }
        else
        {
          v28 = *((_OWORD *)a2 + 4);
          *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
          *((_OWORD *)a1 + 4) = v28;
        }
        v6 = a1;
        v7 = v4;
        v8 = 5;
LABEL_13:
        swift_storeEnumTagMultiPayload(v6, v7, v8);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
        break;
    }
  }
  v29 = (int *)type metadata accessor for PrimarySettingsListFollowUpActionModel(0);
  v30 = v29[5];
  v31 = (char *)a1 + v30;
  v32 = (char *)a2 + v30;
  v33 = type metadata accessor for FLFollowUpGroupIdentity(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 24))(v31, v32, v33);
  *((_BYTE *)a1 + v29[6]) = *((_BYTE *)a2 + v29[6]);
  v34 = v29[7];
  v35 = (_QWORD *)((char *)a1 + v34);
  v36 = (_QWORD *)((char *)a2 + v34);
  *v35 = *v36;
  v37 = v36[1];
  v38 = v35[1];
  v35[1] = v37;
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRelease(v38);
  v39 = v29[8];
  v40 = (_QWORD *)((char *)a1 + v39);
  v41 = (_QWORD *)((char *)a2 + v39);
  *v40 = *v41;
  v42 = v41[1];
  v43 = v40[1];
  v40[1] = v42;
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRelease(v43);
  v44 = v29[9];
  v45 = (char *)a1 + v44;
  v46 = (char *)a2 + v44;
  v47 = *(_QWORD *)((char *)a2 + v44);
  v48 = *(_QWORD *)((char *)a2 + v44 + 8);
  v49 = *((_BYTE *)a2 + v44 + 16);
  sub_10000BAD4(v47, v48, v49);
  v50 = *(_QWORD *)v45;
  v51 = *((_QWORD *)v45 + 1);
  v52 = v45[16];
  *(_QWORD *)v45 = v47;
  *((_QWORD *)v45 + 1) = v48;
  v45[16] = v49;
  sub_100007618(v50, v51, v52);
  v53 = *((_QWORD *)v46 + 3);
  v54 = *((_QWORD *)v45 + 3);
  *((_QWORD *)v45 + 3) = v53;
  swift_bridgeObjectRetain(v53);
  swift_bridgeObjectRelease(v54);
  v55 = v29[10];
  v56 = (uint64_t)a1 + v55;
  v57 = (char *)a2 + v55;
  v58 = *((unsigned __int8 *)a2 + v55 + 16);
  if (*((unsigned __int8 *)a1 + v55 + 16) == 255)
  {
    if (v58 == 255)
    {
      v67 = *(_OWORD *)v57;
      *(_BYTE *)(v56 + 16) = v57[16];
      *(_OWORD *)v56 = v67;
    }
    else
    {
      v64 = *(_QWORD *)v57;
      v65 = *((_QWORD *)v57 + 1);
      sub_10000BB2C(v64, v65, v58);
      *(_QWORD *)v56 = v64;
      *(_QWORD *)(v56 + 8) = v65;
      *(_BYTE *)(v56 + 16) = v58;
    }
  }
  else if (v58 == 255)
  {
    sub_100010D24(v56);
    v66 = v57[16];
    *(_OWORD *)v56 = *(_OWORD *)v57;
    *(_BYTE *)(v56 + 16) = v66;
  }
  else
  {
    v59 = *(_QWORD *)v57;
    v60 = *((_QWORD *)v57 + 1);
    sub_10000BB2C(v59, v60, v58);
    v61 = *(_QWORD *)v56;
    v62 = *(_QWORD *)(v56 + 8);
    *(_QWORD *)v56 = v59;
    *(_QWORD *)(v56 + 8) = v60;
    v63 = *(_BYTE *)(v56 + 16);
    *(_BYTE *)(v56 + 16) = v58;
    sub_10000BB54(v61, v62, v63);
  }
  return a1;
}

char *sub_1000B7358(char *a1, char *a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  char *v20;
  char *v21;

  v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v4);
  if (EnumCaseMultiPayload == 2)
  {
    v7 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    v8 = sub_100004FC8(&qword_10015C420);
    *(_OWORD *)&a1[*(int *)(v8 + 48)] = *(_OWORD *)&a2[*(int *)(v8 + 48)];
    swift_storeEnumTagMultiPayload(a1, v4, 2);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v9 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
    swift_storeEnumTagMultiPayload(a1, v4, 1);
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    v6 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, v4, 0);
  }
  v10 = (int *)type metadata accessor for PrimarySettingsListFollowUpActionModel(0);
  v11 = v10[5];
  v12 = &a1[v11];
  v13 = &a2[v11];
  v14 = type metadata accessor for FLFollowUpGroupIdentity(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  a1[v10[6]] = a2[v10[6]];
  *(_OWORD *)&a1[v10[7]] = *(_OWORD *)&a2[v10[7]];
  *(_OWORD *)&a1[v10[8]] = *(_OWORD *)&a2[v10[8]];
  v15 = v10[9];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = *((_OWORD *)v17 + 1);
  *(_OWORD *)v16 = *(_OWORD *)v17;
  *((_OWORD *)v16 + 1) = v18;
  v19 = v10[10];
  v20 = &a1[v19];
  v21 = &a2[v19];
  *(_OWORD *)v20 = *(_OWORD *)v21;
  v20[16] = v21[16];
  return a1;
}

char *sub_1000B750C(char *a1, char *a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;

  if (a1 != a2)
  {
    sub_100013014((uint64_t)a1);
    v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v4);
    if (EnumCaseMultiPayload == 2)
    {
      v7 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      v8 = sub_100004FC8(&qword_10015C420);
      *(_OWORD *)&a1[*(int *)(v8 + 48)] = *(_OWORD *)&a2[*(int *)(v8 + 48)];
      swift_storeEnumTagMultiPayload(a1, v4, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v9 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      swift_storeEnumTagMultiPayload(a1, v4, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, v4, 0);
    }
  }
  v10 = (int *)type metadata accessor for PrimarySettingsListFollowUpActionModel(0);
  v11 = v10[5];
  v12 = &a1[v11];
  v13 = &a2[v11];
  v14 = type metadata accessor for FLFollowUpGroupIdentity(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  a1[v10[6]] = a2[v10[6]];
  v15 = v10[7];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v19 = *(_QWORD *)v17;
  v18 = *((_QWORD *)v17 + 1);
  v20 = *((_QWORD *)v16 + 1);
  *(_QWORD *)v16 = v19;
  *((_QWORD *)v16 + 1) = v18;
  swift_bridgeObjectRelease(v20);
  v21 = v10[8];
  v22 = &a1[v21];
  v23 = &a2[v21];
  v25 = *(_QWORD *)v23;
  v24 = *((_QWORD *)v23 + 1);
  v26 = *((_QWORD *)v22 + 1);
  *(_QWORD *)v22 = v25;
  *((_QWORD *)v22 + 1) = v24;
  swift_bridgeObjectRelease(v26);
  v27 = v10[9];
  v28 = &a1[v27];
  v29 = &a2[v27];
  LOBYTE(v27) = a2[v27 + 16];
  v30 = *(_QWORD *)v28;
  v31 = *((_QWORD *)v28 + 1);
  v32 = v28[16];
  *(_OWORD *)v28 = *(_OWORD *)v29;
  v28[16] = v27;
  sub_100007618(v30, v31, v32);
  v33 = *((_QWORD *)v28 + 3);
  *((_QWORD *)v28 + 3) = *((_QWORD *)v29 + 3);
  swift_bridgeObjectRelease(v33);
  v34 = v10[10];
  v35 = (uint64_t)&a1[v34];
  v36 = &a2[v34];
  v37 = a1[v34 + 16];
  if (v37 == 255)
    goto LABEL_13;
  v38 = v36[16];
  if (v38 == 255)
  {
    sub_100010D24(v35);
LABEL_13:
    *(_OWORD *)v35 = *(_OWORD *)v36;
    *(_BYTE *)(v35 + 16) = v36[16];
    return a1;
  }
  v39 = *(_QWORD *)v35;
  v40 = *(_QWORD *)(v35 + 8);
  *(_OWORD *)v35 = *(_OWORD *)v36;
  *(_BYTE *)(v35 + 16) = v38;
  sub_10000BB54(v39, v40, v37);
  return a1;
}

uint64_t sub_1000B774C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000B7758);
}

uint64_t sub_1000B7758(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PrimarySettingsListFollowUpActionModel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1000B7794(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000B77A0);
}

uint64_t sub_1000B77A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PrimarySettingsListFollowUpActionModel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for PrimarySettingsListFollowUpAction(uint64_t a1)
{
  uint64_t result;

  result = qword_10015B198;
  if (!qword_10015B198)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PrimarySettingsListFollowUpAction);
  return result;
}

uint64_t sub_1000B781C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for PrimarySettingsListFollowUpActionModel(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1000B7884(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10012B364, 1);
}

uint64_t sub_1000B7894@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;

  v4 = type metadata accessor for PrimarySettingsListFollowUpActionModel(0);
  v5 = (uint64_t *)(a1 + *(int *)(v4 + 36));
  v6 = *v5;
  v7 = v5[1];
  v8 = *((unsigned __int8 *)v5 + 16);
  v9 = v5[3];
  v10 = static Color.blue.getter(v4);
  v18 = v10;
  v11 = Text.foregroundStyle<A>(_:)(&v18, v6, v7, v8, v9, &type metadata for Color, &protocol witness table for Color);
  v13 = v12;
  LOBYTE(v8) = v14;
  v16 = v15;
  result = swift_release(v10);
  *(_QWORD *)a2 = v11;
  *(_QWORD *)(a2 + 8) = v13;
  *(_BYTE *)(a2 + 16) = v8 & 1;
  *(_QWORD *)(a2 + 24) = v16;
  return result;
}

double sub_1000B7944@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  double result;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  __int128 v24;

  v3 = a1 + *(int *)(type metadata accessor for PrimarySettingsListFollowUpActionModel(0) + 40);
  v4 = *(_QWORD *)v3;
  v5 = *(_QWORD *)(v3 + 8);
  v6 = *(unsigned __int8 *)(v3 + 16);
  if (v6 == 255)
  {
    KeyPath = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v8 = 255;
  }
  else
  {
    KeyPath = swift_getKeyPath(&unk_100119808);
    v8 = 0;
    v9 = v4;
    v10 = v5;
    v11 = v6;
  }
  v12 = sub_100011774(v4, v5, v6);
  v13 = static Alignment.center.getter(v12);
  _FrameLayout.init(width:height:alignment:)(&v20, 0, 1, 0, 0, v13, v14);
  v15 = v20;
  v16 = v21;
  v17 = v22;
  v18 = v23;
  *(_QWORD *)a2 = KeyPath;
  *(_QWORD *)(a2 + 8) = v8;
  *(_QWORD *)(a2 + 16) = v9;
  *(_QWORD *)(a2 + 24) = v10;
  *(_BYTE *)(a2 + 32) = v11;
  *(_QWORD *)(a2 + 40) = v15;
  *(_BYTE *)(a2 + 48) = v16;
  *(_QWORD *)(a2 + 56) = v17;
  *(_BYTE *)(a2 + 64) = v18;
  result = *(double *)&v24;
  *(_OWORD *)(a2 + 72) = v24;
  return result;
}

uint64_t sub_1000B7A4C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  unint64_t v8;
  double v9;
  _BYTE v11[16];
  uint64_t v12;
  _BYTE v13[16];
  uint64_t v14;

  v3 = sub_100004FC8(&qword_10015B1D0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = v1;
  v12 = v1;
  v7 = sub_100004FC8(&qword_10015B1D8);
  v8 = sub_1000B7B80();
  Label.init(title:icon:)(sub_1000B7B70, v13, sub_1000B7B78, v11, &type metadata for Text, v7, &protocol witness table for Text, v8);
  if (*(_BYTE *)(v1 + *(int *)(type metadata accessor for PrimarySettingsListFollowUpActionModel(0) + 24)))
    v9 = 0.5;
  else
    v9 = 1.0;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v4 + 16))(a1, v6, v3);
  *(double *)(a1 + *(int *)(sub_100004FC8(&qword_10015B210) + 36)) = v9;
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1000B7B70@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000B7894(*(_QWORD *)(v1 + 16), a1);
}

double sub_1000B7B78@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000B7944(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_1000B7B80()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015B1E0;
  if (!qword_10015B1E0)
  {
    v1 = sub_100005430(&qword_10015B1D8);
    sub_1000B7CF0(&qword_10015B1E8, &qword_10015B1F0, (void (*)(void))sub_1000B7C0C);
    sub_1000B7C70();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015B1E0);
  }
  return result;
}

unint64_t sub_1000B7C0C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015B1F8;
  if (!qword_10015B1F8)
  {
    v1 = sub_100005430(&qword_10015B200);
    sub_1000116EC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_10015B1F8);
  }
  return result;
}

unint64_t sub_1000B7C70()
{
  unint64_t result;

  result = qword_10015B208;
  if (!qword_10015B208)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for _HiddenModifier, &type metadata for _HiddenModifier);
    atomic_store(result, (unint64_t *)&qword_10015B208);
  }
  return result;
}

uint64_t sub_1000B7CBC()
{
  return sub_1000B7CF0(&qword_10015B218, &qword_10015B210, (void (*)(void))sub_1000B7D58);
}

uint64_t sub_1000B7CF0(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100005430(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000B7D58()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015B220;
  if (!qword_10015B220)
  {
    v1 = sub_100005430(&qword_10015B1D0);
    result = swift_getWitnessTable(&protocol conformance descriptor for Label<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015B220);
  }
  return result;
}

uint64_t sub_1000B7DA4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[5];

  v4 = type metadata accessor for PrimarySettingsListItemViewType(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = type metadata accessor for PrimarySettingsListLinkModel(0);
  __chkstk_darwin(v39);
  v40 = (uint64_t)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004FC8((uint64_t *)&unk_100156F00);
  __chkstk_darwin(v11);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for PrimarySettingsListItemModel(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42[3] = &type metadata for SettingsAppFeatureFlags;
  v42[4] = sub_1000B82E0();
  LOBYTE(v42[0]) = 1;
  v18 = isFeatureEnabled(_:)(v42);
  sub_100005474(v42);
  if ((v18 & 1) == 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(a2, 1, 1, v14);
  v37 = v4;
  v38 = a2;
  sub_1000076F0(v41 + OBJC_IVAR____TtC11SettingsApp22iCloudListItemProvider_id, (uint64_t)v10, type metadata accessor for PrimarySettingsListItemIdentifier);
  v19 = type metadata accessor for StaticPrimarySettingsListItemProvider(0);
  v20 = swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  sub_100007670((uint64_t)v10, v20 + OBJC_IVAR____TtC11SettingsApp37StaticPrimarySettingsListItemProvider_id, type metadata accessor for PrimarySettingsListItemIdentifier);
  sub_1000B2604(a1, (uint64_t)v13);
  swift_setDeallocating(v20);
  sub_1000076B4(v20 + OBJC_IVAR____TtC11SettingsApp37StaticPrimarySettingsListItemProvider_id, type metadata accessor for PrimarySettingsListItemIdentifier);
  swift_deallocClassInstance(v20, *(unsigned int *)(*(_QWORD *)v20 + 48), *(unsigned __int16 *)(*(_QWORD *)v20 + 52));
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_100020148((uint64_t)v13);
LABEL_9:
    a2 = v38;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(a2, 1, 1, v14);
  }
  v21 = v41;
  sub_100007670((uint64_t)v13, (uint64_t)v17, type metadata accessor for PrimarySettingsListItemModel);
  v22 = (uint64_t)&v17[*(int *)(v14 + 20)];
  sub_1000076F0(v22, (uint64_t)v6, type metadata accessor for PrimarySettingsListItemViewType);
  if (swift_getEnumCaseMultiPayload(v6, v37) != 6)
  {
    sub_1000076B4((uint64_t)v6, type metadata accessor for PrimarySettingsListItemViewType);
    sub_1000076B4((uint64_t)v17, type metadata accessor for PrimarySettingsListItemModel);
    goto LABEL_9;
  }
  v36 = v22;
  sub_100007670((uint64_t)v6, v40, type metadata accessor for PrimarySettingsListLinkModel);
  v23 = *(char **)(v21 + OBJC_IVAR____TtC11SettingsApp22iCloudListItemProvider_primaryAppleAccountStatusObserver);
  v24 = *(_QWORD *)&v23[OBJC_IVAR____TtC11SettingsApp33PrimaryAppleAccountStatusObserver_accountStatus];
  v25 = *(_QWORD *)&v23[OBJC_IVAR____TtC11SettingsApp33PrimaryAppleAccountStatusObserver_accountStatus + 8];
  v26 = *(_QWORD *)&v23[OBJC_IVAR____TtC11SettingsApp33PrimaryAppleAccountStatusObserver_accountStatus + 16];
  v27 = *(_QWORD *)&v23[OBJC_IVAR____TtC11SettingsApp33PrimaryAppleAccountStatusObserver_accountStatus + 24];
  v29 = *(_QWORD *)&v23[OBJC_IVAR____TtC11SettingsApp33PrimaryAppleAccountStatusObserver_accountStatus + 32];
  v28 = *(void **)&v23[OBJC_IVAR____TtC11SettingsApp33PrimaryAppleAccountStatusObserver_accountStatus + 40];
  sub_100096F30(v24, v25, v26, v27, v29, v28);
  sub_1000A63C4(v23);
  v30 = v28;
  v31 = v40;
  sub_100096F68(v24, v25, v26, v27, v29, v30);
  if (!v25)
    *(_BYTE *)(v31 + *(int *)(v39 + 32)) = 0;
  v32 = v36;
  sub_1000076B4(v36, type metadata accessor for PrimarySettingsListItemViewType);
  sub_100007670(v31, v32, type metadata accessor for PrimarySettingsListLinkModel);
  swift_storeEnumTagMultiPayload(v32, v37, 6);
  v33 = v38;
  sub_1000076F0((uint64_t)v17, v38, type metadata accessor for PrimarySettingsListItemModel);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(v33, 0, 1, v14);
  return sub_1000076B4((uint64_t)v17, type metadata accessor for PrimarySettingsListItemModel);
}

uint64_t sub_1000B818C()
{
  uint64_t v0;

  sub_1000076B4(v0 + OBJC_IVAR____TtC11SettingsApp22iCloudListItemProvider_id, type metadata accessor for PrimarySettingsListItemIdentifier);

  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000B81D4()
{
  return type metadata accessor for iCloudListItemProvider(0);
}

uint64_t type metadata accessor for iCloudListItemProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_10015B258;
  if (!qword_10015B258)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for iCloudListItemProvider);
  return result;
}

uint64_t sub_1000B8218(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for PrimarySettingsListItemIdentifier(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1000B8290@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_1000076F0(*v1 + OBJC_IVAR____TtC11SettingsApp22iCloudListItemProvider_id, a1, type metadata accessor for PrimarySettingsListItemIdentifier);
}

uint64_t sub_1000B82C0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000B7DA4(a1, a2);
}

unint64_t sub_1000B82E0()
{
  unint64_t result;

  result = qword_10015B2E8;
  if (!qword_10015B2E8)
  {
    result = swift_getWitnessTable(&unk_10011969C, &type metadata for SettingsAppFeatureFlags);
    atomic_store(result, (unint64_t *)&qword_10015B2E8);
  }
  return result;
}

uint64_t destroy for SettingsSearchListItem(uint64_t a1)
{
  sub_10000BB54(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 48));
  return swift_release(*(_QWORD *)(a1 + 64));
}

uint64_t initializeWithCopy for SettingsSearchListItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_10000BB2C(*(_QWORD *)a2, v5, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 64);
  v10 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 64) = v8;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v10);
  swift_retain(v8);
  return a1;
}

uint64_t assignWithCopy for SettingsSearchListItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_10000BB2C(*(_QWORD *)a2, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v9 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v6;
  sub_10000BB54(v7, v8, v9);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 32);
  v11 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 48);
  v13 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v15 = *(_QWORD *)(a2 + 56);
  v14 = *(_QWORD *)(a2 + 64);
  v16 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = v15;
  *(_QWORD *)(a1 + 64) = v14;
  swift_retain(v14);
  swift_release(v16);
  return a1;
}

__n128 initializeWithTake for SettingsSearchListItem(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for SettingsSearchListItem(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v7 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v4;
  sub_10000BB54(v5, v6, v7);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 48));
  v10 = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v10;
  swift_release(v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for SettingsSearchListItem(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SettingsSearchListItem(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SettingsSearchListItem()
{
  return &type metadata for SettingsSearchListItem;
}

uint64_t sub_1000B85FC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10012B3F0, 1);
}

uint64_t sub_1000B860C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  char *v23;
  uint64_t KeyPath;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD v29[2];
  _BYTE v30[16];
  uint64_t v31;
  uint64_t v32;

  v29[1] = a1;
  v2 = sub_100004FC8(&qword_10015B2F0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29[0] = sub_100004FC8(&qword_10015B2F8);
  __chkstk_darwin(v29[0]);
  v7 = (char *)v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004FC8(&qword_10015B300);
  __chkstk_darwin(v8);
  v10 = (char *)v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004FC8(&qword_10015B308);
  __chkstk_darwin(v11);
  v13 = (char *)v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = swift_allocObject(&unk_10014C570, 88, 7);
  v15 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v14 + 48) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v14 + 64) = v15;
  *(_QWORD *)(v14 + 80) = *(_QWORD *)(v1 + 64);
  v16 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v14 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v14 + 32) = v16;
  v31 = v1;
  sub_1000B8E64(v1);
  v17 = sub_100004FC8(&qword_10015B310);
  v18 = sub_1000B8EC0();
  Button.init(action:label:)(sub_1000B8E3C, v14, sub_1000B8E5C, v30, v17, v18);
  v19 = objc_msgSend((id)objc_opt_self(UIColor), "systemGroupedBackgroundColor");
  v20 = Color.init(uiColor:)(v19);
  v32 = v20;
  v21 = swift_retain(v20);
  v22 = AnyView.init<A>(_:)(&v32, &type metadata for Color, &protocol witness table for Color, v21);
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v7, v5, v2);
  swift_release(v20);
  *(_QWORD *)&v7[*(int *)(v29[0] + 36)] = v22;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_100018C00((uint64_t)v7, (uint64_t)v10, &qword_10015B2F8);
  v23 = &v10[*(int *)(v8 + 36)];
  v23[32] = 0;
  *(_OWORD *)v23 = 0u;
  *((_OWORD *)v23 + 1) = 0u;
  sub_10000BA50((uint64_t)v7, &qword_10015B2F8);
  KeyPath = swift_getKeyPath(&unk_1001198E8);
  sub_100018C00((uint64_t)v10, (uint64_t)v13, &qword_10015B300);
  v25 = &v13[*(int *)(v11 + 36)];
  *(_QWORD *)v25 = KeyPath;
  *((_QWORD *)v25 + 1) = 0;
  v25[16] = 0;
  sub_10000BA50((uint64_t)v10, &qword_10015B300);
  v26 = sub_1000B8FB8();
  v27 = sub_1000584E8();
  View.buttonStyle<A>(_:)(v27, v11, &type metadata for SettingsSearchListItemButtonStyle, v26, v27);
  return sub_10000BA50((uint64_t)v13, &qword_10015B308);
}

uint64_t sub_1000B88F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = sub_100004FC8(&qword_10015B328);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v7 = static VerticalAlignment.center.getter(v5);
  *((_QWORD *)v7 + 1) = 0;
  v7[16] = 0;
  v8 = sub_100004FC8(&qword_10015B390);
  sub_1000B89B4(a1, (uint64_t)&v7[*(int *)(v8 + 44)]);
  sub_100018C00((uint64_t)v7, a2, &qword_10015B328);
  *(_BYTE *)(a2 + *(int *)(sub_100004FC8(&qword_10015B310) + 36)) = 0;
  return sub_10000BA50((uint64_t)v7, &qword_10015B328);
}

uint64_t sub_1000B89B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v23;
  uint64_t v24;
  _BYTE v26[12];
  int v27;
  _BYTE v28[16];
  uint64_t v29;

  v4 = sub_100004FC8(&qword_10015B398);
  v5 = __chkstk_darwin(v4);
  v7 = &v26[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  v9 = &v26[-v8];
  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_BYTE *)(a1 + 16);
  KeyPath = swift_getKeyPath(&unk_100119918);
  v14 = sub_10000BB2C(v10, v11, v12);
  v15 = static Edge.Set.all.getter(v14);
  v27 = v15;
  *(_QWORD *)v9 = static HorizontalAlignment.leading.getter(v15);
  *((_QWORD *)v9 + 1) = 0;
  v9[16] = 0;
  sub_100004FC8(&qword_10015B3A0);
  v29 = a1;
  v16 = sub_100004FC8(&qword_10015B3A8);
  v17 = sub_100007868(&qword_10015B3B0, &qword_10015B3A8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  LabelGroup.init(content:)(sub_1000B9164, v28, v16, v17);
  sub_100018C00((uint64_t)v9, (uint64_t)v7, &qword_10015B398);
  *(_QWORD *)a2 = KeyPath;
  *(_BYTE *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 24) = v11;
  *(_BYTE *)(a2 + 32) = v12;
  *(_BYTE *)(a2 + 40) = v27;
  __asm { FMOV            V0.2D, #16.0 }
  *(_OWORD *)(a2 + 48) = _Q0;
  *(_OWORD *)(a2 + 64) = xmmword_100119870;
  *(_BYTE *)(a2 + 80) = 0;
  v23 = sub_100004FC8(&qword_10015B3B8);
  sub_100018C00((uint64_t)v7, a2 + *(int *)(v23 + 48), &qword_10015B398);
  v24 = a2 + *(int *)(v23 + 64);
  *(_QWORD *)v24 = 0;
  *(_BYTE *)(v24 + 8) = 1;
  *(_QWORD *)(v24 + 16) = 0xBFF0000000000000;
  sub_1000425D0(KeyPath, 0);
  sub_10000BB2C(v10, v11, v12);
  sub_10000BA50((uint64_t)v9, &qword_10015B398);
  sub_10000BA50((uint64_t)v7, &qword_10015B398);
  sub_10004260C(KeyPath, 0);
  return sub_10000BB54(v10, v11, v12);
}

uint64_t sub_1000B8BC0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;

  v4 = a1[4];
  v41 = a1[3];
  v42 = v4;
  v5 = sub_100008A5C();
  swift_bridgeObjectRetain(v4);
  v6 = Text.init<A>(_:)(&v41, &type metadata for String, v5);
  v8 = v7;
  v10 = v9;
  v12 = v11 & 1;
  v13 = static Font.body.getter(v6);
  v14 = Text.font(_:)(v13, v6, v8, v12, v10);
  v16 = v15;
  v39 = v17;
  v40 = v18;
  swift_release(v13);
  sub_100007618(v6, v8, v12);
  swift_bridgeObjectRelease(v10);
  v19 = a1[6];
  if (!v19)
    goto LABEL_6;
  v20 = HIBYTE(v19) & 0xF;
  if ((v19 & 0x2000000000000000) == 0)
    v20 = a1[5] & 0xFFFFFFFFFFFFLL;
  if (v20)
  {
    v41 = a1[5];
    v42 = v19;
    swift_bridgeObjectRetain(v19);
    v37 = Text.init<A>(_:)(&v41, &type metadata for String, v5);
    v38 = v21;
    v23 = v22;
    v24 = v21;
    v26 = v25 & 1;
    v28 = static Font.footnote.getter(v27);
    v29 = Text.font(_:)(v28, v37, v23, v26, v24);
    v31 = v30;
    LOBYTE(v24) = v32;
    v34 = v33;
    swift_release(v28);
    v35 = v24 & 1;
    sub_100007618(v37, v23, v26);
    swift_bridgeObjectRelease(v38);
  }
  else
  {
LABEL_6:
    v29 = 0;
    v31 = 0;
    v35 = 0;
    v34 = 0;
  }
  *(_QWORD *)a2 = v14;
  *(_QWORD *)(a2 + 8) = v16;
  *(_BYTE *)(a2 + 16) = v39 & 1;
  *(_QWORD *)(a2 + 24) = v40;
  *(_QWORD *)(a2 + 32) = v29;
  *(_QWORD *)(a2 + 40) = v31;
  *(_QWORD *)(a2 + 48) = v35;
  *(_QWORD *)(a2 + 56) = v34;
  sub_10000BAD4(v14, v16, v39 & 1);
  swift_bridgeObjectRetain(v40);
  sub_10000BAA4(v29, v31, v35, v34);
  sub_10000BAFC(v29, v31, v35, v34);
  sub_100007618(v14, v16, v39 & 1);
  return swift_bridgeObjectRelease(v40);
}

uint64_t sub_1000B8DBC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B860C(a1);
}

uint64_t sub_1000B8DFC()
{
  uint64_t v0;

  sub_10000BB54(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  swift_release(*(_QWORD *)(v0 + 80));
  return swift_deallocObject(v0, 88, 7);
}

uint64_t sub_1000B8E3C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 72))();
}

uint64_t sub_1000B8E5C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000B88F4(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1000B8E64(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 64);
  sub_10000BB2C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRetain(v3);
  swift_retain(v4);
  swift_bridgeObjectRetain(v2);
  return a1;
}

unint64_t sub_1000B8EC0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015B318;
  if (!qword_10015B318)
  {
    v1 = sub_100005430(&qword_10015B310);
    sub_100007868(&qword_10015B320, &qword_10015B328, (uint64_t)&protocol conformance descriptor for HStack<A>);
    sub_100007868(&qword_10015B330, &qword_10015B338, (uint64_t)&protocol conformance descriptor for _ContentShapeModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015B318);
  }
  return result;
}

uint64_t sub_1000B8F5C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.listRowSpacing.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1000B8F8C(uint64_t a1)
{
  return EnvironmentValues.listRowSpacing.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

unint64_t sub_1000B8FB8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015B340;
  if (!qword_10015B340)
  {
    v1 = sub_100005430(&qword_10015B308);
    sub_1000B903C();
    sub_100007868(&qword_10015B380, &qword_10015B388, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015B340);
  }
  return result;
}

unint64_t sub_1000B903C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015B348;
  if (!qword_10015B348)
  {
    v1 = sub_100005430(&qword_10015B300);
    sub_1000B90C0();
    sub_100007868(&qword_10015B370, &qword_10015B378, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015B348);
  }
  return result;
}

unint64_t sub_1000B90C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015B350;
  if (!qword_10015B350)
  {
    v1 = sub_100005430(&qword_10015B2F8);
    sub_100007868(&qword_10015B358, &qword_10015B2F0, (uint64_t)&protocol conformance descriptor for Button<A>);
    sub_100007868(&qword_10015B360, &qword_10015B368, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015B350);
  }
  return result;
}

uint64_t sub_1000B9164@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000B8BC0(*(_QWORD **)(v1 + 16), a1);
}

uint64_t sub_1000B916C()
{
  _QWORD v1[4];

  v1[0] = sub_100005430(&qword_10015B308);
  v1[1] = &type metadata for SettingsSearchListItemButtonStyle;
  v1[2] = sub_1000B8FB8();
  v1[3] = sub_1000584E8();
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
}

uint64_t destroy for PrimarySettingsListSectionIdentifier(uint64_t a1)
{
  return sub_10000BAE4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s11SettingsApp36PrimarySettingsListSectionIdentifierOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_10000BA8C(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for PrimarySettingsListSectionIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_10000BA8C(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_10000BAE4(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for PrimarySettingsListSectionIdentifier(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_10000BAE4(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for PrimarySettingsListSectionIdentifier(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PrimarySettingsListSectionIdentifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_1000B934C(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_1000B9364(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for PrimarySettingsListSectionIdentifier()
{
  return &type metadata for PrimarySettingsListSectionIdentifier;
}

uint64_t sub_1000B938C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  Swift::UInt v7;

  if (a4)
  {
    if (a4 != 1)
      __asm { BR              X9 }
    v7 = 6;
  }
  else
  {
    v7 = 5;
  }
  Hasher._combine(_:)(v7);
  return String.hash(into:)(a1, a2, a3);
}

void sub_1000B93FC()
{
  Hasher._combine(_:)(0);
}

Swift::Int sub_1000B9494()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  _QWORD v5[9];

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_BYTE *)(v0 + 16);
  Hasher.init(_seed:)(v5, 0);
  sub_1000B938C((uint64_t)v5, v1, v2, v3);
  return Hasher._finalize()();
}

uint64_t sub_1000B94EC(uint64_t a1)
{
  uint64_t v1;

  return sub_1000B938C(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16));
}

Swift::Int sub_1000B94F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  _QWORD v6[9];

  v2 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_BYTE *)(v1 + 16);
  Hasher.init(_seed:)(v6, a1);
  sub_1000B938C((uint64_t)v6, v2, v3, v4);
  return Hasher._finalize()();
}

uint64_t sub_1000B954C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000B95E8(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000B9B40);
}

BOOL sub_1000B9558(uint64_t a1, uint64_t a2)
{
  return (sub_1000B9B40(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 16), *(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16)) & 1) == 0;
}

BOOL sub_1000B958C(uint64_t a1, uint64_t a2)
{
  return (sub_1000B9B40(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 16)) & 1) == 0;
}

uint64_t sub_1000B95C0(uint64_t a1, uint64_t a2)
{
  return sub_1000B9B40(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 16), *(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_1000B95DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000B95E8(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000B98A0);
}

uint64_t sub_1000B95E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  return a5(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(unsigned __int8 *)(a2 + 16));
}

unint64_t sub_1000B960C()
{
  unint64_t result;

  result = qword_10015B3C0;
  if (!qword_10015B3C0)
  {
    result = swift_getWitnessTable(&unk_1001199D8, &type metadata for PrimarySettingsListSectionIdentifier);
    atomic_store(result, (unint64_t *)&qword_10015B3C0);
  }
  return result;
}

unint64_t sub_1000B9650(uint64_t a1, void *a2, char a3)
{
  unint64_t v5;
  Swift::String v6;
  unint64_t v8;

  if (a3)
  {
    if (a3 != 1)
      __asm { BR              X10 }
    _StringGuts.grow(_:)(31);
    swift_bridgeObjectRelease(0xE000000000000000);
    v5 = 0xD00000000000001DLL;
  }
  else
  {
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease(0xE000000000000000);
    v5 = 0xD00000000000001BLL;
  }
  v8 = v5;
  v6._countAndFlagsBits = a1;
  v6._object = a2;
  String.append(_:)(v6);
  return v8;
}

void sub_1000B9748()
{
  JUMPOUT(0x1000B9700);
}

void sub_1000B9804()
{
  JUMPOUT(0x1000B9700);
}

void sub_1000B9814()
{
  JUMPOUT(0x1000B9700);
}

void sub_1000B9824()
{
  JUMPOUT(0x1000B9700);
}

void sub_1000B9848()
{
  JUMPOUT(0x1000B9700);
}

void sub_1000B9854()
{
  JUMPOUT(0x1000B9860);
}

void sub_1000B986C()
{
  JUMPOUT(0x1000B9700);
}

void sub_1000B9884()
{
  JUMPOUT(0x1000B9700);
}

unint64_t sub_1000B9894()
{
  uint64_t v0;

  return sub_1000B9650(*(_QWORD *)v0, *(void **)(v0 + 8), *(_BYTE *)(v0 + 16));
}

uint64_t sub_1000B98A0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a3)
  {
    if (a3 != 1)
      return ((uint64_t (*)(void))((char *)&loc_1000B98FC + 4 * byte_100119972[a1]))();
    if (a6 == 1)
    {
      if (a1 == a4 && a2 == a5)
        return 1;
      return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a4, a5, 0);
    }
    return 0;
  }
  if (a6)
    return 0;
  if (a1 == a4 && a2 == a5)
    return 1;
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a4, a5, 0);
}

uint64_t sub_1000B9B40(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  unint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t result;

  if (a3)
  {
    if (a3 != 1)
      __asm { BR              X9 }
    if (a6 != 1)
    {
      v10 = 6;
LABEL_7:
      if (a6)
      {
        if (a6 == 1)
        {
          v11 = 6;
        }
        else
        {
          v11 = 0;
          switch(a4)
          {
            case 0:
              return v10 < v11;
            case 1:
              v11 = 1;
              break;
            case 2:
              v11 = 2;
              break;
            case 3:
              v11 = 3;
              break;
            case 4:
              v11 = 4;
              break;
            case 5:
              v11 = 7;
              break;
            case 6:
              v11 = 8;
              break;
            case 7:
              v11 = 9;
              break;
            case 8:
              v11 = 10;
              break;
            case 9:
              v11 = 11;
              break;
            case 10:
              v11 = 12;
              break;
            case 11:
              v11 = 13;
              break;
            case 12:
              v11 = 14;
              break;
            case 13:
              v11 = 15;
              break;
            case 14:
              v11 = 16;
              break;
            default:
              JUMPOUT(0x1000B9E00);
          }
        }
      }
      else
      {
        v11 = 5;
      }
      return v10 < v11;
    }
  }
  else if (a6)
  {
    v10 = 5;
    goto LABEL_7;
  }
  if (a1 == a4 && a2 == a5)
    return 0;
  v12 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a4, a5, 0);
  result = 0;
  if ((v12 & 1) == 0)
    return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a4, a5, 1);
  return result;
}

void sub_1000B9EA4()
{
  JUMPOUT(0x1000B9C38);
}

void sub_1000B9EAC()
{
  JUMPOUT(0x1000B9C38);
}

uint64_t sub_1000B9F34@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t);
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;

  v67 = a2;
  v69 = a3;
  v65 = type metadata accessor for PrimarySettingsListBadgedLinkModel(0);
  __chkstk_darwin(v65);
  v64 = (uint64_t)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = type metadata accessor for PrimarySettingsListItemViewType(0);
  __chkstk_darwin(v68);
  v6 = (char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for PrimarySettingsListLinkModel(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100004FC8((uint64_t *)&unk_100156F00);
  __chkstk_darwin(v10);
  v66 = (uint64_t)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v13 = __chkstk_darwin(v12);
  __chkstk_darwin(v13);
  v17 = (uint64_t *)((char *)&v60 - v15);
  v19 = *a1;
  v18 = a1[1];
  v21 = a1[2];
  v20 = a1[3];
  v23 = a1[4];
  v22 = (_QWORD *)a1[5];
  v24 = a1[6];
  if ((a1[8] & 1) != 0)
  {
    v62 = (uint64_t)v9;
    v63 = v6;
    v61 = v7;
    v25 = (int *)v65;
    *v17 = v19;
    v17[1] = v18;
    v17[2] = v21;
    v17[3] = v20;
    v17[4] = v23;
    v17[5] = v22;
    v17[6] = v24;
    v26 = v16;
    v27 = v22;
    v28 = v20;
    v29 = v18;
    swift_storeEnumTagMultiPayload((char *)&v60 - v15, v14, 4);
    sub_1000076F0((uint64_t)v17, v26, type metadata accessor for PrimarySettingsListItemIdentifier);
    v30 = type metadata accessor for StaticPrimarySettingsListItemProvider(0);
    v31 = swift_allocObject(v30, *(unsigned int *)(v30 + 48), *(unsigned __int16 *)(v30 + 52));
    sub_100007670(v26, v31 + OBJC_IVAR____TtC11SettingsApp37StaticPrimarySettingsListItemProvider_id, type metadata accessor for PrimarySettingsListItemIdentifier);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v27);
    v32 = v66;
    sub_1000B2604(v67, v66);
    swift_setDeallocating(v31);
    sub_1000076B4(v31 + OBJC_IVAR____TtC11SettingsApp37StaticPrimarySettingsListItemProvider_id, type metadata accessor for PrimarySettingsListItemIdentifier);
    swift_deallocClassInstance(v31, *(unsigned int *)(*(_QWORD *)v31 + 48), *(unsigned __int16 *)(*(_QWORD *)v31 + 52));
    sub_1000076B4((uint64_t)v17, type metadata accessor for PrimarySettingsListItemIdentifier);
    v33 = type metadata accessor for PrimarySettingsListItemModel(0);
    v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 48);
    v35 = v34(v32, 1, v33);
    v36 = (uint64_t)v69;
    if (!v35)
    {
      v37 = (uint64_t)v63;
      sub_1000076F0(v32 + *(int *)(v33 + 20), (uint64_t)v63, type metadata accessor for PrimarySettingsListItemViewType);
      if (swift_getEnumCaseMultiPayload(v37, v68) == 6)
      {
        v38 = v37;
        v39 = v62;
        sub_100007670(v38, v62, type metadata accessor for PrimarySettingsListLinkModel);
        v40 = v26;
        sub_1000076F0(v39, v26, type metadata accessor for PrimarySettingsListItemIdentifier);
        v41 = *(int *)(v61 + 24);
        LODWORD(v67) = *(unsigned __int8 *)(v39 + *(int *)(v61 + 20));
        v42 = *(_QWORD *)(v39 + v41 + 8);
        v63 = *(char **)(v39 + v41);
        v43 = *(_BYTE *)(v39 + v41 + 16);
        v44 = *(_QWORD *)(v39 + v41 + 24);
        sub_10000BAD4((uint64_t)v63, v42, v43);
        swift_bridgeObjectRetain(v44);
        sub_1000076B4(v39, type metadata accessor for PrimarySettingsListLinkModel);
        v45 = v64 + v25[7];
        v62 = v25[9];
        v46 = v40;
        v47 = v64;
        sub_100007670(v46, v64, type metadata accessor for PrimarySettingsListItemIdentifier);
        *(_BYTE *)(v47 + v25[5]) = (_BYTE)v67;
        v48 = v47 + v25[6];
        *(_QWORD *)v48 = v63;
        *(_QWORD *)(v48 + 8) = v42;
        *(_BYTE *)(v48 + 16) = v43;
        *(_QWORD *)(v48 + 24) = v44;
        *(_QWORD *)(v47 + v25[8]) = 1;
        *(_QWORD *)v45 = 0;
        *(_QWORD *)(v45 + 8) = 0;
        *(_BYTE *)(v45 + 16) = -1;
        *(_BYTE *)(v47 + v62) = 2;
        if (v34(v32, 1, v33))
        {
          sub_1000076B4(v47, type metadata accessor for PrimarySettingsListBadgedLinkModel);
        }
        else
        {
          v59 = v32 + *(int *)(v33 + 20);
          sub_1000076B4(v59, type metadata accessor for PrimarySettingsListItemViewType);
          sub_100007670(v47, v59, type metadata accessor for PrimarySettingsListBadgedLinkModel);
          swift_storeEnumTagMultiPayload(v59, v68, 7);
        }
        v36 = (uint64_t)v69;
      }
      else
      {
        sub_1000076B4(v37, type metadata accessor for PrimarySettingsListItemViewType);
      }
    }
    return sub_10007E96C(v32, v36, (uint64_t *)&unk_100156F00);
  }
  else
  {
    v49 = a1[7];
    v50 = v69;
    *v69 = v19;
    v50[1] = v18;
    v50[2] = v21;
    v50[3] = v20;
    v50[4] = v23;
    v50[5] = v22;
    v50[6] = v24;
    v50[7] = v49;
    v66 = v20;
    v67 = v22;
    v51 = v18;
    swift_storeEnumTagMultiPayload(v50, v14, 3);
    v52 = type metadata accessor for PrimarySettingsListItemModel(0);
    v53 = (uint64_t)v50 + *(int *)(v52 + 20);
    sub_1000076F0((uint64_t)v50, v53, type metadata accessor for PrimarySettingsListItemIdentifier);
    v54 = (_QWORD *)(v53
                   + *(int *)(type metadata accessor for PrimarySettingsListSecondaryAppleAccountLinkModel(0) + 20));
    *v54 = v19;
    v54[1] = v51;
    v54[2] = v21;
    v55 = v66;
    v54[3] = v66;
    v54[4] = v23;
    v57 = v67;
    v56 = v68;
    v54[5] = v67;
    v54[6] = v24;
    v54[7] = v49;
    swift_storeEnumTagMultiPayload(v53, v56, 1);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v50, 0, 1, v52);
    swift_bridgeObjectRetain_n(v51, 2);
    swift_bridgeObjectRetain_n(v55, 2);
    swift_bridgeObjectRetain_n(v57, 2);
    return swift_bridgeObjectRetain_n(v49, 2);
  }
}

uint64_t sub_1000BA470()
{
  uint64_t v0;

  sub_10000BAE4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocClassInstance(v0, 56, 7);
}

uint64_t type metadata accessor for SecondaryAppleAccountSectionModelProvider()
{
  return objc_opt_self(_TtC11SettingsApp41SecondaryAppleAccountSectionModelProvider);
}

uint64_t sub_1000BA4C8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  void **v5;
  _BYTE v7[96];

  v4 = *v2;
  v5 = (void **)sub_100007C2C(a1, a1[3]);
  sub_1000BA51C(*v5, v4, (uint64_t)v7);
  return sub_10007E96C((uint64_t)v7, a2, (uint64_t *)&unk_10015C9B0);
}

double sub_1000BA51C@<D0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  double result;
  _QWORD v18[4];
  _BYTE v19[32];
  _QWORD *v20;
  _QWORD v21[5];

  v21[3] = &type metadata for PrimarySettingsListDataModelGenerationContext;
  v21[4] = &off_100148E38;
  v21[0] = a1;
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(v5 + 16);
  v7 = a1;
  swift_bridgeObjectRetain(v6);
  sub_1000C1E48(v5);
  if (*(_QWORD *)(v6 + 16))
  {
    __chkstk_darwin(v8);
    v18[2] = v21;
    v9 = sub_10006ED90((void (*)(uint64_t *))sub_1000BA680, (uint64_t)v18, v6);
    swift_bridgeObjectRelease(v6);
    v20 = v9;
    v10 = *(_QWORD *)(a2 + 48) + OBJC_IVAR____TtC11SettingsApp29FollowUpListElementsGenerator_currentSnapshot;
    swift_beginAccess(v10, v19, 0, 0);
    v11 = *(_QWORD *)(v10 + 56);
    if (*(_QWORD *)(v11 + 16))
    {
      v12 = swift_bridgeObjectRetain(v11);
      sub_1000F20B8(v12);
      v9 = v20;
    }
    v13 = *(_QWORD *)(a2 + 16);
    v14 = *(_QWORD *)(a2 + 24);
    v15 = *(_BYTE *)(a2 + 32);
    v16 = v15;
    sub_10000BA8C(v13, v14, v15);
  }
  else
  {
    swift_bridgeObjectRelease(v6);
    v13 = 0;
    v14 = 0;
    v16 = 0;
    v9 = 0;
  }
  sub_100005474(v21);
  *(_QWORD *)a3 = v13;
  *(_QWORD *)(a3 + 8) = v14;
  *(_QWORD *)(a3 + 16) = v16;
  result = 0.0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_QWORD *)(a3 + 88) = v9;
  return result;
}

uint64_t sub_1000BA680@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_1000B9F34(a1, *(_QWORD **)(v2 + 16), a2);
}

ValueMetadata *type metadata accessor for SettingsSearchZeroKeywordListSuggestionsStack()
{
  return &type metadata for SettingsSearchZeroKeywordListSuggestionsStack;
}

unint64_t sub_1000BA6AC()
{
  unint64_t result;

  result = qword_10015B478;
  if (!qword_10015B478)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for EmptyAnimatableData, &type metadata for EmptyAnimatableData);
    atomic_store(result, (unint64_t *)&qword_10015B478);
  }
  return result;
}

double sub_1000BA700(uint64_t a1, char a2)
{
  return sub_1000BA858(a1, a2 & 1);
}

uint64_t sub_1000BA710(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_1000BA904(a9, a1, a2, a3, a4);
}

uint64_t sub_1000BA71C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_1000BA774(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(uint64_t))&Layout.explicitAlignment(of:in:proposal:subviews:cache:));
}

uint64_t sub_1000BA748(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_1000BA774(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(uint64_t))&Layout.explicitAlignment(of:in:proposal:subviews:cache:));
}

uint64_t sub_1000BA774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t))
{
  return a10(a1);
}

void (*sub_1000BA7B0(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Animatable<>.animatableData.modify();
  return sub_10005580C;
}

unint64_t sub_1000BA814()
{
  unint64_t result;

  result = qword_10015B480;
  if (!qword_10015B480)
  {
    result = swift_getWitnessTable(&unk_100119B80, &type metadata for SettingsSearchZeroKeywordListSuggestionsStack);
    atomic_store(result, (unint64_t *)&qword_10015B480);
  }
  return result;
}

double sub_1000BA858(uint64_t a1, char a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  double result;
  uint64_t v8;
  uint64_t v9;

  v4 = type metadata accessor for LayoutSubviews(0);
  v5 = sub_1000BACD4();
  dispatch thunk of Collection.startIndex.getter(&v9, v4, v5);
  dispatch thunk of Collection.endIndex.getter(&v8, v4, v5);
  v6 = dispatch thunk of Collection.distance(from:to:)(&v9, &v8, v4, v5);
  result = *(double *)&a1;
  if ((a2 & 1) != 0)
    result = 10.0;
  if (v6 != 4)
    return 0.0;
  return result;
}

uint64_t sub_1000BA904(uint64_t a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;
  double Width;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v31;
  uint64_t v32;
  char *v33;
  void (*v34)(_QWORD *, _QWORD);
  void (*v35)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  double v37;
  double v38;
  char *v39;
  uint64_t v40;
  BOOL v41;
  double v42;
  void (*v43)(char *, uint64_t, uint64_t);
  uint64_t v44;
  char *v45;
  uint64_t v46;
  _QWORD v47[4];
  uint64_t v48;
  CGRect v49;

  v10 = type metadata accessor for LayoutSubview(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for LayoutSubviews(0);
  v44 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100004FC8(&qword_10015B488);
  __chkstk_darwin(v17);
  v19 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_100004FC8(&qword_10015B490);
  v20 = __chkstk_darwin(v46);
  v22 = (char *)&v42 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v24 = (char *)&v42 - v23;
  v25 = sub_1000BACD4();
  dispatch thunk of Collection.startIndex.getter(v47, v14, v25);
  dispatch thunk of Collection.endIndex.getter(&v48, v14, v25);
  result = dispatch thunk of Collection.distance(from:to:)(v47, &v48, v14, v25);
  if (result == 4)
  {
    v49.origin.x = a2;
    v49.origin.y = a3;
    v49.size.width = a4;
    v49.size.height = a5;
    Width = CGRectGetWidth(v49);
    v43 = *(void (**)(char *, uint64_t, uint64_t))(v44 + 16);
    v43(v22, a1, v14);
    dispatch thunk of Collection.startIndex.getter(v47, v14, v25);
    v28 = v46;
    *(_QWORD *)&v22[*(int *)(v46 + 36)] = v47[0];
    sub_1000BAD1C((uint64_t)v22, (uint64_t)v24);
    v45 = &v24[*(int *)(v28 + 36)];
    v46 = v25;
    v29 = *(_QWORD *)v45;
    dispatch thunk of Collection.endIndex.getter(v47, v14, v25);
    if (v29 == v47[0])
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v19, 1, 1, v10);
    }
    else
    {
      v30 = (Width + -38.0 + -24.0) * 0.25 + 8.0;
      v42 = (Width + -38.0 + -24.0) * 0.25;
      v31 = 19.0;
      while (1)
      {
        v33 = v45;
        v32 = v46;
        v34 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read(v47, v45, v14, v46);
        (*(void (**)(char *))(v11 + 16))(v19);
        v34(v47, 0);
        v43(v16, (uint64_t)v24, v14);
        dispatch thunk of Collection.formIndex(after:)(v33, v14, v32);
        (*(void (**)(char *, uint64_t))(v44 + 8))(v16, v14);
        v35 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
        v35(v19, 0, 1, v10);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v19, 1, v10) == 1)
          break;
        v36 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 32))(v13, v19, v10);
        v37 = static UnitPoint.topLeading.getter(v36);
        LOBYTE(v47[0]) = 0;
        LOBYTE(v48) = 0;
        LayoutSubview.place(at:anchor:proposal:)(*(_QWORD *)&v42, 0, 0x405E000000000000, 0, v31, 17.0, v37, v38);
        (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
        v31 = v30 + v31;
        v39 = v13;
        v40 = *(_QWORD *)v45;
        dispatch thunk of Collection.endIndex.getter(v47, v14, v46);
        v41 = v40 == v47[0];
        v13 = v39;
        if (v41)
        {
          v35(v19, 1, 1, v10);
          return sub_1000BAD64((uint64_t)v24);
        }
      }
    }
    return sub_1000BAD64((uint64_t)v24);
  }
  return result;
}

unint64_t sub_1000BACD4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015B498;
  if (!qword_10015B498)
  {
    v1 = type metadata accessor for LayoutSubviews(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for LayoutSubviews, v1);
    atomic_store(result, (unint64_t *)&qword_10015B498);
  }
  return result;
}

uint64_t sub_1000BAD1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004FC8(&qword_10015B490);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000BAD64(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004FC8(&qword_10015B490);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000BADA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  id v24;
  void *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  char *v34;
  const char *v35;
  id v36;
  uint64_t v37;
  const char *v38;
  id v39;
  char *v40;
  id v41;
  uint64_t v42;
  id v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  const char *v47;
  id v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  void *v55;
  NSString v56;
  id v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  void *v66;
  int pearlIDCapability;
  id v68;
  void *v69;
  char isSimulator;
  id v71;
  void *v72;
  int touchIDCapability;
  id v74;
  void *v75;
  char v76;
  id v77;
  _QWORD *v78;
  uint64_t v79;
  NSString v80;
  unint64_t *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  id v89;
  void *v90;
  id v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  id v98;
  char *v99;
  char *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  id v106;
  void *v107;
  NSString v108;
  id v109;
  id v110;
  uint64_t ObjCClassMetadata;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  id v115;
  unint64_t *v116;
  _QWORD *v117;
  id v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  id v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  id v130;
  uint64_t v131;
  id v132;
  id v133;
  id v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  NSString v151;
  _QWORD *v152;
  uint64_t v153;
  NSString v154;
  uint64_t v155;
  id v156;
  char *v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  __objc2_prot *v173;
  _QWORD v174[3];
  uint64_t v175;
  uint64_t v176;
  _QWORD v177[3];
  uint64_t v178;
  uint64_t v179;
  __objc2_prot *v180;
  __objc2_prot *v181;
  __objc2_prot *v182;

  v166 = a1;
  v2 = type metadata accessor for NSBundle.SettingsPluginVariant(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v163 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v165 = type metadata accessor for SettingsAnyPlatformViewControllerRecipe(0);
  v164 = *(_QWORD *)(v165 - 8);
  v5 = __chkstk_darwin(v165);
  v7 = (char *)&v163 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v163 = (char *)&v163 - v8;
  v9 = type metadata accessor for FamilyRowStatus(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v163 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for NSBundle.PreferencesPluginLocation(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v167 = (char *)&v163 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v172 = type metadata accessor for PreferencesControllerRecipe(0);
  v170 = *(_QWORD *)(v172 - 8);
  v16 = __chkstk_darwin(v172);
  v169 = (char *)&v163 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v171 = (char *)&v163 - v18;
  v19 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  __chkstk_darwin(v19);
  v21 = (char **)((char *)&v163 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v168 = v1;
  sub_100012DC4(v1, (uint64_t)v21);
  switch(swift_getEnumCaseMultiPayload(v21, v19))
  {
    case 0u:
      v22 = *(void **)(v166 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_pendingFollowUpController);
      if (!v22)
        goto LABEL_118;
      *(_QWORD *)(v166 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_pendingFollowUpController) = 0;
      v180 = &OBJC_PROTOCOL___PSController;
      v23 = swift_dynamicCastObjCProtocolConditional(v22, 1, &v180);
      v24 = v22;
      v25 = v24;
      if (v23)
      {
        v26 = v171;
        PreferencesControllerRecipe.init(viewController:)(v23);
        v27 = v169;
        v28 = v170;
        v29 = v172;
        (*(void (**)(char *, char *, uint64_t))(v170 + 16))(v169, v26, v172);
        v30 = type metadata accessor for PreferencesControllerRepresentableModel(0);
        swift_allocObject(v30, *(unsigned int *)(v30 + 48), *(unsigned __int16 *)(v30 + 52));
        v31 = PreferencesControllerRepresentableModel.init(recipe:)(v27);

        (*(void (**)(char *, uint64_t))(v28 + 8))(v26, v29);
        v32 = v31 | 0x4000000000000000;
      }
      else
      {
        v144 = v163;
        SettingsAnyPlatformViewControllerRecipe.init(_:)(v24);
        v145 = v164;
        v146 = v165;
        (*(void (**)(char *, char *, uint64_t))(v164 + 16))(v7, v144, v165);
        v147 = type metadata accessor for SettingsAnyPlatformViewControllerModel(0);
        swift_allocObject(v147, *(unsigned int *)(v147 + 48), *(unsigned __int16 *)(v147 + 52));
        v32 = SettingsAnyPlatformViewControllerModel.init(recipe:)(v7);

        (*(void (**)(char *, uint64_t))(v145 + 8))(v144, v146);
      }
      v148 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v148 - 8) + 8))(v21, v148);
      return v32;
    case 3u:
      v102 = v21[1];
      v103 = v21[3];
      v104 = v21[5];
      v105 = v21[7];
      v106 = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
      if (!v106)
        goto LABEL_113;
      v107 = v106;
      v108 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v105);
      swift_bridgeObjectRelease(v104);
      swift_bridgeObjectRelease(v103);
      swift_bridgeObjectRelease(v102);
      v109 = objc_msgSend(v107, "accountWithIdentifier:", v108);

      if (!v109)
        goto LABEL_114;
      v110 = objc_msgSend((id)objc_opt_self(DMCEnrollmentInterface), "preferredViewControllerClassForAccount:preferiCloudAccount:", v109, 1);

      if (v110)
      {
        ObjCClassMetadata = swift_getObjCClassMetadata(v110);
        v181 = &OBJC_PROTOCOL___PSController;
        v112 = swift_dynamicCastTypeToObjCProtocolConditional(ObjCClassMetadata, 1, &v181);
        if (v112)
        {
          v113 = v112;
          v114 = sub_100007BBC(0, (unint64_t *)&qword_1001571F8, UIViewController_ptr);
          v63 = swift_dynamicCastMetatype(ObjCClassMetadata, v114) ? v113 : 0;
          if (v63)
            goto LABEL_85;
        }
      }
      v64 = 67;
      goto LABEL_58;
    case 4u:
      v51 = v21[1];
      v52 = v21[3];
      v53 = v21[5];
      v54 = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
      if (!v54)
      {
        __break(1u);
LABEL_111:
        __break(1u);
LABEL_112:
        __break(1u);
LABEL_113:
        __break(1u);
LABEL_114:
        __break(1u);
        goto LABEL_115;
      }
      v55 = v54;
      v56 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v53);
      swift_bridgeObjectRelease(v52);
      swift_bridgeObjectRelease(v51);
      v57 = objc_msgSend(v55, "accountWithIdentifier:", v56);

      if (!v57)
        goto LABEL_111;
      v58 = objc_msgSend((id)objc_opt_self(DMCEnrollmentInterface), "preferredViewControllerClassForAccount:preferiCloudAccount:", v57, 1);

      if (v58)
      {
        v59 = swift_getObjCClassMetadata(v58);
        v182 = &OBJC_PROTOCOL___PSController;
        v60 = swift_dynamicCastTypeToObjCProtocolConditional(v59, 1, &v182);
        if (v60)
        {
          v61 = v60;
          v62 = sub_100007BBC(0, (unint64_t *)&qword_1001571F8, UIViewController_ptr);
          v63 = swift_dynamicCastMetatype(v59, v62) ? v61 : 0;
          if (v63)
          {
LABEL_85:
            v133 = sub_10009F3A0();
            v40 = v171;
            PreferencesControllerRecipe.init(viewControllerClass:specifier:)(v63, v133);
            goto LABEL_95;
          }
        }
      }
      v64 = 77;
LABEL_58:
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000043, 0x8000000100125DC0, "SettingsApp/PrimarySettingsListItemIdentifier+SettingsAppDetailContent.swift", 76, 2, v64, 0);
LABEL_59:
      __break(1u);
LABEL_60:
      v115 = sub_10009F3A0();
      v44 = v167;
      static NSBundle.PreferencesPluginLocation.default.getter();
      v45 = 0xD000000000000014;
      v101 = 0x8000000100125D50;
      v40 = v171;
      v41 = v115;
      v37 = 0x7474655369466957;
      v46 = 0xEC00000073676E69;
LABEL_74:
      v100 = v44;
LABEL_94:
      PreferencesControllerRecipe.init(specifier:bundleName:location:viewControllerClassName:)(v41, v37, v46, v100, v45, v101);
LABEL_95:
      v135 = v169;
      v136 = v170;
      v137 = v172;
      (*(void (**)(char *, char *, uint64_t))(v170 + 16))(v169, v40, v172);
      v138 = type metadata accessor for PreferencesControllerRepresentableModel(0);
      swift_allocObject(v138, *(unsigned int *)(v138 + 48), *(unsigned __int16 *)(v138 + 52));
      v97 = PreferencesControllerRepresentableModel.init(recipe:)(v135);
      (*(void (**)(char *, uint64_t))(v136 + 8))(v40, v137);
      return v97 | 0x4000000000000000;
    case 5u:
      v122 = sub_100007BBC(0, &qword_10015B4D0, HPSHeadphoneConfigController_ptr);
      v123 = sub_10009F3A0();
      v124 = v171;
      PreferencesControllerRecipe.init(viewControllerClass:specifier:)(v122, v123);
      v125 = v169;
      v126 = v170;
      v127 = v172;
      (*(void (**)(char *, char *, uint64_t))(v170 + 16))(v169, v124, v172);
      v128 = type metadata accessor for PreferencesControllerRepresentableModel(0);
      swift_allocObject(v128, *(unsigned int *)(v128 + 48), *(unsigned __int16 *)(v128 + 52));
      v129 = PreferencesControllerRepresentableModel.init(recipe:)(v125);
      (*(void (**)(char *, uint64_t))(v126 + 8))(v124, v127);
      v32 = v129 | 0x4000000000000000;
      sub_10000BBB8((uint64_t)v21);
      return v32;
    case 6u:
      v43 = sub_10009F3A0();
      if (qword_100156DF0 != -1)
        swift_once(&qword_100156DF0, sub_100109CF0);
      v131 = sub_100007808(v13, (uint64_t)qword_10015D4C0);
      v44 = v167;
      (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v167, v131, v13);
      v37 = 0xD000000000000014;
      v45 = 0xD00000000000001ELL;
      v46 = 0x8000000100125E50;
      v47 = "AAUIAppleAccountViewController";
      goto LABEL_73;
    case 7u:
      static FamilySettingsFactory.sharedProvider.getter(v177);
      v83 = v178;
      v84 = v179;
      sub_100007C2C(v177, v178);
      static FamilySettingsFactory.sharedProvider.getter(v174);
      v86 = v175;
      v85 = v176;
      sub_100007C2C(v174, v175);
      dispatch thunk of FamilySettingsViewsProtocol.rowStatus.getter(v86, v85);
      v87 = (void *)dispatch thunk of FamilySettingsViewsProtocol.viewController(for:)(v12, v83, v84);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      sub_100005474(v174);
      sub_100005474(v177);
      v173 = &OBJC_PROTOCOL___PSController;
      v88 = swift_dynamicCastObjCProtocolConditional(v87, 1, &v173);
      v89 = v87;
      v90 = v89;
      if (v88)
      {
        v91 = sub_10009F3A0();
        v92 = v171;
        PreferencesControllerRecipe.init(viewController:specifier:)(v88, v91);
        v93 = v169;
        v94 = v170;
        v95 = v172;
        (*(void (**)(char *, char *, uint64_t))(v170 + 16))(v169, v92, v172);
        v96 = type metadata accessor for PreferencesControllerRepresentableModel(0);
        swift_allocObject(v96, *(unsigned int *)(v96 + 48), *(unsigned __int16 *)(v96 + 52));
        v97 = PreferencesControllerRepresentableModel.init(recipe:)(v93);

        (*(void (**)(char *, uint64_t))(v94 + 8))(v92, v95);
        return v97 | 0x4000000000000000;
      }
      v140 = v163;
      SettingsAnyPlatformViewControllerRecipe.init(_:)(v89);
      v141 = v164;
      v142 = v165;
      (*(void (**)(char *, char *, uint64_t))(v164 + 16))(v7, v140, v165);
      v143 = type metadata accessor for SettingsAnyPlatformViewControllerModel(0);
      swift_allocObject(v143, *(unsigned int *)(v143 + 48), *(unsigned __int16 *)(v143 + 52));
      v32 = SettingsAnyPlatformViewControllerModel.init(recipe:)(v7);

      (*(void (**)(char *, uint64_t))(v141 + 8))(v140, v142);
      return v32;
    case 9u:
      goto LABEL_60;
    case 0xAu:
      v43 = sub_10009F3A0();
      v44 = v167;
      static NSBundle.PreferencesPluginLocation.default.getter();
      v45 = 0xD000000000000017;
      v37 = 0xD000000000000020;
      v46 = 0x8000000100123FC0;
      v47 = "AppleEthernetController";
      goto LABEL_73;
    case 0xBu:
      v132 = sub_10009F3A0();
      v44 = v167;
      static NSBundle.PreferencesPluginLocation.default.getter();
      v45 = 0xD000000000000014;
      v46 = 0x8000000100123FA0;
      v101 = 0x8000000100125D10;
      v40 = v171;
      v41 = v132;
      v37 = 0xD000000000000011;
      goto LABEL_74;
    case 0xCu:
      v36 = sub_10009F3A0();
      v34 = v167;
      static NSBundle.PreferencesPluginLocation.default.getter();
      v37 = 0xD000000000000010;
      v38 = "SettingsCellular";
      goto LABEL_92;
    case 0xDu:
      v43 = sub_10009F3A0();
      v44 = v167;
      static NSBundle.PreferencesPluginLocation.default.getter();
      v37 = 0xD000000000000015;
      v45 = 0xD000000000000017;
      v46 = 0x8000000100125CD0;
      v47 = "WirelessModemController";
      goto LABEL_73;
    case 0xEu:
      v98 = sub_10009F3A0();
      v99 = v167;
      static NSBundle.PreferencesPluginLocation.default.getter();
      v40 = v171;
      v41 = v98;
      v37 = 0x65666572504E5056;
      v46 = 0xEE007365636E6572;
      v100 = v99;
      v45 = 0x72746E6F434E5056;
      v101 = 0xED000072656C6C6FLL;
      goto LABEL_94;
    case 0xFu:
      v33 = sub_10009F3A0();
      v34 = v167;
      static NSBundle.PreferencesPluginLocation.default.getter();
      v35 = "ClassroomSettings";
      goto LABEL_88;
    case 0x11u:
      v43 = sub_10009F3A0();
      v44 = v167;
      static NSBundle.PreferencesPluginLocation.default.getter();
      v37 = 0xD000000000000015;
      v45 = 0xD000000000000017;
      v46 = 0x8000000100125C50;
      v47 = "BulletinBoardController";
      goto LABEL_73;
    case 0x12u:
      v116 = (unint64_t *)&unk_10015B4C8;
      v117 = SHSSoundsPrefController_ptr;
      goto LABEL_83;
    case 0x13u:
      v118 = sub_10009F3A0();
      v44 = v167;
      static NSBundle.PreferencesPluginLocation.default.getter();
      v45 = 0xD00000000000001ALL;
      v101 = 0x8000000100125C30;
      v40 = v171;
      v41 = v118;
      v37 = 0x7465537375636F46;
      v46 = 0xED000073676E6974;
      goto LABEL_74;
    case 0x14u:
      v36 = sub_10009F3A0();
      v34 = v167;
      static NSBundle.PreferencesPluginLocation.default.getter();
      v37 = 0xD000000000000012;
      v38 = "ScreenTimeSettings";
      goto LABEL_92;
    case 0x15u:
      v116 = (unint64_t *)&unk_10015B4C0;
      v117 = PSGGeneralController_ptr;
      goto LABEL_83;
    case 0x16u:
      v36 = sub_10009F3A0();
      v34 = v167;
      static NSBundle.PreferencesPluginLocation.default.getter();
      v37 = 0xD000000000000015;
      v38 = "ControlCenterSettings";
      goto LABEL_92;
    case 0x17u:
      v36 = sub_10009F3A0();
      v34 = v167;
      static NSBundle.PreferencesPluginLocation.default.getter();
      v37 = 0xD000000000000014;
      v38 = "ActionButtonSettings";
      goto LABEL_92;
    case 0x18u:
      v116 = (unint64_t *)&unk_10015B4B8;
      v117 = DBSSettingsController_ptr;
LABEL_83:
      v50 = sub_100007BBC(0, v116, v117);
      goto LABEL_84;
    case 0x19u:
      v36 = sub_10009F3A0();
      v34 = v167;
      static NSBundle.PreferencesPluginLocation.default.getter();
      v37 = 0xD000000000000012;
      v38 = "HomeScreenSettings";
      goto LABEL_92;
    case 0x1Au:
      v36 = sub_10009F3A0();
      v34 = v167;
      static NSBundle.PreferencesPluginLocation.default.getter();
      v37 = 0xD00000000000001FLL;
      v38 = "MultitaskingAndGesturesSettings";
      goto LABEL_92;
    case 0x1Bu:
      v36 = sub_10009F3A0();
      v34 = v167;
      static NSBundle.PreferencesPluginLocation.default.getter();
      v37 = 0xD000000000000015;
      v38 = "AccessibilitySettings";
      goto LABEL_92;
    case 0x1Cu:
      v33 = sub_10009F3A0();
      v34 = v167;
      static NSBundle.PreferencesPluginLocation.default.getter();
      v35 = "WallpaperSettings";
      goto LABEL_88;
    case 0x1Du:
      v48 = sub_10009F3A0();
      v34 = v167;
      static NSBundle.PreferencesPluginLocation.default.getter();
      v40 = v171;
      v41 = v48;
      v37 = 0x53746E6569626D41;
      v46 = 0xEF73676E69747465;
      goto LABEL_93;
    case 0x1Eu:
      v33 = sub_10009F3A0();
      v34 = v167;
      static NSBundle.PreferencesPluginLocation.default.getter();
      v35 = "AssistantSettings";
      goto LABEL_88;
    case 0x1Fu:
      v36 = sub_10009F3A0();
      v34 = v167;
      static NSBundle.PreferencesPluginLocation.default.getter();
      v37 = 0xD000000000000010;
      v38 = "SpotlightSetting";
      goto LABEL_92;
    case 0x20u:
      v49 = sub_10009F3A0();
      v34 = v167;
      static NSBundle.PreferencesPluginLocation.default.getter();
      v40 = v171;
      v41 = v49;
      v42 = 0x6C69636E6550;
      goto LABEL_18;
    case 0x21u:
      v65 = (id)MobileGestalt_get_current_device();
      if (!v65)
        goto LABEL_112;
      v66 = v65;
      pearlIDCapability = MobileGestalt_get_pearlIDCapability();

      if (!pearlIDCapability)
        goto LABEL_36;
      v68 = (id)MobileGestalt_get_current_device();
      if (!v68)
        goto LABEL_116;
      v69 = v68;
      isSimulator = MobileGestalt_get_isSimulator(v68);

      if ((isSimulator & 1) == 0)
      {
        v77 = sub_10009F3A0();
        v149 = (_QWORD *)(v166 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_cachedPasscodeCredentialWrapper);
        v150 = *(_QWORD *)(v166
                         + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_cachedPasscodeCredentialWrapper
                         + 8);
        if (v150)
        {
          *v149 = 0;
          v149[1] = 0;
          v151 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v150);
          objc_msgSend(v77, "setProperty:forKey:", v151, PSSpecifierPasscodeKey);

        }
        v81 = (unint64_t *)&unk_10015B4B0;
        v82 = PSUIPearlPasscodeController_ptr;
        goto LABEL_108;
      }
LABEL_36:
      v71 = (id)MobileGestalt_get_current_device();
      if (v71)
      {
        v72 = v71;
        touchIDCapability = MobileGestalt_get_touchIDCapability();

        if (!touchIDCapability)
          goto LABEL_40;
        v74 = (id)MobileGestalt_get_current_device();
        if (v74)
        {
          v75 = v74;
          v76 = MobileGestalt_get_isSimulator(v74);

          if ((v76 & 1) == 0)
          {
            v77 = sub_10009F3A0();
            v152 = (_QWORD *)(v166
                            + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_cachedPasscodeCredentialWrapper);
            v153 = *(_QWORD *)(v166
                             + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_cachedPasscodeCredentialWrapper
                             + 8);
            if (v153)
            {
              *v152 = 0;
              v152[1] = 0;
              v154 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease(v153);
              objc_msgSend(v77, "setProperty:forKey:", v154, PSSpecifierPasscodeKey);

            }
            v81 = (unint64_t *)&unk_10015B4A8;
            v82 = PSUITouchIDPasscodeController_ptr;
            goto LABEL_108;
          }
LABEL_40:
          v77 = sub_10009F3A0();
          v78 = (_QWORD *)(v166 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_cachedPasscodeCredentialWrapper);
          v79 = *(_QWORD *)(v166
                          + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_cachedPasscodeCredentialWrapper
                          + 8);
          if (v79)
          {
            *v78 = 0;
            v78[1] = 0;
            v80 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v79);
            objc_msgSend(v77, "setProperty:forKey:", v80, PSSpecifierPasscodeKey);

          }
          v81 = (unint64_t *)&unk_10015B4A0;
          v82 = PSUIPasscodeLockController_ptr;
LABEL_108:
          v155 = sub_100007BBC(0, v81, v82);
          v156 = v77;
          v157 = v171;
          PreferencesControllerRecipe.init(viewControllerClass:specifier:)(v155, v156);
          v159 = v169;
          v158 = v170;
          v160 = v172;
          (*(void (**)(char *, char *, uint64_t))(v170 + 16))(v169, v157, v172);
          v161 = type metadata accessor for PreferencesControllerRepresentableModel(0);
          swift_allocObject(v161, *(unsigned int *)(v161 + 48), *(unsigned __int16 *)(v161 + 52));
          v162 = PreferencesControllerRepresentableModel.init(recipe:)(v159);

          (*(void (**)(char *, uint64_t))(v158 + 8))(v157, v160);
          return v162 | 0x4000000000000000;
        }
      }
      else
      {
LABEL_115:
        __break(1u);
LABEL_116:
        __break(1u);
      }
      __break(1u);
LABEL_118:
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000036, 0x8000000100125E10, "SettingsApp/PrimarySettingsListItemIdentifier+SettingsAppDetailContent.swift", 76, 2, 62, 0);
      goto LABEL_59;
    case 0x22u:
      v130 = sub_10009F3A0();
      v44 = v167;
      static NSBundle.PreferencesPluginLocation.default.getter();
      v45 = 0xD000000000000015;
      v101 = 0x8000000100125B30;
      v40 = v171;
      v41 = v130;
      v37 = 0x6974746553534F53;
      v46 = 0xEB0000000073676ELL;
      goto LABEL_74;
    case 0x23u:
      v43 = sub_10009F3A0();
      v44 = v167;
      static NSBundle.PreferencesPluginLocation.default.getter();
      v45 = 0xD00000000000001ALL;
      v37 = 0xD00000000000001ELL;
      v46 = 0x8000000100123F40;
      v47 = "ENUISettingsViewController";
LABEL_73:
      v101 = (unint64_t)(v47 - 32) | 0x8000000000000000;
      v40 = v171;
      v41 = v43;
      goto LABEL_74;
    case 0x24u:
      v134 = sub_10009F3A0();
      v34 = v167;
      static NSBundle.PreferencesPluginLocation.default.getter();
      v40 = v171;
      v41 = v134;
      v37 = 0x5579726574746142;
      v46 = 0xEE00495565676173;
      goto LABEL_93;
    case 0x25u:
      v36 = sub_10009F3A0();
      v34 = v167;
      static NSBundle.PreferencesPluginLocation.default.getter();
      v37 = 0xD00000000000001ALL;
      v38 = "PrivacyAndSecuritySettings";
      goto LABEL_92;
    case 0x26u:
      v36 = sub_10009F3A0();
      v34 = v167;
      static NSBundle.PreferencesPluginLocation.default.getter();
      v37 = 0xD000000000000013;
      v38 = "MobileStoreSettings";
      goto LABEL_92;
    case 0x27u:
      v36 = sub_10009F3A0();
      v34 = v167;
      static NSBundle.PreferencesPluginLocation.default.getter();
      v37 = 0xD000000000000017;
      v38 = "AppInstallationSettings";
      goto LABEL_92;
    case 0x28u:
      v36 = sub_10009F3A0();
      v34 = v167;
      static NSBundle.PreferencesPluginLocation.default.getter();
      v37 = 0xD000000000000010;
      v38 = "PassbookSettings";
      goto LABEL_92;
    case 0x29u:
      v36 = sub_10009F3A0();
      v34 = v167;
      static NSBundle.PreferencesPluginLocation.default.getter();
      v37 = 0xD000000000000010;
      v38 = "ClassKitSettings";
      goto LABEL_92;
    case 0x2Au:
      v39 = sub_10009F3A0();
      v34 = v167;
      static NSBundle.PreferencesPluginLocation.default.getter();
      v40 = v171;
      v41 = v39;
      v42 = 0x6172656D6143;
LABEL_18:
      v37 = v42 & 0xFFFFFFFFFFFFLL | 0x6553000000000000;
      v46 = 0xEE0073676E697474;
      goto LABEL_93;
    case 0x2Bu:
      v36 = sub_10009F3A0();
      v34 = v167;
      static NSBundle.PreferencesPluginLocation.default.getter();
      v37 = 0xD000000000000012;
      v38 = "GameCenterSettings";
      goto LABEL_92;
    case 0x2Cu:
      v50 = type metadata accessor for iCloudHomeViewController(0);
LABEL_84:
      v63 = v50;
      goto LABEL_85;
    case 0x2Du:
      v33 = sub_10009F3A0();
      v34 = v167;
      static NSBundle.PreferencesPluginLocation.default.getter();
      v35 = "DeveloperSettings";
      goto LABEL_88;
    case 0x2Eu:
      v36 = sub_10009F3A0();
      v34 = v167;
      static NSBundle.PreferencesPluginLocation.appleInternal.getter();
      v37 = 0xD000000000000010;
      v38 = "Carrier Settings";
      goto LABEL_92;
    case 0x2Fu:
      v33 = sub_10009F3A0();
      v34 = v167;
      static NSBundle.PreferencesPluginLocation.appleInternal.getter();
      v35 = "Internal Settings";
LABEL_88:
      v46 = (unint64_t)(v35 - 32) | 0x8000000000000000;
      v40 = v171;
      v41 = v33;
      v37 = 0xD000000000000011;
      goto LABEL_93;
    case 0x30u:
      v36 = sub_10009F3A0();
      v34 = v167;
      static NSBundle.PreferencesPluginLocation.default.getter();
      v37 = 0xD00000000000001ALL;
      v38 = "ConferenceExternalSettings";
      goto LABEL_92;
    case 0x31u:
      v36 = sub_10009F3A0();
      v34 = v167;
      static NSBundle.PreferencesPluginLocation.default.getter();
      v37 = 0xD000000000000016;
      v38 = "MadridExternalSettings";
      goto LABEL_92;
    case 0x32u:
      v36 = sub_10009F3A0();
      v34 = v167;
      static NSBundle.PreferencesPluginLocation.default.getter();
      v37 = 0xD000000000000013;
      v38 = "IDSExternalSettings";
      goto LABEL_92;
    case 0x33u:
      v36 = sub_10009F3A0();
      v34 = v167;
      static NSBundle.PreferencesPluginLocation.default.getter();
      v37 = 0xD00000000000001ALL;
      v38 = "AccessoryDeveloperSettings";
LABEL_92:
      v46 = (unint64_t)(v38 - 32) | 0x8000000000000000;
      v40 = v171;
      v41 = v36;
LABEL_93:
      v100 = v34;
      v45 = 0;
      v101 = 0;
      goto LABEL_94;
    case 0x34u:
      static NSBundle.SettingsPluginVariant.default.getter();
      v119 = type metadata accessor for SettingsExperiencePlugin(0);
      swift_allocObject(v119, *(unsigned int *)(v119 + 48), *(unsigned __int16 *)(v119 + 52));
      v120 = SettingsExperiencePlugin.init(pluginName:variant:)(0x656C6C6174736E49, 0xED00007370704164, v4);
      SettingsExperiencePlugin.loadPluginIfNeeded()();
      if (!v121)
        return v120 | 0x8000000000000000;
      swift_release(v120);
      swift_errorRelease(v121);
      return 0xC000000000000000;
    default:
      sub_100013014((uint64_t)v21);
      return 0xC000000000000000;
  }
}

uint64_t sub_1000BC400(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char v22;
  char v23;
  uint64_t v24;
  char *v25;
  int v26;
  int v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  char v34;
  char v35;
  uint64_t v37;
  char *v38;

  v4 = type metadata accessor for PrimarySettingsListToggleModel(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v37 - v9;
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v37 - v12;
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v37 - v15;
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v37 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v37 - v20;
  sub_1000A103C(a1, a2);
  v23 = v22;
  sub_1000BC724(a1, (uint64_t)v21);
  sub_1000BC724(a2, (uint64_t)v19);
  if ((v23 & 1) == 0)
  {
    sub_1000076B4((uint64_t)v19, type metadata accessor for PrimarySettingsListToggleModel);
    sub_1000076B4((uint64_t)v21, type metadata accessor for PrimarySettingsListToggleModel);
    sub_1000BC724(a1, (uint64_t)v16);
    sub_1000BC724(a2, (uint64_t)v13);
LABEL_7:
    sub_1000076B4((uint64_t)v16, type metadata accessor for PrimarySettingsListToggleModel);
    sub_1000076B4((uint64_t)v13, type metadata accessor for PrimarySettingsListToggleModel);
    sub_1000BC724(a1, (uint64_t)v10);
    sub_1000BC724(a2, (uint64_t)v7);
    goto LABEL_8;
  }
  v24 = *(int *)(v4 + 20);
  v38 = v10;
  v25 = v7;
  v26 = v21[v24];
  sub_1000076B4((uint64_t)v21, type metadata accessor for PrimarySettingsListToggleModel);
  v37 = v4;
  v27 = v19[*(int *)(v4 + 20)];
  sub_1000076B4((uint64_t)v19, type metadata accessor for PrimarySettingsListToggleModel);
  sub_1000BC724(a1, (uint64_t)v16);
  sub_1000BC724(a2, (uint64_t)v13);
  v28 = v26 == v27;
  v7 = v25;
  v10 = v38;
  if (!v28)
    goto LABEL_7;
  v29 = v37;
  v30 = *(int *)(v37 + 24);
  v31 = static Text.== infix(_:_:)(*(_QWORD *)&v16[v30], *(_QWORD *)&v16[v30 + 8], v16[v30 + 16], *(_QWORD *)&v16[v30 + 24], *(_QWORD *)&v13[v30], *(_QWORD *)&v13[v30 + 8], v13[v30 + 16], *(_QWORD *)&v13[v30 + 24]);
  sub_1000076B4((uint64_t)v16, type metadata accessor for PrimarySettingsListToggleModel);
  sub_1000076B4((uint64_t)v13, type metadata accessor for PrimarySettingsListToggleModel);
  sub_1000BC724(a1, (uint64_t)v10);
  sub_1000BC724(a2, (uint64_t)v7);
  if ((v31 & 1) == 0)
  {
LABEL_8:
    sub_1000076B4((uint64_t)v7, type metadata accessor for PrimarySettingsListToggleModel);
    sub_1000076B4((uint64_t)v10, type metadata accessor for PrimarySettingsListToggleModel);
    v35 = 0;
    return v35 & 1;
  }
  v32 = (uint64_t)v7;
  v33 = v10[*(int *)(v29 + 28)];
  sub_1000076B4((uint64_t)v10, type metadata accessor for PrimarySettingsListToggleModel);
  v34 = *(_BYTE *)(v32 + *(int *)(v29 + 28));
  sub_1000076B4(v32, type metadata accessor for PrimarySettingsListToggleModel);
  v35 = v33 ^ v34 ^ 1;
  return v35 & 1;
}

uint64_t type metadata accessor for PrimarySettingsListToggleModel(uint64_t a1)
{
  uint64_t result;

  result = qword_10015B530;
  if (!qword_10015B530)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PrimarySettingsListToggleModel);
  return result;
}

uint64_t sub_1000BC724(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PrimarySettingsListToggleModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_QWORD *sub_1000BC768(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  id v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    v4 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(a2, v7))
    {
      case 0u:
        v8 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v4, a2, v8);
        v9 = v4;
        v10 = v7;
        v11 = 0;
        goto LABEL_14;
      case 1u:
        v13 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v4, a2, v13);
        v9 = v4;
        v10 = v7;
        v11 = 1;
        goto LABEL_14;
      case 2u:
        v14 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v4, a2, v14);
        v15 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v16 = (_QWORD *)((char *)v4 + v15);
        v17 = (_QWORD *)((char *)a2 + v15);
        v18 = v17[1];
        *v16 = *v17;
        v16[1] = v18;
        swift_bridgeObjectRetain(v18);
        v9 = v4;
        v10 = v7;
        v11 = 2;
        goto LABEL_14;
      case 3u:
        v19 = a2[1];
        *v4 = *a2;
        v4[1] = v19;
        v20 = a2[3];
        v4[2] = a2[2];
        v4[3] = v20;
        v21 = a2[5];
        v4[4] = a2[4];
        v4[5] = v21;
        v22 = a2[7];
        v4[6] = a2[6];
        v4[7] = v22;
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v22);
        v9 = v4;
        v10 = v7;
        v11 = 3;
        goto LABEL_14;
      case 4u:
        v23 = a2[1];
        *v4 = *a2;
        v4[1] = v23;
        v24 = a2[3];
        v4[2] = a2[2];
        v4[3] = v24;
        v25 = a2[5];
        v4[4] = a2[4];
        v4[5] = v25;
        v4[6] = a2[6];
        swift_bridgeObjectRetain(v23);
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v25);
        v9 = v4;
        v10 = v7;
        v11 = 4;
        goto LABEL_14;
      case 5u:
        v26 = a2[1];
        *v4 = *a2;
        v4[1] = v26;
        v27 = a2[3];
        v4[2] = a2[2];
        v4[3] = v27;
        v29 = (void *)a2[4];
        v28 = a2[5];
        v4[4] = v29;
        v4[5] = v28;
        v30 = a2[9];
        swift_bridgeObjectRetain(v26);
        swift_bridgeObjectRetain(v27);
        v31 = v29;
        swift_bridgeObjectRetain(v28);
        if (v30)
        {
          v4[9] = v30;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v30 - 8))((uint64_t)(v4 + 6), (uint64_t)(a2 + 6), v30);
        }
        else
        {
          v32 = *((_OWORD *)a2 + 4);
          *((_OWORD *)v4 + 3) = *((_OWORD *)a2 + 3);
          *((_OWORD *)v4 + 4) = v32;
        }
        v9 = v4;
        v10 = v7;
        v11 = 5;
LABEL_14:
        swift_storeEnumTagMultiPayload(v9, v10, v11);
        break;
      default:
        memcpy(v4, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
        break;
    }
    v33 = a3[6];
    *((_BYTE *)v4 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    v34 = (char *)v4 + v33;
    v35 = (char *)a2 + v33;
    v36 = *(_QWORD *)((char *)a2 + v33);
    v37 = *(_QWORD *)((char *)a2 + v33 + 8);
    v38 = *((_BYTE *)a2 + v33 + 16);
    sub_10000BAD4(v36, v37, v38);
    *(_QWORD *)v34 = v36;
    *((_QWORD *)v34 + 1) = v37;
    v34[16] = v38;
    v39 = *((_QWORD *)v35 + 3);
    *((_QWORD *)v34 + 3) = v39;
    v40 = a3[8];
    *((_BYTE *)v4 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    v41 = (_QWORD *)((char *)v4 + v40);
    v42 = (_QWORD *)((char *)a2 + v40);
    v12 = v42[1];
    *v41 = *v42;
    v41[1] = v12;
    swift_bridgeObjectRetain(v39);
  }
  swift_retain(v12);
  return v4;
}

uint64_t sub_1000BCA4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(a1, v4))
  {
    case 0u:
    case 1u:
      v5 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
      break;
    case 2u:
      v6 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
      v7 = sub_100004FC8(&qword_10015C420);
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v7 + 48) + 8));
      break;
    case 3u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
      break;
    case 4u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      break;
    case 5u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));

      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      if (*(_QWORD *)(a1 + 72))
        sub_100005474((_QWORD *)(a1 + 48));
      break;
    default:
      break;
  }
  v8 = a1 + *(int *)(a2 + 24);
  sub_100007618(*(_QWORD *)v8, *(_QWORD *)(v8 + 8), *(_BYTE *)(v8 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v8 + 24));
  return swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 32) + 8));
}

_QWORD *sub_1000BCBA0(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;

  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(a2, v6))
  {
    case 0u:
      v7 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 0;
      goto LABEL_12;
    case 1u:
      v11 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      v8 = a1;
      v9 = v6;
      v10 = 1;
      goto LABEL_12;
    case 2u:
      v12 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
      v13 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
      v14 = (_QWORD *)((char *)a1 + v13);
      v15 = (_QWORD *)((char *)a2 + v13);
      v16 = v15[1];
      *v14 = *v15;
      v14[1] = v16;
      swift_bridgeObjectRetain(v16);
      v8 = a1;
      v9 = v6;
      v10 = 2;
      goto LABEL_12;
    case 3u:
      v17 = a2[1];
      *a1 = *a2;
      a1[1] = v17;
      v18 = a2[3];
      a1[2] = a2[2];
      a1[3] = v18;
      v19 = a2[5];
      a1[4] = a2[4];
      a1[5] = v19;
      v20 = a2[7];
      a1[6] = a2[6];
      a1[7] = v20;
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v20);
      v8 = a1;
      v9 = v6;
      v10 = 3;
      goto LABEL_12;
    case 4u:
      v21 = a2[1];
      *a1 = *a2;
      a1[1] = v21;
      v22 = a2[3];
      a1[2] = a2[2];
      a1[3] = v22;
      v23 = a2[5];
      a1[4] = a2[4];
      a1[5] = v23;
      a1[6] = a2[6];
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v23);
      v8 = a1;
      v9 = v6;
      v10 = 4;
      goto LABEL_12;
    case 5u:
      v24 = a2[1];
      *a1 = *a2;
      a1[1] = v24;
      v25 = a2[3];
      a1[2] = a2[2];
      a1[3] = v25;
      v27 = (void *)a2[4];
      v26 = a2[5];
      a1[4] = v27;
      a1[5] = v26;
      v28 = a2[9];
      swift_bridgeObjectRetain(v24);
      swift_bridgeObjectRetain(v25);
      v29 = v27;
      swift_bridgeObjectRetain(v26);
      if (v28)
      {
        a1[9] = v28;
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v28 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v28);
      }
      else
      {
        v30 = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 4) = v30;
      }
      v8 = a1;
      v9 = v6;
      v10 = 5;
LABEL_12:
      swift_storeEnumTagMultiPayload(v8, v9, v10);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      break;
  }
  v31 = a3[6];
  *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = *(_QWORD *)((char *)a2 + v31);
  v35 = *(_QWORD *)((char *)a2 + v31 + 8);
  v36 = *((_BYTE *)a2 + v31 + 16);
  sub_10000BAD4(v34, v35, v36);
  *(_QWORD *)v32 = v34;
  *((_QWORD *)v32 + 1) = v35;
  v32[16] = v36;
  v37 = *((_QWORD *)v33 + 3);
  *((_QWORD *)v32 + 3) = v37;
  v38 = a3[8];
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  v39 = (_QWORD *)((char *)a1 + v38);
  v40 = (_QWORD *)((char *)a2 + v38);
  v41 = v40[1];
  *v39 = *v40;
  v39[1] = v41;
  swift_bridgeObjectRetain(v37);
  swift_retain(v41);
  return a1;
}

_QWORD *sub_1000BCE5C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;

  if (a1 != a2)
  {
    sub_1000076B4((uint64_t)a1, type metadata accessor for PrimarySettingsListItemIdentifier);
    v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(a2, v6))
    {
      case 0u:
        v7 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
        v8 = a1;
        v9 = v6;
        v10 = 0;
        goto LABEL_13;
      case 1u:
        v11 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
        v8 = a1;
        v9 = v6;
        v10 = 1;
        goto LABEL_13;
      case 2u:
        v12 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
        v13 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v14 = (_QWORD *)((char *)a1 + v13);
        v15 = (_QWORD *)((char *)a2 + v13);
        *v14 = *v15;
        v16 = v15[1];
        v14[1] = v16;
        swift_bridgeObjectRetain(v16);
        v8 = a1;
        v9 = v6;
        v10 = 2;
        goto LABEL_13;
      case 3u:
        *a1 = *a2;
        v17 = a2[1];
        a1[1] = v17;
        a1[2] = a2[2];
        v18 = a2[3];
        a1[3] = v18;
        a1[4] = a2[4];
        v19 = a2[5];
        a1[5] = v19;
        a1[6] = a2[6];
        v20 = a2[7];
        a1[7] = v20;
        swift_bridgeObjectRetain(v17);
        swift_bridgeObjectRetain(v18);
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        v8 = a1;
        v9 = v6;
        v10 = 3;
        goto LABEL_13;
      case 4u:
        *a1 = *a2;
        v21 = a2[1];
        a1[1] = v21;
        a1[2] = a2[2];
        v22 = a2[3];
        a1[3] = v22;
        a1[4] = a2[4];
        v23 = a2[5];
        a1[5] = v23;
        a1[6] = a2[6];
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v22);
        swift_bridgeObjectRetain(v23);
        v8 = a1;
        v9 = v6;
        v10 = 4;
        goto LABEL_13;
      case 5u:
        *a1 = *a2;
        v24 = a2[1];
        a1[1] = v24;
        a1[2] = a2[2];
        v25 = a2[3];
        a1[3] = v25;
        v26 = (void *)a2[4];
        a1[4] = v26;
        v27 = a2[5];
        a1[5] = v27;
        v28 = a2[9];
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v25);
        v29 = v26;
        swift_bridgeObjectRetain(v27);
        if (v28)
        {
          a1[9] = v28;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v28 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v28);
        }
        else
        {
          v30 = *((_OWORD *)a2 + 4);
          *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
          *((_OWORD *)a1 + 4) = v30;
        }
        v8 = a1;
        v9 = v6;
        v10 = 5;
LABEL_13:
        swift_storeEnumTagMultiPayload(v8, v9, v10);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
        break;
    }
  }
  *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
  v31 = a3[6];
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = *(_QWORD *)((char *)a2 + v31);
  v35 = *(_QWORD *)((char *)a2 + v31 + 8);
  v36 = *((_BYTE *)a2 + v31 + 16);
  sub_10000BAD4(v34, v35, v36);
  v37 = *(_QWORD *)v32;
  v38 = *((_QWORD *)v32 + 1);
  v39 = v32[16];
  *(_QWORD *)v32 = v34;
  *((_QWORD *)v32 + 1) = v35;
  v32[16] = v36;
  sub_100007618(v37, v38, v39);
  v40 = *((_QWORD *)v33 + 3);
  v41 = *((_QWORD *)v32 + 3);
  *((_QWORD *)v32 + 3) = v40;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRelease(v41);
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  v42 = a3[8];
  v43 = (_QWORD *)((char *)a1 + v42);
  v44 = (_QWORD *)((char *)a2 + v42);
  v45 = v44[1];
  v46 = v43[1];
  *v43 = *v44;
  v43[1] = v45;
  swift_retain(v45);
  swift_release(v46);
  return a1;
}

char *sub_1000BD1B0(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;

  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
  if (EnumCaseMultiPayload == 2)
  {
    v9 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
    v10 = sub_100004FC8(&qword_10015C420);
    *(_OWORD *)&a1[*(int *)(v10 + 48)] = *(_OWORD *)&a2[*(int *)(v10 + 48)];
    swift_storeEnumTagMultiPayload(a1, v6, 2);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v11 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    v8 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload(a1, v6, 0);
  }
  v12 = a3[6];
  a1[a3[5]] = a2[a3[5]];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = *((_OWORD *)v14 + 1);
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *((_OWORD *)v13 + 1) = v15;
  v16 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  *(_OWORD *)&a1[v16] = *(_OWORD *)&a2[v16];
  return a1;
}

char *sub_1000BD304(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (a1 != a2)
  {
    sub_1000076B4((uint64_t)a1, type metadata accessor for PrimarySettingsListItemIdentifier);
    v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
    if (EnumCaseMultiPayload == 2)
    {
      v9 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      v10 = sub_100004FC8(&qword_10015C420);
      *(_OWORD *)&a1[*(int *)(v10 + 48)] = *(_OWORD *)&a2[*(int *)(v10 + 48)];
      swift_storeEnumTagMultiPayload(a1, v6, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v11 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      v8 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload(a1, v6, 0);
    }
  }
  v12 = a3[6];
  a1[a3[5]] = a2[a3[5]];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = a2[v12 + 16];
  v16 = *(_QWORD *)&a1[v12];
  v17 = *(_QWORD *)&a1[v12 + 8];
  v18 = a1[v12 + 16];
  *(_OWORD *)v13 = *(_OWORD *)&a2[v12];
  v13[16] = v15;
  sub_100007618(v16, v17, v18);
  v19 = *((_QWORD *)v13 + 3);
  *((_QWORD *)v13 + 3) = *((_QWORD *)v14 + 3);
  swift_bridgeObjectRelease(v19);
  v20 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  v21 = *(_QWORD *)&a1[v20 + 8];
  *(_OWORD *)&a1[v20] = *(_OWORD *)&a2[v20];
  swift_release(v21);
  return a1;
}

uint64_t sub_1000BD4A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000BD4B4);
}

uint64_t sub_1000BD4B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 24);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1000BD534(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000BD540);
}

uint64_t sub_1000BD540(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 24) = (a2 - 1);
  return result;
}

uint64_t sub_1000BD5BC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  result = type metadata accessor for PrimarySettingsListItemIdentifier(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100119CD0;
    v4[2] = &unk_100119CE8;
    v4[3] = &unk_100119CD0;
    v4[4] = (char *)&value witness table for () + 64;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for PreBuddyURLRoute()
{
  return &type metadata for PreBuddyURLRoute;
}

void sub_1000BD658(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  char v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (qword_100156CB0 != -1)
    swift_once(&qword_100156CB0, sub_10008BE28);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_100007808(v4, (uint64_t)qword_10015D2C8);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = swift_slowAlloc(64, -1);
    v27 = v9;
    *(_DWORD *)v8 = 136315394;
    v26 = sub_1000DA1F0(0xD000000000000015, 0x8000000100125EB0, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2080;
    v26 = sub_1000DA1F0(0xD000000000000026, 0x800000010011FD10, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v8 + 14, v8 + 22);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Start (%s.%s)…", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v9, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }

  URL.scheme.getter(v10);
  if (!v11)
    goto LABEL_11;
  v12 = v11;
  v13 = String.lowercased()();
  swift_bridgeObjectRelease(v12);
  if (v13._countAndFlagsBits != 0x72702D7366657270 || v13._object != (void *)0xEE00796464756265)
  {
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v13._countAndFlagsBits, v13._object, 0x72702D7366657270, 0xEE00796464756265, 0);
    swift_bridgeObjectRelease(v13._object);
    if ((v14 & 1) != 0)
      goto LABEL_10;
LABEL_11:
    v25 = sub_100004FC8(&qword_1001570F8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(a2, 1, 1, v25);
    goto LABEL_12;
  }
  swift_bridgeObjectRelease(0xEE00796464756265);
LABEL_10:
  v15 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(a2, a1, v15);
  v16 = (int *)type metadata accessor for SettingsURLDestination(0);
  v17 = a2 + v16[5];
  v18 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  swift_storeEnumTagMultiPayload(v17, v18, 21);
  v19 = type metadata accessor for SettingsURLDestination.Action(0);
  swift_storeEnumTagMultiPayload(v17, v19, 1);
  v20 = sub_100004FC8(&qword_100157390);
  v21 = type metadata accessor for URLQueryItem(0);
  v22 = swift_allocObject(v20, ((*(unsigned __int8 *)(*(_QWORD *)(v21 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v21 - 8) + 80))+ 2 * *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v21 - 8) + 80) | 7);
  *(_OWORD *)(v22 + 16) = xmmword_100115BA0;
  URLQueryItem.init(name:value:)(1752457584, 0xE400000000000000, 0xD000000000000013, 0x8000000100125E90);
  URLQueryItem.init(name:value:)(1953460082, 0xE400000000000000, 0x6C6172656E6547, 0xE700000000000000);
  v23 = (_QWORD *)(a2 + v16[7]);
  *(_QWORD *)(a2 + v16[6]) = v22;
  *v23 = 0;
  v23[1] = 0;
  v24 = sub_100004FC8(&qword_1001570F8);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(a2, 0, 1, v24);
LABEL_12:
  sub_1000BDB10();
}

uint64_t sub_1000BDA2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  char v5;

  URL.scheme.getter(a1);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = String.lowercased()();
  swift_bridgeObjectRelease(v2);
  if (v3._countAndFlagsBits == 0x72702D7366657270 && v3._object == (void *)0xEE00796464756265)
  {
    swift_bridgeObjectRelease(0xEE00796464756265);
    return 1;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)(v3._countAndFlagsBits, v3._object, 0x72702D7366657270, 0xEE00796464756265, 0);
    swift_bridgeObjectRelease(v3._object);
    return v5 & 1;
  }
}

void sub_1000BDB10()
{
  uint64_t v0;
  uint64_t v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *oslog;
  uint64_t v6;
  uint64_t v7;

  if (qword_100156CB0 != -1)
    swift_once(&qword_100156CB0, sub_10008BE28);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_100007808(v0, (uint64_t)qword_10015D2C8);
  oslog = Logger.logObject.getter(v1);
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v2))
  {
    v3 = swift_slowAlloc(22, -1);
    v4 = swift_slowAlloc(64, -1);
    v7 = v4;
    *(_DWORD *)v3 = 136315394;
    v6 = sub_1000DA1F0(0xD000000000000015, 0x8000000100125EB0, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v6, &v7, v3 + 4, v3 + 12);
    *(_WORD *)(v3 + 12) = 2080;
    v6 = sub_1000DA1F0(0xD000000000000026, 0x800000010011FD10, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v6, &v7, v3 + 14, v3 + 22);
    _os_log_impl((void *)&_mh_execute_header, oslog, v2, "…Complete (%s.%s)", (uint8_t *)v3, 0x16u);
    swift_arrayDestroy(v4, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v4, -1, -1);
    swift_slowDealloc(v3, -1, -1);

  }
  else
  {

  }
}

uint64_t sub_1000BDCE4()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000013;
  else
    return 0x6E6564646968;
}

BOOL sub_1000BDD20()
{
  __CFString *v0;
  __CFString *v1;
  int AppBooleanValue;
  BOOL v3;
  Boolean keyExistsAndHasValidFormat;

  keyExistsAndHasValidFormat = 0;
  v0 = (__CFString *)String._bridgeToObjectiveC()();
  v1 = (__CFString *)String._bridgeToObjectiveC()();
  AppBooleanValue = CFPreferencesGetAppBooleanValue(v0, v1, &keyExistsAndHasValidFormat);

  if (AppBooleanValue)
    v3 = keyExistsAndHasValidFormat == 0;
  else
    v3 = 1;
  return !v3;
}

char *sub_1000BDDEC(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v13 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v13 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v13);
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v8 = *((_QWORD *)a2 + 1);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *((_QWORD *)a1 + 1) = v8;
        swift_bridgeObjectRetain(v8);
        v9 = *(int *)(sub_100004FC8(&qword_100158290) + 48);
        v10 = &a1[v9];
        v11 = &a2[v9];
        v12 = type metadata accessor for NSBundle.PreferencesPluginLocation(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
        swift_storeEnumTagMultiPayload(a1, a3, 0);
        break;
      case 1u:
        v15 = *((_QWORD *)a2 + 1);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *((_QWORD *)a1 + 1) = v15;
        swift_bridgeObjectRetain(v15);
        swift_storeEnumTagMultiPayload(a1, a3, 1);
        break;
      case 2u:
        v16 = *((_QWORD *)a2 + 1);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *((_QWORD *)a1 + 1) = v16;
        swift_bridgeObjectRetain(v16);
        swift_storeEnumTagMultiPayload(a1, a3, 2);
        break;
      case 3u:
        v17 = *(_QWORD *)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        a1[8] = a2[8];
        swift_bridgeObjectRetain(v17);
        swift_storeEnumTagMultiPayload(a1, a3, 3);
        break;
      case 4u:
        v18 = *(_QWORD *)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        a1[8] = a2[8];
        swift_retain(v18);
        swift_storeEnumTagMultiPayload(a1, a3, 4);
        break;
      case 5u:
        v19 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v19;
        (**(void (***)(void *, const void *))(v19 - 8))(a1, a2);
        a1[40] = a2[40];
        swift_storeEnumTagMultiPayload(a1, a3, 5);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_1000BDFAC(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((int)result)
  {
    case 0:
      swift_bridgeObjectRelease(a1[1]);
      v5 = (char *)a1 + *(int *)(sub_100004FC8(&qword_100158290) + 48);
      v6 = type metadata accessor for NSBundle.PreferencesPluginLocation(0);
      result = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
      break;
    case 1:
    case 2:
      v4 = a1[1];
      goto LABEL_5;
    case 3:
      v4 = *a1;
LABEL_5:
      result = swift_bridgeObjectRelease(v4);
      break;
    case 4:
      result = swift_release(*a1);
      break;
    case 5:
      result = sub_100005474(a1);
      break;
    default:
      return result;
  }
  return result;
}

char *sub_1000BE068(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      v6 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v6;
      swift_bridgeObjectRetain(v6);
      v7 = *(int *)(sub_100004FC8(&qword_100158290) + 48);
      v8 = &a1[v7];
      v9 = &a2[v7];
      v10 = type metadata accessor for NSBundle.PreferencesPluginLocation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
      v11 = a1;
      v12 = a3;
      v13 = 0;
      goto LABEL_9;
    case 1u:
      v14 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v14;
      swift_bridgeObjectRetain(v14);
      v11 = a1;
      v12 = a3;
      v13 = 1;
      goto LABEL_9;
    case 2u:
      v15 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v15;
      swift_bridgeObjectRetain(v15);
      v11 = a1;
      v12 = a3;
      v13 = 2;
      goto LABEL_9;
    case 3u:
      v16 = *(_QWORD *)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      a1[8] = a2[8];
      swift_bridgeObjectRetain(v16);
      v11 = a1;
      v12 = a3;
      v13 = 3;
      goto LABEL_9;
    case 4u:
      v17 = *(_QWORD *)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      a1[8] = a2[8];
      swift_retain(v17);
      v11 = a1;
      v12 = a3;
      v13 = 4;
      goto LABEL_9;
    case 5u:
      v18 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v18;
      (**(void (***)(void *, const void *))(v18 - 8))(a1, a2);
      a1[40] = a2[40];
      v11 = a1;
      v12 = a3;
      v13 = 5;
LABEL_9:
      swift_storeEnumTagMultiPayload(v11, v12, v13);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_QWORD *sub_1000BE1EC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a1 != a2)
  {
    sub_1000BE3B0((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        *a1 = *a2;
        v6 = a2[1];
        a1[1] = v6;
        swift_bridgeObjectRetain(v6);
        v7 = *(int *)(sub_100004FC8(&qword_100158290) + 48);
        v8 = (char *)a1 + v7;
        v9 = (char *)a2 + v7;
        v10 = type metadata accessor for NSBundle.PreferencesPluginLocation(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
        swift_storeEnumTagMultiPayload(a1, a3, 0);
        break;
      case 1u:
        *a1 = *a2;
        v11 = a2[1];
        a1[1] = v11;
        swift_bridgeObjectRetain(v11);
        swift_storeEnumTagMultiPayload(a1, a3, 1);
        break;
      case 2u:
        *a1 = *a2;
        v12 = a2[1];
        a1[1] = v12;
        swift_bridgeObjectRetain(v12);
        swift_storeEnumTagMultiPayload(a1, a3, 2);
        break;
      case 3u:
        v13 = *a2;
        *a1 = *a2;
        *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
        swift_bridgeObjectRetain(v13);
        swift_storeEnumTagMultiPayload(a1, a3, 3);
        break;
      case 4u:
        v14 = *a2;
        *a1 = *a2;
        *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
        swift_retain(v14);
        swift_storeEnumTagMultiPayload(a1, a3, 4);
        break;
      case 5u:
        v15 = a2[3];
        a1[3] = v15;
        a1[4] = a2[4];
        (**(void (***)(void *, const void *))(v15 - 8))(a1, a2);
        *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
        swift_storeEnumTagMultiPayload(a1, a3, 5);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_1000BE3B0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PrimarySettingsListItemVisibilityRule(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for PrimarySettingsListItemVisibilityRule(uint64_t a1)
{
  uint64_t result;

  result = qword_10015B5E8;
  if (!qword_10015B5E8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PrimarySettingsListItemVisibilityRule);
  return result;
}

_OWORD *sub_1000BE428(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  if (swift_getEnumCaseMultiPayload(a2, a3))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    v6 = *(int *)(sub_100004FC8(&qword_100158290) + 48);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for NSBundle.PreferencesPluginLocation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
    swift_storeEnumTagMultiPayload(a1, a3, 0);
  }
  return a1;
}

_OWORD *sub_1000BE4D0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  if (a1 != a2)
  {
    sub_1000BE3B0((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3))
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      v6 = *(int *)(sub_100004FC8(&qword_100158290) + 48);
      v7 = (char *)a1 + v6;
      v8 = (char *)a2 + v6;
      v9 = type metadata accessor for NSBundle.PreferencesPluginLocation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

uint64_t sub_1000BE588(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _BYTE v4[32];
  _QWORD v5[8];

  result = type metadata accessor for NSBundle.PreferencesPluginLocation(319);
  if (v3 <= 0x3F)
  {
    swift_getTupleTypeLayout2(v4);
    v5[0] = v4;
    v5[1] = &unk_100119DA8;
    v5[2] = &unk_100119DA8;
    v5[3] = &unk_100119DC0;
    v5[4] = &unk_100119DC0;
    v5[5] = &unk_100119DD8;
    v5[6] = &unk_100119DF0;
    v5[7] = &unk_100119E08;
    swift_initEnumMetadataMultiPayload(a1, 256, 8, v5);
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for PrimarySettingsListItemVisibility()
{
  return &type metadata for PrimarySettingsListItemVisibility;
}

unint64_t sub_1000BE654()
{
  unint64_t result;

  result = qword_10015B620;
  if (!qword_10015B620)
  {
    result = swift_getWitnessTable(&unk_100119E84, &type metadata for PrimarySettingsListItemVisibility);
    atomic_store(result, (unint64_t *)&qword_10015B620);
  }
  return result;
}

uint64_t _s11SettingsApp37PrimarySettingsListItemVisibilityRuleO15EvaluationStyleOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000BE6E4 + 4 * byte_100119D4D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000BE718 + 4 * byte_100119D48[v4]))();
}

uint64_t sub_1000BE718(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000BE720(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000BE728);
  return result;
}

uint64_t sub_1000BE734(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000BE73CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000BE740(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000BE748(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PrimarySettingsListItemVisibilityRule.EvaluationStyle()
{
  return &type metadata for PrimarySettingsListItemVisibilityRule.EvaluationStyle;
}

unint64_t sub_1000BE768()
{
  unint64_t result;

  result = qword_10015B628;
  if (!qword_10015B628)
  {
    result = swift_getWitnessTable(&unk_100119EFC, &type metadata for PrimarySettingsListItemVisibilityRule.EvaluationStyle);
    atomic_store(result, (unint64_t *)&qword_10015B628);
  }
  return result;
}

_QWORD *sub_1000BE7BC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  id v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;

  v4 = type metadata accessor for PrimarySettingsListFamilyLinkModel(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v6 = v4;
    v7 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(a2, v7))
    {
      case 0u:
        v8 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
        v9 = a1;
        v10 = v7;
        v11 = 0;
        goto LABEL_14;
      case 1u:
        v13 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
        v9 = a1;
        v10 = v7;
        v11 = 1;
        goto LABEL_14;
      case 2u:
        v14 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
        v15 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v16 = (_QWORD *)((char *)a1 + v15);
        v17 = (_QWORD *)((char *)a2 + v15);
        v18 = v17[1];
        *v16 = *v17;
        v16[1] = v18;
        swift_bridgeObjectRetain(v18);
        v9 = a1;
        v10 = v7;
        v11 = 2;
        goto LABEL_14;
      case 3u:
        v19 = a2[1];
        *a1 = *a2;
        a1[1] = v19;
        v20 = a2[3];
        a1[2] = a2[2];
        a1[3] = v20;
        v21 = a2[5];
        a1[4] = a2[4];
        a1[5] = v21;
        v22 = a2[7];
        a1[6] = a2[6];
        a1[7] = v22;
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v22);
        v9 = a1;
        v10 = v7;
        v11 = 3;
        goto LABEL_14;
      case 4u:
        v23 = a2[1];
        *a1 = *a2;
        a1[1] = v23;
        v24 = a2[3];
        a1[2] = a2[2];
        a1[3] = v24;
        v25 = a2[5];
        a1[4] = a2[4];
        a1[5] = v25;
        a1[6] = a2[6];
        swift_bridgeObjectRetain(v23);
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v25);
        v9 = a1;
        v10 = v7;
        v11 = 4;
        goto LABEL_14;
      case 5u:
        v26 = a2[1];
        *a1 = *a2;
        a1[1] = v26;
        v27 = a2[3];
        a1[2] = a2[2];
        a1[3] = v27;
        v29 = (void *)a2[4];
        v28 = a2[5];
        a1[4] = v29;
        a1[5] = v28;
        v30 = a2[9];
        swift_bridgeObjectRetain(v26);
        swift_bridgeObjectRetain(v27);
        v31 = v29;
        swift_bridgeObjectRetain(v28);
        if (v30)
        {
          a1[9] = v30;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v30 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v30);
        }
        else
        {
          v32 = *((_OWORD *)a2 + 4);
          *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
          *((_OWORD *)a1 + 4) = v32;
        }
        v9 = a1;
        v10 = v7;
        v11 = 5;
LABEL_14:
        swift_storeEnumTagMultiPayload(v9, v10, v11);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
        break;
    }
    v33 = *(int *)(v6 + 20);
    v34 = (char *)a1 + v33;
    v35 = (char *)a2 + v33;
    v36 = type metadata accessor for FamilyRowStatus(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v34, v35, v36);
    v37 = *(int *)(v6 + 24);
    v38 = (_QWORD *)((char *)a1 + v37);
    v39 = (_QWORD *)((char *)a2 + v37);
    v40 = v39[1];
    *v38 = *v39;
    v38[1] = v40;
    swift_bridgeObjectRetain(v40);
  }
  return a1;
}

uint64_t sub_1000BEA8C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(a1, v2))
  {
    case 0u:
    case 1u:
      v3 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
      break;
    case 2u:
      v4 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
      v5 = sub_100004FC8(&qword_10015C420);
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v5 + 48) + 8));
      break;
    case 3u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
      break;
    case 4u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      break;
    case 5u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));

      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      if (*(_QWORD *)(a1 + 72))
        sub_100005474((_QWORD *)(a1 + 48));
      break;
    default:
      break;
  }
  v6 = type metadata accessor for PrimarySettingsListFamilyLinkModel(0);
  v7 = a1 + *(int *)(v6 + 20);
  v8 = type metadata accessor for FamilyRowStatus(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v6 + 24) + 8));
}

_QWORD *sub_1000BEBF0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  id v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;

  v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(a2, v4))
  {
    case 0u:
      v5 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
      v6 = a1;
      v7 = v4;
      v8 = 0;
      goto LABEL_12;
    case 1u:
      v9 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      v6 = a1;
      v7 = v4;
      v8 = 1;
      goto LABEL_12;
    case 2u:
      v10 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      v11 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
      v12 = (_QWORD *)((char *)a1 + v11);
      v13 = (_QWORD *)((char *)a2 + v11);
      v14 = v13[1];
      *v12 = *v13;
      v12[1] = v14;
      swift_bridgeObjectRetain(v14);
      v6 = a1;
      v7 = v4;
      v8 = 2;
      goto LABEL_12;
    case 3u:
      v15 = a2[1];
      *a1 = *a2;
      a1[1] = v15;
      v16 = a2[3];
      a1[2] = a2[2];
      a1[3] = v16;
      v17 = a2[5];
      a1[4] = a2[4];
      a1[5] = v17;
      v18 = a2[7];
      a1[6] = a2[6];
      a1[7] = v18;
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v18);
      v6 = a1;
      v7 = v4;
      v8 = 3;
      goto LABEL_12;
    case 4u:
      v19 = a2[1];
      *a1 = *a2;
      a1[1] = v19;
      v20 = a2[3];
      a1[2] = a2[2];
      a1[3] = v20;
      v21 = a2[5];
      a1[4] = a2[4];
      a1[5] = v21;
      a1[6] = a2[6];
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRetain(v21);
      v6 = a1;
      v7 = v4;
      v8 = 4;
      goto LABEL_12;
    case 5u:
      v22 = a2[1];
      *a1 = *a2;
      a1[1] = v22;
      v23 = a2[3];
      a1[2] = a2[2];
      a1[3] = v23;
      v25 = (void *)a2[4];
      v24 = a2[5];
      a1[4] = v25;
      a1[5] = v24;
      v26 = a2[9];
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v23);
      v27 = v25;
      swift_bridgeObjectRetain(v24);
      if (v26)
      {
        a1[9] = v26;
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v26 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v26);
      }
      else
      {
        v28 = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 4) = v28;
      }
      v6 = a1;
      v7 = v4;
      v8 = 5;
LABEL_12:
      swift_storeEnumTagMultiPayload(v6, v7, v8);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
      break;
  }
  v29 = type metadata accessor for PrimarySettingsListFamilyLinkModel(0);
  v30 = *(int *)(v29 + 20);
  v31 = (char *)a1 + v30;
  v32 = (char *)a2 + v30;
  v33 = type metadata accessor for FamilyRowStatus(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v31, v32, v33);
  v34 = *(int *)(v29 + 24);
  v35 = (_QWORD *)((char *)a1 + v34);
  v36 = (_QWORD *)((char *)a2 + v34);
  v37 = v36[1];
  *v35 = *v36;
  v35[1] = v37;
  swift_bridgeObjectRetain(v37);
  return a1;
}

_QWORD *sub_1000BEE94(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;

  if (a1 != a2)
  {
    sub_100013014((uint64_t)a1);
    v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(a2, v4))
    {
      case 0u:
        v5 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
        v6 = a1;
        v7 = v4;
        v8 = 0;
        goto LABEL_13;
      case 1u:
        v9 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
        v6 = a1;
        v7 = v4;
        v8 = 1;
        goto LABEL_13;
      case 2u:
        v10 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
        v11 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v12 = (_QWORD *)((char *)a1 + v11);
        v13 = (_QWORD *)((char *)a2 + v11);
        *v12 = *v13;
        v14 = v13[1];
        v12[1] = v14;
        swift_bridgeObjectRetain(v14);
        v6 = a1;
        v7 = v4;
        v8 = 2;
        goto LABEL_13;
      case 3u:
        *a1 = *a2;
        v15 = a2[1];
        a1[1] = v15;
        a1[2] = a2[2];
        v16 = a2[3];
        a1[3] = v16;
        a1[4] = a2[4];
        v17 = a2[5];
        a1[5] = v17;
        a1[6] = a2[6];
        v18 = a2[7];
        a1[7] = v18;
        swift_bridgeObjectRetain(v15);
        swift_bridgeObjectRetain(v16);
        swift_bridgeObjectRetain(v17);
        swift_bridgeObjectRetain(v18);
        v6 = a1;
        v7 = v4;
        v8 = 3;
        goto LABEL_13;
      case 4u:
        *a1 = *a2;
        v19 = a2[1];
        a1[1] = v19;
        a1[2] = a2[2];
        v20 = a2[3];
        a1[3] = v20;
        a1[4] = a2[4];
        v21 = a2[5];
        a1[5] = v21;
        a1[6] = a2[6];
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v21);
        v6 = a1;
        v7 = v4;
        v8 = 4;
        goto LABEL_13;
      case 5u:
        *a1 = *a2;
        v22 = a2[1];
        a1[1] = v22;
        a1[2] = a2[2];
        v23 = a2[3];
        a1[3] = v23;
        v24 = (void *)a2[4];
        a1[4] = v24;
        v25 = a2[5];
        a1[5] = v25;
        v26 = a2[9];
        swift_bridgeObjectRetain(v22);
        swift_bridgeObjectRetain(v23);
        v27 = v24;
        swift_bridgeObjectRetain(v25);
        if (v26)
        {
          a1[9] = v26;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v26 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v26);
        }
        else
        {
          v28 = *((_OWORD *)a2 + 4);
          *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
          *((_OWORD *)a1 + 4) = v28;
        }
        v6 = a1;
        v7 = v4;
        v8 = 5;
LABEL_13:
        swift_storeEnumTagMultiPayload(v6, v7, v8);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
        break;
    }
  }
  v29 = type metadata accessor for PrimarySettingsListFamilyLinkModel(0);
  v30 = *(int *)(v29 + 20);
  v31 = (char *)a1 + v30;
  v32 = (char *)a2 + v30;
  v33 = type metadata accessor for FamilyRowStatus(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 24))(v31, v32, v33);
  v34 = *(int *)(v29 + 24);
  v35 = (_QWORD *)((char *)a1 + v34);
  v36 = (_QWORD *)((char *)a2 + v34);
  *v35 = *v36;
  v37 = v36[1];
  v38 = v35[1];
  v35[1] = v37;
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRelease(v38);
  return a1;
}

char *sub_1000BF1B4(char *a1, char *a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v4);
  if (EnumCaseMultiPayload == 2)
  {
    v7 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    v8 = sub_100004FC8(&qword_10015C420);
    *(_OWORD *)&a1[*(int *)(v8 + 48)] = *(_OWORD *)&a2[*(int *)(v8 + 48)];
    swift_storeEnumTagMultiPayload(a1, v4, 2);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v9 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
    swift_storeEnumTagMultiPayload(a1, v4, 1);
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    v6 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, v4, 0);
  }
  v10 = type metadata accessor for PrimarySettingsListFamilyLinkModel(0);
  v11 = *(int *)(v10 + 20);
  v12 = &a1[v11];
  v13 = &a2[v11];
  v14 = type metadata accessor for FamilyRowStatus(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  *(_OWORD *)&a1[*(int *)(v10 + 24)] = *(_OWORD *)&a2[*(int *)(v10 + 24)];
  return a1;
}

char *sub_1000BF320(char *a1, char *a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (a1 != a2)
  {
    sub_100013014((uint64_t)a1);
    v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v4);
    if (EnumCaseMultiPayload == 2)
    {
      v7 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      v8 = sub_100004FC8(&qword_10015C420);
      *(_OWORD *)&a1[*(int *)(v8 + 48)] = *(_OWORD *)&a2[*(int *)(v8 + 48)];
      swift_storeEnumTagMultiPayload(a1, v4, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v9 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      swift_storeEnumTagMultiPayload(a1, v4, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, v4, 0);
    }
  }
  v10 = type metadata accessor for PrimarySettingsListFamilyLinkModel(0);
  v11 = *(int *)(v10 + 20);
  v12 = &a1[v11];
  v13 = &a2[v11];
  v14 = type metadata accessor for FamilyRowStatus(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = *(int *)(v10 + 24);
  v16 = &a1[v15];
  v17 = &a2[v15];
  v19 = *(_QWORD *)v17;
  v18 = *((_QWORD *)v17 + 1);
  v20 = *((_QWORD *)v16 + 1);
  *(_QWORD *)v16 = v19;
  *((_QWORD *)v16 + 1) = v18;
  swift_bridgeObjectRelease(v20);
  return a1;
}

uint64_t sub_1000BF4AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000BF4B8);
}

uint64_t sub_1000BF4B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PrimarySettingsListFamilyLinkModel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1000BF4F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000BF500);
}

uint64_t sub_1000BF500(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PrimarySettingsListFamilyLinkModel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for PrimarySettingsListFamilyLink(uint64_t a1)
{
  uint64_t result;

  result = qword_10015B688;
  if (!qword_10015B688)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PrimarySettingsListFamilyLink);
  return result;
}

uint64_t sub_1000BF57C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for PrimarySettingsListFamilyLinkModel(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1000BF5E4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10012B558, 1);
}

uint64_t sub_1000BF5F4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;

  static FamilySettingsFactory.sharedProvider.getter(v8);
  v3 = v9;
  v4 = v10;
  sub_100007C2C(v8, v9);
  v5 = type metadata accessor for PrimarySettingsListFamilyLinkModel(0);
  v6 = dispatch thunk of FamilySettingsViewsProtocol.familyRow(for:info:)(v1 + *(int *)(v5 + 20), *(_QWORD *)(v1 + *(int *)(v5 + 24)), *(_QWORD *)(v1 + *(int *)(v5 + 24) + 8), v3, v4);
  result = sub_100005474(v8);
  *a1 = v6;
  return result;
}

void *sub_1000BF67C()
{
  return &protocol witness table for AnyView;
}

uint64_t sub_1000BF688@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint8_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  os_signpost_type_t v28;
  char *v29;
  uint64_t v30;
  os_signpost_id_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  os_signpost_id_t v37;
  uint64_t v38;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[3];
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v45 = a3;
  v46 = a2;
  v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OSSignpostID(0);
  v47 = *(_QWORD *)(v7 - 8);
  v48 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OSSignposter(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100156CD8 != -1)
    swift_once(&qword_100156CD8, sub_10008BEEC);
  v14 = sub_100007808(v10, (uint64_t)qword_10015D340);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v14, v10);
  v15 = sub_10003CE00(a1, (uint64_t)v50);
  static OSSignpostID.exclusive.getter(v15);
  v44 = v11;
  v16 = swift_slowAlloc(12, -1);
  v41 = v13;
  v17 = (uint8_t *)v16;
  v42 = swift_slowAlloc(32, -1);
  v53 = v42;
  v43 = v10;
  *(_DWORD *)v17 = 136315138;
  v40 = v9;
  v18 = (_QWORD *)a1;
  v19 = v51;
  v20 = v52;
  sub_100007C2C(v50, v51);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v20);
  sub_1000A03B0();
  v22 = v21;
  v24 = v23;
  sub_1000076B4((uint64_t)v6, type metadata accessor for PrimarySettingsListItemIdentifier);
  v49 = sub_1000DA1F0(v22, v24, &v53);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, v50, v17 + 4, v17 + 12);
  swift_bridgeObjectRelease(v24);
  v25 = sub_100005474(v50);
  v26 = OSSignposter.logHandle.getter(v25);
  v27 = static os_signpost_type_t.begin.getter();
  v28 = v27;
  v29 = v40;
  v31 = OSSignpostID.rawValue.getter(v27, v30);
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v26, v28, v31, "PrimarySettingsList Data Model Item Snapshot", "%s", v17, 0xCu);
  v33 = *(_QWORD *)(a1 + 24);
  v32 = *(_QWORD *)(a1 + 32);
  sub_100007C2C(v18, v18[3]);
  v34 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 24))(v46, v33, v32);
  v35 = static os_signpost_type_t.end.getter(v34);
  LOBYTE(v32) = v35;
  v37 = OSSignpostID.rawValue.getter(v35, v36);
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v26, (os_signpost_type_t)v32, v37, "PrimarySettingsList Data Model Item Snapshot", "%s", v17, 0xCu);

  v38 = v42;
  swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v38, -1, -1);
  swift_slowDealloc(v17, -1, -1);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v29, v48);
  return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v41, v43);
}

Swift::Int sub_1000BF9C8(unint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  Swift::Int result;
  _QWORD v6[2];

  v2 = *(_QWORD *)(type metadata accessor for PrimarySettingsListItemModel(0) - 8);
  v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v3 = sub_1000EEFBC(v3);
  v4 = *(_QWORD *)(v3 + 16);
  v6[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  result = sub_1000BFAB8(v6);
  *a1 = v3;
  return result;
}

uint64_t type metadata accessor for StaticPrimarySettingsListSectionProvider()
{
  return objc_opt_self(_TtC11SettingsApp40StaticPrimarySettingsListSectionProvider);
}

uint64_t sub_1000BFA6C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  void **v5;
  _BYTE v7[96];

  v4 = *v2;
  v5 = (void **)sub_100007C2C(a1, a1[3]);
  sub_1000C1A24(*v5, v4, (uint64_t)v7);
  return sub_10006F728((uint64_t)v7, a2);
}

Swift::Int sub_1000BFAB8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  Swift::Int result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Int v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  Swift::Int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(char *, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  Swift::Int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  Swift::Int v97;
  uint64_t v98;
  unint64_t v99;
  Swift::Int v100;
  Swift::Int v101;
  uint64_t v102;
  unint64_t v103;
  Swift::Int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t (*v126)(char *, uint64_t);
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v143;
  unint64_t v144;
  char *v145;
  char *v146;
  Swift::Int v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  BOOL v159;
  unint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  BOOL v169;
  uint64_t v170;
  char v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  BOOL v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  char *v189;
  char *v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  unint64_t v194;
  char *v195;
  uint64_t v196;
  unint64_t v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  unint64_t v202;
  _QWORD *v203;
  _QWORD *v204;
  Swift::Int v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  Swift::Int v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  Swift::Int v216;
  unint64_t v217;
  void (*v218)(char *, uint64_t);
  char *v219;
  uint64_t v220;
  char *v221;
  _QWORD *v222;
  Swift::Int v223;
  uint64_t v224;
  uint64_t v225;
  Swift::Int v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;

  v2 = v1;
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v221 = (char *)&v204 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v220 = type metadata accessor for EnvironmentValues(0);
  v215 = *(_QWORD *)(v220 - 8);
  __chkstk_darwin(v220);
  v219 = (char *)&v204 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v214 = type metadata accessor for PrimarySettingsListItemModel(0);
  v213 = *(_QWORD *)(v214 - 8);
  v7 = __chkstk_darwin(v214);
  v208 = (uint64_t)&v204 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v224 = (uint64_t)&v204 - v10;
  v11 = __chkstk_darwin(v9);
  v237 = (uint64_t)&v204 - v12;
  __chkstk_darwin(v11);
  v236 = (uint64_t)&v204 - v13;
  v14 = a1[1];
  result = _minimumMergeRunLength(_:)(v14);
  if (result >= v14)
  {
    if (v14 < 0)
      goto LABEL_141;
    if (v14)
      return sub_1000C0A50(0, v14, 1, a1);
    return result;
  }
  if (v14 >= 0)
    v16 = v14;
  else
    v16 = v14 + 1;
  if (v14 < -1)
    goto LABEL_149;
  v205 = result;
  if (v14 < 2)
  {
    v212 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v213 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v213 + 80));
    v204 = _swiftEmptyArrayStorage;
    if (v14 != 1)
    {
      v22 = _swiftEmptyArrayStorage[2];
      v21 = (char *)_swiftEmptyArrayStorage;
LABEL_105:
      if (v22 >= 2)
      {
        v196 = *a1;
        do
        {
          v197 = v22 - 2;
          if (v22 < 2)
            goto LABEL_136;
          if (!v196)
            goto LABEL_148;
          v198 = v21;
          v199 = *(_QWORD *)&v21[16 * v197 + 32];
          v200 = *(_QWORD *)&v21[16 * v22 + 24];
          sub_1000C0E88(v196 + *(_QWORD *)(v213 + 72) * v199, v196 + *(_QWORD *)(v213 + 72) * *(_QWORD *)&v21[16 * v22 + 16], v196 + *(_QWORD *)(v213 + 72) * v200, v212);
          if (v2)
          {
            v195 = v198;
            goto LABEL_118;
          }
          if (v200 < v199)
            goto LABEL_137;
          if ((swift_isUniquelyReferenced_nonNull_native(v198) & 1) == 0)
            v198 = sub_1000C19D4((uint64_t)v198);
          if (v197 >= *((_QWORD *)v198 + 2))
            goto LABEL_138;
          v201 = &v198[16 * v197 + 32];
          *(_QWORD *)v201 = v199;
          *((_QWORD *)v201 + 1) = v200;
          v202 = *((_QWORD *)v198 + 2);
          if (v22 > v202)
            goto LABEL_139;
          memmove(&v198[16 * v22 + 16], &v198[16 * v22 + 32], 16 * (v202 - v22));
          v21 = v198;
          *((_QWORD *)v198 + 2) = v202 - 1;
          v22 = v202 - 1;
        }
        while (v202 > 2);
      }
      v195 = v21;
LABEL_118:
      swift_bridgeObjectRelease(v195);
      v203 = v204;
      v204[2] = 0;
      return swift_bridgeObjectRelease(v203);
    }
  }
  else
  {
    v17 = v16 >> 1;
    v18 = static Array._allocateBufferUninitialized(minimumCapacity:)(v16 >> 1, v214);
    *(_QWORD *)(v18 + 16) = v17;
    v19 = *(unsigned __int8 *)(v213 + 80);
    v204 = (_QWORD *)v18;
    v212 = v18 + ((v19 + 32) & ~v19);
  }
  v20 = 0;
  v21 = (char *)_swiftEmptyArrayStorage;
  v222 = a1;
  while (1)
  {
    v23 = v20;
    v209 = v21;
    v211 = v20;
    if (v20 + 1 >= v14)
    {
      v57 = v20 + 1;
    }
    else
    {
      v206 = v2;
      v24 = *a1;
      v25 = *(_QWORD *)(v213 + 72);
      v227 = v25;
      v223 = v20 + 1;
      sub_10008BCDC(v24 + v25 * (v20 + 1), v236);
      v226 = v14;
      sub_10008BCDC(v24 + v25 * v23, v237);
      sub_10009BD7C();
      v27 = v26;
      v233 = v28;
      v234 = v26;
      v29 = v28;
      v31 = v30;
      v235 = v30;
      v33 = v32 & 1;
      LODWORD(v232) = v32 & 1;
      sub_10009BD7C();
      v230 = v34;
      v231 = v35;
      v37 = v36;
      v228 = v36;
      LODWORD(v229) = v38 & 1;
      v39 = v219;
      v40 = EnvironmentValues.init()(v34);
      v41 = v221;
      static Locale.autoupdatingCurrent.getter(v40);
      EnvironmentValues.locale.setter(v41);
      v42 = Text._resolveText(in:)(v39, v27, v29, v33, v31);
      v44 = v43;
      v45 = *(uint64_t (**)(char *, uint64_t))(v215 + 8);
      v46 = v220;
      v47 = v45(v39, v220);
      v240 = v42;
      v241 = v44;
      v48 = EnvironmentValues.init()(v47);
      static Locale.autoupdatingCurrent.getter(v48);
      EnvironmentValues.locale.setter(v41);
      v50 = v230;
      v49 = v231;
      v51 = v37;
      LOBYTE(v37) = v229;
      v52 = Text._resolveText(in:)(v39, v230, v51, v229, v231);
      v54 = v53;
      v55 = v46;
      v56 = v24;
      v218 = (void (*)(char *, uint64_t))v45;
      v45(v39, v55);
      v238 = v52;
      v239 = v54;
      v23 = v211;
      v217 = sub_100008A5C();
      v225 = StringProtocol.localizedCaseInsensitiveCompare<A>(_:)(&v238, &type metadata for String, &type metadata for String, v217, v217);
      swift_bridgeObjectRelease(v54);
      swift_bridgeObjectRelease(v241);
      sub_100007618(v50, v228, v37);
      swift_bridgeObjectRelease(v49);
      sub_100007618(v234, v233, v232);
      swift_bridgeObjectRelease(v235);
      v14 = v226;
      sub_1000076B4(v237, type metadata accessor for PrimarySettingsListItemModel);
      sub_1000076B4(v236, type metadata accessor for PrimarySettingsListItemModel);
      v57 = v23 + 2;
      v207 = v56;
      if (v23 + 2 < v14)
      {
        v216 = v227 * v223;
        v210 = v227 * v57;
        while (1)
        {
          v223 = v57;
          LODWORD(v235) = v225 == -1;
          sub_10008BCDC(v56 + v210, v236);
          sub_10008BCDC(v56 + v216, v237);
          sub_10009BD7C();
          v59 = v58;
          v232 = v60;
          v233 = v58;
          v61 = v60;
          v63 = v62;
          v234 = v62;
          v65 = v64 & 1;
          LODWORD(v231) = v64 & 1;
          sub_10009BD7C();
          v67 = v66;
          v228 = v66;
          v69 = v68;
          v230 = v70;
          LODWORD(v229) = v71 & 1;
          v72 = v219;
          v73 = EnvironmentValues.init()(v66);
          v74 = v221;
          static Locale.autoupdatingCurrent.getter(v73);
          EnvironmentValues.locale.setter(v74);
          v75 = Text._resolveText(in:)(v72, v59, v61, v65, v63);
          v77 = v76;
          v78 = v220;
          v79 = v218;
          v80 = ((uint64_t (*)(char *, uint64_t))v218)(v72, v220);
          v240 = v75;
          v241 = v77;
          v81 = EnvironmentValues.init()(v80);
          static Locale.autoupdatingCurrent.getter(v81);
          EnvironmentValues.locale.setter(v74);
          v82 = v67;
          LOBYTE(v67) = v229;
          v83 = v230;
          v84 = Text._resolveText(in:)(v72, v82, v69, v229, v230);
          v86 = v85;
          v79(v72, v78);
          v238 = v84;
          v239 = v86;
          v87 = StringProtocol.localizedCaseInsensitiveCompare<A>(_:)(&v238, &type metadata for String, &type metadata for String, v217, v217);
          swift_bridgeObjectRelease(v86);
          swift_bridgeObjectRelease(v241);
          sub_100007618(v228, v69, v67);
          swift_bridgeObjectRelease(v83);
          sub_100007618(v233, v232, v231);
          swift_bridgeObjectRelease(v234);
          sub_1000076B4(v237, type metadata accessor for PrimarySettingsListItemModel);
          sub_1000076B4(v236, type metadata accessor for PrimarySettingsListItemModel);
          if ((_DWORD)v235 == (v87 != -1))
            break;
          v57 = v223 + 1;
          v14 = v226;
          v56 += v227;
          if (v226 == v223 + 1)
          {
            v57 = v226;
            v23 = v211;
            goto LABEL_23;
          }
        }
        v57 = v223;
        v23 = v211;
        v14 = v226;
      }
LABEL_23:
      v2 = v206;
      a1 = v222;
      v21 = v209;
      if (v225 == -1)
      {
        v88 = v227;
        if (v57 < v23)
          goto LABEL_144;
        if (v23 < v57)
        {
          v89 = 0;
          v90 = v227 * (v57 - 1);
          v91 = v23;
          v92 = v57 * v227;
          v93 = v91;
          v94 = v91 * v227;
          do
          {
            if (v93 != v57 + v89 - 1)
            {
              v97 = v57;
              v98 = v207;
              if (!v207)
                goto LABEL_147;
              v99 = v207 + v94;
              v235 = v207 + v90;
              sub_10006F788(v207 + v94, v208);
              if (v94 < v90 || v99 >= v98 + v92)
              {
                v95 = v98 + v94;
                v96 = v235;
                swift_arrayInitWithTakeFrontToBack(v95, v235);
              }
              else
              {
                v96 = v235;
                if (v94 != v90)
                  swift_arrayInitWithTakeBackToFront(v99, v235);
              }
              sub_10006F788(v208, v96);
              v21 = v209;
              v57 = v97;
              v88 = v227;
            }
            ++v93;
            --v89;
            v90 -= v88;
            v92 -= v88;
            v94 += v88;
          }
          while (v93 < v57 + v89);
          a1 = v222;
          v23 = v211;
          v14 = v226;
        }
      }
    }
    if (v57 < v14)
    {
      if (__OFSUB__(v57, v23))
        goto LABEL_140;
      if (v57 - v23 < v205)
        break;
    }
LABEL_55:
    if (v57 < v23)
      goto LABEL_135;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v21);
    v223 = v57;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      v21 = v209;
    else
      v21 = sub_1000C1710(0, *((_QWORD *)v209 + 2) + 1, 1, v209);
    v144 = *((_QWORD *)v21 + 2);
    v143 = *((_QWORD *)v21 + 3);
    v22 = v144 + 1;
    if (v144 >= v143 >> 1)
      v21 = sub_1000C1710((char *)(v143 > 1), v144 + 1, 1, v21);
    *((_QWORD *)v21 + 2) = v22;
    v145 = v21 + 32;
    v146 = &v21[16 * v144 + 32];
    v147 = v223;
    *(_QWORD *)v146 = v23;
    *((_QWORD *)v146 + 1) = v147;
    if (v144)
    {
      while (1)
      {
        v148 = v22 - 1;
        if (v22 >= 4)
        {
          v153 = &v145[16 * v22];
          v154 = *((_QWORD *)v153 - 8);
          v155 = *((_QWORD *)v153 - 7);
          v159 = __OFSUB__(v155, v154);
          v156 = v155 - v154;
          if (v159)
            goto LABEL_124;
          v158 = *((_QWORD *)v153 - 6);
          v157 = *((_QWORD *)v153 - 5);
          v159 = __OFSUB__(v157, v158);
          v151 = v157 - v158;
          v152 = v159;
          if (v159)
            goto LABEL_125;
          v160 = v22 - 2;
          v161 = &v145[16 * v22 - 32];
          v163 = *(_QWORD *)v161;
          v162 = *((_QWORD *)v161 + 1);
          v159 = __OFSUB__(v162, v163);
          v164 = v162 - v163;
          if (v159)
            goto LABEL_127;
          v159 = __OFADD__(v151, v164);
          v165 = v151 + v164;
          if (v159)
            goto LABEL_130;
          if (v165 >= v156)
          {
            v183 = &v145[16 * v148];
            v185 = *(_QWORD *)v183;
            v184 = *((_QWORD *)v183 + 1);
            v159 = __OFSUB__(v184, v185);
            v186 = v184 - v185;
            if (v159)
              goto LABEL_134;
            v176 = v151 < v186;
            goto LABEL_92;
          }
        }
        else
        {
          if (v22 != 3)
          {
            v177 = *((_QWORD *)v21 + 4);
            v178 = *((_QWORD *)v21 + 5);
            v159 = __OFSUB__(v178, v177);
            v170 = v178 - v177;
            v171 = v159;
            goto LABEL_86;
          }
          v150 = *((_QWORD *)v21 + 4);
          v149 = *((_QWORD *)v21 + 5);
          v159 = __OFSUB__(v149, v150);
          v151 = v149 - v150;
          v152 = v159;
        }
        if ((v152 & 1) != 0)
          goto LABEL_126;
        v160 = v22 - 2;
        v166 = &v145[16 * v22 - 32];
        v168 = *(_QWORD *)v166;
        v167 = *((_QWORD *)v166 + 1);
        v169 = __OFSUB__(v167, v168);
        v170 = v167 - v168;
        v171 = v169;
        if (v169)
          goto LABEL_129;
        v172 = &v145[16 * v148];
        v174 = *(_QWORD *)v172;
        v173 = *((_QWORD *)v172 + 1);
        v159 = __OFSUB__(v173, v174);
        v175 = v173 - v174;
        if (v159)
          goto LABEL_132;
        if (__OFADD__(v170, v175))
          goto LABEL_133;
        if (v170 + v175 >= v151)
        {
          v176 = v151 < v175;
LABEL_92:
          if (v176)
            v148 = v160;
          goto LABEL_94;
        }
LABEL_86:
        if ((v171 & 1) != 0)
          goto LABEL_128;
        v179 = &v145[16 * v148];
        v181 = *(_QWORD *)v179;
        v180 = *((_QWORD *)v179 + 1);
        v159 = __OFSUB__(v180, v181);
        v182 = v180 - v181;
        if (v159)
          goto LABEL_131;
        if (v182 < v170)
          goto LABEL_14;
LABEL_94:
        v187 = v148 - 1;
        if (v148 - 1 >= v22)
        {
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
          goto LABEL_143;
        }
        v188 = *a1;
        if (!*a1)
          goto LABEL_146;
        v189 = v21;
        v190 = &v145[16 * v187];
        v191 = *(_QWORD *)v190;
        v192 = &v145[16 * v148];
        v193 = *((_QWORD *)v192 + 1);
        sub_1000C0E88(v188 + *(_QWORD *)(v213 + 72) * *(_QWORD *)v190, v188 + *(_QWORD *)(v213 + 72) * *(_QWORD *)v192, v188 + *(_QWORD *)(v213 + 72) * v193, v212);
        if (v2)
        {
          v195 = v189;
          goto LABEL_118;
        }
        if (v193 < v191)
          goto LABEL_121;
        if (v148 > *((_QWORD *)v189 + 2))
          goto LABEL_122;
        *(_QWORD *)v190 = v191;
        *(_QWORD *)&v145[16 * v187 + 8] = v193;
        v194 = *((_QWORD *)v189 + 2);
        if (v148 >= v194)
          goto LABEL_123;
        v22 = v194 - 1;
        memmove(&v145[16 * v148], v192 + 16, 16 * (v194 - 1 - v148));
        v21 = v189;
        *((_QWORD *)v189 + 2) = v194 - 1;
        a1 = v222;
        if (v194 <= 2)
          goto LABEL_14;
      }
    }
    v22 = 1;
LABEL_14:
    v14 = a1[1];
    v20 = v223;
    if (v223 >= v14)
      goto LABEL_105;
  }
  if (__OFADD__(v23, v205))
    goto LABEL_142;
  if (v23 + v205 >= v14)
    v100 = v14;
  else
    v100 = v23 + v205;
  if (v100 >= v23)
  {
    if (v57 != v100)
    {
      v206 = v2;
      v101 = *(_QWORD *)(v213 + 72);
      v102 = v101 * (v57 - 1);
      v216 = v101;
      v103 = v57 * v101;
      v210 = v100;
      do
      {
        v105 = 0;
        v223 = v57;
        v218 = (void (*)(char *, uint64_t))v102;
        v217 = v103;
        while (1)
        {
          v225 = v23;
          v106 = *a1;
          v227 = v103 + v105;
          sub_10008BCDC(v103 + v105 + v106, v236);
          v226 = v102 + v105;
          sub_10008BCDC(v102 + v105 + v106, v237);
          sub_10009BD7C();
          v108 = v107;
          v233 = v109;
          v234 = v107;
          v110 = v109;
          v112 = v111;
          v235 = v111;
          v114 = v113 & 1;
          LODWORD(v232) = v113 & 1;
          sub_10009BD7C();
          v229 = v116;
          v230 = v115;
          v231 = v117;
          v119 = v118 & 1;
          LODWORD(v228) = v118 & 1;
          v120 = v219;
          v121 = EnvironmentValues.init()(v115);
          v122 = v221;
          static Locale.autoupdatingCurrent.getter(v121);
          EnvironmentValues.locale.setter(v122);
          v123 = Text._resolveText(in:)(v120, v108, v110, v114, v112);
          v125 = v124;
          v126 = *(uint64_t (**)(char *, uint64_t))(v215 + 8);
          v127 = v220;
          v128 = v126(v120, v220);
          v240 = v123;
          v241 = v125;
          v129 = EnvironmentValues.init()(v128);
          static Locale.autoupdatingCurrent.getter(v129);
          EnvironmentValues.locale.setter(v122);
          v130 = v229;
          v131 = v230;
          v132 = v119;
          v133 = v231;
          v134 = Text._resolveText(in:)(v120, v230, v229, v132, v231);
          v136 = v135;
          v126(v120, v127);
          v238 = v134;
          v239 = v136;
          v137 = sub_100008A5C();
          v138 = StringProtocol.localizedCaseInsensitiveCompare<A>(_:)(&v238, &type metadata for String, &type metadata for String, v137, v137);
          swift_bridgeObjectRelease(v136);
          swift_bridgeObjectRelease(v241);
          sub_100007618(v131, v130, v228);
          swift_bridgeObjectRelease(v133);
          sub_100007618(v234, v233, v232);
          swift_bridgeObjectRelease(v235);
          sub_1000076B4(v237, type metadata accessor for PrimarySettingsListItemModel);
          sub_1000076B4(v236, type metadata accessor for PrimarySettingsListItemModel);
          if (v138 != -1)
            break;
          a1 = v222;
          v139 = *v222;
          if (!*v222)
            goto LABEL_145;
          v103 = v217;
          v140 = v139 + v217 + v105;
          v102 = (uint64_t)v218;
          v141 = (uint64_t)v218 + v139 + v105;
          sub_10006F788(v140, v224);
          swift_arrayInitWithTakeFrontToBack(v140, v141);
          sub_10006F788(v224, v141);
          v105 -= v216;
          v23 = v225 + 1;
          v104 = v223;
          if (v223 == v225 + 1)
            goto LABEL_48;
        }
        a1 = v222;
        v104 = v223;
        v102 = (uint64_t)v218;
        v103 = v217;
LABEL_48:
        v57 = v104 + 1;
        v102 += v216;
        v103 += v216;
        v23 = v211;
      }
      while (v57 != v210);
      v57 = v210;
      v2 = v206;
      v21 = v209;
    }
    goto LABEL_55;
  }
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000C0A50(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD v85[4];
  uint64_t v86;
  int v87;

  v61 = a1;
  v7 = type metadata accessor for Locale(0);
  __chkstk_darwin(v7);
  v67 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = type metadata accessor for EnvironmentValues(0);
  v65 = *(_QWORD *)(v66 - 8);
  __chkstk_darwin(v66);
  v64 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = type metadata accessor for PrimarySettingsListItemModel(0);
  v10 = __chkstk_darwin(v62);
  v72 = (uint64_t)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v84 = (uint64_t)&v59 - v13;
  result = __chkstk_darwin(v12);
  v83 = (uint64_t)&v59 - v16;
  v71 = a3;
  v60 = a2;
  if (a3 != a2)
  {
    v17 = *(_QWORD *)(v15 + 72);
    v18 = v17 * (v71 - 1);
    v68 = v17;
    v19 = v17 * v71;
    v63 = a4;
LABEL_5:
    v20 = 0;
    v75 = v61;
    v69 = v18;
    v70 = v19;
    while (1)
    {
      v82 = v20;
      v21 = *a4;
      v74 = v19 + v20;
      sub_10008BCDC(v19 + v20 + v21, v83);
      v73 = v18 + v20;
      sub_10008BCDC(v18 + v20 + v21, v84);
      sub_10009BD7C();
      v23 = v22;
      v79 = v24;
      v80 = v22;
      v25 = v24;
      v27 = v26;
      v81 = v26;
      v29 = v28 & 1;
      v87 = v28 & 1;
      sub_10009BD7C();
      v76 = v31;
      v77 = v30;
      v78 = v32;
      v34 = v33 & 1;
      v35 = v64;
      v36 = ((uint64_t (*)(void))EnvironmentValues.init())();
      v37 = v67;
      static Locale.autoupdatingCurrent.getter(v36);
      EnvironmentValues.locale.setter(v37);
      v38 = Text._resolveText(in:)(v35, v23, v25, v29, v27);
      v40 = v39;
      v41 = *(uint64_t (**)(char *, uint64_t))(v65 + 8);
      v42 = v66;
      v43 = v41(v35, v66);
      v85[3] = v38;
      v86 = v40;
      v44 = EnvironmentValues.init()(v43);
      static Locale.autoupdatingCurrent.getter(v44);
      EnvironmentValues.locale.setter(v37);
      v46 = v76;
      v45 = v77;
      v47 = v78;
      v48 = Text._resolveText(in:)(v35, v77, v76, v34, v78);
      v50 = v49;
      v41(v35, v42);
      v85[0] = v48;
      v85[1] = v50;
      v18 = v69;
      v19 = v70;
      v51 = sub_100008A5C();
      v52 = StringProtocol.localizedCaseInsensitiveCompare<A>(_:)(v85, &type metadata for String, &type metadata for String, v51, v51);
      v53 = v50;
      a4 = v63;
      swift_bridgeObjectRelease(v53);
      swift_bridgeObjectRelease(v86);
      v54 = v45;
      v55 = v82;
      sub_100007618(v54, v46, v34);
      swift_bridgeObjectRelease(v47);
      sub_100007618(v80, v79, v87);
      swift_bridgeObjectRelease(v81);
      sub_1000076B4(v84, type metadata accessor for PrimarySettingsListItemModel);
      result = sub_1000076B4(v83, type metadata accessor for PrimarySettingsListItemModel);
      if (v52 != -1)
      {
LABEL_4:
        v18 += v68;
        v19 += v68;
        if (++v71 == v60)
          return result;
        goto LABEL_5;
      }
      v56 = *a4;
      if (!*a4)
        break;
      v57 = v56 + v19 + v55;
      v58 = v56 + v18 + v55;
      sub_10006F788(v57, v72);
      swift_arrayInitWithTakeFrontToBack(v57, v58);
      result = sub_10006F788(v72, v58);
      v20 = v55 - v68;
      if (v71 == ++v75)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1000C0E88(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(_BYTE *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  uint64_t v77;
  _BYTE *v78;
  uint64_t v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t (*v85)(_BYTE *, uint64_t);
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t result;
  _BYTE v100[16];
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  _BYTE *v112;
  uint64_t v113;
  uint64_t v114;
  _BYTE *v115;
  unint64_t v116;
  unint64_t v117;
  _BYTE *v118;
  _BYTE *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;

  v8 = type metadata accessor for Locale(0);
  __chkstk_darwin(v8);
  v115 = &v100[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for EnvironmentValues(0);
  v113 = *(_QWORD *)(v10 - 8);
  v114 = v10;
  __chkstk_darwin(v10);
  v112 = &v100[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v105 = type metadata accessor for PrimarySettingsListItemModel(0);
  v12 = __chkstk_darwin(v105);
  v119 = &v100[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12);
  v118 = &v100[-v14];
  v16 = *(_QWORD *)(v15 + 72);
  if (!v16)
  {
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if (a2 - a1 == 0x8000000000000000 && v16 == -1)
    goto LABEL_61;
  v17 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v16 == -1)
    goto LABEL_62;
  v18 = (uint64_t)(a2 - a1) / v16;
  v126 = a1;
  v125 = a4;
  v19 = v17 / v16;
  if (v18 >= v17 / v16)
  {
    if ((v19 & 0x8000000000000000) == 0)
    {
      v21 = v19 * v16;
      if (a4 < a2 || a2 + v21 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2);
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4, a2);
      }
      v60 = a4 + v21;
      v124 = a4 + v21;
      v126 = a2;
      if (v21 >= 1 && a1 < a2)
      {
        v62 = -v16;
        v103 = a4;
        v102 = a1;
        v101 = v62;
        do
        {
          v116 = a3;
          v117 = a2;
          v111 = a3 + v62;
          sub_10008BCDC(v60 + v62, (uint64_t)v118);
          v104 = a2 + v62;
          sub_10008BCDC(a2 + v62, (uint64_t)v119);
          sub_10009BD7C();
          v64 = v63;
          v109 = v63;
          v66 = v65;
          v108 = v65;
          v68 = v67;
          v110 = v67;
          v70 = v69 & 1;
          LODWORD(v107) = v69 & 1;
          sub_10009BD7C();
          v72 = v71;
          v74 = v73;
          v106 = v75;
          v77 = v76 & 1;
          v78 = v112;
          v79 = EnvironmentValues.init()(v71);
          v80 = v115;
          static Locale.autoupdatingCurrent.getter(v79);
          EnvironmentValues.locale.setter(v80);
          v81 = Text._resolveText(in:)(v78, v64, v66, v70, v68);
          v83 = v82;
          v84 = v114;
          v85 = *(uint64_t (**)(_BYTE *, uint64_t))(v113 + 8);
          v86 = v85(v78, v114);
          v122 = v81;
          v123 = v83;
          v87 = EnvironmentValues.init()(v86);
          static Locale.autoupdatingCurrent.getter(v87);
          EnvironmentValues.locale.setter(v80);
          v88 = v106;
          v89 = Text._resolveText(in:)(v78, v72, v74, v77, v106);
          v91 = v90;
          v85(v78, v84);
          v120 = v89;
          v121 = v91;
          v92 = sub_100008A5C();
          v93 = StringProtocol.localizedCaseInsensitiveCompare<A>(_:)(&v120, &type metadata for String, &type metadata for String, v92, v92);
          swift_bridgeObjectRelease(v91);
          swift_bridgeObjectRelease(v123);
          sub_100007618(v72, v74, v77);
          swift_bridgeObjectRelease(v88);
          sub_100007618(v109, v108, v107);
          swift_bridgeObjectRelease(v110);
          sub_1000076B4((uint64_t)v119, type metadata accessor for PrimarySettingsListItemModel);
          sub_1000076B4((uint64_t)v118, type metadata accessor for PrimarySettingsListItemModel);
          if (v93 == -1)
          {
            v96 = v104;
            v62 = v101;
            a3 = v111;
            if (v116 < v117 || v111 >= v117)
            {
              swift_arrayInitWithTakeFrontToBack(v111, v104);
              v97 = v103;
              v98 = v102;
            }
            else
            {
              v97 = v103;
              v98 = v102;
              if (v116 != v117)
                swift_arrayInitWithTakeBackToFront(v111, v104);
            }
            v126 += v62;
          }
          else
          {
            v94 = v124;
            v95 = v124 + v101;
            v124 += v101;
            v96 = v117;
            v62 = v101;
            a3 = v111;
            if (v116 < v94 || v111 >= v94)
            {
              swift_arrayInitWithTakeFrontToBack(v111, v95);
              v97 = v103;
              v98 = v102;
            }
            else
            {
              v97 = v103;
              v98 = v102;
              if (v116 != v94)
                swift_arrayInitWithTakeBackToFront(v111, v95);
            }
          }
          v60 = v124;
          if (v124 <= v97)
            break;
          a2 = v96;
        }
        while (v96 > v98);
      }
      goto LABEL_59;
    }
  }
  else if ((v18 & 0x8000000000000000) == 0)
  {
    v20 = v18 * v16;
    if (a4 < a1 || a1 + v20 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1);
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4, a1);
    }
    v106 = a4 + v20;
    v124 = a4 + v20;
    if (v20 >= 1 && a2 < a3)
    {
      v116 = a3;
      v104 = v16;
      do
      {
        v117 = a2;
        sub_10008BCDC(a2, (uint64_t)v118);
        sub_10008BCDC(a4, (uint64_t)v119);
        sub_10009BD7C();
        v24 = v23;
        v109 = v25;
        v110 = v23;
        v26 = v25;
        v28 = v27;
        v111 = v27;
        v30 = v29 & 1;
        LODWORD(v108) = v29 & 1;
        sub_10009BD7C();
        v32 = v31;
        v34 = v33;
        v107 = v35;
        v37 = v36 & 1;
        v38 = v112;
        v39 = EnvironmentValues.init()(v31);
        v40 = v115;
        static Locale.autoupdatingCurrent.getter(v39);
        EnvironmentValues.locale.setter(v40);
        v41 = Text._resolveText(in:)(v38, v24, v26, v30, v28);
        v43 = v42;
        v44 = v114;
        v45 = *(uint64_t (**)(_BYTE *, uint64_t))(v113 + 8);
        v46 = v45(v38, v114);
        v122 = v41;
        v123 = v43;
        v47 = EnvironmentValues.init()(v46);
        static Locale.autoupdatingCurrent.getter(v47);
        EnvironmentValues.locale.setter(v40);
        v48 = v107;
        v49 = Text._resolveText(in:)(v38, v32, v34, v37, v107);
        v51 = v50;
        v45(v38, v44);
        v120 = v49;
        v121 = v51;
        v52 = sub_100008A5C();
        v53 = StringProtocol.localizedCaseInsensitiveCompare<A>(_:)(&v120, &type metadata for String, &type metadata for String, v52, v52);
        swift_bridgeObjectRelease(v51);
        swift_bridgeObjectRelease(v123);
        sub_100007618(v32, v34, v37);
        swift_bridgeObjectRelease(v48);
        sub_100007618(v110, v109, v108);
        swift_bridgeObjectRelease(v111);
        sub_1000076B4((uint64_t)v119, type metadata accessor for PrimarySettingsListItemModel);
        sub_1000076B4((uint64_t)v118, type metadata accessor for PrimarySettingsListItemModel);
        v54 = v126;
        if (v53 == -1)
        {
          v56 = v104;
          v59 = v117 + v104;
          if (v126 < v117 || v126 >= v59)
          {
            swift_arrayInitWithTakeFrontToBack(v126, v117);
            v58 = v116;
          }
          else
          {
            v58 = v116;
            if (v126 == v117)
              v54 = v117;
            else
              swift_arrayInitWithTakeBackToFront(v126, v117);
          }
        }
        else
        {
          v55 = v117;
          v56 = v104;
          v57 = v125 + v104;
          if (v126 < v125 || v126 >= v57)
          {
            swift_arrayInitWithTakeFrontToBack(v126, v125);
            v58 = v116;
          }
          else
          {
            v58 = v116;
            if (v126 != v125)
              swift_arrayInitWithTakeBackToFront(v126, v125);
          }
          v125 = v57;
          v59 = v55;
        }
        v126 = v54 + v56;
        a4 = v125;
        if (v125 >= v106)
          break;
        a2 = v59;
      }
      while (v59 < v58);
    }
LABEL_59:
    sub_1000C18C8(&v126, &v125, (uint64_t *)&v124, type metadata accessor for PrimarySettingsListItemModel);
    return 1;
  }
LABEL_63:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

char *sub_1000C1710(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100004FC8(&qword_10015B778);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

uint64_t sub_1000C1808(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_1000C18C8(a1, a2, a3, type metadata accessor for SearchResultSection);
}

uint64_t sub_1000C1814(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_1000C18C8(a1, a2, a3, type metadata accessor for SearchResult);
}

char *sub_1000C1820(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  char v9;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 7;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -8)
  {
    v9 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v9, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
      return (char *)memmove(result, v3, 8 * v7);
  }
  return result;
}

uint64_t sub_1000C18C8(unint64_t *a1, unint64_t *a2, uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  v5 = *a2;
  v6 = *a3;
  result = a4(0);
  v8 = *(_QWORD *)(*(_QWORD *)(result - 8) + 72);
  if (!v8)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v9 = v6 - v5;
  if (v6 - v5 == 0x8000000000000000 && v8 == -1)
    goto LABEL_14;
  if (v9 / v8 < 0)
  {
LABEL_15:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
    __break(1u);
    return result;
  }
  if (v4 < v5 || v4 >= v5 + v9 / v8 * v8)
    return swift_arrayInitWithTakeFrontToBack(v4, v5);
  if (v4 != v5)
    return swift_arrayInitWithTakeBackToFront(v4, v5);
  return result;
}

char *sub_1000C19D4(uint64_t a1)
{
  return sub_1000C1710(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1000C19E8(_QWORD *a1)
{
  return sub_10000F4D0(0, a1[2], 0, a1);
}

uint64_t sub_1000C19FC(_QWORD *a1)
{
  return sub_10000F4E4(0, a1[2], 0, a1);
}

uint64_t sub_1000C1A10(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1);
}

double sub_1000C1A24@<D0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  id v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  id v12;
  double result;
  _QWORD v14[6];
  _QWORD *v15;
  _QWORD v16[5];

  v16[3] = &type metadata for PrimarySettingsListDataModelGenerationContext;
  v16[4] = &off_100148E38;
  v16[0] = a1;
  v4 = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(v4 + 16))
  {
    v14[2] = v16;
    v6 = a1;
    swift_bridgeObjectRetain(v4);
    v7 = sub_10006E940((void (*)(_QWORD))sub_1000C1B4C, (uint64_t)v14, v4);
    swift_bridgeObjectRelease(v4);
    v15 = v7;
    if ((*(_BYTE *)(a2 + 33) & 1) != 0)
    {
      sub_1000BF9C8((unint64_t *)&v15);
      v7 = v15;
    }
    v8 = *(_QWORD *)(a2 + 16);
    v9 = *(_QWORD *)(a2 + 24);
    v10 = *(_BYTE *)(a2 + 32);
    v11 = v10;
    sub_10000BA8C(v8, v9, v10);
  }
  else
  {
    v12 = a1;
    v8 = 0;
    v9 = 0;
    v11 = 0;
    v7 = 0;
  }
  sub_100005474(v16);
  *(_QWORD *)a3 = v8;
  *(_QWORD *)(a3 + 8) = v9;
  *(_QWORD *)(a3 + 16) = v11;
  result = 0.0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_QWORD *)(a3 + 88) = v7;
  return result;
}

uint64_t sub_1000C1B4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1000BF688(a1, *(_QWORD *)(v2 + 16), a2);
}

ValueMetadata *type metadata accessor for AboutSupervisedDeviceRepresentable()
{
  return &type metadata for AboutSupervisedDeviceRepresentable;
}

id sub_1000C1B78()
{
  id v0;
  id v1;

  v0 = objc_msgSend(objc_allocWithZone((Class)PSAboutHTMLSheetViewController), "init");
  v1 = (id)PSAboutDeviceSupervision();
  objc_msgSend(v0, "setHTMLContent:isFragment:", v1, 1);

  return v0;
}

uint64_t sub_1000C1BDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000C1CA0();
  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000C1C2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000C1CA0();
  return static UIViewControllerRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_1000C1C7C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000C1CA0();
  UIViewControllerRepresentable.body.getter(a1, v2);
  __break(1u);
}

unint64_t sub_1000C1CA0()
{
  unint64_t result;

  result = qword_10015B780;
  if (!qword_10015B780)
  {
    result = swift_getWitnessTable(&unk_10011A044, &type metadata for AboutSupervisedDeviceRepresentable);
    atomic_store(result, (unint64_t *)&qword_10015B780);
  }
  return result;
}

ValueMetadata *type metadata accessor for SecurityResearchDeviceSectionModelProvider()
{
  return &type metadata for SecurityResearchDeviceSectionModelProvider;
}

uint64_t sub_1000C1CF4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _BYTE v4[96];

  sub_1000C1D34(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16), (uint64_t)v4);
  return sub_10006F728((uint64_t)v4, a1);
}

id sub_1000C1D34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, uint64_t a4@<X8>)
{
  id result;
  void *v9;
  int researchFuse;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  result = (id)MobileGestalt_get_current_device();
  if (result)
  {
    v9 = result;
    researchFuse = MobileGestalt_get_researchFuse();

    if (researchFuse)
    {
      sub_10000BA8C(a1, a2, a3);
      v11 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000001FLL, 0x8000000100125F60);
      result = (id)Text.init(_:tableName:bundle:comment:)(v11);
      v15 = v14 & 1;
      v16 = a3;
      v17 = _swiftEmptyArrayStorage;
    }
    else
    {
      a1 = 0;
      a2 = 0;
      v16 = 0;
      result = 0;
      v12 = 0;
      v15 = 0;
      v13 = 0;
      v17 = 0;
    }
    *(_QWORD *)a4 = a1;
    *(_QWORD *)(a4 + 8) = a2;
    *(_QWORD *)(a4 + 16) = v16;
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_QWORD *)(a4 + 56) = result;
    *(_QWORD *)(a4 + 64) = v12;
    *(_QWORD *)(a4 + 72) = v15;
    *(_QWORD *)(a4 + 80) = v13;
    *(_QWORD *)(a4 + 88) = v17;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1000C1E48(uint64_t a1)
{
  id v2;
  unsigned int v3;
  id v4;
  void *v5;
  void *v6;

  v2 = objc_msgSend((id)objc_opt_self(PSLaunchTracker), "sharedInstance");
  v3 = objc_msgSend(v2, "launchHasCompleted");

  if (v3 && !*(_QWORD *)(a1 + 24))
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)DMCAccountSpecifierProvider), "init");
    v5 = *(void **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v4;

    v6 = *(void **)(a1 + 24);
    if (v6)
    {
      objc_msgSend(v6, "setViewModelDelegate:", a1);
      sub_1000C1EF4();
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t sub_1000C1EF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_signpost_type_t v19;
  uint8_t *v20;
  uint8_t *v21;
  uint64_t v22;
  os_signpost_id_t v23;
  uint8_t *v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD aBlock[5];
  uint64_t v42;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v38 = *(_QWORD *)(v2 - 8);
  v39 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v36 = *(_QWORD *)(v5 - 8);
  v37 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OSSignpostID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v35 - v13;
  if (qword_100156CD8 != -1)
    swift_once(&qword_100156CD8, sub_10008BEEC);
  v15 = type metadata accessor for OSSignposter(0);
  v16 = sub_100007808(v15, (uint64_t)qword_10015D340);
  v17 = static OSSignpostID.exclusive.getter(v16);
  v18 = OSSignposter.logHandle.getter(v17);
  v19 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    v35 = v7;
    v21 = v20;
    *(_WORD *)v20 = 0;
    v23 = OSSignpostID.rawValue.getter(v20, v22);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, v19, v23, "PrimaryAppleAccountStatusObserver.updateSecondaryAppleAccountItems began", "", v21, 2u);
    v24 = v21;
    v1 = v0;
    v7 = v35;
    swift_slowDealloc(v24, -1, -1);

    v25 = *(void (**)(char *, uint64_t))(v9 + 8);
    v25(v14, v8);
    v25(v12, v8);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  }
  if (qword_100156D60 != -1)
    swift_once(&qword_100156D60, sub_1000D34BC);
  v26 = swift_allocObject(&unk_10014CB78, 24, 7);
  swift_weakInit(v26 + 16, v1);
  aBlock[4] = sub_1000C2D9C;
  v42 = v26;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100005350;
  aBlock[3] = &unk_10014CB90;
  v27 = _Block_copy(aBlock);
  v28 = swift_retain(v26);
  static DispatchQoS.unspecified.getter(v28);
  v40 = _swiftEmptyArrayStorage;
  v29 = sub_100005568((unint64_t *)&qword_10015BAB0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v30 = sub_100004FC8((uint64_t *)&unk_100156F40);
  v31 = sub_10000551C();
  v32 = v39;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v40, v30, v31, v39, v29);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v4, v27);
  _Block_release(v27);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v4, v32);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v7, v37);
  v33 = v42;
  swift_release(v26);
  return swift_release(v33);
}

void sub_1000C2288(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t Strong;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char **v21;
  void *v22;
  id v23;
  void *v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  _QWORD *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  _QWORD *v38;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  id v45;
  void *v46;
  _QWORD *v47;
  _QWORD *v48;
  id v49;
  void *v50;
  uint64_t v51;
  _QWORD *v52;
  id v53;
  id v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  os_signpost_type_t v68;
  uint8_t *v69;
  uint64_t v70;
  os_signpost_id_t v71;
  void (*v72)(char *, uint64_t);
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  void *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD aBlock[5];
  uint64_t v103;
  char v104[32];

  v2 = type metadata accessor for OSSignpostID(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v88 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v88 - v7;
  v9 = (_QWORD *)type metadata accessor for DispatchWorkItemFlags(0);
  v10 = (_QWORD *)*(v9 - 1);
  __chkstk_darwin(v9);
  v12 = (uint64_t)&v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  v93 = *(_QWORD *)(v13 - 8);
  v94 = v13;
  __chkstk_darwin(v13);
  v92 = (char *)&v88 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1 += 16;
  swift_beginAccess(a1, v104, 0, 0);
  Strong = swift_weakLoadStrong(a1);
  if (!Strong)
  {
    if (qword_100156CD8 != -1)
      swift_once(&qword_100156CD8, sub_10008BEEC);
    v64 = type metadata accessor for OSSignposter(0);
    v65 = sub_100007808(v64, (uint64_t)qword_10015D340);
    v66 = static OSSignpostID.exclusive.getter(v65);
    v67 = OSSignposter.logHandle.getter(v66);
    v68 = static os_signpost_type_t.event.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v8, v2);
      v69 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v69 = 0;
      v71 = OSSignpostID.rawValue.getter(v69, v70);
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v67, v68, v71, "PrimaryAppleAccountStatusObserver.updateSecondaryAppleAccountItems bailed", "", v69, 2u);
      swift_slowDealloc(v69, -1, -1);

      v72 = *(void (**)(char *, uint64_t))(v3 + 8);
      v72(v8, v2);
      v72(v6, v2);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    }
    return;
  }
  v91 = Strong;
  v16 = *(void **)(Strong + 24);
  if (!v16)
    goto LABEL_43;
  v17 = objc_msgSend(v16, "secondaryAccountViewModels");
  v18 = sub_100007BBC(0, &qword_10015B898, DMCSecondaryAccountViewModel_ptr);
  v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v17, v18);

  if ((unint64_t)v19 >> 62)
  {
LABEL_37:
    if (v19 < 0)
      v87 = v19;
    else
      v87 = v19 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v19);
    v20 = _CocoaArrayWrapper.endIndex.getter(v87);
    swift_bridgeObjectRelease(v19);
  }
  else
  {
    v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v88 = v12;
  v89 = v10;
  v90 = v9;
  if (!v20)
  {
    v101 = _swiftEmptyArrayStorage;
LABEL_34:
    swift_bridgeObjectRelease(v19);
    v73 = sub_100007BBC(0, (unint64_t *)&qword_100159D30, OS_dispatch_queue_ptr);
    v74 = (void *)static OS_dispatch_queue.main.getter(v73);
    v75 = swift_allocObject(&unk_10014CB78, 24, 7);
    v76 = v91;
    swift_weakInit(v75 + 16, v91);
    v77 = swift_allocObject(&unk_10014CBC8, 32, 7);
    v78 = v101;
    *(_QWORD *)(v77 + 16) = v75;
    *(_QWORD *)(v77 + 24) = v78;
    aBlock[4] = sub_1000C2DD0;
    v103 = v77;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100005350;
    aBlock[3] = &unk_10014CBE0;
    v79 = _Block_copy(aBlock);
    v80 = swift_release(v103);
    v81 = v92;
    static DispatchQoS.unspecified.getter(v80);
    aBlock[0] = _swiftEmptyArrayStorage;
    v82 = sub_100005568((unint64_t *)&qword_10015BAB0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v83 = sub_100004FC8((uint64_t *)&unk_100156F40);
    v84 = sub_10000551C();
    v85 = v88;
    v86 = v90;
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v83, v84, v90, v82);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v81, v85, v79);
    _Block_release(v79);
    swift_release(v76);

    ((void (*)(uint64_t, _QWORD *))v89[1])(v85, v86);
    (*(void (**)(char *, uint64_t))(v93 + 8))(v81, v94);
    return;
  }
  v101 = _swiftEmptyArrayStorage;
  v96 = v19;
  v97 = v19 & 0xC000000000000001;
  v12 = 4;
  v21 = &selRef_visibilityStyle;
  v95 = v20;
  while (1)
  {
    if (v97)
      v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12 - 4, v19);
    else
      v23 = *(id *)(v19 + 8 * v12);
    v24 = v23;
    if (__OFADD__(v12 - 4, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    v25 = objc_msgSend(v23, "account");
    v26 = objc_msgSend(v25, v21[99]);

    if (!v26)
      break;
    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    v99 = v28;
    v100 = v27;

    v29 = objc_msgSend(v24, v21[99]);
    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    v10 = v31;

    v32 = objc_msgSend(v24, "title");
    v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    v35 = v34;

    v36 = objc_msgSend(v24, "subtitle");
    v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
    v9 = v38;

    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v101);
    v98 = v12 - 3;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v101 = sub_100052C7C(0, v101[2] + 1, 1, v101);
    v41 = v101[2];
    v40 = v101[3];
    if (v41 >= v40 >> 1)
      v101 = sub_100052C7C((_QWORD *)(v40 > 1), v41 + 1, 1, v101);
    v42 = v101;
    v101[2] = v41 + 1;
    v43 = &v42[9 * v41];
    v44 = v99;
    v43[4] = v100;
    v43[5] = v44;
    v43[6] = v30;
    v43[7] = v10;
    v43[8] = v33;
    v43[9] = v35;
    v43[10] = v37;
    v43[11] = v9;
    *((_BYTE *)v43 + 96) = 0;
    v45 = objc_msgSend(v24, "reauthIdentifer", v88);
    if (v45)
    {
      v46 = v45;
      v9 = (_QWORD *)static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
      v48 = v47;

      v49 = objc_msgSend(v24, "reauthTitle");
      v21 = &selRef_visibilityStyle;
      if (!v49)
      {
        v63 = v48;
LABEL_28:
        swift_bridgeObjectRelease(v63);
        v22 = v24;
        goto LABEL_9;
      }
      v50 = v49;
      v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
      v10 = v52;

      v53 = objc_msgSend(v24, "reauthBadgeNumber");
      if (!v53)
      {
        swift_bridgeObjectRelease(v48);
        v63 = v10;
        goto LABEL_28;
      }
      v22 = v53;
      v100 = (uint64_t)v10;
      v10 = v9;
      v54 = objc_msgSend(v24, "account");
      v55 = objc_msgSend(v54, "identifier");

      if (!v55)
        goto LABEL_42;
      v99 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
      v57 = v56;

      v9 = objc_msgSend(v22, "integerValue");
      v59 = v101[2];
      v58 = v101[3];
      if (v59 >= v58 >> 1)
        v101 = sub_100052C7C((_QWORD *)(v58 > 1), v59 + 1, 1, v101);
      v60 = v101;
      v101[2] = v59 + 1;
      v61 = &v60[9 * v59];
      v61[4] = v99;
      v61[5] = v57;
      v61[6] = v10;
      v61[7] = v48;
      v62 = v100;
      v61[8] = v51;
      v61[9] = v62;
      v61[10] = v9;
      v61[11] = 0;
      *((_BYTE *)v61 + 96) = 1;

    }
    else
    {
      v22 = v24;
    }
    v21 = &selRef_visibilityStyle;
LABEL_9:

    ++v12;
    v19 = v96;
    if (v98 == v95)
      goto LABEL_34;
  }
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
}

uint64_t sub_1000C2A4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Strong;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_signpost_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  os_signpost_id_t v25;
  void (*v26)(char *, uint64_t);
  _QWORD v28[2];
  char v29;
  _BYTE v30[24];

  v4 = type metadata accessor for OSSignpostID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)v28 - v9;
  a1 += 16;
  swift_beginAccess(a1, v30, 0, 0);
  Strong = swift_weakLoadStrong(a1);
  if (Strong)
  {
    v12 = (_QWORD *)Strong;
    if ((sub_10000AD40(a2, *(_QWORD *)(Strong + 16)) & 1) != 0)
    {
      swift_bridgeObjectRetain(a2);
    }
    else
    {
      v13 = type metadata accessor for SecondaryAppleAccountItemsObserver();
      v15 = sub_100005568(&qword_10015C9E0, v14, (uint64_t (*)(uint64_t))type metadata accessor for SecondaryAppleAccountItemsObserver, (uint64_t)&unk_10011A1A4);
      swift_bridgeObjectRetain(a2);
      v16 = ObservableObject<>.objectWillChange.getter(v13, v15);
      ObservableObjectPublisher.send()();
      swift_release(v16);
      sub_100007C2C(v12 + 4, v12[7]);
      v28[0] = "Secondary Account";
      v28[1] = 17;
      v29 = 2;
      PassthroughSubject.send(_:)(v28);
    }
    v17 = v12[2];
    v12[2] = a2;
    swift_release(v12);
    swift_bridgeObjectRelease(v17);
  }
  if (qword_100156CD8 != -1)
    swift_once(&qword_100156CD8, sub_10008BEEC);
  v18 = type metadata accessor for OSSignposter(0);
  v19 = sub_100007808(v18, (uint64_t)qword_10015D340);
  v20 = static OSSignpostID.exclusive.getter(v19);
  v21 = OSSignposter.logHandle.getter(v20);
  v22 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v10, v4);
    v23 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v23 = 0;
    v25 = OSSignpostID.rawValue.getter(v23, v24);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v21, v22, v25, "PrimaryAppleAccountStatusObserver.updateSecondaryAppleAccountItems completed", "", v23, 2u);
    swift_slowDealloc(v23, -1, -1);

    v26 = *(void (**)(char *, uint64_t))(v5 + 8);
    v26(v10, v4);
    return ((uint64_t (*)(char *, uint64_t))v26)(v8, v4);
  }
  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  }
}

uint64_t sub_1000C2CD4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));

  sub_100005474((_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 72, 7);
}

uint64_t type metadata accessor for SecondaryAppleAccountItemsObserver()
{
  return objc_opt_self(_TtC11SettingsApp34SecondaryAppleAccountItemsObserver);
}

uint64_t sub_1000C2D28@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  _QWORD *v2;
  uint64_t result;

  result = ObservableObject<>.objectWillChange.getter(*v2, a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000C2D78()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000C2D9C()
{
  uint64_t v0;

  sub_1000C2288(v0);
}

uint64_t sub_1000C2DA4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000C2DD0()
{
  uint64_t v0;

  return sub_1000C2A4C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

ValueMetadata *type metadata accessor for LegacyCastleURLRoute()
{
  return &type metadata for LegacyCastleURLRoute;
}

void sub_1000C2DF0(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  char *v47;
  char *v48;
  uint64_t (*v49)(char *, char *, char *);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t (*v71)(char *, char *, char *);
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t (*v88)(unint64_t, uint64_t, char *);
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  void *v94;
  unint64_t v95;
  Swift::String v96;
  unint64_t v97;
  char *v98;
  unint64_t v99;
  char *v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  int *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  char *v111;
  unint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;

  v2 = sub_100004FC8(&qword_10015C510);
  __chkstk_darwin(v2);
  v113 = (char *)&v111 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = type metadata accessor for URLQueryItem(0);
  v4 = *(_QWORD *)(v123 - 8);
  v5 = __chkstk_darwin(v123);
  v7 = (char *)&v111 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v122 = (char *)&v111 - v9;
  v10 = __chkstk_darwin(v8);
  v12 = (unint64_t)&v111 - v11;
  v13 = __chkstk_darwin(v10);
  v116 = (char *)&v111 - v14;
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v111 - v16;
  __chkstk_darwin(v15);
  v125 = (char *)&v111 - v18;
  v19 = sub_100004FC8(&qword_1001570F0);
  __chkstk_darwin(v19);
  v21 = (char *)&v111 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for URLComponents(0);
  v119 = *(_QWORD *)(v22 - 8);
  v120 = v22;
  __chkstk_darwin(v22);
  v117 = (char *)&v111 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for URL(0);
  v118 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v121 = (uint64_t)&v111 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100156CB0 != -1)
LABEL_54:
    swift_once(&qword_100156CB0, sub_10008BE28);
  v26 = type metadata accessor for Logger(0);
  v27 = sub_100007808(v26, (uint64_t)qword_10015D2C8);
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.default.getter();
  v30 = os_log_type_enabled(v28, v29);
  v124 = v17;
  v111 = v7;
  v112 = v12;
  if (v30)
  {
    v31 = swift_slowAlloc(22, -1);
    v114 = a1;
    v115 = v24;
    v32 = v31;
    v33 = swift_slowAlloc(64, -1);
    v127 = v33;
    *(_DWORD *)v32 = 136315394;
    v126 = sub_1000DA1F0(0xD000000000000019, 0x8000000100126130, &v127);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, &v127, v32 + 4, v32 + 12);
    *(_WORD *)(v32 + 12) = 2080;
    v126 = sub_1000DA1F0(0xD000000000000026, 0x800000010011FD10, &v127);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, &v127, v32 + 14, v32 + 22);
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Start (%s.%s)…", (uint8_t *)v32, 0x16u);
    swift_arrayDestroy(v33, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    v34 = v32;
    a1 = v114;
    v24 = v115;
    swift_slowDealloc(v34, -1, -1);
  }

  v35 = v121;
  v36 = sub_100019DF4(v121);
  v37 = URL.absoluteString.getter(v36);
  v39 = v38;
  URLComponents.init(string:)(v37);
  swift_bridgeObjectRelease(v39);
  v41 = v119;
  v40 = v120;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v119 + 48))(v21, 1, v120) != 1)
  {
    v42 = v117;
    v43 = (*(uint64_t (**)(char *, char *, uint64_t))(v41 + 32))(v117, v21, v40);
    v44 = URLComponents.percentEncodedQueryItems.getter(v43);
    if (!v44)
    {
      (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v40);
      (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v35, v24);
      goto LABEL_28;
    }
    v17 = (char *)v44;
    v114 = a1;
    v115 = v24;
    v45 = _swiftEmptyArrayStorage;
    v127 = (uint64_t)_swiftEmptyArrayStorage;
    a1 = *(char **)(v44 + 16);
    swift_bridgeObjectRetain(v44);
    v21 = a1;
    if (a1)
    {
      v12 = 0;
      v7 = (char *)v123;
      while (1)
      {
        if (v12 >= *((_QWORD *)v17 + 2))
        {
          __break(1u);
          goto LABEL_54;
        }
        v46 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
        a1 = *(char **)(v4 + 72);
        v47 = v17;
        v48 = &v17[v46 + (_QWORD)a1 * v12];
        v49 = *(uint64_t (**)(char *, char *, char *))(v4 + 16);
        v50 = v49(v125, v48, v7);
        v51 = URLQueryItem.name.getter(v50);
        v53 = v52;
        if (v51 == 1953460082 && v52 == 0xE400000000000000)
          break;
        v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v51, v52, 1953460082, 0xE400000000000000, 0);
        swift_bridgeObjectRelease(v53);
        v55 = v124;
        v56 = v49(v124, v125, v7);
        v54 = v55;
        if ((v24 & 1) != 0)
          goto LABEL_17;
        v57 = URLQueryItem.name.getter(v56);
        v59 = v58;
        if (v57 == 1752457584 && v58 == 0xE400000000000000)
        {
          swift_bridgeObjectRelease(0xE400000000000000);
          v7 = (char *)v123;
          goto LABEL_17;
        }
        v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v57, v58, 1752457584, 0xE400000000000000, 0);
        swift_bridgeObjectRelease(v59);
        v60 = *(void (**)(char *, uint64_t))(v4 + 8);
        v7 = (char *)v123;
        v60(v54, v123);
        if ((v24 & 1) == 0)
        {
          v24 = *(_QWORD *)(v4 + 32);
          ((void (*)(char *, char *, char *))v24)(v116, v125, v7);
          v61 = v127;
          if ((swift_isUniquelyReferenced_nonNull_native(v127) & 1) == 0)
          {
            sub_10000F274(0, *(_QWORD *)(v61 + 16) + 1, 1);
            v61 = v127;
          }
          v63 = *(_QWORD *)(v61 + 16);
          v62 = *(_QWORD *)(v61 + 24);
          if (v63 >= v62 >> 1)
          {
            sub_10000F274(v62 > 1, v63 + 1, 1);
            v61 = v127;
          }
          *(_QWORD *)(v61 + 16) = v63 + 1;
          v7 = (char *)v123;
          ((void (*)(unint64_t, char *, uint64_t))v24)(v61 + v46 + v63 * (_QWORD)a1, v116, v123);
          v127 = v61;
          goto LABEL_19;
        }
LABEL_18:
        v60(v125, (uint64_t)v7);
LABEL_19:
        v17 = v47;
        if (v21 == (char *)++v12)
        {
          v45 = (_QWORD *)v127;
          goto LABEL_30;
        }
      }
      swift_bridgeObjectRelease(0xE400000000000000);
      a1 = v124;
      v49(v124, v125, v7);
      v54 = a1;
LABEL_17:
      v60 = *(void (**)(char *, uint64_t))(v4 + 8);
      v60(v54, (uint64_t)v7);
      goto LABEL_18;
    }
    v7 = (char *)v123;
LABEL_30:
    swift_bridgeObjectRelease(v17);
    v65 = sub_100004FC8(&qword_100157390);
    v66 = *(_QWORD *)(v4 + 72);
    v67 = *(unsigned __int8 *)(v4 + 80);
    v68 = (v67 + 32) & ~v67;
    v69 = swift_allocObject(v65, v68 + v66, v67 | 7);
    *(_OWORD *)(v69 + 16) = xmmword_1001164D0;
    URLQueryItem.init(name:value:)(1953460082, 0xE400000000000000, 0x43415F454C505041, 0xED0000544E554F43);
    v127 = (uint64_t)v45;
    sub_1000F23D4(v69);
    v124 = (char *)v68;
    v125 = (char *)v127;
    if (v21)
    {
      v70 = &v17[v68];
      v71 = *(uint64_t (**)(char *, char *, char *))(v4 + 16);
      swift_bridgeObjectRetain(v17);
      v72 = v122;
      while (1)
      {
        v73 = v71(v72, v70, v7);
        v74 = URLQueryItem.name.getter(v73);
        v76 = v75;
        if (v74 == 1752457584 && v75 == 0xE400000000000000)
        {
          swift_bridgeObjectRelease(v17);
          v86 = 0xE400000000000000;
          goto LABEL_40;
        }
        v77 = _stringCompareWithSmolCheck(_:_:expecting:)(v74, v75, 1752457584, 0xE400000000000000, 0);
        swift_bridgeObjectRelease(v76);
        if ((v77 & 1) != 0)
          break;
        v72 = v122;
        v7 = (char *)v123;
        (*(void (**)(char *, uint64_t))(v4 + 8))(v122, v123);
        v70 += v66;
        if (!--v21)
        {
          swift_bridgeObjectRelease(v17);
          goto LABEL_37;
        }
      }
      v86 = (unint64_t)v17;
LABEL_40:
      v79 = v114;
      v82 = v120;
      v81 = v121;
      v84 = v119;
      v85 = v117;
      swift_bridgeObjectRelease(v86);
      v80 = (uint64_t)v113;
      v83 = (char *)v123;
      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v113, v122, v123);
      v78 = 0;
    }
    else
    {
LABEL_37:
      v78 = 1;
      v80 = (uint64_t)v113;
      v79 = v114;
      v82 = v120;
      v81 = v121;
      v83 = v7;
      v84 = v119;
      v85 = v117;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, char *))(v4 + 56))(v80, v78, 1, v83);
    swift_bridgeObjectRelease(v17);
    if ((*(unsigned int (**)(uint64_t, uint64_t, char *))(v4 + 48))(v80, 1, v83) == 1)
    {
      (*(void (**)(char *, uint64_t))(v84 + 8))(v85, v82);
      sub_10000BA50(v80, &qword_10015C510);
    }
    else
    {
      v87 = v80;
      v88 = *(uint64_t (**)(unint64_t, uint64_t, char *))(v4 + 32);
      v89 = v112;
      v90 = v88(v112, v87, v83);
      v91 = URLQueryItem.value.getter(v90);
      if (v92)
      {
        v93 = v91;
        v94 = v92;
        v95 = v89;
        v127 = 0;
        v128 = 0xE000000000000000;
        _StringGuts.grow(_:)(17);
        swift_bridgeObjectRelease(v128);
        v127 = 0x535F44554F4C4349;
        v128 = 0xEF2F454349565245;
        v96._countAndFlagsBits = v93;
        v96._object = v94;
        String.append(_:)(v96);
        swift_bridgeObjectRelease(v94);
        v97 = v128;
        v98 = v111;
        URLQueryItem.init(name:value:)(1752457584, 0xE400000000000000, v127, v128);
        swift_bridgeObjectRelease(v97);
        v99 = (unint64_t)v125;
        if ((swift_isUniquelyReferenced_nonNull_native(v125) & 1) == 0)
          v99 = sub_10005270C(0, *(_QWORD *)(v99 + 16) + 1, 1, v99);
        v100 = v124;
        v102 = *(_QWORD *)(v99 + 16);
        v101 = *(_QWORD *)(v99 + 24);
        if (v102 >= v101 >> 1)
          v99 = sub_10005270C(v101 > 1, v102 + 1, 1, v99);
        *(_QWORD *)(v99 + 16) = v102 + 1;
        v103 = (unint64_t)&v100[v99 + v102 * v66];
        v104 = v123;
        v88(v103, (uint64_t)v98, (char *)v123);
        (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v95, v104);
        (*(void (**)(char *, uint64_t))(v119 + 8))(v117, v120);
        v81 = v121;
        goto LABEL_51;
      }
      (*(void (**)(unint64_t, char *))(v4 + 8))(v89, v83);
      (*(void (**)(char *, uint64_t))(v119 + 8))(v117, v120);
      v81 = v121;
    }
    v99 = (unint64_t)v125;
LABEL_51:
    (*(void (**)(char *, uint64_t, uint64_t))(v118 + 32))(v79, v81, v115);
    v105 = (int *)type metadata accessor for SettingsURLDestination(0);
    v106 = &v79[v105[5]];
    v107 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    swift_storeEnumTagMultiPayload(v106, v107, 6);
    v108 = type metadata accessor for SettingsURLDestination.Action(0);
    swift_storeEnumTagMultiPayload(v106, v108, 1);
    v109 = &v79[v105[7]];
    *(_QWORD *)&v79[v105[6]] = v99;
    *(_QWORD *)v109 = 0;
    *((_QWORD *)v109 + 1) = 0;
    v110 = sub_100004FC8(&qword_1001570F8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v110 - 8) + 56))(v79, 0, 1, v110);
    goto LABEL_52;
  }
  (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v35, v24);
  sub_10000BA50((uint64_t)v21, &qword_1001570F0);
LABEL_28:
  v64 = sub_100004FC8(&qword_1001570F8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(a1, 1, 1, v64);
LABEL_52:
  sub_1000C3DF4();
}

uint64_t sub_1000C38B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(char *, unint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v0 = sub_100004FC8(&qword_10015C510);
  __chkstk_darwin(v0);
  v57 = (char *)&v54 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for URLQueryItem(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v54 - v7;
  v9 = sub_100004FC8(&qword_1001570F0);
  __chkstk_darwin(v9);
  v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for URLComponents(0);
  v61 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v58 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for URL(0);
  v60 = *(_QWORD *)(v14 - 8);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.scheme.getter(v15);
  if (!v18)
  {
    v22 = 0;
    return v22 & 1;
  }
  v19 = v18;
  v59 = v12;
  v55 = v8;
  v56 = v14;
  v20 = String.lowercased()();
  swift_bridgeObjectRelease(v19);
  if (v20._countAndFlagsBits == 0x7366657270 && v20._object == (void *)0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    v21 = v59;
  }
  else
  {
    v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v20._countAndFlagsBits, v20._object, 0x7366657270, 0xE500000000000000, 0);
    swift_bridgeObjectRelease(v20._object);
    v22 = 0;
    v21 = v59;
    if ((v23 & 1) == 0)
      return v22 & 1;
  }
  v24 = sub_100019DF4((uint64_t)v17);
  v25 = URL.absoluteString.getter(v24);
  v27 = v26;
  URLComponents.init(string:)(v25);
  swift_bridgeObjectRelease(v27);
  v28 = v61;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v11, 1, v21) == 1)
  {
    (*(void (**)(char *, uint64_t))(v60 + 8))(v17, v56);
    v29 = &qword_1001570F0;
    v30 = (uint64_t)v11;
LABEL_25:
    sub_10000BA50(v30, v29);
    v22 = 0;
    return v22 & 1;
  }
  v31 = v58;
  v32 = (*(uint64_t (**)(char *, char *, uint64_t))(v28 + 32))(v58, v11, v21);
  v33 = URLComponents.percentEncodedQueryItems.getter(v32);
  if (!v33)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v31, v21);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v17, v56);
LABEL_31:
    v22 = 0;
    return v22 & 1;
  }
  v34 = v33;
  v35 = *(_QWORD *)(v33 + 16);
  if (v35)
  {
    v36 = v33 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v37 = *(_QWORD *)(v3 + 72);
    v38 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v3 + 16);
    v54 = v33;
    swift_bridgeObjectRetain(v33);
    while (1)
    {
      v39 = v38(v6, v36, v2);
      v40 = URLQueryItem.name.getter(v39);
      v42 = v41;
      if (v40 == 1953460082 && v41 == 0xE400000000000000)
      {
        v34 = v54;
        swift_bridgeObjectRelease(v54);
        v48 = 0xE400000000000000;
        goto LABEL_22;
      }
      v43 = _stringCompareWithSmolCheck(_:_:expecting:)(v40, v41, 1953460082, 0xE400000000000000, 0);
      swift_bridgeObjectRelease(v42);
      if ((v43 & 1) != 0)
        break;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
      v36 += v37;
      if (!--v35)
      {
        v34 = v54;
        swift_bridgeObjectRelease(v54);
        v44 = 1;
        v46 = v55;
        v45 = v56;
        v28 = v61;
        goto LABEL_19;
      }
    }
    v34 = v54;
    v48 = v54;
LABEL_22:
    v46 = v55;
    swift_bridgeObjectRelease(v48);
    v47 = v57;
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v57, v6, v2);
    v44 = 0;
    v45 = v56;
    v28 = v61;
  }
  else
  {
    v44 = 1;
    v46 = v55;
    v45 = v56;
LABEL_19:
    v47 = v57;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v47, v44, 1, v2);
  swift_bridgeObjectRelease(v34);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v47, 1, v2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v58, v59);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v17, v45);
    v29 = &qword_10015C510;
    v30 = (uint64_t)v47;
    goto LABEL_25;
  }
  v49 = (*(uint64_t (**)(char *, char *, uint64_t))(v3 + 32))(v46, v47, v2);
  v50 = URLQueryItem.value.getter(v49);
  if (!v51)
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v46, v2);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v58, v59);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v17, v45);
    goto LABEL_31;
  }
  v52 = v51;
  if (v50 == 0x454C54534143 && v51 == 0xE600000000000000)
    v22 = 1;
  else
    v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v50, v51, 0x454C54534143, 0xE600000000000000, 0);
  swift_bridgeObjectRelease(v52);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v46, v2);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v58, v59);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v17, v45);
  return v22 & 1;
}

void sub_1000C3DF4()
{
  uint64_t v0;
  uint64_t v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *oslog;
  uint64_t v6;
  uint64_t v7;

  if (qword_100156CB0 != -1)
    swift_once(&qword_100156CB0, sub_10008BE28);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_100007808(v0, (uint64_t)qword_10015D2C8);
  oslog = Logger.logObject.getter(v1);
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v2))
  {
    v3 = swift_slowAlloc(22, -1);
    v4 = swift_slowAlloc(64, -1);
    v7 = v4;
    *(_DWORD *)v3 = 136315394;
    v6 = sub_1000DA1F0(0xD000000000000019, 0x8000000100126130, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v6, &v7, v3 + 4, v3 + 12);
    *(_WORD *)(v3 + 12) = 2080;
    v6 = sub_1000DA1F0(0xD000000000000026, 0x800000010011FD10, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v6, &v7, v3 + 14, v3 + 22);
    _os_log_impl((void *)&_mh_execute_header, oslog, v2, "…Complete (%s.%s)", (uint8_t *)v3, 0x16u);
    swift_arrayDestroy(v4, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v4, -1, -1);
    swift_slowDealloc(v3, -1, -1);

  }
  else
  {

  }
}

uint64_t sub_1000C3FC0()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for SettingsAppDependencyStore()
{
  return objc_opt_self(_TtC11SettingsApp26SettingsAppDependencyStore);
}

_QWORD *sub_1000C401C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = sub_100004FC8(&qword_10015B958);
  v2 = swift_allocObject(v1, 288, 7);
  *(_OWORD *)(v2 + 16) = xmmword_10011A210;
  *(_QWORD *)(v2 + 32) = &type metadata for OAuthURLRoute;
  *(_QWORD *)(v2 + 40) = &off_10014C088;
  *(_QWORD *)(v2 + 48) = &type metadata for ApplicationPrefsURLRoute;
  *(_QWORD *)(v2 + 56) = &off_1001494A0;
  *(_QWORD *)(v2 + 64) = &type metadata for PreBuddyURLRoute;
  *(_QWORD *)(v2 + 72) = &off_10014C830;
  *(_QWORD *)(v2 + 80) = &type metadata for TVProviderURLRoute;
  *(_QWORD *)(v2 + 88) = &off_10014CC88;
  *(_QWORD *)(v2 + 96) = &type metadata for SettingsNavigationTVProviderURLRoute;
  *(_QWORD *)(v2 + 104) = &off_1001497F0;
  *(_QWORD *)(v2 + 112) = &type metadata for ESIMProvisioningURLRoute;
  *(_QWORD *)(v2 + 120) = &off_100148738;
  *(_QWORD *)(v2 + 128) = &type metadata for FinanceScriptURLRoute;
  *(_QWORD *)(v2 + 136) = &off_1001492E0;
  *(_QWORD *)(v2 + 144) = &type metadata for LegacyPreferencesRootURLRoute;
  *(_QWORD *)(v2 + 152) = &off_10014BC38;
  *(_QWORD *)(v2 + 160) = &type metadata for FinishSetupURLRoute;
  *(_QWORD *)(v2 + 168) = &off_10014D8F8;
  *(_QWORD *)(v2 + 176) = &type metadata for InternetAccountsSettingsURLRoute;
  *(_QWORD *)(v2 + 184) = &off_10014D5C0;
  *(_QWORD *)(v2 + 192) = &type metadata for OSBetaUpdatesURLRoute;
  *(_QWORD *)(v2 + 200) = &off_10014D2C8;
  *(_QWORD *)(v2 + 208) = &type metadata for FollowUpURLRoute;
  *(_QWORD *)(v2 + 216) = &off_10014C448;
  *(_QWORD *)(v2 + 224) = &type metadata for OSAutomaticUpdatesURLRoute;
  *(_QWORD *)(v2 + 232) = &off_1001492A0;
  *(_QWORD *)(v2 + 240) = &type metadata for LegacyCastleURLRoute;
  *(_QWORD *)(v2 + 248) = &off_10014CC48;
  *(_QWORD *)(v2 + 256) = &type metadata for SettingsNavigationURLRoute;
  *(_QWORD *)(v2 + 264) = &off_10014B0D0;
  *(_QWORD *)(v2 + 272) = &type metadata for LegacyPreferencesURLRoute;
  *(_QWORD *)(v2 + 280) = &off_10014A058;
  v0[2] = v2;
  v3 = sub_100004FC8(&qword_10015B960);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  v0[3] = PassthroughSubject.init()();
  v4 = sub_100004FC8(&qword_10015B968);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v0[4] = PassthroughSubject.init()();
  v5 = sub_100004FC8((uint64_t *)&unk_10015B970);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  v0[5] = PassthroughSubject.init()();
  return v0;
}

_QWORD *sub_1000C4210()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *result;

  v0 = type metadata accessor for SettingsAppDependencyStore();
  v1 = swift_allocObject(v0, 48, 7);
  result = sub_1000C401C();
  qword_10015D408 = v1;
  return result;
}

ValueMetadata *type metadata accessor for TVProviderURLRoute()
{
  return &type metadata for TVProviderURLRoute;
}

void sub_1000C4258(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  char v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (qword_100156CB0 != -1)
    swift_once(&qword_100156CB0, sub_10008BE28);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_100007808(v4, (uint64_t)qword_10015D2C8);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = swift_slowAlloc(64, -1);
    v27 = v9;
    *(_DWORD *)v8 = 136315394;
    v26 = sub_1000DA1F0(0xD000000000000017, 0x8000000100126220, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2080;
    v26 = sub_1000DA1F0(0xD000000000000026, 0x800000010011FD10, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v8 + 14, v8 + 22);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Start (%s.%s)…", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v9, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }

  URL.scheme.getter(v10);
  if (!v11)
    goto LABEL_11;
  v12 = v11;
  v13 = String.lowercased()();
  swift_bridgeObjectRelease(v12);
  if (v13._countAndFlagsBits != 0xD000000000000010 || v13._object != (void *)0x8000000100126200)
  {
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v13._countAndFlagsBits, v13._object, 0xD000000000000010, 0x8000000100126200, 0);
    swift_bridgeObjectRelease(v13._object);
    if ((v14 & 1) != 0)
      goto LABEL_10;
LABEL_11:
    v25 = sub_100004FC8(&qword_1001570F8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(a2, 1, 1, v25);
    goto LABEL_12;
  }
  swift_bridgeObjectRelease(0x8000000100126200);
LABEL_10:
  v15 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(a2, a1, v15);
  v16 = (int *)type metadata accessor for SettingsURLDestination(0);
  v17 = a2 + v16[5];
  v18 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  swift_storeEnumTagMultiPayload(v17, v18, 21);
  v19 = type metadata accessor for SettingsURLDestination.Action(0);
  swift_storeEnumTagMultiPayload(v17, v19, 1);
  v20 = sub_100004FC8(&qword_100157390);
  v21 = type metadata accessor for URLQueryItem(0);
  v22 = swift_allocObject(v20, ((*(unsigned __int8 *)(*(_QWORD *)(v21 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v21 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v21 - 8) + 80) | 7);
  *(_OWORD *)(v22 + 16) = xmmword_1001164D0;
  URLQueryItem.init(name:value:)(1752457584, 0xE400000000000000, 0x49564F52505F5654, 0xEB00000000524544);
  v23 = (_QWORD *)(a2 + v16[7]);
  *(_QWORD *)(a2 + v16[6]) = v22;
  *v23 = 0;
  v23[1] = 0;
  v24 = sub_100004FC8(&qword_1001570F8);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(a2, 0, 1, v24);
LABEL_12:
  sub_1000C468C();
}

uint64_t sub_1000C45DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  char v5;

  URL.scheme.getter(a1);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = String.lowercased()();
  swift_bridgeObjectRelease(v2);
  if (v3._countAndFlagsBits == 0xD000000000000010 && v3._object == (void *)0x8000000100126200)
  {
    swift_bridgeObjectRelease(0x8000000100126200);
    return 1;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)(v3._countAndFlagsBits, v3._object, 0xD000000000000010, 0x8000000100126200, 0);
    swift_bridgeObjectRelease(v3._object);
    return v5 & 1;
  }
}

void sub_1000C468C()
{
  uint64_t v0;
  uint64_t v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *oslog;
  uint64_t v6;
  uint64_t v7;

  if (qword_100156CB0 != -1)
    swift_once(&qword_100156CB0, sub_10008BE28);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_100007808(v0, (uint64_t)qword_10015D2C8);
  oslog = Logger.logObject.getter(v1);
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v2))
  {
    v3 = swift_slowAlloc(22, -1);
    v4 = swift_slowAlloc(64, -1);
    v7 = v4;
    *(_DWORD *)v3 = 136315394;
    v6 = sub_1000DA1F0(0xD000000000000017, 0x8000000100126220, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v6, &v7, v3 + 4, v3 + 12);
    *(_WORD *)(v3 + 12) = 2080;
    v6 = sub_1000DA1F0(0xD000000000000026, 0x800000010011FD10, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v6, &v7, v3 + 14, v3 + 22);
    _os_log_impl((void *)&_mh_execute_header, oslog, v2, "…Complete (%s.%s)", (uint8_t *)v3, 0x16u);
    swift_arrayDestroy(v4, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v4, -1, -1);
    swift_slowDealloc(v3, -1, -1);

  }
  else
  {

  }
}

_QWORD *sub_1000C4858@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_1000C4864(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *sub_1000C486C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *sub_1000C4880@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_QWORD *sub_1000C4894@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_1000C48A8(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *sub_1000C48D8@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_1000C4904@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *sub_1000C4928(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_1000C493C(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

_QWORD *sub_1000C4950(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *sub_1000C4964@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1000C4978(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_1000C498C(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_1000C49A0(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_1000C49B4()
{
  _QWORD *v0;

  return *v0 == 0;
}

uint64_t sub_1000C49C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

_QWORD *sub_1000C49DC(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

uint64_t sub_1000C49F0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = sub_1000C5A9C(a1);
  result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000C4A2C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1000C4A64 + 4 * byte_10011A290[a1]))(0xD000000000000013, 0x8000000100126340);
}

uint64_t sub_1000C4A64()
{
  return 0x65646F6373736170;
}

uint64_t sub_1000C4AE0()
{
  unsigned __int8 *v0;

  return sub_1000C4A2C(*v0);
}

void sub_1000C4AE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void (*v8)(char *, uint64_t, uint64_t);
  objc_class *v9;
  char *v10;
  id v11;
  uint64_t v12;
  id v13;
  id v14;
  void *v15;
  objc_super v16;

  v4 = sub_100004FC8((uint64_t *)&unk_10015B9F0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v8(v7, a1, v4);
  v9 = (objc_class *)type metadata accessor for ProfileConnectionObserver(0);
  v10 = (char *)objc_allocWithZone(v9);
  *(_QWORD *)&v10[OBJC_IVAR____TtC11SettingsAppP33_5FB2359AD06CCCE7342948B91F0D3AB525ProfileConnectionObserver_eventOptions] = a2;
  v8(&v10[OBJC_IVAR____TtC11SettingsAppP33_5FB2359AD06CCCE7342948B91F0D3AB525ProfileConnectionObserver_continuation], (uint64_t)v7, v4);
  v16.receiver = v10;
  v16.super_class = v9;
  v11 = objc_msgSendSuper2(&v16, "init");
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v12 = swift_allocObject(&unk_10014CD60, 24, 7);
  *(_QWORD *)(v12 + 16) = v11;
  v13 = v11;
  AsyncStream.Continuation.onTermination.setter(sub_1000C5A94, v12, v4);
  v14 = objc_msgSend((id)objc_opt_self(MCProfileConnection), "sharedConnection");
  if (v14)
  {
    v15 = v14;
    objc_msgSend(v14, "registerObserver:", v13);

  }
  else
  {
    __break(1u);
  }
}

void sub_1000C4C54(uint64_t a1, uint64_t a2)
{
  id v3;
  id v4;

  v3 = objc_msgSend((id)objc_opt_self(MCProfileConnection), "sharedConnection");
  if (v3)
  {
    v4 = v3;
    objc_msgSend(v3, "unregisterObserver:", a2);

  }
  else
  {
    __break(1u);
  }
}

id sub_1000C4CB8()
{
  void *v0;
  objc_class *ObjectType;
  id result;
  void *v3;
  objc_super v4;

  ObjectType = (objc_class *)swift_getObjectType(v0);
  result = objc_msgSend((id)objc_opt_self(MCProfileConnection), "sharedConnection");
  if (result)
  {
    v3 = result;
    objc_msgSend(result, "unregisterObserver:", v0);

    v4.receiver = v0;
    v4.super_class = ObjectType;
    return objc_msgSendSuper2(&v4, "dealloc");
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000C4E18()
{
  return type metadata accessor for ProfileConnectionObserver(0);
}

uint64_t type metadata accessor for ProfileConnectionObserver(uint64_t a1)
{
  uint64_t result;

  result = qword_10015B9B8;
  if (!qword_10015B9B8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ProfileConnectionObserver);
  return result;
}

void sub_1000C4E5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *Strong;
  void *v9;
  uint64_t v10;
  _BYTE v12[8];
  uint64_t v13;
  _BYTE v14[24];

  v4 = sub_100004FC8(&qword_10015BA00);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a1 += 16;
  swift_beginAccess(a1, v14, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(a1);
  if (Strong)
  {
    v9 = Strong;
    if ((*((_BYTE *)Strong
          + OBJC_IVAR____TtC11SettingsAppP33_5FB2359AD06CCCE7342948B91F0D3AB525ProfileConnectionObserver_eventOptions) & 1) != 0)
    {
      v12[0] = 0;
      v13 = a2;
      swift_bridgeObjectRetain(a2);
      v10 = sub_100004FC8((uint64_t *)&unk_10015B9F0);
      AsyncStream.Continuation.yield(_:)(v12, v10);

      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
    else
    {

    }
  }
}

void sub_1000C4F78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *Strong;
  void *v9;
  uint64_t v10;
  char v12[8];
  uint64_t v13;
  _BYTE v14[24];

  v4 = sub_100004FC8(&qword_10015BA00);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a1 += 16;
  swift_beginAccess(a1, v14, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(a1);
  if (Strong)
  {
    v9 = Strong;
    if ((*((_BYTE *)Strong
          + OBJC_IVAR____TtC11SettingsAppP33_5FB2359AD06CCCE7342948B91F0D3AB525ProfileConnectionObserver_eventOptions) & 2) != 0)
    {
      v12[0] = 1;
      v13 = a2;
      swift_bridgeObjectRetain(a2);
      v10 = sub_100004FC8((uint64_t *)&unk_10015B9F0);
      AsyncStream.Continuation.yield(_:)(v12, v10);

      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
    else
    {

    }
  }
}

uint64_t sub_1000C5098(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  id v13;
  id v14;

  if (a4)
    v12 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a4, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  else
    v12 = 0;
  v13 = a3;
  v14 = a1;
  sub_1000C5AD4(v12, a5, a6, a7);

  return swift_bridgeObjectRelease(v12);
}

void sub_1000C513C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *Strong;
  void *v9;
  uint64_t v10;
  char v12[8];
  uint64_t v13;
  _BYTE v14[24];

  v4 = sub_100004FC8(&qword_10015BA00);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a1 += 16;
  swift_beginAccess(a1, v14, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(a1);
  if (Strong)
  {
    v9 = Strong;
    if ((*((_BYTE *)Strong
          + OBJC_IVAR____TtC11SettingsAppP33_5FB2359AD06CCCE7342948B91F0D3AB525ProfileConnectionObserver_eventOptions) & 4) != 0)
    {
      v12[0] = 2;
      v13 = a2;
      swift_bridgeObjectRetain(a2);
      v10 = sub_100004FC8((uint64_t *)&unk_10015B9F0);
      AsyncStream.Continuation.yield(_:)(v12, v10);

      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
    else
    {

    }
  }
}

void sub_1000C525C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *Strong;
  void *v9;
  uint64_t v10;
  char v12[8];
  uint64_t v13;
  _BYTE v14[24];

  v4 = sub_100004FC8(&qword_10015BA00);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a1 += 16;
  swift_beginAccess(a1, v14, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(a1);
  if (Strong)
  {
    v9 = Strong;
    if ((*((_BYTE *)Strong
          + OBJC_IVAR____TtC11SettingsAppP33_5FB2359AD06CCCE7342948B91F0D3AB525ProfileConnectionObserver_eventOptions) & 8) != 0)
    {
      v12[0] = 3;
      v13 = a2;
      swift_bridgeObjectRetain(a2);
      v10 = sub_100004FC8((uint64_t *)&unk_10015B9F0);
      AsyncStream.Continuation.yield(_:)(v12, v10);

      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
    else
    {

    }
  }
}

void sub_1000C537C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *Strong;
  void *v9;
  uint64_t v10;
  char v12[8];
  uint64_t v13;
  _BYTE v14[24];

  v4 = sub_100004FC8(&qword_10015BA00);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a1 += 16;
  swift_beginAccess(a1, v14, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(a1);
  if (Strong)
  {
    v9 = Strong;
    if ((*((_BYTE *)Strong
          + OBJC_IVAR____TtC11SettingsAppP33_5FB2359AD06CCCE7342948B91F0D3AB525ProfileConnectionObserver_eventOptions) & 0x10) != 0)
    {
      v12[0] = 4;
      v13 = a2;
      swift_bridgeObjectRetain(a2);
      v10 = sub_100004FC8((uint64_t *)&unk_10015B9F0);
      AsyncStream.Continuation.yield(_:)(v12, v10);

      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
    else
    {

    }
  }
}

void sub_1000C549C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *Strong;
  void *v9;
  uint64_t v10;
  char v12[8];
  uint64_t v13;
  _BYTE v14[24];

  v4 = sub_100004FC8(&qword_10015BA00);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a1 += 16;
  swift_beginAccess(a1, v14, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(a1);
  if (Strong)
  {
    v9 = Strong;
    if ((*((_BYTE *)Strong
          + OBJC_IVAR____TtC11SettingsAppP33_5FB2359AD06CCCE7342948B91F0D3AB525ProfileConnectionObserver_eventOptions) & 0x20) != 0)
    {
      v12[0] = 5;
      v13 = a2;
      swift_bridgeObjectRetain(a2);
      v10 = sub_100004FC8((uint64_t *)&unk_10015B9F0);
      AsyncStream.Continuation.yield(_:)(v12, v10);

      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
    else
    {

    }
  }
}

void sub_1000C55BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *Strong;
  void *v9;
  uint64_t v10;
  char v12[8];
  uint64_t v13;
  _BYTE v14[24];

  v4 = sub_100004FC8(&qword_10015BA00);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a1 += 16;
  swift_beginAccess(a1, v14, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(a1);
  if (Strong)
  {
    v9 = Strong;
    if ((*((_BYTE *)Strong
          + OBJC_IVAR____TtC11SettingsAppP33_5FB2359AD06CCCE7342948B91F0D3AB525ProfileConnectionObserver_eventOptions) & 0x40) != 0)
    {
      v12[0] = 6;
      v13 = a2;
      swift_bridgeObjectRetain(a2);
      v10 = sub_100004FC8((uint64_t *)&unk_10015B9F0);
      AsyncStream.Continuation.yield(_:)(v12, v10);

      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
    else
    {

    }
  }
}

void sub_1000C5708(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  sub_1000C5784();
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
  }
}

void sub_1000C5784()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_10015B9C8)
  {
    v0 = type metadata accessor for AsyncStream.Continuation(0, &type metadata for ManagedConfigurationEvent);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_10015B9C8);
  }
}

ValueMetadata *type metadata accessor for ManagedConfigurationEventOptions()
{
  return &type metadata for ManagedConfigurationEventOptions;
}

uint64_t initializeBufferWithCopyOfBuffer for ManagedConfigurationEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for ManagedConfigurationEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t assignWithTake for ManagedConfigurationEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for ManagedConfigurationEvent(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ManagedConfigurationEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ManagedConfigurationEvent()
{
  return &type metadata for ManagedConfigurationEvent;
}

unint64_t sub_1000C5954()
{
  unint64_t result;

  result = qword_10015B9D0;
  if (!qword_10015B9D0)
  {
    result = swift_getWitnessTable(&unk_10011A34C, &type metadata for ManagedConfigurationEventOptions);
    atomic_store(result, (unint64_t *)&qword_10015B9D0);
  }
  return result;
}

unint64_t sub_1000C599C()
{
  unint64_t result;

  result = qword_10015B9D8;
  if (!qword_10015B9D8)
  {
    result = swift_getWitnessTable(&unk_10011A31C, &type metadata for ManagedConfigurationEventOptions);
    atomic_store(result, (unint64_t *)&qword_10015B9D8);
  }
  return result;
}

unint64_t sub_1000C59E4()
{
  unint64_t result;

  result = qword_10015B9E0;
  if (!qword_10015B9E0)
  {
    result = swift_getWitnessTable(&unk_10011A374, &type metadata for ManagedConfigurationEventOptions);
    atomic_store(result, (unint64_t *)&qword_10015B9E0);
  }
  return result;
}

unint64_t sub_1000C5A2C()
{
  unint64_t result;

  result = qword_10015B9E8;
  if (!qword_10015B9E8)
  {
    result = swift_getWitnessTable(&unk_10011A3AC, &type metadata for ManagedConfigurationEventOptions);
    atomic_store(result, (unint64_t *)&qword_10015B9E8);
  }
  return result;
}

uint64_t sub_1000C5A70()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1000C5A94(uint64_t a1)
{
  uint64_t v1;

  sub_1000C4C54(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1000C5A9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  result = 0;
  v4 = (uint64_t *)(a1 + 32);
  do
  {
    v6 = *v4++;
    v5 = v6;
    if ((v6 & ~result) == 0)
      v5 = 0;
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_1000C5AD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD aBlock[5];
  uint64_t v30;

  v26 = a4;
  v7 = v4;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v27 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100156D60 != -1)
    swift_once(&qword_100156D60, sub_1000D34BC);
  v25 = qword_10015D420;
  v16 = swift_allocObject(&unk_10014CD88, 24, 7);
  swift_unknownObjectWeakInit(v16 + 16, v7);
  v17 = swift_allocObject(a2, 32, 7);
  *(_QWORD *)(v17 + 16) = v16;
  *(_QWORD *)(v17 + 24) = a1;
  aBlock[4] = a3;
  v30 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100005350;
  aBlock[3] = v26;
  v18 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a1);
  swift_retain(v16);
  static DispatchQoS.unspecified.getter(v19);
  v28 = _swiftEmptyArrayStorage;
  v20 = sub_100012ED8();
  v21 = sub_100004FC8((uint64_t *)&unk_100156F40);
  v22 = sub_10000551C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v28, v21, v22, v9, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v11, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  v23 = v30;
  swift_release(v16);
  return swift_release(v23);
}

uint64_t sub_1000C5CF8()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000C5D20()
{
  uint64_t v0;

  sub_1000C55BC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_1000C5D2C()
{
  uint64_t v0;

  sub_1000C549C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_1000C5D38()
{
  uint64_t v0;

  sub_1000C537C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_1000C5D44()
{
  uint64_t v0;

  sub_1000C525C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_1000C5D50()
{
  uint64_t v0;

  sub_1000C513C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_1000C5D5C()
{
  uint64_t v0;

  sub_1000C4F78(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000C5D68()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1000C5D94()
{
  uint64_t v0;

  sub_1000C4E5C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t getEnumTagSinglePayload for SettingsAppPresentableItemIdentifier(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ManagedConfigurationEventType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1000C5E78 + 4 * byte_10011A29C[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1000C5EAC + 4 * byte_10011A297[v4]))();
}

uint64_t sub_1000C5EAC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C5EB4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000C5EBCLL);
  return result;
}

uint64_t sub_1000C5EC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000C5ED0);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1000C5ED4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C5EDC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ManagedConfigurationEventType()
{
  return &type metadata for ManagedConfigurationEventType;
}

unint64_t sub_1000C5EFC()
{
  unint64_t result;

  result = qword_10015BA08;
  if (!qword_10015BA08)
  {
    result = swift_getWitnessTable(&unk_10011A540, &type metadata for ManagedConfigurationEventType);
    atomic_store(result, (unint64_t *)&qword_10015BA08);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SettingsAppPresentableItemIdentifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1000C5FC0 + 4 * byte_10011A575[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1000C5FF4 + 4 * byte_10011A570[v4]))();
}

uint64_t sub_1000C5FF4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C5FFC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000C6004);
  return result;
}

uint64_t sub_1000C6010(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000C6018);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1000C601C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C6024(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SettingsAppPresentableItemIdentifier()
{
  return &type metadata for SettingsAppPresentableItemIdentifier;
}

void sub_1000C6040(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t sub_1000C604C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1000C6088 + 4 * byte_10011A57A[a1]))(0xD000000000000016, 0x800000010011FF00);
}

unint64_t sub_1000C6088()
{
  return 0xD000000000000010;
}

uint64_t sub_1000C60A4()
{
  uint64_t v0;

  return v0 + 9;
}

uint64_t sub_1000C60EC()
{
  return 0x7055776F6C6C6F66;
}

uint64_t sub_1000C6110()
{
  unsigned __int8 *v0;

  return sub_1000C604C(*v0);
}

unint64_t sub_1000C611C()
{
  unint64_t result;

  result = qword_10015BA10;
  if (!qword_10015BA10)
  {
    result = swift_getWitnessTable(&unk_10011A640, &type metadata for SettingsAppPresentableItemIdentifier);
    atomic_store(result, (unint64_t *)&qword_10015BA10);
  }
  return result;
}

unint64_t sub_1000C6164()
{
  unint64_t result;

  result = qword_10015BA18;
  if (!qword_10015BA18)
  {
    result = swift_getWitnessTable(&unk_10011A5B8, &type metadata for SettingsAppPresentableItemIdentifier);
    atomic_store(result, (unint64_t *)&qword_10015BA18);
  }
  return result;
}

uint64_t sub_1000C61A8(uint64_t a1, uint64_t a2)
{
  char v5;

  if (!a2)
    return 7;
  if (a1 == 0xD000000000000016 && a2 == 0x800000010011FF00
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x800000010011FF00, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x800000010011FEE0)
  {
    swift_bridgeObjectRelease(a2);
    return 1;
  }
  v5 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x800000010011FEE0, a1, a2, 0);
  swift_bridgeObjectRelease(a2);
  if ((v5 & 1) != 0)
    return 1;
  else
    return 7;
}

ValueMetadata *type metadata accessor for OSBetaUpdatesURLRoute()
{
  return &type metadata for OSBetaUpdatesURLRoute;
}

void sub_1000C62AC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  char v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (qword_100156CB0 != -1)
    swift_once(&qword_100156CB0, sub_10008BE28);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_100007808(v4, (uint64_t)qword_10015D2C8);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = swift_slowAlloc(64, -1);
    v27 = v9;
    *(_DWORD *)v8 = 136315394;
    v26 = sub_1000DA1F0(0xD00000000000001ALL, 0x80000001001263C0, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2080;
    v26 = sub_1000DA1F0(0xD000000000000026, 0x800000010011FD10, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v8 + 14, v8 + 22);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Start (%s.%s)…", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v9, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }

  URL.scheme.getter(v10);
  if (!v11)
    goto LABEL_11;
  v12 = v11;
  v13 = String.lowercased()();
  swift_bridgeObjectRelease(v12);
  if (v13._countAndFlagsBits != 0x2D617465622D736FLL || v13._object != (void *)0xEF73657461647075)
  {
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v13._countAndFlagsBits, v13._object, 0x2D617465622D736FLL, 0xEF73657461647075, 0);
    swift_bridgeObjectRelease(v13._object);
    if ((v14 & 1) != 0)
      goto LABEL_10;
LABEL_11:
    v25 = sub_100004FC8(&qword_1001570F8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(a2, 1, 1, v25);
    goto LABEL_12;
  }
  swift_bridgeObjectRelease(0xEF73657461647075);
LABEL_10:
  v15 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(a2, a1, v15);
  v16 = (int *)type metadata accessor for SettingsURLDestination(0);
  v17 = a2 + v16[5];
  v18 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  swift_storeEnumTagMultiPayload(v17, v18, 21);
  v19 = type metadata accessor for SettingsURLDestination.Action(0);
  swift_storeEnumTagMultiPayload(v17, v19, 1);
  v20 = sub_100004FC8(&qword_100157390);
  v21 = type metadata accessor for URLQueryItem(0);
  v22 = swift_allocObject(v20, ((*(unsigned __int8 *)(*(_QWORD *)(v21 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v21 - 8) + 80))+ 2 * *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v21 - 8) + 80) | 7);
  *(_OWORD *)(v22 + 16) = xmmword_100115BA0;
  URLQueryItem.init(name:value:)(1752457584, 0xE400000000000000, 0xD000000000000028, 0x8000000100126390);
  URLQueryItem.init(name:value:)(1953460082, 0xE400000000000000, 0x6C6172656E6547, 0xE700000000000000);
  v23 = (_QWORD *)(a2 + v16[7]);
  *(_QWORD *)(a2 + v16[6]) = v22;
  *v23 = 0;
  v23[1] = 0;
  v24 = sub_100004FC8(&qword_1001570F8);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(a2, 0, 1, v24);
LABEL_12:
  sub_1000C676C();
}

uint64_t sub_1000C6688(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  char v5;

  URL.scheme.getter(a1);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = String.lowercased()();
  swift_bridgeObjectRelease(v2);
  if (v3._countAndFlagsBits == 0x2D617465622D736FLL && v3._object == (void *)0xEF73657461647075)
  {
    swift_bridgeObjectRelease(0xEF73657461647075);
    return 1;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)(v3._countAndFlagsBits, v3._object, 0x2D617465622D736FLL, 0xEF73657461647075, 0);
    swift_bridgeObjectRelease(v3._object);
    return v5 & 1;
  }
}

void sub_1000C676C()
{
  uint64_t v0;
  uint64_t v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *oslog;
  uint64_t v6;
  uint64_t v7;

  if (qword_100156CB0 != -1)
    swift_once(&qword_100156CB0, sub_10008BE28);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_100007808(v0, (uint64_t)qword_10015D2C8);
  oslog = Logger.logObject.getter(v1);
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v2))
  {
    v3 = swift_slowAlloc(22, -1);
    v4 = swift_slowAlloc(64, -1);
    v7 = v4;
    *(_DWORD *)v3 = 136315394;
    v6 = sub_1000DA1F0(0xD00000000000001ALL, 0x80000001001263C0, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v6, &v7, v3 + 4, v3 + 12);
    *(_WORD *)(v3 + 12) = 2080;
    v6 = sub_1000DA1F0(0xD000000000000026, 0x800000010011FD10, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v6, &v7, v3 + 14, v3 + 22);
    _os_log_impl((void *)&_mh_execute_header, oslog, v2, "…Complete (%s.%s)", (uint8_t *)v3, 0x16u);
    swift_arrayDestroy(v4, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v4, -1, -1);
    swift_slowDealloc(v3, -1, -1);

  }
  else
  {

  }
}

uint64_t sub_1000C6938(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  int64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  int64_t v19;
  _BYTE v20[40];
  _QWORD v21[4];
  uint64_t v22;
  uint64_t v23;
  _OWORD v24[2];
  _OWORD v25[2];
  uint64_t v26;
  _OWORD v27[2];
  _OWORD v28[2];
  uint64_t v29;
  uint64_t v30;

  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v19 = (unint64_t)(v2 + 63) >> 6;
  v30 = (uint64_t)v28 + 8;
  result = swift_bridgeObjectRetain(a1);
  v6 = 0;
  v7 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v4)
    {
      v8 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      v9 = v8 | (v6 << 6);
      goto LABEL_22;
    }
    v10 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v10 >= v19)
      goto LABEL_30;
    v11 = *(_QWORD *)(v18 + 8 * v10);
    ++v6;
    if (!v11)
    {
      v6 = v10 + 1;
      if (v10 + 1 >= v19)
        goto LABEL_30;
      v11 = *(_QWORD *)(v18 + 8 * v6);
      if (!v11)
      {
        v6 = v10 + 2;
        if (v10 + 2 >= v19)
          goto LABEL_30;
        v11 = *(_QWORD *)(v18 + 8 * v6);
        if (!v11)
        {
          v6 = v10 + 3;
          if (v10 + 3 >= v19)
            goto LABEL_30;
          v11 = *(_QWORD *)(v18 + 8 * v6);
          if (!v11)
            break;
        }
      }
    }
LABEL_21:
    v4 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v6 << 6);
LABEL_22:
    sub_1000CA038(*(_QWORD *)(a1 + 48) + 40 * v9, (uint64_t)v27);
    sub_1000148AC(*(_QWORD *)(a1 + 56) + 32 * v9, v30);
    v25[0] = v28[0];
    v25[1] = v28[1];
    v26 = v29;
    v24[0] = v27[0];
    v24[1] = v27[1];
    sub_1000CA038((uint64_t)v24, (uint64_t)v20);
    sub_1000148AC((uint64_t)v25 + 8, (uint64_t)v21);
    if ((swift_dynamicCast(&v22, v20, &type metadata for AnyHashable, &type metadata for String, 6) & 1) == 0)
    {
      v22 = 0;
      v23 = 0;
    }
    sub_100005474(v21);
    result = sub_10000BA50((uint64_t)v24, &qword_10015BAA0);
    v13 = v23;
    if (v23)
    {
      v14 = v22;
      result = swift_isUniquelyReferenced_nonNull_native(v7);
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_100052940(0, v7[2] + 1, 1, v7);
        v7 = (_QWORD *)result;
      }
      v16 = v7[2];
      v15 = v7[3];
      if (v16 >= v15 >> 1)
      {
        result = (uint64_t)sub_100052940((_QWORD *)(v15 > 1), v16 + 1, 1, v7);
        v7 = (_QWORD *)result;
      }
      v7[2] = v16 + 1;
      v17 = &v7[2 * v16];
      v17[4] = v14;
      v17[5] = v13;
    }
  }
  v12 = v10 + 4;
  if (v12 >= v19)
  {
LABEL_30:
    swift_release(a1);
    return (uint64_t)v7;
  }
  v11 = *(_QWORD *)(v18 + 8 * v12);
  if (v11)
  {
    v6 = v12;
    goto LABEL_21;
  }
  while (1)
  {
    v6 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v6 >= v19)
      goto LABEL_30;
    v11 = *(_QWORD *)(v18 + 8 * v6);
    ++v12;
    if (v11)
      goto LABEL_21;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_1000C6BF8()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_10011A7A0);
  v4 = v0;
  v2 = sub_100007828((unint64_t *)&unk_10015BA80, type metadata accessor for RestrictionsManager, (uint64_t)&protocol conformance descriptor for RestrictionsManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC11SettingsApp19RestrictionsManager__isInEDUMode);
}

uint64_t sub_1000C6C84(uint64_t result, char a2)
{
  *(_BYTE *)(result + OBJC_IVAR____TtC11SettingsApp19RestrictionsManager__isInEDUMode) = a2;
  return result;
}

uint64_t sub_1000C6C94()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_10011A778);
  v4 = v0;
  v2 = sub_100007828((unint64_t *)&unk_10015BA80, type metadata accessor for RestrictionsManager, (uint64_t)&protocol conformance descriptor for RestrictionsManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC11SettingsApp19RestrictionsManager__restrictedFeatures));
}

uint64_t sub_1000C6D24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + OBJC_IVAR____TtC11SettingsApp19RestrictionsManager__restrictedFeatures);
  *(_QWORD *)(a1 + OBJC_IVAR____TtC11SettingsApp19RestrictionsManager__restrictedFeatures) = a2;
  swift_bridgeObjectRetain(a2);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_1000C6D64()
{
  return sub_1000C6DA8((uint64_t)&unk_10011A750, &OBJC_IVAR____TtC11SettingsApp19RestrictionsManager__blockedAppBundleIDs);
}

uint64_t sub_1000C6D78(uint64_t a1, uint64_t a2)
{
  return sub_1000C6E4C(a1, a2, &OBJC_IVAR____TtC11SettingsApp19RestrictionsManager__blockedAppBundleIDs);
}

uint64_t sub_1000C6D94()
{
  return sub_1000C6DA8((uint64_t)&unk_10011A728, &OBJC_IVAR____TtC11SettingsApp19RestrictionsManager__allowedAppBundleIDs);
}

uint64_t sub_1000C6DA8(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath(a1);
  v7 = v2;
  v5 = sub_100007828((unint64_t *)&unk_10015BA80, type metadata accessor for RestrictionsManager, (uint64_t)&protocol conformance descriptor for RestrictionsManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v5);
  swift_release(KeyPath);
  return swift_bridgeObjectRetain(*(_QWORD *)(v2 + *a2));
}

uint64_t sub_1000C6E30(uint64_t a1, uint64_t a2)
{
  return sub_1000C6E4C(a1, a2, &OBJC_IVAR____TtC11SettingsApp19RestrictionsManager__allowedAppBundleIDs);
}

uint64_t sub_1000C6E4C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + *a3);
  *(_QWORD *)(a1 + *a3) = a2;
  swift_bridgeObjectRetain(a2);
  return swift_bridgeObjectRelease(v3);
}

id sub_1000C6E88()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for RestrictionsManager(0)), "init");
  qword_10015D410 = (uint64_t)result;
  return result;
}

id sub_1000C6EB8()
{
  void *v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id result;
  void *v7;
  id v8;
  uint64_t v9;
  Swift::Int v10;
  void *v11;
  id v12;
  uint64_t v13;
  Swift::Int v14;
  id v15;
  void *v16;
  objc_super v17;

  v1 = v0;
  v2 = PSIsInEDUMode();
  v1[OBJC_IVAR____TtC11SettingsApp19RestrictionsManager__isInEDUMode] = v2;
  v3 = OBJC_IVAR____TtC11SettingsApp19RestrictionsManager__blockedAppBundleIDs;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11SettingsApp19RestrictionsManager__blockedAppBundleIDs] = 0;
  v4 = OBJC_IVAR____TtC11SettingsApp19RestrictionsManager__allowedAppBundleIDs;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11SettingsApp19RestrictionsManager__allowedAppBundleIDs] = 0;
  ObservationRegistrar.init()(v2);
  *(_QWORD *)&v1[OBJC_IVAR____TtC11SettingsApp19RestrictionsManager__restrictedFeatures] = sub_1000C9E8C();
  v5 = (void *)objc_opt_self(MCProfileConnection);
  result = objc_msgSend(v5, "sharedConnection");
  if (!result)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v7 = result;
  v8 = objc_msgSend(result, "effectiveBlockedAppBundleIDs");

  if (v8)
  {
    v9 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v8, &type metadata for AnyHashable, &protocol witness table for AnyHashable);

    v10 = sub_1000C729C(v9);
    swift_bridgeObjectRelease(v9);
  }
  else
  {
    v10 = 0;
  }
  swift_bridgeObjectRelease(*(_QWORD *)&v1[v3]);
  *(_QWORD *)&v1[v3] = v10;
  result = objc_msgSend(v5, "sharedConnection");
  if (!result)
    goto LABEL_12;
  v11 = result;
  v12 = objc_msgSend(result, "effectiveWhitelistedAppBundleIDs");

  if (v12)
  {
    v13 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v12, &type metadata for AnyHashable, &protocol witness table for AnyHashable);

    v14 = sub_1000C729C(v13);
    swift_bridgeObjectRelease(v13);
  }
  else
  {
    v14 = 0;
  }
  swift_bridgeObjectRelease(*(_QWORD *)&v1[v4]);
  *(_QWORD *)&v1[v4] = v14;

  v17.receiver = v1;
  v17.super_class = (Class)type metadata accessor for RestrictionsManager(0);
  v15 = objc_msgSendSuper2(&v17, "init");
  result = objc_msgSend(v5, "sharedConnection");
  if (result)
  {
    v16 = result;
    objc_msgSend(result, "registerObserver:", v15);

    return v15;
  }
LABEL_13:
  __break(1u);
  return result;
}

id RestrictionsManager.__deallocating_deinit()
{
  void *v0;
  id result;
  void *v2;
  objc_super v3;

  result = objc_msgSend((id)objc_opt_self(MCProfileConnection), "sharedConnection");
  if (result)
  {
    v2 = result;
    objc_msgSend(result, "unregisterObserver:", v0);

    v3.receiver = v0;
    v3.super_class = (Class)type metadata accessor for RestrictionsManager(0);
    return objc_msgSendSuper2(&v3, "dealloc");
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for RestrictionsManager(uint64_t a1)
{
  uint64_t result;

  result = qword_10015BA70;
  if (!qword_10015BA70)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RestrictionsManager);
  return result;
}

Swift::Int sub_1000C729C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  Swift::Int result;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  _OWORD v17[2];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD v21[2];
  uint64_t v22;
  void *v23;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_100004FC8(&qword_100158B78);
    v3 = (void *)static _SetStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptySetSingleton;
  }
  v23 = v3;
  v4 = a1 + 56;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a1 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a1 + 56);
  v8 = (unint64_t)(63 - v6) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v10 = 0;
  if (!v7)
    goto LABEL_8;
LABEL_7:
  v11 = (v7 - 1) & v7;
  v12 = __clz(__rbit64(v7)) | (v10 << 6);
  for (i = v10; ; v12 = __clz(__rbit64(v15)) + (i << 6))
  {
    sub_1000CA038(*(_QWORD *)(a1 + 48) + 40 * v12, (uint64_t)v21);
    v17[0] = v21[0];
    v17[1] = v21[1];
    v18 = v22;
    if ((swift_dynamicCast(&v19, v17, &type metadata for AnyHashable, &type metadata for String, 6) & 1) == 0)
    {
      v19 = 0;
      v20 = 0;
LABEL_29:
      swift_release(v23);
      sub_100007C50(a1);
      swift_bridgeObjectRelease(v20);
      return 0;
    }
    if (!v20)
      goto LABEL_29;
    result = sub_1000C9C90(v19, v20);
    v10 = i;
    v7 = v11;
    if (v11)
      goto LABEL_7;
LABEL_8:
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v14 >= v8)
      goto LABEL_30;
    v15 = *(_QWORD *)(v4 + 8 * v14);
    i = v10 + 1;
    if (!v15)
    {
      i = v10 + 2;
      if (v10 + 2 >= v8)
        goto LABEL_30;
      v15 = *(_QWORD *)(v4 + 8 * i);
      if (!v15)
      {
        i = v10 + 3;
        if (v10 + 3 >= v8)
          goto LABEL_30;
        v15 = *(_QWORD *)(v4 + 8 * i);
        if (!v15)
        {
          i = v10 + 4;
          if (v10 + 4 >= v8)
            goto LABEL_30;
          v15 = *(_QWORD *)(v4 + 8 * i);
          if (!v15)
            break;
        }
      }
    }
LABEL_23:
    v11 = (v15 - 1) & v15;
  }
  v16 = v10 + 5;
  if (v10 + 5 >= v8)
  {
LABEL_30:
    sub_100007C50(a1);
    return (Swift::Int)v23;
  }
  v15 = *(_QWORD *)(v4 + 8 * v16);
  if (v15)
  {
    i = v10 + 5;
    goto LABEL_23;
  }
  while (1)
  {
    i = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (i >= v8)
      goto LABEL_30;
    v15 = *(_QWORD *)(v4 + 8 * i);
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t _s11SettingsApp19RestrictionsManagerC027profileConnectionDidReceiveB28WhitelistChangedNotification_8userInfoySo09MCProfileF0CSg_SDys11AnyHashableVypGSgtF_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;
  _QWORD *v21;
  _QWORD aBlock[5];
  uint64_t v23;

  v1 = v0;
  ObjectType = swift_getObjectType(v0);
  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100156D60 != -1)
    swift_once(&qword_100156D60, sub_1000D34BC);
  v20 = qword_10015D420;
  v11 = swift_allocObject(&unk_10014D2F8, 24, 7);
  swift_unknownObjectWeakInit(v11 + 16, v1);
  v12 = swift_allocObject(&unk_10014D320, 32, 7);
  *(_QWORD *)(v12 + 16) = v11;
  *(_QWORD *)(v12 + 24) = ObjectType;
  aBlock[4] = sub_1000CA0CC;
  v23 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100005350;
  aBlock[3] = &unk_10014D338;
  v13 = _Block_copy(aBlock);
  swift_retain(v11);
  static DispatchQoS.unspecified.getter(v14);
  v21 = _swiftEmptyArrayStorage;
  v15 = sub_100007828((unint64_t *)&qword_10015BAB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v16 = sub_100004FC8((uint64_t *)&unk_100156F40);
  v17 = sub_10000551C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v16, v17, v3, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v13);
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v18 = v23;
  swift_release(v11);
  return swift_release(v18);
}

id sub_1000C7724(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  void *v10;
  id result;
  void *v12;
  id v13;
  uint64_t v14;
  Swift::Int v15;
  void *v16;
  id v17;
  uint64_t v18;
  Swift::Int v19;
  unint64_t v20;
  void *v21;
  _QWORD *v22;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD aBlock[5];
  _QWORD *v34;

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v32 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000C9E8C();
  v10 = (void *)objc_opt_self(MCProfileConnection);
  result = objc_msgSend(v10, "sharedConnection");
  if (!result)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    return result;
  }
  v12 = result;
  v30 = v6;
  v31 = v3;
  v13 = objc_msgSend(result, "effectiveBlockedAppBundleIDs");

  if (v13)
  {
    v14 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v13, &type metadata for AnyHashable, &protocol witness table for AnyHashable);

    v15 = sub_1000C729C(v14);
    swift_bridgeObjectRelease(v14);
  }
  else
  {
    v15 = 0;
  }
  result = objc_msgSend(v10, "sharedConnection");
  if (!result)
    goto LABEL_11;
  v16 = result;
  v17 = objc_msgSend(result, "effectiveWhitelistedAppBundleIDs");

  if (v17)
  {
    v18 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v17, &type metadata for AnyHashable, &protocol witness table for AnyHashable);

    v19 = sub_1000C729C(v18);
    swift_bridgeObjectRelease(v18);
  }
  else
  {
    v19 = 0;
  }
  v20 = sub_100005494();
  v21 = (void *)static OS_dispatch_queue.main.getter(v20);
  v22 = (_QWORD *)swift_allocObject(&unk_10014D370, 48, 7);
  v22[2] = a1;
  v22[3] = v9;
  v22[4] = v15;
  v22[5] = v19;
  aBlock[4] = sub_1000CA110;
  v34 = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100005350;
  aBlock[3] = &unk_10014D388;
  v23 = _Block_copy(aBlock);
  v24 = v34;
  swift_retain(a1);
  v25 = swift_release(v24);
  static DispatchQoS.unspecified.getter(v25);
  aBlock[0] = _swiftEmptyArrayStorage;
  v26 = sub_100007828((unint64_t *)&qword_10015BAB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v27 = sub_100004FC8((uint64_t *)&unk_100156F40);
  v28 = sub_10000551C();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v27, v28, v2, v26);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v5, v23);
  _Block_release(v23);

  (*(void (**)(char *, uint64_t))(v31 + 8))(v5, v2);
  return (id)(*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v8, v30);
}

uint64_t sub_1000C7A2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t Strong;
  void *v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[16];
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  _QWORD v27[3];
  _QWORD v28[4];
  _BYTE v29[24];

  v24 = a3;
  v25 = a4;
  v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v29, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v5);
  if (Strong)
  {
    v7 = (void *)Strong;
    KeyPath = swift_getKeyPath(&unk_10011A778);
    v23 = (uint64_t)&v23;
    __chkstk_darwin(KeyPath);
    v21 = v7;
    v22 = a2;
    v28[0] = v7;
    v9 = sub_100007828((unint64_t *)&unk_10015BA80, type metadata accessor for RestrictionsManager, (uint64_t)&protocol conformance descriptor for RestrictionsManager);
    swift_bridgeObjectRetain(a2);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v28, KeyPath, sub_1000CA11C, v20, (char *)&type metadata for () + 8, v9);

    swift_release(KeyPath);
    swift_bridgeObjectRelease(a2);
  }
  swift_beginAccess(v5, v28, 0, 0);
  v10 = swift_unknownObjectWeakLoadStrong(v5);
  if (v10)
  {
    v11 = (void *)v10;
    v12 = swift_getKeyPath(&unk_10011A750);
    v23 = (uint64_t)&v23;
    __chkstk_darwin(v12);
    v13 = v24;
    v21 = v11;
    v22 = v24;
    v27[0] = v11;
    v14 = sub_100007828((unint64_t *)&unk_10015BA80, type metadata accessor for RestrictionsManager, (uint64_t)&protocol conformance descriptor for RestrictionsManager);
    swift_bridgeObjectRetain(v13);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v27, v12, sub_1000CA15C, v20, (char *)&type metadata for () + 8, v14);

    swift_release(v12);
    swift_bridgeObjectRelease(v13);
  }
  swift_beginAccess(v5, v27, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v5);
  if (result)
  {
    v16 = (void *)result;
    v17 = swift_getKeyPath(&unk_10011A728);
    __chkstk_darwin(v17);
    v18 = v25;
    v21 = v16;
    v22 = v25;
    v26 = v16;
    v19 = sub_100007828((unint64_t *)&unk_10015BA80, type metadata accessor for RestrictionsManager, (uint64_t)&protocol conformance descriptor for RestrictionsManager);
    swift_bridgeObjectRetain(v18);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v26, v17, sub_1000CA178, v20, (char *)&type metadata for () + 8, v19);

    swift_release(v17);
    return swift_bridgeObjectRelease(v18);
  }
  return result;
}

uint64_t sub_1000C7D18()
{
  return type metadata accessor for RestrictionsManager(0);
}

uint64_t sub_1000C7D20(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_10011A6F8;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[2] = &unk_10011A710;
  v4[3] = &unk_10011A710;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1000C7E54(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  char *v28;
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;

  v3 = v2;
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_100007828((unint64_t *)&unk_10015BAD0, v12, (uint64_t)&protocol conformance descriptor for URL);
  swift_bridgeObjectRetain(v10);
  v35 = a2;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  v17 = v10;
  v18 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v31 = v3;
    v32 = a1;
    v33 = ~v15;
    v34 = v7;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v21 = v17;
      v22 = v20;
      v20(v9, *(_QWORD *)(v17 + 48) + v19 * v16, v6);
      v23 = sub_100007828(&qword_1001582B8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v35, v6, v23);
      v25 = *(void (**)(char *, uint64_t))(v34 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0)
        break;
      v16 = (v16 + 1) & v33;
      v17 = v21;
      v20 = v22;
      if (((*(_QWORD *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v21);
        v3 = v31;
        a1 = v32;
        v26 = v34;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease(v21);
    v25(v35, v6);
    v22(v32, *(_QWORD *)(*v31 + 48) + v19 * v16, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v26 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v28 = v35;
    v20(v9, v35, v6);
    v36 = *v3;
    *v3 = 0x8000000000000000;
    sub_1000C88A4((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    v29 = *v3;
    *v3 = v36;
    swift_bridgeObjectRelease(v29);
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(a1, v28, v6);
    return 1;
  }
}

uint64_t sub_1000C80B0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  _QWORD v24[9];

  v7 = *v3;
  Hasher.init(_seed:)(v24, *(_QWORD *)(*v3 + 40));
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v24, a2, a3);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = v12[1];
    v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      v15 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0;
    }
    v18 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v18;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v19 = (_QWORD *)(v11 + 16 * v10);
      v20 = v19[1];
      v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0) & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease(v7);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain(a3);
  sub_1000C8AA8(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  v23 = *v3;
  *v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_1000C825C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  _QWORD *v39;
  uint64_t v40;

  v2 = v1;
  v4 = type metadata accessor for URL(0);
  v40 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100004FC8((uint64_t *)&unk_10015BAE0);
  v8 = static _SetStorage.resize(original:capacity:move:)(v7, a1, 1);
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_39;
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v11 = *(_QWORD *)(v7 + 56);
  v39 = (_QWORD *)(v7 + 56);
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & v11;
  v37 = v2;
  v38 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 56;
  result = swift_retain(v7);
  v16 = 0;
  while (1)
  {
    if (v13)
    {
      v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v19 = v18 | (v16 << 6);
      goto LABEL_26;
    }
    v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return result;
    }
    if (v20 >= v38)
      goto LABEL_35;
    v21 = v39[v20];
    ++v16;
    if (!v21)
    {
      v16 = v20 + 1;
      if (v20 + 1 >= v38)
        goto LABEL_35;
      v21 = v39[v16];
      if (!v21)
      {
        v16 = v20 + 2;
        if (v20 + 2 >= v38)
          goto LABEL_35;
        v21 = v39[v16];
        if (!v21)
          break;
      }
    }
LABEL_25:
    v13 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_26:
    v23 = v7;
    v24 = *(_QWORD *)(v7 + 48);
    v25 = *(_QWORD *)(v40 + 72);
    v26 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 32);
    v26(v6, v24 + v25 * v19, v4);
    v27 = *(_QWORD *)(v9 + 40);
    v28 = sub_100007828((unint64_t *)&unk_10015BAD0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v27, v4, v28);
    v29 = -1 << *(_BYTE *)(v9 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v14 + 8 * (v30 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v14 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v14 + 8 * v31);
      }
      while (v35 == -1);
      v17 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(_QWORD *)(v9 + 48) + v17 * v25, v6, v4);
    ++*(_QWORD *)(v9 + 16);
    v7 = v23;
  }
  v22 = v20 + 3;
  if (v22 < v38)
  {
    v21 = v39[v22];
    if (!v21)
    {
      while (1)
      {
        v16 = v22 + 1;
        if (__OFADD__(v22, 1))
          goto LABEL_41;
        if (v16 >= v38)
          goto LABEL_35;
        v21 = v39[v16];
        ++v22;
        if (v21)
          goto LABEL_25;
      }
    }
    v16 = v22;
    goto LABEL_25;
  }
LABEL_35:
  swift_release(v7);
  v2 = v37;
  v36 = 1 << *(_BYTE *)(v7 + 32);
  if (v36 > 63)
    bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v39 = -1 << v36;
  *(_QWORD *)(v7 + 16) = 0;
LABEL_39:
  result = swift_release(v7);
  *v2 = v9;
  return result;
}

void sub_1000C85C8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100004FC8(&qword_100158B78);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    swift_retain(v3);
    v12 = 0;
    while (1)
    {
      if (v9)
      {
        v15 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v16 = v15 | (v12 << 6);
      }
      else
      {
        v17 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }
        if (v17 >= v10)
          goto LABEL_36;
        v18 = v33[v17];
        ++v12;
        if (!v18)
        {
          v12 = v17 + 1;
          if (v17 + 1 >= v10)
            goto LABEL_36;
          v18 = v33[v12];
          if (!v18)
          {
            v12 = v17 + 2;
            if (v17 + 2 >= v10)
              goto LABEL_36;
            v18 = v33[v12];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v10)
              {
LABEL_36:
                swift_release(v3);
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v33[v19];
              if (!v18)
              {
                while (1)
                {
                  v12 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v12 >= v10)
                    goto LABEL_36;
                  v18 = v33[v12];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v12 = v19;
            }
          }
        }
LABEL_26:
        v9 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v12 << 6);
      }
      v20 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v16);
      v21 = *v20;
      v22 = v20[1];
      Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
      String.hash(into:)(v34, v21, v22);
      v23 = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = v23 & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v11 + 8 * v26);
        }
        while (v30 == -1);
        v13 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v13);
      *v14 = v21;
      v14[1] = v22;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  swift_release(v3);
  *v2 = v6;
}

uint64_t sub_1000C88A4(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v30 = a1;
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v29 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000C825C(v12);
  }
  else
  {
    if (v11 > v10)
    {
      sub_1000C8C40();
      goto LABEL_12;
    }
    sub_1000C9014(v12);
  }
  v13 = *v3;
  v14 = *(_QWORD *)(*v3 + 40);
  v15 = sub_100007828((unint64_t *)&unk_10015BAD0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v6, v15);
  v17 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = ~v17;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v9, *(_QWORD *)(v13 + 48) + v19 * a2, v6);
      v21 = sub_100007828(&qword_1001582B8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v30, v6, v21);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v22 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v18;
    }
    while (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v23 = v30;
  v24 = *v29;
  *(_QWORD *)(*v29 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v24 + 48) + *(_QWORD *)(v7 + 72) * a2, v23, v6);
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (!v27)
  {
    *(_QWORD *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

uint64_t sub_1000C8AA8(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD v28[9];

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_1000C85C8(v11);
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_1000C8E64();
      goto LABEL_22;
    }
    sub_1000C933C(v11);
  }
  v12 = *v4;
  Hasher.init(_seed:)(v28, *(_QWORD *)(*v4 + 40));
  String.hash(into:)(v28, v8, a2);
  result = Hasher._finalize()();
  v13 = -1 << *(_BYTE *)(v12 + 32);
  a3 = result & ~v13;
  v14 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v15 = *(_QWORD *)(v12 + 48);
    v16 = (_QWORD *)(v15 + 16 * a3);
    v17 = v16[1];
    v18 = *v16 == v8 && v17 == a2;
    if (v18 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, a2, 0), (result & 1) != 0))
    {
LABEL_21:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }
    else
    {
      v19 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v19;
        if (((*(_QWORD *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v20 = (_QWORD *)(v15 + 16 * a3);
        v21 = v20[1];
        if (*v20 != v8 || v21 != a2)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, a2, 0);
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v23 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v24 = (uint64_t *)(*(_QWORD *)(v23 + 48) + 16 * a3);
  *v24 = v8;
  v24[1] = a2;
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (v26)
    __break(1u);
  else
    *(_QWORD *)(v23 + 16) = v27;
  return result;
}

void *sub_1000C8C40()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;

  v1 = v0;
  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100004FC8((uint64_t *)&unk_10015BAE0);
  v6 = *v0;
  v7 = static _SetStorage.copy(original:)(*v0);
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release(v6);
LABEL_30:
    *v1 = v8;
    return result;
  }
  v25 = v1;
  result = (void *)(v7 + 56);
  v10 = v6 + 56;
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v11)
    result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v14 = 1 << *(_BYTE *)(v6 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v6 + 56);
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v21 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v21);
    ++v13;
    if (!v22)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v17)
        goto LABEL_28;
      v22 = *(_QWORD *)(v10 + 8 * v13);
      if (!v22)
      {
        v13 = v21 + 2;
        if (v21 + 2 >= v17)
          goto LABEL_28;
        v22 = *(_QWORD *)(v10 + 8 * v13);
        if (!v22)
          break;
      }
    }
LABEL_27:
    v16 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v3 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v20, v2);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v20, v5, v2);
  }
  v23 = v21 + 3;
  if (v23 >= v17)
  {
LABEL_28:
    result = (void *)swift_release(v6);
    v1 = v25;
    goto LABEL_30;
  }
  v22 = *(_QWORD *)(v10 + 8 * v23);
  if (v22)
  {
    v13 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    v13 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v13 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v13);
    ++v23;
    if (v22)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
  return result;
}

void *sub_1000C8E64()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_100004FC8(&qword_100158B78);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain(v18);
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1000C9014(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int64_t v37;

  v2 = v1;
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100004FC8((uint64_t *)&unk_10015BAE0);
  v9 = static _SetStorage.resize(original:capacity:move:)(v8, a1, 0);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
    result = swift_release(v8);
LABEL_37:
    *v2 = v10;
    return result;
  }
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 56);
  v35 = v2;
  v36 = v8 + 56;
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v37 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 56;
  result = swift_retain(v8);
  v17 = 0;
  while (1)
  {
    if (v14)
    {
      v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v20 = v19 | (v17 << 6);
      goto LABEL_26;
    }
    v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v21 >= v37)
      goto LABEL_35;
    v22 = *(_QWORD *)(v36 + 8 * v21);
    ++v17;
    if (!v22)
    {
      v17 = v21 + 1;
      if (v21 + 1 >= v37)
        goto LABEL_35;
      v22 = *(_QWORD *)(v36 + 8 * v17);
      if (!v22)
      {
        v17 = v21 + 2;
        if (v21 + 2 >= v37)
          goto LABEL_35;
        v22 = *(_QWORD *)(v36 + 8 * v17);
        if (!v22)
          break;
      }
    }
LABEL_25:
    v14 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v17 << 6);
LABEL_26:
    v24 = *(_QWORD *)(v5 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(_QWORD *)(v8 + 48) + v24 * v20, v4);
    v25 = *(_QWORD *)(v10 + 40);
    v26 = sub_100007828((unint64_t *)&unk_10015BAD0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v25, v4, v26);
    v27 = -1 << *(_BYTE *)(v10 + 32);
    v28 = result & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v15 + 8 * (v28 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v15 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v32 = v29 == v31;
        if (v29 == v31)
          v29 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v15 + 8 * v29);
      }
      while (v33 == -1);
      v18 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(_QWORD *)(v10 + 48) + v18 * v24, v7, v4);
    ++*(_QWORD *)(v10 + 16);
  }
  v23 = v21 + 3;
  if (v23 >= v37)
  {
LABEL_35:
    result = swift_release_n(v8, 2);
    v2 = v35;
    goto LABEL_37;
  }
  v22 = *(_QWORD *)(v36 + 8 * v23);
  if (v22)
  {
    v17 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v17 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v17 >= v37)
      goto LABEL_35;
    v22 = *(_QWORD *)(v36 + 8 * v17);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_39:
  __break(1u);
  return result;
}

void sub_1000C933C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100004FC8(&qword_100158B78);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_38:
    *v2 = v6;
    return;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  swift_retain(v3);
  v12 = 0;
  while (1)
  {
    if (v10)
    {
      v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v16 = v15 | (v12 << 6);
      goto LABEL_27;
    }
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v32)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v12;
    if (!v18)
    {
      v12 = v17 + 1;
      if (v17 + 1 >= v32)
        goto LABEL_36;
      v18 = *(_QWORD *)(v8 + 8 * v12);
      if (!v18)
      {
        v12 = v17 + 2;
        if (v17 + 2 >= v32)
          goto LABEL_36;
        v18 = *(_QWORD *)(v8 + 8 * v12);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v10 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v12 << 6);
LABEL_27:
    v20 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v21 = *v20;
    v22 = v20[1];
    Hasher.init(_seed:)(v33, *(_QWORD *)(v6 + 40));
    swift_bridgeObjectRetain(v22);
    String.hash(into:)(v33, v21, v22);
    v23 = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = v23 & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v26);
      }
      while (v30 == -1);
      v13 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    v14 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v13);
    *v14 = v21;
    v14[1] = v22;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v32)
  {
LABEL_36:
    swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v12 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v12 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v12 >= v32)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v12);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
}

uint64_t sub_1000C95E8(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v11;

  v2 = isStackAllocationSafe;
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = v3 & 0x3F;
  v5 = (1 << v3) + 63;
  v6 = v5 >> 6;
  v7 = 8 * (v5 >> 6);
  if (v4 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    v8 = sub_1000C9738((uint64_t)&v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v6, v2);
    if (v1)
      swift_willThrow(v8);
    else
      return v8;
  }
  else
  {
    v9 = (void *)swift_slowAlloc(v7, -1);
    bzero(v9, v7);
    v2 = sub_1000C9738((uint64_t)v9, v6, v2);
    swift_slowDealloc(v9, -1, -1);
  }
  return v2;
}

uint64_t sub_1000C9738(uint64_t result, uint64_t a2, uint64_t a3)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  char v21;
  unint64_t *v23;
  _QWORD v24[2];
  _QWORD v25[5];
  __int128 v26;
  __int128 v27;
  _QWORD v28[4];
  uint64_t v29;

  v23 = (unint64_t *)result;
  v29 = 0;
  v4 = 0;
  v5 = a3 + 64;
  v6 = 1 << *(_BYTE *)(a3 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a3 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  v10 = MCSettingParameterValueKey;
  while (1)
  {
    if (v8)
    {
      v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v12 = v11 | (v4 << 6);
      goto LABEL_19;
    }
    v13 = __OFADD__(v4++, 1);
    if (v13)
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v4 >= v9)
      return sub_1000C99E0(v23, a2, v29, a3);
    v14 = *(_QWORD *)(v5 + 8 * v4);
    if (!v14)
      break;
LABEL_18:
    v8 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v4 << 6);
LABEL_19:
    sub_1000148AC(*(_QWORD *)(a3 + 56) + 32 * v12, (uint64_t)v28);
    sub_1000148AC((uint64_t)v28, (uint64_t)v25);
    v16 = sub_100004FC8(&qword_10015BA98);
    if (!swift_dynamicCast(&v26, v25, (char *)&type metadata for Any + 8, v16, 6))
      goto LABEL_5;
    v17 = v26;
    v24[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v24[1] = v18;
    AnyHashable.init<A>(_:)(v25, v24, &type metadata for String, &protocol witness table for String);
    if (*(_QWORD *)(v17 + 16) && (v19 = sub_1000DA95C((uint64_t)v25), (v20 & 1) != 0))
    {
      sub_1000148AC(*(_QWORD *)(v17 + 56) + 32 * v19, (uint64_t)&v26);
    }
    else
    {
      v26 = 0u;
      v27 = 0u;
    }
    swift_bridgeObjectRelease(v17);
    sub_100014878((uint64_t)v25);
    if (!*((_QWORD *)&v27 + 1))
    {
      sub_10000BA50((uint64_t)&v26, &qword_10015BA90);
      goto LABEL_5;
    }
    if ((swift_dynamicCast(v24, &v26, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0)
    {
      v21 = v24[0];
      result = sub_100005474(v28);
      if ((v21 & 1) == 0)
      {
        *(unint64_t *)((char *)v23 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
        v13 = __OFADD__(v29++, 1);
        if (v13)
          goto LABEL_37;
      }
    }
    else
    {
LABEL_5:
      result = sub_100005474(v28);
    }
  }
  v15 = v4 + 1;
  if (v4 + 1 >= v9)
    return sub_1000C99E0(v23, a2, v29, a3);
  v14 = *(_QWORD *)(v5 + 8 * v15);
  if (v14)
    goto LABEL_17;
  v15 = v4 + 2;
  if (v4 + 2 >= v9)
    return sub_1000C99E0(v23, a2, v29, a3);
  v14 = *(_QWORD *)(v5 + 8 * v15);
  if (v14)
    goto LABEL_17;
  v15 = v4 + 3;
  if (v4 + 3 >= v9)
    return sub_1000C99E0(v23, a2, v29, a3);
  v14 = *(_QWORD *)(v5 + 8 * v15);
  if (v14)
  {
LABEL_17:
    v4 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    v4 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v4 >= v9)
      return sub_1000C99E0(v23, a2, v29, a3);
    v14 = *(_QWORD *)(v5 + 8 * v4);
    ++v15;
    if (v14)
      goto LABEL_18;
  }
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1000C99E0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  unint64_t *v29;
  _OWORD v30[2];
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _OWORD v34[2];
  _OWORD v35[2];
  uint64_t v36;

  if (!a3)
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain(a4);
    return v4;
  }
  sub_100004FC8(&qword_10015BAA8);
  result = static _DictionaryStorage.allocate(capacity:)(v5);
  v9 = result;
  v29 = a1;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
    }
    else
    {
      v15 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_40;
      if (v15 >= a2)
        return v9;
      v16 = v29[v15];
      ++v11;
      if (!v16)
      {
        v11 = v15 + 1;
        if (v15 + 1 >= a2)
          return v9;
        v16 = v29[v11];
        if (!v16)
        {
          v11 = v15 + 2;
          if (v15 + 2 >= a2)
            return v9;
          v16 = v29[v11];
          if (!v16)
          {
            v17 = v15 + 3;
            if (v17 >= a2)
              return v9;
            v16 = v29[v17];
            if (!v16)
            {
              while (1)
              {
                v11 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_41;
                if (v11 >= a2)
                  return v9;
                v16 = v29[v11];
                ++v17;
                if (v16)
                  goto LABEL_24;
              }
            }
            v11 = v17;
          }
        }
      }
LABEL_24:
      v10 = (v16 - 1) & v16;
      v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    sub_1000CA038(*(_QWORD *)(v4 + 48) + 40 * v14, (uint64_t)v35);
    sub_1000148AC(*(_QWORD *)(v4 + 56) + 32 * v14, (uint64_t)v34);
    v31 = v35[0];
    v32 = v35[1];
    v33 = v36;
    sub_1000CA074(v34, v30);
    result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v9 + 40));
    v18 = -1 << *(_BYTE *)(v9 + 32);
    v19 = result & ~v18;
    v20 = v19 >> 6;
    if (((-1 << v19) & ~*(_QWORD *)(v12 + 8 * (v19 >> 6))) != 0)
    {
      v21 = __clz(__rbit64((-1 << v19) & ~*(_QWORD *)(v12 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (++v20 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v24 = v20 == v23;
        if (v20 == v23)
          v20 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v12 + 8 * v20);
      }
      while (v25 == -1);
      v21 = __clz(__rbit64(~v25)) + (v20 << 6);
    }
    *(_QWORD *)(v12 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    v26 = *(_QWORD *)(v9 + 48) + 40 * v21;
    v27 = v32;
    *(_OWORD *)v26 = v31;
    *(_OWORD *)(v26 + 16) = v27;
    *(_QWORD *)(v26 + 32) = v33;
    result = (uint64_t)sub_1000CA074(v30, (_OWORD *)(*(_QWORD *)(v9 + 56) + 32 * v21));
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    if (!v5)
      return v9;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

Swift::Int sub_1000C9C90(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  Swift::Int result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  _QWORD v23[9];

  v5 = *v2;
  Hasher.init(_seed:)(v23, *(_QWORD *)(*v2 + 40));
  String.hash(into:)(v23, a1, a2);
  result = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = result & ~v7;
  v9 = v5 + 56;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
  {
    v10 = *(_QWORD *)(v5 + 48);
    v11 = (_QWORD *)(v10 + 16 * v8);
    v12 = v11[1];
    v13 = *v11 == a1 && v12 == a2;
    if (v13 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(*v11, v12, a1, a2, 0), (result & 1) != 0))
    {
LABEL_7:
      v14 = (_QWORD *)(v10 + 16 * v8);
      result = swift_bridgeObjectRelease(v14[1]);
      *v14 = a1;
      v14[1] = a2;
      return result;
    }
    v15 = ~v7;
    while (1)
    {
      v8 = (v8 + 1) & v15;
      if (((*(_QWORD *)(v9 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        break;
      v16 = (_QWORD *)(v10 + 16 * v8);
      v17 = v16[1];
      if (*v16 != a1 || v17 != a2)
      {
        result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, a1, a2, 0);
        if ((result & 1) == 0)
          continue;
      }
      goto LABEL_7;
    }
  }
  if (*(_QWORD *)(v5 + 16) >= *(_QWORD *)(v5 + 24))
  {
    __break(1u);
    goto LABEL_21;
  }
  *(_QWORD *)(v9 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) |= 1 << v8;
  v19 = (_QWORD *)(*(_QWORD *)(v5 + 48) + 16 * v8);
  *v19 = a1;
  v19[1] = a2;
  v20 = *(_QWORD *)(v5 + 16);
  v21 = __OFADD__(v20, 1);
  v22 = v20 + 1;
  if (v21)
  {
LABEL_21:
    __break(1u);
    return result;
  }
  *(_QWORD *)(v5 + 16) = v22;
  return result;
}

uint64_t sub_1000C9DF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[2];
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)(v2, &type metadata for String, &protocol witness table for String);
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain(*v4);
      sub_1000C80B0(v7, v5, v6);
      swift_bridgeObjectRelease(v7[1]);
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

id sub_1000C9E8C()
{
  id result;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];
  uint64_t v13[5];
  __int128 v14;
  __int128 v15;

  result = objc_msgSend((id)objc_opt_self(MCProfileConnection), "sharedConnection");
  if (result)
  {
    v1 = result;
    v2 = objc_msgSend(result, "effectiveUserSettings");

    if (v2)
    {
      v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v2, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

      v12[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(MCRestrictedBoolKey);
      v12[1] = v4;
      AnyHashable.init<A>(_:)(v13, v12, &type metadata for String, &protocol witness table for String);
      if (*(_QWORD *)(v3 + 16) && (v5 = sub_1000DA95C((uint64_t)v13), (v6 & 1) != 0))
      {
        sub_1000148AC(*(_QWORD *)(v3 + 56) + 32 * v5, (uint64_t)&v14);
      }
      else
      {
        v14 = 0u;
        v15 = 0u;
      }
      swift_bridgeObjectRelease(v3);
      sub_100014878((uint64_t)v13);
      if (*((_QWORD *)&v15 + 1))
      {
        v7 = sub_100004FC8(&qword_10015BA98);
        if ((swift_dynamicCast(v13, &v14, (char *)&type metadata for Any + 8, v7, 6) & 1) != 0)
        {
          v8 = v13[0];
          v9 = sub_1000C95E8(v13[0]);
          swift_bridgeObjectRelease(v8);
          v10 = sub_1000C6938(v9);
          swift_release(v9);
          v11 = sub_1000C9DF8(v10);
          swift_bridgeObjectRelease(v10);
          return (id)v11;
        }
        return &_swiftEmptySetSingleton;
      }
    }
    else
    {
      v14 = 0u;
      v15 = 0u;
    }
    sub_10000BA50((uint64_t)&v14, &qword_10015BA90);
    return &_swiftEmptySetSingleton;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000CA038(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 16))(a2, a1);
  return a2;
}

_OWORD *sub_1000CA074(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_1000CA084()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000CA0A8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

id sub_1000CA0CC()
{
  uint64_t v0;

  return sub_1000C7724(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000CA0D4()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000CA110()
{
  uint64_t *v0;

  return sub_1000C7A2C(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_1000CA11C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC11SettingsApp19RestrictionsManager__restrictedFeatures);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC11SettingsApp19RestrictionsManager__restrictedFeatures) = v1;
  swift_bridgeObjectRetain(v1);
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_1000CA15C()
{
  return sub_1000CA194(&OBJC_IVAR____TtC11SettingsApp19RestrictionsManager__blockedAppBundleIDs);
}

uint64_t sub_1000CA178()
{
  return sub_1000CA194(&OBJC_IVAR____TtC11SettingsApp19RestrictionsManager__allowedAppBundleIDs);
}

uint64_t sub_1000CA194(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v1 + 16);
  v2 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v3 + *a1);
  *(_QWORD *)(v3 + *a1) = v2;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRelease(v4);
}

void sub_1000CA1E0(uint64_t a1)
{
  id v2;
  unsigned int v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  _QWORD v11[5];
  uint64_t v12;

  v2 = objc_msgSend((id)objc_opt_self(PSLaunchTracker), "sharedInstance");
  v3 = objc_msgSend(v2, "launchHasCompleted");

  if (v3 && !*(_QWORD *)(a1 + 88))
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)PSUIConnectedHeadphonesControllerWrapper), "init");
    v5 = *(void **)(a1 + 88);
    *(_QWORD *)(a1 + 88) = v4;

    v6 = *(void **)(a1 + 88);
    if (v6)
    {
      v7 = swift_allocObject(&unk_10014D3E0, 24, 7);
      swift_weakInit(v7 + 16, a1);
      v11[4] = sub_1000CB394;
      v12 = v7;
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 1107296256;
      v11[2] = sub_100005350;
      v11[3] = &unk_10014D3F8;
      v8 = _Block_copy(v11);
      v9 = v12;
      v10 = v6;
      swift_release(v9);
      objc_msgSend(v10, "setDeviceChangeHandler:", v8);
      _Block_release(v8);

      sub_1000CA454();
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t sub_1000CA320@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];

  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)v15 - v10;
  sub_10000BB7C(a1, (uint64_t)v15 - v10);
  swift_storeEnumTagMultiPayload(v11, v6, 5);
  sub_100012DC4((uint64_t)v11, (uint64_t)v9);
  v12 = type metadata accessor for StaticPrimarySettingsListItemProvider(0);
  v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  sub_10000F48C((uint64_t)v9, v13 + OBJC_IVAR____TtC11SettingsApp37StaticPrimarySettingsListItemProvider_id);
  sub_1000B2604(a2, a3);
  swift_setDeallocating(v13);
  sub_100013014(v13 + OBJC_IVAR____TtC11SettingsApp37StaticPrimarySettingsListItemProvider_id);
  swift_deallocClassInstance(v13, *(unsigned int *)(*(_QWORD *)v13 + 48), *(unsigned __int16 *)(*(_QWORD *)v13 + 52));
  return sub_100013014((uint64_t)v11);
}

uint64_t sub_1000CA454()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_signpost_type_t v19;
  uint8_t *v20;
  uint8_t *v21;
  uint64_t v22;
  os_signpost_id_t v23;
  uint8_t *v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD aBlock[5];
  uint64_t v42;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v38 = *(_QWORD *)(v2 - 8);
  v39 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v36 = *(_QWORD *)(v5 - 8);
  v37 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OSSignpostID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v35 - v13;
  if (qword_100156CD8 != -1)
    swift_once(&qword_100156CD8, sub_10008BEEC);
  v15 = type metadata accessor for OSSignposter(0);
  v16 = sub_100007808(v15, (uint64_t)qword_10015D340);
  v17 = static OSSignpostID.exclusive.getter(v16);
  v18 = OSSignposter.logHandle.getter(v17);
  v19 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    v35 = v7;
    v21 = v20;
    *(_WORD *)v20 = 0;
    v23 = OSSignpostID.rawValue.getter(v20, v22);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, v19, v23, "ConnectedHeadphonesSectionModelProvider.updateConnectedHeadphones began", "", v21, 2u);
    v24 = v21;
    v1 = v0;
    v7 = v35;
    swift_slowDealloc(v24, -1, -1);

    v25 = *(void (**)(char *, uint64_t))(v9 + 8);
    v25(v14, v8);
    v25(v12, v8);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  }
  if (qword_100156D60 != -1)
    swift_once(&qword_100156D60, sub_1000D34BC);
  v26 = swift_allocObject(&unk_10014D3E0, 24, 7);
  swift_weakInit(v26 + 16, v1);
  aBlock[4] = sub_1000CB39C;
  v42 = v26;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100005350;
  aBlock[3] = &unk_10014D420;
  v27 = _Block_copy(aBlock);
  swift_retain(v26);
  static DispatchQoS.unspecified.getter(v28);
  v40 = _swiftEmptyArrayStorage;
  v29 = sub_100012ED8();
  v30 = sub_100004FC8((uint64_t *)&unk_100156F40);
  v31 = sub_10000551C();
  v32 = v39;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v40, v30, v31, v39, v29);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v4, v27);
  _Block_release(v27);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v4, v32);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v7, v37);
  v33 = v42;
  swift_release(v26);
  return swift_release(v33);
}

uint64_t sub_1000CA7CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t Strong;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t result;
  id v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  char **p_type;
  id v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  char **v38;
  id v39;
  id v40;
  unint64_t v41;
  unint64_t v42;
  _OWORD *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_signpost_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  os_signpost_id_t v54;
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  _OWORD *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _OWORD v82[2];
  __int128 aBlock;
  __int128 v84;
  __int128 v85;
  _OWORD v86[2];
  _QWORD *v87;
  char v88[16];

  v2 = type metadata accessor for OSSignpostID(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (uint64_t)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v68 - v7;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  v74 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v73 = (char *)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = a1;
  a1 += 16;
  swift_beginAccess(a1, v88, 0, 0);
  Strong = swift_weakLoadStrong(a1);
  if (Strong)
  {
    v16 = Strong;
    v17 = *(void **)(Strong + 88);
    v18 = v17;
    result = swift_release(v16);
    if (!v17)
    {
      __break(1u);
      return result;
    }
    v20 = objc_msgSend(v18, "connectedHeadphoneInfo");

    v21 = sub_100007BBC(0, &qword_10015BBE8, &off_100146BA0);
    v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v20, v21);

    if ((unint64_t)v6 >> 62)
    {
      if (v6 < 0)
        v67 = v6;
      else
        v67 = v6 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v6);
      v2 = _CocoaArrayWrapper.endIndex.getter(v67);
      swift_bridgeObjectRelease(v6);
    }
    else
    {
      v2 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v71 = v13;
    if (!v2)
    {
      swift_bridgeObjectRelease(v6);
      v23 = _swiftEmptyArrayStorage;
LABEL_25:
      v56 = sub_100007BBC(0, (unint64_t *)&qword_100159D30, OS_dispatch_queue_ptr);
      v57 = (void *)static OS_dispatch_queue.main.getter(v56);
      v58 = swift_allocObject(&unk_10014D458, 32, 7);
      v59 = v72;
      *(_QWORD *)(v58 + 16) = v72;
      *(_QWORD *)(v58 + 24) = v23;
      *(_QWORD *)&v85 = sub_1000CB3D0;
      *((_QWORD *)&v85 + 1) = v58;
      *(_QWORD *)&aBlock = _NSConcreteStackBlock;
      *((_QWORD *)&aBlock + 1) = 1107296256;
      *(_QWORD *)&v84 = sub_100005350;
      *((_QWORD *)&v84 + 1) = &unk_10014D470;
      v60 = _Block_copy(&aBlock);
      v61 = *((_QWORD *)&v85 + 1);
      swift_retain(v59);
      v62 = swift_release(v61);
      v63 = v73;
      static DispatchQoS.unspecified.getter(v62);
      *(_QWORD *)&aBlock = _swiftEmptyArrayStorage;
      v64 = sub_100012ED8();
      v65 = sub_100004FC8((uint64_t *)&unk_100156F40);
      v66 = sub_10000551C();
      dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v65, v66, v9, v64);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v63, v12, v60);
      _Block_release(v60);

      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      return (*(uint64_t (**)(char *, uint64_t))(v74 + 8))(v63, v71);
    }
    v87 = _swiftEmptyArrayStorage;
    sub_10000F2E8(0, v2 & ~(v2 >> 63), 0);
    if ((v2 & 0x8000000000000000) == 0)
    {
      v68 = v12;
      v69 = v10;
      v70 = v9;
      v22 = 0;
      v23 = v87;
      v77 = v6 & 0xC000000000000001;
      v76 = v86;
      p_type = &stru_100153FF0.type;
      v75 = (char *)&type metadata for Any + 8;
      v79 = v6;
      v78 = v2;
      do
      {
        if (v77)
          v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v22, v6);
        else
          v25 = *(id *)(v6 + 8 * v22 + 32);
        v26 = v25;
        v27 = objc_msgSend(v25, "deviceID", v68, v69, v70);
        v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
        v80 = v29;
        v81 = v28;

        v30 = objc_msgSend(v26, "deviceName");
        v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
        v33 = v32;

        v34 = objc_msgSend(v26, "deviceImage");
        v35 = objc_msgSend(v26, p_type[428]);
        v36 = objc_msgSend(v35, "properties");

        if (v36)
        {
          v37 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v36, &type metadata for AnyHashable, v75, &protocol witness table for AnyHashable);

        }
        else
        {
          v37 = 0;
        }
        v38 = p_type;
        v39 = objc_msgSend(v26, p_type[428]);
        v40 = objc_msgSend(v39, "userInfo");

        if (v40)
        {
          _bridgeAnyObjectToAny(_:)(v82, v40);
          swift_unknownObjectRelease(v40);
        }
        else
        {
          memset(v82, 0, sizeof(v82));
        }
        *(_QWORD *)&aBlock = v81;
        *((_QWORD *)&aBlock + 1) = v80;
        *(_QWORD *)&v84 = v31;
        *((_QWORD *)&v84 + 1) = v33;
        *(_QWORD *)&v85 = v34;
        *((_QWORD *)&v85 + 1) = v37;
        sub_10007E96C((uint64_t)v82, (uint64_t)v76, &qword_10015BA90);

        v87 = v23;
        v42 = v23[2];
        v41 = v23[3];
        p_type = v38;
        if (v42 >= v41 >> 1)
        {
          sub_10000F2E8(v41 > 1, v42 + 1, 1);
          v23 = v87;
        }
        ++v22;
        v23[2] = v42 + 1;
        v43 = &v23[10 * v42];
        v43[2] = aBlock;
        v44 = v84;
        v45 = v85;
        v46 = v86[1];
        v43[5] = v86[0];
        v43[6] = v46;
        v43[3] = v44;
        v43[4] = v45;
        v6 = v79;
      }
      while (v78 != v22);
      swift_bridgeObjectRelease(v79);
      v9 = v70;
      v10 = v69;
      v12 = v68;
      goto LABEL_25;
    }
    __break(1u);
  }
  else if (qword_100156CD8 == -1)
  {
    goto LABEL_22;
  }
  swift_once(&qword_100156CD8, sub_10008BEEC);
LABEL_22:
  v47 = type metadata accessor for OSSignposter(0);
  v48 = sub_100007808(v47, (uint64_t)qword_10015D340);
  v49 = static OSSignpostID.exclusive.getter(v48);
  v50 = OSSignposter.logHandle.getter(v49);
  v51 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v3 + 16))(v6, v8, v2);
    v52 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v52 = 0;
    v54 = OSSignpostID.rawValue.getter(v52, v53);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v50, v51, v54, "ConnectedHeadphonesSectionModelProvider.updateConnectedHeadphones bailed", "", v52, 2u);
    swift_slowDealloc(v52, -1, -1);

    v55 = *(void (**)(char *, uint64_t))(v3 + 8);
    v55(v8, v2);
    return ((uint64_t (*)(uint64_t, uint64_t))v55)(v6, v2);
  }
  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  }
}

uint64_t sub_1000CAEE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Strong;
  _QWORD *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_signpost_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  os_signpost_id_t v23;
  void (*v24)(char *, uint64_t);
  _QWORD v26[2];
  char v27;
  _BYTE v28[24];

  v4 = type metadata accessor for OSSignpostID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)v26 - v9;
  a1 += 16;
  swift_beginAccess(a1, v28, 0, 0);
  Strong = swift_weakLoadStrong(a1);
  if (Strong)
  {
    v12 = (_QWORD *)Strong;
    v13 = *(_QWORD *)(Strong + 80);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(v13);
    v14 = sub_10000AF7C(a2, v13);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      sub_100007C2C(v12 + 5, v12[8]);
      v26[0] = "Connected Headphones";
      v26[1] = 20;
      v27 = 2;
      PassthroughSubject.send(_:)(v26);
    }
    v15 = v12[10];
    v12[10] = a2;
    swift_release(v12);
    swift_bridgeObjectRelease(v15);
  }
  if (qword_100156CD8 != -1)
    swift_once(&qword_100156CD8, sub_10008BEEC);
  v16 = type metadata accessor for OSSignposter(0);
  v17 = sub_100007808(v16, (uint64_t)qword_10015D340);
  v18 = static OSSignpostID.exclusive.getter(v17);
  v19 = OSSignposter.logHandle.getter(v18);
  v20 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v10, v4);
    v21 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v21 = 0;
    v23 = OSSignpostID.rawValue.getter(v21, v22);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, v20, v23, "ConnectedHeadphonesSectionModelProvider.updateConnectedHeadphones completed", "", v21, 2u);
    swift_slowDealloc(v21, -1, -1);

    v24 = *(void (**)(char *, uint64_t))(v5 + 8);
    v24(v10, v4);
    return ((uint64_t (*)(char *, uint64_t))v24)(v8, v4);
  }
  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  }
}

uint64_t sub_1000CB130()
{
  uint64_t v0;

  sub_10000BAE4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  sub_100005474((_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));

  return swift_deallocClassInstance(v0, 96, 7);
}

uint64_t type metadata accessor for ConnectedHeadphonesSectionModelProvider()
{
  return objc_opt_self(_TtC11SettingsApp39ConnectedHeadphonesSectionModelProvider);
}

uint64_t sub_1000CB190@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  void **v5;
  _BYTE v7[96];

  v4 = *v2;
  v5 = (void **)sub_100007C2C(a1, a1[3]);
  sub_1000CB238(*v5, v4, (uint64_t)v7);
  return sub_10007E96C((uint64_t)v7, a2, (uint64_t *)&unk_10015C9B0);
}

uint64_t sub_1000CB1E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v3 = result;
    sub_1000CA454();
    return swift_release(v3);
  }
  return result;
}

double sub_1000CB238@<D0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  id v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  double result;
  _QWORD v13[5];
  _QWORD v14[5];

  v14[3] = &type metadata for PrimarySettingsListDataModelGenerationContext;
  v14[4] = &off_100148E38;
  v14[0] = a1;
  v5 = *(_QWORD *)(a2 + 80);
  if (*(_QWORD *)(v5 + 16))
  {
    v13[2] = v14;
    v6 = a1;
    swift_bridgeObjectRetain(v5);
    v7 = sub_10006EB68((void (*)(_QWORD))sub_1000CB358, (uint64_t)v13, v5);
    swift_bridgeObjectRelease(v5);
    v8 = *(_QWORD *)(a2 + 16);
    v9 = *(_QWORD *)(a2 + 24);
    v10 = *(unsigned __int8 *)(a2 + 32);
    sub_10000BA8C(v8, v9, *(_BYTE *)(a2 + 32));
    sub_1000CA1E0(a2);
  }
  else
  {
    v11 = a1;
    sub_1000CA1E0(a2);
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v7 = 0;
  }
  sub_100005474(v14);
  *(_QWORD *)a3 = v8;
  *(_QWORD *)(a3 + 8) = v9;
  *(_QWORD *)(a3 + 16) = v10;
  result = 0.0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_QWORD *)(a3 + 88) = v7;
  return result;
}

uint64_t sub_1000CB358@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1000CA320(a1, *(_QWORD **)(v2 + 16), a2);
}

uint64_t sub_1000CB370()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000CB394()
{
  uint64_t v0;

  return sub_1000CB1E4(v0);
}

uint64_t sub_1000CB39C()
{
  uint64_t v0;

  return sub_1000CA7CC(v0);
}

uint64_t sub_1000CB3A4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000CB3D0()
{
  uint64_t v0;

  return sub_1000CAEE4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000CB3E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4[14] = a4;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v4[15] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[16] = v6;
  v4[17] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v4[18] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[19] = v8;
  v4[20] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100004FC8(&qword_10015BCB8);
  v4[21] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[22] = v10;
  v4[23] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004FC8(&qword_10015BCC0);
  v4[24] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v4[25] = v12;
  v4[26] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100004FC8(&qword_10015BCC8);
  v4[27] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v4[28] = v14;
  v4[29] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000CB4EC, 0, 0);
}

uint64_t sub_1000CB4EC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = v0[25];
  v2 = v0[26];
  v4 = v0[23];
  v3 = v0[24];
  v6 = v0[21];
  v5 = v0[22];
  v7 = v0[14] + 16;
  v8 = swift_task_alloc(32);
  *(_QWORD *)(v8 + 16) = 127;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v4, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v6);
  AsyncStream.init(_:bufferingPolicy:_:)(&type metadata for ManagedConfigurationEvent, v4, sub_1000CB9A4, v8, &type metadata for ManagedConfigurationEvent);
  swift_task_dealloc(v8);
  AsyncStream.makeAsyncIterator()(v3);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  swift_beginAccess(v7, v0 + 8, 0, 0);
  v9 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[30] = v9;
  *v9 = v0;
  v9[1] = sub_1000CB620;
  return AsyncStream.Iterator.next(isolation:)(v0 + 11, 0, 0, v0[27]);
}

uint64_t sub_1000CB620()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 240));
  return swift_task_switch(sub_1000CB674, 0, 0);
}

uint64_t sub_1000CB674()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t Strong;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 96);
  if (v1 == 1)
  {
    v2 = *(_QWORD *)(v0 + 232);
    v3 = *(_QWORD *)(v0 + 208);
    v4 = *(_QWORD *)(v0 + 184);
    v5 = *(_QWORD *)(v0 + 160);
    v6 = *(_QWORD *)(v0 + 136);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 224) + 8))(v2, *(_QWORD *)(v0 + 216));
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 112) + 16;
    sub_1000CB9AC(*(_QWORD *)(v0 + 88), v1);
    Strong = swift_weakLoadStrong(v8);
    if (Strong)
    {
      v10 = Strong;
      v11 = *(_QWORD *)(v0 + 160);
      v12 = *(_QWORD *)(v0 + 136);
      v24 = *(_QWORD *)(v0 + 152);
      v25 = *(_QWORD *)(v0 + 144);
      v13 = *(_QWORD *)(v0 + 120);
      v23 = *(_QWORD *)(v0 + 128);
      v14 = sub_100005494();
      v15 = (void *)static OS_dispatch_queue.main.getter(v14);
      *(_QWORD *)(v0 + 48) = sub_1000CB9C0;
      *(_QWORD *)(v0 + 56) = v10;
      *(_QWORD *)(v0 + 16) = _NSConcreteStackBlock;
      *(_QWORD *)(v0 + 24) = 1107296256;
      *(_QWORD *)(v0 + 32) = sub_100005350;
      *(_QWORD *)(v0 + 40) = &unk_10014D4B8;
      v16 = _Block_copy((const void *)(v0 + 16));
      v17 = *(_QWORD *)(v0 + 56);
      swift_retain(v10);
      v18 = swift_release(v17);
      static DispatchQoS.unspecified.getter(v18);
      *(_QWORD *)(v0 + 104) = _swiftEmptyArrayStorage;
      v19 = sub_100012ED8();
      v20 = sub_100004FC8((uint64_t *)&unk_100156F40);
      v21 = sub_10000551C();
      dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 104, v20, v21, v13, v19);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v12, v16);
      _Block_release(v16);

      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v12, v13);
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v11, v25);
      swift_release(v10);
    }
    v22 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    *(_QWORD *)(v0 + 240) = v22;
    *v22 = v0;
    v22[1] = sub_1000CB620;
    return AsyncStream.Iterator.next(isolation:)(v0 + 88, 0, 0, *(_QWORD *)(v0 + 216));
  }
}

uint64_t sub_1000CB8B4(uint64_t a1)
{
  sub_100007C2C((_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 64));
  type metadata accessor for PrimarySettingsListModel(0);
  return sub_100103798((uint64_t)"Device Supervision", 18, 2);
}

uint64_t sub_1000CB918()
{
  uint64_t v0;

  sub_10000BAE4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  sub_100005474((_QWORD *)(v0 + 40));
  return swift_deallocClassInstance(v0, 80, 7);
}

uint64_t type metadata accessor for SupervisedDeviceSectionModelProvider()
{
  return objc_opt_self(_TtC11SettingsApp36SupervisedDeviceSectionModelProvider);
}

uint64_t sub_1000CB968@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  _BYTE v4[96];

  sub_1000CBC20(*v1, (uint64_t)v4);
  return sub_10006F728((uint64_t)v4, a1);
}

void sub_1000CB9A4(uint64_t a1)
{
  uint64_t v1;

  sub_1000C4AE8(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1000CB9AC(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_bridgeObjectRelease(a2);
  return result;
}

uint64_t sub_1000CB9C0()
{
  uint64_t v0;

  return sub_1000CB8B4(v0);
}

void sub_1000CB9C8()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  void *v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  _QWORD v19[5];
  __int128 v20;
  __int128 v21;

  v0 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v16 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = objc_msgSend((id)objc_opt_self(MCProfileConnection), "sharedConnection");
  if (v3)
  {
    v4 = v3;
    v5 = objc_msgSend(v3, "cloudConfigurationDetails");

    if (v5)
    {
      v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v5, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(kMCCCOrganizationNameKey);
      v18 = v7;
      AnyHashable.init<A>(_:)(v19, &v17, &type metadata for String, &protocol witness table for String);
      if (*(_QWORD *)(v6 + 16) && (v8 = sub_1000DA95C((uint64_t)v19), (v9 & 1) != 0))
      {
        sub_1000148AC(*(_QWORD *)(v6 + 56) + 32 * v8, (uint64_t)&v20);
      }
      else
      {
        v20 = 0u;
        v21 = 0u;
      }
      swift_bridgeObjectRelease(v6);
      sub_100014878((uint64_t)v19);
      if (*((_QWORD *)&v21 + 1))
      {
        if ((swift_dynamicCast(&v17, &v20, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
        {
          v10 = v17;
          v11 = v18;
          LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(50, 1);
          v12._countAndFlagsBits = 0xD000000000000032;
          v12._object = (void *)0x8000000100126670;
          LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v12);
          v13._countAndFlagsBits = v10;
          v13._object = v11;
          LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v13);
          swift_bridgeObjectRelease(v11);
          v14._countAndFlagsBits = 0;
          v14._object = (void *)0xE000000000000000;
          LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v14);
          v15 = LocalizedStringKey.init(stringInterpolation:)(v2);
LABEL_12:
          Text.init(_:tableName:bundle:comment:)(v15);
          return;
        }
      }
      else
      {
        sub_10000BFF4((uint64_t)&v20);
      }
      v15 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000019, 0x8000000100126650);
      goto LABEL_12;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_1000CBC20(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  unsigned int v5;
  id v6;
  void *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _QWORD *v17;

  v4 = objc_msgSend((id)objc_opt_self(PSLaunchTracker), "sharedInstance");
  v5 = objc_msgSend(v4, "launchHasCompleted");

  if (!v5)
    goto LABEL_5;
  v6 = objc_msgSend((id)objc_opt_self(MCProfileConnection), "sharedConnection");
  if (v6)
  {
    v7 = v6;
    v8 = objc_msgSend(v6, "isSupervised");

    if (v8)
    {
      v9 = *(_QWORD *)(a1 + 16);
      v10 = *(_QWORD *)(a1 + 24);
      v11 = *(unsigned __int8 *)(a1 + 32);
      sub_10000BA8C(v9, v10, v11);
      sub_1000CB9C8();
      v16 = v15 & 1;
      v17 = _swiftEmptyArrayStorage;
LABEL_6:
      *(_QWORD *)a2 = v9;
      *(_QWORD *)(a2 + 8) = v10;
      *(_QWORD *)(a2 + 16) = v11;
      *(_OWORD *)(a2 + 24) = 0u;
      *(_OWORD *)(a2 + 40) = 0u;
      *(_QWORD *)(a2 + 56) = v12;
      *(_QWORD *)(a2 + 64) = v13;
      *(_QWORD *)(a2 + 72) = v16;
      *(_QWORD *)(a2 + 80) = v14;
      *(_QWORD *)(a2 + 88) = v17;
      return;
    }
LABEL_5:
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v16 = 0;
    v14 = 0;
    v17 = 0;
    goto LABEL_6;
  }
  __break(1u);
}

ValueMetadata *type metadata accessor for AboutSecurityResearchDeviceRepresentable()
{
  return &type metadata for AboutSecurityResearchDeviceRepresentable;
}

uint64_t sub_1000CBD4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000CBE10();
  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000CBD9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000CBE10();
  return static UIViewControllerRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_1000CBDEC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000CBE10();
  UIViewControllerRepresentable.body.getter(a1, v2);
  __break(1u);
}

unint64_t sub_1000CBE10()
{
  unint64_t result;

  result = qword_10015BCD0;
  if (!qword_10015BCD0)
  {
    result = swift_getWitnessTable(&unk_10011A8AC, &type metadata for AboutSecurityResearchDeviceRepresentable);
    atomic_store(result, (unint64_t *)&qword_10015BCD0);
  }
  return result;
}

id sub_1000CBE54()
{
  void *v0;
  id v1;
  Swift::String v2;
  Swift::String v3;
  void *object;
  id v5;
  Swift::String v6;
  Swift::String v7;
  void *v8;
  id v9;
  NSString v10;
  NSString v11;
  id v12;
  Swift::String v14;
  Swift::String v15;

  v0 = (void *)objc_opt_self(NSBundle);
  v1 = objc_msgSend(v0, "mainBundle");
  v2._countAndFlagsBits = 0xD00000000000001ELL;
  v14._countAndFlagsBits = 0xD000000000000021;
  v14._object = (void *)0x8000000100122910;
  v2._object = (void *)0x8000000100126700;
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v2, (Swift::String_optional)0, (NSBundle)v1, v3, v14)._object;

  v5 = objc_msgSend(v0, "mainBundle");
  v6._countAndFlagsBits = 0xD000000000000016;
  v15._object = (void *)0x8000000100120020;
  v6._object = (void *)0x8000000100126720;
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v15._countAndFlagsBits = 0xD000000000000010;
  v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v6, (Swift::String_optional)0, (NSBundle)v5, v7, v15)._object;

  v9 = objc_allocWithZone((Class)OBWelcomeController);
  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v8);
  v12 = objc_msgSend(v9, "initWithTitle:detailText:icon:", v10, v11, 0);

  return v12;
}

ValueMetadata *type metadata accessor for InternetAccountsSettingsURLRoute()
{
  return &type metadata for InternetAccountsSettingsURLRoute;
}

uint64_t sub_1000CBFEC()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::Int v17;
  uint64_t result;
  uint64_t v19;

  v0 = sub_100004FC8(&qword_100157360);
  inited = swift_initStackObject(v0, &v19);
  *(_OWORD *)(inited + 16) = xmmword_10011A980;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(ACAccountTypeIdentifierSubscribedCalendar);
  *(_QWORD *)(inited + 40) = v2;
  *(_QWORD *)(inited + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)(ACAccountTypeIdentifierCalDAV);
  *(_QWORD *)(inited + 56) = v3;
  *(_QWORD *)(inited + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)(ACAccountTypeIdentifierCardDAV);
  *(_QWORD *)(inited + 72) = v4;
  *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(ACAccountTypeIdentifierIMAP);
  *(_QWORD *)(inited + 88) = v5;
  *(_QWORD *)(inited + 96) = static String._unconditionallyBridgeFromObjectiveC(_:)(ACAccountTypeIdentifierPOP);
  *(_QWORD *)(inited + 104) = v6;
  *(_QWORD *)(inited + 112) = static String._unconditionallyBridgeFromObjectiveC(_:)(ACAccountTypeIdentifierExchange);
  *(_QWORD *)(inited + 120) = v7;
  *(_QWORD *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)(ACAccountTypeIdentifierHotmail);
  *(_QWORD *)(inited + 136) = v8;
  *(_QWORD *)(inited + 144) = static String._unconditionallyBridgeFromObjectiveC(_:)(ACAccountTypeIdentifierLDAP);
  *(_QWORD *)(inited + 152) = v9;
  *(_QWORD *)(inited + 160) = static String._unconditionallyBridgeFromObjectiveC(_:)(ACAccountTypeIdentifierGmail);
  *(_QWORD *)(inited + 168) = v10;
  *(_QWORD *)(inited + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)(ACAccountTypeIdentifierYahoo);
  *(_QWORD *)(inited + 184) = v11;
  *(_QWORD *)(inited + 192) = static String._unconditionallyBridgeFromObjectiveC(_:)(ACAccountTypeIdentifierAol);
  *(_QWORD *)(inited + 200) = v12;
  *(_QWORD *)(inited + 208) = static String._unconditionallyBridgeFromObjectiveC(_:)(ACAccountTypeIdentifierAppleAccount);
  *(_QWORD *)(inited + 216) = v13;
  *(_QWORD *)(inited + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)(ACAccountTypeIdentifier163);
  *(_QWORD *)(inited + 232) = v14;
  *(_QWORD *)(inited + 240) = static String._unconditionallyBridgeFromObjectiveC(_:)(ACAccountTypeIdentifier126);
  *(_QWORD *)(inited + 248) = v15;
  *(_QWORD *)(inited + 256) = static String._unconditionallyBridgeFromObjectiveC(_:)(ACAccountTypeIdentifierQQ);
  *(_QWORD *)(inited + 264) = v16;
  v17 = sub_1000559A0(inited);
  swift_setDeallocating(inited);
  result = swift_arrayDestroy(inited + 32, 15, &type metadata for String);
  qword_10015BCD8 = v17;
  return result;
}

uint64_t sub_1000CC19C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;
  void *object;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t (*v56)(char *, unint64_t, uint64_t);
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  char *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD v101[4];

  v2 = sub_100004FC8(&qword_10015C510);
  __chkstk_darwin(v2);
  v91 = (char *)&v87 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = type metadata accessor for URLQueryItem(0);
  v94 = *(_QWORD *)(v92 - 8);
  v4 = __chkstk_darwin(v92);
  v6 = (char *)&v87 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v93 = (char *)&v87 - v7;
  v8 = sub_100004FC8(&qword_1001570F0);
  __chkstk_darwin(v8);
  v10 = (char *)&v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for URLComponents(0);
  v12 = *(_QWORD *)(v11 - 8);
  v96 = v11;
  v97 = v12;
  __chkstk_darwin(v11);
  v95 = (char *)&v87 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100004FC8(&qword_10015BCE0);
  v15 = __chkstk_darwin(v14);
  v89 = (char *)&v87 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v90 = (char *)&v87 - v18;
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v87 - v20;
  __chkstk_darwin(v19);
  v23 = (char *)&v87 - v22;
  v24 = type metadata accessor for URL(0);
  v25 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v27 = (char *)&v87 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_100019DF4((uint64_t)v27);
  URL.scheme.getter(v28);
  if (!v29)
    goto LABEL_27;
  v30 = v29;
  v98 = v24;
  v99 = v25;
  v100 = a1;
  v31 = String.lowercased()();
  object = v31._object;
  swift_bridgeObjectRelease(v30);
  if (v31._countAndFlagsBits == 0xD000000000000013 && v31._object == (void *)0x800000010011F0D0
    || (v33 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x800000010011F0D0, v31._countAndFlagsBits, v31._object, 0), (v33 & 1) != 0))
  {
    v34 = URL.pathComponents.getter();
    v35 = v34;
    v36 = *(_QWORD *)(v34 + 16);
    v37 = v99;
    if (v36)
    {
      v88 = v31._object;
      swift_bridgeObjectRetain(v34);
      v38 = (_QWORD *)(v35 + 40);
      while (1)
      {
        v40 = *(v38 - 1);
        v39 = *v38;
        swift_bridgeObjectRetain(*v38);
        UUID.init(uuidString:)(v40, v39);
        v41 = type metadata accessor for UUID(0);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 48))(v21, 1, v41) != 1)
          break;
        v38 += 2;
        sub_10000BA50((uint64_t)v21, &qword_10015BCE0);
        swift_bridgeObjectRelease(v39);
        if (!--v36)
        {
          swift_bridgeObjectRelease(v35);
          object = v88;
          goto LABEL_10;
        }
      }
      sub_10000BA50((uint64_t)v21, &qword_10015BCE0);
      swift_bridgeObjectRelease_n(v35, 2);
      swift_bridgeObjectRetain(v39);
      UUID.init(uuidString:)(v40, v39);
      swift_bridgeObjectRelease(v88);
      swift_bridgeObjectRelease_n(v39, 2);
    }
    else
    {
LABEL_10:
      swift_bridgeObjectRelease(v35);
      v42 = type metadata accessor for UUID(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v23, 1, 1, v42);
      swift_bridgeObjectRelease(object);
    }
    (*(void (**)(char *, uint64_t))(v37 + 8))(v27, v98);
    return sub_1000CFB54((uint64_t)v23, v100);
  }
  if (v31._countAndFlagsBits != 0x7366657270 || v31._object != (void *)0xE500000000000000)
  {
    v33 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7366657270, 0xE500000000000000, v31._countAndFlagsBits, v31._object, 0);
    if ((v33 & 1) == 0)
    {
      swift_bridgeObjectRelease(v31._object);
      v25 = v99;
      a1 = v100;
      v24 = v98;
LABEL_27:
      (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v24);
      goto LABEL_28;
    }
  }
  v43 = URL.absoluteString.getter(v33);
  v45 = v44;
  URLComponents.init(string:)(v43);
  swift_bridgeObjectRelease(v45);
  v47 = v96;
  v46 = v97;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v97 + 48))(v10, 1, v96) == 1)
  {
    swift_bridgeObjectRelease(v31._object);
    (*(void (**)(char *, uint64_t))(v99 + 8))(v27, v98);
    sub_10000BA50((uint64_t)v10, &qword_1001570F0);
    a1 = v100;
LABEL_28:
    v70 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 56))(a1, 1, 1, v70);
  }
  v49 = v95;
  v50 = (*(uint64_t (**)(char *, char *, uint64_t))(v46 + 32))(v95, v10, v47);
  v51 = URLComponents.percentEncodedQueryItems.getter(v50);
  a1 = v100;
  if (!v51)
  {
    swift_bridgeObjectRelease(v31._object);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v49, v47);
    (*(void (**)(char *, uint64_t))(v99 + 8))(v27, v98);
    goto LABEL_28;
  }
  v52 = v51;
  v88 = v31._object;
  v53 = *(_QWORD *)(v51 + 16);
  if (v53)
  {
    v54 = v94;
    v55 = v51 + ((*(unsigned __int8 *)(v94 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80));
    v87 = *(_QWORD *)(v94 + 72);
    v56 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v94 + 16);
    v57 = v51;
    swift_bridgeObjectRetain(v51);
    v58 = v92;
    while (1)
    {
      v59 = v56(v6, v55, v58);
      v60 = URLQueryItem.name.getter(v59);
      v62 = v61;
      if (v60 == 1752457584 && v61 == 0xE400000000000000)
      {
        v52 = v57;
        swift_bridgeObjectRelease(v57);
        v71 = 0xE400000000000000;
        goto LABEL_34;
      }
      v63 = _stringCompareWithSmolCheck(_:_:expecting:)(v60, v61, 1752457584, 0xE400000000000000, 0);
      swift_bridgeObjectRelease(v62);
      if ((v63 & 1) != 0)
        break;
      (*(void (**)(char *, uint64_t))(v54 + 8))(v6, v58);
      v55 += v87;
      if (!--v53)
      {
        v52 = v57;
        swift_bridgeObjectRelease(v57);
        v64 = 1;
        v65 = v54;
        v67 = v98;
        v66 = v99;
        v47 = v96;
        v68 = v93;
        v69 = (uint64_t)v91;
        a1 = v100;
        goto LABEL_35;
      }
    }
    v52 = v57;
    v71 = v57;
LABEL_34:
    v67 = v98;
    v47 = v96;
    v69 = (uint64_t)v91;
    a1 = v100;
    swift_bridgeObjectRelease(v71);
    (*(void (**)(uint64_t, char *, uint64_t))(v54 + 32))(v69, v6, v58);
    v64 = 0;
    v65 = v54;
    v66 = v99;
    v68 = v93;
  }
  else
  {
    v64 = 1;
    v67 = v98;
    v66 = v99;
    v58 = v92;
    v68 = v93;
    v65 = v94;
    v69 = (uint64_t)v91;
  }
LABEL_35:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v65 + 56))(v69, v64, 1, v58);
  swift_bridgeObjectRelease(v52);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v65 + 48))(v69, 1, v58) == 1)
  {
    swift_bridgeObjectRelease(v88);
    (*(void (**)(char *, uint64_t))(v97 + 8))(v95, v47);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v27, v67);
    sub_10000BA50(v69, &qword_10015C510);
    goto LABEL_28;
  }
  v72 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v65 + 32))(v68, v69, v58);
  v73 = URLQueryItem.value.getter(v72);
  if (v74)
  {
    v75 = v74;
    v101[2] = v73;
    v101[3] = v74;
    v101[0] = 47;
    v101[1] = 0xE100000000000000;
    v76 = sub_100008A5C();
    v77 = StringProtocol.components<A>(separatedBy:)(v101, &type metadata for String, &type metadata for String, v76, v76);
    swift_bridgeObjectRelease(v75);
    v78 = *(_QWORD *)(v77 + 16);
    if (v78)
    {
      swift_bridgeObjectRetain(v77);
      v79 = (_QWORD *)(v77 + 40);
      v80 = (uint64_t)v89;
      while (1)
      {
        v82 = *(v79 - 1);
        v81 = *v79;
        swift_bridgeObjectRetain(*v79);
        UUID.init(uuidString:)(v82, v81);
        v83 = type metadata accessor for UUID(0);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v83 - 8) + 48))(v80, 1, v83) != 1)
          break;
        v79 += 2;
        sub_10000BA50(v80, &qword_10015BCE0);
        swift_bridgeObjectRelease(v81);
        if (!--v78)
        {
          swift_bridgeObjectRelease(v77);
          v67 = v98;
          v66 = v99;
          v47 = v96;
          v68 = v93;
          goto LABEL_43;
        }
      }
      sub_10000BA50(v80, &qword_10015BCE0);
      swift_bridgeObjectRelease_n(v77, 2);
      swift_bridgeObjectRetain(v81);
      v85 = (uint64_t)v90;
      UUID.init(uuidString:)(v82, v81);
      swift_bridgeObjectRelease(v88);
      swift_bridgeObjectRelease_n(v81, 2);
      (*(void (**)(char *, uint64_t))(v94 + 8))(v93, v58);
      (*(void (**)(char *, uint64_t))(v97 + 8))(v95, v96);
      (*(void (**)(char *, uint64_t))(v99 + 8))(v27, v98);
    }
    else
    {
LABEL_43:
      swift_bridgeObjectRelease(v77);
      v84 = type metadata accessor for UUID(0);
      v85 = (uint64_t)v90;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v84 - 8) + 56))(v90, 1, 1, v84);
      swift_bridgeObjectRelease(v88);
      (*(void (**)(char *, uint64_t))(v94 + 8))(v68, v58);
      (*(void (**)(char *, uint64_t))(v97 + 8))(v95, v47);
      (*(void (**)(char *, uint64_t))(v66 + 8))(v27, v67);
    }
  }
  else
  {
    swift_bridgeObjectRelease(v88);
    (*(void (**)(char *, uint64_t))(v65 + 8))(v68, v58);
    (*(void (**)(char *, uint64_t))(v97 + 8))(v95, v47);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v27, v67);
    v86 = type metadata accessor for UUID(0);
    v85 = (uint64_t)v90;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v86 - 8) + 56))(v90, 1, 1, v86);
  }
  return sub_1000CFB54(v85, a1);
}

void sub_1000CCAEC(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  _BOOL4 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  char v55;
  _UNKNOWN **v56;
  char v57;
  _UNKNOWN **v58;
  uint64_t v59;
  unint64_t v60;
  Swift::String v61;
  void *object;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  void (*v76)(char *, uint64_t);
  Swift::Int v77;
  uint64_t v78;
  void (*v79)(char *, uint64_t, uint64_t);
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  void (*v84)(char *, uint64_t);
  uint64_t v85;
  unint64_t v86;
  Swift::String v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  NSObject *v95;
  os_log_type_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  void (*v105)(char *, uint64_t);
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  NSObject *v114;
  os_log_type_t v115;
  uint64_t v116;
  uint8_t *v117;
  uint8_t *v118;
  char *v119;
  uint64_t v120;
  int *v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  char *v141;
  unint64_t v142;
  unint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  void *v148;
  void *v149;
  Swift::String v150;
  char *v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  NSObject *v161;
  os_log_type_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  void (*v170)(char *, uint64_t);
  void (*v171)(char *, uint64_t, uint64_t);
  char *v172;
  char *v173;
  uint64_t v174;
  char *v175;
  void (*v176)(char *, uint64_t);
  void (*v177)(char *, uint64_t);
  void (*v178)(char *, uint64_t);
  void (*v179)(char *, uint64_t);
  uint64_t v180;
  uint64_t v181;
  char *v182;
  char *v183;
  char *v184;
  char *v185;
  char *v186;
  char *v187;
  char *v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  char *v192;
  char *v193;
  char *v194;
  char *v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  char *v199;
  char *v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;

  v201 = a2;
  v202 = a1;
  v2 = sub_100004FC8(&qword_1001570F0);
  __chkstk_darwin(v2);
  v186 = (char *)&v180 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100004FC8(&qword_10015BCE0);
  __chkstk_darwin(v4);
  v191 = (uint64_t)&v180 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v180 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v196 = type metadata accessor for SettingsURLDestination.Action(0);
  __chkstk_darwin(v196);
  v197 = (char *)&v180 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004FC8((uint64_t *)&unk_10015C9A0);
  v12 = __chkstk_darwin(v11);
  v183 = (char *)&v180 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v192 = (char *)&v180 - v15;
  __chkstk_darwin(v14);
  v199 = (char *)&v180 - v16;
  v205 = type metadata accessor for URLComponents(0);
  v17 = *(_QWORD *)(v205 - 8);
  v18 = __chkstk_darwin(v205);
  v187 = (char *)&v180 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v21 = (char *)&v180 - v20;
  v22 = type metadata accessor for URL(0);
  v203 = *(_QWORD *)(v22 - 8);
  v23 = __chkstk_darwin(v22);
  v184 = (char *)&v180 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v23);
  v182 = (char *)&v180 - v26;
  v27 = __chkstk_darwin(v25);
  v193 = (char *)&v180 - v28;
  v29 = __chkstk_darwin(v27);
  v185 = (char *)&v180 - v30;
  v31 = __chkstk_darwin(v29);
  v200 = (char *)&v180 - v32;
  v33 = __chkstk_darwin(v31);
  v195 = (char *)&v180 - v34;
  v35 = __chkstk_darwin(v33);
  v190 = (char *)&v180 - v36;
  __chkstk_darwin(v35);
  v38 = (char *)&v180 - v37;
  if (qword_100156CB0 != -1)
    swift_once(&qword_100156CB0, sub_10008BE28);
  v39 = type metadata accessor for Logger(0);
  v198 = sub_100007808(v39, (uint64_t)qword_10015D2C8);
  v40 = Logger.logObject.getter(v198);
  v41 = static os_log_type_t.default.getter();
  v42 = os_log_type_enabled(v40, v41);
  v206 = v38;
  if (v42)
  {
    v43 = swift_slowAlloc(22, -1);
    v189 = v7;
    v44 = v43;
    v45 = swift_slowAlloc(64, -1);
    v194 = v21;
    v181 = v22;
    v46 = v45;
    v208 = v45;
    *(_DWORD *)v44 = 136315394;
    v188 = v9;
    v207 = sub_1000DA1F0(0xD000000000000025, 0x8000000100126740, &v208);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v207, &v208, v44 + 4, v44 + 12);
    *(_WORD *)(v44 + 12) = 2080;
    v207 = sub_1000DA1F0(0xD000000000000026, 0x800000010011FD10, &v208);
    v9 = v188;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v207, &v208, v44 + 14, v44 + 22);
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "Start (%s.%s)…", (uint8_t *)v44, 0x16u);
    swift_arrayDestroy(v46, 2, (char *)&type metadata for Any + 8);
    v47 = v46;
    v48 = v181;
    v49 = v202;
    v21 = v194;
    v50 = (uint64_t)v206;
    swift_slowDealloc(v47, -1, -1);
    v51 = v44;
    v7 = v189;
    swift_slowDealloc(v51, -1, -1);

  }
  else
  {

    v50 = (uint64_t)v38;
    v48 = v22;
    v49 = v202;
  }
  v204 = v17;
  v52 = sub_100019DF4(v50);
  URLComponents.init()(v52);
  URLComponents.scheme.setter(0xD000000000000013, 0x800000010011F0D0);
  v53 = sub_1000CE918();
  v54 = v203;
  if ((v53 & 1) != 0)
  {
    URLComponents.host.setter(0xD000000000000017, 0x800000010011FA20);
    sub_1000CF104();
    if ((v55 & 1) != 0)
      v56 = &off_100148110;
    else
      v56 = &off_100148150;
    v208 = (uint64_t)v56;
    v59 = sub_100004FC8(&qword_100157350);
    v60 = sub_10000F228();
    v61._countAndFlagsBits = BidirectionalCollection<>.joined(separator:)(47, 0xE100000000000000, v59, v60);
    object = v61._object;
    v208 = 47;
    v209 = 0xE100000000000000;
    String.append(_:)(v61);
    swift_bridgeObjectRelease(object);
    v63 = URLComponents.path.setter(v208, v209);
    v64 = (uint64_t)v199;
    v65 = v200;
    URLComponents.url.getter(v63);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v64, 1, v48) == 1)
    {
      sub_10000BA50(v64, (uint64_t *)&unk_10015C9A0);
      v66 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v54 + 16))(v65, v49, v48);
      v67 = Logger.logObject.getter(v66);
      v68 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v67, v68))
      {
        v69 = swift_slowAlloc(22, -1);
        v70 = swift_slowAlloc(32, -1);
        v194 = v21;
        v71 = v70;
        *(_DWORD *)v69 = 141558275;
        v207 = 1752392040;
        v208 = v70;
        v72 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v207, &v208, v69 + 4, v69 + 12);
        *(_WORD *)(v69 + 12) = 2081;
        v73 = URL.absoluteString.getter(v72);
        v75 = v74;
        v207 = sub_1000DA1F0(v73, v74, &v208);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v207, &v208, v69 + 14, v69 + 22);
        swift_bridgeObjectRelease(v75);
        v76 = *(void (**)(char *, uint64_t))(v54 + 8);
        v76(v65, v48);
        _os_log_impl((void *)&_mh_execute_header, v67, v68, "Could not create re-direct URL for Internet Accounts for input URL %{private,mask.hash}s", (uint8_t *)v69, 0x16u);
        swift_arrayDestroy(v71, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v71, -1, -1);
        swift_slowDealloc(v69, -1, -1);

        (*(void (**)(char *, uint64_t))(v204 + 8))(v194, v205);
LABEL_23:
        v76(v206, v48);
        goto LABEL_34;
      }

      v105 = *(void (**)(char *, uint64_t))(v54 + 8);
      v105(v65, v48);
      (*(void (**)(char *, uint64_t))(v204 + 8))(v21, v205);
      goto LABEL_33;
    }
    v79 = *(void (**)(char *, uint64_t, uint64_t))(v54 + 32);
    v80 = v190;
    v79(v190, v64, v48);
    v81 = v195;
    (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v195, v80, v48);
    v82 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    v83 = v197;
    swift_storeEnumTagMultiPayload(v197, v82, 52);
    swift_storeEnumTagMultiPayload(v83, v196, 1);
    v84 = *(void (**)(char *, uint64_t))(v54 + 8);
    v84(v80, v48);
    (*(void (**)(char *, uint64_t))(v204 + 8))(v21, v205);
LABEL_30:
    v84(v206, v48);
    v121 = (int *)type metadata accessor for SettingsURLDestination(0);
    v122 = v201;
    v123 = &v201[v121[7]];
    v79(v201, (uint64_t)v81, v48);
    v124 = (uint64_t)&v122[v121[5]];
    v125 = (uint64_t)v83;
    goto LABEL_31;
  }
  if ((sub_1000CF4E0() & 1) != 0)
  {
    URLComponents.host.setter(0xD000000000000017, 0x800000010011FA20);
    sub_1000CF104();
    if ((v57 & 1) != 0)
      v58 = &off_100148190;
    else
      v58 = &off_1001481E0;
    v208 = (uint64_t)v58;
    v85 = sub_100004FC8(&qword_100157350);
    v86 = sub_10000F228();
    v87._countAndFlagsBits = BidirectionalCollection<>.joined(separator:)(47, 0xE100000000000000, v85, v86);
    v88 = v87._object;
    v208 = 47;
    v209 = 0xE100000000000000;
    String.append(_:)(v87);
    swift_bridgeObjectRelease(v88);
    v89 = URLComponents.path.setter(v208, v209);
    v90 = (uint64_t)v192;
    v91 = v193;
    URLComponents.url.getter(v89);
    v92 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v90, 1, v48);
    v93 = v204;
    if (v92 == 1)
    {
      sub_10000BA50(v90, (uint64_t *)&unk_10015C9A0);
      v94 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v54 + 16))(v91, v49, v48);
      v95 = Logger.logObject.getter(v94);
      v96 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v95, v96))
      {
        v97 = v93;
        v98 = swift_slowAlloc(22, -1);
        v99 = swift_slowAlloc(32, -1);
        v194 = v21;
        v100 = v99;
        *(_DWORD *)v98 = 141558275;
        v207 = 1752392040;
        v208 = v99;
        v101 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v207, &v208, v98 + 4, v98 + 12);
        *(_WORD *)(v98 + 12) = 2081;
        v102 = URL.absoluteString.getter(v101);
        v104 = v103;
        v207 = sub_1000DA1F0(v102, v103, &v208);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v207, &v208, v98 + 14, v98 + 22);
        swift_bridgeObjectRelease(v104);
        v76 = *(void (**)(char *, uint64_t))(v203 + 8);
        v76(v91, v48);
        _os_log_impl((void *)&_mh_execute_header, v95, v96, "Could not create re-direct URL for Internet Accounts for input URL %{private,mask.hash}s", (uint8_t *)v98, 0x16u);
        swift_arrayDestroy(v100, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v100, -1, -1);
        swift_slowDealloc(v98, -1, -1);

        (*(void (**)(char *, uint64_t))(v97 + 8))(v194, v205);
        goto LABEL_23;
      }

      v105 = *(void (**)(char *, uint64_t))(v54 + 8);
      v105(v91, v48);
      (*(void (**)(char *, uint64_t))(v93 + 8))(v21, v205);
LABEL_33:
      v105(v206, v48);
      goto LABEL_34;
    }
    v79 = *(void (**)(char *, uint64_t, uint64_t))(v54 + 32);
    v119 = v185;
    v79(v185, v90, v48);
    v81 = v195;
    (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v195, v119, v48);
    v120 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    v83 = v197;
    swift_storeEnumTagMultiPayload(v197, v120, 52);
    swift_storeEnumTagMultiPayload(v83, v196, 1);
    v84 = *(void (**)(char *, uint64_t))(v54 + 8);
    v84(v119, v48);
    (*(void (**)(char *, uint64_t))(v93 + 8))(v21, v205);
    goto LABEL_30;
  }
  v77 = sub_1000559A0((uint64_t)&off_100148220);
  swift_arrayDestroy(&unk_100148240, 2, &type metadata for String);
  v78 = v191;
  sub_1000CC19C(v191);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v78, 1, v6) == 1)
  {
    swift_bridgeObjectRelease(v77);
    (*(void (**)(char *, uint64_t))(v204 + 8))(v21, v205);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v206, v48);
    sub_10000BA50(v78, &qword_10015BCE0);
LABEL_34:
    v127 = sub_100004FC8(&qword_1001570F8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v127 - 8) + 56))(v201, 1, 1, v127);
    goto LABEL_35;
  }
  v106 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 32))(v9, v78, v6);
  v107 = URL.absoluteString.getter(v106);
  v108 = v9;
  v110 = v109;
  v111 = (uint64_t)v186;
  URLComponents.init(string:)(v107);
  swift_bridgeObjectRelease(v110);
  v112 = v204;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v204 + 48))(v111, 1, v205) == 1)
  {
    swift_bridgeObjectRelease(v77);
    v113 = sub_10000BA50(v111, &qword_1001570F0);
    v114 = Logger.logObject.getter(v113);
    v115 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v114, v115))
    {
      v116 = v7;
      v117 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v117 = 0;
      _os_log_impl((void *)&_mh_execute_header, v114, v115, "Could not retrieve original path for Internet Accounts.", v117, 2u);
      v118 = v117;
      v7 = v116;
      swift_slowDealloc(v118, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v108, v6);
    (*(void (**)(char *, uint64_t))(v204 + 8))(v21, v205);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v206, v48);
    goto LABEL_34;
  }
  v189 = v7;
  v200 = (char *)v6;
  v128 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v112 + 32))(v187, v111, v205);
  v129 = URLComponents.queryItems.getter(v128);
  if (v129)
    v130 = (_QWORD *)v129;
  else
    v130 = _swiftEmptyArrayStorage;
  v131 = sub_1000CDD74((uint64_t)v130, v77);
  swift_bridgeObjectRelease(v130);
  swift_bridgeObjectRelease(v77);
  v132 = URLComponents.host.setter(0xD000000000000017, 0x800000010011FA20);
  v133 = URL.pathComponents.getter(v132);
  v134 = *(_QWORD *)(v133 + 16);
  v208 = (uint64_t)&off_100148260;
  sub_100105C98(v133, v133 + 32, v134 != 0, (2 * v134) | 1);
  v135 = swift_bridgeObjectRelease(v133);
  v136 = (_QWORD *)v208;
  v188 = v108;
  v137 = UUID.uuidString.getter(v135);
  v139 = v138;
  if ((swift_isUniquelyReferenced_nonNull_native(v136) & 1) != 0)
  {
    v140 = v206;
    v141 = v21;
  }
  else
  {
    v140 = v206;
    v141 = v21;
    v136 = sub_100052940(0, v136[2] + 1, 1, v136);
  }
  v143 = v136[2];
  v142 = v136[3];
  if (v143 >= v142 >> 1)
    v136 = sub_100052940((_QWORD *)(v142 > 1), v143 + 1, 1, v136);
  v136[2] = v143 + 1;
  v144 = &v136[2 * v143];
  v144[4] = v137;
  v144[5] = v139;
  v208 = (uint64_t)v136;
  v145 = sub_100004FC8(&qword_100157350);
  v146 = sub_10000F228();
  v147 = BidirectionalCollection<>.joined(separator:)(47, 0xE100000000000000, v145, v146);
  v149 = v148;
  swift_bridgeObjectRelease(v136);
  v208 = 47;
  v209 = 0xE100000000000000;
  v150._countAndFlagsBits = v147;
  v150._object = v149;
  String.append(_:)(v150);
  swift_bridgeObjectRelease(v149);
  v151 = v141;
  URLComponents.path.setter(v208, v209);
  if (*((_QWORD *)v131 + 2))
    v152 = URLComponents.queryItems.setter(v131);
  else
    v152 = swift_bridgeObjectRelease(v131);
  v153 = v140;
  v154 = v203;
  v155 = (uint64_t)v183;
  URLComponents.url.getter(v152);
  v156 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v154 + 48))(v155, 1, v48);
  v157 = v204;
  v158 = v205;
  v159 = v184;
  if (v156 == 1)
  {
    sub_10000BA50(v155, (uint64_t *)&unk_10015C9A0);
    v160 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v154 + 16))(v159, v202, v48);
    v161 = Logger.logObject.getter(v160);
    v162 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v161, v162))
    {

      v178 = *(void (**)(char *, uint64_t))(v154 + 8);
      v178(v159, v48);
      v179 = *(void (**)(char *, uint64_t))(v204 + 8);
      v179(v187, v158);
      (*(void (**)(char *, char *))(v189 + 8))(v188, v200);
      v179(v151, v158);
      v178(v153, v48);
      goto LABEL_34;
    }
    v163 = swift_slowAlloc(22, -1);
    v164 = swift_slowAlloc(32, -1);
    v194 = v151;
    v165 = v164;
    *(_DWORD *)v163 = 141558275;
    v207 = 1752392040;
    v208 = v164;
    v166 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v207, &v208, v163 + 4, v163 + 12);
    *(_WORD *)(v163 + 12) = 2081;
    v167 = URL.absoluteString.getter(v166);
    v169 = v168;
    v207 = sub_1000DA1F0(v167, v168, &v208);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v207, &v208, v163 + 14, v163 + 22);
    swift_bridgeObjectRelease(v169);
    v76 = *(void (**)(char *, uint64_t))(v203 + 8);
    v76(v159, v48);
    _os_log_impl((void *)&_mh_execute_header, v161, v162, "Could not create re-direct URL for Internet Accounts for input URL %{private,mask.hash}s", (uint8_t *)v163, 0x16u);
    swift_arrayDestroy(v165, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v165, -1, -1);
    swift_slowDealloc(v163, -1, -1);

    v170 = *(void (**)(char *, uint64_t))(v204 + 8);
    v170(v187, v158);
    (*(void (**)(char *, char *))(v189 + 8))(v188, v200);
    v170(v194, v158);
    goto LABEL_23;
  }
  v171 = *(void (**)(char *, uint64_t, uint64_t))(v154 + 32);
  v172 = v182;
  v171(v182, v155, v48);
  v173 = v195;
  (*(void (**)(char *, char *, uint64_t))(v154 + 16))(v195, v172, v48);
  v174 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v175 = v197;
  swift_storeEnumTagMultiPayload(v197, v174, 52);
  swift_storeEnumTagMultiPayload(v175, v196, 1);
  v176 = *(void (**)(char *, uint64_t))(v154 + 8);
  v176(v172, v48);
  v177 = *(void (**)(char *, uint64_t))(v157 + 8);
  v177(v187, v158);
  (*(void (**)(char *, char *))(v189 + 8))(v188, v200);
  v177(v151, v158);
  v176(v206, v48);
  v121 = (int *)type metadata accessor for SettingsURLDestination(0);
  v122 = v201;
  v123 = &v201[v121[7]];
  v171(v201, (uint64_t)v173, v48);
  v124 = (uint64_t)&v122[v121[5]];
  v125 = (uint64_t)v175;
LABEL_31:
  sub_100043CA8(v125, v124);
  *(_QWORD *)&v122[v121[6]] = _swiftEmptyArrayStorage;
  *(_QWORD *)v123 = 0;
  *((_QWORD *)v123 + 1) = 0;
  v126 = sub_100004FC8(&qword_1001570F8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v126 - 8) + 56))(v122, 0, 1, v126);
LABEL_35:
  sub_1000CF314();
}

char *sub_1000CDD74(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  BOOL v30;
  void (*v31)(char *, char *, uint64_t);
  char *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _QWORD v44[9];
  char *v45;

  v5 = type metadata accessor for URLQueryItem(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v40 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v43 = (char *)&v35 - v9;
  result = (char *)_swiftEmptyArrayStorage;
  v45 = (char *)_swiftEmptyArrayStorage;
  v39 = *(_QWORD *)(a1 + 16);
  if (v39)
  {
    v35 = v2;
    v11 = 0;
    v12 = *(_QWORD *)(v6 + 72);
    v36 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    v38 = a1 + v36;
    v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16);
    v41 = a2 + 56;
    v42 = v12;
    while (1)
    {
      v13 = v5;
      v14 = v37(v43, v38 + v42 * v11, v5);
      v15 = URLQueryItem.name.getter(v14);
      v17 = v16;
      v18 = a2;
      if (!*(_QWORD *)(a2 + 16))
        goto LABEL_20;
      v19 = v15;
      Hasher.init(_seed:)(v44, *(_QWORD *)(a2 + 40));
      String.hash(into:)(v44, v19, v17);
      v20 = Hasher._finalize()();
      v21 = -1 << *(_BYTE *)(a2 + 32);
      v22 = v20 & ~v21;
      if (((*(_QWORD *)(v41 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) == 0)
        goto LABEL_20;
      v23 = *(_QWORD *)(v18 + 48);
      v24 = (_QWORD *)(v23 + 16 * v22);
      v25 = v24[1];
      v26 = *v24 == v19 && v25 == v17;
      if (!v26 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v24, v25, v19, v17, 0) & 1) == 0)
        break;
LABEL_3:
      swift_bridgeObjectRelease(v17);
      v5 = v13;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v43, v13);
LABEL_4:
      ++v11;
      a2 = v18;
      if (v11 == v39)
        return v45;
    }
    v27 = ~v21;
    while (1)
    {
      v22 = (v22 + 1) & v27;
      if (((*(_QWORD *)(v41 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) == 0)
        break;
      v28 = (_QWORD *)(v23 + 16 * v22);
      v29 = v28[1];
      v30 = *v28 == v19 && v29 == v17;
      if (v30 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v28, v29, v19, v17, 0) & 1) != 0)
        goto LABEL_3;
    }
LABEL_20:
    swift_bridgeObjectRelease(v17);
    v31 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v5 = v13;
    v31(v40, v43, v13);
    v32 = v45;
    if ((swift_isUniquelyReferenced_nonNull_native(v45) & 1) == 0)
    {
      sub_10000F274(0, *((_QWORD *)v32 + 2) + 1, 1);
      v32 = v45;
    }
    v34 = *((_QWORD *)v32 + 2);
    v33 = *((_QWORD *)v32 + 3);
    if (v34 >= v33 >> 1)
    {
      sub_10000F274(v33 > 1, v34 + 1, 1);
      v32 = v45;
    }
    *((_QWORD *)v32 + 2) = v34 + 1;
    v31(&v32[v36 + v34 * v42], v40, v13);
    v45 = v32;
    goto LABEL_4;
  }
  return result;
}

uint64_t sub_1000CE050()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t (*v41)(char *, unint64_t, uint64_t);
  unint64_t v42;
  uint64_t v43;
  void (*v44)(_QWORD, _QWORD, _QWORD);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  Swift::String_optional v51;
  unsigned __int8 v52;
  char v53;
  uint64_t result;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  void (*v60)(_QWORD, char *, uint64_t);
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  char *v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  char v89;
  char v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  void (*v99)(_QWORD, _QWORD, _QWORD);
  void *object;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;

  v0 = sub_100004FC8(&qword_10015C510);
  __chkstk_darwin(v0);
  v101 = (char *)&v93 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for URLQueryItem(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v93 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v102 = (char *)&v93 - v8;
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v93 - v10;
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v93 - v13;
  __chkstk_darwin(v12);
  v103 = (char *)&v93 - v15;
  v16 = sub_100004FC8(&qword_1001570F0);
  __chkstk_darwin(v16);
  v18 = (char *)&v93 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for URLComponents(0);
  v20 = *(_QWORD *)(v19 - 8);
  v108 = v19;
  v109 = v20;
  __chkstk_darwin(v19);
  v105 = (char *)&v93 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for URL(0);
  v107 = *(_QWORD *)(v22 - 8);
  v23 = __chkstk_darwin(v22);
  v25 = (char *)&v93 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.scheme.getter(v23);
  if (!v26)
    goto LABEL_25;
  v27 = v26;
  v99 = (void (*)(_QWORD, _QWORD, _QWORD))v14;
  v104 = v25;
  v110 = v3;
  v28 = String.lowercased()();
  swift_bridgeObjectRelease(v27);
  if ((v28._countAndFlagsBits != 0x7366657270 || v28._object != (void *)0xE500000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(0x7366657270, 0xE500000000000000, v28._countAndFlagsBits, v28._object, 0) & 1) == 0)
  {
    if (v28._countAndFlagsBits == 0xD000000000000013 && v28._object == (void *)0x800000010011F0D0
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x800000010011F0D0, v28._countAndFlagsBits, v28._object, 0) & 1) != 0)
    {
      v51 = URL.host(percentEncoded:)(1);
      if (v51.value._object)
      {
        v52 = sub_1000B1ED4(v51.value._countAndFlagsBits, (uint64_t)v51.value._object);
        if (v52 != 44)
        {
          v55 = sub_1000B1860(v52);
          v57 = v56;
          if (v55 == 0xD000000000000023 && v56 == 0x800000010011F9F0)
          {
            swift_bridgeObjectRelease(v28._object);
            swift_bridgeObjectRelease(0x800000010011F9F0);
            v53 = 1;
          }
          else
          {
            v53 = _stringCompareWithSmolCheck(_:_:expecting:)(v55, v56, 0xD000000000000023, 0x800000010011F9F0, 0);
            swift_bridgeObjectRelease(v28._object);
            swift_bridgeObjectRelease(v57);
          }
          return v53 & 1;
        }
      }
    }
    swift_bridgeObjectRelease(v28._object);
    goto LABEL_25;
  }
  object = v28._object;
  v29 = (uint64_t)v104;
  v30 = sub_100019DF4((uint64_t)v104);
  v31 = URL.absoluteString.getter(v30);
  v33 = v32;
  URLComponents.init(string:)(v31);
  swift_bridgeObjectRelease(v33);
  v35 = v108;
  v34 = v109;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v109 + 48))(v18, 1, v108) == 1)
  {
    swift_bridgeObjectRelease(object);
    (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v29, v22);
    sub_10000BA50((uint64_t)v18, &qword_1001570F0);
LABEL_25:
    v53 = 0;
    return v53 & 1;
  }
  v36 = v105;
  v37 = (*(uint64_t (**)(char *, char *, uint64_t))(v34 + 32))(v105, v18, v35);
  v38 = URLComponents.percentEncodedQueryItems.getter(v37);
  if (!v38)
  {
    swift_bridgeObjectRelease(object);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v35);
LABEL_24:
    (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v29, v22);
    goto LABEL_25;
  }
  v39 = *(_QWORD *)(v38 + 16);
  if (!v39)
  {
    v50 = v38;
    swift_bridgeObjectRelease(object);
LABEL_23:
    swift_bridgeObjectRelease(v50);
    (*(void (**)(char *, uint64_t))(v109 + 8))(v105, v35);
    goto LABEL_24;
  }
  v96 = v22;
  v97 = v38;
  v40 = v38 + ((*(unsigned __int8 *)(v110 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v110 + 80));
  v106 = *(_QWORD *)(v110 + 72);
  v41 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v110 + 16);
  swift_bridgeObjectRetain(v38);
  v42 = v40;
  v98 = v39;
  v43 = v39;
  v44 = v99;
  while (1)
  {
    v45 = v41(v11, v42, v2);
    v46 = URLQueryItem.name.getter(v45);
    v48 = v47;
    if (v46 == 1953460082 && v47 == 0xE400000000000000)
    {
      swift_bridgeObjectRelease(v97);
      v58 = 0xE400000000000000;
      goto LABEL_32;
    }
    v49 = _stringCompareWithSmolCheck(_:_:expecting:)(v46, v47, 1953460082, 0xE400000000000000, 0);
    swift_bridgeObjectRelease(v48);
    if ((v49 & 1) != 0)
      break;
    (*(void (**)(char *, uint64_t))(v110 + 8))(v11, v2);
    v42 += v106;
    if (!--v43)
    {
      swift_bridgeObjectRelease(object);
      v50 = v97;
      swift_bridgeObjectRelease(v97);
      v22 = v96;
      v29 = (uint64_t)v104;
      v35 = v108;
      goto LABEL_23;
    }
  }
  v58 = v97;
LABEL_32:
  swift_bridgeObjectRelease(v58);
  v59 = v110;
  v60 = *(void (**)(_QWORD, char *, uint64_t))(v110 + 32);
  v60(v44, v11, v2);
  v61 = v103;
  v99 = (void (*)(_QWORD, _QWORD, _QWORD))v60;
  v62 = ((uint64_t (*)(char *, _QWORD, uint64_t))v60)(v103, v44, v2);
  v63 = URLQueryItem.value.getter(v62);
  if (!v64)
  {
    swift_bridgeObjectRelease(object);
    swift_bridgeObjectRelease(v97);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v61, v2);
    (*(void (**)(char *, uint64_t))(v109 + 8))(v105, v108);
    (*(void (**)(char *, uint64_t))(v107 + 8))(v104, v96);
    goto LABEL_25;
  }
  v94 = v63;
  v95 = v64;
  result = swift_bridgeObjectRetain(v97);
  v65 = 0;
  while (1)
  {
    v66 = v65 + 1;
    if (__OFADD__(v65, 1))
    {
      __break(1u);
      return result;
    }
    v67 = v41(v6, v40, v2);
    v68 = URLQueryItem.name.getter(v67);
    v70 = v69;
    if (v68 == 1752457584 && v69 == 0xE400000000000000)
    {
      swift_bridgeObjectRelease(v97);
      v77 = 0xE400000000000000;
      goto LABEL_44;
    }
    v71 = _stringCompareWithSmolCheck(_:_:expecting:)(v68, v69, 1752457584, 0xE400000000000000, 0);
    swift_bridgeObjectRelease(v70);
    if ((v71 & 1) != 0)
      break;
    result = (*(uint64_t (**)(char *, uint64_t))(v110 + 8))(v6, v2);
    ++v65;
    v40 += v106;
    if (v66 == v98)
    {
      swift_bridgeObjectRelease(v97);
      v72 = 1;
      v73 = v96;
      v75 = v103;
      v74 = (uint64_t)v104;
      v76 = (uint64_t)v101;
      goto LABEL_45;
    }
  }
  v77 = v97;
LABEL_44:
  swift_bridgeObjectRelease(v77);
  v76 = (uint64_t)v101;
  v99(v101, v6, v2);
  v72 = 0;
  v73 = v96;
  v75 = v103;
  v74 = (uint64_t)v104;
LABEL_45:
  v79 = v94;
  v78 = v95;
  v80 = v110;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v110 + 56))(v76, v72, 1, v2);
  swift_bridgeObjectRelease(v97);
  v81 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v80 + 48))(v76, 1, v2);
  v82 = v102;
  if (v81 == 1)
  {
    sub_10000BA50(v76, &qword_10015C510);
    v83 = 1;
  }
  else
  {
    v84 = ((uint64_t (*)(char *, uint64_t, uint64_t))v99)(v102, v76, v2);
    v85 = URLQueryItem.value.getter(v84);
    if (v86)
    {
      v87 = v86;
      if (v85 == 0xD000000000000016 && v86 == 0x80000001001267B0)
      {
        swift_bridgeObjectRelease(v86);
        (*(void (**)(char *, uint64_t))(v110 + 8))(v82, v2);
        v83 = 0;
      }
      else
      {
        v88 = _stringCompareWithSmolCheck(_:_:expecting:)(v85, v86, 0xD000000000000016, 0x80000001001267B0, 0);
        swift_bridgeObjectRelease(v87);
        (*(void (**)(char *, uint64_t))(v110 + 8))(v82, v2);
        v83 = v88 ^ 1;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v110 + 8))(v82, v2);
      v83 = 1;
    }
  }
  if (v79 == 0xD000000000000016 && v78 == 0x8000000100126770
    || (v89 = 0,
        (_stringCompareWithSmolCheck(_:_:expecting:)(v79, v78, 0xD000000000000016, 0x8000000100126770, 0) & 1) != 0))
  {
    v89 = v83;
  }
  if (v79 == 0xD000000000000010 && v78 == 0x8000000100126790)
  {
    swift_bridgeObjectRelease(object);
    swift_bridgeObjectRelease(v78);
    v53 = 1;
  }
  else
  {
    v90 = _stringCompareWithSmolCheck(_:_:expecting:)(v79, v78, 0xD000000000000010, 0x8000000100126790, 0);
    swift_bridgeObjectRelease(object);
    swift_bridgeObjectRelease(v78);
    v53 = v90 | v89;
  }
  v91 = v107;
  v92 = v105;
  (*(void (**)(char *, uint64_t))(v110 + 8))(v75, v2);
  (*(void (**)(char *, uint64_t))(v109 + 8))(v92, v108);
  (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v74, v73);
  return v53 & 1;
}

uint64_t sub_1000CE918()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::String v26;
  uint64_t v27;
  Swift::String_optional v28;
  unsigned __int8 v29;
  void *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(char *, char *, uint64_t);
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t result;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(char *, unint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(char *, uint64_t);
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  void (*v74)(char *, uint64_t);
  uint64_t v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *object;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  v0 = sub_100004FC8(&qword_10015C510);
  __chkstk_darwin(v0);
  v85 = (char *)&v82 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for URLQueryItem(0);
  v90 = *(_QWORD *)(v2 - 8);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v82 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v86 = (char *)&v82 - v6;
  v7 = sub_100004FC8(&qword_1001570F0);
  __chkstk_darwin(v7);
  v9 = (char *)&v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URLComponents(0);
  v11 = *(_QWORD *)(v10 - 8);
  v88 = v10;
  v89 = v11;
  __chkstk_darwin(v10);
  v87 = (char *)&v82 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v82 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v82 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)&v82 - v21;
  v23 = sub_100019DF4((uint64_t)&v82 - v21);
  URL.scheme.getter(v23);
  if (!v24)
    goto LABEL_32;
  v25 = v24;
  v91 = v14;
  v26 = String.lowercased()();
  swift_bridgeObjectRelease(v25);
  if (v26._countAndFlagsBits != 0xD000000000000013 || v26._object != (void *)0x800000010011F0D0)
  {
    v27 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x800000010011F0D0, v26._countAndFlagsBits, v26._object, 0);
    if ((v27 & 1) == 0)
    {
      if (v26._countAndFlagsBits == 0x7366657270 && v26._object == (void *)0xE500000000000000
        || (v27 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7366657270, 0xE500000000000000, v26._countAndFlagsBits, v26._object, 0), (v27 & 1) != 0))
      {
        object = v26._object;
        v33 = URL.absoluteString.getter(v27);
        v35 = v34;
        URLComponents.init(string:)(v33);
        swift_bridgeObjectRelease(v35);
        v37 = v88;
        v36 = v89;
        v38 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v89 + 48))(v9, 1, v88);
        v39 = v91;
        if (v38 != 1)
        {
          v53 = v87;
          v54 = (*(uint64_t (**)(char *, char *, uint64_t))(v36 + 32))(v87, v9, v37);
          v55 = URLComponents.percentEncodedQueryItems.getter(v54);
          if (v55)
          {
            v56 = *(_QWORD *)(v55 + 16);
            v83 = v55;
            if (v56)
            {
              v57 = v55 + ((*(unsigned __int8 *)(v90 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v90 + 80));
              v58 = *(_QWORD *)(v90 + 72);
              v59 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v90 + 16);
              swift_bridgeObjectRetain(v55);
              while (1)
              {
                v60 = v59(v5, v57, v2);
                v61 = URLQueryItem.name.getter(v60);
                v63 = v62;
                if (v61 == 1752457584 && v62 == 0xE400000000000000)
                {
                  swift_bridgeObjectRelease(v83);
                  v77 = 0xE400000000000000;
                  goto LABEL_49;
                }
                v64 = _stringCompareWithSmolCheck(_:_:expecting:)(v61, v62, 1752457584, 0xE400000000000000, 0);
                swift_bridgeObjectRelease(v63);
                if ((v64 & 1) != 0)
                  break;
                (*(void (**)(char *, uint64_t))(v90 + 8))(v5, v2);
                v57 += v58;
                if (!--v56)
                {
                  swift_bridgeObjectRelease(v83);
                  v65 = 1;
                  v66 = v90;
                  v39 = v91;
                  v37 = v88;
                  goto LABEL_46;
                }
              }
              v77 = v83;
LABEL_49:
              v76 = v86;
              swift_bridgeObjectRelease(v77);
              v66 = v90;
              v75 = (uint64_t)v85;
              (*(void (**)(char *, char *, uint64_t))(v90 + 32))(v85, v5, v2);
              v65 = 0;
              v39 = v91;
              v37 = v88;
            }
            else
            {
              v65 = 1;
              v66 = v90;
LABEL_46:
              v75 = (uint64_t)v85;
              v76 = v86;
            }
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v66 + 56))(v75, v65, 1, v2);
            swift_bridgeObjectRelease(v83);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v75, 1, v2) == 1)
            {
              swift_bridgeObjectRelease(object);
              (*(void (**)(char *, uint64_t))(v89 + 8))(v87, v37);
              (*(void (**)(char *, uint64_t))(v39 + 8))(v22, v13);
              sub_10000BA50(v75, &qword_10015C510);
              goto LABEL_33;
            }
            v78 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v66 + 32))(v76, v75, v2);
            v79 = URLQueryItem.value.getter(v78);
            if (v80)
            {
              v81 = v80;
              if (v79 == 1953460082 && v80 == 0xE400000000000000)
                v68 = 1;
              else
                v68 = _stringCompareWithSmolCheck(_:_:expecting:)(v79, v80, 1953460082, 0xE400000000000000, 0);
              swift_bridgeObjectRelease(object);
              (*(void (**)(char *, uint64_t))(v66 + 8))(v76, v2);
              (*(void (**)(char *, uint64_t))(v89 + 8))(v87, v37);
              (*(void (**)(char *, uint64_t))(v39 + 8))(v22, v13);
              swift_bridgeObjectRelease(v81);
              return v68 & 1;
            }
            swift_bridgeObjectRelease(object);
            (*(void (**)(char *, uint64_t))(v66 + 8))(v76, v2);
            (*(void (**)(char *, uint64_t))(v89 + 8))(v87, v37);
          }
          else
          {
            swift_bridgeObjectRelease(object);
            (*(void (**)(char *, uint64_t))(v36 + 8))(v53, v37);
          }
          (*(void (**)(char *, uint64_t))(v39 + 8))(v22, v13);
          goto LABEL_33;
        }
        swift_bridgeObjectRelease(object);
        (*(void (**)(char *, uint64_t))(v39 + 8))(v22, v13);
        sub_10000BA50((uint64_t)v9, &qword_1001570F0);
LABEL_33:
        v68 = 0;
        return v68 & 1;
      }
      swift_bridgeObjectRelease(v26._object);
      v14 = v91;
LABEL_32:
      (*(void (**)(char *, uint64_t))(v14 + 8))(v22, v13);
      goto LABEL_33;
    }
  }
  v28 = URL.host(percentEncoded:)(1);
  if (!v28.value._object || (v29 = sub_1000B1ED4(v28.value._countAndFlagsBits, (uint64_t)v28.value._object), v29 == 44))
  {
    v30 = v26._object;
    v31 = v91;
    (*(void (**)(char *, char *, uint64_t))(v91 + 16))(v20, v22, v13);
LABEL_8:
    swift_bridgeObjectRelease(v30);
    v32 = *(void (**)(char *, uint64_t))(v31 + 8);
LABEL_9:
    v32(v20, v13);
    v32(v22, v13);
    goto LABEL_33;
  }
  v30 = v26._object;
  v40 = sub_1000B1860(v29);
  v42 = v41;
  if (v40 == 0xD000000000000023 && v41 == 0x800000010011F9F0)
  {
    swift_bridgeObjectRelease(0x800000010011F9F0);
    v31 = v91;
    v43 = *(uint64_t (**)(char *, char *, uint64_t))(v91 + 16);
    v44 = v43(v20, v22, v13);
  }
  else
  {
    v45 = _stringCompareWithSmolCheck(_:_:expecting:)(v40, v41, 0xD000000000000023, 0x800000010011F9F0, 0);
    swift_bridgeObjectRelease(v42);
    v31 = v91;
    v43 = *(uint64_t (**)(char *, char *, uint64_t))(v91 + 16);
    v44 = v43(v20, v22, v13);
    if ((v45 & 1) == 0)
      goto LABEL_8;
  }
  v46 = URL.pathComponents.getter(v44);
  v47 = *(_QWORD *)(v46 + 16);
  swift_bridgeObjectRelease(v46);
  v48 = v43(v17, v20, v13);
  if (!v47)
  {
    swift_bridgeObjectRelease(v26._object);
    v67 = *(void (**)(char *, uint64_t))(v31 + 8);
    v67(v17, v13);
    v67(v20, v13);
    v67(v22, v13);
    v68 = 1;
    return v68 & 1;
  }
  result = URL.pathComponents.getter(v48);
  v50 = result;
  v51 = *(_QWORD *)(result + 16);
  v52 = v51 != 0;
  if (v51 == v52)
  {
    swift_bridgeObjectRelease(v26._object);
    swift_bridgeObjectRelease(v50);
    v32 = *(void (**)(char *, uint64_t))(v31 + 8);
    v32(v17, v13);
    goto LABEL_9;
  }
  if (v51 > v52)
  {
    v69 = result + 16 * v52;
    v71 = *(_QWORD *)(v69 + 32);
    v70 = *(_QWORD *)(v69 + 40);
    swift_bridgeObjectRetain(v70);
    swift_bridgeObjectRelease(v50);
    if (v71 == 1953460082 && v70 == 0xE400000000000000)
      v68 = 1;
    else
      v68 = _stringCompareWithSmolCheck(_:_:expecting:)(v71, v70, 1953460082, 0xE400000000000000, 0);
    v73 = v91;
    swift_bridgeObjectRelease(v26._object);
    v74 = *(void (**)(char *, uint64_t))(v73 + 8);
    v74(v17, v13);
    v74(v20, v13);
    v74(v22, v13);
    swift_bridgeObjectRelease(v70);
    return v68 & 1;
  }
  __break(1u);
  return result;
}

void sub_1000CF104()
{
  id v0;
  void *v1;
  id v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;

  v0 = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
  if (v0)
  {
    v1 = v0;
    v2 = objc_msgSend(v0, "accounts");

    if (!v2
      || (v19 = 0,
          v3 = sub_1000A1F80(),
          static Array._conditionallyBridgeFromObjectiveC(_:result:)(v2, &v19, v3),
          v2,
          (v4 = v19) == 0))
    {
      swift_bridgeObjectRelease(0);
      v4 = (uint64_t)_swiftEmptyArrayStorage;
    }
    if ((unint64_t)v4 >> 62)
    {
LABEL_20:
      if (v4 < 0)
        v18 = v4;
      else
        v18 = v4 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v4);
      v5 = _CocoaArrayWrapper.endIndex.getter(v18);
      if (v5)
      {
LABEL_7:
        v6 = 4;
        while (1)
        {
          if ((v4 & 0xC000000000000001) != 0)
            v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6 - 4, v4);
          else
            v7 = *(id *)(v4 + 8 * v6);
          v8 = v7;
          v9 = v6 - 3;
          if (__OFADD__(v6 - 4, 1))
          {
            __break(1u);
            goto LABEL_20;
          }
          if (qword_100156D58 != -1)
            swift_once(&qword_100156D58, sub_1000CBFEC);
          v10 = qword_10015BCD8;
          v11 = objc_msgSend(v8, "accountType");
          if (!v11)
            break;
          v12 = v11;
          v13 = objc_msgSend(v11, "identifier");

          if (!v13)
            goto LABEL_26;
          v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
          v16 = v15;

          v17 = sub_10003A760(v14, v16, v10);
          swift_bridgeObjectRelease(v16);
          if ((v17 & 1) == 0)
          {
            ++v6;
            if (v9 != v5)
              continue;
          }
          goto LABEL_24;
        }
        __break(1u);
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
    }
    else
    {
      v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v4);
      if (v5)
        goto LABEL_7;
    }
LABEL_24:
    swift_bridgeObjectRelease_n(v4, 2);
    return;
  }
LABEL_27:
  __break(1u);
}

void sub_1000CF314()
{
  uint64_t v0;
  uint64_t v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *oslog;
  uint64_t v6;
  uint64_t v7;

  if (qword_100156CB0 != -1)
    swift_once(&qword_100156CB0, sub_10008BE28);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_100007808(v0, (uint64_t)qword_10015D2C8);
  oslog = Logger.logObject.getter(v1);
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v2))
  {
    v3 = swift_slowAlloc(22, -1);
    v4 = swift_slowAlloc(64, -1);
    v7 = v4;
    *(_DWORD *)v3 = 136315394;
    v6 = sub_1000DA1F0(0xD000000000000025, 0x8000000100126740, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v6, &v7, v3 + 4, v3 + 12);
    *(_WORD *)(v3 + 12) = 2080;
    v6 = sub_1000DA1F0(0xD000000000000026, 0x800000010011FD10, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v6, &v7, v3 + 14, v3 + 22);
    _os_log_impl((void *)&_mh_execute_header, oslog, v2, "…Complete (%s.%s)", (uint8_t *)v3, 0x16u);
    swift_arrayDestroy(v4, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v4, -1, -1);
    swift_slowDealloc(v3, -1, -1);

  }
  else
  {

  }
}

uint64_t sub_1000CF4E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t result;
  void *v23;
  unint64_t v24;
  unint64_t v25;
  void *object;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t (*v45)(char *, unint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t (*v65)(char *, unint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;

  v0 = sub_100004FC8(&qword_10015C510);
  __chkstk_darwin(v0);
  v69 = (char *)&v62 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for URLQueryItem(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v68 = (char *)&v62 - v7;
  v8 = sub_100004FC8(&qword_1001570F0);
  __chkstk_darwin(v8);
  v10 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for URLComponents(0);
  v71 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v70 = (char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100019DF4((uint64_t)v16);
  URL.scheme.getter(v17);
  if (!v18)
    goto LABEL_8;
  v19 = v18;
  v66 = v11;
  v67 = v3;
  v20 = String.lowercased()();
  v21 = swift_bridgeObjectRelease(v19);
  if (v20._countAndFlagsBits != 0xD000000000000013 || v20._object != (void *)0x800000010011F0D0)
  {
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x800000010011F0D0, v20._countAndFlagsBits, v20._object, 0);
    if ((v21 & 1) == 0)
    {
      if (v20._countAndFlagsBits != 0x7366657270 || v20._object != (void *)0xE500000000000000)
      {
        v21 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7366657270, 0xE500000000000000, v20._countAndFlagsBits, v20._object, 0);
        if ((v21 & 1) == 0)
        {
          object = v20._object;
          goto LABEL_7;
        }
      }
      v33 = URL.absoluteString.getter(v21);
      v35 = v34;
      URLComponents.init(string:)(v33);
      swift_bridgeObjectRelease(v35);
      v36 = v71;
      v37 = v66;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48))(v10, 1, v66) == 1)
      {
        swift_bridgeObjectRelease(v20._object);
        (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
        sub_10000BA50((uint64_t)v10, &qword_1001570F0);
        goto LABEL_9;
      }
      v39 = v70;
      v40 = (*(uint64_t (**)(char *, char *, uint64_t))(v36 + 32))(v70, v10, v37);
      v41 = URLComponents.percentEncodedQueryItems.getter(v40);
      if (!v41)
      {
        swift_bridgeObjectRelease(v20._object);
        (*(void (**)(char *, uint64_t))(v36 + 8))(v39, v37);
        goto LABEL_8;
      }
      v42 = v41;
      v43 = *(_QWORD *)(v41 + 16);
      if (v43)
      {
        v44 = v41 + ((*(unsigned __int8 *)(v67 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80));
        v45 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v67 + 16);
        v64 = *(_QWORD *)(v67 + 72);
        v65 = v45;
        v63 = v41;
        swift_bridgeObjectRetain(v41);
        while (1)
        {
          v46 = v65(v6, v44, v2);
          v47 = URLQueryItem.name.getter(v46);
          v49 = v48;
          if (v47 == 1752457584 && v48 == 0xE400000000000000)
          {
            v42 = v63;
            swift_bridgeObjectRelease(v63);
            v55 = 0xE400000000000000;
            goto LABEL_41;
          }
          v50 = _stringCompareWithSmolCheck(_:_:expecting:)(v47, v48, 1752457584, 0xE400000000000000, 0);
          swift_bridgeObjectRelease(v49);
          if ((v50 & 1) != 0)
            break;
          (*(void (**)(char *, uint64_t))(v67 + 8))(v6, v2);
          v44 += v64;
          if (!--v43)
          {
            v42 = v63;
            swift_bridgeObjectRelease(v63);
            goto LABEL_36;
          }
        }
        v42 = v63;
        v55 = v63;
LABEL_41:
        v53 = v68;
        swift_bridgeObjectRelease(v55);
        v52 = v67;
        v54 = (uint64_t)v69;
        (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v69, v6, v2);
        v51 = 0;
      }
      else
      {
LABEL_36:
        v51 = 1;
        v52 = v67;
        v53 = v68;
        v54 = (uint64_t)v69;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v52 + 56))(v54, v51, 1, v2);
      swift_bridgeObjectRelease(v42);
      v56 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v54, 1, v2);
      v57 = v70;
      if (v56 == 1)
      {
        swift_bridgeObjectRelease(v20._object);
        (*(void (**)(char *, uint64_t))(v71 + 8))(v57, v66);
        (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
        sub_10000BA50(v54, &qword_10015C510);
        goto LABEL_9;
      }
      v58 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v52 + 32))(v53, v54, v2);
      v59 = URLQueryItem.value.getter(v58);
      if (!v60)
      {
        swift_bridgeObjectRelease(v20._object);
        (*(void (**)(char *, uint64_t))(v52 + 8))(v53, v2);
        (*(void (**)(char *, uint64_t))(v71 + 8))(v57, v66);
        goto LABEL_8;
      }
      v61 = v60;
      if (v59 == 0x4F4343415F444441 && v60 == 0xEB00000000544E55)
        v27 = 1;
      else
        v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v59, v60, 0x4F4343415F444441, 0xEB00000000544E55, 0);
      swift_bridgeObjectRelease(v20._object);
      (*(void (**)(char *, uint64_t))(v52 + 8))(v53, v2);
      (*(void (**)(char *, uint64_t))(v71 + 8))(v57, v66);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      v38 = v61;
LABEL_26:
      swift_bridgeObjectRelease(v38);
      return v27 & 1;
    }
  }
  result = URL.pathComponents.getter(v21);
  v23 = (void *)result;
  v24 = *(_QWORD *)(result + 16);
  v25 = v24 != 0;
  if (v24 != v25)
  {
    if (v24 <= v25)
    {
      __break(1u);
      return result;
    }
    v28 = result + 16 * v25;
    v30 = *(_QWORD *)(v28 + 32);
    v29 = *(_QWORD *)(v28 + 40);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRelease(v23);
    if (v30 == 0x4F4343415F444441 && v29 == 0xEB00000000544E55)
      v27 = 1;
    else
      v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v30, v29, 0x4F4343415F444441, 0xEB00000000544E55, 0);
    swift_bridgeObjectRelease(v20._object);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    v38 = v29;
    goto LABEL_26;
  }
  swift_bridgeObjectRelease(v20._object);
  object = v23;
LABEL_7:
  swift_bridgeObjectRelease(object);
LABEL_8:
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
LABEL_9:
  v27 = 0;
  return v27 & 1;
}

uint64_t sub_1000CFB54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004FC8(&qword_10015BCE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t destroy for ConnectedHeadphoneItem(uint64_t a1)
{
  uint64_t result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));

  result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  if (*(_QWORD *)(a1 + 72))
    return sub_100005474((_QWORD *)(a1 + 48));
  return result;
}

uint64_t initializeWithCopy for ConnectedHeadphoneItem(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _OWORD *v7;
  uint64_t v8;
  id v9;
  __int128 v10;

  v3 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v4;
  v6 = (void *)a2[4];
  v5 = a2[5];
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  v7 = a2 + 6;
  v8 = a2[9];
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  v9 = v6;
  swift_bridgeObjectRetain(v5);
  if (v8)
  {
    *(_QWORD *)(a1 + 72) = v8;
    (**(void (***)(uint64_t, _OWORD *, uint64_t))(v8 - 8))(a1 + 48, v7, v8);
  }
  else
  {
    v10 = v7[1];
    *(_OWORD *)(a1 + 48) = *v7;
    *(_OWORD *)(a1 + 64) = v10;
  }
  return a1;
}

uint64_t assignWithCopy for ConnectedHeadphoneItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(void **)(a2 + 32);
  v9 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  v10 = v8;

  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v11);
  v13 = *(_QWORD *)(a2 + 72);
  if (!*(_QWORD *)(a1 + 72))
  {
    if (v13)
    {
      *(_QWORD *)(a1 + 72) = v13;
      (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1 + 48, a2 + 48);
      return a1;
    }
LABEL_7:
    v14 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v14;
    return a1;
  }
  if (!v13)
  {
    sub_100005474((_QWORD *)(a1 + 48));
    goto LABEL_7;
  }
  sub_1000CFD80((_QWORD *)(a1 + 48), (_QWORD *)(a2 + 48));
  return a1;
}

_QWORD *sub_1000CFD80(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v11 = *result;
        v12 = *a2;
        swift_retain(*a2);
        result = (_QWORD *)swift_release(v11);
        *v3 = v12;
      }
      else
      {
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *, _QWORD))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          v14 = *a2;
          *v3 = *a2;
          swift_retain(v14);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (_QWORD *)swift_release(v10);
      }
      else
      {
        (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          v13 = *a2;
          *v3 = *a2;
          swift_retain(v13);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }
  return result;
}

__n128 initializeWithTake for ConnectedHeadphoneItem(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for ConnectedHeadphoneItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  __int128 v10;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);

  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v9);
  if (*(_QWORD *)(a1 + 72))
    sub_100005474((_QWORD *)(a1 + 48));
  v10 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v10;
  return a1;
}

uint64_t getEnumTagSinglePayload for ConnectedHeadphoneItem(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConnectedHeadphoneItem(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConnectedHeadphoneItem()
{
  return &type metadata for ConnectedHeadphoneItem;
}

unint64_t sub_1000D0034()
{
  unint64_t result;

  result = qword_10015BCE8;
  if (!qword_10015BCE8)
  {
    result = swift_getWitnessTable(&unk_10011AA70, &type metadata for ConnectedHeadphoneItem);
    atomic_store(result, (unint64_t *)&qword_10015BCE8);
  }
  return result;
}

uint64_t sub_1000D0078@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

Swift::Int sub_1000D0088()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, 0);
  v1 = *v0;
  v2 = v0[1];
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v7, v1, v2);
  swift_bridgeObjectRelease(v2);
  v3 = v0[2];
  v4 = v0[3];
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v4);
  v5 = (id)v0[4];
  NSObject.hash(into:)(v7);

  return Hasher._finalize()();
}

void sub_1000D0124(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  v3 = *v1;
  v4 = v1[1];
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(a1, v3, v4);
  swift_bridgeObjectRelease(v4);
  v5 = v1[2];
  v6 = v1[3];
  swift_bridgeObjectRetain(v6);
  String.hash(into:)(a1, v5, v6);
  swift_bridgeObjectRelease(v6);
  v7 = (id)v1[4];
  NSObject.hash(into:)(a1);

}

Swift::Int sub_1000D01B8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  _QWORD v8[9];

  Hasher.init(_seed:)(v8, a1);
  v2 = *v1;
  v3 = v1[1];
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v8, v2, v3);
  swift_bridgeObjectRelease(v3);
  v4 = v1[2];
  v5 = v1[3];
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v8, v4, v5);
  swift_bridgeObjectRelease(v5);
  v6 = (id)v1[4];
  NSObject.hash(into:)(v8);

  return Hasher._finalize()();
}

BOOL sub_1000D0250(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[4];

  v2 = *(_QWORD *)(a1 + 24);
  v6[2] = *(_QWORD *)(a1 + 16);
  v6[3] = v2;
  v3 = *(_QWORD *)(a2 + 24);
  v6[0] = *(_QWORD *)(a2 + 16);
  v6[1] = v3;
  v4 = sub_100008A5C();
  return StringProtocol.localizedCaseInsensitiveCompare<A>(_:)(v6, &type metadata for String, &type metadata for String, v4, v4) == -1;
}

BOOL sub_1000D02AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[4];

  v2 = *(_QWORD *)(a2 + 24);
  v6[2] = *(_QWORD *)(a2 + 16);
  v6[3] = v2;
  v3 = *(_QWORD *)(a1 + 24);
  v6[0] = *(_QWORD *)(a1 + 16);
  v6[1] = v3;
  v4 = sub_100008A5C();
  return StringProtocol.localizedCaseInsensitiveCompare<A>(_:)(v6, &type metadata for String, &type metadata for String, v4, v4) != -1;
}

BOOL sub_1000D0308(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[4];

  v2 = *(_QWORD *)(a1 + 24);
  v6[2] = *(_QWORD *)(a1 + 16);
  v6[3] = v2;
  v3 = *(_QWORD *)(a2 + 24);
  v6[0] = *(_QWORD *)(a2 + 16);
  v6[1] = v3;
  v4 = sub_100008A5C();
  return StringProtocol.localizedCaseInsensitiveCompare<A>(_:)(v6, &type metadata for String, &type metadata for String, v4, v4) != -1;
}

BOOL sub_1000D0364(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[4];

  v2 = *(_QWORD *)(a2 + 24);
  v6[2] = *(_QWORD *)(a2 + 16);
  v6[3] = v2;
  v3 = *(_QWORD *)(a1 + 24);
  v6[0] = *(_QWORD *)(a1 + 16);
  v6[1] = v3;
  v4 = sub_100008A5C();
  return StringProtocol.localizedCaseInsensitiveCompare<A>(_:)(v6, &type metadata for String, &type metadata for String, v4, v4) == -1;
}

uint64_t sub_1000D03C0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  char v9;
  char v10;
  _QWORD v12[10];
  _BYTE v13[32];
  uint64_t v14;
  _BYTE v15[16];
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[16];
  uint64_t v19;
  uint64_t v20;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  if (v4 == *a2 && v5 == v6)
  {
    sub_10000BB7C(a1, (uint64_t)v18);
    sub_10000BB7C(a2, (uint64_t)v15);
    goto LABEL_8;
  }
  v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0);
  sub_10000BB7C(a1, (uint64_t)v18);
  sub_10000BB7C(a2, (uint64_t)v15);
  if ((v8 & 1) != 0)
  {
LABEL_8:
    if (v19 == v16 && v20 == v17)
    {
      sub_10000BBB8((uint64_t)v18);
      sub_10000BBB8((uint64_t)v15);
      sub_10000BB7C(a1, (uint64_t)v13);
      sub_10000BB7C(a2, (uint64_t)v12);
    }
    else
    {
      v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v20, v16, v17, 0);
      sub_10000BBB8((uint64_t)v18);
      sub_10000BBB8((uint64_t)v15);
      sub_10000BB7C(a1, (uint64_t)v13);
      sub_10000BB7C(a2, (uint64_t)v12);
      v9 = 0;
      if ((v10 & 1) == 0)
        goto LABEL_13;
    }
    sub_10000BBEC();
    v9 = static NSObject.== infix(_:_:)(v14, v12[4]);
    goto LABEL_13;
  }
  sub_10000BBB8((uint64_t)v18);
  sub_10000BBB8((uint64_t)v15);
  sub_10000BB7C(a1, (uint64_t)v13);
  sub_10000BB7C(a2, (uint64_t)v12);
  v9 = 0;
LABEL_13:
  sub_10000BBB8((uint64_t)v13);
  sub_10000BBB8((uint64_t)v12);
  return v9 & 1;
}

id sub_1000D0528()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  objc_super v6;
  __int128 v7;
  uint64_t v8;
  _BYTE v9[24];
  __int128 v10;
  __int128 v11;

  v1 = (uint64_t)&v0[OBJC_IVAR____TtC11SettingsApp48DefaultsObservingPrimarySettingsListItemProvider_defaultsObserver];
  swift_beginAccess(&v0[OBJC_IVAR____TtC11SettingsApp48DefaultsObservingPrimarySettingsListItemProvider_defaultsObserver], v9, 0, 0);
  sub_1000A1F38(v1, (uint64_t)&v7);
  if (v8)
  {
    sub_1000CA074(&v7, &v10);
    v2 = *((_QWORD *)&v11 + 1);
    v3 = sub_100007C2C(&v10, *((uint64_t *)&v11 + 1));
    v4 = _bridgeAnythingToObjectiveC<A>(_:)(v3, v2);
    objc_msgSend(v0, "na_removeNotificationBlockObserver:", v4);
    swift_unknownObjectRelease(v4);
    sub_100005474(&v10);
  }
  else
  {
    sub_10000BFF4((uint64_t)&v7);
  }
  v10 = 0u;
  v11 = 0u;
  swift_beginAccess(v1, &v7, 33, 0);
  sub_1000D1284((uint64_t)&v10, v1);
  swift_endAccess(&v7);
  v6.receiver = v0;
  v6.super_class = (Class)type metadata accessor for DefaultsObservingPrimarySettingsListItemProvider(0);
  return objc_msgSendSuper2(&v6, "dealloc");
}

uint64_t sub_1000D06B8()
{
  return type metadata accessor for DefaultsObservingPrimarySettingsListItemProvider(0);
}

uint64_t type metadata accessor for DefaultsObservingPrimarySettingsListItemProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_10015BD48;
  if (!qword_10015BD48)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DefaultsObservingPrimarySettingsListItemProvider);
  return result;
}

void sub_1000D06FC(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  char *v3;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  unsigned int v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  NSString v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  id v21;
  unsigned int v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  _BYTE v27[24];
  void **aBlock;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t, uint64_t);
  void *v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  _BYTE v34[24];

  v3 = v2;
  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  __chkstk_darwin(v6);
  v8 = &v27[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (v3[OBJC_IVAR____TtC11SettingsApp48DefaultsObservingPrimarySettingsListItemProvider_shouldShow] == 1)
  {
    sub_100012DC4((uint64_t)&v3[OBJC_IVAR____TtC11SettingsApp48DefaultsObservingPrimarySettingsListItemProvider_id], (uint64_t)v8);
    v9 = type metadata accessor for StaticPrimarySettingsListItemProvider(0);
    v10 = swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
    sub_10000F48C((uint64_t)v8, v10 + OBJC_IVAR____TtC11SettingsApp37StaticPrimarySettingsListItemProvider_id);
    sub_1000B2604(a1, a2);
    swift_setDeallocating(v10);
    sub_100013014(v10 + OBJC_IVAR____TtC11SettingsApp37StaticPrimarySettingsListItemProvider_id);
    swift_deallocClassInstance(v10, *(unsigned int *)(*(_QWORD *)v10 + 48), *(unsigned __int16 *)(*(_QWORD *)v10 + 52));
    v11 = objc_msgSend((id)objc_opt_self(PSLaunchTracker), "sharedInstance");
    v12 = objc_msgSend(v11, "launchHasCompleted");

    if (v12)
    {
      v13 = (uint64_t)&v3[OBJC_IVAR____TtC11SettingsApp48DefaultsObservingPrimarySettingsListItemProvider_defaultsObserver];
      swift_beginAccess(&v3[OBJC_IVAR____TtC11SettingsApp48DefaultsObservingPrimarySettingsListItemProvider_defaultsObserver], v34, 0, 0);
      sub_1000A1F38(v13, (uint64_t)&aBlock);
      v14 = v31;
      sub_10000BFF4((uint64_t)&aBlock);
      if (!v14)
      {
        v15 = *(_QWORD *)&v3[OBJC_IVAR____TtC11SettingsApp48DefaultsObservingPrimarySettingsListItemProvider_userDefaults];
        v16 = String._bridgeToObjectiveC()();
        v17 = swift_allocObject(&unk_10014D728, 24, 7);
        swift_unknownObjectWeakInit(v17 + 16, v3);
        v32 = sub_1000D11D8;
        v33 = v17;
        aBlock = _NSConcreteStackBlock;
        v29 = 1107296256;
        v30 = sub_1000D11E0;
        v31 = &unk_10014D7E0;
        v18 = _Block_copy(&aBlock);
        swift_release(v33);
        v19 = objc_msgSend(v3, "na_addNotificationBlockObserverForObject:keyPath:options:usingBlock:", v15, v16, 1, v18);
LABEL_8:
        v26 = v19;

        _Block_release(v18);
        _bridgeAnyObjectToAny(_:)(&aBlock, v26);
        swift_unknownObjectRelease(v26);
        swift_beginAccess(v13, v27, 33, 0);
        sub_1000D1284((uint64_t)&aBlock, v13);
        swift_endAccess(v27);
      }
    }
  }
  else
  {
    v20 = type metadata accessor for PrimarySettingsListItemModel(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a2, 1, 1, v20);
    v21 = objc_msgSend((id)objc_opt_self(PSLaunchTracker), "sharedInstance");
    v22 = objc_msgSend(v21, "launchHasCompleted");

    if (v22)
    {
      v13 = (uint64_t)&v3[OBJC_IVAR____TtC11SettingsApp48DefaultsObservingPrimarySettingsListItemProvider_defaultsObserver];
      swift_beginAccess(&v3[OBJC_IVAR____TtC11SettingsApp48DefaultsObservingPrimarySettingsListItemProvider_defaultsObserver], v34, 0, 0);
      sub_1000A1F38(v13, (uint64_t)&aBlock);
      v23 = v31;
      sub_10000BFF4((uint64_t)&aBlock);
      if (!v23)
      {
        v24 = *(_QWORD *)&v3[OBJC_IVAR____TtC11SettingsApp48DefaultsObservingPrimarySettingsListItemProvider_userDefaults];
        v16 = String._bridgeToObjectiveC()();
        v25 = swift_allocObject(&unk_10014D728, 24, 7);
        swift_unknownObjectWeakInit(v25 + 16, v3);
        v32 = sub_1000D11D8;
        v33 = v25;
        aBlock = _NSConcreteStackBlock;
        v29 = 1107296256;
        v30 = sub_1000D11E0;
        v31 = &unk_10014D7B8;
        v18 = _Block_copy(&aBlock);
        swift_release(v33);
        v19 = objc_msgSend(v3, "na_addNotificationBlockObserverForObject:keyPath:options:usingBlock:", v24, v16, 1, v18);
        goto LABEL_8;
      }
    }
  }
}

uint64_t sub_1000D0AD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  _QWORD *v17;
  _QWORD aBlock[5];
  uint64_t v19;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v16 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100156D60 != -1)
    swift_once(&qword_100156D60, sub_1000D34BC);
  v8 = swift_allocObject(&unk_10014D728, 24, 7);
  swift_unknownObjectWeakInit(v8 + 16, v0);
  aBlock[4] = sub_1000D1150;
  v19 = v8;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100005350;
  aBlock[3] = &unk_10014D740;
  v9 = _Block_copy(aBlock);
  swift_retain(v8);
  static DispatchQoS.unspecified.getter(v10);
  v17 = _swiftEmptyArrayStorage;
  v11 = sub_100012ED8();
  v12 = sub_100004FC8((uint64_t *)&unk_100156F40);
  v13 = sub_10000551C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v17, v12, v13, v1, v11);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v3, v9);
  _Block_release(v9);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v3, v1);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v14 = v19;
  swift_release(v8);
  return swift_release(v14);
}

uint64_t sub_1000D0CD0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  _BYTE *v11;
  void *v12;
  uint64_t v13;
  id v14;
  NSString v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD aBlock[5];
  uint64_t v27;
  _BYTE v28[24];

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&aBlock[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&aBlock[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1 += 16;
  swift_beginAccess(a1, v28, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(a1);
  if (result)
  {
    v11 = (_BYTE *)result;
    v12 = *(void **)(result
                   + OBJC_IVAR____TtC11SettingsApp48DefaultsObservingPrimarySettingsListItemProvider_userDefaults);
    v25 = v3;
    v13 = *(_QWORD *)(result
                    + OBJC_IVAR____TtC11SettingsApp48DefaultsObservingPrimarySettingsListItemProvider_defaultsKey
                    + 8);
    v14 = v12;
    swift_bridgeObjectRetain(v13);
    v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v13);
    LOBYTE(v13) = objc_msgSend(v14, "BOOLForKey:", v15);

    LOBYTE(v14) = v13 ^ v11[OBJC_IVAR____TtC11SettingsApp48DefaultsObservingPrimarySettingsListItemProvider_shownWhen];
    v16 = sub_100005494();
    v17 = (void *)static OS_dispatch_queue.main.getter(v16);
    v18 = swift_allocObject(&unk_10014D728, 24, 7);
    swift_unknownObjectWeakInit(v18 + 16, v11);
    v19 = swift_allocObject(&unk_10014D778, 25, 7);
    *(_QWORD *)(v19 + 16) = v18;
    *(_BYTE *)(v19 + 24) = (v14 & 1) == 0;
    aBlock[4] = sub_1000D117C;
    v27 = v19;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100005350;
    aBlock[3] = &unk_10014D790;
    v20 = _Block_copy(aBlock);
    v21 = swift_release(v27);
    static DispatchQoS.unspecified.getter(v21);
    aBlock[0] = _swiftEmptyArrayStorage;
    v22 = sub_100012ED8();
    v23 = sub_100004FC8((uint64_t *)&unk_100156F40);
    v24 = sub_10000551C();
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v23, v24, v2, v22);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v5, v20);
    _Block_release(v20);

    (*(void (**)(char *, uint64_t))(v25 + 8))(v5, v2);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  return result;
}

void sub_1000D0F6C(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t Strong;
  _BYTE *v5;
  uint64_t v6;
  _QWORD v7[2];
  char v8;
  _BYTE v9[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v9, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (_BYTE *)Strong;
    v6 = OBJC_IVAR____TtC11SettingsApp48DefaultsObservingPrimarySettingsListItemProvider_shouldShow;
    if (*(_BYTE *)(Strong + OBJC_IVAR____TtC11SettingsApp48DefaultsObservingPrimarySettingsListItemProvider_shouldShow) != (a2 & 1))
    {
      sub_100007C2C((_QWORD *)(Strong + OBJC_IVAR____TtC11SettingsApp48DefaultsObservingPrimarySettingsListItemProvider_invalidator), *(_QWORD *)(Strong+ OBJC_IVAR____TtC11SettingsApp48DefaultsObservingPrimarySettingsListItemProvider_invalidator+ 24));
      v7[0] = "Defaults Changed";
      v7[1] = 16;
      v8 = 2;
      PassthroughSubject.send(_:)(v7);
    }
    v5[v6] = a2 & 1;

  }
}

uint64_t sub_1000D1050(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  result = type metadata accessor for PrimarySettingsListItemIdentifier(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "(";
    v4[2] = &unk_10011AB20;
    v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[4] = &unk_10011AB38;
    v4[5] = &unk_10011AB38;
    v4[6] = &unk_10011AB50;
    result = swift_updateClassMetadata2(a1, 256, 7, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1000D10F4@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_100012DC4(*v1 + OBJC_IVAR____TtC11SettingsApp48DefaultsObservingPrimarySettingsListItemProvider_id, a1);
}

void sub_1000D110C(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000D06FC(a1, a2);
}

uint64_t sub_1000D112C()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000D1150()
{
  uint64_t v0;

  return sub_1000D0CD0(v0);
}

uint64_t sub_1000D1158()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

void sub_1000D117C()
{
  uint64_t v0;

  sub_1000D0F6C(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

void sub_1000D1188(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  _BYTE v6[24];

  v3 = a3 + 16;
  swift_beginAccess(a3 + 16, v6, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    sub_1000D0AD4();

  }
}

void sub_1000D11D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000D1188(a1, a2, v2);
}

uint64_t sub_1000D11E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void (*v6)(_QWORD *, uint64_t);
  uint64_t v7;
  _QWORD v9[4];

  v6 = *(void (**)(_QWORD *, uint64_t))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v9[3] = swift_getObjectType(a2);
  v9[0] = a2;
  v7 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a3, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  swift_retain(v5);
  swift_unknownObjectRetain(a2);
  v6(v9, v7);
  swift_release(v5);
  swift_bridgeObjectRelease(v7);
  return sub_100005474(v9);
}

uint64_t sub_1000D1284(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004FC8(&qword_10015BA90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D12E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  objc_method *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t result;
  uint64_t v28;
  _QWORD *v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  _UNKNOWN **v33;
  objc_method *v34;

  v2 = type metadata accessor for SettingsApplicationDelegate(0);
  v3 = sub_100007828(&qword_10015BE08, type metadata accessor for SettingsApplicationDelegate, (uint64_t)&unk_100117908);
  UIApplicationDelegateAdaptor<>.init(_:)(v2, v2, v3);
  v4 = (int *)type metadata accessor for SettingsApp(0);
  v5 = (_QWORD *)(a1 + v4[5]);
  v6 = type metadata accessor for SettingsAppLaunchActions(0);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  v34 = sub_10001BE24();
  State.init(wrappedValue:)(&v30, &v34, v6);
  v7 = v31;
  *v5 = v30;
  v5[1] = v7;
  v8 = (_QWORD *)(a1 + v4[7]);
  v9 = type metadata accessor for SettingsZeroKeywordNavigationItemsProvider(0);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  v34 = (objc_method *)SettingsZeroKeywordNavigationItemsProvider.init(settingsHostApplicationBundleIdentifier:)(0xD000000000000015, 0x800000010011FB30);
  State.init(wrappedValue:)(&v30, &v34, v9);
  v10 = v31;
  *v8 = v30;
  v8[1] = v10;
  v11 = type metadata accessor for SettingsAppModel(0);
  v12 = (objc_method *)swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  *((_QWORD *)v12 + 2) = swift_getKeyPath(&unk_10011AC10);
  *((_QWORD *)v12 + 3) = swift_getKeyPath(&unk_10011AC30);
  v13 = type metadata accessor for SettingsAppNavigationModel(0);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  v14 = sub_1000E2378();
  *((_QWORD *)v12 + 4) = v14;
  ObservationRegistrar.init()(v14);
  v15 = sub_1000DB598();
  v16 = type metadata accessor for PrimarySettingsListModel(0);
  v32 = v16;
  v33 = &off_10014DEE0;
  v30 = v15;
  v17 = type metadata accessor for SettingsAppSearchViewModel(0);
  v18 = swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  v19 = sub_1000D2B68((uint64_t)&v30, v16);
  __chkstk_darwin(v19);
  v21 = (uint64_t *)((char *)&v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v22 + 16))(v21);
  v23 = *v21;
  swift_retain(v12);
  swift_retain(v15);
  v24 = sub_1000D2B90(v23, (uint64_t)sub_1000D34B8, (uint64_t)v12, v18);
  swift_release(v12);
  sub_100005474(&v30);
  swift_release(v15);
  v34 = v12;
  swift_retain(v12);
  State.init(wrappedValue:)(&v30, &v34, v11);
  v25 = v31;
  v26 = (_QWORD *)(a1 + v4[8]);
  *v26 = v30;
  v26[1] = v25;
  v34 = (objc_method *)v24;
  State.init(wrappedValue:)(&v30, &v34, v17);
  result = swift_release(v12);
  v28 = v31;
  v29 = (_QWORD *)(a1 + v4[6]);
  *v29 = v30;
  v29[1] = v28;
  return result;
}

uint64_t sub_1000D15AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t OpaqueTypeConformance2;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v2 = v1;
  v47 = a1;
  v43 = type metadata accessor for SettingsApp(0);
  v3 = *(_QWORD *)(v43 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v43);
  v5 = sub_100004FC8(&qword_10015BE38);
  v46 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004FC8(&qword_10015BE40);
  v45 = *(_QWORD *)(v8 - 8);
  v9 = __chkstk_darwin(v8);
  v44 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v39 - v11;
  sub_1000D31D0(v2, (uint64_t)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = *(unsigned __int8 *)(v3 + 80);
  v14 = (v13 + 16) & ~v13;
  v15 = swift_allocObject(&unk_10014D850, v14 + v4, v13 | 7);
  sub_1000D3218((uint64_t)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v15 + v14);
  v41 = sub_100004FC8(&qword_10015BE48);
  v40 = sub_100005430(&qword_10015BE50);
  v16 = type metadata accessor for SettingsZeroKeywordNavigationItemsProvider(255);
  v17 = sub_100005430(&qword_10015BE58);
  v18 = type metadata accessor for SettingsAppSearchViewModel(255);
  v19 = sub_100005430(&qword_10015BE60);
  v20 = type metadata accessor for SettingsNavigationSplitView(255);
  v21 = sub_100007828(&qword_10015BE68, type metadata accessor for SettingsNavigationSplitView, (uint64_t)&unk_100116918);
  v49 = v20;
  v50 = v21;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v49, &opaque type descriptor for <<opaque return type of View.onOpenURL(perform:)>>, 1);
  v49 = v19;
  v50 = OpaqueTypeConformance2;
  v23 = swift_getOpaqueTypeConformance2(&v49, &opaque type descriptor for <<opaque return type of View.onContinueUserActivity(_:perform:)>>, 1);
  v24 = sub_100007828(&qword_100158B50, type metadata accessor for SettingsAppSearchViewModel, (uint64_t)&unk_1001166F4);
  v49 = v17;
  v50 = v18;
  v51 = v23;
  v52 = v24;
  v25 = swift_getOpaqueTypeConformance2(&v49, &opaque type descriptor for <<opaque return type of View.environment<A>(_:)>>, 1);
  v26 = sub_100007828(&qword_100159FB0, (uint64_t (*)(uint64_t))&type metadata accessor for SettingsZeroKeywordNavigationItemsProvider, (uint64_t)&protocol conformance descriptor for SettingsZeroKeywordNavigationItemsProvider);
  v49 = v40;
  v50 = v16;
  v51 = v25;
  v52 = v26;
  v27 = swift_getOpaqueTypeConformance2(&v49, &opaque type descriptor for <<opaque return type of View.environment<A>(_:)>>, 1);
  WindowGroup.init(id:title:lazyContent:)(0, 0, 0, 0, 0, 0, sub_1000D325C, v15, v41, v27);
  v28 = (uint64_t *)(v42 + *(int *)(v43 + 32));
  v30 = *v28;
  v29 = v28[1];
  v49 = v30;
  v50 = v29;
  sub_100004FC8(&qword_10015BE70);
  State.wrappedValue.getter(&v48);
  v31 = v48;
  v32 = type metadata accessor for SettingsAppModel(0);
  v33 = sub_100007868(&qword_10015BE78, &qword_10015BE38, (uint64_t)&protocol conformance descriptor for WindowGroup<A>);
  v34 = sub_100007828((unint64_t *)&qword_100159090, type metadata accessor for SettingsAppModel, (uint64_t)&unk_10011AF44);
  v35 = v44;
  Scene.environment<A>(_:)(v31, v5, v32, v33, v34);
  swift_release(v31);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v7, v5);
  v36 = v45;
  (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v12, v35, v8);
  v49 = v5;
  v50 = v32;
  v51 = v33;
  v52 = v34;
  v37 = swift_getOpaqueTypeConformance2(&v49, &opaque type descriptor for <<opaque return type of Scene.environment<A>(_:)>>, 1);
  static SceneBuilder.buildBlock<A>(_:)(v12, v8, v37);
  return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v12, v8);
}

uint64_t sub_1000D1990@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char *v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t OpaqueTypeConformance2;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  int **v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  int *v56;
  uint64_t v57;
  int **v58;
  uint64_t v59;
  int *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD v85[2];

  v68 = a1;
  v80 = a2;
  v3 = type metadata accessor for SettingsApp(0);
  v4 = *(_QWORD *)(v3 - 8);
  v70 = v3;
  v71 = v4;
  v5 = v3;
  v72 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v7 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (int *)type metadata accessor for SettingsNavigationSplitView(0);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v73 = sub_100004FC8(&qword_10015BE60);
  v75 = *(_QWORD *)(v73 - 8);
  __chkstk_darwin(v73);
  v12 = (char *)&v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100004FC8(&qword_10015BE58);
  v14 = *(_QWORD *)(v13 - 8);
  v76 = v13;
  v77 = v14;
  __chkstk_darwin(v13);
  v69 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100004FC8(&qword_10015BE50);
  v17 = *(_QWORD *)(v16 - 8);
  v78 = v16;
  v79 = v17;
  __chkstk_darwin(v16);
  v74 = (char *)&v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (int **)(a1 + *(int *)(v5 + 32));
  v20 = (uint64_t)v19[1];
  v81 = *v19;
  v82 = v20;
  sub_100004FC8(&qword_10015BE70);
  State.wrappedValue.getter(v85);
  v21 = v85[0];
  v22 = *(_QWORD *)(v85[0] + 32);
  swift_retain(v22);
  swift_release(v21);
  *v10 = swift_getKeyPath(&unk_10011AC30);
  v10[1] = swift_getKeyPath(&unk_10011AC50);
  v23 = (_QWORD *)((char *)v10 + v8[6]);
  *v23 = swift_getKeyPath(&unk_10011AC70);
  v24 = sub_100004FC8(&qword_100158D30);
  swift_storeEnumTagMultiPayload(v23, v24, 0);
  v25 = (char *)v10 + v8[7];
  v26 = type metadata accessor for SettingsAppModel(0);
  v27 = sub_100007828((unint64_t *)&qword_100159090, type metadata accessor for SettingsAppModel, (uint64_t)&unk_10011AF44);
  *(_QWORD *)v25 = Environment.init<A>(_:)(v26, v26, v27);
  v25[8] = v28 & 1;
  v29 = (char *)v10 + v8[8];
  v30 = type metadata accessor for SettingsAppSearchViewModel(0);
  v67 = sub_100007828(&qword_100158B50, type metadata accessor for SettingsAppSearchViewModel, (uint64_t)&unk_1001166F4);
  *(_QWORD *)v29 = Environment.init<A>(_:)(v30, v30, v67);
  v29[8] = v31 & 1;
  *(_QWORD *)((char *)v10 + v8[9]) = 0;
  v32 = type metadata accessor for SettingsAppNavigationModel(0);
  v33 = sub_100007828((unint64_t *)&qword_100158F78, type metadata accessor for SettingsAppNavigationModel, (uint64_t)&unk_10011B030);
  Bindable<A>.init(wrappedValue:)(v22, v32, v33);
  v34 = (uint64_t)v19[1];
  v81 = *v19;
  v82 = v34;
  State.wrappedValue.getter(v85);
  v35 = v85[0];
  v36 = sub_100007828(&qword_10015BE68, type metadata accessor for SettingsNavigationSplitView, (uint64_t)&unk_100116918);
  View.onOpenURL(perform:)(sub_1000D32B8, v35, v8, v36);
  swift_release(v35);
  sub_1000D32BC((uint64_t)v10);
  v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(CSSearchableItemActionType);
  v39 = v38;
  v40 = v68;
  sub_1000D31D0(v68, (uint64_t)v7);
  v41 = *(unsigned __int8 *)(v71 + 80);
  v42 = (v41 + 16) & ~v41;
  v43 = swift_allocObject(&unk_10014D878, v42 + v72, v41 | 7);
  sub_1000D3218((uint64_t)v7, v43 + v42);
  v81 = v8;
  v82 = v36;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v81, &opaque type descriptor for <<opaque return type of View.onOpenURL(perform:)>>, 1);
  v45 = v69;
  v46 = v37;
  v47 = v73;
  View.onContinueUserActivity(_:perform:)(v46, v39, sub_1000D33DC, v43, v73, OpaqueTypeConformance2);
  swift_bridgeObjectRelease(v39);
  swift_release(v43);
  v48 = (int *)v47;
  (*(void (**)(char *, uint64_t))(v75 + 8))(v12, v47);
  v49 = v70;
  v50 = (int **)(v40 + *(int *)(v70 + 24));
  v52 = *v50;
  v51 = (uint64_t)v50[1];
  v81 = v52;
  v82 = v51;
  sub_100004FC8(&qword_10015BE80);
  State.wrappedValue.getter(v85);
  v53 = v85[0];
  v81 = v48;
  v82 = OpaqueTypeConformance2;
  v54 = swift_getOpaqueTypeConformance2(&v81, &opaque type descriptor for <<opaque return type of View.onContinueUserActivity(_:perform:)>>, 1);
  v55 = v74;
  v56 = (int *)v76;
  v57 = v67;
  View.environment<A>(_:)(v53, v76, v30, v54, v67);
  swift_release(v53);
  (*(void (**)(char *, int *))(v77 + 8))(v45, v56);
  v58 = (int **)(v40 + *(int *)(v49 + 28));
  v60 = *v58;
  v59 = (uint64_t)v58[1];
  v81 = v60;
  v82 = v59;
  sub_100004FC8(&qword_10015BE88);
  State.wrappedValue.getter(v85);
  v61 = v85[0];
  v62 = type metadata accessor for SettingsZeroKeywordNavigationItemsProvider(0);
  v81 = v56;
  v82 = v30;
  v83 = v54;
  v84 = v57;
  v63 = swift_getOpaqueTypeConformance2(&v81, &opaque type descriptor for <<opaque return type of View.environment<A>(_:)>>, 1);
  v64 = sub_100007828(&qword_100159FB0, (uint64_t (*)(uint64_t))&type metadata accessor for SettingsZeroKeywordNavigationItemsProvider, (uint64_t)&protocol conformance descriptor for SettingsZeroKeywordNavigationItemsProvider);
  v65 = v78;
  View.environment<A>(_:)(v61, v78, v62, v63, v64);
  swift_release(v61);
  return (*(uint64_t (**)(char *, uint64_t))(v79 + 8))(v55, v65);
}

uint64_t sub_1000D1F20(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t result;
  uint64_t v18;
  uint64_t *v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[2];
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;

  v4 = sub_100004FC8((uint64_t *)&unk_10015C9A0);
  __chkstk_darwin(v4);
  v6 = (char *)&v26[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v26[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = objc_msgSend(a1, "userInfo");
  if (!v11)
  {
    v29 = 0u;
    v30 = 0u;
LABEL_11:
    v19 = &qword_10015BA90;
    v20 = (char *)&v29;
    return sub_10000BA50((uint64_t)v20, v19);
  }
  v12 = v11;
  v13 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v11, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

  v26[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(CSSearchableItemActivityIdentifier);
  v26[1] = v14;
  AnyHashable.init<A>(_:)(&v27, v26, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v13 + 16) && (v15 = sub_1000DA95C((uint64_t)&v27), (v16 & 1) != 0))
  {
    sub_1000148AC(*(_QWORD *)(v13 + 56) + 32 * v15, (uint64_t)&v29);
  }
  else
  {
    v29 = 0u;
    v30 = 0u;
  }
  sub_100014878((uint64_t)&v27);
  swift_bridgeObjectRelease(v13);
  if (!*((_QWORD *)&v30 + 1))
    goto LABEL_11;
  result = swift_dynamicCast(&v27, &v29, (char *)&type metadata for Any + 8, &type metadata for String, 6);
  if ((result & 1) == 0)
    return result;
  v18 = v28;
  URL.init(string:)(v27, v28);
  swift_bridgeObjectRelease(v18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    v21 = (uint64_t *)(a2 + *(int *)(type metadata accessor for SettingsApp(0) + 32));
    v23 = *v21;
    v22 = v21[1];
    v27 = v23;
    v28 = v22;
    sub_100004FC8(&qword_10015BE70);
    State.wrappedValue.getter(&v29);
    v24 = v29;
    sub_1000D8D44((uint64_t)v10);
    swift_release(v24);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  v19 = (uint64_t *)&unk_10015C9A0;
  v20 = v6;
  return sub_10000BA50((uint64_t)v20, v19);
}

uint64_t ScenePhase.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  uint64_t v8;

  v1 = v0;
  v2 = type metadata accessor for ScenePhase(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == enum case for ScenePhase.background(_:))
    return 0x756F72676B636162;
  if (v6 == enum case for ScenePhase.inactive(_:))
    return 0x6576697463616E69;
  if (v6 == enum case for ScenePhase.active(_:))
    return 0x657669746361;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return 0x6E776F6E6B6E75;
}

uint64_t sub_1000D22AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  int v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 - 8);
  __chkstk_darwin();
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v2 + 16))(v4);
  v5 = (*(uint64_t (**)(char *, uint64_t))(v2 + 88))(v4, a1);
  if (v5 == enum case for ScenePhase.background(_:))
    return 0x756F72676B636162;
  if (v5 == enum case for ScenePhase.inactive(_:))
    return 0x6576697463616E69;
  if (v5 == enum case for ScenePhase.active(_:))
    return 0x657669746361;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  return 0x6E776F6E6B6E75;
}

uint64_t *sub_1000D23CC(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v26 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v26 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_100004FC8(&qword_10015BD58);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v4, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (uint64_t *)((char *)v4 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = *v11;
    v13 = v11[1];
    *v10 = *v11;
    v10[1] = v13;
    v14 = (uint64_t *)((char *)v4 + v9);
    v15 = (uint64_t *)((char *)a2 + v9);
    v16 = *v15;
    v17 = v15[1];
    *v14 = *v15;
    v14[1] = v17;
    v18 = a3[7];
    v19 = a3[8];
    v20 = (uint64_t *)((char *)v4 + v18);
    v21 = (uint64_t *)((char *)a2 + v18);
    v22 = *v21;
    v23 = v21[1];
    *v20 = *v21;
    v20[1] = v23;
    v24 = (uint64_t *)((char *)v4 + v19);
    v25 = (uint64_t *)((char *)a2 + v19);
    v27 = *v25;
    v26 = v25[1];
    *v24 = *v25;
    v24[1] = v26;
    swift_retain(v12);
    swift_retain(v13);
    swift_retain(v16);
    swift_retain(v17);
    swift_retain(v22);
    swift_retain(v23);
    swift_retain(v27);
  }
  swift_retain(v26);
  return v4;
}

uint64_t sub_1000D24DC(uint64_t a1, int *a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;

  v4 = sub_100004FC8(&qword_10015BD58);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = (_QWORD *)(a1 + a2[5]);
  swift_release(*v5);
  swift_release(v5[1]);
  v6 = (_QWORD *)(a1 + a2[6]);
  swift_release(*v6);
  swift_release(v6[1]);
  v7 = (_QWORD *)(a1 + a2[7]);
  swift_release(*v7);
  swift_release(v7[1]);
  v8 = (_QWORD *)(a1 + a2[8]);
  swift_release(*v8);
  return swift_release(v8[1]);
}

uint64_t sub_1000D2580(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;

  v6 = sub_100004FC8(&qword_10015BD58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (uint64_t *)(a1 + v7);
  v10 = (uint64_t *)(a2 + v7);
  v11 = *v10;
  v12 = v10[1];
  *v9 = *v10;
  v9[1] = v12;
  v13 = (uint64_t *)(a1 + v8);
  v14 = (uint64_t *)(a2 + v8);
  v15 = *v14;
  v16 = v14[1];
  *v13 = *v14;
  v13[1] = v16;
  v17 = a3[7];
  v18 = a3[8];
  v19 = (uint64_t *)(a1 + v17);
  v20 = (uint64_t *)(a2 + v17);
  v21 = *v20;
  v22 = v20[1];
  *v19 = *v20;
  v19[1] = v22;
  v23 = (uint64_t *)(a1 + v18);
  v24 = (uint64_t *)(a2 + v18);
  v25 = *v24;
  v26 = v24[1];
  *v23 = *v24;
  v23[1] = v26;
  swift_retain(v11);
  swift_retain(v12);
  swift_retain(v15);
  swift_retain(v16);
  swift_retain(v21);
  swift_retain(v22);
  swift_retain(v25);
  swift_retain(v26);
  return a1;
}

uint64_t sub_1000D2668(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = sub_100004FC8(&qword_10015BD58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)(a2 + v7);
  v11 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v10;
  swift_retain(v10);
  swift_release(v11);
  v12 = *(_QWORD *)(v8 + 8);
  v13 = *(_QWORD *)(v9 + 8);
  *(_QWORD *)(v8 + 8) = v13;
  swift_retain(v13);
  swift_release(v12);
  v14 = a3[6];
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = *(_QWORD *)(a2 + v14);
  v18 = *(_QWORD *)(a1 + v14);
  *(_QWORD *)(a1 + v14) = v17;
  swift_retain(v17);
  swift_release(v18);
  v19 = *(_QWORD *)(v15 + 8);
  v20 = *(_QWORD *)(v16 + 8);
  *(_QWORD *)(v15 + 8) = v20;
  swift_retain(v20);
  swift_release(v19);
  v21 = a3[7];
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = *(_QWORD *)(a2 + v21);
  v25 = *(_QWORD *)(a1 + v21);
  *(_QWORD *)(a1 + v21) = v24;
  swift_retain(v24);
  swift_release(v25);
  v26 = *(_QWORD *)(v22 + 8);
  v27 = *(_QWORD *)(v23 + 8);
  *(_QWORD *)(v22 + 8) = v27;
  swift_retain(v27);
  swift_release(v26);
  v28 = a3[8];
  v29 = a1 + v28;
  v30 = a2 + v28;
  v31 = *(_QWORD *)(a2 + v28);
  v32 = *(_QWORD *)(a1 + v28);
  *(_QWORD *)(a1 + v28) = v31;
  swift_retain(v31);
  swift_release(v32);
  v33 = *(_QWORD *)(v29 + 8);
  v34 = *(_QWORD *)(v30 + 8);
  *(_QWORD *)(v29 + 8) = v34;
  swift_retain(v34);
  swift_release(v33);
  return a1;
}

uint64_t sub_1000D27B4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_100004FC8(&qword_10015BD58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  return a1;
}

uint64_t sub_1000D2830(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;

  v6 = sub_100004FC8(&qword_10015BD58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  swift_release(v10);
  v11 = *(_QWORD *)(v8 + 8);
  *(_QWORD *)(v8 + 8) = *(_QWORD *)(v9 + 8);
  swift_release(v11);
  v12 = a3[6];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = *(_QWORD *)(a1 + v12);
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);
  swift_release(v15);
  v16 = *(_QWORD *)(v13 + 8);
  *(_QWORD *)(v13 + 8) = *(_QWORD *)(v14 + 8);
  swift_release(v16);
  v17 = a3[7];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = *(_QWORD *)(a1 + v17);
  *(_QWORD *)(a1 + v17) = *(_QWORD *)(a2 + v17);
  swift_release(v20);
  v21 = *(_QWORD *)(v18 + 8);
  *(_QWORD *)(v18 + 8) = *(_QWORD *)(v19 + 8);
  swift_release(v21);
  v22 = a3[8];
  v23 = a1 + v22;
  v24 = (_QWORD *)(a2 + v22);
  v25 = *(_QWORD *)(a1 + v22);
  *(_QWORD *)(a1 + v22) = *v24;
  swift_release(v25);
  v26 = *(_QWORD *)(v23 + 8);
  *(_QWORD *)(v23 + 8) = v24[1];
  swift_release(v26);
  return a1;
}

uint64_t sub_1000D293C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D2948);
}

uint64_t sub_1000D2948(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_100004FC8(&qword_10015BD58);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1000D29C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D29D4);
}

uint64_t sub_1000D29D4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100004FC8(&qword_10015BD58);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for SettingsApp(uint64_t a1)
{
  uint64_t result;

  result = qword_10015BDB8;
  if (!qword_10015BDB8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SettingsApp);
  return result;
}

void sub_1000D2A8C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  sub_1000D2B04(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = &unk_10011ABB8;
    v4[2] = &unk_10011ABB8;
    v4[3] = &unk_10011ABB8;
    v4[4] = &unk_10011ABB8;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
  }
}

void sub_1000D2B04(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10015BDC8)
  {
    v2 = type metadata accessor for SettingsApplicationDelegate(255);
    v3 = type metadata accessor for UIApplicationDelegateAdaptor(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10015BDC8);
  }
}

uint64_t sub_1000D2B58(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10012BA74, 1);
}

uint64_t sub_1000D2B68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_1000D2B90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  id v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68[3];
  _QWORD v69[6];

  v8 = sub_100004FC8((uint64_t *)&unk_10015C970);
  __chkstk_darwin(v8);
  v62 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS.QoSClass(0);
  v59 = *(_QWORD *)(v10 - 8);
  v60 = v10;
  __chkstk_darwin(v10);
  v57 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
  v64 = *(_QWORD *)(v12 - 8);
  v65 = v12;
  __chkstk_darwin(v12);
  v56 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = type metadata accessor for NSNotificationCenter.Publisher(0);
  v63 = *(_QWORD *)(v61 - 8);
  __chkstk_darwin(v61);
  v55 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100004FC8(&qword_10015BE10);
  v16 = *(_QWORD *)(v15 - 8);
  v66 = v15;
  v67 = v16;
  __chkstk_darwin(v15);
  v58 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v53 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v19 = (char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v20);
  v22 = (char *)&v53 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v23);
  v25 = (char *)&v53 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69[3] = type metadata accessor for PrimarySettingsListModel(0);
  v69[4] = &off_10014DEE0;
  v69[0] = a1;
  *(_QWORD *)(a4 + 16) = sub_10004A1DC();
  *(_WORD *)(a4 + 80) = 0;
  *(_QWORD *)(a4 + 112) = 0;
  *(_QWORD *)(a4 + 88) = 0;
  *(_QWORD *)(a4 + 96) = 0;
  *(_QWORD *)(a4 + 128) = 0;
  *(_QWORD *)(a4 + 136) = 0xE000000000000000;
  v26 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v27 = type metadata accessor for LinkMetadataIndexer(0);
  swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
  v28 = LinkMetadataIndexer.init(with:)(v26);
  *(_QWORD *)(a4 + 160) = &_swiftEmptySetSingleton;
  *(_QWORD *)(a4 + 144) = v28;
  *(_QWORD *)(a4 + 152) = _swiftEmptyArrayStorage;
  *(_BYTE *)(a4 + 168) = 1;
  ObservationRegistrar.init()(v28);
  sub_10003CE00((uint64_t)v69, a4 + 40);
  *(_QWORD *)(a4 + 24) = a2;
  *(_QWORD *)(a4 + 32) = a3;
  v29 = sub_100005494();
  swift_retain(a3);
  static DispatchQoS.unspecified.getter(v30);
  v68[0] = _swiftEmptyArrayStorage;
  v31 = sub_100007828((unint64_t *)&qword_10015BE18, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v32 = sub_100004FC8(&qword_10015BE20);
  v33 = sub_100007868((unint64_t *)&qword_10015BE28, &qword_10015BE20, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(v68, v32, v33, v20, v31);
  (*(void (**)(char *, _QWORD, uint64_t))(v53 + 104))(v19, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v54);
  v34 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0x7565755120545050, 0xE900000000000065, v25, v22, v19, 0);
  *(_QWORD *)(a4 + 104) = v34;
  dispatch_suspend(v34);
  *(_QWORD *)(a4 + 120) = &_swiftEmptyDictionarySingleton;
  v35 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  v36 = v55;
  NSNotificationCenter.publisher(for:object:)(PSLaunchHasCompletedNotification, 0);

  v37 = v56;
  static OS_dispatch_queue.SchedulerTimeType.Stride.milliseconds(_:)(500);
  v39 = v59;
  v38 = v60;
  v40 = v57;
  (*(void (**)(char *, _QWORD, uint64_t))(v59 + 104))(v57, enum case for DispatchQoS.QoSClass.userInitiated(_:), v60);
  v41 = (void *)static OS_dispatch_queue.global(qos:)(v40);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v38);
  v68[0] = v41;
  v42 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v43 = (uint64_t)v62;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v62, 1, 1, v42);
  v44 = sub_100007828((unint64_t *)&unk_100156F20, (uint64_t (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Publisher, (uint64_t)&protocol conformance descriptor for NSNotificationCenter.Publisher);
  v45 = sub_100007828((unint64_t *)&qword_10015C990, (uint64_t (*)(uint64_t))sub_100005494, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  v46 = v58;
  v47 = v61;
  Publisher.debounce<A>(for:scheduler:options:)(v37, v68, v43, v61, v29, v44, v45);
  sub_10000BA50(v43, (uint64_t *)&unk_10015C970);

  (*(void (**)(char *, uint64_t))(v64 + 8))(v37, v65);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v36, v47);
  v48 = swift_allocObject(&unk_10014D828, 24, 7);
  swift_weakInit(v48 + 16, a4);
  v49 = sub_100007868(&qword_10015BE30, &qword_10015BE10, (uint64_t)&protocol conformance descriptor for Publishers.Debounce<A, B>);
  v50 = v66;
  v51 = Publisher<>.sink(receiveValue:)(sub_1000D31C8, v48, v66, v49);
  swift_release(v48);
  (*(void (**)(char *, uint64_t))(v67 + 8))(v46, v50);
  swift_beginAccess(a4 + 160, v68, 33, 0);
  AnyCancellable.store(in:)(a4 + 160);
  swift_endAccess(v68);
  swift_release(v51);
  sub_100005474(v69);
  return a4;
}

uint64_t sub_1000D31A4()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000D31C8(uint64_t a1)
{
  uint64_t v1;

  return sub_10004D12C(a1, v1);
}

uint64_t sub_1000D31D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SettingsApp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D3218(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SettingsApp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D325C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SettingsApp(0) - 8) + 80);
  return sub_1000D1990(v1 + ((v3 + 16) & ~v3), a1);
}

uint64_t sub_1000D3298()
{
  return EnvironmentValues.withCurrentHostingController.getter();
}

uint64_t sub_1000D32BC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SettingsNavigationSplitView(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000D32FC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;

  v1 = (int *)type metadata accessor for SettingsApp(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  v8 = sub_100004FC8(&qword_10015BD58);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = (_QWORD *)(v7 + v1[5]);
  swift_release(*v9);
  swift_release(v9[1]);
  v10 = (_QWORD *)(v7 + v1[6]);
  swift_release(*v10);
  swift_release(v10[1]);
  v11 = (_QWORD *)(v7 + v1[7]);
  swift_release(*v11);
  swift_release(v11[1]);
  v12 = (_QWORD *)(v7 + v1[8]);
  swift_release(*v12);
  swift_release(v12[1]);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000D33DC(void *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SettingsApp(0) - 8) + 80);
  return sub_1000D1F20(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_1000D3418()
{
  _QWORD v1[4];

  v1[0] = sub_100005430(&qword_10015BE38);
  v1[1] = type metadata accessor for SettingsAppModel(255);
  v1[2] = sub_100007868(&qword_10015BE78, &qword_10015BE38, (uint64_t)&protocol conformance descriptor for WindowGroup<A>);
  v1[3] = sub_100007828((unint64_t *)&qword_100159090, type metadata accessor for SettingsAppModel, (uint64_t)&unk_10011AF44);
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of Scene.environment<A>(_:)>>, 1);
}

uint64_t sub_1000D34BC(uint64_t a1)
{
  return sub_1000D3504(a1, 0xD000000000000028, 0x80000001001268F0, &qword_10015D420);
}

uint64_t sub_1000D34E0(uint64_t a1)
{
  return sub_1000D3504(a1, 0xD000000000000026, 0x8000000100126920, &qword_10015D428);
}

uint64_t sub_1000D3504(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  void *v22;

  v20 = a3;
  v21 = a4;
  v5 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005494();
  static DispatchQoS.userInteractive.getter();
  v22 = &_swiftEmptyArrayStorage;
  v15 = sub_100005008();
  v16 = sub_100004FC8(&qword_10015BE20);
  v17 = sub_1000054D0();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v16, v17, v9, v15);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v5);
  result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(a2, v20, v14, v11, v8, 0);
  *v21 = result;
  return result;
}

ValueMetadata *type metadata accessor for FinishSetupURLRoute()
{
  return &type metadata for FinishSetupURLRoute;
}

void sub_1000D369C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(char *, unint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  void (*v70)(char *, uint64_t, uint64_t);
  char *v71;
  uint64_t v72;
  int *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;

  v88 = a2;
  v77 = type metadata accessor for SettingsURLDestination.Action(0);
  __chkstk_darwin(v77);
  v78 = (char *)&v77 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100004FC8(&qword_10015C510);
  __chkstk_darwin(v4);
  v81 = (char *)&v77 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = type metadata accessor for URLQueryItem(0);
  v6 = *(_QWORD *)(v90 - 8);
  v7 = __chkstk_darwin(v90);
  v9 = (char *)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v77 - v10;
  v12 = sub_100004FC8(&qword_1001570F0);
  __chkstk_darwin(v12);
  v86 = (char *)&v77 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for URLComponents(0);
  v89 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v85 = (char *)&v77 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for URL(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v79 = (char *)&v77 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v87 = (uint64_t)&v77 - v20;
  if (qword_100156CB0 != -1)
    swift_once(&qword_100156CB0, sub_10008BE28);
  v21 = type metadata accessor for Logger(0);
  v22 = sub_100007808(v21, (uint64_t)qword_10015D2C8);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.default.getter();
  v25 = os_log_type_enabled(v23, v24);
  v80 = v11;
  if (v25)
  {
    v26 = swift_slowAlloc(22, -1);
    v82 = v17;
    v83 = a1;
    v27 = v26;
    v28 = swift_slowAlloc(64, -1);
    v92 = v28;
    *(_DWORD *)v27 = 136315394;
    v91 = sub_1000DA1F0(0xD000000000000018, 0x8000000100126950, &v92);
    v84 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92, v27 + 4, v27 + 12);
    *(_WORD *)(v27 + 12) = 2080;
    v91 = sub_1000DA1F0(0xD000000000000026, 0x800000010011FD10, &v92);
    v14 = v84;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92, v27 + 14, v27 + 22);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Start (%s.%s)…", (uint8_t *)v27, 0x16u);
    swift_arrayDestroy(v28, 2, (char *)&type metadata for Any + 8);
    v29 = v88;
    swift_slowDealloc(v28, -1, -1);
    v30 = v27;
    v17 = v82;
    v31 = v83;
    swift_slowDealloc(v30, -1, -1);

  }
  else
  {

    v29 = v88;
    v31 = a1;
  }
  v32 = v87;
  v33 = v31;
  v34 = sub_100019DF4(v87);
  v35 = URL.absoluteString.getter(v34);
  v37 = v36;
  v38 = (uint64_t)v86;
  URLComponents.init(string:)(v35);
  swift_bridgeObjectRelease(v37);
  v39 = v89;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v89 + 48))(v38, 1, v14) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v32, v16);
    v40 = &qword_1001570F0;
LABEL_24:
    sub_10000BA50(v38, v40);
LABEL_33:
    v76 = sub_100004FC8(&qword_1001570F8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 56))(v29, 1, 1, v76);
    goto LABEL_34;
  }
  v41 = v38;
  v42 = v85;
  v43 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v39 + 32))(v85, v41, v14);
  v44 = URLComponents.percentEncodedQueryItems.getter(v43);
  v45 = v14;
  if (!v44)
  {
    (*(void (**)(char *, uint64_t))(v39 + 8))(v42, v14);
LABEL_32:
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v32, v16);
    goto LABEL_33;
  }
  v46 = v44;
  v47 = v29;
  v84 = v45;
  v48 = *(_QWORD *)(v44 + 16);
  if (v48)
  {
    v82 = v17;
    v83 = v33;
    v86 = (char *)v16;
    v49 = v44 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v50 = *(_QWORD *)(v6 + 72);
    v51 = v6;
    v52 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v6 + 16);
    swift_bridgeObjectRetain(v44);
    while (1)
    {
      v53 = v52(v9, v49, v90);
      v54 = URLQueryItem.name.getter(v53);
      v56 = v55;
      if (v54 == 1953460082 && v55 == 0xE400000000000000)
      {
        swift_bridgeObjectRelease(v46);
        v60 = 0xE400000000000000;
        goto LABEL_21;
      }
      v57 = _stringCompareWithSmolCheck(_:_:expecting:)(v54, v55, 1953460082, 0xE400000000000000, 0);
      swift_bridgeObjectRelease(v56);
      if ((v57 & 1) != 0)
        break;
      (*(void (**)(char *, uint64_t))(v51 + 8))(v9, v90);
      v49 += v50;
      if (!--v48)
      {
        swift_bridgeObjectRelease(v46);
        v58 = 1;
        v32 = v87;
        v29 = v88;
        v16 = (uint64_t)v86;
        v6 = v51;
        v17 = v82;
        v33 = v83;
        goto LABEL_18;
      }
    }
    v60 = v46;
LABEL_21:
    v59 = v89;
    swift_bridgeObjectRelease(v60);
    v6 = v51;
    v38 = (uint64_t)v81;
    (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v81, v9, v90);
    v58 = 0;
    v32 = v87;
    v29 = v88;
    v17 = v82;
    v33 = v83;
    v16 = (uint64_t)v86;
  }
  else
  {
    v58 = 1;
    v29 = v47;
LABEL_18:
    v59 = v89;
    v38 = (uint64_t)v81;
  }
  v61 = v90;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v38, v58, 1, v90);
  swift_bridgeObjectRelease(v46);
  v62 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v38, 1, v61);
  v63 = v85;
  if (v62 == 1)
  {
    (*(void (**)(char *, uint64_t))(v59 + 8))(v85, v84);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v32, v16);
    v40 = &qword_10015C510;
    goto LABEL_24;
  }
  v64 = v80;
  v65 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 32))(v80, v38, v90);
  v66 = URLQueryItem.value.getter(v65);
  if (!v67)
  {
LABEL_31:
    (*(void (**)(char *, uint64_t))(v6 + 8))(v64, v90);
    (*(void (**)(char *, uint64_t))(v89 + 8))(v63, v84);
    goto LABEL_32;
  }
  v68 = v67;
  if (v66 != 0x49465F5055544553 || v67 != 0xEC0000004853494ELL)
  {
    v69 = _stringCompareWithSmolCheck(_:_:expecting:)(v66, v67, 0x49465F5055544553, 0xEC0000004853494ELL, 0);
    swift_bridgeObjectRelease(v68);
    if ((v69 & 1) != 0)
      goto LABEL_30;
    goto LABEL_31;
  }
  swift_bridgeObjectRelease(0xEC0000004853494ELL);
LABEL_30:
  v70 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v70(v79, v33, v16);
  v71 = v63;
  v72 = (uint64_t)v78;
  v70(v78, v33, v16);
  swift_storeEnumTagMultiPayload(v72, v77, 2);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v64, v90);
  (*(void (**)(char *, uint64_t))(v89 + 8))(v71, v84);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v32, v16);
  v73 = (int *)type metadata accessor for SettingsURLDestination(0);
  v74 = (_QWORD *)(v29 + v73[7]);
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v29, v79, v16);
  sub_100043CA8(v72, v29 + v73[5]);
  *(_QWORD *)(v29 + v73[6]) = _swiftEmptyArrayStorage;
  *v74 = 0;
  v74[1] = 0;
  v75 = sub_100004FC8(&qword_1001570F8);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 56))(v29, 0, 1, v75);
LABEL_34:
  sub_1000D43BC();
}

uint64_t sub_1000D3E64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(char *, unint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v0 = sub_100004FC8(&qword_10015C510);
  __chkstk_darwin(v0);
  v57 = (char *)&v54 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for URLQueryItem(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v54 - v7;
  v9 = sub_100004FC8(&qword_1001570F0);
  __chkstk_darwin(v9);
  v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for URLComponents(0);
  v61 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v58 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for URL(0);
  v60 = *(_QWORD *)(v14 - 8);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.scheme.getter(v15);
  if (!v18)
  {
    v22 = 0;
    return v22 & 1;
  }
  v19 = v18;
  v59 = v12;
  v55 = v8;
  v56 = v14;
  v20 = String.lowercased()();
  swift_bridgeObjectRelease(v19);
  if (v20._countAndFlagsBits == 0x7366657270 && v20._object == (void *)0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    v21 = v59;
  }
  else
  {
    v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v20._countAndFlagsBits, v20._object, 0x7366657270, 0xE500000000000000, 0);
    swift_bridgeObjectRelease(v20._object);
    v22 = 0;
    v21 = v59;
    if ((v23 & 1) == 0)
      return v22 & 1;
  }
  v24 = sub_100019DF4((uint64_t)v17);
  v25 = URL.absoluteString.getter(v24);
  v27 = v26;
  URLComponents.init(string:)(v25);
  swift_bridgeObjectRelease(v27);
  v28 = v61;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v11, 1, v21) == 1)
  {
    (*(void (**)(char *, uint64_t))(v60 + 8))(v17, v56);
    v29 = &qword_1001570F0;
    v30 = (uint64_t)v11;
LABEL_25:
    sub_10000BA50(v30, v29);
    v22 = 0;
    return v22 & 1;
  }
  v31 = v58;
  v32 = (*(uint64_t (**)(char *, char *, uint64_t))(v28 + 32))(v58, v11, v21);
  v33 = URLComponents.percentEncodedQueryItems.getter(v32);
  if (!v33)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v31, v21);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v17, v56);
LABEL_31:
    v22 = 0;
    return v22 & 1;
  }
  v34 = v33;
  v35 = *(_QWORD *)(v33 + 16);
  if (v35)
  {
    v36 = v33 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v37 = *(_QWORD *)(v3 + 72);
    v38 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v3 + 16);
    v54 = v33;
    swift_bridgeObjectRetain(v33);
    while (1)
    {
      v39 = v38(v6, v36, v2);
      v40 = URLQueryItem.name.getter(v39);
      v42 = v41;
      if (v40 == 1953460082 && v41 == 0xE400000000000000)
      {
        v34 = v54;
        swift_bridgeObjectRelease(v54);
        v48 = 0xE400000000000000;
        goto LABEL_22;
      }
      v43 = _stringCompareWithSmolCheck(_:_:expecting:)(v40, v41, 1953460082, 0xE400000000000000, 0);
      swift_bridgeObjectRelease(v42);
      if ((v43 & 1) != 0)
        break;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
      v36 += v37;
      if (!--v35)
      {
        v34 = v54;
        swift_bridgeObjectRelease(v54);
        v44 = 1;
        v46 = v55;
        v45 = v56;
        v28 = v61;
        goto LABEL_19;
      }
    }
    v34 = v54;
    v48 = v54;
LABEL_22:
    v46 = v55;
    swift_bridgeObjectRelease(v48);
    v47 = v57;
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v57, v6, v2);
    v44 = 0;
    v45 = v56;
    v28 = v61;
  }
  else
  {
    v44 = 1;
    v46 = v55;
    v45 = v56;
LABEL_19:
    v47 = v57;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v47, v44, 1, v2);
  swift_bridgeObjectRelease(v34);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v47, 1, v2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v58, v59);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v17, v45);
    v29 = &qword_10015C510;
    v30 = (uint64_t)v47;
    goto LABEL_25;
  }
  v49 = (*(uint64_t (**)(char *, char *, uint64_t))(v3 + 32))(v46, v47, v2);
  v50 = URLQueryItem.value.getter(v49);
  if (!v51)
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v46, v2);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v58, v59);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v17, v45);
    goto LABEL_31;
  }
  v52 = v51;
  if (v50 == 0x49465F5055544553 && v51 == 0xEC0000004853494ELL)
    v22 = 1;
  else
    v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v50, v51, 0x49465F5055544553, 0xEC0000004853494ELL, 0);
  swift_bridgeObjectRelease(v52);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v46, v2);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v58, v59);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v17, v45);
  return v22 & 1;
}

void sub_1000D43BC()
{
  uint64_t v0;
  uint64_t v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *oslog;
  uint64_t v6;
  uint64_t v7;

  if (qword_100156CB0 != -1)
    swift_once(&qword_100156CB0, sub_10008BE28);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_100007808(v0, (uint64_t)qword_10015D2C8);
  oslog = Logger.logObject.getter(v1);
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v2))
  {
    v3 = swift_slowAlloc(22, -1);
    v4 = swift_slowAlloc(64, -1);
    v7 = v4;
    *(_DWORD *)v3 = 136315394;
    v6 = sub_1000DA1F0(0xD000000000000018, 0x8000000100126950, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v6, &v7, v3 + 4, v3 + 12);
    *(_WORD *)(v3 + 12) = 2080;
    v6 = sub_1000DA1F0(0xD000000000000026, 0x800000010011FD10, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v6, &v7, v3 + 14, v3 + 22);
    _os_log_impl((void *)&_mh_execute_header, oslog, v2, "…Complete (%s.%s)", (uint8_t *)v3, 0x16u);
    swift_arrayDestroy(v4, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v4, -1, -1);
    swift_slowDealloc(v3, -1, -1);

  }
  else
  {

  }
}

uint64_t sub_1000D4588()
{
  return sub_1000D45A8();
}

uint64_t sub_1000D45A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD aBlock[5];
  uint64_t v20;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100005494();
  v11 = (void *)static OS_dispatch_queue.main.getter(v10);
  aBlock[4] = sub_1000D49C0;
  v20 = v0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100005350;
  aBlock[3] = &unk_10014D930;
  v12 = _Block_copy(aBlock);
  v13 = v20;
  swift_retain(v1);
  v14 = swift_release(v13);
  static DispatchQoS.unspecified.getter(v14);
  aBlock[0] = _swiftEmptyArrayStorage;
  v15 = sub_100012ED8();
  v16 = sub_100004FC8((uint64_t *)&unk_100156F40);
  v17 = sub_10000551C();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v16, v17, v2, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v5, v12);
  _Block_release(v12);

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_1000D475C(uint64_t a1)
{
  sub_100007C2C((_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 72));
  type metadata accessor for PrimarySettingsListModel(0);
  return sub_100103798((uint64_t)"Remote Control", 14, 2);
}

uint64_t sub_1000D47C0()
{
  uint64_t v0;

  sub_10000BAE4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  sub_100005474((_QWORD *)(v0 + 48));
  return swift_deallocClassInstance(v0, 88, 7);
}

uint64_t type metadata accessor for RemoteControlSectionModelProvider()
{
  return objc_opt_self(_TtC11SettingsApp33RemoteControlSectionModelProvider);
}

uint64_t sub_1000D4818@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  _BYTE v4[96];

  sub_1000D4854(*v1, (uint64_t)v4);
  return sub_10006F728((uint64_t)v4, a1);
}

double sub_1000D4854@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  unsigned int v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char v17;
  double result;

  v4 = objc_msgSend((id)objc_opt_self(PSLaunchTracker), "sharedInstance");
  v5 = objc_msgSend(v4, "launchHasCompleted");

  if (v5)
  {
    type metadata accessor for ScreenSharingInteractionController(0);
    v6 = (void *)static ScreenSharingInteractionController.shared.getter();
    v7 = dispatch thunk of ScreenSharingInteractionController.remoteControlStatus.getter();

    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    if (v7 == 2)
    {
      v8 = *(_QWORD *)(a1 + 16);
      v9 = *(_QWORD *)(a1 + 24);
      v10 = *(unsigned __int8 *)(a1 + 32);
      sub_10000BA8C(v8, v9, *(_BYTE *)(a1 + 32));
      v16 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000015, 0x80000001001269B0);
      v11 = Text.init(_:tableName:bundle:comment:)(v16);
      v13 = v17 & 1;
      v15 = _swiftEmptyArrayStorage;
    }
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
  }
  *(_QWORD *)a2 = v8;
  *(_QWORD *)(a2 + 8) = v9;
  *(_QWORD *)(a2 + 16) = v10;
  result = 0.0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_QWORD *)(a2 + 56) = v11;
  *(_QWORD *)(a2 + 64) = v12;
  *(_QWORD *)(a2 + 72) = v13;
  *(_QWORD *)(a2 + 80) = v14;
  *(_QWORD *)(a2 + 88) = v15;
  return result;
}

uint64_t sub_1000D49C0()
{
  uint64_t v0;

  return sub_1000D475C(v0);
}

uint64_t sub_1000D49C8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[24];
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _BYTE v11[24];

  v1 = OBJC_IVAR____TtC11SettingsApp25BluetoothListItemProvider_bluetoothController;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC11SettingsApp25BluetoothListItemProvider_bluetoothController);
  if (v2)
  {
    objc_msgSend(v2, "invalidate");
    v3 = *(void **)(v0 + v1);
  }
  else
  {
    v3 = 0;
  }
  *(_QWORD *)(v0 + v1) = 0;

  swift_beginAccess(v0 + 16, v11, 0, 0);
  if (*(_QWORD *)(v0 + 40))
  {
    sub_10003CE00(v0 + 16, (uint64_t)&v8);
    v4 = *((_QWORD *)&v9 + 1);
    v5 = v10;
    sub_100007C2C(&v8, *((uint64_t *)&v9 + 1));
    dispatch thunk of Cancellable.cancel()(v4, v5);
    sub_100005474(&v8);
  }
  v10 = 0;
  v8 = 0u;
  v9 = 0u;
  swift_beginAccess(v0 + 16, v7, 33, 0);
  sub_100047EA0((uint64_t)&v8, v0 + 16);
  swift_endAccess(v7);
  sub_10000BA50(v0 + 16, &qword_1001587E0);
  sub_1000076B4(v0 + OBJC_IVAR____TtC11SettingsApp25BluetoothListItemProvider_id, type metadata accessor for PrimarySettingsListItemIdentifier);

  sub_100005474((_QWORD *)(v0 + OBJC_IVAR____TtC11SettingsApp25BluetoothListItemProvider_invalidator));
  return v0;
}

uint64_t sub_1000D4AF8()
{
  uint64_t v0;

  sub_1000D49C8();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000D4B1C()
{
  return type metadata accessor for BluetoothListItemProvider(0);
}

uint64_t type metadata accessor for BluetoothListItemProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_10015BFB0;
  if (!qword_10015BFB0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BluetoothListItemProvider);
  return result;
}

uint64_t sub_1000D4B60(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = "(";
  result = type metadata accessor for PrimarySettingsListItemIdentifier(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_10011AD88;
    v4[3] = &unk_10011ADA0;
    v4[4] = &unk_10011ADB8;
    result = swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for BluetoothListItemProvider.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1000D4C40 + 4 * byte_10011AD35[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1000D4C74 + 4 * byte_10011AD30[v4]))();
}

uint64_t sub_1000D4C74(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D4C7C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000D4C84);
  return result;
}

uint64_t sub_1000D4C90(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000D4C98);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1000D4C9C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D4CA4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BluetoothListItemProvider.State()
{
  return &type metadata for BluetoothListItemProvider.State;
}

unint64_t sub_1000D4CC4()
{
  unint64_t result;

  result = qword_10015C058;
  if (!qword_10015C058)
  {
    result = swift_getWitnessTable(&unk_10011AE18, &type metadata for BluetoothListItemProvider.State);
    atomic_store(result, (unint64_t *)&qword_10015C058);
  }
  return result;
}

uint64_t sub_1000D4D08@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BOOL4 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v47 = a2;
  v44 = type metadata accessor for PrimarySettingsListItemViewType(0);
  __chkstk_darwin(v44);
  v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100004FC8((uint64_t *)&unk_100156F00);
  __chkstk_darwin(v9);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for PrimarySettingsListItemModel(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v43 = (uint64_t)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = v2;
  v15 = v2 + OBJC_IVAR____TtC11SettingsApp25BluetoothListItemProvider_id;
  sub_1000076F0(v2 + OBJC_IVAR____TtC11SettingsApp25BluetoothListItemProvider_id, (uint64_t)v8, type metadata accessor for PrimarySettingsListItemIdentifier);
  v16 = type metadata accessor for StaticPrimarySettingsListItemProvider(0);
  v17 = swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  sub_100007670((uint64_t)v8, v17 + OBJC_IVAR____TtC11SettingsApp37StaticPrimarySettingsListItemProvider_id, type metadata accessor for PrimarySettingsListItemIdentifier);
  sub_1000B2604(a1, (uint64_t)v11);
  swift_setDeallocating(v17);
  sub_1000076B4(v17 + OBJC_IVAR____TtC11SettingsApp37StaticPrimarySettingsListItemProvider_id, type metadata accessor for PrimarySettingsListItemIdentifier);
  swift_deallocClassInstance(v17, *(unsigned int *)(*(_QWORD *)v17 + 48), *(unsigned __int16 *)(*(_QWORD *)v17 + 52));
  v46 = v13;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_10000BA50((uint64_t)v11, (uint64_t *)&unk_100156F00);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 56))(v47, 1, 1, v12);
  }
  else
  {
    v19 = v43;
    sub_100007670((uint64_t)v11, v43, type metadata accessor for PrimarySettingsListItemModel);
    sub_1000076F0(v15, (uint64_t)v5, type metadata accessor for PrimarySettingsListItemIdentifier);
    v42 = *(unsigned __int8 *)(v45 + OBJC_IVAR____TtC11SettingsApp25BluetoothListItemProvider_bluetoothState) == 1;
    sub_10009BD7C();
    v21 = v20;
    v23 = v22;
    v25 = v24;
    v41 = v26;
    v27 = sub_1000D5384();
    v29 = v28;
    v31 = v30;
    v33 = v32;
    v34 = (int *)type metadata accessor for PrimarySettingsListValueLinkModel(0);
    v35 = v34[9];
    v36 = &v5[v34[8]];
    v5[v34[5]] = v42;
    v37 = &v5[v34[6]];
    *(_QWORD *)v37 = v21;
    *((_QWORD *)v37 + 1) = v23;
    v37[16] = v25 & 1;
    *((_QWORD *)v37 + 3) = v41;
    v38 = &v5[v34[7]];
    *(_QWORD *)v38 = v27;
    *((_QWORD *)v38 + 1) = v29;
    v38[16] = v31 & 1;
    *((_QWORD *)v38 + 3) = v33;
    *(_QWORD *)v36 = 0;
    *((_QWORD *)v36 + 1) = 0;
    v36[16] = -1;
    v5[v35] = 2;
    swift_storeEnumTagMultiPayload(v5, v44, 8);
    sub_100020188((uint64_t)v5, v19 + *(int *)(v12 + 20));
    v39 = v47;
    sub_1000076F0(v19, v47, type metadata accessor for PrimarySettingsListItemModel);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v46 + 56))(v39, 0, 1, v12);
    sub_1000D5058(v45);
    return sub_1000076B4(v19, type metadata accessor for PrimarySettingsListItemModel);
  }
}

void sub_1000D5058(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  unsigned int v11;
  uint64_t v12;
  id v13;
  void *v14;
  unint64_t v15;
  NSObject *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  void **aBlock;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  int out_token;

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = objc_msgSend((id)objc_opt_self(PSLaunchTracker), "sharedInstance");
  v11 = objc_msgSend(v10, "launchHasCompleted");

  if (v11)
  {
    v12 = OBJC_IVAR____TtC11SettingsApp25BluetoothListItemProvider_bluetoothController;
    if (!*(_QWORD *)(a1 + OBJC_IVAR____TtC11SettingsApp25BluetoothListItemProvider_bluetoothController))
    {
      v26 = v3;
      v13 = objc_msgSend(objc_allocWithZone((Class)CBController), "init");
      v14 = *(void **)(a1 + v12);
      *(_QWORD *)(a1 + v12) = v13;

      out_token = -1;
      v15 = sub_100005494();
      v16 = static OS_dispatch_queue.main.getter(v15);
      v32 = sub_1000D6130;
      v33 = a1;
      aBlock = _NSConcreteStackBlock;
      v29 = 1107296256;
      v30 = sub_1000B0548;
      v31 = &unk_10014DA10;
      v17 = _Block_copy(&aBlock);
      v18 = v33;
      swift_retain(a1);
      swift_release(v18);
      notify_register_dispatch("com.apple.bluetooth.state", &out_token, v16, v17);
      _Block_release(v17);

      if (qword_100156D60 != -1)
        swift_once(&qword_100156D60, sub_1000D34BC);
      v19 = swift_allocObject(&unk_10014DA48, 24, 7);
      swift_weakInit(v19 + 16, a1);
      v32 = sub_1000D624C;
      v33 = v19;
      aBlock = _NSConcreteStackBlock;
      v29 = 1107296256;
      v30 = sub_100005350;
      v31 = &unk_10014DA60;
      v20 = _Block_copy(&aBlock);
      swift_retain(v19);
      static DispatchQoS.unspecified.getter(v21);
      v27 = _swiftEmptyArrayStorage;
      v22 = sub_100012ED8();
      v23 = sub_100004FC8((uint64_t *)&unk_100156F40);
      v24 = sub_10000551C();
      dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v23, v24, v2, v22);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v5, v20);
      _Block_release(v20);
      (*(void (**)(char *, uint64_t))(v26 + 8))(v5, v2);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      v25 = v33;
      swift_release(v19);
      swift_release(v25);
    }
  }
}

uint64_t sub_1000D5384()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t result;
  uint64_t v4;

  switch(*(_BYTE *)(v0 + OBJC_IVAR____TtC11SettingsApp25BluetoothListItemProvider_bluetoothState))
  {
    case 1:
      v1 = 0x616C696176616E55;
      v2 = 0xEB00000000656C62;
      goto LABEL_7;
    case 2:
      v4 = LocalizedStringKey.init(stringLiteral:)(0x45554C425F46464FLL, 0xED000048544F4F54);
      goto LABEL_8;
    case 3:
      v4 = LocalizedStringKey.init(stringLiteral:)(0x5445554C425F4E4FLL, 0xEC00000048544F4FLL);
      goto LABEL_8;
    case 4:
      v1 = 0x6E6E6F4320746F4ELL;
      v2 = 0xED00006465746365;
LABEL_7:
      v4 = LocalizedStringKey.init(stringLiteral:)(v1, v2);
LABEL_8:
      result = Text.init(_:tableName:bundle:comment:)(v4);
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t sub_1000D54DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_signpost_type_t v19;
  uint8_t *v20;
  uint8_t *v21;
  uint64_t v22;
  os_signpost_id_t v23;
  uint8_t *v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD aBlock[5];
  uint64_t v42;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v38 = *(_QWORD *)(v2 - 8);
  v39 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v36 = *(_QWORD *)(v5 - 8);
  v37 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OSSignpostID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v35 - v13;
  if (qword_100156CD8 != -1)
    swift_once(&qword_100156CD8, sub_10008BEEC);
  v15 = type metadata accessor for OSSignposter(0);
  v16 = sub_100007808(v15, (uint64_t)qword_10015D340);
  v17 = static OSSignpostID.exclusive.getter(v16);
  v18 = OSSignposter.logHandle.getter(v17);
  v19 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    v35 = v7;
    v21 = v20;
    *(_WORD *)v20 = 0;
    v23 = OSSignpostID.rawValue.getter(v20, v22);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, v19, v23, "BluetoothListItemProvider.updateBluetoothState began", "", v21, 2u);
    v24 = v21;
    v1 = v0;
    v7 = v35;
    swift_slowDealloc(v24, -1, -1);

    v25 = *(void (**)(char *, uint64_t))(v9 + 8);
    v25(v14, v8);
    v25(v12, v8);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  }
  if (qword_100156D60 != -1)
    swift_once(&qword_100156D60, sub_1000D34BC);
  v26 = swift_allocObject(&unk_10014DA48, 24, 7);
  swift_weakInit(v26 + 16, v1);
  aBlock[4] = sub_1000D62B0;
  v42 = v26;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100005350;
  aBlock[3] = &unk_10014DAB0;
  v27 = _Block_copy(aBlock);
  swift_retain(v26);
  static DispatchQoS.unspecified.getter(v28);
  v40 = _swiftEmptyArrayStorage;
  v29 = sub_100012ED8();
  v30 = sub_100004FC8((uint64_t *)&unk_100156F40);
  v31 = sub_10000551C();
  v32 = v39;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v40, v30, v31, v39, v29);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v4, v27);
  _Block_release(v27);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v4, v32);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v7, v37);
  v33 = v42;
  swift_release(v26);
  return swift_release(v33);
}

uint64_t sub_1000D5854(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t Strong;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t result;
  id v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_signpost_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  os_signpost_id_t v29;
  void (*v30)(char *, uint64_t);
  unint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD aBlock[5];
  uint64_t v44;
  char v45[24];

  v2 = type metadata accessor for OSSignpostID(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v40 - v7;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v42 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for DispatchQoS(0);
  v12 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(a1 + 16, v45, 0, 0);
  Strong = swift_weakLoadStrong(a1 + 16);
  if (Strong)
  {
    v16 = Strong;
    v17 = *(void **)(Strong + OBJC_IVAR____TtC11SettingsApp25BluetoothListItemProvider_bluetoothController);
    v18 = v17;
    result = swift_release(v16);
    if (v17)
    {
      v20 = objc_msgSend(v18, "bluetoothState");

      if (qword_100156D70 != -1)
        swift_once(&qword_100156D70, sub_1000D5ECC);
      if ((id)qword_10015D430 == v20)
      {
        LOBYTE(v21) = 4;
      }
      else if ((unint64_t)v20 > 5)
      {
        LOBYTE(v21) = 0;
      }
      else
      {
        v21 = 0x30200010000uLL >> (8 * v20);
      }
      v31 = sub_100005494();
      v32 = (void *)static OS_dispatch_queue.main.getter(v31);
      v33 = swift_allocObject(&unk_10014DAE8, 25, 7);
      *(_QWORD *)(v33 + 16) = a1;
      *(_BYTE *)(v33 + 24) = v21;
      aBlock[4] = sub_1000D62DC;
      v44 = v33;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100005350;
      aBlock[3] = &unk_10014DB00;
      v34 = _Block_copy(aBlock);
      v35 = v44;
      swift_retain(a1);
      v36 = swift_release(v35);
      static DispatchQoS.unspecified.getter(v36);
      aBlock[0] = _swiftEmptyArrayStorage;
      v37 = sub_100012ED8();
      v38 = sub_100004FC8((uint64_t *)&unk_100156F40);
      v39 = sub_10000551C();
      dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v38, v39, v9, v37);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v11, v34);
      _Block_release(v34);

      (*(void (**)(char *, uint64_t))(v42 + 8))(v11, v9);
      return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v41);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (qword_100156CD8 != -1)
      swift_once(&qword_100156CD8, sub_10008BEEC);
    v22 = type metadata accessor for OSSignposter(0);
    v23 = sub_100007808(v22, (uint64_t)qword_10015D340);
    v24 = static OSSignpostID.exclusive.getter(v23);
    v25 = OSSignposter.logHandle.getter(v24);
    v26 = static os_signpost_type_t.event.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v8, v2);
      v27 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v27 = 0;
      v29 = OSSignpostID.rawValue.getter(v27, v28);
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v25, v26, v29, "BluetoothListItemProvider.updateBluetoothState bailed", "", v27, 2u);
      swift_slowDealloc(v27, -1, -1);

      v30 = *(void (**)(char *, uint64_t))(v3 + 8);
      v30(v8, v2);
      return ((uint64_t (*)(char *, uint64_t))v30)(v6, v2);
    }
    else
    {

      return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    }
  }
  return result;
}

uint64_t sub_1000D5C50(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Strong;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_signpost_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  os_signpost_id_t v21;
  void (*v22)(char *, uint64_t);
  _QWORD v24[2];
  char v25;
  _BYTE v26[24];

  v4 = type metadata accessor for OSSignpostID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)v24 - v9;
  a1 += 16;
  swift_beginAccess(a1, v26, 0, 0);
  Strong = swift_weakLoadStrong(a1);
  if (Strong)
  {
    v12 = Strong;
    v13 = OBJC_IVAR____TtC11SettingsApp25BluetoothListItemProvider_bluetoothState;
    if (*(unsigned __int8 *)(Strong + OBJC_IVAR____TtC11SettingsApp25BluetoothListItemProvider_bluetoothState) != a2)
    {
      sub_100007C2C((_QWORD *)(Strong + OBJC_IVAR____TtC11SettingsApp25BluetoothListItemProvider_invalidator), *(_QWORD *)(Strong + OBJC_IVAR____TtC11SettingsApp25BluetoothListItemProvider_invalidator + 24));
      v24[0] = "Bluetooth State";
      v24[1] = 15;
      v25 = 2;
      PassthroughSubject.send(_:)(v24);
    }
    *(_BYTE *)(v12 + v13) = a2;
    swift_release(v12);
  }
  if (qword_100156CD8 != -1)
    swift_once(&qword_100156CD8, sub_10008BEEC);
  v14 = type metadata accessor for OSSignposter(0);
  v15 = sub_100007808(v14, (uint64_t)qword_10015D340);
  v16 = static OSSignpostID.exclusive.getter(v15);
  v17 = OSSignposter.logHandle.getter(v16);
  v18 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v10, v4);
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    v21 = OSSignpostID.rawValue.getter(v19, v20);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, v18, v21, "BluetoothListItemProvider.updateBluetoothState completed", "", v19, 2u);
    swift_slowDealloc(v19, -1, -1);

    v22 = *(void (**)(char *, uint64_t))(v5 + 8);
    v22(v10, v4);
    return ((uint64_t (*)(char *, uint64_t))v22)(v8, v4);
  }
  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  }
}

uint64_t sub_1000D5E7C@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_1000076F0(*v1 + OBJC_IVAR____TtC11SettingsApp25BluetoothListItemProvider_id, a1, type metadata accessor for PrimarySettingsListItemIdentifier);
}

uint64_t sub_1000D5EAC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000D4D08(a1, a2);
}

void sub_1000D5ECC()
{
  qword_10015D430 = 10;
}

void sub_1000D5EDC(int a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t state;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  _QWORD v17[2];
  char v18;
  uint64_t state64;

  if (qword_100156CE0 != -1)
    swift_once(&qword_100156CE0, sub_10008BFD4);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_100007808(v4, (uint64_t)qword_10015D358);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Preferences is notified of a bluetooth state change", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  state64 = 0;
  state = notify_get_state(a1, &state64);
  if ((_DWORD)state)
  {
    v10 = Logger.logObject.getter(state);
    v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "CBNotificationState status error", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }

    return;
  }
  v13 = state64;
  if ((state64 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  if (qword_100156D70 != -1)
LABEL_20:
    swift_once(&qword_100156D70, sub_1000D5ECC);
  v14 = (0x30200010000uLL >> (8 * v13)) & 3;
  if (v13 > 5)
    LODWORD(v14) = 0;
  if (qword_10015D430 == v13)
    v15 = 4;
  else
    v15 = v14;
  v16 = OBJC_IVAR____TtC11SettingsApp25BluetoothListItemProvider_bluetoothState;
  if (v15 != *(unsigned __int8 *)(a2 + OBJC_IVAR____TtC11SettingsApp25BluetoothListItemProvider_bluetoothState))
  {
    sub_100007C2C((_QWORD *)(a2 + OBJC_IVAR____TtC11SettingsApp25BluetoothListItemProvider_invalidator), *(_QWORD *)(a2 + OBJC_IVAR____TtC11SettingsApp25BluetoothListItemProvider_invalidator + 24));
    v17[0] = "Bluetooth State";
    v17[1] = 15;
    v18 = 2;
    PassthroughSubject.send(_:)(v17);
  }
  *(_BYTE *)(a2 + v16) = v15;
}

void sub_1000D6130(int a1)
{
  uint64_t v1;

  sub_1000D5EDC(a1, v1);
}

uint64_t sub_1000D6138()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000D615C(uint64_t a1)
{
  uint64_t v2;
  uint64_t Strong;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;
  _QWORD aBlock[5];
  uint64_t v10;
  _BYTE v11[24];

  v2 = a1 + 16;
  swift_beginAccess(a1 + 16, v11, 0, 0);
  Strong = swift_weakLoadStrong(v2);
  if (Strong)
  {
    v4 = Strong;
    v5 = *(void **)(Strong + OBJC_IVAR____TtC11SettingsApp25BluetoothListItemProvider_bluetoothController);
    v6 = v5;
    swift_release(v4);
    if (v5)
    {
      aBlock[4] = sub_1000D62A8;
      v10 = a1;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100015D2C;
      aBlock[3] = &unk_10014DA88;
      v7 = _Block_copy(aBlock);
      v8 = v10;
      swift_retain(a1);
      swift_release(v8);
      objc_msgSend(v6, "activateWithCompletion:", v7);
      _Block_release(v7);

    }
    else
    {
      __break(1u);
    }
  }
}

void sub_1000D624C()
{
  uint64_t v0;

  sub_1000D615C(v0);
}

uint64_t sub_1000D6254(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v4 = result;
    sub_1000D54DC();
    return swift_release(v4);
  }
  return result;
}

uint64_t sub_1000D62A8(uint64_t a1)
{
  uint64_t v1;

  return sub_1000D6254(a1, v1);
}

uint64_t sub_1000D62B0()
{
  uint64_t v0;

  return sub_1000D5854(v0);
}

uint64_t sub_1000D62B8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

uint64_t sub_1000D62DC()
{
  uint64_t v0;

  return sub_1000D5C50(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

_QWORD *sub_1000D62F8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  id v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  __int128 v72;
  int *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  _OWORD *v104;
  _OWORD *v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;

  v4 = type metadata accessor for PrimarySettingsListFollowUpModel(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v6 = v4;
    v7 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(a2, v7))
    {
      case 0u:
        v8 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
        v9 = a1;
        v10 = v7;
        v11 = 0;
        goto LABEL_14;
      case 1u:
        v13 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
        v9 = a1;
        v10 = v7;
        v11 = 1;
        goto LABEL_14;
      case 2u:
        v14 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
        v15 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v16 = (_QWORD *)((char *)a1 + v15);
        v17 = (_QWORD *)((char *)a2 + v15);
        v18 = v17[1];
        *v16 = *v17;
        v16[1] = v18;
        swift_bridgeObjectRetain(v18);
        v9 = a1;
        v10 = v7;
        v11 = 2;
        goto LABEL_14;
      case 3u:
        v19 = a2[1];
        *a1 = *a2;
        a1[1] = v19;
        v20 = a2[3];
        a1[2] = a2[2];
        a1[3] = v20;
        v21 = a2[5];
        a1[4] = a2[4];
        a1[5] = v21;
        v22 = a2[7];
        a1[6] = a2[6];
        a1[7] = v22;
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v22);
        v9 = a1;
        v10 = v7;
        v11 = 3;
        goto LABEL_14;
      case 4u:
        v23 = a2[1];
        *a1 = *a2;
        a1[1] = v23;
        v24 = a2[3];
        a1[2] = a2[2];
        a1[3] = v24;
        v25 = a2[5];
        a1[4] = a2[4];
        a1[5] = v25;
        a1[6] = a2[6];
        swift_bridgeObjectRetain(v23);
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v25);
        v9 = a1;
        v10 = v7;
        v11 = 4;
        goto LABEL_14;
      case 5u:
        v26 = a2[1];
        *a1 = *a2;
        a1[1] = v26;
        v27 = a2[3];
        a1[2] = a2[2];
        a1[3] = v27;
        v29 = (void *)a2[4];
        v28 = a2[5];
        a1[4] = v29;
        a1[5] = v28;
        v30 = a2[9];
        swift_bridgeObjectRetain(v26);
        swift_bridgeObjectRetain(v27);
        v31 = v29;
        swift_bridgeObjectRetain(v28);
        if (v30)
        {
          a1[9] = v30;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v30 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v30);
        }
        else
        {
          v32 = *((_OWORD *)a2 + 4);
          *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
          *((_OWORD *)a1 + 4) = v32;
        }
        v9 = a1;
        v10 = v7;
        v11 = 5;
LABEL_14:
        swift_storeEnumTagMultiPayload(v9, v10, v11);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
        break;
    }
    v33 = *(int *)(v6 + 20);
    v34 = (char *)a1 + v33;
    v35 = (char *)a2 + v33;
    v36 = type metadata accessor for PrimarySettingsListFollowUpModel.ViewType(0);
    if (swift_getEnumCaseMultiPayload(v35, v36) == 1)
    {
      v107 = v6;
      v108 = a2;
      v106 = v36;
      switch(swift_getEnumCaseMultiPayload(v35, v7))
      {
        case 0u:
          v37 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v34, v35, v37);
          v38 = v34;
          v39 = v7;
          v40 = 0;
          goto LABEL_30;
        case 1u:
          v53 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 16))(v34, v35, v53);
          v38 = v34;
          v39 = v7;
          v40 = 1;
          goto LABEL_30;
        case 2u:
          v54 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(v34, v35, v54);
          v55 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
          v56 = &v34[v55];
          v57 = &v35[v55];
          v58 = *((_QWORD *)v57 + 1);
          *(_QWORD *)v56 = *(_QWORD *)v57;
          *((_QWORD *)v56 + 1) = v58;
          swift_bridgeObjectRetain(v58);
          v38 = v34;
          v39 = v7;
          v40 = 2;
          goto LABEL_30;
        case 3u:
          v59 = *((_QWORD *)v35 + 1);
          *(_QWORD *)v34 = *(_QWORD *)v35;
          *((_QWORD *)v34 + 1) = v59;
          v60 = *((_QWORD *)v35 + 3);
          *((_QWORD *)v34 + 2) = *((_QWORD *)v35 + 2);
          *((_QWORD *)v34 + 3) = v60;
          v61 = *((_QWORD *)v35 + 5);
          *((_QWORD *)v34 + 4) = *((_QWORD *)v35 + 4);
          *((_QWORD *)v34 + 5) = v61;
          v62 = *((_QWORD *)v35 + 7);
          *((_QWORD *)v34 + 6) = *((_QWORD *)v35 + 6);
          *((_QWORD *)v34 + 7) = v62;
          swift_bridgeObjectRetain(v59);
          swift_bridgeObjectRetain(v60);
          swift_bridgeObjectRetain(v61);
          swift_bridgeObjectRetain(v62);
          v38 = v34;
          v39 = v7;
          v40 = 3;
          goto LABEL_30;
        case 4u:
          v63 = *((_QWORD *)v35 + 1);
          *(_QWORD *)v34 = *(_QWORD *)v35;
          *((_QWORD *)v34 + 1) = v63;
          v64 = *((_QWORD *)v35 + 3);
          *((_QWORD *)v34 + 2) = *((_QWORD *)v35 + 2);
          *((_QWORD *)v34 + 3) = v64;
          v65 = *((_QWORD *)v35 + 5);
          *((_QWORD *)v34 + 4) = *((_QWORD *)v35 + 4);
          *((_QWORD *)v34 + 5) = v65;
          *((_QWORD *)v34 + 6) = *((_QWORD *)v35 + 6);
          swift_bridgeObjectRetain(v63);
          swift_bridgeObjectRetain(v64);
          swift_bridgeObjectRetain(v65);
          v38 = v34;
          v39 = v7;
          v40 = 4;
          goto LABEL_30;
        case 5u:
          v66 = *((_QWORD *)v35 + 1);
          *(_QWORD *)v34 = *(_QWORD *)v35;
          *((_QWORD *)v34 + 1) = v66;
          v67 = *((_QWORD *)v35 + 3);
          *((_QWORD *)v34 + 2) = *((_QWORD *)v35 + 2);
          *((_QWORD *)v34 + 3) = v67;
          v68 = (void *)*((_QWORD *)v35 + 4);
          v69 = *((_QWORD *)v35 + 5);
          *((_QWORD *)v34 + 4) = v68;
          *((_QWORD *)v34 + 5) = v69;
          v104 = v35 + 48;
          v105 = v34 + 48;
          v70 = *((_QWORD *)v35 + 9);
          swift_bridgeObjectRetain(v66);
          swift_bridgeObjectRetain(v67);
          v71 = v68;
          swift_bridgeObjectRetain(v69);
          if (v70)
          {
            *((_QWORD *)v34 + 9) = v70;
            (**(void (***)(_OWORD *, _OWORD *, uint64_t))(v70 - 8))(v105, v104, v70);
          }
          else
          {
            v72 = *((_OWORD *)v35 + 4);
            *v105 = *v104;
            *((_OWORD *)v34 + 4) = v72;
          }
          v38 = v34;
          v39 = v7;
          v40 = 5;
LABEL_30:
          swift_storeEnumTagMultiPayload(v38, v39, v40);
          break;
        default:
          memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
          break;
      }
      v73 = (int *)type metadata accessor for PrimarySettingsListFollowUpActionModel(0);
      v74 = v73[5];
      v75 = &v34[v74];
      v76 = &v35[v74];
      v77 = type metadata accessor for FLFollowUpGroupIdentity(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v77 - 8) + 16))(v75, v76, v77);
      v34[v73[6]] = v35[v73[6]];
      v78 = v73[7];
      v79 = &v34[v78];
      v80 = &v35[v78];
      v81 = *((_QWORD *)v80 + 1);
      *(_QWORD *)v79 = *(_QWORD *)v80;
      *((_QWORD *)v79 + 1) = v81;
      v82 = v73[8];
      v83 = &v34[v82];
      v84 = &v35[v82];
      v85 = *((_QWORD *)v84 + 1);
      *(_QWORD *)v83 = *(_QWORD *)v84;
      *((_QWORD *)v83 + 1) = v85;
      v86 = v73[9];
      v87 = &v34[v86];
      v88 = &v35[v86];
      v89 = *(_QWORD *)&v35[v86];
      v90 = *(_QWORD *)&v35[v86 + 8];
      v91 = v35[v86 + 16];
      swift_bridgeObjectRetain(v81);
      swift_bridgeObjectRetain(v85);
      sub_10000BAD4(v89, v90, v91);
      *(_QWORD *)v87 = v89;
      *((_QWORD *)v87 + 1) = v90;
      v87[16] = v91;
      v92 = *((_QWORD *)v88 + 3);
      *((_QWORD *)v87 + 3) = v92;
      v93 = v73[10];
      v94 = &v34[v93];
      v95 = &v35[v93];
      v96 = v95[16];
      swift_bridgeObjectRetain(v92);
      if (v96 == 255)
      {
        *(_OWORD *)v94 = *(_OWORD *)v95;
        v94[16] = v95[16];
        v52 = 1;
      }
      else
      {
        v97 = *(_QWORD *)v95;
        v98 = *((_QWORD *)v95 + 1);
        sub_10000BB2C(v97, v98, v96);
        *(_QWORD *)v94 = v97;
        *((_QWORD *)v94 + 1) = v98;
        v52 = 1;
        v94[16] = v96;
      }
      v6 = v107;
      a2 = v108;
      v36 = v106;
    }
    else
    {
      v41 = *(_QWORD *)v35;
      v42 = *((_QWORD *)v35 + 1);
      v43 = v35[16];
      sub_10000BAD4(*(_QWORD *)v35, v42, v43);
      *(_QWORD *)v34 = v41;
      *((_QWORD *)v34 + 1) = v42;
      v34[16] = v43;
      v44 = *((_QWORD *)v35 + 3);
      v45 = *((_QWORD *)v35 + 4);
      *((_QWORD *)v34 + 3) = v44;
      v46 = *((_QWORD *)v35 + 5);
      v47 = v35[48];
      swift_bridgeObjectRetain(v44);
      sub_10000BAD4(v45, v46, v47);
      *((_QWORD *)v34 + 4) = v45;
      *((_QWORD *)v34 + 5) = v46;
      v34[48] = v47;
      v48 = *((_QWORD *)v35 + 7);
      *((_QWORD *)v34 + 7) = v48;
      v49 = v35[80];
      swift_bridgeObjectRetain(v48);
      if (v49 == 255)
      {
        v52 = 0;
        *((_OWORD *)v34 + 4) = *((_OWORD *)v35 + 4);
        v34[80] = v35[80];
      }
      else
      {
        v51 = *((_QWORD *)v35 + 8);
        v50 = *((_QWORD *)v35 + 9);
        sub_10000BB2C(v51, v50, v49);
        v52 = 0;
        *((_QWORD *)v34 + 8) = v51;
        *((_QWORD *)v34 + 9) = v50;
        v34[80] = v49;
      }
    }
    swift_storeEnumTagMultiPayload(v34, v36, v52);
    v99 = *(int *)(v6 + 24);
    v100 = (char *)a1 + v99;
    v101 = (char *)a2 + v99;
    v102 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v102 - 8) + 16))(v100, v101, v102);
  }
  return a1;
}

uint64_t sub_1000D69B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(a1, v2))
  {
    case 0u:
    case 1u:
      v3 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
      break;
    case 2u:
      v4 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
      v5 = sub_100004FC8(&qword_10015C420);
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v5 + 48) + 8));
      break;
    case 3u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
      break;
    case 4u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      break;
    case 5u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));

      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
      if (*(_QWORD *)(a1 + 72))
        sub_100005474((_QWORD *)(a1 + 48));
      break;
    default:
      break;
  }
  v6 = type metadata accessor for PrimarySettingsListFollowUpModel(0);
  v7 = a1 + *(int *)(v6 + 20);
  v8 = type metadata accessor for PrimarySettingsListFollowUpModel.ViewType(0);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    switch(swift_getEnumCaseMultiPayload(v7, v2))
    {
      case 0u:
      case 1u:
        v9 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
        break;
      case 2u:
        v13 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v7, v13);
        v14 = sub_100004FC8(&qword_10015C420);
        swift_bridgeObjectRelease(*(_QWORD *)(v7 + *(int *)(v14 + 48) + 8));
        break;
      case 3u:
        swift_bridgeObjectRelease(*(_QWORD *)(v7 + 8));
        swift_bridgeObjectRelease(*(_QWORD *)(v7 + 24));
        swift_bridgeObjectRelease(*(_QWORD *)(v7 + 40));
        swift_bridgeObjectRelease(*(_QWORD *)(v7 + 56));
        break;
      case 4u:
        swift_bridgeObjectRelease(*(_QWORD *)(v7 + 8));
        swift_bridgeObjectRelease(*(_QWORD *)(v7 + 24));
        swift_bridgeObjectRelease(*(_QWORD *)(v7 + 40));
        break;
      case 5u:
        swift_bridgeObjectRelease(*(_QWORD *)(v7 + 8));
        swift_bridgeObjectRelease(*(_QWORD *)(v7 + 24));

        swift_bridgeObjectRelease(*(_QWORD *)(v7 + 40));
        if (*(_QWORD *)(v7 + 72))
          sub_100005474((_QWORD *)(v7 + 48));
        break;
      default:
        break;
    }
    v15 = (int *)type metadata accessor for PrimarySettingsListFollowUpActionModel(0);
    v16 = v7 + v15[5];
    v17 = type metadata accessor for FLFollowUpGroupIdentity(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
    swift_bridgeObjectRelease(*(_QWORD *)(v7 + v15[7] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v7 + v15[8] + 8));
    v18 = v7 + v15[9];
    sub_100007618(*(_QWORD *)v18, *(_QWORD *)(v18 + 8), *(_BYTE *)(v18 + 16));
    swift_bridgeObjectRelease(*(_QWORD *)(v18 + 24));
    v19 = v7 + v15[10];
    v10 = *(unsigned __int8 *)(v19 + 16);
    if (v10 != 255)
    {
      v11 = *(_QWORD *)v19;
      v12 = *(_QWORD *)(v19 + 8);
      goto LABEL_20;
    }
  }
  else
  {
    sub_100007618(*(_QWORD *)v7, *(_QWORD *)(v7 + 8), *(_BYTE *)(v7 + 16));
    swift_bridgeObjectRelease(*(_QWORD *)(v7 + 24));
    sub_100007618(*(_QWORD *)(v7 + 32), *(_QWORD *)(v7 + 40), *(_BYTE *)(v7 + 48));
    swift_bridgeObjectRelease(*(_QWORD *)(v7 + 56));
    v10 = *(unsigned __int8 *)(v7 + 80);
    if (v10 != 255)
    {
      v11 = *(_QWORD *)(v7 + 64);
      v12 = *(_QWORD *)(v7 + 72);
LABEL_20:
      sub_10000BB54(v11, v12, v10);
    }
  }
  v20 = a1 + *(int *)(v6 + 24);
  v21 = type metadata accessor for FLFollowUpInformation(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
}

_QWORD *sub_1000D6CF8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  id v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  __int128 v69;
  int *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  _OWORD *v101;
  _OWORD *v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;

  v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(a2, v4))
  {
    case 0u:
      v5 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
      v6 = a1;
      v7 = v4;
      v8 = 0;
      goto LABEL_12;
    case 1u:
      v9 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      v6 = a1;
      v7 = v4;
      v8 = 1;
      goto LABEL_12;
    case 2u:
      v10 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      v11 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
      v12 = (_QWORD *)((char *)a1 + v11);
      v13 = (_QWORD *)((char *)a2 + v11);
      v14 = v13[1];
      *v12 = *v13;
      v12[1] = v14;
      swift_bridgeObjectRetain(v14);
      v6 = a1;
      v7 = v4;
      v8 = 2;
      goto LABEL_12;
    case 3u:
      v15 = a2[1];
      *a1 = *a2;
      a1[1] = v15;
      v16 = a2[3];
      a1[2] = a2[2];
      a1[3] = v16;
      v17 = a2[5];
      a1[4] = a2[4];
      a1[5] = v17;
      v18 = a2[7];
      a1[6] = a2[6];
      a1[7] = v18;
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v18);
      v6 = a1;
      v7 = v4;
      v8 = 3;
      goto LABEL_12;
    case 4u:
      v19 = a2[1];
      *a1 = *a2;
      a1[1] = v19;
      v20 = a2[3];
      a1[2] = a2[2];
      a1[3] = v20;
      v21 = a2[5];
      a1[4] = a2[4];
      a1[5] = v21;
      a1[6] = a2[6];
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRetain(v21);
      v6 = a1;
      v7 = v4;
      v8 = 4;
      goto LABEL_12;
    case 5u:
      v22 = a2[1];
      *a1 = *a2;
      a1[1] = v22;
      v23 = a2[3];
      a1[2] = a2[2];
      a1[3] = v23;
      v25 = (void *)a2[4];
      v24 = a2[5];
      a1[4] = v25;
      a1[5] = v24;
      v26 = a2[9];
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v23);
      v27 = v25;
      swift_bridgeObjectRetain(v24);
      if (v26)
      {
        a1[9] = v26;
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v26 - 8))((uint64_t)(a1 + 6), (uint64_t)(a2 + 6), v26);
      }
      else
      {
        v28 = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 4) = v28;
      }
      v6 = a1;
      v7 = v4;
      v8 = 5;
LABEL_12:
      swift_storeEnumTagMultiPayload(v6, v7, v8);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
      break;
  }
  v29 = type metadata accessor for PrimarySettingsListFollowUpModel(0);
  v30 = *(int *)(v29 + 20);
  v31 = (char *)a1 + v30;
  v32 = (char *)a2 + v30;
  v33 = type metadata accessor for PrimarySettingsListFollowUpModel.ViewType(0);
  if (swift_getEnumCaseMultiPayload(v32, v33) == 1)
  {
    v104 = v29;
    v105 = a2;
    v103 = v33;
    switch(swift_getEnumCaseMultiPayload(v32, v4))
    {
      case 0u:
        v34 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v31, v32, v34);
        v35 = v31;
        v36 = v4;
        v37 = 0;
        goto LABEL_28;
      case 1u:
        v50 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v31, v32, v50);
        v35 = v31;
        v36 = v4;
        v37 = 1;
        goto LABEL_28;
      case 2u:
        v51 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v31, v32, v51);
        v52 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v53 = &v31[v52];
        v54 = &v32[v52];
        v55 = *((_QWORD *)v54 + 1);
        *(_QWORD *)v53 = *(_QWORD *)v54;
        *((_QWORD *)v53 + 1) = v55;
        swift_bridgeObjectRetain(v55);
        v35 = v31;
        v36 = v4;
        v37 = 2;
        goto LABEL_28;
      case 3u:
        v56 = *((_QWORD *)v32 + 1);
        *(_QWORD *)v31 = *(_QWORD *)v32;
        *((_QWORD *)v31 + 1) = v56;
        v57 = *((_QWORD *)v32 + 3);
        *((_QWORD *)v31 + 2) = *((_QWORD *)v32 + 2);
        *((_QWORD *)v31 + 3) = v57;
        v58 = *((_QWORD *)v32 + 5);
        *((_QWORD *)v31 + 4) = *((_QWORD *)v32 + 4);
        *((_QWORD *)v31 + 5) = v58;
        v59 = *((_QWORD *)v32 + 7);
        *((_QWORD *)v31 + 6) = *((_QWORD *)v32 + 6);
        *((_QWORD *)v31 + 7) = v59;
        swift_bridgeObjectRetain(v56);
        swift_bridgeObjectRetain(v57);
        swift_bridgeObjectRetain(v58);
        swift_bridgeObjectRetain(v59);
        v35 = v31;
        v36 = v4;
        v37 = 3;
        goto LABEL_28;
      case 4u:
        v60 = *((_QWORD *)v32 + 1);
        *(_QWORD *)v31 = *(_QWORD *)v32;
        *((_QWORD *)v31 + 1) = v60;
        v61 = *((_QWORD *)v32 + 3);
        *((_QWORD *)v31 + 2) = *((_QWORD *)v32 + 2);
        *((_QWORD *)v31 + 3) = v61;
        v62 = *((_QWORD *)v32 + 5);
        *((_QWORD *)v31 + 4) = *((_QWORD *)v32 + 4);
        *((_QWORD *)v31 + 5) = v62;
        *((_QWORD *)v31 + 6) = *((_QWORD *)v32 + 6);
        swift_bridgeObjectRetain(v60);
        swift_bridgeObjectRetain(v61);
        swift_bridgeObjectRetain(v62);
        v35 = v31;
        v36 = v4;
        v37 = 4;
        goto LABEL_28;
      case 5u:
        v63 = *((_QWORD *)v32 + 1);
        *(_QWORD *)v31 = *(_QWORD *)v32;
        *((_QWORD *)v31 + 1) = v63;
        v64 = *((_QWORD *)v32 + 3);
        *((_QWORD *)v31 + 2) = *((_QWORD *)v32 + 2);
        *((_QWORD *)v31 + 3) = v64;
        v65 = (void *)*((_QWORD *)v32 + 4);
        v66 = *((_QWORD *)v32 + 5);
        *((_QWORD *)v31 + 4) = v65;
        *((_QWORD *)v31 + 5) = v66;
        v101 = v32 + 48;
        v102 = v31 + 48;
        v67 = *((_QWORD *)v32 + 9);
        swift_bridgeObjectRetain(v63);
        swift_bridgeObjectRetain(v64);
        v68 = v65;
        swift_bridgeObjectRetain(v66);
        if (v67)
        {
          *((_QWORD *)v31 + 9) = v67;
          (**(void (***)(_OWORD *, _OWORD *, uint64_t))(v67 - 8))(v102, v101, v67);
        }
        else
        {
          v69 = *((_OWORD *)v32 + 4);
          *v102 = *v101;
          *((_OWORD *)v31 + 4) = v69;
        }
        v35 = v31;
        v36 = v4;
        v37 = 5;
LABEL_28:
        swift_storeEnumTagMultiPayload(v35, v36, v37);
        break;
      default:
        memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
        break;
    }
    v70 = (int *)type metadata accessor for PrimarySettingsListFollowUpActionModel(0);
    v71 = v70[5];
    v72 = &v31[v71];
    v73 = &v32[v71];
    v74 = type metadata accessor for FLFollowUpGroupIdentity(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v74 - 8) + 16))(v72, v73, v74);
    v31[v70[6]] = v32[v70[6]];
    v75 = v70[7];
    v76 = &v31[v75];
    v77 = &v32[v75];
    v78 = *((_QWORD *)v77 + 1);
    *(_QWORD *)v76 = *(_QWORD *)v77;
    *((_QWORD *)v76 + 1) = v78;
    v79 = v70[8];
    v80 = &v31[v79];
    v81 = &v32[v79];
    v82 = *((_QWORD *)v81 + 1);
    *(_QWORD *)v80 = *(_QWORD *)v81;
    *((_QWORD *)v80 + 1) = v82;
    v83 = v70[9];
    v84 = &v31[v83];
    v85 = &v32[v83];
    v86 = *(_QWORD *)&v32[v83];
    v87 = *(_QWORD *)&v32[v83 + 8];
    v88 = v32[v83 + 16];
    swift_bridgeObjectRetain(v78);
    swift_bridgeObjectRetain(v82);
    sub_10000BAD4(v86, v87, v88);
    *(_QWORD *)v84 = v86;
    *((_QWORD *)v84 + 1) = v87;
    v84[16] = v88;
    v89 = *((_QWORD *)v85 + 3);
    *((_QWORD *)v84 + 3) = v89;
    v90 = v70[10];
    v91 = &v31[v90];
    v92 = &v32[v90];
    v93 = v92[16];
    swift_bridgeObjectRetain(v89);
    if (v93 == 255)
    {
      *(_OWORD *)v91 = *(_OWORD *)v92;
      v91[16] = v92[16];
      v49 = 1;
    }
    else
    {
      v94 = *(_QWORD *)v92;
      v95 = *((_QWORD *)v92 + 1);
      sub_10000BB2C(v94, v95, v93);
      *(_QWORD *)v91 = v94;
      *((_QWORD *)v91 + 1) = v95;
      v49 = 1;
      v91[16] = v93;
    }
    v29 = v104;
    a2 = v105;
    v33 = v103;
  }
  else
  {
    v38 = *(_QWORD *)v32;
    v39 = *((_QWORD *)v32 + 1);
    v40 = v32[16];
    sub_10000BAD4(*(_QWORD *)v32, v39, v40);
    *(_QWORD *)v31 = v38;
    *((_QWORD *)v31 + 1) = v39;
    v31[16] = v40;
    v41 = *((_QWORD *)v32 + 3);
    v42 = *((_QWORD *)v32 + 4);
    *((_QWORD *)v31 + 3) = v41;
    v43 = *((_QWORD *)v32 + 5);
    v44 = v32[48];
    swift_bridgeObjectRetain(v41);
    sub_10000BAD4(v42, v43, v44);
    *((_QWORD *)v31 + 4) = v42;
    *((_QWORD *)v31 + 5) = v43;
    v31[48] = v44;
    v45 = *((_QWORD *)v32 + 7);
    *((_QWORD *)v31 + 7) = v45;
    v46 = v32[80];
    swift_bridgeObjectRetain(v45);
    if (v46 == 255)
    {
      v49 = 0;
      *((_OWORD *)v31 + 4) = *((_OWORD *)v32 + 4);
      v31[80] = v32[80];
    }
    else
    {
      v48 = *((_QWORD *)v32 + 8);
      v47 = *((_QWORD *)v32 + 9);
      sub_10000BB2C(v48, v47, v46);
      v49 = 0;
      *((_QWORD *)v31 + 8) = v48;
      *((_QWORD *)v31 + 9) = v47;
      v31[80] = v46;
    }
  }
  swift_storeEnumTagMultiPayload(v31, v33, v49);
  v96 = *(int *)(v29 + 24);
  v97 = (char *)a1 + v96;
  v98 = (char *)a2 + v96;
  v99 = type metadata accessor for FLFollowUpInformation(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v99 - 8) + 16))(v97, v98, v99);
  return a1;
}

_QWORD *sub_1000D7388(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  __int128 v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  __int128 v72;
  int *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  _OWORD *v105;
  _OWORD *v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;

  v2 = a2;
  if (a1 == a2)
  {
    v9 = type metadata accessor for PrimarySettingsListFollowUpModel(0);
  }
  else
  {
    sub_1000076B4((uint64_t)a1, type metadata accessor for PrimarySettingsListItemIdentifier);
    v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(v2, v4))
    {
      case 0u:
        v5 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, v2, v5);
        v6 = a1;
        v7 = v4;
        v8 = 0;
        goto LABEL_14;
      case 1u:
        v10 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, v2, v10);
        v6 = a1;
        v7 = v4;
        v8 = 1;
        goto LABEL_14;
      case 2u:
        v11 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, v2, v11);
        v12 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v13 = (_QWORD *)((char *)a1 + v12);
        v14 = (_QWORD *)((char *)v2 + v12);
        *v13 = *v14;
        v15 = v14[1];
        v13[1] = v15;
        swift_bridgeObjectRetain(v15);
        v6 = a1;
        v7 = v4;
        v8 = 2;
        goto LABEL_14;
      case 3u:
        *a1 = *v2;
        v16 = v2[1];
        a1[1] = v16;
        a1[2] = v2[2];
        v17 = v2[3];
        a1[3] = v17;
        a1[4] = v2[4];
        v18 = v2[5];
        a1[5] = v18;
        a1[6] = v2[6];
        v19 = v2[7];
        a1[7] = v19;
        swift_bridgeObjectRetain(v16);
        swift_bridgeObjectRetain(v17);
        swift_bridgeObjectRetain(v18);
        swift_bridgeObjectRetain(v19);
        v6 = a1;
        v7 = v4;
        v8 = 3;
        goto LABEL_14;
      case 4u:
        *a1 = *v2;
        v20 = v2[1];
        a1[1] = v20;
        a1[2] = v2[2];
        v21 = v2[3];
        a1[3] = v21;
        a1[4] = v2[4];
        v22 = v2[5];
        a1[5] = v22;
        a1[6] = v2[6];
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v22);
        v6 = a1;
        v7 = v4;
        v8 = 4;
        goto LABEL_14;
      case 5u:
        *a1 = *v2;
        v23 = v2[1];
        a1[1] = v23;
        a1[2] = v2[2];
        v24 = v2[3];
        a1[3] = v24;
        v25 = (void *)v2[4];
        a1[4] = v25;
        v26 = v2[5];
        a1[5] = v26;
        v27 = v2[9];
        swift_bridgeObjectRetain(v23);
        swift_bridgeObjectRetain(v24);
        v28 = v25;
        swift_bridgeObjectRetain(v26);
        if (v27)
        {
          a1[9] = v27;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v27 - 8))((uint64_t)(a1 + 6), (uint64_t)(v2 + 6), v27);
        }
        else
        {
          v29 = *((_OWORD *)v2 + 4);
          *((_OWORD *)a1 + 3) = *((_OWORD *)v2 + 3);
          *((_OWORD *)a1 + 4) = v29;
        }
        v6 = a1;
        v7 = v4;
        v8 = 5;
LABEL_14:
        swift_storeEnumTagMultiPayload(v6, v7, v8);
        break;
      default:
        memcpy(a1, v2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
        break;
    }
    v9 = type metadata accessor for PrimarySettingsListFollowUpModel(0);
    v30 = *(int *)(v9 + 20);
    v31 = (char *)a1 + v30;
    v32 = (char *)v2 + v30;
    sub_1000076B4((uint64_t)a1 + v30, type metadata accessor for PrimarySettingsListFollowUpModel.ViewType);
    v33 = type metadata accessor for PrimarySettingsListFollowUpModel.ViewType(0);
    if (swift_getEnumCaseMultiPayload(v32, v33) == 1)
    {
      v108 = v9;
      v109 = v2;
      v107 = v33;
      switch(swift_getEnumCaseMultiPayload(v32, v4))
      {
        case 0u:
          v34 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v31, v32, v34);
          v35 = v31;
          v36 = v4;
          v37 = 0;
          goto LABEL_31;
        case 1u:
          v53 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 16))(v31, v32, v53);
          v35 = v31;
          v36 = v4;
          v37 = 1;
          goto LABEL_31;
        case 2u:
          v54 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(v31, v32, v54);
          v55 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
          v56 = &v31[v55];
          v57 = &v32[v55];
          *(_QWORD *)v56 = *(_QWORD *)v57;
          v58 = *((_QWORD *)v57 + 1);
          *((_QWORD *)v56 + 1) = v58;
          swift_bridgeObjectRetain(v58);
          v35 = v31;
          v36 = v4;
          v37 = 2;
          goto LABEL_31;
        case 3u:
          *(_QWORD *)v31 = *(_QWORD *)v32;
          v59 = *((_QWORD *)v32 + 1);
          *((_QWORD *)v31 + 1) = v59;
          *((_QWORD *)v31 + 2) = *((_QWORD *)v32 + 2);
          v60 = *((_QWORD *)v32 + 3);
          *((_QWORD *)v31 + 3) = v60;
          *((_QWORD *)v31 + 4) = *((_QWORD *)v32 + 4);
          v61 = *((_QWORD *)v32 + 5);
          *((_QWORD *)v31 + 5) = v61;
          *((_QWORD *)v31 + 6) = *((_QWORD *)v32 + 6);
          v62 = *((_QWORD *)v32 + 7);
          *((_QWORD *)v31 + 7) = v62;
          swift_bridgeObjectRetain(v59);
          swift_bridgeObjectRetain(v60);
          swift_bridgeObjectRetain(v61);
          swift_bridgeObjectRetain(v62);
          v35 = v31;
          v36 = v4;
          v37 = 3;
          goto LABEL_31;
        case 4u:
          *(_QWORD *)v31 = *(_QWORD *)v32;
          v63 = *((_QWORD *)v32 + 1);
          *((_QWORD *)v31 + 1) = v63;
          *((_QWORD *)v31 + 2) = *((_QWORD *)v32 + 2);
          v64 = *((_QWORD *)v32 + 3);
          *((_QWORD *)v31 + 3) = v64;
          *((_QWORD *)v31 + 4) = *((_QWORD *)v32 + 4);
          v65 = *((_QWORD *)v32 + 5);
          *((_QWORD *)v31 + 5) = v65;
          *((_QWORD *)v31 + 6) = *((_QWORD *)v32 + 6);
          swift_bridgeObjectRetain(v63);
          swift_bridgeObjectRetain(v64);
          swift_bridgeObjectRetain(v65);
          v35 = v31;
          v36 = v4;
          v37 = 4;
          goto LABEL_31;
        case 5u:
          *(_QWORD *)v31 = *(_QWORD *)v32;
          v66 = *((_QWORD *)v32 + 1);
          *((_QWORD *)v31 + 1) = v66;
          *((_QWORD *)v31 + 2) = *((_QWORD *)v32 + 2);
          v67 = *((_QWORD *)v32 + 3);
          *((_QWORD *)v31 + 3) = v67;
          v68 = (void *)*((_QWORD *)v32 + 4);
          *((_QWORD *)v31 + 4) = v68;
          v69 = *((_QWORD *)v32 + 5);
          *((_QWORD *)v31 + 5) = v69;
          v105 = v32 + 48;
          v106 = v31 + 48;
          v70 = *((_QWORD *)v32 + 9);
          swift_bridgeObjectRetain(v66);
          swift_bridgeObjectRetain(v67);
          v71 = v68;
          swift_bridgeObjectRetain(v69);
          if (v70)
          {
            *((_QWORD *)v31 + 9) = v70;
            (**(void (***)(_OWORD *, _OWORD *, uint64_t))(v70 - 8))(v106, v105, v70);
          }
          else
          {
            v72 = *((_OWORD *)v32 + 4);
            *v106 = *v105;
            *((_OWORD *)v31 + 4) = v72;
          }
          v35 = v31;
          v36 = v4;
          v37 = 5;
LABEL_31:
          swift_storeEnumTagMultiPayload(v35, v36, v37);
          break;
        default:
          memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
          break;
      }
      v73 = (int *)type metadata accessor for PrimarySettingsListFollowUpActionModel(0);
      v74 = v73[5];
      v75 = &v31[v74];
      v76 = &v32[v74];
      v77 = type metadata accessor for FLFollowUpGroupIdentity(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v77 - 8) + 16))(v75, v76, v77);
      v31[v73[6]] = v32[v73[6]];
      v78 = v73[7];
      v79 = &v31[v78];
      v80 = &v32[v78];
      *(_QWORD *)v79 = *(_QWORD *)v80;
      v81 = *((_QWORD *)v80 + 1);
      *((_QWORD *)v79 + 1) = v81;
      v82 = v73[8];
      v83 = &v31[v82];
      v84 = &v32[v82];
      *(_QWORD *)v83 = *(_QWORD *)v84;
      v85 = *((_QWORD *)v84 + 1);
      *((_QWORD *)v83 + 1) = v85;
      v86 = v73[9];
      v87 = &v31[v86];
      v88 = &v32[v86];
      v89 = *(_QWORD *)&v32[v86];
      v90 = *(_QWORD *)&v32[v86 + 8];
      v91 = v32[v86 + 16];
      swift_bridgeObjectRetain(v81);
      swift_bridgeObjectRetain(v85);
      sub_10000BAD4(v89, v90, v91);
      *(_QWORD *)v87 = v89;
      *((_QWORD *)v87 + 1) = v90;
      v87[16] = v91;
      v92 = *((_QWORD *)v88 + 3);
      *((_QWORD *)v87 + 3) = v92;
      v93 = v73[10];
      v94 = &v31[v93];
      v95 = &v32[v93];
      v96 = v95[16];
      swift_bridgeObjectRetain(v92);
      if (v96 == 255)
      {
        v99 = *(_OWORD *)v95;
        v94[16] = v95[16];
        *(_OWORD *)v94 = v99;
      }
      else
      {
        v97 = *(_QWORD *)v95;
        v98 = *((_QWORD *)v95 + 1);
        sub_10000BB2C(v97, v98, v96);
        *(_QWORD *)v94 = v97;
        *((_QWORD *)v94 + 1) = v98;
        v94[16] = v96;
      }
      v9 = v108;
      v2 = v109;
      v50 = v31;
      v51 = v107;
      v52 = 1;
    }
    else
    {
      v38 = *(_QWORD *)v32;
      v39 = *((_QWORD *)v32 + 1);
      v40 = v32[16];
      sub_10000BAD4(*(_QWORD *)v32, v39, v40);
      *(_QWORD *)v31 = v38;
      *((_QWORD *)v31 + 1) = v39;
      v31[16] = v40;
      v41 = *((_QWORD *)v32 + 3);
      *((_QWORD *)v31 + 3) = v41;
      v42 = *((_QWORD *)v32 + 4);
      v43 = *((_QWORD *)v32 + 5);
      v44 = v32[48];
      swift_bridgeObjectRetain(v41);
      sub_10000BAD4(v42, v43, v44);
      *((_QWORD *)v31 + 4) = v42;
      *((_QWORD *)v31 + 5) = v43;
      v31[48] = v44;
      v45 = *((_QWORD *)v32 + 7);
      *((_QWORD *)v31 + 7) = v45;
      v46 = v32[80];
      swift_bridgeObjectRetain(v45);
      if (v46 == 255)
      {
        v49 = *((_OWORD *)v32 + 4);
        v31[80] = v32[80];
        *((_OWORD *)v31 + 4) = v49;
      }
      else
      {
        v48 = *((_QWORD *)v32 + 8);
        v47 = *((_QWORD *)v32 + 9);
        sub_10000BB2C(v48, v47, v46);
        *((_QWORD *)v31 + 8) = v48;
        *((_QWORD *)v31 + 9) = v47;
        v31[80] = v46;
      }
      v50 = v31;
      v51 = v33;
      v52 = 0;
    }
    swift_storeEnumTagMultiPayload(v50, v51, v52);
  }
  v100 = *(int *)(v9 + 24);
  v101 = (char *)a1 + v100;
  v102 = (char *)v2 + v100;
  v103 = type metadata accessor for FLFollowUpInformation(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v103 - 8) + 24))(v101, v102, v103);
  return a1;
}

char *sub_1000D7B0C(char *a1, char *a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;

  v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v4);
  if (EnumCaseMultiPayload == 2)
  {
    v7 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    v8 = sub_100004FC8(&qword_10015C420);
    *(_OWORD *)&a1[*(int *)(v8 + 48)] = *(_OWORD *)&a2[*(int *)(v8 + 48)];
    swift_storeEnumTagMultiPayload(a1, v4, 2);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v9 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
    swift_storeEnumTagMultiPayload(a1, v4, 1);
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    v6 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, v4, 0);
  }
  v10 = type metadata accessor for PrimarySettingsListFollowUpModel(0);
  v11 = *(int *)(v10 + 20);
  v12 = &a1[v11];
  v13 = &a2[v11];
  v14 = type metadata accessor for PrimarySettingsListFollowUpModel.ViewType(0);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v15 = swift_getEnumCaseMultiPayload(v13, v4);
    if (v15 == 2)
    {
      v17 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v12, v13, v17);
      v18 = sub_100004FC8(&qword_10015C420);
      *(_OWORD *)&v12[*(int *)(v18 + 48)] = *(_OWORD *)&v13[*(int *)(v18 + 48)];
      swift_storeEnumTagMultiPayload(v12, v4, 2);
    }
    else if (v15 == 1)
    {
      v19 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v12, v13, v19);
      swift_storeEnumTagMultiPayload(v12, v4, 1);
    }
    else if (v15)
    {
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
    else
    {
      v16 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v12, v13, v16);
      swift_storeEnumTagMultiPayload(v12, v4, 0);
    }
    v20 = (int *)type metadata accessor for PrimarySettingsListFollowUpActionModel(0);
    v21 = v20[5];
    v22 = &v12[v21];
    v23 = &v13[v21];
    v24 = type metadata accessor for FLFollowUpGroupIdentity(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v22, v23, v24);
    v12[v20[6]] = v13[v20[6]];
    *(_OWORD *)&v12[v20[7]] = *(_OWORD *)&v13[v20[7]];
    *(_OWORD *)&v12[v20[8]] = *(_OWORD *)&v13[v20[8]];
    v25 = v20[9];
    v26 = &v12[v25];
    v27 = &v13[v25];
    v28 = *((_OWORD *)v27 + 1);
    *(_OWORD *)v26 = *(_OWORD *)v27;
    *((_OWORD *)v26 + 1) = v28;
    v29 = v20[10];
    v30 = &v12[v29];
    v31 = &v13[v29];
    *(_OWORD *)v30 = *(_OWORD *)v31;
    v30[16] = v31[16];
    swift_storeEnumTagMultiPayload(v12, v14, 1);
  }
  else
  {
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  v32 = *(int *)(v10 + 24);
  v33 = &a1[v32];
  v34 = &a2[v32];
  v35 = type metadata accessor for FLFollowUpInformation(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v33, v34, v35);
  return a1;
}

char *sub_1000D7E44(char *a1, char *a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;

  if (a1 == a2)
  {
    v10 = type metadata accessor for PrimarySettingsListFollowUpModel(0);
    goto LABEL_21;
  }
  sub_1000076B4((uint64_t)a1, type metadata accessor for PrimarySettingsListItemIdentifier);
  v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v4);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      v11 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
      v12 = sub_100004FC8(&qword_10015C420);
      *(_OWORD *)&a1[*(int *)(v12 + 48)] = *(_OWORD *)&a2[*(int *)(v12 + 48)];
      v7 = a1;
      v8 = v4;
      v9 = 2;
      goto LABEL_9;
    case 1:
      v13 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(a1, a2, v13);
      v7 = a1;
      v8 = v4;
      v9 = 1;
      goto LABEL_9;
    case 0:
      v6 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      v7 = a1;
      v8 = v4;
      v9 = 0;
LABEL_9:
      swift_storeEnumTagMultiPayload(v7, v8, v9);
      goto LABEL_11;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
LABEL_11:
  v10 = type metadata accessor for PrimarySettingsListFollowUpModel(0);
  v14 = *(int *)(v10 + 20);
  v15 = &a1[v14];
  v16 = &a2[v14];
  sub_1000076B4((uint64_t)&a1[v14], type metadata accessor for PrimarySettingsListFollowUpModel.ViewType);
  v17 = type metadata accessor for PrimarySettingsListFollowUpModel.ViewType(0);
  if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
  {
    v18 = swift_getEnumCaseMultiPayload(v16, v4);
    if (v18 == 2)
    {
      v20 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v15, v16, v20);
      v21 = sub_100004FC8(&qword_10015C420);
      *(_OWORD *)&v15[*(int *)(v21 + 48)] = *(_OWORD *)&v16[*(int *)(v21 + 48)];
      swift_storeEnumTagMultiPayload(v15, v4, 2);
    }
    else if (v18 == 1)
    {
      v22 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v15, v16, v22);
      swift_storeEnumTagMultiPayload(v15, v4, 1);
    }
    else if (v18)
    {
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
    else
    {
      v19 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v15, v16, v19);
      swift_storeEnumTagMultiPayload(v15, v4, 0);
    }
    v23 = (int *)type metadata accessor for PrimarySettingsListFollowUpActionModel(0);
    v24 = v23[5];
    v25 = &v15[v24];
    v26 = &v16[v24];
    v27 = type metadata accessor for FLFollowUpGroupIdentity(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v25, v26, v27);
    v15[v23[6]] = v16[v23[6]];
    *(_OWORD *)&v15[v23[7]] = *(_OWORD *)&v16[v23[7]];
    *(_OWORD *)&v15[v23[8]] = *(_OWORD *)&v16[v23[8]];
    v28 = v23[9];
    v29 = &v15[v28];
    v30 = &v16[v28];
    v31 = *((_OWORD *)v30 + 1);
    *(_OWORD *)v29 = *(_OWORD *)v30;
    *((_OWORD *)v29 + 1) = v31;
    v32 = v23[10];
    v33 = &v15[v32];
    v34 = &v16[v32];
    *(_OWORD *)v33 = *(_OWORD *)v34;
    v33[16] = v34[16];
    swift_storeEnumTagMultiPayload(v15, v17, 1);
  }
  else
  {
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
LABEL_21:
  v35 = *(int *)(v10 + 24);
  v36 = &a1[v35];
  v37 = &a2[v35];
  v38 = type metadata accessor for FLFollowUpInformation(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 40))(v36, v37, v38);
  return a1;
}

uint64_t sub_1000D81AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D81B8);
}

uint64_t sub_1000D81B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PrimarySettingsListFollowUpModel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1000D81F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D8200);
}

uint64_t sub_1000D8200(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PrimarySettingsListFollowUpModel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for PrimarySettingsListFollowUpItem(uint64_t a1)
{
  uint64_t result;

  result = qword_10015C0B8;
  if (!qword_10015C0B8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PrimarySettingsListFollowUpItem);
  return result;
}

uint64_t sub_1000D827C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for PrimarySettingsListFollowUpModel(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1000D82E4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10012BBB0, 1);
}

uint64_t sub_1000D82F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t (**v30)@<X0>(uint64_t@<X8>);
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v47 = a1;
  v1 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  __chkstk_darwin(v1);
  v43 = (uint64_t)&v42 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for PrimarySettingsListFollowUpAction(0);
  v42 = *(_QWORD *)(v3 - 8);
  v4 = *(_QWORD *)(v42 + 64);
  v5 = __chkstk_darwin(v3);
  v6 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (char *)&v42 - v7;
  v9 = (int *)sub_100004FC8(&qword_10015C0F0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v44 = (uint64_t)&v42 - v13;
  v14 = type metadata accessor for PrimarySettingsListFollowUpActionModel(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_100004FC8(&qword_10015C0F8);
  __chkstk_darwin(v46);
  v18 = (char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for PrimarySettingsListFollowUpModel.ViewType(0);
  __chkstk_darwin(v19);
  v21 = (char *)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for PrimarySettingsListFollowUpModel(0);
  sub_1000076F0(v45 + *(int *)(v22 + 20), (uint64_t)v21, type metadata accessor for PrimarySettingsListFollowUpModel.ViewType);
  if (swift_getEnumCaseMultiPayload(v21, v19) == 1)
  {
    sub_100007670((uint64_t)v21, (uint64_t)v16, type metadata accessor for PrimarySettingsListFollowUpActionModel);
    sub_1000076F0((uint64_t)v16, (uint64_t)v8, type metadata accessor for PrimarySettingsListFollowUpActionModel);
    v23 = v43;
    sub_1000076F0((uint64_t)v16, v43, type metadata accessor for PrimarySettingsListItemIdentifier);
    sub_1000076F0((uint64_t)v8, (uint64_t)v6, type metadata accessor for PrimarySettingsListFollowUpAction);
    v24 = *(unsigned __int8 *)(v42 + 80);
    v25 = (v24 + 16) & ~v24;
    v26 = swift_allocObject(&unk_10014DB80, v25 + v4, v24 | 7);
    sub_100007670((uint64_t)v6, v26 + v25, type metadata accessor for PrimarySettingsListFollowUpAction);
    v27 = type metadata accessor for SettingsAppModel(0);
    v28 = sub_1000D8950();
    *(_QWORD *)v12 = Environment.init<A>(_:)(v27, v27, v28);
    v12[8] = v29 & 1;
    sub_100007670(v23, (uint64_t)&v12[v9[9]], type metadata accessor for PrimarySettingsListItemIdentifier);
    v12[v9[10]] = 1;
    v30 = (uint64_t (**)@<X0>(uint64_t@<X8>))&v12[v9[11]];
    *v30 = sub_1000D8914;
    v30[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v26;
    sub_1000076B4((uint64_t)v8, type metadata accessor for PrimarySettingsListFollowUpAction);
    v31 = v44;
    sub_1000D8998((uint64_t)v12, v44);
    sub_1000D89E0(v31, (uint64_t)v18);
    swift_storeEnumTagMultiPayload(v18, v46, 1);
    v32 = sub_1000D8A28();
    v33 = sub_100007868(&qword_10015C108, &qword_10015C0F0, (uint64_t)&unk_10011B660);
    _ConditionalContent<>.init(storage:)(v18, &type metadata for PrimarySettingsListFollowUpHeader, v9, v32, v33);
    sub_1000D8A6C(v31);
    return sub_1000076B4((uint64_t)v16, type metadata accessor for PrimarySettingsListFollowUpActionModel);
  }
  else
  {
    v35 = v21[16];
    v36 = *((_QWORD *)v21 + 3);
    v37 = v21[48];
    v38 = *((_QWORD *)v21 + 7);
    v39 = v21[80];
    *(_OWORD *)v18 = *(_OWORD *)v21;
    v18[16] = v35;
    *((_QWORD *)v18 + 3) = v36;
    *((_OWORD *)v18 + 2) = *((_OWORD *)v21 + 2);
    v18[48] = v37;
    *((_QWORD *)v18 + 7) = v38;
    *((_OWORD *)v18 + 4) = *((_OWORD *)v21 + 4);
    v18[80] = v39;
    swift_storeEnumTagMultiPayload(v18, v46, 0);
    v40 = sub_1000D8A28();
    v41 = sub_100007868(&qword_10015C108, &qword_10015C0F0, (uint64_t)&unk_10011B660);
    return _ConditionalContent<>.init(storage:)(v18, &type metadata for PrimarySettingsListFollowUpHeader, v9, v40, v41);
  }
}

uint64_t sub_1000D872C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v1 = *(_QWORD *)(type metadata accessor for PrimarySettingsListFollowUpAction(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v5 = v0 + v3;
  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v0 + v3, v6))
  {
    case 0u:
    case 1u:
      v7 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v0 + v3, v7);
      break;
    case 2u:
      v8 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v3, v8);
      v9 = sub_100004FC8(&qword_10015C420);
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + *(int *)(v9 + 48) + 8));
      break;
    case 3u:
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 40));
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 56));
      break;
    case 4u:
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 40));
      break;
    case 5u:
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 24));

      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 40));
      if (*(_QWORD *)(v5 + 72))
        sub_100005474((_QWORD *)(v5 + 48));
      break;
    default:
      break;
  }
  v10 = (int *)type metadata accessor for PrimarySettingsListFollowUpActionModel(0);
  v11 = v5 + v10[5];
  v12 = type metadata accessor for FLFollowUpGroupIdentity(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  swift_bridgeObjectRelease(*(_QWORD *)(v5 + v10[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v5 + v10[8] + 8));
  v13 = v5 + v10[9];
  sub_100007618(*(_QWORD *)v13, *(_QWORD *)(v13 + 8), *(_BYTE *)(v13 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v13 + 24));
  v14 = v5 + v10[10];
  v15 = *(unsigned __int8 *)(v14 + 16);
  if (v15 != 255)
    sub_10000BB54(*(_QWORD *)v14, *(_QWORD *)(v14 + 8), v15);
  return swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_1000D8914@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PrimarySettingsListFollowUpAction(0) - 8) + 80);
  return sub_10007DA4C(v1 + ((v3 + 16) & ~v3), a1);
}

unint64_t sub_1000D8950()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159090;
  if (!qword_100159090)
  {
    v1 = type metadata accessor for SettingsAppModel(255);
    result = swift_getWitnessTable(&unk_10011AF44, v1);
    atomic_store(result, (unint64_t *)&qword_100159090);
  }
  return result;
}

uint64_t sub_1000D8998(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004FC8(&qword_10015C0F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D89E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004FC8(&qword_10015C0F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000D8A28()
{
  unint64_t result;

  result = qword_10015C100;
  if (!qword_10015C100)
  {
    result = swift_getWitnessTable(&unk_100117A94, &type metadata for PrimarySettingsListFollowUpHeader);
    atomic_store(result, (unint64_t *)&qword_10015C100);
  }
  return result;
}

uint64_t sub_1000D8A6C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004FC8(&qword_10015C0F0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000D8AAC()
{
  return sub_100007868(&qword_10015C110, &qword_10015C118, (uint64_t)&protocol conformance descriptor for _UnaryViewAdaptor<A>);
}

uint64_t sub_1000D8AD8(uint64_t a1, uint64_t a2)
{
  return sub_1000D8AF0(a1, a2, &qword_10015B960);
}

uint64_t sub_1000D8AE4(uint64_t a1, uint64_t a2)
{
  return sub_1000D8AF0(a1, a2, &qword_10015B968);
}

uint64_t sub_1000D8AF0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  if (*(_QWORD *)(a2 + 16))
  {
    v6 = swift_retain(a1);
    v7 = sub_1000DA9F0(v6);
    if ((v8 & 1) != 0)
    {
      sub_1000148AC(*(_QWORD *)(a2 + 56) + 32 * v7, (uint64_t)&v12);
      swift_release(a1);
      if (*((_QWORD *)&v13 + 1))
      {
        v9 = sub_100004FC8(a3);
        if ((swift_dynamicCast(&v14, &v12, (char *)&type metadata for Any + 8, v9, 6) & 1) != 0)
        {
          result = v14;
          if (v14)
            return result;
        }
        goto LABEL_10;
      }
    }
    else
    {
      v12 = 0u;
      v13 = 0u;
      swift_release(a1);
    }
  }
  else
  {
    v12 = 0u;
    v13 = 0u;
  }
  sub_10000BA50((uint64_t)&v12, &qword_10015BA90);
LABEL_10:
  if (qword_100156D48 != -1)
    swift_once(&qword_100156D48, sub_1000C4210);
  v11 = qword_10015D408;
  v14 = qword_10015D408;
  swift_retain(qword_10015D408);
  swift_getAtKeyPath(&v14, a1);
  swift_release(v11);
  return v12;
}

uint64_t sub_1000D8C18(uint64_t a1, uint64_t a2)
{
  return sub_1000D8AF0(a1, a2, (uint64_t *)&unk_10015B970);
}

uint64_t sub_1000D8C24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  if (*(_QWORD *)(a2 + 16))
  {
    v4 = swift_retain(a1);
    v5 = sub_1000DA9F0(v4);
    if ((v6 & 1) != 0)
    {
      sub_1000148AC(*(_QWORD *)(a2 + 56) + 32 * v5, (uint64_t)&v10);
      swift_release(a1);
      if (*((_QWORD *)&v11 + 1))
      {
        v7 = sub_100004FC8((uint64_t *)&unk_10015C200);
        if ((swift_dynamicCast(&v12, &v10, (char *)&type metadata for Any + 8, v7, 6) & 1) != 0)
        {
          result = v12;
          if (v12)
            return result;
        }
        goto LABEL_10;
      }
    }
    else
    {
      v10 = 0u;
      v11 = 0u;
      swift_release(a1);
    }
  }
  else
  {
    v10 = 0u;
    v11 = 0u;
  }
  sub_10000BA50((uint64_t)&v10, &qword_10015BA90);
LABEL_10:
  if (qword_100156D48 != -1)
    swift_once(&qword_100156D48, sub_1000C4210);
  v9 = qword_10015D408;
  v12 = qword_10015D408;
  swift_retain(qword_10015D408);
  swift_getAtKeyPath(&v12, a1);
  swift_release(v9);
  return v10;
}

uint64_t sub_1000D8D44(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  _BOOL4 v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t (*v53)(char *, unint64_t, uint64_t);
  char *v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  NSObject *v82;
  os_log_type_t v83;
  uint8_t *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t (*v89)(unint64_t, uint64_t);
  uint64_t v90;
  _BYTE *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  os_log_type_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t MetatypeMetadata;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  char *v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  uint64_t v138;
  void (*v139)(char *, uint64_t, uint64_t);
  uint64_t v140;
  unint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;

  v2 = v1;
  v4 = sub_100004FC8(&qword_10015C890);
  __chkstk_darwin(v4);
  v122 = (char *)&v117 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v120 = *(_QWORD *)(v121 - 8);
  __chkstk_darwin(v121);
  v119 = (char *)&v117 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = type metadata accessor for URLQueryItem(0);
  v124 = *(_QWORD *)(v125 - 8);
  __chkstk_darwin(v125);
  v123 = (char *)&v117 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = type metadata accessor for SettingsURLDestination.Action(0);
  __chkstk_darwin(v130);
  v132 = (uint64_t)&v117 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = type metadata accessor for SettingsURLDestination(0);
  __chkstk_darwin(v129);
  v10 = (char *)&v117 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for SettingsURLRoute(0);
  __chkstk_darwin(v11);
  v134 = (char *)&v117 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v143 - 8);
  v14 = __chkstk_darwin(v143);
  v135 = (char *)&v117 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v126 = (char *)&v117 - v17;
  v18 = __chkstk_darwin(v16);
  v127 = (char *)&v117 - v19;
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v117 - v21;
  v23 = __chkstk_darwin(v20);
  v137 = (char *)&v117 - v24;
  v25 = __chkstk_darwin(v23);
  v136 = (char *)&v117 - v26;
  v27 = __chkstk_darwin(v25);
  v141 = (unint64_t)&v117 - v28;
  __chkstk_darwin(v27);
  v30 = (char *)&v117 - v29;
  if (qword_100156CB0 != -1)
    swift_once(&qword_100156CB0, sub_10008BE28);
  v131 = v22;
  v31 = type metadata accessor for Logger(0);
  v32 = sub_100007808(v31, (uint64_t)qword_10015D2C8);
  v139 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v139(v30, a1, v143);
  v33 = swift_retain_n(v2, 2);
  v140 = v32;
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.default.getter();
  v36 = os_log_type_enabled(v34, v35);
  v142 = v2;
  v138 = a1;
  v133 = v10;
  v128 = v13;
  if (v36)
  {
    v37 = swift_slowAlloc(42, -1);
    v118 = swift_slowAlloc(96, -1);
    v146 = v118;
    *(_DWORD *)v37 = 136315907;
    v38 = _typeName(_:qualified:)(*v2, 0);
    v40 = v39;
    v144 = sub_1000DA1F0(v38, v39, &v146);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145, v37 + 4, v37 + 12);
    v41 = v2;
    v42 = v143;
    swift_release_n(v41, 2);
    swift_bridgeObjectRelease(v40);
    *(_WORD *)(v37 + 12) = 2080;
    v144 = sub_1000DA1F0(0x5255656C646E6168, 0xED0000293A5F284CLL, &v146);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145, v37 + 14, v37 + 22);
    *(_WORD *)(v37 + 22) = 2160;
    v144 = 1752392040;
    v43 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145, v37 + 24, v37 + 32);
    *(_WORD *)(v37 + 32) = 2081;
    v44 = URL.absoluteString.getter(v43);
    v46 = v45;
    v144 = sub_1000DA1F0(v44, v45, &v146);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145, v37 + 34, v37 + 42);
    swift_bridgeObjectRelease(v46);
    v47 = *(void (**)(char *, uint64_t))(v13 + 8);
    v47(v30, v42);
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "Start (%s.%s) url: '%{private,mask.hash}s'…", (uint8_t *)v37, 0x2Au);
    v48 = v118;
    swift_arrayDestroy(v118, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v48, -1, -1);
    v49 = v37;
    a1 = v138;
    swift_slowDealloc(v49, -1, -1);
  }
  else
  {
    swift_release_n(v2, 2);
    v47 = *(void (**)(char *, uint64_t))(v13 + 8);
    v47(v30, v143);
  }

  v50 = v141;
  sub_1000872B4(v141);
  v51 = v136;
  v52 = v143;
  v53 = (uint64_t (*)(char *, unint64_t, uint64_t))v139;
  v139(v136, a1, v143);
  v54 = v137;
  v55 = v53(v137, v50, v52);
  v56 = Logger.logObject.getter(v55);
  v57 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v56, v57))
  {
    v58 = swift_slowAlloc(42, -1);
    v59 = swift_slowAlloc(64, -1);
    v146 = v59;
    *(_DWORD *)v58 = 141558787;
    v144 = 1752392040;
    v60 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145, v58 + 4, v58 + 12);
    *(_WORD *)(v58 + 12) = 2081;
    v61 = URL.absoluteString.getter(v60);
    v63 = v62;
    v144 = sub_1000DA1F0(v61, v62, &v146);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145, v58 + 14, v58 + 22);
    swift_bridgeObjectRelease(v63);
    v64 = v51;
    v65 = v143;
    v47(v64, v143);
    *(_WORD *)(v58 + 22) = 2160;
    v144 = 1752392040;
    v66 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145, v58 + 24, v58 + 32);
    *(_WORD *)(v58 + 32) = 2081;
    v67 = URL.absoluteString.getter(v66);
    v69 = v68;
    v144 = sub_1000DA1F0(v67, v68, &v146);
    a1 = v138;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145, v58 + 34, v58 + 42);
    swift_bridgeObjectRelease(v69);
    v47(v54, v65);
    _os_log_impl((void *)&_mh_execute_header, v56, v57, "Transformed URL: from '%{private,mask.hash}s' to '%{private,mask.hash}s'", (uint8_t *)v58, 0x2Au);
    swift_arrayDestroy(v59, 2, (char *)&type metadata for Any + 8);
    v70 = v59;
    v50 = v141;
    swift_slowDealloc(v70, -1, -1);
    swift_slowDealloc(v58, -1, -1);
  }
  else
  {
    v71 = v143;
    v47(v51, v143);
    v47(v54, v71);
  }

  v137 = (char *)v47;
  v72 = v142[2];
  v73 = qword_100156C30;
  swift_retain(v72);
  if (v73 != -1)
    swift_once(&qword_100156C30, sub_1000465F8);
  TaskLocal.get()(&v146);
  v74 = v146;
  v75 = sub_1000D8C24(v72, v146);
  swift_release(v72);
  swift_bridgeObjectRelease(v74);
  v76 = *(_QWORD *)(v75 + 16);
  if (v76)
  {
    swift_bridgeObjectRetain(v75);
    v77 = (_QWORD *)(v75 + 40);
    while (1)
    {
      v78 = *(v77 - 1);
      v79 = *v77;
      if (((*(uint64_t (**)(unint64_t, uint64_t, _QWORD))(*v77 + 8))(v50, v78, *v77) & 1) != 0)
        break;
      v77 += 2;
      if (!--v76)
      {
        swift_bridgeObjectRelease(v75);
        goto LABEL_16;
      }
    }
    swift_bridgeObjectRelease_n(v75, 2);
    v136 = (char *)v142[4];
    v91 = sub_1000DB598();
    v92 = sub_1000F49BC();
    v94 = v93;
    v95 = v50;
    v97 = v96;
    swift_release(v91);
    v98 = (uint64_t)v134;
    (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v79 + 16))(v95, v92, v94, v97, v78, v79);
    swift_bridgeObjectRelease(v97);
    swift_bridgeObjectRelease(v94);
    swift_bridgeObjectRelease(v92);
    v99 = sub_100004FC8(&qword_1001570F8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v99 - 8) + 48))(v98, 1, v99) != 1)
    {
      v113 = (uint64_t)v133;
      sub_100007670(v98, (uint64_t)v133, type metadata accessor for SettingsURLDestination);
      v114 = v132;
      sub_1000076F0(v113 + *(int *)(v129 + 20), v132, type metadata accessor for SettingsURLDestination.Action);
      v115 = (char *)&loc_1000D9898
           + *((int *)qword_1000D9DE0 + swift_getEnumCaseMultiPayload(v114, v130));
      __asm { BR              X10 }
    }
    v80 = v131;
    v100 = ((uint64_t (*)(char *, unint64_t, uint64_t))v139)(v131, v95, v143);
    v82 = Logger.logObject.getter(v100);
    v101 = static os_log_type_t.fault.getter(v82);
    if (os_log_type_enabled(v82, v101))
    {
      v102 = swift_slowAlloc(22, -1);
      v103 = swift_slowAlloc(64, -1);
      v146 = v103;
      *(_DWORD *)v102 = 136446466;
      MetatypeMetadata = swift_getMetatypeMetadata(v78);
      v105 = _typeName(_:qualified:)(MetatypeMetadata, 0);
      v107 = v106;
      v144 = sub_1000DA1F0(v105, v106, &v146);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145, v102 + 4, v102 + 12);
      v108 = swift_bridgeObjectRelease(v107);
      *(_WORD *)(v102 + 12) = 2082;
      v109 = URL.absoluteString.getter(v108);
      v111 = v110;
      v144 = sub_1000DA1F0(v109, v110, &v146);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145, v102 + 14, v102 + 22);
      swift_bridgeObjectRelease(v111);
      v89 = (uint64_t (*)(unint64_t, uint64_t))v137;
      ((void (*)(char *, uint64_t))v137)(v80, v143);
      _os_log_impl((void *)&_mh_execute_header, v82, v101, "Route provider %{public}s discarded url '%{public}s'.", (uint8_t *)v102, 0x16u);
      swift_arrayDestroy(v103, 2, (char *)&type metadata for Any + 8);
      v112 = v103;
      v50 = v141;
      swift_slowDealloc(v112, -1, -1);
      v90 = v102;
      goto LABEL_18;
    }
    v50 = v95;
LABEL_24:
    v89 = (uint64_t (*)(unint64_t, uint64_t))v137;
    ((void (*)(char *, uint64_t))v137)(v80, v143);
    goto LABEL_25;
  }
LABEL_16:
  swift_bridgeObjectRelease(v75);
  v80 = v135;
  v81 = ((uint64_t (*)(char *, unint64_t, uint64_t))v139)(v135, v50, v143);
  v82 = Logger.logObject.getter(v81);
  v83 = static os_log_type_t.fault.getter(v82);
  if (!os_log_type_enabled(v82, v83))
    goto LABEL_24;
  v84 = (uint8_t *)swift_slowAlloc(12, -1);
  v85 = swift_slowAlloc(32, -1);
  v146 = v85;
  *(_DWORD *)v84 = 136446210;
  v86 = URL.absoluteString.getter(v85);
  v88 = v87;
  v144 = sub_1000DA1F0(v86, v87, &v146);
  v50 = v141;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145, v84 + 4, v84 + 12);
  swift_bridgeObjectRelease(v88);
  v89 = (uint64_t (*)(unint64_t, uint64_t))v137;
  ((void (*)(char *, uint64_t))v137)(v80, v143);
  _os_log_impl((void *)&_mh_execute_header, v82, v83, "No route provider found for url '%{public}s'", v84, 0xCu);
  swift_arrayDestroy(v85, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v85, -1, -1);
  v90 = (uint64_t)v84;
LABEL_18:
  swift_slowDealloc(v90, -1, -1);
LABEL_25:

  sub_1000D9DF8(v142, a1);
  return v89(v50, v143);
}

void sub_1000D9DF8(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100156CB0 != -1)
    swift_once(&qword_100156CB0, sub_10008BE28);
  v8 = type metadata accessor for Logger(0);
  sub_100007808(v8, (uint64_t)qword_10015D2C8);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  v9 = swift_retain_n(a1, 2);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc(42, -1);
    v22 = swift_slowAlloc(96, -1);
    v24 = v22;
    *(_DWORD *)v12 = 136315907;
    v13 = _typeName(_:qualified:)(*a1, 0);
    v15 = v14;
    v23 = sub_1000DA1F0(v13, v14, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v12 + 4, v12 + 12);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease(v15);
    *(_WORD *)(v12 + 12) = 2080;
    v23 = sub_1000DA1F0(0x5255656C646E6168, 0xED0000293A5F284CLL, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v12 + 14, v12 + 22);
    *(_WORD *)(v12 + 22) = 2160;
    v23 = 1752392040;
    v16 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v12 + 24, v12 + 32);
    *(_WORD *)(v12 + 32) = 2081;
    v17 = URL.absoluteString.getter(v16);
    v19 = v18;
    v23 = sub_1000DA1F0(v17, v18, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v12 + 34, v12 + 42);
    swift_bridgeObjectRelease(v19);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "…Complete (%s.%s) url: '%{private,mask.hash}s'", (uint8_t *)v12, 0x2Au);
    v20 = v22;
    swift_arrayDestroy(v22, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }
  else
  {
    swift_release_n(a1, 2);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

}

uint64_t sub_1000DA0C4()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  v1 = (char *)v0 + OBJC_IVAR____TtC11SettingsApp16SettingsAppModel___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_1000DA12C()
{
  return type metadata accessor for SettingsAppModel(0);
}

uint64_t type metadata accessor for SettingsAppModel(uint64_t a1)
{
  uint64_t result;

  result = qword_10015C150;
  if (!qword_10015C150)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SettingsAppModel);
  return result;
}

uint64_t sub_1000DA170(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1000DA1F0(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  void *ObjectType;

  v6 = sub_1000DA2C0(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_1000148AC((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_1000148AC((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_100005474(v12);
  return v7;
}

uint64_t sub_1000DA2C0(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_1000DA478(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v14, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

uint64_t sub_1000DA478(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_1000DA50C(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_1000DA6E4(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_1000DA6E4(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_1000DA50C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_1000DA680(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return &_swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_1000DA680(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return &_swiftEmptyArrayStorage;
  v4 = sub_100004FC8(&qword_10015C1F8);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_1000DA6E4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100004FC8(&qword_10015C1F8);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

unint64_t sub_1000DA830(uint64_t a1)
{
  uint64_t v1;
  Swift::Int v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, *(_QWORD *)(v1 + 40));
  sub_10009FDA0();
  v3 = Hasher._finalize()();
  return sub_1000DAA90(a1, v3);
}

unint64_t sub_1000DA888(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  Swift::Int v7;
  _QWORD v9[9];

  Hasher.init(_seed:)(v9, *(_QWORD *)(v3 + 40));
  sub_1000B938C((uint64_t)v9, a1, a2, a3);
  v7 = Hasher._finalize()();
  return sub_1000DABA0(a1, a2, a3, v7);
}

unint64_t sub_1000DA900(char a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;
  Swift::Int v5;
  _QWORD v7[9];

  v2 = v1;
  v4 = a1 & 1;
  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  Hasher._combine(_:)(a1 & 1);
  v5 = Hasher._finalize()();
  return sub_1000DAEBC(v4, v5);
}

unint64_t sub_1000DA95C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_1000DAF78(a1, v4);
}

unint64_t sub_1000DA98C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_1000DB03C(a1, a2, v5);
}

unint64_t sub_1000DA9F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(v1 + 40);
  v4 = sub_100004FC8(&qword_10015C1F0);
  v5 = dispatch thunk of Hashable._rawHashValue(seed:)(v3, v4, &protocol witness table for AnyKeyPath);
  return sub_1000DB11C(a1, v5);
}

unint64_t sub_1000DAA60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_1000DB1E8(a1, v4);
}

unint64_t sub_1000DAA90(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v16;

  v5 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v2 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    do
    {
      sub_1000076F0(*(_QWORD *)(v2 + 48) + v12 * v10, (uint64_t)v8, type metadata accessor for PrimarySettingsListItemIdentifier);
      sub_1000A103C((uint64_t)v8, a1);
      v14 = v13;
      sub_1000076B4((uint64_t)v8, type metadata accessor for PrimarySettingsListItemIdentifier);
      if ((v14 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

unint64_t sub_1000DABA0(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  BOOL v17;

  v5 = v4 + 64;
  v6 = -1 << *(_BYTE *)(v4 + 32);
  v7 = a4 & ~v6;
  if (((*(_QWORD *)(v4 + 64 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
  {
    v11 = ~v6;
    v12 = *(_QWORD *)(v4 + 48);
    do
    {
      v13 = (uint64_t *)(v12 + 24 * v7);
      v14 = *v13;
      v15 = v13[1];
      v16 = *((unsigned __int8 *)v13 + 16);
      if (v16)
      {
        if (v16 != 1)
          __asm { BR              X8 }
        if (a3 != 1)
          goto LABEL_4;
      }
      else if (a3)
      {
        goto LABEL_4;
      }
      v17 = v14 == a1 && v15 == a2;
      if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, a1, a2, 0) & 1) != 0)
        return v7;
LABEL_4:
      v7 = (v7 + 1) & v11;
    }
    while (((*(_QWORD *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0);
  }
  return v7;
}

unint64_t sub_1000DAEBC(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (((((a1 & 1) == 0) ^ *(unsigned __int8 *)(v7 + result)) & 1) == 0)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (((((a1 & 1) == 0) ^ *(_BYTE *)(v7 + result)) & 1) != 0)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_1000DAF78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_1000CA038(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_100014878((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_1000DB03C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = v10[1];
    v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      do
      {
        v6 = (v6 + 1) & v13;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v14 = (_QWORD *)(v9 + 16 * v6);
        v15 = v14[1];
        v16 = *v14 == a1 && v15 == a2;
      }
      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_1000DB11C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v11 = a1;
  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = v2;
    v7 = ~v4;
    v8 = sub_100004FC8(&qword_10015C1F0);
    do
    {
      v10 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v5);
      if ((dispatch thunk of static Equatable.== infix(_:_:)(&v10, &v11, v8, &protocol witness table for AnyKeyPath) & 1) != 0)
        break;
      v5 = (v5 + 1) & v7;
    }
    while (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  return v5;
}

unint64_t sub_1000DB1E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  id v7;
  char v8;
  uint64_t v9;
  id v10;
  char v11;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    sub_1000DB2F0();
    v7 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
    v8 = static NSObject.== infix(_:_:)(v7, a1);

    if ((v8 & 1) == 0)
    {
      v9 = ~v4;
      for (i = (i + 1) & v9; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v9)
      {
        v10 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
        v11 = static NSObject.== infix(_:_:)(v10, a1);

        if ((v11 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t sub_1000DB2F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015C640;
  if (!qword_10015C640)
  {
    v1 = objc_opt_self(CSSearchQuery);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10015C640);
  }
  return result;
}

unint64_t sub_1000DB32C(uint64_t a1)
{
  return sub_1000DB344(a1, (uint64_t *)&unk_10015C670);
}

unint64_t sub_1000DB338(uint64_t a1)
{
  return sub_1000DB344(a1, (uint64_t *)&unk_10015C530);
}

unint64_t sub_1000DB344(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  unint64_t result;
  char v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    v5 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004FC8(a2);
  v4 = static _DictionaryStorage.allocate(capacity:)(v3);
  v5 = (_QWORD *)v4;
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v5;
  }
  swift_retain(v4);
  v7 = (void **)(a1 + 48);
  while (1)
  {
    v8 = (uint64_t)*(v7 - 2);
    v9 = (uint64_t)*(v7 - 1);
    v10 = *v7;
    swift_bridgeObjectRetain(v9);
    v11 = v10;
    result = sub_1000DA98C(v8, v9);
    if ((v13 & 1) != 0)
      break;
    *(_QWORD *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v14 = (uint64_t *)(v5[6] + 16 * result);
    *v14 = v8;
    v14[1] = v9;
    *(_QWORD *)(v5[7] + 8 * result) = v11;
    v15 = v5[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v5[2] = v17;
    v7 += 3;
    if (!--v6)
    {
      swift_release(v5);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000DB458(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004FC8(&qword_10015BAA8);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100018C00(v7, (uint64_t)v16, &qword_10015C520);
    result = sub_1000DA95C((uint64_t)v16);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v10 = v4[6] + 40 * result;
    v11 = v16[0];
    v12 = v16[1];
    *(_QWORD *)(v10 + 32) = v17;
    *(_OWORD *)v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
    result = (unint64_t)sub_1000CA074(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 72;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

_BYTE *sub_1000DB598()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    v2 = *(_BYTE **)(v0 + 16);
  }
  else
  {
    v3 = v0;
    v4 = type metadata accessor for PrimarySettingsListModel(0);
    swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v5 = swift_retain_n(v0, 2);
    v2 = sub_1000F99A8(v5, (uint64_t)&off_10014DBE8, v0, (uint64_t)&off_10014DBD8);
    v6 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = v2;
    swift_retain(v2);
    swift_release(v6);
    v1 = 0;
  }
  swift_retain(v1);
  return v2;
}

uint64_t sub_1000DB628@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  KeyPath = swift_getKeyPath(&unk_10011B138);
  v8[0] = v1;
  v4 = sub_100007828((unint64_t *)&qword_100158F78, type metadata accessor for SettingsAppNavigationModel, (uint64_t)&unk_10011B030);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v8, KeyPath, v4);
  swift_release(KeyPath);
  v5 = v1 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__navigationPath;
  swift_beginAccess(v1 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__navigationPath, v8, 0, 0);
  v6 = type metadata accessor for NavigationPath(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, v5, v6);
}

uint64_t sub_1000DB6EC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10011B138);
  v9[0] = v3;
  v5 = sub_100007828((unint64_t *)&qword_100158F78, type metadata accessor for SettingsAppNavigationModel, (uint64_t)&unk_10011B030);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v9, KeyPath, v5);
  swift_release(KeyPath);
  v6 = v3 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__navigationPath;
  swift_beginAccess(v3 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__navigationPath, v9, 0, 0);
  v7 = type metadata accessor for NavigationPath(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, v6, v7);
}

uint64_t sub_1000DB7B0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  _BYTE v12[16];
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;

  v4 = type metadata accessor for NavigationPath(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v8 = *a2;
  KeyPath = swift_getKeyPath(&unk_10011B138);
  v13 = v8;
  v14 = v7;
  v15 = v8;
  v10 = sub_100007828((unint64_t *)&qword_100158F78, type metadata accessor for SettingsAppNavigationModel, (uint64_t)&unk_10011B030);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v15, KeyPath, sub_1000F1C04, v12, (char *)&type metadata for () + 8, v10);
  swift_release(KeyPath);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
}

void sub_1000DB8BC()
{
  uint64_t v0;
  _BYTE *v1;
  id *v2;
  id v3;
  id v4;
  _BYTE *v5;
  id *v6;
  id v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[5];
  uint64_t v12;
  char v13[24];
  char v14[24];

  swift_retain(v0);
  v1 = sub_1000DB598();
  v2 = (id *)&v1[OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_viewControllerForPresentation];
  swift_beginAccess(&v1[OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_viewControllerForPresentation], v14, 0, 0);
  if (!*v2)
  {
    swift_release(v1);
    goto LABEL_6;
  }
  v3 = *v2;
  swift_release(v1);
  v4 = objc_msgSend(v3, "presentedViewController");

  if (!v4)
  {
LABEL_6:
    sub_1000E31D8(v0);
    goto LABEL_8;
  }
  v5 = sub_1000DB598();
  v6 = (id *)&v5[OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_viewControllerForPresentation];
  swift_beginAccess(&v5[OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_viewControllerForPresentation], v13, 0, 0);
  if (*v6)
  {
    v7 = *v6;
    swift_release(v5);
    v8 = swift_allocObject(&unk_10014DC10, 32, 7);
    *(_QWORD *)(v8 + 16) = sub_1000EC444;
    *(_QWORD *)(v8 + 24) = v0;
    v11[4] = sub_1000B1284;
    v12 = v8;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 1107296256;
    v11[2] = sub_100005350;
    v11[3] = &unk_10014DC28;
    v9 = _Block_copy(v11);
    v10 = v12;
    swift_retain(v0);
    swift_release(v10);
    objc_msgSend(v7, "dismissViewControllerAnimated:completion:", 1, v9);
    swift_release(v0);
    _Block_release(v9);

    return;
  }
  swift_release(v5);
LABEL_8:
  swift_release(v0);
}

uint64_t sub_1000DBA60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  _BYTE *v20;
  uint64_t KeyPath;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v26;
  unsigned int (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[3];

  v47 = a1;
  v2 = type metadata accessor for NavigationPath(0);
  v43 = *(_QWORD *)(v2 - 8);
  v44 = v2;
  __chkstk_darwin(v2);
  v42 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v41 = (uint64_t)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004FC8(&qword_10015AD68);
  __chkstk_darwin(v7);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100004FC8(&qword_10015C890);
  v11 = __chkstk_darwin(v10);
  v46 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v45 = (uint64_t)&v40 - v14;
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v40 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v40 - v18;
  v48 = v1;
  v20 = sub_1000DB598();
  KeyPath = swift_getKeyPath(&unk_10011B110);
  v50[0] = v20;
  v22 = sub_100007828(&qword_100158EF0, type metadata accessor for PrimarySettingsListModel, (uint64_t)&unk_10011B328);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v50, KeyPath, v22);
  swift_release(KeyPath);
  v23 = (uint64_t)&v20[OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_effectiveSelection];
  swift_beginAccess(&v20[OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_effectiveSelection], v50, 0, 0);
  sub_100018C00(v23, (uint64_t)v19, &qword_10015C890);
  swift_release(v20);
  v24 = (char)v47;
  swift_storeEnumTagMultiPayload(v17, v4, dword_10011B1E0[(char)v47]);
  v25 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56);
  v25(v17, 0, 1, v4);
  v26 = (uint64_t)&v9[*(int *)(v7 + 48)];
  sub_100018C00((uint64_t)v19, (uint64_t)v9, &qword_10015C890);
  sub_100018C00((uint64_t)v17, v26, &qword_10015C890);
  v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v27((uint64_t)v9, 1, v4) == 1)
  {
    sub_10000BA50((uint64_t)v17, &qword_10015C890);
    sub_10000BA50((uint64_t)v19, &qword_10015C890);
    if (v27(v26, 1, v4) == 1)
    {
      v28 = sub_10000BA50((uint64_t)v9, &qword_10015C890);
LABEL_8:
      v33 = v42;
      NavigationPath.init()(v28);
      v34 = swift_getKeyPath(&unk_10011B138);
      __chkstk_darwin(v34);
      v35 = v48;
      *(&v40 - 2) = v48;
      *(&v40 - 1) = (uint64_t)v33;
      v49 = v35;
      v36 = sub_100007828((unint64_t *)&qword_100158F78, type metadata accessor for SettingsAppNavigationModel, (uint64_t)&unk_10011B030);
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v49, v34, sub_1000F1C04, &v40 - 4, (char *)&type metadata for () + 8, v36);
      swift_release(v34);
      return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v33, v44);
    }
    goto LABEL_6;
  }
  v29 = v45;
  sub_100018C00((uint64_t)v9, v45, &qword_10015C890);
  if (v27(v26, 1, v4) == 1)
  {
    sub_10000BA50((uint64_t)v17, &qword_10015C890);
    sub_10000BA50((uint64_t)v19, &qword_10015C890);
    sub_1000076B4(v29, type metadata accessor for PrimarySettingsListItemIdentifier);
LABEL_6:
    sub_10000BA50((uint64_t)v9, &qword_10015AD68);
    goto LABEL_9;
  }
  v30 = v41;
  sub_100007670(v26, v41, type metadata accessor for PrimarySettingsListItemIdentifier);
  sub_1000A103C(v29, v30);
  v32 = v31;
  sub_1000076B4(v30, type metadata accessor for PrimarySettingsListItemIdentifier);
  sub_10000BA50((uint64_t)v17, &qword_10015C890);
  sub_10000BA50((uint64_t)v19, &qword_10015C890);
  sub_1000076B4(v29, type metadata accessor for PrimarySettingsListItemIdentifier);
  v28 = sub_10000BA50((uint64_t)v9, &qword_10015C890);
  if ((v32 & 1) != 0)
    goto LABEL_8;
LABEL_9:
  v38 = sub_1000DB598();
  v39 = (uint64_t)v46;
  swift_storeEnumTagMultiPayload(v46, v4, dword_10011B1E0[v24]);
  v25((char *)v39, 0, 1, v4);
  sub_1000F3614(v39);
  return swift_release(v38);
}

uint64_t sub_1000DBF40()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_10011B0E8);
  v4 = v0;
  v2 = sub_100007828((unint64_t *)&qword_100158F78, type metadata accessor for SettingsAppNavigationModel, (uint64_t)&unk_10011B030);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__shouldDismissSearch);
}

uint64_t sub_1000DBFCC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000E0858((uint64_t)&unk_10011B0C0, &OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__detailContent, (uint64_t)type metadata accessor for SettingsAppDetailContent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000076F0, a1);
}

uint64_t sub_1000DBFF0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10011B110);
  v8[0] = v3;
  v5 = sub_100007828(&qword_100158EF0, type metadata accessor for PrimarySettingsListModel, (uint64_t)&unk_10011B328);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = v3 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_effectiveSelection;
  swift_beginAccess(v3 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_effectiveSelection, v8, 0, 0);
  return sub_100018C00(v6, a2, &qword_10015C890);
}

uint64_t sub_1000DC0A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = sub_100004FC8(&qword_10015C890);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100018C00(a1, (uint64_t)v4, &qword_10015C890);
  return sub_1000F3614((uint64_t)v4);
}

void sub_1000DC12C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  os_log_t v80;
  uint64_t v81;
  NSObject *v82;
  os_log_type_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t (*v95)(char *, uint64_t, uint64_t);
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _BYTE *v100;
  uint64_t KeyPath;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t (*v107)(uint64_t, uint64_t, uint64_t);
  int v108;
  uint64_t *v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  NSObject *v121;
  os_log_type_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  os_log_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void (*v141)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int EnumCaseMultiPayload;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  NSObject *v152;
  os_log_type_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  const char *v159;
  id v160;
  void *v161;
  unsigned int v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  char *v168;
  _BYTE *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  _BYTE *v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  _BYTE *v192;
  void **v193;
  void *v194;
  id v195;
  uint64_t v196;
  void *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  os_log_t v223;
  uint64_t v224;
  char *v225;
  uint64_t v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  char v234[8];
  uint64_t aBlock[5];
  uint64_t v236;
  uint64_t v237;
  char v238[8];
  uint64_t v239;
  char v240[8];

  v230 = type metadata accessor for Logger(0);
  v221 = *(_QWORD *)(v230 - 8);
  __chkstk_darwin(v230);
  v227 = (char *)&v199 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v201 = type metadata accessor for SettingsAppDetailContent(0);
  v204 = *(_QWORD *)(v201 - 8);
  v3 = __chkstk_darwin(v201);
  v206 = (uint64_t)&v199 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v205 = v4;
  __chkstk_darwin(v3);
  v213 = (uint64_t)&v199 - v5;
  v6 = type metadata accessor for SettingsURLDestination(0);
  v228 = *(_QWORD *)(v6 - 8);
  v7 = *(_QWORD *)(v228 + 64);
  v8 = __chkstk_darwin(v6);
  v9 = (char *)&v199 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v224 = (uint64_t)&v199 - v11;
  v12 = __chkstk_darwin(v10);
  v207 = (uint64_t)&v199 - v13;
  v14 = __chkstk_darwin(v12);
  v216 = (uint64_t)&v199 - v15;
  v16 = __chkstk_darwin(v14);
  v203 = (uint64_t)&v199 - v17;
  v18 = __chkstk_darwin(v16);
  v200 = (uint64_t)&v199 - v19;
  __chkstk_darwin(v18);
  v210 = (uint64_t)&v199 - v20;
  v214 = sub_100004FC8(&qword_10015AD68);
  __chkstk_darwin(v214);
  v217 = (uint64_t)&v199 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100004FC8(&qword_10015C890);
  v23 = __chkstk_darwin(v22);
  v212 = (char *)&v199 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v23);
  v209 = (uint64_t)&v199 - v26;
  v27 = __chkstk_darwin(v25);
  v222 = (uint64_t)&v199 - v28;
  __chkstk_darwin(v27);
  v215 = (uint64_t)&v199 - v29;
  v30 = sub_100004FC8((uint64_t *)&unk_10015C400);
  v31 = __chkstk_darwin(v30);
  v208 = (uint64_t)&v199 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __chkstk_darwin(v31);
  v226 = (uint64_t)&v199 - v34;
  __chkstk_darwin(v33);
  v36 = (char *)&v199 - v35;
  v37 = sub_100004FC8((uint64_t *)&unk_100156F00);
  __chkstk_darwin(v37);
  v39 = (char *)&v199 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for SettingsURLDestination.Action(0);
  __chkstk_darwin(v40);
  v42 = (char *)&v199 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v219 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v220 = *(_QWORD *)(v219 - 8);
  v43 = __chkstk_darwin(v219);
  v223 = (os_log_t)((char *)&v199 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0));
  v45 = __chkstk_darwin(v43);
  v218 = (uint64_t)&v199 - v46;
  v47 = __chkstk_darwin(v45);
  v211 = (uint64_t)&v199 - v48;
  v202 = v49;
  __chkstk_darwin(v47);
  v51 = (char *)&v199 - v50;
  v229 = v6;
  v52 = *(int *)(v6 + 20);
  v231 = a1;
  sub_1000076F0(a1 + v52, (uint64_t)v42, type metadata accessor for SettingsURLDestination.Action);
  if (swift_getEnumCaseMultiPayload(v42, v40) == 1)
  {
    sub_100007670((uint64_t)v42, (uint64_t)v51, type metadata accessor for PrimarySettingsListItemIdentifier);
    v53 = sub_1000DB598();
    v54 = sub_1000F49BC(v53);
    v56 = v55;
    v58 = v57;
    swift_release(v53);
    v59 = *(_QWORD *)(v58 + 16);
    v225 = v51;
    if (v59 && (v60 = sub_1000DA830((uint64_t)v51), (v61 & 1) != 0))
    {
      v62 = v60;
      v63 = *(_QWORD *)(v58 + 56);
      v64 = type metadata accessor for PrimarySettingsListItemModel(0);
      v65 = *(_QWORD *)(v64 - 8);
      sub_1000076F0(v63 + *(_QWORD *)(v65 + 72) * v62, (uint64_t)v39, type metadata accessor for PrimarySettingsListItemModel);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v39, 0, 1, v64);
    }
    else
    {
      v64 = type metadata accessor for PrimarySettingsListItemModel(0);
      v65 = *(_QWORD *)(v64 - 8);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v65 + 56))(v39, 1, 1, v64);
    }
    v74 = v227;
    swift_bridgeObjectRelease(v54);
    swift_bridgeObjectRelease(v56);
    swift_bridgeObjectRelease(v58);
    type metadata accessor for PrimarySettingsListItemModel(0);
    v75 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v65 + 48))(v39, 1, v64);
    sub_10000BA50((uint64_t)v39, (uint64_t *)&unk_100156F00);
    if (v75 == 1)
    {
      v76 = v232;
      if (qword_100156CA0 != -1)
        swift_once(&qword_100156CA0, sub_10008BDE8);
      sub_100007808(v230, (uint64_t)qword_10015D298);
      v77 = v231;
      v78 = v224;
      sub_1000076F0(v231, v224, type metadata accessor for SettingsURLDestination);
      v79 = (uint64_t)v225;
      v80 = v223;
      v81 = sub_1000076F0((uint64_t)v225, (uint64_t)v223, type metadata accessor for PrimarySettingsListItemIdentifier);
      v82 = Logger.logObject.getter(v81);
      v83 = static os_log_type_t.fault.getter(v82);
      if (os_log_type_enabled(v82, v83))
      {
        v84 = swift_slowAlloc(32, -1);
        v85 = swift_slowAlloc(64, -1);
        aBlock[0] = v85;
        *(_DWORD *)v84 = 141558531;
        v239 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v239, v240, v84 + 4, v84 + 12);
        *(_WORD *)(v84 + 12) = 2081;
        v86 = sub_10000E540();
        v88 = v87;
        v239 = sub_1000DA1F0(v86, v87, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v239, v240, v84 + 14, v84 + 22);
        swift_bridgeObjectRelease(v88);
        sub_1000076B4(v78, type metadata accessor for SettingsURLDestination);
        *(_WORD *)(v84 + 22) = 2080;
        sub_1000A03B0();
        v90 = v89;
        v239 = sub_1000DA1F0(v91, v89, aBlock);
        v77 = v231;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v239, v240, v84 + 24, v84 + 32);
        swift_bridgeObjectRelease(v90);
        sub_1000076B4((uint64_t)v80, type metadata accessor for PrimarySettingsListItemIdentifier);
        _os_log_impl((void *)&_mh_execute_header, v82, v83, "Destination '%{private,mask.hash}s' is for a selection not possible currently '%s', stashing as pending and returning.", (uint8_t *)v84, 0x20u);
        swift_arrayDestroy(v85, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v85, -1, -1);
        v92 = v84;
        v76 = v232;
        swift_slowDealloc(v92, -1, -1);

      }
      else
      {

        sub_1000076B4((uint64_t)v80, type metadata accessor for PrimarySettingsListItemIdentifier);
        sub_1000076B4(v78, type metadata accessor for SettingsURLDestination);
      }
      sub_1000076B4(v79, type metadata accessor for PrimarySettingsListItemIdentifier);
      v111 = v226;
      sub_1000076F0(v77, v226, type metadata accessor for SettingsURLDestination);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v228 + 56))(v111, 0, 1, v229);
      v112 = v76 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel_pendingURLDestination;
      goto LABEL_36;
    }
    v93 = v232;
    v94 = v232 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel_currentlyInProgressURLDestination;
    swift_beginAccess(v232 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel_currentlyInProgressURLDestination, &v239, 0, 0);
    sub_100018C00(v94, (uint64_t)v36, (uint64_t *)&unk_10015C400);
    v95 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v228 + 48);
    v96 = v95(v36, 1, v229);
    sub_10000BA50((uint64_t)v36, (uint64_t *)&unk_10015C400);
    if (v96 == 1)
    {
      v97 = v215;
      sub_1000076F0((uint64_t)v225, v215, type metadata accessor for PrimarySettingsListItemIdentifier);
      v98 = v220;
      v99 = v219;
      v227 = *(char **)(v220 + 56);
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v227)(v97, 0, 1, v219);
      v100 = sub_1000DB598();
      KeyPath = swift_getKeyPath(&unk_10011B110);
      aBlock[0] = (uint64_t)v100;
      v102 = sub_100007828(&qword_100158EF0, type metadata accessor for PrimarySettingsListModel, (uint64_t)&unk_10011B328);
      ObservationRegistrar.access<A, B>(_:keyPath:)(aBlock, KeyPath, v102);
      swift_release(KeyPath);
      v103 = (uint64_t)&v100[OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_effectiveSelection];
      swift_beginAccess(&v100[OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_effectiveSelection], &v237, 0, 0);
      v104 = v222;
      sub_100018C00(v103, v222, &qword_10015C890);
      swift_release(v100);
      v105 = v217;
      v106 = v217 + *(int *)(v214 + 48);
      sub_100018C00(v97, v217, &qword_10015C890);
      sub_100018C00(v104, v106, &qword_10015C890);
      v107 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v98 + 48);
      if (v107(v105, 1, v99) == 1)
      {
        sub_10000BA50(v104, &qword_10015C890);
        sub_10000BA50(v97, &qword_10015C890);
        v108 = v107(v106, 1, v99);
        if (v108 == 1)
          v109 = &qword_10015C890;
        else
          v109 = &qword_10015AD68;
        if (v108 == 1)
          v110 = -1;
        else
          v110 = 0;
      }
      else
      {
        v134 = v209;
        sub_100018C00(v105, v209, &qword_10015C890);
        if (v107(v106, 1, v99) == 1)
        {
          sub_10000BA50(v222, &qword_10015C890);
          sub_10000BA50(v97, &qword_10015C890);
          sub_1000076B4(v134, type metadata accessor for PrimarySettingsListItemIdentifier);
          v110 = 0;
          v109 = &qword_10015AD68;
        }
        else
        {
          v135 = v106;
          v136 = v211;
          sub_100007670(v135, v211, type metadata accessor for PrimarySettingsListItemIdentifier);
          sub_1000A103C(v134, v136);
          v110 = v137;
          sub_1000076B4(v136, type metadata accessor for PrimarySettingsListItemIdentifier);
          v109 = &qword_10015C890;
          sub_10000BA50(v222, &qword_10015C890);
          sub_10000BA50(v97, &qword_10015C890);
          sub_1000076B4(v134, type metadata accessor for PrimarySettingsListItemIdentifier);
        }
      }
      v138 = v99;
      v139 = v231;
      sub_10000BA50(v105, v109);
      v140 = v229;
      v141 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v228 + 56);
      v142 = v226;
      v141(v226, 1, 1, v229);
      v143 = v232 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel_pendingURLDestination;
      swift_beginAccess(v232 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel_pendingURLDestination, aBlock, 33, 0);
      sub_1000EC470(v142, v143);
      swift_endAccess(aBlock);
      sub_1000076F0(v139, v142, type metadata accessor for SettingsURLDestination);
      v141(v142, 0, 1, v140);
      swift_beginAccess(v94, aBlock, 33, 0);
      sub_1000F1B58(v142, v94, (uint64_t *)&unk_10015C400);
      v144 = swift_endAccess(aBlock);
      sub_1000DE57C(v144);
      sub_10000BA50(v142, (uint64_t *)&unk_10015C400);
      v145 = v218;
      sub_1000076F0((uint64_t)v225, v218, type metadata accessor for PrimarySettingsListItemIdentifier);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v145, v138);
      v147 = v138;
      if (!EnumCaseMultiPayload)
      {
LABEL_42:
        v149 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v149 - 8) + 8))(v145, v149);
        if (qword_100156CA0 != -1)
          swift_once(&qword_100156CA0, sub_10008BDE8);
        sub_100007808(v230, (uint64_t)qword_10015D298);
        v150 = v210;
        v151 = sub_1000076F0(v139, v210, type metadata accessor for SettingsURLDestination);
        v152 = Logger.logObject.getter(v151);
        v153 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v152, v153))
        {
          v154 = swift_slowAlloc(22, -1);
          v155 = swift_slowAlloc(32, -1);
          aBlock[0] = v155;
          *(_DWORD *)v154 = 141558275;
          v233 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v233, v234, v154 + 4, v154 + 12);
          *(_WORD *)(v154 + 12) = 2081;
          v156 = sub_10000E540();
          v158 = v157;
          v233 = sub_1000DA1F0(v156, v157, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v233, v234, v154 + 14, v154 + 22);
          swift_bridgeObjectRelease(v158);
          sub_1000076B4(v150, type metadata accessor for SettingsURLDestination);
          v159 = "Destination's selection '%{private,mask.hash}s' is a CFU, setting selection and allowing it to handle needed actions.";
LABEL_46:
          _os_log_impl((void *)&_mh_execute_header, v152, v153, v159, (uint8_t *)v154, 0x16u);
          swift_arrayDestroy(v155, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v155, -1, -1);
          swift_slowDealloc(v154, -1, -1);
LABEL_54:

          v167 = (uint64_t)v212;
          v168 = v227;
          v169 = sub_1000DB598();
          v170 = (uint64_t)v225;
          sub_1000076F0((uint64_t)v225, v167, type metadata accessor for PrimarySettingsListItemIdentifier);
          ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v168)(v167, 0, 1, v147);
          sub_1000F3614(v167);
          swift_release(v169);
          sub_1000076B4(v170, type metadata accessor for PrimarySettingsListItemIdentifier);
          return;
        }
        goto LABEL_53;
      }
      if (EnumCaseMultiPayload != 33)
      {
        if (EnumCaseMultiPayload == 2)
        {
          v148 = sub_100004FC8(&qword_10015C420);
          swift_bridgeObjectRelease(*(_QWORD *)(v145 + *(int *)(v148 + 48) + 8));
          goto LABEL_42;
        }
        sub_1000076B4(v145, type metadata accessor for PrimarySettingsListItemIdentifier);
        goto LABEL_56;
      }
      v160 = objc_msgSend((id)objc_opt_self(MCProfileConnection), "sharedConnection");
      if (v160)
      {
        v161 = v160;
        v162 = objc_msgSend(v160, "isPasscodeSet");

        if (v162)
        {
          if (qword_100156CA0 != -1)
            swift_once(&qword_100156CA0, sub_10008BDE8);
          sub_100007808(v230, (uint64_t)qword_10015D298);
          v150 = v200;
          v163 = sub_1000076F0(v139, v200, type metadata accessor for SettingsURLDestination);
          v152 = Logger.logObject.getter(v163);
          v153 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v152, v153))
          {
            v154 = swift_slowAlloc(22, -1);
            v155 = swift_slowAlloc(32, -1);
            aBlock[0] = v155;
            *(_DWORD *)v154 = 141558275;
            v233 = 1752392040;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v233, v234, v154 + 4, v154 + 12);
            *(_WORD *)(v154 + 12) = 2081;
            v164 = sub_10000E540();
            v166 = v165;
            v233 = sub_1000DA1F0(v164, v165, aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v233, v234, v154 + 14, v154 + 22);
            swift_bridgeObjectRelease(v166);
            sub_1000076B4(v150, type metadata accessor for SettingsURLDestination);
            v159 = "Destination's selection '%{private,mask.hash}s' is for passcode and biometrics, settings selection an"
                   "d letting primarySettingsListModel currentSelection didSet handle actions.";
            goto LABEL_46;
          }
LABEL_53:
          sub_1000076B4(v150, type metadata accessor for SettingsURLDestination);
          goto LABEL_54;
        }
LABEL_56:
        LODWORD(v230) = v110 ^ 1;
        if ((v110 & 1) != 0)
        {
          v171 = swift_getKeyPath(&unk_10011B0C0);
          v172 = v232;
          aBlock[0] = v232;
          v173 = sub_100007828((unint64_t *)&qword_100158F78, type metadata accessor for SettingsAppNavigationModel, (uint64_t)&unk_10011B030);
          ObservationRegistrar.access<A, B>(_:keyPath:)(aBlock, v171, v173);
          swift_release(v171);
          v174 = v172 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__detailContent;
          swift_beginAccess(v172 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__detailContent, &v233, 0, 0);
          v175 = v174;
          v176 = v213;
          sub_1000076F0(v175, v213, type metadata accessor for SettingsAppDetailContent);
          v177 = (uint64_t)v225;
        }
        else
        {
          v172 = v232;
          v178 = sub_1000DB598();
          v177 = (uint64_t)v225;
          v179 = sub_1000BADA4((uint64_t)v178);
          swift_release(v178);
          v176 = v213;
          sub_1000076F0(v177, v213, type metadata accessor for PrimarySettingsListItemIdentifier);
          ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v227)(v176, 0, 1, v138);
          *(_QWORD *)(v176 + *(int *)(v201 + 20)) = v179;
        }
        v180 = swift_allocObject(&unk_10014DC60, 24, 7);
        swift_weakInit(v180 + 16, v172);
        v181 = v206;
        sub_1000076F0(v176, v206, type metadata accessor for SettingsAppDetailContent);
        v182 = v203;
        sub_1000076F0(v139, v203, type metadata accessor for SettingsURLDestination);
        v183 = v177;
        v184 = v211;
        sub_1000076F0(v183, v211, type metadata accessor for PrimarySettingsListItemIdentifier);
        v185 = *(unsigned __int8 *)(v204 + 80);
        v186 = (v185 + 25) & ~v185;
        v187 = *(unsigned __int8 *)(v228 + 80);
        v188 = (v205 + v187 + v186) & ~v187;
        v189 = *(unsigned __int8 *)(v220 + 80);
        v190 = (v7 + v189 + v188) & ~v189;
        v191 = swift_allocObject(&unk_10014DD00, v190 + v202, v185 | v187 | v189 | 7);
        *(_QWORD *)(v191 + 16) = v180;
        *(_BYTE *)(v191 + 24) = v230 & 1;
        sub_100007670(v181, v191 + v186, type metadata accessor for SettingsAppDetailContent);
        sub_100007670(v182, v191 + v188, type metadata accessor for SettingsURLDestination);
        sub_100007670(v184, v191 + v190, type metadata accessor for PrimarySettingsListItemIdentifier);
        v192 = sub_1000DB598();
        v193 = (void **)&v192[OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_viewControllerForPresentation];
        swift_beginAccess(&v192[OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_viewControllerForPresentation], aBlock, 32, 0);
        v194 = *v193;
        if (v194)
        {
          swift_endAccess(aBlock);
          v195 = v194;
          swift_release(v192);
          v196 = swift_allocObject(&unk_10014DD28, 32, 7);
          *(_QWORD *)(v196 + 16) = sub_1000F0810;
          *(_QWORD *)(v196 + 24) = v191;
          aBlock[4] = (uint64_t)sub_1000F1C2C;
          v236 = v196;
          aBlock[0] = (uint64_t)_NSConcreteStackBlock;
          aBlock[1] = 1107296256;
          aBlock[2] = (uint64_t)sub_100005350;
          aBlock[3] = (uint64_t)&unk_10014DD40;
          v197 = _Block_copy(aBlock);
          v198 = v236;
          swift_retain(v191);
          swift_release(v198);
          objc_msgSend(v195, "dismissViewControllerAnimated:completion:", 1, v197);
          _Block_release(v197);

          swift_release(v191);
          sub_1000076B4(v213, type metadata accessor for SettingsAppDetailContent);
          sub_1000076B4((uint64_t)v225, type metadata accessor for PrimarySettingsListItemIdentifier);
        }
        else
        {
          sub_1000076B4(v213, type metadata accessor for SettingsAppDetailContent);
          sub_1000076B4((uint64_t)v225, type metadata accessor for PrimarySettingsListItemIdentifier);
          swift_endAccess(aBlock);
          swift_release(v191);
          swift_release(v192);
        }
        return;
      }
LABEL_63:
      __break(1u);
      return;
    }
    v224 = v94;
    v113 = (uint64_t)v225;
    v114 = v231;
    if (qword_100156CA0 != -1)
      swift_once(&qword_100156CA0, sub_10008BDE8);
    v115 = v230;
    v116 = sub_100007808(v230, (uint64_t)qword_10015D298);
    v117 = v221;
    (*(void (**)(char *, uint64_t, uint64_t))(v221 + 16))(v74, v116, v115);
    v118 = v216;
    sub_1000076F0(v114, v216, type metadata accessor for SettingsURLDestination);
    v119 = swift_retain_n(v93, 2);
    v120 = v74;
    v121 = Logger.logObject.getter(v119);
    v122 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v121, v122))
    {
      v223 = v121;
      v123 = swift_slowAlloc(42, -1);
      v124 = swift_slowAlloc(64, -1);
      aBlock[0] = v124;
      *(_DWORD *)v123 = 141558787;
      v237 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v237, v238, v123 + 4, v123 + 12);
      *(_WORD *)(v123 + 12) = 2081;
      v125 = sub_10000E540();
      v127 = v126;
      v237 = sub_1000DA1F0(v125, v126, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v237, v238, v123 + 14, v123 + 22);
      swift_bridgeObjectRelease(v127);
      sub_1000076B4(v118, type metadata accessor for SettingsURLDestination);
      *(_WORD *)(v123 + 22) = 2160;
      v237 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v237, v238, v123 + 24, v123 + 32);
      *(_WORD *)(v123 + 32) = 2081;
      v128 = v208;
      sub_100018C00(v224, v208, (uint64_t *)&unk_10015C400);
      if (v95((char *)v128, 1, v229) == 1)
      {
        swift_release(v232);
        __break(1u);
        goto LABEL_63;
      }
      v129 = v207;
      sub_100007670(v128, v207, type metadata accessor for SettingsURLDestination);
      v130 = sub_10000E540();
      v132 = v131;
      sub_1000076B4(v129, type metadata accessor for SettingsURLDestination);
      v237 = sub_1000DA1F0(v130, v132, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v237, v238, v123 + 34, v123 + 42);
      swift_bridgeObjectRelease(v132);
      v93 = v232;
      swift_release_n(v232, 2);
      v133 = v223;
      _os_log_impl((void *)&_mh_execute_header, v223, v122, "Received new destination request '%{private,mask.hash}s' while one is already in progress ('%{private,mask.hash}s'). Setting as next pending destination.", (uint8_t *)v123, 0x2Au);
      swift_arrayDestroy(v124, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v124, -1, -1);
      swift_slowDealloc(v123, -1, -1);

      (*(void (**)(char *, uint64_t))(v221 + 8))(v227, v230);
      sub_1000076B4((uint64_t)v225, type metadata accessor for PrimarySettingsListItemIdentifier);
      v114 = v231;
    }
    else
    {

      swift_release_n(v93, 2);
      sub_1000076B4(v118, type metadata accessor for SettingsURLDestination);
      (*(void (**)(char *, uint64_t))(v117 + 8))(v120, v115);
      sub_1000076B4(v113, type metadata accessor for PrimarySettingsListItemIdentifier);
    }
    v111 = v226;
    sub_1000076F0(v114, v226, type metadata accessor for SettingsURLDestination);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v228 + 56))(v111, 0, 1, v229);
    v112 = v93 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel_pendingURLDestination;
LABEL_36:
    swift_beginAccess(v112, aBlock, 33, 0);
    sub_1000EC470(v111, v112);
    swift_endAccess(aBlock);
    return;
  }
  sub_1000076B4((uint64_t)v42, type metadata accessor for SettingsURLDestination.Action);
  if (qword_100156CA0 != -1)
    swift_once(&qword_100156CA0, sub_10008BDE8);
  sub_100007808(v230, (uint64_t)qword_10015D298);
  v66 = sub_1000076F0(v231, (uint64_t)v9, type metadata accessor for SettingsURLDestination);
  v67 = Logger.logObject.getter(v66);
  v68 = static os_log_type_t.fault.getter(v67);
  if (os_log_type_enabled(v67, v68))
  {
    v69 = swift_slowAlloc(22, -1);
    v70 = swift_slowAlloc(32, -1);
    aBlock[0] = v70;
    *(_DWORD *)v69 = 141558275;
    v239 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v239, v240, v69 + 4, v69 + 12);
    *(_WORD *)(v69 + 12) = 2081;
    v71 = sub_10000E540();
    v73 = v72;
    v239 = sub_1000DA1F0(v71, v72, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v239, v240, v69 + 14, v69 + 22);
    swift_bridgeObjectRelease(v73);
    sub_1000076B4((uint64_t)v9, type metadata accessor for SettingsURLDestination);
    swift_arrayDestroy(v70, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v70, -1, -1);
    swift_slowDealloc(v69, -1, -1);
  }
  else
  {
    sub_1000076B4((uint64_t)v9, type metadata accessor for SettingsURLDestination);
  }

}

uint64_t sub_1000DDA54(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = a1 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__navigationPath;
  swift_beginAccess(a1 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__navigationPath, v6, 33, 0);
  v4 = type metadata accessor for NavigationPath(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(v3, a2, v4);
  return swift_endAccess(v6);
}

uint64_t sub_1000DDAD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v13;
  _QWORD v16[3];

  v1 = sub_100004FC8(&qword_10015C890);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v16[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v16[-1] - v5;
  KeyPath = swift_getKeyPath(&unk_10011B0C0);
  v16[0] = v0;
  v8 = sub_100007828((unint64_t *)&qword_100158F78, type metadata accessor for SettingsAppNavigationModel, (uint64_t)&unk_10011B030);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v16, KeyPath, v8);
  swift_release(KeyPath);
  v9 = v0 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__detailContent;
  swift_beginAccess(v9, v16, 0, 0);
  sub_100018C00(v9, (uint64_t)v6, &qword_10015C890);
  v10 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v6, 1, v10) != 1)
  {
    sub_100018C00((uint64_t)v6, (uint64_t)v4, &qword_10015C890);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v4, v10);
    if (!EnumCaseMultiPayload)
    {
LABEL_5:
      v13 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v4, v13);
      sub_10000BA50((uint64_t)v6, &qword_10015C890);
      return sub_1000DDCAC();
    }
    if (EnumCaseMultiPayload == 2)
    {
      v12 = sub_100004FC8(&qword_10015C420);
      swift_bridgeObjectRelease(*(_QWORD *)&v4[*(int *)(v12 + 48) + 8]);
      goto LABEL_5;
    }
    sub_1000076B4((uint64_t)v4, type metadata accessor for PrimarySettingsListItemIdentifier);
  }
  return sub_10000BA50((uint64_t)v6, &qword_10015C890);
}

uint64_t sub_1000DDCAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v22;
  int EnumCaseMultiPayload;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t KeyPath;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t (*v35)(uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58[3];
  _QWORD v59[3];
  char v60[24];

  v1 = type metadata accessor for SettingsURLDestination.Action(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v51 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v56 = (uint64_t)&v51 - v8;
  v9 = sub_100004FC8((uint64_t *)&unk_10015C400);
  v10 = __chkstk_darwin(v9);
  v54 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v13 = (char *)&v51 - v12;
  v14 = type metadata accessor for SettingsURLDestination(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v53 = (uint64_t)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v19 = (char *)&v51 - v18;
  v55 = v0;
  v20 = v0 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel_currentlyInProgressURLDestination;
  swift_beginAccess(v20, v60, 0, 0);
  sub_100018C00(v20, (uint64_t)v13, (uint64_t *)&unk_10015C400);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
    return sub_10000BA50((uint64_t)v13, (uint64_t *)&unk_10015C400);
  sub_100007670((uint64_t)v13, (uint64_t)v19, type metadata accessor for SettingsURLDestination);
  sub_1000076F0((uint64_t)&v19[*(int *)(v14 + 20)], (uint64_t)v3, type metadata accessor for SettingsURLDestination.Action);
  if (swift_getEnumCaseMultiPayload(v3, v1) == 1)
  {
    v22 = v56;
    sub_100007670((uint64_t)v3, v56, type metadata accessor for PrimarySettingsListItemIdentifier);
    sub_1000076F0(v22, (uint64_t)v7, type metadata accessor for PrimarySettingsListItemIdentifier);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v7, v4);
    v24 = v55;
    if (!EnumCaseMultiPayload)
      goto LABEL_7;
    if (EnumCaseMultiPayload == 2)
    {
      v25 = sub_100004FC8(&qword_10015C420);
      swift_bridgeObjectRelease(*(_QWORD *)&v7[*(int *)(v25 + 48) + 8]);
LABEL_7:
      v52 = v20;
      v26 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v7, v26);
      KeyPath = swift_getKeyPath(&unk_10011B0C0);
      v59[0] = v24;
      v28 = sub_100007828((unint64_t *)&qword_100158F78, type metadata accessor for SettingsAppNavigationModel, (uint64_t)&unk_10011B030);
      ObservationRegistrar.access<A, B>(_:keyPath:)(v59, KeyPath, v28);
      swift_release(KeyPath);
      v29 = v24 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__detailContent;
      swift_beginAccess(v24 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__detailContent, v59, 0, 0);
      v30 = *(_QWORD *)(v29 + *(int *)(type metadata accessor for SettingsAppDetailContent(0) + 20));
      if (v30 >> 62 == 1)
      {
        v31 = v30 & 0x3FFFFFFFFFFFFFFFLL;
        v32 = swift_retain(v30 & 0x3FFFFFFFFFFFFFFFLL);
        v33 = (uint64_t)v19;
        v34 = (char *)PreferencesControllerRepresentableModel.makeViewControllerIfNeeded()(v32);
        sub_1000E64F8(v33, v34, 0);

        swift_release(v31);
        sub_1000076B4(v22, type metadata accessor for PrimarySettingsListItemIdentifier);
        v35 = type metadata accessor for SettingsURLDestination;
        v36 = v33;
      }
      else
      {
        if (qword_100156CA0 != -1)
          swift_once(&qword_100156CA0, sub_10008BDE8);
        v37 = type metadata accessor for Logger(0);
        sub_100007808(v37, (uint64_t)qword_10015D298);
        v38 = v53;
        v39 = sub_1000076F0((uint64_t)v19, v53, type metadata accessor for SettingsURLDestination);
        v40 = Logger.logObject.getter(v39);
        v41 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v40, v41))
        {
          v42 = swift_slowAlloc(22, -1);
          v43 = swift_slowAlloc(32, -1);
          v51 = v43;
          *(_DWORD *)v42 = 141558275;
          v57 = 1752392040;
          v58[0] = v43;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, v58, v42 + 4, v42 + 12);
          *(_WORD *)(v42 + 12) = 2081;
          v44 = sub_10000E540();
          v46 = v45;
          v57 = sub_1000DA1F0(v44, v45, v58);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, v58, v42 + 14, v42 + 22);
          swift_bridgeObjectRelease(v46);
          sub_1000076B4(v38, type metadata accessor for SettingsURLDestination);
          _os_log_impl((void *)&_mh_execute_header, v40, v41, "No valid detail content for destination '%{private,mask.hash}s', bailing.", (uint8_t *)v42, 0x16u);
          v47 = v51;
          swift_arrayDestroy(v51, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v47, -1, -1);
          swift_slowDealloc(v42, -1, -1);
        }
        else
        {
          sub_1000076B4(v38, type metadata accessor for SettingsURLDestination);
        }

        v48 = v52;
        v49 = (uint64_t)v54;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v54, 1, 1, v14);
        swift_beginAccess(v48, v58, 33, 0);
        sub_1000F1B58(v49, v48, (uint64_t *)&unk_10015C400);
        v50 = swift_endAccess(v58);
        sub_1000DE57C(v50);
        sub_10000BA50(v49, (uint64_t *)&unk_10015C400);
        sub_1000076B4(v56, type metadata accessor for PrimarySettingsListItemIdentifier);
        v35 = type metadata accessor for SettingsURLDestination;
        v36 = (uint64_t)v19;
      }
      return sub_1000076B4(v36, v35);
    }
    sub_1000076B4(v22, type metadata accessor for PrimarySettingsListItemIdentifier);
    sub_1000076B4((uint64_t)v19, type metadata accessor for SettingsURLDestination);
    v36 = (uint64_t)v7;
    v35 = type metadata accessor for PrimarySettingsListItemIdentifier;
  }
  else
  {
    sub_1000076B4((uint64_t)v19, type metadata accessor for SettingsURLDestination);
    v35 = type metadata accessor for SettingsURLDestination.Action;
    v36 = (uint64_t)v3;
  }
  return sub_1000076B4(v36, v35);
}

uint64_t sub_1000DE2B4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000DE2D8(a1, (uint64_t)&unk_10011B0C0, &OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__detailContent, (uint64_t)type metadata accessor for SettingsAppDetailContent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000076F0, a2);
}

uint64_t sub_1000DE2D8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, _QWORD *a3@<X4>, uint64_t a4@<X5>, uint64_t (*a5)(uint64_t, uint64_t, uint64_t)@<X6>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[3];

  v10 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v15[0] = v10;
  v12 = sub_100007828((unint64_t *)&qword_100158F78, type metadata accessor for SettingsAppNavigationModel, (uint64_t)&unk_10011B030);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v15, KeyPath, v12);
  swift_release(KeyPath);
  v13 = v10 + *a3;
  swift_beginAccess(v13, v15, 0, 0);
  return a5(v13, a6, a4);
}

uint64_t sub_1000DE3A0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  _BYTE v11[16];
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;

  v4 = type metadata accessor for SettingsAppDetailContent(0);
  __chkstk_darwin(v4);
  v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000076F0(a1, (uint64_t)v6, type metadata accessor for SettingsAppDetailContent);
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_10011B0C0);
  v12 = v7;
  v13 = v6;
  v14 = v7;
  v9 = sub_100007828((unint64_t *)&qword_100158F78, type metadata accessor for SettingsAppNavigationModel, (uint64_t)&unk_10011B030);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v14, KeyPath, sub_1000F1BF0, v11, (char *)&type metadata for () + 8, v9);
  swift_release(KeyPath);
  return sub_1000076B4((uint64_t)v6, type metadata accessor for SettingsAppDetailContent);
}

uint64_t sub_1000DE4A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE v10[24];

  v4 = type metadata accessor for SettingsAppDetailContent(0);
  __chkstk_darwin(v4);
  v6 = &v10[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_1000076F0(a2, (uint64_t)v6, type metadata accessor for SettingsAppDetailContent);
  v7 = a1 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__detailContent;
  swift_beginAccess(a1 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__detailContent, v10, 33, 0);
  sub_1000EC568((uint64_t)v6, v7);
  swift_endAccess(v10);
  sub_1000DDAD0();
  return sub_1000076B4((uint64_t)v6, type metadata accessor for SettingsAppDetailContent);
}

uint64_t sub_1000DE57C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[24];

  v1 = type metadata accessor for SettingsURLDestination(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v33 = (uint64_t)&v32 - v6;
  v7 = sub_100004FC8((uint64_t *)&unk_10015C400);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v32 - v12;
  __chkstk_darwin(v11);
  v15 = (char *)&v32 - v14;
  v34 = v0;
  v16 = v0 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel_currentlyInProgressURLDestination;
  swift_beginAccess(v0 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel_currentlyInProgressURLDestination, v37, 0, 0);
  sub_100018C00(v16, (uint64_t)v15, (uint64_t *)&unk_10015C400);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v2 + 48);
  LODWORD(v2) = v17(v15, 1, v1);
  sub_10000BA50((uint64_t)v15, (uint64_t *)&unk_10015C400);
  if ((_DWORD)v2 != 1)
    goto LABEL_4;
  sub_1000DE948((uint64_t)v13);
  if (v17(v13, 1, v1) == 1)
  {
    sub_10000BA50((uint64_t)v13, (uint64_t *)&unk_10015C400);
LABEL_4:
    sub_100018C00(v16, (uint64_t)v10, (uint64_t *)&unk_10015C400);
    v18 = v17(v10, 1, v1);
    result = sub_10000BA50((uint64_t)v10, (uint64_t *)&unk_10015C400);
    if (v18 != 1)
    {
      v20 = sub_100004FC8(&qword_10015C540);
      v21 = sub_100007868(&qword_10015ABC0, &qword_10015C540, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
      return Subject<>.send()(v20, v21);
    }
    return result;
  }
  v22 = v33;
  sub_100007670((uint64_t)v13, v33, type metadata accessor for SettingsURLDestination);
  if (qword_100156CA0 != -1)
    swift_once(&qword_100156CA0, sub_10008BDE8);
  v23 = type metadata accessor for Logger(0);
  sub_100007808(v23, (uint64_t)qword_10015D298);
  v24 = sub_1000076F0(v22, (uint64_t)v5, type metadata accessor for SettingsURLDestination);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(12, -1);
    v28 = swift_slowAlloc(32, -1);
    v36 = v28;
    *(_DWORD *)v27 = 136315138;
    v29 = sub_10000E540();
    v31 = v30;
    v35 = sub_1000DA1F0(v29, v30, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v27 + 4, v27 + 12);
    swift_bridgeObjectRelease(v31);
    sub_1000076B4((uint64_t)v5, type metadata accessor for SettingsURLDestination);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Found pending URL request '%s', queueing it up.", v27, 0xCu);
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v27, -1, -1);
  }
  else
  {
    sub_1000076B4((uint64_t)v5, type metadata accessor for SettingsURLDestination);
  }

  sub_1000DC12C(v22);
  return sub_1000076B4(v22, type metadata accessor for SettingsURLDestination);
}

uint64_t sub_1000DE948@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v13)(_BYTE *, uint64_t, uint64_t, uint64_t);
  _BYTE v14[24];
  _BYTE v15[24];

  v3 = sub_100004FC8((uint64_t *)&unk_10015C400);
  v4 = __chkstk_darwin(v3);
  v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  v8 = &v14[-v7];
  v9 = v1 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel_pendingURLDestination;
  swift_beginAccess(v1 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel_pendingURLDestination, v15, 0, 0);
  sub_100018C00(v9, (uint64_t)v8, (uint64_t *)&unk_10015C400);
  v10 = type metadata accessor for SettingsURLDestination(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10) == 1)
  {
    sub_10000BA50((uint64_t)v8, (uint64_t *)&unk_10015C400);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(a1, 1, 1, v10);
  }
  else
  {
    sub_100007670((uint64_t)v8, a1, type metadata accessor for SettingsURLDestination);
    v13 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v13(v6, 1, 1, v10);
    swift_beginAccess(v9, v14, 33, 0);
    sub_1000EC470((uint64_t)v6, v9);
    swift_endAccess(v14);
    return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v13)(a1, 0, 1, v10);
  }
}

uint64_t sub_1000DEAC4@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10011B0E8);
  v7 = v3;
  v5 = sub_100007828((unint64_t *)&qword_100158F78, type metadata accessor for SettingsAppNavigationModel, (uint64_t)&unk_10011B030);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v5);
  result = swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__shouldDismissSearch);
  return result;
}

uint64_t sub_1000DEB58(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_10011B0E8);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_100007828((unint64_t *)&qword_100158F78, type metadata accessor for SettingsAppNavigationModel, (uint64_t)&unk_10011B030);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_1000F1C18, v7, (char *)&type metadata for () + 8, v5);
  return swift_release(KeyPath);
}

uint64_t sub_1000DEC00(uint64_t result, char a2)
{
  *(_BYTE *)(result + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__shouldDismissSearch) = a2;
  return result;
}

uint64_t sub_1000DEC10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  char *v18;
  uint64_t v19;
  char v20;
  void (*v21)(char *, uint64_t);
  char *v22;
  _QWORD v23[3];

  v3 = type metadata accessor for UserInterfaceSizeClass(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v22 = (char *)&v23[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100004FC8((uint64_t *)&unk_10015C3F0);
  __chkstk_darwin(v6);
  v8 = (char *)&v23[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100004FC8(&qword_10015C3E8);
  __chkstk_darwin(v9);
  v11 = (char *)&v23[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_10011B098);
  v23[0] = v1;
  v13 = sub_100007828((unint64_t *)&qword_100158F78, type metadata accessor for SettingsAppNavigationModel, (uint64_t)&unk_10011B030);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v23, KeyPath, v13);
  swift_release(KeyPath);
  v14 = v1 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__horizontalSizeClass;
  swift_beginAccess(v1 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__horizontalSizeClass, v23, 0, 0);
  v15 = (uint64_t)&v11[*(int *)(v9 + 48)];
  sub_100018C00(a1, (uint64_t)v11, (uint64_t *)&unk_10015C3F0);
  sub_100018C00(v14, v15, (uint64_t *)&unk_10015C3F0);
  v16 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v16((uint64_t)v11, 1, v3) == 1)
  {
    if (v16(v15, 1, v3) == 1)
      return sub_10000BA50((uint64_t)v11, (uint64_t *)&unk_10015C3F0);
  }
  else
  {
    sub_100018C00((uint64_t)v11, (uint64_t)v8, (uint64_t *)&unk_10015C3F0);
    if (v16(v15, 1, v3) != 1)
    {
      v18 = v22;
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(v22, v15, v3);
      v19 = sub_100007828((unint64_t *)&unk_10015C410, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
      v20 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v18, v3, v19);
      v21 = *(void (**)(char *, uint64_t))(v4 + 8);
      v21(v18, v3);
      v21(v8, v3);
      result = sub_10000BA50((uint64_t)v11, (uint64_t *)&unk_10015C3F0);
      if ((v20 & 1) != 0)
        return result;
      return sub_1000DEEEC();
    }
    (*(void (**)(char *, uint64_t))(v4 + 8))(v8, v3);
  }
  sub_10000BA50((uint64_t)v11, &qword_10015C3E8);
  return sub_1000DEEEC();
}

uint64_t sub_1000DEEC8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000E0858((uint64_t)&unk_10011B098, &OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__horizontalSizeClass, (uint64_t)&unk_10015C3F0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100018C00, a1);
}

uint64_t sub_1000DEEEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t KeyPath;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  char *v23;
  uint64_t v24;
  char v25;
  void (*v26)(char *, uint64_t);
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[3];
  _QWORD v41[3];

  v1 = sub_100004FC8(&qword_10015C890);
  v2 = __chkstk_darwin(v1);
  v36 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v38 = (uint64_t)&v36 - v4;
  v5 = type metadata accessor for UserInterfaceSizeClass(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v37 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004FC8(&qword_10015C3E8);
  __chkstk_darwin(v8);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004FC8((uint64_t *)&unk_10015C3F0);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v36 - v15;
  KeyPath = swift_getKeyPath(&unk_10011B098);
  v41[0] = v0;
  v18 = sub_100007828((unint64_t *)&qword_100158F78, type metadata accessor for SettingsAppNavigationModel, (uint64_t)&unk_10011B030);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v41, KeyPath, v18);
  swift_release(KeyPath);
  v39 = v0;
  v19 = v0 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__horizontalSizeClass;
  swift_beginAccess(v0 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__horizontalSizeClass, v41, 0, 0);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v16, enum case for UserInterfaceSizeClass.regular(_:), v5);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v16, 0, 1, v5);
  v20 = (uint64_t)&v10[*(int *)(v8 + 48)];
  sub_100018C00(v19, (uint64_t)v10, (uint64_t *)&unk_10015C3F0);
  sub_100018C00((uint64_t)v16, v20, (uint64_t *)&unk_10015C3F0);
  v21 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (v21((uint64_t)v10, 1, v5) != 1)
  {
    sub_100018C00((uint64_t)v10, (uint64_t)v14, (uint64_t *)&unk_10015C3F0);
    if (v21(v20, 1, v5) != 1)
    {
      v23 = v37;
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v37, v20, v5);
      v24 = sub_100007828((unint64_t *)&unk_10015C410, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
      v25 = dispatch thunk of static Equatable.== infix(_:_:)(v14, v23, v5, v24);
      v26 = *(void (**)(char *, uint64_t))(v6 + 8);
      v26(v23, v5);
      sub_10000BA50((uint64_t)v16, (uint64_t *)&unk_10015C3F0);
      v26(v14, v5);
      result = sub_10000BA50((uint64_t)v10, (uint64_t *)&unk_10015C3F0);
      if ((v25 & 1) == 0)
        return result;
      goto LABEL_8;
    }
    sub_10000BA50((uint64_t)v16, (uint64_t *)&unk_10015C3F0);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v14, v5);
    return sub_10000BA50((uint64_t)v10, &qword_10015C3E8);
  }
  sub_10000BA50((uint64_t)v16, (uint64_t *)&unk_10015C3F0);
  if (v21(v20, 1, v5) != 1)
    return sub_10000BA50((uint64_t)v10, &qword_10015C3E8);
  sub_10000BA50((uint64_t)v10, (uint64_t *)&unk_10015C3F0);
LABEL_8:
  v27 = sub_1000DB598();
  v28 = swift_getKeyPath(&unk_10011B110);
  v40[0] = v27;
  v29 = sub_100007828(&qword_100158EF0, type metadata accessor for PrimarySettingsListModel, (uint64_t)&unk_10011B328);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v40, v28, v29);
  swift_release(v28);
  v30 = (uint64_t)&v27[OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_effectiveSelection];
  swift_beginAccess(&v27[OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_effectiveSelection], v40, 0, 0);
  v31 = v38;
  sub_100018C00(v30, v38, &qword_10015C890);
  swift_release(v27);
  v32 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v33 = *(_QWORD *)(v32 - 8);
  LODWORD(v30) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32);
  result = sub_10000BA50(v31, &qword_10015C890);
  if ((_DWORD)v30 == 1)
  {
    v34 = sub_1000DB598();
    v35 = (uint64_t)v36;
    swift_storeEnumTagMultiPayload(v36, v32, 21);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v33 + 56))(v35, 0, 1, v32);
    sub_1000F3614(v35);
    return swift_release(v34);
  }
  return result;
}

uint64_t sub_1000DF3A8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000DE2D8(a1, (uint64_t)&unk_10011B098, &OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__horizontalSizeClass, (uint64_t)&unk_10015C3F0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100018C00, a2);
}

uint64_t sub_1000DF3CC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  _BYTE v11[16];
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;

  v4 = sub_100004FC8((uint64_t *)&unk_10015C3F0);
  __chkstk_darwin(v4);
  v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100018C00(a1, (uint64_t)v6, (uint64_t *)&unk_10015C3F0);
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_10011B098);
  v12 = v7;
  v13 = v6;
  v14 = v7;
  v9 = sub_100007828((unint64_t *)&qword_100158F78, type metadata accessor for SettingsAppNavigationModel, (uint64_t)&unk_10011B030);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v14, KeyPath, sub_100064884, v11, (char *)&type metadata for () + 8, v9);
  swift_release(KeyPath);
  return sub_10000BA50((uint64_t)v6, (uint64_t *)&unk_10015C3F0);
}

uint64_t sub_1000DF4D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE v12[24];
  _BYTE v13[24];

  v4 = sub_100004FC8((uint64_t *)&unk_10015C3F0);
  v5 = __chkstk_darwin(v4);
  v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  v9 = &v12[-v8];
  sub_100018C00(a2, (uint64_t)&v12[-v8], (uint64_t *)&unk_10015C3F0);
  v10 = a1 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__horizontalSizeClass;
  swift_beginAccess(a1 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__horizontalSizeClass, v13, 0, 0);
  sub_100018C00(v10, (uint64_t)v7, (uint64_t *)&unk_10015C3F0);
  swift_beginAccess(v10, v12, 33, 0);
  sub_1000F1B58((uint64_t)v9, v10, (uint64_t *)&unk_10015C3F0);
  swift_endAccess(v12);
  sub_1000DEC10((uint64_t)v7);
  sub_10000BA50((uint64_t)v9, (uint64_t *)&unk_10015C3F0);
  return sub_10000BA50((uint64_t)v7, (uint64_t *)&unk_10015C3F0);
}

void sub_1000DF5F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  _BOOL4 v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t KeyPath;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(_BYTE *);
  uint64_t v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t (*v75)(uint64_t, uint64_t, uint64_t);
  int v76;
  _BYTE *v77;
  uint64_t v78;
  _BYTE *v79;
  uint64_t v80;
  _BYTE *v81;
  _BYTE *v82;
  uint64_t v83;
  _BYTE *v84;
  uint64_t (*v85)(uint64_t, uint64_t, uint64_t);
  void (*v86)(_BYTE *);
  uint64_t v87;
  void (*v88)(_BYTE *, uint64_t);
  _BYTE *v89;
  uint64_t v90;
  _BYTE *v91;
  uint64_t v92;
  _BYTE *v93;
  uint64_t v94;
  uint64_t v95;
  _BYTE *v96;
  uint64_t v97;
  void (*v98)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v99;
  uint64_t v100;
  uint64_t v101;
  _BYTE *v102;
  void (*v103)(_BYTE *);
  uint64_t v104;
  void (*v105)(_BYTE *, uint64_t);
  _BYTE *v106;
  uint64_t v107;
  void (*v108)(_BYTE *, _QWORD, uint64_t);
  _BYTE *v109;
  _BYTE *v110;
  uint64_t v111;
  uint64_t v112;
  _BYTE *v113;
  uint64_t v114;
  char v115;
  void (*v116)(_BYTE *, uint64_t);
  const char *v117;
  const char *v118;
  char **v119;
  uint64_t (*v120)(uint64_t);
  uint64_t v121;
  _BYTE *v122;
  uint64_t v123;
  _BYTE *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _BYTE *v128;
  _BYTE *v129;
  uint64_t v130;
  _BYTE *v131;
  uint64_t v132;
  char v133;
  void (*v134)(_BYTE *, uint64_t);
  _BYTE *v135;
  uint64_t v136;
  _BYTE *v137;
  uint64_t v138;
  _BYTE *v139;
  uint64_t v140;
  uint64_t v141;
  _BYTE *v142;
  uint64_t v143;
  _BYTE *v144;
  _BYTE *v145;
  uint64_t v146;
  _BYTE *v147;
  char v148;
  void (*v149)(_BYTE *, uint64_t);
  uint64_t v150;
  _BYTE *v151;
  uint64_t v152;
  char v153;
  void (*v154)(_BYTE *, uint64_t);
  _BYTE v155[4];
  int v156;
  uint64_t v157;
  _BYTE *v158;
  _BYTE *v159;
  _BYTE *v160;
  _BYTE *v161;
  _BYTE *v162;
  unsigned int v163;
  _BYTE *v164;
  _BYTE *v165;
  _BYTE *v166;
  _BYTE *v167;
  _BYTE *v168;
  _BYTE *v169;
  _BYTE *v170;
  _BYTE *v171;
  _BYTE *v172;
  _BYTE *v173;
  _BYTE *v174;
  uint64_t v175;
  _BYTE *v176;
  _BYTE *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  _QWORD v184[3];
  uint64_t v185;
  uint64_t v186;

  v2 = v1;
  v180 = a1;
  v3 = type metadata accessor for ScenePhase(0);
  v181 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v172 = &v155[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v183 = sub_100004FC8(&qword_10015C658);
  v5 = __chkstk_darwin(v183);
  v162 = &v155[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = __chkstk_darwin(v5);
  v171 = &v155[-v8];
  v9 = __chkstk_darwin(v7);
  v164 = &v155[-v10];
  v11 = __chkstk_darwin(v9);
  v174 = &v155[-v12];
  v13 = __chkstk_darwin(v11);
  v167 = &v155[-v14];
  __chkstk_darwin(v13);
  v175 = (uint64_t)&v155[-v15];
  v16 = sub_100004FC8((uint64_t *)&unk_10015C630);
  v17 = __chkstk_darwin(v16);
  v158 = &v155[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = __chkstk_darwin(v17);
  v161 = &v155[-v20];
  v21 = __chkstk_darwin(v19);
  v165 = &v155[-v22];
  v23 = __chkstk_darwin(v21);
  v177 = &v155[-v24];
  v25 = __chkstk_darwin(v23);
  v159 = &v155[-v26];
  v27 = __chkstk_darwin(v25);
  v170 = &v155[-v28];
  v29 = __chkstk_darwin(v27);
  v166 = &v155[-v30];
  v31 = __chkstk_darwin(v29);
  v176 = &v155[-v32];
  v33 = __chkstk_darwin(v31);
  v160 = &v155[-v34];
  v35 = __chkstk_darwin(v33);
  v37 = &v155[-v36];
  v38 = __chkstk_darwin(v35);
  v168 = &v155[-v39];
  v40 = __chkstk_darwin(v38);
  v173 = &v155[-v41];
  v42 = __chkstk_darwin(v40);
  v44 = &v155[-v43];
  __chkstk_darwin(v42);
  v46 = &v155[-v45];
  if (qword_100156C98 != -1)
    swift_once(&qword_100156C98, sub_10008BDC4);
  v47 = type metadata accessor for Logger(0);
  sub_100007808(v47, (uint64_t)qword_10015D280);
  sub_100018C00(v180, (uint64_t)v46, (uint64_t *)&unk_10015C630);
  v48 = swift_retain_n(v1, 2);
  v49 = Logger.logObject.getter(v48);
  v50 = static os_log_type_t.default.getter();
  v51 = os_log_type_enabled(v49, v50);
  v52 = &unk_10015C000;
  v53 = &unk_10015C000;
  v182 = v2;
  v169 = v37;
  if (v51)
  {
    v54 = swift_slowAlloc(22, -1);
    v179 = swift_slowAlloc(64, -1);
    v186 = v179;
    *(_DWORD *)v54 = 136315394;
    v178 = v54 + 4;
    KeyPath = swift_getKeyPath(&unk_10011B1B0);
    v184[0] = v2;
    v56 = sub_100007828((unint64_t *)&qword_100158F78, type metadata accessor for SettingsAppNavigationModel, (uint64_t)&unk_10011B030);
    ObservationRegistrar.access<A, B>(_:keyPath:)(v184, KeyPath, v56);
    swift_release(KeyPath);
    v57 = v2 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__scenePhase;
    swift_beginAccess(v2 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__scenePhase, v184, 0, 0);
    sub_100018C00(v57, (uint64_t)v44, (uint64_t *)&unk_10015C630);
    v58 = String.init<A>(describing:)(v44, v16);
    v60 = v59;
    v185 = sub_1000DA1F0(v58, v59, &v186);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v185, &v186, v178, v54 + 12);
    swift_release_n(v2, 2);
    swift_bridgeObjectRelease(v60);
    *(_WORD *)(v54 + 12) = 2080;
    sub_100018C00((uint64_t)v46, (uint64_t)v44, (uint64_t *)&unk_10015C630);
    v61 = String.init<A>(describing:)(v44, v16);
    v63 = v62;
    v185 = sub_1000DA1F0(v61, v62, &v186);
    v52 = (_QWORD *)&unk_10015C000;
    v53 = (_QWORD *)&unk_10015C000;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v185, &v186, v54 + 14, v54 + 22);
    swift_bridgeObjectRelease(v63);
    sub_10000BA50((uint64_t)v46, (uint64_t *)&unk_10015C630);
    _os_log_impl((void *)&_mh_execute_header, v49, v50, "Scene phase will change from '%s' to '%s'.", (uint8_t *)v54, 0x16u);
    v64 = v179;
    swift_arrayDestroy(v179, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v64, -1, -1);
    swift_slowDealloc(v54, -1, -1);
  }
  else
  {
    swift_release_n(v2, 2);
    sub_10000BA50((uint64_t)v46, (uint64_t *)&unk_10015C630);
  }

  v65 = swift_getKeyPath(&unk_10011B1B0);
  v66 = v182;
  v67 = v182 + v52[76];
  v186 = v182;
  v178 = sub_100007828((unint64_t *)&qword_100158F78, type metadata accessor for SettingsAppNavigationModel, (uint64_t)&unk_10011B030);
  v179 = v67;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v186, v65, v178);
  swift_release(v65);
  v68 = v66 + v53[75];
  swift_beginAccess(v68, &v186, 0, 0);
  v69 = v181;
  v70 = *(void (**)(_BYTE *))(v181 + 104);
  v71 = (uint64_t)v173;
  v163 = enum case for ScenePhase.active(_:);
  v70(v173);
  v72 = *(_BYTE **)(v69 + 56);
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v72)(v71, 0, 1, v3);
  v73 = v175;
  v74 = v175 + *(int *)(v183 + 48);
  sub_100018C00(v68, v175, (uint64_t *)&unk_10015C630);
  sub_100018C00(v71, v74, (uint64_t *)&unk_10015C630);
  v75 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v69 + 48);
  v76 = v75(v73, 1, v3);
  v77 = v176;
  if (v76 == 1)
  {
    sub_10000BA50(v71, (uint64_t *)&unk_10015C630);
    if (v75(v74, 1, v3) != 1)
    {
LABEL_17:
      v78 = (uint64_t)v174;
LABEL_18:
      sub_10000BA50(v73, &qword_10015C658);
      goto LABEL_19;
    }
    sub_10000BA50(v73, (uint64_t *)&unk_10015C630);
    v78 = (uint64_t)v174;
  }
  else
  {
    v79 = v168;
    sub_100018C00(v73, (uint64_t)v168, (uint64_t *)&unk_10015C630);
    if (v75(v74, 1, v3) == 1)
    {
LABEL_16:
      sub_10000BA50(v71, (uint64_t *)&unk_10015C630);
      (*(void (**)(_BYTE *, uint64_t))(v181 + 8))(v79, v3);
      goto LABEL_17;
    }
    v80 = v181;
    v81 = v72;
    v82 = v172;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v181 + 32))(v172, v74, v3);
    v83 = sub_100007828((unint64_t *)&unk_10015C660, (uint64_t (*)(uint64_t))&type metadata accessor for ScenePhase, (uint64_t)&protocol conformance descriptor for ScenePhase);
    v84 = v79;
    v156 = dispatch thunk of static Equatable.== infix(_:_:)(v79, v82, v3, v83);
    v85 = v75;
    v86 = v70;
    v87 = v68;
    v88 = *(void (**)(_BYTE *, uint64_t))(v80 + 8);
    v89 = v82;
    v72 = v81;
    v77 = v176;
    v88(v89, v3);
    sub_10000BA50(v71, (uint64_t *)&unk_10015C630);
    v88(v84, v3);
    v68 = v87;
    v70 = v86;
    v75 = v85;
    sub_10000BA50(v175, (uint64_t *)&unk_10015C630);
    v78 = (uint64_t)v174;
    if ((v156 & 1) == 0)
      goto LABEL_19;
  }
  v157 = v68;
  v90 = (uint64_t)v169;
  ((void (*)(_BYTE *, _QWORD, uint64_t))v70)(v169, enum case for ScenePhase.inactive(_:), v3);
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v72)(v90, 0, 1, v3);
  v91 = v167;
  v92 = (uint64_t)&v167[*(int *)(v183 + 48)];
  sub_100018C00(v180, (uint64_t)v167, (uint64_t *)&unk_10015C630);
  sub_100018C00(v90, v92, (uint64_t *)&unk_10015C630);
  if (v75((uint64_t)v91, 1, v3) == 1)
  {
    sub_10000BA50(v90, (uint64_t *)&unk_10015C630);
    if (v75(v92, 1, v3) == 1)
    {
      sub_10000BA50((uint64_t)v91, (uint64_t *)&unk_10015C630);
LABEL_32:
      v117 = "handleSceneDidEnterBackground()";
      v118 = "Calling will resign active on %{private,mask.hash}@.";
      v119 = &selRef_willResignActive;
      v120 = sub_1000E98FC;
LABEL_50:
      sub_1000E091C((unint64_t)v117 | 0x8000000000000000, v118, (SEL *)v119, (uint64_t)v120);
      return;
    }
    v73 = (uint64_t)v91;
    v68 = v157;
    goto LABEL_18;
  }
  v93 = v160;
  sub_100018C00((uint64_t)v91, (uint64_t)v160, (uint64_t *)&unk_10015C630);
  if (v75(v92, 1, v3) == 1)
  {
    v71 = (uint64_t)v169;
    v73 = (uint64_t)v91;
    v79 = v93;
    v68 = v157;
    goto LABEL_16;
  }
  v175 = (uint64_t)v70;
  v112 = v181;
  v113 = v172;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v181 + 32))(v172, v92, v3);
  v114 = sub_100007828((unint64_t *)&unk_10015C660, (uint64_t (*)(uint64_t))&type metadata accessor for ScenePhase, (uint64_t)&protocol conformance descriptor for ScenePhase);
  v115 = dispatch thunk of static Equatable.== infix(_:_:)(v93, v113, v3, v114);
  v116 = *(void (**)(_BYTE *, uint64_t))(v112 + 8);
  v70 = (void (*)(_BYTE *))v175;
  v116(v113, v3);
  sub_10000BA50((uint64_t)v169, (uint64_t *)&unk_10015C630);
  v116(v93, v3);
  sub_10000BA50((uint64_t)v167, (uint64_t *)&unk_10015C630);
  v78 = (uint64_t)v174;
  v68 = v157;
  if ((v115 & 1) != 0)
    goto LABEL_32;
LABEL_19:
  v94 = swift_getKeyPath(&unk_10011B1B0);
  v185 = v182;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v185, v94, v178);
  swift_release(v94);
  LODWORD(v176) = enum case for ScenePhase.inactive(_:);
  v70(v77);
  ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v72)(v77, 0, 1, v3);
  v95 = v78 + *(int *)(v183 + 48);
  sub_100018C00(v68, v78, (uint64_t *)&unk_10015C630);
  sub_100018C00((uint64_t)v77, v95, (uint64_t *)&unk_10015C630);
  if (v75(v78, 1, v3) == 1)
  {
    sub_10000BA50((uint64_t)v77, (uint64_t *)&unk_10015C630);
    if (v75(v95, 1, v3) != 1)
    {
LABEL_34:
      sub_10000BA50(v78, &qword_10015C658);
      goto LABEL_35;
    }
    sub_10000BA50(v78, (uint64_t *)&unk_10015C630);
  }
  else
  {
    v96 = v166;
    sub_100018C00(v78, (uint64_t)v166, (uint64_t *)&unk_10015C630);
    if (v75(v95, 1, v3) == 1)
    {
LABEL_29:
      sub_10000BA50((uint64_t)v77, (uint64_t *)&unk_10015C630);
      (*(void (**)(_BYTE *, uint64_t))(v181 + 8))(v96, v3);
      goto LABEL_34;
    }
    v97 = v181;
    v98 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v181 + 32);
    v174 = v72;
    v99 = v172;
    v98(v172, v95, v3);
    v100 = sub_100007828((unint64_t *)&unk_10015C660, (uint64_t (*)(uint64_t))&type metadata accessor for ScenePhase, (uint64_t)&protocol conformance descriptor for ScenePhase);
    v101 = v68;
    v102 = v96;
    LODWORD(v175) = dispatch thunk of static Equatable.== infix(_:_:)(v96, v99, v3, v100);
    v103 = v70;
    v104 = v78;
    v105 = *(void (**)(_BYTE *, uint64_t))(v97 + 8);
    v105(v99, v3);
    sub_10000BA50((uint64_t)v77, (uint64_t *)&unk_10015C630);
    v106 = v102;
    v68 = v101;
    v105(v106, v3);
    v107 = v104;
    v70 = v103;
    v72 = v174;
    sub_10000BA50(v107, (uint64_t *)&unk_10015C630);
    if ((v175 & 1) == 0)
      goto LABEL_35;
  }
  v108 = (void (*)(_BYTE *, _QWORD, uint64_t))v70;
  v109 = v170;
  v175 = (uint64_t)v108;
  v108(v170, v163, v3);
  ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v72)(v109, 0, 1, v3);
  v110 = v164;
  v111 = (uint64_t)&v164[*(int *)(v183 + 48)];
  sub_100018C00(v180, (uint64_t)v164, (uint64_t *)&unk_10015C630);
  sub_100018C00((uint64_t)v109, v111, (uint64_t *)&unk_10015C630);
  if (v75((uint64_t)v110, 1, v3) == 1)
  {
    sub_10000BA50((uint64_t)v170, (uint64_t *)&unk_10015C630);
    if (v75(v111, 1, v3) == 1)
    {
      sub_10000BA50((uint64_t)v110, (uint64_t *)&unk_10015C630);
LABEL_49:
      v117 = "handleSceneWillResignActive()";
      v118 = "Calling will become active on %{private,mask.hash}@.";
      v119 = &selRef_willBecomeActive;
      v120 = sub_1000E9910;
      goto LABEL_50;
    }
    v78 = (uint64_t)v110;
    v70 = (void (*)(_BYTE *))v175;
    goto LABEL_34;
  }
  v96 = v159;
  sub_100018C00((uint64_t)v110, (uint64_t)v159, (uint64_t *)&unk_10015C630);
  if (v75(v111, 1, v3) == 1)
  {
    v78 = (uint64_t)v110;
    v77 = v170;
    v70 = (void (*)(_BYTE *))v175;
    goto LABEL_29;
  }
  v143 = v181;
  v144 = v72;
  v145 = v172;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v181 + 32))(v172, v111, v3);
  v146 = sub_100007828((unint64_t *)&unk_10015C660, (uint64_t (*)(uint64_t))&type metadata accessor for ScenePhase, (uint64_t)&protocol conformance descriptor for ScenePhase);
  v147 = v96;
  v148 = dispatch thunk of static Equatable.== infix(_:_:)(v96, v145, v3, v146);
  v149 = *(void (**)(_BYTE *, uint64_t))(v143 + 8);
  v149(v145, v3);
  sub_10000BA50((uint64_t)v170, (uint64_t *)&unk_10015C630);
  v149(v147, v3);
  v72 = v144;
  sub_10000BA50((uint64_t)v110, (uint64_t *)&unk_10015C630);
  v70 = (void (*)(_BYTE *))v175;
  if ((v148 & 1) != 0)
    goto LABEL_49;
LABEL_35:
  v121 = swift_getKeyPath(&unk_10011B1B0);
  v185 = v182;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v185, v121, v178);
  swift_release(v121);
  v122 = v177;
  ((void (*)(_BYTE *, _QWORD, uint64_t))v70)(v177, enum case for ScenePhase.background(_:), v3);
  ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v72)(v122, 0, 1, v3);
  v123 = v183;
  v124 = v171;
  v125 = (uint64_t)&v171[*(int *)(v183 + 48)];
  sub_100018C00(v68, (uint64_t)v171, (uint64_t *)&unk_10015C630);
  v126 = (uint64_t)v124;
  sub_100018C00((uint64_t)v122, v125, (uint64_t *)&unk_10015C630);
  if (v75((uint64_t)v124, 1, v3) == 1)
  {
    sub_10000BA50((uint64_t)v177, (uint64_t *)&unk_10015C630);
    if (v75(v125, 1, v3) == 1)
    {
      sub_10000BA50((uint64_t)v124, (uint64_t *)&unk_10015C630);
      goto LABEL_42;
    }
LABEL_40:
    sub_10000BA50(v126, &qword_10015C658);
    return;
  }
  v127 = (uint64_t)v124;
  v128 = v165;
  sub_100018C00(v127, (uint64_t)v165, (uint64_t *)&unk_10015C630);
  if (v75(v125, 1, v3) == 1)
  {
    sub_10000BA50((uint64_t)v177, (uint64_t *)&unk_10015C630);
    (*(void (**)(_BYTE *, uint64_t))(v181 + 8))(v128, v3);
    goto LABEL_40;
  }
  v174 = v72;
  v175 = (uint64_t)v70;
  v129 = v128;
  v130 = v181;
  v131 = v172;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v181 + 32))(v172, v125, v3);
  v132 = sub_100007828((unint64_t *)&unk_10015C660, (uint64_t (*)(uint64_t))&type metadata accessor for ScenePhase, (uint64_t)&protocol conformance descriptor for ScenePhase);
  v133 = dispatch thunk of static Equatable.== infix(_:_:)(v129, v131, v3, v132);
  v134 = *(void (**)(_BYTE *, uint64_t))(v130 + 8);
  v135 = v131;
  v136 = v183;
  v134(v135, v3);
  v72 = v174;
  sub_10000BA50((uint64_t)v177, (uint64_t *)&unk_10015C630);
  v137 = v129;
  v70 = (void (*)(_BYTE *))v175;
  v134(v137, v3);
  v123 = v136;
  sub_10000BA50(v126, (uint64_t *)&unk_10015C630);
  if ((v133 & 1) == 0)
    return;
LABEL_42:
  v138 = (uint64_t)v161;
  ((void (*)(_BYTE *, _QWORD, uint64_t))v70)(v161, v176, v3);
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v72)(v138, 0, 1, v3);
  v139 = v162;
  v140 = (uint64_t)&v162[*(int *)(v123 + 48)];
  v141 = v138;
  sub_100018C00(v180, (uint64_t)v162, (uint64_t *)&unk_10015C630);
  sub_100018C00(v138, v140, (uint64_t *)&unk_10015C630);
  if (v75((uint64_t)v139, 1, v3) != 1)
  {
    v142 = v158;
    sub_100018C00((uint64_t)v139, (uint64_t)v158, (uint64_t *)&unk_10015C630);
    if (v75(v140, 1, v3) != 1)
    {
      v150 = v181;
      v151 = v172;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v181 + 32))(v172, v140, v3);
      v152 = sub_100007828((unint64_t *)&unk_10015C660, (uint64_t (*)(uint64_t))&type metadata accessor for ScenePhase, (uint64_t)&protocol conformance descriptor for ScenePhase);
      v153 = dispatch thunk of static Equatable.== infix(_:_:)(v142, v151, v3, v152);
      v154 = *(void (**)(_BYTE *, uint64_t))(v150 + 8);
      v154(v151, v3);
      sub_10000BA50(v141, (uint64_t *)&unk_10015C630);
      v154(v142, v3);
      sub_10000BA50((uint64_t)v139, (uint64_t *)&unk_10015C630);
      if ((v153 & 1) == 0)
        return;
      goto LABEL_52;
    }
    sub_10000BA50(v138, (uint64_t *)&unk_10015C630);
    (*(void (**)(_BYTE *, uint64_t))(v181 + 8))(v142, v3);
LABEL_47:
    sub_10000BA50((uint64_t)v139, &qword_10015C658);
    return;
  }
  sub_10000BA50(v138, (uint64_t *)&unk_10015C630);
  if (v75(v140, 1, v3) != 1)
    goto LABEL_47;
  sub_10000BA50((uint64_t)v139, (uint64_t *)&unk_10015C630);
LABEL_52:
  sub_1000E0E34();
}

uint64_t sub_1000E0834@<X0>(uint64_t a1@<X8>)
{
  return sub_1000E0858((uint64_t)&unk_10011B1B0, &OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__scenePhase, (uint64_t)&unk_10015C630, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100018C00, a1);
}

uint64_t sub_1000E0858@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(uint64_t, uint64_t, uint64_t)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[3];

  KeyPath = swift_getKeyPath(a1);
  v14[0] = v5;
  v11 = sub_100007828((unint64_t *)&qword_100158F78, type metadata accessor for SettingsAppNavigationModel, (uint64_t)&unk_10011B030);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v14, KeyPath, v11);
  swift_release(KeyPath);
  v12 = v5 + *a2;
  swift_beginAccess(v12, v14, 0, 0);
  return a4(v12, a5, a3);
}

void sub_1000E091C(unint64_t a1, const char *a2, SEL *a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t KeyPath;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  SEL *v44;
  uint64_t v45;
  char *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  SEL *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _BYTE v56[16];
  uint64_t v57[3];

  v51 = a2;
  v52 = a3;
  v54 = a1;
  v6 = v4;
  v7 = type metadata accessor for NavigationPath(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100156C98 != -1)
    swift_once(&qword_100156C98, sub_10008BDC4);
  v11 = type metadata accessor for Logger(0);
  v12 = sub_100007808(v11, (uint64_t)qword_10015D280);
  v13 = swift_retain_n(v4, 2);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc(22, -1);
    v49 = v12;
    v17 = v16;
    v18 = swift_slowAlloc(64, -1);
    v50 = (uint64_t)v10;
    v19 = v18;
    v57[0] = v18;
    *(_DWORD *)v17 = 136315394;
    v20 = _typeName(_:qualified:)(*v6, 0);
    v21 = v7;
    v22 = a4;
    v24 = v23;
    v55 = sub_1000DA1F0(v20, v23, v57);
    v53 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v17 + 4, v17 + 12);
    swift_release_n(v6, 2);
    v25 = v24;
    a4 = v22;
    v7 = v21;
    swift_bridgeObjectRelease(v25);
    *(_WORD *)(v17 + 12) = 2080;
    v55 = sub_1000DA1F0(0xD00000000000001DLL, v54, v57);
    v8 = v53;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v17 + 14, v17 + 22);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Start (%s.%s)…", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v19, 2, (char *)&type metadata for Any + 8);
    v26 = v19;
    v10 = (char *)v50;
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {

    swift_release_n(v6, 2);
  }
  KeyPath = swift_getKeyPath(&unk_10011B0C0);
  v57[0] = (uint64_t)v6;
  v28 = sub_100007828((unint64_t *)&qword_100158F78, type metadata accessor for SettingsAppNavigationModel, (uint64_t)&unk_10011B030);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v57, KeyPath, v28);
  swift_release(KeyPath);
  v29 = (char *)v6 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__detailContent;
  swift_beginAccess((char *)v6 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__detailContent, v57, 0, 0);
  v30 = *(_QWORD *)&v29[*(int *)(type metadata accessor for SettingsAppDetailContent(0) + 20)];
  if (v30 >> 62 == 1)
  {
    v49 = v28;
    v50 = v30 & 0x3FFFFFFFFFFFFFFFLL;
    v31 = swift_retain(v30 & 0x3FFFFFFFFFFFFFFFLL);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = swift_slowAlloc(22, -1);
      v53 = v8;
      v35 = v34;
      v47 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v35 = 141558275;
      v55 = 1752392040;
      v48 = v7;
      v36 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v35 + 4, v35 + 12);
      *(_WORD *)(v35 + 12) = 2113;
      v37 = PreferencesControllerRepresentableModel.makeViewControllerIfNeeded()(v36);
      v55 = v37;
      v7 = v48;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v35 + 14, v35 + 22);
      v38 = v47;
      *v47 = v37;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, v51, (uint8_t *)v35, 0x16u);
      v39 = sub_100004FC8(&qword_10015AF10);
      swift_arrayDestroy(v38, 1, v39);
      swift_slowDealloc(v38, -1, -1);
      v40 = v35;
      v8 = v53;
      swift_slowDealloc(v40, -1, -1);
    }

    v41 = v50;
    v43 = (void *)PreferencesControllerRepresentableModel.makeViewControllerIfNeeded()(v42);
    v44 = v52;
    if ((objc_msgSend(v43, "respondsToSelector:", *v52) & 1) != 0)
    {
      objc_msgSend(v43, *v44);

      swift_release(v41);
    }
    else
    {
      swift_release(v41);

    }
    v28 = v49;
  }
  v45 = swift_getKeyPath(&unk_10011B138);
  v55 = (uint64_t)v6;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v55, v45, v28);
  swift_release(v45);
  v46 = (char *)v6 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__navigationPath;
  swift_beginAccess((char *)v6 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__navigationPath, &v55, 0, 0);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v46, v7);
  NavigationPath.withCollectionProxy(_:)(a4);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  sub_1000E9DD4(v6, 0xD00000000000001DLL, v54);
}

void sub_1000E0E34()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  NSObject *v28;
  os_log_type_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  NSObject *v34;
  uint64_t v35;
  _QWORD *v36;
  os_log_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  int v44;
  _QWORD *v45;
  os_log_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE v49[16];
  uint64_t v50[3];

  v1 = v0;
  v2 = type metadata accessor for NavigationPath(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100156C98 != -1)
    swift_once(&qword_100156C98, sub_10008BDC4);
  v6 = type metadata accessor for Logger(0);
  sub_100007808((uint64_t)v6, (uint64_t)qword_10015D280);
  v7 = swift_retain_n(v0, 2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  v10 = os_log_type_enabled(v8, v9);
  v46 = v6;
  v47 = v3;
  if (v10)
  {
    v11 = swift_slowAlloc(22, -1);
    v12 = swift_slowAlloc(64, -1);
    v45 = (_QWORD *)v2;
    v13 = v12;
    v50[0] = v12;
    *(_DWORD *)v11 = 136315394;
    v14 = _typeName(_:qualified:)(*v1, 0);
    v16 = v15;
    v48 = sub_1000DA1F0(v14, v15, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v11 + 4, v11 + 12);
    swift_release_n(v1, 2);
    swift_bridgeObjectRelease(v16);
    *(_WORD *)(v11 + 12) = 2080;
    v48 = sub_1000DA1F0(0xD000000000000020, 0x80000001001270B0, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v11 + 14, v11 + 22);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Start (%s.%s)…", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy(v13, 2, (char *)&type metadata for Any + 8);
    v17 = v13;
    v3 = v47;
    v2 = (uint64_t)v45;
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {

    swift_release_n(v1, 2);
  }
  KeyPath = swift_getKeyPath(&unk_10011B0C0);
  v50[0] = (uint64_t)v1;
  v19 = sub_100007828((unint64_t *)&qword_100158F78, type metadata accessor for SettingsAppNavigationModel, (uint64_t)&unk_10011B030);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v50, KeyPath, v19);
  swift_release(KeyPath);
  v20 = (char *)v1 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__detailContent;
  swift_beginAccess((char *)v1 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__detailContent, v50, 0, 0);
  v21 = *(_QWORD *)&v20[*(int *)(type metadata accessor for SettingsAppDetailContent(0) + 20)];
  if (v21 >> 62 == 1)
  {
    v22 = v21 & 0x3FFFFFFFFFFFFFFFLL;
    v23 = swift_retain(v21 & 0x3FFFFFFFFFFFFFFFLL);
    v24 = (void *)PreferencesControllerRepresentableModel.makeViewControllerIfNeeded()(v23);
    v25 = objc_opt_self(PSListController);
    v26 = (void *)swift_dynamicCastObjCClass(v24, v25);
    if (v26)
    {
      v27 = v26;
      if (objc_msgSend(v26, "shouldReloadSpecifiersOnResume"))
      {
        if (qword_100156C90 != -1)
          swift_once(&qword_100156C90, sub_10008BDA4);
        sub_100007808((uint64_t)v46, (uint64_t)qword_10015D268);
        v46 = v24;
        v28 = Logger.logObject.getter(v46);
        v29 = static os_log_type_t.default.getter();
        v30 = v29;
        if (os_log_type_enabled(v28, v29))
        {
          v31 = swift_slowAlloc(22, -1);
          v44 = v30;
          v32 = v31;
          v45 = (_QWORD *)swift_slowAlloc(8, -1);
          *(_DWORD *)v32 = 141558275;
          v48 = 1752392040;
          v43 = v49;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v32 + 4, v32 + 12);
          *(_WORD *)(v32 + 12) = 2113;
          v41 = v32 + 22;
          v42 = v32 + 14;
          v48 = (uint64_t)v27;
          v33 = v46;
          v46 = v28;
          v34 = v33;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v43, v42, v41);
          *v45 = v27;

          _os_log_impl((void *)&_mh_execute_header, v46, (os_log_type_t)v44, "Reloading specifiers on resume for %{private,mask.hash}@.", (uint8_t *)v32, 0x16u);
          v35 = sub_100004FC8(&qword_10015AF10);
          v36 = v45;
          swift_arrayDestroy(v45, 1, v35);
          swift_slowDealloc(v36, -1, -1);
          swift_slowDealloc(v32, -1, -1);
          v37 = v46;
        }
        else
        {

          v37 = v46;
        }

        objc_msgSend(v27, "reloadSpecifiers");
      }
    }
    swift_release(v22);

    v3 = v47;
  }
  v38 = swift_getKeyPath(&unk_10011B138);
  v48 = (uint64_t)v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v48, v38, v19);
  swift_release(v38);
  v39 = (char *)v1 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__navigationPath;
  swift_beginAccess((char *)v1 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__navigationPath, &v48, 0, 0);
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v39, v2);
  NavigationPath.withCollectionProxy(_:)(sub_1000E9FB4);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_1000E9DD4(v1, 0xD000000000000020, 0x80000001001270B0);
}

void sub_1000E139C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t KeyPath;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57[3];

  v2 = v1;
  v4 = type metadata accessor for ScenePhase(0);
  v52 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v49 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_100004FC8(&qword_10015C658);
  __chkstk_darwin(v51);
  v53 = (uint64_t)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004FC8((uint64_t *)&unk_10015C630);
  v8 = __chkstk_darwin(v7);
  v50 = (uint64_t)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v47 - v11;
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v47 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v47 - v16;
  if (qword_100156C98 != -1)
    swift_once(&qword_100156C98, sub_10008BDC4);
  v18 = type metadata accessor for Logger(0);
  sub_100007808(v18, (uint64_t)qword_10015D280);
  sub_100018C00(a1, (uint64_t)v17, (uint64_t *)&unk_10015C630);
  v19 = swift_retain_n(v2, 2);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter();
  v22 = &unk_10015C000;
  if (os_log_type_enabled(v20, v21))
  {
    v23 = swift_slowAlloc(22, -1);
    v48 = swift_slowAlloc(64, -1);
    v57[0] = v48;
    *(_DWORD *)v23 = 136315394;
    sub_100018C00((uint64_t)v17, (uint64_t)v15, (uint64_t *)&unk_10015C630);
    v24 = String.init<A>(describing:)(v15, v7);
    v47 = v7;
    v26 = v25;
    v55 = sub_1000DA1F0(v24, v25, v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v23 + 4, v23 + 12);
    swift_bridgeObjectRelease(v26);
    sub_10000BA50((uint64_t)v17, (uint64_t *)&unk_10015C630);
    *(_WORD *)(v23 + 12) = 2080;
    KeyPath = swift_getKeyPath(&unk_10011B1B0);
    v55 = v2;
    v28 = sub_100007828((unint64_t *)&qword_100158F78, type metadata accessor for SettingsAppNavigationModel, (uint64_t)&unk_10011B030);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v55, KeyPath, v28);
    swift_release(KeyPath);
    v29 = v2 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__scenePhase;
    swift_beginAccess(v2 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__scenePhase, &v55, 0, 0);
    sub_100018C00(v29, (uint64_t)v15, (uint64_t *)&unk_10015C630);
    v30 = String.init<A>(describing:)(v15, v47);
    v32 = v31;
    v54 = sub_1000DA1F0(v30, v31, v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v23 + 14, v23 + 22);
    swift_release_n(v2, 2);
    swift_bridgeObjectRelease(v32);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Scene phase did change from '%s' to '%s'.", (uint8_t *)v23, 0x16u);
    v33 = v48;
    swift_arrayDestroy(v48, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    v34 = v23;
    v22 = (_QWORD *)&unk_10015C000;
    swift_slowDealloc(v34, -1, -1);

  }
  else
  {
    sub_10000BA50((uint64_t)v17, (uint64_t *)&unk_10015C630);

    swift_release_n(v2, 2);
  }
  v35 = swift_getKeyPath(&unk_10011B1B0);
  v57[0] = v2;
  v36 = sub_100007828((unint64_t *)&qword_100158F78, type metadata accessor for SettingsAppNavigationModel, (uint64_t)&unk_10011B030);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v57, v35, v36);
  swift_release(v35);
  v37 = v2 + v22[75];
  swift_beginAccess(v37, v57, 0, 0);
  v38 = v52;
  (*(void (**)(char *, _QWORD, uint64_t))(v52 + 104))(v12, enum case for ScenePhase.background(_:), v4);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v12, 0, 1, v4);
  v39 = v53;
  v40 = v53 + *(int *)(v51 + 48);
  sub_100018C00(v37, v53, (uint64_t *)&unk_10015C630);
  sub_100018C00((uint64_t)v12, v40, (uint64_t *)&unk_10015C630);
  v41 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48);
  if (v41(v39, 1, v4) != 1)
  {
    v42 = v50;
    sub_100018C00(v39, v50, (uint64_t *)&unk_10015C630);
    if (v41(v40, 1, v4) != 1)
    {
      v43 = v49;
      (*(void (**)(char *, uint64_t, uint64_t))(v38 + 32))(v49, v40, v4);
      v44 = sub_100007828((unint64_t *)&unk_10015C660, (uint64_t (*)(uint64_t))&type metadata accessor for ScenePhase, (uint64_t)&protocol conformance descriptor for ScenePhase);
      v45 = dispatch thunk of static Equatable.== infix(_:_:)(v42, v43, v4, v44);
      v46 = *(void (**)(char *, uint64_t))(v38 + 8);
      v46(v43, v4);
      sub_10000BA50((uint64_t)v12, (uint64_t *)&unk_10015C630);
      v46((char *)v42, v4);
      sub_10000BA50(v39, (uint64_t *)&unk_10015C630);
      if ((v45 & 1) == 0)
        return;
      goto LABEL_13;
    }
    sub_10000BA50((uint64_t)v12, (uint64_t *)&unk_10015C630);
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v42, v4);
LABEL_11:
    sub_10000BA50(v39, &qword_10015C658);
    return;
  }
  sub_10000BA50((uint64_t)v12, (uint64_t *)&unk_10015C630);
  if (v41(v40, 1, v4) != 1)
    goto LABEL_11;
  sub_10000BA50(v39, (uint64_t *)&unk_10015C630);
LABEL_13:
  sub_1000E19B8();
}

void sub_1000E19B8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t KeyPath;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  unsigned __int8 v30;
  uint64_t v31;
  char *v32;
  uint64_t (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  _DWORD *v48;
  _DWORD *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint8_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE v78[16];
  uint64_t v79;
  uint64_t v80[3];

  v1 = v0;
  v2 = type metadata accessor for NavigationPath(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v71 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = sub_100004FC8(&qword_10015C890);
  __chkstk_darwin(v75);
  v74 = (uint64_t)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100156C98 != -1)
    swift_once(&qword_100156C98, sub_10008BDC4);
  v7 = type metadata accessor for Logger(0);
  v8 = sub_100007808(v7, (uint64_t)qword_10015D280);
  v9 = swift_retain_n(v1, 2);
  v73 = (uint8_t *)v8;
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc(22, -1);
    v72 = v3;
    v13 = v12;
    v14 = v2;
    v15 = swift_slowAlloc(64, -1);
    v80[0] = v15;
    *(_DWORD *)v13 = 136315394;
    v16 = _typeName(_:qualified:)(*v1, 0);
    v18 = v17;
    v77 = sub_1000DA1F0(v16, v17, v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, v78, v13 + 4, v13 + 12);
    swift_release_n(v1, 2);
    swift_bridgeObjectRelease(v18);
    *(_WORD *)(v13 + 12) = 2080;
    v77 = sub_1000DA1F0(0xD00000000000001FLL, 0x8000000100127050, v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, v78, v13 + 14, v13 + 22);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Start (%s.%s)…", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v15, 2, (char *)&type metadata for Any + 8);
    v19 = v15;
    v2 = v14;
    swift_slowDealloc(v19, -1, -1);
    v20 = v13;
    v3 = v72;
    swift_slowDealloc(v20, -1, -1);

  }
  else
  {

    swift_release_n(v1, 2);
  }
  KeyPath = swift_getKeyPath(&unk_10011B0C0);
  v22 = (char *)v1 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel___observationRegistrar;
  v80[0] = (uint64_t)v1;
  v23 = sub_100007828((unint64_t *)&qword_100158F78, type metadata accessor for SettingsAppNavigationModel, (uint64_t)&unk_10011B030);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v80, KeyPath, v23);
  swift_release(KeyPath);
  v24 = (char *)v1 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__detailContent;
  swift_beginAccess((char *)v1 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__detailContent, v80, 0, 0);
  v25 = *(_QWORD *)&v24[*(int *)(type metadata accessor for SettingsAppDetailContent(0) + 20)];
  if (v25 >> 62 == 1)
  {
    v26 = v2;
    v27 = v25 & 0x3FFFFFFFFFFFFFFFLL;
    v28 = swift_retain(v25 & 0x3FFFFFFFFFFFFFFFLL);
    v29 = (void *)PreferencesControllerRepresentableModel.makeViewControllerIfNeeded()(v28);
    v30 = objc_msgSend(v29, "canBeShownFromSuspendedState");

    if ((v30 & 1) == 0)
    {
      v57 = swift_retain_n(v1, 2);
      v58 = Logger.logObject.getter(v57);
      v59 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v58, v59))
      {
        v60 = (uint8_t *)swift_slowAlloc(12, -1);
        v61 = swift_slowAlloc(32, -1);
        v79 = v61;
        *(_DWORD *)v60 = 136315138;
        v73 = v60 + 4;
        v62 = sub_1000DB598();
        v63 = swift_getKeyPath(&unk_10011B110);
        v77 = (uint64_t)v62;
        v64 = sub_100007828(&qword_100158EF0, type metadata accessor for PrimarySettingsListModel, (uint64_t)&unk_10011B328);
        ObservationRegistrar.access<A, B>(_:keyPath:)(&v77, v63, v64);
        swift_release(v63);
        v65 = &v62[OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_effectiveSelection];
        swift_beginAccess(&v62[OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_effectiveSelection], &v77, 0, 0);
        v66 = (uint64_t)v65;
        v67 = v74;
        sub_100018C00(v66, v74, &qword_10015C890);
        swift_release(v62);
        v68 = String.init<A>(describing:)(v67, v75);
        v70 = v69;
        v76 = sub_1000DA1F0(v68, v69, &v79);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v73, v60 + 12);
        swift_release_n(v1, 2);
        swift_bridgeObjectRelease(v70);
        _os_log_impl((void *)&_mh_execute_header, v58, v59, "Root for currentSelection '%s' is a Preferences Controller that cannot be shown from a suspended state.", v60, 0xCu);
        swift_arrayDestroy(v61, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v61, -1, -1);
        swift_slowDealloc(v60, -1, -1);

      }
      else
      {

        swift_release_n(v1, 2);
      }
      sub_1000DB8BC();
      swift_release(v27);
      goto LABEL_20;
    }
    swift_release(v27);
    v2 = v26;
  }
  v79 = 0;
  v31 = swift_getKeyPath(&unk_10011B138);
  v77 = (uint64_t)v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v77, v31, v23);
  swift_release(v31);
  v32 = (char *)v1 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__navigationPath;
  swift_beginAccess((char *)v1 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__navigationPath, &v77, 0, 0);
  v33 = *(uint64_t (**)(char *, char *, uint64_t))(v3 + 16);
  v34 = v33(v5, v32, v2);
  __chkstk_darwin(v34);
  *(&v71 - 2) = (uint64_t)&v79;
  NavigationPath.withCollectionProxy(_:)(sub_1000F1BA4);
  v35 = *(void (**)(char *, uint64_t))(v3 + 8);
  v35(v5, v2);
  v36 = swift_getKeyPath(&unk_10011B138);
  v76 = (uint64_t)v1;
  v74 = v23;
  v75 = (uint64_t)v22;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v76, v36, v23);
  swift_release(v36);
  v37 = v33(v5, v32, v2);
  v38 = NavigationPath.count.getter(v37);
  v35(v5, v2);
  v39 = v79 + 1;
  if (__OFADD__(v79, 1))
  {
    __break(1u);
  }
  else
  {
    v40 = v38 - v39;
    if (!__OFSUB__(v38, v39))
    {
      v41 = swift_getKeyPath(&unk_10011B138);
      v76 = (uint64_t)v1;
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v76, v41, v74);
      swift_release(v41);
      v42 = v33(v5, v32, v2);
      v43 = NavigationPath.count.getter(v42);
      v44 = ((uint64_t (*)(char *, uint64_t))v35)(v5, v2);
      if (v43 >= v40)
      {
        __chkstk_darwin(v44);
        *(&v71 - 2) = (uint64_t)v1;
        *(&v71 - 1) = v40;
        v76 = 0;
        Transaction.disablesAnimations.setter(1);
        v55 = v76;
        v56 = swift_retain(v76);
        withTransaction<A>(_:_:)(v56, sub_1000F1BAC, &v71 - 4, (char *)&type metadata for () + 8);
        swift_release_n(v55, 2);
      }
      else
      {
        v45 = swift_retain_n(v1, 2);
        v46 = Logger.logObject.getter(v45);
        v47 = static os_log_type_t.fault.getter(v46);
        if (os_log_type_enabled(v46, v47))
        {
          v48 = (_DWORD *)swift_slowAlloc(22, -1);
          v72 = v2;
          v49 = v48;
          *v48 = 134349312;
          v76 = v40;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v48 + 1, v48 + 3);
          *((_WORD *)v49 + 6) = 2050;
          v73 = (uint8_t *)v49 + 14;
          v50 = swift_getKeyPath(&unk_10011B138);
          v76 = (uint64_t)v1;
          ObservationRegistrar.access<A, B>(_:keyPath:)(&v76, v50, v74);
          swift_release(v50);
          v51 = v32;
          v52 = v72;
          v53 = v33(v5, v51, v72);
          v54 = NavigationPath.count.getter(v53);
          v35(v5, v52);
          swift_release(v1);
          v76 = v54;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v73, (char *)v49 + 22);
          swift_release(v1);
          _os_log_impl((void *)&_mh_execute_header, v46, v47, "Unexpected number of items to pop '%{public}ld' when there are only '%{public}ld' items in the navigation path.", (uint8_t *)v49, 0x16u);
          swift_slowDealloc(v49, -1, -1);

        }
        else
        {

          swift_release_n(v1, 2);
        }
      }
LABEL_20:
      sub_1000E9DD4(v1, 0xD00000000000001FLL, 0x8000000100127050);
      return;
    }
  }
  __break(1u);
}

uint64_t sub_1000E224C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE v12[24];
  _BYTE v13[24];

  v4 = sub_100004FC8((uint64_t *)&unk_10015C630);
  v5 = __chkstk_darwin(v4);
  v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  v9 = &v12[-v8];
  sub_100018C00(a2, (uint64_t)&v12[-v8], (uint64_t *)&unk_10015C630);
  v10 = a1 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__scenePhase;
  swift_beginAccess(a1 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__scenePhase, v13, 0, 0);
  sub_100018C00(v10, (uint64_t)v7, (uint64_t *)&unk_10015C630);
  sub_1000DF5F8((uint64_t)v9);
  swift_beginAccess(v10, v12, 33, 0);
  sub_1000F1B58((uint64_t)v9, v10, (uint64_t *)&unk_10015C630);
  swift_endAccess(v12);
  sub_1000E139C((uint64_t)v7);
  sub_10000BA50((uint64_t)v9, (uint64_t *)&unk_10015C630);
  return sub_10000BA50((uint64_t)v7, (uint64_t *)&unk_10015C630);
}

uint64_t sub_1000E2378()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  id v67;

  v1 = v0;
  v2 = sub_100004FC8(&qword_10015C5D8);
  __chkstk_darwin(v2);
  v63 = (char *)&v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100004FC8((uint64_t *)&unk_10015C5E0);
  __chkstk_darwin(v4);
  v6 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = type metadata accessor for NSRunLoop.SchedulerTimeType.Stride(0);
  v57 = *(_QWORD *)(v61 - 8);
  __chkstk_darwin(v61);
  v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100004FC8(&qword_10015C980);
  v59 = *(_QWORD *)(v9 - 8);
  v60 = v9;
  __chkstk_darwin(v9);
  v58 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004FC8(&qword_10015C5F0);
  v64 = *(_QWORD *)(v11 - 8);
  v65 = v11;
  __chkstk_darwin(v11);
  v62 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for SettingsAppDetailContent(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for NavigationPath(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v1 + 16) = 0;
  NavigationPath.init()(v18);
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v1 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__navigationPath, v20, v16);
  if (qword_100156CF8 != -1)
    swift_once(&qword_100156CF8, sub_1000AC014);
  v21 = sub_100007808(v13, (uint64_t)qword_10015D398);
  sub_1000076F0(v21, (uint64_t)v15, type metadata accessor for SettingsAppDetailContent);
  sub_100007670((uint64_t)v15, v1 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__detailContent, type metadata accessor for SettingsAppDetailContent);
  v22 = v1 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel_pendingURLDestination;
  v23 = type metadata accessor for SettingsURLDestination(0);
  v24 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56);
  v24(v22, 1, 1, v23);
  v24(v1 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel_currentlyInProgressURLDestination, 1, 1, v23);
  v25 = OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__primarySettingsListScrollToItemSubject;
  *(_QWORD *)(v1 + v25) = swift_getKeyPath(&unk_10011B190);
  v26 = OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel_cleanupCurrentlyInProgressURLDestinationSubject;
  v27 = sub_100004FC8(&qword_10015C540);
  swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
  *(_QWORD *)(v1 + v26) = PassthroughSubject.init()();
  v56 = OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel_observer;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel_observer) = 0;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__shouldDismissSearch) = 0;
  v28 = v1 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__horizontalSizeClass;
  v29 = type metadata accessor for UserInterfaceSizeClass(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v28, 1, 1, v29);
  v30 = v1 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__scenePhase;
  v31 = type metadata accessor for ScenePhase(0);
  v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v30, 1, 1, v31);
  ObservationRegistrar.init()(v32);
  objc_msgSend((id)objc_opt_self(PSURLControllerHandler), "registerApplicationURLStateProvider:", v1);
  v67 = *(id *)(v1
              + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel_cleanupCurrentlyInProgressURLDestinationSubject);
  swift_retain(v67);
  static NSRunLoop.SchedulerTimeType.Stride.milliseconds(_:)(10);
  v55 = (id)objc_opt_self(NSRunLoop);
  v66 = objc_msgSend(v55, "mainRunLoop");
  v33 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
  v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56);
  v34(v6, 1, 1, v33);
  v35 = sub_100007BBC(0, &qword_10015C5F8, NSRunLoop_ptr);
  v53 = v35;
  v36 = sub_100007868(&qword_10015C600, &qword_10015C540, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v54 = sub_1000F1A90();
  v37 = v58;
  Publisher.debounce<A>(for:scheduler:options:)(v8, &v66, v6, v27, v35, v36, v54);
  sub_10000BA50((uint64_t)v6, (uint64_t *)&unk_10015C5E0);

  v38 = v57;
  v39 = *(void (**)(char *, uint64_t))(v57 + 8);
  v40 = v61;
  v39(v8, v61);
  swift_release(v67);
  static NSRunLoop.SchedulerTimeType.Stride.seconds(_:)(8);
  v41 = (uint64_t)v63;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56))(v63, 1, 1, v40);
  v67 = objc_msgSend(v55, "mainRunLoop");
  v34(v6, 1, 1, v33);
  v42 = sub_100007868(&qword_10015C610, &qword_10015C980, (uint64_t)&protocol conformance descriptor for Publishers.Debounce<A, B>);
  v43 = v62;
  v44 = v60;
  Publisher.delay<A>(for:tolerance:scheduler:options:)(v8, v41, &v67, v6, v60, v53, v42, v54);
  sub_10000BA50((uint64_t)v6, (uint64_t *)&unk_10015C5E0);

  sub_10000BA50(v41, &qword_10015C5D8);
  v39(v8, v40);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v37, v44);
  v45 = swift_allocObject(&unk_10014DC60, 24, 7);
  swift_weakInit(v45 + 16, v1);
  v46 = swift_allocObject(&unk_10014DE40, 32, 7);
  *(_QWORD *)(v46 + 16) = sub_1000F1AE8;
  *(_QWORD *)(v46 + 24) = v45;
  v47 = sub_100007868(&qword_10015C618, &qword_10015C5F0, (uint64_t)&protocol conformance descriptor for Publishers.Delay<A, B>);
  v48 = v65;
  v49 = Publisher<>.sink(receiveValue:)(sub_1000B1284, v46, v65, v47);
  swift_release(v46);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v43, v48);
  v50 = *(_QWORD *)(v1 + v56);
  *(_QWORD *)(v1 + v56) = v49;
  swift_release(v50);
  return v1;
}

uint64_t sub_1000E29E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint8_t *v30;
  uint8_t *v31;
  uint64_t v32;
  os_log_t v33;
  uint64_t v34;
  uint64_t v35[3];
  _BYTE v36[24];
  _BYTE v37[24];

  v2 = sub_100004FC8((uint64_t *)&unk_10015C400);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v30 - v6;
  v8 = type metadata accessor for SettingsURLDestination(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v30 - v13;
  a1 += 16;
  swift_beginAccess(a1, v37, 0, 0);
  result = swift_weakLoadStrong(a1);
  if (result)
  {
    v16 = result;
    v17 = result + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel_currentlyInProgressURLDestination;
    swift_beginAccess(result + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel_currentlyInProgressURLDestination, v36, 0, 0);
    sub_100018C00(v17, (uint64_t)v7, (uint64_t *)&unk_10015C400);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    {
      swift_release(v16);
      return sub_10000BA50((uint64_t)v7, (uint64_t *)&unk_10015C400);
    }
    else
    {
      sub_100007670((uint64_t)v7, (uint64_t)v14, type metadata accessor for SettingsURLDestination);
      if (qword_100156CA0 != -1)
        swift_once(&qword_100156CA0, sub_10008BDE8);
      v18 = type metadata accessor for Logger(0);
      sub_100007808(v18, (uint64_t)qword_10015D298);
      v19 = sub_1000076F0((uint64_t)v14, (uint64_t)v12, type metadata accessor for SettingsURLDestination);
      v20 = Logger.logObject.getter(v19);
      v21 = static os_log_type_t.fault.getter(v20);
      if (os_log_type_enabled(v20, v21))
      {
        v33 = v20;
        v22 = (uint8_t *)swift_slowAlloc(12, -1);
        v32 = swift_slowAlloc(32, -1);
        v35[0] = v32;
        v31 = v22;
        *(_DWORD *)v22 = 136446210;
        v30 = v22 + 4;
        v23 = sub_10000E540();
        v25 = v24;
        v34 = sub_1000DA1F0(v23, v24, v35);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, v35, v30, v22 + 12);
        swift_bridgeObjectRelease(v25);
        sub_1000076B4((uint64_t)v12, type metadata accessor for SettingsURLDestination);
        v20 = v33;
        v26 = v31;
        _os_log_impl((void *)&_mh_execute_header, v33, v21, "It has been 15 seconds since processing for %{public}s started. Assuming client controller didn't call completion. Cleaning up state so navigation isn't stuck.", v31, 0xCu);
        v27 = v32;
        swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v27, -1, -1);
        swift_slowDealloc(v26, -1, -1);
      }
      else
      {
        sub_1000076B4((uint64_t)v12, type metadata accessor for SettingsURLDestination);
      }

      v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      v28(v5, 1, 1, v8);
      v29 = v16 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel_pendingURLDestination;
      swift_beginAccess(v16 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel_pendingURLDestination, v35, 33, 0);
      sub_1000EC470((uint64_t)v5, v29);
      swift_endAccess(v35);
      v28(v5, 1, 1, v8);
      swift_beginAccess(v17, v35, 33, 0);
      sub_1000F1B58((uint64_t)v5, v17, (uint64_t *)&unk_10015C400);
      swift_endAccess(v35);
      sub_1000DE57C();
      sub_10000BA50((uint64_t)v5, (uint64_t *)&unk_10015C400);
      swift_release(v16);
      return sub_1000076B4((uint64_t)v14, type metadata accessor for SettingsURLDestination);
    }
  }
  return result;
}

uint64_t sub_1000E2DBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  objc_msgSend((id)objc_opt_self(PSURLControllerHandler), "registerApplicationURLStateProvider:", 0);
  swift_release(*(_QWORD *)(v0 + 16));
  v1 = v0 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__navigationPath;
  v2 = type metadata accessor for NavigationPath(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1000076B4(v0 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__detailContent, type metadata accessor for SettingsAppDetailContent);
  sub_10000BA50(v0 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel_pendingURLDestination, (uint64_t *)&unk_10015C400);
  sub_10000BA50(v0 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel_currentlyInProgressURLDestination, (uint64_t *)&unk_10015C400);
  swift_release(*(_QWORD *)(v0
                          + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__primarySettingsListScrollToItemSubject));
  swift_release(*(_QWORD *)(v0
                          + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel_cleanupCurrentlyInProgressURLDestinationSubject));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel_observer));
  sub_10000BA50(v0 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__horizontalSizeClass, (uint64_t *)&unk_10015C3F0);
  sub_10000BA50(v0 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__scenePhase, (uint64_t *)&unk_10015C630);
  v3 = v0 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel___observationRegistrar;
  v4 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return v0;
}

uint64_t sub_1000E2EF4()
{
  uint64_t v0;

  sub_1000E2DBC();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000E2F18()
{
  return type metadata accessor for SettingsAppNavigationModel(0);
}

uint64_t type metadata accessor for SettingsAppNavigationModel(uint64_t a1)
{
  uint64_t result;

  result = qword_10015C290;
  if (!qword_10015C290)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SettingsAppNavigationModel);
  return result;
}

void sub_1000E2F5C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  const char *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v14[0] = "\b";
  v2 = type metadata accessor for NavigationPath(319);
  if (v3 <= 0x3F)
  {
    v14[1] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for SettingsAppDetailContent(319);
    if (v5 <= 0x3F)
    {
      v14[2] = *(_QWORD *)(v4 - 8) + 64;
      sub_1000E30A8(319, &qword_10015C2A0, type metadata accessor for SettingsURLDestination);
      if (v7 <= 0x3F)
      {
        v15 = *(_QWORD *)(v6 - 8) + 64;
        v16 = v15;
        v17 = (char *)&value witness table for Builtin.NativeObject + 64;
        v18 = (char *)&value witness table for Builtin.NativeObject + 64;
        v19 = "\b";
        v20 = &unk_10011B018;
        sub_1000E30A8(319, &qword_10015C2A8, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass);
        if (v9 <= 0x3F)
        {
          v21 = *(_QWORD *)(v8 - 8) + 64;
          sub_1000E30A8(319, (unint64_t *)&unk_10015C2B0, (uint64_t (*)(uint64_t))&type metadata accessor for ScenePhase);
          if (v11 <= 0x3F)
          {
            v22 = *(_QWORD *)(v10 - 8) + 64;
            v12 = type metadata accessor for ObservationRegistrar(319);
            if (v13 <= 0x3F)
            {
              v23 = *(_QWORD *)(v12 - 8) + 64;
              swift_updateClassMetadata2(a1, 256, 12, v14, a1 + 80);
            }
          }
        }
      }
    }
  }
}

void sub_1000E30A8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Optional(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

id sub_1000E30F4(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  if (qword_100156CA0 != -1)
    swift_once(&qword_100156CA0, sub_10008BDE8);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100007808(v2, (uint64_t)qword_10015D298);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Finish Setup Completion called, dismissing.", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  return objc_msgSend(a1, "dismissViewControllerAnimated:completion:", 1, 0);
}

uint64_t sub_1000E31D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t KeyPath;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[3];

  v54 = 0;
  v56 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v50 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  v55 = (char *)&v46 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = type metadata accessor for SettingsAppDetailContent(0);
  __chkstk_darwin(v48);
  v49 = (uint64_t)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for UserInterfaceSizeClass(0);
  v51 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v47 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_100004FC8(&qword_10015C3E8);
  __chkstk_darwin(v52);
  v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004FC8((uint64_t *)&unk_10015C3F0);
  v9 = __chkstk_darwin(v8);
  v53 = (uint64_t)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v46 - v11;
  v13 = sub_100004FC8(&qword_10015C890);
  __chkstk_darwin(v13);
  v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100004FC8((uint64_t *)&unk_10015C400);
  __chkstk_darwin(v16);
  v18 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for SettingsURLDestination(0);
  v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56);
  v20(v18, 1, 1, v19);
  v21 = a1 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel_pendingURLDestination;
  swift_beginAccess(a1 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel_pendingURLDestination, v58, 33, 0);
  sub_1000EC470((uint64_t)v18, v21);
  swift_endAccess(v58);
  v20(v18, 1, 1, v19);
  v22 = a1 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel_currentlyInProgressURLDestination;
  swift_beginAccess(a1 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel_currentlyInProgressURLDestination, v58, 33, 0);
  sub_1000F1B58((uint64_t)v18, v22, (uint64_t *)&unk_10015C400);
  swift_endAccess(v58);
  sub_1000DE57C();
  sub_10000BA50((uint64_t)v18, (uint64_t *)&unk_10015C400);
  v23 = sub_1000DB598();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v50 + 56))(v15, 1, 1, v56);
  sub_1000F3614((uint64_t)v15);
  swift_release(v23);
  KeyPath = swift_getKeyPath(&unk_10011B098);
  v58[0] = a1;
  v25 = sub_100007828((unint64_t *)&qword_100158F78, type metadata accessor for SettingsAppNavigationModel, (uint64_t)&unk_10011B030);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v58, KeyPath, v25);
  v26 = KeyPath;
  v27 = v51;
  swift_release(v26);
  v28 = a1 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__horizontalSizeClass;
  swift_beginAccess(a1 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__horizontalSizeClass, v58, 0, 0);
  (*(void (**)(char *, _QWORD, uint64_t))(v27 + 104))(v12, enum case for UserInterfaceSizeClass.regular(_:), v4);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v12, 0, 1, v4);
  v29 = (uint64_t)&v7[*(int *)(v52 + 48)];
  sub_100018C00(v28, (uint64_t)v7, (uint64_t *)&unk_10015C3F0);
  sub_100018C00((uint64_t)v12, v29, (uint64_t *)&unk_10015C3F0);
  v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48);
  if (v30((uint64_t)v7, 1, v4) == 1)
  {
    sub_10000BA50((uint64_t)v12, (uint64_t *)&unk_10015C3F0);
    if (v30(v29, 1, v4) == 1)
    {
      sub_10000BA50((uint64_t)v7, (uint64_t *)&unk_10015C3F0);
LABEL_11:
      sub_1000DEEEC();
      goto LABEL_12;
    }
    goto LABEL_6;
  }
  sub_100018C00((uint64_t)v7, v53, (uint64_t *)&unk_10015C3F0);
  if (v30(v29, 1, v4) == 1)
  {
    sub_10000BA50((uint64_t)v12, (uint64_t *)&unk_10015C3F0);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v53, v4);
LABEL_6:
    sub_10000BA50((uint64_t)v7, &qword_10015C3E8);
    goto LABEL_7;
  }
  v34 = v47;
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 32))(v47, v29, v4);
  v35 = sub_100007828((unint64_t *)&unk_10015C410, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
  v36 = v53;
  v37 = dispatch thunk of static Equatable.== infix(_:_:)(v53, v34, v4, v35);
  v38 = *(void (**)(char *, uint64_t))(v27 + 8);
  v38(v34, v4);
  sub_10000BA50((uint64_t)v12, (uint64_t *)&unk_10015C3F0);
  v38((char *)v36, v4);
  sub_10000BA50((uint64_t)v7, (uint64_t *)&unk_10015C3F0);
  if ((v37 & 1) != 0)
    goto LABEL_11;
LABEL_7:
  if (qword_100156CF8 != -1)
    swift_once(&qword_100156CF8, sub_1000AC014);
  v31 = sub_100007808(v48, (uint64_t)qword_10015D398);
  v32 = v49;
  sub_1000076F0(v31, v49, type metadata accessor for SettingsAppDetailContent);
  v33 = swift_getKeyPath(&unk_10011B0C0);
  __chkstk_darwin(v33);
  *(&v46 - 2) = a1;
  *(&v46 - 1) = v32;
  v57 = a1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v57, v33, sub_1000EC528, &v46 - 4, (char *)&type metadata for () + 8, v25);
  swift_release(v33);
  sub_1000076B4(v32, type metadata accessor for SettingsAppDetailContent);
LABEL_12:
  v39 = swift_getKeyPath(&unk_10011B0E8);
  __chkstk_darwin(v39);
  *(&v46 - 2) = a1;
  *((_BYTE *)&v46 - 8) = 1;
  v57 = a1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v57, v39, sub_1000EC548, &v46 - 4, (char *)&type metadata for () + 8, v25);
  swift_release(v39);
  v40 = *(_QWORD *)(a1
                  + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__primarySettingsListScrollToItemSubject);
  v41 = qword_100156C30;
  swift_retain(v40);
  if (v41 != -1)
    swift_once(&qword_100156C30, sub_1000465F8);
  TaskLocal.get()(&v57);
  v42 = v57;
  v43 = sub_1000D8C18(v40, v57);
  swift_release(v40);
  swift_bridgeObjectRelease(v42);
  v44 = (uint64_t)v55;
  swift_storeEnumTagMultiPayload(v55, v56, 6);
  PassthroughSubject.send(_:)(v44);
  swift_release(v43);
  return sub_1000076B4(v44, type metadata accessor for PrimarySettingsListItemIdentifier);
}

void sub_1000E38FC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t Strong;
  char *v43;
  uint64_t KeyPath;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  _QWORD *v53;
  uint64_t (*v54)(char *, char *, uint64_t);
  char *v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t);
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(char *, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(uint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  os_log_type_t v86;
  uint8_t *v87;
  uint64_t v88;
  uint64_t v89;
  NSObject *v90;
  os_log_type_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(uint64_t, uint64_t);
  NSObject *v96;
  char *v97;
  void *v98;
  id v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  _BYTE *v103;
  uint64_t v104;
  uint64_t v105;
  _BYTE *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  NSObject *v111;
  os_log_type_t v112;
  uint8_t *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  _QWORD *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char v161;
  int64_t v162;
  char *v163;
  char *v164;
  unint64_t v165;
  unint64_t v166;
  __int128 v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  char v211;
  unint64_t v212;
  unint64_t v213;
  uint64_t v214;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v216;
  void (*v217)(uint64_t, char *, uint64_t);
  unint64_t v218;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  void (*v223)(char *, uint64_t);
  uint64_t (*v224)(char *, char *, uint64_t);
  char *v225;
  uint64_t v226;
  char *v227;
  uint64_t v228;
  int v229;
  uint64_t v230;
  char *v231;
  char *v232;
  char *v233;
  char *v234;
  char *v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  _QWORD *v244;
  uint64_t v245;
  uint64_t v246;
  char *v247;
  uint64_t v248;
  _QWORD *v249;
  uint64_t v250;
  char *v251;
  unint64_t v252;
  _QWORD *v253;
  uint64_t v254;
  uint64_t v255;
  char v256[8];
  char *v257;
  _OWORD v258[2];
  _QWORD v259[2];
  unint64_t v260;
  uint64_t v261;
  char v262[8];
  char v263[8];

  v250 = a4;
  v248 = a3;
  v8 = type metadata accessor for SettingsAppDetailContent(0);
  v242 = *(_QWORD *)(v8 - 8);
  v9 = __chkstk_darwin(v8);
  v253 = (uint64_t *)((char *)&v220 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v243 = v10;
  __chkstk_darwin(v9);
  v244 = (uint64_t *)((char *)&v220 - v11);
  v12 = sub_100004FC8(&qword_10015C890);
  __chkstk_darwin(v12);
  v14 = (char *)&v220 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for AnimationCompletionCriteria(0);
  v237 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v236 = (char *)&v220 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v238 = type metadata accessor for SettingsURLDestination(0);
  v245 = *(_QWORD *)(v238 - 8);
  v17 = __chkstk_darwin(v238);
  v252 = (unint64_t)&v220 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v241 = (uint64_t)&v220 - v20;
  v21 = __chkstk_darwin(v19);
  v231 = (char *)&v220 - v22;
  v246 = v23;
  __chkstk_darwin(v21);
  v230 = (uint64_t)&v220 - v24;
  v255 = type metadata accessor for URLQueryItem(0);
  v254 = *(_QWORD *)(v255 - 8);
  v25 = __chkstk_darwin(v255);
  v235 = (char *)&v220 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v25);
  v234 = (char *)&v220 - v28;
  v29 = __chkstk_darwin(v27);
  v233 = (char *)&v220 - v30;
  v31 = __chkstk_darwin(v29);
  v232 = (char *)&v220 - v32;
  v33 = __chkstk_darwin(v31);
  v247 = (char *)&v220 - v34;
  __chkstk_darwin(v33);
  v36 = (char *)&v220 - v35;
  v37 = sub_100004FC8(&qword_10015C510);
  __chkstk_darwin(v37);
  v39 = (char *)&v220 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for NavigationPath(0);
  v249 = *(_QWORD **)(v40 - 8);
  __chkstk_darwin(v40);
  v251 = (char *)&v220 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1 += 16;
  swift_beginAccess(a1, v263, 0, 0);
  Strong = swift_weakLoadStrong(a1);
  if (!Strong)
    return;
  v43 = (char *)Strong;
  v240 = v14;
  v229 = a2;
  v228 = v15;
  v239 = v40;
  if ((a2 & 1) != 0)
    goto LABEL_24;
  KeyPath = swift_getKeyPath(&unk_10011B138);
  v45 = &v43[OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel___observationRegistrar];
  *(_QWORD *)&v258[0] = v43;
  v226 = sub_100007828((unint64_t *)&qword_100158F78, type metadata accessor for SettingsAppNavigationModel, (uint64_t)&unk_10011B030);
  v227 = v45;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v258, KeyPath, v226);
  v46 = KeyPath;
  v47 = v239;
  swift_release(v46);
  v48 = &v43[OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__navigationPath];
  swift_beginAccess(&v43[OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__navigationPath], v262, 0, 0);
  v49 = v8;
  v50 = v39;
  v51 = a5;
  v52 = v43;
  v53 = v249;
  v54 = (uint64_t (*)(char *, char *, uint64_t))v249[2];
  v55 = v251;
  v225 = v48;
  v224 = v54;
  v56 = v54(v251, v48, v47);
  LOBYTE(v48) = NavigationPath.isEmpty.getter(v56);
  v57 = (void (*)(char *, uint64_t))v53[1];
  v43 = v52;
  a5 = v51;
  v58 = (uint64_t)v50;
  v223 = v57;
  v57(v55, v47);
  if ((v48 & 1) != 0)
    goto LABEL_24;
  v59 = *(_QWORD *)(v248 + *(int *)(v49 + 20));
  if (v59 >> 62 != 1)
    goto LABEL_24;
  v222 = v43;
  v60 = v59 & 0x3FFFFFFFFFFFFFFFLL;
  v61 = *(_QWORD *)(v250 + *(int *)(v238 + 24));
  v62 = *(_QWORD *)(v61 + 16);
  v221 = v59 & 0x3FFFFFFFFFFFFFFFLL;
  if (v62)
  {
    v63 = v61 + ((*(unsigned __int8 *)(v254 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v254 + 80));
    v64 = *(_QWORD *)(v254 + 72);
    v65 = v59 & 0x3FFFFFFFFFFFFFFFLL;
    v66 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v254 + 16);
    swift_bridgeObjectRetain_n(v61, 2);
    swift_retain(v65);
    v67 = v255;
    while (1)
    {
      v68 = v66(v36, v63, v67);
      v69 = URLQueryItem.name.getter(v68);
      v71 = v70;
      if (v69 == 1752457584 && v70 == 0xE400000000000000)
        break;
      v72 = _stringCompareWithSmolCheck(_:_:expecting:)(v69, v70, 1752457584, 0xE400000000000000, 0);
      swift_bridgeObjectRelease(v71);
      if ((v72 & 1) != 0)
        goto LABEL_14;
      v67 = v255;
      (*(void (**)(char *, uint64_t))(v254 + 8))(v36, v255);
      v63 += v64;
      if (!--v62)
      {
        swift_bridgeObjectRelease(v61);
        v73 = 1;
        v74 = v67;
        v47 = v239;
        v75 = v251;
        v76 = v221;
        v77 = v254;
        goto LABEL_15;
      }
    }
    swift_bridgeObjectRelease(0xE400000000000000);
LABEL_14:
    swift_bridgeObjectRelease(v61);
    v77 = v254;
    v74 = v255;
    (*(void (**)(uint64_t, char *, uint64_t))(v254 + 32))(v58, v36, v255);
    v73 = 0;
    v47 = v239;
    v75 = v251;
    v76 = v221;
  }
  else
  {
    swift_bridgeObjectRetain(v61);
    swift_retain(v60);
    v73 = 1;
    v76 = v60;
    v74 = v255;
    v77 = v254;
    v75 = v251;
  }
LABEL_15:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v77 + 56))(v58, v73, 1, v74);
  swift_bridgeObjectRelease(v61);
  v78 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v77 + 48))(v58, 1, v74);
  v79 = v77;
  v43 = v222;
  if ((_DWORD)v78 == 1)
  {
    swift_release(v76);
    sub_10000BA50(v58, &qword_10015C510);
LABEL_24:
    v103 = sub_1000DB598();
    v104 = (uint64_t)v240;
    sub_1000076F0(a5, (uint64_t)v240, type metadata accessor for PrimarySettingsListItemIdentifier);
    v105 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v105 - 8) + 56))(v104, 0, 1, v105);
    sub_1000F3614(v104);
    swift_release(v103);
    v106 = sub_1000DB598();
    v107 = swift_getKeyPath(&unk_10011B160);
    *(_QWORD *)&v258[0] = v106;
    v108 = sub_100007828(&qword_100158EF0, type metadata accessor for PrimarySettingsListModel, (uint64_t)&unk_10011B328);
    ObservationRegistrar.access<A, B>(_:keyPath:)(v258, v107, v108);
    swift_release(v107);
    LODWORD(v104) = v106[16];
    swift_release(v106);
    if ((_DWORD)v104 == 1)
    {
      if (qword_100156CA0 != -1)
        swift_once(&qword_100156CA0, sub_10008BDE8);
      v109 = type metadata accessor for Logger(0);
      v110 = sub_100007808(v109, (uint64_t)qword_10015D298);
      v111 = Logger.logObject.getter(v110);
      v112 = static os_log_type_t.fault.getter(v111);
      if (!os_log_type_enabled(v111, v112))
      {
        swift_release(v43);

        return;
      }
      v113 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v113 = 0;
      _os_log_impl((void *)&_mh_execute_header, v111, v112, "New selection was not selectable, ignoring URL", v113, 2u);
      swift_slowDealloc(v113, -1, -1);

      v114 = v43;
      goto LABEL_35;
    }
    v115 = swift_allocObject(&unk_10014DC60, 24, 7);
    swift_weakInit(v115 + 16, v43);
    v116 = (uint64_t)v244;
    sub_1000076F0(v248, (uint64_t)v244, type metadata accessor for SettingsAppDetailContent);
    v117 = v241;
    sub_1000076F0(v250, v241, type metadata accessor for SettingsURLDestination);
    sub_1000076F0(v116, (uint64_t)v253, type metadata accessor for SettingsAppDetailContent);
    sub_1000076F0(v117, v252, type metadata accessor for SettingsURLDestination);
    v118 = *(unsigned __int8 *)(v242 + 80);
    v119 = (v118 + 24) & ~v118;
    v120 = *(unsigned __int8 *)(v245 + 80);
    v121 = (v243 + v120 + v119) & ~v120;
    v122 = v121 + v246;
    v123 = swift_allocObject(&unk_10014DD78, v121 + v246 + 1, v118 | v120 | 7);
    *(_QWORD *)(v123 + 16) = v115;
    sub_100007670(v116, v123 + v119, type metadata accessor for SettingsAppDetailContent);
    sub_100007670(v117, v123 + v121, type metadata accessor for SettingsURLDestination);
    v124 = v229;
    *(_BYTE *)(v123 + v122) = v229 & 1;
    if ((v124 & 1) != 0)
    {
      swift_retain(v115);
LABEL_33:
      v132 = (uint64_t)v253;
      v133 = v252;
      sub_1000E7AC4(v115, (uint64_t)v253, v252, v124 & 1);
      swift_release(v123);
      swift_release(v115);
      swift_release(v43);
      sub_1000076B4(v133, type metadata accessor for SettingsURLDestination);
      sub_1000076B4(v132, type metadata accessor for SettingsAppDetailContent);
      return;
    }
    v125 = swift_getKeyPath(&unk_10011B138);
    *(_QWORD *)&v258[0] = v43;
    v126 = sub_100007828((unint64_t *)&qword_100158F78, type metadata accessor for SettingsAppNavigationModel, (uint64_t)&unk_10011B030);
    swift_retain(v115);
    ObservationRegistrar.access<A, B>(_:keyPath:)(v258, v125, v126);
    swift_release(v125);
    v127 = &v43[OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__navigationPath];
    swift_beginAccess(&v43[OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__navigationPath], v258, 0, 0);
    v128 = v249;
    v129 = v251;
    v130 = v239;
    v131 = ((uint64_t (*)(char *, char *, uint64_t))v249[2])(v251, v127, v239);
    LOBYTE(v127) = NavigationPath.isEmpty.getter(v131);
    ((void (*)(char *, uint64_t))v128[1])(v129, v130);
    if ((v127 & 1) != 0)
      goto LABEL_33;
    swift_release(v115);
    sub_1000076B4(v252, type metadata accessor for SettingsURLDestination);
    v134 = sub_1000076B4((uint64_t)v253, type metadata accessor for SettingsAppDetailContent);
    v259[0] = 0;
    v135 = v236;
    static AnimationCompletionCriteria.logicallyComplete.getter(v134);
    Transaction.addAnimationCompletion(criteria:_:)(v135, sub_1000F0C1C, v123);
    (*(void (**)(char *, uint64_t))(v237 + 8))(v135, v228);
    v136 = v259[0];
    v137 = swift_allocObject(&unk_10014DC60, 24, 7);
    v138 = swift_weakInit(v137 + 16, v43);
    __chkstk_darwin(v138);
    v139 = v250;
    *(&v220 - 2) = v137;
    *(&v220 - 1) = v139;
    v140 = swift_retain(v136);
    withTransaction<A>(_:_:)(v140, sub_1000F0C8C, &v220 - 4, (char *)&type metadata for () + 8);
    swift_release(v136);
    swift_release(v123);
    swift_release(v43);
    swift_release(v136);
    v114 = (char *)v137;
LABEL_35:
    swift_release(v114);
    return;
  }
  v220 = URLQueryItem.value.getter(v78);
  v81 = v80;
  v82 = *(void (**)(uint64_t, uint64_t))(v79 + 8);
  v82(v58, v255);
  if (!v81)
  {
    swift_release(v76);
    goto LABEL_24;
  }
  v253 = (_QWORD *)v81;
  if (qword_100156CA0 != -1)
LABEL_81:
    swift_once(&qword_100156CA0, sub_10008BDE8);
  v83 = type metadata accessor for Logger(0);
  v84 = sub_100007808(v83, (uint64_t)qword_10015D298);
  v85 = Logger.logObject.getter(v84);
  v86 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v85, v86))
  {
    v87 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v87 = 0;
    _os_log_impl((void *)&_mh_execute_header, v85, v86, "Navigation Stack is not empty.", v87, 2u);
    swift_slowDealloc(v87, -1, -1);
  }

  v88 = swift_allocObject(&unk_10014DDA0, 24, 7);
  *(_QWORD *)(v88 + 16) = PreferencesControllerRepresentableModel.makeViewControllerIfNeeded()(v88);
  v89 = swift_retain_n(v88, 2);
  v90 = Logger.logObject.getter(v89);
  v91 = static os_log_type_t.debug.getter();
  v92 = v91;
  if (os_log_type_enabled(v90, v91))
  {
    v93 = swift_slowAlloc(22, -1);
    LODWORD(v252) = v92;
    v94 = v93;
    v249 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v94 = 141558275;
    *(_QWORD *)&v258[0] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v258, (char *)v258 + 8, v94 + 4, v94 + 12);
    *(_WORD *)(v94 + 12) = 2113;
    swift_beginAccess(v88 + 16, v256, 0, 0);
    v95 = v82;
    v96 = v90;
    v97 = v75;
    v98 = *(void **)(v88 + 16);
    *(_QWORD *)&v258[0] = v98;
    v99 = v98;
    v47 = v239;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v258, (char *)v258 + 8, v94 + 14, v94 + 22);
    v100 = v249;
    *v249 = v98;
    v75 = v97;
    v90 = v96;
    v82 = v95;
    v101 = v250;
    swift_release_n(v88, 2);
    _os_log_impl((void *)&_mh_execute_header, v90, (os_log_type_t)v252, "Initial controllerToHandleURL is '%{private,mask.hash}@'", (uint8_t *)v94, 0x16u);
    v102 = sub_100004FC8(&qword_10015AF10);
    swift_arrayDestroy(v100, 1, v102);
    swift_slowDealloc(v100, -1, -1);
    swift_slowDealloc(v94, -1, -1);
  }
  else
  {
    swift_release_n(v88, 2);
    v101 = v250;
  }

  v261 = -1;
  v141 = (_QWORD *)swift_allocObject(&unk_10014DDC8, 48, 7);
  v142 = (uint64_t)v253;
  *(_QWORD *)&v258[0] = v220;
  *((_QWORD *)&v258[0] + 1) = v253;
  v259[0] = 47;
  v259[1] = 0xE100000000000000;
  v143 = sub_100008A5C();
  v144 = StringProtocol.components<A>(separatedBy:)(v259, &type metadata for String, &type metadata for String, v143, v143);
  swift_bridgeObjectRelease(v142);
  v145 = *(_QWORD *)(v144 + 16);
  v141[2] = v144;
  v244 = v141 + 2;
  v141[3] = v144 + 32;
  v141[4] = 0;
  v141[5] = (2 * v145) | 1;
  v146 = swift_getKeyPath(&unk_10011B138);
  *(_QWORD *)&v258[0] = v43;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v258, v146, v226);
  swift_release(v146);
  v147 = v224(v75, v225, v47);
  __chkstk_darwin(v147);
  v243 = v88;
  *(&v220 - 4) = v88;
  *(&v220 - 3) = (uint64_t)v141;
  v253 = v141;
  *(&v220 - 2) = (uint64_t)&v261;
  NavigationPath.withCollectionProxy(_:)(sub_1000F0CEC);
  v223(v75, v47);
  v148 = v238;
  v242 = swift_allocBox(v238);
  v150 = (_QWORD *)v149;
  sub_1000076F0(v101, v149, type metadata accessor for SettingsURLDestination);
  v151 = *(int *)(v148 + 24);
  v152 = *(_QWORD *)((char *)v150 + v151);
  v260 = v152;
  v153 = *(_QWORD *)(v152 + 16);
  v249 = v150;
  v248 = v151;
  if (v153)
  {
    v154 = (*(unsigned __int8 *)(v254 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v254 + 80);
    v47 = *(_QWORD *)(v254 + 72);
    v43 = *(char **)(v254 + 16);
    swift_bridgeObjectRetain_n(v152, 2);
    v155 = 0;
    v252 = v154;
    v156 = v255;
    while (1)
    {
      v157 = ((uint64_t (*)(char *, unint64_t, unint64_t))v43)(v247, v152 + v154, v156);
      v158 = URLQueryItem.name.getter(v157);
      v160 = v159;
      if (v158 == 1752457584 && v159 == 0xE400000000000000)
        break;
      v161 = _stringCompareWithSmolCheck(_:_:expecting:)(v158, v159, 1752457584, 0xE400000000000000, 0);
      swift_bridgeObjectRelease(v160);
      v156 = v255;
      v82((uint64_t)v247, v255);
      if ((v161 & 1) != 0)
        goto LABEL_47;
      ++v155;
      v154 += v47;
      if (v153 == v155)
      {
        swift_bridgeObjectRelease(v152);
        v162 = *(_QWORD *)(v260 + 16);
        v101 = v250;
        v75 = v251;
        goto LABEL_50;
      }
    }
    swift_bridgeObjectRelease(0xE400000000000000);
    v156 = v255;
    v82((uint64_t)v247, v255);
LABEL_47:
    swift_bridgeObjectRelease(v152);
    v162 = v155 + 1;
    if (__OFADD__(v155, 1))
      goto LABEL_91;
    v165 = v260;
    v166 = *(_QWORD *)(v260 + 16);
    v75 = v251;
    if (v162 != v166)
    {
      v204 = v47 + v154;
      v205 = v155 + 1;
      v206 = v233;
      while (v205 < v166)
      {
        v207 = ((uint64_t (*)(char *, unint64_t, unint64_t))v43)(v206, v165 + v204, v156);
        v208 = URLQueryItem.name.getter(v207);
        v210 = v209;
        if (v208 == 1752457584 && v209 == 0xE400000000000000)
        {
          swift_bridgeObjectRelease(0xE400000000000000);
          v156 = v255;
          v82((uint64_t)v206, v255);
        }
        else
        {
          v211 = _stringCompareWithSmolCheck(_:_:expecting:)(v208, v209, 1752457584, 0xE400000000000000, 0);
          swift_bridgeObjectRelease(v210);
          v156 = v255;
          v82((uint64_t)v206, v255);
          if ((v211 & 1) == 0)
          {
            if (v205 != v155)
            {
              if ((v155 & 0x8000000000000000) != 0)
                goto LABEL_86;
              v212 = v260;
              v213 = *(_QWORD *)(v260 + 16);
              if (v155 >= v213)
                goto LABEL_87;
              v214 = v255;
              ((void (*)(char *, unint64_t, uint64_t))v43)(v234, v260 + v252 + v155 * v47, v255);
              if (v205 >= v213)
                goto LABEL_88;
              ((void (*)(char *, unint64_t, uint64_t))v43)(v235, v212 + v204, v214);
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v212);
              v260 = v212;
              v75 = v251;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                v212 = sub_1000EEFA8(v212);
                v260 = v212;
              }
              v206 = v233;
              if (v155 >= *(_QWORD *)(v212 + 16))
                goto LABEL_89;
              v216 = v212 + v252 + v155 * v47;
              v217 = *(void (**)(uint64_t, char *, uint64_t))(v254 + 40);
              v218 = v255;
              v217(v216, v235, v255);
              if (v205 >= *(_QWORD *)(v260 + 16))
                goto LABEL_90;
              v217(v260 + v204, v234, v218);
              v156 = v218;
            }
            if (__OFADD__(v155++, 1))
              goto LABEL_80;
          }
        }
        v162 = v205 + 1;
        if (__OFADD__(v205, 1))
          goto LABEL_79;
        v165 = v260;
        v166 = *(_QWORD *)(v260 + 16);
        ++v205;
        v204 += v47;
        if (v162 == v166)
          goto LABEL_49;
      }
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
      goto LABEL_81;
    }
LABEL_49:
    v153 = v155;
    v101 = v250;
LABEL_50:
    v164 = v232;
    v43 = v222;
    v47 = v239;
    v163 = v231;
    if (v162 >= v153)
      goto LABEL_51;
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain(v152);
    v162 = 0;
    v163 = v231;
    v164 = v232;
LABEL_51:
    sub_1000EF6F0(v153, v162);
    swift_beginAccess(v244, v259, 0, 0);
    v167 = *((_OWORD *)v253 + 2);
    v258[0] = *((_OWORD *)v253 + 1);
    v258[1] = v167;
    v168 = *(_QWORD *)&v258[0];
    swift_unknownObjectRetain(*(_QWORD *)&v258[0]);
    v169 = sub_100004FC8(&qword_10015C548);
    v170 = sub_100007868((unint64_t *)&unk_10015C550, &qword_10015C548, (uint64_t)&protocol conformance descriptor for ArraySlice<A>);
    v171 = BidirectionalCollection<>.joined(separator:)(47, 0xE100000000000000, v169, v170);
    v173 = v172;
    swift_unknownObjectRelease(v168);
    URLQueryItem.init(name:value:)(1752457584, 0xE400000000000000, v171, v173);
    swift_bridgeObjectRelease(v173);
    v156 = v260;
    if ((swift_isUniquelyReferenced_nonNull_native(v260) & 1) != 0)
      goto LABEL_52;
  }
  v156 = sub_10005270C(0, *(_QWORD *)(v156 + 16) + 1, 1, v156);
LABEL_52:
  v175 = *(_QWORD *)(v156 + 16);
  v174 = *(_QWORD *)(v156 + 24);
  if (v175 >= v174 >> 1)
    v156 = sub_10005270C(v174 > 1, v175 + 1, 1, v156);
  *(_QWORD *)(v156 + 16) = v175 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v254 + 32))(v156+ ((*(unsigned __int8 *)(v254 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v254 + 80))+ *(_QWORD *)(v254 + 72) * v175, v164, v255);
  v260 = v156;
  v176 = *(_QWORD *)((char *)v249 + v248);
  *(_QWORD *)((char *)v249 + v248) = v156;
  swift_bridgeObjectRetain(v156);
  swift_bridgeObjectRelease(v176);
  v177 = swift_getKeyPath(&unk_10011B138);
  *(_QWORD *)&v258[0] = v43;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v258, v177, v226);
  swift_release(v177);
  v178 = v224(v75, v225, v47);
  v179 = NavigationPath.count.getter(v178);
  v223(v75, v47);
  v180 = v261 + 1;
  if (__OFADD__(v261, 1))
  {
    __break(1u);
  }
  else
  {
    v255 = v179 - v180;
    if (!__OFSUB__(v179, v180))
    {
      v181 = (uint64_t)v163;
      v182 = swift_allocObject(&unk_10014DC60, 24, 7);
      swift_weakInit(v182 + 16, v43);
      v183 = v230;
      sub_1000076F0(v101, v230, type metadata accessor for SettingsURLDestination);
      sub_1000076F0(v183, v181, type metadata accessor for SettingsURLDestination);
      v184 = *(unsigned __int8 *)(v245 + 80);
      v185 = (v184 + 24) & ~v184;
      v186 = (v246 + v185 + 7) & 0xFFFFFFFFFFFFFFF8;
      v187 = (v186 + 15) & 0xFFFFFFFFFFFFFFF8;
      v188 = swift_allocObject(&unk_10014DDF0, v187 + 8, v184 | 7);
      *(_QWORD *)(v188 + 16) = v182;
      sub_100007670(v183, v188 + v185, type metadata accessor for SettingsURLDestination);
      v189 = v242;
      *(_QWORD *)(v188 + v186) = v242;
      v190 = v243;
      *(_QWORD *)(v188 + v187) = v243;
      if (v255 <= 0)
      {
        v203 = v260;
        swift_retain(v190);
        swift_retain(v189);
        swift_retain(v182);
        swift_bridgeObjectRelease(v203);
        sub_1000E6148(v182, v181, v189, v190);
        swift_release(v221);
        swift_release(v188);
        swift_release(v182);
        swift_release(v43);
        sub_1000076B4(v181, type metadata accessor for SettingsURLDestination);
        swift_release(v189);
        swift_release(v253);
        v114 = (char *)v190;
      }
      else
      {
        swift_retain(v190);
        swift_retain(v189);
        v191 = sub_1000076B4(v181, type metadata accessor for SettingsURLDestination);
        *(_QWORD *)&v258[0] = 0;
        v192 = v236;
        static AnimationCompletionCriteria.logicallyComplete.getter(v191);
        Transaction.addAnimationCompletion(criteria:_:)(v192, sub_1000F0F24, v188);
        (*(void (**)(char *, uint64_t))(v237 + 8))(v192, v228);
        v193 = swift_getKeyPath(&unk_10011B138);
        v257 = v43;
        ObservationRegistrar.access<A, B>(_:keyPath:)(&v257, v193, v226);
        swift_release(v193);
        v194 = v239;
        v195 = v224(v75, v225, v239);
        v196 = NavigationPath.count.getter(v195);
        v223(v75, v194);
        v197 = v255;
        Transaction.disablesAnimations.setter(v255 == v196);
        v198 = *(_QWORD *)&v258[0];
        v199 = v190;
        v200 = swift_allocObject(&unk_10014DC60, 24, 7);
        v201 = swift_weakInit(v200 + 16, v43);
        __chkstk_darwin(v201);
        *(&v220 - 2) = v200;
        *(&v220 - 1) = v197;
        v202 = swift_retain(v198);
        withTransaction<A>(_:_:)(v202, sub_1000F0F74, &v220 - 4, (char *)&type metadata for () + 8);
        swift_release(v221);
        swift_release(v198);
        swift_release(v188);
        swift_release(v43);
        swift_release(v198);
        swift_bridgeObjectRelease(v260);
        swift_release(v200);
        swift_release(v189);
        swift_release(v253);
        v114 = (char *)v199;
      }
      goto LABEL_35;
    }
  }
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
}

uint64_t sub_1000E5234(uint64_t a1, void **a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t *, _QWORD);
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  __int128 *v36;
  uint64_t v37;
  char v38;
  void (*v39)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  void *v41;
  void *v42;
  id v43;
  void *v44;
  id v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSString v51;
  id v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint64_t v62;
  _QWORD *v63;
  void **v64;
  char *v65;
  void *v66;
  id v67;
  void **v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  int64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  os_log_type_t v81;
  uint64_t v82;
  _QWORD *v83;
  void **v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  void *v88;
  id v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  NSObject *v94;
  os_log_type_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t result;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  void **v107;
  void *v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  __int128 v115;
  char *v116;
  _QWORD *v117;
  __int128 *v118;
  uint64_t v119;
  void (*v120)(char *, char *, uint64_t);
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  char *v126;
  uint64_t *v127;
  uint64_t v128;
  unint64_t v129;
  _QWORD *v130;
  char *v131;
  void **v132;
  __int128 *v133;
  uint64_t v134;
  __int128 v135;
  uint64_t v136;
  char *v137;
  void **v138;
  char *v139;
  void *v140;
  __int128 v141[3];
  uint64_t v142;
  unint64_t v143;
  __int128 v144;
  __int128 v145;
  _QWORD v146[7];
  uint64_t v147;
  char v148[24];
  char v149[24];
  char v150[24];
  char v151[24];
  uint64_t v152;
  _QWORD v153[7];

  v127 = a4;
  v139 = (char *)a1;
  v6 = sub_100004FC8(&qword_10015C560);
  __chkstk_darwin(v6);
  v124 = (char *)&v113 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = type metadata accessor for PreferencesControllerRecipe(0);
  v134 = *(_QWORD *)(v125 - 8);
  __chkstk_darwin(v125);
  v137 = (char *)&v113 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for NavigationPath.CollectionProxy(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v113 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100004FC8(&qword_10015C568);
  __chkstk_darwin(v13);
  v15 = (char *)&v113 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100004FC8(&qword_10015C570);
  __chkstk_darwin(v16);
  v18 = (char *)&v113 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = a2;
  a2 += 2;
  v120 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v120(v15, v139, v9);
  v122 = v10;
  v19 = v15;
  v20 = v9;
  v21 = v134;
  (*(void (**)(char *, char *, unint64_t))(v10 + 32))(v12, v19, v20);
  v22 = sub_100007828(&qword_10015C578, (uint64_t (*)(uint64_t))&type metadata accessor for NavigationPath.CollectionProxy, (uint64_t)&protocol conformance descriptor for NavigationPath.CollectionProxy);
  v121 = v12;
  dispatch thunk of Sequence.makeIterator()(v20, v22);
  v119 = *(int *)(v16 + 36);
  *(_QWORD *)&v18[v119] = 0;
  v23 = *(int *)(sub_100004FC8(&qword_10015C580) + 36);
  v139 = v18;
  v24 = &v18[v23];
  swift_beginAccess(a3 + 2, v151, 0, 0);
  swift_beginAccess(a2, v150, 0, 0);
  swift_beginAccess(a3 + 2, v149, 0, 0);
  v114 = a3 + 2;
  v25 = (uint64_t)v124;
  swift_beginAccess(a3 + 2, v148, 1, 0);
  v132 = a2;
  swift_beginAccess(a2, &v147, 1, 0);
  v26 = sub_100007828(&qword_10015C588, (uint64_t (*)(uint64_t))&type metadata accessor for NavigationPath.CollectionProxy, (uint64_t)&protocol conformance descriptor for NavigationPath.CollectionProxy);
  v117 = &v146[1];
  v118 = (__int128 *)((char *)v141 + 8);
  v133 = (__int128 *)v153;
  v116 = (char *)&v144 + 8;
  v131 = (char *)&type metadata for Any + 8;
  *(_QWORD *)&v27 = 136315651;
  v115 = v27;
  v28 = v125;
  v129 = v20;
  v130 = a3;
  v128 = v26;
  v126 = v24;
  while (1)
  {
    v29 = *(_QWORD *)v24;
    dispatch thunk of Collection.endIndex.getter(&v142, v20, v26);
    if (v29 == v142)
    {
      memset(v146, 0, 48);
    }
    else
    {
      v30 = (uint64_t)v139;
      v31 = (void (*)(uint64_t *, _QWORD))dispatch thunk of Collection.subscript.read(&v142, v24, v20, v26);
      sub_10003CE00(v32, (uint64_t)v141);
      v31(&v142, 0);
      v33 = v121;
      v120(v121, (char *)v30, v20);
      dispatch thunk of Collection.formIndex(after:)(v24, v20, v26);
      (*(void (**)(char *, unint64_t))(v122 + 8))(v33, v20);
      sub_10003CDE8(v141, (uint64_t)&v144);
      v34 = v119;
      v35 = *(_QWORD *)(v30 + v119);
      v36 = v118;
      sub_10003CDE8(&v144, (uint64_t)v118);
      if (__OFADD__(v35, 1))
        goto LABEL_59;
      *(_QWORD *)&v139[v34] = v35 + 1;
      v146[0] = v35;
      sub_10003CDE8(v36, (uint64_t)v117);
    }
    sub_10007E96C((uint64_t)v146, (uint64_t)&v152, &qword_10015C590);
    if (!v153[3])
      return sub_10000BA50((uint64_t)v139, &qword_10015C570);
    v37 = v152;
    sub_10003CDE8(v133, (uint64_t)v146);
    sub_10003CE00((uint64_t)v146, (uint64_t)v141);
    v20 = sub_100004FC8(&qword_10015C598);
    v38 = swift_dynamicCast(v25, v141, v20, v28, 6);
    v39 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 56);
    if ((v38 & 1) == 0)
    {
      v39(v25, 1, 1, v28);
      sub_10000BA50(v25, &qword_10015C560);
      goto LABEL_38;
    }
    v39(v25, 0, 1, v28);
    v40 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 32))(v137, v25, v28);
    v41 = (void *)PreferencesControllerRecipe.viewControllerIfLoaded.getter(v40);
    if (!v41)
      goto LABEL_36;
    v42 = v41;
    v43 = objc_msgSend(v41, "specifier");
    if (!v43
      || (v44 = v43, v45 = objc_msgSend(v43, "identifier"), v44, !v45))
    {

LABEL_36:
      (*(void (**)(char *, uint64_t))(v21 + 8))(v137, v28);
LABEL_38:
      if (qword_100156CA0 == -1)
        goto LABEL_39;
      goto LABEL_61;
    }
    v136 = v37;
    v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
    v20 = v47;

    v48 = a3[4];
    v49 = a3[5] >> 1;
    if (v48 == v49)
      goto LABEL_44;
    if (v48 >= v49)
    {
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      swift_once(&qword_100156CA0, sub_10008BDE8);
LABEL_39:
      v78 = type metadata accessor for Logger(0);
      sub_100007808(v78, (uint64_t)qword_10015D298);
      sub_10003CE00((uint64_t)v146, (uint64_t)v141);
      v79 = swift_retain_n(v138, 2);
      v80 = Logger.logObject.getter(v79);
      v81 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v80, v81))
      {
        v82 = swift_slowAlloc(42, -1);
        v83 = (_QWORD *)swift_slowAlloc(8, -1);
        v137 = (char *)swift_slowAlloc(32, -1);
        v142 = (uint64_t)v137;
        *(_DWORD *)v82 = 141558787;
        *(_QWORD *)&v144 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, (char *)&v144 + 8, v82 + 4, v82 + 12);
        *(_WORD *)(v82 + 12) = 2081;
        v84 = v138;
        sub_10003CE00((uint64_t)v141, (uint64_t)&v144);
        v85 = String.init<A>(describing:)(&v144, v20);
        v87 = v86;
        *(_QWORD *)&v144 = sub_1000DA1F0(v85, v86, &v142);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, (char *)&v144 + 8, v82 + 14, v82 + 22);
        swift_bridgeObjectRelease(v87);
        sub_100005474(v141);
        *(_WORD *)(v82 + 22) = 2160;
        *(_QWORD *)&v144 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, (char *)&v144 + 8, v82 + 24, v82 + 32);
        *(_WORD *)(v82 + 32) = 2113;
        swift_beginAccess(v132, &v144, 0, 0);
        v88 = v84[2];
        v140 = v88;
        v89 = v88;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, v141, v82 + 34, v82 + 42);
        *v83 = v88;
        swift_release_n(v84, 2);
        _os_log_impl((void *)&_mh_execute_header, v80, v81, "Item '%{private,mask.hash}s' not valid, controllerToHandleURL is '%{private,mask.hash}@'", (uint8_t *)v82, 0x2Au);
        v90 = sub_100004FC8(&qword_10015AF10);
        swift_arrayDestroy(v83, 1, v90);
        swift_slowDealloc(v83, -1, -1);
        v91 = v137;
        swift_arrayDestroy(v137, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v91, -1, -1);
        swift_slowDealloc(v82, -1, -1);

      }
      else
      {
        swift_release_n(v138, 2);

        sub_100005474(v141);
      }
      goto LABEL_53;
    }
    v50 = *(_QWORD *)(a3[3] + 16 * v48 + 8);
    swift_bridgeObjectRetain(v50);
    v51 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v50);
    v52 = (id)SFObjectAndOffsetForURLPair(v51);

    v53 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v52, &type metadata for AnyHashable, v131, &protocol witness table for AnyHashable);
    v142 = 0x7463656A626FLL;
    v143 = 0xE600000000000000;
    AnyHashable.init<A>(_:)(v141, &v142, &type metadata for String, &protocol witness table for String);
    if (*(_QWORD *)(v53 + 16) && (v54 = sub_1000DA95C((uint64_t)v141), (v55 & 1) != 0))
    {
      sub_1000148AC(*(_QWORD *)(v53 + 56) + 32 * v54, (uint64_t)&v144);
    }
    else
    {
      v144 = 0u;
      v145 = 0u;
    }
    swift_bridgeObjectRelease(v53);
    sub_100014878((uint64_t)v141);
    if (!*((_QWORD *)&v145 + 1))
    {
      sub_10000BA50((uint64_t)&v144, &qword_10015BA90);
      goto LABEL_44;
    }
    if ((swift_dynamicCast(&v142, &v144, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
      goto LABEL_44;
    v57 = v142;
    v56 = v143;
    if ((v142 != v46 || v143 != v20)
      && (_stringCompareWithSmolCheck(_:_:expecting:)(v142, v143, v46, v20, 0) & 1) == 0)
    {
      break;
    }
    swift_bridgeObjectRelease(v20);
    if (qword_100156CA0 != -1)
      swift_once(&qword_100156CA0, sub_10008BDE8);
    v58 = type metadata accessor for Logger(0);
    sub_100007808(v58, (uint64_t)qword_10015D298);
    swift_retain_n(v138, 2);
    v59 = swift_bridgeObjectRetain(v56);
    v60 = Logger.logObject.getter(v59);
    v61 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v60, v61))
    {
      v62 = swift_slowAlloc(32, -1);
      v63 = (_QWORD *)swift_slowAlloc(8, -1);
      v123 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v141[0] = v123;
      *(_DWORD *)v62 = v115;
      v64 = v138;
      *(_QWORD *)&v135 = v42;
      swift_bridgeObjectRetain(v56);
      *(_QWORD *)&v144 = sub_1000DA1F0(v57, v56, (uint64_t *)v141);
      v65 = v116;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, v116, v62 + 4, v62 + 12);
      swift_bridgeObjectRelease_n(v56, 3);
      *(_WORD *)(v62 + 12) = 2160;
      *(_QWORD *)&v144 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, v65, v62 + 14, v62 + 22);
      *(_WORD *)(v62 + 22) = 2113;
      v66 = v64[2];
      *(_QWORD *)&v144 = v66;
      v67 = v66;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, v65, v62 + 24, v62 + 32);
      *v63 = v66;
      v42 = (void *)v135;
      v68 = v64;
      v25 = (uint64_t)v124;
      swift_release_n(v68, 2);
      _os_log_impl((void *)&_mh_execute_header, v60, v61, "Identifier '%s' is a match to path component, new controllerToHandleURL is '%{private,mask.hash}@'", (uint8_t *)v62, 0x20u);
      v69 = sub_100004FC8(&qword_10015AF10);
      swift_arrayDestroy(v63, 1, v69);
      v70 = v63;
      v28 = v125;
      swift_slowDealloc(v70, -1, -1);
      v71 = v123;
      swift_arrayDestroy(v123, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v71, -1, -1);
      swift_slowDealloc(v62, -1, -1);

    }
    else
    {

      swift_release_n(v138, 2);
      swift_bridgeObjectRelease_n(v56, 2);
    }
    v21 = v134;
    v26 = v128;
    v20 = v129;
    a3 = v130;
    v72 = v130[4];
    v73 = v130[5];
    v74 = v73 >> 1;
    if (__OFSUB__(v73 >> 1, v72))
      goto LABEL_55;
    v75 = v130[4];
    if (v73 >> 1 != v72)
    {
      v75 = v72 + 1;
      if (__OFADD__(v72, 1))
        goto LABEL_60;
      if (v74 < v75)
        goto LABEL_56;
      if (v75 < v72)
        goto LABEL_57;
    }
    if (v74 < v72)
      goto LABEL_58;
    v135 = *((_OWORD *)v130 + 1);
    swift_unknownObjectRetain(v135);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v137, v28);
    sub_100005474(v146);
    v76 = a3[2];
    *((_OWORD *)a3 + 1) = v135;
    a3[4] = v75;
    a3[5] = v73;
    swift_unknownObjectRelease(v76);
    v77 = *v132;
    *v132 = v42;

    v24 = v126;
    *v127 = v136;
  }
  swift_bridgeObjectRelease(v56);
  a3 = v130;
LABEL_44:
  if (qword_100156CA0 != -1)
    swift_once(&qword_100156CA0, sub_10008BDE8);
  v92 = type metadata accessor for Logger(0);
  sub_100007808(v92, (uint64_t)qword_10015D298);
  swift_retain_n(v138, 2);
  swift_retain_n(a3, 2);
  v93 = swift_bridgeObjectRetain(v20);
  v94 = Logger.logObject.getter(v93);
  v95 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v94, v95))
  {
    v96 = swift_slowAlloc(42, -1);
    *(_QWORD *)&v135 = swift_slowAlloc(8, -1);
    v136 = swift_slowAlloc(64, -1);
    v142 = v136;
    *(_DWORD *)v96 = 136315907;
    v97 = a3;
    swift_bridgeObjectRetain(v20);
    *(_QWORD *)&v141[0] = sub_1000DA1F0(v46, v20, &v142);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v141, (char *)v141 + 8, v96 + 4, v96 + 12);
    swift_bridgeObjectRelease_n(v20, 3);
    *(_WORD *)(v96 + 12) = 2080;
    swift_beginAccess(v114, v141, 0, 0);
    v98 = 0;
    result = 0;
    v100 = v97[4];
    v101 = v97[5] >> 1;
    if (v100 != v101)
    {
      if (v100 >= v101)
      {
        __break(1u);
        return result;
      }
      v97 = v130;
      v102 = (uint64_t *)(v130[3] + 16 * v100);
      v98 = *v102;
      result = swift_bridgeObjectRetain(v102[1]);
    }
    *(_QWORD *)&v144 = v98;
    *((_QWORD *)&v144 + 1) = result;
    v103 = sub_100004FC8(&qword_10015C960);
    v104 = String.init<A>(describing:)(&v144, v103);
    v106 = v105;
    *(_QWORD *)&v144 = sub_1000DA1F0(v104, v105, &v142);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, (char *)&v144 + 8, v96 + 14, v96 + 22);
    swift_release_n(v97, 2);
    swift_bridgeObjectRelease(v106);
    *(_WORD *)(v96 + 22) = 2160;
    *(_QWORD *)&v144 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, (char *)&v144 + 8, v96 + 24, v96 + 32);
    *(_WORD *)(v96 + 32) = 2113;
    swift_beginAccess(v132, &v144, 0, 0);
    v107 = v138;
    v108 = v138[2];
    v140 = v108;
    v109 = v108;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, v141, v96 + 34, v96 + 42);
    v110 = v135;
    *(_QWORD *)v135 = v108;
    swift_release_n(v107, 2);
    _os_log_impl((void *)&_mh_execute_header, v94, v95, "Identifier '%s' does not match '%s,  controllerToHandleURL is '%{private,mask.hash}@'", (uint8_t *)v96, 0x2Au);
    v111 = sub_100004FC8(&qword_10015AF10);
    swift_arrayDestroy(v110, 1, v111);
    swift_slowDealloc(v110, -1, -1);
    v112 = v136;
    swift_arrayDestroy(v136, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v112, -1, -1);
    swift_slowDealloc(v96, -1, -1);

    (*(void (**)(char *, uint64_t))(v134 + 8))(v137, v125);
  }
  else
  {
    swift_bridgeObjectRelease_n(v20, 2);
    swift_release_n(a3, 2);
    swift_release_n(v138, 2);

    (*(void (**)(char *, uint64_t))(v21 + 8))(v137, v125);
  }
LABEL_53:
  sub_100005474(v146);
  return sub_10000BA50((uint64_t)v139, &qword_10015C570);
}

uint64_t sub_1000E6148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  id *v38;
  uint64_t v39;
  _BYTE v40[16];
  uint64_t v41[3];
  char v42[24];

  v8 = type metadata accessor for SettingsURLDestination(0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v36 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v36 - v15;
  a1 += 16;
  v17 = swift_projectBox(a3);
  swift_beginAccess(a1, v42, 0, 0);
  result = swift_weakLoadStrong(a1);
  if (result)
  {
    v19 = result;
    if (qword_100156CA0 != -1)
      swift_once(&qword_100156CA0, sub_10008BDE8);
    v38 = (id *)(a4 + 16);
    v20 = type metadata accessor for Logger(0);
    sub_100007808(v20, (uint64_t)qword_10015D298);
    sub_1000076F0(a2, (uint64_t)v16, type metadata accessor for SettingsURLDestination);
    v21 = sub_1000076F0(a2, (uint64_t)v14, type metadata accessor for SettingsURLDestination);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = swift_slowAlloc(42, -1);
      v37 = v17;
      v25 = v24;
      v36 = swift_slowAlloc(64, -1);
      v41[0] = v36;
      *(_DWORD *)v25 = 141558787;
      v39 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v25 + 4, v25 + 12);
      *(_WORD *)(v25 + 12) = 2081;
      v26 = sub_10000E540();
      v28 = v27;
      v39 = sub_1000DA1F0(v26, v27, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v25 + 14, v25 + 22);
      swift_bridgeObjectRelease(v28);
      sub_1000076B4((uint64_t)v16, type metadata accessor for SettingsURLDestination);
      *(_WORD *)(v25 + 22) = 2160;
      v39 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v25 + 24, v25 + 32);
      *(_WORD *)(v25 + 32) = 2081;
      v29 = sub_10000E540();
      v31 = v30;
      v39 = sub_1000DA1F0(v29, v30, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v25 + 34, v25 + 42);
      swift_bridgeObjectRelease(v31);
      sub_1000076B4((uint64_t)v14, type metadata accessor for SettingsURLDestination);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Processing URL with possibly modified URL Destination (was '%{private,mask.hash}s', is now '%{private,mask.hash}s').", (uint8_t *)v25, 0x2Au);
      v32 = v36;
      swift_arrayDestroy(v36, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1, -1);
      v33 = v25;
      v17 = v37;
      swift_slowDealloc(v33, -1, -1);
    }
    else
    {
      sub_1000076B4((uint64_t)v16, type metadata accessor for SettingsURLDestination);
      sub_1000076B4((uint64_t)v14, type metadata accessor for SettingsURLDestination);
    }

    swift_beginAccess(v17, v41, 0, 0);
    sub_1000076F0(v17, (uint64_t)v11, type metadata accessor for SettingsURLDestination);
    v34 = v38;
    swift_beginAccess(v38, &v39, 0, 0);
    v35 = (char *)*v34;
    sub_1000E64F8((uint64_t)v11, v35, 1);

    swift_release(v19);
    return sub_1000076B4((uint64_t)v11, type metadata accessor for SettingsURLDestination);
  }
  return result;
}

uint64_t sub_1000E64F8(uint64_t a1, char *a2, int a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  _BOOL8 v45;
  uint64_t v46;
  char v47;
  unint64_t v48;
  char v49;
  unint64_t v50;
  char v51;
  char v52;
  char v53;
  uint64_t v54;
  uint64_t (*v55)();
  __int128 v56;
  uint64_t *v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  char v74;
  unint64_t v75;
  char v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  unint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  NSObject *v95;
  os_log_type_t v96;
  uint8_t *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  char *v101;
  NSObject *v102;
  os_log_type_t v103;
  uint8_t *v104;
  uint64_t v105;
  uint64_t ObjectType;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  char v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  NSObject *v117;
  os_log_type_t v118;
  uint8_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  Class v127;
  void *v128;
  uint64_t v129;
  uint64_t result;
  uint64_t v131;
  void *v132;
  char *v133;
  NSObject *v134;
  os_log_type_t v135;
  uint8_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  Class isa;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  void *v151;
  char *v152;
  NSString v153;
  char *v154;
  NSString v155;
  uint64_t v156;
  char *v157;
  NSObject *v158;
  os_log_type_t v159;
  uint8_t *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t (*v178)(char *, char *, uint64_t);
  _QWORD *v179;
  uint64_t v180;
  _QWORD *v181;
  unsigned __int8 v182;
  __int128 v183;
  __int128 v184;
  uint64_t (*v185)();
  __objc2_prot *v186;
  __objc2_prot *v187;
  __int128 aBlock;
  __int128 v189;
  uint64_t (*v190)();
  uint64_t v191;

  v167 = a3;
  v174 = a2;
  v175 = type metadata accessor for URLQueryItem(0);
  v5 = *(_QWORD *)(v175 - 8);
  __chkstk_darwin(v175);
  v7 = (char *)&v166 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SettingsURLDestination(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = __chkstk_darwin(v8);
  v168 = (uint64_t)&v166 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v166 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v166 - v15;
  v17 = swift_allocObject(&unk_10014DC60, 24, 7);
  swift_weakInit(v17 + 16, v3);
  sub_1000076F0(a1, (uint64_t)v16, type metadata accessor for SettingsURLDestination);
  v172 = v14;
  v18 = (uint64_t)v14;
  v19 = v174;
  sub_1000076F0((uint64_t)v16, v18, type metadata accessor for SettingsURLDestination);
  v20 = *(unsigned __int8 *)(v9 + 80);
  v21 = (v20 + 16) & ~v20;
  v22 = (v10 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  v23 = swift_allocObject(&unk_10014DC88, v22 + 8, v20 | 7);
  sub_100007670((uint64_t)v16, v23 + v21, type metadata accessor for SettingsURLDestination);
  v173 = v23;
  *(_QWORD *)(v23 + v22) = v17;
  v171 = v17;
  swift_retain(v17);
  objc_msgSend(v19, "dismissViewControllerAnimated:completion:", 1, 0);
  v169 = v8;
  v24 = *(int *)(v8 + 24);
  v170 = a1;
  v25 = *(_QWORD *)(a1 + v24);
  v26 = *(_QWORD *)(v25 + 16);
  if (!v26)
  {
    swift_bridgeObjectRetain(v25);
    v27 = &_swiftEmptyDictionarySingleton;
LABEL_25:
    v181 = v27;
    swift_bridgeObjectRelease(v25);
    LOBYTE(v183) = 1;
    AnyHashable.init<A>(_:)(&aBlock, &v183, &type metadata for Bool, &protocol witness table for Bool);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v27);
    *(_QWORD *)&v183 = v27;
    sub_1000EDE18((uint64_t)&aBlock, 0x6574616D696E61, 0xE700000000000000, isUniquelyReferenced_nonNull_native);
    v181 = (_QWORD *)v183;
    swift_bridgeObjectRelease(0x8000000000000000);
    v65 = v170;
    v66 = v168;
    sub_1000076F0(v170, v168, type metadata accessor for SettingsURLDestination);
    v67 = sub_100007828(&qword_10015C430, type metadata accessor for SettingsURLDestination, (uint64_t)&unk_100114480);
    v68 = v169;
    AnyHashable.init<A>(_:)(&aBlock, v66, v169, v67);
    v69 = (uint64_t)v181;
    v70 = swift_isUniquelyReferenced_nonNull_native(v181);
    *(_QWORD *)&v183 = v69;
    sub_1000EDE18((uint64_t)&aBlock, 0xD000000000000021, 0x8000000100126F50, v70);
    v71 = v183;
    v181 = (_QWORD *)v183;
    swift_bridgeObjectRelease(0x8000000000000000);
    v72 = (_QWORD *)(v65 + *(int *)(v68 + 28));
    v73 = v72[1];
    v26 = v173;
    if (v73)
    {
      *(_QWORD *)&v183 = *v72;
      *((_QWORD *)&v183 + 1) = v73;
      swift_bridgeObjectRetain(v73);
      AnyHashable.init<A>(_:)(&aBlock, &v183, &type metadata for String, &protocol witness table for String);
      v74 = swift_isUniquelyReferenced_nonNull_native(v71);
      *(_QWORD *)&v183 = v71;
      sub_1000EDE18((uint64_t)&aBlock, 0x4E74736554747070, 0xEB00000000656D61, v74);
      v71 = v183;
      v181 = (_QWORD *)v183;
      swift_bridgeObjectRelease(0x8000000000000000);
    }
    v182 = 2;
    if (*(_QWORD *)(v71 + 16)
      && (v75 = sub_1000DA98C(1752457584, 0xE400000000000000), (v76 & 1) != 0)
      && (sub_1000CA038(*(_QWORD *)(v71 + 56) + 40 * v75, (uint64_t)&aBlock),
          (swift_dynamicCast(&v179, &aBlock, &type metadata for AnyHashable, &type metadata for String, 6) & 1) != 0))
    {
      v77 = v180;
      *(_QWORD *)&v183 = v179;
      if (!v180)
        goto LABEL_48;
    }
    else
    {
      if (!*(_QWORD *)(v71 + 16))
        goto LABEL_48;
      v78 = sub_1000DA98C(1953460082, 0xE400000000000000);
      if ((v79 & 1) == 0)
        goto LABEL_48;
      sub_1000CA038(*(_QWORD *)(v71 + 56) + 40 * v78, (uint64_t)&aBlock);
      if (!swift_dynamicCast(&v183, &aBlock, &type metadata for AnyHashable, &type metadata for String, 6))
      {
        v183 = 0uLL;
        goto LABEL_48;
      }
      v77 = *((_QWORD *)&v183 + 1);
      if (!*((_QWORD *)&v183 + 1))
      {
LABEL_48:
        if (qword_100156CA0 != -1)
LABEL_92:
          swift_once(&qword_100156CA0, sub_10008BDE8);
        v100 = type metadata accessor for Logger(0);
        sub_100007808(v100, (uint64_t)qword_10015D298);
        v101 = v19;
        v102 = Logger.logObject.getter(v101);
        v103 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v102, v103))
        {
          v104 = (uint8_t *)swift_slowAlloc(12, -1);
          v105 = swift_slowAlloc(32, -1);
          *(_QWORD *)&aBlock = v105;
          *(_DWORD *)v104 = 136446210;
          ObjectType = swift_getObjectType(v101);
          v107 = _typeName(_:qualified:)(ObjectType, 0);
          v109 = v108;
          *(_QWORD *)&v183 = sub_1000DA1F0(v107, v108, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v183, (char *)&v183 + 8, v104 + 4, v104 + 12);
          swift_bridgeObjectRelease(v109);

          _os_log_impl((void *)&_mh_execute_header, v102, v103, "Instance of %{public}s did not defer URL handling, calling handleURL.", v104, 0xCu);
          swift_arrayDestroy(v105, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v105, -1, -1);
          swift_slowDealloc(v104, -1, -1);
        }
        else
        {

        }
        v110 = (uint64_t)v181;
        if (v181[2]
          && (v111 = sub_1000DA98C(1752457584, 0xE400000000000000), (v112 & 1) != 0)
          && (sub_1000CA038(*(_QWORD *)(v110 + 56) + 40 * v111, (uint64_t)&aBlock),
              swift_dynamicCast(&v183, &aBlock, &type metadata for AnyHashable, &type metadata for String, 6)))
        {
          v113 = *((_QWORD *)&v183 + 1);
          v114 = v183 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          v114 = 0;
          v113 = 0xE000000000000000;
        }
        if ((v167 & 1) != 0)
        {
          swift_bridgeObjectRelease(v113);
          v115 = HIBYTE(v113) & 0xF;
          if ((v113 & 0x2000000000000000) == 0)
            v115 = v114;
          if (v115)
          {
            sub_1000076B4((uint64_t)v172, type metadata accessor for SettingsURLDestination);
            swift_release(v171);
          }
          else
          {
            v187 = &OBJC_PROTOCOL___PSListControllerURLHandler;
            v131 = swift_dynamicCastObjCProtocolConditional(v101, 1, &v187);
            if (v131)
            {
              v132 = (void *)v131;
              v133 = v101;
              v134 = Logger.logObject.getter(v133);
              v135 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v134, v135))
              {
                v136 = (uint8_t *)swift_slowAlloc(12, -1);
                v137 = swift_slowAlloc(32, -1);
                *(_QWORD *)&aBlock = v137;
                *(_DWORD *)v136 = 136315138;
                v138 = swift_getObjectType(v132);
                v139 = _typeName(_:qualified:)(v138, 0);
                v141 = v140;
                *(_QWORD *)&v183 = sub_1000DA1F0(v139, v140, (uint64_t *)&aBlock);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v183, (char *)&v183 + 8, v136 + 4, v136 + 12);
                swift_bridgeObjectRelease(v141);

                _os_log_impl((void *)&_mh_execute_header, v134, v135, "Reusing existing controller '%s' for handling URL with empty remaining path.", v136, 0xCu);
                swift_arrayDestroy(v137, 1, (char *)&type metadata for Any + 8);
                swift_slowDealloc(v137, -1, -1);
                swift_slowDealloc(v136, -1, -1);
              }
              else
              {

              }
              if ((objc_msgSend(v132, "respondsToSelector:", "handleResourceDictionaryWhenAlreadyPresented:") & 1) != 0)
              {
                v142 = (uint64_t)v181;
                v143 = v133;
                v144 = swift_bridgeObjectRetain(v142);
                v145 = sub_1000E8CF8(v144);
                swift_bridgeObjectRelease(v142);
                isa = Dictionary._bridgeToObjectiveC()().super.isa;
                objc_msgSend(v132, "handleResourceDictionaryWhenAlreadyPresented:", isa);

                swift_bridgeObjectRelease(v145);
              }
              v147 = (uint64_t)v172;
              v148 = v171;
              sub_1000E87AC((uint64_t)v172, v171);

              swift_release(v26);
              swift_release(v148);
              sub_1000076B4(v147, type metadata accessor for SettingsURLDestination);
              return swift_bridgeObjectRelease(v181);
            }
            swift_release(v171);
            sub_1000076B4((uint64_t)v172, type metadata accessor for SettingsURLDestination);
          }
        }
        else
        {
          sub_1000076B4((uint64_t)v172, type metadata accessor for SettingsURLDestination);
          swift_release(v171);
          swift_bridgeObjectRelease(v113);
        }
        v116 = v101;
        v117 = Logger.logObject.getter(v116);
        v118 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v117, v118))
        {
          v119 = (uint8_t *)swift_slowAlloc(12, -1);
          v120 = swift_slowAlloc(32, -1);
          *(_QWORD *)&aBlock = v120;
          *(_DWORD *)v119 = 136315138;
          v121 = swift_getObjectType(v116);
          v122 = _typeName(_:qualified:)(v121, 0);
          v124 = v123;
          *(_QWORD *)&v183 = sub_1000DA1F0(v122, v123, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v183, (char *)&v183 + 8, v119 + 4, v119 + 12);
          swift_bridgeObjectRelease(v124);

          _os_log_impl((void *)&_mh_execute_header, v117, v118, "Path is not empty, calling handleURL on '%s'.", v119, 0xCu);
          swift_arrayDestroy(v120, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v120, -1, -1);
          swift_slowDealloc(v119, -1, -1);

          v110 = (uint64_t)v181;
        }
        else
        {

        }
        v125 = swift_bridgeObjectRetain(v110);
        v126 = sub_1000E8CF8(v125);
        swift_bridgeObjectRelease(v110);
        v127 = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v126);
        v190 = sub_1000EE1BC;
        v191 = v26;
        *(_QWORD *)&aBlock = _NSConcreteStackBlock;
        *((_QWORD *)&aBlock + 1) = 1107296256;
        *(_QWORD *)&v189 = sub_100005350;
        *((_QWORD *)&v189 + 1) = &unk_10014DCA0;
        v128 = _Block_copy(&aBlock);
        v129 = v191;
        swift_retain(v26);
        swift_release(v129);
        objc_msgSend(v116, "handleURL:withCompletion:", v127, v128);
        swift_release(v26);
        _Block_release(v128);

        return swift_bridgeObjectRelease(v181);
      }
    }
    *(_QWORD *)&aBlock = v183;
    *((_QWORD *)&aBlock + 1) = v77;
    *(_QWORD *)&v183 = 47;
    *((_QWORD *)&v183 + 1) = 0xE100000000000000;
    v80 = sub_100008A5C();
    v81 = (_QWORD *)StringProtocol.components<A>(separatedBy:)(&v183, &type metadata for String, &type metadata for String, v80, v80);
    swift_bridgeObjectRelease(v77);
    if (v81[2])
    {
      v83 = v81[4];
      v82 = (_QWORD *)v81[5];
      swift_bridgeObjectRetain(v82);
      swift_bridgeObjectRelease(v81);
      *(_QWORD *)&aBlock = v83;
      *((_QWORD *)&aBlock + 1) = v82;
      *(_QWORD *)&v183 = 35;
      *((_QWORD *)&v183 + 1) = 0xE100000000000000;
      v84 = (_QWORD *)StringProtocol.components<A>(separatedBy:)(&v183, &type metadata for String, &type metadata for String, v80, v80);
      v85 = v84;
      if (v84[2])
      {
        v87 = v84[4];
        v86 = v84[5];
        swift_bridgeObjectRetain(v86);
        swift_bridgeObjectRelease(v85);
        LOBYTE(v179) = 1;
        sub_1000E8AB4((uint64_t)&v179, &v182, v19, v87, v86, (uint64_t *)&v181, (uint64_t)sub_1000EE1BC, v26);
        swift_bridgeObjectRelease(v86);
        *(_QWORD *)&aBlock = v83;
        *((_QWORD *)&aBlock + 1) = v82;
        *(_QWORD *)&v183 = 35;
        *((_QWORD *)&v183 + 1) = 0xE100000000000000;
        v88 = StringProtocol.components<A>(separatedBy:)(&v183, &type metadata for String, &type metadata for String, v80, v80);
        swift_bridgeObjectRelease(v82);
        v89 = *(_QWORD *)(v88 + 16);
        if (v89)
        {
          v90 = v88 + 16 * v89;
          v92 = *(_QWORD *)(v90 + 16);
          v91 = *(_QWORD *)(v90 + 24);
          swift_bridgeObjectRetain(v91);
          swift_bridgeObjectRelease(v88);
          if (qword_100156CA0 != -1)
            swift_once(&qword_100156CA0, sub_10008BDE8);
          v93 = type metadata accessor for Logger(0);
          sub_100007808(v93, (uint64_t)qword_10015D298);
          v94 = swift_bridgeObjectRetain_n(v91, 2);
          v95 = Logger.logObject.getter(v94);
          v96 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v95, v96))
          {
            v97 = (uint8_t *)swift_slowAlloc(12, -1);
            v98 = swift_slowAlloc(32, -1);
            *(_QWORD *)&aBlock = v98;
            *(_DWORD *)v97 = 136315138;
            swift_bridgeObjectRetain(v91);
            *(_QWORD *)&v183 = sub_1000DA1F0(v92, v91, (uint64_t *)&aBlock);
            v19 = v174;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v183, (char *)&v183 + 8, v97 + 4, v97 + 12);
            swift_bridgeObjectRelease_n(v91, 3);
            _os_log_impl((void *)&_mh_execute_header, v95, v96, "controllerToHandleURL handling offset target %s", v97, 0xCu);
            swift_arrayDestroy(v98, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v98, -1, -1);
            swift_slowDealloc(v97, -1, -1);
          }
          else
          {
            swift_bridgeObjectRelease_n(v91, 2);
          }

          v186 = &OBJC_PROTOCOL___PSViewControllerOffsetProtocol;
          v150 = swift_dynamicCastObjCProtocolConditional(v19, 1, &v186);
          if (v150)
          {
            v151 = (void *)v150;
            v152 = v19;
            v153 = String._bridgeToObjectiveC()();
            objc_msgSend(v151, "setDesiredVerticalContentOffsetItemNamed:", v153);

          }
          if ((objc_msgSend(v19, "respondsToSelector:", "highlightSpecifierWithID:") & 1) != 0)
          {
            v154 = v19;
            v155 = String._bridgeToObjectiveC()();
            objc_msgSend(v154, "highlightSpecifierWithID:", v155);

          }
          v149 = v91;
        }
        else
        {
          v149 = v88;
        }
        swift_bridgeObjectRelease(v149);
        if (v182 != 2 && (v182 & 1) == 0)
        {
          swift_release(v171);
          sub_1000076B4((uint64_t)v172, type metadata accessor for SettingsURLDestination);
          if (qword_100156CA0 != -1)
            swift_once(&qword_100156CA0, sub_10008BDE8);
          v156 = type metadata accessor for Logger(0);
          sub_100007808(v156, (uint64_t)qword_10015D298);
          v157 = v19;
          v158 = Logger.logObject.getter(v157);
          v159 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v158, v159))
          {
            v160 = (uint8_t *)swift_slowAlloc(12, -1);
            v161 = swift_slowAlloc(32, -1);
            *(_QWORD *)&aBlock = v161;
            *(_DWORD *)v160 = 136446210;
            v162 = swift_getObjectType(v157);
            v163 = _typeName(_:qualified:)(v162, 0);
            v165 = v164;
            *(_QWORD *)&v183 = sub_1000DA1F0(v163, v164, (uint64_t *)&aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v183, (char *)&v183 + 8, v160 + 4, v160 + 12);
            swift_bridgeObjectRelease(v165);

            _os_log_impl((void *)&_mh_execute_header, v158, v159, "Instance of %{public}s deferred URL handling.", v160, 0xCu);
            swift_arrayDestroy(v161, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v161, -1, -1);
            swift_slowDealloc(v160, -1, -1);

            swift_release(v26);
          }
          else
          {

            swift_release(v26);
          }
          return swift_bridgeObjectRelease(v181);
        }
        goto LABEL_48;
      }
      swift_bridgeObjectRelease(v84);
      v99 = v82;
    }
    else
    {
      v99 = v81;
    }
    swift_bridgeObjectRelease(v99);
    goto LABEL_48;
  }
  v19 = (char *)(v25 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)));
  v176 = *(_QWORD *)(v5 + 72);
  v178 = *(uint64_t (**)(char *, char *, uint64_t))(v5 + 16);
  v166 = v25;
  swift_bridgeObjectRetain_n(v25, 2);
  v27 = &_swiftEmptyDictionarySingleton;
  v28 = v175;
  v177 = v5;
  while (1)
  {
    v30 = v178(v7, v19, v28);
    v31 = URLQueryItem.name.getter(v30);
    v33 = v32;
    v34 = URLQueryItem.value.getter(v31);
    if (!v35
      || (v36 = v35,
          *(_QWORD *)&aBlock = v34,
          *((_QWORD *)&aBlock + 1) = v35,
          v37 = sub_100008A5C(),
          v38 = StringProtocol.removingPercentEncoding.getter(&type metadata for String, v37),
          v40 = v39,
          swift_bridgeObjectRelease(v36),
          !v40))
    {
      swift_bridgeObjectRetain(v27);
      v50 = sub_1000DA98C(v31, v33);
      v52 = v51;
      swift_bridgeObjectRelease(v27);
      if ((v52 & 1) != 0)
      {
        v53 = swift_isUniquelyReferenced_nonNull_native(v27);
        *(_QWORD *)&v183 = v27;
        if ((v53 & 1) == 0)
        {
          sub_1000EEAF8();
          v27 = (_QWORD *)v183;
        }
        swift_bridgeObjectRelease(*(_QWORD *)(v27[6] + 16 * v50 + 8));
        v54 = v27[7] + 40 * v50;
        v55 = *(uint64_t (**)())(v54 + 32);
        v56 = *(_OWORD *)(v54 + 16);
        aBlock = *(_OWORD *)v54;
        v189 = v56;
        v190 = v55;
        sub_1000EDAD0(v50, (uint64_t)v27);
        swift_bridgeObjectRelease(0x8000000000000000);
      }
      else
      {
        v190 = 0;
        aBlock = 0u;
        v189 = 0u;
      }
      v29 = v177;
      swift_bridgeObjectRelease(v33);
      sub_10000BA50((uint64_t)&aBlock, &qword_10015C428);
      goto LABEL_5;
    }
    *(_QWORD *)&v183 = v38;
    *((_QWORD *)&v183 + 1) = v40;
    AnyHashable.init<A>(_:)(&aBlock, &v183, &type metadata for String, &protocol witness table for String);
    v183 = aBlock;
    v184 = v189;
    v185 = v190;
    v41 = swift_isUniquelyReferenced_nonNull_native(v27);
    v179 = v27;
    v43 = sub_1000DA98C(v31, v33);
    v44 = v27[2];
    v45 = (v42 & 1) == 0;
    v46 = v44 + v45;
    if (__OFADD__(v44, v45))
    {
      __break(1u);
LABEL_91:
      __break(1u);
      goto LABEL_92;
    }
    v47 = v42;
    if (v27[3] >= v46)
    {
      if ((v41 & 1) == 0)
        sub_1000EEAF8();
      goto LABEL_18;
    }
    sub_1000ED5EC(v46, v41);
    v48 = sub_1000DA98C(v31, v33);
    if ((v47 & 1) != (v49 & 1))
      break;
    v43 = v48;
LABEL_18:
    v28 = v175;
    v27 = v179;
    if ((v47 & 1) != 0)
    {
      sub_1000EECEC((uint64_t)&v183, v179[7] + 40 * v43);
    }
    else
    {
      v179[(v43 >> 6) + 8] |= 1 << v43;
      v57 = (uint64_t *)(v27[6] + 16 * v43);
      *v57 = v31;
      v57[1] = v33;
      v58 = v27[7] + 40 * v43;
      v59 = v183;
      v60 = v184;
      *(_QWORD *)(v58 + 32) = v185;
      *(_OWORD *)v58 = v59;
      *(_OWORD *)(v58 + 16) = v60;
      v61 = v27[2];
      v62 = __OFADD__(v61, 1);
      v63 = v61 + 1;
      if (v62)
        goto LABEL_91;
      v27[2] = v63;
      swift_bridgeObjectRetain(v33);
    }
    swift_bridgeObjectRelease(0x8000000000000000);
    swift_bridgeObjectRelease(v33);
    v29 = v177;
LABEL_5:
    (*(void (**)(char *, uint64_t))(v29 + 8))(v7, v28);
    v19 += v176;
    if (!--v26)
    {
      v25 = v166;
      swift_bridgeObjectRelease(v166);
      v19 = v174;
      goto LABEL_25;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  result = sub_1000076B4((uint64_t)v172, type metadata accessor for SettingsURLDestination);
  __break(1u);
  return result;
}

uint64_t sub_1000E7870(uint64_t a1, Swift::Int a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[16];
  _BYTE v17[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v17, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    if (qword_100156CA0 != -1)
      swift_once(&qword_100156CA0, sub_10008BDE8);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_100007808(v6, (uint64_t)qword_10015D298);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = swift_slowAlloc(22, -1);
      *(_DWORD *)v10 = 141558275;
      v15 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, v16, v10 + 4, v10 + 12);
      *(_WORD *)(v10 + 12) = 2049;
      v15 = a2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, v16, v10 + 14, v10 + 22);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Popping %{private,mask.hash}ld from stack.", (uint8_t *)v10, 0x16u);
      swift_slowDealloc(v10, -1, -1);
    }

    KeyPath = swift_getKeyPath(&unk_10011B138);
    v15 = v5;
    v12 = sub_100007828((unint64_t *)&qword_100158F78, type metadata accessor for SettingsAppNavigationModel, (uint64_t)&unk_10011B030);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v15, KeyPath, v12);
    swift_release(KeyPath);
    v15 = v5;
    v13 = swift_getKeyPath(&unk_10011B138);
    ObservationRegistrar.willSet<A, B>(_:keyPath:)(&v15, v13, v12);
    swift_release(v13);
    swift_beginAccess(v5 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__navigationPath, &v15, 33, 0);
    NavigationPath.removeLast(_:)(a2);
    swift_endAccess(&v15);
    v15 = v5;
    v14 = swift_getKeyPath(&unk_10011B138);
    ObservationRegistrar.didSet<A, B>(_:keyPath:)(&v15, v14, v12);
    swift_release(v5);
    return swift_release(v14);
  }
  return result;
}

uint64_t sub_1000E7AC4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  _DWORD v20[4];
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char v25[24];

  v7 = type metadata accessor for SettingsURLDestination(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v10 = sub_100004FC8(&qword_10015C5A0);
  __chkstk_darwin(v10);
  v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for SettingsAppDetailContent(0);
  __chkstk_darwin(v13);
  v15 = (char *)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1 += 16;
  swift_beginAccess(a1, v25, 0, 0);
  result = swift_weakLoadStrong(a1);
  if (result)
  {
    v17 = result;
    v20[3] = a4;
    v21 = v8;
    v22 = v12;
    v23 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_1000076F0(a2, (uint64_t)v15, type metadata accessor for SettingsAppDetailContent);
    KeyPath = swift_getKeyPath(&unk_10011B0C0);
    __chkstk_darwin(KeyPath);
    *(_QWORD *)&v20[-4] = v17;
    *(_QWORD *)&v20[-2] = v15;
    v24 = v17;
    v19 = sub_100007828((unint64_t *)&qword_100158F78, type metadata accessor for SettingsAppNavigationModel, (uint64_t)&unk_10011B030);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v24, KeyPath, sub_1000F1BF0, &v20[-8], (char *)&type metadata for () + 8, v19);
    swift_release(KeyPath);
    sub_1000076B4((uint64_t)v15, type metadata accessor for SettingsAppDetailContent);
    __asm { BR              X11 }
  }
  return result;
}

uint64_t sub_1000E7F98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6[14] = a5;
  v6[15] = a6;
  v6[13] = a4;
  v7 = sub_100004FC8((uint64_t *)&unk_10015C400);
  v6[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SettingsURLDestination(0);
  v6[17] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v6[18] = v9;
  v6[19] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for MainActor(0);
  v6[20] = static MainActor.shared.getter(v10);
  v11 = dispatch thunk of Actor.unownedExecutor.getter(v10, &protocol witness table for MainActor);
  v6[21] = v11;
  v6[22] = v12;
  return swift_task_switch(sub_1000E8054, v11, v12);
}

uint64_t sub_1000E8054()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v17;

  if (qword_100156CA0 != -1)
    swift_once(&qword_100156CA0, sub_10008BDE8);
  v1 = v0[13];
  v2 = v0[19];
  v3 = type metadata accessor for Logger(0);
  v0[23] = sub_100007808(v3, (uint64_t)qword_10015D298);
  v4 = sub_1000076F0(v1, v2, type metadata accessor for SettingsURLDestination);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = v0[19];
  if (v7)
  {
    v9 = swift_slowAlloc(22, -1);
    v10 = swift_slowAlloc(32, -1);
    v17 = v10;
    *(_DWORD *)v9 = 141558275;
    v0[11] = 1752392040;
    v11 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 11, v0 + 12, v9 + 4, v9 + 12);
    *(_WORD *)(v9 + 12) = 2081;
    v12 = URL.absoluteString.getter(v11);
    v14 = v13;
    v0[12] = sub_1000DA1F0(v12, v13, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 12, v0 + 13, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease(v14);
    sub_1000076B4(v8, type metadata accessor for SettingsURLDestination);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Calling openURL on settings experience plugin with url '%{private,mask.hash}s'.", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    sub_1000076B4(v0[19], type metadata accessor for SettingsURLDestination);
  }

  v15 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to SettingsExperiencePlugin.openURL(_:) + 1));
  v0[24] = v15;
  *v15 = v0;
  v15[1] = sub_1000E8268;
  return SettingsExperiencePlugin.openURL(_:)(v0[13]);
}

uint64_t sub_1000E8268()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 192));
  return swift_task_switch(sub_1000E82B4, *(_QWORD *)(v1 + 168), *(_QWORD *)(v1 + 176));
}

uint64_t sub_1000E82B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 120);
  swift_release(*(_QWORD *)(v0 + 160));
  v1 += 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    sub_1000EF898(*(_QWORD *)(v0 + 104));
    swift_release(v3);
  }
  v4 = *(_QWORD *)(v0 + 120) + 16;
  swift_beginAccess(v4, v0 + 40, 0, 0);
  v5 = swift_weakLoadStrong(v4);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)(v0 + 128);
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 144) + 56))(v7, 1, 1, *(_QWORD *)(v0 + 136));
    v8 = v6 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel_currentlyInProgressURLDestination;
    swift_beginAccess(v6 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel_currentlyInProgressURLDestination, v0 + 64, 33, 0);
    sub_1000F1B58(v7, v8, (uint64_t *)&unk_10015C400);
    swift_endAccess(v0 + 64);
    sub_1000DE57C();
    sub_10000BA50(v7, (uint64_t *)&unk_10015C400);
    v5 = swift_release(v6);
  }
  v9 = Logger.logObject.getter(v5);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "openURL completed for settings experience plugin.", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }
  v12 = *(_QWORD *)(v0 + 152);
  v13 = *(_QWORD *)(v0 + 128);

  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E8464(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t KeyPath;
  uint64_t v25;
  _QWORD v26[2];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[24];
  uint64_t v31;

  v5 = type metadata accessor for NavigationPath(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SettingsURLDestination(0);
  __chkstk_darwin(v9);
  v11 = (char *)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1 += 16;
  swift_beginAccess(a1, v30, 0, 0);
  result = swift_weakLoadStrong(a1);
  if (result)
  {
    v13 = result;
    v27 = v6;
    if (qword_100156CA0 != -1)
      swift_once(&qword_100156CA0, sub_10008BDE8);
    v28 = v5;
    v14 = type metadata accessor for Logger(0);
    sub_100007808(v14, (uint64_t)qword_10015D298);
    v15 = sub_1000076F0(a2, (uint64_t)v11, type metadata accessor for SettingsURLDestination);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = swift_slowAlloc(22, -1);
      v26[1] = v2;
      v19 = v18;
      v26[0] = swift_slowAlloc(32, -1);
      v31 = v26[0];
      *(_DWORD *)v19 = 141558275;
      v29 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, v30, v19 + 4, v19 + 12);
      *(_WORD *)(v19 + 12) = 2081;
      v20 = sub_10000E540();
      v22 = v21;
      v29 = sub_1000DA1F0(v20, v21, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, v30, v19 + 14, v19 + 22);
      swift_bridgeObjectRelease(v22);
      sub_1000076B4((uint64_t)v11, type metadata accessor for SettingsURLDestination);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Resetting Navigation Path for URL navigation %{private,mask.hash}s.", (uint8_t *)v19, 0x16u);
      v23 = v26[0];
      swift_arrayDestroy(v26[0], 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v19, -1, -1);
    }
    else
    {
      sub_1000076B4((uint64_t)v11, type metadata accessor for SettingsURLDestination);
    }

    NavigationPath.init()();
    KeyPath = swift_getKeyPath(&unk_10011B138);
    __chkstk_darwin(KeyPath);
    v26[-2] = v13;
    v26[-1] = v8;
    v31 = v13;
    v25 = sub_100007828((unint64_t *)&qword_100158F78, type metadata accessor for SettingsAppNavigationModel, (uint64_t)&unk_10011B030);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v31, KeyPath, sub_1000F1C04, &v26[-4], (char *)&type metadata for () + 8, v25);
    swift_release(KeyPath);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v8, v28);
    return swift_release(v13);
  }
  return result;
}

uint64_t sub_1000E87AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint8_t *v22;
  uint64_t Strong;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  _BYTE v32[24];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35[3];

  v4 = sub_100004FC8((uint64_t *)&unk_10015C400);
  __chkstk_darwin(v4);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SettingsURLDestination(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a2 + 16;
  if (qword_100156CA0 != -1)
    swift_once(&qword_100156CA0, sub_10008BDE8);
  v12 = type metadata accessor for Logger(0);
  sub_100007808(v12, (uint64_t)qword_10015D298);
  v13 = sub_1000076F0(a1, (uint64_t)v10, type metadata accessor for SettingsURLDestination);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc(12, -1);
    v31 = v7;
    v17 = (uint8_t *)v16;
    v18 = swift_slowAlloc(32, -1);
    v35[0] = v18;
    v29 = a1;
    v30 = v6;
    *(_DWORD *)v17 = 136315138;
    v19 = URL.absoluteString.getter(v18);
    v21 = v20;
    v33 = sub_1000DA1F0(v19, v20, v35);
    a1 = v29;
    v6 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease(v21);
    sub_1000076B4((uint64_t)v10, type metadata accessor for SettingsURLDestination);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Application level completion handler for url '%s' called.", v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    v22 = v17;
    v7 = v31;
    swift_slowDealloc(v22, -1, -1);
  }
  else
  {
    sub_1000076B4((uint64_t)v10, type metadata accessor for SettingsURLDestination);
  }

  swift_beginAccess(v11, v35, 0, 0);
  Strong = swift_weakLoadStrong(v11);
  if (Strong)
  {
    v24 = Strong;
    sub_1000EF898(a1);
    swift_release(v24);
  }
  swift_beginAccess(v11, &v33, 0, 0);
  result = swift_weakLoadStrong(v11);
  if (result)
  {
    v26 = result;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    v27 = v26 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel_currentlyInProgressURLDestination;
    swift_beginAccess(v26 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel_currentlyInProgressURLDestination, v32, 33, 0);
    sub_1000F1B58((uint64_t)v6, v27, (uint64_t *)&unk_10015C400);
    v28 = swift_endAccess(v32);
    sub_1000DE57C(v28);
    sub_10000BA50((uint64_t)v6, (uint64_t *)&unk_10015C400);
    return swift_release(v26);
  }
  return result;
}

void sub_1000E8AB4(uint64_t a1, unsigned __int8 *a2, id a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  NSString v19;
  Class isa;
  void *v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  _QWORD v29[5];
  uint64_t v30;
  uint64_t v31;

  if ((objc_msgSend(a3, "respondsToSelector:", "prepareHandlingURLForSpecifierID:resourceDictionary:animatePush:withCompletion:") & 1) != 0)
  {
    v31 = v8;
    v15 = *a6;
    v16 = a3;
    v17 = swift_bridgeObjectRetain(v15);
    v18 = sub_1000E8CF8(v17);
    swift_bridgeObjectRelease(v15);
    v19 = String._bridgeToObjectiveC()();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    v29[4] = a7;
    v30 = a8;
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 1107296256;
    v29[2] = sub_100005350;
    v29[3] = &unk_10014DCC8;
    v21 = _Block_copy(v29);
    v22 = v30;
    swift_retain(a8);
    swift_release(v22);
    v23 = objc_msgSend(v16, "prepareHandlingURLForSpecifierID:resourceDictionary:animatePush:withCompletion:", v19, isa, a1, v21);
    _Block_release(v21);

    swift_bridgeObjectRelease(v18);
    *a2 = v23;
  }
  else
  {
    *a2 = 2;
    if (qword_100156CA0 != -1)
      swift_once(&qword_100156CA0, sub_10008BDE8);
    v24 = type metadata accessor for Logger(0);
    v25 = sub_100007808(v24, (uint64_t)qword_10015D298);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "controllerToHandleURL doesn't respond to prepareHandlingURL", v28, 2u);
      swift_slowDealloc(v28, -1, -1);
    }

  }
}

uint64_t sub_1000E8CF8(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  _OWORD v30[2];
  uint64_t v31;
  _QWORD v32[2];
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _OWORD v36[2];
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  _OWORD v40[2];
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD v46[2];
  uint64_t v47;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_100004FC8(&qword_10015BAA8);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v29 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v28 = (unint64_t)(63 - v4) >> 6;
  v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  result = swift_retain(v3);
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }
    v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v14 >= v28)
      goto LABEL_37;
    v15 = *(_QWORD *)(v29 + 8 * v14);
    v16 = v9 + 1;
    if (!v15)
    {
      v16 = v9 + 2;
      if (v9 + 2 >= v28)
        goto LABEL_37;
      v15 = *(_QWORD *)(v29 + 8 * v16);
      if (!v15)
      {
        v16 = v9 + 3;
        if (v9 + 3 >= v28)
          goto LABEL_37;
        v15 = *(_QWORD *)(v29 + 8 * v16);
        if (!v15)
        {
          v16 = v9 + 4;
          if (v9 + 4 >= v28)
            goto LABEL_37;
          v15 = *(_QWORD *)(v29 + 8 * v16);
          if (!v15)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v16 << 6);
    v9 = v16;
LABEL_28:
    v18 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v13);
    v20 = *v18;
    v19 = v18[1];
    sub_1000CA038(*(_QWORD *)(a1 + 56) + 40 * v13, (uint64_t)v46);
    v44 = v20;
    v45 = v19;
    v41 = v46[0];
    v42 = v46[1];
    v43 = v47;
    v32[0] = v20;
    v32[1] = v19;
    swift_bridgeObjectRetain(v19);
    swift_dynamicCast(&v33, v32, &type metadata for String, &type metadata for AnyHashable, 7);
    v30[0] = v41;
    v30[1] = v42;
    v31 = v43;
    swift_dynamicCast(v36, v30, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, 7);
    v37 = v33;
    v38 = v34;
    v39 = v35;
    sub_1000CA074(v36, v40);
    v33 = v37;
    v34 = v38;
    v35 = v39;
    sub_1000CA074(v40, v30);
    sub_1000CA074(v30, &v37);
    result = AnyHashable._rawHashValue(seed:)(v3[5]);
    v21 = -1 << *((_BYTE *)v3 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)&v7[8 * (v22 >> 6)]) != 0)
    {
      v10 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)&v7[8 * (v22 >> 6)])) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)&v7[8 * v23];
      }
      while (v27 == -1);
      v10 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)&v7[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v10;
    v11 = v3[6] + 40 * v10;
    *(_OWORD *)v11 = v33;
    *(_OWORD *)(v11 + 16) = v34;
    *(_QWORD *)(v11 + 32) = v35;
    result = (uint64_t)sub_1000CA074(&v37, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }
  v17 = v9 + 5;
  if (v9 + 5 >= v28)
  {
LABEL_37:
    swift_release(v3);
    sub_100007C50(a1);
    return (uint64_t)v3;
  }
  v15 = *(_QWORD *)(v29 + 8 * v17);
  if (v15)
  {
    v16 = v9 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v16 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v16 >= v28)
      goto LABEL_37;
    v15 = *(_QWORD *)(v29 + 8 * v16);
    ++v17;
    if (v15)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_1000E90DC(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  void (*v34)(_QWORD *, _QWORD);
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 *v39;
  uint64_t result;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  void (*v45)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  void *v47;
  void *v48;
  unsigned __int8 v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  void (*v53)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  void *v55;
  void *v56;
  char *v57;
  unsigned int v58;
  uint64_t v59;
  char *v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  __int128 *v66;
  uint64_t v67;
  void (*v68)(char *, uint64_t, uint64_t);
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  __int128 *v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  __objc2_prot *v81;
  __int128 v82[3];
  _QWORD v83[4];
  __int128 v84;
  _OWORD v85[3];
  uint64_t v86;
  char v87;
  uint64_t v88;

  v64 = a2;
  v3 = sub_100004FC8(&qword_1001590A0);
  __chkstk_darwin(v3);
  v79 = (char *)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SettingsAnyPlatformViewControllerRecipe(0);
  v80 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v71 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004FC8(&qword_10015C560);
  __chkstk_darwin(v7);
  v9 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = type metadata accessor for PreferencesControllerRecipe(0);
  v10 = *(_QWORD *)(v63 - 8);
  __chkstk_darwin(v63);
  v75 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for NavigationPath.CollectionProxy(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100004FC8(&qword_10015C568);
  __chkstk_darwin(v16);
  v18 = (char *)&v63 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100004FC8(&qword_10015C570);
  __chkstk_darwin(v19);
  v21 = (char *)&v63 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v68(v18, a1, v12);
  v70 = v13;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v18, v12);
  v22 = sub_100007828(&qword_10015C578, (uint64_t (*)(uint64_t))&type metadata accessor for NavigationPath.CollectionProxy, (uint64_t)&protocol conformance descriptor for NavigationPath.CollectionProxy);
  v69 = v15;
  dispatch thunk of Sequence.makeIterator()(v12, v22);
  v23 = *(int *)(v19 + 36);
  v24 = v5;
  v67 = v23;
  *(_QWORD *)&v21[v23] = 0;
  v25 = *(int *)(sub_100004FC8(&qword_10015C580) + 36);
  v78 = v21;
  v26 = &v21[v25];
  v27 = v63;
  v28 = sub_100007828(&qword_10015C588, (uint64_t (*)(uint64_t))&type metadata accessor for NavigationPath.CollectionProxy, (uint64_t)&protocol conformance descriptor for NavigationPath.CollectionProxy);
  v29 = v12;
  v66 = (__int128 *)((char *)v82 + 8);
  v65 = (uint64_t)v85 + 8;
  v76 = (__int128 *)&v87;
  v74 = v12;
  v77 = v26;
  v73 = v28;
  v72 = v24;
  while (1)
  {
    v30 = *(_QWORD *)v26;
    v31 = v26;
    v32 = v78;
    dispatch thunk of Collection.endIndex.getter(v83, v29, v28);
    if (v30 == v83[0])
    {
      memset(v85, 0, sizeof(v85));
      v33 = (uint64_t)v32;
      goto LABEL_8;
    }
    v34 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read(v83, v31, v29, v28);
    sub_10003CE00(v35, (uint64_t)v82);
    v34(v83, 0);
    v36 = v69;
    v68(v69, (uint64_t)v32, v29);
    dispatch thunk of Collection.formIndex(after:)(v31, v29, v28);
    (*(void (**)(char *, uint64_t))(v70 + 8))(v36, v29);
    sub_10003CDE8(v82, (uint64_t)&v84);
    v37 = v67;
    v38 = *(_QWORD *)&v32[v67];
    v39 = v66;
    result = sub_10003CDE8(&v84, (uint64_t)v66);
    if (__OFADD__(v38, 1))
      break;
    v33 = (uint64_t)v32;
    *(_QWORD *)&v32[v37] = v38 + 1;
    *(_QWORD *)&v85[0] = v38;
    sub_10003CDE8(v39, v65);
LABEL_8:
    sub_10007E96C((uint64_t)v85, (uint64_t)&v86, &qword_10015C590);
    v41 = (uint64_t)v79;
    v26 = v77;
    if (!v88)
      goto LABEL_20;
    v42 = v86;
    sub_10003CDE8(v76, (uint64_t)v85);
    sub_10003CE00((uint64_t)v85, (uint64_t)v82);
    v43 = sub_100004FC8(&qword_10015C598);
    v44 = swift_dynamicCast(v9, v82, v43, v27, 6);
    v45 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    if ((v44 & 1) != 0)
    {
      v45(v9, 0, 1, v27);
      v46 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 32))(v75, v9, v27);
      v47 = (void *)PreferencesControllerRecipe.viewControllerIfLoaded.getter(v46);
      if (v47)
      {
        v48 = v47;
        v49 = objc_msgSend(v47, "canBeShownFromSuspendedState");

        (*(void (**)(char *, uint64_t))(v10 + 8))(v75, v27);
        sub_100005474(v85);
        if ((v49 & 1) == 0)
        {
LABEL_20:
          v62 = v33;
          return sub_10000BA50(v62, &qword_10015C570);
        }
        *v64 = v42;
        goto LABEL_3;
      }
      (*(void (**)(char *, uint64_t))(v10 + 8))(v75, v27);
      v41 = (uint64_t)v79;
    }
    else
    {
      v45(v9, 1, 1, v27);
      sub_10000BA50((uint64_t)v9, &qword_10015C560);
    }
    sub_10003CE00((uint64_t)v85, (uint64_t)v82);
    v50 = v43;
    v51 = v72;
    v52 = swift_dynamicCast(v41, v82, v50, v72, 6);
    v53 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v80 + 56);
    if ((v52 & 1) != 0)
    {
      v53(v41, 0, 1, v51);
      v54 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v80 + 32))(v71, v41, v51);
      v55 = (void *)SettingsAnyPlatformViewControllerRecipe.viewController.getter(v54);
      v81 = &OBJC_PROTOCOL___PSStateRestoration;
      v56 = (void *)swift_dynamicCastObjCProtocolConditional(v55, 1, &v81);
      if (v56)
      {
        v57 = v9;
        v58 = objc_msgSend(v56, "canBeShownFromSuspendedState");
        v59 = v80;
        v60 = v71;
        v61 = v58;

        (*(void (**)(char *, uint64_t))(v59 + 8))(v60, v51);
        sub_100005474(v85);
        if (!v61)
        {
          v62 = (uint64_t)v78;
          return sub_10000BA50(v62, &qword_10015C570);
        }
        *v64 = v42;
        v9 = v57;
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v80 + 8))(v71, v51);
        sub_100005474(v85);
      }
    }
    else
    {
      v53(v41, 1, 1, v51);
      sub_100005474(v85);
      sub_10000BA50(v41, &qword_1001590A0);
    }
LABEL_3:
    v29 = v74;
    v28 = v73;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000E97D0(uint64_t a1, Swift::Int a2)
{
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];

  KeyPath = swift_getKeyPath(&unk_10011B138);
  v9[0] = a1;
  v5 = sub_100007828((unint64_t *)&qword_100158F78, type metadata accessor for SettingsAppNavigationModel, (uint64_t)&unk_10011B030);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v9, KeyPath, v5);
  swift_release(KeyPath);
  v9[0] = a1;
  v6 = swift_getKeyPath(&unk_10011B138);
  ObservationRegistrar.willSet<A, B>(_:keyPath:)(v9, v6, v5);
  swift_release(v6);
  swift_beginAccess(a1 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__navigationPath, v9, 33, 0);
  NavigationPath.removeLast(_:)(a2);
  swift_endAccess(v9);
  v9[0] = a1;
  v7 = swift_getKeyPath(&unk_10011B138);
  ObservationRegistrar.didSet<A, B>(_:keyPath:)(v9, v7, v5);
  return swift_release(v7);
}

uint64_t sub_1000E98FC(uint64_t a1)
{
  return sub_1000E9924(a1, "Calling will resign active on %{private,mask.hash}@.", (SEL *)&selRef_willResignActive);
}

uint64_t sub_1000E9910(uint64_t a1)
{
  return sub_1000E9924(a1, "Calling will become active on %{private,mask.hash}@.", (SEL *)&selRef_willBecomeActive);
}

uint64_t sub_1000E9924(uint64_t a1, const char *a2, SEL *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v29;
  void (*v30)(_QWORD *, _QWORD);
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char v34;
  void (*v35)(char *, uint64_t, uint64_t, uint64_t);
  char *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  NSObject *v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  __int128 v49;
  char *v50;
  SEL *v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  void (*v56)(char *, uint64_t, uint64_t);
  char *v57;
  uint64_t v58;
  _QWORD v59[5];
  __int128 v60[3];

  v52 = a2;
  v5 = sub_100004FC8(&qword_10015C560);
  __chkstk_darwin(v5);
  v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PreferencesControllerRecipe(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v55 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for NavigationPath.CollectionProxy(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v57 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100004FC8(&qword_10015C580);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v49 - v18;
  v58 = v12;
  v56 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v56(v17, a1, v11);
  v20 = sub_100007828(&qword_10015C588, (uint64_t (*)(uint64_t))&type metadata accessor for NavigationPath.CollectionProxy, (uint64_t)&protocol conformance descriptor for NavigationPath.CollectionProxy);
  dispatch thunk of Collection.startIndex.getter(v60, v11, v20);
  *(_QWORD *)&v17[*(int *)(v14 + 36)] = *(_QWORD *)&v60[0];
  v21 = (uint64_t)v17;
  v22 = v9;
  sub_10007E96C(v21, (uint64_t)v19, &qword_10015C580);
  v23 = *(int *)(v14 + 36);
  v24 = v8;
  v25 = &v19[v23];
  v26 = *(_QWORD *)&v19[v23];
  dispatch thunk of Collection.endIndex.getter(v59, v11, v20);
  if (v26 != v59[0])
  {
    *(_QWORD *)&v27 = 141558275;
    v49 = v27;
    v50 = v7;
    v51 = a3;
    v53 = v22;
    v54 = v24;
    do
    {
      v30 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read(v59, v25, v11, v20);
      sub_10003CE00(v31, (uint64_t)v60);
      v30(v59, 0);
      v32 = v57;
      v56(v57, (uint64_t)v19, v11);
      dispatch thunk of Collection.formIndex(after:)(v25, v11, v20);
      (*(void (**)(char *, uint64_t))(v58 + 8))(v32, v11);
      sub_10003CDE8(v60, (uint64_t)v59);
      v33 = sub_100004FC8(&qword_10015C598);
      v34 = swift_dynamicCast(v7, v59, v33, v24, 6);
      v35 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56);
      if ((v34 & 1) != 0)
      {
        v35(v7, 0, 1, v24);
        v36 = v55;
        v37 = (*(uint64_t (**)(char *, char *, uint64_t))(v22 + 32))(v55, v7, v24);
        v38 = PreferencesControllerRecipe.viewControllerIfLoaded.getter(v37);
        if (v38)
        {
          v39 = (void *)v38;
          if (qword_100156C98 != -1)
            swift_once(&qword_100156C98, sub_10008BDC4);
          v40 = type metadata accessor for Logger(0);
          sub_100007808(v40, (uint64_t)qword_10015D280);
          v41 = v39;
          v42 = Logger.logObject.getter(v41);
          v43 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v42, v43))
          {
            v44 = swift_slowAlloc(22, -1);
            v45 = (_QWORD *)swift_slowAlloc(8, -1);
            *(_DWORD *)v44 = v49;
            *(_QWORD *)(v44 + 4) = 1752392040;
            *(_WORD *)(v44 + 12) = 2113;
            *(_QWORD *)(v44 + 14) = v41;
            *v45 = v39;
            _os_log_impl((void *)&_mh_execute_header, v42, v43, v52, (uint8_t *)v44, 0x16u);
            v46 = sub_100004FC8(&qword_10015AF10);
            swift_arrayDestroy(v45, 1, v46);
            v47 = v45;
            v7 = v50;
            swift_slowDealloc(v47, -1, -1);
            v48 = v44;
            a3 = v51;
            swift_slowDealloc(v48, -1, -1);
          }
          else
          {

            v42 = v41;
          }
          v22 = v53;
          v24 = v54;

          if ((-[NSObject respondsToSelector:](v41, "respondsToSelector:", *a3) & 1) != 0)
            objc_msgSend(v41, *a3);

          (*(void (**)(char *, uint64_t))(v22 + 8))(v55, v24);
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v22 + 8))(v36, v24);
        }
      }
      else
      {
        v35(v7, 1, 1, v24);
        sub_10000BA50((uint64_t)v7, &qword_10015C560);
      }
      v29 = *(_QWORD *)v25;
      dispatch thunk of Collection.endIndex.getter(v59, v11, v20);
    }
    while (v29 != v59[0]);
  }
  return sub_10000BA50((uint64_t)v19, &qword_10015C580);
}

void sub_1000E9DD4(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (qword_100156C98 != -1)
    swift_once(&qword_100156C98, sub_10008BDC4);
  v6 = type metadata accessor for Logger(0);
  sub_100007808(v6, (uint64_t)qword_10015D280);
  v7 = swift_retain_n(a1, 2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc(22, -1);
    v11 = swift_slowAlloc(64, -1);
    v16 = v11;
    *(_DWORD *)v10 = 136315394;
    v12 = _typeName(_:qualified:)(*a1, 0);
    v14 = v13;
    v15 = sub_1000DA1F0(v12, v13, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v10 + 4, v10 + 12);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease(v14);
    *(_WORD *)(v10 + 12) = 2080;
    v15 = sub_1000DA1F0(a2, a3, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v10 + 14, v10 + 22);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "…Complete (%s.%s)", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v11, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

    swift_release_n(a1, 2);
  }
}

uint64_t sub_1000E9FB4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v25;
  void (*v26)(_QWORD *, _QWORD);
  uint64_t v27;
  uint64_t v28;
  char v29;
  void (*v30)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  os_log_t v44;
  __int128 v45;
  _QWORD *v46;
  NSObject *v47;
  os_log_t v48;
  uint64_t v49;
  char *v50;
  void (*v51)(char *, uint64_t, uint64_t);
  uint64_t v52;
  _QWORD v53[5];
  __int128 v54[3];

  v2 = sub_100004FC8(&qword_10015C560);
  __chkstk_darwin(v2);
  v4 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PreferencesControllerRecipe(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v50 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for NavigationPath.CollectionProxy(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100004FC8(&qword_10015C580);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v45 - v16;
  v51 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v52 = v9;
  v51(v15, a1, v8);
  v18 = sub_100007828(&qword_10015C588, (uint64_t (*)(uint64_t))&type metadata accessor for NavigationPath.CollectionProxy, (uint64_t)&protocol conformance descriptor for NavigationPath.CollectionProxy);
  dispatch thunk of Collection.startIndex.getter(v54, v8, v18);
  *(_QWORD *)&v15[*(int *)(v12 + 36)] = *(_QWORD *)&v54[0];
  sub_10007E96C((uint64_t)v15, (uint64_t)v17, &qword_10015C580);
  v19 = *(int *)(v12 + 36);
  v20 = v6;
  v21 = &v17[v19];
  v22 = *(_QWORD *)&v17[v19];
  dispatch thunk of Collection.endIndex.getter(v53, v8, v18);
  if (v22 != v53[0])
  {
    *(_QWORD *)&v23 = 141558275;
    v45 = v23;
    v49 = v20;
    do
    {
      v26 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read(v53, v21, v8, v18);
      sub_10003CE00(v27, (uint64_t)v54);
      v26(v53, 0);
      v51(v11, (uint64_t)v17, v8);
      dispatch thunk of Collection.formIndex(after:)(v21, v8, v18);
      (*(void (**)(char *, uint64_t))(v52 + 8))(v11, v8);
      sub_10003CDE8(v54, (uint64_t)v53);
      v28 = sub_100004FC8(&qword_10015C598);
      v29 = swift_dynamicCast(v4, v53, v28, v5, 6);
      v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56);
      if ((v29 & 1) != 0)
      {
        v30(v4, 0, 1, v5);
        v31 = (*(uint64_t (**)(char *, char *, uint64_t))(v20 + 32))(v50, v4, v5);
        v32 = PreferencesControllerRecipe.viewControllerIfLoaded.getter(v31);
        if (!v32)
          goto LABEL_18;
        v33 = (void *)v32;
        v34 = objc_opt_self(PSListController);
        v35 = (void *)swift_dynamicCastObjCClass(v33, v34);
        if (!v35)
          goto LABEL_17;
        v36 = v35;
        if (objc_msgSend(v35, "shouldReloadSpecifiersOnResume"))
        {
          if (qword_100156C90 != -1)
            swift_once(&qword_100156C90, sub_10008BDA4);
          v37 = type metadata accessor for Logger(0);
          sub_100007808(v37, (uint64_t)qword_10015D268);
          v47 = v33;
          v38 = Logger.logObject.getter(v47);
          v39 = static os_log_type_t.default.getter();
          v48 = v38;
          if (os_log_type_enabled(v38, v39))
          {
            v40 = swift_slowAlloc(22, -1);
            v41 = (_QWORD *)swift_slowAlloc(8, -1);
            v46 = v41;
            *(_DWORD *)v40 = v45;
            *(_QWORD *)(v40 + 4) = 1752392040;
            *(_WORD *)(v40 + 12) = 2113;
            *(_QWORD *)(v40 + 14) = v36;
            *v41 = v36;
            _os_log_impl((void *)&_mh_execute_header, v48, v39, "Reloading specifiers on resume for %{private,mask.hash}@.", (uint8_t *)v40, 0x16u);
            v42 = sub_100004FC8(&qword_10015AF10);
            v43 = v46;
            swift_arrayDestroy(v46, 1, v42);
            swift_slowDealloc(v43, -1, -1);
            swift_slowDealloc(v40, -1, -1);
            v33 = v47;
            v44 = v48;
          }
          else
          {

            v33 = v47;
            v44 = v47;
          }

          objc_msgSend(v36, "reloadSpecifiers");
LABEL_17:

          v20 = v49;
LABEL_18:
          (*(void (**)(char *, uint64_t))(v20 + 8))(v50, v5);
          goto LABEL_5;
        }
        v20 = v49;
        (*(void (**)(char *, uint64_t))(v49 + 8))(v50, v5);

      }
      else
      {
        v30(v4, 1, 1, v5);
        sub_10000BA50((uint64_t)v4, &qword_10015C560);
      }
LABEL_5:
      v25 = *(_QWORD *)v21;
      dispatch thunk of Collection.endIndex.getter(v53, v8, v18);
    }
    while (v25 != v53[0]);
  }
  return sub_10000BA50((uint64_t)v17, &qword_10015C580);
}

void sub_1000EA488(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  _QWORD *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int EnumCaseMultiPayload;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int (*v78)(uint64_t, uint64_t, uint64_t);
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t KeyPath;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  NSObject *v96;
  os_log_type_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  os_log_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;

  v4 = v3;
  v112 = a1;
  v113 = type metadata accessor for SettingsAppDetailContent(0);
  __chkstk_darwin(v113);
  v114 = (uint64_t)&v103 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = type metadata accessor for NavigationPath(0);
  v116 = *(_QWORD *)(v117 - 8);
  __chkstk_darwin(v117);
  v115 = (char *)&v103 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = sub_100004FC8(&qword_10015AD68);
  __chkstk_darwin(v122);
  v10 = (char *)&v103 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = type metadata accessor for SettingsURLDestination.Action(0);
  __chkstk_darwin(v120);
  v128 = (char *)&v103 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v131 = *(_QWORD *)(v12 - 8);
  v13 = __chkstk_darwin(v12);
  v111 = (uint64_t)&v103 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v129 = (char *)&v103 - v16;
  v17 = __chkstk_darwin(v15);
  v130 = (char *)&v103 - v18;
  v19 = __chkstk_darwin(v17);
  v121 = (uint64_t)&v103 - v20;
  __chkstk_darwin(v19);
  v110 = (uint64_t)&v103 - v21;
  v22 = sub_100004FC8((uint64_t *)&unk_10015C400);
  __chkstk_darwin(v22);
  v127 = (uint64_t)&v103 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for SettingsURLDestination(0);
  v125 = *(_QWORD *)(v24 - 8);
  v126 = v24;
  __chkstk_darwin(v24);
  v119 = (uint64_t)&v103 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = sub_100004FC8(&qword_10015C890);
  v26 = __chkstk_darwin(v118);
  v109 = (uint64_t)&v103 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v26);
  v30 = (char *)&v103 - v29;
  v31 = __chkstk_darwin(v28);
  v33 = (char *)&v103 - v32;
  __chkstk_darwin(v31);
  v35 = (char *)&v103 - v34;
  if (qword_100156CA0 != -1)
    swift_once(&qword_100156CA0, sub_10008BDE8);
  v36 = type metadata accessor for Logger(0);
  v37 = sub_100007808(v36, (uint64_t)qword_10015D298);
  v123 = a2;
  sub_100018C00(a2, (uint64_t)v35, &qword_10015C890);
  v124 = a3;
  sub_100018C00(a3, (uint64_t)v33, &qword_10015C890);
  v38 = swift_retain_n(v4, 2);
  v108 = v37;
  v39 = Logger.logObject.getter(v38);
  v40 = static os_log_type_t.info.getter();
  v41 = v40;
  if (os_log_type_enabled(v39, v40))
  {
    v42 = swift_slowAlloc(42, -1);
    v105 = v41;
    v43 = v42;
    v106 = swift_slowAlloc(128, -1);
    v135 = v106;
    *(_DWORD *)v43 = 136315906;
    v104 = v39;
    v44 = _typeName(_:qualified:)(*v4, 0);
    v46 = v45;
    v134 = (_QWORD *)sub_1000DA1F0(v44, v45, &v135);
    v107 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135, v43 + 4, v43 + 12);
    swift_release_n(v4, 2);
    swift_bridgeObjectRelease(v46);
    *(_WORD *)(v43 + 12) = 2080;
    v134 = (_QWORD *)sub_1000DA1F0(0xD000000000000037, 0x8000000100126FD0, &v135);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135, v43 + 14, v43 + 22);
    *(_WORD *)(v43 + 22) = 2082;
    sub_100018C00((uint64_t)v35, (uint64_t)v30, &qword_10015C890);
    v47 = v118;
    v48 = String.init<A>(describing:)(v30, v118);
    v49 = v10;
    v50 = v4;
    v52 = v51;
    v134 = (_QWORD *)sub_1000DA1F0(v48, v51, &v135);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135, v43 + 24, v43 + 32);
    v53 = v52;
    v4 = v50;
    v10 = v49;
    swift_bridgeObjectRelease(v53);
    sub_10000BA50((uint64_t)v35, &qword_10015C890);
    *(_WORD *)(v43 + 32) = 2082;
    sub_100018C00((uint64_t)v33, (uint64_t)v30, &qword_10015C890);
    v54 = String.init<A>(describing:)(v30, v47);
    v56 = v55;
    v134 = (_QWORD *)sub_1000DA1F0(v54, v55, &v135);
    v12 = v107;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135, v43 + 34, v43 + 42);
    swift_bridgeObjectRelease(v56);
    sub_10000BA50((uint64_t)v33, &qword_10015C890);
    v39 = v104;
    _os_log_impl((void *)&_mh_execute_header, v104, (os_log_type_t)v105, "(%s.%s): '%{public}s' → '%{public}s'", (uint8_t *)v43, 0x2Au);
    v57 = v106;
    swift_arrayDestroy(v106, 4, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v57, -1, -1);
    swift_slowDealloc(v43, -1, -1);
  }
  else
  {
    swift_release_n(v4, 2);
    sub_10000BA50((uint64_t)v35, &qword_10015C890);
    sub_10000BA50((uint64_t)v33, &qword_10015C890);
  }

  v58 = (uint64_t)v128;
  v59 = (uint64_t)v129;
  v60 = (uint64_t)v4 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel_currentlyInProgressURLDestination;
  swift_beginAccess((char *)v4 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel_currentlyInProgressURLDestination, &v135, 0, 0);
  v61 = v127;
  sub_100018C00(v60, v127, (uint64_t *)&unk_10015C400);
  v62 = v126;
  v63 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v125 + 48))(v61, 1, v126);
  v64 = (uint64_t)v130;
  v65 = v131;
  if (v63 == 1)
  {
    sub_10000BA50(v61, (uint64_t *)&unk_10015C400);
    goto LABEL_14;
  }
  v66 = v61;
  v67 = v119;
  sub_100007670(v66, v119, type metadata accessor for SettingsURLDestination);
  sub_1000076F0(v67 + *(int *)(v62 + 20), v58, type metadata accessor for SettingsURLDestination.Action);
  sub_1000076B4(v67, type metadata accessor for SettingsURLDestination);
  if (swift_getEnumCaseMultiPayload(v58, v120) != 1)
  {
    sub_1000076B4(v58, type metadata accessor for SettingsURLDestination.Action);
    goto LABEL_14;
  }
  v68 = v58;
  v69 = v110;
  sub_100007670(v68, v110, type metadata accessor for PrimarySettingsListItemIdentifier);
  v70 = v69;
  v71 = v121;
  sub_100007670(v70, v121, type metadata accessor for PrimarySettingsListItemIdentifier);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v71, v12);
  if (EnumCaseMultiPayload == 2)
  {
    v74 = sub_100004FC8(&qword_10015C420);
    v75 = v121;
    swift_bridgeObjectRelease(*(_QWORD *)(v121 + *(int *)(v74 + 48) + 8));
    v76 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 8))(v75, v76);
LABEL_14:
    v77 = (uint64_t)&v10[*(int *)(v122 + 48)];
    sub_100018C00(v123, (uint64_t)v10, &qword_10015C890);
    sub_100018C00(v124, v77, &qword_10015C890);
    v78 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v65 + 48);
    if (v78(v77, 1, v12) == 1)
    {
      v79 = &qword_10015AD68;
LABEL_19:
      v87 = (uint64_t)v10;
LABEL_22:
      sub_10000BA50(v87, v79);
      return;
    }
    if (v78((uint64_t)v10, 1, v12) != 1)
    {
      v80 = v109;
      sub_100018C00((uint64_t)v10, v109, &qword_10015C890);
      sub_100007670(v80, v64, type metadata accessor for PrimarySettingsListItemIdentifier);
      sub_1000076F0(v77, v59, type metadata accessor for PrimarySettingsListItemIdentifier);
      sub_1000A103C(v64, v59);
      if ((v81 & 1) != 0)
      {
        v82 = v64;
        v83 = v115;
        NavigationPath.init()(v81);
        v84 = v59;
        KeyPath = swift_getKeyPath(&unk_10011B138);
        __chkstk_darwin(KeyPath);
        *(&v103 - 2) = (uint64_t)v4;
        *(&v103 - 1) = (uint64_t)v83;
        v134 = v4;
        v86 = sub_100007828((unint64_t *)&qword_100158F78, type metadata accessor for SettingsAppNavigationModel, (uint64_t)&unk_10011B030);
        ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v134, KeyPath, sub_1000F1C04, &v103 - 4, (char *)&type metadata for () + 8, v86);
        swift_release(KeyPath);
        (*(void (**)(char *, uint64_t))(v116 + 8))(v83, v117);
        sub_1000076B4(v84, type metadata accessor for PrimarySettingsListItemIdentifier);
        sub_1000076B4(v82, type metadata accessor for PrimarySettingsListItemIdentifier);
        sub_1000076B4(v77, type metadata accessor for PrimarySettingsListItemIdentifier);
        v79 = &qword_10015C890;
        goto LABEL_19;
      }
      sub_1000076B4(v59, type metadata accessor for PrimarySettingsListItemIdentifier);
      sub_1000076B4(v64, type metadata accessor for PrimarySettingsListItemIdentifier);
    }
    v88 = v111;
    v89 = sub_100007670(v77, v111, type metadata accessor for PrimarySettingsListItemIdentifier);
    v90 = v115;
    NavigationPath.init()(v89);
    v91 = swift_getKeyPath(&unk_10011B138);
    __chkstk_darwin(v91);
    *(&v103 - 2) = (uint64_t)v4;
    *(&v103 - 1) = (uint64_t)v90;
    v129 = (char *)v4 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel___observationRegistrar;
    v134 = v4;
    v128 = (char *)sub_100007828((unint64_t *)&qword_100158F78, type metadata accessor for SettingsAppNavigationModel, (uint64_t)&unk_10011B030);
    v130 = v10;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v134, v91, sub_1000F1C04, &v103 - 4, (char *)&type metadata for () + 8, v128);
    swift_release(v91);
    (*(void (**)(char *, uint64_t))(v116 + 8))(v90, v117);
    v92 = sub_1000BADA4(v112);
    v93 = v114;
    sub_1000076F0(v88, v114, type metadata accessor for PrimarySettingsListItemIdentifier);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v65 + 56))(v93, 0, 1, v12);
    *(_QWORD *)(v93 + *(int *)(v113 + 20)) = v92;
    v94 = swift_getKeyPath(&unk_10011B0C0);
    __chkstk_darwin(v94);
    *(&v103 - 2) = (uint64_t)v4;
    *(&v103 - 1) = v93;
    v134 = v4;
    swift_retain(v92 & 0x3FFFFFFFFFFFFFFFLL);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v134, v94, sub_1000F1BF0, &v103 - 4, (char *)&type metadata for () + 8, v128);
    swift_release(v94);
    sub_1000076B4(v93, type metadata accessor for SettingsAppDetailContent);
    swift_release(v92 & 0x3FFFFFFFFFFFFFFFLL);
    sub_1000076B4(v88, type metadata accessor for PrimarySettingsListItemIdentifier);
    v79 = &qword_10015C890;
    v87 = (uint64_t)v130;
    goto LABEL_22;
  }
  if (!EnumCaseMultiPayload)
  {
    v73 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 8))(v121, v73);
    goto LABEL_14;
  }
  sub_1000076B4(v121, type metadata accessor for PrimarySettingsListItemIdentifier);
  v95 = swift_retain_n(v4, 2);
  v96 = Logger.logObject.getter(v95);
  v97 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v96, v97))
  {
    v98 = swift_slowAlloc(22, -1);
    v99 = swift_slowAlloc(64, -1);
    v134 = (_QWORD *)v99;
    *(_DWORD *)v98 = 136315394;
    v100 = _typeName(_:qualified:)(*v4, 0);
    v102 = v101;
    v132 = sub_1000DA1F0(v100, v101, (uint64_t *)&v134);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133, v98 + 4, v98 + 12);
    swift_release_n(v4, 2);
    swift_bridgeObjectRelease(v102);
    *(_WORD *)(v98 + 12) = 2080;
    v132 = sub_1000DA1F0(0xD000000000000037, 0x8000000100126FD0, (uint64_t *)&v134);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133, v98 + 14, v98 + 22);
    _os_log_impl((void *)&_mh_execute_header, v96, v97, "(%s.%s): URL in progress, trusting URL handling to set the detail content and NavigationPath.", (uint8_t *)v98, 0x16u);
    swift_arrayDestroy(v99, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v99, -1, -1);
    swift_slowDealloc(v98, -1, -1);

  }
  else
  {

    swift_release_n(v4, 2);
  }
}

id sub_1000EB19C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  id result;
  char v31;
  char v32;
  void *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t KeyPath;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  _BOOL4 v66;
  uint64_t v67;
  uint8_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD v85[4];
  char v86[32];

  v74 = a1;
  v4 = type metadata accessor for NavigationPath(0);
  v77 = *(_QWORD *)(v4 - 8);
  v78 = v4;
  __chkstk_darwin(v4);
  v76 = (char *)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = type metadata accessor for SettingsAppDetailContent(0);
  v6 = __chkstk_darwin(v73);
  v75 = (uint64_t)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v79 = (uint64_t)&v71 - v8;
  v9 = type metadata accessor for SettingsURLDestination.Action(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100004FC8((uint64_t *)&unk_10015C400);
  v13 = __chkstk_darwin(v12);
  v72 = (char *)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v16 = (char *)&v71 - v15;
  v84 = type metadata accessor for SettingsURLDestination(0);
  v82 = *(_QWORD *)(v84 - 8);
  __chkstk_darwin(v84);
  v81 = (uint64_t)&v71 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100004FC8(&qword_10015C890);
  __chkstk_darwin(v18);
  v20 = (char *)&v71 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = __chkstk_darwin(v21);
  v80 = (uint64_t)&v71 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v23);
  v27 = (char *)&v71 - v26;
  __chkstk_darwin(v25);
  v29 = (char *)&v71 - v28;
  sub_100018C00(a3, (uint64_t)v20, &qword_10015C890);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) == 1)
    return (id)sub_10000BA50((uint64_t)v20, &qword_10015C890);
  sub_100007670((uint64_t)v20, (uint64_t)v29, type metadata accessor for PrimarySettingsListItemIdentifier);
  swift_storeEnumTagMultiPayload(v27, v21, 33);
  sub_1000A103C((uint64_t)v29, (uint64_t)v27);
  v32 = v31;
  sub_1000076B4((uint64_t)v27, type metadata accessor for PrimarySettingsListItemIdentifier);
  if ((v32 & 1) == 0)
    goto LABEL_8;
  result = objc_msgSend((id)objc_opt_self(MCProfileConnection), "sharedConnection");
  if (result)
  {
    v33 = result;
    v34 = objc_msgSend(result, "isPasscodeSet");

    v35 = v84;
    if (v34)
    {
      v36 = v83;
      v37 = v83 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel_currentlyInProgressURLDestination;
      swift_beginAccess(v83 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel_currentlyInProgressURLDestination, v86, 0, 0);
      sub_100018C00(v37, (uint64_t)v16, (uint64_t *)&unk_10015C400);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v82 + 48))(v16, 1, v35) == 1)
      {
        sub_1000076B4((uint64_t)v29, type metadata accessor for PrimarySettingsListItemIdentifier);
        return (id)sub_10000BA50((uint64_t)v16, (uint64_t *)&unk_10015C400);
      }
      v40 = v81;
      sub_100007670((uint64_t)v16, v81, type metadata accessor for SettingsURLDestination);
      sub_1000076F0(v40 + *(int *)(v35 + 20), (uint64_t)v11, type metadata accessor for SettingsURLDestination.Action);
      if (swift_getEnumCaseMultiPayload(v11, v9) == 1)
      {
        v41 = (uint64_t)v11;
        v42 = v80;
        sub_100007670(v41, v80, type metadata accessor for PrimarySettingsListItemIdentifier);
        sub_1000A103C(v42, (uint64_t)v29);
        if ((v43 & 1) != 0)
        {
          v71 = v37;
          v44 = v36;
          v45 = sub_1000BADA4(v74);
          v46 = v79;
          sub_1000076F0((uint64_t)v29, v79, type metadata accessor for PrimarySettingsListItemIdentifier);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v22 + 56))(v46, 0, 1, v21);
          v74 = *(int *)(v73 + 20);
          *(_QWORD *)(v46 + v74) = v45;
          v47 = v75;
          sub_1000076F0(v46, v75, type metadata accessor for SettingsAppDetailContent);
          KeyPath = swift_getKeyPath(&unk_10011B0C0);
          __chkstk_darwin(KeyPath);
          *(&v71 - 2) = v44;
          *(&v71 - 1) = v47;
          v85[0] = v44;
          v49 = v45 & 0x3FFFFFFFFFFFFFFFLL;
          v50 = sub_100007828((unint64_t *)&qword_100158F78, type metadata accessor for SettingsAppNavigationModel, (uint64_t)&unk_10011B030);
          v73 = v49;
          swift_retain(v49);
          ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v85, KeyPath, sub_1000F1BF0, &v71 - 4, (char *)&type metadata for () + 8, v50);
          swift_release(KeyPath);
          v51 = sub_1000076B4(v47, type metadata accessor for SettingsAppDetailContent);
          v52 = v76;
          NavigationPath.init()(v51);
          v53 = swift_getKeyPath(&unk_10011B138);
          __chkstk_darwin(v53);
          *(&v71 - 2) = v44;
          *(&v71 - 1) = (uint64_t)v52;
          v85[0] = v44;
          v54 = v46;
          ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v85, v53, sub_1000F0368, &v71 - 4, (char *)&type metadata for () + 8, v50);
          swift_release(v53);
          (*(void (**)(char *, uint64_t))(v77 + 8))(v52, v78);
          v55 = *(_QWORD *)(v46 + v74);
          if (v55 >> 62 == 1)
          {
            v56 = v55 & 0x3FFFFFFFFFFFFFFFLL;
            v57 = swift_retain(v55 & 0x3FFFFFFFFFFFFFFFLL);
            v58 = (char *)PreferencesControllerRepresentableModel.makeViewControllerIfNeeded()(v57);
            v40 = v81;
            sub_1000E64F8(v81, v58, 0);
            swift_release(v73);
            swift_release(v56);

          }
          else
          {
            v60 = v73;
            v40 = v81;
            v61 = v84;
            if (qword_100156CA0 != -1)
              swift_once(&qword_100156CA0, sub_10008BDE8);
            v62 = type metadata accessor for Logger(0);
            v63 = sub_100007808(v62, (uint64_t)qword_10015D298);
            v64 = Logger.logObject.getter(v63);
            v65 = static os_log_type_t.fault.getter(v64);
            v66 = os_log_type_enabled(v64, v65);
            v67 = v71;
            if (v66)
            {
              v68 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v68 = 0;
              _os_log_impl((void *)&_mh_execute_header, v64, v65, "Passcode controller was unexpectedly not a preferencesController", v68, 2u);
              swift_slowDealloc(v68, -1, -1);
            }

            v69 = (uint64_t)v72;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v82 + 56))(v72, 1, 1, v61);
            swift_beginAccess(v67, v85, 33, 0);
            sub_1000F1B58(v69, v67, (uint64_t *)&unk_10015C400);
            v70 = swift_endAccess(v85);
            sub_1000DE57C(v70);
            sub_10000BA50(v69, (uint64_t *)&unk_10015C400);
            swift_release(v60);
          }
          sub_1000076B4(v54, type metadata accessor for SettingsAppDetailContent);
          v59 = v80;
        }
        else
        {
          v59 = v42;
        }
        sub_1000076B4(v59, type metadata accessor for PrimarySettingsListItemIdentifier);
        sub_1000076B4(v40, type metadata accessor for SettingsURLDestination);
        v39 = (uint64_t)v29;
        v38 = type metadata accessor for PrimarySettingsListItemIdentifier;
      }
      else
      {
        sub_1000076B4(v40, type metadata accessor for SettingsURLDestination);
        sub_1000076B4((uint64_t)v29, type metadata accessor for PrimarySettingsListItemIdentifier);
        v38 = type metadata accessor for SettingsURLDestination.Action;
        v39 = (uint64_t)v11;
      }
      return (id)sub_1000076B4(v39, v38);
    }
LABEL_8:
    v38 = type metadata accessor for PrimarySettingsListItemIdentifier;
    v39 = (uint64_t)v29;
    return (id)sub_1000076B4(v39, v38);
  }
  __break(1u);
  return result;
}

BOOL sub_1000EB980(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint8_t *v30;
  os_log_type_t v31;
  const char *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39[3];

  v2 = v1;
  v4 = sub_100004FC8((uint64_t *)&unk_10015C400);
  __chkstk_darwin(v4);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100156CB0 != -1)
    swift_once(&qword_100156CB0, sub_10008BE28);
  v7 = type metadata accessor for Logger(0);
  v8 = sub_100007808(v7, (uint64_t)qword_10015D2C8);
  swift_retain_n(v2, 2);
  v9 = swift_bridgeObjectRetain_n(a1, 2);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc(42, -1);
    v36 = v8;
    v13 = v12;
    v35 = swift_slowAlloc(96, -1);
    v39[0] = v35;
    *(_DWORD *)v13 = 136315907;
    v14 = _typeName(_:qualified:)(*v2, 0);
    v37 = v2;
    v15 = a1;
    v17 = v16;
    v38 = sub_1000DA1F0(v14, v16, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39, v13 + 4, v13 + 12);
    swift_release_n(v37, 2);
    swift_bridgeObjectRelease(v17);
    *(_WORD *)(v13 + 12) = 2080;
    v38 = sub_1000DA1F0(0xD000000000000039, 0x8000000100127010, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39, v13 + 14, v13 + 22);
    *(_WORD *)(v13 + 22) = 2160;
    v38 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39, v13 + 24, v13 + 32);
    *(_WORD *)(v13 + 32) = 2081;
    v18 = swift_bridgeObjectRetain(v15);
    v19 = Dictionary.description.getter(v18, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
    v21 = v20;
    swift_bridgeObjectRelease(v15);
    v38 = sub_1000DA1F0(v19, v21, v39);
    a1 = v15;
    v2 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39, v13 + 34, v13 + 42);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease(v21);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Start (%s.%s), resourceDictionary: '%{private,mask.hash}s'…", (uint8_t *)v13, 0x2Au);
    v22 = v35;
    swift_arrayDestroy(v35, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v13, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
    swift_release_n(v2, 2);
  }
  v23 = (uint64_t)v2 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel_pendingURLDestination;
  swift_beginAccess((char *)v2 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel_pendingURLDestination, v39, 0, 0);
  sub_100018C00(v23, (uint64_t)v6, (uint64_t *)&unk_10015C400);
  v24 = type metadata accessor for SettingsURLDestination(0);
  v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 48))(v6, 1, v24);
  v26 = sub_10000BA50((uint64_t)v6, (uint64_t *)&unk_10015C400);
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.default.getter();
  v29 = os_log_type_enabled(v27, v28);
  if (v25 == 1)
  {
    if (v29)
    {
      v30 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v30 = 0;
      v31 = v28;
      v32 = "No pending request found, should continue active URL routing.";
LABEL_11:
      _os_log_impl((void *)&_mh_execute_header, v27, v31, v32, v30, 2u);
      swift_slowDealloc(v30, -1, -1);
    }
  }
  else if (v29)
  {
    v30 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v30 = 0;
    v31 = v28;
    v32 = "Pending request found, should stop active URL routing.";
    goto LABEL_11;
  }

  sub_1000EBDA0(v2, a1);
  return v25 == 1;
}

void sub_1000EBDA0(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (qword_100156CB0 != -1)
    swift_once(&qword_100156CB0, sub_10008BE28);
  v4 = type metadata accessor for Logger(0);
  sub_100007808(v4, (uint64_t)qword_10015D2C8);
  swift_retain_n(a1, 2);
  v5 = swift_bridgeObjectRetain_n(a2, 2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = swift_slowAlloc(42, -1);
    v9 = swift_slowAlloc(96, -1);
    v18 = v9;
    *(_DWORD *)v8 = 136315907;
    v10 = _typeName(_:qualified:)(*a1, 0);
    v12 = v11;
    v17 = sub_1000DA1F0(v10, v11, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v8 + 4, v8 + 12);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease(v12);
    *(_WORD *)(v8 + 12) = 2080;
    v17 = sub_1000DA1F0(0xD000000000000039, 0x8000000100127010, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v8 + 14, v8 + 22);
    *(_WORD *)(v8 + 22) = 2160;
    v17 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v8 + 24, v8 + 32);
    *(_WORD *)(v8 + 32) = 2081;
    v13 = swift_bridgeObjectRetain(a2);
    v14 = Dictionary.description.getter(v13, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
    v16 = v15;
    swift_bridgeObjectRelease(a2);
    v17 = sub_1000DA1F0(v14, v16, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v8 + 34, v8 + 42);
    swift_bridgeObjectRelease_n(a2, 2);
    swift_bridgeObjectRelease(v16);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "…Complete (%s.%s), resourceDictionary: '%{private,mask.hash}s'.", (uint8_t *)v8, 0x2Au);
    swift_arrayDestroy(v9, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
    swift_release_n(a1, 2);
  }
}

uint64_t sub_1000EC0C0(void *a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[16];
  uint64_t v24;
  __objc2_prot *v25;

  v5 = type metadata accessor for SettingsAnyPlatformViewControllerRecipe(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for PreferencesControllerRecipe(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v23[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v25 = &OBJC_PROTOCOL___PSController;
  v13 = swift_dynamicCastObjCProtocolConditional(a1, 1, &v25);
  v14 = a1;
  if (v13)
  {
    v15 = v14;
    v16 = PreferencesControllerRecipe.init(viewController:)(v13);
    __chkstk_darwin(v16);
    *(_QWORD *)&v23[-16] = v2;
    *(_QWORD *)&v23[-8] = v12;
    v24 = 0;
    Transaction.disablesAnimations.setter((a2 & 1) == 0);
    v17 = v24;
    swift_retain(v24);
    withTransaction<A>(_:_:)(v18, sub_1000F1B20, &v23[-32], (char *)&type metadata for () + 8);

    swift_release_n(v17, 2);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);
  }
  else
  {
    v20 = SettingsAnyPlatformViewControllerRecipe.init(_:)(v14);
    __chkstk_darwin(v20);
    *(_QWORD *)&v23[-16] = v2;
    *(_QWORD *)&v23[-8] = v8;
    v24 = 0;
    Transaction.disablesAnimations.setter((a2 & 1) == 0);
    v21 = v24;
    swift_retain(v24);
    withTransaction<A>(_:_:)(v22, sub_1000F1AF0, &v23[-32], (char *)&type metadata for () + 8);
    swift_release_n(v21, 2);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
  }
}

uint64_t sub_1000EC2C8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v17[3];

  KeyPath = swift_getKeyPath(&unk_10011B138);
  v17[0] = a1;
  v10 = sub_100007828((unint64_t *)&qword_100158F78, type metadata accessor for SettingsAppNavigationModel, (uint64_t)&unk_10011B030);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v17, KeyPath, v10);
  swift_release(KeyPath);
  v17[0] = a1;
  v11 = swift_getKeyPath(&unk_10011B138);
  ObservationRegistrar.willSet<A, B>(_:keyPath:)(v17, v11, v10);
  swift_release(v11);
  swift_beginAccess(a1 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__navigationPath, v17, 33, 0);
  v12 = a3(0);
  v13 = sub_100007828(a4, a3, a5);
  NavigationPath.append<A>(_:)(a2, v12, v13);
  swift_endAccess(v17);
  v17[0] = a1;
  v14 = swift_getKeyPath(&unk_10011B138);
  ObservationRegistrar.didSet<A, B>(_:keyPath:)(v17, v14, v10);
  return swift_release(v14);
}

uint64_t sub_1000EC424(void *a1, char a2)
{
  return sub_1000EC0C0(a1, a2);
}

uint64_t sub_1000EC444()
{
  uint64_t v0;

  return sub_1000E31D8(v0);
}

uint64_t sub_1000EC44C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000EC470(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004FC8((uint64_t *)&unk_10015C400);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000EC4B8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000DE2D8(a1, (uint64_t)&unk_10011B098, &OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__horizontalSizeClass, (uint64_t)&unk_10015C3F0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100018C00, a2);
}

uint64_t sub_1000EC4F0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000DE2D8(a1, (uint64_t)&unk_10011B0C0, &OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__detailContent, (uint64_t)type metadata accessor for SettingsAppDetailContent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000076F0, a2);
}

uint64_t sub_1000EC528()
{
  uint64_t v0;

  return sub_1000DE4A8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_1000EC548()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel__shouldDismissSearch) = *(_BYTE *)(v0 + 24);
}

uint64_t sub_1000EC568(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SettingsAppDetailContent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

NSString sub_1000EC5AC()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_10015D440 = (uint64_t)result;
  return result;
}

Swift::Int sub_1000EC5E0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  Swift::Int result;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  _QWORD *v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47[9];

  v3 = v2;
  v6 = type metadata accessor for PrimarySettingsListItemModel(0);
  v44 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v45 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_100004FC8((uint64_t *)&unk_10015C5C0);
  v46 = a2;
  v13 = static _DictionaryStorage.resize(original:capacity:move:)(v12, a1, a2);
  v14 = v13;
  if (!*(_QWORD *)(v12 + 16))
    goto LABEL_43;
  v15 = 1 << *(_BYTE *)(v12 + 32);
  v16 = *(_QWORD *)(v12 + 64);
  v43 = (_QWORD *)(v12 + 64);
  if (v15 < 64)
    v17 = ~(-1 << v15);
  else
    v17 = -1;
  v18 = v17 & v16;
  v41 = v3;
  v42 = (unint64_t)(v15 + 63) >> 6;
  v19 = v13 + 64;
  result = swift_retain(v12);
  v21 = 0;
  while (1)
  {
    if (v18)
    {
      v23 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v24 = v23 | (v21 << 6);
      goto LABEL_24;
    }
    v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v25 >= v42)
      break;
    v26 = v43;
    v27 = v43[v25];
    ++v21;
    if (!v27)
    {
      v21 = v25 + 1;
      if (v25 + 1 >= v42)
        goto LABEL_36;
      v27 = v43[v21];
      if (!v27)
      {
        v28 = v25 + 2;
        if (v28 >= v42)
        {
LABEL_36:
          swift_release(v12);
          v3 = v41;
          if ((v46 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v27 = v43[v28];
        if (!v27)
        {
          while (1)
          {
            v21 = v28 + 1;
            if (__OFADD__(v28, 1))
              goto LABEL_45;
            if (v21 >= v42)
              goto LABEL_36;
            v27 = v43[v21];
            ++v28;
            if (v27)
              goto LABEL_23;
          }
        }
        v21 = v28;
      }
    }
LABEL_23:
    v18 = (v27 - 1) & v27;
    v24 = __clz(__rbit64(v27)) + (v21 << 6);
LABEL_24:
    v29 = *(_QWORD *)(v45 + 72);
    v30 = *(_QWORD *)(v12 + 48) + v29 * v24;
    if ((v46 & 1) != 0)
    {
      sub_100007670(v30, (uint64_t)v11, type metadata accessor for PrimarySettingsListItemIdentifier);
      v31 = *(_QWORD *)(v44 + 72);
      sub_100007670(*(_QWORD *)(v12 + 56) + v31 * v24, (uint64_t)v8, type metadata accessor for PrimarySettingsListItemModel);
    }
    else
    {
      sub_1000076F0(v30, (uint64_t)v11, type metadata accessor for PrimarySettingsListItemIdentifier);
      v31 = *(_QWORD *)(v44 + 72);
      sub_1000076F0(*(_QWORD *)(v12 + 56) + v31 * v24, (uint64_t)v8, type metadata accessor for PrimarySettingsListItemModel);
    }
    Hasher.init(_seed:)(v47, *(_QWORD *)(v14 + 40));
    sub_10009FDA0();
    result = Hasher._finalize()();
    v32 = -1 << *(_BYTE *)(v14 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v19 + 8 * (v33 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v19 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v19 + 8 * v34);
      }
      while (v38 == -1);
      v22 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    sub_100007670((uint64_t)v11, *(_QWORD *)(v14 + 48) + v29 * v22, type metadata accessor for PrimarySettingsListItemIdentifier);
    result = sub_100007670((uint64_t)v8, *(_QWORD *)(v14 + 56) + v31 * v22, type metadata accessor for PrimarySettingsListItemModel);
    ++*(_QWORD *)(v14 + 16);
  }
  swift_release(v12);
  v3 = v41;
  v26 = v43;
  if ((v46 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v12 + 32);
  if (v39 >= 64)
    bzero(v26, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v26 = -1 << v39;
  *(_QWORD *)(v12 + 16) = 0;
LABEL_43:
  result = swift_release(v12);
  *v3 = v14;
  return result;
}

uint64_t sub_1000EC9D0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  uint64_t v31;
  unsigned __int8 v32;
  uint64_t v33;
  Swift::UInt v34;
  Swift::Int v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t result;
  uint64_t *v45;
  int64_t v46;
  _QWORD *v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[10];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100004FC8(&qword_10015C5B8);
  v49 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_49;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v47 = (_QWORD *)(v5 + 64);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v45 = v2;
  v46 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
  v48 = v5;
LABEL_11:
  if (v11)
  {
    v17 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    v18 = v17 | (v13 << 6);
    goto LABEL_25;
  }
  v19 = v13 + 1;
  if (__OFADD__(v13, 1))
    goto LABEL_50;
  if (v19 >= v46)
  {
    swift_release(v5);
    v3 = v45;
    v20 = v47;
    if ((v49 & 1) != 0)
    {
LABEL_45:
      v43 = 1 << *(_BYTE *)(v5 + 32);
      if (v43 >= 64)
        bzero(v20, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
      else
        *v20 = -1 << v43;
      *(_QWORD *)(v5 + 16) = 0;
    }
  }
  else
  {
    v20 = v47;
    v21 = v47[v19];
    ++v13;
    if (v21)
      goto LABEL_24;
    v13 = v19 + 1;
    if (v19 + 1 >= v46)
      goto LABEL_42;
    v21 = v47[v13];
    if (v21)
    {
LABEL_24:
      v11 = (v21 - 1) & v21;
      v18 = __clz(__rbit64(v21)) + (v13 << 6);
LABEL_25:
      v23 = *(_QWORD *)(v5 + 56);
      v24 = *(_QWORD *)(v5 + 48) + 24 * v18;
      v26 = *(_QWORD *)v24;
      v25 = *(_QWORD *)(v24 + 8);
      v27 = *(unsigned __int8 *)(v24 + 16);
      v28 = v23 + 96 * v18;
      v29 = *(_QWORD *)(v28 + 8);
      v30 = *(_BYTE *)(v28 + 16);
      v31 = *(_QWORD *)(v28 + 24);
      v58 = *(_QWORD *)(v28 + 40);
      v59 = *(_QWORD *)(v28 + 32);
      v56 = *(_QWORD *)(v28 + 56);
      v57 = *(_QWORD *)(v28 + 48);
      v54 = *(_QWORD *)(v28 + 72);
      v55 = *(_QWORD *)(v28 + 64);
      v53 = *(_QWORD *)(v28 + 80);
      v51 = *(_QWORD *)v28;
      v52 = *(_QWORD *)(v28 + 88);
      if ((v49 & 1) == 0)
      {
        sub_10000BA8C(v26, v25, v27);
        sub_10000BA8C(v51, v29, v30);
        sub_10000BAA4(v31, v59, v58, v57);
        sub_10000BAA4(v56, v55, v54, v53);
        swift_bridgeObjectRetain(v52);
      }
      Hasher.init(_seed:)(v60, *(_QWORD *)(v8 + 40));
      v50 = v31;
      if (v27)
      {
        if (v27 != 1)
          __asm { BR              X8 }
        v32 = v30;
        v33 = v29;
        v34 = 6;
      }
      else
      {
        v32 = v30;
        v33 = v29;
        v34 = 5;
      }
      Hasher._combine(_:)(v34);
      String.hash(into:)(v60, v26, v25);
      v35 = Hasher._finalize()();
      v36 = -1 << *(_BYTE *)(v8 + 32);
      v37 = v35 & ~v36;
      v38 = v37 >> 6;
      if (((-1 << v37) & ~*(_QWORD *)(v12 + 8 * (v37 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v37) & ~*(_QWORD *)(v12 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_10;
      }
      v39 = 0;
      v40 = (unint64_t)(63 - v36) >> 6;
      while (++v38 != v40 || (v39 & 1) == 0)
      {
        v41 = v38 == v40;
        if (v38 == v40)
          v38 = 0;
        v39 |= v41;
        v42 = *(_QWORD *)(v12 + 8 * v38);
        if (v42 != -1)
        {
          v14 = __clz(__rbit64(~v42)) + (v38 << 6);
LABEL_10:
          *(_QWORD *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
          v15 = *(_QWORD *)(v8 + 48) + 24 * v14;
          *(_QWORD *)v15 = v26;
          *(_QWORD *)(v15 + 8) = v25;
          *(_BYTE *)(v15 + 16) = v27;
          v16 = *(_QWORD *)(v8 + 56) + 96 * v14;
          *(_QWORD *)v16 = v51;
          *(_QWORD *)(v16 + 8) = v33;
          *(_BYTE *)(v16 + 16) = v32;
          *(_QWORD *)(v16 + 24) = v50;
          *(_QWORD *)(v16 + 32) = v59;
          *(_QWORD *)(v16 + 40) = v58;
          *(_QWORD *)(v16 + 48) = v57;
          *(_QWORD *)(v16 + 56) = v56;
          *(_QWORD *)(v16 + 64) = v55;
          *(_QWORD *)(v16 + 72) = v54;
          *(_QWORD *)(v16 + 80) = v53;
          *(_QWORD *)(v16 + 88) = v52;
          ++*(_QWORD *)(v8 + 16);
          v5 = v48;
          goto LABEL_11;
        }
      }
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
      JUMPOUT(0x1000ECF58);
    }
    v22 = v19 + 2;
    if (v22 < v46)
    {
      v21 = v47[v22];
      if (!v21)
      {
        while (1)
        {
          v13 = v22 + 1;
          if (__OFADD__(v22, 1))
            goto LABEL_51;
          if (v13 >= v46)
            goto LABEL_42;
          v21 = v47[v13];
          ++v22;
          if (v21)
            goto LABEL_24;
        }
      }
      v13 = v22;
      goto LABEL_24;
    }
LABEL_42:
    swift_release(v5);
    v3 = v45;
    if ((v49 & 1) != 0)
      goto LABEL_45;
  }
LABEL_49:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_1000ECF9C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100004FC8(&qword_100158BC0);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v3;
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain(v5);
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v12)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v37 + 8 * v23);
    ++v15;
    if (!v25)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v12)
        goto LABEL_36;
      v25 = *(_QWORD *)(v37 + 8 * v15);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release(v5);
          v3 = v36;
          if ((a2 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v15 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v15 >= v12)
              goto LABEL_36;
            v25 = *(_QWORD *)(v37 + 8 * v15);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v15 = v26;
      }
    }
LABEL_33:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    v31 = 8 * v22;
    v32 = *(void **)(*(_QWORD *)(v5 + 48) + v31);
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v31);
    if ((a2 & 1) == 0)
    {
      v34 = v32;
      swift_retain(v33);
    }
    result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = 8 * v19;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + v20) = v32;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v20) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v36;
  v24 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_1000ED270(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  Swift::Int result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  _QWORD *v39;
  uint64_t v40;
  int v41;
  uint64_t v42[9];

  v3 = v2;
  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v40 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_100004FC8(&qword_10015C648);
  v41 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_43;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v39 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v37 = v3;
  v38 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain(v9);
  v18 = 0;
  while (1)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v21 = v20 | (v18 << 6);
      goto LABEL_24;
    }
    v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v38)
      break;
    v23 = v39;
    v24 = v39[v22];
    ++v18;
    if (!v24)
    {
      v18 = v22 + 1;
      if (v22 + 1 >= v38)
        goto LABEL_36;
      v24 = v39[v18];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v38)
        {
LABEL_36:
          swift_release(v9);
          v3 = v37;
          if ((v41 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = v39[v25];
        if (!v24)
        {
          while (1)
          {
            v18 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v18 >= v38)
              goto LABEL_36;
            v24 = v39[v18];
            ++v25;
            if (v24)
              goto LABEL_23;
          }
        }
        v18 = v25;
      }
    }
LABEL_23:
    v15 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_24:
    v26 = *(_QWORD *)(v40 + 72);
    v27 = *(_QWORD *)(v9 + 48) + v26 * v21;
    if ((v41 & 1) != 0)
    {
      sub_100007670(v27, (uint64_t)v8, type metadata accessor for PrimarySettingsListItemIdentifier);
      v28 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v21);
    }
    else
    {
      sub_1000076F0(v27, (uint64_t)v8, type metadata accessor for PrimarySettingsListItemIdentifier);
      v28 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v21);
      swift_bridgeObjectRetain(v28);
    }
    Hasher.init(_seed:)(v42, *(_QWORD *)(v11 + 40));
    sub_10009FDA0();
    result = Hasher._finalize()();
    v29 = -1 << *(_BYTE *)(v11 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v16 + 8 * (v30 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v16 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v16 + 8 * v31);
      }
      while (v35 == -1);
      v19 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    result = sub_100007670((uint64_t)v8, *(_QWORD *)(v11 + 48) + v26 * v19, type metadata accessor for PrimarySettingsListItemIdentifier);
    *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v19) = v28;
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release(v9);
  v3 = v37;
  v23 = v39;
  if ((v41 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v36 = 1 << *(_BYTE *)(v9 + 32);
  if (v36 >= 64)
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v36;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_43:
  result = swift_release(v9);
  *v3 = v11;
  return result;
}

Swift::Int sub_1000ED5EC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  uint64_t v42;
  char v43;
  _QWORD v44[9];
  __int128 v45;
  __int128 v46;
  uint64_t v47;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100004FC8((uint64_t *)&unk_10015C500);
  v43 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v42 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v40 = v3;
  v41 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_25;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }
    if (v22 >= v41)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v42 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v41)
        goto LABEL_37;
      v24 = *(_QWORD *)(v42 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v41)
        {
LABEL_37:
          swift_release(v5);
          v3 = v40;
          if ((v43 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v24 = *(_QWORD *)(v42 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_46;
            if (v14 >= v41)
              goto LABEL_37;
            v24 = *(_QWORD *)(v42 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_24;
          }
        }
        v14 = v25;
      }
    }
LABEL_24:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_25:
    v26 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v28 = *v26;
    v27 = v26[1];
    v29 = *(_QWORD *)(v5 + 56) + 40 * v21;
    if ((v43 & 1) != 0)
    {
      v30 = *(_OWORD *)v29;
      v31 = *(_OWORD *)(v29 + 16);
      v47 = *(_QWORD *)(v29 + 32);
      v45 = v30;
      v46 = v31;
    }
    else
    {
      sub_1000CA038(v29, (uint64_t)&v45);
      swift_bridgeObjectRetain(v27);
    }
    Hasher.init(_seed:)(v44, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v44, v28, v27);
    result = Hasher._finalize()();
    v32 = -1 << *(_BYTE *)(v8 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v12 + 8 * (v33 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v12 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v12 + 8 * v34);
      }
      while (v38 == -1);
      v15 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v15);
    *v16 = v28;
    v16[1] = v27;
    v17 = *(_QWORD *)(v8 + 56) + 40 * v15;
    v18 = v45;
    v19 = v46;
    *(_QWORD *)(v17 + 32) = v47;
    *(_OWORD *)v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v40;
  v23 = (_QWORD *)(v5 + 64);
  if ((v43 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v39 = 1 << *(_BYTE *)(v5 + 32);
  if (v39 >= 64)
    bzero(v23, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v39;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

void sub_1000ED920(unint64_t a1, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  id v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  v3 = a1;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    v8 = _HashTable.previousHole(before:)(a1, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(a2 + 40);
        v11 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v6);
        v12 = NSObject._rawHashValue(seed:)(v10);

        v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v3 >= v13)
          {
LABEL_16:
            v16 = *(_QWORD *)(a2 + 48);
            v17 = (_QWORD *)(v16 + 8 * v3);
            v18 = (_QWORD *)(v16 + 8 * v6);
            if (v3 != v6 || v17 >= v18 + 1)
              *v17 = *v18;
            v19 = *(_QWORD *)(a2 + 56);
            v20 = (_QWORD *)(v19 + 8 * v3);
            v21 = (_QWORD *)(v19 + 8 * v6);
            if (v3 != v6 || (v3 = v6, v20 >= v21 + 1))
            {
              *v20 = *v21;
              v3 = v6;
            }
          }
        }
        else if (v13 >= v9 || v3 >= v13)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v23 = *v22;
    v24 = (-1 << v3) - 1;
  }
  else
  {
    v22 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    v24 = *v22;
    v23 = (-1 << a1) - 1;
  }
  *v22 = v24 & v23;
  v25 = *(_QWORD *)(a2 + 16);
  v26 = __OFSUB__(v25, 1);
  v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
}

unint64_t sub_1000EDAD0(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  unint64_t v20;
  __int128 *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD v28[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v11 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v12 = *v11;
        v13 = v11[1];
        Hasher.init(_seed:)(v28, *(_QWORD *)(a2 + 40));
        swift_bridgeObjectRetain(v13);
        String.hash(into:)(v28, v12, v13);
        v14 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v13);
        v15 = v14 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v15 < v8)
            goto LABEL_5;
        }
        else if (v15 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v15)
        {
LABEL_11:
          v16 = *(_QWORD *)(a2 + 48);
          v17 = (_OWORD *)(v16 + 16 * v3);
          v18 = (_OWORD *)(v16 + 16 * v6);
          if (v3 != v6 || v17 >= v18 + 1)
            *v17 = *v18;
          v19 = *(_QWORD *)(a2 + 56);
          v20 = v19 + 40 * v3;
          v21 = (__int128 *)(v19 + 40 * v6);
          if (v3 != v6 || (v3 = v6, v20 >= (unint64_t)v21 + 40))
          {
            v9 = *v21;
            v10 = v21[1];
            *(_QWORD *)(v20 + 32) = *((_QWORD *)v21 + 4);
            *(_OWORD *)v20 = v9;
            *(_OWORD *)(v20 + 16) = v10;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v23 = *v22;
    v24 = (-1 << v3) - 1;
  }
  else
  {
    v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    v24 = *v22;
    v23 = (-1 << result) - 1;
  }
  *v22 = v24 & v23;
  v25 = *(_QWORD *)(a2 + 16);
  v26 = __OFSUB__(v25, 1);
  v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

id sub_1000EDCB8(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  id result;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;

  v4 = v3;
  v7 = *v3;
  v9 = sub_1000DAA60((uint64_t)a2);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v13 = v8;
  v14 = *(_QWORD *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_1000EE718();
LABEL_7:
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
    {
LABEL_8:
      v16 = v15[7];
      result = (id)swift_release(*(_QWORD *)(v16 + 8 * v9));
      *(_QWORD *)(v16 + 8 * v9) = a1;
      return result;
    }
LABEL_11:
    v15[(v9 >> 6) + 8] |= 1 << v9;
    v20 = 8 * v9;
    *(_QWORD *)(v15[6] + v20) = a2;
    *(_QWORD *)(v15[7] + v20) = a1;
    v21 = v15[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (!v22)
    {
      v15[2] = v23;
      return a2;
    }
    goto LABEL_14;
  }
  sub_1000ECF9C(v12, a3 & 1);
  v18 = sub_1000DAA60((uint64_t)a2);
  if ((v13 & 1) == (v19 & 1))
  {
    v9 = v18;
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  v24 = sub_100007BBC(0, (unint64_t *)&qword_10015C640, CSSearchQuery_ptr);
  result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v24);
  __break(1u);
  return result;
}

uint64_t sub_1000EDE18(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t result;
  unint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;

  v5 = v4;
  v10 = *v4;
  v12 = sub_1000DA98C(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1000EEAF8();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      return sub_1000EECEC(a1, v18[7] + 40 * v12);
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v22 = (uint64_t *)(v18[6] + 16 * v12);
    *v22 = a2;
    v22[1] = a3;
    v23 = v18[7] + 40 * v12;
    v24 = *(_OWORD *)a1;
    v25 = *(_OWORD *)(a1 + 16);
    *(_QWORD *)(v23 + 32) = *(_QWORD *)(a1 + 32);
    *(_OWORD *)v23 = v24;
    *(_OWORD *)(v23 + 16) = v25;
    v26 = v18[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (!v27)
    {
      v18[2] = v28;
      return swift_bridgeObjectRetain(a3);
    }
    goto LABEL_14;
  }
  sub_1000ED5EC(v15, a4 & 1);
  v20 = sub_1000DA98C(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    v12 = v20;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      return sub_1000EECEC(a1, v18[7] + 40 * v12);
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_1000EDF84()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000EDFA8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = (int *)type metadata accessor for SettingsURLDestination(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  v7 = type metadata accessor for URL(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v0 + v4, v7);
  v9 = v0 + v4 + v1[5];
  v10 = type metadata accessor for SettingsURLDestination.Action(0);
  switch(swift_getEnumCaseMultiPayload(v9, v10))
  {
    case 1u:
      v13 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
      switch(swift_getEnumCaseMultiPayload(v9, v13))
      {
        case 0u:
        case 1u:
          v14 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v9, v14);
          break;
        case 2u:
          v15 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v9, v15);
          v16 = sub_100004FC8(&qword_10015C420);
          swift_bridgeObjectRelease(*(_QWORD *)(v9 + *(int *)(v16 + 48) + 8));
          break;
        case 3u:
          swift_bridgeObjectRelease(*(_QWORD *)(v9 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v9 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(v9 + 40));
          swift_bridgeObjectRelease(*(_QWORD *)(v9 + 56));
          break;
        case 4u:
          swift_bridgeObjectRelease(*(_QWORD *)(v9 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v9 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(v9 + 40));
          break;
        case 5u:
          swift_bridgeObjectRelease(*(_QWORD *)(v9 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v9 + 24));

          swift_bridgeObjectRelease(*(_QWORD *)(v9 + 40));
          if (*(_QWORD *)(v9 + 72))
            sub_100005474((_QWORD *)(v9 + 48));
          break;
        default:
          goto LABEL_3;
      }
      break;
    case 2u:
    case 3u:
    case 4u:
      v8(v9, v7);
      break;
    default:
      break;
  }
LABEL_3:
  v11 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[6]));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[7] + 8));
  swift_release(*(_QWORD *)(v0 + v11));
  return swift_deallocObject(v0, v11 + 8, v3 | 7);
}

uint64_t sub_1000EE1BC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for SettingsURLDestination(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_1000E87AC(v0 + v2, *(_QWORD *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8)));
}

void *sub_1000EE1FC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *result;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;

  v1 = v0;
  v2 = type metadata accessor for PrimarySettingsListItemModel(0);
  v29 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v28 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100004FC8((uint64_t *)&unk_10015C5C0);
  v8 = *v0;
  v9 = static _DictionaryStorage.copy(original:)(*v0);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
    result = (void *)swift_release(v8);
LABEL_25:
    *v1 = v10;
    return result;
  }
  v25 = v1;
  result = (void *)(v9 + 64);
  v12 = (unint64_t)((1 << *(_BYTE *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 64 + 8 * v12)
    result = memmove(result, (const void *)(v8 + 64), 8 * v12);
  v13 = 0;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v8 + 16);
  v14 = 1 << *(_BYTE *)(v8 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v8 + 64);
  v26 = v8 + 64;
  v27 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v18 = v17 | (v13 << 6);
      goto LABEL_9;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v21 >= v27)
      goto LABEL_23;
    v22 = *(_QWORD *)(v26 + 8 * v21);
    ++v13;
    if (!v22)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v27)
        goto LABEL_23;
      v22 = *(_QWORD *)(v26 + 8 * v13);
      if (!v22)
        break;
    }
LABEL_22:
    v16 = (v22 - 1) & v22;
    v18 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_9:
    v19 = *(_QWORD *)(v28 + 72) * v18;
    sub_1000076F0(*(_QWORD *)(v8 + 48) + v19, (uint64_t)v7, type metadata accessor for PrimarySettingsListItemIdentifier);
    v20 = *(_QWORD *)(v29 + 72) * v18;
    sub_1000076F0(*(_QWORD *)(v8 + 56) + v20, (uint64_t)v4, type metadata accessor for PrimarySettingsListItemModel);
    sub_100007670((uint64_t)v7, *(_QWORD *)(v10 + 48) + v19, type metadata accessor for PrimarySettingsListItemIdentifier);
    result = (void *)sub_100007670((uint64_t)v4, *(_QWORD *)(v10 + 56) + v20, type metadata accessor for PrimarySettingsListItemModel);
  }
  v23 = v21 + 2;
  if (v23 >= v27)
  {
LABEL_23:
    result = (void *)swift_release(v8);
    v1 = v25;
    goto LABEL_25;
  }
  v22 = *(_QWORD *)(v26 + 8 * v23);
  if (v22)
  {
    v13 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    v13 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v13 >= v27)
      goto LABEL_23;
    v22 = *(_QWORD *)(v26 + 8 * v13);
    ++v23;
    if (v22)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_1000EE494()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *result;
  unint64_t v5;
  BOOL v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  unsigned __int8 v29;
  uint64_t v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  void *__src;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;

  sub_100004FC8(&qword_10015C5B8);
  v37 = v0;
  v1 = *v0;
  v2 = static _DictionaryStorage.copy(original:)(*v0);
  v3 = v2;
  if (!*(_QWORD *)(v1 + 16))
  {
LABEL_26:
    v35 = v1;
    v36 = v3;
    result = (void *)swift_release(v35);
    *v37 = v36;
    return result;
  }
  result = (void *)(v2 + 64);
  v5 = (unint64_t)((1 << *(_BYTE *)(v3 + 32)) + 63) >> 6;
  __src = (void *)(v1 + 64);
  v6 = v3 != v1 || (unint64_t)result >= v1 + 64 + 8 * v5;
  v41 = v3;
  if (v6)
  {
    result = memmove(result, __src, 8 * v5);
    v3 = v41;
  }
  v7 = 0;
  *(_QWORD *)(v3 + 16) = *(_QWORD *)(v1 + 16);
  v8 = 1 << *(_BYTE *)(v1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(v1 + 64);
  v39 = (unint64_t)(v8 + 63) >> 6;
  v40 = v1;
  while (1)
  {
    if (v10)
    {
      v42 = (v10 - 1) & v10;
      v43 = v7;
      v11 = __clz(__rbit64(v10)) | (v7 << 6);
      v1 = v40;
      v3 = v41;
      goto LABEL_12;
    }
    v31 = v7 + 1;
    v1 = v40;
    v3 = v41;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v31 >= v39)
      goto LABEL_26;
    v32 = *((_QWORD *)__src + v31);
    v33 = v7 + 1;
    if (!v32)
    {
      v33 = v7 + 2;
      if (v7 + 2 >= v39)
        goto LABEL_26;
      v32 = *((_QWORD *)__src + v33);
      if (!v32)
        break;
    }
LABEL_25:
    v42 = (v32 - 1) & v32;
    v43 = v33;
    v11 = __clz(__rbit64(v32)) + (v33 << 6);
LABEL_12:
    v12 = 3 * v11;
    v13 = 8 * v12;
    v14 = *(_QWORD *)(v1 + 48) + 8 * v12;
    v15 = *(_QWORD *)v14;
    v16 = *(_QWORD *)(v14 + 8);
    v12 *= 32;
    v17 = *(_QWORD *)(v1 + 56) + v12;
    v18 = *(_QWORD *)v17;
    v19 = *(_QWORD *)(v17 + 8);
    v20 = *(_QWORD *)(v17 + 24);
    v21 = *(_QWORD *)(v17 + 32);
    v22 = *(_QWORD *)(v17 + 40);
    v23 = *(_QWORD *)(v17 + 48);
    v24 = *(_QWORD *)(v17 + 64);
    v25 = *(_QWORD *)(v17 + 72);
    v26 = *(_QWORD *)(v17 + 80);
    v44 = *(_QWORD *)(v17 + 56);
    v45 = *(_QWORD *)(v17 + 88);
    v27 = *(_QWORD *)(v3 + 48) + v13;
    v28 = *(_BYTE *)(v14 + 16);
    v29 = *(_BYTE *)(v17 + 16);
    *(_QWORD *)v27 = *(_QWORD *)v14;
    *(_QWORD *)(v27 + 8) = v16;
    *(_BYTE *)(v27 + 16) = v28;
    v30 = *(_QWORD *)(v3 + 56) + v12;
    *(_QWORD *)v30 = v18;
    *(_QWORD *)(v30 + 8) = v19;
    *(_BYTE *)(v30 + 16) = v29;
    *(_QWORD *)(v30 + 24) = v20;
    *(_QWORD *)(v30 + 32) = v21;
    *(_QWORD *)(v30 + 40) = v22;
    *(_QWORD *)(v30 + 48) = v23;
    *(_QWORD *)(v30 + 56) = v44;
    *(_QWORD *)(v30 + 64) = v24;
    *(_QWORD *)(v30 + 72) = v25;
    *(_QWORD *)(v30 + 80) = v26;
    *(_QWORD *)(v30 + 88) = v45;
    sub_10000BA8C(v15, v16, v28);
    sub_10000BA8C(v18, v19, v29);
    sub_10000BAA4(v20, v21, v22, v23);
    sub_10000BAA4(v44, v24, v25, v26);
    result = (void *)swift_bridgeObjectRetain(v45);
    v10 = v42;
    v7 = v43;
  }
  v34 = v7 + 3;
  if (v7 + 3 >= v39)
    goto LABEL_26;
  v32 = *((_QWORD *)__src + v34);
  if (v32)
  {
    v33 = v7 + 3;
    goto LABEL_25;
  }
  while (1)
  {
    v33 = v34 + 1;
    if (__OFADD__(v34, 1))
      break;
    if (v33 >= v39)
      goto LABEL_26;
    v32 = *((_QWORD *)__src + v33);
    ++v34;
    if (v32)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000EE718()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_100004FC8(&qword_100158BC0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    v19 = v17;
    result = (void *)swift_retain(v18);
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000EE8C0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;

  v1 = v0;
  v2 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v27 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100004FC8(&qword_10015C648);
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = (void *)swift_release(v5);
LABEL_28:
    *v1 = v7;
    return result;
  }
  v25 = v1;
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v26 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    v21 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v15)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v21);
    ++v11;
    if (!v22)
    {
      v11 = v21 + 1;
      if (v21 + 1 >= v15)
        goto LABEL_26;
      v22 = *(_QWORD *)(v26 + 8 * v11);
      if (!v22)
        break;
    }
LABEL_25:
    v14 = (v22 - 1) & v22;
    v17 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_12:
    v18 = *(_QWORD *)(v27 + 72) * v17;
    sub_1000076F0(*(_QWORD *)(v5 + 48) + v18, (uint64_t)v4, type metadata accessor for PrimarySettingsListItemIdentifier);
    v19 = 8 * v17;
    v20 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v17);
    sub_100007670((uint64_t)v4, *(_QWORD *)(v7 + 48) + v18, type metadata accessor for PrimarySettingsListItemIdentifier);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v19) = v20;
    result = (void *)swift_bridgeObjectRetain(v20);
  }
  v23 = v21 + 2;
  if (v23 >= v15)
  {
LABEL_26:
    result = (void *)swift_release(v5);
    v1 = v25;
    goto LABEL_28;
  }
  v22 = *(_QWORD *)(v26 + 8 * v23);
  if (v22)
  {
    v11 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v11 >= v15)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v11);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1000EEAF8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t *v28;
  _OWORD v29[2];
  uint64_t v30;

  v1 = v0;
  sub_100004FC8((uint64_t *)&unk_10015C500);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release(v2);
LABEL_28:
    *v1 = v4;
    return result;
  }
  v28 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 40 * v15;
    sub_1000CA038(*(_QWORD *)(v2 + 56) + 40 * v15, (uint64_t)v29);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    v22 = *(_QWORD *)(v4 + 56) + v20;
    v23 = v30;
    v24 = v29[1];
    *(_OWORD *)v22 = v29[0];
    *(_OWORD *)(v22 + 16) = v24;
    *(_QWORD *)(v22 + 32) = v23;
    result = (void *)swift_bridgeObjectRetain(v18);
  }
  v27 = v25 + 2;
  if (v27 >= v13)
  {
LABEL_26:
    result = (void *)swift_release(v2);
    v1 = v28;
    goto LABEL_28;
  }
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1000EECEC(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 40))(a2, a1);
  return a2;
}

uint64_t sub_1000EED28(uint64_t a1, int64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v5;
  int64_t v6;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  char v24;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v5 = (_QWORD *)*v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (v6 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v3);
  *v3 = v5;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v10 > v5[3] >> 1)
  {
    if (v6 <= v10)
      v13 = v6 + v9;
    else
      v13 = v6;
    v5 = sub_100052DA0(isUniquelyReferenced_nonNull_native, v13, 1, v5);
    *v3 = v5;
  }
  v14 = (uint64_t)&v5[5 * a1 + 4];
  v15 = sub_100004FC8(&qword_100157368);
  swift_arrayDestroy(v14, v8, v15);
  if (!v9)
    goto LABEL_20;
  v16 = v5[2];
  v17 = __OFSUB__(v16, a2);
  v18 = v16 - a2;
  if (v17)
    goto LABEL_26;
  if ((v18 & 0x8000000000000000) == 0)
  {
    v19 = (char *)(v14 + 40);
    v20 = (char *)&v5[5 * a2 + 4];
    if ((char *)(v14 + 40) != v20 || v19 >= &v20[40 * v18])
      memmove(v19, v20, 40 * v18);
    v21 = v5[2];
    v17 = __OFADD__(v21, v9);
    v22 = v21 + v9;
    if (!v17)
    {
      v5[2] = v22;
LABEL_20:
      sub_10003CE00(a3, v14);
      return sub_10000BA50(a3, &qword_10015C5D0);
    }
    goto LABEL_27;
  }
LABEL_28:
  v24 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v24, 1046, 0);
  __break(1u);
  return result;
}

void (*sub_1000EEED4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6))(_QWORD *a1)
{
  uint64_t v10;
  uint64_t v11;
  void (*result)(_QWORD *);

  v10 = type metadata accessor for SettingsNavigationEventRecord(0);
  *a1 = v10;
  v11 = *(_QWORD *)(v10 - 8);
  a1[1] = v11;
  result = (void (*)(_QWORD *))malloc(*(_QWORD *)(v11 + 64));
  a1[2] = (uint64_t)result;
  if (a2 < a5 || (uint64_t)(a6 >> 1) <= a2)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(void))(v11 + 16))();
    return sub_1000EEF78;
  }
  return result;
}

void sub_1000EEF78(_QWORD *a1)
{
  void *v1;

  v1 = (void *)a1[2];
  (*(void (**)(void *, _QWORD))(a1[1] + 8))(v1, *a1);
  free(v1);
}

uint64_t sub_1000EEFA8(unint64_t a1)
{
  return sub_10005270C(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t sub_1000EEFBC(unint64_t a1)
{
  return sub_100052720(0, *(_QWORD *)(a1 + 16), 0, a1);
}

unint64_t sub_1000EEFD0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  char v4;
  uint64_t v5;
  unint64_t result;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  sub_100004FC8(&qword_10015C528);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
  v4 = *(_BYTE *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  result = sub_1000DA900(v4);
  if ((v7 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain(v5);
    return (unint64_t)v3;
  }
  v8 = (_QWORD *)(a1 + 56);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v3[6] + result) = v4;
    *(_QWORD *)(v3[7] + 8 * result) = v5;
    v9 = v3[2];
    v10 = __OFADD__(v9, 1);
    v11 = v9 + 1;
    if (v10)
      break;
    v3[2] = v11;
    if (!--v1)
      goto LABEL_8;
    v12 = v8 + 2;
    v4 = *((_BYTE *)v8 - 8);
    v13 = *v8;
    swift_bridgeObjectRetain(v5);
    result = sub_1000DA900(v4);
    v8 = v12;
    v5 = v13;
    if ((v14 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

char *sub_1000EF0D0(uint64_t a1, int64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v5;
  int64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *result;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  v5 = (_QWORD *)*v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (v6 < a2)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)(a3 + 16);
  v10 = v9 - v8;
  if (__OFSUB__(v9, v8))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v11 = v6 + v10;
  if (__OFADD__(v6, v10))
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v3);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v11 > v5[3] >> 1)
  {
    if (v6 <= v11)
      v13 = v6 + v10;
    else
      v13 = v6;
    v5 = sub_100052DA0(isUniquelyReferenced_nonNull_native, v13, 1, v5);
  }
  v14 = (uint64_t)&v5[5 * a1 + 4];
  v15 = sub_100004FC8(&qword_100157368);
  result = (char *)swift_arrayDestroy(v14, v8, v15);
  if (!v10)
    goto LABEL_20;
  v17 = v5[2];
  v18 = __OFSUB__(v17, a2);
  v19 = v17 - a2;
  if (v18)
    goto LABEL_28;
  if (v19 < 0)
  {
LABEL_30:
    v23 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v23, 1046, 0);
    __break(1u);
    return result;
  }
  result = (char *)(v14 + 40 * v9);
  v20 = (char *)&v5[5 * a2 + 4];
  if (result != v20 || result >= &v20[40 * v19])
    result = (char *)memmove(result, v20, 40 * v19);
  v21 = v5[2];
  v18 = __OFADD__(v21, v10);
  v22 = v21 + v10;
  if (v18)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v5[2] = v22;
LABEL_20:
  if (v9)
    result = (char *)swift_arrayInitWithCopy(v14);
  *v3 = v5;
  return result;
}

void sub_1000EF280(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  os_log_type_t v24;
  uint8_t *v25;
  id v26;
  NSURL *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  _QWORD v38[2];
  os_log_t v39;
  uint64_t v40;
  uint64_t aBlock[5];
  uint64_t v42;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v8 = qword_100156CA0;
    v9 = a2;
    if (v8 != -1)
      swift_once(&qword_100156CA0, sub_10008BDE8);
    v10 = type metadata accessor for Logger(0);
    v11 = sub_100007808(v10, (uint64_t)qword_10015D298);
    v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = swift_slowAlloc(22, -1);
      v38[1] = v11;
      v16 = v15;
      v17 = swift_slowAlloc(32, -1);
      *(_DWORD *)v16 = 141558275;
      v40 = 1752392040;
      aBlock[0] = v17;
      v39 = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, aBlock, v16 + 4, v16 + 12);
      *(_WORD *)(v16 + 12) = 2081;
      v38[0] = a1;
      v18 = sub_100007828((unint64_t *)&qword_10015C650, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v19 = dispatch thunk of CustomStringConvertible.description.getter(v4, v18);
      v21 = v20;
      v40 = sub_1000DA1F0(v19, v20, aBlock);
      v9 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, aBlock, v16 + 14, v16 + 22);
      swift_bridgeObjectRelease(v21);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Received Finish Setup Redirect with url: %{private,mask.hash}s", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }

    v26 = objc_msgSend(objc_allocWithZone((Class)BFFFinishSetupViewController), "init");
    URL._bridgeToObjectiveC()(v27);
    v29 = v28;
    v30 = swift_allocObject(&unk_10014DE68, 24, 7);
    *(_QWORD *)(v30 + 16) = v9;
    aBlock[4] = (uint64_t)sub_1000F1B50;
    v42 = v30;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100005350;
    aBlock[3] = (uint64_t)&unk_10014DE80;
    v31 = _Block_copy(aBlock);
    v32 = v42;
    v33 = v9;
    swift_release(v32);
    objc_msgSend(v26, "processURL:completion:", v29, v31);
    _Block_release(v31);

    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Presenting Finish Setup Modal.", v37, 2u);
      swift_slowDealloc(v37, -1, -1);
    }

    -[NSObject presentViewController:animated:completion:](v33, "presentViewController:animated:completion:", v26, 1, 0);
  }
  else
  {
    if (qword_100156CA0 != -1)
      swift_once(&qword_100156CA0, sub_10008BDE8);
    v22 = type metadata accessor for Logger(0);
    v23 = sub_100007808(v22, (uint64_t)qword_10015D298);
    v39 = (os_log_t)Logger.logObject.getter(v23);
    v24 = static os_log_type_t.fault.getter(v39);
    if (os_log_type_enabled(v39, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v24, "No hostingController available for finish setup presentation.", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

  }
}

uint64_t sub_1000EF6F0(uint64_t a1, int64_t a2)
{
  unint64_t *v2;
  unint64_t v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  char v26;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!isUniquelyReferenced_nonNull_native || v9 > *(_QWORD *)(v4 + 24) >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_10005270C(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  v12 = type metadata accessor for URLQueryItem(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = v4 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  v15 = *(_QWORD *)(v13 + 72);
  v16 = v15 * a1;
  v17 = v14 + v15 * a1;
  result = swift_arrayDestroy(v17, v7, v12);
  if (!v7)
    goto LABEL_25;
  v19 = *(_QWORD *)(v4 + 16);
  v20 = v19 - a2;
  if (__OFSUB__(v19, a2))
    goto LABEL_31;
  if ((v20 & 0x8000000000000000) == 0)
  {
    v21 = v14 + v15 * a2;
    if (v16 < v15 * a2 || v17 >= v21 + v20 * v15)
    {
      result = swift_arrayInitWithTakeFrontToBack(v17, v21);
    }
    else if (v16 != v15 * a2)
    {
      result = swift_arrayInitWithTakeBackToFront(v17, v21);
    }
    v23 = *(_QWORD *)(v4 + 16);
    v24 = __OFADD__(v23, v8);
    v25 = v23 - v7;
    if (!v24)
    {
      *(_QWORD *)(v4 + 16) = v25;
LABEL_25:
      *v2 = v4;
      return result;
    }
    goto LABEL_32;
  }
LABEL_33:
  v26 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v26, 1046, 0);
  __break(1u);
  return result;
}

void sub_1000EF898(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char *v33;
  unsigned int (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(char *, unint64_t, uint64_t);
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t inited;
  unint64_t v75;
  Class isa;
  void (*v77)(char *, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  os_log_type_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  unint64_t v92;
  char *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100[2];
  char v101[104];
  uint64_t v102;
  uint64_t v103;

  v2 = type metadata accessor for SettingsURLDestination(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v89 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v90 = (uint64_t)&v89 - v6;
  v7 = sub_100004FC8(&qword_10015C510);
  v8 = __chkstk_darwin(v7);
  v91 = (char *)&v89 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v89 - v10;
  v12 = type metadata accessor for URLQueryItem(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v98 = (char *)&v89 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v95 = (char *)&v89 - v17;
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v89 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)&v89 - v21;
  v92 = *(int *)(v2 + 24);
  v23 = *(_QWORD *)(a1 + v92);
  v24 = *(_QWORD *)(v23 + 16);
  v99 = v13;
  if (v24)
  {
    v93 = v11;
    v94 = v5;
    v96 = a1;
    v97 = (char *)&v89 - v21;
    v25 = v23 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    v26 = *(_QWORD *)(v13 + 72);
    v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 16);
    swift_bridgeObjectRetain_n(v23, 2);
    while (1)
    {
      v28 = v27(v20, v25, v12);
      v29 = URLQueryItem.name.getter(v28);
      v31 = v30;
      if (v29 == 0x7541796669746F6ELL && v30 == 0xED000074694B6874)
      {
        swift_bridgeObjectRelease(v23);
        swift_bridgeObjectRelease(0xED000074694B6874);
        goto LABEL_12;
      }
      v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v29, v30, 0x7541796669746F6ELL, 0xED000074694B6874, 0);
      swift_bridgeObjectRelease(v31);
      if ((v32 & 1) != 0)
        break;
      v13 = v99;
      (*(void (**)(char *, uint64_t))(v99 + 8))(v20, v12);
      v25 += v26;
      if (!--v24)
      {
        swift_bridgeObjectRelease(v23);
        a1 = v96;
        v22 = v97;
        v5 = v94;
        v11 = v93;
        goto LABEL_9;
      }
    }
    swift_bridgeObjectRelease(v23);
    v13 = v99;
LABEL_12:
    v11 = v93;
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v93, v20, v12);
    v33 = *(char **)(v13 + 56);
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v33)(v11, 0, 1, v12);
    a1 = v96;
    v22 = v97;
    v5 = v94;
  }
  else
  {
    swift_bridgeObjectRetain(v23);
LABEL_9:
    v33 = *(char **)(v13 + 56);
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v33)(v11, 1, 1, v12);
  }
  swift_bridgeObjectRelease(v23);
  v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v34(v11, 1, v12) == 1)
  {
    sub_10000BA50((uint64_t)v11, &qword_10015C510);
LABEL_32:
    if (qword_100156CB0 != -1)
      swift_once(&qword_100156CB0, sub_10008BE28);
    v54 = type metadata accessor for Logger(0);
    sub_100007808(v54, (uint64_t)qword_10015D2C8);
    v55 = sub_1000076F0(a1, (uint64_t)v5, type metadata accessor for SettingsURLDestination);
    v56 = Logger.logObject.getter(v55);
    v57 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v56, v57))
    {
      v58 = swift_slowAlloc(22, -1);
      v59 = swift_slowAlloc(32, -1);
      v100[0] = v59;
      *(_DWORD *)v58 = 141558275;
      v102 = 1752392040;
      v60 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103, v58 + 4, v58 + 12);
      *(_WORD *)(v58 + 12) = 2081;
      v61 = URL.absoluteString.getter(v60);
      v63 = v62;
      v102 = sub_1000DA1F0(v61, v62, v100);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103, v58 + 14, v58 + 22);
      swift_bridgeObjectRelease(v63);
      sub_1000076B4((uint64_t)v5, type metadata accessor for SettingsURLDestination);
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "No notifyAuthKit parameter found in URL '%{private,mask.hash}s', no authentication required.", (uint8_t *)v58, 0x16u);
      swift_arrayDestroy(v59, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v59, -1, -1);
      swift_slowDealloc(v58, -1, -1);
    }
    else
    {
      sub_1000076B4((uint64_t)v5, type metadata accessor for SettingsURLDestination);
    }

    return;
  }
  v94 = *(char **)(v13 + 32);
  v35 = ((uint64_t (*)(char *, char *, uint64_t))v94)(v22, v11, v12);
  v36 = URLQueryItem.value.getter(v35);
  if (!v37)
  {
LABEL_31:
    (*(void (**)(char *, uint64_t))(v13 + 8))(v22, v12);
    goto LABEL_32;
  }
  v38 = v36;
  v39 = v37;
  if ((v36 != 1702195828 || v37 != 0xE400000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(v36, v37, 1702195828, 0xE400000000000000, 0) & 1) == 0)
  {
    if (v38 != 0x65736C6166 || v39 != 0xE500000000000000)
      _stringCompareWithSmolCheck(_:_:expecting:)(v38, v39, 0x65736C6166, 0xE500000000000000, 0);
    swift_bridgeObjectRelease(v39);
    goto LABEL_31;
  }
  swift_bridgeObjectRelease(v39);
  v40 = *(_QWORD *)(a1 + v92);
  v41 = *(_QWORD *)(v40 + 16);
  if (v41)
  {
    v93 = v33;
    v96 = a1;
    v97 = v22;
    v42 = v40 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    v43 = *(_QWORD *)(v13 + 72);
    v44 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v13 + 16);
    v92 = v40;
    swift_bridgeObjectRetain_n(v40, 2);
    v45 = v98;
    while (1)
    {
      v46 = v44(v45, v42, v12);
      v47 = URLQueryItem.name.getter(v46);
      v49 = v48;
      if (v47 == 0xD000000000000010 && v48 == 0x8000000100126F80)
      {
        v64 = v92;
        swift_bridgeObjectRelease(v92);
        v65 = 0x8000000100126F80;
        v40 = v64;
        goto LABEL_40;
      }
      v50 = _stringCompareWithSmolCheck(_:_:expecting:)(v47, v48, 0xD000000000000010, 0x8000000100126F80, 0);
      swift_bridgeObjectRelease(v49);
      if ((v50 & 1) != 0)
        break;
      v45 = v98;
      (*(void (**)(char *, uint64_t))(v99 + 8))(v98, v12);
      v42 += v43;
      if (!--v41)
      {
        v40 = v92;
        swift_bridgeObjectRelease(v92);
        v13 = v99;
        a1 = v96;
        v22 = v97;
        v51 = v95;
        v52 = (uint64_t)v91;
        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v93)(v91, 1, 1, v12);
        goto LABEL_42;
      }
    }
    v40 = v92;
    v65 = v92;
LABEL_40:
    swift_bridgeObjectRelease(v65);
    v33 = v93;
    v52 = (uint64_t)v91;
    ((void (*)(char *, char *, uint64_t))v94)(v91, v98, v12);
    v53 = 0;
    v13 = v99;
    a1 = v96;
    v22 = v97;
    v51 = v95;
  }
  else
  {
    swift_bridgeObjectRetain(*(_QWORD *)(a1 + v92));
    v53 = 1;
    v51 = v95;
    v52 = (uint64_t)v91;
  }
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v33)(v52, v53, 1, v12);
LABEL_42:
  swift_bridgeObjectRelease(v40);
  if (v34((char *)v52, 1, v12) == 1)
  {
    sub_10000BA50(v52, &qword_10015C510);
LABEL_49:
    if (qword_100156CB0 != -1)
      swift_once(&qword_100156CB0, sub_10008BE28);
    v78 = type metadata accessor for Logger(0);
    sub_100007808(v78, (uint64_t)qword_10015D2C8);
    v79 = v90;
    v80 = sub_1000076F0(a1, v90, type metadata accessor for SettingsURLDestination);
    v81 = Logger.logObject.getter(v80);
    v82 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v81, v82))
    {
      v83 = swift_slowAlloc(22, -1);
      v84 = swift_slowAlloc(32, -1);
      v100[0] = v84;
      *(_DWORD *)v83 = 141558275;
      v102 = 1752392040;
      v85 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103, v83 + 4, v83 + 12);
      *(_WORD *)(v83 + 12) = 2081;
      v86 = URL.absoluteString.getter(v85);
      v88 = v87;
      v102 = sub_1000DA1F0(v86, v87, v100);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103, v83 + 14, v83 + 22);
      swift_bridgeObjectRelease(v88);
      sub_1000076B4(v79, type metadata accessor for SettingsURLDestination);
      _os_log_impl((void *)&_mh_execute_header, v81, v82, "No authKitContextID parameter found in URL '%{private,mask.hash}s'.", (uint8_t *)v83, 0x16u);
      swift_arrayDestroy(v84, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v84, -1, -1);
      swift_slowDealloc(v83, -1, -1);

    }
    else
    {

      sub_1000076B4(v79, type metadata accessor for SettingsURLDestination);
    }
    (*(void (**)(char *, uint64_t))(v99 + 8))(v22, v12);
    return;
  }
  v66 = ((uint64_t (*)(char *, uint64_t, uint64_t))v94)(v51, v52, v12);
  v67 = URLQueryItem.value.getter(v66);
  if (!v68)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v51, v12);
    goto LABEL_49;
  }
  v69 = v67;
  v70 = v68;
  v71 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_100156D78 != -1)
    swift_once(&qword_100156D78, sub_1000EC5AC);
  v72 = qword_10015D440;
  v73 = sub_100004FC8(&qword_10015C518);
  inited = swift_initStackObject(v73, v101);
  *(_OWORD *)(inited + 16) = xmmword_1001164D0;
  v100[0] = 0xD000000000000010;
  v100[1] = 0x8000000100126F80;
  AnyHashable.init<A>(_:)((_QWORD *)(inited + 32), v100, &type metadata for String, &protocol witness table for String);
  *(_QWORD *)(inited + 96) = &type metadata for String;
  *(_QWORD *)(inited + 72) = v69;
  *(_QWORD *)(inited + 80) = v70;
  v75 = sub_1000DB458(inited);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v75);
  objc_msgSend(v71, "postNotificationName:object:userInfo:", v72, 0, isa);

  v77 = *(void (**)(char *, uint64_t))(v99 + 8);
  v77(v95, v12);
  v77(v22, v12);
}

uint64_t sub_1000F0368()
{
  uint64_t v0;

  return sub_1000DDA54(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000F0380()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = type metadata accessor for SettingsAppDetailContent(0);
  v2 = *(_QWORD *)(v1 - 8);
  v32 = *(unsigned __int8 *)(v2 + 80);
  v3 = (v32 + 25) & ~v32;
  v4 = *(_QWORD *)(v2 + 64);
  v5 = (int *)type metadata accessor for SettingsURLDestination(0);
  v6 = *((_QWORD *)v5 - 1);
  v31 = *(unsigned __int8 *)(v6 + 80);
  v7 = (v3 + v4 + v31) & ~v31;
  v8 = *(_QWORD *)(v6 + 64);
  v9 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v30 = *(_QWORD *)(v10 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  v12 = v0 + v3;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v12, 1, v9))
  {
    switch(swift_getEnumCaseMultiPayload(v12, v9))
    {
      case 0u:
      case 1u:
        v21 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v12, v21);
        break;
      case 2u:
        v26 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v12, v26);
        v27 = sub_100004FC8(&qword_10015C420);
        swift_bridgeObjectRelease(*(_QWORD *)(v12 + *(int *)(v27 + 48) + 8));
        break;
      case 3u:
        swift_bridgeObjectRelease(*(_QWORD *)(v12 + 8));
        swift_bridgeObjectRelease(*(_QWORD *)(v12 + 24));
        swift_bridgeObjectRelease(*(_QWORD *)(v12 + 40));
        swift_bridgeObjectRelease(*(_QWORD *)(v12 + 56));
        break;
      case 4u:
        swift_bridgeObjectRelease(*(_QWORD *)(v12 + 8));
        swift_bridgeObjectRelease(*(_QWORD *)(v12 + 24));
        swift_bridgeObjectRelease(*(_QWORD *)(v12 + 40));
        break;
      case 5u:
        swift_bridgeObjectRelease(*(_QWORD *)(v12 + 8));
        swift_bridgeObjectRelease(*(_QWORD *)(v12 + 24));

        swift_bridgeObjectRelease(*(_QWORD *)(v12 + 40));
        if (*(_QWORD *)(v12 + 72))
          sub_100005474((_QWORD *)(v12 + 48));
        break;
      default:
        break;
    }
  }
  v13 = (v7 + v8 + v11) & ~v11;
  swift_release(*(_QWORD *)(v12 + *(int *)(v1 + 20)) & 0x3FFFFFFFFFFFFFFFLL);
  v14 = v0 + v7;
  v15 = type metadata accessor for URL(0);
  v16 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8);
  v16(v14, v15);
  v17 = v14 + v5[5];
  v18 = type metadata accessor for SettingsURLDestination.Action(0);
  switch(swift_getEnumCaseMultiPayload(v17, v18))
  {
    case 1u:
      switch(swift_getEnumCaseMultiPayload(v17, v9))
      {
        case 0u:
        case 1u:
          v22 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v17, v22);
          break;
        case 2u:
          v28 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v17, v28);
          v29 = sub_100004FC8(&qword_10015C420);
          swift_bridgeObjectRelease(*(_QWORD *)(v17 + *(int *)(v29 + 48) + 8));
          break;
        case 3u:
          swift_bridgeObjectRelease(*(_QWORD *)(v17 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v17 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(v17 + 40));
          swift_bridgeObjectRelease(*(_QWORD *)(v17 + 56));
          break;
        case 4u:
          swift_bridgeObjectRelease(*(_QWORD *)(v17 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v17 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(v17 + 40));
          break;
        case 5u:
          swift_bridgeObjectRelease(*(_QWORD *)(v17 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v17 + 24));

          swift_bridgeObjectRelease(*(_QWORD *)(v17 + 40));
          if (*(_QWORD *)(v17 + 72))
            sub_100005474((_QWORD *)(v17 + 48));
          break;
        default:
          goto LABEL_4;
      }
      break;
    case 2u:
    case 3u:
    case 4u:
      v16(v17, v15);
      break;
    default:
      break;
  }
LABEL_4:
  swift_bridgeObjectRelease(*(_QWORD *)(v14 + v5[6]));
  swift_bridgeObjectRelease(*(_QWORD *)(v14 + v5[7] + 8));
  v19 = v0 + v13;
  switch(swift_getEnumCaseMultiPayload(v0 + v13, v9))
  {
    case 0u:
    case 1u:
      v20 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v0 + v13, v20);
      break;
    case 2u:
      v23 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v0 + v13, v23);
      v24 = sub_100004FC8(&qword_10015C420);
      swift_bridgeObjectRelease(*(_QWORD *)(v19 + *(int *)(v24 + 48) + 8));
      break;
    case 3u:
      swift_bridgeObjectRelease(*(_QWORD *)(v19 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v19 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(v19 + 40));
      swift_bridgeObjectRelease(*(_QWORD *)(v19 + 56));
      break;
    case 4u:
      swift_bridgeObjectRelease(*(_QWORD *)(v19 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v19 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(v19 + 40));
      break;
    case 5u:
      swift_bridgeObjectRelease(*(_QWORD *)(v19 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v19 + 24));

      swift_bridgeObjectRelease(*(_QWORD *)(v19 + 40));
      if (*(_QWORD *)(v19 + 72))
        sub_100005474((_QWORD *)(v19 + 48));
      break;
    default:
      return swift_deallocObject(v0, v13 + v30, v32 | v31 | v11 | 7);
  }
  return swift_deallocObject(v0, v13 + v30, v32 | v31 | v11 | 7);
}

void sub_1000F0810()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(type metadata accessor for SettingsAppDetailContent(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 25) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(_QWORD *)(type metadata accessor for SettingsURLDestination(0) - 8);
  v5 = (v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PrimarySettingsListItemIdentifier(0) - 8) + 80);
  sub_1000E38FC(*(_QWORD *)(v0 + 16), *(unsigned __int8 *)(v0 + 24), v0 + v2, v0 + v5, v0 + ((v5 + v6 + v7) & ~v7));
}

uint64_t sub_1000F08A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = type metadata accessor for SettingsAppDetailContent(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (int *)type metadata accessor for SettingsURLDestination(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v24 = *(_QWORD *)(v7 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  v10 = v0 + v4;
  v11 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11))
  {
    switch(swift_getEnumCaseMultiPayload(v10, v11))
    {
      case 0u:
      case 1u:
        v18 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v10, v18);
        break;
      case 2u:
        v20 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v10, v20);
        v21 = sub_100004FC8(&qword_10015C420);
        swift_bridgeObjectRelease(*(_QWORD *)(v10 + *(int *)(v21 + 48) + 8));
        break;
      case 3u:
        swift_bridgeObjectRelease(*(_QWORD *)(v10 + 8));
        swift_bridgeObjectRelease(*(_QWORD *)(v10 + 24));
        swift_bridgeObjectRelease(*(_QWORD *)(v10 + 40));
        swift_bridgeObjectRelease(*(_QWORD *)(v10 + 56));
        break;
      case 4u:
        swift_bridgeObjectRelease(*(_QWORD *)(v10 + 8));
        swift_bridgeObjectRelease(*(_QWORD *)(v10 + 24));
        swift_bridgeObjectRelease(*(_QWORD *)(v10 + 40));
        break;
      case 5u:
        swift_bridgeObjectRelease(*(_QWORD *)(v10 + 8));
        swift_bridgeObjectRelease(*(_QWORD *)(v10 + 24));

        swift_bridgeObjectRelease(*(_QWORD *)(v10 + 40));
        if (*(_QWORD *)(v10 + 72))
          sub_100005474((_QWORD *)(v10 + 48));
        break;
      default:
        break;
    }
  }
  swift_release(*(_QWORD *)(v10 + *(int *)(v1 + 20)) & 0x3FFFFFFFFFFFFFFFLL);
  v12 = v0 + v9;
  v13 = type metadata accessor for URL(0);
  v14 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8);
  v14(v0 + v9, v13);
  v15 = v0 + v9 + v6[5];
  v16 = type metadata accessor for SettingsURLDestination.Action(0);
  switch(swift_getEnumCaseMultiPayload(v15, v16))
  {
    case 1u:
      switch(swift_getEnumCaseMultiPayload(v15, v11))
      {
        case 0u:
        case 1u:
          v19 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v15, v19);
          break;
        case 2u:
          v22 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v15, v22);
          v23 = sub_100004FC8(&qword_10015C420);
          swift_bridgeObjectRelease(*(_QWORD *)(v15 + *(int *)(v23 + 48) + 8));
          break;
        case 3u:
          swift_bridgeObjectRelease(*(_QWORD *)(v15 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v15 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(v15 + 40));
          swift_bridgeObjectRelease(*(_QWORD *)(v15 + 56));
          break;
        case 4u:
          swift_bridgeObjectRelease(*(_QWORD *)(v15 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v15 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(v15 + 40));
          break;
        case 5u:
          swift_bridgeObjectRelease(*(_QWORD *)(v15 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v15 + 24));

          swift_bridgeObjectRelease(*(_QWORD *)(v15 + 40));
          if (*(_QWORD *)(v15 + 72))
            sub_100005474((_QWORD *)(v15 + 48));
          break;
        default:
          goto LABEL_4;
      }
      break;
    case 2u:
    case 3u:
    case 4u:
      v14(v15, v13);
      break;
    default:
      break;
  }
LABEL_4:
  swift_bridgeObjectRelease(*(_QWORD *)(v12 + v6[6]));
  swift_bridgeObjectRelease(*(_QWORD *)(v12 + v6[7] + 8));
  return swift_deallocObject(v0, v24 + v9 + 1, v3 | v8 | 7);
}

uint64_t sub_1000F0C1C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(type metadata accessor for SettingsAppDetailContent(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(_QWORD *)(type metadata accessor for SettingsURLDestination(0) - 8);
  v5 = (v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  return sub_1000E7AC4(*(_QWORD *)(v0 + 16), v0 + v2, v0 + v5, *(unsigned __int8 *)(v0 + v5 + *(_QWORD *)(v4 + 64)));
}

uint64_t sub_1000F0C8C()
{
  uint64_t v0;

  return sub_1000E8464(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000F0CA4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000F0CC8()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000F0CEC(uint64_t a1)
{
  uint64_t v1;

  return sub_1000E5234(a1, *(void ***)(v1 + 16), *(_QWORD **)(v1 + 24), *(uint64_t **)(v1 + 32));
}

uint64_t sub_1000F0CF8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = (int *)type metadata accessor for SettingsURLDestination(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  v6 = v0 + v4;
  v7 = type metadata accessor for URL(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v0 + v4, v7);
  v9 = v0 + v4 + v1[5];
  v10 = type metadata accessor for SettingsURLDestination.Action(0);
  switch(swift_getEnumCaseMultiPayload(v9, v10))
  {
    case 1u:
      v14 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
      switch(swift_getEnumCaseMultiPayload(v9, v14))
      {
        case 0u:
        case 1u:
          v15 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v9, v15);
          break;
        case 2u:
          v16 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v9, v16);
          v17 = sub_100004FC8(&qword_10015C420);
          swift_bridgeObjectRelease(*(_QWORD *)(v9 + *(int *)(v17 + 48) + 8));
          break;
        case 3u:
          swift_bridgeObjectRelease(*(_QWORD *)(v9 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v9 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(v9 + 40));
          swift_bridgeObjectRelease(*(_QWORD *)(v9 + 56));
          break;
        case 4u:
          swift_bridgeObjectRelease(*(_QWORD *)(v9 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v9 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(v9 + 40));
          break;
        case 5u:
          swift_bridgeObjectRelease(*(_QWORD *)(v9 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v9 + 24));

          swift_bridgeObjectRelease(*(_QWORD *)(v9 + 40));
          if (*(_QWORD *)(v9 + 72))
            sub_100005474((_QWORD *)(v9 + 48));
          break;
        default:
          goto LABEL_3;
      }
      break;
    case 2u:
    case 3u:
    case 4u:
      v8(v9, v7);
      break;
    default:
      break;
  }
LABEL_3:
  v11 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[6]));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[7] + 8));
  swift_release(*(_QWORD *)(v0 + v11));
  swift_release(*(_QWORD *)(v0 + v12));
  return swift_deallocObject(v0, v12 + 8, v3 | 7);
}

uint64_t sub_1000F0F24()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for SettingsURLDestination(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1000E6148(*(_QWORD *)(v0 + 16), v0 + v2, *(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1000F0F74()
{
  uint64_t v0;

  return sub_1000E7870(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000F0F8C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = (int *)type metadata accessor for SettingsURLDestination(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  v6 = v0 + v4;
  v7 = type metadata accessor for URL(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v0 + v4, v7);
  v9 = v0 + v4 + v1[5];
  v10 = type metadata accessor for SettingsURLDestination.Action(0);
  switch(swift_getEnumCaseMultiPayload(v9, v10))
  {
    case 1u:
      v14 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
      switch(swift_getEnumCaseMultiPayload(v9, v14))
      {
        case 0u:
        case 1u:
          v15 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v9, v15);
          break;
        case 2u:
          v16 = type metadata accessor for FLFollowUpInformation(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v9, v16);
          v17 = sub_100004FC8(&qword_10015C420);
          swift_bridgeObjectRelease(*(_QWORD *)(v9 + *(int *)(v17 + 48) + 8));
          break;
        case 3u:
          swift_bridgeObjectRelease(*(_QWORD *)(v9 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v9 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(v9 + 40));
          swift_bridgeObjectRelease(*(_QWORD *)(v9 + 56));
          break;
        case 4u:
          swift_bridgeObjectRelease(*(_QWORD *)(v9 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v9 + 24));
          swift_bridgeObjectRelease(*(_QWORD *)(v9 + 40));
          break;
        case 5u:
          swift_bridgeObjectRelease(*(_QWORD *)(v9 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v9 + 24));

          swift_bridgeObjectRelease(*(_QWORD *)(v9 + 40));
          if (*(_QWORD *)(v9 + 72))
            sub_100005474((_QWORD *)(v9 + 48));
          break;
        default:
          goto LABEL_3;
      }
      break;
    case 2u:
    case 3u:
    case 4u:
      v8(v9, v7);
      break;
    default:
      break;
  }
LABEL_3:
  v11 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[6]));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[7] + 8));
  swift_release(*(_QWORD *)(v0 + v11));
  swift_release(*(_QWORD *)(v0 + v12));
  return swift_deallocObject(v0, v12 + 8, v3 | 7);
}

uint64_t sub_1000F11B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = *(_QWORD *)(type metadata accessor for SettingsURLDestination(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)(v1 + 16);
  v8 = *(_QWORD *)(v1 + 24);
  v9 = v1 + v5;
  v10 = *(_QWORD *)(v1 + v6);
  v11 = *(_QWORD *)(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFF8));
  v12 = (_QWORD *)swift_task_alloc(dword_10015C5AC);
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = sub_1000526BC;
  return sub_1000E7F98(a1, v7, v8, v9, v10, v11);
}

uint64_t sub_1000F126C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _BYTE *v29;
  uint64_t KeyPath;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t (*v42)(uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int (*v46)(char *, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD v92[4];

  v82 = a2;
  v4 = sub_100004FC8((uint64_t *)&unk_100156F00);
  __chkstk_darwin(v4);
  v80 = (uint64_t)&v76 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = type metadata accessor for SettingsURLDestination.Action(0);
  __chkstk_darwin(v83);
  v84 = (uint64_t)&v76 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004FC8((uint64_t *)&unk_10015C400);
  v8 = __chkstk_darwin(v7);
  v79 = (uint64_t)&v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v76 - v10;
  v12 = type metadata accessor for SettingsURLDestination(0);
  v86 = *(_QWORD *)(v12 - 8);
  v87 = v12;
  v13 = __chkstk_darwin(v12);
  v77 = (uint64_t)&v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v78 = (uint64_t)&v76 - v16;
  v17 = __chkstk_darwin(v15);
  v76 = (uint64_t)&v76 - v18;
  __chkstk_darwin(v17);
  v85 = (uint64_t)&v76 - v19;
  v20 = sub_100004FC8(&qword_10015C890);
  __chkstk_darwin(v20);
  v22 = (char *)&v76 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = __chkstk_darwin(v23);
  v81 = (uint64_t)&v76 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v28 = (char *)&v76 - v27;
  v88 = v2;
  v29 = sub_1000DB598();
  KeyPath = swift_getKeyPath(&unk_10011B110);
  v92[0] = v29;
  v31 = sub_100007828(&qword_100158EF0, type metadata accessor for PrimarySettingsListModel, (uint64_t)&unk_10011B328);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v92, KeyPath, v31);
  swift_release(KeyPath);
  v32 = (uint64_t)&v29[OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_effectiveSelection];
  swift_beginAccess(&v29[OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_effectiveSelection], v92, 0, 0);
  sub_100018C00(v32, (uint64_t)v22, &qword_10015C890);
  swift_release(v29);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23) == 1)
  {
    sub_10000BA50((uint64_t)v22, &qword_10015C890);
  }
  else
  {
    sub_100007670((uint64_t)v22, (uint64_t)v28, type metadata accessor for PrimarySettingsListItemIdentifier);
    v33 = _swiftEmptyArrayStorage;
    v91 = _swiftEmptyArrayStorage;
    v34 = *(_QWORD *)(a1 + 16);
    if (v34)
    {
      swift_bridgeObjectRetain(a1);
      v35 = 120;
      do
      {
        v36 = swift_bridgeObjectRetain(*(_QWORD *)(a1 + v35));
        sub_1000F20B8(v36);
        v35 += 96;
        --v34;
      }
      while (v34);
      swift_bridgeObjectRelease(a1);
      v33 = v91;
    }
    v37 = v33[2];
    if (!v37)
    {
      swift_bridgeObjectRelease(v33);
LABEL_13:
      sub_1000DB8BC();
      v42 = type metadata accessor for PrimarySettingsListItemIdentifier;
      v43 = (uint64_t)v28;
      return sub_1000076B4(v43, v42);
    }
    v38 = *(_QWORD *)(type metadata accessor for PrimarySettingsListItemModel(0) - 8);
    v39 = (uint64_t)v33 + ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80));
    v40 = *(_QWORD *)(v38 + 72);
    swift_bridgeObjectRetain(v33);
    while (1)
    {
      sub_1000A103C(v39, (uint64_t)v28);
      if ((v41 & 1) != 0)
        break;
      v39 += v40;
      if (!--v37)
      {
        swift_bridgeObjectRelease_n(v33, 2);
        goto LABEL_13;
      }
    }
    swift_bridgeObjectRelease_n(v33, 2);
    sub_1000076B4((uint64_t)v28, type metadata accessor for PrimarySettingsListItemIdentifier);
  }
  v44 = v88 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel_pendingURLDestination;
  swift_beginAccess(v88 + OBJC_IVAR____TtC11SettingsApp26SettingsAppNavigationModel_pendingURLDestination, &v91, 0, 0);
  sub_100018C00(v44, (uint64_t)v11, (uint64_t *)&unk_10015C400);
  v45 = v87;
  v46 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v86 + 48);
  if (v46(v11, 1, v87) == 1)
    return sub_10000BA50((uint64_t)v11, (uint64_t *)&unk_10015C400);
  v48 = v85;
  sub_100007670((uint64_t)v11, v85, type metadata accessor for SettingsURLDestination);
  v49 = v48 + *(int *)(v45 + 20);
  v50 = v84;
  sub_1000076F0(v49, v84, type metadata accessor for SettingsURLDestination.Action);
  if (swift_getEnumCaseMultiPayload(v50, v83) == 1)
  {
    v51 = v81;
    sub_100007670(v50, v81, type metadata accessor for PrimarySettingsListItemIdentifier);
    if (*(_QWORD *)(v82 + 16) && (v52 = sub_1000DA830(v51), (v53 & 1) != 0))
    {
      v54 = v52;
      v55 = *(_QWORD *)(v82 + 56);
      v56 = type metadata accessor for PrimarySettingsListItemModel(0);
      v57 = *(_QWORD *)(v56 - 8);
      v58 = v55 + *(_QWORD *)(v57 + 72) * v54;
      v59 = v80;
      sub_1000076F0(v58, v80, type metadata accessor for PrimarySettingsListItemModel);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v57 + 56))(v59, 0, 1, v56);
      sub_10000BA50(v59, (uint64_t *)&unk_100156F00);
      if (qword_100156CB0 != -1)
        swift_once(&qword_100156CB0, sub_10008BE28);
      v60 = type metadata accessor for Logger(0);
      sub_100007808(v60, (uint64_t)qword_10015D2C8);
      v61 = v76;
      v62 = sub_1000076F0(v48, v76, type metadata accessor for SettingsURLDestination);
      v63 = Logger.logObject.getter(v62);
      v64 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v63, v64))
      {
        v65 = swift_slowAlloc(22, -1);
        v66 = swift_slowAlloc(32, -1);
        *(_DWORD *)v65 = 141558275;
        v89 = 1752392040;
        v90 = v66;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, &v90, v65 + 4, v65 + 12);
        *(_WORD *)(v65 + 12) = 2081;
        v67 = sub_10000E540();
        v69 = v68;
        v89 = sub_1000DA1F0(v67, v68, &v90);
        v51 = v81;
        v48 = v85;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, &v90, v65 + 14, v65 + 22);
        swift_bridgeObjectRelease(v69);
        sub_1000076B4(v61, type metadata accessor for SettingsURLDestination);
        _os_log_impl((void *)&_mh_execute_header, v63, v64, "Pending URL Destination '%{private,mask.hash}s' has actionable selection now.", (uint8_t *)v65, 0x16u);
        swift_arrayDestroy(v66, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v66, -1, -1);
        swift_slowDealloc(v65, -1, -1);
      }
      else
      {
        sub_1000076B4(v61, type metadata accessor for SettingsURLDestination);
      }

      v72 = v79;
      sub_1000DE948(v79);
      v73 = v77;
      sub_1000076F0(v48, v77, type metadata accessor for SettingsURLDestination);
      v74 = v46((char *)v72, 1, v87);
      v75 = v78;
      if (v74 == 1)
      {
        sub_100007670(v73, v78, type metadata accessor for SettingsURLDestination);
        sub_10000BA50(v72, (uint64_t *)&unk_10015C400);
      }
      else
      {
        sub_1000076B4(v73, type metadata accessor for SettingsURLDestination);
        sub_100007670(v72, v75, type metadata accessor for SettingsURLDestination);
      }
      sub_1000DC12C(v75);
      sub_1000076B4(v75, type metadata accessor for SettingsURLDestination);
      sub_1000076B4(v51, type metadata accessor for PrimarySettingsListItemIdentifier);
      v43 = v48;
      v42 = type metadata accessor for SettingsURLDestination;
    }
    else
    {
      v70 = type metadata accessor for PrimarySettingsListItemModel(0);
      v71 = v80;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 56))(v80, 1, 1, v70);
      sub_10000BA50(v71, (uint64_t *)&unk_100156F00);
      sub_1000076B4(v51, type metadata accessor for PrimarySettingsListItemIdentifier);
      v42 = type metadata accessor for SettingsURLDestination;
      v43 = v48;
    }
  }
  else
  {
    sub_1000076B4(v48, type metadata accessor for SettingsURLDestination);
    v42 = type metadata accessor for SettingsURLDestination.Action;
    v43 = v50;
  }
  return sub_1000076B4(v43, v42);
}

unint64_t sub_1000F1A90()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015C608;
  if (!qword_10015C608)
  {
    v1 = sub_100007BBC(255, &qword_10015C5F8, NSRunLoop_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSRunLoop, v1);
    atomic_store(result, (unint64_t *)&qword_10015C608);
  }
  return result;
}

uint64_t sub_1000F1AE8()
{
  uint64_t v0;

  return sub_1000E29E4(v0);
}

uint64_t sub_1000F1AF0()
{
  uint64_t v0;

  return sub_1000EC2C8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), (uint64_t (*)(uint64_t))&type metadata accessor for SettingsAnyPlatformViewControllerRecipe, &qword_100159138, (uint64_t)&protocol conformance descriptor for SettingsAnyPlatformViewControllerRecipe);
}

uint64_t sub_1000F1B20()
{
  uint64_t v0;

  return sub_1000EC2C8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), (uint64_t (*)(uint64_t))&type metadata accessor for PreferencesControllerRecipe, (unint64_t *)&qword_10015C620, (uint64_t)&protocol conformance descriptor for PreferencesControllerRecipe);
}

id sub_1000F1B50()
{
  uint64_t v0;

  return sub_1000E30F4(*(void **)(v0 + 16));
}

uint64_t sub_1000F1B58(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100004FC8(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 24))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000F1BA4(uint64_t a1)
{
  uint64_t v1;

  return sub_1000E90DC(a1, *(_QWORD **)(v1 + 16));
}

uint64_t sub_1000F1BAC()
{
  uint64_t v0;

  return sub_1000E97D0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000F1BF0()
{
  return sub_1000EC528();
}

uint64_t sub_1000F1C04()
{
  return sub_1000F0368();
}

void sub_1000F1C18()
{
  sub_1000EC548();
}

uint64_t sub_1000F1C30(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  char v20;
  char v21[8];
  uint64_t v22;
  int64_t v23;

  v6 = a3 + 64;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v23 = (unint64_t)(v7 + 63) >> 6;
  result = swift_bridgeObjectRetain(a3);
  v11 = 0;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v11 << 6);
      goto LABEL_19;
    }
    if (__OFADD__(v11++, 1))
      break;
    if (v11 >= v23)
      goto LABEL_27;
    v15 = *(_QWORD *)(v6 + 8 * v11);
    if (!v15)
    {
      v16 = v11 + 1;
      if (v11 + 1 >= v23)
        goto LABEL_27;
      v15 = *(_QWORD *)(v6 + 8 * v16);
      if (!v15)
      {
        v16 = v11 + 2;
        if (v11 + 2 >= v23)
          goto LABEL_27;
        v15 = *(_QWORD *)(v6 + 8 * v16);
        if (!v15)
        {
          v16 = v11 + 3;
          if (v11 + 3 >= v23)
            goto LABEL_27;
          v15 = *(_QWORD *)(v6 + 8 * v16);
          if (!v15)
          {
            v16 = v11 + 4;
            if (v11 + 4 >= v23)
            {
LABEL_27:
              swift_release(a3);
              v20 = 0;
              return v20 & 1;
            }
            v15 = *(_QWORD *)(v6 + 8 * v16);
            if (!v15)
            {
              while (1)
              {
                v11 = v16 + 1;
                if (__OFADD__(v16, 1))
                  goto LABEL_30;
                if (v11 >= v23)
                  goto LABEL_27;
                v15 = *(_QWORD *)(v6 + 8 * v11);
                ++v16;
                if (v15)
                  goto LABEL_18;
              }
            }
          }
        }
      }
      v11 = v16;
    }
LABEL_18:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v11 << 6);
LABEL_19:
    v17 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v13);
    v21[0] = *(_BYTE *)(*(_QWORD *)(a3 + 48) + v13);
    v22 = v17;
    swift_bridgeObjectRetain(v17);
    v18 = a1(v21);
    if (v3)
    {
      swift_release(a3);
      swift_bridgeObjectRelease(v17);
      return v20 & 1;
    }
    v19 = v18;
    result = swift_bridgeObjectRelease(v17);
    if ((v19 & 1) != 0)
    {
      swift_release(a3);
      v20 = 1;
      return v20 & 1;
    }
  }
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1000F1E18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_10000BA50(a1, &qword_10015C5A0);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v15 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v16 = swift_allocObject(&unk_10014DF28, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v17 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  else
  {
    v17 = 0;
  }
  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_100158B40, v16);
}

uint64_t sub_1000F1F64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD v20[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_10000BA50(a1, &qword_10015C5A0);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v15 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v16 = swift_allocObject(&unk_10014E088, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  v17 = sub_100004FC8(&qword_10015CA18);
  if (v14 | v12)
  {
    v20[0] = 0;
    v20[1] = 0;
    v18 = v20;
    v20[2] = v12;
    v20[3] = v14;
  }
  else
  {
    v18 = 0;
  }
  return swift_task_create(v8, v18, v17, &unk_10015CA10, v16);
}

uint64_t sub_1000F20B8(uint64_t a1)
{
  return sub_1000F23E8(a1, (uint64_t (*)(void))sub_100052720, type metadata accessor for PrimarySettingsListItemModel);
}

uint64_t sub_1000F20CC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v16 = a1;
    else
      v16 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (!((unint64_t)*v1 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v4 < 0)
    v17 = *v1;
  else
    v17 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v1);
  v5 = _CocoaArrayWrapper.endIndex.getter(v17);
  swift_bridgeObjectRelease(v4);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_29;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if ((unint64_t)v4 >> 62)
    goto LABEL_31;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain(v4);
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v5, v9, 1, v4);
    swift_bridgeObjectRelease(*v1);
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = sub_1001038C4(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1);
    if (v11 >= v3)
      break;
LABEL_30:
    __break(1u);
LABEL_31:
    if (v4 < 0)
      v18 = v4;
    else
      v18 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v9 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(v4);
  }
  if (v11 < 1)
    goto LABEL_19;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_19:
    v15 = swift_bridgeObjectRelease(result);
    return specialized Array._endMutation()(v15);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000F2284(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;
  char v16;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_100052940(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy(v9);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v16 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v16, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000F23D4(uint64_t a1)
{
  return sub_1000F23E8(a1, (uint64_t (*)(void))sub_10005270C, (uint64_t (*)(_QWORD))&type metadata accessor for URLQueryItem);
}

uint64_t sub_1000F23E8(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(_QWORD))
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t result;
  char v26;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (swift_isUniquelyReferenced_nonNull_native(*v3) && v6 + v4 <= *(_QWORD *)(v5 + 24) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_15;
  }
  v5 = a2();
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_15:
    if (!v4)
      goto LABEL_16;
    goto LABEL_18;
  }
LABEL_5:
  v10 = *(_QWORD *)(v5 + 16);
  v11 = (*(_QWORD *)(v5 + 24) >> 1) - v10;
  v12 = a3(0);
  if (v11 < v4)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v13 = *(_QWORD *)(v12 - 8);
  v14 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v15 = *(_QWORD *)(v13 + 72);
  v16 = v5 + v14 + v15 * v10;
  v17 = a1 + v14;
  v18 = v15 * v4;
  v19 = v16 + v18;
  v20 = v17 + v18;
  if (v17 < v19 && v16 < v20)
    goto LABEL_21;
  swift_arrayInitWithCopy(v16);
  if (!v4)
  {
LABEL_16:
    result = swift_bridgeObjectRelease(a1);
    *v3 = v5;
    return result;
  }
  v22 = *(_QWORD *)(v5 + 16);
  v23 = __OFADD__(v22, v4);
  v24 = v22 + v4;
  if (!v23)
  {
    *(_QWORD *)(v5 + 16) = v24;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  v26 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v26, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000F2560(uint64_t a1)
{
  _QWORD *v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;
  char v17;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = sub_100052DA0(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = (unint64_t)&v3[5 * v9 + 4];
  if (a1 + 32 < v10 + 40 * v8 && v10 < a1 + 32 + 40 * v8)
    goto LABEL_24;
  sub_100004FC8(&qword_100157368);
  swift_arrayInitWithCopy(v10);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    result = swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v17 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v17, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000F26D4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  int64_t v22;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, char *, uint64_t);
  void (*v46)(_QWORD *);
  uint64_t v47;
  uint64_t result;
  uint64_t v49;
  void (*v50)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  void (*v52)(uint64_t, char *, uint64_t);
  uint64_t v53;
  unsigned int (*v54)(uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61[4];

  v59 = a2;
  v9 = type metadata accessor for SettingsNavigationEventRecord(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v57 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100004FC8(qword_10015CB30);
  v13 = __chkstk_darwin(v12);
  v14 = __chkstk_darwin(v13);
  v55 = (uint64_t)&v49 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v49 - v17;
  v56 = a4;
  v19 = a4 >> 1;
  v20 = __OFSUB__(a4 >> 1, a3);
  v21 = (a4 >> 1) - a3;
  if (v20)
  {
    __break(1u);
    goto LABEL_26;
  }
  v60 = a1;
  a1 = *v4;
  v22 = *(_QWORD *)(*v4 + 16);
  v5 = v22 + v21;
  if (__OFADD__(v22, v21))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v58 = v16;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a1);
  *v4 = a1;
  if (!isUniquelyReferenced_nonNull_native || (v24 = *(_QWORD *)(a1 + 24) >> 1, v24 < v5))
  {
    if (v22 <= v5)
      v25 = v22 + v21;
    else
      v25 = v22;
    a1 = sub_100052EF4(isUniquelyReferenced_nonNull_native, v25, 1, a1);
    *v4 = a1;
    v24 = *(_QWORD *)(a1 + 24) >> 1;
  }
  v26 = *(_QWORD *)(a1 + 16);
  v27 = v24 - v26;
  if (v19 == a3)
  {
    if (v21 <= 0)
    {
      v21 = 0;
      v5 = a3;
      goto LABEL_23;
    }
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (v27 < v21)
  {
    __break(1u);
    goto LABEL_34;
  }
  if (v21 < 0)
    goto LABEL_51;
  v28 = *(_QWORD *)(v10 + 72);
  v29 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80)) + v28 * v26;
  v30 = v59 + v28 * a3;
  if (v30 >= v29 + v28 * v21 || v29 >= v30 + v28 * v21)
  {
    swift_arrayInitWithCopy(v29);
    if (!v21)
    {
LABEL_22:
      v5 = v19;
LABEL_23:
      if (v21 != v27)
        return swift_unknownObjectRelease(v60);
LABEL_28:
      v21 = *(_QWORD *)(a1 + 16);
      v50 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
      v50(v18, 1, 1, v9);
      a1 = v55;
      sub_100018C00((uint64_t)v18, v55, qword_10015CB30);
      v54 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
      if (v54(a1, 1, v9) == 1)
      {
LABEL_29:
        sub_10000BA50((uint64_t)v18, qword_10015CB30);
        swift_unknownObjectRelease(v60);
        return sub_10000BA50(a1, qword_10015CB30);
      }
      do
      {
LABEL_34:
        sub_10000BA50(a1, qword_10015CB30);
        v35 = *v4;
        v36 = *(_QWORD *)(*v4 + 24);
        if ((uint64_t)(v36 >> 1) < v21 + 1)
        {
          v37 = v5;
          v47 = sub_100052EF4(v36 > 1, v21 + 1, 1, v35);
          *v4 = v47;
          v53 = v47;
          v49 = *(_QWORD *)(v47 + 24) >> 1;
        }
        else
        {
          v49 = v36 >> 1;
          v53 = v35;
          v37 = v5;
        }
        v38 = *(unsigned __int8 *)(v10 + 80);
        v39 = v58;
        sub_100018C00((uint64_t)v18, v58, qword_10015CB30);
        if (v54(v39, 1, v9) == 1)
        {
          v40 = v58;
LABEL_38:
          sub_10000BA50(v40, qword_10015CB30);
          v34 = v21;
          v5 = v37;
        }
        else
        {
          v51 = v53 + ((v38 + 32) & ~v38);
          v41 = v49;
          if (v21 > v49)
            v41 = v21;
          v52 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 32);
          v53 = v41;
          v42 = v57;
          v40 = v58;
          while (1)
          {
            v44 = v40;
            v45 = v52;
            v52((uint64_t)v42, (char *)v44, v9);
            if (v53 == v21)
              break;
            sub_10000BA50((uint64_t)v18, qword_10015CB30);
            v45(v51 + *(_QWORD *)(v10 + 72) * v21, v42, v9);
            if (v37 == v19)
            {
              v43 = 1;
              v37 = v19;
            }
            else
            {
              v46 = sub_1000EEED4(v61, v37, v60, v59, a3, v56);
              (*(void (**)(char *))(v10 + 16))(v18);
              ((void (*)(uint64_t *, _QWORD))v46)(v61, 0);
              v20 = __OFADD__(v37++, 1);
              if (v20)
                goto LABEL_50;
              v43 = 0;
              v42 = v57;
            }
            v50(v18, v43, 1, v9);
            v40 = v58;
            sub_100018C00((uint64_t)v18, v58, qword_10015CB30);
            ++v21;
            if (v54(v40, 1, v9) == 1)
              goto LABEL_38;
          }
          (*(void (**)(char *, uint64_t))(v10 + 8))(v42, v9);
          v34 = v53;
          v21 = v53;
          v5 = v37;
        }
        *(_QWORD *)(*v4 + 16) = v34;
        a1 = v55;
        sub_100018C00((uint64_t)v18, v55, qword_10015CB30);
      }
      while (v54(a1, 1, v9) != 1);
      goto LABEL_29;
    }
    v32 = *(_QWORD *)(a1 + 16);
    v20 = __OFADD__(v32, v21);
    v33 = v32 + v21;
    if (!v20)
    {
      *(_QWORD *)(a1 + 16) = v33;
      goto LABEL_22;
    }
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_52;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_52:
  __break(1u);
  return result;
}

_QWORD *sub_1000F2C68(uint64_t a1, void **a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return _swiftEmptyArrayStorage;
  v5 = (_QWORD *)(a1 + 32);
  v25 = a1;
  swift_bridgeObjectRetain(a1);
  v6 = _swiftEmptyArrayStorage;
  do
  {
    sub_1001033D8(v5, a2, (uint64_t)&v18);
    if (v2)
    {
      swift_bridgeObjectRelease(v6);
      swift_bridgeObjectRelease(v25);
      return v6;
    }
    v8 = v24;
    if (v24)
    {
      v9 = v19;
      v16 = v21;
      v17 = v20;
      v15 = v22;
      v13 = v18;
      v14 = v23;
      if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
        v6 = sub_100052B58(0, v6[2] + 1, 1, v6);
      v11 = v6[2];
      v10 = v6[3];
      if (v11 >= v10 >> 1)
        v6 = sub_100052B58((_QWORD *)(v10 > 1), v11 + 1, 1, v6);
      v6[2] = v11 + 1;
      v7 = &v6[12 * v11];
      *((_OWORD *)v7 + 2) = v13;
      *((_BYTE *)v7 + 48) = v9;
      *(_OWORD *)(v7 + 7) = v17;
      *(_OWORD *)(v7 + 9) = v16;
      *(_OWORD *)(v7 + 11) = v15;
      *(_OWORD *)(v7 + 13) = v14;
      v7[15] = v8;
    }
    v5 += 5;
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease(v25);
  return v6;
}

uint64_t sub_1000F2DEC(char a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v2 = v1;
  if (qword_100156CA0 != -1)
    swift_once(&qword_100156CA0, sub_10008BDE8);
  v4 = type metadata accessor for Logger(0);
  sub_100007808(v4, (uint64_t)qword_10015D298);
  v5 = swift_retain_n(v1, 2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = swift_slowAlloc(32, -1);
    v17 = (_QWORD *)swift_slowAlloc(96, -1);
    *(_DWORD *)v8 = 136315650;
    v9 = _typeName(_:qualified:)(*v2, 0);
    v11 = v10;
    v15 = sub_1000DA1F0(v9, v10, (uint64_t *)&v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v8 + 4, v8 + 12);
    swift_release_n(v2, 2);
    swift_bridgeObjectRelease(v11);
    *(_WORD *)(v8 + 12) = 2080;
    v15 = sub_1000DA1F0(0xD00000000000001ELL, 0x8000000100127680, (uint64_t *)&v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v8 + 14, v8 + 22);
    *(_WORD *)(v8 + 22) = 2082;
    __asm { BR              X10 }
  }

  swift_release_n(v2, 2);
  if (a1 == 7)
  {
    KeyPath = swift_getKeyPath(&unk_10011B3B8);
    v17 = v2;
    v13 = sub_100007828(&qword_100158EF0, type metadata accessor for PrimarySettingsListModel, (uint64_t)&unk_10011B328);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v17, KeyPath, sub_1001066B0, v2, (char *)&type metadata for () + 8, v13);
    swift_release(KeyPath);
    a1 = 7;
  }
  else
  {
    sub_1000F7720(a1);
  }
  return sub_1000F7430(v2, a1);
}

uint64_t sub_1000F3178()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_10011B3B8);
  v4 = v0;
  v2 = sub_100007828(&qword_100158EF0, type metadata accessor for PrimarySettingsListModel, (uint64_t)&unk_10011B328);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0
                            + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_effectiveCurrentPresentedItemIdentifier);
}

uint64_t sub_1000F3204@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10011B3B8);
  v7 = v3;
  v5 = sub_100007828(&qword_100158EF0, type metadata accessor for PrimarySettingsListModel, (uint64_t)&unk_10011B328);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v5);
  result = swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_effectiveCurrentPresentedItemIdentifier);
  return result;
}

uint64_t sub_1000F3298(char *a1)
{
  return sub_1000F2DEC(*a1);
}

uint64_t sub_1000F32BC@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31[24];

  v2 = v1;
  v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004FC8(&qword_10015C890);
  __chkstk_darwin(v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (uint64_t)v2
      + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_pendingSelectionForSuccessfulPrimaryAppleAccountSignIn;
  swift_beginAccess((char *)v2+ OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_pendingSelectionForSuccessfulPrimaryAppleAccountSignIn, v31, 0, 0);
  sub_100018C00(v11, (uint64_t)v10, &qword_10015C890);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) != 1)
    return sub_100007670((uint64_t)v10, a1, type metadata accessor for PrimarySettingsListItemIdentifier);
  sub_10000BA50((uint64_t)v10, &qword_10015C890);
  if (qword_100156CA0 != -1)
    swift_once(&qword_100156CA0, sub_10008BDE8);
  v12 = type metadata accessor for Logger(0);
  sub_100007808(v12, (uint64_t)qword_10015D298);
  v13 = swift_retain_n(v2, 2);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.fault.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc(32, -1);
    v17 = swift_slowAlloc(96, -1);
    v28 = a1;
    v18 = v17;
    v30 = v17;
    *(_DWORD *)v16 = 136315650;
    v19 = _typeName(_:qualified:)(*v2, 0);
    v21 = v20;
    v29 = sub_1000DA1F0(v19, v20, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v16 + 4, v16 + 12);
    swift_release_n(v2, 2);
    swift_bridgeObjectRelease(v21);
    *(_WORD *)(v16 + 12) = 2080;
    v29 = sub_1000DA1F0(0xD000000000000034, 0x8000000100127770, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v16 + 14, v16 + 22);
    *(_WORD *)(v16 + 22) = 2082;
    swift_storeEnumTagMultiPayload(v7, v4, 6);
    sub_1000A03B0();
    v23 = v22;
    v25 = v24;
    sub_1000076B4((uint64_t)v7, type metadata accessor for PrimarySettingsListItemIdentifier);
    v29 = sub_1000DA1F0(v23, v25, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v16 + 24, v16 + 32);
    swift_bridgeObjectRelease(v25);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "(%s.%s): Application is in an unexpected state (no pending selection when called). Falling back to %{public}s", (uint8_t *)v16, 0x20u);
    swift_arrayDestroy(v18, 3, (char *)&type metadata for Any + 8);
    v26 = v18;
    a1 = v28;
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v16, -1, -1);

  }
  else
  {

    swift_release_n(v2, 2);
  }
  return swift_storeEnumTagMultiPayload(a1, v4, 6);
}

uint64_t sub_1000F3614(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  int v36;
  _BOOL4 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t KeyPath;
  char *v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t, uint64_t, uint64_t);
  int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  id v86;
  void *v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  char v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120[7];

  v2 = v1;
  v4 = type metadata accessor for FLFollowUpInformation(0);
  v108 = *(_QWORD *)(v4 - 8);
  v109 = v4;
  __chkstk_darwin(v4);
  v107 = (char *)&v99 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = sub_100004FC8(&qword_10015AD68);
  __chkstk_darwin(v103);
  v104 = (uint64_t)&v99 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v7 = *(_QWORD *)(v118 - 8);
  v8 = __chkstk_darwin(v118);
  v101 = (uint64_t)&v99 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v111 = (uint64_t)&v99 - v11;
  __chkstk_darwin(v10);
  v117 = (uint64_t)&v99 - v12;
  v13 = sub_100004FC8(&qword_10015C890);
  v14 = __chkstk_darwin(v13);
  v102 = (uint64_t)&v99 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v106 = (uint64_t)&v99 - v17;
  v18 = __chkstk_darwin(v16);
  v105 = (uint64_t)&v99 - v19;
  v20 = __chkstk_darwin(v18);
  v114 = (uint64_t)&v99 - v21;
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v99 - v23;
  v25 = __chkstk_darwin(v22);
  v116 = (uint64_t)&v99 - v26;
  v27 = __chkstk_darwin(v25);
  v29 = (char *)&v99 - v28;
  __chkstk_darwin(v27);
  v31 = (char *)&v99 - v30;
  if (qword_100156CA0 != -1)
    swift_once(&qword_100156CA0, sub_10008BDE8);
  v32 = type metadata accessor for Logger(0);
  v33 = sub_100007808(v32, (uint64_t)qword_10015D298);
  sub_100018C00(a1, (uint64_t)v31, &qword_10015C890);
  v34 = swift_retain_n(v2, 2);
  v110 = v33;
  v35 = Logger.logObject.getter(v34);
  v36 = static os_log_type_t.default.getter();
  v37 = os_log_type_enabled(v35, (os_log_type_t)v36);
  v115 = v24;
  if (v37)
  {
    LODWORD(v100) = v36;
    v112 = a1;
    v38 = v7;
    v39 = swift_slowAlloc(32, -1);
    v99 = swift_slowAlloc(96, -1);
    v120[0] = v99;
    *(_DWORD *)v39 = 136315650;
    v40 = _typeName(_:qualified:)(*v2, 0);
    v42 = v41;
    v119 = sub_1000DA1F0(v40, v41, v120);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, v120, v39 + 4, v39 + 12);
    v113 = (uint64_t)v2;
    swift_release_n(v2, 2);
    swift_bridgeObjectRelease(v42);
    *(_WORD *)(v39 + 12) = 2080;
    v119 = sub_1000DA1F0(0xD000000000000010, 0x8000000100127480, v120);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, v120, v39 + 14, v39 + 22);
    *(_WORD *)(v39 + 22) = 2082;
    sub_100018C00((uint64_t)v31, (uint64_t)v29, &qword_10015C890);
    v43 = v38;
    v44 = v118;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v29, 1, v118) == 1)
    {
      sub_10000BA50((uint64_t)v29, &qword_10015C890);
      v45 = 0xE300000000000000;
      v46 = 7104878;
    }
    else
    {
      sub_1000A03B0();
      v46 = v48;
      v45 = v49;
      sub_1000076B4((uint64_t)v29, type metadata accessor for PrimarySettingsListItemIdentifier);
    }
    v119 = sub_1000DA1F0(v46, v45, v120);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, v120, v39 + 24, v39 + 32);
    swift_bridgeObjectRelease(v45);
    sub_10000BA50((uint64_t)v31, &qword_10015C890);
    _os_log_impl((void *)&_mh_execute_header, v35, (os_log_type_t)v100, "Start (%s.%s), identifier: '%{public}s'…", (uint8_t *)v39, 0x20u);
    v50 = v99;
    swift_arrayDestroy(v99, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v50, -1, -1);
    swift_slowDealloc(v39, -1, -1);

    a1 = v112;
    v47 = (_QWORD *)v113;
    v7 = v43;
  }
  else
  {
    swift_release_n(v2, 2);
    sub_10000BA50((uint64_t)v31, &qword_10015C890);

    v47 = v2;
    v44 = v118;
  }
  KeyPath = swift_getKeyPath(&unk_10011B390);
  __chkstk_darwin(KeyPath);
  *(&v99 - 2) = (uint64_t)v47;
  *((_BYTE *)&v99 - 8) = 0;
  v52 = (char *)v47 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel___observationRegistrar;
  v120[0] = (uint64_t)v47;
  v113 = sub_100007828(&qword_100158EF0, type metadata accessor for PrimarySettingsListModel, (uint64_t)&unk_10011B328);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v120, KeyPath, sub_100103808, &v99 - 4, (char *)&type metadata for () + 8, v113);
  swift_release(KeyPath);
  v53 = v116;
  sub_100018C00(a1, v116, &qword_10015C890);
  v54 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  v55 = v54(v53, 1, v44);
  v56 = v117;
  if (v55 == 1)
  {
    sub_10000BA50(v53, &qword_10015C890);
    goto LABEL_17;
  }
  v100 = v52;
  sub_100007670(v53, v117, type metadata accessor for PrimarySettingsListItemIdentifier);
  if (qword_100156D50 != -1)
    swift_once(&qword_100156D50, sub_1000C6E88);
  v57 = (uint64_t)(id)qword_10015D410;
  v58 = sub_10009CE88();
  v59 = type metadata accessor for PrimarySettingsListItemVisibilityEvaluator();
  v120[3] = (uint64_t)&type metadata for PrimarySettingsListDataModelGenerationContext;
  v120[4] = (uint64_t)&off_100148E38;
  v120[0] = v57;
  *(&v99 - 4) = __chkstk_darwin(v59);
  *(&v99 - 3) = v58;
  *(&v99 - 2) = (uint64_t)v120;
  v60 = (id)v57;
  LOBYTE(v57) = sub_1000F1C30(sub_10010628C, (uint64_t)(&v99 - 6), v58);
  sub_100005474(v120);

  swift_bridgeObjectRelease(v58);
  if ((v57 & 1) == 0)
  {
    sub_1000076B4(v56, type metadata accessor for PrimarySettingsListItemIdentifier);

    v44 = v118;
LABEL_17:
    sub_1000F4E1C();
    v71 = (uint64_t)v115;
    sub_100018C00(a1, (uint64_t)v115, &qword_10015C890);
    if (v54(v71, 1, v44) == 1)
    {
LABEL_18:
      sub_1000F6A08(a1);
LABEL_19:
      sub_10000BA50(v71, &qword_10015C890);
      goto LABEL_26;
    }
    v72 = v114;
    sub_100018C00(v71, v114, &qword_10015C890);
    switch(swift_getEnumCaseMultiPayload(v72, v44))
    {
      case 0u:
        v78 = v107;
        v77 = v108;
        v79 = v109;
        (*(void (**)(char *, uint64_t, uint64_t))(v108 + 32))(v107, v72, v109);
        sub_1000F5848(v78, 0, 0);
        (*(void (**)(char *, uint64_t))(v77 + 8))(v78, v79);
        goto LABEL_19;
      case 2u:
        v80 = (uint64_t *)(v72 + *(int *)(sub_100004FC8(&qword_10015C420) + 48));
        v81 = *v80;
        v82 = v80[1];
        v84 = v107;
        v83 = v108;
        v85 = v109;
        (*(void (**)(char *, uint64_t, uint64_t))(v108 + 32))(v107, v72, v109);
        sub_1000F5848(v84, v81, v82);
        swift_bridgeObjectRelease(v82);
        (*(void (**)(char *, uint64_t))(v83 + 8))(v84, v85);
        goto LABEL_19;
      case 6u:
      case 0x2Cu:
        if ((sub_1000F5284() & 1) != 0)
          goto LABEL_18;
        sub_10000BA50(v71, &qword_10015C890);
        v73 = v105;
        sub_100018C00(a1, v105, &qword_10015C890);
        if (v54(v73, 1, v44) == 1)
        {
          __break(1u);
LABEL_43:
          __break(1u);
          JUMPOUT(0x1000F4370);
        }
        sub_1000F6E00(v73);
        sub_1000076B4(v73, type metadata accessor for PrimarySettingsListItemIdentifier);
        goto LABEL_26;
      case 0x10u:
        sub_100105E38();
        goto LABEL_19;
      case 0x21u:
        v86 = objc_msgSend((id)objc_opt_self(MCProfileConnection), "sharedConnection");
        if (!v86)
          goto LABEL_43;
        v87 = v86;
        v88 = objc_msgSend(v86, "isPasscodeSet");

        v89 = v106;
        sub_100018C00(a1, v106, &qword_10015C890);
        if (!v88)
        {
          sub_10000BA50(v89, &qword_10015C890);
          goto LABEL_18;
        }
        v90 = swift_getKeyPath(&unk_10011B368);
        v120[0] = (uint64_t)v47;
        ObservationRegistrar.access<A, B>(_:keyPath:)(v120, v90, v113);
        swift_release(v90);
        v91 = (char *)v47 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_effectiveSelection;
        swift_beginAccess((char *)v47 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_effectiveSelection, v120, 0, 0);
        v92 = v104 + *(int *)(v103 + 48);
        v93 = (uint64_t)v91;
        v94 = v104;
        sub_100018C00(v93, v104, &qword_10015C890);
        sub_100018C00(v89, v92, &qword_10015C890);
        if (v54(v94, 1, v44) == 1)
        {
          sub_10000BA50(v89, &qword_10015C890);
          if (v54(v92, 1, v44) == 1)
          {
            sub_10000BA50(v94, &qword_10015C890);
            goto LABEL_18;
          }
        }
        else
        {
          v95 = v102;
          sub_100018C00(v94, v102, &qword_10015C890);
          if (v54(v92, 1, v44) != 1)
          {
            v96 = v101;
            sub_100007670(v92, v101, type metadata accessor for PrimarySettingsListItemIdentifier);
            sub_1000A103C(v95, v96);
            v98 = v97;
            sub_1000076B4(v96, type metadata accessor for PrimarySettingsListItemIdentifier);
            sub_10000BA50(v106, &qword_10015C890);
            sub_1000076B4(v95, type metadata accessor for PrimarySettingsListItemIdentifier);
            sub_10000BA50(v94, &qword_10015C890);
            if ((v98 & 1) != 0)
              goto LABEL_18;
LABEL_41:
            sub_1000F56A4();
            goto LABEL_19;
          }
          sub_10000BA50(v106, &qword_10015C890);
          sub_1000076B4(v95, type metadata accessor for PrimarySettingsListItemIdentifier);
        }
        sub_10000BA50(v94, &qword_10015AD68);
        goto LABEL_41;
      default:
        sub_1000076B4(v72, type metadata accessor for PrimarySettingsListItemIdentifier);
        goto LABEL_18;
    }
  }
  v118 = 0;
  v61 = v111;
  v62 = sub_1000076F0(v56, v111, type metadata accessor for PrimarySettingsListItemIdentifier);
  v63 = Logger.logObject.getter(v62);
  v64 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v63, v64))
  {
    v65 = (uint8_t *)swift_slowAlloc(12, -1);
    v66 = swift_slowAlloc(32, -1);
    v112 = a1;
    v67 = v66;
    v120[0] = v66;
    *(_DWORD *)v65 = 136446210;
    sub_1000A03B0();
    v69 = v68;
    v119 = sub_1000DA1F0(v70, v68, v120);
    v56 = v117;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, v120, v65 + 4, v65 + 12);
    swift_bridgeObjectRelease(v69);
    sub_1000076B4(v61, type metadata accessor for PrimarySettingsListItemIdentifier);
    _os_log_impl((void *)&_mh_execute_header, v63, v64, "Attempted to select '%{public}s' which is not selectable based on visibility rules.", v65, 0xCu);
    swift_arrayDestroy(v67, 1, (char *)&type metadata for Any + 8);
    a1 = v112;
    swift_slowDealloc(v67, -1, -1);
    swift_slowDealloc(v65, -1, -1);
  }
  else
  {
    sub_1000076B4(v61, type metadata accessor for PrimarySettingsListItemIdentifier);
  }

  v74 = v113;
  v75 = swift_getKeyPath(&unk_10011B390);
  __chkstk_darwin(v75);
  *(&v99 - 2) = (uint64_t)v47;
  *((_BYTE *)&v99 - 8) = 1;
  v120[0] = (uint64_t)v47;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v120, v75, sub_100106B7C, &v99 - 4, (char *)&type metadata for () + 8, v74);

  swift_release(v75);
  sub_1000076B4(v56, type metadata accessor for PrimarySettingsListItemIdentifier);
LABEL_26:
  sub_1000FE9FC(v47, a1, 0xD000000000000010, 0x8000000100127480);
  return sub_10000BA50(a1, &qword_10015C890);
}

void sub_1000F4424(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;

  v2 = v1;
  v4 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v52 = *(_QWORD *)(v4 - 8);
  v5 = *(_QWORD *)(v52 + 64);
  v6 = __chkstk_darwin(v4);
  v7 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v48 - v9;
  __chkstk_darwin(v8);
  v12 = (char *)&v48 - v11;
  if (qword_100156CC0 != -1)
    swift_once(&qword_100156CC0, sub_10008BE7C);
  v13 = type metadata accessor for Logger(0);
  v14 = sub_100007808(v13, (uint64_t)qword_10015D2F8);
  sub_1000076F0(a1, (uint64_t)v12, type metadata accessor for PrimarySettingsListItemIdentifier);
  v15 = swift_retain_n(v2, 2);
  v51 = v14;
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc(32, -1);
    v48 = v4;
    v19 = v18;
    v20 = swift_slowAlloc(96, -1);
    v53 = v2;
    v21 = v20;
    v55 = v20;
    *(_DWORD *)v19 = 136315650;
    v22 = _typeName(_:qualified:)(*v53, 0);
    v50 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
    v24 = v23;
    v54 = sub_1000DA1F0(v22, v23, &v55);
    v49 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v19 + 4, v19 + 12);
    swift_release_n(v53, 2);
    swift_bridgeObjectRelease(v24);
    *(_WORD *)(v19 + 12) = 2080;
    v54 = sub_1000DA1F0(0xD000000000000019, 0x80000001001277B0, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v19 + 14, v19 + 22);
    *(_WORD *)(v19 + 22) = 2082;
    sub_1000A03B0();
    v26 = v25;
    v54 = sub_1000DA1F0(v27, v25, &v55);
    a1 = v49;
    v7 = v50;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v19 + 24, v19 + 32);
    swift_bridgeObjectRelease(v26);
    sub_1000076B4((uint64_t)v12, type metadata accessor for PrimarySettingsListItemIdentifier);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Start (%s.%s), item: %{public}s…", (uint8_t *)v19, 0x20u);
    swift_arrayDestroy(v21, 3, (char *)&type metadata for Any + 8);
    v28 = v21;
    v2 = v53;
    swift_slowDealloc(v28, -1, -1);
    v29 = v19;
    v4 = v48;
    swift_slowDealloc(v29, -1, -1);
  }
  else
  {
    swift_release_n(v2, 2);
    sub_1000076B4((uint64_t)v12, type metadata accessor for PrimarySettingsListItemIdentifier);
  }

  swift_storeEnumTagMultiPayload(v10, v4, 23);
  sub_1000A103C(a1, (uint64_t)v10);
  v31 = v30;
  sub_1000076B4((uint64_t)v10, type metadata accessor for PrimarySettingsListItemIdentifier);
  if ((v31 & 1) != 0)
  {
    type metadata accessor for Preloader(0);
    v32 = (void *)static Preloader.shared.getter();
    sub_1000076F0(a1, (uint64_t)v10, type metadata accessor for PrimarySettingsListItemIdentifier);
    v33 = *(unsigned __int8 *)(v52 + 80);
    v34 = (v33 + 24) & ~v33;
    v35 = swift_allocObject(&unk_10014E128, v34 + v5, v33 | 7);
    *(_QWORD *)(v35 + 16) = v2;
    sub_100007670((uint64_t)v10, v35 + v34, type metadata accessor for PrimarySettingsListItemIdentifier);
    swift_retain(v2);
    dispatch thunk of Preloader.preloadResources(completion:)(sub_100106B1C, v35);
    swift_release(v35);

  }
  else
  {
    sub_1000076F0(a1, (uint64_t)v7, type metadata accessor for PrimarySettingsListItemIdentifier);
    v36 = swift_retain_n(v2, 2);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v37, v38))
    {
      v39 = swift_slowAlloc(32, -1);
      v40 = swift_slowAlloc(96, -1);
      v55 = v40;
      *(_DWORD *)v39 = 136315650;
      v41 = _typeName(_:qualified:)(*v2, 0);
      v42 = (uint64_t)v7;
      v44 = v43;
      v54 = sub_1000DA1F0(v41, v43, &v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v39 + 4, v39 + 12);
      swift_release_n(v2, 2);
      swift_bridgeObjectRelease(v44);
      *(_WORD *)(v39 + 12) = 2080;
      v54 = sub_1000DA1F0(0xD000000000000019, 0x80000001001277B0, &v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v39 + 14, v39 + 22);
      *(_WORD *)(v39 + 22) = 2082;
      sub_1000A03B0();
      v46 = v45;
      v54 = sub_1000DA1F0(v47, v45, &v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v39 + 24, v39 + 32);
      swift_bridgeObjectRelease(v46);
      sub_1000076B4(v42, type metadata accessor for PrimarySettingsListItemIdentifier);
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "…Complete (%s.%s), item: %{public}s", (uint8_t *)v39, 0x20u);
      swift_arrayDestroy(v40, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v39, -1, -1);
    }
    else
    {
      swift_release_n(v2, 2);
      sub_1000076B4((uint64_t)v7, type metadata accessor for PrimarySettingsListItemIdentifier);
    }

  }
}

uint64_t sub_1000F49BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[6];
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;

  v1 = v0;
  KeyPath = swift_getKeyPath(&unk_10011B438);
  v3 = v0 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel___observationRegistrar;
  v30 = v1;
  v4 = sub_100007828(&qword_100158EF0, type metadata accessor for PrimarySettingsListModel, (uint64_t)&unk_10011B328);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v30, KeyPath, v4);
  swift_release(KeyPath);
  v5 = (_QWORD *)(v1 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel__cachedDataModel);
  v7 = *(_QWORD *)(v1 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel__cachedDataModel);
  v6 = *(_QWORD *)(v1 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel__cachedDataModel + 8);
  v8 = *(_QWORD *)(v1 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel__cachedDataModel + 16);
  if (v7)
  {
    v9 = *(_QWORD *)(v1 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel__cachedDataModel);
LABEL_9:
    sub_1001066E8(v7, v6, v8);
    return v9;
  }
  v26 = *(_QWORD *)(v1 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel__cachedDataModel + 16);
  v27 = v6;
  if (qword_100156CC0 != -1)
    swift_once(&qword_100156CC0, sub_10008BE7C);
  v29 = v3;
  v10 = type metadata accessor for Logger(0);
  v11 = sub_100007808(v10, (uint64_t)qword_10015D2F8);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "No cached data model found, requesting new snapshot.", v14, 2u);
    swift_slowDealloc(v14, -1, -1);
  }

  v15 = sub_1000F8300();
  v17 = v16;
  v19 = v18;
  v20 = swift_getKeyPath(&unk_10011B438);
  v28 = &v26;
  __chkstk_darwin(v20);
  v25[2] = v1;
  v25[3] = v15;
  v25[4] = v17;
  v25[5] = v19;
  v30 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v30, v20, sub_1001066CC, v25, (char *)&type metadata for () + 8, v4);
  swift_release(v20);
  swift_bridgeObjectRelease(v19);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v15);
  v21 = swift_getKeyPath(&unk_10011B438);
  v30 = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v30, v21, v4);
  result = swift_release(v21);
  v9 = *v5;
  if (*v5)
  {
    v24 = v5[1];
    v23 = v5[2];
    swift_bridgeObjectRetain(*v5);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v23);
    v8 = v26;
    v6 = v27;
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000F4C48@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F7B88((uint64_t)&unk_10011B368, &OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_effectiveSelection, &qword_10015C890, a1);
}

uint64_t sub_1000F4C64()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_10011B390);
  v4 = v0;
  v2 = sub_100007828(&qword_100158EF0, type metadata accessor for PrimarySettingsListModel, (uint64_t)&unk_10011B328);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t sub_1000F4CE8@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10011B390);
  v7 = v3;
  v5 = sub_100007828(&qword_100158EF0, type metadata accessor for PrimarySettingsListModel, (uint64_t)&unk_10011B328);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v5);
  result = swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3 + 16);
  return result;
}

uint64_t sub_1000F4D74(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_10011B390);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_100007828(&qword_100158EF0, type metadata accessor for PrimarySettingsListModel, (uint64_t)&unk_10011B328);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_100106B7C, v7, (char *)&type metadata for () + 8, v5);
  return swift_release(KeyPath);
}

void sub_1000F4E1C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  uint8_t *v18;
  _DWORD *v19;
  uint64_t v20;
  _QWORD *v21;

  v1 = v0;
  if (qword_100156CA0 != -1)
    swift_once(&qword_100156CA0, sub_10008BDE8);
  v2 = type metadata accessor for Logger(0);
  sub_100007808(v2, (uint64_t)qword_10015D298);
  v3 = swift_retain_n(v0, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = swift_slowAlloc(22, -1);
    v7 = swift_slowAlloc(64, -1);
    v21 = (_QWORD *)v7;
    *(_DWORD *)v6 = 136315394;
    v8 = _typeName(_:qualified:)(*v1, 0);
    v10 = v9;
    v20 = sub_1000DA1F0(v8, v9, (uint64_t *)&v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v6 + 4, v6 + 12);
    swift_release_n(v1, 2);
    swift_bridgeObjectRelease(v10);
    *(_WORD *)(v6 + 12) = 2080;
    v20 = sub_1000DA1F0(0xD000000000000017, 0x8000000100127660, (uint64_t *)&v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v6 + 14, v6 + 22);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Start (%s.%s)…", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v7, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

    swift_release_n(v1, 2);
  }
  KeyPath = swift_getKeyPath(&unk_10011B3B8);
  v21 = v1;
  v12 = sub_100007828(&qword_100158EF0, type metadata accessor for PrimarySettingsListModel, (uint64_t)&unk_10011B328);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v21, KeyPath, v12);
  v13 = swift_release(KeyPath);
  v14 = *((unsigned __int8 *)v1
        + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_effectiveCurrentPresentedItemIdentifier);
  v15 = Logger.logObject.getter(v13);
  v16 = static os_log_type_t.default.getter();
  v17 = os_log_type_enabled(v15, v16);
  if ((_DWORD)v14 == 7)
  {
    if (v17)
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "No presented item to dismiss, ignoring.", v18, 2u);
      swift_slowDealloc(v18, -1, -1);
    }

  }
  else
  {
    if (v17)
    {
      v19 = (_DWORD *)swift_slowAlloc(12, -1);
      v21 = (_QWORD *)swift_slowAlloc(32, -1);
      *v19 = 136446210;
      __asm { BR              X9 }
    }

    sub_1000F2DEC(7);
  }
  sub_1000FF0A4(v1, 0xD000000000000017, 0x8000000100127660);
}

uint64_t sub_1000F5284()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;

  v44 = type metadata accessor for PrimarySettingsListItemViewType(0);
  __chkstk_darwin(v44);
  v45 = (uint64_t)&v40 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for PrimarySettingsListAppleAccountLinkModel(0);
  __chkstk_darwin(v40);
  v41 = (uint64_t)&v40 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100004FC8((uint64_t *)&unk_100156F00);
  __chkstk_darwin(v5);
  v47 = (uint64_t)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for PrimarySettingsListItemModel(0);
  v7 = *(_QWORD *)(v46 - 8);
  v8 = __chkstk_darwin(v46);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v43 = (uint64_t)&v40 - v12;
  v13 = sub_1000F49BC(v11);
  v15 = v13;
  v16 = v14;
  v18 = v17;
  v48 = v7;
  v49 = _swiftEmptyArrayStorage;
  v19 = *(_QWORD *)(v13 + 16);
  if (v19)
  {
    v42 = v14;
    swift_bridgeObjectRetain(v13);
    v20 = 120;
    do
    {
      v21 = swift_bridgeObjectRetain(*(_QWORD *)(v15 + v20));
      sub_1000F23E8(v21, (uint64_t (*)(void))sub_100052720, type metadata accessor for PrimarySettingsListItemModel);
      v20 += 96;
      --v19;
    }
    while (v19);
    swift_bridgeObjectRelease_n(v15, 2);
    v7 = v48;
    v22 = v49;
    v16 = v42;
  }
  else
  {
    swift_bridgeObjectRelease(v13);
    v22 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease(v18);
  swift_bridgeObjectRelease(v16);
  v23 = v22[2];
  if (v23)
  {
    v24 = (uint64_t)v22 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v25 = *(_QWORD *)(v7 + 72);
    swift_bridgeObjectRetain(v22);
    while (1)
    {
      sub_1000076F0(v24, (uint64_t)v10, type metadata accessor for PrimarySettingsListItemModel);
      swift_storeEnumTagMultiPayload(v4, v2, 6);
      sub_1000A103C((uint64_t)v10, (uint64_t)v4);
      v27 = v26;
      sub_1000076B4((uint64_t)v4, type metadata accessor for PrimarySettingsListItemIdentifier);
      if ((v27 & 1) != 0)
        break;
      sub_1000076B4((uint64_t)v10, type metadata accessor for PrimarySettingsListItemModel);
      v24 += v25;
      if (!--v23)
      {
        swift_bridgeObjectRelease(v22);
        v28 = 1;
        v29 = v47;
        goto LABEL_13;
      }
    }
    swift_bridgeObjectRelease(v22);
    v29 = v47;
    sub_100007670((uint64_t)v10, v47, type metadata accessor for PrimarySettingsListItemModel);
    v28 = 0;
LABEL_13:
    v30 = v46;
    v7 = v48;
  }
  else
  {
    v28 = 1;
    v30 = v46;
    v29 = v47;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(v29, v28, 1, v30);
  swift_bridgeObjectRelease(v22);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v29, 1, v30) == 1)
  {
    sub_10000BA50(v29, (uint64_t *)&unk_100156F00);
  }
  else
  {
    v31 = v29;
    v32 = v43;
    sub_100007670(v31, v43, type metadata accessor for PrimarySettingsListItemModel);
    v33 = v45;
    sub_1000076F0(v32 + *(int *)(v30 + 20), v45, type metadata accessor for PrimarySettingsListItemViewType);
    sub_1000076B4(v32, type metadata accessor for PrimarySettingsListItemModel);
    if (swift_getEnumCaseMultiPayload(v33, v44))
    {
      sub_1000076B4(v33, type metadata accessor for PrimarySettingsListItemViewType);
    }
    else
    {
      v35 = v41;
      sub_100007670(v33, v41, type metadata accessor for PrimarySettingsListAppleAccountLinkModel);
      v36 = (uint64_t *)(v35 + *(int *)(v40 + 20));
      v37 = v36[1];
      v38 = v36[3];
      v39 = (void *)v36[5];
      sub_100096F30(*v36, v37, v36[2], v38, v36[4], v39);
      sub_1000076B4(v35, type metadata accessor for PrimarySettingsListAppleAccountLinkModel);
      if (v37)
      {
        swift_bridgeObjectRelease(v37);
        swift_bridgeObjectRelease(v38);

        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_1000F56A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v1 = v0;
  v2 = sub_100004FC8(&qword_10015C5A0);
  result = __chkstk_darwin(v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(v0 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_cachedPasscodeCredentialWrapper + 8))
  {
    if (qword_100156CA0 != -1)
      swift_once(&qword_100156CA0, sub_10008BDE8);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_100007808(v6, (uint64_t)qword_10015D298);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Device has passcode set, requesting modern passcode challenge.", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

    v11 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v5, 1, 1, v11);
    type metadata accessor for MainActor(0);
    v12 = swift_retain(v1);
    v13 = static MainActor.shared.getter(v12);
    v14 = (_QWORD *)swift_allocObject(&unk_10014DF00, 40, 7);
    v14[2] = v13;
    v14[3] = &protocol witness table for MainActor;
    v14[4] = v1;
    v15 = sub_1000F1E18((uint64_t)v5, (uint64_t)&unk_10015C8A0, (uint64_t)v14);
    return swift_release(v15);
  }
  return result;
}

void sub_1000F5848(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  void (**v6)(_QWORD, _QWORD, _QWORD);
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t KeyPath;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  _QWORD *v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  void (*v67)(_QWORD, _QWORD, _QWORD);
  void (**v68)(_QWORD, _QWORD, _QWORD);
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  void (*v82)(char *, id);
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  os_log_t v91;
  unsigned int v92;
  id v93;
  void *v94;
  unsigned __int8 v95;
  uint64_t v96;
  uint64_t v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  void (**v103)(_QWORD, _QWORD, _QWORD);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  NSObject *v110;
  os_log_type_t v111;
  uint8_t *v112;
  uint64_t v113;
  NSObject *v114;
  os_log_type_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  NSObject *v122;
  os_log_type_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  id v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t (*v134)(uint64_t, uint64_t, _QWORD *);
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  char *v141;
  os_log_t v142;
  char *v143;
  uint64_t v144;
  void (*v145)(_QWORD, _QWORD, _QWORD);
  void (**v146)(_QWORD, _QWORD, _QWORD);
  char *v147;
  char *v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152[3];
  _QWORD *v153;
  uint64_t v154;

  v4 = v3;
  v137 = a2;
  v138 = a3;
  v150 = a1;
  v5 = type metadata accessor for Logger(0);
  v6 = *(void (***)(_QWORD, _QWORD, _QWORD))(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v134 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (_QWORD *)type metadata accessor for FLFollowUpInformation(0);
  v10 = *(v9 - 1);
  v11 = *(NSObject **)(v10 + 64);
  v12 = __chkstk_darwin(v9);
  v148 = (char *)&v134 - (((unint64_t)&v11[1].isa + 7) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v134 - v13;
  v15 = sub_100004FC8(&qword_10015C5A0);
  __chkstk_darwin(v15);
  v141 = (char *)&v134 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100004FC8(&qword_10015C8E0);
  v18 = __chkstk_darwin(v17);
  v139 = (uint64_t)&v134 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v140 = (char *)&v134 - v21;
  __chkstk_darwin(v20);
  v147 = (char *)&v134 - v22;
  if (qword_100156CA0 != -1)
    swift_once(&qword_100156CA0, sub_10008BDE8);
  v23 = sub_100007808(v5, (uint64_t)qword_10015D298);
  v24 = swift_retain_n(v4, 2);
  v149 = v23;
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.default.getter();
  v27 = os_log_type_enabled(v25, v26);
  v145 = (void (*)(_QWORD, _QWORD, _QWORD))v8;
  v146 = v6;
  v142 = v11;
  v143 = v14;
  if (v27)
  {
    v28 = swift_slowAlloc(22, -1);
    v29 = swift_slowAlloc(64, -1);
    v152[0] = v29;
    *(_DWORD *)v28 = 136315394;
    v30 = _typeName(_:qualified:)(*v4, 0);
    v32 = v31;
    v153 = (_QWORD *)sub_1000DA1F0(v30, v31, v152);
    v144 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, &v154, v28 + 4, v28 + 12);
    swift_release_n(v4, 2);
    swift_bridgeObjectRelease(v32);
    *(_WORD *)(v28 + 12) = 2080;
    v153 = (_QWORD *)sub_1000DA1F0(0xD000000000000041, 0x8000000100127550, v152);
    v5 = v144;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, &v154, v28 + 14, v28 + 22);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Start (%s.%s)…", (uint8_t *)v28, 0x16u);
    swift_arrayDestroy(v29, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v28, -1, -1);

  }
  else
  {

    swift_release_n(v4, 2);
  }
  v33 = sub_1000F8504();
  v34 = v33[9];
  swift_retain(v34);
  swift_release(v33);
  if (!v34)
  {
    v51 = swift_retain_n(v4, 2);
    v52 = Logger.logObject.getter(v51);
    v53 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v52, v53))
    {
      v54 = swift_slowAlloc(22, -1);
      v55 = swift_slowAlloc(64, -1);
      v152[0] = v55;
      *(_DWORD *)v54 = 136315394;
      v56 = _typeName(_:qualified:)(*v4, 0);
      v58 = v57;
      v153 = (_QWORD *)sub_1000DA1F0(v56, v57, v152);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, &v154, v54 + 4, v54 + 12);
      swift_release_n(v4, 2);
      swift_bridgeObjectRelease(v58);
      *(_WORD *)(v54 + 12) = 2080;
      v153 = (_QWORD *)sub_1000DA1F0(0xD000000000000041, 0x8000000100127550, v152);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, &v154, v54 + 14, v54 + 22);
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "…Complete (%s.%s) no observer.", (uint8_t *)v54, 0x16u);
      swift_arrayDestroy(v55, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v55, -1, -1);
      swift_slowDealloc(v54, -1, -1);

    }
    else
    {

      swift_release_n(v4, 2);
    }
    return;
  }
  v35 = FLFollowUpModelObserver.followUpGroup(with:)(v150);
  if (!v35)
  {
    v59 = swift_retain_n(v4, 2);
    v60 = Logger.logObject.getter(v59);
    v61 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v60, v61))
    {
      v62 = swift_slowAlloc(22, -1);
      v63 = swift_slowAlloc(64, -1);
      v152[0] = v63;
      *(_DWORD *)v62 = 136315394;
      v64 = _typeName(_:qualified:)(*v4, 0);
      v66 = v65;
      v153 = (_QWORD *)sub_1000DA1F0(v64, v65, v152);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, &v154, v62 + 4, v62 + 12);
      swift_release_n(v4, 2);
      swift_bridgeObjectRelease(v66);
      *(_WORD *)(v62 + 12) = 2080;
      v153 = (_QWORD *)sub_1000DA1F0(0xD000000000000041, 0x8000000100127550, v152);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, &v154, v62 + 14, v62 + 22);
      _os_log_impl((void *)&_mh_execute_header, v60, v61, "…Complete (%s.%s) no group.", (uint8_t *)v62, 0x16u);
      swift_arrayDestroy(v63, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v63, -1, -1);
      swift_slowDealloc(v62, -1, -1);

    }
    else
    {

      swift_release_n(v4, 2);
    }
    swift_release(v34);
    return;
  }
  v36 = (char *)v35;
  KeyPath = swift_getKeyPath(&unk_10011B3E0);
  v38 = (char *)v4 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel___observationRegistrar;
  v152[0] = (uint64_t)v4;
  v135 = sub_100007828(&qword_100158EF0, type metadata accessor for PrimarySettingsListModel, (uint64_t)&unk_10011B328);
  v136 = v38;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v152, KeyPath, v135);
  swift_release(KeyPath);
  v39 = (uint64_t)v4 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel__currentlyLoadingFollowUp;
  swift_beginAccess((char *)v4 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel__currentlyLoadingFollowUp, v152, 0, 0);
  v40 = (uint64_t)v147;
  sub_100018C00(v39, (uint64_t)v147, &qword_10015C8E0);
  v134 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(v10 + 48);
  LODWORD(KeyPath) = v134(v40, 1, v9);
  sub_10000BA50(v40, &qword_10015C8E0);
  if ((_DWORD)KeyPath != 1)
  {
    v67 = v145;
    v68 = v146;
    v146[2](v145, v149, v5);
    (*(void (**)(char *, _QWORD *, _QWORD *))(v10 + 16))(v148, v150, v9);
    v69 = swift_retain_n(v4, 4);
    v70 = Logger.logObject.getter(v69);
    v150 = v9;
    v71 = v70;
    LODWORD(v147) = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v71, (os_log_type_t)v147))
    {
      swift_release_n(v4, 2);
      swift_release(v34);
      swift_unknownObjectRelease(v36);
      (*(void (**)(char *, _QWORD *))(v10 + 8))(v148, v150);

      swift_release_n(v4, 2);
      ((void (*)(_QWORD, uint64_t))v68[1])(v67, v5);
      return;
    }
    v142 = v71;
    v143 = v36;
    v144 = v5;
    v149 = v34;
    v72 = swift_slowAlloc(42, -1);
    v73 = swift_slowAlloc(128, -1);
    v153 = (_QWORD *)v73;
    *(_DWORD *)v72 = 136315906;
    v74 = _typeName(_:qualified:)(*v4, 0);
    v76 = v75;
    v151 = sub_1000DA1F0(v74, v75, (uint64_t *)&v153);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, v152, v72 + 4, v72 + 12);
    swift_release_n(v4, 2);
    swift_bridgeObjectRelease(v76);
    *(_WORD *)(v72 + 12) = 2080;
    v151 = sub_1000DA1F0(0xD000000000000041, 0x8000000100127550, (uint64_t *)&v153);
    v77 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, v152, v72 + 14, v72 + 22);
    *(_WORD *)(v72 + 22) = 2082;
    v78 = v148;
    v79 = FLFollowUpInformation.title.getter(v77);
    v81 = v80;
    v151 = sub_1000DA1F0(v79, v80, (uint64_t *)&v153);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, v152, v72 + 24, v72 + 32);
    swift_bridgeObjectRelease(v81);
    v82 = *(void (**)(char *, id))(v10 + 8);
    v83 = v150;
    v82(v78, v150);
    *(_WORD *)(v72 + 32) = 2082;
    v84 = swift_getKeyPath(&unk_10011B3E0);
    v151 = (uint64_t)v4;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v151, v84, v135);
    swift_release(v84);
    v85 = v39;
    v86 = v139;
    sub_100018C00(v85, v139, &qword_10015C8E0);
    v87 = v134(v86, 1, v83);
    if ((_DWORD)v87 != 1)
    {
      v88 = FLFollowUpInformation.title.getter(v87);
      v90 = v89;
      v82((char *)v86, v150);
      v151 = sub_1000DA1F0(v88, v90, (uint64_t *)&v153);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, v152, v72 + 34, v72 + 42);
      swift_release_n(v4, 2);
      swift_bridgeObjectRelease(v90);
      v91 = v142;
      _os_log_impl((void *)&_mh_execute_header, v142, (os_log_type_t)v147, "…Complete (%s.%s). Ignoring tap on follow up '%{public}s' because currently loading '%{public}s'.", (uint8_t *)v72, 0x2Au);
      swift_arrayDestroy(v73, 4, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v73, -1, -1);
      swift_slowDealloc(v72, -1, -1);
      swift_unknownObjectRelease(v143);

      swift_release(v149);
      ((void (*)(void (*)(_QWORD, _QWORD, _QWORD), uint64_t))v146[1])(v145, v144);
      return;
    }
    swift_release(v4);
    __break(1u);
LABEL_40:
    __break(1u);
    return;
  }
  v41 = (char *)FLFollowUpModelObserver.followUpItem(with:)(v150);
  v42 = v41;
  v43 = v36;
  if (v41)
  {
    v44 = v9;
    v45 = objc_msgSend(v41, "actions");
    v147 = v42;
    if (v45)
    {
      v46 = v45;
      v47 = sub_100007BBC(0, (unint64_t *)&qword_10015A698, FLFollowUpAction_ptr);
      v48 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v46, v47);

      v49 = v138;
      swift_bridgeObjectRetain(v138);
      v50 = sub_100105128(v48, v137, v49);
      swift_bridgeObjectRelease(v48);
      swift_bridgeObjectRelease(v49);
      goto LABEL_26;
    }
  }
  else
  {
    if ((objc_msgSend(v36, "shouldCoalesceItems") & 1) == 0)
    {
      swift_retain_n(v4, 2);
      v121 = swift_unknownObjectRetain_n(v36, 2);
      v122 = Logger.logObject.getter(v121);
      v123 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v122, v123))
      {
        v124 = swift_slowAlloc(32, -1);
        v125 = v36;
        v126 = swift_slowAlloc(96, -1);
        v153 = (_QWORD *)v126;
        *(_DWORD *)v124 = 136315650;
        v127 = _typeName(_:qualified:)(*v4, 0);
        v129 = v128;
        v151 = sub_1000DA1F0(v127, v128, (uint64_t *)&v153);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, v152, v124 + 4, v124 + 12);
        swift_release_n(v4, 2);
        swift_bridgeObjectRelease(v129);
        *(_WORD *)(v124 + 12) = 2080;
        v151 = sub_1000DA1F0(0xD000000000000041, 0x8000000100127550, (uint64_t *)&v153);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, v152, v124 + 14, v124 + 22);
        *(_WORD *)(v124 + 22) = 2082;
        v130 = objc_msgSend(v125, "identifier");
        v131 = static String._unconditionallyBridgeFromObjectiveC(_:)(v130);
        v149 = v34;
        v133 = v132;

        v151 = sub_1000DA1F0(v131, v133, (uint64_t *)&v153);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, v152, v124 + 24, v124 + 32);
        swift_unknownObjectRelease_n(v125, 2);
        swift_bridgeObjectRelease(v133);
        _os_log_impl((void *)&_mh_execute_header, v122, v123, "…Complete (%s.%s) item is nil and %{public}s doesn't coalesce items.", (uint8_t *)v124, 0x20u);
        swift_arrayDestroy(v126, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v126, -1, -1);
        swift_slowDealloc(v124, -1, -1);
        swift_unknownObjectRelease(v125);

        swift_release(v149);
      }
      else
      {

        swift_release(v34);
        swift_release_n(v4, 2);
        swift_unknownObjectRelease_n(v36, 3);
      }
      return;
    }
    v147 = 0;
    v44 = v9;
    v42 = 0;
  }
  v50 = 0;
LABEL_26:
  v92 = objc_msgSend((id)objc_opt_self(FLPreferencesController), "shouldPreflightNetworkAccessForGroup:item:", v43, v42);
  v148 = v42;
  if (!v92)
  {
LABEL_29:
    v145 = *(void (**)(_QWORD, _QWORD, _QWORD))(v10 + 16);
    v146 = (void (**)(_QWORD, _QWORD, _QWORD))v50;
    v97 = (uint64_t)v140;
    v98 = v150;
    v145(v140, v150, v44);
    (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD *))(v10 + 56))(v97, 0, 1, v44);
    v99 = swift_getKeyPath(&unk_10011B3E0);
    v149 = v34;
    __chkstk_darwin(v99);
    *(&v134 - 2) = (uint64_t (*)(uint64_t, uint64_t, _QWORD *))v4;
    *(&v134 - 1) = (uint64_t (*)(uint64_t, uint64_t, _QWORD *))v97;
    v153 = v4;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v153, v99, sub_1001063E4, &v134 - 4, (char *)&type metadata for () + 8, v135);
    swift_release(v99);
    sub_10000BA50(v97, &qword_10015C8E0);
    v100 = type metadata accessor for TaskPriority(0);
    v101 = (uint64_t)v141;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v100 - 8) + 56))(v141, 1, 1, v100);
    v102 = v143;
    v145(v143, v98, v44);
    type metadata accessor for MainActor(0);
    v103 = v146;
    v150 = v146;
    swift_retain(v4);
    swift_unknownObjectRetain(v43);
    v148 = v148;
    v104 = static MainActor.shared.getter(v148);
    v105 = *(unsigned __int8 *)(v10 + 80);
    v106 = (v105 + 64) & ~v105;
    v107 = (char *)swift_allocObject(&unk_10014DF80, (char *)v142 + v106, v105 | 7);
    *((_QWORD *)v107 + 2) = v104;
    *((_QWORD *)v107 + 3) = &protocol witness table for MainActor;
    v108 = (uint64_t)v147;
    *((_QWORD *)v107 + 4) = v43;
    *((_QWORD *)v107 + 5) = v108;
    *((_QWORD *)v107 + 6) = v103;
    *((_QWORD *)v107 + 7) = v4;
    (*(void (**)(char *, char *, _QWORD *))(v10 + 32))(&v107[v106], v102, v44);
    v109 = sub_1000F1E18(v101, (uint64_t)&unk_10015C950, (uint64_t)v107);
    swift_unknownObjectRelease(v43);
    swift_release(v109);

    swift_release(v149);
    return;
  }
  v93 = objc_msgSend((id)objc_opt_self(CPNetworkObserver), "sharedNetworkObserver");
  if (!v93)
    goto LABEL_40;
  v94 = v93;
  v95 = objc_msgSend(v93, "isNetworkReachable");

  if ((v95 & 1) != 0)
    goto LABEL_29;
  v110 = Logger.logObject.getter(v96);
  v111 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v110, v111))
  {
    v112 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v112 = 0;
    _os_log_impl((void *)&_mh_execute_header, v110, v111, "Presenting Network Alert for Follow Up.", v112, 2u);
    swift_slowDealloc(v112, -1, -1);
  }

  sub_1000F7720(5);
  v113 = swift_retain_n(v4, 2);
  v114 = Logger.logObject.getter(v113);
  v115 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v114, v115))
  {
    v116 = swift_slowAlloc(22, -1);
    v117 = swift_slowAlloc(64, -1);
    v153 = (_QWORD *)v117;
    *(_DWORD *)v116 = 136315394;
    v118 = _typeName(_:qualified:)(*v4, 0);
    v149 = v34;
    v120 = v119;
    v151 = sub_1000DA1F0(v118, v119, (uint64_t *)&v153);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, v152, v116 + 4, v116 + 12);
    swift_release_n(v4, 2);
    swift_bridgeObjectRelease(v120);
    *(_WORD *)(v116 + 12) = 2080;
    v151 = sub_1000DA1F0(0xD000000000000041, 0x8000000100127550, (uint64_t *)&v153);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, v152, v116 + 14, v116 + 22);
    _os_log_impl((void *)&_mh_execute_header, v114, v115, "…Complete (%s.%s)", (uint8_t *)v116, 0x16u);
    swift_arrayDestroy(v117, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v117, -1, -1);
    swift_slowDealloc(v116, -1, -1);
    swift_unknownObjectRelease(v43);

    swift_release(v149);
  }
  else
  {

    swift_release_n(v4, 2);
    swift_release(v34);

    swift_unknownObjectRelease(v43);
  }

}

void sub_1000F6A08(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t KeyPath;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;

  v2 = v1;
  v4 = sub_100004FC8(&qword_10015C890);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v26 - v8;
  if (qword_100156CA0 != -1)
    swift_once(&qword_100156CA0, sub_10008BDE8);
  v10 = type metadata accessor for Logger(0);
  sub_100007808(v10, (uint64_t)qword_10015D298);
  sub_100018C00(a1, (uint64_t)v9, &qword_10015C890);
  v11 = swift_retain_n(v1, 2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc(32, -1);
    v26 = swift_slowAlloc(96, -1);
    v29 = (_QWORD *)v26;
    *(_DWORD *)v14 = 136315650;
    v15 = _typeName(_:qualified:)(*v1, 0);
    v17 = v16;
    v27 = sub_1000DA1F0(v15, v16, (uint64_t *)&v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v14 + 4, v14 + 12);
    swift_release_n(v1, 2);
    swift_bridgeObjectRelease(v17);
    *(_WORD *)(v14 + 12) = 2080;
    v27 = sub_1000DA1F0(0xD000000000000024, 0x8000000100127630, (uint64_t *)&v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v14 + 14, v14 + 22);
    *(_WORD *)(v14 + 22) = 2082;
    sub_100018C00((uint64_t)v9, (uint64_t)v7, &qword_10015C890);
    v18 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(v7, 1, v18) == 1)
    {
      sub_10000BA50((uint64_t)v7, &qword_10015C890);
      v19 = 0xE300000000000000;
      v20 = 7104878;
    }
    else
    {
      sub_1000A03B0();
      v20 = v21;
      v19 = v22;
      sub_1000076B4((uint64_t)v7, type metadata accessor for PrimarySettingsListItemIdentifier);
    }
    v27 = sub_1000DA1F0(v20, v19, (uint64_t *)&v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v14 + 24, v14 + 32);
    swift_bridgeObjectRelease(v19);
    sub_10000BA50((uint64_t)v9, &qword_10015C890);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Start (%s.%s), identifier: '%{public}s'…", (uint8_t *)v14, 0x20u);
    v23 = v26;
    swift_arrayDestroy(v26, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {
    swift_release_n(v1, 2);
    sub_10000BA50((uint64_t)v9, &qword_10015C890);

  }
  KeyPath = swift_getKeyPath(&unk_10011B368);
  __chkstk_darwin(KeyPath);
  *(&v26 - 2) = (uint64_t)v2;
  *(&v26 - 1) = a1;
  v29 = v2;
  v25 = sub_100007828(&qword_100158EF0, type metadata accessor for PrimarySettingsListModel, (uint64_t)&unk_10011B328);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v29, KeyPath, sub_100106654, &v26 - 4, (char *)&type metadata for () + 8, v25);
  swift_release(KeyPath);
  sub_1000FE9FC(v2, a1, 0xD000000000000024, 0x8000000100127630);
}

void sub_1000F6E00(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  unsigned __int8 v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33[3];

  v2 = v1;
  v4 = sub_100004FC8(&qword_10015C890);
  __chkstk_darwin(v4);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100156CA0 != -1)
    swift_once(&qword_100156CA0, sub_10008BDE8);
  v7 = type metadata accessor for Logger(0);
  sub_100007808(v7, (uint64_t)qword_10015D298);
  v8 = swift_retain_n(v1, 2);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc(22, -1);
    v31 = a1;
    v12 = v11;
    v13 = swift_slowAlloc(64, -1);
    v33[0] = v13;
    *(_DWORD *)v12 = 136315394;
    v14 = _typeName(_:qualified:)(*v1, 0);
    v16 = v15;
    v32 = sub_1000DA1F0(v14, v15, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, v33, v12 + 4, v12 + 12);
    swift_release_n(v1, 2);
    swift_bridgeObjectRelease(v16);
    *(_WORD *)(v12 + 12) = 2080;
    v32 = sub_1000DA1F0(0xD000000000000041, 0x80000001001274A0, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, v33, v12 + 14, v12 + 22);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Start (%s.%s)…", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy(v13, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    v17 = v12;
    a1 = v31;
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {

    swift_release_n(v1, 2);
  }
  v18 = objc_msgSend((id)objc_opt_self(CPNetworkObserver), "sharedNetworkObserver");
  if (v18)
  {
    v19 = v18;
    v20 = objc_msgSend(v18, "isNetworkReachable");

    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.default.getter();
    v24 = os_log_type_enabled(v22, v23);
    if ((v20 & 1) != 0)
    {
      if (v24)
      {
        v25 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v25 = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "Presenting Primary Apple Account Sign in.", v25, 2u);
        swift_slowDealloc(v25, -1, -1);
      }

      sub_1000076F0(a1, (uint64_t)v6, type metadata accessor for PrimarySettingsListItemIdentifier);
      v26 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v6, 0, 1, v26);
      v27 = (uint64_t)v2
          + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_pendingSelectionForSuccessfulPrimaryAppleAccountSignIn;
      swift_beginAccess((char *)v2+ OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_pendingSelectionForSuccessfulPrimaryAppleAccountSignIn, v33, 33, 0);
      sub_1001062AC((uint64_t)v6, v27);
      swift_endAccess(v33);
      v28 = 2;
    }
    else
    {
      if (v24)
      {
        v29 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v29 = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "Presenting Network Alert.", v29, 2u);
        swift_slowDealloc(v29, -1, -1);
      }

      v28 = 4;
    }
    sub_1000F7720(v28);
    sub_1000FF0A4(v2, 0xD000000000000041, 0x80000001001274A0);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000F71CC()
{
  return sub_1000F8084((uint64_t)&unk_10011B410, &OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel__selectionDelegate);
}

uint64_t sub_1000F71E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t Strong;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[3];
  char v21[24];

  v2 = v1;
  v4 = sub_100004FC8(&qword_10015C890);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)v20 - v8;
  v10 = v1 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_effectiveSelection;
  swift_beginAccess(v1 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_effectiveSelection, v21, 0, 0);
  sub_100018C00(v10, (uint64_t)v9, &qword_10015C890);
  KeyPath = swift_getKeyPath(&unk_10011B410);
  v20[0] = v1;
  v12 = sub_100007828(&qword_100158EF0, type metadata accessor for PrimarySettingsListModel, (uint64_t)&unk_10011B328);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v20, KeyPath, v12);
  swift_release(KeyPath);
  v13 = v1 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel__selectionDelegate;
  Strong = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel__selectionDelegate);
  if (Strong)
  {
    v15 = Strong;
    sub_100018C00(v10, (uint64_t)v7, &qword_10015C890);
    sub_1000EA488(v2, (uint64_t)v7, a1);
    swift_unknownObjectRelease(v15);
    sub_10000BA50((uint64_t)v7, &qword_10015C890);
  }
  swift_beginAccess(v10, v20, 33, 0);
  sub_1000F1B58(a1, v10, &qword_10015C890);
  swift_endAccess(v20);
  v16 = swift_getKeyPath(&unk_10011B410);
  v20[0] = v2;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v20, v16, v12);
  swift_release(v16);
  v17 = swift_unknownObjectWeakLoadStrong(v13);
  if (v17)
  {
    v18 = v17;
    sub_100018C00(v10, (uint64_t)v7, &qword_10015C890);
    sub_1000EB19C(v2, (uint64_t)v9, (uint64_t)v7);
    swift_unknownObjectRelease(v18);
    sub_10000BA50((uint64_t)v7, &qword_10015C890);
  }
  sub_10000BA50(a1, &qword_10015C890);
  return sub_10000BA50((uint64_t)v9, &qword_10015C890);
}

uint64_t sub_1000F7430(_QWORD *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  if (qword_100156CA0 != -1)
    swift_once(&qword_100156CA0, sub_10008BDE8);
  v4 = type metadata accessor for Logger(0);
  sub_100007808(v4, (uint64_t)qword_10015D298);
  v5 = swift_retain_n(a1, 2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = swift_slowAlloc(32, -1);
    v14 = swift_slowAlloc(96, -1);
    *(_DWORD *)v8 = 136315650;
    v9 = _typeName(_:qualified:)(*a1, 0);
    v11 = v10;
    v13 = sub_1000DA1F0(v9, v10, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v8 + 4, v8 + 12);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease(v11);
    *(_WORD *)(v8 + 12) = 2080;
    v13 = sub_1000DA1F0(0xD00000000000001ELL, 0x8000000100127680, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v8 + 14, v8 + 22);
    *(_WORD *)(v8 + 22) = 2082;
    __asm { BR              X10 }
  }

  return swift_release_n(a1, 2);
}

uint64_t sub_1000F7720(char a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  unsigned __int8 v13;
  uint64_t KeyPath;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  _QWORD v21[3];
  char v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;

  v2 = v1;
  if (qword_100156CA0 != -1)
    swift_once(&qword_100156CA0, sub_10008BDE8);
  v4 = type metadata accessor for Logger(0);
  sub_100007808(v4, (uint64_t)qword_10015D298);
  v5 = swift_retain_n(v1, 2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = swift_slowAlloc(32, -1);
    v25 = (_QWORD *)swift_slowAlloc(96, -1);
    *(_DWORD *)v8 = 136315650;
    v9 = _typeName(_:qualified:)(*v2, 0);
    v11 = v10;
    v23 = sub_1000DA1F0(v9, v10, (uint64_t *)&v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v8 + 4, v8 + 12);
    swift_release_n(v2, 2);
    swift_bridgeObjectRelease(v11);
    *(_WORD *)(v8 + 12) = 2080;
    v23 = sub_1000DA1F0(0xD000000000000014, 0x80000001001274F0, (uint64_t *)&v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v8 + 14, v8 + 22);
    *(_WORD *)(v8 + 22) = 2082;
    __asm { BR              X10 }
  }

  swift_release_n(v2, 2);
  if (a1 == 3
    && (v12 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice"),
        v13 = objc_msgSend(v12, "sf_isInternalInstall"),
        v12,
        (v13 & 1) == 0))
  {
    v18 = v2;
    v19 = 3;
  }
  else
  {
    KeyPath = swift_getKeyPath(&unk_10011B3B8);
    v25 = v2;
    v15 = sub_100007828(&qword_100158EF0, type metadata accessor for PrimarySettingsListModel, (uint64_t)&unk_10011B328);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v25, KeyPath, v15);
    swift_release(KeyPath);
    if (*((_BYTE *)v2 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_effectiveCurrentPresentedItemIdentifier) == 6)
    {
      v16 = *(void **)((char *)v2 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_pendingFollowUpController);
      *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_pendingFollowUpController) = 0;

    }
    v17 = swift_getKeyPath(&unk_10011B3B8);
    __chkstk_darwin(v17);
    v21[2] = v2;
    v22 = a1;
    v25 = v2;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v25, v17, sub_10010631C, v21, (char *)&type metadata for () + 8, v15);
    swift_release(v17);
    v18 = v2;
    v19 = a1;
  }
  return sub_1000FEDC4(v18, v19);
}

uint64_t sub_1000F7B6C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F7B88((uint64_t)&unk_10011B3E0, &OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel__currentlyLoadingFollowUp, &qword_10015C8E0, a1);
}

uint64_t sub_1000F7B88@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];

  KeyPath = swift_getKeyPath(a1);
  v12[0] = v4;
  v9 = sub_100007828(&qword_100158EF0, type metadata accessor for PrimarySettingsListModel, (uint64_t)&unk_10011B328);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v12, KeyPath, v9);
  swift_release(KeyPath);
  v10 = v4 + *a2;
  swift_beginAccess(v10, v12, 0, 0);
  return sub_100018C00(v10, a4, a3);
}

uint64_t sub_1000F7C40@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10011B3E0);
  v8[0] = v3;
  v5 = sub_100007828(&qword_100158EF0, type metadata accessor for PrimarySettingsListModel, (uint64_t)&unk_10011B328);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = v3 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel__currentlyLoadingFollowUp;
  swift_beginAccess(v3 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel__currentlyLoadingFollowUp, v8, 0, 0);
  return sub_100018C00(v6, a2, &qword_10015C8E0);
}

uint64_t sub_1000F7CF8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  _BYTE v11[16];
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;

  v4 = sub_100004FC8(&qword_10015C8E0);
  __chkstk_darwin(v4);
  v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100018C00(a1, (uint64_t)v6, &qword_10015C8E0);
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_10011B3E0);
  v12 = v7;
  v13 = v6;
  v14 = v7;
  v9 = sub_100007828(&qword_100158EF0, type metadata accessor for PrimarySettingsListModel, (uint64_t)&unk_10011B328);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v14, KeyPath, sub_100106B90, v11, (char *)&type metadata for () + 8, v9);
  swift_release(KeyPath);
  return sub_10000BA50((uint64_t)v6, &qword_10015C8E0);
}

uint64_t sub_1000F7E00(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE v5[24];

  v3 = a1 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel__currentlyLoadingFollowUp;
  swift_beginAccess(a1 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel__currentlyLoadingFollowUp, v5, 33, 0);
  sub_1000F1B58(a2, v3, &qword_10015C8E0);
  return swift_endAccess(v5);
}

uint64_t sub_1000F7E70()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t Strong;
  uint64_t v10;
  uint64_t v11;

  KeyPath = swift_getKeyPath(&unk_10011B438);
  v11 = v0;
  v2 = sub_100007828(&qword_100158EF0, type metadata accessor for PrimarySettingsListModel, (uint64_t)&unk_10011B328);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v11, KeyPath, v2);
  result = swift_release(KeyPath);
  v4 = v0 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel__cachedDataModel;
  v5 = *(_QWORD *)(v0 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel__cachedDataModel);
  if (v5)
  {
    v6 = *(_QWORD *)(v4 + 8);
    v7 = *(_QWORD *)(v4 + 16);
    v8 = swift_getKeyPath(&unk_10011B460);
    v11 = v0;
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v11, v8, v2);
    swift_release(v8);
    Strong = swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel__updateDelegate);
    if (Strong)
    {
      v10 = Strong;
      sub_1000F126C(v5, v7);
      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRelease(v6);
      swift_bridgeObjectRelease(v5);
      return swift_unknownObjectRelease(v10);
    }
    else
    {
      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRelease(v6);
      return swift_bridgeObjectRelease(v5);
    }
  }
  return result;
}

uint64_t sub_1000F7FC0()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  KeyPath = swift_getKeyPath(&unk_10011B438);
  v5 = v0;
  v2 = sub_100007828(&qword_100158EF0, type metadata accessor for PrimarySettingsListModel, (uint64_t)&unk_10011B328);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v5, KeyPath, v2);
  swift_release(KeyPath);
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel__cachedDataModel);
  sub_1001066E8(v3, *(_QWORD *)(v0 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel__cachedDataModel + 8), *(_QWORD *)(v0 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel__cachedDataModel + 16));
  return v3;
}

uint64_t sub_1000F8070()
{
  return sub_1000F8084((uint64_t)&unk_10011B460, &OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel__updateDelegate);
}

uint64_t sub_1000F8084(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath(a1);
  v7 = v2;
  v5 = sub_100007828(&qword_100158EF0, type metadata accessor for PrimarySettingsListModel, (uint64_t)&unk_10011B328);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v5);
  swift_release(KeyPath);
  return swift_unknownObjectWeakLoadStrong(v2 + *a2);
}

uint64_t sub_1000F8114@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10011B438);
  v10 = v3;
  v5 = sub_100007828(&qword_100158EF0, type metadata accessor for PrimarySettingsListModel, (uint64_t)&unk_10011B328);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v10, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(_QWORD *)(v3 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel__cachedDataModel);
  v7 = *(_QWORD *)(v3 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel__cachedDataModel + 8);
  v8 = *(_QWORD *)(v3 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel__cachedDataModel + 16);
  *a2 = v6;
  a2[1] = v7;
  a2[2] = v8;
  return sub_1001066E8(v6, v7, v8);
}

uint64_t sub_1000F81B8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  _QWORD v9[7];
  uint64_t v10;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = *a2;
  KeyPath = swift_getKeyPath(&unk_10011B438);
  v9[2] = v5;
  v9[3] = v2;
  v9[4] = v3;
  v9[5] = v4;
  v10 = v5;
  sub_1001066E8(v2, v3, v4);
  v7 = sub_100007828(&qword_100158EF0, type metadata accessor for PrimarySettingsListModel, (uint64_t)&unk_10011B328);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v10, KeyPath, sub_100106B60, v9, (char *)&type metadata for () + 8, v7);
  sub_100106720(v2, v3, v4);
  return swift_release(KeyPath);
}

uint64_t sub_1000F828C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (uint64_t *)(a1 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel__cachedDataModel);
  v5 = *(_QWORD *)(a1 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel__cachedDataModel);
  v6 = *(_QWORD *)(a1 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel__cachedDataModel + 8);
  v7 = *(_QWORD *)(a1 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel__cachedDataModel + 16);
  *v4 = a2;
  v4[1] = a3;
  v4[2] = a4;
  sub_1001066E8(a2, a3, a4);
  sub_100106720(v5, v6, v7);
  return sub_1000F7E70();
}

uint64_t sub_1000F8300()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t *v10;
  NSObject *v11;
  uint64_t v12;
  os_signpost_type_t v13;
  uint64_t v14;
  os_signpost_id_t v15;
  uint64_t v16;
  uint64_t v17;
  os_signpost_type_t v18;
  uint64_t v19;
  os_signpost_id_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = type metadata accessor for OSSignpostID(0);
  v25 = *(_QWORD *)(v1 - 8);
  v26 = v1;
  __chkstk_darwin(v1);
  v3 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OSSignposter(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100156CD8 != -1)
    swift_once(&qword_100156CD8, sub_10008BEEC);
  v8 = sub_100007808(v4, (uint64_t)qword_10015D340);
  v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  static OSSignpostID.exclusive.getter(v9);
  v10 = (uint8_t *)swift_slowAlloc(2, -1);
  *(_WORD *)v10 = 0;
  v11 = OSSignposter.logHandle.getter(v10);
  v12 = static os_signpost_type_t.begin.getter();
  v13 = v12;
  v15 = OSSignpostID.rawValue.getter(v12, v14);
  v24 = v5;
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, v13, v15, "PrimarySettingsList Data Model Snapshot", "", v10, 2u);
  sub_1001017B8(v0, &v27);
  v17 = static os_signpost_type_t.end.getter(v16);
  v18 = v17;
  v20 = OSSignpostID.rawValue.getter(v17, v19);
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, v18, v20, "PrimarySettingsList Data Model Snapshot", "", v10, 2u);

  v21 = v27;
  swift_slowDealloc(v10, -1, -1);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v3, v26);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v4);
  return v21;
}

_QWORD *sub_1000F8504()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD *v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  _QWORD v22[5];

  v1 = OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel____lazy_storage___followUpListElementsGenerator;
  v2 = *(uint64_t *)((char *)v0
                  + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel____lazy_storage___followUpListElementsGenerator);
  if (v2)
  {
    v3 = *(_QWORD **)((char *)v0
                    + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel____lazy_storage___followUpListElementsGenerator);
  }
  else
  {
    v4 = *v0;
    swift_retain(v0);
    v21 = sub_1000F86F4();
    v20 = sub_1000F87F8();
    v22[3] = v4;
    v22[4] = &off_10014DED0;
    v22[0] = v0;
    v5 = type metadata accessor for FollowUpListElementsGenerator(0);
    v3 = (_QWORD *)swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
    v6 = sub_1000D2B68((uint64_t)v22, v4);
    __chkstk_darwin(v6);
    v8 = (uint64_t *)((char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v9 + 16))(v8);
    v10 = *v8;
    v3[5] = v4;
    v3[6] = &off_10014DED0;
    v3[2] = v10;
    v3[9] = 0;
    v3[10] = &_swiftEmptySetSingleton;
    v11 = (char *)v3 + OBJC_IVAR____TtC11SettingsApp29FollowUpListElementsGenerator_currentSnapshot;
    *(_QWORD *)v11 = _swiftEmptyArrayStorage;
    *((_QWORD *)v11 + 1) = 0;
    *((_QWORD *)v11 + 2) = 0;
    *((_QWORD *)v11 + 3) = _swiftEmptyArrayStorage;
    *((_QWORD *)v11 + 4) = 0;
    *((_QWORD *)v11 + 5) = 0;
    *((_QWORD *)v11 + 6) = _swiftEmptyArrayStorage;
    *((_QWORD *)v11 + 7) = _swiftEmptyArrayStorage;
    *((_QWORD *)v11 + 8) = _swiftEmptyArrayStorage;
    v12 = (int *)type metadata accessor for FollowUpInformationProviderSnapshot(0);
    v13 = &v11[v12[11]];
    v14 = type metadata accessor for FLFollowUpGroupSectionElement(0);
    v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56);
    v15(v13, 1, 1, v14);
    *(_QWORD *)&v11[v12[12]] = _swiftEmptyArrayStorage;
    v15(&v11[v12[13]], 1, 1, v14);
    *(_QWORD *)&v11[v12[14]] = _swiftEmptyArrayStorage;
    v15(&v11[v12[15]], 1, 1, v14);
    *(_QWORD *)&v11[v12[16]] = _swiftEmptyArrayStorage;
    v16 = v20;
    v3[7] = v21;
    v3[8] = v16;
    sub_100005474(v22);
    v17 = *(uint64_t *)((char *)v0 + v1);
    *(uint64_t *)((char *)v0 + v1) = (uint64_t)v3;
    swift_retain(v3);
    swift_release(v17);
    v2 = 0;
  }
  swift_retain(v2);
  return v3;
}

char *sub_1000F86F4()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  char *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  id v12;
  _QWORD v15[3];
  uint64_t v16;
  _UNKNOWN **v17;

  v1 = OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel____lazy_storage___primaryAppleAccountStatusObserver;
  v2 = *(void **)((char *)v0
                + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel____lazy_storage___primaryAppleAccountStatusObserver);
  if (v2)
  {
    v3 = *(char **)((char *)v0
                  + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel____lazy_storage___primaryAppleAccountStatusObserver);
  }
  else
  {
    v16 = *v0;
    v17 = &off_10014DED0;
    v15[0] = v0;
    v4 = objc_allocWithZone((Class)type metadata accessor for PrimaryAppleAccountStatusObserver());
    v5 = sub_1000D2B68((uint64_t)v15, v16);
    __chkstk_darwin(v5);
    v7 = (_QWORD *)((char *)&v15[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v8 + 16))(v7);
    v9 = *v7;
    swift_retain(v0);
    v10 = sub_1001040D8(v9, v4);
    sub_100005474(v15);
    v11 = *(void **)((char *)v0 + v1);
    *(uint64_t *)((char *)v0 + v1) = (uint64_t)v10;
    v3 = v10;

    v2 = 0;
  }
  v12 = v2;
  return v3;
}

_QWORD *sub_1000F87F8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v14[3];
  uint64_t v15;
  _UNKNOWN **v16;

  v1 = OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel____lazy_storage___secondaryAppleAccountItemsObserver;
  v2 = *(uint64_t *)((char *)v0
                  + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel____lazy_storage___secondaryAppleAccountItemsObserver);
  if (v2)
  {
    v3 = *(_QWORD **)((char *)v0
                    + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel____lazy_storage___secondaryAppleAccountItemsObserver);
  }
  else
  {
    v15 = *v0;
    v4 = v15;
    v16 = &off_10014DED0;
    v14[0] = v0;
    v5 = type metadata accessor for SecondaryAppleAccountItemsObserver();
    v3 = (_QWORD *)swift_allocObject(v5, 72, 7);
    v6 = sub_1000D2B68((uint64_t)v14, v15);
    __chkstk_darwin(v6);
    v8 = (_QWORD *)((char *)&v14[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v9 + 16))(v8);
    v10 = *v8;
    v3[7] = v4;
    v3[8] = &off_10014DED0;
    v3[4] = v10;
    v3[2] = _swiftEmptyArrayStorage;
    v3[3] = 0;
    swift_retain(v0);
    sub_100005474(v14);
    v11 = *(uint64_t *)((char *)v0 + v1);
    *(uint64_t *)((char *)v0 + v1) = (uint64_t)v3;
    swift_retain(v3);
    swift_release(v11);
    v2 = 0;
  }
  swift_retain(v2);
  return v3;
}

id sub_1000F8910()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  char *v4;
  _QWORD *v5;
  id v6;
  void *v7;
  id v8;

  v1 = OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel____lazy_storage___primaryAppleAccountListSectionProvider;
  v2 = *(void **)(v0
                + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel____lazy_storage___primaryAppleAccountListSectionProvider);
  if (v2)
  {
    v3 = *(id *)(v0
               + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel____lazy_storage___primaryAppleAccountListSectionProvider);
  }
  else
  {
    swift_retain(v0);
    v4 = sub_1000F86F4();
    v5 = sub_1000F8504();
    v6 = sub_100104A7C(v0, (uint64_t)v4, (uint64_t)v5);
    v7 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v6;
    v3 = v6;

    v2 = 0;
  }
  v8 = v2;
  return v3;
}

uint64_t sub_1000F898C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel____lazy_storage___secondaryAppleAccountSectionModelProvider;
  v2 = *(_QWORD *)(v0
                 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel____lazy_storage___secondaryAppleAccountSectionModelProvider);
  if (v2)
  {
    v3 = *(_QWORD *)(v0
                   + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel____lazy_storage___secondaryAppleAccountSectionModelProvider);
  }
  else
  {
    v4 = sub_1000F87F8();
    v5 = sub_1000F8504();
    v6 = type metadata accessor for SecondaryAppleAccountSectionModelProvider();
    v3 = swift_allocObject(v6, 56, 7);
    *(_OWORD *)(v3 + 16) = xmmword_10011B490;
    *(_BYTE *)(v3 + 32) = 2;
    *(_QWORD *)(v3 + 40) = v4;
    *(_QWORD *)(v3 + 48) = v5;
    v7 = *(_QWORD *)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v3;
    swift_retain(v3);
    swift_release(v7);
    v2 = 0;
  }
  swift_retain(v2);
  return v3;
}

uint64_t sub_1000F8A2C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v17[3];
  uint64_t v18;
  _UNKNOWN **v19;

  v1 = OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel____lazy_storage___airplaneModeListItemProvider;
  v2 = *(uint64_t *)((char *)v0
                  + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel____lazy_storage___airplaneModeListItemProvider);
  if (v2)
  {
    v3 = *(uint64_t *)((char *)v0
                    + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel____lazy_storage___airplaneModeListItemProvider);
  }
  else
  {
    v18 = *v0;
    v4 = v18;
    v19 = &off_10014DED0;
    v17[0] = v0;
    v5 = type metadata accessor for AirplaneModeListItemProvider(0);
    v3 = swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
    v6 = sub_1000D2B68((uint64_t)v17, v18);
    __chkstk_darwin(v6);
    v8 = (_QWORD *)((char *)&v17[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v9 + 16))(v8);
    v10 = *v8;
    v11 = (_QWORD *)(v3 + OBJC_IVAR____TtC11SettingsApp28AirplaneModeListItemProvider_invalidator);
    v11[3] = v4;
    v11[4] = &off_10014DED0;
    *v11 = v10;
    v12 = v3 + OBJC_IVAR____TtC11SettingsApp28AirplaneModeListItemProvider_id;
    v13 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    swift_storeEnumTagMultiPayload(v12, v13, 8);
    *(_BYTE *)(v3 + OBJC_IVAR____TtC11SettingsApp28AirplaneModeListItemProvider_airplaneMode) = 0;
    *(_QWORD *)(v3 + OBJC_IVAR____TtC11SettingsApp28AirplaneModeListItemProvider_airplaneModeController) = 0;
    swift_retain(v0);
    sub_100005474(v17);
    v14 = *(uint64_t *)((char *)v0 + v1);
    *(uint64_t *)((char *)v0 + v1) = v3;
    swift_retain(v3);
    swift_release(v14);
    v2 = 0;
  }
  swift_retain(v2);
  return v3;
}

uint64_t sub_1000F8B88()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v14[3];
  uint64_t v15;
  _UNKNOWN **v16;

  v1 = OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel____lazy_storage___cellularDataSettingObserver;
  v2 = *(uint64_t *)((char *)v0
                  + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel____lazy_storage___cellularDataSettingObserver);
  if (v2)
  {
    v3 = *(uint64_t *)((char *)v0
                    + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel____lazy_storage___cellularDataSettingObserver);
  }
  else
  {
    v15 = *v0;
    v4 = v15;
    v16 = &off_10014DED0;
    v14[0] = v0;
    v5 = type metadata accessor for CellularDataSettingObserver();
    v3 = swift_allocObject(v5, 88, 7);
    v6 = sub_1000D2B68((uint64_t)v14, v15);
    __chkstk_darwin(v6);
    v8 = (_QWORD *)((char *)&v14[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v9 + 16))(v8);
    v10 = *v8;
    *(_QWORD *)(v3 + 64) = v4;
    *(_QWORD *)(v3 + 72) = &off_10014DED0;
    *(_QWORD *)(v3 + 40) = v10;
    *(_QWORD *)(v3 + 24) = 0;
    *(_DWORD *)(v3 + 16) = 0;
    *(_BYTE *)(v3 + 32) = 1;
    *(_QWORD *)(v3 + 80) = &_swiftEmptySetSingleton;
    swift_retain(v0);
    sub_100005474(v14);
    v11 = *(uint64_t *)((char *)v0 + v1);
    *(uint64_t *)((char *)v0 + v1) = v3;
    swift_retain(v3);
    swift_release(v11);
    v2 = 0;
  }
  swift_retain(v2);
  return v3;
}

uint64_t sub_1000F8CB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel____lazy_storage___sectionDataModelProviders;
  v2 = *(_QWORD *)(v0
                 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel____lazy_storage___sectionDataModelProviders);
  if (v2)
  {
    v3 = *(_QWORD *)(v0
                   + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel____lazy_storage___sectionDataModelProviders);
  }
  else
  {
    v3 = sub_1000F8D10();
    v4 = *(_QWORD *)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v3;
    swift_bridgeObjectRetain(v3);
    swift_bridgeObjectRelease(v4);
    v2 = 0;
  }
  swift_bridgeObjectRetain(v2);
  return v3;
}

uint64_t sub_1000F8D10()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void (*v10)(char *);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t inited;
  int64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int64_t v81;
  int64_t v82;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t result;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  char v106[136];
  char v107[16];
  __int128 v108;
  char v109;
  ValueMetadata *v110;
  _UNKNOWN **v111;

  v1 = *v0;
  v110 = &type metadata for SecurityResearchDeviceSectionModelProvider;
  v111 = &off_10014CB48;
  v108 = xmmword_10011B4A0;
  v109 = 2;
  v2 = sub_100004FC8((uint64_t *)&unk_10015CA20);
  v3 = swift_allocObject(v2, 72, 7);
  v105 = xmmword_1001164D0;
  *(_OWORD *)(v3 + 16) = xmmword_1001164D0;
  v104 = v3;
  sub_10003CDE8(&v108, v3 + 32);
  v110 = (ValueMetadata *)v1;
  v111 = &off_10014DED0;
  *(_QWORD *)&v108 = v0;
  v4 = type metadata accessor for SupervisedDeviceSectionModelProvider();
  v5 = swift_allocObject(v4, 80, 7);
  v6 = sub_1000D2B68((uint64_t)&v108, v1);
  v7 = *(_QWORD *)(*(_QWORD *)(v1 - 8) + 64);
  __chkstk_darwin(v6);
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = *(void (**)(char *))(v9 + 16);
  v10((char *)&v93 - v8);
  v11 = *(uint64_t *)((char *)&v93 - v8);
  swift_retain(v0);
  v12 = sub_1001047FC(v11, v5);
  sub_100005474(&v108);
  v110 = (ValueMetadata *)v4;
  v111 = &off_10014D4A0;
  *(_QWORD *)&v108 = v12;
  v13 = swift_allocObject(v2, 72, 7);
  *(_OWORD *)(v13 + 16) = v105;
  v103 = v13;
  sub_10003CDE8(&v108, v13 + 32);
  v110 = (ValueMetadata *)v1;
  v111 = &off_10014DED0;
  *(_QWORD *)&v108 = v0;
  v14 = type metadata accessor for RemoteControlSectionModelProvider();
  v15 = swift_allocObject(v14, 88, 7);
  v16 = sub_1000D2B68((uint64_t)&v108, v1);
  __chkstk_darwin(v16);
  v10((char *)&v93 - v8);
  v17 = *(uint64_t *)((char *)&v93 - v8);
  swift_retain(v0);
  v18 = sub_10010492C(v17, v15);
  sub_100005474(&v108);
  v110 = (ValueMetadata *)v14;
  v111 = &off_10014D918;
  *(_QWORD *)&v108 = v18;
  v19 = swift_allocObject(v2, 72, 7);
  *(_OWORD *)(v19 + 16) = v105;
  v102 = v19;
  sub_10003CDE8(&v108, v19 + 32);
  v20 = sub_1000F8910();
  v110 = (ValueMetadata *)type metadata accessor for PrimaryAppleAccountListSectionProvider(0);
  v111 = &off_10014B9D0;
  *(_QWORD *)&v108 = v20;
  v21 = swift_allocObject(v2, 72, 7);
  *(_OWORD *)(v21 + 16) = v105;
  v101 = v21;
  sub_10003CDE8(&v108, v21 + 32);
  v22 = sub_1000F898C();
  v110 = (ValueMetadata *)type metadata accessor for SecondaryAppleAccountSectionModelProvider();
  v111 = &off_10014C6F8;
  *(_QWORD *)&v108 = v22;
  v23 = swift_allocObject(v2, 72, 7);
  *(_OWORD *)(v23 + 16) = v105;
  v100 = v23;
  sub_10003CDE8(&v108, v23 + 32);
  v110 = (ValueMetadata *)v1;
  v111 = &off_10014DED0;
  *(_QWORD *)&v108 = v0;
  v24 = type metadata accessor for ConnectedHeadphonesSectionModelProvider();
  v25 = swift_allocObject(v24, 96, 7);
  v26 = sub_1000D2B68((uint64_t)&v108, v1);
  __chkstk_darwin(v26);
  v10((char *)&v93 - v8);
  v27 = *(uint64_t *)((char *)&v93 - v8);
  *(_QWORD *)(v25 + 64) = v1;
  *(_QWORD *)(v25 + 72) = &off_10014DED0;
  *(_QWORD *)(v25 + 40) = v27;
  *(_OWORD *)(v25 + 16) = xmmword_10011B4B0;
  *(_BYTE *)(v25 + 32) = 2;
  *(_QWORD *)(v25 + 80) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v25 + 88) = 0;
  swift_retain(v0);
  sub_100005474(&v108);
  v110 = (ValueMetadata *)v24;
  v111 = &off_10014D3B8;
  *(_QWORD *)&v108 = v25;
  v28 = swift_allocObject(v2, 72, 7);
  *(_OWORD *)(v28 + 16) = v105;
  v99 = v28;
  sub_10003CDE8(&v108, v28 + 32);
  v29 = sub_1000FB11C(v0);
  v30 = type metadata accessor for StaticPrimarySettingsListSectionProvider();
  v31 = swift_allocObject(v30, 48, 7);
  *(_OWORD *)(v31 + 16) = xmmword_10011B4C0;
  *(_WORD *)(v31 + 32) = 2;
  *(_QWORD *)(v31 + 40) = v29;
  v110 = (ValueMetadata *)v30;
  v111 = &off_10014C9F0;
  *(_QWORD *)&v108 = v31;
  v32 = swift_allocObject(v2, 72, 7);
  *(_OWORD *)(v32 + 16) = v105;
  v98 = v32;
  sub_10003CDE8(&v108, v32 + 32);
  v33 = sub_1000FBD70((uint64_t)v0);
  v34 = type metadata accessor for ComposablePrimarySettingsListSectionProvider();
  v35 = swift_allocObject(v34, 48, 7);
  *(_OWORD *)(v35 + 16) = xmmword_10011B4D0;
  *(_BYTE *)(v35 + 32) = 2;
  *(_QWORD *)(v35 + 40) = v33;
  v110 = (ValueMetadata *)v34;
  v111 = &off_10014AA10;
  *(_QWORD *)&v108 = v35;
  v36 = swift_allocObject(v2, 72, 7);
  *(_OWORD *)(v36 + 16) = v105;
  v97 = v36;
  sub_10003CDE8(&v108, v36 + 32);
  v37 = sub_1000FC934();
  v38 = swift_allocObject(v30, 48, 7);
  *(_OWORD *)(v38 + 16) = xmmword_10011B4E0;
  *(_WORD *)(v38 + 32) = 2;
  *(_QWORD *)(v38 + 40) = v37;
  v110 = (ValueMetadata *)v30;
  v111 = &off_10014C9F0;
  *(_QWORD *)&v108 = v38;
  v39 = swift_allocObject(v2, 72, 7);
  *(_OWORD *)(v39 + 16) = v105;
  v96 = v39;
  sub_10003CDE8(&v108, v39 + 32);
  v40 = sub_1000FCC64(v0);
  v41 = swift_allocObject(v30, 48, 7);
  *(_OWORD *)(v41 + 16) = xmmword_10011B4F0;
  *(_WORD *)(v41 + 32) = 2;
  *(_QWORD *)(v41 + 40) = v40;
  v110 = (ValueMetadata *)v30;
  v111 = &off_10014C9F0;
  *(_QWORD *)&v108 = v41;
  v42 = swift_allocObject(v2, 72, 7);
  *(_OWORD *)(v42 + 16) = v105;
  v95 = v42;
  sub_10003CDE8(&v108, v42 + 32);
  v94 = v0;
  v43 = sub_1000FD214(v0);
  v44 = swift_allocObject(v34, 48, 7);
  *(_OWORD *)(v44 + 16) = xmmword_10011B500;
  *(_BYTE *)(v44 + 32) = 2;
  *(_QWORD *)(v44 + 40) = v43;
  v110 = (ValueMetadata *)v34;
  v111 = &off_10014AA10;
  *(_QWORD *)&v108 = v44;
  v45 = swift_allocObject(v2, 72, 7);
  *(_OWORD *)(v45 + 16) = v105;
  sub_10003CDE8(&v108, v45 + 32);
  v46 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v110 = (ValueMetadata *)v46;
  v111 = &off_10014B908;
  v47 = sub_1001068B0(&v108);
  swift_storeEnumTagMultiPayload(v47, v46, 52);
  v48 = sub_100004FC8(&qword_100158B80);
  v49 = swift_allocObject(v48, 72, 7);
  *(_OWORD *)(v49 + 16) = v105;
  v50 = v49 + 32;
  sub_10003CDE8(&v108, v49 + 32);
  v51 = sub_100004FC8((uint64_t *)&unk_10015CA30);
  inited = swift_initStackObject(v51, v107);
  *(_OWORD *)(inited + 16) = v105;
  *(_QWORD *)(inited + 32) = v49;
  v53 = *(_QWORD *)(v49 + 16);
  swift_bridgeObjectRetain(inited);
  swift_bridgeObjectRetain(v49);
  v54 = sub_100052DB4(0, v53, 1, _swiftEmptyArrayStorage);
  v55 = v54;
  if (*(_QWORD *)(v49 + 16))
  {
    v56 = v54[2];
    if ((v54[3] >> 1) - v56 < v53)
      goto LABEL_36;
    v57 = v2;
    v58 = v45;
    v59 = (unint64_t)&v54[5 * v56 + 4];
    if (v50 < v59 + 40 * v53 && v59 < v50 + 40 * v53)
      goto LABEL_38;
    sub_100004FC8(&qword_100158B88);
    swift_arrayInitWithCopy(v59);
    v45 = v58;
    v2 = v57;
    if (v53)
    {
      v60 = v55[2];
      v61 = __OFADD__(v60, v53);
      v62 = v60 + v53;
      if (v61)
        goto LABEL_37;
      v55[2] = v62;
    }
  }
  else if (v53)
  {
    goto LABEL_35;
  }
  swift_bridgeObjectRelease(v49);
  swift_bridgeObjectRelease(inited);
  swift_setDeallocating(inited);
  v63 = *(_QWORD *)(inited + 16);
  v64 = sub_100004FC8(&qword_10015CA40);
  swift_arrayDestroy(inited + 32, v63, v64);
  v65 = swift_allocObject(v30, 48, 7);
  *(_OWORD *)(v65 + 16) = xmmword_10011B510;
  *(_WORD *)(v65 + 32) = 2;
  *(_QWORD *)(v65 + 40) = v55;
  v110 = (ValueMetadata *)v30;
  v111 = &off_10014C9F0;
  *(_QWORD *)&v108 = v65;
  v66 = swift_allocObject(v2, 72, 7);
  *(_OWORD *)(v66 + 16) = v105;
  sub_10003CDE8(&v108, v66 + 32);
  v67 = sub_1000FDEE4((uint64_t)v94);
  v68 = swift_allocObject(v30, 48, 7);
  *(_OWORD *)(v68 + 16) = xmmword_10011B520;
  *(_WORD *)(v68 + 32) = 2;
  *(_QWORD *)(v68 + 40) = v67;
  v110 = (ValueMetadata *)v30;
  v111 = &off_10014C9F0;
  *(_QWORD *)&v108 = v68;
  v69 = swift_allocObject(v2, 72, 7);
  *(_OWORD *)(v69 + 16) = v105;
  sub_10003CDE8(&v108, v69 + 32);
  v70 = sub_100004FC8(&qword_10015CA48);
  v71 = swift_initStackObject(v70, v106);
  *(_OWORD *)(v71 + 16) = xmmword_10011B530;
  *(_QWORD *)(v71 + 32) = v104;
  v72 = v71 + 32;
  v73 = v102;
  *(_QWORD *)(v71 + 40) = v103;
  *(_QWORD *)(v71 + 48) = v73;
  v74 = v100;
  *(_QWORD *)(v71 + 56) = v101;
  *(_QWORD *)(v71 + 64) = v74;
  v75 = v98;
  *(_QWORD *)(v71 + 72) = v99;
  *(_QWORD *)(v71 + 80) = v75;
  v76 = v96;
  *(_QWORD *)(v71 + 88) = v97;
  *(_QWORD *)(v71 + 96) = v76;
  *(_QWORD *)(v71 + 104) = v95;
  *(_QWORD *)(v71 + 112) = v45;
  *(_QWORD *)(v71 + 120) = v66;
  *(_QWORD *)(v71 + 128) = v69;
  swift_bridgeObjectRetain(v71);
  v77 = _swiftEmptyArrayStorage;
  v78 = 32;
  while (1)
  {
    v79 = *(_QWORD *)(v71 + v78);
    v80 = *(_QWORD *)(v79 + 16);
    v81 = v77[2];
    v82 = v81 + v80;
    if (__OFADD__(v81, v80))
      break;
    swift_bridgeObjectRetain(*(_QWORD *)(v71 + v78));
    isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(v77);
    if ((_DWORD)isUniquelyReferenced_nonNull_native && v82 <= v77[3] >> 1)
    {
      if (*(_QWORD *)(v79 + 16))
        goto LABEL_21;
    }
    else
    {
      if (v81 <= v82)
        v84 = v81 + v80;
      else
        v84 = v81;
      v77 = sub_100052DA0(isUniquelyReferenced_nonNull_native, v84, 1, v77);
      if (*(_QWORD *)(v79 + 16))
      {
LABEL_21:
        v85 = v77[2];
        if ((v77[3] >> 1) - v85 < v80)
          goto LABEL_33;
        v86 = (unint64_t)&v77[5 * v85 + 4];
        if (v79 + 32 < v86 + 40 * v80 && v86 < v79 + 32 + 40 * v80)
          goto LABEL_38;
        sub_100004FC8(&qword_100157368);
        swift_arrayInitWithCopy(v86);
        if (v80)
        {
          v88 = v77[2];
          v61 = __OFADD__(v88, v80);
          v89 = v88 + v80;
          if (v61)
            goto LABEL_34;
          v77[2] = v89;
        }
        goto LABEL_11;
      }
    }
    if (v80)
      goto LABEL_32;
LABEL_11:
    swift_bridgeObjectRelease(v79);
    v78 += 8;
    if (v78 == 136)
    {
      swift_bridgeObjectRelease(v71);
      swift_setDeallocating(v71);
      v90 = *(_QWORD *)(v71 + 16);
      v91 = sub_100004FC8(&qword_10015CA50);
      swift_arrayDestroy(v72, v90, v91);
      return (uint64_t)v77;
    }
  }
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000F978C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  _QWORD v8[7];
  uint64_t v9;

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  KeyPath = swift_getKeyPath(&unk_10011B410);
  v8[2] = v4;
  v8[3] = v2;
  v8[4] = v3;
  v9 = v4;
  v6 = sub_100007828(&qword_100158EF0, type metadata accessor for PrimarySettingsListModel, (uint64_t)&unk_10011B328);
  swift_unknownObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_100106694, v8, (char *)&type metadata for () + 8, v6);
  swift_release(KeyPath);
  return swift_unknownObjectRelease(v2);
}

uint64_t sub_1000F9848@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, _QWORD *a3@<X4>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;

  v6 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v12 = v6;
  v8 = sub_100007828(&qword_100158EF0, type metadata accessor for PrimarySettingsListModel, (uint64_t)&unk_10011B328);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v12, KeyPath, v8);
  swift_release(KeyPath);
  v9 = v6 + *a3;
  result = swift_unknownObjectWeakLoadStrong(v9);
  v11 = *(_QWORD *)(v9 + 8);
  *a4 = result;
  a4[1] = v11;
  return result;
}

uint64_t sub_1000F98EC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  _QWORD v8[7];
  uint64_t v9;

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  KeyPath = swift_getKeyPath(&unk_10011B460);
  v8[2] = v4;
  v8[3] = v2;
  v8[4] = v3;
  v9 = v4;
  v6 = sub_100007828(&qword_100158EF0, type metadata accessor for PrimarySettingsListModel, (uint64_t)&unk_10011B328);
  swift_unknownObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_100106780, v8, (char *)&type metadata for () + 8, v6);
  swift_release(KeyPath);
  return swift_unknownObjectRelease(v2);
}

_BYTE *sub_1000F99A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t KeyPath;
  uint64_t v35;
  uint64_t v36;
  id v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  void (*v48)(char *, uint64_t);
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  id v54;
  id v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  id v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  id v120;
  uint64_t v121;
  void (*v122)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v123;
  uint64_t v124;
  char v125[8];
  _BYTE *v126;
  uint64_t v127;
  uint64_t v128;
  char v129[8];
  _BYTE *v130;
  uint64_t v131;
  uint64_t v132;
  id v133;
  id v134;

  v5 = v4;
  v124 = a4;
  v9 = sub_100004FC8((uint64_t *)&unk_10015C970);
  __chkstk_darwin(v9);
  v104 = (char *)&v87 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = sub_100004FC8(&qword_10015CA70);
  v103 = *(_QWORD *)(v105 - 8);
  __chkstk_darwin(v105);
  v102 = (char *)&v87 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = sub_100004FC8(&qword_10015CA78);
  v107 = *(_QWORD *)(v108 - 8);
  __chkstk_darwin(v108);
  v106 = (char *)&v87 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = sub_100004FC8(&qword_10015CA80);
  v110 = *(_QWORD *)(v111 - 8);
  __chkstk_darwin(v111);
  v109 = (char *)&v87 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = sub_100004FC8(&qword_10015CA88);
  v113 = *(_QWORD *)(v114 - 8);
  __chkstk_darwin(v114);
  v112 = (char *)&v87 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = sub_100004FC8((uint64_t *)&unk_10015CA90);
  v101 = *(_QWORD *)(v100 - 8);
  __chkstk_darwin(v100);
  v99 = (char *)&v87 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100004FC8((uint64_t *)&unk_10015C5E0);
  __chkstk_darwin(v16);
  v93 = (char *)&v87 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100004FC8(&qword_10015C5D8);
  __chkstk_darwin(v18);
  v91 = (char *)&v87 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = type metadata accessor for NSRunLoop.SchedulerTimeType.Stride(0);
  v117 = *(char **)(v119 - 8);
  __chkstk_darwin(v119);
  v118 = (char *)&v87 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = type metadata accessor for NSNotificationCenter.Publisher(0);
  v95 = *(_QWORD *)(v94 - 8);
  __chkstk_darwin(v94);
  v88 = (char *)&v87 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = sub_100004FC8(&qword_10015CAA0);
  v97 = *(_QWORD *)(v96 - 8);
  __chkstk_darwin(v96);
  v92 = (char *)&v87 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4[16] = 0;
  v23 = &v4[OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_pendingSelectionForSuccessfulPrimaryAppleAccountSignIn];
  v24 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56);
  v25(v23, 1, 1, v24);
  v25(&v5[OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_effectiveSelection], 1, 1, v24);
  v5[OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_effectiveCurrentPresentedItemIdentifier] = 7;
  v26 = &v5[OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_cachedPasscodeCredentialWrapper];
  *v26 = 0;
  v26[1] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_pendingFollowUpController] = 0;
  v27 = &v5[OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel__currentlyLoadingFollowUp];
  v28 = type metadata accessor for FLFollowUpInformation(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v27, 1, 1, v28);
  v29 = &v5[OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel__cachedDataModel];
  v29[1] = 0;
  v29[2] = 0;
  *v29 = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_viewControllerForPresentation] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel____lazy_storage___followUpListElementsGenerator] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel____lazy_storage___primaryAppleAccountStatusObserver] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel____lazy_storage___primaryAppleAccountListSectionProvider] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel____lazy_storage___secondaryAppleAccountItemsObserver] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel____lazy_storage___secondaryAppleAccountSectionModelProvider] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel____lazy_storage___airplaneModeListItemProvider] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel____lazy_storage___cellularDataSettingObserver] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel____lazy_storage___sectionDataModelProviders] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_cancellables] = &_swiftEmptySetSingleton;
  v30 = OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_invalidationSubject;
  v98 = sub_100004FC8((uint64_t *)&unk_10015CAA8);
  swift_allocObject(v98, *(unsigned int *)(v98 + 48), *(unsigned __int16 *)(v98 + 52));
  *(_QWORD *)&v5[v30] = PassthroughSubject.init()();
  v31 = &v5[OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel__selectionDelegate];
  *((_QWORD *)v31 + 1) = 0;
  swift_unknownObjectWeakInit(v31, 0);
  v32 = &v5[OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel__updateDelegate];
  *((_QWORD *)v32 + 1) = 0;
  v33 = swift_unknownObjectWeakInit(v32, 0);
  ObservationRegistrar.init()(v33);
  KeyPath = swift_getKeyPath(&unk_10011B410);
  v130 = v5;
  v131 = a1;
  v132 = a2;
  v134 = v5;
  v35 = sub_100007828(&qword_100158EF0, type metadata accessor for PrimarySettingsListModel, (uint64_t)&unk_10011B328);
  swift_unknownObjectRetain(a1);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v134, KeyPath, sub_100106694, v129, (char *)&type metadata for () + 8, v35);
  swift_release(KeyPath);
  v115 = a1;
  swift_unknownObjectRelease(a1);
  v36 = swift_getKeyPath(&unk_10011B460);
  v126 = v5;
  v127 = a3;
  v128 = v124;
  v134 = v5;
  swift_unknownObjectRetain(a3);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v134, v36, sub_100106780, v125, (char *)&type metadata for () + 8, v35);
  swift_release(v36);
  v116 = a3;
  swift_unknownObjectRelease(a3);
  v90 = (id)objc_opt_self(NSNotificationCenter);
  v37 = objc_msgSend(v90, "defaultCenter");
  NSNotificationCenter.publisher(for:object:)(UIApplicationDidBecomeActiveNotification, 0);

  v38 = v118;
  static NSRunLoop.SchedulerTimeType.Stride.milliseconds(_:)(200);
  v39 = (uint64_t)v91;
  v40 = v119;
  (*((void (**)(char *, uint64_t, uint64_t, uint64_t))v117 + 7))(v91, 1, 1, v119);
  v120 = (id)objc_opt_self(NSRunLoop);
  v134 = objc_msgSend(v120, "mainRunLoop");
  v124 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
  v122 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v124 - 8) + 56);
  v41 = (uint64_t)v93;
  v122(v93, 1, 1, v124);
  v42 = sub_100007BBC(0, &qword_10015C5F8, NSRunLoop_ptr);
  v123 = v42;
  v43 = sub_100007828((unint64_t *)&unk_100156F20, (uint64_t (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Publisher, (uint64_t)&protocol conformance descriptor for NSNotificationCenter.Publisher);
  v89 = v43;
  v121 = sub_10010653C((unint64_t *)&qword_10015C608, &qword_10015C5F8, NSRunLoop_ptr, (uint64_t)&protocol conformance descriptor for NSRunLoop);
  v44 = v92;
  v45 = v94;
  v46 = v42;
  v47 = v88;
  Publisher.delay<A>(for:tolerance:scheduler:options:)(v38, v39, &v134, v41, v94, v46, v43, v121);
  sub_10000BA50(v41, (uint64_t *)&unk_10015C5E0);

  sub_10000BA50(v39, &qword_10015C5D8);
  v91 = (char *)*((_QWORD *)v117 + 1);
  ((void (*)(char *, uint64_t))v91)(v38, v40);
  v48 = *(void (**)(char *, uint64_t))(v95 + 8);
  v49 = v47;
  v48(v47, v45);
  v50 = sub_100007868(&qword_10015CAB8, &qword_10015CAA0, (uint64_t)&protocol conformance descriptor for Publishers.Delay<A, B>);
  v51 = v96;
  v52 = Publisher<>.sink(receiveValue:)(sub_1000FA824, 0, v96, v50);
  (*(void (**)(char *, uint64_t))(v97 + 8))(v44, v51);
  v53 = &v5[OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_cancellables];
  swift_beginAccess(&v5[OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_cancellables], &v134, 33, 0);
  AnyCancellable.store(in:)(v53);
  swift_endAccess(&v134);
  swift_release(v52);
  v54 = objc_msgSend(v90, "defaultCenter");
  NSNotificationCenter.publisher(for:object:)(PSLaunchHasCompletedNotification, 0);

  v55 = v120;
  v134 = objc_msgSend(v120, "mainRunLoop");
  v122((char *)v41, 1, 1, v124);
  v56 = v99;
  Publisher.receive<A>(on:options:)(&v134, v41, v45, v123, v89, v121);
  sub_10000BA50(v41, (uint64_t *)&unk_10015C5E0);

  v48(v49, v45);
  v57 = swift_allocObject(&unk_10014E100, 24, 7);
  swift_weakInit(v57 + 16, v5);
  v58 = sub_100007868(&qword_10015CAC0, (uint64_t *)&unk_10015CA90, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v59 = v100;
  v60 = Publisher<>.sink(receiveValue:)(sub_10010698C, v57, v100, v58);
  swift_release(v57);
  (*(void (**)(char *, uint64_t))(v101 + 8))(v56, v59);
  swift_beginAccess(v53, &v134, 33, 0);
  v117 = v53;
  AnyCancellable.store(in:)(v53);
  swift_endAccess(&v134);
  swift_release(v60);
  v134 = *(id *)&v5[OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_invalidationSubject];
  swift_retain(v134);
  v61 = v118;
  static NSRunLoop.SchedulerTimeType.Stride.milliseconds(_:)(50);
  v133 = objc_msgSend(v55, "mainRunLoop");
  v122((char *)v41, 1, 1, v124);
  v62 = sub_100007868(&qword_10015CAC8, (uint64_t *)&unk_10015CAA8, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v63 = v102;
  Publisher.debounce<A>(for:scheduler:options:)(v61, &v133, v41, v98, v123, v62, v121);
  sub_10000BA50(v41, (uint64_t *)&unk_10015C5E0);

  ((void (*)(char *, uint64_t))v91)(v61, v119);
  swift_release(v134);
  if (qword_100156D68 != -1)
    swift_once(&qword_100156D68, sub_1000D34E0);
  v64 = (void *)qword_10015D428;
  v134 = (id)qword_10015D428;
  v65 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v66 = (uint64_t)v104;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(v104, 1, 1, v65);
  v67 = sub_100007BBC(0, (unint64_t *)&qword_100159D30, OS_dispatch_queue_ptr);
  v68 = sub_100007868(&qword_10015CAD0, &qword_10015CA70, (uint64_t)&protocol conformance descriptor for Publishers.Debounce<A, B>);
  v69 = sub_10010653C((unint64_t *)&qword_10015C990, (unint64_t *)&qword_100159D30, OS_dispatch_queue_ptr, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  v70 = v64;
  v71 = v106;
  v72 = v105;
  Publisher.receive<A>(on:options:)(&v134, v66, v105, v67, v68, v69);
  sub_10000BA50(v66, (uint64_t *)&unk_10015C970);

  (*(void (**)(char *, uint64_t))(v103 + 8))(v63, v72);
  v73 = swift_allocObject(&unk_10014E100, 24, 7);
  swift_weakInit(v73 + 16, v5);
  v74 = sub_100004FC8(&qword_10015CAD8);
  v75 = sub_100007868(&qword_10015CAE0, &qword_10015CA78, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v76 = v109;
  v77 = v108;
  Publisher.compactMap<A>(_:)(sub_100106994, v73, v108, v74, v75);
  swift_release(v73);
  (*(void (**)(char *, uint64_t))(v107 + 8))(v71, v77);
  v134 = objc_msgSend(v120, "mainRunLoop");
  v122((char *)v41, 1, 1, v124);
  v78 = sub_100007868(&qword_10015CAE8, &qword_10015CA80, (uint64_t)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  v79 = v112;
  v80 = v111;
  Publisher.receive<A>(on:options:)(&v134, v41, v111, v123, v78, v121);
  sub_10000BA50(v41, (uint64_t *)&unk_10015C5E0);

  (*(void (**)(char *, uint64_t))(v110 + 8))(v76, v80);
  v81 = swift_getKeyPath(&unk_10011B438);
  v134 = v5;
  v82 = sub_100007868((unint64_t *)&unk_10015CAF0, &qword_10015CA88, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v83 = v114;
  v84 = Publisher<>.assign<A>(to:on:)(v81, &v134, v114, v82);
  swift_release(v81);
  (*(void (**)(char *, uint64_t))(v113 + 8))(v79, v83);
  v85 = v117;
  swift_beginAccess(v117, &v134, 33, 0);
  AnyCancellable.store(in:)(v85);
  swift_endAccess(&v134);
  swift_release(v84);
  swift_unknownObjectRelease(v115);
  swift_unknownObjectRelease(v116);
  return v5;
}

void sub_1000FA824()
{
  id v0;

  v0 = objc_msgSend((id)objc_opt_self(PSLaunchTracker), "sharedInstance");
  objc_msgSend(v0, "setLaunchHasCompleted");

}

uint64_t sub_1000FA870(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _QWORD v5[2];
  char v6;
  _BYTE v7[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v7, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v4 = result;
    v5[0] = "Launch Completed";
    v5[1] = 16;
    v6 = 2;
    PassthroughSubject.send(_:)(v5);
    return swift_release(v4);
  }
  return result;
}

uint64_t sub_1000FA8EC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint8_t *v17;
  uint64_t result;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30[3];

  v5 = *a1;
  v4 = a1[1];
  v6 = *((unsigned __int8 *)a1 + 16);
  v7 = a2 + 16;
  if (qword_100156CC0 != -1)
    swift_once(&qword_100156CC0, sub_10008BE7C);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_100007808(v8, (uint64_t)qword_10015D2F8);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v28 = v7;
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v30[0] = v13;
    *(_DWORD *)v12 = 136446210;
    v14 = StaticString.description.getter(v5, v4, v6);
    v16 = v15;
    v29 = sub_1000DA1F0(v14, v15, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, v30, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease(v16);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    v17 = v12;
    v7 = v28;
    swift_slowDealloc(v17, -1, -1);
  }

  swift_beginAccess(v7, v30, 0, 0);
  result = swift_weakLoadStrong(v7);
  if (result)
  {
    v19 = result;
    v20 = Logger.logObject.getter(result);
    v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Requesting new snapshot for data model due to invalidation.", v22, 2u);
      swift_slowDealloc(v22, -1, -1);
    }

    v23 = sub_1000F8300();
    v25 = v24;
    v27 = v26;
    result = swift_release(v19);
    *a3 = v23;
    a3[1] = v25;
    a3[2] = v27;
  }
  else
  {
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 1;
  }
  return result;
}

_QWORD *sub_1000FAB4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33[24];
  _QWORD v34[5];

  v1 = v0;
  v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_cancellables);
  swift_beginAccess(v2, v33, 1, 0);
  v3 = *v2;
  v29 = v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v3 < 0)
      v4 = *v2;
    else
      v4 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    v5 = __CocoaSet.makeIterator()(v4);
    v6 = type metadata accessor for AnyCancellable(0);
    v7 = sub_100007828((unint64_t *)&qword_100156FB8, (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable, (uint64_t)&protocol conformance descriptor for AnyCancellable);
    result = Set.Iterator.init(_cocoa:)(v34, v5, v6, v7);
    v3 = v34[0];
    v30 = v34[1];
    v9 = v34[2];
    v10 = v34[3];
    v11 = v34[4];
  }
  else
  {
    v12 = -1 << *(_BYTE *)(v3 + 32);
    v30 = v3 + 56;
    v9 = ~v12;
    v13 = -v12;
    if (v13 < 64)
      v14 = ~(-1 << v13);
    else
      v14 = -1;
    v11 = v14 & *(_QWORD *)(v3 + 56);
    result = (_QWORD *)swift_bridgeObjectRetain(v3);
    v10 = 0;
  }
  v15 = (unint64_t)(v9 + 64) >> 6;
  if (v3 < 0)
    goto LABEL_13;
  while (1)
  {
    if (v11)
    {
      v16 = (v11 - 1) & v11;
      v17 = __clz(__rbit64(v11)) | (v10 << 6);
      v18 = v10;
      goto LABEL_30;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
      break;
    if (v23 >= v15)
      goto LABEL_33;
    v24 = *(_QWORD *)(v30 + 8 * v23);
    v18 = v10 + 1;
    if (!v24)
    {
      v18 = v10 + 2;
      if (v10 + 2 >= v15)
        goto LABEL_33;
      v24 = *(_QWORD *)(v30 + 8 * v18);
      if (!v24)
      {
        v18 = v10 + 3;
        if (v10 + 3 >= v15)
          goto LABEL_33;
        v24 = *(_QWORD *)(v30 + 8 * v18);
        if (!v24)
        {
          v18 = v10 + 4;
          if (v10 + 4 >= v15)
            goto LABEL_33;
          v24 = *(_QWORD *)(v30 + 8 * v18);
          if (!v24)
          {
            v25 = v10 + 5;
            while (v15 != v25)
            {
              v24 = *(_QWORD *)(v30 + 8 * v25++);
              if (v24)
              {
                v18 = v25 - 1;
                goto LABEL_29;
              }
            }
LABEL_33:
            sub_100007C50(v3);
            v26 = *v29;
            *v29 = (uint64_t)&_swiftEmptySetSingleton;
            swift_bridgeObjectRelease(v26);
            sub_10000BA50(v1+ OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_pendingSelectionForSuccessfulPrimaryAppleAccountSignIn, &qword_10015C890);
            sub_10000BA50(v1 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_effectiveSelection, &qword_10015C890);
            swift_bridgeObjectRelease(*(_QWORD *)(v1
                                                + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_cachedPasscodeCredentialWrapper
                                                + 8));

            sub_10000BA50(v1 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel__currentlyLoadingFollowUp, &qword_10015C8E0);
            sub_100106720(*(_QWORD *)(v1 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel__cachedDataModel), *(_QWORD *)(v1 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel__cachedDataModel + 8), *(_QWORD *)(v1 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel__cachedDataModel + 16));
            objc_release(*(id *)(v1
                               + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_viewControllerForPresentation));
            swift_release(*(_QWORD *)(v1
                                    + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel____lazy_storage___followUpListElementsGenerator));
            objc_release(*(id *)(v1
                               + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel____lazy_storage___primaryAppleAccountStatusObserver));
            objc_release(*(id *)(v1
                               + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel____lazy_storage___primaryAppleAccountListSectionProvider));
            swift_release(*(_QWORD *)(v1
                                    + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel____lazy_storage___secondaryAppleAccountItemsObserver));
            swift_release(*(_QWORD *)(v1
                                    + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel____lazy_storage___secondaryAppleAccountSectionModelProvider));
            swift_release(*(_QWORD *)(v1
                                    + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel____lazy_storage___airplaneModeListItemProvider));
            swift_release(*(_QWORD *)(v1
                                    + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel____lazy_storage___cellularDataSettingObserver));
            swift_bridgeObjectRelease(*(_QWORD *)(v1
                                                + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel____lazy_storage___sectionDataModelProviders));
            swift_bridgeObjectRelease(*v29);
            swift_release(*(_QWORD *)(v1 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_invalidationSubject));
            sub_10010699C(v1 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel__selectionDelegate);
            sub_10010699C(v1 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel__updateDelegate);
            v27 = v1 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel___observationRegistrar;
            v28 = type metadata accessor for ObservationRegistrar(0);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v27, v28);
            return (_QWORD *)v1;
          }
        }
      }
    }
LABEL_29:
    v16 = (v24 - 1) & v24;
    v17 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_30:
    v22 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v17);
    swift_retain(v22);
    if (!v22)
      goto LABEL_33;
    while (1)
    {
      AnyCancellable.cancel()();
      result = (_QWORD *)swift_release(v22);
      v10 = v18;
      v11 = v16;
      if ((v3 & 0x8000000000000000) == 0)
        break;
LABEL_13:
      v19 = __CocoaSet.Iterator.next()(result);
      if (v19)
      {
        v20 = v19;
        v31 = v19;
        v21 = type metadata accessor for AnyCancellable(0);
        swift_unknownObjectRetain(v20);
        swift_dynamicCast(&v32, &v31, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
        v22 = v32;
        swift_unknownObjectRelease(v20);
        v18 = v10;
        v16 = v11;
        if (v22)
          continue;
      }
      goto LABEL_33;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1000FAF84()
{
  uint64_t v0;

  sub_1000FAB4C();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000FAFA8()
{
  return type metadata accessor for PrimarySettingsListModel(0);
}

uint64_t type metadata accessor for PrimarySettingsListModel(uint64_t a1)
{
  uint64_t result;

  result = qword_10015C748;
  if (!qword_10015C748)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PrimarySettingsListModel);
  return result;
}

void sub_1000FAFEC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  char *v25;
  char *v26;
  void *v27;
  void *v28;
  uint64_t v29;

  v8 = &unk_10011B240;
  sub_1000E30A8(319, (unint64_t *)&qword_10015AD18, type metadata accessor for PrimarySettingsListItemIdentifier);
  if (v3 <= 0x3F)
  {
    v9 = *(_QWORD *)(v2 - 8) + 64;
    v10 = v9;
    v11 = &unk_10011B258;
    v12 = &unk_10011B270;
    v13 = &unk_10011B288;
    sub_1000E30A8(319, (unint64_t *)&unk_10015C760, (uint64_t (*)(uint64_t))&type metadata accessor for FLFollowUpInformation);
    if (v5 <= 0x3F)
    {
      v14 = *(_QWORD *)(v4 - 8) + 64;
      v15 = &unk_10011B2A0;
      v16 = &unk_10011B288;
      v17 = &unk_10011B288;
      v18 = &unk_10011B288;
      v19 = &unk_10011B288;
      v20 = &unk_10011B288;
      v21 = &unk_10011B288;
      v22 = &unk_10011B288;
      v23 = &unk_10011B288;
      v24 = &unk_10011B288;
      v25 = (char *)&value witness table for Builtin.BridgeObject + 64;
      v26 = (char *)&value witness table for Builtin.NativeObject + 64;
      v27 = &unk_10011B2B8;
      v28 = &unk_10011B2B8;
      v6 = type metadata accessor for ObservationRegistrar(319);
      if (v7 <= 0x3F)
      {
        v29 = *(_QWORD *)(v6 - 8) + 64;
        swift_updateClassMetadata2(a1, 256, 22, &v8, a1 + 80);
      }
    }
  }
}

uint64_t sub_1000FB11C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *);
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  void (*v42)(char *);
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t inited;
  int64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  objc_class *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int64_t v99;
  int64_t v100;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t result;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  void (*v124)(char *);
  __int128 v125;
  char v126[40];
  char v127[88];
  __int128 v128;
  uint64_t v129;
  _UNKNOWN **v130;

  v2 = *a1;
  v3 = sub_1000F8A2C();
  v129 = type metadata accessor for AirplaneModeListItemProvider(0);
  v130 = &off_1001491E8;
  *(_QWORD *)&v128 = v3;
  v4 = sub_100004FC8(&qword_100158B80);
  v5 = swift_allocObject(v4, 72, 7);
  v125 = xmmword_1001164D0;
  *(_OWORD *)(v5 + 16) = xmmword_1001164D0;
  v120 = v5;
  sub_10003CDE8(&v128, v5 + 32);
  v129 = v2;
  v130 = &off_10014DED0;
  *(_QWORD *)&v128 = a1;
  v6 = type metadata accessor for WiFiListItemProvider(0);
  v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  v8 = sub_1000D2B68((uint64_t)&v128, v2);
  v9 = *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64);
  __chkstk_darwin(v8);
  v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  v124 = *(void (**)(char *))(v11 + 16);
  v124((char *)&v111 - v10);
  v12 = *(uint64_t *)((char *)&v111 - v10);
  v13 = (_QWORD *)(v7 + OBJC_IVAR____TtC11SettingsApp20WiFiListItemProvider_invalidator);
  v13[3] = v2;
  v13[4] = &off_10014DED0;
  *v13 = v12;
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = 0;
  v14 = v7 + OBJC_IVAR____TtC11SettingsApp20WiFiListItemProvider_id;
  v15 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  swift_storeEnumTagMultiPayload(v14, v15, 9);
  *(_QWORD *)(v7 + OBJC_IVAR____TtC11SettingsApp20WiFiListItemProvider_wifiMonitor) = 0;
  swift_retain(a1);
  sub_100005474(&v128);
  v129 = v6;
  v130 = &off_100148880;
  *(_QWORD *)&v128 = v7;
  v123 = v4;
  v16 = swift_allocObject(v4, 72, 7);
  *(_OWORD *)(v16 + 16) = v125;
  v119 = v16;
  sub_10003CDE8(&v128, v16 + 32);
  v129 = v2;
  v130 = &off_10014DED0;
  *(_QWORD *)&v128 = a1;
  v17 = type metadata accessor for EthernetListItemProvider(0);
  v18 = swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  v19 = sub_1000D2B68((uint64_t)&v128, v2);
  v121 = v9;
  __chkstk_darwin(v19);
  v20 = v124;
  v124((char *)&v111 - v10);
  v21 = *(uint64_t *)((char *)&v111 - v10);
  v22 = (_QWORD *)(v18 + OBJC_IVAR____TtC11SettingsApp24EthernetListItemProvider_invalidator);
  v22[3] = v2;
  v22[4] = &off_10014DED0;
  *v22 = v21;
  swift_storeEnumTagMultiPayload(v18 + OBJC_IVAR____TtC11SettingsApp24EthernetListItemProvider_id, v15, 10);
  *(_BYTE *)(v18 + OBJC_IVAR____TtC11SettingsApp24EthernetListItemProvider_hasEthernetNetworkInterfaces) = 0;
  v23 = v18 + OBJC_IVAR____TtC11SettingsApp24EthernetListItemProvider_cancellable;
  *(_QWORD *)(v23 + 32) = 0;
  *(_OWORD *)v23 = 0u;
  *(_OWORD *)(v23 + 16) = 0u;
  swift_retain(a1);
  sub_100005474(&v128);
  v129 = v17;
  v130 = &off_10014E268;
  *(_QWORD *)&v128 = v18;
  v24 = swift_allocObject(v4, 72, 7);
  *(_OWORD *)(v24 + 16) = v125;
  v118 = v24;
  sub_10003CDE8(&v128, v24 + 32);
  v129 = v2;
  v130 = &off_10014DED0;
  *(_QWORD *)&v128 = a1;
  v25 = type metadata accessor for BluetoothListItemProvider(0);
  v26 = swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
  v27 = sub_1000D2B68((uint64_t)&v128, v2);
  __chkstk_darwin(v27);
  v122 = v10;
  v20((char *)&v111 - v10);
  v28 = *(uint64_t *)((char *)&v111 - v10);
  v29 = (_QWORD *)(v26 + OBJC_IVAR____TtC11SettingsApp25BluetoothListItemProvider_invalidator);
  v29[3] = v2;
  v29[4] = &off_10014DED0;
  *v29 = v28;
  *(_QWORD *)(v26 + 48) = 0;
  *(_OWORD *)(v26 + 16) = 0u;
  *(_OWORD *)(v26 + 32) = 0u;
  swift_storeEnumTagMultiPayload(v26 + OBJC_IVAR____TtC11SettingsApp25BluetoothListItemProvider_id, v15, 11);
  *(_QWORD *)(v26 + OBJC_IVAR____TtC11SettingsApp25BluetoothListItemProvider_bluetoothController) = 0;
  *(_BYTE *)(v26 + OBJC_IVAR____TtC11SettingsApp25BluetoothListItemProvider_bluetoothState) = 0;
  swift_retain(a1);
  sub_100005474(&v128);
  v129 = v25;
  v130 = &off_10014D9F0;
  *(_QWORD *)&v128 = v26;
  v30 = v123;
  v31 = swift_allocObject(v123, 72, 7);
  *(_OWORD *)(v31 + 16) = v125;
  v117 = v31;
  sub_10003CDE8(&v128, v31 + 32);
  swift_retain(a1);
  v32 = sub_1000F8A2C();
  v33 = sub_1000F8B88();
  v34 = sub_100104C00((uint64_t)a1, v32, v33);
  v129 = type metadata accessor for CellularDataListItemProvider(0);
  v130 = &off_10014A7A0;
  *(_QWORD *)&v128 = v34;
  v35 = swift_allocObject(v30, 72, 7);
  *(_OWORD *)(v35 + 16) = v125;
  v116 = v35;
  sub_10003CDE8(&v128, v35 + 32);
  swift_retain(a1);
  v36 = sub_1000F8A2C();
  v37 = sub_1000F8B88();
  v129 = v2;
  v130 = &off_10014DED0;
  *(_QWORD *)&v128 = a1;
  v38 = type metadata accessor for PersonalHotspotListItemProvider(0);
  v39 = swift_allocObject(v38, *(unsigned int *)(v38 + 48), *(unsigned __int16 *)(v38 + 52));
  v40 = sub_1000D2B68((uint64_t)&v128, v2);
  __chkstk_darwin(v40);
  v41 = (uint64_t *)((char *)&v111 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v42 = v124;
  v124((char *)v41);
  v43 = *v41;
  swift_retain(a1);
  v44 = sub_100103F04(v43, v36, v37, v39);
  sub_100005474(&v128);
  swift_release(a1);
  v129 = v38;
  v130 = &off_100149838;
  *(_QWORD *)&v128 = v44;
  v45 = v123;
  v46 = swift_allocObject(v123, 72, 7);
  *(_OWORD *)(v46 + 16) = v125;
  v115 = v46;
  sub_10003CDE8(&v128, v46 + 32);
  v129 = v15;
  v130 = &off_10014B908;
  v47 = sub_1001068B0(&v128);
  v113 = v15;
  swift_storeEnumTagMultiPayload(v47, v15, 36);
  v48 = v45;
  v49 = swift_allocObject(v45, 72, 7);
  *(_OWORD *)(v49 + 16) = v125;
  v114 = v49;
  sub_10003CDE8(&v128, v49 + 32);
  v129 = v2;
  v130 = &off_10014DED0;
  *(_QWORD *)&v128 = a1;
  v50 = type metadata accessor for VPNListItemProvider(0);
  v51 = swift_allocObject(v50, *(unsigned int *)(v50 + 48), *(unsigned __int16 *)(v50 + 52));
  v52 = sub_1000D2B68((uint64_t)&v128, v2);
  __chkstk_darwin(v52);
  v53 = (uint64_t *)((char *)&v111 - v122);
  v42((char *)&v111 - v122);
  v54 = *v53;
  swift_retain(a1);
  v55 = sub_100103CFC(v54, v51);
  sub_100005474(&v128);
  v129 = v50;
  v130 = &off_100148BF8;
  *(_QWORD *)&v128 = v55;
  v56 = swift_allocObject(v48, 72, 7);
  *(_OWORD *)(v56 + 16) = v125;
  sub_10003CDE8(&v128, v56 + 32);
  v57 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v58 = objc_msgSend(v57, "userInterfaceIdiom");

  if (v58 == (id)1)
  {
    v112 = v56;
    v129 = v2;
    v130 = &off_10014DED0;
    *(_QWORD *)&v128 = a1;
    v59 = type metadata accessor for ClassroomListItemProvider(0);
    v60 = swift_allocObject(v59, *(unsigned int *)(v59 + 48), *(unsigned __int16 *)(v59 + 52));
    v61 = sub_1000D2B68((uint64_t)&v128, v2);
    __chkstk_darwin(v61);
    v62 = (uint64_t *)((char *)&v111 - v122);
    v124((char *)&v111 - v122);
    v63 = *v62;
    v64 = (_QWORD *)(v60 + OBJC_IVAR____TtC11SettingsApp25ClassroomListItemProvider_invalidator);
    v64[3] = v2;
    v64[4] = &off_10014DED0;
    *v64 = v63;
    swift_storeEnumTagMultiPayload(v60 + OBJC_IVAR____TtC11SettingsApp25ClassroomListItemProvider_id, v113, 15);
    *(_QWORD *)(v60 + OBJC_IVAR____TtC11SettingsApp25ClassroomListItemProvider_cancellables) = &_swiftEmptySetSingleton;
    *(_QWORD *)(v60
              + OBJC_IVAR____TtC11SettingsApp25ClassroomListItemProvider____lazy_storage___classroomVisibilityArbitrator) = 0;
    *(_BYTE *)(v60 + OBJC_IVAR____TtC11SettingsApp25ClassroomListItemProvider_classroomVisible) = 0;
    v65 = (_QWORD *)(v60 + OBJC_IVAR____TtC11SettingsApp25ClassroomListItemProvider_classroomStatus);
    *v65 = 0;
    v65[1] = 0;
    swift_retain(a1);
    sub_100005474(&v128);
    v129 = v59;
    v130 = &off_10014AC00;
    *(_QWORD *)&v128 = v60;
    v66 = swift_allocObject(v48, 72, 7);
    *(_OWORD *)(v66 + 16) = v125;
    v67 = v66 + 32;
    sub_10003CDE8(&v128, v66 + 32);
    v68 = sub_100004FC8((uint64_t *)&unk_10015CA30);
    inited = swift_initStackObject(v68, v126);
    *(_OWORD *)(inited + 16) = v125;
    *(_QWORD *)(inited + 32) = v66;
    v70 = *(_QWORD *)(v66 + 16);
    swift_bridgeObjectRetain(inited);
    swift_bridgeObjectRetain(v66);
    v71 = sub_100052DB4(0, v70, 1, _swiftEmptyArrayStorage);
    v72 = v71;
    if (*(_QWORD *)(v66 + 16))
    {
      v73 = v71[2];
      if ((v71[3] >> 1) - v73 < v70)
        goto LABEL_39;
      v74 = (unint64_t)&v71[5 * v73 + 4];
      if (v67 < v74 + 40 * v70 && v74 < v67 + 40 * v70)
        goto LABEL_41;
      sub_100004FC8(&qword_100158B88);
      swift_arrayInitWithCopy(v74);
      if (v70)
      {
        v75 = v72[2];
        v76 = __OFADD__(v75, v70);
        v77 = v75 + v70;
        if (v76)
          goto LABEL_40;
        v72[2] = v77;
      }
    }
    else if (v70)
    {
      goto LABEL_38;
    }
    swift_bridgeObjectRelease(v66);
    swift_bridgeObjectRelease(inited);
    swift_setDeallocating(inited);
    v78 = *(_QWORD *)(inited + 16);
    v79 = sub_100004FC8(&qword_10015CA40);
    swift_arrayDestroy(inited + 32, v78, v79);
    v56 = v112;
  }
  else
  {
    v72 = _swiftEmptyArrayStorage;
  }
  v129 = v2;
  v130 = &off_10014DED0;
  *(_QWORD *)&v128 = a1;
  v80 = (objc_class *)type metadata accessor for SatelliteListItemProvider(0);
  v81 = (char *)objc_allocWithZone(v80);
  v82 = sub_1000D2B68((uint64_t)&v128, v129);
  __chkstk_darwin(v82);
  v84 = (uint64_t *)((char *)&v111 - ((v83 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v85 + 16))(v84);
  v86 = *v84;
  swift_retain(a1);
  v87 = sub_1001046F0(v86, v81);
  sub_100005474(&v128);
  v129 = (uint64_t)v80;
  v130 = &off_10014B878;
  *(_QWORD *)&v128 = v87;
  v88 = swift_allocObject(v48, 72, 7);
  *(_OWORD *)(v88 + 16) = v125;
  sub_10003CDE8(&v128, v88 + 32);
  v89 = sub_100004FC8((uint64_t *)&unk_10015CA30);
  v90 = swift_initStackObject(v89, v127);
  *(_OWORD *)(v90 + 16) = xmmword_1001164E0;
  *(_QWORD *)(v90 + 32) = v120;
  v91 = v90 + 32;
  v92 = v118;
  *(_QWORD *)(v90 + 40) = v119;
  *(_QWORD *)(v90 + 48) = v92;
  v93 = v116;
  *(_QWORD *)(v90 + 56) = v117;
  *(_QWORD *)(v90 + 64) = v93;
  v94 = v114;
  *(_QWORD *)(v90 + 72) = v115;
  *(_QWORD *)(v90 + 80) = v94;
  *(_QWORD *)(v90 + 88) = v56;
  *(_QWORD *)(v90 + 96) = v72;
  *(_QWORD *)(v90 + 104) = v88;
  swift_bridgeObjectRetain(v90);
  v95 = _swiftEmptyArrayStorage;
  v96 = 32;
  while (1)
  {
    v97 = *(_QWORD *)(v90 + v96);
    v98 = *(_QWORD *)(v97 + 16);
    v99 = v95[2];
    v100 = v99 + v98;
    if (__OFADD__(v99, v98))
      break;
    swift_bridgeObjectRetain(*(_QWORD *)(v90 + v96));
    isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(v95);
    if ((_DWORD)isUniquelyReferenced_nonNull_native && v100 <= v95[3] >> 1)
    {
      if (*(_QWORD *)(v97 + 16))
        goto LABEL_24;
    }
    else
    {
      if (v99 <= v100)
        v102 = v99 + v98;
      else
        v102 = v99;
      v95 = sub_100052DB4(isUniquelyReferenced_nonNull_native, v102, 1, v95);
      if (*(_QWORD *)(v97 + 16))
      {
LABEL_24:
        v103 = v95[2];
        if ((v95[3] >> 1) - v103 < v98)
          goto LABEL_36;
        v104 = (unint64_t)&v95[5 * v103 + 4];
        if (v97 + 32 < v104 + 40 * v98 && v104 < v97 + 32 + 40 * v98)
          goto LABEL_41;
        sub_100004FC8(&qword_100158B88);
        swift_arrayInitWithCopy(v104);
        if (v98)
        {
          v106 = v95[2];
          v76 = __OFADD__(v106, v98);
          v107 = v106 + v98;
          if (v76)
            goto LABEL_37;
          v95[2] = v107;
        }
        goto LABEL_14;
      }
    }
    if (v98)
      goto LABEL_35;
LABEL_14:
    swift_bridgeObjectRelease(v97);
    v96 += 8;
    if (v96 == 112)
    {
      swift_bridgeObjectRelease(v90);
      swift_setDeallocating(v90);
      v108 = *(_QWORD *)(v90 + 16);
      v109 = sub_100004FC8(&qword_10015CA40);
      swift_arrayDestroy(v91, v108, v109);
      return (uint64_t)v95;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000FBD70(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t inited;
  uint64_t v13;
  int64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  char v33;
  _BYTE v34[48];
  __int128 v35;
  uint64_t v36;
  _UNKNOWN **v37;

  v2 = sub_1000FC0E4(a1);
  v3 = type metadata accessor for StaticPrimarySettingsListSectionProvider();
  v4 = swift_allocObject(v3, 48, 7);
  *(_OWORD *)(v4 + 16) = xmmword_10011B4D0;
  *(_WORD *)(v4 + 32) = 2;
  *(_QWORD *)(v4 + 40) = v2;
  v36 = v3;
  v37 = &off_10014C9F0;
  *(_QWORD *)&v35 = v4;
  v5 = sub_100004FC8((uint64_t *)&unk_10015CA20);
  v6 = swift_allocObject(v5, 72, 7);
  *(_OWORD *)(v6 + 16) = xmmword_1001164D0;
  v7 = v6 + 32;
  sub_10003CDE8(&v35, v6 + 32);
  v8 = sub_1000FC428();
  v9 = swift_allocObject(v3, 48, 7);
  *(_OWORD *)(v9 + 16) = xmmword_10011B4D0;
  *(_WORD *)(v9 + 32) = 258;
  *(_QWORD *)(v9 + 40) = v8;
  v36 = v3;
  v37 = &off_10014C9F0;
  *(_QWORD *)&v35 = v9;
  v10 = swift_allocObject(v5, 72, 7);
  *(_OWORD *)(v10 + 16) = xmmword_1001164D0;
  sub_10003CDE8(&v35, v10 + 32);
  v11 = sub_100004FC8(&qword_10015CA48);
  inited = swift_initStackObject(v11, v34);
  *(_OWORD *)(inited + 16) = xmmword_100115BA0;
  *(_QWORD *)(inited + 32) = v6;
  v13 = inited + 32;
  *(_QWORD *)(inited + 40) = v10;
  v14 = *(_QWORD *)(v6 + 16);
  swift_bridgeObjectRetain(inited);
  swift_bridgeObjectRetain(v6);
  v15 = sub_100052DA0(0, v14, 1, _swiftEmptyArrayStorage);
  v16 = v15;
  if (*(_QWORD *)(v6 + 16))
  {
    v17 = v15[2];
    if ((v15[3] >> 1) - v17 < v14)
    {
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    v18 = (unint64_t)&v15[5 * v17 + 4];
    if (v7 < v18 + 40 * v14 && v18 < v7 + 40 * v14)
      goto LABEL_37;
    sub_100004FC8(&qword_100157368);
    swift_arrayInitWithCopy(v18);
    if (v14)
    {
      v20 = v16[2];
      v21 = __OFADD__(v20, v14);
      v22 = v20 + v14;
      if (v21)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v16[2] = v22;
    }
  }
  else if (v14)
  {
    __break(1u);
    goto LABEL_25;
  }
  swift_bridgeObjectRelease(v6);
  v6 = *(_QWORD *)(inited + 40);
  v7 = *(_QWORD *)(v6 + 16);
  v14 = v16[2];
  v1 = v14 + v7;
  if (__OFADD__(v14, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v23 = v16[3];
  swift_bridgeObjectRetain(*(_QWORD *)(inited + 40));
  if (v1 <= (uint64_t)(v23 >> 1))
  {
    if (v7)
      goto LABEL_15;
    goto LABEL_30;
  }
LABEL_26:
  if (v14 <= v1)
    v29 = v1;
  else
    v29 = v14;
  v16 = sub_100052DA0((_QWORD *)1, v29, 1, v16);
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_30:
    if (!v7)
      goto LABEL_31;
    __break(1u);
    goto LABEL_33;
  }
LABEL_15:
  v24 = v16[2];
  if ((v16[3] >> 1) - v24 < (uint64_t)v7)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v25 = (unint64_t)&v16[5 * v24 + 4];
  if (v6 + 32 < v25 + 40 * v7 && v25 < v6 + 32 + 40 * v7)
    goto LABEL_37;
  sub_100004FC8(&qword_100157368);
  swift_arrayInitWithCopy(v25);
  if (!v7)
  {
LABEL_31:
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(inited);
    swift_setDeallocating(inited);
    v30 = *(_QWORD *)(inited + 16);
    v31 = sub_100004FC8(&qword_10015CA50);
    swift_arrayDestroy(v13, v30, v31);
    return (uint64_t)v16;
  }
  v27 = v16[2];
  v21 = __OFADD__(v27, v7);
  v28 = v27 + v7;
  if (!v21)
  {
    v16[2] = v28;
    goto LABEL_31;
  }
LABEL_36:
  __break(1u);
LABEL_37:
  v33 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v33, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000FC0E4(uint64_t a1)
{
  int64_t v1;
  uint64_t *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t inited;
  uint64_t v12;
  int64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  char v32;
  _BYTE v33[48];
  __int128 v34;
  uint64_t v35;
  _UNKNOWN **v36;

  v2 = (uint64_t *)swift_retain(a1);
  v3 = sub_100104D64(v2);
  v35 = type metadata accessor for GeneralSettingsListItemProvider(0);
  v36 = &off_10014AD18;
  *(_QWORD *)&v34 = v3;
  v4 = sub_100004FC8(&qword_100158B80);
  v5 = swift_allocObject(v4, 72, 7);
  *(_OWORD *)(v5 + 16) = xmmword_1001164D0;
  v6 = v5 + 32;
  sub_10003CDE8(&v34, v5 + 32);
  v7 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v35 = v7;
  v36 = &off_10014B908;
  v8 = sub_1001068B0(&v34);
  swift_storeEnumTagMultiPayload(v8, v7, 27);
  v9 = swift_allocObject(v4, 72, 7);
  *(_OWORD *)(v9 + 16) = xmmword_1001164D0;
  sub_10003CDE8(&v34, v9 + 32);
  v10 = sub_100004FC8((uint64_t *)&unk_10015CA30);
  inited = swift_initStackObject(v10, v33);
  *(_OWORD *)(inited + 16) = xmmword_100115BA0;
  *(_QWORD *)(inited + 32) = v5;
  v12 = inited + 32;
  *(_QWORD *)(inited + 40) = v9;
  v13 = *(_QWORD *)(v5 + 16);
  swift_bridgeObjectRetain(inited);
  swift_bridgeObjectRetain(v5);
  v14 = sub_100052DB4(0, v13, 1, _swiftEmptyArrayStorage);
  v15 = v14;
  if (*(_QWORD *)(v5 + 16))
  {
    v16 = v14[2];
    if ((v14[3] >> 1) - v16 < v13)
    {
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    v17 = (unint64_t)&v14[5 * v16 + 4];
    if (v6 < v17 + 40 * v13 && v17 < v6 + 40 * v13)
      goto LABEL_37;
    sub_100004FC8(&qword_100158B88);
    swift_arrayInitWithCopy(v17);
    if (v13)
    {
      v19 = v15[2];
      v20 = __OFADD__(v19, v13);
      v21 = v19 + v13;
      if (v20)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v15[2] = v21;
    }
  }
  else if (v13)
  {
    __break(1u);
    goto LABEL_25;
  }
  swift_bridgeObjectRelease(v5);
  v5 = *(_QWORD *)(inited + 40);
  v6 = *(_QWORD *)(v5 + 16);
  v13 = v15[2];
  v1 = v13 + v6;
  if (__OFADD__(v13, v6))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v22 = v15[3];
  swift_bridgeObjectRetain(*(_QWORD *)(inited + 40));
  if (v1 <= (uint64_t)(v22 >> 1))
  {
    if (v6)
      goto LABEL_15;
    goto LABEL_30;
  }
LABEL_26:
  if (v13 <= v1)
    v28 = v1;
  else
    v28 = v13;
  v15 = sub_100052DB4((_QWORD *)1, v28, 1, v15);
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_30:
    if (!v6)
      goto LABEL_31;
    __break(1u);
    goto LABEL_33;
  }
LABEL_15:
  v23 = v15[2];
  if ((v15[3] >> 1) - v23 < (uint64_t)v6)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v24 = (unint64_t)&v15[5 * v23 + 4];
  if (v5 + 32 < v24 + 40 * v6 && v24 < v5 + 32 + 40 * v6)
    goto LABEL_37;
  sub_100004FC8(&qword_100158B88);
  swift_arrayInitWithCopy(v24);
  if (!v6)
  {
LABEL_31:
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(inited);
    swift_setDeallocating(inited);
    v29 = *(_QWORD *)(inited + 16);
    v30 = sub_100004FC8(&qword_10015CA40);
    swift_arrayDestroy(v12, v29, v30);
    return (uint64_t)v15;
  }
  v26 = v15[2];
  v20 = __OFADD__(v26, v6);
  v27 = v26 + v6;
  if (!v20)
  {
    v15[2] = v27;
    goto LABEL_31;
  }
LABEL_36:
  __break(1u);
LABEL_37:
  v32 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v32, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000FC428()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t inited;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  int64_t v28;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44[120];
  __int128 v45;
  uint64_t v46;
  _UNKNOWN **v47;

  v0 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v46 = v0;
  v47 = &off_10014B908;
  v1 = sub_1001068B0(&v45);
  swift_storeEnumTagMultiPayload(v1, v0, 23);
  v2 = sub_100004FC8(&qword_100158B80);
  v43 = swift_allocObject(v2, 72, 7);
  *(_OWORD *)(v43 + 16) = xmmword_1001164D0;
  sub_10003CDE8(&v45, v43 + 32);
  v46 = v0;
  v47 = &off_10014B908;
  v3 = sub_1001068B0(&v45);
  swift_storeEnumTagMultiPayload(v3, v0, 42);
  v42 = swift_allocObject(v2, 72, 7);
  *(_OWORD *)(v42 + 16) = xmmword_1001164D0;
  sub_10003CDE8(&v45, v42 + 32);
  v46 = v0;
  v47 = &off_10014B908;
  v4 = sub_1001068B0(&v45);
  swift_storeEnumTagMultiPayload(v4, v0, 22);
  v41 = swift_allocObject(v2, 72, 7);
  *(_OWORD *)(v41 + 16) = xmmword_1001164D0;
  sub_10003CDE8(&v45, v41 + 32);
  v46 = v0;
  v47 = &off_10014B908;
  v5 = sub_1001068B0(&v45);
  swift_storeEnumTagMultiPayload(v5, v0, 24);
  v40 = swift_allocObject(v2, 72, 7);
  *(_OWORD *)(v40 + 16) = xmmword_1001164D0;
  sub_10003CDE8(&v45, v40 + 32);
  v46 = v0;
  v47 = &off_10014B908;
  v6 = sub_1001068B0(&v45);
  swift_storeEnumTagMultiPayload(v6, v0, 25);
  v7 = swift_allocObject(v2, 72, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001164D0;
  sub_10003CDE8(&v45, v7 + 32);
  v46 = v0;
  v47 = &off_10014B908;
  v8 = sub_1001068B0(&v45);
  swift_storeEnumTagMultiPayload(v8, v0, 26);
  v9 = swift_allocObject(v2, 72, 7);
  *(_OWORD *)(v9 + 16) = xmmword_1001164D0;
  sub_10003CDE8(&v45, v9 + 32);
  v46 = v0;
  v47 = &off_10014B908;
  v10 = sub_1001068B0(&v45);
  v11 = 32;
  swift_storeEnumTagMultiPayload(v10, v0, 32);
  v12 = swift_allocObject(v2, 72, 7);
  *(_OWORD *)(v12 + 16) = xmmword_1001164D0;
  sub_10003CDE8(&v45, v12 + 32);
  v46 = v0;
  v47 = &off_10014B908;
  v13 = sub_1001068B0(&v45);
  swift_storeEnumTagMultiPayload(v13, v0, 31);
  v14 = swift_allocObject(v2, 72, 7);
  *(_OWORD *)(v14 + 16) = xmmword_1001164D0;
  sub_10003CDE8(&v45, v14 + 32);
  v46 = v0;
  v47 = &off_10014B908;
  v15 = sub_1001068B0(&v45);
  swift_storeEnumTagMultiPayload(v15, v0, 30);
  v16 = swift_allocObject(v2, 72, 7);
  *(_OWORD *)(v16 + 16) = xmmword_1001164D0;
  sub_10003CDE8(&v45, v16 + 32);
  v46 = v0;
  v47 = &off_10014B908;
  v17 = sub_1001068B0(&v45);
  swift_storeEnumTagMultiPayload(v17, v0, 29);
  v18 = swift_allocObject(v2, 72, 7);
  *(_OWORD *)(v18 + 16) = xmmword_1001164D0;
  sub_10003CDE8(&v45, v18 + 32);
  v46 = v0;
  v47 = &off_10014B908;
  v19 = sub_1001068B0(&v45);
  swift_storeEnumTagMultiPayload(v19, v0, 28);
  v20 = swift_allocObject(v2, 72, 7);
  *(_OWORD *)(v20 + 16) = xmmword_1001164D0;
  sub_10003CDE8(&v45, v20 + 32);
  v21 = sub_100004FC8((uint64_t *)&unk_10015CA30);
  inited = swift_initStackObject(v21, v44);
  *(_OWORD *)(inited + 16) = xmmword_10011B540;
  *(_QWORD *)(inited + 32) = v43;
  v23 = inited + 32;
  *(_QWORD *)(inited + 40) = v42;
  *(_QWORD *)(inited + 48) = v41;
  *(_QWORD *)(inited + 56) = v40;
  *(_QWORD *)(inited + 64) = v7;
  *(_QWORD *)(inited + 72) = v9;
  *(_QWORD *)(inited + 80) = v12;
  *(_QWORD *)(inited + 88) = v14;
  *(_QWORD *)(inited + 96) = v16;
  *(_QWORD *)(inited + 104) = v18;
  *(_QWORD *)(inited + 112) = v20;
  swift_bridgeObjectRetain(inited);
  v24 = _swiftEmptyArrayStorage;
  while (1)
  {
    v25 = *(_QWORD *)(inited + v11);
    v26 = *(_QWORD *)(v25 + 16);
    v27 = v24[2];
    v28 = v27 + v26;
    if (__OFADD__(v27, v26))
      break;
    swift_bridgeObjectRetain(*(_QWORD *)(inited + v11));
    isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(v24);
    if ((_DWORD)isUniquelyReferenced_nonNull_native && v28 <= v24[3] >> 1)
    {
      if (*(_QWORD *)(v25 + 16))
        goto LABEL_13;
    }
    else
    {
      if (v27 <= v28)
        v30 = v27 + v26;
      else
        v30 = v27;
      v24 = sub_100052DB4(isUniquelyReferenced_nonNull_native, v30, 1, v24);
      if (*(_QWORD *)(v25 + 16))
      {
LABEL_13:
        v31 = v24[2];
        if ((v24[3] >> 1) - v31 < v26)
          goto LABEL_25;
        v32 = (unint64_t)&v24[5 * v31 + 4];
        if (v25 + 32 < v32 + 40 * v26 && v32 < v25 + 32 + 40 * v26)
          goto LABEL_27;
        sub_100004FC8(&qword_100158B88);
        swift_arrayInitWithCopy(v32);
        if (v26)
        {
          v34 = v24[2];
          v35 = __OFADD__(v34, v26);
          v36 = v34 + v26;
          if (v35)
            goto LABEL_26;
          v24[2] = v36;
        }
        goto LABEL_3;
      }
    }
    if (v26)
      goto LABEL_24;
LABEL_3:
    swift_bridgeObjectRelease(v25);
    v11 += 8;
    if (v11 == 120)
    {
      swift_bridgeObjectRelease(inited);
      swift_setDeallocating(inited);
      v37 = *(_QWORD *)(inited + 16);
      v38 = sub_100004FC8(&qword_10015CA40);
      swift_arrayDestroy(v23, v37, v38);
      return (uint64_t)v24;
    }
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000FC934()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t inited;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  int64_t v18;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  char v30[64];
  __int128 v31;
  uint64_t v32;
  _UNKNOWN **v33;

  v0 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v32 = v0;
  v33 = &off_10014B908;
  v1 = sub_1001068B0(&v31);
  swift_storeEnumTagMultiPayload(v1, v0, 17);
  v2 = sub_100004FC8(&qword_100158B80);
  v3 = swift_allocObject(v2, 72, 7);
  *(_OWORD *)(v3 + 16) = xmmword_1001164D0;
  sub_10003CDE8(&v31, v3 + 32);
  v32 = v0;
  v33 = &off_10014B908;
  v4 = sub_1001068B0(&v31);
  swift_storeEnumTagMultiPayload(v4, v0, 18);
  v5 = swift_allocObject(v2, 72, 7);
  *(_OWORD *)(v5 + 16) = xmmword_1001164D0;
  sub_10003CDE8(&v31, v5 + 32);
  v32 = v0;
  v33 = &off_10014B908;
  v6 = sub_1001068B0(&v31);
  swift_storeEnumTagMultiPayload(v6, v0, 19);
  v7 = swift_allocObject(v2, 72, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001164D0;
  sub_10003CDE8(&v31, v7 + 32);
  v32 = v0;
  v33 = &off_10014B908;
  v8 = sub_1001068B0(&v31);
  swift_storeEnumTagMultiPayload(v8, v0, 20);
  v9 = swift_allocObject(v2, 72, 7);
  *(_OWORD *)(v9 + 16) = xmmword_1001164D0;
  sub_10003CDE8(&v31, v9 + 32);
  v10 = sub_100004FC8((uint64_t *)&unk_10015CA30);
  inited = swift_initStackObject(v10, v30);
  *(_OWORD *)(inited + 16) = xmmword_100118B60;
  *(_QWORD *)(inited + 32) = v3;
  v12 = inited + 32;
  *(_QWORD *)(inited + 40) = v5;
  *(_QWORD *)(inited + 48) = v7;
  *(_QWORD *)(inited + 56) = v9;
  swift_bridgeObjectRetain(inited);
  v13 = _swiftEmptyArrayStorage;
  v14 = 32;
  while (1)
  {
    v15 = *(_QWORD *)(inited + v14);
    v16 = *(_QWORD *)(v15 + 16);
    v17 = v13[2];
    v18 = v17 + v16;
    if (__OFADD__(v17, v16))
      break;
    swift_bridgeObjectRetain(*(_QWORD *)(inited + v14));
    isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(v13);
    if ((_DWORD)isUniquelyReferenced_nonNull_native && v18 <= v13[3] >> 1)
    {
      if (*(_QWORD *)(v15 + 16))
        goto LABEL_13;
    }
    else
    {
      if (v17 <= v18)
        v20 = v17 + v16;
      else
        v20 = v17;
      v13 = sub_100052DB4(isUniquelyReferenced_nonNull_native, v20, 1, v13);
      if (*(_QWORD *)(v15 + 16))
      {
LABEL_13:
        v21 = v13[2];
        if ((v13[3] >> 1) - v21 < v16)
          goto LABEL_25;
        v22 = (unint64_t)&v13[5 * v21 + 4];
        if (v15 + 32 < v22 + 40 * v16 && v22 < v15 + 32 + 40 * v16)
          goto LABEL_27;
        sub_100004FC8(&qword_100158B88);
        swift_arrayInitWithCopy(v22);
        if (v16)
        {
          v24 = v13[2];
          v25 = __OFADD__(v24, v16);
          v26 = v24 + v16;
          if (v25)
            goto LABEL_26;
          v13[2] = v26;
        }
        goto LABEL_3;
      }
    }
    if (v16)
      goto LABEL_24;
LABEL_3:
    swift_bridgeObjectRelease(v15);
    v14 += 8;
    if (v14 == 64)
    {
      swift_bridgeObjectRelease(inited);
      swift_setDeallocating(inited);
      v27 = *(_QWORD *)(inited + 16);
      v28 = sub_100004FC8(&qword_10015CA40);
      swift_arrayDestroy(v12, v27, v28);
      return (uint64_t)v13;
    }
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000FCC64(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t inited;
  int64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  int64_t v43;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t result;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  _QWORD *v57;
  __int128 v58;
  char v59[40];
  char v60[64];
  __int128 v61;
  uint64_t v62;
  _UNKNOWN **v63;

  v1 = a1;
  v2 = *a1;
  v3 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v62 = v3;
  v63 = &off_10014B908;
  v4 = sub_1001068B0(&v61);
  swift_storeEnumTagMultiPayload(v4, v3, 33);
  v5 = sub_100004FC8(&qword_100158B80);
  v6 = swift_allocObject(v5, 72, 7);
  v58 = xmmword_1001164D0;
  *(_OWORD *)(v6 + 16) = xmmword_1001164D0;
  sub_10003CDE8(&v61, v6 + 32);
  if (objc_msgSend((id)objc_opt_self(SOSManager), "deviceSupportsSOS"))
  {
    v56 = v6;
    v62 = v3;
    v63 = &off_10014B908;
    v7 = sub_1001068B0(&v61);
    swift_storeEnumTagMultiPayload(v7, v3, 34);
    v8 = swift_allocObject(v5, 72, 7);
    *(_OWORD *)(v8 + 16) = v58;
    v9 = v8 + 32;
    sub_10003CDE8(&v61, v8 + 32);
    v10 = sub_100004FC8((uint64_t *)&unk_10015CA30);
    inited = swift_initStackObject(v10, v59);
    *(_OWORD *)(inited + 16) = v58;
    *(_QWORD *)(inited + 32) = v8;
    v12 = *(_QWORD *)(v8 + 16);
    swift_bridgeObjectRetain(inited);
    swift_bridgeObjectRetain(v8);
    v13 = sub_100052DB4(0, v12, 1, _swiftEmptyArrayStorage);
    if (*(_QWORD *)(v8 + 16))
    {
      v14 = v13[2];
      if ((v13[3] >> 1) - v14 < v12)
        goto LABEL_42;
      v55 = v1;
      v15 = (unint64_t)&v13[5 * v14 + 4];
      if (v9 < v15 + 40 * v12 && v15 < v9 + 40 * v12)
        goto LABEL_44;
      v17 = v13;
      sub_100004FC8(&qword_100158B88);
      swift_arrayInitWithCopy(v15);
      v6 = v56;
      v1 = v55;
      if (v12)
      {
        v18 = v17[2];
        v19 = __OFADD__(v18, v12);
        v20 = v18 + v12;
        if (v19)
          goto LABEL_43;
        v17[2] = v20;
      }
    }
    else
    {
      v17 = v13;
      v6 = v56;
      if (v12)
        goto LABEL_41;
    }
    v57 = v17;
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(inited);
    swift_setDeallocating(inited);
    v21 = *(_QWORD *)(inited + 16);
    v22 = sub_100004FC8(&qword_10015CA40);
    swift_arrayDestroy(inited + 32, v21, v22);
  }
  else
  {
    v57 = _swiftEmptyArrayStorage;
  }
  v62 = v2;
  v63 = &off_10014DED0;
  *(_QWORD *)&v61 = v1;
  v23 = type metadata accessor for ExposureNotificationsItemProvider(0);
  v24 = swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
  v25 = sub_1000D2B68((uint64_t)&v61, v2);
  __chkstk_darwin(v25);
  v27 = v1;
  v28 = (uint64_t *)((char *)&v54 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v29 + 16))(v28);
  v30 = *v28;
  v31 = (_QWORD *)(v24 + OBJC_IVAR____TtC11SettingsApp33ExposureNotificationsItemProvider_invalidator);
  v31[3] = v2;
  v31[4] = &off_10014DED0;
  *v31 = v30;
  swift_storeEnumTagMultiPayload(v24 + OBJC_IVAR____TtC11SettingsApp33ExposureNotificationsItemProvider_id, v3, 35);
  *(_QWORD *)(v24 + OBJC_IVAR____TtC11SettingsApp33ExposureNotificationsItemProvider_enManager) = 0;
  *(_BYTE *)(v24 + OBJC_IVAR____TtC11SettingsApp33ExposureNotificationsItemProvider_shouldShowExposureNotifications) = 0;
  swift_retain(v27);
  sub_100005474(&v61);
  v62 = v23;
  v63 = &off_100149908;
  *(_QWORD *)&v61 = v24;
  v32 = swift_allocObject(v5, 72, 7);
  *(_OWORD *)(v32 + 16) = v58;
  sub_10003CDE8(&v61, v32 + 32);
  v62 = v3;
  v63 = &off_10014B908;
  v33 = sub_1001068B0(&v61);
  swift_storeEnumTagMultiPayload(v33, v3, 37);
  v34 = swift_allocObject(v5, 72, 7);
  *(_OWORD *)(v34 + 16) = v58;
  sub_10003CDE8(&v61, v34 + 32);
  v35 = sub_100004FC8((uint64_t *)&unk_10015CA30);
  v36 = swift_initStackObject(v35, v60);
  *(_OWORD *)(v36 + 16) = xmmword_100118B60;
  *(_QWORD *)(v36 + 32) = v6;
  v37 = v36 + 32;
  *(_QWORD *)(v36 + 40) = v57;
  *(_QWORD *)(v36 + 48) = v32;
  *(_QWORD *)(v36 + 56) = v34;
  swift_bridgeObjectRetain(v36);
  v38 = _swiftEmptyArrayStorage;
  v39 = 32;
  while (1)
  {
    v40 = *(_QWORD *)(v36 + v39);
    v41 = *(_QWORD *)(v40 + 16);
    v42 = v38[2];
    v43 = v42 + v41;
    if (__OFADD__(v42, v41))
      break;
    swift_bridgeObjectRetain(*(_QWORD *)(v36 + v39));
    isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(v38);
    if ((_DWORD)isUniquelyReferenced_nonNull_native && v43 <= v38[3] >> 1)
    {
      if (*(_QWORD *)(v40 + 16))
        goto LABEL_27;
    }
    else
    {
      if (v42 <= v43)
        v45 = v42 + v41;
      else
        v45 = v42;
      v38 = sub_100052DB4(isUniquelyReferenced_nonNull_native, v45, 1, v38);
      if (*(_QWORD *)(v40 + 16))
      {
LABEL_27:
        v46 = v38[2];
        if ((v38[3] >> 1) - v46 < v41)
          goto LABEL_39;
        v47 = (unint64_t)&v38[5 * v46 + 4];
        if (v40 + 32 < v47 + 40 * v41 && v47 < v40 + 32 + 40 * v41)
          goto LABEL_44;
        sub_100004FC8(&qword_100158B88);
        swift_arrayInitWithCopy(v47);
        if (v41)
        {
          v49 = v38[2];
          v19 = __OFADD__(v49, v41);
          v50 = v49 + v41;
          if (v19)
            goto LABEL_40;
          v38[2] = v50;
        }
        goto LABEL_17;
      }
    }
    if (v41)
      goto LABEL_38;
LABEL_17:
    swift_bridgeObjectRelease(v40);
    v39 += 8;
    if (v39 == 64)
    {
      swift_bridgeObjectRelease(v36);
      swift_setDeallocating(v36);
      v51 = *(_QWORD *)(v36 + 16);
      v52 = sub_100004FC8(&qword_10015CA40);
      swift_arrayDestroy(v37, v51, v52);
      return (uint64_t)v38;
    }
  }
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000FD214(uint64_t *a1)
{
  int64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t inited;
  uint64_t v14;
  int64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  char v34;
  _BYTE v35[48];
  __int128 v36;
  uint64_t v37;
  _UNKNOWN **v38;

  v3 = sub_1000FD590(a1);
  v4 = type metadata accessor for StaticPrimarySettingsListSectionProvider();
  v5 = swift_allocObject(v4, 48, 7);
  *(_OWORD *)(v5 + 16) = xmmword_10011B500;
  *(_WORD *)(v5 + 32) = 2;
  *(_QWORD *)(v5 + 40) = v3;
  v37 = v4;
  v38 = &off_10014C9F0;
  *(_QWORD *)&v36 = v5;
  v6 = sub_100004FC8((uint64_t *)&unk_10015CA20);
  v7 = swift_allocObject(v6, 72, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001164D0;
  v8 = v7 + 32;
  sub_10003CDE8(&v36, v7 + 32);
  v9 = sub_1000FD9AC(a1);
  v10 = swift_allocObject(v4, 48, 7);
  *(_OWORD *)(v10 + 16) = xmmword_10011B500;
  *(_WORD *)(v10 + 32) = 258;
  *(_QWORD *)(v10 + 40) = v9;
  v37 = v4;
  v38 = &off_10014C9F0;
  *(_QWORD *)&v36 = v10;
  v11 = swift_allocObject(v6, 72, 7);
  *(_OWORD *)(v11 + 16) = xmmword_1001164D0;
  sub_10003CDE8(&v36, v11 + 32);
  v12 = sub_100004FC8(&qword_10015CA48);
  inited = swift_initStackObject(v12, v35);
  *(_OWORD *)(inited + 16) = xmmword_100115BA0;
  *(_QWORD *)(inited + 32) = v7;
  v14 = inited + 32;
  *(_QWORD *)(inited + 40) = v11;
  v15 = *(_QWORD *)(v7 + 16);
  swift_bridgeObjectRetain(inited);
  swift_bridgeObjectRetain(v7);
  v16 = sub_100052DA0(0, v15, 1, _swiftEmptyArrayStorage);
  v17 = v16;
  if (*(_QWORD *)(v7 + 16))
  {
    v18 = v16[2];
    if ((v16[3] >> 1) - v18 < v15)
    {
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    v19 = (unint64_t)&v16[5 * v18 + 4];
    if (v8 < v19 + 40 * v15 && v19 < v8 + 40 * v15)
      goto LABEL_37;
    sub_100004FC8(&qword_100157368);
    swift_arrayInitWithCopy(v19);
    if (v15)
    {
      v21 = v17[2];
      v22 = __OFADD__(v21, v15);
      v23 = v21 + v15;
      if (v22)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v17[2] = v23;
    }
  }
  else if (v15)
  {
    __break(1u);
    goto LABEL_25;
  }
  swift_bridgeObjectRelease(v7);
  v7 = *(_QWORD *)(inited + 40);
  v8 = *(_QWORD *)(v7 + 16);
  v15 = v17[2];
  v1 = v15 + v8;
  if (__OFADD__(v15, v8))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v24 = v17[3];
  swift_bridgeObjectRetain(*(_QWORD *)(inited + 40));
  if (v1 <= (uint64_t)(v24 >> 1))
  {
    if (v8)
      goto LABEL_15;
    goto LABEL_30;
  }
LABEL_26:
  if (v15 <= v1)
    v30 = v1;
  else
    v30 = v15;
  v17 = sub_100052DA0((_QWORD *)1, v30, 1, v17);
  if (!*(_QWORD *)(v7 + 16))
  {
LABEL_30:
    if (!v8)
      goto LABEL_31;
    __break(1u);
    goto LABEL_33;
  }
LABEL_15:
  v25 = v17[2];
  if ((v17[3] >> 1) - v25 < (uint64_t)v8)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v26 = (unint64_t)&v17[5 * v25 + 4];
  if (v7 + 32 < v26 + 40 * v8 && v26 < v7 + 32 + 40 * v8)
    goto LABEL_37;
  sub_100004FC8(&qword_100157368);
  swift_arrayInitWithCopy(v26);
  if (!v8)
  {
LABEL_31:
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(inited);
    swift_setDeallocating(inited);
    v31 = *(_QWORD *)(inited + 16);
    v32 = sub_100004FC8(&qword_10015CA50);
    swift_arrayDestroy(v14, v31, v32);
    return (uint64_t)v17;
  }
  v28 = v17[2];
  v22 = __OFADD__(v28, v8);
  v29 = v28 + v8;
  if (!v22)
  {
    v17[2] = v29;
    goto LABEL_31;
  }
LABEL_36:
  __break(1u);
LABEL_37:
  v34 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v34, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000FD590(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t inited;
  int64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  char v36;
  __int128 v37;
  _BYTE v38[48];
  __int128 v39;
  uint64_t v40;
  _UNKNOWN **v41;

  v2 = *a1;
  v3 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v40 = v3;
  v41 = &off_10014B908;
  v4 = sub_1001068B0(&v39);
  swift_storeEnumTagMultiPayload(v4, v3, 38);
  v5 = sub_100004FC8(&qword_100158B80);
  v6 = swift_allocObject(v5, 72, 7);
  v37 = xmmword_1001164D0;
  *(_OWORD *)(v6 + 16) = xmmword_1001164D0;
  v7 = v6 + 32;
  sub_10003CDE8(&v39, v6 + 32);
  v40 = v2;
  v41 = &off_10014DED0;
  *(_QWORD *)&v39 = a1;
  v8 = type metadata accessor for AppInstallationListItemProvider(0);
  v9 = swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  v10 = sub_1000D2B68((uint64_t)&v39, v2);
  __chkstk_darwin(v10);
  v12 = (uint64_t *)&v38[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(uint64_t *))(v13 + 16))(v12);
  v14 = *v12;
  v15 = (_QWORD *)(v9 + OBJC_IVAR____TtC11SettingsApp31AppInstallationListItemProvider_invalidator);
  v15[3] = v2;
  v15[4] = &off_10014DED0;
  *v15 = v14;
  *(_BYTE *)(v9 + 16) = 0;
  *(_QWORD *)(v9 + 24) = &_swiftEmptySetSingleton;
  swift_storeEnumTagMultiPayload(v9 + OBJC_IVAR____TtC11SettingsApp31AppInstallationListItemProvider_id, v3, 39);
  swift_retain(a1);
  sub_100005474(&v39);
  v40 = v8;
  v41 = &off_10014AF40;
  *(_QWORD *)&v39 = v9;
  v16 = swift_allocObject(v5, 72, 7);
  *(_OWORD *)(v16 + 16) = v37;
  sub_10003CDE8(&v39, v16 + 32);
  v17 = sub_100004FC8((uint64_t *)&unk_10015CA30);
  inited = swift_initStackObject(v17, v38);
  *(_OWORD *)(inited + 16) = xmmword_100115BA0;
  *(_QWORD *)(inited + 32) = v6;
  *(_QWORD *)(inited + 40) = v16;
  v19 = *(_QWORD *)(v6 + 16);
  swift_bridgeObjectRetain(inited);
  swift_bridgeObjectRetain(v6);
  v20 = sub_100052DB4(0, v19, 1, _swiftEmptyArrayStorage);
  v21 = v20;
  if (*(_QWORD *)(v6 + 16))
  {
    v22 = v20[2];
    if ((v20[3] >> 1) - v22 < v19)
    {
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v23 = (unint64_t)&v20[5 * v22 + 4];
    if (v7 < v23 + 40 * v19 && v23 < v7 + 40 * v19)
      goto LABEL_31;
    sub_100004FC8(&qword_100158B88);
    swift_arrayInitWithCopy(v23);
    if (v19)
    {
      v24 = v21[2];
      v25 = __OFADD__(v24, v19);
      v26 = v24 + v19;
      if (v25)
      {
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
      v21[2] = v26;
    }
  }
  else if (v19)
  {
    __break(1u);
    goto LABEL_19;
  }
  swift_bridgeObjectRelease(v6);
  v6 = *(_QWORD *)(inited + 40);
  v7 = *(_QWORD *)(v6 + 16);
  v19 = v21[2];
  v8 = v19 + v7;
  if (__OFADD__(v19, v7))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v27 = v21[3];
  swift_bridgeObjectRetain(*(_QWORD *)(inited + 40));
  if (v8 <= (uint64_t)(v27 >> 1))
  {
    if (v7)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_20:
  if (v19 <= v8)
    v32 = v8;
  else
    v32 = v19;
  v21 = sub_100052DB4((_QWORD *)1, v32, 1, v21);
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_24:
    if (!v7)
      goto LABEL_25;
    __break(1u);
    goto LABEL_27;
  }
LABEL_12:
  v28 = v21[2];
  if ((v21[3] >> 1) - v28 < (uint64_t)v7)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v29 = (unint64_t)&v21[5 * v28 + 4];
  if (v6 + 32 < v29 + 40 * v7 && v29 < v6 + 32 + 40 * v7)
    goto LABEL_31;
  sub_100004FC8(&qword_100158B88);
  swift_arrayInitWithCopy(v29);
  if (!v7)
  {
LABEL_25:
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(inited);
    swift_setDeallocating(inited);
    v33 = *(_QWORD *)(inited + 16);
    v34 = sub_100004FC8(&qword_10015CA40);
    swift_arrayDestroy(inited + 32, v33, v34);
    return (uint64_t)v21;
  }
  v30 = v21[2];
  v25 = __OFADD__(v30, v7);
  v31 = v30 + v7;
  if (!v25)
  {
    v21[2] = v31;
    goto LABEL_25;
  }
LABEL_30:
  __break(1u);
LABEL_31:
  v36 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v36, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000FD9AC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void (*v17)(char *);
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t inited;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  int64_t v38;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t result;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  char v57[64];
  __int128 v58;
  uint64_t v59;
  _UNKNOWN **v60;

  v1 = *a1;
  v3 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v59 = v3;
  v60 = &off_10014B908;
  v4 = sub_1001068B0(&v58);
  v52 = v3;
  swift_storeEnumTagMultiPayload(v4, v3, 43);
  v5 = sub_100004FC8(&qword_100158B80);
  v6 = swift_allocObject(v5, 72, 7);
  v56 = xmmword_1001164D0;
  v55 = v6;
  *(_OWORD *)(v6 + 16) = xmmword_1001164D0;
  sub_10003CDE8(&v58, v6 + 32);
  v51 = a1;
  v7 = sub_1000F86F4();
  v8 = type metadata accessor for iCloudListItemProvider(0);
  v9 = swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  swift_storeEnumTagMultiPayload(v9 + OBJC_IVAR____TtC11SettingsApp22iCloudListItemProvider_id, v3, 44);
  *(_QWORD *)(v9 + OBJC_IVAR____TtC11SettingsApp22iCloudListItemProvider_primaryAppleAccountStatusObserver) = v7;
  v59 = v8;
  v60 = &off_10014C4A8;
  *(_QWORD *)&v58 = v9;
  v53 = v5;
  v10 = swift_allocObject(v5, 72, 7);
  v54 = v10;
  *(_OWORD *)(v10 + 16) = v56;
  sub_10003CDE8(&v58, v10 + 32);
  v59 = v1;
  v60 = &off_10014DED0;
  *(_QWORD *)&v58 = a1;
  v11 = type metadata accessor for WalletAndApplePayListItemProvider(0);
  v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  v13 = sub_1000D2B68((uint64_t)&v58, v1);
  v14 = *(_QWORD *)(*(_QWORD *)(v1 - 8) + 64);
  __chkstk_darwin(v13);
  v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
  v17 = *(void (**)(char *))(v16 + 16);
  v17((char *)&v50 - v15);
  v18 = *(uint64_t *)((char *)&v50 - v15);
  v19 = (_QWORD *)(v12 + OBJC_IVAR____TtC11SettingsApp33WalletAndApplePayListItemProvider_invalidator);
  v19[3] = v1;
  v19[4] = &off_10014DED0;
  *v19 = v18;
  *(_BYTE *)(v12 + 16) = 0;
  *(_QWORD *)(v12 + 24) = &_swiftEmptySetSingleton;
  v20 = v52;
  swift_storeEnumTagMultiPayload(v12 + OBJC_IVAR____TtC11SettingsApp33WalletAndApplePayListItemProvider_id, v52, 40);
  v21 = v51;
  swift_retain(v51);
  sub_100005474(&v58);
  v59 = v11;
  v60 = &off_1001484D0;
  *(_QWORD *)&v58 = v12;
  v22 = swift_allocObject(v5, 72, 7);
  *(_OWORD *)(v22 + 16) = v56;
  sub_10003CDE8(&v58, v22 + 32);
  v59 = v1;
  v60 = &off_10014DED0;
  *(_QWORD *)&v58 = v21;
  v23 = v21;
  v24 = type metadata accessor for ClassKitListItemProvider(0);
  v25 = swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  v26 = sub_1000D2B68((uint64_t)&v58, v1);
  __chkstk_darwin(v26);
  v17((char *)&v50 - v15);
  v27 = *(uint64_t *)((char *)&v50 - v15);
  v28 = (_QWORD *)(v25 + OBJC_IVAR____TtC11SettingsApp24ClassKitListItemProvider_invalidator);
  v28[3] = v1;
  v28[4] = &off_10014DED0;
  *v28 = v27;
  swift_storeEnumTagMultiPayload(v25 + OBJC_IVAR____TtC11SettingsApp24ClassKitListItemProvider_id, v20, 41);
  *(_BYTE *)(v25 + OBJC_IVAR____TtC11SettingsApp24ClassKitListItemProvider_showClassKit) = 0;
  *(_QWORD *)(v25 + OBJC_IVAR____TtC11SettingsApp24ClassKitListItemProvider_cancellables) = &_swiftEmptySetSingleton;
  swift_retain(v23);
  sub_100005474(&v58);
  v59 = v24;
  v60 = &off_100149090;
  *(_QWORD *)&v58 = v25;
  v29 = swift_allocObject(v53, 72, 7);
  *(_OWORD *)(v29 + 16) = v56;
  sub_10003CDE8(&v58, v29 + 32);
  v30 = sub_100004FC8((uint64_t *)&unk_10015CA30);
  inited = swift_initStackObject(v30, v57);
  *(_OWORD *)(inited + 16) = xmmword_100118B60;
  *(_QWORD *)(inited + 32) = v55;
  v32 = inited + 32;
  *(_QWORD *)(inited + 40) = v54;
  *(_QWORD *)(inited + 48) = v22;
  *(_QWORD *)(inited + 56) = v29;
  swift_bridgeObjectRetain(inited);
  v33 = _swiftEmptyArrayStorage;
  v34 = 32;
  while (1)
  {
    v35 = *(_QWORD *)(inited + v34);
    v36 = *(_QWORD *)(v35 + 16);
    v37 = v33[2];
    v38 = v37 + v36;
    if (__OFADD__(v37, v36))
      break;
    swift_bridgeObjectRetain(*(_QWORD *)(inited + v34));
    isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(v33);
    if ((_DWORD)isUniquelyReferenced_nonNull_native && v38 <= v33[3] >> 1)
    {
      if (*(_QWORD *)(v35 + 16))
        goto LABEL_13;
    }
    else
    {
      if (v37 <= v38)
        v40 = v37 + v36;
      else
        v40 = v37;
      v33 = sub_100052DB4(isUniquelyReferenced_nonNull_native, v40, 1, v33);
      if (*(_QWORD *)(v35 + 16))
      {
LABEL_13:
        v41 = v33[2];
        if ((v33[3] >> 1) - v41 < v36)
          goto LABEL_25;
        v42 = (unint64_t)&v33[5 * v41 + 4];
        if (v35 + 32 < v42 + 40 * v36 && v42 < v35 + 32 + 40 * v36)
          goto LABEL_27;
        sub_100004FC8(&qword_100158B88);
        swift_arrayInitWithCopy(v42);
        if (v36)
        {
          v44 = v33[2];
          v45 = __OFADD__(v44, v36);
          v46 = v44 + v36;
          if (v45)
            goto LABEL_26;
          v33[2] = v46;
        }
        goto LABEL_3;
      }
    }
    if (v36)
      goto LABEL_24;
LABEL_3:
    swift_bridgeObjectRelease(v35);
    v34 += 8;
    if (v34 == 64)
    {
      swift_bridgeObjectRelease(inited);
      swift_setDeallocating(inited);
      v47 = *(_QWORD *)(inited + 16);
      v48 = sub_100004FC8(&qword_10015CA40);
      swift_arrayDestroy(v32, v47, v48);
      return (uint64_t)v33;
    }
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000FDEE4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  id v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t inited;
  int64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  unsigned int v25;
  id v26;
  void *v27;
  char cellularDataCapability;
  id v29;
  void *v30;
  int telephonyCapability;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  unsigned int v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  id v73;
  id v74;
  uint64_t v75;
  void *v76;
  id v77;
  id v78;
  uint64_t v79;
  void *v80;
  id v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int64_t v89;
  int64_t v90;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t result;
  _QWORD *v101;
  char *v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  char v106[40];
  char v107[40];
  char v108[40];
  char v109[72];
  __int128 v110;
  _QWORD *v111;
  _UNKNOWN **v112;

  *(_QWORD *)&v105 = a1;
  v1 = (_QWORD *)type metadata accessor for PrimarySettingsListItemIdentifier(0);
  __chkstk_darwin(v1);
  v102 = (char *)&v101 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = (void *)objc_opt_self(UIDevice);
  v4 = objc_msgSend(v3, "currentDevice");
  v5 = objc_msgSend(v4, "sf_isDeveloperModeEnabled");

  v6 = (uint64_t)&unk_100116000;
  if (v5)
  {
    v111 = v1;
    v112 = &off_10014B908;
    v7 = sub_1001068B0(&v110);
    swift_storeEnumTagMultiPayload(v7, v1, 45);
    v8 = sub_100004FC8(&qword_100158B80);
    v9 = swift_allocObject(v8, 72, 7);
    v104 = xmmword_1001164D0;
    *(_OWORD *)(v9 + 16) = xmmword_1001164D0;
    v10 = v9 + 32;
    sub_10003CDE8(&v110, v9 + 32);
    v11 = sub_100004FC8((uint64_t *)&unk_10015CA30);
    inited = swift_initStackObject(v11, v106);
    *(_OWORD *)(inited + 16) = v104;
    *(_QWORD *)(inited + 32) = v9;
    v13 = *(_QWORD *)(v9 + 16);
    swift_bridgeObjectRetain(inited);
    swift_bridgeObjectRetain(v9);
    v14 = sub_100052DB4(0, v13, 1, _swiftEmptyArrayStorage);
    v15 = *(_QWORD *)(v9 + 16);
    *(_QWORD *)&v104 = v14;
    if (v15)
    {
      v16 = v14[2];
      if ((v14[3] >> 1) - v16 < v13)
      {
LABEL_72:
        __break(1u);
LABEL_73:
        __break(1u);
        goto LABEL_74;
      }
      v17 = (unint64_t)&v14[5 * v16 + 4];
      if (v10 < v17 + 40 * v13 && v17 < v10 + 40 * v13)
        goto LABEL_80;
      sub_100004FC8(&qword_100158B88);
      swift_arrayInitWithCopy(v17);
      v6 = (uint64_t)&unk_100116000;
      if (v13)
      {
        v19 = *(_QWORD *)(v104 + 16);
        v20 = __OFADD__(v19, v13);
        v21 = v19 + v13;
        if (v20)
        {
LABEL_75:
          __break(1u);
LABEL_76:
          __break(1u);
          goto LABEL_77;
        }
        *(_QWORD *)(v104 + 16) = v21;
      }
    }
    else if (v13)
    {
      __break(1u);
LABEL_70:
      __break(1u);
      goto LABEL_71;
    }
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(inited);
    swift_setDeallocating(inited);
    v22 = *(_QWORD *)(inited + 16);
    v23 = sub_100004FC8(&qword_10015CA40);
    swift_arrayDestroy(inited + 32, v22, v23);
  }
  else
  {
    *(_QWORD *)&v104 = _swiftEmptyArrayStorage;
  }
  v24 = objc_msgSend(v3, "currentDevice");
  v25 = objc_msgSend(v24, "sf_isCarrierInstall");

  if (!v25)
    goto LABEL_27;
  v26 = (id)MobileGestalt_get_current_device();
  if (!v26)
  {
LABEL_78:
    __break(1u);
    goto LABEL_79;
  }
  v27 = v26;
  cellularDataCapability = MobileGestalt_get_cellularDataCapability(v26);

  if ((cellularDataCapability & 1) != 0)
    goto LABEL_20;
  v29 = (id)MobileGestalt_get_current_device();
  if (v29)
  {
    v30 = v29;
    telephonyCapability = MobileGestalt_get_telephonyCapability();

    if (telephonyCapability)
    {
LABEL_20:
      v111 = v1;
      v112 = &off_10014B908;
      v32 = sub_1001068B0(&v110);
      swift_storeEnumTagMultiPayload(v32, v1, 46);
      v33 = sub_100004FC8(&qword_100158B80);
      v34 = swift_allocObject(v33, 72, 7);
      v103 = xmmword_1001164D0;
      *(_OWORD *)(v34 + 16) = xmmword_1001164D0;
      v35 = v34 + 32;
      sub_10003CDE8(&v110, v34 + 32);
      v36 = sub_100004FC8((uint64_t *)&unk_10015CA30);
      v37 = swift_initStackObject(v36, v107);
      *(_OWORD *)(v37 + 16) = v103;
      *(_QWORD *)(v37 + 32) = v34;
      v38 = *(_QWORD *)(v34 + 16);
      swift_bridgeObjectRetain(v37);
      swift_bridgeObjectRetain(v34);
      v39 = sub_100052DB4(0, v38, 1, _swiftEmptyArrayStorage);
      v40 = v39;
      if (*(_QWORD *)(v34 + 16))
      {
        v41 = v39[2];
        if ((v39[3] >> 1) - v41 < v38)
        {
LABEL_74:
          __break(1u);
          goto LABEL_75;
        }
        v42 = (unint64_t)&v39[5 * v41 + 4];
        if (v35 < v42 + 40 * v38 && v42 < v35 + 40 * v38)
          goto LABEL_80;
        sub_100004FC8(&qword_100158B88);
        swift_arrayInitWithCopy(v42);
        if (v38)
        {
          v43 = v40[2];
          v20 = __OFADD__(v43, v38);
          v44 = v43 + v38;
          if (v20)
          {
LABEL_77:
            __break(1u);
            goto LABEL_78;
          }
          v40[2] = v44;
        }
      }
      else if (v38)
      {
LABEL_71:
        __break(1u);
        goto LABEL_72;
      }
      swift_bridgeObjectRelease(v34);
      swift_bridgeObjectRelease(v37);
      swift_setDeallocating(v37);
      v45 = *(_QWORD *)(v37 + 16);
      v46 = sub_100004FC8(&qword_10015CA40);
      swift_arrayDestroy(v37 + 32, v45, v46);
      v6 = (uint64_t)&unk_100116000;
      goto LABEL_30;
    }
LABEL_27:
    v40 = _swiftEmptyArrayStorage;
LABEL_30:
    v101 = v40;
    v47 = objc_msgSend(v3, "currentDevice", v40);
    v48 = objc_msgSend(v47, "sf_isInternalInstall");

    if (!v48)
    {
      *(_QWORD *)&v103 = _swiftEmptyArrayStorage;
      v60 = v105;
      v61 = (uint64_t)v102;
LABEL_41:
      swift_storeEnumTagMultiPayload(v61, v1, 48);
      v66 = qword_100156CF0;
      swift_retain(v60);
      if (v66 != -1)
LABEL_68:
        swift_once(&qword_100156CF0, sub_1000A90C8);
      v67 = (id)qword_10015D390;
      v68 = sub_100105478(v61, v60, 0xD000000000000014, 0x8000000100122B40, v67, 1);

      v69 = type metadata accessor for DefaultsObservingPrimarySettingsListItemProvider(0);
      v111 = (_QWORD *)v69;
      v112 = &off_10014D6F8;
      *(_QWORD *)&v110 = v68;
      v70 = sub_100004FC8(&qword_100158B80);
      v71 = swift_allocObject(v70, 72, 7);
      v102 = (char *)v71;
      v105 = *(_OWORD *)(v6 + 1232);
      *(_OWORD *)(v71 + 16) = v105;
      sub_10003CDE8(&v110, v71 + 32);
      swift_storeEnumTagMultiPayload(v61, v1, 49);
      v72 = (void *)qword_10015D390;
      swift_retain(v60);
      v73 = v72;
      v74 = sub_100105478(v61, v60, 0xD00000000000001ALL, 0x8000000100122B60, v73, 1);

      v111 = (_QWORD *)v69;
      v112 = &off_10014D6F8;
      *(_QWORD *)&v110 = v74;
      v75 = swift_allocObject(v70, 72, 7);
      *(_OWORD *)(v75 + 16) = v105;
      sub_10003CDE8(&v110, v75 + 32);
      swift_storeEnumTagMultiPayload(v61, v1, 50);
      v76 = (void *)qword_10015D390;
      swift_retain(v60);
      v77 = v76;
      v78 = sub_100105478(v61, v60, 0xD000000000000015, 0x8000000100122B80, v77, 1);

      v111 = (_QWORD *)v69;
      v112 = &off_10014D6F8;
      *(_QWORD *)&v110 = v78;
      v79 = swift_allocObject(v70, 72, 7);
      *(_OWORD *)(v79 + 16) = v105;
      sub_10003CDE8(&v110, v79 + 32);
      swift_storeEnumTagMultiPayload(v61, v1, 51);
      v80 = (void *)qword_10015D390;
      swift_retain(v60);
      v81 = v80;
      v82 = sub_100105478(v61, v60, 0xD000000000000019, 0x8000000100122BA0, v81, 1);

      v111 = (_QWORD *)v69;
      v112 = &off_10014D6F8;
      *(_QWORD *)&v110 = v82;
      v83 = swift_allocObject(v70, 72, 7);
      *(_OWORD *)(v83 + 16) = v105;
      sub_10003CDE8(&v110, v83 + 32);
      v84 = sub_100004FC8((uint64_t *)&unk_10015CA30);
      v85 = swift_initStackObject(v84, v109);
      *(_OWORD *)(v85 + 16) = xmmword_10011B550;
      *(_QWORD *)(v85 + 32) = v104;
      v60 = v85 + 32;
      v86 = v103;
      *(_QWORD *)(v85 + 40) = v101;
      *(_QWORD *)(v85 + 48) = v86;
      *(_QWORD *)(v85 + 56) = v102;
      *(_QWORD *)(v85 + 64) = v75;
      *(_QWORD *)(v85 + 72) = v79;
      *(_QWORD *)(v85 + 80) = v83;
      swift_bridgeObjectRetain(v85);
      v1 = _swiftEmptyArrayStorage;
      v87 = 32;
      v6 = 40;
      while (1)
      {
        v88 = *(_QWORD *)(v85 + v87);
        v61 = *(_QWORD *)(v88 + 16);
        v89 = v1[2];
        v90 = v89 + v61;
        if (__OFADD__(v89, v61))
        {
          __break(1u);
LABEL_65:
          __break(1u);
LABEL_66:
          __break(1u);
LABEL_67:
          __break(1u);
          goto LABEL_68;
        }
        swift_bridgeObjectRetain(*(_QWORD *)(v85 + v87));
        isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(v1);
        if ((_DWORD)isUniquelyReferenced_nonNull_native && v90 <= v1[3] >> 1)
        {
          if (*(_QWORD *)(v88 + 16))
            goto LABEL_54;
        }
        else
        {
          if (v89 <= v90)
            v92 = v89 + v61;
          else
            v92 = v89;
          v1 = sub_100052DB4(isUniquelyReferenced_nonNull_native, v92, 1, v1);
          if (*(_QWORD *)(v88 + 16))
          {
LABEL_54:
            v93 = v1[2];
            if ((v1[3] >> 1) - v93 < v61)
              goto LABEL_66;
            v94 = (unint64_t)&v1[5 * v93 + 4];
            if (v88 + 32 < v94 + 40 * v61 && v94 < v88 + 32 + 40 * v61)
              goto LABEL_80;
            sub_100004FC8(&qword_100158B88);
            swift_arrayInitWithCopy(v94);
            if (v61)
            {
              v96 = v1[2];
              v20 = __OFADD__(v96, v61);
              v97 = v96 + v61;
              if (v20)
                goto LABEL_67;
              v1[2] = v97;
            }
            goto LABEL_44;
          }
        }
        if (v61)
          goto LABEL_65;
LABEL_44:
        swift_bridgeObjectRelease(v88);
        v87 += 8;
        if (v87 == 88)
        {
          swift_bridgeObjectRelease(v85);
          swift_setDeallocating(v85);
          v98 = *(_QWORD *)(v85 + 16);
          v99 = sub_100004FC8(&qword_10015CA40);
          swift_arrayDestroy(v60, v98, v99);
          return (uint64_t)v1;
        }
      }
    }
    v111 = v1;
    v112 = &off_10014B908;
    v49 = sub_1001068B0(&v110);
    swift_storeEnumTagMultiPayload(v49, v1, 47);
    v50 = sub_100004FC8(&qword_100158B80);
    v51 = swift_allocObject(v50, 72, 7);
    v103 = xmmword_1001164D0;
    *(_OWORD *)(v51 + 16) = xmmword_1001164D0;
    v52 = v51 + 32;
    sub_10003CDE8(&v110, v51 + 32);
    v53 = sub_100004FC8((uint64_t *)&unk_10015CA30);
    v54 = swift_initStackObject(v53, v108);
    *(_OWORD *)(v54 + 16) = v103;
    *(_QWORD *)(v54 + 32) = v51;
    v55 = *(_QWORD *)(v51 + 16);
    swift_bridgeObjectRetain(v54);
    swift_bridgeObjectRetain(v51);
    v56 = sub_100052DB4(0, v55, 1, _swiftEmptyArrayStorage);
    v57 = *(_QWORD *)(v51 + 16);
    *(_QWORD *)&v103 = v56;
    if (v57)
    {
      v58 = v56[2];
      if ((v56[3] >> 1) - v58 >= v55)
      {
        v59 = (unint64_t)&v56[5 * v58 + 4];
        if (v52 < v59 + 40 * v55 && v59 < v52 + 40 * v55)
          goto LABEL_80;
        sub_100004FC8(&qword_100158B88);
        swift_arrayInitWithCopy(v59);
        v60 = v105;
        v61 = (uint64_t)v102;
        if (!v55)
        {
LABEL_40:
          swift_bridgeObjectRelease(v51);
          swift_bridgeObjectRelease(v54);
          swift_setDeallocating(v54);
          v64 = *(_QWORD *)(v54 + 16);
          v65 = sub_100004FC8(&qword_10015CA40);
          swift_arrayDestroy(v54 + 32, v64, v65);
          v6 = (uint64_t)&unk_100116000;
          goto LABEL_41;
        }
        v62 = *(_QWORD *)(v103 + 16);
        v20 = __OFADD__(v62, v55);
        v63 = v62 + v55;
        if (!v20)
        {
          *(_QWORD *)(v103 + 16) = v63;
          goto LABEL_40;
        }
        goto LABEL_76;
      }
      goto LABEL_73;
    }
    v60 = v105;
    v61 = (uint64_t)v102;
    if (!v55)
      goto LABEL_40;
    goto LABEL_70;
  }
LABEL_79:
  __break(1u);
LABEL_80:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

void sub_1000FE9FC(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v8 = sub_100004FC8(&qword_10015C890);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v30 - v12;
  if (qword_100156CA0 != -1)
    swift_once(&qword_100156CA0, sub_10008BDE8);
  v14 = type metadata accessor for Logger(0);
  sub_100007808(v14, (uint64_t)qword_10015D298);
  sub_100018C00(a2, (uint64_t)v13, &qword_10015C890);
  v15 = swift_retain_n(a1, 2);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc(32, -1);
    v30 = a3;
    v19 = a4;
    v20 = v18;
    v31 = swift_slowAlloc(96, -1);
    v33 = v31;
    *(_DWORD *)v20 = 136315650;
    v21 = _typeName(_:qualified:)(*a1, 0);
    v23 = v22;
    v32 = sub_1000DA1F0(v21, v22, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v20 + 4, v20 + 12);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease(v23);
    *(_WORD *)(v20 + 12) = 2080;
    v32 = sub_1000DA1F0(v30, v19, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v20 + 14, v20 + 22);
    *(_WORD *)(v20 + 22) = 2082;
    sub_100018C00((uint64_t)v13, (uint64_t)v11, &qword_10015C890);
    v24 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 48))(v11, 1, v24) == 1)
    {
      sub_10000BA50((uint64_t)v11, &qword_10015C890);
      v25 = 0xE300000000000000;
      v26 = 7104878;
    }
    else
    {
      sub_1000A03B0();
      v26 = v27;
      v25 = v28;
      sub_1000076B4((uint64_t)v11, type metadata accessor for PrimarySettingsListItemIdentifier);
    }
    v32 = sub_1000DA1F0(v26, v25, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v20 + 24, v20 + 32);
    swift_bridgeObjectRelease(v25);
    sub_10000BA50((uint64_t)v13, &qword_10015C890);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "...Complete (%s.%s), identifier: '%{public}s'", (uint8_t *)v20, 0x20u);
    v29 = v31;
    swift_arrayDestroy(v31, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v20, -1, -1);
  }
  else
  {
    swift_release_n(a1, 2);
    sub_10000BA50((uint64_t)v13, &qword_10015C890);
  }

}

uint64_t sub_1000FED30(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v3 = sub_100004FC8(&qword_10015C890);
  __chkstk_darwin(v3);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100018C00(a2, (uint64_t)v5, &qword_10015C890);
  return sub_1000F71E0((uint64_t)v5);
}

uint64_t sub_1000FEDC4(_QWORD *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  if (qword_100156CA0 != -1)
    swift_once(&qword_100156CA0, sub_10008BDE8);
  v4 = type metadata accessor for Logger(0);
  sub_100007808(v4, (uint64_t)qword_10015D298);
  v5 = swift_retain_n(a1, 2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = swift_slowAlloc(32, -1);
    v14 = swift_slowAlloc(96, -1);
    *(_DWORD *)v8 = 136315650;
    v9 = _typeName(_:qualified:)(*a1, 0);
    v11 = v10;
    v13 = sub_1000DA1F0(v9, v10, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v8 + 4, v8 + 12);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease(v11);
    *(_WORD *)(v8 + 12) = 2080;
    v13 = sub_1000DA1F0(0xD000000000000014, 0x80000001001274F0, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v8 + 14, v8 + 22);
    *(_WORD *)(v8 + 22) = 2082;
    __asm { BR              X10 }
  }

  return swift_release_n(a1, 2);
}

void sub_1000FF0A4(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (qword_100156CA0 != -1)
    swift_once(&qword_100156CA0, sub_10008BDE8);
  v6 = type metadata accessor for Logger(0);
  sub_100007808(v6, (uint64_t)qword_10015D298);
  v7 = swift_retain_n(a1, 2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc(22, -1);
    v11 = swift_slowAlloc(64, -1);
    v16 = v11;
    *(_DWORD *)v10 = 136315394;
    v12 = _typeName(_:qualified:)(*a1, 0);
    v14 = v13;
    v15 = sub_1000DA1F0(v12, v13, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v10 + 4, v10 + 12);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease(v14);
    *(_WORD *)(v10 + 12) = 2080;
    v15 = sub_1000DA1F0(a2, a3, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v10 + 14, v10 + 22);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "…Complete (%s.%s)", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v11, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

    swift_release_n(a1, 2);
  }
}

uint64_t sub_1000FF284()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = type metadata accessor for MainActor(0);
  v0[2] = v1;
  v0[3] = static MainActor.shared.getter(v1);
  v2 = (_QWORD *)swift_task_alloc(dword_10015C8B4);
  v0[4] = v2;
  *v2 = v0;
  v2[1] = sub_1000FF2E8;
  return sub_1000FF388();
}

uint64_t sub_1000FF2E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 32));
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000FF358, v2, v3);
}

uint64_t sub_1000FF358()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000FF388()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1[53] = v0;
  v2 = sub_100004FC8(&qword_10015C890);
  v1[54] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for MainActor(0);
  v1[55] = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  v1[56] = v4;
  v1[57] = v5;
  return swift_task_switch(sub_1000FF44C, v4, v5);
}

uint64_t sub_1000FF44C()
{
  uint64_t v0;
  void **v1;
  void *v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = (void **)(*(_QWORD *)(v0 + 424)
               + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_viewControllerForPresentation);
  swift_beginAccess(v1, v0 + 304, 0, 0);
  v2 = *v1;
  *(_QWORD *)(v0 + 464) = *v1;
  if (v2)
  {
    v3 = v0 + 80;
    v4 = objc_allocWithZone((Class)LAPasscodeVerificationService);
    v5 = v2;
    v6 = objc_msgSend(v4, "init");
    *(_QWORD *)(v0 + 472) = v6;
    v7 = objc_msgSend(objc_allocWithZone((Class)LAPasscodeVerificationServiceOptions), "init");
    *(_QWORD *)(v0 + 480) = v7;
    objc_msgSend(v7, "setDismissUIAfterCompletion:", 0);
    *(_QWORD *)(v0 + 120) = v0 + 416;
    *(_QWORD *)(v0 + 80) = v0;
    *(_QWORD *)(v0 + 88) = sub_1000FF5F0;
    v8 = swift_continuation_init(v0 + 80, 1);
    *(_QWORD *)(v0 + 184) = _NSConcreteStackBlock;
    v9 = (_QWORD *)(v0 + 184);
    v9[1] = 0x40000000;
    v9[2] = sub_1001002B4;
    v9[3] = &unk_10014DF40;
    v9[4] = v8;
    objc_msgSend(v6, "startInParentVC:options:completion:", v5, v7, v9);
    return swift_continuation_await(v3);
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 440));
    swift_task_dealloc(*(_QWORD *)(v0 + 432));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000FF5F0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 112);
  *(_QWORD *)(*v0 + 488) = v2;
  if (v2)
    v3 = sub_1000FFDEC;
  else
    v3 = sub_1000FF690;
  return swift_task_switch(v3, *(_QWORD *)(v1 + 448), *(_QWORD *)(v1 + 456));
}

uint64_t sub_1000FF690()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  v1 = (void *)v0[52];
  v0[62] = v1;
  if (qword_100156CA0 != -1)
    swift_once(&qword_100156CA0, sub_10008BDE8);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100007808(v2, (uint64_t)qword_10015D298);
  v0[63] = v3;
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Passcode challenge succeeded, completed, extracting credentials.", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v0[7] = v0 + 46;
  v0[2] = v0;
  v0[3] = sub_1000FF81C;
  v0[37] = swift_continuation_init(v0 + 2, 1);
  v0[33] = _NSConcreteStackBlock;
  v0[34] = 0x40000000;
  v0[35] = sub_100100340;
  v0[36] = &unk_10014DF58;
  objc_msgSend(v1, "credentialOfType:reply:", -9, v0 + 33);
  return swift_continuation_await(v0 + 2);
}

uint64_t sub_1000FF81C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 512) = v2;
  if (v2)
    v3 = sub_10010004C;
  else
    v3 = sub_1000FF8BC;
  return swift_task_switch(v3, *(_QWORD *)(v1 + 448), *(_QWORD *)(v1 + 456));
}

uint64_t sub_1000FF8BC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  BOOL v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint8_t *v10;

  v1 = swift_release(*(_QWORD *)(v0 + 440));
  v2 = *(_QWORD *)(v0 + 376);
  if (v2 >> 60 != 15)
    __asm { BR              X11 }
  v3 = Logger.logObject.getter(v1);
  v4 = static os_log_type_t.fault.getter(v3);
  v5 = os_log_type_enabled(v3, v4);
  v6 = *(void **)(v0 + 496);
  v7 = *(void **)(v0 + 472);
  v8 = *(void **)(v0 + 480);
  v9 = *(void **)(v0 + 464);
  if (v5)
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Extracting credentials from passcode challenge failed unexpectedly.", v10, 2u);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 432));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000FFDEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  void *v8;
  void *v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;

  v1 = swift_release(*(_QWORD *)(v0 + 440));
  swift_willThrow(v1);
  v2 = *(_QWORD *)(v0 + 488);
  if (qword_100156CA0 != -1)
    swift_once(&qword_100156CA0, sub_10008BDE8);
  v3 = type metadata accessor for Logger(0);
  sub_100007808(v3, (uint64_t)qword_10015D298);
  swift_errorRetain(v2);
  v4 = swift_errorRetain(v2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(void **)(v0 + 472);
  v9 = *(void **)(v0 + 464);
  if (v7)
  {
    v18 = *(void **)(v0 + 464);
    v16 = *(void **)(v0 + 480);
    v17 = *(void **)(v0 + 472);
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v19 = v11;
    *(_DWORD *)v10 = 136315138;
    swift_getErrorValue(v2, v0 + 408, v0 + 328);
    v12 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 344));
    v14 = v13;
    *(_QWORD *)(v0 + 400) = sub_1000DA1F0(v12, v13, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 400, v0 + 408, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease(v14);
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Passcode challenge failed with error '%s'", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    swift_errorRelease(v2);
  }
  else
  {

    swift_errorRelease(v2);
    swift_errorRelease(v2);
    swift_errorRelease(v2);

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 432));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10010004C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  void *v9;
  void *v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;

  v1 = *(void **)(v0 + 496);
  v2 = swift_release(*(_QWORD *)(v0 + 440));
  swift_willThrow(v2);

  v3 = *(_QWORD *)(v0 + 512);
  if (qword_100156CA0 != -1)
    swift_once(&qword_100156CA0, sub_10008BDE8);
  v4 = type metadata accessor for Logger(0);
  sub_100007808(v4, (uint64_t)qword_10015D298);
  swift_errorRetain(v3);
  v5 = swift_errorRetain(v3);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter();
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(void **)(v0 + 472);
  v10 = *(void **)(v0 + 464);
  if (v8)
  {
    v19 = *(void **)(v0 + 464);
    v17 = *(void **)(v0 + 480);
    v18 = *(void **)(v0 + 472);
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    v20 = v12;
    *(_DWORD *)v11 = 136315138;
    swift_getErrorValue(v3, v0 + 408, v0 + 328);
    v13 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 344));
    v15 = v14;
    *(_QWORD *)(v0 + 400) = sub_1000DA1F0(v13, v14, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 400, v0 + 408, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease(v15);
    swift_errorRelease(v3);
    swift_errorRelease(v3);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Passcode challenge failed with error '%s'", v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    swift_errorRelease(v3);
  }
  else
  {

    swift_errorRelease(v3);
    swift_errorRelease(v3);
    swift_errorRelease(v3);

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 432));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001002B4(uint64_t result, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  id v9;

  v3 = *(_QWORD *)(result + 32);
  if (a3)
  {
    v5 = sub_100004FC8(&qword_10015A970);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else if (a2)
  {
    **(_QWORD **)(*(_QWORD *)(v3 + 64) + 40) = a2;
    v9 = a2;
    return swift_continuation_throwingResume(v3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100100340(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD v15[2];

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    v5 = sub_100004FC8(&qword_10015A970);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else
  {
    if (a2)
    {
      v11 = a2;
      v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a2);
      v14 = v13;

    }
    else
    {
      v12 = 0;
      v14 = 0xF000000000000000;
    }
    v15[0] = v12;
    v15[1] = v14;
    sub_10007E96C((uint64_t)v15, *(_QWORD *)(*(_QWORD *)(v3 + 64) + 40), (uint64_t *)&unk_10015C8D0);
    return swift_continuation_throwingResume(v3);
  }
}

void sub_100100410(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100156CA0 != -1)
    swift_once(&qword_100156CA0, sub_10008BDE8);
  v8 = type metadata accessor for Logger(0);
  sub_100007808(v8, (uint64_t)qword_10015D298);
  v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a3, v4);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v19 = v13;
    *(_DWORD *)v12 = 136315138;
    v14 = sub_100007828((unint64_t *)&qword_10015C650, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v4, v14);
    v17 = v16;
    v18 = sub_1000DA1F0(v15, v16, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease(v17);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Done opening URL: %s", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

}

uint64_t sub_100100620(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, void *);
  uint64_t v6;
  id v7;

  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  if (a2)
    v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a2, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
  else
    v6 = 0;
  swift_retain(v4);
  v7 = a3;
  v5(v6, a3);
  swift_release(v4);

  return swift_bridgeObjectRelease(v6);
}

uint64_t sub_1001006B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v8[38] = a7;
  v8[39] = a8;
  v8[36] = a5;
  v8[37] = a6;
  v8[35] = a4;
  v9 = sub_100004FC8(&qword_10015C8E0);
  v8[40] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100004FC8(&qword_10015C890);
  v8[41] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for MainActor(0);
  v8[42] = static MainActor.shared.getter(v11);
  v12 = dispatch thunk of Actor.unownedExecutor.getter(v11, &protocol witness table for MainActor);
  v8[43] = v12;
  v8[44] = v13;
  return swift_task_switch(sub_100100770, v12, v13);
}

uint64_t sub_100100770()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  _QWORD *v36;
  void *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  os_log_type_t v42;
  uint64_t v43;

  if (qword_100156CA0 != -1)
    swift_once(&qword_100156CA0, sub_10008BDE8);
  v2 = (void *)v0[36];
  v1 = (void *)v0[37];
  v3 = v0[35];
  v4 = type metadata accessor for Logger(0);
  v0[45] = sub_100007808(v4, (uint64_t)qword_10015D298);
  v5 = v1;
  swift_unknownObjectRetain_n(v3, 2);
  v6 = v2;
  v7 = v5;
  v8 = v6;
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v42 = v10;
    v11 = (void *)v0[35];
    v38 = v7;
    v39 = v0[36];
    v40 = v0 + 33;
    v12 = swift_slowAlloc(32, -1);
    v41 = swift_slowAlloc(96, -1);
    v43 = v41;
    *(_DWORD *)v12 = 136446722;
    v13 = objc_msgSend(v11, "identifier");
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v16 = v15;

    v0[30] = sub_1000DA1F0(v14, v16, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 30, v0 + 31, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease(v16);
    swift_unknownObjectRelease_n(v11, 2);
    *(_WORD *)(v12 + 12) = 2082;
    if (v39 && (v17 = objc_msgSend(v8, "uniqueIdentifier")) != 0)
    {
      v18 = v17;
      v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
      v21 = v20;

    }
    else
    {
      v19 = 0;
      v21 = 0;
    }
    v7 = v38;
    v22 = v0[37];
    v0[15] = v19;
    v0[16] = v21;
    v23 = sub_100004FC8(&qword_10015C960);
    v24 = String.init<A>(describing:)(v0 + 15, v23);
    v26 = v25;
    v0[32] = sub_1000DA1F0(v24, v25, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v40, v12 + 14, v12 + 22);
    swift_bridgeObjectRelease(v26);

    *(_WORD *)(v12 + 22) = 2082;
    v0[33] = v22;
    v27 = v38;
    v28 = sub_100004FC8(&qword_10015C968);
    v29 = String.init<A>(describing:)(v40, v28);
    v31 = v30;
    v0[34] = sub_1000DA1F0(v29, v30, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 34, v0 + 35, v12 + 24, v12 + 32);
    swift_bridgeObjectRelease(v31);

    _os_log_impl((void *)&_mh_execute_header, v9, v42, "Performing action on follow up group '%{public}s', item '%{public}s', action: %{public}s.", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy(v41, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }
  else
  {
    swift_unknownObjectRelease_n(v0[35], 2);

  }
  v32 = v0 + 2;
  v33 = v0[35];
  v34 = objc_msgSend(objc_allocWithZone((Class)FLPreferencesController), "init");
  v0[46] = v34;
  v0[7] = v0 + 31;
  v0[2] = v0;
  v0[3] = sub_100100B48;
  v35 = swift_continuation_init(v0 + 2, 0);
  v0[10] = _NSConcreteStackBlock;
  v36 = v0 + 10;
  v36[1] = 0x40000000;
  v36[2] = sub_1001014C8;
  v36[3] = &unk_10014DF98;
  v36[4] = v35;
  objc_msgSend(v34, "performPreferencesActionForGroup:item:action:completion:", v33, v8, v7, v36);
  return swift_continuation_await(v32);
}

uint64_t sub_100100B48()
{
  uint64_t v0;

  return swift_task_switch(sub_100100B8C, *(_QWORD *)(*(_QWORD *)v0 + 344), *(_QWORD *)(*(_QWORD *)v0 + 352));
}

uint64_t sub_100100B8C()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  void *v12;
  void *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  _BOOL4 v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  _BOOL4 v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  os_log_type_t v72;
  _BOOL4 v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t KeyPath;
  uint64_t v83;
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  uint64_t v92;
  uint64_t v93[2];

  v1 = *(void **)(v0 + 368);
  v3 = *(void **)(v0 + 288);
  v2 = *(void **)(v0 + 296);
  v4 = *(_QWORD *)(v0 + 280);
  swift_release(*(_QWORD *)(v0 + 336));
  v5 = *(void **)(v0 + 248);

  swift_unknownObjectRetain_n(v4, 2);
  v6 = v3;
  v7 = v2;
  v8 = v6;
  v9 = Logger.logObject.getter(v7);
  v10 = static os_log_type_t.default.getter();
  v11 = os_log_type_enabled(v9, v10);
  v12 = *(void **)(v0 + 280);
  v13 = *(void **)(v0 + 288);
  if (v11)
  {
    v90 = v5;
    v86 = v0 + 224;
    v14 = swift_slowAlloc(32, -1);
    v87 = swift_slowAlloc(96, -1);
    v93[0] = v87;
    *(_DWORD *)v14 = 136446722;
    v15 = objc_msgSend(v12, "identifier");
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v18 = v17;

    *(_QWORD *)(v0 + 200) = sub_1000DA1F0(v16, v18, v93);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease(v18);
    swift_unknownObjectRelease_n(v12, 2);
    *(_WORD *)(v14 + 12) = 2082;
    if (v13 && (v19 = objc_msgSend(*(id *)(v0 + 288), "uniqueIdentifier")) != 0)
    {
      v20 = v19;
      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      v23 = v22;

    }
    else
    {
      v21 = 0;
      v23 = 0;
    }
    v26 = *(void **)(v0 + 288);
    v25 = *(void **)(v0 + 296);
    *(_QWORD *)(v0 + 136) = v21;
    *(_QWORD *)(v0 + 144) = v23;
    v27 = sub_100004FC8(&qword_10015C960);
    v28 = String.init<A>(describing:)(v0 + 136, v27);
    v30 = v29;
    *(_QWORD *)(v0 + 216) = sub_1000DA1F0(v28, v29, v93);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v86, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease(v30);

    *(_WORD *)(v14 + 22) = 2082;
    *(_QWORD *)(v0 + 224) = v25;
    v31 = v25;
    v32 = sub_100004FC8(&qword_10015C968);
    v33 = String.init<A>(describing:)(v86, v32);
    v35 = v34;
    *(_QWORD *)(v0 + 232) = sub_1000DA1F0(v33, v34, v93);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 240, v14 + 24, v14 + 32);
    swift_bridgeObjectRelease(v35);

    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Requesting view controller to present on follow up group '%{public}s', item '%{public}s', action: %{public}s.", (uint8_t *)v14, 0x20u);
    swift_arrayDestroy(v87, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v87, -1, -1);
    swift_slowDealloc(v14, -1, -1);

    v5 = v90;
  }
  else
  {
    v24 = *(void **)(v0 + 296);
    swift_unknownObjectRelease_n(*(_QWORD *)(v0 + 280), 2);

  }
  v36 = objc_msgSend(v5, "viewControllerToPresent");
  if (v36)
  {
    v37 = *(_QWORD *)(v0 + 304);
    v38 = OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_pendingFollowUpController;
    v39 = *(void **)(v37 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_pendingFollowUpController);
    *(_QWORD *)(v37 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_pendingFollowUpController) = v36;
    v40 = v36;

    v41 = objc_msgSend(v5, "presentationStyle");
    if (v41 != (id)1)
    {
      if (v41)
      {
        v69 = *(_QWORD *)(v0 + 304);
        v70 = *(void **)(v37 + v38);
        *(_QWORD *)(v37 + v38) = 0;

        v71 = swift_retain_n(v69, 2);
        v48 = Logger.logObject.getter(v71);
        v72 = static os_log_type_t.default.getter();
        v73 = os_log_type_enabled(v48, v72);
        v51 = *(_QWORD **)(v0 + 304);
        if (v73)
        {
          v88 = v40;
          v74 = swift_slowAlloc(22, -1);
          v92 = swift_slowAlloc(64, -1);
          v93[0] = v92;
          *(_DWORD *)v74 = 136315394;
          v75 = _typeName(_:qualified:)(*v51, 0);
          v77 = v76;
          *(_QWORD *)(v0 + 152) = sub_1000DA1F0(v75, v76, v93);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v74 + 4, v74 + 12);
          swift_bridgeObjectRelease(v77);
          swift_release_n(v51, 2);
          *(_WORD *)(v74 + 12) = 2080;
          *(_QWORD *)(v0 + 160) = sub_1000DA1F0(0xD000000000000041, 0x8000000100127550, v93);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v74 + 14, v74 + 22);
          _os_log_impl((void *)&_mh_execute_header, v48, v72, "…Complete (%s.%s) unknown presentation style.", (uint8_t *)v74, 0x16u);
          swift_arrayDestroy(v92, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v92, -1, -1);
          v57 = v74;
          goto LABEL_17;
        }
      }
      else
      {
        v42 = *(_QWORD *)(v0 + 328);
        v44 = *(_QWORD *)(v0 + 304);
        v43 = *(_QWORD *)(v0 + 312);
        v45 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v42, v43, v45);
        v46 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
        swift_storeEnumTagMultiPayload(v42, v46, 0);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v42, 0, 1, v46);
        sub_1000F6A08(v42);
        sub_10000BA50(v42, &qword_10015C890);
        v47 = swift_retain_n(v44, 2);
        v48 = Logger.logObject.getter(v47);
        v49 = static os_log_type_t.default.getter();
        v50 = os_log_type_enabled(v48, v49);
        v51 = *(_QWORD **)(v0 + 304);
        if (v50)
        {
          v88 = v40;
          v52 = swift_slowAlloc(22, -1);
          v53 = swift_slowAlloc(64, -1);
          v93[0] = v53;
          *(_DWORD *)v52 = 136315394;
          v54 = _typeName(_:qualified:)(*v51, 0);
          v56 = v55;
          *(_QWORD *)(v0 + 184) = sub_1000DA1F0(v54, v55, v93);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192, v52 + 4, v52 + 12);
          swift_bridgeObjectRelease(v56);
          swift_release_n(v51, 2);
          *(_WORD *)(v52 + 12) = 2080;
          *(_QWORD *)(v0 + 192) = sub_1000DA1F0(0xD000000000000041, 0x8000000100127550, v93);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 192, v0 + 200, v52 + 14, v52 + 22);
          _os_log_impl((void *)&_mh_execute_header, v48, v49, "…Complete (%s.%s) updated selection.", (uint8_t *)v52, 0x16u);
          swift_arrayDestroy(v53, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v53, -1, -1);
          v57 = v52;
LABEL_17:
          swift_slowDealloc(v57, -1, -1);

          goto LABEL_21;
        }
      }

      swift_release_n(v51, 2);
      goto LABEL_21;
    }
    v89 = v40;
    v91 = v5;
    v58 = *(_QWORD *)(v0 + 304);
    sub_1000F7720(6);
    v59 = swift_retain_n(v58, 2);
    v60 = Logger.logObject.getter(v59);
    v61 = static os_log_type_t.default.getter();
    v62 = os_log_type_enabled(v60, v61);
    v63 = *(_QWORD **)(v0 + 304);
    if (v62)
    {
      v64 = swift_slowAlloc(22, -1);
      v65 = swift_slowAlloc(64, -1);
      v93[0] = v65;
      *(_DWORD *)v64 = 136315394;
      v66 = _typeName(_:qualified:)(*v63, 0);
      v68 = v67;
      *(_QWORD *)(v0 + 168) = sub_1000DA1F0(v66, v67, v93);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v64 + 4, v64 + 12);
      swift_bridgeObjectRelease(v68);
      swift_release_n(v63, 2);
      *(_WORD *)(v64 + 12) = 2080;
      *(_QWORD *)(v0 + 176) = sub_1000DA1F0(0xD000000000000041, 0x8000000100127550, v93);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v64 + 14, v64 + 22);
      _os_log_impl((void *)&_mh_execute_header, v60, v61, "…Complete (%s.%s) presenting modal.", (uint8_t *)v64, 0x16u);
      swift_arrayDestroy(v65, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v65, -1, -1);
      swift_slowDealloc(v64, -1, -1);

    }
    else
    {

      swift_release_n(v63, 2);
    }
    v5 = v91;
  }
LABEL_21:
  v78 = *(_QWORD *)(v0 + 320);
  v79 = *(_QWORD *)(v0 + 328);
  v80 = *(_QWORD *)(v0 + 304);
  v81 = type metadata accessor for FLFollowUpInformation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 56))(v78, 1, 1, v81);
  KeyPath = swift_getKeyPath(&unk_10011B3E0);
  v83 = swift_task_alloc(32);
  *(_QWORD *)(v83 + 16) = v80;
  *(_QWORD *)(v83 + 24) = v78;
  *(_QWORD *)(v0 + 208) = v80;
  v84 = sub_100007828(&qword_100158EF0, type metadata accessor for PrimarySettingsListModel, (uint64_t)&unk_10011B328);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 208, KeyPath, sub_100106B90, v83, (char *)&type metadata for () + 8, v84);
  swift_release(KeyPath);
  swift_task_dealloc(v83);
  sub_10000BA50(v78, &qword_10015C8E0);

  swift_task_dealloc(v79);
  swift_task_dealloc(v78);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001014C8(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)(a1 + 32);
  **(_QWORD **)(*(_QWORD *)(v2 + 64) + 40) = a2;
  v3 = a2;
  return swift_continuation_resume(v2);
}

void sub_1001014F8(char a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100156CC0 != -1)
    swift_once(&qword_100156CC0, sub_10008BE7C);
  v9 = type metadata accessor for Logger(0);
  sub_100007808(v9, (uint64_t)qword_10015D2F8);
  sub_1000076F0(a3, (uint64_t)v8, type metadata accessor for PrimarySettingsListItemIdentifier);
  v10 = swift_retain_n(a2, 2);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc(38, -1);
    v14 = swift_slowAlloc(96, -1);
    v22 = v14;
    *(_DWORD *)v13 = 136315906;
    v15 = _typeName(_:qualified:)(*a2, 0);
    v17 = v16;
    v21 = sub_1000DA1F0(v15, v16, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v13 + 4, v13 + 12);
    swift_release_n(a2, 2);
    swift_bridgeObjectRelease(v17);
    *(_WORD *)(v13 + 12) = 2080;
    v21 = sub_1000DA1F0(0xD000000000000019, 0x80000001001277B0, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v13 + 14, v13 + 22);
    *(_WORD *)(v13 + 22) = 2082;
    sub_1000A03B0();
    v19 = v18;
    v21 = sub_1000DA1F0(v20, v18, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v13 + 24, v13 + 32);
    swift_bridgeObjectRelease(v19);
    sub_1000076B4((uint64_t)v8, type metadata accessor for PrimarySettingsListItemIdentifier);
    *(_WORD *)(v13 + 32) = 1024;
    LODWORD(v21) = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, (char *)&v21 + 4, v13 + 34, v13 + 38);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "…Complete (%s.%s), item: %{public}s, success: %{BOOL}d", (uint8_t *)v13, 0x26u);
    swift_arrayDestroy(v14, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    swift_release_n(a2, 2);
    sub_1000076B4((uint64_t)v8, type metadata accessor for PrimarySettingsListItemIdentifier);
  }

}

void sub_1001017B8(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  NSObject *v14;
  uint64_t v15;
  os_signpost_type_t v16;
  uint64_t v17;
  os_signpost_id_t v18;
  uint64_t v19;
  uint64_t v20;
  os_signpost_type_t v21;
  uint64_t v22;
  os_signpost_id_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  void *v38;

  v36 = a2;
  v3 = type metadata accessor for OSSignpostID(0);
  v34 = *(_QWORD *)(v3 - 8);
  v35 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OSSignposter(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100156D50 != -1)
    swift_once(&qword_100156D50, sub_1000C6E88);
  v38 = (void *)qword_10015D410;
  v10 = (id)qword_10015D410;
  v37 = sub_1000F8CB0();
  if (qword_100156CD8 != -1)
    swift_once(&qword_100156CD8, sub_10008BEEC);
  v11 = sub_100007808(v6, (uint64_t)qword_10015D340);
  v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v11, v6);
  static OSSignpostID.exclusive.getter(v12);
  v13 = (uint8_t *)swift_slowAlloc(2, -1);
  *(_WORD *)v13 = 0;
  v14 = OSSignposter.logHandle.getter(v13);
  v15 = static os_signpost_type_t.begin.getter();
  v16 = v15;
  v18 = OSSignpostID.rawValue.getter(v15, v17);
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, v16, v18, "PrimarySettingsList Data Model Section Snapshot", "Followups", v13, 2u);
  sub_100101A58(a1, &v38, &v37);
  v20 = static os_signpost_type_t.end.getter(v19);
  v21 = v20;
  v23 = OSSignpostID.rawValue.getter(v20, v22);
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, v21, v23, "PrimarySettingsList Data Model Section Snapshot", "Followups", v13, 2u);

  swift_slowDealloc(v13, -1, -1);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v5, v35);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v24 = v37;
  v25 = swift_bridgeObjectRetain(v37);
  v26 = sub_1000F2C68(v25, &v38);
  swift_bridgeObjectRelease(v24);
  v27 = sub_100023658((uint64_t)v26);
  v29 = v28;
  v31 = v30;
  swift_bridgeObjectRelease(v24);
  swift_bridgeObjectRelease(v26);
  v32 = v36;
  *v36 = v27;
  v32[1] = v29;
  v32[2] = v31;

}

void sub_100101A58(uint64_t a1, id *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _UNKNOWN **v43;
  ValueMetadata *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 v48;
  BOOL v49;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  int *v59;
  char v60;
  uint64_t v61;
  _QWORD *v62;
  char *v63;
  uint64_t (*v64)(uint64_t);
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t (*v72)(uint64_t);
  uint64_t v73;
  ValueMetadata *v74;
  _UNKNOWN **v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned __int8 v79;
  BOOL v80;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  int *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  _QWORD *v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  char v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  char v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  char v197;
  void (*v198)(char *, uint64_t);
  uint64_t v199;
  uint64_t v200;
  _QWORD *v201;
  char *v202;
  uint64_t v203;
  _QWORD *v204;
  char *v205;
  _QWORD *v206;
  uint64_t v207;
  _QWORD *v208;
  unint64_t v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  _QWORD *v213;
  uint64_t v214;
  char v215;
  _QWORD *v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  id v222;
  unsigned int v223;
  _QWORD *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  _QWORD *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  int *v235;
  _QWORD *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t v243;
  uint64_t v244;
  unint64_t v245;
  _QWORD *v246;
  uint64_t v247;
  char v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  unint64_t v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  char *v256;
  char v257;
  _QWORD *v258;
  void (*v259)(char *, uint64_t);
  int *v260;
  _QWORD *v261;
  char *v262;
  uint64_t v263;
  _QWORD *v264;
  uint64_t v265;
  unint64_t v266;
  char *v267;
  uint64_t v268;
  uint64_t v269;
  _QWORD *v270;
  uint64_t v271;
  uint64_t v272;
  int *v273;
  _QWORD *v274;
  uint64_t v275;
  char v276;
  char *v277;
  uint64_t v278;
  int *v279;
  _QWORD *v280;
  id v281;
  unsigned int v282;
  _QWORD *v283;
  id v284;
  uint64_t v285;
  unint64_t v286;
  unint64_t v287;
  uint64_t v288;
  uint64_t v289;
  unint64_t v290;
  uint64_t v291;
  uint64_t v292;
  char *v293;
  char *v294;
  char *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  _QWORD *v299;
  _QWORD *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  id *v304;
  uint64_t *v305;
  uint64_t v306;
  int *v307;
  _QWORD *v308;
  uint64_t v309;
  _BYTE v310[40];
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  char v322[24];
  char v323[24];
  char v324[24];
  __int128 v325;
  ValueMetadata *v326;
  _UNKNOWN **v327;
  char v328[24];
  char v329[32];
  _QWORD *v330;

  v4 = v3;
  v304 = a2;
  v7 = sub_100004FC8(&qword_100157100);
  v8 = __chkstk_darwin(v7);
  v297 = (uint64_t)&v285 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v301 = (uint64_t)&v285 - v11;
  __chkstk_darwin(v10);
  v299 = (uint64_t *)((char *)&v285 - v12);
  v13 = type metadata accessor for FLFollowUpGroupSectionElement(0);
  v302 = *(_QWORD *)(v13 - 8);
  v303 = v13;
  v14 = __chkstk_darwin(v13);
  v293 = (char *)&v285 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v295 = (char *)&v285 - v17;
  __chkstk_darwin(v16);
  v294 = (char *)&v285 - v18;
  v307 = (int *)type metadata accessor for FollowUpInformationProviderSnapshot(0);
  v19 = __chkstk_darwin(v307);
  v296 = (uint64_t)&v285 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v300 = (uint64_t *)((char *)&v285 - v22);
  v23 = __chkstk_darwin(v21);
  v298 = (uint64_t)&v285 - v24;
  v25 = __chkstk_darwin(v23);
  v27 = (char *)&v285 - v26;
  __chkstk_darwin(v25);
  v29 = (uint64_t *)((char *)&v285 - v28);
  v309 = a1;
  v30 = sub_1000F8504();
  v31 = (uint64_t)v30 + OBJC_IVAR____TtC11SettingsApp29FollowUpListElementsGenerator_currentSnapshot;
  swift_beginAccess((char *)v30 + OBJC_IVAR____TtC11SettingsApp29FollowUpListElementsGenerator_currentSnapshot, v329, 0, 0);
  sub_1000076F0(v31, (uint64_t)v29, type metadata accessor for FollowUpInformationProviderSnapshot);
  swift_release(v30);
  v32 = *v29;
  swift_bridgeObjectRetain(*v29);
  v308 = v29;
  sub_1000076B4((uint64_t)v29, type metadata accessor for FollowUpInformationProviderSnapshot);
  v33 = *(_QWORD *)(v32 + 16);
  swift_bridgeObjectRelease(v32);
  if (v33)
  {
    v34 = sub_1000F8504();
    v35 = (uint64_t)v34 + OBJC_IVAR____TtC11SettingsApp29FollowUpListElementsGenerator_currentSnapshot;
    swift_beginAccess((char *)v34 + OBJC_IVAR____TtC11SettingsApp29FollowUpListElementsGenerator_currentSnapshot, v328, 0, 0);
    v36 = v308;
    sub_1000076F0(v35, (uint64_t)v308, type metadata accessor for FollowUpInformationProviderSnapshot);
    swift_release(v34);
    v37 = v36[3];
    swift_bridgeObjectRetain(v37);
    sub_1000076B4((uint64_t)v36, type metadata accessor for FollowUpInformationProviderSnapshot);
    v38 = *(_QWORD *)(v37 + 16);
    swift_bridgeObjectRelease(v37);
    if (v38)
    {
      v39 = *a3;
      v40 = *(_QWORD *)(*a3 + 16);
      if (v40)
      {
        v305 = a3;
        v306 = v3;
        v41 = v39 + 32;
        swift_bridgeObjectRetain(v39);
        v42 = 0;
        while (1)
        {
          sub_10003CE00(v41, (uint64_t)&v325);
          v44 = v326;
          v43 = v327;
          sub_100007C2C(&v325, (uint64_t)v326);
          v45 = ((uint64_t (*)(ValueMetadata *, _UNKNOWN **))v43[1])(v44, v43);
          v47 = v46;
          LODWORD(v44) = v48;
          sub_10000BAE4(v45, v46, v48);
          sub_100005474(&v325);
          v49 = (_DWORD)v44 == 2 && v45 == 3;
          if (v49 && v47 == 0)
            break;
          ++v42;
          v41 += 40;
          if (v40 == v42)
          {
            swift_bridgeObjectRelease(v39);
            a3 = v305;
            v4 = v306;
            goto LABEL_21;
          }
        }
        swift_bridgeObjectRelease(v39);
        v51 = sub_1000F8504();
        v52 = (uint64_t)v51 + OBJC_IVAR____TtC11SettingsApp29FollowUpListElementsGenerator_currentSnapshot;
        swift_beginAccess((char *)v51 + OBJC_IVAR____TtC11SettingsApp29FollowUpListElementsGenerator_currentSnapshot, &v312, 0, 0);
        sub_1000076F0(v52, (uint64_t)v27, type metadata accessor for FollowUpInformationProviderSnapshot);
        swift_release(v51);
        v53 = *((_QWORD *)v27 + 4);
        v54 = (_QWORD *)*((_QWORD *)v27 + 5);
        swift_bridgeObjectRetain(v54);
        sub_1000076B4((uint64_t)v27, type metadata accessor for FollowUpInformationProviderSnapshot);
        if (v54)
        {
          *(_QWORD *)&v325 = v53;
          *((_QWORD *)&v325 + 1) = v54;
          v55 = sub_100008A5C();
          v54 = (_QWORD *)Text.init<A>(_:)(&v325, &type metadata for String, v55);
          v57 = v56;
          v59 = v58;
          v61 = v60 & 1;
        }
        else
        {
          v57 = 0;
          v61 = 0;
          v59 = 0;
        }
        sub_10000BAA4((uint64_t)v54, v57, v61, (uint64_t)v59);
        v62 = sub_1000F8504();
        v63 = (char *)v62 + OBJC_IVAR____TtC11SettingsApp29FollowUpListElementsGenerator_currentSnapshot;
        swift_beginAccess((char *)v62 + OBJC_IVAR____TtC11SettingsApp29FollowUpListElementsGenerator_currentSnapshot, &v311, 0, 0);
        v64 = type metadata accessor for FollowUpInformationProviderSnapshot;
        v65 = (uint64_t)v63;
        v66 = v61;
        v67 = v308;
        sub_1000076F0(v65, (uint64_t)v308, type metadata accessor for FollowUpInformationProviderSnapshot);
        swift_release(v62);
        v68 = v67[3];
        swift_bridgeObjectRetain(v68);
        sub_1000076B4((uint64_t)v67, type metadata accessor for FollowUpInformationProviderSnapshot);
        v326 = &type metadata for PrimarySettingsListSectionModel;
        v327 = &off_100148D50;
        v69 = swift_allocObject(&unk_10014E038, 112, 7);
        *(_QWORD *)&v325 = v69;
        *(_OWORD *)(v69 + 16) = xmmword_10011B560;
        *(_BYTE *)(v69 + 32) = 2;
        *(_OWORD *)(v69 + 40) = 0u;
        *(_OWORD *)(v69 + 56) = 0u;
        *(_QWORD *)(v69 + 72) = v54;
        *(_QWORD *)(v69 + 80) = v57;
        *(_QWORD *)(v69 + 88) = v66;
        *(_QWORD *)(v69 + 96) = v59;
        *(_QWORD *)(v69 + 104) = v68;
        v70 = v42 + 1;
        if (__OFADD__(v42, 1))
          goto LABEL_121;
        if (*(_QWORD *)(*v305 + 16) < v70)
          goto LABEL_122;
        if (v70 < 0)
          goto LABEL_123;
        sub_10003CDE8(&v325, (uint64_t)v310);
        sub_10000BA8C(4, 0, 2u);
        sub_10000BAA4(0, 0, 0, 0);
        sub_10000BAA4((uint64_t)v54, v57, v66, (uint64_t)v59);
        swift_bridgeObjectRetain(v68);
        a3 = v305;
        sub_1000EED28(v42 + 1, v42 + 1, (uint64_t)v310);
        sub_10000BAFC((uint64_t)v54, v57, v66, (uint64_t)v59);
        sub_10000BAE4(4, 0, 2u);
        sub_10000BAFC(0, 0, 0, 0);
        sub_10000BAFC((uint64_t)v54, v57, v66, (uint64_t)v59);
        swift_bridgeObjectRelease(v68);
        v4 = v306;
      }
    }
  }
LABEL_21:
  v71 = *a3;
  v72 = *(uint64_t (**)(uint64_t))(*a3 + 16);
  if (v72)
  {
    v305 = a3;
    v306 = v4;
    v73 = v71 + 32;
    swift_bridgeObjectRetain(v71);
    v64 = 0;
    while (1)
    {
      sub_10003CE00(v73, (uint64_t)&v325);
      v74 = v326;
      v75 = v327;
      sub_100007C2C(&v325, (uint64_t)v326);
      v76 = ((uint64_t (*)(ValueMetadata *, _UNKNOWN **))v75[1])(v74, v75);
      v78 = v77;
      LODWORD(v75) = v79;
      sub_10000BAE4(v76, v77, v79);
      sub_100005474(&v325);
      v80 = (_DWORD)v75 == 2 && v76 == 8;
      if (v80 && v78 == 0)
        break;
      v64 = (uint64_t (*)(uint64_t))((char *)v64 + 1);
      v73 += 40;
      if (v72 == v64)
      {
        swift_bridgeObjectRelease(v71);
        goto LABEL_113;
      }
    }
    swift_bridgeObjectRelease(v71);
    v330 = _swiftEmptyArrayStorage;
    v82 = sub_1000F8504();
    v83 = (uint64_t)v82 + OBJC_IVAR____TtC11SettingsApp29FollowUpListElementsGenerator_currentSnapshot;
    swift_beginAccess((char *)v82 + OBJC_IVAR____TtC11SettingsApp29FollowUpListElementsGenerator_currentSnapshot, v310, 0, 0);
    v54 = v308;
    sub_1000076F0(v83, (uint64_t)v308, type metadata accessor for FollowUpInformationProviderSnapshot);
    swift_release(v82);
    v84 = v54[6];
    swift_bridgeObjectRetain(v84);
    sub_1000076B4((uint64_t)v54, type metadata accessor for FollowUpInformationProviderSnapshot);
    v85 = *(_QWORD *)(v84 + 16);
    swift_bridgeObjectRelease(v84);
    if (v85)
    {
      v86 = sub_1000F8504();
      v87 = (uint64_t)v86 + OBJC_IVAR____TtC11SettingsApp29FollowUpListElementsGenerator_currentSnapshot;
      swift_beginAccess((char *)v86 + OBJC_IVAR____TtC11SettingsApp29FollowUpListElementsGenerator_currentSnapshot, v324, 0, 0);
      sub_1000076F0(v87, (uint64_t)v54, type metadata accessor for FollowUpInformationProviderSnapshot);
      swift_release(v86);
      v88 = v54[6];
      swift_bridgeObjectRetain(v88);
      sub_1000076B4((uint64_t)v54, type metadata accessor for FollowUpInformationProviderSnapshot);
      v89 = sub_100103220(v88);
      swift_bridgeObjectRelease(v88);
      sub_1000F2560((uint64_t)v89);
    }
    v90 = sub_1000F8504();
    v91 = (uint64_t)v90 + OBJC_IVAR____TtC11SettingsApp29FollowUpListElementsGenerator_currentSnapshot;
    swift_beginAccess((char *)v90 + OBJC_IVAR____TtC11SettingsApp29FollowUpListElementsGenerator_currentSnapshot, v323, 0, 0);
    sub_1000076F0(v91, (uint64_t)v54, type metadata accessor for FollowUpInformationProviderSnapshot);
    swift_release(v90);
    v92 = v54[8];
    swift_bridgeObjectRetain(v92);
    sub_1000076B4((uint64_t)v54, type metadata accessor for FollowUpInformationProviderSnapshot);
    v93 = *(_QWORD *)(v92 + 16);
    swift_bridgeObjectRelease(v92);
    if (v93)
    {
      v94 = sub_1000F8504();
      v95 = (uint64_t)v94 + OBJC_IVAR____TtC11SettingsApp29FollowUpListElementsGenerator_currentSnapshot;
      swift_beginAccess((char *)v94 + OBJC_IVAR____TtC11SettingsApp29FollowUpListElementsGenerator_currentSnapshot, v322, 0, 0);
      sub_1000076F0(v95, (uint64_t)v54, type metadata accessor for FollowUpInformationProviderSnapshot);
      swift_release(v94);
      v96 = v54[8];
      swift_bridgeObjectRetain(v96);
      sub_1000076B4((uint64_t)v54, type metadata accessor for FollowUpInformationProviderSnapshot);
      v97 = sub_100103220(v96);
      swift_bridgeObjectRelease(v96);
      sub_1000F2560((uint64_t)v97);
    }
    v98 = sub_1000F8504();
    v99 = (uint64_t)v98 + OBJC_IVAR____TtC11SettingsApp29FollowUpListElementsGenerator_currentSnapshot;
    swift_beginAccess((char *)v98 + OBJC_IVAR____TtC11SettingsApp29FollowUpListElementsGenerator_currentSnapshot, &v321, 0, 0);
    sub_1000076F0(v99, (uint64_t)v54, type metadata accessor for FollowUpInformationProviderSnapshot);
    swift_release(v98);
    v100 = v307;
    v101 = *(_QWORD *)((char *)v54 + v307[12]);
    swift_bridgeObjectRetain(v101);
    sub_1000076B4((uint64_t)v54, type metadata accessor for FollowUpInformationProviderSnapshot);
    v102 = *(_QWORD *)(v101 + 16);
    swift_bridgeObjectRelease(v101);
    if (!v102)
    {
LABEL_60:
      v162 = sub_1000F8504();
      v163 = (uint64_t)v162 + OBJC_IVAR____TtC11SettingsApp29FollowUpListElementsGenerator_currentSnapshot;
      swift_beginAccess((char *)v162 + OBJC_IVAR____TtC11SettingsApp29FollowUpListElementsGenerator_currentSnapshot, &v318, 0, 0);
      sub_1000076F0(v163, (uint64_t)v54, type metadata accessor for FollowUpInformationProviderSnapshot);
      swift_release(v162);
      v164 = *(_QWORD *)((char *)v54 + v100[14]);
      swift_bridgeObjectRetain(v164);
      sub_1000076B4((uint64_t)v54, type metadata accessor for FollowUpInformationProviderSnapshot);
      v165 = *(_QWORD *)(v164 + 16);
      swift_bridgeObjectRelease(v164);
      v59 = v100;
      if (!v165)
        goto LABEL_84;
      v166 = sub_1000F8504();
      v167 = (uint64_t)v166 + OBJC_IVAR____TtC11SettingsApp29FollowUpListElementsGenerator_currentSnapshot;
      swift_beginAccess((char *)v166 + OBJC_IVAR____TtC11SettingsApp29FollowUpListElementsGenerator_currentSnapshot, &v317, 0, 0);
      v168 = v300;
      sub_1000076F0(v167, (uint64_t)v300, type metadata accessor for FollowUpInformationProviderSnapshot);
      swift_release(v166);
      v169 = v301;
      sub_100018C00((uint64_t)v168 + v59[13], v301, &qword_100157100);
      sub_1000076B4((uint64_t)v168, type metadata accessor for FollowUpInformationProviderSnapshot);
      v171 = v302;
      v170 = v303;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v302 + 48))(v169, 1, v303) == 1)
      {
        sub_10000BA50(v169, &qword_100157100);
        v172 = 0;
        v173 = 0;
        v174 = 0;
        v288 = 0;
        v300 = 0;
        v175 = 0;
        v176 = 0;
        v177 = 0;
LABEL_79:
        v298 = v174;
        v299 = v175;
        v301 = v172;
        sub_10000BAA4((uint64_t)v300, (uint64_t)v175, v176, v177);
        v200 = v288;
        sub_10000BAA4(v172, v173, v174, v288);
        v201 = sub_1000F8504();
        v202 = (char *)v201 + OBJC_IVAR____TtC11SettingsApp29FollowUpListElementsGenerator_currentSnapshot;
        swift_beginAccess((char *)v201 + OBJC_IVAR____TtC11SettingsApp29FollowUpListElementsGenerator_currentSnapshot, &v316, 0, 0);
        v203 = (uint64_t)v202;
        v204 = v308;
        sub_1000076F0(v203, (uint64_t)v308, type metadata accessor for FollowUpInformationProviderSnapshot);
        swift_release(v201);
        v205 = *(char **)((char *)v204 + v307[14]);
        swift_bridgeObjectRetain(v205);
        sub_1000076B4((uint64_t)v204, type metadata accessor for FollowUpInformationProviderSnapshot);
        v206 = v330;
        sub_10000BA8C(6, 0, 2u);
        v291 = v176;
        v292 = v177;
        sub_10000BAA4((uint64_t)v300, (uint64_t)v299, v176, v177);
        v294 = (char *)v173;
        v207 = v200;
        sub_10000BAA4(v301, v173, v298, v200);
        v295 = v205;
        swift_bridgeObjectRetain(v205);
        if ((swift_isUniquelyReferenced_nonNull_native(v206) & 1) != 0)
        {
          v208 = v300;
        }
        else
        {
          v208 = v300;
          v206 = sub_100052DA0(0, v206[2] + 1, 1, v206);
        }
        v210 = v206[2];
        v209 = v206[3];
        v289 = v210 + 1;
        v290 = v210;
        if (v210 >= v209 >> 1)
          v300 = sub_100052DA0((_QWORD *)(v209 > 1), v210 + 1, 1, v206);
        else
          v300 = v206;
        v326 = &type metadata for PrimarySettingsListSectionModel;
        v327 = &off_100148D50;
        v211 = swift_allocObject(&unk_10014E038, 112, 7);
        *(_QWORD *)&v325 = v211;
        *(_OWORD *)(v211 + 16) = xmmword_10011B580;
        *(_BYTE *)(v211 + 32) = 2;
        v212 = v298;
        v213 = v299;
        *(_QWORD *)(v211 + 40) = v208;
        *(_QWORD *)(v211 + 48) = v213;
        v215 = v291;
        v214 = v292;
        *(_QWORD *)(v211 + 56) = v291;
        *(_QWORD *)(v211 + 64) = v214;
        v216 = v300;
        v217 = v301;
        v218 = (uint64_t)v294;
        *(_QWORD *)(v211 + 72) = v301;
        *(_QWORD *)(v211 + 80) = v218;
        *(_QWORD *)(v211 + 88) = v212;
        *(_QWORD *)(v211 + 96) = v207;
        *(_QWORD *)(v211 + 104) = v295;
        v219 = v290;
        v216[2] = v289;
        sub_10003CDE8(&v325, (uint64_t)&v216[5 * v219 + 4]);
        v220 = v217;
        v221 = (uint64_t)v294;
        sub_10000BAFC(v220, (uint64_t)v294, v212, v207);
        sub_10000BAFC((uint64_t)v208, (uint64_t)v213, v215, v214);
        sub_10000BAE4(6, 0, 2u);
        sub_10000BAFC((uint64_t)v208, (uint64_t)v213, v215, v214);
        sub_10000BAFC(v301, v221, v212, v207);
        swift_bridgeObjectRelease(v295);
        v330 = v300;
        v59 = v307;
        v54 = v308;
LABEL_84:
        v222 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
        v223 = objc_msgSend(v222, "sf_isInternalInstall");

        if (!v223)
          goto LABEL_108;
        v224 = sub_1000F8504();
        v225 = (uint64_t)v224 + OBJC_IVAR____TtC11SettingsApp29FollowUpListElementsGenerator_currentSnapshot;
        swift_beginAccess((char *)v224 + OBJC_IVAR____TtC11SettingsApp29FollowUpListElementsGenerator_currentSnapshot, &v315, 0, 0);
        sub_1000076F0(v225, (uint64_t)v54, type metadata accessor for FollowUpInformationProviderSnapshot);
        swift_release(v224);
        v226 = *(_QWORD *)((char *)v54 + v59[16]);
        swift_bridgeObjectRetain(v226);
        sub_1000076B4((uint64_t)v54, type metadata accessor for FollowUpInformationProviderSnapshot);
        v227 = *(_QWORD *)(v226 + 16);
        swift_bridgeObjectRelease(v226);
        if (!v227)
          goto LABEL_108;
        v228 = sub_1000F8504();
        v229 = (uint64_t)v228 + OBJC_IVAR____TtC11SettingsApp29FollowUpListElementsGenerator_currentSnapshot;
        swift_beginAccess((char *)v228 + OBJC_IVAR____TtC11SettingsApp29FollowUpListElementsGenerator_currentSnapshot, &v314, 0, 0);
        v230 = v296;
        sub_1000076F0(v229, v296, type metadata accessor for FollowUpInformationProviderSnapshot);
        swift_release(v228);
        v231 = v297;
        sub_100018C00(v230 + v59[15], v297, &qword_100157100);
        sub_1000076B4(v230, type metadata accessor for FollowUpInformationProviderSnapshot);
        v233 = v302;
        v232 = v303;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v302 + 48))(v231, 1, v303) == 1)
        {
          sub_10000BA50(v231, &qword_100157100);
          v234 = 0;
          v235 = 0;
          v300 = 0;
          v301 = 0;
          v236 = 0;
          v237 = 0;
          v238 = 0;
          v239 = 0;
LABEL_104:
          v303 = v234;
          sub_10000BAA4((uint64_t)v236, v237, v238, v239);
          sub_10000BAA4(v234, (uint64_t)v235, v301, (uint64_t)v300);
          v261 = sub_1000F8504();
          v262 = (char *)v261 + OBJC_IVAR____TtC11SettingsApp29FollowUpListElementsGenerator_currentSnapshot;
          swift_beginAccess((char *)v261 + OBJC_IVAR____TtC11SettingsApp29FollowUpListElementsGenerator_currentSnapshot, &v313, 0, 0);
          v263 = (uint64_t)v262;
          v264 = v308;
          sub_1000076F0(v263, (uint64_t)v308, type metadata accessor for FollowUpInformationProviderSnapshot);
          swift_release(v261);
          v265 = *(_QWORD *)((char *)v264 + v307[16]);
          swift_bridgeObjectRetain(v265);
          sub_1000076B4((uint64_t)v264, type metadata accessor for FollowUpInformationProviderSnapshot);
          v59 = (int *)v330;
          sub_10000BA8C(7, 0, 2u);
          v298 = v237;
          v299 = v236;
          v296 = v238;
          v297 = v239;
          sub_10000BAA4((uint64_t)v236, v237, v238, v239);
          v307 = v235;
          v54 = v300;
          sub_10000BAA4(v303, (uint64_t)v235, v301, (uint64_t)v300);
          v302 = v265;
          swift_bridgeObjectRetain(v265);
          if ((swift_isUniquelyReferenced_nonNull_native(v59) & 1) == 0)
            goto LABEL_124;
          while (1)
          {
            v267 = (char *)*((_QWORD *)v59 + 2);
            v266 = *((_QWORD *)v59 + 3);
            v294 = v267 + 1;
            v295 = v267;
            v308 = (unint64_t)v267 >= v266 >> 1
                 ? sub_100052DA0((_QWORD *)(v266 > 1), (int64_t)(v267 + 1), 1, v59)
                 : v59;
            v326 = &type metadata for PrimarySettingsListSectionModel;
            v327 = &off_100148D50;
            v268 = swift_allocObject(&unk_10014E038, 112, 7);
            *(_QWORD *)&v325 = v268;
            *(_OWORD *)(v268 + 16) = xmmword_10011B590;
            *(_BYTE *)(v268 + 32) = 2;
            v269 = v298;
            v270 = v299;
            *(_QWORD *)(v268 + 40) = v299;
            *(_QWORD *)(v268 + 48) = v269;
            v59 = (int *)v296;
            v271 = v297;
            *(_QWORD *)(v268 + 56) = v296;
            *(_QWORD *)(v268 + 64) = v271;
            v272 = v303;
            v273 = v307;
            v274 = v308;
            *(_QWORD *)(v268 + 72) = v303;
            *(_QWORD *)(v268 + 80) = v273;
            v276 = v301;
            v275 = v302;
            *(_QWORD *)(v268 + 88) = v301;
            *(_QWORD *)(v268 + 96) = v54;
            *(_QWORD *)(v268 + 104) = v275;
            v277 = v295;
            v274[2] = v294;
            sub_10003CDE8(&v325, (uint64_t)&v274[5 * (_QWORD)v277 + 4]);
            v278 = v272;
            v279 = v307;
            sub_10000BAFC(v278, (uint64_t)v307, v276, (uint64_t)v54);
            sub_10000BAFC((uint64_t)v270, v269, (char)v59, v271);
            sub_10000BAE4(7, 0, 2u);
            sub_10000BAFC((uint64_t)v270, v269, (char)v59, v271);
            sub_10000BAFC(v303, (uint64_t)v279, v276, (uint64_t)v54);
            swift_bridgeObjectRelease(v302);
            v330 = v308;
LABEL_108:
            if (!*(_QWORD *)(*v305 + 16))
              break;
            if (!__OFADD__(v64, 1))
            {
              v280 = v330;
              sub_1000EF0D0((uint64_t)v64 + 1, (int64_t)v64 + 1, (uint64_t)v330);
              goto LABEL_112;
            }
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            v59 = (int *)sub_100052DA0(0, *((_QWORD *)v59 + 2) + 1, 1, v59);
          }
          v280 = v330;
LABEL_112:
          swift_bridgeObjectRelease(v280);
          goto LABEL_113;
        }
        v240 = v293;
        v241 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v233 + 32))(v293, v231, v232);
        v242 = FLFollowUpGroupSectionElement.headerText.getter(v241);
        if (v243)
        {
          v244 = HIBYTE(v243) & 0xF;
          if ((v243 & 0x2000000000000000) == 0)
            v244 = v242 & 0xFFFFFFFFFFFFLL;
          if (v244)
          {
            *(_QWORD *)&v325 = v242;
            *((_QWORD *)&v325 + 1) = v243;
            v245 = sub_100008A5C();
            v246 = (_QWORD *)Text.init<A>(_:)(&v325, &type metadata for String, v245);
            v298 = v247;
            v299 = v246;
            v296 = v248 & 1;
            v297 = v249;
            goto LABEL_95;
          }
          swift_bridgeObjectRelease(v243);
        }
        v298 = 0;
        v299 = 0;
        v296 = 0;
        v297 = 0;
LABEL_95:
        v250 = FLFollowUpGroupSectionElement.footerText.getter();
        if (v251)
        {
          v252 = v251;
          v253 = HIBYTE(v251) & 0xF;
          if ((v251 & 0x2000000000000000) == 0)
            v253 = v250 & 0xFFFFFFFFFFFFLL;
          if (v253)
          {
            *(_QWORD *)&v325 = v250;
            *((_QWORD *)&v325 + 1) = v251;
            v254 = sub_100008A5C();
            v255 = Text.init<A>(_:)(&v325, &type metadata for String, v254);
            v256 = v240;
            v234 = v255;
            v300 = v258;
            v301 = v257 & 1;
            v259 = *(void (**)(char *, uint64_t))(v233 + 8);
            v235 = v260;
            v259(v256, v232);
LABEL_103:
            v237 = v298;
            v236 = v299;
            v238 = v296;
            v239 = v297;
            goto LABEL_104;
          }
          (*(void (**)(char *, uint64_t))(v233 + 8))(v240, v232);
          swift_bridgeObjectRelease(v252);
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v233 + 8))(v240, v232);
        }
        v234 = 0;
        v235 = 0;
        v300 = 0;
        v301 = 0;
        goto LABEL_103;
      }
      v178 = v295;
      v179 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v171 + 32))(v295, v169, v170);
      v180 = FLFollowUpGroupSectionElement.headerText.getter(v179);
      if (v181)
      {
        v182 = HIBYTE(v181) & 0xF;
        if ((v181 & 0x2000000000000000) == 0)
          v182 = v180 & 0xFFFFFFFFFFFFLL;
        if (v182)
        {
          *(_QWORD *)&v325 = v180;
          *((_QWORD *)&v325 + 1) = v181;
          v183 = sub_100008A5C();
          v300 = (_QWORD *)Text.init<A>(_:)(&v325, &type metadata for String, v183);
          v175 = v184;
          v292 = v185;
          v176 = v186 & 1;
          goto LABEL_70;
        }
        swift_bridgeObjectRelease(v181);
      }
      v300 = 0;
      v175 = 0;
      v176 = 0;
      v292 = 0;
LABEL_70:
      v187 = FLFollowUpGroupSectionElement.footerText.getter();
      if (v188)
      {
        v189 = v188;
        v190 = HIBYTE(v188) & 0xF;
        if ((v188 & 0x2000000000000000) == 0)
          v190 = v187 & 0xFFFFFFFFFFFFLL;
        if (v190)
        {
          *(_QWORD *)&v325 = v187;
          *((_QWORD *)&v325 + 1) = v188;
          v191 = sub_100008A5C();
          v192 = Text.init<A>(_:)(&v325, &type metadata for String, v191);
          v194 = v193;
          v195 = v178;
          v172 = v192;
          v288 = v196;
          v198 = *(void (**)(char *, uint64_t))(v171 + 8);
          v174 = v197 & 1;
          v199 = v170;
          v173 = v194;
          v198(v195, v199);
LABEL_78:
          v177 = v292;
          goto LABEL_79;
        }
        (*(void (**)(char *, uint64_t))(v171 + 8))(v178, v170);
        swift_bridgeObjectRelease(v189);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v171 + 8))(v178, v170);
      }
      v172 = 0;
      v173 = 0;
      v174 = 0;
      v288 = 0;
      goto LABEL_78;
    }
    v103 = sub_1000F8504();
    v104 = (char *)v103 + OBJC_IVAR____TtC11SettingsApp29FollowUpListElementsGenerator_currentSnapshot;
    swift_beginAccess((char *)v103 + OBJC_IVAR____TtC11SettingsApp29FollowUpListElementsGenerator_currentSnapshot, &v320, 0, 0);
    v105 = (uint64_t)v104;
    v106 = v298;
    sub_1000076F0(v105, v298, type metadata accessor for FollowUpInformationProviderSnapshot);
    swift_release(v103);
    v107 = v299;
    sub_100018C00(v106 + v100[11], (uint64_t)v299, &qword_100157100);
    sub_1000076B4(v106, type metadata accessor for FollowUpInformationProviderSnapshot);
    v109 = v302;
    v108 = v303;
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v302 + 48))(v107, 1, v303) == 1)
    {
      sub_10000BA50((uint64_t)v107, &qword_100157100);
      v110 = 0;
      v111 = 0;
      v112 = 0;
      v113 = 0;
      v299 = 0;
      v114 = 0;
      v115 = 0;
      v116 = 0;
LABEL_55:
      v290 = v112;
      v291 = v113;
      v298 = v116;
      sub_10000BAA4((uint64_t)v299, v114, v115, v116);
      sub_10000BAA4(v110, v111, v112, v113);
      v139 = v110;
      v140 = sub_1000F8504();
      v141 = v111;
      v142 = (char *)v140 + OBJC_IVAR____TtC11SettingsApp29FollowUpListElementsGenerator_currentSnapshot;
      swift_beginAccess((char *)v140 + OBJC_IVAR____TtC11SettingsApp29FollowUpListElementsGenerator_currentSnapshot, &v319, 0, 0);
      v143 = (uint64_t)v142;
      v144 = v308;
      sub_1000076F0(v143, (uint64_t)v308, type metadata accessor for FollowUpInformationProviderSnapshot);
      swift_release(v140);
      v145 = *(_QWORD *)((char *)v144 + v307[12]);
      swift_bridgeObjectRetain(v145);
      sub_1000076B4((uint64_t)v144, type metadata accessor for FollowUpInformationProviderSnapshot);
      v146 = v330;
      sub_10000BA8C(5, 0, 2u);
      v288 = v115;
      v289 = v114;
      sub_10000BAA4((uint64_t)v299, v114, v115, v298);
      v294 = (char *)v139;
      v147 = v141;
      sub_10000BAA4(v139, v141, v290, v291);
      v292 = v145;
      swift_bridgeObjectRetain(v145);
      if ((swift_isUniquelyReferenced_nonNull_native(v146) & 1) != 0)
      {
        v148 = v299;
      }
      else
      {
        v148 = v299;
        v146 = sub_100052DA0(0, v146[2] + 1, 1, v146);
      }
      v150 = v146[2];
      v149 = v146[3];
      v286 = v150 + 1;
      v287 = v150;
      if (v150 >= v149 >> 1)
        v299 = sub_100052DA0((_QWORD *)(v149 > 1), v150 + 1, 1, v146);
      else
        v299 = v146;
      v326 = &type metadata for PrimarySettingsListSectionModel;
      v327 = &off_100148D50;
      v151 = swift_allocObject(&unk_10014E038, 112, 7);
      *(_QWORD *)&v325 = v151;
      *(_OWORD *)(v151 + 16) = xmmword_10011B570;
      *(_BYTE *)(v151 + 32) = 2;
      v152 = v288;
      v153 = v289;
      *(_QWORD *)(v151 + 40) = v148;
      *(_QWORD *)(v151 + 48) = v153;
      v155 = v298;
      v154 = v299;
      *(_QWORD *)(v151 + 56) = v152;
      *(_QWORD *)(v151 + 64) = v155;
      v156 = (uint64_t)v294;
      *(_QWORD *)(v151 + 72) = v294;
      *(_QWORD *)(v151 + 80) = v147;
      v285 = v147;
      v157 = v290;
      v158 = v291;
      *(_QWORD *)(v151 + 88) = v290;
      *(_QWORD *)(v151 + 96) = v158;
      *(_QWORD *)(v151 + 104) = v292;
      v159 = v287;
      v154[2] = v286;
      sub_10003CDE8(&v325, (uint64_t)&v154[5 * v159 + 4]);
      v160 = v156;
      v161 = v285;
      sub_10000BAFC(v160, v285, v157, v158);
      sub_10000BAFC((uint64_t)v148, v153, v152, v155);
      sub_10000BAE4(5, 0, 2u);
      sub_10000BAFC((uint64_t)v148, v153, v152, v155);
      sub_10000BAFC((uint64_t)v294, v161, v157, v158);
      swift_bridgeObjectRelease(v292);
      v330 = v299;
      v54 = v308;
      v100 = v307;
      goto LABEL_60;
    }
    v117 = (uint64_t)v294;
    v118 = (*(uint64_t (**)(char *, _QWORD *, uint64_t))(v109 + 32))(v294, v107, v108);
    v119 = FLFollowUpGroupSectionElement.headerText.getter(v118);
    if (v120)
    {
      v121 = HIBYTE(v120) & 0xF;
      if ((v120 & 0x2000000000000000) == 0)
        v121 = v119 & 0xFFFFFFFFFFFFLL;
      if (v121)
      {
        *(_QWORD *)&v325 = v119;
        *((_QWORD *)&v325 + 1) = v120;
        v122 = sub_100008A5C();
        v123 = (_QWORD *)Text.init<A>(_:)(&v325, &type metadata for String, v122);
        v298 = v124;
        v299 = v123;
        v288 = v125 & 1;
        v289 = v126;
        goto LABEL_46;
      }
      swift_bridgeObjectRelease(v120);
    }
    v298 = 0;
    v299 = 0;
    v288 = 0;
    v289 = 0;
LABEL_46:
    v127 = FLFollowUpGroupSectionElement.footerText.getter();
    if (v128)
    {
      v129 = v128;
      v130 = HIBYTE(v128) & 0xF;
      if ((v128 & 0x2000000000000000) == 0)
        v130 = v127 & 0xFFFFFFFFFFFFLL;
      if (v130)
      {
        *(_QWORD *)&v325 = v127;
        *((_QWORD *)&v325 + 1) = v128;
        v131 = sub_100008A5C();
        v132 = Text.init<A>(_:)(&v325, &type metadata for String, v131);
        v133 = v117;
        v110 = v132;
        v135 = v134;
        v113 = v136;
        v112 = v137 & 1;
        v138 = v108;
        v111 = v135;
        (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v133, v138);
LABEL_54:
        v115 = v288;
        v114 = v289;
        v116 = v298;
        goto LABEL_55;
      }
      (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v117, v108);
      swift_bridgeObjectRelease(v129);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v117, v108);
    }
    v110 = 0;
    v111 = 0;
    v112 = 0;
    v113 = 0;
    goto LABEL_54;
  }
LABEL_113:
  v281 = objc_msgSend((id)objc_opt_self(PSLaunchTracker), "sharedInstance");
  v282 = objc_msgSend(v281, "launchHasCompleted");

  if (v282)
  {
    v283 = sub_1000F8504();
    v284 = *v304;
    sub_10010565C((uint64_t)v283);

    swift_release(v283);
  }
}

_QWORD *sub_100103220(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  ValueMetadata *v29;
  _UNKNOWN **v30;
  _QWORD *v31;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    v31 = _swiftEmptyArrayStorage;
    sub_10000F304(0, v1, 0);
    v2 = _swiftEmptyArrayStorage;
    v4 = (uint64_t *)(a1 + 64);
    do
    {
      v5 = v2;
      v7 = *(v4 - 1);
      v6 = *v4;
      v8 = v4[1];
      v9 = v4[2];
      v10 = v4[3];
      v11 = v4[4];
      v12 = v4[5];
      v20 = v4[6];
      v21 = v1;
      v13 = v4[7];
      v26 = *(v4 - 3);
      v27 = *(v4 - 4);
      v23 = *((_BYTE *)v4 - 16);
      sub_10000BA8C(v27, v26, v23);
      v22 = v7;
      v14 = v7;
      v15 = v6;
      v2 = v5;
      sub_10000BAA4(v14, v15, v8, v9);
      v24 = v11;
      v25 = v10;
      sub_10000BAA4(v10, v11, v12, v20);
      v31 = v5;
      v16 = v5[2];
      v17 = v5[3];
      swift_bridgeObjectRetain(v13);
      if (v16 >= v17 >> 1)
      {
        sub_10000F304(v17 > 1, v16 + 1, 1);
        v2 = v31;
      }
      v29 = &type metadata for PrimarySettingsListSectionModel;
      v30 = &off_100148D50;
      v18 = swift_allocObject(&unk_10014E038, 112, 7);
      *(_QWORD *)&v28 = v18;
      *(_QWORD *)(v18 + 16) = v27;
      *(_QWORD *)(v18 + 24) = v26;
      *(_BYTE *)(v18 + 32) = v23;
      *(_QWORD *)(v18 + 40) = v22;
      *(_QWORD *)(v18 + 48) = v15;
      *(_QWORD *)(v18 + 56) = v8;
      *(_QWORD *)(v18 + 64) = v9;
      *(_QWORD *)(v18 + 72) = v25;
      *(_QWORD *)(v18 + 80) = v24;
      *(_QWORD *)(v18 + 88) = v12;
      *(_QWORD *)(v18 + 96) = v20;
      *(_QWORD *)(v18 + 104) = v13;
      v2[2] = v16 + 1;
      sub_10003CDE8(&v28, (uint64_t)&v2[5 * v16 + 4]);
      v4 += 12;
      v1 = v21 - 1;
    }
    while (v21 != 1);
  }
  return v2;
}

uint64_t sub_1001033D8@<X0>(_QWORD *a1@<X0>, void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  os_signpost_type_t v25;
  char *v26;
  uint64_t v27;
  os_signpost_id_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void (*v32)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t);
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  os_signpost_id_t v37;
  uint64_t v38;
  uint8_t *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  void **v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[5];
  _QWORD v51[3];
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v45 = a2;
  v48 = a3;
  v49 = type metadata accessor for OSSignpostID(0);
  v47 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OSSignposter(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100156CD8 != -1)
    swift_once(&qword_100156CD8, sub_10008BEEC);
  v10 = sub_100007808(v6, (uint64_t)qword_10015D340);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
  v11 = sub_10003CE00((uint64_t)a1, (uint64_t)v51);
  static OSSignpostID.exclusive.getter(v11);
  v41 = v5;
  v46 = v6;
  v12 = (uint8_t *)swift_slowAlloc(12, -1);
  v43 = swift_slowAlloc(32, -1);
  v56 = v43;
  v44 = v7;
  *(_DWORD *)v12 = 136315138;
  v40 = v12 + 4;
  v14 = v52;
  v13 = v53;
  sub_100007C2C(v51, v52);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v14, v13);
  v17 = (uint64_t)v16;
  LOBYTE(v14) = v18;
  v19 = sub_1000B9650(v15, v16, v18);
  v42 = v9;
  v21 = v20;
  sub_10000BAE4(v15, v17, v14);
  v54 = sub_1000DA1F0(v19, v21, &v56);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v40, v12 + 12);
  swift_bridgeObjectRelease(v21);
  v22 = sub_100005474(v51);
  v23 = OSSignposter.logHandle.getter(v22);
  v24 = static os_signpost_type_t.begin.getter();
  v25 = v24;
  v26 = v41;
  v28 = OSSignpostID.rawValue.getter(v24, v27);
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v23, v25, v28, "PrimarySettingsList Data Model Section Snapshot", "%s", v12, 0xCu);
  v29 = a1[3];
  v30 = a1[4];
  sub_100007C2C(a1, v29);
  v31 = *v45;
  v50[3] = &type metadata for PrimarySettingsListDataModelGenerationContext;
  v50[4] = &off_100148E38;
  v50[0] = v31;
  v32 = *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t))(v30 + 16);
  v33 = v31;
  v32(&v54, v50, v29, v30);
  v34 = sub_100005474(v50);
  v35 = static os_signpost_type_t.end.getter(v34);
  LOBYTE(v29) = v35;
  v37 = OSSignpostID.rawValue.getter(v35, v36);
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v23, (os_signpost_type_t)v29, v37, "PrimarySettingsList Data Model Section Snapshot", "%s", v12, 0xCu);

  v38 = v43;
  swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v38, -1, -1);
  swift_slowDealloc(v12, -1, -1);
  sub_10007E96C((uint64_t)&v54, v48, (uint64_t *)&unk_10015C9B0);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v26, v49);
  return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v42, v46);
}

uint64_t sub_100103798(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD v4[2];
  char v5;

  v4[0] = a1;
  v4[1] = a2;
  v5 = a3;
  return PassthroughSubject.send(_:)(v4);
}

uint64_t sub_1001037E0(uint64_t (*a1)(void))
{
  return a1();
}

void sub_100103808()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 16) = *(_BYTE *)(v0 + 24);
}

uint64_t sub_100103818(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1000A85F8(a1, a2);
  sub_100104F8C(a1, a2);
  v5 = v4;
  sub_1000A85B4(a1, a2);
  v6 = static String._fromUTF8Repairing(_:)(v5 + 32, *(_QWORD *)(v5 + 16));
  swift_release(v5);
  return v6;
}

uint64_t sub_10010388C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  if (a1)
    v4 = a2 - a1;
  else
    v4 = 0;
  result = static String._fromUTF8Repairing(_:)(a1, v4);
  *a3 = result;
  a3[1] = v6;
  return result;
}

uint64_t sub_1001038C4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  void (*v18[4])(id *);

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_100007868((unint64_t *)&unk_10015CB10, (uint64_t *)&unk_10015CB00, (uint64_t)&protocol conformance descriptor for [A]);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_100004FC8((uint64_t *)&unk_10015CB00);
          v13 = sub_100055760(v18, i, a3);
          v15 = *v14;
          ((void (*)(void (**)(id *), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_100007BBC(0, &qword_100158BD8, CSSearchableItem_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100103AE0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  void (*v18[4])(id *);

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_100007868(&qword_10015CB28, &qword_10015CB20, (uint64_t)&protocol conformance descriptor for [A]);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_100004FC8(&qword_10015CB20);
          v13 = sub_1000557B8(v18, i, a3);
          v15 = *v14;
          ((void (*)(void (**)(id *), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_100007BBC(0, (unint64_t *)&qword_100158298, NSBundle_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100103CFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  NSString v8;
  void *v9;
  NSString v10;
  unint64_t v11;
  void *v12;
  NSString v13;
  unint64_t v14;
  uint64_t result;
  __int128 v16;
  uint64_t v17;
  _UNKNOWN **v18;

  v17 = type metadata accessor for PrimarySettingsListModel(0);
  v18 = &off_10014DED0;
  *(_QWORD *)&v16 = a1;
  v4 = a2 + OBJC_IVAR____TtC11SettingsApp19VPNListItemProvider_id;
  v5 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  swift_storeEnumTagMultiPayload(v4, v5, 14);
  v6 = OBJC_IVAR____TtC11SettingsApp19VPNListItemProvider_hasRelayConfigurations;
  if (qword_100156C20 != -1)
    swift_once(&qword_100156C20, sub_10001EBF8);
  v7 = (void *)qword_10015D170;
  v8 = String._bridgeToObjectiveC()();
  LOBYTE(v7) = objc_msgSend(v7, "BOOLForKey:", v8);

  *(_BYTE *)(a2 + v6) = (_BYTE)v7;
  v9 = (void *)qword_10015D170;
  v10 = String._bridgeToObjectiveC()();
  v11 = (unint64_t)objc_msgSend(v9, "integerForKey:", v10);

  if ((v11 & 0x8000000000000000) != 0
    || (*(_QWORD *)(a2 + OBJC_IVAR____TtC11SettingsApp19VPNListItemProvider_visibilityStyle) = v11,
        v12 = (void *)qword_10015D170,
        v13 = String._bridgeToObjectiveC()(),
        v14 = (unint64_t)objc_msgSend(v12, "integerForKey:", v13),
        v13,
        (v14 & 0x8000000000000000) != 0))
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + OBJC_IVAR____TtC11SettingsApp19VPNListItemProvider_connectivityState) = v14;
    *(_QWORD *)(a2 + OBJC_IVAR____TtC11SettingsApp19VPNListItemProvider_vpnConnectivityManager) = 0;
    sub_10003CDE8(&v16, a2 + OBJC_IVAR____TtC11SettingsApp19VPNListItemProvider_invalidator);
    return a2;
  }
  return result;
}

id sub_100103F04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id result;
  void *v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  NSString v16;
  uint64_t v17;
  void *v18;
  NSString v19;
  __int128 v20;
  uint64_t v21;
  _UNKNOWN **v22;

  v21 = type metadata accessor for PrimarySettingsListModel(0);
  v22 = &off_10014DED0;
  *(_QWORD *)&v20 = a1;
  result = objc_msgSend((id)objc_opt_self(PSSystemConfigurationDynamicStoreNETRBWatcher), "sharedManager");
  if (result)
  {
    v9 = result;
    v10 = objc_msgSend(result, "isTetheringEnabled");

    *(_BYTE *)(a4 + 16) = v10;
    v11 = a4 + OBJC_IVAR____TtC11SettingsApp31PersonalHotspotListItemProvider_id;
    v12 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    swift_storeEnumTagMultiPayload(v11, v12, 13);
    v13 = a4 + OBJC_IVAR____TtC11SettingsApp31PersonalHotspotListItemProvider_cancellable;
    *(_QWORD *)(v13 + 32) = 0;
    *(_OWORD *)v13 = 0u;
    *(_OWORD *)(v13 + 16) = 0u;
    v14 = OBJC_IVAR____TtC11SettingsApp31PersonalHotspotListItemProvider_shouldShow;
    if (qword_100156C38 != -1)
      swift_once(&qword_100156C38, sub_100046660);
    v15 = (void *)qword_10015D1A8;
    v16 = String._bridgeToObjectiveC()();
    LOBYTE(v15) = objc_msgSend(v15, "BOOLForKey:", v16);

    *(_BYTE *)(a4 + v14) = (_BYTE)v15;
    v17 = OBJC_IVAR____TtC11SettingsApp31PersonalHotspotListItemProvider_shouldDisable;
    v18 = (void *)qword_10015D1A8;
    v19 = String._bridgeToObjectiveC()();
    LOBYTE(v18) = objc_msgSend(v18, "BOOLForKey:", v19);

    *(_BYTE *)(a4 + v17) = (_BYTE)v18;
    sub_10003CDE8(&v20, a4 + OBJC_IVAR____TtC11SettingsApp31PersonalHotspotListItemProvider_invalidator);
    *(_QWORD *)(a4 + OBJC_IVAR____TtC11SettingsApp31PersonalHotspotListItemProvider_airplaneModeListItemProvider) = a2;
    *(_QWORD *)(a4 + OBJC_IVAR____TtC11SettingsApp31PersonalHotspotListItemProvider_cellularDataSettingObserver) = a3;
    return (id)a4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

char *sub_1001040D8(uint64_t a1, void *a2)
{
  objc_class *ObjectType;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  id v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  id v50[3];
  id v51;
  objc_super v52;
  _QWORD v53[5];
  uint64_t v54[7];

  ObjectType = (objc_class *)swift_getObjectType(a2);
  v5 = sub_100004FC8((uint64_t *)&unk_10015C970);
  __chkstk_darwin(v5);
  v49 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004FC8((uint64_t *)&unk_10015C5E0);
  __chkstk_darwin(v7);
  v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = type metadata accessor for NSRunLoop.SchedulerTimeType.Stride(0);
  v43 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_100004FC8(&qword_10015C980);
  v45 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100004FC8(&qword_10015C988);
  v47 = *(_QWORD *)(v14 - 8);
  v48 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53[3] = type metadata accessor for PrimarySettingsListModel(0);
  v53[4] = &off_10014DED0;
  v53[0] = a1;
  v17 = (uint64_t)a2 + OBJC_IVAR____TtC11SettingsApp33PrimaryAppleAccountStatusObserver_accountStatus;
  v18 = a2;
  sub_1000A863C(v54);
  sub_100018BA0((uint64_t)v54, v17);
  *(_QWORD *)&v18[OBJC_IVAR____TtC11SettingsApp33PrimaryAppleAccountStatusObserver_accountStore] = 0;
  v19 = OBJC_IVAR____TtC11SettingsApp33PrimaryAppleAccountStatusObserver_updateAccountStatusSubject;
  v20 = sub_100004FC8(&qword_10015C540);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  *(_QWORD *)&v18[v19] = PassthroughSubject.init()();
  *(_QWORD *)&v18[OBJC_IVAR____TtC11SettingsApp33PrimaryAppleAccountStatusObserver_cancellables] = &_swiftEmptySetSingleton;
  sub_10003CE00((uint64_t)v53, (uint64_t)&v18[OBJC_IVAR____TtC11SettingsApp33PrimaryAppleAccountStatusObserver_invalidator]);

  v52.receiver = v18;
  v52.super_class = ObjectType;
  v21 = (char *)objc_msgSendSuper2(&v52, "init");
  v50[0] = *(id *)&v21[OBJC_IVAR____TtC11SettingsApp33PrimaryAppleAccountStatusObserver_updateAccountStatusSubject];
  v22 = v50[0];
  v23 = v21;
  swift_retain(v22);
  static NSRunLoop.SchedulerTimeType.Stride.milliseconds(_:)(50);
  v51 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
  v24 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v9, 1, 1, v24);
  v25 = sub_100007BBC(0, &qword_10015C5F8, NSRunLoop_ptr);
  v26 = sub_100007868(&qword_10015C600, &qword_10015C540, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v27 = sub_10010653C((unint64_t *)&qword_10015C608, &qword_10015C5F8, NSRunLoop_ptr, (uint64_t)&protocol conformance descriptor for NSRunLoop);
  Publisher.debounce<A>(for:scheduler:options:)(v11, &v51, v9, v20, v25, v26, v27);
  sub_10000BA50((uint64_t)v9, (uint64_t *)&unk_10015C5E0);

  (*(void (**)(char *, uint64_t))(v43 + 8))(v11, v44);
  swift_release(v50[0]);
  if (qword_100156D60 != -1)
    swift_once(&qword_100156D60, sub_1000D34BC);
  v28 = (void *)qword_10015D420;
  v50[0] = (id)qword_10015D420;
  v29 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v30 = (uint64_t)v49;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v49, 1, 1, v29);
  v31 = sub_100007BBC(0, (unint64_t *)&qword_100159D30, OS_dispatch_queue_ptr);
  v32 = sub_100007868(&qword_10015C610, &qword_10015C980, (uint64_t)&protocol conformance descriptor for Publishers.Debounce<A, B>);
  v33 = sub_10010653C((unint64_t *)&qword_10015C990, (unint64_t *)&qword_100159D30, OS_dispatch_queue_ptr, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  v34 = v28;
  v35 = v46;
  Publisher.receive<A>(on:options:)(v50, v30, v46, v31, v32, v33);
  sub_10000BA50(v30, (uint64_t *)&unk_10015C970);

  (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v35);
  v36 = swift_allocObject(&unk_10014DFC0, 24, 7);
  swift_unknownObjectWeakInit(v36 + 16, v23);
  v37 = sub_100007868(&qword_10015C998, &qword_10015C988, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v38 = v48;
  v39 = Publisher<>.sink(receiveValue:)(sub_1001065A0, v36, v48, v37);
  swift_release(v36);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v16, v38);
  v40 = &v23[OBJC_IVAR____TtC11SettingsApp33PrimaryAppleAccountStatusObserver_cancellables];
  swift_beginAccess(&v23[OBJC_IVAR____TtC11SettingsApp33PrimaryAppleAccountStatusObserver_cancellables], v50, 33, 0);
  AnyCancellable.store(in:)(v40);
  swift_endAccess(v50);
  swift_release(v39);

  sub_100005474(v53);
  return v23;
}

uint64_t sub_100104638(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 16) = a1;
  v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = v2;
  v3[1] = sub_1001046A0;
  return v5(v2 + 32);
}

uint64_t sub_1001046A0()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v4;

  v1 = *v0;
  v2 = *(_BYTE **)(*v0 + 16);
  v4 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 24));
  *v2 = *(_BYTE *)(v1 + 32);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

id sub_1001046F0(uint64_t a1, char *a2)
{
  objc_class *ObjectType;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  objc_super v12;
  _QWORD v13[5];

  ObjectType = (objc_class *)swift_getObjectType(a2);
  v13[3] = type metadata accessor for PrimarySettingsListModel(0);
  v13[4] = &off_10014DED0;
  v13[0] = a1;
  v5 = &a2[OBJC_IVAR____TtC11SettingsApp25SatelliteListItemProvider_id];
  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  swift_storeEnumTagMultiPayload(v5, v6, 16);
  v7 = OBJC_IVAR____TtC11SettingsApp25SatelliteListItemProvider_satelliteStateLock;
  v8 = sub_100004FC8(&qword_10015CA58);
  v9 = swift_allocObject(v8, 20, 7);
  *(_QWORD *)&a2[v7] = v9;
  *(_OWORD *)&a2[OBJC_IVAR____TtC11SettingsApp25SatelliteListItemProvider_satelliteState] = xmmword_100118BF0;
  *(_DWORD *)(v9 + 16) = 0;
  *(_QWORD *)&a2[OBJC_IVAR____TtC11SettingsApp25SatelliteListItemProvider_stewieStateMonitor] = 0;
  *(_QWORD *)&a2[OBJC_IVAR____TtC11SettingsApp25SatelliteListItemProvider_idsOffGridStateManager] = 0;
  sub_10003CE00((uint64_t)v13, (uint64_t)&a2[OBJC_IVAR____TtC11SettingsApp25SatelliteListItemProvider_invalidator]);
  v12.receiver = a2;
  v12.super_class = ObjectType;
  v10 = objc_msgSendSuper2(&v12, "init");
  sub_100005474(v13);
  return v10;
}

uint64_t sub_1001047FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v13[5];

  v4 = sub_100004FC8(&qword_10015C5A0);
  __chkstk_darwin(v4);
  v6 = (char *)&v13[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[3] = type metadata accessor for PrimarySettingsListModel(0);
  v13[4] = &off_10014DED0;
  v13[0] = a1;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 2;
  sub_10003CE00((uint64_t)v13, a2 + 40);
  v7 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = swift_allocObject(&unk_10014E0B0, 24, 7);
  swift_weakInit(v8 + 16, a2);
  v9 = (_QWORD *)swift_allocObject(&unk_10014E0D8, 40, 7);
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = v8;
  v10 = sub_10004CF9C((uint64_t)v6, (uint64_t)&unk_10015CA68, (uint64_t)v9);
  swift_release(v10);
  sub_100005474(v13);
  sub_10000BA50((uint64_t)v6, &qword_10015C5A0);
  return a2;
}

uint64_t sub_10010492C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  _QWORD v12[5];

  v12[3] = type metadata accessor for PrimarySettingsListModel(0);
  v12[4] = &off_10014DED0;
  v12[0] = a1;
  *(_OWORD *)(a2 + 16) = xmmword_10011B5A0;
  *(_BYTE *)(a2 + 32) = 2;
  *(_QWORD *)(a2 + 40) = &_swiftEmptySetSingleton;
  sub_10003CE00((uint64_t)v12, a2 + 48);
  v4 = type metadata accessor for ScreenSharingInteractionController(0);
  v5 = (void *)static ScreenSharingInteractionController.shared.getter();
  v6 = sub_100007828(&qword_10015CA60, (uint64_t (*)(uint64_t))&type metadata accessor for ScreenSharingInteractionController, (uint64_t)&protocol conformance descriptor for ScreenSharingInteractionController);
  v7 = ObservableObject<>.objectWillChange.getter(v4, v6);

  v11[0] = v7;
  v8 = type metadata accessor for ObservableObjectPublisher(0);
  swift_retain(a2);
  v9 = Publisher<>.sink(receiveValue:)(sub_1001068EC, a2, v8, &protocol witness table for ObservableObjectPublisher);
  swift_release(a2);
  swift_release(v11[0]);
  swift_beginAccess(a2 + 40, v11, 33, 0);
  AnyCancellable.store(in:)(a2 + 40);
  swift_endAccess(v11);
  swift_release(v9);
  sub_100005474(v12);
  return a2;
}

id sub_100104A7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  objc_class *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  id v17;
  objc_super v19;
  _QWORD v20[5];
  _QWORD v21[5];

  v6 = type metadata accessor for PrimarySettingsListModel(0);
  v21[3] = v6;
  v21[4] = &off_10014DED0;
  v21[0] = a1;
  v7 = (objc_class *)type metadata accessor for PrimaryAppleAccountListSectionProvider(0);
  v8 = objc_allocWithZone(v7);
  v9 = sub_1000D2B68((uint64_t)v21, v6);
  __chkstk_darwin(v9);
  v11 = (uint64_t *)((char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v12 + 16))(v11);
  v13 = *v11;
  v20[3] = v6;
  v20[4] = &off_10014DED0;
  v20[0] = v13;
  v14 = &v8[OBJC_IVAR____TtC11SettingsApp38PrimaryAppleAccountListSectionProvider_id];
  *(_OWORD *)v14 = xmmword_10011B5B0;
  v14[16] = 2;
  v8[OBJC_IVAR____TtC11SettingsApp38PrimaryAppleAccountListSectionProvider_registeredForFamilyChange] = 0;
  v15 = &v8[OBJC_IVAR____TtC11SettingsApp38PrimaryAppleAccountListSectionProvider____lazy_storage___familyModel];
  v16 = type metadata accessor for PrimarySettingsListFamilyLinkModel(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  sub_10003CE00((uint64_t)v20, (uint64_t)&v8[OBJC_IVAR____TtC11SettingsApp38PrimaryAppleAccountListSectionProvider_invalidator]);
  *(_QWORD *)&v8[OBJC_IVAR____TtC11SettingsApp38PrimaryAppleAccountListSectionProvider_primaryAppleAccountStatusObserver] = a2;
  *(_QWORD *)&v8[OBJC_IVAR____TtC11SettingsApp38PrimaryAppleAccountListSectionProvider_followUpListElementsGenerator] = a3;
  v19.receiver = v8;
  v19.super_class = v7;
  v17 = objc_msgSendSuper2(&v19, "init");
  sub_100005474(v20);
  sub_100005474(v21);
  return v17;
}

id sub_100104C00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  objc_class *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  id v17;
  objc_super v19;
  _QWORD v20[5];
  _QWORD v21[5];

  v6 = type metadata accessor for PrimarySettingsListModel(0);
  v21[3] = v6;
  v21[4] = &off_10014DED0;
  v21[0] = a1;
  v7 = (objc_class *)type metadata accessor for CellularDataListItemProvider(0);
  v8 = (char *)objc_allocWithZone(v7);
  v9 = sub_1000D2B68((uint64_t)v21, v6);
  __chkstk_darwin(v9);
  v11 = (uint64_t *)((char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v12 + 16))(v11);
  v13 = *v11;
  v20[3] = v6;
  v20[4] = &off_10014DED0;
  v20[0] = v13;
  v14 = &v8[OBJC_IVAR____TtC11SettingsApp28CellularDataListItemProvider_id];
  v15 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  swift_storeEnumTagMultiPayload(v14, v15, 12);
  v16 = &v8[OBJC_IVAR____TtC11SettingsApp28CellularDataListItemProvider_cancellable];
  *((_QWORD *)v16 + 4) = 0;
  *(_OWORD *)v16 = 0u;
  *((_OWORD *)v16 + 1) = 0u;
  sub_10003CE00((uint64_t)v20, (uint64_t)&v8[OBJC_IVAR____TtC11SettingsApp28CellularDataListItemProvider_invalidator]);
  *(_QWORD *)&v8[OBJC_IVAR____TtC11SettingsApp28CellularDataListItemProvider_airplaneModeListItemProvider] = a2;
  *(_QWORD *)&v8[OBJC_IVAR____TtC11SettingsApp28CellularDataListItemProvider_cellularDataSettingObserver] = a3;
  v19.receiver = v8;
  v19.super_class = v7;
  v17 = objc_msgSendSuper2(&v19, "init");
  sub_100005474(v20);
  sub_100005474(v21);
  return v17;
}

id sub_100104D64(uint64_t *a1)
{
  uint64_t v1;
  objc_class *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  id v11;
  objc_super v13;
  _QWORD v14[5];
  _QWORD v15[3];
  uint64_t v16;
  _UNKNOWN **v17;

  v16 = *a1;
  v1 = v16;
  v17 = &off_10014DED0;
  v15[0] = a1;
  v2 = (objc_class *)type metadata accessor for GeneralSettingsListItemProvider(0);
  v3 = objc_allocWithZone(v2);
  v4 = sub_1000D2B68((uint64_t)v15, v16);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v7 + 16))(v6);
  v8 = *v6;
  v14[3] = v1;
  v14[4] = &off_10014DED0;
  v14[0] = v8;
  v9 = &v3[OBJC_IVAR____TtC11SettingsApp31GeneralSettingsListItemProvider_id];
  v10 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  swift_storeEnumTagMultiPayload(v9, v10, 21);
  v3[OBJC_IVAR____TtC11SettingsApp31GeneralSettingsListItemProvider_badgedForSoftwareUpdate] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11SettingsApp31GeneralSettingsListItemProvider_softwareUpdateClient] = 0;
  sub_10003CE00((uint64_t)v14, (uint64_t)&v3[OBJC_IVAR____TtC11SettingsApp31GeneralSettingsListItemProvider_invalidator]);
  v13.receiver = v3;
  v13.super_class = v2;
  v11 = objc_msgSendSuper2(&v13, "init");
  sub_100005474(v14);
  sub_100005474(v15);
  return v11;
}

_QWORD *sub_100104E94(uint64_t a1, uint64_t a2, _QWORD *(*a3)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  if (a1)
    v4 = a2 - a1;
  else
    v4 = 0;
  result = a3(&v6, a1, v4);
  if (!v3)
    return (_QWORD *)v6;
  return result;
}

_QWORD *sub_100104EE0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *(*a4)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  result = (_QWORD *)__DataStorage._bytes.getter();
  v9 = (uint64_t)result;
  if (result)
  {
    result = (_QWORD *)__DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v9 += a1 - (_QWORD)result;
  }
  v10 = __OFSUB__(a2, a1);
  v11 = a2 - a1;
  if (v10)
  {
    __break(1u);
    goto LABEL_15;
  }
  v12 = __DataStorage._length.getter();
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v12;
  v14 = v9 + v13;
  if (v9)
    v15 = v14;
  else
    v15 = 0;
  result = sub_100104E94(v9, v15, a4);
  if (v4)
    return (_QWORD *)v16;
  return result;
}

void sub_100104F8C(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Data.Iterator(0);
  __chkstk_darwin();
  __asm { BR              X10 }
}

_QWORD *sub_100105008()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;

  if (BYTE6(v0))
  {
    v6 = sub_100004FC8(&qword_10015C1F8);
    v4 = (_QWORD *)swift_allocObject(v6, BYTE6(v0) + 32, 7);
    v7 = j__malloc_size(v4);
    v4[2] = BYTE6(v0);
    v4[3] = 2 * v7 - 64;
    sub_1000A85F8(v2, v0);
    v8 = ((uint64_t (*)(uint64_t, _QWORD *, _QWORD, uint64_t, unint64_t))Data._copyContents(initializing:))(v3, v4 + 4, BYTE6(v0), v2, v0);
    sub_1000A85B4(v2, v0);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v1);
    if (v8 != BYTE6(v0))
    {
      __break(1u);
      JUMPOUT(0x1001050DCLL);
    }
  }
  return v4;
}

uint64_t sub_1001050F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;

  if (!a1)
    a2 = 0;
  result = static String._fromUTF8Repairing(_:)(a1, a2);
  *a3 = result;
  a3[1] = v5;
  return result;
}

void *sub_100105128(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  uint64_t v16;
  uint64_t v18;

  if ((unint64_t)a1 >> 62)
    goto LABEL_26;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v6)
  {
    v18 = a2;
    a2 = 4;
    while (1)
    {
      v7 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2 - 4, a1)
         : *(id *)(a1 + 8 * a2);
      v8 = v7;
      v9 = a2 - 3;
      if (__OFADD__(a2 - 4, 1))
        break;
      v10 = objc_msgSend(v7, "identifier");
      if (!v10)
      {
        v10 = objc_msgSend(v8, "label");
        if (!v10)
        {
          if (!a3)
          {
LABEL_22:
            v13 = a1;
LABEL_24:
            swift_bridgeObjectRelease(v13);
            return v8;
          }
          goto LABEL_20;
        }
      }
      v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
      v13 = v12;

      if (a3)
      {
        if (v11 == v18 && v13 == a3)
        {
          swift_bridgeObjectRelease(a1);
          goto LABEL_24;
        }
        v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v13, v18, a3, 0);
        swift_bridgeObjectRelease(v13);
        if ((v15 & 1) != 0)
          goto LABEL_22;
LABEL_20:

        goto LABEL_5;
      }

      swift_bridgeObjectRelease(v13);
LABEL_5:
      ++a2;
      if (v9 == v6)
        goto LABEL_30;
    }
    __break(1u);
LABEL_26:
    if (a1 < 0)
      v16 = a1;
    else
      v16 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v6 = _CocoaArrayWrapper.endIndex.getter(v16);
  }
LABEL_30:
  swift_bridgeObjectRelease(a1);
  return 0;
}

id sub_1001052FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, char a6, _BYTE *a7)
{
  _OWORD *v14;
  _QWORD *v15;
  _BYTE *v16;
  id v17;
  NSString v18;
  id v19;
  objc_super v21;
  _QWORD v22[5];

  v22[3] = type metadata accessor for PrimarySettingsListModel(0);
  v22[4] = &off_10014DED0;
  v22[0] = a2;
  v14 = &a7[OBJC_IVAR____TtC11SettingsApp48DefaultsObservingPrimarySettingsListItemProvider_defaultsObserver];
  *v14 = 0u;
  v14[1] = 0u;
  sub_1000076F0(a1, (uint64_t)&a7[OBJC_IVAR____TtC11SettingsApp48DefaultsObservingPrimarySettingsListItemProvider_id], type metadata accessor for PrimarySettingsListItemIdentifier);
  sub_10003CE00((uint64_t)v22, (uint64_t)&a7[OBJC_IVAR____TtC11SettingsApp48DefaultsObservingPrimarySettingsListItemProvider_invalidator]);
  v15 = &a7[OBJC_IVAR____TtC11SettingsApp48DefaultsObservingPrimarySettingsListItemProvider_defaultsKey];
  *v15 = a3;
  v15[1] = a4;
  *(_QWORD *)&a7[OBJC_IVAR____TtC11SettingsApp48DefaultsObservingPrimarySettingsListItemProvider_userDefaults] = a5;
  a7[OBJC_IVAR____TtC11SettingsApp48DefaultsObservingPrimarySettingsListItemProvider_shownWhen] = a6;
  v16 = a7;
  swift_bridgeObjectRetain(a4);
  v17 = a5;
  v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  LOBYTE(a4) = objc_msgSend(v17, "BOOLForKey:", v18);

  v16[OBJC_IVAR____TtC11SettingsApp48DefaultsObservingPrimarySettingsListItemProvider_shouldShow] = a4 ^ a6 ^ 1;
  v21.receiver = v16;
  v21.super_class = (Class)type metadata accessor for DefaultsObservingPrimarySettingsListItemProvider(0);
  v19 = objc_msgSendSuper2(&v21, "init");
  sub_100005474(v22);
  sub_1000076B4(a1, type metadata accessor for PrimarySettingsListItemIdentifier);
  return v19;
}

id sub_100105478(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, char a6)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  _QWORD v30[3];
  uint64_t v31;
  _UNKNOWN **v32;
  _QWORD v33[5];
  _QWORD v34[5];

  v12 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v30[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for PrimarySettingsListModel(0);
  v34[3] = v15;
  v34[4] = &off_10014DED0;
  v34[0] = a2;
  sub_1000076F0(a1, (uint64_t)v14, type metadata accessor for PrimarySettingsListItemIdentifier);
  sub_10003CE00((uint64_t)v34, (uint64_t)v33);
  v16 = sub_1000D2B68((uint64_t)v33, v33[3]);
  __chkstk_darwin(v16);
  v18 = (_QWORD *)((char *)&v30[-1] - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v19 + 16))(v18);
  v20 = *v18;
  v31 = v15;
  v32 = &off_10014DED0;
  v30[0] = v20;
  v21 = objc_allocWithZone((Class)type metadata accessor for DefaultsObservingPrimarySettingsListItemProvider(0));
  v22 = sub_1000D2B68((uint64_t)v30, v31);
  __chkstk_darwin(v22);
  v24 = (_QWORD *)((char *)&v30[-1] - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v25 + 16))(v24);
  v26 = *v24;
  swift_bridgeObjectRetain(a4);
  v27 = sub_1001052FC((uint64_t)v14, v26, a3, a4, a5, a6, v21);
  sub_100005474(v30);
  sub_100005474(v33);
  sub_100005474(v34);
  sub_1000076B4(a1, type metadata accessor for PrimarySettingsListItemIdentifier);
  return v27;
}

void sub_10010565C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  char *v44;
  void *v45;
  uint64_t v46;
  id v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  id v67[3];
  id v68;

  v2 = sub_100004FC8(&qword_10015C9C0);
  v62 = *(_QWORD *)(v2 - 8);
  v63 = v2;
  __chkstk_darwin(v2);
  v61 = (char *)&v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100004FC8((uint64_t *)&unk_10015C970);
  __chkstk_darwin(v4);
  v65 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
  v6 = *(_QWORD *)(v66 - 8);
  __chkstk_darwin(v66);
  v64 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004FC8(&qword_10015C9C8);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100004FC8((uint64_t *)&unk_10015C9D0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = objc_msgSend((id)objc_opt_self(PSLaunchTracker), "sharedInstance");
  v17 = objc_msgSend(v16, "launchHasCompleted");

  if (v17 && !*(_QWORD *)(a1 + 72))
  {
    v18 = type metadata accessor for PrimaryAppleAccountStatusObserver();
    v19 = sub_100007828((unint64_t *)&unk_10015ABA0, (uint64_t (*)(uint64_t))type metadata accessor for PrimaryAppleAccountStatusObserver, (uint64_t)&unk_100118C34);
    v20 = (void *)ObservableObject<>.objectWillChange.getter(v18, v19);
    v67[0] = v20;
    v21 = type metadata accessor for SecondaryAppleAccountItemsObserver();
    v60 = a1;
    v22 = v21;
    v23 = sub_100007828(&qword_10015C9E0, (uint64_t (*)(uint64_t))type metadata accessor for SecondaryAppleAccountItemsObserver, (uint64_t)&unk_10011A1A4);
    v24 = (void *)ObservableObject<>.objectWillChange.getter(v22, v23);
    v68 = v24;
    v58 = type metadata accessor for ObservableObjectPublisher(0);
    Publisher.merge(with:)(&v68);
    swift_release(v20);
    swift_release(v24);
    v59 = v6;
    v25 = v64;
    static OS_dispatch_queue.SchedulerTimeType.Stride.milliseconds(_:)(15);
    v26 = sub_100007BBC(0, (unint64_t *)&qword_100159D30, OS_dispatch_queue_ptr);
    v67[0] = (id)static OS_dispatch_queue.main.getter(v26);
    v27 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
    v28 = (uint64_t)v65;
    v55 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56);
    v56 = v27;
    v55(v65, 1, 1);
    v29 = sub_100007868(&qword_10015C9E8, &qword_10015C9C8, (uint64_t)&protocol conformance descriptor for Publishers.MergeMany<A>);
    v30 = sub_10010653C((unint64_t *)&qword_10015C990, (unint64_t *)&qword_100159D30, OS_dispatch_queue_ptr, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
    v57 = v26;
    v54 = v30;
    Publisher.debounce<A>(for:scheduler:options:)(v25, v67, v28, v8, v26, v29, v30);
    sub_10000BA50(v28, (uint64_t *)&unk_10015C970);

    v31 = v25;
    v32 = *(void (**)(char *, uint64_t))(v59 + 8);
    v32(v31, v66);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v33 = sub_100007868(&qword_10015C9F0, (uint64_t *)&unk_10015C9D0, (uint64_t)&protocol conformance descriptor for Publishers.Debounce<A, B>);
    v34 = Publisher.eraseToAnyPublisher()(v12, v33);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    v35 = swift_allocObject(&unk_10014E060, 24, 7);
    swift_weakInit(v35 + 16, v60);
    v36 = swift_allocObject(&unk_10014E060, 24, 7);
    swift_weakInit(v36 + 16, v60);
    v37 = type metadata accessor for FLFollowUpModelObserver(0);
    swift_allocObject(v37, *(unsigned int *)(v37 + 48), *(unsigned __int16 *)(v37 + 52));
    swift_retain(v34);
    v38 = v60;
    v39 = FLFollowUpModelObserver.init(primaryAppleAccountIdentifierForFollowUpsRetriever:secondaryAppleAccountsIdentifiersForFollowUpsRetriever:accountChangePublisher:onUpdateBlock:)(sub_100106828, v35, sub_100106830, v36, v34, sub_1001037E0, 0);
    v40 = *(_QWORD *)(v38 + 72);
    *(_QWORD *)(v38 + 72) = v39;
    swift_release(v40);
    v41 = *(_QWORD *)(v38 + 72);
    if (v41)
    {
      v42 = sub_100007828(&qword_10015C9F8, (uint64_t (*)(uint64_t))&type metadata accessor for FLFollowUpModelObserver, (uint64_t)&protocol conformance descriptor for FLFollowUpModelObserver);
      swift_retain(v41);
      v43 = (void *)ObservableObject<>.objectWillChange.getter(v37, v42);
      swift_release(v41);
      v67[0] = v43;
      v44 = v64;
      static OS_dispatch_queue.SchedulerTimeType.Stride.milliseconds(_:)(15);
      if (qword_100156D60 != -1)
        swift_once(&qword_100156D60, sub_1000D34BC);
      v45 = (void *)qword_10015D420;
      v68 = (id)qword_10015D420;
      v46 = (uint64_t)v65;
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v55)(v65, 1, 1, v56);
      v47 = v45;
      v48 = v61;
      Publisher.debounce<A>(for:scheduler:options:)(v44, &v68, v46, v58, v57, &protocol witness table for ObservableObjectPublisher, v54);
      sub_10000BA50(v46, (uint64_t *)&unk_10015C970);

      v32(v44, v66);
      swift_release(v67[0]);
      v49 = swift_allocObject(&unk_10014E060, 24, 7);
      swift_weakInit(v49 + 16, v38);
      v50 = sub_100007868(&qword_10015CA00, &qword_10015C9C0, (uint64_t)&protocol conformance descriptor for Publishers.Debounce<A, B>);
      v51 = v63;
      v52 = Publisher<>.sink(receiveValue:)(sub_100106838, v49, v63, v50);
      swift_release(v49);
      (*(void (**)(char *, uint64_t))(v62 + 8))(v48, v51);
      swift_beginAccess(v38 + 80, v67, 33, 0);
      AnyCancellable.store(in:)(v38 + 80);
      swift_endAccess(v67);
      swift_release(v34);
      swift_release(v52);
    }
    else
    {
      __break(1u);
    }
  }
}

_QWORD *sub_100105C98(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int64_t v8;
  int64_t v9;
  _QWORD *result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v5 = a4 >> 1;
  v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_24;
  }
  v7 = (_QWORD *)*v4;
  v8 = *(_QWORD *)(*v4 + 16);
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  result = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v4);
  if (!(_DWORD)result || v9 > v7[3] >> 1)
    goto LABEL_8;
  if (v5 == a3)
  {
    while (v6 > 0)
    {
      __break(1u);
LABEL_8:
      if (v8 <= v9)
        v13 = v8 + v6;
      else
        v13 = v8;
      result = sub_100052940(result, v13, 1, v7);
      v7 = result;
      if (v5 != a3)
        goto LABEL_12;
    }
    goto LABEL_22;
  }
LABEL_12:
  v14 = v7[2];
  if ((v7[3] >> 1) - v14 < v6)
    goto LABEL_25;
  if (v6 < 0)
  {
LABEL_27:
    result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_28;
  }
  v15 = (unint64_t)&v7[2 * v14 + 4];
  v16 = a2 + 16 * a3;
  if (v16 >= v15 + 16 * v6 || v15 >= v16 + 16 * v6)
  {
    result = (_QWORD *)swift_arrayInitWithCopy(v15);
    if (!v6)
    {
LABEL_22:
      *v4 = v7;
      return result;
    }
    v18 = v7[2];
    v19 = __OFADD__(v18, v6);
    v20 = v18 + v6;
    if (!v19)
    {
      v7[2] = v20;
      goto LABEL_22;
    }
    goto LABEL_26;
  }
  result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_28:
  __break(1u);
  return result;
}

void sub_100105E38()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint8_t *v25;
  id v26;
  NSURL *v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint8_t *v40;
  uint64_t v41;
  char *v42;
  uint64_t (*v43)(char *, char *, uint64_t);
  void (*v44)(char *, char *, uint64_t);
  id v45;
  uint64_t v46;
  uint64_t aBlock[5];
  uint64_t v48;

  v0 = sub_100004FC8((uint64_t *)&unk_10015C9A0);
  __chkstk_darwin(v0);
  v2 = (char *)&v39 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = __chkstk_darwin(v3);
  v7 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v39 - v9;
  __chkstk_darwin(v8);
  v12 = (char *)&v39 - v11;
  URL.init(string:)(0xD00000000000002ALL, 0x80000001001275D0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_10000BA50((uint64_t)v2, (uint64_t *)&unk_10015C9A0);
  }
  else
  {
    v44 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    v44(v12, v2, v3);
    v45 = objc_msgSend(objc_allocWithZone((Class)_LSOpenConfiguration), "init");
    objc_msgSend(v45, "setSensitive:", 1);
    if (qword_100156CA0 != -1)
      swift_once(&qword_100156CA0, sub_10008BDE8);
    v13 = type metadata accessor for Logger(0);
    sub_100007808(v13, (uint64_t)qword_10015D298);
    v43 = *(uint64_t (**)(char *, char *, uint64_t))(v4 + 16);
    v14 = v43(v10, v12, v3);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = swift_slowAlloc(12, -1);
      v42 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
      v18 = (uint8_t *)v17;
      v41 = swift_slowAlloc(32, -1);
      aBlock[0] = v41;
      *(_DWORD *)v18 = 136315138;
      v40 = v18 + 4;
      v19 = sub_100007828((unint64_t *)&qword_10015C650, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v20 = dispatch thunk of CustomStringConvertible.description.getter(v3, v19);
      v22 = v21;
      v46 = sub_1000DA1F0(v20, v21, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, aBlock, v40, v18 + 12);
      swift_bridgeObjectRelease(v22);
      v23 = *(void (**)(char *, uint64_t))(v4 + 8);
      v23(v10, v3);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Opening URL: %s", v18, 0xCu);
      v24 = v41;
      swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      v25 = v18;
      v7 = v42;
      swift_slowDealloc(v25, -1, -1);
    }
    else
    {
      v23 = *(void (**)(char *, uint64_t))(v4 + 8);
      v23(v10, v3);
    }

    v26 = objc_msgSend((id)objc_opt_self(LSApplicationWorkspace), "defaultWorkspace");
    if (v26)
    {
      v28 = v26;
      URL._bridgeToObjectiveC()(v27);
      v30 = v29;
      v43(v7, v12, v3);
      v31 = *(unsigned __int8 *)(v4 + 80);
      v32 = (v31 + 16) & ~v31;
      v33 = swift_allocObject(&unk_10014DFE8, v32 + v5, v31 | 7);
      v34 = v7;
      v35 = v33;
      v44((char *)(v33 + v32), v34, v3);
      aBlock[4] = (uint64_t)sub_100106608;
      v48 = v35;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_100100620;
      aBlock[3] = (uint64_t)&unk_10014E000;
      v36 = _Block_copy(aBlock);
      v37 = v48;
      v38 = v45;
      swift_release(v37);
      objc_msgSend(v28, "openURL:configuration:completionHandler:", v30, v38, v36);
      _Block_release(v36);

      v23(v12, v3);
    }
    else
    {
      v23(v12, v3);

    }
  }
}

uint64_t sub_10010628C(char *a1)
{
  uint64_t v1;

  return sub_10003AA18(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD **)(v1 + 32)) & 1;
}

uint64_t sub_1001062AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004FC8(&qword_10015C890);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001062F8(char *a1)
{
  return sub_1000F2DEC(*a1);
}

void sub_10010631C()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16)
           + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_effectiveCurrentPresentedItemIdentifier) = *(_BYTE *)(v0 + 24);
}

uint64_t sub_100106338()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10015C89C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1000570A0;
  return sub_1000FF284();
}

uint64_t sub_1001063A4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001063C8(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_1000A85F8(result, a2);
  return result;
}

uint64_t sub_1001063E4()
{
  uint64_t v0;

  return sub_1000F7E00(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1001063FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for FLFollowUpInformation(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 64) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));

  swift_release(*(_QWORD *)(v0 + 56));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100106490(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FLFollowUpInformation(0) - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = v1[5];
  v9 = v1[6];
  v10 = v1[7];
  v11 = (uint64_t)v1 + ((v4 + 64) & ~v4);
  v12 = (_QWORD *)swift_task_alloc(dword_10015C8EC);
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = sub_1000526BC;
  return sub_1001006B4(a1, v5, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_10010653C(unint64_t *a1, unint64_t *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_100007BBC(255, a2, a3);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10010657C()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1001065A0(uint64_t a1)
{
  uint64_t v1;

  sub_1000A544C(a1, v1);
}

uint64_t sub_1001065A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_100106608(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for URL(0) - 8) + 80);
  sub_100100410(a1, a2, v2 + ((v5 + 16) & ~v5));
}

uint64_t sub_100106654()
{
  uint64_t v0;

  return sub_1000FED30(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10010666C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1000F9848(a1, (uint64_t)&unk_10011B410, &OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel__selectionDelegate, a2);
}

uint64_t sub_100106694()
{
  return sub_100106964(&OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel__selectionDelegate);
}

void sub_1001066B0()
{
  uint64_t v0;

  *(_BYTE *)(v0 + OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel_effectiveCurrentPresentedItemIdentifier) = 7;
}

uint64_t sub_1001066CC()
{
  uint64_t *v0;

  return sub_1000F828C(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_1001066E8(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    swift_bridgeObjectRetain(result);
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRetain(a3);
  }
  return result;
}

uint64_t sub_100106720(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(a2);
    return swift_bridgeObjectRelease(a3);
  }
  return result;
}

uint64_t sub_100106758@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1000F9848(a1, (uint64_t)&unk_10011B460, &OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel__updateDelegate, a2);
}

uint64_t sub_100106780()
{
  return sub_100106964(&OBJC_IVAR____TtC11SettingsApp24PrimarySettingsListModel__updateDelegate);
}

uint64_t sub_10010679C()
{
  uint64_t v0;

  sub_10000BAE4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  if (*(_QWORD *)(v0 + 64))
  {
    sub_100007618(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 56));
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  }
  if (*(_QWORD *)(v0 + 96))
  {
    sub_100007618(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_BYTE *)(v0 + 88));
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 96));
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 104));
  return swift_deallocObject(v0, 112, 7);
}

uint64_t sub_100106804()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100106828()
{
  uint64_t v0;

  return sub_100092928(v0);
}

_QWORD *sub_100106830()
{
  uint64_t v0;

  return sub_100092A44(v0);
}

uint64_t sub_100106838(uint64_t a1)
{
  uint64_t v1;

  return sub_100092BAC(a1, v1);
}

uint64_t sub_100106840(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_10015CA0C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1000526BC;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_10015CA08 + dword_10015CA08))(a1, v4);
}

_QWORD *sub_1001068B0(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

uint64_t sub_1001068EC()
{
  return sub_1000D4588();
}

uint64_t sub_1001068F8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10015BCB4);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1000570A0;
  return sub_1000CB3E0(a1, v4, v5, v6);
}

uint64_t sub_100106964(_QWORD *a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)(v1 + 16) + *a1 + 8) = *(_QWORD *)(v1 + 32);
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_10010698C(uint64_t a1)
{
  uint64_t v1;

  return sub_1000FA870(a1, v1);
}

uint64_t sub_100106994@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1000FA8EC(a1, v2, a2);
}

uint64_t sub_10010699C(uint64_t a1)
{
  swift_unknownObjectWeakDestroy(a1);
  return a1;
}

uint64_t sub_1001069C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  v6 = v0 + v4;
  switch(swift_getEnumCaseMultiPayload(v0 + v4, v1))
  {
    case 0u:
    case 1u:
      v7 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v0 + v4, v7);
      break;
    case 2u:
      v8 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
      v9 = sub_100004FC8(&qword_10015C420);
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + *(int *)(v9 + 48) + 8));
      break;
    case 3u:
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 40));
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 56));
      break;
    case 4u:
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 40));
      break;
    case 5u:
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 24));

      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 40));
      if (*(_QWORD *)(v6 + 72))
        sub_100005474((_QWORD *)(v6 + 48));
      break;
    default:
      return swift_deallocObject(v0, v4 + v5, v3 | 7);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

void sub_100106B1C(char a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PrimarySettingsListItemIdentifier(0) - 8) + 80);
  sub_1001014F8(a1, *(_QWORD **)(v1 + 16), v1 + ((v3 + 24) & ~v3));
}

uint64_t sub_100106B60()
{
  return sub_1001066CC();
}

void sub_100106B7C()
{
  sub_100103808();
}

uint64_t sub_100106B90()
{
  return sub_1001063E4();
}

uint64_t sub_100106BA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 32);
}

uint64_t sub_100106BAC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = "\t";
  result = type metadata accessor for PrimarySettingsListItemIdentifier(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_10011B638;
    v4[3] = (char *)&value witness table for () + 64;
    swift_initStructMetadata(a1, 0, 4, v4, a1 + 32);
    return 0;
  }
  return result;
}

_QWORD *sub_100106C38(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  _OWORD *v36;
  uint64_t v37;
  id v38;
  __int128 v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _OWORD *v44;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = *a2;
    v8 = *((_BYTE *)a2 + 8);
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = v8;
    v9 = a3[9];
    v10 = (char *)(a1 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    v12 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    swift_retain(v7);
    switch(swift_getEnumCaseMultiPayload(v11, v12))
    {
      case 0u:
        v13 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(char *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v11, v13);
        v14 = v10;
        v15 = v12;
        v16 = 0;
        goto LABEL_14;
      case 1u:
        v18 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(char *, _QWORD *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v10, v11, v18);
        v14 = v10;
        v15 = v12;
        v16 = 1;
        goto LABEL_14;
      case 2u:
        v19 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(char *, _QWORD *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v10, v11, v19);
        v20 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v21 = &v10[v20];
        v22 = (_QWORD *)((char *)v11 + v20);
        v23 = v22[1];
        *(_QWORD *)v21 = *v22;
        *((_QWORD *)v21 + 1) = v23;
        swift_bridgeObjectRetain(v23);
        v14 = v10;
        v15 = v12;
        v16 = 2;
        goto LABEL_14;
      case 3u:
        v24 = v11[1];
        *(_QWORD *)v10 = *v11;
        *((_QWORD *)v10 + 1) = v24;
        v25 = v11[3];
        *((_QWORD *)v10 + 2) = v11[2];
        *((_QWORD *)v10 + 3) = v25;
        v26 = v11[5];
        *((_QWORD *)v10 + 4) = v11[4];
        *((_QWORD *)v10 + 5) = v26;
        v27 = v11[6];
        v28 = v11[7];
        *((_QWORD *)v10 + 6) = v27;
        *((_QWORD *)v10 + 7) = v28;
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v25);
        swift_bridgeObjectRetain(v26);
        swift_bridgeObjectRetain(v28);
        v14 = v10;
        v15 = v12;
        v16 = 3;
        goto LABEL_14;
      case 4u:
        v29 = v11[1];
        *(_QWORD *)v10 = *v11;
        *((_QWORD *)v10 + 1) = v29;
        v30 = v11[3];
        *((_QWORD *)v10 + 2) = v11[2];
        *((_QWORD *)v10 + 3) = v30;
        v31 = v11[5];
        *((_QWORD *)v10 + 4) = v11[4];
        *((_QWORD *)v10 + 5) = v31;
        *((_QWORD *)v10 + 6) = v11[6];
        swift_bridgeObjectRetain(v29);
        swift_bridgeObjectRetain(v30);
        swift_bridgeObjectRetain(v31);
        v14 = v10;
        v15 = v12;
        v16 = 4;
        goto LABEL_14;
      case 5u:
        v32 = v11[1];
        *(_QWORD *)v10 = *v11;
        *((_QWORD *)v10 + 1) = v32;
        v33 = v11[3];
        *((_QWORD *)v10 + 2) = v11[2];
        *((_QWORD *)v10 + 3) = v33;
        v34 = (void *)v11[4];
        v35 = v11[5];
        *((_QWORD *)v10 + 4) = v34;
        *((_QWORD *)v10 + 5) = v35;
        v44 = v10 + 48;
        v36 = v11 + 6;
        v37 = v11[9];
        swift_bridgeObjectRetain(v32);
        swift_bridgeObjectRetain(v33);
        v38 = v34;
        swift_bridgeObjectRetain(v35);
        if (v37)
        {
          *((_QWORD *)v10 + 9) = v37;
          (**(void (***)(_OWORD *, _OWORD *, uint64_t))(v37 - 8))(v44, v36, v37);
        }
        else
        {
          v39 = v36[1];
          *v44 = *v36;
          *((_OWORD *)v10 + 4) = v39;
        }
        v14 = v10;
        v15 = v12;
        v16 = 5;
LABEL_14:
        swift_storeEnumTagMultiPayload(v14, v15, v16);
        break;
      default:
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
        break;
    }
    v40 = a3[11];
    *((_BYTE *)v4 + a3[10]) = *((_BYTE *)a2 + a3[10]);
    v41 = (_QWORD *)((char *)v4 + v40);
    v42 = (uint64_t *)((char *)a2 + v40);
    v17 = v42[1];
    *v41 = *v42;
    v41[1] = v17;
  }
  swift_retain(v17);
  return v4;
}

uint64_t sub_100106F0C(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  swift_release(*a1);
  v4 = (char *)a1 + *(int *)(a2 + 36);
  v5 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v4, v5))
  {
    case 0u:
    case 1u:
      v6 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
      break;
    case 2u:
      v7 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v4, v7);
      v8 = sub_100004FC8(&qword_10015C420);
      swift_bridgeObjectRelease(*(_QWORD *)&v4[*(int *)(v8 + 48) + 8]);
      break;
    case 3u:
      swift_bridgeObjectRelease(*((_QWORD *)v4 + 1));
      swift_bridgeObjectRelease(*((_QWORD *)v4 + 3));
      swift_bridgeObjectRelease(*((_QWORD *)v4 + 5));
      swift_bridgeObjectRelease(*((_QWORD *)v4 + 7));
      break;
    case 4u:
      swift_bridgeObjectRelease(*((_QWORD *)v4 + 1));
      swift_bridgeObjectRelease(*((_QWORD *)v4 + 3));
      swift_bridgeObjectRelease(*((_QWORD *)v4 + 5));
      break;
    case 5u:
      swift_bridgeObjectRelease(*((_QWORD *)v4 + 1));
      swift_bridgeObjectRelease(*((_QWORD *)v4 + 3));

      swift_bridgeObjectRelease(*((_QWORD *)v4 + 5));
      if (*((_QWORD *)v4 + 9))
        sub_100005474((_QWORD *)v4 + 6);
      break;
    default:
      return swift_release(*(_QWORD *)((char *)a1 + *(int *)(a2 + 44) + 8));
  }
  return swift_release(*(_QWORD *)((char *)a1 + *(int *)(a2 + 44) + 8));
}

uint64_t sub_100107054(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  _OWORD *v34;
  uint64_t v35;
  id v36;
  __int128 v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  _OWORD *v43;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = v7;
  v8 = a3[9];
  v9 = (char *)(a1 + v8);
  v10 = (uint64_t *)((char *)a2 + v8);
  v11 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  swift_retain(v6);
  switch(swift_getEnumCaseMultiPayload(v10, v11))
  {
    case 0u:
      v12 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
      v13 = v9;
      v14 = v11;
      v15 = 0;
      goto LABEL_12;
    case 1u:
      v16 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, _QWORD *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v9, v10, v16);
      v13 = v9;
      v14 = v11;
      v15 = 1;
      goto LABEL_12;
    case 2u:
      v17 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, _QWORD *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v9, v10, v17);
      v18 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
      v19 = &v9[v18];
      v20 = (_QWORD *)((char *)v10 + v18);
      v21 = v20[1];
      *(_QWORD *)v19 = *v20;
      *((_QWORD *)v19 + 1) = v21;
      swift_bridgeObjectRetain(v21);
      v13 = v9;
      v14 = v11;
      v15 = 2;
      goto LABEL_12;
    case 3u:
      v22 = v10[1];
      *(_QWORD *)v9 = *v10;
      *((_QWORD *)v9 + 1) = v22;
      v23 = v10[3];
      *((_QWORD *)v9 + 2) = v10[2];
      *((_QWORD *)v9 + 3) = v23;
      v24 = v10[5];
      *((_QWORD *)v9 + 4) = v10[4];
      *((_QWORD *)v9 + 5) = v24;
      v25 = v10[6];
      v26 = v10[7];
      *((_QWORD *)v9 + 6) = v25;
      *((_QWORD *)v9 + 7) = v26;
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v23);
      swift_bridgeObjectRetain(v24);
      swift_bridgeObjectRetain(v26);
      v13 = v9;
      v14 = v11;
      v15 = 3;
      goto LABEL_12;
    case 4u:
      v27 = v10[1];
      *(_QWORD *)v9 = *v10;
      *((_QWORD *)v9 + 1) = v27;
      v28 = v10[3];
      *((_QWORD *)v9 + 2) = v10[2];
      *((_QWORD *)v9 + 3) = v28;
      v29 = v10[5];
      *((_QWORD *)v9 + 4) = v10[4];
      *((_QWORD *)v9 + 5) = v29;
      *((_QWORD *)v9 + 6) = v10[6];
      swift_bridgeObjectRetain(v27);
      swift_bridgeObjectRetain(v28);
      swift_bridgeObjectRetain(v29);
      v13 = v9;
      v14 = v11;
      v15 = 4;
      goto LABEL_12;
    case 5u:
      v30 = v10[1];
      *(_QWORD *)v9 = *v10;
      *((_QWORD *)v9 + 1) = v30;
      v31 = v10[3];
      *((_QWORD *)v9 + 2) = v10[2];
      *((_QWORD *)v9 + 3) = v31;
      v32 = (void *)v10[4];
      v33 = v10[5];
      *((_QWORD *)v9 + 4) = v32;
      *((_QWORD *)v9 + 5) = v33;
      v43 = v9 + 48;
      v34 = v10 + 6;
      v35 = v10[9];
      swift_bridgeObjectRetain(v30);
      swift_bridgeObjectRetain(v31);
      v36 = v32;
      swift_bridgeObjectRetain(v33);
      if (v35)
      {
        *((_QWORD *)v9 + 9) = v35;
        (**(void (***)(_OWORD *, _OWORD *, uint64_t))(v35 - 8))(v43, v34, v35);
      }
      else
      {
        v37 = v34[1];
        *v43 = *v34;
        *((_OWORD *)v9 + 4) = v37;
      }
      v13 = v9;
      v14 = v11;
      v15 = 5;
LABEL_12:
      swift_storeEnumTagMultiPayload(v13, v14, v15);
      break;
    default:
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
      break;
  }
  v38 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  v39 = (_QWORD *)(a1 + v38);
  v40 = (uint64_t *)((char *)a2 + v38);
  v41 = v40[1];
  *v39 = *v40;
  v39[1] = v41;
  swift_retain(v41);
  return a1;
}

uint64_t *sub_100107300(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  _OWORD *v34;
  uint64_t v35;
  id v36;
  __int128 v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _OWORD *v44;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v7;
  swift_retain(v6);
  swift_release(v8);
  if (a1 != a2)
  {
    v9 = a3[9];
    v10 = (char *)a1 + v9;
    v11 = (uint64_t *)((char *)a2 + v9);
    sub_100013014((uint64_t)a1 + v9);
    v12 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(v11, v12))
    {
      case 0u:
        v13 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(char *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v11, v13);
        v14 = v10;
        v15 = v12;
        v16 = 0;
        goto LABEL_13;
      case 1u:
        v17 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(char *, _QWORD *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v10, v11, v17);
        v14 = v10;
        v15 = v12;
        v16 = 1;
        goto LABEL_13;
      case 2u:
        v18 = type metadata accessor for FLFollowUpInformation(0);
        (*(void (**)(char *, _QWORD *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v10, v11, v18);
        v19 = *(int *)(sub_100004FC8(&qword_10015C420) + 48);
        v20 = &v10[v19];
        v21 = (_QWORD *)((char *)v11 + v19);
        *(_QWORD *)v20 = *v21;
        v22 = v21[1];
        *((_QWORD *)v20 + 1) = v22;
        swift_bridgeObjectRetain(v22);
        v14 = v10;
        v15 = v12;
        v16 = 2;
        goto LABEL_13;
      case 3u:
        *(_QWORD *)v10 = *v11;
        v23 = v11[1];
        *((_QWORD *)v10 + 1) = v23;
        *((_QWORD *)v10 + 2) = v11[2];
        v24 = v11[3];
        *((_QWORD *)v10 + 3) = v24;
        *((_QWORD *)v10 + 4) = v11[4];
        v25 = v11[5];
        *((_QWORD *)v10 + 5) = v25;
        *((_QWORD *)v10 + 6) = v11[6];
        v26 = v11[7];
        *((_QWORD *)v10 + 7) = v26;
        swift_bridgeObjectRetain(v23);
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v25);
        swift_bridgeObjectRetain(v26);
        v14 = v10;
        v15 = v12;
        v16 = 3;
        goto LABEL_13;
      case 4u:
        *(_QWORD *)v10 = *v11;
        v27 = v11[1];
        *((_QWORD *)v10 + 1) = v27;
        *((_QWORD *)v10 + 2) = v11[2];
        v28 = v11[3];
        *((_QWORD *)v10 + 3) = v28;
        *((_QWORD *)v10 + 4) = v11[4];
        v29 = v11[5];
        *((_QWORD *)v10 + 5) = v29;
        *((_QWORD *)v10 + 6) = v11[6];
        swift_bridgeObjectRetain(v27);
        swift_bridgeObjectRetain(v28);
        swift_bridgeObjectRetain(v29);
        v14 = v10;
        v15 = v12;
        v16 = 4;
        goto LABEL_13;
      case 5u:
        *(_QWORD *)v10 = *v11;
        v30 = v11[1];
        *((_QWORD *)v10 + 1) = v30;
        *((_QWORD *)v10 + 2) = v11[2];
        v31 = v11[3];
        *((_QWORD *)v10 + 3) = v31;
        v32 = (void *)v11[4];
        *((_QWORD *)v10 + 4) = v32;
        v33 = v11[5];
        *((_QWORD *)v10 + 5) = v33;
        v44 = v10 + 48;
        v34 = v11 + 6;
        v35 = v11[9];
        swift_bridgeObjectRetain(v30);
        swift_bridgeObjectRetain(v31);
        v36 = v32;
        swift_bridgeObjectRetain(v33);
        if (v35)
        {
          *((_QWORD *)v10 + 9) = v35;
          (**(void (***)(_OWORD *, _OWORD *, uint64_t))(v35 - 8))(v44, v34, v35);
        }
        else
        {
          v37 = v34[1];
          *v44 = *v34;
          *((_OWORD *)v10 + 4) = v37;
        }
        v14 = v10;
        v15 = v12;
        v16 = 5;
LABEL_13:
        swift_storeEnumTagMultiPayload(v14, v15, v16);
        break;
      default:
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
        break;
    }
  }
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  v38 = a3[11];
  v39 = (uint64_t *)((char *)a1 + v38);
  v40 = (uint64_t *)((char *)a2 + v38);
  v41 = v40[1];
  v42 = v39[1];
  *v39 = *v40;
  v39[1] = v41;
  swift_retain(v41);
  swift_release(v42);
  return a1;
}

uint64_t sub_10010762C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int EnumCaseMultiPayload;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = a3[9];
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v8, v9);
  if (EnumCaseMultiPayload == 2)
  {
    v12 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v7, v8, v12);
    v13 = sub_100004FC8(&qword_10015C420);
    *(_OWORD *)&v7[*(int *)(v13 + 48)] = *(_OWORD *)&v8[*(int *)(v13 + 48)];
    swift_storeEnumTagMultiPayload(v7, v9, 2);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v14 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v7, v8, v14);
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    v11 = type metadata accessor for FLFollowUpInformation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v7, v8, v11);
    swift_storeEnumTagMultiPayload(v7, v9, 0);
  }
  v15 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_OWORD *)(a1 + v15) = *(_OWORD *)(a2 + v15);
  return a1;
}

uint64_t *sub_100107788(uint64_t *a1, uint64_t *a2, int *a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int EnumCaseMultiPayload;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *((_BYTE *)a2 + 8);
  v7 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v6;
  swift_release(v7);
  if (a1 != a2)
  {
    v8 = a3[9];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    sub_100013014((uint64_t)a1 + v8);
    v11 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v10, v11);
    if (EnumCaseMultiPayload == 2)
    {
      v14 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v9, v10, v14);
      v15 = sub_100004FC8(&qword_10015C420);
      *(_OWORD *)&v9[*(int *)(v15 + 48)] = *(_OWORD *)&v10[*(int *)(v15 + 48)];
      swift_storeEnumTagMultiPayload(v9, v11, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v16 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v9, v10, v16);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      v13 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v9, v10, v13);
      swift_storeEnumTagMultiPayload(v9, v11, 0);
    }
  }
  v17 = a3[11];
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  v18 = *(uint64_t *)((char *)a1 + v17 + 8);
  *(_OWORD *)((char *)a1 + v17) = *(_OWORD *)((char *)a2 + v17);
  swift_release(v18);
  return a1;
}

uint64_t sub_100107908(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100107914);
}

uint64_t sub_100107914(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 36), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 44));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100107994(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001079A0);
}

uint64_t sub_1001079A0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 36), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 44)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for AdaptiveNavigationDisclosureIndicatorWrapper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100018CE0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AdaptiveNavigationDisclosureIndicatorWrapper);
}

uint64_t sub_100107A28(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_10012BD6C, 1);
}

uint64_t sub_100107A5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v10 = type metadata accessor for _ConditionalContent.Storage(0);
  __chkstk_darwin();
  v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))((char *)&v14 - v11, a1, a2);
  swift_storeEnumTagMultiPayload(v12, v10, 0);
  return _ConditionalContent<>.init(storage:)(v12, a2, a3, a4, a5);
}

uint64_t sub_100107B20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v10 = type metadata accessor for _ConditionalContent.Storage(0);
  __chkstk_darwin();
  v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))((char *)&v14 - v11, a1, a3);
  swift_storeEnumTagMultiPayload(v12, v10, 1);
  return _ConditionalContent<>.init(storage:)(v12, a2, a3, a4, a5);
}

uint64_t sub_100107BE4@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t WitnessTable;
  unint64_t v8;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t OpaqueTypeConformance2;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, char *, uint64_t);
  void (*v25)(char *, uint64_t);
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;

  v28 = a2;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = type metadata accessor for Button(255, v3, v4);
  v6 = sub_100005430(&qword_10015CBC0);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Button<A>, v5);
  v8 = sub_100108824();
  v31 = v5;
  v32 = (void *)v6;
  v33 = WitnessTable;
  v34 = (void *)v8;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v31, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 0);
  v31 = v3;
  v32 = &type metadata for Never;
  v33 = v4;
  v34 = &protocol witness table for Never;
  v10 = type metadata accessor for NavigationLink(255, &v31);
  v11 = type metadata accessor for _ConditionalContent(0, OpaqueTypeMetadata2, v10);
  __chkstk_darwin(v11);
  v13 = (char *)&v27 - v12;
  v31 = v5;
  v32 = (void *)v6;
  v33 = WitnessTable;
  v34 = (void *)v8;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v31, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
  v15 = swift_getWitnessTable(&protocol conformance descriptor for NavigationLink<A, B>, v10);
  v29 = OpaqueTypeConformance2;
  v30 = v15;
  v16 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v11);
  v17 = type metadata accessor for _UnaryViewAdaptor(0, v11, v16);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v27 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v23 = (char *)&v27 - v22;
  sub_100107E14(a1, (uint64_t)v13);
  _UnaryViewAdaptor.init(_:)(v13, v11, v16);
  swift_getWitnessTable(&protocol conformance descriptor for _UnaryViewAdaptor<A>, v17);
  v24 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
  v24(v23, v21, v17);
  v25 = *(void (**)(char *, uint64_t))(v18 + 8);
  v25(v21, v17);
  v24(v28, v23, v17);
  return ((uint64_t (*)(char *, uint64_t))v25)(v23, v17);
}

uint64_t sub_100107E14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t WitnessTable;
  unint64_t v21;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t OpaqueTypeConformance2;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  char *v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  void (*v60)(char *, char *, uint64_t);
  void (*v61)(char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  char *v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  void *v95;

  v87 = a2;
  v3 = sub_100004FC8(&qword_10015C890);
  __chkstk_darwin(v3);
  v75 = (uint64_t)&v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 24);
  v92 = *(_QWORD *)(a1 + 16);
  v5 = v92;
  v93 = &type metadata for Never;
  v94 = v6;
  v95 = &protocol witness table for Never;
  v7 = type metadata accessor for NavigationLink(0, &v92);
  v76 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v77 = (char *)&v69 - v11;
  v12 = sub_100004FC8(&qword_10015CBC0);
  v74 = *(_QWORD *)(v12 - 8);
  v13 = __chkstk_darwin(v12);
  v73 = (char *)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(a1 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  __chkstk_darwin(v13);
  v17 = (char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = v5;
  v81 = v6;
  v18 = type metadata accessor for Button(0, v5, v6);
  v72 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v71 = (char *)&v69 - v19;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Button<A>, v18);
  v21 = sub_100108824();
  v85 = v18;
  v86 = (void *)v12;
  v92 = v18;
  v93 = (void *)v12;
  v84 = WitnessTable;
  v94 = WitnessTable;
  v95 = (void *)v21;
  v89 = (void *)v21;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v92, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 0);
  v70 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  v23 = __chkstk_darwin(OpaqueTypeMetadata2);
  v25 = (char *)&v69 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v27 = (char *)&v69 - v26;
  v79 = v7;
  v28 = type metadata accessor for _ConditionalContent(0, OpaqueTypeMetadata2, v7);
  v82 = *(_QWORD *)(v28 - 8);
  v83 = v28;
  __chkstk_darwin(v28);
  v88 = (char *)&v69 - v29;
  v30 = v78;
  if (*(_BYTE *)(v78 + *(int *)(a1 + 40)) == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))((char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v78, a1);
    v31 = *(unsigned __int8 *)(v15 + 80);
    v32 = (v31 + 32) & ~v31;
    v33 = swift_allocObject(&unk_10014E1C0, v32 + v16, v31 | 7);
    v34 = v80;
    v77 = v27;
    v35 = v81;
    *(_QWORD *)(v33 + 16) = v80;
    *(_QWORD *)(v33 + 24) = v35;
    v36 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v15 + 32))(v33 + v32, v17, a1);
    __chkstk_darwin(v36);
    *(&v69 - 4) = v34;
    *(&v69 - 3) = v35;
    *(&v69 - 2) = v30;
    v37 = v71;
    v38 = Button.init(action:label:)(sub_100108A48, v33, sub_100108A98, &v69 - 6, v34, v35);
    v39 = v73;
    static PrimitiveButtonStyle<>.navigationLink.getter(v38);
    v41 = v85;
    v40 = v86;
    v42 = v84;
    v43 = v89;
    View.buttonStyle<A>(_:)(v39, v85, v86, v84, v89);
    (*(void (**)(char *, void *))(v74 + 8))(v39, v40);
    (*(void (**)(char *, uint64_t))(v72 + 8))(v37, v41);
    v92 = v41;
    v93 = v40;
    v94 = v42;
    v95 = v43;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v92, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    v45 = v70;
    v46 = *(void (**)(char *, char *, uint64_t))(v70 + 16);
    v47 = v77;
    v46(v77, v25, OpaqueTypeMetadata2);
    v48 = *(void (**)(char *, uint64_t))(v45 + 8);
    v48(v25, OpaqueTypeMetadata2);
    v46(v25, v47, OpaqueTypeMetadata2);
    v49 = v79;
    v50 = swift_getWitnessTable(&protocol conformance descriptor for NavigationLink<A, B>, v79);
    sub_100107A5C((uint64_t)v25, OpaqueTypeMetadata2, v49, OpaqueTypeConformance2, v50);
    v48(v25, OpaqueTypeMetadata2);
    v48(v47, OpaqueTypeMetadata2);
  }
  else
  {
    v51 = v75;
    sub_100012DC4(v78 + *(int *)(a1 + 36), v75);
    v52 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
    v53 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v51, 0, 1, v52);
    __chkstk_darwin(v53);
    v54 = v80;
    v55 = v81;
    *(&v69 - 4) = v80;
    *(&v69 - 3) = v55;
    *(&v69 - 2) = v30;
    v56 = sub_100108870();
    NavigationLink<>.init<A>(value:label:)(v51, sub_100108E30, &v69 - 6, v54, v52, v55, v56);
    v49 = v79;
    v57 = swift_getWitnessTable(&protocol conformance descriptor for NavigationLink<A, B>, v79);
    v58 = v76;
    v59 = v77;
    v60 = *(void (**)(char *, char *, uint64_t))(v76 + 16);
    v60(v77, v10, v49);
    v61 = *(void (**)(char *, uint64_t))(v58 + 8);
    v61(v10, v49);
    v60(v10, v59, v49);
    v41 = v85;
    v40 = v86;
    v92 = v85;
    v93 = v86;
    v42 = v84;
    v94 = v84;
    v95 = v89;
    v62 = swift_getOpaqueTypeConformance2(&v92, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    sub_100107B20((uint64_t)v10, OpaqueTypeMetadata2, v49, v62, v57);
    v61(v10, v49);
    v61(v59, v49);
  }
  v92 = v41;
  v93 = v40;
  v94 = v42;
  v95 = v89;
  v63 = swift_getOpaqueTypeConformance2(&v92, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
  v64 = swift_getWitnessTable(&protocol conformance descriptor for NavigationLink<A, B>, v49);
  v90 = v63;
  v91 = v64;
  v65 = v83;
  swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v83);
  v66 = v82;
  v67 = v88;
  (*(void (**)(uint64_t, char *, uint64_t))(v82 + 16))(v87, v88, v65);
  return (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v67, v65);
}

uint64_t sub_10010845C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v23;

  v7 = type metadata accessor for AdaptiveNavigationDisclosureIndicatorWrapper(0, a2, a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v11 = (char *)&v23 - v10;
  v12 = sub_100004FC8(&qword_10015C5A0);
  __chkstk_darwin(v12);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v7);
  v16 = type metadata accessor for MainActor(0);
  v17 = static MainActor.shared.getter(v16);
  v18 = *(unsigned __int8 *)(v8 + 80);
  v19 = (v18 + 48) & ~v18;
  v20 = (char *)swift_allocObject(&unk_10014E1E8, v19 + v9, v18 | 7);
  *((_QWORD *)v20 + 2) = v17;
  *((_QWORD *)v20 + 3) = &protocol witness table for MainActor;
  *((_QWORD *)v20 + 4) = a2;
  *((_QWORD *)v20 + 5) = a3;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v20[v19], v11, v7);
  v21 = sub_1000F1E18((uint64_t)v14, (uint64_t)&unk_10015CBD8, (uint64_t)v20);
  return swift_release(v21);
}

uint64_t sub_1001085C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  v7 = sub_100004FC8(&qword_10015C890);
  v6[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for MainActor(0);
  v6[6] = static MainActor.shared.getter(v8);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v8, &protocol witness table for MainActor);
  return swift_task_switch(sub_100108654, v9, v10);
}

uint64_t sub_100108654()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  v4 = *(uint64_t **)(v0 + 16);
  swift_release(*(_QWORD *)(v0 + 48));
  v5 = *v4;
  v6 = *((_BYTE *)v4 + 8);
  swift_retain(*v4);
  v8 = sub_100063680(v7, v6);
  swift_release(v5);
  v9 = *(_QWORD *)(v8 + 32);
  swift_retain(v9);
  swift_release(v8);
  v10 = sub_1000DB598();
  swift_release(v9);
  v12 = type metadata accessor for AdaptiveNavigationDisclosureIndicatorWrapper(0, v3, v2, v11);
  sub_100012DC4((uint64_t)v4 + *(int *)(v12 + 36), v1);
  v13 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v1, 0, 1, v13);
  sub_1000F3614(v1);
  swift_release(v10);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100108744@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v6 = *(_QWORD *)(a2 - 8);
  v7 = __chkstk_darwin(a1);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v19 - v10;
  v15 = type metadata accessor for AdaptiveNavigationDisclosureIndicatorWrapper(0, v12, v13, v14);
  (*(void (**)(void))(a1 + *(int *)(v15 + 44)))();
  v16 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v16(v11, v9, a2);
  v17 = *(void (**)(char *, uint64_t))(v6 + 8);
  v17(v9, a2);
  v16(a3, v11, a2);
  return ((uint64_t (*)(char *, uint64_t))v17)(v11, a2);
}

unint64_t sub_100108824()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015CBC8;
  if (!qword_10015CBC8)
  {
    v1 = sub_100005430(&qword_10015CBC0);
    result = swift_getWitnessTable(&protocol conformance descriptor for NavigationLinkButtonStyle<A>, v1);
    atomic_store(result, &qword_10015CBC8);
  }
  return result;
}

unint64_t sub_100108870()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100158000;
  if (!qword_100158000)
  {
    v1 = type metadata accessor for PrimarySettingsListItemIdentifier(255);
    result = swift_getWitnessTable(&unk_1001188B8, v1);
    atomic_store(result, (unint64_t *)&qword_100158000);
  }
  return result;
}

uint64_t sub_1001088B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = type metadata accessor for AdaptiveNavigationDisclosureIndicatorWrapper(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = *(_QWORD *)(v6 + 64);
  swift_release(*(_QWORD *)(v4 + v8));
  v10 = v4 + v8 + *(int *)(v5 + 36);
  v11 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v10, v11))
  {
    case 0u:
    case 1u:
      v12 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
      break;
    case 2u:
      v13 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v10, v13);
      v14 = sub_100004FC8(&qword_10015C420);
      swift_bridgeObjectRelease(*(_QWORD *)(v10 + *(int *)(v14 + 48) + 8));
      break;
    case 3u:
      swift_bridgeObjectRelease(*(_QWORD *)(v10 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v10 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(v10 + 40));
      swift_bridgeObjectRelease(*(_QWORD *)(v10 + 56));
      break;
    case 4u:
      swift_bridgeObjectRelease(*(_QWORD *)(v10 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v10 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(v10 + 40));
      break;
    case 5u:
      swift_bridgeObjectRelease(*(_QWORD *)(v10 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v10 + 24));

      swift_bridgeObjectRelease(*(_QWORD *)(v10 + 40));
      if (*(_QWORD *)(v10 + 72))
        sub_100005474((_QWORD *)(v10 + 48));
      break;
    default:
      break;
  }
  swift_release(*(_QWORD *)(v4 + v8 + *(int *)(v5 + 44) + 8));
  return swift_deallocObject(v4, v8 + v9, v7 | 7);
}

uint64_t sub_100108A48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AdaptiveNavigationDisclosureIndicatorWrapper(0, v5, v6, a4)- 8)+ 80);
  return sub_10010845C(v4 + ((v7 + 32) & ~v7), v5, v6, v8);
}

uint64_t sub_100108A98@<X0>(char *a1@<X8>)
{
  uint64_t v1;

  return sub_100108744(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_100108AB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = type metadata accessor for AdaptiveNavigationDisclosureIndicatorWrapper(0, v4[4], v4[5], a4);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 48) & ~v7;
  v9 = *(_QWORD *)(v6 + 64);
  swift_unknownObjectRelease(v4[2]);
  swift_release(*(_QWORD *)((char *)v4 + v8));
  v10 = (char *)v4 + v8 + *(int *)(v5 + 36);
  v11 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v10, v11))
  {
    case 0u:
    case 1u:
      v12 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
      break;
    case 2u:
      v13 = type metadata accessor for FLFollowUpInformation(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v10, v13);
      v14 = sub_100004FC8(&qword_10015C420);
      swift_bridgeObjectRelease(*(_QWORD *)&v10[*(int *)(v14 + 48) + 8]);
      break;
    case 3u:
      swift_bridgeObjectRelease(*((_QWORD *)v10 + 1));
      swift_bridgeObjectRelease(*((_QWORD *)v10 + 3));
      swift_bridgeObjectRelease(*((_QWORD *)v10 + 5));
      swift_bridgeObjectRelease(*((_QWORD *)v10 + 7));
      break;
    case 4u:
      swift_bridgeObjectRelease(*((_QWORD *)v10 + 1));
      swift_bridgeObjectRelease(*((_QWORD *)v10 + 3));
      swift_bridgeObjectRelease(*((_QWORD *)v10 + 5));
      break;
    case 5u:
      swift_bridgeObjectRelease(*((_QWORD *)v10 + 1));
      swift_bridgeObjectRelease(*((_QWORD *)v10 + 3));

      swift_bridgeObjectRelease(*((_QWORD *)v10 + 5));
      if (*((_QWORD *)v10 + 9))
        sub_100005474((_QWORD *)v10 + 6);
      break;
    default:
      break;
  }
  swift_release(*(_QWORD *)((char *)v4 + v8 + *(int *)(v5 + 44) + 8));
  return swift_deallocObject(v4, v8 + v9, v7 | 7);
}

uint64_t sub_100108C4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v7 = v4[4];
  v8 = v4[5];
  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AdaptiveNavigationDisclosureIndicatorWrapper(0, v7, v8, a4)- 8)+ 80);
  v10 = v4[2];
  v11 = v4[3];
  v12 = (uint64_t)v4 + ((v9 + 48) & ~v9);
  v13 = (_QWORD *)swift_task_alloc(dword_10015CBD4);
  *(_QWORD *)(v5 + 16) = v13;
  *v13 = v5;
  v13[1] = sub_1000526BC;
  return sub_1001085C0(a1, v10, v11, v12, v7, v8);
}

uint64_t sub_100108CEC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t WitnessTable;
  unint64_t v6;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;

  v1 = *a1;
  v2 = a1[1];
  v3 = type metadata accessor for Button(255, *a1, v2);
  v4 = sub_100005430(&qword_10015CBC0);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Button<A>, v3);
  v6 = sub_100108824();
  v13 = v3;
  v14 = (void *)v4;
  v15 = WitnessTable;
  v16 = (void *)v6;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v13, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 0);
  v13 = v1;
  v14 = &type metadata for Never;
  v15 = v2;
  v16 = &protocol witness table for Never;
  v8 = type metadata accessor for NavigationLink(255, &v13);
  v9 = type metadata accessor for _ConditionalContent(255, OpaqueTypeMetadata2, v8);
  v13 = v3;
  v14 = (void *)v4;
  v15 = WitnessTable;
  v16 = (void *)v6;
  swift_getOpaqueTypeConformance2(&v13, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
  swift_getWitnessTable(&protocol conformance descriptor for NavigationLink<A, B>, v8);
  v10 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v9);
  v11 = type metadata accessor for _UnaryViewAdaptor(255, v9, v10);
  return swift_getWitnessTable(&protocol conformance descriptor for _UnaryViewAdaptor<A>, v11);
}

NSString sub_100108E34()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_10015D450 = (uint64_t)result;
  return result;
}

NSString sub_100108E68()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_10015D458 = (uint64_t)result;
  return result;
}

id sub_100108E9C()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CellularNotificationRelay()), "init");
  qword_10015D460 = (uint64_t)result;
  return result;
}

char *sub_100108EC8()
{
  void *v0;
  objc_class *ObjectType;
  char *v2;
  char *result;
  char *v4;
  int cellularDataCapability;
  unint64_t v6;
  void *v7;
  id v8;
  char *v9;
  void *v10;
  objc_super v11;

  ObjectType = (objc_class *)swift_getObjectType(v0);
  v2 = v0;
  if ((PSIsInEDUMode() & 1) != 0)
    goto LABEL_5;
  result = (char *)(id)MobileGestalt_get_current_device();
  if (!result)
  {
    __break(1u);
    return result;
  }
  v4 = result;
  cellularDataCapability = MobileGestalt_get_cellularDataCapability(result);

  if (!cellularDataCapability)
  {
LABEL_5:
    v8 = 0;
  }
  else
  {
    v6 = sub_100005494();
    v7 = (void *)static OS_dispatch_queue.main.getter(v6);
    v8 = objc_msgSend(objc_allocWithZone((Class)CoreTelephonyClient), "initWithQueue:", v7);

  }
  *(_QWORD *)&v2[OBJC_IVAR____TtC11SettingsApp25CellularNotificationRelay_telephonyClient] = v8;

  v11.receiver = v2;
  v11.super_class = ObjectType;
  v9 = (char *)objc_msgSendSuper2(&v11, "init");
  v10 = *(void **)&v9[OBJC_IVAR____TtC11SettingsApp25CellularNotificationRelay_telephonyClient];
  if (v10)
    objc_msgSend(v10, "setDelegate:", v9);
  return v9;
}

uint64_t type metadata accessor for CellularNotificationRelay()
{
  return objc_opt_self(_TtC11SettingsApp25CellularNotificationRelay);
}

BOOL static Text.< infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  return sub_100109290(a1, a2, a3 & 1, a4, a5, a6, a7 & 1, a8);
}

BOOL sub_1001091B8(uint64_t a1, uint64_t a2)
{
  return sub_100109290(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

BOOL sub_1001091E4(uint64_t a1, uint64_t a2)
{
  return !sub_100109290(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

BOOL sub_100109224(uint64_t a1, uint64_t a2)
{
  return !sub_100109290(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

BOOL sub_100109268(uint64_t a1, uint64_t a2)
{
  return sub_100109290(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

BOOL sub_100109290(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[4];
  uint64_t v38;

  v35 = a6;
  v36 = a8;
  v14 = type metadata accessor for Locale(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for EnvironmentValues(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v35 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = EnvironmentValues.init()(v19);
  static Locale.autoupdatingCurrent.getter(v22);
  EnvironmentValues.locale.setter(v16);
  v23 = Text._resolveText(in:)(v21, a1, a2, a3 & 1, a4);
  v25 = v24;
  v26 = *(uint64_t (**)(char *, uint64_t))(v18 + 8);
  v27 = v26(v21, v17);
  v37[3] = v23;
  v38 = v25;
  v28 = EnvironmentValues.init()(v27);
  static Locale.autoupdatingCurrent.getter(v28);
  EnvironmentValues.locale.setter(v16);
  v29 = Text._resolveText(in:)(v21, a5, v35, a7 & 1, v36);
  v31 = v30;
  v26(v21, v17);
  v37[0] = v29;
  v37[1] = v31;
  v32 = sub_100008A5C();
  v33 = StringProtocol.localizedCaseInsensitiveCompare<A>(_:)(v37, &type metadata for String, &type metadata for String, v32, v32);
  swift_bridgeObjectRelease(v31);
  swift_bridgeObjectRelease(v38);
  return v33 == -1;
}

unint64_t sub_10010942C()
{
  unint64_t result;

  result = qword_10015CCD0;
  if (!qword_10015CCD0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Text, &type metadata for Text);
    atomic_store(result, (unint64_t *)&qword_10015CCD0);
  }
  return result;
}

uint64_t sub_100109470()
{
  return sub_1001094B0(0x656C646E75424643, 0xEF6E6F6973726556);
}

uint64_t sub_100109494()
{
  return sub_1001094B0(0xD00000000000001ALL, 0x80000001001278B0);
}

uint64_t sub_1001094B0(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v11;
  __int128 v12;
  __int128 v13;

  v5 = objc_msgSend(v2, "infoDictionary");
  if (!v5)
  {
    v12 = 0u;
    v13 = 0u;
    goto LABEL_11;
  }
  v6 = v5;
  v7 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v5, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  if (!*(_QWORD *)(v7 + 16) || (v8 = sub_1000DA98C(a1, a2), (v9 & 1) == 0))
  {
    v12 = 0u;
    v13 = 0u;
    swift_bridgeObjectRelease(v7);
    goto LABEL_11;
  }
  sub_1000148AC(*(_QWORD *)(v7 + 56) + 32 * v8, (uint64_t)&v12);
  swift_bridgeObjectRelease(v7);
  if (!*((_QWORD *)&v13 + 1))
  {
LABEL_11:
    sub_10000BFF4((uint64_t)&v12);
    return 0;
  }
  if (swift_dynamicCast(&v11, &v12, (char *)&type metadata for Any + 8, &type metadata for String, 6))
    return v11;
  else
    return 0;
}

uint64_t sub_1001095C4()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  id v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  id v15;
  uint64_t (*v16)(char *, uint64_t);
  uint64_t v17;
  uint64_t v19;
  __int128 v20;
  __int128 v21;

  v1 = v0;
  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v19 - v7;
  v9 = objc_msgSend(v0, "infoDictionary");
  if (!v9)
  {
    v20 = 0u;
    v21 = 0u;
    goto LABEL_9;
  }
  v10 = v9;
  v11 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v9, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  if (!*(_QWORD *)(v11 + 16) || (v12 = sub_1000DA98C(0x656C646E75424643, 0xEC000000656D614ELL), (v13 & 1) == 0))
  {
    v20 = 0u;
    v21 = 0u;
    swift_bridgeObjectRelease(v11);
    goto LABEL_9;
  }
  sub_1000148AC(*(_QWORD *)(v11 + 56) + 32 * v12, (uint64_t)&v20);
  swift_bridgeObjectRelease(v11);
  if (!*((_QWORD *)&v21 + 1))
  {
LABEL_9:
    sub_10000BFF4((uint64_t)&v20);
    goto LABEL_10;
  }
  if (!swift_dynamicCast(&v19, &v20, (char *)&type metadata for Any + 8, &type metadata for String, 6))
  {
LABEL_10:
    v15 = objc_msgSend(v1, "bundleURL");
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v15);

    URL.deletingPathExtension()();
    v16 = *(uint64_t (**)(char *, uint64_t))(v3 + 8);
    v17 = v16(v6, v2);
    v14 = URL.lastPathComponent.getter(v17);
    v16(v8, v2);
    return v14;
  }
  return v19;
}

uint64_t sub_10010979C(uint64_t *a1)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  Swift::Int v5;
  uint64_t v7[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v2 = sub_1000C1A10(v2);
    *a1 = v2;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v7[0] = v2 + 32;
  v7[1] = v4;
  v5 = sub_100109E44(v7);
  return specialized ContiguousArray._endMutation()(v5);
}

void sub_100109814(uint64_t a1)
{
  sub_10010997C(a1, 0xD00000000000001DLL, 0x8000000100127890, &qword_10015D468);
}

void sub_100109838(uint64_t a1)
{
  sub_10010997C(a1, 0xD000000000000039, 0x8000000100127AE0, &qword_10015D470);
}

void sub_10010985C(uint64_t a1)
{
  sub_10010997C(a1, 0xD000000000000037, 0x8000000100127B20, &qword_10015D478);
}

void sub_100109880(uint64_t a1)
{
  sub_10010997C(a1, 0xD00000000000003ELL, 0x8000000100127A60, &qword_10015D480);
}

void sub_1001098A4(uint64_t a1)
{
  sub_10010997C(a1, 0xD000000000000034, 0x8000000100127AA0, &qword_10015D488);
}

void sub_1001098C8(uint64_t a1)
{
  sub_10010997C(a1, 0xD000000000000046, 0x8000000100127A10, &qword_10015D490);
}

void sub_1001098EC(uint64_t a1)
{
  sub_10010997C(a1, 0xD000000000000046, 0x80000001001279C0, &qword_10015D498);
}

void sub_100109910(uint64_t a1)
{
  sub_10010997C(a1, 0xD00000000000004DLL, 0x8000000100127970, &qword_10015D4A0);
}

void sub_100109934(uint64_t a1)
{
  sub_10010997C(a1, 0xD000000000000043, 0x8000000100127920, &qword_10015D4A8);
}

void sub_100109958(uint64_t a1)
{
  sub_10010997C(a1, 0xD000000000000049, 0x80000001001278D0, &qword_10015D4B0);
}

void sub_10010997C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  NSString v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  NSString v10;
  id v11;

  v5 = String._bridgeToObjectiveC()();
  v6 = (id)SFRuntimeAbsoluteFilePathForPath();

  static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v8 = v7;

  v9 = objc_allocWithZone((Class)NSBundle);
  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v8);
  v11 = objc_msgSend(v9, "initWithPath:", v10);

  if (v11)
    *a4 = v11;
  else
    __break(1u);
}

uint64_t sub_100109A30()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  id v28;
  uint64_t result;
  id v30;
  unint64_t v31;
  uint64_t v32;

  v0 = sub_100004FC8(&qword_100158C10);
  v1 = swift_allocObject(v0, 104, 7);
  *(_OWORD *)(v1 + 16) = xmmword_10011B730;
  if (qword_100156DA8 != -1)
    swift_once(&qword_100156DA8, sub_10010985C);
  v2 = (void *)qword_10015D478;
  *(_QWORD *)(v1 + 32) = qword_10015D478;
  v3 = qword_100156DA0;
  v4 = v2;
  if (v3 != -1)
    swift_once(&qword_100156DA0, sub_100109838);
  v5 = (void *)qword_10015D470;
  *(_QWORD *)(v1 + 40) = qword_10015D470;
  v6 = qword_100156DB8;
  v7 = v5;
  if (v6 != -1)
    swift_once(&qword_100156DB8, sub_1001098A4);
  v8 = (void *)qword_10015D488;
  *(_QWORD *)(v1 + 48) = qword_10015D488;
  v9 = qword_100156DB0;
  v10 = v8;
  if (v9 != -1)
    swift_once(&qword_100156DB0, sub_100109880);
  v11 = (void *)qword_10015D480;
  *(_QWORD *)(v1 + 56) = qword_10015D480;
  v12 = qword_100156DC0;
  v13 = v11;
  if (v12 != -1)
    swift_once(&qword_100156DC0, sub_1001098C8);
  v14 = (void *)qword_10015D490;
  *(_QWORD *)(v1 + 64) = qword_10015D490;
  v15 = qword_100156DC8;
  v16 = v14;
  if (v15 != -1)
    swift_once(&qword_100156DC8, sub_1001098EC);
  v17 = (void *)qword_10015D498;
  *(_QWORD *)(v1 + 72) = qword_10015D498;
  v18 = qword_100156DD0;
  v19 = v17;
  if (v18 != -1)
    swift_once(&qword_100156DD0, sub_100109910);
  v20 = (void *)qword_10015D4A0;
  *(_QWORD *)(v1 + 80) = qword_10015D4A0;
  v21 = qword_100156DD8;
  v22 = v20;
  if (v21 != -1)
    swift_once(&qword_100156DD8, sub_100109934);
  v23 = (void *)qword_10015D4A8;
  *(_QWORD *)(v1 + 88) = qword_10015D4A8;
  v24 = qword_100156DE0;
  v25 = v23;
  if (v24 != -1)
    v25 = (id)swift_once(&qword_100156DE0, sub_100109958);
  v26 = (void *)qword_10015D4B0;
  *(_QWORD *)(v1 + 96) = qword_10015D4B0;
  v32 = v1;
  specialized Array._endMutation()(v25);
  if (v1 < 0 || (v32 & 0x4000000000000000) != 0)
  {
    v30 = v26;
    v31 = swift_bridgeObjectRetain(v1);
    v27 = (uint64_t)sub_100109D50(v31);
    swift_bridgeObjectRelease(v1);
  }
  else
  {
    v27 = v32 & 0xFFFFFFFFFFFFFF8;
    v28 = v26;
    swift_bridgeObjectRetain(v1);
  }
  v32 = v27;
  sub_10010979C(&v32);
  result = swift_bridgeObjectRelease(v1);
  qword_10015D4B8 = v32;
  return result;
}

uint64_t sub_100109CF0()
{
  uint64_t v0;

  v0 = type metadata accessor for NSBundle.PreferencesPluginLocation(0);
  sub_10001AED4(v0, qword_10015D4C0);
  sub_100007808(v0, (uint64_t)qword_10015D4C0);
  return NSBundle.PreferencesPluginLocation.init(path:)(0xD000000000000032, 0x8000000100127850);
}

_QWORD *sub_100109D50(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_10;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v2)
    return _swiftEmptyArrayStorage;
  while (1)
  {
    if (v2 <= 0)
    {
      v4 = _swiftEmptyArrayStorage;
    }
    else
    {
      v3 = sub_100004FC8(&qword_100158C10);
      v4 = (_QWORD *)swift_allocObject(v3, 8 * v2 + 32, 7);
      v5 = j__malloc_size(v4);
      v6 = v5 - 32;
      if (v5 < 32)
        v6 = v5 - 25;
      v4[2] = v2;
      v4[3] = (2 * (v6 >> 3)) | 1;
    }
    swift_bridgeObjectRetain(v1);
    v7 = sub_100103AE0((unint64_t)(v4 + 4), v2, v1);
    v1 = v8;
    swift_bridgeObjectRelease(v7);
    if (v1 == v2)
      break;
    __break(1u);
LABEL_10:
    if (v1 < 0)
      v9 = v1;
    else
      v9 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v9);
    swift_bridgeObjectRelease(v1);
    if (!v2)
      return _swiftEmptyArrayStorage;
  }
  return v4;
}

Swift::Int sub_100109E44(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  Swift::Int result;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  Swift::Int v15;
  uint64_t v16;
  char **v17;
  Swift::Int v18;
  unint64_t v19;
  Swift::Int v20;
  void *v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  id *v31;
  int v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  id v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t (*v48)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  id v51;
  void *v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t (*v63)(char *, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  Swift::Int v67;
  Swift::Int v68;
  uint64_t *v69;
  uint64_t v70;
  Swift::Int v71;
  uint64_t v72;
  Swift::Int v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  void *v77;
  id v78;
  id v79;
  id v80;
  void *v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  uint64_t v85;
  char **v86;
  id v87;
  id v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t (*v92)(char *, uint64_t);
  uint64_t v93;
  uint64_t v94;
  id v95;
  void *v96;
  uint64_t v97;
  unint64_t v98;
  char v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  id v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t (*v108)(char *, uint64_t);
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  void *v113;
  unint64_t v114;
  unint64_t v115;
  Swift::Int v116;
  char *v117;
  char *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  BOOL v130;
  unint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  BOOL v140;
  uint64_t v141;
  char v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  BOOL v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  unint64_t v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  Swift::Int v178;
  char *v179;
  Swift::Int v180;
  Swift::Int v181;
  Swift::Int v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  Swift::Int v187;
  char *v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  id v193;
  uint64_t v194;
  uint64_t v195;
  __int128 v196;
  __int128 v197;
  uint64_t v198;

  v2 = v1;
  v4 = type metadata accessor for URL(0);
  v190 = *(_QWORD *)(v4 - 8);
  v191 = v4;
  v5 = __chkstk_darwin(v4);
  v189 = (char *)&v174 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v188 = (char *)&v174 - v7;
  v8 = a1[1];
  result = _minimumMergeRunLength(_:)(v8);
  if (result >= v8)
  {
    if (v8 < 0)
      goto LABEL_195;
    if (v8)
      return sub_10010ACCC(0, v8, 1, a1);
    return result;
  }
  if (v8 >= 0)
    v10 = v8;
  else
    v10 = v8 + 1;
  if (v8 < -1)
    goto LABEL_203;
  v178 = result;
  v181 = v8;
  v174 = a1;
  if (v8 < 2)
  {
    v14 = (char *)_swiftEmptyArrayStorage;
    v198 = (uint64_t)_swiftEmptyArrayStorage;
    v184 = (char *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v8 != 1)
    {
      v19 = _swiftEmptyArrayStorage[2];
      if (v19 < 2)
      {
LABEL_158:
        v167 = swift_bridgeObjectRelease(v14);
        *(_QWORD *)((v198 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
        specialized Array._endMutation()(v167);
        return swift_bridgeObjectRelease(v198);
      }
LABEL_161:
      v168 = *v174;
      while (1)
      {
        v169 = v19 - 2;
        if (v19 < 2)
          goto LABEL_190;
        if (!v168)
          goto LABEL_202;
        v170 = *(_QWORD *)&v14[16 * v169 + 32];
        v171 = *(_QWORD *)&v14[16 * v19 + 24];
        sub_10010B150((id *)(v168 + 8 * v170), (id *)(v168 + 8 * *(_QWORD *)&v14[16 * v19 + 16]), (id *)(v168 + 8 * v171), v184);
        if (v2)
          goto LABEL_158;
        if (v171 < v170)
          goto LABEL_191;
        if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
          v14 = sub_1000C19D4((uint64_t)v14);
        if (v169 >= *((_QWORD *)v14 + 2))
          goto LABEL_192;
        v172 = &v14[16 * v169 + 32];
        *(_QWORD *)v172 = v170;
        *((_QWORD *)v172 + 1) = v171;
        v173 = *((_QWORD *)v14 + 2);
        if (v19 > v173)
          goto LABEL_193;
        memmove(&v14[16 * v19 + 16], &v14[16 * v19 + 32], 16 * (v173 - v19));
        *((_QWORD *)v14 + 2) = v173 - 1;
        v19 = v173 - 1;
        if (v173 <= 2)
          goto LABEL_158;
      }
    }
  }
  else
  {
    v11 = v10 >> 1;
    v12 = sub_10003CDA4();
    v13 = static Array._allocateBufferUninitialized(minimumCapacity:)(v11, v12);
    *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10) = v11;
    v184 = (char *)((v13 & 0xFFFFFFFFFFFFFF8) + 32);
    v198 = v13;
  }
  v185 = v1;
  v15 = 0;
  v16 = *a1;
  v175 = *a1 + 16;
  v176 = v16 - 8;
  v14 = (char *)_swiftEmptyArrayStorage;
  v17 = &selRef_visibilityStyle;
  v179 = (char *)&type metadata for Any + 8;
  v18 = v181;
  v186 = v16;
  while (2)
  {
    v20 = v15 + 1;
    v182 = v15;
    if (v15 + 1 >= v18)
      goto LABEL_65;
    v21 = *(void **)(v16 + 8 * v15);
    v22 = *(id *)(v16 + 8 * v20);
    v23 = v21;
    v24 = sub_1001095C4();
    v26 = v25;
    v27 = sub_1001095C4();
    if (v24 == v27 && v26 == v28)
    {
      LODWORD(v192) = 0;
      v30 = v26;
    }
    else
    {
      v30 = v28;
      LODWORD(v192) = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v26, v27, v28, 1);
    }
    swift_bridgeObjectRelease(v26);
    swift_bridgeObjectRelease(v30);

    v15 = v182;
    v20 = v182 + 2;
    if (v182 + 2 >= v181)
      goto LABEL_56;
    v177 = v14;
    v31 = (id *)(v175 + 8 * v182);
    while (1)
    {
      v33 = *(v31 - 1);
      v34 = *v31;
      v35 = v33;
      v36 = objc_msgSend(v34, "infoDictionary");
      v187 = v20;
      v193 = v34;
      if (!v36)
      {
        v196 = 0u;
        v197 = 0u;
LABEL_35:
        v43 = v35;
        sub_10000BFF4((uint64_t)&v196);
        goto LABEL_37;
      }
      v37 = v36;
      v38 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v36, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

      if (*(_QWORD *)(v38 + 16) && (v39 = sub_1000DA98C(0x656C646E75424643, 0xEC000000656D614ELL), (v40 & 1) != 0))
      {
        sub_1000148AC(*(_QWORD *)(v38 + 56) + 32 * v39, (uint64_t)&v196);
      }
      else
      {
        v196 = 0u;
        v197 = 0u;
      }
      swift_bridgeObjectRelease(v38);
      if (!*((_QWORD *)&v197 + 1))
        goto LABEL_35;
      if (swift_dynamicCast(&v194, &v196, (char *)&type metadata for Any + 8, &type metadata for String, 6))
      {
        v42 = v194;
        v41 = v195;
        goto LABEL_38;
      }
      v43 = v35;
LABEL_37:
      v44 = objc_msgSend(v34, "bundleURL", v174);
      v45 = v189;
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v44);

      v46 = v188;
      URL.deletingPathExtension()();
      v47 = v191;
      v48 = *(uint64_t (**)(char *, uint64_t))(v190 + 8);
      v49 = v48(v45, v191);
      v42 = URL.lastPathComponent.getter(v49);
      v41 = v50;
      v48(v46, v47);
      v35 = v43;
LABEL_38:
      v51 = objc_msgSend(v35, "infoDictionary", v174);
      if (!v51)
      {
        v196 = 0u;
        v197 = 0u;
LABEL_48:
        sub_10000BFF4((uint64_t)&v196);
        goto LABEL_49;
      }
      v52 = v51;
      v53 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v51, &type metadata for String, v179, &protocol witness table for String);

      if (*(_QWORD *)(v53 + 16) && (v54 = sub_1000DA98C(0x656C646E75424643, 0xEC000000656D614ELL), (v55 & 1) != 0))
      {
        sub_1000148AC(*(_QWORD *)(v53 + 56) + 32 * v54, (uint64_t)&v196);
      }
      else
      {
        v196 = 0u;
        v197 = 0u;
      }
      swift_bridgeObjectRelease(v53);
      if (!*((_QWORD *)&v197 + 1))
        goto LABEL_48;
      if (swift_dynamicCast(&v194, &v196, (char *)&type metadata for Any + 8, &type metadata for String, 6))
      {
        v56 = v35;
        v58 = v194;
        v57 = v195;
        if (v42 != v194)
          goto LABEL_24;
        goto LABEL_50;
      }
LABEL_49:
      v56 = v35;
      v59 = objc_msgSend(v35, "bundleURL");
      v60 = v189;
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v59);

      v61 = v188;
      URL.deletingPathExtension()();
      v62 = v191;
      v63 = *(uint64_t (**)(char *, uint64_t))(v190 + 8);
      v64 = v63(v60, v191);
      v58 = URL.lastPathComponent.getter(v64);
      v57 = v65;
      v63(v61, v62);
      v16 = v186;
      if (v42 != v58)
        goto LABEL_24;
LABEL_50:
      if (v41 == v57)
      {

        swift_bridgeObjectRelease_n(v41, 2);
        if ((v192 & 1) != 0)
        {
          v14 = v177;
          v17 = &selRef_visibilityStyle;
          v20 = v187;
          v15 = v182;
          goto LABEL_57;
        }
        goto LABEL_25;
      }
LABEL_24:
      v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v42, v41, v58, v57, 1);

      swift_bridgeObjectRelease(v41);
      swift_bridgeObjectRelease(v57);
      if (((v192 ^ v32) & 1) != 0)
        break;
LABEL_25:
      v20 = v187 + 1;
      ++v31;
      if (v181 == v187 + 1)
      {
        v20 = v181;
        v14 = v177;
        goto LABEL_55;
      }
    }
    v14 = v177;
    v20 = v187;
LABEL_55:
    v15 = v182;
LABEL_56:
    v17 = &selRef_visibilityStyle;
    if ((v192 & 1) != 0)
    {
LABEL_57:
      if (v20 < v15)
        goto LABEL_196;
      if (v15 < v20)
      {
        v66 = (uint64_t *)(v176 + 8 * v20);
        v67 = v20;
        v68 = v15;
        v69 = (uint64_t *)(v16 + 8 * v15);
        do
        {
          if (v68 != --v67)
          {
            if (!v16)
              goto LABEL_201;
            v70 = *v69;
            *v69 = *v66;
            *v66 = v70;
          }
          ++v68;
          --v66;
          ++v69;
        }
        while (v68 < v67);
        v15 = v182;
      }
    }
LABEL_65:
    if (v20 >= v181)
      goto LABEL_108;
    if (__OFSUB__(v20, v15))
      goto LABEL_194;
    if (v20 - v15 >= v178)
    {
      v15 = v182;
LABEL_108:
      if (v20 < v15)
        goto LABEL_189;
      goto LABEL_109;
    }
    if (__OFADD__(v182, v178))
      goto LABEL_197;
    v71 = v181;
    v15 = v182;
    if (v182 + v178 < v181)
      v71 = v182 + v178;
    if (v71 >= v182)
    {
      if (v20 == v71)
        goto LABEL_108;
      v177 = v14;
      v72 = v176 + 8 * v20;
      v180 = v71;
      while (2)
      {
        v187 = v20;
        v74 = v72;
        v75 = *(void **)(v16 + 8 * v20);
        v183 = v74;
        v76 = v74;
        while (2)
        {
          v77 = *(void **)v76;
          v78 = v75;
          v79 = v77;
          v80 = objc_msgSend(v78, v17[220]);
          v193 = v78;
          if (!v80)
          {
            v196 = 0u;
            v197 = 0u;
LABEL_87:
            v86 = v17;
            v87 = v79;
            sub_10000BFF4((uint64_t)&v196);
            goto LABEL_89;
          }
          v81 = v80;
          v82 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v80, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

          if (*(_QWORD *)(v82 + 16)
            && (v83 = sub_1000DA98C(0x656C646E75424643, 0xEC000000656D614ELL), (v84 & 1) != 0))
          {
            sub_1000148AC(*(_QWORD *)(v82 + 56) + 32 * v83, (uint64_t)&v196);
          }
          else
          {
            v196 = 0u;
            v197 = 0u;
          }
          swift_bridgeObjectRelease(v82);
          if (!*((_QWORD *)&v197 + 1))
            goto LABEL_87;
          if (swift_dynamicCast(&v194, &v196, (char *)&type metadata for Any + 8, &type metadata for String, 6))
          {
            v85 = v194;
            v192 = v195;
            goto LABEL_90;
          }
          v86 = v17;
          v87 = v79;
LABEL_89:
          v88 = objc_msgSend(v78, "bundleURL", v174);
          v89 = v189;
          static URL._unconditionallyBridgeFromObjectiveC(_:)(v88);

          v90 = v188;
          URL.deletingPathExtension()();
          v91 = v191;
          v92 = *(uint64_t (**)(char *, uint64_t))(v190 + 8);
          v93 = v92(v89, v191);
          v85 = URL.lastPathComponent.getter(v93);
          v192 = v94;
          v92(v90, v91);
          v79 = v87;
          v17 = v86;
LABEL_90:
          v95 = objc_msgSend(v79, v17[220], v174);
          if (!v95)
          {
            v196 = 0u;
            v197 = 0u;
            v100 = v85;
LABEL_99:
            sub_10000BFF4((uint64_t)&v196);
LABEL_100:
            v101 = v79;
            v104 = objc_msgSend(v79, "bundleURL");
            v105 = v189;
            static URL._unconditionallyBridgeFromObjectiveC(_:)(v104);

            v106 = v188;
            URL.deletingPathExtension()();
            v107 = v191;
            v108 = *(uint64_t (**)(char *, uint64_t))(v190 + 8);
            v109 = v108(v105, v191);
            v103 = URL.lastPathComponent.getter(v109);
            v102 = v110;
            v108(v106, v107);
            v17 = &selRef_visibilityStyle;
            goto LABEL_101;
          }
          v96 = v95;
          v97 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v95, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

          if (*(_QWORD *)(v97 + 16)
            && (v98 = sub_1000DA98C(0x656C646E75424643, 0xEC000000656D614ELL), (v99 & 1) != 0))
          {
            sub_1000148AC(*(_QWORD *)(v97 + 56) + 32 * v98, (uint64_t)&v196);
          }
          else
          {
            v196 = 0u;
            v197 = 0u;
          }
          v100 = v85;
          swift_bridgeObjectRelease(v97);
          if (!*((_QWORD *)&v197 + 1))
            goto LABEL_99;
          if (!swift_dynamicCast(&v194, &v196, (char *)&type metadata for Any + 8, &type metadata for String, 6))goto LABEL_100;
          v101 = v79;
          v103 = v194;
          v102 = v195;
LABEL_101:
          v111 = v192;
          if (v100 != v103 || v192 != v102)
          {
            v112 = _stringCompareWithSmolCheck(_:_:expecting:)(v100, v192, v103, v102, 1);

            swift_bridgeObjectRelease(v111);
            swift_bridgeObjectRelease(v102);
            if ((v112 & 1) == 0)
              goto LABEL_75;
            if (!v186)
              goto LABEL_199;
            v113 = *(void **)v76;
            v75 = *(void **)(v76 + 8);
            *(_QWORD *)v76 = v75;
            *(_QWORD *)(v76 + 8) = v113;
            v76 -= 8;
            ++v15;
            v73 = v187;
            if (v187 == v15)
              goto LABEL_76;
            continue;
          }
          break;
        }

        swift_bridgeObjectRelease_n(v111, 2);
LABEL_75:
        v73 = v187;
LABEL_76:
        v20 = v73 + 1;
        v15 = v182;
        v72 = v183 + 8;
        v16 = v186;
        if (v20 != v180)
          continue;
        break;
      }
      v20 = v180;
      v14 = v177;
      if (v180 < v182)
        goto LABEL_189;
LABEL_109:
      if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
        v14 = sub_1000C1710(0, *((_QWORD *)v14 + 2) + 1, 1, v14);
      v115 = *((_QWORD *)v14 + 2);
      v114 = *((_QWORD *)v14 + 3);
      v19 = v115 + 1;
      v116 = v182;
      if (v115 >= v114 >> 1)
      {
        v166 = sub_1000C1710((char *)(v114 > 1), v115 + 1, 1, v14);
        v116 = v182;
        v14 = v166;
      }
      *((_QWORD *)v14 + 2) = v19;
      v117 = v14 + 32;
      v118 = &v14[16 * v115 + 32];
      *(_QWORD *)v118 = v116;
      *((_QWORD *)v118 + 1) = v20;
      v187 = v20;
      if (v115)
      {
        while (2)
        {
          v119 = v19 - 1;
          if (v19 >= 4)
          {
            v124 = &v117[16 * v19];
            v125 = *((_QWORD *)v124 - 8);
            v126 = *((_QWORD *)v124 - 7);
            v130 = __OFSUB__(v126, v125);
            v127 = v126 - v125;
            if (v130)
              goto LABEL_178;
            v129 = *((_QWORD *)v124 - 6);
            v128 = *((_QWORD *)v124 - 5);
            v130 = __OFSUB__(v128, v129);
            v122 = v128 - v129;
            v123 = v130;
            if (v130)
              goto LABEL_179;
            v131 = v19 - 2;
            v132 = &v117[16 * v19 - 32];
            v134 = *(_QWORD *)v132;
            v133 = *((_QWORD *)v132 + 1);
            v130 = __OFSUB__(v133, v134);
            v135 = v133 - v134;
            if (v130)
              goto LABEL_181;
            v130 = __OFADD__(v122, v135);
            v136 = v122 + v135;
            if (v130)
              goto LABEL_184;
            if (v136 >= v127)
            {
              v154 = &v117[16 * v119];
              v156 = *(_QWORD *)v154;
              v155 = *((_QWORD *)v154 + 1);
              v130 = __OFSUB__(v155, v156);
              v157 = v155 - v156;
              if (v130)
                goto LABEL_188;
              v147 = v122 < v157;
            }
            else
            {
LABEL_127:
              if ((v123 & 1) != 0)
                goto LABEL_180;
              v131 = v19 - 2;
              v137 = &v117[16 * v19 - 32];
              v139 = *(_QWORD *)v137;
              v138 = *((_QWORD *)v137 + 1);
              v140 = __OFSUB__(v138, v139);
              v141 = v138 - v139;
              v142 = v140;
              if (v140)
                goto LABEL_183;
              v143 = &v117[16 * v119];
              v145 = *(_QWORD *)v143;
              v144 = *((_QWORD *)v143 + 1);
              v130 = __OFSUB__(v144, v145);
              v146 = v144 - v145;
              if (v130)
                goto LABEL_186;
              if (__OFADD__(v141, v146))
                goto LABEL_187;
              if (v141 + v146 < v122)
                goto LABEL_139;
              v147 = v122 < v146;
            }
            if (v147)
              v119 = v131;
          }
          else
          {
            if (v19 == 3)
            {
              v121 = *((_QWORD *)v14 + 4);
              v120 = *((_QWORD *)v14 + 5);
              v130 = __OFSUB__(v120, v121);
              v122 = v120 - v121;
              v123 = v130;
              goto LABEL_127;
            }
            v148 = *((_QWORD *)v14 + 4);
            v149 = *((_QWORD *)v14 + 5);
            v130 = __OFSUB__(v149, v148);
            v141 = v149 - v148;
            v142 = v130;
LABEL_139:
            if ((v142 & 1) != 0)
              goto LABEL_182;
            v150 = &v117[16 * v119];
            v152 = *(_QWORD *)v150;
            v151 = *((_QWORD *)v150 + 1);
            v130 = __OFSUB__(v151, v152);
            v153 = v151 - v152;
            if (v130)
              goto LABEL_185;
            if (v153 < v141)
              goto LABEL_14;
          }
          v158 = v119 - 1;
          if (v119 - 1 >= v19)
          {
            __break(1u);
LABEL_175:
            __break(1u);
LABEL_176:
            __break(1u);
LABEL_177:
            __break(1u);
LABEL_178:
            __break(1u);
LABEL_179:
            __break(1u);
LABEL_180:
            __break(1u);
LABEL_181:
            __break(1u);
LABEL_182:
            __break(1u);
LABEL_183:
            __break(1u);
LABEL_184:
            __break(1u);
LABEL_185:
            __break(1u);
LABEL_186:
            __break(1u);
LABEL_187:
            __break(1u);
LABEL_188:
            __break(1u);
LABEL_189:
            __break(1u);
LABEL_190:
            __break(1u);
LABEL_191:
            __break(1u);
LABEL_192:
            __break(1u);
LABEL_193:
            __break(1u);
LABEL_194:
            __break(1u);
LABEL_195:
            __break(1u);
LABEL_196:
            __break(1u);
LABEL_197:
            __break(1u);
            goto LABEL_198;
          }
          if (!v16)
            goto LABEL_200;
          v159 = v14;
          v160 = &v117[16 * v158];
          v161 = *(_QWORD *)v160;
          v162 = &v117[16 * v119];
          v163 = *((_QWORD *)v162 + 1);
          v164 = v185;
          sub_10010B150((id *)(v16 + 8 * *(_QWORD *)v160), (id *)(v16 + 8 * *(_QWORD *)v162), (id *)(v16 + 8 * v163), v184);
          v185 = v164;
          if (v164)
          {
            v14 = v159;
            goto LABEL_158;
          }
          if (v163 < v161)
            goto LABEL_175;
          if (v119 > *((_QWORD *)v159 + 2))
            goto LABEL_176;
          *(_QWORD *)v160 = v161;
          *(_QWORD *)&v117[16 * v158 + 8] = v163;
          v165 = *((_QWORD *)v159 + 2);
          if (v119 >= v165)
            goto LABEL_177;
          v14 = v159;
          v19 = v165 - 1;
          memmove(&v117[16 * v119], v162 + 16, 16 * (v165 - 1 - v119));
          *((_QWORD *)v159 + 2) = v165 - 1;
          if (v165 <= 2)
            goto LABEL_14;
          continue;
        }
      }
      v19 = 1;
LABEL_14:
      v18 = v181;
      v15 = v187;
      v17 = &selRef_visibilityStyle;
      if (v187 >= v181)
      {
        v2 = v185;
        if (v19 < 2)
          goto LABEL_158;
        goto LABEL_161;
      }
      continue;
    }
    break;
  }
LABEL_198:
  __break(1u);
LABEL_199:
  __break(1u);
LABEL_200:
  __break(1u);
LABEL_201:
  __break(1u);
LABEL_202:
  __break(1u);
LABEL_203:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

uint64_t sub_10010ACCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  char **v13;
  void *v14;
  uint64_t v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  id v25;
  char **v26;
  id v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  id v34;
  void *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t (*v47)(char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  id v69;

  v55 = a1;
  v7 = type metadata accessor for URL(0);
  v62 = *(_QWORD *)(v7 - 8);
  v63 = v7;
  v8 = __chkstk_darwin(v7);
  v61 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v8);
  v60 = (char *)&v53 - v11;
  v54 = a2;
  if (a3 != a2)
  {
    v58 = *a4;
    v12 = v58 + 8 * a3 - 8;
    v13 = &selRef_visibilityStyle;
    v57 = (char *)&type metadata for Any + 8;
LABEL_6:
    v14 = *(void **)(v58 + 8 * a3);
    v15 = v55;
    v56 = v12;
    v59 = a3;
    while (1)
    {
      v16 = *(void **)v12;
      v17 = v14;
      v18 = v16;
      v19 = objc_msgSend(v17, v13[220]);
      v69 = v17;
      if (!v19)
        break;
      v20 = v19;
      v21 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v19, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

      if (*(_QWORD *)(v21 + 16) && (v22 = sub_1000DA98C(0x656C646E75424643, 0xEC000000656D614ELL), (v23 & 1) != 0))
      {
        sub_1000148AC(*(_QWORD *)(v21 + 56) + 32 * v22, (uint64_t)&v67);
      }
      else
      {
        v67 = 0u;
        v68 = 0u;
      }
      swift_bridgeObjectRelease(v21);
      if (!*((_QWORD *)&v68 + 1))
        goto LABEL_16;
      if (swift_dynamicCast(&v65, &v67, (char *)&type metadata for Any + 8, &type metadata for String, 6))
      {
        v24 = v65;
        v64 = v66;
        goto LABEL_19;
      }
      v25 = v18;
      v26 = v13;
LABEL_18:
      v27 = objc_msgSend(v17, "bundleURL");
      v28 = v61;
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v27);

      v29 = v60;
      URL.deletingPathExtension()();
      v30 = v63;
      v31 = *(uint64_t (**)(char *, uint64_t))(v62 + 8);
      v32 = v31(v28, v63);
      v24 = URL.lastPathComponent.getter(v32);
      v64 = v33;
      v31(v29, v30);
      v13 = v26;
      v18 = v25;
LABEL_19:
      v34 = objc_msgSend(v18, v13[220]);
      if (!v34)
      {
        v67 = 0u;
        v68 = 0u;
LABEL_29:
        sub_10000BFF4((uint64_t)&v67);
LABEL_30:
        v40 = v18;
        v43 = objc_msgSend(v18, "bundleURL");
        v44 = v61;
        static URL._unconditionallyBridgeFromObjectiveC(_:)(v43);

        v45 = v60;
        URL.deletingPathExtension()();
        v46 = v63;
        v47 = *(uint64_t (**)(char *, uint64_t))(v62 + 8);
        v48 = v47(v44, v63);
        v42 = URL.lastPathComponent.getter(v48);
        v41 = v49;
        v47(v45, v46);
        v38 = v59;
        v13 = &selRef_visibilityStyle;
        goto LABEL_31;
      }
      v35 = v34;
      v36 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v34, &type metadata for String, v57, &protocol witness table for String);

      if (*(_QWORD *)(v36 + 16))
      {
        v37 = sub_1000DA98C(0x656C646E75424643, 0xEC000000656D614ELL);
        v38 = v59;
        if ((v39 & 1) != 0)
        {
          sub_1000148AC(*(_QWORD *)(v36 + 56) + 32 * v37, (uint64_t)&v67);
        }
        else
        {
          v67 = 0u;
          v68 = 0u;
        }
      }
      else
      {
        v67 = 0u;
        v68 = 0u;
        v38 = v59;
      }
      swift_bridgeObjectRelease(v36);
      if (!*((_QWORD *)&v68 + 1))
        goto LABEL_29;
      if (!swift_dynamicCast(&v65, &v67, (char *)&type metadata for Any + 8, &type metadata for String, 6))goto LABEL_30;
      v40 = v18;
      v42 = v65;
      v41 = v66;
LABEL_31:
      v50 = v64;
      if (v24 == v42 && v64 == v41)
      {

        result = swift_bridgeObjectRelease_n(v50, 2);
LABEL_5:
        a3 = v38 + 1;
        v12 = v56 + 8;
        if (a3 == v54)
          return result;
        goto LABEL_6;
      }
      v51 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v64, v42, v41, 1);

      swift_bridgeObjectRelease(v50);
      result = swift_bridgeObjectRelease(v41);
      if ((v51 & 1) == 0)
        goto LABEL_5;
      if (!v58)
      {
        __break(1u);
        return result;
      }
      v52 = *(void **)v12;
      v14 = *(void **)(v12 + 8);
      *(_QWORD *)v12 = v14;
      *(_QWORD *)(v12 + 8) = v52;
      v12 -= 8;
      if (v38 == ++v15)
        goto LABEL_5;
    }
    v67 = 0u;
    v68 = 0u;
LABEL_16:
    v25 = v18;
    v26 = v13;
    sub_10000BFF4((uint64_t)&v67);
    goto LABEL_18;
  }
  return result;
}

uint64_t sub_10010B150(id *a1, id *__src, id *a3, char *__dst)
{
  id *v5;
  id *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  void **v14;
  id *v15;
  void *v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  char v26;
  id *v27;
  id *v28;
  id *v29;
  void *v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  char v40;
  char *v41;
  uint64_t result;
  char *v43;
  void **v45;
  id *v46;
  char *v47;
  void **v48;
  id *v49;

  v5 = a3;
  v6 = __src;
  v7 = (char *)__src - (char *)a1;
  v8 = (char *)__src - (char *)a1 + 7;
  if ((char *)__src - (char *)a1 >= 0)
    v8 = (char *)__src - (char *)a1;
  v9 = v8 >> 3;
  v10 = (char *)a3 - (char *)__src;
  v11 = (char *)a3 - (char *)__src + 7;
  if ((char *)a3 - (char *)__src >= 0)
    v11 = (char *)a3 - (char *)__src;
  v12 = v11 >> 3;
  v49 = a1;
  v48 = (void **)__dst;
  if (v9 >= v11 >> 3)
  {
    if (v10 < -7)
      goto LABEL_54;
    if (__dst != (char *)__src || &__src[v12] <= (id *)__dst)
      memmove(__dst, __src, 8 * v12);
    v43 = __dst;
    v28 = (id *)&__dst[8 * v12];
    v47 = (char *)v28;
    v49 = v6;
    if (a1 >= v6 || v10 < 8)
    {
LABEL_53:
      sub_1000C1820((void **)&v49, (const void **)&v48, &v47);
      return 1;
    }
    v29 = v6;
    while (1)
    {
      v46 = v5;
      v30 = *--v29;
      v31 = *(v28 - 1);
      v32 = v30;
      v33 = sub_1001095C4();
      v35 = v34;
      v36 = sub_1001095C4();
      if (v33 == v36 && v35 == v37)
        break;
      v39 = v37;
      v40 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v35, v36, v37, 1);

      swift_bridgeObjectRelease(v35);
      swift_bridgeObjectRelease(v39);
      v41 = (char *)v46;
      v5 = v46 - 1;
      if ((v40 & 1) == 0)
        goto LABEL_46;
      if (v46 != v6 || v5 >= v6)
        *v5 = *v29;
      v49 = v29;
LABEL_51:
      if (v29 > a1)
      {
        v6 = v29;
        if (v28 > (id *)v43)
          continue;
      }
      goto LABEL_53;
    }

    swift_bridgeObjectRelease_n(v35, 2);
    v41 = (char *)v46;
    v5 = v46 - 1;
LABEL_46:
    v47 = (char *)(v28 - 1);
    if (v41 < (char *)v28 || v5 >= v28 || v41 != (char *)v28)
      *v5 = *(v28 - 1);
    v29 = v6;
    --v28;
    goto LABEL_51;
  }
  if (v7 >= -7)
  {
    if (__dst != (char *)a1 || &a1[v9] <= (id *)__dst)
      memmove(__dst, a1, 8 * v9);
    v45 = (void **)&__dst[8 * v9];
    v47 = (char *)v45;
    if (v6 < v5 && v7 >= 8)
    {
      v13 = (void **)__dst;
      v14 = a1;
      while (1)
      {
        v15 = v5;
        v16 = *v13;
        v17 = *v6;
        v18 = v16;
        v19 = sub_1001095C4();
        v21 = v20;
        v22 = sub_1001095C4();
        if (v19 == v22 && v21 == v23)
          break;
        v25 = v23;
        v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v21, v22, v23, 1);

        swift_bridgeObjectRelease(v21);
        swift_bridgeObjectRelease(v25);
        if ((v26 & 1) == 0)
          goto LABEL_23;
        v27 = v6 + 1;
        v5 = v15;
        if (v14 < v6 || v14 >= v27 || v14 != v6)
          *v14 = *v6;
LABEL_26:
        ++v14;
        if (v13 < v45)
        {
          v6 = v27;
          if (v27 < v5)
            continue;
        }
        v49 = v14;
        goto LABEL_53;
      }

      swift_bridgeObjectRelease_n(v21, 2);
LABEL_23:
      v5 = v15;
      if (v14 != v13)
        *v14 = *v13;
      v48 = ++v13;
      v27 = v6;
      goto LABEL_26;
    }
    goto LABEL_53;
  }
LABEL_54:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_10010B4E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[24];
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _BYTE v9[24];

  v1 = v0 + OBJC_IVAR____TtC11SettingsApp24EthernetListItemProvider_cancellable;
  swift_beginAccess(v0 + OBJC_IVAR____TtC11SettingsApp24EthernetListItemProvider_cancellable, v9, 0, 0);
  if (*(_QWORD *)(v1 + 24))
  {
    sub_10003CE00(v1, (uint64_t)&v6);
    v2 = *((_QWORD *)&v7 + 1);
    v3 = v8;
    sub_100007C2C(&v6, *((uint64_t *)&v7 + 1));
    dispatch thunk of Cancellable.cancel()(v2, v3);
    sub_100005474(&v6);
  }
  v8 = 0;
  v6 = 0u;
  v7 = 0u;
  swift_beginAccess(v1, v5, 33, 0);
  sub_100047EA0((uint64_t)&v6, v1);
  swift_endAccess(v5);
  sub_100013014(v0 + OBJC_IVAR____TtC11SettingsApp24EthernetListItemProvider_id);
  sub_100005474((_QWORD *)(v0 + OBJC_IVAR____TtC11SettingsApp24EthernetListItemProvider_invalidator));
  sub_10000BA50(v1, &qword_1001587E0);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10010B5F0()
{
  return type metadata accessor for EthernetListItemProvider(0);
}

uint64_t type metadata accessor for EthernetListItemProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_10015CD18;
  if (!qword_10015CD18)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for EthernetListItemProvider);
  return result;
}

uint64_t sub_10010B634(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = type metadata accessor for PrimarySettingsListItemIdentifier(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_10011B760;
    v4[2] = &unk_10011B778;
    v4[3] = &unk_10011B790;
    result = swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

void sub_10010B6BC(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = v2;
  v6 = type metadata accessor for PrimarySettingsListItemIdentifier(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v3 + OBJC_IVAR____TtC11SettingsApp24EthernetListItemProvider_hasEthernetNetworkInterfaces) == 1)
  {
    sub_100012DC4(v3 + OBJC_IVAR____TtC11SettingsApp24EthernetListItemProvider_id, (uint64_t)v8);
    v9 = type metadata accessor for StaticPrimarySettingsListItemProvider(0);
    v10 = swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
    sub_10000F48C((uint64_t)v8, v10 + OBJC_IVAR____TtC11SettingsApp37StaticPrimarySettingsListItemProvider_id);
    sub_1000B2604(a1, a2);
    swift_setDeallocating(v10);
    sub_100013014(v10 + OBJC_IVAR____TtC11SettingsApp37StaticPrimarySettingsListItemProvider_id);
    swift_deallocClassInstance(v10, *(unsigned int *)(*(_QWORD *)v10 + 48), *(unsigned __int16 *)(*(_QWORD *)v10 + 52));
  }
  else
  {
    v11 = type metadata accessor for PrimarySettingsListItemModel(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a2, 1, 1, v11);
  }
  sub_10010B800(v3);
}

void sub_10010B800(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  id v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  _BYTE v27[24];
  id v28[3];
  uint64_t v29;
  void *v30;
  _BYTE v31[24];

  v2 = sub_100004FC8((uint64_t *)&unk_10015C970);
  __chkstk_darwin(v2);
  v4 = &v27[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = type metadata accessor for NSNotificationCenter.Publisher(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v27[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = sub_100004FC8((uint64_t *)&unk_100156F10);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v27[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = objc_msgSend((id)objc_opt_self(PSLaunchTracker), "sharedInstance");
  v14 = objc_msgSend(v13, "launchHasCompleted");

  if (v14)
  {
    v15 = a1 + OBJC_IVAR____TtC11SettingsApp24EthernetListItemProvider_cancellable;
    swift_beginAccess(a1 + OBJC_IVAR____TtC11SettingsApp24EthernetListItemProvider_cancellable, v31, 0, 0);
    sub_100047DD8(v15, (uint64_t)v28);
    v16 = v29;
    sub_10000BA50((uint64_t)v28, &qword_1001587E0);
    if (!v16)
    {
      v17 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
      NSNotificationCenter.publisher(for:object:)(PSEthernetChangedNotification, 0);

      v18 = sub_100005494();
      v28[0] = (id)static OS_dispatch_queue.main.getter(v18);
      v19 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v4, 1, 1, v19);
      v20 = sub_100007828((unint64_t *)&unk_100156F20, (uint64_t (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Publisher, (uint64_t)&protocol conformance descriptor for NSNotificationCenter.Publisher);
      v26 = a1;
      v21 = v20;
      v22 = sub_100007828((unint64_t *)&qword_10015C990, (uint64_t (*)(uint64_t))sub_100005494, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
      Publisher.receive<A>(on:options:)(v28, v4, v5, v18, v21, v22);
      sub_10000BA50((uint64_t)v4, (uint64_t *)&unk_10015C970);

      (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
      v23 = swift_allocObject(&unk_10014E298, 24, 7);
      swift_weakInit(v23 + 16, v26);
      v24 = sub_100007868((unint64_t *)&qword_100156F30, (uint64_t *)&unk_100156F10, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
      v25 = (void *)Publisher<>.sink(receiveValue:)(sub_10010C408, v23, v9, v24);
      swift_release(v23);
      (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);
      v29 = type metadata accessor for AnyCancellable(0);
      v30 = &protocol witness table for AnyCancellable;
      v28[0] = v25;
      swift_beginAccess(v15, v27, 33, 0);
      sub_100047EA0((uint64_t)v28, v15);
      swift_endAccess(v27);
      sub_10010BB38();
    }
  }
}

uint64_t sub_10010BB38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_signpost_type_t v19;
  uint8_t *v20;
  uint8_t *v21;
  uint64_t v22;
  os_signpost_id_t v23;
  uint8_t *v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD aBlock[5];
  uint64_t v42;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v38 = *(_QWORD *)(v2 - 8);
  v39 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v36 = *(_QWORD *)(v5 - 8);
  v37 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OSSignpostID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v35 - v13;
  if (qword_100156CD8 != -1)
    swift_once(&qword_100156CD8, sub_10008BEEC);
  v15 = type metadata accessor for OSSignposter(0);
  v16 = sub_100007808(v15, (uint64_t)qword_10015D340);
  v17 = static OSSignpostID.exclusive.getter(v16);
  v18 = OSSignposter.logHandle.getter(v17);
  v19 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    v35 = v7;
    v21 = v20;
    *(_WORD *)v20 = 0;
    v23 = OSSignpostID.rawValue.getter(v20, v22);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, v19, v23, "EthernetListItemProvider.updateEthernet began", "", v21, 2u);
    v24 = v21;
    v1 = v0;
    v7 = v35;
    swift_slowDealloc(v24, -1, -1);

    v25 = *(void (**)(char *, uint64_t))(v9 + 8);
    v25(v14, v8);
    v25(v12, v8);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  }
  if (qword_100156D60 != -1)
    swift_once(&qword_100156D60, sub_1000D34BC);
  v26 = swift_allocObject(&unk_10014E298, 24, 7);
  swift_weakInit(v26 + 16, v1);
  aBlock[4] = sub_10010C410;
  v42 = v26;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100005350;
  aBlock[3] = &unk_10014E2B0;
  v27 = _Block_copy(aBlock);
  swift_retain(v26);
  static DispatchQoS.unspecified.getter(v28);
  v40 = _swiftEmptyArrayStorage;
  v29 = sub_100007828((unint64_t *)&qword_10015BAB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v30 = sub_100004FC8((uint64_t *)&unk_100156F40);
  v31 = sub_100007868((unint64_t *)&qword_10015BAC0, (uint64_t *)&unk_100156F40, (uint64_t)&protocol conformance descriptor for [A]);
  v32 = v39;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v40, v30, v31, v39, v29);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v4, v27);
  _Block_release(v27);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v4, v32);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v7, v37);
  v33 = v42;
  swift_release(v26);
  return swift_release(v33);
}

id sub_10010BEE0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id result;
  void *v10;
  unsigned __int8 v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD aBlock[5];
  uint64_t v24;

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v22 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = objc_msgSend((id)objc_opt_self(PSSystemConfigurationDynamicStoreEthernetWatcher), "sharedManager");
  if (result)
  {
    v10 = result;
    v11 = objc_msgSend(result, "hasEthernetNetworkInterfaces");

    v12 = sub_100005494();
    v13 = (void *)static OS_dispatch_queue.main.getter(v12);
    v14 = swift_allocObject(&unk_10014E2E8, 25, 7);
    *(_QWORD *)(v14 + 16) = a1;
    *(_BYTE *)(v14 + 24) = v11;
    aBlock[4] = sub_10010C43C;
    v24 = v14;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100005350;
    aBlock[3] = &unk_10014E300;
    v15 = _Block_copy(aBlock);
    v16 = v24;
    swift_retain(a1);
    v17 = swift_release(v16);
    static DispatchQoS.unspecified.getter(v17);
    aBlock[0] = _swiftEmptyArrayStorage;
    v18 = sub_100007828((unint64_t *)&qword_10015BAB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v19 = sub_100004FC8((uint64_t *)&unk_100156F40);
    v20 = sub_100007868((unint64_t *)&qword_10015BAC0, (uint64_t *)&unk_100156F40, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v19, v20, v2, v18);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v4, v15);
    _Block_release(v15);

    (*(void (**)(char *, uint64_t))(v22 + 8))(v4, v2);
    return (id)(*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10010C128(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Strong;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_signpost_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  os_signpost_id_t v21;
  void (*v22)(char *, uint64_t);
  _QWORD v24[2];
  char v25;
  _BYTE v26[24];

  v4 = type metadata accessor for OSSignpostID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)v24 - v9;
  a1 += 16;
  swift_beginAccess(a1, v26, 0, 0);
  Strong = swift_weakLoadStrong(a1);
  if (Strong)
  {
    v12 = Strong;
    v13 = OBJC_IVAR____TtC11SettingsApp24EthernetListItemProvider_hasEthernetNetworkInterfaces;
    if (*(_BYTE *)(Strong + OBJC_IVAR____TtC11SettingsApp24EthernetListItemProvider_hasEthernetNetworkInterfaces) != (a2 & 1))
    {
      sub_100007C2C((_QWORD *)(Strong + OBJC_IVAR____TtC11SettingsApp24EthernetListItemProvider_invalidator), *(_QWORD *)(Strong + OBJC_IVAR____TtC11SettingsApp24EthernetListItemProvider_invalidator + 24));
      v24[0] = "Ethernet";
      v24[1] = 8;
      v25 = 2;
      PassthroughSubject.send(_:)(v24);
    }
    *(_BYTE *)(v12 + v13) = a2 & 1;
    swift_release(v12);
  }
  if (qword_100156CD8 != -1)
    swift_once(&qword_100156CD8, sub_10008BEEC);
  v14 = type metadata accessor for OSSignposter(0);
  v15 = sub_100007808(v14, (uint64_t)qword_10015D340);
  v16 = static OSSignpostID.exclusive.getter(v15);
  v17 = OSSignposter.logHandle.getter(v16);
  v18 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v10, v4);
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    v21 = OSSignpostID.rawValue.getter(v19, v20);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, v18, v21, "EthernetListItemProvider.updateEthernet completed", "", v19, 2u);
    swift_slowDealloc(v19, -1, -1);

    v22 = *(void (**)(char *, uint64_t))(v5 + 8);
    v22(v10, v4);
    return ((uint64_t (*)(char *, uint64_t))v22)(v8, v4);
  }
  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  }
}

uint64_t sub_10010C358@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_100012DC4(*v1 + OBJC_IVAR____TtC11SettingsApp24EthernetListItemProvider_id, a1);
}

void sub_10010C370(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10010B6BC(a1, a2);
}

uint64_t sub_10010C390()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10010C3B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v4 = result;
    sub_10010BB38();
    return swift_release(v4);
  }
  return result;
}

uint64_t sub_10010C408(uint64_t a1)
{
  uint64_t v1;

  return sub_10010C3B4(a1, v1);
}

id sub_10010C410()
{
  uint64_t v0;

  return sub_10010BEE0(v0);
}

uint64_t sub_10010C418()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

uint64_t sub_10010C43C()
{
  uint64_t v0;

  return sub_10010C128(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_10010C450(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v2 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v3 = a1;
    else
      v3 = a1 & 0xFFFFFFFFFFFFFF8;
    v4 = __CocoaSet.startIndex.getter(v3);
    v6 = v5;
    v7 = __CocoaSet.endIndex.getter(v3);
    v9 = static __CocoaSet.Index.== infix(_:_:)(v4, v6, v7, v8);
    swift_bridgeObjectRelease(v7);
    if ((v9 & 1) != 0)
      goto LABEL_6;
    goto LABEL_10;
  }
  result = sub_10010DF90(a1);
  if ((v13 & 1) == 0)
  {
    v6 = v12;
    if (*(_DWORD *)(a1 + 36) == (_DWORD)v12)
    {
      v4 = result;
      if (result == 1 << *(_BYTE *)(a1 + 32))
      {
LABEL_6:
        sub_10010E73C(v4, v6, v2 != 0);
        return 0;
      }
LABEL_10:
      sub_10010DD28(v4, v6, v2 != 0, a1);
      v10 = v14;
      sub_10010E73C(v4, v6, v2 != 0);
      return v10;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_10010C55C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_10011B818);
  v6 = v0;
  v2 = sub_100007828((unint64_t *)&unk_10015CE70, type metadata accessor for SettingsAppSceneDelegate, (uint64_t)&unk_10011B7F8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = *(void **)(v0 + OBJC_IVAR____TtC11SettingsApp24SettingsAppSceneDelegate__shortcutItemForInitialLaunch);
  v4 = v3;
  return v3;
}

id sub_10010C5F0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  void *v6;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10011B818);
  v8 = v3;
  v5 = sub_100007828((unint64_t *)&unk_10015CE70, type metadata accessor for SettingsAppSceneDelegate, (uint64_t)&unk_10011B7F8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(void **)(v3 + OBJC_IVAR____TtC11SettingsApp24SettingsAppSceneDelegate__shortcutItemForInitialLaunch);
  *a2 = v6;
  return v6;
}

uint64_t sub_10010C684(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  _QWORD v8[5];
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_10011B818);
  v8[2] = v3;
  v8[3] = v2;
  v9 = v3;
  v5 = sub_100007828((unint64_t *)&unk_10015CE70, type metadata accessor for SettingsAppSceneDelegate, (uint64_t)&unk_10011B7F8);
  v6 = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_10010D8A8, v8, (char *)&type metadata for () + 8, v5);

  return swift_release(KeyPath);
}

uint64_t sub_10010C738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4[20] = a4;
  v5 = sub_100004FC8(&qword_10015C5A0);
  v4[21] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Notification(0);
  v4[22] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[23] = v7;
  v4[24] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004FC8(&qword_10015CED8);
  v4[25] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for NSNotificationCenter.Notifications.Iterator(0);
  v4[26] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[27] = v10;
  v4[28] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10010C808, 0, 0);
}

uint64_t sub_10010C808()
{
  _QWORD *v0;
  id v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_100156D78 != -1)
    swift_once(&qword_100156D78, sub_1000EC5AC);
  NSNotificationCenter.notifications(named:object:)(qword_10015D440, 0);

  NSNotificationCenter.Notifications.makeAsyncIterator()();
  v2 = sub_100007828(&qword_10015CEE0, (uint64_t (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Notifications.Iterator, (uint64_t)&protocol conformance descriptor for NSNotificationCenter.Notifications.Iterator);
  v0[29] = v2;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  v0[30] = v3;
  *v3 = v0;
  v3[1] = sub_10010C900;
  return dispatch thunk of AsyncIteratorProtocol.next()(v0[25], v0[26], v2);
}

uint64_t sub_10010C900()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 240));
  if (v0)
  {
    *(_QWORD *)(v2 + 248) = v0;
    v3 = sub_10010CD7C;
  }
  else
  {
    v3 = sub_10010C964;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10010C964()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t ObjectType;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  _QWORD *v36;
  unsigned __int8 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v1 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 184);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v4 = *(_QWORD *)(v0 + 224);
    v5 = *(_QWORD *)(v0 + 192);
    v6 = *(_QWORD *)(v0 + 168);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 216) + 8))(v4, *(_QWORD *)(v0 + 208));
    swift_task_dealloc(v4);
    swift_task_dealloc(v1);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v8 = (_OWORD *)(v0 + 56);
  v9 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v3 + 32))(*(_QWORD *)(v0 + 192), v1, v2);
  v10 = Notification.userInfo.getter(v9);
  if (!v10)
  {
    *v8 = 0u;
    *(_OWORD *)(v0 + 72) = 0u;
LABEL_14:
    sub_10000BA50(v0 + 56, &qword_10015BA90);
    goto LABEL_15;
  }
  v11 = v10;
  *(_QWORD *)(v0 + 120) = 0xD000000000000010;
  *(_QWORD *)(v0 + 128) = 0x8000000100126F80;
  AnyHashable.init<A>(_:)((_QWORD *)(v0 + 16), v0 + 120, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v11 + 16) && (v12 = sub_1000DA95C(v0 + 16), (v13 & 1) != 0))
  {
    sub_1000148AC(*(_QWORD *)(v11 + 56) + 32 * v12, v0 + 56);
  }
  else
  {
    *v8 = 0u;
    *(_OWORD *)(v0 + 72) = 0u;
  }
  swift_bridgeObjectRelease(v11);
  sub_100014878(v0 + 16);
  if (!*(_QWORD *)(v0 + 80))
    goto LABEL_14;
  if ((swift_dynamicCast(v0 + 136, v0 + 56, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {
LABEL_15:
    if (qword_100156CB0 != -1)
      swift_once(&qword_100156CB0, sub_10008BE28);
    v31 = type metadata accessor for Logger(0);
    v32 = sub_100007808(v31, (uint64_t)qword_10015D2C8);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Received AuthKit Redirect without any authKitContextID!", v35, 2u);
      swift_slowDealloc(v35, -1, -1);
    }

    goto LABEL_20;
  }
  v14 = *(void **)(v0 + 160);
  v15 = *(_QWORD *)(v0 + 168);
  v16 = *(_QWORD *)(v0 + 136);
  v17 = *(_QWORD *)(v0 + 144);
  v18 = type metadata accessor for TaskPriority(0);
  v19 = *(_QWORD *)(v18 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v15, 1, 1, v18);
  type metadata accessor for MainActor(0);
  v20 = v14;
  v21 = static MainActor.shared.getter(v20);
  v22 = (_QWORD *)swift_allocObject(&unk_10014E410, 56, 7);
  v22[2] = v21;
  v22[3] = &protocol witness table for MainActor;
  v22[4] = v16;
  v22[5] = v17;
  v22[6] = v20;
  v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v15, 1, v18);
  v24 = *(_QWORD *)(v0 + 168);
  if (v23 != 1)
  {
    v37 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v24, v18);
    v25 = v37 | 0x1C00;
    v21 = v22[2];
    if (v21)
      goto LABEL_12;
LABEL_22:
    v28 = 0;
    v30 = 0;
    goto LABEL_23;
  }
  sub_10000BA50(*(_QWORD *)(v0 + 168), &qword_10015C5A0);
  v25 = 7168;
  if (!v21)
    goto LABEL_22;
LABEL_12:
  v26 = v22[3];
  ObjectType = swift_getObjectType(v21);
  swift_unknownObjectRetain(v21);
  v28 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v26);
  v30 = v29;
  swift_unknownObjectRelease(v21);
LABEL_23:
  v38 = swift_allocObject(&unk_10014E438, 32, 7);
  *(_QWORD *)(v38 + 16) = &unk_10015CEF0;
  *(_QWORD *)(v38 + 24) = v22;
  if (v30 | v28)
  {
    v39 = v0 + 88;
    *(_QWORD *)(v0 + 88) = 0;
    *(_QWORD *)(v0 + 96) = 0;
    *(_QWORD *)(v0 + 104) = v28;
    *(_QWORD *)(v0 + 112) = v30;
  }
  else
  {
    v39 = 0;
  }
  v40 = swift_task_create(v25, v39, (char *)&type metadata for () + 8, &unk_100158B40, v38);
  swift_release(v40);
LABEL_20:
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 184) + 8))(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 176));
  v36 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  *(_QWORD *)(v0 + 256) = v36;
  *v36 = v0;
  v36[1] = sub_10010CDDC;
  return dispatch thunk of AsyncIteratorProtocol.next()(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 232));
}

uint64_t sub_10010CD7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v0 + 152) = *(_QWORD *)(v0 + 248);
  v1 = sub_100004FC8(&qword_10015A970);
  v2 = swift_dynamicCast(v1, v0 + 152, v1, &type metadata for Never, 7);
  return swift_willThrowTypedImpl(v2, &type metadata for Never, &protocol witness table for Never);
}

uint64_t sub_10010CDDC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 256));
  if (v0)
  {
    *(_QWORD *)(v2 + 248) = v0;
    v3 = sub_10010CD7C;
  }
  else
  {
    v3 = sub_10010C964;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10010CE40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[16] = a4;
  v5[17] = a5;
  v6 = type metadata accessor for MainActor(0);
  v5[18] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  v5[19] = v7;
  v5[20] = v8;
  return swift_task_switch(sub_10010CEAC, v7, v8);
}

uint64_t sub_10010CEAC()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  NSString v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = objc_allocWithZone((Class)AKAppleIDAuthenticationUISurrogateContext);
  swift_bridgeObjectRetain(v1);
  v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v1);
  v4 = objc_msgSend(v2, "initWithSurrogateID:", v3);
  *(_QWORD *)(v0 + 168) = v4;

  if (v4)
  {
    v5 = v4;
    sub_10010E018();
    v7 = v6;
    objc_msgSend(v5, "setPresentingViewController:", v6);

  }
  v8 = objc_msgSend(objc_allocWithZone((Class)AKAppleIDAuthenticationController), "init");
  *(_QWORD *)(v0 + 176) = v8;
  if (v8)
  {
    v9 = v8;
    v10 = v0 + 16;
    *(_QWORD *)(v0 + 56) = v0 + 120;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_10010D020;
    v11 = swift_continuation_init(v0 + 16, 1);
    *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
    v12 = (_QWORD *)(v0 + 80);
    v12[1] = 0x40000000;
    v12[2] = sub_10010D140;
    v12[3] = &unk_10014E450;
    v12[4] = v11;
    objc_msgSend(v9, "authenticateWithContext:completion:", v4, v12);
    return swift_continuation_await(v10);
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 144);

    swift_release(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10010D020()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 184) = v2;
  if (v2)
    v3 = sub_10010D0D8;
  else
    v3 = sub_10010D07C;
  return swift_task_switch(v3, *(_QWORD *)(v1 + 152), *(_QWORD *)(v1 + 160));
}

uint64_t sub_10010D07C()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(void **)(v0 + 168);
  v1 = *(void **)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 144);

  swift_release(v3);
  v4 = *(_QWORD *)(v0 + 120);

  swift_bridgeObjectRelease(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10010D0D8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;

  v1 = *(void **)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 184);
  v3 = *(void **)(v0 + 168);
  v4 = swift_release(*(_QWORD *)(v0 + 144));
  swift_willThrow(v4);

  swift_errorRelease(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10010D140(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    v5 = sub_100004FC8(&qword_10015A970);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else
  {
    if (a2)
    {
      v11 = sub_100004FC8((uint64_t *)&unk_10015CF20);
      v12 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a2, &type metadata for String, v11, &protocol witness table for String);
    }
    else
    {
      v12 = 0;
    }
    v13 = v12;
    sub_10010E748((uint64_t)&v13, *(_QWORD *)(*(_QWORD *)(v3 + 64) + 40));
    return swift_continuation_throwingResume(v3);
  }
}

uint64_t sub_10010D5B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  v5 = type metadata accessor for MainActor(0);
  v4[6] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  return swift_task_switch(sub_10010D620, v6, v7);
}

uint64_t sub_10010D620()
{
  _QWORD *v0;
  void *v1;
  const void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  _QWORD *v9;
  uint64_t (*v11)(_QWORD);

  v1 = (void *)v0[5];
  v3 = (void *)v0[3];
  v2 = (const void *)v0[4];
  v4 = (void *)v0[2];
  swift_release(v0[6]);
  v0[7] = _Block_copy(v2);
  v5 = unk_10015CEC4;
  v11 = (uint64_t (*)(_QWORD))((char *)&dword_10015CEC0 + dword_10015CEC0);
  v6 = v4;
  v7 = v3;
  v8 = v1;
  v9 = (_QWORD *)swift_task_alloc(v5);
  v0[8] = v9;
  *v9 = v0;
  v9[1] = sub_10010D6BC;
  return v11(v0[3]);
}

uint64_t sub_10010D6BC(char a1)
{
  uint64_t *v1;
  void (**v3)(_QWORD, _QWORD);
  void *v4;
  void *v5;
  void *v6;
  uint64_t v8;

  v3 = *(void (***)(_QWORD, _QWORD))(*v1 + 56);
  v4 = *(void **)(*v1 + 40);
  v6 = *(void **)(*v1 + 16);
  v5 = *(void **)(*v1 + 24);
  v8 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 64));

  v3[2](v3, a1 & 1);
  _Block_release(v3);
  return (*(uint64_t (**)(void))(v8 + 8))();
}

id sub_10010D744()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SettingsAppSceneDelegate(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10010D7D8()
{
  return type metadata accessor for SettingsAppSceneDelegate(0);
}

uint64_t type metadata accessor for SettingsAppSceneDelegate(uint64_t a1)
{
  uint64_t result;

  result = qword_10015CE60;
  if (!qword_10015CE60)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SettingsAppSceneDelegate);
  return result;
}

uint64_t sub_10010D81C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = "\b";
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

void sub_10010D8A8()
{
  sub_10010E55C();
}

uint64_t sub_10010D8BC()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10010D8F8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = v0[2];
  v3 = v0[3];
  v5 = v0[4];
  v4 = v0[5];
  v6 = (_QWORD *)swift_task_alloc(dword_10015CE84);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_1000526BC;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10015CE80 + dword_10015CE80))(v2, v3, v5, v4);
}

uint64_t sub_10010D970(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  v4 = (_QWORD *)swift_task_alloc(a3[1]);
  *(_QWORD *)(v3 + 16) = v4;
  *v4 = v3;
  v4[1] = sub_1000570A0;
  return v6();
}

uint64_t sub_10010D9C8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (int *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_10015CE94);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1000570A0;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_10015CE90 + dword_10015CE90))(v2, v3, v4);
}

uint64_t sub_10010DA40(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  v5 = (_QWORD *)swift_task_alloc(a4[1]);
  *(_QWORD *)(v4 + 16) = v5;
  *v5 = v4;
  v5[1] = sub_1000570A0;
  return v7();
}

uint64_t sub_10010DA98()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10010DAC4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10015CEA4);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1000570A0;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_10015CEA0 + dword_10015CEA0))(a1, v4, v5, v6);
}

uint64_t sub_10010DB48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_10000BA50(a1, &qword_10015C5A0);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v15 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v16 = swift_allocObject(&unk_10014E3C0, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v17 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  else
  {
    v17 = 0;
  }
  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_10015CEB8, v16);
}

uint64_t sub_10010DC94()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10010DCB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_10015CEB4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1000570A0;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_10015CEB0 + dword_10015CEB0))(a1, v4);
}

void sub_10010DD28(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  void *v4;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  id v15;
  char v16;
  uint64_t v17;
  id v18;
  char v19;
  id v20;
  uint64_t v21;
  void *v22;

  v7 = a1;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if ((a3 & 1) != 0)
      goto LABEL_13;
    if (a1 < 0 || 1 << *(_BYTE *)(a4 + 32) <= a1)
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(a4 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> a1) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
        goto LABEL_20;
      __break(1u);
LABEL_13:
      if (__CocoaSet.Index.age.getter(a1, a2) == *(_DWORD *)(a4 + 36))
      {
        v11 = __CocoaSet.Index.element.getter(v7, a2);
        v21 = v11;
        v12 = sub_100007BBC(0, &qword_10015CF00, UIScene_ptr);
        swift_unknownObjectRetain(v11);
        swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v12, 7);
        v4 = v22;
        swift_unknownObjectRelease(v11);
        v13 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a4 + 40));
        v14 = -1 << *(_BYTE *)(a4 + 32);
        v7 = v13 & ~v14;
        if (((*(_QWORD *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
        {
          v15 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
          v16 = static NSObject.== infix(_:_:)(v15, v4);

          if ((v16 & 1) == 0)
          {
            v17 = ~v14;
            do
            {
              v7 = (v7 + 1) & v17;
              if (((*(_QWORD *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
                goto LABEL_24;
              v18 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
              v19 = static NSObject.== infix(_:_:)(v18, v4);

            }
            while ((v19 & 1) == 0);
          }

LABEL_20:
          v20 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
          return;
        }
LABEL_24:

        __break(1u);
        goto LABEL_25;
      }
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    __break(1u);
    goto LABEL_23;
  }
  if ((a3 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    return;
  }
  if (a4 < 0)
    v8 = a4;
  else
    v8 = a4 & 0xFFFFFFFFFFFFFF8;
  v9 = __CocoaSet.element(at:)(a1, a2, v8);
  v21 = v9;
  v10 = sub_100007BBC(0, &qword_10015CF00, UIScene_ptr);
  swift_unknownObjectRetain(v9);
  swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
  swift_unknownObjectRelease(v9);
}

uint64_t sub_10010DF90(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 72);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

void sub_10010E018()
{
  id v0;
  id v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;

  v0 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v1 = objc_msgSend(v0, "connectedScenes");

  v2 = sub_100007BBC(0, &qword_10015CF00, UIScene_ptr);
  v3 = sub_10010E6E4();
  v4 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v1, v2, v3);

  v5 = (void *)sub_10010C450(v4);
  swift_bridgeObjectRelease(v4);
  if (v5)
  {
    v6 = objc_opt_self(UIWindowScene);
    v7 = (void *)swift_dynamicCastObjCClass(v5, v6);
    if (v7)
    {
      v8 = objc_msgSend(v7, "windows");

      v9 = sub_100007BBC(0, &qword_10015CF10, UIWindow_ptr);
      v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v8, v9);

      if ((unint64_t)v10 >> 62)
      {
        if (v10 < 0)
          v13 = v10;
        else
          v13 = v10 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v10);
        v11 = (void *)_CocoaArrayWrapper.endIndex.getter(v13);
        swift_bridgeObjectRelease(v10);
        if (!v11)
          goto LABEL_9;
      }
      else
      {
        v11 = *(void **)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (!v11)
        {
LABEL_9:
          swift_bridgeObjectRelease(v10);
          objc_msgSend(v11, "rootViewController");

          return;
        }
      }
      if ((v10 & 0xC000000000000001) != 0)
      {
        v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v10);
        goto LABEL_8;
      }
      if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        v12 = *(id *)(v10 + 32);
LABEL_8:
        v11 = v12;
        goto LABEL_9;
      }
      __break(1u);
    }
    else
    {

    }
  }
}

void sub_10010E1DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[5];
  uint64_t v18;
  Swift::String v19;

  v1 = v0;
  KeyPath = swift_getKeyPath(&unk_10011B818);
  v18 = v0;
  v3 = sub_100007828((unint64_t *)&unk_10015CE70, type metadata accessor for SettingsAppSceneDelegate, (uint64_t)&unk_10011B7F8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v18, KeyPath, v3);
  swift_release(KeyPath);
  v4 = *(void **)(v0 + OBJC_IVAR____TtC11SettingsApp24SettingsAppSceneDelegate__shortcutItemForInitialLaunch);
  if (v4)
  {
    v5 = v4;
    v6 = objc_msgSend(v5, "type");
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    v9 = v8;

    v19._countAndFlagsBits = v7;
    v19._object = v9;
    v10 = sub_1000457B8(v19);
    if (v10 == 4)
    {

    }
    else
    {
      v11 = v10;
      v12 = swift_getKeyPath(&unk_10011B818);
      __chkstk_darwin(v12);
      v17[2] = v0;
      v17[3] = 0;
      v18 = v0;
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v18, v12, sub_10010D8A8, v17, (char *)&type metadata for () + 8, v3);
      swift_release(v12);
      v13 = *(_QWORD *)(v0 + OBJC_IVAR____TtC11SettingsApp24SettingsAppSceneDelegate__selectedQuickActionSubject);
      v14 = qword_100156C30;
      swift_retain(*(_QWORD *)(v1 + OBJC_IVAR____TtC11SettingsApp24SettingsAppSceneDelegate__selectedQuickActionSubject));
      if (v14 != -1)
        swift_once(&qword_100156C30, sub_1000465F8);
      TaskLocal.get()(&v18);
      v15 = v18;
      v16 = sub_1000D8AE4(v13, v18);
      swift_bridgeObjectRelease(v15);
      swift_release(v13);
      LOBYTE(v18) = v11;
      PassthroughSubject.send(_:)(&v18);

      swift_release(v16);
    }
  }
}

uint64_t sub_10010E3CC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[3] = a1;
  v2[4] = v1;
  v3 = type metadata accessor for MainActor(0);
  v2[5] = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  return swift_task_switch(sub_10010E438, v4, v5);
}

uint64_t sub_10010E438()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  unsigned __int8 v6;
  int v7;
  unsigned __int8 v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v15;

  v1 = *(void **)(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 40));
  v2 = objc_msgSend(v1, "type");
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v5 = v4;

  v15._countAndFlagsBits = v3;
  v15._object = v5;
  v6 = sub_1000457B8(v15);
  v7 = v6;
  if (v6 != 4)
  {
    v8 = v6;
    v9 = (uint64_t *)(v0 + 16);
    v10 = *(_QWORD *)(*(_QWORD *)(v0 + 32)
                    + OBJC_IVAR____TtC11SettingsApp24SettingsAppSceneDelegate__selectedQuickActionSubject);
    v11 = qword_100156C30;
    swift_retain(v10);
    if (v11 != -1)
      swift_once(&qword_100156C30, sub_1000465F8);
    TaskLocal.get()((_QWORD *)(v0 + 16));
    v12 = *v9;
    v13 = sub_1000D8AE4(v10, *v9);
    swift_bridgeObjectRelease(v12);
    swift_release(v10);
    *(_BYTE *)v9 = v8;
    PassthroughSubject.send(_:)(v0 + 16);
    swift_release(v13);
  }
  return (*(uint64_t (**)(BOOL))(v0 + 8))(v7 != 4);
}

void sub_10010E55C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(void **)(v0 + 24);
  v3 = *(void **)(v1 + OBJC_IVAR____TtC11SettingsApp24SettingsAppSceneDelegate__shortcutItemForInitialLaunch);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC11SettingsApp24SettingsAppSceneDelegate__shortcutItemForInitialLaunch) = v2;
  v4 = v2;

}

uint64_t sub_10010E598()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10010E5C4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10015CECC);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1000570A0;
  return sub_10010C738(a1, v4, v5, v6);
}

uint64_t sub_10010E630()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));

  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10010E664(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_10015CEEC);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_1000570A0;
  return sub_10010CE40(a1, v4, v5, v6, v7);
}

unint64_t sub_10010E6E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015CF08;
  if (!qword_10015CF08)
  {
    v1 = sub_100007BBC(255, &qword_10015CF00, UIScene_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_10015CF08);
  }
  return result;
}

uint64_t sub_10010E73C(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t sub_10010E748(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004FC8(&qword_10015CF18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for SettingsSearchZeroKeywordList()
{
  return &type metadata for SettingsSearchZeroKeywordList;
}

uint64_t sub_10010E7A4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10012BED8, 1);
}

uint64_t sub_10010E7B4()
{
  return EnvironmentValues._openSensitiveURL.getter();
}

uint64_t sub_10010E7D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001101C8(a1, a2, a3, a4, (void (*)(_QWORD))&type metadata accessor for OpenURLAction, (uint64_t (*)(char *))&EnvironmentValues._openSensitiveURL.setter);
}

uint64_t sub_10010E7E8@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  void (*v30)(char *, char *, uint64_t);
  void (*v31)(char *, _QWORD, uint64_t, uint64_t);
  char *v32;
  uint64_t v33;
  uint64_t KeyPath;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t OpaqueTypeConformance2;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84[16];
  uint64_t v85;
  char v86;
  _QWORD v87[5];

  v82 = a3;
  v5 = type metadata accessor for ScrollDismissesKeyboardMode(0);
  v80 = *(_QWORD *)(v5 - 8);
  v81 = v5;
  __chkstk_darwin(v5);
  v79 = (char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for PlainListStyle(0);
  v8 = *(_QWORD *)(v7 - 8);
  v77 = v7;
  v78 = v8;
  __chkstk_darwin(v7);
  v75 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100004FC8(&qword_10015CF90);
  __chkstk_darwin(v10);
  v12 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = sub_100004FC8(&qword_10015CF98);
  __chkstk_darwin(v67);
  v14 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for ListSectionSpacing(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_100004FC8(&qword_10015CFA0);
  v83 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v20 = (char *)&v62 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = sub_100004FC8(&qword_10015CFA8);
  __chkstk_darwin(v66);
  v22 = (char *)&v62 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = sub_100004FC8(&qword_10015CFB0);
  v71 = *(_QWORD *)(v70 - 8);
  __chkstk_darwin(v70);
  v68 = (char *)&v62 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = sub_100004FC8(&qword_10015CFB8);
  v74 = *(_QWORD *)(v76 - 8);
  __chkstk_darwin(v76);
  v69 = (char *)&v62 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = sub_100004FC8(&qword_10015CFC0);
  __chkstk_darwin(v73);
  v72 = (char *)&v62 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = a1;
  v86 = a2 & 1;
  v26 = sub_100004FC8(&qword_10015CFC8);
  v27 = sub_100007868(&qword_10015CFD0, &qword_10015CFC8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v63 = v20;
  v28 = List<>.init(content:)(sub_1001101BC, v84, v26, v27);
  static ListSectionSpacing.compact.getter(v28);
  v29 = &v14[*(int *)(v67 + 36)];
  v64 = v16;
  v30 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
  v30(v29, v18, v15);
  v31 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56);
  v31(v29, 0, 1, v15);
  v32 = v20;
  v33 = v65;
  (*(void (**)(char *, char *, uint64_t))(v83 + 16))(v14, v32, v65);
  KeyPath = swift_getKeyPath(&unk_10011B8E0);
  v30(v12, v18, v15);
  v31(v12, 0, 1, v15);
  v35 = v66;
  v36 = (uint64_t *)&v22[*(int *)(v66 + 36)];
  v37 = sub_100004FC8(&qword_10015CFD8);
  sub_100018C00((uint64_t)v12, (uint64_t)v36 + *(int *)(v37 + 28), &qword_10015CF90);
  *v36 = KeyPath;
  sub_100018C00((uint64_t)v14, (uint64_t)v22, &qword_10015CF98);
  sub_10000BA50((uint64_t)v12, &qword_10015CF90);
  sub_10000BA50((uint64_t)v14, &qword_10015CF98);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v18, v15);
  v38 = (*(uint64_t (**)(char *, uint64_t))(v83 + 8))(v63, v33);
  v39 = v75;
  PlainListStyle.init()(v38);
  v40 = sub_1001102E8();
  v41 = v68;
  v42 = v77;
  View.listStyle<A>(_:)(v39, v35, v77, v40, &protocol witness table for PlainListStyle);
  (*(void (**)(char *, uint64_t))(v78 + 8))(v39, v42);
  v43 = sub_10000BA50((uint64_t)v22, &qword_10015CFA8);
  v44 = v79;
  static ScrollDismissesKeyboardMode.interactively.getter(v43);
  v87[0] = v35;
  v87[1] = v42;
  v87[2] = v40;
  v87[3] = &protocol witness table for PlainListStyle;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v87, &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>, 1);
  v46 = v69;
  v47 = v70;
  View.scrollDismissesKeyboard(_:)(v44, v70, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v80 + 8))(v44, v81);
  v48 = (*(uint64_t (**)(char *, uint64_t))(v71 + 8))(v41, v47);
  v49 = static Alignment.center.getter(v48);
  v51 = v50;
  v52 = objc_msgSend((id)objc_opt_self(UIColor), "systemGroupedBackgroundColor");
  v53 = Color.init(uiColor:)(v52);
  v54 = static SafeAreaRegions.all.getter();
  LOBYTE(v39) = static Edge.Set.all.getter(v54);
  v55 = v74;
  v56 = (uint64_t)v72;
  v57 = v76;
  (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v72, v46, v76);
  v58 = v73;
  v59 = v56 + *(int *)(v73 + 36);
  *(_QWORD *)v59 = v53;
  *(_QWORD *)(v59 + 8) = v54;
  *(_BYTE *)(v59 + 16) = (_BYTE)v39;
  *(_QWORD *)(v59 + 24) = v49;
  *(_QWORD *)(v59 + 32) = v51;
  (*(void (**)(char *, uint64_t))(v55 + 8))(v46, v57);
  v60 = sub_100110408();
  View.accessibilityIdentifier(_:)(0xD000000000000033, 0x8000000100127D10, v58, v60);
  return sub_10000BA50(v56, &qword_10015CFC0);
}

uint64_t sub_10010EE04@<X0>(uint64_t a1@<X0>, char a2@<W1>, _BYTE *a3@<X8>)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  _BYTE *v48;
  _BYTE *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v72;
  _BYTE *v73;
  uint64_t v74;
  void (*v75)(_BYTE *, uint64_t);
  uint64_t v77;
  __int16 v78;
  _BYTE v79[12];
  int v80;
  uint64_t v81;
  uint64_t v82;
  _BYTE *v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE *v88;
  _BYTE *v89;
  _BYTE *v90;
  char v91[16];
  uint64_t v92;
  char v93;
  _QWORD v94[2];
  char v95;
  uint64_t v96;

  v81 = a1;
  v89 = a3;
  v4 = a2 & 1;
  v80 = a2 & 1;
  v5 = sub_100004FC8(&qword_10015D018);
  v6 = __chkstk_darwin(v5);
  v90 = &v79[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  v88 = &v79[-v8];
  v86 = sub_100004FC8(&qword_10015D020);
  v87 = *(_QWORD *)(v86 - 8);
  __chkstk_darwin(v86);
  v10 = &v79[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v85 = sub_100004FC8(&qword_10015D028);
  v82 = *(_QWORD *)(v85 - 8);
  v11 = __chkstk_darwin(v85);
  v84 = &v79[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v11);
  v83 = &v79[-v13];
  v92 = a1;
  v93 = v4;
  v14 = LocalizedStringKey.init(stringLiteral:)(0x6974736567677553, 0xEB00000000736E6FLL);
  v78 = 2;
  v77 = 24;
  v15 = Text.init(_:tableName:bundle:comment:)(v14);
  v17 = v16;
  v19 = v18;
  v21 = v20 & 1;
  v23 = static Font.footnote.getter(v22);
  static Font.Weight.semibold.getter(v23, v24);
  v25 = Font.weight(_:)(v23);
  swift_release(v23);
  v26 = Text.font(_:)(v25, v15, v17, v21, v19);
  v28 = v27;
  v30 = v29;
  v32 = v31;
  swift_release(v25);
  LOBYTE(v25) = v30 & 1;
  sub_100007618(v15, v17, v21);
  swift_bridgeObjectRelease(v19);
  v33 = objc_msgSend((id)objc_opt_self(UIColor), "secondaryLabelColor");
  v34 = Color.init(uiColor:)(v33);
  v94[0] = v34;
  v35 = Text.foregroundStyle<A>(_:)(v94, v26, v28, v30 & 1, v32, &type metadata for Color, &protocol witness table for Color);
  v37 = v36;
  LOBYTE(v21) = v38;
  v40 = v39;
  v41 = v26;
  v42 = v82;
  sub_100007618(v41, v28, v25);
  v43 = v34;
  LOBYTE(v34) = v80;
  swift_release(v43);
  v44 = v32;
  v45 = v81;
  swift_bridgeObjectRelease(v44);
  v94[0] = v35;
  v94[1] = v37;
  v46 = v85;
  v47 = v21 & 1;
  v48 = v84;
  v95 = v47;
  v96 = v40;
  v49 = v83;
  v50 = sub_100004FC8(&qword_10015D030);
  v51 = sub_100110508();
  v52 = Section<>.init(header:content:)(v94, sub_1001104FC, v91, &type metadata for Text, v50, &protocol witness table for Text, v51);
  v53 = static VerticalEdge.Set.bottom.getter(v52);
  v54 = sub_100110654();
  v55 = v53;
  v56 = v86;
  View.listSectionSeparator(_:edges:)(2, v55, v86, v54);
  (*(void (**)(_BYTE *, uint64_t))(v87 + 8))(v10, v56);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v42 + 32))(v49, v48, v46);
  swift_retain(v45);
  v58 = sub_100063728(v57, v34);
  v59 = swift_release(v45);
  v60 = SettingsZeroKeywordNavigationItemsProvider.recents.getter(v59);
  swift_release(v58);
  v61 = *(_QWORD *)(v60 + 16);
  v62 = swift_bridgeObjectRelease(v60);
  if (v61)
  {
    __chkstk_darwin(v62);
    v77 = v45;
    LOBYTE(v78) = v63;
    sub_10010FFF8((uint64_t)v94);
    v64 = sub_100004FC8(&qword_10015D060);
    v65 = sub_100004FC8(&qword_10015D068);
    v66 = sub_1001106D8();
    v67 = sub_10011073C();
    v68 = (uint64_t)v88;
    Section<>.init(header:content:)(v94, sub_1001106CC, &v79[-32], v64, v65, v66, v67);
    v69 = sub_100004FC8(&qword_10015D098);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 56))(v68, 0, 1, v69);
  }
  else
  {
    v70 = sub_100004FC8(&qword_10015D098);
    v68 = (uint64_t)v88;
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 56))(v88, 1, 1, v70);
  }
  v71 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v42 + 16);
  v71(v48, v49, v46);
  v72 = v90;
  sub_100018C00(v68, (uint64_t)v90, &qword_10015D018);
  v73 = v89;
  v71(v89, v48, v46);
  v74 = sub_100004FC8(&qword_10015D0A0);
  sub_100018C00((uint64_t)v72, (uint64_t)&v73[*(int *)(v74 + 48)], &qword_10015D018);
  sub_10000BA50(v68, &qword_10015D018);
  v75 = *(void (**)(_BYTE *, uint64_t))(v42 + 8);
  v75(v49, v46);
  sub_10000BA50((uint64_t)v72, &qword_10015D018);
  return ((uint64_t (*)(_BYTE *, uint64_t))v75)(v48, v46);
}

double sub_10010F360@<D0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  id v4;
  id v5;
  __n128 v6;
  uint64_t v7;
  double result;
  uint64_t v9;

  v4 = sub_10010F3E0(a1, a2 & 1);
  v5 = objc_msgSend((id)objc_opt_self(UIColor), "systemGroupedBackgroundColor");
  v9 = Color.init(uiColor:)(v5);
  v7 = AnyView.init<A>(_:)(&v9, &type metadata for Color, &protocol witness table for Color, v6);
  *(_QWORD *)a3 = v4;
  *(_QWORD *)(a3 + 8) = v7;
  result = 0.0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_BYTE *)(a3 + 48) = 0;
  return result;
}

id sub_10010F3E0(uint64_t a1, char a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id result;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(_QWORD *, _QWORD, uint64_t);
  unsigned int v53;
  uint64_t v54;
  void *v55;
  int deviceSupportsClosedLoopHaptics;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  void (*v61)(_QWORD);
  _BYTE *v62;
  _BYTE *v63;
  uint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  void (*v67)(_QWORD *, _QWORD, uint64_t);
  uint64_t v68;
  _BYTE *v69;
  _QWORD *v70;
  uint64_t v71;
  _BYTE *v72;
  _BYTE *v73;
  _BYTE *v74;
  _QWORD *v75;
  uint64_t v76;
  _BYTE *v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  int64_t v86;
  _BYTE v87[4];
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _OWORD *v93;
  void (*v94)(_QWORD *, _QWORD, uint64_t);
  _QWORD *v95;
  _BYTE *v96;
  _QWORD *v97;
  _BYTE *v98;
  _BYTE *v99;
  _BYTE *v100;
  _BYTE *v101;
  _BYTE *v102;
  _BYTE *v103;
  _BYTE *v104;
  void (*v105)(_BYTE *, _QWORD, uint64_t);
  _BYTE *v106;
  uint64_t v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;

  v3 = a2 & 1;
  v4 = sub_100004FC8((uint64_t *)&unk_10015C9A0);
  v5 = __chkstk_darwin(v4);
  v96 = &v87[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = __chkstk_darwin(v5);
  v99 = &v87[-v8];
  v9 = __chkstk_darwin(v7);
  v101 = &v87[-v10];
  __chkstk_darwin(v9);
  v104 = &v87[-v11];
  v109 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v107 = *(_QWORD *)(v109 - 8);
  __chkstk_darwin(v109);
  v106 = &v87[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for Locale(0);
  __chkstk_darwin(v13);
  v15 = &v87[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v16);
  v18 = &v87[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = type metadata accessor for LocalizedStringResource(0);
  v20 = __chkstk_darwin(v19);
  v100 = &v87[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v22 = __chkstk_darwin(v20);
  v98 = &v87[-v23];
  v24 = __chkstk_darwin(v22);
  v103 = &v87[-v25];
  __chkstk_darwin(v24);
  v102 = &v87[-v26];
  v27 = type metadata accessor for SettingsEventImage(0);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = __chkstk_darwin(v27);
  v95 = &v87[-((v30 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v31 = __chkstk_darwin(v29);
  v97 = &v87[-v32];
  v33 = __chkstk_darwin(v31);
  v35 = &v87[-v34];
  __chkstk_darwin(v33);
  v37 = &v87[-v36];
  swift_retain(a1);
  v39 = sub_100063728(v38, v3);
  v40 = swift_release(a1);
  v41 = SettingsZeroKeywordNavigationItemsProvider.suggestions.getter(v40);
  swift_release(v39);
  v42 = *(_QWORD *)(v41 + 16);
  swift_bridgeObjectRelease(v41);
  if (v42 == 4)
  {
    swift_retain(a1);
    v44 = sub_100063728(v43, v3);
    v45 = swift_release(a1);
    v46 = SettingsZeroKeywordNavigationItemsProvider.suggestions.getter(v45);
    swift_release(v44);
    return (id)v46;
  }
  v89 = a1;
  v88 = v3;
  v48 = sub_100004FC8(&qword_100158BF8);
  v49 = *(_QWORD *)(type metadata accessor for SettingsNavigationEventRecord(0) - 8);
  v50 = *(_QWORD *)(v49 + 72);
  v51 = *(unsigned __int8 *)(v49 + 80);
  v92 = (v51 + 32) & ~v51;
  v93 = (_OWORD *)swift_allocObject(v48, v92 + 4 * v50, v51 | 7);
  v93[1] = xmmword_100118B60;
  *v37 = 0xD00000000000001CLL;
  v37[1] = 0x8000000100124F90;
  v52 = *(void (**)(_QWORD *, _QWORD, uint64_t))(v28 + 104);
  v53 = enum case for SettingsEventImage.graphicIcon(_:);
  v94 = v52;
  v54 = ((uint64_t (*)(_QWORD *, _QWORD, uint64_t))v52)(v37, enum case for SettingsEventImage.graphicIcon(_:), v27);
  result = (id)MobileGestalt_get_current_device(v54);
  if (!result)
    goto LABEL_17;
  v55 = result;
  v108 = v53;
  deviceSupportsClosedLoopHaptics = MobileGestalt_get_deviceSupportsClosedLoopHaptics();

  v90 = v50;
  v91 = v27;
  if (deviceSupportsClosedLoopHaptics)
  {
    v57 = 0xD000000000000010;
    v58 = 0x80000001001249E0;
  }
  else
  {
    v57 = 0x73646E756F53;
    v58 = 0xE600000000000000;
  }
  v59 = String.LocalizationValue.init(stringLiteral:)(v57, v58);
  static Locale.current.getter(v59);
  v60 = v106;
  v61 = *(void (**)(_QWORD))(v107 + 104);
  LODWORD(v107) = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v105 = (void (*)(_BYTE *, _QWORD, uint64_t))v61;
  v61(v106);
  v62 = v104;
  v63 = v102;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v60, "Primary Text, Button", 20, 2);
  URL.init(string:)(0xD00000000000002FLL, 0x8000000100127D70);
  v64 = type metadata accessor for URL(0);
  v106 = *(_BYTE **)(*(_QWORD *)(v64 - 8) + 48);
  result = (id)((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v106)(v62, 1, v64);
  v65 = v103;
  if ((_DWORD)result == 1)
    goto LABEL_18;
  v104 = (char *)v93 + v92;
  SettingsNavigationEventRecord.init(icon:title:navigationPathComponents:navigationLink:associatedApplicationBundleIdentifier:)(v37, v63, _swiftEmptyArrayStorage, v62, 0, 0);
  *v35 = 0xD000000000000024;
  v35[1] = 0x8000000100124FB0;
  v66 = v91;
  v67 = v94;
  v94(v35, v108, v91);
  v68 = String.LocalizationValue.init(stringLiteral:)(0x6163696669746F4ELL, 0xED0000736E6F6974);
  static Locale.current.getter(v68);
  v105(v60, v107, v109);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v60, "Primary Text, Button", 20, 2);
  v69 = v101;
  URL.init(string:)(0xD000000000000036, 0x8000000100127DA0);
  result = (id)((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v106)(v69, 1, v64);
  if ((_DWORD)result == 1)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  SettingsNavigationEventRecord.init(icon:title:navigationPathComponents:navigationLink:associatedApplicationBundleIdentifier:)(v35, v65, _swiftEmptyArrayStorage, v69, 0, 0);
  v70 = v97;
  *v97 = 0xD00000000000001CLL;
  v70[1] = 0x8000000100124F70;
  v67(v70, v108, v66);
  v71 = String.LocalizationValue.init(stringLiteral:)(0x7375636F46, 0xE500000000000000);
  static Locale.current.getter(v71);
  v105(v60, v107, v109);
  v72 = v98;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v60, "Primary Text, Button", 20, 2);
  v73 = v99;
  URL.init(string:)(0xD00000000000002ELL, 0x8000000100127DE0);
  result = (id)((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v106)(v73, 1, v64);
  v74 = v100;
  if ((_DWORD)result == 1)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  SettingsNavigationEventRecord.init(icon:title:navigationPathComponents:navigationLink:associatedApplicationBundleIdentifier:)(v70, v72, _swiftEmptyArrayStorage, v73, 0, 0);
  v75 = v95;
  *v95 = 0xD000000000000022;
  v75[1] = 0x8000000100124F40;
  v94(v75, v108, v66);
  v76 = String.LocalizationValue.init(stringLiteral:)(0x54206E6565726353, 0xEB00000000656D69);
  static Locale.current.getter(v76);
  v105(v60, v107, v109);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v60, "Primary Text, Button", 20, 2);
  v77 = v96;
  URL.init(string:)(0xD000000000000033, 0x8000000100127E10);
  result = (id)((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v106)(v77, 1, v64);
  v78 = v88;
  v79 = v89;
  if ((_DWORD)result == 1)
  {
LABEL_21:
    __break(1u);
    return result;
  }
  v80 = (uint64_t)v104;
  SettingsNavigationEventRecord.init(icon:title:navigationPathComponents:navigationLink:associatedApplicationBundleIdentifier:)(v75, v74, _swiftEmptyArrayStorage, v77, 0, 0);
  swift_retain(v79);
  v82 = sub_100063728(v81, v78);
  v83 = swift_release(v79);
  v84 = SettingsZeroKeywordNavigationItemsProvider.suggestions.getter(v83);
  result = (id)swift_release(v82);
  v110 = v84;
  v85 = *(_QWORD *)(v84 + 16);
  if (v85 > 4)
  {
    __break(1u);
    goto LABEL_16;
  }
  v86 = 4 - v85;
  result = v93;
  if (*((_QWORD *)v93 + 2) < v86)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  sub_1000F26D4((uint64_t)v93, v80, 0, (2 * v86) | 1);
  return (id)v110;
}

uint64_t sub_10010FCB4(uint64_t a1, char a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v3 = a2 & 1;
  swift_retain(a1);
  v5 = sub_100063728(v4, v3);
  v6 = swift_release(a1);
  v7 = SettingsZeroKeywordNavigationItemsProvider.recents.getter(v6);
  swift_release(v5);
  v15 = v7;
  v8 = sub_100004FC8(&qword_1001588D0);
  v9 = type metadata accessor for URL(0);
  v10 = sub_100004FC8(&qword_10015D088);
  v11 = sub_100007868(&qword_1001588D8, &qword_1001588D0, (uint64_t)&protocol conformance descriptor for [A]);
  v12 = sub_1001107A0();
  v13 = sub_100007828(&qword_1001588E8, (uint64_t (*)(uint64_t))&type metadata accessor for SettingsNavigationEventRecord, (uint64_t)&protocol conformance descriptor for SettingsNavigationEventRecord);
  return ForEach<>.init(_:content:)(&v15, sub_10010FDC0, 0, v8, v9, v10, v11, v12, v13);
}

uint64_t sub_10010FDC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;

  v4 = type metadata accessor for SettingsNavigationEventRecord(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (int *)type metadata accessor for SettingsSearchZeroKeywordListRecentItem(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v11 = type metadata accessor for SettingsAppModel(0);
  v12 = sub_100007828((unint64_t *)&qword_100159090, type metadata accessor for SettingsAppModel, (uint64_t)&unk_10011AF44);
  *(_QWORD *)v10 = Environment.init<A>(_:)(v11, v11, v12);
  v10[8] = v13 & 1;
  v14 = &v10[v8[5]];
  *(_QWORD *)v14 = swift_getKeyPath(&unk_10011B910);
  v15 = sub_100004FC8(&qword_1001588F0);
  swift_storeEnumTagMultiPayload(v14, v15, 0);
  v16 = &v10[v8[6]];
  *(_QWORD *)v16 = swift_getKeyPath(&unk_10011B940);
  v17 = sub_100004FC8(&qword_1001591B8);
  swift_storeEnumTagMultiPayload(v16, v17, 0);
  v18 = &v10[v8[7]];
  *(_QWORD *)v18 = swift_getKeyPath(&unk_10011B970);
  v19 = sub_100004FC8(&qword_1001591C0);
  swift_storeEnumTagMultiPayload(v18, v19, 0);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v10[v8[8]], v7, v4);
  v20 = objc_msgSend((id)objc_opt_self(UIColor), "systemGroupedBackgroundColor");
  v21 = Color.init(uiColor:)(v20);
  v26 = v21;
  v22 = swift_retain(v21);
  v23 = AnyView.init<A>(_:)(&v26, &type metadata for Color, &protocol witness table for Color, v22);
  sub_10006B470((uint64_t)v10, a2);
  swift_release(v21);
  *(_QWORD *)(a2 + *(int *)(sub_100004FC8(&qword_10015D088) + 36)) = v23;
  return sub_100110908((uint64_t)v10);
}

void sub_10010FFF8(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v2 = LocalizedStringKey.init(stringLiteral:)(0x73746E65636552, 0xE700000000000000);
  LOWORD(v34) = 2;
  v3 = Text.init(_:tableName:bundle:comment:)(v2);
  v5 = v4;
  v7 = v6;
  v9 = v8 & 1;
  v11 = static Font.footnote.getter(v10);
  static Font.Weight.semibold.getter(v11, v12);
  v13 = Font.weight(_:)(v11);
  swift_release(v11);
  v14 = Text.font(_:)(v13, v3, v5, v9, v7);
  v16 = v15;
  v18 = v17;
  v20 = v19;
  swift_release(v13);
  LOBYTE(v13) = v18 & 1;
  sub_100007618(v3, v5, v9);
  swift_bridgeObjectRelease(v7);
  v21 = objc_msgSend((id)objc_opt_self(UIColor), "secondaryLabelColor", 24, v34);
  v22 = Color.init(uiColor:)(v21);
  v35 = v22;
  v23 = Text.foregroundStyle<A>(_:)(&v35, v14, v16, v18 & 1, v20, &type metadata for Color, &protocol witness table for Color);
  v25 = v24;
  LOBYTE(v9) = v26;
  v28 = v27;
  sub_100007618(v14, v16, v13);
  swift_release(v22);
  v29 = swift_bridgeObjectRelease(v20);
  LOBYTE(v20) = static Edge.Set.top.getter(v29);
  v30 = EdgeInsets.init(_all:)(12.0);
  *(_QWORD *)a1 = v23;
  *(_QWORD *)(a1 + 8) = v25;
  *(_BYTE *)(a1 + 16) = v9 & 1;
  *(_QWORD *)(a1 + 24) = v28;
  *(_BYTE *)(a1 + 32) = v20;
  *(double *)(a1 + 40) = v30;
  *(_QWORD *)(a1 + 48) = v31;
  *(_QWORD *)(a1 + 56) = v32;
  *(_QWORD *)(a1 + 64) = v33;
  *(_BYTE *)(a1 + 72) = 0;
}

uint64_t sub_1001101B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10010E7E8(*(_QWORD *)v1, *(_BYTE *)(v1 + 8), a1);
}

uint64_t sub_1001101BC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_10010EE04(*(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24), a1);
}

uint64_t sub_1001101C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD), uint64_t (*a6)(char *))
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  a5(0);
  __chkstk_darwin();
  v9 = (char *)&v12 - v8;
  (*(void (**)(char *, uint64_t))(v10 + 16))((char *)&v12 - v8, a1);
  return a6(v9);
}

uint64_t sub_100110244()
{
  return EnvironmentValues.listSectionSpacing.getter();
}

uint64_t sub_100110264(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = sub_100004FC8(&qword_10015CF90);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100018C00(a1, (uint64_t)v4, &qword_10015CF90);
  return EnvironmentValues.listSectionSpacing.setter(v4);
}

unint64_t sub_1001102E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015CFE0;
  if (!qword_10015CFE0)
  {
    v1 = sub_100005430(&qword_10015CFA8);
    sub_10011036C();
    sub_100007868(&qword_10015D008, &qword_10015CFD8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015CFE0);
  }
  return result;
}

unint64_t sub_10011036C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015CFE8;
  if (!qword_10015CFE8)
  {
    v1 = sub_100005430(&qword_10015CF98);
    sub_100007868(&qword_10015CFF0, &qword_10015CFA0, (uint64_t)&protocol conformance descriptor for List<A, B>);
    sub_100007868(&qword_10015CFF8, &qword_10015D000, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015CFE8);
  }
  return result;
}

unint64_t sub_100110408()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;

  result = qword_10015D010;
  if (!qword_10015D010)
  {
    v1 = sub_100005430(&qword_10015CFC0);
    v2 = sub_100005430(&qword_10015CFB0);
    v4 = sub_100005430(&qword_10015CFA8);
    v5 = type metadata accessor for PlainListStyle(255);
    v6 = sub_1001102E8();
    v7 = &protocol witness table for PlainListStyle;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>, 1);
    v4 = v2;
    v5 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.scrollDismissesKeyboard(_:)>>, 1);
    sub_100007868(&qword_100158CD0, &qword_100158CD8, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015D010);
  }
  return result;
}

double sub_1001104FC@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10010F360(*(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24), a1);
}

unint64_t sub_100110508()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015D038;
  if (!qword_10015D038)
  {
    v1 = sub_100005430(&qword_10015D030);
    sub_10011058C();
    sub_100007868(&qword_10015B370, &qword_10015B378, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015D038);
  }
  return result;
}

unint64_t sub_10011058C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015D040;
  if (!qword_10015D040)
  {
    v1 = sub_100005430(&qword_10015D048);
    sub_100110610();
    sub_100007868(&qword_10015B360, &qword_10015B368, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015D040);
  }
  return result;
}

unint64_t sub_100110610()
{
  unint64_t result;

  result = qword_10015D050;
  if (!qword_10015D050)
  {
    result = swift_getWitnessTable(&unk_10011628C, &type metadata for SettingsSearchZeroKeywordListSuggestionsRow);
    atomic_store(result, (unint64_t *)&qword_10015D050);
  }
  return result;
}

unint64_t sub_100110654()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015D058;
  if (!qword_10015D058)
  {
    v1 = sub_100005430(&qword_10015D020);
    sub_100110508();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> Section<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_10015D058);
  }
  return result;
}

uint64_t sub_1001106CC()
{
  uint64_t v0;

  return sub_10010FCB4(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

unint64_t sub_1001106D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015D070;
  if (!qword_10015D070)
  {
    v1 = sub_100005430(&qword_10015D060);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015D070);
  }
  return result;
}

unint64_t sub_10011073C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015D078;
  if (!qword_10015D078)
  {
    v1 = sub_100005430(&qword_10015D068);
    sub_1001107A0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_10015D078);
  }
  return result;
}

unint64_t sub_1001107A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015D080;
  if (!qword_10015D080)
  {
    v1 = sub_100005430(&qword_10015D088);
    sub_100007828(&qword_10015D090, type metadata accessor for SettingsSearchZeroKeywordListRecentItem, (uint64_t)&unk_100116FF0);
    sub_100007868(&qword_10015B360, &qword_10015B368, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015D080);
  }
  return result;
}

uint64_t sub_10011083C()
{
  return EnvironmentValues._openSensitiveURL.getter();
}

uint64_t sub_10011085C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001101C8(a1, a2, a3, a4, (void (*)(_QWORD))&type metadata accessor for OpenURLAction, (uint64_t (*)(char *))&EnvironmentValues._openSensitiveURL.setter);
}

uint64_t sub_100110880()
{
  return EnvironmentValues.layoutDirection.getter();
}

uint64_t sub_1001108A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001101C8(a1, a2, a3, a4, (void (*)(_QWORD))&type metadata accessor for LayoutDirection, (uint64_t (*)(char *))&EnvironmentValues.layoutDirection.setter);
}

uint64_t sub_1001108C4()
{
  return EnvironmentValues.locale.getter();
}

uint64_t sub_1001108E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001101C8(a1, a2, a3, a4, (void (*)(_QWORD))&type metadata accessor for Locale, (uint64_t (*)(char *))&EnvironmentValues.locale.setter);
}

uint64_t sub_100110908(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SettingsSearchZeroKeywordListRecentItem(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100110948()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015D0A8;
  if (!qword_10015D0A8)
  {
    v1 = sub_100005430(&qword_10015D0B0);
    sub_100110408();
    sub_100007828(&qword_100158CE8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015D0A8);
  }
  return result;
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return objc_opt_self(_TtC11SettingsAppP33_CA581AE9A19233B6CF5C83118CCB6F0819ResourceBundleClass);
}

id objc_msgSend__implementation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_implementation");
}

id objc_msgSend_connectedHeadphoneInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectedHeadphoneInfo");
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "count");
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_deviceID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceID");
}

id objc_msgSend_deviceImage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceImage");
}

id objc_msgSend_deviceName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceName");
}

id objc_msgSend_deviceSpecifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceSpecifier");
}

id objc_msgSend_initWithID_name_image_specifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithID:name:image:specifier:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_na_map_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "na_map:");
}

id objc_msgSend_setDeviceChangeHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceChangeHandler:");
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedInstance");
}

id objc_msgSend_simStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "simStatus:");
}

id objc_msgSend_subscriptionContexts(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subscriptionContexts");
}
