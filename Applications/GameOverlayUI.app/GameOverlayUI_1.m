uint64_t assignWithCopy for InGameBannerRequiredData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _TtC13GameOverlayUI20GameOverlayUIService *v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  _TtC13GameOverlayUI20GameOverlayUIService *v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  _TtC13GameOverlayUI20GameOverlayUIService *v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  _TtC13GameOverlayUI20GameOverlayUIService *v34;
  SEL v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  _TtC13GameOverlayUI20GameOverlayUIService *v43;
  SEL v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  _OWORD *v51;
  __int128 *v52;
  _TtC13GameOverlayUI20GameOverlayUIService *v53;
  uint64_t v54;
  uint64_t v55;
  SEL v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  uint64_t v63;
  _TtC13GameOverlayUI20GameOverlayUIService *v64;
  SEL v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  uint64_t v72;
  _TtC13GameOverlayUI20GameOverlayUIService *v73;
  SEL v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  uint64_t v81;
  _TtC13GameOverlayUI20GameOverlayUIService *v82;
  SEL v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  _TtC13GameOverlayUI20GameOverlayUIService *v101;
  SEL v102;
  id v103;
  id v104;
  id v105;
  id v106;
  id v107;
  id v108;
  uint64_t v109;
  _TtC13GameOverlayUI20GameOverlayUIService *v110;
  SEL v111;
  id v112;
  id v113;
  id v114;
  id v115;
  id v116;
  id v117;
  uint64_t *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  _TtC13GameOverlayUI20GameOverlayUIService *v125;
  SEL v126;
  id v127;
  id v128;
  id v129;
  id v130;
  id v131;
  id v132;
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  int *v136;
  uint64_t v137;
  uint64_t (*v138)(_QWORD *, uint64_t, int *);
  int v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _TtC13GameOverlayUI20GameOverlayUIService *v150;
  SEL v151;
  id v152;
  id v153;
  id v154;
  id v155;
  id v156;
  id v157;
  uint64_t v158;
  _TtC13GameOverlayUI20GameOverlayUIService *v159;
  SEL v160;
  id v161;
  id v162;
  id v163;
  id v164;
  id v165;
  id v166;
  uint64_t v167;
  _TtC13GameOverlayUI20GameOverlayUIService *v168;
  SEL v169;
  id v170;
  id v171;
  id v172;
  id v173;
  id v174;
  id v175;
  uint64_t v176;
  char *v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t (*v181)(char *, uint64_t, uint64_t);
  int v182;
  int v183;
  uint64_t v184;
  _QWORD *v185;
  _QWORD *v186;
  uint64_t v187;
  void (*v188)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  _QWORD *v192;
  uint64_t v193;
  _TtC13GameOverlayUI20GameOverlayUIService *v194;
  SEL v195;
  id v196;
  id v197;
  id v198;
  id v199;
  id v200;
  id v201;
  uint64_t v203;
  unsigned int (*v204)(char *, uint64_t, uint64_t);
  char *__dst;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7, v8, v9, v10, v11, v12, v13, v14);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v15 = *(_QWORD *)(a2 + 32);
  v16 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16, v17, v18, v19, v20, v21, v22, v23);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v24 = *(_QWORD *)(a2 + 48);
  v25 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25, v26, v27, v28, v29, v30, v31, v32);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v33 = *(_QWORD *)(a2 + 64);
  v34 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v33;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRelease(v34, v35, v36, v37, v38, v39, v40, v41);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v42 = *(_QWORD *)(a2 + 80);
  v43 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v42;
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRelease(v43, v44, v45, v46, v47, v48, v49, v50);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v51 = (_OWORD *)(a1 + 96);
  v52 = (__int128 *)(a2 + 96);
  v53 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 104);
  v54 = *(_QWORD *)(a2 + 104);
  if (v53)
  {
    if (v54)
    {
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      v55 = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 104) = v55;
      swift_bridgeObjectRetain(v55);
      swift_bridgeObjectRelease(v53, v56, v57, v58, v59, v60, v61, v62);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      v63 = *(_QWORD *)(a2 + 120);
      v64 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 120);
      *(_QWORD *)(a1 + 120) = v63;
      swift_bridgeObjectRetain(v63);
      swift_bridgeObjectRelease(v64, v65, v66, v67, v68, v69, v70, v71);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      v72 = *(_QWORD *)(a2 + 136);
      v73 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 136);
      *(_QWORD *)(a1 + 136) = v72;
      swift_bridgeObjectRetain(v72);
      swift_bridgeObjectRelease(v73, v74, v75, v76, v77, v78, v79, v80);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      v81 = *(_QWORD *)(a2 + 152);
      v82 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 152);
      *(_QWORD *)(a1 + 152) = v81;
      swift_bridgeObjectRetain(v81);
      swift_bridgeObjectRelease(v82, v83, v84, v85, v86, v87, v88, v89);
    }
    else
    {
      sub_100004244((_QWORD *)(a1 + 96));
      v94 = *(_OWORD *)(a2 + 144);
      v96 = *v52;
      v95 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v94;
      *v51 = v96;
      *(_OWORD *)(a1 + 112) = v95;
    }
  }
  else if (v54)
  {
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    v90 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 104) = v90;
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    v91 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 120) = v91;
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    v92 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 136) = v92;
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    v93 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 152) = v93;
    swift_bridgeObjectRetain(v90);
    swift_bridgeObjectRetain(v91);
    swift_bridgeObjectRetain(v92);
    swift_bridgeObjectRetain(v93);
  }
  else
  {
    v97 = *v52;
    v98 = *(_OWORD *)(a2 + 112);
    v99 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v99;
    *v51 = v97;
    *(_OWORD *)(a1 + 112) = v98;
  }
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  v100 = *(_QWORD *)(a2 + 168);
  v101 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v100;
  swift_bridgeObjectRetain(v100);
  swift_bridgeObjectRelease(v101, v102, v103, v104, v105, v106, v107, v108);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  v109 = *(_QWORD *)(a2 + 184);
  v110 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 184);
  *(_QWORD *)(a1 + 184) = v109;
  swift_bridgeObjectRetain(v109);
  swift_bridgeObjectRelease(v110, v111, v112, v113, v114, v115, v116, v117);
  v118 = (uint64_t *)(a2 + 192);
  v119 = *(_QWORD *)(a2 + 200);
  if (*(_QWORD *)(a1 + 200) >> 60 == 15)
  {
    if (v119 >> 60 != 15)
    {
      v120 = *v118;
      sub_100019F94(*v118, *(_QWORD *)(a2 + 200));
      *(_QWORD *)(a1 + 192) = v120;
      *(_QWORD *)(a1 + 200) = v119;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v119 >> 60 == 15)
  {
    sub_10005B718(a1 + 192);
LABEL_13:
    *(_OWORD *)(a1 + 192) = *(_OWORD *)v118;
    goto LABEL_15;
  }
  v121 = *v118;
  sub_100019F94(*v118, *(_QWORD *)(a2 + 200));
  v122 = *(_QWORD *)(a1 + 192);
  v123 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 192) = v121;
  *(_QWORD *)(a1 + 200) = v119;
  sub_100038198(v122, v123);
LABEL_15:
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  v124 = *(_QWORD *)(a2 + 216);
  v125 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 216);
  *(_QWORD *)(a1 + 216) = v124;
  swift_bridgeObjectRetain(v124);
  swift_bridgeObjectRelease(v125, v126, v127, v128, v129, v130, v131, v132);
  v133 = *(int *)(a3 + 40);
  v134 = (_QWORD *)(a1 + v133);
  v135 = (_QWORD *)(a2 + v133);
  v136 = (int *)type metadata accessor for Game(0);
  v137 = *((_QWORD *)v136 - 1);
  v138 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v137 + 48);
  v139 = v138(v134, 1, v136);
  v140 = v138(v135, 1, v136);
  if (!v139)
  {
    if (v140)
    {
      sub_1000106F0((uint64_t)v134, type metadata accessor for Game);
      goto LABEL_21;
    }
    *v134 = *v135;
    v149 = v135[1];
    v150 = (_TtC13GameOverlayUI20GameOverlayUIService *)v134[1];
    v134[1] = v149;
    swift_bridgeObjectRetain(v149);
    swift_bridgeObjectRelease(v150, v151, v152, v153, v154, v155, v156, v157);
    v134[2] = v135[2];
    v158 = v135[3];
    v159 = (_TtC13GameOverlayUI20GameOverlayUIService *)v134[3];
    v134[3] = v158;
    swift_bridgeObjectRetain(v158);
    swift_bridgeObjectRelease(v159, v160, v161, v162, v163, v164, v165, v166);
    v134[4] = v135[4];
    v167 = v135[5];
    v168 = (_TtC13GameOverlayUI20GameOverlayUIService *)v134[5];
    v134[5] = v167;
    swift_bridgeObjectRetain(v167);
    swift_bridgeObjectRelease(v168, v169, v170, v171, v172, v173, v174, v175);
    v176 = v136[7];
    v177 = (char *)v134 + v176;
    v178 = (char *)v135 + v176;
    v179 = type metadata accessor for Date(0);
    v180 = *(_QWORD *)(v179 - 8);
    v181 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v180 + 48);
    v182 = v181(v177, 1, v179);
    v183 = v181(v178, 1, v179);
    if (v182)
    {
      if (!v183)
      {
        (*(void (**)(char *, char *, uint64_t))(v180 + 16))(v177, v178, v179);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v180 + 56))(v177, 0, 1, v179);
LABEL_30:
        *(_QWORD *)((char *)v134 + v136[8]) = *(_QWORD *)((char *)v135 + v136[8]);
        *((_BYTE *)v134 + v136[9]) = *((_BYTE *)v135 + v136[9]);
        *((_BYTE *)v134 + v136[10]) = *((_BYTE *)v135 + v136[10]);
        *((_BYTE *)v134 + v136[11]) = *((_BYTE *)v135 + v136[11]);
        *((_BYTE *)v134 + v136[12]) = *((_BYTE *)v135 + v136[12]);
        *((_BYTE *)v134 + v136[13]) = *((_BYTE *)v135 + v136[13]);
        *((_BYTE *)v134 + v136[14]) = *((_BYTE *)v135 + v136[14]);
        v190 = v136[15];
        v191 = (_QWORD *)((char *)v134 + v190);
        v192 = (_QWORD *)((char *)v135 + v190);
        *v191 = *v192;
        v193 = v192[1];
        v194 = (_TtC13GameOverlayUI20GameOverlayUIService *)v191[1];
        v191[1] = v193;
        swift_bridgeObjectRetain(v193);
        swift_bridgeObjectRelease(v194, v195, v196, v197, v198, v199, v200, v201);
        return a1;
      }
    }
    else
    {
      if (!v183)
      {
        (*(void (**)(char *, char *, uint64_t))(v180 + 24))(v177, v178, v179);
        goto LABEL_30;
      }
      (*(void (**)(char *, uint64_t))(v180 + 8))(v177, v179);
    }
    v189 = sub_100003304(&qword_10010CC10);
    memcpy(v177, v178, *(_QWORD *)(*(_QWORD *)(v189 - 8) + 64));
    goto LABEL_30;
  }
  if (v140)
  {
LABEL_21:
    v148 = sub_100003304(&qword_10010CA78);
    memcpy(v134, v135, *(_QWORD *)(*(_QWORD *)(v148 - 8) + 64));
    return a1;
  }
  *v134 = *v135;
  v141 = v135[1];
  v134[1] = v141;
  v134[2] = v135[2];
  v142 = v135[3];
  v134[3] = v142;
  v134[4] = v135[4];
  v143 = v135[5];
  v134[5] = v143;
  v144 = v136[7];
  __dst = (char *)v134 + v144;
  v145 = (char *)v135 + v144;
  v146 = type metadata accessor for Date(0);
  v203 = *(_QWORD *)(v146 - 8);
  v204 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v203 + 48);
  swift_bridgeObjectRetain(v141);
  swift_bridgeObjectRetain(v142);
  swift_bridgeObjectRetain(v143);
  if (v204(v145, 1, v146))
  {
    v147 = sub_100003304(&qword_10010CC10);
    memcpy(__dst, v145, *(_QWORD *)(*(_QWORD *)(v147 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v203 + 16))(__dst, v145, v146);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v203 + 56))(__dst, 0, 1, v146);
  }
  *(_QWORD *)((char *)v134 + v136[8]) = *(_QWORD *)((char *)v135 + v136[8]);
  *((_BYTE *)v134 + v136[9]) = *((_BYTE *)v135 + v136[9]);
  *((_BYTE *)v134 + v136[10]) = *((_BYTE *)v135 + v136[10]);
  *((_BYTE *)v134 + v136[11]) = *((_BYTE *)v135 + v136[11]);
  *((_BYTE *)v134 + v136[12]) = *((_BYTE *)v135 + v136[12]);
  *((_BYTE *)v134 + v136[13]) = *((_BYTE *)v135 + v136[13]);
  *((_BYTE *)v134 + v136[14]) = *((_BYTE *)v135 + v136[14]);
  v184 = v136[15];
  v185 = (_QWORD *)((char *)v134 + v184);
  v186 = (_QWORD *)((char *)v135 + v184);
  *v185 = *v186;
  v187 = v186[1];
  v185[1] = v187;
  v188 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v137 + 56);
  swift_bridgeObjectRetain(v187);
  v188(v134, 0, 1, v136);
  return a1;
}

uint64_t initializeWithTake for InGameBannerRequiredData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v4;
  v5 = *(_OWORD *)(a2 + 208);
  v6 = *(int *)(a3 + 40);
  v7 = (_OWORD *)(a1 + v6);
  v8 = (_OWORD *)(a2 + v6);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v5;
  v9 = (int *)type metadata accessor for Game(0);
  v10 = *((_QWORD *)v9 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_100003304(&qword_10010CA78);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v12 = v8[1];
    *v7 = *v8;
    v7[1] = v12;
    v7[2] = v8[2];
    v13 = v9[7];
    v14 = (char *)v7 + v13;
    v15 = (char *)v8 + v13;
    v16 = type metadata accessor for Date(0);
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      v18 = sub_100003304(&qword_10010CC10);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v14, v15, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    *(_QWORD *)((char *)v7 + v9[8]) = *(_QWORD *)((char *)v8 + v9[8]);
    *((_BYTE *)v7 + v9[9]) = *((_BYTE *)v8 + v9[9]);
    *((_BYTE *)v7 + v9[10]) = *((_BYTE *)v8 + v9[10]);
    *((_BYTE *)v7 + v9[11]) = *((_BYTE *)v8 + v9[11]);
    *((_BYTE *)v7 + v9[12]) = *((_BYTE *)v8 + v9[12]);
    *((_BYTE *)v7 + v9[13]) = *((_BYTE *)v8 + v9[13]);
    *((_BYTE *)v7 + v9[14]) = *((_BYTE *)v8 + v9[14]);
    *(_OWORD *)((char *)v7 + v9[15]) = *(_OWORD *)((char *)v8 + v9[15]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v10 + 56))(v7, 0, 1, v9);
  }
  return a1;
}

uint64_t assignWithTake for InGameBannerRequiredData(uint64_t a1, uint64_t a2, int *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t v11;
  _TtC13GameOverlayUI20GameOverlayUIService *v12;
  uint64_t v13;
  _TtC13GameOverlayUI20GameOverlayUIService *v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  _TtC13GameOverlayUI20GameOverlayUIService *v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  _TtC13GameOverlayUI20GameOverlayUIService *v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  _TtC13GameOverlayUI20GameOverlayUIService *v41;
  SEL v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  const char *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  _TtC13GameOverlayUI20GameOverlayUIService *v56;
  uint64_t v57;
  uint64_t v58;
  _TtC13GameOverlayUI20GameOverlayUIService *v59;
  SEL v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  uint64_t v67;
  _TtC13GameOverlayUI20GameOverlayUIService *v68;
  SEL v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  uint64_t v76;
  _TtC13GameOverlayUI20GameOverlayUIService *v77;
  SEL v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  _TtC13GameOverlayUI20GameOverlayUIService *v88;
  uint64_t v89;
  _TtC13GameOverlayUI20GameOverlayUIService *v90;
  SEL v91;
  id v92;
  id v93;
  id v94;
  id v95;
  id v96;
  id v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  _OWORD *v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _TtC13GameOverlayUI20GameOverlayUIService *v109;
  uint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  int *v113;
  uint64_t v114;
  uint64_t (*v115)(_QWORD *, uint64_t, int *);
  int v116;
  int v117;
  const char *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  __int128 v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _TtC13GameOverlayUI20GameOverlayUIService *v134;
  uint64_t v135;
  _TtC13GameOverlayUI20GameOverlayUIService *v136;
  SEL v137;
  id v138;
  id v139;
  id v140;
  id v141;
  id v142;
  id v143;
  uint64_t v144;
  _TtC13GameOverlayUI20GameOverlayUIService *v145;
  SEL v146;
  id v147;
  id v148;
  id v149;
  id v150;
  id v151;
  id v152;
  uint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t (*v158)(char *, uint64_t, uint64_t);
  int v159;
  int v160;
  const char *v161;
  void *v162;
  void *v163;
  void *v164;
  void *v165;
  void *v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  _TtC13GameOverlayUI20GameOverlayUIService *v174;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v11 = *(_QWORD *)(a2 + 16);
  v12 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v11;
  swift_bridgeObjectRelease(v12, (SEL)a2, a3, a4, a5, a6, a7, a8);
  v13 = *(_QWORD *)(a2 + 32);
  v14 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v13;
  swift_bridgeObjectRelease(v14, v15, v16, v17, v18, v19, v20, v21);
  v22 = *(_QWORD *)(a2 + 48);
  v23 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v22;
  swift_bridgeObjectRelease(v23, v24, v25, v26, v27, v28, v29, v30);
  v31 = *(_QWORD *)(a2 + 64);
  v32 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v31;
  swift_bridgeObjectRelease(v32, v33, v34, v35, v36, v37, v38, v39);
  v40 = *(_QWORD *)(a2 + 80);
  v41 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v40;
  swift_bridgeObjectRelease(v41, v42, v43, v44, v45, v46, v47, v48);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v56 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 104);
  if (v56)
  {
    v57 = *(_QWORD *)(a2 + 104);
    if (v57)
    {
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = v57;
      swift_bridgeObjectRelease(v56, v49, v50, v51, v52, v53, v54, v55);
      v58 = *(_QWORD *)(a2 + 120);
      v59 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 120);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = v58;
      swift_bridgeObjectRelease(v59, v60, v61, v62, v63, v64, v65, v66);
      v67 = *(_QWORD *)(a2 + 136);
      v68 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 136);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 136) = v67;
      swift_bridgeObjectRelease(v68, v69, v70, v71, v72, v73, v74, v75);
      v76 = *(_QWORD *)(a2 + 152);
      v77 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 152);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_QWORD *)(a1 + 152) = v76;
      swift_bridgeObjectRelease(v77, v78, v79, v80, v81, v82, v83, v84);
      goto LABEL_6;
    }
    sub_100004244((_QWORD *)(a1 + 96));
  }
  v85 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v85;
  v86 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v86;
LABEL_6:
  v87 = *(_QWORD *)(a2 + 168);
  v88 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v87;
  swift_bridgeObjectRelease(v88, v49, v50, v51, v52, v53, v54, v55);
  v89 = *(_QWORD *)(a2 + 184);
  v90 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v89;
  swift_bridgeObjectRelease(v90, v91, v92, v93, v94, v95, v96, v97);
  v104 = (_OWORD *)(a2 + 192);
  v105 = *(_QWORD *)(a1 + 200);
  if (v105 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)(a1 + 192) = *v104;
    goto LABEL_11;
  }
  v106 = *(_QWORD *)(a2 + 200);
  if (v106 >> 60 == 15)
  {
    sub_10005B718(a1 + 192);
    goto LABEL_9;
  }
  v107 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)v104;
  *(_QWORD *)(a1 + 200) = v106;
  sub_100038198(v107, v105);
LABEL_11:
  v108 = *(_QWORD *)(a2 + 216);
  v109 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = v108;
  swift_bridgeObjectRelease(v109, (SEL)v105, v98, v99, v100, v101, v102, v103);
  v110 = a3[10];
  v111 = (_QWORD *)(a1 + v110);
  v112 = (_QWORD *)(a2 + v110);
  v113 = (int *)type metadata accessor for Game(0);
  v114 = *((_QWORD *)v113 - 1);
  v115 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v114 + 48);
  v116 = v115(v111, 1, v113);
  v117 = v115(v112, 1, v113);
  if (!v116)
  {
    if (v117)
    {
      sub_1000106F0((uint64_t)v111, type metadata accessor for Game);
      goto LABEL_17;
    }
    v133 = v112[1];
    v134 = (_TtC13GameOverlayUI20GameOverlayUIService *)v111[1];
    *v111 = *v112;
    v111[1] = v133;
    swift_bridgeObjectRelease(v134, v118, v119, v120, v121, v122, v123, v124);
    v135 = v112[3];
    v136 = (_TtC13GameOverlayUI20GameOverlayUIService *)v111[3];
    v111[2] = v112[2];
    v111[3] = v135;
    swift_bridgeObjectRelease(v136, v137, v138, v139, v140, v141, v142, v143);
    v144 = v112[5];
    v145 = (_TtC13GameOverlayUI20GameOverlayUIService *)v111[5];
    v111[4] = v112[4];
    v111[5] = v144;
    swift_bridgeObjectRelease(v145, v146, v147, v148, v149, v150, v151, v152);
    v153 = v113[7];
    v154 = (char *)v111 + v153;
    v155 = (char *)v112 + v153;
    v156 = type metadata accessor for Date(0);
    v157 = *(_QWORD *)(v156 - 8);
    v158 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v157 + 48);
    v159 = v158(v154, 1, v156);
    v160 = v158(v155, 1, v156);
    if (v159)
    {
      if (!v160)
      {
        (*(void (**)(char *, char *, uint64_t))(v157 + 32))(v154, v155, v156);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v157 + 56))(v154, 0, 1, v156);
LABEL_26:
        *(_QWORD *)((char *)v111 + v113[8]) = *(_QWORD *)((char *)v112 + v113[8]);
        *((_BYTE *)v111 + v113[9]) = *((_BYTE *)v112 + v113[9]);
        *((_BYTE *)v111 + v113[10]) = *((_BYTE *)v112 + v113[10]);
        *((_BYTE *)v111 + v113[11]) = *((_BYTE *)v112 + v113[11]);
        *((_BYTE *)v111 + v113[12]) = *((_BYTE *)v112 + v113[12]);
        *((_BYTE *)v111 + v113[13]) = *((_BYTE *)v112 + v113[13]);
        *((_BYTE *)v111 + v113[14]) = *((_BYTE *)v112 + v113[14]);
        v169 = v113[15];
        v170 = (_QWORD *)((char *)v111 + v169);
        v171 = (_QWORD *)((char *)v112 + v169);
        v173 = *v171;
        v172 = v171[1];
        v174 = (_TtC13GameOverlayUI20GameOverlayUIService *)v170[1];
        *v170 = v173;
        v170[1] = v172;
        swift_bridgeObjectRelease(v174, v161, v162, v163, v164, v165, v166, v167);
        return a1;
      }
    }
    else
    {
      if (!v160)
      {
        (*(void (**)(char *, char *, uint64_t))(v157 + 40))(v154, v155, v156);
        goto LABEL_26;
      }
      (*(void (**)(char *, uint64_t))(v157 + 8))(v154, v156);
    }
    v168 = sub_100003304(&qword_10010CC10);
    memcpy(v154, v155, *(_QWORD *)(*(_QWORD *)(v168 - 8) + 64));
    goto LABEL_26;
  }
  if (v117)
  {
LABEL_17:
    v132 = sub_100003304(&qword_10010CA78);
    memcpy(v111, v112, *(_QWORD *)(*(_QWORD *)(v132 - 8) + 64));
    return a1;
  }
  v125 = *((_OWORD *)v112 + 1);
  *(_OWORD *)v111 = *(_OWORD *)v112;
  *((_OWORD *)v111 + 1) = v125;
  *((_OWORD *)v111 + 2) = *((_OWORD *)v112 + 2);
  v126 = v113[7];
  v127 = (char *)v111 + v126;
  v128 = (char *)v112 + v126;
  v129 = type metadata accessor for Date(0);
  v130 = *(_QWORD *)(v129 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v130 + 48))(v128, 1, v129))
  {
    v131 = sub_100003304(&qword_10010CC10);
    memcpy(v127, v128, *(_QWORD *)(*(_QWORD *)(v131 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v130 + 32))(v127, v128, v129);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v130 + 56))(v127, 0, 1, v129);
  }
  *(_QWORD *)((char *)v111 + v113[8]) = *(_QWORD *)((char *)v112 + v113[8]);
  *((_BYTE *)v111 + v113[9]) = *((_BYTE *)v112 + v113[9]);
  *((_BYTE *)v111 + v113[10]) = *((_BYTE *)v112 + v113[10]);
  *((_BYTE *)v111 + v113[11]) = *((_BYTE *)v112 + v113[11]);
  *((_BYTE *)v111 + v113[12]) = *((_BYTE *)v112 + v113[12]);
  *((_BYTE *)v111 + v113[13]) = *((_BYTE *)v112 + v113[13]);
  *((_BYTE *)v111 + v113[14]) = *((_BYTE *)v112 + v113[14]);
  *(_OWORD *)((char *)v111 + v113[15]) = *(_OWORD *)((char *)v112 + v113[15]);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v114 + 56))(v111, 0, 1, v113);
  return a1;
}

uint64_t getEnumTagSinglePayload for InGameBannerRequiredData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100085ABC);
}

uint64_t sub_100085ABC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100003304(&qword_10010CA78);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 40), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for InGameBannerRequiredData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100085B48);
}

uint64_t sub_100085B48(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = sub_100003304(&qword_10010CA78);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 40), a2, a2, v7);
  }
  return result;
}

void sub_100085BC0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = &unk_1000CC4B0;
  v4[1] = &unk_1000CC4C8;
  v4[2] = &unk_1000CC4E0;
  v4[3] = &unk_1000CC4F8;
  v4[4] = &unk_1000CC510;
  v4[5] = &unk_1000CC4F8;
  sub_10006B03C(319);
  if (v3 <= 0x3F)
  {
    v4[6] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 7, v4, a1 + 16);
  }
}

uint64_t getEnumTagSinglePayload for InGameBannerRequiredData.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for InGameBannerRequiredData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_100085D38 + 4 * byte_1000CC41C[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_100085D6C + 4 * byte_1000CC417[v4]))();
}

uint64_t sub_100085D6C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100085D74(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100085D7CLL);
  return result;
}

uint64_t sub_100085D88(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100085D90);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_100085D94(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100085D9C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InGameBannerRequiredData.CodingKeys()
{
  return &type metadata for InGameBannerRequiredData.CodingKeys;
}

unint64_t sub_100085DBC()
{
  unint64_t result;

  result = qword_100110058;
  if (!qword_100110058)
  {
    result = swift_getWitnessTable(&unk_1000CC5C4, &type metadata for InGameBannerRequiredData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100110058);
  }
  return result;
}

unint64_t sub_100085E04()
{
  unint64_t result;

  result = qword_100110060;
  if (!qword_100110060)
  {
    result = swift_getWitnessTable(&unk_1000CC534, &type metadata for InGameBannerRequiredData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100110060);
  }
  return result;
}

unint64_t sub_100085E4C()
{
  unint64_t result;

  result = qword_100110068;
  if (!qword_100110068)
  {
    result = swift_getWitnessTable(&unk_1000CC55C, &type metadata for InGameBannerRequiredData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100110068);
  }
  return result;
}

uint64_t sub_100085E90(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;

  if (a1 == 0x65736143657375 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65736143657375, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x726579616C70 && a2 == 0xE600000000000000)
  {
    v7 = 0xE600000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726579616C70, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x656C746974 && a2 == 0xE500000000000000)
  {
    v8 = 0xE500000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x6567617373656DLL && a2 == 0xE700000000000000)
  {
    v9 = 0xE700000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6567617373656DLL, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x6567616D69 && a2 == 0xE500000000000000)
  {
    v10 = 0xE500000000000000;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6567616D69, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    v11 = 0xEA00000000007265;
LABEL_38:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_38;
  }
  if (a1 == 1701667175 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 6;
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(1701667175, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v12 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

void Game.init(with:)(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;

  v7 = sub_100003304(&qword_10010CC10);
  __chkstk_darwin(v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000509C8(0, &qword_10010E3C0, NSKeyedUnarchiver_ptr);
  v10 = sub_1000509C8(0, &qword_10010E3C8, GKGameInternal_ptr);
  v11 = static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v10, a1, a2, v10);
  if (v3)
    goto LABEL_4;
  v12 = (void *)v11;
  if (v11)
  {
    v13 = type metadata accessor for Date(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v9, 1, 1, v13);
    sub_1000863B8(v12, (uint64_t)v9, a3);
LABEL_4:
    sub_100038198(a1, a2);
    return;
  }
  __break(1u);
}

uint64_t Game.lastPlayedAt.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for Game(0) + 28);
  return sub_100086934(v3, a1);
}

uint64_t Game.compatiblePlatforms.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for Game(0) + 32));
}

uint64_t Game.isInstalled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Game(0) + 36));
}

uint64_t Game.isArcade.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Game(0) + 40));
}

uint64_t Game.supportsAchievements.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Game(0) + 44));
}

uint64_t Game.supportsChallenges.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Game(0) + 48));
}

uint64_t Game.supportsLeaderboardSets.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Game(0) + 52));
}

uint64_t Game.supportsLeaderboards.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Game(0) + 56));
}

uint64_t Game.iconTemplate.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for Game(0) + 60));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

void sub_1000863B8(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  id v20;
  _TtC13GameOverlayUI20GameOverlayUIService *v21;
  char v22;
  char v23;
  uint64_t v24;
  char v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  id v34;
  void *v35;
  NSString v36;
  _TtC13GameOverlayUI20GameOverlayUIService *v37;
  _TtC13GameOverlayUI20GameOverlayUIService *v38;
  SEL v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  unsigned __int8 v46;
  id v47;
  void *v48;
  _TtC13GameOverlayUI20GameOverlayUIService *v49;
  unint64_t v50;
  char v51;
  SEL v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  _TtC13GameOverlayUI20GameOverlayUIService *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  SEL v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  _TtC13GameOverlayUI20GameOverlayUIService *v71;
  SEL v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  SEL v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  uint64_t *v86;
  _TtC13GameOverlayUI20GameOverlayUIService *v87[2];
  __int128 v88;
  __int128 v89;
  _QWORD v90[5];

  v6 = objc_msgSend(a1, "bundleIdentifier");
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v9 = v8;

  *a3 = v7;
  a3[1] = v9;
  v10 = objc_msgSend(a1, "adamID");
  v11 = objc_msgSend(v10, "stringValue");

  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v14 = v13;

  a3[2] = v12;
  a3[3] = v14;
  v15 = objc_msgSend(a1, "name");
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  v18 = v17;

  a3[4] = v16;
  a3[5] = v18;
  v19 = (int *)type metadata accessor for Game(0);
  sub_100086934(a2, (uint64_t)a3 + v19[7]);
  v20 = objc_msgSend(a1, "compatiblePlatforms");
  v21 = (_TtC13GameOverlayUI20GameOverlayUIService *)static Set._unconditionallyBridgeFromObjectiveC(_:)();

  *(_QWORD *)&v88 = 0x736F63616DLL;
  *((_QWORD *)&v88 + 1) = 0xE500000000000000;
  AnyHashable.init<A>(_:)(v90, &v88, &type metadata for String, &protocol witness table for String);
  v22 = sub_1000873E0((uint64_t)v90, (uint64_t)v21);
  sub_100065BE8((uint64_t)v90);
  *(_QWORD *)&v88 = 7565161;
  *((_QWORD *)&v88 + 1) = 0xE300000000000000;
  AnyHashable.init<A>(_:)(v90, &v88, &type metadata for String, &protocol witness table for String);
  v23 = sub_1000873E0((uint64_t)v90, (uint64_t)v21);
  sub_100065BE8((uint64_t)v90);
  if ((v23 & 1) != 0)
    v24 = v22 & 1 | 2;
  else
    v24 = v22 & 1;
  *(_QWORD *)&v88 = 0x6F7674656C707061;
  *((_QWORD *)&v88 + 1) = 0xE900000000000073;
  AnyHashable.init<A>(_:)(v90, &v88, &type metadata for String, &protocol witness table for String);
  v25 = sub_1000873E0((uint64_t)v90, (uint64_t)v21);
  sub_100065BE8((uint64_t)v90);
  swift_bridgeObjectRelease(v21, v26, v27, v28, v29, v30, v31, v32);
  v33 = v24 | 4;
  if ((v25 & 1) == 0)
    v33 = v24;
  *(uint64_t *)((char *)a3 + v19[8]) = v33;
  *((_BYTE *)a3 + v19[10]) = objc_msgSend(a1, "isArcadeGame");
  v34 = objc_msgSend((id)objc_opt_self(GKApplicationWorkspace), "defaultWorkspace");
  if (v34)
  {
    v35 = v34;
    v36 = objc_msgSend(a1, "bundleIdentifier");
    if (!v36)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      v38 = v37;
      v36 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v38, v39, v40, v41, v42, v43, v44, v45);
    }
    v46 = objc_msgSend(v35, "applicationIsInstalled:", v36);

    *((_BYTE *)a3 + v19[9]) = v46;
    *((_BYTE *)a3 + v19[11]) = objc_msgSend(a1, "supportsAchievements");
    *((_BYTE *)a3 + v19[12]) = objc_msgSend(a1, "supportsLeaderboardChallenges");
    *((_BYTE *)a3 + v19[13]) = objc_msgSend(a1, "supportsLeaderboardSets");
    *((_BYTE *)a3 + v19[14]) = objc_msgSend(a1, "supportsLeaderboards");
    v47 = objc_msgSend(a1, "icons");
    if (v47)
    {
      v48 = v47;
      v49 = (_TtC13GameOverlayUI20GameOverlayUIService *)static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v47, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

      strcpy((char *)v87, "template");
      BYTE1(v87[1]) = 0;
      WORD1(v87[1]) = 0;
      HIDWORD(v87[1]) = -402653184;
      AnyHashable.init<A>(_:)(v90, v87, &type metadata for String, &protocol witness table for String);
      if (v49[1].super.isa && (v50 = sub_1000AAEB8((uint64_t)v90), (v51 & 1) != 0))
      {
        sub_100031EE0(*(_QWORD *)v49[3].listener + 32 * v50, (uint64_t)&v88);
      }
      else
      {
        v88 = 0u;
        v89 = 0u;
      }
      sub_100065BE8((uint64_t)v90);
      swift_bridgeObjectRelease(v49, v52, v53, v54, v55, v56, v57, v58);
      if (*((_QWORD *)&v89 + 1))
      {
        if ((swift_dynamicCast(v90, &v88, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
        {
          v59 = (_TtC13GameOverlayUI20GameOverlayUIService *)v90[1];
          strcpy((char *)&v88, "{w}x{h}bb.png");
          HIWORD(v88) = -4864;
          strcpy((char *)v87, "{w}x{h}{c}.{f}");
          HIBYTE(v87[1]) = -18;
          v60 = sub_10001B308();
          v61 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v88, v87, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v60, v60, v60);
          v63 = v62;

          sub_100010ED0(a2, &qword_10010CC10);
          swift_bridgeObjectRelease(v87[1], v64, v65, v66, v67, v68, v69, v70);
          v71 = (_TtC13GameOverlayUI20GameOverlayUIService *)*((_QWORD *)&v88 + 1);
          swift_bridgeObjectRelease(v59, v72, v73, v74, v75, v76, v77, v78);
          swift_bridgeObjectRelease(v71, v79, v80, v81, v82, v83, v84, v85);
LABEL_20:
          v86 = (uint64_t *)((char *)a3 + v19[15]);
          *v86 = v61;
          v86[1] = v63;
          return;
        }
LABEL_19:

        sub_100010ED0(a2, &qword_10010CC10);
        v61 = 0;
        v63 = 0xE000000000000000;
        goto LABEL_20;
      }
    }
    else
    {
      v88 = 0u;
      v89 = 0u;
    }
    sub_100010ED0((uint64_t)&v88, &qword_10010EB30);
    goto LABEL_19;
  }
  __break(1u);
}

uint64_t type metadata accessor for Game(uint64_t a1)
{
  uint64_t result;

  result = qword_100110120;
  if (!qword_100110120)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for Game);
  return result;
}

uint64_t sub_100086934(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003304(&qword_10010CC10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100086980(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000869B4 + 4 * byte_1000CC640[a1]))(0x4449656C646E7562, 0xE800000000000000);
}

uint64_t sub_1000869B4()
{
  return 0x44496D616461;
}

uint64_t sub_1000869C8()
{
  return 1701667182;
}

uint64_t sub_1000869D8()
{
  return 0x79616C507473616CLL;
}

unint64_t sub_1000869F8()
{
  return 0xD000000000000013;
}

uint64_t sub_100086AA4()
{
  return 0x706D65546E6F6369;
}

uint64_t sub_100086AC4()
{
  unsigned __int8 *v0;

  return sub_100086980(*v0);
}

uint64_t sub_100086ACC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100088DD0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100086AF0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100087FA4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100086B18(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100087FA4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Game.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v32[8];
  uint64_t v33;

  v3 = v1;
  v5 = sub_100003304(&qword_100110070);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v32[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = a1[3];
  v10 = a1[4];
  sub_100003C28(a1, v9);
  v11 = sub_100087FA4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Game.CodingKeys, &type metadata for Game.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  LOBYTE(v33) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v33, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = v3[3];
    LOBYTE(v33) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v33, v5);
    v16 = v3[4];
    v17 = v3[5];
    LOBYTE(v33) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v33, v5);
    v18 = (int *)type metadata accessor for Game(0);
    v19 = (char *)v3 + v18[7];
    LOBYTE(v33) = 3;
    v20 = type metadata accessor for Date(0);
    v21 = sub_1000892DC(&qword_100110080, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v19, &v33, v5, v20, v21);
    v33 = *(uint64_t *)((char *)v3 + v18[8]);
    v32[7] = 4;
    sub_100087FE8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v33);
    v22 = *((unsigned __int8 *)v3 + v18[9]);
    LOBYTE(v33) = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v22, &v33, v5);
    v23 = *((unsigned __int8 *)v3 + v18[10]);
    LOBYTE(v33) = 6;
    KeyedEncodingContainer.encode(_:forKey:)(v23, &v33, v5);
    v24 = *((unsigned __int8 *)v3 + v18[11]);
    LOBYTE(v33) = 7;
    KeyedEncodingContainer.encode(_:forKey:)(v24, &v33, v5);
    v25 = *((unsigned __int8 *)v3 + v18[12]);
    LOBYTE(v33) = 8;
    KeyedEncodingContainer.encode(_:forKey:)(v25, &v33, v5);
    v26 = *((unsigned __int8 *)v3 + v18[13]);
    LOBYTE(v33) = 9;
    KeyedEncodingContainer.encode(_:forKey:)(v26, &v33, v5);
    v27 = *((unsigned __int8 *)v3 + v18[14]);
    LOBYTE(v33) = 10;
    KeyedEncodingContainer.encode(_:forKey:)(v27, &v33, v5);
    v28 = (uint64_t *)((char *)v3 + v18[15]);
    v29 = *v28;
    v30 = v28[1];
    LOBYTE(v33) = 11;
    KeyedEncodingContainer.encode(_:forKey:)(v29, v30, &v33, v5);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

void Game.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int *v37;
  uint64_t *v38;
  char v39;
  uint64_t v40;

  v5 = sub_100003304(&qword_10010CC10);
  __chkstk_darwin(v5);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_100003304(&qword_100110090);
  v8 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = (int *)type metadata accessor for Game(0);
  __chkstk_darwin(v37);
  v38 = (uint64_t *)((char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = a1[3];
  v12 = a1[4];
  sub_100003C28(a1, v13);
  v14 = sub_100087FA4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Game.CodingKeys, &type metadata for Game.CodingKeys, v14, v13, v12);
  if (v2)
  {
    sub_100004624(a1);
  }
  else
  {
    v15 = v8;
    v16 = a2;
    LOBYTE(v40) = 0;
    v17 = v36;
    v18 = KeyedDecodingContainer.decode(_:forKey:)(&v40, v36);
    v19 = v38;
    *v38 = v18;
    v19[1] = v20;
    LOBYTE(v40) = 1;
    v19[2] = KeyedDecodingContainer.decode(_:forKey:)(&v40, v17);
    v19[3] = v21;
    LOBYTE(v40) = 2;
    v19[4] = KeyedDecodingContainer.decode(_:forKey:)(&v40, v17);
    v19[5] = v22;
    v23 = type metadata accessor for Date(0);
    LOBYTE(v40) = 3;
    v24 = sub_1000892DC(&qword_100110098, (uint64_t)&protocol conformance descriptor for Date);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v23, &v40, v17, v23, v24);
    sub_10008802C((uint64_t)v7, (uint64_t)v19 + v37[7]);
    v39 = 4;
    sub_100088074();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v40);
    *(uint64_t *)((char *)v19 + v37[8]) = v40;
    LOBYTE(v40) = 5;
    v25 = KeyedDecodingContainer.decode(_:forKey:)(&v40, v17);
    *((_BYTE *)v19 + v37[9]) = v25 & 1;
    LOBYTE(v40) = 6;
    v26 = KeyedDecodingContainer.decode(_:forKey:)(&v40, v17);
    *((_BYTE *)v19 + v37[10]) = v26 & 1;
    LOBYTE(v40) = 7;
    v27 = KeyedDecodingContainer.decode(_:forKey:)(&v40, v17);
    *((_BYTE *)v19 + v37[11]) = v27 & 1;
    LOBYTE(v40) = 8;
    v28 = KeyedDecodingContainer.decode(_:forKey:)(&v40, v17);
    *((_BYTE *)v19 + v37[12]) = v28 & 1;
    LOBYTE(v40) = 9;
    v29 = KeyedDecodingContainer.decode(_:forKey:)(&v40, v17);
    *((_BYTE *)v38 + v37[13]) = v29 & 1;
    LOBYTE(v40) = 10;
    v30 = KeyedDecodingContainer.decode(_:forKey:)(&v40, v36);
    *((_BYTE *)v38 + v37[14]) = v30 & 1;
    LOBYTE(v40) = 11;
    v31 = KeyedDecodingContainer.decode(_:forKey:)(&v40, v36);
    v33 = v32;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v10, v36);
    v34 = (uint64_t)v38;
    v35 = (uint64_t *)((char *)v38 + v37[15]);
    *v35 = v31;
    v35[1] = v33;
    sub_100063660(v34, v16);
    sub_100004624(a1);
    sub_10006A704(v34);
  }
}

void sub_1000873B8(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  Game.init(from:)(a1, a2);
}

uint64_t sub_1000873CC(_QWORD *a1)
{
  return Game.encode(to:)(a1);
}

uint64_t sub_1000873E0(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  _BYTE v10[40];

  if (*(_QWORD *)(a2 + 16)
    && (v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(a2 + 40)),
        v5 = -1 << *(_BYTE *)(a2 + 32),
        v6 = v4 & ~v5,
        ((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0))
  {
    v7 = ~v5;
    do
    {
      sub_10008931C(*(_QWORD *)(a2 + 48) + 40 * v6, (uint64_t)v10);
      v8 = static AnyHashable.== infix(_:_:)(v10, a1);
      sub_100065BE8((uint64_t)v10);
      if ((v8 & 1) != 0)
        break;
      v6 = (v6 + 1) & v7;
    }
    while (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
  }
  else
  {
    v8 = 0;
  }
  return v8 & 1;
}

uint64_t sub_1000874B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000880BC();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100087510(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000880BC();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

Swift::Int sub_10008755C()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1000875A0()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1000875C8(uint64_t a1)
{
  Swift::UInt *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_100087608(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *sub_100087610@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *sub_100087624@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_100087638(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *sub_100087668@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_100087694@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *sub_1000876B8(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_1000876CC(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *sub_1000876E0@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1000876F4(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_100087708()
{
  _QWORD *v0;

  return *v0 == 0;
}

uint64_t sub_100087718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

_QWORD *sub_100087730(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

void sub_100087744(_TtC13GameOverlayUI20GameOverlayUIService *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  SEL v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;

  v4 = sub_1000892A4((uint64_t)a1);
  swift_bridgeObjectRelease(a1, v5, v6, v7, v8, v9, v10, v11);
  *a2 = v4;
}

void sub_100087790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  Class isa;
  SEL v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  _QWORD aBlock[5];
  uint64_t v28;

  v8 = sub_100003304(&qword_1001101B0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = objc_msgSend((id)objc_opt_self(GKDaemonProxy), "proxyForPlayer:", a2);
  v12 = objc_msgSend(v11, "gameServicePrivate");

  v13 = sub_100003304(&qword_10010E2B8);
  v14 = swift_allocObject(v13, 64, 7);
  *(_OWORD *)(v14 + 16) = xmmword_1000C9D90;
  *(_QWORD *)(v14 + 56) = &type metadata for String;
  *(_QWORD *)(v14 + 32) = a3;
  *(_QWORD *)(v14 + 40) = a4;
  swift_bridgeObjectRetain(a4);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease((_TtC13GameOverlayUI20GameOverlayUIService *)v14, v16, v17, v18, v19, v20, v21, v22);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  v23 = *(unsigned __int8 *)(v9 + 80);
  v24 = (v23 + 16) & ~v23;
  v25 = swift_allocObject(&unk_1001005B8, v24 + v10, v23 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v25 + v24, (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  aBlock[4] = sub_1000893BC;
  v28 = v25;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100087AD0;
  aBlock[3] = &unk_1001005D0;
  v26 = _Block_copy(aBlock);
  objc_msgSend(v12, "getGameMetadataForBundleIDs:handler:", isa, v26, swift_release(v28).n128_f64[0]);
  _Block_release(v26);
  swift_unknownObjectRelease(v12);

}

void sub_100087984(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  const char *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  objc_class *v12;
  const char *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  objc_class *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  id v25;

  if (a2)
  {
    v25 = a2;
    swift_errorRetain(a2);
LABEL_3:
    v2 = sub_100003304(&qword_1001101B0);
    CheckedContinuation.resume(throwing:)(&v25, v2);
    return;
  }
  if (!((unint64_t)a1 >> 62))
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v4)
      goto LABEL_6;
LABEL_15:
    swift_bridgeObjectRelease((_TtC13GameOverlayUI20GameOverlayUIService *)a1, v5, v6, v7, v8, v9, v10, v11);
    v24 = sub_100089424();
    v25 = (id)swift_allocError(&_s11GKGameErrorON, v24, 0, 0);
    goto LABEL_3;
  }
  if (a1 < 0)
    v23 = a1;
  else
    v23 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  if (!_CocoaArrayWrapper.endIndex.getter(v23))
    goto LABEL_15;
LABEL_6:
  if ((a1 & 0xC000000000000001) != 0)
  {
    v12 = (objc_class *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
  }
  else
  {
    if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    v12 = (objc_class *)*(id *)(a1 + 32);
  }
  v20 = v12;
  swift_bridgeObjectRelease((_TtC13GameOverlayUI20GameOverlayUIService *)a1, v13, v14, v15, v16, v17, v18, v19);
  v25 = objc_msgSend(objc_allocWithZone((Class)GKGame), "initWithInternalRepresentation:", v20);
  v21 = v25;
  v22 = sub_100003304(&qword_1001101B0);
  CheckedContinuation.resume(returning:)(&v25, v22);

}

void sub_100087AD0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  void (*v6)(_TtC13GameOverlayUI20GameOverlayUIService *, void *);
  uint64_t v7;
  _TtC13GameOverlayUI20GameOverlayUIService *v8;
  SEL v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;

  v6 = *(void (**)(_TtC13GameOverlayUI20GameOverlayUIService *, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v7 = sub_1000509C8(0, &qword_10010E3C8, GKGameInternal_ptr);
  v8 = (_TtC13GameOverlayUI20GameOverlayUIService *)static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v7);
  swift_retain(v5);
  v16 = a3;
  v6(v8, a3);
  swift_release(v5);
  swift_bridgeObjectRelease(v8, v9, v10, v11, v12, v13, v14, v15);

}

uint64_t _s13GameOverlayUI0A0V23__derived_struct_equalsySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(uint64_t, uint64_t, uint64_t);
  _BYTE *v37;
  uint64_t v38;
  void (*v39)(_BYTE *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _BYTE v46[12];
  int v47;
  _BYTE *v48;
  int *v49;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v46[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = sub_100003304(&qword_1001101A0);
  __chkstk_darwin(v8);
  v10 = &v46[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = sub_100003304(&qword_10010CC10);
  __chkstk_darwin(v11);
  v13 = &v46[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v14);
  v16 = &v46[-v15];
  __chkstk_darwin(v17);
  v19 = &v46[-v18];
  v20 = a1[1];
  v21 = a2[1];
  if (*a1 != *a2 || v20 != v21)
  {
    v22 = _stringCompareWithSmolCheck(_:_:expecting:)(*a1, v20, *a2, v21, 0);
    v23 = 0;
    if ((v22 & 1) == 0)
      return v23 & 1;
  }
  v24 = a1[2];
  v25 = a1[3];
  v26 = a2[2];
  v27 = a2[3];
  if (v24 != v26 || v25 != v27)
  {
    v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, v26, v27, 0);
    v23 = 0;
    if ((v28 & 1) == 0)
      return v23 & 1;
  }
  v29 = a1[4];
  v30 = a1[5];
  v31 = a2[4];
  v32 = a2[5];
  if (v29 != v31 || v30 != v32)
  {
    v33 = _stringCompareWithSmolCheck(_:_:expecting:)(v29, v30, v31, v32, 0);
    v23 = 0;
    if ((v33 & 1) == 0)
      return v23 & 1;
  }
  v48 = v7;
  v34 = type metadata accessor for Game(0);
  sub_100086934((uint64_t)a1 + *(int *)(v34 + 28), (uint64_t)v19);
  v49 = (int *)v34;
  sub_100086934((uint64_t)a2 + *(int *)(v34 + 28), (uint64_t)v16);
  v35 = (uint64_t)&v10[*(int *)(v8 + 48)];
  sub_100086934((uint64_t)v19, (uint64_t)v10);
  sub_100086934((uint64_t)v16, v35);
  v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v36((uint64_t)v10, 1, v4) != 1)
  {
    sub_100086934((uint64_t)v10, (uint64_t)v13);
    if (v36(v35, 1, v4) != 1)
    {
      v37 = v48;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 32))(v48, v35, v4);
      v38 = sub_1000892DC(&qword_1001101A8, (uint64_t)&protocol conformance descriptor for Date);
      v47 = dispatch thunk of static Equatable.== infix(_:_:)(v13, v37, v4, v38);
      v39 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
      v39(v37, v4);
      sub_100010ED0((uint64_t)v16, &qword_10010CC10);
      sub_100010ED0((uint64_t)v19, &qword_10010CC10);
      v39(v13, v4);
      sub_100010ED0((uint64_t)v10, &qword_10010CC10);
      if ((v47 & 1) == 0)
      {
LABEL_24:
        v23 = 0;
        return v23 & 1;
      }
      goto LABEL_17;
    }
    sub_100010ED0((uint64_t)v16, &qword_10010CC10);
    sub_100010ED0((uint64_t)v19, &qword_10010CC10);
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v13, v4);
LABEL_15:
    sub_100010ED0((uint64_t)v10, &qword_1001101A0);
    v23 = 0;
    return v23 & 1;
  }
  sub_100010ED0((uint64_t)v16, &qword_10010CC10);
  sub_100010ED0((uint64_t)v19, &qword_10010CC10);
  if (v36(v35, 1, v4) != 1)
    goto LABEL_15;
  sub_100010ED0((uint64_t)v10, &qword_10010CC10);
LABEL_17:
  if (*(_QWORD *)((char *)a1 + v49[8]) != *(_QWORD *)((char *)a2 + v49[8])
    || *((unsigned __int8 *)a1 + v49[9]) != *((unsigned __int8 *)a2 + v49[9])
    || *((unsigned __int8 *)a1 + v49[10]) != *((unsigned __int8 *)a2 + v49[10])
    || *((unsigned __int8 *)a1 + v49[11]) != *((unsigned __int8 *)a2 + v49[11])
    || *((unsigned __int8 *)a1 + v49[12]) != *((unsigned __int8 *)a2 + v49[12])
    || *((unsigned __int8 *)a1 + v49[13]) != *((unsigned __int8 *)a2 + v49[13])
    || *((unsigned __int8 *)a1 + v49[14]) != *((unsigned __int8 *)a2 + v49[14]))
  {
    goto LABEL_24;
  }
  v41 = v49[15];
  v42 = *(_QWORD *)((char *)a1 + v41);
  v43 = *(_QWORD *)((char *)a1 + v41 + 8);
  v44 = (_QWORD *)((char *)a2 + v41);
  v45 = v44[1];
  if (v42 == *v44 && v43 == v45)
    v23 = 1;
  else
    v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v42, v43, *v44, v45, 0);
  return v23 & 1;
}

unint64_t sub_100087FA4()
{
  unint64_t result;

  result = qword_100110078;
  if (!qword_100110078)
  {
    result = swift_getWitnessTable(&unk_1000CCA18, &type metadata for Game.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100110078);
  }
  return result;
}

unint64_t sub_100087FE8()
{
  unint64_t result;

  result = qword_100110088;
  if (!qword_100110088)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SupportedPlatforms, &type metadata for SupportedPlatforms);
    atomic_store(result, (unint64_t *)&qword_100110088);
  }
  return result;
}

uint64_t sub_10008802C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003304(&qword_10010CC10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100088074()
{
  unint64_t result;

  result = qword_1001100A0;
  if (!qword_1001100A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SupportedPlatforms, &type metadata for SupportedPlatforms);
    atomic_store(result, (unint64_t *)&qword_1001100A0);
  }
  return result;
}

unint64_t sub_1000880BC()
{
  unint64_t result;

  result = qword_1001100A8;
  if (!qword_1001100A8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SupportedPlatforms, &type metadata for SupportedPlatforms);
    atomic_store(result, (unint64_t *)&qword_1001100A8);
  }
  return result;
}

unint64_t sub_100088104()
{
  unint64_t result;

  result = qword_1001100B0;
  if (!qword_1001100B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SupportedPlatforms, &type metadata for SupportedPlatforms);
    atomic_store(result, (unint64_t *)&qword_1001100B0);
  }
  return result;
}

unint64_t sub_10008814C()
{
  unint64_t result;

  result = qword_1001100B8;
  if (!qword_1001100B8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SupportedPlatforms, &type metadata for SupportedPlatforms);
    atomic_store(result, (unint64_t *)&qword_1001100B8);
  }
  return result;
}

unint64_t sub_100088194()
{
  unint64_t result;

  result = qword_1001100C0;
  if (!qword_1001100C0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SupportedPlatforms, &type metadata for SupportedPlatforms);
    atomic_store(result, (unint64_t *)&qword_1001100C0);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for Game(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  char *__dst;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a2[5];
    v10 = a3[7];
    __dst = (char *)a1 + v10;
    v11 = (char *)a2 + v10;
    a1[4] = a2[4];
    a1[5] = v9;
    v12 = type metadata accessor for Date(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    if (v14(v11, 1, v12))
    {
      v15 = sub_100003304(&qword_10010CC10);
      memcpy(__dst, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(__dst, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
    }
    v17 = a3[9];
    *(_QWORD *)((char *)v4 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
    *((_BYTE *)v4 + v17) = *((_BYTE *)a2 + v17);
    v18 = a3[11];
    *((_BYTE *)v4 + a3[10]) = *((_BYTE *)a2 + a3[10]);
    *((_BYTE *)v4 + v18) = *((_BYTE *)a2 + v18);
    v19 = a3[13];
    *((_BYTE *)v4 + a3[12]) = *((_BYTE *)a2 + a3[12]);
    *((_BYTE *)v4 + v19) = *((_BYTE *)a2 + v19);
    v20 = a3[15];
    *((_BYTE *)v4 + a3[14]) = *((_BYTE *)a2 + a3[14]);
    v21 = (_QWORD *)((char *)v4 + v20);
    v22 = (_QWORD *)((char *)a2 + v20);
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    swift_bridgeObjectRetain(v23);
  }
  return v4;
}

uint64_t destroy for Game(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  v4 = (char *)a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  return swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + *(int *)(a2 + 60) + 8));
}

_QWORD *initializeWithCopy for Game(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  char *__dst;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a2[5];
  v9 = a3[7];
  __dst = (char *)a1 + v9;
  v10 = (char *)a2 + v9;
  a1[4] = a2[4];
  a1[5] = v8;
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  if (v13(v10, 1, v11))
  {
    v14 = sub_100003304(&qword_10010CC10);
    memcpy(__dst, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(__dst, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
  }
  v15 = a3[9];
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  *((_BYTE *)a1 + v15) = *((_BYTE *)a2 + v15);
  v16 = a3[11];
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  *((_BYTE *)a1 + v16) = *((_BYTE *)a2 + v16);
  v17 = a3[13];
  *((_BYTE *)a1 + a3[12]) = *((_BYTE *)a2 + a3[12]);
  *((_BYTE *)a1 + v17) = *((_BYTE *)a2 + v17);
  v18 = a3[15];
  *((_BYTE *)a1 + a3[14]) = *((_BYTE *)a2 + a3[14]);
  v19 = (_QWORD *)((char *)a1 + v18);
  v20 = (_QWORD *)((char *)a2 + v18);
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  swift_bridgeObjectRetain(v21);
  return a1;
}

_QWORD *assignWithCopy for Game(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  _TtC13GameOverlayUI20GameOverlayUIService *v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  _TtC13GameOverlayUI20GameOverlayUIService *v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  _TtC13GameOverlayUI20GameOverlayUIService *v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(char *, uint64_t, uint64_t);
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  _TtC13GameOverlayUI20GameOverlayUIService *v46;
  SEL v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;

  *a1 = *a2;
  v6 = a2[1];
  v7 = (_TtC13GameOverlayUI20GameOverlayUIService *)a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7, v8, v9, v10, v11, v12, v13, v14);
  a1[2] = a2[2];
  v15 = a2[3];
  v16 = (_TtC13GameOverlayUI20GameOverlayUIService *)a1[3];
  a1[3] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16, v17, v18, v19, v20, v21, v22, v23);
  a1[4] = a2[4];
  v24 = a2[5];
  v25 = (_TtC13GameOverlayUI20GameOverlayUIService *)a1[5];
  a1[5] = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25, v26, v27, v28, v29, v30, v31, v32);
  v33 = a3[7];
  v34 = (char *)a1 + v33;
  v35 = (char *)a2 + v33;
  v36 = type metadata accessor for Date(0);
  v37 = *(_QWORD *)(v36 - 8);
  v38 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v37 + 48);
  v39 = v38(v34, 1, v36);
  v40 = v38(v35, 1, v36);
  if (!v39)
  {
    if (!v40)
    {
      (*(void (**)(char *, char *, uint64_t))(v37 + 24))(v34, v35, v36);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v37 + 8))(v34, v36);
    goto LABEL_6;
  }
  if (v40)
  {
LABEL_6:
    v41 = sub_100003304(&qword_10010CC10);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v34, v35, v36);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
LABEL_7:
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  *((_BYTE *)a1 + a3[12]) = *((_BYTE *)a2 + a3[12]);
  *((_BYTE *)a1 + a3[13]) = *((_BYTE *)a2 + a3[13]);
  *((_BYTE *)a1 + a3[14]) = *((_BYTE *)a2 + a3[14]);
  v42 = a3[15];
  v43 = (_QWORD *)((char *)a1 + v42);
  v44 = (_QWORD *)((char *)a2 + v42);
  *v43 = *v44;
  v45 = v44[1];
  v46 = (_TtC13GameOverlayUI20GameOverlayUIService *)v43[1];
  v43[1] = v45;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRelease(v46, v47, v48, v49, v50, v51, v52, v53);
  return a1;
}

_OWORD *initializeWithTake for Game(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  v7 = a3[7];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_100003304(&qword_10010CC10);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v13 = a3[9];
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  *((_BYTE *)a1 + v13) = *((_BYTE *)a2 + v13);
  v14 = a3[11];
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  *((_BYTE *)a1 + v14) = *((_BYTE *)a2 + v14);
  v15 = a3[13];
  *((_BYTE *)a1 + a3[12]) = *((_BYTE *)a2 + a3[12]);
  *((_BYTE *)a1 + v15) = *((_BYTE *)a2 + v15);
  v16 = a3[15];
  *((_BYTE *)a1 + a3[14]) = *((_BYTE *)a2 + a3[14]);
  *(_OWORD *)((char *)a1 + v16) = *(_OWORD *)((char *)a2 + v16);
  return a1;
}

_QWORD *assignWithTake for Game(_QWORD *a1, uint64_t a2, int *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t v11;
  _TtC13GameOverlayUI20GameOverlayUIService *v12;
  uint64_t v13;
  _TtC13GameOverlayUI20GameOverlayUIService *v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  _TtC13GameOverlayUI20GameOverlayUIService *v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(char *, uint64_t, uint64_t);
  int v37;
  int v38;
  const char *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  _TtC13GameOverlayUI20GameOverlayUIService *v55;

  v11 = *(_QWORD *)(a2 + 8);
  v12 = (_TtC13GameOverlayUI20GameOverlayUIService *)a1[1];
  *a1 = *(_QWORD *)a2;
  a1[1] = v11;
  swift_bridgeObjectRelease(v12, (SEL)a2, a3, a4, a5, a6, a7, a8);
  v13 = *(_QWORD *)(a2 + 24);
  v14 = (_TtC13GameOverlayUI20GameOverlayUIService *)a1[3];
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v13;
  swift_bridgeObjectRelease(v14, v15, v16, v17, v18, v19, v20, v21);
  v22 = *(_QWORD *)(a2 + 40);
  v23 = (_TtC13GameOverlayUI20GameOverlayUIService *)a1[5];
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = v22;
  swift_bridgeObjectRelease(v23, v24, v25, v26, v27, v28, v29, v30);
  v31 = a3[7];
  v32 = (char *)a1 + v31;
  v33 = (char *)(a2 + v31);
  v34 = type metadata accessor for Date(0);
  v35 = *(_QWORD *)(v34 - 8);
  v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48);
  v37 = v36(v32, 1, v34);
  v38 = v36(v33, 1, v34);
  if (!v37)
  {
    if (!v38)
    {
      (*(void (**)(char *, char *, uint64_t))(v35 + 40))(v32, v33, v34);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v35 + 8))(v32, v34);
    goto LABEL_6;
  }
  if (v38)
  {
LABEL_6:
    v46 = sub_100003304(&qword_10010CC10);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v32, v33, v34);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
LABEL_7:
  v47 = a3[9];
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  *((_BYTE *)a1 + v47) = *(_BYTE *)(a2 + v47);
  v48 = a3[11];
  *((_BYTE *)a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *((_BYTE *)a1 + v48) = *(_BYTE *)(a2 + v48);
  v49 = a3[13];
  *((_BYTE *)a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  *((_BYTE *)a1 + v49) = *(_BYTE *)(a2 + v49);
  v50 = a3[15];
  *((_BYTE *)a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  v51 = (_QWORD *)((char *)a1 + v50);
  v52 = (uint64_t *)(a2 + v50);
  v54 = *v52;
  v53 = v52[1];
  v55 = (_TtC13GameOverlayUI20GameOverlayUIService *)v51[1];
  *v51 = v54;
  v51[1] = v53;
  swift_bridgeObjectRelease(v55, v39, v40, v41, v42, v43, v44, v45);
  return a1;
}

uint64_t getEnumTagSinglePayload for Game(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100088A28);
}

uint64_t sub_100088A28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100003304(&qword_10010CC10);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for Game(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100088AB4);
}

uint64_t sub_100088AB4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_100003304(&qword_10010CC10);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

void sub_100088B2C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[12];

  v4[0] = &unk_1000CC910;
  v4[1] = &unk_1000CC910;
  v4[2] = &unk_1000CC910;
  sub_100088BC8(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(v2 - 8) + 64;
    v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[5] = &unk_1000CC928;
    v4[6] = &unk_1000CC928;
    v4[7] = &unk_1000CC928;
    v4[8] = &unk_1000CC928;
    v4[9] = &unk_1000CC928;
    v4[10] = &unk_1000CC928;
    v4[11] = &unk_1000CC910;
    swift_initStructMetadata(a1, 256, 12, v4, a1 + 16);
  }
}

void sub_100088BC8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100110130)
  {
    v2 = type metadata accessor for Date(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100110130);
  }
}

ValueMetadata *type metadata accessor for SupportedPlatforms()
{
  return &type metadata for SupportedPlatforms;
}

uint64_t storeEnumTagSinglePayload for Game.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_100088C78 + 4 * byte_1000CC651[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_100088CAC + 4 * byte_1000CC64C[v4]))();
}

uint64_t sub_100088CAC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100088CB4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100088CBCLL);
  return result;
}

uint64_t sub_100088CC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100088CD0);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_100088CD4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100088CDC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Game.CodingKeys()
{
  return &type metadata for Game.CodingKeys;
}

unint64_t sub_100088CFC()
{
  unint64_t result;

  result = qword_100110188;
  if (!qword_100110188)
  {
    result = swift_getWitnessTable(&unk_1000CC9F0, &type metadata for Game.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100110188);
  }
  return result;
}

unint64_t sub_100088D44()
{
  unint64_t result;

  result = qword_100110190;
  if (!qword_100110190)
  {
    result = swift_getWitnessTable(&unk_1000CC960, &type metadata for Game.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100110190);
  }
  return result;
}

unint64_t sub_100088D8C()
{
  unint64_t result;

  result = qword_100110198;
  if (!qword_100110198)
  {
    result = swift_getWitnessTable(&unk_1000CC988, &type metadata for Game.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100110198);
  }
  return result;
}

uint64_t sub_100088DD0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;

  if (a1 == 0x4449656C646E7562 && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4449656C646E7562, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x44496D616461 && a2 == 0xE600000000000000)
  {
    v7 = 0xE600000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44496D616461, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 1701667182 && a2 == 0xE400000000000000)
  {
    v8 = 0xE400000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701667182, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x79616C507473616CLL && a2 == 0xEC00000074416465)
  {
    v9 = 0xEC00000074416465;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x79616C507473616CLL, 0xEC00000074416465, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x80000001000D0B00)
  {
    v10 = 0x80000001000D0B00;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x80000001000D0B00, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x6C6174736E497369 && a2 == 0xEB0000000064656CLL)
  {
    v11 = 0xEB0000000064656CLL;
LABEL_38:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C6174736E497369, 0xEB0000000064656CLL, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_38;
  }
  if (a1 == 0x6564616372417369 && a2 == 0xE800000000000000)
  {
    v12 = 0xE800000000000000;
LABEL_44:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6564616372417369, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_44;
  }
  if (a1 == 0xD000000000000014)
  {
    v13 = 0x80000001000D0B20;
    if (a2 == 0x80000001000D0B20)
      goto LABEL_49;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x80000001000D0B20, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
LABEL_49:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x80000001000D0B40)
  {
    v14 = 0x80000001000D0B40;
LABEL_55:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x80000001000D0B40, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_55;
  }
  if (a1 == 0xD000000000000017 && a2 == 0x80000001000D0B60)
  {
    v15 = 0x80000001000D0B60;
LABEL_61:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x80000001000D0B60, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_61;
  }
  if (a1 == 0xD000000000000014)
  {
    v16 = 0x80000001000D0B80;
    if (a2 == 0x80000001000D0B80)
      goto LABEL_66;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x80000001000D0B80, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
LABEL_66:
    swift_bridgeObjectRelease(v16);
    return 10;
  }
  if (a1 == 0x706D65546E6F6369 && a2 == 0xEC0000006574616CLL)
  {
    swift_bridgeObjectRelease(0xEC0000006574616CLL);
    return 11;
  }
  else
  {
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)(0x706D65546E6F6369, 0xEC0000006574616CLL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v17 & 1) != 0)
      return 11;
    else
      return 12;
  }
}

uint64_t sub_1000892A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  result = 0;
  v4 = (uint64_t *)(a1 + 32);
  do
  {
    v6 = *v4++;
    v5 = v6;
    if ((v6 & ~result) == 0)
      v5 = 0;
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_1000892DC(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for Date(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10008931C(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 16))(a2, a1);
  return a2;
}

uint64_t sub_100089358()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_100003304(&qword_1001101B0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_1000893BC(uint64_t a1, void *a2)
{
  sub_100003304(&qword_1001101B0);
  sub_100087984(a1, a2);
}

uint64_t sub_10008940C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_10008941C(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

unint64_t sub_100089424()
{
  unint64_t result;

  result = qword_1001101B8;
  if (!qword_1001101B8)
  {
    result = swift_getWitnessTable(&unk_1000CCADC, &_s11GKGameErrorON);
    atomic_store(result, (unint64_t *)&qword_1001101B8);
  }
  return result;
}

uint64_t _s11GKGameErrorOwst(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1000894A8 + 4 * byte_1000CC656[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1000894C8 + 4 * byte_1000CC65B[v4]))();
}

_BYTE *sub_1000894A8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1000894C8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000894D0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000894D8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000894E0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000894E8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *_s11GKGameErrorOMa()
{
  return &_s11GKGameErrorON;
}

unint64_t sub_100089508()
{
  unint64_t result;

  result = qword_1001101C0;
  if (!qword_1001101C0)
  {
    result = swift_getWitnessTable(&unk_1000CCAB4, &_s11GKGameErrorON);
    atomic_store(result, (unint64_t *)&qword_1001101C0);
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessPointPageIntentImplementation()
{
  return &type metadata for AccessPointPageIntentImplementation;
}

uint64_t sub_100089560()
{
  return sub_1000035B4(&qword_10010F5C0, type metadata accessor for AccessPointPageIntent, (uint64_t)&protocol conformance descriptor for AccessPointPageIntent);
}

unint64_t *sub_10008958C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int64_t v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;

  v2 = type metadata accessor for AccessPointHighlight(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = (unint64_t *)&_swiftEmptyArrayStorage;
  if (v6)
  {
    v17 = (unint64_t *)&_swiftEmptyArrayStorage;
    sub_10008D134(0, v6, 0);
    v7 = v17;
    v8 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v9 = *(_QWORD *)(v3 + 72);
    do
    {
      sub_100007878(v8, (uint64_t)v5, type metadata accessor for AccessPointHighlight);
      v17 = v7;
      v11 = v7[2];
      v10 = v7[3];
      if (v11 >= v10 >> 1)
      {
        sub_10008D134(v10 > 1, v11 + 1, 1);
        v7 = v17;
      }
      v15 = v2;
      v16 = sub_1000035B4(&qword_10010FA80, type metadata accessor for AccessPointHighlight, (uint64_t)&unk_1000CBF88);
      v12 = sub_1000052B0(&v14);
      sub_100007878((uint64_t)v5, (uint64_t)v12, type metadata accessor for AccessPointHighlight);
      v7[2] = v11 + 1;
      sub_10005A194(&v14, (uint64_t)&v7[5 * v11 + 4]);
      sub_1000106F0((uint64_t)v5, type metadata accessor for AccessPointHighlight);
      v8 += v9;
      --v6;
    }
    while (v6);
  }
  return v7;
}

uint64_t sub_100089704(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[29] = a4;
  v5[30] = a5;
  v5[27] = a2;
  v5[28] = a3;
  v5[26] = a1;
  v6 = type metadata accessor for AccessPointRequiredData(0);
  v5[31] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AccessPointDataIntent(0);
  v5[32] = v7;
  v5[33] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100089788, 0, 0);
}

uint64_t sub_100089788()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  char v4;
  char v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;

  v2 = *(_QWORD *)(v0 + 256);
  v1 = *(_QWORD *)(v0 + 264);
  v3 = *(char **)(v0 + 216);
  v4 = *v3;
  v5 = v3[1];
  v6 = *(_OWORD *)(v3 + 24);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v3 + 8);
  *(_OWORD *)(v0 + 32) = v6;
  v7 = *(_OWORD *)(v3 + 56);
  v8 = *(_OWORD *)(v3 + 88);
  v9 = *(_OWORD *)(v3 + 40);
  *(_OWORD *)(v0 + 80) = *(_OWORD *)(v3 + 72);
  *(_OWORD *)(v0 + 96) = v8;
  *(_OWORD *)(v0 + 48) = v9;
  *(_OWORD *)(v0 + 64) = v7;
  v10 = *(_OWORD *)(v3 + 120);
  v11 = *(_OWORD *)(v3 + 136);
  v12 = *(_OWORD *)(v3 + 104);
  *(_QWORD *)(v0 + 160) = *((_QWORD *)v3 + 19);
  *(_OWORD *)(v0 + 128) = v10;
  *(_OWORD *)(v0 + 144) = v11;
  *(_OWORD *)(v0 + 112) = v12;
  v13 = type metadata accessor for AccessPointPageIntent(0);
  sub_100007878((uint64_t)&v3[*(int *)(v13 + 32)], v1 + *(int *)(v2 + 28), type metadata accessor for Game);
  *(_BYTE *)v1 = v4;
  *(_BYTE *)(v1 + 1) = v5;
  v14 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v1 + 8) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v1 + 24) = v14;
  v15 = *(_OWORD *)(v0 + 80);
  v16 = *(_OWORD *)(v0 + 96);
  v17 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v1 + 40) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v1 + 88) = v16;
  *(_OWORD *)(v1 + 72) = v15;
  *(_OWORD *)(v1 + 56) = v17;
  v19 = *(_OWORD *)(v0 + 128);
  v18 = *(_OWORD *)(v0 + 144);
  v20 = *(_QWORD *)(v0 + 160);
  *(_OWORD *)(v1 + 104) = *(_OWORD *)(v0 + 112);
  *(_QWORD *)(v1 + 152) = v20;
  *(_OWORD *)(v1 + 136) = v18;
  *(_OWORD *)(v1 + 120) = v19;
  v21 = sub_100003304(&qword_10010BF48);
  sub_100019FF0((_QWORD *)(v0 + 16));
  v22 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  *(_QWORD *)(v0 + 272) = v22;
  *v22 = v0;
  v22[1] = sub_1000898D8;
  return BaseObjectGraph.inject<A>(_:)(v0 + 168, v21, v21);
}

uint64_t sub_1000898D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 272);
  *(_QWORD *)(*(_QWORD *)v1 + 280) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100089A3C;
  else
    v3 = sub_10008993C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10008993C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = v0[24];
  v2 = v0[25];
  sub_100003C28(v0 + 21, v1);
  v3 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of IntentDispatcher.dispatch<A>(_:objectGraph:)[1]);
  v0[36] = v3;
  v4 = sub_1000035B4((unint64_t *)&qword_10010EBF0, type metadata accessor for AccessPointDataIntent, (uint64_t)&unk_1000CE780);
  *v3 = v0;
  v3[1] = sub_1000899D8;
  return dispatch thunk of IntentDispatcher.dispatch<A>(_:objectGraph:)(v0[31], v0[33], v0[28], v0[32], v4, v1, v2);
}

uint64_t sub_1000899D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 288);
  *(_QWORD *)(*(_QWORD *)v1 + 296) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100089B58;
  else
    v3 = sub_100089A98;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100089A3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 264);
  v2 = *(_QWORD *)(v0 + 248);
  sub_1000106F0(v1, type metadata accessor for AccessPointDataIntent);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100089A98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 264);
  v3 = *(_QWORD *)(v0 + 240);
  v2 = *(_QWORD *)(v0 + 248);
  v4 = *(_QWORD *)(v0 + 232);
  v6 = *(_QWORD *)(v0 + 208);
  v5 = *(_QWORD *)(v0 + 216);
  sub_100004624((_QWORD *)(v0 + 168));
  sub_100089BBC(v2, v5, v4, v3, v6);
  sub_1000106F0(v2, type metadata accessor for AccessPointRequiredData);
  sub_1000106F0(v1, type metadata accessor for AccessPointDataIntent);
  v7 = type metadata accessor for AccessPointContainer(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 0, 1, v7);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100089B58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100004624((_QWORD *)(v0 + 168));
  v1 = *(_QWORD *)(v0 + 264);
  v2 = *(_QWORD *)(v0 + 248);
  sub_1000106F0(v1, type metadata accessor for AccessPointDataIntent);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100089BBC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  int v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD v53[9];
  uint64_t v54;
  char *v55;
  int v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;

  v66 = a5;
  v67 = a4;
  v70 = a3;
  v68 = 0xEF796C6E4F746E69;
  v7 = type metadata accessor for PageMetrics(0);
  v64 = *(_QWORD *)(v7 - 8);
  v65 = v7;
  __chkstk_darwin(v7);
  v63 = (char *)v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PageID(0);
  v61 = *(_QWORD *)(v9 - 8);
  v62 = v9;
  __chkstk_darwin(v9);
  v60 = (char *)v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for AccessPointHighlight(0);
  v69 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v55 = (char *)v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v53[5] = (char *)v53 - v14;
  __chkstk_darwin(v15);
  v53[2] = (char *)v53 - v16;
  __chkstk_darwin(v17);
  v53[1] = (char *)v53 - v18;
  __chkstk_darwin(v19);
  v53[0] = (char *)v53 - v20;
  __chkstk_darwin(v21);
  v53[4] = (char *)v53 - v22;
  __chkstk_darwin(v23);
  v57 = (char *)v53 - v24;
  __chkstk_darwin(v25);
  v27 = (char *)v53 - v26;
  v28 = type metadata accessor for AccessPointRequiredData(0);
  __chkstk_darwin(v28);
  v71 = (char *)v53 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v53[3] = (char *)v53 - v31;
  __chkstk_darwin(v32);
  v58 = (char *)v53 - v33;
  __chkstk_darwin(v34);
  v53[7] = (char *)v53 - v35;
  __chkstk_darwin(v36);
  v53[6] = (char *)v53 - v37;
  __chkstk_darwin(v38);
  v40 = (char *)v53 - v39;
  __chkstk_darwin(v41);
  v43 = (char *)v53 - v42;
  v54 = type metadata accessor for Game(0);
  __chkstk_darwin(v54);
  v45 = (char *)v53 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = *(unsigned __int8 *)(a2 + 1);
  v47 = *(int *)(type metadata accessor for AccessPointPageIntent(0) + 32);
  v53[8] = a2;
  v59 = v45;
  sub_100007878(a2 + v47, (uint64_t)v45, type metadata accessor for Game);
  sub_100007878(a1, (uint64_t)v43, type metadata accessor for AccessPointRequiredData);
  v56 = v46;
  if (v46 == 1)
  {
    v48 = v43[*(int *)(v28 + 28)];
    sub_1000106F0((uint64_t)v43, type metadata accessor for AccessPointRequiredData);
    sub_100007878(a1, (uint64_t)v40, type metadata accessor for AccessPointRequiredData);
    if (v48 == 1)
    {
      sub_1000106F0((uint64_t)v40, type metadata accessor for AccessPointRequiredData);
      sub_10008AAC0(a1, 1, v70, v67, (uint64_t)v27, 1.5);
      v49 = sub_100054420(0, 1, 1, (unint64_t)&_swiftEmptyArrayStorage);
      v50 = v49;
      v52 = *(_QWORD *)(v49 + 16);
      v51 = *(_QWORD *)(v49 + 24);
      if (v52 >= v51 >> 1)
        v50 = sub_100054420(v51 > 1, v52 + 1, 1, v49);
      *(_QWORD *)(v50 + 16) = v52 + 1;
      sub_100010F0C((uint64_t)v27, v50+ ((*(unsigned __int8 *)(v69 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80))+ *(_QWORD *)(v69 + 72) * v52, type metadata accessor for AccessPointHighlight);
      __asm { BR              X10 }
    }
  }
  else
  {
    sub_1000106F0((uint64_t)v43, type metadata accessor for AccessPointRequiredData);
    sub_100007878(a1, (uint64_t)v40, type metadata accessor for AccessPointRequiredData);
  }
  __asm { BR              X10 }
}

uint64_t sub_10008AAC0@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  int *v30;
  void (*v31)(char *, uint64_t, uint64_t, int *);
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _QWORD *v37;
  char *v38;
  char *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  char *v45;
  _TtC13GameOverlayUI20GameOverlayUIService *v46;
  uint64_t v47;
  SEL v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  Swift::String v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  int *v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;

  v74 = a3;
  v75 = a4;
  v72 = a2;
  v9 = sub_100003304(&qword_10010C220);
  __chkstk_darwin(v9);
  v77 = (char *)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100003304(&qword_10010CA70);
  __chkstk_darwin(v11);
  v76 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v68 - v14;
  v16 = type metadata accessor for ActionMetrics(0);
  v70 = *(_QWORD *)(v16 - 8);
  v71 = v16;
  __chkstk_darwin(v16);
  v69 = (char *)&v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Game(0);
  __chkstk_darwin(v18);
  v20 = (char *)&v68 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100003304(&qword_10010CA80);
  __chkstk_darwin(v21);
  v23 = (char *)&v68 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v26 = (char *)&v68 - v25;
  __chkstk_darwin(v27);
  v29 = (char *)&v68 - v28;
  v30 = (int *)type metadata accessor for LaunchDashboardAction(0);
  v73 = *((_QWORD *)v30 - 1);
  v31 = *(void (**)(char *, uint64_t, uint64_t, int *))(v73 + 56);
  v31(v29, 1, 1, v30);
  if ((v72 & 1) != 0)
  {
    v32 = type metadata accessor for AccessPointRequiredData(0);
    sub_100007878(a1 + *(int *)(v32 + 24), (uint64_t)v20, type metadata accessor for Game);
    v33 = *(_OWORD *)(a1 + 120);
    v84 = *(_OWORD *)(a1 + 104);
    v85 = v33;
    v86 = *(_OWORD *)(a1 + 136);
    v87 = *(_QWORD *)(a1 + 152);
    v34 = *(_OWORD *)(a1 + 56);
    v80 = *(_OWORD *)(a1 + 40);
    v81 = v34;
    v35 = *(_OWORD *)(a1 + 88);
    v82 = *(_OWORD *)(a1 + 72);
    v83 = v35;
    v36 = *(_OWORD *)(a1 + 24);
    v78 = *(_OWORD *)(a1 + 8);
    v79 = v36;
    v37 = sub_100019FF0(&v78);
    v38 = v69;
    static ActionMetrics.notInstrumented.getter(v37);
    sub_100010ED0((uint64_t)v29, &qword_10010CA80);
    sub_100010F0C((uint64_t)v20, (uint64_t)v26, type metadata accessor for Game);
    v39 = &v26[v30[5]];
    v40 = v79;
    *(_OWORD *)v39 = v78;
    *((_OWORD *)v39 + 1) = v40;
    v41 = v83;
    *((_OWORD *)v39 + 4) = v82;
    *((_OWORD *)v39 + 5) = v41;
    v42 = v81;
    *((_OWORD *)v39 + 2) = v80;
    *((_OWORD *)v39 + 3) = v42;
    *((_QWORD *)v39 + 18) = v87;
    v43 = v86;
    v44 = v84;
    *((_OWORD *)v39 + 7) = v85;
    *((_OWORD *)v39 + 8) = v43;
    *((_OWORD *)v39 + 6) = v44;
    v45 = &v26[v30[6]];
    *(_QWORD *)v45 = 0;
    *((_QWORD *)v45 + 1) = 0;
    v45[16] = 3;
    (*(void (**)(char *, char *, uint64_t))(v70 + 32))(&v26[v30[7]], v38, v71);
    v26[v30[8]] = 9;
    v26[v30[9]] = 3;
    v31(v26, 0, 1, v30);
    sub_10001A0AC((uint64_t)v26, (uint64_t)v29, &qword_10010CA80);
  }
  *(_QWORD *)&v78 = 0;
  *((_QWORD *)&v78 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(20);
  v46 = (_TtC13GameOverlayUI20GameOverlayUIService *)*((_QWORD *)&v78 + 1);
  v47 = v75;
  swift_bridgeObjectRetain(v75);
  swift_bridgeObjectRelease(v46, v48, v49, v50, v51, v52, v53, v54);
  *(_QWORD *)&v78 = v74;
  *((_QWORD *)&v78 + 1) = v47;
  v55._object = (void *)0x80000001000D0CC0;
  v55._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v55);
  v91 = v78;
  AnyHashable.init<A>(_:)(&v78, &v91, &type metadata for String, &protocol witness table for String);
  *(_QWORD *)v15 = 0x65766E6F63696367;
  *((_QWORD *)v15 + 1) = 0xE900000000000063;
  *((_QWORD *)v15 + 2) = 0x4041000000000000;
  v56 = type metadata accessor for AccessPointIconType(0);
  swift_storeEnumTagMultiPayload(v15, v56, 3);
  v57 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56);
  v57(v15, 0, 1, v56);
  v58 = (uint64_t)v76;
  v57(v76, 1, 1, v56);
  sub_100010CBC((uint64_t)v29, (uint64_t)v23, &qword_10010CA80);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v73 + 48))(v23, 1, v30) == 1)
  {
    sub_100010ED0((uint64_t)v23, &qword_10010CA80);
    v91 = 0u;
    v92 = 0u;
    v93 = 0;
  }
  else
  {
    *((_QWORD *)&v92 + 1) = v30;
    v93 = sub_1000035B4(&qword_10010CA88, type metadata accessor for LaunchDashboardAction, (uint64_t)&protocol conformance descriptor for LaunchDashboardAction);
    v59 = sub_1000052B0(&v91);
    sub_100010F0C((uint64_t)v23, (uint64_t)v59, type metadata accessor for LaunchDashboardAction);
  }
  v60 = type metadata accessor for ImpressionMetrics(0);
  v61 = (uint64_t)v77;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 56))(v77, 1, 1, v60);
  v62 = v79;
  *(_OWORD *)a5 = v78;
  *(_OWORD *)(a5 + 16) = v62;
  *(_QWORD *)(a5 + 32) = v80;
  v63 = (int *)type metadata accessor for AccessPointHighlight(0);
  *(_OWORD *)(a5 + 40) = 0u;
  *(_OWORD *)(a5 + 56) = 0u;
  sub_10001A0AC((uint64_t)v15, a5 + v63[7], &qword_10010CA70);
  sub_10001A0AC(v58, a5 + v63[8], &qword_10010CA70);
  v64 = a5 + v63[9];
  *(double *)v64 = a6;
  *(_BYTE *)(v64 + 8) = 0;
  *(_BYTE *)(a5 + v63[10]) = 2;
  v65 = a5 + v63[11];
  v90 = 0;
  v88 = 0u;
  v89 = 0u;
  sub_10000F768((uint64_t)&v91, (uint64_t)&v88);
  v66 = v89;
  *(_OWORD *)v65 = v88;
  *(_OWORD *)(v65 + 16) = v66;
  *(_QWORD *)(v65 + 32) = v90;
  sub_100010ED0((uint64_t)&v91, &qword_10010C128);
  sub_10001A0AC(v61, a5 + v63[12], &qword_10010C220);
  *(_BYTE *)(a5 + v63[13]) = 3;
  *(_BYTE *)(a5 + v63[14]) = 3;
  *(_QWORD *)(a5 + v63[15]) = 1;
  return sub_100010ED0((uint64_t)v29, &qword_10010CA80);
}

uint64_t sub_10008B0A4@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, unint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _QWORD *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  char *v29;
  int v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _TtC13GameOverlayUI20GameOverlayUIService *v36;
  SEL v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  Swift::String v44;
  int *v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  __int128 v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  char *v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  int *v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;

  v57 = a4;
  LODWORD(v56) = a3;
  v59 = a2;
  v9 = sub_100003304(&qword_10010C220);
  __chkstk_darwin(v9);
  v60 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for AccessPointIconType(0);
  v58 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (uint64_t *)((char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = (int *)type metadata accessor for LaunchDashboardAction(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for AccessPointRequiredData(0);
  sub_100007878(a1 + *(int *)(v17 + 24), (uint64_t)v16, type metadata accessor for Game);
  v18 = *(_OWORD *)(a1 + 120);
  v74 = *(_OWORD *)(a1 + 104);
  v75 = v18;
  v76 = *(_OWORD *)(a1 + 136);
  v77 = *(_QWORD *)(a1 + 152);
  v19 = *(_OWORD *)(a1 + 56);
  v70 = *(_OWORD *)(a1 + 40);
  v71 = v19;
  v20 = *(_OWORD *)(a1 + 88);
  v72 = *(_OWORD *)(a1 + 72);
  v73 = v20;
  v21 = *(_OWORD *)(a1 + 24);
  v68 = *(_OWORD *)(a1 + 8);
  v69 = v21;
  v22 = sub_100019FF0(&v68);
  static ActionMetrics.notInstrumented.getter(v22);
  v23 = &v16[v14[5]];
  v24 = v73;
  *((_OWORD *)v23 + 4) = v72;
  *((_OWORD *)v23 + 5) = v24;
  v25 = v71;
  *((_OWORD *)v23 + 2) = v70;
  *((_OWORD *)v23 + 3) = v25;
  *((_QWORD *)v23 + 18) = v77;
  v26 = v76;
  v27 = v74;
  *((_OWORD *)v23 + 7) = v75;
  *((_OWORD *)v23 + 8) = v26;
  *((_OWORD *)v23 + 6) = v27;
  v28 = v69;
  *(_OWORD *)v23 = v68;
  *((_OWORD *)v23 + 1) = v28;
  v29 = &v16[v14[6]];
  *(_QWORD *)v29 = 0;
  *((_QWORD *)v29 + 1) = 0;
  v29[16] = 3;
  v16[v14[8]] = 9;
  v16[v14[9]] = 3;
  v30 = *(unsigned __int8 *)(a1 + *(int *)(v17 + 28));
  if (v30 == 1)
  {
    v31 = *((_QWORD *)&v69 + 1);
    *v13 = v69;
    v13[1] = v31;
    swift_storeEnumTagMultiPayload(v13, v11, 1);
    swift_bridgeObjectRetain(v31);
  }
  else
  {
    *v13 = 0x65766E6F63696367;
    v13[1] = 0xE900000000000063;
    v13[2] = 0x4041000000000000;
    swift_storeEnumTagMultiPayload(v13, v11, 3);
  }
  if (qword_10010BB20 != -1)
  {
    swift_once(&qword_10010BB20, sub_100072E0C);
    if (v30)
      goto LABEL_6;
LABEL_15:
    v55 = 0;
    v35 = 0;
    v34 = qword_100123330;
    v56 = qword_100123328;
    v33 = qword_100123330;
    goto LABEL_16;
  }
  if (!v30)
    goto LABEL_15;
LABEL_6:
  if ((v56 & 1) != 0)
  {
    if (qword_10010BB10 != -1)
      swift_once(&qword_10010BB10, sub_100072DDC);
    v32 = &qword_100123308;
  }
  else
  {
    if (qword_10010BB18 != -1)
      swift_once(&qword_10010BB18, sub_100072DF4);
    v32 = &qword_100123318;
  }
  v33 = v32[1];
  v56 = *v32;
  swift_bridgeObjectRetain(v33);
  v34 = *((_QWORD *)&v70 + 1);
  v35 = *((_QWORD *)&v70 + 1);
  v55 = v70;
LABEL_16:
  swift_bridgeObjectRetain(v34);
  v64 = 0;
  v65 = 0xE000000000000000;
  _StringGuts.grow(_:)(22);
  v36 = (_TtC13GameOverlayUI20GameOverlayUIService *)v65;
  swift_bridgeObjectRetain(a5);
  swift_bridgeObjectRelease(v36, v37, v38, v39, v40, v41, v42, v43);
  v64 = v57;
  v65 = a5;
  v44._object = (void *)0x80000001000D0CA0;
  v44._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v44);
  AnyHashable.init<A>(_:)(a6, &v64, &type metadata for String, &protocol witness table for String);
  v45 = (int *)type metadata accessor for AccessPointHighlight(0);
  v46 = (uint64_t)a6 + v45[7];
  sub_100007878((uint64_t)v13, v46, type metadata accessor for AccessPointIconType);
  v47 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v58 + 56);
  v47(v46, 0, 1, v11);
  v47((uint64_t)a6 + v45[8], 1, 1, v11);
  LOBYTE(v47) = v59 & 1;
  v66 = v14;
  v67 = sub_1000035B4(&qword_10010CA88, type metadata accessor for LaunchDashboardAction, (uint64_t)&protocol conformance descriptor for LaunchDashboardAction);
  v48 = sub_1000052B0(&v64);
  sub_100007878((uint64_t)v16, (uint64_t)v48, type metadata accessor for LaunchDashboardAction);
  v49 = type metadata accessor for ImpressionMetrics(0);
  v50 = (uint64_t)v60;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v60, 1, 1, v49);
  a6[5] = v56;
  a6[6] = v33;
  a6[7] = v55;
  a6[8] = v35;
  v51 = (char *)a6 + v45[9];
  *(_QWORD *)v51 = 0x4008000000000000;
  v51[8] = 0;
  *((_BYTE *)a6 + v45[10]) = (_BYTE)v47;
  v52 = (char *)a6 + v45[11];
  v63 = 0;
  v62 = 0u;
  v61 = 0u;
  sub_10000F768((uint64_t)&v64, (uint64_t)&v61);
  v53 = v62;
  *(_OWORD *)v52 = v61;
  *((_OWORD *)v52 + 1) = v53;
  *((_QWORD *)v52 + 4) = v63;
  sub_100010ED0((uint64_t)&v64, &qword_10010C128);
  sub_10001A0AC(v50, (uint64_t)a6 + v45[12], &qword_10010C220);
  *((_BYTE *)a6 + v45[13]) = 3;
  *((_BYTE *)a6 + v45[14]) = 2;
  *(_QWORD *)((char *)a6 + v45[15]) = 1;
  sub_1000106F0((uint64_t)v13, type metadata accessor for AccessPointIconType);
  return sub_1000106F0((uint64_t)v16, type metadata accessor for LaunchDashboardAction);
}

uint64_t sub_10008B660@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _QWORD *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char *v25;
  _TtC13GameOverlayUI20GameOverlayUIService *v26;
  SEL v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  Swift::String v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  _QWORD *v40;
  uint64_t v41;
  void (*v42)(_QWORD *, uint64_t, uint64_t, uint64_t);
  _QWORD *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  __int128 v47;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  int *v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;

  v8 = sub_100003304(&qword_10010C220);
  __chkstk_darwin(v8);
  v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (int *)type metadata accessor for LaunchDashboardAction(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for AccessPointRequiredData(0);
  sub_100007878(a1 + *(int *)(v14 + 24), (uint64_t)v13, type metadata accessor for Game);
  v15 = *(_OWORD *)(a1 + 120);
  v62 = *(_OWORD *)(a1 + 104);
  v63 = v15;
  v64 = *(_OWORD *)(a1 + 136);
  v65 = *(_QWORD *)(a1 + 152);
  v16 = *(_OWORD *)(a1 + 56);
  v58 = *(_OWORD *)(a1 + 40);
  v59 = v16;
  v17 = *(_OWORD *)(a1 + 88);
  v60 = *(_OWORD *)(a1 + 72);
  v61 = v17;
  v18 = *(_OWORD *)(a1 + 24);
  v56 = *(_OWORD *)(a1 + 8);
  v57 = v18;
  v19 = sub_100019FF0(&v56);
  static ActionMetrics.notInstrumented.getter(v19);
  v20 = &v13[v11[5]];
  v21 = v63;
  *((_OWORD *)v20 + 6) = v62;
  *((_OWORD *)v20 + 7) = v21;
  *((_OWORD *)v20 + 8) = v64;
  *((_QWORD *)v20 + 18) = v65;
  v22 = v59;
  *((_OWORD *)v20 + 2) = v58;
  *((_OWORD *)v20 + 3) = v22;
  v23 = v61;
  *((_OWORD *)v20 + 4) = v60;
  *((_OWORD *)v20 + 5) = v23;
  v24 = v57;
  *(_OWORD *)v20 = v56;
  *((_OWORD *)v20 + 1) = v24;
  v25 = &v13[v11[6]];
  *(_QWORD *)v25 = 0;
  *((_QWORD *)v25 + 1) = 0;
  v25[16] = 3;
  v13[v11[8]] = 9;
  v13[v11[9]] = 1;
  v52 = 0;
  v53 = 0xE000000000000000;
  _StringGuts.grow(_:)(23);
  v26 = (_TtC13GameOverlayUI20GameOverlayUIService *)v53;
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRelease(v26, v27, v28, v29, v30, v31, v32, v33);
  v52 = a2;
  v53 = a3;
  v34._object = (void *)0x80000001000D0BA0;
  v34._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v34);
  AnyHashable.init<A>(_:)(a4, &v52, &type metadata for String, &protocol witness table for String);
  v35 = *(_QWORD *)(a1 + *(int *)(v14 + 32));
  type metadata accessor for GCUILocalizedStrings(0);
  v36 = static GCUILocalizedStrings.OVERLAY_FRIEND_REQUESTS_HIGHLIGHT_TITLE(count:)(v35);
  v38 = v37;
  v39 = (int *)type metadata accessor for AccessPointHighlight(0);
  v40 = (_QWORD *)((char *)a4 + v39[7]);
  *v40 = 0x65766E6F63696367;
  v40[1] = 0xE900000000000063;
  v40[2] = 0x4041000000000000;
  v41 = type metadata accessor for AccessPointIconType(0);
  swift_storeEnumTagMultiPayload(v40, v41, 3);
  v42 = *(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56);
  v42(v40, 0, 1, v41);
  v42((_QWORD *)((char *)a4 + v39[8]), 1, 1, v41);
  v54 = v11;
  v55 = sub_1000035B4(&qword_10010CA88, type metadata accessor for LaunchDashboardAction, (uint64_t)&protocol conformance descriptor for LaunchDashboardAction);
  v43 = sub_1000052B0(&v52);
  sub_100007878((uint64_t)v13, (uint64_t)v43, type metadata accessor for LaunchDashboardAction);
  v44 = type metadata accessor for ImpressionMetrics(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v10, 1, 1, v44);
  a4[5] = v36;
  a4[6] = v38;
  a4[7] = 0;
  a4[8] = 0;
  v45 = (char *)a4 + v39[9];
  *(_QWORD *)v45 = 0x4000000000000000;
  v45[8] = 0;
  *((_BYTE *)a4 + v39[10]) = 2;
  v46 = (char *)a4 + v39[11];
  v51 = 0;
  v50 = 0u;
  v49 = 0u;
  sub_10000F768((uint64_t)&v52, (uint64_t)&v49);
  v47 = v50;
  *(_OWORD *)v46 = v49;
  *((_OWORD *)v46 + 1) = v47;
  *((_QWORD *)v46 + 4) = v51;
  sub_100010ED0((uint64_t)&v52, &qword_10010C128);
  sub_10001A0AC((uint64_t)v10, (uint64_t)a4 + v39[12], &qword_10010C220);
  *((_BYTE *)a4 + v39[13]) = 1;
  *((_BYTE *)a4 + v39[14]) = 3;
  *(_QWORD *)((char *)a4 + v39[15]) = 2;
  return sub_1000106F0((uint64_t)v13, type metadata accessor for LaunchDashboardAction);
}

uint64_t sub_10008BA84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  char *v13;
  int *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _QWORD *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _TtC13GameOverlayUI20GameOverlayUIService *v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  Swift::String v40;
  uint64_t v41;
  uint64_t v42;
  int *v43;
  _QWORD *v44;
  uint64_t v45;
  void (*v46)(_QWORD *, uint64_t, uint64_t, uint64_t);
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  __int128 v52;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  int *v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;

  v8 = sub_100003304(&qword_10010C220);
  __chkstk_darwin(v8);
  v10 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (int *)type metadata accessor for LaunchDashboardAction(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (int *)type metadata accessor for AccessPointRequiredData(0);
  sub_100007878(a1 + v14[6], (uint64_t)v13, type metadata accessor for Game);
  v15 = *(_OWORD *)(a1 + 120);
  v69 = *(_OWORD *)(a1 + 104);
  v70 = v15;
  v71 = *(_OWORD *)(a1 + 136);
  v72 = *(_QWORD *)(a1 + 152);
  v16 = *(_OWORD *)(a1 + 56);
  v65 = *(_OWORD *)(a1 + 40);
  v66 = v16;
  v17 = *(_OWORD *)(a1 + 88);
  v67 = *(_OWORD *)(a1 + 72);
  v68 = v17;
  v18 = *(_OWORD *)(a1 + 24);
  v63 = *(_OWORD *)(a1 + 8);
  v64 = v18;
  v19 = sub_100019FF0(&v63);
  static ActionMetrics.notInstrumented.getter(v19);
  v20 = &v13[v11[5]];
  v21 = v68;
  *((_OWORD *)v20 + 4) = v67;
  *((_OWORD *)v20 + 5) = v21;
  v22 = v66;
  *((_OWORD *)v20 + 2) = v65;
  *((_OWORD *)v20 + 3) = v22;
  *((_QWORD *)v20 + 18) = v72;
  v23 = v71;
  v24 = v69;
  *((_OWORD *)v20 + 7) = v70;
  *((_OWORD *)v20 + 8) = v23;
  *((_OWORD *)v20 + 6) = v24;
  v25 = v64;
  *(_OWORD *)v20 = v63;
  *((_OWORD *)v20 + 1) = v25;
  v26 = &v13[v11[6]];
  *(_QWORD *)v26 = 0;
  *((_QWORD *)v26 + 1) = 0;
  v26[16] = 0;
  v13[v11[8]] = 9;
  v13[v11[9]] = 1;
  v27 = v14[11];
  v28 = *(_QWORD *)(a1 + v14[10]);
  v29 = *(_QWORD *)(a1 + v27);
  type metadata accessor for GCUILocalizedStrings(0);
  if (v28 < 1)
    v30 = static GCUILocalizedStrings.OVERLAY_ACHIEVEMENT_HIGHLIGHT_SUBTITLE(total:)(v29);
  else
    v30 = static GCUILocalizedStrings.OVERLAY_ACHIEVEMENT_HIGHLIGHT_SUBTITLE_INPROGRESS(completed:total:)(v28, v29);
  v55 = v30;
  v54 = v31;
  v59 = 0;
  v60 = 0xE000000000000000;
  _StringGuts.grow(_:)(20);
  v32 = (_TtC13GameOverlayUI20GameOverlayUIService *)v60;
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRelease(v32, v33, v34, v35, v36, v37, v38, v39);
  v59 = a2;
  v60 = a3;
  v40._object = (void *)0x80000001000D0BC0;
  v40._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v40);
  AnyHashable.init<A>(_:)(a4, &v59, &type metadata for String, &protocol witness table for String);
  if (qword_10010BB30 != -1)
    swift_once(&qword_10010BB30, sub_100072E3C);
  v42 = qword_100123348;
  v41 = qword_100123350;
  v43 = (int *)type metadata accessor for AccessPointHighlight(0);
  v44 = (_QWORD *)((char *)a4 + v43[7]);
  *v44 = 0xD00000000000002FLL;
  v44[1] = 0x80000001000D0BE0;
  v45 = type metadata accessor for AccessPointIconType(0);
  swift_storeEnumTagMultiPayload(v44, v45, 0);
  v46 = *(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56);
  v46(v44, 0, 1, v45);
  v46((_QWORD *)((char *)a4 + v43[8]), 1, 1, v45);
  v61 = v11;
  v62 = sub_1000035B4(&qword_10010CA88, type metadata accessor for LaunchDashboardAction, (uint64_t)&protocol conformance descriptor for LaunchDashboardAction);
  v47 = sub_1000052B0(&v59);
  sub_100007878((uint64_t)v13, (uint64_t)v47, type metadata accessor for LaunchDashboardAction);
  v48 = type metadata accessor for ImpressionMetrics(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(v10, 1, 1, v48);
  a4[5] = v42;
  a4[6] = v41;
  v49 = v54;
  a4[7] = v55;
  a4[8] = v49;
  v50 = (char *)a4 + v43[9];
  *(_QWORD *)v50 = 0x4000000000000000;
  v50[8] = 0;
  *((_BYTE *)a4 + v43[10]) = 2;
  v51 = (char *)a4 + v43[11];
  v58 = 0;
  v57 = 0u;
  v56 = 0u;
  swift_bridgeObjectRetain(v41);
  sub_10000F768((uint64_t)&v59, (uint64_t)&v56);
  v52 = v57;
  *(_OWORD *)v51 = v56;
  *((_OWORD *)v51 + 1) = v52;
  *((_QWORD *)v51 + 4) = v58;
  sub_100010ED0((uint64_t)&v59, &qword_10010C128);
  sub_10001A0AC((uint64_t)v10, (uint64_t)a4 + v43[12], &qword_10010C220);
  *((_BYTE *)a4 + v43[13]) = 1;
  *((_BYTE *)a4 + v43[14]) = 3;
  *(_QWORD *)((char *)a4 + v43[15]) = 3;
  return sub_1000106F0((uint64_t)v13, type metadata accessor for LaunchDashboardAction);
}

uint64_t sub_10008BF14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  int *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _QWORD *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  const char *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  _TtC13GameOverlayUI20GameOverlayUIService *v33;
  const char *v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  _TtC13GameOverlayUI20GameOverlayUIService *v41;
  SEL v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  Swift::String v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  _QWORD *v53;
  uint64_t v54;
  void (*v55)(_QWORD *, uint64_t, uint64_t, uint64_t);
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  __int128 v61;
  uint64_t v63;
  char *v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  int *v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;

  v8 = sub_100003304(&qword_10010C220);
  __chkstk_darwin(v8);
  v64 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (int *)type metadata accessor for LaunchDashboardAction(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (int *)type metadata accessor for AccessPointRequiredData(0);
  sub_100007878(a1 + v13[6], (uint64_t)v12, type metadata accessor for Game);
  v14 = *(_OWORD *)(a1 + 120);
  v78 = *(_OWORD *)(a1 + 104);
  v79 = v14;
  v80 = *(_OWORD *)(a1 + 136);
  v81 = *(_QWORD *)(a1 + 152);
  v15 = *(_OWORD *)(a1 + 56);
  v74 = *(_OWORD *)(a1 + 40);
  v75 = v15;
  v16 = *(_OWORD *)(a1 + 88);
  v76 = *(_OWORD *)(a1 + 72);
  v77 = v16;
  v17 = *(_OWORD *)(a1 + 24);
  v72 = *(_OWORD *)(a1 + 8);
  v73 = v17;
  v18 = sub_100019FF0(&v72);
  static ActionMetrics.notInstrumented.getter(v18);
  v19 = &v12[v10[5]];
  v20 = v77;
  *((_OWORD *)v19 + 4) = v76;
  *((_OWORD *)v19 + 5) = v20;
  v21 = v75;
  *((_OWORD *)v19 + 2) = v74;
  *((_OWORD *)v19 + 3) = v21;
  *((_QWORD *)v19 + 18) = v81;
  v22 = v80;
  v23 = v78;
  *((_OWORD *)v19 + 7) = v79;
  *((_OWORD *)v19 + 8) = v22;
  *((_OWORD *)v19 + 6) = v23;
  v24 = v73;
  *(_OWORD *)v19 = v72;
  *((_OWORD *)v19 + 1) = v24;
  v25 = &v12[v10[6]];
  *(_QWORD *)v25 = 0;
  *((_QWORD *)v25 + 1) = 0;
  v25[16] = 1;
  v12[v10[8]] = 9;
  v12[v10[9]] = 1;
  v26 = *(_QWORD *)(a1 + v13[14]);
  if (v26 < 1)
  {
    v30 = (uint64_t *)(a1 + v13[13]);
    v31 = v30[1];
    if (v31)
    {
      v32 = *v30;
      v33 = (_TtC13GameOverlayUI20GameOverlayUIService *)v30[1];
    }
    else
    {
      v32 = 0;
      v33 = (_TtC13GameOverlayUI20GameOverlayUIService *)0xE000000000000000;
    }
    type metadata accessor for GCUILocalizedStrings(0);
    swift_bridgeObjectRetain(v31);
    v63 = static GCUILocalizedStrings.OVERLAY_LEADERBOARD_HIGHLIGHT_SUBTITLE_GET_STARTED(leaderboardName:)(v32, v33);
    v29 = v34;
    swift_bridgeObjectRelease(v33, v34, v35, v36, v37, v38, v39, v40);
  }
  else
  {
    v27 = *(_QWORD *)(a1 + v13[15]);
    type metadata accessor for GCUILocalizedStrings(0);
    v63 = static GCUILocalizedStrings.OVERLAY_LEADERBOARD_HIGHLIGHT_SUBTITLE_FRIEND_RANK(rank:total:)(v26, v27);
    v29 = v28;
  }
  v68 = 0;
  v69 = 0xE000000000000000;
  _StringGuts.grow(_:)(20);
  v41 = (_TtC13GameOverlayUI20GameOverlayUIService *)v69;
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRelease(v41, v42, v43, v44, v45, v46, v47, v48);
  v68 = a2;
  v69 = a3;
  v49._object = (void *)0x80000001000D0C10;
  v49._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v49);
  AnyHashable.init<A>(_:)(a4, &v68, &type metadata for String, &protocol witness table for String);
  if (qword_10010BB38 != -1)
    swift_once(&qword_10010BB38, sub_100072E54);
  v50 = qword_100123358;
  v51 = qword_100123360;
  v52 = (int *)type metadata accessor for AccessPointHighlight(0);
  v53 = (_QWORD *)((char *)a4 + v52[7]);
  *v53 = 0xD00000000000001DLL;
  v53[1] = 0x80000001000D0C30;
  v54 = type metadata accessor for AccessPointIconType(0);
  swift_storeEnumTagMultiPayload(v53, v54, 0);
  v55 = *(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56);
  v55(v53, 0, 1, v54);
  v55((_QWORD *)((char *)a4 + v52[8]), 1, 1, v54);
  v70 = v10;
  v71 = sub_1000035B4(&qword_10010CA88, type metadata accessor for LaunchDashboardAction, (uint64_t)&protocol conformance descriptor for LaunchDashboardAction);
  v56 = sub_1000052B0(&v68);
  sub_100007878((uint64_t)v12, (uint64_t)v56, type metadata accessor for LaunchDashboardAction);
  v57 = type metadata accessor for ImpressionMetrics(0);
  v58 = (uint64_t)v64;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v64, 1, 1, v57);
  a4[5] = v50;
  a4[6] = v51;
  a4[7] = v63;
  a4[8] = v29;
  v59 = (char *)a4 + v52[9];
  *(_QWORD *)v59 = 0x4000000000000000;
  v59[8] = 0;
  *((_BYTE *)a4 + v52[10]) = 2;
  v60 = (char *)a4 + v52[11];
  v67 = 0;
  v66 = 0u;
  v65 = 0u;
  swift_bridgeObjectRetain(v51);
  sub_10000F768((uint64_t)&v68, (uint64_t)&v65);
  v61 = v66;
  *(_OWORD *)v60 = v65;
  *((_OWORD *)v60 + 1) = v61;
  *((_QWORD *)v60 + 4) = v67;
  sub_100010ED0((uint64_t)&v68, &qword_10010C128);
  sub_10001A0AC(v58, (uint64_t)a4 + v52[12], &qword_10010C220);
  *((_BYTE *)a4 + v52[13]) = 1;
  *((_BYTE *)a4 + v52[14]) = 3;
  *(_QWORD *)((char *)a4 + v52[15]) = 4;
  return sub_1000106F0((uint64_t)v12, type metadata accessor for LaunchDashboardAction);
}

uint64_t sub_10008C400@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  void *v40;
  uint64_t v41;
  SEL v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  Swift::String v49;
  Swift::String v50;
  _TtC13GameOverlayUI20GameOverlayUIService *v51;
  SEL v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  uint64_t v59;
  uint64_t result;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t, uint64_t);
  char *v70;
  Swift::String v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  int *v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  _QWORD *v99;
  char *v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  void *v112;
  _OWORD v113[2];
  uint64_t v114;

  *((_QWORD *)&v97 + 1) = a3;
  *(_QWORD *)&v97 = a2;
  v6 = sub_100003304(&qword_10010C220);
  __chkstk_darwin(v6);
  v101 = (char *)&v90 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003304(&qword_10010EC08);
  __chkstk_darwin(v8);
  v94 = (uint64_t)&v90 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = type metadata accessor for MediaArtwork(0);
  v92 = *(_QWORD *)(v93 - 8);
  __chkstk_darwin(v93);
  v91 = (char *)&v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100003304(&qword_10010CA70);
  __chkstk_darwin(v11);
  v106 = (uint64_t)&v90 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v105 = (uint64_t)&v90 - v14;
  __chkstk_darwin(v15);
  v100 = (char *)&v90 - v16;
  v17 = type metadata accessor for AccessPointIconType(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v99 = (uint64_t *)((char *)&v90 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = sub_100003304(&qword_10010ECC8);
  __chkstk_darwin(v20);
  v22 = (char *)&v90 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v23);
  v25 = (char *)&v90 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_100003304(&qword_1001101D8);
  __chkstk_darwin(v26);
  v96 = (uint64_t)&v90 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v30 = (char *)&v90 - v29;
  v32 = __chkstk_darwin(v31);
  v34 = (char *)&v90 - v33;
  v35 = type metadata accessor for Models.ExternalURLAction(0, v32);
  v95 = *(_QWORD *)(v35 - 8);
  v36 = *(void (**)(char *, uint64_t, uint64_t))(v95 + 56);
  v103 = v34;
  v102 = v35;
  v36(v34, 1, 1);
  v37 = type metadata accessor for AccessPointRequiredData(0);
  v104 = v37;
  v38 = *(int *)(v37 + 64);
  v98 = a1;
  v39 = (uint64_t *)(a1 + v38);
  v40 = (void *)v39[1];
  if (v40)
  {
    v41 = *v39;
    static ActionMetrics.notInstrumented.getter(v37);
    *(_QWORD *)&v113[0] = 0;
    *((_QWORD *)&v113[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(42);
    swift_bridgeObjectRelease(*((_TtC13GameOverlayUI20GameOverlayUIService **)&v113[0] + 1), v42, v43, v44, v45, v46, v47, v48);
    *(_QWORD *)&v113[0] = 0xD000000000000023;
    *((_QWORD *)&v113[0] + 1) = 0x80000001000D0C50;
    v49._countAndFlagsBits = v41;
    v49._object = v40;
    String.append(_:)(v49);
    v50._countAndFlagsBits = 0x383D746D3FLL;
    v50._object = (void *)0xE500000000000000;
    String.append(_:)(v50);
    v51 = (_TtC13GameOverlayUI20GameOverlayUIService *)*((_QWORD *)&v113[0] + 1);
    URL.init(string:)(*(_QWORD *)&v113[0], *((_QWORD *)&v113[0] + 1));
    swift_bridgeObjectRelease(v51, v52, v53, v54, v55, v56, v57, v58);
    v59 = type metadata accessor for URL(0);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 48))(v22, 1, v59);
    if ((_DWORD)result == 1)
    {
      __break(1u);
      return result;
    }
    Models.ExternalURLAction.init(actionMetrics:url:isSensitive:)(v25, v22, 1);
    v61 = (uint64_t)v103;
    sub_100010ED0((uint64_t)v103, &qword_1001101D8);
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v36)(v30, 0, 1, v102);
    sub_10001A0AC((uint64_t)v30, v61, &qword_1001101D8);
  }
  v62 = (uint64_t)v99;
  *v99 = 0x656461637261;
  *(_QWORD *)(v62 + 8) = 0xE600000000000000;
  *(_QWORD *)(v62 + 16) = 0xBFF0000000000000;
  swift_storeEnumTagMultiPayload(v62, v17, 3);
  v63 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
  v64 = (uint64_t)v100;
  v63(v100, 1, 1, v17);
  v65 = v98;
  v66 = v94;
  sub_100010CBC(v98 + *(int *)(v104 + 68), v94, &qword_10010EC08);
  v67 = v92;
  v68 = v93;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v92 + 48))(v66, 1, v93) == 1)
  {
    sub_100010ED0(v66, &qword_10010EC08);
  }
  else
  {
    sub_100010ED0(v64, &qword_10010CA70);
    v69 = *(void (**)(char *, uint64_t, uint64_t))(v67 + 32);
    v70 = v91;
    v69(v91, v66, v68);
    v69((char *)v64, (uint64_t)v70, v68);
    swift_storeEnumTagMultiPayload(v64, v17, 2);
    v63((char *)v64, 0, 1, v17);
  }
  v113[0] = v97;
  swift_bridgeObjectRetain(*((_QWORD *)&v97 + 1));
  v71._countAndFlagsBits = 0x2D6564616372612DLL;
  v71._object = (void *)0xEC00000064726163;
  String.append(_:)(v71);
  v110 = v113[0];
  AnyHashable.init<A>(_:)(v113, &v110, &type metadata for String, &protocol witness table for String);
  if (qword_10010BB28 != -1)
    swift_once(&qword_10010BB28, sub_100072E24);
  v72 = qword_100123340;
  *((_QWORD *)&v97 + 1) = qword_100123338;
  v73 = v105;
  v74 = (uint64_t *)(v65 + *(int *)(v104 + 72));
  v76 = *v74;
  v75 = v74[1];
  sub_100007878(v62, v105, type metadata accessor for AccessPointIconType);
  v63((char *)v73, 0, 1, v17);
  sub_100010CBC(v64, v106, &qword_10010CA70);
  v77 = (uint64_t)v103;
  v78 = v96;
  sub_100010CBC((uint64_t)v103, v96, &qword_1001101D8);
  v79 = v95;
  v80 = v102;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v95 + 48))(v78, 1, v102) == 1)
  {
    swift_bridgeObjectRetain(v75);
    swift_bridgeObjectRetain(v72);
    sub_100010ED0(v78, &qword_1001101D8);
    v110 = 0u;
    v111 = 0u;
    v112 = 0;
  }
  else
  {
    *((_QWORD *)&v111 + 1) = v80;
    v112 = &protocol witness table for Models.ExternalURLAction;
    v81 = sub_1000052B0(&v110);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v79 + 32))(v81, v78, v80);
    swift_bridgeObjectRetain(v75);
    swift_bridgeObjectRetain(v72);
  }
  v82 = type metadata accessor for ImpressionMetrics(0);
  v83 = (uint64_t)v101;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 56))(v101, 1, 1, v82);
  v84 = v113[1];
  *(_OWORD *)a4 = v113[0];
  *(_OWORD *)(a4 + 16) = v84;
  v85 = *((_QWORD *)&v97 + 1);
  *(_QWORD *)(a4 + 32) = v114;
  *(_QWORD *)(a4 + 40) = v85;
  *(_QWORD *)(a4 + 48) = v72;
  *(_QWORD *)(a4 + 56) = v76;
  *(_QWORD *)(a4 + 64) = v75;
  v86 = (int *)type metadata accessor for AccessPointHighlight(0);
  sub_10001A0AC(v105, a4 + v86[7], &qword_10010CA70);
  sub_10001A0AC(v106, a4 + v86[8], &qword_10010CA70);
  v87 = a4 + v86[9];
  *(_QWORD *)v87 = 0x4000000000000000;
  *(_BYTE *)(v87 + 8) = 0;
  *(_BYTE *)(a4 + v86[10]) = 2;
  v88 = a4 + v86[11];
  v109 = 0;
  v107 = 0u;
  v108 = 0u;
  sub_10000F768((uint64_t)&v110, (uint64_t)&v107);
  v89 = v108;
  *(_OWORD *)v88 = v107;
  *(_OWORD *)(v88 + 16) = v89;
  *(_QWORD *)(v88 + 32) = v109;
  sub_100010ED0((uint64_t)&v110, &qword_10010C128);
  sub_10001A0AC(v83, a4 + v86[12], &qword_10010C220);
  *(_BYTE *)(a4 + v86[13]) = 1;
  *(_BYTE *)(a4 + v86[14]) = 3;
  *(_QWORD *)(a4 + v86[15]) = 5;
  sub_100010ED0(v64, &qword_10010CA70);
  sub_1000106F0(v62, type metadata accessor for AccessPointIconType);
  return sub_100010ED0(v77, &qword_1001101D8);
}

uint64_t sub_10008CC2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _QWORD *v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  uint64_t v29;
  _TtC13GameOverlayUI20GameOverlayUIService *v30;
  SEL v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  Swift::String v38;
  int *v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v49;
  char *v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  int *v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;

  v49 = a2;
  v7 = sub_100003304(&qword_10010C220);
  __chkstk_darwin(v7);
  v50 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AccessPointIconType(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (uint64_t *)((char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = (int *)type metadata accessor for LaunchDashboardAction(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for AccessPointRequiredData(0);
  sub_100007878(a1 + *(int *)(v16 + 24), (uint64_t)v15, type metadata accessor for Game);
  v17 = *(_OWORD *)(a1 + 120);
  v64 = *(_OWORD *)(a1 + 104);
  v65 = v17;
  v66 = *(_OWORD *)(a1 + 136);
  v67 = *(_QWORD *)(a1 + 152);
  v18 = *(_OWORD *)(a1 + 56);
  v60 = *(_OWORD *)(a1 + 40);
  v61 = v18;
  v19 = *(_OWORD *)(a1 + 88);
  v62 = *(_OWORD *)(a1 + 72);
  v63 = v19;
  v20 = *(_OWORD *)(a1 + 24);
  v58 = *(_OWORD *)(a1 + 8);
  v59 = v20;
  v21 = sub_100019FF0(&v58);
  static ActionMetrics.notInstrumented.getter(v21);
  v22 = &v15[v13[5]];
  v23 = v63;
  *((_OWORD *)v22 + 4) = v62;
  *((_OWORD *)v22 + 5) = v23;
  v24 = v61;
  *((_OWORD *)v22 + 2) = v60;
  *((_OWORD *)v22 + 3) = v24;
  *((_QWORD *)v22 + 18) = v67;
  v25 = v66;
  v26 = v64;
  *((_OWORD *)v22 + 7) = v65;
  *((_OWORD *)v22 + 8) = v25;
  *((_OWORD *)v22 + 6) = v26;
  v27 = v59;
  *(_OWORD *)v22 = v58;
  *((_OWORD *)v22 + 1) = v27;
  v28 = &v15[v13[6]];
  *(_QWORD *)v28 = 0;
  *((_QWORD *)v28 + 1) = 0;
  v28[16] = 3;
  v15[v13[8]] = 9;
  v15[v13[9]] = 0;
  if (*(_BYTE *)(a1 + *(int *)(v16 + 28)) == 1)
  {
    v29 = *((_QWORD *)&v59 + 1);
    *v12 = v59;
    v12[1] = v29;
    swift_storeEnumTagMultiPayload(v12, v9, 1);
    swift_bridgeObjectRetain(v29);
  }
  else
  {
    *v12 = 0x65766E6F63696367;
    v12[1] = 0xE900000000000063;
    v12[2] = 0x4041000000000000;
    swift_storeEnumTagMultiPayload(v12, v9, 3);
  }
  v54 = 0;
  v55 = 0xE000000000000000;
  _StringGuts.grow(_:)(21);
  v30 = (_TtC13GameOverlayUI20GameOverlayUIService *)v55;
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRelease(v30, v31, v32, v33, v34, v35, v36, v37);
  v54 = v49;
  v55 = a3;
  v38._object = (void *)0x80000001000D0C80;
  v38._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v38);
  AnyHashable.init<A>(_:)((_QWORD *)a4, &v54, &type metadata for String, &protocol witness table for String);
  v39 = (int *)type metadata accessor for AccessPointHighlight(0);
  v40 = a4 + v39[7];
  sub_100007878((uint64_t)v12, v40, type metadata accessor for AccessPointIconType);
  v41 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
  v41(v40, 0, 1, v9);
  v41(a4 + v39[8], 1, 1, v9);
  v56 = v13;
  v57 = sub_1000035B4(&qword_10010CA88, type metadata accessor for LaunchDashboardAction, (uint64_t)&protocol conformance descriptor for LaunchDashboardAction);
  v42 = sub_1000052B0(&v54);
  sub_100007878((uint64_t)v15, (uint64_t)v42, type metadata accessor for LaunchDashboardAction);
  v43 = type metadata accessor for ImpressionMetrics(0);
  v44 = (uint64_t)v50;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v50, 1, 1, v43);
  *(_OWORD *)(a4 + 56) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  v45 = a4 + v39[9];
  *(_QWORD *)v45 = 0;
  *(_BYTE *)(v45 + 8) = 0;
  *(_BYTE *)(a4 + v39[10]) = 2;
  v46 = a4 + v39[11];
  v53 = 0;
  v52 = 0u;
  v51 = 0u;
  sub_10000F768((uint64_t)&v54, (uint64_t)&v51);
  v47 = v52;
  *(_OWORD *)v46 = v51;
  *(_OWORD *)(v46 + 16) = v47;
  *(_QWORD *)(v46 + 32) = v53;
  sub_100010ED0((uint64_t)&v54, &qword_10010C128);
  sub_10001A0AC(v44, a4 + v39[12], &qword_10010C220);
  *(_BYTE *)(a4 + v39[13]) = 0;
  *(_BYTE *)(a4 + v39[14]) = 0;
  *(_QWORD *)(a4 + v39[15]) = 1;
  sub_1000106F0((uint64_t)v12, type metadata accessor for AccessPointIconType);
  return sub_1000106F0((uint64_t)v15, type metadata accessor for LaunchDashboardAction);
}

uint64_t sub_10008D0B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v9 = *v3;
  v8 = v3[1];
  v10 = (_QWORD *)swift_task_alloc(dword_1001101D4);
  *(_QWORD *)(v4 + 16) = v10;
  *v10 = v4;
  v10[1] = sub_1000252CC;
  return sub_100089704(a1, a2, a3, v9, v8);
}

uint64_t sub_10008D134(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10008D150(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_10008D150(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100003304(&qword_1001101E0);
    v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = &_swiftEmptyArrayStorage;
  }
  v13 = (unint64_t)(v11 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 40 * v8)
      memmove(v11 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v14 >= v13 + 40 * v8 || v13 >= v14 + 40 * v8)
  {
    sub_100003304(&qword_10010D600);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t AccessPointPageView.init(what:anchor:dashboardLaunchContext:objectGraph:flowAuthority:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[3];

  v12 = (int *)type metadata accessor for AccessPointPageView(0);
  v13 = (_QWORD *)(a6 + v12[9]);
  v14 = sub_100003304(&qword_10010BBF0);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  v19[0] = LRUMultiCache.init(keyLimit:valueLimit:)(1000, 3);
  State.init(wrappedValue:)(v19, v14);
  v15 = v19[2];
  *v13 = v19[1];
  v13[1] = v15;
  sub_10005A194(a1, a6);
  v16 = a6 + v12[5];
  v17 = type metadata accessor for AccessPointAnchoring(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v16, a2, v17);
  *(_QWORD *)(a6 + v12[6]) = a3;
  *(_QWORD *)(a6 + v12[7]) = a4;
  return sub_10008D464(a5, a6 + v12[8]);
}

uint64_t type metadata accessor for AccessPointPageView(uint64_t a1)
{
  uint64_t result;

  result = qword_1001102C8;
  if (!qword_1001102C8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AccessPointPageView);
  return result;
}

uint64_t property wrapper backing initializer of AccessPointPageView.imageCache(uint64_t *a1)
{
  uint64_t v1;
  _QWORD v3[2];

  v1 = *a1;
  v3[0] = a1;
  State.init(wrappedValue:)(v3, v1);
  return v3[1];
}

uint64_t sub_10008D464(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003304(&qword_10010CC18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t AccessPointPageView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  __n128 v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[3];
  uint64_t v46;
  uint64_t v47;

  v2 = v1;
  v44 = a1;
  v43 = sub_100003304(&qword_1001101E8);
  v3 = __chkstk_darwin(v43);
  v41 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = type metadata accessor for IntentViewConfiguration(0, v3);
  v40 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v40 - v8;
  v10 = type metadata accessor for AccessPointPageView(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v40 - v15;
  sub_100024C64(v2, (uint64_t)v45);
  sub_100007878(v2, (uint64_t)v16, type metadata accessor for AccessPointPageView);
  v17 = *(unsigned __int8 *)(v11 + 80);
  v18 = (v17 + 16) & ~v17;
  v19 = v18 + v12;
  v20 = v17 | 7;
  v21 = swift_allocObject(&unk_100100920, v18 + v12, v17 | 7);
  sub_100010F0C((uint64_t)v16, v21 + v18, type metadata accessor for AccessPointPageView);
  sub_100007878(v2, (uint64_t)v13, type metadata accessor for AccessPointPageView);
  v22 = swift_allocObject(&unk_100100948, v19, v20);
  v23 = sub_100010F0C((uint64_t)v13, v22 + v18, type metadata accessor for AccessPointPageView);
  v24 = static Transaction._loading.getter(v23);
  IntentViewConfiguration.init()();
  v25 = v46;
  v26 = v47;
  v27 = sub_100003C28(v45, v46);
  v28 = __chkstk_darwin(v27);
  v30 = (char *)&v40 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v31 + 16))(v30, v28);
  v32 = type metadata accessor for AccessPointContainer(0);
  v33 = v41;
  AnyIntentModel.init<A>(_:)(v30, v32, v25, v26);
  v34 = v40;
  v35 = v42;
  (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v6, v9, v42);
  v36 = sub_100003304(&qword_1001101F0);
  v37 = sub_100011054(&qword_1001101F8, &qword_1001101E8, (uint64_t)&protocol conformance descriptor for AnyIntentModel<A>);
  v38 = sub_10008E3F8();
  IntentView.init(what:transaction:configuration:working:failed:content:)(v33, v24, v6, sub_10008D7D4, 0, sub_10008D7FC, v21, sub_10008E3AC, v22, v43, v36, &type metadata for Color, &type metadata for EmptyView, v37, v38, &protocol witness table for Color, &protocol witness table for EmptyView);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v9, v35);
  return sub_100004624(v45);
}

uint64_t sub_10008D7D4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static Color.clear.getter();
  *a1 = result;
  return result;
}

void sub_10008D7FC(uint64_t a1)
{
  type metadata accessor for AccessPointPageView(0);
  sub_10008D83C(a1);
}

void sub_10008D83C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *oslog;
  uint64_t v10;
  uint64_t v11;

  if (qword_10010BAA0 != -1)
    swift_once(&qword_10010BAA0, sub_100004DCC);
  v2 = type metadata accessor for Logger(0);
  sub_100004E8C(v2, (uint64_t)qword_1001232D8);
  swift_errorRetain(a1);
  v3 = swift_errorRetain(a1);
  oslog = Logger.logObject.getter(v3);
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v5 = 138412290;
    swift_errorRetain(a1);
    v7 = _swift_stdlib_bridgeErrorToNSError(a1);
    v10 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11);
    *v6 = v7;
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, oslog, v4, "Jet View with Startup coordinator failed with error: %@", v5, 0xCu);
    v8 = sub_100003304(&qword_10010EB00);
    swift_arrayDestroy(v6, 1, v8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);

  }
}

uint64_t sub_10008D9FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _TtC13GameOverlayUI20GameOverlayUIService *v54;
  char *v55;
  SEL v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  os_log_type_t v79;
  uint64_t v80;
  uint8_t *v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t OpaqueTypeConformance2;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;

  v114 = a3;
  v5 = sub_100003304(&qword_100110320);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v93 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AutomationSemantics(0, v6);
  v110 = *(_QWORD *)(v9 - 8);
  v111 = v9;
  __chkstk_darwin(v9);
  v109 = (char *)&v93 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100003304(&qword_100110218);
  v104 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v103 = (char *)&v93 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = sub_100003304(&qword_100110228);
  v100 = *(_QWORD *)(v113 - 8);
  __chkstk_darwin(v113);
  v14 = (char *)&v93 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = sub_100003304(&qword_100110220);
  __chkstk_darwin(v112);
  v16 = (char *)&v93 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100003304(&qword_100110210);
  v101 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v118 = (char *)&v93 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100003304(&qword_100110208);
  v106 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v105 = (char *)&v93 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100003304(&qword_100110328);
  v108 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v102 = (char *)&v93 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v107 = (char *)&v93 - v24;
  v25 = *(_QWORD *)(*(_QWORD *)(a1 + *(int *)(type metadata accessor for AccessPointContainer(0) + 28)) + 16);
  v116 = v19;
  v117 = v11;
  v115 = v17;
  if (v25)
  {
    v96 = a1;
    sub_10008E720(a1, a2, (uint64_t)v16);
    v26 = *(int *)(type metadata accessor for AccessPointPageView(0) + 36);
    v99 = v8;
    v27 = (uint64_t *)(a2 + v26);
    v28 = *(_QWORD *)(a2 + v26 + 8);
    *(_QWORD *)&v121 = *(_QWORD *)(a2 + v26);
    *((_QWORD *)&v121 + 1) = v28;
    sub_100003304(&qword_100110330);
    State.wrappedValue.getter(&v120);
    v29 = v120;
    v30 = sub_100003304(&qword_10010BBF0);
    v97 = v21;
    v31 = v30;
    v32 = sub_10008E6CC();
    v98 = v5;
    v33 = v32;
    v34 = sub_100011054(&qword_100110260, &qword_10010BBF0, (uint64_t)&protocol conformance descriptor for LRUMultiCache<A, B>);
    MediaArtworkProtocol.cache<A>(_:allowStandaloneFetches:)(v29, 1, &type metadata for PlayerMonogramProtocol, v31, v33, v34);
    swift_release(v29);
    v35 = sub_10008E5CC();
    v95 = v35;
    *(_QWORD *)&v121 = &type metadata for PlayerMonogramProtocol;
    *((_QWORD *)&v121 + 1) = v31;
    *(_QWORD *)&v122 = v33;
    *((_QWORD *)&v122 + 1) = v34;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v121, &opaque type descriptor for <<opaque return type of MediaArtworkProtocol.cache<A>(_:allowStandaloneFetches:)>>, 1);
    v37 = v112;
    v36 = v113;
    View.mediaArtworkProtocol<A>(_:)(v14, v112, v113, v35, OpaqueTypeConformance2);
    (*(void (**)(char *, uint64_t))(v100 + 8))(v14, v36);
    sub_100010ED0((uint64_t)v16, &qword_100110220);
    v38 = type metadata accessor for MediaArtwork.URLImageProtocol(0);
    v39 = MediaArtwork.URLImageProtocol.__allocating_init()();
    v40 = *v27;
    v41 = v27[1];
    v120 = v39;
    *(_QWORD *)&v121 = v40;
    *((_QWORD *)&v121 + 1) = v41;
    State.wrappedValue.getter(&v119);
    v42 = v119;
    v43 = sub_1000035B4(&qword_100110268, (uint64_t (*)(uint64_t))&type metadata accessor for MediaArtwork.URLImageProtocol, (uint64_t)&protocol conformance descriptor for MediaArtwork.URLImageProtocol);
    v44 = v103;
    MediaArtworkProtocol.cache<A>(_:allowStandaloneFetches:)(v42, 1, v38, v31, v43, v34);
    swift_release(v39);
    swift_release(v42);
    *(_QWORD *)&v121 = v37;
    *((_QWORD *)&v121 + 1) = v36;
    *(_QWORD *)&v122 = v95;
    *((_QWORD *)&v122 + 1) = OpaqueTypeConformance2;
    v45 = swift_getOpaqueTypeConformance2(&v121, &opaque type descriptor for <<opaque return type of View.mediaArtworkProtocol<A>(_:)>>, 1);
    *(_QWORD *)&v121 = v38;
    *((_QWORD *)&v121 + 1) = v31;
    *(_QWORD *)&v122 = v43;
    *((_QWORD *)&v122 + 1) = v34;
    v46 = swift_getOpaqueTypeConformance2(&v121, &opaque type descriptor for <<opaque return type of MediaArtworkProtocol.cache<A>(_:allowStandaloneFetches:)>>, 1);
    v47 = v105;
    v48 = v115;
    v50 = v117;
    v49 = v118;
    View.mediaArtworkProtocol<A>(_:)(v44, v115, v117, v45, v46);
    v51 = v50;
    (*(void (**)(char *, uint64_t))(v104 + 8))(v44, v50);
    (*(void (**)(char *, uint64_t))(v101 + 8))(v49, v48);
    *(_QWORD *)&v121 = 0;
    *((_QWORD *)&v121 + 1) = 0xE000000000000000;
    v52 = type metadata accessor for PageID(0);
    _print_unlocked<A, B>(_:_:)(v96, &v121, v52, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v54 = (_TtC13GameOverlayUI20GameOverlayUIService *)*((_QWORD *)&v121 + 1);
    v53 = v121;
    v121 = 0u;
    v122 = 0u;
    v55 = v109;
    static AutomationSemantics.page(name:id:)(v53, v54, &v121);
    swift_bridgeObjectRelease(v54, v56, v57, v58, v59, v60, v61, v62);
    sub_100010ED0((uint64_t)&v121, &qword_10010EB30);
    *(_QWORD *)&v121 = v48;
    *((_QWORD *)&v121 + 1) = v51;
    *(_QWORD *)&v122 = v45;
    *((_QWORD *)&v122 + 1) = v46;
    v63 = swift_getOpaqueTypeConformance2(&v121, &opaque type descriptor for <<opaque return type of View.mediaArtworkProtocol<A>(_:)>>, 1);
    v64 = v102;
    v65 = v116;
    View.automationSemantics(_:)(v55, v116, v63);
    (*(void (**)(char *, uint64_t))(v110 + 8))(v55, v111);
    v66 = v47;
    v67 = v65;
    (*(void (**)(char *, uint64_t))(v106 + 8))(v66, v65);
    v69 = v107;
    v68 = v108;
    v70 = v97;
    (*(void (**)(char *, char *, uint64_t))(v108 + 32))(v107, v64, v97);
    v71 = v99;
    (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v99, v69, v70);
    swift_storeEnumTagMultiPayload(v71, v98, 0);
    *(_QWORD *)&v121 = v67;
    *((_QWORD *)&v121 + 1) = v63;
    v72 = swift_getOpaqueTypeConformance2(&v121, &opaque type descriptor for <<opaque return type of View.automationSemantics(_:)>>, 1);
    _ConditionalContent<>.init(storage:)(v71, v70, &type metadata for EmptyView, v72, &protocol witness table for EmptyView);
    return (*(uint64_t (**)(char *, uint64_t))(v68 + 8))(v69, v70);
  }
  else
  {
    v74 = v112;
    v75 = v113;
    if (qword_10010BAA0 != -1)
      swift_once(&qword_10010BAA0, sub_100004DCC);
    v76 = type metadata accessor for Logger(0);
    v77 = sub_100004E8C(v76, (uint64_t)qword_1001232D8);
    v78 = Logger.logObject.getter(v77);
    v79 = static os_log_type_t.error.getter();
    v80 = v74;
    if (os_log_type_enabled(v78, v79))
    {
      v81 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v81 = 0;
      _os_log_impl((void *)&_mh_execute_header, v78, v79, "AccessPointContainer did not contain any items to show", v81, 2u);
      swift_slowDealloc(v81, -1, -1);
    }

    swift_storeEnumTagMultiPayload(v8, v5, 1);
    v82 = sub_10008E5CC();
    v83 = sub_100006E54(&qword_10010BBF0);
    v84 = sub_10008E6CC();
    v85 = sub_100011054(&qword_100110260, &qword_10010BBF0, (uint64_t)&protocol conformance descriptor for LRUMultiCache<A, B>);
    *(_QWORD *)&v121 = &type metadata for PlayerMonogramProtocol;
    *((_QWORD *)&v121 + 1) = v83;
    *(_QWORD *)&v122 = v84;
    *((_QWORD *)&v122 + 1) = v85;
    v86 = swift_getOpaqueTypeConformance2(&v121, &opaque type descriptor for <<opaque return type of MediaArtworkProtocol.cache<A>(_:allowStandaloneFetches:)>>, 1);
    *(_QWORD *)&v121 = v80;
    *((_QWORD *)&v121 + 1) = v75;
    *(_QWORD *)&v122 = v82;
    *((_QWORD *)&v122 + 1) = v86;
    v87 = swift_getOpaqueTypeConformance2(&v121, &opaque type descriptor for <<opaque return type of View.mediaArtworkProtocol<A>(_:)>>, 1);
    v88 = type metadata accessor for MediaArtwork.URLImageProtocol(255);
    v89 = sub_1000035B4(&qword_100110268, (uint64_t (*)(uint64_t))&type metadata accessor for MediaArtwork.URLImageProtocol, (uint64_t)&protocol conformance descriptor for MediaArtwork.URLImageProtocol);
    *(_QWORD *)&v121 = v88;
    *((_QWORD *)&v121 + 1) = v83;
    *(_QWORD *)&v122 = v89;
    *((_QWORD *)&v122 + 1) = v85;
    v90 = swift_getOpaqueTypeConformance2(&v121, &opaque type descriptor for <<opaque return type of MediaArtworkProtocol.cache<A>(_:allowStandaloneFetches:)>>, 1);
    *(_QWORD *)&v121 = v115;
    *((_QWORD *)&v121 + 1) = v117;
    *(_QWORD *)&v122 = v87;
    *((_QWORD *)&v122 + 1) = v90;
    v91 = swift_getOpaqueTypeConformance2(&v121, &opaque type descriptor for <<opaque return type of View.mediaArtworkProtocol<A>(_:)>>, 1);
    *(_QWORD *)&v121 = v116;
    *((_QWORD *)&v121 + 1) = v91;
    v92 = swift_getOpaqueTypeConformance2(&v121, &opaque type descriptor for <<opaque return type of View.automationSemantics(_:)>>, 1);
    return _ConditionalContent<>.init(storage:)(v8, v21, &type metadata for EmptyView, v92, &protocol witness table for EmptyView);
  }
}

uint64_t sub_10008E2A4()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;

  v1 = (int *)type metadata accessor for AccessPointPageView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  sub_100004624((_QWORD *)(v0 + v4));
  v8 = v7 + v1[5];
  v9 = type metadata accessor for AccessPointAnchoring(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_release(*(_QWORD *)(v7 + v1[6]));
  swift_release(*(_QWORD *)(v7 + v1[7]));
  v10 = (_QWORD *)(v7 + v1[8]);
  swift_release(*v10);
  swift_release(v10[1]);
  v11 = (char *)v10 + *(int *)(sub_100003304(&qword_10010CC18) + 32);
  v12 = sub_100003304(&qword_10010CC20);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = (_QWORD *)(v7 + v1[9]);
  swift_release(*v13);
  swift_release(v13[1]);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10008E3AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AccessPointPageView(0) - 8) + 80);
  return sub_10008D9FC(a1, v2 + ((v5 + 16) & ~v5), a2);
}

unint64_t sub_10008E3F8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t OpaqueTypeConformance2;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  ValueMetadata *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;

  result = qword_100110200;
  if (!qword_100110200)
  {
    v1 = sub_100006E54(&qword_1001101F0);
    v2 = sub_100006E54(&qword_100110208);
    v3 = sub_100006E54(&qword_100110210);
    v4 = sub_100006E54(&qword_100110218);
    v5 = sub_100006E54(&qword_100110220);
    v6 = sub_100006E54(&qword_100110228);
    v7 = sub_10008E5CC();
    v8 = sub_100006E54(&qword_10010BBF0);
    v9 = sub_10008E6CC();
    v10 = sub_100011054(&qword_100110260, &qword_10010BBF0, (uint64_t)&protocol conformance descriptor for LRUMultiCache<A, B>);
    v17 = &type metadata for PlayerMonogramProtocol;
    v18 = v8;
    v19 = v9;
    v20 = v10;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v17, &opaque type descriptor for <<opaque return type of MediaArtworkProtocol.cache<A>(_:allowStandaloneFetches:)>>, 1);
    v17 = (ValueMetadata *)v5;
    v18 = v6;
    v19 = v7;
    v20 = OpaqueTypeConformance2;
    v12 = swift_getOpaqueTypeConformance2(&v17, &opaque type descriptor for <<opaque return type of View.mediaArtworkProtocol<A>(_:)>>, 1);
    v13 = type metadata accessor for MediaArtwork.URLImageProtocol(255);
    v14 = sub_1000035B4(&qword_100110268, (uint64_t (*)(uint64_t))&type metadata accessor for MediaArtwork.URLImageProtocol, (uint64_t)&protocol conformance descriptor for MediaArtwork.URLImageProtocol);
    v17 = (ValueMetadata *)v13;
    v18 = v8;
    v19 = v14;
    v20 = v10;
    v15 = swift_getOpaqueTypeConformance2(&v17, &opaque type descriptor for <<opaque return type of MediaArtworkProtocol.cache<A>(_:allowStandaloneFetches:)>>, 1);
    v17 = (ValueMetadata *)v3;
    v18 = v4;
    v19 = v12;
    v20 = v15;
    v16 = swift_getOpaqueTypeConformance2(&v17, &opaque type descriptor for <<opaque return type of View.mediaArtworkProtocol<A>(_:)>>, 1);
    v17 = (ValueMetadata *)v2;
    v18 = v16;
    swift_getOpaqueTypeConformance2(&v17, &opaque type descriptor for <<opaque return type of View.automationSemantics(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100110200);
  }
  return result;
}

unint64_t sub_10008E5CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100110230;
  if (!qword_100110230)
  {
    v1 = sub_100006E54(&qword_100110220);
    sub_10008E630();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100110230);
  }
  return result;
}

unint64_t sub_10008E630()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100110238;
  if (!qword_100110238)
  {
    v1 = sub_100006E54(&qword_100110240);
    sub_1000035B4(&qword_100110248, type metadata accessor for AccessPointShaderTransitionView, (uint64_t)&unk_1000C8A48);
    sub_1000035B4(&qword_100110250, type metadata accessor for AccessPointAnimationView, (uint64_t)&unk_1000C97F8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100110238);
  }
  return result;
}

unint64_t sub_10008E6CC()
{
  unint64_t result;

  result = qword_100110258;
  if (!qword_100110258)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PlayerMonogramProtocol, &type metadata for PlayerMonogramProtocol);
    atomic_store(result, (unint64_t *)&qword_100110258);
  }
  return result;
}

uint64_t sub_10008E710(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of AccessPointPageView.body>>, 1);
}

id sub_10008E720@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  id result;
  void *v36;
  unsigned int v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  void (*v43)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  void (*v51)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE v88[48];

  v87 = a2;
  v82 = a1;
  v79 = a3;
  v86 = type metadata accessor for AccessPointAnimationView(0);
  __chkstk_darwin(v86);
  v77 = (uint64_t)&v74 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v76 = (char *)&v74 - v5;
  v81 = sub_100003304(&qword_100110338);
  __chkstk_darwin(v81);
  v78 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003304(&qword_10010CC18);
  __chkstk_darwin(v7);
  v80 = (uint64_t)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003304(&qword_100110340);
  __chkstk_darwin(v9);
  v11 = (char *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v74 - v13;
  v15 = sub_100003304(&qword_10010CA78);
  __chkstk_darwin(v15);
  v75 = (uint64_t)&v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v74 = (uint64_t)&v74 - v18;
  v19 = type metadata accessor for AccessPointAnchoring(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v84 = (uint64_t)&v74 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v83 = (uint64_t)&v74 - v23;
  v24 = type metadata accessor for AccessPointContainer(0);
  __chkstk_darwin(v24);
  v26 = (char *)&v74 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v29 = (char *)&v74 - v28;
  v85 = type metadata accessor for AccessPointShaderTransitionView(0);
  __chkstk_darwin(v85);
  v31 = (char *)&v74 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v34 = (char *)&v74 - v33;
  result = objc_msgSend((id)objc_opt_self(GKPreferences), "shared");
  if (result)
  {
    v36 = result;
    v37 = objc_msgSend(result, "accessPointCustomTransition");

    if (v37)
    {
      sub_100007878(v82, (uint64_t)v29, type metadata accessor for AccessPointContainer);
      v38 = (int *)type metadata accessor for AccessPointPageView(0);
      v39 = v87;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v83, v87 + v38[5], v19);
      sub_100024C64(v39, (uint64_t)v88);
      v40 = sub_100003304(&qword_100110348);
      v41 = type metadata accessor for AccessPointPageIntent(0);
      v42 = swift_dynamicCast(v14, v88, v40, v41, 6);
      v43 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56);
      if ((v42 & 1) != 0)
      {
        v43(v14, 0, 1, v41);
        v44 = v74;
        sub_100007878((uint64_t)&v14[*(int *)(v41 + 32)], v74, type metadata accessor for Game);
        sub_1000106F0((uint64_t)v14, type metadata accessor for AccessPointPageIntent);
        v45 = type metadata accessor for Game(0);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v44, 0, 1, v45);
      }
      else
      {
        v43(v14, 1, 1, v41);
        sub_100010ED0((uint64_t)v14, &qword_100110340);
        v54 = type metadata accessor for Game(0);
        v44 = v74;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v74, 1, 1, v54);
      }
      v55 = (uint64_t)v78;
      v56 = v80;
      v57 = *(_QWORD *)(v87 + v38[6]);
      v58 = *(_QWORD *)(v87 + v38[7]);
      sub_10008F758(v87 + v38[8], v80);
      swift_retain(v57);
      swift_retain(v58);
      sub_10002A2C8((uint64_t)v29, v83, v44, v57, v58, v56, (uint64_t)v31);
      sub_100010F0C((uint64_t)v31, (uint64_t)v34, type metadata accessor for AccessPointShaderTransitionView);
      sub_100007878((uint64_t)v34, v55, type metadata accessor for AccessPointShaderTransitionView);
      swift_storeEnumTagMultiPayload(v55, v81, 0);
      v59 = sub_1000035B4(&qword_100110248, type metadata accessor for AccessPointShaderTransitionView, (uint64_t)&unk_1000C8A48);
      v60 = sub_1000035B4(&qword_100110250, type metadata accessor for AccessPointAnimationView, (uint64_t)&unk_1000C97F8);
      _ConditionalContent<>.init(storage:)(v55, v85, v86, v59, v60);
      v61 = (uint64_t)v34;
      v62 = type metadata accessor for AccessPointShaderTransitionView;
    }
    else
    {
      sub_100007878(v82, (uint64_t)v26, type metadata accessor for AccessPointContainer);
      v46 = (int *)type metadata accessor for AccessPointPageView(0);
      v47 = v87;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v84, v87 + v46[5], v19);
      sub_100024C64(v47, (uint64_t)v88);
      v48 = sub_100003304(&qword_100110348);
      v49 = type metadata accessor for AccessPointPageIntent(0);
      v50 = swift_dynamicCast(v11, v88, v48, v49, 6);
      v51 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56);
      if ((v50 & 1) != 0)
      {
        v51(v11, 0, 1, v49);
        v52 = v75;
        sub_100007878((uint64_t)&v11[*(int *)(v49 + 32)], v75, type metadata accessor for Game);
        sub_1000106F0((uint64_t)v11, type metadata accessor for AccessPointPageIntent);
        v53 = type metadata accessor for Game(0);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v52, 0, 1, v53);
      }
      else
      {
        v51(v11, 1, 1, v49);
        sub_100010ED0((uint64_t)v11, &qword_100110340);
        v63 = type metadata accessor for Game(0);
        v52 = v75;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(v75, 1, 1, v63);
      }
      v64 = (uint64_t)v78;
      v65 = (uint64_t)v76;
      v66 = *(_QWORD *)(v87 + v46[6]);
      v67 = *(_QWORD *)(v87 + v46[7]);
      v68 = v87 + v46[8];
      v69 = v80;
      v70 = v81;
      sub_10008F758(v68, v80);
      swift_retain(v66);
      swift_retain(v67);
      v71 = v77;
      sub_10003C67C((uint64_t)v26, v84, v52, v66, v67, v69, v77);
      sub_100010F0C(v71, v65, type metadata accessor for AccessPointAnimationView);
      sub_100007878(v65, v64, type metadata accessor for AccessPointAnimationView);
      swift_storeEnumTagMultiPayload(v64, v70, 1);
      v72 = sub_1000035B4(&qword_100110248, type metadata accessor for AccessPointShaderTransitionView, (uint64_t)&unk_1000C8A48);
      v73 = sub_1000035B4(&qword_100110250, type metadata accessor for AccessPointAnimationView, (uint64_t)&unk_1000C97F8);
      _ConditionalContent<>.init(storage:)(v64, v85, v86, v72, v73);
      v61 = v65;
      v62 = type metadata accessor for AccessPointAnimationView;
    }
    return (id)sub_1000106F0(v61, v62);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for AccessPointPageView(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4;
  int v5;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v29 = *a2;
    *(_QWORD *)a1 = *a2;
    v4 = v29 + ((v5 + 16) & ~(unint64_t)v5);
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    v8 = a3[5];
    v9 = v4 + v8;
    v10 = (uint64_t)a2 + v8;
    v11 = type metadata accessor for AccessPointAnchoring(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = a3[7];
    v14 = *(uint64_t *)((char *)a2 + v12);
    *(_QWORD *)(v4 + v12) = v14;
    v15 = *(uint64_t *)((char *)a2 + v13);
    *(_QWORD *)(v4 + v13) = v15;
    v16 = a3[8];
    v17 = (_QWORD *)(v4 + v16);
    v18 = (uint64_t)a2 + v16;
    v19 = *(uint64_t *)((char *)a2 + v16);
    v20 = *(uint64_t *)((char *)a2 + v16 + 8);
    *v17 = v19;
    v17[1] = v20;
    swift_retain(v14);
    swift_retain(v15);
    swift_retain(v19);
    swift_retain(v20);
    v21 = *(int *)(sub_100003304(&qword_10010CC18) + 32);
    v22 = (char *)v17 + v21;
    v23 = v18 + v21;
    v24 = sub_100003304(&qword_10010CC20);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v22, v23, v24);
    v25 = a3[9];
    v26 = (uint64_t *)(v4 + v25);
    v27 = (uint64_t *)((char *)a2 + v25);
    v28 = *v27;
    v29 = v27[1];
    *v26 = *v27;
    v26[1] = v29;
    swift_retain(v28);
  }
  swift_retain(v29);
  return v4;
}

double destroy for AccessPointPageView(_QWORD *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  double result;

  sub_100004624(a1);
  v4 = (char *)a1 + a2[5];
  v5 = type metadata accessor for AccessPointAnchoring(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_release(*(_QWORD *)((char *)a1 + a2[6]));
  swift_release(*(_QWORD *)((char *)a1 + a2[7]));
  v6 = (_QWORD *)((char *)a1 + a2[8]);
  swift_release(*v6);
  swift_release(v6[1]);
  v7 = (char *)v6 + *(int *)(sub_100003304(&qword_10010CC18) + 32);
  v8 = sub_100003304(&qword_10010CC20);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = (_QWORD *)((char *)a1 + a2[9]);
  swift_release(*v9);
  *(_QWORD *)&result = swift_release(v9[1]).n128_u64[0];
  return result;
}

uint64_t initializeWithCopy for AccessPointPageView(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;

  v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for AccessPointAnchoring(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a3[7];
  v13 = *(_QWORD *)(a2 + v11);
  *(_QWORD *)(a1 + v11) = v13;
  v14 = *(_QWORD *)(a2 + v12);
  *(_QWORD *)(a1 + v12) = v14;
  v15 = a3[8];
  v16 = (_QWORD *)(a1 + v15);
  v17 = a2 + v15;
  v18 = *(_QWORD *)(a2 + v15);
  v19 = *(_QWORD *)(a2 + v15 + 8);
  *v16 = v18;
  v16[1] = v19;
  swift_retain(v13);
  swift_retain(v14);
  swift_retain(v18);
  swift_retain(v19);
  v20 = *(int *)(sub_100003304(&qword_10010CC18) + 32);
  v21 = (char *)v16 + v20;
  v22 = v17 + v20;
  v23 = sub_100003304(&qword_10010CC20);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
  v24 = a3[9];
  v25 = (uint64_t *)(a1 + v24);
  v26 = (uint64_t *)(a2 + v24);
  v27 = *v26;
  v28 = v26[1];
  *v25 = *v26;
  v25[1] = v28;
  swift_retain(v27);
  swift_retain(v28);
  return a1;
}

_QWORD *assignWithCopy for AccessPointPageView(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  sub_100012CF4(a1, a2);
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for AccessPointAnchoring(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[6];
  v11 = *(_QWORD *)((char *)a2 + v10);
  v12 = *(_QWORD *)((char *)a1 + v10);
  *(_QWORD *)((char *)a1 + v10) = v11;
  swift_retain(v11);
  swift_release(v12);
  v13 = a3[7];
  v14 = *(_QWORD *)((char *)a2 + v13);
  v15 = *(_QWORD *)((char *)a1 + v13);
  *(_QWORD *)((char *)a1 + v13) = v14;
  swift_retain(v14);
  swift_release(v15);
  v16 = a3[8];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = *(_QWORD *)((char *)a1 + v16);
  v20 = *(_QWORD *)((char *)a2 + v16);
  *(_QWORD *)((char *)a1 + v16) = v20;
  swift_retain(v20);
  swift_release(v19);
  v21 = *((_QWORD *)v18 + 1);
  v22 = *((_QWORD *)v17 + 1);
  *((_QWORD *)v17 + 1) = v21;
  swift_retain(v21);
  swift_release(v22);
  v23 = *(int *)(sub_100003304(&qword_10010CC18) + 32);
  v24 = &v17[v23];
  v25 = &v18[v23];
  v26 = sub_100003304(&qword_10010CC20);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 24))(v24, v25, v26);
  v27 = a3[9];
  v28 = (char *)a1 + v27;
  v29 = (char *)a2 + v27;
  v30 = *(_QWORD *)((char *)a2 + v27);
  v31 = *(_QWORD *)((char *)a1 + v27);
  *(_QWORD *)((char *)a1 + v27) = v30;
  swift_retain(v30);
  swift_release(v31);
  v32 = *((_QWORD *)v28 + 1);
  v33 = *((_QWORD *)v29 + 1);
  *((_QWORD *)v28 + 1) = v33;
  swift_retain(v33);
  swift_release(v32);
  return a1;
}

uint64_t initializeWithTake for AccessPointPageView(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for AccessPointAnchoring(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  v12 = a3[8];
  v13 = (_QWORD *)(a1 + v12);
  v14 = a2 + v12;
  v15 = *(_QWORD *)(a2 + v12 + 8);
  *v13 = *(_QWORD *)(a2 + v12);
  v13[1] = v15;
  v16 = *(int *)(sub_100003304(&qword_10010CC18) + 32);
  v17 = (char *)v13 + v16;
  v18 = v14 + v16;
  v19 = sub_100003304(&qword_10010CC20);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t assignWithTake for AccessPointPageView(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;

  sub_100004624((_QWORD *)a1);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for AccessPointAnchoring(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = *(_QWORD *)(a1 + v11);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  swift_release(v12);
  v13 = a3[7];
  v14 = *(_QWORD *)(a1 + v13);
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);
  swift_release(v14);
  v15 = a3[8];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = *(_QWORD *)(a1 + v15);
  *(_QWORD *)(a1 + v15) = *(_QWORD *)(a2 + v15);
  swift_release(v18);
  v19 = *(_QWORD *)(v16 + 8);
  *(_QWORD *)(v16 + 8) = *(_QWORD *)(v17 + 8);
  swift_release(v19);
  v20 = *(int *)(sub_100003304(&qword_10010CC18) + 32);
  v21 = v16 + v20;
  v22 = v17 + v20;
  v23 = sub_100003304(&qword_10010CC20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 40))(v21, v22, v23);
  v24 = a3[9];
  v25 = a1 + v24;
  v26 = (_QWORD *)(a2 + v24);
  v27 = *(_QWORD *)(a1 + v24);
  *(_QWORD *)(a1 + v24) = *v26;
  swift_release(v27);
  v28 = *(_QWORD *)(v25 + 8);
  *(_QWORD *)(v25 + 8) = v26[1];
  swift_release(v28);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessPointPageView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008F534);
}

uint64_t sub_10008F534(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for AccessPointAnchoring(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = sub_100003304(&qword_10010CC18);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AccessPointPageView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008F5E4);
}

uint64_t sub_10008F5E4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for AccessPointAnchoring(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_100003304(&qword_10010CC18);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_10008F684(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[6];

  v6[0] = "(";
  v2 = type metadata accessor for AccessPointAnchoring(319);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    v6[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    v6[3] = (char *)&value witness table for Builtin.NativeObject + 64;
    sub_10001DDE4(319);
    if (v5 <= 0x3F)
    {
      v6[4] = *(_QWORD *)(v4 - 8) + 64;
      v6[5] = &unk_1000CCC60;
      swift_initStructMetadata(a1, 256, 6, v6, a1 + 16);
    }
  }
}

uint64_t sub_10008F72C()
{
  return sub_100011054(&qword_100110310, &qword_100110318, (uint64_t)&protocol conformance descriptor for IntentView<A, B, C, D>);
}

uint64_t sub_10008F758(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003304(&qword_10010CC18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t *Bag.metricsTopicKey.unsafeMutableAddressor()
{
  if (qword_10010BB78 != -1)
    swift_once(&qword_10010BB78, sub_10008FFB0);
  return &static Bag.metricsTopicKey;
}

unint64_t sub_10008F7E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t result;
  char v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = sub_100003304(&qword_10010BF40);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v24 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v24);
    return (unint64_t)v8;
  }
  sub_100003304((uint64_t *)&unk_100110430);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = (char *)v5 + *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v26 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_100010CBC(v13, (uint64_t)v5, &qword_10010BF40);
    v15 = *v5;
    result = sub_1000AAE50(*v5);
    if ((v17 & 1) != 0)
      break;
    v18 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v8[6] + 8 * result) = v15;
    v19 = v8[7];
    v20 = type metadata accessor for Bag.ValueOverride(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v18, v10, v20);
    v21 = v8[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
      goto LABEL_12;
    v8[2] = v23;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v24 = v26;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10008F978(uint64_t a1)
{
  return sub_10008F990(a1, &qword_1001103F0);
}

unint64_t sub_10008F984(uint64_t a1)
{
  return sub_10008F990(a1, &qword_100110408);
}

unint64_t sub_10008F990(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t result;
  char v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    v5 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100003304(a2);
  v4 = static _DictionaryStorage.allocate(capacity:)(v3);
  v5 = (_QWORD *)v4;
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v5;
  }
  swift_retain(v4);
  v7 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v8 = *(v7 - 2);
    v9 = *(v7 - 1);
    v10 = *v7;
    swift_bridgeObjectRetain(v9);
    swift_unknownObjectRetain(v10, v11);
    result = sub_1000AAE54(v8, v9);
    if ((v13 & 1) != 0)
      break;
    *(_QWORD *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v14 = (uint64_t *)(v5[6] + 16 * result);
    *v14 = v8;
    v14[1] = v9;
    *(_QWORD *)(v5[7] + 8 * result) = v10;
    v15 = v5[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v5[2] = v17;
    v7 += 3;
    if (!--v6)
    {
      swift_release(v5);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10008FAA4(_TtC13GameOverlayUI20GameOverlayUIService *a1, const char *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  Class isa;
  uint64_t v10;
  _QWORD *v11;
  Class v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  _OWORD v23[2];
  uint64_t v24;
  __int128 v25;

  isa = a1[1].super.isa;
  if (!isa)
  {
    v11 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100003304(&qword_1001103F8);
  v10 = static _DictionaryStorage.allocate(capacity:)(isa);
  v11 = (_QWORD *)v10;
  v12 = a1[1].super.isa;
  if (!v12)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1, a2, a3, a4, a5, a6, a7, a8);
    return (unint64_t)v11;
  }
  v13 = v10 + 64;
  v14 = (uint64_t)&a1[2];
  swift_retain(v10);
  while (1)
  {
    sub_100010CBC(v14, (uint64_t)v23, &qword_100110400);
    result = sub_1000AAEB8((uint64_t)v23);
    if ((v16 & 1) != 0)
      break;
    *(_QWORD *)(v13 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v17 = v11[6] + 40 * result;
    v18 = v23[0];
    v19 = v23[1];
    *(_QWORD *)(v17 + 32) = v24;
    *(_OWORD *)v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
    result = (unint64_t)sub_100077B54(&v25, (_OWORD *)(v11[7] + 32 * result));
    v20 = v11[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_11;
    v11[2] = v22;
    v14 += 72;
    v12 = (Class)((char *)v12 - 1);
    if (!v12)
    {
      swift_release(v11);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10008FBE4(_TtC13GameOverlayUI20GameOverlayUIService *a1, const char *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  Class isa;
  uint64_t v10;
  _QWORD *v11;
  Class v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t result;
  char v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;

  isa = a1[1].super.isa;
  if (!isa)
  {
    v11 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100003304(&qword_100110410);
  v10 = static _DictionaryStorage.allocate(capacity:)(isa);
  v11 = (_QWORD *)v10;
  v12 = a1[1].super.isa;
  if (!v12)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1, a2, a3, a4, a5, a6, a7, a8);
    return (unint64_t)v11;
  }
  v13 = v10 + 64;
  v14 = (uint64_t)&a1[2];
  swift_retain(v10);
  while (1)
  {
    sub_100010CBC(v14, (uint64_t)&v21, &qword_100110418);
    v15 = v21;
    result = sub_1000AAE50(v21);
    if ((v17 & 1) != 0)
      break;
    *(_QWORD *)(v13 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v11[6] + 8 * result) = v15;
    result = (unint64_t)sub_100077B54(&v22, (_OWORD *)(v11[7] + 32 * result));
    v18 = v11[2];
    v19 = __OFADD__(v18, 1);
    v20 = v18 + 1;
    if (v19)
      goto LABEL_11;
    v11[2] = v20;
    v14 += 40;
    v12 = (Class)((char *)v12 - 1);
    if (!v12)
    {
      swift_release(v11);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10008FD10(_TtC13GameOverlayUI20GameOverlayUIService *a1, const char *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  Class isa;
  uint64_t v10;
  _QWORD *v11;
  Class v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t result;
  char v18;
  uint64_t *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;

  isa = a1[1].super.isa;
  if (!isa)
  {
    v11 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100003304(&qword_10010F610);
  v10 = static _DictionaryStorage.allocate(capacity:)(isa);
  v11 = (_QWORD *)v10;
  v12 = a1[1].super.isa;
  if (!v12)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1, a2, a3, a4, a5, a6, a7, a8);
    return (unint64_t)v11;
  }
  v13 = v10 + 64;
  v14 = (uint64_t)&a1[2];
  swift_retain(v10);
  while (1)
  {
    sub_100010CBC(v14, (uint64_t)&v23, (uint64_t *)&unk_100110440);
    v15 = v23;
    v16 = v24;
    result = sub_1000AAE54(v23, v24);
    if ((v18 & 1) != 0)
      break;
    *(_QWORD *)(v13 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v19 = (uint64_t *)(v11[6] + 16 * result);
    *v19 = v15;
    v19[1] = v16;
    result = (unint64_t)sub_100077B54(&v25, (_OWORD *)(v11[7] + 32 * result));
    v20 = v11[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_11;
    v11[2] = v22;
    v14 += 48;
    v12 = (Class)((char *)v12 - 1);
    if (!v12)
    {
      swift_release(v11);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10008FE44(_TtC13GameOverlayUI20GameOverlayUIService *a1, const char *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  Class isa;
  uint64_t v10;
  _QWORD *v11;
  Class v12;
  _TtC13GameOverlayUI20GameOverlayUIService *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t result;
  char v17;
  uint64_t *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  _TtC13GameOverlayUI20GameOverlayUIService v22;

  isa = a1[1].super.isa;
  if (!isa)
  {
    v11 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100003304((uint64_t *)&unk_100110420);
  v10 = static _DictionaryStorage.allocate(capacity:)(isa);
  v11 = (_QWORD *)v10;
  v12 = a1[1].super.isa;
  if (!v12)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1, a2, a3, a4, a5, a6, a7, a8);
    return (unint64_t)v11;
  }
  swift_retain(v10);
  v13 = a1 + 3;
  while (1)
  {
    v14 = (uint64_t)v13[-1].super.isa;
    v15 = *(_QWORD *)v13[-1].listener;
    v22 = *v13;
    swift_bridgeObjectRetain(v15);
    result = sub_1000AAE54(v14, v15);
    if ((v17 & 1) != 0)
      break;
    *(_QWORD *)((char *)v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v18 = (uint64_t *)(v11[6] + 16 * result);
    *v18 = v14;
    v18[1] = v15;
    *(_TtC13GameOverlayUI20GameOverlayUIService *)(v11[7] + 16 * result) = v22;
    v19 = v11[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      goto LABEL_11;
    v11[2] = v21;
    v13 += 2;
    v12 = (Class)((char *)v12 - 1);
    if (!v12)
    {
      swift_release(v11);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t BagProfile.init(name:version:overrides:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v8;
  uint64_t result;

  *a6 = a1;
  a6[1] = a2;
  a6[2] = a3;
  a6[3] = a4;
  v8 = type metadata accessor for BagProfile(0);
  result = Bag.Stubs.init()();
  *(_QWORD *)((char *)a6 + *(int *)(v8 + 28)) = a5;
  return result;
}

NSString sub_10008FFB0()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  static Bag.metricsTopicKey = (uint64_t)result;
  return result;
}

uint64_t type metadata accessor for BagProfile(uint64_t a1)
{
  uint64_t result;

  result = qword_1001103B0;
  if (!qword_1001103B0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BagProfile);
  return result;
}

id static Bag.metricsTopicKey.getter()
{
  if (qword_10010BB78 != -1)
    swift_once(&qword_10010BB78, sub_10008FFB0);
  return (id)static Bag.metricsTopicKey;
}

uint64_t Bag.metricsTopic.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;

  v0 = sub_100003304(&qword_100110350);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10010BB78 != -1)
    swift_once(&qword_10010BB78, sub_10008FFB0);
  Bag.subscript.getter(static Bag.metricsTopicKey);
  Bag.Value.current(or:)(&v5, sub_100090134, 0, v0);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v5;
}

void sub_100090134(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
}

uint64_t BagProfile.stubs.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for BagProfile(0) + 24);
  v4 = type metadata accessor for Bag.Stubs(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t BagProfile.overrides.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for BagProfile(0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + *(int *)(v1 + 28)));
}

uint64_t BagProfile.init(name:version:stubs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;

  *a6 = a1;
  a6[1] = a2;
  a6[2] = a3;
  a6[3] = a4;
  v8 = type metadata accessor for BagProfile(0);
  v9 = (char *)a6 + *(int *)(v8 + 24);
  v10 = type metadata accessor for Bag.Stubs(0);
  v11 = *(_QWORD *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v9, a5, v10);
  v12 = sub_10008F7E0((uint64_t)&_swiftEmptyArrayStorage);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(a5, v10);
  *(_QWORD *)((char *)a6 + *(int *)(v8 + 28)) = v12;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for BagProfile(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = *(int *)(a3 + 24);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for Bag.Stubs(0);
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    v13(v10, v11, v12);
    v14 = *(int *)(a3 + 28);
    v15 = *(uint64_t *)((char *)a2 + v14);
    *(uint64_t *)((char *)v4 + v14) = v15;
    swift_bridgeObjectRetain(v15);
  }
  return v4;
}

uint64_t destroy for BagProfile(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for Bag.Stubs(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 28)));
}

_QWORD *initializeWithCopy for BagProfile(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = *(int *)(a3 + 24);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Bag.Stubs(0);
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  v12(v9, v10, v11);
  v13 = *(int *)(a3 + 28);
  v14 = *(_QWORD *)((char *)a2 + v13);
  *(_QWORD *)((char *)a1 + v13) = v14;
  swift_bridgeObjectRetain(v14);
  return a1;
}

_QWORD *assignWithCopy for BagProfile(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for Bag.Stubs(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  v14 = *(int *)(a3 + 28);
  v15 = *(_QWORD *)((char *)a2 + v14);
  v16 = *(_QWORD *)((char *)a1 + v14);
  *(_QWORD *)((char *)a1 + v14) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  return a1;
}

_OWORD *initializeWithTake for BagProfile(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Bag.Stubs(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 28)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 28));
  return a1;
}

_QWORD *assignWithTake for BagProfile(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for Bag.Stubs(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  v14 = *(int *)(a3 + 28);
  v15 = *(_QWORD *)((char *)a1 + v14);
  *(_QWORD *)((char *)a1 + v14) = *(_QWORD *)((char *)a2 + v14);
  swift_bridgeObjectRelease(v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for BagProfile(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000905FC);
}

uint64_t sub_1000905FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Bag.Stubs(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for BagProfile(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100090684);
}

uint64_t sub_100090684(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for Bag.Stubs(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1000906F8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_1000CCCD0;
  v4[1] = &unk_1000CCCD0;
  result = type metadata accessor for Bag.Stubs(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100090778@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  char *v5;
  unint64_t v6;
  id v7;
  uint64_t Strong;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  char *v15;
  _QWORD v16[3];
  _QWORD v17[5];
  char v18;

  v2 = v1;
  v4 = *(void **)(v1 + 8);
  if (v4)
  {
    v5 = *(char **)(v1 + 8);
  }
  else
  {
    v6 = sub_10008F978((uint64_t)&_swiftEmptyArrayStorage);
    v7 = objc_allocWithZone((Class)type metadata accessor for DashboardRequest());
    v5 = DashboardRequest.init(initialState:)(v6);
  }
  Strong = swift_unknownObjectWeakLoadStrong(v2 + 16);
  v10 = *(_QWORD *)(v2 + 24);
  v9 = *(_QWORD *)(v2 + 32);
  v15 = v5;
  swift_unknownObjectWeakInit(v16, Strong);
  v11 = v4;
  sub_10001B3C0(v10, v9);
  v12 = swift_unknownObjectRelease(Strong);
  v16[1] = v10;
  v16[2] = v9;
  v13 = static SafeAreaRegions.all.getter(v12);
  LOBYTE(v9) = static Edge.Set.all.getter(v13);
  sub_100095834((uint64_t)&v15, v17);
  v17[4] = v13;
  v18 = v9;
  sub_100095868((uint64_t)&v15);
  return sub_100095894((uint64_t)v17, a1);
}

char *sub_10009086C()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  id v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Strong;
  void *v11;
  void *v12;
  id v13;
  id v14;

  v1 = v0;
  v2 = (void *)*v0;
  v3 = objc_allocWithZone((Class)type metadata accessor for DashboardContentViewController());
  v4 = (char *)sub_100090C78(v2);
  v5 = v0[2];
  v6 = v0[3];
  v7 = (uint64_t *)&v4[OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_dismissHandler];
  v8 = *(_QWORD *)&v4[OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_dismissHandler];
  v9 = *(_QWORD *)&v4[OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_dismissHandler + 8];
  *v7 = v5;
  v7[1] = v6;
  sub_10001B3C0(v5, v6);
  sub_100050580(v8, v9);
  Strong = swift_unknownObjectWeakLoadStrong(v1 + 1);
  swift_unknownObjectWeakAssign(&v4[OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_remoteTarget]);
  swift_unknownObjectRelease(Strong);
  v11 = *(void **)(*v1 + OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_currentGame);
  if (v11)
  {
    v12 = (void *)objc_opt_self(GKGame);
    v13 = v11;
    v14 = objc_msgSend(v13, "internal");
    objc_msgSend(v12, "setCurrentGameFromInternal:serverEnvironment:", v14, objc_msgSend(v13, "environment"));

  }
  return v4;
}

uint64_t sub_100090988(uint64_t a1, char a2)
{
  return UIViewControllerRepresentable.sizeThatFits(_:uiViewController:context:)(a1, a2 & 1);
}

uint64_t sub_1000909C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100095CAC();
  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_100090A10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100095CAC();
  return static UIViewControllerRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_100090A60(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100095CAC();
  UIViewControllerRepresentable.body.getter(a1, v2);
  __break(1u);
}

id sub_100090C38()
{
  return sub_10006039C(type metadata accessor for GameCenterDashboardLaunchManager);
}

uint64_t type metadata accessor for GameCenterDashboardLaunchManager()
{
  return objc_opt_self(_TtC13GameOverlayUI32GameCenterDashboardLaunchManager);
}

id sub_100090C78(void *a1)
{
  _BYTE *v1;
  _QWORD *v3;
  uint64_t v4;
  id v5;
  _BYTE *v6;
  uint64_t v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  objc_super v15;

  v3 = &v1[OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_dismissHandler];
  *v3 = 0;
  v3[1] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController__navigationController] = 0;
  v1[OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_alwaysShowDoneButton] = 1;
  v1[OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_requiresNavigationController] = 1;
  *(_QWORD *)&v1[OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_contentViewController] = 0;
  v4 = OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_effectView;
  v5 = objc_allocWithZone((Class)UIVisualEffectView);
  v6 = v1;
  *(_QWORD *)&v1[v4] = objc_msgSend(v5, "init");
  v6[OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_adjustTopConstraint] = 1;
  v7 = OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_daemonProxy;
  *(_QWORD *)&v6[v7] = objc_msgSend(objc_allocWithZone((Class)GKDaemonProxy), "init");
  *(_QWORD *)&v6[OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_GKScrollToTopViewTag] = 8400;
  swift_unknownObjectWeakInit(&v6[OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_remoteTarget], 0);
  *(_QWORD *)&v6[OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_dashboardAssetNames] = &_swiftEmptyDictionarySingleton;
  *(_QWORD *)&v6[OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_leaderboardSetAssetNames] = &_swiftEmptyDictionarySingleton;
  *(_QWORD *)&v6[OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_leaderboardAssetNames] = &_swiftEmptyDictionarySingleton;
  *(_QWORD *)&v6[OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_request] = a1;
  v8 = a1;

  v15.receiver = v6;
  v15.super_class = (Class)type metadata accessor for DashboardContentViewController();
  v9 = objc_msgSendSuper2(&v15, "initWithNibName:bundle:", 0, 0);
  v10 = (void *)objc_opt_self(GKImageRestrictions);
  v11 = v9;
  objc_msgSend(v10, "setForCurrentProcessAllowingPDF:", 1);
  GKUISetRemote(1);
  if (sub_100094920())
    sub_100095C9C();
  objc_msgSend(v11, "setModalPresentationStyle:", 5);
  v12 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v13 = objc_msgSend(v12, "userInterfaceIdiom");

  if (v13 == (id)1)
    *((_BYTE *)v11 + OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_requiresNavigationController) = 0;
  return v11;
}

void sub_100090EB0()
{
  char *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  Class isa;
  uint64_t v6;
  _TtC13GameOverlayUI20GameOverlayUIService *v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  void *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  id v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  void *v39;
  id v40;
  objc_super v41;

  v41.receiver = v0;
  v41.super_class = (Class)type metadata accessor for DashboardContentViewController();
  objc_msgSendSuper2(&v41, "viewDidLoad");
  objc_msgSend(v0, "setOverrideUserInterfaceStyle:", 2);
  v1 = OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_effectView;
  v2 = *(void **)&v0[OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_effectView];
  v3 = (void *)objc_opt_self(UIVisualEffect);
  v4 = v2;
  isa = (Class)objc_msgSend(v3, "_gkGameLayerBackgroundVisualEffect");
  if (!isa)
  {
    v6 = sub_1000509C8(0, (unint64_t *)&qword_100110670, UIVisualEffect_ptr);
    v7 = (_TtC13GameOverlayUI20GameOverlayUIService *)static Array._unconditionallyBridgeFromObjectiveC(_:)(0, v6);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  objc_msgSend(v4, "setBackgroundEffects:", isa);

  objc_msgSend(*(id *)&v0[v1], "_setGroupName:", GKExtensionVisualEffectGroupName);
  sub_100092148();
  v15 = OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_request;
  v16 = *(_QWORD *)&v0[OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_request];
  v17 = *(void **)(v16 + OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_localPlayer);
  if (v17)
  {
    v18 = (void *)objc_opt_self(GKLocalPlayer);
    v19 = v17;
    v20 = objc_msgSend(v18, "local");
    objc_msgSend(v20, "updateFromLocalPlayer:", v19);

    v16 = *(_QWORD *)&v0[v15];
  }
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_daemonProxy], "setHostPID:", *(unsigned int *)(v16 + OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_hostPID));
  sub_10009548C(*(unsigned __int8 *)(*(_QWORD *)&v0[v15]
                                   + OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_shouldLayoutRTL));
  v21 = *(id *)&v0[v1];
  v22 = objc_msgSend(v0, "view");
  if (!v22)
  {
    __break(1u);
    goto LABEL_17;
  }
  v23 = v22;
  objc_msgSend(v22, "bounds");
  v25 = v24;
  v27 = v26;
  v29 = v28;
  v31 = v30;

  objc_msgSend(v21, "setFrame:", v25, v27, v29, v31);
  objc_msgSend(*(id *)&v0[v1], "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v32 = objc_msgSend(v0, "parentViewController");
  if (!v32)
    goto LABEL_11;
  v33 = v32;
  v34 = objc_msgSend(v32, "view");

  if (!v34)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v35 = objc_msgSend(v34, "window");

  if (!v35
    || (v36 = objc_msgSend(v35, "rootViewController"), v35, !v36)
    || (v37 = objc_msgSend(v36, "view"), v36, !v37))
  {
LABEL_11:
    v38 = objc_msgSend(v0, "parentViewController");
    if (!v38)
      return;
    v39 = v38;
    v40 = objc_msgSend(v38, "view");

    if (v40)
    {
      v37 = objc_msgSend(v40, "window");

      if (!v37)
        return;
      goto LABEL_14;
    }
LABEL_18:
    __break(1u);
    return;
  }
LABEL_14:
  sub_100091A30(v37);

}

void sub_100091254(char a1)
{
  char *v1;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  Class isa;
  id v9;
  void *v10;
  id v11;
  double v12;
  id v13;
  double v14;
  double v15;
  double v16;
  double v17;
  id v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  char *v24;
  _QWORD v25[5];
  uint64_t v26;
  objc_super v27;

  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_daemonProxy], "setDataUpdateDelegate:", v1);
  v27.receiver = v1;
  v27.super_class = (Class)type metadata accessor for DashboardContentViewController();
  objc_msgSendSuper2(&v27, "viewWillAppear:", a1 & 1);
  v3 = OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_effectView;
  v4 = objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_effectView], "backgroundEffects");
  v5 = sub_1000509C8(0, (unint64_t *)&qword_100110670, UIVisualEffect_ptr);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v5);

  v7 = *(id *)&v1[v3];
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v7, "setBackgroundEffects:", isa);

  v9 = objc_msgSend(v1, "view");
  if (v9)
  {
    v10 = v9;
    v11 = objc_msgSend(v9, "layer");

    LODWORD(v12) = 0;
    objc_msgSend(v11, "setOpacity:", v12);

    v13 = objc_allocWithZone((Class)CAMediaTimingFunction);
    LODWORD(v14) = 1050253722;
    LODWORD(v15) = 1045220557;
    LODWORD(v16) = 1061997773;
    LODWORD(v17) = 0.75;
    v18 = objc_msgSend(v13, "initWithControlPoints::::", v14, v15, v17, v16);
    v19 = (void *)objc_opt_self(CATransaction);
    objc_msgSend(v19, "begin");
    objc_msgSend(v18, "doubleValueSafe");
    objc_msgSend(v19, "setAnimationDuration:");
    v20 = (void *)objc_opt_self(UIView);
    v21 = swift_allocObject(&unk_100100A00, 32, 7);
    *(_QWORD *)(v21 + 16) = v1;
    *(_QWORD *)(v21 + 24) = v6;
    v25[4] = sub_100095484;
    v26 = v21;
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 1107296256;
    v25[2] = sub_1000AB510;
    v25[3] = &unk_100100A18;
    v22 = _Block_copy(v25);
    v23 = v26;
    v24 = v1;
    swift_release(v23);
    objc_msgSend(v20, "animateWithDuration:animations:", v22, 0.33);
    _Block_release(v22);
    objc_msgSend(v19, "commit");

  }
  else
  {
    __break(1u);
  }
}

void sub_1000914DC(char *a1)
{
  id v2;
  void *v3;
  id v4;
  double v5;
  void *v6;
  id v7;
  Class isa;

  v2 = objc_msgSend(a1, "view");
  if (v2)
  {
    v3 = v2;
    v4 = objc_msgSend(v2, "layer");

    LODWORD(v5) = 1.0;
    objc_msgSend(v4, "setOpacity:", v5);

    v6 = *(void **)&a1[OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_effectView];
    sub_1000509C8(0, (unint64_t *)&qword_100110670, UIVisualEffect_ptr);
    v7 = v6;
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v7, "setBackgroundEffects:", isa);

  }
  else
  {
    __break(1u);
  }
}

void sub_1000915FC()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  SEL v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  objc_super v36;

  v36.receiver = v0;
  v36.super_class = (Class)type metadata accessor for DashboardContentViewController();
  objc_msgSendSuper2(&v36, "viewWillLayoutSubviews");
  v1 = objc_msgSend(v0, "childViewControllers");
  v2 = sub_1000509C8(0, &qword_100110658, UIViewController_ptr);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, v2);

  if (!((unint64_t)v3 >> 62))
  {
    v11 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v11)
      goto LABEL_3;
LABEL_11:
    swift_bridgeObjectRelease((_TtC13GameOverlayUI20GameOverlayUIService *)v3, v4, v5, v6, v7, v8, v9, v10);
    return;
  }
LABEL_13:
  if (v3 < 0)
    v28 = v3;
  else
    v28 = v3 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v3);
  v11 = _CocoaArrayWrapper.endIndex.getter(v28);
  swift_bridgeObjectRelease((_TtC13GameOverlayUI20GameOverlayUIService *)v3, v29, v30, v31, v32, v33, v34, v35);
  if (!v11)
    goto LABEL_11;
LABEL_3:
  v12 = 4;
  while (1)
  {
    if ((v3 & 0xC000000000000001) != 0)
      v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12 - 4, v3);
    else
      v13 = *(id *)(v3 + 8 * v12);
    v14 = v13;
    v15 = v12 - 3;
    if (__OFADD__(v12 - 4, 1))
    {
      __break(1u);
      goto LABEL_13;
    }
    v16 = objc_msgSend(v13, "view");
    if (!v16)
      break;
    v17 = v16;
    v18 = objc_msgSend(v0, "view");
    if (!v18)
      goto LABEL_19;
    v19 = v18;
    objc_msgSend(v18, "bounds");
    v21 = v20;
    v23 = v22;
    v25 = v24;
    v27 = v26;

    objc_msgSend(v17, "setFrame:", v21, v23, v25, v27);
    ++v12;
    if (v15 == v11)
      goto LABEL_11;
  }
  __break(1u);
LABEL_19:
  __break(1u);
}

void sub_10009180C(char a1)
{
  void *v1;
  void *v2;
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  Class isa;
  SEL v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  objc_super v22;

  v2 = v1;
  v22.receiver = v2;
  v22.super_class = (Class)type metadata accessor for DashboardContentViewController();
  objc_msgSendSuper2(&v22, "viewWillAppear:", a1 & 1);
  objc_msgSend(v2, "becomeFirstResponder");
  if (*((_BYTE *)v2 + OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_requiresNavigationController) != 1)
    goto LABEL_6;
  v4 = objc_msgSend(objc_allocWithZone((Class)UIFocusGuide), "init");
  v5 = objc_msgSend(v2, "navigationController");
  if (!v5)
  {
LABEL_5:

LABEL_6:
    sub_100091C44();
    return;
  }
  v6 = v5;
  v7 = sub_100003304(&qword_100110640);
  v8 = swift_allocObject(v7, 40, 7);
  *(_OWORD *)(v8 + 16) = xmmword_1000CCCF0;
  *(_QWORD *)(v8 + 32) = objc_msgSend(v6, "navigationBar");
  specialized Array._endMutation()();
  sub_100003304(&qword_1001106E0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease((_TtC13GameOverlayUI20GameOverlayUIService *)v8, v10, v11, v12, v13, v14, v15, v16);
  objc_msgSend(v4, "setPreferredFocusEnvironments:", isa);

  v17 = objc_msgSend(v6, "view");
  if (v17)
  {
    v18 = v17;
    objc_msgSend(v17, "addLayoutGuide:", v4);

    v19 = (void *)objc_opt_self(NSLayoutConstraint);
    v20 = v4;
    v21 = objc_msgSend(v6, "navigationBar");
    objc_msgSend(v19, "_gkInstallEdgeConstraintsForLayoutGuide:containedWithinParentView:", v20, v21);

    goto LABEL_5;
  }
  __break(1u);
}

void sub_100091A30(void *a1)
{
  uint64_t v1;
  id v3;
  Class isa;
  uint64_t v5;
  _TtC13GameOverlayUI20GameOverlayUIService *v6;
  SEL v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;

  v3 = objc_msgSend(a1, "viewWithTag:", 678);
  objc_msgSend(v3, "removeFromSuperview");

  v14 = objc_msgSend(objc_allocWithZone((Class)UIVisualEffectView), "init");
  isa = (Class)objc_msgSend((id)objc_opt_self(UIVisualEffect), "_gkGameLayerBackgroundVisualEffect");
  if (!isa)
  {
    v5 = sub_1000509C8(0, (unint64_t *)&qword_100110670, UIVisualEffect_ptr);
    v6 = (_TtC13GameOverlayUI20GameOverlayUIService *)static Array._unconditionallyBridgeFromObjectiveC(_:)(0, v5);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  objc_msgSend(v14, "setBackgroundEffects:", isa);

  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_effectView), "_setGroupName:", GKExtensionVisualEffectGroupName);
  objc_msgSend(v14, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v14, "setTag:", 678);
  objc_msgSend(a1, "insertSubview:atIndex:", v14, 0);
  objc_msgSend((id)objc_opt_self(NSLayoutConstraint), "_gkInstallEdgeConstraintsForView:containedWithinParentView:", v14, a1);

}

void sub_100091C44()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  char *v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjCClassMetadata;
  uint64_t v13;
  unint64_t v14;
  _TtC13GameOverlayUI20GameOverlayUIService *v15;
  SEL v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static GKLog.trace.getter(v3);
  v6 = v0;
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = swift_slowAlloc(22, -1);
    v25 = v1;
    v10 = v9;
    v11 = swift_slowAlloc(64, -1);
    v27 = v11;
    *(_DWORD *)v10 = 136315394;
    ObjCClassMetadata = swift_getObjCClassMetadata(objc_msgSend(v6, "classForCoder"));
    v13 = _typeName(_:qualified:)(ObjCClassMetadata, 0);
    v15 = (_TtC13GameOverlayUI20GameOverlayUIService *)v14;
    v26 = sub_100031C58(v13, v14, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27);

    swift_bridgeObjectRelease(v15, v16, v17, v18, v19, v20, v21, v22);
    *(_WORD *)(v10 + 12) = 2080;
    v26 = sub_100031C58(0xD000000000000027, 0x80000001000D0FC0, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "GameController: %s::%s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v11, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v25);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  }
  v23 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  objc_msgSend(v23, "addObserver:selector:name:object:", v6, "dismissNotificationCallback:", GKDashboardNeedsToDismiss, 0);

}

void sub_100091EF0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  char *v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjCClassMetadata;
  uint64_t v13;
  unint64_t v14;
  _TtC13GameOverlayUI20GameOverlayUIService *v15;
  SEL v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static GKLog.trace.getter(v3);
  v6 = v0;
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = swift_slowAlloc(22, -1);
    v25 = v1;
    v10 = v9;
    v11 = swift_slowAlloc(64, -1);
    v27 = v11;
    *(_DWORD *)v10 = 136315394;
    ObjCClassMetadata = swift_getObjCClassMetadata(objc_msgSend(v6, "classForCoder"));
    v13 = _typeName(_:qualified:)(ObjCClassMetadata, 0);
    v15 = (_TtC13GameOverlayUI20GameOverlayUIService *)v14;
    v26 = sub_100031C58(v13, v14, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27);

    swift_bridgeObjectRelease(v15, v16, v17, v18, v19, v20, v21, v22);
    *(_WORD *)(v10 + 12) = 2080;
    v26 = sub_100031C58(0xD000000000000029, 0x80000001000D0F90, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "GameController: %s::%s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v11, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v25);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  }
  v23 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  objc_msgSend(v23, "removeObserver:name:object:", v6, GKDashboardNeedsToDismiss, 0);

}

void sub_100092148()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  _TtC13GameOverlayUI20GameOverlayUIService *v6;
  NSString v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  _TtC13GameOverlayUI20GameOverlayUIService *v16;
  NSString v17;
  SEL v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  _TtC13GameOverlayUI20GameOverlayUIService *v31;
  NSString v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  _TtC13GameOverlayUI20GameOverlayUIService *v41;
  NSString v42;
  SEL v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  uint64_t v50;
  _TtC13GameOverlayUI20GameOverlayUIService *v51;
  NSString v52;
  SEL v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  uint64_t v60;
  _TtC13GameOverlayUI20GameOverlayUIService *v61;
  NSString v62;
  SEL v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  uint64_t v70;
  _TtC13GameOverlayUI20GameOverlayUIService *v71;
  NSString v72;
  SEL v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  id v81;
  uint64_t v82;
  _TtC13GameOverlayUI20GameOverlayUIService *v83;
  NSString v84;
  SEL v85;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  id v95;
  void *v96;
  id v97;
  id v98;
  void *v99;
  _QWORD v100[6];

  v1 = v0;
  v2 = objc_msgSend((id)objc_opt_self(GKGame), "currentGame");
  *(_BYTE *)(v0 + OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_adjustTopConstraint) = 0;
  v3 = objc_msgSend(objc_allocWithZone((Class)GKDashboardRequest), "init");
  v4 = OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_request;
  objc_msgSend(v3, "setState:", *(_QWORD *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_request)+ OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_viewState));
  v5 = *(_QWORD *)(v1 + v4) + OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_leaderboardIdentifier;
  v6 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v5 + 8);
  if (v6)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v5 + 8));
    v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v6, v8, v9, v10, v11, v12, v13, v14);
  }
  else
  {
    v7 = 0;
  }
  objc_msgSend(v3, "setLeaderboardID:", v7);

  v15 = *(_QWORD *)(v1 + v4) + OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_leaderboardTitle;
  v16 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v15 + 8);
  if (v16)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v15 + 8));
    v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v16, v18, v19, v20, v21, v22, v23, v24);
  }
  else
  {
    v17 = 0;
  }
  objc_msgSend(v3, "setLeaderboardTitle:", v17);

  v25 = *(_QWORD *)(v1 + v4);
  v26 = *(void **)(v25 + OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_leaderboardInternal);
  if (v26)
  {
    v27 = objc_allocWithZone((Class)GKLeaderboard);
    v28 = v26;
    v29 = objc_msgSend(v27, "initWithInternalRepresentation:", v28);
    objc_msgSend(v3, "setLeaderboard:", v29);

    v25 = *(_QWORD *)(v1 + v4);
  }
  v30 = v25 + OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_gameBundleID;
  v31 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v30 + 8);
  if (v31)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v30 + 8));
    v32 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v31, v33, v34, v35, v36, v37, v38, v39);
  }
  else
  {
    v32 = 0;
  }
  objc_msgSend(v3, "setGameBundleID:", v32);

  v40 = *(_QWORD *)(v1 + v4) + OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_achievementIdentifier;
  v41 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v40 + 8);
  if (v41)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v40 + 8));
    v42 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v41, v43, v44, v45, v46, v47, v48, v49);
  }
  else
  {
    v42 = 0;
  }
  objc_msgSend(v3, "setAchievementID:", v42);

  v50 = *(_QWORD *)(v1 + v4) + OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_activityIdentifier;
  v51 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v50 + 8);
  if (v51)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v50 + 8));
    v52 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v51, v53, v54, v55, v56, v57, v58, v59);
  }
  else
  {
    v52 = 0;
  }
  objc_msgSend(v3, "setActivityIdentifier:", v52);

  v60 = *(_QWORD *)(v1 + v4) + OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_playerIdentifier;
  v61 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v60 + 8);
  if (v61)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v60 + 8));
    v62 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v61, v63, v64, v65, v66, v67, v68, v69);
  }
  else
  {
    v62 = 0;
  }
  objc_msgSend(v3, "setPlayerID:", v62);

  v70 = *(_QWORD *)(v1 + v4) + OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_playerAlias;
  v71 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v70 + 8);
  if (v71)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v70 + 8));
    v72 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v71, v73, v74, v75, v76, v77, v78, v79);
  }
  else
  {
    v72 = 0;
  }
  objc_msgSend(v3, "setPlayerAlias:", v72);

  objc_msgSend(v3, "setLeaderboardTimeScope:", *(_QWORD *)(*(_QWORD *)(v1 + v4) + OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_leaderboardTimeScope));
  objc_msgSend(v3, "setLeaderboardPlayerScope:", *(_QWORD *)(*(_QWORD *)(v1 + v4) + OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_leaderboardPlayerScope));
  objc_msgSend(v3, "setShouldShowPlayForChallenge:", *(unsigned __int8 *)(*(_QWORD *)(v1 + v4)+ OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_shouldShowPlayForChallenge));
  objc_msgSend(v3, "setShouldShowPlayForTurnBasedMatch:", *(unsigned __int8 *)(*(_QWORD *)(v1 + v4)+ OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_shouldShowPlayForTurnBasedMatch));
  objc_msgSend(v3, "setShouldShowQuitForTurnBasedMatch:", *(unsigned __int8 *)(*(_QWORD *)(v1 + v4)+ OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_shouldShowQuitForTurnBasedMatch));
  v80 = objc_msgSend((id)objc_opt_self(GKLocalPlayer), "local");
  v81 = objc_msgSend((id)objc_opt_self(GKGameRecord), "gameRecordForPlayer:game:", v80, v2);

  objc_msgSend(v3, "setGameRecord:", v81);
  objc_msgSend(v3, "setIsArcade:", *(unsigned __int8 *)(*(_QWORD *)(v1 + v4) + OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_isArcade));
  v82 = *(_QWORD *)(v1 + v4) + OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_launchContext;
  v83 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v82 + 8);
  if (v83)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v82 + 8));
    v84 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v83, v85, v86, v87, v88, v89, v90, v91);
  }
  else
  {
    v84 = 0;
  }
  objc_msgSend(v3, "setLaunchContext:", v84);

  type metadata accessor for GameCenterDashboardLaunchManager();
  v92 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_dismissHandler);
  v93 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_dismissHandler + 8);
  v94 = v3;
  sub_10001B3C0(v92, v93);
  v95 = sub_100094960(v3, v92, v93);
  sub_100050580(v92, v93);

  v96 = *(void **)(v1 + OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_contentViewController);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_contentViewController) = v95;

  v97 = objc_msgSend((id)objc_opt_self(GKDaemonProxy), "proxyForLocalPlayer");
  v98 = objc_msgSend(v97, "profileServicePrivate");

  v100[4] = sub_1000927C4;
  v100[5] = 0;
  v100[0] = _NSConcreteStackBlock;
  v100[1] = 1107296256;
  v100[2] = sub_1000929A4;
  v100[3] = &unk_1001009A0;
  v99 = _Block_copy(v100);
  objc_msgSend(v98, "startContactsIntegrationSyncWithOptions:completionHandler:", 2, v99);
  _Block_release(v99);
  swift_unknownObjectRelease(v98);
  sub_1000929F8();

}

void sub_1000927C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v6 = swift_errorRetain(a1);
    static GKLog.general.getter(v6);
    swift_errorRetain(a1);
    v7 = swift_errorRetain(a1);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = swift_slowAlloc(12, -1);
      v16 = v2;
      v11 = (uint8_t *)v10;
      v12 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v11 = 138412290;
      swift_errorRetain(a1);
      v13 = _swift_stdlib_bridgeErrorToNSError(a1);
      v17 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18);
      *v12 = v13;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Error starting contacts integration sync: %@", v11, 0xCu);
      v14 = sub_100003304(&qword_10010EB00);
      swift_arrayDestroy(v12, 1, v14);
      swift_slowDealloc(v12, -1, -1);
      v15 = v11;
      v2 = v16;
      swift_slowDealloc(v15, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
}

void sub_1000929A4(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void *);
  id v5;

  v4 = *(void (**)(void *))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4(a2);
  swift_release(v3);

}

void sub_1000929F8()
{
  char *v0;
  void *v1;
  char *v2;
  id v3;
  id v4;
  void *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  void *v34;
  id v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  void *v45;
  id v46;
  void *v47;
  id v48;
  void *v49;
  id v50;
  void *v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  id v60;
  void *v61;
  id v62;
  _TtC13GameOverlayUI20GameOverlayUIService *v63;

  v1 = *(void **)&v0[OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_contentViewController];
  if (v1)
  {
    v2 = v0;
    v3 = v1;
    if (sub_100094920())
    {
      objc_msgSend(v0, "setModalPresentationStyle:", 2);
      v4 = objc_msgSend((id)objc_opt_self(GKUITheme), "sharedTheme");
      if (!v4)
      {
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
      v5 = v4;
      objc_msgSend(v4, "formSheetSize");
      v7 = v6;
      v9 = v8;

      objc_msgSend(v2, "setPreferredContentSize:", v7, v9);
    }
    else
    {
      objc_msgSend(v0, "setModalPresentationStyle:", 5);
    }
    v10 = objc_msgSend(v2, "view");
    if (v10)
    {
      v11 = v10;
      objc_msgSend(v10, "setClipsToBounds:", 0);

      v12 = objc_msgSend(v2, "view");
      if (v12)
      {
        v13 = v12;
        v14 = (void *)objc_opt_self(GKColorPalette);
        v15 = objc_msgSend(v14, "sharedPalette");
        if (v15)
        {
          v16 = v15;
          v17 = objc_msgSend(v15, "systemInteractionColor");

          objc_msgSend(v13, "setTintColor:", v17);
          if (v2[OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_alwaysShowDoneButton] == 1)
          {
            v18 = objc_msgSend((id)objc_opt_self(UIButton), "_gkXmarkedCloseButtonWithTarget:action:", v2, "donePressed:");
            if (v18)
            {
              v19 = v18;
              v20 = objc_msgSend(v3, "navigationItem");
              v21 = objc_msgSend(objc_allocWithZone((Class)UIBarButtonItem), "initWithCustomView:", v19);
              objc_msgSend(v20, "setRightBarButtonItem:", v21);

            }
          }
          if (v2[OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_requiresNavigationController] == 1)
          {
            v22 = OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController__navigationController;
            if (!*(_QWORD *)&v2[OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController__navigationController])
            {
              v37 = objc_opt_self(UINavigationController);
              v38 = swift_dynamicCastObjCClass(v3, v37);
              if (v38)
              {
                v39 = *(void **)&v2[v22];
                *(_QWORD *)&v2[v22] = v38;
                v40 = v3;
              }
              else
              {
                v41 = objc_msgSend(objc_allocWithZone((Class)UINavigationController), "init");
                objc_msgSend(v41, "setDelegate:", v2);
                objc_msgSend(v41, "_setClipUnderlapWhileTransitioning:", 1);
                objc_msgSend(v41, "_setPositionBarsExclusivelyWithSafeArea:", 1);
                v42 = objc_msgSend(v41, "navigationBar");
                objc_msgSend(v42, "setBarStyle:", 0);

                v43 = objc_msgSend(v41, "navigationBar");
                objc_msgSend(v43, "setTranslucent:", 1);

                objc_msgSend(v41, "beginAppearanceTransition:animated:", 1, 0);
                objc_msgSend(v2, "addChildViewController:", v41);
                v44 = objc_msgSend(v2, "view");
                if (!v44)
                {
LABEL_34:
                  __break(1u);
                  goto LABEL_35;
                }
                v45 = v44;
                v46 = objc_msgSend(v41, "view");
                if (!v46)
                {
LABEL_35:
                  __break(1u);
                  goto LABEL_36;
                }
                v47 = v46;
                objc_msgSend(v45, "addSubview:", v46);

                v48 = objc_msgSend(v41, "view");
                if (!v48)
                {
LABEL_36:
                  __break(1u);
                  goto LABEL_37;
                }
                v49 = v48;
                v50 = objc_msgSend(v2, "view");
                if (!v50)
                {
LABEL_37:
                  __break(1u);
                  return;
                }
                v51 = v50;
                objc_msgSend(v50, "bounds");
                v53 = v52;
                v55 = v54;
                v57 = v56;
                v59 = v58;

                objc_msgSend(v49, "setFrame:", v53, v55, v57, v59);
                objc_msgSend(v41, "endAppearanceTransition");
                v39 = *(void **)&v2[v22];
                *(_QWORD *)&v2[v22] = v41;
              }

              if (*(double *)(*(_QWORD *)&v2[OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_request]
                             + OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_statusBarHeight) == 0.0)
              {
                v60 = objc_msgSend(v2, "navigationController");
                if (v60)
                {
                  v61 = v60;
                  objc_msgSend(v60, "setAdditionalSafeAreaInsets:", 5.0, 0.0, 0.0, 0.0);

                }
              }
            }
          }
          v23 = sub_100003304(&qword_100110640);
          v24 = swift_allocObject(v23, 40, 7);
          *(_OWORD *)(v24 + 16) = xmmword_1000CCCF0;
          *(_QWORD *)(v24 + 32) = v3;
          v63 = (_TtC13GameOverlayUI20GameOverlayUIService *)v24;
          specialized Array._endMutation()();
          v25 = v3;
          sub_100092FD4((uint64_t)v63, 0);
          swift_bridgeObjectRelease(v63, v26, v27, v28, v29, v30, v31, v32);
          v33 = objc_msgSend(v2, "view");
          if (v33)
          {
            v34 = v33;
            v35 = objc_msgSend(v14, "sharedPalette");
            if (v35)
            {
              v36 = v35;
              v62 = objc_msgSend(v35, "emphasizedTextColor");

              objc_msgSend(v34, "setTintColor:", v62);
              return;
            }
            goto LABEL_32;
          }
LABEL_31:
          __break(1u);
LABEL_32:
          __break(1u);
          goto LABEL_33;
        }
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_30;
  }
}

void sub_100092FD4(uint64_t a1, char a2)
{
  _BYTE *v2;
  uint64_t v4;
  const char *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int *p_flags;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  const char *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  id v33;
  void *v34;
  id v35;
  void *v36;
  id v37;
  void *v38;
  id v39;
  void *v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  const char *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  id v57;
  void *v58;
  Class isa;
  id v60;
  void *v61;
  id v62;
  id v63;
  id v64;
  void *v65;
  id v67;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v56 = a1;
    else
      v56 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v4 = _CocoaArrayWrapper.endIndex.getter(v56);
    p_flags = &value witness table for InGameBannerRequiredData.flags;
    if (v4)
      goto LABEL_3;
LABEL_29:
    swift_bridgeObjectRelease((_TtC13GameOverlayUI20GameOverlayUIService *)a1, v5, v6, v7, v8, v9, v10, v11);
    if (v2[OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_requiresNavigationController] != 1)
      goto LABEL_32;
    goto LABEL_30;
  }
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  p_flags = (_DWORD *)(&value witness table for InGameBannerRequiredData + 80);
  if (!v4)
    goto LABEL_29;
LABEL_3:
  if (v4 < 1)
  {
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  v13 = 0;
  v14 = OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_alwaysShowDoneButton;
  v15 = a1 & 0xC000000000000001;
  do
  {
    if (v15)
      v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13, a1);
    else
      v23 = *(id *)(a1 + 8 * v13 + 32);
    v24 = v23;
    if (v2[v14] == 1)
    {
      v25 = objc_msgSend((id)objc_opt_self(UIButton), "_gkXmarkedCloseButtonWithTarget:action:", v2, "donePressed:");
      if (v25)
      {
        v26 = v25;
        v27 = objc_msgSend(v24, "navigationItem");
        v28 = objc_msgSend(objc_allocWithZone((Class)UIBarButtonItem), "initWithCustomView:", v26);
        objc_msgSend(v27, "setRightBarButtonItem:", v28);

        v24 = v28;
      }
    }
    ++v13;

  }
  while (v4 != v13);
  swift_bridgeObjectRelease((_TtC13GameOverlayUI20GameOverlayUIService *)a1, v16, v17, v18, v19, v20, v21, v22);
  p_flags = &value witness table for InGameBannerRequiredData.flags;
  if ((v2[OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_requiresNavigationController] & 1) == 0)
  {
    v29 = OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_request;
    swift_bridgeObjectRetain(a1);
    v30 = 0;
    while (1)
    {
      v31 = v15
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v30, a1)
          : *(id *)(a1 + 8 * v30 + 32);
      v32 = v31;
      objc_msgSend(v31, "beginAppearanceTransition:animated:", 1, a2 & 1);
      if (*(double *)(*(_QWORD *)&v2[v29] + OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_statusBarHeight) == 0.0)
        objc_msgSend(v32, "setAdditionalSafeAreaInsets:", 5.0, 0.0, 0.0, 0.0);
      objc_msgSend(v2, "addChildViewController:", v32);
      v33 = objc_msgSend(v2, "view");
      if (!v33)
        goto LABEL_39;
      v34 = v33;
      v35 = objc_msgSend(v32, "view");
      if (!v35)
        goto LABEL_40;
      v36 = v35;
      objc_msgSend(v34, "addSubview:", v35);

      v37 = objc_msgSend(v32, "view");
      if (!v37)
        goto LABEL_41;
      v38 = v37;
      v39 = objc_msgSend(v2, "view");
      if (!v39)
        goto LABEL_42;
      v40 = v39;
      ++v30;
      objc_msgSend(v39, "bounds");
      v42 = v41;
      v44 = v43;
      v46 = v45;
      v48 = v47;

      objc_msgSend(v38, "setFrame:", v42, v44, v46, v48);
      objc_msgSend(v32, "endAppearanceTransition");

      if (v4 == v30)
      {
        swift_bridgeObjectRelease((_TtC13GameOverlayUI20GameOverlayUIService *)a1, v49, v50, v51, v52, v53, v54, v55);
        p_flags = (_DWORD *)(&value witness table for InGameBannerRequiredData + 80);
        goto LABEL_32;
      }
    }
  }
LABEL_30:
  v57 = objc_msgSend(v2, "navigationController");
  if (v57)
  {
    v58 = v57;
    sub_1000509C8(0, &qword_100110658, UIViewController_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v58, "setViewControllers:animated:", isa, a2 & 1);

  }
LABEL_32:
  if (*(double *)(*(_QWORD *)&v2[*((_QWORD *)p_flags + 153)]
                 + OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_statusBarHeight) == 0.0)
  {
    v60 = objc_msgSend(v2, "view");
    if (!v60)
    {
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
      return;
    }
    v61 = v60;
    v62 = objc_msgSend(v60, "viewWithTag:", 8400);

    if (!v62)
    {
      v63 = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
      objc_msgSend(v63, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
      objc_msgSend(v63, "setTag:", 8400);
      v67 = objc_msgSend(objc_allocWithZone((Class)UITapGestureRecognizer), "initWithTarget:action:", v2, "scrollToTopPressed:");
      objc_msgSend(v67, "setNumberOfTapsRequired:", 1);
      objc_msgSend(v63, "addGestureRecognizer:", v67);
      v64 = objc_msgSend(v2, "view");
      if (v64)
      {
        v65 = v64;
        objc_msgSend(v64, "addSubview:", v63);

        sub_1000937B0();
        return;
      }
      goto LABEL_44;
    }
  }
}

void sub_100093524()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  id v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  double v16;
  uint64_t v17;
  SEL v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  SEL v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;

  if (*((_BYTE *)v0 + OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_requiresNavigationController) == 1)
  {
    v1 = objc_msgSend(v0, "navigationController");
    if (v1)
    {
      v2 = v1;
      v3 = objc_msgSend(v1, "topViewController");

      if (v3)
      {
        v4 = objc_msgSend(v3, "view");
        if (!v4)
        {
LABEL_23:
          __break(1u);
          return;
        }
        v5 = v4;
        v6 = objc_msgSend(v4, "subviews");

        v7 = sub_1000509C8(0, &qword_100110650, UIView_ptr);
        v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

        if ((unint64_t)v8 >> 62)
        {
          if (v8 < 0)
            v17 = v8;
          else
            v17 = v8 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v8);
          v9 = _CocoaArrayWrapper.endIndex.getter(v17);
          swift_bridgeObjectRelease((_TtC13GameOverlayUI20GameOverlayUIService *)v8, v18, v19, v20, v21, v22, v23, v24);
          if (v9)
            goto LABEL_7;
        }
        else
        {
          v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (v9)
          {
LABEL_7:
            if (v9 >= 1)
            {
              for (i = 0; i != v9; ++i)
              {
                if ((v8 & 0xC000000000000001) != 0)
                  v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v8);
                else
                  v11 = *(id *)(v8 + 8 * i + 32);
                v12 = v11;
                v13 = objc_opt_self(UIScrollView);
                v14 = (void *)swift_dynamicCastObjCClass(v12, v13);
                if (v14)
                {
                  v15 = v14;
                  if (objc_msgSend(v14, "scrollsToTop"))
                  {
                    objc_msgSend(v15, "adjustedContentInset");
                    objc_msgSend(v15, "setContentOffset:animated:", 1, 0.0, -v16);
                  }
                }

              }
              goto LABEL_21;
            }
            __break(1u);
            goto LABEL_23;
          }
        }
LABEL_21:

        swift_bridgeObjectRelease((_TtC13GameOverlayUI20GameOverlayUIService *)v8, v25, v26, v27, v28, v29, v30, v31);
      }
    }
  }
}

void sub_1000937B0()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  double v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  Class isa;
  SEL v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;

  v1 = objc_msgSend(v0, "view");
  if (!v1)
  {
    __break(1u);
    goto LABEL_16;
  }
  v2 = v1;
  v40 = objc_msgSend(v1, "viewWithTag:", 8400);

  if (v40)
  {
    objc_msgSend(v40, "_gkRemoveAllConstraints");
    v3 = objc_msgSend(v0, "view");
    if (v3)
    {
      v4 = v3;
      v5 = objc_msgSend(v3, "traitCollection");

      v6 = objc_msgSend(v5, "userInterfaceIdiom");
      if (v6)
      {
        v7 = 100.0;
      }
      else
      {
        v8 = objc_msgSend(v0, "view");
        if (!v8)
        {
LABEL_20:
          __break(1u);
          return;
        }
        v9 = v8;
        v10 = objc_msgSend(v8, "traitCollection");

        v11 = objc_msgSend(v10, "verticalSizeClass");
        if (v11 == (id)1)
          v7 = 150.0;
        else
          v7 = 50.0;
      }
      v12 = sub_100003304(&qword_100110640);
      v13 = swift_allocObject(v12, 64, 7);
      *(_OWORD *)(v13 + 16) = xmmword_1000CCD00;
      v14 = objc_msgSend(v40, "leadingAnchor");
      v15 = objc_msgSend(v0, "view");
      if (v15)
      {
        v16 = v15;
        v17 = objc_msgSend(v15, "leadingAnchor");

        v18 = objc_msgSend(v14, "constraintEqualToAnchor:constant:", v17, v7);
        *(_QWORD *)(v13 + 32) = v18;
        v19 = objc_msgSend(v40, "trailingAnchor");
        v20 = objc_msgSend(v0, "view");
        if (v20)
        {
          v21 = v20;
          v22 = objc_msgSend(v20, "trailingAnchor");

          v23 = objc_msgSend(v19, "constraintEqualToAnchor:constant:", v22, -v7);
          *(_QWORD *)(v13 + 40) = v23;
          v24 = objc_msgSend(v40, "topAnchor");
          v25 = objc_msgSend(v0, "view");
          if (v25)
          {
            v26 = v25;
            v27 = (void *)objc_opt_self(NSLayoutConstraint);
            v28 = objc_msgSend(v26, "topAnchor");

            v29 = objc_msgSend(v24, "constraintEqualToAnchor:", v28);
            *(_QWORD *)(v13 + 48) = v29;
            v30 = objc_msgSend(v40, "heightAnchor");
            v31 = objc_msgSend(v30, "constraintEqualToConstant:", 20.0);

            *(_QWORD *)(v13 + 56) = v31;
            specialized Array._endMutation()();
            sub_1000509C8(0, &qword_100110648, NSLayoutConstraint_ptr);
            isa = Array._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease((_TtC13GameOverlayUI20GameOverlayUIService *)v13, v33, v34, v35, v36, v37, v38, v39);
            objc_msgSend(v27, "activateConstraints:", isa);

            objc_msgSend(v40, "setNeedsLayout");
            return;
          }
          goto LABEL_19;
        }
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }
LABEL_17:
      __break(1u);
      goto LABEL_18;
    }
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
}

void sub_100093D18(uint64_t a1)
{
  void *v1;
  Class isa;
  unsigned int v4;
  Class v5;
  id v6;

  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v4 = objc_msgSend(v1, "_gkShouldRefreshContentsForDataType:userInfo:", a1, isa);

  if (v4)
  {
    v5 = Dictionary._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v1, "_gkRefreshContentsForDataType:userInfo:", a1, v5);

  }
  if ((_DWORD)a1 == 16)
  {
    v6 = objc_msgSend((id)objc_opt_self(GKLocalPlayer), "local");
    objc_msgSend(v6, "clearInMemoryCachedAvatars");

  }
}

void sub_100093EA4()
{
  id v0;
  void *v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  NSString v9;

  v0 = objc_msgSend(objc_allocWithZone((Class)GKReporter), "init");
  v1 = (void *)GKReporterDomainGameControllerSupport;
  v2 = (void *)GKReporterGameControllerUsedInGameLayer;
  v3 = (void *)objc_opt_self(GKGame);
  v4 = v1;
  v5 = v2;
  v6 = objc_msgSend(v3, "currentGame");
  v9 = objc_msgSend(v6, "bundleIdentifier");

  if (!v9)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v8 = v7;
    v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v8);
  }
  objc_msgSend(v0, "reportEvent:type:bundleID:", v4, v5, v9);

}

double sub_100094014(void *a1)
{
  return sub_1000941B8(a1, (SEL *)&selRef_finishAndPlay_, "Failed to serialize GKChallenge: %@");
}

double sub_1000940BC(void *a1)
{
  return sub_1000941B8(a1, (SEL *)&selRef_finishWith_, "Failed to serialize GKTurnBasedMatch: %@");
}

double sub_100094164(void *a1)
{
  return sub_1000941B8(a1, (SEL *)&selRef_quitTurnBasedMatch_, "Failed to serialize GKTurnBasedMatch: %@");
}

double sub_1000941B8(void *a1, SEL *a2, const char *a3)
{
  uint64_t v3;
  id v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t Strong;
  void *v15;
  Class isa;
  double result;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  _QWORD *v26;
  id v27;
  uint64_t v28;
  id v29;
  uint64_t v30;

  v7 = objc_msgSend(a1, "internal");
  if (v7)
  {
    v8 = v7;
    v29 = 0;
    v9 = objc_msgSend((id)objc_opt_self(NSKeyedArchiver), "archivedDataWithRootObject:requiringSecureCoding:error:", v7, 1, &v29);
    v10 = v29;
    if (v9)
    {
      v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v9);
      v13 = v12;

      Strong = swift_unknownObjectWeakLoadStrong(v3 + OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_remoteTarget);
      if (Strong)
      {
        v15 = (void *)Strong;
        isa = Data._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v15, *a2, isa);

        sub_100038198(v11, v13);
        swift_unknownObjectRelease(v15);
      }
      else
      {

        return sub_100038198(v11, v13);
      }
      return result;
    }
    v18 = v10;
    v19 = _convertNSErrorToError(_:)(v10);

    swift_willThrow(v20);
    swift_errorRelease(v19);
  }
  if (qword_10010BAA0 != -1)
    swift_once(&qword_10010BAA0, sub_100004DCC);
  v21 = type metadata accessor for Logger(0);
  sub_100004E8C(v21, (uint64_t)qword_1001232D8);
  v22 = a1;
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc(12, -1);
    v26 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v25 = 138412290;
    v29 = v22;
    v27 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30);
    *v26 = v22;

    _os_log_impl((void *)&_mh_execute_header, v23, v24, a3, v25, 0xCu);
    v28 = sub_100003304(&qword_10010EB00);
    swift_arrayDestroy(v26, 1, v28);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v25, -1, -1);

  }
  else
  {

  }
  return result;
}

uint64_t sub_1000944F0(uint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;

  v4 = *(_QWORD *)(result + OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_request);
  if (*(_QWORD *)(v4 + *a4) != a3)
    *(_QWORD *)(v4 + *a4) = a3;
  return result;
}

uint64_t sub_100094514(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v9;

  v5 = (uint64_t *)(*(_QWORD *)(v2 + OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_request)
                 + OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_leaderboardIdentifier);
  v6 = v5[1];
  if (!v6)
  {
    v9 = 0;
LABEL_10:
    *v5 = a1;
    v5[1] = a2;
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRelease(v9);
  }
  result = *v5;
  if (*v5 != a1 || v6 != a2)
  {
    result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v6, a1, a2, 0);
    if ((result & 1) == 0)
    {
      v9 = v5[1];
      goto LABEL_10;
    }
  }
  return result;
}

double sub_100094604()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  double result;
  uint64_t v12;
  void (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = static GKLog.trace.getter(v4);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "GameController: Game Overlay dashboard was dismissed by the game controller.", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  v12 = v1 + OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_dismissHandler;
  v13 = *(void (**)(uint64_t))(v1
                                       + OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_dismissHandler);
  if (v13)
  {
    v14 = *(_QWORD *)(v12 + 8);
    v15 = swift_retain(v14);
    v13(v15);
    return sub_100050580((uint64_t)v13, v14);
  }
  return result;
}

void sub_10009476C(char *a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  void *v6;
  char *v7;
  id v8;
  id v9;

  v5 = *(void **)&a1[OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_effectView];
  v6 = (void *)objc_opt_self(UIBlurEffect);
  v7 = a1;
  v8 = v5;
  v9 = objc_msgSend(v6, "effectWithStyle:", a3);
  objc_msgSend(v8, "setEffect:", v9);

}

id sub_100094838()
{
  return sub_10006039C(type metadata accessor for DashboardContentViewController);
}

uint64_t type metadata accessor for DashboardContentViewController()
{
  return objc_opt_self(_TtC13GameOverlayUI30DashboardContentViewController);
}

BOOL sub_100094920()
{
  void *v0;
  id v1;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[UIDevice currentDevice](UIDevice, "currentDevice"));
  v1 = objc_msgSend(v0, "userInterfaceIdiom");

  return v1 == (id)1;
}

id sub_100094960(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t ObjCClassFromMetadata;
  id v22;
  id v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void (*v28)(char *, _QWORD, uint64_t);
  unint64_t v29;
  _TtC13GameOverlayUI20GameOverlayUIService *v30;
  __int128 v31;
  void (*v32)(char *, uint64_t);
  char v33;
  SEL v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  SEL v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  NSString v59;
  id v60;
  id v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  id v66;
  uint64_t v67;
  objc_class *v68;
  id v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  id v74;
  id v75;
  void *v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  __int128 v86;

  v4 = v3;
  v8 = sub_100003304(&qword_100110660);
  __chkstk_darwin(v8);
  v10 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DashboardLaunchContext(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v79 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v79 - v16;
  __chkstk_darwin(v18);
  v20 = (char *)&v79 - v19;
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v4);
  v22 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  v80 = a2;
  v81 = a3;
  v82 = v22;
  if (a1 && (v23 = objc_msgSend(a1, "launchContext")) != 0)
  {
    v24 = v23;
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    v27 = v26;

  }
  else
  {
    v25 = 0;
    v27 = 0xE000000000000000;
  }
  DashboardLaunchContext.init(rawValue:)(v25, v27);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    v28 = *(void (**)(char *, _QWORD, uint64_t))(v12 + 104);
    v28(v20, enum case for DashboardLaunchContext.inGame(_:), v11);
    sub_100010ED0((uint64_t)v10, &qword_100110660);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v20, v10, v11);
    v28 = *(void (**)(char *, _QWORD, uint64_t))(v12 + 104);
  }
  v28(v17, enum case for DashboardLaunchContext.contacts(_:), v11);
  v29 = sub_100094FC4();
  dispatch thunk of RawRepresentable.rawValue.getter(&v83, v11, v29);
  dispatch thunk of RawRepresentable.rawValue.getter(&v86, v11, v29);
  v30 = (_TtC13GameOverlayUI20GameOverlayUIService *)*((_QWORD *)&v83 + 1);
  v31 = v86;
  if (v83 == v86)
  {
    swift_bridgeObjectRelease_n(*((_QWORD *)&v83 + 1), 2);
    v32 = *(void (**)(char *, uint64_t))(v12 + 8);
    v32(v17, v11);
  }
  else
  {
    v33 = _stringCompareWithSmolCheck(_:_:expecting:)(v83, *((_QWORD *)&v83 + 1), v86, *((_QWORD *)&v86 + 1), 0);
    swift_bridgeObjectRelease(v30, v34, v35, v36, v37, v38, v39, v40);
    swift_bridgeObjectRelease(*((_TtC13GameOverlayUI20GameOverlayUIService **)&v31 + 1), v41, v42, v43, v44, v45, v46, v47);
    v32 = *(void (**)(char *, uint64_t))(v12 + 8);
    v32(v17, v11);
    if ((v33 & 1) == 0)
    {
      v65 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
      v66 = objc_msgSend(v65, "userInterfaceIdiom");

      v67 = v81;
      if (v66 == (id)1 || GKIsXRUIIdiomShouldUsePadUI())
      {
        (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v14, v20, v11);
        v68 = (objc_class *)type metadata accessor for DashboardSplitViewController(0);
        v83 = 0u;
        v84 = 0u;
        v85 = 0;
        v69 = objc_allocWithZone(v68);
        v70 = a1;
        v54 = (id)DashboardSplitViewController.init(launchContext:request:navigationProxy:)(v14, a1, &v83);
        v71 = swift_allocObject(&unk_1001009D8, 32, 7);
        v72 = v80;
        *(_QWORD *)(v71 + 16) = v80;
        *(_QWORD *)(v71 + 24) = v67;
        sub_10001B3C0(v72, v67);
        DashboardSplitViewController.dismissHandler.setter(sub_10001B398, v71);

      }
      else
      {
        type metadata accessor for JetDashboardViewController(0);
        (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v14, v20, v11);
        v73 = a1;
        v74 = v82;
        v75 = v82;
        v76 = (void *)JetDashboardViewController.__allocating_init(nibName:bundle:launchContext:request:)(0, 0, v74, v14, a1);
        v77 = v80;
        sub_10001B3C0(v80, v67);
        v54 = v76;
        dispatch thunk of BaseJetCollectionViewController.dismissHandler.setter(v77, v67);

      }
LABEL_24:
      v32(v20, v11);
      return v54;
    }
  }
  if (!a1 || (v48 = objc_msgSend(a1, "playerID")) == 0)
  {
    v49 = objc_msgSend((id)objc_opt_self(GKLocalPlayer), "localPlayer");
    v50 = objc_msgSend(v49, "internal");

    v48 = objc_msgSend(v50, "playerID");
  }
  v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
  v53 = v52;

  type metadata accessor for PlayerProfileViewController(0);
  v85 = 0;
  v83 = 0u;
  v84 = 0u;
  v54 = (id)PlayerProfileViewController.__allocating_init(playerId:navigationProxy:objectGraph:)(v51, v53, &v83, 0);
  v55 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v56 = objc_msgSend(v55, "userInterfaceIdiom");

  if (v56 == (id)1 || GKIsXRUIIdiomShouldUsePadUI())
  {
    v57 = objc_msgSend((id)objc_opt_self(UIButton), "_gkXmarkedCloseButtonWithTarget:action:", v54, "donePressed:");
    if (v57)
    {
      v58 = v57;
      v59 = String._bridgeToObjectiveC()();
      objc_msgSend(v58, "setAccessibilityIdentifier:", v59);

      v60 = objc_msgSend(v54, "navigationItem");
      v61 = objc_msgSend(objc_allocWithZone((Class)UIBarButtonItem), "initWithCustomView:", v58);
      objc_msgSend(v60, "setRightBarButtonItem:", v61);

    }
    v62 = v54;
    v64 = v80;
    v63 = v81;
    sub_10001B3C0(v80, v81);
    dispatch thunk of BaseJetCollectionViewController.dismissHandler.setter(v64, v63);

    v54 = objc_msgSend(objc_allocWithZone((Class)UINavigationController), "initWithRootViewController:", v62);
    goto LABEL_24;
  }
  v32(v20, v11);

  return v54;
}

uint64_t sub_100094FAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_100094FBC(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

unint64_t sub_100094FC4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100110668;
  if (!qword_100110668)
  {
    v1 = type metadata accessor for DashboardLaunchContext(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for DashboardLaunchContext, v1);
    atomic_store(result, (unint64_t *)&qword_100110668);
  }
  return result;
}

uint64_t sub_10009500C()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100095038()
{
  _BYTE *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = &v0[OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_dismissHandler];
  *v1 = 0;
  v1[1] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController__navigationController] = 0;
  v0[OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_alwaysShowDoneButton] = 1;
  v0[OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_requiresNavigationController] = 1;
  *(_QWORD *)&v0[OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_contentViewController] = 0;
  v2 = OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_effectView;
  *(_QWORD *)&v0[v2] = objc_msgSend(objc_allocWithZone((Class)UIVisualEffectView), "init");
  v0[OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_adjustTopConstraint] = 1;
  v3 = OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_daemonProxy;
  *(_QWORD *)&v0[v3] = objc_msgSend(objc_allocWithZone((Class)GKDaemonProxy), "init");
  *(_QWORD *)&v0[OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_GKScrollToTopViewTag] = 8400;
  swift_unknownObjectWeakInit(&v0[OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_remoteTarget], 0);
  *(_QWORD *)&v0[OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_dashboardAssetNames] = &_swiftEmptyDictionarySingleton;
  *(_QWORD *)&v0[OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_leaderboardSetAssetNames] = &_swiftEmptyDictionarySingleton;
  *(_QWORD *)&v0[OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_leaderboardAssetNames] = &_swiftEmptyDictionarySingleton;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001000D1080, "GameOverlayUI/GameCenterDashboardContentView.swift", 50, 2, 169, 0);
  __break(1u);
}

double sub_100095180()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  void (*v14)(char *, uint64_t);
  __n128 v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  double result;
  uint64_t v21;
  void (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v25 - v8;
  v10 = static GKLog.trace.getter(v7);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "GameController: Game Overlay dashboard was notified to dismiss.", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  v14 = *(void (**)(char *, uint64_t))(v3 + 8);
  v14(v9, v2);
  sub_100091EF0();
  if (qword_10010BB80 != -1)
    swift_once(&qword_10010BB80, sub_100093EA0);
  v16 = static GKLog.trace.getter(v15);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "GameController: Game Overlay dashboard was dismissed by the game controller.", v19, 2u);
    swift_slowDealloc(v19, -1, -1);
  }

  v14(v5, v2);
  v21 = v1 + OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_dismissHandler;
  v22 = *(void (**)(uint64_t))(v1
                                       + OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_dismissHandler);
  if (v22)
  {
    v23 = *(_QWORD *)(v21 + 8);
    v24 = swift_retain(v23);
    v22(v24);
    return sub_100050580((uint64_t)v22, v23);
  }
  return result;
}

void sub_100095374(void *a1)
{
  uint64_t v1;
  id v3;
  void *v4;
  id v5;
  id v6;

  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC13GameOverlayUI30DashboardContentViewController_alwaysShowDoneButton) == 1)
  {
    v3 = objc_msgSend((id)objc_opt_self(UIButton), "_gkXmarkedCloseButtonWithTarget:action:", v1, "donePressed:");
    if (v3)
    {
      v4 = v3;
      v5 = objc_msgSend(a1, "navigationItem");
      v6 = objc_msgSend(objc_allocWithZone((Class)UIBarButtonItem), "initWithCustomView:", v4);
      objc_msgSend(v5, "setRightBarButtonItem:", v6);

    }
  }
}

uint64_t sub_100095458()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100095484()
{
  uint64_t v0;

  sub_1000914DC(*(char **)(v0 + 16));
}

uint64_t sub_10009548C(uint64_t result)
{
  _GKIsClientAppUsingRTL = result;
  return result;
}

uint64_t sub_10009549C(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectWeakDestroy(a1, a2);
  return a1;
}

uint64_t sub_1000954C0()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000954E4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

double destroy for GameCenterDashboard(uint64_t a1)
{
  uint64_t v2;
  double result;

  swift_unknownObjectWeakDestroy(a1 + 16, v2);
  if (*(_QWORD *)(a1 + 24))
    *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 32)).n128_u64[0];
  return result;
}

uint64_t initializeWithCopy for GameCenterDashboard(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a1 + 16;
  v6 = a2 + 16;
  v7 = v4;
  swift_unknownObjectWeakCopyInit(v5, v6);
  v8 = *(_QWORD *)(a2 + 24);
  if (v8)
  {
    v9 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 32) = v9;
    swift_retain(v9);
  }
  else
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }
  return a1;
}

uint64_t assignWithCopy for GameCenterDashboard(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(void **)(a1 + 8);
  v5 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v5;
  v6 = v5;

  swift_unknownObjectWeakCopyAssign(a1 + 16, a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  if (!*(_QWORD *)(a1 + 24))
  {
    if (v7)
    {
      v10 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 24) = v7;
      *(_QWORD *)(a1 + 32) = v10;
      swift_retain(v10);
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    return a1;
  }
  if (!v7)
  {
    swift_release(*(_QWORD *)(a1 + 32));
    goto LABEL_7;
  }
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  swift_retain(v8);
  swift_release(v9);
  return a1;
}

uint64_t initializeWithTake for GameCenterDashboard(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_unknownObjectWeakTakeInit(a1 + 16, a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = v5;
  }
  else
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }
  return a1;
}

uint64_t assignWithTake for GameCenterDashboard(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);

  swift_unknownObjectWeakTakeAssign(a1 + 16, a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  if (!*(_QWORD *)(a1 + 24))
  {
    if (v5)
    {
      v8 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 24) = v5;
      *(_QWORD *)(a1 + 32) = v8;
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    return a1;
  }
  if (!v5)
  {
    swift_release(*(_QWORD *)(a1 + 32));
    goto LABEL_7;
  }
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  swift_release(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for GameCenterDashboard(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GameCenterDashboard(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for GameCenterDashboard()
{
  return &type metadata for GameCenterDashboard;
}

uint64_t sub_100095824(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E5650, 1);
}

_QWORD *sub_100095834(uint64_t a1, _QWORD *a2)
{
  initializeWithCopy for GameCenterDashboardViewController(a2, a1);
  return a2;
}

uint64_t sub_100095868(uint64_t a1)
{
  destroy for GameCenterDashboardViewController(a1);
  return a1;
}

uint64_t sub_100095894(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003304(&qword_1001106E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

double destroy for GameCenterDashboardViewController(uint64_t a1)
{
  uint64_t v2;
  double result;

  swift_unknownObjectWeakDestroy(a1 + 8, v2);
  if (*(_QWORD *)(a1 + 16))
    *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 24)).n128_u64[0];
  return result;
}

_QWORD *initializeWithCopy for GameCenterDashboardViewController(_QWORD *a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  _OWORD *v6;
  _QWORD *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;

  v5 = a2 + 8;
  v4 = *(void **)a2;
  *a1 = *(_QWORD *)a2;
  v6 = a1 + 2;
  v7 = a1 + 1;
  v8 = v4;
  swift_unknownObjectWeakCopyInit(v7, v5);
  v9 = *(_QWORD *)(a2 + 16);
  if (v9)
  {
    v10 = *(_QWORD *)(a2 + 24);
    a1[2] = v9;
    a1[3] = v10;
    swift_retain(v10);
  }
  else
  {
    *v6 = *(_OWORD *)(a2 + 16);
  }
  return a1;
}

uint64_t assignWithCopy for GameCenterDashboardViewController(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = a2 + 8;
  v4 = *(void **)a2;
  v6 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v7 = a1 + 8;
  v8 = v4;

  swift_unknownObjectWeakCopyAssign(v7, v5);
  v9 = *(_QWORD *)(a2 + 16);
  if (!*(_QWORD *)(a1 + 16))
  {
    if (v9)
    {
      v12 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = v9;
      *(_QWORD *)(a1 + 24) = v12;
      swift_retain(v12);
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    return a1;
  }
  if (!v9)
  {
    swift_release(*(_QWORD *)(a1 + 24));
    goto LABEL_7;
  }
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = v10;
  swift_retain(v10);
  swift_release(v11);
  return a1;
}

_QWORD *initializeWithTake for GameCenterDashboardViewController(_QWORD *a1, _QWORD *a2)
{
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = *a2;
  v4 = a1 + 2;
  swift_unknownObjectWeakTakeInit(a1 + 1, a2 + 1);
  v5 = a2[2];
  if (v5)
  {
    v6 = a2[3];
    a1[2] = v5;
    a1[3] = v6;
  }
  else
  {
    *v4 = *((_OWORD *)a2 + 1);
  }
  return a1;
}

uint64_t assignWithTake for GameCenterDashboardViewController(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a2 + 1;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *a2;
  v6 = a1 + 8;

  swift_unknownObjectWeakTakeAssign(v6, v4);
  v7 = a2[2];
  if (!*(_QWORD *)(a1 + 16))
  {
    if (v7)
    {
      v10 = a2[3];
      *(_QWORD *)(a1 + 16) = v7;
      *(_QWORD *)(a1 + 24) = v10;
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    return a1;
  }
  if (!v7)
  {
    swift_release(*(_QWORD *)(a1 + 24));
    goto LABEL_7;
  }
  v8 = a2[3];
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  swift_release(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for GameCenterDashboardViewController(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GameCenterDashboardViewController(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for GameCenterDashboardViewController()
{
  return &type metadata for GameCenterDashboardViewController;
}

unint64_t sub_100095BE8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001106F0;
  if (!qword_1001106F0)
  {
    v1 = sub_100006E54(&qword_1001106E8);
    sub_100095C54();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001106F0);
  }
  return result;
}

unint64_t sub_100095C54()
{
  unint64_t result;

  result = qword_1001106F8;
  if (!qword_1001106F8)
  {
    result = swift_getWitnessTable(&unk_1000CCE14, &type metadata for GameCenterDashboardViewController);
    atomic_store(result, (unint64_t *)&qword_1001106F8);
  }
  return result;
}

void sub_100095C9C()
{
  _GKIsRemoteUIUsingPadIdiom = 0;
}

unint64_t sub_100095CAC()
{
  unint64_t result;

  result = qword_100110700;
  if (!qword_100110700)
  {
    result = swift_getWitnessTable(&unk_1000CCE64, &type metadata for GameCenterDashboardViewController);
    atomic_store(result, (unint64_t *)&qword_100110700);
  }
  return result;
}

_QWORD *sub_100095CF8@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, uint64_t a7@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t started;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(_QWORD *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  void (*v46)(void);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  char **p_types;
  id v55;
  void *v56;
  id v57;
  id v58;
  id v59;
  id v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *result;
  uint64_t v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  uint8_t *v77;
  _QWORD *v78;
  void *v79;
  uint64_t v80;
  id v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  void *v86;
  void *v87;
  id v88;
  id v89;
  id v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  NSObject *v102;
  os_log_type_t v103;
  uint8_t *v104;
  _QWORD *v105;
  void *v106;
  uint64_t v107;
  _QWORD *v108;
  char v109;
  char v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void (*v115)(char *, _QWORD, uint64_t);
  uint64_t v116;
  char *v117;
  void (*v118)(char *, uint64_t, uint64_t);
  uint64_t v119;
  int *v120;
  char v121;
  uint64_t v122;
  uint64_t v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  char *v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  id v171;
  void (*v172)(void);
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  char *v179;
  void (*v180)(_QWORD *, uint64_t);
  _QWORD *v181;
  char *v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  char *v196;
  char *v197;
  int *v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  int v203;
  int v204;
  char *v205;
  id v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  id v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  _QWORD v216[19];
  __int128 v217;
  ValueMetadata *v218;
  unint64_t v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  uint64_t v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  uint64_t v239;
  _QWORD v240[3];
  uint64_t v241;
  uint64_t v242;
  _QWORD v243[19];
  _OWORD v244[9];
  uint64_t v245;
  id v246;
  _BYTE v247[144];
  _BYTE v248[152];

  v204 = a6;
  v203 = a5;
  v202 = a4;
  v210 = a3;
  v211 = a2;
  v206 = a1;
  v8 = sub_100003304(&qword_10010E730);
  __chkstk_darwin(v8);
  v196 = (char *)&v170 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v215 = sub_100003304(&qword_10010BE90);
  __chkstk_darwin(v215);
  v197 = (char *)&v170 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ActionMetrics(0);
  v186 = *(_QWORD *)(v11 - 8);
  v187 = v11;
  __chkstk_darwin(v11);
  v182 = (char *)&v170 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v185 = type metadata accessor for FlowAction(0);
  __chkstk_darwin(v185);
  v189 = (char *)&v170 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v188 = sub_100003304(&qword_10010E738);
  v192 = *(_QWORD *)(v188 - 8);
  __chkstk_darwin(v188);
  v193 = v14;
  v194 = (uint64_t)&v170 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v195 = (char *)&v170 - v16;
  v17 = type metadata accessor for Game(0);
  v212 = *(_QWORD *)(v17 - 8);
  v213 = v17;
  __chkstk_darwin(v17);
  v175 = (uint64_t)&v170 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v174 = (uint64_t)&v170 - v20;
  v21 = sub_100003304(&qword_1001116A0);
  __chkstk_darwin(v21);
  v205 = (char *)&v170 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v201 = type metadata accessor for AccessPointAnchoring(0);
  v214 = *(_QWORD *)(v201 - 8);
  __chkstk_darwin(v201);
  v199 = (char *)&v170 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_100003304(&qword_10010CC10);
  __chkstk_darwin(v24);
  v177 = (char *)&v170 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_100003304(&qword_10010CA78);
  __chkstk_darwin(v26);
  v200 = (uint64_t)&v170 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v173 = (uint64_t *)((char *)&v170 - v29);
  v30 = type metadata accessor for OverlayBootstrap(0);
  __chkstk_darwin(v30);
  v32 = (char *)&v170 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  started = type metadata accessor for JetStartUpCoordinator(0);
  v34 = *(_QWORD *)(started - 8);
  __chkstk_darwin(started);
  v36 = (uint64_t *)((char *)&v170 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v37);
  v39 = (uint64_t *)((char *)&v170 - v38);
  v40 = (int *)type metadata accessor for AccessPointView(0);
  v41 = a7;
  v42 = a7 + v40[5];
  if (qword_10010BBD8 != -1)
    swift_once(&qword_10010BBD8, sub_1000B47F0);
  sub_100007878(qword_1001233E8 + OBJC_IVAR____TtC13GameOverlayUI24ConnectionContextManager_overlayBootstrap, (uint64_t)v32, type metadata accessor for OverlayBootstrap);
  State.wrappedValue.getter(v39);
  v179 = v32;
  sub_1000106F0((uint64_t)v32, type metadata accessor for OverlayBootstrap);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v34 + 16))(v36, v39, started);
  v181 = v36;
  State.init(wrappedValue:)(v36, started);
  v43 = *(void (**)(_QWORD *, uint64_t))(v34 + 8);
  v191 = started;
  v180 = v43;
  v43(v39, started);
  v44 = a7 + v40[7];
  sub_10005A0B0((uint64_t)v248);
  v208 = v44;
  sub_10001A0AC((uint64_t)v248, v44, &qword_10010E740);
  v45 = v213;
  v46 = *(void (**)(void))(v212 + 56);
  v207 = a7 + v40[8];
  v172 = v46;
  v46();
  v47 = type metadata accessor for GameDashboardLaunchContext(0);
  v48 = swift_allocObject(v47, *(unsigned int *)(v47 + 48), *(unsigned __int16 *)(v47 + 52));
  *(_BYTE *)(v48 + 16) = 0;
  v49 = v48 + OBJC_IVAR____TtC13GameOverlayUI26GameDashboardLaunchContext__action;
  v50 = type metadata accessor for LaunchDashboardAction(0);
  v51 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v49, 1, 1, v50);
  ObservationRegistrar.init()(v51);
  v198 = v40;
  v52 = (uint64_t *)(v41 + v40[6]);
  *v52 = v48;
  v52[1] = 0;
  v53 = v41;
  p_types = &stru_100108FF8.types;
  v209 = v53;
  v190 = v34;
  v178 = v48;
  v55 = v211;
  v183 = v42;
  v184 = v39;
  if (v211)
  {
    v56 = (void *)objc_opt_self(NSKeyedArchiver);
    swift_retain(v48);
    v57 = v55;
    v58 = objc_msgSend(v57, "internal");
    v246 = 0;
    v59 = objc_msgSend(v56, "archivedDataWithRootObject:requiringSecureCoding:error:", v58, 1, &v246);

    v60 = v246;
    if (v59)
    {
      v61 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v59);
      v63 = v62;

      sub_1000509C8(0, &qword_10010E3C0, NSKeyedUnarchiver_ptr);
      v64 = sub_1000509C8(0, &qword_10010E3C8, GKGameInternal_ptr);
      result = (_QWORD *)static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v64, v61, v63, v64);
      v66 = v53;
      v82 = result;
      v171 = v57;
      v176 = 0;
      if (!result)
        goto LABEL_46;
      v83 = type metadata accessor for Date(0);
      v84 = (uint64_t)v177;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v83 - 8) + 56))(v177, 1, 1, v83);
      v85 = v173;
      sub_1000863B8(v82, v84, v173);
      sub_100038198(v61, v63);

      ((void (*)(uint64_t *, _QWORD, uint64_t, uint64_t))v172)(v85, 0, 1, v45);
      sub_100010D00((uint64_t)v85, v207, &qword_10010CA78);
      v67 = v214;
      v68 = v206;
      v69 = v66;
      p_types = &stru_100108FF8.types;
      if (!v206)
        goto LABEL_17;
LABEL_14:
      v81 = v68;
      goto LABEL_19;
    }
    v70 = v60;
    v71 = _convertNSErrorToError(_:)(v60);

    swift_willThrow(v72);
    v69 = v53;
    if (qword_10010BAA0 != -1)
      swift_once(&qword_10010BAA0, sub_100004DCC);
    v176 = 0;
    v73 = type metadata accessor for Logger(0);
    sub_100004E8C(v73, (uint64_t)qword_1001232D8);
    swift_errorRetain(v71);
    v74 = swift_errorRetain(v71);
    v75 = Logger.logObject.getter(v74);
    v76 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v75, v76))
    {
      v77 = (uint8_t *)swift_slowAlloc(12, -1);
      v78 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v77 = 138412290;
      swift_errorRetain(v71);
      v79 = (void *)_swift_stdlib_bridgeErrorToNSError(v71);
      v246 = v79;
      v69 = v209;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v246, v247);
      *v78 = v79;
      swift_errorRelease(v71);
      swift_errorRelease(v71);
      _os_log_impl((void *)&_mh_execute_header, v75, v76, "Game could not be serialized: %@", v77, 0xCu);
      v80 = sub_100003304(&qword_10010EB00);
      swift_arrayDestroy(v78, 1, v80);
      swift_slowDealloc(v78, -1, -1);
      swift_slowDealloc(v77, -1, -1);

      swift_errorRelease(v71);
    }
    else
    {

      swift_errorRelease(v71);
      swift_errorRelease(v71);
      swift_errorRelease(v71);

    }
    v67 = v214;
    v68 = v206;
    p_types = (char **)(&stru_100108FF8 + 8);
    if (v206)
      goto LABEL_14;
  }
  else
  {
    swift_retain(v48);
    v176 = 0;
    v67 = v214;
    v68 = v206;
    v69 = v53;
    if (v206)
      goto LABEL_14;
  }
LABEL_17:
  v86 = (void *)objc_opt_self(GKLocalPlayer);
  v81 = objc_msgSend(v86, "currentLocalPlayer");
  if (!v81)
    v81 = objc_msgSend(v86, "local");
LABEL_19:
  v87 = (void *)objc_opt_self(NSKeyedArchiver);
  v177 = (char *)v68;
  v88 = objc_msgSend(v81, p_types[408]);
  v246 = 0;
  v89 = objc_msgSend(v87, "archivedDataWithRootObject:requiringSecureCoding:error:", v88, 1, &v246);

  v90 = v246;
  v206 = v81;
  if (!v89)
  {
    v98 = v90;
    v97 = _convertNSErrorToError(_:)(v90);

    swift_willThrow(v99);
    v96 = (uint64_t)v205;
    goto LABEL_23;
  }
  v91 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v89);
  v93 = v92;

  sub_1000509C8(0, &qword_10010E3C0, NSKeyedUnarchiver_ptr);
  v94 = sub_1000509C8(0, &qword_10010E768, GKPlayerInternal_ptr);
  v95 = v176;
  result = (_QWORD *)static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v94, v91, v93, v94);
  v96 = (uint64_t)v205;
  if (v95)
  {
    v97 = v95;
    sub_100038198(v91, v93);
    v67 = v214;
LABEL_23:
    if (qword_10010BAA0 != -1)
      swift_once(&qword_10010BAA0, sub_100004DCC);
    v100 = type metadata accessor for Logger(0);
    sub_100004E8C(v100, (uint64_t)qword_1001232D8);
    swift_errorRetain(v97);
    v101 = swift_errorRetain(v97);
    v102 = Logger.logObject.getter(v101);
    v103 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v102, v103))
    {
      v104 = (uint8_t *)swift_slowAlloc(12, -1);
      v105 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v104 = 138412290;
      swift_errorRetain(v97);
      v106 = (void *)_swift_stdlib_bridgeErrorToNSError(v97);
      v246 = v106;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v246, v247);
      *v105 = v106;
      v69 = v209;
      swift_errorRelease(v97);
      swift_errorRelease(v97);
      _os_log_impl((void *)&_mh_execute_header, v102, v103, "Player could not be serialized: %@", v104, 0xCu);
      v107 = sub_100003304(&qword_10010EB00);
      swift_arrayDestroy(v105, 1, v107);
      v108 = v105;
      v67 = v214;
      swift_slowDealloc(v108, -1, -1);
      swift_slowDealloc(v104, -1, -1);

      swift_errorRelease(v97);
    }
    else
    {
      swift_errorRelease(v97);
      swift_errorRelease(v97);
      swift_errorRelease(v97);

    }
    sub_10001A0AC((uint64_t)v248, (uint64_t)v243, &qword_10010E740);
    v109 = v204;
    v110 = v203;
    v111 = v202;
    v112 = v213;
    goto LABEL_31;
  }
  v112 = v213;
  if (result)
  {
    sub_1000648B0(result, (uint64_t)v244);
    v226 = v244[6];
    v227 = v244[7];
    v228 = v244[8];
    v229 = v245;
    v222 = v244[2];
    v223 = v244[3];
    v224 = v244[4];
    v225 = v244[5];
    v220 = v244[0];
    v221 = v244[1];
    sub_100038198(v91, v93);
    v236 = v226;
    v237 = v227;
    v238 = v228;
    v239 = v229;
    v232 = v222;
    v233 = v223;
    v234 = v224;
    v235 = v225;
    v230 = v220;
    v231 = v221;
    property wrapper backing initializer of Shelf.items(&v230);
    v113 = v208;
    sub_10001A0AC(v208, (uint64_t)&v246, &qword_10010E740);
    sub_100019FF0(v244);
    sub_10005A3B4(&v246, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10005A418);
    sub_10001A0AC((uint64_t)&v230, v113, &qword_10010E740);
    sub_10001A0AC((uint64_t)&v230, (uint64_t)v243, &qword_10010E740);
    v109 = v204;
    v110 = v203;
    v111 = v202;
    v67 = v214;
LABEL_31:
    sub_10001A0AC((uint64_t)v243, (uint64_t)&v246, &qword_10010E740);
    sub_100010CBC(v210, v96, &qword_1001116A0);
    v114 = v201;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48))(v96, 1, v201) == 1)
    {
      v115 = *(void (**)(char *, _QWORD, uint64_t))(v67 + 104);
      v116 = v67;
      v117 = v199;
      v115(v199, enum case for AccessPointAnchoring.topLeading(_:), v114);
      sub_100010ED0(v96, &qword_1001116A0);
      v118 = *(void (**)(char *, uint64_t, uint64_t))(v116 + 32);
    }
    else
    {
      v119 = v96;
      v118 = *(void (**)(char *, uint64_t, uint64_t))(v67 + 32);
      v117 = v199;
      v118(v199, v119, v114);
    }
    v120 = v198;
    v118((char *)(v69 + v198[9]), (uint64_t)v117, v114);
    if (v111 == 6)
      v121 = 1;
    else
      v121 = v111;
    *(_BYTE *)(v69 + v120[10]) = v121;
    *(_BYTE *)(v69 + v120[11]) = v110 & 1;
    *(_BYTE *)(v69 + v120[12]) = v109 & 1;
    v122 = v200;
    sub_100010CBC(v207, v200, &qword_10010CA78);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v212 + 48))(v122, 1, v112) == 1)
    {
      sub_100010ED0(v122, &qword_10010CA78);
      sub_10001A0AC(v208, (uint64_t)&v220, &qword_10010E740);
      sub_10001A0AC((uint64_t)&v220, (uint64_t)&v230, &qword_10010E740);
      if (sub_10005A0D0((uint64_t)&v230) != 1)
      {
        v218 = &type metadata for PlayNowPageIntent;
        v219 = sub_10005A0E8();
        v123 = swift_allocObject(&unk_100100C20, 168, 7);
        *(_QWORD *)&v217 = v123;
        v124 = v237;
        *(_OWORD *)(v123 + 112) = v236;
        *(_OWORD *)(v123 + 128) = v124;
        *(_OWORD *)(v123 + 144) = v238;
        *(_QWORD *)(v123 + 160) = v239;
        v125 = v233;
        *(_OWORD *)(v123 + 48) = v232;
        *(_OWORD *)(v123 + 64) = v125;
        v126 = v235;
        *(_OWORD *)(v123 + 80) = v234;
        *(_OWORD *)(v123 + 96) = v126;
        v127 = v231;
        *(_OWORD *)(v123 + 16) = v230;
        *(_OWORD *)(v123 + 32) = v127;
        sub_10005A194(&v217, (uint64_t)v240);
        sub_10001A0AC((uint64_t)&v220, (uint64_t)v216, &qword_10010E740);
        v128 = (uint64_t)sub_100019FF0(v216);
LABEL_42:
        v142 = v182;
        static ActionMetrics.notInstrumented.getter(v128);
        v143 = v241;
        v144 = v242;
        v145 = sub_100003C28(v240, v241);
        v146 = v185;
        v147 = v189;
        v148 = static FlowDestination.page<A>(whatPage:)((uint64_t)v145, v143, v144, &v189[*(int *)(v185 + 24)]);
        v149 = static FlowActionPresentation.tabSelect.getter(v148);
        v151 = v150;
        *(_QWORD *)v147 = 0x7265764F656D6167;
        *((_QWORD *)v147 + 1) = 0xEB0000000079616CLL;
        (*(void (**)(char *, char *, uint64_t))(v186 + 32))(&v147[*(int *)(v146 + 20)], v142, v187);
        v152 = (uint64_t *)&v147[*(int *)(v146 + 28)];
        *v152 = v149;
        v152[1] = v151;
        v153 = sub_1000035B4(&qword_10010E750, type metadata accessor for FlowAction, (uint64_t)&protocol conformance descriptor for FlowAction);
        v154 = sub_1000035B4(&qword_10010E758, type metadata accessor for FlowAction, (uint64_t)&protocol conformance descriptor for FlowAction);
        v155 = (uint64_t)v195;
        FlowAuthority.init(content:)(v147, v146, v153, v154);
        *(_QWORD *)(v155 + *(int *)(v188 + 28)) = 0;
        sub_100010CBC(v155, v209, &qword_10010E738);
        v156 = (uint64_t)v179;
        sub_100007878(qword_1001233E8 + OBJC_IVAR____TtC13GameOverlayUI24ConnectionContextManager_overlayBootstrap, (uint64_t)v179, type metadata accessor for OverlayBootstrap);
        v157 = v181;
        State.wrappedValue.getter(v181);
        sub_1000106F0(v156, type metadata accessor for OverlayBootstrap);
        v158 = type metadata accessor for JetStartUpProcedure(0);
        v159 = (uint64_t)v196;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v158 - 8) + 56))(v196, 1, 1, v158);
        v160 = v194;
        sub_100010CBC(v155, v194, &qword_10010E738);
        v161 = *(unsigned __int8 *)(v192 + 80);
        v162 = (v161 + 16) & ~v161;
        v163 = (v193 + v162 + 7) & 0xFFFFFFFFFFFFFFF8;
        v164 = (v163 + 159) & 0xFFFFFFFFFFFFFFF8;
        v165 = swift_allocObject(&unk_100100C48, v164 + 8, v161 | 7);
        sub_10001A0AC(v160, v165 + v162, &qword_10010E738);
        sub_10001A0AC((uint64_t)&v246, v165 + v163, &qword_10010E740);
        v166 = v178;
        *(_QWORD *)(v165 + v164) = v178;
        swift_retain(v166);
        v167 = v184;
        JetStartUpCoordinator.extend(startUpProcedure:withDependencies:)(v159, sub_100097E68, v165);
        swift_release(v166);

        swift_release(v165);
        sub_100010ED0(v210, &qword_1001116A0);
        sub_100010ED0(v159, &qword_10010E730);
        v168 = v191;
        v180(v157, v191);
        sub_100010ED0(v155, &qword_10010E738);
        v169 = (uint64_t)v197;
        *(_QWORD *)&v197[*(int *)(v215 + 28)] = 0;
        (*(void (**)(uint64_t, _QWORD *, uint64_t))(v190 + 32))(v169, v167, v168);
        sub_100004624(v240);
        return (_QWORD *)sub_100010D00(v169, v183, &qword_10010BE90);
      }
      sub_10005A3B4(v243, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10005A418);
      __break(1u);
    }
    else
    {
      v129 = v122;
      v130 = v174;
      sub_100010F0C(v129, v174, type metadata accessor for Game);
      v131 = v175;
      sub_100007878(v130, v175, type metadata accessor for Game);
      sub_10001A0AC(v208, (uint64_t)&v220, &qword_10010E740);
      sub_10001A0AC((uint64_t)&v220, (uint64_t)&v230, &qword_10010E740);
      if (sub_10005A0D0((uint64_t)&v230) != 1)
      {
        sub_10001A0AC((uint64_t)&v220, (uint64_t)v216, &qword_10010E740);
        sub_100019FF0(v216);
        sub_1000106F0(v130, type metadata accessor for Game);
        v132 = type metadata accessor for GameDashboardPageIntent(0);
        v218 = (ValueMetadata *)v132;
        v219 = sub_1000035B4(&qword_10010E760, type metadata accessor for GameDashboardPageIntent, (uint64_t)&protocol conformance descriptor for GameDashboardPageIntent);
        v133 = sub_1000052B0(&v217);
        sub_100010F0C(v131, (uint64_t)v133, type metadata accessor for Game);
        v134 = (char *)v133 + *(int *)(v132 + 20);
        v135 = v231;
        *(_OWORD *)v134 = v230;
        *((_OWORD *)v134 + 1) = v135;
        v136 = v232;
        v137 = v233;
        v138 = v235;
        *((_OWORD *)v134 + 4) = v234;
        *((_OWORD *)v134 + 5) = v138;
        *((_OWORD *)v134 + 2) = v136;
        *((_OWORD *)v134 + 3) = v137;
        v139 = v236;
        v140 = v237;
        v141 = v238;
        *((_QWORD *)v134 + 18) = v239;
        *((_OWORD *)v134 + 7) = v140;
        *((_OWORD *)v134 + 8) = v141;
        *((_OWORD *)v134 + 6) = v139;
        v128 = sub_10005A194(&v217, (uint64_t)v240);
        goto LABEL_42;
      }
    }
    result = sub_10005A3B4(v243, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10005A418);
    __break(1u);
  }
  __break(1u);
LABEL_46:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for AccessPointView(uint64_t a1)
{
  uint64_t result;

  result = qword_1001107E0;
  if (!qword_1001107E0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AccessPointView);
  return result;
}

uint64_t sub_100097018(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, char *, uint64_t);
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _OWORD v39[9];
  uint64_t v40;
  _OWORD v41[9];
  uint64_t v42;

  v37 = a2;
  v38 = a3;
  v3 = type metadata accessor for Dependency(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003304(&qword_10010CC18);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (_QWORD *)((char *)&v34 - v12);
  sub_100003304(&qword_10010E738);
  State.projectedValue.getter(v13);
  v14 = sub_100003304(&qword_10010E770);
  sub_100010CBC((uint64_t)v13, (uint64_t)v10, &qword_10010CC18);
  v15 = *(unsigned __int8 *)(v8 + 80);
  v16 = (v15 + 16) & ~v15;
  v17 = swift_allocObject(&unk_100100C70, v16 + v9, v15 | 7);
  sub_10001A0AC((uint64_t)v10, v17 + v16, &qword_10010CC18);
  Dependency.init<A>(satisfying:with:)(v14, sub_10005A56C, v17, v14);
  type metadata accessor for BaseObjectGraph(0);
  v18 = sub_100003304(&qword_10010E778);
  v19 = *(unsigned __int8 *)(v4 + 80);
  v20 = (v19 + 32) & ~v19;
  v21 = v20 + *(_QWORD *)(v4 + 72);
  v35 = v19 | 7;
  v36 = v18;
  v22 = swift_allocObject(v18, v21, v19 | 7);
  v34 = xmmword_1000C9D90;
  *(_OWORD *)(v22 + 16) = xmmword_1000C9D90;
  v23 = *(void (**)(uint64_t, char *, uint64_t))(v4 + 16);
  v23(v22 + v20, v6, v3);
  v24 = BaseObjectGraph.__allocating_init(name:_:)(0, 0xE000000000000000, v22);
  v25 = *(void (**)(char *, uint64_t))(v4 + 8);
  v25(v6, v3);
  v26 = (uint64_t)v13;
  v27 = v37;
  sub_100010ED0(v26, &qword_10010CC18);
  sub_10001A0AC((uint64_t)v27, (uint64_t)v41, &qword_10010E740);
  if (sub_10005A0D0((uint64_t)v41) == 1)
  {
    swift_retain(v24);
    v28 = BaseObjectGraph.__allocating_init(name:_:)(0, 0xE000000000000000, &_swiftEmptyArrayStorage);
  }
  else
  {
    v39[6] = v41[6];
    v39[7] = v41[7];
    v39[8] = v41[8];
    v40 = v42;
    v39[2] = v41[2];
    v39[3] = v41[3];
    v39[4] = v41[4];
    v39[5] = v41[5];
    v39[0] = v41[0];
    v39[1] = v41[1];
    swift_retain(v24);
    sub_10005A3B4(v27, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10005A2FC);
    Dependency.init<A>(satisfying:with:)(&type metadata for Player, v39, &type metadata for Player);
    v29 = swift_allocObject(v36, v21, v35);
    *(_OWORD *)(v29 + 16) = v34;
    v23(v29 + v20, v6, v3);
    v28 = BaseObjectGraph.__allocating_init(name:_:)(0, 0xE000000000000000, v29);
    v25(v6, v3);
  }
  v30 = type metadata accessor for GameDashboardLaunchContext(0);
  *(_QWORD *)&v39[0] = v38;
  swift_retain(v38);
  Dependency.init<A>(satisfying:with:)(v30, v39, v30);
  swift_retain(v24);
  v31 = dispatch thunk of BaseObjectGraph.adding(allDependenciesOf:)(v28);
  swift_release(v24);
  swift_retain(v31);
  v32 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v6);
  swift_release(v28);
  swift_release_n(v31, 2);
  swift_release_n(v24, 2);
  v25(v6, v3);
  return v32;
}

uint64_t sub_100097398@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t started;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t OpaqueTypeConformance2;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD v91[2];
  _QWORD v92[19];
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  _BYTE v103[152];
  _OWORD v104[9];
  uint64_t v105;

  v2 = v1;
  v90 = a1;
  v89 = sub_100003304(&qword_100110838);
  __chkstk_darwin(v89);
  v4 = (char *)&v68 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  started = type metadata accessor for JetStartUpDecoration(0);
  v84 = *(_QWORD *)(started - 8);
  v85 = started;
  __chkstk_darwin(started);
  v83 = (char *)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AccessPointView(0);
  v72 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v73 = v8;
  v74 = (uint64_t)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for JetStartUpCoordinator(0);
  v77 = *(_QWORD *)(v9 - 8);
  v78 = v9;
  __chkstk_darwin(v9);
  v75 = (char *)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v86 = (char **)((char *)&v68 - v12);
  v13 = sub_100003304(&qword_10010E828);
  v80 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v79 = (char *)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100003304(&qword_100110840);
  v82 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v76 = (char *)&v68 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v81 = (char *)&v68 - v18;
  v19 = sub_100003304(&qword_10010CA78);
  __chkstk_darwin(v19);
  v21 = (char *)&v68 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for Game(0);
  v88 = *(_QWORD *)(v22 - 8);
  v23 = *(_QWORD *)(v88 + 64);
  __chkstk_darwin(v22);
  v71 = (uint64_t)&v68 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v87 = (uint64_t)&v68 - v25;
  sub_10001A0AC(v2 + *(int *)(v7 + 28), (uint64_t)v103, &qword_10010E740);
  sub_10001A0AC((uint64_t)v103, (uint64_t)v104, &qword_10010E740);
  v26 = sub_10005A0D0((uint64_t)v104);
  v27 = v89;
  if (v26 == 1)
    goto LABEL_4;
  v69 = v13;
  v70 = v15;
  v68 = v4;
  v99 = v104[6];
  v100 = v104[7];
  v101 = v104[8];
  v102 = v105;
  v95 = v104[2];
  v96 = v104[3];
  v97 = v104[4];
  v98 = v104[5];
  v28 = v2 + *(int *)(v7 + 32);
  v93 = v104[0];
  v94 = v104[1];
  sub_100010CBC(v28, (uint64_t)v21, &qword_10010CA78);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v88 + 48))(v21, 1, v22) == 1)
  {
    sub_100010ED0((uint64_t)v21, &qword_10010CA78);
    v27 = v89;
    v4 = v68;
    v13 = v69;
    v15 = v70;
LABEL_4:
    swift_storeEnumTagMultiPayload(v4, v27, 1);
    v29 = sub_100011054((unint64_t *)&qword_10010E848, &qword_10010E828, (uint64_t)&protocol conformance descriptor for Jet<A, B, C>);
    v92[0] = v13;
    v92[1] = v29;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v92, &opaque type descriptor for <<opaque return type of View.startUpDecoration(_:)>>, 1);
    return _ConditionalContent<>.init(storage:)(v4, v15, &type metadata for EmptyView, OpaqueTypeConformance2, &protocol witness table for EmptyView);
  }
  v32 = (uint64_t)v21;
  v33 = v87;
  sub_100010F0C(v32, v87, type metadata accessor for Game);
  sub_10001A0AC((uint64_t)v103, (uint64_t)v92, &qword_10010E740);
  sub_100019FF0(v92);
  sub_100003304(&qword_10010BE90);
  v34 = v86;
  State.wrappedValue.getter(v86);
  v35 = v74;
  sub_100007878(v2, v74, type metadata accessor for AccessPointView);
  v36 = v71;
  sub_100007878(v33, v71, type metadata accessor for Game);
  v37 = *(unsigned __int8 *)(v72 + 80);
  v38 = (v37 + 16) & ~v37;
  v39 = (v73 + v38 + 7) & 0xFFFFFFFFFFFFFFF8;
  v40 = *(unsigned __int8 *)(v88 + 80);
  v41 = (v40 + v39 + 152) & ~v40;
  v42 = swift_allocObject(&unk_100100C98, v41 + v23, v37 | v40 | 7);
  sub_100010F0C(v35, v42 + v38, type metadata accessor for AccessPointView);
  v43 = v42 + v39;
  v44 = v100;
  *(_OWORD *)(v43 + 96) = v99;
  *(_OWORD *)(v43 + 112) = v44;
  *(_OWORD *)(v43 + 128) = v101;
  *(_QWORD *)(v43 + 144) = v102;
  v45 = v96;
  *(_OWORD *)(v43 + 32) = v95;
  *(_OWORD *)(v43 + 48) = v45;
  v46 = v98;
  *(_OWORD *)(v43 + 64) = v97;
  *(_OWORD *)(v43 + 80) = v46;
  v47 = v94;
  *(_OWORD *)v43 = v93;
  *(_OWORD *)(v43 + 16) = v47;
  sub_100010F0C(v36, v42 + v41, type metadata accessor for Game);
  v48 = v77;
  v49 = v78;
  v50 = v75;
  (*(void (**)(char *, _QWORD *, uint64_t))(v77 + 16))(v75, v34, v78);
  v88 = type metadata accessor for AccessPointPageView(0);
  v51 = type metadata accessor for _JetViewDefaultWorking(0);
  v52 = type metadata accessor for _JetViewDefaultFailed(0);
  v53 = sub_1000035B4(&qword_10010E830, type metadata accessor for AccessPointPageView, (uint64_t)&protocol conformance descriptor for AccessPointPageView);
  v54 = sub_1000035B4(&qword_10010E838, (uint64_t (*)(uint64_t))&type metadata accessor for _JetViewDefaultWorking, (uint64_t)&protocol conformance descriptor for _JetViewDefaultWorking);
  v55 = sub_1000035B4(&qword_10010E840, (uint64_t (*)(uint64_t))&type metadata accessor for _JetViewDefaultFailed, (uint64_t)&protocol conformance descriptor for _JetViewDefaultFailed);
  v56 = v79;
  Jet.init(startUpWith:working:failed:content:)(v50, &j___s18_JetEngine_SwiftUI01_A18ViewDefaultWorkingVACycfC, 0, sub_10009890C, 0, sub_10009AB3C, v42, v88, v51, v52, v53, v54, v55);
  (*(void (**)(_QWORD *, uint64_t))(v48 + 8))(v86, v49);
  v58 = v83;
  v57 = v84;
  v59 = v85;
  (*(void (**)(char *, _QWORD, uint64_t))(v84 + 104))(v83, enum case for JetStartUpDecoration.none(_:), v85);
  v60 = sub_100011054((unint64_t *)&qword_10010E848, &qword_10010E828, (uint64_t)&protocol conformance descriptor for Jet<A, B, C>);
  v61 = v76;
  v62 = v69;
  View.startUpDecoration(_:)(v58, v69, v60);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v58, v59);
  (*(void (**)(char *, uint64_t))(v80 + 8))(v56, v62);
  v64 = v81;
  v63 = v82;
  v65 = v70;
  (*(void (**)(char *, char *, uint64_t))(v82 + 32))(v81, v61, v70);
  v66 = v68;
  (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v68, v64, v65);
  swift_storeEnumTagMultiPayload(v66, v89, 0);
  v91[0] = v62;
  v91[1] = v60;
  v67 = swift_getOpaqueTypeConformance2(v91, &opaque type descriptor for <<opaque return type of View.startUpDecoration(_:)>>, 1);
  _ConditionalContent<>.init(storage:)(v66, v65, &type metadata for EmptyView, v67, &protocol witness table for EmptyView);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v64, v65);
  return sub_1000106F0(v87, type metadata accessor for Game);
}

uint64_t sub_100097AEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  int *v9;
  char v10;
  char v11;
  char v12;
  uint64_t v13;
  _QWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  char *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v9 = (int *)type metadata accessor for AccessPointView(0);
  v10 = *(_BYTE *)(a2 + v9[10]);
  v11 = *(_BYTE *)(a2 + v9[11]);
  v12 = *(_BYTE *)(a2 + v9[12]);
  v13 = type metadata accessor for AccessPointPageIntent(0);
  a5[3] = v13;
  a5[4] = sub_1000035B4(&qword_10010F5C0, type metadata accessor for AccessPointPageIntent, (uint64_t)&protocol conformance descriptor for AccessPointPageIntent);
  v14 = sub_1000052B0(a5);
  sub_100007878(a4, (uint64_t)v14 + *(int *)(v13 + 32), type metadata accessor for Game);
  *(_BYTE *)v14 = v10;
  *((_BYTE *)v14 + 1) = v11;
  *((_BYTE *)v14 + 2) = v12;
  v15 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v14 + 1) = *(_OWORD *)a3;
  *(_OWORD *)(v14 + 3) = v15;
  v16 = *(_OWORD *)(a3 + 64);
  v17 = *(_OWORD *)(a3 + 80);
  v18 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v14 + 5) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v14 + 11) = v17;
  *(_OWORD *)(v14 + 9) = v16;
  *(_OWORD *)(v14 + 7) = v18;
  v20 = *(_OWORD *)(a3 + 112);
  v19 = *(_OWORD *)(a3 + 128);
  v21 = *(_QWORD *)(a3 + 144);
  *(_OWORD *)(v14 + 13) = *(_OWORD *)(a3 + 96);
  v14[19] = v21;
  *(_OWORD *)(v14 + 17) = v19;
  *(_OWORD *)(v14 + 15) = v20;
  v22 = a2 + v9[9];
  v23 = (int *)type metadata accessor for AccessPointPageView(0);
  v24 = (char *)a5 + v23[5];
  v25 = type metadata accessor for AccessPointAnchoring(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v24, v22, v25);
  v26 = (uint64_t *)(a2 + v9[6]);
  v33 = *v26;
  v34 = v26[1];
  sub_100019FF0((_QWORD *)a3);
  sub_100003304(&qword_10010E850);
  State.wrappedValue.getter(&v35);
  v27 = v35;
  v28 = (_QWORD *)((char *)a5 + v23[8]);
  swift_retain(a1);
  sub_100003304(&qword_10010E738);
  State.projectedValue.getter(v28);
  v29 = (_QWORD *)((char *)a5 + v23[9]);
  v30 = sub_100003304(&qword_10010BBF0);
  swift_allocObject(v30, *(unsigned int *)(v30 + 48), *(unsigned __int16 *)(v30 + 52));
  v35 = LRUMultiCache.init(keyLimit:valueLimit:)(1000, 3);
  result = State.init(wrappedValue:)(&v35, v30);
  *v29 = v33;
  v29[1] = v34;
  *(_QWORD *)((char *)a5 + v23[6]) = v27;
  *(_QWORD *)((char *)a5 + v23[7]) = a1;
  return result;
}

uint64_t sub_100097D00()
{
  _QWORD *v0;
  uint64_t v1;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[9]);
  swift_bridgeObjectRelease(v0[11]);
  v1 = v0[14];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[16]);
    swift_bridgeObjectRelease(v0[18]);
    swift_bridgeObjectRelease(v0[20]);
  }
  return swift_deallocObject(v0, 168, 7);
}

uint64_t sub_100097D68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  _TtC13GameOverlayUI20GameOverlayUIService **v15;
  _TtC13GameOverlayUI20GameOverlayUIService *v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  SEL v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  SEL v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  const char *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  _TtC13GameOverlayUI20GameOverlayUIService *v52;
  SEL v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  SEL v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  SEL v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  unint64_t v74;
  unint64_t v75;

  v1 = sub_100003304(&qword_10010E738);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = v0 + v4;
  v7 = sub_100003304(&qword_10010CC20);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  swift_release(*(_QWORD *)(v6 + *(int *)(v1 + 28)));
  v15 = (_TtC13GameOverlayUI20GameOverlayUIService **)(v0 + v5);
  v16 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v0 + v5 + 8);
  if (v16)
  {
    swift_bridgeObjectRelease(v16, v8, v9, v10, v11, v12, v13, v14);
    swift_bridgeObjectRelease(v15[3], v17, v18, v19, v20, v21, v22, v23);
    swift_bridgeObjectRelease(v15[5], v24, v25, v26, v27, v28, v29, v30);
    swift_bridgeObjectRelease(v15[7], v31, v32, v33, v34, v35, v36, v37);
    swift_bridgeObjectRelease(v15[9], v38, v39, v40, v41, v42, v43, v44);
    v52 = v15[12];
    if (v52)
    {
      swift_bridgeObjectRelease(v52, v45, v46, v47, v48, v49, v50, v51);
      swift_bridgeObjectRelease(v15[14], v53, v54, v55, v56, v57, v58, v59);
      swift_bridgeObjectRelease(v15[16], v60, v61, v62, v63, v64, v65, v66);
      swift_bridgeObjectRelease(v15[18], v67, v68, v69, v70, v71, v72, v73);
    }
  }
  v74 = (v5 + 159) & 0xFFFFFFFFFFFFFFF8;
  v75 = v74 + 8;
  swift_release(*(_QWORD *)(v0 + v74));
  return swift_deallocObject(v0, v75, v3 | 7);
}

uint64_t sub_100097E68()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(sub_100003304(&qword_10010E738) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100097018(v0 + v2, (_QWORD *)(v0 + v3), *(_QWORD *)(v0 + ((v3 + 159) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100097EB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  void (*v76)(char *, char *, uint64_t);
  uint64_t v77;
  uint64_t v78;
  void (*v79)(char *, uint64_t);
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(uint64_t, char *, uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(uint64_t, char *, uint64_t);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(char *, uint64_t);
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void (*v122)(char *, char *, uint64_t);
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  char *v128;
  void (*v129)(char *, uint64_t);
  char *v130;
  char *v131;
  char *v132;
  char *v133;

  v105 = a1;
  v121 = a2;
  v3 = sub_100003304(&qword_100110710);
  v4 = *(_QWORD *)(v3 - 8);
  v119 = v3;
  v120 = v4;
  __chkstk_darwin(v3);
  v118 = (char *)&v99 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003304(&qword_100110718);
  v7 = *(_QWORD *)(v6 - 8);
  v116 = v6;
  v117 = v7;
  __chkstk_darwin(v6);
  v115 = (char *)&v99 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = sub_100003304(&qword_100110720);
  v113 = *(_QWORD *)(v112 - 8);
  __chkstk_darwin(v112);
  v111 = (char *)&v99 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = sub_100003304(&qword_100110728);
  v110 = *(_QWORD *)(v109 - 8);
  __chkstk_darwin(v109);
  v108 = (char *)&v99 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = sub_100003304(&qword_100110730);
  v107 = *(_QWORD *)(v106 - 8);
  __chkstk_darwin(v106);
  v104 = (char *)&v99 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100003304(&qword_10010CC18);
  __chkstk_darwin(v12);
  v14 = (char *)&v99 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = sub_100003304(&qword_100110738);
  v100 = *(_QWORD *)(v99 - 8);
  __chkstk_darwin(v99);
  v16 = (char *)&v99 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100003304(&qword_10010E770);
  v125 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v114 = (char *)&v99 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v133 = (char *)&v99 - v20;
  __chkstk_darwin(v21);
  v131 = (char *)&v99 - v22;
  __chkstk_darwin(v23);
  v130 = (char *)&v99 - v24;
  __chkstk_darwin(v25);
  v132 = (char *)&v99 - v26;
  __chkstk_darwin(v27);
  v29 = (char *)&v99 - v28;
  __chkstk_darwin(v30);
  v32 = (char *)&v99 - v31;
  __chkstk_darwin(v33);
  v35 = (char *)&v99 - v34;
  v128 = (char *)&v99 - v34;
  v36 = a1;
  v37 = v14;
  v101 = v14;
  sub_100010CBC(v36, (uint64_t)v14, &qword_10010CC18);
  v38 = type metadata accessor for BaseObjectGraph(0);
  v39 = type metadata accessor for FlowAction(0);
  v102 = v39;
  v40 = sub_1000035B4(&qword_10010E750, type metadata accessor for FlowAction, (uint64_t)&protocol conformance descriptor for FlowAction);
  v103 = v40;
  v124 = sub_1000035B4(&qword_10010E758, type metadata accessor for FlowAction, (uint64_t)&protocol conformance descriptor for FlowAction);
  AlertActionImplementation.init<A>(following:)(v37, v38, v39, v40, v124);
  v41 = v32;
  ActionDispatcher.init()(v38);
  v42 = v125;
  v43 = *(void (**)(char *, char *, uint64_t))(v125 + 16);
  v43(v35, v32, v17);
  v44 = v43;
  v45 = sub_100011054(&qword_100110740, &qword_100110738, (uint64_t)&protocol conformance descriptor for AlertActionImplementation<A>);
  v46 = v99;
  ActionDispatcher.add<A>(_:)(v16, v17, v99, v45);
  v47 = *(void (**)(char *, uint64_t))(v42 + 8);
  v47(v41, v17);
  (*(void (**)(char *, uint64_t))(v100 + 8))(v16, v46);
  v48 = v104;
  CompoundActionImplementation.init()(v38);
  ActionDispatcher.init()(v38);
  v127 = v41;
  v44(v41, v29, v17);
  v49 = sub_100011054(&qword_100110748, &qword_100110730, (uint64_t)&protocol conformance descriptor for CompoundActionImplementation<A>);
  v50 = v106;
  ActionDispatcher.add<A>(_:)(v48, v17, v106, v49);
  v47(v29, v17);
  (*(void (**)(char *, uint64_t))(v107 + 8))(v48, v50);
  v51 = v108;
  EmptyActionImplementation.init()(v38);
  v52 = v132;
  ActionDispatcher.init()(v38);
  v126 = v29;
  v122 = v44;
  v44(v29, v52, v17);
  v53 = sub_100011054(&qword_100110750, &qword_100110728, (uint64_t)&protocol conformance descriptor for EmptyActionImplementation<A>);
  v54 = v109;
  ActionDispatcher.add<A>(_:)(v51, v17, v109, v53);
  v47(v52, v17);
  v129 = v47;
  (*(void (**)(char *, uint64_t))(v110 + 8))(v51, v54);
  v55 = v111;
  ExternalURLActionImplementation.init()(v38);
  v56 = v130;
  v57 = v38;
  ActionDispatcher.init()(v38);
  v44(v52, v56, v17);
  v58 = sub_100011054(&qword_100110758, &qword_100110720, (uint64_t)&protocol conformance descriptor for ExternalURLActionImplementation<A>);
  v59 = v55;
  v60 = v55;
  v61 = v112;
  ActionDispatcher.add<A>(_:)(v59, v17, v112, v58);
  v47(v56, v17);
  (*(void (**)(char *, uint64_t))(v113 + 8))(v60, v61);
  v62 = v105;
  v63 = (uint64_t)v101;
  sub_100010CBC(v105, (uint64_t)v101, &qword_10010CC18);
  v64 = v115;
  v65 = v102;
  v123 = v57;
  v66 = v103;
  FlowActionImplementation.init(following:)(v63, v102, v57, v103, v124);
  v67 = v131;
  ActionDispatcher.init()(v57);
  v68 = v67;
  v122(v56, v67, v17);
  v69 = sub_100011054(&qword_100110760, &qword_100110718, (uint64_t)&protocol conformance descriptor for FlowActionImplementation<A, B>);
  v70 = v116;
  ActionDispatcher.add<A>(_:)(v64, v17, v116, v69);
  v129(v67, v17);
  (*(void (**)(char *, uint64_t))(v117 + 8))(v64, v70);
  sub_100010CBC(v62, v63, &qword_10010CC18);
  v71 = v118;
  v72 = v123;
  FlowBackActionImplementation.init<A>(following:)(v63, v123, v65, v66, v124);
  v73 = v133;
  v74 = v72;
  ActionDispatcher.init()(v72);
  v75 = v73;
  v76 = v122;
  v122(v68, v73, v17);
  v77 = sub_100011054(&qword_100110768, &qword_100110710, (uint64_t)&protocol conformance descriptor for FlowBackActionImplementation<A>);
  v78 = v119;
  ActionDispatcher.add<A>(_:)(v71, v17, v119, v77);
  v79 = v129;
  v129(v75, v17);
  (*(void (**)(char *, uint64_t))(v120 + 8))(v71, v78);
  v80 = v114;
  ActionDispatcher.init()(v74);
  v76(v75, v80, v17);
  v81 = sub_100003304(&qword_100110770);
  v82 = sub_100011054(&qword_100110778, &qword_100110770, (uint64_t)&protocol conformance descriptor for LaunchDashboardActionImplementation<A>);
  ActionDispatcher.add<A>(_:)(v82, v17, v81, v82);
  v79(v80, v17);
  v83 = sub_100003304(&qword_100110780);
  v84 = *(_QWORD *)(v125 + 72);
  v85 = *(unsigned __int8 *)(v125 + 80);
  v86 = (v85 + 32) & ~v85;
  v125 = swift_allocObject(v83, v86 - v84 + 8 * v84, v85 | 7);
  v87 = v125 + v86;
  v88 = (void (*)(uint64_t, char *, uint64_t))v76;
  v76((char *)(v125 + v86), v128, v17);
  v89 = v87 + v84;
  v88(v87 + v84, v127, v17);
  v90 = v87 + 2 * v84;
  v88(v90, v126, v17);
  v91 = v87 + 3 * v84;
  v88(v91, v132, v17);
  v92 = v88;
  v93 = v87 + 4 * v84;
  v92(v93, v130, v17);
  v94 = v87 + 5 * v84;
  v92(v94, v131, v17);
  v95 = v87 + 6 * v84;
  v92(v95, v133, v17);
  ActionDispatcher.init()(v123);
  ActionDispatcher.add(contentsOf:)(v87, v17);
  ActionDispatcher.add(contentsOf:)(v89, v17);
  ActionDispatcher.add(contentsOf:)(v90, v17);
  ActionDispatcher.add(contentsOf:)(v91, v17);
  ActionDispatcher.add(contentsOf:)(v93, v17);
  ActionDispatcher.add(contentsOf:)(v94, v17);
  ActionDispatcher.add(contentsOf:)(v95, v17);
  v96 = v125;
  swift_setDeallocating(v125);
  swift_arrayDestroy(v87, 7, v17);
  swift_deallocClassInstance(v96, 32, 7);
  v97 = v129;
  v129(v133, v17);
  v97(v131, v17);
  v97(v130, v17);
  v97(v132, v17);
  v97(v126, v17);
  v97(v127, v17);
  return ((uint64_t (*)(char *, uint64_t))v97)(v128, v17);
}

uint64_t sub_1000988E8(uint64_t (*a1)(void))
{
  uint64_t v1;

  v1 = a1();
  return _swift_stdlib_bridgeErrorToNSError(v1);
}

uint64_t sub_10009890C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_errorRetain();
  swift_retain(a3);
  return _JetViewDefaultFailed.init(error:retry:)(a1, a2, a3);
}

uint64_t sub_100098958()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = sub_100003304(&qword_10010CC18);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  swift_release(*(_QWORD *)(v0 + v4));
  swift_release(*(_QWORD *)(v7 + 8));
  v8 = v7 + *(int *)(v1 + 32);
  v9 = sub_100003304(&qword_10010CC20);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  return swift_deallocObject(v0, v5, v6);
}

_QWORD *sub_1000989F4(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t started;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  void (*v58)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *__dst;
  unsigned int (*v66)(char *, uint64_t, uint64_t);
  char *v67;
  uint64_t v68;
  int *v69;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v34 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v34 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v34);
  }
  else
  {
    v6 = a3;
    v7 = sub_100003304(&qword_10010CC20);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(sub_100003304(&qword_10010E738) + 28);
    v9 = *(_QWORD *)((char *)a2 + v8);
    *(_QWORD *)((char *)a1 + v8) = v9;
    v10 = v6[5];
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    started = type metadata accessor for JetStartUpCoordinator(0);
    v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(started - 8) + 16);
    swift_retain(v9);
    v14(v11, v12, started);
    v15 = *(int *)(sub_100003304(&qword_10010BE90) + 28);
    v16 = *(_QWORD *)&v12[v15];
    *(_QWORD *)&v11[v15] = v16;
    v17 = v6[6];
    v18 = v6[7];
    v19 = (_QWORD *)((char *)a1 + v17);
    v20 = (_QWORD *)((char *)a2 + v17);
    v21 = *v20;
    v22 = v20[1];
    *v19 = *v20;
    v19[1] = v22;
    v23 = (char *)a1 + v18;
    v24 = (char *)a2 + v18;
    v25 = *(_QWORD *)((char *)a2 + v18 + 8);
    swift_retain(v16);
    swift_retain(v21);
    swift_retain(v22);
    v69 = v6;
    if (v25)
    {
      *(_QWORD *)v23 = *(_QWORD *)v24;
      *((_QWORD *)v23 + 1) = v25;
      v26 = *((_QWORD *)v24 + 3);
      *((_QWORD *)v23 + 2) = *((_QWORD *)v24 + 2);
      *((_QWORD *)v23 + 3) = v26;
      v27 = *((_QWORD *)v24 + 5);
      *((_QWORD *)v23 + 4) = *((_QWORD *)v24 + 4);
      *((_QWORD *)v23 + 5) = v27;
      v28 = *((_QWORD *)v24 + 7);
      *((_QWORD *)v23 + 6) = *((_QWORD *)v24 + 6);
      *((_QWORD *)v23 + 7) = v28;
      v29 = *((_QWORD *)v24 + 9);
      *((_QWORD *)v23 + 8) = *((_QWORD *)v24 + 8);
      *((_QWORD *)v23 + 9) = v29;
      v23[80] = v24[80];
      v30 = *((_QWORD *)v24 + 12);
      swift_bridgeObjectRetain(v25);
      swift_bridgeObjectRetain(v26);
      swift_bridgeObjectRetain(v27);
      swift_bridgeObjectRetain(v28);
      swift_bridgeObjectRetain(v29);
      if (v30)
      {
        *((_QWORD *)v23 + 11) = *((_QWORD *)v24 + 11);
        *((_QWORD *)v23 + 12) = v30;
        v31 = *((_QWORD *)v24 + 14);
        *((_QWORD *)v23 + 13) = *((_QWORD *)v24 + 13);
        *((_QWORD *)v23 + 14) = v31;
        v32 = *((_QWORD *)v24 + 16);
        *((_QWORD *)v23 + 15) = *((_QWORD *)v24 + 15);
        *((_QWORD *)v23 + 16) = v32;
        v33 = *((_QWORD *)v24 + 18);
        *((_QWORD *)v23 + 17) = *((_QWORD *)v24 + 17);
        *((_QWORD *)v23 + 18) = v33;
        swift_bridgeObjectRetain(v30);
        swift_bridgeObjectRetain(v31);
        swift_bridgeObjectRetain(v32);
        swift_bridgeObjectRetain(v33);
      }
      else
      {
        v39 = *(_OWORD *)(v24 + 104);
        *(_OWORD *)(v23 + 88) = *(_OWORD *)(v24 + 88);
        *(_OWORD *)(v23 + 104) = v39;
        v40 = *(_OWORD *)(v24 + 136);
        *(_OWORD *)(v23 + 120) = *(_OWORD *)(v24 + 120);
        *(_OWORD *)(v23 + 136) = v40;
      }
      v6 = v69;
    }
    else
    {
      v35 = *((_OWORD *)v24 + 7);
      *((_OWORD *)v23 + 6) = *((_OWORD *)v24 + 6);
      *((_OWORD *)v23 + 7) = v35;
      *((_OWORD *)v23 + 8) = *((_OWORD *)v24 + 8);
      *((_QWORD *)v23 + 18) = *((_QWORD *)v24 + 18);
      v36 = *((_OWORD *)v24 + 3);
      *((_OWORD *)v23 + 2) = *((_OWORD *)v24 + 2);
      *((_OWORD *)v23 + 3) = v36;
      v37 = *((_OWORD *)v24 + 5);
      *((_OWORD *)v23 + 4) = *((_OWORD *)v24 + 4);
      *((_OWORD *)v23 + 5) = v37;
      v38 = *((_OWORD *)v24 + 1);
      *(_OWORD *)v23 = *(_OWORD *)v24;
      *((_OWORD *)v23 + 1) = v38;
    }
    v41 = v6[8];
    v42 = (_QWORD *)((char *)a1 + v41);
    v43 = (_QWORD *)((char *)a2 + v41);
    v44 = (int *)type metadata accessor for Game(0);
    v45 = *((_QWORD *)v44 - 1);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v45 + 48))(v43, 1, v44))
    {
      v46 = sub_100003304(&qword_10010CA78);
      memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    }
    else
    {
      v47 = v43[1];
      *v42 = *v43;
      v42[1] = v47;
      v48 = v43[3];
      v42[2] = v43[2];
      v42[3] = v48;
      v49 = v43[5];
      v42[4] = v43[4];
      v42[5] = v49;
      v50 = v44[7];
      __dst = (char *)v42 + v50;
      v67 = (char *)v43 + v50;
      v68 = v45;
      v51 = type metadata accessor for Date(0);
      v52 = *(_QWORD *)(v51 - 8);
      v66 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48);
      swift_bridgeObjectRetain(v47);
      swift_bridgeObjectRetain(v48);
      swift_bridgeObjectRetain(v49);
      if (v66(v67, 1, v51))
      {
        v53 = sub_100003304(&qword_10010CC10);
        memcpy(__dst, v67, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v52 + 16))(__dst, v67, v51);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v52 + 56))(__dst, 0, 1, v51);
      }
      *(_QWORD *)((char *)v42 + v44[8]) = *(_QWORD *)((char *)v43 + v44[8]);
      *((_BYTE *)v42 + v44[9]) = *((_BYTE *)v43 + v44[9]);
      *((_BYTE *)v42 + v44[10]) = *((_BYTE *)v43 + v44[10]);
      *((_BYTE *)v42 + v44[11]) = *((_BYTE *)v43 + v44[11]);
      *((_BYTE *)v42 + v44[12]) = *((_BYTE *)v43 + v44[12]);
      *((_BYTE *)v42 + v44[13]) = *((_BYTE *)v43 + v44[13]);
      *((_BYTE *)v42 + v44[14]) = *((_BYTE *)v43 + v44[14]);
      v54 = v44[15];
      v55 = (_QWORD *)((char *)v42 + v54);
      v56 = (_QWORD *)((char *)v43 + v54);
      v57 = v56[1];
      *v55 = *v56;
      v55[1] = v57;
      v58 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v68 + 56);
      swift_bridgeObjectRetain(v57);
      v58(v42, 0, 1, v44);
      v6 = v69;
    }
    v59 = v6[9];
    v60 = (char *)a1 + v59;
    v61 = (char *)a2 + v59;
    v62 = type metadata accessor for AccessPointAnchoring(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v62 - 8) + 16))(v60, v61, v62);
    v63 = v6[11];
    *((_BYTE *)a1 + v6[10]) = *((_BYTE *)a2 + v6[10]);
    *((_BYTE *)a1 + v63) = *((_BYTE *)a2 + v63);
    *((_BYTE *)a1 + v6[12]) = *((_BYTE *)a2 + v6[12]);
  }
  return a1;
}

uint64_t sub_100098E28(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t started;
  uint64_t v8;
  _QWORD *v9;
  const char *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  _TtC13GameOverlayUI20GameOverlayUIService **v17;
  _TtC13GameOverlayUI20GameOverlayUIService *v18;
  SEL v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  SEL v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  const char *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  _TtC13GameOverlayUI20GameOverlayUIService *v54;
  SEL v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  SEL v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  SEL v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  _TtC13GameOverlayUI20GameOverlayUIService **v76;
  uint64_t v77;
  const char *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  SEL v85;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  SEL v92;
  id v93;
  id v94;
  id v95;
  id v96;
  id v97;
  id v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  const char *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;

  v4 = sub_100003304(&qword_10010CC20);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = sub_100003304(&qword_10010E738);
  swift_release(*(_QWORD *)(a1 + *(int *)(v5 + 28)));
  v6 = a1 + a2[5];
  started = type metadata accessor for JetStartUpCoordinator(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(started - 8) + 8))(v6, started);
  v8 = sub_100003304(&qword_10010BE90);
  swift_release(*(_QWORD *)(v6 + *(int *)(v8 + 28)));
  v9 = (_QWORD *)(a1 + a2[6]);
  swift_release(*v9);
  swift_release(v9[1]);
  v17 = (_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + a2[7]);
  v18 = v17[1];
  if (v18)
  {
    swift_bridgeObjectRelease(v18, v10, v11, v12, v13, v14, v15, v16);
    swift_bridgeObjectRelease(v17[3], v19, v20, v21, v22, v23, v24, v25);
    swift_bridgeObjectRelease(v17[5], v26, v27, v28, v29, v30, v31, v32);
    swift_bridgeObjectRelease(v17[7], v33, v34, v35, v36, v37, v38, v39);
    swift_bridgeObjectRelease(v17[9], v40, v41, v42, v43, v44, v45, v46);
    v54 = v17[12];
    if (v54)
    {
      swift_bridgeObjectRelease(v54, v47, v48, v49, v50, v51, v52, v53);
      swift_bridgeObjectRelease(v17[14], v55, v56, v57, v58, v59, v60, v61);
      swift_bridgeObjectRelease(v17[16], v62, v63, v64, v65, v66, v67, v68);
      swift_bridgeObjectRelease(v17[18], v69, v70, v71, v72, v73, v74, v75);
    }
  }
  v76 = (_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + a2[8]);
  v77 = type metadata accessor for Game(0);
  if (!(*(unsigned int (**)(_TtC13GameOverlayUI20GameOverlayUIService **, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 48))(v76, 1, v77))
  {
    swift_bridgeObjectRelease(v76[1], v78, v79, v80, v81, v82, v83, v84);
    swift_bridgeObjectRelease(v76[3], v85, v86, v87, v88, v89, v90, v91);
    swift_bridgeObjectRelease(v76[5], v92, v93, v94, v95, v96, v97, v98);
    v99 = (char *)v76 + *(int *)(v77 + 28);
    v100 = type metadata accessor for Date(0);
    v101 = *(_QWORD *)(v100 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v101 + 48))(v99, 1, v100))
      (*(void (**)(char *, uint64_t))(v101 + 8))(v99, v100);
    swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)((char *)v76 + *(int *)(v77 + 60) + 8), v102, v103, v104, v105, v106, v107, v108);
  }
  v109 = a1 + a2[9];
  v110 = type metadata accessor for AccessPointAnchoring(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v110 - 8) + 8))(v109, v110);
}

uint64_t sub_100098FFC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t started;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  int *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  void (*v56)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int (*v63)(char *, uint64_t, uint64_t);
  char *v64;
  char *__dst;
  uint64_t v66;
  int *v67;

  v6 = sub_100003304(&qword_10010CC20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(sub_100003304(&qword_10010E738) + 28);
  v8 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  v9 = a3[5];
  v10 = a1 + v9;
  v11 = a2 + v9;
  started = type metadata accessor for JetStartUpCoordinator(0);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(started - 8) + 16);
  swift_retain(v8);
  v13(v10, v11, started);
  v14 = *(int *)(sub_100003304(&qword_10010BE90) + 28);
  v15 = *(_QWORD *)(v11 + v14);
  *(_QWORD *)(v10 + v14) = v15;
  v16 = a3[6];
  v17 = a3[7];
  v18 = (uint64_t *)(a1 + v16);
  v19 = (uint64_t *)(a2 + v16);
  v20 = *v19;
  v21 = v19[1];
  *v18 = *v19;
  v18[1] = v21;
  v22 = a1 + v17;
  v23 = a2 + v17;
  v24 = *(_QWORD *)(a2 + v17 + 8);
  swift_retain(v15);
  swift_retain(v20);
  swift_retain(v21);
  v67 = a3;
  if (v24)
  {
    *(_QWORD *)v22 = *(_QWORD *)v23;
    *(_QWORD *)(v22 + 8) = v24;
    v25 = *(_QWORD *)(v23 + 24);
    *(_QWORD *)(v22 + 16) = *(_QWORD *)(v23 + 16);
    *(_QWORD *)(v22 + 24) = v25;
    v26 = *(_QWORD *)(v23 + 40);
    *(_QWORD *)(v22 + 32) = *(_QWORD *)(v23 + 32);
    *(_QWORD *)(v22 + 40) = v26;
    v27 = *(_QWORD *)(v23 + 56);
    *(_QWORD *)(v22 + 48) = *(_QWORD *)(v23 + 48);
    *(_QWORD *)(v22 + 56) = v27;
    v28 = *(_QWORD *)(v23 + 72);
    *(_QWORD *)(v22 + 64) = *(_QWORD *)(v23 + 64);
    *(_QWORD *)(v22 + 72) = v28;
    *(_BYTE *)(v22 + 80) = *(_BYTE *)(v23 + 80);
    v29 = *(_QWORD *)(v23 + 96);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v28);
    if (v29)
    {
      *(_QWORD *)(v22 + 88) = *(_QWORD *)(v23 + 88);
      *(_QWORD *)(v22 + 96) = v29;
      v30 = *(_QWORD *)(v23 + 112);
      *(_QWORD *)(v22 + 104) = *(_QWORD *)(v23 + 104);
      *(_QWORD *)(v22 + 112) = v30;
      v31 = *(_QWORD *)(v23 + 128);
      *(_QWORD *)(v22 + 120) = *(_QWORD *)(v23 + 120);
      *(_QWORD *)(v22 + 128) = v31;
      v32 = *(_QWORD *)(v23 + 144);
      *(_QWORD *)(v22 + 136) = *(_QWORD *)(v23 + 136);
      *(_QWORD *)(v22 + 144) = v32;
      swift_bridgeObjectRetain(v29);
      swift_bridgeObjectRetain(v30);
      swift_bridgeObjectRetain(v31);
      swift_bridgeObjectRetain(v32);
    }
    else
    {
      v37 = *(_OWORD *)(v23 + 104);
      *(_OWORD *)(v22 + 88) = *(_OWORD *)(v23 + 88);
      *(_OWORD *)(v22 + 104) = v37;
      v38 = *(_OWORD *)(v23 + 136);
      *(_OWORD *)(v22 + 120) = *(_OWORD *)(v23 + 120);
      *(_OWORD *)(v22 + 136) = v38;
    }
    a3 = v67;
  }
  else
  {
    v33 = *(_OWORD *)(v23 + 112);
    *(_OWORD *)(v22 + 96) = *(_OWORD *)(v23 + 96);
    *(_OWORD *)(v22 + 112) = v33;
    *(_OWORD *)(v22 + 128) = *(_OWORD *)(v23 + 128);
    *(_QWORD *)(v22 + 144) = *(_QWORD *)(v23 + 144);
    v34 = *(_OWORD *)(v23 + 48);
    *(_OWORD *)(v22 + 32) = *(_OWORD *)(v23 + 32);
    *(_OWORD *)(v22 + 48) = v34;
    v35 = *(_OWORD *)(v23 + 80);
    *(_OWORD *)(v22 + 64) = *(_OWORD *)(v23 + 64);
    *(_OWORD *)(v22 + 80) = v35;
    v36 = *(_OWORD *)(v23 + 16);
    *(_OWORD *)v22 = *(_OWORD *)v23;
    *(_OWORD *)(v22 + 16) = v36;
  }
  v39 = a3[8];
  v40 = (_QWORD *)(a1 + v39);
  v41 = (_QWORD *)(a2 + v39);
  v42 = (int *)type metadata accessor for Game(0);
  v43 = *((_QWORD *)v42 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v43 + 48))(v41, 1, v42))
  {
    v44 = sub_100003304(&qword_10010CA78);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
  }
  else
  {
    v45 = v41[1];
    *v40 = *v41;
    v40[1] = v45;
    v46 = v41[3];
    v40[2] = v41[2];
    v40[3] = v46;
    v47 = v41[5];
    v40[4] = v41[4];
    v40[5] = v47;
    v48 = v42[7];
    __dst = (char *)v40 + v48;
    v66 = v43;
    v64 = (char *)v41 + v48;
    v49 = type metadata accessor for Date(0);
    v50 = *(_QWORD *)(v49 - 8);
    v63 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48);
    swift_bridgeObjectRetain(v45);
    swift_bridgeObjectRetain(v46);
    swift_bridgeObjectRetain(v47);
    if (v63(v64, 1, v49))
    {
      v51 = sub_100003304(&qword_10010CC10);
      memcpy(__dst, v64, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v50 + 16))(__dst, v64, v49);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56))(__dst, 0, 1, v49);
    }
    *(_QWORD *)((char *)v40 + v42[8]) = *(_QWORD *)((char *)v41 + v42[8]);
    *((_BYTE *)v40 + v42[9]) = *((_BYTE *)v41 + v42[9]);
    *((_BYTE *)v40 + v42[10]) = *((_BYTE *)v41 + v42[10]);
    *((_BYTE *)v40 + v42[11]) = *((_BYTE *)v41 + v42[11]);
    *((_BYTE *)v40 + v42[12]) = *((_BYTE *)v41 + v42[12]);
    *((_BYTE *)v40 + v42[13]) = *((_BYTE *)v41 + v42[13]);
    *((_BYTE *)v40 + v42[14]) = *((_BYTE *)v41 + v42[14]);
    v52 = v42[15];
    v53 = (_QWORD *)((char *)v40 + v52);
    v54 = (_QWORD *)((char *)v41 + v52);
    v55 = v54[1];
    *v53 = *v54;
    v53[1] = v55;
    v56 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v66 + 56);
    swift_bridgeObjectRetain(v55);
    v56(v40, 0, 1, v42);
    a3 = v67;
  }
  v57 = a3[9];
  v58 = a1 + v57;
  v59 = a2 + v57;
  v60 = type metadata accessor for AccessPointAnchoring(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 16))(v58, v59, v60);
  v61 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + v61) = *(_BYTE *)(a2 + v61);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  return a1;
}

uint64_t sub_100099404(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t started;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _TtC13GameOverlayUI20GameOverlayUIService *v27;
  uint64_t v28;
  uint64_t v29;
  SEL v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  _TtC13GameOverlayUI20GameOverlayUIService *v38;
  SEL v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  uint64_t v46;
  _TtC13GameOverlayUI20GameOverlayUIService *v47;
  SEL v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  uint64_t v55;
  _TtC13GameOverlayUI20GameOverlayUIService *v56;
  SEL v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  uint64_t v64;
  _TtC13GameOverlayUI20GameOverlayUIService *v65;
  SEL v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  _OWORD *v73;
  __int128 *v74;
  _TtC13GameOverlayUI20GameOverlayUIService *v75;
  uint64_t v76;
  uint64_t v77;
  SEL v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  uint64_t v85;
  _TtC13GameOverlayUI20GameOverlayUIService *v86;
  SEL v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  id v93;
  uint64_t v94;
  _TtC13GameOverlayUI20GameOverlayUIService *v95;
  SEL v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  id v102;
  uint64_t v103;
  _TtC13GameOverlayUI20GameOverlayUIService *v104;
  SEL v105;
  id v106;
  id v107;
  id v108;
  id v109;
  id v110;
  id v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;
  _QWORD *v146;
  _QWORD *v147;
  int *v148;
  uint64_t v149;
  uint64_t (*v150)(_QWORD *, uint64_t, int *);
  int v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _TtC13GameOverlayUI20GameOverlayUIService *v161;
  SEL v162;
  id v163;
  id v164;
  id v165;
  id v166;
  id v167;
  id v168;
  uint64_t v169;
  _TtC13GameOverlayUI20GameOverlayUIService *v170;
  SEL v171;
  id v172;
  id v173;
  id v174;
  id v175;
  id v176;
  id v177;
  uint64_t v178;
  _TtC13GameOverlayUI20GameOverlayUIService *v179;
  SEL v180;
  id v181;
  id v182;
  id v183;
  id v184;
  id v185;
  id v186;
  uint64_t v187;
  char *v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t (*v192)(char *, uint64_t, uint64_t);
  int v193;
  size_t v194;
  void *v195;
  uint64_t v196;
  _QWORD *v197;
  _QWORD *v198;
  uint64_t v199;
  void (*v200)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v201;
  _QWORD *v202;
  _QWORD *v203;
  uint64_t v204;
  _TtC13GameOverlayUI20GameOverlayUIService *v205;
  SEL v206;
  id v207;
  id v208;
  id v209;
  id v210;
  id v211;
  id v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v218;
  unsigned int (*v219)(char *, uint64_t, uint64_t);
  char *v220;
  void *v221;
  char *__dst;
  int *v223;
  int *v224;

  v6 = sub_100003304(&qword_10010CC20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(sub_100003304(&qword_10010E738) + 28);
  v8 = *(_QWORD *)(a1 + v7);
  v9 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v9;
  swift_retain(v9);
  swift_release(v8);
  v10 = a3[5];
  v11 = a1 + v10;
  v12 = a2 + v10;
  started = type metadata accessor for JetStartUpCoordinator(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(started - 8) + 24))(v11, v12, started);
  v14 = *(int *)(sub_100003304(&qword_10010BE90) + 28);
  v15 = *(_QWORD *)(v11 + v14);
  v16 = *(_QWORD *)(v12 + v14);
  *(_QWORD *)(v11 + v14) = v16;
  swift_retain(v16);
  swift_release(v15);
  v17 = a3[6];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = *(_QWORD *)(a2 + v17);
  v21 = *(_QWORD *)(a1 + v17);
  *(_QWORD *)(a1 + v17) = v20;
  swift_retain(v20);
  swift_release(v21);
  v22 = *(_QWORD *)(v18 + 8);
  v23 = *(_QWORD *)(v19 + 8);
  *(_QWORD *)(v18 + 8) = v23;
  swift_retain(v23);
  swift_release(v22);
  v24 = a3[7];
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + v24 + 8);
  v28 = *(_QWORD *)(a2 + v24 + 8);
  if (!v27)
  {
    if (!v28)
    {
      v132 = *(_OWORD *)(v26 + 16);
      *(_OWORD *)v25 = *(_OWORD *)v26;
      *(_OWORD *)(v25 + 16) = v132;
      v133 = *(_OWORD *)(v26 + 32);
      v134 = *(_OWORD *)(v26 + 48);
      v135 = *(_OWORD *)(v26 + 80);
      *(_OWORD *)(v25 + 64) = *(_OWORD *)(v26 + 64);
      *(_OWORD *)(v25 + 80) = v135;
      *(_OWORD *)(v25 + 32) = v133;
      *(_OWORD *)(v25 + 48) = v134;
      v136 = *(_OWORD *)(v26 + 96);
      v137 = *(_OWORD *)(v26 + 112);
      v138 = *(_OWORD *)(v26 + 128);
      *(_QWORD *)(v25 + 144) = *(_QWORD *)(v26 + 144);
      *(_OWORD *)(v25 + 112) = v137;
      *(_OWORD *)(v25 + 128) = v138;
      *(_OWORD *)(v25 + 96) = v136;
      goto LABEL_15;
    }
    *(_QWORD *)v25 = *(_QWORD *)v26;
    v112 = *(_QWORD *)(v26 + 8);
    *(_QWORD *)(v25 + 8) = v112;
    *(_QWORD *)(v25 + 16) = *(_QWORD *)(v26 + 16);
    v113 = *(_QWORD *)(v26 + 24);
    *(_QWORD *)(v25 + 24) = v113;
    *(_QWORD *)(v25 + 32) = *(_QWORD *)(v26 + 32);
    v114 = *(_QWORD *)(v26 + 40);
    *(_QWORD *)(v25 + 40) = v114;
    *(_QWORD *)(v25 + 48) = *(_QWORD *)(v26 + 48);
    v115 = *(_QWORD *)(v26 + 56);
    *(_QWORD *)(v25 + 56) = v115;
    *(_QWORD *)(v25 + 64) = *(_QWORD *)(v26 + 64);
    v116 = *(_QWORD *)(v26 + 72);
    *(_QWORD *)(v25 + 72) = v116;
    *(_BYTE *)(v25 + 80) = *(_BYTE *)(v26 + 80);
    v117 = *(_QWORD *)(v26 + 96);
    swift_bridgeObjectRetain(v112);
    swift_bridgeObjectRetain(v113);
    swift_bridgeObjectRetain(v114);
    swift_bridgeObjectRetain(v115);
    swift_bridgeObjectRetain(v116);
    if (!v117)
    {
      v118 = *(_OWORD *)(v26 + 88);
      v119 = *(_OWORD *)(v26 + 104);
      v120 = *(_OWORD *)(v26 + 136);
      *(_OWORD *)(v25 + 120) = *(_OWORD *)(v26 + 120);
      *(_OWORD *)(v25 + 136) = v120;
      *(_OWORD *)(v25 + 88) = v118;
      *(_OWORD *)(v25 + 104) = v119;
      goto LABEL_15;
    }
    goto LABEL_11;
  }
  if (!v28)
  {
    sub_100099C54((_QWORD *)v25);
    v121 = *(_OWORD *)(v26 + 16);
    *(_OWORD *)v25 = *(_OWORD *)v26;
    *(_OWORD *)(v25 + 16) = v121;
    v122 = *(_OWORD *)(v26 + 80);
    v124 = *(_OWORD *)(v26 + 32);
    v123 = *(_OWORD *)(v26 + 48);
    *(_OWORD *)(v25 + 64) = *(_OWORD *)(v26 + 64);
    *(_OWORD *)(v25 + 80) = v122;
    *(_OWORD *)(v25 + 32) = v124;
    *(_OWORD *)(v25 + 48) = v123;
    v126 = *(_OWORD *)(v26 + 112);
    v125 = *(_OWORD *)(v26 + 128);
    v127 = *(_OWORD *)(v26 + 96);
    *(_QWORD *)(v25 + 144) = *(_QWORD *)(v26 + 144);
    *(_OWORD *)(v25 + 112) = v126;
    *(_OWORD *)(v25 + 128) = v125;
    *(_OWORD *)(v25 + 96) = v127;
    goto LABEL_15;
  }
  *(_QWORD *)v25 = *(_QWORD *)v26;
  v29 = *(_QWORD *)(v26 + 8);
  *(_QWORD *)(v25 + 8) = v29;
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRelease(v27, v30, v31, v32, v33, v34, v35, v36);
  *(_QWORD *)(v25 + 16) = *(_QWORD *)(v26 + 16);
  v37 = *(_QWORD *)(v26 + 24);
  v38 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v25 + 24);
  *(_QWORD *)(v25 + 24) = v37;
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRelease(v38, v39, v40, v41, v42, v43, v44, v45);
  *(_QWORD *)(v25 + 32) = *(_QWORD *)(v26 + 32);
  v46 = *(_QWORD *)(v26 + 40);
  v47 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v25 + 40);
  *(_QWORD *)(v25 + 40) = v46;
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRelease(v47, v48, v49, v50, v51, v52, v53, v54);
  *(_QWORD *)(v25 + 48) = *(_QWORD *)(v26 + 48);
  v55 = *(_QWORD *)(v26 + 56);
  v56 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v25 + 56);
  *(_QWORD *)(v25 + 56) = v55;
  swift_bridgeObjectRetain(v55);
  swift_bridgeObjectRelease(v56, v57, v58, v59, v60, v61, v62, v63);
  *(_QWORD *)(v25 + 64) = *(_QWORD *)(v26 + 64);
  v64 = *(_QWORD *)(v26 + 72);
  v65 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v25 + 72);
  *(_QWORD *)(v25 + 72) = v64;
  swift_bridgeObjectRetain(v64);
  swift_bridgeObjectRelease(v65, v66, v67, v68, v69, v70, v71, v72);
  *(_BYTE *)(v25 + 80) = *(_BYTE *)(v26 + 80);
  v73 = (_OWORD *)(v25 + 88);
  v74 = (__int128 *)(v26 + 88);
  v75 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v25 + 96);
  v76 = *(_QWORD *)(v26 + 96);
  if (!v75)
  {
    if (!v76)
    {
      v142 = *v74;
      v143 = *(_OWORD *)(v26 + 104);
      v144 = *(_OWORD *)(v26 + 136);
      *(_OWORD *)(v25 + 120) = *(_OWORD *)(v26 + 120);
      *(_OWORD *)(v25 + 136) = v144;
      *v73 = v142;
      *(_OWORD *)(v25 + 104) = v143;
      goto LABEL_15;
    }
LABEL_11:
    *(_QWORD *)(v25 + 88) = *(_QWORD *)(v26 + 88);
    v128 = *(_QWORD *)(v26 + 96);
    *(_QWORD *)(v25 + 96) = v128;
    *(_QWORD *)(v25 + 104) = *(_QWORD *)(v26 + 104);
    v129 = *(_QWORD *)(v26 + 112);
    *(_QWORD *)(v25 + 112) = v129;
    *(_QWORD *)(v25 + 120) = *(_QWORD *)(v26 + 120);
    v130 = *(_QWORD *)(v26 + 128);
    *(_QWORD *)(v25 + 128) = v130;
    *(_QWORD *)(v25 + 136) = *(_QWORD *)(v26 + 136);
    v131 = *(_QWORD *)(v26 + 144);
    *(_QWORD *)(v25 + 144) = v131;
    swift_bridgeObjectRetain(v128);
    swift_bridgeObjectRetain(v129);
    swift_bridgeObjectRetain(v130);
    swift_bridgeObjectRetain(v131);
    goto LABEL_15;
  }
  if (v76)
  {
    *(_QWORD *)(v25 + 88) = *(_QWORD *)(v26 + 88);
    v77 = *(_QWORD *)(v26 + 96);
    *(_QWORD *)(v25 + 96) = v77;
    swift_bridgeObjectRetain(v77);
    swift_bridgeObjectRelease(v75, v78, v79, v80, v81, v82, v83, v84);
    *(_QWORD *)(v25 + 104) = *(_QWORD *)(v26 + 104);
    v85 = *(_QWORD *)(v26 + 112);
    v86 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v25 + 112);
    *(_QWORD *)(v25 + 112) = v85;
    swift_bridgeObjectRetain(v85);
    swift_bridgeObjectRelease(v86, v87, v88, v89, v90, v91, v92, v93);
    *(_QWORD *)(v25 + 120) = *(_QWORD *)(v26 + 120);
    v94 = *(_QWORD *)(v26 + 128);
    v95 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v25 + 128);
    *(_QWORD *)(v25 + 128) = v94;
    swift_bridgeObjectRetain(v94);
    swift_bridgeObjectRelease(v95, v96, v97, v98, v99, v100, v101, v102);
    *(_QWORD *)(v25 + 136) = *(_QWORD *)(v26 + 136);
    v103 = *(_QWORD *)(v26 + 144);
    v104 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v25 + 144);
    *(_QWORD *)(v25 + 144) = v103;
    swift_bridgeObjectRetain(v103);
    swift_bridgeObjectRelease(v104, v105, v106, v107, v108, v109, v110, v111);
  }
  else
  {
    sub_100004244((_QWORD *)(v25 + 88));
    v139 = *(_OWORD *)(v26 + 136);
    v141 = *v74;
    v140 = *(_OWORD *)(v26 + 104);
    *(_OWORD *)(v25 + 120) = *(_OWORD *)(v26 + 120);
    *(_OWORD *)(v25 + 136) = v139;
    *v73 = v141;
    *(_OWORD *)(v25 + 104) = v140;
  }
LABEL_15:
  v145 = a3[8];
  v146 = (_QWORD *)(a1 + v145);
  v147 = (_QWORD *)(a2 + v145);
  v148 = (int *)type metadata accessor for Game(0);
  v149 = *((_QWORD *)v148 - 1);
  v150 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v149 + 48);
  v151 = v150(v146, 1, v148);
  v152 = v150(v147, 1, v148);
  if (!v151)
  {
    if (v152)
    {
      sub_1000106F0((uint64_t)v146, type metadata accessor for Game);
      goto LABEL_21;
    }
    v224 = a3;
    *v146 = *v147;
    v160 = v147[1];
    v161 = (_TtC13GameOverlayUI20GameOverlayUIService *)v146[1];
    v146[1] = v160;
    swift_bridgeObjectRetain(v160);
    swift_bridgeObjectRelease(v161, v162, v163, v164, v165, v166, v167, v168);
    v146[2] = v147[2];
    v169 = v147[3];
    v170 = (_TtC13GameOverlayUI20GameOverlayUIService *)v146[3];
    v146[3] = v169;
    swift_bridgeObjectRetain(v169);
    swift_bridgeObjectRelease(v170, v171, v172, v173, v174, v175, v176, v177);
    v146[4] = v147[4];
    v178 = v147[5];
    v179 = (_TtC13GameOverlayUI20GameOverlayUIService *)v146[5];
    v146[5] = v178;
    swift_bridgeObjectRetain(v178);
    swift_bridgeObjectRelease(v179, v180, v181, v182, v183, v184, v185, v186);
    v187 = v148[7];
    v188 = (char *)v146 + v187;
    v189 = (char *)v147 + v187;
    v190 = type metadata accessor for Date(0);
    v191 = *(_QWORD *)(v190 - 8);
    v192 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v191 + 48);
    v221 = v188;
    LODWORD(v188) = v192(v188, 1, v190);
    v193 = v192(v189, 1, v190);
    if ((_DWORD)v188)
    {
      if (!v193)
      {
        (*(void (**)(void *, char *, uint64_t))(v191 + 16))(v221, v189, v190);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v191 + 56))(v221, 0, 1, v190);
        goto LABEL_32;
      }
      v194 = *(_QWORD *)(*(_QWORD *)(sub_100003304(&qword_10010CC10) - 8) + 64);
      v195 = v221;
    }
    else
    {
      if (!v193)
      {
        (*(void (**)(void *, char *, uint64_t))(v191 + 24))(v221, v189, v190);
        goto LABEL_32;
      }
      (*(void (**)(void *, uint64_t))(v191 + 8))(v221, v190);
      v194 = *(_QWORD *)(*(_QWORD *)(sub_100003304(&qword_10010CC10) - 8) + 64);
      v195 = v221;
    }
    memcpy(v195, v189, v194);
LABEL_32:
    a3 = v224;
    *(_QWORD *)((char *)v146 + v148[8]) = *(_QWORD *)((char *)v147 + v148[8]);
    *((_BYTE *)v146 + v148[9]) = *((_BYTE *)v147 + v148[9]);
    *((_BYTE *)v146 + v148[10]) = *((_BYTE *)v147 + v148[10]);
    *((_BYTE *)v146 + v148[11]) = *((_BYTE *)v147 + v148[11]);
    *((_BYTE *)v146 + v148[12]) = *((_BYTE *)v147 + v148[12]);
    *((_BYTE *)v146 + v148[13]) = *((_BYTE *)v147 + v148[13]);
    *((_BYTE *)v146 + v148[14]) = *((_BYTE *)v147 + v148[14]);
    v201 = v148[15];
    v202 = (_QWORD *)((char *)v146 + v201);
    v203 = (_QWORD *)((char *)v147 + v201);
    *v202 = *v203;
    v204 = v203[1];
    v205 = (_TtC13GameOverlayUI20GameOverlayUIService *)v202[1];
    v202[1] = v204;
    swift_bridgeObjectRetain(v204);
    swift_bridgeObjectRelease(v205, v206, v207, v208, v209, v210, v211, v212);
    goto LABEL_33;
  }
  if (v152)
  {
LABEL_21:
    v159 = sub_100003304(&qword_10010CA78);
    memcpy(v146, v147, *(_QWORD *)(*(_QWORD *)(v159 - 8) + 64));
    goto LABEL_33;
  }
  v223 = a3;
  *v146 = *v147;
  v153 = v147[1];
  v146[1] = v153;
  v146[2] = v147[2];
  v154 = v147[3];
  v146[3] = v154;
  v146[4] = v147[4];
  v155 = v147[5];
  v146[5] = v155;
  v156 = v148[7];
  v220 = (char *)v147 + v156;
  __dst = (char *)v146 + v156;
  v157 = type metadata accessor for Date(0);
  v218 = *(_QWORD *)(v157 - 8);
  v219 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v218 + 48);
  swift_bridgeObjectRetain(v153);
  swift_bridgeObjectRetain(v154);
  swift_bridgeObjectRetain(v155);
  if (v219(v220, 1, v157))
  {
    v158 = sub_100003304(&qword_10010CC10);
    memcpy(__dst, v220, *(_QWORD *)(*(_QWORD *)(v158 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v218 + 16))(__dst, v220, v157);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v218 + 56))(__dst, 0, 1, v157);
  }
  a3 = v223;
  *(_QWORD *)((char *)v146 + v148[8]) = *(_QWORD *)((char *)v147 + v148[8]);
  *((_BYTE *)v146 + v148[9]) = *((_BYTE *)v147 + v148[9]);
  *((_BYTE *)v146 + v148[10]) = *((_BYTE *)v147 + v148[10]);
  *((_BYTE *)v146 + v148[11]) = *((_BYTE *)v147 + v148[11]);
  *((_BYTE *)v146 + v148[12]) = *((_BYTE *)v147 + v148[12]);
  *((_BYTE *)v146 + v148[13]) = *((_BYTE *)v147 + v148[13]);
  *((_BYTE *)v146 + v148[14]) = *((_BYTE *)v147 + v148[14]);
  v196 = v148[15];
  v197 = (_QWORD *)((char *)v146 + v196);
  v198 = (_QWORD *)((char *)v147 + v196);
  *v197 = *v198;
  v199 = v198[1];
  v197[1] = v199;
  v200 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v149 + 56);
  swift_bridgeObjectRetain(v199);
  v200(v146, 0, 1, v148);
LABEL_33:
  v213 = a3[9];
  v214 = a1 + v213;
  v215 = a2 + v213;
  v216 = type metadata accessor for AccessPointAnchoring(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v216 - 8) + 24))(v214, v215, v216);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  return a1;
}

_QWORD *sub_100099C54(_QWORD *a1)
{
  destroy for Player(a1);
  return a1;
}

uint64_t sub_100099C88(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t started;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *__dst;

  v6 = sub_100003304(&qword_10010CC20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = sub_100003304(&qword_10010E738);
  *(_QWORD *)(a1 + *(int *)(v7 + 28)) = *(_QWORD *)(a2 + *(int *)(v7 + 28));
  v8 = a3[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  started = type metadata accessor for JetStartUpCoordinator(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(started - 8) + 32))(v9, v10, started);
  v12 = sub_100003304(&qword_10010BE90);
  *(_QWORD *)(v9 + *(int *)(v12 + 28)) = *(_QWORD *)(v10 + *(int *)(v12 + 28));
  v13 = a3[7];
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  v14 = a1 + v13;
  v15 = (__int128 *)(a2 + v13);
  v16 = v15[7];
  *(_OWORD *)(v14 + 96) = v15[6];
  *(_OWORD *)(v14 + 112) = v16;
  *(_OWORD *)(v14 + 128) = v15[8];
  *(_QWORD *)(v14 + 144) = *((_QWORD *)v15 + 18);
  v17 = v15[3];
  *(_OWORD *)(v14 + 32) = v15[2];
  *(_OWORD *)(v14 + 48) = v17;
  v18 = v15[5];
  *(_OWORD *)(v14 + 64) = v15[4];
  *(_OWORD *)(v14 + 80) = v18;
  v19 = *v15;
  v20 = v15[1];
  v21 = a3[8];
  v22 = (_OWORD *)(a1 + v21);
  v23 = (_OWORD *)(a2 + v21);
  *(_OWORD *)v14 = v19;
  *(_OWORD *)(v14 + 16) = v20;
  v24 = (int *)type metadata accessor for Game(0);
  v25 = *((_QWORD *)v24 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v25 + 48))(v23, 1, v24))
  {
    v26 = sub_100003304(&qword_10010CA78);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    v27 = v23[1];
    *v22 = *v23;
    v22[1] = v27;
    v22[2] = v23[2];
    v28 = v24[7];
    __dst = (char *)v22 + v28;
    v29 = (char *)v23 + v28;
    v30 = type metadata accessor for Date(0);
    v31 = *(_QWORD *)(v30 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
    {
      v32 = sub_100003304(&qword_10010CC10);
      memcpy(__dst, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 32))(__dst, v29, v30);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(__dst, 0, 1, v30);
    }
    *(_QWORD *)((char *)v22 + v24[8]) = *(_QWORD *)((char *)v23 + v24[8]);
    *((_BYTE *)v22 + v24[9]) = *((_BYTE *)v23 + v24[9]);
    *((_BYTE *)v22 + v24[10]) = *((_BYTE *)v23 + v24[10]);
    *((_BYTE *)v22 + v24[11]) = *((_BYTE *)v23 + v24[11]);
    *((_BYTE *)v22 + v24[12]) = *((_BYTE *)v23 + v24[12]);
    *((_BYTE *)v22 + v24[13]) = *((_BYTE *)v23 + v24[13]);
    *((_BYTE *)v22 + v24[14]) = *((_BYTE *)v23 + v24[14]);
    *(_OWORD *)((char *)v22 + v24[15]) = *(_OWORD *)((char *)v23 + v24[15]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v25 + 56))(v22, 0, 1, v24);
  }
  v33 = a3[9];
  v34 = a1 + v33;
  v35 = a2 + v33;
  v36 = type metadata accessor for AccessPointAnchoring(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v34, v35, v36);
  v37 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + v37) = *(_BYTE *)(a2 + v37);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  return a1;
}

uint64_t sub_100099F50(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t started;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _TtC13GameOverlayUI20GameOverlayUIService *v30;
  uint64_t v31;
  uint64_t v32;
  _TtC13GameOverlayUI20GameOverlayUIService *v33;
  SEL v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  _TtC13GameOverlayUI20GameOverlayUIService *v42;
  SEL v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  uint64_t v50;
  _TtC13GameOverlayUI20GameOverlayUIService *v51;
  SEL v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  uint64_t v59;
  _TtC13GameOverlayUI20GameOverlayUIService *v60;
  SEL v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  const char *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  _TtC13GameOverlayUI20GameOverlayUIService *v75;
  uint64_t v76;
  uint64_t v77;
  _TtC13GameOverlayUI20GameOverlayUIService *v78;
  SEL v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  uint64_t v86;
  _TtC13GameOverlayUI20GameOverlayUIService *v87;
  SEL v88;
  id v89;
  id v90;
  id v91;
  id v92;
  id v93;
  id v94;
  uint64_t v95;
  _TtC13GameOverlayUI20GameOverlayUIService *v96;
  SEL v97;
  id v98;
  id v99;
  id v100;
  id v101;
  id v102;
  id v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  int *v113;
  uint64_t v114;
  uint64_t (*v115)(_QWORD *, uint64_t, int *);
  int v116;
  int v117;
  const char *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  __int128 v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _TtC13GameOverlayUI20GameOverlayUIService *v133;
  uint64_t v134;
  _TtC13GameOverlayUI20GameOverlayUIService *v135;
  SEL v136;
  id v137;
  id v138;
  id v139;
  id v140;
  id v141;
  id v142;
  uint64_t v143;
  _TtC13GameOverlayUI20GameOverlayUIService *v144;
  SEL v145;
  id v146;
  id v147;
  id v148;
  id v149;
  id v150;
  id v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t (*v156)(char *, uint64_t, uint64_t);
  int v157;
  size_t v158;
  void *v159;
  const char *v160;
  void *v161;
  void *v162;
  void *v163;
  void *v164;
  void *v165;
  void *v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  _TtC13GameOverlayUI20GameOverlayUIService *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v179;
  char *__dst;
  void *__dsta;

  v6 = sub_100003304(&qword_10010CC20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(sub_100003304(&qword_10010E738) + 28);
  v8 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  swift_release(v8);
  v9 = a3[5];
  v10 = a1 + v9;
  v11 = a2 + v9;
  started = type metadata accessor for JetStartUpCoordinator(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(started - 8) + 40))(v10, v11, started);
  v13 = *(int *)(sub_100003304(&qword_10010BE90) + 28);
  v14 = *(_QWORD *)(v10 + v13);
  *(_QWORD *)(v10 + v13) = *(_QWORD *)(v11 + v13);
  swift_release(v14);
  v15 = a3[6];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = *(_QWORD *)(a1 + v15);
  *(_QWORD *)(a1 + v15) = *(_QWORD *)(a2 + v15);
  swift_release(v18);
  v19 = *(_QWORD *)(v16 + 8);
  *(_QWORD *)(v16 + 8) = *(_QWORD *)(v17 + 8);
  swift_release(v19);
  v27 = a3[7];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + v27 + 8);
  if (!v30)
    goto LABEL_7;
  v31 = *(_QWORD *)(v29 + 8);
  if (!v31)
  {
    sub_100099C54((_QWORD *)v28);
LABEL_7:
    v104 = *(_OWORD *)(v29 + 112);
    *(_OWORD *)(v28 + 96) = *(_OWORD *)(v29 + 96);
    *(_OWORD *)(v28 + 112) = v104;
    *(_OWORD *)(v28 + 128) = *(_OWORD *)(v29 + 128);
    *(_QWORD *)(v28 + 144) = *(_QWORD *)(v29 + 144);
    v105 = *(_OWORD *)(v29 + 48);
    *(_OWORD *)(v28 + 32) = *(_OWORD *)(v29 + 32);
    *(_OWORD *)(v28 + 48) = v105;
    v106 = *(_OWORD *)(v29 + 80);
    *(_OWORD *)(v28 + 64) = *(_OWORD *)(v29 + 64);
    *(_OWORD *)(v28 + 80) = v106;
    v107 = *(_OWORD *)(v29 + 16);
    *(_OWORD *)v28 = *(_OWORD *)v29;
    *(_OWORD *)(v28 + 16) = v107;
    goto LABEL_10;
  }
  *(_QWORD *)v28 = *(_QWORD *)v29;
  *(_QWORD *)(v28 + 8) = v31;
  swift_bridgeObjectRelease(v30, v20, v21, v22, v23, v24, v25, v26);
  v32 = *(_QWORD *)(v29 + 24);
  v33 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v28 + 24);
  *(_QWORD *)(v28 + 16) = *(_QWORD *)(v29 + 16);
  *(_QWORD *)(v28 + 24) = v32;
  swift_bridgeObjectRelease(v33, v34, v35, v36, v37, v38, v39, v40);
  v41 = *(_QWORD *)(v29 + 40);
  v42 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v28 + 40);
  *(_QWORD *)(v28 + 32) = *(_QWORD *)(v29 + 32);
  *(_QWORD *)(v28 + 40) = v41;
  swift_bridgeObjectRelease(v42, v43, v44, v45, v46, v47, v48, v49);
  v50 = *(_QWORD *)(v29 + 56);
  v51 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v28 + 56);
  *(_QWORD *)(v28 + 48) = *(_QWORD *)(v29 + 48);
  *(_QWORD *)(v28 + 56) = v50;
  swift_bridgeObjectRelease(v51, v52, v53, v54, v55, v56, v57, v58);
  v59 = *(_QWORD *)(v29 + 72);
  v60 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v28 + 72);
  *(_QWORD *)(v28 + 64) = *(_QWORD *)(v29 + 64);
  *(_QWORD *)(v28 + 72) = v59;
  swift_bridgeObjectRelease(v60, v61, v62, v63, v64, v65, v66, v67);
  *(_BYTE *)(v28 + 80) = *(_BYTE *)(v29 + 80);
  v75 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v28 + 96);
  if (v75)
  {
    v76 = *(_QWORD *)(v29 + 96);
    if (v76)
    {
      *(_QWORD *)(v28 + 88) = *(_QWORD *)(v29 + 88);
      *(_QWORD *)(v28 + 96) = v76;
      swift_bridgeObjectRelease(v75, v68, v69, v70, v71, v72, v73, v74);
      v77 = *(_QWORD *)(v29 + 112);
      v78 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v28 + 112);
      *(_QWORD *)(v28 + 104) = *(_QWORD *)(v29 + 104);
      *(_QWORD *)(v28 + 112) = v77;
      swift_bridgeObjectRelease(v78, v79, v80, v81, v82, v83, v84, v85);
      v86 = *(_QWORD *)(v29 + 128);
      v87 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v28 + 128);
      *(_QWORD *)(v28 + 120) = *(_QWORD *)(v29 + 120);
      *(_QWORD *)(v28 + 128) = v86;
      swift_bridgeObjectRelease(v87, v88, v89, v90, v91, v92, v93, v94);
      v95 = *(_QWORD *)(v29 + 144);
      v96 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v28 + 144);
      *(_QWORD *)(v28 + 136) = *(_QWORD *)(v29 + 136);
      *(_QWORD *)(v28 + 144) = v95;
      swift_bridgeObjectRelease(v96, v97, v98, v99, v100, v101, v102, v103);
      goto LABEL_10;
    }
    sub_100004244((_QWORD *)(v28 + 88));
  }
  v108 = *(_OWORD *)(v29 + 104);
  *(_OWORD *)(v28 + 88) = *(_OWORD *)(v29 + 88);
  *(_OWORD *)(v28 + 104) = v108;
  v109 = *(_OWORD *)(v29 + 136);
  *(_OWORD *)(v28 + 120) = *(_OWORD *)(v29 + 120);
  *(_OWORD *)(v28 + 136) = v109;
LABEL_10:
  v110 = a3[8];
  v111 = (_QWORD *)(a1 + v110);
  v112 = (_QWORD *)(a2 + v110);
  v113 = (int *)type metadata accessor for Game(0);
  v114 = *((_QWORD *)v113 - 1);
  v115 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v114 + 48);
  v116 = v115(v111, 1, v113);
  v117 = v115(v112, 1, v113);
  if (!v116)
  {
    if (v117)
    {
      sub_1000106F0((uint64_t)v111, type metadata accessor for Game);
      goto LABEL_16;
    }
    v132 = v112[1];
    v133 = (_TtC13GameOverlayUI20GameOverlayUIService *)v111[1];
    *v111 = *v112;
    v111[1] = v132;
    swift_bridgeObjectRelease(v133, v118, v119, v120, v121, v122, v123, v124);
    v134 = v112[3];
    v135 = (_TtC13GameOverlayUI20GameOverlayUIService *)v111[3];
    v111[2] = v112[2];
    v111[3] = v134;
    swift_bridgeObjectRelease(v135, v136, v137, v138, v139, v140, v141, v142);
    v143 = v112[5];
    v144 = (_TtC13GameOverlayUI20GameOverlayUIService *)v111[5];
    v111[4] = v112[4];
    v111[5] = v143;
    swift_bridgeObjectRelease(v144, v145, v146, v147, v148, v149, v150, v151);
    v152 = v113[7];
    v153 = (char *)v111 + v152;
    v154 = (char *)v112 + v152;
    v155 = type metadata accessor for Date(0);
    v179 = *(_QWORD *)(v155 - 8);
    v156 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v179 + 48);
    __dsta = v153;
    LODWORD(v153) = v156(v153, 1, v155);
    v157 = v156(v154, 1, v155);
    if ((_DWORD)v153)
    {
      if (!v157)
      {
        (*(void (**)(void *, char *, uint64_t))(v179 + 32))(__dsta, v154, v155);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v179 + 56))(__dsta, 0, 1, v155);
        goto LABEL_27;
      }
      v158 = *(_QWORD *)(*(_QWORD *)(sub_100003304(&qword_10010CC10) - 8) + 64);
      v159 = __dsta;
    }
    else
    {
      if (!v157)
      {
        (*(void (**)(void *, char *, uint64_t))(v179 + 40))(__dsta, v154, v155);
        goto LABEL_27;
      }
      (*(void (**)(void *, uint64_t))(v179 + 8))(__dsta, v155);
      v158 = *(_QWORD *)(*(_QWORD *)(sub_100003304(&qword_10010CC10) - 8) + 64);
      v159 = __dsta;
    }
    memcpy(v159, v154, v158);
LABEL_27:
    *(_QWORD *)((char *)v111 + v113[8]) = *(_QWORD *)((char *)v112 + v113[8]);
    *((_BYTE *)v111 + v113[9]) = *((_BYTE *)v112 + v113[9]);
    *((_BYTE *)v111 + v113[10]) = *((_BYTE *)v112 + v113[10]);
    *((_BYTE *)v111 + v113[11]) = *((_BYTE *)v112 + v113[11]);
    *((_BYTE *)v111 + v113[12]) = *((_BYTE *)v112 + v113[12]);
    *((_BYTE *)v111 + v113[13]) = *((_BYTE *)v112 + v113[13]);
    *((_BYTE *)v111 + v113[14]) = *((_BYTE *)v112 + v113[14]);
    v167 = v113[15];
    v168 = (_QWORD *)((char *)v111 + v167);
    v169 = (_QWORD *)((char *)v112 + v167);
    v171 = *v169;
    v170 = v169[1];
    v172 = (_TtC13GameOverlayUI20GameOverlayUIService *)v168[1];
    *v168 = v171;
    v168[1] = v170;
    swift_bridgeObjectRelease(v172, v160, v161, v162, v163, v164, v165, v166);
    goto LABEL_28;
  }
  if (v117)
  {
LABEL_16:
    v131 = sub_100003304(&qword_10010CA78);
    memcpy(v111, v112, *(_QWORD *)(*(_QWORD *)(v131 - 8) + 64));
    goto LABEL_28;
  }
  v125 = *((_OWORD *)v112 + 1);
  *(_OWORD *)v111 = *(_OWORD *)v112;
  *((_OWORD *)v111 + 1) = v125;
  *((_OWORD *)v111 + 2) = *((_OWORD *)v112 + 2);
  v126 = v113[7];
  __dst = (char *)v111 + v126;
  v127 = (char *)v112 + v126;
  v128 = type metadata accessor for Date(0);
  v129 = *(_QWORD *)(v128 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v129 + 48))(v127, 1, v128))
  {
    v130 = sub_100003304(&qword_10010CC10);
    memcpy(__dst, v127, *(_QWORD *)(*(_QWORD *)(v130 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v129 + 32))(__dst, v127, v128);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v129 + 56))(__dst, 0, 1, v128);
  }
  *(_QWORD *)((char *)v111 + v113[8]) = *(_QWORD *)((char *)v112 + v113[8]);
  *((_BYTE *)v111 + v113[9]) = *((_BYTE *)v112 + v113[9]);
  *((_BYTE *)v111 + v113[10]) = *((_BYTE *)v112 + v113[10]);
  *((_BYTE *)v111 + v113[11]) = *((_BYTE *)v112 + v113[11]);
  *((_BYTE *)v111 + v113[12]) = *((_BYTE *)v112 + v113[12]);
  *((_BYTE *)v111 + v113[13]) = *((_BYTE *)v112 + v113[13]);
  *((_BYTE *)v111 + v113[14]) = *((_BYTE *)v112 + v113[14]);
  *(_OWORD *)((char *)v111 + v113[15]) = *(_OWORD *)((char *)v112 + v113[15]);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v114 + 56))(v111, 0, 1, v113);
LABEL_28:
  v173 = a3[9];
  v174 = a1 + v173;
  v175 = a2 + v173;
  v176 = type metadata accessor for AccessPointAnchoring(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v176 - 8) + 40))(v174, v175, v176);
  v177 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + v177) = *(_BYTE *)(a2 + v177);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  return a1;
}

uint64_t sub_10009A4F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10009A504);
}

uint64_t sub_10009A504(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;

  v6 = sub_100003304(&qword_10010E738);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_100003304(&qword_10010BE90);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_12:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v16 = sub_100003304(&qword_10010CA78);
    v12 = *(_QWORD *)(v16 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v16;
      v13 = a3[8];
    }
    else
    {
      v8 = type metadata accessor for AccessPointAnchoring(0);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = a3[9];
    }
    goto LABEL_12;
  }
  v14 = *(_QWORD *)(a1 + a3[6]);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_10009A600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10009A60C);
}

uint64_t sub_10009A60C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = sub_100003304(&qword_10010E738);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    result = sub_100003304(&qword_10010BE90);
    v14 = *(_QWORD *)(result - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = result;
      v15 = a4[5];
    }
    else
    {
      if (a3 == 0x7FFFFFFF)
      {
        *(_QWORD *)(a1 + a4[6]) = (a2 - 1);
        return result;
      }
      v16 = sub_100003304(&qword_10010CA78);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[8];
      }
      else
      {
        v10 = type metadata accessor for AccessPointAnchoring(0);
        v14 = *(_QWORD *)(v10 - 8);
        v15 = a4[9];
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_10009A704(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[9];

  sub_10005C1C0(319);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10001DD8C(319, (unint64_t *)&qword_10010BF00, (uint64_t (*)(uint64_t))&type metadata accessor for JetStartUpCoordinator, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for State);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      v10[2] = &unk_1000CCF00;
      v10[3] = &unk_1000CCF18;
      sub_10001DD8C(319, (unint64_t *)&qword_10010CC98, type metadata accessor for Game, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      if (v7 <= 0x3F)
      {
        v10[4] = *(_QWORD *)(v6 - 8) + 64;
        v8 = type metadata accessor for AccessPointAnchoring(319);
        if (v9 <= 0x3F)
        {
          v10[5] = *(_QWORD *)(v8 - 8) + 64;
          v10[6] = &unk_1000CCF30;
          v10[7] = &unk_1000CCF48;
          v10[8] = &unk_1000CCF48;
          swift_initStructMetadata(a1, 256, 9, v10, a1 + 16);
        }
      }
    }
  }
}

uint64_t sub_10009A818(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E56A0, 1);
}

uint64_t sub_10009A828()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t started;
  uint64_t v13;
  _QWORD *v14;
  const char *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  __n128 v22;
  _TtC13GameOverlayUI20GameOverlayUIService **v23;
  _TtC13GameOverlayUI20GameOverlayUIService *v24;
  SEL v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  SEL v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  SEL v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  SEL v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  const char *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  _TtC13GameOverlayUI20GameOverlayUIService *v60;
  SEL v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  SEL v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  SEL v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  id v81;
  _TtC13GameOverlayUI20GameOverlayUIService **v82;
  const char *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  SEL v90;
  id v91;
  id v92;
  id v93;
  id v94;
  id v95;
  id v96;
  SEL v97;
  id v98;
  id v99;
  id v100;
  id v101;
  id v102;
  id v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  const char *v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _TtC13GameOverlayUI20GameOverlayUIService **v117;
  SEL v118;
  id v119;
  id v120;
  id v121;
  id v122;
  id v123;
  id v124;
  SEL v125;
  id v126;
  id v127;
  id v128;
  id v129;
  id v130;
  id v131;
  SEL v132;
  id v133;
  id v134;
  id v135;
  id v136;
  id v137;
  id v138;
  SEL v139;
  id v140;
  id v141;
  id v142;
  id v143;
  id v144;
  id v145;
  SEL v146;
  id v147;
  id v148;
  id v149;
  id v150;
  id v151;
  id v152;
  const char *v153;
  void *v154;
  void *v155;
  void *v156;
  void *v157;
  void *v158;
  void *v159;
  _TtC13GameOverlayUI20GameOverlayUIService *v160;
  SEL v161;
  id v162;
  id v163;
  id v164;
  id v165;
  id v166;
  id v167;
  SEL v168;
  id v169;
  id v170;
  id v171;
  id v172;
  id v173;
  id v174;
  SEL v175;
  id v176;
  id v177;
  id v178;
  id v179;
  id v180;
  id v181;
  SEL v182;
  id v183;
  id v184;
  id v185;
  id v186;
  id v187;
  id v188;
  SEL v189;
  id v190;
  id v191;
  id v192;
  id v193;
  id v194;
  id v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  const char *v199;
  void *v200;
  void *v201;
  void *v202;
  void *v203;
  void *v204;
  void *v205;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;

  v1 = (int *)type metadata accessor for AccessPointView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = type metadata accessor for Game(0);
  v7 = *(_QWORD *)(v6 - 8);
  v209 = *(unsigned __int8 *)(v7 + 80);
  v208 = *(_QWORD *)(v7 + 64);
  v8 = v0 + v4;
  v9 = sub_100003304(&qword_10010CC20);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = sub_100003304(&qword_10010E738);
  swift_release(*(_QWORD *)(v8 + *(int *)(v10 + 28)));
  v11 = v8 + v1[5];
  started = type metadata accessor for JetStartUpCoordinator(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(started - 8) + 8))(v11, started);
  v13 = sub_100003304(&qword_10010BE90);
  swift_release(*(_QWORD *)(v11 + *(int *)(v13 + 28)));
  v14 = (_QWORD *)(v8 + v1[6]);
  swift_release(*v14);
  v22 = swift_release(v14[1]);
  v23 = (_TtC13GameOverlayUI20GameOverlayUIService **)(v8 + v1[7]);
  v24 = v23[1];
  if (v24)
  {
    swift_bridgeObjectRelease(v24, v15, v16, v17, v18, v19, v20, v21);
    swift_bridgeObjectRelease(v23[3], v25, v26, v27, v28, v29, v30, v31);
    swift_bridgeObjectRelease(v23[5], v32, v33, v34, v35, v36, v37, v38);
    swift_bridgeObjectRelease(v23[7], v39, v40, v41, v42, v43, v44, v45);
    swift_bridgeObjectRelease(v23[9], v46, v47, v48, v49, v50, v51, v52);
    v60 = v23[12];
    if (v60)
    {
      swift_bridgeObjectRelease(v60, v53, v54, v55, v56, v57, v58, v59);
      swift_bridgeObjectRelease(v23[14], v61, v62, v63, v64, v65, v66, v67);
      swift_bridgeObjectRelease(v23[16], v68, v69, v70, v71, v72, v73, v74);
      swift_bridgeObjectRelease(v23[18], v75, v76, v77, v78, v79, v80, v81);
    }
  }
  v82 = (_TtC13GameOverlayUI20GameOverlayUIService **)(v8 + v1[8]);
  if (!(*(unsigned int (**)(_TtC13GameOverlayUI20GameOverlayUIService **, uint64_t, uint64_t, __n128))(v7 + 48))(v82, 1, v6, v22))
  {
    v207 = v3;
    swift_bridgeObjectRelease(v82[1], v83, v84, v85, v86, v87, v88, v89);
    swift_bridgeObjectRelease(v82[3], v90, v91, v92, v93, v94, v95, v96);
    swift_bridgeObjectRelease(v82[5], v97, v98, v99, v100, v101, v102, v103);
    v104 = (char *)v82 + *(int *)(v6 + 28);
    v105 = type metadata accessor for Date(0);
    v106 = *(_QWORD *)(v105 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v106 + 48))(v104, 1, v105))
      (*(void (**)(char *, uint64_t))(v106 + 8))(v104, v105);
    swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)((char *)v82 + *(int *)(v6 + 60) + 8), v107, v108, v109, v110, v111, v112, v113);
    v3 = v207;
  }
  v114 = (v5 + v209 + 152) & ~v209;
  v115 = v8 + v1[9];
  v116 = type metadata accessor for AccessPointAnchoring(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v116 - 8) + 8))(v115, v116);
  v117 = (_TtC13GameOverlayUI20GameOverlayUIService **)(v0 + v5);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v0 + v5 + 8), v118, v119, v120, v121, v122, v123, v124);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v0 + v5 + 24), v125, v126, v127, v128, v129, v130, v131);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v0 + v5 + 40), v132, v133, v134, v135, v136, v137, v138);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v0 + v5 + 56), v139, v140, v141, v142, v143, v144, v145);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v0 + v5 + 72), v146, v147, v148, v149, v150, v151, v152);
  v160 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v0 + v5 + 96);
  if (v160)
  {
    swift_bridgeObjectRelease(v160, v153, v154, v155, v156, v157, v158, v159);
    swift_bridgeObjectRelease(v117[14], v161, v162, v163, v164, v165, v166, v167);
    swift_bridgeObjectRelease(v117[16], v168, v169, v170, v171, v172, v173, v174);
    swift_bridgeObjectRelease(v117[18], v175, v176, v177, v178, v179, v180, v181);
  }
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v0 + v114 + 8), v153, v154, v155, v156, v157, v158, v159);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v0 + v114 + 24), v182, v183, v184, v185, v186, v187, v188);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v0 + v114 + 40), v189, v190, v191, v192, v193, v194, v195);
  v196 = v0 + v114 + *(int *)(v6 + 28);
  v197 = type metadata accessor for Date(0);
  v198 = *(_QWORD *)(v197 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v198 + 48))(v196, 1, v197))
    (*(void (**)(uint64_t, uint64_t))(v198 + 8))(v196, v197);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v0 + v114 + *(int *)(v6 + 60) + 8), v199, v200, v201, v202, v203, v204, v205);
  return swift_deallocObject(v0, v114 + v208, v3 | v209 | 7);
}

uint64_t sub_10009AB3C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(type metadata accessor for AccessPointView(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Game(0) - 8) + 80);
  return sub_100097AEC(a1, v2 + v6, v2 + v7, v2 + ((v7 + v8 + 152) & ~v8), a2);
}

unint64_t sub_10009ABC8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100110848;
  if (!qword_100110848)
  {
    v1 = sub_100006E54(&qword_100110850);
    v2[0] = sub_100006E54(&qword_10010E828);
    v2[1] = sub_100011054((unint64_t *)&qword_10010E848, &qword_10010E828, (uint64_t)&protocol conformance descriptor for Jet<A, B, C>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.startUpDecoration(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100110848);
  }
  return result;
}

uint64_t sub_10009AC94(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;

  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v10 = v9;
  if (a4)
  {
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(a4);
    a4 = v12;
  }
  else
  {
    v11 = 0;
  }
  v13 = a1;
  a5(v8, v10, v11, a4);

  swift_bridgeObjectRelease(v10);
  return swift_bridgeObjectRelease(a4);
}

void sub_10009AD20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  os_log_type_t v16;
  uint8_t *v17;
  id v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _TtC13GameOverlayUI20GameOverlayUIService *v22;
  SEL v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  __n128 v30;
  uint64_t v31;
  NSObject *v32;

  v8 = type metadata accessor for GameOverlayUIConfig.ServiceKind(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_msgSend(objc_allocWithZone((Class)FBSSystemService), "init");
  v13 = objc_msgSend(v12, "isPasscodeLockedOrBlocked");

  if ((v13 & 1) != 0)
  {
    if (qword_10010BAA0 != -1)
      swift_once(&qword_10010BAA0, sub_100004DCC);
    v14 = type metadata accessor for Logger(0);
    v15 = sub_100004E8C(v14, (uint64_t)qword_1001232D8);
    v32 = Logger.logObject.getter(v15);
    v16 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v32, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v16, "Skipping onboarding flow request because device is locked or blocked.", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }

  }
  else
  {
    v18 = objc_msgSend((id)objc_opt_self(BSServiceConnection), "currentContext");
    v19 = type metadata accessor for AuthenticationConnectionContext();
    v20 = (_QWORD *)swift_allocObject(v19, 152, 7);
    v20[15] = a1;
    v20[16] = a2;
    v20[17] = 0;
    v20[18] = 0;
    swift_bridgeObjectRetain(a2);
    v21 = sub_1000B4464(v18);
    v22 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v21 + 112);
    *(_QWORD *)(v21 + 104) = a3;
    *(_QWORD *)(v21 + 112) = a4;
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRelease(v22, v23, v24, v25, v26, v27, v28, v29);
    (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for GameOverlayUIConfig.ServiceKind.auth(_:), v8);
    sub_100056174((uint64_t)v11, 6, v21);
    v30 = swift_release(v21);
    (*(void (**)(char *, uint64_t, __n128))(v9 + 8))(v11, v8, v30);
  }
}

uint64_t sub_10009AF60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _TtC13GameOverlayUI20GameOverlayUIService *v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  __n128 v24;
  uint64_t v26;

  v8 = type metadata accessor for GameOverlayUIConfig.ServiceKind(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_msgSend((id)objc_opt_self(BSServiceConnection), "currentContext");
  v13 = type metadata accessor for AuthenticationConnectionContext();
  v14 = (_QWORD *)swift_allocObject(v13, 152, 7);
  v14[15] = 0;
  v14[16] = 0;
  v14[17] = a1;
  v14[18] = a2;
  swift_bridgeObjectRetain(a2);
  v15 = sub_1000B4464(v12);
  v16 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v15 + 112);
  *(_QWORD *)(v15 + 104) = a3;
  *(_QWORD *)(v15 + 112) = a4;
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRelease(v16, v17, v18, v19, v20, v21, v22, v23);
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for GameOverlayUIConfig.ServiceKind.auth(_:), v8);
  sub_100056174((uint64_t)v11, 7, v15);
  v24 = swift_release(v15);
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v9 + 8))(v11, v8, v24);
}

const char *FlowAction.ID.gameOverlay.unsafeMutableAddressor()
{
  return "gameOverlay";
}

uint64_t FlowAction.init(id:actionMetrics:destination:presentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  int *v12;
  char *v13;
  uint64_t v14;
  uint64_t result;
  _QWORD *v16;

  *a7 = a1;
  a7[1] = a2;
  v12 = (int *)type metadata accessor for FlowAction(0);
  v13 = (char *)a7 + v12[5];
  v14 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v13, a3, v14);
  result = sub_10005A194(a4, (uint64_t)a7 + v12[6]);
  v16 = (_QWORD *)((char *)a7 + v12[7]);
  *v16 = a5;
  v16[1] = a6;
  return result;
}

uint64_t type metadata accessor for FlowAction(uint64_t a1)
{
  uint64_t result;

  result = qword_100110918;
  if (!qword_100110918)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FlowAction);
  return result;
}

_QWORD *FlowAction.ID.init(from:)(_QWORD *a1)
{
  return sub_10009C014(a1);
}

uint64_t FlowAction.ID.rawValue.getter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain(a2);
  return a1;
}

_QWORD *sub_10009B1C0@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = result[1];
  *a2 = *result;
  a2[1] = v2;
  return result;
}

_QWORD *sub_10009B1CC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = sub_10009C014(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_10009B1F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10009CF20();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

Swift::Int sub_10009B240()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v4, 0);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v4, v1, v2);
  swift_bridgeObjectRelease(v2);
  return Hasher._finalize()();
}

uint64_t sub_10009B298(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v4 = *v1;
  v3 = v1[1];
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(a1, v4, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_10009B2DC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v2 = *v1;
  v3 = v1[1];
  Hasher.init(_seed:)(v5, a1);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_10009B330(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  if (v4 == *a2 && v5 == v6)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0);
}

uint64_t FlowAction.id.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(v2[1]);
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t FlowAction.actionMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for FlowAction(0) + 20);
  v4 = type metadata accessor for ActionMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t FlowAction.actionMetrics.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for FlowAction(0) + 20);
  v4 = type metadata accessor for ActionMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*FlowAction.actionMetrics.modify())()
{
  type metadata accessor for FlowAction(0);
  return property wrapper backing initializer of Shelf.items;
}

uint64_t FlowAction.destination.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 *v3;

  v3 = (__int128 *)(v1 + *(int *)(type metadata accessor for FlowAction(0) + 24));
  return sub_10005C5DC(v3, a1);
}

uint64_t FlowAction.destination.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for FlowAction(0) + 24);
  return sub_10009C150(a1, v3);
}

uint64_t (*FlowAction.destination.modify())()
{
  type metadata accessor for FlowAction(0);
  return property wrapper backing initializer of Shelf.items;
}

uint64_t FlowAction.presentation.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for FlowAction(0) + 28));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

void FlowAction.presentation.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  SEL v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;

  v5 = v2 + *(int *)(type metadata accessor for FlowAction(0) + 28);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v5 + 8), v6, v7, v8, v9, v10, v11, v12);
  *(_QWORD *)v5 = a1;
  *(_QWORD *)(v5 + 8) = a2;
}

uint64_t (*FlowAction.presentation.modify())()
{
  type metadata accessor for FlowAction(0);
  return property wrapper backing initializer of Shelf.items;
}

uint64_t sub_10009B57C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10009B5A0 + 4 * byte_1000CCFB0[*v0]))(25705, 0xE200000000000000);
}

uint64_t sub_10009B5A0()
{
  return 0x654D6E6F69746361;
}

uint64_t sub_10009B5C4()
{
  return 0x74616E6974736564;
}

uint64_t sub_10009B5E4()
{
  return 0x61746E6573657270;
}

uint64_t sub_10009B604@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10009CD2C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10009B628(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10009C18C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10009B650(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10009C18C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t FlowAction.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int *v13;
  char *v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;

  v3 = v1;
  v5 = sub_100003304(&qword_100110858);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100003C28(a1, v9);
  v11 = sub_10009C18C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FlowAction.CodingKeys, &type metadata for FlowAction.CodingKeys, v11, v9, v10);
  v12 = v3[1];
  v22 = *v3;
  v23 = v12;
  v21 = 0;
  sub_10009C1D0();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v22);
  if (!v2)
  {
    v13 = (int *)type metadata accessor for FlowAction(0);
    v14 = (char *)v3 + v13[5];
    LOBYTE(v22) = 1;
    type metadata accessor for ActionMetrics(0);
    sub_1000035B4(&qword_10010F0D8, (uint64_t (*)(uint64_t))&type metadata accessor for ActionMetrics, (uint64_t)&protocol conformance descriptor for ActionMetrics);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14);
    v15 = (char *)v3 + v13[6];
    LOBYTE(v22) = 2;
    sub_10009C214();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v15);
    v16 = (uint64_t *)((char *)v3 + v13[7]);
    v18 = *v16;
    v17 = v16[1];
    v22 = v18;
    v23 = v17;
    v21 = 3;
    sub_10009C258();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void FlowAction.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  __int128 v31[2];
  char v32;

  v25 = a2;
  v3 = type metadata accessor for ActionMetrics(0);
  v26 = *(_QWORD *)(v3 - 8);
  v27 = v3;
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v29 = sub_100003304(&qword_100110880);
  v6 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (int *)type metadata accessor for FlowAction(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v12 = a1[4];
  sub_100003C28(a1, v13);
  v14 = sub_10009C18C();
  v28 = v8;
  v15 = v30;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for FlowAction.CodingKeys, &type metadata for FlowAction.CodingKeys, v14, v13, v12);
  if (v15)
  {
    sub_100004624(a1);
  }
  else
  {
    v24 = v6;
    v30 = a1;
    v16 = v11;
    v18 = v26;
    v17 = v27;
    v32 = 0;
    sub_10009C29C();
    v19 = v28;
    v20 = v29;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v31);
    v21 = *((_QWORD *)&v31[0] + 1);
    *(_QWORD *)v16 = *(_QWORD *)&v31[0];
    *((_QWORD *)v16 + 1) = v21;
    LOBYTE(v31[0]) = 1;
    sub_1000035B4(&qword_10010F100, (uint64_t (*)(uint64_t))&type metadata accessor for ActionMetrics, (uint64_t)&protocol conformance descriptor for ActionMetrics);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v5);
    (*(void (**)(char *, _QWORD *, uint64_t))(v18 + 32))(&v16[v9[5]], v5, v17);
    v32 = 2;
    sub_10009C314();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v31);
    sub_10005A194(v31, (uint64_t)&v16[v9[6]]);
    v32 = 3;
    sub_10009C358();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v31);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v19, v20);
    v22 = *((_QWORD *)&v31[0] + 1);
    v23 = &v16[v9[7]];
    *(_QWORD *)v23 = *(_QWORD *)&v31[0];
    *((_QWORD *)v23 + 1) = v22;
    sub_10009C39C((uint64_t)v16, v25);
    sub_100004624(v30);
    sub_10009C3E0((uint64_t)v16);
  }
}

uint64_t sub_10009BBF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10005C5DC((__int128 *)(v2 + *(int *)(a1 + 24)), a2);
}

uint64_t sub_10009BC04(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *(int *)(a1 + 28));
  v3 = *v2;
  swift_bridgeObjectRetain(v2[1]);
  return v3;
}

void sub_10009BC38(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  FlowAction.init(from:)(a1, a2);
}

uint64_t sub_10009BC4C(_QWORD *a1)
{
  return FlowAction.encode(to:)(a1);
}

uint64_t sub_10009BC60(uint64_t a1, uint64_t a2)
{
  return sub_10009BC74(a1, a2);
}

uint64_t sub_10009BC74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _TtC13GameOverlayUI20GameOverlayUIService *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v4 = type metadata accessor for DecodingError(0);
  v47 = *(_QWORD *)(v4 - 8);
  v48 = v4;
  __chkstk_darwin(v4);
  v46 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v42 - v8;
  v10 = type metadata accessor for JSONContext(0, v7);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for FlowAction(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
  v15 = (_TtC13GameOverlayUI20GameOverlayUIService *)Dictionary<>.init(jsonContext:)(v13);
  v16 = sub_1000035B4(&qword_100110970, type metadata accessor for FlowAction, (uint64_t)&protocol conformance descriptor for FlowAction);
  v17 = a1;
  v45 = v14;
  v18 = v49;
  JSONObject.decode<A>(_:withUserInfo:)(v14, v15, v14, v16);
  if (v18)
  {
    v43 = v11;
    v44 = v10;
    v49 = a2;
    swift_bridgeObjectRelease(v15, v19, v20, v21, v22, v23, v24, v25);
    v50 = v18;
    swift_errorRetain(v18);
    v26 = sub_100003304(&qword_10010EB50);
    v27 = v48;
    if (swift_dynamicCast(v9, &v50, v26, v48, 0))
    {
      swift_errorRelease(v18);
      v28 = v46;
      v29 = v47;
      (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v46, v9, v27);
      v30 = type metadata accessor for JSONError(0);
      v31 = sub_1000035B4(&qword_100110978, (uint64_t (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
      swift_allocError(v30, v31, 0, 0);
      v33 = v32;
      v34 = sub_100003304(&qword_100110980);
      v35 = swift_allocObject(v34, 40, 7);
      *(_OWORD *)(v35 + 16) = xmmword_1000C9D90;
      *(_QWORD *)(v35 + 32) = swift_allocError(v27, &protocol witness table for DecodingError, 0, 0);
      (*(void (**)(uint64_t, char *, uint64_t))(v29 + 16))(v36, v28, v27);
      *v33 = v45;
      v33[1] = v35;
      v37 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v30 - 8) + 104))(v33, enum case for JSONError.malformedDocument(_:), v30);
      swift_willThrow(v37);
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v49, v44);
      v38 = type metadata accessor for JSONObject(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 8))(v17, v38);
      (*(void (**)(char *, uint64_t))(v29 + 8))(v28, v27);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v49, v44);
      v41 = type metadata accessor for JSONObject(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 8))(v17, v41);
    }
    return swift_errorRelease(v50);
  }
  else
  {
    swift_bridgeObjectRelease(v15, v19, v20, v21, v22, v23, v24, v25);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a2, v10);
    v39 = type metadata accessor for JSONObject(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 8))(a1, v39);
  }
}

uint64_t sub_10009BFB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 20);
  v5 = type metadata accessor for ActionMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t static FlowAction.ID.gameOverlay.getter()
{
  return 0x7265764F656D6167;
}

_QWORD *sub_10009C014(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  v3 = type metadata accessor for UUID(0);
  __chkstk_darwin(v3);
  v4 = a1[3];
  v5 = a1[4];
  v6 = sub_100003C28(a1, v4);
  dispatch thunk of Decoder.singleValueContainer()(v10, v4, v5);
  if (!v1)
  {
    v7 = v11;
    v8 = v12;
    sub_100003C28(v10, v11);
    v6 = (_QWORD *)dispatch thunk of SingleValueDecodingContainer.decode(_:)(v7, v8);
    sub_100004624(v10);
  }
  sub_100004624(a1);
  return v6;
}

uint64_t sub_10009C150(uint64_t a1, uint64_t a2)
{
  assignWithTake for FlowDestination(a2, a1);
  return a2;
}

unint64_t sub_10009C18C()
{
  unint64_t result;

  result = qword_100110860;
  if (!qword_100110860)
  {
    result = swift_getWitnessTable(&unk_1000CD2F8, &type metadata for FlowAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100110860);
  }
  return result;
}

unint64_t sub_10009C1D0()
{
  unint64_t result;

  result = qword_100110868;
  if (!qword_100110868)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FlowAction.ID, &type metadata for FlowAction.ID);
    atomic_store(result, (unint64_t *)&qword_100110868);
  }
  return result;
}

unint64_t sub_10009C214()
{
  unint64_t result;

  result = qword_100110870;
  if (!qword_100110870)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FlowDestination, &type metadata for FlowDestination);
    atomic_store(result, (unint64_t *)&qword_100110870);
  }
  return result;
}

unint64_t sub_10009C258()
{
  unint64_t result;

  result = qword_100110878;
  if (!qword_100110878)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FlowActionPresentation, &type metadata for FlowActionPresentation);
    atomic_store(result, (unint64_t *)&qword_100110878);
  }
  return result;
}

unint64_t sub_10009C29C()
{
  unint64_t result;

  result = qword_100110888;
  if (!qword_100110888)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FlowAction.ID, &type metadata for FlowAction.ID);
    atomic_store(result, (unint64_t *)&qword_100110888);
  }
  return result;
}

_QWORD *sub_10009C2E0(_QWORD *a1)
{
  destroy for FlowDestination(a1);
  return a1;
}

unint64_t sub_10009C314()
{
  unint64_t result;

  result = qword_100110890;
  if (!qword_100110890)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FlowDestination, &type metadata for FlowDestination);
    atomic_store(result, (unint64_t *)&qword_100110890);
  }
  return result;
}

unint64_t sub_10009C358()
{
  unint64_t result;

  result = qword_100110898;
  if (!qword_100110898)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FlowActionPresentation, &type metadata for FlowActionPresentation);
    atomic_store(result, (unint64_t *)&qword_100110898);
  }
  return result;
}

uint64_t sub_10009C39C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FlowAction(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10009C3E0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FlowAction(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10009C420()
{
  unint64_t result;

  result = qword_1001108A0;
  if (!qword_1001108A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FlowAction.ID, &type metadata for FlowAction.ID);
    atomic_store(result, (unint64_t *)&qword_1001108A0);
  }
  return result;
}

uint64_t sub_10009C464()
{
  return sub_1000035B4(&qword_1001108A8, type metadata accessor for FlowAction, (uint64_t)&protocol conformance descriptor for FlowAction);
}

unint64_t sub_10009C494()
{
  unint64_t result;

  result = qword_1001108B0;
  if (!qword_1001108B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FlowAction.ID, &type metadata for FlowAction.ID);
    atomic_store(result, (unint64_t *)&qword_1001108B0);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for FlowAction(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v18);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for ActionMetrics(0);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = (char *)v4 + v13;
    v15 = (char *)a2 + v13;
    v16 = *(uint64_t *)((char *)a2 + v13 + 24);
    if (v16)
    {
      v17 = *((_QWORD *)v15 + 4);
      *((_QWORD *)v14 + 3) = v16;
      *((_QWORD *)v14 + 4) = v17;
      (**(void (***)(void))(v16 - 8))();
    }
    else
    {
      v19 = *((_OWORD *)v15 + 1);
      *(_OWORD *)v14 = *(_OWORD *)v15;
      *((_OWORD *)v14 + 1) = v19;
      *((_QWORD *)v14 + 4) = *((_QWORD *)v15 + 4);
    }
    v20 = a3[7];
    v21 = (uint64_t *)((char *)v4 + v20);
    v22 = (uint64_t *)((char *)a2 + v20);
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    swift_bridgeObjectRetain(v23);
  }
  return v4;
}

void destroy for FlowAction(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  _QWORD *v19;

  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 8), (SEL)a2, a3, a4, a5, a6, a7, a8);
  v10 = a1 + *(int *)(a2 + 20);
  v11 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v19 = (_QWORD *)(a1 + *(int *)(a2 + 24));
  if (v19[3])
    sub_100004624(v19);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + *(int *)(a2 + 28) + 8), v12, v13, v14, v15, v16, v17, v18);
}

_QWORD *initializeWithCopy for FlowAction(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for ActionMetrics(0);
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  v12 = a3[6];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = *(_QWORD *)((char *)a2 + v12 + 24);
  if (v15)
  {
    v16 = *((_QWORD *)v14 + 4);
    *((_QWORD *)v13 + 3) = v15;
    *((_QWORD *)v13 + 4) = v16;
    (**(void (***)(void))(v15 - 8))();
  }
  else
  {
    v17 = *((_OWORD *)v14 + 1);
    *(_OWORD *)v13 = *(_OWORD *)v14;
    *((_OWORD *)v13 + 1) = v17;
    *((_QWORD *)v13 + 4) = *((_QWORD *)v14 + 4);
  }
  v18 = a3[7];
  v19 = (_QWORD *)((char *)a1 + v18);
  v20 = (_QWORD *)((char *)a2 + v18);
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  swift_bridgeObjectRetain(v21);
  return a1;
}

_QWORD *assignWithCopy for FlowAction(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  _TtC13GameOverlayUI20GameOverlayUIService *v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  _TtC13GameOverlayUI20GameOverlayUIService *v31;
  SEL v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;

  *a1 = *a2;
  v6 = a2[1];
  v7 = (_TtC13GameOverlayUI20GameOverlayUIService *)a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7, v8, v9, v10, v11, v12, v13, v14);
  v15 = a3[5];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = a3[6];
  v20 = (uint64_t)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = *(_QWORD *)((char *)a2 + v19 + 24);
  if (*(_QWORD *)((char *)a1 + v19 + 24))
  {
    if (v22)
    {
      sub_100012CF4((_QWORD *)v20, v21);
    }
    else
    {
      sub_10009C850(v20);
      v23 = *((_QWORD *)v21 + 4);
      v24 = *((_OWORD *)v21 + 1);
      *(_OWORD *)v20 = *(_OWORD *)v21;
      *(_OWORD *)(v20 + 16) = v24;
      *(_QWORD *)(v20 + 32) = v23;
    }
  }
  else if (v22)
  {
    *(_QWORD *)(v20 + 24) = v22;
    *(_QWORD *)(v20 + 32) = *((_QWORD *)v21 + 4);
    (**(void (***)(uint64_t, char *))(v22 - 8))(v20, v21);
  }
  else
  {
    v25 = *(_OWORD *)v21;
    v26 = *((_OWORD *)v21 + 1);
    *(_QWORD *)(v20 + 32) = *((_QWORD *)v21 + 4);
    *(_OWORD *)v20 = v25;
    *(_OWORD *)(v20 + 16) = v26;
  }
  v27 = a3[7];
  v28 = (_QWORD *)((char *)a1 + v27);
  v29 = (_QWORD *)((char *)a2 + v27);
  *v28 = *v29;
  v30 = v29[1];
  v31 = (_TtC13GameOverlayUI20GameOverlayUIService *)v28[1];
  v28[1] = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31, v32, v33, v34, v35, v36, v37, v38);
  return a1;
}

uint64_t sub_10009C850(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100003304(&qword_1001108B8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_OWORD *initializeWithTake for FlowAction(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[6];
  v11 = a3[7];
  v12 = (char *)a1 + v10;
  v13 = (char *)a2 + v10;
  v14 = *((_OWORD *)v13 + 1);
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *((_OWORD *)v12 + 1) = v14;
  *((_QWORD *)v12 + 4) = *((_QWORD *)v13 + 4);
  *(_OWORD *)((char *)a1 + v11) = *(_OWORD *)((char *)a2 + v11);
  return a1;
}

_QWORD *assignWithTake for FlowAction(_QWORD *a1, uint64_t a2, int *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t v11;
  _TtC13GameOverlayUI20GameOverlayUIService *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  _TtC13GameOverlayUI20GameOverlayUIService *v33;

  v11 = *(_QWORD *)(a2 + 8);
  v12 = (_TtC13GameOverlayUI20GameOverlayUIService *)a1[1];
  *a1 = *(_QWORD *)a2;
  a1[1] = v11;
  swift_bridgeObjectRelease(v12, (SEL)a2, a3, a4, a5, a6, a7, a8);
  v13 = a3[5];
  v14 = (char *)a1 + v13;
  v15 = a2 + v13;
  v16 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 40))(v14, v15, v16);
  v24 = a3[6];
  v25 = (uint64_t)a1 + v24;
  v26 = a2 + v24;
  if (*(_QWORD *)((char *)a1 + v24 + 24))
  {
    if (*(_QWORD *)(v26 + 24))
      sub_100004624((_QWORD *)v25);
    else
      sub_10009C850(v25);
  }
  v27 = *(_OWORD *)(v26 + 16);
  *(_OWORD *)v25 = *(_OWORD *)v26;
  *(_OWORD *)(v25 + 16) = v27;
  *(_QWORD *)(v25 + 32) = *(_QWORD *)(v26 + 32);
  v28 = a3[7];
  v29 = (_QWORD *)((char *)a1 + v28);
  v30 = (uint64_t *)(a2 + v28);
  v32 = *v30;
  v31 = v30[1];
  v33 = (_TtC13GameOverlayUI20GameOverlayUIService *)v29[1];
  *v29 = v32;
  v29[1] = v31;
  swift_bridgeObjectRelease(v33, v17, v18, v19, v20, v21, v22, v23);
  return a1;
}

uint64_t getEnumTagSinglePayload for FlowAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10009C9FC);
}

uint64_t sub_10009C9FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for ActionMetrics(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for FlowAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10009CA84);
}

uint64_t sub_10009CA84(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for ActionMetrics(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_10009CAF8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_1000CD200;
  result = type metadata accessor for ActionMetrics(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_1000CD218;
    v4[3] = &unk_1000CD200;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for FlowAction.ID()
{
  return &type metadata for FlowAction.ID;
}

uint64_t storeEnumTagSinglePayload for FlowAction.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10009CBD4 + 4 * byte_1000CCFB9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10009CC08 + 4 * byte_1000CCFB4[v4]))();
}

uint64_t sub_10009CC08(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009CC10(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10009CC18);
  return result;
}

uint64_t sub_10009CC24(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10009CC2CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10009CC30(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009CC38(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FlowAction.CodingKeys()
{
  return &type metadata for FlowAction.CodingKeys;
}

unint64_t sub_10009CC58()
{
  unint64_t result;

  result = qword_100110958;
  if (!qword_100110958)
  {
    result = swift_getWitnessTable(&unk_1000CD2D0, &type metadata for FlowAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100110958);
  }
  return result;
}

unint64_t sub_10009CCA0()
{
  unint64_t result;

  result = qword_100110960;
  if (!qword_100110960)
  {
    result = swift_getWitnessTable(&unk_1000CD240, &type metadata for FlowAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100110960);
  }
  return result;
}

unint64_t sub_10009CCE8()
{
  unint64_t result;

  result = qword_100110968;
  if (!qword_100110968)
  {
    result = swift_getWitnessTable(&unk_1000CD268, &type metadata for FlowAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100110968);
  }
  return result;
}

uint64_t sub_10009CD2C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x654D6E6F69746361 && a2 == 0xED00007363697274)
  {
    v7 = 0xED00007363697274;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x654D6E6F69746361, 0xED00007363697274, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x74616E6974736564 && a2 == 0xEB000000006E6F69)
  {
    v8 = 0xEB000000006E6F69;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74616E6974736564, 0xEB000000006E6F69, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x61746E6573657270 && a2 == 0xEC0000006E6F6974)
  {
    swift_bridgeObjectRelease(0xEC0000006E6F6974);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x61746E6573657270, 0xEC0000006E6F6974, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

unint64_t sub_10009CF20()
{
  unint64_t result;

  result = qword_100110988;
  if (!qword_100110988)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FlowAction.ID, &type metadata for FlowAction.ID);
    atomic_store(result, (unint64_t *)&qword_100110988);
  }
  return result;
}

void *InGameBannerPageIntent.kind.unsafeMutableAddressor()
{
  return &static InGameBannerPageIntent.kind;
}

unint64_t static InGameBannerPageIntent.kind.getter()
{
  return 0xD000000000000016;
}

uint64_t InGameBannerPageIntent.requiredData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100084544(v1, a1);
}

uint64_t sub_10009CF98()
{
  return 0x6465726975716572;
}

uint64_t sub_10009CFB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x6465726975716572 && a2 == 0xEC00000061746144)
  {
    result = swift_bridgeObjectRelease(0xEC00000061746144);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6465726975716572, 0xEC00000061746144, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_10009D064(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10009D1BC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10009D08C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10009D1BC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t InGameBannerPageIntent.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v2 = v1;
  v4 = sub_100003304(&qword_100110990);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_100003C28(a1, v8);
  v10 = sub_10009D1BC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for InGameBannerPageIntent.CodingKeys, &type metadata for InGameBannerPageIntent.CodingKeys, v10, v8, v9);
  type metadata accessor for InGameBannerRequiredData(0);
  sub_10009D400(&qword_1001109A0, (uint64_t)&protocol conformance descriptor for InGameBannerRequiredData);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v2);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_10009D1BC()
{
  unint64_t result;

  result = qword_100110998;
  if (!qword_100110998)
  {
    result = swift_getWitnessTable(&unk_1000CD4F0, &type metadata for InGameBannerPageIntent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100110998);
  }
  return result;
}

uint64_t InGameBannerPageIntent.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v16 = a2;
  v4 = type metadata accessor for InGameBannerRequiredData(0);
  __chkstk_darwin(v4);
  v18 = (uint64_t *)((char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_100003304(&qword_1001109A8);
  v17 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for InGameBannerPageIntent(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_100003C28(a1, v12);
  v14 = sub_10009D1BC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for InGameBannerPageIntent.CodingKeys, &type metadata for InGameBannerPageIntent.CodingKeys, v14, v12, v13);
  if (!v2)
  {
    sub_10009D400(&qword_1001109B0, (uint64_t)&protocol conformance descriptor for InGameBannerRequiredData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v18);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v8, v6);
    sub_100010F0C((uint64_t)v18, (uint64_t)v11, type metadata accessor for InGameBannerRequiredData);
    sub_100010F0C((uint64_t)v11, v16, type metadata accessor for InGameBannerPageIntent);
  }
  return sub_100004624(a1);
}

uint64_t type metadata accessor for InGameBannerPageIntent(uint64_t a1)
{
  uint64_t result;

  result = qword_100110A10;
  if (!qword_100110A10)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for InGameBannerPageIntent);
  return result;
}

uint64_t sub_10009D400(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for InGameBannerRequiredData(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

void sub_10009D440(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000016;
  a1[1] = 0x80000001000CD340;
}

uint64_t sub_10009D460@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return InGameBannerPageIntent.init(from:)(a1, a2);
}

uint64_t initializeBufferWithCopyOfBuffer for InGameBannerPageIntent(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  int *v28;
  uint64_t v29;
  unsigned int (*v30)(_QWORD *, uint64_t, int *);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  void (*v44)(_QWORD *, _QWORD, uint64_t, int *);
  char *__dst;
  unsigned int (*v47)(char *, uint64_t, uint64_t);
  uint64_t v48;

  v4 = type metadata accessor for InGameBannerRequiredData(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v16 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v16);
  }
  else
  {
    v6 = v4;
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v7;
    v8 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v8;
    v9 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v9;
    v10 = a2[8];
    *(_QWORD *)(a1 + 56) = a2[7];
    *(_QWORD *)(a1 + 64) = v10;
    v11 = a2[10];
    *(_QWORD *)(a1 + 72) = a2[9];
    *(_QWORD *)(a1 + 80) = v11;
    *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
    v12 = a2[13];
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    if (v12)
    {
      *(_QWORD *)(a1 + 96) = a2[12];
      *(_QWORD *)(a1 + 104) = v12;
      v13 = a2[15];
      *(_QWORD *)(a1 + 112) = a2[14];
      *(_QWORD *)(a1 + 120) = v13;
      v14 = a2[17];
      *(_QWORD *)(a1 + 128) = a2[16];
      *(_QWORD *)(a1 + 136) = v14;
      v15 = a2[19];
      *(_QWORD *)(a1 + 144) = a2[18];
      *(_QWORD *)(a1 + 152) = v15;
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRetain(v14);
      swift_bridgeObjectRetain(v15);
    }
    else
    {
      v17 = *((_OWORD *)a2 + 7);
      *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
      *(_OWORD *)(a1 + 112) = v17;
      v18 = *((_OWORD *)a2 + 9);
      *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
      *(_OWORD *)(a1 + 144) = v18;
    }
    v19 = a2[21];
    *(_QWORD *)(a1 + 160) = a2[20];
    *(_QWORD *)(a1 + 168) = v19;
    v20 = a2[23];
    *(_QWORD *)(a1 + 176) = a2[22];
    *(_QWORD *)(a1 + 184) = v20;
    v21 = a2 + 24;
    v22 = a2[25];
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v20);
    if (v22 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 192) = *(_OWORD *)v21;
    }
    else
    {
      v23 = *v21;
      sub_100019F94(*v21, v22);
      *(_QWORD *)(a1 + 192) = v23;
      *(_QWORD *)(a1 + 200) = v22;
    }
    v24 = a2[27];
    *(_QWORD *)(a1 + 208) = a2[26];
    *(_QWORD *)(a1 + 216) = v24;
    v25 = *(int *)(v6 + 40);
    v26 = (_QWORD *)(a1 + v25);
    v27 = (uint64_t *)((char *)a2 + v25);
    v28 = (int *)type metadata accessor for Game(0);
    v29 = *((_QWORD *)v28 - 1);
    v30 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v29 + 48);
    swift_bridgeObjectRetain(v24);
    if (v30(v27, 1, v28))
    {
      v31 = sub_100003304(&qword_10010CA78);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      v48 = v29;
      v32 = v27[1];
      *v26 = *v27;
      v26[1] = v32;
      v33 = v27[3];
      v26[2] = v27[2];
      v26[3] = v33;
      v34 = v27[5];
      v26[4] = v27[4];
      v26[5] = v34;
      v35 = v28[7];
      __dst = (char *)v26 + v35;
      v36 = (char *)v27 + v35;
      v37 = type metadata accessor for Date(0);
      v38 = *(_QWORD *)(v37 - 8);
      v47 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48);
      swift_bridgeObjectRetain(v32);
      swift_bridgeObjectRetain(v33);
      swift_bridgeObjectRetain(v34);
      if (v47(v36, 1, v37))
      {
        v39 = sub_100003304(&qword_10010CC10);
        memcpy(__dst, v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v38 + 16))(__dst, v36, v37);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(__dst, 0, 1, v37);
      }
      *(_QWORD *)((char *)v26 + v28[8]) = *(_QWORD *)((char *)v27 + v28[8]);
      *((_BYTE *)v26 + v28[9]) = *((_BYTE *)v27 + v28[9]);
      *((_BYTE *)v26 + v28[10]) = *((_BYTE *)v27 + v28[10]);
      *((_BYTE *)v26 + v28[11]) = *((_BYTE *)v27 + v28[11]);
      *((_BYTE *)v26 + v28[12]) = *((_BYTE *)v27 + v28[12]);
      *((_BYTE *)v26 + v28[13]) = *((_BYTE *)v27 + v28[13]);
      *((_BYTE *)v26 + v28[14]) = *((_BYTE *)v27 + v28[14]);
      v40 = v28[15];
      v41 = (_QWORD *)((char *)v26 + v40);
      v42 = (_QWORD *)((char *)v27 + v40);
      v43 = v42[1];
      *v41 = *v42;
      v41[1] = v43;
      v44 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v48 + 56);
      swift_bridgeObjectRetain(v43);
      v44(v26, 0, 1, v28);
    }
  }
  return a1;
}

void destroy for InGameBannerPageIntent(uint64_t a1, const char *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  SEL v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  SEL v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  SEL v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  SEL v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  const char *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  _TtC13GameOverlayUI20GameOverlayUIService *v44;
  SEL v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  SEL v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  SEL v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  SEL v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  unint64_t v79;
  _TtC13GameOverlayUI20GameOverlayUIService **v80;
  uint64_t v81;
  const char *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  SEL v89;
  id v90;
  id v91;
  id v92;
  id v93;
  id v94;
  id v95;
  SEL v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  id v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  const char *v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;

  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 16), a2, a3, a4, a5, a6, a7, a8);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 32), v9, v10, v11, v12, v13, v14, v15);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 48), v16, v17, v18, v19, v20, v21, v22);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 64), v23, v24, v25, v26, v27, v28, v29);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 80), v30, v31, v32, v33, v34, v35, v36);
  v44 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 104);
  if (v44)
  {
    swift_bridgeObjectRelease(v44, v37, v38, v39, v40, v41, v42, v43);
    swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 120), v45, v46, v47, v48, v49, v50, v51);
    swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 136), v52, v53, v54, v55, v56, v57, v58);
    swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 152), v59, v60, v61, v62, v63, v64, v65);
  }
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 168), v37, v38, v39, v40, v41, v42, v43);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 184), v66, v67, v68, v69, v70, v71, v72);
  v79 = *(_QWORD *)(a1 + 200);
  if (v79 >> 60 != 15)
    sub_100038198(*(_QWORD *)(a1 + 192), v79);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 216), (SEL)v79, v73, v74, v75, v76, v77, v78);
  v80 = (_TtC13GameOverlayUI20GameOverlayUIService **)(a1
                                                     + *(int *)(type metadata accessor for InGameBannerRequiredData(0)
                                                              + 40));
  v81 = type metadata accessor for Game(0);
  if (!(*(unsigned int (**)(_TtC13GameOverlayUI20GameOverlayUIService **, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 48))(v80, 1, v81))
  {
    swift_bridgeObjectRelease(v80[1], v82, v83, v84, v85, v86, v87, v88);
    swift_bridgeObjectRelease(v80[3], v89, v90, v91, v92, v93, v94, v95);
    swift_bridgeObjectRelease(v80[5], v96, v97, v98, v99, v100, v101, v102);
    v103 = (char *)v80 + *(int *)(v81 + 28);
    v104 = type metadata accessor for Date(0);
    v105 = *(_QWORD *)(v104 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v105 + 48))(v103, 1, v104))
      (*(void (**)(char *, uint64_t))(v105 + 8))(v103, v104);
    swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)((char *)v80 + *(int *)(v81 + 60) + 8), v106, v107, v108, v109, v110, v111, v112);
  }
}

uint64_t initializeWithCopy for InGameBannerPageIntent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  int *v24;
  uint64_t v25;
  unsigned int (*v26)(_QWORD *, uint64_t, int *);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  void (*v40)(_QWORD *, _QWORD, uint64_t, int *);
  unsigned int (*v42)(char *, uint64_t, uint64_t);
  char *__dst;
  uint64_t v44;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v7;
  v8 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v8;
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v9 = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  if (v9)
  {
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = v9;
    v10 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 120) = v10;
    v11 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 136) = v11;
    v12 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 152) = v12;
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
  }
  else
  {
    v13 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v13;
    v14 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v14;
  }
  v15 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v15;
  v16 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v16;
  v17 = (uint64_t *)(a2 + 192);
  v18 = *(_QWORD *)(a2 + 200);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v16);
  if (v18 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 192) = *(_OWORD *)v17;
  }
  else
  {
    v19 = *v17;
    sub_100019F94(*v17, v18);
    *(_QWORD *)(a1 + 192) = v19;
    *(_QWORD *)(a1 + 200) = v18;
  }
  v20 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = v20;
  v21 = *(int *)(type metadata accessor for InGameBannerRequiredData(0) + 40);
  v22 = (_QWORD *)(a1 + v21);
  v23 = (_QWORD *)(a2 + v21);
  v24 = (int *)type metadata accessor for Game(0);
  v25 = *((_QWORD *)v24 - 1);
  v26 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v25 + 48);
  swift_bridgeObjectRetain(v20);
  if (v26(v23, 1, v24))
  {
    v27 = sub_100003304(&qword_10010CA78);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    v28 = v23[1];
    *v22 = *v23;
    v22[1] = v28;
    v29 = v23[3];
    v22[2] = v23[2];
    v22[3] = v29;
    v30 = v23[5];
    v22[4] = v23[4];
    v22[5] = v30;
    v31 = v24[7];
    __dst = (char *)v22 + v31;
    v44 = v25;
    v32 = (char *)v23 + v31;
    v33 = type metadata accessor for Date(0);
    v34 = *(_QWORD *)(v33 - 8);
    v42 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48);
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v30);
    if (v42(v32, 1, v33))
    {
      v35 = sub_100003304(&qword_10010CC10);
      memcpy(__dst, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v34 + 16))(__dst, v32, v33);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(__dst, 0, 1, v33);
    }
    *(_QWORD *)((char *)v22 + v24[8]) = *(_QWORD *)((char *)v23 + v24[8]);
    *((_BYTE *)v22 + v24[9]) = *((_BYTE *)v23 + v24[9]);
    *((_BYTE *)v22 + v24[10]) = *((_BYTE *)v23 + v24[10]);
    *((_BYTE *)v22 + v24[11]) = *((_BYTE *)v23 + v24[11]);
    *((_BYTE *)v22 + v24[12]) = *((_BYTE *)v23 + v24[12]);
    *((_BYTE *)v22 + v24[13]) = *((_BYTE *)v23 + v24[13]);
    *((_BYTE *)v22 + v24[14]) = *((_BYTE *)v23 + v24[14]);
    v36 = v24[15];
    v37 = (_QWORD *)((char *)v22 + v36);
    v38 = (_QWORD *)((char *)v23 + v36);
    v39 = v38[1];
    *v37 = *v38;
    v37[1] = v39;
    v40 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v44 + 56);
    swift_bridgeObjectRetain(v39);
    v40(v22, 0, 1, v24);
  }
  return a1;
}

uint64_t assignWithCopy for InGameBannerPageIntent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _TtC13GameOverlayUI20GameOverlayUIService *v5;
  SEL v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  _TtC13GameOverlayUI20GameOverlayUIService *v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  _TtC13GameOverlayUI20GameOverlayUIService *v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  _TtC13GameOverlayUI20GameOverlayUIService *v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  _TtC13GameOverlayUI20GameOverlayUIService *v41;
  SEL v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  _OWORD *v49;
  __int128 *v50;
  _TtC13GameOverlayUI20GameOverlayUIService *v51;
  uint64_t v52;
  uint64_t v53;
  SEL v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  uint64_t v61;
  _TtC13GameOverlayUI20GameOverlayUIService *v62;
  SEL v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  uint64_t v70;
  _TtC13GameOverlayUI20GameOverlayUIService *v71;
  SEL v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  uint64_t v79;
  _TtC13GameOverlayUI20GameOverlayUIService *v80;
  SEL v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  _TtC13GameOverlayUI20GameOverlayUIService *v99;
  SEL v100;
  id v101;
  id v102;
  id v103;
  id v104;
  id v105;
  id v106;
  uint64_t v107;
  _TtC13GameOverlayUI20GameOverlayUIService *v108;
  SEL v109;
  id v110;
  id v111;
  id v112;
  id v113;
  id v114;
  id v115;
  uint64_t *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  _TtC13GameOverlayUI20GameOverlayUIService *v123;
  SEL v124;
  id v125;
  id v126;
  id v127;
  id v128;
  id v129;
  id v130;
  uint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  int *v134;
  uint64_t v135;
  uint64_t (*v136)(_QWORD *, uint64_t, int *);
  int v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _TtC13GameOverlayUI20GameOverlayUIService *v148;
  SEL v149;
  id v150;
  id v151;
  id v152;
  id v153;
  id v154;
  id v155;
  uint64_t v156;
  _TtC13GameOverlayUI20GameOverlayUIService *v157;
  SEL v158;
  id v159;
  id v160;
  id v161;
  id v162;
  id v163;
  id v164;
  uint64_t v165;
  _TtC13GameOverlayUI20GameOverlayUIService *v166;
  SEL v167;
  id v168;
  id v169;
  id v170;
  id v171;
  id v172;
  id v173;
  uint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t (*v179)(char *, uint64_t, uint64_t);
  int v180;
  int v181;
  uint64_t v182;
  _QWORD *v183;
  _QWORD *v184;
  uint64_t v185;
  void (*v186)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v187;
  uint64_t v188;
  _QWORD *v189;
  _QWORD *v190;
  uint64_t v191;
  _TtC13GameOverlayUI20GameOverlayUIService *v192;
  SEL v193;
  id v194;
  id v195;
  id v196;
  id v197;
  id v198;
  id v199;
  uint64_t v201;
  unsigned int (*v202)(char *, uint64_t, uint64_t);
  char *__dst;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5, v6, v7, v8, v9, v10, v11, v12);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v13 = *(_QWORD *)(a2 + 32);
  v14 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14, v15, v16, v17, v18, v19, v20, v21);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v22 = *(_QWORD *)(a2 + 48);
  v23 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23, v24, v25, v26, v27, v28, v29, v30);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(a2 + 64);
  v32 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v31;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease(v32, v33, v34, v35, v36, v37, v38, v39);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v40 = *(_QWORD *)(a2 + 80);
  v41 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v40;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRelease(v41, v42, v43, v44, v45, v46, v47, v48);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v49 = (_OWORD *)(a1 + 96);
  v50 = (__int128 *)(a2 + 96);
  v51 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 104);
  v52 = *(_QWORD *)(a2 + 104);
  if (v51)
  {
    if (v52)
    {
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      v53 = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 104) = v53;
      swift_bridgeObjectRetain(v53);
      swift_bridgeObjectRelease(v51, v54, v55, v56, v57, v58, v59, v60);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      v61 = *(_QWORD *)(a2 + 120);
      v62 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 120);
      *(_QWORD *)(a1 + 120) = v61;
      swift_bridgeObjectRetain(v61);
      swift_bridgeObjectRelease(v62, v63, v64, v65, v66, v67, v68, v69);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      v70 = *(_QWORD *)(a2 + 136);
      v71 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 136);
      *(_QWORD *)(a1 + 136) = v70;
      swift_bridgeObjectRetain(v70);
      swift_bridgeObjectRelease(v71, v72, v73, v74, v75, v76, v77, v78);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      v79 = *(_QWORD *)(a2 + 152);
      v80 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 152);
      *(_QWORD *)(a1 + 152) = v79;
      swift_bridgeObjectRetain(v79);
      swift_bridgeObjectRelease(v80, v81, v82, v83, v84, v85, v86, v87);
    }
    else
    {
      sub_100004244((_QWORD *)(a1 + 96));
      v92 = *(_OWORD *)(a2 + 144);
      v94 = *v50;
      v93 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v92;
      *v49 = v94;
      *(_OWORD *)(a1 + 112) = v93;
    }
  }
  else if (v52)
  {
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    v88 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 104) = v88;
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    v89 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 120) = v89;
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    v90 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 136) = v90;
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    v91 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 152) = v91;
    swift_bridgeObjectRetain(v88);
    swift_bridgeObjectRetain(v89);
    swift_bridgeObjectRetain(v90);
    swift_bridgeObjectRetain(v91);
  }
  else
  {
    v95 = *v50;
    v96 = *(_OWORD *)(a2 + 112);
    v97 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v97;
    *v49 = v95;
    *(_OWORD *)(a1 + 112) = v96;
  }
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  v98 = *(_QWORD *)(a2 + 168);
  v99 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v98;
  swift_bridgeObjectRetain(v98);
  swift_bridgeObjectRelease(v99, v100, v101, v102, v103, v104, v105, v106);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  v107 = *(_QWORD *)(a2 + 184);
  v108 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 184);
  *(_QWORD *)(a1 + 184) = v107;
  swift_bridgeObjectRetain(v107);
  swift_bridgeObjectRelease(v108, v109, v110, v111, v112, v113, v114, v115);
  v116 = (uint64_t *)(a2 + 192);
  v117 = *(_QWORD *)(a2 + 200);
  if (*(_QWORD *)(a1 + 200) >> 60 == 15)
  {
    if (v117 >> 60 != 15)
    {
      v118 = *v116;
      sub_100019F94(*v116, *(_QWORD *)(a2 + 200));
      *(_QWORD *)(a1 + 192) = v118;
      *(_QWORD *)(a1 + 200) = v117;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v117 >> 60 == 15)
  {
    sub_10005B718(a1 + 192);
LABEL_13:
    *(_OWORD *)(a1 + 192) = *(_OWORD *)v116;
    goto LABEL_15;
  }
  v119 = *v116;
  sub_100019F94(*v116, *(_QWORD *)(a2 + 200));
  v120 = *(_QWORD *)(a1 + 192);
  v121 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 192) = v119;
  *(_QWORD *)(a1 + 200) = v117;
  sub_100038198(v120, v121);
LABEL_15:
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  v122 = *(_QWORD *)(a2 + 216);
  v123 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 216);
  *(_QWORD *)(a1 + 216) = v122;
  swift_bridgeObjectRetain(v122);
  swift_bridgeObjectRelease(v123, v124, v125, v126, v127, v128, v129, v130);
  v131 = *(int *)(type metadata accessor for InGameBannerRequiredData(0) + 40);
  v132 = (_QWORD *)(a1 + v131);
  v133 = (_QWORD *)(a2 + v131);
  v134 = (int *)type metadata accessor for Game(0);
  v135 = *((_QWORD *)v134 - 1);
  v136 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v135 + 48);
  v137 = v136(v132, 1, v134);
  v138 = v136(v133, 1, v134);
  if (!v137)
  {
    if (v138)
    {
      sub_10006A704((uint64_t)v132);
      goto LABEL_21;
    }
    *v132 = *v133;
    v147 = v133[1];
    v148 = (_TtC13GameOverlayUI20GameOverlayUIService *)v132[1];
    v132[1] = v147;
    swift_bridgeObjectRetain(v147);
    swift_bridgeObjectRelease(v148, v149, v150, v151, v152, v153, v154, v155);
    v132[2] = v133[2];
    v156 = v133[3];
    v157 = (_TtC13GameOverlayUI20GameOverlayUIService *)v132[3];
    v132[3] = v156;
    swift_bridgeObjectRetain(v156);
    swift_bridgeObjectRelease(v157, v158, v159, v160, v161, v162, v163, v164);
    v132[4] = v133[4];
    v165 = v133[5];
    v166 = (_TtC13GameOverlayUI20GameOverlayUIService *)v132[5];
    v132[5] = v165;
    swift_bridgeObjectRetain(v165);
    swift_bridgeObjectRelease(v166, v167, v168, v169, v170, v171, v172, v173);
    v174 = v134[7];
    v175 = (char *)v132 + v174;
    v176 = (char *)v133 + v174;
    v177 = type metadata accessor for Date(0);
    v178 = *(_QWORD *)(v177 - 8);
    v179 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v178 + 48);
    v180 = v179(v175, 1, v177);
    v181 = v179(v176, 1, v177);
    if (v180)
    {
      if (!v181)
      {
        (*(void (**)(char *, char *, uint64_t))(v178 + 16))(v175, v176, v177);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v178 + 56))(v175, 0, 1, v177);
LABEL_30:
        *(_QWORD *)((char *)v132 + v134[8]) = *(_QWORD *)((char *)v133 + v134[8]);
        *((_BYTE *)v132 + v134[9]) = *((_BYTE *)v133 + v134[9]);
        *((_BYTE *)v132 + v134[10]) = *((_BYTE *)v133 + v134[10]);
        *((_BYTE *)v132 + v134[11]) = *((_BYTE *)v133 + v134[11]);
        *((_BYTE *)v132 + v134[12]) = *((_BYTE *)v133 + v134[12]);
        *((_BYTE *)v132 + v134[13]) = *((_BYTE *)v133 + v134[13]);
        *((_BYTE *)v132 + v134[14]) = *((_BYTE *)v133 + v134[14]);
        v188 = v134[15];
        v189 = (_QWORD *)((char *)v132 + v188);
        v190 = (_QWORD *)((char *)v133 + v188);
        *v189 = *v190;
        v191 = v190[1];
        v192 = (_TtC13GameOverlayUI20GameOverlayUIService *)v189[1];
        v189[1] = v191;
        swift_bridgeObjectRetain(v191);
        swift_bridgeObjectRelease(v192, v193, v194, v195, v196, v197, v198, v199);
        return a1;
      }
    }
    else
    {
      if (!v181)
      {
        (*(void (**)(char *, char *, uint64_t))(v178 + 24))(v175, v176, v177);
        goto LABEL_30;
      }
      (*(void (**)(char *, uint64_t))(v178 + 8))(v175, v177);
    }
    v187 = sub_100003304(&qword_10010CC10);
    memcpy(v175, v176, *(_QWORD *)(*(_QWORD *)(v187 - 8) + 64));
    goto LABEL_30;
  }
  if (v138)
  {
LABEL_21:
    v146 = sub_100003304(&qword_10010CA78);
    memcpy(v132, v133, *(_QWORD *)(*(_QWORD *)(v146 - 8) + 64));
    return a1;
  }
  *v132 = *v133;
  v139 = v133[1];
  v132[1] = v139;
  v132[2] = v133[2];
  v140 = v133[3];
  v132[3] = v140;
  v132[4] = v133[4];
  v141 = v133[5];
  v132[5] = v141;
  v142 = v134[7];
  __dst = (char *)v132 + v142;
  v143 = (char *)v133 + v142;
  v144 = type metadata accessor for Date(0);
  v201 = *(_QWORD *)(v144 - 8);
  v202 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v201 + 48);
  swift_bridgeObjectRetain(v139);
  swift_bridgeObjectRetain(v140);
  swift_bridgeObjectRetain(v141);
  if (v202(v143, 1, v144))
  {
    v145 = sub_100003304(&qword_10010CC10);
    memcpy(__dst, v143, *(_QWORD *)(*(_QWORD *)(v145 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v201 + 16))(__dst, v143, v144);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v201 + 56))(__dst, 0, 1, v144);
  }
  *(_QWORD *)((char *)v132 + v134[8]) = *(_QWORD *)((char *)v133 + v134[8]);
  *((_BYTE *)v132 + v134[9]) = *((_BYTE *)v133 + v134[9]);
  *((_BYTE *)v132 + v134[10]) = *((_BYTE *)v133 + v134[10]);
  *((_BYTE *)v132 + v134[11]) = *((_BYTE *)v133 + v134[11]);
  *((_BYTE *)v132 + v134[12]) = *((_BYTE *)v133 + v134[12]);
  *((_BYTE *)v132 + v134[13]) = *((_BYTE *)v133 + v134[13]);
  *((_BYTE *)v132 + v134[14]) = *((_BYTE *)v133 + v134[14]);
  v182 = v134[15];
  v183 = (_QWORD *)((char *)v132 + v182);
  v184 = (_QWORD *)((char *)v133 + v182);
  *v183 = *v184;
  v185 = v184[1];
  v183[1] = v185;
  v186 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v135 + 56);
  swift_bridgeObjectRetain(v185);
  v186(v132, 0, 1, v134);
  return a1;
}

uint64_t initializeWithTake for InGameBannerPageIntent(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v4;
  v5 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v5;
  v6 = *(int *)(type metadata accessor for InGameBannerRequiredData(0) + 40);
  v7 = (_OWORD *)(a1 + v6);
  v8 = (_OWORD *)(a2 + v6);
  v9 = (int *)type metadata accessor for Game(0);
  v10 = *((_QWORD *)v9 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_100003304(&qword_10010CA78);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v12 = v8[1];
    *v7 = *v8;
    v7[1] = v12;
    v7[2] = v8[2];
    v13 = v9[7];
    v14 = (char *)v7 + v13;
    v15 = (char *)v8 + v13;
    v16 = type metadata accessor for Date(0);
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      v18 = sub_100003304(&qword_10010CC10);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v14, v15, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    *(_QWORD *)((char *)v7 + v9[8]) = *(_QWORD *)((char *)v8 + v9[8]);
    *((_BYTE *)v7 + v9[9]) = *((_BYTE *)v8 + v9[9]);
    *((_BYTE *)v7 + v9[10]) = *((_BYTE *)v8 + v9[10]);
    *((_BYTE *)v7 + v9[11]) = *((_BYTE *)v8 + v9[11]);
    *((_BYTE *)v7 + v9[12]) = *((_BYTE *)v8 + v9[12]);
    *((_BYTE *)v7 + v9[13]) = *((_BYTE *)v8 + v9[13]);
    *((_BYTE *)v7 + v9[14]) = *((_BYTE *)v8 + v9[14]);
    *(_OWORD *)((char *)v7 + v9[15]) = *(_OWORD *)((char *)v8 + v9[15]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v10 + 56))(v7, 0, 1, v9);
  }
  return a1;
}

uint64_t assignWithTake for InGameBannerPageIntent(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t v10;
  _TtC13GameOverlayUI20GameOverlayUIService *v11;
  uint64_t v12;
  _TtC13GameOverlayUI20GameOverlayUIService *v13;
  SEL v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  _TtC13GameOverlayUI20GameOverlayUIService *v22;
  SEL v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  _TtC13GameOverlayUI20GameOverlayUIService *v31;
  SEL v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  _TtC13GameOverlayUI20GameOverlayUIService *v40;
  SEL v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  const char *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  _TtC13GameOverlayUI20GameOverlayUIService *v55;
  uint64_t v56;
  uint64_t v57;
  _TtC13GameOverlayUI20GameOverlayUIService *v58;
  SEL v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  uint64_t v66;
  _TtC13GameOverlayUI20GameOverlayUIService *v67;
  SEL v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  uint64_t v75;
  _TtC13GameOverlayUI20GameOverlayUIService *v76;
  SEL v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  _TtC13GameOverlayUI20GameOverlayUIService *v87;
  uint64_t v88;
  _TtC13GameOverlayUI20GameOverlayUIService *v89;
  SEL v90;
  id v91;
  id v92;
  id v93;
  id v94;
  id v95;
  id v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  _OWORD *v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _TtC13GameOverlayUI20GameOverlayUIService *v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  int *v112;
  uint64_t v113;
  uint64_t (*v114)(_QWORD *, uint64_t, int *);
  int v115;
  int v116;
  const char *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  __int128 v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _TtC13GameOverlayUI20GameOverlayUIService *v133;
  uint64_t v134;
  _TtC13GameOverlayUI20GameOverlayUIService *v135;
  SEL v136;
  id v137;
  id v138;
  id v139;
  id v140;
  id v141;
  id v142;
  uint64_t v143;
  _TtC13GameOverlayUI20GameOverlayUIService *v144;
  SEL v145;
  id v146;
  id v147;
  id v148;
  id v149;
  id v150;
  id v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t (*v157)(char *, uint64_t, uint64_t);
  int v158;
  int v159;
  const char *v160;
  void *v161;
  void *v162;
  void *v163;
  void *v164;
  void *v165;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  _TtC13GameOverlayUI20GameOverlayUIService *v173;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v10;
  swift_bridgeObjectRelease(v11, (SEL)a2, a3, a4, a5, a6, a7, a8);
  v12 = *(_QWORD *)(a2 + 32);
  v13 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v12;
  swift_bridgeObjectRelease(v13, v14, v15, v16, v17, v18, v19, v20);
  v21 = *(_QWORD *)(a2 + 48);
  v22 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v21;
  swift_bridgeObjectRelease(v22, v23, v24, v25, v26, v27, v28, v29);
  v30 = *(_QWORD *)(a2 + 64);
  v31 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v30;
  swift_bridgeObjectRelease(v31, v32, v33, v34, v35, v36, v37, v38);
  v39 = *(_QWORD *)(a2 + 80);
  v40 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v39;
  swift_bridgeObjectRelease(v40, v41, v42, v43, v44, v45, v46, v47);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v55 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 104);
  if (v55)
  {
    v56 = *(_QWORD *)(a2 + 104);
    if (v56)
    {
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = v56;
      swift_bridgeObjectRelease(v55, v48, v49, v50, v51, v52, v53, v54);
      v57 = *(_QWORD *)(a2 + 120);
      v58 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 120);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = v57;
      swift_bridgeObjectRelease(v58, v59, v60, v61, v62, v63, v64, v65);
      v66 = *(_QWORD *)(a2 + 136);
      v67 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 136);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 136) = v66;
      swift_bridgeObjectRelease(v67, v68, v69, v70, v71, v72, v73, v74);
      v75 = *(_QWORD *)(a2 + 152);
      v76 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 152);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_QWORD *)(a1 + 152) = v75;
      swift_bridgeObjectRelease(v76, v77, v78, v79, v80, v81, v82, v83);
      goto LABEL_6;
    }
    sub_100004244((_QWORD *)(a1 + 96));
  }
  v84 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v84;
  v85 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v85;
LABEL_6:
  v86 = *(_QWORD *)(a2 + 168);
  v87 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v86;
  swift_bridgeObjectRelease(v87, v48, v49, v50, v51, v52, v53, v54);
  v88 = *(_QWORD *)(a2 + 184);
  v89 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v88;
  swift_bridgeObjectRelease(v89, v90, v91, v92, v93, v94, v95, v96);
  v103 = (_OWORD *)(a2 + 192);
  v104 = *(_QWORD *)(a1 + 200);
  if (v104 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)(a1 + 192) = *v103;
    goto LABEL_11;
  }
  v105 = *(_QWORD *)(a2 + 200);
  if (v105 >> 60 == 15)
  {
    sub_10005B718(a1 + 192);
    goto LABEL_9;
  }
  v106 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)v103;
  *(_QWORD *)(a1 + 200) = v105;
  sub_100038198(v106, v104);
LABEL_11:
  v107 = *(_QWORD *)(a2 + 216);
  v108 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = v107;
  swift_bridgeObjectRelease(v108, (SEL)v104, v97, v98, v99, v100, v101, v102);
  v109 = *(int *)(type metadata accessor for InGameBannerRequiredData(0) + 40);
  v110 = (_QWORD *)(a1 + v109);
  v111 = (_QWORD *)(a2 + v109);
  v112 = (int *)type metadata accessor for Game(0);
  v113 = *((_QWORD *)v112 - 1);
  v114 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v113 + 48);
  v115 = v114(v110, 1, v112);
  v116 = v114(v111, 1, v112);
  if (!v115)
  {
    if (v116)
    {
      sub_10006A704((uint64_t)v110);
      goto LABEL_17;
    }
    v132 = v111[1];
    v133 = (_TtC13GameOverlayUI20GameOverlayUIService *)v110[1];
    *v110 = *v111;
    v110[1] = v132;
    swift_bridgeObjectRelease(v133, v117, v118, v119, v120, v121, v122, v123);
    v134 = v111[3];
    v135 = (_TtC13GameOverlayUI20GameOverlayUIService *)v110[3];
    v110[2] = v111[2];
    v110[3] = v134;
    swift_bridgeObjectRelease(v135, v136, v137, v138, v139, v140, v141, v142);
    v143 = v111[5];
    v144 = (_TtC13GameOverlayUI20GameOverlayUIService *)v110[5];
    v110[4] = v111[4];
    v110[5] = v143;
    swift_bridgeObjectRelease(v144, v145, v146, v147, v148, v149, v150, v151);
    v152 = v112[7];
    v153 = (char *)v110 + v152;
    v154 = (char *)v111 + v152;
    v155 = type metadata accessor for Date(0);
    v156 = *(_QWORD *)(v155 - 8);
    v157 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v156 + 48);
    v158 = v157(v153, 1, v155);
    v159 = v157(v154, 1, v155);
    if (v158)
    {
      if (!v159)
      {
        (*(void (**)(char *, char *, uint64_t))(v156 + 32))(v153, v154, v155);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v156 + 56))(v153, 0, 1, v155);
LABEL_26:
        *(_QWORD *)((char *)v110 + v112[8]) = *(_QWORD *)((char *)v111 + v112[8]);
        *((_BYTE *)v110 + v112[9]) = *((_BYTE *)v111 + v112[9]);
        *((_BYTE *)v110 + v112[10]) = *((_BYTE *)v111 + v112[10]);
        *((_BYTE *)v110 + v112[11]) = *((_BYTE *)v111 + v112[11]);
        *((_BYTE *)v110 + v112[12]) = *((_BYTE *)v111 + v112[12]);
        *((_BYTE *)v110 + v112[13]) = *((_BYTE *)v111 + v112[13]);
        *((_BYTE *)v110 + v112[14]) = *((_BYTE *)v111 + v112[14]);
        v168 = v112[15];
        v169 = (_QWORD *)((char *)v110 + v168);
        v170 = (_QWORD *)((char *)v111 + v168);
        v172 = *v170;
        v171 = v170[1];
        v173 = (_TtC13GameOverlayUI20GameOverlayUIService *)v169[1];
        *v169 = v172;
        v169[1] = v171;
        swift_bridgeObjectRelease(v173, v160, v161, v162, v163, v164, v165, v166);
        return a1;
      }
    }
    else
    {
      if (!v159)
      {
        (*(void (**)(char *, char *, uint64_t))(v156 + 40))(v153, v154, v155);
        goto LABEL_26;
      }
      (*(void (**)(char *, uint64_t))(v156 + 8))(v153, v155);
    }
    v167 = sub_100003304(&qword_10010CC10);
    memcpy(v153, v154, *(_QWORD *)(*(_QWORD *)(v167 - 8) + 64));
    goto LABEL_26;
  }
  if (v116)
  {
LABEL_17:
    v131 = sub_100003304(&qword_10010CA78);
    memcpy(v110, v111, *(_QWORD *)(*(_QWORD *)(v131 - 8) + 64));
    return a1;
  }
  v124 = *((_OWORD *)v111 + 1);
  *(_OWORD *)v110 = *(_OWORD *)v111;
  *((_OWORD *)v110 + 1) = v124;
  *((_OWORD *)v110 + 2) = *((_OWORD *)v111 + 2);
  v125 = v112[7];
  v126 = (char *)v110 + v125;
  v127 = (char *)v111 + v125;
  v128 = type metadata accessor for Date(0);
  v129 = *(_QWORD *)(v128 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v129 + 48))(v127, 1, v128))
  {
    v130 = sub_100003304(&qword_10010CC10);
    memcpy(v126, v127, *(_QWORD *)(*(_QWORD *)(v130 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v129 + 32))(v126, v127, v128);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v129 + 56))(v126, 0, 1, v128);
  }
  *(_QWORD *)((char *)v110 + v112[8]) = *(_QWORD *)((char *)v111 + v112[8]);
  *((_BYTE *)v110 + v112[9]) = *((_BYTE *)v111 + v112[9]);
  *((_BYTE *)v110 + v112[10]) = *((_BYTE *)v111 + v112[10]);
  *((_BYTE *)v110 + v112[11]) = *((_BYTE *)v111 + v112[11]);
  *((_BYTE *)v110 + v112[12]) = *((_BYTE *)v111 + v112[12]);
  *((_BYTE *)v110 + v112[13]) = *((_BYTE *)v111 + v112[13]);
  *((_BYTE *)v110 + v112[14]) = *((_BYTE *)v111 + v112[14]);
  *(_OWORD *)((char *)v110 + v112[15]) = *(_OWORD *)((char *)v111 + v112[15]);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v113 + 56))(v110, 0, 1, v112);
  return a1;
}

uint64_t getEnumTagSinglePayload for InGameBannerPageIntent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10009E994);
}

uint64_t sub_10009E994(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for InGameBannerRequiredData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for InGameBannerPageIntent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10009E9DC);
}

uint64_t sub_10009E9DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for InGameBannerRequiredData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_10009EA1C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for InGameBannerRequiredData(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for InGameBannerPageIntent.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10009EAC4 + 4 * byte_1000CD350[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10009EAE4 + 4 * byte_1000CD355[v4]))();
}

_BYTE *sub_10009EAC4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10009EAE4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10009EAEC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10009EAF4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10009EAFC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10009EB04(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for InGameBannerPageIntent.CodingKeys()
{
  return &type metadata for InGameBannerPageIntent.CodingKeys;
}

unint64_t sub_10009EB24()
{
  unint64_t result;

  result = qword_100110A48;
  if (!qword_100110A48)
  {
    result = swift_getWitnessTable(&unk_1000CD4C8, &type metadata for InGameBannerPageIntent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100110A48);
  }
  return result;
}

unint64_t sub_10009EB6C()
{
  unint64_t result;

  result = qword_100110A50;
  if (!qword_100110A50)
  {
    result = swift_getWitnessTable(&unk_1000CD438, &type metadata for InGameBannerPageIntent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100110A50);
  }
  return result;
}

unint64_t sub_10009EBB4()
{
  unint64_t result;

  result = qword_100110A58;
  if (!qword_100110A58)
  {
    result = swift_getWitnessTable(&unk_1000CD460, &type metadata for InGameBannerPageIntent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100110A58);
  }
  return result;
}

id sub_10009EBF8()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)CNAvatarImageRenderer), "init");
  qword_100110A60 = (uint64_t)result;
  return result;
}

uint64_t sub_10009EC28()
{
  uint64_t v0;
  char v2;
  char v3;

  v0 = type metadata accessor for URLExpression(0);
  sub_100004E4C(v0, qword_100110A68);
  sub_100004E8C(v0, (uint64_t)qword_100110A68);
  v3 = 2;
  v2 = 2;
  return URLExpression.init(schemePattern:hostPattern:pathPattern:queryPattern:)("contact", 7, 2, "", 0, 2, "", 0, v2, "", 0, v3);
}

uint64_t static ContactAvatarProtocol.avatarTemplate(for:)(uint64_t a1, _TtC13GameOverlayUI20GameOverlayUIService *a2)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  _TtC13GameOverlayUI20GameOverlayUIService *v11;
  _TtC13GameOverlayUI20GameOverlayUIService *v12;
  Swift::String v13;
  SEL v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v22;
  unint64_t v23;

  v4 = type metadata accessor for CharacterSet(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = a1;
  v23 = (unint64_t)a2;
  static CharacterSet.urlHostAllowed.getter(v6);
  v9 = sub_10001B308();
  v10 = StringProtocol.addingPercentEncoding(withAllowedCharacters:)(v8, &type metadata for String, v9);
  v12 = v11;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  if (v12)
  {
    a1 = v10;
    a2 = v12;
  }
  else
  {
    swift_bridgeObjectRetain(a2);
  }
  v22 = 0x3A746361746E6F63;
  v23 = 0xEA00000000002F2FLL;
  v13._countAndFlagsBits = a1;
  v13._object = a2;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(a2, v14, v15, v16, v17, v18, v19, v20);
  return v22;
}

uint64_t ContactAvatarProtocol.fetch(contentsOf:)(uint64_t a1)
{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  _BYTE v8[16];
  uint64_t v9;

  v2 = sub_100003304(&qword_100110A90);
  v3 = __chkstk_darwin(v2);
  v5 = &v8[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = a1;
  (*(void (**)(_BYTE *, _QWORD, __n128))(v6 + 104))(v5, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v3);
  return AsyncStream.init(_:bufferingPolicy:_:)(&type metadata for Image, v5, sub_10009F924, v8, &type metadata for Image);
}

void sub_10009EE88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _TtC13GameOverlayUI20GameOverlayUIService *v5;
  id v6;
  SEL v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  double v15;
  double v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  _TtC13GameOverlayUI20GameOverlayUIService *v21;
  id v22;
  Class isa;
  SEL v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  _TtC13GameOverlayUI20GameOverlayUIService *v34;
  _TtC13GameOverlayUI20GameOverlayUIService *v35;

  v0 = sub_100003304(&qword_100110AA8);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v34 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100003304(&qword_100110AB0);
  MediaArtwork.ProtocolRequest.matchResult.getter(&v34);
  v5 = v35;
  v6 = sub_10009F0D0((uint64_t)v34, (unint64_t)v35);
  swift_bridgeObjectRelease(v5, v7, v8, v9, v10, v11, v12, v13);
  if (v6)
  {
    v14 = (void *)objc_opt_self(CNAvatarImageRenderingScope);
    v15 = MediaArtwork.ProtocolRequest.size.getter(v4);
    v17 = objc_msgSend(v14, "scopeWithPointSize:scale:rightToLeft:style:", 0, 0, v15, v16, MediaArtwork.ProtocolRequest.scale.getter(v4));
    if (qword_10010BB88 != -1)
      swift_once(&qword_10010BB88, sub_10009EBF8);
    v18 = (void *)qword_100110A60;
    v19 = sub_100003304(&qword_100110640);
    v20 = swift_allocObject(v19, 40, 7);
    *(_OWORD *)(v20 + 16) = xmmword_1000CCCF0;
    *(_QWORD *)(v20 + 32) = v6;
    v34 = (_TtC13GameOverlayUI20GameOverlayUIService *)v20;
    specialized Array._endMutation()();
    v21 = v34;
    sub_10009F9B4();
    v22 = v6;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v21, v24, v25, v26, v27, v28, v29, v30);
    v31 = objc_msgSend(v18, "avatarImageForContacts:scope:", isa, v17);

    v32 = v31;
    v34 = (_TtC13GameOverlayUI20GameOverlayUIService *)Image.init(uiImage:)();
    v33 = sub_100003304((uint64_t *)&unk_100110AB8);
    AsyncStream.Continuation.yield(_:)(&v34, v33);
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    AsyncStream.Continuation.finish()();

    swift_unknownObjectRelease(v17);
  }
  else
  {
    sub_100003304((uint64_t *)&unk_100110AB8);
    AsyncStream.Continuation.finish()();
  }
}

id sub_10009F0D0(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _TtC13GameOverlayUI20GameOverlayUIService *v6;
  _TtC13GameOverlayUI20GameOverlayUIService *v7;
  id v8;
  NSString v9;
  SEL v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  _TtC13GameOverlayUI20GameOverlayUIService *v18;
  _TtC13GameOverlayUI20GameOverlayUIService *v19;
  id v20;
  NSString v21;
  SEL v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  _TtC13GameOverlayUI20GameOverlayUIService *v30;
  _TtC13GameOverlayUI20GameOverlayUIService *v31;
  id v32;
  NSString v33;
  SEL v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  _TtC13GameOverlayUI20GameOverlayUIService *v42;
  _TtC13GameOverlayUI20GameOverlayUIService *v43;
  id v44;
  NSString v45;
  SEL v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  _TtC13GameOverlayUI20GameOverlayUIService *v54;
  _TtC13GameOverlayUI20GameOverlayUIService *v55;
  id v56;
  NSString v57;
  SEL v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  void *v66;
  NSString v67;
  Class isa;
  SEL v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  os_log_type_t v84;
  uint8_t *v85;
  void *v86;
  uint64_t v88;
  uint64_t v89;
  id v90;

  v4 = sub_100003304(&qword_100110640);
  v5 = swift_allocObject(v4, 80, 7);
  *(_OWORD *)(v5 + 16) = xmmword_1000CD540;
  *(_QWORD *)(v5 + 32) = objc_msgSend((id)objc_opt_self(CNContactFormatter), "descriptorForRequiredKeysForStyle:", 0);
  static String._unconditionallyBridgeFromObjectiveC(_:)(CNContactImageDataKey);
  v7 = v6;
  v8 = objc_allocWithZone((Class)NSString);
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v7, v10, v11, v12, v13, v14, v15, v16);
  v17 = objc_msgSend(v8, "initWithString:", v9);

  *(_QWORD *)(v5 + 40) = v17;
  static String._unconditionallyBridgeFromObjectiveC(_:)(CNContactPhoneNumbersKey);
  v19 = v18;
  v20 = objc_allocWithZone((Class)NSString);
  v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v19, v22, v23, v24, v25, v26, v27, v28);
  v29 = objc_msgSend(v20, "initWithString:", v21);

  *(_QWORD *)(v5 + 48) = v29;
  static String._unconditionallyBridgeFromObjectiveC(_:)(CNContactEmailAddressesKey);
  v31 = v30;
  v32 = objc_allocWithZone((Class)NSString);
  v33 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v31, v34, v35, v36, v37, v38, v39, v40);
  v41 = objc_msgSend(v32, "initWithString:", v33);

  *(_QWORD *)(v5 + 56) = v41;
  static String._unconditionallyBridgeFromObjectiveC(_:)(CNContactThumbnailImageDataKey);
  v43 = v42;
  v44 = objc_allocWithZone((Class)NSString);
  v45 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v43, v46, v47, v48, v49, v50, v51, v52);
  v53 = objc_msgSend(v44, "initWithString:", v45);

  *(_QWORD *)(v5 + 64) = v53;
  static String._unconditionallyBridgeFromObjectiveC(_:)(CNContactImageDataAvailableKey);
  v55 = v54;
  v56 = objc_allocWithZone((Class)NSString);
  v57 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v55, v58, v59, v60, v61, v62, v63, v64);
  v65 = objc_msgSend(v56, "initWithString:", v57);

  *(_QWORD *)(v5 + 72) = v65;
  v90 = (id)v5;
  specialized Array._endMutation()();
  if (qword_10010BB98 != -1)
    swift_once(&qword_10010BB98, sub_10009F660);
  v66 = (void *)qword_100110A80;
  v67 = String._bridgeToObjectiveC()();
  sub_100003304(&qword_100110B30);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease((_TtC13GameOverlayUI20GameOverlayUIService *)v5, v69, v70, v71, v72, v73, v74, v75);
  v90 = 0;
  v76 = objc_msgSend(v66, "unifiedContactWithIdentifier:keysToFetch:error:", v67, isa, &v90);

  v77 = v90;
  if (!v76)
  {
    v78 = v77;
    v79 = _convertNSErrorToError(_:)(v77);

    swift_willThrow(v80);
    if (qword_10010BAA0 != -1)
      swift_once(&qword_10010BAA0, sub_100004DCC);
    v81 = type metadata accessor for Logger(0);
    sub_100004E8C(v81, (uint64_t)qword_1001232D8);
    v82 = swift_bridgeObjectRetain_n(a2, 2);
    v83 = Logger.logObject.getter(v82);
    v84 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v83, v84))
    {
      v85 = (uint8_t *)swift_slowAlloc(12, -1);
      v86 = (void *)swift_slowAlloc(32, -1);
      v90 = v86;
      *(_DWORD *)v85 = 136315138;
      swift_bridgeObjectRetain(a2);
      v88 = sub_100031C58(a1, a2, (uint64_t *)&v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v83, v84, "Failed to fetch contact for identifier: %s", v85, 0xCu);
      swift_arrayDestroy(v86, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v86, -1, -1);
      swift_slowDealloc(v85, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(a2, 2);
    }
    swift_errorRelease(v79);

    return 0;
  }
  return v76;
}

uint64_t sub_10009F590@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = _s13GameOverlayUI21ContactAvatarProtocolV5matchyAC15MatchedResourceVSg10Foundation3URLVF_0(a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_10009F5B4(uint64_t a1)
{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  _BYTE v8[16];
  uint64_t v9;

  v2 = sub_100003304(&qword_100110A90);
  v3 = __chkstk_darwin(v2);
  v5 = &v8[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = a1;
  (*(void (**)(_BYTE *, _QWORD, __n128))(v6 + 104))(v5, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v3);
  return AsyncStream.init(_:bufferingPolicy:_:)(&type metadata for Image, v5, sub_10009FA30, v8, &type metadata for Image);
}

id sub_10009F660()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)CNContactStore), "init");
  qword_100110A80 = (uint64_t)result;
  return result;
}

uint64_t sub_10009F690(uint64_t a1)
{
  uint64_t matched;
  _TtC13GameOverlayUI20GameOverlayUIService *v3;
  _TtC13GameOverlayUI20GameOverlayUIService *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  _TtC13GameOverlayUI20GameOverlayUIService *v13;
  _TtC13GameOverlayUI20GameOverlayUIService *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  SEL v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  const char *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  _TtC13GameOverlayUI20GameOverlayUIService *v36;

  matched = URLExpression.MatchResult.host.getter();
  v4 = v3;
  swift_bridgeObjectRelease(v3, (SEL)v3, v5, v6, v7, v8, v9, v10);
  v11 = ((unint64_t)v4 >> 56) & 0xF;
  if (((unint64_t)v4 & 0x2000000000000000) == 0)
    v11 = matched & 0xFFFFFFFFFFFFLL;
  if (v11)
  {
    v12 = URLExpression.MatchResult.host.getter();
    v14 = v13;
    v36 = v13;
    v15 = sub_10001B308();
    swift_bridgeObjectRetain(v14);
    v16 = StringProtocol.removingPercentEncoding.getter(&type metadata for String, v15);
    v18 = v17;
    v19 = type metadata accessor for URLExpression.MatchResult(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(a1, v19);
    swift_bridgeObjectRelease(v36, v20, v21, v22, v23, v24, v25, v26);
    if (v18)
    {
      swift_bridgeObjectRelease(v14, v27, v28, v29, v30, v31, v32, v33);
      return v16;
    }
  }
  else
  {
    v34 = type metadata accessor for URLExpression.MatchResult(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 8))(a1, v34);
    return 0;
  }
  return v12;
}

uint64_t _s13GameOverlayUI21ContactAvatarProtocolV5matchyAC15MatchedResourceVSg10Foundation3URLVF_0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t matched;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v2 = sub_100003304(&qword_100110B38);
  __chkstk_darwin(v2);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  matched = type metadata accessor for URLExpression.MatchResult(0);
  v6 = *(_QWORD *)(matched - 8);
  __chkstk_darwin(matched);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v15 - v10;
  if (qword_10010BB90 != -1)
    swift_once(&qword_10010BB90, sub_10009EC28);
  v12 = type metadata accessor for URLExpression(0);
  sub_100004E8C(v12, (uint64_t)qword_100110A68);
  URLExpression.match(_:)(a1);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, matched) == 1)
  {
    sub_10009F9F0((uint64_t)v4);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v11, v4, matched);
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v11, matched);
    v13 = sub_10009F690((uint64_t)v8);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, matched);
  }
  return v13;
}

void sub_10009F924()
{
  sub_10009EE88();
}

void *sub_10009F92C()
{
  return &protocol witness table for Image;
}

unint64_t sub_10009F93C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100110A98;
  if (!qword_100110A98)
  {
    v1 = sub_100006E54(&qword_100110AA0);
    result = swift_getWitnessTable(&protocol conformance descriptor for AsyncStream<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100110A98);
  }
  return result;
}

void *sub_10009F988()
{
  return &protocol witness table for URL;
}

ValueMetadata *type metadata accessor for ContactAvatarProtocol()
{
  return &type metadata for ContactAvatarProtocol;
}

ValueMetadata *type metadata accessor for ContactAvatarProtocol.MatchedResource()
{
  return &type metadata for ContactAvatarProtocol.MatchedResource;
}

unint64_t sub_10009F9B4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100110AC8;
  if (!qword_100110AC8)
  {
    v1 = objc_opt_self(CNContact);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100110AC8);
  }
  return result;
}

uint64_t sub_10009F9F0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100003304(&qword_100110B38);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for GameOverlayUIFeatureFlags(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10009FA80 + 4 * byte_1000CD615[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10009FAB4 + 4 * byte_1000CD610[v4]))();
}

uint64_t sub_10009FAB4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009FABC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10009FAC4);
  return result;
}

uint64_t sub_10009FAD0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10009FAD8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10009FADC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009FAE4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GameOverlayUIFeatureFlags()
{
  return &type metadata for GameOverlayUIFeatureFlags;
}

unint64_t sub_10009FB04()
{
  unint64_t result;

  result = qword_100110BA0;
  if (!qword_100110BA0)
  {
    result = swift_getWitnessTable(&unk_1000CD68C, &type metadata for GameOverlayUIFeatureFlags);
    atomic_store(result, (unint64_t *)&qword_100110BA0);
  }
  return result;
}

const char *sub_10009FB48()
{
  unsigned __int8 *v0;

  if (*v0 - 1 >= 2)
    return "gseui";
  else
    return "GameCenter";
}

const char *sub_10009FB7C()
{
  _BYTE *v0;
  const char *v1;

  v1 = "gameoverlayui_with_oldui";
  if (*v0 != 1)
    v1 = "gameoverlayui_with_newui";
  if (*v0)
    return v1;
  else
    return "de7bbd8e";
}

id sub_10009FBC4()
{
  objc_class *v0;
  _QWORD *v1;
  objc_super v3;

  v1 = (_QWORD *)swift_allocObject(v0, 120, 15);
  swift_defaultActor_initialize();
  v1[14] = &_swiftEmptyDictionarySingleton;
  v3.receiver = v1;
  v3.super_class = v0;
  return objc_msgSendSuper2(&v3, "init");
}

id sub_10009FC68()
{
  objc_class *v0;
  _QWORD *v1;
  id result;
  objc_super v3;

  v0 = (objc_class *)type metadata accessor for RemoteAlertHandleObserver();
  v1 = (_QWORD *)swift_allocObject(v0, 120, 15);
  swift_defaultActor_initialize();
  v1[14] = &_swiftEmptyDictionarySingleton;
  v3.receiver = v1;
  v3.super_class = v0;
  result = objc_msgSendSuper2(&v3, "init");
  qword_1001233C0 = (uint64_t)result;
  return result;
}

uint64_t sub_10009FCCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 56) = a4;
  *(_QWORD *)(v5 + 64) = a5;
  return swift_task_switch(sub_10009FCE4, 0, 0);
}

id sub_10009FCE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  __objc2_class **v4;
  NSNumber v5;
  Class isa;
  uint64_t v7;
  uint64_t v8;
  _TtC13GameOverlayUI20GameOverlayUIService *v9;
  _TtC13GameOverlayUI20GameOverlayUIService *v10;
  id v11;
  NSString v12;
  SEL v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  _TtC13GameOverlayUI20GameOverlayUIService *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id result;
  uint64_t v27;
  char v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;

  v1 = *(_QWORD *)(v0 + 56) + 24;
  sub_1000604E8(v1, v0 + 16);
  if (!*(_QWORD *)(v0 + 40))
  {
    sub_1000607F8(v0 + 16);
    goto LABEL_7;
  }
  v2 = sub_100003304((uint64_t *)&unk_100111660);
  if ((swift_dynamicCast(v0 + 48, v0 + 16, (char *)&type metadata for Any + 8, v2, 6) & 1) == 0)
  {
LABEL_7:
    sub_1000604E8(v1, v0 + 16);
    if (!*(_QWORD *)(v0 + 40))
    {
      sub_1000607F8(v0 + 16);
      return (id)(*(uint64_t (**)(void))(v0 + 8))();
    }
    v7 = sub_100003304(&qword_100110C70);
    if ((swift_dynamicCast(v0 + 48, v0 + 16, (char *)&type metadata for Any + 8, v7, 6) & 1) == 0)
      return (id)(*(uint64_t (**)(void))(v0 + 8))();
    v8 = *(_QWORD *)(v0 + 56);
    v3 = *(void **)(v0 + 48);
    static String._unconditionallyBridgeFromObjectiveC(_:)(GKErrorDomain);
    v10 = v9;
    v11 = objc_allocWithZone((Class)NSError);
    v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v10, v13, v14, v15, v16, v17, v18, v19);
    v20 = objc_msgSend(v11, "initWithDomain:code:userInfo:", v12, 2, 0);

    objc_msgSend(v3, "didFinishOnboardingWithError:", v20);
    v21 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v8 + 112);
    swift_bridgeObjectRetain(v21);
    sub_1000B3EFC(6);
    v23 = v22;
    v25 = v24;
    goto LABEL_16;
  }
  v3 = *(void **)(v0 + 48);
  v4 = *(__objc2_class ***)(v0 + 56);
  sub_100025740();
  v5.super.super.isa = NSNumber.init(BOOLeanLiteral:)(0).super.super.isa;
  isa = v5.super.super.isa;
  if (*v4 == _TtC13GameOverlayUI26DashboardConnectionContext)
  {
    v27 = *(_QWORD *)(v0 + 56);
    objc_msgSend(v3, "didDismissDashboard");
    v21 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v27 + 112);
    swift_bridgeObjectRetain(v21);
    v28 = 2;
  }
  else
  {
    if (*v4 != _TtC13GameOverlayUI28AccessPointConnectionContext)
    {

      swift_unknownObjectRelease(v3);
      return (id)(*(uint64_t (**)(void))(v0 + 8))();
    }
    objc_msgSend(v3, "isPresentingDashboardFromAccessPoint:", v5.super.super.isa);
    result = (id)BSValueWithRect(0.0, 0.0, 0.0, 0.0);
    if (!result)
    {
      __break(1u);
      return result;
    }
    v29 = result;
    v30 = *(_QWORD *)(v0 + 56);
    objc_msgSend(v3, "updateAccessPointFrameCoordinates:", result);

    v21 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v30 + 112);
    swift_bridgeObjectRetain(v21);
    v28 = 0;
  }
  sub_1000B3EFC(v28);
  v23 = v31;
  v25 = v32;

LABEL_16:
  swift_unknownObjectRelease(v3);
  swift_bridgeObjectRelease(v21, v33, v34, v35, v36, v37, v38, v39);
  *(_QWORD *)(v0 + 72) = v25;
  *(_QWORD *)(v0 + 80) = v23;
  if (qword_10010BBD0 != -1)
    swift_once(&qword_10010BBD0, sub_1000AD780);
  v40 = qword_1001233D0;
  *(_QWORD *)(v0 + 88) = qword_1001233D0;
  return (id)swift_task_switch(sub_10009FFCC, v40, 0);
}

uint64_t sub_10009FFCC()
{
  uint64_t v0;

  sub_1000AD7C4(*(_QWORD *)(v0 + 80), *(_TtC13GameOverlayUI20GameOverlayUIService **)(v0 + 72), 0);
  return swift_task_switch(sub_1000A0010, 0, 0);
}

uint64_t sub_1000A0010()
{
  uint64_t v0;
  uint64_t v1;

  if (qword_10010BAF0 != -1)
    swift_once(&qword_10010BAF0, sub_100051BCC);
  v1 = qword_1001232F8;
  *(_QWORD *)(v0 + 96) = qword_1001232F8;
  return swift_task_switch(sub_1000A0074, v1, 0);
}

uint64_t sub_1000A0074()
{
  uint64_t v0;

  sub_100052718(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 72), 1);
  return swift_task_switch(sub_1000A00B8, 0, 0);
}

uint64_t sub_1000A00B8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = qword_1001232F8;
  *(_QWORD *)(v0 + 104) = qword_1001232F8;
  return swift_task_switch(sub_1000A00D4, v1, 0);
}

uint64_t sub_1000A00D4()
{
  uint64_t v0;
  _TtC13GameOverlayUI20GameOverlayUIService *v1;
  SEL v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;

  v1 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v0 + 72);
  sub_100050FF4(*(_QWORD *)(v0 + 80), (unint64_t)v1);
  swift_bridgeObjectRelease(v1, v2, v3, v4, v5, v6, v7, v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double sub_1000A0208(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  _QWORD *v13;
  id v14;
  uint64_t v15;
  double result;
  uint64_t v17;

  v2 = v1;
  v4 = sub_100003304(&qword_10010EB20);
  __chkstk_darwin(v4);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10010BAA0 != -1)
    swift_once(&qword_10010BAA0, sub_100004DCC);
  v7 = type metadata accessor for Logger(0);
  v8 = sub_100004E8C(v7, (uint64_t)qword_1001232D8);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "RemoteAlertHandle did deactivate.", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  v12 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v6, 1, 1, v12);
  v13 = (_QWORD *)swift_allocObject(&unk_100101300, 48, 7);
  v13[2] = 0;
  v13[3] = 0;
  v13[4] = v2;
  v13[5] = a1;
  swift_retain(v2);
  v14 = a1;
  v15 = sub_100028240((uint64_t)v6, (uint64_t)&unk_100110C80, (uint64_t)v13);
  *(_QWORD *)&result = swift_release(v15).n128_u64[0];
  return result;
}

uint64_t sub_1000A0388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v7;

  v5[5] = a4;
  v5[6] = a5;
  v7 = sub_100003304(&qword_10010EB20);
  v5[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000A03E8, a4, 0);
}

uint64_t sub_1000A03E8()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  id v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 48);
  swift_beginAccess(*(_QWORD *)(v0 + 40) + 112, v0 + 16, 33, 0);
  v2 = sub_1000AFD78(v1);
  swift_endAccess(v0 + 16);
  if (v2)
  {
    v3 = *(void **)(v2 + 16);
    if (v3)
    {
      v4 = *(_QWORD *)(v0 + 56);
      v5 = type metadata accessor for TaskPriority(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
      v6 = (_QWORD *)swift_allocObject(&unk_100101328, 48, 7);
      v6[2] = 0;
      v6[3] = 0;
      v6[4] = v2;
      v6[5] = v3;
      v7 = v3;
      swift_retain(v2);
      v8 = sub_100028240(v4, (uint64_t)&unk_100110C88, (uint64_t)v6);
      swift_release(v8);
    }
    swift_release(v2);
  }
  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double sub_1000A0514(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  id v19;
  uint64_t v20;
  double result;
  uint64_t v22;
  uint64_t v23;

  v3 = v2;
  v6 = sub_100003304(&qword_10010EB20);
  __chkstk_darwin(v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10010BAA0 != -1)
    swift_once(&qword_10010BAA0, sub_100004DCC);
  v9 = type metadata accessor for Logger(0);
  sub_100004E8C(v9, (uint64_t)qword_1001232D8);
  swift_errorRetain(a2);
  v10 = swift_errorRetain(a2);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v14 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v13 = 138412290;
    if (a2)
    {
      swift_errorRetain(a2);
      v15 = _swift_stdlib_bridgeErrorToNSError(a2);
      v22 = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23);
    }
    else
    {
      v22 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23);
      v15 = 0;
    }
    *v14 = v15;
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "RemoteAlertHandle did invalidate. Error: %@", v13, 0xCu);
    v16 = sub_100003304(&qword_10010EB00);
    swift_arrayDestroy(v14, 1, v16);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    swift_errorRelease(a2);
    swift_errorRelease(a2);
  }

  v17 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v8, 1, 1, v17);
  v18 = (_QWORD *)swift_allocObject(&unk_1001012B0, 48, 7);
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = v3;
  v18[5] = a1;
  swift_retain(v3);
  v19 = a1;
  v20 = sub_100028240((uint64_t)v8, (uint64_t)&unk_100110C48, (uint64_t)v18);
  *(_QWORD *)&result = swift_release(v20).n128_u64[0];
  return result;
}

uint64_t sub_1000A07B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v7;

  v5[5] = a4;
  v5[6] = a5;
  v7 = sub_100003304(&qword_10010EB20);
  v5[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000A0810, a4, 0);
}

uint64_t sub_1000A0810()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  id v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 48);
  swift_beginAccess(*(_QWORD *)(v0 + 40) + 112, v0 + 16, 33, 0);
  v2 = sub_1000AFD78(v1);
  swift_endAccess(v0 + 16);
  if (v2)
  {
    v3 = *(void **)(v2 + 16);
    if (v3)
    {
      v4 = *(_QWORD *)(v0 + 56);
      v5 = type metadata accessor for TaskPriority(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
      v6 = (_QWORD *)swift_allocObject(&unk_1001012D8, 48, 7);
      v6[2] = 0;
      v6[3] = 0;
      v6[4] = v2;
      v6[5] = v3;
      v7 = v3;
      swift_retain(v2);
      v8 = sub_100028240(v4, (uint64_t)&unk_100110C60, (uint64_t)v6);
      swift_release(v8);
    }
    swift_release(v2);
  }
  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000A0964()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 112));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for RemoteAlertHandleObserver()
{
  return objc_opt_self(_TtC13GameOverlayUI25RemoteAlertHandleObserver);
}

uint64_t sub_1000A09AC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_100110C44);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_1000252CC;
  return sub_1000A07B0(a1, v4, v5, v7, v6);
}

uint64_t sub_1000A0A28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc(dword_100110C5C);
  v3 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_1000263E8;
  *(_OWORD *)(v2 + 56) = v3;
  return swift_task_switch(sub_10009FCE4, 0, 0);
}

uint64_t sub_1000A0A8C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_100110C7C);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_1000263E8;
  return sub_1000A0388(a1, v4, v5, v7, v6);
}

uint64_t sub_1000A0B08()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));

  return swift_deallocObject(v0, 48, 7);
}

void Player.hash(into:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  _TtC13GameOverlayUI20GameOverlayUIService *v5;
  SEL v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  _TtC13GameOverlayUI20GameOverlayUIService *v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  _TtC13GameOverlayUI20GameOverlayUIService *v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  _TtC13GameOverlayUI20GameOverlayUIService *v31;
  uint64_t v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  _TtC13GameOverlayUI20GameOverlayUIService *v40;
  uint64_t v41;
  SEL v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v2 = v1;
  v4 = *v1;
  v5 = (_TtC13GameOverlayUI20GameOverlayUIService *)v2[1];
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(a1, v4, v5);
  swift_bridgeObjectRelease(v5, v6, v7, v8, v9, v10, v11, v12);
  v13 = v2[2];
  v14 = (_TtC13GameOverlayUI20GameOverlayUIService *)v2[3];
  swift_bridgeObjectRetain(v14);
  String.hash(into:)(a1, v13, v14);
  swift_bridgeObjectRelease(v14, v15, v16, v17, v18, v19, v20, v21);
  v22 = v2[4];
  v23 = (_TtC13GameOverlayUI20GameOverlayUIService *)v2[5];
  swift_bridgeObjectRetain(v23);
  String.hash(into:)(a1, v22, v23);
  swift_bridgeObjectRelease(v23, v24, v25, v26, v27, v28, v29, v30);
  v31 = (_TtC13GameOverlayUI20GameOverlayUIService *)v2[7];
  if (v31)
  {
    v32 = v2[6];
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v31);
    String.hash(into:)(a1, v32, v31);
    swift_bridgeObjectRelease(v31, v33, v34, v35, v36, v37, v38, v39);
    v40 = (_TtC13GameOverlayUI20GameOverlayUIService *)v2[9];
    if (v40)
    {
LABEL_3:
      v41 = v2[8];
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain(v40);
      String.hash(into:)(a1, v41, v40);
      swift_bridgeObjectRelease(v40, v42, v43, v44, v45, v46, v47, v48);
      goto LABEL_6;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    v40 = (_TtC13GameOverlayUI20GameOverlayUIService *)v2[9];
    if (v40)
      goto LABEL_3;
  }
  Hasher._combine(_:)(0);
LABEL_6:
  Hasher._combine(_:)(v2[10] & 1);
  v49 = v2[12];
  if (v49)
  {
    v50 = v2[11];
    v51 = v2[13];
    v52 = v2[14];
    v53 = v2[15];
    v54 = v2[16];
    v55 = v2[17];
    v56 = v2[18];
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v56);
    swift_bridgeObjectRetain(v49);
    swift_bridgeObjectRetain(v52);
    swift_bridgeObjectRetain(v54);
    Player.FriendRequestInboxEntry.hash(into:)(a1);
    sub_10000FAB4(v50, v49, v51, v52, v53, v54, v55, v56);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

uint64_t sub_1000A0D48(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000A0D7C + 4 * byte_1000CD758[a1]))(0x4449726579616C70, 0xE800000000000000);
}

uint64_t sub_1000A0D7C()
{
  return 0x726174617661;
}

uint64_t sub_1000A0D90()
{
  return 1701667182;
}

uint64_t sub_1000A0DA0()
{
  return 0x4E746361746E6F63;
}

uint64_t sub_1000A0DC0()
{
  return 0x48746361746E6F63;
}

unint64_t sub_1000A0DE4()
{
  return 0xD000000000000012;
}

uint64_t sub_1000A0E00()
{
  return 0x746E45786F626E69;
}

uint64_t sub_1000A0E1C()
{
  unsigned __int8 *v0;

  return sub_1000A0D48(*v0);
}

uint64_t sub_1000A0E24@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000A1D1C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000A0E48(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A1488();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A0E70(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A1488();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Player.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  char v26;
  _BYTE v27[64];
  _BYTE v28[64];

  v3 = v1;
  v5 = sub_100003304(&qword_100110C90);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100003C28(a1, v9);
  v11 = sub_1000A1488();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Player.CodingKeys, &type metadata for Player.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v27[0] = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, v27, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = v3[3];
    v27[0] = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, v27, v5);
    v16 = v3[4];
    v17 = v3[5];
    v27[0] = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, v27, v5);
    v18 = v3[6];
    v19 = v3[7];
    v27[0] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, v27, v5);
    v20 = v3[8];
    v21 = v3[9];
    v27[0] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, v21, v27, v5);
    v22 = *((unsigned __int8 *)v3 + 80);
    v27[0] = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v22, v27, v5);
    sub_1000A14CC((uint64_t)(v3 + 11), (uint64_t)v28);
    sub_1000A14CC((uint64_t)v28, (uint64_t)v27);
    v26 = 6;
    v23 = sub_1000A1514();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v27, &v26, v5, &type metadata for Player.FriendRequestInboxEntry, v23);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int Player.hashValue.getter()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  Player.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

double Player.init(from:)@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v9[9];
  uint64_t v10;

  sub_1000A1558(a1, (uint64_t)v9);
  if (!v2)
  {
    v5 = v9[7];
    *(_OWORD *)(a2 + 96) = v9[6];
    *(_OWORD *)(a2 + 112) = v5;
    *(_OWORD *)(a2 + 128) = v9[8];
    *(_QWORD *)(a2 + 144) = v10;
    v6 = v9[3];
    *(_OWORD *)(a2 + 32) = v9[2];
    *(_OWORD *)(a2 + 48) = v6;
    v7 = v9[5];
    *(_OWORD *)(a2 + 64) = v9[4];
    *(_OWORD *)(a2 + 80) = v7;
    result = *(double *)v9;
    v8 = v9[1];
    *(_OWORD *)a2 = v9[0];
    *(_OWORD *)(a2 + 16) = v8;
  }
  return result;
}

uint64_t sub_1000A1148(_QWORD *a1)
{
  return Player.encode(to:)(a1);
}

BOOL sub_1000A11A0(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[9];
  uint64_t v12;
  _OWORD v13[9];
  uint64_t v14;

  v2 = *(_OWORD *)(a1 + 112);
  v11[6] = *(_OWORD *)(a1 + 96);
  v11[7] = v2;
  v11[8] = *(_OWORD *)(a1 + 128);
  v12 = *(_QWORD *)(a1 + 144);
  v3 = *(_OWORD *)(a1 + 48);
  v11[2] = *(_OWORD *)(a1 + 32);
  v11[3] = v3;
  v4 = *(_OWORD *)(a1 + 80);
  v11[4] = *(_OWORD *)(a1 + 64);
  v11[5] = v4;
  v5 = *(_OWORD *)(a1 + 16);
  v11[0] = *(_OWORD *)a1;
  v11[1] = v5;
  v6 = *(_OWORD *)(a2 + 112);
  v13[6] = *(_OWORD *)(a2 + 96);
  v13[7] = v6;
  v13[8] = *(_OWORD *)(a2 + 128);
  v14 = *(_QWORD *)(a2 + 144);
  v7 = *(_OWORD *)(a2 + 48);
  v13[2] = *(_OWORD *)(a2 + 32);
  v13[3] = v7;
  v8 = *(_OWORD *)(a2 + 80);
  v13[4] = *(_OWORD *)(a2 + 64);
  v13[5] = v8;
  v9 = *(_OWORD *)(a2 + 16);
  v13[0] = *(_OWORD *)a2;
  v13[1] = v9;
  return _s13GameOverlayUI6PlayerV23__derived_struct_equalsySbAC_ACtFZ_0((uint64_t *)v11, (uint64_t)v13);
}

Swift::Int sub_1000A1234(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  Player.hash(into:)((uint64_t)v2);
  return Hasher._finalize()();
}

BOOL _s13GameOverlayUI6PlayerV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  _BOOL8 result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63[8];

  v4 = *a1;
  v5 = a1[1];
  v6 = *(_QWORD *)(a2 + 8);
  v7 = v4 == *(_QWORD *)a2 && v5 == v6;
  if (v7
    || (v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *(_QWORD *)a2, v6, 0), result = 0, (v8 & 1) != 0))
  {
    v10 = a1[2];
    v11 = a1[3];
    v12 = *(_QWORD *)(a2 + 16);
    v13 = *(_QWORD *)(a2 + 24);
    v14 = v10 == v12 && v11 == v13;
    if (v14
      || (v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, v12, v13, 0), result = 0, (v15 & 1) != 0))
    {
      if ((v16 = a1[4], v17 = a1[5], v18 = *(_QWORD *)(a2 + 32), v19 = *(_QWORD *)(a2 + 40), v16 == v18) && v17 == v19
        || (v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, v18, v19, 0), result = 0, (v20 & 1) != 0))
      {
        v21 = a1[7];
        v22 = *(_QWORD *)(a2 + 56);
        if (v21)
        {
          if (!v22)
            return 0;
          v23 = a1[6];
          v24 = *(_QWORD *)(a2 + 48);
          if (v23 != v24 || v21 != v22)
          {
            v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v21, v24, v22, 0);
            result = 0;
            if ((v25 & 1) == 0)
              return result;
          }
        }
        else if (v22)
        {
          return 0;
        }
        v26 = a1[9];
        v27 = *(_QWORD *)(a2 + 72);
        if (v26)
        {
          if (!v27)
            return 0;
          v28 = a1[8];
          v29 = *(_QWORD *)(a2 + 64);
          if (v28 != v29 || v26 != v27)
          {
            v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v26, v29, v27, 0);
            result = 0;
            if ((v30 & 1) == 0)
              return result;
          }
        }
        else if (v27)
        {
          return 0;
        }
        if (((*((unsigned __int8 *)a1 + 80) ^ *(unsigned __int8 *)(a2 + 80)) & 1) != 0)
          return 0;
        v31 = a1[11];
        v32 = a1[12];
        v33 = a1[13];
        v34 = a1[14];
        v35 = a1[15];
        v36 = a1[16];
        v37 = a1[17];
        v38 = a1[18];
        v40 = *(_QWORD *)(a2 + 88);
        v39 = *(_QWORD *)(a2 + 96);
        v42 = *(_QWORD *)(a2 + 104);
        v41 = *(_QWORD *)(a2 + 112);
        v44 = *(_QWORD *)(a2 + 120);
        v43 = *(_QWORD *)(a2 + 128);
        v46 = *(_QWORD *)(a2 + 136);
        v45 = *(_QWORD *)(a2 + 144);
        if (v32)
        {
          if (v39)
          {
            v63[0] = v31;
            v63[1] = v32;
            v63[2] = v33;
            v63[3] = v34;
            v63[4] = v35;
            v63[5] = v36;
            v63[6] = v37;
            v63[7] = v38;
            v47 = v40;
            v48 = v39;
            v49 = v42;
            v50 = v41;
            v51 = v44;
            v52 = v43;
            v53 = v46;
            v54 = v45;
            return (_s13GameOverlayUI6PlayerV23FriendRequestInboxEntryV23__derived_struct_equalsySbAE_AEtFZ_0(v63, &v47) & 1) != 0;
          }
        }
        else if (!v39)
        {
          return 1;
        }
        v47 = v31;
        v48 = v32;
        v49 = v33;
        v50 = v34;
        v51 = v35;
        v52 = v36;
        v53 = v37;
        v54 = v38;
        v55 = v40;
        v56 = v39;
        v57 = v42;
        v58 = v41;
        v59 = v44;
        v60 = v43;
        v61 = v46;
        v62 = v45;
        sub_100012878(v31, v32, v33, v34, v35, v36, v37, v38);
        sub_100012878(v40, v39, v42, v41, v44, v43, v46, v45);
        sub_1000A206C(&v47);
        return 0;
      }
    }
  }
  return result;
}

unint64_t sub_1000A1488()
{
  unint64_t result;

  result = qword_100110C98;
  if (!qword_100110C98)
  {
    result = swift_getWitnessTable(&unk_1000CD938, &type metadata for Player.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100110C98);
  }
  return result;
}

uint64_t sub_1000A14CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003304(&qword_100110CA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000A1514()
{
  unint64_t result;

  result = qword_100110CA8;
  if (!qword_100110CA8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Player.FriendRequestInboxEntry, &type metadata for Player.FriendRequestInboxEntry);
    atomic_store(result, (unint64_t *)&qword_100110CA8);
  }
  return result;
}

void sub_1000A1558(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _TtC13GameOverlayUI20GameOverlayUIService *v14;
  _TtC13GameOverlayUI20GameOverlayUIService *v15;
  uint64_t v16;
  _TtC13GameOverlayUI20GameOverlayUIService *v17;
  _TtC13GameOverlayUI20GameOverlayUIService *v18;
  _TtC13GameOverlayUI20GameOverlayUIService *v19;
  uint64_t v20;
  _TtC13GameOverlayUI20GameOverlayUIService *v21;
  _TtC13GameOverlayUI20GameOverlayUIService *v22;
  uint64_t v23;
  _TtC13GameOverlayUI20GameOverlayUIService *v24;
  _TtC13GameOverlayUI20GameOverlayUIService *v25;
  _TtC13GameOverlayUI20GameOverlayUIService *v26;
  int v27;
  unint64_t v28;
  _TtC13GameOverlayUI20GameOverlayUIService *v29;
  _TtC13GameOverlayUI20GameOverlayUIService *v30;
  _TtC13GameOverlayUI20GameOverlayUIService *v31;
  SEL v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  SEL v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  _TtC13GameOverlayUI20GameOverlayUIService *v46;
  SEL v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  _TtC13GameOverlayUI20GameOverlayUIService *v54;
  SEL v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  _TtC13GameOverlayUI20GameOverlayUIService *v62;
  SEL v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  const char *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _TtC13GameOverlayUI20GameOverlayUIService *v91;
  uint64_t v92;
  _TtC13GameOverlayUI20GameOverlayUIService *v93;
  _TtC13GameOverlayUI20GameOverlayUIService *v94;
  uint64_t v95;
  _TtC13GameOverlayUI20GameOverlayUIService *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  _QWORD v110[10];
  char v111;
  _BYTE v112[7];
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  _DWORD v127[3];
  uint64_t v128;

  v99 = a2;
  v128 = sub_100003304(&qword_100110CD0);
  v4 = *(_QWORD *)(v128 - 8);
  __chkstk_darwin(v128);
  v6 = (char *)&v81 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_100003C28(a1, v7);
  v9 = sub_1000A1488();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Player.CodingKeys, &type metadata for Player.CodingKeys, v9, v7, v8);
  if (v2)
  {
    sub_100004624(a1);
  }
  else
  {
    v97 = v4;
    v98 = a1;
    v10 = v99;
    LOBYTE(v110[0]) = 0;
    v11 = v128;
    v12 = v6;
    v13 = KeyedDecodingContainer.decode(_:forKey:)(v110, v128);
    v15 = v14;
    LOBYTE(v110[0]) = 1;
    swift_bridgeObjectRetain(v14);
    v16 = KeyedDecodingContainer.decode(_:forKey:)(v110, v11);
    v18 = v17;
    v95 = v16;
    v96 = v15;
    LOBYTE(v110[0]) = 2;
    swift_bridgeObjectRetain(v17);
    v19 = v18;
    v20 = KeyedDecodingContainer.decode(_:forKey:)(v110, v11);
    v94 = v19;
    LOBYTE(v110[0]) = 3;
    v22 = v21;
    swift_bridgeObjectRetain(v21);
    v23 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v110, v11);
    v93 = v24;
    v90 = v23;
    LOBYTE(v110[0]) = 4;
    swift_bridgeObjectRetain(v24);
    v92 = 0;
    v89 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v110, v11);
    LOBYTE(v110[0]) = 5;
    v26 = v25;
    swift_bridgeObjectRetain(v25);
    v27 = KeyedDecodingContainer.decode(_:forKey:)(v110, v11);
    v91 = v26;
    LODWORD(v88) = v27;
    v121 = 6;
    v28 = sub_1000A2028();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Player.FriendRequestInboxEntry, &v121, v11, &type metadata for Player.FriendRequestInboxEntry, v28);
    LOBYTE(v26) = v88 & 1;
    v82 = v88 & 1;
    (*(void (**)(char *, uint64_t))(v97 + 8))(v12, v11);
    v128 = v122;
    v92 = *((_QWORD *)&v123 + 1);
    v97 = v123;
    v87 = *((_QWORD *)&v124 + 1);
    v88 = v124;
    v85 = *((_QWORD *)&v125 + 1);
    v86 = v125;
    v83 = v20;
    v84 = v126;
    *(_QWORD *)&v100 = v13;
    *((_QWORD *)&v100 + 1) = v96;
    v29 = v96;
    v30 = v94;
    *(_QWORD *)&v101 = v95;
    *((_QWORD *)&v101 + 1) = v94;
    *(_QWORD *)&v102 = v20;
    *((_QWORD *)&v102 + 1) = v22;
    *(_QWORD *)&v103 = v90;
    *((_QWORD *)&v103 + 1) = v93;
    *(_QWORD *)&v104 = v89;
    *((_QWORD *)&v104 + 1) = v91;
    LOBYTE(v105) = (_BYTE)v26;
    *((_QWORD *)&v105 + 1) = v122;
    v106 = v123;
    v107 = v124;
    v108 = v125;
    v109 = v126;
    sub_100019FF0(&v100);
    v31 = v29;
    swift_bridgeObjectRelease(v29, v32, v33, v34, v35, v36, v37, v38);
    swift_bridgeObjectRelease(v30, v39, v40, v41, v42, v43, v44, v45);
    v46 = v22;
    swift_bridgeObjectRelease(v22, v47, v48, v49, v50, v51, v52, v53);
    v54 = v93;
    swift_bridgeObjectRelease(v93, v55, v56, v57, v58, v59, v60, v61);
    v62 = v91;
    swift_bridgeObjectRelease(v91, v63, v64, v65, v66, v67, v68, v69);
    sub_100004624(v98);
    v110[0] = v13;
    v110[1] = v31;
    v110[2] = v95;
    v110[3] = v30;
    v110[4] = v83;
    v110[5] = v46;
    v110[6] = v90;
    v110[7] = v54;
    v110[8] = v89;
    v110[9] = v62;
    v111 = v82;
    *(_DWORD *)v112 = v127[0];
    *(_DWORD *)&v112[3] = *(_DWORD *)((char *)v127 + 3);
    v113 = v128;
    v114 = v97;
    v115 = v92;
    v116 = v88;
    v117 = v87;
    v118 = v86;
    v119 = v85;
    v120 = v84;
    sub_10006F0A8((uint64_t)v110, v70, v71, v72, v73, v74, v75, v76);
    v77 = v107;
    *(_OWORD *)(v10 + 96) = v106;
    *(_OWORD *)(v10 + 112) = v77;
    *(_OWORD *)(v10 + 128) = v108;
    *(_QWORD *)(v10 + 144) = v109;
    v78 = v103;
    *(_OWORD *)(v10 + 32) = v102;
    *(_OWORD *)(v10 + 48) = v78;
    v79 = v105;
    *(_OWORD *)(v10 + 64) = v104;
    *(_OWORD *)(v10 + 80) = v79;
    v80 = v101;
    *(_OWORD *)v10 = v100;
    *(_OWORD *)(v10 + 16) = v80;
  }
}

unint64_t sub_1000A1B24()
{
  unint64_t result;

  result = qword_100110CB0;
  if (!qword_100110CB0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Player, &type metadata for Player);
    atomic_store(result, (unint64_t *)&qword_100110CB0);
  }
  return result;
}

ValueMetadata *type metadata accessor for Player()
{
  return &type metadata for Player;
}

uint64_t storeEnumTagSinglePayload for Player.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1000A1BC4 + 4 * byte_1000CD764[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1000A1BF8 + 4 * byte_1000CD75F[v4]))();
}

uint64_t sub_1000A1BF8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A1C00(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000A1C08);
  return result;
}

uint64_t sub_1000A1C14(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000A1C1CLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1000A1C20(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A1C28(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Player.CodingKeys()
{
  return &type metadata for Player.CodingKeys;
}

unint64_t sub_1000A1C48()
{
  unint64_t result;

  result = qword_100110CB8;
  if (!qword_100110CB8)
  {
    result = swift_getWitnessTable(&unk_1000CD910, &type metadata for Player.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100110CB8);
  }
  return result;
}

unint64_t sub_1000A1C90()
{
  unint64_t result;

  result = qword_100110CC0;
  if (!qword_100110CC0)
  {
    result = swift_getWitnessTable(&unk_1000CD880, &type metadata for Player.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100110CC0);
  }
  return result;
}

unint64_t sub_1000A1CD8()
{
  unint64_t result;

  result = qword_100110CC8;
  if (!qword_100110CC8)
  {
    result = swift_getWitnessTable(&unk_1000CD8A8, &type metadata for Player.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100110CC8);
  }
  return result;
}

uint64_t sub_1000A1D1C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;

  if (a1 == 0x4449726579616C70 && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4449726579616C70, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x726174617661 && a2 == 0xE600000000000000)
  {
    v7 = 0xE600000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726174617661, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 1701667182 && a2 == 0xE400000000000000)
  {
    v8 = 0xE400000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701667182, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x4E746361746E6F63 && a2 == 0xEB00000000656D61)
  {
    v9 = 0xEB00000000656D61;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4E746361746E6F63, 0xEB00000000656D61, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x48746361746E6F63 && a2 == 0xED0000656C646E61)
  {
    v10 = 0xED0000656C646E61;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x48746361746E6F63, 0xED0000656C646E61, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0xD000000000000012)
  {
    v11 = 0x80000001000D11D0;
    if (a2 == 0x80000001000D11D0)
      goto LABEL_37;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x80000001000D11D0, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if (a1 == 0x746E45786F626E69 && a2 == 0xEA00000000007972)
  {
    swift_bridgeObjectRelease(0xEA00000000007972);
    return 6;
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746E45786F626E69, 0xEA00000000007972, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v12 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

unint64_t sub_1000A2028()
{
  unint64_t result;

  result = qword_100110CD8;
  if (!qword_100110CD8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Player.FriendRequestInboxEntry, &type metadata for Player.FriendRequestInboxEntry);
    atomic_store(result, (unint64_t *)&qword_100110CD8);
  }
  return result;
}

uint64_t *sub_1000A206C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1[8];
  v3 = a1[9];
  v4 = a1[10];
  v5 = a1[11];
  v6 = a1[12];
  v7 = a1[13];
  v8 = a1[14];
  v9 = a1[15];
  sub_10000FAB4(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7]);
  sub_10000FAB4(v2, v3, v4, v5, v6, v7, v8, v9);
  return a1;
}

unint64_t sub_1000A20F8()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  unint64_t result;
  uint64_t v12;

  v0 = sub_100003304(&qword_10010E708);
  inited = swift_initStackObject(v0, &v12);
  *(_OWORD *)(inited + 16) = xmmword_1000CD990;
  *(_QWORD *)(inited + 32) = 0x7463417974706D65;
  *(_QWORD *)(inited + 40) = 0xEB000000006E6F69;
  *(_QWORD *)(inited + 48) = type metadata accessor for EmptyAction(0);
  *(_QWORD *)(inited + 56) = &protocol witness table for EmptyAction;
  *(_QWORD *)(inited + 64) = 0x69746341776F6C66;
  *(_QWORD *)(inited + 72) = 0xEA00000000006E6FLL;
  v2 = type metadata accessor for FlowAction(0);
  v3 = sub_1000035B4(&qword_1001108A8, type metadata accessor for FlowAction, (uint64_t)&protocol conformance descriptor for FlowAction);
  *(_QWORD *)(inited + 80) = v2;
  *(_QWORD *)(inited + 88) = v3;
  strcpy((char *)(inited + 96), "flowBackAction");
  *(_BYTE *)(inited + 111) = -18;
  *(_QWORD *)(inited + 112) = type metadata accessor for Models.FlowBackAction(0);
  *(_QWORD *)(inited + 120) = &protocol witness table for Models.FlowBackAction;
  strcpy((char *)(inited + 128), "compoundAction");
  *(_BYTE *)(inited + 143) = -18;
  *(_QWORD *)(inited + 144) = type metadata accessor for CompoundAction(0);
  *(_QWORD *)(inited + 152) = &protocol witness table for CompoundAction;
  result = sub_10008FE44((_TtC13GameOverlayUI20GameOverlayUIService *)inited, v4, v5, v6, v7, v8, v9, v10);
  qword_100110CE0 = result;
  return result;
}

uint64_t sub_1000A2228()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v0 = sub_100003304(&qword_100110D28);
  v1 = swift_allocObject(v0, 48, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1000C9D90;
  v2 = type metadata accessor for LaunchDashboardAction(0);
  result = sub_1000035B4(&qword_10010CA88, type metadata accessor for LaunchDashboardAction, (uint64_t)&protocol conformance descriptor for LaunchDashboardAction);
  *(_QWORD *)(v1 + 32) = v2;
  *(_QWORD *)(v1 + 40) = result;
  off_100110CE8 = (_UNKNOWN *)v1;
  return result;
}

uint64_t sub_1000A229C()
{
  uint64_t v0;
  uint64_t v1;
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _TtC13GameOverlayUI20GameOverlayUIService *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  unint64_t v14;
  unint64_t isa;
  _TtC13GameOverlayUI20GameOverlayUIService *v16;
  Class v17;
  objc_class *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  SEL v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  uint64_t result;
  _TtC13GameOverlayUI20GameOverlayUIService v33;
  _TtC13GameOverlayUI20GameOverlayUIService v34;

  if (qword_10010BBA8 != -1)
    swift_once(&qword_10010BBA8, sub_1000A20F8);
  v0 = qword_100110CE0;
  v1 = qword_10010BBB0;
  swift_bridgeObjectRetain(qword_100110CE0);
  if (v1 != -1)
    swift_once(&qword_10010BBB0, sub_1000A2228);
  v2 = off_100110CE8;
  v3 = *((_QWORD *)off_100110CE8 + 2);
  if (v3)
  {
    swift_bridgeObjectRetain_n(off_100110CE8, 2);
    v4 = 0;
    v5 = &_swiftEmptyArrayStorage;
    do
    {
      v33 = (_TtC13GameOverlayUI20GameOverlayUIService)v2[v4 + 2];
      v34 = v33;
      v6 = sub_100003304(&qword_100110D20);
      v7 = String.init<A>(describing:)(&v34, v6);
      v9 = v8;
      if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
        v5 = sub_100054864(0, (int64_t)v5[1].super.isa + 1, 1, v5, v10, v11, v12, v13);
      isa = (unint64_t)v5[1].super.isa;
      v14 = *(_QWORD *)v5[1].listener;
      if (isa >= v14 >> 1)
        v5 = sub_100054864((_TtC13GameOverlayUI20GameOverlayUIService *)(v14 > 1), isa + 1, 1, v5, v10, v11, v12, v13);
      ++v4;
      v5[1].super.isa = (Class)(isa + 1);
      v16 = &v5[2 * isa];
      v16[2].super.isa = (Class)v7;
      *(_QWORD *)v16[2].listener = v9;
      v16[3] = v33;
    }
    while (v3 != v4);
    swift_bridgeObjectRelease_n(v2, 2);
    v17 = v5[1].super.isa;
    if (v17)
      goto LABEL_13;
LABEL_15:
    v18 = (objc_class *)&_swiftEmptyDictionarySingleton;
    goto LABEL_16;
  }
  v5 = &_swiftEmptyArrayStorage;
  v17 = (Class)*((_QWORD *)&_swiftEmptyArrayStorage + 2);
  if (!v17)
    goto LABEL_15;
LABEL_13:
  sub_100003304((uint64_t *)&unk_100110420);
  v18 = (objc_class *)static _DictionaryStorage.allocate(capacity:)(v17);
LABEL_16:
  v34.super.isa = v18;
  v19 = swift_bridgeObjectRetain(v5);
  sub_1000A320C(v19, (const char *)1, &v34, v20, v21, v22, v23, v24);
  swift_bridgeObjectRelease(v5, v25, v26, v27, v28, v29, v30, v31);
  result = sub_1000A359C((uint64_t)v34.super.isa, v0, (uint64_t)sub_1000A3940, (void (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *))sub_1000A2F14);
  static ActionKinds.table = result;
  return result;
}

uint64_t *ActionKinds.table.unsafeMutableAddressor()
{
  if (qword_10010BBB8 != -1)
    swift_once(&qword_10010BBB8, sub_1000A229C);
  return &static ActionKinds.table;
}

uint64_t static ActionKinds.table.getter()
{
  if (qword_10010BBB8 != -1)
    swift_once(&qword_10010BBB8, sub_1000A229C);
  return swift_bridgeObjectRetain(static ActionKinds.table);
}

unint64_t sub_1000A2554()
{
  unint64_t result;

  result = qword_100110CF0;
  if (!qword_100110CF0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ActionKinds, &type metadata for ActionKinds);
    atomic_store(result, (unint64_t *)&qword_100110CF0);
  }
  return result;
}

uint64_t sub_1000A2598()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _TtC13GameOverlayUI20GameOverlayUIService *v3;
  uint64_t v4;
  uint64_t v5;
  SEL v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;

  if (qword_10010BBB8 != -1)
    swift_once(&qword_10010BBB8, sub_1000A229C);
  v0 = static ActionKinds.table;
  v1 = swift_bridgeObjectRetain(static ActionKinds.table);
  v2 = _defaultActionKindLookup.getter(v1);
  v3 = (_TtC13GameOverlayUI20GameOverlayUIService *)sub_1000A359C(v2, v0, (uint64_t)sub_1000A3940, (void (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *))sub_1000A3944);
  sub_1000A3624((uint64_t)v3);
  v5 = v4;
  swift_bridgeObjectRelease(v3, v6, v7, v8, v9, v10, v11, v12);
  return v5;
}

_QWORD *sub_1000A2630@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1000A2654(a1, a2, a3);
}

ValueMetadata *type metadata accessor for ActionKinds()
{
  return &type metadata for ActionKinds;
}

_QWORD *sub_1000A2654@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  void (*v44)(char *, char *);
  uint64_t v45;
  char *v46;
  _TtC13GameOverlayUI20GameOverlayUIService *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _TtC13GameOverlayUI20GameOverlayUIService *v54;
  SEL v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  char *v65;
  char *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(char *, uint64_t);
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  SEL v107;
  id v108;
  id v109;
  id v110;
  id v111;
  id v112;
  id v113;
  Swift::String v114;
  _TtC13GameOverlayUI20GameOverlayUIService *object;
  SEL v116;
  id v117;
  id v118;
  id v119;
  id v120;
  id v121;
  id v122;
  Swift::String v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  __int128 v148;
  uint64_t v149;
  _QWORD v150[5];
  uint64_t v151;
  _TtC13GameOverlayUI20GameOverlayUIService *v152;
  __int128 v153;
  uint64_t v154;
  uint64_t v155;

  *(_QWORD *)&v148 = a2;
  v139 = a3;
  v4 = type metadata accessor for JSONObject(0);
  v5 = __chkstk_darwin(v4);
  v138 = (char *)&v132 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = type metadata accessor for AnyActionTypes(0, v5);
  v137 = *(_QWORD *)(v143 - 8);
  __chkstk_darwin(v143);
  v135 = (char *)&v132 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003304(&qword_100110CF8);
  __chkstk_darwin(v8);
  v142 = (char *)&v132 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = sub_100003304(&qword_100110D00);
  v10 = *(_QWORD *)(v140 - 8);
  __chkstk_darwin(v140);
  v12 = (char *)&v132 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v132 - v14;
  v16 = sub_100003304(&qword_100110D08);
  v144 = *(_QWORD *)(v16 - 8);
  v145 = (char *)v16;
  __chkstk_darwin(v16);
  v136 = (char *)&v132 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v132 - v20;
  v149 = type metadata accessor for JSONContext(0, v19);
  v155 = *(_QWORD *)(v149 - 8);
  __chkstk_darwin(v149);
  v23 = (char *)&v132 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v26 = (char *)&v132 - v25;
  __chkstk_darwin(v27);
  v146 = (char *)&v132 - v28;
  __chkstk_darwin(v29);
  v31 = (char *)&v132 - v30;
  v32 = a1;
  v33 = sub_1000745E8(a1, a1, (uint64_t)&protocol descriptor for ActionModel, (uint64_t)&protocol descriptor for Decodable);
  if (v33)
  {
    v36 = v33;
    v142 = v34;
    v143 = v35;
    v37 = (_QWORD *)v148;
    v38 = *(_QWORD *)(v148 + 24);
    v39 = *(_QWORD *)(v148 + 32);
    sub_100003C28((_QWORD *)v148, v38);
    v40 = dispatch thunk of Decoder.userInfo.getter(v38, v39);
    v41 = JSONContext.init(userInfo:)(v40);
    static JSONContext.Property<A>.actionKindTable.getter(v41);
    v42 = sub_100003304(&qword_100110D18);
    JSONContext.subscript.getter(v21, v42);
    v43 = v145;
    v44 = *(void (**)(char *, char *))(v144 + 8);
    v44(v21, v145);
    v45 = v149;
    v46 = v146;
    if (!v151)
    {
      v47 = (_TtC13GameOverlayUI20GameOverlayUIService *)sub_1000A2ED0();
      v151 = v141;
      v152 = v47;
      v48 = v136;
      static JSONContext.Property<A>.actionKindTable.getter(v47);
      JSONContext.addingValue<A>(_:forProperty:)(&v151, v48, v42);
      v49 = v48;
      v45 = v149;
      v44(v49, v43);
      v50 = v155;
      (*(void (**)(char *, uint64_t))(v155 + 8))(v31, v45);
      (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v31, v46, v45);
    }
    v51 = v37[3];
    v52 = v37[4];
    sub_100003C28(v37, v51);
    v53 = v155;
    (*(void (**)(char *, char *, uint64_t))(v155 + 16))(v46, v31, v45);
    v54 = (_TtC13GameOverlayUI20GameOverlayUIService *)Dictionary<>.init(jsonContext:)(v46);
    Decoder.withUserInfo(_:)(v150, v54, v51, v52);
    swift_bridgeObjectRelease(v54, v55, v56, v57, v58, v59, v60, v61);
    v62 = v143;
    *(_QWORD *)&v153 = v36;
    *((_QWORD *)&v153 + 1) = v142;
    v154 = v143;
    sub_1000052B0(&v151);
    v63 = v147;
    dispatch thunk of Decodable.init(from:)(v150, v36, v62);
    if (v63)
    {
      (*(void (**)(char *, uint64_t))(v53 + 8))(v31, v45);
      return sub_100074694(&v151);
    }
    v148 = v153;
    v97 = v153;
    v98 = sub_100003C28(&v151, v153);
    v99 = (_QWORD *)v139;
    *(_OWORD *)(v139 + 24) = v148;
    v100 = sub_1000052B0(v99);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v97 - 8) + 16))(v100, v98, v97);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v31, v45);
    return (_QWORD *)sub_100004624(&v151);
  }
  v65 = v15;
  v144 = v10;
  v66 = v142;
  v136 = v12;
  v134 = v23;
  v67 = v143;
  v145 = v26;
  v68 = (_QWORD *)v148;
  v69 = sub_1000745E8(v32, v32, (uint64_t)&protocol descriptor for ActionModel, (uint64_t)&protocol descriptor for ExpressibleByJSON);
  if (v69)
  {
    v72 = v69;
    v132 = v70;
    v133 = v71;
    v73 = v68[3];
    v74 = v68[4];
    sub_100003C28(v68, v73);
    v75 = dispatch thunk of Decoder.userInfo.getter(v73, v74);
    v76 = JSONContext.init(userInfo:)(v75);
    static JSONContext.Property<A>.actionTypes.getter(v76);
    v77 = (uint64_t)v66;
    JSONContext.subscript.getter(v15, v67);
    v78 = v67;
    v79 = *(void (**)(char *, uint64_t))(v144 + 8);
    v79(v65, v140);
    v80 = v137;
    v81 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v137 + 48))(v77, 1, v67);
    sub_1000A2E90(v77);
    v82 = v149;
    v83 = v155;
    if (v81 == 1)
    {
      v84 = sub_1000A2ED0();
      v85 = v135;
      v86 = AnyActionTypes.init(_:)(v141, v84);
      v87 = v136;
      static JSONContext.Property<A>.actionTypes.getter(v86);
      v88 = v146;
      v89 = v78;
      v144 = v72;
      v90 = v82;
      v91 = v78;
      v92 = v145;
      JSONContext.addingValue<A>(_:forProperty:)(v85, v87, v89);
      v93 = v87;
      v83 = v155;
      v79(v93, v140);
      v94 = v91;
      v82 = v90;
      v72 = v144;
      (*(void (**)(char *, uint64_t))(v80 + 8))(v85, v94);
      (*(void (**)(char *, uint64_t))(v83 + 8))(v92, v82);
      (*(void (**)(char *, char *, uint64_t))(v83 + 32))(v92, v88, v82);
    }
    sub_100024C64((uint64_t)v68, (uint64_t)v150);
    v95 = v138;
    v96 = v147;
    JSONObject.init(from:)(v150);
    if (v96)
      return (_QWORD *)(*(uint64_t (**)(char *, uint64_t))(v83 + 8))(v145, v82);
    v125 = v134;
    v126 = v145;
    (*(void (**)(char *, char *, uint64_t))(v83 + 16))(v134, v145, v82);
    *(_QWORD *)&v153 = v72;
    *((_QWORD *)&v153 + 1) = v132;
    v127 = v133;
    v154 = v133;
    sub_1000052B0(&v151);
    dispatch thunk of ExpressibleByJSON.init(deserializing:using:)(v95, v125, v72, v127);
    v148 = v153;
    v128 = v153;
    v129 = sub_100003C28(&v151, v153);
    v130 = (_QWORD *)v139;
    *(_OWORD *)(v139 + 24) = v148;
    v131 = sub_1000052B0(v130);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v128 - 8) + 16))(v131, v129, v128);
    (*(void (**)(char *, uint64_t))(v83 + 8))(v126, v82);
    return (_QWORD *)sub_100004624(&v151);
  }
  v101 = type metadata accessor for DecodingError(0);
  swift_allocError(v101, &protocol witness table for DecodingError, 0, 0);
  v103 = v102;
  sub_100003304(&qword_10010BFA0);
  *v103 = v32;
  v104 = v68[3];
  v105 = v68[4];
  sub_100003C28(v68, v104);
  v106 = dispatch thunk of Decoder.codingPath.getter(v104, v105);
  v151 = 0;
  v152 = (_TtC13GameOverlayUI20GameOverlayUIService *)0xE000000000000000;
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease(v152, v107, v108, v109, v110, v111, v112, v113);
  v151 = 60;
  v152 = (_TtC13GameOverlayUI20GameOverlayUIService *)0xE100000000000000;
  v114._countAndFlagsBits = _typeName(_:qualified:)(v32, 0);
  object = (_TtC13GameOverlayUI20GameOverlayUIService *)v114._object;
  String.append(_:)(v114);
  swift_bridgeObjectRelease(object, v116, v117, v118, v119, v120, v121, v122);
  v123._object = (void *)0x80000001000D09C0;
  v123._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v123);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v106, v151, v152, 0);
  v124 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v101 - 8) + 104))(v103, enum case for DecodingError.typeMismatch(_:), v101);
  return (_QWORD *)swift_willThrow(v124);
}

uint64_t sub_1000A2E90(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100003304(&qword_100110CF8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000A2ED0()
{
  unint64_t result;

  result = qword_100110D10;
  if (!qword_100110D10)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ActionKinds, &type metadata for ActionKinds);
    atomic_store(result, (unint64_t *)&qword_100110D10);
  }
  return result;
}

void sub_1000A2F14(_TtC13GameOverlayUI20GameOverlayUIService *a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _TtC13GameOverlayUI20GameOverlayUIService *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  const char *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t *v32;
  _QWORD *v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  _TtC13GameOverlayUI20GameOverlayUIService *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _TtC13GameOverlayUI20GameOverlayUIService *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _TtC13GameOverlayUI20GameOverlayUIService *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  const char *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  unint64_t v57;
  uint64_t v58;
  _BOOL8 v59;
  uint64_t v60;
  char v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  SEL v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;

  swift_bridgeObjectRetain(a1);
  swift_retain(a3);
  v8 = sub_1000A4308();
  if (!v9)
    goto LABEL_24;
  v12 = v8;
  v13 = (_TtC13GameOverlayUI20GameOverlayUIService *)v9;
  v14 = v10;
  v15 = v11;
  v16 = (_QWORD *)*a5;
  v24 = sub_1000AAE54(v8, v9);
  v25 = v16[2];
  v26 = (v17 & 1) == 0;
  v27 = v25 + v26;
  if (__OFADD__(v25, v26))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v28 = (char)v17;
  if (v16[3] >= v27)
  {
    if ((a4 & 1) != 0)
    {
      v30 = (_QWORD *)*a5;
      if ((v17 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_1000AF528();
      v30 = (_QWORD *)*a5;
      if ((v28 & 1) != 0)
        goto LABEL_9;
    }
LABEL_11:
    v30[(v24 >> 6) + 8] |= 1 << v24;
    v32 = (uint64_t *)(v30[6] + 16 * v24);
    *v32 = v12;
    v32[1] = (uint64_t)v13;
    v33 = (_QWORD *)(v30[7] + 16 * v24);
    *v33 = v14;
    v33[1] = v15;
    v34 = v30[2];
    v35 = __OFADD__(v34, 1);
    v36 = v34 + 1;
    if (v35)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v30[2] = v36;
LABEL_13:
    v37 = sub_1000A4308();
    if (v38)
    {
      v41 = v37;
      v42 = v38;
      v43 = v39;
      v44 = v40;
      do
      {
        v49 = (_QWORD *)*a5;
        v57 = sub_1000AAE54(v41, (uint64_t)v42);
        v58 = v49[2];
        v59 = (v50 & 1) == 0;
        v60 = v58 + v59;
        if (__OFADD__(v58, v59))
          goto LABEL_25;
        v61 = (char)v50;
        if (v49[3] < v60)
        {
          sub_1000AEAFC(v60, 1);
          v62 = sub_1000AAE54(v41, (uint64_t)v42);
          if ((v61 & 1) != (v50 & 1))
            goto LABEL_27;
          v57 = v62;
        }
        v63 = (_QWORD *)*a5;
        if ((v61 & 1) != 0)
        {
          swift_bridgeObjectRelease(v42, v50, v51, v52, v53, v54, v55, v56);
          v45 = (_QWORD *)(v63[7] + 16 * v57);
          *v45 = v43;
          v45[1] = v44;
        }
        else
        {
          v63[(v57 >> 6) + 8] |= 1 << v57;
          v64 = (uint64_t *)(v63[6] + 16 * v57);
          *v64 = v41;
          v64[1] = (uint64_t)v42;
          v65 = (_QWORD *)(v63[7] + 16 * v57);
          *v65 = v43;
          v65[1] = v44;
          v66 = v63[2];
          v35 = __OFADD__(v66, 1);
          v67 = v66 + 1;
          if (v35)
            goto LABEL_26;
          v63[2] = v67;
        }
        v41 = sub_1000A4308();
        v42 = v46;
        v43 = v47;
        v44 = v48;
      }
      while (v46);
    }
LABEL_24:
    swift_release(a3);
    swift_bridgeObjectRelease(a1, v68, v69, v70, v71, v72, v73, v74);
    sub_100074DB8((uint64_t)a1);
    swift_release(a3);
    return;
  }
  sub_1000AEAFC(v27, a4 & 1);
  v29 = sub_1000AAE54(v12, (uint64_t)v13);
  if ((v28 & 1) == (v17 & 1))
  {
    v24 = v29;
    v30 = (_QWORD *)*a5;
    if ((v28 & 1) == 0)
      goto LABEL_11;
LABEL_9:
    swift_bridgeObjectRelease(v13, v17, v18, v19, v20, v21, v22, v23);
    v31 = (_QWORD *)(v30[7] + 16 * v24);
    *v31 = v14;
    v31[1] = v15;
    goto LABEL_13;
  }
LABEL_27:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_1000A320C(uint64_t a1, const char *a2, _QWORD *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t v9;
  char v11;
  _TtC13GameOverlayUI20GameOverlayUIService *v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  _BOOL8 v44;
  uint64_t v45;
  char v46;
  char v47;
  _QWORD *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  Swift::String v52;
  Swift::String v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _TtC13GameOverlayUI20GameOverlayUIService *v59;
  uint64_t v60;

  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
    swift_bridgeObjectRelease((_TtC13GameOverlayUI20GameOverlayUIService *)a1, a2, a3, a4, a5, a6, a7, a8);
    return;
  }
  v11 = (char)a2;
  v13 = *(_QWORD *)(a1 + 32);
  v12 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 40);
  v54 = *(_OWORD *)(a1 + 48);
  swift_bridgeObjectRetain(a1);
  v58 = v13;
  v59 = v12;
  v14 = (_QWORD *)*a3;
  swift_bridgeObjectRetain(v12);
  v16 = sub_1000AAE54(v13, (uint64_t)v12);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
    goto LABEL_23;
  v20 = v15;
  if (v14[3] >= v19)
  {
    if ((v11 & 1) != 0)
    {
      if ((v15 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_1000AF528();
      if ((v20 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v32 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v16 >> 6) + 64) |= 1 << v16;
    v33 = (uint64_t *)(v32[6] + 16 * v16);
    *v33 = v13;
    v33[1] = (uint64_t)v12;
    *(_OWORD *)(v32[7] + 16 * v16) = v54;
    v34 = v32[2];
    v35 = __OFADD__(v34, 1);
    v36 = v34 + 1;
    if (v35)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v32[2] = v36;
    v37 = v9 - 1;
    if (v9 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n(a1, 2);
      return;
    }
    v38 = (_OWORD *)(a1 + 80);
    while (1)
    {
      v12 = (_TtC13GameOverlayUI20GameOverlayUIService *)*((_QWORD *)v38 - 1);
      v55 = *v38;
      v58 = *((_QWORD *)v38 - 2);
      v39 = v58;
      v59 = v12;
      v40 = (_QWORD *)*a3;
      swift_bridgeObjectRetain(v12);
      v41 = sub_1000AAE54(v58, (uint64_t)v12);
      v43 = v40[2];
      v44 = (v42 & 1) == 0;
      v35 = __OFADD__(v43, v44);
      v45 = v43 + v44;
      if (v35)
        break;
      v46 = v42;
      if (v40[3] < v45)
      {
        sub_1000AEAFC(v45, 1);
        v41 = sub_1000AAE54(v58, (uint64_t)v12);
        if ((v46 & 1) != (v47 & 1))
          goto LABEL_25;
      }
      if ((v46 & 1) != 0)
        goto LABEL_10;
      v48 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v41 >> 6) + 64) |= 1 << v41;
      v49 = (uint64_t *)(v48[6] + 16 * v41);
      *v49 = v39;
      v49[1] = (uint64_t)v12;
      *(_OWORD *)(v48[7] + 16 * v41) = v55;
      v50 = v48[2];
      v35 = __OFADD__(v50, 1);
      v51 = v50 + 1;
      if (v35)
        goto LABEL_24;
      v48[2] = v51;
      v38 += 2;
      if (!--v37)
        goto LABEL_22;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_1000AEAFC(v19, v11 & 1);
  v21 = sub_1000AAE54(v13, (uint64_t)v12);
  if ((v20 & 1) == (v22 & 1))
  {
    v16 = v21;
    if ((v20 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v23 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
    swift_willThrow(v23);
    v60 = v23;
    swift_errorRetain(v23);
    v24 = sub_100003304(&qword_10010EB50);
    if ((swift_dynamicCast(v24, &v60, v24, &type metadata for _MergeError, 0) & 1) == 0)
    {
      swift_bridgeObjectRelease(v12, v25, v26, v27, v28, v29, v30, v31);
      swift_bridgeObjectRelease_n(a1, 2);
      swift_errorRelease(v60);
      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
LABEL_26:
  v56 = 0;
  v57 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v52._object = (void *)0x80000001000D0A20;
  v52._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v52);
  _print_unlocked<A, B>(_:_:)(&v58, &v56, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v53._countAndFlagsBits = 39;
  v53._object = (void *)0xE100000000000000;
  String.append(_:)(v53);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v56, v57, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
}

uint64_t sub_1000A359C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *))
{
  uint64_t v4;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v12;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a2);
  v12 = a2;
  a4(a1, a3, 0, isUniquelyReferenced_nonNull_native, &v12);
  v10 = v12;
  swift_bridgeObjectRelease(0x8000000000000000);
  if (v4)
    swift_bridgeObjectRelease(v10);
  return v10;
}

void sub_1000A3624(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t i;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  int64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  const char *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  unint64_t v43;
  __int128 v44;
  uint64_t v45;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_100003304(&qword_10010F5A0);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v42 = v1 + 64;
  v4 = -1 << *(_BYTE *)(v1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v1 + 64);
  v41 = (unint64_t)(63 - v4) >> 6;
  swift_bridgeObjectRetain(v1);
  i = 0;
  v8 = &qword_100110D20;
  v9 = (uint64_t *)&unk_10010F5B0;
  if (v6)
    goto LABEL_10;
LABEL_11:
  v17 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_36;
  if (v17 >= v41)
    goto LABEL_33;
  v18 = *(_QWORD *)(v42 + 8 * v17);
  v19 = i + 1;
  if (!v18)
  {
    v19 = i + 2;
    if (i + 2 >= v41)
      goto LABEL_33;
    v18 = *(_QWORD *)(v42 + 8 * v19);
    if (!v18)
    {
      v19 = i + 3;
      if (i + 3 >= v41)
        goto LABEL_33;
      v18 = *(_QWORD *)(v42 + 8 * v19);
      if (!v18)
      {
        v19 = i + 4;
        if (i + 4 >= v41)
          goto LABEL_33;
        v18 = *(_QWORD *)(v42 + 8 * v19);
        if (!v18)
        {
          v19 = i + 5;
          if (i + 5 >= v41)
            goto LABEL_33;
          v18 = *(_QWORD *)(v42 + 8 * v19);
          if (!v18)
          {
            v19 = i + 6;
            if (i + 6 >= v41)
              goto LABEL_33;
            v18 = *(_QWORD *)(v42 + 8 * v19);
            v20 = i + 6;
            if (!v18)
            {
              while (1)
              {
                v19 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_37;
                if (v19 >= v41)
                  break;
                v18 = *(_QWORD *)(v42 + 8 * v19);
                ++v20;
                if (v18)
                  goto LABEL_27;
              }
LABEL_33:
              sub_100074DB8(v1);
              return;
            }
          }
        }
      }
    }
  }
LABEL_27:
  v6 = (v18 - 1) & v18;
  v16 = __clz(__rbit64(v18)) + (v19 << 6);
  for (i = v19; ; v16 = v15 | (i << 6))
  {
    v21 = 16 * v16;
    v22 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v16);
    v24 = *v22;
    v23 = v22[1];
    v44 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + v21);
    swift_bridgeObjectRetain(v23);
    v25 = sub_100003304(v8);
    v26 = sub_100003304(v9);
    swift_dynamicCast(&v45, &v44, v25, v26, 7);
    v27 = v45;
    v28 = sub_1000C1508(v24, v23);
    v36 = v28;
    if ((v29 & 1) != 0)
    {
      v43 = v6;
      v10 = v1;
      v11 = i;
      v12 = v9;
      v13 = v8;
      v14 = v3[6] + 16 * v28;
      swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v14 + 8), v29, v30, v31, v32, v33, v34, v35);
      *(_QWORD *)v14 = v24;
      *(_QWORD *)(v14 + 8) = v23;
      v8 = v13;
      v9 = v12;
      i = v11;
      v1 = v10;
      v6 = v43;
      *(_QWORD *)(v3[7] + 8 * v36) = v27;
      if (!v43)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v3[2] >= v3[3])
      break;
    *(_QWORD *)((char *)v3 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v28;
    v37 = (uint64_t *)(v3[6] + 16 * v28);
    *v37 = v24;
    v37[1] = v23;
    *(_QWORD *)(v3[7] + 8 * v28) = v27;
    v38 = v3[2];
    v39 = __OFADD__(v38, 1);
    v40 = v38 + 1;
    if (v39)
      goto LABEL_35;
    v3[2] = v40;
    if (!v6)
      goto LABEL_11;
LABEL_10:
    v15 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
}

void sub_1000A3944(_TtC13GameOverlayUI20GameOverlayUIService *a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _TtC13GameOverlayUI20GameOverlayUIService *v14;
  uint64_t v15;
  _QWORD *v16;
  const char *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  _QWORD *v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  _TtC13GameOverlayUI20GameOverlayUIService *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _TtC13GameOverlayUI20GameOverlayUIService *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _TtC13GameOverlayUI20GameOverlayUIService *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  const char *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  uint64_t v57;
  _BOOL8 v58;
  uint64_t v59;
  char v60;
  _QWORD *v61;
  uint64_t *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  SEL v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;

  swift_bridgeObjectRetain(a1);
  swift_retain(a3);
  v9 = sub_1000A3C5C();
  if (!v10)
    goto LABEL_23;
  v13 = v9;
  v14 = (_TtC13GameOverlayUI20GameOverlayUIService *)v10;
  v15 = v12;
  v73 = v11;
  v16 = (_QWORD *)*a5;
  v24 = sub_1000C1508(v9, v10);
  v25 = v16[2];
  v26 = (v17 & 1) == 0;
  v27 = v25 + v26;
  if (__OFADD__(v25, v26))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v28 = (char)v17;
  if (v16[3] >= v27)
  {
    if ((a4 & 1) != 0)
    {
      v30 = (_QWORD *)*a5;
      if ((v17 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_1000A3E0C();
      v30 = (_QWORD *)*a5;
      if ((v28 & 1) != 0)
        goto LABEL_9;
    }
LABEL_11:
    v30[(v24 >> 6) + 8] |= 1 << v24;
    v31 = (uint64_t *)(v30[6] + 16 * v24);
    *v31 = v13;
    v31[1] = (uint64_t)v14;
    v32 = (_QWORD *)(v30[7] + 16 * v24);
    *v32 = v73;
    v32[1] = v15;
    v33 = v30[2];
    v34 = __OFADD__(v33, 1);
    v35 = v33 + 1;
    if (v34)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v30[2] = v35;
LABEL_13:
    v36 = sub_1000A3C5C();
    if (v37)
    {
      v40 = v36;
      v41 = v37;
      v42 = v38;
      v43 = v39;
      do
      {
        v48 = (_QWORD *)*a5;
        v49 = sub_1000C1508(v40, (uint64_t)v41);
        v57 = v48[2];
        v58 = (v50 & 1) == 0;
        v34 = __OFADD__(v57, v58);
        v59 = v57 + v58;
        if (v34)
          goto LABEL_24;
        v60 = (char)v50;
        if (v48[3] < v59)
        {
          sub_1000A3FC4(v59, 1);
          v49 = sub_1000C1508(v40, (uint64_t)v41);
          if ((v60 & 1) != (v50 & 1))
            goto LABEL_26;
        }
        v61 = (_QWORD *)*a5;
        if ((v60 & 1) != 0)
        {
          v44 = 16 * v49;
          v75 = *(_OWORD *)(v61[7] + 16 * v49);
          swift_bridgeObjectRelease(v41, v50, v51, v52, v53, v54, v55, v56);
          *(_OWORD *)(v61[7] + v44) = v75;
        }
        else
        {
          v61[(v49 >> 6) + 8] |= 1 << v49;
          v62 = (uint64_t *)(v61[6] + 16 * v49);
          *v62 = v40;
          v62[1] = (uint64_t)v41;
          v63 = (_QWORD *)(v61[7] + 16 * v49);
          *v63 = v42;
          v63[1] = v43;
          v64 = v61[2];
          v34 = __OFADD__(v64, 1);
          v65 = v64 + 1;
          if (v34)
            goto LABEL_25;
          v61[2] = v65;
        }
        v40 = sub_1000A3C5C();
        v41 = v45;
        v42 = v46;
        v43 = v47;
      }
      while (v45);
    }
LABEL_23:
    swift_release(a3);
    swift_bridgeObjectRelease(a1, v66, v67, v68, v69, v70, v71, v72);
    sub_100074DB8((uint64_t)a1);
    swift_release(a3);
    return;
  }
  sub_1000A3FC4(v27, a4 & 1);
  v29 = sub_1000C1508(v13, (uint64_t)v14);
  if ((v28 & 1) == (v17 & 1))
  {
    v24 = v29;
    v30 = (_QWORD *)*a5;
    if ((v28 & 1) == 0)
      goto LABEL_11;
LABEL_9:
    v74 = *(_OWORD *)(v30[7] + 16 * v24);
    swift_bridgeObjectRelease(v14, v17, v18, v19, v20, v21, v22, v23);
    *(_OWORD *)(v30[7] + 16 * v24) = v74;
    goto LABEL_13;
  }
LABEL_26:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t sub_1000A3C5C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  void (*v13)(uint64_t *__return_ptr, _QWORD *);
  __int128 v14;
  uint64_t result;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  int64_t v21;
  int64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  __int128 v25;

  v2 = *v1;
  v4 = v1[3];
  v3 = v1[4];
  v5 = v4;
  if (v3)
  {
    v6 = (v3 - 1) & v3;
    v7 = __clz(__rbit64(v3)) | (v4 << 6);
LABEL_3:
    v8 = 16 * v7;
    v10 = *(_QWORD *)(v2 + 48);
    v9 = *(_QWORD *)(v2 + 56);
    v11 = (_QWORD *)(v10 + v8);
    v12 = v11[1];
    v13 = (void (*)(uint64_t *__return_ptr, _QWORD *))v1[5];
    v24[0] = *v11;
    v24[1] = v12;
    v14 = *(_OWORD *)(v9 + v8);
    v1[3] = v5;
    v1[4] = v6;
    v25 = v14;
    swift_bridgeObjectRetain(v12);
    v13(&v23, v24);
    swift_bridgeObjectRelease(v12);
    return v23;
  }
  v16 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
LABEL_25:
    v1 = v0;
    goto LABEL_26;
  }
  v17 = (unint64_t)(v1[2] + 64) >> 6;
  if (v16 < v17)
  {
    v18 = v1[1];
    v19 = *(_QWORD *)(v18 + 8 * v16);
    if (v19)
    {
LABEL_7:
      v6 = (v19 - 1) & v19;
      v7 = __clz(__rbit64(v19)) + (v16 << 6);
      v5 = v16;
      goto LABEL_3;
    }
    v20 = v4 + 2;
    v5 = v4 + 1;
    if (v4 + 2 < v17)
    {
      v19 = *(_QWORD *)(v18 + 8 * v20);
      if (v19)
      {
LABEL_10:
        v16 = v20;
        goto LABEL_7;
      }
      v21 = v4 + 3;
      v5 = v4 + 2;
      if (v4 + 3 < v17)
      {
        v19 = *(_QWORD *)(v18 + 8 * v21);
        if (v19)
        {
LABEL_13:
          v16 = v21;
          goto LABEL_7;
        }
        v20 = v4 + 4;
        v5 = v4 + 3;
        if (v4 + 4 < v17)
        {
          v19 = *(_QWORD *)(v18 + 8 * v20);
          if (v19)
            goto LABEL_10;
          v21 = v4 + 5;
          v5 = v4 + 4;
          if (v4 + 5 < v17)
          {
            v19 = *(_QWORD *)(v18 + 8 * v21);
            if (v19)
              goto LABEL_13;
            v16 = v4 + 6;
            v5 = v4 + 5;
            if (v4 + 6 < v17)
            {
              v19 = *(_QWORD *)(v18 + 8 * v16);
              if (v19)
                goto LABEL_7;
              v0 = v1;
              v5 = v17 - 1;
              v22 = v4 + 7;
              while (v17 != v22)
              {
                v19 = *(_QWORD *)(v18 + 8 * v22++);
                if (v19)
                {
                  v16 = v22 - 1;
                  goto LABEL_7;
                }
              }
              goto LABEL_25;
            }
          }
        }
      }
    }
  }
LABEL_26:
  result = 0;
  v1[3] = v5;
  v1[4] = 0;
  return result;
}

void sub_1000A3E0C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_100003304((uint64_t *)&unk_100110420);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_27:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v22 >= v13)
      goto LABEL_27;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_27;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
      {
        v9 = v22 + 2;
        if (v22 + 2 >= v13)
          goto LABEL_27;
        v23 = *(_QWORD *)(v6 + 8 * v9);
        if (!v23)
        {
          v9 = v22 + 3;
          if (v22 + 3 >= v13)
            goto LABEL_27;
          v23 = *(_QWORD *)(v6 + 8 * v9);
          v24 = v22 + 3;
          if (!v23)
            break;
        }
      }
    }
LABEL_26:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v16) = v20;
    swift_bridgeObjectRetain(v18);
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_27;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_26;
  }
LABEL_29:
  __break(1u);
}

void sub_1000A3FC4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t i;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  _QWORD *v36;
  int64_t v37;
  __int128 v38;
  _QWORD v39[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100003304((uint64_t *)&unk_100110420);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v35 = v3;
    v36 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v37 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    swift_retain(v5);
    v13 = 0;
    while (1)
    {
      if (v11)
      {
        v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v22 = v21 | (v13 << 6);
      }
      else
      {
        v23 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return;
        }
        if (v23 >= v37)
          goto LABEL_37;
        v24 = v36[v23];
        ++v13;
        if (!v24)
        {
          v13 = v23 + 1;
          if (v23 + 1 >= v37)
            goto LABEL_37;
          v24 = v36[v13];
          if (!v24)
          {
            v13 = v23 + 2;
            if (v23 + 2 >= v37)
              goto LABEL_37;
            v24 = v36[v13];
            if (!v24)
            {
              v13 = v23 + 3;
              if (v23 + 3 >= v37)
              {
LABEL_37:
                swift_release(v5);
                v3 = v35;
                if ((a2 & 1) != 0)
                {
                  v34 = 1 << *(_BYTE *)(v5 + 32);
                  if (v34 >= 64)
                    bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                  else
                    *v36 = -1 << v34;
                  *(_QWORD *)(v5 + 16) = 0;
                }
                break;
              }
              v24 = v36[v13];
              for (i = v23 + 3; !v24; ++i)
              {
                v13 = i + 1;
                if (__OFADD__(i, 1))
                  goto LABEL_44;
                if (v13 >= v37)
                  goto LABEL_37;
                v24 = v36[v13];
              }
            }
          }
        }
        v11 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v13 << 6);
      }
      v26 = 16 * v22;
      v27 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v26);
      v29 = *v27;
      v28 = v27[1];
      v38 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + v26);
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain(v28);
      Hasher.init(_seed:)(v39, *(_QWORD *)(v8 + 40));
      String.hash(into:)(v39, v29, v28);
      v14 = Hasher._finalize()();
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = v14 & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v30 = 0;
        v31 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v32 = v17 == v31;
          if (v17 == v31)
            v17 = 0;
          v30 |= v32;
          v33 = *(_QWORD *)(v12 + 8 * v17);
        }
        while (v33 == -1);
        v18 = __clz(__rbit64(~v33)) + (v17 << 6);
      }
      *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = 16 * v18;
      v20 = (_QWORD *)(*(_QWORD *)(v8 + 48) + v19);
      *v20 = v29;
      v20[1] = v28;
      *(_OWORD *)(*(_QWORD *)(v8 + 56) + v19) = v38;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release(v5);
  *v3 = v8;
}

uint64_t sub_1000A42E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v3;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  v3 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 24) = v2;
  return swift_bridgeObjectRetain(v3);
}

uint64_t sub_1000A4308()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void (*v12)(uint64_t *__return_ptr, _QWORD *);
  __int128 v13;
  uint64_t result;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  int64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  __int128 v23;

  v1 = *v0;
  v3 = v0[3];
  v2 = v0[4];
  v4 = v3;
  if (v2)
  {
    v5 = (v2 - 1) & v2;
    v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    v7 = 16 * v6;
    v9 = *(_QWORD *)(v1 + 48);
    v8 = *(_QWORD *)(v1 + 56);
    v10 = (_QWORD *)(v9 + v7);
    v11 = v10[1];
    v12 = (void (*)(uint64_t *__return_ptr, _QWORD *))v0[5];
    v22[0] = *v10;
    v22[1] = v11;
    v13 = *(_OWORD *)(v8 + v7);
    v0[3] = v4;
    v0[4] = v5;
    v23 = v13;
    swift_bridgeObjectRetain(v11);
    v12(&v21, v22);
    swift_bridgeObjectRelease(v11);
    return v21;
  }
  v15 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    v16 = (unint64_t)(v0[2] + 64) >> 6;
    if (v15 < v16)
    {
      v17 = v0[1];
      v18 = *(_QWORD *)(v17 + 8 * v15);
      if (v18)
      {
LABEL_7:
        v5 = (v18 - 1) & v18;
        v6 = __clz(__rbit64(v18)) + (v15 << 6);
        v4 = v15;
        goto LABEL_3;
      }
      v19 = v3 + 2;
      v4 = v3 + 1;
      if (v3 + 2 < v16)
      {
        v18 = *(_QWORD *)(v17 + 8 * v19);
        if (v18)
        {
LABEL_10:
          v15 = v19;
          goto LABEL_7;
        }
        v4 = v3 + 2;
        if (v3 + 3 < v16)
        {
          v18 = *(_QWORD *)(v17 + 8 * (v3 + 3));
          if (v18)
          {
            v15 = v3 + 3;
            goto LABEL_7;
          }
          v19 = v3 + 4;
          v4 = v3 + 3;
          if (v3 + 4 < v16)
          {
            v18 = *(_QWORD *)(v17 + 8 * v19);
            if (v18)
              goto LABEL_10;
            v15 = v3 + 5;
            v4 = v3 + 4;
            if (v3 + 5 < v16)
            {
              v18 = *(_QWORD *)(v17 + 8 * v15);
              if (v18)
                goto LABEL_7;
              v4 = v16 - 1;
              v20 = v3 + 6;
              while (v16 != v20)
              {
                v18 = *(_QWORD *)(v17 + 8 * v20++);
                if (v18)
                {
                  v15 = v20 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

uint64_t *sub_1000A4494(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v10);
  }
  else
  {
    v7 = type metadata accessor for MediaArtwork(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_100003304(&qword_10010EC08);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = *(int *)(a3 + 20);
    v12 = *(int *)(a3 + 24);
    v13 = *(void **)((char *)a2 + v11);
    *(uint64_t *)((char *)a1 + v11) = (uint64_t)v13;
    *((_BYTE *)a1 + v12) = *((_BYTE *)a2 + v12);
    v14 = v13;
  }
  return a1;
}

void sub_1000A4588(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for MediaArtwork(0);
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);

}

char *sub_1000A45F0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;

  v6 = type metadata accessor for MediaArtwork(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_100003304(&qword_10010EC08);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = *(int *)(a3 + 20);
  v10 = *(int *)(a3 + 24);
  v11 = *(void **)&a2[v9];
  *(_QWORD *)&a1[v9] = v11;
  a1[v10] = a2[v10];
  v12 = v11;
  return a1;
}

char *sub_1000A46B8(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;

  v6 = type metadata accessor for MediaArtwork(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = sub_100003304(&qword_10010EC08);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = *(void **)&a1[v12];
  v14 = *(void **)&a2[v12];
  *(_QWORD *)&a1[v12] = v14;
  v15 = v14;

  a1[*(int *)(a3 + 24)] = a2[*(int *)(a3 + 24)];
  return a1;
}

char *sub_1000A47D8(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for MediaArtwork(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_100003304(&qword_10010EC08);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = *(int *)(a3 + 24);
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  a1[v9] = a2[v9];
  return a1;
}

char *sub_1000A489C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;

  v6 = type metadata accessor for MediaArtwork(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = sub_100003304(&qword_10010EC08);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = *(void **)&a1[v12];
  *(_QWORD *)&a1[v12] = *(_QWORD *)&a2[v12];

  a1[*(int *)(a3 + 24)] = a2[*(int *)(a3 + 24)];
  return a1;
}

uint64_t sub_1000A49B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A49C4);
}

uint64_t sub_1000A49C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = sub_100003304(&qword_10010EC08);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_1000A4A50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A4A5C);
}

uint64_t sub_1000A4A5C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100003304(&qword_10010EC08);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2;
  return result;
}

uint64_t type metadata accessor for PlayerAvatarView(uint64_t a1)
{
  uint64_t result;

  result = qword_100110D88;
  if (!qword_100110D88)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PlayerAvatarView);
  return result;
}

void sub_1000A4B14(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  sub_1000A4B90(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = "\b";
    v4[2] = &unk_1000CDA90;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

void sub_1000A4B90(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100110D98)
  {
    v2 = type metadata accessor for MediaArtwork(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100110D98);
  }
}

uint64_t sub_1000A4BE4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E592C, 1);
}

uint64_t sub_1000A4BF4@<X0>(void (*a1)(char *, uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD v19[10];

  v6 = sub_100003304(&qword_100110DD0);
  __chkstk_darwin(v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000A4CF8(a1, (uint64_t)v8);
  v9 = static Alignment.bottomTrailing.getter();
  v11 = v10;
  sub_1000A52D8(a2, v19);
  sub_100010CBC((uint64_t)v8, a3, &qword_100110DD0);
  v12 = a3 + *(int *)(sub_100003304(&qword_100110DD8) + 36);
  v13 = v19[7];
  *(_OWORD *)(v12 + 96) = v19[6];
  *(_OWORD *)(v12 + 112) = v13;
  v14 = v19[9];
  *(_OWORD *)(v12 + 128) = v19[8];
  *(_OWORD *)(v12 + 144) = v14;
  v15 = v19[3];
  *(_OWORD *)(v12 + 32) = v19[2];
  *(_OWORD *)(v12 + 48) = v15;
  v16 = v19[5];
  *(_OWORD *)(v12 + 64) = v19[4];
  *(_OWORD *)(v12 + 80) = v16;
  v17 = v19[1];
  *(_OWORD *)v12 = v19[0];
  *(_OWORD *)(v12 + 16) = v17;
  *(_QWORD *)(v12 + 160) = v9;
  *(_QWORD *)(v12 + 168) = v11;
  return sub_100010ED0((uint64_t)v8, &qword_100110DD0);
}

void sub_1000A4CF8(void (*a1)(char *, uint64_t)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t OpaqueTypeConformance2;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  __n128 v41;
  __n128 v42;
  double v43;
  double v44;
  double v45;
  id v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t);
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  ValueMetadata *v72;
  unint64_t v73;
  unint64_t v74;

  v61 = a1;
  v69 = a2;
  v3 = type metadata accessor for Image.ResizingMode(0);
  v59 = *(_QWORD *)(v3 - 8);
  v60 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = sub_100003304(&qword_100110E50);
  __chkstk_darwin(v67);
  v68 = (uint64_t)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_100003304(&qword_100110E58);
  __chkstk_darwin(v65);
  v66 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = sub_100003304(&qword_100110E60);
  __chkstk_darwin(v70);
  v64 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003304(&qword_100110E68);
  v63 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v62 = (char *)&v59 - v13;
  v14 = sub_100003304(&qword_10010EC08);
  __chkstk_darwin(v14);
  v16 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for MediaArtwork(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v59 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v23 = (char *)&v59 - v22;
  sub_100010CBC(v2, (uint64_t)v16, &qword_10010EC08);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    v25 = v65;
    v24 = v66;
    v63 = v9;
    v26 = v68;
    sub_100010ED0((uint64_t)v16, &qword_10010EC08);
    v27 = *(void **)(v2 + *(int *)(type metadata accessor for PlayerAvatarView(0) + 20));
    if (v27)
    {
      v28 = v27;
      v29 = Image.init(uiImage:)();
      v30 = v59;
      v31 = v60;
      (*(void (**)(char *, _QWORD, uint64_t))(v59 + 104))(v5, enum case for Image.ResizingMode.stretch(_:), v60);
      v32 = Image.resizable(capInsets:resizingMode:)(v5, v29, 0.0, 0.0, 0.0, 0.0);
      v33 = swift_release(v29);
      (*(void (**)(char *, uint64_t, __n128))(v30 + 8))(v5, v31, v33);
      *(_QWORD *)v24 = v32;
      *((_QWORD *)v24 + 1) = 0;
      *((_WORD *)v24 + 8) = 1;
      swift_storeEnumTagMultiPayload(v24, v25, 1);
      swift_retain(v32);
      v34 = sub_100003304(&qword_100110E88);
      v35 = sub_1000A66D4();
      v36 = sub_1000A671C();
      v71 = v17;
      v72 = &type metadata for PlayerAvatarMediaArtworkStyle;
      v73 = v35;
      v74 = v36;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v71, &opaque type descriptor for <<opaque return type of View.mediaArtworkStyle<A>(_:)>>, 1);
      v38 = sub_1000A6760();
      v39 = (uint64_t)v64;
      _ConditionalContent<>.init(storage:)(v24, v63, v34, OpaqueTypeConformance2, v38);
      sub_100010CBC(v39, v26, &qword_100110E60);
      swift_storeEnumTagMultiPayload(v26, v67, 0);
      v40 = sub_1000A6628();
      _ConditionalContent<>.init(storage:)(v26, v70, &type metadata for EmptyView, v40, &protocol witness table for EmptyView);

      sub_100010ED0(v39, &qword_100110E60);
      swift_release(v32);
    }
    else
    {
      swift_storeEnumTagMultiPayload(v26, v67, 1);
      v58 = sub_1000A6628();
      _ConditionalContent<>.init(storage:)(v26, v70, &type metadata for EmptyView, v58, &protocol witness table for EmptyView);
    }
  }
  else
  {
    v41.n128_f64[0] = (*(double (**)(char *, char *, uint64_t))(v18 + 32))(v23, v16, v17);
    v42.n128_f64[0] = GeometryProxy.size.getter(v41);
    v43 = v42.n128_f64[0];
    GeometryProxy.size.getter(v42);
    v45 = v44;
    v46 = AMSMediaArtworkCropStyleBoundedBox;
    MediaArtwork.resize(_:croppedTo:)(v43, v45);

    v47 = sub_1000A66D4();
    v48 = sub_1000A671C();
    View.mediaArtworkStyle<A>(_:)(v48, v17, &type metadata for PlayerAvatarMediaArtworkStyle, v47, v48);
    v61 = *(void (**)(char *, uint64_t))(v18 + 8);
    v61(v20, v17);
    v50 = v62;
    v49 = v63;
    (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v62, v11, v9);
    v51 = v66;
    (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v66, v50, v9);
    swift_storeEnumTagMultiPayload(v51, v65, 0);
    v52 = sub_100003304(&qword_100110E88);
    v71 = v17;
    v72 = &type metadata for PlayerAvatarMediaArtworkStyle;
    v73 = v47;
    v74 = v48;
    v53 = swift_getOpaqueTypeConformance2(&v71, &opaque type descriptor for <<opaque return type of View.mediaArtworkStyle<A>(_:)>>, 1);
    v54 = sub_1000A6760();
    v55 = (uint64_t)v64;
    _ConditionalContent<>.init(storage:)(v51, v9, v52, v53, v54);
    v56 = v68;
    sub_100010CBC(v55, v68, &qword_100110E60);
    swift_storeEnumTagMultiPayload(v56, v67, 0);
    v57 = sub_1000A6628();
    _ConditionalContent<>.init(storage:)(v56, v70, &type metadata for EmptyView, v57, &protocol witness table for EmptyView);
    sub_100010ED0(v55, &qword_100110E60);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v50, v9);
    v61(v23, v17);
  }
}

double sub_1000A52D8@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  int v3;
  __n128 v4;
  uint64_t v5;
  unint64_t v6;
  __n128 v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t KeyPath;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  double result;
  __int128 v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _BYTE v60[25];
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  char v72;
  __int16 v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  char v77;
  __int128 v78;
  _OWORD v79[8];
  _OWORD v80[2];
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  _OWORD v89[2];
  uint64_t v90;
  char v91;
  uint64_t v92;
  char v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  _OWORD v103[3];

  v3 = *(unsigned __int8 *)(a1 + *(int *)(type metadata accessor for PlayerAvatarView(0) + 24));
  if (v3 == 2)
  {
    sub_1000A5B20((uint64_t)&v81);
    sub_10001A0AC((uint64_t)&v81, (uint64_t)v79, &qword_100110DE0);
    v5 = sub_100003304(&qword_100110DE8);
    v6 = sub_1000A5B2C();
    _ConditionalContent<>.init(storage:)(v79, v5, &type metadata for EmptyView, v6, &protocol witness table for EmptyView);
  }
  else
  {
    if ((v3 & 1) != 0)
    {
      v18 = GeometryProxy.size.getter(v4) / 6.0;
      v19 = Image.init(systemName:)(0x6C69636E6570, 0xE600000000000000);
      v51 = static Font.title.getter();
      KeyPath = swift_getKeyPath(&unk_1000CDAF8);
      v21 = static Color.red.getter();
      v22 = swift_getKeyPath(&unk_1000CDB28);
      v48 = static Edge.Set.all.getter(v22);
      v23 = EdgeInsets.init(_all:)(4.0);
      v25 = v24;
      v27 = v26;
      v29 = v28;
      v31 = static Color.white.getter(v30);
      v32 = static Edge.Set.all.getter(v31);
      v33 = v32;
      v34 = static Alignment.center.getter(v32);
      _FrameLayout.init(width:height:alignment:)(&v90, *(_QWORD *)&v18, 0, *(_QWORD *)&v18, 0, v34, v35);
      v50 = v19;
      v61 = v19;
      v62 = KeyPath;
      v63 = v51;
      v64 = v22;
      v49 = v22;
      v65 = v21;
      LOBYTE(v66) = v48;
      *((double *)&v66 + 1) = v23;
      v67 = v25;
      v68 = v27;
      v69 = v29;
      v70 = 0;
      v71 = v31;
      v72 = v33;
      v73 = 256;
      v74 = v90;
      v75 = v91;
      v76 = v92;
      v77 = v93;
      v78 = v94;
      sub_1000A660C((uint64_t)&v61);
      sub_10001A0AC((uint64_t)&v61, (uint64_t)&v95, &qword_100110E48);
      swift_retain(v19);
      swift_retain(KeyPath);
      swift_retain(v51);
      swift_retain(v22);
      swift_retain(v21);
      v36 = v31;
      swift_retain(v31);
      v37 = sub_100003304(&qword_10010D590);
      v38 = sub_100003304(&qword_100110E00);
      v39 = sub_1000A67FC((unint64_t *)&qword_10010D588, &qword_10010D590);
      v40 = sub_100034764(&qword_100110DF8, &qword_100110E00, (void (*)(void))sub_1000A5BD8);
      _ConditionalContent<>.init(storage:)(&v95, v37, v38, v39, v40);
      v87 = v58;
      v88 = v59;
      v89[0] = *(_OWORD *)v60;
      *(_OWORD *)((char *)v89 + 9) = *(_OWORD *)&v60[9];
      v83 = v54;
      v84 = v55;
      v85 = v56;
      v86 = v57;
      v81 = v52;
      v82 = v53;
      sub_1000A6618((uint64_t)&v81);
      sub_10001A0AC((uint64_t)&v81, (uint64_t)&v95, &qword_100110DE0);
      v41 = sub_100003304(&qword_100110DE8);
      v42 = sub_1000A5B2C();
      _ConditionalContent<>.init(storage:)(&v95, v41, &type metadata for EmptyView, v42, &protocol witness table for EmptyView);
      swift_release(v36);
      swift_release(v21);
      swift_release(v49);
      swift_release(v51);
      swift_release(KeyPath);
      swift_release(v50);
    }
    else
    {
      v7.n128_f64[0] = GeometryProxy.size.getter(v4);
      v8 = v7.n128_f64[0] * 0.25;
      v9 = Image.init(_:bundle:)(0xD000000000000013, 0x80000001000D11F0, 0, v7);
      v10 = static Alignment.center.getter(v9);
      _FrameLayout.init(width:height:alignment:)(&v90, *(_QWORD *)&v8, 0, *(_QWORD *)&v8, 0, v10, v11);
      v61 = v9;
      v62 = v90;
      LOBYTE(v63) = v91;
      v64 = v92;
      LOBYTE(v65) = v93;
      v66 = v94;
      sub_1000A6620((uint64_t)&v61);
      sub_10001A0AC((uint64_t)&v61, (uint64_t)&v95, &qword_100110E48);
      swift_retain(v9);
      v12 = sub_100003304(&qword_10010D590);
      v13 = sub_100003304(&qword_100110E00);
      v14 = sub_1000A67FC((unint64_t *)&qword_10010D588, &qword_10010D590);
      v15 = sub_100034764(&qword_100110DF8, &qword_100110E00, (void (*)(void))sub_1000A5BD8);
      _ConditionalContent<>.init(storage:)(&v95, v12, v13, v14, v15);
      v87 = v58;
      v88 = v59;
      v89[0] = *(_OWORD *)v60;
      *(_OWORD *)((char *)v89 + 9) = *(_OWORD *)&v60[9];
      v83 = v54;
      v84 = v55;
      v85 = v56;
      v86 = v57;
      v81 = v52;
      v82 = v53;
      sub_1000A6618((uint64_t)&v81);
      sub_10001A0AC((uint64_t)&v81, (uint64_t)&v95, &qword_100110DE0);
      v16 = sub_100003304(&qword_100110DE8);
      v17 = sub_1000A5B2C();
      _ConditionalContent<>.init(storage:)(&v95, v16, &type metadata for EmptyView, v17, &protocol witness table for EmptyView);
      swift_release(v9);
    }
    v101 = v79[6];
    v102 = v79[7];
    v103[0] = v80[0];
    *(_OWORD *)((char *)v103 + 10) = *(_OWORD *)((char *)v80 + 10);
    v97 = v79[2];
    v98 = v79[3];
    v99 = v79[4];
    v100 = v79[5];
    v95 = v79[0];
    v96 = v79[1];
  }
  v43 = v102;
  a2[6] = v101;
  a2[7] = v43;
  a2[8] = v103[0];
  *(_OWORD *)((char *)a2 + 138) = *(_OWORD *)((char *)v103 + 10);
  v44 = v98;
  a2[2] = v97;
  a2[3] = v44;
  v45 = v100;
  a2[4] = v99;
  a2[5] = v45;
  result = *(double *)&v95;
  v47 = v96;
  *a2 = v95;
  a2[1] = v47;
  return result;
}

uint64_t sub_1000A58F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(a1);
  sub_1000A59A0(v2, (uint64_t)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 16) & ~v6;
  v8 = swift_allocObject(&unk_1001015C0, v7 + v5, v6 | 7);
  result = sub_1000A5A90((uint64_t)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v8 + v7);
  *(_QWORD *)a2 = sub_1000A5AD4;
  *(_QWORD *)(a2 + 8) = v8;
  *(_QWORD *)(a2 + 16) = 0x3FF0000000000000;
  *(_WORD *)(a2 + 24) = 0;
  return result;
}

uint64_t sub_1000A59A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PlayerAvatarView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A59E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = type metadata accessor for PlayerAvatarView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for MediaArtwork(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v0 + v4, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v4, v6);

  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1000A5A90(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PlayerAvatarView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A5AD4@<X0>(void (*a1)(char *, uint64_t)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PlayerAvatarView(0) - 8) + 80);
  return sub_1000A4BF4(a1, v2 + ((v5 + 16) & ~v5), a2);
}

uint64_t sub_1000A5B20(uint64_t result)
{
  *(_BYTE *)(result + 153) = 1;
  return result;
}

unint64_t sub_1000A5B2C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100110DF0;
  if (!qword_100110DF0)
  {
    v1 = sub_100006E54(&qword_100110DE8);
    sub_1000A67FC((unint64_t *)&qword_10010D588, &qword_10010D590);
    sub_100034764(&qword_100110DF8, &qword_100110E00, (void (*)(void))sub_1000A5BD8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100110DF0);
  }
  return result;
}

unint64_t sub_1000A5BD8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100110E08;
  if (!qword_100110E08)
  {
    v1 = sub_100006E54(&qword_100110E10);
    sub_1000A5C5C();
    sub_100011054(&qword_10010FB88, &qword_10010FB90, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100110E08);
  }
  return result;
}

unint64_t sub_1000A5C5C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100110E18;
  if (!qword_100110E18)
  {
    v1 = sub_100006E54(&qword_100110E20);
    sub_100034764(&qword_100110E28, &qword_100110E30, (void (*)(void))sub_1000A5D00);
    sub_100011054(&qword_10010FE48, &qword_10010FE50, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100110E18);
  }
  return result;
}

unint64_t sub_1000A5D00()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100110E38;
  if (!qword_100110E38)
  {
    v1 = sub_100006E54(&qword_100110E40);
    sub_10001B3D0();
    sub_100011054(&qword_10010EFF0, &qword_10010EFF8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100110E38);
  }
  return result;
}

void sub_1000A5D84(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  __int128 v37;
  int v38;
  __int128 v39;
  unsigned __int16 v40;
  unsigned __int8 v41;
  char v42;

  v2 = type metadata accessor for Image.ResizingMode(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MediaArtworkStyleConfiguration.image.getter(v4);
  if (v7)
  {
    v8 = v7;
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for Image.ResizingMode.stretch(_:), v2);
    KeyPath = Image.resizable(capInsets:resizingMode:)(v6, v8, 0.0, 0.0, 0.0, 0.0);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    v37 = (unint64_t)KeyPath;
    LOWORD(v38) = 1;
    BYTE2(v38) = 0;
    swift_retain(KeyPath);
    v10 = sub_100003304(&qword_100110E88);
    v11 = sub_100003304(&qword_100110EE8);
    v12 = sub_1000A6760();
    v13 = sub_1000A6B50();
    _ConditionalContent<>.init(storage:)(&v37, v10, v11, v12, v13);
    v14 = v39;
    LOBYTE(v12) = v41;
    v15 = v40;
    v37 = v39;
    HIWORD(v38) = v41 != 0;
    LOWORD(v38) = v40;
    sub_1000A6C9C(v39, *((uint64_t *)&v39 + 1), v40, v41);
    v16 = sub_100003304(&qword_100110EC8);
    v17 = sub_100003304(&qword_100110ED0);
    v18 = sub_1000A6ABC();
    v19 = sub_1000A6C18();
    _ConditionalContent<>.init(storage:)(&v37, v16, v17, v18, v19);
    swift_release(v8);
    sub_1000A6CC8(v14, *((uint64_t *)&v14 + 1), v15, v12);
  }
  else
  {
    v20 = MediaArtworkStyleConfiguration.subscript.getter(AMSMediaArtworkColorKindBackground);
    if (!v20)
    {
      v37 = static HierarchicalShapeStyle.quaternary.getter();
      v38 = 0x1000000;
      v33 = sub_100003304(&qword_100110EC8);
      v34 = sub_100003304(&qword_100110ED0);
      v35 = sub_1000A6ABC();
      v36 = sub_1000A6C18();
      _ConditionalContent<>.init(storage:)(&v37, v33, v34, v35, v36);
      goto LABEL_6;
    }
    v21 = v20;
    KeyPath = swift_getKeyPath(&unk_1000CDB28);
    *(_QWORD *)&v37 = KeyPath;
    *((_QWORD *)&v37 + 1) = v21;
    LOWORD(v38) = 0;
    BYTE2(v38) = 1;
    swift_retain(v21);
    swift_retain(KeyPath);
    v22 = sub_100003304(&qword_100110E88);
    v23 = sub_100003304(&qword_100110EE8);
    v24 = sub_1000A6760();
    v25 = sub_1000A6B50();
    _ConditionalContent<>.init(storage:)(&v37, v22, v23, v24, v25);
    v37 = v39;
    HIWORD(v38) = v41 != 0;
    LOWORD(v38) = v40;
    v26 = sub_100003304(&qword_100110EC8);
    v27 = sub_100003304(&qword_100110ED0);
    v28 = sub_1000A6ABC();
    v29 = sub_1000A6C18();
    _ConditionalContent<>.init(storage:)(&v37, v26, v27, v28, v29);
    swift_release(v21);
  }
  swift_release(KeyPath);
LABEL_6:
  v30 = *((_QWORD *)&v39 + 1);
  v31 = v40 | (v41 << 16);
  v32 = v42;
  *(_QWORD *)a1 = v39;
  *(_QWORD *)(a1 + 8) = v30;
  *(_WORD *)(a1 + 16) = v31;
  *(_BYTE *)(a1 + 18) = BYTE2(v31);
  *(_BYTE *)(a1 + 19) = v32;
}

uint64_t sub_1000A6108(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  int v18;
  char v19;
  char v20;
  char v21;

  v18 = a4;
  v8 = sub_100003304(&qword_100110F28);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_100003C28(a1, v12);
  v14 = sub_1000A6EAC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PlayerAvatar.CodingKeys, &type metadata for PlayerAvatar.CodingKeys, v14, v12, v13);
  v21 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, a3, &v21, v8);
  if (!v4)
  {
    v20 = v18;
    v19 = 1;
    v15 = sub_1000A6F34();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v20, &v19, v8, &type metadata for PlayerAvatar.Overlay, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_1000A6244(char *a1, char *a2)
{
  return sub_100075E1C(*a1, *a2);
}

Swift::Int sub_1000A6250()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 1953064037;
  else
    v2 = 0x656461637261;
  if (v1)
    v3 = 0xE400000000000000;
  else
    v3 = 0xE600000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1000A62C4(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 1953064037;
  else
    v2 = 0x656461637261;
  if (*v1)
    v3 = 0xE400000000000000;
  else
    v3 = 0xE600000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_1000A6314(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 1953064037;
  else
    v3 = 0x656461637261;
  if (v2)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE600000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_1000A6384@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000FB168, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_1000A63E0(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 1953064037;
  if (!*v1)
    v2 = 0x656461637261;
  v3 = 0xE600000000000000;
  if (*v1)
    v3 = 0xE400000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1000A6414(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000A6F78();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000A6470(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000A6F78();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1000A64BC()
{
  _BYTE *v0;

  if (*v0)
    return 0x79616C7265766FLL;
  else
    return 0x6574616C706D6574;
}

uint64_t sub_1000A64F8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000A7194(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000A651C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A6EAC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A6544(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A6EAC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A656C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  char v6;

  result = sub_1000A6D00(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_1000A6598(_QWORD *a1)
{
  uint64_t v1;

  return sub_1000A6108(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(unsigned __int8 *)(v1 + 16));
}

uint64_t sub_1000A65BC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000A65E4(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.foregroundColor.setter(v1);
}

uint64_t sub_1000A660C(uint64_t result)
{
  *(_BYTE *)(result + 152) = 1;
  return result;
}

uint64_t sub_1000A6618(uint64_t result)
{
  *(_BYTE *)(result + 153) = 0;
  return result;
}

uint64_t sub_1000A6620(uint64_t result)
{
  *(_BYTE *)(result + 152) = 0;
  return result;
}

unint64_t sub_1000A6628()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_100110E70;
  if (!qword_100110E70)
  {
    v1 = sub_100006E54(&qword_100110E60);
    v2[0] = type metadata accessor for MediaArtwork(255);
    v2[1] = &type metadata for PlayerAvatarMediaArtworkStyle;
    v2[2] = sub_1000A66D4();
    v2[3] = sub_1000A671C();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.mediaArtworkStyle<A>(_:)>>, 1);
    sub_1000A6760();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100110E70);
  }
  return result;
}

unint64_t sub_1000A66D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010FE70;
  if (!qword_10010FE70)
  {
    v1 = type metadata accessor for MediaArtwork(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for MediaArtwork, v1);
    atomic_store(result, (unint64_t *)&qword_10010FE70);
  }
  return result;
}

unint64_t sub_1000A671C()
{
  unint64_t result;

  result = qword_100110E78;
  if (!qword_100110E78)
  {
    result = swift_getWitnessTable(&unk_1000CDCD4, &type metadata for PlayerAvatarMediaArtworkStyle);
    atomic_store(result, (unint64_t *)&qword_100110E78);
  }
  return result;
}

unint64_t sub_1000A6760()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100110E80;
  if (!qword_100110E80)
  {
    v1 = sub_100006E54(&qword_100110E88);
    sub_1000A67FC(&qword_10010FE38, &qword_10010FE40);
    sub_100011054(&qword_100110E90, &qword_100110E98, (uint64_t)&protocol conformance descriptor for _MaskEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100110E80);
  }
  return result;
}

uint64_t sub_1000A67FC(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100006E54(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v4);
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for PlayerAvatarMediaArtworkStyle()
{
  return &type metadata for PlayerAvatarMediaArtworkStyle;
}

uint64_t sub_1000A686C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for PlayerAvatar(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for PlayerAvatar(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlayerAvatar(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 17))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PlayerAvatar(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PlayerAvatar()
{
  return &type metadata for PlayerAvatar;
}

ValueMetadata *type metadata accessor for PlayerAvatar.Overlay()
{
  return &type metadata for PlayerAvatar.Overlay;
}

unint64_t sub_1000A69E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100110EA0;
  if (!qword_100110EA0)
  {
    v1 = sub_100006E54(&qword_100110EA8);
    sub_100011054(&qword_100110EB0, &qword_100110EB8, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100110EA0);
  }
  return result;
}

unint64_t sub_1000A6A68()
{
  unint64_t result;

  result = qword_100110EC0;
  if (!qword_100110EC0)
  {
    result = swift_getWitnessTable(&unk_1000CDC5C, &type metadata for PlayerAvatar.Overlay);
    atomic_store(result, (unint64_t *)&qword_100110EC0);
  }
  return result;
}

uint64_t sub_1000A6AAC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E5978, 1);
}

uint64_t sub_1000A6ABC()
{
  return sub_1000A6AE0(&qword_100110ED8, &qword_100110EC8, (void (*)(void))sub_1000A6760, (void (*)(void))sub_1000A6B50);
}

uint64_t sub_1000A6AE0(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100006E54(a2);
    a3();
    a4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000A6B50()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100110EE0;
  if (!qword_100110EE0)
  {
    v1 = sub_100006E54(&qword_100110EE8);
    sub_1000A6BD4();
    sub_100011054(&qword_10010EFF0, &qword_10010EFF8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100110EE0);
  }
  return result;
}

unint64_t sub_1000A6BD4()
{
  unint64_t result;

  result = qword_100110EF0;
  if (!qword_100110EF0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Circle, &type metadata for Circle);
    atomic_store(result, (unint64_t *)&qword_100110EF0);
  }
  return result;
}

unint64_t sub_1000A6C18()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100110EF8;
  if (!qword_100110EF8)
  {
    v1 = sub_100006E54(&qword_100110ED0);
    sub_1000A6BD4();
    sub_100011054(&qword_100110F00, &qword_100110F08, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100110EF8);
  }
  return result;
}

uint64_t sub_1000A6C9C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) != 0)
    swift_retain(a2);
  return swift_retain(a1);
}

double sub_1000A6CC8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  double result;

  *(_QWORD *)&result = swift_release(a1).n128_u64[0];
  if ((a4 & 1) != 0)
    *(_QWORD *)&result = swift_release(a2).n128_u64[0];
  return result;
}

uint64_t sub_1000A6D00(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _TtC13GameOverlayUI20GameOverlayUIService *v11;
  _TtC13GameOverlayUI20GameOverlayUIService *v12;
  unint64_t v13;
  SEL v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  char v22;
  char v23;

  v3 = sub_100003304(&qword_100110F10);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_100003C28(a1, v7);
  v9 = sub_1000A6EAC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PlayerAvatar.CodingKeys, &type metadata for PlayerAvatar.CodingKeys, v9, v7, v8);
  if (v1)
  {
    sub_100004624(a1);
  }
  else
  {
    v23 = 0;
    v8 = KeyedDecodingContainer.decode(_:forKey:)(&v23, v3);
    v12 = v11;
    v22 = 1;
    v13 = sub_1000A6EF0();
    swift_bridgeObjectRetain(v12);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for PlayerAvatar.Overlay, &v22, v3, &type metadata for PlayerAvatar.Overlay, v13);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    sub_100004624(a1);
    swift_bridgeObjectRelease(v12, v14, v15, v16, v17, v18, v19, v20);
  }
  return v8;
}

unint64_t sub_1000A6EAC()
{
  unint64_t result;

  result = qword_100110F18;
  if (!qword_100110F18)
  {
    result = swift_getWitnessTable(&unk_1000CDDD8, &type metadata for PlayerAvatar.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100110F18);
  }
  return result;
}

unint64_t sub_1000A6EF0()
{
  unint64_t result;

  result = qword_100110F20;
  if (!qword_100110F20)
  {
    result = swift_getWitnessTable(&unk_1000CDBBC, &type metadata for PlayerAvatar.Overlay);
    atomic_store(result, (unint64_t *)&qword_100110F20);
  }
  return result;
}

unint64_t sub_1000A6F34()
{
  unint64_t result;

  result = qword_100110F30;
  if (!qword_100110F30)
  {
    result = swift_getWitnessTable(&unk_1000CDB94, &type metadata for PlayerAvatar.Overlay);
    atomic_store(result, (unint64_t *)&qword_100110F30);
  }
  return result;
}

unint64_t sub_1000A6F78()
{
  unint64_t result;

  result = qword_100110F38;
  if (!qword_100110F38)
  {
    result = swift_getWitnessTable(&unk_1000CDBE4, &type metadata for PlayerAvatar.Overlay);
    atomic_store(result, (unint64_t *)&qword_100110F38);
  }
  return result;
}

uint64_t _s13GameOverlayUI12PlayerAvatarV7OverlayOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000A7008 + 4 * byte_1000CDA45[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000A703C + 4 * asc_1000CDA40[v4]))();
}

uint64_t sub_1000A703C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A7044(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000A704CLL);
  return result;
}

uint64_t sub_1000A7058(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000A7060);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000A7064(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A706C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PlayerAvatar.CodingKeys()
{
  return &type metadata for PlayerAvatar.CodingKeys;
}

uint64_t sub_1000A7088()
{
  return sub_1000A6AE0(&qword_100110F40, &qword_100110F48, (void (*)(void))sub_1000A6ABC, (void (*)(void))sub_1000A6C18);
}

unint64_t sub_1000A70C0()
{
  unint64_t result;

  result = qword_100110F50;
  if (!qword_100110F50)
  {
    result = swift_getWitnessTable(&unk_1000CDDB0, &type metadata for PlayerAvatar.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100110F50);
  }
  return result;
}

unint64_t sub_1000A7108()
{
  unint64_t result;

  result = qword_100110F58;
  if (!qword_100110F58)
  {
    result = swift_getWitnessTable(&unk_1000CDD20, &type metadata for PlayerAvatar.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100110F58);
  }
  return result;
}

unint64_t sub_1000A7150()
{
  unint64_t result;

  result = qword_100110F60;
  if (!qword_100110F60)
  {
    result = swift_getWitnessTable(&unk_1000CDD48, &type metadata for PlayerAvatar.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100110F60);
  }
  return result;
}

uint64_t sub_1000A7194(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x6574616C706D6574 && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6574616C706D6574, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x79616C7265766FLL && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease(0xE700000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x79616C7265766FLL, 0xE700000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

void sub_1000A7284()
{
  id v0;
  id v1;

  v0 = objc_msgSend((id)objc_opt_self(CNAvatarImageRendererSettings), "defaultSettings");
  v1 = objc_msgSend(objc_allocWithZone((Class)CNAvatarImageRenderer), "initWithSettings:", v0);

  qword_100110F68 = (uint64_t)v1;
}

uint64_t sub_1000A72EC()
{
  uint64_t v0;
  char v2;
  char v3;

  v0 = type metadata accessor for URLExpression(0);
  sub_100004E4C(v0, qword_100110F70);
  sub_100004E8C(v0, (uint64_t)qword_100110F70);
  v3 = 2;
  v2 = 2;
  return URLExpression.init(schemePattern:hostPattern:pathPattern:queryPattern:)("monogram", 8, 2, "", 0, 2, "", 0, v2, "backgroundColorIndex?=([0-9]*)", 30, v3);
}

uint64_t PlayerMonogramProtocol.fetch(contentsOf:)(uint64_t a1)
{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  _BYTE v8[16];
  uint64_t v9;

  v2 = sub_100003304(&qword_100110A90);
  v3 = __chkstk_darwin(v2);
  v5 = &v8[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = a1;
  (*(void (**)(_BYTE *, _QWORD, __n128))(v6 + 104))(v5, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v3);
  return AsyncStream.init(_:bufferingPolicy:_:)(&type metadata for Image, v5, sub_1000A8648, v8, &type metadata for Image);
}

void sub_1000A7450(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  id v10;
  unint64_t v11;
  _TtC13GameOverlayUI20GameOverlayUIService *v12;
  SEL v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  const char *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  _TtC13GameOverlayUI20GameOverlayUIService *v30;
  NSString v31;
  SEL v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  id v43;
  void **aBlock;
  uint64_t v45;
  void (*v46)(uint64_t, void *);
  void *v47;
  void (*v48)(void *);
  uint64_t v49;

  v2 = sub_100003304((uint64_t *)&unk_100110AB8);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = sub_100003304(&qword_100110F88);
  v6 = MediaArtwork.ProtocolRequest.size.getter(v5);
  v8 = v7;
  v9 = MediaArtwork.ProtocolRequest.scale.getter(v5);
  v10 = objc_msgSend((id)objc_opt_self(PRMonogramColor), "availableColors");
  v11 = sub_1000A87C0();
  v12 = (_TtC13GameOverlayUI20GameOverlayUIService *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v10, v11);

  MediaArtwork.ProtocolRequest.matchResult.getter(&aBlock);
  swift_bridgeObjectRelease((_TtC13GameOverlayUI20GameOverlayUIService *)v45, v13, v14, v15, v16, v17, v18, v19);
  if (((unint64_t)v12 & 0xC000000000000001) == 0)
  {
    if (((unint64_t)v46 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if ((unint64_t)v46 < *(_QWORD *)(((unint64_t)v12 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v20 = *((id *)&v12[2].super.isa + (_QWORD)v46);
      goto LABEL_5;
    }
    __break(1u);
    goto LABEL_10;
  }
  v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v46, v12);
LABEL_5:
  v28 = v20;
  swift_bridgeObjectRelease(v12, v21, v22, v23, v24, v25, v26, v27);
  v12 = (_TtC13GameOverlayUI20GameOverlayUIService *)objc_msgSend((id)objc_opt_self(CNAvatarImageRenderingScope), "scopeWithPointSize:scale:strokeWidth:strokeColor:rightToLeft:style:color:", 0, 0, 0, v28, v6, v8, v9, 0.0);

  if (qword_10010BBC0 != -1)
LABEL_10:
    swift_once(&qword_10010BBC0, sub_1000A7284);
  v29 = (void *)qword_100110F68;
  MediaArtwork.ProtocolRequest.matchResult.getter(&aBlock);
  v30 = (_TtC13GameOverlayUI20GameOverlayUIService *)v45;
  v31 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v30, v32, v33, v34, v35, v36, v37, v38);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  v39 = *(unsigned __int8 *)(v3 + 80);
  v40 = (v39 + 16) & ~v39;
  v41 = swift_allocObject(&unk_100101988, v40 + v4, v39 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v41 + v40, (char *)&aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  v48 = sub_1000A8860;
  v49 = v41;
  aBlock = _NSConcreteStackBlock;
  v45 = 1107296256;
  v46 = sub_10005DD08;
  v47 = &unk_1001019A0;
  v42 = _Block_copy(&aBlock);
  v43 = objc_msgSend(v29, "renderMonogramForString:scope:imageHandler:", v31, v12, v42, swift_release(v49).n128_f64[0]);
  _Block_release(v42);
  swift_unknownObjectRelease(v12);
  swift_unknownObjectRelease(v43);

}

void sub_1000A7724(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = sub_100003304(&qword_100110AA8);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = Image.init(uiImage:)(a1);
  v6 = sub_100003304((uint64_t *)&unk_100110AB8);
  AsyncStream.Continuation.yield(_:)(&v8, v6);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  AsyncStream.Continuation.finish()();
}

uint64_t sub_1000A77DC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = _s13GameOverlayUI22PlayerMonogramProtocolV5matchyAC15MatchedResourceVSg10Foundation3URLVF_0(a1);
  *a2 = result;
  a2[1] = v4;
  a2[2] = v5;
  return result;
}

uint64_t sub_1000A7804(uint64_t a1)
{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  _BYTE v8[16];
  uint64_t v9;

  v2 = sub_100003304(&qword_100110A90);
  v3 = __chkstk_darwin(v2);
  v5 = &v8[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = a1;
  (*(void (**)(_BYTE *, _QWORD, __n128))(v6 + 104))(v5, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v3);
  return AsyncStream.init(_:bufferingPolicy:_:)(&type metadata for Image, v5, sub_1000A88B8, v8, &type metadata for Image);
}

unsigned __int8 *sub_1000A78B0(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return sub_1000A79A8(a1, a2, a3);
}

unsigned __int8 *sub_1000A78C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  const char *v10;
  unint64_t v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  unsigned __int8 *v18;
  SEL v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  uint64_t v27;
  uint64_t v28;

  v27 = a1;
  v28 = a2;
  swift_bridgeObjectRetain(a2);
  v4 = String.init<A>(_:)(&v27, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  v6 = v4;
  v7 = v5;
  if ((v5 & 0x1000000000000000) == 0)
  {
    if ((v5 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v9 = HIBYTE(v7) & 0xF;
    v27 = v6;
    v28 = v7 & 0xFFFFFFFFFFFFFFLL;
    v8 = (unsigned __int8 *)&v27;
    goto LABEL_7;
  }
  v6 = sub_1000A7C24(v4, v5);
  v11 = (unint64_t)v10;
  swift_bridgeObjectRelease((_TtC13GameOverlayUI20GameOverlayUIService *)v7, v10, v12, v13, v14, v15, v16, v17);
  v7 = v11;
  if ((v11 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v6 & 0x1000000000000000) != 0)
  {
    v8 = (unsigned __int8 *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v9 = v6 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v6, v7);
  }
LABEL_7:
  v18 = sub_1000A79A8(v8, v9, a3);
  swift_bridgeObjectRelease((_TtC13GameOverlayUI20GameOverlayUIService *)v7, v19, v20, v21, v22, v23, v24, v25);
  return v18;
}

unsigned __int8 *sub_1000A79A8(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  uint64_t v25;
  unsigned int v26;
  char v27;
  uint64_t v28;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8)
                    return 0;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
                return 0;
              v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12)))
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      v22 = a3 + 48;
      v23 = a3 + 55;
      v24 = a3 + 87;
      if (a3 > 10)
      {
        v22 = 58;
      }
      else
      {
        v24 = 97;
        v23 = 65;
      }
      if (result)
      {
        v25 = 0;
        do
        {
          v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24)
                return 0;
              v27 = -87;
            }
            else
            {
              v27 = -55;
            }
          }
          else
          {
            v27 = -48;
          }
          v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63)
            return 0;
          v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27)))
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  v14 = a2 - 1;
  if (a2 == 1)
    return 0;
  v15 = a3 + 48;
  v16 = a3 + 55;
  v17 = a3 + 87;
  if (a3 > 10)
  {
    v15 = 58;
  }
  else
  {
    v17 = 97;
    v16 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v18 = result + 1;
  do
  {
    v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17)
          return 0;
        v20 = -87;
      }
      else
      {
        v20 = -55;
      }
    }
    else
    {
      v20 = -48;
    }
    v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
      return 0;
    v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20)))
      return 0;
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

uint64_t sub_1000A7C24(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _TtC13GameOverlayUI20GameOverlayUIService *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  SEL v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1;
  v3 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v3 = 11;
  v4 = String.subscript.getter(15, v3 | (v2 << 16), a1, a2);
  v6 = (_TtC13GameOverlayUI20GameOverlayUIService *)v5;
  v9 = sub_1000A7CA0(v4, v7, v8, v5);
  swift_bridgeObjectRelease(v6, v10, v11, v12, v13, v14, v15, v16);
  return v9;
}

uint64_t sub_1000A7CA0(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  _TtC13GameOverlayUI20GameOverlayUIService *v13;
  SEL v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  _QWORD v22[5];

  v5 = a3;
  if ((a4 & 0x1000000000000000) != 0)
  {
    v12 = sub_1000A7DE4(a1, a2, a3, a4);
    if (v12)
    {
      v9 = v12;
      v8 = (unint64_t)sub_100032124(v12, 0);
      v5 = sub_1000A7ED0((unint64_t)v22, v8 + 32, v9, a1, a2, v5, a4);
      v13 = (_TtC13GameOverlayUI20GameOverlayUIService *)v22[3];
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRelease(v13, v14, v15, v16, v17, v18, v19, v20);
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }
    else
    {
      v8 = (unint64_t)&_swiftEmptyArrayStorage;
    }
    v21 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(_QWORD *)(v8 + 16));
    swift_release(v8);
    return v21;
  }
  else
  {
    v8 = a1 >> 16;
    v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
      {
        v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
LABEL_11:
      v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10)
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      goto LABEL_5;
    }
    v22[0] = a3;
    v22[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v22 + v8, v9 - v8);
  }
}

unint64_t sub_1000A7DE4(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_100032188(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_100032188(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)(v7, a2, a3, a4);
  }
  __break(1u);
  return result;
}

unint64_t sub_1000A7ED0(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = sub_100032188(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = _StringObject.sharedUTF8.getter(a6, a7);
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = sub_100032188(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = String.UTF8View._foreignIndex(after:)(v12, a6, a7);
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_1000A80E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  char *v6;
  uint64_t matched;
  _TtC13GameOverlayUI20GameOverlayUIService *v8;
  _TtC13GameOverlayUI20GameOverlayUIService *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t result;
  unint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  unsigned int v48;
  uint64_t v49;
  _QWORD v51[3];

  v2 = type metadata accessor for QueryExpression.MatchResult(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v51[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  matched = URLExpression.MatchResult.host.getter(v4);
  v9 = v8;
  swift_bridgeObjectRelease(v8, (SEL)v8, v10, v11, v12, v13, v14, v15);
  v17 = ((unint64_t)v9 >> 56) & 0xF;
  if (((unint64_t)v9 & 0x2000000000000000) == 0)
    v17 = matched & 0xFFFFFFFFFFFFLL;
  if (!v17)
  {
    v18 = 0;
LABEL_54:
    v46 = type metadata accessor for URLExpression.MatchResult(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 8))(a1, v46);
    return v18;
  }
  v18 = URLExpression.MatchResult.host.getter(v16);
  URLExpression.MatchResult.query.getter();
  v19 = QueryExpression.MatchResult.subscript.getter(0xD000000000000014, 0x80000001000D1230);
  v21 = v20;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  if (v21)
    result = v19;
  else
    result = 48;
  if (v21)
    v29 = v21;
  else
    v29 = 0xE100000000000000;
  v30 = HIBYTE(v29) & 0xF;
  v31 = (const char *)(result & 0xFFFFFFFFFFFFLL);
  if ((v29 & 0x2000000000000000) != 0)
    v32 = HIBYTE(v29) & 0xF;
  else
    v32 = result & 0xFFFFFFFFFFFFLL;
  if (!v32)
  {
LABEL_53:
    swift_bridgeObjectRelease((_TtC13GameOverlayUI20GameOverlayUIService *)v29, v31, v22, v23, v24, v25, v26, v27);
    goto LABEL_54;
  }
  if ((v29 & 0x1000000000000000) != 0)
  {
    sub_1000A78C4(result, v29, 10);
    goto LABEL_53;
  }
  if ((v29 & 0x2000000000000000) == 0)
  {
    if ((result & 0x1000000000000000) != 0)
      v33 = (unsigned __int8 *)((v29 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v33 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(result, v29);
    sub_1000A79A8(v33, (uint64_t)v31, 10);
    goto LABEL_53;
  }
  v51[0] = result;
  v51[1] = v29 & 0xFFFFFFFFFFFFFFLL;
  if (result == 43)
  {
    if (v30)
    {
      if (v30 != 1
        && (BYTE1(result) - 48) <= 9u
        && v30 != 2
        && (BYTE2(result) - 48) <= 9u)
      {
        v34 = 10 * (BYTE1(result) - 48) + (BYTE2(result) - 48);
        v35 = v30 - 3;
        if (v35)
        {
          v36 = (unsigned __int8 *)v51 + 3;
          do
          {
            v37 = *v36 - 48;
            if (v37 > 9)
              break;
            v38 = 10 * v34;
            if ((unsigned __int128)(v34 * (__int128)10) >> 64 != (10 * v34) >> 63)
              break;
            v34 = v38 + v37;
            if (__OFADD__(v38, v37))
              break;
            ++v36;
            --v35;
          }
          while (v35);
        }
      }
      goto LABEL_53;
    }
  }
  else
  {
    if (result != 45)
    {
      if (v30)
      {
        if ((result - 48) <= 9u && v30 != 1 && (BYTE1(result) - 48) <= 9u)
        {
          v39 = 10 * (result - 48) + (BYTE1(result) - 48);
          v40 = v30 - 2;
          if (v40)
          {
            v41 = (unsigned __int8 *)v51 + 2;
            do
            {
              v42 = *v41 - 48;
              if (v42 > 9)
                break;
              v43 = 10 * v39;
              if ((unsigned __int128)(v39 * (__int128)10) >> 64 != (10 * v39) >> 63)
                break;
              v39 = v43 + v42;
              if (__OFADD__(v43, v42))
                break;
              ++v41;
              --v40;
            }
            while (v40);
          }
        }
      }
      goto LABEL_53;
    }
    if (v30)
    {
      if (v30 != 1
        && (BYTE1(result) - 48) <= 9u
        && v30 != 2
        && (BYTE2(result) - 48) <= 9u)
      {
        v44 = -10 * (BYTE1(result) - 48) - (BYTE2(result) - 48);
        v45 = v30 - 3;
        if (v45)
        {
          v47 = (unsigned __int8 *)v51 + 3;
          do
          {
            v48 = *v47 - 48;
            if (v48 > 9)
              break;
            v49 = 10 * v44;
            if ((unsigned __int128)(v44 * (__int128)10) >> 64 != (10 * v44) >> 63)
              break;
            v44 = v49 - v48;
            if (__OFSUB__(v49, v48))
              break;
            ++v47;
            --v45;
          }
          while (v45);
        }
      }
      goto LABEL_53;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t _s13GameOverlayUI22PlayerMonogramProtocolV5matchyAC15MatchedResourceVSg10Foundation3URLVF_0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t matched;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v2 = sub_100003304(&qword_100110B38);
  __chkstk_darwin(v2);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  matched = type metadata accessor for URLExpression.MatchResult(0);
  v6 = *(_QWORD *)(matched - 8);
  __chkstk_darwin(matched);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v15 - v10;
  if (qword_10010BBC8 != -1)
    swift_once(&qword_10010BBC8, sub_1000A72EC);
  v12 = type metadata accessor for URLExpression(0);
  sub_100004E8C(v12, (uint64_t)qword_100110F70);
  URLExpression.match(_:)(a1);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, matched) == 1)
  {
    sub_10009F9F0((uint64_t)v4);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v11, v4, matched);
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v11, matched);
    v13 = sub_1000A80E0((uint64_t)v8);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, matched);
  }
  return v13;
}

void sub_1000A8648(uint64_t a1)
{
  sub_1000A7450(a1);
}

ValueMetadata *type metadata accessor for PlayerMonogramProtocol()
{
  return &type metadata for PlayerMonogramProtocol;
}

_QWORD *sub_1000A8664(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain(v3);
  return a1;
}

_QWORD *assignWithCopy for PlayerMonogramProtocol.MatchedResource(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  return a1;
}

_QWORD *assignWithTake for PlayerMonogramProtocol.MatchedResource(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for PlayerMonogramProtocol.MatchedResource(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PlayerMonogramProtocol.MatchedResource(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PlayerMonogramProtocol.MatchedResource()
{
  return &type metadata for PlayerMonogramProtocol.MatchedResource;
}

unint64_t sub_1000A87C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010ECC0;
  if (!qword_10010ECC0)
  {
    v1 = objc_opt_self(PRMonogramColor);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10010ECC0);
  }
  return result;
}

uint64_t sub_1000A87FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_100003304((uint64_t *)&unk_100110AB8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_1000A8860(void *a1)
{
  sub_100003304((uint64_t *)&unk_100110AB8);
  sub_1000A7724(a1);
}

uint64_t sub_1000A88A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_1000A88B0(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

void sub_1000A88CC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  id v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;

  v5 = type metadata accessor for GameOverlayUIConfig.ServiceKind(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (void *)objc_opt_self(BSServiceConnection);
  v10 = a1;
  v11 = sub_1000B4990(objc_msgSend(v9, "currentContext"));
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for GameOverlayUIConfig.ServiceKind.multiplayer(_:), v5);
  sub_100056174((uint64_t)v8, a3, v11);
  v12 = swift_release(v11);
  (*(void (**)(char *, uint64_t, __n128))(v6 + 8))(v8, v5, v12);

}

uint64_t sub_1000A89B8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  KeyPath = swift_getKeyPath(&unk_1000CE070);
  v8[0] = v1;
  v4 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v8, KeyPath, v4);
  swift_release(KeyPath);
  v5 = v1 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__anchoring;
  swift_beginAccess(v1 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__anchoring, v8, 0, 0);
  v6 = type metadata accessor for AccessPointAnchoring(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, v5, v6);
}

uint64_t sub_1000A8A7C()
{
  return sub_1000A8BCC((uint64_t)&unk_1000CE0C0, &OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__remoteTarget);
}

uint64_t sub_1000A8A90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v1 = v0;
  KeyPath = swift_getKeyPath(&unk_1000CE098);
  v6 = v0;
  v3 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v3);
  swift_release(KeyPath);
  v4 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain(*(_QWORD *)(v1 + 24));
  return v4;
}

void *sub_1000A8B24()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_1000CE138);
  v6 = v0;
  v2 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = *(void **)(v0 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__gkGame);
  v4 = v3;
  return v3;
}

uint64_t sub_1000A8BB8()
{
  return sub_1000A8BCC((uint64_t)&unk_1000CE110, &OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__remoteAlertScene);
}

uint64_t sub_1000A8BCC(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath(a1);
  v7 = v2;
  v5 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v5);
  swift_release(KeyPath);
  return swift_unknownObjectWeakLoadStrong(v2 + *a2);
}

uint64_t sub_1000A8C54()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1000CE0E8);
  v4 = v0;
  v2 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(_QWORD *)(v0 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__hideCount);
}

uint64_t sub_1000A8CE0()
{
  return sub_1000A8EB0((uint64_t)&unk_1000CE188, &OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__didReturnToForeground);
}

uint64_t sub_1000A8CF4()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1000CE1B0);
  v4 = v0;
  v2 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__useCase);
}

uint64_t sub_1000A8D80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000A92C0(a1, a2, a3);
}

uint64_t sub_1000A8D94(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = a1 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__anchoring;
  swift_beginAccess(a1 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__anchoring, v6, 33, 0);
  v4 = type metadata accessor for AccessPointAnchoring(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(v3, a2, v4);
  return swift_endAccess(v6);
}

uint64_t sub_1000A8E10(uint64_t result, char a2)
{
  *(_BYTE *)(result + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__useCase) = a2;
  return result;
}

uint64_t sub_1000A8E20()
{
  return sub_1000A8EB0((uint64_t)&unk_1000CE048, &OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__active);
}

uint64_t sub_1000A8E34(uint64_t result, char a2)
{
  *(_BYTE *)(result + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__active) = a2;
  return result;
}

uint64_t sub_1000A8E44(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__hideCount) = a2;
  return result;
}

void sub_1000A8E54(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__gkGame);
  *(_QWORD *)(a1 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__gkGame) = a2;
  v3 = a2;

}

uint64_t sub_1000A8E8C(uint64_t result, char a2)
{
  *(_BYTE *)(result + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__didReturnToForeground) = a2;
  return result;
}

uint64_t sub_1000A8E9C()
{
  return sub_1000A8EB0((uint64_t)&unk_1000CE160, &OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__newToGameCenter);
}

uint64_t sub_1000A8EB0(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath(a1);
  v7 = v2;
  v5 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v5);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v2 + *a2);
}

uint64_t sub_1000A8F34(uint64_t result, char a2)
{
  *(_BYTE *)(result + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__newToGameCenter) = a2;
  return result;
}

uint64_t sub_1000A8F44(uint64_t a1)
{
  return swift_unknownObjectWeakAssign(a1 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__remoteAlertScene);
}

uint64_t sub_1000A8F64(uint64_t a1)
{
  return swift_unknownObjectWeakAssign(a1 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__remoteTarget);
}

uint64_t sub_1000A8F84(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6, char a7)
{
  uint64_t v7;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = 0;
  *(_BYTE *)(v7 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__active) = 1;
  *(_QWORD *)(v7 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__gkGame) = 0;
  swift_unknownObjectWeakInit(v7 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__remoteAlertScene, 0);
  v15 = swift_unknownObjectWeakInit(v7 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__remoteTarget, 0);
  ObservationRegistrar.init()(v15);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + 24));
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  v16 = v7 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__anchoring;
  v17 = type metadata accessor for AccessPointAnchoring(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v16, a3, v17);
  *(_BYTE *)(v7 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__useCase) = a4;
  *(_QWORD *)(v7 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__hideCount) = a5;
  *(_BYTE *)(v7 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__didReturnToForeground) = a6;
  *(_BYTE *)(v7 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__newToGameCenter) = a7;
  return v7;
}

uint64_t sub_1000A9094(uint64_t a1, const char *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  _TtC13GameOverlayUI20GameOverlayUIService **v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;

  swift_bridgeObjectRelease(v8[3], a2, a3, a4, a5, a6, a7, a8);
  v9 = (char *)v8 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__anchoring;
  v10 = type metadata accessor for AccessPointAnchoring(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  objc_release(*(_TtC13GameOverlayUI20GameOverlayUIService **)((char *)v8
                                                             + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__gkGame));
  swift_unknownObjectWeakDestroy((char *)v8 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__remoteAlertScene, v11);
  sub_10009549C((uint64_t)v8 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__remoteTarget, v12);
  v13 = (char *)v8 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext___observationRegistrar;
  v14 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  return swift_deallocClassInstance(v8, LODWORD((*v8)[3].super.isa), WORD2((*v8)[3].super.isa));
}

uint64_t sub_1000A9144()
{
  return type metadata accessor for RemoteAlertAccessPointContext(0);
}

uint64_t type metadata accessor for RemoteAlertAccessPointContext(uint64_t a1)
{
  return sub_100010C88(a1, qword_100111008, (uint64_t)&nominal type descriptor for RemoteAlertAccessPointContext);
}

uint64_t sub_1000A9160(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[11];

  v5[0] = &unk_1000CDF40;
  result = type metadata accessor for AccessPointAnchoring(319);
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    v5[2] = &unk_1000CDF58;
    v5[3] = &unk_1000CDF70;
    v5[4] = (char *)&value witness table for Builtin.Int64 + 64;
    v5[5] = &unk_1000CDF88;
    v5[6] = &unk_1000CDF70;
    v5[7] = &unk_1000CDF70;
    v5[8] = &unk_1000CDFA0;
    v5[9] = &unk_1000CDFA0;
    result = type metadata accessor for ObservationRegistrar(319);
    if (v4 <= 0x3F)
    {
      v5[10] = *(_QWORD *)(result - 8) + 64;
      return swift_updateClassMetadata2(a1, 256, 11, v5, a1 + 80);
    }
  }
  return result;
}

uint64_t sub_1000A922C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v1 = v0;
  KeyPath = swift_getKeyPath(&unk_1000CE200);
  v6 = v0;
  v3 = sub_1000035B4(&qword_10010E3A0, type metadata accessor for RemoteAlertDashboardContext, (uint64_t)&unk_1000CDFEC);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v3);
  swift_release(KeyPath);
  v4 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain(*(_QWORD *)(v1 + 24));
  return v4;
}

uint64_t sub_1000A92C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = a3;
  swift_bridgeObjectRetain(a3);
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_1000A92F8()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1000CE1D8);
  v4 = v0;
  v2 = sub_1000035B4(&qword_10010E3A0, type metadata accessor for RemoteAlertDashboardContext, (uint64_t)&unk_1000CDFEC);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return swift_unknownObjectWeakLoadStrong(v0 + 32);
}

uint64_t sub_1000A9380(uint64_t a1)
{
  return swift_unknownObjectWeakAssign(a1 + 32);
}

uint64_t sub_1000A9398(uint64_t a1, const char *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  _TtC13GameOverlayUI20GameOverlayUIService **v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;

  swift_bridgeObjectRelease(v8[3], a2, a3, a4, a5, a6, a7, a8);
  sub_10009549C((uint64_t)(v8 + 4), v9);
  v10 = (char *)v8 + OBJC_IVAR____TtC13GameOverlayUI27RemoteAlertDashboardContext___observationRegistrar;
  v11 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  return swift_deallocClassInstance(v8, LODWORD((*v8)[3].super.isa), WORD2((*v8)[3].super.isa));
}

uint64_t sub_1000A93F8()
{
  return type metadata accessor for RemoteAlertDashboardContext(0);
}

uint64_t type metadata accessor for RemoteAlertDashboardContext(uint64_t a1)
{
  return sub_100010C88(a1, qword_100111110, (uint64_t)&nominal type descriptor for RemoteAlertDashboardContext);
}

uint64_t sub_1000A9414(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_1000CDF40;
  v4[1] = &unk_1000CDFA0;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

char *DashboardRequest.__allocating_init(initialState:)(uint64_t a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return DashboardRequest.init(initialState:)(a1);
}

uint64_t sub_1000A9524(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;

  if (*(_QWORD *)(a3 + 16) && (v4 = sub_1000AAE54(a1, a2), (v5 & 1) != 0))
    return swift_unknownObjectRetain(*(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v4), v5);
  else
    return 0;
}

char *DashboardRequest.init(initialState:)(uint64_t a1)
{
  _BYTE *v1;
  _BYTE *v2;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  objc_class *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  void *v123;
  int v124;
  uint64_t v125;
  unint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  void *v134;
  int v135;
  uint64_t v136;
  unint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  void *v145;
  int v146;
  uint64_t v147;
  unint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  void *v165;
  int v166;
  uint64_t v167;
  unint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  uint64_t v176;
  unint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  unint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  uint64_t v194;
  unint64_t v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  uint64_t v203;
  unint64_t v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  id v223;
  void *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  char v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  int v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  int v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  int v250;
  uint64_t v251;
  unint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  int v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t *v262;
  uint64_t *v263;
  uint64_t v264;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  int v270;
  uint64_t v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  char v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  int v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  char v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  int v291;
  uint64_t v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  int v299;
  uint64_t v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  int v307;
  uint64_t v308;
  unint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  int v315;
  uint64_t v316;
  unint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  char v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  int v327;
  uint64_t v328;
  unint64_t v329;
  uint64_t v330;
  uint64_t v331;
  _QWORD *v332;
  _QWORD *v333;
  uint64_t *v334;
  uint64_t *v335;
  char *v336;
  uint64_t v337;
  uint64_t v338;
  unint64_t v339;
  void *v340;
  objc_super v341;

  v2 = v1;
  *(_QWORD *)&v2[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_statusBarHeight] = 0;
  *(_DWORD *)&v2[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_hostPID] = 0;
  *(_QWORD *)&v2[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_currentGame] = 0;
  *(_QWORD *)&v2[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_localPlayer] = 0;
  v2[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_shouldLayoutRTL] = 0;
  *(_QWORD *)&v2[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_preferredLocalizations] = &_swiftEmptyArrayStorage;
  *(_QWORD *)&v2[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_viewState] = -1;
  *(_QWORD *)&v2[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_leaderboardTimeScope] = 2;
  *(_QWORD *)&v2[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_leaderboardPlayerScope] = 1;
  v2[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_shouldShowPlayForChallenge] = 0;
  v2[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_shouldShowPlayForTurnBasedMatch] = 0;
  v2[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_shouldShowQuitForTurnBasedMatch] = 0;
  v2[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_isArcade] = 0;
  v4 = &v2[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_launchContext];
  *v4 = 0;
  v4[1] = 0;
  v5 = &v2[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_leaderboardIdentifier];
  *v5 = 0;
  v5[1] = 0;
  v6 = &v2[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_gameBundleID];
  *v6 = 0;
  v6[1] = 0;
  *(_QWORD *)&v2[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_leaderboardInternal] = 0;
  v7 = &v2[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_leaderboardTitle];
  *v7 = 0;
  v7[1] = 0;
  v8 = &v2[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_achievementIdentifier];
  *v8 = 0;
  v8[1] = 0;
  v9 = &v2[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_activityIdentifier];
  *v9 = 0;
  v9[1] = 0;
  v10 = &v2[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_playerIdentifier];
  *v10 = 0;
  v10[1] = 0;
  v11 = &v2[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_playerAlias];
  v12 = (objc_class *)type metadata accessor for DashboardRequest();
  *v11 = 0;
  v11[1] = 0;
  v341.receiver = v2;
  v341.super_class = v12;
  v13 = (char *)objc_msgSendSuper2(&v341, "init");
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(GKExtensionItemStatusBarHeightKey);
  v16 = v15;
  if (!*(_QWORD *)(a1 + 16))
  {
    v23 = v13;
    goto LABEL_6;
  }
  v17 = v14;
  v18 = v13;
  v19 = sub_1000AAE54(v17, v16);
  if ((v20 & 1) == 0)
  {
LABEL_6:
    swift_bridgeObjectRelease(v16);
    goto LABEL_7;
  }
  v21 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v19);
  swift_unknownObjectRetain(v21, v20);
  swift_bridgeObjectRelease(v16);
  v338 = v21;
  if ((swift_dynamicCast(&v340, &v338, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for CGFloat, 6) & 1) == 0)
  {
LABEL_7:
    v22 = 0;
    goto LABEL_8;
  }
  v22 = v340;
LABEL_8:
  *(_QWORD *)&v13[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_statusBarHeight] = v22;
  v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(GKExtensionItemHostPIDKey);
  v26 = v25;
  if (!*(_QWORD *)(a1 + 16) || (v27 = sub_1000AAE54(v24, v25), (v28 & 1) == 0))
  {
    swift_bridgeObjectRelease(v26);
    goto LABEL_13;
  }
  v29 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v27);
  swift_unknownObjectRetain(v29, v28);
  swift_bridgeObjectRelease(v26);
  v338 = v29;
  if ((swift_dynamicCast(&v340, &v338, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for Int32, 6) & 1) == 0)
  {
LABEL_13:
    v30 = 0;
    goto LABEL_14;
  }
  v30 = (int)v340;
LABEL_14:
  *(_DWORD *)&v13[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_hostPID] = v30;
  v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(GKExtensionItemCurrentGameKey);
  v33 = v32;
  if (!*(_QWORD *)(a1 + 16) || (v34 = sub_1000AAE54(v31, v32), (v35 & 1) == 0))
  {
    swift_bridgeObjectRelease(v33);
    goto LABEL_19;
  }
  v36 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v34);
  swift_unknownObjectRetain(v36, v35);
  swift_bridgeObjectRelease(v33);
  v37 = objc_opt_self(GKGame);
  v38 = swift_dynamicCastObjCClass(v36, v37);
  if (!v38)
  {
    swift_unknownObjectRelease(v36);
LABEL_19:
    v38 = 0;
  }
  v39 = OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_currentGame;
  v40 = *(void **)&v13[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_currentGame];
  *(_QWORD *)&v13[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_currentGame] = v38;

  v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(GKExtensionItemLocalPlayerKey);
  v43 = v42;
  if (!*(_QWORD *)(a1 + 16) || (v44 = sub_1000AAE54(v41, v42), (v45 & 1) == 0))
  {
    swift_bridgeObjectRelease(v43);
    goto LABEL_25;
  }
  v46 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v44);
  swift_unknownObjectRetain(v46, v45);
  swift_bridgeObjectRelease(v43);
  v47 = objc_opt_self(GKLocalPlayer);
  v48 = swift_dynamicCastObjCClass(v46, v47);
  if (!v48)
  {
    swift_unknownObjectRelease(v46);
LABEL_25:
    v48 = 0;
  }
  v49 = *(void **)&v13[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_localPlayer];
  *(_QWORD *)&v13[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_localPlayer] = v48;

  v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(GKExtensionItemRTLKey);
  v52 = v51;
  if (!*(_QWORD *)(a1 + 16) || (v53 = sub_1000AAE54(v50, v51), (v54 & 1) == 0))
  {
    swift_bridgeObjectRelease(v52);
    goto LABEL_31;
  }
  v55 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v53);
  swift_unknownObjectRetain(v55, v54);
  swift_bridgeObjectRelease(v52);
  v338 = v55;
  if ((swift_dynamicCast(&v340, &v338, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for Bool, 6) & 1) == 0)
  {
LABEL_31:
    v56 = 0;
    goto LABEL_32;
  }
  v56 = (char)v340;
LABEL_32:
  v13[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_shouldLayoutRTL] = v56;
  v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(GKExtensionItemLocalizationsKey);
  v59 = v58;
  if (!*(_QWORD *)(a1 + 16) || (v60 = sub_1000AAE54(v57, v58), (v61 & 1) == 0))
  {
    swift_bridgeObjectRelease(v59);
    goto LABEL_37;
  }
  v62 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v60);
  swift_unknownObjectRetain(v62, v61);
  swift_bridgeObjectRelease(v59);
  v338 = v62;
  v63 = sub_100003304(&qword_100111258);
  if ((swift_dynamicCast(&v340, &v338, (char *)&type metadata for Swift.AnyObject + 8, v63, 6) & 1) == 0)
  {
LABEL_37:
    v64 = &_swiftEmptyArrayStorage;
    goto LABEL_38;
  }
  v64 = v340;
LABEL_38:
  v65 = *(_QWORD *)&v13[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_preferredLocalizations];
  *(_QWORD *)&v13[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_preferredLocalizations] = v64;
  swift_bridgeObjectRelease(v65);
  v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(GKExtensionItemDashboardViewState);
  v68 = v67;
  if (!*(_QWORD *)(a1 + 16) || (v69 = sub_1000AAE54(v66, v67), (v70 & 1) == 0))
  {
    swift_bridgeObjectRelease(v68);
    goto LABEL_43;
  }
  v71 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v69);
  swift_unknownObjectRetain(v71, v70);
  swift_bridgeObjectRelease(v68);
  v338 = v71;
  if ((swift_dynamicCast(&v340, &v338, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for Int, 6) & 1) == 0)
  {
LABEL_43:
    v72 = -1;
    goto LABEL_44;
  }
  v72 = (uint64_t)v340;
LABEL_44:
  v73 = OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_viewState;
  *(_QWORD *)&v13[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_viewState] = v72;
  v74 = static String._unconditionallyBridgeFromObjectiveC(_:)(GKExtensionItemDashboardTimeScope);
  v76 = v75;
  v337 = v73;
  if (!*(_QWORD *)(a1 + 16) || (v77 = sub_1000AAE54(v74, v75), (v78 & 1) == 0))
  {
    swift_bridgeObjectRelease(v76);
    goto LABEL_49;
  }
  v79 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v77);
  swift_unknownObjectRetain(v79, v78);
  swift_bridgeObjectRelease(v76);
  v338 = v79;
  if ((swift_dynamicCast(&v340, &v338, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for Int, 6) & 1) == 0)
  {
LABEL_49:
    v80 = -1;
    goto LABEL_50;
  }
  v80 = (uint64_t)v340;
LABEL_50:
  v81 = OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_leaderboardTimeScope;
  *(_QWORD *)&v13[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_leaderboardTimeScope] = v80;
  v82 = static String._unconditionallyBridgeFromObjectiveC(_:)(GKExtensionItemDashboardPlayerScope);
  v84 = v83;
  if (!*(_QWORD *)(a1 + 16) || (v85 = sub_1000AAE54(v82, v83), (v86 & 1) == 0))
  {
    swift_bridgeObjectRelease(v84);
    goto LABEL_55;
  }
  v87 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v85);
  swift_unknownObjectRetain(v87, v86);
  swift_bridgeObjectRelease(v84);
  v338 = v87;
  if ((swift_dynamicCast(&v340, &v338, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for Int, 6) & 1) == 0)
  {
LABEL_55:
    v88 = -1;
    goto LABEL_56;
  }
  v88 = (uint64_t)v340;
LABEL_56:
  v89 = OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_leaderboardPlayerScope;
  *(_QWORD *)&v13[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_leaderboardPlayerScope] = v88;
  v90 = static String._unconditionallyBridgeFromObjectiveC(_:)(GKExtensionItemDashboardShowPlayForChallenge);
  v92 = v91;
  if (!*(_QWORD *)(a1 + 16) || (v93 = sub_1000AAE54(v90, v91), (v94 & 1) == 0))
  {
    swift_bridgeObjectRelease(v92);
    goto LABEL_61;
  }
  v95 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v93);
  swift_unknownObjectRetain(v95, v94);
  swift_bridgeObjectRelease(v92);
  v338 = v95;
  if ((swift_dynamicCast(&v340, &v338, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for Bool, 6) & 1) == 0)
  {
LABEL_61:
    v96 = 0;
    goto LABEL_62;
  }
  v96 = (char)v340;
LABEL_62:
  v13[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_shouldShowPlayForChallenge] = v96;
  v97 = static String._unconditionallyBridgeFromObjectiveC(_:)(GKExtensionItemMatchesShowPlayForMatch);
  v99 = v98;
  if (!*(_QWORD *)(a1 + 16) || (v100 = sub_1000AAE54(v97, v98), (v101 & 1) == 0))
  {
    swift_bridgeObjectRelease(v99);
    goto LABEL_67;
  }
  v102 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v100);
  swift_unknownObjectRetain(v102, v101);
  swift_bridgeObjectRelease(v99);
  v338 = v102;
  if ((swift_dynamicCast(&v340, &v338, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for Bool, 6) & 1) == 0)
  {
LABEL_67:
    v103 = 0;
    goto LABEL_68;
  }
  v103 = (char)v340;
LABEL_68:
  v13[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_shouldShowPlayForTurnBasedMatch] = v103;
  v104 = static String._unconditionallyBridgeFromObjectiveC(_:)(GKExtensionItemMatchesShowQuitForMatch);
  v106 = v105;
  if (!*(_QWORD *)(a1 + 16) || (v107 = sub_1000AAE54(v104, v105), (v108 & 1) == 0))
  {
    swift_bridgeObjectRelease(v106);
    goto LABEL_73;
  }
  v109 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v107);
  swift_unknownObjectRetain(v109, v108);
  swift_bridgeObjectRelease(v106);
  v338 = v109;
  if ((swift_dynamicCast(&v340, &v338, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for Bool, 6) & 1) == 0)
  {
LABEL_73:
    v110 = 0;
    goto LABEL_74;
  }
  v110 = (char)v340;
LABEL_74:
  v13[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_shouldShowQuitForTurnBasedMatch] = v110;
  v111 = static String._unconditionallyBridgeFromObjectiveC(_:)(GKExtensionItemDashboardIsArcadeGame);
  v113 = v112;
  if (!*(_QWORD *)(a1 + 16) || (v114 = sub_1000AAE54(v111, v112), (v115 & 1) == 0))
  {
    swift_bridgeObjectRelease(v113);
    goto LABEL_79;
  }
  v116 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v114);
  swift_unknownObjectRetain(v116, v115);
  swift_bridgeObjectRelease(v113);
  v338 = v116;
  if ((swift_dynamicCast(&v340, &v338, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for Bool, 6) & 1) == 0)
  {
LABEL_79:
    v117 = 0;
    goto LABEL_80;
  }
  v117 = (char)v340;
LABEL_80:
  v13[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_isArcade] = v117;
  v118 = static String._unconditionallyBridgeFromObjectiveC(_:)(GKExtensionItemDashboardLaunchContext);
  v120 = v119;
  if (*(_QWORD *)(a1 + 16) && (v121 = sub_1000AAE54(v118, v119), (v122 & 1) != 0))
  {
    v123 = *(void **)(*(_QWORD *)(a1 + 56) + 8 * v121);
    swift_unknownObjectRetain(v123, v122);
    swift_bridgeObjectRelease(v120);
    v340 = v123;
    v124 = swift_dynamicCast(&v338, &v340, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for String, 6);
    v125 = v338;
    v126 = v339;
    if (!v124)
    {
      v125 = 0;
      v126 = 0;
    }
  }
  else
  {
    swift_bridgeObjectRelease(v120);
    v125 = 0;
    v126 = 0;
  }
  v127 = &v13[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_launchContext];
  v128 = *(_QWORD *)&v13[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_launchContext + 8];
  *(_QWORD *)v127 = v125;
  *((_QWORD *)v127 + 1) = v126;
  v336 = v127;
  swift_bridgeObjectRelease(v128);
  v129 = static String._unconditionallyBridgeFromObjectiveC(_:)(GKExtensionItemDashboardLeaderboardID);
  v131 = v130;
  if (*(_QWORD *)(a1 + 16) && (v132 = sub_1000AAE54(v129, v130), (v133 & 1) != 0))
  {
    v134 = *(void **)(*(_QWORD *)(a1 + 56) + 8 * v132);
    swift_unknownObjectRetain(v134, v133);
    swift_bridgeObjectRelease(v131);
    v340 = v134;
    v135 = swift_dynamicCast(&v338, &v340, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for String, 6);
    v136 = v338;
    v137 = v339;
    if (!v135)
    {
      v136 = 0;
      v137 = 0;
    }
  }
  else
  {
    swift_bridgeObjectRelease(v131);
    v136 = 0;
    v137 = 0;
  }
  v138 = &v13[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_leaderboardIdentifier];
  v139 = *(_QWORD *)&v13[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_leaderboardIdentifier + 8];
  *(_QWORD *)v138 = v136;
  *((_QWORD *)v138 + 1) = v137;
  v333 = v138;
  swift_bridgeObjectRelease(v139);
  v140 = static String._unconditionallyBridgeFromObjectiveC(_:)(GKExtensionItemDashboardGameBundleID);
  v142 = v141;
  if (*(_QWORD *)(a1 + 16) && (v143 = sub_1000AAE54(v140, v141), (v144 & 1) != 0))
  {
    v145 = *(void **)(*(_QWORD *)(a1 + 56) + 8 * v143);
    swift_unknownObjectRetain(v145, v144);
    swift_bridgeObjectRelease(v142);
    v340 = v145;
    v146 = swift_dynamicCast(&v338, &v340, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for String, 6);
    v147 = v338;
    v148 = v339;
    if (!v146)
    {
      v147 = 0;
      v148 = 0;
    }
  }
  else
  {
    swift_bridgeObjectRelease(v142);
    v147 = 0;
    v148 = 0;
  }
  v149 = &v13[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_gameBundleID];
  v150 = *(_QWORD *)&v13[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_gameBundleID + 8];
  *(_QWORD *)v149 = v147;
  *((_QWORD *)v149 + 1) = v148;
  v334 = (uint64_t *)v149;
  swift_bridgeObjectRelease(v150);
  v151 = static String._unconditionallyBridgeFromObjectiveC(_:)(GKExtensionItemDashboardLeaderboardInternal);
  v153 = v152;
  if (!*(_QWORD *)(a1 + 16) || (v154 = sub_1000AAE54(v151, v152), (v155 & 1) == 0))
  {
    swift_bridgeObjectRelease(v153);
    goto LABEL_100;
  }
  v156 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v154);
  swift_unknownObjectRetain(v156, v155);
  swift_bridgeObjectRelease(v153);
  v157 = objc_opt_self(GKLeaderboardInternal);
  v158 = swift_dynamicCastObjCClass(v156, v157);
  if (!v158)
  {
    swift_unknownObjectRelease(v156);
LABEL_100:
    v158 = 0;
  }
  v159 = *(void **)&v13[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_leaderboardInternal];
  *(_QWORD *)&v13[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_leaderboardInternal] = v158;

  v160 = static String._unconditionallyBridgeFromObjectiveC(_:)(GKExtensionItemDashboardLeaderboardTitle);
  v162 = v161;
  if (*(_QWORD *)(a1 + 16) && (v163 = sub_1000AAE54(v160, v161), (v164 & 1) != 0))
  {
    v165 = *(void **)(*(_QWORD *)(a1 + 56) + 8 * v163);
    swift_unknownObjectRetain(v165, v164);
    swift_bridgeObjectRelease(v162);
    v340 = v165;
    v166 = swift_dynamicCast(&v338, &v340, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for String, 6);
    v167 = v338;
    v168 = v339;
    if (!v166)
    {
      v167 = 0;
      v168 = 0;
    }
  }
  else
  {
    swift_bridgeObjectRelease(v162);
    v167 = 0;
    v168 = 0;
  }
  v169 = &v13[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_leaderboardTitle];
  v170 = *(_QWORD *)&v13[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_leaderboardTitle + 8];
  *(_QWORD *)v169 = v167;
  *((_QWORD *)v169 + 1) = v168;
  swift_bridgeObjectRelease(v170);
  v171 = static String._unconditionallyBridgeFromObjectiveC(_:)(GKExtensionItemDashboardAchievementID);
  v173 = v172;
  v174 = sub_1000A9524(v171, v172, a1);
  swift_bridgeObjectRelease(v173);
  if (v174)
  {
    v340 = (void *)v174;
    v175 = swift_dynamicCast(&v338, &v340, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for String, 6);
    v176 = v338;
    v177 = v339;
    if (!v175)
    {
      v176 = 0;
      v177 = 0;
    }
  }
  else
  {
    v176 = 0;
    v177 = 0;
  }
  v178 = &v13[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_achievementIdentifier];
  v179 = *(_QWORD *)&v13[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_achievementIdentifier + 8];
  *(_QWORD *)v178 = v176;
  *((_QWORD *)v178 + 1) = v177;
  v332 = v178;
  swift_bridgeObjectRelease(v179);
  v180 = static String._unconditionallyBridgeFromObjectiveC(_:)(GKExtensionItemDashboardActivityID);
  v182 = v181;
  v183 = sub_1000A9524(v180, v181, a1);
  swift_bridgeObjectRelease(v182);
  if (v183)
  {
    v340 = (void *)v183;
    v184 = swift_dynamicCast(&v338, &v340, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for String, 6);
    v185 = v338;
    v186 = v339;
    if (!v184)
    {
      v185 = 0;
      v186 = 0;
    }
  }
  else
  {
    v185 = 0;
    v186 = 0;
  }
  v187 = &v13[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_activityIdentifier];
  v188 = *(_QWORD *)&v13[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_activityIdentifier + 8];
  *(_QWORD *)v187 = v185;
  *((_QWORD *)v187 + 1) = v186;
  swift_bridgeObjectRelease(v188);
  v189 = static String._unconditionallyBridgeFromObjectiveC(_:)(GKExtensionItemDashboardPlayerID);
  v191 = v190;
  v192 = sub_1000A9524(v189, v190, a1);
  swift_bridgeObjectRelease(v191);
  if (v192)
  {
    v340 = (void *)v192;
    v193 = swift_dynamicCast(&v338, &v340, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for String, 6);
    v194 = v338;
    v195 = v339;
    if (!v193)
    {
      v194 = 0;
      v195 = 0;
    }
  }
  else
  {
    v194 = 0;
    v195 = 0;
  }
  v196 = &v13[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_playerIdentifier];
  v197 = *(_QWORD *)&v13[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_playerIdentifier + 8];
  *(_QWORD *)v196 = v194;
  *((_QWORD *)v196 + 1) = v195;
  v335 = (uint64_t *)v196;
  swift_bridgeObjectRelease(v197);
  v198 = static String._unconditionallyBridgeFromObjectiveC(_:)(GKExtensionItemDashboardPlayerAlias);
  v200 = v199;
  v201 = sub_1000A9524(v198, v199, a1);
  swift_bridgeObjectRelease(v200);
  if (v201)
  {
    v340 = (void *)v201;
    v202 = swift_dynamicCast(&v338, &v340, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for String, 6);
    v203 = v338;
    v204 = v339;
    if (!v202)
    {
      v203 = 0;
      v204 = 0;
    }
  }
  else
  {
    v203 = 0;
    v204 = 0;
  }
  v205 = &v13[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_playerAlias];
  v206 = *(_QWORD *)&v13[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_playerAlias + 8];
  *(_QWORD *)v205 = v203;
  *((_QWORD *)v205 + 1) = v204;
  swift_bridgeObjectRelease(v206);
  if (!*(_QWORD *)&v13[v39])
  {
    v219 = sub_1000A9524(0x65746E49656D6167, 0xEC0000006C616E72, a1);
    if (v219)
    {
      v220 = v219;
      v221 = objc_opt_self(GKGameInternal);
      v222 = swift_dynamicCastObjCClass(v220, v221);
      if (v222)
      {
        v223 = objc_msgSend(objc_allocWithZone((Class)GKGame), "initWithInternalRepresentation:", v222);
        swift_unknownObjectRelease(v220);
        v224 = *(void **)&v13[v39];
        *(_QWORD *)&v13[v39] = v223;

      }
      else
      {
        swift_unknownObjectRelease(v220);
      }
    }
  }
  v207 = static String._unconditionallyBridgeFromObjectiveC(_:)(GKRemoteAlertUserInfoDeeplinkKey);
  v209 = v208;
  v210 = sub_1000A9524(v207, v208, a1);
  swift_bridgeObjectRelease(v209);
  if (!v210)
    goto LABEL_158;
  v338 = v210;
  v211 = sub_100003304(&qword_10010E398);
  if ((swift_dynamicCast(&v340, &v338, (char *)&type metadata for Swift.AnyObject + 8, v211, 6) & 1) == 0)
    goto LABEL_158;
  v330 = v89;
  v212 = (uint64_t)v340;
  v213 = static String._unconditionallyBridgeFromObjectiveC(_:)(GKRemoteAlertDeeplinkActionKey);
  v215 = v214;
  v216 = sub_1000A9524(v213, v214, v212);
  swift_bridgeObjectRelease(v215);
  if (v216
    && (v340 = (void *)v216,
        swift_dynamicCast(&v338, &v340, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for String, 6)))
  {
    v218 = v338;
    v217 = v339;
  }
  else
  {
    v218 = 0;
    v217 = 0xE000000000000000;
  }
  v225 = static String._unconditionallyBridgeFromObjectiveC(_:)(GKRemoteAlertDeeplinkActionLeaderboardValue);
  v227 = v226;
  v331 = v81;
  if (v225 == v218 && v226 == v217)
  {
    swift_bridgeObjectRelease(v217);
LABEL_136:
    swift_bridgeObjectRelease(v217);
    *(_QWORD *)&v13[v337] = 0;
    v229 = static String._unconditionallyBridgeFromObjectiveC(_:)(GKRemoteAlertDeeplinkActionIdentifierKey);
    v231 = v230;
    v232 = sub_1000A9524(v229, v230, v212);
    swift_bridgeObjectRelease(v231);
    if (v232)
    {
      v340 = (void *)v232;
      v233 = swift_dynamicCast(&v338, &v340, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for String, 6);
      v234 = v338;
      v235 = v339;
      if (!v233)
      {
        v234 = 0;
        v235 = 0;
      }
      v236 = v331;
    }
    else
    {
      v234 = 0;
      v235 = 0;
      v236 = v331;
    }
    v237 = v333[1];
    *v333 = v234;
    v333[1] = v235;
    swift_bridgeObjectRelease(v237);
    v238 = static String._unconditionallyBridgeFromObjectiveC(_:)(GKRemoteAlertDeeplinkActionNameKey);
    v240 = v239;
    v241 = sub_1000A9524(v238, v239, v212);
    swift_bridgeObjectRelease(v240);
    if (v241)
    {
      v340 = (void *)v241;
      v242 = swift_dynamicCast(&v338, &v340, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for String, 6);
      v243 = v338;
      v244 = v339;
      if (!v242)
      {
        v243 = 0;
        v244 = 0;
      }
    }
    else
    {
      v243 = 0;
      v244 = 0;
    }
    v245 = *((_QWORD *)v169 + 1);
    *(_QWORD *)v169 = v243;
    *((_QWORD *)v169 + 1) = v244;
    swift_bridgeObjectRelease(v245);
    v246 = static String._unconditionallyBridgeFromObjectiveC(_:)(GKRemoteAlertDeeplinkPlayerIdentifierKey);
    v248 = v247;
    v249 = sub_1000A9524(v246, v247, v212);
    swift_bridgeObjectRelease(v248);
    if (v249)
    {
      v340 = (void *)v249;
      v250 = swift_dynamicCast(&v338, &v340, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for String, 6);
      v251 = v338;
      v252 = v339;
      if (!v250)
      {
        v251 = 0;
        v252 = 0;
      }
    }
    else
    {
      v251 = 0;
      v252 = 0;
    }
    v253 = v335[1];
    *v335 = v251;
    v335[1] = v252;
    swift_bridgeObjectRelease(v253);
    v254 = static String._unconditionallyBridgeFromObjectiveC(_:)(GKRemoteAlertDeeplinkGameBundleIdentifierKey);
    v256 = v255;
    v257 = sub_1000A9524(v254, v255, v212);
    swift_bridgeObjectRelease(v256);
    swift_bridgeObjectRelease(v212);
    if (v257)
    {
      v340 = (void *)v257;
      v258 = swift_dynamicCast(&v338, &v340, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for String, 6);
      v259 = v338;
      v260 = v339;
      if (!v258)
      {
        v259 = 0;
        v260 = 0;
      }
    }
    else
    {
      v259 = 0;
      v260 = 0;
    }
    v261 = v330;
    v262 = (uint64_t *)v336;
    v263 = v334;
LABEL_155:
    v264 = v263[1];
    *v263 = v259;
    v263[1] = v260;
LABEL_156:
    swift_bridgeObjectRelease(v264);
    goto LABEL_157;
  }
  v228 = _stringCompareWithSmolCheck(_:_:expecting:)(v225, v226, v218, v217, 0);
  swift_bridgeObjectRelease(v227);
  if ((v228 & 1) != 0)
    goto LABEL_136;
  v273 = static String._unconditionallyBridgeFromObjectiveC(_:)(GKRemoteAlertDeeplinkActionPlayerProfileValue);
  v275 = v274;
  if (v273 == v218 && v274 == v217)
  {
    swift_bridgeObjectRelease(v217);
    goto LABEL_169;
  }
  v277 = _stringCompareWithSmolCheck(_:_:expecting:)(v273, v274, v218, v217, 0);
  swift_bridgeObjectRelease(v275);
  if ((v277 & 1) != 0)
  {
LABEL_169:
    swift_bridgeObjectRelease(v217);
    *(_QWORD *)&v13[v337] = 3;
    v278 = static String._unconditionallyBridgeFromObjectiveC(_:)(GKRemoteAlertDeeplinkPlayerIdentifierKey);
    v280 = v279;
    v281 = sub_1000A9524(v278, v279, v212);
    swift_bridgeObjectRelease(v280);
    swift_bridgeObjectRelease(v212);
    if (v281)
    {
      v340 = (void *)v281;
      v282 = swift_dynamicCast(&v338, &v340, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for String, 6);
      v259 = v338;
      v260 = v339;
      if (!v282)
      {
        v259 = 0;
        v260 = 0;
      }
      v261 = v330;
      v236 = v331;
      v263 = v335;
      v262 = (uint64_t *)v336;
    }
    else
    {
      v259 = 0;
      v260 = 0;
      v261 = v330;
      v236 = v331;
      v263 = v335;
      v262 = (uint64_t *)v336;
    }
    goto LABEL_155;
  }
  v283 = static String._unconditionallyBridgeFromObjectiveC(_:)(GKRemoteAlertDeeplinkActionAchievementsValue);
  v285 = v284;
  if (v283 == v218 && v284 == v217)
  {
    swift_bridgeObjectRelease(v217);
LABEL_178:
    swift_bridgeObjectRelease(v217);
    *(_QWORD *)&v13[v337] = 1;
    v287 = static String._unconditionallyBridgeFromObjectiveC(_:)(GKRemoteAlertDeeplinkAchievementsIdsKey);
    v289 = v288;
    v290 = sub_1000A9524(v287, v288, v212);
    swift_bridgeObjectRelease(v289);
    if (v290)
    {
      v340 = (void *)v290;
      v291 = swift_dynamicCast(&v338, &v340, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for String, 6);
      v292 = v338;
      v293 = v339;
      if (!v291)
      {
        v292 = 0;
        v293 = 0;
      }
    }
    else
    {
      v292 = 0;
      v293 = 0;
    }
    v294 = v332[1];
    *v332 = v292;
    v332[1] = v293;
    swift_bridgeObjectRelease(v294);
    v295 = static String._unconditionallyBridgeFromObjectiveC(_:)(GKRemoteAlertDeeplinkGameBundleIdentifierKey);
    v297 = v296;
    v298 = sub_1000A9524(v295, v296, v212);
    swift_bridgeObjectRelease(v297);
    if (v298)
    {
      v340 = (void *)v298;
      v299 = swift_dynamicCast(&v338, &v340, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for String, 6);
      v300 = v338;
      v301 = v339;
      if (!v299)
      {
        v300 = 0;
        v301 = 0;
      }
    }
    else
    {
      v300 = 0;
      v301 = 0;
    }
    v236 = v331;
    v302 = v334[1];
    *v334 = v300;
    v334[1] = v301;
    swift_bridgeObjectRelease(v302);
    v303 = static String._unconditionallyBridgeFromObjectiveC(_:)(GKRemoteAlertDeeplinkPlayerIdentifierKey);
    v305 = v304;
    v306 = sub_1000A9524(v303, v304, v212);
    swift_bridgeObjectRelease(v305);
    if (v306)
    {
      v340 = (void *)v306;
      v307 = swift_dynamicCast(&v338, &v340, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for String, 6);
      v308 = v338;
      v309 = v339;
      if (!v307)
      {
        v308 = 0;
        v309 = 0;
      }
    }
    else
    {
      v308 = 0;
      v309 = 0;
    }
    v310 = v335[1];
    *v335 = v308;
    v335[1] = v309;
    swift_bridgeObjectRelease(v310);
    v311 = static String._unconditionallyBridgeFromObjectiveC(_:)(GKRemoteAlertDeeplinkActionNameKey);
    v313 = v312;
    v314 = sub_1000A9524(v311, v312, v212);
    swift_bridgeObjectRelease(v313);
    swift_bridgeObjectRelease(v212);
    if (v314)
    {
      v340 = (void *)v314;
      v315 = swift_dynamicCast(&v338, &v340, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for String, 6);
      v316 = v338;
      v317 = v339;
      if (!v315)
      {
        v316 = 0;
        v317 = 0;
      }
    }
    else
    {
      v316 = 0;
      v317 = 0;
    }
    v261 = v330;
    v262 = (uint64_t *)v336;
    v264 = *((_QWORD *)v205 + 1);
    *(_QWORD *)v205 = v316;
    *((_QWORD *)v205 + 1) = v317;
    goto LABEL_156;
  }
  v286 = _stringCompareWithSmolCheck(_:_:expecting:)(v283, v284, v218, v217, 0);
  swift_bridgeObjectRelease(v285);
  if ((v286 & 1) != 0)
    goto LABEL_178;
  v318 = static String._unconditionallyBridgeFromObjectiveC(_:)(GKRemoteAlertDeeplinkActionActivityIdValue);
  v320 = v319;
  if (v318 == v218 && v319 == v217)
  {
    swift_bridgeObjectRelease_n(v217, 2);
    v236 = v331;
    v321 = v337;
LABEL_199:
    *(_QWORD *)&v13[v321] = 4;
    v323 = static String._unconditionallyBridgeFromObjectiveC(_:)(GKRemoteAlertDeeplinkActionIdentifierKey);
    v325 = v324;
    v326 = sub_1000A9524(v323, v324, v212);
    swift_bridgeObjectRelease(v325);
    swift_bridgeObjectRelease(v212);
    if (v326)
    {
      v340 = (void *)v326;
      v327 = swift_dynamicCast(&v338, &v340, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for String, 6);
      v328 = v338;
      v329 = v339;
      if (!v327)
      {
        v328 = 0;
        v329 = 0;
      }
    }
    else
    {
      v328 = 0;
      v329 = 0;
    }
    v261 = v330;
    v262 = (uint64_t *)v336;
    v264 = *((_QWORD *)v187 + 1);
    *(_QWORD *)v187 = v328;
    *((_QWORD *)v187 + 1) = v329;
    goto LABEL_156;
  }
  v322 = _stringCompareWithSmolCheck(_:_:expecting:)(v318, v319, v218, v217, 0);
  swift_bridgeObjectRelease(v217);
  swift_bridgeObjectRelease(v320);
  v236 = v331;
  v321 = v337;
  if ((v322 & 1) != 0)
    goto LABEL_199;
  swift_bridgeObjectRelease(v212);
  *(_QWORD *)&v13[v337] = -1;
  v261 = v330;
  v262 = (uint64_t *)v336;
LABEL_157:
  *(_QWORD *)&v13[v236] = 2;
  *(_QWORD *)&v13[v261] = 1;
  if (v262[1])
  {
LABEL_158:
    swift_bridgeObjectRelease(a1);

    return v13;
  }
  v266 = static String._unconditionallyBridgeFromObjectiveC(_:)(GKRemoteAlertUserInfoDashboardLaunchContextKey);
  v268 = v267;
  v269 = sub_1000A9524(v266, v267, a1);
  swift_bridgeObjectRelease(v268);
  swift_bridgeObjectRelease(a1);

  if (v269)
  {
    v340 = (void *)v269;
    v270 = swift_dynamicCast(&v338, &v340, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for String, 6);
    v271 = v338;
    v272 = v339;
    if (!v270)
    {
      v271 = 0;
      v272 = 0;
    }
  }
  else
  {
    v271 = 0;
    v272 = 0;
  }
  v276 = v262[1];
  *v262 = v271;
  v262[1] = v272;
  swift_bridgeObjectRelease(v276);
  return v13;
}

uint64_t type metadata accessor for DashboardRequest()
{
  return objc_opt_self(_TtC13GameOverlayUI16DashboardRequest);
}

id DashboardRequest.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), "init");
}

void DashboardRequest.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("GameOverlayUI.DashboardRequest", 30, "init()", 6, 0);
  __break(1u);
}

id DashboardRequest.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DashboardRequest();
  return objc_msgSendSuper2(&v2, "dealloc");
}

unint64_t sub_1000AAE54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_1000AAFA4(a1, a2, v5);
}

unint64_t sub_1000AAEB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_1000AB084(a1, v4);
}

unint64_t sub_1000AAEE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_1000AB148(a1, v4);
}

unint64_t sub_1000AAF18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _TtC13GameOverlayUI20GameOverlayUIService *v5;
  _TtC13GameOverlayUI20GameOverlayUIService *v6;
  Swift::Int v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  _QWORD v16[9];

  v3 = *(_QWORD *)(v1 + 40);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v6 = v5;
  Hasher.init(_seed:)(v16, v3);
  String.hash(into:)(v16, v4, v6);
  v7 = Hasher._finalize()();
  swift_bridgeObjectRelease(v6, v8, v9, v10, v11, v12, v13, v14);
  return sub_1000AB250(a1, v7);
}

unint64_t sub_1000AAFA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = v10[1];
    v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      do
      {
        v6 = (v6 + 1) & v13;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v14 = (_QWORD *)(v9 + 16 * v6);
        v15 = v14[1];
        v16 = *v14 == a1 && v15 == a2;
      }
      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_1000AB084(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_10008931C(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_100065BE8((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_1000AB148(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  id v6;
  char v7;
  uint64_t v8;
  id v9;
  char v10;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    sub_100056BE8();
    v6 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
    v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      v8 = ~v4;
      for (i = (i + 1) & v8; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v8)
      {
        v9 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
        v10 = static NSObject.== infix(_:_:)();

        if ((v10 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t sub_1000AB250(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2);
      return v5;
    }
    v13 = v11;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      v15 = ~v4;
      v5 = (v5 + 1) & v15;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
          v9 = v17;
          v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v16 == v18 && v9 == v19)
            break;
          v21 = v19;
          v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            v5 = (v5 + 1) & v15;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

uint64_t sub_1000AB3C4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
    return String.subscript.getter(15, a1, a2);
  else
    return 0;
}

uint64_t sub_1000AB404(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _TtC13GameOverlayUI20GameOverlayUIService *v7;
  uint64_t v8;
  char v9;
  SEL v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  char v20;
  uint64_t v21;

  v2 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v3 = a1;
    else
      v3 = a1 & 0xFFFFFFFFFFFFFF8;
    v4 = __CocoaSet.startIndex.getter(v3);
    v6 = v5;
    v7 = (_TtC13GameOverlayUI20GameOverlayUIService *)__CocoaSet.endIndex.getter(v3);
    v9 = static __CocoaSet.Index.== infix(_:_:)(v4, v6, v7, v8);
    swift_bridgeObjectRelease(v7, v10, v11, v12, v13, v14, v15, v16);
    if ((v9 & 1) != 0)
      goto LABEL_6;
    goto LABEL_10;
  }
  result = sub_1000B0568(a1);
  if ((v20 & 1) == 0)
  {
    v6 = v19;
    if (*(_DWORD *)(a1 + 36) == (_DWORD)v19)
    {
      v4 = result;
      if (result == 1 << *(_BYTE *)(a1 + 32))
      {
LABEL_6:
        sub_1000B3878(v4, v6, v2 != 0);
        return 0;
      }
LABEL_10:
      sub_1000B0300(v4, v6, v2 != 0, a1);
      v17 = v21;
      sub_1000B3878(v4, v6, v2 != 0);
      return v17;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

double sub_1000AB510(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  double result;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  *(_QWORD *)&result = swift_release(v2).n128_u64[0];
  return result;
}

void sub_1000AB53C(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000CE458);
  v6 = v3;
  v5 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v5);
  swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__useCase);
}

double sub_1000AB5D0(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000CE458);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_1000B3C08, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

void sub_1000AB678(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_1000AB748(a1, (uint64_t)&unk_1000CE488, &OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__didReturnToForeground, a2);
}

double sub_1000AB68C(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000CE488);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_1000B3BEC, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

void sub_1000AB734(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_1000AB748(a1, (uint64_t)&unk_1000CE4D8, &OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__newToGameCenter, a2);
}

void sub_1000AB748(uint64_t *a1@<X0>, uint64_t a2@<X3>, _QWORD *a3@<X4>, _BYTE *a4@<X8>)
{
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;

  v6 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v9 = v6;
  v8 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v8);
  swift_release(KeyPath);
  *a4 = *(_BYTE *)(v6 + *a3);
}

double sub_1000AB7E0(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000CE4D8);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_1000B3BD0, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_1000AB888@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000CE408);
  v7 = v3;
  v5 = sub_1000035B4(&qword_10010E3A0, type metadata accessor for RemoteAlertDashboardContext, (uint64_t)&unk_1000CDFEC);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_unknownObjectWeakLoadStrong(v3 + 32);
  *a2 = result;
  return result;
}

uint64_t sub_1000AB918(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000CE408);
  v8[2] = v3;
  v8[3] = v2;
  v9 = v3;
  v5 = sub_1000035B4(&qword_10010E3A0, type metadata accessor for RemoteAlertDashboardContext, (uint64_t)&unk_1000CDFEC);
  swift_unknownObjectRetain(v2, v6);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_1000B3EE8, v8, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  return swift_unknownObjectRelease(v2);
}

uint64_t type metadata accessor for GameOverlayUISceneDelegate()
{
  return objc_opt_self(_TtC13GameOverlayUI26GameOverlayUISceneDelegate);
}

uint64_t sub_1000ABAC4()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1000ABB04()
{
  return 30;
}

uint64_t sub_1000ABB0C()
{
  return 1;
}

uint64_t sub_1000ABB14(uint64_t a1)
{
  objc_class *v1;
  objc_class *v2;
  id v4;
  uint64_t v5;

  v2 = v1;
  v4 = objc_allocWithZone(v1);
  v5 = sub_1000B07DC(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)((char *)v2 + qword_1001233D8) - 8) + 8))(a1);
  return v5;
}

void *sub_1000ABB74(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return sub_1000ABBB4(a1, a2);
}

void *sub_1000ABBB4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  void (*v10)(uint64_t, uint64_t);
  id v11;
  uint64_t v13;

  v5 = *(_QWORD *)((swift_isaMask & *v2) + qword_1001233D8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(a1);
  v8 = (char *)&v13 - v7;
  (*(void (**)(char *))(v6 + 16))((char *)&v13 - v7);
  v9 = (void *)UIHostingController.init(coder:rootView:)(a1, v8);
  v10 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v11 = v9;
  v10(a2, v5);
  if (v9)

  return v9;
}

id sub_1000ABC74(void *a1, uint64_t a2)
{
  void *v2;
  id v4;
  objc_super v6;

  v6.receiver = v2;
  v6.super_class = (Class)swift_getObjectType(v2, a2);
  v4 = objc_msgSendSuper2(&v6, "initWithCoder:", a1);

  return v4;
}

id sub_1000ABCC4(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  uint64_t v4;

  v3 = a3;
  return sub_1000ABC74(v3, v4);
}

uint64_t type metadata accessor for GameOverlayHostingController(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10006CC00(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GameOverlayHostingController);
}

uint64_t type metadata accessor for GameOverlayWindow()
{
  return objc_opt_self(_TtC13GameOverlayUI17GameOverlayWindow);
}

id sub_1000ABEC0(uint64_t a1, void *a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t KeyPath;
  id v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  void *v29;
  id result;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v38[8];
  void *v39;
  _QWORD v40[3];

  v4 = v3;
  v37 = a3;
  v35 = sub_100003304(&qword_1001116B8);
  __chkstk_darwin(v35);
  v8 = (uint64_t *)((char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for ColorScheme(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_100003304(&qword_1001116E8);
  __chkstk_darwin(v34);
  v36 = (uint64_t)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v33 - v15;
  __chkstk_darwin(v17);
  v19 = (char *)&v33 - v18;
  v20 = swift_allocObject(&unk_100101C58, 24, 7);
  swift_unknownObjectWeakInit(v20 + 16, a1);
  v21 = (_QWORD *)swift_allocObject(&unk_100101D70, 40, 7);
  v21[2] = v4;
  v21[3] = v20;
  v22 = v37;
  v21[4] = v37;
  v38[0] = 0;
  v39 = a2;
  swift_unknownObjectWeakInit(v40, v22);
  v40[1] = sub_1000B3C5C;
  v40[2] = v21;
  KeyPath = swift_getKeyPath(&unk_1000CE500);
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for ColorScheme.dark(_:), v9);
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))((char *)v8 + *(int *)(v35 + 28), v12, v9);
  *v8 = KeyPath;
  sub_100026040((uint64_t)v38, (uint64_t)v19);
  sub_100010CBC((uint64_t)v8, (uint64_t)&v19[*(int *)(v34 + 36)], &qword_1001116B8);
  v24 = a2;
  swift_unknownObjectRetain(v37, v25);
  v26 = v4;
  sub_100010ED0((uint64_t)v8, &qword_1001116B8);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  sub_1000260C0((uint64_t)v38);
  sub_100010CBC((uint64_t)v19, (uint64_t)v16, &qword_1001116E8);
  v27 = objc_allocWithZone((Class)sub_100003304(&qword_1001116F0));
  v28 = v36;
  sub_100010CBC((uint64_t)v16, v36, &qword_1001116E8);
  v29 = (void *)UIHostingController.init(rootView:)(v28);
  sub_100010ED0((uint64_t)v16, &qword_1001116E8);
  result = objc_msgSend(v29, "view");
  if (result)
  {
    v31 = result;
    v32 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
    objc_msgSend(v31, "setBackgroundColor:", v32);

    sub_100010ED0((uint64_t)v19, &qword_1001116E8);
    return v29;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1000AC1E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5)
{
  void *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  id v28;
  void *v29;
  id result;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v34 = a4;
  v36 = a3;
  v8 = type metadata accessor for OnboardingOverlayView(0, a5);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_100003304(&qword_100111678);
  __chkstk_darwin(v35);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v33 - v15;
  __chkstk_darwin(v17);
  v19 = (char *)&v33 - v18;
  v20 = swift_allocObject(&unk_100101C58, 24, 7);
  swift_unknownObjectWeakInit(v20 + 16, a1);
  v21 = (_QWORD *)swift_allocObject(&unk_100101C80, 40, 7);
  v21[2] = v5;
  v21[3] = v20;
  v21[4] = a2;
  swift_unknownObjectRetain(a2, v22);
  v23 = v34;
  swift_bridgeObjectRetain(v34);
  v24 = v5;
  v25 = OnboardingOverlayView.init(gameBundleID:dismissAction:)(v36, v23, sub_1000B39C4, v21);
  v26 = static SafeAreaRegions.all.getter(v25);
  LOBYTE(v23) = static Edge.Set.all.getter(v26);
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v19, v11, v8);
  v27 = &v19[*(int *)(v35 + 36)];
  *(_QWORD *)v27 = v26;
  v27[8] = v23;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  sub_100010CBC((uint64_t)v19, (uint64_t)v16, &qword_100111678);
  v28 = objc_allocWithZone((Class)sub_100003304(&qword_100111680));
  sub_100010CBC((uint64_t)v16, (uint64_t)v13, &qword_100111678);
  v29 = (void *)UIHostingController.init(rootView:)(v13);
  sub_100010ED0((uint64_t)v16, &qword_100111678);
  result = objc_msgSend(v29, "view");
  if (result)
  {
    v31 = result;
    v32 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
    objc_msgSend(v31, "setBackgroundColor:", v32);

    sub_100010ED0((uint64_t)v19, &qword_100111678);
    return v29;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000AC468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8[17] = a7;
  v8[18] = a8;
  v8[15] = a5;
  v8[16] = a6;
  v8[14] = a4;
  v9 = type metadata accessor for MainActor(0);
  v8[19] = static MainActor.shared.getter(v9);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  v8[20] = v10;
  v8[21] = v11;
  return swift_task_switch(sub_1000AC4DC, v10, v11);
}

uint64_t sub_1000AC4DC()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  Swift::String v6;

  v1 = (void *)v0[15];
  if (v1)
  {
    v2 = v0[14];
    swift_bridgeObjectRetain(v0[15]);
    v6._countAndFlagsBits = v2;
    v6._object = v1;
    v3 = (char *)&loc_1000AC550 + 4 * asc_1000CE260[sub_1000722F8(v6)];
    __asm { BR              X10 }
  }
  if (qword_10010BBD0 != -1)
    swift_once(&qword_10010BBD0, sub_1000AD780);
  v4 = qword_1001233D0;
  v0[25] = qword_1001233D0;
  return swift_task_switch(sub_1000ACA18, v4, 0);
}

uint64_t sub_1000AC698()
{
  uint64_t v0;
  uint64_t v1;
  _TtC13GameOverlayUI20GameOverlayUIService *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  const char *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  _TtC13GameOverlayUI20GameOverlayUIService *v13;
  uint64_t v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  SEL v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  SEL v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;

  v1 = *(_QWORD *)(v0 + 176);
  swift_beginAccess(v1 + 112, v0 + 56, 0, 0);
  v2 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v1 + 112);
  if (!v2[1].super.isa)
    goto LABEL_5;
  v4 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 136);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v2);
  v5 = sub_1000AAE54(v4, v3);
  v13 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v0 + 136);
  if ((v6 & 1) == 0)
  {
    swift_bridgeObjectRelease(v2, v6, v7, v8, v9, v10, v11, v12);
    swift_bridgeObjectRelease(v13, v29, v30, v31, v32, v33, v34, v35);
LABEL_5:
    *(_QWORD *)(v0 + 48) = 0;
    *(_OWORD *)(v0 + 16) = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
    return swift_task_switch(sub_1000AC7A0, *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168));
  }
  v14 = *(_QWORD *)(*(_QWORD *)v2[3].listener + 8 * v5);
  swift_retain(v14);
  swift_bridgeObjectRelease(v2, v15, v16, v17, v18, v19, v20, v21);
  swift_bridgeObjectRelease(v13, v22, v23, v24, v25, v26, v27, v28);
  swift_beginAccess(v14 + 32, v0 + 80, 0, 0);
  sub_100010CBC(v14 + 32, v0 + 16, &qword_10010E3A8);
  swift_release(v14);
  return swift_task_switch(sub_1000AC7A0, *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168));
}

uint64_t sub_1000AC7A0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  void *Strong;
  void *v7;
  uint64_t v8;
  uint64_t (*v9)();

  if (v0[5])
  {
    v1 = sub_100003304((uint64_t *)&unk_100111640);
    v2 = type metadata accessor for RemoteAlertDashboardContext(0);
    if ((swift_dynamicCast(v0 + 13, v0 + 2, v1, v2, 6) & 1) != 0)
    {
      v3 = v0[13];
      v0[23] = v3;
      KeyPath = swift_getKeyPath(&unk_1000CE408);
      v0[2] = v3;
      v5 = sub_1000035B4(&qword_10010E3A0, type metadata accessor for RemoteAlertDashboardContext, (uint64_t)&unk_1000CDFEC);
      ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 2, KeyPath, v5);
      swift_release(KeyPath);
      Strong = (void *)swift_unknownObjectWeakLoadStrong(v3 + 32);
      if (Strong)
      {
        v7 = Strong;
        objc_msgSend(Strong, "didDismissDashboard");
        swift_unknownObjectRelease(v7);
      }
      v8 = qword_1001233D0;
      v0[24] = qword_1001233D0;
      v9 = sub_1000AC8F8;
      return swift_task_switch(v9, v8, 0);
    }
  }
  else
  {
    sub_100010ED0((uint64_t)(v0 + 2), &qword_10010E3A8);
  }
  if (qword_10010BBD0 != -1)
    swift_once(&qword_10010BBD0, sub_1000AD780);
  v8 = qword_1001233D0;
  v0[25] = qword_1001233D0;
  v9 = sub_1000ACA18;
  return swift_task_switch(v9, v8, 0);
}

uint64_t sub_1000AC8F8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _TtC13GameOverlayUI20GameOverlayUIService *v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  _TtC13GameOverlayUI20GameOverlayUIService *v6;
  SEL v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  SEL v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v22;

  v1 = v0[24];
  v3 = (_TtC13GameOverlayUI20GameOverlayUIService *)v0[17];
  v2 = v0[18];
  v4 = v0[16];
  sub_1000AD7C4(v4, v3, 0);
  swift_beginAccess(v1 + 112, v0 + 2, 33, 0);
  swift_bridgeObjectRetain(v3);
  swift_retain(v2);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + 112));
  v22 = *(_QWORD *)(v1 + 112);
  *(_QWORD *)(v1 + 112) = 0x8000000000000000;
  sub_1000AFED0(v2, v4, (uint64_t)v3, isUniquelyReferenced_nonNull_native, &qword_100111610);
  v6 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v1 + 112);
  *(_QWORD *)(v1 + 112) = v22;
  swift_bridgeObjectRelease(v6, v7, v8, v9, v10, v11, v12, v13);
  swift_bridgeObjectRelease(v3, v14, v15, v16, v17, v18, v19, v20);
  swift_endAccess(v0 + 2);
  return swift_task_switch(sub_1000AC9E0, v0[20], v0[21]);
}

uint64_t sub_1000AC9E0()
{
  uint64_t v0;
  __n128 v1;

  swift_release(*(_QWORD *)(v0 + 184));
  v1 = swift_release(*(_QWORD *)(v0 + 152));
  return (*(uint64_t (**)(__n128))(v0 + 8))(v1);
}

uint64_t sub_1000ACA18()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _TtC13GameOverlayUI20GameOverlayUIService *v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  _TtC13GameOverlayUI20GameOverlayUIService *v6;
  SEL v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  SEL v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v22;

  v1 = v0[25];
  v3 = (_TtC13GameOverlayUI20GameOverlayUIService *)v0[17];
  v2 = v0[18];
  v4 = v0[16];
  sub_1000AD7C4(v4, v3, 0);
  swift_beginAccess(v1 + 112, v0 + 2, 33, 0);
  swift_bridgeObjectRetain(v3);
  swift_retain(v2);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + 112));
  v22 = *(_QWORD *)(v1 + 112);
  *(_QWORD *)(v1 + 112) = 0x8000000000000000;
  sub_1000AFED0(v2, v4, (uint64_t)v3, isUniquelyReferenced_nonNull_native, &qword_100111610);
  v6 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v1 + 112);
  *(_QWORD *)(v1 + 112) = v22;
  swift_bridgeObjectRelease(v6, v7, v8, v9, v10, v11, v12, v13);
  swift_bridgeObjectRelease(v3, v14, v15, v16, v17, v18, v19, v20);
  swift_endAccess(v0 + 2);
  return swift_task_switch(sub_1000ACB00, v0[20], v0[21]);
}

uint64_t sub_1000ACB00()
{
  uint64_t v0;
  __n128 v1;

  v1 = swift_release(*(_QWORD *)(v0 + 152));
  return (*(uint64_t (**)(__n128))(v0 + 8))(v1);
}

void sub_1000ACBAC(void *a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;

  v6 = (void *)objc_opt_self(UIView);
  v7 = swift_allocObject(&unk_100101CA8, 24, 7);
  *(_QWORD *)(v7 + 16) = a1;
  v19 = sub_1000B39D0;
  v20 = v7;
  v15 = _NSConcreteStackBlock;
  v16 = 1107296256;
  v17 = sub_1000AB510;
  v18 = &unk_100101CC0;
  v8 = _Block_copy(&v15);
  v9 = v20;
  v10 = a1;
  swift_release(v9);
  v11 = swift_allocObject(&unk_100101CF8, 32, 7);
  *(_QWORD *)(v11 + 16) = a2;
  *(_QWORD *)(v11 + 24) = a3;
  v19 = sub_1000B39DC;
  v20 = v11;
  v15 = _NSConcreteStackBlock;
  v16 = 1107296256;
  v17 = sub_1000ACDC0;
  v18 = &unk_100101D10;
  v12 = _Block_copy(&v15);
  v13 = v20;
  swift_unknownObjectRetain(a3, v14);
  swift_retain(a2);
  swift_release(v13);
  objc_msgSend(v6, "animateWithDuration:animations:completion:", v8, v12, 0.3);
  _Block_release(v12);
  _Block_release(v8);
}

uint64_t sub_1000ACD10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v4 + 16) = a4;
  v5 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v4 + 24) = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000ACD7C, v6, v7);
}

uint64_t sub_1000ACD7C()
{
  uint64_t v0;

  objc_msgSend(*(id *)(v0 + 16), "didFinishOnboardingWithError:", 0, swift_release(*(_QWORD *)(v0 + 24)).n128_f64[0]);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double sub_1000ACDC0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  double result;

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v4(a2);
  *(_QWORD *)&result = swift_release(v3).n128_u64[0];
  return result;
}

void sub_1000ACDFC(uint64_t a1)
{
  uint64_t v1;
  void *Strong;
  void *v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    objc_msgSend(Strong, "invalidate");

  }
}

uint64_t sub_1000ACE54(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for ColorScheme(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return EnvironmentValues.colorScheme.setter(v4);
}

void sub_1000ACED0(void *a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;

  v6 = (void *)objc_opt_self(UIView);
  v7 = swift_allocObject(&unk_100101D98, 24, 7);
  *(_QWORD *)(v7 + 16) = a1;
  v19 = sub_1000B39D0;
  v20 = v7;
  v15 = _NSConcreteStackBlock;
  v16 = 1107296256;
  v17 = sub_1000AB510;
  v18 = &unk_100101DB0;
  v8 = _Block_copy(&v15);
  v9 = v20;
  v10 = a1;
  swift_release(v9);
  v11 = swift_allocObject(&unk_100101DE8, 32, 7);
  *(_QWORD *)(v11 + 16) = a2;
  *(_QWORD *)(v11 + 24) = a3;
  v19 = sub_1000B3C98;
  v20 = v11;
  v15 = _NSConcreteStackBlock;
  v16 = 1107296256;
  v17 = sub_1000ACDC0;
  v18 = &unk_100101E00;
  v12 = _Block_copy(&v15);
  v13 = v20;
  swift_unknownObjectRetain(a3, v14);
  swift_retain(a2);
  swift_release(v13);
  objc_msgSend(v6, "animateWithDuration:animations:completion:", v8, v12, 0.3);
  _Block_release(v12);
  _Block_release(v8);
}

void sub_1000AD034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *Strong;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  _BYTE v28[24];

  v11 = sub_100003304(&qword_10010EB20);
  __chkstk_darwin(v11);
  v13 = &v28[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a2 += 16;
  swift_beginAccess(a2, v28, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(a2);
  if (Strong)
  {
    v15 = Strong;
    objc_msgSend(Strong, "invalidate");

  }
  if (a3)
  {
    v16 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v13, 1, 1, v16);
    type metadata accessor for MainActor(0);
    v18 = swift_unknownObjectRetain(a3, v17);
    v19 = static MainActor.shared.getter(v18);
    v20 = (_QWORD *)swift_allocObject(a4, 40, 7);
    v20[2] = v19;
    v20[3] = &protocol witness table for MainActor;
    v20[4] = a3;
    v21 = sub_100028240((uint64_t)v13, a5, (uint64_t)v20);
    swift_release(v21);
  }
  else
  {
    if (qword_10010BAA0 != -1)
      swift_once(&qword_10010BAA0, sub_100004DCC);
    v22 = type metadata accessor for Logger(0);
    v23 = sub_100004E8C(v22, (uint64_t)qword_1001232D8);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, a6, v26, 2u);
      swift_slowDealloc(v26, -1, -1);
    }

  }
}

uint64_t sub_1000AD20C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v4 + 16) = a4;
  v5 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v4 + 24) = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000AD278, v6, v7);
}

uint64_t sub_1000AD278()
{
  uint64_t v0;

  objc_msgSend(*(id *)(v0 + 16), "didDismissDashboard", swift_release(*(_QWORD *)(v0 + 24)).n128_f64[0]);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000AD2B8(void *a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;

  v4 = (void *)objc_opt_self(UIView);
  v5 = swift_allocObject(&unk_100101E88, 24, 7);
  *(_QWORD *)(v5 + 16) = a1;
  v15 = sub_1000B39D0;
  v16 = v5;
  v11 = _NSConcreteStackBlock;
  v12 = 1107296256;
  v13 = sub_1000AB510;
  v14 = &unk_100101EA0;
  v6 = _Block_copy(&v11);
  v7 = v16;
  v8 = a1;
  swift_release(v7);
  v15 = sub_1000B3E64;
  v16 = a2;
  v11 = _NSConcreteStackBlock;
  v12 = 1107296256;
  v13 = sub_1000ACDC0;
  v14 = &unk_100101EC8;
  v9 = _Block_copy(&v11);
  v10 = v16;
  swift_retain(a2);
  swift_release(v10);
  objc_msgSend(v4, "animateWithDuration:animations:completion:", v6, v9, 0.3);
  _Block_release(v9);
  _Block_release(v6);
}

void sub_1000AD3F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *Strong;
  void *v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v4 = Strong;
    objc_msgSend(Strong, "invalidate");

  }
}

void sub_1000AD510(void *a1, uint64_t a2, void *a3, const char *a4)
{
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  id v13;

  v6 = qword_10010BAA0;
  v13 = a3;
  v7 = a1;
  if (v6 != -1)
    swift_once(&qword_10010BAA0, sub_100004DCC);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_100004E8C(v8, (uint64_t)qword_1001232D8);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, a4, v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }

}

id sub_1000AD698(char *a1, uint64_t a2, _QWORD *a3)
{
  objc_class *ObjectType;
  objc_super v7;

  ObjectType = (objc_class *)swift_getObjectType(a1, a2);
  *(_QWORD *)&a1[*a3] = 0;
  v7.receiver = a1;
  v7.super_class = ObjectType;
  return objc_msgSendSuper2(&v7, "init");
}

id sub_1000AD6E0(uint64_t a1, uint64_t a2)
{
  void *v2;
  objc_super v4;

  v4.receiver = v2;
  v4.super_class = (Class)swift_getObjectType(v2, a2);
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t type metadata accessor for GameOverlayUIRemoteAlertSceneDelegate()
{
  return objc_opt_self(_TtC13GameOverlayUI37GameOverlayUIRemoteAlertSceneDelegate);
}

uint64_t sub_1000AD744(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  swift_unknownObjectWeakDestroy(v2 + 16, a2);
  swift_unknownObjectWeakDestroy(v2 + 24, v3);
  sub_100010ED0(v2 + 32, &qword_10010E3A8);
  return swift_deallocClassInstance(v2, 72, 7);
}

uint64_t sub_1000AD780()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = type metadata accessor for RemoteSceneManager();
  v1 = swift_allocObject(v0, 120, 15);
  result = swift_defaultActor_initialize();
  *(_QWORD *)(v1 + 112) = &_swiftEmptyDictionarySingleton;
  qword_1001233D0 = v1;
  return result;
}

void sub_1000AD7C4(uint64_t a1, _TtC13GameOverlayUI20GameOverlayUIService *a2, char a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _TtC13GameOverlayUI20GameOverlayUIService **v10;
  _TtC13GameOverlayUI20GameOverlayUIService *v11;
  unint64_t v12;
  const char *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  SEL v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  SEL v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  void *Strong;
  _TtC13GameOverlayUI20GameOverlayUIService *v36;
  unint64_t v37;
  const char *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  SEL v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  SEL v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  void *v60;
  SEL v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  SEL v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  uint64_t v75;
  SEL v76;
  id v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  uint64_t v83;
  id v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _BYTE v90[24];
  _BYTE v91[24];

  v7 = sub_100003304(&qword_10010EB20);
  __chkstk_darwin(v7);
  v9 = &v90[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = (_TtC13GameOverlayUI20GameOverlayUIService **)(v3 + 112);
  swift_beginAccess(v3 + 112, v91, 0, 0);
  v11 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v3 + 112);
  if (v11[1].super.isa)
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(v11);
    v12 = sub_1000AAE54(a1, (uint64_t)a2);
    if ((v13 & 1) == 0)
    {
      swift_bridgeObjectRelease(a2, v13, v14, v15, v16, v17, v18, v19);
      swift_bridgeObjectRelease(v11, v61, v62, v63, v64, v65, v66, v67);
      return;
    }
    v20 = *(_QWORD *)(*(_QWORD *)v11[3].listener + 8 * v12);
    swift_retain(v20);
    swift_bridgeObjectRelease(a2, v21, v22, v23, v24, v25, v26, v27);
    swift_bridgeObjectRelease(v11, v28, v29, v30, v31, v32, v33, v34);
    Strong = (void *)swift_unknownObjectWeakLoadStrong(v20 + 16);
    swift_release(v20);
    if (!Strong)
      return;
    v36 = *v10;
    if ((*v10)[1].super.isa)
    {
      swift_bridgeObjectRetain(a2);
      swift_bridgeObjectRetain(v36);
      v37 = sub_1000AAE54(a1, (uint64_t)a2);
      if ((v38 & 1) != 0)
      {
        v45 = *(_QWORD *)(*(_QWORD *)v36[3].listener + 8 * v37);
        swift_retain(v45);
        swift_bridgeObjectRelease(a2, v46, v47, v48, v49, v50, v51, v52);
        swift_bridgeObjectRelease(v36, v53, v54, v55, v56, v57, v58, v59);
        v60 = (void *)swift_unknownObjectWeakLoadStrong(v45 + 24);
        swift_release(v45);
LABEL_10:
        swift_beginAccess(v10, v90, 33, 0);
        swift_bridgeObjectRetain(a2);
        v75 = sub_1000AFC9C(a1, (uint64_t)a2, &qword_100111610);
        swift_endAccess(v90);
        swift_bridgeObjectRelease(a2, v76, v77, v78, v79, v80, v81, v82);
        swift_release(v75);
        v83 = type metadata accessor for TaskPriority(0);
        (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v83 - 8) + 56))(v9, 1, 1, v83);
        type metadata accessor for MainActor(0);
        v84 = v60;
        v85 = Strong;
        v86 = swift_bridgeObjectRetain(a2);
        v87 = static MainActor.shared.getter(v86);
        v88 = swift_allocObject(&unk_100101B18, 65, 7);
        *(_QWORD *)(v88 + 16) = v87;
        *(_QWORD *)(v88 + 24) = &protocol witness table for MainActor;
        *(_QWORD *)(v88 + 32) = v60;
        *(_QWORD *)(v88 + 40) = v85;
        *(_QWORD *)(v88 + 48) = a1;
        *(_QWORD *)(v88 + 56) = a2;
        *(_BYTE *)(v88 + 64) = a3 & 1;
        v89 = sub_100028240((uint64_t)v9, (uint64_t)&unk_100111600, v88);
        swift_release(v89);

        return;
      }
      swift_bridgeObjectRelease(a2, v38, v39, v40, v41, v42, v43, v44);
      swift_bridgeObjectRelease(v36, v68, v69, v70, v71, v72, v73, v74);
    }
    v60 = 0;
    goto LABEL_10;
  }
}

uint64_t sub_1000ADA40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_BYTE *)(v8 + 104) = a8;
  *(_QWORD *)(v8 + 80) = a6;
  *(_QWORD *)(v8 + 88) = a7;
  *(_QWORD *)(v8 + 64) = a4;
  *(_QWORD *)(v8 + 72) = a5;
  v9 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v8 + 96) = static MainActor.shared.getter(v9);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000ADAB4, v10, v11);
}

void sub_1000ADAB4()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  const char *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  _BOOL4 v38;
  unint64_t v39;
  uint64_t v40;
  uint8_t *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  id v54;
  void *aBlock;
  uint64_t v56;

  v1 = *(_QWORD *)(v0 + 64);
  *(_QWORD *)&v2 = swift_release(*(_QWORD *)(v0 + 96)).n128_u64[0];
  if (v1)
  {
    v3 = *(void **)(v0 + 64);
    goto LABEL_14;
  }
  v4 = objc_msgSend(*(id *)(v0 + 72), "windows", v2);
  v5 = sub_1000509C8(0, &qword_100111608, UIWindow_ptr);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v5);

  if ((unint64_t)v6 >> 62)
  {
    if (v6 < 0)
      v22 = v6;
    else
      v22 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v6);
    v23 = _CocoaArrayWrapper.endIndex.getter(v22);
    swift_bridgeObjectRelease((_TtC13GameOverlayUI20GameOverlayUIService *)v6, v24, v25, v26, v27, v28, v29, v30);
    if (v23)
      goto LABEL_5;
LABEL_13:
    swift_bridgeObjectRelease((_TtC13GameOverlayUI20GameOverlayUIService *)v6, v7, v8, v9, v10, v11, v12, v13);
    v3 = 0;
    goto LABEL_14;
  }
  if (!*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_13;
LABEL_5:
  if ((v6 & 0xC000000000000001) != 0)
  {
    v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v6);
  }
  else
  {
    if (!*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    v14 = *(id *)(v6 + 32);
  }
  v3 = v14;
  swift_bridgeObjectRelease((_TtC13GameOverlayUI20GameOverlayUIService *)v6, v15, v16, v17, v18, v19, v20, v21);
LABEL_14:
  aBlock = (void *)(v0 + 16);
  v31 = qword_10010BAA0;
  v32 = *(id *)(v0 + 64);
  if (v31 != -1)
    swift_once(&qword_10010BAA0, sub_100004DCC);
  v33 = *(_QWORD *)(v0 + 88);
  v34 = type metadata accessor for Logger(0);
  sub_100004E8C(v34, (uint64_t)qword_1001232D8);
  v35 = swift_bridgeObjectRetain_n(v33, 2);
  v36 = Logger.logObject.getter(v35);
  v37 = static os_log_type_t.info.getter();
  v38 = os_log_type_enabled(v36, v37);
  v39 = *(_QWORD *)(v0 + 88);
  if (v38)
  {
    v40 = *(_QWORD *)(v0 + 80);
    v41 = (uint8_t *)swift_slowAlloc(12, -1);
    v42 = v3;
    v43 = swift_slowAlloc(32, -1);
    v56 = v43;
    *(_DWORD *)v41 = 136315138;
    swift_bridgeObjectRetain(v39);
    *(_QWORD *)(v0 + 16) = sub_100031C58(v40, v39, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(aBlock, v0 + 24);
    swift_bridgeObjectRelease_n(v39, 3);
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "Attempting to dismiss remote alert for token: %s", v41, 0xCu);
    swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
    v44 = v43;
    v3 = v42;
    swift_slowDealloc(v44, -1, -1);
    swift_slowDealloc(v41, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 88), 2);
  }

  v45 = *(void **)(v0 + 72);
  if (*(_BYTE *)(v0 + 104) == 1)
  {
    v46 = (void *)objc_opt_self(UIView);
    v47 = swift_allocObject(&unk_100101B40, 24, 7);
    *(_QWORD *)(v47 + 16) = v3;
    *(_QWORD *)(v0 + 48) = sub_1000AFC00;
    *(_QWORD *)(v0 + 56) = v47;
    *(_QWORD *)(v0 + 16) = _NSConcreteStackBlock;
    *(_QWORD *)(v0 + 24) = 1107296256;
    *(_QWORD *)(v0 + 32) = sub_1000AB510;
    *(_QWORD *)(v0 + 40) = &unk_100101B58;
    v48 = _Block_copy(aBlock);
    v49 = *(_QWORD *)(v0 + 56);
    v50 = v3;
    swift_release(v49);
    v51 = swift_allocObject(&unk_100101B90, 24, 7);
    *(_QWORD *)(v51 + 16) = v45;
    *(_QWORD *)(v0 + 48) = sub_1000AFC34;
    *(_QWORD *)(v0 + 56) = v51;
    *(_QWORD *)(v0 + 16) = _NSConcreteStackBlock;
    *(_QWORD *)(v0 + 24) = 1107296256;
    *(_QWORD *)(v0 + 32) = sub_1000ACDC0;
    *(_QWORD *)(v0 + 40) = &unk_100101BA8;
    v52 = _Block_copy(aBlock);
    v53 = *(_QWORD *)(v0 + 56);
    v54 = v45;
    swift_release(v53);
    objc_msgSend(v46, "animateWithDuration:animations:completion:", v48, v52, 0.3);

    _Block_release(v52);
    _Block_release(v48);
  }
  else
  {
    objc_msgSend(*(id *)(v0 + 72), "invalidate");

  }
  (*(void (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for RemoteSceneManager()
{
  return objc_opt_self(_TtC13GameOverlayUI18RemoteSceneManager);
}

uint64_t type metadata accessor for RemoteSceneManager.WeakScene()
{
  return objc_opt_self(_TtCC13GameOverlayUI18RemoteSceneManager9WeakScene);
}

void sub_1000ADEEC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  _QWORD v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100003304(&qword_100111760);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_34;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_36;
      v24 = *(_QWORD *)(v36 + 8 * v13);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v13 >= v35)
              goto LABEL_36;
            v24 = *(_QWORD *)(v36 + 8 * v13);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v13 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      swift_bridgeObjectRetain(v33);
    }
    Hasher.init(_seed:)(v38, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v38, v32, v31);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

void sub_1000AE200(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_100003304(a3);
  v38 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = v8;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_43;
  v10 = 1 << *(_BYTE *)(v6 + 32);
  v37 = v6 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v6 + 64);
  v36 = (unint64_t)(v10 + 63) >> 6;
  v13 = v8 + 64;
  swift_retain(v6);
  v14 = 0;
  while (1)
  {
    if (v12)
    {
      v21 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v22 = v21 | (v14 << 6);
      goto LABEL_34;
    }
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v23 >= v36)
      break;
    v24 = (_QWORD *)(v6 + 64);
    v25 = *(_QWORD *)(v37 + 8 * v23);
    ++v14;
    if (!v25)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v36)
        goto LABEL_36;
      v25 = *(_QWORD *)(v37 + 8 * v14);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v36)
        {
LABEL_36:
          swift_release(v6);
          if ((v38 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v14 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v14 >= v36)
              goto LABEL_36;
            v25 = *(_QWORD *)(v37 + 8 * v14);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v14 = v26;
      }
    }
LABEL_33:
    v12 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_34:
    v31 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v22);
    v33 = *v31;
    v32 = v31[1];
    v34 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v22);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain(v31[1]);
      swift_retain(v34);
    }
    Hasher.init(_seed:)(v39, *(_QWORD *)(v9 + 40));
    String.hash(into:)(v39, v33, v32);
    v15 = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v9 + 32);
    v17 = v15 & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v19);
    *v20 = v33;
    v20[1] = v32;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v19) = v34;
    ++*(_QWORD *)(v9 + 16);
  }
  swift_release(v6);
  v24 = (_QWORD *)(v6 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v6 + 32);
  if (v35 >= 64)
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v35;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_43:
  swift_release(v6);
  *v4 = v9;
}

void sub_1000AE510(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100003304(&qword_10010E698);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v3;
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v14 << 6);
      goto LABEL_34;
    }
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v23 >= v12)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v37 + 8 * v23);
    ++v14;
    if (!v25)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v12)
        goto LABEL_36;
      v25 = *(_QWORD *)(v37 + 8 * v14);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release(v5);
          v3 = v36;
          if ((a2 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v14 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v14 >= v12)
              goto LABEL_36;
            v25 = *(_QWORD *)(v37 + 8 * v14);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v14 = v26;
      }
    }
LABEL_33:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_34:
    v31 = 8 * v22;
    v32 = *(void **)(*(_QWORD *)(v5 + 48) + v31);
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v31);
    if ((a2 & 1) == 0)
    {
      v34 = v32;
      swift_retain(v33);
    }
    v15 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = v15 & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = 8 * v19;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + v20) = v32;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v20) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v36;
  v24 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

void sub_1000AE7E4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  char v39;
  _QWORD v40[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100003304((uint64_t *)&unk_100111770);
  v39 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v38 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v36 = v3;
  v37 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_34;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v22 >= v37)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v38 + 8 * v22);
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v37)
        goto LABEL_36;
      v24 = *(_QWORD *)(v38 + 8 * v13);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_36:
          swift_release(v5);
          v3 = v36;
          if ((v39 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v13 >= v37)
              goto LABEL_36;
            v24 = *(_QWORD *)(v38 + 8 * v13);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v13 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      v34 = v33;
    }
    Hasher.init(_seed:)(v40, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v40, v32, v31);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v36;
  v23 = (_QWORD *)(v5 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

void sub_1000AEAF0(uint64_t a1, uint64_t a2)
{
  sub_1000AEB14(a1, a2, (uint64_t *)&unk_100111780);
}

void sub_1000AEAFC(uint64_t a1, uint64_t a2)
{
  sub_1000AEB14(a1, a2, (uint64_t *)&unk_100110420);
}

void sub_1000AEB08(uint64_t a1, uint64_t a2)
{
  sub_1000AEB14(a1, a2, &qword_100111768);
}

void sub_1000AEB14(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  int64_t v15;
  Swift::Int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  _QWORD *v26;
  unint64_t v27;
  int64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  _QWORD v42[9];

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_100003304(a3);
  v40 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = v8;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_43;
  v10 = 1 << *(_BYTE *)(v6 + 32);
  v38 = v4;
  v39 = v6 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v6 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 64;
  swift_retain(v6);
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v23 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v24 = v23 | (v15 << 6);
      goto LABEL_34;
    }
    v25 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v25 >= v13)
      break;
    v26 = (_QWORD *)(v6 + 64);
    v27 = *(_QWORD *)(v39 + 8 * v25);
    ++v15;
    if (!v27)
    {
      v15 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_36;
      v27 = *(_QWORD *)(v39 + 8 * v15);
      if (!v27)
      {
        v28 = v25 + 2;
        if (v28 >= v13)
        {
LABEL_36:
          swift_release(v6);
          v4 = v38;
          if ((v40 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v27 = *(_QWORD *)(v39 + 8 * v28);
        if (!v27)
        {
          while (1)
          {
            v15 = v28 + 1;
            if (__OFADD__(v28, 1))
              goto LABEL_45;
            if (v15 >= v13)
              goto LABEL_36;
            v27 = *(_QWORD *)(v39 + 8 * v15);
            ++v28;
            if (v27)
              goto LABEL_33;
          }
        }
        v15 = v28;
      }
    }
LABEL_33:
    v12 = (v27 - 1) & v27;
    v24 = __clz(__rbit64(v27)) + (v15 << 6);
LABEL_34:
    v33 = 16 * v24;
    v34 = (uint64_t *)(*(_QWORD *)(v6 + 48) + v33);
    v36 = *v34;
    v35 = v34[1];
    v41 = *(_OWORD *)(*(_QWORD *)(v6 + 56) + v33);
    if ((v40 & 1) == 0)
      swift_bridgeObjectRetain(v35);
    Hasher.init(_seed:)(v42, *(_QWORD *)(v9 + 40));
    String.hash(into:)(v42, v36, v35);
    v16 = Hasher._finalize()();
    v17 = -1 << *(_BYTE *)(v9 + 32);
    v18 = v16 & ~v17;
    v19 = v18 >> 6;
    if (((-1 << v18) & ~*(_QWORD *)(v14 + 8 * (v18 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v14 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (++v19 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v31 = v19 == v30;
        if (v19 == v30)
          v19 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v14 + 8 * v19);
      }
      while (v32 == -1);
      v20 = __clz(__rbit64(~v32)) + (v19 << 6);
    }
    *(_QWORD *)(v14 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    v21 = 16 * v20;
    v22 = (_QWORD *)(*(_QWORD *)(v9 + 48) + v21);
    *v22 = v36;
    v22[1] = v35;
    *(_OWORD *)(*(_QWORD *)(v9 + 56) + v21) = v41;
    ++*(_QWORD *)(v9 + 16);
  }
  swift_release(v6);
  v4 = v38;
  v26 = (_QWORD *)(v6 + 64);
  if ((v40 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v37 = 1 << *(_BYTE *)(v6 + 32);
  if (v37 >= 64)
    bzero(v26, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v26 = -1 << v37;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_43:
  swift_release(v6);
  *v4 = v9;
}

unint64_t sub_1000AEE1C(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

void sub_1000AEE64()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_100003304(&qword_100111760);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v20);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1000AF018(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v2 = v1;
  sub_100003304(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    swift_release(v3);
    *v2 = v5;
    return;
  }
  v6 = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)v6 >= v3 + 64 + 8 * v8)
    memmove(v6, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v19 = v18[1];
    v20 = 8 * v16;
    v21 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = *v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain(v19);
    swift_retain(v21);
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1000AF1C4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_100003304(&qword_10010E698);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    v19 = v17;
    swift_retain(v18);
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1000AF36C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  id v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  sub_100003304((uint64_t *)&unk_100111770);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(void **)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    v22 = v20;
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1000AF51C()
{
  sub_1000AF540((uint64_t *)&unk_100111780);
}

void sub_1000AF528()
{
  sub_1000AF540((uint64_t *)&unk_100110420);
}

void sub_1000AF534()
{
  sub_1000AF540(&qword_100111768);
}

void sub_1000AF540(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v2 = v1;
  sub_100003304(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    swift_release(v3);
    *v2 = v5;
    return;
  }
  v6 = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)v6 >= v3 + 64 + 8 * v8)
    memmove(v6, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (uint64_t *)(*(_QWORD *)(v3 + 48) + v17);
    v20 = *v18;
    v19 = v18[1];
    v21 = *(_OWORD *)(*(_QWORD *)(v3 + 56) + v17);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = v20;
    v22[1] = v19;
    *(_OWORD *)(*(_QWORD *)(v5 + 56) + v17) = v21;
    swift_bridgeObjectRetain(v19);
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

unint64_t sub_1000AF6E0(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v10 = *v9;
        v11 = v9[1];
        Hasher.init(_seed:)(v26, *(_QWORD *)(a2 + 40));
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        v12 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v11);
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = (_QWORD *)(v17 + 8 * v3);
          v19 = (_QWORD *)(v17 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v18 >= v19 + 1))
          {
            *v18 = *v19;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void sub_1000AF8B4(unint64_t a1, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  id v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  v3 = a1;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    v8 = _HashTable.previousHole(before:)(a1, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(a2 + 40);
        v11 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v6);
        v12 = NSObject._rawHashValue(seed:)(v10);

        v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v3 >= v13)
          {
LABEL_16:
            v16 = *(_QWORD *)(a2 + 48);
            v17 = (_QWORD *)(v16 + 8 * v3);
            v18 = (_QWORD *)(v16 + 8 * v6);
            if (v3 != v6 || v17 >= v18 + 1)
              *v17 = *v18;
            v19 = *(_QWORD *)(a2 + 56);
            v20 = (_QWORD *)(v19 + 8 * v3);
            v21 = (_QWORD *)(v19 + 8 * v6);
            if (v3 != v6 || (v3 = v6, v20 >= v21 + 1))
            {
              *v20 = *v21;
              v3 = v6;
            }
          }
        }
        else if (v13 >= v9 || v3 >= v13)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v23 = *v22;
    v24 = (-1 << v3) - 1;
  }
  else
  {
    v22 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    v24 = *v22;
    v23 = (-1 << a1) - 1;
  }
  *v22 = v24 & v23;
  v25 = *(_QWORD *)(a2 + 16);
  v26 = __OFSUB__(v25, 1);
  v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
}

uint64_t sub_1000AFA64(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_1000AAE54(a1, a2);
  LOBYTE(a2) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v10 = *v3;
  v14 = *v3;
  *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000AEE64();
    v10 = v14;
  }
  swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v7 + 8));
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v7);
  sub_1000AF6E0(v7, v10);
  v12 = *v3;
  *v3 = v10;
  swift_bridgeObjectRelease(v12);
  return v11;
}

uint64_t sub_1000AFB30()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 65, 7);
}

uint64_t sub_1000AFB6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_QWORD *)(v1 + 48);
  v9 = *(_QWORD *)(v1 + 56);
  v10 = *(_BYTE *)(v1 + 64);
  v11 = (_QWORD *)swift_task_alloc(dword_1001115FC);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_1000263E8;
  return sub_1000ADA40(a1, v4, v5, v6, v7, v8, v9, v10);
}

id sub_1000AFC00()
{
  uint64_t v0;
  id result;

  result = *(id *)(v0 + 16);
  if (result)
    return objc_msgSend(result, "setAlpha:", 0.0);
  return result;
}

uint64_t sub_1000AFC1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_1000AFC2C(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

id sub_1000AFC34()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "invalidate");
}

unint64_t sub_1000AFC44()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100111620;
  if (!qword_100111620)
  {
    v1 = sub_1000509C8(255, &qword_100111618, SBUIRemoteAlertButtonAction_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, &qword_100111620);
  }
  return result;
}

uint64_t sub_1000AFC9C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v5;
  _TtC13GameOverlayUI20GameOverlayUIService *v8;
  unint64_t v9;
  SEL v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  int isUniquelyReferenced_nonNull_native;
  const char *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  _TtC13GameOverlayUI20GameOverlayUIService *v27;
  SEL v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  _TtC13GameOverlayUI20GameOverlayUIService *v36;

  v5 = v3;
  v8 = (_TtC13GameOverlayUI20GameOverlayUIService *)*v5;
  swift_bridgeObjectRetain(*v5);
  v9 = sub_1000AAE54(a1, a2);
  LOBYTE(a2) = (_BYTE)v10;
  swift_bridgeObjectRelease(v8, v10, v11, v12, v13, v14, v15, v16);
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v5);
  v25 = *v5;
  v36 = (_TtC13GameOverlayUI20GameOverlayUIService *)*v5;
  *v5 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000AF018(a3);
    v25 = (uint64_t)v36;
  }
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(*(_QWORD *)(v25 + 48) + 16 * v9 + 8), v18, v19, v20, v21, v22, v23, v24);
  v26 = *(_QWORD *)(*(_QWORD *)(v25 + 56) + 8 * v9);
  sub_1000AF6E0(v9, v25);
  v27 = (_TtC13GameOverlayUI20GameOverlayUIService *)*v5;
  *v5 = v25;
  swift_bridgeObjectRelease(v27, v28, v29, v30, v31, v32, v33, v34);
  return v26;
}

uint64_t sub_1000AFD78(unint64_t a1)
{
  Swift::Int *v1;
  Swift::Int *v2;
  Swift::Int v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  const char *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  char v16;
  char v17;
  SEL v18;
  char v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  _TtC13GameOverlayUI20GameOverlayUIService *v28;
  SEL v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  Swift::Int v37;

  v2 = v1;
  v4 = *v1;
  if ((v4 & 0xC000000000000001) == 0)
  {
LABEL_8:
    swift_bridgeObjectRetain(v4);
    a1 = sub_1000AAEE8(a1);
    v19 = (char)v18;
    swift_bridgeObjectRelease((_TtC13GameOverlayUI20GameOverlayUIService *)v4, v18, v20, v21, v22, v23, v24, v25);
    if ((v19 & 1) != 0)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
      v4 = *v2;
      v37 = *v2;
      *v2 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        sub_1000AF1C4();
        v4 = v37;
      }
      goto LABEL_11;
    }
    return 0;
  }
  if (v4 < 0)
    v5 = v4;
  else
    v5 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v4);
  v6 = (id)a1;
  v7 = __CocoaDictionary.lookup(_:)();

  if (!v7)
  {
    swift_bridgeObjectRelease((_TtC13GameOverlayUI20GameOverlayUIService *)v4, v8, v9, v10, v11, v12, v13, v14);
    return 0;
  }
  swift_unknownObjectRelease(v7);
  v15 = __CocoaDictionary.count.getter(v5);
  v4 = sub_100055588(v5, v15);
  swift_retain(v4);
  a1 = sub_1000AAEE8((uint64_t)v6);
  v17 = v16;
  swift_release(v4);
  if ((v17 & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
LABEL_11:

  v27 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * a1);
  sub_1000AF8B4(a1, v4);
  v28 = (_TtC13GameOverlayUI20GameOverlayUIService *)*v2;
  *v2 = v4;
  swift_bridgeObjectRelease(v28, v29, v30, v31, v32, v33, v34, v35);
  return v27;
}

void sub_1000AFEC4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_1000AFED0(a1, a2, a3, a4, &qword_100111670);
}

void sub_1000AFED0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  v7 = v5;
  v12 = *v5;
  v14 = sub_1000AAE54(a2, a3);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v18 = v13;
  v19 = *(_QWORD *)(v12 + 24);
  if (v19 >= v17 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v19 >= v17 && (a4 & 1) == 0)
  {
    sub_1000AF018(a5);
LABEL_7:
    v20 = (_QWORD *)*v7;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7];
      swift_release(*(_QWORD *)(v21 + 8 * v14));
      *(_QWORD *)(v21 + 8 * v14) = a1;
      return;
    }
LABEL_11:
    v20[(v14 >> 6) + 8] |= 1 << v14;
    v24 = (uint64_t *)(v20[6] + 16 * v14);
    *v24 = a2;
    v24[1] = a3;
    *(_QWORD *)(v20[7] + 8 * v14) = a1;
    v25 = v20[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (!v26)
    {
      v20[2] = v27;
      swift_bridgeObjectRetain(a3);
      return;
    }
    goto LABEL_14;
  }
  sub_1000AE200(v17, a4 & 1, a5);
  v22 = sub_1000AAE54(a2, a3);
  if ((v18 & 1) == (v23 & 1))
  {
    v14 = v22;
    v20 = (_QWORD *)*v7;
    if ((v18 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_1000B0044(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  id v23;
  uint64_t v24;

  v4 = v3;
  v7 = *v3;
  v9 = sub_1000AAEE8((uint64_t)a2);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v13 = v8;
  v14 = *(_QWORD *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_1000AF1C4();
LABEL_7:
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
    {
LABEL_8:
      v16 = v15[7];
      swift_release(*(_QWORD *)(v16 + 8 * v9));
      *(_QWORD *)(v16 + 8 * v9) = a1;
      return;
    }
LABEL_11:
    v15[(v9 >> 6) + 8] |= 1 << v9;
    v19 = 8 * v9;
    *(_QWORD *)(v15[6] + v19) = a2;
    *(_QWORD *)(v15[7] + v19) = a1;
    v20 = v15[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (!v21)
    {
      v15[2] = v22;
      v23 = a2;
      return;
    }
    goto LABEL_14;
  }
  sub_1000AE510(v12, a3 & 1);
  v17 = sub_1000AAEE8((uint64_t)a2);
  if ((v13 & 1) == (v18 & 1))
  {
    v9 = v17;
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  v24 = sub_1000509C8(0, (unint64_t *)&qword_100111750, SBSRemoteAlertHandle_ptr);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v24);
  __break(1u);
}

void sub_1000B01A4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v5 = v4;
  v10 = *v4;
  v12 = sub_1000AAE54(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1000AF36C();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];

      *(_QWORD *)(v19 + 8 * v12) = a1;
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v22 = (uint64_t *)(v18[6] + 16 * v12);
    *v22 = a2;
    v22[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v23 = v18[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      swift_bridgeObjectRetain(a3);
      return;
    }
    goto LABEL_14;
  }
  sub_1000AE7E4(v15, a4 & 1);
  v20 = sub_1000AAE54(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    v12 = v20;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_1000B0300(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  void *v4;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  id v17;
  char v18;
  uint64_t v19;
  id v20;
  char v21;
  id v22;
  uint64_t v23;
  void *v24;

  v7 = a1;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if ((a3 & 1) != 0)
      goto LABEL_13;
    if (a1 < 0 || 1 << *(_BYTE *)(a4 + 32) <= a1)
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(a4 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> a1) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
        goto LABEL_20;
      __break(1u);
LABEL_13:
      if (__CocoaSet.Index.age.getter(a1, a2) == *(_DWORD *)(a4 + 36))
      {
        v12 = __CocoaSet.Index.element.getter(v7, a2);
        v23 = v12;
        v13 = sub_1000509C8(0, &qword_100111618, SBUIRemoteAlertButtonAction_ptr);
        swift_unknownObjectRetain(v12, v14);
        swift_dynamicCast(&v24, &v23, (char *)&type metadata for Swift.AnyObject + 8, v13, 7);
        v4 = v24;
        swift_unknownObjectRelease(v12);
        v15 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a4 + 40));
        v16 = -1 << *(_BYTE *)(a4 + 32);
        v7 = v15 & ~v16;
        if (((*(_QWORD *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
        {
          v17 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
          v18 = static NSObject.== infix(_:_:)(v17);

          if ((v18 & 1) == 0)
          {
            v19 = ~v16;
            do
            {
              v7 = (v7 + 1) & v19;
              if (((*(_QWORD *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
                goto LABEL_24;
              v20 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
              v21 = static NSObject.== infix(_:_:)(v20);

            }
            while ((v21 & 1) == 0);
          }

LABEL_20:
          v22 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
          return;
        }
LABEL_24:

        __break(1u);
        goto LABEL_25;
      }
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    __break(1u);
    goto LABEL_23;
  }
  if ((a3 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    return;
  }
  if (a4 < 0)
    v8 = a4;
  else
    v8 = a4 & 0xFFFFFFFFFFFFFF8;
  v9 = __CocoaSet.element(at:)(a1, a2, v8);
  v23 = v9;
  v10 = sub_1000509C8(0, &qword_100111618, SBUIRemoteAlertButtonAction_ptr);
  swift_unknownObjectRetain(v9, v11);
  swift_dynamicCast(&v24, &v23, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
  swift_unknownObjectRelease(v9);
}

uint64_t sub_1000B0568(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 72);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

void sub_1000B05F0(void *a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  _TtC13GameOverlayUI20GameOverlayUIService *v9;
  _TtC13GameOverlayUI20GameOverlayUIService *v10;
  SEL v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;

  if (qword_10010BAA0 != -1)
    swift_once(&qword_10010BAA0, sub_100004DCC);
  v2 = type metadata accessor for Logger(0);
  sub_100004E8C(v2, (uint64_t)qword_1001232D8);
  v18 = a1;
  v3 = Logger.logObject.getter(v18);
  v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v20 = v6;
    *(_DWORD *)v5 = 136315138;
    v7 = objc_msgSend(v18, "role");
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;

    v19 = sub_100031C58(v8, (unint64_t)v10, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20);

    swift_bridgeObjectRelease(v10, v11, v12, v13, v14, v15, v16, v17);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Scene willConnectTo session: %s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
}

uint64_t sub_1000B07DC(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v5;

  __chkstk_darwin(a1);
  v2 = (char *)&v5 - v1;
  (*(void (**)(char *))(v3 + 16))((char *)&v5 - v1);
  return UIHostingController.init(rootView:)(v2);
}

id sub_1000B0858(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _TtC13GameOverlayUI20GameOverlayUIService *v9;
  _TtC13GameOverlayUI20GameOverlayUIService *v10;
  char v11;
  char v12;
  id v13;
  void *v14;
  id result;
  void *v16;
  id v17;
  SEL v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  _TtC13GameOverlayUI20GameOverlayUIService *v31;

  v4 = static HorizontalAlignment.center.getter(a1);
  v25 = a1;
  v26 = a2;
  v5 = sub_10001B308();
  swift_bridgeObjectRetain(a2);
  v6 = Text.init<A>(_:)(&v25, &type metadata for String, v5);
  v8 = v7;
  v10 = v9;
  v12 = v11 & 1;
  v13 = objc_allocWithZone((Class)sub_100003304(&qword_100111748));
  v25 = v4;
  v26 = 0;
  v27 = 1;
  v28 = v6;
  v29 = v8;
  v30 = v12;
  v31 = v10;
  swift_bridgeObjectRetain(v10);
  sub_10001B35C(v6, v8, v12);
  v14 = (void *)UIHostingController.init(rootView:)(&v25);
  result = objc_msgSend(v14, "view");
  if (result)
  {
    v16 = result;
    v17 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
    objc_msgSend(v16, "setBackgroundColor:", v17);
    sub_10001B34C(v6, v8, v12);

    swift_bridgeObjectRelease(v10, v18, v19, v20, v21, v22, v23, v24);
    return v14;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1000B09A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  void *v18;
  void (*v19)(char *, uint64_t);
  id result;
  void *v21;
  id v22;
  uint64_t v23;

  v6 = type metadata accessor for ActivitySharingRepromptOverlayView(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v23 - v11;
  __chkstk_darwin(v13);
  v15 = (char *)&v23 - v14;
  v16 = swift_allocObject(&unk_100101C58, 24, 7);
  swift_unknownObjectWeakInit(v16 + 16, a1);
  swift_bridgeObjectRetain(a3);
  ActivitySharingRepromptOverlayView.init(recipientName:dismissAction:)(a2, a3, sub_1000B3A7C, v16);
  v17 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v17(v12, v15, v6);
  objc_allocWithZone((Class)sub_100003304(&qword_100111698));
  v17(v9, v12, v6);
  v18 = (void *)UIHostingController.init(rootView:)(v9);
  v19 = *(void (**)(char *, uint64_t))(v7 + 8);
  v19(v12, v6);
  result = objc_msgSend(v18, "view");
  if (result)
  {
    v21 = result;
    v22 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
    objc_msgSend(v21, "setBackgroundColor:", v22);

    v19(v15, v6);
    return v18;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1000B0B70(unsigned __int8 *a1, int a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  int v21;
  void *v22;
  id v23;
  _TtC13GameOverlayUI20GameOverlayUIService *v24;
  const char *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  id v36;
  id v37;
  unsigned __int8 *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  void (*v54)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v55;
  uint64_t v56;
  id v57;
  _BYTE *v58;
  void *v59;
  void (*v60)(_BYTE *, uint64_t);
  id result;
  void *v62;
  id v63;
  _BYTE v64[4];
  int v65;
  _BYTE *v66;
  id v67;
  int v68;
  uint64_t v69;
  _BYTE *v70;
  _BYTE *v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  void *v78;
  __int128 v79;
  __int128 v80;
  unint64_t v81;

  v67 = a3;
  v68 = a2;
  v4 = type metadata accessor for ColorScheme(0);
  v74 = *(_QWORD *)(v4 - 8);
  v75 = v4;
  __chkstk_darwin(v4);
  v72 = &v64[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_100003304(&qword_1001116A0);
  __chkstk_darwin(v6);
  v8 = &v64[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for AccessPointView(0);
  __chkstk_darwin(v9);
  v11 = &v64[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v69 = sub_100003304(&qword_1001116A8);
  __chkstk_darwin(v69);
  v13 = &v64[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v77 = sub_100003304(&qword_1001116B0);
  v73 = *(_QWORD *)(v77 - 8);
  __chkstk_darwin(v77);
  v71 = &v64[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v15);
  v70 = &v64[-v16];
  __chkstk_darwin(v17);
  v76 = &v64[-v18];
  KeyPath = swift_getKeyPath(&unk_1000CE488);
  *(_QWORD *)&v79 = a1;
  v20 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v79, KeyPath, v20);
  swift_release(KeyPath);
  v21 = a1[OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__didReturnToForeground];
  if ((v21 & 1) == 0)
  {
    *((_QWORD *)&v80 + 1) = &type metadata for GameOverlayUIFeatureFlags;
    v81 = sub_100004EA4();
    LOBYTE(v79) = 0;
    isFeatureEnabled(_:)(&v79);
    sub_100004624(&v79);
  }
  v65 = v21 ^ 1;
  v22 = (void *)objc_opt_self(GKLocalPlayer);
  v23 = objc_msgSend(v22, "authenticatedLocalPlayers");
  v24 = (_TtC13GameOverlayUI20GameOverlayUIService *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v23, (char *)&type metadata for Any + 8);

  if (v24[1].super.isa)
  {
    sub_100031EE0((uint64_t)&v24[2], (uint64_t)&v79);
  }
  else
  {
    v79 = 0u;
    v80 = 0u;
  }
  swift_bridgeObjectRelease(v24, v25, v26, v27, v28, v29, v30, v31);
  v66 = v13;
  if (*((_QWORD *)&v80 + 1))
  {
    v32 = sub_1000509C8(0, (unint64_t *)&qword_1001116E0, GKLocalPlayer_ptr);
    if (swift_dynamicCast(&v78, &v79, (char *)&type metadata for Any + 8, v32, 6))
    {
      v33 = v20;
      v34 = v78;
      goto LABEL_11;
    }
  }
  else
  {
    sub_100010ED0((uint64_t)&v79, &qword_10010EB30);
  }
  v33 = v20;
  v34 = objc_msgSend(v22, "currentLocalPlayer");
LABEL_11:
  v35 = swift_getKeyPath(&unk_1000CE4B0);
  *(_QWORD *)&v79 = a1;
  v36 = v67;
  v37 = v67;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v79, v35, v33);
  swift_release(v35);
  v38 = &a1[OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__anchoring];
  swift_beginAccess(&a1[OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__anchoring], &v79, 0, 0);
  v39 = type metadata accessor for AccessPointAnchoring(0);
  v40 = *(_QWORD *)(v39 - 8);
  (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v40 + 16))(v8, v38, v39);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v8, 0, 1, v39);
  v41 = swift_getKeyPath(&unk_1000CE4D8);
  v78 = a1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v78, v41, v33);
  swift_release(v41);
  sub_100095CF8(v34, v36, (uint64_t)v8, v68, v65, a1[OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__newToGameCenter], (uint64_t)v11);
  v42 = swift_getKeyPath(&unk_1000CE500);
  v44 = v74;
  v43 = v75;
  v45 = v72;
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v74 + 104))(v72, enum case for ColorScheme.dark(_:), v75);
  v46 = v69;
  v47 = (uint64_t)v66;
  v48 = (uint64_t *)&v66[*(int *)(v69 + 36)];
  v49 = sub_100003304(&qword_1001116B8);
  (*(void (**)(char *, _BYTE *, uint64_t))(v44 + 16))((char *)v48 + *(int *)(v49 + 28), v45, v43);
  *v48 = v42;
  sub_100007878((uint64_t)v11, v47, type metadata accessor for AccessPointView);
  (*(void (**)(_BYTE *, uint64_t))(v44 + 8))(v45, v43);
  sub_1000106F0((uint64_t)v11, type metadata accessor for AccessPointView);
  v50 = type metadata accessor for RemoteAlertAccessPointContext(0);
  v51 = sub_1000B3B00();
  v52 = v76;
  View.environment<A>(_:)(a1, v46, v50, v51, v33);
  sub_100010ED0(v47, &qword_1001116A8);
  v53 = v73;
  v54 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v73 + 16);
  v55 = v70;
  v56 = v77;
  v54(v70, v52, v77);
  v57 = objc_allocWithZone((Class)sub_100003304(&qword_1001116D8));
  v58 = v71;
  v54(v71, v55, v56);
  v59 = (void *)UIHostingController.init(rootView:)(v58);
  v60 = *(void (**)(_BYTE *, uint64_t))(v53 + 8);
  v60(v55, v56);
  result = objc_msgSend(v59, "view");
  if (result)
  {
    v62 = result;
    v63 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
    objc_msgSend(v62, "setBackgroundColor:", v63);

    v60(v52, v56);
    return v59;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1000B113C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t KeyPath;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  id v46;
  char *v47;
  void *v48;
  void (*v49)(char *, uint64_t);
  id result;
  void *v51;
  id v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;

  v64 = a4;
  v65 = a8;
  v62 = a2;
  v58 = a6;
  v59 = a9;
  v57 = a10;
  v63 = type metadata accessor for ColorScheme(0);
  v61 = *(_QWORD *)(v63 - 8);
  __chkstk_darwin(v63);
  v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for InGameBannerView(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = sub_100003304(&qword_100111708);
  __chkstk_darwin(v56);
  v20 = (char *)&v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = sub_100003304(&qword_100111710);
  v66 = *(_QWORD *)(v60 - 8);
  __chkstk_darwin(v60);
  v67 = (char *)&v53 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v24 = (char *)&v53 - v23;
  __chkstk_darwin(v25);
  v54 = (char *)&v53 - v26;
  KeyPath = swift_getKeyPath(&unk_1000CE458);
  v68 = a1;
  v53 = a1;
  v55 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v68, KeyPath, v55);
  swift_release(KeyPath);
  LODWORD(a1) = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__useCase);
  v28 = a5;
  swift_bridgeObjectRetain(a5);
  swift_bridgeObjectRetain(a3);
  v29 = v58;
  v30 = a7;
  sub_100019F80(v58, a7);
  v31 = v57;
  v32 = v57;
  v33 = swift_bridgeObjectRetain(v59);
  sub_1000583D8(a1, v62, a3, v64, v28, v29, v30, v65, (uint64_t)v18, v33, v31);
  v34 = swift_getKeyPath(&unk_1000CE500);
  v35 = v61;
  v36 = v63;
  (*(void (**)(char *, _QWORD, uint64_t))(v61 + 104))(v15, enum case for ColorScheme.dark(_:), v63);
  v37 = v56;
  v38 = (uint64_t *)&v20[*(int *)(v56 + 36)];
  v39 = sub_100003304(&qword_1001116B8);
  (*(void (**)(char *, char *, uint64_t))(v35 + 16))((char *)v38 + *(int *)(v39 + 28), v15, v36);
  *v38 = v34;
  v40 = v54;
  sub_100007878((uint64_t)v18, (uint64_t)v20, type metadata accessor for InGameBannerView);
  v41 = v60;
  (*(void (**)(char *, uint64_t))(v35 + 8))(v15, v36);
  sub_1000106F0((uint64_t)v18, type metadata accessor for InGameBannerView);
  v42 = type metadata accessor for RemoteAlertAccessPointContext(0);
  v43 = sub_1000B3D64();
  View.environment<A>(_:)(v53, v37, v42, v43, v55);
  sub_100010ED0((uint64_t)v20, &qword_100111708);
  v44 = v66;
  v45 = *(void (**)(char *, char *, uint64_t))(v66 + 16);
  v45(v24, v40, v41);
  v46 = objc_allocWithZone((Class)sub_100003304(&qword_100111728));
  v47 = v67;
  v45(v67, v24, v41);
  v48 = (void *)UIHostingController.init(rootView:)(v47);
  v49 = *(void (**)(char *, uint64_t))(v44 + 8);
  v49(v24, v41);
  result = objc_msgSend(v48, "view");
  if (result)
  {
    v51 = result;
    v52 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
    objc_msgSend(v51, "setBackgroundColor:", v52);

    v49(v40, v41);
    return v48;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1000B1558(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (**v17)();
  uint64_t v18;
  uint64_t v19;
  uint64_t KeyPath;
  id v21;
  id v22;
  uint64_t v23;
  void *v24;
  id result;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;

  v2 = v1;
  v28 = sub_100003304(&qword_1001116B8);
  __chkstk_darwin(v28);
  v5 = (uint64_t *)((char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for ColorScheme(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003304(&qword_100111730);
  __chkstk_darwin(v10);
  v29 = (uint64_t)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v28 - v13;
  __chkstk_darwin(v15);
  v17 = (void (**)())((char *)&v28 - v16);
  v18 = swift_allocObject(&unk_100101C58, 24, 7);
  swift_unknownObjectWeakInit(v18 + 16, a1);
  v19 = swift_allocObject(&unk_100101E60, 32, 7);
  *(_QWORD *)(v19 + 16) = v2;
  *(_QWORD *)(v19 + 24) = v18;
  KeyPath = swift_getKeyPath(&unk_1000CE500);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for ColorScheme.dark(_:), v6);
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))((char *)v5 + *(int *)(v28 + 28), v9, v6);
  *v5 = KeyPath;
  sub_100010CBC((uint64_t)v5, (uint64_t)v17 + *(int *)(v10 + 36), &qword_1001116B8);
  *v17 = sub_1000B3E14;
  v17[1] = (void (*)())v19;
  v21 = v2;
  swift_retain(v19);
  sub_100010ED0((uint64_t)v5, &qword_1001116B8);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  swift_release(v19);
  sub_100010CBC((uint64_t)v17, (uint64_t)v14, &qword_100111730);
  v22 = objc_allocWithZone((Class)sub_100003304(&qword_100111738));
  v23 = v29;
  sub_100010CBC((uint64_t)v14, v29, &qword_100111730);
  v24 = (void *)UIHostingController.init(rootView:)(v23);
  sub_100010ED0((uint64_t)v14, &qword_100111730);
  result = objc_msgSend(v24, "view");
  if (result)
  {
    v26 = result;
    v27 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
    objc_msgSend(v26, "setBackgroundColor:", v27);

    sub_100010ED0((uint64_t)v17, &qword_100111730);
    return v24;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1000B1840(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _TtC13GameOverlayUI20GameOverlayUIService *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  id v17;
  NSObject *v18;
  void *v19;
  id v20;
  void *v21;
  _TtC13GameOverlayUI20GameOverlayUIService *v22;
  _TtC13GameOverlayUI20GameOverlayUIService *v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  NSObject **v28;
  NSObject *v29;
  uint64_t v30;
  id v31;
  void *v32;
  id v33;
  _TtC13GameOverlayUI20GameOverlayUIService *v34;
  __int128 v35;
  const char *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  unint64_t v43;
  uint64_t v44;
  NSObject *v45;
  unsigned __int8 v46;
  NSObject *v47;
  NSObject *v48;
  unsigned __int8 v49;
  void *v50;
  _TtC13GameOverlayUI20GameOverlayUIService *v51;
  id v52;
  uint64_t v53;
  _TtC13GameOverlayUI20GameOverlayUIService *v54;
  _TtC13GameOverlayUI20GameOverlayUIService *v55;
  SEL v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  char *v63;
  id v64;
  _TtC13GameOverlayUI20GameOverlayUIService *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  const char *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  uint64_t v78;
  SEL v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  uint64_t v86;
  SEL v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  id v93;
  os_log_type_t v94;
  uint64_t v95;
  id v96;
  uint8_t *v97;
  uint8_t *v98;
  NSString v99;
  const char *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  id v108;
  const char *v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  NSObject *v123;
  _TtC13GameOverlayUI20GameOverlayUIService *v124;
  uint64_t v125;
  double v126;
  SEL v127;
  id v128;
  id v129;
  id v130;
  id v131;
  id v132;
  id v133;
  uint64_t v134;
  NSObject *v135;
  os_log_type_t v136;
  uint8_t *v137;
  uint64_t v138;
  objc_class *v139;
  objc_class *v140;
  objc_class *v141;
  NSObject *v142;
  os_log_type_t v143;
  uint8_t *v144;
  objc_class *v145;
  objc_class *v146;
  _TtC13GameOverlayUI20GameOverlayUIService *v147;
  uint64_t v148;
  SEL v149;
  id v150;
  id v151;
  id v152;
  id v153;
  id v154;
  id v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  _TtC13GameOverlayUI20GameOverlayUIService *v161;
  NSObject *p_super;
  _QWORD v163[3];
  uint64_t v164;
  _TtC13GameOverlayUI20GameOverlayUIService *v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  uint64_t v170;
  Swift::String v171;

  v2 = v1;
  v4 = sub_100003304(&qword_10010EB20);
  __chkstk_darwin(v4);
  v6 = (char *)&v156 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_opt_self(SBSUIRemoteAlertScene);
  v8 = swift_dynamicCastObjCClass(a1, v7);
  v9 = qword_10010BAA0;
  if (!v8)
  {
    if (qword_10010BAA0 != -1)
      swift_once(&qword_10010BAA0, sub_100004DCC);
    v24 = type metadata accessor for Logger(0);
    sub_100004E8C(v24, (uint64_t)qword_1001232D8);
    p_super = a1;
    v25 = Logger.logObject.getter(p_super);
    v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(12, -1);
      v28 = (NSObject **)swift_slowAlloc(8, -1);
      *(_DWORD *)v27 = 138412290;
      *(_QWORD *)&v168 = p_super;
      v29 = p_super;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v168, (char *)&v168 + 8);
      *v28 = p_super;

      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Expected scene to be SBSUIRemoteAlertScene but got %@", v27, 0xCu);
      v30 = sub_100003304(&qword_10010EB00);
      swift_arrayDestroy(v28, 1, v30);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);

    }
    else
    {

    }
    return;
  }
  v10 = (_TtC13GameOverlayUI20GameOverlayUIService *)v8;
  v159 = v6;
  v11 = a1;
  if (v9 != -1)
    swift_once(&qword_10010BAA0, sub_100004DCC);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_100004E8C(v12, (uint64_t)qword_1001232D8);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Remote Alert scene will connect", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }

  v17 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for GameOverlayWindow()), "initWithWindowScene:", v10);
  v18 = OBJC_IVAR____TtC13GameOverlayUI37GameOverlayUIRemoteAlertSceneDelegate_window;
  v19 = *(void **)(v2 + OBJC_IVAR____TtC13GameOverlayUI37GameOverlayUIRemoteAlertSceneDelegate_window);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC13GameOverlayUI37GameOverlayUIRemoteAlertSceneDelegate_window) = v17;

  v20 = -[GameOverlayUIService configurationIdentifier](v10, "configurationIdentifier");
  if (v20)
  {
    v21 = v20;
    v160 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

  }
  else
  {
    v160 = 0;
    v23 = 0;
  }
  p_super = v18;
  v31 = -[GameOverlayUIService activationContext](v10, "activationContext");
  if (!v31
    || (v32 = v31, v33 = objc_msgSend(v31, "userInfo"), v32, !v33))
  {
    v170 = 0;
    v35 = 0uLL;
    v168 = 0u;
    v169 = 0u;
    goto LABEL_20;
  }
  v34 = (_TtC13GameOverlayUI20GameOverlayUIService *)static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v33, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

  v170 = 0;
  v35 = 0uLL;
  v168 = 0u;
  v169 = 0u;
  if (!v34)
  {
LABEL_20:
    v166 = v35;
    v167 = v35;
LABEL_21:
    sub_100010ED0((uint64_t)&v166, &qword_10010EB30);
    goto LABEL_22;
  }
  v163[0] = 0xD000000000000011;
  v163[1] = 0x80000001000D0220;
  AnyHashable.init<A>(_:)(&v164, v163, &type metadata for String, &protocol witness table for String);
  if (v34[1].super.isa && (v43 = sub_1000AAEB8((uint64_t)&v164), (v36 & 1) != 0))
  {
    sub_100031EE0(*(_QWORD *)v34[3].listener + 32 * v43, (uint64_t)&v166);
  }
  else
  {
    v166 = 0u;
    v167 = 0u;
  }
  swift_bridgeObjectRelease(v34, v36, v37, v38, v39, v40, v41, v42);
  sub_100065BE8((uint64_t)&v164);
  if (!*((_QWORD *)&v167 + 1))
    goto LABEL_21;
  if ((swift_dynamicCast(&v164, &v166, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
    goto LABEL_22;
  v64 = v11;
  v66 = v164;
  v65 = v165;
  if (qword_10010BBD8 != -1)
    swift_once(&qword_10010BBD8, sub_1000B47F0);
  v67 = qword_1001233E8;
  v68 = qword_1001233E8 + 16;
  swift_beginAccess(qword_1001233E8 + 16, &v164, 32, 0);
  v69 = *(_QWORD *)(v67 + 16);
  if (!*(_QWORD *)(v69 + 16))
  {
LABEL_63:
    swift_endAccess(&v164);
    swift_bridgeObjectRelease(v65, v149, v150, v151, v152, v153, v154, v155);
    v11 = v64;
LABEL_22:
    v44 = 0;
    v45 = p_super;
    if (!v23)
      goto LABEL_24;
    goto LABEL_23;
  }
  swift_bridgeObjectRetain(v65);
  v70 = sub_1000AAE54(v66, (uint64_t)v65);
  if ((v71 & 1) == 0)
  {
    swift_bridgeObjectRelease(v65, v71, v72, v73, v74, v75, v76, v77);
    goto LABEL_63;
  }
  v78 = *(_QWORD *)(*(_QWORD *)(v69 + 56) + 8 * v70);
  swift_endAccess(&v164);
  swift_retain(v78);
  swift_bridgeObjectRelease(v65, v79, v80, v81, v82, v83, v84, v85);
  swift_beginAccess(v68, &v164, 33, 0);
  v86 = sub_1000AFC9C(v66, (uint64_t)v65, &qword_100111670);
  swift_endAccess(&v164);
  swift_bridgeObjectRelease(v65, v87, v88, v89, v90, v91, v92, v93);
  swift_release(v86);
  v11 = v64;
  v44 = v78;
  v45 = p_super;
  if (!v23)
    goto LABEL_24;
LABEL_23:
  swift_bridgeObjectRetain(v23);
  v171._countAndFlagsBits = v160;
  v171._object = v23;
  v46 = sub_1000722F8(v171);
  if (v46 != 8)
  {
    v49 = v46;
    if (v44 && (v50 = *(void **)(v44 + 16)) != 0)
    {
      v161 = v10;
      v51 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v44 + 112);
      swift_bridgeObjectRetain(v51);
      v52 = v50;
      sub_1000B3EFC(v49);
      v158 = v53;
      v55 = v54;

      swift_bridgeObjectRelease(v51, v56, v57, v58, v59, v60, v61, v62);
    }
    else
    {
      v158 = 0;
      v55 = 0;
    }
    v63 = (char *)&loc_1000B1D48 + *((int *)qword_1000B34C0 + v49);
    v161 = v55;
    __asm { BR              X10 }
  }
LABEL_24:
  v158 = 0;
  v161 = 0;
  v47 = *(NSObject **)((char *)&v45->isa + v2);
  if (v47
    && (-[NSObject makeKeyAndVisible](v47, "makeKeyAndVisible"), (v47 = *(NSObject **)((char *)&v45->isa + v2)) != 0)
    && (v47 = -[NSObject _rootSheetPresentationController](v47, "_rootSheetPresentationController")) != 0)
  {
    v48 = v47;
    -[NSObject _setShouldScaleDownBehindDescendantSheets:](v47, "_setShouldScaleDownBehindDescendantSheets:", 0);
  }
  else
  {
    v48 = Logger.logObject.getter(v47);
    v94 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v48, v94))
    {
      v95 = v44;
      v96 = v11;
      v97 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v97 = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, v94, "_rootSheetPresentationController was unexpectedly nil.", v97, 2u);
      v98 = v97;
      v11 = v96;
      v44 = v95;
      swift_slowDealloc(v98, -1, -1);
    }
  }

  v99 = String._bridgeToObjectiveC()();
  -[GameOverlayUIService setIdleTimerDisabled:forReason:](v10, "setIdleTimerDisabled:forReason:", 1, v99);

  -[GameOverlayUIService setContentOpaque:](v10, "setContentOpaque:", 0);
  -[GameOverlayUIService setAllowsAlertStacking:](v10, "setAllowsAlertStacking:", 1);
  -[GameOverlayUIService setSwipeDismissalStyle:](v10, "setSwipeDismissalStyle:", 0);
  -[GameOverlayUIService setAllowsMenuButtonDismissal:](v10, "setAllowsMenuButtonDismissal:", 0);
  -[GameOverlayUIService setSceneDeactivationReason:](v10, "setSceneDeactivationReason:", 0);
  if (!v44)
    goto LABEL_51;
  v107 = *(void **)(v44 + 16);
  if (!v107)
    goto LABEL_51;
  v108 = v107;
  if ((sub_1000B40A0() & 1) == 0)
  {

LABEL_51:
    swift_bridgeObjectRelease(v161, v100, v101, v102, v103, v104, v105, v106);
    swift_bridgeObjectRelease(v23, v127, v128, v129, v130, v131, v132, v133);
    v135 = Logger.logObject.getter(v134);
    v136 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v135, v136))
    {
      v137 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v137 = 0;
      _os_log_impl((void *)&_mh_execute_header, v135, v136, "Invalidating remote alert scene because the client is no longer valid.", v137, 2u);
      swift_slowDealloc(v137, -1, -1);
    }

    -[GameOverlayUIService invalidate](v10, "invalidate");
    sub_100010ED0((uint64_t)&v168, &qword_10010E3A8);
    v138 = v44;
    goto LABEL_54;
  }
  if (v161)
  {
    sub_100010CBC((uint64_t)&v168, (uint64_t)&v164, &qword_10010E3A8);
    v116 = type metadata accessor for RemoteSceneManager.WeakScene();
    v117 = swift_allocObject(v116, 72, 7);
    swift_unknownObjectWeakInit(v117 + 16, 0);
    p_super = &v23->super;
    swift_unknownObjectWeakInit(v117 + 24, 0);
    *(_QWORD *)(v117 + 64) = 0;
    *(_OWORD *)(v117 + 48) = 0u;
    *(_OWORD *)(v117 + 32) = 0u;
    swift_unknownObjectWeakAssign(v117 + 16);
    swift_unknownObjectWeakAssign(v117 + 24);
    swift_beginAccess(v117 + 32, &v166, 33, 0);
    sub_100050730((uint64_t)&v164, v117 + 32);
    swift_endAccess(&v166);
    v118 = type metadata accessor for TaskPriority(0);
    v119 = (uint64_t)v159;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v118 - 8) + 56))(v159, 1, 1, v118);
    type metadata accessor for MainActor(0);
    v120 = swift_retain(v117);
    v121 = static MainActor.shared.getter(v120);
    v122 = (_QWORD *)swift_allocObject(&unk_100101C30, 72, 7);
    v122[2] = v121;
    v122[3] = &protocol witness table for MainActor;
    v123 = p_super;
    v122[4] = v160;
    v122[5] = v123;
    v124 = v161;
    v122[6] = v158;
    v122[7] = v124;
    v122[8] = v117;
    v125 = sub_100028240(v119, (uint64_t)&unk_100111630, (uint64_t)v122);
    swift_release(v125);
    *(_QWORD *)&v126 = swift_release(v117).n128_u64[0];
  }
  else
  {
    swift_bridgeObjectRelease(v23, v109, v110, v111, v112, v113, v114, v115);
  }
  v139 = (objc_class *)-[GameOverlayUIService configurationContext](v10, "configurationContext", v126);
  if (v139)
  {
    v140 = v139;
    v157 = v44;
    v141 = v139;
    v142 = Logger.logObject.getter(v141);
    v143 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v142, v143))
    {
      p_super = v142;
      v144 = (uint8_t *)swift_slowAlloc(12, -1);
      v161 = (_TtC13GameOverlayUI20GameOverlayUIService *)swift_slowAlloc(8, -1);
      *(_DWORD *)v144 = 138412290;
      v164 = (uint64_t)v141;
      v145 = v141;
      v146 = (objc_class *)v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v164, &v165);
      v147 = v161;
      v161->super.isa = v140;

      v142 = p_super;
      _os_log_impl((void *)&_mh_execute_header, p_super, v143, "Remote alert scene got configuration context %@", v144, 0xCu);
      v148 = sub_100003304(&qword_10010EB00);
      swift_arrayDestroy(v147, 1, v148);
      swift_slowDealloc(v147, -1, -1);
      swift_slowDealloc(v144, -1, -1);
    }
    else
    {

      v146 = v141;
    }

    sub_100010ED0((uint64_t)&v168, &qword_10010E3A8);
    v138 = v157;
LABEL_54:
    swift_release(v138);
    return;
  }
  sub_100010ED0((uint64_t)&v168, &qword_10010E3A8);
  swift_release(v44);

}

void sub_1000B34E0()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  char *v12;
  _QWORD v13[5];
  uint64_t v14;

  v1 = v0;
  if (qword_10010BAA0 != -1)
    swift_once(&qword_10010BAA0, sub_100004DCC);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100004E8C(v2, (uint64_t)qword_1001232D8);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Remote alert scene sceneDidBecomeActive", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = *(void **)&v1[OBJC_IVAR____TtC13GameOverlayUI37GameOverlayUIRemoteAlertSceneDelegate_window];
  if (v7)
    objc_msgSend(v7, "setAlpha:", 0.0);
  v8 = (void *)objc_opt_self(UIView);
  v9 = swift_allocObject(&unk_100101BE0, 24, 7);
  *(_QWORD *)(v9 + 16) = v1;
  v13[4] = sub_1000B3884;
  v14 = v9;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_1000AB510;
  v13[3] = &unk_100101BF8;
  v10 = _Block_copy(v13);
  v11 = v14;
  v12 = v1;
  swift_release(v11);
  objc_msgSend(v8, "animateWithDuration:animations:", v10, 0.3);
  _Block_release(v10);
}

void sub_1000B367C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  void *v7;

  v1 = v0;
  if (qword_10010BAA0 != -1)
    swift_once(&qword_10010BAA0, sub_100004DCC);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100004E8C(v2, (uint64_t)qword_1001232D8);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Remote alert scene sceneDidDisconnect", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = *(void **)(v1 + OBJC_IVAR____TtC13GameOverlayUI37GameOverlayUIRemoteAlertSceneDelegate_window);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC13GameOverlayUI37GameOverlayUIRemoteAlertSceneDelegate_window) = 0;

}

void sub_1000B375C(_TtC13GameOverlayUI20GameOverlayUIService *a1)
{
  uint64_t v2;
  SEL v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  id v15;

  v2 = swift_bridgeObjectRetain(a1);
  v15 = (id)sub_1000AB404(v2);
  swift_bridgeObjectRelease(a1, v3, v4, v5, v6, v7, v8, v9);
  if (v15)
  {
    if ((objc_msgSend(v15, "events") & 2) != 0)
    {
      if (qword_10010BAA0 != -1)
        swift_once(&qword_10010BAA0, sub_100004DCC);
      v10 = type metadata accessor for Logger(0);
      v11 = sub_100004E8C(v10, (uint64_t)qword_1001232D8);
      v12 = Logger.logObject.getter(v11);
      v13 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v12, v13))
      {
        v14 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v14 = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "Remote alert scene got volume up press", v14, 2u);
        swift_slowDealloc(v14, -1, -1);
      }

    }
  }
}

uint64_t sub_1000B3878(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease(result);
  return result;
}

id sub_1000B3884()
{
  return sub_1000B3E40();
}

uint64_t sub_1000B388C()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  swift_release(v0[8]);
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1000B38C8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc(dword_10011162C);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_1000263E8;
  return sub_1000AC468(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1000B3974()
{
  uint64_t v0;

  return sub_1000A9380(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000B399C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_unknownObjectWeakDestroy(v2 + 16, a2);
  return swift_deallocObject(v2, 24, 7);
}

void sub_1000B39C4()
{
  uint64_t v0;

  sub_1000ACBAC(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

id sub_1000B39D0()
{
  return sub_1000B3E40();
}

void sub_1000B39DC(uint64_t a1)
{
  uint64_t v1;

  sub_1000AD034(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t)&unk_100101D48, (uint64_t)&unk_100111690, "Client does not appear to adopt the client side authentication protocol");
}

uint64_t sub_1000B3A10(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10011168C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1000252CC;
  return sub_1000ACD10(a1, v4, v5, v6);
}

void sub_1000B3A7C()
{
  uint64_t v0;

  sub_1000ACDFC(v0);
}

void sub_1000B3A84(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_1000AB748(a1, (uint64_t)&unk_1000CE488, &OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__didReturnToForeground, a2);
}

void sub_1000B3AB4(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_1000AB748(a1, (uint64_t)&unk_1000CE4D8, &OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__newToGameCenter, a2);
}

uint64_t sub_1000B3ADC()
{
  return EnvironmentValues.colorScheme.getter();
}

unint64_t sub_1000B3B00()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001116C0;
  if (!qword_1001116C0)
  {
    v1 = sub_100006E54(&qword_1001116A8);
    sub_1000035B4(&qword_1001116C8, type metadata accessor for AccessPointView, (uint64_t)&unk_1000CCF60);
    sub_1000B3B84();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001116C0);
  }
  return result;
}

unint64_t sub_1000B3B84()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001116D0;
  if (!qword_1001116D0)
  {
    v1 = sub_100006E54(&qword_1001116B8);
    result = swift_getWitnessTable(&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001116D0);
  }
  return result;
}

uint64_t sub_1000B3BD0()
{
  uint64_t v0;

  return sub_1000A8F34(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_1000B3BEC()
{
  uint64_t v0;

  return sub_1000A8E8C(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_1000B3C08()
{
  uint64_t v0;

  return sub_1000A8E10(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_1000B3C28()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_1000B3C5C()
{
  uint64_t v0;

  sub_1000ACED0(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1000B3C6C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1000B3C98(uint64_t a1)
{
  uint64_t v1;

  sub_1000AD034(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t)&unk_100101E38, (uint64_t)&unk_100111700, "Client does not appear to adopt the client side dashboard protocol");
}

uint64_t sub_1000B3CCC()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000B3CF8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1001116FC);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1000263E8;
  return sub_1000AD20C(a1, v4, v5, v6);
}

unint64_t sub_1000B3D64()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100111718;
  if (!qword_100111718)
  {
    v1 = sub_100006E54(&qword_100111708);
    sub_1000035B4(&qword_100111720, type metadata accessor for InGameBannerView, (uint64_t)&unk_1000C9FA0);
    sub_1000B3B84();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100111718);
  }
  return result;
}

uint64_t sub_1000B3DE8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1000B3E14()
{
  uint64_t v0;

  sub_1000AD2B8(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000B3E1C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_1000B3E40()
{
  uint64_t v0;
  id result;

  result = *(id *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC13GameOverlayUI37GameOverlayUIRemoteAlertSceneDelegate_window);
  if (result)
    return objc_msgSend(result, "setAlpha:");
  return result;
}

void sub_1000B3E64(uint64_t a1)
{
  uint64_t v1;

  sub_1000AD3F0(a1, v1);
}

void sub_1000B3EC0()
{
  sub_100049DEC();
}

uint64_t sub_1000B3ED4()
{
  return sub_1000492D8();
}

uint64_t sub_1000B3EE8()
{
  return sub_1000B3974();
}

void sub_1000B3EFC(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1000B3F64()
{
  void *v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  void *object;
  Swift::String v7;
  void *v8;
  Swift::String v9;
  uint64_t v11;

  v3._countAndFlagsBits = 0xD00000000000001DLL;
  v3._object = (void *)0x80000001000CF4A0;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(0x80000001000CF4A0);
  v4._countAndFlagsBits = 58;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  objc_msgSend(v2, "pid");
  v5._countAndFlagsBits = ((uint64_t (*)(void *, void *))dispatch thunk of CustomStringConvertible.description.getter)(&type metadata for Int32, &protocol witness table for Int32);
  object = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(object);
  v7._countAndFlagsBits = 58;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  if (v0)
  {
    v8 = v0;
  }
  else
  {
    v1 = 0;
    v8 = (void *)0xE000000000000000;
  }
  swift_bridgeObjectRetain(v0);
  v9._countAndFlagsBits = v1;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(v8);
  return v11;
}

uint64_t sub_1000B40A0()
{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  unsigned __int8 v10;
  id v12;
  uint64_t v13;
  id v14;

  v1 = objc_msgSend((id)objc_opt_self(BSProcessHandle), "processHandleForAuditToken:", v0);
  v2 = (void *)objc_opt_self(RBSProcessHandle);
  v14 = 0;
  v3 = v1;
  v4 = objc_msgSend(v2, "handleForLegacyHandle:error:", v3, &v14);
  v5 = v14;
  if (v4)
  {
    v6 = v4;
    v7 = v14;

    v8 = objc_msgSend(v6, "currentState");
    if (v8)
    {
      v9 = v8;
      v10 = objc_msgSend(v8, "isRunning");

      if ((v10 & 1) != 0)
        return 1;
    }
    else
    {

    }
  }
  else
  {
    v12 = v14;
    v13 = _convertNSErrorToError(_:)(v5);

    swift_willThrow();
    swift_errorRelease(v13);
  }
  return 0;
}

uint64_t sub_1000B41F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _TtC13GameOverlayUI20GameOverlayUIService *v11;
  _TtC13GameOverlayUI20GameOverlayUIService *v12;
  char isUniquelyReferenced_nonNull_native;
  _TtC13GameOverlayUI20GameOverlayUIService *v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  SEL v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  uint64_t v30;
  _BYTE v31[24];

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = &v31[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = UUID.init()(v6);
  v10 = UUID.uuidString.getter(v9);
  v12 = v11;
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
  swift_beginAccess(v2 + 16, v31, 33, 0);
  swift_bridgeObjectRetain(v12);
  swift_retain(a1);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v2 + 16));
  v30 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0x8000000000000000;
  sub_1000AFEC4(a1, v10, (uint64_t)v12, isUniquelyReferenced_nonNull_native);
  v14 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v2 + 16);
  *(_QWORD *)(v2 + 16) = v30;
  swift_bridgeObjectRelease(v12, v15, v16, v17, v18, v19, v20, v21);
  swift_bridgeObjectRelease(v14, v22, v23, v24, v25, v26, v27, v28);
  swift_endAccess(v31);
  return v10;
}

void sub_1000B4310(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1000B436C()
{
  void *v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  void *object;
  uint64_t v6;

  v1._countAndFlagsBits = 0xD00000000000001DLL;
  v1._object = (void *)0x80000001000CF4A0;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(0x80000001000CF4A0);
  v2._countAndFlagsBits = 58;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  objc_msgSend(v0, "pid");
  v3._countAndFlagsBits = ((uint64_t (*)(void *, void *))dispatch thunk of CustomStringConvertible.description.getter)(&type metadata for Int32, &protocol witness table for Int32);
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  return v6;
}

uint64_t sub_1000B4464(void *a1)
{
  uint64_t v1;
  id v3;
  id v4;
  _OWORD v6[2];
  _OWORD v7[2];

  *(_QWORD *)(v1 + 56) = &_swiftEmptyDictionarySingleton;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_QWORD *)(v1 + 112) = 0;
  if (a1)
  {
    *(_QWORD *)(v1 + 16) = objc_msgSend(a1, "remoteToken");
    v3 = objc_msgSend(a1, "remoteTarget");
    if (v3)
    {
      v4 = v3;
      _bridgeAnyObjectToAny(_:)(v6);
      swift_unknownObjectRelease(v4);

    }
    else
    {

      memset(v6, 0, sizeof(v6));
    }
    sub_100060574((uint64_t)v6, (uint64_t)v7);
  }
  else
  {
    *(_QWORD *)(v1 + 16) = 0;
    memset(v7, 0, sizeof(v7));
  }
  sub_100060574((uint64_t)v7, v1 + 24);
  return v1;
}

uint64_t sub_1000B4534()
{
  uint64_t v0;
  SEL v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;

  sub_100010ED0(v0 + 24, &qword_10010EB30);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v0 + 56), v1, v2, v3, v4, v5, v6, v7);
  sub_100010ED0(v0 + 64, &qword_10010E3A8);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v0 + 112), v8, v9, v10, v11, v12, v13, v14);
  return swift_deallocClassInstance(v0, 120, 7);
}

uint64_t type metadata accessor for ConnectionContext()
{
  return objc_opt_self(_TtC13GameOverlayUI17ConnectionContext);
}

uint64_t sub_1000B45A8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128));
  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 144));
}

uint64_t sub_1000B45C4()
{
  uint64_t v0;
  SEL v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  SEL v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;

  sub_100010ED0(v0 + 24, &qword_10010EB30);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v0 + 56), v1, v2, v3, v4, v5, v6, v7);
  sub_100010ED0(v0 + 64, &qword_10010E3A8);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v0 + 112), v8, v9, v10, v11, v12, v13, v14);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v0 + 128), v15, v16, v17, v18, v19, v20, v21);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v0 + 144), v22, v23, v24, v25, v26, v27, v28);
  return swift_deallocClassInstance(v0, 152, 7);
}

uint64_t type metadata accessor for AuthenticationConnectionContext()
{
  return objc_opt_self(_TtC13GameOverlayUI31AuthenticationConnectionContext);
}

uint64_t sub_1000B4648()
{
  return sub_1000B4768(128);
}

uint64_t type metadata accessor for AccessPointConnectionContext()
{
  return objc_opt_self(_TtC13GameOverlayUI28AccessPointConnectionContext);
}

void sub_1000B4670(uint64_t a1, const char *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t v8;
  SEL v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  SEL v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;

  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v8 + 128), a2, a3, a4, a5, a6, a7, a8);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v8 + 144), v9, v10, v11, v12, v13, v14, v15);
  sub_100038E18(*(_QWORD *)(v8 + 152), *(_QWORD *)(v8 + 160));
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v8 + 176), v16, v17, v18, v19, v20, v21, v22);

}

uint64_t sub_1000B46A4()
{
  uint64_t v0;
  SEL v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  SEL v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  SEL v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;

  sub_100010ED0(v0 + 24, &qword_10010EB30);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v0 + 56), v1, v2, v3, v4, v5, v6, v7);
  sub_100010ED0(v0 + 64, &qword_10010E3A8);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v0 + 112), v8, v9, v10, v11, v12, v13, v14);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v0 + 128), v15, v16, v17, v18, v19, v20, v21);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v0 + 144), v22, v23, v24, v25, v26, v27, v28);
  sub_100038E18(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160));
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v0 + 176), v29, v30, v31, v32, v33, v34, v35);

  return v0;
}

uint64_t sub_1000B4718()
{
  uint64_t v0;

  sub_1000B46A4();
  return swift_deallocClassInstance(v0, 192, 7);
}

uint64_t type metadata accessor for InGameBannerConnectionContext()
{
  return objc_opt_self(_TtC13GameOverlayUI29InGameBannerConnectionContext);
}

void sub_1000B4758()
{
  uint64_t v0;

}

uint64_t sub_1000B4760()
{
  return sub_1000B4768(129);
}

uint64_t sub_1000B4768(uint64_t a1)
{
  uint64_t v1;
  SEL v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  SEL v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;

  sub_100010ED0(v1 + 24, &qword_10010EB30);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v1 + 56), v3, v4, v5, v6, v7, v8, v9);
  sub_100010ED0(v1 + 64, &qword_10010E3A8);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v1 + 112), v10, v11, v12, v13, v14, v15, v16);

  return swift_deallocClassInstance(v1, a1, 7);
}

uint64_t type metadata accessor for DashboardConnectionContext()
{
  return objc_opt_self(_TtC13GameOverlayUI26DashboardConnectionContext);
}

uint64_t sub_1000B47F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v0 = type metadata accessor for ConnectionContextManager(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  *(_QWORD *)(v1 + 16) = &_swiftEmptyDictionarySingleton;
  v2 = v1 + OBJC_IVAR____TtC13GameOverlayUI24ConnectionContextManager_overlayBootstrap;
  sub_10000475C();
  result = sub_100003304(&qword_10010BE90);
  *(_QWORD *)(v2 + *(int *)(result + 28)) = 0;
  qword_1001233E8 = v1;
  return result;
}

uint64_t sub_1000B485C(uint64_t a1, const char *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  _TtC13GameOverlayUI20GameOverlayUIService **v8;

  swift_bridgeObjectRelease(v8[2], a2, a3, a4, a5, a6, a7, a8);
  sub_1000B4954((uint64_t)v8 + OBJC_IVAR____TtC13GameOverlayUI24ConnectionContextManager_overlayBootstrap);
  return swift_deallocClassInstance(v8, LODWORD((*v8)[3].super.isa), WORD2((*v8)[3].super.isa));
}

uint64_t sub_1000B4894()
{
  return type metadata accessor for ConnectionContextManager(0);
}

uint64_t type metadata accessor for ConnectionContextManager(uint64_t a1)
{
  uint64_t result;

  result = qword_100111D28;
  if (!qword_100111D28)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ConnectionContextManager);
  return result;
}

void sub_1000B48D8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  sub_100004C3C(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
  }
}

uint64_t sub_1000B4954(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for OverlayBootstrap(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000B4990(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  _OWORD v8[2];
  _OWORD v9[2];

  v2 = type metadata accessor for ConnectionContext();
  v3 = swift_allocObject(v2, 120, 7);
  v4 = v3;
  *(_QWORD *)(v3 + 56) = &_swiftEmptyDictionarySingleton;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_QWORD *)(v3 + 112) = 0;
  if (a1)
  {
    *(_QWORD *)(v3 + 16) = objc_msgSend(a1, "remoteToken");
    v5 = objc_msgSend(a1, "remoteTarget");
    if (v5)
    {
      v6 = v5;
      _bridgeAnyObjectToAny(_:)(v8);
      swift_unknownObjectRelease(v6);

    }
    else
    {

      memset(v8, 0, sizeof(v8));
    }
    sub_100060574((uint64_t)v8, (uint64_t)v9);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = 0;
    memset(v9, 0, sizeof(v9));
  }
  sub_100060574((uint64_t)v9, v4 + 24);
  return v4;
}

_WORD *sub_1000B4A7C(_WORD *a1, uint64_t *a2, uint64_t a3)
{
  _WORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  unsigned int (*v36)(const void *, uint64_t, uint64_t);
  char *__dst;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = (_WORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    *a1 = *(_WORD *)a2;
    v7 = a2[2];
    *((_QWORD *)v4 + 1) = a2[1];
    *((_QWORD *)v4 + 2) = v7;
    v8 = a2[4];
    *((_QWORD *)v4 + 3) = a2[3];
    *((_QWORD *)v4 + 4) = v8;
    v9 = a2[6];
    *((_QWORD *)v4 + 5) = a2[5];
    *((_QWORD *)v4 + 6) = v9;
    v10 = a2[8];
    *((_QWORD *)v4 + 7) = a2[7];
    *((_QWORD *)v4 + 8) = v10;
    v11 = a2[10];
    *((_QWORD *)v4 + 9) = a2[9];
    *((_QWORD *)v4 + 10) = v11;
    *((_BYTE *)v4 + 88) = *((_BYTE *)a2 + 88);
    v12 = a2[13];
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    if (v12)
    {
      *((_QWORD *)v4 + 12) = a2[12];
      *((_QWORD *)v4 + 13) = v12;
      v13 = a2[15];
      *((_QWORD *)v4 + 14) = a2[14];
      *((_QWORD *)v4 + 15) = v13;
      v14 = a2[17];
      *((_QWORD *)v4 + 16) = a2[16];
      *((_QWORD *)v4 + 17) = v14;
      v15 = a2[19];
      *((_QWORD *)v4 + 18) = a2[18];
      *((_QWORD *)v4 + 19) = v15;
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRetain(v14);
      swift_bridgeObjectRetain(v15);
    }
    else
    {
      v17 = *((_OWORD *)a2 + 7);
      *((_OWORD *)v4 + 6) = *((_OWORD *)a2 + 6);
      *((_OWORD *)v4 + 7) = v17;
      v18 = *((_OWORD *)a2 + 9);
      *((_OWORD *)v4 + 8) = *((_OWORD *)a2 + 8);
      *((_OWORD *)v4 + 9) = v18;
    }
    v19 = *(int *)(a3 + 28);
    v20 = (_QWORD *)((char *)v4 + v19);
    v21 = (uint64_t)a2 + v19;
    v22 = *(uint64_t *)((char *)a2 + v19 + 8);
    *v20 = *(uint64_t *)((char *)a2 + v19);
    v20[1] = v22;
    v23 = *(uint64_t *)((char *)a2 + v19 + 24);
    v20[2] = *(uint64_t *)((char *)a2 + v19 + 16);
    v20[3] = v23;
    v24 = *(uint64_t *)((char *)a2 + v19 + 40);
    v20[4] = *(uint64_t *)((char *)a2 + v19 + 32);
    v20[5] = v24;
    v25 = (int *)type metadata accessor for Game(0);
    v26 = v25[7];
    __dst = (char *)v20 + v26;
    v27 = (const void *)(v21 + v26);
    v28 = type metadata accessor for Date(0);
    v29 = *(_QWORD *)(v28 - 8);
    v36 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v29 + 48);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v24);
    if (v36(v27, 1, v28))
    {
      v30 = sub_100003304(&qword_10010CC10);
      memcpy(__dst, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v29 + 16))(__dst, v27, v28);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(__dst, 0, 1, v28);
    }
    *(_QWORD *)((char *)v20 + v25[8]) = *(_QWORD *)(v21 + v25[8]);
    *((_BYTE *)v20 + v25[9]) = *(_BYTE *)(v21 + v25[9]);
    *((_BYTE *)v20 + v25[10]) = *(_BYTE *)(v21 + v25[10]);
    *((_BYTE *)v20 + v25[11]) = *(_BYTE *)(v21 + v25[11]);
    *((_BYTE *)v20 + v25[12]) = *(_BYTE *)(v21 + v25[12]);
    *((_BYTE *)v20 + v25[13]) = *(_BYTE *)(v21 + v25[13]);
    *((_BYTE *)v20 + v25[14]) = *(_BYTE *)(v21 + v25[14]);
    v31 = v25[15];
    v32 = (_QWORD *)((char *)v20 + v31);
    v33 = (_QWORD *)(v21 + v31);
    v34 = v33[1];
    *v32 = *v33;
    v32[1] = v34;
    swift_bridgeObjectRetain(v34);
  }
  return v4;
}

void sub_1000B4D00(_TtC13GameOverlayUI20GameOverlayUIService **a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  SEL v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  SEL v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  const char *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  _TtC13GameOverlayUI20GameOverlayUIService *v45;
  SEL v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  SEL v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  SEL v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  _TtC13GameOverlayUI20GameOverlayUIService **v67;
  SEL v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  SEL v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  id v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  const char *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;

  swift_bridgeObjectRelease(a1[2], (SEL)a2, a3, a4, a5, a6, a7, a8);
  swift_bridgeObjectRelease(a1[4], v10, v11, v12, v13, v14, v15, v16);
  swift_bridgeObjectRelease(a1[6], v17, v18, v19, v20, v21, v22, v23);
  swift_bridgeObjectRelease(a1[8], v24, v25, v26, v27, v28, v29, v30);
  swift_bridgeObjectRelease(a1[10], v31, v32, v33, v34, v35, v36, v37);
  v45 = a1[13];
  if (v45)
  {
    swift_bridgeObjectRelease(v45, v38, v39, v40, v41, v42, v43, v44);
    swift_bridgeObjectRelease(a1[15], v46, v47, v48, v49, v50, v51, v52);
    swift_bridgeObjectRelease(a1[17], v53, v54, v55, v56, v57, v58, v59);
    swift_bridgeObjectRelease(a1[19], v60, v61, v62, v63, v64, v65, v66);
  }
  v67 = (_TtC13GameOverlayUI20GameOverlayUIService **)((char *)a1 + *(int *)(a2 + 28));
  swift_bridgeObjectRelease(v67[1], v38, v39, v40, v41, v42, v43, v44);
  swift_bridgeObjectRelease(v67[3], v68, v69, v70, v71, v72, v73, v74);
  swift_bridgeObjectRelease(v67[5], v75, v76, v77, v78, v79, v80, v81);
  v82 = type metadata accessor for Game(0);
  v83 = (char *)v67 + *(int *)(v82 + 28);
  v84 = type metadata accessor for Date(0);
  v85 = *(_QWORD *)(v84 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v85 + 48))(v83, 1, v84))
    (*(void (**)(char *, uint64_t))(v85 + 8))(v83, v84);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)((char *)v67 + *(int *)(v82 + 60) + 8), v86, v87, v88, v89, v90, v91, v92);
}

uint64_t sub_1000B4DF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  unsigned int (*v34)(const void *, uint64_t, uint64_t);
  char *__dst;

  *(_WORD *)a1 = *(_WORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  v9 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v9;
  v10 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v10;
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v11 = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  if (v11)
  {
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = v11;
    v12 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 120) = v12;
    v13 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 136) = v13;
    v14 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 152) = v14;
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v14);
  }
  else
  {
    v15 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v15;
    v16 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v16;
  }
  v17 = *(int *)(a3 + 28);
  v18 = (_QWORD *)(a1 + v17);
  v19 = a2 + v17;
  v20 = *(_QWORD *)(a2 + v17 + 8);
  *v18 = *(_QWORD *)(a2 + v17);
  v18[1] = v20;
  v21 = *(_QWORD *)(a2 + v17 + 24);
  v18[2] = *(_QWORD *)(a2 + v17 + 16);
  v18[3] = v21;
  v22 = *(_QWORD *)(a2 + v17 + 40);
  v18[4] = *(_QWORD *)(a2 + v17 + 32);
  v18[5] = v22;
  v23 = (int *)type metadata accessor for Game(0);
  v24 = v23[7];
  __dst = (char *)v18 + v24;
  v25 = (const void *)(v19 + v24);
  v26 = type metadata accessor for Date(0);
  v27 = *(_QWORD *)(v26 - 8);
  v34 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v27 + 48);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v22);
  if (v34(v25, 1, v26))
  {
    v28 = sub_100003304(&qword_10010CC10);
    memcpy(__dst, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v27 + 16))(__dst, v25, v26);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(__dst, 0, 1, v26);
  }
  *(_QWORD *)((char *)v18 + v23[8]) = *(_QWORD *)(v19 + v23[8]);
  *((_BYTE *)v18 + v23[9]) = *(_BYTE *)(v19 + v23[9]);
  *((_BYTE *)v18 + v23[10]) = *(_BYTE *)(v19 + v23[10]);
  *((_BYTE *)v18 + v23[11]) = *(_BYTE *)(v19 + v23[11]);
  *((_BYTE *)v18 + v23[12]) = *(_BYTE *)(v19 + v23[12]);
  *((_BYTE *)v18 + v23[13]) = *(_BYTE *)(v19 + v23[13]);
  *((_BYTE *)v18 + v23[14]) = *(_BYTE *)(v19 + v23[14]);
  v29 = v23[15];
  v30 = (_QWORD *)((char *)v18 + v29);
  v31 = (_QWORD *)(v19 + v29);
  v32 = v31[1];
  *v30 = *v31;
  v30[1] = v32;
  swift_bridgeObjectRetain(v32);
  return a1;
}

uint64_t sub_1000B504C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _TtC13GameOverlayUI20GameOverlayUIService *v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  _TtC13GameOverlayUI20GameOverlayUIService *v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  _TtC13GameOverlayUI20GameOverlayUIService *v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  _TtC13GameOverlayUI20GameOverlayUIService *v34;
  SEL v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  _TtC13GameOverlayUI20GameOverlayUIService *v43;
  SEL v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  _OWORD *v51;
  __int128 *v52;
  _TtC13GameOverlayUI20GameOverlayUIService *v53;
  uint64_t v54;
  uint64_t v55;
  SEL v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  uint64_t v63;
  _TtC13GameOverlayUI20GameOverlayUIService *v64;
  SEL v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  uint64_t v72;
  _TtC13GameOverlayUI20GameOverlayUIService *v73;
  SEL v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  uint64_t v81;
  _TtC13GameOverlayUI20GameOverlayUIService *v82;
  SEL v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  _TtC13GameOverlayUI20GameOverlayUIService *v104;
  SEL v105;
  id v106;
  id v107;
  id v108;
  id v109;
  id v110;
  id v111;
  uint64_t v112;
  _TtC13GameOverlayUI20GameOverlayUIService *v113;
  SEL v114;
  id v115;
  id v116;
  id v117;
  id v118;
  id v119;
  id v120;
  uint64_t v121;
  _TtC13GameOverlayUI20GameOverlayUIService *v122;
  SEL v123;
  id v124;
  id v125;
  id v126;
  id v127;
  id v128;
  id v129;
  int *v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t (*v136)(char *, uint64_t, uint64_t);
  int v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  _QWORD *v142;
  uint64_t v143;
  _TtC13GameOverlayUI20GameOverlayUIService *v144;
  SEL v145;
  id v146;
  id v147;
  id v148;
  id v149;
  id v150;
  id v151;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7, v8, v9, v10, v11, v12, v13, v14);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v15 = *(_QWORD *)(a2 + 32);
  v16 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16, v17, v18, v19, v20, v21, v22, v23);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v24 = *(_QWORD *)(a2 + 48);
  v25 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25, v26, v27, v28, v29, v30, v31, v32);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v33 = *(_QWORD *)(a2 + 64);
  v34 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v33;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRelease(v34, v35, v36, v37, v38, v39, v40, v41);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v42 = *(_QWORD *)(a2 + 80);
  v43 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v42;
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRelease(v43, v44, v45, v46, v47, v48, v49, v50);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v51 = (_OWORD *)(a1 + 96);
  v52 = (__int128 *)(a2 + 96);
  v53 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 104);
  v54 = *(_QWORD *)(a2 + 104);
  if (v53)
  {
    if (v54)
    {
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      v55 = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 104) = v55;
      swift_bridgeObjectRetain(v55);
      swift_bridgeObjectRelease(v53, v56, v57, v58, v59, v60, v61, v62);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      v63 = *(_QWORD *)(a2 + 120);
      v64 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 120);
      *(_QWORD *)(a1 + 120) = v63;
      swift_bridgeObjectRetain(v63);
      swift_bridgeObjectRelease(v64, v65, v66, v67, v68, v69, v70, v71);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      v72 = *(_QWORD *)(a2 + 136);
      v73 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 136);
      *(_QWORD *)(a1 + 136) = v72;
      swift_bridgeObjectRetain(v72);
      swift_bridgeObjectRelease(v73, v74, v75, v76, v77, v78, v79, v80);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      v81 = *(_QWORD *)(a2 + 152);
      v82 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 152);
      *(_QWORD *)(a1 + 152) = v81;
      swift_bridgeObjectRetain(v81);
      swift_bridgeObjectRelease(v82, v83, v84, v85, v86, v87, v88, v89);
    }
    else
    {
      sub_100004244((_QWORD *)(a1 + 96));
      v94 = *(_OWORD *)(a2 + 144);
      v96 = *v52;
      v95 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v94;
      *v51 = v96;
      *(_OWORD *)(a1 + 112) = v95;
    }
  }
  else if (v54)
  {
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    v90 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 104) = v90;
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    v91 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 120) = v91;
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    v92 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 136) = v92;
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    v93 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 152) = v93;
    swift_bridgeObjectRetain(v90);
    swift_bridgeObjectRetain(v91);
    swift_bridgeObjectRetain(v92);
    swift_bridgeObjectRetain(v93);
  }
  else
  {
    v97 = *v52;
    v98 = *(_OWORD *)(a2 + 112);
    v99 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v99;
    *v51 = v97;
    *(_OWORD *)(a1 + 112) = v98;
  }
  v100 = *(int *)(a3 + 28);
  v101 = (_QWORD *)(a1 + v100);
  v102 = (_QWORD *)(a2 + v100);
  *v101 = *(_QWORD *)(a2 + v100);
  v103 = *(_QWORD *)(a2 + v100 + 8);
  v104 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + v100 + 8);
  v101[1] = v103;
  swift_bridgeObjectRetain(v103);
  swift_bridgeObjectRelease(v104, v105, v106, v107, v108, v109, v110, v111);
  v101[2] = v102[2];
  v112 = v102[3];
  v113 = (_TtC13GameOverlayUI20GameOverlayUIService *)v101[3];
  v101[3] = v112;
  swift_bridgeObjectRetain(v112);
  swift_bridgeObjectRelease(v113, v114, v115, v116, v117, v118, v119, v120);
  v101[4] = v102[4];
  v121 = v102[5];
  v122 = (_TtC13GameOverlayUI20GameOverlayUIService *)v101[5];
  v101[5] = v121;
  swift_bridgeObjectRetain(v121);
  swift_bridgeObjectRelease(v122, v123, v124, v125, v126, v127, v128, v129);
  v130 = (int *)type metadata accessor for Game(0);
  v131 = v130[7];
  v132 = (char *)v101 + v131;
  v133 = (char *)v102 + v131;
  v134 = type metadata accessor for Date(0);
  v135 = *(_QWORD *)(v134 - 8);
  v136 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v135 + 48);
  v137 = v136(v132, 1, v134);
  v138 = v136(v133, 1, v134);
  if (!v137)
  {
    if (!v138)
    {
      (*(void (**)(char *, char *, uint64_t))(v135 + 24))(v132, v133, v134);
      goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v135 + 8))(v132, v134);
    goto LABEL_13;
  }
  if (v138)
  {
LABEL_13:
    v139 = sub_100003304(&qword_10010CC10);
    memcpy(v132, v133, *(_QWORD *)(*(_QWORD *)(v139 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(char *, char *, uint64_t))(v135 + 16))(v132, v133, v134);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v135 + 56))(v132, 0, 1, v134);
LABEL_14:
  *(_QWORD *)((char *)v101 + v130[8]) = *(_QWORD *)((char *)v102 + v130[8]);
  *((_BYTE *)v101 + v130[9]) = *((_BYTE *)v102 + v130[9]);
  *((_BYTE *)v101 + v130[10]) = *((_BYTE *)v102 + v130[10]);
  *((_BYTE *)v101 + v130[11]) = *((_BYTE *)v102 + v130[11]);
  *((_BYTE *)v101 + v130[12]) = *((_BYTE *)v102 + v130[12]);
  *((_BYTE *)v101 + v130[13]) = *((_BYTE *)v102 + v130[13]);
  *((_BYTE *)v101 + v130[14]) = *((_BYTE *)v102 + v130[14]);
  v140 = v130[15];
  v141 = (_QWORD *)((char *)v101 + v140);
  v142 = (_QWORD *)((char *)v102 + v140);
  *v141 = *v142;
  v143 = v142[1];
  v144 = (_TtC13GameOverlayUI20GameOverlayUIService *)v141[1];
  v141[1] = v143;
  swift_bridgeObjectRetain(v143);
  swift_bridgeObjectRelease(v144, v145, v146, v147, v148, v149, v150, v151);
  return a1;
}

uint64_t sub_1000B5434(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;
  int *v8;
  uint64_t v9;
  char *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = *(int *)(a3 + 28);
  v5 = (_OWORD *)(a1 + v4);
  v6 = a2 + v4;
  v7 = *(_OWORD *)(a2 + v4 + 16);
  *v5 = *(_OWORD *)(a2 + v4);
  v5[1] = v7;
  v5[2] = *(_OWORD *)(a2 + v4 + 32);
  v8 = (int *)type metadata accessor for Game(0);
  v9 = v8[7];
  v10 = (char *)v5 + v9;
  v11 = (const void *)(v6 + v9);
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    v14 = sub_100003304(&qword_10010CC10);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  *(_QWORD *)((char *)v5 + v8[8]) = *(_QWORD *)(v6 + v8[8]);
  *((_BYTE *)v5 + v8[9]) = *(_BYTE *)(v6 + v8[9]);
  *((_BYTE *)v5 + v8[10]) = *(_BYTE *)(v6 + v8[10]);
  *((_BYTE *)v5 + v8[11]) = *(_BYTE *)(v6 + v8[11]);
  *((_BYTE *)v5 + v8[12]) = *(_BYTE *)(v6 + v8[12]);
  *((_BYTE *)v5 + v8[13]) = *(_BYTE *)(v6 + v8[13]);
  *((_BYTE *)v5 + v8[14]) = *(_BYTE *)(v6 + v8[14]);
  *(_OWORD *)((char *)v5 + v8[15]) = *(_OWORD *)(v6 + v8[15]);
  return a1;
}

uint64_t sub_1000B55D0(uint64_t a1, uint64_t a2, int *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t v11;
  _TtC13GameOverlayUI20GameOverlayUIService *v12;
  uint64_t v13;
  _TtC13GameOverlayUI20GameOverlayUIService *v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  _TtC13GameOverlayUI20GameOverlayUIService *v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  _TtC13GameOverlayUI20GameOverlayUIService *v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  _TtC13GameOverlayUI20GameOverlayUIService *v41;
  SEL v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  const char *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  _TtC13GameOverlayUI20GameOverlayUIService *v56;
  uint64_t v57;
  uint64_t v58;
  _TtC13GameOverlayUI20GameOverlayUIService *v59;
  SEL v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  uint64_t v67;
  _TtC13GameOverlayUI20GameOverlayUIService *v68;
  SEL v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  uint64_t v76;
  _TtC13GameOverlayUI20GameOverlayUIService *v77;
  SEL v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  _TtC13GameOverlayUI20GameOverlayUIService *v91;
  uint64_t v92;
  _TtC13GameOverlayUI20GameOverlayUIService *v93;
  SEL v94;
  id v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  uint64_t v101;
  _TtC13GameOverlayUI20GameOverlayUIService *v102;
  SEL v103;
  id v104;
  id v105;
  id v106;
  id v107;
  id v108;
  id v109;
  int *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t (*v116)(char *, uint64_t, uint64_t);
  int v117;
  int v118;
  const char *v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  _TtC13GameOverlayUI20GameOverlayUIService *v132;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v11 = *(_QWORD *)(a2 + 16);
  v12 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v11;
  swift_bridgeObjectRelease(v12, (SEL)a2, a3, a4, a5, a6, a7, a8);
  v13 = *(_QWORD *)(a2 + 32);
  v14 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v13;
  swift_bridgeObjectRelease(v14, v15, v16, v17, v18, v19, v20, v21);
  v22 = *(_QWORD *)(a2 + 48);
  v23 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v22;
  swift_bridgeObjectRelease(v23, v24, v25, v26, v27, v28, v29, v30);
  v31 = *(_QWORD *)(a2 + 64);
  v32 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v31;
  swift_bridgeObjectRelease(v32, v33, v34, v35, v36, v37, v38, v39);
  v40 = *(_QWORD *)(a2 + 80);
  v41 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v40;
  swift_bridgeObjectRelease(v41, v42, v43, v44, v45, v46, v47, v48);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v56 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 104);
  if (v56)
  {
    v57 = *(_QWORD *)(a2 + 104);
    if (v57)
    {
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = v57;
      swift_bridgeObjectRelease(v56, v49, v50, v51, v52, v53, v54, v55);
      v58 = *(_QWORD *)(a2 + 120);
      v59 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 120);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = v58;
      swift_bridgeObjectRelease(v59, v60, v61, v62, v63, v64, v65, v66);
      v67 = *(_QWORD *)(a2 + 136);
      v68 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 136);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 136) = v67;
      swift_bridgeObjectRelease(v68, v69, v70, v71, v72, v73, v74, v75);
      v76 = *(_QWORD *)(a2 + 152);
      v77 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 152);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_QWORD *)(a1 + 152) = v76;
      swift_bridgeObjectRelease(v77, v78, v79, v80, v81, v82, v83, v84);
      goto LABEL_6;
    }
    sub_100004244((_QWORD *)(a1 + 96));
  }
  v85 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v85;
  v86 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v86;
LABEL_6:
  v87 = a3[7];
  v88 = (_QWORD *)(a1 + v87);
  v89 = (_QWORD *)(a2 + v87);
  v90 = *(_QWORD *)(a2 + v87 + 8);
  v91 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + v87 + 8);
  *v88 = *(_QWORD *)(a2 + v87);
  v88[1] = v90;
  swift_bridgeObjectRelease(v91, v49, v50, v51, v52, v53, v54, v55);
  v92 = v89[3];
  v93 = (_TtC13GameOverlayUI20GameOverlayUIService *)v88[3];
  v88[2] = v89[2];
  v88[3] = v92;
  swift_bridgeObjectRelease(v93, v94, v95, v96, v97, v98, v99, v100);
  v101 = v89[5];
  v102 = (_TtC13GameOverlayUI20GameOverlayUIService *)v88[5];
  v88[4] = v89[4];
  v88[5] = v101;
  swift_bridgeObjectRelease(v102, v103, v104, v105, v106, v107, v108, v109);
  v110 = (int *)type metadata accessor for Game(0);
  v111 = v110[7];
  v112 = (char *)v88 + v111;
  v113 = (char *)v89 + v111;
  v114 = type metadata accessor for Date(0);
  v115 = *(_QWORD *)(v114 - 8);
  v116 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v115 + 48);
  v117 = v116(v112, 1, v114);
  v118 = v116(v113, 1, v114);
  if (!v117)
  {
    if (!v118)
    {
      (*(void (**)(char *, char *, uint64_t))(v115 + 40))(v112, v113, v114);
      goto LABEL_12;
    }
    (*(void (**)(char *, uint64_t))(v115 + 8))(v112, v114);
    goto LABEL_11;
  }
  if (v118)
  {
LABEL_11:
    v126 = sub_100003304(&qword_10010CC10);
    memcpy(v112, v113, *(_QWORD *)(*(_QWORD *)(v126 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(char *, char *, uint64_t))(v115 + 32))(v112, v113, v114);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v115 + 56))(v112, 0, 1, v114);
LABEL_12:
  *(_QWORD *)((char *)v88 + v110[8]) = *(_QWORD *)((char *)v89 + v110[8]);
  *((_BYTE *)v88 + v110[9]) = *((_BYTE *)v89 + v110[9]);
  *((_BYTE *)v88 + v110[10]) = *((_BYTE *)v89 + v110[10]);
  *((_BYTE *)v88 + v110[11]) = *((_BYTE *)v89 + v110[11]);
  *((_BYTE *)v88 + v110[12]) = *((_BYTE *)v89 + v110[12]);
  *((_BYTE *)v88 + v110[13]) = *((_BYTE *)v89 + v110[13]);
  *((_BYTE *)v88 + v110[14]) = *((_BYTE *)v89 + v110[14]);
  v127 = v110[15];
  v128 = (_QWORD *)((char *)v88 + v127);
  v129 = (_QWORD *)((char *)v89 + v127);
  v131 = *v129;
  v130 = v129[1];
  v132 = (_TtC13GameOverlayUI20GameOverlayUIService *)v128[1];
  *v128 = v131;
  v128[1] = v130;
  swift_bridgeObjectRelease(v132, v119, v120, v121, v122, v123, v124, v125);
  return a1;
}

uint64_t sub_1000B5870(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000B587C);
}

uint64_t sub_1000B587C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Game(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t sub_1000B58F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000B5904);
}

uint64_t sub_1000B5904(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for Game(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for AccessPointDataIntent(uint64_t a1)
{
  uint64_t result;

  result = qword_100111E10;
  if (!qword_100111E10)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AccessPointDataIntent);
  return result;
}

uint64_t sub_1000B59B4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_1000CE6E8;
  v4[1] = &unk_1000CE700;
  v4[2] = &unk_1000CE718;
  result = type metadata accessor for Game(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1000B5A3C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _BYTE v19[16];
  _OWORD v20[9];
  uint64_t v21;
  char v22;

  v3 = v1;
  v5 = sub_100003304(&qword_100111E60);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v19[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = a1[3];
  v10 = a1[4];
  sub_100003C28(a1, v9);
  v11 = sub_1000B60AC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AccessPointDataIntent.CodingKeys, &type metadata for AccessPointDataIntent.CodingKeys, v11, v9, v10);
  LOBYTE(v20[0]) = *(_BYTE *)v3;
  v22 = 0;
  sub_1000373BC();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v20);
  if (!v2)
  {
    v12 = *(unsigned __int8 *)(v3 + 1);
    v22 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v12, &v22, v5);
    v13 = *(_OWORD *)(v3 + 120);
    v20[6] = *(_OWORD *)(v3 + 104);
    v20[7] = v13;
    v20[8] = *(_OWORD *)(v3 + 136);
    v21 = *(_QWORD *)(v3 + 152);
    v14 = *(_OWORD *)(v3 + 56);
    v20[2] = *(_OWORD *)(v3 + 40);
    v20[3] = v14;
    v15 = *(_OWORD *)(v3 + 88);
    v20[4] = *(_OWORD *)(v3 + 72);
    v20[5] = v15;
    v16 = *(_OWORD *)(v3 + 24);
    v20[0] = *(_OWORD *)(v3 + 8);
    v20[1] = v16;
    v19[15] = 2;
    sub_100003C90();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v20);
    v17 = v3 + *(int *)(type metadata accessor for AccessPointDataIntent(0) + 28);
    LOBYTE(v20[0]) = 3;
    type metadata accessor for Game(0);
    sub_1000662AC(&qword_10010ECF8, (uint64_t)&protocol conformance descriptor for Game);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v17);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000B5C44@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  char v29;
  char v30;
  char v31;
  _OWORD v32[9];
  uint64_t v33;
  uint64_t v34;

  v24 = a2;
  v25 = type metadata accessor for Game(0);
  __chkstk_darwin(v25);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_100003304(&qword_100111E50);
  v5 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AccessPointDataIntent(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v11 = a1[4];
  v28 = a1;
  sub_100003C28(a1, v12);
  v13 = sub_1000B60AC();
  v26 = v7;
  v14 = v34;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AccessPointDataIntent.CodingKeys, &type metadata for AccessPointDataIntent.CodingKeys, v13, v12, v11);
  if (v14)
    return sub_100004624(v28);
  v34 = v8;
  v15 = v4;
  v29 = 0;
  sub_100037810();
  v16 = v26;
  v17 = v27;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v32);
  *v10 = v32[0];
  LOBYTE(v32[0]) = 1;
  v10[1] = KeyedDecodingContainer.decode(_:forKey:)(v32, v17) & 1;
  v31 = 2;
  sub_100004644();
  KeyedDecodingContainer.decode<A>(_:forKey:)(v32);
  v18 = v32[7];
  *(_OWORD *)(v10 + 104) = v32[6];
  *(_OWORD *)(v10 + 120) = v18;
  *(_OWORD *)(v10 + 136) = v32[8];
  v19 = v32[3];
  *(_OWORD *)(v10 + 40) = v32[2];
  *(_OWORD *)(v10 + 56) = v19;
  v20 = v32[5];
  *(_OWORD *)(v10 + 72) = v32[4];
  *(_OWORD *)(v10 + 88) = v20;
  v21 = v32[1];
  *(_OWORD *)(v10 + 8) = v32[0];
  *((_QWORD *)v10 + 19) = v33;
  *(_OWORD *)(v10 + 24) = v21;
  v30 = 3;
  sub_1000662AC(&qword_10010ED08, (uint64_t)&protocol conformance descriptor for Game);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v15);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v16, v17);
  sub_100065C84((uint64_t)v15, (uint64_t)&v10[*(int *)(v34 + 28)]);
  sub_1000B60F0((uint64_t)v10, v24);
  sub_100004624(v28);
  return sub_1000B6134((uint64_t)v10);
}

uint64_t sub_1000B5F78()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000B5FA8 + 4 * byte_1000CE6B0[*v0]))(0x65736143657375, 0xE700000000000000);
}

uint64_t sub_1000B5FA8()
{
  return 0x6867694864616F6CLL;
}

uint64_t sub_1000B5FCC()
{
  return 0x726579616C70;
}

uint64_t sub_1000B5FE0()
{
  return 1701667175;
}

uint64_t sub_1000B5FF0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000B6314(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000B6014(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000B60AC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B603C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000B60AC();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1000B6064(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000015;
  a1[1] = 0x80000001000CE6B0;
}

uint64_t sub_1000B6084@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000B5C44(a1, a2);
}

uint64_t sub_1000B6098(_QWORD *a1)
{
  return sub_1000B5A3C(a1);
}

unint64_t sub_1000B60AC()
{
  unint64_t result;

  result = qword_100111E58;
  if (!qword_100111E58)
  {
    result = swift_getWitnessTable(&unk_1000CE894, &type metadata for AccessPointDataIntent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100111E58);
  }
  return result;
}

uint64_t sub_1000B60F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AccessPointDataIntent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B6134(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AccessPointDataIntent(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for AccessPointDataIntent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1000B61BC + 4 * byte_1000CE6B9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000B61F0 + 4 * byte_1000CE6B4[v4]))();
}

uint64_t sub_1000B61F0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B61F8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000B6200);
  return result;
}

uint64_t sub_1000B620C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000B6214);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1000B6218(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B6220(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessPointDataIntent.CodingKeys()
{
  return &type metadata for AccessPointDataIntent.CodingKeys;
}

unint64_t sub_1000B6240()
{
  unint64_t result;

  result = qword_100111E68;
  if (!qword_100111E68)
  {
    result = swift_getWitnessTable(&unk_1000CE86C, &type metadata for AccessPointDataIntent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100111E68);
  }
  return result;
}

unint64_t sub_1000B6288()
{
  unint64_t result;

  result = qword_100111E70;
  if (!qword_100111E70)
  {
    result = swift_getWitnessTable(&unk_1000CE7DC, &type metadata for AccessPointDataIntent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100111E70);
  }
  return result;
}

unint64_t sub_1000B62D0()
{
  unint64_t result;

  result = qword_100111E78;
  if (!qword_100111E78)
  {
    result = swift_getWitnessTable(&unk_1000CE804, &type metadata for AccessPointDataIntent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100111E78);
  }
  return result;
}

uint64_t sub_1000B6314(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x65736143657375 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65736143657375, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6867694864616F6CLL && a2 == 0xEE0073746867696CLL)
  {
    v7 = 0xEE0073746867696CLL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6867694864616F6CLL, 0xEE0073746867696CLL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x726579616C70 && a2 == 0xE600000000000000)
  {
    v8 = 0xE600000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726579616C70, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 1701667175 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(1701667175, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t AccessPointRequiredData.game.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for AccessPointRequiredData(0);
  return sub_100007878(v1 + *(int *)(v3 + 24), a1, type metadata accessor for Game);
}

uint64_t type metadata accessor for AccessPointRequiredData(uint64_t a1)
{
  uint64_t result;

  result = qword_100111EF0;
  if (!qword_100111EF0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AccessPointRequiredData);
  return result;
}

uint64_t AccessPointRequiredData.isPlayerOnboarded.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AccessPointRequiredData(0) + 28));
}

uint64_t AccessPointRequiredData.friendRequestsCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for AccessPointRequiredData(0) + 32));
}

uint64_t AccessPointRequiredData.challengesCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for AccessPointRequiredData(0) + 36));
}

uint64_t AccessPointRequiredData.completedAchievementsCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for AccessPointRequiredData(0) + 40));
}

uint64_t AccessPointRequiredData.achievementsCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for AccessPointRequiredData(0) + 44));
}

uint64_t AccessPointRequiredData.leaderboardsCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for AccessPointRequiredData(0) + 48));
}

uint64_t AccessPointRequiredData.leaderboardName.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for AccessPointRequiredData(0) + 52));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t AccessPointRequiredData.leaderboardRank.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for AccessPointRequiredData(0) + 56));
}

uint64_t AccessPointRequiredData.leaderboardFriendCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for AccessPointRequiredData(0) + 60));
}

uint64_t AccessPointRequiredData.ascAdamID.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for AccessPointRequiredData(0) + 64));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t AccessPointRequiredData.artwork.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for AccessPointRequiredData(0) + 68);
  return sub_100063BA0(v3, a1);
}

uint64_t AccessPointRequiredData.ascTitle.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for AccessPointRequiredData(0) + 72));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t AccessPointRequiredData.ascSubtitle.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for AccessPointRequiredData(0) + 76));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t sub_1000B6770(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000B67A4 + 4 * byte_1000CE8F0[a1]))(0x65736143657375, 0xE700000000000000);
}

uint64_t sub_1000B67A4()
{
  return 0x726579616C70;
}

uint64_t sub_1000B67B8()
{
  return 1701667175;
}

unint64_t sub_1000B67C8()
{
  return 0xD000000000000011;
}

uint64_t sub_1000B6850()
{
  return 0x6F6272656461656CLL;
}

void sub_1000B6888()
{
  JUMPOUT(0x1000B689CLL);
}

uint64_t sub_1000B68A8()
{
  return 0x496D616441637361;
}

uint64_t sub_1000B68C4()
{
  return 0x6B726F77747261;
}

uint64_t sub_1000B68D8()
{
  return 0x656C746954637361;
}

uint64_t sub_1000B68F0()
{
  return 0x6974627553637361;
}

uint64_t sub_1000B6910()
{
  unsigned __int8 *v0;

  return sub_1000B6770(*v0);
}

uint64_t sub_1000B6918@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000B9208(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000B693C(_BYTE *a1@<X8>)
{
  *a1 = 16;
}

uint64_t sub_1000B6948(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000B6E04();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B6970(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000B6E04();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AccessPointRequiredData.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v42[16];
  _OWORD v43[9];
  uint64_t v44;
  char v45;
  char v46;

  v3 = v1;
  v5 = sub_100003304(&qword_100111E80);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v42[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = a1[3];
  v10 = a1[4];
  sub_100003C28(a1, v9);
  v11 = sub_1000B6E04();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AccessPointRequiredData.CodingKeys, &type metadata for AccessPointRequiredData.CodingKeys, v11, v9, v10);
  v46 = *v3;
  v45 = 0;
  sub_1000373BC();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v46);
  if (!v2)
  {
    v12 = *(_OWORD *)(v3 + 120);
    v43[6] = *(_OWORD *)(v3 + 104);
    v43[7] = v12;
    v43[8] = *(_OWORD *)(v3 + 136);
    v44 = *((_QWORD *)v3 + 19);
    v13 = *(_OWORD *)(v3 + 56);
    v43[2] = *(_OWORD *)(v3 + 40);
    v43[3] = v13;
    v14 = *(_OWORD *)(v3 + 88);
    v43[4] = *(_OWORD *)(v3 + 72);
    v43[5] = v14;
    v15 = *(_OWORD *)(v3 + 24);
    v43[0] = *(_OWORD *)(v3 + 8);
    v43[1] = v15;
    v42[15] = 1;
    sub_100003C90();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v43);
    v16 = (int *)type metadata accessor for AccessPointRequiredData(0);
    v17 = &v3[v16[6]];
    LOBYTE(v43[0]) = 2;
    type metadata accessor for Game(0);
    sub_1000035B4(&qword_10010ECF8, type metadata accessor for Game, (uint64_t)&protocol conformance descriptor for Game);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v17);
    v18 = v3[v16[7]];
    LOBYTE(v43[0]) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v18, v43, v5);
    v19 = *(_QWORD *)&v3[v16[8]];
    LOBYTE(v43[0]) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v19, v43, v5);
    v20 = *(_QWORD *)&v3[v16[9]];
    LOBYTE(v43[0]) = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v20, v43, v5);
    v21 = *(_QWORD *)&v3[v16[10]];
    LOBYTE(v43[0]) = 6;
    KeyedEncodingContainer.encode(_:forKey:)(v21, v43, v5);
    v22 = *(_QWORD *)&v3[v16[11]];
    LOBYTE(v43[0]) = 7;
    KeyedEncodingContainer.encode(_:forKey:)(v22, v43, v5);
    v23 = *(_QWORD *)&v3[v16[12]];
    LOBYTE(v43[0]) = 8;
    KeyedEncodingContainer.encode(_:forKey:)(v23, v43, v5);
    v24 = (uint64_t *)&v3[v16[13]];
    v25 = *v24;
    v26 = v24[1];
    LOBYTE(v43[0]) = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v25, v26, v43, v5);
    v27 = *(_QWORD *)&v3[v16[14]];
    LOBYTE(v43[0]) = 10;
    KeyedEncodingContainer.encode(_:forKey:)(v27, v43, v5);
    v28 = *(_QWORD *)&v3[v16[15]];
    LOBYTE(v43[0]) = 11;
    KeyedEncodingContainer.encode(_:forKey:)(v28, v43, v5);
    v29 = (uint64_t *)&v3[v16[16]];
    v30 = *v29;
    v31 = v29[1];
    LOBYTE(v43[0]) = 12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v30, v31, v43, v5);
    v32 = &v3[v16[17]];
    LOBYTE(v43[0]) = 13;
    v33 = type metadata accessor for MediaArtwork(0);
    v34 = sub_1000035B4(&qword_10010BF88, (uint64_t (*)(uint64_t))&type metadata accessor for MediaArtwork, (uint64_t)&protocol conformance descriptor for MediaArtwork);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v32, v43, v5, v33, v34);
    v35 = (uint64_t *)&v3[v16[18]];
    v36 = *v35;
    v37 = v35[1];
    LOBYTE(v43[0]) = 14;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v36, v37, v43, v5);
    v38 = (uint64_t *)&v3[v16[19]];
    v39 = *v38;
    v40 = v38[1];
    LOBYTE(v43[0]) = 15;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v39, v40, v43, v5);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1000B6E04()
{
  unint64_t result;

  result = qword_100111E88;
  if (!qword_100111E88)
  {
    result = swift_getWitnessTable(&unk_1000CEAAC, &type metadata for AccessPointRequiredData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100111E88);
  }
  return result;
}

void AccessPointRequiredData.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  int *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  _QWORD *v47;
  _BYTE *v48;
  char v49;
  char v50;
  _OWORD v51[9];
  uint64_t v52;
  int *v53;

  v44 = a2;
  v4 = sub_100003304(&qword_10010EC08);
  __chkstk_darwin(v4);
  v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Game(0);
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v46 = sub_100003304(&qword_100111E90);
  v10 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = (int *)type metadata accessor for AccessPointRequiredData(0);
  __chkstk_darwin(v53);
  v48 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v15 = a1[4];
  v47 = a1;
  sub_100003C28(a1, v14);
  v16 = sub_1000B6E04();
  v45 = v12;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AccessPointRequiredData.CodingKeys, &type metadata for AccessPointRequiredData.CodingKeys, v16, v14, v15);
  if (v2)
  {
    sub_100004624(v47);
  }
  else
  {
    v43 = v10;
    v50 = 0;
    sub_100037810();
    v17 = v46;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v51);
    v18 = v48;
    *v48 = v51[0];
    v50 = 1;
    sub_100004644();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v51);
    v19 = v51[7];
    *(_OWORD *)(v18 + 104) = v51[6];
    *(_OWORD *)(v18 + 120) = v19;
    *(_OWORD *)(v18 + 136) = v51[8];
    v20 = v51[3];
    *(_OWORD *)(v18 + 40) = v51[2];
    *(_OWORD *)(v18 + 56) = v20;
    v21 = v51[5];
    *(_OWORD *)(v18 + 72) = v51[4];
    *(_OWORD *)(v18 + 88) = v21;
    v22 = v51[1];
    *(_OWORD *)(v18 + 8) = v51[0];
    *((_QWORD *)v18 + 19) = v52;
    *(_OWORD *)(v18 + 24) = v22;
    v49 = 2;
    sub_1000035B4(&qword_10010ED08, type metadata accessor for Game, (uint64_t)&protocol conformance descriptor for Game);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v9);
    v23 = v53;
    sub_100065C84((uint64_t)v9, (uint64_t)&v18[v53[6]]);
    v49 = 3;
    v18[v23[7]] = KeyedDecodingContainer.decode(_:forKey:)(&v49, v17) & 1;
    v49 = 4;
    *(_QWORD *)&v18[v23[8]] = KeyedDecodingContainer.decode(_:forKey:)(&v49, v17);
    v49 = 5;
    *(_QWORD *)&v18[v23[9]] = KeyedDecodingContainer.decode(_:forKey:)(&v49, v17);
    v49 = 6;
    *(_QWORD *)&v18[v23[10]] = KeyedDecodingContainer.decode(_:forKey:)(&v49, v17);
    v49 = 7;
    *(_QWORD *)&v18[v23[11]] = KeyedDecodingContainer.decode(_:forKey:)(&v49, v17);
    v49 = 8;
    *(_QWORD *)&v18[v23[12]] = KeyedDecodingContainer.decode(_:forKey:)(&v49, v17);
    v49 = 9;
    v24 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v49, v17);
    v25 = (uint64_t *)&v48[v53[13]];
    *v25 = v24;
    v25[1] = v26;
    v49 = 10;
    v27 = KeyedDecodingContainer.decode(_:forKey:)(&v49, v46);
    *(_QWORD *)&v48[v53[14]] = v27;
    v49 = 11;
    v28 = KeyedDecodingContainer.decode(_:forKey:)(&v49, v46);
    *(_QWORD *)&v48[v53[15]] = v28;
    v49 = 12;
    v29 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v49, v46);
    v30 = (uint64_t *)&v48[v53[16]];
    *v30 = v29;
    v30[1] = v31;
    v32 = type metadata accessor for MediaArtwork(0);
    v49 = 13;
    v33 = sub_1000035B4(&qword_10010BFA8, (uint64_t (*)(uint64_t))&type metadata accessor for MediaArtwork, (uint64_t)&protocol conformance descriptor for MediaArtwork);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v32, &v49, v46, v32, v33);
    sub_100063C28((uint64_t)v6, (uint64_t)&v48[v53[17]]);
    v49 = 14;
    v34 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v49, v46);
    v35 = (uint64_t *)&v48[v53[18]];
    *v35 = v34;
    v35[1] = v36;
    v49 = 15;
    v37 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v49, v46);
    v39 = v38;
    (*(void (**)(char *, uint64_t))(v43 + 8))(v45, v46);
    v40 = (uint64_t)v48;
    v41 = (uint64_t *)&v48[v53[19]];
    *v41 = v37;
    v41[1] = v39;
    sub_100007878(v40, v44, type metadata accessor for AccessPointRequiredData);
    sub_100004624(v47);
    sub_1000106F0(v40, type metadata accessor for AccessPointRequiredData);
  }
}

void sub_1000B7798(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  AccessPointRequiredData.init(from:)(a1, a2);
}

uint64_t sub_1000B77AC(_QWORD *a1)
{
  return AccessPointRequiredData.encode(to:)(a1);
}

_BYTE *initializeBufferWithCopyOfBuffer for AccessPointRequiredData(_BYTE *a1, uint64_t *a2, int *a3)
{
  _BYTE *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int (*v50)(char *, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v61;
  unsigned int (*v62)(const void *, uint64_t, uint64_t);
  int *v63;
  char *__dst;
  _BYTE *__dsta;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = (_BYTE *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    *a1 = *(_BYTE *)a2;
    v7 = a2[2];
    *((_QWORD *)v4 + 1) = a2[1];
    *((_QWORD *)v4 + 2) = v7;
    v8 = a2[4];
    *((_QWORD *)v4 + 3) = a2[3];
    *((_QWORD *)v4 + 4) = v8;
    v9 = a2[6];
    *((_QWORD *)v4 + 5) = a2[5];
    *((_QWORD *)v4 + 6) = v9;
    v10 = a2[8];
    *((_QWORD *)v4 + 7) = a2[7];
    *((_QWORD *)v4 + 8) = v10;
    v11 = a2[10];
    *((_QWORD *)v4 + 9) = a2[9];
    *((_QWORD *)v4 + 10) = v11;
    v4[88] = *((_BYTE *)a2 + 88);
    v12 = a2[13];
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    if (v12)
    {
      *((_QWORD *)v4 + 12) = a2[12];
      *((_QWORD *)v4 + 13) = v12;
      v13 = a2[15];
      *((_QWORD *)v4 + 14) = a2[14];
      *((_QWORD *)v4 + 15) = v13;
      v14 = a2[17];
      *((_QWORD *)v4 + 16) = a2[16];
      *((_QWORD *)v4 + 17) = v14;
      v15 = a2[19];
      *((_QWORD *)v4 + 18) = a2[18];
      *((_QWORD *)v4 + 19) = v15;
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRetain(v14);
      swift_bridgeObjectRetain(v15);
    }
    else
    {
      v17 = *((_OWORD *)a2 + 7);
      *((_OWORD *)v4 + 6) = *((_OWORD *)a2 + 6);
      *((_OWORD *)v4 + 7) = v17;
      v18 = *((_OWORD *)a2 + 9);
      *((_OWORD *)v4 + 8) = *((_OWORD *)a2 + 8);
      *((_OWORD *)v4 + 9) = v18;
    }
    v63 = a3;
    v19 = a3[6];
    v20 = &v4[v19];
    v21 = (uint64_t)a2 + v19;
    v22 = *(uint64_t *)((char *)a2 + v19 + 8);
    *v20 = *(uint64_t *)((char *)a2 + v19);
    v20[1] = v22;
    v23 = *(uint64_t *)((char *)a2 + v19 + 24);
    v20[2] = *(uint64_t *)((char *)a2 + v19 + 16);
    v20[3] = v23;
    v24 = *(uint64_t *)((char *)a2 + v19 + 40);
    v20[4] = *(uint64_t *)((char *)a2 + v19 + 32);
    v20[5] = v24;
    v25 = (int *)type metadata accessor for Game(0);
    v26 = v25[7];
    __dst = (char *)v20 + v26;
    v27 = (const void *)(v21 + v26);
    v28 = type metadata accessor for Date(0);
    v61 = *(_QWORD *)(v28 - 8);
    v62 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v61 + 48);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v24);
    if (v62(v27, 1, v28))
    {
      v29 = sub_100003304(&qword_10010CC10);
      memcpy(__dst, v27, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v61 + 16))(__dst, v27, v28);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v61 + 56))(__dst, 0, 1, v28);
    }
    *(_QWORD *)((char *)v20 + v25[8]) = *(_QWORD *)(v21 + v25[8]);
    *((_BYTE *)v20 + v25[9]) = *(_BYTE *)(v21 + v25[9]);
    *((_BYTE *)v20 + v25[10]) = *(_BYTE *)(v21 + v25[10]);
    *((_BYTE *)v20 + v25[11]) = *(_BYTE *)(v21 + v25[11]);
    *((_BYTE *)v20 + v25[12]) = *(_BYTE *)(v21 + v25[12]);
    *((_BYTE *)v20 + v25[13]) = *(_BYTE *)(v21 + v25[13]);
    *((_BYTE *)v20 + v25[14]) = *(_BYTE *)(v21 + v25[14]);
    v30 = v25[15];
    v31 = (_QWORD *)((char *)v20 + v30);
    v32 = (_QWORD *)(v21 + v30);
    v33 = v32[1];
    *v31 = *v32;
    v31[1] = v33;
    v34 = v63[8];
    v4[v63[7]] = *((_BYTE *)a2 + v63[7]);
    *(_QWORD *)&v4[v34] = *(uint64_t *)((char *)a2 + v34);
    v35 = v63[10];
    *(_QWORD *)&v4[v63[9]] = *(uint64_t *)((char *)a2 + v63[9]);
    *(_QWORD *)&v4[v35] = *(uint64_t *)((char *)a2 + v35);
    v36 = v63[12];
    *(_QWORD *)&v4[v63[11]] = *(uint64_t *)((char *)a2 + v63[11]);
    *(_QWORD *)&v4[v36] = *(uint64_t *)((char *)a2 + v36);
    v37 = v63[13];
    v38 = v63[14];
    v39 = &v4[v37];
    v40 = (uint64_t *)((char *)a2 + v37);
    v41 = v40[1];
    *v39 = *v40;
    v39[1] = v41;
    *(_QWORD *)&v4[v38] = *(uint64_t *)((char *)a2 + v38);
    v42 = v63[16];
    *(_QWORD *)&v4[v63[15]] = *(uint64_t *)((char *)a2 + v63[15]);
    v43 = &v4[v42];
    v44 = (uint64_t *)((char *)a2 + v42);
    v45 = v44[1];
    *v43 = *v44;
    v43[1] = v45;
    v46 = v63[17];
    __dsta = &v4[v46];
    v47 = (char *)a2 + v46;
    v48 = type metadata accessor for MediaArtwork(0);
    v49 = *(_QWORD *)(v48 - 8);
    v50 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRetain(v45);
    if (v50(v47, 1, v48))
    {
      v51 = sub_100003304(&qword_10010EC08);
      memcpy(__dsta, v47, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, char *, uint64_t))(v49 + 16))(__dsta, v47, v48);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v49 + 56))(__dsta, 0, 1, v48);
    }
    v52 = v63[18];
    v53 = v63[19];
    v54 = &v4[v52];
    v55 = (uint64_t *)((char *)a2 + v52);
    v56 = v55[1];
    *v54 = *v55;
    v54[1] = v56;
    v57 = &v4[v53];
    v58 = (uint64_t *)((char *)a2 + v53);
    v59 = v58[1];
    *v57 = *v58;
    v57[1] = v59;
    swift_bridgeObjectRetain(v56);
    swift_bridgeObjectRetain(v59);
  }
  return v4;
}

void destroy for AccessPointRequiredData(_TtC13GameOverlayUI20GameOverlayUIService **a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  SEL v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  SEL v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  const char *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  _TtC13GameOverlayUI20GameOverlayUIService *v45;
  SEL v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  SEL v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  SEL v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  _TtC13GameOverlayUI20GameOverlayUIService **v67;
  SEL v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  SEL v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  id v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  const char *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  SEL v93;
  id v94;
  id v95;
  id v96;
  id v97;
  id v98;
  id v99;
  SEL v100;
  id v101;
  id v102;
  id v103;
  id v104;
  id v105;
  id v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  const char *v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  SEL v117;
  id v118;
  id v119;
  id v120;
  id v121;
  id v122;
  id v123;

  swift_bridgeObjectRelease(a1[2], (SEL)a2, a3, a4, a5, a6, a7, a8);
  swift_bridgeObjectRelease(a1[4], v10, v11, v12, v13, v14, v15, v16);
  swift_bridgeObjectRelease(a1[6], v17, v18, v19, v20, v21, v22, v23);
  swift_bridgeObjectRelease(a1[8], v24, v25, v26, v27, v28, v29, v30);
  swift_bridgeObjectRelease(a1[10], v31, v32, v33, v34, v35, v36, v37);
  v45 = a1[13];
  if (v45)
  {
    swift_bridgeObjectRelease(v45, v38, v39, v40, v41, v42, v43, v44);
    swift_bridgeObjectRelease(a1[15], v46, v47, v48, v49, v50, v51, v52);
    swift_bridgeObjectRelease(a1[17], v53, v54, v55, v56, v57, v58, v59);
    swift_bridgeObjectRelease(a1[19], v60, v61, v62, v63, v64, v65, v66);
  }
  v67 = (_TtC13GameOverlayUI20GameOverlayUIService **)((char *)a1 + *(int *)(a2 + 24));
  swift_bridgeObjectRelease(v67[1], v38, v39, v40, v41, v42, v43, v44);
  swift_bridgeObjectRelease(v67[3], v68, v69, v70, v71, v72, v73, v74);
  swift_bridgeObjectRelease(v67[5], v75, v76, v77, v78, v79, v80, v81);
  v82 = type metadata accessor for Game(0);
  v83 = (char *)v67 + *(int *)(v82 + 28);
  v84 = type metadata accessor for Date(0);
  v85 = *(_QWORD *)(v84 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v85 + 48))(v83, 1, v84))
    (*(void (**)(char *, uint64_t))(v85 + 8))(v83, v84);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)((char *)v67 + *(int *)(v82 + 60) + 8), v86, v87, v88, v89, v90, v91, v92);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)((char *)a1 + *(int *)(a2 + 52) + 8), v93, v94, v95, v96, v97, v98, v99);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)((char *)a1 + *(int *)(a2 + 64) + 8), v100, v101, v102, v103, v104, v105, v106);
  v107 = (char *)a1 + *(int *)(a2 + 68);
  v108 = type metadata accessor for MediaArtwork(0);
  v109 = *(_QWORD *)(v108 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v109 + 48))(v107, 1, v108))
    (*(void (**)(char *, uint64_t))(v109 + 8))(v107, v108);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)((char *)a1 + *(int *)(a2 + 72) + 8), v110, v111, v112, v113, v114, v115, v116);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)((char *)a1 + *(int *)(a2 + 76) + 8), v117, v118, v119, v120, v121, v122, v123);
}

uint64_t initializeWithCopy for AccessPointRequiredData(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  const void *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int (*v48)(const void *, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v59;
  unsigned int (*v60)(const void *, uint64_t, uint64_t);
  char *__dst;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v5;
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  v8 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v8;
  v9 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v9;
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v10 = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  if (v10)
  {
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = v10;
    v11 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 120) = v11;
    v12 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 136) = v12;
    v13 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 152) = v13;
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
  }
  else
  {
    v14 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v14;
    v15 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v15;
  }
  v16 = a3[6];
  v17 = (_QWORD *)(a1 + v16);
  v18 = a2 + v16;
  v19 = *(_QWORD *)(a2 + v16 + 8);
  *v17 = *(_QWORD *)(a2 + v16);
  v17[1] = v19;
  v20 = *(_QWORD *)(a2 + v16 + 24);
  v17[2] = *(_QWORD *)(a2 + v16 + 16);
  v17[3] = v20;
  v21 = *(_QWORD *)(a2 + v16 + 40);
  v17[4] = *(_QWORD *)(a2 + v16 + 32);
  v17[5] = v21;
  v22 = (int *)type metadata accessor for Game(0);
  v23 = v22[7];
  __dst = (char *)v17 + v23;
  v24 = (const void *)(v18 + v23);
  v25 = type metadata accessor for Date(0);
  v59 = *(_QWORD *)(v25 - 8);
  v60 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v59 + 48);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v21);
  if (v60(v24, 1, v25))
  {
    v26 = sub_100003304(&qword_10010CC10);
    memcpy(__dst, v24, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v59 + 16))(__dst, v24, v25);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v59 + 56))(__dst, 0, 1, v25);
  }
  *(_QWORD *)((char *)v17 + v22[8]) = *(_QWORD *)(v18 + v22[8]);
  *((_BYTE *)v17 + v22[9]) = *(_BYTE *)(v18 + v22[9]);
  *((_BYTE *)v17 + v22[10]) = *(_BYTE *)(v18 + v22[10]);
  *((_BYTE *)v17 + v22[11]) = *(_BYTE *)(v18 + v22[11]);
  *((_BYTE *)v17 + v22[12]) = *(_BYTE *)(v18 + v22[12]);
  *((_BYTE *)v17 + v22[13]) = *(_BYTE *)(v18 + v22[13]);
  *((_BYTE *)v17 + v22[14]) = *(_BYTE *)(v18 + v22[14]);
  v27 = v22[15];
  v28 = (_QWORD *)((char *)v17 + v27);
  v29 = (_QWORD *)(v18 + v27);
  v30 = v29[1];
  *v28 = *v29;
  v28[1] = v30;
  v31 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v31) = *(_QWORD *)(a2 + v31);
  v32 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  *(_QWORD *)(a1 + v32) = *(_QWORD *)(a2 + v32);
  v33 = a3[12];
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  *(_QWORD *)(a1 + v33) = *(_QWORD *)(a2 + v33);
  v34 = a3[13];
  v35 = a3[14];
  v36 = (_QWORD *)(a1 + v34);
  v37 = (_QWORD *)(a2 + v34);
  v38 = v37[1];
  *v36 = *v37;
  v36[1] = v38;
  *(_QWORD *)(a1 + v35) = *(_QWORD *)(a2 + v35);
  v39 = a3[16];
  *(_QWORD *)(a1 + a3[15]) = *(_QWORD *)(a2 + a3[15]);
  v40 = (_QWORD *)(a1 + v39);
  v41 = (_QWORD *)(a2 + v39);
  v42 = v41[1];
  *v40 = *v41;
  v40[1] = v42;
  v43 = a3[17];
  v44 = (void *)(a1 + v43);
  v45 = (const void *)(a2 + v43);
  v46 = type metadata accessor for MediaArtwork(0);
  v47 = *(_QWORD *)(v46 - 8);
  v48 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v47 + 48);
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRetain(v42);
  if (v48(v45, 1, v46))
  {
    v49 = sub_100003304(&qword_10010EC08);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v47 + 16))(v44, v45, v46);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
  }
  v50 = a3[18];
  v51 = a3[19];
  v52 = (_QWORD *)(a1 + v50);
  v53 = (_QWORD *)(a2 + v50);
  v54 = v53[1];
  *v52 = *v53;
  v52[1] = v54;
  v55 = (_QWORD *)(a1 + v51);
  v56 = (_QWORD *)(a2 + v51);
  v57 = v56[1];
  *v55 = *v56;
  v55[1] = v57;
  swift_bridgeObjectRetain(v54);
  swift_bridgeObjectRetain(v57);
  return a1;
}

uint64_t assignWithCopy for AccessPointRequiredData(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  _TtC13GameOverlayUI20GameOverlayUIService *v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  _TtC13GameOverlayUI20GameOverlayUIService *v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  _TtC13GameOverlayUI20GameOverlayUIService *v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  _TtC13GameOverlayUI20GameOverlayUIService *v34;
  SEL v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  _TtC13GameOverlayUI20GameOverlayUIService *v43;
  SEL v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  _OWORD *v51;
  __int128 *v52;
  _TtC13GameOverlayUI20GameOverlayUIService *v53;
  uint64_t v54;
  uint64_t v55;
  SEL v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  uint64_t v63;
  _TtC13GameOverlayUI20GameOverlayUIService *v64;
  SEL v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  uint64_t v72;
  _TtC13GameOverlayUI20GameOverlayUIService *v73;
  SEL v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  uint64_t v81;
  _TtC13GameOverlayUI20GameOverlayUIService *v82;
  SEL v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  _TtC13GameOverlayUI20GameOverlayUIService *v104;
  SEL v105;
  id v106;
  id v107;
  id v108;
  id v109;
  id v110;
  id v111;
  uint64_t v112;
  _TtC13GameOverlayUI20GameOverlayUIService *v113;
  SEL v114;
  id v115;
  id v116;
  id v117;
  id v118;
  id v119;
  id v120;
  uint64_t v121;
  _TtC13GameOverlayUI20GameOverlayUIService *v122;
  SEL v123;
  id v124;
  id v125;
  id v126;
  id v127;
  id v128;
  id v129;
  int *v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t (*v136)(char *, uint64_t, uint64_t);
  int v137;
  size_t v138;
  void *v139;
  uint64_t v140;
  _QWORD *v141;
  _QWORD *v142;
  uint64_t v143;
  _TtC13GameOverlayUI20GameOverlayUIService *v144;
  SEL v145;
  id v146;
  id v147;
  id v148;
  id v149;
  id v150;
  id v151;
  uint64_t v152;
  _QWORD *v153;
  _QWORD *v154;
  uint64_t v155;
  _TtC13GameOverlayUI20GameOverlayUIService *v156;
  SEL v157;
  id v158;
  id v159;
  id v160;
  id v161;
  id v162;
  id v163;
  uint64_t v164;
  _QWORD *v165;
  _QWORD *v166;
  uint64_t v167;
  _TtC13GameOverlayUI20GameOverlayUIService *v168;
  SEL v169;
  id v170;
  id v171;
  id v172;
  id v173;
  id v174;
  id v175;
  uint64_t v176;
  void *v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t (*v181)(void *, uint64_t, uint64_t);
  int v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  _QWORD *v187;
  uint64_t v188;
  _TtC13GameOverlayUI20GameOverlayUIService *v189;
  SEL v190;
  id v191;
  id v192;
  id v193;
  id v194;
  id v195;
  id v196;
  uint64_t v197;
  _QWORD *v198;
  _QWORD *v199;
  uint64_t v200;
  _TtC13GameOverlayUI20GameOverlayUIService *v201;
  SEL v202;
  id v203;
  id v204;
  id v205;
  id v206;
  id v207;
  id v208;
  void *v210;
  int *v211;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7, v8, v9, v10, v11, v12, v13, v14);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v15 = *(_QWORD *)(a2 + 32);
  v16 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16, v17, v18, v19, v20, v21, v22, v23);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v24 = *(_QWORD *)(a2 + 48);
  v25 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25, v26, v27, v28, v29, v30, v31, v32);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v33 = *(_QWORD *)(a2 + 64);
  v34 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v33;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRelease(v34, v35, v36, v37, v38, v39, v40, v41);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v42 = *(_QWORD *)(a2 + 80);
  v43 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v42;
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRelease(v43, v44, v45, v46, v47, v48, v49, v50);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v51 = (_OWORD *)(a1 + 96);
  v52 = (__int128 *)(a2 + 96);
  v53 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 104);
  v54 = *(_QWORD *)(a2 + 104);
  if (v53)
  {
    if (v54)
    {
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      v55 = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 104) = v55;
      swift_bridgeObjectRetain(v55);
      swift_bridgeObjectRelease(v53, v56, v57, v58, v59, v60, v61, v62);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      v63 = *(_QWORD *)(a2 + 120);
      v64 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 120);
      *(_QWORD *)(a1 + 120) = v63;
      swift_bridgeObjectRetain(v63);
      swift_bridgeObjectRelease(v64, v65, v66, v67, v68, v69, v70, v71);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      v72 = *(_QWORD *)(a2 + 136);
      v73 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 136);
      *(_QWORD *)(a1 + 136) = v72;
      swift_bridgeObjectRetain(v72);
      swift_bridgeObjectRelease(v73, v74, v75, v76, v77, v78, v79, v80);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      v81 = *(_QWORD *)(a2 + 152);
      v82 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 152);
      *(_QWORD *)(a1 + 152) = v81;
      swift_bridgeObjectRetain(v81);
      swift_bridgeObjectRelease(v82, v83, v84, v85, v86, v87, v88, v89);
    }
    else
    {
      sub_100004244((_QWORD *)(a1 + 96));
      v94 = *(_OWORD *)(a2 + 144);
      v96 = *v52;
      v95 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v94;
      *v51 = v96;
      *(_OWORD *)(a1 + 112) = v95;
    }
  }
  else if (v54)
  {
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    v90 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 104) = v90;
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    v91 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 120) = v91;
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    v92 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 136) = v92;
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    v93 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 152) = v93;
    swift_bridgeObjectRetain(v90);
    swift_bridgeObjectRetain(v91);
    swift_bridgeObjectRetain(v92);
    swift_bridgeObjectRetain(v93);
  }
  else
  {
    v97 = *v52;
    v98 = *(_OWORD *)(a2 + 112);
    v99 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v99;
    *v51 = v97;
    *(_OWORD *)(a1 + 112) = v98;
  }
  v211 = a3;
  v100 = a3[6];
  v101 = (_QWORD *)(a1 + v100);
  v102 = (_QWORD *)(a2 + v100);
  *v101 = *(_QWORD *)(a2 + v100);
  v103 = *(_QWORD *)(a2 + v100 + 8);
  v104 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + v100 + 8);
  v101[1] = v103;
  swift_bridgeObjectRetain(v103);
  swift_bridgeObjectRelease(v104, v105, v106, v107, v108, v109, v110, v111);
  v101[2] = v102[2];
  v112 = v102[3];
  v113 = (_TtC13GameOverlayUI20GameOverlayUIService *)v101[3];
  v101[3] = v112;
  swift_bridgeObjectRetain(v112);
  swift_bridgeObjectRelease(v113, v114, v115, v116, v117, v118, v119, v120);
  v101[4] = v102[4];
  v121 = v102[5];
  v122 = (_TtC13GameOverlayUI20GameOverlayUIService *)v101[5];
  v101[5] = v121;
  swift_bridgeObjectRetain(v121);
  swift_bridgeObjectRelease(v122, v123, v124, v125, v126, v127, v128, v129);
  v130 = (int *)type metadata accessor for Game(0);
  v131 = v130[7];
  v132 = (char *)v101 + v131;
  v133 = (char *)v102 + v131;
  v134 = type metadata accessor for Date(0);
  v135 = *(_QWORD *)(v134 - 8);
  v136 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v135 + 48);
  v210 = v132;
  LODWORD(v132) = v136(v132, 1, v134);
  v137 = v136(v133, 1, v134);
  if ((_DWORD)v132)
  {
    if (v137)
    {
      v138 = *(_QWORD *)(*(_QWORD *)(sub_100003304(&qword_10010CC10) - 8) + 64);
      v139 = v210;
LABEL_13:
      memcpy(v139, v133, v138);
      goto LABEL_16;
    }
    (*(void (**)(void *, char *, uint64_t))(v135 + 16))(v210, v133, v134);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v135 + 56))(v210, 0, 1, v134);
  }
  else
  {
    if (v137)
    {
      (*(void (**)(void *, uint64_t))(v135 + 8))(v210, v134);
      v138 = *(_QWORD *)(*(_QWORD *)(sub_100003304(&qword_10010CC10) - 8) + 64);
      v139 = v210;
      goto LABEL_13;
    }
    (*(void (**)(void *, char *, uint64_t))(v135 + 24))(v210, v133, v134);
  }
LABEL_16:
  *(_QWORD *)((char *)v101 + v130[8]) = *(_QWORD *)((char *)v102 + v130[8]);
  *((_BYTE *)v101 + v130[9]) = *((_BYTE *)v102 + v130[9]);
  *((_BYTE *)v101 + v130[10]) = *((_BYTE *)v102 + v130[10]);
  *((_BYTE *)v101 + v130[11]) = *((_BYTE *)v102 + v130[11]);
  *((_BYTE *)v101 + v130[12]) = *((_BYTE *)v102 + v130[12]);
  *((_BYTE *)v101 + v130[13]) = *((_BYTE *)v102 + v130[13]);
  *((_BYTE *)v101 + v130[14]) = *((_BYTE *)v102 + v130[14]);
  v140 = v130[15];
  v141 = (_QWORD *)((char *)v101 + v140);
  v142 = (_QWORD *)((char *)v102 + v140);
  *v141 = *v142;
  v143 = v142[1];
  v144 = (_TtC13GameOverlayUI20GameOverlayUIService *)v141[1];
  v141[1] = v143;
  swift_bridgeObjectRetain(v143);
  swift_bridgeObjectRelease(v144, v145, v146, v147, v148, v149, v150, v151);
  *(_BYTE *)(a1 + v211[7]) = *(_BYTE *)(a2 + v211[7]);
  *(_QWORD *)(a1 + v211[8]) = *(_QWORD *)(a2 + v211[8]);
  *(_QWORD *)(a1 + v211[9]) = *(_QWORD *)(a2 + v211[9]);
  *(_QWORD *)(a1 + v211[10]) = *(_QWORD *)(a2 + v211[10]);
  *(_QWORD *)(a1 + v211[11]) = *(_QWORD *)(a2 + v211[11]);
  *(_QWORD *)(a1 + v211[12]) = *(_QWORD *)(a2 + v211[12]);
  v152 = v211[13];
  v153 = (_QWORD *)(a1 + v152);
  v154 = (_QWORD *)(a2 + v152);
  *v153 = *v154;
  v155 = v154[1];
  v156 = (_TtC13GameOverlayUI20GameOverlayUIService *)v153[1];
  v153[1] = v155;
  swift_bridgeObjectRetain(v155);
  swift_bridgeObjectRelease(v156, v157, v158, v159, v160, v161, v162, v163);
  *(_QWORD *)(a1 + v211[14]) = *(_QWORD *)(a2 + v211[14]);
  *(_QWORD *)(a1 + v211[15]) = *(_QWORD *)(a2 + v211[15]);
  v164 = v211[16];
  v165 = (_QWORD *)(a1 + v164);
  v166 = (_QWORD *)(a2 + v164);
  *v165 = *v166;
  v167 = v166[1];
  v168 = (_TtC13GameOverlayUI20GameOverlayUIService *)v165[1];
  v165[1] = v167;
  swift_bridgeObjectRetain(v167);
  swift_bridgeObjectRelease(v168, v169, v170, v171, v172, v173, v174, v175);
  v176 = v211[17];
  v177 = (void *)(a1 + v176);
  v178 = (void *)(a2 + v176);
  v179 = type metadata accessor for MediaArtwork(0);
  v180 = *(_QWORD *)(v179 - 8);
  v181 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v180 + 48);
  v182 = v181(v177, 1, v179);
  v183 = v181(v178, 1, v179);
  if (!v182)
  {
    if (!v183)
    {
      (*(void (**)(void *, void *, uint64_t))(v180 + 24))(v177, v178, v179);
      goto LABEL_22;
    }
    (*(void (**)(void *, uint64_t))(v180 + 8))(v177, v179);
    goto LABEL_21;
  }
  if (v183)
  {
LABEL_21:
    v184 = sub_100003304(&qword_10010EC08);
    memcpy(v177, v178, *(_QWORD *)(*(_QWORD *)(v184 - 8) + 64));
    goto LABEL_22;
  }
  (*(void (**)(void *, void *, uint64_t))(v180 + 16))(v177, v178, v179);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v180 + 56))(v177, 0, 1, v179);
LABEL_22:
  v185 = v211[18];
  v186 = (_QWORD *)(a1 + v185);
  v187 = (_QWORD *)(a2 + v185);
  *v186 = *v187;
  v188 = v187[1];
  v189 = (_TtC13GameOverlayUI20GameOverlayUIService *)v186[1];
  v186[1] = v188;
  swift_bridgeObjectRetain(v188);
  swift_bridgeObjectRelease(v189, v190, v191, v192, v193, v194, v195, v196);
  v197 = v211[19];
  v198 = (_QWORD *)(a1 + v197);
  v199 = (_QWORD *)(a2 + v197);
  *v198 = *v199;
  v200 = v199[1];
  v201 = (_TtC13GameOverlayUI20GameOverlayUIService *)v198[1];
  v198[1] = v200;
  swift_bridgeObjectRetain(v200);
  swift_bridgeObjectRelease(v201, v202, v203, v204, v205, v206, v207, v208);
  return a1;
}

uint64_t initializeWithTake for AccessPointRequiredData(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  __int128 v9;
  int *v10;
  uint64_t v11;
  char *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v6 = a3[6];
  v7 = (_OWORD *)(a1 + v6);
  v8 = a2 + v6;
  v9 = *(_OWORD *)(a2 + v6 + 16);
  *v7 = *(_OWORD *)(a2 + v6);
  v7[1] = v9;
  v7[2] = *(_OWORD *)(a2 + v6 + 32);
  v10 = (int *)type metadata accessor for Game(0);
  v11 = v10[7];
  v12 = (char *)v7 + v11;
  v13 = (const void *)(v8 + v11);
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = sub_100003304(&qword_10010CC10);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v15 + 32))(v12, v13, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  *(_QWORD *)((char *)v7 + v10[8]) = *(_QWORD *)(v8 + v10[8]);
  *((_BYTE *)v7 + v10[9]) = *(_BYTE *)(v8 + v10[9]);
  *((_BYTE *)v7 + v10[10]) = *(_BYTE *)(v8 + v10[10]);
  *((_BYTE *)v7 + v10[11]) = *(_BYTE *)(v8 + v10[11]);
  *((_BYTE *)v7 + v10[12]) = *(_BYTE *)(v8 + v10[12]);
  *((_BYTE *)v7 + v10[13]) = *(_BYTE *)(v8 + v10[13]);
  *((_BYTE *)v7 + v10[14]) = *(_BYTE *)(v8 + v10[14]);
  *(_OWORD *)((char *)v7 + v10[15]) = *(_OWORD *)(v8 + v10[15]);
  v17 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v17) = *(_QWORD *)(a2 + v17);
  v18 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  *(_QWORD *)(a1 + v18) = *(_QWORD *)(a2 + v18);
  v19 = a3[12];
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  *(_QWORD *)(a1 + v19) = *(_QWORD *)(a2 + v19);
  v20 = a3[14];
  *(_OWORD *)(a1 + a3[13]) = *(_OWORD *)(a2 + a3[13]);
  *(_QWORD *)(a1 + v20) = *(_QWORD *)(a2 + v20);
  v21 = a3[16];
  *(_QWORD *)(a1 + a3[15]) = *(_QWORD *)(a2 + a3[15]);
  *(_OWORD *)(a1 + v21) = *(_OWORD *)(a2 + v21);
  v22 = a3[17];
  v23 = (void *)(a1 + v22);
  v24 = (const void *)(a2 + v22);
  v25 = type metadata accessor for MediaArtwork(0);
  v26 = *(_QWORD *)(v25 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    v27 = sub_100003304(&qword_10010EC08);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v26 + 32))(v23, v24, v25);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  v28 = a3[19];
  *(_OWORD *)(a1 + a3[18]) = *(_OWORD *)(a2 + a3[18]);
  *(_OWORD *)(a1 + v28) = *(_OWORD *)(a2 + v28);
  return a1;
}

uint64_t assignWithTake for AccessPointRequiredData(uint64_t a1, uint64_t a2, int *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t v11;
  _TtC13GameOverlayUI20GameOverlayUIService *v12;
  uint64_t v13;
  _TtC13GameOverlayUI20GameOverlayUIService *v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  _TtC13GameOverlayUI20GameOverlayUIService *v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  _TtC13GameOverlayUI20GameOverlayUIService *v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  _TtC13GameOverlayUI20GameOverlayUIService *v41;
  SEL v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  const char *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  _TtC13GameOverlayUI20GameOverlayUIService *v56;
  uint64_t v57;
  uint64_t v58;
  _TtC13GameOverlayUI20GameOverlayUIService *v59;
  SEL v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  uint64_t v67;
  _TtC13GameOverlayUI20GameOverlayUIService *v68;
  SEL v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  uint64_t v76;
  _TtC13GameOverlayUI20GameOverlayUIService *v77;
  SEL v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  _TtC13GameOverlayUI20GameOverlayUIService *v91;
  uint64_t v92;
  _TtC13GameOverlayUI20GameOverlayUIService *v93;
  SEL v94;
  id v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  uint64_t v101;
  _TtC13GameOverlayUI20GameOverlayUIService *v102;
  SEL v103;
  id v104;
  id v105;
  id v106;
  id v107;
  id v108;
  id v109;
  int *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t (*v116)(char *, uint64_t, uint64_t);
  int v117;
  size_t v118;
  void *v119;
  const char *v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  _TtC13GameOverlayUI20GameOverlayUIService *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  _TtC13GameOverlayUI20GameOverlayUIService *v141;
  SEL v142;
  id v143;
  id v144;
  id v145;
  id v146;
  id v147;
  id v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  _TtC13GameOverlayUI20GameOverlayUIService *v155;
  SEL v156;
  id v157;
  id v158;
  id v159;
  id v160;
  id v161;
  id v162;
  uint64_t v163;
  void *v164;
  void *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t (*v168)(void *, uint64_t, uint64_t);
  int v169;
  int v170;
  const char *v171;
  void *v172;
  void *v173;
  void *v174;
  void *v175;
  void *v176;
  void *v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  _TtC13GameOverlayUI20GameOverlayUIService *v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t *v187;
  uint64_t v188;
  uint64_t v189;
  _TtC13GameOverlayUI20GameOverlayUIService *v190;
  SEL v191;
  id v192;
  id v193;
  id v194;
  id v195;
  id v196;
  id v197;
  void *v199;
  int *v200;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v11 = *(_QWORD *)(a2 + 16);
  v12 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v11;
  swift_bridgeObjectRelease(v12, (SEL)a2, a3, a4, a5, a6, a7, a8);
  v13 = *(_QWORD *)(a2 + 32);
  v14 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v13;
  swift_bridgeObjectRelease(v14, v15, v16, v17, v18, v19, v20, v21);
  v22 = *(_QWORD *)(a2 + 48);
  v23 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v22;
  swift_bridgeObjectRelease(v23, v24, v25, v26, v27, v28, v29, v30);
  v31 = *(_QWORD *)(a2 + 64);
  v32 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v31;
  swift_bridgeObjectRelease(v32, v33, v34, v35, v36, v37, v38, v39);
  v40 = *(_QWORD *)(a2 + 80);
  v41 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v40;
  swift_bridgeObjectRelease(v41, v42, v43, v44, v45, v46, v47, v48);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v56 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 104);
  if (v56)
  {
    v57 = *(_QWORD *)(a2 + 104);
    if (v57)
    {
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = v57;
      swift_bridgeObjectRelease(v56, v49, v50, v51, v52, v53, v54, v55);
      v58 = *(_QWORD *)(a2 + 120);
      v59 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 120);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = v58;
      swift_bridgeObjectRelease(v59, v60, v61, v62, v63, v64, v65, v66);
      v67 = *(_QWORD *)(a2 + 136);
      v68 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 136);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 136) = v67;
      swift_bridgeObjectRelease(v68, v69, v70, v71, v72, v73, v74, v75);
      v76 = *(_QWORD *)(a2 + 152);
      v77 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 152);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_QWORD *)(a1 + 152) = v76;
      swift_bridgeObjectRelease(v77, v78, v79, v80, v81, v82, v83, v84);
      goto LABEL_6;
    }
    sub_100004244((_QWORD *)(a1 + 96));
  }
  v85 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v85;
  v86 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v86;
LABEL_6:
  v200 = a3;
  v87 = a3[6];
  v88 = (_QWORD *)(a1 + v87);
  v89 = (_QWORD *)(a2 + v87);
  v90 = *(_QWORD *)(a2 + v87 + 8);
  v91 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + v87 + 8);
  *v88 = *(_QWORD *)(a2 + v87);
  v88[1] = v90;
  swift_bridgeObjectRelease(v91, v49, v50, v51, v52, v53, v54, v55);
  v92 = v89[3];
  v93 = (_TtC13GameOverlayUI20GameOverlayUIService *)v88[3];
  v88[2] = v89[2];
  v88[3] = v92;
  swift_bridgeObjectRelease(v93, v94, v95, v96, v97, v98, v99, v100);
  v101 = v89[5];
  v102 = (_TtC13GameOverlayUI20GameOverlayUIService *)v88[5];
  v88[4] = v89[4];
  v88[5] = v101;
  swift_bridgeObjectRelease(v102, v103, v104, v105, v106, v107, v108, v109);
  v110 = (int *)type metadata accessor for Game(0);
  v111 = v110[7];
  v112 = (char *)v88 + v111;
  v113 = (char *)v89 + v111;
  v114 = type metadata accessor for Date(0);
  v115 = *(_QWORD *)(v114 - 8);
  v116 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v115 + 48);
  v199 = v112;
  LODWORD(v112) = v116(v112, 1, v114);
  v117 = v116(v113, 1, v114);
  if ((_DWORD)v112)
  {
    if (v117)
    {
      v118 = *(_QWORD *)(*(_QWORD *)(sub_100003304(&qword_10010CC10) - 8) + 64);
      v119 = v199;
LABEL_11:
      memcpy(v119, v113, v118);
      goto LABEL_14;
    }
    (*(void (**)(void *, char *, uint64_t))(v115 + 32))(v199, v113, v114);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v115 + 56))(v199, 0, 1, v114);
  }
  else
  {
    if (v117)
    {
      (*(void (**)(void *, uint64_t))(v115 + 8))(v199, v114);
      v118 = *(_QWORD *)(*(_QWORD *)(sub_100003304(&qword_10010CC10) - 8) + 64);
      v119 = v199;
      goto LABEL_11;
    }
    (*(void (**)(void *, char *, uint64_t))(v115 + 40))(v199, v113, v114);
  }
LABEL_14:
  *(_QWORD *)((char *)v88 + v110[8]) = *(_QWORD *)((char *)v89 + v110[8]);
  *((_BYTE *)v88 + v110[9]) = *((_BYTE *)v89 + v110[9]);
  *((_BYTE *)v88 + v110[10]) = *((_BYTE *)v89 + v110[10]);
  *((_BYTE *)v88 + v110[11]) = *((_BYTE *)v89 + v110[11]);
  *((_BYTE *)v88 + v110[12]) = *((_BYTE *)v89 + v110[12]);
  *((_BYTE *)v88 + v110[13]) = *((_BYTE *)v89 + v110[13]);
  *((_BYTE *)v88 + v110[14]) = *((_BYTE *)v89 + v110[14]);
  v127 = v110[15];
  v128 = (_QWORD *)((char *)v88 + v127);
  v129 = (_QWORD *)((char *)v89 + v127);
  v131 = *v129;
  v130 = v129[1];
  v132 = (_TtC13GameOverlayUI20GameOverlayUIService *)v128[1];
  *v128 = v131;
  v128[1] = v130;
  swift_bridgeObjectRelease(v132, v120, v121, v122, v123, v124, v125, v126);
  v133 = v200[8];
  *(_BYTE *)(a1 + v200[7]) = *(_BYTE *)(a2 + v200[7]);
  *(_QWORD *)(a1 + v133) = *(_QWORD *)(a2 + v133);
  v134 = v200[10];
  *(_QWORD *)(a1 + v200[9]) = *(_QWORD *)(a2 + v200[9]);
  *(_QWORD *)(a1 + v134) = *(_QWORD *)(a2 + v134);
  v135 = v200[12];
  *(_QWORD *)(a1 + v200[11]) = *(_QWORD *)(a2 + v200[11]);
  *(_QWORD *)(a1 + v135) = *(_QWORD *)(a2 + v135);
  v136 = v200[13];
  v137 = (_QWORD *)(a1 + v136);
  v138 = (uint64_t *)(a2 + v136);
  v140 = *v138;
  v139 = v138[1];
  v141 = (_TtC13GameOverlayUI20GameOverlayUIService *)v137[1];
  *v137 = v140;
  v137[1] = v139;
  swift_bridgeObjectRelease(v141, v142, v143, v144, v145, v146, v147, v148);
  v149 = v200[15];
  *(_QWORD *)(a1 + v200[14]) = *(_QWORD *)(a2 + v200[14]);
  *(_QWORD *)(a1 + v149) = *(_QWORD *)(a2 + v149);
  v150 = v200[16];
  v151 = (_QWORD *)(a1 + v150);
  v152 = (uint64_t *)(a2 + v150);
  v154 = *v152;
  v153 = v152[1];
  v155 = (_TtC13GameOverlayUI20GameOverlayUIService *)v151[1];
  *v151 = v154;
  v151[1] = v153;
  swift_bridgeObjectRelease(v155, v156, v157, v158, v159, v160, v161, v162);
  v163 = v200[17];
  v164 = (void *)(a1 + v163);
  v165 = (void *)(a2 + v163);
  v166 = type metadata accessor for MediaArtwork(0);
  v167 = *(_QWORD *)(v166 - 8);
  v168 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v167 + 48);
  v169 = v168(v164, 1, v166);
  v170 = v168(v165, 1, v166);
  if (!v169)
  {
    if (!v170)
    {
      (*(void (**)(void *, void *, uint64_t))(v167 + 40))(v164, v165, v166);
      goto LABEL_20;
    }
    (*(void (**)(void *, uint64_t))(v167 + 8))(v164, v166);
    goto LABEL_19;
  }
  if (v170)
  {
LABEL_19:
    v178 = sub_100003304(&qword_10010EC08);
    memcpy(v164, v165, *(_QWORD *)(*(_QWORD *)(v178 - 8) + 64));
    goto LABEL_20;
  }
  (*(void (**)(void *, void *, uint64_t))(v167 + 32))(v164, v165, v166);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v167 + 56))(v164, 0, 1, v166);
LABEL_20:
  v179 = v200[18];
  v180 = (_QWORD *)(a1 + v179);
  v181 = (uint64_t *)(a2 + v179);
  v183 = *v181;
  v182 = v181[1];
  v184 = (_TtC13GameOverlayUI20GameOverlayUIService *)v180[1];
  *v180 = v183;
  v180[1] = v182;
  swift_bridgeObjectRelease(v184, v171, v172, v173, v174, v175, v176, v177);
  v185 = v200[19];
  v186 = (_QWORD *)(a1 + v185);
  v187 = (uint64_t *)(a2 + v185);
  v189 = *v187;
  v188 = v187[1];
  v190 = (_TtC13GameOverlayUI20GameOverlayUIService *)v186[1];
  *v186 = v189;
  v186[1] = v188;
  swift_bridgeObjectRelease(v190, v191, v192, v193, v194, v195, v196, v197);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessPointRequiredData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000B8DB8);
}

uint64_t sub_1000B8DB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Game(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      v10 = sub_100003304(&qword_10010EC08);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 68);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AccessPointRequiredData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000B8E68);
}

uint64_t sub_1000B8E68(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for Game(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = sub_100003304(&qword_10010EC08);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 68);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_1000B8F08(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[16];

  v6[0] = &unk_1000CE988;
  v6[1] = &unk_1000CE9A0;
  v2 = type metadata accessor for Game(319);
  if (v3 <= 0x3F)
  {
    v6[2] = *(_QWORD *)(v2 - 8) + 64;
    v6[3] = &unk_1000CE9B8;
    v6[4] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[5] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[6] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[7] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[8] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[9] = &unk_1000CE9D0;
    v6[10] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[11] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[12] = &unk_1000CE9D0;
    sub_1000A4B90(319);
    if (v5 <= 0x3F)
    {
      v6[13] = *(_QWORD *)(v4 - 8) + 64;
      v6[14] = &unk_1000CE9D0;
      v6[15] = &unk_1000CE9D0;
      swift_initStructMetadata(a1, 256, 16, v6, a1 + 16);
    }
  }
}

uint64_t getEnumTagSinglePayload for AccessPointRequiredData.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF1)
    goto LABEL_17;
  if (a2 + 15 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 15) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 15;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 15;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 15;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x10;
  v8 = v6 - 16;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessPointRequiredData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 15 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 15) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF1)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF0)
    return ((uint64_t (*)(void))((char *)&loc_1000B90B0 + 4 * byte_1000CE905[v4]))();
  *a1 = a2 + 15;
  return ((uint64_t (*)(void))((char *)sub_1000B90E4 + 4 * byte_1000CE900[v4]))();
}

uint64_t sub_1000B90E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B90EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000B90F4);
  return result;
}

uint64_t sub_1000B9100(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000B9108);
  *(_BYTE *)result = a2 + 15;
  return result;
}

uint64_t sub_1000B910C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B9114(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessPointRequiredData.CodingKeys()
{
  return &type metadata for AccessPointRequiredData.CodingKeys;
}

unint64_t sub_1000B9134()
{
  unint64_t result;

  result = qword_100111F60;
  if (!qword_100111F60)
  {
    result = swift_getWitnessTable(&unk_1000CEA84, &type metadata for AccessPointRequiredData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100111F60);
  }
  return result;
}

unint64_t sub_1000B917C()
{
  unint64_t result;

  result = qword_100111F68;
  if (!qword_100111F68)
  {
    result = swift_getWitnessTable(&unk_1000CE9F4, &type metadata for AccessPointRequiredData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100111F68);
  }
  return result;
}

unint64_t sub_1000B91C4()
{
  unint64_t result;

  result = qword_100111F70;
  if (!qword_100111F70)
  {
    result = swift_getWitnessTable(&unk_1000CEA1C, &type metadata for AccessPointRequiredData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100111F70);
  }
  return result;
}

uint64_t sub_1000B9208(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;

  if (a1 == 0x65736143657375 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65736143657375, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x726579616C70 && a2 == 0xE600000000000000)
  {
    v7 = 0xE600000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726579616C70, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 1701667175 && a2 == 0xE400000000000000)
  {
    v8 = 0xE400000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701667175, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0xD000000000000011)
  {
    v9 = 0x80000001000D1B30;
    if (a2 == 0x80000001000D1B30)
      goto LABEL_25;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001000D1B30, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x80000001000D1B50)
  {
    v10 = 0x80000001000D1B50;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x80000001000D1B50, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_31;
  }
  if (a1 == 0x676E656C6C616863 && a2 == 0xEF746E756F437365)
  {
    v11 = 0xEF746E756F437365;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x676E656C6C616863, 0xEF746E756F437365, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_37;
  }
  if (a1 == 0xD00000000000001ALL && a2 == 0x80000001000D1B70)
  {
    v12 = 0x80000001000D1B70;
LABEL_43:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x80000001000D1B70, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_43;
  }
  if (a1 == 0xD000000000000011)
  {
    v13 = 0x80000001000D1B90;
    if (a2 == 0x80000001000D1B90)
      goto LABEL_48;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001000D1B90, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
LABEL_48:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if (a1 == 0xD000000000000011)
  {
    v14 = 0x80000001000D1BB0;
    if (a2 == 0x80000001000D1BB0)
      goto LABEL_53;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001000D1BB0, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
LABEL_53:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if (a1 == 0x6F6272656461656CLL && a2 == 0xEF656D614E647261)
  {
    v15 = 0xEF656D614E647261;
LABEL_59:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F6272656461656CLL, 0xEF656D614E647261, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_59;
  }
  if (a1 == 0x6F6272656461656CLL && a2 == 0xEF6B6E6152647261)
  {
    v16 = 0xEF6B6E6152647261;
LABEL_65:
    swift_bridgeObjectRelease(v16);
    return 10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F6272656461656CLL, 0xEF6B6E6152647261, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
    goto LABEL_65;
  }
  if (a1 == 0xD000000000000016 && a2 == 0x80000001000D1BD0)
  {
    v17 = 0x80000001000D1BD0;
LABEL_71:
    swift_bridgeObjectRelease(v17);
    return 11;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x80000001000D1BD0, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
    goto LABEL_71;
  }
  if (a1 == 0x496D616441637361 && a2 == 0xE900000000000044)
  {
    v18 = 0xE900000000000044;
LABEL_77:
    swift_bridgeObjectRelease(v18);
    return 12;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x496D616441637361, 0xE900000000000044, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
    goto LABEL_77;
  }
  if (a1 == 0x6B726F77747261 && a2 == 0xE700000000000000)
  {
    v19 = 0xE700000000000000;
LABEL_83:
    swift_bridgeObjectRelease(v19);
    return 13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6B726F77747261, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v19 = a2;
    goto LABEL_83;
  }
  if (a1 == 0x656C746954637361 && a2 == 0xE800000000000000)
  {
    v20 = 0xE800000000000000;
LABEL_89:
    swift_bridgeObjectRelease(v20);
    return 14;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C746954637361, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v20 = a2;
    goto LABEL_89;
  }
  if (a1 == 0x6974627553637361 && a2 == 0xEB00000000656C74)
  {
    swift_bridgeObjectRelease(0xEB00000000656C74);
    return 15;
  }
  else
  {
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6974627553637361, 0xEB00000000656C74, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v21 & 1) != 0)
      return 15;
    else
      return 16;
  }
}

id sub_1000B9894@<X0>(_QWORD *a1@<X8>)
{
  id result;

  objc_msgSend((id)objc_opt_self(GKImageRestrictions), "setForCurrentProcessAllowingPDF:", 1);
  result = objc_msgSend(objc_allocWithZone((Class)GKImageRestrictions), "init");
  *a1 = result;
  return result;
}

uint64_t sub_1000B98E4@<X0>(_QWORD *a1@<X8>)
{
  id v2;
  uint64_t result;

  v2 = objc_msgSend((id)objc_opt_self(ACAccountStore), "ams_sharedAccountStore");
  result = sub_1000509C8(0, (unint64_t *)&unk_100112070, ACAccountStore_ptr);
  a1[3] = result;
  a1[4] = &protocol witness table for ACAccountStore;
  *a1 = v2;
  return result;
}

uint64_t sub_1000B9954(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v2[2] = a1;
  v2[3] = a2;
  v3 = (*(_QWORD *)(*(_QWORD *)(sub_100003304(&qword_100112058) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[4] = swift_task_alloc(v3);
  v2[5] = swift_task_alloc(v3);
  v4 = type metadata accessor for Bag.Stubs(0);
  v2[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Bag(0);
  v2[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[8] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[9] = swift_task_alloc(v7);
  v2[10] = swift_task_alloc(v7);
  v2[11] = swift_task_alloc(v7);
  v8 = type metadata accessor for Bag.Profile(0);
  v2[12] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[13] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[14] = swift_task_alloc(v10);
  v2[15] = swift_task_alloc(v10);
  return swift_task_switch(sub_1000B9A5C, 0, 0);
}

uint64_t sub_1000B9A5C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;

  v1 = v0[14];
  v2 = v0[15];
  v3 = v0[12];
  v4 = v0[13];
  v5 = v0[6];
  v6 = (uint64_t *)v0[3];
  v7 = *v6;
  v8 = v6[1];
  v9 = v6[2];
  v10 = v6[3];
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  Bag.Profile.init(name:version:)(v7, v8, v9, v10);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v2, v3);
  Bag.Stubs.init()(v11);
  Bag.init(mockProfile:stubs:)(v1, v5);
  v0[16] = static Bag.fetchBag(forProfile:)(v2);
  v12 = sub_100003304(&qword_100112060);
  v13 = sub_1000BB19C();
  v14 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of Future.then()[1]);
  v0[17] = v14;
  *v14 = v0;
  v14[1] = sub_1000B9B70;
  return dispatch thunk of Future.then()(v0[5], v12, v13);
}

uint64_t sub_1000B9B70()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 136));
  if (v0)
  {
    swift_release(*(_QWORD *)(v2 + 128));
    swift_errorRelease(v0);
    v3 = sub_1000B9D9C;
  }
  else
  {
    v3 = sub_1000B9BE0;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000B9BE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = swift_release(*(_QWORD *)(v0 + 128));
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, __n128))(v2 + 56))(v3, 0, 1, v1, v4);
  v5 = *(_QWORD *)(v0 + 88);
  v7 = *(_QWORD *)(v0 + 64);
  v6 = *(_QWORD *)(v0 + 72);
  v8 = *(_QWORD *)(v0 + 56);
  v9 = *(_QWORD *)(v0 + 32);
  sub_1000BB1E8(*(_QWORD *)(v0 + 40), v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v5, v8);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v9, 1, v8);
  v11 = *(_QWORD *)(v0 + 80);
  v12 = *(_QWORD *)(v0 + 56);
  v13 = *(_QWORD *)(v0 + 64);
  v14 = *(_QWORD *)(v0 + 32);
  if (v10 == 1)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v13 + 32))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 56));
    sub_1000BB230(v14);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v13 + 8))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 56));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v11, v14, v12);
  }
  v15 = *(_QWORD *)(v0 + 120);
  v16 = *(_QWORD *)(v0 + 104);
  v26 = *(_QWORD *)(v0 + 96);
  v27 = *(_QWORD *)(v0 + 112);
  v17 = *(_QWORD *)(v0 + 80);
  v18 = *(_QWORD *)(v0 + 88);
  v19 = *(_QWORD *)(v0 + 64);
  v20 = *(_QWORD *)(v0 + 56);
  v28 = *(_QWORD *)(v0 + 72);
  v29 = *(_QWORD *)(v0 + 48);
  v21 = *(_QWORD *)(v0 + 40);
  v30 = *(_QWORD *)(v0 + 32);
  v22 = *(_QWORD *)(v0 + 24);
  v23 = type metadata accessor for BagProfile(0);
  Bag.withValuesForKeys(_:)(*(_QWORD *)(v22 + *(int *)(v23 + 28)));
  v24 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
  v24(v17, v20);
  v24(v18, v20);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v26);
  sub_1000BB230(v21);
  swift_task_dealloc(v15);
  swift_task_dealloc(v27);
  swift_task_dealloc(v18);
  swift_task_dealloc(v17);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v21);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B9D9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 64) + 56))(*(_QWORD *)(v0 + 40), 1, 1, *(_QWORD *)(v0 + 56));
  if (qword_10010BAA0 != -1)
    swift_once(&qword_10010BAA0, sub_100004DCC);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100004E8C(v1, (uint64_t)qword_1001232D8);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "GameObjectGraphBuilder - frameworkObjects: Unable to fetch bag. Using a mock bag.", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  v6 = *(_QWORD *)(v0 + 88);
  v8 = *(_QWORD *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 72);
  v9 = *(_QWORD *)(v0 + 56);
  v10 = *(_QWORD *)(v0 + 32);
  sub_1000BB1E8(*(_QWORD *)(v0 + 40), v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v6, v9);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v10, 1, v9);
  v12 = *(_QWORD *)(v0 + 80);
  v13 = *(_QWORD *)(v0 + 56);
  v14 = *(_QWORD *)(v0 + 64);
  v15 = *(_QWORD *)(v0 + 32);
  if (v11 == 1)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v14 + 32))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 56));
    sub_1000BB230(v15);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v14 + 8))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 56));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(v12, v15, v13);
  }
  v16 = *(_QWORD *)(v0 + 120);
  v17 = *(_QWORD *)(v0 + 104);
  v27 = *(_QWORD *)(v0 + 96);
  v28 = *(_QWORD *)(v0 + 112);
  v18 = *(_QWORD *)(v0 + 80);
  v19 = *(_QWORD *)(v0 + 88);
  v20 = *(_QWORD *)(v0 + 64);
  v21 = *(_QWORD *)(v0 + 56);
  v29 = *(_QWORD *)(v0 + 72);
  v30 = *(_QWORD *)(v0 + 48);
  v22 = *(_QWORD *)(v0 + 40);
  v31 = *(_QWORD *)(v0 + 32);
  v23 = *(_QWORD *)(v0 + 24);
  v24 = type metadata accessor for BagProfile(0);
  Bag.withValuesForKeys(_:)(*(_QWORD *)(v23 + *(int *)(v24 + 28)));
  v25 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
  v25(v18, v21);
  v25(v19, v21);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v27);
  sub_1000BB230(v22);
  swift_task_dealloc(v16);
  swift_task_dealloc(v28);
  swift_task_dealloc(v19);
  swift_task_dealloc(v18);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v22);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B9FF4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[3] = a1;
  v2[4] = a2;
  v3 = type metadata accessor for AppleServicesURLProtocol(0);
  v2[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[6] = v4;
  v2[7] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000BA054, 0, 0);
}

uint64_t sub_1000BA054()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v0[8] = objc_msgSend((id)objc_opt_self(AMSProcessInfo), "currentProcess");
  type metadata accessor for BaseObjectGraph(0);
  v0[9] = static BaseObjectGraph.current.getter();
  v1 = sub_100003304(&qword_100112050);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  v0[10] = v2;
  *v2 = v0;
  v2[1] = sub_1000BA104;
  return BaseObjectGraph.inject<A>(_:)(v0 + 2, v1, v1);
}

uint64_t sub_1000BA104()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc(v3);
  v4 = v2[9];
  if (v0)
  {
    v5 = (void *)v2[8];
    swift_release(v4);

    v6 = sub_1000BA2B8;
  }
  else
  {
    swift_release(v4);
    v2[12] = sub_1000509C8(0, &qword_100111FD0, AMSURLSession_ptr);
    v6 = sub_1000BA198;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000BA198()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = v0[2];
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[6] + 16))(v0[7], v0[4], v0[5]);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to AMSURLSession.init(process:bag:urlProtocol:)[1]);
  v0[13] = v2;
  *v2 = v0;
  v2[1] = sub_1000BA204;
  return AMSURLSession.init(process:bag:urlProtocol:)(v0[8], v1, v0[7]);
}

uint64_t sub_1000BA204(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 104);
  *(_QWORD *)(*v2 + 112) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_1000BA2EC;
  }
  else
  {
    *(_QWORD *)(v4 + 120) = a1;
    v6 = sub_1000BA278;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000BA278()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  **(_QWORD **)(v0 + 24) = *(_QWORD *)(v0 + 120);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000BA2B8()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000BA2EC()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000BA320@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  __n128 v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[3];
  uint64_t v34;
  void *v35;

  v31 = a1;
  v32 = type metadata accessor for MetricsPipeline.Configuration(0);
  v29 = *(_QWORD *)(v32 - 8);
  v1 = __chkstk_darwin(v32);
  v3 = (char *)&v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  v30 = (char *)&v26 - v4;
  v5 = sub_100003304(&qword_100110350);
  v27 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Bag(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v26 - v13;
  type metadata accessor for BaseObjectGraph(0);
  v15 = static BaseObjectGraph.current.getter();
  BaseObjectGraph.inject<A>(_:)(v8, v8);
  v16 = type metadata accessor for AMSMetricsEventRecorder(0);
  v28 = v9;
  v17 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v17(v12, v14, v8);
  if (qword_10010BB78 != -1)
    swift_once(&qword_10010BB78, sub_10008FFB0);
  Bag.subscript.getter(static Bag.metricsTopicKey);
  Bag.Value.current(or:)(v33, sub_100090134, 0, v5);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v5);
  v18 = AMSMetricsEventRecorder.__allocating_init(bag:defaultTopic:)(v12, v33[0], v33[1]);
  v17(v12, v14, v8);
  v34 = type metadata accessor for IntentMetricsEventLinter(0);
  v35 = &protocol witness table for IntentMetricsEventLinter;
  sub_1000052B0(v33);
  v19 = swift_retain(v15);
  IntentMetricsEventLinter.init(objectGraph:)(v19);
  MetricsPipeline.Configuration.init(bag:linter:anonymousTopics:)(v12, v33, &_swiftEmptySetSingleton);
  v34 = v16;
  v35 = &protocol witness table for AMSMetricsEventRecorder;
  v33[0] = v18;
  swift_retain(v18);
  v20 = v30;
  MetricsPipeline.Configuration.withRecorder(_:)(v33);
  v21 = v29;
  v22 = *(void (**)(char *, uint64_t))(v29 + 8);
  v23 = v32;
  v22(v3, v32);
  sub_100004624(v33);
  (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v3, v20, v23);
  MetricsPipeline.init(from:)(v3);
  swift_release(v15);
  v24 = swift_release(v18);
  ((void (*)(char *, uint64_t, __n128))v22)(v20, v23, v24);
  return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v14, v8);
}

uint64_t sub_1000BA618@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t (*v15)(char *, uint64_t);
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, char *, uint64_t);
  char *v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  char *v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;

  v32 = a1;
  v1 = type metadata accessor for NativeIntentDispatcher(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v3);
  v8 = (char *)&v30 - v7;
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v30 - v10;
  v12 = __chkstk_darwin(v9);
  v35 = (char *)&v30 - v13;
  v33 = 0xD000000000000011;
  v34 = 0x80000001000D1BF0;
  NativeIntentDispatcher.init()(v12);
  v14 = sub_1000BA8B8();
  NativeIntentDispatcher.registering<A>(_:)(&v33, &type metadata for AccessPointPageIntentImplementation, v14);
  v15 = *(uint64_t (**)(char *, uint64_t))(v2 + 8);
  v16 = v15(v11, v1);
  v33 = 0xD000000000000013;
  v34 = 0x80000001000D1C10;
  NativeIntentDispatcher.init()(v16);
  v17 = sub_1000BA8FC();
  NativeIntentDispatcher.registering<A>(_:)(&v33, &type metadata for InGameBannerPageIntentImplementation, v17);
  v30 = v8;
  v18 = v15(v8, v1);
  v31 = (void (*)(char *, uint64_t))v15;
  NativeIntentDispatcher.init()(v18);
  v19 = sub_1000BA940();
  NativeIntentDispatcher.registering<A>(_:)(v19, &type metadata for AccessPointDataIntentImplementation, v19);
  v15(v5, v1);
  v20 = sub_100003304(&qword_100111F98);
  v21 = *(_QWORD *)(v2 + 72);
  v22 = *(unsigned __int8 *)(v2 + 80);
  v23 = (v22 + 32) & ~v22;
  v24 = swift_allocObject(v20, v23 + 3 * v21, v22 | 7);
  v25 = *(void (**)(uint64_t, char *, uint64_t))(v2 + 16);
  v25(v24 + v23, v35, v1);
  v25(v24 + v23 + v21, v11, v1);
  v26 = v30;
  v27 = ((uint64_t (*)(uint64_t, char *, uint64_t))v25)(v24 + v23 + 2 * v21, v30, v1);
  NativeIntentDispatcher.init()(v27);
  NativeIntentDispatcher.register(contentsOf:)(v24 + v23);
  NativeIntentDispatcher.register(contentsOf:)(v24 + v23 + v21);
  NativeIntentDispatcher.register(contentsOf:)(v24 + v23 + 2 * v21);
  swift_setDeallocating(v24);
  swift_arrayDestroy(v24 + v23, 3, v1);
  swift_deallocClassInstance(v24, 32, 7);
  v28 = v31;
  v31(v26, v1);
  v28(v11, v1);
  return ((uint64_t (*)(char *, uint64_t))v28)(v35, v1);
}

unint64_t sub_1000BA8B8()
{
  unint64_t result;

  result = qword_100111F80;
  if (!qword_100111F80)
  {
    result = swift_getWitnessTable(&unk_1000CCB74, &type metadata for AccessPointPageIntentImplementation);
    atomic_store(result, (unint64_t *)&qword_100111F80);
  }
  return result;
}

unint64_t sub_1000BA8FC()
{
  unint64_t result;

  result = qword_100111F88;
  if (!qword_100111F88)
  {
    result = swift_getWitnessTable(&unk_1000C84E8, &type metadata for InGameBannerPageIntentImplementation);
    atomic_store(result, (unint64_t *)&qword_100111F88);
  }
  return result;
}

unint64_t sub_1000BA940()
{
  unint64_t result;

  result = qword_100111F90;
  if (!qword_100111F90)
  {
    result = swift_getWitnessTable(&unk_1000CA404, &type metadata for AccessPointDataIntentImplementation);
    atomic_store(result, (unint64_t *)&qword_100111F90);
  }
  return result;
}

char *sub_1000BA984(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  void (*v47)(char *, uint64_t, __n128);
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __n128 v63;
  void (*v64)(char *, uint64_t, __n128);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  _QWORD v77[5];

  v67 = a2;
  v68 = a1;
  v72 = type metadata accessor for AppleServicesURLProtocol(0);
  v2 = *(_QWORD *)(v72 - 8);
  v3 = *(_QWORD *)(v2 + 64);
  __chkstk_darwin(v72);
  v69 = (char *)&v66 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for BagProfile(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Dependency(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v71 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v70 = (char *)&v66 - v13;
  v14 = __chkstk_darwin(v12);
  v73 = (char *)&v66 - v15;
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v66 - v17;
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v66 - v20;
  __chkstk_darwin(v19);
  v23 = (char *)&v66 - v22;
  v24 = type metadata accessor for GKImageRestrictions(0);
  v76 = v23;
  Dependency.init<A>(satisfying:with:)(v24, sub_1000B9894, 0, v24);
  v74 = v21;
  Dependency.init<A>(satisfying:with:)(&type metadata for BuildType, sub_1000056E4, 0, &type metadata for BuildType);
  v25 = sub_100003304((uint64_t *)&unk_100111FA0);
  v75 = v18;
  Dependency.init<A>(satisfying:with:)(v25, sub_1000B98E4, 0, v25);
  v77[3] = &type metadata for GameOverlayUIFeatureFlags;
  v77[4] = sub_100004EA4();
  LOBYTE(v77[0]) = 2;
  LOBYTE(v18) = isFeatureEnabled(_:)(v77);
  sub_100004624(v77);
  if ((v18 & 1) != 0)
  {
    v26 = type metadata accessor for Bag(0);
    sub_1000BAF34(v67, (uint64_t)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
    v27 = *(unsigned __int8 *)(v5 + 80);
    v28 = (v27 + 16) & ~v27;
    v29 = swift_allocObject(&unk_1001021F0, v28 + v6, v27 | 7);
    sub_1000BB018((uint64_t)v7, v29 + v28);
    v30 = v73;
    Dependency.init<A>(satisfying:with:)(v26, &unk_100111FC8, v29, v26);
    v31 = sub_1000509C8(0, &qword_100111FD0, AMSURLSession_ptr);
    v32 = v69;
    v33 = v72;
    (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v69, v68, v72);
    v34 = *(unsigned __int8 *)(v2 + 80);
    v35 = (v34 + 16) & ~v34;
    v36 = swift_allocObject(&unk_100102218, v35 + v3, v34 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v2 + 32))(v36 + v35, v32, v33);
    v37 = v70;
    Dependency.init<A>(satisfying:with:)(v31, &unk_100111FE0, v36, v31);
    v38 = type metadata accessor for MetricsPipeline(0);
    v39 = v71;
    Dependency.init<A>(satisfying:with:)(v38, sub_1000BA320, 0, v38);
    type metadata accessor for BaseObjectGraph(0);
    v40 = sub_100003304(&qword_10010E778);
    v41 = *(unsigned __int8 *)(v9 + 80);
    v42 = (v41 + 32) & ~v41;
    v43 = swift_allocObject(v40, v42 + *(_QWORD *)(v9 + 72), v41 | 7);
    *(_OWORD *)(v43 + 16) = xmmword_1000C9D90;
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 16))(v43 + v42, v30, v8);
    v44 = BaseObjectGraph.__allocating_init(name:_:)(0, 0xE000000000000000, v43);
    v45 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v37);
    v72 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v39);
    swift_release(v44);
    v46 = swift_release(v45);
    v47 = *(void (**)(char *, uint64_t, __n128))(v9 + 8);
    v47(v39, v8, v46);
    ((void (*)(char *, uint64_t))v47)(v37, v8);
    ((void (*)(char *, uint64_t))v47)(v30, v8);
    v48 = v30;
  }
  else
  {
    type metadata accessor for BaseObjectGraph(0);
    v72 = BaseObjectGraph.__allocating_init(name:_:)(0, 0xE000000000000000, &_swiftEmptyArrayStorage);
    v48 = v73;
  }
  v49 = v9;
  v50 = sub_1000509C8(0, (unint64_t *)&unk_100111FB0, AMSProcessInfo_ptr);
  v77[0] = objc_msgSend((id)objc_opt_self(AMSProcessInfo), "currentProcess");
  Dependency.init<A>(satisfying:with:)(v50, v77, v50);
  type metadata accessor for BaseObjectGraph(0);
  v51 = sub_100003304(&qword_10010E778);
  v52 = *(unsigned __int8 *)(v9 + 80);
  v53 = (v52 + 32) & ~v52;
  v54 = swift_allocObject(v51, v53 + *(_QWORD *)(v9 + 72), v52 | 7);
  *(_OWORD *)(v54 + 16) = xmmword_1000C9D90;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 16))(v54 + v53, v76, v8);
  v55 = BaseObjectGraph.__allocating_init(name:_:)(0, 0xE000000000000000, v54);
  v56 = v74;
  v57 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v74);
  v58 = v75;
  v59 = v49;
  v60 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v75);
  v61 = v72;
  v62 = dispatch thunk of BaseObjectGraph.adding(allDependenciesOf:)(v72);
  v73 = (char *)dispatch thunk of BaseObjectGraph.adding(dependency:)(v48);
  swift_release(v55);
  swift_release(v57);
  swift_release(v60);
  swift_release(v62);
  v63 = swift_release(v61);
  v64 = *(void (**)(char *, uint64_t, __n128))(v59 + 8);
  v64(v48, v8, v63);
  ((void (*)(char *, uint64_t))v64)(v58, v8);
  ((void (*)(char *, uint64_t))v64)(v56, v8);
  ((void (*)(char *, uint64_t))v64)(v76, v8);
  return v73;
}

uint64_t sub_1000BAF34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BagProfile(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000BAF78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;

  v1 = type metadata accessor for BagProfile(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v0 + v4 + 8), v8, v9, v10, v11, v12, v13, v14);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v7 + 24), v15, v16, v17, v18, v19, v20, v21);
  v22 = v7 + *(int *)(v1 + 24);
  v23 = type metadata accessor for Bag.Stubs(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v22, v23);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v7 + *(int *)(v1 + 28)), v24, v25, v26, v27, v28, v29, v30);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000BB018(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BagProfile(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000BB05C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for BagProfile(0) - 8) + 80);
  v5 = v1 + ((v4 + 16) & ~v4);
  v6 = (_QWORD *)swift_task_alloc(dword_100111FC4);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_1000252CC;
  return sub_1000B9954(a1, v5);
}

uint64_t sub_1000BB0CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for AppleServicesURLProtocol(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000BB12C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AppleServicesURLProtocol(0) - 8) + 80);
  v5 = v1 + ((v4 + 16) & ~v4);
  v6 = (_QWORD *)swift_task_alloc(dword_100111FDC);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_1000263E8;
  return sub_1000B9FF4(a1, v5);
}

unint64_t sub_1000BB19C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100112068;
  if (!qword_100112068)
  {
    v1 = sub_100006E54(&qword_100112060);
    result = swift_getWitnessTable(&protocol conformance descriptor for Promise<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100112068);
  }
  return result;
}

uint64_t sub_1000BB1E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003304(&qword_100112058);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000BB230(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100003304(&qword_100112058);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000BB270@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
}

uint64_t StrokeFocusEffect.init(shape:color:strokeWidth:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, double a8@<D0>)
{
  uint64_t result;
  _QWORD v16[4];

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a7, a1);
  v16[0] = a3;
  v16[1] = a4;
  v16[2] = a5;
  v16[3] = a6;
  result = type metadata accessor for StrokeFocusEffect(0, (uint64_t)v16);
  *(_QWORD *)(a7 + *(int *)(result + 52)) = a2;
  *(double *)(a7 + *(int *)(result + 56)) = a8;
  return result;
}

uint64_t type metadata accessor for StrokeFocusEffect(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for StrokeFocusEffect);
}

uint64_t View.focusEffect<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v19;

  v10 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v17 + 16))(v16, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v5, a2);
  return sub_1000BB568((uint64_t)v16, (uint64_t)v12, a3, a4, a5);
}

uint64_t sub_1000BB3F8(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v21 = a6;
  v12 = *(_QWORD *)(a4 - 8);
  v13 = __chkstk_darwin(a1);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v18 + 16))(v17, v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a1, a4);
  return _ShapeView.init(shape:style:fillStyle:)(v17, v15, a2 & 0x101, a3, a4, a5, v21);
}

double View.focusEffectPreview()(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  double result;
  char v6;

  KeyPath = swift_getKeyPath(&unk_1000CEB40);
  v6 = 1;
  View.environment<A>(_:_:)(KeyPath, &v6, a1, a2);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_1000BB568@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t result;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a5, a1);
  v10 = (int *)type metadata accessor for FocusEffectView(0, a3, a4, v9);
  v11 = a5 + v10[9];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a4);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v11, a2, AssociatedTypeWitness);
  v14 = a5 + v10[10];
  *(_BYTE *)v14 = FocusState.init<>()(v13) & 1;
  *(_QWORD *)(v14 + 8) = v15;
  *(_BYTE *)(v14 + 16) = v16 & 1;
  v17 = a5 + v10[11];
  result = swift_getKeyPath(&unk_1000CEB40);
  *(_QWORD *)v17 = result;
  *(_BYTE *)(v17 + 8) = 0;
  return result;
}

uint64_t StrokeFocusEffect.applyEffect(isFocused:content:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t WitnessTable;
  void *v19;
  _QWORD v20[4];

  v3 = a3[3];
  v13 = a3[2];
  v14 = v3;
  v4 = a3[5];
  v15 = a3[4];
  v16 = v4;
  v17 = a1;
  v5 = static Alignment.center.getter(a1);
  v7 = v6;
  v20[0] = type metadata accessor for _StrokedShape(255, v13, v15);
  v20[1] = &type metadata for Color;
  v20[2] = swift_getWitnessTable(&protocol conformance descriptor for _StrokedShape<A>, v20[0]);
  v20[3] = &protocol witness table for Color;
  v8 = type metadata accessor for _ShapeView(255, v20);
  v9 = type metadata accessor for ModifiedContent(0, v8, &type metadata for _PaddingLayout);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _ShapeView<A, B>, v8);
  v19 = &protocol witness table for _PaddingLayout;
  v10 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v9);
  return View.overlay<A>(alignment:content:)(v5, v7, sub_1000BC30C, &v12, v3, v9, v4, v10);
}

uint64_t sub_1000BB778@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X5>, char *a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t WitnessTable;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, __n128);
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  char *v35;
  void (*v36)(char *, uint64_t);
  uint64_t v38;
  int v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  void *v47;
  void *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  void *v54;

  v47 = a4;
  v48 = a5;
  v39 = a2;
  v38 = a1;
  v46 = a6;
  v7 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(a1);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = v10;
  v13 = type metadata accessor for _StrokedShape(0, v12, v10);
  v45 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v38 - v14;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _StrokedShape<A>, v13);
  v51 = v13;
  v52 = &type metadata for Color;
  v40 = WitnessTable;
  v53 = WitnessTable;
  v54 = &protocol witness table for Color;
  v17 = type metadata accessor for _ShapeView(0, &v51);
  v43 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v19 = (char *)&v38 - v18;
  v20 = type metadata accessor for ModifiedContent(0, v17, &type metadata for _PaddingLayout);
  v44 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v41 = (char *)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v22);
  v42 = (char *)&v38 - v24;
  v25 = v7;
  v26 = *(void (**)(char *, __n128))(v7 + 16);
  v27 = v38;
  v26(v9, v23);
  v28.n128_u64[0] = 0;
  if ((v39 & 1) != 0)
  {
    v51 = a3;
    v52 = v47;
    v53 = v11;
    v54 = v48;
    v28.n128_u64[0] = *(_QWORD *)(v27 + *(int *)(type metadata accessor for StrokeFocusEffect(0, (uint64_t)&v51) + 56));
  }
  Shape.stroke(lineWidth:)(a3, v11, v28);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v9, a3);
  v51 = a3;
  v52 = v47;
  v53 = v11;
  v54 = v48;
  v29 = type metadata accessor for StrokeFocusEffect(0, (uint64_t)&v51);
  v51 = *(_QWORD *)(v27 + *(int *)(v29 + 52));
  sub_1000BB3F8((uint64_t)&v51, 256, v13, (uint64_t)&type metadata for Color, v40, (uint64_t)&protocol witness table for Color);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v15, v13);
  v30 = *(double *)(v27 + *(int *)(v29 + 56)) * -0.5 + 1.0;
  v31 = swift_getWitnessTable(&protocol conformance descriptor for _ShapeView<A, B>, v17);
  v32 = v41;
  View.padding(_:)(v17, v31, v30);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v19, v17);
  v49 = v31;
  v50 = &protocol witness table for _PaddingLayout;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v20);
  v33 = v44;
  v34 = *(void (**)(char *, char *, uint64_t))(v44 + 16);
  v35 = v42;
  v34(v42, v32, v20);
  v36 = *(void (**)(char *, uint64_t))(v33 + 8);
  v36(v32, v20);
  v34(v46, v35, v20);
  return ((uint64_t (*)(char *, uint64_t))v36)(v35, v20);
}

uint64_t FillFocusBackgroundEffect.init(shape:color:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t result;
  _QWORD v14[4];

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a7, a1);
  v14[0] = a3;
  v14[1] = a4;
  v14[2] = a5;
  v14[3] = a6;
  result = type metadata accessor for FillFocusBackgroundEffect(0, (uint64_t)v14);
  *(_QWORD *)(a7 + *(int *)(result + 52)) = a2;
  return result;
}

uint64_t FillFocusBackgroundEffect.applyEffect(isFocused:content:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t WitnessTable;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD v17[4];

  v3 = a3[3];
  v12 = a3[2];
  v13 = v3;
  v4 = a3[5];
  v14 = a3[4];
  v15 = v4;
  v16 = a1;
  v5 = static Alignment.center.getter(a1);
  v7 = v6;
  v17[0] = v12;
  v17[1] = &type metadata for Color;
  v17[2] = v14;
  v17[3] = &protocol witness table for Color;
  v8 = type metadata accessor for _ShapeView(0, v17);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _ShapeView<A, B>, v8);
  return View.background<A>(alignment:content:)(v5, v7, sub_1000BC324, &v11, v3, v8, v4, WitnessTable);
}

uint64_t sub_1000BBC00@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, char *a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  void (*v27)(char *, char *, uint64_t);
  void (*v28)(char *, uint64_t);
  uint64_t v30;
  void *v31;
  void *v32;
  char *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  void *v37;

  v31 = a4;
  v32 = a6;
  v33 = a7;
  v11 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(a1);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = v14;
  v35 = &type metadata for Color;
  v36 = v15;
  v37 = &protocol witness table for Color;
  v16 = type metadata accessor for _ShapeView(0, &v34);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v30 - v22;
  v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16))(v13, a1, a3, v21);
  if ((a2 & 1) != 0)
  {
    v34 = a3;
    v35 = v31;
    v36 = a5;
    v37 = v32;
    v25 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for FillFocusBackgroundEffect(0, (uint64_t)&v34) + 52));
    swift_retain(v25);
  }
  else
  {
    v25 = static Color.clear.getter(v24);
  }
  v34 = v25;
  sub_1000BB3F8((uint64_t)&v34, 256, a3, (uint64_t)&type metadata for Color, a5, (uint64_t)&protocol witness table for Color);
  v26 = swift_release(v25);
  (*(void (**)(char *, uint64_t, __n128))(v11 + 8))(v13, a3, v26);
  swift_getWitnessTable(&protocol conformance descriptor for _ShapeView<A, B>, v16);
  v27 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
  v27(v23, v19, v16);
  v28 = *(void (**)(char *, uint64_t))(v17 + 8);
  v28(v19, v16);
  v27(v33, v23, v16);
  return ((uint64_t (*)(char *, uint64_t))v28)(v23, v16);
}

uint64_t sub_1000BBDE0@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  char *v7;
  uint64_t AssociatedConformanceWitness;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char v18;
  char *v19;
  char *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  void (*v30)(char *, uint64_t);
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t OpaqueTypeConformance2;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 v45;

  v39 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  v33 = *(_QWORD *)(a1 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v4);
  v37 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v7 = (char *)&v32 - v6;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v4, v33, AssociatedTypeWitness, &protocol requirements base descriptor for CustomFocusEffect, &associated conformance descriptor for CustomFocusEffect.CustomFocusEffect.EffectBody: View);
  v43 = AssociatedTypeWitness;
  v44 = AssociatedConformanceWitness;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v43, &opaque type descriptor for <<opaque return type of View.focusEffectDisabled(_:)>>, 0);
  v38 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  v10 = OpaqueTypeMetadata2;
  v34 = OpaqueTypeMetadata2;
  __chkstk_darwin(OpaqueTypeMetadata2);
  v32 = (char *)&v32 - v11;
  v43 = AssociatedTypeWitness;
  v44 = AssociatedConformanceWitness;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v43, &opaque type descriptor for <<opaque return type of View.focusEffectDisabled(_:)>>, 1);
  v43 = v10;
  v44 = OpaqueTypeConformance2;
  v12 = swift_getOpaqueTypeMetadata2(0, &v43, &opaque type descriptor for <<opaque return type of View.focused(_:)>>, 0);
  v36 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v32 - v16;
  v18 = sub_1000BC0A0(a1);
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v4 + 40))(v18 & 1, v2 + *(int *)(a1 + 36), v33, v4);
  v19 = v32;
  View.focusEffectDisabled(_:)(1, AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v7, AssociatedTypeWitness);
  v20 = (char *)(v2 + *(int *)(a1 + 40));
  v21 = *v20;
  v22 = *((_QWORD *)v20 + 1);
  LOBYTE(v20) = v20[16];
  v40 = v21;
  v41 = v22;
  v42 = (char)v20;
  v23 = sub_100003304(&qword_100112270);
  FocusState.projectedValue.getter(&v43, v23);
  v24 = v43;
  v25 = v44;
  v26 = v34;
  View.focused(_:)(v43, v44, v45, v34, OpaqueTypeConformance2);
  swift_release(v25);
  v27 = swift_release(v24);
  (*(void (**)(char *, uint64_t, __n128))(v38 + 8))(v19, v26, v27);
  v28 = v36;
  v29 = *(void (**)(char *, char *, uint64_t))(v36 + 16);
  v29(v17, v14, v12);
  v30 = *(void (**)(char *, uint64_t))(v28 + 8);
  v30(v14, v12);
  v29(v39, v17, v12);
  return ((uint64_t (*)(char *, uint64_t))v30)(v17, v12);
}

uint64_t sub_1000BC0A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __n128 v13;
  char v14;
  _BYTE *v15;
  uint64_t v16;
  char v17;
  _BYTE v19[16];
  uint64_t v20;
  char v21;
  uint64_t v22;

  v2 = v1;
  v4 = *(_QWORD *)(a1 - 8);
  __chkstk_darwin(a1);
  v6 = &v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = (char *)(v1 + *(int *)(v7 + 40));
  v9 = *v8;
  v10 = *((_QWORD *)v8 + 1);
  LOBYTE(v8) = v8[16];
  v19[8] = v9;
  v20 = v10;
  v21 = (char)v8;
  v11 = sub_100003304(&qword_100112270);
  FocusState.wrappedValue.getter(&v22, v11);
  v12 = v22;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 16))(v6, v2, a1);
  if ((v12 & 1) != 0)
  {
    v14 = 1;
  }
  else
  {
    v15 = &v6[*(int *)(a1 + 44)];
    v16 = *(_QWORD *)v15;
    v17 = v15[8];
    sub_10006BE2C(*(_QWORD *)v15, v17);
    v14 = sub_10003152C(v16, v17);
    v13.n128_f64[0] = sub_100032F88(v16, v17);
  }
  (*(void (**)(_BYTE *, uint64_t, __n128))(v4 + 8))(v6, a1, v13);
  return v14 & 1;
}

uint64_t sub_1000BC1AC()
{
  unint64_t v0;
  uint64_t var1;

  v0 = sub_1000BDCAC();
  EnvironmentValues.subscript.getter(&var1, &type metadata for PreviewFocusEffect, &type metadata for PreviewFocusEffect, v0);
  return var1;
}

_QWORD *sub_1000BC1E4@<X0>(_BYTE *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_1000BDCAC();
  result = EnvironmentValues.subscript.getter(&v4, &type metadata for PreviewFocusEffect, &type metadata for PreviewFocusEffect, v2);
  *a1 = v4;
  return result;
}

_QWORD *sub_1000BC230@<X0>(_BYTE *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_1000BDCAC();
  result = EnvironmentValues.subscript.getter(&v4, &type metadata for PreviewFocusEffect, &type metadata for PreviewFocusEffect, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_1000BC27C(char *a1)
{
  unint64_t v1;
  char v3;

  v3 = *a1;
  v1 = sub_1000BDCAC();
  return EnvironmentValues.subscript.setter(&v3, &type metadata for PreviewFocusEffect, &type metadata for PreviewFocusEffect, v1);
}

uint64_t sub_1000BC2C4(char *a1)
{
  unint64_t v1;
  char v3;

  v3 = *a1;
  v1 = sub_1000BDCAC();
  return EnvironmentValues.subscript.setter(&v3, &type metadata for PreviewFocusEffect, &type metadata for PreviewFocusEffect, v1);
}

uint64_t sub_1000BC30C()
{
  return sub_1000BC330((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000BB778);
}

uint64_t type metadata accessor for FillFocusBackgroundEffect(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for FillFocusBackgroundEffect);
}

uint64_t sub_1000BC324()
{
  return sub_1000BC330((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000BBC00);
}

uint64_t sub_1000BC330(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v1;

  return a1(*(_QWORD *)(v1 + 48), *(unsigned __int8 *)(v1 + 56), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1000BC348(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 40);
}

uint64_t sub_1000BC350(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BC368(a1, a2, a3, (uint64_t)&opaque type descriptor for <<opaque return type of StrokeFocusEffect.applyEffect(isFocused:content:)>>);
}

uint64_t sub_1000BC35C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BC368(a1, a2, a3, (uint64_t)&opaque type descriptor for <<opaque return type of FillFocusBackgroundEffect.applyEffect(isFocused:content:)>>);
}

uint64_t sub_1000BC368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v4;
  _OWORD v6[2];

  v4 = *(_OWORD *)(a2 + 32);
  v6[0] = *(_OWORD *)(a2 + 16);
  v6[1] = v4;
  return swift_getOpaqueTypeConformance2(v6, a4, 1);
}

uint64_t sub_1000BC398(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 48);
}

uint64_t sub_1000BC3A0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 0, 3, v4, a1 + 48);
    return 0;
  }
  return result;
}

uint64_t *sub_1000BC428(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v11 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v11 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v9 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    v10 = (uint64_t *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    v11 = *v10;
    *v9 = *v10;
    *(_QWORD *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8);
  }
  swift_retain(v11);
  return v4;
}

uint64_t sub_1000BC4F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (uint64_t *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = *v8;
  *v7 = *v8;
  *(_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8);
  swift_retain(v9);
  return a1;
}

uint64_t sub_1000BC564(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (uint64_t *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = v6 + a2;
  v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 15;
  v9 = *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  v11 = *v7;
  *v7 = v9;
  swift_retain(v9);
  swift_release(v11);
  *(_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(v10 & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1000BC5E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  *(_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1000BC64C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (uint64_t *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (uint64_t *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = *v7;
  *v7 = *v8;
  swift_release(v9);
  *(_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1000BC6C0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1000BC744 + 4 * byte_1000CEB10[v10]))();
  }
}

void sub_1000BC7C8(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_1000BC8C4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1000BC938);
}

void sub_1000BC8CC(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1000BC8D4);
  JUMPOUT(0x1000BC938);
}

void sub_1000BC914()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1000BC938);
}

void sub_1000BC91C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1000BC938);
}

uint64_t sub_1000BC924(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x1000BC938);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x1000BC934);
    JUMPOUT(0x1000BC930);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t sub_1000BC950(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 40);
}

uint64_t sub_1000BC958(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_initStructMetadata(a1, 0, 2, v4, a1 + 48);
    return 0;
  }
  return result;
}

uint64_t *sub_1000BC9D0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t *v9;
  uint64_t v10;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v10 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v10 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v9 = (uint64_t *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    v10 = *v9;
    *(_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8) = *v9;
  }
  swift_retain(v10);
  return v4;
}

double sub_1000BCA80(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  double result;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  *(_QWORD *)&result = swift_release(*(_QWORD *)((a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFF8)).n128_u64[0];
  return result;
}

uint64_t sub_1000BCAC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFF8);
  v8 = (uint64_t *)((v6 + a2) & 0xFFFFFFFFFFFFF8);
  v9 = *v8;
  *v7 = *v8;
  swift_retain(v9);
  return a1;
}

uint64_t sub_1000BCB20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (uint64_t *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (uint64_t *)((v6 + a2) & 0xFFFFFFFFFFFFF8);
  v9 = *v8;
  v10 = *v7;
  *v7 = *v8;
  swift_retain(v9);
  swift_release(v10);
  return a1;
}

uint64_t sub_1000BCB8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1000BCBE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (uint64_t *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = *v7;
  *v7 = *(_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFF8);
  swift_release(v8);
  return a1;
}

uint64_t sub_1000BCC4C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1000BCCC8 + 4 * byte_1000CEB1F[v10]))();
  }
}

void sub_1000BCD4C(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_1000BCE40()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1000BCEB4);
}

void sub_1000BCE48(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1000BCE50);
  JUMPOUT(0x1000BCEB4);
}

void sub_1000BCE90()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1000BCEB4);
}

void sub_1000BCE98()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1000BCEB4);
}

uint64_t sub_1000BCEA0(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x1000BCEB4);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x1000BCEB0);
    JUMPOUT(0x1000BCEACLL);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t sub_1000BCECC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = type metadata accessor for FocusEffectView(255, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), a4);
  return swift_getWitnessTable(&unk_1000CECA0, v4);
}

uint64_t type metadata accessor for FocusEffectView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10006CC00(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FocusEffectView);
}

uint64_t sub_1000BCF00(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t WitnessTable;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[4];

  v1 = a1[1];
  v8[0] = type metadata accessor for _StrokedShape(255, *a1, a1[2]);
  v8[1] = &type metadata for Color;
  v8[2] = swift_getWitnessTable(&protocol conformance descriptor for _StrokedShape<A>, v8[0]);
  v8[3] = &protocol witness table for Color;
  v2 = type metadata accessor for _ShapeView(255, v8);
  v3 = type metadata accessor for ModifiedContent(255, v2, &type metadata for _PaddingLayout);
  swift_getWitnessTable(&protocol conformance descriptor for _ShapeView<A, B>, v2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v3);
  v5 = type metadata accessor for _OverlayModifier(255, v3, WitnessTable);
  v6 = type metadata accessor for ModifiedContent(255, v1, v5);
  swift_getWitnessTable(&protocol conformance descriptor for _OverlayModifier<A>, v5);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
}

uint64_t sub_1000BD00C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t WitnessTable;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[4];

  v1 = a1[1];
  v2 = a1[2];
  v8[0] = *a1;
  v8[1] = &type metadata for Color;
  v8[2] = v2;
  v8[3] = &protocol witness table for Color;
  v3 = type metadata accessor for _ShapeView(255, v8);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _ShapeView<A, B>, v3);
  v5 = type metadata accessor for _BackgroundModifier(255, v3, WitnessTable);
  v6 = type metadata accessor for ModifiedContent(255, v1, v5);
  swift_getWitnessTable(&protocol conformance descriptor for _BackgroundModifier<A>, v5);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
}

uint64_t sub_1000BD0C4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v2 = sub_100006E54(&qword_1001121E0);
  v3 = type metadata accessor for ModifiedContent(255, v1, v2);
  sub_1000BD124();
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v3);
}

unint64_t sub_1000BD124()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001121E8[0];
  if (!qword_1001121E8[0])
  {
    v1 = sub_100006E54(&qword_1001121E0);
    result = swift_getWitnessTable(&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>, v1);
    atomic_store(result, qword_1001121E8);
  }
  return result;
}

uint64_t sub_1000BD170(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t AssociatedTypeWitness;
  unint64_t v6;
  _QWORD v8[4];

  v2 = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  v3 = v2;
  if (v4 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    AssociatedTypeWitness = swift_getAssociatedTypeWitness(319, *(_QWORD *)(a1 + 24));
    v3 = AssociatedTypeWitness;
    if (v6 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(AssociatedTypeWitness - 8) + 64;
      v8[2] = &unk_1000CEC60;
      v8[3] = &unk_1000CEC78;
      swift_initStructMetadata(a1, 0, 4, v8, a1 + 32);
      return 0;
    }
  }
  return v3;
}

uint64_t *sub_1000BD22C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 24));
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v7 + v10;
  v12 = (v7 + v10) & ~v10;
  v13 = *(_QWORD *)(v9 + 64);
  v14 = ((v13 + v12 + 31) & 0xFFFFFFFFFFFFFFF8) + 9;
  v15 = v10 | *(_DWORD *)(v6 + 80) & 0xF8;
  if (v15 > 7 || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0 || v14 > 0x18)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + (((v15 | 7) + 16) & ~(unint64_t)(v15 | 7)));
    swift_retain(v18);
  }
  else
  {
    v19 = AssociatedTypeWitness;
    v20 = ~v10;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    v21 = ((unint64_t)a1 + v11) & v20;
    v22 = ((unint64_t)a2 + v11) & v20;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(v21, v22, v19);
    v23 = (v21 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
    v24 = (v22 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_BYTE *)v23 = *(_BYTE *)v24;
    v25 = *(_QWORD *)(v24 + 8);
    *(_QWORD *)(v23 + 8) = v25;
    *(_BYTE *)(v23 + 16) = *(_BYTE *)(v24 + 16);
    v26 = (v21 + v13 + 31) & 0xFFFFFFFFFFFFFFF8;
    v27 = (v22 + v13 + 31) & 0xFFFFFFFFFFFFFFF8;
    v28 = *(_QWORD *)v27;
    LOBYTE(v21) = *(_BYTE *)(v27 + 8);
    swift_retain(v25);
    sub_10006BE2C(v28, v21);
    *(_QWORD *)v26 = v28;
    *(_BYTE *)(v26 + 8) = v21;
  }
  return a1;
}

double sub_1000BD3A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(uint64_t, _QWORD))(v4 + 8))(a1, *(_QWORD *)(a2 + 16));
  v5 = *(_QWORD *)(v4 + 64) + a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a2 + 24));
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = (v5 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v8, AssociatedTypeWitness);
  v9 = v8 + *(_QWORD *)(v7 + 64);
  swift_release(*(_QWORD *)(((v9 + 7) & 0xFFFFFFFFFFFFF8) + 8));
  return sub_100032F88(*(_QWORD *)((v9 + 31) & 0xFFFFFFFFFFFFFFF8), *(_BYTE *)(((v9 + 31) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1000BD450(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v6 + 16))(a1, a2, *(_QWORD *)(a3 + 16));
  v7 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 24));
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v7 + v10 + a1) & ~v10;
  v12 = (v7 + v10 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v11, v12, AssociatedTypeWitness);
  v13 = *(_QWORD *)(v9 + 64);
  v14 = v11 + v13;
  v15 = v12 + v13;
  v16 = (v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v16 = *(_BYTE *)v17;
  v18 = *(_QWORD *)(v17 + 8);
  *(_QWORD *)(v16 + 8) = v18;
  *(_BYTE *)(v16 + 16) = *(_BYTE *)(v17 + 16);
  v19 = (v14 + 31) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v15 + 31) & 0xFFFFFFFFFFFFFFF8;
  v21 = *(_QWORD *)v20;
  LOBYTE(v12) = *(_BYTE *)(v20 + 8);
  swift_retain(v18);
  sub_10006BE2C(v21, v12);
  *(_QWORD *)v19 = v21;
  *(_BYTE *)(v19 + 8) = v12;
  return a1;
}

uint64_t sub_1000BD554(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v6 + 24))(a1, a2, *(_QWORD *)(a3 + 16));
  v7 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 24));
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v7 + v10 + a1) & ~v10;
  v12 = (v7 + v10 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 24))(v11, v12, AssociatedTypeWitness);
  v13 = *(_QWORD *)(v9 + 64);
  v14 = v11 + v13;
  v15 = v12 + v13;
  v16 = (v11 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v16 = *(_BYTE *)v17;
  v18 = *(_QWORD *)(v16 + 8);
  v19 = *(_QWORD *)(v17 + 8);
  *(_QWORD *)(v16 + 8) = v19;
  swift_retain(v19);
  swift_release(v18);
  *(_BYTE *)(v16 + 16) = *(_BYTE *)(v17 + 16);
  v20 = (v14 + 31) & 0xFFFFFFFFFFFFFFF8;
  v21 = (v15 + 31) & 0xFFFFFFFFFFFFFFF8;
  v22 = *(_QWORD *)v21;
  LOBYTE(v15) = *(_BYTE *)(v21 + 8);
  sub_10006BE2C(*(_QWORD *)v21, v15);
  v23 = *(_QWORD *)v20;
  v24 = *(_BYTE *)(v20 + 8);
  *(_QWORD *)v20 = v22;
  *(_BYTE *)(v20 + 8) = v15;
  sub_100032F88(v23, v24);
  return a1;
}

uint64_t sub_1000BD670(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v6 + 32))(a1, a2, *(_QWORD *)(a3 + 16));
  v7 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 24));
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v7 + v10 + a1) & ~v10;
  v12 = (v7 + v10 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v11, v12, AssociatedTypeWitness);
  v13 = *(_QWORD *)(v9 + 64);
  v14 = v11 + v13;
  v15 = v12 + v13;
  v16 = (v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = *(_OWORD *)v17;
  *(_BYTE *)(v16 + 16) = *(_BYTE *)(v17 + 16);
  *(_OWORD *)v16 = v18;
  v19 = (v14 + 31) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v15 + 31) & 0xFFFFFFFFFFFFFFF8;
  v21 = *(_QWORD *)v20;
  *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
  *(_QWORD *)v19 = v21;
  return a1;
}

uint64_t sub_1000BD75C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v6 + 40))(a1, a2, *(_QWORD *)(a3 + 16));
  v7 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 24));
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v7 + v10 + a1) & ~v10;
  v12 = (v7 + v10 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 40))(v11, v12, AssociatedTypeWitness);
  v13 = *(_QWORD *)(v9 + 64);
  v14 = v11 + v13;
  v15 = v12 + v13;
  v16 = (v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v16 = *(_BYTE *)v17;
  v18 = *(_QWORD *)(v16 + 8);
  *(_QWORD *)(v16 + 8) = *(_QWORD *)(v17 + 8);
  swift_release(v18);
  *(_BYTE *)(v16 + 16) = *(_BYTE *)(v17 + 16);
  v19 = (v14 + 31) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v15 + 31) & 0xFFFFFFFFFFFFFFF8;
  v21 = *(_QWORD *)v20;
  LOBYTE(v20) = *(_BYTE *)(v20 + 8);
  v22 = *(_QWORD *)v19;
  v23 = *(_BYTE *)(v19 + 8);
  *(_QWORD *)v19 = v21;
  *(_BYTE *)(v19 + 8) = v20;
  sub_100032F88(v22, v23);
  return a1;
}

uint64_t sub_1000BD864(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  unint64_t v23;
  int v24;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 24));
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if (v10 <= v7)
    v11 = v7;
  else
    v11 = *(_DWORD *)(v9 + 84);
  if (v11 <= 0x7FFFFFFE)
    v11 = 2147483646;
  if (!a2)
    return 0;
  v12 = AssociatedTypeWitness;
  v13 = *(unsigned __int8 *)(v9 + 80);
  v14 = *(_QWORD *)(v6 + 64) + v13;
  v15 = *(_QWORD *)(v9 + 64);
  if (v11 < a2)
  {
    v16 = ((v15 + (v14 & ~(_DWORD)v13) + 31) & 0xFFFFFFF8) + 9;
    if (v16 < 4)
      v17 = ((a2 - v11 + 255) >> (8 * v16)) + 1;
    else
      v17 = 2;
    if (v17 >= 0x10000)
      v18 = 4;
    else
      v18 = 2;
    if (v17 < 0x100)
      v18 = 1;
    if (v17 >= 2)
      v19 = v18;
    else
      v19 = 0;
    __asm { BR              X17 }
  }
  if ((_DWORD)v7 == v11)
  {
    v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
    v22 = a1;
    v10 = v7;
    v12 = v5;
    return v21(v22, v10, v12);
  }
  v22 = (v14 + a1) & ~v13;
  if ((_DWORD)v10 == v11)
  {
    v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    return v21(v22, v10, v12);
  }
  v23 = *(_QWORD *)(((v15 + v22 + 7) & 0xFFFFFFFFFFFFF8) + 8);
  if (v23 >= 0xFFFFFFFF)
    LODWORD(v23) = -1;
  v24 = v23 - 1;
  if (v24 < 0)
    v24 = -1;
  return (v24 + 1);
}

void sub_1000BDA28(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  size_t v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(swift_getAssociatedTypeWitness(0, *(_QWORD *)(a4 + 24)) - 8);
  if (*(_DWORD *)(v9 + 84) <= v8)
    v10 = v8;
  else
    v10 = *(_DWORD *)(v9 + 84);
  if (v10 <= 0x7FFFFFFE)
    v10 = 2147483646;
  v11 = ((*(_QWORD *)(v9 + 64)
        + ((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
        + 31) & 0xFFFFFFFFFFFFFFF8)
      + 9;
  if (v10 >= a3)
  {
    v14 = 0;
    if (v10 >= a2)
      goto LABEL_19;
  }
  else
  {
    if (v11 <= 3)
      v12 = ((a3 - v10 + 255) >> (8 * v11)) + 1;
    else
      v12 = 2;
    if (v12 >= 0x10000)
      v13 = 4;
    else
      v13 = 2;
    if (v12 < 0x100)
      v13 = 1;
    if (v12 >= 2)
      v14 = v13;
    else
      v14 = 0;
    if (v10 >= a2)
LABEL_19:
      __asm { BR              X15 }
  }
  if (v11 >= 4)
    v15 = ~v10 + a2;
  else
    v15 = (~(_BYTE)v10 + a2);
  bzero(a1, v11);
  if ((_DWORD)v11 == 1)
    *a1 = v15;
  else
    *(_DWORD *)a1 = v15;
  __asm { BR              X10 }
}

void sub_1000BDB94()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
  JUMPOUT(0x1000BDC44);
}

void sub_1000BDB9C()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = 0;
  if (v1)
    JUMPOUT(0x1000BDBA4);
  JUMPOUT(0x1000BDC44);
}

void sub_1000BDBF4()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
  JUMPOUT(0x1000BDC44);
}

void sub_1000BDBFC()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = v1;
  JUMPOUT(0x1000BDC44);
}

uint64_t sub_1000BDC04@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_WORD *)(v10 + v14) = 0;
  if (!(_DWORD)v11)
    JUMPOUT(0x1000BDC44);
  if ((_DWORD)v13 == v7)
  {
    v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
    v4 = v10;
    v5 = v11;
    a1 = v13;
    a2 = v12;
  }
  else
  {
    v4 = (v8 + v10) & v9;
    if ((_DWORD)a1 != v7)
      JUMPOUT(0x1000BDC10);
    v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 56);
    v5 = v11;
  }
  return v3(v4, v5, a1, a2);
}

uint64_t sub_1000BDC60(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_1000E6404, 1);
}

void sub_1000BDC98(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1000BDCA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static EnvironmentKey<>._valuesEqual(_:_:)(a1, a2, a3, a4, &protocol witness table for Bool);
}

unint64_t sub_1000BDCAC()
{
  unint64_t result;

  result = qword_100112278;
  if (!qword_100112278)
  {
    result = swift_getWitnessTable(&unk_1000CED04, &type metadata for PreviewFocusEffect);
    atomic_store(result, (unint64_t *)&qword_100112278);
  }
  return result;
}

ValueMetadata *type metadata accessor for PreviewFocusEffect()
{
  return &type metadata for PreviewFocusEffect;
}

uint64_t sub_1000BDD00(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t OpaqueTypeMetadata2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v8;
  uint64_t v9;

  v1 = *a1;
  v2 = a1[1];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v2);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v2, v1, AssociatedTypeWitness, &protocol requirements base descriptor for CustomFocusEffect, &associated conformance descriptor for CustomFocusEffect.CustomFocusEffect.EffectBody: View);
  v8 = AssociatedTypeWitness;
  v9 = AssociatedConformanceWitness;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v8, &opaque type descriptor for <<opaque return type of View.focusEffectDisabled(_:)>>, 0);
  v8 = AssociatedTypeWitness;
  v9 = AssociatedConformanceWitness;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.focusEffectDisabled(_:)>>, 1);
  v8 = OpaqueTypeMetadata2;
  v9 = OpaqueTypeConformance2;
  return swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.focused(_:)>>, 1);
}

uint64_t sub_1000BDDCC()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

int main(int argc, const char **argv, const char **envp)
{
  sub_1000BDF64();
  return 0;
}

void sub_1000BDEB4(uint64_t *a1, _QWORD **a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a4();
  v7 = (void *)v6;
  v8 = *a1 + 8;
  if (v6)
    v10 = v6;
  else
    v10 = 0;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11);
  *a1 = v8;
  v9 = *a2;
  if (*a2)
  {
    *v9 = v7;
    *a2 = v9 + 1;
  }
  else
  {

  }
}

void sub_1000BDF64()
{
  uint64_t v0;
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  _TtC13GameOverlayUI20GameOverlayUIService *v6;
  _TtC13GameOverlayUI20GameOverlayUIService *v7;
  void (*v8)(char *, _QWORD, uint64_t);
  void (*v9)(char *, uint64_t);
  SEL v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  int v22;
  char **v23;
  uint64_t v24;
  objc_class *ObjCClassFromMetadata;
  NSString *v26;
  _TtC13GameOverlayUI20GameOverlayUIService *v27;
  _TtC13GameOverlayUI20GameOverlayUIService *v28;
  SEL v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;

  v0 = type metadata accessor for GameOverlayUIConfig.ServiceKind(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((byte_10010F2B0 & 1) == 0)
  {
    v5 = static GameOverlayUIConfig.machServiceDomain.getter(v2);
    v7 = v6;
    v8 = *(void (**)(char *, _QWORD, uint64_t))(v1 + 104);
    v8(v4, enum case for GameOverlayUIConfig.ServiceKind.dashboard(_:), v0);
    sub_100072340(v5, v7);
    v9 = *(void (**)(char *, uint64_t))(v1 + 8);
    v9(v4, v0);
    v8(v4, enum case for GameOverlayUIConfig.ServiceKind.auth(_:), v0);
    sub_100072340(v5, v7);
    v9(v4, v0);
    v8(v4, enum case for GameOverlayUIConfig.ServiceKind.multiplayer(_:), v0);
    sub_100072340(v5, v7);
    v9(v4, v0);
    v8(v4, enum case for GameOverlayUIConfig.ServiceKind.internalUse(_:), v0);
    sub_100072340(v5, v7);
    swift_bridgeObjectRelease(v7, v10, v11, v12, v13, v14, v15, v16);
    v9(v4, v0);
    byte_10010F2B0 = 1;
  }
  if (qword_10010BAA0 != -1)
    swift_once(&qword_10010BAA0, sub_100004DCC);
  v17 = type metadata accessor for Logger(0);
  v18 = sub_100004E8C(v17, (uint64_t)qword_1001232D8);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Listeners started", v21, 2u);
    swift_slowDealloc(v21, -1, -1);
  }

  v22 = static CommandLine.argc.getter();
  v23 = (char **)static CommandLine.unsafeArgv.getter();
  v24 = type metadata accessor for AppDelegate();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata(v24);
  v26 = NSStringFromClass(ObjCClassFromMetadata);
  if (!v26)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v28 = v27;
    v26 = (NSString *)String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v28, v29, v30, v31, v32, v33, v34, v35);
  }
  UIApplicationMain(v22, v23, 0, v26);

}

uint64_t type metadata accessor for GameOverlayUIApp()
{
  return objc_opt_self(_TtC13GameOverlayUI16GameOverlayUIApp);
}

uint64_t type metadata accessor for AppDelegate()
{
  return objc_opt_self(_TtC13GameOverlayUI11AppDelegate);
}

id sub_1000BE218(void *a1, void *a2, void *a3)
{
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  _QWORD *v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  id v21;
  id v22;
  unint64_t v23;
  uint64_t v24;
  os_log_type_t type;
  id v27;
  uint64_t v28;

  if (qword_10010BAA0 != -1)
    swift_once(&qword_10010BAA0, sub_100004DCC);
  v6 = type metadata accessor for Logger(0);
  sub_100004E8C(v6, (uint64_t)qword_1001232D8);
  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = v7;
  v11 = v8;
  v12 = v9;
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    type = v14;
    v15 = swift_slowAlloc(32, -1);
    v16 = (_QWORD *)swift_slowAlloc(24, -1);
    *(_DWORD *)v15 = 138412802;
    v27 = v10;
    v17 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28);
    *v16 = v10;

    *(_WORD *)(v15 + 12) = 2112;
    v27 = v11;
    v18 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28);
    v16[1] = v11;

    *(_WORD *)(v15 + 22) = 2112;
    v27 = v12;
    v19 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28);
    v16[2] = v12;

    _os_log_impl((void *)&_mh_execute_header, v13, type, "Application: %@, configuration for connecting scene session: %@, options: %@", (uint8_t *)v15, 0x20u);
    v20 = sub_100003304(&qword_10010EB00);
    swift_arrayDestroy(v16, 3, v20);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);

  }
  else
  {

  }
  v21 = objc_msgSend(v11, "role");
  v22 = objc_msgSend(objc_allocWithZone((Class)UISceneConfiguration), "initWithName:sessionRole:", 0, v21);

  v23 = sub_1000BE4E4();
  objc_msgSend(v22, "setSceneClass:", swift_getObjCClassFromMetadata(v23));
  v24 = type metadata accessor for GameOverlayUIRemoteAlertSceneDelegate();
  objc_msgSend(v22, "setDelegateClass:", swift_getObjCClassFromMetadata(v24));
  return v22;
}

unint64_t sub_1000BE4E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001123A0;
  if (!qword_1001123A0)
  {
    v1 = objc_opt_self(SBSUIRemoteAlertScene);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001123A0);
  }
  return result;
}

uint64_t AccessPointUseCase.isEphemeral.getter(unsigned __int8 a1)
{
  return (a1 < 6u) & (0x39u >> a1);
}

uint64_t AccessPointPageIntent.init(useCase:showHighlights:newToGameCenter:player:game:)@<X0>(char a1@<W0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v7 = *(_OWORD *)(a4 + 112);
  *(_OWORD *)(a6 + 104) = *(_OWORD *)(a4 + 96);
  *(_OWORD *)(a6 + 120) = v7;
  *(_OWORD *)(a6 + 136) = *(_OWORD *)(a4 + 128);
  v8 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(a6 + 40) = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(a6 + 56) = v8;
  v9 = *(_OWORD *)(a4 + 80);
  *(_OWORD *)(a6 + 72) = *(_OWORD *)(a4 + 64);
  *(_OWORD *)(a6 + 88) = v9;
  v10 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a6 + 8) = *(_OWORD *)a4;
  *(_BYTE *)a6 = a1;
  *(_BYTE *)(a6 + 1) = a2;
  *(_BYTE *)(a6 + 2) = a3;
  *(_QWORD *)(a6 + 152) = *(_QWORD *)(a4 + 144);
  *(_OWORD *)(a6 + 24) = v10;
  v11 = a6 + *(int *)(type metadata accessor for AccessPointPageIntent(0) + 32);
  return sub_100065C84(a5, v11);
}

void AccessPointUseCase.jsRepresentation(in:)(uint64_t a1, char a2)
{
  __asm { BR              X12 }
}

unint64_t sub_1000BE614(void *a1)
{
  _QWORD *v1;
  id v2;
  uint64_t v3;
  void *v4;
  id v5;
  unint64_t result;
  uint64_t v7;
  unint64_t v8;

  v7 = 0x6F50737365636361;
  v8 = 0xEF796C6E4F746E69;
  v2 = a1;
  v3 = ((uint64_t (*)(uint64_t *, void *))_bridgeAnythingNonVerbatimToObjectiveC<A>(_:))(&v7, &type metadata for String);
  v4 = (void *)objc_opt_self(JSValue);
  v5 = objc_msgSend(v4, "valueWithObject:inContext:", v3, v2, v7, v8);
  swift_unknownObjectRelease(v3);

  v1[3] = sub_100003304(&qword_1001123A8);
  result = sub_1000BF118();
  v1[4] = result;
  *v1 = v5;
  return result;
}

uint64_t AccessPointUseCase.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1000BE764 + 4 * byte_1000CED80[a1]))(0xD000000000000011, 0x80000001000CF3F0);
}

uint64_t sub_1000BE764()
{
  return 0x6F50737365636361;
}

uint64_t sub_1000BE788(uint64_t a1)
{
  return a1 + 10;
}

uint64_t sub_1000BE7B8()
{
  return 0x6142656D61476E69;
}

void sub_1000BE7D8(char *a1)
{
  sub_1000757C0(*a1);
}

void sub_1000BE7E4()
{
  char *v0;

  sub_100076044(*v0);
}

void sub_1000BE7EC(uint64_t a1)
{
  char *v1;

  sub_10007621C(a1, *v1);
}

void sub_1000BE7F4(uint64_t a1)
{
  char *v1;

  sub_100076470(a1, *v1);
}

unint64_t sub_1000BE7FC@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _s13GameOverlayUI18AccessPointUseCaseO8rawValueACSgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BE828@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = AccessPointUseCase.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000BE850(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000C06A4();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000BE8AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000C06A4();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_1000BE8F8(uint64_t a1)
{
  char *v1;

  AccessPointUseCase.jsRepresentation(in:)(a1, *v1);
}

JSValue sub_1000BE910(JSContext a1)
{
  return CustomJSValueConvertible._jsValue(in:)(a1);
}

void *AccessPointPageIntent.kind.unsafeMutableAddressor()
{
  return &static AccessPointPageIntent.kind;
}

unint64_t static AccessPointPageIntent.kind.getter()
{
  return 0xD000000000000015;
}

uint64_t AccessPointPageIntent.showHighlights.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t AccessPointPageIntent.newToGameCenter.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 2);
}

uint64_t AccessPointPageIntent.game.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for AccessPointPageIntent(0);
  return sub_100007878(v1 + *(int *)(v3 + 32), a1, type metadata accessor for Game);
}

uint64_t sub_1000BE99C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000BE9CC + 4 * byte_1000CED86[*v0]))(0x65736143657375, 0xE700000000000000);
}

uint64_t sub_1000BE9CC()
{
  return 0x68676948776F6873;
}

uint64_t sub_1000BE9F0()
{
  return 0x6D61476F5477656ELL;
}

uint64_t sub_1000BEA14()
{
  return 0x726579616C70;
}

uint64_t sub_1000BEA28()
{
  return 1701667175;
}

uint64_t sub_1000BEA38@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000C0458(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000BEA5C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BF174();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000BEA84(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BF174();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AccessPointPageIntent.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _BYTE v20[16];
  _OWORD v21[9];
  uint64_t v22;
  char v23;

  v3 = v1;
  v5 = sub_100003304(&qword_1001123B8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v20[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = a1[3];
  v10 = a1[4];
  sub_100003C28(a1, v9);
  v11 = sub_1000BF174();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AccessPointPageIntent.CodingKeys, &type metadata for AccessPointPageIntent.CodingKeys, v11, v9, v10);
  LOBYTE(v21[0]) = *(_BYTE *)v3;
  v23 = 0;
  sub_1000373BC();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v21);
  if (!v2)
  {
    v12 = *(unsigned __int8 *)(v3 + 1);
    LOBYTE(v21[0]) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v12, v21, v5);
    v13 = *(unsigned __int8 *)(v3 + 2);
    v23 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v13, &v23, v5);
    v14 = *(_OWORD *)(v3 + 120);
    v21[6] = *(_OWORD *)(v3 + 104);
    v21[7] = v14;
    v21[8] = *(_OWORD *)(v3 + 136);
    v22 = *(_QWORD *)(v3 + 152);
    v15 = *(_OWORD *)(v3 + 56);
    v21[2] = *(_OWORD *)(v3 + 40);
    v21[3] = v15;
    v16 = *(_OWORD *)(v3 + 88);
    v21[4] = *(_OWORD *)(v3 + 72);
    v21[5] = v16;
    v17 = *(_OWORD *)(v3 + 24);
    v21[0] = *(_OWORD *)(v3 + 8);
    v21[1] = v17;
    v20[15] = 3;
    sub_100003C90();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v21);
    v18 = v3 + *(int *)(type metadata accessor for AccessPointPageIntent(0) + 32);
    LOBYTE(v21[0]) = 4;
    type metadata accessor for Game(0);
    sub_1000662AC(&qword_10010ECF8, (uint64_t)&protocol conformance descriptor for Game);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v18);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t AccessPointPageIntent.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  char v29;
  char v30;
  char v31;
  _OWORD v32[9];
  uint64_t v33;
  uint64_t v34;

  v24 = a2;
  v25 = type metadata accessor for Game(0);
  __chkstk_darwin(v25);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_100003304(&qword_1001123C8);
  v5 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AccessPointPageIntent(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v11 = a1[4];
  v28 = a1;
  sub_100003C28(a1, v12);
  v13 = sub_1000BF174();
  v26 = v7;
  v14 = v34;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AccessPointPageIntent.CodingKeys, &type metadata for AccessPointPageIntent.CodingKeys, v13, v12, v11);
  if (v14)
    return sub_100004624(v28);
  v34 = v8;
  v15 = v4;
  v29 = 0;
  sub_100037810();
  v16 = v26;
  v17 = v27;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v32);
  *v10 = v32[0];
  LOBYTE(v32[0]) = 1;
  v10[1] = KeyedDecodingContainer.decode(_:forKey:)(v32, v17) & 1;
  LOBYTE(v32[0]) = 2;
  v10[2] = KeyedDecodingContainer.decode(_:forKey:)(v32, v17) & 1;
  v31 = 3;
  sub_100004644();
  KeyedDecodingContainer.decode<A>(_:forKey:)(v32);
  v18 = v32[7];
  *(_OWORD *)(v10 + 104) = v32[6];
  *(_OWORD *)(v10 + 120) = v18;
  *(_OWORD *)(v10 + 136) = v32[8];
  v19 = v32[3];
  *(_OWORD *)(v10 + 40) = v32[2];
  *(_OWORD *)(v10 + 56) = v19;
  v20 = v32[5];
  *(_OWORD *)(v10 + 72) = v32[4];
  *(_OWORD *)(v10 + 88) = v20;
  v21 = v32[1];
  *(_OWORD *)(v10 + 8) = v32[0];
  *((_QWORD *)v10 + 19) = v33;
  *(_OWORD *)(v10 + 24) = v21;
  v30 = 4;
  sub_1000662AC(&qword_10010ED08, (uint64_t)&protocol conformance descriptor for Game);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v15);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v16, v17);
  sub_100065C84((uint64_t)v15, (uint64_t)&v10[*(int *)(v34 + 32)]);
  sub_100007878((uint64_t)v10, v24, type metadata accessor for AccessPointPageIntent);
  sub_100004624(v28);
  return sub_1000BF1B8((uint64_t)v10);
}

void sub_1000BF04C(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000015;
  a1[1] = 0x80000001000CED80;
}

uint64_t sub_1000BF06C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AccessPointPageIntent.init(from:)(a1, a2);
}

uint64_t sub_1000BF080(_QWORD *a1)
{
  return AccessPointPageIntent.encode(to:)(a1);
}

unint64_t _s13GameOverlayUI18AccessPointUseCaseO8rawValueACSgSS_tcfC_0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000FADE0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 6)
    return 6;
  else
    return v3;
}

uint64_t type metadata accessor for AccessPointPageIntent(uint64_t a1)
{
  uint64_t result;

  result = qword_100112430;
  if (!qword_100112430)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AccessPointPageIntent);
  return result;
}

unint64_t sub_1000BF118()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001123B0;
  if (!qword_1001123B0)
  {
    v1 = sub_100006E54(&qword_1001123A8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1001123B0);
  }
  return result;
}

unint64_t sub_1000BF174()
{
  unint64_t result;

  result = qword_1001123C0;
  if (!qword_1001123C0)
  {
    result = swift_getWitnessTable(&unk_1000CF0C4, &type metadata for AccessPointPageIntent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001123C0);
  }
  return result;
}

uint64_t sub_1000BF1B8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AccessPointPageIntent(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000BF1F8()
{
  unint64_t result;

  result = qword_1001123D0;
  if (!qword_1001123D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AccessPointUseCase, &type metadata for AccessPointUseCase);
    atomic_store(result, (unint64_t *)&qword_1001123D0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AccessPointUseCase(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1000BF288 + 4 * byte_1000CED90[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1000BF2BC + 4 * byte_1000CED8B[v4]))();
}

uint64_t sub_1000BF2BC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000BF2C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000BF2CCLL);
  return result;
}

uint64_t sub_1000BF2D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000BF2E0);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1000BF2E4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000BF2EC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessPointUseCase()
{
  return &type metadata for AccessPointUseCase;
}

uint64_t initializeBufferWithCopyOfBuffer for AccessPointPageIntent(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  unsigned int (*v36)(const void *, uint64_t, uint64_t);
  char *__dst;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v16 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v16);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_WORD *)(a1 + 1) = *(_WORD *)((char *)a2 + 1);
    v7 = a2[2];
    *(_QWORD *)(v4 + 8) = a2[1];
    *(_QWORD *)(v4 + 16) = v7;
    v8 = a2[4];
    *(_QWORD *)(v4 + 24) = a2[3];
    *(_QWORD *)(v4 + 32) = v8;
    v9 = a2[6];
    *(_QWORD *)(v4 + 40) = a2[5];
    *(_QWORD *)(v4 + 48) = v9;
    v10 = a2[8];
    *(_QWORD *)(v4 + 56) = a2[7];
    *(_QWORD *)(v4 + 64) = v10;
    v11 = a2[10];
    *(_QWORD *)(v4 + 72) = a2[9];
    *(_QWORD *)(v4 + 80) = v11;
    *(_BYTE *)(v4 + 88) = *((_BYTE *)a2 + 88);
    v12 = a2[13];
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    if (v12)
    {
      *(_QWORD *)(v4 + 96) = a2[12];
      *(_QWORD *)(v4 + 104) = v12;
      v13 = a2[15];
      *(_QWORD *)(v4 + 112) = a2[14];
      *(_QWORD *)(v4 + 120) = v13;
      v14 = a2[17];
      *(_QWORD *)(v4 + 128) = a2[16];
      *(_QWORD *)(v4 + 136) = v14;
      v15 = a2[19];
      *(_QWORD *)(v4 + 144) = a2[18];
      *(_QWORD *)(v4 + 152) = v15;
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRetain(v14);
      swift_bridgeObjectRetain(v15);
    }
    else
    {
      v17 = *((_OWORD *)a2 + 7);
      *(_OWORD *)(v4 + 96) = *((_OWORD *)a2 + 6);
      *(_OWORD *)(v4 + 112) = v17;
      v18 = *((_OWORD *)a2 + 9);
      *(_OWORD *)(v4 + 128) = *((_OWORD *)a2 + 8);
      *(_OWORD *)(v4 + 144) = v18;
    }
    v19 = *(int *)(a3 + 32);
    v20 = (_QWORD *)(v4 + v19);
    v21 = (uint64_t)a2 + v19;
    v22 = *(uint64_t *)((char *)a2 + v19 + 8);
    *v20 = *(uint64_t *)((char *)a2 + v19);
    v20[1] = v22;
    v23 = *(uint64_t *)((char *)a2 + v19 + 24);
    v20[2] = *(uint64_t *)((char *)a2 + v19 + 16);
    v20[3] = v23;
    v24 = *(uint64_t *)((char *)a2 + v19 + 40);
    v20[4] = *(uint64_t *)((char *)a2 + v19 + 32);
    v20[5] = v24;
    v25 = (int *)type metadata accessor for Game(0);
    v26 = v25[7];
    __dst = (char *)v20 + v26;
    v27 = (const void *)(v21 + v26);
    v28 = type metadata accessor for Date(0);
    v29 = *(_QWORD *)(v28 - 8);
    v36 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v29 + 48);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v24);
    if (v36(v27, 1, v28))
    {
      v30 = sub_100003304(&qword_10010CC10);
      memcpy(__dst, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v29 + 16))(__dst, v27, v28);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(__dst, 0, 1, v28);
    }
    *(_QWORD *)((char *)v20 + v25[8]) = *(_QWORD *)(v21 + v25[8]);
    *((_BYTE *)v20 + v25[9]) = *(_BYTE *)(v21 + v25[9]);
    *((_BYTE *)v20 + v25[10]) = *(_BYTE *)(v21 + v25[10]);
    *((_BYTE *)v20 + v25[11]) = *(_BYTE *)(v21 + v25[11]);
    *((_BYTE *)v20 + v25[12]) = *(_BYTE *)(v21 + v25[12]);
    *((_BYTE *)v20 + v25[13]) = *(_BYTE *)(v21 + v25[13]);
    *((_BYTE *)v20 + v25[14]) = *(_BYTE *)(v21 + v25[14]);
    v31 = v25[15];
    v32 = (_QWORD *)((char *)v20 + v31);
    v33 = (_QWORD *)(v21 + v31);
    v34 = v33[1];
    *v32 = *v33;
    v32[1] = v34;
    swift_bridgeObjectRetain(v34);
  }
  return v4;
}

void destroy for AccessPointPageIntent(_TtC13GameOverlayUI20GameOverlayUIService **a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  SEL v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  SEL v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  const char *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  _TtC13GameOverlayUI20GameOverlayUIService *v45;
  SEL v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  SEL v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  SEL v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  _TtC13GameOverlayUI20GameOverlayUIService **v67;
  SEL v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  SEL v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  id v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  const char *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;

  swift_bridgeObjectRelease(a1[2], (SEL)a2, a3, a4, a5, a6, a7, a8);
  swift_bridgeObjectRelease(a1[4], v10, v11, v12, v13, v14, v15, v16);
  swift_bridgeObjectRelease(a1[6], v17, v18, v19, v20, v21, v22, v23);
  swift_bridgeObjectRelease(a1[8], v24, v25, v26, v27, v28, v29, v30);
  swift_bridgeObjectRelease(a1[10], v31, v32, v33, v34, v35, v36, v37);
  v45 = a1[13];
  if (v45)
  {
    swift_bridgeObjectRelease(v45, v38, v39, v40, v41, v42, v43, v44);
    swift_bridgeObjectRelease(a1[15], v46, v47, v48, v49, v50, v51, v52);
    swift_bridgeObjectRelease(a1[17], v53, v54, v55, v56, v57, v58, v59);
    swift_bridgeObjectRelease(a1[19], v60, v61, v62, v63, v64, v65, v66);
  }
  v67 = (_TtC13GameOverlayUI20GameOverlayUIService **)((char *)a1 + *(int *)(a2 + 32));
  swift_bridgeObjectRelease(v67[1], v38, v39, v40, v41, v42, v43, v44);
  swift_bridgeObjectRelease(v67[3], v68, v69, v70, v71, v72, v73, v74);
  swift_bridgeObjectRelease(v67[5], v75, v76, v77, v78, v79, v80, v81);
  v82 = type metadata accessor for Game(0);
  v83 = (char *)v67 + *(int *)(v82 + 28);
  v84 = type metadata accessor for Date(0);
  v85 = *(_QWORD *)(v84 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v85 + 48))(v83, 1, v84))
    (*(void (**)(char *, uint64_t))(v85 + 8))(v83, v84);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)((char *)v67 + *(int *)(v82 + 60) + 8), v86, v87, v88, v89, v90, v91, v92);
}

uint64_t initializeWithCopy for AccessPointPageIntent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  unsigned int (*v34)(const void *, uint64_t, uint64_t);
  char *__dst;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  v9 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v9;
  v10 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v10;
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v11 = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  if (v11)
  {
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = v11;
    v12 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 120) = v12;
    v13 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 136) = v13;
    v14 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 152) = v14;
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v14);
  }
  else
  {
    v15 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v15;
    v16 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v16;
  }
  v17 = *(int *)(a3 + 32);
  v18 = (_QWORD *)(a1 + v17);
  v19 = a2 + v17;
  v20 = *(_QWORD *)(a2 + v17 + 8);
  *v18 = *(_QWORD *)(a2 + v17);
  v18[1] = v20;
  v21 = *(_QWORD *)(a2 + v17 + 24);
  v18[2] = *(_QWORD *)(a2 + v17 + 16);
  v18[3] = v21;
  v22 = *(_QWORD *)(a2 + v17 + 40);
  v18[4] = *(_QWORD *)(a2 + v17 + 32);
  v18[5] = v22;
  v23 = (int *)type metadata accessor for Game(0);
  v24 = v23[7];
  __dst = (char *)v18 + v24;
  v25 = (const void *)(v19 + v24);
  v26 = type metadata accessor for Date(0);
  v27 = *(_QWORD *)(v26 - 8);
  v34 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v27 + 48);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v22);
  if (v34(v25, 1, v26))
  {
    v28 = sub_100003304(&qword_10010CC10);
    memcpy(__dst, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v27 + 16))(__dst, v25, v26);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(__dst, 0, 1, v26);
  }
  *(_QWORD *)((char *)v18 + v23[8]) = *(_QWORD *)(v19 + v23[8]);
  *((_BYTE *)v18 + v23[9]) = *(_BYTE *)(v19 + v23[9]);
  *((_BYTE *)v18 + v23[10]) = *(_BYTE *)(v19 + v23[10]);
  *((_BYTE *)v18 + v23[11]) = *(_BYTE *)(v19 + v23[11]);
  *((_BYTE *)v18 + v23[12]) = *(_BYTE *)(v19 + v23[12]);
  *((_BYTE *)v18 + v23[13]) = *(_BYTE *)(v19 + v23[13]);
  *((_BYTE *)v18 + v23[14]) = *(_BYTE *)(v19 + v23[14]);
  v29 = v23[15];
  v30 = (_QWORD *)((char *)v18 + v29);
  v31 = (_QWORD *)(v19 + v29);
  v32 = v31[1];
  *v30 = *v31;
  v30[1] = v32;
  swift_bridgeObjectRetain(v32);
  return a1;
}

uint64_t assignWithCopy for AccessPointPageIntent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _TtC13GameOverlayUI20GameOverlayUIService *v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  _TtC13GameOverlayUI20GameOverlayUIService *v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  _TtC13GameOverlayUI20GameOverlayUIService *v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  _TtC13GameOverlayUI20GameOverlayUIService *v34;
  SEL v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  _TtC13GameOverlayUI20GameOverlayUIService *v43;
  SEL v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  _OWORD *v51;
  __int128 *v52;
  _TtC13GameOverlayUI20GameOverlayUIService *v53;
  uint64_t v54;
  uint64_t v55;
  SEL v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  uint64_t v63;
  _TtC13GameOverlayUI20GameOverlayUIService *v64;
  SEL v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  uint64_t v72;
  _TtC13GameOverlayUI20GameOverlayUIService *v73;
  SEL v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  uint64_t v81;
  _TtC13GameOverlayUI20GameOverlayUIService *v82;
  SEL v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  _TtC13GameOverlayUI20GameOverlayUIService *v104;
  SEL v105;
  id v106;
  id v107;
  id v108;
  id v109;
  id v110;
  id v111;
  uint64_t v112;
  _TtC13GameOverlayUI20GameOverlayUIService *v113;
  SEL v114;
  id v115;
  id v116;
  id v117;
  id v118;
  id v119;
  id v120;
  uint64_t v121;
  _TtC13GameOverlayUI20GameOverlayUIService *v122;
  SEL v123;
  id v124;
  id v125;
  id v126;
  id v127;
  id v128;
  id v129;
  int *v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t (*v136)(char *, uint64_t, uint64_t);
  int v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  _QWORD *v142;
  uint64_t v143;
  _TtC13GameOverlayUI20GameOverlayUIService *v144;
  SEL v145;
  id v146;
  id v147;
  id v148;
  id v149;
  id v150;
  id v151;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7, v8, v9, v10, v11, v12, v13, v14);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v15 = *(_QWORD *)(a2 + 32);
  v16 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16, v17, v18, v19, v20, v21, v22, v23);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v24 = *(_QWORD *)(a2 + 48);
  v25 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25, v26, v27, v28, v29, v30, v31, v32);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v33 = *(_QWORD *)(a2 + 64);
  v34 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v33;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRelease(v34, v35, v36, v37, v38, v39, v40, v41);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v42 = *(_QWORD *)(a2 + 80);
  v43 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v42;
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRelease(v43, v44, v45, v46, v47, v48, v49, v50);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v51 = (_OWORD *)(a1 + 96);
  v52 = (__int128 *)(a2 + 96);
  v53 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 104);
  v54 = *(_QWORD *)(a2 + 104);
  if (v53)
  {
    if (v54)
    {
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      v55 = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 104) = v55;
      swift_bridgeObjectRetain(v55);
      swift_bridgeObjectRelease(v53, v56, v57, v58, v59, v60, v61, v62);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      v63 = *(_QWORD *)(a2 + 120);
      v64 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 120);
      *(_QWORD *)(a1 + 120) = v63;
      swift_bridgeObjectRetain(v63);
      swift_bridgeObjectRelease(v64, v65, v66, v67, v68, v69, v70, v71);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      v72 = *(_QWORD *)(a2 + 136);
      v73 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 136);
      *(_QWORD *)(a1 + 136) = v72;
      swift_bridgeObjectRetain(v72);
      swift_bridgeObjectRelease(v73, v74, v75, v76, v77, v78, v79, v80);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      v81 = *(_QWORD *)(a2 + 152);
      v82 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 152);
      *(_QWORD *)(a1 + 152) = v81;
      swift_bridgeObjectRetain(v81);
      swift_bridgeObjectRelease(v82, v83, v84, v85, v86, v87, v88, v89);
    }
    else
    {
      sub_100004244((_QWORD *)(a1 + 96));
      v94 = *(_OWORD *)(a2 + 144);
      v96 = *v52;
      v95 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v94;
      *v51 = v96;
      *(_OWORD *)(a1 + 112) = v95;
    }
  }
  else if (v54)
  {
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    v90 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 104) = v90;
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    v91 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 120) = v91;
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    v92 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 136) = v92;
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    v93 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 152) = v93;
    swift_bridgeObjectRetain(v90);
    swift_bridgeObjectRetain(v91);
    swift_bridgeObjectRetain(v92);
    swift_bridgeObjectRetain(v93);
  }
  else
  {
    v97 = *v52;
    v98 = *(_OWORD *)(a2 + 112);
    v99 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v99;
    *v51 = v97;
    *(_OWORD *)(a1 + 112) = v98;
  }
  v100 = *(int *)(a3 + 32);
  v101 = (_QWORD *)(a1 + v100);
  v102 = (_QWORD *)(a2 + v100);
  *v101 = *(_QWORD *)(a2 + v100);
  v103 = *(_QWORD *)(a2 + v100 + 8);
  v104 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + v100 + 8);
  v101[1] = v103;
  swift_bridgeObjectRetain(v103);
  swift_bridgeObjectRelease(v104, v105, v106, v107, v108, v109, v110, v111);
  v101[2] = v102[2];
  v112 = v102[3];
  v113 = (_TtC13GameOverlayUI20GameOverlayUIService *)v101[3];
  v101[3] = v112;
  swift_bridgeObjectRetain(v112);
  swift_bridgeObjectRelease(v113, v114, v115, v116, v117, v118, v119, v120);
  v101[4] = v102[4];
  v121 = v102[5];
  v122 = (_TtC13GameOverlayUI20GameOverlayUIService *)v101[5];
  v101[5] = v121;
  swift_bridgeObjectRetain(v121);
  swift_bridgeObjectRelease(v122, v123, v124, v125, v126, v127, v128, v129);
  v130 = (int *)type metadata accessor for Game(0);
  v131 = v130[7];
  v132 = (char *)v101 + v131;
  v133 = (char *)v102 + v131;
  v134 = type metadata accessor for Date(0);
  v135 = *(_QWORD *)(v134 - 8);
  v136 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v135 + 48);
  v137 = v136(v132, 1, v134);
  v138 = v136(v133, 1, v134);
  if (!v137)
  {
    if (!v138)
    {
      (*(void (**)(char *, char *, uint64_t))(v135 + 24))(v132, v133, v134);
      goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v135 + 8))(v132, v134);
    goto LABEL_13;
  }
  if (v138)
  {
LABEL_13:
    v139 = sub_100003304(&qword_10010CC10);
    memcpy(v132, v133, *(_QWORD *)(*(_QWORD *)(v139 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(char *, char *, uint64_t))(v135 + 16))(v132, v133, v134);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v135 + 56))(v132, 0, 1, v134);
LABEL_14:
  *(_QWORD *)((char *)v101 + v130[8]) = *(_QWORD *)((char *)v102 + v130[8]);
  *((_BYTE *)v101 + v130[9]) = *((_BYTE *)v102 + v130[9]);
  *((_BYTE *)v101 + v130[10]) = *((_BYTE *)v102 + v130[10]);
  *((_BYTE *)v101 + v130[11]) = *((_BYTE *)v102 + v130[11]);
  *((_BYTE *)v101 + v130[12]) = *((_BYTE *)v102 + v130[12]);
  *((_BYTE *)v101 + v130[13]) = *((_BYTE *)v102 + v130[13]);
  *((_BYTE *)v101 + v130[14]) = *((_BYTE *)v102 + v130[14]);
  v140 = v130[15];
  v141 = (_QWORD *)((char *)v101 + v140);
  v142 = (_QWORD *)((char *)v102 + v140);
  *v141 = *v142;
  v143 = v142[1];
  v144 = (_TtC13GameOverlayUI20GameOverlayUIService *)v141[1];
  v141[1] = v143;
  swift_bridgeObjectRetain(v143);
  swift_bridgeObjectRelease(v144, v145, v146, v147, v148, v149, v150, v151);
  return a1;
}

uint64_t initializeWithTake for AccessPointPageIntent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;
  int *v8;
  uint64_t v9;
  char *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = *(int *)(a3 + 32);
  v5 = (_OWORD *)(a1 + v4);
  v6 = a2 + v4;
  v7 = *(_OWORD *)(a2 + v4 + 16);
  *v5 = *(_OWORD *)(a2 + v4);
  v5[1] = v7;
  v5[2] = *(_OWORD *)(a2 + v4 + 32);
  v8 = (int *)type metadata accessor for Game(0);
  v9 = v8[7];
  v10 = (char *)v5 + v9;
  v11 = (const void *)(v6 + v9);
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    v14 = sub_100003304(&qword_10010CC10);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  *(_QWORD *)((char *)v5 + v8[8]) = *(_QWORD *)(v6 + v8[8]);
  *((_BYTE *)v5 + v8[9]) = *(_BYTE *)(v6 + v8[9]);
  *((_BYTE *)v5 + v8[10]) = *(_BYTE *)(v6 + v8[10]);
  *((_BYTE *)v5 + v8[11]) = *(_BYTE *)(v6 + v8[11]);
  *((_BYTE *)v5 + v8[12]) = *(_BYTE *)(v6 + v8[12]);
  *((_BYTE *)v5 + v8[13]) = *(_BYTE *)(v6 + v8[13]);
  *((_BYTE *)v5 + v8[14]) = *(_BYTE *)(v6 + v8[14]);
  *(_OWORD *)((char *)v5 + v8[15]) = *(_OWORD *)(v6 + v8[15]);
  return a1;
}

uint64_t assignWithTake for AccessPointPageIntent(uint64_t a1, uint64_t a2, int *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t v11;
  _TtC13GameOverlayUI20GameOverlayUIService *v12;
  uint64_t v13;
  _TtC13GameOverlayUI20GameOverlayUIService *v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  _TtC13GameOverlayUI20GameOverlayUIService *v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  _TtC13GameOverlayUI20GameOverlayUIService *v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  _TtC13GameOverlayUI20GameOverlayUIService *v41;
  SEL v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  const char *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  _TtC13GameOverlayUI20GameOverlayUIService *v56;
  uint64_t v57;
  uint64_t v58;
  _TtC13GameOverlayUI20GameOverlayUIService *v59;
  SEL v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  uint64_t v67;
  _TtC13GameOverlayUI20GameOverlayUIService *v68;
  SEL v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  uint64_t v76;
  _TtC13GameOverlayUI20GameOverlayUIService *v77;
  SEL v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  _TtC13GameOverlayUI20GameOverlayUIService *v91;
  uint64_t v92;
  _TtC13GameOverlayUI20GameOverlayUIService *v93;
  SEL v94;
  id v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  uint64_t v101;
  _TtC13GameOverlayUI20GameOverlayUIService *v102;
  SEL v103;
  id v104;
  id v105;
  id v106;
  id v107;
  id v108;
  id v109;
  int *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t (*v116)(char *, uint64_t, uint64_t);
  int v117;
  int v118;
  const char *v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  _TtC13GameOverlayUI20GameOverlayUIService *v132;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v11 = *(_QWORD *)(a2 + 16);
  v12 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v11;
  swift_bridgeObjectRelease(v12, (SEL)a2, a3, a4, a5, a6, a7, a8);
  v13 = *(_QWORD *)(a2 + 32);
  v14 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v13;
  swift_bridgeObjectRelease(v14, v15, v16, v17, v18, v19, v20, v21);
  v22 = *(_QWORD *)(a2 + 48);
  v23 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v22;
  swift_bridgeObjectRelease(v23, v24, v25, v26, v27, v28, v29, v30);
  v31 = *(_QWORD *)(a2 + 64);
  v32 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v31;
  swift_bridgeObjectRelease(v32, v33, v34, v35, v36, v37, v38, v39);
  v40 = *(_QWORD *)(a2 + 80);
  v41 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v40;
  swift_bridgeObjectRelease(v41, v42, v43, v44, v45, v46, v47, v48);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v56 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 104);
  if (v56)
  {
    v57 = *(_QWORD *)(a2 + 104);
    if (v57)
    {
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = v57;
      swift_bridgeObjectRelease(v56, v49, v50, v51, v52, v53, v54, v55);
      v58 = *(_QWORD *)(a2 + 120);
      v59 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 120);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = v58;
      swift_bridgeObjectRelease(v59, v60, v61, v62, v63, v64, v65, v66);
      v67 = *(_QWORD *)(a2 + 136);
      v68 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 136);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 136) = v67;
      swift_bridgeObjectRelease(v68, v69, v70, v71, v72, v73, v74, v75);
      v76 = *(_QWORD *)(a2 + 152);
      v77 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 152);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_QWORD *)(a1 + 152) = v76;
      swift_bridgeObjectRelease(v77, v78, v79, v80, v81, v82, v83, v84);
      goto LABEL_6;
    }
    sub_100004244((_QWORD *)(a1 + 96));
  }
  v85 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v85;
  v86 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v86;
LABEL_6:
  v87 = a3[8];
  v88 = (_QWORD *)(a1 + v87);
  v89 = (_QWORD *)(a2 + v87);
  v90 = *(_QWORD *)(a2 + v87 + 8);
  v91 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + v87 + 8);
  *v88 = *(_QWORD *)(a2 + v87);
  v88[1] = v90;
  swift_bridgeObjectRelease(v91, v49, v50, v51, v52, v53, v54, v55);
  v92 = v89[3];
  v93 = (_TtC13GameOverlayUI20GameOverlayUIService *)v88[3];
  v88[2] = v89[2];
  v88[3] = v92;
  swift_bridgeObjectRelease(v93, v94, v95, v96, v97, v98, v99, v100);
  v101 = v89[5];
  v102 = (_TtC13GameOverlayUI20GameOverlayUIService *)v88[5];
  v88[4] = v89[4];
  v88[5] = v101;
  swift_bridgeObjectRelease(v102, v103, v104, v105, v106, v107, v108, v109);
  v110 = (int *)type metadata accessor for Game(0);
  v111 = v110[7];
  v112 = (char *)v88 + v111;
  v113 = (char *)v89 + v111;
  v114 = type metadata accessor for Date(0);
  v115 = *(_QWORD *)(v114 - 8);
  v116 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v115 + 48);
  v117 = v116(v112, 1, v114);
  v118 = v116(v113, 1, v114);
  if (!v117)
  {
    if (!v118)
    {
      (*(void (**)(char *, char *, uint64_t))(v115 + 40))(v112, v113, v114);
      goto LABEL_12;
    }
    (*(void (**)(char *, uint64_t))(v115 + 8))(v112, v114);
    goto LABEL_11;
  }
  if (v118)
  {
LABEL_11:
    v126 = sub_100003304(&qword_10010CC10);
    memcpy(v112, v113, *(_QWORD *)(*(_QWORD *)(v126 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(char *, char *, uint64_t))(v115 + 32))(v112, v113, v114);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v115 + 56))(v112, 0, 1, v114);
LABEL_12:
  *(_QWORD *)((char *)v88 + v110[8]) = *(_QWORD *)((char *)v89 + v110[8]);
  *((_BYTE *)v88 + v110[9]) = *((_BYTE *)v89 + v110[9]);
  *((_BYTE *)v88 + v110[10]) = *((_BYTE *)v89 + v110[10]);
  *((_BYTE *)v88 + v110[11]) = *((_BYTE *)v89 + v110[11]);
  *((_BYTE *)v88 + v110[12]) = *((_BYTE *)v89 + v110[12]);
  *((_BYTE *)v88 + v110[13]) = *((_BYTE *)v89 + v110[13]);
  *((_BYTE *)v88 + v110[14]) = *((_BYTE *)v89 + v110[14]);
  v127 = v110[15];
  v128 = (_QWORD *)((char *)v88 + v127);
  v129 = (_QWORD *)((char *)v89 + v127);
  v131 = *v129;
  v130 = v129[1];
  v132 = (_TtC13GameOverlayUI20GameOverlayUIService *)v128[1];
  *v128 = v131;
  v128[1] = v130;
  swift_bridgeObjectRelease(v132, v119, v120, v121, v122, v123, v124, v125);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessPointPageIntent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C0130);
}

uint64_t sub_1000C0130(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Game(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for AccessPointPageIntent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C01B8);
}

uint64_t sub_1000C01B8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for Game(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1000C022C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_1000CEFB8;
  v4[1] = &unk_1000CEFD0;
  v4[2] = &unk_1000CEFD0;
  v4[3] = &unk_1000CEFE8;
  result = type metadata accessor for Game(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AccessPointPageIntent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1000C0300 + 4 * byte_1000CED9A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1000C0334 + 4 * byte_1000CED95[v4]))();
}

uint64_t sub_1000C0334(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C033C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000C0344);
  return result;
}

uint64_t sub_1000C0350(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000C0358);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1000C035C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C0364(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessPointPageIntent.CodingKeys()
{
  return &type metadata for AccessPointPageIntent.CodingKeys;
}

unint64_t sub_1000C0384()
{
  unint64_t result;

  result = qword_100112478;
  if (!qword_100112478)
  {
    result = swift_getWitnessTable(&unk_1000CF09C, &type metadata for AccessPointPageIntent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100112478);
  }
  return result;
}

unint64_t sub_1000C03CC()
{
  unint64_t result;

  result = qword_100112480;
  if (!qword_100112480)
  {
    result = swift_getWitnessTable(&unk_1000CF00C, &type metadata for AccessPointPageIntent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100112480);
  }
  return result;
}

unint64_t sub_1000C0414()
{
  unint64_t result;

  result = qword_100112488;
  if (!qword_100112488)
  {
    result = swift_getWitnessTable(&unk_1000CF034, &type metadata for AccessPointPageIntent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100112488);
  }
  return result;
}

uint64_t sub_1000C0458(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x65736143657375 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65736143657375, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x68676948776F6873 && a2 == 0xEE0073746867696CLL)
  {
    v7 = 0xEE0073746867696CLL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x68676948776F6873, 0xEE0073746867696CLL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6D61476F5477656ELL && a2 == 0xEF7265746E654365)
  {
    v8 = 0xEF7265746E654365;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D61476F5477656ELL, 0xEF7265746E654365, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x726579616C70 && a2 == 0xE600000000000000)
  {
    v9 = 0xE600000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726579616C70, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 1701667175 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(1701667175, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

unint64_t sub_1000C06A4()
{
  unint64_t result;

  result = qword_100112490;
  if (!qword_100112490)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AccessPointUseCase, &type metadata for AccessPointUseCase);
    atomic_store(result, (unint64_t *)&qword_100112490);
  }
  return result;
}

id GameLayerBackgroundBlurView.makeUIView(context:)()
{
  id v0;
  _TtC13GameOverlayUI20GameOverlayUIService *v1;
  Class isa;
  SEL v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  NSString v10;

  v0 = objc_msgSend(objc_allocWithZone((Class)UIVisualEffectView), "init");
  v1 = (_TtC13GameOverlayUI20GameOverlayUIService *)sub_1000C0960();
  sub_1000C0AB8();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v1, v3, v4, v5, v6, v7, v8, v9);
  objc_msgSend(v0, "setBackgroundEffects:", isa);

  v10 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "_setGroupName:", v10);

  return v0;
}

uint64_t sub_1000C07A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000C0B4C();
  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000C07F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000C0B4C();
  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_1000C0848(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000C0B4C();
  UIViewRepresentable.body.getter(a1, v2);
  __break(1u);
}

id sub_1000C086C(void *a1)
{
  double v2;
  __int128 v3;
  __int128 v4;
  double v5;
  __int128 v6;
  __int128 v7;
  double v8;
  __int128 v9;
  __int128 v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;

  v18 = 0.0;
  v19 = 0.0;
  v16 = 0.0;
  v17 = 0.0;
  objc_msgSend(a1, "getRed:green:blue:alpha:", &v19, &v18, &v17, &v16);
  v2 = 1.0 - v16;
  v3 = 0u;
  v4 = 0u;
  v5 = 1.0 - v16;
  v6 = 0u;
  v7 = 0u;
  v8 = 1.0 - v16;
  v9 = 0u;
  v10 = 0u;
  v11 = 1.0 - v16;
  v12 = v16 * v19;
  v13 = v16 * v18;
  v14 = v16 * v17;
  v15 = v16;
  return objc_msgSend((id)objc_opt_self(UIColorEffect), "colorEffectMatrix:", &v2);
}

id sub_1000C0960()
{
  uint64_t v0;
  uint64_t v1;
  id result;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;

  v0 = sub_100003304(&qword_100110640);
  v1 = swift_allocObject(v0, 64, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1000CCD00;
  result = objc_msgSend((id)objc_opt_self(UIBlurEffect), "effectWithBlurRadius:", 100.0);
  if (result)
  {
    *(_QWORD *)(v1 + 32) = result;
    *(_QWORD *)(v1 + 40) = objc_msgSend((id)objc_opt_self(UIColorEffect), "colorEffectSaturate:", 2.0);
    v3 = objc_msgSend((id)objc_opt_self(UIColor), "whiteColor");
    v4 = objc_msgSend(v3, "colorWithAlphaComponent:", 0.05);

    v5 = sub_1000C086C(v4);
    *(_QWORD *)(v1 + 48) = v5;
    v6 = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.062745098, 0.062745098, 0.062745098, 0.5);
    v7 = sub_1000C086C(v6);

    *(_QWORD *)(v1 + 56) = v7;
    specialized Array._endMutation()();
    return (id)v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_1000C0AB8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100110670;
  if (!qword_100110670)
  {
    v1 = objc_opt_self(UIVisualEffect);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100110670);
  }
  return result;
}

unint64_t sub_1000C0AF8()
{
  unint64_t result;

  result = qword_100112498;
  if (!qword_100112498)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for GameLayerBackgroundBlurView, &type metadata for GameLayerBackgroundBlurView);
    atomic_store(result, (unint64_t *)&qword_100112498);
  }
  return result;
}

ValueMetadata *type metadata accessor for GameLayerBackgroundBlurView()
{
  return &type metadata for GameLayerBackgroundBlurView;
}

unint64_t sub_1000C0B4C()
{
  unint64_t result;

  result = qword_1001124A0;
  if (!qword_1001124A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for GameLayerBackgroundBlurView, &type metadata for GameLayerBackgroundBlurView);
    atomic_store(result, (unint64_t *)&qword_1001124A0);
  }
  return result;
}

uint64_t sub_1000C0B90@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  v2 = type metadata accessor for AccessPointHighlightComponent(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v15 - v6;
  v8 = type metadata accessor for AccessPointHighlightComponent.GestureHandler(0);
  v9 = sub_1000035B4(&qword_10010E210, type metadata accessor for AccessPointHighlightComponent.GestureHandler, (uint64_t)&unk_1000CBFC8);
  *(_QWORD *)v4 = Environment.init<A>(_:)(v8, v8, v9);
  v4[8] = v10 & 1;
  v11 = &v4[*(int *)(v2 + 20)];
  *(_QWORD *)v11 = swift_getKeyPath(&unk_1000CF2C8);
  v12 = sub_100003304(&qword_10010D3A8);
  swift_storeEnumTagMultiPayload(v11, v12, 0);
  sub_1000C1D64((uint64_t)v4, (uint64_t)v7);
  v13 = sub_1000C1390((uint64_t)v7, (uint64_t)&_swiftEmptyDictionarySingleton);
  result = sub_1000C1DA8((uint64_t)v7);
  *a1 = v13;
  return result;
}

uint64_t sub_1000C0CB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v0 = sub_100003304(&qword_1001124C0);
  v1 = swift_allocObject(v0, 48, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1000C9D90;
  v2 = type metadata accessor for AccessPointHighlight(0);
  result = sub_1000035B4(&qword_10010FA80, type metadata accessor for AccessPointHighlight, (uint64_t)&unk_1000CBF88);
  *(_QWORD *)(v1 + 32) = v2;
  *(_QWORD *)(v1 + 40) = result;
  off_1001124A8 = (_UNKNOWN *)v1;
  return result;
}

void sub_1000C0D2C()
{
  _OWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _TtC13GameOverlayUI20GameOverlayUIService *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  unint64_t v12;
  unint64_t isa;
  _TtC13GameOverlayUI20GameOverlayUIService *v14;
  Class v15;
  objc_class *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  SEL v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  _TtC13GameOverlayUI20GameOverlayUIService v30;
  _TtC13GameOverlayUI20GameOverlayUIService v31;

  if (qword_10010BBE0 != -1)
    swift_once(&qword_10010BBE0, sub_1000C0CB8);
  v0 = off_1001124A8;
  v1 = *((_QWORD *)off_1001124A8 + 2);
  if (v1)
  {
    swift_bridgeObjectRetain_n(off_1001124A8, 2);
    v2 = 0;
    v3 = &_swiftEmptyArrayStorage;
    do
    {
      v30 = (_TtC13GameOverlayUI20GameOverlayUIService)v0[v2 + 2];
      v31 = v30;
      v4 = sub_100003304(&qword_1001124B8);
      v5 = String.init<A>(describing:)(&v31, v4);
      v7 = v6;
      if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
        v3 = sub_100054990(0, (int64_t)v3[1].super.isa + 1, 1, v3, v8, v9, v10, v11);
      isa = (unint64_t)v3[1].super.isa;
      v12 = *(_QWORD *)v3[1].listener;
      if (isa >= v12 >> 1)
        v3 = sub_100054990((_TtC13GameOverlayUI20GameOverlayUIService *)(v12 > 1), isa + 1, 1, v3, v8, v9, v10, v11);
      ++v2;
      v3[1].super.isa = (Class)(isa + 1);
      v14 = &v3[2 * isa];
      v14[2].super.isa = (Class)v5;
      *(_QWORD *)v14[2].listener = v7;
      v14[3] = v30;
    }
    while (v1 != v2);
    swift_bridgeObjectRelease_n(v0, 2);
    v15 = v3[1].super.isa;
    if (v15)
      goto LABEL_11;
LABEL_13:
    v16 = (objc_class *)&_swiftEmptyDictionarySingleton;
    goto LABEL_14;
  }
  v3 = &_swiftEmptyArrayStorage;
  v15 = (Class)*((_QWORD *)&_swiftEmptyArrayStorage + 2);
  if (!v15)
    goto LABEL_13;
LABEL_11:
  sub_100003304(&qword_100111768);
  v16 = (objc_class *)static _DictionaryStorage.allocate(capacity:)(v15);
LABEL_14:
  v31.super.isa = v16;
  v17 = swift_bridgeObjectRetain(v3);
  sub_1000C16B0(v17, (const char *)1, &v31, v18, v19, v20, v21, v22);
  swift_bridgeObjectRelease(v3, v23, v24, v25, v26, v27, v28, v29);
  static ComponentKinds.table = (uint64_t)v31.super.isa;
}

uint64_t *ComponentKinds.table.unsafeMutableAddressor()
{
  if (qword_10010BBE8 != -1)
    swift_once(&qword_10010BBE8, sub_1000C0D2C);
  return &static ComponentKinds.table;
}

uint64_t static ComponentKinds.table.getter()
{
  if (qword_10010BBE8 != -1)
    swift_once(&qword_10010BBE8, sub_1000C0D2C);
  return swift_bridgeObjectRetain(static ComponentKinds.table);
}

unint64_t sub_1000C0F94()
{
  unint64_t result;

  result = qword_1001124B0;
  if (!qword_1001124B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ComponentKinds, &type metadata for ComponentKinds);
    atomic_store(result, (unint64_t *)&qword_1001124B0);
  }
  return result;
}

uint64_t sub_1000C0FD8()
{
  _TtC13GameOverlayUI20GameOverlayUIService *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  SEL v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;

  if (qword_10010BBE8 != -1)
    swift_once(&qword_10010BBE8, sub_1000C0D2C);
  v0 = (_TtC13GameOverlayUI20GameOverlayUIService *)static ComponentKinds.table;
  v1 = swift_bridgeObjectRetain(static ComponentKinds.table);
  sub_1000C1A40(v1);
  v3 = v2;
  swift_bridgeObjectRelease(v0, v4, v5, v6, v7, v8, v9, v10);
  return v3;
}

_QWORD *sub_1000C103C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  return sub_1000C1060(a1, a2, a3, a4);
}

ValueMetadata *type metadata accessor for ComponentKinds()
{
  return &type metadata for ComponentKinds;
}

_QWORD *sub_1000C1060@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  SEL v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  Swift::String v45;
  _TtC13GameOverlayUI20GameOverlayUIService *object;
  SEL v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  Swift::String v54;
  uint64_t v55;
  __int128 v56;
  _BYTE v57[40];
  uint64_t v58;
  _TtC13GameOverlayUI20GameOverlayUIService *v59;
  __int128 v60;
  uint64_t v61;

  v8 = type metadata accessor for JSONContext(0, a4);
  __chkstk_darwin(v8);
  v10 = &v57[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v11 = type metadata accessor for JSONObject(0);
  __chkstk_darwin(v11);
  v13 = &v57[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v14 = sub_1000745E8(a1, a1, (uint64_t)&protocol descriptor for ComponentModel, (uint64_t)&protocol descriptor for Decodable);
  if (v14)
  {
    v17 = v14;
    v18 = v15;
    v19 = v16;
    sub_100024C64((uint64_t)a2, (uint64_t)v57);
    *(_QWORD *)&v60 = v17;
    *((_QWORD *)&v60 + 1) = v18;
    v61 = v19;
    sub_1000052B0(&v58);
    dispatch thunk of Decodable.init(from:)(v57, v17, v19);
    if (v4)
      return sub_100074694(&v58);
LABEL_7:
    v56 = v60;
    v29 = v60;
    v30 = sub_100003C28(&v58, v60);
    *(_OWORD *)(a3 + 24) = v56;
    v31 = sub_1000052B0((_QWORD *)a3);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v31, v30, v29);
    return (_QWORD *)sub_100004624(&v58);
  }
  v21 = sub_1000745E8(a1, a1, (uint64_t)&protocol descriptor for ComponentModel, (uint64_t)&protocol descriptor for ExpressibleByJSON);
  if (v21)
  {
    v24 = v21;
    v25 = v22;
    v26 = v23;
    sub_100024C64((uint64_t)a2, (uint64_t)v57);
    result = (_QWORD *)JSONObject.init(from:)(v57);
    if (v4)
      return result;
    v27 = a2[3];
    *(_QWORD *)&v56 = a2[4];
    sub_100003C28(a2, v27);
    v28 = dispatch thunk of Decoder.userInfo.getter(v27, v56);
    JSONContext.init(userInfo:)(v28);
    *(_QWORD *)&v60 = v24;
    *((_QWORD *)&v60 + 1) = v25;
    v61 = v26;
    sub_1000052B0(&v58);
    dispatch thunk of ExpressibleByJSON.init(deserializing:using:)(v13, v10, v24, v26);
    goto LABEL_7;
  }
  v32 = type metadata accessor for DecodingError(0);
  swift_allocError(v32, &protocol witness table for DecodingError, 0, 0);
  v34 = v33;
  sub_100003304(&qword_10010BFA0);
  *v34 = a1;
  v35 = a2[3];
  v36 = a2[4];
  sub_100003C28(a2, v35);
  v37 = dispatch thunk of Decoder.codingPath.getter(v35, v36);
  v58 = 0;
  v59 = (_TtC13GameOverlayUI20GameOverlayUIService *)0xE000000000000000;
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease(v59, v38, v39, v40, v41, v42, v43, v44);
  v58 = 60;
  v59 = (_TtC13GameOverlayUI20GameOverlayUIService *)0xE100000000000000;
  v45._countAndFlagsBits = _typeName(_:qualified:)(a1, 0);
  object = (_TtC13GameOverlayUI20GameOverlayUIService *)v45._object;
  String.append(_:)(v45);
  swift_bridgeObjectRelease(object, v47, v48, v49, v50, v51, v52, v53);
  v54._object = (void *)0x80000001000D09C0;
  v54._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v54);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v37, v58, v59, 0);
  v55 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v32 - 8) + 104))(v34, enum case for DecodingError.typeMismatch(_:), v32);
  return (_QWORD *)swift_willThrow(v55);
}

uint64_t sub_1000C1390(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[5];
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v4 = type metadata accessor for OpaqueMetatype(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AccessPointHighlight(0);
  swift_bridgeObjectRetain(a2);
  OpaqueMetatype.init(_:)(v8);
  v21 = type metadata accessor for AccessPointHighlightComponent(0);
  v22 = sub_1000035B4(&qword_10010FA68, type metadata accessor for AccessPointHighlightComponent, (uint64_t)&unk_1000CC110);
  v9 = sub_1000052B0(&v20);
  sub_1000C1DE4(a1, (uint64_t)v9);
  sub_10005A194(&v20, (uint64_t)v19);
  LOBYTE(a1) = swift_isUniquelyReferenced_nonNull_native(a2);
  v18 = a2;
  v10 = sub_1000C1E28((uint64_t)v19, v19[3]);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v14 + 16))(v13, v11);
  sub_1000C2618((uint64_t)v13, (uint64_t)v7, a1, &v18);
  sub_100004624(v19);
  v15 = v18;
  swift_bridgeObjectRelease(0x8000000000000000);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v15;
}

unint64_t sub_1000C1508(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_1000C156C(a1, a2, v5);
}

unint64_t sub_1000C156C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v17;
  uint64_t v18;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  i = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * i);
    v11 = v10[1];
    if ((*v10 != a1 || v11 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      i = (i + 1) & v13;
      if (((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
      {
        v14 = (_QWORD *)(v9 + 16 * i);
        v15 = v14[1];
        if ((*v14 != a1 || v15 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0)
        {
          for (i = (i + 1) & v13; ((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v13)
          {
            v17 = (_QWORD *)(v9 + 16 * i);
            v18 = v17[1];
            if (*v17 == a1 && v18 == a2)
              break;
            if ((_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
              break;
          }
        }
      }
    }
  }
  return i;
}

void sub_1000C16B0(uint64_t a1, const char *a2, _QWORD *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t v9;
  char v11;
  _TtC13GameOverlayUI20GameOverlayUIService *v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  _BOOL8 v44;
  uint64_t v45;
  char v46;
  char v47;
  _QWORD *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  Swift::String v52;
  Swift::String v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _TtC13GameOverlayUI20GameOverlayUIService *v59;
  uint64_t v60;

  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
    swift_bridgeObjectRelease((_TtC13GameOverlayUI20GameOverlayUIService *)a1, a2, a3, a4, a5, a6, a7, a8);
    return;
  }
  v11 = (char)a2;
  v13 = *(_QWORD *)(a1 + 32);
  v12 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 40);
  v54 = *(_OWORD *)(a1 + 48);
  swift_bridgeObjectRetain(a1);
  v58 = v13;
  v59 = v12;
  v14 = (_QWORD *)*a3;
  swift_bridgeObjectRetain(v12);
  v16 = sub_1000AAE54(v13, (uint64_t)v12);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
    goto LABEL_23;
  v20 = v15;
  if (v14[3] >= v19)
  {
    if ((v11 & 1) != 0)
    {
      if ((v15 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_1000AF534();
      if ((v20 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v32 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v16 >> 6) + 64) |= 1 << v16;
    v33 = (uint64_t *)(v32[6] + 16 * v16);
    *v33 = v13;
    v33[1] = (uint64_t)v12;
    *(_OWORD *)(v32[7] + 16 * v16) = v54;
    v34 = v32[2];
    v35 = __OFADD__(v34, 1);
    v36 = v34 + 1;
    if (v35)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v32[2] = v36;
    v37 = v9 - 1;
    if (v9 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n(a1, 2);
      return;
    }
    v38 = (_OWORD *)(a1 + 80);
    while (1)
    {
      v12 = (_TtC13GameOverlayUI20GameOverlayUIService *)*((_QWORD *)v38 - 1);
      v55 = *v38;
      v58 = *((_QWORD *)v38 - 2);
      v39 = v58;
      v59 = v12;
      v40 = (_QWORD *)*a3;
      swift_bridgeObjectRetain(v12);
      v41 = sub_1000AAE54(v58, (uint64_t)v12);
      v43 = v40[2];
      v44 = (v42 & 1) == 0;
      v35 = __OFADD__(v43, v44);
      v45 = v43 + v44;
      if (v35)
        break;
      v46 = v42;
      if (v40[3] < v45)
      {
        sub_1000AEB08(v45, 1);
        v41 = sub_1000AAE54(v58, (uint64_t)v12);
        if ((v46 & 1) != (v47 & 1))
          goto LABEL_25;
      }
      if ((v46 & 1) != 0)
        goto LABEL_10;
      v48 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v41 >> 6) + 64) |= 1 << v41;
      v49 = (uint64_t *)(v48[6] + 16 * v41);
      *v49 = v39;
      v49[1] = (uint64_t)v12;
      *(_OWORD *)(v48[7] + 16 * v41) = v55;
      v50 = v48[2];
      v35 = __OFADD__(v50, 1);
      v51 = v50 + 1;
      if (v35)
        goto LABEL_24;
      v48[2] = v51;
      v38 += 2;
      if (!--v37)
        goto LABEL_22;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_1000AEB08(v19, v11 & 1);
  v21 = sub_1000AAE54(v13, (uint64_t)v12);
  if ((v20 & 1) == (v22 & 1))
  {
    v16 = v21;
    if ((v20 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v23 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
    swift_willThrow(v23);
    v60 = v23;
    swift_errorRetain(v23);
    v24 = sub_100003304(&qword_10010EB50);
    if ((swift_dynamicCast(v24, &v60, v24, &type metadata for _MergeError, 0) & 1) == 0)
    {
      swift_bridgeObjectRelease(v12, v25, v26, v27, v28, v29, v30, v31);
      swift_bridgeObjectRelease_n(a1, 2);
      swift_errorRelease(v60);
      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
LABEL_26:
  v56 = 0;
  v57 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v52._object = (void *)0x80000001000D0A20;
  v52._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v52);
  _print_unlocked<A, B>(_:_:)(&v58, &v56, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v53._countAndFlagsBits = 39;
  v53._object = (void *)0xE100000000000000;
  String.append(_:)(v53);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v56, v57, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
}

void sub_1000C1A40(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t i;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  int64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  const char *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  unint64_t v43;
  __int128 v44;
  uint64_t v45;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_100003304(&qword_10010F5A0);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v42 = v1 + 64;
  v4 = -1 << *(_BYTE *)(v1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v1 + 64);
  v41 = (unint64_t)(63 - v4) >> 6;
  swift_bridgeObjectRetain(v1);
  i = 0;
  v8 = &qword_1001124B8;
  v9 = (uint64_t *)&unk_10010F5B0;
  if (v6)
    goto LABEL_10;
LABEL_11:
  v17 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_36;
  if (v17 >= v41)
    goto LABEL_33;
  v18 = *(_QWORD *)(v42 + 8 * v17);
  v19 = i + 1;
  if (!v18)
  {
    v19 = i + 2;
    if (i + 2 >= v41)
      goto LABEL_33;
    v18 = *(_QWORD *)(v42 + 8 * v19);
    if (!v18)
    {
      v19 = i + 3;
      if (i + 3 >= v41)
        goto LABEL_33;
      v18 = *(_QWORD *)(v42 + 8 * v19);
      if (!v18)
      {
        v19 = i + 4;
        if (i + 4 >= v41)
          goto LABEL_33;
        v18 = *(_QWORD *)(v42 + 8 * v19);
        if (!v18)
        {
          v19 = i + 5;
          if (i + 5 >= v41)
            goto LABEL_33;
          v18 = *(_QWORD *)(v42 + 8 * v19);
          if (!v18)
          {
            v19 = i + 6;
            if (i + 6 >= v41)
              goto LABEL_33;
            v18 = *(_QWORD *)(v42 + 8 * v19);
            v20 = i + 6;
            if (!v18)
            {
              while (1)
              {
                v19 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_37;
                if (v19 >= v41)
                  break;
                v18 = *(_QWORD *)(v42 + 8 * v19);
                ++v20;
                if (v18)
                  goto LABEL_27;
              }
LABEL_33:
              sub_100074DB8(v1);
              return;
            }
          }
        }
      }
    }
  }
LABEL_27:
  v6 = (v18 - 1) & v18;
  v16 = __clz(__rbit64(v18)) + (v19 << 6);
  for (i = v19; ; v16 = v15 | (i << 6))
  {
    v21 = 16 * v16;
    v22 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v16);
    v24 = *v22;
    v23 = v22[1];
    v44 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + v21);
    swift_bridgeObjectRetain(v23);
    v25 = sub_100003304(v8);
    v26 = sub_100003304(v9);
    swift_dynamicCast(&v45, &v44, v25, v26, 7);
    v27 = v45;
    v28 = sub_1000C1508(v24, v23);
    v36 = v28;
    if ((v29 & 1) != 0)
    {
      v43 = v6;
      v10 = v1;
      v11 = i;
      v12 = v9;
      v13 = v8;
      v14 = v3[6] + 16 * v28;
      swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v14 + 8), v29, v30, v31, v32, v33, v34, v35);
      *(_QWORD *)v14 = v24;
      *(_QWORD *)(v14 + 8) = v23;
      v8 = v13;
      v9 = v12;
      i = v11;
      v1 = v10;
      v6 = v43;
      *(_QWORD *)(v3[7] + 8 * v36) = v27;
      if (!v43)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v3[2] >= v3[3])
      break;
    *(_QWORD *)((char *)v3 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v28;
    v37 = (uint64_t *)(v3[6] + 16 * v28);
    *v37 = v24;
    v37[1] = v23;
    *(_QWORD *)(v3[7] + 8 * v28) = v27;
    v38 = v3[2];
    v39 = __OFADD__(v38, 1);
    v40 = v38 + 1;
    if (v39)
      goto LABEL_35;
    v3[2] = v40;
    if (!v6)
      goto LABEL_11;
LABEL_10:
    v15 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
}

uint64_t sub_1000C1D64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AccessPointHighlightComponent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000C1DA8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AccessPointHighlightComponent(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000C1DE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AccessPointHighlightComponent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000C1E28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

unint64_t sub_1000C1E50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for OpaqueMetatype(0);
  v6 = sub_1000035B4(&qword_1001124D0, (uint64_t (*)(uint64_t))&type metadata accessor for OpaqueMetatype, (uint64_t)&protocol conformance descriptor for OpaqueMetatype);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_1000C24D8(a1, v7);
}

void sub_1000C1EBC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  const void *v26;
  __int128 v27[2];

  v1 = v0;
  v2 = type metadata accessor for OpaqueMetatype(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100003304(&qword_1001124C8);
  v6 = *v0;
  v7 = static _DictionaryStorage.copy(original:)(*v0);
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    swift_release(v6);
LABEL_29:
    *v1 = v8;
    return;
  }
  v9 = (void *)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  v25 = v1;
  v26 = (const void *)(v6 + 64);
  if (v8 != v6 || (unint64_t)v9 >= v6 + 64 + 8 * v10)
    memmove(v9, v26, 8 * v10);
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    v21 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v21 >= v16)
      goto LABEL_27;
    v22 = *((_QWORD *)v26 + v21);
    ++v12;
    if (!v22)
    {
      v12 = v21 + 1;
      if (v21 + 1 >= v16)
        goto LABEL_27;
      v22 = *((_QWORD *)v26 + v12);
      if (!v22)
      {
        v12 = v21 + 2;
        if (v21 + 2 >= v16)
          goto LABEL_27;
        v22 = *((_QWORD *)v26 + v12);
        if (!v22)
        {
          v12 = v21 + 3;
          if (v21 + 3 >= v16)
          {
LABEL_27:
            swift_release(v6);
            v1 = v25;
            goto LABEL_29;
          }
          v22 = *((_QWORD *)v26 + v12);
          v23 = v21 + 3;
          if (!v22)
            break;
        }
      }
    }
LABEL_26:
    v15 = (v22 - 1) & v22;
    v18 = __clz(__rbit64(v22)) + (v12 << 6);
LABEL_12:
    v19 = *(_QWORD *)(v3 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v19, v2);
    v20 = 40 * v18;
    sub_100024C64(*(_QWORD *)(v6 + 56) + v20, (uint64_t)v27);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v19, v5, v2);
    sub_10005A194(v27, *(_QWORD *)(v8 + 56) + v20);
  }
  while (1)
  {
    v12 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v12 >= v16)
      goto LABEL_27;
    v22 = *((_QWORD *)v26 + v12);
    ++v23;
    if (v22)
      goto LABEL_26;
  }
LABEL_31:
  __break(1u);
}

void sub_1000C2118(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  _QWORD *v40;
  int64_t v41;
  int v42;
  __int128 v43[2];

  v3 = v2;
  v6 = type metadata accessor for OpaqueMetatype(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100003304(&qword_1001124C8);
  v42 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_42;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v39 = v2;
  v40 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v41 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  swift_retain(v10);
  v18 = 0;
  while (1)
  {
    if (v16)
    {
      v20 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v21 = v20 | (v18 << 6);
      goto LABEL_25;
    }
    v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
      return;
    }
    if (v22 >= v41)
      goto LABEL_37;
    v23 = v40[v22];
    ++v18;
    if (!v23)
    {
      v18 = v22 + 1;
      if (v22 + 1 >= v41)
        goto LABEL_37;
      v23 = v40[v18];
      if (!v23)
      {
        v18 = v22 + 2;
        if (v22 + 2 >= v41)
          goto LABEL_37;
        v23 = v40[v18];
        if (!v23)
          break;
      }
    }
LABEL_24:
    v16 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v18 << 6);
LABEL_25:
    v25 = *(_QWORD *)(v7 + 72);
    v26 = *(_QWORD *)(v10 + 48) + v25 * v21;
    if ((v42 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v9, v26, v6);
      sub_10005A194((__int128 *)(*(_QWORD *)(v10 + 56) + 40 * v21), (uint64_t)v43);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v26, v6);
      sub_100024C64(*(_QWORD *)(v10 + 56) + 40 * v21, (uint64_t)v43);
    }
    v27 = *(_QWORD *)(v12 + 40);
    v28 = sub_1000035B4(&qword_1001124D0, (uint64_t (*)(uint64_t))&type metadata accessor for OpaqueMetatype, (uint64_t)&protocol conformance descriptor for OpaqueMetatype);
    v29 = dispatch thunk of Hashable._rawHashValue(seed:)(v27, v6, v28);
    v30 = -1 << *(_BYTE *)(v12 + 32);
    v31 = v29 & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v17 + 8 * (v31 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v17 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_43;
        }
        v35 = v32 == v34;
        if (v32 == v34)
          v32 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v17 + 8 * v32);
      }
      while (v36 == -1);
      v19 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(_QWORD *)(v17 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(_QWORD *)(v12 + 48) + v25 * v19, v9, v6);
    sub_10005A194(v43, *(_QWORD *)(v12 + 56) + 40 * v19);
    ++*(_QWORD *)(v12 + 16);
  }
  v18 = v22 + 3;
  if (v22 + 3 < v41)
  {
    v23 = v40[v18];
    v24 = v22 + 3;
    if (!v23)
    {
      while (1)
      {
        v18 = v24 + 1;
        if (__OFADD__(v24, 1))
          goto LABEL_44;
        if (v18 >= v41)
          goto LABEL_37;
        v23 = v40[v18];
        ++v24;
        if (v23)
          goto LABEL_24;
      }
    }
    goto LABEL_24;
  }
LABEL_37:
  swift_release(v10);
  v3 = v39;
  if ((v42 & 1) != 0)
  {
    v37 = 1 << *(_BYTE *)(v10 + 32);
    if (v37 >= 64)
      bzero(v40, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v40 = -1 << v37;
    *(_QWORD *)(v10 + 16) = 0;
  }
LABEL_42:
  swift_release(v10);
  *v3 = v12;
}

unint64_t sub_1000C24D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t, __n128);
  uint64_t v15;
  char v16;
  uint64_t v18;
  uint64_t v19;

  v3 = v2;
  v19 = a1;
  v5 = type metadata accessor for OpaqueMetatype(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = -1 << *(_BYTE *)(v3 + 32);
  v11 = a2 & ~v10;
  if (((*(_QWORD *)(v3 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
  {
    v12 = ~v10;
    v13 = *(_QWORD *)(v6 + 72);
    v14 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v6 + 16);
    do
    {
      v14(v9, *(_QWORD *)(v3 + 48) + v13 * v11, v5, v7);
      v15 = sub_1000035B4(&qword_1001124D8, (uint64_t (*)(uint64_t))&type metadata accessor for OpaqueMetatype, (uint64_t)&protocol conformance descriptor for OpaqueMetatype);
      v16 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v19, v5, v15);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      if ((v16 & 1) != 0)
        break;
      v11 = (v11 + 1) & v12;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  }
  return v11;
}

uint64_t sub_1000C2618(uint64_t a1, uint64_t a2, char a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t result;
  unint64_t v24;
  char v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;

  v8 = type metadata accessor for OpaqueMetatype(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for AccessPointHighlightComponent(0);
  v34 = sub_1000035B4(&qword_10010FA68, type metadata accessor for AccessPointHighlightComponent, (uint64_t)&unk_1000CC110);
  v12 = sub_1000052B0(&v32);
  sub_1000C1D64(a1, (uint64_t)v12);
  v13 = (_QWORD *)*a4;
  v15 = sub_1000C1E50(a2);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  v19 = v14;
  v20 = v13[3];
  if (v20 >= v18 && (a3 & 1) != 0)
  {
LABEL_7:
    v21 = (_QWORD *)*a4;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      v22 = (_QWORD *)(v21[7] + 40 * v15);
      sub_100004624(v22);
      return sub_10005A194(&v32, (uint64_t)v22);
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a3 & 1) == 0)
  {
    sub_1000C1EBC();
    goto LABEL_7;
  }
  sub_1000C2118(v18, a3 & 1);
  v24 = sub_1000C1E50(a2);
  if ((v19 & 1) != (v25 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }
  v15 = v24;
  v21 = (_QWORD *)*a4;
  if ((v19 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  v26 = sub_1000C1E28((uint64_t)&v32, v33);
  v27 = __chkstk_darwin(v26);
  v29 = (char *)&v31 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v30 + 16))(v29, v27);
  sub_1000C2824(v15, (uint64_t)v11, (uint64_t)v29, v21);
  return sub_100004624(&v32);
}

uint64_t sub_1000C2824(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v16 = type metadata accessor for AccessPointHighlightComponent(0);
  v17 = sub_1000035B4(&qword_10010FA68, type metadata accessor for AccessPointHighlightComponent, (uint64_t)&unk_1000CC110);
  v8 = sub_1000052B0(&v15);
  sub_1000C1D64(a3, (uint64_t)v8);
  a4[(a1 >> 6) + 8] |= 1 << a1;
  v9 = a4[6];
  v10 = type metadata accessor for OpaqueMetatype(0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * a1, a2, v10);
  result = sub_10005A194(&v15, a4[7] + 40 * a1);
  v12 = a4[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    a4[2] = v14;
  return result;
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return objc_opt_self(_TtC13GameOverlayUIP33_6A4379F8F62BDD7E1893686B3E192D5F19ResourceBundleClass);
}

id objc_msgSend_currentDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentDevice");
}

id objc_msgSend_userInterfaceIdiom(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userInterfaceIdiom");
}
