Swift::Bool __swiftcall BuildType.isAny(of:)(Swift::OpaquePointer of)
{
  uint64_t v1;

  return sub_1000026E8(v1, (uint64_t)of._rawValue);
}

uint64_t sub_1000026E8(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
  {
    swift_bridgeObjectRetain(a2);
    __asm { BR              X9 }
  }
  return 0;
}

uint64_t BuildType.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000028FC + 4 * byte_1000C50E8[a1]))(0x6775626564, 0xE500000000000000);
}

uint64_t sub_1000028FC()
{
  return 0x65677265766E6F63;
}

uint64_t sub_10000291C()
{
  return 0x6C616E7265746E69;
}

uint64_t sub_100002934()
{
  return 0x69746375646F7270;
}

void sub_100002950(char *a1)
{
  sub_100074FF8(*a1);
}

void sub_10000295C()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_1000029A4()
{
  uint64_t v1;

  ((void (*)(uint64_t *, uint64_t, unint64_t))String.hash(into:))(&v1, 0x65677265766E6F63, 0xEB0000000065636ELL);
  ((void (*)(unint64_t))swift_bridgeObjectRelease)(0xEB0000000065636ELL);
  return Hasher._finalize()();
}

void sub_100002A20()
{
  __asm { BR              X10 }
}

uint64_t sub_100002A58(uint64_t a1)
{
  ((void (*)(uint64_t, uint64_t, unint64_t))String.hash(into:))(a1, 0x65677265766E6F63, 0xEB0000000065636ELL);
  return ((uint64_t (*)(unint64_t))swift_bridgeObjectRelease)(0xEB0000000065636ELL);
}

void sub_100002AC0(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_100002B04()
{
  uint64_t v1;

  ((void (*)(uint64_t *, uint64_t, unint64_t))String.hash(into:))(&v1, 0x65677265766E6F63, 0xEB0000000065636ELL);
  ((void (*)(unint64_t))swift_bridgeObjectRelease)(0xEB0000000065636ELL);
  return Hasher._finalize()();
}

unint64_t sub_100002B80@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _s13GameOverlayUI9BuildTypeO8rawValueACSgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100002BAC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_100002BD8 + 4 * byte_1000C50F8[*v0]))();
}

void sub_100002BD8(_QWORD *a1@<X8>)
{
  *a1 = 0x65677265766E6F63;
  a1[1] = 0xEB0000000065636ELL;
}

void sub_100002BFC(_QWORD *a1@<X8>)
{
  *a1 = 0x6C616E7265746E69;
  a1[1] = 0xE800000000000000;
}

void sub_100002C18(_QWORD *a1@<X8>)
{
  *a1 = 0x69746375646F7270;
  a1[1] = 0xEA00000000006E6FLL;
}

uint64_t variable initialization expression of Page.background@<X0>(uint64_t a1@<X8>)
{
  return sub_100002CA8(type metadata accessor for Page.Background, a1);
}

void *variable initialization expression of Page.refreshConditions()
{
  return &_swiftEmptyArrayStorage;
}

double variable initialization expression of Shelf._titleSegue@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t variable initialization expression of Shelf.Presentation.icon@<X0>(uint64_t a1@<X8>)
{
  return sub_100002CA8(type metadata accessor for Shelf.Presentation.HeaderIconType, a1);
}

uint64_t variable initialization expression of Shelf.accessoryType()
{
  return 3;
}

uint64_t variable initialization expression of Shelf.Presentation.bottomSubtitle()
{
  return 0;
}

uint64_t variable initialization expression of Shelf.impressionMetrics@<X0>(uint64_t a1@<X8>)
{
  return sub_100002CA8((uint64_t (*)(_QWORD))&type metadata accessor for ImpressionMetrics, a1);
}

uint64_t variable initialization expression of Shelf.headerMargins()
{
  return 4;
}

uint64_t variable initialization expression of DashboardRequest.isArcade()
{
  return 0;
}

uint64_t variable initialization expression of GameDashboardLaunchContext.action@<X0>(uint64_t a1@<X8>)
{
  return sub_100002CA8(type metadata accessor for LaunchDashboardAction, a1);
}

uint64_t sub_100002CA8@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = a1(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a2, 1, 1, v3);
}

uint64_t variable initialization expression of AccessPointPageView._imageCache()
{
  uint64_t v0;

  v0 = sub_100003304(&qword_10010BBF0);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  return LRUMultiCache.init(keyLimit:valueLimit:)(1000, 3);
}

double variable initialization expression of DashboardRequest.statusBarHeight()
{
  return 0.0;
}

uint64_t variable initialization expression of DashboardRequest.leaderboardInternal()
{
  return 0;
}

uint64_t variable initialization expression of DashboardRequest.viewState()
{
  return -1;
}

uint64_t variable initialization expression of DashboardRequest.leaderboardTimeScope()
{
  return 2;
}

uint64_t variable initialization expression of DashboardRequest.leaderboardPlayerScope()
{
  return 1;
}

uint64_t sub_100002D54(uint64_t a1, uint64_t a2)
{
  return sub_100003148(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_100002D74(uint64_t a1, uint64_t a2)
{
  return sub_100003148(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_100002D80(uint64_t a1, id *a2)
{
  uint64_t result;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  v5 = v8;
  if (v8)
  {
    v6 = String._bridgeToObjectiveC()();
    result = swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_100002DF4(uint64_t a1, id *a2)
{
  char v4;
  uint64_t v5;
  NSString v6;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_100002E70@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  NSString v4;
  uint64_t result;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = v2;
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a1 = v4;
  return result;
}

void sub_100002EB0(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

void sub_100002EBC(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

BOOL sub_100002EC8(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

_QWORD *sub_100002EDC@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

_QWORD *sub_100002EEC@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

_QWORD *sub_100002EFC@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_QWORD *sub_100002F10(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

BOOL sub_100002F24(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_100002F38(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

uint64_t sub_100002F50(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_1000035B4(&qword_10010BC98, (uint64_t (*)(uint64_t))type metadata accessor for AMSBagKey, (uint64_t)&unk_1000C531C);
  v3 = sub_1000035B4(&qword_10010BCA0, (uint64_t (*)(uint64_t))type metadata accessor for AMSBagKey, (uint64_t)&unk_1000C52BC);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100002FD4@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100002FFC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_1000035B4((unint64_t *)&qword_10010EB70, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1000C5670);
  v3 = sub_1000035B4(&qword_10010BCE0, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1000C55C4);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100003080@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  NSString v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_1000030C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_1000035B4(&qword_10010BD18, (uint64_t (*)(uint64_t))type metadata accessor for AMSMediaArtworkColorKind, (uint64_t)&unk_1000C57CC);
  v3 = sub_1000035B4((unint64_t *)&unk_10010BD20, (uint64_t (*)(uint64_t))type metadata accessor for AMSMediaArtworkColorKind, (uint64_t)&unk_1000C576C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100003148(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  v7 = v6;
  v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_100003184(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1000031C4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

uint64_t sub_100003234(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

unint64_t _s13GameOverlayUI9BuildTypeO8rawValueACSgSS_tcfC_0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000FAAA0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

uint64_t sub_100003304(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t sub_100003348()
{
  unint64_t result;

  result = qword_10010BBF8;
  if (!qword_10010BBF8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BuildType, &type metadata for BuildType);
    atomic_store(result, (unint64_t *)&qword_10010BBF8);
  }
  return result;
}

_BYTE *initializeBufferWithCopyOfBuffer for BuildType(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for BuildType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for BuildType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100003478 + 4 * byte_1000C5101[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000034AC + 4 * byte_1000C50FC[v4]))();
}

uint64_t sub_1000034AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000034B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000034BCLL);
  return result;
}

uint64_t sub_1000034C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000034D0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1000034D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000034DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000034E8(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1000034F4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for BuildType()
{
  return &type metadata for BuildType;
}

void type metadata accessor for GKLeaderboardPlayerScope(uint64_t a1)
{
  sub_1000037F8(a1, &qword_10010BC60, (uint64_t)&unk_1000FB370);
}

void type metadata accessor for GKLeaderboardTimeScope(uint64_t a1)
{
  sub_1000037F8(a1, &qword_10010BC68, (uint64_t)&unk_1000FB390);
}

void type metadata accessor for GKGameCenterViewControllerState(uint64_t a1)
{
  sub_1000037F8(a1, &qword_10010BC70, (uint64_t)&unk_1000FB3B0);
}

void type metadata accessor for AMSBagKey(uint64_t a1)
{
  sub_1000037F8(a1, &qword_10010BC78, (uint64_t)&unk_1000FB3D0);
}

uint64_t sub_10000355C()
{
  return sub_1000035B4(&qword_10010BC80, (uint64_t (*)(uint64_t))type metadata accessor for AMSBagKey, (uint64_t)&unk_1000C5280);
}

uint64_t sub_100003588()
{
  return sub_1000035B4(&qword_10010BC88, (uint64_t (*)(uint64_t))type metadata accessor for AMSBagKey, (uint64_t)&unk_1000C5254);
}

uint64_t sub_1000035B4(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000035F4()
{
  return sub_1000035B4(&qword_10010BC90, (uint64_t (*)(uint64_t))type metadata accessor for AMSBagKey, (uint64_t)&unk_1000C52F0);
}

void type metadata accessor for Key(uint64_t a1)
{
  sub_1000037F8(a1, &qword_10010BCA8, (uint64_t)&unk_1000FB3F8);
}

uint64_t _s23FriendRequestInboxEntryVwCP(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

__n128 sub_100003664(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_100003670(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100003690(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
  sub_1000037F8(a1, &qword_10010BCB0, (uint64_t)&unk_1000FB478);
}

__n128 initializeWithTake for InGameBannerPageIntentImplementation(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  sub_1000037F8(a1, &qword_10010BCB8, (uint64_t)&unk_1000FB4F8);
}

uint64_t sub_1000036F0()
{
  return sub_1000035B4(&qword_10010BCC0, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1000C5588);
}

uint64_t sub_10000371C()
{
  return sub_1000035B4(&qword_10010BCC8, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1000C555C);
}

uint64_t sub_100003748()
{
  return sub_1000035B4((unint64_t *)&unk_10010BCD0, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1000C55F8);
}

void type metadata accessor for CGColor(uint64_t a1)
{
  sub_1000037F8(a1, &qword_10010BCE8, (uint64_t)&unk_1000FB520);
}

void type metadata accessor for AMSMediaArtworkColorKind(uint64_t a1)
{
  sub_1000037F8(a1, &qword_10010BCF0, (uint64_t)&unk_1000FB550);
}

uint64_t sub_10000379C(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1000037BC(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_1000037F8(a1, &qword_10010BCF8, (uint64_t)&unk_1000FB5D0);
}

void sub_1000037F8(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_10000383C()
{
  return sub_1000035B4(&qword_10010BD00, (uint64_t (*)(uint64_t))type metadata accessor for AMSMediaArtworkColorKind, (uint64_t)&unk_1000C5730);
}

uint64_t sub_100003868()
{
  return sub_1000035B4(&qword_10010BD08, (uint64_t (*)(uint64_t))type metadata accessor for AMSMediaArtworkColorKind, (uint64_t)&unk_1000C5704);
}

uint64_t sub_100003894()
{
  return sub_1000035B4(&qword_10010BD10, (uint64_t (*)(uint64_t))type metadata accessor for AMSMediaArtworkColorKind, (uint64_t)&unk_1000C57A0);
}

void DashboardRequest.viewState.setter()
{
  swift_deletedMethodError();
  __break(1u);
}

void *PlayNowPageIntent.kind.unsafeMutableAddressor()
{
  return &static PlayNowPageIntent.kind;
}

unint64_t static PlayNowPageIntent.kind.getter()
{
  return 0xD000000000000011;
}

uint64_t PlayNowPageIntent.player.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100003920(v1, a1);
}

uint64_t sub_100003920(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for Player(a2, a1);
  return a2;
}

Swift::Int sub_10000395C()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void sub_10000399C()
{
  Hasher._combine(_:)(0);
}

Swift::Int sub_1000039C0(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t sub_1000039FC()
{
  return 0x726579616C70;
}

uint64_t sub_100003A10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x726579616C70 && a2 == 0xE600000000000000)
  {
    result = swift_bridgeObjectRelease(0xE600000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x726579616C70, 0xE600000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_100003A9C()
{
  return 0;
}

void sub_100003AA8(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_100003AB4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100003C4C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100003ADC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100003C4C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PlayNowPageIntent.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _OWORD v16[9];
  uint64_t v17;

  v2 = v1;
  v4 = sub_100003304(&qword_10010BE50);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_100003C28(a1, v8);
  v10 = sub_100003C4C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PlayNowPageIntent.CodingKeys, &type metadata for PlayNowPageIntent.CodingKeys, v10, v8, v9);
  v11 = *(_OWORD *)(v2 + 112);
  v16[6] = *(_OWORD *)(v2 + 96);
  v16[7] = v11;
  v16[8] = *(_OWORD *)(v2 + 128);
  v17 = *(_QWORD *)(v2 + 144);
  v12 = *(_OWORD *)(v2 + 48);
  v16[2] = *(_OWORD *)(v2 + 32);
  v16[3] = v12;
  v13 = *(_OWORD *)(v2 + 80);
  v16[4] = *(_OWORD *)(v2 + 64);
  v16[5] = v13;
  v14 = *(_OWORD *)(v2 + 16);
  v16[0] = *(_OWORD *)v2;
  v16[1] = v14;
  sub_100003C90();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v16);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

_QWORD *sub_100003C28(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_100003C4C()
{
  unint64_t result;

  result = qword_10010BE58;
  if (!qword_10010BE58)
  {
    result = swift_getWitnessTable(&unk_1000C59FC, &type metadata for PlayNowPageIntent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010BE58);
  }
  return result;
}

unint64_t sub_100003C90()
{
  unint64_t result;

  result = qword_10010BE60;
  if (!qword_10010BE60)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Player, &type metadata for Player);
    atomic_store(result, (unint64_t *)&qword_10010BE60);
  }
  return result;
}

double PlayNowPageIntent.init(from:)@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v9[9];
  uint64_t v10;

  sub_100003D84(a1, (uint64_t)v9);
  if (!v2)
  {
    v5 = v9[7];
    *(_OWORD *)(a2 + 96) = v9[6];
    *(_OWORD *)(a2 + 112) = v5;
    *(_OWORD *)(a2 + 128) = v9[8];
    *(_QWORD *)(a2 + 144) = v10;
    v6 = v9[3];
    *(_OWORD *)(a2 + 32) = v9[2];
    *(_OWORD *)(a2 + 48) = v6;
    v7 = v9[5];
    *(_OWORD *)(a2 + 64) = v9[4];
    *(_OWORD *)(a2 + 80) = v7;
    result = *(double *)v9;
    v8 = v9[1];
    *(_OWORD *)a2 = v9[0];
    *(_OWORD *)(a2 + 16) = v8;
  }
  return result;
}

void sub_100003D44(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000011;
  a1[1] = 0x80000001000C5850;
}

uint64_t sub_100003D70(_QWORD *a1)
{
  return PlayNowPageIntent.encode(to:)(a1);
}

uint64_t sub_100003D84@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v17;
  _OWORD v18[9];
  uint64_t v19;

  v5 = sub_100003304(&qword_10010BE80);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100003C28(a1, v9);
  v11 = sub_100003C4C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PlayNowPageIntent.CodingKeys, &type metadata for PlayNowPageIntent.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    sub_100004644();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v18);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v12 = v18[7];
    *(_OWORD *)(a2 + 96) = v18[6];
    *(_OWORD *)(a2 + 112) = v12;
    *(_OWORD *)(a2 + 128) = v18[8];
    *(_QWORD *)(a2 + 144) = v19;
    v13 = v18[3];
    *(_OWORD *)(a2 + 32) = v18[2];
    *(_OWORD *)(a2 + 48) = v13;
    v14 = v18[5];
    *(_OWORD *)(a2 + 64) = v18[4];
    *(_OWORD *)(a2 + 80) = v14;
    v15 = v18[1];
    *(_OWORD *)a2 = v18[0];
    *(_OWORD *)(a2 + 16) = v15;
  }
  return sub_100004624(a1);
}

uint64_t destroy for Player(_QWORD *a1)
{
  uint64_t result;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[9]);
  result = a1[12];
  if (result)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(a1[14]);
    swift_bridgeObjectRelease(a1[16]);
    return swift_bridgeObjectRelease(a1[18]);
  }
  return result;
}

uint64_t initializeWithCopy for Player(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v9 = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  if (v9)
  {
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = v9;
    v10 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = v10;
    v11 = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = v11;
    v12 = *(_QWORD *)(a2 + 136);
    v13 = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 136) = v12;
    *(_QWORD *)(a1 + 144) = v13;
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v13);
  }
  else
  {
    v14 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v14;
    v15 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = v15;
  }
  return a1;
}

uint64_t assignWithCopy for Player(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  __int128 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v14 = (_OWORD *)(a1 + 88);
  v15 = (__int128 *)(a2 + 88);
  v16 = *(_QWORD *)(a1 + 96);
  v17 = *(_QWORD *)(a2 + 96);
  if (v16)
  {
    if (v17)
    {
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      v18 = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 96) = v18;
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRelease(v16);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      v19 = *(_QWORD *)(a2 + 112);
      v20 = *(_QWORD *)(a1 + 112);
      *(_QWORD *)(a1 + 112) = v19;
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRelease(v20);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      v21 = *(_QWORD *)(a2 + 128);
      v22 = *(_QWORD *)(a1 + 128);
      *(_QWORD *)(a1 + 128) = v21;
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRelease(v22);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      v23 = *(_QWORD *)(a2 + 144);
      v24 = *(_QWORD *)(a1 + 144);
      *(_QWORD *)(a1 + 144) = v23;
      swift_bridgeObjectRetain(v23);
      swift_bridgeObjectRelease(v24);
    }
    else
    {
      sub_100004244((_QWORD *)(a1 + 88));
      v29 = *(_OWORD *)(a2 + 136);
      v31 = *v15;
      v30 = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
      *(_OWORD *)(a1 + 136) = v29;
      *v14 = v31;
      *(_OWORD *)(a1 + 104) = v30;
    }
  }
  else if (v17)
  {
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    v25 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 96) = v25;
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    v26 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 112) = v26;
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    v27 = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 128) = v27;
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    v28 = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 144) = v28;
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v28);
  }
  else
  {
    v32 = *v15;
    v33 = *(_OWORD *)(a2 + 104);
    v34 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = v34;
    *v14 = v32;
    *(_OWORD *)(a1 + 104) = v33;
  }
  return a1;
}

_QWORD *sub_100004244(_QWORD *a1)
{
  _s23FriendRequestInboxEntryVwxx(a1);
  return a1;
}

__n128 initializeWithTake for Player(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for Player(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v12;
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v14 = *(_QWORD *)(a1 + 96);
  if (!v14)
    goto LABEL_5;
  v15 = *(_QWORD *)(a2 + 96);
  if (!v15)
  {
    sub_100004244((_QWORD *)(a1 + 88));
LABEL_5:
    v22 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v22;
    v23 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = v23;
    return a1;
  }
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v15;
  swift_bridgeObjectRelease(v14);
  v16 = *(_QWORD *)(a2 + 112);
  v17 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v16;
  swift_bridgeObjectRelease(v17);
  v18 = *(_QWORD *)(a2 + 128);
  v19 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v18;
  swift_bridgeObjectRelease(v19);
  v20 = *(_QWORD *)(a2 + 144);
  v21 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v20;
  swift_bridgeObjectRelease(v21);
  return a1;
}

uint64_t getEnumTagSinglePayload for Player(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 152))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Player(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 152) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 152) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PlayNowPageIntent()
{
  return &type metadata for PlayNowPageIntent;
}

uint64_t getEnumTagSinglePayload for PlayNowPageIntent.CodingKeys(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for PlayNowPageIntent.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1000044F0 + 4 * byte_1000C5860[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100004510 + 4 * byte_1000C5865[v4]))();
}

_BYTE *sub_1000044F0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100004510(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100004518(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100004520(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100004528(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100004530(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for PlayNowPageIntent.CodingKeys()
{
  return &type metadata for PlayNowPageIntent.CodingKeys;
}

unint64_t sub_100004550()
{
  unint64_t result;

  result = qword_10010BE68;
  if (!qword_10010BE68)
  {
    result = swift_getWitnessTable(&unk_1000C59D4, &type metadata for PlayNowPageIntent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010BE68);
  }
  return result;
}

unint64_t sub_100004598()
{
  unint64_t result;

  result = qword_10010BE70;
  if (!qword_10010BE70)
  {
    result = swift_getWitnessTable(&unk_1000C5944, &type metadata for PlayNowPageIntent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010BE70);
  }
  return result;
}

unint64_t sub_1000045E0()
{
  unint64_t result;

  result = qword_10010BE78;
  if (!qword_10010BE78)
  {
    result = swift_getWitnessTable(&unk_1000C596C, &type metadata for PlayNowPageIntent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010BE78);
  }
  return result;
}

uint64_t sub_100004624(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

unint64_t sub_100004644()
{
  unint64_t result;

  result = qword_10010BE88;
  if (!qword_10010BE88)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Player, &type metadata for Player);
    atomic_store(result, (unint64_t *)&qword_10010BE88);
  }
  return result;
}

uint64_t property wrapper backing initializer of OverlayBootstrap.startUpCoordinator(uint64_t a1)
{
  uint64_t started;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  started = type metadata accessor for JetStartUpCoordinator(0);
  v3 = *(_QWORD *)(started - 8);
  __chkstk_darwin();
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, started);
  State.init(wrappedValue:)(v5, started);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, started);
}

uint64_t OverlayBootstrap.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  sub_10000475C();
  result = sub_100003304(&qword_10010BE90);
  *(_QWORD *)(a1 + *(int *)(result + 28)) = 0;
  return result;
}

uint64_t sub_10000475C()
{
  uint64_t started;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v12[5];

  started = type metadata accessor for JetStartUpProcedure(0);
  v1 = *(_QWORD *)(started - 8);
  __chkstk_darwin(started);
  v3 = (_QWORD *)((char *)&v12[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12[3] = &type metadata for GameOverlayUIFeatureFlags;
  v12[4] = sub_100004EA4();
  LOBYTE(v12[0]) = 2;
  v4 = isFeatureEnabled(_:)(v12);
  sub_100004624(v12);
  if ((v4 & 1) != 0)
  {
    v5 = sub_100003304(&qword_10010BF30);
    v6 = swift_allocObject(v5, 48, 7);
    *(_OWORD *)(v6 + 16) = xmmword_1000C5A50;
    *(_QWORD *)(v6 + 32) = type metadata accessor for Bag(0);
    *(_QWORD *)(v6 + 40) = sub_100005238();
    *v3 = v6;
    v7 = (unsigned int *)&enum case for JetStartUpProcedure.partialBootstrap(_:);
  }
  else
  {
    v7 = (unsigned int *)&enum case for JetStartUpProcedure.lazy(_:);
  }
  v8 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(v1 + 104))(v3, *v7, started);
  v9 = static Transaction._loading.getter(v8);
  return JetStartUpCoordinator.init(startUpProcedure:transaction:makeObjects:)(v3, v9, sub_100004EE8, 0);
}

uint64_t *initializeBufferWithCopyOfBuffer for OverlayBootstrap(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t started;
  uint64_t v8;
  uint64_t v9;

  v4 = sub_100003304(&qword_10010BE90);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v6 = v4;
    started = type metadata accessor for JetStartUpCoordinator(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(started - 8) + 16))(a1, a2, started);
    v8 = *(int *)(v6 + 28);
    v9 = *(uint64_t *)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = v9;
  }
  swift_retain(v9);
  return a1;
}

double destroy for OverlayBootstrap(uint64_t a1)
{
  uint64_t started;
  uint64_t v3;
  double result;

  started = type metadata accessor for JetStartUpCoordinator(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(started - 8) + 8))(a1, started);
  v3 = *(_QWORD *)(a1 + *(int *)(sub_100003304(&qword_10010BE90) + 28));
  *(_QWORD *)&result = swift_release(v3).n128_u64[0];
  return result;
}

uint64_t initializeWithCopy for OverlayBootstrap(uint64_t a1, uint64_t a2)
{
  uint64_t started;
  uint64_t v5;
  uint64_t v6;

  started = type metadata accessor for JetStartUpCoordinator(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(started - 8) + 16))(a1, a2, started);
  v5 = *(int *)(sub_100003304(&qword_10010BE90) + 28);
  v6 = *(_QWORD *)(a2 + v5);
  *(_QWORD *)(a1 + v5) = v6;
  swift_retain(v6);
  return a1;
}

uint64_t assignWithCopy for OverlayBootstrap(uint64_t a1, uint64_t a2)
{
  uint64_t started;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  started = type metadata accessor for JetStartUpCoordinator(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(started - 8) + 24))(a1, a2, started);
  v5 = *(int *)(sub_100003304(&qword_10010BE90) + 28);
  v6 = *(_QWORD *)(a1 + v5);
  v7 = *(_QWORD *)(a2 + v5);
  *(_QWORD *)(a1 + v5) = v7;
  swift_retain(v7);
  swift_release(v6);
  return a1;
}

uint64_t initializeWithTake for OverlayBootstrap(uint64_t a1, uint64_t a2)
{
  uint64_t started;
  uint64_t v5;

  started = type metadata accessor for JetStartUpCoordinator(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(started - 8) + 32))(a1, a2, started);
  v5 = sub_100003304(&qword_10010BE90);
  *(_QWORD *)(a1 + *(int *)(v5 + 28)) = *(_QWORD *)(a2 + *(int *)(v5 + 28));
  return a1;
}

uint64_t assignWithTake for OverlayBootstrap(uint64_t a1, uint64_t a2)
{
  uint64_t started;
  uint64_t v5;
  uint64_t v6;

  started = type metadata accessor for JetStartUpCoordinator(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(started - 8) + 40))(a1, a2, started);
  v5 = *(int *)(sub_100003304(&qword_10010BE90) + 28);
  v6 = *(_QWORD *)(a1 + v5);
  *(_QWORD *)(a1 + v5) = *(_QWORD *)(a2 + v5);
  swift_release(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for OverlayBootstrap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100004B08);
}

uint64_t sub_100004B08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003304(&qword_10010BE90);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for OverlayBootstrap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100004B54);
}

uint64_t sub_100004B54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003304(&qword_10010BE90);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for OverlayBootstrap(uint64_t a1)
{
  uint64_t result;

  result = qword_10010BEF0;
  if (!qword_10010BEF0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for OverlayBootstrap);
  return result;
}

void sub_100004BD4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  sub_100004C3C(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
  }
}

void sub_100004C3C(uint64_t a1)
{
  uint64_t started;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10010BF00)
  {
    started = type metadata accessor for JetStartUpCoordinator(255);
    v3 = type metadata accessor for State(a1, started);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10010BF00);
  }
}

uint64_t sub_100004C90(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[12] = a1;
  v2 = type metadata accessor for NativeIntentDispatcher(0);
  v1[13] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[14] = v3;
  v1[15] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100004CF0, 0, 0);
}

uint64_t sub_100004CF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;

  v3 = *(_QWORD *)(v1 + 112);
  v2 = *(_QWORD *)(v1 + 120);
  v5 = *(_QWORD **)(v1 + 96);
  v4 = *(_QWORD *)(v1 + 104);
  NativeIntentDispatcher.init()(a1);
  *(_QWORD *)(v1 + 40) = v4;
  *(_QWORD *)(v1 + 48) = &protocol witness table for NativeIntentDispatcher;
  v6 = sub_1000052B0((_QWORD *)(v1 + 16));
  sub_1000BA618((uint64_t)v6);
  v5[3] = v4;
  v5[4] = &protocol witness table for NativeIntentDispatcher;
  v7 = sub_1000052B0(v5);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v3 + 16))(v7, v2, v4);
  sub_1000052EC(v1 + 16, v1 + 56);
  NativeIntentDispatcher.next.setter(v1 + 56);
  sub_100005334(v1 + 16);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100004DCC()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100004E4C(v0, qword_1001232D8);
  sub_100004E8C(v0, (uint64_t)qword_1001232D8);
  return Logger.init(subsystem:category:)(0xD000000000000011, 0x80000001000CF810, 0x7265764F656D6147, 0xED0000495579616CLL);
}

uint64_t *sub_100004E4C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

uint64_t sub_100004E8C(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

unint64_t sub_100004EA4()
{
  unint64_t result;

  result = qword_100111650;
  if (!qword_100111650)
  {
    result = swift_getWitnessTable(&unk_1000CD6B4, &type metadata for GameOverlayUIFeatureFlags);
    atomic_store(result, (unint64_t *)&qword_100111650);
  }
  return result;
}

uint64_t sub_100004EE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  NSString *v23;
  _BYTE *v24;
  id v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;

  v0 = type metadata accessor for Dependency(0);
  v39 = *(_QWORD *)(v0 - 8);
  v40 = v0;
  __chkstk_darwin(v0);
  v38 = (char *)&v33 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for BagProfile(0);
  __chkstk_darwin(v37);
  v3 = (uint64_t *)((char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = type metadata accessor for AppleServicesURLProtocol(0);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v6 = 0xD000000000000017;
  v6[1] = 0x80000001000CF830;
  v6[2] = 0;
  v6[3] = 0;
  v35 = v8;
  v36 = v7;
  (*(void (**)(_QWORD *, _QWORD))(v8 + 104))(v6, enum case for AppleServicesURLProtocol.media(_:));
  v9 = sub_100003304(&qword_10010BF38);
  v10 = sub_100003304(&qword_10010BF40);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v34 = v12;
  v15 = swift_allocObject(v9, v14 + 2 * v12, v13 | 7);
  *(_OWORD *)(v15 + 16) = xmmword_1000C5A50;
  v16 = *(int *)(v10 + 48);
  if (qword_10010BB78 != -1)
    swift_once(&qword_10010BB78, sub_10008FFB0);
  v17 = v15 + v14;
  v18 = v15 + v14 + v16;
  v19 = (void *)static Bag.metricsTopicKey;
  *(_QWORD *)(v15 + v14) = static Bag.metricsTopicKey;
  strcpy((char *)v18, "xp_amp_gc_cs");
  *(_BYTE *)(v18 + 13) = 0;
  *(_WORD *)(v18 + 14) = -5120;
  v20 = enum case for Bag.ValueOverride.string(_:);
  v21 = type metadata accessor for Bag.ValueOverride(0);
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 104);
  v22(v18, v20, v21);
  v23 = (NSString *)(v17 + v34);
  v24 = (char *)v23 + *(int *)(v10 + 48);
  v25 = v19;
  *v23 = String._bridgeToObjectiveC()();
  *v24 = 1;
  v22((uint64_t)v24, enum case for Bag.ValueOverride.BOOL(_:), v21);
  v26 = sub_10008F7E0(v15);
  *v3 = 0x746E6543656D6147;
  v3[1] = 0xEA00000000007265;
  v3[2] = 49;
  v3[3] = 0xE100000000000000;
  v27 = v37;
  Bag.Stubs.init()();
  *(_QWORD *)((char *)v3 + *(int *)(v27 + 28)) = v26;
  v28 = sub_1000BA984((uint64_t)v6, (uint64_t)v3);
  sub_100005274((uint64_t)v3);
  (*(void (**)(_QWORD *, uint64_t))(v35 + 8))(v6, v36);
  v29 = sub_100003304(&qword_10010BF48);
  swift_retain(v28);
  v30 = v38;
  Dependency.init<A>(satisfying:with:)(v29, &unk_10010BF50, 0, v29);
  swift_retain(v28);
  v31 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v30);
  swift_release_n(v28, 3);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v30, v40);
  return v31;
}

unint64_t sub_100005238()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100111FD0;
  if (!qword_100111FD0)
  {
    v1 = objc_opt_self(AMSURLSession);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, &qword_100111FD0);
  }
  return result;
}

uint64_t sub_100005274(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for BagProfile(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *sub_1000052B0(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

uint64_t sub_1000052EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003304(&qword_10010BF58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100005334(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100003304(&qword_10010BF58);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100005374(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  double v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  int v36;
  uint64_t v37;
  char v38;
  char v39;
  char v40;

  v36 = a3;
  v35 = *(double *)&a2;
  v4 = sub_100003304(&qword_10010C7E0);
  v33 = *(_QWORD *)(v4 - 8);
  v34 = v4;
  __chkstk_darwin(v4);
  v32 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003304(&qword_10010C7E8);
  v30 = *(_QWORD *)(v6 - 8);
  v31 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003304(&qword_10010C7F0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100003304(&qword_10010C7F8);
  v37 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a1[3];
  v17 = a1[4];
  sub_100003C28(a1, v16);
  v18 = sub_1000176D0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Page.RefreshCondition.CodingKeys, &type metadata for Page.RefreshCondition.CodingKeys, v18, v16, v17);
  if (!(_BYTE)v36)
  {
    v24 = v35;
    v39 = 1;
    v25 = sub_100017758();
    v26 = KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for Page.RefreshCondition.OnAppearCodingKeys, &v39, v13, &type metadata for Page.RefreshCondition.OnAppearCodingKeys, v25);
    v27 = v31;
    KeyedEncodingContainer.encode(_:forKey:)(v26, v31, v24);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v8, v27);
    return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v15, v13);
  }
  if (v36 == 1)
  {
    v19 = v35;
    v40 = 2;
    v20 = sub_100017714();
    v21 = v32;
    v22 = KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for Page.RefreshCondition.OnForegroundCodingKeys, &v40, v13, &type metadata for Page.RefreshCondition.OnForegroundCodingKeys, v20);
    v23 = v34;
    KeyedEncodingContainer.encode(_:forKey:)(v22, v34, v19);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v21, v23);
    return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v15, v13);
  }
  v38 = 0;
  v29 = sub_10001779C();
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for Page.RefreshCondition.PullToRefreshCodingKeys, &v38, v13, &type metadata for Page.RefreshCondition.PullToRefreshCodingKeys, v29);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v15, v13);
}

uint64_t sub_100005650()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x7261657070416E6FLL;
  if (*v0 != 1)
    v1 = 0x726765726F466E6FLL;
  if (*v0)
    return v1;
  else
    return 0x65526F546C6C7570;
}

uint64_t sub_1000056C0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10000DAD8(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000056E4(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1000056F0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000176D0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100005718(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000176D0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100005748()
{
  return 0x4968736572666572;
}

uint64_t sub_100005770(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100017758();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100005798(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100017758();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000057C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x4968736572666572 && a2 == 0xEF6C61767265746ELL)
  {
    result = swift_bridgeObjectRelease(0xEF6C61767265746ELL);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x4968736572666572, 0xEF6C61767265746ELL, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_100005878(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100017714();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000058A0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100017714();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000058C8()
{
  return 0;
}

uint64_t sub_1000058D4@<X0>(uint64_t a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease(a1);
  *a2 = 1;
  return result;
}

uint64_t sub_100005900(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001779C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100005928(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001779C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100005950@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v5;

  result = sub_10000DC68(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_BYTE *)(a2 + 8) = v5;
  }
  return result;
}

uint64_t sub_10000597C(_QWORD *a1)
{
  uint64_t v1;

  return sub_100005374(a1, *(_QWORD *)v1, *(unsigned __int8 *)(v1 + 8));
}

BOOL sub_100005998(uint64_t a1, uint64_t a2)
{
  double v2;
  int v3;

  v2 = *(double *)a2;
  v3 = *(unsigned __int8 *)(a2 + 8);
  if (!*(_BYTE *)(a1 + 8))
  {
    if (*(_BYTE *)(a2 + 8))
      return 0;
    return *(double *)a1 == v2;
  }
  if (*(_BYTE *)(a1 + 8) == 1)
  {
    if (v3 != 1)
      return 0;
    return *(double *)a1 == v2;
  }
  return v3 == 2 && *(_QWORD *)&v2 == 0;
}

uint64_t sub_1000059F8()
{
  return 0x6E6172546D6F6F7ALL;
}

uint64_t sub_100005A1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x6E6172546D6F6F7ALL && a2 == 0xEF6E6F6974616C73)
  {
    result = swift_bridgeObjectRelease(0xEF6E6F6974616C73);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6172546D6F6F7ALL, 0xEF6E6F6974616C73, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_100005AD4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100005EC8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100005AFC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100005EC8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100005B24()
{
  _BYTE *v0;

  if (*v0)
    return 0x7974696C617571;
  else
    return 0x6B726F77747261;
}

uint64_t sub_100005B58@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10000E100(a1, a2);
  *a3 = result;
  return result;
}

void sub_100005B7C(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_100005B88(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100005F0C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100005BB0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100005F0C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Page.Background.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  _BYTE v36[2];

  v29 = sub_100003304(&qword_10010BF60);
  v33 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v31 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for MediaArtwork(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Page.Background(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003304(&qword_10010BF68);
  v32 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  sub_100003C28(a1, v14);
  v15 = sub_100005EC8();
  v16 = v13;
  v17 = v29;
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Page.Background.CodingKeys, &type metadata for Page.Background.CodingKeys, v15, v14, v16);
  sub_100007878(v30, (uint64_t)v9, type metadata accessor for Page.Background);
  v18 = &v9[*(int *)(sub_100003304(&qword_10010BF78) + 48)];
  v30 = *(_QWORD *)v18;
  v35 = v18[8];
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v9, v3);
  v19 = sub_100005F0C();
  v20 = v31;
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for Page.Background.ZoomTranslationCodingKeys, v21, v10, &type metadata for Page.Background.ZoomTranslationCodingKeys, v19);
  v36[1] = 0;
  sub_1000035B4(&qword_10010BF88, (uint64_t (*)(uint64_t))&type metadata accessor for MediaArtwork, (uint64_t)&protocol conformance descriptor for MediaArtwork);
  v22 = v34;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v6);
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v33 + 8))(v20, v17);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v12, v10);
  }
  else
  {
    v27 = v12;
    v28 = v10;
    v34 = v3;
    v24 = v4;
    v25 = v32;
    v26 = v33;
    v36[0] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v30, v35, v36, v17);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v20, v17);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v6, v34);
    return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v27, v28);
  }
}

uint64_t type metadata accessor for Page.Background(uint64_t a1)
{
  return sub_100010C88(a1, (uint64_t *)&unk_10010C450, (uint64_t)&nominal type descriptor for Page.Background);
}

unint64_t sub_100005EC8()
{
  unint64_t result;

  result = qword_10010BF70;
  if (!qword_10010BF70)
  {
    result = swift_getWitnessTable(&unk_1000C798C, &type metadata for Page.Background.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010BF70);
  }
  return result;
}

unint64_t sub_100005F0C()
{
  unint64_t result;

  result = qword_10010BF80;
  if (!qword_10010BF80)
  {
    result = swift_getWitnessTable(&unk_1000C793C, &type metadata for Page.Background.ZoomTranslationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010BF80);
  }
  return result;
}

uint64_t Page.Background.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  _BYTE v46[2];

  v41 = a2;
  v43 = type metadata accessor for Page.Background(0);
  __chkstk_darwin(v43);
  v44 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_100003304(&qword_10010BF90);
  v4 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003304(&qword_10010BF98);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v11 = a1[4];
  sub_100003C28(a1, v12);
  v13 = sub_100005EC8();
  v14 = v45;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Page.Background.CodingKeys, &type metadata for Page.Background.CodingKeys, v13, v12, v11);
  if (v14)
    goto LABEL_5;
  v39 = v4;
  v40 = a1;
  v15 = v44;
  v45 = v8;
  v16 = KeyedDecodingContainer.allKeys.getter(v7);
  v17 = v7;
  if (*(_QWORD *)(v16 + 16) != 1)
  {
    v21 = type metadata accessor for DecodingError(0);
    swift_allocError(v21, &protocol witness table for DecodingError, 0, 0);
    v23 = v22;
    sub_100003304(&qword_10010BFA0);
    *v23 = v43;
    v24 = KeyedDecodingContainer.codingPath.getter(v7);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v24, 0xD00000000000002BLL, 0x80000001000CF850, 0);
    v25 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v23, enum case for DecodingError.typeMismatch(_:), v21);
    swift_willThrow(v25);
    swift_bridgeObjectRelease(v16);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v10, v7);
    a1 = v40;
LABEL_5:
    v37 = a1;
    return sub_100004624(v37);
  }
  v18 = sub_100005F0C();
  v19 = v6;
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for Page.Background.ZoomTranslationCodingKeys, v20, v7, &type metadata for Page.Background.ZoomTranslationCodingKeys, v18);
  v43 = v16;
  type metadata accessor for MediaArtwork(0);
  v46[1] = 0;
  sub_1000035B4(&qword_10010BFA8, (uint64_t (*)(uint64_t))&type metadata accessor for MediaArtwork, (uint64_t)&protocol conformance descriptor for MediaArtwork);
  v26 = (uint64_t)v15;
  v27 = v42;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v15);
  v46[0] = 1;
  v29 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v46, v27);
  v30 = v45;
  v31 = v39;
  v38 = v29;
  v33 = v32;
  v34 = sub_100003304(&qword_10010BF78);
  v35 = v27;
  v36 = v26 + *(int *)(v34 + 48);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v19, v35);
  swift_bridgeObjectRelease(v43);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v10, v17);
  *(_QWORD *)v36 = v38;
  *(_BYTE *)(v36 + 8) = v33 & 1;
  sub_100010F0C(v26, v41, type metadata accessor for Page.Background);
  v37 = v40;
  return sub_100004624(v37);
}

uint64_t sub_100006334@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Page.Background.init(from:)(a1, a2);
}

uint64_t sub_100006348(_QWORD *a1)
{
  return Page.Background.encode(to:)(a1);
}

uint64_t Page.id.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10000CA40((uint64_t (*)(_QWORD))&type metadata accessor for PageID, a1);
}

uint64_t Page.id.setter(uint64_t a1)
{
  return sub_10000CA88(a1, (uint64_t (*)(_QWORD))&type metadata accessor for PageID);
}

uint64_t (*Shelf.id.modify())()
{
  return property wrapper backing initializer of Shelf.items;
}

uint64_t Page.pageMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for Page(0) + 20);
  v4 = type metadata accessor for PageMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for Page(uint64_t a1)
{
  return sub_100010C88(a1, (uint64_t *)&unk_10010C380, (uint64_t)&nominal type descriptor for Page);
}

uint64_t Page.pageMetrics.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for Page(0) + 20);
  v4 = type metadata accessor for PageMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*Page.pageMetrics.modify())()
{
  type metadata accessor for Page(0);
  return property wrapper backing initializer of Shelf.items;
}

uint64_t Page.title.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for Page(0) + 24));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t Page.title.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for Page(0) + 24));
  result = swift_bridgeObjectRelease(v5[1]);
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*Page.title.modify())()
{
  type metadata accessor for Page(0);
  return property wrapper backing initializer of Shelf.items;
}

uint64_t Page.titleDisplayMode.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Page(0) + 28));
}

uint64_t Page.titleDisplayMode.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Page(0);
  *(_BYTE *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*Page.titleDisplayMode.modify())()
{
  type metadata accessor for Page(0);
  return property wrapper backing initializer of Shelf.items;
}

uint64_t Page.toolbarItemGroups.getter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (_QWORD *)(v0 + *(int *)(type metadata accessor for Page(0) + 32));
  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  swift_bridgeObjectRetain(*v1);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return v2;
}

uint64_t Page.toolbarItemGroups.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t result;

  v7 = (_QWORD *)(v3 + *(int *)(type metadata accessor for Page(0) + 32));
  swift_bridgeObjectRelease(*v7);
  swift_bridgeObjectRelease(v7[1]);
  result = swift_bridgeObjectRelease(v7[2]);
  *v7 = a1;
  v7[1] = a2;
  v7[2] = a3;
  return result;
}

uint64_t (*Page.toolbarItemGroups.modify())()
{
  type metadata accessor for Page(0);
  return property wrapper backing initializer of Shelf.items;
}

uint64_t Page.shelves.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for Page(0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + *(int *)(v1 + 36)));
}

uint64_t Page.shelves.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for Page(0) + 36);
  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + v3));
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*Page.shelves.modify())()
{
  type metadata accessor for Page(0);
  return property wrapper backing initializer of Shelf.items;
}

uint64_t Page.margins.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Page(0) + 40));
}

uint64_t Page.margins.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Page(0);
  *(_BYTE *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*Page.margins.modify())()
{
  type metadata accessor for Page(0);
  return property wrapper backing initializer of Shelf.items;
}

uint64_t Page.background.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Page(0);
  return sub_100010CBC(v1 + *(int *)(v3 + 44), a1, &qword_10010BFB0);
}

uint64_t Page.background.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Page(0);
  return sub_100010D00(a1, v1 + *(int *)(v3 + 44), &qword_10010BFB0);
}

uint64_t (*Page.background.modify())()
{
  type metadata accessor for Page(0);
  return property wrapper backing initializer of Shelf.items;
}

uint64_t sub_1000067E4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10000680C + 4 * ::a1[a1]))(25705, 0xE200000000000000);
}

uint64_t sub_10000680C()
{
  return 0x7274654D65676170;
}

uint64_t sub_10000682C()
{
  return 0x656C746974;
}

unint64_t sub_100006840()
{
  return 0xD000000000000010;
}

unint64_t sub_100006860()
{
  return 0xD000000000000011;
}

uint64_t sub_1000068D4()
{
  unsigned __int8 *v0;

  return sub_1000067E4(*v0);
}

uint64_t sub_1000068DC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10000E1F0(a1, a2);
  *a3 = result;
  return result;
}

void sub_100006900(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

uint64_t sub_10000690C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100006D0C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100006934(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100006D0C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Page.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v23;
  uint64_t v24;
  char v25;

  v3 = v1;
  v5 = sub_100003304(&qword_10010BFB8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100003C28(a1, v9);
  v11 = sub_100006D0C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Page.CodingKeys, &type metadata for Page.CodingKeys, v11, v9, v10);
  LOBYTE(v23) = 0;
  type metadata accessor for PageID(0);
  sub_1000035B4(&qword_10010BFC8, (uint64_t (*)(uint64_t))&type metadata accessor for PageID, (uint64_t)&protocol conformance descriptor for PageID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3);
  if (!v2)
  {
    v12 = (int *)type metadata accessor for Page(0);
    v13 = v3 + v12[5];
    LOBYTE(v23) = 1;
    type metadata accessor for PageMetrics(0);
    sub_1000035B4(&qword_10010BFD0, (uint64_t (*)(uint64_t))&type metadata accessor for PageMetrics, (uint64_t)&protocol conformance descriptor for PageMetrics);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v13);
    v14 = (uint64_t *)(v3 + v12[6]);
    v15 = *v14;
    v16 = v14[1];
    LOBYTE(v23) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v15, v16, &v23, v5);
    LOBYTE(v23) = *(_BYTE *)(v3 + v12[7]);
    v25 = 3;
    sub_100006D50();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v23);
    v17 = (__int128 *)(v3 + v12[8]);
    v18 = *((_QWORD *)v17 + 2);
    v23 = *v17;
    v24 = v18;
    v25 = 4;
    sub_100006D94();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v23);
    *(_QWORD *)&v23 = *(_QWORD *)(v3 + v12[9]);
    v25 = 5;
    sub_100003304(&qword_10010BFE8);
    sub_100006DD8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v23);
    LOBYTE(v23) = *(_BYTE *)(v3 + v12[10]);
    v25 = 6;
    sub_100006E98();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v23);
    v19 = v3 + v12[11];
    LOBYTE(v23) = 7;
    v20 = type metadata accessor for Page.Background(0);
    v21 = sub_1000035B4(&qword_10010C010, type metadata accessor for Page.Background, (uint64_t)&protocol conformance descriptor for Page.Background);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v19, &v23, v5, v20, v21);
    *(_QWORD *)&v23 = *(_QWORD *)(v3 + v12[12]);
    v25 = 8;
    sub_100003304(&qword_10010C018);
    sub_100006EDC(&qword_10010C020, &qword_10010C018, (void (*)(void))sub_100006F40, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v23);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_100006D0C()
{
  unint64_t result;

  result = qword_10010BFC0;
  if (!qword_10010BFC0)
  {
    result = swift_getWitnessTable(&unk_1000C78EC, &type metadata for Page.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010BFC0);
  }
  return result;
}

unint64_t sub_100006D50()
{
  unint64_t result;

  result = qword_10010BFD8;
  if (!qword_10010BFD8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for TitleDisplayMode, &type metadata for TitleDisplayMode);
    atomic_store(result, (unint64_t *)&qword_10010BFD8);
  }
  return result;
}

unint64_t sub_100006D94()
{
  unint64_t result;

  result = qword_10010BFE0;
  if (!qword_10010BFE0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PageToolbarItemGroups, &type metadata for PageToolbarItemGroups);
    atomic_store(result, (unint64_t *)&qword_10010BFE0);
  }
  return result;
}

unint64_t sub_100006DD8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010BFF0;
  if (!qword_10010BFF0)
  {
    v1 = sub_100006E54(&qword_10010BFE8);
    sub_100011054(&qword_10010BFF8, &qword_10010C000, (uint64_t)&protocol conformance descriptor for _CodeByKind_Many<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> DiscardOnError<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10010BFF0);
  }
  return result;
}

uint64_t sub_100006E54(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t sub_100006E98()
{
  unint64_t result;

  result = qword_10010C008;
  if (!qword_10010C008)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Margins, &type metadata for Margins);
    atomic_store(result, (unint64_t *)&qword_10010C008);
  }
  return result;
}

uint64_t sub_100006EDC(unint64_t *a1, uint64_t *a2, void (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100006E54(a2);
    a3();
    result = swift_getWitnessTable(a4, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100006F40()
{
  unint64_t result;

  result = qword_10010C028;
  if (!qword_10010C028)
  {
    result = swift_getWitnessTable(&unk_1000C78C4, &type metadata for Page.RefreshCondition);
    atomic_store(result, (unint64_t *)&qword_10010C028);
  }
  return result;
}

uint64_t Page.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  uint64_t v52;
  char *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  char v62;

  v46 = a2;
  v3 = sub_100003304(&qword_10010BFB0);
  __chkstk_darwin(v3);
  v47 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = type metadata accessor for PageMetrics(0);
  v50 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58);
  v6 = (uint64_t *)((char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = (_QWORD *)type metadata accessor for PageID(0);
  v52 = *(v7 - 1);
  __chkstk_darwin(v7);
  v48 = (uint64_t *)((char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v49 = sub_100003304(&qword_10010C030);
  v9 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Page(0);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = &v15[*(int *)(v13 + 44)];
  v17 = type metadata accessor for Page.Background(0);
  v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
  v55 = (uint64_t)v16;
  v18(v16, 1, 1, v17);
  v51 = (int *)v12;
  v56 = *(int *)(v12 + 48);
  v57 = v15;
  *(_QWORD *)&v15[v56] = &_swiftEmptyArrayStorage;
  v20 = a1[3];
  v19 = a1[4];
  v54 = a1;
  sub_100003C28(a1, v20);
  v21 = sub_100006D0C();
  v53 = v11;
  v22 = v59;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Page.CodingKeys, &type metadata for Page.CodingKeys, v21, v20, v19);
  if (v22)
  {
    v25 = v57;
    v26 = v55;
    v27 = v56;
    sub_100004624(v54);
    sub_100010ED0(v26, &qword_10010BFB0);
    return swift_bridgeObjectRelease(*(_QWORD *)&v25[v27]);
  }
  else
  {
    v45 = v17;
    v59 = v9;
    LOBYTE(v60) = 0;
    sub_1000035B4(&qword_10010C038, (uint64_t (*)(uint64_t))&type metadata accessor for PageID, (uint64_t)&protocol conformance descriptor for PageID);
    v24 = v48;
    v23 = v49;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v48);
    v28 = (uint64_t)v57;
    (*(void (**)(char *, _QWORD *, _QWORD *))(v52 + 32))(v57, v24, v7);
    LOBYTE(v60) = 1;
    sub_1000035B4(&qword_10010C040, (uint64_t (*)(uint64_t))&type metadata accessor for PageMetrics, (uint64_t)&protocol conformance descriptor for PageMetrics);
    v29 = v58;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v6);
    v48 = v7;
    v30 = v23;
    v31 = v51;
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v50 + 32))(v28 + v51[5], v6, v29);
    LOBYTE(v60) = 2;
    v32 = KeyedDecodingContainer.decode(_:forKey:)(&v60, v30);
    v33 = (uint64_t *)(v28 + v31[6]);
    *v33 = v32;
    v33[1] = v34;
    v62 = 3;
    sub_1000076EC();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v60);
    v35 = v55;
    v36 = v56;
    *(_BYTE *)(v28 + v31[7]) = v60;
    v62 = 4;
    sub_100007730();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v60);
    v37 = v61;
    v38 = v28 + v31[8];
    *(_OWORD *)v38 = v60;
    *(_QWORD *)(v38 + 16) = v37;
    sub_100003304(&qword_10010BFE8);
    v62 = 5;
    sub_100007774();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v60);
    *(_QWORD *)(v28 + v31[9]) = v60;
    v62 = 6;
    sub_1000077F0();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v60);
    *(_BYTE *)(v28 + v31[10]) = v60;
    LOBYTE(v60) = 7;
    v39 = sub_1000035B4(&qword_10010C070, type metadata accessor for Page.Background, (uint64_t)&protocol conformance descriptor for Page.Background);
    v40 = (uint64_t)v47;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v45, &v60, v49, v45, v39);
    sub_100010D00(v40, v35, &qword_10010BFB0);
    sub_100003304(&qword_10010C018);
    v62 = 8;
    sub_100006EDC(&qword_10010C078, &qword_10010C018, (void (*)(void))sub_100007834, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v60);
    v41 = v54;
    (*(void (**)(char *, uint64_t))(v59 + 8))(v53, v49);
    v42 = v60;
    swift_bridgeObjectRelease(*(_QWORD *)(v28 + v36));
    *(_QWORD *)(v28 + v36) = v42;
    sub_100007878(v28, v46, type metadata accessor for Page);
    sub_100004624(v41);
    return sub_1000106F0(v28, type metadata accessor for Page);
  }
}

unint64_t sub_1000076EC()
{
  unint64_t result;

  result = qword_10010C048;
  if (!qword_10010C048)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for TitleDisplayMode, &type metadata for TitleDisplayMode);
    atomic_store(result, (unint64_t *)&qword_10010C048);
  }
  return result;
}

unint64_t sub_100007730()
{
  unint64_t result;

  result = qword_10010C050;
  if (!qword_10010C050)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PageToolbarItemGroups, &type metadata for PageToolbarItemGroups);
    atomic_store(result, (unint64_t *)&qword_10010C050);
  }
  return result;
}

unint64_t sub_100007774()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010C058;
  if (!qword_10010C058)
  {
    v1 = sub_100006E54(&qword_10010BFE8);
    sub_100011054(&qword_10010C060, &qword_10010C000, (uint64_t)&protocol conformance descriptor for _CodeByKind_Many<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> DiscardOnError<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10010C058);
  }
  return result;
}

unint64_t sub_1000077F0()
{
  unint64_t result;

  result = qword_10010C068;
  if (!qword_10010C068)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Margins, &type metadata for Margins);
    atomic_store(result, (unint64_t *)&qword_10010C068);
  }
  return result;
}

unint64_t sub_100007834()
{
  unint64_t result;

  result = qword_10010C080;
  if (!qword_10010C080)
  {
    result = swift_getWitnessTable(&unk_1000C789C, &type metadata for Page.RefreshCondition);
    atomic_store(result, (unint64_t *)&qword_10010C080);
  }
  return result;
}

uint64_t sub_100007878(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_1000078BC()
{
  ShelfBasedPageModel<>.presentation.getter();
  __break(1u);
}

uint64_t sub_1000078CC(uint64_t a1)
{
  uint64_t v1;

  return swift_bridgeObjectRetain(*(_QWORD *)(v1 + *(int *)(a1 + 36)));
}

uint64_t sub_1000078D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *(int *)(a1 + 24));
  v3 = *v2;
  swift_bridgeObjectRetain(v2[1]);
  return v3;
}

uint64_t sub_10000790C(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 28));
}

uint64_t sub_100007918(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (_QWORD *)(v1 + *(int *)(a1 + 32));
  v3 = *v2;
  v4 = v2[1];
  v5 = v2[2];
  swift_bridgeObjectRetain(*v2);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return v3;
}

uint64_t sub_10000796C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Page.init(from:)(a1, a2);
}

uint64_t sub_100007980(_QWORD *a1)
{
  return Page.encode(to:)(a1);
}

uint64_t sub_100007994@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 20);
  v5 = type metadata accessor for PageMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_1000079D4@<X0>(uint64_t a1@<X8>)
{
  return sub_10000DAA0((uint64_t (*)(_QWORD))&type metadata accessor for PageID, a1);
}

unint64_t sub_1000079E0()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x676E696C69617274;
  if (*v0 != 1)
    v1 = 0x6974616D6F747561;
  if (*v0)
    return v1;
  else
    return 0xD000000000000013;
}

uint64_t sub_100007A58@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10000E588(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100007A7C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100007C78();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100007AA4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100007C78();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PageToolbarItemGroups.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v18 = a3;
  v8 = sub_100003304(&qword_10010C088);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_100003C28(a1, v12);
  v14 = sub_100007C78();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PageToolbarItemGroups.CodingKeys, &type metadata for PageToolbarItemGroups.CodingKeys, v14, v12, v13);
  v20 = a2;
  v19 = 0;
  v15 = sub_100003304(&qword_10010C098);
  v16 = sub_100006EDC(&qword_10010C0A0, &qword_10010C098, (void (*)(void))sub_100007CBC, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v20, &v19, v8, v15, v16);
  if (!v4)
  {
    v20 = v18;
    v19 = 1;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v20, &v19, v8, v15, v16);
    v20 = a4;
    v19 = 2;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v20, &v19, v8, v15, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

unint64_t sub_100007C78()
{
  unint64_t result;

  result = qword_10010C090;
  if (!qword_10010C090)
  {
    result = swift_getWitnessTable(&unk_1000C784C, &type metadata for PageToolbarItemGroups.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C090);
  }
  return result;
}

unint64_t sub_100007CBC()
{
  unint64_t result;

  result = qword_10010C0A8;
  if (!qword_10010C0A8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PageToolbarItem, &type metadata for PageToolbarItem);
    atomic_store(result, (unint64_t *)&qword_10010C0A8);
  }
  return result;
}

uint64_t PageToolbarItemGroups.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = sub_10000E720(a1);
  if (v1)
    return v3;
  return result;
}

uint64_t sub_100007D24@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_10000E720(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_100007D50(_QWORD *a1)
{
  uint64_t *v1;

  return PageToolbarItemGroups.encode(to:)(a1, *v1, v1[1], v1[2]);
}

uint64_t PageToolbarItem.Appearance.ButtonBackgroundShape.shape.getter@<X0>(char a1@<W0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t result;
  uint64_t v13;

  v4 = type metadata accessor for Capsule(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) != 0)
  {
    v10 = sub_10000E998();
    v11 = &type metadata for Circle;
    v9 = v10;
  }
  else
  {
    v7 = enum case for RoundedCornerStyle.continuous(_:);
    v8 = type metadata accessor for RoundedCornerStyle(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v6, v7, v8);
    v9 = sub_1000035B4(&qword_10010C0B8, (uint64_t (*)(uint64_t))&type metadata accessor for Capsule, (uint64_t)&protocol conformance descriptor for Capsule);
    v10 = (unint64_t)v6;
    v11 = (void *)v4;
  }
  result = AnyShape.init<A>(_:)(v10, v11, v9);
  *a2 = result;
  return result;
}

GameOverlayUI::PageToolbarItem::Appearance::ButtonBackgroundShape_optional __swiftcall PageToolbarItem.Appearance.ButtonBackgroundShape.init(rawValue:)(Swift::String rawValue)
{
  Swift::OpaquePointer v1;

  v1._rawValue = &off_1000FAB20;
  return (GameOverlayUI::PageToolbarItem::Appearance::ButtonBackgroundShape_optional)sub_10000C38C(rawValue, v1);
}

uint64_t PageToolbarItem.Appearance.ButtonBackgroundShape.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x656C63726963;
  else
    return 0x656C7573706163;
}

uint64_t sub_100007E84(char *a1, char *a2)
{
  return sub_100075AD0(*a1, *a2);
}

Swift::Int sub_100007E90()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x656C63726963;
  else
    v2 = 0x656C7573706163;
  if (v1)
    v3 = 0xE600000000000000;
  else
    v3 = 0xE700000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100007F0C(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x656C63726963;
  else
    v2 = 0x656C7573706163;
  if (*v1)
    v3 = 0xE600000000000000;
  else
    v3 = 0xE700000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_100007F64(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x656C63726963;
  else
    v3 = 0x656C7573706163;
  if (v2)
    v4 = 0xE600000000000000;
  else
    v4 = 0xE700000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_100007FDC@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1000FAB20;
  return sub_10000C560(v2, a1, a2);
}

void sub_100007FE8(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x656C7573706163;
  if (*v1)
    v2 = 0x656C63726963;
  v3 = 0xE700000000000000;
  if (*v1)
    v3 = 0xE600000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_100008024(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100017F0C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100008080(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100017F0C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1000080CC()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6567616D69;
  if (*v0 != 1)
    v1 = 0x756F72676B636162;
  if (*v0)
    return v1;
  else
    return 0x656C746974;
}

uint64_t sub_10000812C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10000EC0C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100008150(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10000EAFC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100008178(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10000EAFC();
  return CodingKey.debugDescription.getter(a1, v2);
}

BOOL sub_1000081A0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void sub_1000081B4()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

uint64_t sub_1000081DC()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6E6F74747562;
  if (*v0 != 1)
    v1 = 1970169197;
  if (*v0)
    return v1;
  else
    return 0x7641726579616C70;
}

uint64_t sub_100008234@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10000ED74(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100008258(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10000E9DC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100008280(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10000E9DC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000082A8()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 1954047348;
  if (*v0 != 1)
    v1 = 0x736E6F6974706FLL;
  if (*v0)
    return v1;
  else
    return 0x614E6C6F626D7973;
}

uint64_t sub_100008300@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10000EEC8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100008324(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10000EA64();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10000834C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10000EA64();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100008374(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10000EBC8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10000839C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10000EBC8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PageToolbarItem.Appearance.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  _OWORD v56[9];
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  _BYTE v68[160];
  uint64_t v69;

  v2 = v1;
  v52 = sub_100003304(&qword_10010C0C0);
  v48 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52);
  v51 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = sub_100003304(&qword_10010C0C8);
  v47 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003304(&qword_10010C0D0);
  v49 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = sub_100003304(&qword_10010C0D8);
  v53 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69);
  v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_100003C28(a1, v12);
  v14 = sub_10000E9DC();
  v55 = v11;
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PageToolbarItem.Appearance.CodingKeys, &type metadata for PageToolbarItem.Appearance.CodingKeys, v14, v12, v13);
  sub_10000EA20(v2, (uint64_t)v68);
  v15 = sub_10000EA58((uint64_t)v68);
  if (v15)
  {
    if (v15 == 1)
    {
      v16 = sub_10000EAEC((uint64_t)v68);
      v17 = *(_QWORD *)v16;
      v18 = *(_QWORD *)(v16 + 8);
      v19 = *(_QWORD *)(v16 + 16);
      v51 = *(char **)(v16 + 24);
      v52 = v19;
      LODWORD(v49) = *(unsigned __int8 *)(v16 + 32);
      v20 = *(_BYTE *)(v16 + 33);
      LOBYTE(v58) = 1;
      v21 = sub_10000EAFC();
      v22 = v69;
      v23 = v55;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for PageToolbarItem.Appearance.ButtonCodingKeys, &v58, v69, &type metadata for PageToolbarItem.Appearance.ButtonCodingKeys, v21);
      LOBYTE(v58) = 0;
      v24 = v17;
      v25 = v50;
      v26 = v54;
      KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v24, v18, &v58, v50);
      if (v26)
      {
        (*(void (**)(char *, uint64_t))(v47 + 8))(v6, v25);
        return (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v23, v22);
      }
      else
      {
        *(_QWORD *)&v58 = v52;
        *((_QWORD *)&v58 + 1) = v51;
        LOBYTE(v59) = v49;
        LOBYTE(v56[0]) = 1;
        v44 = sub_10000EB40();
        KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v58, v56, v25, &type metadata for ImageProviding, v44);
        LOBYTE(v58) = v20;
        LOBYTE(v56[0]) = 2;
        v45 = sub_10000EB84();
        KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v58, v56, v25, &type metadata for PageToolbarItem.Appearance.ButtonBackgroundShape, v45);
        (*(void (**)(char *, uint64_t))(v47 + 8))(v6, v25);
        return (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v55, v69);
      }
    }
    else
    {
      v32 = (uint64_t *)sub_10000EAEC((uint64_t)v68);
      v33 = *v32;
      v34 = v32[1];
      v35 = v32[3];
      v50 = v32[2];
      v36 = v32[4];
      LOBYTE(v58) = 2;
      v37 = sub_10000EA64();
      v38 = v51;
      v39 = v69;
      v40 = v55;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for PageToolbarItem.Appearance.MenuCodingKeys, &v58, v69, &type metadata for PageToolbarItem.Appearance.MenuCodingKeys, v37);
      LOBYTE(v58) = 0;
      v41 = v33;
      v42 = v52;
      v43 = v54;
      KeyedEncodingContainer.encode(_:forKey:)(v41, v34, &v58, v52);
      if (!v43)
      {
        LOBYTE(v58) = 1;
        KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v50, v35, &v58, v42);
        *(_QWORD *)&v58 = v36;
        LOBYTE(v56[0]) = 2;
        sub_100003304(&qword_10010C0F0);
        sub_100006EDC(&qword_10010C0F8, &qword_10010C0F0, (void (*)(void))sub_10000EAA8, (uint64_t)&protocol conformance descriptor for <A> [A]);
        KeyedEncodingContainer.encode<A>(_:forKey:)(&v58);
      }
      (*(void (**)(char *, uint64_t))(v48 + 8))(v38, v42);
      return (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v40, v39);
    }
  }
  else
  {
    v28 = sub_10000EAEC((uint64_t)v68);
    v64 = *(_OWORD *)(v28 + 96);
    v65 = *(_OWORD *)(v28 + 112);
    v66 = *(_OWORD *)(v28 + 128);
    v67 = *(_QWORD *)(v28 + 144);
    v60 = *(_OWORD *)(v28 + 32);
    v61 = *(_OWORD *)(v28 + 48);
    v62 = *(_OWORD *)(v28 + 64);
    v63 = *(_OWORD *)(v28 + 80);
    v58 = *(_OWORD *)v28;
    v59 = *(_OWORD *)(v28 + 16);
    LOBYTE(v56[0]) = 0;
    v29 = sub_10000EBC8();
    v30 = v69;
    v31 = v55;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for PageToolbarItem.Appearance.PlayerAvatarCodingKeys, v56, v69, &type metadata for PageToolbarItem.Appearance.PlayerAvatarCodingKeys, v29);
    v56[6] = v64;
    v56[7] = v65;
    v56[8] = v66;
    v57 = v67;
    v56[2] = v60;
    v56[3] = v61;
    v56[4] = v62;
    v56[5] = v63;
    v56[0] = v58;
    v56[1] = v59;
    sub_100003C90();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v56);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v9, v7);
    return (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v31, v30);
  }
}

uint64_t PageToolbarItem.Appearance.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  _BYTE v5[152];

  result = sub_10000F018(a1, (uint64_t)v5);
  if (!v2)
    return sub_10000EA20((uint64_t)v5, a2);
  return result;
}

uint64_t sub_10000895C(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v4[152];

  sub_10000EA20(v1, (uint64_t)v4);
  return PageToolbarItem.Appearance.encode(to:)(a1);
}

uint64_t Player.id.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

uint64_t sub_1000089D8()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6E61726165707061;
  if (*v0 != 1)
    v1 = 0x6575676573;
  if (*v0)
    return v1;
  else
    return 25705;
}

uint64_t sub_100008A28@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10000FCA4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100008A4C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10000F7B0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100008A74(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10000F7B0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PageToolbarItem.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[152];
  _BYTE v17[175];
  char v18;

  v3 = v1;
  v5 = sub_100003304(&qword_10010C130);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = a1[3];
  v10 = a1[4];
  sub_100003C28(a1, v9);
  v11 = sub_10000F7B0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PageToolbarItem.CodingKeys, &type metadata for PageToolbarItem.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v18 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v18, v5);
  if (!v2)
  {
    sub_10000EA20((uint64_t)(v3 + 2), (uint64_t)v17);
    sub_10000EA20((uint64_t)v17, (uint64_t)v16);
    v17[174] = 1;
    sub_10000F7F4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v16);
    v16[0] = 2;
    sub_100003304(&qword_10010C148);
    sub_10000F838();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v3 + 21);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

_QWORD *PageToolbarItem.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _QWORD v19[5];
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char v23;
  _QWORD v24[20];
  _QWORD v25[2];
  uint64_t v26;
  _OWORD v27[2];
  uint64_t v28;
  _OWORD *v29;

  v17 = a2;
  v4 = sub_100003304(&qword_10010C168);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = v27;
  memset(v24, 0, 40);
  v22 = 0;
  v20 = 0u;
  v21 = 0u;
  sub_10000F768((uint64_t)v24, (uint64_t)&v20);
  v27[0] = v20;
  v27[1] = v21;
  v28 = v22;
  sub_100010ED0((uint64_t)v24, &qword_10010C128);
  v9 = a1[3];
  v8 = a1[4];
  sub_100003C28(a1, v9);
  v10 = sub_10000F7B0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PageToolbarItem.CodingKeys, &type metadata for PageToolbarItem.CodingKeys, v10, v9, v8);
  if (v2)
  {
    v13 = (uint64_t)v29;
    sub_100004624(a1);
    return (_QWORD *)sub_100010ED0(v13, &qword_10010C148);
  }
  else
  {
    v11 = v5;
    v12 = v17;
    LOBYTE(v24[0]) = 0;
    v25[0] = KeyedDecodingContainer.decode(_:forKey:)(v24, v4);
    v25[1] = v14;
    v23 = 1;
    sub_10000F8B4();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v24);
    sub_10000EA20((uint64_t)v24, (uint64_t)&v20);
    sub_10000EA20((uint64_t)&v20, (uint64_t)&v26);
    sub_100003304(&qword_10010C148);
    v18 = 2;
    sub_10000FB24();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v19);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v7, v4);
    sub_100010D00((uint64_t)v19, (uint64_t)v29, &qword_10010C148);
    sub_10000FBA0((uint64_t)v25, v12);
    sub_100004624(a1);
    return sub_10000FBD4(v25);
  }
}

_QWORD *sub_100008EF4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return PageToolbarItem.init(from:)(a1, a2);
}

uint64_t sub_100008F08(_QWORD *a1)
{
  return PageToolbarItem.encode(to:)(a1);
}

uint64_t sub_100008F1C@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t PageMenuToolbarItem.title.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t PageMenuToolbarItem.symbolName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 40));
  return v1;
}

uint64_t _s13GameOverlayUI5ShelfV10titleSegue9JetEngine11ActionModel_pSgvpfP_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v4;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  v8 = 0;
  v6 = 0u;
  v7 = 0u;
  sub_10000F768(a1, (uint64_t)&v6);
  v4 = v7;
  *(_OWORD *)a2 = v6;
  *(_OWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 32) = v8;
  return sub_100010ED0(a1, &qword_10010C128);
}

uint64_t sub_100008FDC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100009000 + 4 * byte_1000C5A99[*v0]))(25705, 0xE200000000000000);
}

uint64_t sub_100009000()
{
  return 0x656C746974;
}

uint64_t sub_100009014()
{
  return 0x614E6C6F626D7973;
}

uint64_t sub_100009030()
{
  return 0x6575676573;
}

uint64_t sub_100009044@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10000FDE4(a1, a2);
  *a3 = result;
  return result;
}

void sub_100009068(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_100009074(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10000FC00();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10000909C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10000FC00();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PageMenuToolbarItem.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[13];
  char v20;
  char v21;
  char v22;

  v3 = v1;
  v5 = sub_100003304(&qword_10010C188);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v19[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = a1[3];
  v10 = a1[4];
  sub_100003C28(a1, v9);
  v11 = sub_10000FC00();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PageMenuToolbarItem.CodingKeys, &type metadata for PageMenuToolbarItem.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v22 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v22, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = v3[3];
    v21 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v21, v5);
    v16 = v3[4];
    v17 = v3[5];
    v20 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v20, v5);
    v19[12] = 3;
    sub_100003304(&qword_10010C148);
    sub_10000F838();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v3 + 6);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

_QWORD *PageMenuToolbarItem.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _OWORD v19[2];
  uint64_t v20;
  _QWORD v21[6];
  _OWORD v22[2];
  uint64_t v23;
  _OWORD *v24;

  v5 = sub_100003304(&qword_10010C198);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = v22;
  v20 = 0;
  memset(v19, 0, sizeof(v19));
  v18 = 0;
  v17 = 0u;
  v16 = 0u;
  sub_10000F768((uint64_t)v19, (uint64_t)&v16);
  v22[0] = v16;
  v22[1] = v17;
  v23 = v18;
  sub_100010ED0((uint64_t)v19, &qword_10010C128);
  v9 = a1[3];
  v10 = a1[4];
  sub_100003C28(a1, v9);
  v11 = sub_10000FC00();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PageMenuToolbarItem.CodingKeys, &type metadata for PageMenuToolbarItem.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_100004624(a1);
    return (_QWORD *)sub_100010ED0((uint64_t)v24, &qword_10010C148);
  }
  else
  {
    LOBYTE(v19[0]) = 0;
    v21[0] = KeyedDecodingContainer.decode(_:forKey:)(v19, v5);
    v21[1] = v12;
    LOBYTE(v19[0]) = 1;
    v21[2] = KeyedDecodingContainer.decode(_:forKey:)(v19, v5);
    v21[3] = v13;
    LOBYTE(v19[0]) = 2;
    v21[4] = KeyedDecodingContainer.decode(_:forKey:)(v19, v5);
    v21[5] = v14;
    sub_100003304(&qword_10010C148);
    LOBYTE(v16) = 3;
    sub_10000FB24();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v19);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_100010D00((uint64_t)v19, (uint64_t)v24, &qword_10010C148);
    sub_10000FC44(v21, a2);
    sub_100004624(a1);
    return sub_10000FC78(v21);
  }
}

_QWORD *sub_100009514@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return PageMenuToolbarItem.init(from:)(a1, a2);
}

uint64_t sub_100009528(_QWORD *a1)
{
  return PageMenuToolbarItem.encode(to:)(a1);
}

GameOverlayUI::Margins_optional __swiftcall Margins.init(rawValue:)(Swift::String rawValue)
{
  Swift::OpaquePointer v1;

  v1._rawValue = &off_1000FAB70;
  return (GameOverlayUI::Margins_optional)sub_10000FF80(rawValue, v1);
}

uint64_t Margins.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100009590 + 4 * byte_1000C5A9D[a1]))(0x6974616D6F747561, 0xE900000000000063);
}

uint64_t sub_100009590()
{
  return 1701736302;
}

uint64_t sub_1000095A0()
{
  return 0x647261646E617473;
}

uint64_t sub_1000095B8()
{
  return 1701079415;
}

void sub_1000095C8(char *a1)
{
  sub_100075164(*a1);
}

void sub_1000095D4()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_100009624()
{
  uint64_t v1;

  String.hash(into:)(&v1, 1701736302, 0xE400000000000000);
  swift_bridgeObjectRelease(0xE400000000000000);
  return Hasher._finalize()();
}

void sub_100009684()
{
  __asm { BR              X10 }
}

uint64_t sub_1000096C4(uint64_t a1)
{
  String.hash(into:)(a1, 1701736302, 0xE400000000000000);
  return swift_bridgeObjectRelease(0xE400000000000000);
}

void sub_100009710(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_10000975C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 1701736302, 0xE400000000000000);
  swift_bridgeObjectRelease(0xE400000000000000);
  return Hasher._finalize()();
}

unint64_t sub_1000097BC@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &off_1000FAB70;
  result = sub_10000FF80(*a1, v3);
  *a2 = result;
  return result;
}

uint64_t sub_1000097F0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_100009824 + 4 * byte_1000C5AAD[*v0]))();
}

void sub_100009824(_QWORD *a1@<X8>)
{
  *a1 = 1701736302;
  a1[1] = 0xE400000000000000;
}

void sub_100009838(_QWORD *a1@<X8>)
{
  *a1 = 0x647261646E617473;
  a1[1] = 0xE800000000000000;
}

void sub_100009854(_QWORD *a1@<X8>)
{
  *a1 = 1701079415;
  a1[1] = 0xE400000000000000;
}

uint64_t sub_100009868(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100017EC8();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000098C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100017EC8();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t TitleDisplayMode.navigationTitleDisplayMode.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(void))((char *)&j___s7SwiftUI23ToolbarTitleDisplayModeV9automaticACvgZ + 4 * byte_1000C5AB1[a1]))();
}

GameOverlayUI::TitleDisplayMode_optional __swiftcall TitleDisplayMode.init(rawValue:)(Swift::String rawValue)
{
  Swift::OpaquePointer v1;

  v1._rawValue = &off_1000FABF0;
  return (GameOverlayUI::TitleDisplayMode_optional)sub_10000FF80(rawValue, v1);
}

uint64_t TitleDisplayMode.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100009990 + 4 * byte_1000C5AB5[a1]))(0x6974616D6F747561, 0xE900000000000063);
}

uint64_t sub_100009990()
{
  return 0x656772616CLL;
}

uint64_t sub_1000099A4()
{
  return 0x614C656E696C6E69;
}

uint64_t sub_1000099C4()
{
  return 0x656E696C6E69;
}

void sub_1000099D8(char *a1)
{
  sub_10007596C(*a1);
}

void sub_1000099E4()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_100009A34()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x656772616CLL, 0xE500000000000000);
  swift_bridgeObjectRelease(0xE500000000000000);
  return Hasher._finalize()();
}

void sub_100009AA4()
{
  __asm { BR              X10 }
}

uint64_t sub_100009AE4(uint64_t a1)
{
  String.hash(into:)(a1, 0x656772616CLL, 0xE500000000000000);
  return swift_bridgeObjectRelease(0xE500000000000000);
}

void sub_100009B40(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_100009B8C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x656772616CLL, 0xE500000000000000);
  swift_bridgeObjectRelease(0xE500000000000000);
  return Hasher._finalize()();
}

unint64_t sub_100009BFC@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &off_1000FABF0;
  result = sub_10000FF80(*a1, v3);
  *a2 = result;
  return result;
}

uint64_t sub_100009C30()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_100009C64 + 4 * byte_1000C5AC5[*v0]))();
}

void sub_100009C64(_QWORD *a1@<X8>)
{
  *a1 = 0x656772616CLL;
  a1[1] = 0xE500000000000000;
}

void sub_100009C7C(_QWORD *a1@<X8>)
{
  *a1 = 0x614C656E696C6E69;
  a1[1] = 0xEB00000000656772;
}

void sub_100009CA0(_QWORD *a1@<X8>)
{
  *a1 = 0x656E696C6E69;
  a1[1] = 0xE600000000000000;
}

uint64_t sub_100009CB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100017E84();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100009D14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100017E84();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100009D60()
{
  return 1701667182;
}

uint64_t sub_100009D74(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001004C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100009D9C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001004C();
  return CodingKey.debugDescription.getter(a1, v2);
}

BOOL sub_100009DC4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int sub_100009DDC()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int sub_100009E20(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_100009E60()
{
  _BYTE *v0;

  if (*v0)
    return 0x79536D6574737973;
  else
    return 0x6D49656C646E7562;
}

uint64_t sub_100009EAC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100010090(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100009ED0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10000FFC4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100009EF8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10000FFC4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100009F20(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100010008();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100009F48(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100010008();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ImageProviding.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v28;
  char v29;

  v26 = a3;
  v27 = a4;
  v25 = a2;
  v5 = sub_100003304(&qword_10010C1A0);
  v23 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003304(&qword_10010C1A8);
  v22 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100003304(&qword_10010C1B0);
  v24 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1[3];
  v14 = a1[4];
  sub_100003C28(a1, v15);
  v16 = sub_10000FFC4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ImageProviding.CodingKeys, &type metadata for ImageProviding.CodingKeys, v16, v15, v14);
  if ((v27 & 1) != 0)
  {
    v29 = 1;
    v19 = sub_100010008();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for ImageProviding.SystemSymbolCodingKeys, &v29, v11, &type metadata for ImageProviding.SystemSymbolCodingKeys, v19);
    KeyedEncodingContainer.encode(_:forKey:)(v25, v26, v20, v5);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v5);
  }
  else
  {
    v28 = 0;
    v17 = sub_10001004C();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for ImageProviding.BundleImageCodingKeys, &v28, v11, &type metadata for ImageProviding.BundleImageCodingKeys, v17);
    KeyedEncodingContainer.encode(_:forKey:)(v25, v26, v18, v8);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v10, v8);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v13, v11);
}

uint64_t ImageProviding.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = sub_1000101B0(a1);
  if (v1)
    return v3;
  return result;
}

uint64_t sub_10000A1B0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  char v6;

  result = sub_1000101B0(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 16) = v6 & 1;
  }
  return result;
}

uint64_t sub_10000A1E0(_QWORD *a1)
{
  uint64_t v1;

  return ImageProviding.encode(to:)(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(unsigned __int8 *)(v1 + 16));
}

GameOverlayUI::Shelf::Orientation_optional __swiftcall Shelf.Orientation.init(rawValue:)(Swift::String rawValue)
{
  Swift::OpaquePointer v1;

  v1._rawValue = &off_1000FAC70;
  return (GameOverlayUI::Shelf::Orientation_optional)sub_10000C38C(rawValue, v1);
}

uint64_t Shelf.Orientation.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6C61636974726576;
  else
    return 0x746E6F7A69726F68;
}

void sub_10000A244(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  _QWORD v24[6];
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v2 = sub_100003304(&qword_10010C840);
  v31 = *(_QWORD *)(v2 - 8);
  v32 = v2;
  __chkstk_darwin(v2);
  v30 = (char *)v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100003304(&qword_10010C848);
  v28 = *(_QWORD *)(v4 - 8);
  v29 = v4;
  __chkstk_darwin(v4);
  v27 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_100003304(&qword_10010C850);
  v24[5] = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v24[3] = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100003304(&qword_10010C858);
  v24[4] = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v24[2] = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for MediaArtwork(0);
  v33 = *(_QWORD *)(v8 - 8);
  v34 = v8;
  v9 = __chkstk_darwin(v8);
  v24[1] = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v24[0] = (char *)v24 - v11;
  v12 = sub_100003304(&qword_10010C860);
  __chkstk_darwin(v12);
  v13 = type metadata accessor for Shelf.Presentation.HeaderIconType(0);
  __chkstk_darwin(v13);
  v15 = (char *)v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100003304(&qword_10010C868);
  v17 = *(_QWORD *)(v16 - 8);
  v36 = v16;
  v37 = v17;
  __chkstk_darwin(v16);
  v19 = (char *)v24 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = a1[3];
  v20 = a1[4];
  sub_100003C28(a1, v21);
  v22 = sub_1000177E0();
  v35 = v19;
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Shelf.Presentation.HeaderIconType.CodingKeys, &type metadata for Shelf.Presentation.HeaderIconType.CodingKeys, v22, v21, v20);
  sub_100007878(v38, (uint64_t)v15, type metadata accessor for Shelf.Presentation.HeaderIconType);
  v23 = (char *)sub_10000A4FC + 4 * byte_1000C5AC9[swift_getEnumCaseMultiPayload(v15, v13)];
  __asm { BR              X10 }
}

uint64_t sub_10000A4FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *v2;
  v6 = v2[1];
  *(_BYTE *)(v4 - 69) = 0;
  v7 = sub_100017934();
  v8 = *(_QWORD *)(v4 - 112);
  v9 = *(_QWORD *)(v4 - 128);
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for Shelf.Presentation.HeaderIconType.SymbolCodingKeys, v4 - 69, v8, &type metadata for Shelf.Presentation.HeaderIconType.SymbolCodingKeys, v7);
  KeyedEncodingContainer.encode(_:forKey:)(v5, v6, v10, v0);
  swift_bridgeObjectRelease(v6);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v3, v0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 104) + 8))(v9, v8);
}

uint64_t sub_10000A804@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v43[5];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  char *v65;

  v62 = a2;
  v61 = sub_100003304(&qword_10010C8A8);
  v52 = *(_QWORD *)(v61 - 8);
  __chkstk_darwin(v61);
  v57 = (char *)v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = sub_100003304(&qword_10010C8B0);
  v51 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v56 = (char *)v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_100003304(&qword_10010C8B8);
  v50 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v55 = (char *)v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003304(&qword_10010C8C0);
  v45 = *(_QWORD *)(v6 - 8);
  v46 = v6;
  __chkstk_darwin(v6);
  v54 = (char *)v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = sub_100003304(&qword_10010C8C8);
  v49 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v53 = (char *)v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003304(&qword_10010C8D0);
  v58 = *(_QWORD *)(v9 - 8);
  v59 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = type metadata accessor for Shelf.Presentation.HeaderIconType(0);
  v12 = __chkstk_darwin(v63);
  v43[4] = (char *)v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)v43 - v15;
  v17 = __chkstk_darwin(v14);
  v19 = (char *)v43 - v18;
  v20 = __chkstk_darwin(v17);
  v22 = (char *)v43 - v21;
  v23 = __chkstk_darwin(v20);
  v25 = (char *)v43 - v24;
  __chkstk_darwin(v23);
  v27 = (char *)v43 - v26;
  v28 = a1[3];
  v29 = a1[4];
  v64 = a1;
  sub_100003C28(a1, v28);
  v30 = sub_1000177E0();
  v60 = v11;
  v31 = v65;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Shelf.Presentation.HeaderIconType.CodingKeys, &type metadata for Shelf.Presentation.HeaderIconType.CodingKeys, v30, v28, v29);
  if (!v31)
  {
    v43[0] = v19;
    v43[1] = v25;
    v43[2] = v22;
    v43[3] = v16;
    v65 = v27;
    v33 = v59;
    v32 = v60;
    v34 = KeyedDecodingContainer.allKeys.getter(v59);
    v35 = v34;
    if (*(_QWORD *)(v34 + 16) == 1)
      __asm { BR              X10 }
    v36 = type metadata accessor for DecodingError(0);
    swift_allocError(v36, &protocol witness table for DecodingError, 0, 0);
    v37 = v35;
    v39 = v38;
    sub_100003304(&qword_10010BFA0);
    *v39 = v63;
    v40 = KeyedDecodingContainer.codingPath.getter(v33);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v40, 0xD00000000000002BLL, 0x80000001000CF850, 0);
    v41 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v36 - 8) + 104))(v39, enum case for DecodingError.typeMismatch(_:), v36);
    swift_willThrow(v41);
    swift_bridgeObjectRelease(v37);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v32, v33);
  }
  return sub_100004624(v64);
}

uint64_t sub_10000B100(char *a1, char *a2)
{
  return sub_1000754B8(*a1, *a2);
}

Swift::Int sub_10000B10C()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x6C61636974726576;
  else
    v2 = 0x746E6F7A69726F68;
  if (v1)
    v3 = 0xE800000000000000;
  else
    v3 = 0xEA00000000006C61;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_10000B190(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x6C61636974726576;
  else
    v2 = 0x746E6F7A69726F68;
  if (*v1)
    v3 = 0xE800000000000000;
  else
    v3 = 0xEA00000000006C61;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_10000B1F0(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x6C61636974726576;
  else
    v3 = 0x746E6F7A69726F68;
  if (v2)
    v4 = 0xE800000000000000;
  else
    v4 = 0xEA00000000006C61;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_10000B270@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1000FAC70;
  return sub_10000C560(v2, a1, a2);
}

void sub_10000B27C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x746E6F7A69726F68;
  if (*v1)
    v2 = 0x6C61636974726576;
  v3 = 0xEA00000000006C61;
  if (*v1)
    v3 = 0xE800000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_10000B2C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100017E40();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10000B31C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100017E40();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10000B368()
{
  return 0x6B726F77747261;
}

uint64_t sub_10000B384(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100017868();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10000B3AC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100017868();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10000B3D4()
{
  return 0x6D614E6567616D69;
}

uint64_t sub_10000B3F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x6D614E6567616D69 && a2 == 0xE900000000000065)
  {
    result = swift_bridgeObjectRelease(0xE900000000000065);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6D614E6567616D69, 0xE900000000000065, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_10000B490(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100017824();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10000B4B8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100017824();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10000B4E0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10000B50C + 4 * byte_1000C5AD3[*v0]))(0x6C6F626D7973, 0xE600000000000000);
}

uint64_t sub_10000B50C()
{
  return 0x6E6F6349656D6167;
}

uint64_t sub_10000B524()
{
  return 0x7641726579616C70;
}

uint64_t sub_10000B544()
{
  return 0x6B726F77747261;
}

uint64_t sub_10000B55C()
{
  return 0x656C646E7562;
}

uint64_t sub_10000B56C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10001072C(a1, a2);
  *a3 = result;
  return result;
}

void sub_10000B590(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_10000B59C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000177E0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10000B5C4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000177E0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10000B5EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x6B726F77747261 && a2 == 0xE700000000000000)
  {
    result = swift_bridgeObjectRelease(0xE700000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6B726F77747261, 0xE700000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_10000B680(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000178F0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10000B6A8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000178F0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10000B6D0()
{
  return 0x6C706D65546C7275;
}

uint64_t sub_10000B6F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x6C706D65546C7275 && a2 == 0xEB00000000657461)
  {
    result = swift_bridgeObjectRelease(0xEB00000000657461);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6C706D65546C7275, 0xEB00000000657461, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_10000B79C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000178AC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10000B7C4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000178AC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10000B7EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 1701667182 && a2 == 0xE400000000000000)
  {
    result = swift_bridgeObjectRelease(0xE400000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(1701667182, 0xE400000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_10000B870(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100017934();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10000B898(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100017934();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10000B8C0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10000A804(a1, a2);
}

void sub_10000B8D4(_QWORD *a1)
{
  sub_10000A244(a1);
}

uint64_t sub_10000B8E8(char *a1, unsigned __int8 *a2)
{
  return sub_1000753C0(*a1, *a2);
}

Swift::Int sub_10000B8F4()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6, 0);
  v2 = 0x7265746E6563;
  if (v1 != 1)
    v2 = 0x6D6F74746F62;
  if (v1)
    v3 = v2;
  else
    v3 = 7368564;
  if (v1)
    v4 = 0xE600000000000000;
  else
    v4 = 0xE300000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_10000B984(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = 0x7265746E6563;
  if (*v1 != 1)
    v2 = 0x6D6F74746F62;
  if (*v1)
    v3 = v2;
  else
    v3 = 7368564;
  if (*v1)
    v4 = 0xE600000000000000;
  else
    v4 = 0xE300000000000000;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v4);
}

Swift::Int sub_10000B9F0(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  v3 = 0x7265746E6563;
  if (v2 != 1)
    v3 = 0x6D6F74746F62;
  if (v2)
    v4 = v3;
  else
    v4 = 7368564;
  if (v2)
    v5 = 0xE600000000000000;
  else
    v5 = 0xE300000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

unint64_t sub_10000BA7C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &off_1000FACC0;
  result = sub_100010C30(*a1, v3);
  *a2 = result;
  return result;
}

void sub_10000BAB0(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v2 = *v1;
  v3 = 0xE300000000000000;
  v4 = 0x7265746E6563;
  if (v2 != 1)
    v4 = 0x6D6F74746F62;
  v5 = v2 == 0;
  if (*v1)
    v6 = v4;
  else
    v6 = 7368564;
  if (!v5)
    v3 = 0xE600000000000000;
  *a1 = v6;
  a1[1] = v3;
}

uint64_t sub_10000BB00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100017978();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10000BB5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100017978();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10000BBA8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10000BBE0 + 4 * byte_1000C5AD8[*v0]))(0x7461746E6569726FLL, 0xEB000000006E6F69);
}

uint64_t sub_10000BBE0()
{
  return 1852793705;
}

uint64_t sub_10000BBF0()
{
  return 0x67696C416E6F6369;
}

uint64_t sub_10000BC14()
{
  return 0x656C746974;
}

uint64_t sub_10000BC28()
{
  return 0x6974627553706F74;
}

uint64_t sub_10000BC48()
{
  return 0x75536D6F74746F62;
}

uint64_t sub_10000BC6C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100010950(a1, a2);
  *a3 = result;
  return result;
}

void sub_10000BC90(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_10000BC9C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100010574();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10000BCC4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100010574();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Shelf.Presentation.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  _BYTE v33[2];
  char v34;

  v3 = v1;
  v5 = sub_100003304(&qword_10010C1D0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100003C28(a1, v9);
  v11 = sub_100010574();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Shelf.Presentation.CodingKeys, &type metadata for Shelf.Presentation.CodingKeys, v11, v9, v10);
  v34 = *v3;
  v33[1] = 0;
  sub_1000105B8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v34);
  if (!v2)
  {
    v12 = (int *)type metadata accessor for Shelf.Presentation(0);
    v13 = &v3[v12[5]];
    v33[0] = 1;
    v14 = type metadata accessor for Shelf.Presentation.HeaderIconType(0);
    v15 = sub_1000035B4(&qword_10010C1E8, type metadata accessor for Shelf.Presentation.HeaderIconType, (uint64_t)&unk_1000C7504);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v13, v33, v5, v14, v15);
    v32 = v3[v12[6]];
    v31 = 2;
    v16 = sub_100010624();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v32, &v31, v5, &type metadata for Shelf.Presentation.HeaderIconAlignment, v16);
    v17 = (uint64_t *)&v3[v12[7]];
    v18 = *v17;
    v19 = v17[1];
    v30 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v18, v19, &v30, v5);
    v20 = (uint64_t *)&v3[v12[8]];
    v21 = *v20;
    v22 = v20[1];
    v29 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v21, v22, &v29, v5);
    v23 = (uint64_t *)&v3[v12[9]];
    v24 = *v23;
    v25 = v23[1];
    v28 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v24, v25, &v28, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t Shelf.Presentation.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t *v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  _BYTE *v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  _BYTE *v47;
  char *v48;
  _QWORD *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char v54;
  char v55;
  _BYTE v56[2];
  _BYTE v57[2];
  uint64_t v58;

  v44 = a2;
  v3 = sub_100003304(&qword_10010C1F8);
  __chkstk_darwin(v3);
  v5 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_100003304(&qword_10010C200);
  v6 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (int *)type metadata accessor for Shelf.Presentation(0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (uint64_t)&v12[*(int *)(v10 + 20)];
  v14 = type metadata accessor for Shelf.Presentation.HeaderIconType(0);
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56);
  v51 = v13;
  v15(v13, 1, 1, v14);
  v16 = v9[6];
  v12[v16] = 3;
  v17 = &v12[v9[8]];
  *(_QWORD *)v17 = 0;
  *((_QWORD *)v17 + 1) = 0;
  v49 = a1;
  v50 = v17;
  v46 = v9;
  v47 = v12;
  v18 = &v12[v9[9]];
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = 0;
  v48 = v18;
  v20 = a1[3];
  v19 = a1[4];
  sub_100003C28(a1, v20);
  v21 = sub_100010574();
  v22 = v52;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Shelf.Presentation.CodingKeys, &type metadata for Shelf.Presentation.CodingKeys, v21, v20, v19);
  if (v22)
  {
    v25 = v48;
    v27 = v50;
    v26 = v51;
    sub_100004624(v49);
    sub_100010ED0(v26, &qword_10010C1F8);
    swift_bridgeObjectRelease(*((_QWORD *)v27 + 1));
    return swift_bridgeObjectRelease(*((_QWORD *)v25 + 1));
  }
  else
  {
    v43 = v16;
    v52 = v6;
    v57[1] = 0;
    sub_100010668();
    v23 = v45;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v58);
    *v47 = v58;
    v57[0] = 1;
    v24 = sub_1000035B4(&qword_10010C210, type metadata accessor for Shelf.Presentation.HeaderIconType, (uint64_t)&unk_1000C74B4);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v14, v57, v23, v14, v24);
    sub_100010D00((uint64_t)v5, v51, &qword_10010C1F8);
    v56[0] = 2;
    v28 = sub_1000106AC();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Shelf.Presentation.HeaderIconAlignment, v56, v23, &type metadata for Shelf.Presentation.HeaderIconAlignment, v28);
    v29 = (uint64_t *)v50;
    v30 = v47;
    v47[v43] = v56[1];
    v55 = 3;
    v31 = KeyedDecodingContainer.decode(_:forKey:)(&v55, v45);
    v32 = (uint64_t *)&v30[v46[7]];
    *v32 = v31;
    v32[1] = v33;
    v54 = 4;
    v34 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v54, v45);
    v36 = v35;
    swift_bridgeObjectRelease(v29[1]);
    *v29 = v34;
    v29[1] = v36;
    v53 = 5;
    v37 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v53, v45);
    v39 = v38;
    (*(void (**)(char *, uint64_t))(v52 + 8))(v8, v45);
    v40 = (uint64_t *)v48;
    swift_bridgeObjectRelease(*((_QWORD *)v48 + 1));
    *v40 = v37;
    v40[1] = v39;
    v41 = v47;
    sub_100007878((uint64_t)v47, v44, type metadata accessor for Shelf.Presentation);
    sub_100004624(v49);
    return sub_1000106F0((uint64_t)v41, type metadata accessor for Shelf.Presentation);
  }
}

uint64_t sub_10000C358@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Shelf.Presentation.init(from:)(a1, a2);
}

uint64_t sub_10000C36C(_QWORD *a1)
{
  return Shelf.Presentation.encode(to:)(a1);
}

GameOverlayUI::Shelf::Visibility_optional __swiftcall Shelf.Visibility.init(rawValue:)(Swift::String rawValue)
{
  Swift::OpaquePointer v1;

  v1._rawValue = &off_1000FAD28;
  return (GameOverlayUI::Shelf::Visibility_optional)sub_10000C38C(rawValue, v1);
}

uint64_t sub_10000C38C(Swift::String string, Swift::OpaquePointer cases)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  unsigned int v6;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease(object);
  if (v5 == 1)
    v6 = 1;
  else
    v6 = 2;
  if (v5)
    return v6;
  else
    return 0;
}

uint64_t Shelf.Visibility.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6E776F6873;
  else
    return 0x6E6564646968;
}

uint64_t sub_10000C408(char *a1, char *a2)
{
  return sub_100075560(*a1, *a2);
}

Swift::Int sub_10000C414()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x6E776F6873;
  else
    v2 = 0x6E6564646968;
  if (v1)
    v3 = 0xE500000000000000;
  else
    v3 = 0xE600000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_10000C48C(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x6E776F6873;
  else
    v2 = 0x6E6564646968;
  if (*v1)
    v3 = 0xE500000000000000;
  else
    v3 = 0xE600000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_10000C4E0(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x6E776F6873;
  else
    v3 = 0x6E6564646968;
  if (v2)
    v4 = 0xE500000000000000;
  else
    v4 = 0xE600000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_10000C554@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1000FAD28;
  return sub_10000C560(v2, a1, a2);
}

uint64_t sub_10000C560@<X0>(Swift::OpaquePointer cases@<0:X3>, uint64_t *a2@<X0>, char *a3@<X8>)
{
  Swift::String v4;
  void *v5;
  Swift::Int v6;
  uint64_t result;
  char v8;

  v4._countAndFlagsBits = *a2;
  v5 = (void *)a2[1];
  v4._object = v5;
  v6 = _findStringSwitchCase(cases:string:)(cases, v4);
  result = swift_bridgeObjectRelease(v5);
  if (v6 == 1)
    v8 = 1;
  else
    v8 = 2;
  if (!v6)
    v8 = 0;
  *a3 = v8;
  return result;
}

void sub_10000C5B8(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x6E6564646968;
  if (*v1)
    v2 = 0x6E776F6873;
  v3 = 0xE600000000000000;
  if (*v1)
    v3 = 0xE500000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_10000C5F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100017DFC();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10000C64C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100017DFC();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

GameOverlayUI::Shelf::AccessoryType_optional __swiftcall Shelf.AccessoryType.init(rawValue:)(Swift::String rawValue)
{
  Swift::OpaquePointer v1;

  v1._rawValue = &off_1000FAD78;
  return (GameOverlayUI::Shelf::AccessoryType_optional)sub_100010C30(rawValue, v1);
}

uint64_t Shelf.AccessoryType.rawValue.getter(char a1)
{
  if (!a1)
    return 0x654D656461637261;
  if (a1 == 1)
    return 0x756E654D656D6167;
  return 0xD000000000000011;
}

uint64_t sub_10000C714(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1000752A8(*a1, *a2);
}

Swift::Int sub_10000C720()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0xE800000000000000;
  v3 = 0x756E654D656D6167;
  if (v1 != 1)
  {
    v3 = 0xD000000000000011;
    v2 = 0x80000001000CF3D0;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x654D656461637261;
  if (v1)
    v5 = v2;
  else
    v5 = 0xEA0000000000756ELL;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_10000C7C8(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xE800000000000000;
  v3 = 0x756E654D656D6167;
  if (*v1 != 1)
  {
    v3 = 0xD000000000000011;
    v2 = 0x80000001000CF3D0;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x654D656461637261;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xEA0000000000756ELL;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_10000C84C(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0xE800000000000000;
  v4 = 0x756E654D656D6167;
  if (v2 != 1)
  {
    v4 = 0xD000000000000011;
    v3 = 0x80000001000CF3D0;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0x654D656461637261;
  if (v2)
    v6 = v3;
  else
    v6 = 0xEA0000000000756ELL;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

unint64_t sub_10000C8F0@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &off_1000FAD78;
  result = sub_100010C30(*a1, v3);
  *a2 = result;
  return result;
}

void sub_10000C924(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xEA0000000000756ELL;
  v4 = 0xE800000000000000;
  v5 = 0x756E654D656D6167;
  if (v2 != 1)
  {
    v5 = 0xD000000000000011;
    v4 = 0x80000001000CF3D0;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x654D656461637261;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_10000C98C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100017DB8();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10000C9E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100017DB8();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t Shelf.id.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10000CA40((uint64_t (*)(_QWORD))&type metadata accessor for ShelfID, a1);
}

uint64_t sub_10000CA40@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = a1(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, v2, v4);
}

uint64_t Shelf.id.setter(uint64_t a1)
{
  return sub_10000CA88(a1, (uint64_t (*)(_QWORD))&type metadata accessor for ShelfID);
}

uint64_t sub_10000CA88(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v4;

  v4 = a2(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v2, a1, v4);
}

uint64_t Shelf.impressionMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Shelf(0);
  return sub_100010CBC(v1 + *(int *)(v3 + 20), a1, &qword_10010C220);
}

uint64_t Shelf.impressionMetrics.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Shelf(0);
  return sub_100010D00(a1, v1 + *(int *)(v3 + 20), &qword_10010C220);
}

uint64_t (*Shelf.impressionMetrics.modify())()
{
  type metadata accessor for Shelf(0);
  return property wrapper backing initializer of Shelf.items;
}

uint64_t Shelf.presentation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Shelf(0);
  return sub_100007878(v1 + *(int *)(v3 + 24), a1, type metadata accessor for Shelf.Presentation);
}

uint64_t Shelf.presentation.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for Shelf(0) + 24);
  return sub_100010D44(a1, v3);
}

uint64_t (*Shelf.presentation.modify())()
{
  type metadata accessor for Shelf(0);
  return property wrapper backing initializer of Shelf.items;
}

uint64_t Shelf.visibility.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Shelf(0) + 28));
}

uint64_t Shelf.visibility.setter(char a1)
{
  uint64_t v1;
  char v2;
  uint64_t result;

  v2 = a1 & 1;
  result = type metadata accessor for Shelf(0);
  *(_BYTE *)(v1 + *(int *)(result + 28)) = v2;
  return result;
}

uint64_t (*Shelf.visibility.modify())()
{
  type metadata accessor for Shelf(0);
  return property wrapper backing initializer of Shelf.items;
}

uint64_t Shelf.accessoryType.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Shelf(0) + 32));
}

uint64_t Shelf.accessoryType.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Shelf(0);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*Shelf.accessoryType.modify())()
{
  type metadata accessor for Shelf(0);
  return property wrapper backing initializer of Shelf.items;
}

uint64_t Shelf.headerMargins.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Shelf(0) + 36));
}

uint64_t Shelf.headerMargins.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Shelf(0);
  *(_BYTE *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*Shelf.headerMargins.modify())()
{
  type metadata accessor for Shelf(0);
  return property wrapper backing initializer of Shelf.items;
}

uint64_t Shelf.margins.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Shelf(0) + 40));
}

uint64_t Shelf.margins.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Shelf(0);
  *(_BYTE *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*Shelf.margins.modify())()
{
  type metadata accessor for Shelf(0);
  return property wrapper backing initializer of Shelf.items;
}

uint64_t Shelf.items.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for Shelf(0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + *(int *)(v1 + 48)));
}

uint64_t Shelf.items.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for Shelf(0) + 48);
  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + v3));
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*Shelf.items.modify())()
{
  type metadata accessor for Shelf(0);
  return property wrapper backing initializer of Shelf.items;
}

uint64_t sub_10000CE48(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10000CE70 + 4 * byte_1000C5ADE[a1]))(25705, 0xE200000000000000);
}

unint64_t sub_10000CE70()
{
  return 0xD000000000000011;
}

uint64_t sub_10000CE8C()
{
  return 0x61746E6573657270;
}

uint64_t sub_10000CEAC()
{
  return 0x696C696269736976;
}

uint64_t sub_10000CEC8()
{
  return 0x726F737365636361;
}

uint64_t sub_10000CEEC()
{
  return 0x614D726564616568;
}

uint64_t sub_10000CF10()
{
  return 0x736E696772616DLL;
}

uint64_t sub_10000CF28()
{
  return 0x676553656C746974;
}

uint64_t sub_10000CF44()
{
  return 0x736D657469;
}

uint64_t sub_10000CF58()
{
  unsigned __int8 *v0;

  return sub_10000CE48(*v0);
}

uint64_t sub_10000CF60@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000179BC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10000CF84(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100010D88();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10000CFAC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100010D88();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Shelf.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  v3 = v1;
  v5 = sub_100003304(&qword_10010C228);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100003C28(a1, v9);
  v11 = sub_100010D88();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Shelf.CodingKeys, &type metadata for Shelf.CodingKeys, v11, v9, v10);
  LOBYTE(v21) = 0;
  type metadata accessor for ShelfID(0);
  sub_1000035B4(&qword_10010C238, (uint64_t (*)(uint64_t))&type metadata accessor for ShelfID, (uint64_t)&protocol conformance descriptor for ShelfID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3);
  if (!v2)
  {
    v12 = (int *)type metadata accessor for Shelf(0);
    v13 = v3 + v12[5];
    LOBYTE(v21) = 1;
    v14 = type metadata accessor for ImpressionMetrics(0);
    v15 = sub_1000035B4(&qword_10010C240, (uint64_t (*)(uint64_t))&type metadata accessor for ImpressionMetrics, (uint64_t)&protocol conformance descriptor for ImpressionMetrics);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v13, &v21, v5, v14, v15);
    v16 = v3 + v12[6];
    LOBYTE(v21) = 2;
    type metadata accessor for Shelf.Presentation(0);
    sub_1000035B4(&qword_10010C248, type metadata accessor for Shelf.Presentation, (uint64_t)&protocol conformance descriptor for Shelf.Presentation);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v16);
    LOBYTE(v21) = *(_BYTE *)(v3 + v12[7]);
    v22 = 3;
    sub_100010DCC();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v21);
    LOBYTE(v21) = *(_BYTE *)(v3 + v12[8]);
    v22 = 4;
    v17 = sub_100010E10();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v21, &v22, v5, &type metadata for Shelf.AccessoryType, v17);
    LOBYTE(v21) = *(_BYTE *)(v3 + v12[9]);
    v22 = 5;
    v18 = sub_100006E98();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v21, &v22, v5, &type metadata for Margins, v18);
    LOBYTE(v21) = *(_BYTE *)(v3 + v12[10]);
    v22 = 6;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v21);
    v19 = v3 + v12[11];
    LOBYTE(v21) = 7;
    sub_100003304(&qword_10010C148);
    sub_10000F838();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v19);
    v21 = *(_QWORD *)(v3 + v12[12]);
    v22 = 8;
    sub_100003304(&qword_10010C260);
    sub_100010E54();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v21);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t Shelf.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  void (*v28)(char *, _QWORD *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  unint64_t v35;
  unint64_t v36;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  char *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  _OWORD v55[2];
  uint64_t v56;
  uint64_t v57;

  v39 = a2;
  v43 = type metadata accessor for Shelf.Presentation(0);
  __chkstk_darwin(v43);
  v42 = (int **)((char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = sub_100003304(&qword_10010C220);
  __chkstk_darwin(v4);
  v44 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ShelfID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v47 = v6;
  v48 = v7;
  __chkstk_darwin(v6);
  v45 = (int **)((char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v50 = sub_100003304(&qword_10010C280);
  v46 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (int *)type metadata accessor for Shelf(0);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (uint64_t)&v14[*(int *)(v12 + 20)];
  v16 = type metadata accessor for ImpressionMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  v41 = v11[8];
  v14[v41] = 3;
  v40 = v11[9];
  v14[v40] = 4;
  v17 = (uint64_t)&v14[v11[11]];
  v56 = 0;
  memset(v55, 0, sizeof(v55));
  v54 = 0;
  v52 = 0u;
  v53 = 0u;
  sub_10000F768((uint64_t)v55, (uint64_t)&v52);
  v18 = v53;
  *(_OWORD *)v17 = v52;
  *(_OWORD *)(v17 + 16) = v18;
  v51 = v17;
  *(_QWORD *)(v17 + 32) = v54;
  sub_100010ED0((uint64_t)v55, &qword_10010C128);
  v19 = a1[3];
  v20 = a1[4];
  sub_100003C28(a1, v19);
  v21 = sub_100010D88();
  v49 = v10;
  v22 = v57;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Shelf.CodingKeys, &type metadata for Shelf.CodingKeys, v21, v19, v20);
  if (v22)
  {
    sub_100004624(a1);
    sub_100010ED0(v15, &qword_10010C220);
    return sub_100010ED0(v51, &qword_10010C148);
  }
  else
  {
    v23 = v16;
    v24 = (uint64_t)v44;
    v57 = v15;
    v38 = v11;
    v25 = v48;
    LOBYTE(v55[0]) = 0;
    sub_1000035B4(&qword_10010C288, (uint64_t (*)(uint64_t))&type metadata accessor for ShelfID, (uint64_t)&protocol conformance descriptor for ShelfID);
    v26 = v45;
    v27 = v47;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v45);
    v28 = *(void (**)(char *, _QWORD *, uint64_t))(v25 + 32);
    v29 = (uint64_t)v14;
    v28(v14, v26, v27);
    LOBYTE(v55[0]) = 1;
    v30 = sub_1000035B4(&qword_10010C290, (uint64_t (*)(uint64_t))&type metadata accessor for ImpressionMetrics, (uint64_t)&protocol conformance descriptor for ImpressionMetrics);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v23, v55, v50, v23, v30);
    sub_100010D00(v24, v57, &qword_10010C220);
    LOBYTE(v55[0]) = 2;
    sub_1000035B4(&qword_10010C298, type metadata accessor for Shelf.Presentation, (uint64_t)&protocol conformance descriptor for Shelf.Presentation);
    v31 = v42;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v42);
    v32 = v51;
    v33 = (uint64_t)v31;
    v34 = v38;
    sub_100010F0C(v33, v29 + v38[6], type metadata accessor for Shelf.Presentation);
    LOBYTE(v52) = 3;
    sub_100010F50();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v55);
    *(_BYTE *)(v29 + v34[7]) = v55[0];
    LOBYTE(v52) = 4;
    v35 = sub_100010F94();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Shelf.AccessoryType, &v52, v50, &type metadata for Shelf.AccessoryType, v35);
    *(_BYTE *)(v29 + v41) = v55[0];
    LOBYTE(v52) = 5;
    v36 = sub_1000077F0();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Margins, &v52, v50, &type metadata for Margins, v36);
    *(_BYTE *)(v29 + v40) = v55[0];
    LOBYTE(v52) = 6;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v55);
    *(_BYTE *)(v29 + v38[10]) = v55[0];
    sub_100003304(&qword_10010C148);
    LOBYTE(v52) = 7;
    sub_10000FB24();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v55);
    sub_100010D00((uint64_t)v55, v32, &qword_10010C148);
    sub_100003304(&qword_10010C260);
    LOBYTE(v52) = 8;
    sub_100010FD8();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v55);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v49, v50);
    *(_QWORD *)(v29 + v38[12]) = *(_QWORD *)&v55[0];
    sub_100007878(v29, v39, type metadata accessor for Shelf);
    sub_100004624(a1);
    return sub_1000106F0(v29, type metadata accessor for Shelf);
  }
}

uint64_t sub_10000DA10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100007878(v2 + *(int *)(a1 + 24), a2, type metadata accessor for Shelf.Presentation);
}

uint64_t sub_10000DA38(uint64_t a1)
{
  uint64_t v1;

  return swift_bridgeObjectRetain(*(_QWORD *)(v1 + *(int *)(a1 + 48)));
}

uint64_t sub_10000DA44@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Shelf.init(from:)(a1, a2);
}

uint64_t sub_10000DA58(_QWORD *a1)
{
  return Shelf.encode(to:)(a1);
}

uint64_t sub_10000DA6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100010CBC(v2 + *(int *)(a1 + 20), a2, &qword_10010C220);
}

uint64_t sub_10000DA94@<X0>(uint64_t a1@<X8>)
{
  return sub_10000DAA0((uint64_t (*)(_QWORD))&type metadata accessor for ShelfID, a1);
}

uint64_t sub_10000DAA0@<X0>(uint64_t (*a1)(_QWORD)@<X2>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = a1(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, v2, v4);
}

uint64_t sub_10000DAD8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x65526F546C6C7570 && a2 == 0xED00006873657266)
  {
    v5 = 0xED00006873657266;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65526F546C6C7570, 0xED00006873657266, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7261657070416E6FLL && a2 == 0xE800000000000000)
  {
    v7 = 0xE800000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7261657070416E6FLL, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x726765726F466E6FLL && a2 == 0xEC000000646E756FLL)
  {
    swift_bridgeObjectRelease(0xEC000000646E756FLL);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x726765726F466E6FLL, 0xEC000000646E756FLL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_10000DC68(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  _QWORD *v38;
  uint64_t v39;
  char v40;
  char v41;

  v33 = sub_100003304(&qword_10010C820);
  v35 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v37 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_100003304(&qword_10010C828);
  v34 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v36 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100003304(&qword_10010C830);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003304(&qword_10010C838);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  v38 = a1;
  sub_100003C28(a1, v12);
  v14 = sub_1000176D0();
  v15 = v39;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Page.RefreshCondition.CodingKeys, &type metadata for Page.RefreshCondition.CodingKeys, v14, v12, v13);
  if (!v15)
  {
    v31 = v5;
    v39 = v4;
    v16 = v36;
    v17 = v9;
    v18 = KeyedDecodingContainer.allKeys.getter(v8);
    v19 = v18;
    if (*(_QWORD *)(v18 + 16) == 1)
    {
      if (*(_BYTE *)(v18 + 32))
      {
        v41 = 1;
        v20 = sub_100017758();
        v21 = KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for Page.RefreshCondition.OnAppearCodingKeys, &v41, v8, &type metadata for Page.RefreshCondition.OnAppearCodingKeys, v20);
        v29 = v32;
        v30 = KeyedDecodingContainer.decode(_:forKey:)(v21, v32);
        (*(void (**)(char *, uint64_t))(v34 + 8))(v16, v29);
        swift_bridgeObjectRelease(v19);
        (*(void (**)(char *, uint64_t))(v17 + 8))(v11, v8);
        v5 = *(_QWORD *)&v30;
      }
      else
      {
        v40 = 0;
        v27 = sub_10001779C();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for Page.RefreshCondition.PullToRefreshCodingKeys, &v40, v8, &type metadata for Page.RefreshCondition.PullToRefreshCodingKeys, v27);
        (*(void (**)(char *, uint64_t))(v31 + 8))(v7, v39);
        swift_bridgeObjectRelease(v19);
        (*(void (**)(char *, uint64_t))(v17 + 8))(v11, v8);
        v5 = 0;
      }
    }
    else
    {
      v5 = type metadata accessor for DecodingError(0);
      swift_allocError(v5, &protocol witness table for DecodingError, 0, 0);
      v22 = v19;
      v24 = v23;
      sub_100003304(&qword_10010BFA0);
      *v24 = &type metadata for Page.RefreshCondition;
      v25 = KeyedDecodingContainer.codingPath.getter(v8);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v25, 0xD00000000000002BLL, 0x80000001000CF850, 0);
      v26 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(v24, enum case for DecodingError.typeMismatch(_:), v5);
      swift_willThrow(v26);
      swift_bridgeObjectRelease(v22);
      (*(void (**)(char *, uint64_t))(v17 + 8))(v11, v8);
    }
  }
  sub_100004624(v38);
  return v5;
}

uint64_t sub_10000E100(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x6B726F77747261 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6B726F77747261, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7974696C617571 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease(0xE700000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7974696C617571, 0xE700000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_10000E1F0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;

  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7274654D65676170 && a2 == 0xEB00000000736369)
  {
    v7 = 0xEB00000000736369;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7274654D65676170, 0xEB00000000736369, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x656C746974 && a2 == 0xE500000000000000)
  {
    v8 = 0xE500000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x80000001000CF880)
  {
    v9 = 0x80000001000CF880;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001000CF880, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0xD000000000000011)
  {
    v10 = 0x80000001000CF8A0;
    if (a2 == 0x80000001000CF8A0)
      goto LABEL_31;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001000CF8A0, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if (a1 == 0x7365766C656873 && a2 == 0xE700000000000000)
  {
    v11 = 0xE700000000000000;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7365766C656873, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_37;
  }
  if (a1 == 0x736E696772616DLL && a2 == 0xE700000000000000)
  {
    v12 = 0xE700000000000000;
LABEL_43:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x736E696772616DLL, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_43;
  }
  if (a1 == 0x756F72676B636162 && a2 == 0xEA0000000000646ELL)
  {
    v13 = 0xEA0000000000646ELL;
LABEL_49:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x756F72676B636162, 0xEA0000000000646ELL, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_49;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x80000001000CF8C0)
  {
    swift_bridgeObjectRelease(0x80000001000CF8C0);
    return 8;
  }
  else
  {
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001000CF8C0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v14 & 1) != 0)
      return 8;
    else
      return 9;
  }
}

uint64_t sub_10000E588(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  char v7;

  if (a1 == 0xD000000000000013)
  {
    v4 = 0x80000001000CF8E0;
    if (a2 == 0x80000001000CF8E0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x80000001000CF8E0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x676E696C69617274 && a2 == 0xED0000736D657449)
  {
    v6 = 0xED0000736D657449;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x676E696C69617274, 0xED0000736D657449, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0x6974616D6F747561 && a2 == 0xEE00736D65744963)
  {
    swift_bridgeObjectRelease(0xEE00736D65744963);
    return 2;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6974616D6F747561, 0xEE00736D65744963, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_10000E720(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v3 = sub_100003304(&qword_10010C960);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_100003C28(a1, v7);
  v9 = sub_100007C78();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PageToolbarItemGroups.CodingKeys, &type metadata for PageToolbarItemGroups.CodingKeys, v9, v7, v8);
  if (v1)
  {
    sub_100004624(a1);
  }
  else
  {
    v10 = sub_100003304(&qword_10010C098);
    v15 = 0;
    v11 = sub_100006EDC(&qword_10010C968, &qword_10010C098, (void (*)(void))sub_100018054, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v10, &v15, v3, v10, v11);
    v7 = v16;
    v15 = 1;
    swift_bridgeObjectRetain(v16);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v10, &v15, v3, v10, v11);
    v15 = 2;
    v14 = v16;
    swift_bridgeObjectRetain(v16);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v10, &v15, v3, v10, v11);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v13 = v16;
    swift_bridgeObjectRetain(v16);
    sub_100004624(a1);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v7);
  }
  return v7;
}

unint64_t sub_10000E998()
{
  unint64_t result;

  result = qword_10010C0B0;
  if (!qword_10010C0B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Circle, &type metadata for Circle);
    atomic_store(result, (unint64_t *)&qword_10010C0B0);
  }
  return result;
}

unint64_t sub_10000E9DC()
{
  unint64_t result;

  result = qword_10010C0E0;
  if (!qword_10010C0E0)
  {
    result = swift_getWitnessTable(&unk_1000C77FC, &type metadata for PageToolbarItem.Appearance.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C0E0);
  }
  return result;
}

uint64_t sub_10000EA20(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  v3 = *(_OWORD *)(a1 + 32);
  v4 = *(_OWORD *)(a1 + 48);
  v5 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 80) = v5;
  *(_OWORD *)(a2 + 32) = v3;
  *(_OWORD *)(a2 + 48) = v4;
  v6 = *(_OWORD *)(a1 + 96);
  v7 = *(_OWORD *)(a1 + 112);
  v8 = *(_OWORD *)(a1 + 128);
  *(_QWORD *)(a2 + 144) = *(_QWORD *)(a1 + 144);
  *(_OWORD *)(a2 + 112) = v7;
  *(_OWORD *)(a2 + 128) = v8;
  *(_OWORD *)(a2 + 96) = v6;
  return a2;
}

uint64_t sub_10000EA58(uint64_t a1)
{
  return *(_QWORD *)(a1 + 80) >> 62;
}

unint64_t sub_10000EA64()
{
  unint64_t result;

  result = qword_10010C0E8;
  if (!qword_10010C0E8)
  {
    result = swift_getWitnessTable(&unk_1000C77AC, &type metadata for PageToolbarItem.Appearance.MenuCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C0E8);
  }
  return result;
}

unint64_t sub_10000EAA8()
{
  unint64_t result;

  result = qword_10010C100;
  if (!qword_10010C100)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PageMenuToolbarItem, &type metadata for PageMenuToolbarItem);
    atomic_store(result, (unint64_t *)&qword_10010C100);
  }
  return result;
}

uint64_t sub_10000EAEC(uint64_t result)
{
  *(_QWORD *)(result + 80) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t sub_10000EAFC()
{
  unint64_t result;

  result = qword_10010C108;
  if (!qword_10010C108)
  {
    result = swift_getWitnessTable(&unk_1000C775C, &type metadata for PageToolbarItem.Appearance.ButtonCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C108);
  }
  return result;
}

unint64_t sub_10000EB40()
{
  unint64_t result;

  result = qword_10010C110;
  if (!qword_10010C110)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ImageProviding, &type metadata for ImageProviding);
    atomic_store(result, (unint64_t *)&qword_10010C110);
  }
  return result;
}

unint64_t sub_10000EB84()
{
  unint64_t result;

  result = qword_10010C118;
  if (!qword_10010C118)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PageToolbarItem.Appearance.ButtonBackgroundShape, &type metadata for PageToolbarItem.Appearance.ButtonBackgroundShape);
    atomic_store(result, (unint64_t *)&qword_10010C118);
  }
  return result;
}

unint64_t sub_10000EBC8()
{
  unint64_t result;

  result = qword_10010C120;
  if (!qword_10010C120)
  {
    result = swift_getWitnessTable(&unk_1000C770C, &type metadata for PageToolbarItem.Appearance.PlayerAvatarCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C120);
  }
  return result;
}

uint64_t sub_10000EC0C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x656C746974 && a2 == 0xE500000000000000)
  {
    v5 = 0xE500000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6567616D69 && a2 == 0xE500000000000000)
  {
    v7 = 0xE500000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6567616D69, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x756F72676B636162 && a2 == 0xEF6570616853646ELL)
  {
    swift_bridgeObjectRelease(0xEF6570616853646ELL);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x756F72676B636162, 0xEF6570616853646ELL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_10000ED74(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x7641726579616C70 && a2 == 0xEC00000072617461)
  {
    v5 = 0xEC00000072617461;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7641726579616C70, 0xEC00000072617461, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6E6F74747562 && a2 == 0xE600000000000000)
  {
    v7 = 0xE600000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F74747562, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 1970169197 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(1970169197, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_10000EEC8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x614E6C6F626D7973 && a2 == 0xEA0000000000656DLL)
  {
    v5 = 0xEA0000000000656DLL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x614E6C6F626D7973, 0xEA0000000000656DLL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 1954047348 && a2 == 0xE400000000000000)
  {
    v7 = 0xE400000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1954047348, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x736E6F6974706FLL && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease(0xE700000000000000);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x736E6F6974706FLL, 0xE700000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_10000F018@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  char v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  _QWORD *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  char v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  char v85;
  _BYTE v86[168];
  uint64_t v87;

  v60 = a2;
  v3 = sub_100003304(&qword_10010C920);
  v56 = *(_QWORD *)(v3 - 8);
  v57 = v3;
  __chkstk_darwin(v3);
  v62 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = sub_100003304(&qword_10010C928);
  v55 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59);
  v61 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = sub_100003304(&qword_10010C930);
  v6 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58);
  v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003304(&qword_10010C938);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  v63 = a1;
  sub_100003C28(a1, v14);
  v15 = sub_10000E9DC();
  v16 = v87;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PageToolbarItem.Appearance.CodingKeys, &type metadata for PageToolbarItem.Appearance.CodingKeys, v15, v14, v13);
  if (v16)
    return sub_100004624(v63);
  v87 = v6;
  v18 = v61;
  v17 = v62;
  v54 = v10;
  v19 = KeyedDecodingContainer.allKeys.getter(v9);
  v20 = v19;
  v21 = v9;
  if (*(_QWORD *)(v19 + 16) != 1)
  {
    v31 = type metadata accessor for DecodingError(0);
    swift_allocError(v31, &protocol witness table for DecodingError, 0, 0);
    v33 = v32;
    sub_100003304(&qword_10010BFA0);
    *v33 = &type metadata for PageToolbarItem.Appearance;
    v34 = KeyedDecodingContainer.codingPath.getter(v9);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v34, 0xD00000000000002BLL, 0x80000001000CF850, 0);
    v35 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v31 - 8) + 104))(v33, enum case for DecodingError.typeMismatch(_:), v31);
    swift_willThrow(v35);
    swift_bridgeObjectRelease(v20);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v12, v9);
    return sub_100004624(v63);
  }
  v22 = v54;
  if (*(_BYTE *)(v19 + 32))
  {
    if (*(_BYTE *)(v19 + 32) == 1)
    {
      LOBYTE(v75) = 1;
      v23 = sub_10000EAFC();
      v24 = v21;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for PageToolbarItem.Appearance.ButtonCodingKeys, &v75, v21, &type metadata for PageToolbarItem.Appearance.ButtonCodingKeys, v23);
      LOBYTE(v75) = 0;
      v25 = v18;
      v26 = v59;
      v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v75, v59);
      v29 = v28;
      v87 = v27;
      LOBYTE(v75) = 1;
      v30 = sub_100017FA8();
      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for ImageProviding, &v75, v26, &type metadata for ImageProviding, v30);
      v62 = v12;
      v53 = v24;
      v47 = v64;
      v48 = v65;
      v74 = 2;
      v49 = sub_100017FEC();
      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for PageToolbarItem.Appearance.ButtonBackgroundShape, &v74, v26, &type metadata for PageToolbarItem.Appearance.ButtonBackgroundShape, v49);
      (*(void (**)(char *, uint64_t))(v55 + 8))(v25, v26);
      swift_bridgeObjectRelease(v20);
      (*(void (**)(char *, uint64_t))(v54 + 8))(v62, v53);
      *(_QWORD *)&v75 = v87;
      *((_QWORD *)&v75 + 1) = v29;
      v76 = v47;
      LOBYTE(v77) = v48;
      BYTE1(v77) = v85;
      sub_100018030((uint64_t)&v75);
    }
    else
    {
      LOBYTE(v75) = 2;
      v39 = sub_10000EA64();
      v40 = v17;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for PageToolbarItem.Appearance.MenuCodingKeys, &v75, v21, &type metadata for PageToolbarItem.Appearance.MenuCodingKeys, v39);
      v53 = v21;
      LOBYTE(v75) = 0;
      v43 = v57;
      v44 = KeyedDecodingContainer.decode(_:forKey:)(&v75, v57);
      v46 = v45;
      LOBYTE(v75) = 1;
      v59 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v75, v43);
      v87 = v50;
      v61 = (char *)v44;
      sub_100003304(&qword_10010C0F0);
      v85 = 2;
      sub_100006EDC(&qword_10010C940, &qword_10010C0F0, (void (*)(void))sub_100017F50, (uint64_t)&protocol conformance descriptor for <A> [A]);
      KeyedDecodingContainer.decode<A>(_:forKey:)(&v64);
      (*(void (**)(char *, uint64_t))(v56 + 8))(v40, v43);
      swift_bridgeObjectRelease(v20);
      (*(void (**)(char *, uint64_t))(v54 + 8))(v12, v53);
      *(_QWORD *)&v75 = v61;
      *((_QWORD *)&v75 + 1) = v46;
      *(_QWORD *)&v76 = v59;
      *((_QWORD *)&v76 + 1) = v87;
      *(_QWORD *)&v77 = v64;
      sub_100017F94((uint64_t)&v75);
    }
    sub_10000EA20((uint64_t)&v75, (uint64_t)v86);
    v38 = v60;
  }
  else
  {
    LOBYTE(v75) = 0;
    v36 = sub_10000EBC8();
    v37 = v8;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for PageToolbarItem.Appearance.PlayerAvatarCodingKeys, &v75, v21, &type metadata for PageToolbarItem.Appearance.PlayerAvatarCodingKeys, v36);
    v38 = v60;
    v53 = v21;
    sub_100004644();
    v41 = v37;
    v42 = v58;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v75);
    (*(void (**)(char *, uint64_t))(v87 + 8))(v41, v42);
    swift_bridgeObjectRelease(v20);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v12, v53);
    v70 = v81;
    v71 = v82;
    v72 = v83;
    v73 = v84;
    v66 = v77;
    v67 = v78;
    v68 = v79;
    v69 = v80;
    v64 = v75;
    v65 = v76;
    sub_100018044((uint64_t)&v64);
    sub_10000EA20((uint64_t)&v64, (uint64_t)v86);
  }
  sub_100004624(v63);
  return sub_10000EA20((uint64_t)v86, v38);
}

uint64_t sub_10000F768(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003304(&qword_10010C128);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

unint64_t sub_10000F7B0()
{
  unint64_t result;

  result = qword_10010C138;
  if (!qword_10010C138)
  {
    result = swift_getWitnessTable(&unk_1000C76BC, &type metadata for PageToolbarItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C138);
  }
  return result;
}

unint64_t sub_10000F7F4()
{
  unint64_t result;

  result = qword_10010C140;
  if (!qword_10010C140)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PageToolbarItem.Appearance, &type metadata for PageToolbarItem.Appearance);
    atomic_store(result, (unint64_t *)&qword_10010C140);
  }
  return result;
}

unint64_t sub_10000F838()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010C150;
  if (!qword_10010C150)
  {
    v1 = sub_100006E54(&qword_10010C148);
    sub_100011054(&qword_10010C158, &qword_10010C160, (uint64_t)&protocol conformance descriptor for _CodeByKind_OrNil<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> DiscardOnError<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10010C150);
  }
  return result;
}

unint64_t sub_10000F8B4()
{
  unint64_t result;

  result = qword_10010C170;
  if (!qword_10010C170)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PageToolbarItem.Appearance, &type metadata for PageToolbarItem.Appearance);
    atomic_store(result, (unint64_t *)&qword_10010C170);
  }
  return result;
}

uint64_t sub_10000F8F8(uint64_t a1)
{
  sub_10000F958(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144));
  return a1;
}

uint64_t sub_10000F958(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  unint64_t v21;
  uint64_t result;

  v21 = a11 >> 62;
  if (a11 >> 62 == 2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a5);
    return swift_bridgeObjectRelease(a4);
  }
  else if ((_DWORD)v21 == 1)
  {
    swift_bridgeObjectRelease(a2);
    return sub_10000FB04(a3, a4, a5);
  }
  else if (!(_DWORD)v21)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(a8);
    swift_bridgeObjectRelease(a10);
    return sub_10000FAB4(a12, a13, a14, a15, a16, a17, a18, a19);
  }
  return result;
}

uint64_t sub_10000FAB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a6);
    return swift_bridgeObjectRelease(a8);
  }
  return result;
}

uint64_t sub_10000FB04(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255)
    return sub_10000FB1C(a1, a2);
  return a1;
}

uint64_t sub_10000FB1C(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(a2);
}

unint64_t sub_10000FB24()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010C178;
  if (!qword_10010C178)
  {
    v1 = sub_100006E54(&qword_10010C148);
    sub_100011054(&qword_10010C180, &qword_10010C160, (uint64_t)&protocol conformance descriptor for _CodeByKind_OrNil<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> DiscardOnError<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10010C178);
  }
  return result;
}

uint64_t sub_10000FBA0(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for PageToolbarItem(a2, a1);
  return a2;
}

_QWORD *sub_10000FBD4(_QWORD *a1)
{
  destroy for PageToolbarItem(a1);
  return a1;
}

unint64_t sub_10000FC00()
{
  unint64_t result;

  result = qword_10010C190;
  if (!qword_10010C190)
  {
    result = swift_getWitnessTable(&unk_1000C766C, &type metadata for PageMenuToolbarItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C190);
  }
  return result;
}

uint64_t sub_10000FC44(_QWORD *a1, uint64_t a2)
{
  initializeWithCopy for PageMenuToolbarItem(a2, a1);
  return a2;
}

_QWORD *sub_10000FC78(_QWORD *a1)
{
  destroy for PageMenuToolbarItem(a1);
  return a1;
}

uint64_t sub_10000FCA4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6E61726165707061 && a2 == 0xEA00000000006563)
  {
    v7 = 0xEA00000000006563;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E61726165707061, 0xEA00000000006563, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6575676573 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6575676573, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_10000FDE4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x656C746974 && a2 == 0xE500000000000000)
  {
    v7 = 0xE500000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x614E6C6F626D7973 && a2 == 0xEA0000000000656DLL)
  {
    v8 = 0xEA0000000000656DLL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x614E6C6F626D7973, 0xEA0000000000656DLL, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x6575676573 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6575676573, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

unint64_t sub_10000FF80(Swift::String string, Swift::OpaquePointer cases)
{
  void *object;
  Swift::String v3;
  unint64_t v5;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease(object);
  if (v5 >= 4)
    return 4;
  else
    return v5;
}

unint64_t sub_10000FFC4()
{
  unint64_t result;

  result = qword_10010C1B8;
  if (!qword_10010C1B8)
  {
    result = swift_getWitnessTable(&unk_1000C761C, &type metadata for ImageProviding.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C1B8);
  }
  return result;
}

unint64_t sub_100010008()
{
  unint64_t result;

  result = qword_10010C1C0;
  if (!qword_10010C1C0)
  {
    result = swift_getWitnessTable(&unk_1000C75CC, &type metadata for ImageProviding.SystemSymbolCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C1C0);
  }
  return result;
}

unint64_t sub_10001004C()
{
  unint64_t result;

  result = qword_10010C1C8;
  if (!qword_10010C1C8)
  {
    result = swift_getWitnessTable(&unk_1000C757C, &type metadata for ImageProviding.BundleImageCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C1C8);
  }
  return result;
}

uint64_t sub_100010090(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x6D49656C646E7562 && a2 == 0xEB00000000656761)
  {
    v5 = 0xEB00000000656761;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D49656C646E7562, 0xEB00000000656761, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x79536D6574737973 && a2 == 0xEC0000006C6F626DLL)
  {
    swift_bridgeObjectRelease(0xEC0000006C6F626DLL);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x79536D6574737973, 0xEC0000006C6F626DLL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1000101B0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  char v48;
  char v49;

  v45 = sub_100003304(&qword_10010C908);
  v43 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v44 = (char *)&v40 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100003304(&qword_10010C910);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003304(&qword_10010C918);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  v46 = a1;
  sub_100003C28(a1, v11);
  v13 = sub_10000FFC4();
  v14 = v47;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ImageProviding.CodingKeys, &type metadata for ImageProviding.CodingKeys, v13, v11, v12);
  if (!v14)
  {
    v40 = v4;
    v41 = v3;
    v15 = v44;
    v16 = v45;
    v47 = v8;
    v42 = v10;
    v17 = KeyedDecodingContainer.allKeys.getter(v7);
    v18 = v17;
    v19 = v7;
    if (*(_QWORD *)(v17 + 16) == 1)
    {
      if ((*(_BYTE *)(v17 + 32) & 1) != 0)
      {
        v49 = 1;
        v20 = sub_100010008();
        v21 = v15;
        v22 = v42;
        v36 = v16;
        v23 = KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for ImageProviding.SystemSymbolCodingKeys, &v49, v19, &type metadata for ImageProviding.SystemSymbolCodingKeys, v20);
        v4 = KeyedDecodingContainer.decode(_:forKey:)(v23, v16);
        (*(void (**)(char *, uint64_t))(v43 + 8))(v21, v36);
        swift_bridgeObjectRelease(v18);
        (*(void (**)(char *, uint64_t))(v47 + 8))(v22, v19);
      }
      else
      {
        v48 = 0;
        v32 = sub_10001004C();
        v33 = v6;
        v34 = v42;
        v35 = KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for ImageProviding.BundleImageCodingKeys, &v48, v7, &type metadata for ImageProviding.BundleImageCodingKeys, v32);
        v37 = v41;
        v38 = KeyedDecodingContainer.decode(_:forKey:)(v35, v41);
        v39 = v33;
        v4 = v38;
        (*(void (**)(char *, uint64_t))(v40 + 8))(v39, v37);
        swift_bridgeObjectRelease(v18);
        (*(void (**)(char *, uint64_t))(v47 + 8))(v34, v7);
      }
    }
    else
    {
      v24 = v17;
      v25 = type metadata accessor for DecodingError(0);
      swift_allocError(v25, &protocol witness table for DecodingError, 0, 0);
      v27 = v26;
      v4 = (uint64_t)v26 + *(int *)(sub_100003304(&qword_10010BFA0) + 48);
      *v27 = &type metadata for ImageProviding;
      v28 = v42;
      v29 = KeyedDecodingContainer.codingPath.getter(v7);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v29, 0xD00000000000002BLL, 0x80000001000CF850, 0);
      v30 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v27, enum case for DecodingError.typeMismatch(_:), v25);
      swift_willThrow(v30);
      swift_bridgeObjectRelease(v24);
      (*(void (**)(char *, uint64_t))(v47 + 8))(v28, v7);
    }
  }
  sub_100004624(v46);
  return v4;
}

unint64_t sub_100010574()
{
  unint64_t result;

  result = qword_10010C1D8;
  if (!qword_10010C1D8)
  {
    result = swift_getWitnessTable(&unk_1000C752C, &type metadata for Shelf.Presentation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C1D8);
  }
  return result;
}

unint64_t sub_1000105B8()
{
  unint64_t result;

  result = qword_10010C1E0;
  if (!qword_10010C1E0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Shelf.Orientation, &type metadata for Shelf.Orientation);
    atomic_store(result, (unint64_t *)&qword_10010C1E0);
  }
  return result;
}

uint64_t type metadata accessor for Shelf.Presentation(uint64_t a1)
{
  return sub_100010C88(a1, (uint64_t *)&unk_10010C570, (uint64_t)&nominal type descriptor for Shelf.Presentation);
}

uint64_t type metadata accessor for Shelf.Presentation.HeaderIconType(uint64_t a1)
{
  return sub_100010C88(a1, qword_10010C638, (uint64_t)&nominal type descriptor for Shelf.Presentation.HeaderIconType);
}

unint64_t sub_100010624()
{
  unint64_t result;

  result = qword_10010C1F0;
  if (!qword_10010C1F0)
  {
    result = swift_getWitnessTable(&unk_1000C74DC, &type metadata for Shelf.Presentation.HeaderIconAlignment);
    atomic_store(result, (unint64_t *)&qword_10010C1F0);
  }
  return result;
}

unint64_t sub_100010668()
{
  unint64_t result;

  result = qword_10010C208;
  if (!qword_10010C208)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Shelf.Orientation, &type metadata for Shelf.Orientation);
    atomic_store(result, (unint64_t *)&qword_10010C208);
  }
  return result;
}

unint64_t sub_1000106AC()
{
  unint64_t result;

  result = qword_10010C218;
  if (!qword_10010C218)
  {
    result = swift_getWitnessTable(&unk_1000C748C, &type metadata for Shelf.Presentation.HeaderIconAlignment);
    atomic_store(result, (unint64_t *)&qword_10010C218);
  }
  return result;
}

uint64_t sub_1000106F0(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10001072C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x6C6F626D7973 && a2 == 0xE600000000000000)
  {
    v5 = 0xE600000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C6F626D7973, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6E6F6349656D6167 && a2 == 0xE800000000000000)
  {
    v7 = 0xE800000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F6349656D6167, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x7641726579616C70 && a2 == 0xEC00000072617461)
  {
    v8 = 0xEC00000072617461;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7641726579616C70, 0xEC00000072617461, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x6B726F77747261 && a2 == 0xE700000000000000)
  {
    v9 = 0xE700000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6B726F77747261, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x656C646E7562 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x656C646E7562, 0xE600000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_100010950(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 0x7461746E6569726FLL && a2 == 0xEB000000006E6F69)
  {
    v5 = 0xEB000000006E6F69;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7461746E6569726FLL, 0xEB000000006E6F69, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 1852793705 && a2 == 0xE400000000000000)
  {
    v7 = 0xE400000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1852793705, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x67696C416E6F6369 && a2 == 0xED0000746E656D6ELL)
  {
    v8 = 0xED0000746E656D6ELL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x67696C416E6F6369, 0xED0000746E656D6ELL, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x656C746974 && a2 == 0xE500000000000000)
  {
    v9 = 0xE500000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x6974627553706F74 && a2 == 0xEB00000000656C74)
  {
    v10 = 0xEB00000000656C74;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6974627553706F74, 0xEB00000000656C74, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x75536D6F74746F62 && a2 == 0xEE00656C74697462)
  {
    swift_bridgeObjectRelease(0xEE00656C74697462);
    return 5;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0x75536D6F74746F62, 0xEE00656C74697462, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

unint64_t sub_100010C30(Swift::String string, Swift::OpaquePointer cases)
{
  void *object;
  Swift::String v3;
  unint64_t v5;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease(object);
  if (v5 >= 3)
    return 3;
  else
    return v5;
}

uint64_t type metadata accessor for Shelf(uint64_t a1)
{
  return sub_100010C88(a1, (uint64_t *)&unk_10010C4B8, (uint64_t)&nominal type descriptor for Shelf);
}

uint64_t sub_100010C88(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

uint64_t sub_100010CBC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100003304(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100010D00(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100003304(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_100010D44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Shelf.Presentation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_100010D88()
{
  unint64_t result;

  result = qword_10010C230;
  if (!qword_10010C230)
  {
    result = swift_getWitnessTable(&unk_1000C743C, &type metadata for Shelf.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C230);
  }
  return result;
}

unint64_t sub_100010DCC()
{
  unint64_t result;

  result = qword_10010C250;
  if (!qword_10010C250)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Shelf.Visibility, &type metadata for Shelf.Visibility);
    atomic_store(result, (unint64_t *)&qword_10010C250);
  }
  return result;
}

unint64_t sub_100010E10()
{
  unint64_t result;

  result = qword_10010C258;
  if (!qword_10010C258)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Shelf.AccessoryType, &type metadata for Shelf.AccessoryType);
    atomic_store(result, (unint64_t *)&qword_10010C258);
  }
  return result;
}

unint64_t sub_100010E54()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010C268;
  if (!qword_10010C268)
  {
    v1 = sub_100006E54(&qword_10010C260);
    sub_100011054(&qword_10010C270, &qword_10010C278, (uint64_t)&protocol conformance descriptor for _CodeByKind_Many<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> DiscardOnError<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10010C268);
  }
  return result;
}

uint64_t sub_100010ED0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_100003304(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100010F0C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_100010F50()
{
  unint64_t result;

  result = qword_10010C2A0;
  if (!qword_10010C2A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Shelf.Visibility, &type metadata for Shelf.Visibility);
    atomic_store(result, (unint64_t *)&qword_10010C2A0);
  }
  return result;
}

unint64_t sub_100010F94()
{
  unint64_t result;

  result = qword_10010C2A8;
  if (!qword_10010C2A8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Shelf.AccessoryType, &type metadata for Shelf.AccessoryType);
    atomic_store(result, (unint64_t *)&qword_10010C2A8);
  }
  return result;
}

unint64_t sub_100010FD8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010C2B0;
  if (!qword_10010C2B0)
  {
    v1 = sub_100006E54(&qword_10010C260);
    sub_100011054(&qword_10010C2B8, &qword_10010C278, (uint64_t)&protocol conformance descriptor for _CodeByKind_Many<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> DiscardOnError<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10010C2B0);
  }
  return result;
}

uint64_t sub_100011054(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100006E54(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100011094()
{
  return sub_1000035B4(&qword_10010C2C0, type metadata accessor for Page, (uint64_t)&protocol conformance descriptor for Page);
}

uint64_t sub_1000110C0()
{
  return sub_1000035B4(&qword_10010C2C8, type metadata accessor for Page, (uint64_t)&protocol conformance descriptor for Page);
}

uint64_t sub_1000110EC()
{
  return sub_1000035B4(&qword_10010C2D0, type metadata accessor for Shelf, (uint64_t)&protocol conformance descriptor for Shelf);
}

uint64_t sub_100011118()
{
  return sub_1000035B4(&qword_10010C2D8, (uint64_t (*)(uint64_t))&type metadata accessor for PageID, (uint64_t)&protocol conformance descriptor for PageID);
}

unint64_t sub_100011148()
{
  unint64_t result;

  result = qword_10010C2E0;
  if (!qword_10010C2E0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PageToolbarItem.Appearance.ButtonBackgroundShape, &type metadata for PageToolbarItem.Appearance.ButtonBackgroundShape);
    atomic_store(result, (unint64_t *)&qword_10010C2E0);
  }
  return result;
}

void *sub_10001118C()
{
  return &protocol witness table for String;
}

unint64_t sub_10001119C()
{
  unint64_t result;

  result = qword_10010C2E8;
  if (!qword_10010C2E8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Margins, &type metadata for Margins);
    atomic_store(result, (unint64_t *)&qword_10010C2E8);
  }
  return result;
}

unint64_t sub_1000111E4()
{
  unint64_t result;

  result = qword_10010C2F0;
  if (!qword_10010C2F0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for TitleDisplayMode, &type metadata for TitleDisplayMode);
    atomic_store(result, (unint64_t *)&qword_10010C2F0);
  }
  return result;
}

unint64_t sub_10001122C()
{
  unint64_t result;

  result = qword_10010C2F8;
  if (!qword_10010C2F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Shelf.Orientation, &type metadata for Shelf.Orientation);
    atomic_store(result, (unint64_t *)&qword_10010C2F8);
  }
  return result;
}

unint64_t sub_100011274()
{
  unint64_t result;

  result = qword_10010C300;
  if (!qword_10010C300)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Shelf.Visibility, &type metadata for Shelf.Visibility);
    atomic_store(result, (unint64_t *)&qword_10010C300);
  }
  return result;
}

unint64_t sub_1000112BC()
{
  unint64_t result;

  result = qword_10010C308;
  if (!qword_10010C308)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Shelf.AccessoryType, &type metadata for Shelf.AccessoryType);
    atomic_store(result, (unint64_t *)&qword_10010C308);
  }
  return result;
}

uint64_t sub_100011300()
{
  return sub_1000035B4(&qword_10010C310, type metadata accessor for Shelf, (uint64_t)&protocol conformance descriptor for Shelf);
}

uint64_t sub_10001132C()
{
  return sub_1000035B4(&qword_10010C318, type metadata accessor for Shelf, (uint64_t)&protocol conformance descriptor for Shelf);
}

uint64_t sub_100011358()
{
  return sub_1000035B4(&qword_10010C320, (uint64_t (*)(uint64_t))&type metadata accessor for ShelfID, (uint64_t)&protocol conformance descriptor for ShelfID);
}

_QWORD *initializeBufferWithCopyOfBuffer for Page(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unsigned int (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  char *__dst;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v32 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v32 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v32);
  }
  else
  {
    v7 = type metadata accessor for PageID(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for PageMetrics(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = a3[7];
    v14 = (_QWORD *)((char *)a1 + v12);
    v15 = (_QWORD *)((char *)a2 + v12);
    v16 = v15[1];
    *v14 = *v15;
    v14[1] = v16;
    *((_BYTE *)a1 + v13) = *((_BYTE *)a2 + v13);
    v17 = a3[8];
    v18 = a3[9];
    v19 = (_QWORD *)((char *)a1 + v17);
    v20 = (_QWORD *)((char *)a2 + v17);
    v21 = *v20;
    v22 = v20[1];
    *v19 = *v20;
    v19[1] = v22;
    v23 = v20[2];
    v19[2] = v23;
    v24 = *(_QWORD *)((char *)a2 + v18);
    *(_QWORD *)((char *)a1 + v18) = v24;
    v25 = a3[11];
    *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
    __dst = (char *)a1 + v25;
    v26 = (char *)a2 + v25;
    v27 = type metadata accessor for Page.Background(0);
    v40 = *(_QWORD *)(v27 - 8);
    v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48);
    v29 = v16;
    v30 = v27;
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v24);
    if (v28(v26, 1, v30))
    {
      v31 = sub_100003304(&qword_10010BFB0);
      memcpy(__dst, v26, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      v33 = type metadata accessor for MediaArtwork(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(__dst, v26, v33);
      v34 = *(int *)(sub_100003304(&qword_10010BF78) + 48);
      v35 = &__dst[v34];
      v36 = &v26[v34];
      *(_QWORD *)v35 = *(_QWORD *)v36;
      v35[8] = v36[8];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(__dst, 0, 1, v30);
    }
    v37 = a3[12];
    v38 = *(_QWORD *)((char *)a2 + v37);
    *(_QWORD *)((char *)a1 + v37) = v38;
    swift_bridgeObjectRetain(v38);
  }
  return a1;
}

uint64_t destroy for Page(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = type metadata accessor for PageID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = type metadata accessor for PageMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));
  v7 = (_QWORD *)(a1 + a2[8]);
  swift_bridgeObjectRelease(*v7);
  swift_bridgeObjectRelease(v7[1]);
  swift_bridgeObjectRelease(v7[2]);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[9]));
  v8 = a1 + a2[11];
  v9 = type metadata accessor for Page.Background(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9))
  {
    v10 = type metadata accessor for MediaArtwork(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
  }
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[12]));
}

uint64_t initializeWithCopy for Page(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unsigned int (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  char *__dst;

  v6 = type metadata accessor for PageID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for PageMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a3[7];
  v13 = (_QWORD *)(a1 + v11);
  v14 = (_QWORD *)(a2 + v11);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  *(_BYTE *)(a1 + v12) = *(_BYTE *)(a2 + v12);
  v16 = a3[8];
  v17 = a3[9];
  v18 = (uint64_t *)(a1 + v16);
  v19 = (uint64_t *)(a2 + v16);
  v20 = *v19;
  v21 = v19[1];
  *v18 = *v19;
  v18[1] = v21;
  v22 = v19[2];
  v18[2] = v22;
  v23 = *(_QWORD *)(a2 + v17);
  *(_QWORD *)(a1 + v17) = v23;
  v24 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  __dst = (char *)(a1 + v24);
  v25 = (char *)(a2 + v24);
  v26 = type metadata accessor for Page.Background(0);
  v38 = *(_QWORD *)(v26 - 8);
  v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48);
  v28 = v15;
  v29 = v26;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v23);
  if (v27(v25, 1, v29))
  {
    v30 = sub_100003304(&qword_10010BFB0);
    memcpy(__dst, v25, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    v31 = type metadata accessor for MediaArtwork(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(__dst, v25, v31);
    v32 = *(int *)(sub_100003304(&qword_10010BF78) + 48);
    v33 = &__dst[v32];
    v34 = &v25[v32];
    *(_QWORD *)v33 = *(_QWORD *)v34;
    v33[8] = v34[8];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(__dst, 0, 1, v29);
  }
  v35 = a3[12];
  v36 = *(_QWORD *)(a2 + v35);
  *(_QWORD *)(a1 + v35) = v36;
  swift_bridgeObjectRetain(v36);
  return a1;
}

uint64_t assignWithCopy for Page(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(char *, uint64_t, uint64_t);
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char v50;

  v6 = type metadata accessor for PageID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for PageMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  *v12 = *v13;
  v14 = v13[1];
  v15 = v12[1];
  v12[1] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v16 = a3[8];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = *(_QWORD *)(a1 + v16);
  v20 = *(_QWORD *)(a2 + v16);
  *(_QWORD *)(a1 + v16) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v19);
  v21 = *(_QWORD *)(v17 + 8);
  v22 = *(_QWORD *)(v18 + 8);
  *(_QWORD *)(v17 + 8) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v21);
  v23 = *(_QWORD *)(v17 + 16);
  v24 = *(_QWORD *)(v18 + 16);
  *(_QWORD *)(v17 + 16) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v23);
  v25 = a3[9];
  v26 = *(_QWORD *)(a2 + v25);
  v27 = *(_QWORD *)(a1 + v25);
  *(_QWORD *)(a1 + v25) = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  v28 = a3[11];
  v29 = (char *)(a1 + v28);
  v30 = (char *)(a2 + v28);
  v31 = type metadata accessor for Page.Background(0);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48);
  v34 = v33(v29, 1, v31);
  v35 = v33(v30, 1, v31);
  if (!v34)
  {
    if (!v35)
    {
      v46 = type metadata accessor for MediaArtwork(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 24))(v29, v30, v46);
      v47 = *(int *)(sub_100003304(&qword_10010BF78) + 48);
      v48 = &v29[v47];
      v49 = &v30[v47];
      v50 = v49[8];
      *(_QWORD *)v48 = *(_QWORD *)v49;
      v48[8] = v50;
      goto LABEL_7;
    }
    sub_1000106F0((uint64_t)v29, type metadata accessor for Page.Background);
    goto LABEL_6;
  }
  if (v35)
  {
LABEL_6:
    v41 = sub_100003304(&qword_10010BFB0);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    goto LABEL_7;
  }
  v36 = type metadata accessor for MediaArtwork(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v29, v30, v36);
  v37 = *(int *)(sub_100003304(&qword_10010BF78) + 48);
  v38 = &v29[v37];
  v39 = &v30[v37];
  v40 = v39[8];
  *(_QWORD *)v38 = *(_QWORD *)v39;
  v38[8] = v40;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
LABEL_7:
  v42 = a3[12];
  v43 = *(_QWORD *)(a2 + v42);
  v44 = *(_QWORD *)(a1 + v42);
  *(_QWORD *)(a1 + v42) = v43;
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRelease(v44);
  return a1;
}

uint64_t initializeWithTake for Page(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;

  v6 = type metadata accessor for PageID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for PageMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[7];
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  v12 = a3[8];
  v13 = a3[9];
  v14 = a1 + v12;
  v15 = a2 + v12;
  *(_QWORD *)(v14 + 16) = *(_QWORD *)(v15 + 16);
  *(_OWORD *)v14 = *(_OWORD *)v15;
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);
  v16 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  v17 = (char *)(a1 + v16);
  v18 = (char *)(a2 + v16);
  v19 = type metadata accessor for Page.Background(0);
  v20 = *(_QWORD *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
  {
    v21 = sub_100003304(&qword_10010BFB0);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    v22 = type metadata accessor for MediaArtwork(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v17, v18, v22);
    v23 = *(int *)(sub_100003304(&qword_10010BF78) + 48);
    v24 = &v17[v23];
    v25 = &v18[v23];
    *(_QWORD *)v24 = *(_QWORD *)v25;
    v24[8] = v25[8];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  return a1;
}

uint64_t assignWithTake for Page(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(char *, uint64_t, uint64_t);
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;

  v6 = type metadata accessor for PageID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for PageMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (uint64_t *)(a2 + v11);
  v15 = *v13;
  v14 = v13[1];
  v16 = v12[1];
  *v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease(v16);
  v17 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = *(_QWORD *)(a1 + v17);
  *(_QWORD *)(a1 + v17) = *(_QWORD *)(a2 + v17);
  swift_bridgeObjectRelease(v20);
  v21 = *(_QWORD *)(v18 + 8);
  *(_QWORD *)(v18 + 8) = *(_QWORD *)(v19 + 8);
  swift_bridgeObjectRelease(v21);
  v22 = *(_QWORD *)(v18 + 16);
  *(_QWORD *)(v18 + 16) = *(_QWORD *)(v19 + 16);
  swift_bridgeObjectRelease(v22);
  v23 = a3[9];
  v24 = *(_QWORD *)(a1 + v23);
  *(_QWORD *)(a1 + v23) = *(_QWORD *)(a2 + v23);
  swift_bridgeObjectRelease(v24);
  v25 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  v26 = (char *)(a1 + v25);
  v27 = (char *)(a2 + v25);
  v28 = type metadata accessor for Page.Background(0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48);
  v31 = v30(v26, 1, v28);
  v32 = v30(v27, 1, v28);
  if (!v31)
  {
    if (!v32)
    {
      v41 = type metadata accessor for MediaArtwork(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 40))(v26, v27, v41);
      v42 = *(int *)(sub_100003304(&qword_10010BF78) + 48);
      v43 = &v26[v42];
      v44 = &v27[v42];
      *(_QWORD *)v43 = *(_QWORD *)v44;
      v43[8] = v44[8];
      goto LABEL_7;
    }
    sub_1000106F0((uint64_t)v26, type metadata accessor for Page.Background);
    goto LABEL_6;
  }
  if (v32)
  {
LABEL_6:
    v37 = sub_100003304(&qword_10010BFB0);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    goto LABEL_7;
  }
  v33 = type metadata accessor for MediaArtwork(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v26, v27, v33);
  v34 = *(int *)(sub_100003304(&qword_10010BF78) + 48);
  v35 = &v26[v34];
  v36 = &v27[v34];
  *(_QWORD *)v35 = *(_QWORD *)v36;
  v35[8] = v36[8];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
LABEL_7:
  v38 = a3[12];
  v39 = *(_QWORD *)(a1 + v38);
  *(_QWORD *)(a1 + v38) = *(_QWORD *)(a2 + v38);
  swift_bridgeObjectRelease(v39);
  return a1;
}

uint64_t getEnumTagSinglePayload for Page(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100011EF8);
}

uint64_t sub_100011EF8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v6 = type metadata accessor for PageID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for PageMetrics(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_10:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = sub_100003304(&qword_10010BFB0);
    v12 = *(_QWORD *)(v8 - 8);
    v13 = a3[11];
    goto LABEL_10;
  }
  v14 = *(_QWORD *)(a1 + a3[6] + 8);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for Page(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100011FD8);
}

uint64_t sub_100011FD8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  v8 = type metadata accessor for PageID(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    result = type metadata accessor for PageMetrics(0);
    v14 = *(_QWORD *)(result - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = result;
      v15 = a4[5];
    }
    else
    {
      if (a3 == 0x7FFFFFFF)
      {
        *(_QWORD *)(a1 + a4[6] + 8) = (a2 - 1);
        return result;
      }
      v10 = sub_100003304(&qword_10010BFB0);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[11];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1000120A8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[9];

  v2 = type metadata accessor for PageID(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for PageMetrics(319);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      v8[2] = &unk_1000C65E0;
      v8[3] = &unk_1000C65F8;
      v8[4] = &unk_1000C6610;
      v8[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v8[6] = &unk_1000C65F8;
      sub_100014F74(319, (unint64_t *)&unk_10010C390, type metadata accessor for Page.Background);
      if (v7 <= 0x3F)
      {
        v8[7] = *(_QWORD *)(v6 - 8) + 64;
        v8[8] = (char *)&value witness table for Builtin.BridgeObject + 64;
        swift_initStructMetadata(a1, 256, 9, v8, a1 + 16);
      }
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for Page.Background(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v10);
  }
  else
  {
    v6 = type metadata accessor for MediaArtwork(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    v7 = *(int *)(sub_100003304(&qword_10010BF78) + 48);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    *(_QWORD *)v8 = *(_QWORD *)v9;
    v8[8] = v9[8];
  }
  return a1;
}

uint64_t destroy for Page.Background(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MediaArtwork(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for Page.Background(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = type metadata accessor for MediaArtwork(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  v5 = *(int *)(sub_100003304(&qword_10010BF78) + 48);
  v6 = a1 + v5;
  v7 = a2 + v5;
  *(_QWORD *)v6 = *(_QWORD *)v7;
  *(_BYTE *)(v6 + 8) = *(_BYTE *)(v7 + 8);
  return a1;
}

uint64_t assignWithCopy for Page.Background(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = type metadata accessor for MediaArtwork(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  v5 = *(int *)(sub_100003304(&qword_10010BF78) + 48);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = *(_BYTE *)(v7 + 8);
  *(_QWORD *)v6 = *(_QWORD *)v7;
  *(_BYTE *)(v6 + 8) = v8;
  return a1;
}

uint64_t initializeWithTake for Page.Background(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = type metadata accessor for MediaArtwork(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  v5 = *(int *)(sub_100003304(&qword_10010BF78) + 48);
  v6 = a1 + v5;
  v7 = a2 + v5;
  *(_QWORD *)v6 = *(_QWORD *)v7;
  *(_BYTE *)(v6 + 8) = *(_BYTE *)(v7 + 8);
  return a1;
}

uint64_t assignWithTake for Page.Background(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = type metadata accessor for MediaArtwork(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  v5 = *(int *)(sub_100003304(&qword_10010BF78) + 48);
  v6 = a1 + v5;
  v7 = a2 + v5;
  *(_QWORD *)v6 = *(_QWORD *)v7;
  *(_BYTE *)(v6 + 8) = *(_BYTE *)(v7 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for Page.Background(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003304(&qword_10010BF78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for Page.Background(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100003304(&qword_10010BF78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, a2, a3, v6);
}

uint64_t sub_100012490(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _DWORD v4[8];

  result = type metadata accessor for MediaArtwork(319);
  if (v3 <= 0x3F)
  {
    swift_getTupleTypeLayout2(v4, *(_QWORD *)(result - 8) + 64, "\t");
    swift_initEnumMetadataSingleCase(a1, 256, v4);
    result = 0;
    *(_DWORD *)(*(_QWORD *)(a1 - 8) + 84) = v4[5];
  }
  return result;
}

uint64_t destroy for PageToolbarItemGroups(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[1]);
  return swift_bridgeObjectRelease(a1[2]);
}

uint64_t *_s13GameOverlayUI21PageToolbarItemGroupsVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  a1[2] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t *assignWithCopy for PageToolbarItemGroups(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v4);
  v6 = a1[1];
  v7 = a2[1];
  a1[1] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v6);
  v8 = a1[2];
  v9 = a2[2];
  a1[2] = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v8);
  return a1;
}

__n128 initializeWithTake for PageToolbarItemGroups(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

_QWORD *assignWithTake for PageToolbarItemGroups(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v4);
  v5 = a1[2];
  a1[2] = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for PageToolbarItemGroups(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 24))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PageToolbarItemGroups(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PageToolbarItemGroups()
{
  return &type metadata for PageToolbarItemGroups;
}

uint64_t sub_10001271C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  unint64_t v22;
  uint64_t result;

  v22 = a11 >> 62;
  if (a11 >> 62 == 2)
  {
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a5);
    return swift_bridgeObjectRetain(a2);
  }
  else if ((_DWORD)v22 == 1)
  {
    swift_bridgeObjectRetain(a2);
    return sub_1000128C8(a3, a4, a5);
  }
  else if (!(_DWORD)v22)
  {
    swift_bridgeObjectRetain(a10);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a8);
    return sub_100012878(a12, a13, a14, a15, a16, a17, a18, a19);
  }
  return result;
}

uint64_t sub_100012878(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a8);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    return swift_bridgeObjectRetain(a6);
  }
  return result;
}

uint64_t sub_1000128C8(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255)
    return sub_1000128E0(a1, a2);
  return a1;
}

uint64_t sub_1000128E0(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRetain(a2);
}

uint64_t destroy for PageToolbarItem(_QWORD *a1)
{
  uint64_t result;

  swift_bridgeObjectRelease(a1[1]);
  result = sub_10000F958(a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18], a1[19], a1[20]);
  if (a1[24])
    return sub_100004624(a1 + 21);
  return result;
}

uint64_t initializeWithCopy for PageToolbarItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v25 = *(_QWORD *)(a2 + 24);
  v26 = *(_QWORD *)(a2 + 16);
  v23 = *(_QWORD *)(a2 + 40);
  v24 = *(_QWORD *)(a2 + 32);
  v21 = *(_QWORD *)(a2 + 56);
  v22 = *(_QWORD *)(a2 + 48);
  v19 = *(_QWORD *)(a2 + 72);
  v20 = *(_QWORD *)(a2 + 64);
  v28 = *(_QWORD *)(a2 + 88);
  v29 = *(_QWORD *)(a2 + 80);
  v5 = *(_QWORD *)(a2 + 104);
  v27 = *(_QWORD *)(a2 + 96);
  v6 = *(_QWORD *)(a2 + 112);
  v7 = *(_QWORD *)(a2 + 120);
  v8 = *(_QWORD *)(a2 + 128);
  v9 = *(_QWORD *)(a2 + 136);
  v11 = *(_QWORD *)(a2 + 144);
  v10 = *(_QWORD *)(a2 + 152);
  v12 = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRetain(v4);
  sub_10001271C(v26, v25, v24, v23, v22, v21, v20, v19, v29, v28, v27, v5, v6, v7, v8, v9, v11, v10, v12);
  *(_QWORD *)(a1 + 16) = v26;
  *(_QWORD *)(a1 + 24) = v25;
  *(_QWORD *)(a1 + 32) = v24;
  *(_QWORD *)(a1 + 40) = v23;
  *(_QWORD *)(a1 + 48) = v22;
  *(_QWORD *)(a1 + 56) = v21;
  *(_QWORD *)(a1 + 64) = v20;
  *(_QWORD *)(a1 + 72) = v19;
  *(_QWORD *)(a1 + 80) = v29;
  *(_QWORD *)(a1 + 88) = v28;
  *(_QWORD *)(a1 + 96) = v27;
  *(_QWORD *)(a1 + 104) = v5;
  *(_QWORD *)(a1 + 112) = v6;
  *(_QWORD *)(a1 + 120) = v7;
  *(_QWORD *)(a1 + 128) = v8;
  *(_QWORD *)(a1 + 136) = v9;
  *(_QWORD *)(a1 + 144) = v11;
  *(_QWORD *)(a1 + 152) = v10;
  *(_QWORD *)(a1 + 160) = v12;
  v13 = (_OWORD *)(a1 + 168);
  v14 = (_OWORD *)(a2 + 168);
  v15 = *(_QWORD *)(a2 + 192);
  if (v15)
  {
    v16 = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 192) = v15;
    *(_QWORD *)(a1 + 200) = v16;
    (**(void (***)(_OWORD *, _OWORD *))(v15 - 8))(v13, v14);
  }
  else
  {
    v17 = *(_OWORD *)(a2 + 184);
    *v13 = *v14;
    *(_OWORD *)(a1 + 184) = v17;
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  }
  return a1;
}

uint64_t assignWithCopy for PageToolbarItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  v12 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a2 + 72);
  v32 = *(_QWORD *)(a2 + 80);
  v33 = *(_QWORD *)(a2 + 88);
  v34 = *(_QWORD *)(a2 + 96);
  v35 = *(_QWORD *)(a2 + 104);
  v36 = *(_QWORD *)(a2 + 112);
  v37 = *(_QWORD *)(a2 + 120);
  v38 = *(_QWORD *)(a2 + 128);
  v39 = *(_QWORD *)(a2 + 136);
  v40 = *(_QWORD *)(a2 + 144);
  v41 = *(_QWORD *)(a2 + 152);
  v42 = *(_QWORD *)(a2 + 160);
  sub_10001271C(v6, v7, v8, v9, v10, v11, v12, v13, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_QWORD *)(a1 + 64);
  v21 = *(_QWORD *)(a1 + 72);
  v22 = *(_OWORD *)(a1 + 80);
  v23 = *(_OWORD *)(a1 + 96);
  v24 = *(_OWORD *)(a1 + 112);
  v25 = *(_OWORD *)(a1 + 128);
  v26 = *(_OWORD *)(a1 + 144);
  v27 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 72) = v13;
  *(_QWORD *)(a1 + 80) = v32;
  *(_QWORD *)(a1 + 88) = v33;
  *(_QWORD *)(a1 + 96) = v34;
  *(_QWORD *)(a1 + 104) = v35;
  *(_QWORD *)(a1 + 112) = v36;
  *(_QWORD *)(a1 + 120) = v37;
  *(_QWORD *)(a1 + 128) = v38;
  *(_QWORD *)(a1 + 136) = v39;
  *(_QWORD *)(a1 + 144) = v40;
  *(_QWORD *)(a1 + 152) = v41;
  *(_QWORD *)(a1 + 160) = v42;
  sub_10000F958(v14, v15, v16, v17, v18, v19, v20, v21, v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25, *((uint64_t *)&v25 + 1), v26, *((uint64_t *)&v26 + 1), v27);
  v28 = *(_QWORD *)(a2 + 192);
  if (!*(_QWORD *)(a1 + 192))
  {
    if (v28)
    {
      *(_QWORD *)(a1 + 192) = v28;
      *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
      (**(void (***)(uint64_t, uint64_t))(v28 - 8))(a1 + 168, a2 + 168);
      return a1;
    }
LABEL_7:
    v29 = *(_OWORD *)(a2 + 168);
    v30 = *(_OWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 168) = v29;
    *(_OWORD *)(a1 + 184) = v30;
    return a1;
  }
  if (!v28)
  {
    sub_100004624((_QWORD *)(a1 + 168));
    goto LABEL_7;
  }
  sub_100012CF4((_QWORD *)(a1 + 168), (_QWORD *)(a2 + 168));
  return a1;
}

_QWORD *sub_100012CF4(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v11 = *result;
        v12 = *a2;
        swift_retain(*a2);
        result = (_QWORD *)swift_release(v11);
        *v3 = v12;
      }
      else
      {
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *, _QWORD))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          v14 = *a2;
          *v3 = *a2;
          swift_retain(v14);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (_QWORD *)swift_release(v10);
      }
      else
      {
        (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          v13 = *a2;
          *v3 = *a2;
          swift_retain(v13);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }
  return result;
}

__n128 initializeWithTake for PageToolbarItem(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  result = *(__n128 *)(a2 + 144);
  v9 = *(_OWORD *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v10;
  *(__n128 *)(a1 + 144) = result;
  *(_OWORD *)(a1 + 160) = v9;
  return result;
}

uint64_t assignWithTake for PageToolbarItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 160);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_QWORD *)(a1 + 64);
  v14 = *(_QWORD *)(a1 + 72);
  v15 = *(_OWORD *)(a1 + 80);
  v16 = *(_OWORD *)(a1 + 96);
  v17 = *(_OWORD *)(a1 + 112);
  v18 = *(_OWORD *)(a1 + 128);
  v19 = *(_OWORD *)(a1 + 144);
  v20 = *(_QWORD *)(a1 + 160);
  v21 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v21;
  v22 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v22;
  v23 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v23;
  v24 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v24;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = v6;
  sub_10000F958(v7, v8, v9, v10, v11, v12, v13, v14, v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17, *((uint64_t *)&v17 + 1), v18, *((uint64_t *)&v18 + 1), v19, *((uint64_t *)&v19 + 1), v20);
  if (*(_QWORD *)(a1 + 192))
    sub_100004624((_QWORD *)(a1 + 168));
  v25 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = v25;
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  return a1;
}

uint64_t getEnumTagSinglePayload for PageToolbarItem(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 208))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PageToolbarItem(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 200) = 0;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 208) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 208) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PageToolbarItem()
{
  return &type metadata for PageToolbarItem;
}

uint64_t destroy for PageToolbarItem.Appearance(uint64_t a1)
{
  return sub_10000F958(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144));
}

uint64_t *initializeWithCopy for PageToolbarItem.Appearance(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v13 = a2[9];
  v14 = a2[10];
  v15 = a2[11];
  v16 = a2[12];
  v17 = a2[13];
  v18 = a2[14];
  v19 = a2[15];
  v20 = a2[16];
  v21 = a2[17];
  v22 = a2[18];
  sub_10001271C(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v13;
  a1[10] = v14;
  a1[11] = v15;
  a1[12] = v16;
  a1[13] = v17;
  a1[14] = v18;
  a1[15] = v19;
  a1[16] = v20;
  a1[17] = v21;
  a1[18] = v22;
  return a1;
}

uint64_t assignWithCopy for PageToolbarItem.Appearance(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v27 = a2[9];
  v28 = a2[10];
  v29 = a2[11];
  v30 = a2[12];
  v31 = a2[13];
  v32 = a2[14];
  v33 = a2[15];
  v34 = a2[16];
  v35 = a2[17];
  v36 = a2[18];
  sub_10001271C(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_OWORD *)(a1 + 80);
  v22 = *(_OWORD *)(a1 + 96);
  v23 = *(_OWORD *)(a1 + 112);
  v24 = *(_OWORD *)(a1 + 128);
  v25 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v27;
  *(_QWORD *)(a1 + 80) = v28;
  *(_QWORD *)(a1 + 88) = v29;
  *(_QWORD *)(a1 + 96) = v30;
  *(_QWORD *)(a1 + 104) = v31;
  *(_QWORD *)(a1 + 112) = v32;
  *(_QWORD *)(a1 + 120) = v33;
  *(_QWORD *)(a1 + 128) = v34;
  *(_QWORD *)(a1 + 136) = v35;
  *(_QWORD *)(a1 + 144) = v36;
  sub_10000F958(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25);
  return a1;
}

uint64_t assignWithTake for PageToolbarItem.Appearance(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v3 = *(_QWORD *)(a2 + 144);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_OWORD *)(a1 + 64);
  v13 = *(_OWORD *)(a1 + 80);
  v14 = *(_OWORD *)(a1 + 96);
  v15 = *(_OWORD *)(a1 + 112);
  v16 = *(_OWORD *)(a1 + 128);
  v17 = *(_QWORD *)(a1 + 144);
  v18 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v18;
  v19 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v19;
  v20 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v20;
  v21 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v21;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = v3;
  sub_10000F958(v4, v6, v5, v7, v8, v9, v10, v11, v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for PageToolbarItem.Appearance(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 152))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 80) >> 1;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for PageToolbarItem.Appearance(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 152) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      result = 0.0;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_QWORD *)(a1 + 80) = 2 * -a2;
      *(_OWORD *)(a1 + 88) = 0u;
      *(_OWORD *)(a1 + 104) = 0u;
      *(_OWORD *)(a1 + 120) = 0u;
      *(_OWORD *)(a1 + 136) = 0u;
      return result;
    }
    *(_BYTE *)(a1 + 152) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_100013464(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 80) = *(_QWORD *)(result + 80) & 1 | (a2 << 62);
  return result;
}

ValueMetadata *type metadata accessor for PageToolbarItem.Appearance()
{
  return &type metadata for PageToolbarItem.Appearance;
}

ValueMetadata *type metadata accessor for PageToolbarItem.Appearance.ButtonBackgroundShape()
{
  return &type metadata for PageToolbarItem.Appearance.ButtonBackgroundShape;
}

uint64_t destroy for PageMenuToolbarItem(_QWORD *a1)
{
  uint64_t result;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  result = swift_bridgeObjectRelease(a1[5]);
  if (a1[9])
    return sub_100004624(a1 + 6);
  return result;
}

uint64_t initializeWithCopy for PageMenuToolbarItem(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v5;
  v6 = a2[5];
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_QWORD *)(a1 + 40) = v6;
  v7 = a2 + 6;
  v8 = a2[9];
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  if (v8)
  {
    v9 = a2[10];
    *(_QWORD *)(a1 + 72) = v8;
    *(_QWORD *)(a1 + 80) = v9;
    (**(void (***)(uint64_t, _QWORD *, uint64_t))(v8 - 8))(a1 + 48, v7, v8);
  }
  else
  {
    v10 = *((_OWORD *)v7 + 1);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)v7;
    *(_OWORD *)(a1 + 64) = v10;
    *(_QWORD *)(a1 + 80) = v7[4];
  }
  return a1;
}

uint64_t assignWithCopy for PageMenuToolbarItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 72);
  if (!*(_QWORD *)(a1 + 72))
  {
    if (v10)
    {
      *(_QWORD *)(a1 + 72) = v10;
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 48, a2 + 48);
      return a1;
    }
LABEL_7:
    v11 = *(_OWORD *)(a2 + 48);
    v12 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 48) = v11;
    *(_OWORD *)(a1 + 64) = v12;
    return a1;
  }
  if (!v10)
  {
    sub_100004624((_QWORD *)(a1 + 48));
    goto LABEL_7;
  }
  sub_100012CF4((_QWORD *)(a1 + 48), (_QWORD *)(a2 + 48));
  return a1;
}

__n128 initializeWithTake for PageMenuToolbarItem(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for PageMenuToolbarItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  if (*(_QWORD *)(a1 + 72))
    sub_100004624((_QWORD *)(a1 + 48));
  v10 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v10;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for PageMenuToolbarItem(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PageMenuToolbarItem(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PageMenuToolbarItem()
{
  return &type metadata for PageMenuToolbarItem;
}

ValueMetadata *type metadata accessor for Margins()
{
  return &type metadata for Margins;
}

ValueMetadata *type metadata accessor for TitleDisplayMode()
{
  return &type metadata for TitleDisplayMode;
}

uint64_t destroy for ImageProviding(uint64_t *a1)
{
  return sub_10000FB1C(*a1, a1[1]);
}

uint64_t _s13GameOverlayUI14ImageProvidingOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1000128E0(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ImageProviding(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1000128E0(*(_QWORD *)a2, v4);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_10000FB1C(v6, v7);
  return a1;
}

__n128 initializeWithTake for ImageProviding(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for ImageProviding(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_10000FB1C(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for ImageProviding(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ImageProviding(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_100013998(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_1000139A0(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ImageProviding()
{
  return &type metadata for ImageProviding;
}

_QWORD *initializeBufferWithCopyOfBuffer for Shelf(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    v7 = type metadata accessor for ShelfID(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for ImpressionMetrics(0);
    v12 = *(_QWORD *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      v13 = sub_100003304(&qword_10010C220);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v15 = a3[6];
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    *((_BYTE *)a1 + v15) = *((_BYTE *)a2 + v15);
    v18 = (int *)type metadata accessor for Shelf.Presentation(0);
    v19 = v18[5];
    v20 = &v16[v19];
    v21 = &v17[v19];
    v22 = type metadata accessor for Shelf.Presentation.HeaderIconType(0);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48))(v21, 1, v22))
    {
      v24 = (char *)&loc_100013B5C + 4 * byte_1000C5AE7[swift_getEnumCaseMultiPayload(v21, v22)];
      __asm { BR              X10 }
    }
    v23 = sub_100003304(&qword_10010C1F8);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    v16[v18[6]] = v17[v18[6]];
    v25 = v18[7];
    v26 = &v16[v25];
    v27 = &v17[v25];
    v28 = *((_QWORD *)v27 + 1);
    *(_QWORD *)v26 = *(_QWORD *)v27;
    *((_QWORD *)v26 + 1) = v28;
    v29 = v18[8];
    v30 = &v16[v29];
    v31 = &v17[v29];
    v32 = *((_QWORD *)v31 + 1);
    *(_QWORD *)v30 = *(_QWORD *)v31;
    *((_QWORD *)v30 + 1) = v32;
    v33 = v18[9];
    v34 = &v16[v33];
    v35 = &v17[v33];
    v36 = *((_QWORD *)v35 + 1);
    *(_QWORD *)v34 = *(_QWORD *)v35;
    *((_QWORD *)v34 + 1) = v36;
    v37 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    *((_BYTE *)a1 + v37) = *((_BYTE *)a2 + v37);
    v38 = a3[10];
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    *((_BYTE *)a1 + v38) = *((_BYTE *)a2 + v38);
    v39 = a3[11];
    v40 = (char *)a1 + v39;
    v41 = (char *)a2 + v39;
    v42 = *(_QWORD *)((char *)a2 + v39 + 24);
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v36);
    if (v42)
    {
      v43 = *((_QWORD *)v41 + 4);
      *((_QWORD *)v40 + 3) = v42;
      *((_QWORD *)v40 + 4) = v43;
      (**(void (***)(char *, char *, uint64_t))(v42 - 8))(v40, v41, v42);
    }
    else
    {
      v44 = *((_OWORD *)v41 + 1);
      *(_OWORD *)v40 = *(_OWORD *)v41;
      *((_OWORD *)v40 + 1) = v44;
      *((_QWORD *)v40 + 4) = *((_QWORD *)v41 + 4);
    }
    v45 = a3[12];
    v46 = *(_QWORD *)((char *)a2 + v45);
    *(_QWORD *)((char *)a1 + v45) = v46;
    swift_bridgeObjectRetain(v46);
  }
  return a1;
}

uint64_t destroy for Shelf(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = type metadata accessor for ShelfID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = type metadata accessor for ImpressionMetrics(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  v8 = a1 + a2[6];
  v9 = (int *)type metadata accessor for Shelf.Presentation(0);
  v10 = v8 + v9[5];
  v11 = type metadata accessor for Shelf.Presentation.HeaderIconType(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11))
  {
    switch(swift_getEnumCaseMultiPayload(v10, v11))
    {
      case 0u:
      case 2u:
      case 4u:
        swift_bridgeObjectRelease(*(_QWORD *)(v10 + 8));
        break;
      case 1u:
      case 3u:
        v12 = type metadata accessor for MediaArtwork(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
        break;
      default:
        break;
    }
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v8 + v9[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v8 + v9[8] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v8 + v9[9] + 8));
  v13 = (_QWORD *)(a1 + a2[11]);
  if (v13[3])
    sub_100004624(v13);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[12]));
}

uint64_t initializeWithCopy for Shelf(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;

  v6 = type metadata accessor for ShelfID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for ImpressionMetrics(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_100003304(&qword_10010C220);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v13 = a3[6];
  v14 = a1 + v13;
  v15 = a2 + v13;
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  v16 = (int *)type metadata accessor for Shelf.Presentation(0);
  v17 = v16[5];
  v18 = (void *)(v14 + v17);
  v19 = (const void *)(v15 + v17);
  v20 = type metadata accessor for Shelf.Presentation.HeaderIconType(0);
  if (!(*(unsigned int (**)(const void *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 48))(v19, 1, v20))
  {
    v22 = (char *)&loc_100013F9C + 4 * byte_1000C5AF1[swift_getEnumCaseMultiPayload(v19, v20)];
    __asm { BR              X10 }
  }
  v21 = sub_100003304(&qword_10010C1F8);
  memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  *(_BYTE *)(v14 + v16[6]) = *(_BYTE *)(v15 + v16[6]);
  v23 = v16[7];
  v24 = (_QWORD *)(v14 + v23);
  v25 = (_QWORD *)(v15 + v23);
  v26 = v25[1];
  *v24 = *v25;
  v24[1] = v26;
  v27 = v16[8];
  v28 = (_QWORD *)(v14 + v27);
  v29 = (_QWORD *)(v15 + v27);
  v30 = v29[1];
  *v28 = *v29;
  v28[1] = v30;
  v31 = v16[9];
  v32 = (_QWORD *)(v14 + v31);
  v33 = (_QWORD *)(v15 + v31);
  v34 = v33[1];
  *v32 = *v33;
  v32[1] = v34;
  v35 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v35) = *(_BYTE *)(a2 + v35);
  v36 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v36) = *(_BYTE *)(a2 + v36);
  v37 = a3[11];
  v38 = a1 + v37;
  v39 = a2 + v37;
  v40 = *(_QWORD *)(a2 + v37 + 24);
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v34);
  if (v40)
  {
    v41 = *(_QWORD *)(v39 + 32);
    *(_QWORD *)(v38 + 24) = v40;
    *(_QWORD *)(v38 + 32) = v41;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v40 - 8))(v38, v39, v40);
  }
  else
  {
    v42 = *(_OWORD *)(v39 + 16);
    *(_OWORD *)v38 = *(_OWORD *)v39;
    *(_OWORD *)(v38 + 16) = v42;
    *(_QWORD *)(v38 + 32) = *(_QWORD *)(v39 + 32);
  }
  v43 = a3[12];
  v44 = *(_QWORD *)(a2 + v43);
  *(_QWORD *)(a1 + v43) = v44;
  swift_bridgeObjectRetain(v44);
  return a1;
}

uint64_t assignWithCopy for Shelf(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  const void *v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t, uint64_t);
  int v25;
  size_t v26;
  void *v27;
  int *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 *v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int *v56;
  uint64_t v57;

  v6 = type metadata accessor for ShelfID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (void *)(a1 + v7);
  v9 = (void *)(a2 + v7);
  v10 = type metadata accessor for ImpressionMetrics(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    v15 = sub_100003304(&qword_10010C220);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 24))(v8, v9, v10);
LABEL_7:
  v56 = a3;
  v16 = a3[6];
  v17 = a1 + v16;
  v18 = a2 + v16;
  *(_BYTE *)(a1 + v16) = *(_BYTE *)(a2 + v16);
  v19 = (int *)type metadata accessor for Shelf.Presentation(0);
  v20 = v19[5];
  v21 = v17 + v20;
  v22 = (const void *)(v18 + v20);
  v23 = type metadata accessor for Shelf.Presentation.HeaderIconType(0);
  v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 48);
  v57 = v21;
  LODWORD(v21) = v24(v21, 1, v23);
  v25 = v24((uint64_t)v22, 1, v23);
  if ((_DWORD)v21)
  {
    if (!v25)
    {
      v29 = (char *)&loc_1000142EC + 4 * byte_1000C5AF6[swift_getEnumCaseMultiPayload(v22, v23)];
      __asm { BR              X10 }
    }
    v26 = *(_QWORD *)(*(_QWORD *)(sub_100003304(&qword_10010C1F8) - 8) + 64);
    v27 = (void *)v57;
    goto LABEL_12;
  }
  if (v25)
  {
    sub_1000106F0(v57, type metadata accessor for Shelf.Presentation.HeaderIconType);
    v26 = *(_QWORD *)(*(_QWORD *)(sub_100003304(&qword_10010C1F8) - 8) + 64);
    v27 = (void *)v57;
LABEL_12:
    memcpy(v27, v22, v26);
    v28 = v56;
    goto LABEL_17;
  }
  v28 = v56;
  if (a1 != a2)
  {
    sub_1000106F0(v57, type metadata accessor for Shelf.Presentation.HeaderIconType);
    v30 = (char *)&loc_100014368 + 4 * byte_1000C5AFB[swift_getEnumCaseMultiPayload(v22, v23)];
    __asm { BR              X10 }
  }
LABEL_17:
  *(_BYTE *)(v17 + v19[6]) = *(_BYTE *)(v18 + v19[6]);
  v31 = v19[7];
  v32 = (_QWORD *)(v17 + v31);
  v33 = (_QWORD *)(v18 + v31);
  *v32 = *v33;
  v34 = v33[1];
  v35 = v32[1];
  v32[1] = v34;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRelease(v35);
  v36 = v19[8];
  v37 = (_QWORD *)(v17 + v36);
  v38 = (_QWORD *)(v18 + v36);
  *v37 = *v38;
  v39 = v38[1];
  v40 = v37[1];
  v37[1] = v39;
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRelease(v40);
  v41 = v19[9];
  v42 = (_QWORD *)(v17 + v41);
  v43 = (_QWORD *)(v18 + v41);
  *v42 = *v43;
  v44 = v43[1];
  v45 = v42[1];
  v42[1] = v44;
  swift_bridgeObjectRetain(v44);
  swift_bridgeObjectRelease(v45);
  *(_BYTE *)(a1 + v28[7]) = *(_BYTE *)(a2 + v28[7]);
  *(_BYTE *)(a1 + v28[8]) = *(_BYTE *)(a2 + v28[8]);
  *(_BYTE *)(a1 + v28[9]) = *(_BYTE *)(a2 + v28[9]);
  *(_BYTE *)(a1 + v28[10]) = *(_BYTE *)(a2 + v28[10]);
  v46 = v28[11];
  v47 = a1 + v46;
  v48 = (__int128 *)(a2 + v46);
  v49 = *(_QWORD *)(a2 + v46 + 24);
  if (!*(_QWORD *)(a1 + v46 + 24))
  {
    if (v49)
    {
      *(_QWORD *)(v47 + 24) = v49;
      *(_QWORD *)(v47 + 32) = *((_QWORD *)v48 + 4);
      (**(void (***)(uint64_t, __int128 *))(v49 - 8))(v47, v48);
      goto LABEL_24;
    }
LABEL_23:
    v50 = *v48;
    v51 = v48[1];
    *(_QWORD *)(v47 + 32) = *((_QWORD *)v48 + 4);
    *(_OWORD *)v47 = v50;
    *(_OWORD *)(v47 + 16) = v51;
    goto LABEL_24;
  }
  if (!v49)
  {
    sub_100004624((_QWORD *)v47);
    goto LABEL_23;
  }
  sub_100012CF4((_QWORD *)v47, v48);
LABEL_24:
  v52 = v28[12];
  v53 = *(_QWORD *)(a2 + v52);
  v54 = *(_QWORD *)(a1 + v52);
  *(_QWORD *)(a1 + v52) = v53;
  swift_bridgeObjectRetain(v53);
  swift_bridgeObjectRelease(v54);
  return a1;
}

void sub_100014550(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = type metadata accessor for MediaArtwork(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a10, v11, v12);
  swift_storeEnumTagMultiPayload(a10, v10, 1);
  JUMPOUT(0x1000143E4);
}

void sub_100014588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  *a10 = *v11;
  v12 = v11[1];
  a10[1] = v12;
  swift_bridgeObjectRetain(v12);
  swift_storeEnumTagMultiPayload(a10, v10, 2);
  JUMPOUT(0x1000143E4);
}

void sub_1000145B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = type metadata accessor for MediaArtwork(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a10, v11, v12);
  swift_storeEnumTagMultiPayload(a10, v10, 3);
  JUMPOUT(0x1000143E4);
}

void sub_1000145EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  *a10 = *v11;
  v12 = v11[1];
  a10[1] = v12;
  swift_bridgeObjectRetain(v12);
  swift_storeEnumTagMultiPayload(a10, v10, 4);
  JUMPOUT(0x1000143E4);
}

uint64_t initializeWithTake for Shelf(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int EnumCaseMultiPayload;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;

  v6 = type metadata accessor for ShelfID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for ImpressionMetrics(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_100003304(&qword_10010C220);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v13 = a3[6];
  v14 = a1 + v13;
  v15 = a2 + v13;
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  v16 = (int *)type metadata accessor for Shelf.Presentation(0);
  v17 = v16[5];
  v18 = (void *)(v14 + v17);
  v19 = (const void *)(v15 + v17);
  v20 = type metadata accessor for Shelf.Presentation.HeaderIconType(0);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    v22 = sub_100003304(&qword_10010C1F8);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v19, v20);
    if (EnumCaseMultiPayload == 3)
    {
      v25 = type metadata accessor for MediaArtwork(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v18, v19, v25);
      swift_storeEnumTagMultiPayload(v18, v20, 3);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v24 = type metadata accessor for MediaArtwork(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v18, v19, v24);
      swift_storeEnumTagMultiPayload(v18, v20, 1);
    }
    else
    {
      memcpy(v18, v19, *(_QWORD *)(v21 + 64));
    }
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  *(_BYTE *)(v14 + v16[6]) = *(_BYTE *)(v15 + v16[6]);
  *(_OWORD *)(v14 + v16[7]) = *(_OWORD *)(v15 + v16[7]);
  *(_OWORD *)(v14 + v16[8]) = *(_OWORD *)(v15 + v16[8]);
  *(_OWORD *)(v14 + v16[9]) = *(_OWORD *)(v15 + v16[9]);
  v26 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v26) = *(_BYTE *)(a2 + v26);
  v27 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v27) = *(_BYTE *)(a2 + v27);
  v28 = a3[11];
  v29 = a3[12];
  v30 = a1 + v28;
  v31 = a2 + v28;
  v32 = *(_OWORD *)(v31 + 16);
  *(_OWORD *)v30 = *(_OWORD *)v31;
  *(_OWORD *)(v30 + 16) = v32;
  *(_QWORD *)(v30 + 32) = *(_QWORD *)(v31 + 32);
  *(_QWORD *)(a1 + v29) = *(_QWORD *)(a2 + v29);
  return a1;
}

uint64_t assignWithTake for Shelf(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t (*v23)(void *, uint64_t, uint64_t);
  void *v24;
  int v25;
  int EnumCaseMultiPayload;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  int *v34;
  void *v35;
  const void *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int *v70;

  v6 = type metadata accessor for ShelfID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (void *)(a1 + v7);
  v9 = (void *)(a2 + v7);
  v10 = type metadata accessor for ImpressionMetrics(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    v15 = sub_100003304(&qword_10010C220);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  v70 = a3;
  v16 = a3[6];
  v17 = a1 + v16;
  v18 = a2 + v16;
  *(_BYTE *)(a1 + v16) = *(_BYTE *)(a2 + v16);
  v69 = type metadata accessor for Shelf.Presentation(0);
  v19 = *(int *)(v69 + 20);
  v20 = (void *)(v17 + v19);
  v21 = (void *)(v18 + v19);
  v22 = type metadata accessor for Shelf.Presentation.HeaderIconType(0);
  v68 = *(_QWORD *)(v22 - 8);
  v23 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v68 + 48);
  v24 = v20;
  LODWORD(v20) = v23(v20, 1, v22);
  v25 = v23(v21, 1, v22);
  if ((_DWORD)v20)
  {
    if (!v25)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v21, v22);
      v27 = v24;
      if (EnumCaseMultiPayload == 3)
      {
        v39 = type metadata accessor for MediaArtwork(0);
        (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v39 - 8) + 32))(v24, v21, v39);
        v29 = v24;
        v30 = v22;
        v31 = 3;
      }
      else
      {
        if (EnumCaseMultiPayload != 1)
        {
          v40 = v68;
          memcpy(v27, v21, *(_QWORD *)(v68 + 64));
          v34 = (int *)v69;
          v33 = v70;
          goto LABEL_23;
        }
        v28 = type metadata accessor for MediaArtwork(0);
        (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v24, v21, v28);
        v29 = v24;
        v30 = v22;
        v31 = 1;
      }
      swift_storeEnumTagMultiPayload(v29, v30, v31);
      v34 = (int *)v69;
      v33 = v70;
      v40 = v68;
LABEL_23:
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v27, 0, 1, v22);
      goto LABEL_24;
    }
LABEL_14:
    v32 = sub_100003304(&qword_10010C1F8);
    memcpy(v24, v21, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    v34 = (int *)v69;
    v33 = v70;
    goto LABEL_24;
  }
  if (v25)
  {
    sub_1000106F0((uint64_t)v24, type metadata accessor for Shelf.Presentation.HeaderIconType);
    goto LABEL_14;
  }
  v35 = v24;
  v36 = v21;
  v34 = (int *)v69;
  v33 = v70;
  if (a1 != a2)
  {
    sub_1000106F0((uint64_t)v35, type metadata accessor for Shelf.Presentation.HeaderIconType);
    v37 = swift_getEnumCaseMultiPayload(v36, v22);
    if (v37 == 3)
    {
      v67 = type metadata accessor for MediaArtwork(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v67 - 8) + 32))(v35, v36, v67);
      swift_storeEnumTagMultiPayload(v35, v22, 3);
    }
    else if (v37 == 1)
    {
      v38 = type metadata accessor for MediaArtwork(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v35, v36, v38);
      swift_storeEnumTagMultiPayload(v35, v22, 1);
    }
    else
    {
      memcpy(v35, v36, *(_QWORD *)(v68 + 64));
    }
  }
LABEL_24:
  *(_BYTE *)(v17 + v34[6]) = *(_BYTE *)(v18 + v34[6]);
  v41 = v34[7];
  v42 = (_QWORD *)(v17 + v41);
  v43 = (uint64_t *)(v18 + v41);
  v45 = *v43;
  v44 = v43[1];
  v46 = v42[1];
  *v42 = v45;
  v42[1] = v44;
  swift_bridgeObjectRelease(v46);
  v47 = v34[8];
  v48 = (_QWORD *)(v17 + v47);
  v49 = (uint64_t *)(v18 + v47);
  v51 = *v49;
  v50 = v49[1];
  v52 = v48[1];
  *v48 = v51;
  v48[1] = v50;
  swift_bridgeObjectRelease(v52);
  v53 = v34[9];
  v54 = (_QWORD *)(v17 + v53);
  v55 = (uint64_t *)(v18 + v53);
  v57 = *v55;
  v56 = v55[1];
  v58 = v54[1];
  *v54 = v57;
  v54[1] = v56;
  swift_bridgeObjectRelease(v58);
  v59 = v33[8];
  *(_BYTE *)(a1 + v33[7]) = *(_BYTE *)(a2 + v33[7]);
  *(_BYTE *)(a1 + v59) = *(_BYTE *)(a2 + v59);
  v60 = v33[10];
  *(_BYTE *)(a1 + v33[9]) = *(_BYTE *)(a2 + v33[9]);
  *(_BYTE *)(a1 + v60) = *(_BYTE *)(a2 + v60);
  v61 = v33[11];
  v62 = a1 + v61;
  if (*(_QWORD *)(a1 + v61 + 24))
    sub_100004624((_QWORD *)(a1 + v61));
  v63 = *(_OWORD *)(a2 + v61 + 16);
  *(_OWORD *)v62 = *(_OWORD *)(a2 + v61);
  *(_OWORD *)(v62 + 16) = v63;
  *(_QWORD *)(v62 + 32) = *(_QWORD *)(a2 + v61 + 32);
  v64 = v33[12];
  v65 = *(_QWORD *)(a1 + v64);
  *(_QWORD *)(a1 + v64) = *(_QWORD *)(a2 + v64);
  swift_bridgeObjectRelease(v65);
  return a1;
}

uint64_t getEnumTagSinglePayload for Shelf(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100014CE4);
}

uint64_t sub_100014CE4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;

  v6 = type metadata accessor for ShelfID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_100003304(&qword_10010C220);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_7:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = type metadata accessor for Shelf.Presentation(0);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[6];
    goto LABEL_7;
  }
  v16 = *(_QWORD *)(a1 + a3[12]);
  if (v16 >= 0xFFFFFFFF)
    LODWORD(v16) = -1;
  return (v16 + 1);
}

uint64_t storeEnumTagSinglePayload for Shelf(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100014DC0);
}

uint64_t sub_100014DC0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  v8 = type metadata accessor for ShelfID(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = sub_100003304(&qword_10010C220);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[5];
LABEL_7:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for Shelf.Presentation(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[6];
    goto LABEL_7;
  }
  *(_QWORD *)(a1 + a4[12]) = (a2 - 1);
  return result;
}

void sub_100014E8C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[9];

  v2 = type metadata accessor for ShelfID(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100014F74(319, (unint64_t *)&unk_10010C4C8, (uint64_t (*)(uint64_t))&type metadata accessor for ImpressionMetrics);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      v6 = type metadata accessor for Shelf.Presentation(319);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        v8[3] = &unk_1000C6718;
        v8[4] = &unk_1000C65F8;
        v8[5] = &unk_1000C6730;
        v8[6] = &unk_1000C65F8;
        v8[7] = &unk_1000C6748;
        v8[8] = (char *)&value witness table for Builtin.BridgeObject + 64;
        swift_initStructMetadata(a1, 256, 9, v8, a1 + 16);
      }
    }
  }
}

void sub_100014F74(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Optional(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

ValueMetadata *type metadata accessor for Shelf.Orientation()
{
  return &type metadata for Shelf.Orientation;
}

_QWORD *initializeBufferWithCopyOfBuffer for Shelf.Presentation(_BYTE *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    *a1 = *(_BYTE *)a2;
    v7 = a3[5];
    v8 = &a1[v7];
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for Shelf.Presentation.HeaderIconType(0);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10))
    {
      v13 = (char *)&loc_1000150AC + 4 * byte_1000C5B00[swift_getEnumCaseMultiPayload(v9, v10)];
      __asm { BR              X10 }
    }
    v11 = sub_100003304(&qword_10010C1F8);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    v14 = a3[7];
    *((_BYTE *)v4 + a3[6]) = *((_BYTE *)a2 + a3[6]);
    v15 = (_QWORD *)((char *)v4 + v14);
    v16 = (_QWORD *)((char *)a2 + v14);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    v18 = a3[8];
    v19 = a3[9];
    v20 = (_QWORD *)((char *)v4 + v18);
    v21 = (_QWORD *)((char *)a2 + v18);
    v22 = v21[1];
    *v20 = *v21;
    v20[1] = v22;
    v23 = (_QWORD *)((char *)v4 + v19);
    v24 = (_QWORD *)((char *)a2 + v19);
    v25 = v24[1];
    *v23 = *v24;
    v23[1] = v25;
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v25);
  }
  return v4;
}

uint64_t destroy for Shelf.Presentation(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a1 + a2[5];
  v5 = type metadata accessor for Shelf.Presentation.HeaderIconType(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    switch(swift_getEnumCaseMultiPayload(v4, v5))
    {
      case 0u:
      case 2u:
      case 4u:
        swift_bridgeObjectRelease(*(_QWORD *)(v4 + 8));
        break;
      case 1u:
      case 3u:
        v6 = type metadata accessor for MediaArtwork(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
        break;
      default:
        break;
    }
  }
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[9] + 8));
}

_BYTE *initializeWithCopy for Shelf.Presentation(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for Shelf.Presentation.HeaderIconType(0);
  if (!(*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9))
  {
    v11 = (char *)&loc_100015300 + 4 * byte_1000C5B0A[swift_getEnumCaseMultiPayload(v8, v9)];
    __asm { BR              X10 }
  }
  v10 = sub_100003304(&qword_10010C1F8);
  memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  v12 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v16 = a3[8];
  v17 = a3[9];
  v18 = &a1[v16];
  v19 = &a2[v16];
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  v21 = &a1[v17];
  v22 = &a2[v17];
  v23 = v22[1];
  *v21 = *v22;
  v21[1] = v23;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v23);
  return a1;
}

_BYTE *assignWithCopy for Shelf.Presentation(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t (*v10)(_BYTE *, uint64_t, uint64_t);
  int v11;
  int v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for Shelf.Presentation.HeaderIconType(0);
  v10 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48);
  v11 = v10(v7, 1, v9);
  v12 = v10(v8, 1, v9);
  if (v11)
  {
    if (!v12)
    {
      v13 = (char *)&loc_100015470 + 4 * byte_1000C5B0F[swift_getEnumCaseMultiPayload(v8, v9)];
      __asm { BR              X10 }
    }
    goto LABEL_6;
  }
  if (v12)
  {
    sub_1000106F0((uint64_t)v7, type metadata accessor for Shelf.Presentation.HeaderIconType);
LABEL_6:
    v14 = sub_100003304(&qword_10010C1F8);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_9;
  }
  if (a1 != a2)
  {
    sub_1000106F0((uint64_t)v7, type metadata accessor for Shelf.Presentation.HeaderIconType);
    v15 = (char *)&loc_100015500 + 4 * byte_1000C5B14[swift_getEnumCaseMultiPayload(v8, v9)];
    __asm { BR              X10 }
  }
LABEL_9:
  a1[a3[6]] = a2[a3[6]];
  v16 = a3[7];
  v17 = &a1[v16];
  v18 = &a2[v16];
  *v17 = *v18;
  v19 = v18[1];
  v20 = v17[1];
  v17[1] = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  v21 = a3[8];
  v22 = &a1[v21];
  v23 = &a2[v21];
  *v22 = *v23;
  v24 = v23[1];
  v25 = v22[1];
  v22[1] = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  v26 = a3[9];
  v27 = &a1[v26];
  v28 = &a2[v26];
  *v27 = *v28;
  v29 = v28[1];
  v30 = v27[1];
  v27[1] = v29;
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRelease(v30);
  return a1;
}

void sub_100015620()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = type metadata accessor for MediaArtwork(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v0, v2, v3);
  swift_storeEnumTagMultiPayload(v0, v1, 1);
  JUMPOUT(0x100015570);
}

void sub_100015654()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  *v0 = *v2;
  v3 = v2[1];
  v0[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_storeEnumTagMultiPayload(v0, v1, 2);
  JUMPOUT(0x100015570);
}

void sub_10001567C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = type metadata accessor for MediaArtwork(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v0, v2, v3);
  swift_storeEnumTagMultiPayload(v0, v1, 3);
  JUMPOUT(0x100015570);
}

void sub_1000156B0()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  *v0 = *v2;
  v3 = v2[1];
  v0[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_storeEnumTagMultiPayload(v0, v1, 4);
  JUMPOUT(0x100015570);
}

_BYTE *initializeWithTake for Shelf.Presentation(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int EnumCaseMultiPayload;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for Shelf.Presentation.HeaderIconType(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_100003304(&qword_10010C1F8);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v8, v9);
    if (EnumCaseMultiPayload == 3)
    {
      v14 = type metadata accessor for MediaArtwork(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v7, v8, v14);
      swift_storeEnumTagMultiPayload(v7, v9, 3);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v13 = type metadata accessor for MediaArtwork(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v7, v8, v13);
      swift_storeEnumTagMultiPayload(v7, v9, 1);
    }
    else
    {
      memcpy(v7, v8, *(_QWORD *)(v10 + 64));
    }
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v15 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  *(_OWORD *)&a1[v15] = *(_OWORD *)&a2[v15];
  v16 = a3[9];
  *(_OWORD *)&a1[a3[8]] = *(_OWORD *)&a2[a3[8]];
  *(_OWORD *)&a1[v16] = *(_OWORD *)&a2[v16];
  return a1;
}

_BYTE *assignWithTake for Shelf.Presentation(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_BYTE *, uint64_t, uint64_t);
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  size_t v16;
  int EnumCaseMultiPayload;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for Shelf.Presentation.HeaderIconType(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      if (a1 == a2)
        goto LABEL_17;
      sub_1000106F0((uint64_t)v7, type metadata accessor for Shelf.Presentation.HeaderIconType);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v8, v9);
      if (EnumCaseMultiPayload == 3)
      {
        v39 = type metadata accessor for MediaArtwork(0);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v39 - 8) + 32))(v7, v8, v39);
        swift_storeEnumTagMultiPayload(v7, v9, 3);
        goto LABEL_17;
      }
      if (EnumCaseMultiPayload == 1)
      {
        v18 = type metadata accessor for MediaArtwork(0);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v7, v8, v18);
        swift_storeEnumTagMultiPayload(v7, v9, 1);
        goto LABEL_17;
      }
      v16 = *(_QWORD *)(v10 + 64);
      goto LABEL_9;
    }
    sub_1000106F0((uint64_t)v7, type metadata accessor for Shelf.Presentation.HeaderIconType);
LABEL_8:
    v16 = *(_QWORD *)(*(_QWORD *)(sub_100003304(&qword_10010C1F8) - 8) + 64);
LABEL_9:
    memcpy(v7, v8, v16);
    goto LABEL_17;
  }
  if (v13)
    goto LABEL_8;
  v14 = swift_getEnumCaseMultiPayload(v8, v9);
  if (v14 == 3)
  {
    v19 = type metadata accessor for MediaArtwork(0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v7, v8, v19);
    swift_storeEnumTagMultiPayload(v7, v9, 3);
  }
  else if (v14 == 1)
  {
    v15 = type metadata accessor for MediaArtwork(0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v7, v8, v15);
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(v10 + 64));
  }
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_17:
  v20 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  v21 = &a1[v20];
  v22 = (uint64_t *)&a2[v20];
  v24 = *v22;
  v23 = v22[1];
  v25 = v21[1];
  *v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease(v25);
  v26 = a3[8];
  v27 = &a1[v26];
  v28 = (uint64_t *)&a2[v26];
  v30 = *v28;
  v29 = v28[1];
  v31 = v27[1];
  *v27 = v30;
  v27[1] = v29;
  swift_bridgeObjectRelease(v31);
  v32 = a3[9];
  v33 = &a1[v32];
  v34 = (uint64_t *)&a2[v32];
  v36 = *v34;
  v35 = v34[1];
  v37 = v33[1];
  *v33 = v36;
  v33[1] = v35;
  swift_bridgeObjectRelease(v37);
  return a1;
}

uint64_t getEnumTagSinglePayload for Shelf.Presentation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100015AD8);
}

uint64_t sub_100015AD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_100003304(&qword_10010C1F8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 28) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for Shelf.Presentation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100015B6C);
}

uint64_t sub_100015B6C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100003304(&qword_10010C1F8);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 28) + 8) = (a2 - 1);
  return result;
}

void sub_100015BF0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = &unk_1000C6718;
  sub_100014F74(319, (unint64_t *)&unk_10010C580, type metadata accessor for Shelf.Presentation.HeaderIconType);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = &unk_1000C65F8;
    v4[3] = &unk_1000C65E0;
    v4[4] = &unk_1000C6780;
    v4[5] = &unk_1000C6780;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
  }
}

ValueMetadata *type metadata accessor for Shelf.Visibility()
{
  return &type metadata for Shelf.Visibility;
}

ValueMetadata *type metadata accessor for Shelf.AccessoryType()
{
  return &type metadata for Shelf.AccessoryType;
}

unint64_t sub_100015CC0()
{
  unint64_t result;

  result = qword_10010C5C0;
  if (!qword_10010C5C0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AnyShape, &type metadata for AnyShape);
    atomic_store(result, (unint64_t *)&qword_10010C5C0);
  }
  return result;
}

ValueMetadata *type metadata accessor for Shelf.CodingKeys()
{
  return &type metadata for Shelf.CodingKeys;
}

ValueMetadata *type metadata accessor for Shelf.Presentation.HeaderIconAlignment()
{
  return &type metadata for Shelf.Presentation.HeaderIconAlignment;
}

uint64_t getEnumTagSinglePayload for Shelf.Presentation.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Shelf.Presentation.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_100015E08 + 4 * byte_1000C5B1E[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100015E3C + 4 * byte_1000C5B19[v4]))();
}

uint64_t sub_100015E3C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100015E44(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100015E4CLL);
  return result;
}

uint64_t sub_100015E58(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100015E60);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_100015E64(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100015E6C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Shelf.Presentation.CodingKeys()
{
  return &type metadata for Shelf.Presentation.CodingKeys;
}

uint64_t sub_100015E88(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_100015ED8 + 4 * byte_1000C5B23[swift_getEnumCaseMultiPayload(a2, a3)];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain(v6);
  return v7;
}

uint64_t sub_100015FC0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((int)result)
  {
    case 0:
    case 2:
    case 4:
      result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      break;
    case 1:
    case 3:
      v4 = type metadata accessor for MediaArtwork(0);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
      break;
    default:
      return result;
  }
  return result;
}

void sub_100016038(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;

  v3 = (char *)sub_10001607C + 4 * byte_1000C5B2D[swift_getEnumCaseMultiPayload(a2, a3)];
  __asm { BR              X10 }
}

_QWORD *sub_10001607C()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v3 = v2[1];
  *v0 = *v2;
  v0[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_storeEnumTagMultiPayload(v0, v1, 0);
  return v0;
}

uint64_t sub_100016144(uint64_t result, uint64_t a2, uint64_t a3)
{
  char *v5;

  if (result != a2)
  {
    sub_1000106F0(result, type metadata accessor for Shelf.Presentation.HeaderIconType);
    v5 = (char *)&loc_1000161A0 + 4 * byte_1000C5B32[swift_getEnumCaseMultiPayload(a2, a3)];
    __asm { BR              X10 }
  }
  return result;
}

void *sub_100016280(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 3)
  {
    v8 = type metadata accessor for MediaArtwork(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload(a1, a3, 3);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v7 = type metadata accessor for MediaArtwork(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_100016348(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    sub_1000106F0((uint64_t)a1, type metadata accessor for Shelf.Presentation.HeaderIconType);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 3)
    {
      v8 = type metadata accessor for MediaArtwork(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload(a1, a3, 3);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v7 = type metadata accessor for MediaArtwork(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100016428(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t sub_100016434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_100016444(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t sub_100016454(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;

  v4 = &unk_1000C65E0;
  result = type metadata accessor for MediaArtwork(319);
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(result - 8) + 64;
    v6 = &unk_1000C65E0;
    v7 = v5;
    v8 = &unk_1000C65E0;
    swift_initEnumMetadataMultiPayload(a1, 256, 5, &v4);
    return 0;
  }
  return result;
}

_BYTE *sub_1000164C8(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ImageProviding.CodingKeys()
{
  return &type metadata for ImageProviding.CodingKeys;
}

ValueMetadata *type metadata accessor for ImageProviding.BundleImageCodingKeys()
{
  return &type metadata for ImageProviding.BundleImageCodingKeys;
}

ValueMetadata *type metadata accessor for ImageProviding.SystemSymbolCodingKeys()
{
  return &type metadata for ImageProviding.SystemSymbolCodingKeys;
}

uint64_t _s13GameOverlayUI16TitleDisplayModeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100016558 + 4 * byte_1000C5B3C[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10001658C + 4 * byte_1000C5B37[v4]))();
}

uint64_t sub_10001658C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100016594(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10001659CLL);
  return result;
}

uint64_t sub_1000165A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000165B0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1000165B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000165BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PageMenuToolbarItem.CodingKeys()
{
  return &type metadata for PageMenuToolbarItem.CodingKeys;
}

ValueMetadata *type metadata accessor for PageToolbarItem.CodingKeys()
{
  return &type metadata for PageToolbarItem.CodingKeys;
}

ValueMetadata *type metadata accessor for PageToolbarItem.Appearance.CodingKeys()
{
  return &type metadata for PageToolbarItem.Appearance.CodingKeys;
}

ValueMetadata *type metadata accessor for PageToolbarItem.Appearance.PlayerAvatarCodingKeys()
{
  return &type metadata for PageToolbarItem.Appearance.PlayerAvatarCodingKeys;
}

ValueMetadata *type metadata accessor for PageToolbarItem.Appearance.ButtonCodingKeys()
{
  return &type metadata for PageToolbarItem.Appearance.ButtonCodingKeys;
}

ValueMetadata *type metadata accessor for PageToolbarItem.Appearance.MenuCodingKeys()
{
  return &type metadata for PageToolbarItem.Appearance.MenuCodingKeys;
}

ValueMetadata *type metadata accessor for PageToolbarItemGroups.CodingKeys()
{
  return &type metadata for PageToolbarItemGroups.CodingKeys;
}

uint64_t initializeBufferWithCopyOfBuffer for Page.RefreshCondition(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for Page.RefreshCondition(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Page.RefreshCondition(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_1000166D8(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_1000166F0(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Page.RefreshCondition()
{
  return &type metadata for Page.RefreshCondition;
}

uint64_t _s13GameOverlayUI5ShelfV10CodingKeysOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s13GameOverlayUI5ShelfV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_1000167F4 + 4 * byte_1000C5B46[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_100016828 + 4 * byte_1000C5B41[v4]))();
}

uint64_t sub_100016828(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100016830(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100016838);
  return result;
}

uint64_t sub_100016844(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10001684CLL);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_100016850(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100016858(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Page.CodingKeys()
{
  return &type metadata for Page.CodingKeys;
}

ValueMetadata *type metadata accessor for Page.Background.CodingKeys()
{
  return &type metadata for Page.Background.CodingKeys;
}

uint64_t getEnumTagSinglePayload for AccessPointIconType.BundleCodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s13GameOverlayUI15PageToolbarItemV10AppearanceO21ButtonBackgroundShapeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100016960 + 4 * byte_1000C5B50[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100016994 + 4 * byte_1000C5B4B[v4]))();
}

uint64_t sub_100016994(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001699C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000169A4);
  return result;
}

uint64_t sub_1000169B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000169B8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000169BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000169C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Page.Background.ZoomTranslationCodingKeys()
{
  return &type metadata for Page.Background.ZoomTranslationCodingKeys;
}

unint64_t sub_1000169E4()
{
  unint64_t result;

  result = qword_10010C670;
  if (!qword_10010C670)
  {
    result = swift_getWitnessTable(&unk_1000C693C, &type metadata for Page.Background.ZoomTranslationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C670);
  }
  return result;
}

unint64_t sub_100016A2C()
{
  unint64_t result;

  result = qword_10010C678;
  if (!qword_10010C678)
  {
    result = swift_getWitnessTable(&unk_1000C69F4, &type metadata for Page.Background.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C678);
  }
  return result;
}

unint64_t sub_100016A74()
{
  unint64_t result;

  result = qword_10010C680;
  if (!qword_10010C680)
  {
    result = swift_getWitnessTable(&unk_1000C6AAC, &type metadata for Page.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C680);
  }
  return result;
}

unint64_t sub_100016ABC()
{
  unint64_t result;

  result = qword_10010C688;
  if (!qword_10010C688)
  {
    result = swift_getWitnessTable(&unk_1000C6B8C, &type metadata for PageToolbarItemGroups.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C688);
  }
  return result;
}

unint64_t sub_100016B04()
{
  unint64_t result;

  result = qword_10010C690;
  if (!qword_10010C690)
  {
    result = swift_getWitnessTable(&unk_1000C6C44, &type metadata for PageToolbarItem.Appearance.MenuCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C690);
  }
  return result;
}

unint64_t sub_100016B4C()
{
  unint64_t result;

  result = qword_10010C698;
  if (!qword_10010C698)
  {
    result = swift_getWitnessTable(&unk_1000C6CFC, &type metadata for PageToolbarItem.Appearance.ButtonCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C698);
  }
  return result;
}

unint64_t sub_100016B94()
{
  unint64_t result;

  result = qword_10010C6A0;
  if (!qword_10010C6A0)
  {
    result = swift_getWitnessTable(&unk_1000C6DB4, &type metadata for PageToolbarItem.Appearance.PlayerAvatarCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C6A0);
  }
  return result;
}

unint64_t sub_100016BDC()
{
  unint64_t result;

  result = qword_10010C6A8;
  if (!qword_10010C6A8)
  {
    result = swift_getWitnessTable(&unk_1000C6E6C, &type metadata for PageToolbarItem.Appearance.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C6A8);
  }
  return result;
}

unint64_t sub_100016C24()
{
  unint64_t result;

  result = qword_10010C6B0;
  if (!qword_10010C6B0)
  {
    result = swift_getWitnessTable(&unk_1000C6F24, &type metadata for PageToolbarItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C6B0);
  }
  return result;
}

unint64_t sub_100016C6C()
{
  unint64_t result;

  result = qword_10010C6B8;
  if (!qword_10010C6B8)
  {
    result = swift_getWitnessTable(&unk_1000C6FDC, &type metadata for PageMenuToolbarItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C6B8);
  }
  return result;
}

unint64_t sub_100016CB4()
{
  unint64_t result;

  result = qword_10010C6C0;
  if (!qword_10010C6C0)
  {
    result = swift_getWitnessTable(&unk_1000C7094, &type metadata for ImageProviding.SystemSymbolCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C6C0);
  }
  return result;
}

unint64_t sub_100016CFC()
{
  unint64_t result;

  result = qword_10010C6C8;
  if (!qword_10010C6C8)
  {
    result = swift_getWitnessTable(&unk_1000C714C, &type metadata for ImageProviding.BundleImageCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C6C8);
  }
  return result;
}

unint64_t sub_100016D44()
{
  unint64_t result;

  result = qword_10010C6D0;
  if (!qword_10010C6D0)
  {
    result = swift_getWitnessTable(&unk_1000C7204, &type metadata for ImageProviding.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C6D0);
  }
  return result;
}

unint64_t sub_100016D8C()
{
  unint64_t result;

  result = qword_10010C6D8;
  if (!qword_10010C6D8)
  {
    result = swift_getWitnessTable(&unk_1000C72BC, &type metadata for Shelf.Presentation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C6D8);
  }
  return result;
}

unint64_t sub_100016DD4()
{
  unint64_t result;

  result = qword_10010C6E0;
  if (!qword_10010C6E0)
  {
    result = swift_getWitnessTable(&unk_1000C735C, &type metadata for Shelf.Presentation.HeaderIconAlignment);
    atomic_store(result, (unint64_t *)&qword_10010C6E0);
  }
  return result;
}

unint64_t sub_100016E1C()
{
  unint64_t result;

  result = qword_10010C6E8;
  if (!qword_10010C6E8)
  {
    result = swift_getWitnessTable(&unk_1000C7414, &type metadata for Shelf.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C6E8);
  }
  return result;
}

unint64_t sub_100016E64()
{
  unint64_t result;

  result = qword_10010C6F0;
  if (!qword_10010C6F0)
  {
    result = swift_getWitnessTable(&unk_1000C7384, &type metadata for Shelf.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C6F0);
  }
  return result;
}

unint64_t sub_100016EAC()
{
  unint64_t result;

  result = qword_10010C6F8;
  if (!qword_10010C6F8)
  {
    result = swift_getWitnessTable(&unk_1000C73AC, &type metadata for Shelf.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C6F8);
  }
  return result;
}

unint64_t sub_100016EF4()
{
  unint64_t result;

  result = qword_10010C700;
  if (!qword_10010C700)
  {
    result = swift_getWitnessTable(&unk_1000C722C, &type metadata for Shelf.Presentation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C700);
  }
  return result;
}

unint64_t sub_100016F3C()
{
  unint64_t result;

  result = qword_10010C708;
  if (!qword_10010C708)
  {
    result = swift_getWitnessTable(&unk_1000C7254, &type metadata for Shelf.Presentation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C708);
  }
  return result;
}

unint64_t sub_100016F84()
{
  unint64_t result;

  result = qword_10010C710;
  if (!qword_10010C710)
  {
    result = swift_getWitnessTable(&unk_1000C70BC, &type metadata for ImageProviding.BundleImageCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C710);
  }
  return result;
}

unint64_t sub_100016FCC()
{
  unint64_t result;

  result = qword_10010C718;
  if (!qword_10010C718)
  {
    result = swift_getWitnessTable(&unk_1000C70E4, &type metadata for ImageProviding.BundleImageCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C718);
  }
  return result;
}

unint64_t sub_100017014()
{
  unint64_t result;

  result = qword_10010C720;
  if (!qword_10010C720)
  {
    result = swift_getWitnessTable(&unk_1000C7004, &type metadata for ImageProviding.SystemSymbolCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C720);
  }
  return result;
}

unint64_t sub_10001705C()
{
  unint64_t result;

  result = qword_10010C728;
  if (!qword_10010C728)
  {
    result = swift_getWitnessTable(&unk_1000C702C, &type metadata for ImageProviding.SystemSymbolCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C728);
  }
  return result;
}

unint64_t sub_1000170A4()
{
  unint64_t result;

  result = qword_10010C730;
  if (!qword_10010C730)
  {
    result = swift_getWitnessTable(&unk_1000C7174, &type metadata for ImageProviding.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C730);
  }
  return result;
}

unint64_t sub_1000170EC()
{
  unint64_t result;

  result = qword_10010C738;
  if (!qword_10010C738)
  {
    result = swift_getWitnessTable(&unk_1000C719C, &type metadata for ImageProviding.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C738);
  }
  return result;
}

unint64_t sub_100017134()
{
  unint64_t result;

  result = qword_10010C740;
  if (!qword_10010C740)
  {
    result = swift_getWitnessTable(&unk_1000C6F4C, &type metadata for PageMenuToolbarItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C740);
  }
  return result;
}

unint64_t sub_10001717C()
{
  unint64_t result;

  result = qword_10010C748;
  if (!qword_10010C748)
  {
    result = swift_getWitnessTable(&unk_1000C6F74, &type metadata for PageMenuToolbarItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C748);
  }
  return result;
}

unint64_t sub_1000171C4()
{
  unint64_t result;

  result = qword_10010C750;
  if (!qword_10010C750)
  {
    result = swift_getWitnessTable(&unk_1000C6E94, &type metadata for PageToolbarItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C750);
  }
  return result;
}

unint64_t sub_10001720C()
{
  unint64_t result;

  result = qword_10010C758;
  if (!qword_10010C758)
  {
    result = swift_getWitnessTable(&unk_1000C6EBC, &type metadata for PageToolbarItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C758);
  }
  return result;
}

unint64_t sub_100017254()
{
  unint64_t result;

  result = qword_10010C760;
  if (!qword_10010C760)
  {
    result = swift_getWitnessTable(&unk_1000C6D24, &type metadata for PageToolbarItem.Appearance.PlayerAvatarCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C760);
  }
  return result;
}

unint64_t sub_10001729C()
{
  unint64_t result;

  result = qword_10010C768;
  if (!qword_10010C768)
  {
    result = swift_getWitnessTable(&unk_1000C6D4C, &type metadata for PageToolbarItem.Appearance.PlayerAvatarCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C768);
  }
  return result;
}

unint64_t sub_1000172E4()
{
  unint64_t result;

  result = qword_10010C770;
  if (!qword_10010C770)
  {
    result = swift_getWitnessTable(&unk_1000C6C6C, &type metadata for PageToolbarItem.Appearance.ButtonCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C770);
  }
  return result;
}

unint64_t sub_10001732C()
{
  unint64_t result;

  result = qword_10010C778;
  if (!qword_10010C778)
  {
    result = swift_getWitnessTable(&unk_1000C6C94, &type metadata for PageToolbarItem.Appearance.ButtonCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C778);
  }
  return result;
}

unint64_t sub_100017374()
{
  unint64_t result;

  result = qword_10010C780;
  if (!qword_10010C780)
  {
    result = swift_getWitnessTable(&unk_1000C6BB4, &type metadata for PageToolbarItem.Appearance.MenuCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C780);
  }
  return result;
}

unint64_t sub_1000173BC()
{
  unint64_t result;

  result = qword_10010C788;
  if (!qword_10010C788)
  {
    result = swift_getWitnessTable(&unk_1000C6BDC, &type metadata for PageToolbarItem.Appearance.MenuCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C788);
  }
  return result;
}

unint64_t sub_100017404()
{
  unint64_t result;

  result = qword_10010C790;
  if (!qword_10010C790)
  {
    result = swift_getWitnessTable(&unk_1000C6DDC, &type metadata for PageToolbarItem.Appearance.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C790);
  }
  return result;
}

unint64_t sub_10001744C()
{
  unint64_t result;

  result = qword_10010C798;
  if (!qword_10010C798)
  {
    result = swift_getWitnessTable(&unk_1000C6E04, &type metadata for PageToolbarItem.Appearance.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C798);
  }
  return result;
}

unint64_t sub_100017494()
{
  unint64_t result;

  result = qword_10010C7A0;
  if (!qword_10010C7A0)
  {
    result = swift_getWitnessTable(&unk_1000C6AFC, &type metadata for PageToolbarItemGroups.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C7A0);
  }
  return result;
}

unint64_t sub_1000174DC()
{
  unint64_t result;

  result = qword_10010C7A8;
  if (!qword_10010C7A8)
  {
    result = swift_getWitnessTable(&unk_1000C6B24, &type metadata for PageToolbarItemGroups.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C7A8);
  }
  return result;
}

unint64_t sub_100017524()
{
  unint64_t result;

  result = qword_10010C7B0;
  if (!qword_10010C7B0)
  {
    result = swift_getWitnessTable(&unk_1000C6A1C, &type metadata for Page.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C7B0);
  }
  return result;
}

unint64_t sub_10001756C()
{
  unint64_t result;

  result = qword_10010C7B8;
  if (!qword_10010C7B8)
  {
    result = swift_getWitnessTable(&unk_1000C6A44, &type metadata for Page.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C7B8);
  }
  return result;
}

unint64_t sub_1000175B4()
{
  unint64_t result;

  result = qword_10010C7C0;
  if (!qword_10010C7C0)
  {
    result = swift_getWitnessTable(&unk_1000C68AC, &type metadata for Page.Background.ZoomTranslationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C7C0);
  }
  return result;
}

unint64_t sub_1000175FC()
{
  unint64_t result;

  result = qword_10010C7C8;
  if (!qword_10010C7C8)
  {
    result = swift_getWitnessTable(&unk_1000C68D4, &type metadata for Page.Background.ZoomTranslationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C7C8);
  }
  return result;
}

unint64_t sub_100017644()
{
  unint64_t result;

  result = qword_10010C7D0;
  if (!qword_10010C7D0)
  {
    result = swift_getWitnessTable(&unk_1000C6964, &type metadata for Page.Background.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C7D0);
  }
  return result;
}

unint64_t sub_10001768C()
{
  unint64_t result;

  result = qword_10010C7D8;
  if (!qword_10010C7D8)
  {
    result = swift_getWitnessTable(&unk_1000C698C, &type metadata for Page.Background.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C7D8);
  }
  return result;
}

unint64_t sub_1000176D0()
{
  unint64_t result;

  result = qword_10010C800;
  if (!qword_10010C800)
  {
    result = swift_getWitnessTable(&unk_1000C8450, &type metadata for Page.RefreshCondition.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C800);
  }
  return result;
}

unint64_t sub_100017714()
{
  unint64_t result;

  result = qword_10010C808;
  if (!qword_10010C808)
  {
    result = swift_getWitnessTable(&unk_1000C8400, &type metadata for Page.RefreshCondition.OnForegroundCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C808);
  }
  return result;
}

unint64_t sub_100017758()
{
  unint64_t result;

  result = qword_10010C810;
  if (!qword_10010C810)
  {
    result = swift_getWitnessTable(&unk_1000C83B0, &type metadata for Page.RefreshCondition.OnAppearCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C810);
  }
  return result;
}

unint64_t sub_10001779C()
{
  unint64_t result;

  result = qword_10010C818;
  if (!qword_10010C818)
  {
    result = swift_getWitnessTable(&unk_1000C8360, &type metadata for Page.RefreshCondition.PullToRefreshCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C818);
  }
  return result;
}

unint64_t sub_1000177E0()
{
  unint64_t result;

  result = qword_10010C870;
  if (!qword_10010C870)
  {
    result = swift_getWitnessTable(&unk_1000C8310, &type metadata for Shelf.Presentation.HeaderIconType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C870);
  }
  return result;
}

unint64_t sub_100017824()
{
  unint64_t result;

  result = qword_10010C878;
  if (!qword_10010C878)
  {
    result = swift_getWitnessTable(&unk_1000C82C0, &type metadata for Shelf.Presentation.HeaderIconType.BundleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C878);
  }
  return result;
}

unint64_t sub_100017868()
{
  unint64_t result;

  result = qword_10010C880;
  if (!qword_10010C880)
  {
    result = swift_getWitnessTable(&unk_1000C8270, &type metadata for Shelf.Presentation.HeaderIconType.ArtworkCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C880);
  }
  return result;
}

unint64_t sub_1000178AC()
{
  unint64_t result;

  result = qword_10010C888;
  if (!qword_10010C888)
  {
    result = swift_getWitnessTable(&unk_1000C8220, &type metadata for Shelf.Presentation.HeaderIconType.PlayerAvatarCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C888);
  }
  return result;
}

unint64_t sub_1000178F0()
{
  unint64_t result;

  result = qword_10010C890;
  if (!qword_10010C890)
  {
    result = swift_getWitnessTable(&unk_1000C81D0, &type metadata for Shelf.Presentation.HeaderIconType.GameIconCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C890);
  }
  return result;
}

unint64_t sub_100017934()
{
  unint64_t result;

  result = qword_10010C898;
  if (!qword_10010C898)
  {
    result = swift_getWitnessTable(&unk_1000C8180, &type metadata for Shelf.Presentation.HeaderIconType.SymbolCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C898);
  }
  return result;
}

unint64_t sub_100017978()
{
  unint64_t result;

  result = qword_10010C8A0;
  if (!qword_10010C8A0)
  {
    result = swift_getWitnessTable(&unk_1000C72E4, &type metadata for Shelf.Presentation.HeaderIconAlignment);
    atomic_store(result, (unint64_t *)&qword_10010C8A0);
  }
  return result;
}

uint64_t sub_1000179BC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;

  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000011)
  {
    v7 = 0x80000001000CF900;
    if (a2 == 0x80000001000CF900)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001000CF900, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0x61746E6573657270 && a2 == 0xEC0000006E6F6974)
  {
    v8 = 0xEC0000006E6F6974;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x61746E6573657270, 0xEC0000006E6F6974, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_19;
  }
  if (a1 == 0x696C696269736976 && a2 == 0xEA00000000007974)
  {
    v9 = 0xEA00000000007974;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696C696269736976, 0xEA00000000007974, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0x726F737365636361 && a2 == 0xED00006570795479)
  {
    v10 = 0xED00006570795479;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726F737365636361, 0xED00006570795479, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_31;
  }
  if (a1 == 0x614D726564616568 && a2 == 0xED0000736E696772)
  {
    v11 = 0xED0000736E696772;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x614D726564616568, 0xED0000736E696772, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_37;
  }
  if (a1 == 0x736E696772616DLL && a2 == 0xE700000000000000)
  {
    v12 = 0xE700000000000000;
LABEL_43:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x736E696772616DLL, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_43;
  }
  if (a1 == 0x676553656C746974 && a2 == 0xEA00000000006575)
  {
    v13 = 0xEA00000000006575;
LABEL_49:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x676553656C746974, 0xEA00000000006575, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_49;
  }
  if (a1 == 0x736D657469 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 8;
  }
  else
  {
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(0x736D657469, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v14 & 1) != 0)
      return 8;
    else
      return 9;
  }
}

unint64_t sub_100017DB8()
{
  unint64_t result;

  result = qword_10010C8D8;
  if (!qword_10010C8D8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Shelf.AccessoryType, &type metadata for Shelf.AccessoryType);
    atomic_store(result, (unint64_t *)&qword_10010C8D8);
  }
  return result;
}

unint64_t sub_100017DFC()
{
  unint64_t result;

  result = qword_10010C8E0;
  if (!qword_10010C8E0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Shelf.Visibility, &type metadata for Shelf.Visibility);
    atomic_store(result, (unint64_t *)&qword_10010C8E0);
  }
  return result;
}

unint64_t sub_100017E40()
{
  unint64_t result;

  result = qword_10010C8E8;
  if (!qword_10010C8E8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Shelf.Orientation, &type metadata for Shelf.Orientation);
    atomic_store(result, (unint64_t *)&qword_10010C8E8);
  }
  return result;
}

unint64_t sub_100017E84()
{
  unint64_t result;

  result = qword_10010C8F0;
  if (!qword_10010C8F0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for TitleDisplayMode, &type metadata for TitleDisplayMode);
    atomic_store(result, (unint64_t *)&qword_10010C8F0);
  }
  return result;
}

unint64_t sub_100017EC8()
{
  unint64_t result;

  result = qword_10010C8F8;
  if (!qword_10010C8F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Margins, &type metadata for Margins);
    atomic_store(result, (unint64_t *)&qword_10010C8F8);
  }
  return result;
}

unint64_t sub_100017F0C()
{
  unint64_t result;

  result = qword_10010C900;
  if (!qword_10010C900)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PageToolbarItem.Appearance.ButtonBackgroundShape, &type metadata for PageToolbarItem.Appearance.ButtonBackgroundShape);
    atomic_store(result, (unint64_t *)&qword_10010C900);
  }
  return result;
}

unint64_t sub_100017F50()
{
  unint64_t result;

  result = qword_10010C948;
  if (!qword_10010C948)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PageMenuToolbarItem, &type metadata for PageMenuToolbarItem);
    atomic_store(result, (unint64_t *)&qword_10010C948);
  }
  return result;
}

uint64_t sub_100017F94(uint64_t result)
{
  *(_QWORD *)(result + 80) = *(_QWORD *)(result + 80) & 1 | 0x8000000000000000;
  return result;
}

unint64_t sub_100017FA8()
{
  unint64_t result;

  result = qword_10010C950;
  if (!qword_10010C950)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ImageProviding, &type metadata for ImageProviding);
    atomic_store(result, (unint64_t *)&qword_10010C950);
  }
  return result;
}

unint64_t sub_100017FEC()
{
  unint64_t result;

  result = qword_10010C958;
  if (!qword_10010C958)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PageToolbarItem.Appearance.ButtonBackgroundShape, &type metadata for PageToolbarItem.Appearance.ButtonBackgroundShape);
    atomic_store(result, (unint64_t *)&qword_10010C958);
  }
  return result;
}

uint64_t sub_100018030(uint64_t result)
{
  *(_QWORD *)(result + 80) = *(_QWORD *)(result + 80) & 1 | 0x4000000000000000;
  return result;
}

uint64_t sub_100018044(uint64_t result)
{
  *(_QWORD *)(result + 80) &= 1uLL;
  return result;
}

unint64_t sub_100018054()
{
  unint64_t result;

  result = qword_10010C970;
  if (!qword_10010C970)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PageToolbarItem, &type metadata for PageToolbarItem);
    atomic_store(result, (unint64_t *)&qword_10010C970);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Shelf.Presentation.HeaderIconType.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Shelf.Presentation.HeaderIconType.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_100018174 + 4 * byte_1000C5B5A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1000181A8 + 4 * byte_1000C5B55[v4]))();
}

uint64_t sub_1000181A8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000181B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000181B8);
  return result;
}

uint64_t sub_1000181C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000181CCLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1000181D0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000181D8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Shelf.Presentation.HeaderIconType.CodingKeys()
{
  return &type metadata for Shelf.Presentation.HeaderIconType.CodingKeys;
}

ValueMetadata *type metadata accessor for Shelf.Presentation.HeaderIconType.SymbolCodingKeys()
{
  return &type metadata for Shelf.Presentation.HeaderIconType.SymbolCodingKeys;
}

ValueMetadata *type metadata accessor for Shelf.Presentation.HeaderIconType.GameIconCodingKeys()
{
  return &type metadata for Shelf.Presentation.HeaderIconType.GameIconCodingKeys;
}

ValueMetadata *type metadata accessor for Shelf.Presentation.HeaderIconType.PlayerAvatarCodingKeys()
{
  return &type metadata for Shelf.Presentation.HeaderIconType.PlayerAvatarCodingKeys;
}

ValueMetadata *type metadata accessor for Shelf.Presentation.HeaderIconType.ArtworkCodingKeys()
{
  return &type metadata for Shelf.Presentation.HeaderIconType.ArtworkCodingKeys;
}

ValueMetadata *type metadata accessor for Shelf.Presentation.HeaderIconType.BundleCodingKeys()
{
  return &type metadata for Shelf.Presentation.HeaderIconType.BundleCodingKeys;
}

uint64_t getEnumTagSinglePayload for AccessPointTransitionView.AnimationState(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s13GameOverlayUI5ShelfV12PresentationV19HeaderIconAlignmentOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100018320 + 4 * byte_1000C5B64[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100018354 + 4 * byte_1000C5B5F[v4]))();
}

uint64_t sub_100018354(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001835C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100018364);
  return result;
}

uint64_t sub_100018370(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100018378);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10001837C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100018384(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Page.RefreshCondition.CodingKeys()
{
  return &type metadata for Page.RefreshCondition.CodingKeys;
}

ValueMetadata *type metadata accessor for Page.RefreshCondition.PullToRefreshCodingKeys()
{
  return &type metadata for Page.RefreshCondition.PullToRefreshCodingKeys;
}

ValueMetadata *type metadata accessor for Page.RefreshCondition.OnAppearCodingKeys()
{
  return &type metadata for Page.RefreshCondition.OnAppearCodingKeys;
}

uint64_t _s13GameOverlayUI14ImageProvidingO21BundleImageCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100018400 + 4 * byte_1000C5B69[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100018420 + 4 * byte_1000C5B6E[v4]))();
}

_BYTE *sub_100018400(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100018420(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100018428(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100018430(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100018438(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100018440(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for Page.RefreshCondition.OnForegroundCodingKeys()
{
  return &type metadata for Page.RefreshCondition.OnForegroundCodingKeys;
}

unint64_t sub_100018460()
{
  unint64_t result;

  result = qword_10010C978;
  if (!qword_10010C978)
  {
    result = swift_getWitnessTable(&unk_1000C7B48, &type metadata for Page.RefreshCondition.OnForegroundCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C978);
  }
  return result;
}

unint64_t sub_1000184A8()
{
  unint64_t result;

  result = qword_10010C980;
  if (!qword_10010C980)
  {
    result = swift_getWitnessTable(&unk_1000C7C00, &type metadata for Page.RefreshCondition.OnAppearCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C980);
  }
  return result;
}

unint64_t sub_1000184F0()
{
  unint64_t result;

  result = qword_10010C988;
  if (!qword_10010C988)
  {
    result = swift_getWitnessTable(&unk_1000C7D08, &type metadata for Page.RefreshCondition.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C988);
  }
  return result;
}

unint64_t sub_100018538()
{
  unint64_t result;

  result = qword_10010C990;
  if (!qword_10010C990)
  {
    result = swift_getWitnessTable(&unk_1000C7DC0, &type metadata for Shelf.Presentation.HeaderIconType.BundleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C990);
  }
  return result;
}

unint64_t sub_100018580()
{
  unint64_t result;

  result = qword_10010C998;
  if (!qword_10010C998)
  {
    result = swift_getWitnessTable(&unk_1000C7E78, &type metadata for Shelf.Presentation.HeaderIconType.ArtworkCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C998);
  }
  return result;
}

unint64_t sub_1000185C8()
{
  unint64_t result;

  result = qword_10010C9A0;
  if (!qword_10010C9A0)
  {
    result = swift_getWitnessTable(&unk_1000C7F30, &type metadata for Shelf.Presentation.HeaderIconType.PlayerAvatarCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C9A0);
  }
  return result;
}

unint64_t sub_100018610()
{
  unint64_t result;

  result = qword_10010C9A8;
  if (!qword_10010C9A8)
  {
    result = swift_getWitnessTable(&unk_1000C7FE8, &type metadata for Shelf.Presentation.HeaderIconType.GameIconCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C9A8);
  }
  return result;
}

unint64_t sub_100018658()
{
  unint64_t result;

  result = qword_10010C9B0;
  if (!qword_10010C9B0)
  {
    result = swift_getWitnessTable(&unk_1000C80A0, &type metadata for Shelf.Presentation.HeaderIconType.SymbolCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C9B0);
  }
  return result;
}

unint64_t sub_1000186A0()
{
  unint64_t result;

  result = qword_10010C9B8;
  if (!qword_10010C9B8)
  {
    result = swift_getWitnessTable(&unk_1000C8158, &type metadata for Shelf.Presentation.HeaderIconType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C9B8);
  }
  return result;
}

unint64_t sub_1000186E8()
{
  unint64_t result;

  result = qword_10010C9C0;
  if (!qword_10010C9C0)
  {
    result = swift_getWitnessTable(&unk_1000C8010, &type metadata for Shelf.Presentation.HeaderIconType.SymbolCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C9C0);
  }
  return result;
}

unint64_t sub_100018730()
{
  unint64_t result;

  result = qword_10010C9C8;
  if (!qword_10010C9C8)
  {
    result = swift_getWitnessTable(&unk_1000C8038, &type metadata for Shelf.Presentation.HeaderIconType.SymbolCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C9C8);
  }
  return result;
}

unint64_t sub_100018778()
{
  unint64_t result;

  result = qword_10010C9D0;
  if (!qword_10010C9D0)
  {
    result = swift_getWitnessTable(&unk_1000C7F58, &type metadata for Shelf.Presentation.HeaderIconType.GameIconCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C9D0);
  }
  return result;
}

unint64_t sub_1000187C0()
{
  unint64_t result;

  result = qword_10010C9D8;
  if (!qword_10010C9D8)
  {
    result = swift_getWitnessTable(&unk_1000C7F80, &type metadata for Shelf.Presentation.HeaderIconType.GameIconCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C9D8);
  }
  return result;
}

unint64_t sub_100018808()
{
  unint64_t result;

  result = qword_10010C9E0;
  if (!qword_10010C9E0)
  {
    result = swift_getWitnessTable(&unk_1000C7EA0, &type metadata for Shelf.Presentation.HeaderIconType.PlayerAvatarCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C9E0);
  }
  return result;
}

unint64_t sub_100018850()
{
  unint64_t result;

  result = qword_10010C9E8;
  if (!qword_10010C9E8)
  {
    result = swift_getWitnessTable(&unk_1000C7EC8, &type metadata for Shelf.Presentation.HeaderIconType.PlayerAvatarCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C9E8);
  }
  return result;
}

unint64_t sub_100018898()
{
  unint64_t result;

  result = qword_10010C9F0;
  if (!qword_10010C9F0)
  {
    result = swift_getWitnessTable(&unk_1000C7DE8, &type metadata for Shelf.Presentation.HeaderIconType.ArtworkCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C9F0);
  }
  return result;
}

unint64_t sub_1000188E0()
{
  unint64_t result;

  result = qword_10010C9F8;
  if (!qword_10010C9F8)
  {
    result = swift_getWitnessTable(&unk_1000C7E10, &type metadata for Shelf.Presentation.HeaderIconType.ArtworkCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010C9F8);
  }
  return result;
}

unint64_t sub_100018928()
{
  unint64_t result;

  result = qword_10010CA00;
  if (!qword_10010CA00)
  {
    result = swift_getWitnessTable(&unk_1000C7D30, &type metadata for Shelf.Presentation.HeaderIconType.BundleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010CA00);
  }
  return result;
}

unint64_t sub_100018970()
{
  unint64_t result;

  result = qword_10010CA08;
  if (!qword_10010CA08)
  {
    result = swift_getWitnessTable(&unk_1000C7D58, &type metadata for Shelf.Presentation.HeaderIconType.BundleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010CA08);
  }
  return result;
}

unint64_t sub_1000189B8()
{
  unint64_t result;

  result = qword_10010CA10;
  if (!qword_10010CA10)
  {
    result = swift_getWitnessTable(&unk_1000C80C8, &type metadata for Shelf.Presentation.HeaderIconType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010CA10);
  }
  return result;
}

unint64_t sub_100018A00()
{
  unint64_t result;

  result = qword_10010CA18;
  if (!qword_10010CA18)
  {
    result = swift_getWitnessTable(&unk_1000C80F0, &type metadata for Shelf.Presentation.HeaderIconType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010CA18);
  }
  return result;
}

unint64_t sub_100018A48()
{
  unint64_t result;

  result = qword_10010CA20;
  if (!qword_10010CA20)
  {
    result = swift_getWitnessTable(&unk_1000C7C28, &type metadata for Page.RefreshCondition.PullToRefreshCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010CA20);
  }
  return result;
}

unint64_t sub_100018A90()
{
  unint64_t result;

  result = qword_10010CA28;
  if (!qword_10010CA28)
  {
    result = swift_getWitnessTable(&unk_1000C7C50, &type metadata for Page.RefreshCondition.PullToRefreshCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010CA28);
  }
  return result;
}

unint64_t sub_100018AD8()
{
  unint64_t result;

  result = qword_10010CA30;
  if (!qword_10010CA30)
  {
    result = swift_getWitnessTable(&unk_1000C7B70, &type metadata for Page.RefreshCondition.OnAppearCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010CA30);
  }
  return result;
}

unint64_t sub_100018B20()
{
  unint64_t result;

  result = qword_10010CA38;
  if (!qword_10010CA38)
  {
    result = swift_getWitnessTable(&unk_1000C7B98, &type metadata for Page.RefreshCondition.OnAppearCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010CA38);
  }
  return result;
}

unint64_t sub_100018B68()
{
  unint64_t result;

  result = qword_10010CA40;
  if (!qword_10010CA40)
  {
    result = swift_getWitnessTable(&unk_1000C7AB8, &type metadata for Page.RefreshCondition.OnForegroundCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010CA40);
  }
  return result;
}

unint64_t sub_100018BB0()
{
  unint64_t result;

  result = qword_10010CA48;
  if (!qword_10010CA48)
  {
    result = swift_getWitnessTable(&unk_1000C7AE0, &type metadata for Page.RefreshCondition.OnForegroundCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010CA48);
  }
  return result;
}

unint64_t sub_100018BF8()
{
  unint64_t result;

  result = qword_10010CA50;
  if (!qword_10010CA50)
  {
    result = swift_getWitnessTable(&unk_1000C7C78, &type metadata for Page.RefreshCondition.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010CA50);
  }
  return result;
}

unint64_t sub_100018C40()
{
  unint64_t result;

  result = qword_10010CA58;
  if (!qword_10010CA58)
  {
    result = swift_getWitnessTable(&unk_1000C7CA0, &type metadata for Page.RefreshCondition.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010CA58);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for InGameBannerPageIntentImplementation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for InGameBannerPageIntentImplementation(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

_QWORD *assignWithCopy for InGameBannerPageIntentImplementation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

_QWORD *assignWithTake for InGameBannerPageIntentImplementation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for InGameBannerPageIntentImplementation(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InGameBannerPageIntentImplementation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for InGameBannerPageIntentImplementation()
{
  return &type metadata for InGameBannerPageIntentImplementation;
}

uint64_t sub_100018DDC()
{
  return sub_1000035B4((unint64_t *)&unk_10010CA60, type metadata accessor for InGameBannerPageIntent, (uint64_t)&protocol conformance descriptor for InGameBannerPageIntent);
}

uint64_t sub_100018E08@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  unint64_t *v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;

  v32 = a2;
  v33 = a5;
  v8 = type metadata accessor for AccessPointHighlight(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v32 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v32 - v16;
  sub_100019080((uint64_t)a1, 1, a3, a4, (uint64_t)&v32 - v16, 1.0);
  v18 = sub_100054420(0, 1, 1, (unint64_t)&_swiftEmptyArrayStorage);
  v20 = *(_QWORD *)(v18 + 16);
  v19 = *(_QWORD *)(v18 + 24);
  if (v20 >= v19 >> 1)
    v18 = sub_100054420(v19 > 1, v20 + 1, 1, v18);
  *(_QWORD *)(v18 + 16) = v20 + 1;
  v21 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v22 = *(_QWORD *)(v9 + 72);
  sub_100010F0C((uint64_t)v17, v18 + v21 + v22 * v20, type metadata accessor for AccessPointHighlight);
  sub_100019740(a1, v32, a3, a4, (uint64_t)v15);
  v24 = *(_QWORD *)(v18 + 16);
  v23 = *(_QWORD *)(v18 + 24);
  if (v24 >= v23 >> 1)
    v18 = sub_100054420(v23 > 1, v24 + 1, 1, v18);
  *(_QWORD *)(v18 + 16) = v24 + 1;
  sub_100010F0C((uint64_t)v15, v18 + v21 + v24 * v22, type metadata accessor for AccessPointHighlight);
  sub_100019080((uint64_t)a1, 0, a3, a4, (uint64_t)v12, 0.5);
  v26 = *(_QWORD *)(v18 + 16);
  v25 = *(_QWORD *)(v18 + 24);
  if (v26 >= v25 >> 1)
    v18 = sub_100054420(v25 > 1, v26 + 1, 1, v18);
  *(_QWORD *)(v18 + 16) = v26 + 1;
  sub_100010F0C((uint64_t)v12, v18 + v21 + v26 * v22, type metadata accessor for AccessPointHighlight);
  swift_bridgeObjectRetain(a4);
  v27 = v33;
  PageID.init(with:)(a3, a4);
  v28 = type metadata accessor for AccessPointContainer(0);
  static PageMetrics.notInstrumented.getter();
  v29 = *a1;
  v30 = sub_10008958C(v18);
  result = swift_bridgeObjectRelease(v18);
  *(_BYTE *)(v27 + *(int *)(v28 + 24)) = v29;
  *(_QWORD *)(v27 + *(int *)(v28 + 28)) = v30;
  return result;
}

uint64_t sub_100019080@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _QWORD *v41;
  char *v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  Swift::String v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  int *v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(char *, uint64_t, uint64_t, int *);
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;

  v76 = a3;
  v77 = a4;
  v73 = a2;
  v72 = a1;
  v8 = sub_100003304(&qword_10010C220);
  __chkstk_darwin(v8);
  v79 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003304(&qword_10010CA70);
  v11 = __chkstk_darwin(v10);
  v78 = (char *)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v66 - v13;
  v15 = type metadata accessor for ActionMetrics(0);
  v70 = *(_QWORD *)(v15 - 8);
  v71 = v15;
  __chkstk_darwin(v15);
  v69 = (char *)&v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100003304(&qword_10010CA78);
  __chkstk_darwin(v17);
  v19 = (char *)&v66 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for Game(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = __chkstk_darwin(v20);
  v67 = (uint64_t)&v66 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v25 = (char *)&v66 - v24;
  v26 = sub_100003304(&qword_10010CA80);
  v27 = __chkstk_darwin(v26);
  v75 = (uint64_t)&v66 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __chkstk_darwin(v27);
  v31 = (char *)&v66 - v30;
  __chkstk_darwin(v29);
  v33 = (char *)&v66 - v32;
  v34 = (int *)type metadata accessor for LaunchDashboardAction(0);
  v74 = *((_QWORD *)v34 - 1);
  v68 = *(void (**)(char *, uint64_t, uint64_t, int *))(v74 + 56);
  v68(v33, 1, 1, v34);
  if ((v73 & 1) != 0)
  {
    v35 = type metadata accessor for InGameBannerRequiredData(0);
    sub_100010CBC(v72 + *(int *)(v35 + 40), (uint64_t)v19, &qword_10010CA78);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
    {
      sub_100010ED0((uint64_t)v19, &qword_10010CA78);
    }
    else
    {
      sub_100010F0C((uint64_t)v19, (uint64_t)v25, type metadata accessor for Game);
      v36 = v67;
      sub_100007878((uint64_t)v25, v67, type metadata accessor for Game);
      v37 = *(_OWORD *)(v72 + 120);
      v86 = *(_OWORD *)(v72 + 104);
      v87 = v37;
      v88 = *(_OWORD *)(v72 + 136);
      v89 = *(_QWORD *)(v72 + 152);
      v38 = *(_OWORD *)(v72 + 56);
      v82 = *(_OWORD *)(v72 + 40);
      v83 = v38;
      v39 = *(_OWORD *)(v72 + 88);
      v84 = *(_OWORD *)(v72 + 72);
      v85 = v39;
      v40 = *(_OWORD *)(v72 + 24);
      v80 = *(_OWORD *)(v72 + 8);
      v81 = v40;
      v41 = sub_100019FF0(&v80);
      v42 = v69;
      static ActionMetrics.notInstrumented.getter(v41);
      sub_1000106F0((uint64_t)v25, type metadata accessor for Game);
      sub_100010ED0((uint64_t)v33, &qword_10010CA80);
      sub_100010F0C(v36, (uint64_t)v31, type metadata accessor for Game);
      v43 = &v31[v34[5]];
      v44 = v81;
      *(_OWORD *)v43 = v80;
      *((_OWORD *)v43 + 1) = v44;
      v45 = v85;
      *((_OWORD *)v43 + 4) = v84;
      *((_OWORD *)v43 + 5) = v45;
      v46 = v83;
      *((_OWORD *)v43 + 2) = v82;
      *((_OWORD *)v43 + 3) = v46;
      *((_QWORD *)v43 + 18) = v89;
      v47 = v88;
      v48 = v86;
      *((_OWORD *)v43 + 7) = v87;
      *((_OWORD *)v43 + 8) = v47;
      *((_OWORD *)v43 + 6) = v48;
      v49 = &v31[v34[6]];
      *(_QWORD *)v49 = 0;
      *((_QWORD *)v49 + 1) = 0;
      v49[16] = 3;
      (*(void (**)(char *, char *, uint64_t))(v70 + 32))(&v31[v34[7]], v42, v71);
      v31[v34[8]] = 9;
      v31[v34[9]] = 2;
      v68(v31, 0, 1, v34);
      sub_10001A0AC((uint64_t)v31, (uint64_t)v33, &qword_10010CA80);
    }
  }
  *(_QWORD *)&v80 = 0;
  *((_QWORD *)&v80 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(28);
  v50 = *((_QWORD *)&v80 + 1);
  v51 = v77;
  swift_bridgeObjectRetain(v77);
  swift_bridgeObjectRelease(v50);
  *(_QWORD *)&v80 = v76;
  *((_QWORD *)&v80 + 1) = v51;
  v52._object = (void *)0x80000001000CF940;
  v52._countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v52);
  v93 = v80;
  AnyHashable.init<A>(_:)(&v80, &v93, &type metadata for String, &protocol witness table for String);
  *(_QWORD *)v14 = 0x65766E6F63696367;
  *((_QWORD *)v14 + 1) = 0xE900000000000063;
  *((_QWORD *)v14 + 2) = 0x4041000000000000;
  v53 = type metadata accessor for AccessPointIconType(0);
  swift_storeEnumTagMultiPayload(v14, v53, 3);
  v54 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56);
  v54(v14, 0, 1, v53);
  v55 = (uint64_t)v78;
  v54(v78, 1, 1, v53);
  v56 = v75;
  sub_100010CBC((uint64_t)v33, v75, &qword_10010CA80);
  if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v74 + 48))(v56, 1, v34) == 1)
  {
    sub_100010ED0(v56, &qword_10010CA80);
    v93 = 0u;
    v94 = 0u;
    v95 = 0;
  }
  else
  {
    *((_QWORD *)&v94 + 1) = v34;
    v95 = sub_1000035B4(&qword_10010CA88, type metadata accessor for LaunchDashboardAction, (uint64_t)&protocol conformance descriptor for LaunchDashboardAction);
    v57 = sub_1000052B0(&v93);
    sub_100010F0C(v56, (uint64_t)v57, type metadata accessor for LaunchDashboardAction);
  }
  v58 = type metadata accessor for ImpressionMetrics(0);
  v59 = (uint64_t)v79;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v79, 1, 1, v58);
  v60 = v81;
  *(_OWORD *)a5 = v80;
  *(_OWORD *)(a5 + 16) = v60;
  *(_QWORD *)(a5 + 32) = v82;
  v61 = (int *)type metadata accessor for AccessPointHighlight(0);
  *(_OWORD *)(a5 + 40) = 0u;
  *(_OWORD *)(a5 + 56) = 0u;
  sub_10001A0AC((uint64_t)v14, a5 + v61[7], &qword_10010CA70);
  sub_10001A0AC(v55, a5 + v61[8], &qword_10010CA70);
  v62 = a5 + v61[9];
  *(double *)v62 = a6;
  *(_BYTE *)(v62 + 8) = 0;
  *(_BYTE *)(a5 + v61[10]) = 2;
  v63 = a5 + v61[11];
  v92 = 0;
  v90 = 0u;
  v91 = 0u;
  sub_10000F768((uint64_t)&v93, (uint64_t)&v90);
  v64 = v91;
  *(_OWORD *)v63 = v90;
  *(_OWORD *)(v63 + 16) = v64;
  *(_QWORD *)(v63 + 32) = v92;
  sub_100010ED0((uint64_t)&v93, &qword_10010C128);
  sub_10001A0AC(v59, a5 + v61[12], &qword_10010C220);
  *(_BYTE *)(a5 + v61[13]) = 2;
  *(_BYTE *)(a5 + v61[14]) = 1;
  *(_QWORD *)(a5 + v61[15]) = 1;
  return sub_100010ED0((uint64_t)v33, &qword_10010CA80);
}

uint64_t sub_100019740@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  Swift::String v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  int *v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  void (*v72)(uint64_t, uint64_t, uint64_t, int *);
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;

  v81 = a3;
  v82 = a4;
  v83 = a2;
  v7 = sub_100003304(&qword_10010C220);
  __chkstk_darwin(v7);
  v85 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003304(&qword_10010CA70);
  v10 = __chkstk_darwin(v9);
  v84 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v86 = (uint64_t)&v72 - v12;
  v13 = type metadata accessor for ActionMetrics(0);
  v75 = *(_QWORD *)(v13 - 8);
  v76 = v13;
  __chkstk_darwin(v13);
  v74 = (char *)&v72 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100003304(&qword_10010CA78);
  __chkstk_darwin(v15);
  v17 = (char *)&v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Game(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v73 = (uint64_t)&v72 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v23 = (char *)&v72 - v22;
  v24 = sub_100003304(&qword_10010CA80);
  v25 = __chkstk_darwin(v24);
  v80 = (uint64_t)&v72 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v25);
  v29 = (char *)&v72 - v28;
  __chkstk_darwin(v27);
  v87 = (uint64_t)&v72 - v30;
  v31 = *a1;
  if (v31 == 3)
  {
    v78 = 0;
    goto LABEL_5;
  }
  if (v31 == 4)
  {
    v78 = 1;
LABEL_5:
    v32 = *((_QWORD *)a1 + 27);
    v77 = *((_QWORD *)a1 + 26);
    swift_bridgeObjectRetain(v32);
    goto LABEL_7;
  }
  v77 = 0;
  v32 = 0;
  v78 = 3;
LABEL_7:
  v33 = (int *)type metadata accessor for LaunchDashboardAction(0);
  v79 = *((_QWORD *)v33 - 1);
  v72 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v79 + 56);
  v72(v87, 1, 1, v33);
  v34 = type metadata accessor for InGameBannerRequiredData(0);
  sub_100010CBC((uint64_t)&a1[*(int *)(v34 + 40)], (uint64_t)v17, &qword_10010CA78);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
  {
    sub_100019FD8(v77, v32, v78);
    sub_100010ED0((uint64_t)v17, &qword_10010CA78);
  }
  else
  {
    sub_100010F0C((uint64_t)v17, (uint64_t)v23, type metadata accessor for Game);
    v35 = v73;
    sub_100007878((uint64_t)v23, v73, type metadata accessor for Game);
    v36 = *(_OWORD *)(a1 + 120);
    v94 = *(_OWORD *)(a1 + 104);
    v95 = v36;
    v96 = *(_OWORD *)(a1 + 136);
    v97 = *((_QWORD *)a1 + 19);
    v37 = *(_OWORD *)(a1 + 56);
    v90 = *(_OWORD *)(a1 + 40);
    v91 = v37;
    v38 = *(_OWORD *)(a1 + 88);
    v92 = *(_OWORD *)(a1 + 72);
    v93 = v38;
    v39 = *(_OWORD *)(a1 + 24);
    v88 = *(_OWORD *)(a1 + 8);
    v89 = v39;
    v40 = sub_100019FF0(&v88);
    v41 = v74;
    static ActionMetrics.notInstrumented.getter(v40);
    sub_1000106F0((uint64_t)v23, type metadata accessor for Game);
    v42 = v87;
    sub_100010ED0(v87, &qword_10010CA80);
    sub_100010F0C(v35, (uint64_t)v29, type metadata accessor for Game);
    v43 = &v29[v33[5]];
    v44 = v89;
    *(_OWORD *)v43 = v88;
    *((_OWORD *)v43 + 1) = v44;
    v45 = v93;
    *((_OWORD *)v43 + 4) = v92;
    *((_OWORD *)v43 + 5) = v45;
    v46 = v91;
    *((_OWORD *)v43 + 2) = v90;
    *((_OWORD *)v43 + 3) = v46;
    *((_QWORD *)v43 + 18) = v97;
    v47 = v96;
    v48 = v94;
    *((_OWORD *)v43 + 7) = v95;
    *((_OWORD *)v43 + 8) = v47;
    *((_OWORD *)v43 + 6) = v48;
    v49 = &v29[v33[6]];
    v50 = v76;
    *(_QWORD *)v49 = v77;
    *((_QWORD *)v49 + 1) = v32;
    v49[16] = v78;
    (*(void (**)(char *, char *, uint64_t))(v75 + 32))(&v29[v33[7]], v41, v50);
    v29[v33[8]] = 9;
    v29[v33[9]] = 2;
    v72((uint64_t)v29, 0, 1, v33);
    sub_10001A0AC((uint64_t)v29, v42, &qword_10010CA80);
  }
  *(_QWORD *)&v88 = 0;
  *((_QWORD *)&v88 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(22);
  v51 = *((_QWORD *)&v88 + 1);
  v52 = v82;
  swift_bridgeObjectRetain(v82);
  swift_bridgeObjectRelease(v51);
  *(_QWORD *)&v88 = v81;
  *((_QWORD *)&v88 + 1) = v52;
  v53._object = (void *)0x80000001000CF920;
  v53._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v53);
  v101 = v88;
  AnyHashable.init<A>(_:)(&v88, &v101, &type metadata for String, &protocol witness table for String);
  v55 = *((_QWORD *)a1 + 20);
  v54 = *((_QWORD *)a1 + 21);
  v57 = *((_QWORD *)a1 + 22);
  v56 = *((_QWORD *)a1 + 23);
  v58 = v86;
  sub_100007878(v83, v86, type metadata accessor for AccessPointIconType);
  v59 = type metadata accessor for AccessPointIconType(0);
  v60 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 56);
  v60(v58, 0, 1, v59);
  v61 = (uint64_t)v84;
  v60((uint64_t)v84, 1, 1, v59);
  v62 = v80;
  sub_100010CBC(v87, v80, &qword_10010CA80);
  if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v79 + 48))(v62, 1, v33) == 1)
  {
    swift_bridgeObjectRetain(v56);
    swift_bridgeObjectRetain(v54);
    sub_100010ED0(v62, &qword_10010CA80);
    v101 = 0u;
    v102 = 0u;
    v103 = 0;
  }
  else
  {
    *((_QWORD *)&v102 + 1) = v33;
    v103 = sub_1000035B4(&qword_10010CA88, type metadata accessor for LaunchDashboardAction, (uint64_t)&protocol conformance descriptor for LaunchDashboardAction);
    v63 = sub_1000052B0(&v101);
    sub_100010F0C(v62, (uint64_t)v63, type metadata accessor for LaunchDashboardAction);
    swift_bridgeObjectRetain(v56);
    swift_bridgeObjectRetain(v54);
  }
  v64 = type metadata accessor for ImpressionMetrics(0);
  v65 = (uint64_t)v85;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v85, 1, 1, v64);
  v66 = v89;
  *(_OWORD *)a5 = v88;
  *(_OWORD *)(a5 + 16) = v66;
  *(_QWORD *)(a5 + 32) = v90;
  *(_QWORD *)(a5 + 40) = v55;
  *(_QWORD *)(a5 + 48) = v54;
  *(_QWORD *)(a5 + 56) = v57;
  *(_QWORD *)(a5 + 64) = v56;
  v67 = (int *)type metadata accessor for AccessPointHighlight(0);
  sub_10001A0AC(v86, a5 + v67[7], &qword_10010CA70);
  sub_10001A0AC(v61, a5 + v67[8], &qword_10010CA70);
  v68 = a5 + v67[9];
  *(_QWORD *)v68 = 0x4008000000000000;
  *(_BYTE *)(v68 + 8) = 0;
  *(_BYTE *)(a5 + v67[10]) = 1;
  v69 = a5 + v67[11];
  v100 = 0;
  v98 = 0u;
  v99 = 0u;
  sub_10000F768((uint64_t)&v101, (uint64_t)&v98);
  v70 = v99;
  *(_OWORD *)v69 = v98;
  *(_OWORD *)(v69 + 16) = v70;
  *(_QWORD *)(v69 + 32) = v100;
  sub_100010ED0((uint64_t)&v101, &qword_10010C128);
  sub_10001A0AC(v65, a5 + v67[12], &qword_10010C220);
  *(_BYTE *)(a5 + v67[13]) = 2;
  *(_BYTE *)(a5 + v67[14]) = 1;
  *(_QWORD *)(a5 + v67[15]) = 1;
  return sub_100010ED0(v87, &qword_10010CA80);
}

uint64_t sub_100019E58(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[2] = a1;
  v3[3] = a2;
  v4 = type metadata accessor for AccessPointIconType(0);
  v3[4] = v4;
  v5 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v2;
  v7 = v2[1];
  v3[5] = v5;
  v3[6] = v6;
  v3[7] = v7;
  return swift_task_switch(sub_100019EBC, 0, 0);
}

uint64_t sub_100019EBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(uint64_t **)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 16);
  v5 = *(_QWORD *)(v0 + 24);
  v7 = *(_QWORD *)(v5 + 192);
  v8 = *(_QWORD *)(v5 + 200);
  *v4 = v7;
  v4[1] = v8;
  swift_storeEnumTagMultiPayload(v4, v3, 4);
  sub_100019F80(v7, v8);
  sub_100018E08((unsigned __int8 *)v5, (uint64_t)v4, v1, v2, v6);
  sub_1000106F0((uint64_t)v4, type metadata accessor for AccessPointIconType);
  v9 = type metadata accessor for AccessPointContainer(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v6, 0, 1, v9);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100019F80(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_100019F94(result, a2);
  return result;
}

uint64_t sub_100019F94(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100019FD8(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 2u)
    return swift_bridgeObjectRelease(a2);
  return result;
}

_QWORD *sub_100019FF0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[7];
  v6 = a1[11];
  v7 = a1[12];
  v8 = a1[13];
  v9 = a1[14];
  v10 = a1[15];
  v13 = a1[17];
  v14 = a1[16];
  v12 = a1[18];
  swift_bridgeObjectRetain(a1[9]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  sub_100012878(v6, v7, v8, v9, v10, v14, v13, v12);
  return a1;
}

uint64_t sub_10001A0AC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100003304(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

_QWORD *destroy for MultiplayerView(_QWORD *result)
{
  if (*result)
    return (_QWORD *)swift_release(result[1]);
  return result;
}

_QWORD *_s13GameOverlayUI15MultiplayerViewVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  if (*a2)
  {
    v3 = a2[1];
    *a1 = *a2;
    a1[1] = v3;
    swift_retain(v3);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  return a1;
}

_QWORD *assignWithCopy for MultiplayerView(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  if (!*a1)
  {
    if (v4)
    {
      v7 = a2[1];
      *a1 = v4;
      a1[1] = v7;
      swift_retain(v7);
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (!v4)
  {
    swift_release(a1[1]);
    goto LABEL_7;
  }
  v5 = a2[1];
  v6 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  swift_retain(v5);
  swift_release(v6);
  return a1;
}

_QWORD *assignWithTake for MultiplayerView(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  if (!*a1)
  {
    if (v4)
    {
      v7 = a2[1];
      *a1 = v4;
      a1[1] = v7;
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (!v4)
  {
    swift_release(a1[1]);
    goto LABEL_7;
  }
  v5 = a2[1];
  v6 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  swift_release(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for MultiplayerView(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MultiplayerView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for MultiplayerView()
{
  return &type metadata for MultiplayerView;
}

uint64_t sub_10001A2E4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E3F70, 1);
}

uint64_t sub_10001A2F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t KeyPath;
  uint64_t *v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  id v33;
  id v34;
  uint64_t v35;
  char *v36;
  _OWORD *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char v54[16];
  uint64_t v55;
  uint64_t v56;

  v53 = a3;
  v52 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v52);
  v51 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003304(&qword_10010CAE0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003304(&qword_10010CAE8);
  __chkstk_darwin(v10);
  v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100003304(&qword_10010CAF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = sub_100003304(&qword_10010CAF8);
  __chkstk_darwin(v50);
  v17 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = a1;
  v56 = a2;
  v18 = sub_100003304(&qword_10010CB00);
  v19 = sub_100011054(&qword_10010CB08, &qword_10010CB00, (uint64_t)&protocol conformance descriptor for HStack<A>);
  v20 = Button.init(action:label:)(property wrapper backing initializer of Shelf.items, 0, sub_10001B1E0, v54, v18, v19);
  v21 = static Color.primary.getter(v20);
  KeyPath = swift_getKeyPath(&unk_1000C85A0);
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v12, v9, v6);
  v23 = (uint64_t *)&v12[*(int *)(v10 + 36)];
  *v23 = KeyPath;
  v23[1] = v21;
  v24 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  LOBYTE(v10) = static Edge.Set.all.getter(v24);
  v25 = EdgeInsets.init(_all:)(20.0);
  v27 = v26;
  v29 = v28;
  v31 = v30;
  sub_100010CBC((uint64_t)v12, (uint64_t)v15, &qword_10010CAE8);
  v32 = &v15[*(int *)(v13 + 36)];
  *v32 = v10;
  *((double *)v32 + 1) = v25;
  *((_QWORD *)v32 + 2) = v27;
  *((_QWORD *)v32 + 3) = v29;
  *((_QWORD *)v32 + 4) = v31;
  v32[40] = 0;
  sub_100010ED0((uint64_t)v12, &qword_10010CAE8);
  v33 = objc_msgSend((id)objc_opt_self(UIColor), "labelColor");
  v34 = objc_msgSend(v33, "colorWithAlphaComponent:", 0.08);

  v35 = Color.init(_:)(v34);
  LOBYTE(v34) = static Edge.Set.all.getter(v35);
  sub_100010CBC((uint64_t)v15, (uint64_t)v17, &qword_10010CAF0);
  v36 = &v17[*(int *)(v50 + 36)];
  *(_QWORD *)v36 = v35;
  v36[8] = (char)v34;
  sub_100010ED0((uint64_t)v15, &qword_10010CAF0);
  v37 = v51;
  v38 = &v51[*(int *)(v52 + 20)];
  v39 = enum case for RoundedCornerStyle.continuous(_:);
  v40 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 104))(v38, v39, v40);
  __asm { FMOV            V0.2D, #20.0 }
  *v37 = _Q0;
  v46 = sub_100003304(&qword_10010CAB8);
  v47 = v53;
  v48 = v53 + *(int *)(v46 + 36);
  sub_10001B288((uint64_t)v37, v48);
  *(_WORD *)(v48 + *(int *)(sub_100003304(&qword_10010CB10) + 36)) = 256;
  sub_100010CBC((uint64_t)v17, v47, &qword_10010CAF8);
  sub_10001B2CC((uint64_t)v37);
  return sub_100010ED0((uint64_t)v17, &qword_10010CAF8);
}

__n128 sub_10001A6B4@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __n128 result;
  __n128 v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v6 = static VerticalAlignment.center.getter();
  sub_10001A72C(a1, a2, (uint64_t)&v12);
  v7 = v13;
  v8 = v14;
  v9 = v15;
  v10 = v16;
  result = v12;
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  *(__n128 *)(a3 + 24) = result;
  *(_BYTE *)(a3 + 40) = v7;
  *(_QWORD *)(a3 + 48) = v8;
  *(_QWORD *)(a3 + 56) = v9;
  *(_BYTE *)(a3 + 64) = v10;
  return result;
}

uint64_t sub_10001A72C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[2];

  v22[0] = a1;
  v22[1] = a2;
  v5 = sub_10001B308();
  swift_bridgeObjectRetain(a2);
  v6 = Text.init<A>(_:)(v22, &type metadata for String, v5);
  v8 = v7;
  v10 = v9;
  v12 = v11 & 1;
  v13 = static Font.title2.getter();
  v14 = Text.font(_:)(v13, v6, v8, v12, v10);
  v16 = v15;
  v18 = v17;
  v20 = v19;
  swift_release(v13);
  sub_10001B34C(v6, v8, v12);
  swift_bridgeObjectRelease(v10);
  *(_QWORD *)a3 = v14;
  *(_QWORD *)(a3 + 8) = v16;
  *(_BYTE *)(a3 + 16) = v18 & 1;
  *(_QWORD *)(a3 + 24) = v20;
  *(_QWORD *)(a3 + 32) = 0;
  *(_BYTE *)(a3 + 40) = 1;
  sub_10001B35C(v14, v16, v18 & 1);
  swift_bridgeObjectRetain(v20);
  sub_10001B34C(v14, v16, v18 & 1);
  return swift_bridgeObjectRelease(v20);
}

uint64_t sub_10001A840@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;

  v27 = a3;
  v5 = type metadata accessor for Material(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003304(&qword_10010CA90);
  __chkstk_darwin(v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100003304(&qword_10010CA98);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v11 = static HorizontalAlignment.center.getter(v13);
  *((_QWORD *)v11 + 1) = 0;
  v11[16] = 1;
  v16 = sub_100003304(&qword_10010CAA0);
  v17 = sub_10001AA30(a1, a2, (uint64_t)&v11[*(int *)(v16 + 44)]);
  LOBYTE(a2) = static Edge.Set.all.getter(v17);
  sub_100010CBC((uint64_t)v11, (uint64_t)v15, &qword_10010CA90);
  v18 = &v15[*(int *)(v12 + 36)];
  *v18 = a2;
  *(_OWORD *)(v18 + 8) = 0u;
  *(_OWORD *)(v18 + 24) = 0u;
  v18[40] = 1;
  v19 = sub_100010ED0((uint64_t)v11, &qword_10010CA90);
  v20 = static Material.regular.getter(v19);
  v21 = static Edge.Set.all.getter(v20);
  v22 = sub_100003304(&qword_10010CAA8);
  v23 = v27;
  v24 = v27 + *(int *)(v22 + 36);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 16))(v24, v8, v5);
  *(_BYTE *)(v24 + *(int *)(sub_100003304(&qword_10010CAB0) + 36)) = v21;
  sub_100010CBC((uint64_t)v15, v23, &qword_10010CA98);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return sub_100010ED0((uint64_t)v15, &qword_10010CA98);
}

uint64_t sub_10001AA30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v6 = sub_100003304(&qword_10010CAB8);
  v7 = __chkstk_darwin(v6);
  v55 = (uint64_t)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v54 = (uint64_t)&v51 - v10;
  v11 = __chkstk_darwin(v9);
  v53 = (uint64_t)&v51 - v12;
  v13 = __chkstk_darwin(v11);
  v52 = (uint64_t)&v51 - v14;
  v15 = __chkstk_darwin(v13);
  v51 = (uint64_t)&v51 - v16;
  __chkstk_darwin(v15);
  v56 = (uint64_t)&v51 - v17;
  v18 = sub_100003304(&qword_10010CAC0);
  __chkstk_darwin(v18);
  v20 = (char *)&v51 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100003304(&qword_10010CAC8);
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v51 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v22);
  v27 = (char *)&v51 - v26;
  *(_QWORD *)v20 = static VerticalAlignment.center.getter(v25);
  *((_QWORD *)v20 + 1) = 0x4030000000000000;
  v20[16] = 0;
  v28 = sub_100003304(&qword_10010CAD0);
  v29 = sub_10001AE60(a1, a2, (uint64_t)&v20[*(int *)(v28 + 44)]);
  v30 = static Edge.Set.bottom.getter(v29);
  v31 = EdgeInsets.init(_all:)(40.0);
  v33 = v32;
  v35 = v34;
  v37 = v36;
  sub_100010CBC((uint64_t)v20, (uint64_t)v24, &qword_10010CAC0);
  v38 = &v24[*(int *)(v21 + 36)];
  *v38 = v30;
  *((double *)v38 + 1) = v31;
  *((_QWORD *)v38 + 2) = v33;
  *((_QWORD *)v38 + 3) = v35;
  *((_QWORD *)v38 + 4) = v37;
  v38[40] = 0;
  sub_100010ED0((uint64_t)v20, &qword_10010CAC0);
  sub_10001A0AC((uint64_t)v24, (uint64_t)v27, &qword_10010CAC8);
  v39 = v56;
  sub_10001A2F4(0x616C506572616853, 0xE900000000000079, v56);
  v40 = v51;
  sub_10001A2F4(0x5020657469766E49, 0xEE0073726579616CLL, v51);
  v41 = v52;
  sub_10001A2F4(0x614D206B63697551, 0xEB00000000686374, v52);
  sub_100010CBC((uint64_t)v27, (uint64_t)v24, &qword_10010CAC8);
  v42 = v53;
  sub_100010CBC(v39, v53, &qword_10010CAB8);
  v43 = v40;
  v44 = v54;
  sub_100010CBC(v40, v54, &qword_10010CAB8);
  v45 = v41;
  v46 = v41;
  v47 = v55;
  sub_100010CBC(v45, v55, &qword_10010CAB8);
  sub_100010CBC((uint64_t)v24, a3, &qword_10010CAC8);
  v48 = (int *)sub_100003304(&qword_10010CAD8);
  sub_100010CBC(v42, a3 + v48[12], &qword_10010CAB8);
  sub_100010CBC(v44, a3 + v48[16], &qword_10010CAB8);
  sub_100010CBC(v47, a3 + v48[20], &qword_10010CAB8);
  v49 = a3 + v48[24];
  *(_QWORD *)v49 = 0;
  *(_BYTE *)(v49 + 8) = 1;
  sub_100010ED0(v46, &qword_10010CAB8);
  sub_100010ED0(v43, &qword_10010CAB8);
  sub_100010ED0(v56, &qword_10010CAB8);
  sub_100010ED0((uint64_t)v27, &qword_10010CAC8);
  sub_100010ED0(v47, &qword_10010CAB8);
  sub_100010ED0(v44, &qword_10010CAB8);
  sub_100010ED0(v42, &qword_10010CAB8);
  return sub_100010ED0((uint64_t)v24, &qword_10010CAC8);
}

uint64_t sub_10001AE60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t KeyPath;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v45 = a3;
  v5 = sub_100003304(&qword_10010CB18);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003304(&qword_10010CB20);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (uint64_t)&v43 - v13;
  v44 = (uint64_t)&v43 - v13;
  v15 = swift_allocObject(&unk_1000FD078, 32, 7);
  *(_QWORD *)(v15 + 16) = a1;
  *(_QWORD *)(v15 + 24) = a2;
  sub_10001B3C0(a1, a2);
  v16 = sub_100003304(&qword_10010CB28);
  v17 = sub_10001B3D0();
  v18 = Button.init(action:label:)(sub_10001B398, v15, sub_10001B158, 0, v16, v17);
  v19 = static Color.primary.getter(v18);
  KeyPath = swift_getKeyPath(&unk_1000C85A0);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v12, v8, v5);
  v21 = (uint64_t *)&v12[*(int *)(v9 + 36)];
  *v21 = KeyPath;
  v21[1] = v19;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_10001A0AC((uint64_t)v12, v14, &qword_10010CB20);
  v22 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000010, 0x80000001000CF960);
  v23 = Text.init(_:tableName:bundle:comment:)(v22);
  v25 = v24;
  v27 = v26;
  v29 = v28 & 1;
  v30 = static Font.title.getter();
  v31 = Text.font(_:)(v30, v23, v25, v29, v27);
  v33 = v32;
  LOBYTE(v14) = v34;
  v36 = v35;
  swift_release(v30);
  LOBYTE(v30) = v14 & 1;
  sub_10001B34C(v23, v25, v29);
  swift_bridgeObjectRelease(v27);
  v37 = v44;
  sub_100010CBC(v44, (uint64_t)v12, &qword_10010CB20);
  v38 = v45;
  sub_100010CBC((uint64_t)v12, v45, &qword_10010CB20);
  v39 = sub_100003304(&qword_10010CB48);
  v40 = v38 + *(int *)(v39 + 48);
  *(_QWORD *)v40 = v31;
  *(_QWORD *)(v40 + 8) = v33;
  *(_BYTE *)(v40 + 16) = v30;
  *(_QWORD *)(v40 + 24) = v36;
  v41 = v38 + *(int *)(v39 + 64);
  *(_QWORD *)v41 = 0;
  *(_BYTE *)(v41 + 8) = 1;
  sub_10001B35C(v31, v33, v30);
  swift_bridgeObjectRetain(v36);
  sub_100010ED0(v37, &qword_10010CB20);
  sub_10001B34C(v31, v33, v30);
  swift_bridgeObjectRelease(v36);
  return sub_100010ED0((uint64_t)v12, &qword_10010CB20);
}

uint64_t sub_10001B158@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = Image.init(systemName:)(0xD000000000000011, 0x80000001000CF980);
  v3 = static Font.largeTitle.getter();
  result = swift_getKeyPath(&unk_1000C85D0);
  *a1 = v2;
  a1[1] = result;
  a1[2] = v3;
  return result;
}

uint64_t sub_10001B1C0()
{
  return static View._viewListCount(inputs:)();
}

uint64_t sub_10001B1D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_10001A840(*v1, v1[1], a1);
}

double sub_10001B1E0@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_10001A6B4(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1).n128_u64[0];
  return result;
}

uint64_t sub_10001B1E8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.tintColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10001B210@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.tintColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10001B238(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.tintColor.setter(v1);
}

uint64_t sub_10001B260(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.tintColor.setter(v1);
}

uint64_t sub_10001B288(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RoundedRectangle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001B2CC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for RoundedRectangle(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10001B308()
{
  unint64_t result;

  result = qword_100111740;
  if (!qword_100111740)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100111740);
  }
  return result;
}

uint64_t sub_10001B34C(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_release(a1);
  else
    return swift_bridgeObjectRelease(a2);
}

uint64_t sub_10001B35C(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_retain(a1);
  else
    return swift_bridgeObjectRetain(a2);
}

uint64_t sub_10001B36C()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10001B398()
{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t result;

  v1 = *(uint64_t (**)(void))(v0 + 16);
  if (v1)
    return v1();
  return result;
}

uint64_t sub_10001B3C0(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_retain(a2);
  return result;
}

unint64_t sub_10001B3D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010CB30;
  if (!qword_10010CB30)
  {
    v1 = sub_100006E54(&qword_10010CB28);
    sub_100011054(&qword_10010CB38, &qword_10010CB40, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10010CB30);
  }
  return result;
}

uint64_t sub_10001B454@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10001B47C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10001B4A4(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

uint64_t sub_10001B4CC(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

unint64_t sub_10001B4F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010CB50;
  if (!qword_10010CB50)
  {
    v1 = sub_100006E54(&qword_10010CAA8);
    sub_10001B57C();
    sub_100011054(&qword_10010CB68, &qword_10010CAB0, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10010CB50);
  }
  return result;
}

unint64_t sub_10001B57C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010CB58;
  if (!qword_10010CB58)
  {
    v1 = sub_100006E54(&qword_10010CA98);
    sub_100011054(&qword_10010CB60, &qword_10010CA90, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10010CB58);
  }
  return result;
}

uint64_t destroy for CollapsibleAccessPointFrame(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[1]);
  return swift_release(a1[4]);
}

uint64_t initializeWithCopy for CollapsibleAccessPointFrame(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  v5 = a2[4];
  *(_QWORD *)(a1 + 32) = v5;
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  return a1;
}

uint64_t *assignWithCopy for CollapsibleAccessPointFrame(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
  v8 = a1[4];
  v9 = a2[4];
  a1[4] = v9;
  swift_retain(v9);
  swift_release(v8);
  return a1;
}

__n128 initializeWithTake for FlowDestination(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for CollapsibleAccessPointFrame(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_release(*(_QWORD *)a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for CollapsibleAccessPointFrame(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CollapsibleAccessPointFrame(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CollapsibleAccessPointFrame()
{
  return &type metadata for CollapsibleAccessPointFrame;
}

_QWORD *sub_10001B820(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v23 = *a2;
    *a1 = *a2;
    v4 = (_QWORD *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for PageID(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v4, a2, v7);
    v8 = (int *)type metadata accessor for AccessPointContainer(0);
    v9 = v8[5];
    v10 = (char *)v4 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for PageMetrics(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    *((_BYTE *)v4 + v8[6]) = *((_BYTE *)a2 + v8[6]);
    v13 = v8[7];
    v14 = *(_QWORD *)((char *)a2 + v13);
    *(_QWORD *)((char *)v4 + v13) = v14;
    v15 = *(int *)(a3 + 20);
    v16 = *(int *)(a3 + 24);
    v17 = (_QWORD *)((char *)v4 + v15);
    v18 = (_QWORD *)((char *)a2 + v15);
    v19 = *v18;
    v20 = v18[1];
    *v17 = *v18;
    v17[1] = v20;
    v17[2] = v18[2];
    v21 = (_QWORD *)((char *)v4 + v16);
    v22 = (_QWORD *)((char *)a2 + v16);
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    swift_bridgeObjectRetain(v14);
    swift_retain(v19);
    swift_retain(v20);
  }
  swift_retain(v23);
  return v4;
}

double sub_10001B938(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  double result;

  v4 = type metadata accessor for PageID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = type metadata accessor for AccessPointContainer(0);
  v6 = a1 + *(int *)(v5 + 20);
  v7 = type metadata accessor for PageMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v5 + 28)));
  v8 = (_QWORD *)(a1 + *(int *)(a2 + 20));
  swift_release(*v8);
  swift_release(v8[1]);
  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 24) + 8)).n128_u64[0];
  return result;
}

uint64_t sub_10001B9DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;

  v6 = type metadata accessor for PageID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = (int *)type metadata accessor for AccessPointContainer(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for PageMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  *(_BYTE *)(a1 + v7[6]) = *(_BYTE *)(a2 + v7[6]);
  v12 = v7[7];
  v13 = *(_QWORD *)(a2 + v12);
  *(_QWORD *)(a1 + v12) = v13;
  v14 = *(int *)(a3 + 20);
  v15 = *(int *)(a3 + 24);
  v16 = (uint64_t *)(a1 + v14);
  v17 = (uint64_t *)(a2 + v14);
  v18 = *v17;
  v19 = v17[1];
  *v16 = *v17;
  v16[1] = v19;
  v16[2] = v17[2];
  v20 = (_QWORD *)(a1 + v15);
  v21 = (_QWORD *)(a2 + v15);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  swift_bridgeObjectRetain(v13);
  swift_retain(v18);
  swift_retain(v19);
  swift_retain(v22);
  return a1;
}

uint64_t sub_10001BACC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;

  v6 = type metadata accessor for PageID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = (int *)type metadata accessor for AccessPointContainer(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for PageMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  *(_BYTE *)(a1 + v7[6]) = *(_BYTE *)(a2 + v7[6]);
  v12 = v7[7];
  v13 = *(_QWORD *)(a2 + v12);
  v14 = *(_QWORD *)(a1 + v12);
  *(_QWORD *)(a1 + v12) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  v15 = *(int *)(a3 + 20);
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = *(_QWORD *)(a1 + v15);
  v19 = *(_QWORD *)(a2 + v15);
  *(_QWORD *)(a1 + v15) = v19;
  swift_retain(v19);
  swift_release(v18);
  v20 = *(_QWORD *)(v17 + 8);
  v21 = *(_QWORD *)(v16 + 8);
  *(_QWORD *)(v16 + 8) = v20;
  swift_retain(v20);
  swift_release(v21);
  *(_QWORD *)(v16 + 16) = *(_QWORD *)(v17 + 16);
  v22 = *(int *)(a3 + 24);
  v23 = (_QWORD *)(a1 + v22);
  v24 = (_QWORD *)(a2 + v22);
  *v23 = *v24;
  v25 = v23[1];
  v26 = v24[1];
  v23[1] = v26;
  swift_retain(v26);
  swift_release(v25);
  return a1;
}

uint64_t sub_10001BBF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for PageID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = (int *)type metadata accessor for AccessPointContainer(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for PageMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  *(_BYTE *)(a1 + v7[6]) = *(_BYTE *)(a2 + v7[6]);
  *(_QWORD *)(a1 + v7[7]) = *(_QWORD *)(a2 + v7[7]);
  v12 = *(int *)(a3 + 20);
  v13 = *(int *)(a3 + 24);
  v14 = a1 + v12;
  v15 = a2 + v12;
  *(_OWORD *)v14 = *(_OWORD *)v15;
  *(_QWORD *)(v14 + 16) = *(_QWORD *)(v15 + 16);
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  return a1;
}

uint64_t sub_10001BCC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = type metadata accessor for PageID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = (int *)type metadata accessor for AccessPointContainer(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for PageMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  *(_BYTE *)(a1 + v7[6]) = *(_BYTE *)(a2 + v7[6]);
  v12 = v7[7];
  v13 = *(_QWORD *)(a1 + v12);
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);
  swift_bridgeObjectRelease(v13);
  v14 = *(int *)(a3 + 20);
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = *(_QWORD *)(a1 + v14);
  *(_QWORD *)(a1 + v14) = *(_QWORD *)(a2 + v14);
  swift_release(v17);
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = *(_QWORD *)(v16 + 8);
  swift_release(v18);
  *(_QWORD *)(v15 + 16) = *(_QWORD *)(v16 + 16);
  v19 = *(int *)(a3 + 24);
  v20 = (_QWORD *)(a1 + v19);
  v21 = (uint64_t *)(a2 + v19);
  v22 = v20[1];
  v24 = *v21;
  v23 = v21[1];
  *v20 = v24;
  v20[1] = v23;
  swift_release(v22);
  return a1;
}

uint64_t sub_10001BDC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001BDCC);
}

uint64_t sub_10001BDCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for AccessPointContainer(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10001BE4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001BE58);
}

uint64_t sub_10001BE58(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for AccessPointContainer(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for AccessPointContentView(uint64_t a1)
{
  return sub_100010C88(a1, qword_10010CBC8, (uint64_t)&nominal type descriptor for AccessPointContentView);
}

uint64_t sub_10001BEE8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for AccessPointContainer(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1000C8658;
    v4[2] = &unk_1000C8670;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

_QWORD *sub_10001BF64(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  int *v30;
  uint64_t v31;
  unsigned int (*v32)(_QWORD *, uint64_t, int *);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  void (*v46)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *__dst;
  void (*v73)(uint64_t, uint64_t, uint64_t);
  unsigned int (*v74)(char *, uint64_t, uint64_t);
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v34 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v34 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v34);
  }
  else
  {
    v6 = a2[1];
    v7 = *((_BYTE *)a2 + 16);
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v6;
    *(_BYTE *)(a1 + 16) = v7;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    v9 = a2[6];
    v8 = a2[7];
    *(_QWORD *)(a1 + 48) = v9;
    *(_QWORD *)(a1 + 56) = v8;
    v10 = a2[8];
    *(_QWORD *)(a1 + 64) = v10;
    *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
    v11 = a2[10];
    *(_QWORD *)(a1 + 80) = v11;
    *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
    v12 = a2[12];
    *(_QWORD *)(a1 + 96) = v12;
    *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
    v13 = a2[14];
    *(_QWORD *)(a1 + 112) = v13;
    *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
    v14 = a2[16];
    v15 = a3[14];
    v77 = a1 + v15;
    v75 = (uint64_t)a2 + v15;
    *(_QWORD *)(a1 + 128) = v14;
    v16 = type metadata accessor for AccessPointAnchoring(0);
    v73 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
    swift_retain(v6);
    swift_retain(v9);
    swift_retain(v10);
    swift_retain(v11);
    v17 = v12;
    v18 = a3;
    swift_retain(v17);
    swift_retain(v13);
    swift_retain(v14);
    v73(v77, v75, v16);
    v19 = sub_100003304(&qword_10010CC08);
    v20 = *(int *)(v19 + 28);
    v21 = *(_QWORD *)(v75 + v20);
    *(_QWORD *)(v77 + v20) = v21;
    v22 = a3[15];
    v23 = (char *)v4 + v22;
    v24 = (uint64_t)a2 + v22;
    swift_retain(v21);
    v73((uint64_t)v23, v24, v16);
    v25 = *(int *)(v19 + 28);
    v26 = *(_QWORD *)(v24 + v25);
    *(_QWORD *)&v23[v25] = v26;
    v27 = a3[16];
    v28 = (_QWORD *)((char *)v4 + v27);
    v29 = (uint64_t *)((char *)a2 + v27);
    v30 = (int *)type metadata accessor for Game(0);
    v31 = *((_QWORD *)v30 - 1);
    v32 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v31 + 48);
    swift_retain(v26);
    if (v32(v29, 1, v30))
    {
      v33 = sub_100003304(&qword_10010CA78);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      v35 = v29[1];
      *v28 = *v29;
      v28[1] = v35;
      v36 = v29[3];
      v28[2] = v29[2];
      v28[3] = v36;
      v37 = v29[5];
      v28[4] = v29[4];
      v28[5] = v37;
      v38 = v30[7];
      __dst = (char *)v28 + v38;
      v76 = (char *)v29 + v38;
      v78 = v31;
      v39 = type metadata accessor for Date(0);
      v40 = *(_QWORD *)(v39 - 8);
      v74 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48);
      swift_bridgeObjectRetain(v35);
      swift_bridgeObjectRetain(v36);
      swift_bridgeObjectRetain(v37);
      if (v74(v76, 1, v39))
      {
        v41 = sub_100003304(&qword_10010CC10);
        memcpy(__dst, v76, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v40 + 16))(__dst, v76, v39);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(__dst, 0, 1, v39);
      }
      *(_QWORD *)((char *)v28 + v30[8]) = *(_QWORD *)((char *)v29 + v30[8]);
      *((_BYTE *)v28 + v30[9]) = *((_BYTE *)v29 + v30[9]);
      *((_BYTE *)v28 + v30[10]) = *((_BYTE *)v29 + v30[10]);
      *((_BYTE *)v28 + v30[11]) = *((_BYTE *)v29 + v30[11]);
      *((_BYTE *)v28 + v30[12]) = *((_BYTE *)v29 + v30[12]);
      *((_BYTE *)v28 + v30[13]) = *((_BYTE *)v29 + v30[13]);
      *((_BYTE *)v28 + v30[14]) = *((_BYTE *)v29 + v30[14]);
      v42 = v30[15];
      v43 = (_QWORD *)((char *)v28 + v42);
      v44 = (_QWORD *)((char *)v29 + v42);
      v45 = v44[1];
      *v43 = *v44;
      v43[1] = v45;
      v46 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v78 + 56);
      swift_bridgeObjectRetain(v45);
      v46(v28, 0, 1, v30);
      v18 = a3;
    }
    v47 = v18[17];
    v48 = (char *)v4 + v47;
    v49 = (uint64_t)a2 + v47;
    v50 = type metadata accessor for PageID(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v48, v49, v50);
    v51 = (int *)type metadata accessor for AccessPointContainer(0);
    v52 = v51[5];
    v53 = &v48[v52];
    v54 = v49 + v52;
    v55 = type metadata accessor for PageMetrics(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(v53, v54, v55);
    v48[v51[6]] = *(_BYTE *)(v49 + v51[6]);
    v56 = v51[7];
    v57 = *(_QWORD *)(v49 + v56);
    *(_QWORD *)&v48[v56] = v57;
    v58 = v18[18];
    v59 = v18[19];
    v60 = *(uint64_t *)((char *)a2 + v58);
    *(_QWORD *)((char *)v4 + v58) = v60;
    v61 = *(uint64_t *)((char *)a2 + v59);
    *(_QWORD *)((char *)v4 + v59) = v61;
    v62 = v18[20];
    v63 = (_QWORD *)((char *)v4 + v62);
    v64 = (uint64_t)a2 + v62;
    v65 = *(uint64_t *)((char *)a2 + v62);
    v66 = *(_QWORD *)(v64 + 8);
    *v63 = v65;
    v63[1] = v66;
    swift_bridgeObjectRetain(v57);
    swift_retain(v60);
    swift_retain(v61);
    swift_retain(v65);
    swift_retain(v66);
    v67 = *(int *)(sub_100003304(&qword_10010CC18) + 32);
    v68 = (char *)v63 + v67;
    v69 = v64 + v67;
    v70 = sub_100003304(&qword_10010CC20);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 16))(v68, v69, v70);
  }
  return v4;
}

uint64_t sub_10001C3D4(_QWORD *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  void (*v6)(char *, uint64_t);
  uint64_t v7;
  __n128 v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;

  swift_release(a1[1]);
  swift_release(a1[6]);
  swift_release(a1[8]);
  swift_release(a1[10]);
  swift_release(a1[12]);
  swift_release(a1[14]);
  swift_release(a1[16]);
  v4 = (char *)a1 + a2[14];
  v5 = type metadata accessor for AccessPointAnchoring(0);
  v6 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v7 = sub_100003304(&qword_10010CC08);
  v8 = swift_release(*(_QWORD *)&v4[*(int *)(v7 + 28)]);
  v9 = (char *)a1 + a2[15];
  ((void (*)(char *, uint64_t, __n128))v6)(v9, v5, v8);
  swift_release(*(_QWORD *)&v9[*(int *)(v7 + 28)]);
  v10 = (_QWORD *)((char *)a1 + a2[16]);
  v11 = type metadata accessor for Game(0);
  if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11))
  {
    swift_bridgeObjectRelease(v10[1]);
    swift_bridgeObjectRelease(v10[3]);
    swift_bridgeObjectRelease(v10[5]);
    v12 = (char *)v10 + *(int *)(v11 + 28);
    v13 = type metadata accessor for Date(0);
    v14 = *(_QWORD *)(v13 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
      (*(void (**)(char *, uint64_t))(v14 + 8))(v12, v13);
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v10 + *(int *)(v11 + 60) + 8));
  }
  v15 = (char *)a1 + a2[17];
  v16 = type metadata accessor for PageID(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  v17 = type metadata accessor for AccessPointContainer(0);
  v18 = &v15[*(int *)(v17 + 20)];
  v19 = type metadata accessor for PageMetrics(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
  swift_bridgeObjectRelease(*(_QWORD *)&v15[*(int *)(v17 + 28)]);
  swift_release(*(_QWORD *)((char *)a1 + a2[18]));
  swift_release(*(_QWORD *)((char *)a1 + a2[19]));
  v20 = (_QWORD *)((char *)a1 + a2[20]);
  swift_release(*v20);
  swift_release(v20[1]);
  v21 = (char *)v20 + *(int *)(sub_100003304(&qword_10010CC18) + 32);
  v22 = sub_100003304(&qword_10010CC20);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
}

uint64_t sub_10001C600(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  int *v29;
  uint64_t v30;
  unsigned int (*v31)(_QWORD *, uint64_t, int *);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  void (*v44)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int (*v70)(char *, uint64_t, uint64_t);
  void (*v71)(uint64_t, char *, uint64_t);
  char *v72;
  char *__dsta;
  char *__dst;
  uint64_t v75;
  uint64_t v76;

  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v7;
  v9 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v9;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v10 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v10;
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v11 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 96) = v11;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v12 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 112) = v12;
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  v13 = *(_QWORD *)(a2 + 128);
  v14 = a3[14];
  __dsta = (char *)(a2 + v14);
  v75 = a1 + v14;
  *(_QWORD *)(a1 + 128) = v13;
  v15 = type metadata accessor for AccessPointAnchoring(0);
  v71 = *(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
  swift_retain(v5);
  swift_retain(v8);
  swift_retain(v9);
  swift_retain(v10);
  v16 = v11;
  v17 = a3;
  swift_retain(v16);
  swift_retain(v12);
  swift_retain(v13);
  v71(v75, __dsta, v15);
  v18 = sub_100003304(&qword_10010CC08);
  v19 = *(int *)(v18 + 28);
  v20 = *(_QWORD *)&__dsta[v19];
  *(_QWORD *)(v75 + v19) = v20;
  v21 = a3[15];
  v22 = a1 + v21;
  v23 = (char *)(a2 + v21);
  swift_retain(v20);
  v71(v22, v23, v15);
  v24 = *(int *)(v18 + 28);
  v25 = *(_QWORD *)&v23[v24];
  *(_QWORD *)(v22 + v24) = v25;
  v26 = a3[16];
  v27 = (_QWORD *)(a1 + v26);
  v28 = (_QWORD *)(a2 + v26);
  v29 = (int *)type metadata accessor for Game(0);
  v30 = *((_QWORD *)v29 - 1);
  v31 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v30 + 48);
  swift_retain(v25);
  if (v31(v28, 1, v29))
  {
    v32 = sub_100003304(&qword_10010CA78);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    v33 = v28[1];
    *v27 = *v28;
    v27[1] = v33;
    v34 = v28[3];
    v27[2] = v28[2];
    v27[3] = v34;
    v35 = v28[5];
    v27[4] = v28[4];
    v27[5] = v35;
    v36 = v29[7];
    __dst = (char *)v27 + v36;
    v76 = v30;
    v72 = (char *)v28 + v36;
    v37 = type metadata accessor for Date(0);
    v38 = *(_QWORD *)(v37 - 8);
    v70 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRetain(v35);
    if (v70(v72, 1, v37))
    {
      v39 = sub_100003304(&qword_10010CC10);
      memcpy(__dst, v72, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v38 + 16))(__dst, v72, v37);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(__dst, 0, 1, v37);
    }
    *(_QWORD *)((char *)v27 + v29[8]) = *(_QWORD *)((char *)v28 + v29[8]);
    *((_BYTE *)v27 + v29[9]) = *((_BYTE *)v28 + v29[9]);
    *((_BYTE *)v27 + v29[10]) = *((_BYTE *)v28 + v29[10]);
    *((_BYTE *)v27 + v29[11]) = *((_BYTE *)v28 + v29[11]);
    *((_BYTE *)v27 + v29[12]) = *((_BYTE *)v28 + v29[12]);
    *((_BYTE *)v27 + v29[13]) = *((_BYTE *)v28 + v29[13]);
    *((_BYTE *)v27 + v29[14]) = *((_BYTE *)v28 + v29[14]);
    v40 = v29[15];
    v41 = (_QWORD *)((char *)v27 + v40);
    v42 = (_QWORD *)((char *)v28 + v40);
    v43 = v42[1];
    *v41 = *v42;
    v41[1] = v43;
    v44 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v76 + 56);
    swift_bridgeObjectRetain(v43);
    v44(v27, 0, 1, v29);
    v17 = a3;
  }
  v45 = v17[17];
  v46 = a1 + v45;
  v47 = a2 + v45;
  v48 = type metadata accessor for PageID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v46, v47, v48);
  v49 = (int *)type metadata accessor for AccessPointContainer(0);
  v50 = v49[5];
  v51 = v46 + v50;
  v52 = v47 + v50;
  v53 = type metadata accessor for PageMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 16))(v51, v52, v53);
  *(_BYTE *)(v46 + v49[6]) = *(_BYTE *)(v47 + v49[6]);
  v54 = v49[7];
  v55 = *(_QWORD *)(v47 + v54);
  *(_QWORD *)(v46 + v54) = v55;
  v56 = v17[18];
  v57 = v17[19];
  v58 = *(_QWORD *)(a2 + v56);
  *(_QWORD *)(a1 + v56) = v58;
  v59 = *(_QWORD *)(a2 + v57);
  *(_QWORD *)(a1 + v57) = v59;
  v60 = v17[20];
  v61 = (_QWORD *)(a1 + v60);
  v62 = a2 + v60;
  v63 = *(_QWORD *)(a2 + v60);
  v64 = *(_QWORD *)(v62 + 8);
  *v61 = v63;
  v61[1] = v64;
  swift_bridgeObjectRetain(v55);
  swift_retain(v58);
  swift_retain(v59);
  swift_retain(v63);
  swift_retain(v64);
  v65 = *(int *)(sub_100003304(&qword_10010CC18) + 32);
  v66 = (char *)v61 + v65;
  v67 = v62 + v65;
  v68 = sub_100003304(&qword_10010CC20);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 16))(v66, v67, v68);
  return a1;
}

uint64_t sub_10001CA40(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  int *v40;
  uint64_t v41;
  uint64_t (*v42)(_QWORD *, uint64_t, int *);
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(char *, uint64_t, uint64_t);
  int v63;
  size_t v64;
  void *v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  void (*v70)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v106;
  unsigned int (*v107)(char *, uint64_t, uint64_t);
  char *v108;
  void *v109;
  char *__dst;
  int *v111;
  int *v112;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_BYTE *)(a2 + 16);
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = v7;
  swift_retain(v6);
  swift_release(v8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_retain(v10);
  swift_release(v9);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 64);
  v12 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v12;
  swift_retain(v12);
  swift_release(v11);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v13 = *(_QWORD *)(a1 + 80);
  v14 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v14;
  swift_retain(v14);
  swift_release(v13);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v15 = *(_QWORD *)(a1 + 96);
  v16 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 96) = v16;
  swift_retain(v16);
  swift_release(v15);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v17 = *(_QWORD *)(a1 + 112);
  v18 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 112) = v18;
  swift_retain(v18);
  swift_release(v17);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  v19 = *(_QWORD *)(a1 + 128);
  v20 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 128) = v20;
  swift_retain(v20);
  swift_release(v19);
  v21 = a3[14];
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = type metadata accessor for AccessPointAnchoring(0);
  v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 24);
  v25(v22, v23, v24);
  v26 = sub_100003304(&qword_10010CC08);
  v27 = *(int *)(v26 + 28);
  v28 = *(_QWORD *)(v22 + v27);
  v29 = *(_QWORD *)(v23 + v27);
  *(_QWORD *)(v22 + v27) = v29;
  swift_retain(v29);
  v30 = swift_release(v28);
  v31 = a3[15];
  v32 = a1 + v31;
  v33 = a2 + v31;
  ((void (*)(uint64_t, uint64_t, uint64_t, __n128))v25)(a1 + v31, a2 + v31, v24, v30);
  v34 = *(int *)(v26 + 28);
  v35 = *(_QWORD *)(v32 + v34);
  v36 = *(_QWORD *)(v33 + v34);
  *(_QWORD *)(v32 + v34) = v36;
  swift_retain(v36);
  swift_release(v35);
  v37 = a3[16];
  v38 = (_QWORD *)(a1 + v37);
  v39 = (_QWORD *)(a2 + v37);
  v40 = (int *)type metadata accessor for Game(0);
  v41 = *((_QWORD *)v40 - 1);
  v42 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v41 + 48);
  LODWORD(v26) = v42(v38, 1, v40);
  v43 = v42(v39, 1, v40);
  if (!(_DWORD)v26)
  {
    if (v43)
    {
      sub_1000106F0((uint64_t)v38, type metadata accessor for Game);
      goto LABEL_7;
    }
    v112 = a3;
    *v38 = *v39;
    v51 = v39[1];
    v52 = v38[1];
    v38[1] = v51;
    swift_bridgeObjectRetain(v51);
    swift_bridgeObjectRelease(v52);
    v38[2] = v39[2];
    v53 = v39[3];
    v54 = v38[3];
    v38[3] = v53;
    swift_bridgeObjectRetain(v53);
    swift_bridgeObjectRelease(v54);
    v38[4] = v39[4];
    v55 = v39[5];
    v56 = v38[5];
    v38[5] = v55;
    swift_bridgeObjectRetain(v55);
    swift_bridgeObjectRelease(v56);
    v57 = v40[7];
    v58 = (char *)v38 + v57;
    v59 = (char *)v39 + v57;
    v60 = type metadata accessor for Date(0);
    v61 = *(_QWORD *)(v60 - 8);
    v62 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v61 + 48);
    v109 = v58;
    LODWORD(v58) = v62(v58, 1, v60);
    v63 = v62(v59, 1, v60);
    if ((_DWORD)v58)
    {
      if (!v63)
      {
        (*(void (**)(void *, char *, uint64_t))(v61 + 16))(v109, v59, v60);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v61 + 56))(v109, 0, 1, v60);
        goto LABEL_18;
      }
      v64 = *(_QWORD *)(*(_QWORD *)(sub_100003304(&qword_10010CC10) - 8) + 64);
      v65 = v109;
    }
    else
    {
      if (!v63)
      {
        (*(void (**)(void *, char *, uint64_t))(v61 + 24))(v109, v59, v60);
        goto LABEL_18;
      }
      (*(void (**)(void *, uint64_t))(v61 + 8))(v109, v60);
      v64 = *(_QWORD *)(*(_QWORD *)(sub_100003304(&qword_10010CC10) - 8) + 64);
      v65 = v109;
    }
    memcpy(v65, v59, v64);
LABEL_18:
    *(_QWORD *)((char *)v38 + v40[8]) = *(_QWORD *)((char *)v39 + v40[8]);
    *((_BYTE *)v38 + v40[9]) = *((_BYTE *)v39 + v40[9]);
    *((_BYTE *)v38 + v40[10]) = *((_BYTE *)v39 + v40[10]);
    *((_BYTE *)v38 + v40[11]) = *((_BYTE *)v39 + v40[11]);
    *((_BYTE *)v38 + v40[12]) = *((_BYTE *)v39 + v40[12]);
    *((_BYTE *)v38 + v40[13]) = *((_BYTE *)v39 + v40[13]);
    *((_BYTE *)v38 + v40[14]) = *((_BYTE *)v39 + v40[14]);
    v71 = v40[15];
    v72 = (_QWORD *)((char *)v38 + v71);
    v73 = (_QWORD *)((char *)v39 + v71);
    *v72 = *v73;
    v74 = v73[1];
    v75 = v72[1];
    v72[1] = v74;
    swift_bridgeObjectRetain(v74);
    swift_bridgeObjectRelease(v75);
    a3 = v112;
    goto LABEL_19;
  }
  if (v43)
  {
LABEL_7:
    v50 = sub_100003304(&qword_10010CA78);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
    goto LABEL_19;
  }
  *v38 = *v39;
  v44 = v39[1];
  v38[1] = v44;
  v38[2] = v39[2];
  v45 = v39[3];
  v38[3] = v45;
  v38[4] = v39[4];
  v46 = v39[5];
  v38[5] = v46;
  v47 = v40[7];
  __dst = (char *)v38 + v47;
  v111 = a3;
  v108 = (char *)v39 + v47;
  v48 = type metadata accessor for Date(0);
  v106 = *(_QWORD *)(v48 - 8);
  v107 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v106 + 48);
  swift_bridgeObjectRetain(v44);
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRetain(v46);
  if (v107(v108, 1, v48))
  {
    v49 = sub_100003304(&qword_10010CC10);
    memcpy(__dst, v108, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v106 + 16))(__dst, v108, v48);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v106 + 56))(__dst, 0, 1, v48);
  }
  a3 = v111;
  *(_QWORD *)((char *)v38 + v40[8]) = *(_QWORD *)((char *)v39 + v40[8]);
  *((_BYTE *)v38 + v40[9]) = *((_BYTE *)v39 + v40[9]);
  *((_BYTE *)v38 + v40[10]) = *((_BYTE *)v39 + v40[10]);
  *((_BYTE *)v38 + v40[11]) = *((_BYTE *)v39 + v40[11]);
  *((_BYTE *)v38 + v40[12]) = *((_BYTE *)v39 + v40[12]);
  *((_BYTE *)v38 + v40[13]) = *((_BYTE *)v39 + v40[13]);
  *((_BYTE *)v38 + v40[14]) = *((_BYTE *)v39 + v40[14]);
  v66 = v40[15];
  v67 = (_QWORD *)((char *)v38 + v66);
  v68 = (_QWORD *)((char *)v39 + v66);
  *v67 = *v68;
  v69 = v68[1];
  v67[1] = v69;
  v70 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v41 + 56);
  swift_bridgeObjectRetain(v69);
  v70(v38, 0, 1, v40);
LABEL_19:
  v76 = a3[17];
  v77 = a1 + v76;
  v78 = a2 + v76;
  v79 = type metadata accessor for PageID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 24))(v77, v78, v79);
  v80 = (int *)type metadata accessor for AccessPointContainer(0);
  v81 = v80[5];
  v82 = v77 + v81;
  v83 = v78 + v81;
  v84 = type metadata accessor for PageMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v84 - 8) + 24))(v82, v83, v84);
  *(_BYTE *)(v77 + v80[6]) = *(_BYTE *)(v78 + v80[6]);
  v85 = v80[7];
  v86 = *(_QWORD *)(v78 + v85);
  v87 = *(_QWORD *)(v77 + v85);
  *(_QWORD *)(v77 + v85) = v86;
  swift_bridgeObjectRetain(v86);
  swift_bridgeObjectRelease(v87);
  v88 = a3[18];
  v89 = *(_QWORD *)(a2 + v88);
  v90 = *(_QWORD *)(a1 + v88);
  *(_QWORD *)(a1 + v88) = v89;
  swift_retain(v89);
  swift_release(v90);
  v91 = a3[19];
  v92 = *(_QWORD *)(a2 + v91);
  v93 = *(_QWORD *)(a1 + v91);
  *(_QWORD *)(a1 + v91) = v92;
  swift_retain(v92);
  swift_release(v93);
  v94 = a3[20];
  v95 = a1 + v94;
  v96 = (uint64_t *)(a2 + v94);
  v97 = *(_QWORD *)(a1 + v94);
  v98 = *v96;
  *(_QWORD *)(a1 + v94) = *v96;
  swift_retain(v98);
  swift_release(v97);
  v99 = v96[1];
  v100 = *(_QWORD *)(v95 + 8);
  *(_QWORD *)(v95 + 8) = v99;
  swift_retain(v99);
  swift_release(v100);
  v101 = *(int *)(sub_100003304(&qword_10010CC18) + 32);
  v102 = v95 + v101;
  v103 = (char *)v96 + v101;
  v104 = sub_100003304(&qword_10010CC20);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v104 - 8) + 24))(v102, v103, v104);
  return a1;
}

uint64_t sub_10001D130(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *__dst;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  v7 = a3[14];
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  v10 = type metadata accessor for AccessPointAnchoring(0);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  v12 = sub_100003304(&qword_10010CC08);
  *(_QWORD *)(v8 + *(int *)(v12 + 28)) = *(_QWORD *)(v9 + *(int *)(v12 + 28));
  v13 = a3[15];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v11(a1 + v13, a2 + v13, v10);
  *(_QWORD *)(v14 + *(int *)(v12 + 28)) = *(_QWORD *)(v15 + *(int *)(v12 + 28));
  v16 = a3[16];
  v17 = (_OWORD *)(a1 + v16);
  v18 = (_OWORD *)(a2 + v16);
  v19 = (int *)type metadata accessor for Game(0);
  v20 = *((_QWORD *)v19 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v20 + 48))(v18, 1, v19))
  {
    v21 = sub_100003304(&qword_10010CA78);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    v22 = v18[1];
    *v17 = *v18;
    v17[1] = v22;
    v17[2] = v18[2];
    v23 = v19[7];
    __dst = (char *)v17 + v23;
    v24 = (char *)v18 + v23;
    v25 = type metadata accessor for Date(0);
    v26 = *(_QWORD *)(v25 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
    {
      v27 = sub_100003304(&qword_10010CC10);
      memcpy(__dst, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 32))(__dst, v24, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(__dst, 0, 1, v25);
    }
    *(_QWORD *)((char *)v17 + v19[8]) = *(_QWORD *)((char *)v18 + v19[8]);
    *((_BYTE *)v17 + v19[9]) = *((_BYTE *)v18 + v19[9]);
    *((_BYTE *)v17 + v19[10]) = *((_BYTE *)v18 + v19[10]);
    *((_BYTE *)v17 + v19[11]) = *((_BYTE *)v18 + v19[11]);
    *((_BYTE *)v17 + v19[12]) = *((_BYTE *)v18 + v19[12]);
    *((_BYTE *)v17 + v19[13]) = *((_BYTE *)v18 + v19[13]);
    *((_BYTE *)v17 + v19[14]) = *((_BYTE *)v18 + v19[14]);
    *(_OWORD *)((char *)v17 + v19[15]) = *(_OWORD *)((char *)v18 + v19[15]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v20 + 56))(v17, 0, 1, v19);
  }
  v28 = a3[17];
  v29 = a1 + v28;
  v30 = a2 + v28;
  v31 = type metadata accessor for PageID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v29, v30, v31);
  v32 = (int *)type metadata accessor for AccessPointContainer(0);
  v33 = v32[5];
  v34 = v29 + v33;
  v35 = v30 + v33;
  v36 = type metadata accessor for PageMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v34, v35, v36);
  *(_BYTE *)(v29 + v32[6]) = *(_BYTE *)(v30 + v32[6]);
  *(_QWORD *)(v29 + v32[7]) = *(_QWORD *)(v30 + v32[7]);
  v37 = a3[19];
  *(_QWORD *)(a1 + a3[18]) = *(_QWORD *)(a2 + a3[18]);
  *(_QWORD *)(a1 + v37) = *(_QWORD *)(a2 + v37);
  v38 = a3[20];
  v39 = (_QWORD *)(a1 + v38);
  v40 = a2 + v38;
  v41 = *(_QWORD *)(a2 + v38 + 8);
  *v39 = *(_QWORD *)(a2 + v38);
  v39[1] = v41;
  v42 = *(int *)(sub_100003304(&qword_10010CC18) + 32);
  v43 = (char *)v39 + v42;
  v44 = v40 + v42;
  v45 = sub_100003304(&qword_10010CC20);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 32))(v43, v44, v45);
  return a1;
}

uint64_t sub_10001D484(uint64_t a1, uint64_t a2, int *a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  int *v32;
  uint64_t v33;
  uint64_t (*v34)(_QWORD *, uint64_t, int *);
  int v35;
  __int128 v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t (*v53)(char *, uint64_t, uint64_t);
  int v54;
  size_t v55;
  void *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v88;
  char *__dst;
  void *__dsta;

  v6 = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v6;
  swift_release(v7);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_release(v8);
  v9 = *(_QWORD *)(a1 + 64);
  v10 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v10;
  swift_release(v9);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v11 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_release(v11);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v12 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_release(v12);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v13 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_release(v13);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  v14 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_release(v14);
  v15 = a3[14];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for AccessPointAnchoring(0);
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40);
  v19(v16, v17, v18);
  v20 = sub_100003304(&qword_10010CC08);
  v21 = *(int *)(v20 + 28);
  v22 = *(_QWORD *)(v16 + v21);
  *(_QWORD *)(v16 + v21) = *(_QWORD *)(v17 + v21);
  v23 = swift_release(v22);
  v24 = a3[15];
  v25 = a1 + v24;
  v26 = a2 + v24;
  ((void (*)(uint64_t, uint64_t, uint64_t, __n128))v19)(a1 + v24, a2 + v24, v18, v23);
  v27 = *(int *)(v20 + 28);
  v28 = *(_QWORD *)(v25 + v27);
  *(_QWORD *)(v25 + v27) = *(_QWORD *)(v26 + v27);
  swift_release(v28);
  v29 = a3[16];
  v30 = (_QWORD *)(a1 + v29);
  v31 = (_QWORD *)(a2 + v29);
  v32 = (int *)type metadata accessor for Game(0);
  v33 = *((_QWORD *)v32 - 1);
  v34 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v33 + 48);
  LODWORD(v20) = v34(v30, 1, v32);
  v35 = v34(v31, 1, v32);
  if (!(_DWORD)v20)
  {
    if (v35)
    {
      sub_1000106F0((uint64_t)v30, type metadata accessor for Game);
      goto LABEL_7;
    }
    v43 = v31[1];
    v44 = v30[1];
    *v30 = *v31;
    v30[1] = v43;
    swift_bridgeObjectRelease(v44);
    v45 = v31[3];
    v46 = v30[3];
    v30[2] = v31[2];
    v30[3] = v45;
    swift_bridgeObjectRelease(v46);
    v47 = v31[5];
    v48 = v30[5];
    v30[4] = v31[4];
    v30[5] = v47;
    swift_bridgeObjectRelease(v48);
    v49 = v32[7];
    v50 = (char *)v30 + v49;
    v51 = (char *)v31 + v49;
    v52 = type metadata accessor for Date(0);
    v88 = *(_QWORD *)(v52 - 8);
    v53 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v88 + 48);
    __dsta = v50;
    LODWORD(v50) = v53(v50, 1, v52);
    v54 = v53(v51, 1, v52);
    if ((_DWORD)v50)
    {
      if (!v54)
      {
        (*(void (**)(void *, char *, uint64_t))(v88 + 32))(__dsta, v51, v52);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v88 + 56))(__dsta, 0, 1, v52);
        goto LABEL_18;
      }
      v55 = *(_QWORD *)(*(_QWORD *)(sub_100003304(&qword_10010CC10) - 8) + 64);
      v56 = __dsta;
    }
    else
    {
      if (!v54)
      {
        (*(void (**)(void *, char *, uint64_t))(v88 + 40))(__dsta, v51, v52);
        goto LABEL_18;
      }
      (*(void (**)(void *, uint64_t))(v88 + 8))(__dsta, v52);
      v55 = *(_QWORD *)(*(_QWORD *)(sub_100003304(&qword_10010CC10) - 8) + 64);
      v56 = __dsta;
    }
    memcpy(v56, v51, v55);
LABEL_18:
    *(_QWORD *)((char *)v30 + v32[8]) = *(_QWORD *)((char *)v31 + v32[8]);
    *((_BYTE *)v30 + v32[9]) = *((_BYTE *)v31 + v32[9]);
    *((_BYTE *)v30 + v32[10]) = *((_BYTE *)v31 + v32[10]);
    *((_BYTE *)v30 + v32[11]) = *((_BYTE *)v31 + v32[11]);
    *((_BYTE *)v30 + v32[12]) = *((_BYTE *)v31 + v32[12]);
    *((_BYTE *)v30 + v32[13]) = *((_BYTE *)v31 + v32[13]);
    *((_BYTE *)v30 + v32[14]) = *((_BYTE *)v31 + v32[14]);
    v57 = v32[15];
    v58 = (_QWORD *)((char *)v30 + v57);
    v59 = (_QWORD *)((char *)v31 + v57);
    v61 = *v59;
    v60 = v59[1];
    v62 = v58[1];
    *v58 = v61;
    v58[1] = v60;
    swift_bridgeObjectRelease(v62);
    goto LABEL_19;
  }
  if (v35)
  {
LABEL_7:
    v42 = sub_100003304(&qword_10010CA78);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    goto LABEL_19;
  }
  v36 = *((_OWORD *)v31 + 1);
  *(_OWORD *)v30 = *(_OWORD *)v31;
  *((_OWORD *)v30 + 1) = v36;
  *((_OWORD *)v30 + 2) = *((_OWORD *)v31 + 2);
  v37 = v32[7];
  __dst = (char *)v30 + v37;
  v38 = (char *)v31 + v37;
  v39 = type metadata accessor for Date(0);
  v40 = *(_QWORD *)(v39 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
  {
    v41 = sub_100003304(&qword_10010CC10);
    memcpy(__dst, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v40 + 32))(__dst, v38, v39);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(__dst, 0, 1, v39);
  }
  *(_QWORD *)((char *)v30 + v32[8]) = *(_QWORD *)((char *)v31 + v32[8]);
  *((_BYTE *)v30 + v32[9]) = *((_BYTE *)v31 + v32[9]);
  *((_BYTE *)v30 + v32[10]) = *((_BYTE *)v31 + v32[10]);
  *((_BYTE *)v30 + v32[11]) = *((_BYTE *)v31 + v32[11]);
  *((_BYTE *)v30 + v32[12]) = *((_BYTE *)v31 + v32[12]);
  *((_BYTE *)v30 + v32[13]) = *((_BYTE *)v31 + v32[13]);
  *((_BYTE *)v30 + v32[14]) = *((_BYTE *)v31 + v32[14]);
  *(_OWORD *)((char *)v30 + v32[15]) = *(_OWORD *)((char *)v31 + v32[15]);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v33 + 56))(v30, 0, 1, v32);
LABEL_19:
  v63 = a3[17];
  v64 = a1 + v63;
  v65 = a2 + v63;
  v66 = type metadata accessor for PageID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 40))(v64, v65, v66);
  v67 = (int *)type metadata accessor for AccessPointContainer(0);
  v68 = v67[5];
  v69 = v64 + v68;
  v70 = v65 + v68;
  v71 = type metadata accessor for PageMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 40))(v69, v70, v71);
  *(_BYTE *)(v64 + v67[6]) = *(_BYTE *)(v65 + v67[6]);
  v72 = v67[7];
  v73 = *(_QWORD *)(v64 + v72);
  *(_QWORD *)(v64 + v72) = *(_QWORD *)(v65 + v72);
  swift_bridgeObjectRelease(v73);
  v74 = a3[18];
  v75 = *(_QWORD *)(a1 + v74);
  *(_QWORD *)(a1 + v74) = *(_QWORD *)(a2 + v74);
  swift_release(v75);
  v76 = a3[19];
  v77 = *(_QWORD *)(a1 + v76);
  *(_QWORD *)(a1 + v76) = *(_QWORD *)(a2 + v76);
  swift_release(v77);
  v78 = a3[20];
  v79 = a1 + v78;
  v80 = a2 + v78;
  v81 = *(_QWORD *)(a1 + v78);
  *(_QWORD *)(a1 + v78) = *(_QWORD *)(a2 + v78);
  swift_release(v81);
  v82 = *(_QWORD *)(v79 + 8);
  *(_QWORD *)(v79 + 8) = *(_QWORD *)(v80 + 8);
  swift_release(v82);
  v83 = *(int *)(sub_100003304(&qword_10010CC18) + 32);
  v84 = v79 + v83;
  v85 = v80 + v83;
  v86 = sub_100003304(&qword_10010CC20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v86 - 8) + 40))(v84, v85, v86);
  return a1;
}

uint64_t sub_10001DA48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001DA54);
}

uint64_t sub_10001DA54(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v6 = sub_100003304(&qword_10010CC08);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[14];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = sub_100003304(&qword_10010CA78);
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[16];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v11 = type metadata accessor for AccessPointContainer(0);
  v7 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v9 = a3[17];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = sub_100003304(&qword_10010CC18);
    v7 = *(_QWORD *)(v8 - 8);
    v9 = a3[20];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v12 = *(_QWORD *)(a1 + a3[18]);
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  return (v12 + 1);
}

uint64_t sub_10001DB4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001DB58);
}

uint64_t sub_10001DB58(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v8 = sub_100003304(&qword_10010CC08);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[14];
  }
  else
  {
    v12 = sub_100003304(&qword_10010CA78);
    v9 = *(_QWORD *)(v12 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v12;
      v11 = a4[16];
    }
    else
    {
      result = type metadata accessor for AccessPointContainer(0);
      v9 = *(_QWORD *)(result - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = result;
        v11 = a4[17];
      }
      else
      {
        if (a3 == 0x7FFFFFFF)
        {
          *(_QWORD *)(a1 + a4[18]) = (a2 - 1);
          return result;
        }
        v10 = sub_100003304(&qword_10010CC18);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[20];
      }
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

uint64_t type metadata accessor for AccessPointTransitionView(uint64_t a1)
{
  return sub_100010C88(a1, (uint64_t *)&unk_10010CC80, (uint64_t)&nominal type descriptor for AccessPointTransitionView);
}

void sub_10001DC60(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[10];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v10[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v10[1] = "\t";
  v10[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v10[3] = (char *)&value witness table for Builtin.Int64 + 64;
  v10[4] = &unk_1000C8670;
  v10[5] = &unk_1000C8670;
  v10[6] = &unk_1000C8670;
  v10[7] = &unk_1000C8670;
  v10[8] = &unk_1000C8670;
  v10[9] = &unk_1000C8670;
  sub_10001DD8C(319, &qword_10010CC90, (uint64_t (*)(uint64_t))&type metadata accessor for AccessPointAnchoring, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for State);
  if (v3 <= 0x3F)
  {
    v11 = *(_QWORD *)(v2 - 8) + 64;
    v12 = v11;
    sub_10001DD8C(319, (unint64_t *)&qword_10010CC98, type metadata accessor for Game, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    if (v5 <= 0x3F)
    {
      v13 = *(_QWORD *)(v4 - 8) + 64;
      v6 = type metadata accessor for AccessPointContainer(319);
      if (v7 <= 0x3F)
      {
        v14 = *(_QWORD *)(v6 - 8) + 64;
        v15 = (char *)&value witness table for Builtin.NativeObject + 64;
        v16 = (char *)&value witness table for Builtin.NativeObject + 64;
        sub_10001DDE4(319);
        if (v9 <= 0x3F)
        {
          v17 = *(_QWORD *)(v8 - 8) + 64;
          swift_initStructMetadata(a1, 256, 17, v10, a1 + 16);
        }
      }
    }
  }
}

void sub_10001DD8C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

void sub_10001DDE4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10010CCA0)
  {
    v2 = sub_100006E54(&qword_10010CC20);
    v3 = type metadata accessor for Binding(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10010CCA0);
  }
}

uint64_t storeEnumTagSinglePayload for AccessPointTransitionView.AnimationState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10001DE88 + 4 * byte_1000C8605[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10001DEBC + 4 * byte_1000C8600[v4]))();
}

uint64_t sub_10001DEBC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001DEC4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10001DECCLL);
  return result;
}

uint64_t sub_10001DED8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10001DEE0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10001DEE4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001DEEC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessPointTransitionView.AnimationState()
{
  return &type metadata for AccessPointTransitionView.AnimationState;
}

unint64_t sub_10001DF0C()
{
  unint64_t result;

  result = qword_10010CD10;
  if (!qword_10010CD10)
  {
    result = swift_getWitnessTable(&unk_1000C8808, &type metadata for AccessPointTransitionView.AnimationState);
    atomic_store(result, (unint64_t *)&qword_10010CD10);
  }
  return result;
}

uint64_t sub_10001DF50(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E4070, 1);
}

double sub_10001DF60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  double result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t KeyPath;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;

  v1 = v0;
  v2 = type metadata accessor for AccessPointTransitionView(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003304(&qword_10010EB20);
  __chkstk_darwin(v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v0 + 48);
  LOBYTE(v29) = *(_BYTE *)(v0 + 40);
  *((_QWORD *)&v29 + 1) = v9;
  sub_100003304(&qword_10010CE10);
  State.wrappedValue.getter(&v28);
  if (!(_BYTE)v28)
  {
    v29 = *(_OWORD *)(v0 + 56);
    sub_100003304(&qword_10010CD58);
    State.wrappedValue.getter(&v28);
    v11 = v28;
    v12 = v1 + *(int *)(v2 + 68);
    if (v11 < *(_QWORD *)(*(_QWORD *)(v12 + *(int *)(type metadata accessor for AccessPointContainer(0) + 28)) + 16))
    {
      v13 = *(_QWORD *)(v1 + 8);
      v14 = *(_BYTE *)(v1 + 16);
      v15 = swift_retain(v13);
      v16 = sub_100030D7C(v15, v14);
      swift_release(v13);
      KeyPath = swift_getKeyPath(&unk_1000C8880);
      *(_QWORD *)&v29 = v16;
      v18 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v29, KeyPath, v18);
      swift_release(KeyPath);
      if (*(_BYTE *)(v16 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__active) == 1)
      {
        v19 = swift_getKeyPath(&unk_1000C88A8);
        *(_QWORD *)&v29 = v16;
        ObservationRegistrar.access<A, B>(_:keyPath:)(&v29, v19, v18);
        swift_release(v19);
        v20 = *(_QWORD *)(v16 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__hideCount);
        *(_QWORD *)&result = swift_release(v16).n128_u64[0];
        if (v20 > 0)
          return result;
        v21 = type metadata accessor for TaskPriority(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v8, 1, 1, v21);
        sub_100007878(v1, (uint64_t)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AccessPointTransitionView);
        type metadata accessor for MainActor(0);
        v22 = static MainActor.shared.getter();
        v23 = *(unsigned __int8 *)(v3 + 80);
        v24 = (v23 + 32) & ~v23;
        v25 = swift_allocObject(&unk_1000FD310, v24 + v4, v23 | 7);
        *(_QWORD *)(v25 + 16) = v22;
        *(_QWORD *)(v25 + 24) = &protocol witness table for MainActor;
        sub_100010F0C((uint64_t)v5, v25 + v24, type metadata accessor for AccessPointTransitionView);
        v26 = sub_100028240((uint64_t)v8, (uint64_t)&unk_10010CE40, v25);
      }
      else
      {
        v26 = v16;
      }
      *(_QWORD *)&result = swift_release(v26).n128_u64[0];
    }
  }
  return result;
}

uint64_t sub_10001E210(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4[5] = a4;
  v5 = type metadata accessor for AccessPointTransitionView(0);
  v4[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[7] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v4[8] = v7;
  v4[9] = swift_task_alloc((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003304(&qword_10010EB20);
  v4[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MainActor(0);
  v4[11] = v9;
  v4[12] = static MainActor.shared.getter(v9);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  v4[13] = v10;
  v4[14] = v11;
  return swift_task_switch(sub_10001E2D0, v10, v11);
}

void sub_10001E2D0()
{
  uint64_t v0;
  double v1;
  unint64_t v2;
  _QWORD *v3;

  *(_OWORD *)(v0 + 16) = *(_OWORD *)(*(_QWORD *)(v0 + 40) + 56);
  sub_100003304(&qword_10010CD58);
  State.wrappedValue.getter((_QWORD *)(v0 + 32));
  v1 = floor(AccessPointContainer.displayDuration(for:)(*(_QWORD *)(v0 + 32)) * 1000000000.0);
  if ((~*(_QWORD *)&v1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v1 <= -1.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v1 < 1.84467441e19)
  {
    v2 = (unint64_t)v1;
    v3 = (_QWORD *)swift_task_alloc(async function pointer to static Task<>.sleep(nanoseconds:)[1]);
    *(_QWORD *)(v0 + 120) = v3;
    *v3 = v0;
    v3[1] = sub_10001E3B0;
    static Task<>.sleep(nanoseconds:)(v2);
    return;
  }
LABEL_7:
  __break(1u);
}

uint64_t sub_10001E3B0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 120));
  if (v0)
  {
    swift_errorRelease(v0);
    v3 = *(_QWORD *)(v2 + 104);
    v4 = *(_QWORD *)(v2 + 112);
    v5 = sub_1000263E4;
  }
  else
  {
    v3 = *(_QWORD *)(v2 + 104);
    v4 = *(_QWORD *)(v2 + 112);
    v5 = sub_10001E418;
  }
  return swift_task_switch(v5, v3, v4);
}

uint64_t sub_10001E418()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 96));
  v6 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v2, 1, 1, v6);
  v7 = sub_100007878(v5, v1, type metadata accessor for AccessPointTransitionView);
  v8 = static MainActor.shared.getter(v7);
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = swift_allocObject(&unk_1000FD338, v10 + v3, v9 | 7);
  *(_QWORD *)(v11 + 16) = v8;
  *(_QWORD *)(v11 + 24) = &protocol witness table for MainActor;
  sub_100010F0C(v1, v11 + v10, type metadata accessor for AccessPointTransitionView);
  v12 = sub_100028240(v2, (uint64_t)&unk_10010CE50, v11);
  swift_release(v12);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001E518(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4[20] = a4;
  v5 = type metadata accessor for AccessPointTransitionView(0);
  v4[21] = v5;
  v4[22] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AccessPointContainer(0);
  v4[23] = v6;
  v4[24] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MainActor(0);
  v4[25] = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  return swift_task_switch(sub_10001E5CC, v8, v9);
}

uint64_t sub_10001E5CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 168);
  swift_release(*(_QWORD *)(v0 + 200));
  v3 = *(_QWORD *)(v1 + *(int *)(v2 + 72));
  KeyPath = swift_getKeyPath(&unk_1000C8830);
  *(_QWORD *)(v0 + 120) = v3;
  v5 = sub_1000035B4(&qword_10010CE00, type metadata accessor for GameDashboardLaunchContext, (uint64_t)&protocol conformance descriptor for GameDashboardLaunchContext);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 120, KeyPath, v5);
  swift_release(KeyPath);
  swift_beginAccess(v3 + 16, v0 + 16, 0, 0);
  if ((*(_BYTE *)(v3 + 16) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + 160);
    *(_OWORD *)(v0 + 72) = *(_OWORD *)(v6 + 56);
    v8 = *(_QWORD *)(v0 + 184);
    v7 = *(_QWORD *)(v0 + 192);
    v9 = *(_QWORD *)(v0 + 168);
    v10 = sub_100003304(&qword_10010CD58);
    State.wrappedValue.getter((_QWORD *)(v0 + 128));
    v11 = *(_QWORD *)(v0 + 128);
    v12 = v6 + *(int *)(v9 + 68);
    sub_100007878(v12, v7, type metadata accessor for AccessPointContainer);
    v13 = *(_QWORD *)(v7 + *(int *)(v8 + 28));
    swift_bridgeObjectRetain(v13);
    sub_1000106F0(v7, type metadata accessor for AccessPointContainer);
    v14 = *(_QWORD *)(v13 + 16);
    swift_bridgeObjectRelease(v13);
    if (v11 >= v14 - 1)
    {
      v23 = *(unsigned __int8 *)(v12 + *(int *)(*(_QWORD *)(v0 + 184) + 24));
      if (v23 >= 6)
        v24 = 1;
      else
        v24 = 0x20202010102uLL >> (8 * v23);
      v25 = *(_QWORD *)(v0 + 160);
      v26 = *(_BYTE *)(v25 + 40);
      v27 = *(_QWORD *)(v25 + 48);
      *(_BYTE *)(v0 + 88) = v26;
      *(_QWORD *)(v0 + 96) = v27;
      *(_BYTE *)(v0 + 208) = v24;
      v28 = sub_100003304(&qword_10010CE10);
      State.wrappedValue.setter(v0 + 208, v28);
    }
    else
    {
      v31 = v9;
      v16 = *(_QWORD *)(v6 + 56);
      v15 = *(_QWORD *)(v6 + 64);
      *(_QWORD *)(v0 + 104) = v16;
      *(_QWORD *)(v0 + 112) = v15;
      swift_retain(v15);
      State.wrappedValue.getter((_QWORD *)(v0 + 152));
      v17 = *(_QWORD *)(v0 + 152);
      v18 = __OFADD__(v17, 1);
      v19 = v17 + 1;
      if (v18)
      {
        __break(1u);
        JUMPOUT(0x10001E9D4);
      }
      v20 = *(_QWORD *)(v0 + 176);
      v21 = *(_QWORD *)(v0 + 160);
      *(_QWORD *)(v0 + 56) = v16;
      *(_QWORD *)(v0 + 64) = v15;
      *(_QWORD *)(v0 + 136) = v19;
      State.wrappedValue.setter(v0 + 136, v10);
      swift_release(v15);
      *(_QWORD *)(v0 + 40) = v16;
      *(_QWORD *)(v0 + 48) = v15;
      State.wrappedValue.getter((_QWORD *)(v0 + 144));
      v22 = *(_QWORD *)(v0 + 144);
      sub_100007878(v21, v20, type metadata accessor for AccessPointTransitionView);
      if (v22 == 1)
        __asm { BR              X11 }
      sub_1000106F0(*(_QWORD *)(v0 + 176), type metadata accessor for AccessPointTransitionView);
      sub_10001DF60();
    }
  }
  v29 = *(_QWORD *)(v0 + 176);
  swift_task_dealloc(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(v29);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001E9EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v9[2];

  v0 = type metadata accessor for AccessPointAnchoring(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v6 = (_QWORD *)((char *)v9 - v5);
  type metadata accessor for AccessPointTransitionView(0);
  v7 = sub_100003304(&qword_10010CC08);
  State.wrappedValue.getter(v6);
  (*(void (**)(char *, _QWORD *, uint64_t))(v1 + 16))(v3, v6, v0);
  State.wrappedValue.setter(v3, v7);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(v1 + 8))(v6, v0);
}

uint64_t sub_10001EAEC@<X0>(uint64_t a1@<X8>)
{
  double *v1;
  double *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _OWORD *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t *v72;
  double *v73;
  uint64_t v74;
  double v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  double v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t (**v112)();
  _QWORD *v114[2];
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  double *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  __int128 v148;
  uint64_t v149;

  v2 = v1;
  v144 = a1;
  v3 = type metadata accessor for AccessPointTransitionView(0);
  v141 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v142 = v4;
  v143 = (uint64_t)v114 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = type metadata accessor for AccessPointAnchoring(0);
  v115 = *(_QWORD *)(v116 - 8);
  __chkstk_darwin(v116);
  v114[0] = (_QWORD **)((char *)v114 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v140 = sub_100003304(&qword_10010D020);
  __chkstk_darwin(v140);
  v139 = (char *)v114 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = sub_100003304(&qword_10010CB10);
  __chkstk_darwin(v135);
  v133 = (uint64_t)v114 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v130);
  v129 = (char *)v114 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = sub_100003304(&qword_10010CE78);
  __chkstk_darwin(v132);
  v131 = (uint64_t *)((char *)v114 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v136 = sub_100003304(&qword_10010CE80);
  __chkstk_darwin(v136);
  v134 = (uint64_t)v114 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = type metadata accessor for AccessPointContentView(0);
  __chkstk_darwin(v119);
  v12 = (char *)v114 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = sub_100003304(&qword_10010D028);
  __chkstk_darwin(v120);
  v14 = (char *)v114 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = sub_100003304(&qword_10010D030);
  __chkstk_darwin(v121);
  v16 = (char *)v114 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = sub_100003304(&qword_10010D038);
  __chkstk_darwin(v122);
  v18 = (char *)v114 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100003304(&qword_10010D040);
  __chkstk_darwin(v19);
  v123 = (uint64_t)v114 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = sub_100003304(&qword_10010D048);
  __chkstk_darwin(v124);
  v145 = (uint64_t)v114 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = sub_100003304(&qword_10010D050);
  __chkstk_darwin(v127);
  v126 = (char *)v114 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = sub_100003304(&qword_10010D058);
  __chkstk_darwin(v128);
  v125 = (char *)v114 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = sub_100003304(&qword_10010D060);
  __chkstk_darwin(v137);
  v138 = (uint64_t)v114 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114[1] = (_QWORD *)v3;
  sub_100007878((uint64_t)v1 + *(int *)(v3 + 68), (uint64_t)v12, type metadata accessor for AccessPointContainer);
  v26 = *((_QWORD *)v1 + 8);
  v146 = *((_QWORD *)v1 + 7);
  v25 = v146;
  v147 = v26;
  sub_100003304(&qword_10010CD58);
  State.projectedValue.getter(&v148);
  v117 = v148;
  v27 = v149;
  *(_QWORD *)&v148 = v25;
  *((_QWORD *)&v148 + 1) = v26;
  State.wrappedValue.getter(&v146);
  v28 = v119;
  v29 = &v12[*(int *)(v119 + 20)];
  *(_OWORD *)v29 = v117;
  *((_QWORD *)v29 + 2) = v27;
  v30 = *(int *)(v28 + 24);
  State.init(wrappedValue:)(&v146, &type metadata for Int);
  *(_OWORD *)&v12[v30] = v148;
  sub_100007878((uint64_t)v12, (uint64_t)v14, type metadata accessor for AccessPointContentView);
  *(_QWORD *)&v14[*(int *)(v120 + 36)] = 0x3FF0000000000000;
  sub_1000106F0((uint64_t)v12, type metadata accessor for AccessPointContentView);
  v31 = Namespace.wrappedValue.getter(*(_QWORD *)v1);
  v32 = static MatchedGeometryProperties.frame.getter();
  v33 = static UnitPoint.center.getter();
  v35 = v34;
  sub_100010CBC((uint64_t)v14, (uint64_t)v16, &qword_10010D028);
  v36 = &v16[*(int *)(v121 + 36)];
  *(_QWORD *)v36 = 0x7974696361706FLL;
  *((_QWORD *)v36 + 1) = 0xE700000000000000;
  *((_QWORD *)v36 + 2) = v31;
  *((_DWORD *)v36 + 6) = v32;
  *((double *)v36 + 4) = v33;
  *((_QWORD *)v36 + 5) = v35;
  v36[48] = 1;
  v37 = sub_100010ED0((uint64_t)v14, &qword_10010D028);
  LOBYTE(v31) = static Edge.Set.all.getter(v37);
  v38 = EdgeInsets.init(_all:)(8.0);
  v40 = v39;
  v42 = v41;
  v44 = v43;
  sub_100010CBC((uint64_t)v16, (uint64_t)v18, &qword_10010D030);
  v45 = &v18[*(int *)(v122 + 36)];
  *v45 = v31;
  *((double *)v45 + 1) = v38;
  *((_QWORD *)v45 + 2) = v40;
  *((_QWORD *)v45 + 3) = v42;
  *((_QWORD *)v45 + 4) = v44;
  v45[40] = 0;
  v46 = sub_100010ED0((uint64_t)v16, &qword_10010D030);
  v47 = v2[3];
  v48 = static Alignment.center.getter(v46);
  v49 = v123;
  sub_10002838C(0.0, 1, 0.0, 1, v47, 0, 0.0, 1, v123, 0.0, 1, 0.0, 1, v48, v50);
  sub_100010ED0((uint64_t)v18, &qword_10010D038);
  v118 = v2;
  v51 = *((_QWORD *)v2 + 6);
  LOBYTE(v146) = *((_BYTE *)v2 + 40);
  LOBYTE(v25) = v146;
  v147 = v51;
  sub_100003304(&qword_10010CE10);
  State.projectedValue.getter(&v148);
  v52 = v148;
  LOBYTE(v18) = v149;
  LOBYTE(v148) = v25;
  *((_QWORD *)&v148 + 1) = v51;
  State.wrappedValue.getter(&v146);
  LOBYTE(v146) = v146 == 1;
  State.init(wrappedValue:)(&v146, &type metadata for Bool);
  LOBYTE(v47) = v148;
  v53 = *((_QWORD *)&v148 + 1);
  v54 = v145;
  sub_100010CBC(v49, v145, &qword_10010D040);
  v55 = v54 + *(int *)(v124 + 36);
  *(_OWORD *)v55 = v52;
  *(_BYTE *)(v55 + 16) = (_BYTE)v18;
  *(_BYTE *)(v55 + 24) = LOBYTE(v47);
  *(_QWORD *)(v55 + 32) = v53;
  v56 = sub_100010ED0(v49, &qword_10010D040);
  v57 = static Color.clear.getter(v56);
  v58 = static Alignment.center.getter(v57);
  v60 = v59;
  v61 = v129;
  v62 = &v129[*(int *)(v130 + 20)];
  v63 = enum case for RoundedCornerStyle.continuous(_:);
  LODWORD(v130) = enum case for RoundedCornerStyle.continuous(_:);
  v64 = type metadata accessor for RoundedCornerStyle(0);
  v65 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 104);
  v65(v62, v63, v64);
  __asm { FMOV            V0.2D, #30.0 }
  *v61 = _Q0;
  v71 = v133;
  sub_100007878((uint64_t)v61, v133, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v71 + *(int *)(v135 + 36)) = 256;
  v72 = v131;
  sub_100010CBC(v71, (uint64_t)v131 + *(int *)(v132 + 36), &qword_10010CB10);
  *v72 = v57;
  v72[1] = v58;
  v72[2] = v60;
  swift_retain(v57);
  sub_100010ED0(v71, &qword_10010CB10);
  sub_1000106F0((uint64_t)v61, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  swift_release(v57);
  v73 = v118;
  v74 = Namespace.wrappedValue.getter(*(_QWORD *)v118);
  LODWORD(v57) = static MatchedGeometryProperties.frame.getter();
  v75 = static UnitPoint.center.getter();
  v77 = v76;
  v78 = v134;
  sub_100010CBC((uint64_t)v72, v134, &qword_10010CE78);
  v79 = v78 + *(int *)(v136 + 36);
  *(_QWORD *)v79 = 0x756F72676B636162;
  *(_QWORD *)(v79 + 8) = 0xEA0000000000646ELL;
  *(_QWORD *)(v79 + 16) = v74;
  *(_DWORD *)(v79 + 24) = v57;
  *(double *)(v79 + 32) = v75;
  *(_QWORD *)(v79 + 40) = v77;
  *(_BYTE *)(v79 + 48) = 1;
  v80 = sub_100010ED0((uint64_t)v72, &qword_10010CE78);
  v81 = static Alignment.center.getter(v80);
  v83 = v82;
  v84 = (uint64_t)v126;
  v85 = (uint64_t)&v126[*(int *)(v127 + 36)];
  sub_100010CBC(v78, v85, &qword_10010CE80);
  v86 = (uint64_t *)(v85 + *(int *)(sub_100003304(&qword_10010CEB0) + 36));
  v87 = (uint64_t)v125;
  *v86 = v81;
  v86[1] = v83;
  v88 = (uint64_t)v73;
  v89 = v145;
  sub_100010CBC(v145, v84, &qword_10010D048);
  sub_100010ED0(v78, &qword_10010CE80);
  sub_100010ED0(v89, &qword_10010D048);
  v90 = (uint64_t)v139;
  v91 = ((uint64_t (*)(char *, _QWORD, uint64_t))v65)(v139, v130, v64);
  v92 = static Color.accentColor.getter(v91);
  v93 = v140;
  *(_QWORD *)(v90 + *(int *)(v140 + 52)) = v92;
  *(_QWORD *)(v90 + *(int *)(v93 + 56)) = 0x4010000000000000;
  sub_100010CBC(v90, v87, &qword_10010D020);
  v94 = v128;
  v95 = sub_100010CBC(v84, v87 + *(int *)(v128 + 36), &qword_10010D050);
  v96 = v94;
  v97 = v87 + *(int *)(v94 + 40);
  *(_BYTE *)v97 = FocusState.init<>()(v95) & 1;
  *(_QWORD *)(v97 + 8) = v98;
  *(_BYTE *)(v97 + 16) = v99 & 1;
  v100 = v87 + *(int *)(v96 + 44);
  *(_QWORD *)v100 = swift_getKeyPath(&unk_1000C8928);
  *(_BYTE *)(v100 + 8) = 0;
  sub_100010ED0(v90, &qword_10010D020);
  sub_100010ED0(v84, &qword_10010D050);
  v101 = *(_QWORD *)(v88 + 128);
  LOBYTE(v148) = *(_BYTE *)(v88 + 120);
  *((_QWORD *)&v148 + 1) = v101;
  sub_100003304(&qword_10010CDA0);
  State.wrappedValue.getter(&v146);
  v102 = 0.0;
  if ((v146 & 1) == 0)
  {
    sub_100003304(&qword_10010CC08);
    v103 = v114[0];
    v104 = State.wrappedValue.getter(v114[0]);
    if ((AccessPointAnchoring.bottom.getter(v104) & 1) != 0)
      v102 = 200.0;
    else
      v102 = -200.0;
    (*(void (**)(_QWORD *, uint64_t))(v115 + 8))(v103, v116);
  }
  v105 = v138;
  sub_100010CBC(v87, v138, &qword_10010D058);
  v106 = v105 + *(int *)(v137 + 36);
  *(_QWORD *)v106 = 0;
  *(double *)(v106 + 8) = v102;
  sub_100010ED0(v87, &qword_10010D058);
  v107 = v143;
  sub_100007878(v88, v143, type metadata accessor for AccessPointTransitionView);
  v108 = *(unsigned __int8 *)(v141 + 80);
  v109 = (v108 + 16) & ~v108;
  v110 = swift_allocObject(&unk_1000FD4F0, v109 + v142, v108 | 7);
  sub_100010F0C(v107, v110 + v109, type metadata accessor for AccessPointTransitionView);
  v111 = v144;
  sub_100010CBC(v105, v144, &qword_10010D060);
  v112 = (uint64_t (**)())(v111 + *(int *)(sub_100003304(&qword_10010CFD8) + 36));
  *v112 = sub_100025F6C;
  v112[1] = (uint64_t (*)())v110;
  v112[2] = 0;
  v112[3] = 0;
  return sub_100010ED0(v105, &qword_10010D060);
}

double sub_10001F6C4(uint64_t a1)
{
  uint64_t v2;
  __n128 v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 48);
  v9 = *(_BYTE *)(a1 + 40);
  v10 = v2;
  sub_100003304(&qword_10010CE10);
  State.wrappedValue.getter(&v11);
  if (!(_BYTE)v11)
  {
    v4.n128_u64[0] = 0x3FE6666666666666;
    v3.n128_u64[0] = 0.5;
    v5 = static Animation.spring(response:dampingFraction:blendDuration:)(v3, v4, 0.0);
    __chkstk_darwin(v5);
    v8[2] = a1;
    withAnimation<A>(_:_:)(v6, sub_100025F78, v8, (char *)&type metadata for () + 8);
    v3.n128_u64[0] = swift_release(v5).n128_u64[0];
  }
  return v3.n128_f64[0];
}

uint64_t sub_10001F788@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  void (*v23)(_QWORD *, uint64_t);
  uint64_t v24;
  int v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  char v46;
  uint64_t v47;
  int v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v79 = a2;
  v80 = sub_100003304(&qword_10010CFA8);
  __chkstk_darwin(v80);
  v68 = (uint64_t *)((char *)&v67 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v72 = sub_100003304(&qword_10010CFB0);
  __chkstk_darwin(v72);
  v67 = (uint64_t)&v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = sub_100003304(&qword_10010CFB8);
  __chkstk_darwin(v76);
  v78 = (uint64_t)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = sub_100003304(&qword_10010CFC0);
  __chkstk_darwin(v69);
  v71 = (uint64_t)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = sub_100003304(&qword_10010CFC8);
  __chkstk_darwin(v70);
  v8 = (char *)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = sub_100003304(&qword_10010CFD0);
  __chkstk_darwin(v77);
  v73 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003304(&qword_10010CFD8);
  __chkstk_darwin(v10);
  v12 = (char *)&v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = sub_100003304(&qword_10010CFE0);
  __chkstk_darwin(v74);
  v14 = (char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v75 = (uint64_t)&v67 - v16;
  v17 = type metadata accessor for AccessPointAnchoring(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (uint64_t *)((char *)&v67 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = a1;
  type metadata accessor for AccessPointTransitionView(0);
  sub_100003304(&qword_10010CC08);
  v22 = State.wrappedValue.getter(v20);
  LOBYTE(a1) = AccessPointAnchoring.centered.getter(v22);
  v23 = *(void (**)(_QWORD *, uint64_t))(v18 + 8);
  v23(v20, v17);
  if ((a1 & 1) != 0)
  {
    sub_10001EAEC((uint64_t)v12);
    v24 = Namespace.wrappedValue.getter(*v21);
    v25 = static MatchedGeometryProperties.frame.getter();
    v26 = static UnitPoint.center.getter();
    v28 = v27;
    sub_100010CBC((uint64_t)v12, (uint64_t)v14, &qword_10010CFD8);
    v29 = &v14[*(int *)(v74 + 36)];
    *(_QWORD *)v29 = 1936683112;
    *((_QWORD *)v29 + 1) = 0xE400000000000000;
    *((_QWORD *)v29 + 2) = v24;
    *((_DWORD *)v29 + 6) = v25;
    *((double *)v29 + 4) = v26;
    *((_QWORD *)v29 + 5) = v28;
    v29[48] = 1;
    sub_100010ED0((uint64_t)v12, &qword_10010CFD8);
    v30 = v75;
    sub_10001A0AC((uint64_t)v14, v75, &qword_10010CFE0);
    sub_100010CBC(v30, (uint64_t)v14, &qword_10010CFE0);
    *(_QWORD *)v8 = 0;
    v8[8] = 0;
    v31 = sub_100003304(&qword_10010D018);
    sub_100010CBC((uint64_t)v14, (uint64_t)&v8[*(int *)(v31 + 48)], &qword_10010CFE0);
    v32 = &v8[*(int *)(v31 + 64)];
    *(_QWORD *)v32 = 0;
    v32[8] = 0;
    sub_100010ED0((uint64_t)v14, &qword_10010CFE0);
    v33 = v71;
    sub_100010CBC((uint64_t)v8, v71, &qword_10010CFC8);
    swift_storeEnumTagMultiPayload(v33, v69, 0);
    v34 = sub_100011054(&qword_10010CFF8, &qword_10010CFC8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v35 = sub_100011054(&qword_10010D000, &qword_10010CFB0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v36 = (uint64_t)v73;
    _ConditionalContent<>.init(storage:)(v33, v70, v72, v34, v35);
    sub_100010ED0((uint64_t)v8, &qword_10010CFC8);
    v37 = &qword_10010CFD0;
    v38 = v78;
    sub_100010CBC(v36, v78, &qword_10010CFD0);
    swift_storeEnumTagMultiPayload(v38, v76, 0);
    v39 = sub_100025EBC();
    v40 = sub_100011054(&qword_10010D008, &qword_10010CFA8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v41 = v80;
    v42 = v38;
    v43 = v77;
    v44 = v39;
  }
  else
  {
    v45 = State.wrappedValue.getter(v20);
    v46 = AccessPointAnchoring.leading.getter(v45);
    v23(v20, v17);
    sub_10001EAEC((uint64_t)v12);
    v47 = Namespace.wrappedValue.getter(*v21);
    v48 = static MatchedGeometryProperties.frame.getter();
    v49 = static UnitPoint.center.getter();
    v51 = v50;
    sub_100010CBC((uint64_t)v12, (uint64_t)v14, &qword_10010CFD8);
    v52 = &v14[*(int *)(v74 + 36)];
    *(_QWORD *)v52 = 1936683112;
    *((_QWORD *)v52 + 1) = 0xE400000000000000;
    *((_QWORD *)v52 + 2) = v47;
    *((_DWORD *)v52 + 6) = v48;
    *((double *)v52 + 4) = v49;
    *((_QWORD *)v52 + 5) = v51;
    v52[48] = 1;
    sub_100010ED0((uint64_t)v12, &qword_10010CFD8);
    v30 = v75;
    sub_10001A0AC((uint64_t)v14, v75, &qword_10010CFE0);
    sub_100010CBC(v30, (uint64_t)v14, &qword_10010CFE0);
    if ((v46 & 1) == 0)
    {
      v61 = (uint64_t)v68;
      *v68 = 0;
      *(_BYTE *)(v61 + 8) = 0;
      v62 = sub_100003304(&qword_10010CFE8);
      sub_100010CBC((uint64_t)v14, v61 + *(int *)(v62 + 48), &qword_10010CFE0);
      sub_100010ED0((uint64_t)v14, &qword_10010CFE0);
      v37 = &qword_10010CFA8;
      v63 = v78;
      sub_100010CBC(v61, v78, &qword_10010CFA8);
      swift_storeEnumTagMultiPayload(v63, v76, 1);
      v64 = sub_100025EBC();
      v65 = sub_100011054(&qword_10010D008, &qword_10010CFA8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
      _ConditionalContent<>.init(storage:)(v63, v77, v80, v64, v65);
      v60 = v61;
      goto LABEL_7;
    }
    v53 = v67;
    sub_100010CBC((uint64_t)v14, v67, &qword_10010CFE0);
    v54 = v53 + *(int *)(sub_100003304(&qword_10010D010) + 48);
    *(_QWORD *)v54 = 0;
    *(_BYTE *)(v54 + 8) = 0;
    sub_100010ED0((uint64_t)v14, &qword_10010CFE0);
    v55 = v71;
    sub_100010CBC(v53, v71, &qword_10010CFB0);
    swift_storeEnumTagMultiPayload(v55, v69, 1);
    v56 = sub_100011054(&qword_10010CFF8, &qword_10010CFC8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v57 = sub_100011054(&qword_10010D000, &qword_10010CFB0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v36 = (uint64_t)v73;
    _ConditionalContent<>.init(storage:)(v55, v70, v72, v56, v57);
    sub_100010ED0(v53, &qword_10010CFB0);
    v37 = &qword_10010CFD0;
    v58 = v78;
    sub_100010CBC(v36, v78, &qword_10010CFD0);
    swift_storeEnumTagMultiPayload(v58, v76, 0);
    v59 = sub_100025EBC();
    v40 = sub_100011054(&qword_10010D008, &qword_10010CFA8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v41 = v80;
    v42 = v58;
    v43 = v77;
    v44 = v59;
  }
  _ConditionalContent<>.init(storage:)(v42, v43, v41, v44, v40);
  v60 = v36;
LABEL_7:
  sub_100010ED0(v60, v37);
  return sub_100010ED0(v30, &qword_10010CFE0);
}

uint64_t sub_10001FF28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  ValueMetadata *v23;
  _QWORD *v24;
  char *v25;
  ValueMetadata *v26;
  ValueMetadata *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t OpaqueTypeConformance2;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t KeyPath;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t, char *, uint64_t);
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  __n128 v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  ValueMetadata *v73;
  ValueMetadata *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  ValueMetadata *v86;
  ValueMetadata *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  __n128 v93;
  uint64_t v94;
  ValueMetadata *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  uint64_t v101;
  __n128 v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  void (*v110)(uint64_t, char *, uint64_t);
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  void (*v130)(char *, uint64_t, uint64_t);
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD v142[4];
  double v143;
  ValueMetadata *v144;
  unint64_t v145;
  unint64_t v146;
  char v147[8];

  v141 = a2;
  v139 = a3;
  v120 = type metadata accessor for GlobalCoordinateSpace(0);
  v119 = *(_QWORD *)(v120 - 8);
  __chkstk_darwin(v120);
  v118 = (char *)&v108 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = type metadata accessor for AccessPointAnchoring(0);
  v116 = *(_QWORD *)(v133 - 8);
  v5 = __chkstk_darwin(v133);
  v115 = (char *)&v108 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = type metadata accessor for GeometryProxy(0, v5);
  v7 = *(_QWORD *)(v134 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v134);
  v127 = (char *)&v108 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AccessPointTransitionView(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v12 = (char *)&v108 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100003304(&qword_10010CEF8);
  __chkstk_darwin(v13);
  v15 = (char *)&v108 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = sub_100003304(&qword_10010CF00);
  __chkstk_darwin(v140);
  v128 = (uint64_t)&v108 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = sub_100003304(&qword_10010CF08);
  v117 = *(_QWORD *)(v135 - 8);
  __chkstk_darwin(v135);
  v131 = (char *)&v108 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = sub_100003304(&qword_10010CF10);
  v123 = *(_QWORD *)(v137 - 8);
  __chkstk_darwin(v137);
  v122 = (char *)&v108 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = sub_100003304(&qword_10010CF18);
  v125 = *(_QWORD *)(v138 - 8);
  __chkstk_darwin(v138);
  v121 = (char *)&v108 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v124 = (char *)&v108 - v21;
  v132 = sub_100003304(&qword_10010CF20);
  __chkstk_darwin(v132);
  v136 = (char *)&v108 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *(ValueMetadata **)(a1 + 112);
  LOBYTE(v143) = *(_BYTE *)(a1 + 104);
  v144 = v23;
  sub_100003304(&qword_10010CDA0);
  v24 = State.wrappedValue.getter(v142);
  if (LOBYTE(v142[0]) == 1)
  {
    v25 = v136;
    swift_storeEnumTagMultiPayload(v136, v132, 0);
    type metadata accessor for CGRect(255);
    v27 = v26;
    v28 = sub_100025D68();
    v29 = sub_1000035B4(&qword_10010CE20, (uint64_t (*)(uint64_t))&type metadata accessor for AccessPointAnchoring, (uint64_t)&protocol conformance descriptor for AccessPointAnchoring);
    v143 = *(double *)&v140;
    v144 = (ValueMetadata *)v133;
    v145 = v28;
    v146 = v29;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v143, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    v31 = sub_1000035B4(&qword_10010CF40, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
    v143 = *(double *)&v135;
    v144 = v27;
    v145 = OpaqueTypeConformance2;
    v146 = v31;
    v32 = swift_getOpaqueTypeConformance2(&v143, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    v33 = sub_10001DF0C();
    v143 = *(double *)&v137;
    v144 = &type metadata for AccessPointTransitionView.AnimationState;
    v145 = v32;
    v146 = v33;
    v34 = swift_getOpaqueTypeConformance2(&v143, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    return _ConditionalContent<>.init(storage:)(v25, &type metadata for EmptyView, v138, &protocol witness table for EmptyView, v34);
  }
  else
  {
    *(_QWORD *)v15 = static HorizontalAlignment.center.getter(v24);
    *((_QWORD *)v15 + 1) = 0;
    v15[16] = 0;
    v36 = sub_100003304(&qword_10010CF28);
    sub_100020A98((_QWORD *)a1, (uint64_t)&v15[*(int *)(v36 + 44)]);
    v126 = (uint64_t)&v108 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_100007878(a1, v126, type metadata accessor for AccessPointTransitionView);
    v130 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v37 = v127;
    v38 = v134;
    v130(v127, v141, v134);
    v39 = *(unsigned __int8 *)(v10 + 80);
    v40 = *(unsigned __int8 *)(v7 + 80);
    v41 = (v39 + 16) & ~v39;
    v112 = v41;
    v111 = ((v11 + v40 + v41) & ~v40) + v8;
    v42 = (v11 + v40 + v41) & ~v40;
    v113 = v42;
    v129 = v39 | v40 | 7;
    v43 = swift_allocObject(&unk_1000FD428, v111, v129);
    sub_100010F0C((uint64_t)v12, v43 + v41, type metadata accessor for AccessPointTransitionView);
    v110 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 32);
    v44 = v37;
    v45 = v38;
    v110(v43 + v42, v37, v38);
    v46 = v128;
    sub_100010CBC((uint64_t)v15, v128, &qword_10010CEF8);
    v47 = (_QWORD *)(v46 + *(int *)(v140 + 36));
    *v47 = sub_100025A30;
    v47[1] = v43;
    v47[2] = 0;
    v47[3] = 0;
    sub_100010ED0((uint64_t)v15, &qword_10010CEF8);
    v48 = *(_QWORD *)(a1 + 8);
    LOBYTE(v42) = *(_BYTE *)(a1 + 16);
    v49 = swift_retain(v48);
    v50 = sub_100030D7C(v49, v42);
    swift_release(v48);
    KeyPath = swift_getKeyPath(&unk_1000C8858);
    v143 = *(double *)&v50;
    v52 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v143, KeyPath, v52);
    swift_release(KeyPath);
    v53 = v50 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__anchoring;
    swift_beginAccess(v50 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__anchoring, v147, 0, 0);
    v54 = v116;
    v55 = v115;
    v56 = v133;
    (*(void (**)(char *, uint64_t, uint64_t))(v116 + 16))(v115, v53, v133);
    swift_release(v50);
    v57 = v126;
    sub_100007878(a1, v126, type metadata accessor for AccessPointTransitionView);
    v58 = v45;
    v130(v44, v141, v45);
    v59 = v111;
    v60 = swift_allocObject(&unk_1000FD450, v111, v129);
    v114 = a1;
    v61 = v112;
    sub_100010F0C(v57, v60 + v112, type metadata accessor for AccessPointTransitionView);
    v62 = v113;
    v63 = v110;
    v110(v60 + v113, v44, v58);
    v64 = sub_100025D68();
    v108 = v64;
    v109 = sub_1000035B4(&qword_10010CE20, (uint64_t (*)(uint64_t))&type metadata accessor for AccessPointAnchoring, (uint64_t)&protocol conformance descriptor for AccessPointAnchoring);
    v65 = v64;
    v66 = v128;
    View.onChange<A>(of:initial:_:)(v55, 0, sub_100025A30, v60, v140, v56, v65, v109);
    v67 = swift_release(v60);
    (*(void (**)(char *, uint64_t, __n128))(v54 + 8))(v55, v56, v67);
    v68 = sub_100010ED0(v66, &qword_10010CF00);
    v69 = v118;
    static CoordinateSpaceProtocol<>.global.getter(v68);
    v70 = v120;
    v71 = v141;
    v72 = GeometryProxy.frame<A>(in:)(v69, v120, &protocol witness table for GlobalCoordinateSpace);
    v74 = v73;
    v76 = v75;
    v78 = v77;
    (*(void (**)(char *, uint64_t))(v119 + 8))(v69, v70);
    v143 = v72;
    v144 = v74;
    v145 = v76;
    v146 = v78;
    v79 = v126;
    sub_100007878(v114, v126, type metadata accessor for AccessPointTransitionView);
    v80 = v127;
    v81 = v71;
    v82 = v134;
    v130(v127, v81, v134);
    v83 = swift_allocObject(&unk_1000FD478, v59, v129);
    sub_100010F0C(v79, v83 + v61, type metadata accessor for AccessPointTransitionView);
    v84 = v80;
    v85 = v82;
    v63(v83 + v62, v80, v82);
    type metadata accessor for CGRect(0);
    v87 = v86;
    v142[0] = v140;
    v142[1] = v56;
    v142[2] = v108;
    v142[3] = v109;
    v88 = swift_getOpaqueTypeConformance2(v142, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    v89 = sub_1000035B4(&qword_10010CF40, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
    v90 = v122;
    v91 = v135;
    v92 = v131;
    View.onChange<A>(of:initial:_:)(&v143, 0, sub_100025A30, v83, v135, v87, v88, v89);
    v93 = swift_release(v83);
    (*(void (**)(char *, uint64_t, __n128))(v117 + 8))(v92, v91, v93);
    v94 = v114;
    v95 = *(ValueMetadata **)(v114 + 48);
    LOBYTE(v143) = *(_BYTE *)(v114 + 40);
    v144 = v95;
    sub_100003304(&qword_10010CE10);
    State.wrappedValue.getter(v142);
    v96 = v126;
    sub_100007878(v94, v126, type metadata accessor for AccessPointTransitionView);
    v130(v84, v141, v85);
    v97 = swift_allocObject(&unk_1000FD4A0, v111, v129);
    sub_100010F0C(v96, v97 + v112, type metadata accessor for AccessPointTransitionView);
    v110(v97 + v113, v84, v85);
    v143 = *(double *)&v91;
    v144 = v87;
    v145 = v88;
    v146 = v89;
    v98 = swift_getOpaqueTypeConformance2(&v143, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    v99 = sub_10001DF0C();
    v100 = v121;
    v101 = v137;
    View.onChange<A>(of:initial:_:)(v142, 0, sub_100025A30, v97, v137, &type metadata for AccessPointTransitionView.AnimationState, v98, v99);
    v102 = swift_release(v97);
    (*(void (**)(char *, uint64_t, __n128))(v123 + 8))(v90, v101, v102);
    v103 = v125;
    v104 = v124;
    v105 = v138;
    (*(void (**)(char *, char *, uint64_t))(v125 + 32))(v124, v100, v138);
    v106 = v136;
    (*(void (**)(char *, char *, uint64_t))(v103 + 16))(v136, v104, v105);
    swift_storeEnumTagMultiPayload(v106, v132, 1);
    v143 = *(double *)&v101;
    v144 = &type metadata for AccessPointTransitionView.AnimationState;
    v145 = v98;
    v146 = v99;
    v107 = swift_getOpaqueTypeConformance2(&v143, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    _ConditionalContent<>.init(storage:)(v106, &type metadata for EmptyView, v105, &protocol witness table for EmptyView, v107);
    return (*(uint64_t (**)(char *, uint64_t))(v103 + 8))(v104, v105);
  }
}

uint64_t sub_100020A98@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v45 = a2;
  v46 = sub_100003304(&qword_10010CF58);
  __chkstk_darwin(v46);
  v41 = (uint64_t)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_100003304(&qword_10010CF60);
  __chkstk_darwin(v42);
  v44 = (uint64_t)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = sub_100003304(&qword_10010CF68);
  __chkstk_darwin(v43);
  v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003304(&qword_10010CF70);
  __chkstk_darwin(v7);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003304(&qword_10010CF78);
  __chkstk_darwin(v10);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v41 - v14;
  v16 = type metadata accessor for AccessPointAnchoring(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (uint64_t *)((char *)&v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for AccessPointTransitionView(0);
  sub_100003304(&qword_10010CC08);
  v20 = State.wrappedValue.getter(v19);
  v21 = AccessPointAnchoring.bottom.getter(v20);
  v22 = (*(uint64_t (**)(_QWORD *, uint64_t))(v17 + 8))(v19, v16);
  *(_QWORD *)v9 = static VerticalAlignment.center.getter(v22);
  *((_QWORD *)v9 + 1) = 0;
  v9[16] = 1;
  v23 = sub_100003304(&qword_10010CF80);
  sub_10001F788(a1, (uint64_t)&v9[*(int *)(v23 + 44)]);
  v24 = Namespace.wrappedValue.getter(*a1);
  LODWORD(v16) = static MatchedGeometryProperties.frame.getter();
  v25 = static UnitPoint.center.getter();
  v27 = v26;
  sub_100010CBC((uint64_t)v9, (uint64_t)v12, &qword_10010CF70);
  v28 = &v12[*(int *)(v10 + 36)];
  *(_QWORD *)v28 = 1936683126;
  *((_QWORD *)v28 + 1) = 0xE400000000000000;
  *((_QWORD *)v28 + 2) = v24;
  *((_DWORD *)v28 + 6) = v16;
  *((double *)v28 + 4) = v25;
  *((_QWORD *)v28 + 5) = v27;
  v28[48] = 1;
  sub_100010ED0((uint64_t)v9, &qword_10010CF70);
  sub_10001A0AC((uint64_t)v12, (uint64_t)v15, &qword_10010CF78);
  sub_100010CBC((uint64_t)v15, (uint64_t)v12, &qword_10010CF78);
  if ((v21 & 1) != 0)
  {
    *(_QWORD *)v6 = 0;
    v6[8] = 1;
    v29 = sub_100003304(&qword_10010CFA0);
    sub_100010CBC((uint64_t)v12, (uint64_t)&v6[*(int *)(v29 + 48)], &qword_10010CF78);
    sub_100010ED0((uint64_t)v12, &qword_10010CF78);
    v30 = &qword_10010CF68;
    v31 = v44;
    sub_100010CBC((uint64_t)v6, v44, &qword_10010CF68);
    swift_storeEnumTagMultiPayload(v31, v42, 0);
    v32 = sub_100011054(&qword_10010CF90, &qword_10010CF68, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v33 = sub_100011054(&qword_10010CF98, &qword_10010CF58, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    _ConditionalContent<>.init(storage:)(v31, v43, v46, v32, v33);
    v34 = (uint64_t)v6;
  }
  else
  {
    v35 = v41;
    sub_100010CBC((uint64_t)v12, v41, &qword_10010CF78);
    v36 = v35 + *(int *)(sub_100003304(&qword_10010CF88) + 48);
    *(_QWORD *)v36 = 0;
    *(_BYTE *)(v36 + 8) = 1;
    sub_100010ED0((uint64_t)v12, &qword_10010CF78);
    v30 = &qword_10010CF58;
    v37 = v44;
    sub_100010CBC(v35, v44, &qword_10010CF58);
    swift_storeEnumTagMultiPayload(v37, v42, 1);
    v38 = sub_100011054(&qword_10010CF90, &qword_10010CF68, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v39 = sub_100011054(&qword_10010CF98, &qword_10010CF58, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    _ConditionalContent<>.init(storage:)(v37, v43, v46, v38, v39);
    v34 = v35;
  }
  sub_100010ED0(v34, v30);
  return sub_100010ED0((uint64_t)v15, &qword_10010CF78);
}

void sub_100020EFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t Strong;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  CGFloat v26;
  double v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  int v37;
  double MaxX;
  uint64_t v39;
  double v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  _QWORD v61[3];
  CGRect v62;
  CGRect v63;
  CGRect v64;

  v2 = v1;
  v56 = a1;
  v3 = sub_100003304(&qword_10010EB20);
  __chkstk_darwin(v3);
  v55 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = type metadata accessor for AccessPointAnchoring(0);
  v5 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v7 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for GlobalCoordinateSpace(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v1 + 8);
  v13 = *(_BYTE *)(v2 + 16);
  v14 = swift_retain(v12);
  v15 = sub_100030D7C(v14, v13);
  swift_release(v12);
  KeyPath = swift_getKeyPath(&unk_1000C8900);
  v61[0] = v15;
  v17 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v61, KeyPath, v17);
  swift_release(KeyPath);
  Strong = swift_unknownObjectWeakLoadStrong(v15 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__remoteTarget);
  swift_release(v15);
  if (!Strong)
    return;
  static CoordinateSpaceProtocol<>.global.getter(v19);
  v20 = GeometryProxy.frame<A>(in:)(v11, v8, &protocol witness table for GlobalCoordinateSpace);
  v22 = v21;
  v24 = v23;
  v26 = v25;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if (*(double *)(v2 + 24) >= v24)
    v27 = v24;
  else
    v27 = *(double *)(v2 + 24);
  v28 = *(_QWORD *)(v2 + 8);
  v29 = *(_BYTE *)(v2 + 16);
  v30 = swift_retain(v28);
  v31 = sub_100030D7C(v30, v29);
  swift_release(v28);
  v32 = swift_getKeyPath(&unk_1000C8858);
  v61[0] = v31;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v61, v32, v17);
  swift_release(v32);
  v33 = v31 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__anchoring;
  swift_beginAccess(v31 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__anchoring, v61, 0, 0);
  v34 = v33;
  v35 = v57;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v34, v57);
  v36 = swift_release(v31);
  v37 = (*(uint64_t (**)(char *, uint64_t, __n128))(v5 + 88))(v7, v35, v36);
  if (v37 == enum case for AccessPointAnchoring.topTrailing(_:))
  {
    v62.origin.x = v20;
    v62.origin.y = v22;
    v62.size.width = v24;
    v62.size.height = v26;
    MaxX = CGRectGetMaxX(v62);
    v39 = *(_QWORD *)(v2 + 48);
    v58 = *(_BYTE *)(v2 + 40);
    v59 = v39;
    sub_100003304(&qword_10010CE10);
    State.wrappedValue.getter(&v60);
    v40 = v27;
    v41 = (uint64_t)v55;
    if (v60 == 1)
      v40 = *(double *)(v2 + 32);
    v20 = MaxX - v40;
    goto LABEL_17;
  }
  if (v37 != enum case for AccessPointAnchoring.bottomLeading(_:))
  {
    if (v37 != enum case for AccessPointAnchoring.bottomTrailing(_:))
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v35);
      goto LABEL_16;
    }
    v63.origin.x = v20;
    v63.origin.y = v22;
    v63.size.width = v24;
    v63.size.height = v26;
    v42 = CGRectGetMaxX(v63);
    v43 = *(_QWORD *)(v2 + 48);
    v58 = *(_BYTE *)(v2 + 40);
    v59 = v43;
    sub_100003304(&qword_10010CE10);
    State.wrappedValue.getter(&v60);
    v44 = v27;
    if (v60 == 1)
      v44 = *(double *)(v2 + 32);
    v20 = v42 - v44;
  }
  v64.origin.x = v20;
  v64.origin.y = v22;
  v64.size.width = v24;
  v64.size.height = v26;
  v22 = CGRectGetMaxY(v64) - *(double *)(v2 + 32);
LABEL_16:
  v41 = (uint64_t)v55;
LABEL_17:
  v45 = *(_QWORD *)(v2 + 48);
  v58 = *(_BYTE *)(v2 + 40);
  v59 = v45;
  sub_100003304(&qword_10010CE10);
  State.wrappedValue.getter(&v60);
  v46 = *(_QWORD *)(v2 + 32);
  if (v60 == 1)
    v47 = *(double *)(v2 + 32);
  else
    v47 = v27;
  v48 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(v41, 1, 1, v48);
  type metadata accessor for MainActor(0);
  v50 = swift_unknownObjectRetain(Strong, v49);
  v51 = static MainActor.shared.getter(v50);
  v52 = swift_allocObject(&unk_1000FD4C8, 72, 7);
  *(_QWORD *)(v52 + 16) = v51;
  *(_QWORD *)(v52 + 24) = &protocol witness table for MainActor;
  *(_QWORD *)(v52 + 32) = Strong;
  *(double *)(v52 + 40) = v20;
  *(double *)(v52 + 48) = v22;
  *(double *)(v52 + 56) = v47;
  *(_QWORD *)(v52 + 64) = v46;
  v53 = sub_100028240(v41, (uint64_t)&unk_10010CF50, v52);
  swift_release(v53);
  swift_unknownObjectRelease(Strong);
}

uint64_t sub_100021388@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t KeyPath;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  ValueMetadata *v29;
  uint64_t v30;
  uint64_t OpaqueTypeConformance2;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  ValueMetadata *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  __n128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  __n128 v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  BOOL v114;
  _QWORD v115[3];
  uint64_t v116;
  ValueMetadata *v117;
  uint64_t v118;
  void *v119;
  char v120[8];

  v2 = v1;
  v107 = a1;
  v3 = type metadata accessor for TaskPriority(0);
  v105 = *(_QWORD *)(v3 - 8);
  v106 = v3;
  __chkstk_darwin(v3);
  v104 = (char *)&v88 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = type metadata accessor for AccessPointAnchoring(0);
  v93 = *(_QWORD *)(v94 - 8);
  __chkstk_darwin(v94);
  v92 = (char *)&v88 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AccessPointTransitionView(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v91 = sub_100003304(&qword_10010CDC8);
  __chkstk_darwin(v91);
  v10 = (uint64_t *)((char *)&v88 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v108 = sub_100003304(&qword_10010CDD0);
  v96 = *(_QWORD *)(v108 - 8);
  __chkstk_darwin(v108);
  v89 = (char *)&v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = sub_100003304(&qword_10010CDD8);
  v95 = *(_QWORD *)(v110 - 8);
  __chkstk_darwin(v110);
  v109 = (char *)&v88 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = sub_100003304(&qword_10010CDE0);
  v98 = *(_QWORD *)(v99 - 8);
  __chkstk_darwin(v99);
  v112 = (char *)&v88 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = sub_100003304(&qword_10010CDE8);
  v102 = *(_QWORD *)(v103 - 8);
  __chkstk_darwin(v103);
  v101 = (char *)&v88 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = sub_100003304(&qword_10010CDF0);
  __chkstk_darwin(v97);
  v100 = (char *)&v88 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v10 = static Alignment.center.getter(v16);
  v10[1] = v17;
  v18 = sub_100003304(&qword_10010CDF8);
  sub_100021D5C(v2, (uint64_t)v10 + *(int *)(v18 + 44));
  v19 = *(_QWORD *)(v2 + *(int *)(v6 + 72));
  KeyPath = swift_getKeyPath(&unk_1000C8830);
  v116 = v19;
  v21 = sub_1000035B4(&qword_10010CE00, type metadata accessor for GameDashboardLaunchContext, (uint64_t)&protocol conformance descriptor for GameDashboardLaunchContext);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v116, KeyPath, v21);
  swift_release(KeyPath);
  swift_beginAccess(v19 + 16, v120, 0, 0);
  LOBYTE(v116) = *(_BYTE *)(v19 + 16);
  sub_100007878(v2, (uint64_t)&v88 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AccessPointTransitionView);
  v22 = *(unsigned __int8 *)(v7 + 80);
  v23 = (v22 + 16) & ~v22;
  v24 = v23 + v8;
  v113 = v22 | 7;
  v111 = v23 + v8;
  v25 = swift_allocObject(&unk_1000FD248, v23 + v8, v22 | 7);
  v26 = (char *)&v88 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010F0C((uint64_t)v26, v25 + v23, type metadata accessor for AccessPointTransitionView);
  v27 = sub_100011054(&qword_10010CE08, &qword_10010CDC8, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  v28 = v91;
  View.onChange<A>(of:initial:_:)(&v116, 0, sub_100024E60, v25, v91, &type metadata for Bool, v27, &protocol witness table for Bool);
  swift_release(v25);
  sub_100010ED0((uint64_t)v10, &qword_10010CDC8);
  v29 = *(ValueMetadata **)(v2 + 48);
  LOBYTE(v116) = *(_BYTE *)(v2 + 40);
  v117 = v29;
  sub_100003304(&qword_10010CE10);
  State.wrappedValue.getter(v115);
  v90 = v26;
  sub_100007878(v2, (uint64_t)v26, type metadata accessor for AccessPointTransitionView);
  v30 = swift_allocObject(&unk_1000FD270, v24, v113);
  sub_100010F0C((uint64_t)v26, v30 + v23, type metadata accessor for AccessPointTransitionView);
  v116 = v28;
  v117 = (ValueMetadata *)&type metadata for Bool;
  v118 = v27;
  v119 = &protocol witness table for Bool;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v116, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v91 = OpaqueTypeConformance2;
  v32 = sub_10001DF0C();
  v33 = v108;
  v34 = OpaqueTypeConformance2;
  v35 = v89;
  View.onChange<A>(of:initial:_:)(v115, 0, sub_100025128, v30, v108, &type metadata for AccessPointTransitionView.AnimationState, v34, v32);
  v36 = swift_release(v30);
  (*(void (**)(char *, uint64_t, __n128))(v96 + 8))(v35, v33, v36);
  v37 = *(_QWORD *)(v2 + 8);
  LOBYTE(v35) = *(_BYTE *)(v2 + 16);
  v38 = swift_retain(v37);
  v39 = sub_100030D7C(v38, (char)v35);
  swift_release(v37);
  v40 = swift_getKeyPath(&unk_1000C8858);
  v116 = v39;
  v41 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v116, v40, v41);
  swift_release(v40);
  v42 = v39 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__anchoring;
  swift_beginAccess(v39 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__anchoring, v115, 0, 0);
  v43 = v93;
  v44 = v92;
  v45 = v94;
  (*(void (**)(char *, uint64_t, uint64_t))(v93 + 16))(v92, v42, v94);
  swift_release(v39);
  v46 = (uint64_t)v90;
  sub_100007878(v2, (uint64_t)v90, type metadata accessor for AccessPointTransitionView);
  v47 = swift_allocObject(&unk_1000FD298, v111, v113);
  v96 = v23;
  v48 = v47 + v23;
  v49 = v46;
  v50 = v41;
  v51 = v49;
  sub_100010F0C(v49, v48, type metadata accessor for AccessPointTransitionView);
  v116 = v108;
  v117 = &type metadata for AccessPointTransitionView.AnimationState;
  v118 = v91;
  v119 = (void *)v32;
  v52 = (ValueMetadata *)v45;
  v53 = swift_getOpaqueTypeConformance2(&v116, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v54 = sub_1000035B4(&qword_10010CE20, (uint64_t (*)(uint64_t))&type metadata accessor for AccessPointAnchoring, (uint64_t)&protocol conformance descriptor for AccessPointAnchoring);
  v55 = v110;
  v108 = v53;
  v56 = v53;
  v91 = v54;
  v57 = v109;
  View.onChange<A>(of:initial:_:)(v44, 0, sub_100025140, v47, v110, v52, v56, v54);
  v58 = swift_release(v47);
  (*(void (**)(char *, ValueMetadata *, __n128))(v43 + 8))(v44, v52, v58);
  (*(void (**)(char *, uint64_t))(v95 + 8))(v57, v55);
  v59 = *(_QWORD *)(v2 + 8);
  LOBYTE(v47) = *(_BYTE *)(v2 + 16);
  v60 = swift_retain(v59);
  v61 = sub_100030D7C(v60, v47);
  swift_release(v59);
  v62 = swift_getKeyPath(&unk_1000C8880);
  v116 = v61;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v116, v62, v50);
  swift_release(v62);
  if (*(_BYTE *)(v61 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__active) == 1)
  {
    v63 = swift_getKeyPath(&unk_1000C88A8);
    v116 = v61;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v116, v63, v50);
    swift_release(v63);
    v64 = *(_QWORD *)(v61 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__hideCount);
    swift_release(v61);
    v65 = v64 > 0;
  }
  else
  {
    swift_release(v61);
    v65 = 1;
  }
  v114 = v65;
  v66 = v2;
  v67 = v51;
  sub_100007878(v2, v51, type metadata accessor for AccessPointTransitionView);
  v68 = v111;
  v69 = v113;
  v70 = swift_allocObject(&unk_1000FD2C0, v111, v113);
  v71 = v96;
  sub_100010F0C(v67, v70 + v96, type metadata accessor for AccessPointTransitionView);
  v116 = v110;
  v117 = v52;
  v118 = v108;
  v119 = (void *)v91;
  v72 = swift_getOpaqueTypeConformance2(&v116, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v73 = v101;
  v74 = v99;
  v75 = v112;
  View.onChange<A>(of:initial:_:)(&v114, 0, sub_1000251C8, v70, v99, &type metadata for Bool, v72, &protocol witness table for Bool);
  v76 = swift_release(v70);
  (*(void (**)(char *, uint64_t, __n128))(v98 + 8))(v75, v74, v76);
  sub_100007878(v66, v67, type metadata accessor for AccessPointTransitionView);
  v77 = swift_allocObject(&unk_1000FD2E8, v68, v69);
  v78 = sub_100010F0C(v67, v77 + v71, type metadata accessor for AccessPointTransitionView);
  v79 = v104;
  static TaskPriority.userInitiated.getter(v78);
  v80 = (uint64_t)v100;
  v81 = &v100[*(int *)(v97 + 36)];
  v82 = type metadata accessor for _TaskModifier(0);
  v84 = v105;
  v83 = v106;
  (*(void (**)(char *, char *, uint64_t))(v105 + 16))(&v81[*(int *)(v82 + 20)], v79, v106);
  *(_QWORD *)v81 = &unk_10010CE30;
  *((_QWORD *)v81 + 1) = v77;
  v85 = v102;
  v86 = v103;
  (*(void (**)(uint64_t, char *, uint64_t))(v102 + 16))(v80, v73, v103);
  (*(void (**)(char *, uint64_t))(v84 + 8))(v79, v83);
  (*(void (**)(char *, uint64_t))(v85 + 8))(v73, v86);
  return sub_10001A0AC(v80, v107, &qword_10010CDF0);
}

uint64_t sub_100021D5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;

  v85 = a2;
  v78 = sub_100003304(&qword_10010CB10);
  __chkstk_darwin(v78);
  v80 = (uint64_t)&v75 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v4);
  v6 = (_OWORD *)((char *)&v75 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v76 = sub_100003304(&qword_10010CE78);
  __chkstk_darwin(v76);
  v8 = (uint64_t *)((char *)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v79 = sub_100003304(&qword_10010CE80);
  __chkstk_darwin(v79);
  v83 = (uint64_t)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003304(&qword_10010CE88);
  __chkstk_darwin(v10);
  v12 = (char *)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = sub_100003304(&qword_10010CE90);
  __chkstk_darwin(v77);
  v82 = (char *)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = sub_100003304(&qword_10010CE98);
  __chkstk_darwin(v87);
  v81 = (uint64_t)&v75 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v84 = (uint64_t)&v75 - v16;
  v86 = sub_100003304(&qword_10010CEA0);
  __chkstk_darwin(v86);
  v18 = (char *)&v75 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for AccessPointTransitionView(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(_QWORD *)(v20 + 64);
  __chkstk_darwin(v19);
  v22 = *(_QWORD *)(a1 + 80);
  v88 = *(_BYTE *)(a1 + 72);
  v89 = v22;
  sub_100003304(&qword_10010CDA0);
  v23 = State.wrappedValue.getter(&v90);
  if (v90 == 1)
  {
    sub_100007878(a1, (uint64_t)&v75 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AccessPointTransitionView);
    v24 = *(unsigned __int8 *)(v20 + 80);
    v25 = (v24 + 16) & ~v24;
    v26 = swift_allocObject(&unk_1000FD400, v25 + v21, v24 | 7);
    v27 = sub_100010F0C((uint64_t)&v75 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0), v26 + v25, type metadata accessor for AccessPointTransitionView);
    v28 = static Edge.Set.all.getter(v27);
    v29 = EdgeInsets.init(_all:)(20.0);
    *(_QWORD *)v18 = sub_1000259E0;
    *((_QWORD *)v18 + 1) = v26;
    v18[16] = v28;
    *((double *)v18 + 3) = v29;
    *((_QWORD *)v18 + 4) = v30;
    *((_QWORD *)v18 + 5) = v31;
    *((_QWORD *)v18 + 6) = v32;
    v18[56] = 0;
    swift_storeEnumTagMultiPayload(v18, v86, 0);
    v33 = sub_100003304(&qword_10010CEB8);
    v34 = sub_100025850();
    v35 = sub_1000258D4();
    return _ConditionalContent<>.init(storage:)(v18, v33, v87, v34, v35);
  }
  else
  {
    *(_QWORD *)v12 = static HorizontalAlignment.center.getter(v23);
    *((_QWORD *)v12 + 1) = 0;
    v12[16] = 0;
    v37 = sub_100003304(&qword_10010CEA8);
    v38 = sub_1000223A0(a1, (uint64_t)&v12[*(int *)(v37 + 44)]);
    v39 = static Color.clear.getter(v38);
    v40 = static Alignment.center.getter(v39);
    v42 = v41;
    v43 = (char *)v6 + *(int *)(v4 + 20);
    v44 = enum case for RoundedCornerStyle.continuous(_:);
    v45 = type metadata accessor for RoundedCornerStyle(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 104))(v43, v44, v45);
    __asm { FMOV            V0.2D, #20.0 }
    *v6 = _Q0;
    v51 = v80;
    sub_100007878((uint64_t)v6, v80, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
    *(_WORD *)(v51 + *(int *)(v78 + 36)) = 256;
    sub_100010CBC(v51, (uint64_t)v8 + *(int *)(v76 + 36), &qword_10010CB10);
    *v8 = v39;
    v8[1] = v40;
    v8[2] = v42;
    swift_retain(v39);
    sub_100010ED0(v51, &qword_10010CB10);
    sub_1000106F0((uint64_t)v6, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
    swift_release(v39);
    v52 = Namespace.wrappedValue.getter(*(_QWORD *)a1);
    LODWORD(v39) = static MatchedGeometryProperties.frame.getter();
    v53 = static UnitPoint.center.getter();
    v55 = v54;
    v56 = v83;
    sub_100010CBC((uint64_t)v8, v83, &qword_10010CE78);
    v57 = v56 + *(int *)(v79 + 36);
    *(_QWORD *)v57 = 0x756F72676B636162;
    *(_QWORD *)(v57 + 8) = 0xEA0000000000646ELL;
    *(_QWORD *)(v57 + 16) = v52;
    *(_DWORD *)(v57 + 24) = v39;
    *(double *)(v57 + 32) = v53;
    *(_QWORD *)(v57 + 40) = v55;
    *(_BYTE *)(v57 + 48) = 1;
    v58 = sub_100010ED0((uint64_t)v8, &qword_10010CE78);
    v59 = static Alignment.center.getter(v58);
    v61 = v60;
    v62 = (uint64_t)v82;
    v63 = (uint64_t)&v82[*(int *)(v77 + 36)];
    sub_100010CBC(v56, v63, &qword_10010CE80);
    v64 = (uint64_t *)(v63 + *(int *)(sub_100003304(&qword_10010CEB0) + 36));
    *v64 = v59;
    v64[1] = v61;
    sub_100010CBC((uint64_t)v12, v62, &qword_10010CE88);
    sub_100010ED0(v56, &qword_10010CE80);
    v65 = sub_100010ED0((uint64_t)v12, &qword_10010CE88);
    v66 = static SafeAreaRegions.all.getter(v65);
    LOBYTE(v61) = static Edge.Set.all.getter(v66);
    v67 = v81;
    sub_100010CBC(v62, v81, &qword_10010CE90);
    v68 = v87;
    v69 = v67 + *(int *)(v87 + 36);
    *(_QWORD *)v69 = v66;
    *(_BYTE *)(v69 + 8) = v61;
    sub_100010ED0(v62, &qword_10010CE90);
    v70 = v67;
    v71 = v84;
    sub_10001A0AC(v70, v84, &qword_10010CE98);
    sub_100010CBC(v71, (uint64_t)v18, &qword_10010CE98);
    swift_storeEnumTagMultiPayload(v18, v86, 1);
    v72 = sub_100003304(&qword_10010CEB8);
    v73 = sub_100025850();
    v74 = sub_1000258D4();
    _ConditionalContent<>.init(storage:)(v18, v72, v68, v73, v74);
    return sub_100010ED0(v71, &qword_10010CE98);
  }
}

uint64_t sub_1000223A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[2];
  __int128 v48;
  uint64_t v49;

  v45 = a2;
  v3 = sub_100003304(&qword_10010D068);
  __chkstk_darwin(v3);
  v46 = (uint64_t)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v44 = (uint64_t)&v40 - v6;
  v7 = type metadata accessor for AccessPointContentView(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_100003304(&qword_10010D028);
  __chkstk_darwin(v42);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = sub_100003304(&qword_10010D030);
  __chkstk_darwin(v43);
  v41 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v40 - v14;
  v16 = type metadata accessor for AccessPointTransitionView(0);
  sub_100007878(a1 + *(int *)(v16 + 68), (uint64_t)v9, type metadata accessor for AccessPointContainer);
  v18 = *(_QWORD *)(a1 + 64);
  v47[0] = *(_QWORD *)(a1 + 56);
  v17 = v47[0];
  v47[1] = v18;
  sub_100003304(&qword_10010CD58);
  State.projectedValue.getter(&v48);
  v40 = v48;
  v19 = v49;
  *(_QWORD *)&v48 = v17;
  *((_QWORD *)&v48 + 1) = v18;
  State.wrappedValue.getter(v47);
  v20 = &v9[*(int *)(v7 + 20)];
  *(_OWORD *)v20 = v40;
  *((_QWORD *)v20 + 2) = v19;
  v21 = *(int *)(v7 + 24);
  State.init(wrappedValue:)(v47, &type metadata for Int);
  *(_OWORD *)&v9[v21] = v48;
  sub_100007878((uint64_t)v9, (uint64_t)v11, type metadata accessor for AccessPointContentView);
  *(_QWORD *)&v11[*(int *)(v42 + 36)] = 0;
  v22 = (uint64_t)v9;
  v23 = (uint64_t)v15;
  v24 = (uint64_t)v41;
  sub_1000106F0(v22, type metadata accessor for AccessPointContentView);
  v25 = Namespace.wrappedValue.getter(*(_QWORD *)a1);
  v26 = static MatchedGeometryProperties.frame.getter();
  v27 = static UnitPoint.center.getter();
  v29 = v28;
  sub_100010CBC((uint64_t)v11, v24, &qword_10010D028);
  v30 = v24 + *(int *)(v43 + 36);
  *(_QWORD *)v30 = 0x7974696361706FLL;
  *(_QWORD *)(v30 + 8) = 0xE700000000000000;
  *(_QWORD *)(v30 + 16) = v25;
  *(_DWORD *)(v30 + 24) = v26;
  *(double *)(v30 + 32) = v27;
  *(_QWORD *)(v30 + 40) = v29;
  *(_BYTE *)(v30 + 48) = 1;
  sub_100010ED0((uint64_t)v11, &qword_10010D028);
  sub_10001A0AC(v24, v23, &qword_10010D030);
  v31 = *(_QWORD *)(a1 + 96);
  LOBYTE(v48) = *(_BYTE *)(a1 + 88);
  *((_QWORD *)&v48 + 1) = v31;
  sub_100003304(&qword_10010CDA0);
  State.wrappedValue.getter(v47);
  if (LOBYTE(v47[0]) == 1)
  {
    v32 = v44;
    sub_1000227C0(v44);
    v33 = sub_100003304(&qword_10010D070);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v32, 0, 1, v33);
  }
  else
  {
    v34 = sub_100003304(&qword_10010D070);
    v32 = v44;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v44, 1, 1, v34);
  }
  sub_100010CBC(v23, v24, &qword_10010D030);
  v35 = v46;
  sub_100010CBC(v32, v46, &qword_10010D068);
  v36 = v45;
  sub_100010CBC(v24, v45, &qword_10010D030);
  v37 = sub_100003304(&qword_10010D078);
  sub_100010CBC(v35, v36 + *(int *)(v37 + 48), &qword_10010D068);
  v38 = v36 + *(int *)(v37 + 64);
  *(_QWORD *)v38 = 0;
  *(_BYTE *)(v38 + 8) = 1;
  sub_100010ED0(v32, &qword_10010D068);
  sub_100010ED0(v23, &qword_10010D030);
  sub_100010ED0(v35, &qword_10010D068);
  return sub_100010ED0(v24, &qword_10010D030);
}

uint64_t sub_1000227C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  char *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t KeyPath;
  uint64_t v17;
  void *v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD v28[2];
  char v29[8];
  char *v30;
  _QWORD v31[3];
  _QWORD v32[5];

  v2 = v1;
  v28[1] = a1;
  v3 = sub_100003304(&qword_10010D080);
  __chkstk_darwin(v3);
  v5 = (char *)v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AccessPointTransitionView(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v32[3] = &type metadata for GameOverlayUIFeatureFlags;
  v32[4] = sub_100004EA4();
  LOBYTE(v32[0]) = 0;
  isFeatureEnabled(_:)(v32);
  sub_100004624(v32);
  v9 = sub_10008F978((uint64_t)&_swiftEmptyArrayStorage);
  v10 = objc_allocWithZone((Class)type metadata accessor for DashboardRequest());
  v11 = DashboardRequest.init(initialState:)(v9);
  v12 = *(_QWORD *)(v2 + 8);
  v13 = *(_BYTE *)(v2 + 16);
  v14 = swift_retain(v12);
  v15 = sub_100030D7C(v14, v13);
  swift_release(v12);
  KeyPath = swift_getKeyPath(&unk_1000C8950);
  v32[0] = v15;
  v17 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v32, KeyPath, v17);
  swift_release(KeyPath);
  v18 = *(void **)(v15 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__gkGame);
  v19 = v18;
  swift_release(v15);
  v20 = *(void **)&v11[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_currentGame];
  *(_QWORD *)&v11[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_currentGame] = v18;

  sub_100007878(v2, (uint64_t)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AccessPointTransitionView);
  v21 = *(unsigned __int8 *)(v7 + 80);
  v22 = (v21 + 16) & ~v21;
  v23 = swift_allocObject(&unk_1000FD518, v22 + v8, v21 | 7);
  sub_100010F0C((uint64_t)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v23 + v22, type metadata accessor for AccessPointTransitionView);
  v29[0] = 1;
  v30 = v11;
  swift_unknownObjectWeakInit(v31, 0);
  v31[1] = sub_100025FF8;
  v31[2] = v23;
  sub_100026004((uint64_t)v29, (uint64_t)v32);
  sub_100026040((uint64_t)v32, (uint64_t)v5);
  swift_storeEnumTagMultiPayload(v5, v3, 1);
  v24 = type metadata accessor for DashboardContentView(0);
  v25 = sub_1000035B4(&qword_10010D088, type metadata accessor for DashboardContentView, (uint64_t)&unk_1000CA8D0);
  v26 = sub_10002607C();
  _ConditionalContent<>.init(storage:)(v5, v24, &type metadata for GameCenterDashboard, v25, v26);
  return sub_1000260C0((uint64_t)v32);
}

void sub_100022A6C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t KeyPath;
  __n128 v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t Strong;
  uint64_t v30;
  uint64_t v31;
  Class isa;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  objc_class *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD v40[2];
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _QWORD v44[3];
  _QWORD v45[3];

  v2 = sub_100003304(&qword_10010EB20);
  __chkstk_darwin(v2);
  v43 = (char *)v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for AnimationCompletionCriteria(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AccessPointTransitionView(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = *(int *)(v12 + 72);
  v13 = *(_QWORD *)(a1 + v42);
  KeyPath = swift_getKeyPath(&unk_1000C8830);
  v45[0] = v13;
  v41 = sub_1000035B4(&qword_10010CE00, type metadata accessor for GameDashboardLaunchContext, (uint64_t)&protocol conformance descriptor for GameDashboardLaunchContext);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v45, KeyPath, v41);
  swift_release(KeyPath);
  swift_beginAccess(v13 + 16, v45, 0, 0);
  if (*(_BYTE *)(v13 + 16) == 1)
  {
    v15.n128_u64[0] = 0x3FE3333333333333;
    v16.n128_u64[0] = 0x3FE999999999999ALL;
    v17 = static Animation.spring(response:dampingFraction:blendDuration:)(v15, v16, 0.0);
    v40[1] = v40;
    __chkstk_darwin(v17);
    v40[-2] = a1;
    sub_100007878(a1, (uint64_t)v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AccessPointTransitionView);
    v18 = *(unsigned __int8 *)(v9 + 80);
    v19 = (v18 + 16) & ~v18;
    v20 = swift_allocObject(&unk_1000FD3D8, v19 + v10, v18 | 7);
    v21 = sub_100010F0C((uint64_t)v11, v20 + v19, type metadata accessor for AccessPointTransitionView);
    static AnimationCompletionCriteria.logicallyComplete.getter(v21);
    withAnimation<A>(_:completionCriteria:_:completion:)(v17, v7, sub_100025828, &v40[-4], sub_100025844, v20, (char *)&type metadata for () + 8);
    swift_release(v17);
    v22 = swift_release(v20);
    (*(void (**)(char *, uint64_t, __n128))(v5 + 8))(v7, v4, v22);
  }
  v23 = *(_QWORD *)(a1 + 8);
  v24 = *(_BYTE *)(a1 + 16);
  v25 = swift_retain(v23);
  v26 = sub_100030D7C(v25, v24);
  swift_release(v23);
  v27 = swift_getKeyPath(&unk_1000C8900);
  v44[0] = v26;
  v28 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v44, v27, v28);
  swift_release(v27);
  Strong = swift_unknownObjectWeakLoadStrong(v26 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__remoteTarget);
  swift_release(v26);
  if (Strong)
  {
    sub_100025740();
    v30 = *(_QWORD *)(a1 + v42);
    v31 = swift_getKeyPath(&unk_1000C8830);
    v44[0] = v30;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v44, v31, v41);
    swift_release(v31);
    swift_beginAccess(v30 + 16, v44, 0, 0);
    isa = NSNumber.init(BOOLeanLiteral:)(*(_BYTE *)(v30 + 16)).super.super.isa;
    v33 = type metadata accessor for TaskPriority(0);
    v34 = (uint64_t)v43;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v43, 1, 1, v33);
    type metadata accessor for MainActor(0);
    swift_unknownObjectRetain(Strong, v35);
    v36 = isa;
    v37 = static MainActor.shared.getter();
    v38 = (_QWORD *)swift_allocObject(&unk_1000FD3B0, 48, 7);
    v38[2] = v37;
    v38[3] = &protocol witness table for MainActor;
    v38[4] = Strong;
    v38[5] = v36;
    v39 = sub_100028240(v34, (uint64_t)&unk_10010CE70, (uint64_t)v38);
    swift_release(v39);

    swift_unknownObjectRelease(Strong);
  }
}

double sub_100022E74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  double result;
  BOOL v4;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 80);
  swift_retain(v1);
  v2 = sub_100003304(&qword_10010CDA0);
  State.wrappedValue.getter(&v5);
  v4 = (v5 & 1) == 0;
  State.wrappedValue.setter(&v4, v2);
  *(_QWORD *)&result = swift_release(v1).n128_u64[0];
  return result;
}

uint64_t sub_100022F10()
{
  uint64_t v0;
  uint64_t v2;

  v0 = sub_100003304(&qword_10010CDA0);
  State.wrappedValue.getter(&v2);
  LOBYTE(v2) = (v2 & 1) == 0;
  return State.wrappedValue.setter(&v2, v0);
}

uint64_t sub_100022F98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[2] = a4;
  v5[3] = a5;
  v6 = type metadata accessor for MainActor(0);
  v5[4] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  return swift_task_switch(sub_100023004, v7, v8);
}

uint64_t sub_100023004()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(void **)(v0 + 16);
  swift_release(*(_QWORD *)(v0 + 32));
  objc_msgSend(v2, "isPresentingDashboardFromAccessPoint:", v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002304C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t result;
  __n128 v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  _QWORD v25[3];
  char v26;
  uint64_t v27;
  uint64_t v28;

  v2 = type metadata accessor for AnimationCompletionCriteria(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AccessPointTransitionView(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)v25 - v11;
  v13 = *(_QWORD *)(a1 + 48);
  v26 = *(_BYTE *)(a1 + 40);
  v27 = v13;
  sub_100003304(&qword_10010CE10);
  State.wrappedValue.getter(&v28);
  v14 = v28;
  sub_100007878(a1, (uint64_t)v12, type metadata accessor for AccessPointTransitionView);
  if (v14 != 2)
    return sub_1000106F0((uint64_t)v12, type metadata accessor for AccessPointTransitionView);
  v15 = *((_QWORD *)v12 + 12);
  v26 = v12[88];
  v27 = v15;
  sub_100003304(&qword_10010CDA0);
  State.wrappedValue.getter(&v28);
  result = sub_1000106F0((uint64_t)v12, type metadata accessor for AccessPointTransitionView);
  if ((v28 & 1) == 0)
  {
    v18.n128_u64[0] = 0x3FE6666666666666;
    v17.n128_u64[0] = 0.5;
    v19 = static Animation.spring(response:dampingFraction:blendDuration:)(v17, v18, 0.0);
    v25[1] = v25;
    __chkstk_darwin(v19);
    v25[-2] = a1;
    sub_100007878(a1, (uint64_t)v9, type metadata accessor for AccessPointTransitionView);
    v20 = *(unsigned __int8 *)(v7 + 80);
    v21 = (v20 + 16) & ~v20;
    v22 = swift_allocObject(&unk_1000FD360, v21 + v8, v20 | 7);
    v23 = sub_100010F0C((uint64_t)v9, v22 + v21, type metadata accessor for AccessPointTransitionView);
    static AnimationCompletionCriteria.logicallyComplete.getter(v23);
    withAnimation<A>(_:completionCriteria:_:completion:)(v19, v5, sub_100025664, &v25[-4], sub_100025680, v22, (char *)&type metadata for () + 8);
    swift_release(v19);
    v24 = swift_release(v22);
    return (*(uint64_t (**)(char *, uint64_t, __n128))(v3 + 8))(v5, v2, v24);
  }
  return result;
}

double sub_1000232A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = sub_100003304(&qword_10010EB20);
  __chkstk_darwin(v2);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(a1 + 8);
  LOBYTE(a1) = *(_BYTE *)(a1 + 16);
  v6 = swift_retain(v5);
  v7 = sub_100030D7C(v6, a1);
  swift_release(v5);
  KeyPath = swift_getKeyPath(&unk_1000C88D0);
  v18 = v7;
  v9 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v18, KeyPath, v9);
  swift_release(KeyPath);
  v11 = *(_QWORD *)(v7 + 16);
  v10 = *(_QWORD *)(v7 + 24);
  swift_bridgeObjectRetain(v10);
  *(_QWORD *)&result = swift_release(v7).n128_u64[0];
  if (v10)
  {
    v13 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v4, 1, 1, v13);
    type metadata accessor for MainActor(0);
    v14 = static MainActor.shared.getter();
    v15 = (_QWORD *)swift_allocObject(&unk_1000FD388, 48, 7);
    v15[2] = v14;
    v15[3] = &protocol witness table for MainActor;
    v15[4] = v11;
    v15[5] = v10;
    v16 = sub_100028240((uint64_t)v4, (uint64_t)&unk_10010CE60, (uint64_t)v15);
    *(_QWORD *)&result = swift_release(v16).n128_u64[0];
  }
  return result;
}

uint64_t sub_100023414(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[2] = a4;
  v5[3] = a5;
  v6 = type metadata accessor for MainActor(0);
  v5[4] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  v5[5] = v7;
  v5[6] = v8;
  return swift_task_switch(sub_100023480, v7, v8);
}

uint64_t sub_100023480()
{
  uint64_t v0;
  uint64_t v1;

  if (qword_10010BAF0 != -1)
    swift_once(&qword_10010BAF0, sub_100051BCC);
  v1 = qword_1001232F8;
  *(_QWORD *)(v0 + 56) = qword_1001232F8;
  return swift_task_switch(sub_1000234E4, v1, 0);
}

uint64_t sub_1000234E4()
{
  _QWORD *v0;

  sub_100052718(v0[2], v0[3], 1);
  return swift_task_switch(sub_100023524, v0[5], v0[6]);
}

uint64_t sub_100023524()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100023554(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t KeyPath;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t, __n128);
  __n128 v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  _QWORD v31[3];
  _QWORD v32[3];

  v2 = type metadata accessor for AccessPointAnchoring(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v29 - v7;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_BYTE *)(a1 + 16);
  v11 = swift_retain(v9);
  v12 = sub_100030D7C(v11, v10);
  swift_release(v9);
  KeyPath = swift_getKeyPath(&unk_1000C8858);
  v32[0] = v12;
  v29 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v32, KeyPath, v29);
  swift_release(KeyPath);
  v14 = v12 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__anchoring;
  swift_beginAccess(v12 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__anchoring, v32, 0, 0);
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v15(v8, v14, v2);
  swift_release(v12);
  type metadata accessor for AccessPointTransitionView(0);
  v30 = v15;
  v15(v5, (uint64_t)v8, v2);
  v16 = sub_100003304(&qword_10010CC08);
  State.wrappedValue.setter(v5, v16);
  v17 = *(void (**)(char *, uint64_t))(v3 + 8);
  v17(v8, v2);
  State.wrappedValue.getter(v8);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for AccessPointAnchoring.topCentered(_:), v2);
  v18 = sub_1000035B4(&qword_10010CE20, (uint64_t (*)(uint64_t))&type metadata accessor for AccessPointAnchoring, (uint64_t)&protocol conformance descriptor for AccessPointAnchoring);
  LOBYTE(v14) = dispatch thunk of static Equatable.== infix(_:_:)(v8, v5, v2, v18);
  v17(v5, v2);
  result = ((uint64_t (*)(char *, uint64_t))v17)(v8, v2);
  if ((v14 & 1) == 0)
  {
    v20 = *(_QWORD *)(a1 + 8);
    v21 = *(_BYTE *)(a1 + 16);
    v22 = swift_retain(v20);
    v23 = sub_100030D7C(v22, v21);
    swift_release(v20);
    v24 = swift_getKeyPath(&unk_1000C8858);
    v31[0] = v23;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v31, v24, v29);
    swift_release(v24);
    v25 = v23 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__anchoring;
    swift_beginAccess(v23 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__anchoring, v31, 0, 0);
    v26 = v25;
    v27 = (void (*)(char *, char *, uint64_t, __n128))v30;
    v30(v8, v26, v2);
    v28 = swift_release(v23);
    v27(v5, v8, v2, v28);
    State.wrappedValue.setter(v5, v16);
    return ((uint64_t (*)(char *, uint64_t))v17)(v8, v2);
  }
  return result;
}

double sub_10002384C(uint64_t a1, __n128 a2, __n128 a3)
{
  uint64_t v4;
  _QWORD v6[4];

  a2.n128_u64[0] = 0x3FD999999999999ALL;
  a3.n128_u64[0] = 0x3FE0A3D70A3D70A4;
  v4 = static Animation.spring(response:dampingFraction:blendDuration:)(a2, a3, 0.0);
  v6[2] = a1;
  withAnimation<A>(_:_:)(v4, sub_100025634, v6, (char *)&type metadata for () + 8);
  swift_release(v4);
  return sub_10001DF60();
}

uint64_t sub_1000238C4(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v14;
  _QWORD v15[2];

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_BYTE *)(a1 + 16);
  v4 = swift_retain(v2);
  v5 = sub_100030D7C(v4, v3);
  swift_release(v2);
  KeyPath = swift_getKeyPath(&unk_1000C8880);
  v15[0] = v5;
  v7 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v15, KeyPath, v7);
  swift_release(KeyPath);
  if (*(_BYTE *)(v5 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__active) == 1)
  {
    v8 = swift_getKeyPath(&unk_1000C88A8);
    v15[0] = v5;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v15, v8, v7);
    swift_release(v8);
    v9 = *(_QWORD *)(v5 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__hideCount);
    swift_release(v5);
    v10 = v9 > 0;
  }
  else
  {
    swift_release(v5);
    v10 = 1;
  }
  v11 = *(_QWORD *)(a1 + 112);
  LOBYTE(v15[0]) = *(_BYTE *)(a1 + 104);
  v15[1] = v11;
  v14 = v10;
  v12 = sub_100003304(&qword_10010CDA0);
  return State.wrappedValue.setter(&v14, v12);
}

uint64_t sub_100023A18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v1 + 16) = a1;
  v2 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v1 + 24) = static MainActor.shared.getter();
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  return swift_task_switch(sub_100023A84, v3, v4);
}

uint64_t sub_100023A84()
{
  uint64_t v0;
  double v1;

  swift_release(*(_QWORD *)(v0 + 24));
  v1 = sub_10001DF60();
  return (*(uint64_t (**)(double))(v0 + 8))(v1);
}

uint64_t sub_100023AB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  _BYTE *v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  _BYTE v19[16];
  uint64_t v20;

  v2 = type metadata accessor for AnimationCompletionCriteria(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v19[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for AccessPointTransitionView(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = __chkstk_darwin(v6);
  v10 = &v19[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9.n128_u64[0] = 0x3FD3333333333333;
  v11.n128_u64[0] = 0x3FE999999999999ALL;
  v12 = static Animation.spring(response:dampingFraction:blendDuration:)(v9, v11, 0.0);
  v20 = a1;
  sub_100007878(a1, (uint64_t)v10, type metadata accessor for AccessPointTransitionView);
  v13 = *(unsigned __int8 *)(v7 + 80);
  v14 = (v13 + 16) & ~v13;
  v15 = swift_allocObject(&unk_1000FD540, v14 + v8, v13 | 7);
  v16 = sub_100010F0C((uint64_t)v10, v15 + v14, type metadata accessor for AccessPointTransitionView);
  static AnimationCompletionCriteria.logicallyComplete.getter(v16);
  withAnimation<A>(_:completionCriteria:_:completion:)(v12, v5, sub_1000260F4, v19, sub_100026110, v15, (char *)&type metadata for () + 8);
  swift_release(v12);
  v17 = swift_release(v15);
  return (*(uint64_t (**)(_BYTE *, uint64_t, __n128))(v3 + 8))(v5, v2, v17);
}

double sub_100023C34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  double result;
  BOOL v4;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 96);
  swift_retain(v1);
  v2 = sub_100003304(&qword_10010CDA0);
  State.wrappedValue.getter(&v5);
  v4 = (v5 & 1) == 0;
  State.wrappedValue.setter(&v4, v2);
  *(_QWORD *)&result = swift_release(v1).n128_u64[0];
  return result;
}

uint64_t sub_100023CD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  char v39[16];
  uint64_t v40;
  char v41;
  BOOL v42;
  __int128 v43;
  uint64_t v44;

  v3 = type metadata accessor for AccessPointAnchoring(0);
  v37 = *(_QWORD *)(v3 - 8);
  v38 = v3;
  v4 = __chkstk_darwin(v3);
  v35 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v36 = (uint64_t *)((char *)&v33 - v6);
  v7 = type metadata accessor for AccessPointTransitionView(0);
  v8 = *(_QWORD *)(a1 + *(int *)(v7 + 72));
  KeyPath = swift_getKeyPath(&unk_1000C8830);
  v40 = v8;
  v41 = 0;
  *(_QWORD *)&v43 = v8;
  v10 = sub_1000035B4(&qword_10010CE00, type metadata accessor for GameDashboardLaunchContext, (uint64_t)&protocol conformance descriptor for GameDashboardLaunchContext);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v43, KeyPath, sub_100026150, v39, (char *)&type metadata for () + 8, v10);
  v34 = v1;
  swift_release(KeyPath);
  v11 = type metadata accessor for AccessPointContainer(0);
  v12 = a1 + *(int *)(v7 + 68);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + *(int *)(v11 + 28)) + 16) - 1;
  v43 = *(_OWORD *)(a1 + 56);
  v44 = v13;
  v14 = sub_100003304(&qword_10010CD58);
  State.wrappedValue.setter(&v44, v14);
  v15 = *(unsigned __int8 *)(v12 + *(int *)(v11 + 24));
  if (v15 >= 6)
    v16 = 1;
  else
    v16 = 0x20202010102uLL >> (8 * v15);
  v18 = *(_QWORD *)(a1 + 48);
  LOBYTE(v43) = *(_BYTE *)(a1 + 40);
  v17 = v43;
  *((_QWORD *)&v43 + 1) = v18;
  LOBYTE(v44) = v16;
  v19 = sub_100003304(&qword_10010CE10);
  State.wrappedValue.setter(&v44, v19);
  v21 = *(_QWORD *)(a1 + 80);
  LOBYTE(v43) = *(_BYTE *)(a1 + 72);
  v20 = v43;
  *((_QWORD *)&v43 + 1) = v21;
  swift_retain(v21);
  v22 = sub_100003304(&qword_10010CDA0);
  State.wrappedValue.getter(&v44);
  LOBYTE(v43) = v20;
  *((_QWORD *)&v43 + 1) = v21;
  v42 = (v44 & 1) == 0;
  State.wrappedValue.setter(&v42, v22);
  swift_release(v21);
  LOBYTE(v43) = v17;
  *((_QWORD *)&v43 + 1) = v18;
  State.wrappedValue.getter(&v44);
  if (v44 == 2)
  {
    v23 = *(_QWORD *)(a1 + 128);
    LOBYTE(v43) = *(_BYTE *)(a1 + 120);
    *((_QWORD *)&v43 + 1) = v23;
    LOBYTE(v44) = 0;
    State.wrappedValue.setter(&v44, v22);
    v25 = v36;
    v24 = v37;
    v26 = v38;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v37 + 104))(v36, enum case for AccessPointAnchoring.topCentered(_:), v38);
    v27 = v35;
    (*(void (**)(char *, _QWORD *, uint64_t))(v24 + 16))(v35, v25, v26);
    v28 = sub_100003304(&qword_10010CC08);
    v29 = v27;
  }
  else
  {
    v30 = sub_100003304(&qword_10010CC08);
    v25 = v36;
    State.wrappedValue.getter(v36);
    v24 = v37;
    v26 = v38;
    v31 = v35;
    (*(void (**)(char *, _QWORD *, uint64_t))(v37 + 16))(v35, v25, v38);
    v29 = v31;
    v28 = v30;
  }
  State.wrappedValue.setter(v29, v28);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(v24 + 8))(v25, v26);
}

uint64_t sub_100024004(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(double *)(v8 + 40) = a3;
  *(double *)(v8 + 48) = a4;
  *(double *)(v8 + 24) = a1;
  *(double *)(v8 + 32) = a2;
  *(_QWORD *)(v8 + 16) = a8;
  v9 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v8 + 56) = static MainActor.shared.getter(v9);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  return swift_task_switch(sub_100024078, v10, v11);
}

id sub_100024078()
{
  uint64_t v0;
  double v1;
  double v2;
  double v3;
  double v4;
  id result;
  void *v6;

  v2 = *(double *)(v0 + 40);
  v1 = *(double *)(v0 + 48);
  v4 = *(double *)(v0 + 24);
  v3 = *(double *)(v0 + 32);
  swift_release(*(_QWORD *)(v0 + 56));
  result = (id)BSValueWithRect(v4, v3, v2, v1);
  if (result)
  {
    v6 = result;
    objc_msgSend(*(id *)(v0 + 16), "updateAccessPointFrameCoordinates:", result);

    return (id)(*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100024104(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E4048, 1);
}

uint64_t sub_100024114@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  _BYTE v28[7];
  char v29;
  _QWORD v30[2];
  char v31;
  _OWORD v32[3];
  uint64_t v33;
  __int128 v34;

  v3 = v2;
  v6 = sub_100003304(&qword_10010CD90);
  __chkstk_darwin(v6);
  v8 = &v28[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = sub_100003304(&qword_10010CD98);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v28[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v34 = *(_OWORD *)(v2 + 3);
  v32[0] = *(_OWORD *)(v2 + 3);
  sub_100003304(&qword_10010CDA0);
  v13 = State.wrappedValue.getter(v30);
  if (LOBYTE(v30[0]))
    v14 = 0x404E000000000000;
  else
    v14 = 0x7FF0000000000000;
  v15 = static Alignment.center.getter(v13);
  _FrameLayout.init(width:height:alignment:)(v32, v14, 0, 0x404E000000000000, 0, v15, v16);
  v17 = sub_100003304(&qword_10010CDA8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v8, a1, v17);
  v18 = &v8[*(int *)(v6 + 36)];
  v19 = v32[1];
  *v18 = v32[0];
  v18[1] = v19;
  v18[2] = v32[2];
  v20 = v3[1];
  v21 = *((_BYTE *)v3 + 16);
  v33 = *v3;
  v30[0] = v33;
  v30[1] = v20;
  v31 = v21;
  v22 = sub_100003304(&qword_10010CDB0);
  Binding.wrappedValue.getter(&v29, v22);
  v23 = swift_allocObject(&unk_1000FD220, 56, 7);
  v24 = *((_OWORD *)v3 + 1);
  *(_OWORD *)(v23 + 16) = *(_OWORD *)v3;
  *(_OWORD *)(v23 + 32) = v24;
  *(_QWORD *)(v23 + 48) = v3[4];
  sub_100024D28(&v33);
  swift_retain(v20);
  sub_100024D50((uint64_t)&v34);
  v25 = sub_100024D78();
  v26 = sub_10001DF0C();
  View.onChange<A>(of:initial:_:)(&v29, 0, sub_100024D20, v23, v6, &type metadata for AccessPointTransitionView.AnimationState, v25, v26);
  swift_release(v23);
  sub_100010ED0((uint64_t)v8, &qword_10010CD90);
  return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v10 + 32))(a2, v12, v9);
}

double sub_10002434C(__int128 *a1)
{
  uint64_t v2;
  __n128 v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[6];
  __int128 v9;
  char v10;
  uint64_t v11;

  v9 = *a1;
  v10 = *((_BYTE *)a1 + 16);
  v2 = sub_100003304(&qword_10010CDB0);
  Binding.wrappedValue.getter(&v11, v2);
  if (v11 == 1)
  {
    v3.n128_u64[0] = 0x3FD3333333333333;
    v4.n128_u64[0] = 0x3FE999999999999ALL;
    v5 = static Animation.spring(response:dampingFraction:blendDuration:)(v3, v4, 0.0);
    __chkstk_darwin(v5);
    v8[2] = a1;
    withAnimation<A>(_:_:)(v6, sub_100024DFC, v8, (char *)&type metadata for () + 8);
    v3.n128_u64[0] = swift_release(v5).n128_u64[0];
  }
  return v3.n128_f64[0];
}

uint64_t sub_100024420()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

uint64_t sub_10002443C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E4020, 1);
}

uint64_t sub_10002444C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD v25[2];
  uint64_t v26;
  __int128 v27;
  uint64_t v28;

  v2 = v1;
  v25[1] = a1;
  v3 = type metadata accessor for AccessPointContentView(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v6 = sub_100003304(&qword_10010CD18);
  __chkstk_darwin(v6);
  v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003304(&qword_10010CD20);
  __chkstk_darwin(v9);
  v11 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v8 = static VerticalAlignment.center.getter(v12);
  *((_QWORD *)v8 + 1) = 0;
  v8[16] = 0;
  v13 = sub_100003304(&qword_10010CD28);
  v14 = sub_100024668(v2, (uint64_t)&v8[*(int *)(v13 + 44)]);
  v15 = static Color.white.getter(v14);
  sub_100010CBC((uint64_t)v8, (uint64_t)v11, &qword_10010CD18);
  *(_QWORD *)&v11[*(int *)(v9 + 36)] = v15;
  sub_100010ED0((uint64_t)v8, &qword_10010CD18);
  v16 = v2 + *(int *)(v3 + 20);
  v17 = *(_OWORD *)v16;
  v18 = *(_QWORD *)(v16 + 16);
  v27 = v17;
  v28 = v18;
  v19 = sub_100003304(&qword_10010CD30);
  Binding.wrappedValue.getter(&v26, v19);
  sub_100007878(v2, (uint64_t)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AccessPointContentView);
  v20 = *(unsigned __int8 *)(v4 + 80);
  v21 = (v20 + 16) & ~v20;
  v22 = swift_allocObject(&unk_1000FD1F8, v21 + v5, v20 | 7);
  sub_100010F0C((uint64_t)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v22 + v21, type metadata accessor for AccessPointContentView);
  v23 = sub_100024BB0();
  View.onChange<A>(of:initial:_:)(&v26, 0, sub_100024B8C, v22, v9, &type metadata for Int, v23, &protocol witness table for Int);
  swift_release(v22);
  return sub_100010ED0((uint64_t)v11, &qword_10010CD20);
}

uint64_t sub_100024668@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t result;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;

  v34 = a2;
  v32 = sub_100003304(&qword_10010CD60);
  __chkstk_darwin(v32);
  v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100003304(&qword_10010CD68);
  v33 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003304(&qword_10010CD70);
  __chkstk_darwin(v8);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v31 - v12;
  v14 = (uint64_t *)(a1 + *(int *)(type metadata accessor for AccessPointContentView(0) + 24));
  v16 = *v14;
  v15 = v14[1];
  v35 = *v14;
  v36 = v15;
  sub_100003304(&qword_10010CD58);
  State.wrappedValue.getter(&v37);
  if ((v37 & 1) == 0)
  {
    v35 = v16;
    v36 = v15;
    State.wrappedValue.getter(&v37);
    v17 = v37;
    result = type metadata accessor for AccessPointContainer(0);
    if ((v17 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v19 = *(_QWORD *)(a1 + *(int *)(result + 28));
      if (v17 < *(_QWORD *)(v19 + 16))
      {
        sub_100024C64(v19 + 40 * v17 + 32, (uint64_t)&v35);
        v20 = sub_100024CA8();
        ComponentView.init(_:content:)(&v35, sub_1000C0B90, 0, &type metadata for _ComponentContentByType, v20);
        v21 = v33;
        (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v4, v7, v5);
        v22 = v4;
        v23 = v32;
        v24 = 0;
LABEL_8:
        swift_storeEnumTagMultiPayload(v22, v23, v24);
        v28 = sub_100011054(&qword_10010CD80, &qword_10010CD68, (uint64_t)&protocol conformance descriptor for ComponentView<A>);
        _ConditionalContent<>.init(storage:)(v4, v5, v5, v28, v28);
        (*(void (**)(char *, uint64_t))(v21 + 8))(v7, v5);
        sub_100010CBC((uint64_t)v13, (uint64_t)v10, &qword_10010CD70);
        v29 = v34;
        sub_100010CBC((uint64_t)v10, v34, &qword_10010CD70);
        v30 = v29 + *(int *)(sub_100003304(&qword_10010CD88) + 48);
        *(_QWORD *)v30 = 0;
        *(_BYTE *)(v30 + 8) = 0;
        sub_100010ED0((uint64_t)v13, &qword_10010CD70);
        return sub_100010ED0((uint64_t)v10, &qword_10010CD70);
      }
    }
    __break(1u);
    goto LABEL_11;
  }
  v35 = v16;
  v36 = v15;
  State.wrappedValue.getter(&v37);
  v25 = v37;
  result = type metadata accessor for AccessPointContainer(0);
  if ((v25 & 0x8000000000000000) != 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v26 = *(_QWORD *)(a1 + *(int *)(result + 28));
  if (v25 < *(_QWORD *)(v26 + 16))
  {
    sub_100024C64(v26 + 40 * v25 + 32, (uint64_t)&v35);
    v27 = sub_100024CA8();
    ComponentView.init(_:content:)(&v35, sub_1000C0B90, 0, &type metadata for _ComponentContentByType, v27);
    v21 = v33;
    (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v4, v7, v5);
    v22 = v4;
    v23 = v32;
    v24 = 1;
    goto LABEL_8;
  }
LABEL_12:
  __break(1u);
  return result;
}

double sub_1000249A4(uint64_t a1, uint64_t a2, __n128 a3, __n128 a4)
{
  uint64_t v6;
  double result;
  _QWORD v8[4];

  v6 = static Animation.spring(response:dampingFraction:blendDuration:)(a3, a4, 0.0);
  v8[2] = a1;
  withAnimation<A>(_:_:)(v6, a2, v8, (char *)&type metadata for () + 8);
  *(_QWORD *)&result = swift_release(v6).n128_u64[0];
  return result;
}

uint64_t sub_100024A08(uint64_t a1)
{
  uint64_t v2;
  __int128 *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v2 = type metadata accessor for AccessPointContentView(0);
  v3 = (__int128 *)(a1 + *(int *)(v2 + 20));
  v4 = *v3;
  v5 = *((_QWORD *)v3 + 2);
  v10 = v4;
  v11 = v5;
  v6 = sub_100003304(&qword_10010CD30);
  Binding.wrappedValue.getter(&v9, v6);
  v10 = *(_OWORD *)(a1 + *(int *)(v2 + 24));
  v7 = sub_100003304(&qword_10010CD58);
  return State.wrappedValue.setter(&v9, v7);
}

uint64_t sub_100024AA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v1 = type metadata accessor for AccessPointContentView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  v8 = type metadata accessor for PageID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = type metadata accessor for AccessPointContainer(0);
  v10 = v7 + *(int *)(v9 + 20);
  v11 = type metadata accessor for PageMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + *(int *)(v9 + 28)));
  v12 = (_QWORD *)(v7 + *(int *)(v1 + 20));
  swift_release(*v12);
  swift_release(v12[1]);
  swift_release(*(_QWORD *)(v7 + *(int *)(v1 + 24) + 8));
  return swift_deallocObject(v0, v5, v6);
}

void sub_100024B8C()
{
  sub_100025160(type metadata accessor for AccessPointContentView, (uint64_t)sub_100024C4C, 0.4, 0.52);
}

unint64_t sub_100024BB0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010CD38;
  if (!qword_10010CD38)
  {
    v1 = sub_100006E54(&qword_10010CD20);
    sub_100011054(&qword_10010CD40, &qword_10010CD18, (uint64_t)&protocol conformance descriptor for HStack<A>);
    sub_100011054(&qword_10010CD48, &qword_10010CD50, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10010CD38);
  }
  return result;
}

uint64_t sub_100024C4C()
{
  uint64_t v0;

  return sub_100024A08(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100024C64(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t sub_100024CA8()
{
  unint64_t result;

  result = qword_10010CD78;
  if (!qword_10010CD78)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for _ComponentContentByType, &type metadata for _ComponentContentByType);
    atomic_store(result, (unint64_t *)&qword_10010CD78);
  }
  return result;
}

uint64_t sub_100024CEC()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

double sub_100024D20()
{
  uint64_t v0;

  return sub_10002434C((__int128 *)(v0 + 16));
}

_QWORD *sub_100024D28(_QWORD *a1)
{
  swift_retain(*a1);
  return a1;
}

uint64_t sub_100024D50(uint64_t a1)
{
  swift_retain(*(_QWORD *)(a1 + 8));
  return a1;
}

unint64_t sub_100024D78()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010CDB8;
  if (!qword_10010CDB8)
  {
    v1 = sub_100006E54(&qword_10010CD90);
    sub_100011054(&qword_10010CDC0, &qword_10010CDA8, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10010CDB8);
  }
  return result;
}

uint64_t sub_100024DFC()
{
  uint64_t v0;
  uint64_t v1;
  char v3;
  __int128 v4;

  v4 = *(_OWORD *)(*(_QWORD *)(v0 + 16) + 24);
  v3 = 1;
  v1 = sub_100003304(&qword_10010CDA0);
  return State.wrappedValue.setter(&v3, v1);
}

uint64_t sub_100024E60()
{
  return sub_100024E6C((uint64_t (*)(uint64_t))sub_100022A6C);
}

uint64_t sub_100024E6C(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AccessPointTransitionView(0) - 8) + 80);
  return a1(v1 + ((v2 + 16) & ~v2));
}

uint64_t sub_100024EAC()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  uint64_t v30;

  v1 = v0;
  v2 = (int *)type metadata accessor for AccessPointTransitionView(0);
  v3 = *((_QWORD *)v2 - 1);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 16) & ~v4;
  v6 = *(_QWORD *)(v3 + 64);
  v7 = v0 + v5;
  swift_release(*(_QWORD *)(v0 + v5 + 8));
  swift_release(*(_QWORD *)(v0 + v5 + 48));
  swift_release(*(_QWORD *)(v0 + v5 + 64));
  swift_release(*(_QWORD *)(v0 + v5 + 80));
  swift_release(*(_QWORD *)(v0 + v5 + 96));
  swift_release(*(_QWORD *)(v0 + v5 + 112));
  swift_release(*(_QWORD *)(v0 + v5 + 128));
  v8 = v0 + v5 + v2[14];
  v9 = type metadata accessor for AccessPointAnchoring(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v11 = sub_100003304(&qword_10010CC08);
  v12 = swift_release(*(_QWORD *)(v8 + *(int *)(v11 + 28)));
  v13 = v7 + v2[15];
  ((void (*)(uint64_t, uint64_t, __n128))v10)(v13, v9, v12);
  swift_release(*(_QWORD *)(v13 + *(int *)(v11 + 28)));
  v14 = (_QWORD *)(v7 + v2[16]);
  v15 = type metadata accessor for Game(0);
  if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15))
  {
    v30 = v6;
    swift_bridgeObjectRelease(v14[1]);
    swift_bridgeObjectRelease(v14[3]);
    swift_bridgeObjectRelease(v14[5]);
    v16 = (char *)v14 + *(int *)(v15 + 28);
    v17 = type metadata accessor for Date(0);
    v18 = *(_QWORD *)(v17 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
      (*(void (**)(char *, uint64_t))(v18 + 8))(v16, v17);
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v14 + *(int *)(v15 + 60) + 8));
    v6 = v30;
  }
  v19 = v4 | 7;
  v20 = v5 + v6;
  v21 = v7 + v2[17];
  v22 = type metadata accessor for PageID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
  v23 = type metadata accessor for AccessPointContainer(0);
  v24 = v21 + *(int *)(v23 + 20);
  v25 = type metadata accessor for PageMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v24, v25);
  swift_bridgeObjectRelease(*(_QWORD *)(v21 + *(int *)(v23 + 28)));
  swift_release(*(_QWORD *)(v7 + v2[18]));
  swift_release(*(_QWORD *)(v7 + v2[19]));
  v26 = (_QWORD *)(v7 + v2[20]);
  swift_release(*v26);
  swift_release(v26[1]);
  v27 = (char *)v26 + *(int *)(sub_100003304(&qword_10010CC18) + 32);
  v28 = sub_100003304(&qword_10010CC20);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v27, v28);
  return swift_deallocObject(v1, v20, v19);
}

uint64_t sub_100025128()
{
  return sub_100024E6C(sub_10002304C);
}

void sub_100025140()
{
  sub_100025160(type metadata accessor for AccessPointTransitionView, (uint64_t)sub_10002564C, 0.5, 0.88);
}

void sub_100025160(uint64_t (*a1)(_QWORD), uint64_t a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v8;
  __n128 v9;
  __n128 v10;

  v8 = *(unsigned __int8 *)(*(_QWORD *)(a1(0) - 8) + 80);
  v9.n128_f64[0] = a3;
  v10.n128_f64[0] = a4;
  sub_1000249A4(v4 + ((v8 + 16) & ~v8), a2, v9, v10);
}

uint64_t sub_1000251C8()
{
  return sub_100024E6C((uint64_t (*)(uint64_t))sub_10002384C);
}

uint64_t sub_1000251D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AccessPointTransitionView(0) - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  v4 = (_QWORD *)swift_task_alloc(dword_10010CE2C);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_1000263E8;
  return sub_100023A18(v3);
}

uint64_t sub_100025248(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AccessPointTransitionView(0) - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = v1 + ((v4 + 32) & ~v4);
  v8 = (_QWORD *)swift_task_alloc(dword_10010CE3C);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_1000252CC;
  return sub_10001E210(a1, v5, v6, v7);
}

uint64_t sub_1000252CC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *v0;
  v1 = *(_QWORD *)(v4 + 16);
  v2 = *v0;
  v4 = v2;
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100025318()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  uint64_t v28;

  v1 = (int *)type metadata accessor for AccessPointTransitionView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  v6 = v0 + v4;
  swift_release(*(_QWORD *)(v0 + v4 + 8));
  swift_release(*(_QWORD *)(v0 + v4 + 48));
  swift_release(*(_QWORD *)(v0 + v4 + 64));
  swift_release(*(_QWORD *)(v0 + v4 + 80));
  swift_release(*(_QWORD *)(v0 + v4 + 96));
  swift_release(*(_QWORD *)(v0 + v4 + 112));
  swift_release(*(_QWORD *)(v0 + v4 + 128));
  v7 = v0 + v4 + v1[14];
  v8 = type metadata accessor for AccessPointAnchoring(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v10 = sub_100003304(&qword_10010CC08);
  v11 = swift_release(*(_QWORD *)(v7 + *(int *)(v10 + 28)));
  v12 = v0 + v4 + v1[15];
  ((void (*)(uint64_t, uint64_t, __n128))v9)(v12, v8, v11);
  swift_release(*(_QWORD *)(v12 + *(int *)(v10 + 28)));
  v13 = (_QWORD *)(v0 + v4 + v1[16]);
  v14 = type metadata accessor for Game(0);
  if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v13, 1, v14))
  {
    v28 = v5;
    swift_bridgeObjectRelease(v13[1]);
    swift_bridgeObjectRelease(v13[3]);
    swift_bridgeObjectRelease(v13[5]);
    v15 = (char *)v13 + *(int *)(v14 + 28);
    v16 = type metadata accessor for Date(0);
    v17 = *(_QWORD *)(v16 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
      (*(void (**)(char *, uint64_t))(v17 + 8))(v15, v16);
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v13 + *(int *)(v14 + 60) + 8));
    v5 = v28;
  }
  v18 = v3 | 7;
  v19 = v6 + v1[17];
  v20 = type metadata accessor for PageID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
  v21 = type metadata accessor for AccessPointContainer(0);
  v22 = v19 + *(int *)(v21 + 20);
  v23 = type metadata accessor for PageMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v22, v23);
  swift_bridgeObjectRelease(*(_QWORD *)(v19 + *(int *)(v21 + 28)));
  swift_release(*(_QWORD *)(v6 + v1[18]));
  swift_release(*(_QWORD *)(v6 + v1[19]));
  v24 = (_QWORD *)(v6 + v1[20]);
  swift_release(*v24);
  swift_release(v24[1]);
  v25 = (char *)v24 + *(int *)(sub_100003304(&qword_10010CC18) + 32);
  v26 = sub_100003304(&qword_10010CC20);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v25, v26);
  return swift_deallocObject(v0, v4 + v5, v18);
}

uint64_t sub_100025598(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AccessPointTransitionView(0) - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = v1 + ((v4 + 32) & ~v4);
  v8 = (_QWORD *)swift_task_alloc(dword_10010CE4C);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_1000263E8;
  return sub_10001E518(a1, v5, v6, v7);
}

uint64_t sub_10002561C()
{
  return sub_10001E9EC();
}

uint64_t sub_100025634()
{
  uint64_t v0;

  return sub_1000238C4(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10002564C()
{
  uint64_t v0;

  return sub_100023554(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100025664()
{
  return sub_100025F90(0);
}

uint64_t sub_100025680()
{
  return sub_100024E6C((uint64_t (*)(uint64_t))sub_1000232A4);
}

uint64_t sub_100025694()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000256C0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_10010CE5C);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_1000263E8;
  return sub_100023414(a1, v4, v5, v7, v6);
}

unint64_t sub_100025740()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010EB10;
  if (!qword_10010EB10)
  {
    v1 = objc_opt_self(NSNumber);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10010EB10);
  }
  return result;
}

uint64_t sub_10002577C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000257B0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_10010CE6C);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_1000263E8;
  return sub_100022F98(a1, v4, v5, v7, v6);
}

double sub_100025828()
{
  uint64_t v0;

  return sub_100022E74(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100025844()
{
  return sub_100024E6C((uint64_t (*)(uint64_t))sub_100022F10);
}

unint64_t sub_100025850()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010CEC0;
  if (!qword_10010CEC0)
  {
    v1 = sub_100006E54(&qword_10010CEB8);
    sub_100011054(&qword_10010CEC8, &qword_10010CED0, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10010CEC0);
  }
  return result;
}

unint64_t sub_1000258D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010CED8;
  if (!qword_10010CED8)
  {
    v1 = sub_100006E54(&qword_10010CE98);
    sub_100025940();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10010CED8);
  }
  return result;
}

unint64_t sub_100025940()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010CEE0;
  if (!qword_10010CEE0)
  {
    v1 = sub_100006E54(&qword_10010CE90);
    sub_100011054(&qword_10010CEE8, &qword_10010CE88, (uint64_t)&protocol conformance descriptor for VStack<A>);
    sub_100011054(&qword_10010CEF0, &qword_10010CEB0, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10010CEE0);
  }
  return result;
}

uint64_t sub_1000259E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AccessPointTransitionView(0) - 8) + 80);
  return sub_10001FF28(v2 + ((v5 + 16) & ~v5), a1, a2);
}

uint64_t sub_100025A38()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t);
  uint64_t v13;
  __n128 v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v1 = (int *)type metadata accessor for AccessPointTransitionView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v39 = *(_QWORD *)(v2 + 64);
  v5 = type metadata accessor for GeometryProxy(0, v4);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v36 = v6;
  v37 = v5;
  v8 = *(_QWORD *)(v6 + 64);
  v38 = v0;
  v9 = (_QWORD *)(v0 + ((v3 + 16) & ~v3));
  swift_release(v9[1]);
  swift_release(v9[6]);
  swift_release(v9[8]);
  swift_release(v9[10]);
  swift_release(v9[12]);
  swift_release(v9[14]);
  swift_release(v9[16]);
  v10 = (char *)v9 + v1[14];
  v11 = type metadata accessor for AccessPointAnchoring(0);
  v12 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8);
  v12(v10, v11);
  v13 = sub_100003304(&qword_10010CC08);
  v14 = swift_release(*(_QWORD *)&v10[*(int *)(v13 + 28)]);
  v15 = (char *)v9 + v1[15];
  ((void (*)(char *, uint64_t, __n128))v12)(v15, v11, v14);
  swift_release(*(_QWORD *)&v15[*(int *)(v13 + 28)]);
  v16 = (_QWORD *)((char *)v9 + v1[16]);
  v17 = type metadata accessor for Game(0);
  v18 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v16, 1, v17);
  v19 = v39;
  if (!v18)
  {
    v35 = v7;
    swift_bridgeObjectRelease(v16[1]);
    swift_bridgeObjectRelease(v16[3]);
    swift_bridgeObjectRelease(v16[5]);
    v20 = (char *)v16 + *(int *)(v17 + 28);
    v21 = type metadata accessor for Date(0);
    v22 = *(_QWORD *)(v21 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
      (*(void (**)(char *, uint64_t))(v22 + 8))(v20, v21);
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v16 + *(int *)(v17 + 60) + 8));
    v19 = v39;
    v7 = v35;
  }
  v23 = v3 | v7 | 7;
  v24 = (((v3 + 16) & ~v3) + v19 + v7) & ~v7;
  v25 = v24 + v8;
  v26 = (char *)v9 + v1[17];
  v27 = type metadata accessor for PageID(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(v26, v27);
  v28 = type metadata accessor for AccessPointContainer(0);
  v29 = &v26[*(int *)(v28 + 20)];
  v30 = type metadata accessor for PageMetrics(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(v29, v30);
  swift_bridgeObjectRelease(*(_QWORD *)&v26[*(int *)(v28 + 28)]);
  swift_release(*(_QWORD *)((char *)v9 + v1[18]));
  swift_release(*(_QWORD *)((char *)v9 + v1[19]));
  v31 = (_QWORD *)((char *)v9 + v1[20]);
  swift_release(*v31);
  swift_release(v31[1]);
  v32 = (char *)v31 + *(int *)(sub_100003304(&qword_10010CC18) + 32);
  v33 = sub_100003304(&qword_10010CC20);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v32, v33);
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v38 + v24, v37);
  return swift_deallocObject(v38, v25, v23);
}

void sub_100025D00()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;

  v1 = *(_QWORD *)(type metadata accessor for AccessPointTransitionView(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for GeometryProxy(0, v4) - 8) + 80);
  sub_100020EFC(v0 + ((v2 + v3 + v5) & ~v5));
}

unint64_t sub_100025D68()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010CF30;
  if (!qword_10010CF30)
  {
    v1 = sub_100006E54(&qword_10010CF00);
    sub_100011054(&qword_10010CF38, &qword_10010CEF8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10010CF30);
  }
  return result;
}

uint64_t sub_100025DF4()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100025E20(uint64_t a1)
{
  double *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  _QWORD *v11;

  v4 = *((_QWORD *)v1 + 2);
  v5 = *((_QWORD *)v1 + 3);
  v6 = *((_QWORD *)v1 + 4);
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc(dword_10010CF4C);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_1000263E8;
  return sub_100024004(v7, v8, v9, v10, a1, v4, v5, v6);
}

unint64_t sub_100025EBC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010CFF0;
  if (!qword_10010CFF0)
  {
    v1 = sub_100006E54(&qword_10010CFD0);
    sub_100011054(&qword_10010CFF8, &qword_10010CFC8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    sub_100011054(&qword_10010D000, &qword_10010CFB0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10010CFF0);
  }
  return result;
}

uint64_t sub_100025F6C()
{
  return sub_100024E6C((uint64_t (*)(uint64_t))sub_10001F6C4);
}

uint64_t sub_100025F78()
{
  return sub_100025F90(1);
}

uint64_t sub_100025F90(char a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[9];
  uint64_t v8;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_BYTE *)(v2 + 120);
  v4 = *(_QWORD *)(v2 + 128);
  v7[1] = v3;
  v8 = v4;
  v7[0] = a1;
  v5 = sub_100003304(&qword_10010CDA0);
  return State.wrappedValue.setter(v7, v5);
}

uint64_t sub_100025FF8()
{
  return sub_100024E6C(sub_100023AB8);
}

uint64_t sub_100026004(uint64_t a1, uint64_t a2)
{
  initializeWithTake for GameCenterDashboard(a2, a1);
  return a2;
}

uint64_t sub_100026040(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for GameCenterDashboard(a2, a1);
  return a2;
}

unint64_t sub_10002607C()
{
  unint64_t result;

  result = qword_10010D090;
  if (!qword_10010D090)
  {
    result = swift_getWitnessTable(&unk_1000CCD94, &type metadata for GameCenterDashboard);
    atomic_store(result, (unint64_t *)&qword_10010D090);
  }
  return result;
}

uint64_t sub_1000260C0(uint64_t a1)
{
  destroy for GameCenterDashboard(a1);
  return a1;
}

double sub_1000260F4()
{
  uint64_t v0;

  return sub_100023C34(*(_QWORD *)(v0 + 16));
}

void sub_100026110()
{
  sub_100025160(type metadata accessor for AccessPointTransitionView, (uint64_t)sub_100026138, 0.4, 0.95);
}

uint64_t sub_100026138()
{
  uint64_t v0;

  return sub_100023CD0(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100026150()
{
  uint64_t v0;

  return sub_100077E9C(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_10002616C()
{
  _QWORD v1[4];

  v1[0] = sub_100006E54(&qword_10010CD20);
  v1[1] = &type metadata for Int;
  v1[2] = sub_100024BB0();
  v1[3] = &protocol witness table for Int;
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
}

uint64_t sub_1000261CC()
{
  _QWORD v1[4];

  v1[0] = sub_100006E54(&qword_10010CD90);
  v1[1] = &type metadata for AccessPointTransitionView.AnimationState;
  v1[2] = sub_100024D78();
  v1[3] = sub_10001DF0C();
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
}

unint64_t sub_100026230()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t OpaqueTypeConformance2;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  ValueMetadata *v12;
  uint64_t v13;
  void *v14;

  result = qword_10010D098;
  if (!qword_10010D098)
  {
    v1 = sub_100006E54(&qword_10010CDF0);
    v2 = sub_100006E54(&qword_10010CDE0);
    v3 = sub_100006E54(&qword_10010CDD8);
    v4 = type metadata accessor for AccessPointAnchoring(255);
    v5 = sub_100006E54(&qword_10010CDD0);
    v11 = sub_100006E54(&qword_10010CDC8);
    v12 = (ValueMetadata *)&type metadata for Bool;
    v13 = sub_100011054(&qword_10010CE08, &qword_10010CDC8, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    v14 = &protocol witness table for Bool;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    v7 = sub_10001DF0C();
    v11 = v5;
    v12 = &type metadata for AccessPointTransitionView.AnimationState;
    v13 = OpaqueTypeConformance2;
    v14 = (void *)v7;
    v8 = swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    v9 = sub_1000035B4(&qword_10010CE20, (uint64_t (*)(uint64_t))&type metadata accessor for AccessPointAnchoring, (uint64_t)&protocol conformance descriptor for AccessPointAnchoring);
    v11 = v3;
    v12 = (ValueMetadata *)v4;
    v13 = v8;
    v14 = (void *)v9;
    v10 = swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    v11 = v2;
    v12 = (ValueMetadata *)&type metadata for Bool;
    v13 = v10;
    v14 = &protocol witness table for Bool;
    swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    sub_1000035B4(&qword_10010D0A0, (uint64_t (*)(uint64_t))&type metadata accessor for _TaskModifier, (uint64_t)&protocol conformance descriptor for _TaskModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10010D098);
  }
  return result;
}

_QWORD *sub_1000263F0(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  int *v30;
  uint64_t v31;
  unsigned int (*v32)(_QWORD *, uint64_t, int *);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  void (*v46)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *__dst;
  void (*v73)(uint64_t, uint64_t, uint64_t);
  unsigned int (*v74)(char *, uint64_t, uint64_t);
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v34 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v34 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v34);
  }
  else
  {
    v6 = a2[1];
    v7 = *((_BYTE *)a2 + 16);
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v6;
    *(_BYTE *)(a1 + 16) = v7;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    v9 = a2[6];
    v8 = a2[7];
    *(_QWORD *)(a1 + 48) = v9;
    *(_QWORD *)(a1 + 56) = v8;
    v10 = a2[8];
    *(_QWORD *)(a1 + 64) = v10;
    *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
    v11 = a2[10];
    *(_QWORD *)(a1 + 80) = v11;
    *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
    v12 = a2[12];
    *(_QWORD *)(a1 + 96) = v12;
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 13);
    v13 = a2[15];
    *(_QWORD *)(a1 + 120) = v13;
    *(_BYTE *)(a1 + 128) = *((_BYTE *)a2 + 128);
    v14 = a2[17];
    v15 = a3[14];
    v77 = a1 + v15;
    v75 = (uint64_t)a2 + v15;
    *(_QWORD *)(a1 + 136) = v14;
    v16 = type metadata accessor for AccessPointAnchoring(0);
    v73 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
    swift_retain(v6);
    swift_retain(v9);
    swift_retain(v10);
    swift_retain(v11);
    v17 = v12;
    v18 = a3;
    swift_retain(v17);
    swift_retain(v13);
    swift_retain(v14);
    v73(v77, v75, v16);
    v19 = sub_100003304(&qword_10010CC08);
    v20 = *(int *)(v19 + 28);
    v21 = *(_QWORD *)(v75 + v20);
    *(_QWORD *)(v77 + v20) = v21;
    v22 = a3[15];
    v23 = (char *)v4 + v22;
    v24 = (uint64_t)a2 + v22;
    swift_retain(v21);
    v73((uint64_t)v23, v24, v16);
    v25 = *(int *)(v19 + 28);
    v26 = *(_QWORD *)(v24 + v25);
    *(_QWORD *)&v23[v25] = v26;
    v27 = a3[16];
    v28 = (_QWORD *)((char *)v4 + v27);
    v29 = (uint64_t *)((char *)a2 + v27);
    v30 = (int *)type metadata accessor for Game(0);
    v31 = *((_QWORD *)v30 - 1);
    v32 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v31 + 48);
    swift_retain(v26);
    if (v32(v29, 1, v30))
    {
      v33 = sub_100003304(&qword_10010CA78);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      v35 = v29[1];
      *v28 = *v29;
      v28[1] = v35;
      v36 = v29[3];
      v28[2] = v29[2];
      v28[3] = v36;
      v37 = v29[5];
      v28[4] = v29[4];
      v28[5] = v37;
      v38 = v30[7];
      __dst = (char *)v28 + v38;
      v76 = (char *)v29 + v38;
      v78 = v31;
      v39 = type metadata accessor for Date(0);
      v40 = *(_QWORD *)(v39 - 8);
      v74 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48);
      swift_bridgeObjectRetain(v35);
      swift_bridgeObjectRetain(v36);
      swift_bridgeObjectRetain(v37);
      if (v74(v76, 1, v39))
      {
        v41 = sub_100003304(&qword_10010CC10);
        memcpy(__dst, v76, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v40 + 16))(__dst, v76, v39);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(__dst, 0, 1, v39);
      }
      *(_QWORD *)((char *)v28 + v30[8]) = *(_QWORD *)((char *)v29 + v30[8]);
      *((_BYTE *)v28 + v30[9]) = *((_BYTE *)v29 + v30[9]);
      *((_BYTE *)v28 + v30[10]) = *((_BYTE *)v29 + v30[10]);
      *((_BYTE *)v28 + v30[11]) = *((_BYTE *)v29 + v30[11]);
      *((_BYTE *)v28 + v30[12]) = *((_BYTE *)v29 + v30[12]);
      *((_BYTE *)v28 + v30[13]) = *((_BYTE *)v29 + v30[13]);
      *((_BYTE *)v28 + v30[14]) = *((_BYTE *)v29 + v30[14]);
      v42 = v30[15];
      v43 = (_QWORD *)((char *)v28 + v42);
      v44 = (_QWORD *)((char *)v29 + v42);
      v45 = v44[1];
      *v43 = *v44;
      v43[1] = v45;
      v46 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v78 + 56);
      swift_bridgeObjectRetain(v45);
      v46(v28, 0, 1, v30);
      v18 = a3;
    }
    v47 = v18[17];
    v48 = (char *)v4 + v47;
    v49 = (uint64_t)a2 + v47;
    v50 = type metadata accessor for PageID(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v48, v49, v50);
    v51 = (int *)type metadata accessor for AccessPointContainer(0);
    v52 = v51[5];
    v53 = &v48[v52];
    v54 = v49 + v52;
    v55 = type metadata accessor for PageMetrics(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(v53, v54, v55);
    v48[v51[6]] = *(_BYTE *)(v49 + v51[6]);
    v56 = v51[7];
    v57 = *(_QWORD *)(v49 + v56);
    *(_QWORD *)&v48[v56] = v57;
    v58 = v18[18];
    v59 = v18[19];
    v60 = *(uint64_t *)((char *)a2 + v58);
    *(_QWORD *)((char *)v4 + v58) = v60;
    v61 = *(uint64_t *)((char *)a2 + v59);
    *(_QWORD *)((char *)v4 + v59) = v61;
    v62 = v18[20];
    v63 = (_QWORD *)((char *)v4 + v62);
    v64 = (uint64_t)a2 + v62;
    v65 = *(uint64_t *)((char *)a2 + v62);
    v66 = *(_QWORD *)(v64 + 8);
    *v63 = v65;
    v63[1] = v66;
    swift_bridgeObjectRetain(v57);
    swift_retain(v60);
    swift_retain(v61);
    swift_retain(v65);
    swift_retain(v66);
    v67 = *(int *)(sub_100003304(&qword_10010CC18) + 32);
    v68 = (char *)v63 + v67;
    v69 = v64 + v67;
    v70 = sub_100003304(&qword_10010CC20);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 16))(v68, v69, v70);
  }
  return v4;
}

uint64_t sub_100026860(_QWORD *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  void (*v6)(char *, uint64_t);
  uint64_t v7;
  __n128 v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;

  swift_release(a1[1]);
  swift_release(a1[6]);
  swift_release(a1[8]);
  swift_release(a1[10]);
  swift_release(a1[12]);
  swift_release(a1[15]);
  swift_release(a1[17]);
  v4 = (char *)a1 + a2[14];
  v5 = type metadata accessor for AccessPointAnchoring(0);
  v6 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v7 = sub_100003304(&qword_10010CC08);
  v8 = swift_release(*(_QWORD *)&v4[*(int *)(v7 + 28)]);
  v9 = (char *)a1 + a2[15];
  ((void (*)(char *, uint64_t, __n128))v6)(v9, v5, v8);
  swift_release(*(_QWORD *)&v9[*(int *)(v7 + 28)]);
  v10 = (_QWORD *)((char *)a1 + a2[16]);
  v11 = type metadata accessor for Game(0);
  if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11))
  {
    swift_bridgeObjectRelease(v10[1]);
    swift_bridgeObjectRelease(v10[3]);
    swift_bridgeObjectRelease(v10[5]);
    v12 = (char *)v10 + *(int *)(v11 + 28);
    v13 = type metadata accessor for Date(0);
    v14 = *(_QWORD *)(v13 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
      (*(void (**)(char *, uint64_t))(v14 + 8))(v12, v13);
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v10 + *(int *)(v11 + 60) + 8));
  }
  v15 = (char *)a1 + a2[17];
  v16 = type metadata accessor for PageID(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  v17 = type metadata accessor for AccessPointContainer(0);
  v18 = &v15[*(int *)(v17 + 20)];
  v19 = type metadata accessor for PageMetrics(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
  swift_bridgeObjectRelease(*(_QWORD *)&v15[*(int *)(v17 + 28)]);
  swift_release(*(_QWORD *)((char *)a1 + a2[18]));
  swift_release(*(_QWORD *)((char *)a1 + a2[19]));
  v20 = (_QWORD *)((char *)a1 + a2[20]);
  swift_release(*v20);
  swift_release(v20[1]);
  v21 = (char *)v20 + *(int *)(sub_100003304(&qword_10010CC18) + 32);
  v22 = sub_100003304(&qword_10010CC20);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
}

uint64_t sub_100026A8C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  int *v29;
  uint64_t v30;
  unsigned int (*v31)(_QWORD *, uint64_t, int *);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  void (*v44)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int (*v70)(char *, uint64_t, uint64_t);
  void (*v71)(uint64_t, char *, uint64_t);
  char *v72;
  char *__dsta;
  char *__dst;
  uint64_t v75;
  uint64_t v76;

  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v7;
  v9 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v9;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v10 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v10;
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v11 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 96) = v11;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  v12 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 120) = v12;
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  v13 = *(_QWORD *)(a2 + 136);
  v14 = a3[14];
  __dsta = (char *)(a2 + v14);
  v75 = a1 + v14;
  *(_QWORD *)(a1 + 136) = v13;
  v15 = type metadata accessor for AccessPointAnchoring(0);
  v71 = *(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
  swift_retain(v5);
  swift_retain(v8);
  swift_retain(v9);
  swift_retain(v10);
  v16 = v11;
  v17 = a3;
  swift_retain(v16);
  swift_retain(v12);
  swift_retain(v13);
  v71(v75, __dsta, v15);
  v18 = sub_100003304(&qword_10010CC08);
  v19 = *(int *)(v18 + 28);
  v20 = *(_QWORD *)&__dsta[v19];
  *(_QWORD *)(v75 + v19) = v20;
  v21 = a3[15];
  v22 = a1 + v21;
  v23 = (char *)(a2 + v21);
  swift_retain(v20);
  v71(v22, v23, v15);
  v24 = *(int *)(v18 + 28);
  v25 = *(_QWORD *)&v23[v24];
  *(_QWORD *)(v22 + v24) = v25;
  v26 = a3[16];
  v27 = (_QWORD *)(a1 + v26);
  v28 = (_QWORD *)(a2 + v26);
  v29 = (int *)type metadata accessor for Game(0);
  v30 = *((_QWORD *)v29 - 1);
  v31 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v30 + 48);
  swift_retain(v25);
  if (v31(v28, 1, v29))
  {
    v32 = sub_100003304(&qword_10010CA78);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    v33 = v28[1];
    *v27 = *v28;
    v27[1] = v33;
    v34 = v28[3];
    v27[2] = v28[2];
    v27[3] = v34;
    v35 = v28[5];
    v27[4] = v28[4];
    v27[5] = v35;
    v36 = v29[7];
    __dst = (char *)v27 + v36;
    v76 = v30;
    v72 = (char *)v28 + v36;
    v37 = type metadata accessor for Date(0);
    v38 = *(_QWORD *)(v37 - 8);
    v70 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRetain(v35);
    if (v70(v72, 1, v37))
    {
      v39 = sub_100003304(&qword_10010CC10);
      memcpy(__dst, v72, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v38 + 16))(__dst, v72, v37);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(__dst, 0, 1, v37);
    }
    *(_QWORD *)((char *)v27 + v29[8]) = *(_QWORD *)((char *)v28 + v29[8]);
    *((_BYTE *)v27 + v29[9]) = *((_BYTE *)v28 + v29[9]);
    *((_BYTE *)v27 + v29[10]) = *((_BYTE *)v28 + v29[10]);
    *((_BYTE *)v27 + v29[11]) = *((_BYTE *)v28 + v29[11]);
    *((_BYTE *)v27 + v29[12]) = *((_BYTE *)v28 + v29[12]);
    *((_BYTE *)v27 + v29[13]) = *((_BYTE *)v28 + v29[13]);
    *((_BYTE *)v27 + v29[14]) = *((_BYTE *)v28 + v29[14]);
    v40 = v29[15];
    v41 = (_QWORD *)((char *)v27 + v40);
    v42 = (_QWORD *)((char *)v28 + v40);
    v43 = v42[1];
    *v41 = *v42;
    v41[1] = v43;
    v44 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v76 + 56);
    swift_bridgeObjectRetain(v43);
    v44(v27, 0, 1, v29);
    v17 = a3;
  }
  v45 = v17[17];
  v46 = a1 + v45;
  v47 = a2 + v45;
  v48 = type metadata accessor for PageID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v46, v47, v48);
  v49 = (int *)type metadata accessor for AccessPointContainer(0);
  v50 = v49[5];
  v51 = v46 + v50;
  v52 = v47 + v50;
  v53 = type metadata accessor for PageMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 16))(v51, v52, v53);
  *(_BYTE *)(v46 + v49[6]) = *(_BYTE *)(v47 + v49[6]);
  v54 = v49[7];
  v55 = *(_QWORD *)(v47 + v54);
  *(_QWORD *)(v46 + v54) = v55;
  v56 = v17[18];
  v57 = v17[19];
  v58 = *(_QWORD *)(a2 + v56);
  *(_QWORD *)(a1 + v56) = v58;
  v59 = *(_QWORD *)(a2 + v57);
  *(_QWORD *)(a1 + v57) = v59;
  v60 = v17[20];
  v61 = (_QWORD *)(a1 + v60);
  v62 = a2 + v60;
  v63 = *(_QWORD *)(a2 + v60);
  v64 = *(_QWORD *)(v62 + 8);
  *v61 = v63;
  v61[1] = v64;
  swift_bridgeObjectRetain(v55);
  swift_retain(v58);
  swift_retain(v59);
  swift_retain(v63);
  swift_retain(v64);
  v65 = *(int *)(sub_100003304(&qword_10010CC18) + 32);
  v66 = (char *)v61 + v65;
  v67 = v62 + v65;
  v68 = sub_100003304(&qword_10010CC20);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 16))(v66, v67, v68);
  return a1;
}

uint64_t sub_100026ECC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  int *v40;
  uint64_t v41;
  uint64_t (*v42)(_QWORD *, uint64_t, int *);
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(char *, uint64_t, uint64_t);
  int v63;
  size_t v64;
  void *v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  void (*v70)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v106;
  unsigned int (*v107)(char *, uint64_t, uint64_t);
  char *v108;
  void *v109;
  char *__dst;
  int *v111;
  int *v112;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_BYTE *)(a2 + 16);
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = v7;
  swift_retain(v6);
  swift_release(v8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_retain(v10);
  swift_release(v9);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 64);
  v12 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v12;
  swift_retain(v12);
  swift_release(v11);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v13 = *(_QWORD *)(a1 + 80);
  v14 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v14;
  swift_retain(v14);
  swift_release(v13);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v15 = *(_QWORD *)(a1 + 96);
  v16 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 96) = v16;
  swift_retain(v16);
  swift_release(v15);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v17 = *(_QWORD *)(a1 + 120);
  v18 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 120) = v18;
  swift_retain(v18);
  swift_release(v17);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  v19 = *(_QWORD *)(a1 + 136);
  v20 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 136) = v20;
  swift_retain(v20);
  swift_release(v19);
  v21 = a3[14];
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = type metadata accessor for AccessPointAnchoring(0);
  v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 24);
  v25(v22, v23, v24);
  v26 = sub_100003304(&qword_10010CC08);
  v27 = *(int *)(v26 + 28);
  v28 = *(_QWORD *)(v22 + v27);
  v29 = *(_QWORD *)(v23 + v27);
  *(_QWORD *)(v22 + v27) = v29;
  swift_retain(v29);
  v30 = swift_release(v28);
  v31 = a3[15];
  v32 = a1 + v31;
  v33 = a2 + v31;
  ((void (*)(uint64_t, uint64_t, uint64_t, __n128))v25)(a1 + v31, a2 + v31, v24, v30);
  v34 = *(int *)(v26 + 28);
  v35 = *(_QWORD *)(v32 + v34);
  v36 = *(_QWORD *)(v33 + v34);
  *(_QWORD *)(v32 + v34) = v36;
  swift_retain(v36);
  swift_release(v35);
  v37 = a3[16];
  v38 = (_QWORD *)(a1 + v37);
  v39 = (_QWORD *)(a2 + v37);
  v40 = (int *)type metadata accessor for Game(0);
  v41 = *((_QWORD *)v40 - 1);
  v42 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v41 + 48);
  LODWORD(v26) = v42(v38, 1, v40);
  v43 = v42(v39, 1, v40);
  if (!(_DWORD)v26)
  {
    if (v43)
    {
      sub_1000106F0((uint64_t)v38, type metadata accessor for Game);
      goto LABEL_7;
    }
    v112 = a3;
    *v38 = *v39;
    v51 = v39[1];
    v52 = v38[1];
    v38[1] = v51;
    swift_bridgeObjectRetain(v51);
    swift_bridgeObjectRelease(v52);
    v38[2] = v39[2];
    v53 = v39[3];
    v54 = v38[3];
    v38[3] = v53;
    swift_bridgeObjectRetain(v53);
    swift_bridgeObjectRelease(v54);
    v38[4] = v39[4];
    v55 = v39[5];
    v56 = v38[5];
    v38[5] = v55;
    swift_bridgeObjectRetain(v55);
    swift_bridgeObjectRelease(v56);
    v57 = v40[7];
    v58 = (char *)v38 + v57;
    v59 = (char *)v39 + v57;
    v60 = type metadata accessor for Date(0);
    v61 = *(_QWORD *)(v60 - 8);
    v62 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v61 + 48);
    v109 = v58;
    LODWORD(v58) = v62(v58, 1, v60);
    v63 = v62(v59, 1, v60);
    if ((_DWORD)v58)
    {
      if (!v63)
      {
        (*(void (**)(void *, char *, uint64_t))(v61 + 16))(v109, v59, v60);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v61 + 56))(v109, 0, 1, v60);
        goto LABEL_18;
      }
      v64 = *(_QWORD *)(*(_QWORD *)(sub_100003304(&qword_10010CC10) - 8) + 64);
      v65 = v109;
    }
    else
    {
      if (!v63)
      {
        (*(void (**)(void *, char *, uint64_t))(v61 + 24))(v109, v59, v60);
        goto LABEL_18;
      }
      (*(void (**)(void *, uint64_t))(v61 + 8))(v109, v60);
      v64 = *(_QWORD *)(*(_QWORD *)(sub_100003304(&qword_10010CC10) - 8) + 64);
      v65 = v109;
    }
    memcpy(v65, v59, v64);
LABEL_18:
    *(_QWORD *)((char *)v38 + v40[8]) = *(_QWORD *)((char *)v39 + v40[8]);
    *((_BYTE *)v38 + v40[9]) = *((_BYTE *)v39 + v40[9]);
    *((_BYTE *)v38 + v40[10]) = *((_BYTE *)v39 + v40[10]);
    *((_BYTE *)v38 + v40[11]) = *((_BYTE *)v39 + v40[11]);
    *((_BYTE *)v38 + v40[12]) = *((_BYTE *)v39 + v40[12]);
    *((_BYTE *)v38 + v40[13]) = *((_BYTE *)v39 + v40[13]);
    *((_BYTE *)v38 + v40[14]) = *((_BYTE *)v39 + v40[14]);
    v71 = v40[15];
    v72 = (_QWORD *)((char *)v38 + v71);
    v73 = (_QWORD *)((char *)v39 + v71);
    *v72 = *v73;
    v74 = v73[1];
    v75 = v72[1];
    v72[1] = v74;
    swift_bridgeObjectRetain(v74);
    swift_bridgeObjectRelease(v75);
    a3 = v112;
    goto LABEL_19;
  }
  if (v43)
  {
LABEL_7:
    v50 = sub_100003304(&qword_10010CA78);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
    goto LABEL_19;
  }
  *v38 = *v39;
  v44 = v39[1];
  v38[1] = v44;
  v38[2] = v39[2];
  v45 = v39[3];
  v38[3] = v45;
  v38[4] = v39[4];
  v46 = v39[5];
  v38[5] = v46;
  v47 = v40[7];
  __dst = (char *)v38 + v47;
  v111 = a3;
  v108 = (char *)v39 + v47;
  v48 = type metadata accessor for Date(0);
  v106 = *(_QWORD *)(v48 - 8);
  v107 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v106 + 48);
  swift_bridgeObjectRetain(v44);
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRetain(v46);
  if (v107(v108, 1, v48))
  {
    v49 = sub_100003304(&qword_10010CC10);
    memcpy(__dst, v108, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v106 + 16))(__dst, v108, v48);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v106 + 56))(__dst, 0, 1, v48);
  }
  a3 = v111;
  *(_QWORD *)((char *)v38 + v40[8]) = *(_QWORD *)((char *)v39 + v40[8]);
  *((_BYTE *)v38 + v40[9]) = *((_BYTE *)v39 + v40[9]);
  *((_BYTE *)v38 + v40[10]) = *((_BYTE *)v39 + v40[10]);
  *((_BYTE *)v38 + v40[11]) = *((_BYTE *)v39 + v40[11]);
  *((_BYTE *)v38 + v40[12]) = *((_BYTE *)v39 + v40[12]);
  *((_BYTE *)v38 + v40[13]) = *((_BYTE *)v39 + v40[13]);
  *((_BYTE *)v38 + v40[14]) = *((_BYTE *)v39 + v40[14]);
  v66 = v40[15];
  v67 = (_QWORD *)((char *)v38 + v66);
  v68 = (_QWORD *)((char *)v39 + v66);
  *v67 = *v68;
  v69 = v68[1];
  v67[1] = v69;
  v70 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v41 + 56);
  swift_bridgeObjectRetain(v69);
  v70(v38, 0, 1, v40);
LABEL_19:
  v76 = a3[17];
  v77 = a1 + v76;
  v78 = a2 + v76;
  v79 = type metadata accessor for PageID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 24))(v77, v78, v79);
  v80 = (int *)type metadata accessor for AccessPointContainer(0);
  v81 = v80[5];
  v82 = v77 + v81;
  v83 = v78 + v81;
  v84 = type metadata accessor for PageMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v84 - 8) + 24))(v82, v83, v84);
  *(_BYTE *)(v77 + v80[6]) = *(_BYTE *)(v78 + v80[6]);
  v85 = v80[7];
  v86 = *(_QWORD *)(v78 + v85);
  v87 = *(_QWORD *)(v77 + v85);
  *(_QWORD *)(v77 + v85) = v86;
  swift_bridgeObjectRetain(v86);
  swift_bridgeObjectRelease(v87);
  v88 = a3[18];
  v89 = *(_QWORD *)(a2 + v88);
  v90 = *(_QWORD *)(a1 + v88);
  *(_QWORD *)(a1 + v88) = v89;
  swift_retain(v89);
  swift_release(v90);
  v91 = a3[19];
  v92 = *(_QWORD *)(a2 + v91);
  v93 = *(_QWORD *)(a1 + v91);
  *(_QWORD *)(a1 + v91) = v92;
  swift_retain(v92);
  swift_release(v93);
  v94 = a3[20];
  v95 = a1 + v94;
  v96 = (uint64_t *)(a2 + v94);
  v97 = *(_QWORD *)(a1 + v94);
  v98 = *v96;
  *(_QWORD *)(a1 + v94) = *v96;
  swift_retain(v98);
  swift_release(v97);
  v99 = v96[1];
  v100 = *(_QWORD *)(v95 + 8);
  *(_QWORD *)(v95 + 8) = v99;
  swift_retain(v99);
  swift_release(v100);
  v101 = *(int *)(sub_100003304(&qword_10010CC18) + 32);
  v102 = v95 + v101;
  v103 = (char *)v96 + v101;
  v104 = sub_100003304(&qword_10010CC20);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v104 - 8) + 24))(v102, v103, v104);
  return a1;
}

uint64_t sub_1000275C4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *__dst;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  v7 = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v7;
  v8 = a3[14];
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  v11 = type metadata accessor for AccessPointAnchoring(0);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32);
  v12(v9, v10, v11);
  v13 = sub_100003304(&qword_10010CC08);
  *(_QWORD *)(v9 + *(int *)(v13 + 28)) = *(_QWORD *)(v10 + *(int *)(v13 + 28));
  v14 = a3[15];
  v15 = a1 + v14;
  v16 = a2 + v14;
  v12(a1 + v14, a2 + v14, v11);
  *(_QWORD *)(v15 + *(int *)(v13 + 28)) = *(_QWORD *)(v16 + *(int *)(v13 + 28));
  v17 = a3[16];
  v18 = (_OWORD *)(a1 + v17);
  v19 = (_OWORD *)(a2 + v17);
  v20 = (int *)type metadata accessor for Game(0);
  v21 = *((_QWORD *)v20 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v21 + 48))(v19, 1, v20))
  {
    v22 = sub_100003304(&qword_10010CA78);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    v23 = v19[1];
    *v18 = *v19;
    v18[1] = v23;
    v18[2] = v19[2];
    v24 = v20[7];
    __dst = (char *)v18 + v24;
    v25 = (char *)v19 + v24;
    v26 = type metadata accessor for Date(0);
    v27 = *(_QWORD *)(v26 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      v28 = sub_100003304(&qword_10010CC10);
      memcpy(__dst, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(__dst, v25, v26);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(__dst, 0, 1, v26);
    }
    *(_QWORD *)((char *)v18 + v20[8]) = *(_QWORD *)((char *)v19 + v20[8]);
    *((_BYTE *)v18 + v20[9]) = *((_BYTE *)v19 + v20[9]);
    *((_BYTE *)v18 + v20[10]) = *((_BYTE *)v19 + v20[10]);
    *((_BYTE *)v18 + v20[11]) = *((_BYTE *)v19 + v20[11]);
    *((_BYTE *)v18 + v20[12]) = *((_BYTE *)v19 + v20[12]);
    *((_BYTE *)v18 + v20[13]) = *((_BYTE *)v19 + v20[13]);
    *((_BYTE *)v18 + v20[14]) = *((_BYTE *)v19 + v20[14]);
    *(_OWORD *)((char *)v18 + v20[15]) = *(_OWORD *)((char *)v19 + v20[15]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v21 + 56))(v18, 0, 1, v20);
  }
  v29 = a3[17];
  v30 = a1 + v29;
  v31 = a2 + v29;
  v32 = type metadata accessor for PageID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v30, v31, v32);
  v33 = (int *)type metadata accessor for AccessPointContainer(0);
  v34 = v33[5];
  v35 = v30 + v34;
  v36 = v31 + v34;
  v37 = type metadata accessor for PageMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v35, v36, v37);
  *(_BYTE *)(v30 + v33[6]) = *(_BYTE *)(v31 + v33[6]);
  *(_QWORD *)(v30 + v33[7]) = *(_QWORD *)(v31 + v33[7]);
  v38 = a3[19];
  *(_QWORD *)(a1 + a3[18]) = *(_QWORD *)(a2 + a3[18]);
  *(_QWORD *)(a1 + v38) = *(_QWORD *)(a2 + v38);
  v39 = a3[20];
  v40 = (_QWORD *)(a1 + v39);
  v41 = a2 + v39;
  v42 = *(_QWORD *)(a2 + v39 + 8);
  *v40 = *(_QWORD *)(a2 + v39);
  v40[1] = v42;
  v43 = *(int *)(sub_100003304(&qword_10010CC18) + 32);
  v44 = (char *)v40 + v43;
  v45 = v41 + v43;
  v46 = sub_100003304(&qword_10010CC20);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 32))(v44, v45, v46);
  return a1;
}

uint64_t sub_100027920(uint64_t a1, uint64_t a2, int *a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  int *v32;
  uint64_t v33;
  uint64_t (*v34)(_QWORD *, uint64_t, int *);
  int v35;
  __int128 v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t (*v53)(char *, uint64_t, uint64_t);
  int v54;
  size_t v55;
  void *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v88;
  char *__dst;
  void *__dsta;

  v6 = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v6;
  swift_release(v7);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_release(v8);
  v9 = *(_QWORD *)(a1 + 64);
  v10 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v10;
  swift_release(v9);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v11 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_release(v11);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v12 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_release(v12);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  v13 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_release(v13);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  v14 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_release(v14);
  v15 = a3[14];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for AccessPointAnchoring(0);
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40);
  v19(v16, v17, v18);
  v20 = sub_100003304(&qword_10010CC08);
  v21 = *(int *)(v20 + 28);
  v22 = *(_QWORD *)(v16 + v21);
  *(_QWORD *)(v16 + v21) = *(_QWORD *)(v17 + v21);
  v23 = swift_release(v22);
  v24 = a3[15];
  v25 = a1 + v24;
  v26 = a2 + v24;
  ((void (*)(uint64_t, uint64_t, uint64_t, __n128))v19)(a1 + v24, a2 + v24, v18, v23);
  v27 = *(int *)(v20 + 28);
  v28 = *(_QWORD *)(v25 + v27);
  *(_QWORD *)(v25 + v27) = *(_QWORD *)(v26 + v27);
  swift_release(v28);
  v29 = a3[16];
  v30 = (_QWORD *)(a1 + v29);
  v31 = (_QWORD *)(a2 + v29);
  v32 = (int *)type metadata accessor for Game(0);
  v33 = *((_QWORD *)v32 - 1);
  v34 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v33 + 48);
  LODWORD(v20) = v34(v30, 1, v32);
  v35 = v34(v31, 1, v32);
  if (!(_DWORD)v20)
  {
    if (v35)
    {
      sub_1000106F0((uint64_t)v30, type metadata accessor for Game);
      goto LABEL_7;
    }
    v43 = v31[1];
    v44 = v30[1];
    *v30 = *v31;
    v30[1] = v43;
    swift_bridgeObjectRelease(v44);
    v45 = v31[3];
    v46 = v30[3];
    v30[2] = v31[2];
    v30[3] = v45;
    swift_bridgeObjectRelease(v46);
    v47 = v31[5];
    v48 = v30[5];
    v30[4] = v31[4];
    v30[5] = v47;
    swift_bridgeObjectRelease(v48);
    v49 = v32[7];
    v50 = (char *)v30 + v49;
    v51 = (char *)v31 + v49;
    v52 = type metadata accessor for Date(0);
    v88 = *(_QWORD *)(v52 - 8);
    v53 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v88 + 48);
    __dsta = v50;
    LODWORD(v50) = v53(v50, 1, v52);
    v54 = v53(v51, 1, v52);
    if ((_DWORD)v50)
    {
      if (!v54)
      {
        (*(void (**)(void *, char *, uint64_t))(v88 + 32))(__dsta, v51, v52);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v88 + 56))(__dsta, 0, 1, v52);
        goto LABEL_18;
      }
      v55 = *(_QWORD *)(*(_QWORD *)(sub_100003304(&qword_10010CC10) - 8) + 64);
      v56 = __dsta;
    }
    else
    {
      if (!v54)
      {
        (*(void (**)(void *, char *, uint64_t))(v88 + 40))(__dsta, v51, v52);
        goto LABEL_18;
      }
      (*(void (**)(void *, uint64_t))(v88 + 8))(__dsta, v52);
      v55 = *(_QWORD *)(*(_QWORD *)(sub_100003304(&qword_10010CC10) - 8) + 64);
      v56 = __dsta;
    }
    memcpy(v56, v51, v55);
LABEL_18:
    *(_QWORD *)((char *)v30 + v32[8]) = *(_QWORD *)((char *)v31 + v32[8]);
    *((_BYTE *)v30 + v32[9]) = *((_BYTE *)v31 + v32[9]);
    *((_BYTE *)v30 + v32[10]) = *((_BYTE *)v31 + v32[10]);
    *((_BYTE *)v30 + v32[11]) = *((_BYTE *)v31 + v32[11]);
    *((_BYTE *)v30 + v32[12]) = *((_BYTE *)v31 + v32[12]);
    *((_BYTE *)v30 + v32[13]) = *((_BYTE *)v31 + v32[13]);
    *((_BYTE *)v30 + v32[14]) = *((_BYTE *)v31 + v32[14]);
    v57 = v32[15];
    v58 = (_QWORD *)((char *)v30 + v57);
    v59 = (_QWORD *)((char *)v31 + v57);
    v61 = *v59;
    v60 = v59[1];
    v62 = v58[1];
    *v58 = v61;
    v58[1] = v60;
    swift_bridgeObjectRelease(v62);
    goto LABEL_19;
  }
  if (v35)
  {
LABEL_7:
    v42 = sub_100003304(&qword_10010CA78);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    goto LABEL_19;
  }
  v36 = *((_OWORD *)v31 + 1);
  *(_OWORD *)v30 = *(_OWORD *)v31;
  *((_OWORD *)v30 + 1) = v36;
  *((_OWORD *)v30 + 2) = *((_OWORD *)v31 + 2);
  v37 = v32[7];
  __dst = (char *)v30 + v37;
  v38 = (char *)v31 + v37;
  v39 = type metadata accessor for Date(0);
  v40 = *(_QWORD *)(v39 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
  {
    v41 = sub_100003304(&qword_10010CC10);
    memcpy(__dst, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v40 + 32))(__dst, v38, v39);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(__dst, 0, 1, v39);
  }
  *(_QWORD *)((char *)v30 + v32[8]) = *(_QWORD *)((char *)v31 + v32[8]);
  *((_BYTE *)v30 + v32[9]) = *((_BYTE *)v31 + v32[9]);
  *((_BYTE *)v30 + v32[10]) = *((_BYTE *)v31 + v32[10]);
  *((_BYTE *)v30 + v32[11]) = *((_BYTE *)v31 + v32[11]);
  *((_BYTE *)v30 + v32[12]) = *((_BYTE *)v31 + v32[12]);
  *((_BYTE *)v30 + v32[13]) = *((_BYTE *)v31 + v32[13]);
  *((_BYTE *)v30 + v32[14]) = *((_BYTE *)v31 + v32[14]);
  *(_OWORD *)((char *)v30 + v32[15]) = *(_OWORD *)((char *)v31 + v32[15]);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v33 + 56))(v30, 0, 1, v32);
LABEL_19:
  v63 = a3[17];
  v64 = a1 + v63;
  v65 = a2 + v63;
  v66 = type metadata accessor for PageID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 40))(v64, v65, v66);
  v67 = (int *)type metadata accessor for AccessPointContainer(0);
  v68 = v67[5];
  v69 = v64 + v68;
  v70 = v65 + v68;
  v71 = type metadata accessor for PageMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 40))(v69, v70, v71);
  *(_BYTE *)(v64 + v67[6]) = *(_BYTE *)(v65 + v67[6]);
  v72 = v67[7];
  v73 = *(_QWORD *)(v64 + v72);
  *(_QWORD *)(v64 + v72) = *(_QWORD *)(v65 + v72);
  swift_bridgeObjectRelease(v73);
  v74 = a3[18];
  v75 = *(_QWORD *)(a1 + v74);
  *(_QWORD *)(a1 + v74) = *(_QWORD *)(a2 + v74);
  swift_release(v75);
  v76 = a3[19];
  v77 = *(_QWORD *)(a1 + v76);
  *(_QWORD *)(a1 + v76) = *(_QWORD *)(a2 + v76);
  swift_release(v77);
  v78 = a3[20];
  v79 = a1 + v78;
  v80 = a2 + v78;
  v81 = *(_QWORD *)(a1 + v78);
  *(_QWORD *)(a1 + v78) = *(_QWORD *)(a2 + v78);
  swift_release(v81);
  v82 = *(_QWORD *)(v79 + 8);
  *(_QWORD *)(v79 + 8) = *(_QWORD *)(v80 + 8);
  swift_release(v82);
  v83 = *(int *)(sub_100003304(&qword_10010CC18) + 32);
  v84 = v79 + v83;
  v85 = v80 + v83;
  v86 = sub_100003304(&qword_10010CC20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v86 - 8) + 40))(v84, v85, v86);
  return a1;
}

uint64_t sub_100027EE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100027EF0);
}

uint64_t sub_100027EF0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v6 = sub_100003304(&qword_10010CC08);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[14];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = sub_100003304(&qword_10010CA78);
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[16];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v11 = type metadata accessor for AccessPointContainer(0);
  v7 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v9 = a3[17];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = sub_100003304(&qword_10010CC18);
    v7 = *(_QWORD *)(v8 - 8);
    v9 = a3[20];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v12 = *(_QWORD *)(a1 + a3[18]);
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  return (v12 + 1);
}

uint64_t sub_100027FE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100027FF4);
}

uint64_t sub_100027FF4(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v8 = sub_100003304(&qword_10010CC08);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[14];
  }
  else
  {
    v12 = sub_100003304(&qword_10010CA78);
    v9 = *(_QWORD *)(v12 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v12;
      v11 = a4[16];
    }
    else
    {
      result = type metadata accessor for AccessPointContainer(0);
      v9 = *(_QWORD *)(result - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = result;
        v11 = a4[17];
      }
      else
      {
        if (a3 == 0x7FFFFFFF)
        {
          *(_QWORD *)(a1 + a4[18]) = (a2 - 1);
          return result;
        }
        v10 = sub_100003304(&qword_10010CC18);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[20];
      }
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

uint64_t type metadata accessor for AccessPointShaderTransitionView(uint64_t a1)
{
  return sub_100010C88(a1, qword_10010D100, (uint64_t)&nominal type descriptor for AccessPointShaderTransitionView);
}

void sub_1000280FC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[10];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v10[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v10[1] = "\t";
  v10[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v10[3] = (char *)&value witness table for Builtin.Int64 + 64;
  v10[4] = &unk_1000C8A18;
  v10[5] = &unk_1000C8A18;
  v10[6] = &unk_1000C8A18;
  v10[7] = &unk_1000C8A18;
  v10[8] = &unk_1000C8A30;
  v10[9] = &unk_1000C8A18;
  sub_10001DD8C(319, &qword_10010CC90, (uint64_t (*)(uint64_t))&type metadata accessor for AccessPointAnchoring, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for State);
  if (v3 <= 0x3F)
  {
    v11 = *(_QWORD *)(v2 - 8) + 64;
    v12 = v11;
    sub_10001DD8C(319, (unint64_t *)&qword_10010CC98, type metadata accessor for Game, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    if (v5 <= 0x3F)
    {
      v13 = *(_QWORD *)(v4 - 8) + 64;
      v6 = type metadata accessor for AccessPointContainer(319);
      if (v7 <= 0x3F)
      {
        v14 = *(_QWORD *)(v6 - 8) + 64;
        v15 = (char *)&value witness table for Builtin.NativeObject + 64;
        v16 = (char *)&value witness table for Builtin.NativeObject + 64;
        sub_10001DDE4(319);
        if (v9 <= 0x3F)
        {
          v17 = *(_QWORD *)(v8 - 8) + 64;
          swift_initStructMetadata(a1, 256, 17, v10, a1 + 16);
        }
      }
    }
  }
}

uint64_t sub_100028230(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E40E8, 1);
}

uint64_t sub_100028240(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD v21[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_100010ED0(a1, &qword_10010EB20);
    v9 = 7168;
    v10 = *(_QWORD *)(a3 + 16);
    if (v10)
    {
LABEL_3:
      v11 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v10, v8);
      swift_unknownObjectRetain(v10, v13);
      v14 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
      v16 = v15;
      swift_unknownObjectRelease(v10);
      goto LABEL_6;
    }
  }
  else
  {
    v17 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v9 = v17 | 0x1C00;
    v10 = *(_QWORD *)(a3 + 16);
    if (v10)
      goto LABEL_3;
  }
  v14 = 0;
  v16 = 0;
LABEL_6:
  v18 = swift_allocObject(&unk_1000FD700, 32, 7);
  *(_QWORD *)(v18 + 16) = a2;
  *(_QWORD *)(v18 + 24) = a3;
  if (v16 | v14)
  {
    v21[0] = 0;
    v21[1] = 0;
    v19 = v21;
    v21[2] = v14;
    v21[3] = v16;
  }
  else
  {
    v19 = 0;
  }
  return swift_task_create(v9, v19, (char *)&type metadata for () + 8, &unk_10010D1F0, v18);
}

double sub_10002838C@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_1000283E4(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_10010D038, &qword_10010D040).n128_u64[0];
  return result;
}

__n128 sub_1000283E4@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t *a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v33;
  double v34;
  double v35;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __n128 result;
  unsigned int v45;
  unsigned int v46;
  double v47;
  double v48;
  double v49;
  double v50;
  _OWORD v51[7];

  v18 = v17;
  v19 = a9;
  v20 = a17;
  v22 = a14;
  v21 = a15;
  v23 = a12;
  v24 = a10;
  v25 = a2 & 1;
  v26 = a1;
  if ((_DWORD)v25)
    v26 = -INFINITY;
  v27 = a4 & 1;
  v28 = a3;
  if ((_DWORD)v27)
    v28 = v26;
  v29 = a6 & 1;
  v30 = a8 & 1;
  v31 = a5;
  if ((a6 & 1) != 0)
    v31 = v28;
  if (v26 > v28 || v28 > v31)
    goto LABEL_22;
  v33 = a7;
  if ((a8 & 1) != 0)
    v33 = -INFINITY;
  v34 = a10;
  if ((a11 & 1) != 0)
    v34 = v33;
  v35 = a12;
  if ((a13 & 1) != 0)
    v35 = v34;
  if (v33 > v34 || v34 > v35)
  {
LABEL_22:
    v49 = a5;
    v50 = a7;
    v47 = a3;
    v48 = a1;
    v46 = v25;
    v45 = v27;
    v38 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v39 = (void *)static Log.runtimeIssuesLog.getter();
    v40 = v38;
    v19 = a9;
    os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v39, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v27 = v45;
    v22 = a14;
    v21 = a15;
    v25 = v46;
    v24 = a10;
    v23 = a12;
    a3 = v47;
    a1 = v48;
    a5 = v49;
    a7 = v50;
    v20 = a17;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v51, *(_QWORD *)&a1, v25, *(_QWORD *)&a3, v27, *(_QWORD *)&a5, v29, *(_QWORD *)&a7, v30, *(_QWORD *)&v24, a11 & 1, *(_QWORD *)&v23, a13 & 1, v22, v21);
  sub_100010CBC(v18, v19, a16);
  v41 = v19 + *(int *)(sub_100003304(v20) + 36);
  v42 = v51[5];
  *(_OWORD *)(v41 + 64) = v51[4];
  *(_OWORD *)(v41 + 80) = v42;
  *(_OWORD *)(v41 + 96) = v51[6];
  v43 = v51[1];
  *(_OWORD *)v41 = v51[0];
  *(_OWORD *)(v41 + 16) = v43;
  result = (__n128)v51[3];
  *(_OWORD *)(v41 + 32) = v51[2];
  *(__n128 *)(v41 + 48) = result;
  return result;
}

uint64_t sub_1000285B0@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  unsigned int v40;
  double v41;
  double v42;
  double v43;
  double v44;
  _OWORD v45[7];

  v17 = a15;
  v18 = a12;
  v19 = a10;
  v20 = a2 & 1;
  v21 = a1;
  if ((_DWORD)v20)
    v21 = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (v21 > v23 || v23 > v26)
    goto LABEL_22;
  v28 = a7;
  if ((a8 & 1) != 0)
    v28 = -INFINITY;
  v29 = a10;
  if ((a11 & 1) != 0)
    v29 = v28;
  v30 = a12;
  if ((a13 & 1) != 0)
    v30 = v29;
  if (v28 > v29 || v29 > v30)
  {
LABEL_22:
    v44 = a7;
    v42 = a1;
    v43 = a5;
    v41 = a3;
    v40 = v20;
    v32 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v17 = a15;
    v19 = a10;
    v20 = v40;
    a3 = v41;
    a1 = v42;
    a5 = v43;
    v18 = a12;
    a7 = v44;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v45, *(_QWORD *)&a1, v20, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, *(_QWORD *)&a7, v25, *(_QWORD *)&v19, a11 & 1, *(_QWORD *)&v18, a13 & 1, a14, v17);
  v34 = *(_OWORD *)(v15 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v15 + 32);
  *(_OWORD *)(a9 + 48) = v34;
  *(_OWORD *)(a9 + 64) = *(_OWORD *)(v15 + 64);
  v35 = *(_OWORD *)(v15 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v15;
  *(_OWORD *)(a9 + 16) = v35;
  v36 = v45[2];
  *(_OWORD *)(a9 + 136) = v45[3];
  v37 = v45[5];
  *(_OWORD *)(a9 + 152) = v45[4];
  *(_OWORD *)(a9 + 168) = v37;
  *(_OWORD *)(a9 + 184) = v45[6];
  v38 = v45[1];
  *(_OWORD *)(a9 + 88) = v45[0];
  *(_OWORD *)(a9 + 104) = v38;
  *(_BYTE *)(a9 + 80) = *(_BYTE *)(v15 + 80);
  *(_OWORD *)(a9 + 120) = v36;
  return sub_100032C10(v15);
}

uint64_t sub_100028770@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  double v29;
  double v31;
  double v32;
  double v33;
  uint64_t v35;
  void *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  unsigned int v41;
  double v42;
  double v43;
  double v44;
  double v45;
  _OWORD v46[7];

  v18 = a16;
  v19 = a15;
  v20 = a12;
  v21 = a10;
  v22 = a2 & 1;
  v23 = a1;
  if ((_DWORD)v22)
    v23 = -INFINITY;
  v24 = a4 & 1;
  v25 = a3;
  if ((a4 & 1) != 0)
    v25 = v23;
  v26 = a6 & 1;
  v27 = a8 & 1;
  v28 = a11 & 1;
  v29 = a5;
  if ((a6 & 1) != 0)
    v29 = v25;
  if (v23 > v25 || v25 > v29)
    goto LABEL_22;
  v31 = a7;
  if ((a8 & 1) != 0)
    v31 = -INFINITY;
  v32 = a10;
  if ((a11 & 1) != 0)
    v32 = v31;
  v33 = a12;
  if ((a13 & 1) != 0)
    v33 = v32;
  if (v31 > v32 || v32 > v33)
  {
LABEL_22:
    v45 = a7;
    v43 = a3;
    v44 = a5;
    v42 = a1;
    v41 = v22;
    v35 = static os_log_type_t.fault.getter();
    v36 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v35, &_mh_execute_header, v36, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v28 = a11 & 1;
    v19 = a15;
    v22 = v41;
    v21 = a10;
    v20 = a12;
    a1 = v42;
    a3 = v43;
    a5 = v44;
    a7 = v45;
    v18 = a16;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v46, *(_QWORD *)&a1, v22, *(_QWORD *)&a3, v24, *(_QWORD *)&a5, v26, *(_QWORD *)&a7, v27, *(_QWORD *)&v21, v28, *(_QWORD *)&v20, a13 & 1, a14, v19);
  *(_QWORD *)a9 = v18;
  *(_QWORD *)(a9 + 8) = a17;
  v37 = v46[5];
  *(_OWORD *)(a9 + 80) = v46[4];
  *(_OWORD *)(a9 + 96) = v37;
  *(_OWORD *)(a9 + 112) = v46[6];
  v38 = v46[1];
  *(_OWORD *)(a9 + 16) = v46[0];
  *(_OWORD *)(a9 + 32) = v38;
  v39 = v46[3];
  *(_OWORD *)(a9 + 48) = v46[2];
  *(_OWORD *)(a9 + 64) = v39;
  return swift_retain(a17);
}

double sub_10002891C@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_1000283E4(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_10010D458, &qword_10010D460).n128_u64[0];
  return result;
}

uint64_t sub_100028974@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v26;
  void *v27;
  _BYTE v29[4];
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD v41[14];
  _OWORD v42[2];
  _OWORD v43[16];
  char v44;
  char v45;
  char v46;
  _QWORD v47[44];

  v34 = a1;
  v33 = sub_100003304(&qword_10010CB10);
  __chkstk_darwin(v33);
  v2 = &v29[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v32 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v32);
  v4 = &v29[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v31 = static HorizontalAlignment.center.getter(v5);
  sub_100028D1C((uint64_t)v41);
  *(_OWORD *)((char *)&v43[12] + 7) = v41[12];
  *(_OWORD *)((char *)&v43[13] + 7) = v41[13];
  *(_OWORD *)((char *)&v43[14] + 7) = v42[0];
  v43[15] = *(_OWORD *)((char *)v42 + 9);
  *(_OWORD *)((char *)&v43[8] + 7) = v41[8];
  *(_OWORD *)((char *)&v43[9] + 7) = v41[9];
  *(_OWORD *)((char *)&v43[10] + 7) = v41[10];
  *(_OWORD *)((char *)&v43[11] + 7) = v41[11];
  *(_OWORD *)((char *)&v43[4] + 7) = v41[4];
  *(_OWORD *)((char *)&v43[5] + 7) = v41[5];
  *(_OWORD *)((char *)&v43[6] + 7) = v41[6];
  *(_OWORD *)((char *)&v43[7] + 7) = v41[7];
  *(_OWORD *)((char *)v43 + 7) = v41[0];
  *(_OWORD *)((char *)&v43[1] + 7) = v41[1];
  *(_OWORD *)((char *)&v43[2] + 7) = v41[2];
  v44 = 1;
  *(_OWORD *)((char *)&v43[3] + 7) = v41[3];
  v30 = 1;
  v7 = static Alignment.center.getter(v6);
  v9 = _FrameLayout.init(width:height:alignment:)(&v35, 0x4064000000000000, 0, 0x4064000000000000, 0, v7, v8);
  v10 = v35;
  v11 = v37;
  v13 = v39;
  v12 = v40;
  v46 = v36;
  v45 = v38;
  v14 = static Color.white.getter(v9);
  v15 = Color.opacity(_:)(0.5);
  swift_release(v14);
  v17 = static Edge.Set.all.getter(v16);
  *(_OWORD *)((char *)&v47[32] + 1) = v43[15];
  *(_OWORD *)((char *)&v47[26] + 1) = v43[12];
  *(_OWORD *)((char *)&v47[28] + 1) = v43[13];
  *(_OWORD *)((char *)&v47[30] + 1) = v43[14];
  *(_OWORD *)((char *)&v47[18] + 1) = v43[8];
  *(_OWORD *)((char *)&v47[20] + 1) = v43[9];
  *(_OWORD *)((char *)&v47[22] + 1) = v43[10];
  *(_OWORD *)((char *)&v47[24] + 1) = v43[11];
  *(_OWORD *)((char *)&v47[10] + 1) = v43[4];
  *(_OWORD *)((char *)&v47[12] + 1) = v43[5];
  *(_OWORD *)((char *)&v47[14] + 1) = v43[6];
  *(_OWORD *)((char *)&v47[16] + 1) = v43[7];
  *(_OWORD *)((char *)&v47[2] + 1) = v43[0];
  *(_OWORD *)((char *)&v47[4] + 1) = v43[1];
  *(_OWORD *)((char *)&v47[6] + 1) = v43[2];
  v47[0] = v31;
  v47[1] = 0;
  LOBYTE(v47[2]) = v30;
  *(_OWORD *)((char *)&v47[8] + 1) = v43[3];
  v47[35] = v10;
  LOBYTE(v47[36]) = v46;
  v47[37] = v11;
  LOBYTE(v47[38]) = v45;
  v47[39] = v13;
  v47[40] = v12;
  v47[41] = v15;
  LOBYTE(v47[42]) = v17;
  v18 = (char *)v4 + *(int *)(v32 + 20);
  v19 = enum case for RoundedCornerStyle.continuous(_:);
  v20 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v18, v19, v20);
  __asm { FMOV            V0.2D, #20.0 }
  *v4 = _Q0;
  sub_100007878((uint64_t)v4, (uint64_t)v2, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)&v2[*(int *)(v33 + 36)] = 256;
  v26 = sub_100003304(&qword_10010D5C0);
  v27 = v34;
  sub_100010CBC((uint64_t)v2, (uint64_t)v34 + *(int *)(v26 + 36), &qword_10010CB10);
  memcpy(v27, v47, 0x151uLL);
  sub_100034CB0((uint64_t)v47);
  sub_100010ED0((uint64_t)v2, &qword_10010CB10);
  sub_1000106F0((uint64_t)v4, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  return sub_100034D4C((uint64_t)v47);
}

void sub_100028D1C(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 v59;
  uint64_t v60;
  unsigned __int8 v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  _BYTE v65[7];
  _BYTE v66[7];
  char v67;
  _BYTE v68[7];
  char v69;
  _BYTE v70[7];
  char v71;
  _QWORD v72[2];
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  char v80;
  _BYTE v81[136];
  char v82;
  _BYTE v83[7];
  _BYTE v84[7];
  char v85;
  _BYTE v86[7];
  char v87;
  int v88;
  __int16 v89;
  char v90;
  _QWORD v91[2];
  char v92;
  _BYTE v93[7];
  uint64_t v94;
  uint64_t v95;
  char v96;
  _BYTE v97[7];
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  _BYTE v102[7];
  uint64_t v103;
  char v104;
  _BYTE v105[7];
  double v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;

  v2 = type metadata accessor for Image.ResizingMode(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = Image.init(_:bundle:)(0x656461637261, 0xE600000000000000, 0, v4);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for Image.ResizingMode.stretch(_:), v2);
  v57 = Image.resizable(capInsets:resizingMode:)(v6, v7, 0.0, 0.0, 0.0, 0.0);
  v8 = swift_release(v7);
  v9 = (*(uint64_t (**)(char *, uint64_t, __n128))(v3 + 8))(v6, v2, v8);
  v10 = static Alignment.center.getter(v9);
  v12 = _FrameLayout.init(width:height:alignment:)(&v58, 0x404E000000000000, 0, 0x404E000000000000, 0, v10, v11);
  v55 = v60;
  v56 = v58;
  v50 = v61;
  v51 = v59;
  v53 = v63;
  v54 = v62;
  v52 = static Edge.Set.top.getter(v12);
  v13 = EdgeInsets.init(_all:)(20.0);
  v15 = v14;
  v17 = v16;
  v19 = v18;
  v21 = static HorizontalAlignment.center.getter(v20);
  v22 = sub_100029118((uint64_t)v81);
  v48 = *(_QWORD *)&v81[8];
  v49 = *(_QWORD *)v81;
  LOBYTE(v7) = v81[16];
  v23 = *(_QWORD *)&v81[40];
  v46 = *(_QWORD *)&v81[32];
  v47 = *(_QWORD *)&v81[24];
  v24 = v81[48];
  v25 = *(_QWORD *)&v81[56];
  v26 = static Edge.Set.all.getter(v22);
  v27 = EdgeInsets.init(_all:)(10.0);
  *(_DWORD *)v93 = *(_DWORD *)v70;
  *(_DWORD *)&v93[3] = *(_DWORD *)&v70[3];
  *(_DWORD *)v97 = *(_DWORD *)v68;
  *(_DWORD *)&v97[3] = *(_DWORD *)&v68[3];
  *(_DWORD *)&v102[3] = *(_DWORD *)&v66[3];
  *(_DWORD *)v102 = *(_DWORD *)v66;
  *(_DWORD *)&v105[3] = *(_DWORD *)&v65[3];
  *(_DWORD *)v105 = *(_DWORD *)v65;
  DWORD1(v73) = *(_DWORD *)&v70[3];
  *(_DWORD *)((char *)&v73 + 1) = *(_DWORD *)v70;
  HIDWORD(v74) = *(_DWORD *)&v68[3];
  v71 = 1;
  v69 = v7;
  v67 = v24;
  v64 = 0;
  *(_DWORD *)((char *)&v74 + 9) = *(_DWORD *)v68;
  HIDWORD(v76) = *(_DWORD *)&v66[3];
  v72[0] = v21;
  v72[1] = 0;
  LOBYTE(v73) = 1;
  v29 = v48;
  v28 = v49;
  *((_QWORD *)&v73 + 1) = v49;
  *(_QWORD *)&v74 = v48;
  BYTE8(v74) = v7;
  v30 = v46;
  v31 = v47;
  *(_QWORD *)&v75 = v47;
  *((_QWORD *)&v75 + 1) = v46;
  *(_QWORD *)&v76 = v23;
  BYTE8(v76) = v24;
  *(_DWORD *)((char *)&v76 + 9) = *(_DWORD *)v66;
  *(_QWORD *)&v77 = v25;
  BYTE8(v77) = v26;
  HIDWORD(v77) = *(_DWORD *)&v65[3];
  *(_DWORD *)((char *)&v77 + 9) = *(_DWORD *)v65;
  *(double *)&v78 = v27;
  *((_QWORD *)&v78 + 1) = v32;
  *(_QWORD *)&v79 = v33;
  *((_QWORD *)&v79 + 1) = v34;
  v80 = 0;
  v90 = 1;
  v87 = v51;
  v85 = v50;
  v82 = 0;
  v81[135] = 0;
  *(_OWORD *)&v81[119] = v79;
  *(_OWORD *)&v81[103] = v78;
  *(_OWORD *)&v81[87] = v77;
  *(_OWORD *)&v81[7] = (unint64_t)v21;
  *(_OWORD *)&v81[71] = v76;
  *(_OWORD *)&v81[55] = v75;
  *(_OWORD *)&v81[39] = v74;
  *(_OWORD *)&v81[23] = v73;
  *(_DWORD *)(a1 + 18) = v88;
  *(_WORD *)(a1 + 22) = v89;
  v35 = v87;
  *(_DWORD *)(a1 + 33) = *(_DWORD *)v86;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)&v86[3];
  v36 = v85;
  *(_DWORD *)(a1 + 49) = *(_DWORD *)v84;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)&v84[3];
  *(_DWORD *)(a1 + 73) = *(_DWORD *)v83;
  *(_DWORD *)(a1 + 76) = *(_DWORD *)&v83[3];
  v37 = v82;
  v38 = v57;
  *(_QWORD *)a1 = v57;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  *(_BYTE *)(a1 + 17) = 1;
  *(_QWORD *)(a1 + 24) = v56;
  *(_BYTE *)(a1 + 32) = v35;
  *(_QWORD *)(a1 + 40) = v55;
  *(_BYTE *)(a1 + 48) = v36;
  v39 = v53;
  *(_QWORD *)(a1 + 56) = v54;
  *(_QWORD *)(a1 + 64) = v39;
  *(_BYTE *)(a1 + 72) = v52;
  *(double *)(a1 + 80) = v13;
  *(_QWORD *)(a1 + 88) = v15;
  *(_QWORD *)(a1 + 96) = v17;
  *(_QWORD *)(a1 + 104) = v19;
  *(_BYTE *)(a1 + 112) = v37;
  v40 = *(_OWORD *)&v81[64];
  *(_OWORD *)(a1 + 193) = *(_OWORD *)&v81[80];
  v41 = *(_OWORD *)&v81[112];
  *(_OWORD *)(a1 + 209) = *(_OWORD *)&v81[96];
  *(_OWORD *)(a1 + 225) = v41;
  *(_QWORD *)(a1 + 241) = *(_QWORD *)&v81[128];
  v42 = *(_OWORD *)v81;
  *(_OWORD *)(a1 + 129) = *(_OWORD *)&v81[16];
  v43 = *(_OWORD *)&v81[48];
  *(_OWORD *)(a1 + 145) = *(_OWORD *)&v81[32];
  *(_OWORD *)(a1 + 161) = v43;
  *(_OWORD *)(a1 + 177) = v40;
  *(_OWORD *)(a1 + 113) = v42;
  v91[0] = v21;
  v91[1] = 0;
  v92 = 1;
  v94 = v28;
  v95 = v29;
  v96 = v7;
  v98 = v31;
  v99 = v30;
  v100 = v23;
  v101 = v24;
  v103 = v25;
  v104 = v26;
  v106 = v27;
  v107 = v32;
  v108 = v33;
  v109 = v34;
  v110 = 0;
  v44 = v38;
  swift_retain(v38);
  sub_100034DE8((uint64_t)v72);
  sub_100034E58((uint64_t)v91);
  swift_release(v44);
}

uint64_t sub_100029118@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v2 = LocalizedStringKey.init(stringLiteral:)(0x656C746954, 0xE500000000000000);
  v3 = Text.init(_:tableName:bundle:comment:)(v2);
  v5 = v4;
  v7 = v6;
  v9 = v8 & 1;
  v10 = static Font.headline.getter(v3, v4);
  v11 = Text.font(_:)(v10, v3, v5, v9, v7);
  v34 = v12;
  v35 = v11;
  v14 = v13;
  v36 = v15;
  swift_release(v10);
  v33 = v14 & 1;
  sub_10001B34C(v3, v5, v9);
  swift_bridgeObjectRelease(v7);
  v16 = LocalizedStringKey.init(stringLiteral:)(0x656C746974627553, 0xE800000000000000);
  v17 = Text.init(_:tableName:bundle:comment:)(v16);
  v19 = v18;
  v21 = v20;
  v23 = v22 & 1;
  v24 = static Font.footnote.getter(v17, v18);
  v25 = Text.font(_:)(v24, v17, v19, v23, v21);
  v27 = v26;
  v29 = v28;
  v31 = v30;
  swift_release(v24);
  v29 &= 1u;
  sub_10001B34C(v17, v19, v23);
  swift_bridgeObjectRelease(v21);
  *(_QWORD *)a1 = v35;
  *(_QWORD *)(a1 + 8) = v34;
  *(_BYTE *)(a1 + 16) = v33;
  *(_QWORD *)(a1 + 24) = v36;
  *(_QWORD *)(a1 + 32) = v25;
  *(_QWORD *)(a1 + 40) = v27;
  *(_BYTE *)(a1 + 48) = v29;
  *(_QWORD *)(a1 + 56) = v31;
  sub_10001B35C(v35, v34, v33);
  swift_bridgeObjectRetain(v36);
  sub_10001B35C(v25, v27, v29);
  swift_bridgeObjectRetain(v31);
  sub_10001B34C(v25, v27, v29);
  swift_bridgeObjectRelease(v31);
  sub_10001B34C(v35, v34, v33);
  return swift_bridgeObjectRelease(v36);
}

uint64_t sub_10002930C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  v2 = sub_100003304(&qword_10010D5C0);
  __chkstk_darwin(v2);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v16 - v6;
  __chkstk_darwin(v8);
  v10 = (char *)&v16 - v9;
  __chkstk_darwin(v11);
  v13 = (char *)&v16 - v12;
  sub_100028974((char *)&v16 - v12);
  sub_100028974(v10);
  sub_100010CBC((uint64_t)v13, (uint64_t)v7, &qword_10010D5C0);
  sub_100010CBC((uint64_t)v10, (uint64_t)v4, &qword_10010D5C0);
  sub_100010CBC((uint64_t)v7, a1, &qword_10010D5C0);
  v14 = sub_100003304(&qword_10010D5C8);
  sub_100010CBC((uint64_t)v4, a1 + *(int *)(v14 + 48), &qword_10010D5C0);
  sub_100010ED0((uint64_t)v10, &qword_10010D5C0);
  sub_100010ED0((uint64_t)v13, &qword_10010D5C0);
  sub_100010ED0((uint64_t)v4, &qword_10010D5C0);
  return sub_100010ED0((uint64_t)v7, &qword_10010D5C0);
}

uint64_t sub_10002945C@<X0>(uint64_t *a1@<X2>, uint64_t (*a2)(__n128)@<X3>, uint64_t *a3@<X4>, uint64_t *a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;

  v35 = a5;
  v36 = a4;
  v8 = sub_100003304(a1);
  __chkstk_darwin(v8);
  v34 = (uint64_t)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v33 = (uint64_t)&v33 - v11;
  __chkstk_darwin(v12);
  v14 = (char *)&v33 - v13;
  __chkstk_darwin(v15);
  v17 = (char *)&v33 - v16;
  __chkstk_darwin(v18);
  v20 = (char *)&v33 - v19;
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v33 - v23;
  *(_QWORD *)v24 = a2(v22);
  *((_QWORD *)v24 + 1) = 0;
  v24[16] = 1;
  v25 = sub_100003304(a3);
  v26 = sub_10002930C((uint64_t)&v24[*(int *)(v25 + 44)]);
  *(_QWORD *)v20 = ((uint64_t (*)(uint64_t))a2)(v26);
  *((_QWORD *)v20 + 1) = 0;
  v20[16] = 1;
  v27 = sub_10002930C((uint64_t)&v20[*(int *)(v25 + 44)]);
  *(_QWORD *)v17 = ((uint64_t (*)(uint64_t))a2)(v27);
  *((_QWORD *)v17 + 1) = 0;
  v17[16] = 1;
  sub_10002930C((uint64_t)&v17[*(int *)(v25 + 44)]);
  sub_100010CBC((uint64_t)v24, (uint64_t)v14, a1);
  v28 = v33;
  sub_100010CBC((uint64_t)v20, v33, a1);
  v29 = v34;
  sub_100010CBC((uint64_t)v17, v34, a1);
  v30 = v35;
  sub_100010CBC((uint64_t)v14, v35, a1);
  v31 = sub_100003304(v36);
  sub_100010CBC(v28, v30 + *(int *)(v31 + 48), a1);
  sub_100010CBC(v29, v30 + *(int *)(v31 + 64), a1);
  sub_100010ED0((uint64_t)v17, a1);
  sub_100010ED0((uint64_t)v20, a1);
  sub_100010ED0((uint64_t)v24, a1);
  sub_100010ED0(v29, a1);
  sub_100010ED0(v28, a1);
  return sub_100010ED0((uint64_t)v14, a1);
}

uint64_t sub_1000296B4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;

  v39 = a3;
  v5 = sub_100003304(&qword_10010D4D8);
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = sub_100003304(&qword_10010D4E0);
  __chkstk_darwin(v8);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100003304(&qword_10010D4E8);
  __chkstk_darwin(v11);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100003304(&qword_10010D4F0);
  __chkstk_darwin(v14);
  v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100003304(&qword_10010D4F8);
  __chkstk_darwin(v17);
  v19 = (char *)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v13 = static HorizontalAlignment.center.getter(v20);
  *((_QWORD *)v13 + 1) = 0;
  v13[16] = 1;
  v21 = (uint64_t)&v13[*(int *)(sub_100003304(&qword_10010D500) + 44)];
  *v7 = static Alignment.topTrailing.getter();
  v7[1] = v22;
  v23 = sub_100003304(&qword_10010D508);
  v24 = sub_1000299F0(a1, a2, (uint64_t)v7 + *(int *)(v23 + 44));
  v25 = static Alignment.center.getter(v24);
  sub_1000283E4(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v10, 0.0, 1, INFINITY, 0, v25, v26, &qword_10010D4D8, &qword_10010D4E0);
  sub_100010ED0((uint64_t)v7, &qword_10010D4D8);
  v27 = sub_10001A0AC((uint64_t)v10, v21, &qword_10010D4E0);
  v28 = static Alignment.center.getter(v27);
  sub_1000283E4(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v16, 0.0, 1, INFINITY, 0, v28, v29, &qword_10010D4E8, &qword_10010D4F0);
  v30 = sub_100010ED0((uint64_t)v13, &qword_10010D4E8);
  v31 = static Color.teal.getter(v30);
  LOBYTE(v7) = static Edge.Set.all.getter(v31);
  sub_100010CBC((uint64_t)v16, (uint64_t)v19, &qword_10010D4F0);
  v32 = &v19[*(int *)(v17 + 36)];
  *(_QWORD *)v32 = v31;
  v32[8] = (char)v7;
  v33 = sub_100010ED0((uint64_t)v16, &qword_10010D4F0);
  v34 = static SafeAreaRegions.all.getter(v33);
  LOBYTE(v7) = static Edge.Set.all.getter(v34);
  v35 = v39;
  sub_100010CBC((uint64_t)v19, v39, &qword_10010D4F8);
  v36 = v35 + *(int *)(sub_100003304(&qword_10010D510) + 36);
  *(_QWORD *)v36 = v34;
  *(_BYTE *)(v36 + 8) = (_BYTE)v7;
  return sub_100010ED0((uint64_t)v19, &qword_10010D4F8);
}

uint64_t sub_1000299F0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  char *v31;
  __n128 v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  __n128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(char *, char *, uint64_t);
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(char *, uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  double v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  char v127;
  uint64_t v128;
  uint64_t v129;

  v110 = a2;
  v109 = a1;
  v108 = a3;
  v102 = type metadata accessor for Image.ResizingMode(0);
  v101 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102);
  v100 = (char *)&v97 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = sub_100003304(&qword_10010D518);
  v105 = *(_QWORD *)(v107 - 8);
  __chkstk_darwin(v107);
  v106 = (char *)&v97 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v104 = (char *)&v97 - v6;
  v7 = sub_100003304(&qword_10010D520);
  __chkstk_darwin(v7);
  v9 = (char *)&v97 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = sub_100003304(&qword_10010D528);
  __chkstk_darwin(v99);
  v11 = (char *)&v97 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v97 - v13;
  v98 = sub_100003304(&qword_10010D530);
  __chkstk_darwin(v98);
  v16 = (char *)&v97 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100003304(&qword_10010D538);
  __chkstk_darwin(v17);
  v19 = (char *)&v97 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100003304(&qword_10010D540);
  __chkstk_darwin(v20);
  v22 = (char *)&v97 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v25 = (char *)&v97 - v24;
  v26 = sub_100003304(&qword_10010D548);
  __chkstk_darwin(v26);
  v103 = (uint64_t)&v97 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __chkstk_darwin(v28);
  v31 = (char *)&v97 - v30;
  GeometryProxy.size.getter(v29);
  if (GeometryProxy.size.getter(v32) >= v34)
  {
    *(_QWORD *)v9 = static VerticalAlignment.center.getter(v33);
    *((_QWORD *)v9 + 1) = 0;
    v9[16] = 1;
    v50 = sub_100003304(&qword_10010D550);
    v51 = sub_10002945C(&qword_10010D5D0, (uint64_t (*)(__n128))&static HorizontalAlignment.center.getter, &qword_10010D5D8, &qword_10010D5E0, (uint64_t)&v9[*(int *)(v50 + 44)]);
    v52 = static Edge.Set.top.getter(v51);
    v53 = EdgeInsets.init(_all:)(60.0);
    v55 = v54;
    v57 = v56;
    v59 = v58;
    sub_100010CBC((uint64_t)v9, (uint64_t)v11, &qword_10010D520);
    v60 = v99;
    v61 = &v11[*(int *)(v99 + 36)];
    *v61 = v52;
    *((double *)v61 + 1) = v53;
    *((_QWORD *)v61 + 2) = v55;
    *((_QWORD *)v61 + 3) = v57;
    *((_QWORD *)v61 + 4) = v59;
    v61[40] = 0;
    sub_100010ED0((uint64_t)v9, &qword_10010D520);
    v46 = &qword_10010D528;
    sub_10001A0AC((uint64_t)v11, (uint64_t)v14, &qword_10010D528);
    sub_100010CBC((uint64_t)v14, (uint64_t)v16, &qword_10010D528);
    swift_storeEnumTagMultiPayload(v16, v98, 1);
    v62 = sub_100034B44();
    v63 = sub_100034BC8();
    _ConditionalContent<>.init(storage:)(v16, v20, v60, v62, v63);
    v49 = (uint64_t)v14;
  }
  else
  {
    *(_QWORD *)v19 = static HorizontalAlignment.center.getter(v33);
    *((_QWORD *)v19 + 1) = 0;
    v19[16] = 1;
    v35 = sub_100003304(&qword_10010D5A0);
    v36 = sub_10002945C(&qword_10010D5A8, (uint64_t (*)(__n128))&static VerticalAlignment.center.getter, &qword_10010D5B0, &qword_10010D5B8, (uint64_t)&v19[*(int *)(v35 + 44)]);
    v37 = static Edge.Set.top.getter(v36);
    v38 = EdgeInsets.init(_all:)(100.0);
    v40 = v39;
    v42 = v41;
    v44 = v43;
    sub_100010CBC((uint64_t)v19, (uint64_t)v22, &qword_10010D538);
    v45 = &v22[*(int *)(v20 + 36)];
    *v45 = v37;
    *((double *)v45 + 1) = v38;
    *((_QWORD *)v45 + 2) = v40;
    *((_QWORD *)v45 + 3) = v42;
    *((_QWORD *)v45 + 4) = v44;
    v45[40] = 0;
    sub_100010ED0((uint64_t)v19, &qword_10010D538);
    v46 = &qword_10010D540;
    sub_10001A0AC((uint64_t)v22, (uint64_t)v25, &qword_10010D540);
    sub_100010CBC((uint64_t)v25, (uint64_t)v16, &qword_10010D540);
    swift_storeEnumTagMultiPayload(v16, v98, 0);
    v47 = sub_100034B44();
    v48 = sub_100034BC8();
    _ConditionalContent<>.init(storage:)(v16, v20, v99, v47, v48);
    v49 = (uint64_t)v25;
  }
  sub_100010ED0(v49, v46);
  v64 = Image.init(systemName:)(0xD000000000000011, 0x80000001000CF980);
  v65 = v101;
  v66 = v100;
  v67 = v102;
  (*(void (**)(char *, _QWORD, uint64_t))(v101 + 104))(v100, enum case for Image.ResizingMode.stretch(_:), v102);
  v68 = Image.resizable(capInsets:resizingMode:)(v66, v64, 0.0, 0.0, 0.0, 0.0);
  v69 = swift_release(v64);
  v70 = (*(uint64_t (**)(char *, uint64_t, __n128))(v65 + 8))(v66, v67, v69);
  v71 = static Alignment.center.getter(v70);
  v73 = _FrameLayout.init(width:height:alignment:)(&v124, 0x4046000000000000, 0, 0x4046000000000000, 0, v71, v72);
  v74 = v124;
  LOBYTE(v65) = v125;
  v75 = v126;
  v76 = v127;
  v77 = v128;
  v78 = v129;
  LOBYTE(v64) = static Edge.Set.all.getter(v73);
  v79 = EdgeInsets.init(_all:)(20.0);
  v111 = v68;
  v112 = v74;
  v113 = v65;
  v114 = v75;
  v115 = v76;
  v116 = v77;
  v117 = v78;
  v118 = v64;
  v119 = v79;
  v120 = v80;
  v121 = v81;
  v122 = v82;
  v123 = 0;
  v83 = swift_allocObject(&unk_1000FDAC8, 32, 7);
  *(_QWORD *)(v83 + 16) = v109;
  v84 = v110;
  *(_QWORD *)(v83 + 24) = v110;
  swift_retain(v84);
  v85 = sub_100003304(&qword_10010D578);
  v86 = sub_100034764(&qword_10010D580, &qword_10010D578, (void (*)(void))sub_100034C4C);
  v87 = v104;
  View.onTapGesture(count:perform:)(1, sub_100032F68, v83, v85, v86);
  swift_release(v83);
  swift_release(v111);
  v88 = v103;
  sub_100010CBC((uint64_t)v31, v103, &qword_10010D548);
  v89 = v105;
  v90 = *(void (**)(char *, char *, uint64_t))(v105 + 16);
  v91 = v106;
  v92 = v107;
  v90(v106, v87, v107);
  v93 = v108;
  sub_100010CBC(v88, v108, &qword_10010D548);
  v94 = sub_100003304(&qword_10010D598);
  v90((char *)(v93 + *(int *)(v94 + 48)), v91, v92);
  v95 = *(void (**)(char *, uint64_t))(v89 + 8);
  v95(v87, v92);
  sub_100010ED0((uint64_t)v31, &qword_10010D548);
  v95(v91, v92);
  return sub_100010ED0(v88, &qword_10010D548);
}

uint64_t sub_10002A1AC@<X0>(uint64_t (**a1)@<X0>(uint64_t a1@<X8>)@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *v1;
  v3 = v1[1];
  v5 = swift_allocObject(&unk_1000FDAA0, 32, 7);
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  *a1 = sub_100034B3C;
  a1[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v5;
  return swift_retain(v3);
}

double sub_10002A1FC()
{
  id v0;
  double v1;
  double v2;
  double v3;
  double v5;

  v0 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
  objc_msgSend(v0, "bounds");
  v2 = v1;

  sub_100003304(&qword_10010D240);
  State.wrappedValue.getter(&v5);
  v3 = v5 / v2;
  State.wrappedValue.getter(&v5);
  return v3;
}

void sub_10002A2C8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  _QWORD v35[2];
  __int128 v36;
  uint64_t v37;

  v31 = a4;
  v32 = a5;
  v34 = a2;
  v11 = type metadata accessor for AccessPointAnchoring(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v33 = (char *)v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100003304(&qword_10010CC08);
  __chkstk_darwin(v14);
  v30[1] = (char *)v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)a7 = 0;
  v16 = type metadata accessor for RemoteAlertAccessPointContext(0);
  v17 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  *(_QWORD *)(a7 + 8) = Environment.init<A>(_:)(v16, v16, v17);
  *(_BYTE *)(a7 + 16) = v18 & 1;
  *(_OWORD *)(a7 + 24) = xmmword_1000C89A0;
  LOBYTE(v35[0]) = 0;
  State.init(wrappedValue:)(v35, &type metadata for AccessPointTransitionView.AnimationState);
  v19 = *((_QWORD *)&v36 + 1);
  *(_BYTE *)(a7 + 40) = v36;
  *(_QWORD *)(a7 + 48) = v19;
  v35[0] = 0;
  State.init(wrappedValue:)(v35, &type metadata for Int);
  *(_OWORD *)(a7 + 56) = v36;
  LOBYTE(v35[0]) = 0;
  State.init(wrappedValue:)(v35, &type metadata for Bool);
  v20 = *((_QWORD *)&v36 + 1);
  *(_BYTE *)(a7 + 72) = v36;
  *(_QWORD *)(a7 + 80) = v20;
  LOBYTE(v35[0]) = 0;
  State.init(wrappedValue:)(v35, &type metadata for Bool);
  v21 = *((_QWORD *)&v36 + 1);
  *(_BYTE *)(a7 + 88) = v36;
  *(_QWORD *)(a7 + 96) = v21;
  type metadata accessor for CGPoint(0);
  v35[0] = 0;
  v35[1] = 0;
  State.init(wrappedValue:)(v35, v22);
  v23 = v37;
  *(_OWORD *)(a7 + 104) = v36;
  *(_QWORD *)(a7 + 120) = v23;
  LOBYTE(v35[0]) = 0;
  State.init(wrappedValue:)(v35, &type metadata for Bool);
  v24 = *((_QWORD *)&v36 + 1);
  *(_BYTE *)(a7 + 128) = v36;
  *(_QWORD *)(a7 + 136) = v24;
  v25 = (int *)type metadata accessor for AccessPointShaderTransitionView(0);
  v26 = a7 + v25[16];
  v27 = type metadata accessor for Game(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v26, 1, 1, v27);
  sub_100007878(a1, a7 + v25[17], type metadata accessor for AccessPointContainer);
  sub_100032F94(a3, v26);
  *(_QWORD *)(a7 + v25[18]) = v31;
  *(_QWORD *)(a7 + v25[19]) = v32;
  sub_100010CBC(a6, a7 + v25[20], &qword_10010CC18);
  v28 = a7 + v25[15];
  v31 = v12;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v28, v34, v11);
  v32 = v14;
  *(_QWORD *)(v28 + *(int *)(v14 + 28)) = 0;
  v29 = (char *)sub_10002A5B8
      + 4
      * byte_1000C89C0[*(unsigned __int8 *)(a1 + *(int *)(type metadata accessor for AccessPointContainer(0) + 24))];
  __asm { BR              X10 }
}

uint64_t sub_10002A5B8(uint64_t a1, const char *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;

  swift_bridgeObjectRelease((_TtC13GameOverlayUI20GameOverlayUIService *)0xEF796C6E4F746E69, a2, a3, a4, a5, a6, a7, a8);
  sub_100010ED0(v10, &qword_10010CC18);
  sub_100010ED0(v12, &qword_10010CA78);
  sub_1000106F0(v11, type metadata accessor for AccessPointContainer);
  v15 = *(_QWORD *)(v14 - 144);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 160) + 32);
  v16(v15, *(_QWORD *)(v14 - 136), v9);
  v17 = *(_QWORD *)(v14 - 168);
  *(_QWORD *)(v17 + *(int *)(*(_QWORD *)(v14 - 152) + 28)) = 0;
  v16(v17, v15, v9);
  return sub_10001A0AC(v17, v8 + *(int *)(v13 + 56), &qword_10010CC08);
}

double sub_10002A768()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  double result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t KeyPath;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;

  v1 = v0;
  v2 = type metadata accessor for AccessPointShaderTransitionView(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003304(&qword_10010EB20);
  __chkstk_darwin(v6);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v0 + 48);
  LOBYTE(v30) = *(_BYTE *)(v0 + 40);
  *((_QWORD *)&v30 + 1) = v9;
  sub_100003304(&qword_10010CE10);
  State.wrappedValue.getter(&v29);
  if (!(_BYTE)v29)
  {
    v30 = *(_OWORD *)(v0 + 56);
    sub_100003304(&qword_10010CD58);
    State.wrappedValue.getter(&v29);
    v11 = v29;
    v12 = v1 + *(int *)(v2 + 68);
    if (v11 < *(_QWORD *)(*(_QWORD *)(v12 + *(int *)(type metadata accessor for AccessPointContainer(0) + 28)) + 16))
    {
      v13 = *(_QWORD *)(v1 + 8);
      v14 = *(_BYTE *)(v1 + 16);
      v15 = swift_retain(v13);
      v16 = sub_100031370(v15, v14, 0xD00000000000001DLL, 0x80000001000CF9A0);
      swift_release(v13);
      KeyPath = swift_getKeyPath(&unk_1000C8AE8);
      *(_QWORD *)&v30 = v16;
      v18 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v30, KeyPath, v18);
      swift_release(KeyPath);
      if (*(_BYTE *)(v16 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__active) == 1)
      {
        v19 = swift_getKeyPath(&unk_1000C8B10);
        *(_QWORD *)&v30 = v16;
        ObservationRegistrar.access<A, B>(_:keyPath:)(&v30, v19, v18);
        swift_release(v19);
        v20 = *(_QWORD *)(v16 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__hideCount);
        *(_QWORD *)&result = swift_release(v16).n128_u64[0];
        if (v20 > 0)
          return result;
        v21 = type metadata accessor for TaskPriority(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v8, 1, 1, v21);
        sub_100007878(v1, (uint64_t)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AccessPointShaderTransitionView);
        v22 = type metadata accessor for MainActor(0);
        v23 = static MainActor.shared.getter(v22);
        v24 = *(unsigned __int8 *)(v3 + 80);
        v25 = (v24 + 32) & ~v24;
        v26 = swift_allocObject(&unk_1000FD6D8, v25 + v4, v24 | 7);
        *(_QWORD *)(v26 + 16) = v23;
        *(_QWORD *)(v26 + 24) = &protocol witness table for MainActor;
        sub_100010F0C((uint64_t)v5, v26 + v25, type metadata accessor for AccessPointShaderTransitionView);
        v27 = sub_100028240((uint64_t)v8, (uint64_t)&unk_10010D1E0, v26);
      }
      else
      {
        v27 = v16;
      }
      *(_QWORD *)&result = swift_release(v27).n128_u64[0];
    }
  }
  return result;
}

uint64_t sub_10002AA30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4[5] = a4;
  v5 = type metadata accessor for AccessPointShaderTransitionView(0);
  v4[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[7] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v4[8] = v7;
  v4[9] = swift_task_alloc((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003304(&qword_10010EB20);
  v4[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MainActor(0);
  v4[11] = v9;
  v4[12] = static MainActor.shared.getter(v9);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  v4[13] = v10;
  v4[14] = v11;
  return swift_task_switch(sub_10002AAF0, v10, v11);
}

void sub_10002AAF0()
{
  uint64_t v0;
  double v1;
  unint64_t v2;
  _QWORD *v3;

  *(_OWORD *)(v0 + 16) = *(_OWORD *)(*(_QWORD *)(v0 + 40) + 56);
  sub_100003304(&qword_10010CD58);
  State.wrappedValue.getter((_QWORD *)(v0 + 32));
  v1 = floor(AccessPointContainer.displayDuration(for:)(*(_QWORD *)(v0 + 32)) * 1000000000.0);
  if ((~*(_QWORD *)&v1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v1 <= -1.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v1 < 1.84467441e19)
  {
    v2 = (unint64_t)v1;
    v3 = (_QWORD *)swift_task_alloc(async function pointer to static Task<>.sleep(nanoseconds:)[1]);
    *(_QWORD *)(v0 + 120) = v3;
    *v3 = v0;
    v3[1] = sub_10002ABD0;
    static Task<>.sleep(nanoseconds:)(v2);
    return;
  }
LABEL_7:
  __break(1u);
}

uint64_t sub_10002ABD0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 120));
  if (v0)
  {
    swift_errorRelease(v0);
    v3 = *(_QWORD *)(v2 + 104);
    v4 = *(_QWORD *)(v2 + 112);
    v5 = sub_100034EF4;
  }
  else
  {
    v3 = *(_QWORD *)(v2 + 104);
    v4 = *(_QWORD *)(v2 + 112);
    v5 = sub_10002AC38;
  }
  return swift_task_switch(v5, v3, v4);
}

uint64_t sub_10002AC38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 96));
  v6 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v2, 1, 1, v6);
  v7 = sub_100007878(v5, v1, type metadata accessor for AccessPointShaderTransitionView);
  v8 = static MainActor.shared.getter(v7);
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = swift_allocObject(&unk_1000FD728, v10 + v3, v9 | 7);
  *(_QWORD *)(v11 + 16) = v8;
  *(_QWORD *)(v11 + 24) = &protocol witness table for MainActor;
  sub_100010F0C(v1, v11 + v10, type metadata accessor for AccessPointShaderTransitionView);
  v12 = sub_100028240(v2, (uint64_t)&unk_10010D200, v11);
  swift_release(v12);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002AD38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4[20] = a4;
  v5 = type metadata accessor for AccessPointShaderTransitionView(0);
  v4[21] = v5;
  v4[22] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AccessPointContainer(0);
  v4[23] = v6;
  v4[24] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MainActor(0);
  v4[25] = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  return swift_task_switch(sub_10002ADEC, v8, v9);
}

uint64_t sub_10002ADEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 168);
  swift_release(*(_QWORD *)(v0 + 200));
  v3 = *(_QWORD *)(v1 + *(int *)(v2 + 72));
  KeyPath = swift_getKeyPath(&unk_1000C8A98);
  *(_QWORD *)(v0 + 120) = v3;
  v5 = sub_1000035B4(&qword_10010CE00, type metadata accessor for GameDashboardLaunchContext, (uint64_t)&protocol conformance descriptor for GameDashboardLaunchContext);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 120, KeyPath, v5);
  swift_release(KeyPath);
  swift_beginAccess(v3 + 16, v0 + 16, 0, 0);
  if ((*(_BYTE *)(v3 + 16) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + 160);
    *(_OWORD *)(v0 + 72) = *(_OWORD *)(v6 + 56);
    v8 = *(_QWORD *)(v0 + 184);
    v7 = *(_QWORD *)(v0 + 192);
    v9 = *(_QWORD *)(v0 + 168);
    v10 = sub_100003304(&qword_10010CD58);
    State.wrappedValue.getter((_QWORD *)(v0 + 128));
    v11 = *(_QWORD *)(v0 + 128);
    v12 = v6 + *(int *)(v9 + 68);
    sub_100007878(v12, v7, type metadata accessor for AccessPointContainer);
    v13 = *(_QWORD *)(v7 + *(int *)(v8 + 28));
    swift_bridgeObjectRetain(v13);
    sub_1000106F0(v7, type metadata accessor for AccessPointContainer);
    v14 = *(_QWORD *)(v13 + 16);
    swift_bridgeObjectRelease(v13);
    if (v11 >= v14 - 1)
    {
      v23 = *(unsigned __int8 *)(v12 + *(int *)(*(_QWORD *)(v0 + 184) + 24));
      if (v23 >= 6)
        v24 = 1;
      else
        v24 = 0x20202010102uLL >> (8 * v23);
      v25 = *(_QWORD *)(v0 + 160);
      v26 = *(_BYTE *)(v25 + 40);
      v27 = *(_QWORD *)(v25 + 48);
      *(_BYTE *)(v0 + 88) = v26;
      *(_QWORD *)(v0 + 96) = v27;
      *(_BYTE *)(v0 + 208) = v24;
      v28 = sub_100003304(&qword_10010CE10);
      State.wrappedValue.setter(v0 + 208, v28);
    }
    else
    {
      v31 = v9;
      v16 = *(_QWORD *)(v6 + 56);
      v15 = *(_QWORD *)(v6 + 64);
      *(_QWORD *)(v0 + 104) = v16;
      *(_QWORD *)(v0 + 112) = v15;
      swift_retain(v15);
      State.wrappedValue.getter((_QWORD *)(v0 + 152));
      v17 = *(_QWORD *)(v0 + 152);
      v18 = __OFADD__(v17, 1);
      v19 = v17 + 1;
      if (v18)
      {
        __break(1u);
        JUMPOUT(0x10002B1F4);
      }
      v20 = *(_QWORD *)(v0 + 176);
      v21 = *(_QWORD *)(v0 + 160);
      *(_QWORD *)(v0 + 56) = v16;
      *(_QWORD *)(v0 + 64) = v15;
      *(_QWORD *)(v0 + 136) = v19;
      State.wrappedValue.setter(v0 + 136, v10);
      swift_release(v15);
      *(_QWORD *)(v0 + 40) = v16;
      *(_QWORD *)(v0 + 48) = v15;
      State.wrappedValue.getter((_QWORD *)(v0 + 144));
      v22 = *(_QWORD *)(v0 + 144);
      sub_100007878(v21, v20, type metadata accessor for AccessPointShaderTransitionView);
      if (v22 == 1)
        __asm { BR              X11 }
      sub_1000106F0(*(_QWORD *)(v0 + 176), type metadata accessor for AccessPointShaderTransitionView);
      sub_10002A768();
    }
  }
  v29 = *(_QWORD *)(v0 + 176);
  swift_task_dealloc(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(v29);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002B20C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v9[2];

  v0 = type metadata accessor for AccessPointAnchoring(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v6 = (_QWORD *)((char *)v9 - v5);
  type metadata accessor for AccessPointShaderTransitionView(0);
  v7 = sub_100003304(&qword_10010CC08);
  State.wrappedValue.getter(v6);
  (*(void (**)(char *, _QWORD *, uint64_t))(v1 + 16))(v3, v6, v0);
  State.wrappedValue.setter(v3, v7);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(v1 + 8))(v6, v0);
}

uint64_t sub_10002B30C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t (**v88)();
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(char *, uint64_t, uint64_t);
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  uint64_t (*v122)(uint64_t);
  uint64_t v123;
  char v124;
  double v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  _OWORD v130[12];
  uint64_t v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  _BYTE v144[32];
  __int128 v145;

  v2 = v1;
  v116 = a1;
  v3 = type metadata accessor for AccessPointAnchoring(0);
  v92 = *(_QWORD *)(v3 - 8);
  v93 = v3;
  __chkstk_darwin(v3);
  v91 = (uint64_t *)((char *)&v90 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v113 = sub_100003304(&qword_10010D368);
  __chkstk_darwin(v113);
  v110 = (char *)&v90 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = sub_100003304(&qword_10010D370);
  __chkstk_darwin(v107);
  v106 = (uint64_t)&v90 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = sub_100003304(&qword_10010CB10);
  __chkstk_darwin(v104);
  v103 = (uint64_t)&v90 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v99);
  v96 = (char *)&v90 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = sub_100003304(&qword_10010CE78);
  __chkstk_darwin(v101);
  v100 = (uint64_t *)((char *)&v90 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v90 = type metadata accessor for AccessPointShaderTransitionView(0);
  v10 = *(_QWORD *)(v90 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v90);
  v12 = (char *)&v90 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = sub_100003304(&qword_10010D378);
  __chkstk_darwin(v102);
  v14 = (_OWORD *)((char *)&v90 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v105 = sub_100003304(&qword_10010D380);
  __chkstk_darwin(v105);
  v97 = (char *)&v90 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = sub_100003304(&qword_10010D388);
  __chkstk_darwin(v112);
  v114 = (uint64_t)&v90 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = static HorizontalAlignment.center.getter(v17);
  sub_100007878(v1, (uint64_t)v12, type metadata accessor for AccessPointShaderTransitionView);
  v19 = *(unsigned __int8 *)(v10 + 80);
  v20 = (v19 + 16) & ~v19;
  v108 = v19 | 7;
  v109 = v20 + v11;
  v21 = swift_allocObject(&unk_1000FD8E0, v20 + v11, v19 | 7);
  v111 = v20;
  v115 = v12;
  v22 = sub_100010F0C((uint64_t)v12, v21 + v20, type metadata accessor for AccessPointShaderTransitionView);
  v23 = static Edge.Set.all.getter(v22);
  v24 = EdgeInsets.init(_all:)(8.0);
  v119 = v18;
  v120 = 0;
  v121 = 0;
  v122 = sub_100032AD0;
  v123 = v21;
  v124 = v23;
  v125 = v24;
  v126 = v25;
  v127 = v26;
  v128 = v27;
  v129 = 0;
  v28 = *(double *)(v2 + 24);
  v30 = static Alignment.center.getter(v29);
  sub_1000285B0(0.0, 1, 0.0, 1, v28, 0, 0.0, 1, (uint64_t)v130, 0.0, 1, 0.0, 1, v30, v31);
  swift_release(v21);
  v98 = v2;
  v32 = *(_QWORD *)(v2 + 48);
  BYTE1(v117) = *(_BYTE *)(v2 + 40);
  LOBYTE(v20) = BYTE1(v117);
  v118 = v32;
  sub_100003304(&qword_10010CE10);
  State.projectedValue.getter(&v132);
  v33 = v132;
  LOBYTE(v2) = v133;
  LOBYTE(v132) = v20;
  *((_QWORD *)&v132 + 1) = v32;
  State.wrappedValue.getter((uint64_t *)((char *)&v117 + 1));
  BYTE1(v117) = BYTE1(v117) == 1;
  v34 = State.init(wrappedValue:)((char *)&v117 + 1, &type metadata for Bool);
  v35 = v132;
  v36 = *((_QWORD *)&v132 + 1);
  v142 = v130[10];
  v143 = v130[11];
  v138 = v130[6];
  v139 = v130[7];
  v140 = v130[8];
  v141 = v130[9];
  v134 = v130[2];
  v135 = v130[3];
  v136 = v130[4];
  v137 = v130[5];
  v132 = v130[0];
  v133 = v130[1];
  *(_QWORD *)v144 = v131;
  *(_OWORD *)&v144[8] = v33;
  v144[24] = v2;
  LOBYTE(v145) = v35;
  *((_QWORD *)&v145 + 1) = v36;
  v37 = static Color.clear.getter(v34);
  v38 = static Alignment.center.getter(v37);
  v40 = v39;
  v41 = v96;
  v42 = &v96[*(int *)(v99 + 20)];
  v43 = enum case for RoundedCornerStyle.continuous(_:);
  LODWORD(v99) = enum case for RoundedCornerStyle.continuous(_:);
  v44 = type metadata accessor for RoundedCornerStyle(0);
  v94 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 104);
  v95 = v44;
  v94(v42, v43, v44);
  __asm { FMOV            V0.2D, #30.0 }
  *v41 = _Q0;
  v50 = v103;
  sub_100007878((uint64_t)v41, v103, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v50 + *(int *)(v104 + 36)) = 256;
  v51 = v100;
  sub_100010CBC(v50, (uint64_t)v100 + *(int *)(v101 + 36), &qword_10010CB10);
  *v51 = v37;
  v51[1] = v38;
  v51[2] = v40;
  swift_retain(v37);
  sub_100010ED0(v50, &qword_10010CB10);
  sub_1000106F0((uint64_t)v41, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  swift_release(v37);
  v53 = static Alignment.center.getter(v52);
  v55 = v54;
  v56 = v106;
  sub_100010CBC((uint64_t)v51, v106, &qword_10010CE78);
  v57 = (uint64_t *)(v56 + *(int *)(v107 + 36));
  *v57 = v53;
  v57[1] = v55;
  v58 = (uint64_t)v97;
  sub_100010CBC(v56, (uint64_t)v14 + *(int *)(v102 + 36), &qword_10010D370);
  v59 = *(_OWORD *)&v144[16];
  v14[12] = *(_OWORD *)v144;
  v14[13] = v59;
  v14[14] = v145;
  v60 = v141;
  v14[8] = v140;
  v14[9] = v60;
  v61 = v143;
  v14[10] = v142;
  v14[11] = v61;
  v62 = v137;
  v14[4] = v136;
  v14[5] = v62;
  v63 = v139;
  v14[6] = v138;
  v14[7] = v63;
  v64 = v133;
  *v14 = v132;
  v14[1] = v64;
  v65 = v135;
  v14[2] = v134;
  v14[3] = v65;
  sub_100032AE4(&v132);
  sub_100010ED0(v56, &qword_10010D370);
  sub_100010ED0((uint64_t)v51, &qword_10010CE78);
  sub_100032B34(&v132);
  v66 = (uint64_t)v110;
  v67 = ((uint64_t (*)(char *, _QWORD, uint64_t))v94)(v110, v99, v95);
  v68 = static Color.accentColor.getter(v67);
  v69 = v113;
  *(_QWORD *)(v66 + *(int *)(v113 + 52)) = v68;
  *(_QWORD *)(v66 + *(int *)(v69 + 56)) = 0x4010000000000000;
  sub_100010CBC(v66, v58, &qword_10010D368);
  v70 = v105;
  v71 = sub_100010CBC((uint64_t)v14, v58 + *(int *)(v105 + 36), &qword_10010D378);
  v72 = v70;
  v73 = v58 + *(int *)(v70 + 40);
  *(_BYTE *)v73 = FocusState.init<>()(v71) & 1;
  *(_QWORD *)(v73 + 8) = v74;
  *(_BYTE *)(v73 + 16) = v75 & 1;
  v76 = v58 + *(int *)(v72 + 44);
  *(_QWORD *)v76 = swift_getKeyPath(&unk_1000C8B90);
  *(_BYTE *)(v76 + 8) = 0;
  sub_100010ED0(v66, &qword_10010D368);
  v77 = (uint64_t)v14;
  v78 = v98;
  sub_100010ED0(v77, &qword_10010D378);
  v79 = *(_QWORD *)(v78 + 136);
  BYTE1(v117) = *(_BYTE *)(v78 + 128);
  v118 = v79;
  sub_100003304(&qword_10010CDA0);
  State.wrappedValue.getter(&v117);
  v80 = 0.0;
  if ((v117 & 1) == 0)
  {
    sub_100003304(&qword_10010CC08);
    v81 = v91;
    v82 = State.wrappedValue.getter(v91);
    if ((AccessPointAnchoring.bottom.getter(v82) & 1) != 0)
      v80 = 200.0;
    else
      v80 = -200.0;
    (*(void (**)(_QWORD *, uint64_t))(v92 + 8))(v81, v93);
  }
  v83 = v114;
  sub_100010CBC(v58, v114, &qword_10010D380);
  v84 = v83 + *(int *)(v112 + 36);
  *(_QWORD *)v84 = 0;
  *(double *)(v84 + 8) = v80;
  sub_100010ED0(v58, &qword_10010D380);
  v85 = (uint64_t)v115;
  sub_100007878(v78, (uint64_t)v115, type metadata accessor for AccessPointShaderTransitionView);
  v86 = swift_allocObject(&unk_1000FD908, v109, v108);
  sub_100010F0C(v85, v86 + v111, type metadata accessor for AccessPointShaderTransitionView);
  v87 = v116;
  sub_100010CBC(v83, v116, &qword_10010D388);
  v88 = (uint64_t (**)())(v87 + *(int *)(sub_100003304(&qword_10010D320) + 36));
  *v88 = sub_100032B90;
  v88[1] = (uint64_t (*)())v86;
  v88[2] = 0;
  v88[3] = 0;
  return sub_100010ED0(v83, &qword_10010D388);
}

uint64_t sub_10002BB58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[2];
  __int128 v61;
  uint64_t v62;

  v52 = a1;
  v59 = a3;
  v4 = type metadata accessor for AccessPointShaderTransitionView(0);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64);
  v53 = *(_QWORD *)(v4 - 8);
  v54 = v5;
  v6 = __chkstk_darwin(v4);
  v50 = (uint64_t)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = type metadata accessor for GeometryProxy(0, v6);
  v8 = *(_QWORD *)(v47 - 8);
  v49 = *(_QWORD *)(v8 + 64);
  v9 = __chkstk_darwin(v47);
  v46 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for TapGesture(0, v9);
  v12 = *(_QWORD *)(v11 - 8);
  v55 = v11;
  v56 = v12;
  __chkstk_darwin(v11);
  v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100003304(&qword_10010D390);
  v16 = *(_QWORD *)(v15 - 8);
  v57 = v15;
  v58 = v16;
  __chkstk_darwin(v15);
  v51 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for AccessPointContentView(0);
  __chkstk_darwin(v18);
  v20 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007878(a2 + *(int *)(v4 + 68), (uint64_t)v20, type metadata accessor for AccessPointContainer);
  v22 = *(_QWORD *)(a2 + 64);
  v60[0] = *(_QWORD *)(a2 + 56);
  v21 = v60[0];
  v60[1] = v22;
  sub_100003304(&qword_10010CD58);
  State.projectedValue.getter(&v61);
  v45 = v61;
  v23 = v62;
  *(_QWORD *)&v61 = v21;
  *((_QWORD *)&v61 + 1) = v22;
  State.wrappedValue.getter(v60);
  v48 = v18;
  v24 = &v20[*(int *)(v18 + 20)];
  *(_OWORD *)v24 = v45;
  *((_QWORD *)v24 + 2) = v23;
  v25 = *(int *)(v18 + 24);
  State.init(wrappedValue:)(v60, &type metadata for Int);
  *(_OWORD *)&v20[v25] = v61;
  TapGesture.init(count:)(1);
  v26 = v46;
  v27 = v47;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v46, v52, v47);
  v28 = v50;
  sub_100007878(a2, v50, type metadata accessor for AccessPointShaderTransitionView);
  v29 = *(unsigned __int8 *)(v8 + 80);
  v30 = (v29 + 16) & ~v29;
  v31 = *(unsigned __int8 *)(v53 + 80);
  v32 = (v49 + v31 + v30) & ~v31;
  v33 = swift_allocObject(&unk_1000FD930, v32 + v54, v29 | v31 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v33 + v30, v26, v27);
  sub_100010F0C(v28, v33 + v32, type metadata accessor for AccessPointShaderTransitionView);
  v34 = swift_allocObject(&unk_1000FD958, 32, 7);
  *(_QWORD *)(v34 + 16) = sub_100032F08;
  *(_QWORD *)(v34 + 24) = v33;
  v35 = v51;
  v36 = v55;
  Gesture.onEnded(_:)(sub_100032F68, v34, v55, &protocol witness table for TapGesture);
  v37 = swift_release(v34);
  v38 = (*(uint64_t (**)(char *, uint64_t, __n128))(v56 + 8))(v14, v36, v37);
  v39 = static GestureMask.all.getter(v38);
  v40 = sub_1000035B4(&qword_10010D398, type metadata accessor for AccessPointContentView, (uint64_t)&unk_1000C87B8);
  v41 = sub_100011054(&qword_10010D3A0, &qword_10010D390, (uint64_t)&protocol conformance descriptor for _EndedGesture<A>);
  v42 = v39;
  v43 = v57;
  View.simultaneousGesture<A>(_:including:)(v35, v42, v48, v57, v40, v41);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v35, v43);
  return sub_1000106F0((uint64_t)v20, type metadata accessor for AccessPointContentView);
}

uint64_t sub_10002BF0C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  CGFloat MidX;
  CGFloat MidY;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];
  __int128 v21;
  uint64_t v22;
  CGRect v23;
  CGRect v24;

  v3 = type metadata accessor for GlobalCoordinateSpace(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static CoordinateSpaceProtocol<>.global.getter(v7);
  v8 = GeometryProxy.frame<A>(in:)(v6, v3, &protocol witness table for GlobalCoordinateSpace);
  v10 = v9;
  v12 = v11;
  v14 = v13;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v23.origin.x = v8;
  v23.origin.y = v10;
  v23.size.width = v12;
  v23.size.height = v14;
  MidX = CGRectGetMidX(v23);
  v24.origin.x = v8;
  v24.origin.y = v10;
  v24.size.width = v12;
  v24.size.height = v14;
  MidY = CGRectGetMidY(v24);
  v17 = *(_QWORD *)(a2 + 120);
  v21 = *(_OWORD *)(a2 + 104);
  v22 = v17;
  *(CGFloat *)v20 = MidX;
  *(CGFloat *)&v20[1] = MidY;
  v18 = sub_100003304(&qword_10010D240);
  return State.wrappedValue.setter(v20, v18);
}

double sub_10002C02C(uint64_t a1)
{
  uint64_t v2;
  __n128 v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 48);
  v9 = *(_BYTE *)(a1 + 40);
  v10 = v2;
  sub_100003304(&qword_10010CE10);
  State.wrappedValue.getter(&v11);
  if (!(_BYTE)v11)
  {
    v4.n128_u64[0] = 0x3FE6666666666666;
    v3.n128_u64[0] = 0.5;
    v5 = static Animation.spring(response:dampingFraction:blendDuration:)(v3, v4, 0.0);
    __chkstk_darwin(v5);
    v8[2] = a1;
    withAnimation<A>(_:_:)(v6, sub_100032B9C, v8, (char *)&type metadata for () + 8);
    v3.n128_u64[0] = swift_release(v5).n128_u64[0];
  }
  return v3.n128_f64[0];
}

uint64_t sub_10002C0F0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  void (*v23)(_QWORD *, uint64_t);
  uint64_t v24;
  int v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  char v46;
  uint64_t v47;
  int v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v79 = a2;
  v80 = sub_100003304(&qword_10010D2F0);
  __chkstk_darwin(v80);
  v68 = (uint64_t *)((char *)&v67 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v72 = sub_100003304(&qword_10010D2F8);
  __chkstk_darwin(v72);
  v67 = (uint64_t)&v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = sub_100003304(&qword_10010D300);
  __chkstk_darwin(v76);
  v78 = (uint64_t)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = sub_100003304(&qword_10010D308);
  __chkstk_darwin(v69);
  v71 = (uint64_t)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = sub_100003304(&qword_10010D310);
  __chkstk_darwin(v70);
  v8 = (char *)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = sub_100003304(&qword_10010D318);
  __chkstk_darwin(v77);
  v73 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003304(&qword_10010D320);
  __chkstk_darwin(v10);
  v12 = (char *)&v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = sub_100003304(&qword_10010D328);
  __chkstk_darwin(v74);
  v14 = (char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v75 = (uint64_t)&v67 - v16;
  v17 = type metadata accessor for AccessPointAnchoring(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (uint64_t *)((char *)&v67 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = a1;
  type metadata accessor for AccessPointShaderTransitionView(0);
  sub_100003304(&qword_10010CC08);
  v22 = State.wrappedValue.getter(v20);
  LOBYTE(a1) = AccessPointAnchoring.centered.getter(v22);
  v23 = *(void (**)(_QWORD *, uint64_t))(v18 + 8);
  v23(v20, v17);
  if ((a1 & 1) != 0)
  {
    sub_10002B30C((uint64_t)v12);
    v24 = Namespace.wrappedValue.getter(*v21);
    v25 = static MatchedGeometryProperties.frame.getter();
    v26 = static UnitPoint.center.getter();
    v28 = v27;
    sub_100010CBC((uint64_t)v12, (uint64_t)v14, &qword_10010D320);
    v29 = &v14[*(int *)(v74 + 36)];
    *(_QWORD *)v29 = 1936683112;
    *((_QWORD *)v29 + 1) = 0xE400000000000000;
    *((_QWORD *)v29 + 2) = v24;
    *((_DWORD *)v29 + 6) = v25;
    *((double *)v29 + 4) = v26;
    *((_QWORD *)v29 + 5) = v28;
    v29[48] = 1;
    sub_100010ED0((uint64_t)v12, &qword_10010D320);
    v30 = v75;
    sub_10001A0AC((uint64_t)v14, v75, &qword_10010D328);
    sub_100010CBC(v30, (uint64_t)v14, &qword_10010D328);
    *(_QWORD *)v8 = 0;
    v8[8] = 0;
    v31 = sub_100003304(&qword_10010D360);
    sub_100010CBC((uint64_t)v14, (uint64_t)&v8[*(int *)(v31 + 48)], &qword_10010D328);
    v32 = &v8[*(int *)(v31 + 64)];
    *(_QWORD *)v32 = 0;
    v32[8] = 0;
    sub_100010ED0((uint64_t)v14, &qword_10010D328);
    v33 = v71;
    sub_100010CBC((uint64_t)v8, v71, &qword_10010D310);
    swift_storeEnumTagMultiPayload(v33, v69, 0);
    v34 = sub_100011054(&qword_10010D340, &qword_10010D310, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v35 = sub_100011054(&qword_10010D348, &qword_10010D2F8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v36 = (uint64_t)v73;
    _ConditionalContent<>.init(storage:)(v33, v70, v72, v34, v35);
    sub_100010ED0((uint64_t)v8, &qword_10010D310);
    v37 = &qword_10010D318;
    v38 = v78;
    sub_100010CBC(v36, v78, &qword_10010D318);
    swift_storeEnumTagMultiPayload(v38, v76, 0);
    v39 = sub_100032A28();
    v40 = sub_100011054(&qword_10010D350, &qword_10010D2F0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v41 = v80;
    v42 = v38;
    v43 = v77;
    v44 = v39;
  }
  else
  {
    v45 = State.wrappedValue.getter(v20);
    v46 = AccessPointAnchoring.leading.getter(v45);
    v23(v20, v17);
    sub_10002B30C((uint64_t)v12);
    v47 = Namespace.wrappedValue.getter(*v21);
    v48 = static MatchedGeometryProperties.frame.getter();
    v49 = static UnitPoint.center.getter();
    v51 = v50;
    sub_100010CBC((uint64_t)v12, (uint64_t)v14, &qword_10010D320);
    v52 = &v14[*(int *)(v74 + 36)];
    *(_QWORD *)v52 = 1936683112;
    *((_QWORD *)v52 + 1) = 0xE400000000000000;
    *((_QWORD *)v52 + 2) = v47;
    *((_DWORD *)v52 + 6) = v48;
    *((double *)v52 + 4) = v49;
    *((_QWORD *)v52 + 5) = v51;
    v52[48] = 1;
    sub_100010ED0((uint64_t)v12, &qword_10010D320);
    v30 = v75;
    sub_10001A0AC((uint64_t)v14, v75, &qword_10010D328);
    sub_100010CBC(v30, (uint64_t)v14, &qword_10010D328);
    if ((v46 & 1) == 0)
    {
      v61 = (uint64_t)v68;
      *v68 = 0;
      *(_BYTE *)(v61 + 8) = 0;
      v62 = sub_100003304(&qword_10010D330);
      sub_100010CBC((uint64_t)v14, v61 + *(int *)(v62 + 48), &qword_10010D328);
      sub_100010ED0((uint64_t)v14, &qword_10010D328);
      v37 = &qword_10010D2F0;
      v63 = v78;
      sub_100010CBC(v61, v78, &qword_10010D2F0);
      swift_storeEnumTagMultiPayload(v63, v76, 1);
      v64 = sub_100032A28();
      v65 = sub_100011054(&qword_10010D350, &qword_10010D2F0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
      _ConditionalContent<>.init(storage:)(v63, v77, v80, v64, v65);
      v60 = v61;
      goto LABEL_7;
    }
    v53 = v67;
    sub_100010CBC((uint64_t)v14, v67, &qword_10010D328);
    v54 = v53 + *(int *)(sub_100003304(&qword_10010D358) + 48);
    *(_QWORD *)v54 = 0;
    *(_BYTE *)(v54 + 8) = 0;
    sub_100010ED0((uint64_t)v14, &qword_10010D328);
    v55 = v71;
    sub_100010CBC(v53, v71, &qword_10010D2F8);
    swift_storeEnumTagMultiPayload(v55, v69, 1);
    v56 = sub_100011054(&qword_10010D340, &qword_10010D310, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v57 = sub_100011054(&qword_10010D348, &qword_10010D2F8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v36 = (uint64_t)v73;
    _ConditionalContent<>.init(storage:)(v55, v70, v72, v56, v57);
    sub_100010ED0(v53, &qword_10010D2F8);
    v37 = &qword_10010D318;
    v58 = v78;
    sub_100010CBC(v36, v78, &qword_10010D318);
    swift_storeEnumTagMultiPayload(v58, v76, 0);
    v59 = sub_100032A28();
    v40 = sub_100011054(&qword_10010D350, &qword_10010D2F0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v41 = v80;
    v42 = v58;
    v43 = v77;
    v44 = v59;
  }
  _ConditionalContent<>.init(storage:)(v42, v43, v41, v44, v40);
  v60 = v36;
LABEL_7:
  sub_100010ED0(v60, v37);
  return sub_100010ED0(v30, &qword_10010D328);
}

uint64_t sub_10002C890@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  ValueMetadata *v23;
  _QWORD *v24;
  char *v25;
  ValueMetadata *v26;
  ValueMetadata *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t OpaqueTypeConformance2;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t KeyPath;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t, char *, uint64_t);
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  __n128 v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  ValueMetadata *v73;
  ValueMetadata *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  ValueMetadata *v86;
  ValueMetadata *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  __n128 v93;
  uint64_t v94;
  ValueMetadata *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  uint64_t v101;
  __n128 v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  void (*v110)(uint64_t, char *, uint64_t);
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  void (*v130)(char *, uint64_t, uint64_t);
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD v142[4];
  double v143;
  ValueMetadata *v144;
  unint64_t v145;
  unint64_t v146;
  char v147[8];

  v141 = a2;
  v139 = a3;
  v120 = type metadata accessor for GlobalCoordinateSpace(0);
  v119 = *(_QWORD *)(v120 - 8);
  __chkstk_darwin(v120);
  v118 = (char *)&v108 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = type metadata accessor for AccessPointAnchoring(0);
  v116 = *(_QWORD *)(v133 - 8);
  v5 = __chkstk_darwin(v133);
  v115 = (char *)&v108 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = type metadata accessor for GeometryProxy(0, v5);
  v7 = *(_QWORD *)(v134 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v134);
  v127 = (char *)&v108 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AccessPointShaderTransitionView(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v12 = (char *)&v108 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100003304(&qword_10010D248);
  __chkstk_darwin(v13);
  v15 = (char *)&v108 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = sub_100003304(&qword_10010D250);
  __chkstk_darwin(v140);
  v128 = (uint64_t)&v108 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = sub_100003304(&qword_10010D258);
  v117 = *(_QWORD *)(v135 - 8);
  __chkstk_darwin(v135);
  v131 = (char *)&v108 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = sub_100003304(&qword_10010D260);
  v123 = *(_QWORD *)(v137 - 8);
  __chkstk_darwin(v137);
  v122 = (char *)&v108 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = sub_100003304(&qword_10010D268);
  v125 = *(_QWORD *)(v138 - 8);
  __chkstk_darwin(v138);
  v121 = (char *)&v108 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v124 = (char *)&v108 - v21;
  v132 = sub_100003304(&qword_10010D270);
  __chkstk_darwin(v132);
  v136 = (char *)&v108 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *(ValueMetadata **)(a1 + 96);
  LOBYTE(v143) = *(_BYTE *)(a1 + 88);
  v144 = v23;
  sub_100003304(&qword_10010CDA0);
  v24 = State.wrappedValue.getter(v142);
  if (LOBYTE(v142[0]) == 1)
  {
    v25 = v136;
    swift_storeEnumTagMultiPayload(v136, v132, 0);
    type metadata accessor for CGRect(255);
    v27 = v26;
    v28 = sub_1000328D4();
    v29 = sub_1000035B4(&qword_10010CE20, (uint64_t (*)(uint64_t))&type metadata accessor for AccessPointAnchoring, (uint64_t)&protocol conformance descriptor for AccessPointAnchoring);
    v143 = *(double *)&v140;
    v144 = (ValueMetadata *)v133;
    v145 = v28;
    v146 = v29;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v143, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    v31 = sub_1000035B4(&qword_10010CF40, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
    v143 = *(double *)&v135;
    v144 = v27;
    v145 = OpaqueTypeConformance2;
    v146 = v31;
    v32 = swift_getOpaqueTypeConformance2(&v143, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    v33 = sub_10001DF0C();
    v143 = *(double *)&v137;
    v144 = &type metadata for AccessPointTransitionView.AnimationState;
    v145 = v32;
    v146 = v33;
    v34 = swift_getOpaqueTypeConformance2(&v143, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    return _ConditionalContent<>.init(storage:)(v25, &type metadata for EmptyView, v138, &protocol witness table for EmptyView, v34);
  }
  else
  {
    *(_QWORD *)v15 = static HorizontalAlignment.center.getter(v24);
    *((_QWORD *)v15 + 1) = 0;
    v15[16] = 0;
    v36 = sub_100003304(&qword_10010D278);
    sub_10002D418((_QWORD *)a1, (uint64_t)&v15[*(int *)(v36 + 44)]);
    v126 = (uint64_t)&v108 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_100007878(a1, v126, type metadata accessor for AccessPointShaderTransitionView);
    v130 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v37 = v127;
    v38 = v134;
    v130(v127, v141, v134);
    v39 = *(unsigned __int8 *)(v10 + 80);
    v40 = *(unsigned __int8 *)(v7 + 80);
    v41 = (v39 + 16) & ~v39;
    v112 = v41;
    v111 = ((v11 + v40 + v41) & ~v40) + v8;
    v42 = (v11 + v40 + v41) & ~v40;
    v113 = v42;
    v129 = v39 | v40 | 7;
    v43 = swift_allocObject(&unk_1000FD818, v111, v129);
    sub_100010F0C((uint64_t)v12, v43 + v41, type metadata accessor for AccessPointShaderTransitionView);
    v110 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 32);
    v44 = v37;
    v45 = v38;
    v110(v43 + v42, v37, v38);
    v46 = v128;
    sub_100010CBC((uint64_t)v15, v128, &qword_10010D248);
    v47 = (_QWORD *)(v46 + *(int *)(v140 + 36));
    *v47 = sub_10003259C;
    v47[1] = v43;
    v47[2] = 0;
    v47[3] = 0;
    sub_100010ED0((uint64_t)v15, &qword_10010D248);
    v48 = *(_QWORD *)(a1 + 8);
    LOBYTE(v42) = *(_BYTE *)(a1 + 16);
    v49 = swift_retain(v48);
    v50 = sub_100031370(v49, v42, 0xD00000000000001DLL, 0x80000001000CF9A0);
    swift_release(v48);
    KeyPath = swift_getKeyPath(&unk_1000C8AC0);
    v143 = *(double *)&v50;
    v52 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v143, KeyPath, v52);
    swift_release(KeyPath);
    v53 = v50 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__anchoring;
    swift_beginAccess(v50 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__anchoring, v147, 0, 0);
    v54 = v116;
    v55 = v115;
    v56 = v133;
    (*(void (**)(char *, uint64_t, uint64_t))(v116 + 16))(v115, v53, v133);
    swift_release(v50);
    v57 = v126;
    sub_100007878(a1, v126, type metadata accessor for AccessPointShaderTransitionView);
    v58 = v45;
    v130(v44, v141, v45);
    v59 = v111;
    v60 = swift_allocObject(&unk_1000FD840, v111, v129);
    v114 = a1;
    v61 = v112;
    sub_100010F0C(v57, v60 + v112, type metadata accessor for AccessPointShaderTransitionView);
    v62 = v113;
    v63 = v110;
    v110(v60 + v113, v44, v58);
    v64 = sub_1000328D4();
    v108 = v64;
    v109 = sub_1000035B4(&qword_10010CE20, (uint64_t (*)(uint64_t))&type metadata accessor for AccessPointAnchoring, (uint64_t)&protocol conformance descriptor for AccessPointAnchoring);
    v65 = v64;
    v66 = v128;
    View.onChange<A>(of:initial:_:)(v55, 0, sub_10003259C, v60, v140, v56, v65, v109);
    v67 = swift_release(v60);
    (*(void (**)(char *, uint64_t, __n128))(v54 + 8))(v55, v56, v67);
    v68 = sub_100010ED0(v66, &qword_10010D250);
    v69 = v118;
    static CoordinateSpaceProtocol<>.global.getter(v68);
    v70 = v120;
    v71 = v141;
    v72 = GeometryProxy.frame<A>(in:)(v69, v120, &protocol witness table for GlobalCoordinateSpace);
    v74 = v73;
    v76 = v75;
    v78 = v77;
    (*(void (**)(char *, uint64_t))(v119 + 8))(v69, v70);
    v143 = v72;
    v144 = v74;
    v145 = v76;
    v146 = v78;
    v79 = v126;
    sub_100007878(v114, v126, type metadata accessor for AccessPointShaderTransitionView);
    v80 = v127;
    v81 = v71;
    v82 = v134;
    v130(v127, v81, v134);
    v83 = swift_allocObject(&unk_1000FD868, v59, v129);
    sub_100010F0C(v79, v83 + v61, type metadata accessor for AccessPointShaderTransitionView);
    v84 = v80;
    v85 = v82;
    v63(v83 + v62, v80, v82);
    type metadata accessor for CGRect(0);
    v87 = v86;
    v142[0] = v140;
    v142[1] = v56;
    v142[2] = v108;
    v142[3] = v109;
    v88 = swift_getOpaqueTypeConformance2(v142, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    v89 = sub_1000035B4(&qword_10010CF40, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
    v90 = v122;
    v91 = v135;
    v92 = v131;
    View.onChange<A>(of:initial:_:)(&v143, 0, sub_10003259C, v83, v135, v87, v88, v89);
    v93 = swift_release(v83);
    (*(void (**)(char *, uint64_t, __n128))(v117 + 8))(v92, v91, v93);
    v94 = v114;
    v95 = *(ValueMetadata **)(v114 + 48);
    LOBYTE(v143) = *(_BYTE *)(v114 + 40);
    v144 = v95;
    sub_100003304(&qword_10010CE10);
    State.wrappedValue.getter(v142);
    v96 = v126;
    sub_100007878(v94, v126, type metadata accessor for AccessPointShaderTransitionView);
    v130(v84, v141, v85);
    v97 = swift_allocObject(&unk_1000FD890, v111, v129);
    sub_100010F0C(v96, v97 + v112, type metadata accessor for AccessPointShaderTransitionView);
    v110(v97 + v113, v84, v85);
    v143 = *(double *)&v91;
    v144 = v87;
    v145 = v88;
    v146 = v89;
    v98 = swift_getOpaqueTypeConformance2(&v143, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    v99 = sub_10001DF0C();
    v100 = v121;
    v101 = v137;
    View.onChange<A>(of:initial:_:)(v142, 0, sub_10003259C, v97, v137, &type metadata for AccessPointTransitionView.AnimationState, v98, v99);
    v102 = swift_release(v97);
    (*(void (**)(char *, uint64_t, __n128))(v123 + 8))(v90, v101, v102);
    v103 = v125;
    v104 = v124;
    v105 = v138;
    (*(void (**)(char *, char *, uint64_t))(v125 + 32))(v124, v100, v138);
    v106 = v136;
    (*(void (**)(char *, char *, uint64_t))(v103 + 16))(v136, v104, v105);
    swift_storeEnumTagMultiPayload(v106, v132, 1);
    v143 = *(double *)&v101;
    v144 = &type metadata for AccessPointTransitionView.AnimationState;
    v145 = v98;
    v146 = v99;
    v107 = swift_getOpaqueTypeConformance2(&v143, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    _ConditionalContent<>.init(storage:)(v106, &type metadata for EmptyView, v105, &protocol witness table for EmptyView, v107);
    return (*(uint64_t (**)(char *, uint64_t))(v103 + 8))(v104, v105);
  }
}

uint64_t sub_10002D418@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v45 = a2;
  v46 = sub_100003304(&qword_10010D2A0);
  __chkstk_darwin(v46);
  v41 = (uint64_t)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_100003304(&qword_10010D2A8);
  __chkstk_darwin(v42);
  v44 = (uint64_t)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = sub_100003304(&qword_10010D2B0);
  __chkstk_darwin(v43);
  v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003304(&qword_10010D2B8);
  __chkstk_darwin(v7);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003304(&qword_10010D2C0);
  __chkstk_darwin(v10);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v41 - v14;
  v16 = type metadata accessor for AccessPointAnchoring(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (uint64_t *)((char *)&v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for AccessPointShaderTransitionView(0);
  sub_100003304(&qword_10010CC08);
  v20 = State.wrappedValue.getter(v19);
  v21 = AccessPointAnchoring.bottom.getter(v20);
  v22 = (*(uint64_t (**)(_QWORD *, uint64_t))(v17 + 8))(v19, v16);
  *(_QWORD *)v9 = static VerticalAlignment.center.getter(v22);
  *((_QWORD *)v9 + 1) = 0;
  v9[16] = 1;
  v23 = sub_100003304(&qword_10010D2C8);
  sub_10002C0F0(a1, (uint64_t)&v9[*(int *)(v23 + 44)]);
  v24 = Namespace.wrappedValue.getter(*a1);
  LODWORD(v16) = static MatchedGeometryProperties.frame.getter();
  v25 = static UnitPoint.center.getter();
  v27 = v26;
  sub_100010CBC((uint64_t)v9, (uint64_t)v12, &qword_10010D2B8);
  v28 = &v12[*(int *)(v10 + 36)];
  *(_QWORD *)v28 = 1936683126;
  *((_QWORD *)v28 + 1) = 0xE400000000000000;
  *((_QWORD *)v28 + 2) = v24;
  *((_DWORD *)v28 + 6) = v16;
  *((double *)v28 + 4) = v25;
  *((_QWORD *)v28 + 5) = v27;
  v28[48] = 1;
  sub_100010ED0((uint64_t)v9, &qword_10010D2B8);
  sub_10001A0AC((uint64_t)v12, (uint64_t)v15, &qword_10010D2C0);
  sub_100010CBC((uint64_t)v15, (uint64_t)v12, &qword_10010D2C0);
  if ((v21 & 1) != 0)
  {
    *(_QWORD *)v6 = 0;
    v6[8] = 1;
    v29 = sub_100003304(&qword_10010D2E8);
    sub_100010CBC((uint64_t)v12, (uint64_t)&v6[*(int *)(v29 + 48)], &qword_10010D2C0);
    sub_100010ED0((uint64_t)v12, &qword_10010D2C0);
    v30 = &qword_10010D2B0;
    v31 = v44;
    sub_100010CBC((uint64_t)v6, v44, &qword_10010D2B0);
    swift_storeEnumTagMultiPayload(v31, v42, 0);
    v32 = sub_100011054(&qword_10010D2D8, &qword_10010D2B0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v33 = sub_100011054(&qword_10010D2E0, &qword_10010D2A0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    _ConditionalContent<>.init(storage:)(v31, v43, v46, v32, v33);
    v34 = (uint64_t)v6;
  }
  else
  {
    v35 = v41;
    sub_100010CBC((uint64_t)v12, v41, &qword_10010D2C0);
    v36 = v35 + *(int *)(sub_100003304(&qword_10010D2D0) + 48);
    *(_QWORD *)v36 = 0;
    *(_BYTE *)(v36 + 8) = 1;
    sub_100010ED0((uint64_t)v12, &qword_10010D2C0);
    v30 = &qword_10010D2A0;
    v37 = v44;
    sub_100010CBC(v35, v44, &qword_10010D2A0);
    swift_storeEnumTagMultiPayload(v37, v42, 1);
    v38 = sub_100011054(&qword_10010D2D8, &qword_10010D2B0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v39 = sub_100011054(&qword_10010D2E0, &qword_10010D2A0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    _ConditionalContent<>.init(storage:)(v37, v43, v46, v38, v39);
    v34 = v35;
  }
  sub_100010ED0(v34, v30);
  return sub_100010ED0((uint64_t)v15, &qword_10010D2C0);
}

void sub_10002D87C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t Strong;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  CGFloat v26;
  double v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  int v38;
  double MaxX;
  uint64_t v40;
  double v41;
  double v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[2];
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  _QWORD v61[3];
  CGRect v62;
  CGRect v63;
  CGRect v64;

  v2 = v1;
  v55[1] = a1;
  v3 = sub_100003304(&qword_10010EB20);
  __chkstk_darwin(v3);
  v55[0] = (char *)v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AccessPointAnchoring(0);
  v56 = *(_QWORD *)(v5 - 8);
  v57 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for GlobalCoordinateSpace(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v1 + 8);
  v13 = *(_BYTE *)(v1 + 16);
  v14 = swift_retain(v12);
  v15 = sub_100031370(v14, v13, 0xD00000000000001DLL, 0x80000001000CF9A0);
  swift_release(v12);
  KeyPath = swift_getKeyPath(&unk_1000C8B68);
  v61[0] = v15;
  v17 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v61, KeyPath, v17);
  swift_release(KeyPath);
  Strong = swift_unknownObjectWeakLoadStrong(v15 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__remoteTarget);
  swift_release(v15);
  if (!Strong)
    return;
  static CoordinateSpaceProtocol<>.global.getter(v19);
  v20 = GeometryProxy.frame<A>(in:)(v11, v8, &protocol witness table for GlobalCoordinateSpace);
  v22 = v21;
  v24 = v23;
  v26 = v25;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if (*(double *)(v2 + 24) >= v24)
    v27 = v24;
  else
    v27 = *(double *)(v2 + 24);
  v28 = *(_QWORD *)(v2 + 8);
  v29 = *(_BYTE *)(v2 + 16);
  v30 = swift_retain(v28);
  v31 = sub_100031370(v30, v29, 0xD00000000000001DLL, 0x80000001000CF9A0);
  swift_release(v28);
  v32 = swift_getKeyPath(&unk_1000C8AC0);
  v61[0] = v31;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v61, v32, v17);
  swift_release(v32);
  v33 = v31 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__anchoring;
  swift_beginAccess(v31 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__anchoring, v61, 0, 0);
  v34 = v56;
  v35 = v33;
  v36 = v57;
  (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v7, v35, v57);
  v37 = swift_release(v31);
  v38 = (*(uint64_t (**)(char *, uint64_t, __n128))(v34 + 88))(v7, v36, v37);
  if (v38 == enum case for AccessPointAnchoring.topTrailing(_:))
  {
    v62.origin.x = v20;
    v62.origin.y = v22;
    v62.size.width = v24;
    v62.size.height = v26;
    MaxX = CGRectGetMaxX(v62);
    v40 = *(_QWORD *)(v2 + 48);
    v58 = *(_BYTE *)(v2 + 40);
    v59 = v40;
    sub_100003304(&qword_10010CE10);
    State.wrappedValue.getter(&v60);
    v41 = v27;
    if (v60 == 1)
      v41 = *(double *)(v2 + 32);
    v20 = MaxX - v41;
    goto LABEL_16;
  }
  if (v38 != enum case for AccessPointAnchoring.bottomLeading(_:))
  {
    if (v38 != enum case for AccessPointAnchoring.bottomTrailing(_:))
    {
      (*(void (**)(char *, uint64_t))(v34 + 8))(v7, v36);
      goto LABEL_16;
    }
    v63.origin.x = v20;
    v63.origin.y = v22;
    v63.size.width = v24;
    v63.size.height = v26;
    v42 = CGRectGetMaxX(v63);
    v43 = *(_QWORD *)(v2 + 48);
    v58 = *(_BYTE *)(v2 + 40);
    v59 = v43;
    sub_100003304(&qword_10010CE10);
    State.wrappedValue.getter(&v60);
    v44 = v27;
    if (v60 == 1)
      v44 = *(double *)(v2 + 32);
    v20 = v42 - v44;
  }
  v64.origin.x = v20;
  v64.origin.y = v22;
  v64.size.width = v24;
  v64.size.height = v26;
  v22 = CGRectGetMaxY(v64) - *(double *)(v2 + 32);
LABEL_16:
  v45 = v55[0];
  v46 = *(_QWORD *)(v2 + 48);
  v58 = *(_BYTE *)(v2 + 40);
  v59 = v46;
  sub_100003304(&qword_10010CE10);
  State.wrappedValue.getter(&v60);
  v47 = *(_QWORD *)(v2 + 32);
  if (v60 == 1)
    v48 = *(double *)(v2 + 32);
  else
    v48 = v27;
  v49 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v45, 1, 1, v49);
  type metadata accessor for MainActor(0);
  v51 = swift_unknownObjectRetain(Strong, v50);
  v52 = static MainActor.shared.getter(v51);
  v53 = swift_allocObject(&unk_1000FD8B8, 72, 7);
  *(_QWORD *)(v53 + 16) = v52;
  *(_QWORD *)(v53 + 24) = &protocol witness table for MainActor;
  *(_QWORD *)(v53 + 32) = Strong;
  *(double *)(v53 + 40) = v20;
  *(double *)(v53 + 48) = v22;
  *(double *)(v53 + 56) = v48;
  *(_QWORD *)(v53 + 64) = v47;
  v54 = sub_100028240(v45, (uint64_t)&unk_10010D298, v53);
  swift_release(v54);
  swift_unknownObjectRelease(Strong);
}

uint64_t sub_10002DD30@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t KeyPath;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  ValueMetadata *v37;
  uint64_t v38;
  uint64_t OpaqueTypeConformance2;
  unint64_t v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  ValueMetadata *v61;
  uint64_t v62;
  char *v63;
  __n128 v64;
  void (*v65)(char *, ValueMetadata *, __n128);
  uint64_t v66;
  char *v67;
  ValueMetadata *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  __n128 v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v97;
  char *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  char *v124;
  BOOL v125;
  _QWORD v126[3];
  uint64_t v127;
  ValueMetadata *v128;
  unint64_t v129;
  void *v130;
  char v131[8];

  v116 = a1;
  v115 = type metadata accessor for TaskPriority(0);
  v114 = *(_QWORD *)(v115 - 8);
  __chkstk_darwin(v115);
  v113 = (char *)&v97 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = type metadata accessor for AccessPointAnchoring(0);
  v104 = *(_QWORD *)(v105 - 8);
  __chkstk_darwin(v105);
  v103 = (char *)&v97 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for AccessPointShaderTransitionView(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = (char *)&v97 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003304(&qword_10010D178);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v97 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v100 = sub_100003304(&qword_10010D180);
  __chkstk_darwin(v100);
  v12 = (char *)&v97 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = v12;
  v119 = sub_100003304(&qword_10010D188);
  v101 = *(_QWORD *)(v119 - 8);
  __chkstk_darwin(v119);
  v99 = (unint64_t)&v97 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = sub_100003304(&qword_10010D190);
  v102 = *(_QWORD *)(v123 - 8);
  __chkstk_darwin(v123);
  v120 = (char *)&v97 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = sub_100003304(&qword_10010D198);
  v107 = *(_QWORD *)(v108 - 8);
  __chkstk_darwin(v108);
  v124 = (char *)&v97 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = sub_100003304(&qword_10010D1A0);
  v111 = *(_QWORD *)(v112 - 8);
  __chkstk_darwin(v112);
  v110 = (char *)&v97 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = sub_100003304(&qword_10010D1A8);
  v17 = __chkstk_darwin(v106);
  v109 = (char *)&v97 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v10 = static Alignment.topLeading.getter(v17);
  v10[1] = v19;
  v20 = sub_100003304(&qword_10010D1B0);
  sub_10002E7E4(v1, (uint64_t)v10 + *(int *)(v20 + 44));
  v22 = static Alignment.center.getter(v21);
  sub_1000283E4(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v12, 0.0, 1, INFINITY, 0, v22, v23, &qword_10010D178, &qword_10010D180);
  sub_100010ED0((uint64_t)v10, &qword_10010D178);
  v24 = *(_QWORD *)(v1 + *(int *)(v4 + 72));
  v117 = v1;
  KeyPath = swift_getKeyPath(&unk_1000C8A98);
  v127 = v24;
  v26 = sub_1000035B4(&qword_10010CE00, type metadata accessor for GameDashboardLaunchContext, (uint64_t)&protocol conformance descriptor for GameDashboardLaunchContext);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v127, KeyPath, v26);
  swift_release(KeyPath);
  swift_beginAccess(v24 + 16, v131, 0, 0);
  LOBYTE(v127) = *(_BYTE *)(v24 + 16);
  sub_100007878(v1, (uint64_t)v7, type metadata accessor for AccessPointShaderTransitionView);
  v27 = *(unsigned __int8 *)(v5 + 80);
  v28 = (v27 + 16) & ~v27;
  v29 = v28 + v6;
  v30 = v27 | 7;
  v118 = v28 + v6;
  v121 = v27 | 7;
  v31 = swift_allocObject(&unk_1000FD610, v28 + v6, v27 | 7);
  sub_100010F0C((uint64_t)v7, v31 + v28, type metadata accessor for AccessPointShaderTransitionView);
  v32 = sub_100030350();
  v33 = v99;
  v34 = v100;
  v35 = (uint64_t)v98;
  View.onChange<A>(of:initial:_:)(&v127, 0, sub_100030344, v31, v100, &type metadata for Bool, v32, &protocol witness table for Bool);
  swift_release(v31);
  sub_100010ED0(v35, &qword_10010D180);
  v36 = v117;
  v37 = *(ValueMetadata **)(v117 + 48);
  LOBYTE(v127) = *(_BYTE *)(v117 + 40);
  v128 = v37;
  sub_100003304(&qword_10010CE10);
  State.wrappedValue.getter(v126);
  v122 = v7;
  sub_100007878(v36, (uint64_t)v7, type metadata accessor for AccessPointShaderTransitionView);
  v38 = swift_allocObject(&unk_1000FD638, v29, v30);
  sub_100010F0C((uint64_t)v7, v38 + v28, type metadata accessor for AccessPointShaderTransitionView);
  v127 = v34;
  v128 = (ValueMetadata *)&type metadata for Bool;
  v129 = v32;
  v130 = &protocol witness table for Bool;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v127, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v100 = OpaqueTypeConformance2;
  v40 = sub_10001DF0C();
  v41 = v119;
  View.onChange<A>(of:initial:_:)(v126, 0, sub_100030654, v38, v119, &type metadata for AccessPointTransitionView.AnimationState, OpaqueTypeConformance2, v40);
  v42 = swift_release(v38);
  (*(void (**)(unint64_t, uint64_t, __n128))(v101 + 8))(v33, v41, v42);
  v43 = v36;
  v44 = *(_QWORD *)(v36 + 8);
  LOBYTE(v38) = *(_BYTE *)(v36 + 16);
  v45 = swift_retain(v44);
  v99 = 0x80000001000CF9A0;
  v46 = sub_100031370(v45, v38, 0xD00000000000001DLL, 0x80000001000CF9A0);
  swift_release(v44);
  v47 = swift_getKeyPath(&unk_1000C8AC0);
  v127 = v46;
  v48 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v127, v47, v48);
  swift_release(v47);
  v49 = v46 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__anchoring;
  swift_beginAccess(v46 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__anchoring, v126, 0, 0);
  v50 = v104;
  v51 = v103;
  v52 = v49;
  v53 = v105;
  (*(void (**)(char *, uint64_t, uint64_t))(v104 + 16))(v103, v52, v105);
  swift_release(v46);
  v54 = (uint64_t)v122;
  sub_100007878(v43, (uint64_t)v122, type metadata accessor for AccessPointShaderTransitionView);
  v55 = swift_allocObject(&unk_1000FD660, v118, v121);
  v101 = v28;
  v56 = v54;
  v57 = v48;
  sub_100010F0C(v56, v55 + v28, type metadata accessor for AccessPointShaderTransitionView);
  v127 = v119;
  v128 = &type metadata for AccessPointTransitionView.AnimationState;
  v129 = v100;
  v130 = (void *)v40;
  v58 = swift_getOpaqueTypeConformance2(&v127, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v59 = sub_1000035B4(&qword_10010CE20, (uint64_t (*)(uint64_t))&type metadata accessor for AccessPointAnchoring, (uint64_t)&protocol conformance descriptor for AccessPointAnchoring);
  v60 = v123;
  v61 = (ValueMetadata *)v53;
  v62 = v53;
  v119 = v58;
  v100 = v59;
  v63 = v120;
  View.onChange<A>(of:initial:_:)(v51, 0, sub_100030DA4, v55, v123, v62, v58, v59);
  v64 = swift_release(v55);
  v65 = *(void (**)(char *, ValueMetadata *, __n128))(v50 + 8);
  v66 = v117;
  v67 = v51;
  v68 = v61;
  v65(v67, v61, v64);
  (*(void (**)(char *, uint64_t))(v102 + 8))(v63, v60);
  v69 = *(_QWORD *)(v66 + 8);
  LOBYTE(v61) = *(_BYTE *)(v66 + 16);
  v70 = swift_retain(v69);
  v71 = sub_100031370(v70, (char)v61, 0xD00000000000001DLL, v99);
  swift_release(v69);
  v72 = swift_getKeyPath(&unk_1000C8AE8);
  v127 = v71;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v127, v72, v57);
  swift_release(v72);
  if (*(_BYTE *)(v71 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__active) == 1)
  {
    v73 = swift_getKeyPath(&unk_1000C8B10);
    v127 = v71;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v127, v73, v57);
    swift_release(v73);
    v74 = *(_QWORD *)(v71 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__hideCount);
    swift_release(v71);
    v75 = v74 > 0;
  }
  else
  {
    swift_release(v71);
    v75 = 1;
  }
  v125 = v75;
  v76 = (uint64_t)v122;
  sub_100007878(v66, (uint64_t)v122, type metadata accessor for AccessPointShaderTransitionView);
  v77 = v118;
  v78 = v121;
  v79 = swift_allocObject(&unk_1000FD688, v118, v121);
  v80 = v101;
  sub_100010F0C(v76, v79 + v101, type metadata accessor for AccessPointShaderTransitionView);
  v127 = v123;
  v128 = v68;
  v129 = v119;
  v130 = (void *)v100;
  v81 = swift_getOpaqueTypeConformance2(&v127, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v82 = v110;
  v83 = v108;
  v84 = v124;
  View.onChange<A>(of:initial:_:)(&v125, 0, sub_100030DBC, v79, v108, &type metadata for Bool, v81, &protocol witness table for Bool);
  v85 = swift_release(v79);
  (*(void (**)(char *, uint64_t, __n128))(v107 + 8))(v84, v83, v85);
  sub_100007878(v66, v76, type metadata accessor for AccessPointShaderTransitionView);
  v86 = swift_allocObject(&unk_1000FD6B0, v77, v78);
  v87 = sub_100010F0C(v76, v86 + v80, type metadata accessor for AccessPointShaderTransitionView);
  v88 = v113;
  static TaskPriority.userInitiated.getter(v87);
  v89 = (uint64_t)v109;
  v90 = &v109[*(int *)(v106 + 36)];
  v91 = type metadata accessor for _TaskModifier(0);
  v92 = v114;
  v93 = v115;
  (*(void (**)(char *, char *, uint64_t))(v114 + 16))(&v90[*(int *)(v91 + 20)], v88, v115);
  *(_QWORD *)v90 = &unk_10010D1D0;
  *((_QWORD *)v90 + 1) = v86;
  v94 = v111;
  v95 = v112;
  (*(void (**)(uint64_t, char *, uint64_t))(v111 + 16))(v89, v82, v112);
  (*(void (**)(char *, uint64_t))(v92 + 8))(v88, v93);
  (*(void (**)(char *, uint64_t))(v94 + 8))(v82, v95);
  return sub_10001A0AC(v89, v116, &qword_10010D1A8);
}

void sub_10002E7E4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  uint64_t (**v36)();
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;

  v4 = sub_100003304(&qword_10010CA78);
  __chkstk_darwin(v4);
  v40 = (uint64_t)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003304(&qword_10010D230);
  __chkstk_darwin(v6);
  v42 = (uint64_t)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (double *)((char *)&v40 - v9);
  v11 = type metadata accessor for AccessPointShaderTransitionView(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11);
  v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007878(a1, (uint64_t)v14, type metadata accessor for AccessPointShaderTransitionView);
  v15 = *(unsigned __int8 *)(v12 + 80);
  v16 = (v15 + 16) & ~v15;
  v17 = v16 + v13;
  v18 = v15 | 7;
  v19 = swift_allocObject(&unk_1000FD7C8, v16 + v13, v15 | 7);
  v20 = sub_100010F0C((uint64_t)v14, v19 + v16, type metadata accessor for AccessPointShaderTransitionView);
  v41 = static Edge.Set.all.getter(v20);
  v21 = EdgeInsets.init(_all:)(20.0);
  v23 = v22;
  v25 = v24;
  v27 = v26;
  v28 = *(_QWORD *)(a1 + 80);
  v43 = *(_BYTE *)(a1 + 72);
  v44 = v28;
  sub_100003304(&qword_10010CDA0);
  State.wrappedValue.getter(&v45);
  if (v45 == 1)
  {
    v29 = sub_10002A1FC();
    v31 = v30;
    v32 = v40;
    sub_100010CBC(a1 + *(int *)(v11 + 64), v40, &qword_10010CA78);
    sub_100007878(a1, (uint64_t)v14, type metadata accessor for AccessPointShaderTransitionView);
    v33 = swift_allocObject(&unk_1000FD7F0, v17, v18);
    sub_100010F0C((uint64_t)v14, v33 + v16, type metadata accessor for AccessPointShaderTransitionView);
    *v10 = v29;
    *((_QWORD *)v10 + 1) = v31;
    v34 = (int *)type metadata accessor for RippleView(0);
    v35 = sub_10001A0AC(v32, (uint64_t)v10 + v34[5], &qword_10010CA78);
    *(double *)((char *)v10 + v34[6]) = 1.0;
    Date.init()(v35);
    v36 = (uint64_t (**)())((char *)v10 + v34[8]);
    *v36 = sub_100032574;
    v36[1] = (uint64_t (*)())v33;
    (*(void (**)(double *, _QWORD, uint64_t, int *))(*((_QWORD *)v34 - 1) + 56))(v10, 0, 1, v34);
  }
  else
  {
    v37 = type metadata accessor for RippleView(0);
    (*(void (**)(double *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v10, 1, 1, v37);
  }
  v38 = v42;
  sub_100010CBC((uint64_t)v10, v42, &qword_10010D230);
  *(_QWORD *)a2 = sub_100032510;
  *(_QWORD *)(a2 + 8) = v19;
  *(_BYTE *)(a2 + 16) = v41;
  *(double *)(a2 + 24) = v21;
  *(_QWORD *)(a2 + 32) = v23;
  *(_QWORD *)(a2 + 40) = v25;
  *(_QWORD *)(a2 + 48) = v27;
  *(_BYTE *)(a2 + 56) = 0;
  v39 = sub_100003304(&qword_10010D238);
  sub_100010CBC(v38, a2 + *(int *)(v39 + 48), &qword_10010D230);
  swift_retain(v19);
  sub_100010ED0((uint64_t)v10, &qword_10010D230);
  sub_100010ED0(v38, &qword_10010D230);
  swift_release(v19);
}

double sub_10002EB3C(uint64_t a1)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  __n128 v6;
  uint64_t v7;
  double result;
  _QWORD v9[4];
  _BYTE v10[9];
  uint64_t v11;
  uint64_t v12;

  v2 = *(_BYTE *)(a1 + 72);
  v3 = *(_QWORD *)(a1 + 80);
  swift_retain(v3);
  v4 = sub_100003304(&qword_10010CDA0);
  State.wrappedValue.getter(&v12);
  v10[1] = v2;
  v11 = v3;
  v10[0] = (v12 & 1) == 0;
  State.wrappedValue.setter(v10, v4);
  v5 = swift_release(v3);
  v5.n128_u64[0] = 0x3FD999999999999ALL;
  v6.n128_u64[0] = 0x3FEE666666666666;
  v7 = static Animation.spring(response:dampingFraction:blendDuration:)(v5, v6, 0.0);
  v9[2] = a1;
  withAnimation<A>(_:_:)(v7, sub_100032580, v9, (char *)&type metadata for () + 8);
  *(_QWORD *)&result = swift_release(v7).n128_u64[0];
  return result;
}

uint64_t sub_10002EC20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v30;
  char *v31;
  char v32[16];
  uint64_t v33;
  char v34;
  __int128 v35;
  uint64_t v36;

  v3 = type metadata accessor for AccessPointAnchoring(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v31 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v30 - v7);
  v9 = type metadata accessor for AccessPointShaderTransitionView(0);
  v10 = *(_QWORD *)(a1 + *(int *)(v9 + 72));
  KeyPath = swift_getKeyPath(&unk_1000C8A98);
  v33 = v10;
  v34 = 0;
  *(_QWORD *)&v35 = v10;
  v12 = sub_1000035B4(&qword_10010CE00, type metadata accessor for GameDashboardLaunchContext, (uint64_t)&protocol conformance descriptor for GameDashboardLaunchContext);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v35, KeyPath, sub_100026150, v32, (char *)&type metadata for () + 8, v12);
  v30 = v1;
  swift_release(KeyPath);
  v13 = type metadata accessor for AccessPointContainer(0);
  v14 = a1 + *(int *)(v9 + 68);
  v15 = *(_QWORD *)(*(_QWORD *)(v14 + *(int *)(v13 + 28)) + 16) - 1;
  v35 = *(_OWORD *)(a1 + 56);
  v36 = v15;
  v16 = sub_100003304(&qword_10010CD58);
  State.wrappedValue.setter(&v36, v16);
  v17 = *(unsigned __int8 *)(v14 + *(int *)(v13 + 24));
  if (v17 >= 6)
    v18 = 1;
  else
    v18 = 0x20202010102uLL >> (8 * v17);
  v20 = *(_QWORD *)(a1 + 48);
  LOBYTE(v35) = *(_BYTE *)(a1 + 40);
  v19 = v35;
  *((_QWORD *)&v35 + 1) = v20;
  LOBYTE(v36) = v18;
  v21 = sub_100003304(&qword_10010CE10);
  State.wrappedValue.setter(&v36, v21);
  LOBYTE(v35) = v19;
  *((_QWORD *)&v35 + 1) = v20;
  State.wrappedValue.getter(&v36);
  if (v36 == 2)
  {
    v22 = *(_QWORD *)(a1 + 136);
    LOBYTE(v35) = *(_BYTE *)(a1 + 128);
    *((_QWORD *)&v35 + 1) = v22;
    LOBYTE(v36) = 0;
    v23 = sub_100003304(&qword_10010CDA0);
    State.wrappedValue.setter(&v36, v23);
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v8, enum case for AccessPointAnchoring.topCentered(_:), v3);
    v24 = v31;
    (*(void (**)(char *, _QWORD *, uint64_t))(v4 + 16))(v31, v8, v3);
    v25 = sub_100003304(&qword_10010CC08);
    v26 = v24;
  }
  else
  {
    v27 = sub_100003304(&qword_10010CC08);
    State.wrappedValue.getter(v8);
    v28 = v31;
    (*(void (**)(char *, _QWORD *, uint64_t))(v4 + 16))(v31, v8, v3);
    v26 = v28;
    v25 = v27;
  }
  State.wrappedValue.setter(v26, v25);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(v4 + 8))(v8, v3);
}

void sub_10002EEF0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t Strong;
  uint64_t v18;
  Class isa;
  uint64_t v20;
  uint64_t v21;
  objc_class *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[3];

  v2 = sub_100003304(&qword_10010EB20);
  __chkstk_darwin(v2);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for AccessPointShaderTransitionView(0) + 72));
  KeyPath = swift_getKeyPath(&unk_1000C8A98);
  v31[0] = v5;
  v7 = sub_1000035B4(&qword_10010CE00, type metadata accessor for GameDashboardLaunchContext, (uint64_t)&protocol conformance descriptor for GameDashboardLaunchContext);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v31, KeyPath, v7);
  swift_release(KeyPath);
  swift_beginAccess(v5 + 16, v31, 0, 0);
  if (*(_BYTE *)(v5 + 16) == 1)
  {
    v9 = *(_QWORD *)(a1 + 80);
    LOBYTE(v29) = *(_BYTE *)(a1 + 72);
    v8 = v29;
    v30 = v9;
    swift_retain(v9);
    v10 = sub_100003304(&qword_10010CDA0);
    State.wrappedValue.getter(&v28);
    LOBYTE(v29) = v8;
    v30 = v9;
    v27 = (v28 & 1) == 0;
    State.wrappedValue.setter(&v27, v10);
    swift_release(v9);
  }
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_BYTE *)(a1 + 16);
  v13 = swift_retain(v11);
  v14 = sub_100031370(v13, v12, 0xD00000000000001DLL, 0x80000001000CF9A0);
  swift_release(v11);
  v15 = swift_getKeyPath(&unk_1000C8B68);
  v29 = v14;
  v16 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v29, v15, v16);
  swift_release(v15);
  Strong = swift_unknownObjectWeakLoadStrong(v14 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__remoteTarget);
  swift_release(v14);
  if (Strong)
  {
    sub_100025740();
    v18 = swift_getKeyPath(&unk_1000C8A98);
    v29 = v5;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v29, v18, v7);
    swift_release(v18);
    swift_beginAccess(v5 + 16, &v29, 0, 0);
    isa = NSNumber.init(BOOLeanLiteral:)(*(_BYTE *)(v5 + 16)).super.super.isa;
    v20 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v4, 1, 1, v20);
    type metadata accessor for MainActor(0);
    swift_unknownObjectRetain(Strong, v21);
    v22 = isa;
    v23 = static MainActor.shared.getter(v22);
    v24 = (_QWORD *)swift_allocObject(&unk_1000FD7A0, 48, 7);
    v24[2] = v23;
    v24[3] = &protocol witness table for MainActor;
    v24[4] = Strong;
    v24[5] = v22;
    v25 = sub_100028240((uint64_t)v4, (uint64_t)&unk_10010D228, (uint64_t)v24);
    swift_release(v25);

    swift_unknownObjectRelease(Strong);
  }
}

uint64_t sub_10002F200(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t result;
  __n128 v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  _QWORD v25[3];
  char v26;
  uint64_t v27;
  uint64_t v28;

  v2 = type metadata accessor for AnimationCompletionCriteria(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AccessPointShaderTransitionView(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)v25 - v11;
  v13 = *(_QWORD *)(a1 + 48);
  v26 = *(_BYTE *)(a1 + 40);
  v27 = v13;
  sub_100003304(&qword_10010CE10);
  State.wrappedValue.getter(&v28);
  v14 = v28;
  sub_100007878(a1, (uint64_t)v12, type metadata accessor for AccessPointShaderTransitionView);
  if (v14 != 2)
    return sub_1000106F0((uint64_t)v12, type metadata accessor for AccessPointShaderTransitionView);
  v15 = *((_QWORD *)v12 + 10);
  v26 = v12[72];
  v27 = v15;
  sub_100003304(&qword_10010CDA0);
  State.wrappedValue.getter(&v28);
  result = sub_1000106F0((uint64_t)v12, type metadata accessor for AccessPointShaderTransitionView);
  if ((v28 & 1) == 0)
  {
    v18.n128_u64[0] = 0x3FE6666666666666;
    v17.n128_u64[0] = 0.5;
    v19 = static Animation.spring(response:dampingFraction:blendDuration:)(v17, v18, 0.0);
    v25[1] = v25;
    __chkstk_darwin(v19);
    v25[-2] = a1;
    sub_100007878(a1, (uint64_t)v9, type metadata accessor for AccessPointShaderTransitionView);
    v20 = *(unsigned __int8 *)(v7 + 80);
    v21 = (v20 + 16) & ~v20;
    v22 = swift_allocObject(&unk_1000FD750, v21 + v8, v20 | 7);
    v23 = sub_100010F0C((uint64_t)v9, v22 + v21, type metadata accessor for AccessPointShaderTransitionView);
    static AnimationCompletionCriteria.logicallyComplete.getter(v23);
    withAnimation<A>(_:completionCriteria:_:completion:)(v19, v5, sub_100032350, &v25[-4], sub_10003236C, v22, (char *)&type metadata for () + 8);
    swift_release(v19);
    v24 = swift_release(v22);
    return (*(uint64_t (**)(char *, uint64_t, __n128))(v3 + 8))(v5, v2, v24);
  }
  return result;
}

double sub_10002F458(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = sub_100003304(&qword_10010EB20);
  __chkstk_darwin(v2);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(a1 + 8);
  LOBYTE(a1) = *(_BYTE *)(a1 + 16);
  v6 = swift_retain(v5);
  v7 = sub_100031370(v6, a1, 0xD00000000000001DLL, 0x80000001000CF9A0);
  swift_release(v5);
  KeyPath = swift_getKeyPath(&unk_1000C8B38);
  v19 = v7;
  v9 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v19, KeyPath, v9);
  swift_release(KeyPath);
  v11 = *(_QWORD *)(v7 + 16);
  v10 = *(_QWORD *)(v7 + 24);
  swift_bridgeObjectRetain(v10);
  *(_QWORD *)&result = swift_release(v7).n128_u64[0];
  if (v10)
  {
    v13 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v4, 1, 1, v13);
    v14 = type metadata accessor for MainActor(0);
    v15 = static MainActor.shared.getter(v14);
    v16 = (_QWORD *)swift_allocObject(&unk_1000FD778, 48, 7);
    v16[2] = v15;
    v16[3] = &protocol witness table for MainActor;
    v16[4] = v11;
    v16[5] = v10;
    v17 = sub_100028240((uint64_t)v4, (uint64_t)&unk_10010D218, (uint64_t)v16);
    *(_QWORD *)&result = swift_release(v17).n128_u64[0];
  }
  return result;
}

double sub_10002F5E0(uint64_t a1, __n128 a2, __n128 a3)
{
  uint64_t v4;
  double result;
  _QWORD v6[4];

  a3.n128_u64[0] = 0x3FEC28F5C28F5C29;
  a2.n128_u64[0] = 0.5;
  v4 = static Animation.spring(response:dampingFraction:blendDuration:)(a2, a3, 0.0);
  v6[2] = a1;
  withAnimation<A>(_:_:)(v4, sub_100031B58, v6, (char *)&type metadata for () + 8);
  *(_QWORD *)&result = swift_release(v4).n128_u64[0];
  return result;
}

uint64_t sub_10002F650(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t KeyPath;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  char v19;
  uint64_t result;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t, __n128);
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  unint64_t v33;
  _QWORD v34[3];
  _QWORD v35[3];

  v2 = type metadata accessor for AccessPointAnchoring(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v30 - v7;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_BYTE *)(a1 + 16);
  v11 = swift_retain(v9);
  v33 = 0x80000001000CF9A0;
  v12 = sub_100031370(v11, v10, 0xD00000000000001DLL, 0x80000001000CF9A0);
  swift_release(v9);
  KeyPath = swift_getKeyPath(&unk_1000C8AC0);
  v35[0] = v12;
  v31 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v35, KeyPath, v31);
  swift_release(KeyPath);
  v14 = v12 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__anchoring;
  swift_beginAccess(v12 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__anchoring, v35, 0, 0);
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v15(v8, v14, v2);
  swift_release(v12);
  type metadata accessor for AccessPointShaderTransitionView(0);
  v32 = v15;
  v15(v5, (uint64_t)v8, v2);
  v16 = sub_100003304(&qword_10010CC08);
  State.wrappedValue.setter(v5, v16);
  v17 = *(void (**)(char *, uint64_t))(v3 + 8);
  v17(v8, v2);
  State.wrappedValue.getter(v8);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for AccessPointAnchoring.topCentered(_:), v2);
  v18 = sub_1000035B4(&qword_10010CE20, (uint64_t (*)(uint64_t))&type metadata accessor for AccessPointAnchoring, (uint64_t)&protocol conformance descriptor for AccessPointAnchoring);
  v19 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v5, v2, v18);
  v17(v5, v2);
  result = ((uint64_t (*)(char *, uint64_t))v17)(v8, v2);
  if ((v19 & 1) == 0)
  {
    v21 = *(_QWORD *)(a1 + 8);
    v22 = *(_BYTE *)(a1 + 16);
    v23 = swift_retain(v21);
    v24 = sub_100031370(v23, v22, 0xD00000000000001DLL, v33);
    swift_release(v21);
    v25 = swift_getKeyPath(&unk_1000C8AC0);
    v34[0] = v24;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v34, v25, v31);
    swift_release(v25);
    v26 = v24 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__anchoring;
    swift_beginAccess(v24 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__anchoring, v34, 0, 0);
    v27 = v26;
    v28 = (void (*)(char *, char *, uint64_t, __n128))v32;
    v32(v8, v27, v2);
    v29 = swift_release(v24);
    v28(v5, v8, v2, v29);
    State.wrappedValue.setter(v5, v16);
    return ((uint64_t (*)(char *, uint64_t))v17)(v8, v2);
  }
  return result;
}

double sub_10002F970(uint64_t a1, __n128 a2, __n128 a3)
{
  uint64_t v4;
  _QWORD v6[4];

  a2.n128_u64[0] = 0x3FD999999999999ALL;
  a3.n128_u64[0] = 0x3FE0A3D70A3D70A4;
  v4 = static Animation.spring(response:dampingFraction:blendDuration:)(a2, a3, 0.0);
  v6[2] = a1;
  withAnimation<A>(_:_:)(v4, sub_100031B24, v6, (char *)&type metadata for () + 8);
  swift_release(v4);
  return sub_10002A768();
}

uint64_t sub_10002F9E8(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v14;
  _QWORD v15[2];

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_BYTE *)(a1 + 16);
  v4 = swift_retain(v2);
  v5 = sub_100031370(v4, v3, 0xD00000000000001DLL, 0x80000001000CF9A0);
  swift_release(v2);
  KeyPath = swift_getKeyPath(&unk_1000C8AE8);
  v15[0] = v5;
  v7 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v15, KeyPath, v7);
  swift_release(KeyPath);
  if (*(_BYTE *)(v5 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__active) == 1)
  {
    v8 = swift_getKeyPath(&unk_1000C8B10);
    v15[0] = v5;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v15, v8, v7);
    swift_release(v8);
    v9 = *(_QWORD *)(v5 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__hideCount);
    swift_release(v5);
    v10 = v9 > 0;
  }
  else
  {
    swift_release(v5);
    v10 = 1;
  }
  v11 = *(_QWORD *)(a1 + 96);
  LOBYTE(v15[0]) = *(_BYTE *)(a1 + 88);
  v15[1] = v11;
  v14 = v10;
  v12 = sub_100003304(&qword_10010CDA0);
  return State.wrappedValue.setter(&v14, v12);
}

uint64_t sub_10002FB54(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v1 + 16) = a1;
  v2 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v1 + 24) = static MainActor.shared.getter(v2);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  return swift_task_switch(sub_10002FBC0, v3, v4);
}

uint64_t sub_10002FBC0()
{
  uint64_t v0;
  double v1;

  swift_release(*(_QWORD *)(v0 + 24));
  v1 = sub_10002A768();
  return (*(uint64_t (**)(double))(v0 + 8))(v1);
}

uint64_t sub_10002FBF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v32 = a2;
  v34 = a1;
  v35 = a3;
  v4 = type metadata accessor for GeometryProxy(0, a4);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = type metadata accessor for RippleView(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = __chkstk_darwin(v7);
  v11 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AnimationTimelineSchedule(0, v10);
  v33 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v31 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v30 - v16;
  AnimationTimelineSchedule.init(minimumInterval:paused:)(0, 1, 0, v15);
  sub_100007878(v32, (uint64_t)v11, type metadata accessor for RippleView);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v34, v4);
  v18 = *(unsigned __int8 *)(v8 + 80);
  v19 = (v18 + 16) & ~v18;
  v20 = *(unsigned __int8 *)(v5 + 80);
  v21 = (v9 + v20 + v19) & ~v20;
  v22 = swift_allocObject(&unk_1000FD9A8, v21 + v6, v18 | v20 | 7);
  sub_100010F0C((uint64_t)v11, v22 + v19, type metadata accessor for RippleView);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v22 + v21, (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  v23 = v33;
  v24 = v31;
  (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v31, v17, v12);
  v25 = swift_allocObject(&unk_1000FD9D0, 32, 7);
  *(_QWORD *)(v25 + 16) = sub_100034604;
  *(_QWORD *)(v25 + 24) = v22;
  v26 = sub_100003304(&qword_10010D468);
  v27 = sub_1000035B4(&qword_10010D470, (uint64_t (*)(uint64_t))&type metadata accessor for AnimationTimelineSchedule, (uint64_t)&protocol conformance descriptor for AnimationTimelineSchedule);
  v28 = sub_1000346A8();
  TimelineView<>.init(_:content:)(v24, sub_1000346A0, v25, v12, v26, v27, v28);
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v17, v12);
}

uint64_t sub_10002FE54@<X0>(double *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  __n128 v25;
  float v26;
  double v27;
  float v28;
  float v29;
  __n128 v30;
  char *v31;
  char *v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  _OWORD v68[8];
  _OWORD v69[9];

  v51 = a2;
  v59 = a3;
  v4 = type metadata accessor for ShaderFunction(0);
  v53 = *(_QWORD *)(v4 - 8);
  v54 = v4;
  v5 = __chkstk_darwin(v4);
  v49 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Shader(0, v5);
  v56 = *(_QWORD *)(v7 - 8);
  v57 = v7;
  __chkstk_darwin(v7);
  v50 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for RippleView(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = sub_100003304(&qword_10010D4A8);
  v55 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58);
  v52 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007878((uint64_t)a1, (uint64_t)v12, type metadata accessor for RippleView);
  v14 = *(unsigned __int8 *)(v10 + 80);
  v15 = (v14 + 16) & ~v14;
  v16 = swift_allocObject(&unk_1000FD9F8, v15 + v11, v14 | 7);
  v17 = sub_100010F0C((uint64_t)v12, v16 + v15, type metadata accessor for RippleView);
  v18 = static Alignment.center.getter(v17);
  sub_100028770(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v68, 0.0, 1, INFINITY, 0, v18, v19, (uint64_t)sub_100034964, v16);
  swift_release(v16);
  v64 = v68[4];
  v65 = v68[5];
  v66 = v68[6];
  v67 = v68[7];
  v60 = v68[0];
  v61 = v68[1];
  v62 = v68[2];
  v63 = v68[3];
  static ShaderLibrary.subscript.getter(0x6853656C70706972, 0xEC00000072656461);
  v20 = sub_100003304(&qword_10010D4B0);
  v21 = *(_QWORD *)(type metadata accessor for Shader.Argument(0) - 8);
  v22 = swift_allocObject(v20, ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80))+ 3 * *(_QWORD *)(v21 + 72), *(unsigned __int8 *)(v21 + 80) | 7);
  *(_OWORD *)(v22 + 16) = xmmword_1000C89B0;
  v23 = ((double (*)(void))Date.timeIntervalSinceNow.getter)();
  v24 = *(int *)(v9 + 24);
  *(float *)&v23 = -v23 / *(double *)((char *)a1 + v24);
  v25.n128_f64[0] = static Shader.Argument._float(_:)(*(float *)&v23);
  v26 = GeometryProxy.size.getter(v25);
  *(float *)&v27 = v27;
  static Shader.Argument._float2(_:_:)(v26, *(float *)&v27);
  v28 = *a1;
  v29 = a1[1];
  v30 = static Shader.Argument._float2(_:_:)(v28, v29);
  v31 = v49;
  v32 = v50;
  ShaderFunction.dynamicallyCall(withArguments:)(v22, v30);
  swift_bridgeObjectRelease(v22);
  v33 = (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v31, v54);
  v34 = *(double *)((char *)a1 + v24);
  v35 = v34 + Date.timeIntervalSinceNow.getter(v33) > 0.0;
  v36 = sub_100003304(&qword_10010D480);
  v37 = sub_100034764(&qword_10010D488, &qword_10010D480, (void (*)(void))sub_1000347CC);
  v38 = v52;
  View.layerEffect(_:maxSampleOffset:isEnabled:)(v32, v35, v36, v37, 500.0, 500.0);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v32, v57);
  v69[4] = v64;
  v69[5] = v65;
  v69[6] = v66;
  v69[7] = v67;
  v69[0] = v60;
  v69[1] = v61;
  v69[2] = v62;
  v69[3] = v63;
  v39 = sub_1000349A8((uint64_t)v69);
  v40 = static SafeAreaRegions.all.getter(v39);
  LOBYTE(v35) = static Edge.Set.all.getter(v40);
  v41 = v55;
  v42 = v59;
  v43 = v38;
  v44 = v38;
  v45 = v58;
  (*(void (**)(uint64_t, char *, uint64_t))(v55 + 16))(v59, v43, v58);
  v46 = v42 + *(int *)(sub_100003304(&qword_10010D468) + 36);
  *(_QWORD *)v46 = v40;
  *(_BYTE *)(v46 + 8) = v35;
  return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v44, v45);
}

uint64_t sub_100030284@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(uint64_t a1)@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(a1);
  sub_100007878(v2, (uint64_t)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for RippleView);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 16) & ~v6;
  v8 = swift_allocObject(&unk_1000FD980, v7 + v5, v6 | 7);
  result = sub_100010F0C((uint64_t)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v8 + v7, type metadata accessor for RippleView);
  *a2 = sub_1000343F8;
  a2[1] = (uint64_t (*)(uint64_t))v8;
  return result;
}

uint64_t sub_100030344()
{
  return sub_100030660((uint64_t (*)(uint64_t))sub_10002EEF0);
}

unint64_t sub_100030350()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010D1B8;
  if (!qword_10010D1B8)
  {
    v1 = sub_100006E54(&qword_10010D180);
    sub_100011054(&qword_10010D1C0, &qword_10010D178, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10010D1B8);
  }
  return result;
}

uint64_t sub_1000303D8()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  uint64_t v30;

  v1 = v0;
  v2 = (int *)type metadata accessor for AccessPointShaderTransitionView(0);
  v3 = *((_QWORD *)v2 - 1);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 16) & ~v4;
  v6 = *(_QWORD *)(v3 + 64);
  v7 = v0 + v5;
  swift_release(*(_QWORD *)(v0 + v5 + 8));
  swift_release(*(_QWORD *)(v0 + v5 + 48));
  swift_release(*(_QWORD *)(v0 + v5 + 64));
  swift_release(*(_QWORD *)(v0 + v5 + 80));
  swift_release(*(_QWORD *)(v0 + v5 + 96));
  swift_release(*(_QWORD *)(v0 + v5 + 120));
  swift_release(*(_QWORD *)(v0 + v5 + 136));
  v8 = v0 + v5 + v2[14];
  v9 = type metadata accessor for AccessPointAnchoring(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v11 = sub_100003304(&qword_10010CC08);
  v12 = swift_release(*(_QWORD *)(v8 + *(int *)(v11 + 28)));
  v13 = v7 + v2[15];
  ((void (*)(uint64_t, uint64_t, __n128))v10)(v13, v9, v12);
  swift_release(*(_QWORD *)(v13 + *(int *)(v11 + 28)));
  v14 = (_QWORD *)(v7 + v2[16]);
  v15 = type metadata accessor for Game(0);
  if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15))
  {
    v30 = v6;
    swift_bridgeObjectRelease(v14[1]);
    swift_bridgeObjectRelease(v14[3]);
    swift_bridgeObjectRelease(v14[5]);
    v16 = (char *)v14 + *(int *)(v15 + 28);
    v17 = type metadata accessor for Date(0);
    v18 = *(_QWORD *)(v17 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
      (*(void (**)(char *, uint64_t))(v18 + 8))(v16, v17);
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v14 + *(int *)(v15 + 60) + 8));
    v6 = v30;
  }
  v19 = v4 | 7;
  v20 = v5 + v6;
  v21 = v7 + v2[17];
  v22 = type metadata accessor for PageID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
  v23 = type metadata accessor for AccessPointContainer(0);
  v24 = v21 + *(int *)(v23 + 20);
  v25 = type metadata accessor for PageMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v24, v25);
  swift_bridgeObjectRelease(*(_QWORD *)(v21 + *(int *)(v23 + 28)));
  swift_release(*(_QWORD *)(v7 + v2[18]));
  swift_release(*(_QWORD *)(v7 + v2[19]));
  v26 = (_QWORD *)(v7 + v2[20]);
  swift_release(*v26);
  swift_release(v26[1]);
  v27 = (char *)v26 + *(int *)(sub_100003304(&qword_10010CC18) + 32);
  v28 = sub_100003304(&qword_10010CC20);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v27, v28);
  return swift_deallocObject(v1, v20, v19);
}

uint64_t sub_100030654()
{
  return sub_100030660(sub_10002F200);
}

uint64_t sub_100030660(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AccessPointShaderTransitionView(0) - 8) + 80);
  return a1(v1 + ((v2 + 16) & ~v2));
}

uint64_t sub_10003069C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000C8B38);
  v8 = v3;
  v5 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(_QWORD *)(v3 + 24);
  *a2 = *(_QWORD *)(v3 + 16);
  a2[1] = v6;
  return swift_bridgeObjectRetain(v6);
}

uint64_t sub_10003072C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  _QWORD v8[7];
  uint64_t v9;

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000C8B38);
  v8[2] = v4;
  v8[3] = v3;
  v8[4] = v2;
  v9 = v4;
  v6 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_100032424, v8, (char *)&type metadata for () + 8, v6);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_1000307E8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000C8AC0);
  v9[0] = v3;
  v5 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v9, KeyPath, v5);
  swift_release(KeyPath);
  v6 = v3 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__anchoring;
  swift_beginAccess(v3 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__anchoring, v9, 0, 0);
  v7 = type metadata accessor for AccessPointAnchoring(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, v6, v7);
}

uint64_t sub_1000308AC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  __n128 v12;
  _BYTE v14[16];
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;

  v4 = type metadata accessor for AccessPointAnchoring(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = &v14[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v5 + 16))(v8, a1, v4, v6);
  v9 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000C8AC0);
  v15 = v9;
  v16 = v8;
  v17 = v9;
  v11 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v17, KeyPath, sub_100031B70, v14, (char *)&type metadata for () + 8, v11);
  v12 = swift_release(KeyPath);
  return (*(uint64_t (**)(_BYTE *, uint64_t, __n128))(v5 + 8))(v8, v4, v12);
}

void sub_1000309B8(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000C8AE8);
  v6 = v3;
  v5 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v5);
  swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__active);
}

double sub_100030A4C(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000C8AE8);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_100031B3C, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

void sub_100030AF4(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000C8B10);
  v6 = v3;
  v5 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v5);
  swift_release(KeyPath);
  *a2 = *(_QWORD *)(v3 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__hideCount);
}

double sub_100030B88(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000C8B10);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_100030E38, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_100030C2C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000C8B68);
  v7 = v3;
  v5 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_unknownObjectWeakLoadStrong(v3 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__remoteTarget);
  *a2 = result;
  return result;
}

uint64_t sub_100030CC4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000C8B68);
  v8[2] = v3;
  v8[3] = v2;
  v9 = v3;
  v5 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  swift_unknownObjectRetain(v2, v6);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_1000324F4, v8, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  return swift_unknownObjectRelease(v2);
}

uint64_t sub_100030D7C(uint64_t a1, char a2)
{
  return sub_100031370(a1, a2, 0xD00000000000001DLL, 0x80000001000CF9A0);
}

uint64_t sub_100030DA4()
{
  return sub_100030660((uint64_t (*)(uint64_t))sub_10002F5E0);
}

uint64_t sub_100030DBC()
{
  return sub_100030660((uint64_t (*)(uint64_t))sub_10002F970);
}

uint64_t sub_100030DCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AccessPointShaderTransitionView(0) - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  v4 = (_QWORD *)swift_task_alloc(dword_10010D1CC);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_1000263E8;
  return sub_10002FB54(v3);
}

uint64_t sub_100030E38()
{
  uint64_t v0;

  return sub_1000A8E44(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100030E54(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AccessPointShaderTransitionView(0) - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = v1 + ((v4 + 32) & ~v4);
  v8 = (_QWORD *)swift_task_alloc(dword_10010D1DC);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_1000252CC;
  return sub_10002AA30(a1, v5, v6, v7);
}

uint64_t sub_100030ED8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v14;
  os_log_type_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;

  v2 = v1;
  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003304(&qword_10010D3A8);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100010CBC(v2, (uint64_t)v10, &qword_10010D3A8);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v10, v8);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v12 = type metadata accessor for DynamicTypeSize(0);
    return (*(uint64_t (**)(_QWORD *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, v10, v12);
  }
  else
  {
    v14 = *v10;
    v15 = static os_log_type_t.fault.getter(EnumCaseMultiPayload);
    v16 = static Log.runtimeIssuesLog.getter();
    v17 = v15;
    if (os_log_type_enabled(v16, v15))
    {
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      v19 = swift_slowAlloc(32, -1);
      v24 = a1;
      v20 = v19;
      v26 = v19;
      *(_DWORD *)v18 = 136315138;
      v25 = sub_100031C58(0x5463696D616E7944, 0xEF657A6953657079, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v18, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      v21 = v20;
      a1 = v24;
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v18, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(a1, v7, v14);
    v22 = swift_release(v14);
    return (*(uint64_t (**)(char *, uint64_t, __n128))(v5 + 8))(v7, v4, v22);
  }
}

uint64_t sub_10003111C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t EnumCaseMultiPayload;
  uint64_t v13;
  os_log_type_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;

  v2 = v1;
  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003304(&qword_10010D4C8);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100010CBC(v2, (uint64_t)v10, &qword_10010D4C8);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v10, v8);
  if ((_DWORD)EnumCaseMultiPayload == 1)
    return sub_10001A0AC((uint64_t)v10, (uint64_t)a1, &qword_10010D4D0);
  v13 = *v10;
  v14 = static os_log_type_t.fault.getter(EnumCaseMultiPayload);
  v15 = static Log.runtimeIssuesLog.getter();
  v16 = v14;
  if (os_log_type_enabled(v15, v14))
  {
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = swift_slowAlloc(32, -1);
    v23 = a1;
    v19 = v18;
    v25 = v18;
    *(_DWORD *)v17 = 136315138;
    v24 = sub_100031C58(0xD00000000000001CLL, 0x80000001000CFC40, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v17, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    v20 = v19;
    a1 = v23;
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v17, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath(a1, v7, v13);
  v21 = swift_release(v13);
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v5 + 8))(v7, v4, v21);
}

uint64_t sub_10003134C(uint64_t a1, char a2)
{
  return sub_100031370(a1, a2, 0x4865727574736547, 0xEE0072656C646E61);
}

uint64_t sub_100031370(uint64_t a1, char a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  os_log_type_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v8 = type metadata accessor for EnvironmentValues(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = swift_retain(a1);
  if ((a2 & 1) == 0)
  {
    v13 = static os_log_type_t.fault.getter(v12);
    v14 = static Log.runtimeIssuesLog.getter();
    v15 = v13;
    if (os_log_type_enabled(v14, v13))
    {
      v23 = a4;
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = swift_slowAlloc(32, -1);
      v18 = a3;
      v19 = v17;
      v25 = v17;
      *(_DWORD *)v16 = 136315138;
      v24 = sub_100031C58(v18, v23, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v16, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v16, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(&v25, v11, a1);
    v20 = swift_release(a1);
    (*(void (**)(char *, uint64_t, __n128))(v9 + 8))(v11, v8, v20);
    return v25;
  }
  return a1;
}

uint64_t sub_10003152C(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  double v14;
  uint64_t v16;
  uint64_t v17;

  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
    return a1 & 1;
  v8 = swift_retain(a1);
  v9 = static os_log_type_t.fault.getter(v8);
  v10 = static Log.runtimeIssuesLog.getter();
  v11 = v9;
  if (os_log_type_enabled(v10, v9))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v17 = v13;
    *(_DWORD *)v12 = 136315138;
    v16 = sub_100031C58(1819242306, 0xE400000000000000, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath(&v17, v7, a1);
  v14 = sub_100032F88(a1, 0);
  (*(void (**)(char *, uint64_t, double))(v5 + 8))(v7, v4, v14);
  return v17;
}

uint64_t sub_1000316E4(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100031748;
  return v6(a1);
}

uint64_t sub_100031748()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100031794(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_10010D1EC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1000252CC;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_10010D1E8 + dword_10010D1E8))(a1, v4);
}

uint64_t sub_100031808()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  uint64_t v28;

  v1 = (int *)type metadata accessor for AccessPointShaderTransitionView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  v6 = v0 + v4;
  swift_release(*(_QWORD *)(v0 + v4 + 8));
  swift_release(*(_QWORD *)(v0 + v4 + 48));
  swift_release(*(_QWORD *)(v0 + v4 + 64));
  swift_release(*(_QWORD *)(v0 + v4 + 80));
  swift_release(*(_QWORD *)(v0 + v4 + 96));
  swift_release(*(_QWORD *)(v0 + v4 + 120));
  swift_release(*(_QWORD *)(v0 + v4 + 136));
  v7 = v0 + v4 + v1[14];
  v8 = type metadata accessor for AccessPointAnchoring(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v10 = sub_100003304(&qword_10010CC08);
  v11 = swift_release(*(_QWORD *)(v7 + *(int *)(v10 + 28)));
  v12 = v0 + v4 + v1[15];
  ((void (*)(uint64_t, uint64_t, __n128))v9)(v12, v8, v11);
  swift_release(*(_QWORD *)(v12 + *(int *)(v10 + 28)));
  v13 = (_QWORD *)(v0 + v4 + v1[16]);
  v14 = type metadata accessor for Game(0);
  if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v13, 1, v14))
  {
    v28 = v5;
    swift_bridgeObjectRelease(v13[1]);
    swift_bridgeObjectRelease(v13[3]);
    swift_bridgeObjectRelease(v13[5]);
    v15 = (char *)v13 + *(int *)(v14 + 28);
    v16 = type metadata accessor for Date(0);
    v17 = *(_QWORD *)(v16 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
      (*(void (**)(char *, uint64_t))(v17 + 8))(v15, v16);
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v13 + *(int *)(v14 + 60) + 8));
    v5 = v28;
  }
  v18 = v3 | 7;
  v19 = v6 + v1[17];
  v20 = type metadata accessor for PageID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
  v21 = type metadata accessor for AccessPointContainer(0);
  v22 = v19 + *(int *)(v21 + 20);
  v23 = type metadata accessor for PageMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v22, v23);
  swift_bridgeObjectRelease(*(_QWORD *)(v19 + *(int *)(v21 + 28)));
  swift_release(*(_QWORD *)(v6 + v1[18]));
  swift_release(*(_QWORD *)(v6 + v1[19]));
  v24 = (_QWORD *)(v6 + v1[20]);
  swift_release(*v24);
  swift_release(v24[1]);
  v25 = (char *)v24 + *(int *)(sub_100003304(&qword_10010CC18) + 32);
  v26 = sub_100003304(&qword_10010CC20);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v25, v26);
  return swift_deallocObject(v0, v4 + v5, v18);
}

uint64_t sub_100031A88(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AccessPointShaderTransitionView(0) - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = v1 + ((v4 + 32) & ~v4);
  v8 = (_QWORD *)swift_task_alloc(dword_10010D1FC);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_1000263E8;
  return sub_10002AD38(a1, v5, v6, v7);
}

uint64_t sub_100031B0C()
{
  return sub_10002B20C();
}

uint64_t sub_100031B24()
{
  uint64_t v0;

  return sub_10002F9E8(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100031B3C()
{
  uint64_t v0;

  return sub_1000A8E34(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_100031B58()
{
  uint64_t v0;

  return sub_10002F650(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100031B70()
{
  uint64_t v0;

  return sub_1000A8D94(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100031B88(uint64_t a1, void (*a2)(char *))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v4 = sub_100003304(&qword_10010D498);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  result = sub_100003304(&qword_10010D4A0);
  if (*(_QWORD *)(*(_QWORD *)(result - 8) + 64) == v6)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
    a2((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100031C58(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13[3];
  void *ObjectType;

  v6 = sub_100031D28(v13, 0, 0, 1, a1, a2);
  v8 = v13[0];
  if (v6)
  {
    v9 = v6;
    ObjectType = (void *)swift_getObjectType(v6, v7);
    v13[0] = v9;
    v10 = *a3;
    if (*a3)
    {
      sub_100031EE0((uint64_t)v13, *a3);
      *a3 = v10 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v13[0] = a1;
    v13[1] = a2;
    v11 = *a3;
    if (*a3)
    {
      sub_100031EE0((uint64_t)v13, *a3);
      *a3 = v11 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_100004624(v13);
  return v8;
}

uint64_t sub_100031D28(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_100031F1C(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v14, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL, __dst);
}

uint64_t sub_100031EE0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100031F1C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_100031FB0(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_100032200(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_100032200(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_100031FB0(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_100032124(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return &_swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_100032124(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return &_swiftEmptyArrayStorage;
  v4 = sub_100003304(&qword_10010D208);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_100032188(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v5 = a1;
  v6 = a1 >> 16;
  v7 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v13 = String.UTF16View.index(_:offsetBy:)(15, v6, a2);
    v14 = v13 + (v7 << 16);
    v15 = v13 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v16 = v14 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v16 = v15;
    return v16 | 4;
  }
  else
  {
    v8 = String.UTF8View._foreignIndex(_:offsetBy:)(15, v6);
    v9 = v8 + (v7 << 16);
    v10 = v8 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v11 = v9 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v11 = v10;
    return v11 | 8;
  }
}

uint64_t sub_100032200(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100003304(&qword_10010D208);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100032350()
{
  return sub_100032BB4(0);
}

uint64_t sub_10003236C()
{
  return sub_100030660((uint64_t (*)(uint64_t))sub_10002F458);
}

uint64_t sub_100032380()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000323AC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_10010D214);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_1000263E8;
  return sub_100023414(a1, v4, v5, v7, v6);
}

uint64_t sub_100032424()
{
  uint64_t *v0;

  return sub_1000A8D80(v0[2], v0[3], v0[4]);
}

uint64_t sub_100032448()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10003247C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_10010D224);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_1000263E8;
  return sub_100022F98(a1, v4, v5, v7, v6);
}

uint64_t sub_1000324F4()
{
  uint64_t v0;

  return sub_1000A8F64(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100032510@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AccessPointShaderTransitionView(0) - 8) + 80);
  return sub_10002C890(v2 + ((v5 + 16) & ~v5), a1, a2);
}

uint64_t type metadata accessor for RippleView(uint64_t a1)
{
  return sub_100010C88(a1, qword_10010D408, (uint64_t)&nominal type descriptor for RippleView);
}

uint64_t sub_100032574()
{
  return sub_100030660((uint64_t (*)(uint64_t))sub_10002EB3C);
}

uint64_t sub_100032580()
{
  uint64_t v0;

  return sub_10002EC20(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000325A4()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t);
  uint64_t v13;
  __n128 v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v1 = (int *)type metadata accessor for AccessPointShaderTransitionView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v39 = *(_QWORD *)(v2 + 64);
  v5 = type metadata accessor for GeometryProxy(0, v4);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v36 = v6;
  v37 = v5;
  v8 = *(_QWORD *)(v6 + 64);
  v38 = v0;
  v9 = (_QWORD *)(v0 + ((v3 + 16) & ~v3));
  swift_release(v9[1]);
  swift_release(v9[6]);
  swift_release(v9[8]);
  swift_release(v9[10]);
  swift_release(v9[12]);
  swift_release(v9[15]);
  swift_release(v9[17]);
  v10 = (char *)v9 + v1[14];
  v11 = type metadata accessor for AccessPointAnchoring(0);
  v12 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8);
  v12(v10, v11);
  v13 = sub_100003304(&qword_10010CC08);
  v14 = swift_release(*(_QWORD *)&v10[*(int *)(v13 + 28)]);
  v15 = (char *)v9 + v1[15];
  ((void (*)(char *, uint64_t, __n128))v12)(v15, v11, v14);
  swift_release(*(_QWORD *)&v15[*(int *)(v13 + 28)]);
  v16 = (_QWORD *)((char *)v9 + v1[16]);
  v17 = type metadata accessor for Game(0);
  v18 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v16, 1, v17);
  v19 = v39;
  if (!v18)
  {
    v35 = v7;
    swift_bridgeObjectRelease(v16[1]);
    swift_bridgeObjectRelease(v16[3]);
    swift_bridgeObjectRelease(v16[5]);
    v20 = (char *)v16 + *(int *)(v17 + 28);
    v21 = type metadata accessor for Date(0);
    v22 = *(_QWORD *)(v21 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
      (*(void (**)(char *, uint64_t))(v22 + 8))(v20, v21);
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v16 + *(int *)(v17 + 60) + 8));
    v19 = v39;
    v7 = v35;
  }
  v23 = v3 | v7 | 7;
  v24 = (((v3 + 16) & ~v3) + v19 + v7) & ~v7;
  v25 = v24 + v8;
  v26 = (char *)v9 + v1[17];
  v27 = type metadata accessor for PageID(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(v26, v27);
  v28 = type metadata accessor for AccessPointContainer(0);
  v29 = &v26[*(int *)(v28 + 20)];
  v30 = type metadata accessor for PageMetrics(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(v29, v30);
  swift_bridgeObjectRelease(*(_QWORD *)&v26[*(int *)(v28 + 28)]);
  swift_release(*(_QWORD *)((char *)v9 + v1[18]));
  swift_release(*(_QWORD *)((char *)v9 + v1[19]));
  v31 = (_QWORD *)((char *)v9 + v1[20]);
  swift_release(*v31);
  swift_release(v31[1]);
  v32 = (char *)v31 + *(int *)(sub_100003304(&qword_10010CC18) + 32);
  v33 = sub_100003304(&qword_10010CC20);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v32, v33);
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v38 + v24, v37);
  return swift_deallocObject(v38, v25, v23);
}

void sub_10003286C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;

  v1 = *(_QWORD *)(type metadata accessor for AccessPointShaderTransitionView(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for GeometryProxy(0, v4) - 8) + 80);
  sub_10002D87C(v0 + ((v2 + v3 + v5) & ~v5));
}

unint64_t sub_1000328D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010D280;
  if (!qword_10010D280)
  {
    v1 = sub_100006E54(&qword_10010D250);
    sub_100011054(&qword_10010D288, &qword_10010D248, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10010D280);
  }
  return result;
}

uint64_t sub_100032960()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10003298C(uint64_t a1)
{
  double *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  _QWORD *v11;

  v4 = *((_QWORD *)v1 + 2);
  v5 = *((_QWORD *)v1 + 3);
  v6 = *((_QWORD *)v1 + 4);
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc(dword_10010D294);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_1000263E8;
  return sub_100024004(v7, v8, v9, v10, a1, v4, v5, v6);
}

unint64_t sub_100032A28()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010D338;
  if (!qword_10010D338)
  {
    v1 = sub_100006E54(&qword_10010D318);
    sub_100011054(&qword_10010D340, &qword_10010D310, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    sub_100011054(&qword_10010D348, &qword_10010D2F8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10010D338);
  }
  return result;
}

uint64_t sub_100032AD0(uint64_t a1)
{
  return sub_10003440C(a1, type metadata accessor for AccessPointShaderTransitionView, (uint64_t (*)(uint64_t, uint64_t))sub_10002BB58);
}

_QWORD *sub_100032AE4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[4];
  v3 = a1[25];
  v4 = a1[26];
  swift_retain(a1[29]);
  swift_retain(v2);
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

_QWORD *sub_100032B34(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[4];
  v3 = a1[25];
  v4 = a1[29];
  swift_release(a1[26]);
  swift_release(v2);
  swift_release(v3);
  swift_release(v4);
  return a1;
}

uint64_t sub_100032B90()
{
  return sub_100030660((uint64_t (*)(uint64_t))sub_10002C02C);
}

uint64_t sub_100032B9C()
{
  return sub_100032BB4(1);
}

uint64_t sub_100032BB4(char a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[9];
  uint64_t v8;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_BYTE *)(v2 + 128);
  v4 = *(_QWORD *)(v2 + 136);
  v7[1] = v3;
  v8 = v4;
  v7[0] = a1;
  v5 = sub_100003304(&qword_10010CDA0);
  return State.wrappedValue.setter(v7, v5);
}

uint64_t sub_100032C10(uint64_t a1)
{
  swift_retain(*(_QWORD *)(a1 + 32));
  return a1;
}

uint64_t sub_100032C38(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  char *v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;

  v2 = v1;
  v3 = type metadata accessor for GeometryProxy(0, a1);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 16) & ~v5;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = (int *)type metadata accessor for AccessPointShaderTransitionView(0);
  v9 = *((_QWORD *)v8 - 1);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v6 + v7 + v10) & ~v10;
  v40 = *(_QWORD *)(v9 + 64);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2 + v6, v3);
  v12 = v2 + v11;
  swift_release(*(_QWORD *)(v2 + v11 + 8));
  swift_release(*(_QWORD *)(v2 + v11 + 48));
  swift_release(*(_QWORD *)(v2 + v11 + 64));
  swift_release(*(_QWORD *)(v2 + v11 + 80));
  swift_release(*(_QWORD *)(v2 + v11 + 96));
  swift_release(*(_QWORD *)(v2 + v11 + 120));
  swift_release(*(_QWORD *)(v2 + v11 + 136));
  v13 = v2 + v11 + v8[14];
  v14 = type metadata accessor for AccessPointAnchoring(0);
  v15 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8);
  v15(v13, v14);
  v16 = sub_100003304(&qword_10010CC08);
  v17 = swift_release(*(_QWORD *)(v13 + *(int *)(v16 + 28)));
  v18 = v2 + v11 + v8[15];
  ((void (*)(uint64_t, uint64_t, __n128))v15)(v18, v14, v17);
  v19 = v2;
  swift_release(*(_QWORD *)(v18 + *(int *)(v16 + 28)));
  v20 = (_QWORD *)(v2 + v11 + v8[16]);
  v21 = type metadata accessor for Game(0);
  v22 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v20, 1, v21);
  v23 = v40;
  if (!v22)
  {
    v24 = v10;
    v39 = v11;
    v25 = v19;
    swift_bridgeObjectRelease(v20[1]);
    swift_bridgeObjectRelease(v20[3]);
    swift_bridgeObjectRelease(v20[5]);
    v26 = (char *)v20 + *(int *)(v21 + 28);
    v27 = type metadata accessor for Date(0);
    v28 = *(_QWORD *)(v27 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
      (*(void (**)(char *, uint64_t))(v28 + 8))(v26, v27);
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v20 + *(int *)(v21 + 60) + 8));
    v19 = v25;
    v11 = v39;
    v23 = v40;
    v10 = v24;
  }
  v29 = v11 + v23;
  v30 = v12 + v8[17];
  v31 = type metadata accessor for PageID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(v30, v31);
  v32 = type metadata accessor for AccessPointContainer(0);
  v33 = v30 + *(int *)(v32 + 20);
  v34 = type metadata accessor for PageMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 8))(v33, v34);
  swift_bridgeObjectRelease(*(_QWORD *)(v30 + *(int *)(v32 + 28)));
  swift_release(*(_QWORD *)(v12 + v8[18]));
  swift_release(*(_QWORD *)(v12 + v8[19]));
  v35 = (_QWORD *)(v12 + v8[20]);
  swift_release(*v35);
  swift_release(v35[1]);
  v36 = (char *)v35 + *(int *)(sub_100003304(&qword_10010CC18) + 32);
  v37 = sub_100003304(&qword_10010CC20);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v37 - 8) + 8))(v36, v37);
  return swift_deallocObject(v19, v29, v5 | v10 | 7);
}

uint64_t sub_100032F08(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(type metadata accessor for GeometryProxy(0, a1) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AccessPointShaderTransitionView(0) - 8) + 80);
  return sub_10002BF0C(v1 + v3, v1 + ((v3 + v4 + v5) & ~v5));
}

uint64_t sub_100032F68()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

double sub_100032F88(uint64_t a1, char a2)
{
  double result;

  if ((a2 & 1) == 0)
    *(_QWORD *)&result = swift_release(a1).n128_u64[0];
  return result;
}

uint64_t sub_100032F94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003304(&qword_10010CA78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t *sub_100032FDC(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  void (*v24)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v33;
  char *__dst;
  uint64_t v35;
  unsigned int (*v36)(char *, uint64_t, uint64_t);
  char *v37;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v7 = a3[5];
    v8 = (uint64_t *)((char *)a1 + v7);
    v9 = (uint64_t *)((char *)a2 + v7);
    v10 = (int *)type metadata accessor for Game(0);
    v11 = *((_QWORD *)v10 - 1);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v11 + 48))(v9, 1, v10))
    {
      v12 = sub_100003304(&qword_10010CA78);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      v35 = v11;
      v14 = v9[1];
      *v8 = *v9;
      v8[1] = v14;
      v15 = v9[3];
      v8[2] = v9[2];
      v8[3] = v15;
      v16 = v9[5];
      v8[4] = v9[4];
      v8[5] = v16;
      v17 = v10[7];
      __dst = (char *)v8 + v17;
      v37 = (char *)v9 + v17;
      v18 = type metadata accessor for Date(0);
      v33 = *(_QWORD *)(v18 - 8);
      v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48);
      swift_bridgeObjectRetain(v14);
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(v16);
      if (v36(v37, 1, v18))
      {
        v19 = sub_100003304(&qword_10010CC10);
        memcpy(__dst, v37, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v33 + 16))(__dst, v37, v18);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(__dst, 0, 1, v18);
      }
      *(_QWORD *)((char *)v8 + v10[8]) = *(_QWORD *)((char *)v9 + v10[8]);
      *((_BYTE *)v8 + v10[9]) = *((_BYTE *)v9 + v10[9]);
      *((_BYTE *)v8 + v10[10]) = *((_BYTE *)v9 + v10[10]);
      *((_BYTE *)v8 + v10[11]) = *((_BYTE *)v9 + v10[11]);
      *((_BYTE *)v8 + v10[12]) = *((_BYTE *)v9 + v10[12]);
      *((_BYTE *)v8 + v10[13]) = *((_BYTE *)v9 + v10[13]);
      *((_BYTE *)v8 + v10[14]) = *((_BYTE *)v9 + v10[14]);
      v20 = v10[15];
      v21 = (_QWORD *)((char *)v8 + v20);
      v22 = (_QWORD *)((char *)v9 + v20);
      v23 = v22[1];
      *v21 = *v22;
      v21[1] = v23;
      v24 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v35 + 56);
      swift_bridgeObjectRetain(v23);
      v24(v8, 0, 1, v10);
    }
    v25 = a3[7];
    *(uint64_t *)((char *)v4 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    v26 = (char *)v4 + v25;
    v27 = (char *)a2 + v25;
    v28 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v26, v27, v28);
    v29 = a3[8];
    v30 = (uint64_t *)((char *)v4 + v29);
    v31 = (uint64_t *)((char *)a2 + v29);
    v13 = v31[1];
    *v30 = *v31;
    v30[1] = v13;
  }
  swift_retain(v13);
  return v4;
}

double sub_10003325C(uint64_t a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;

  v4 = (_QWORD *)(a1 + a2[5]);
  v5 = type metadata accessor for Game(0);
  if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    swift_bridgeObjectRelease(v4[1]);
    swift_bridgeObjectRelease(v4[3]);
    swift_bridgeObjectRelease(v4[5]);
    v6 = (char *)v4 + *(int *)(v5 + 28);
    v7 = type metadata accessor for Date(0);
    v8 = *(_QWORD *)(v7 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
      (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v4 + *(int *)(v5 + 60) + 8));
  }
  v9 = a1 + a2[7];
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + a2[8] + 8)).n128_u64[0];
  return result;
}

_OWORD *sub_10003335C(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  void (*v22)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v32;
  unsigned int (*v33)(char *, uint64_t, uint64_t);
  char *v34;
  char *__dst;
  uint64_t v36;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (_QWORD *)((char *)a1 + v6);
  v8 = (_QWORD *)((char *)a2 + v6);
  v9 = (int *)type metadata accessor for Game(0);
  v10 = *((_QWORD *)v9 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_100003304(&qword_10010CA78);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v36 = v10;
    v12 = v8[1];
    *v7 = *v8;
    v7[1] = v12;
    v13 = v8[3];
    v7[2] = v8[2];
    v7[3] = v13;
    v14 = v8[5];
    v7[4] = v8[4];
    v7[5] = v14;
    v15 = v9[7];
    v34 = (char *)v8 + v15;
    __dst = (char *)v7 + v15;
    v16 = type metadata accessor for Date(0);
    v32 = *(_QWORD *)(v16 - 8);
    v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v14);
    if (v33(v34, 1, v16))
    {
      v17 = sub_100003304(&qword_10010CC10);
      memcpy(__dst, v34, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v32 + 16))(__dst, v34, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(__dst, 0, 1, v16);
    }
    *(_QWORD *)((char *)v7 + v9[8]) = *(_QWORD *)((char *)v8 + v9[8]);
    *((_BYTE *)v7 + v9[9]) = *((_BYTE *)v8 + v9[9]);
    *((_BYTE *)v7 + v9[10]) = *((_BYTE *)v8 + v9[10]);
    *((_BYTE *)v7 + v9[11]) = *((_BYTE *)v8 + v9[11]);
    *((_BYTE *)v7 + v9[12]) = *((_BYTE *)v8 + v9[12]);
    *((_BYTE *)v7 + v9[13]) = *((_BYTE *)v8 + v9[13]);
    *((_BYTE *)v7 + v9[14]) = *((_BYTE *)v8 + v9[14]);
    v18 = v9[15];
    v19 = (_QWORD *)((char *)v7 + v18);
    v20 = (_QWORD *)((char *)v8 + v18);
    v21 = v20[1];
    *v19 = *v20;
    v19[1] = v21;
    v22 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v36 + 56);
    swift_bridgeObjectRetain(v21);
    v22(v7, 0, 1, v9);
  }
  v23 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  v24 = (char *)a1 + v23;
  v25 = (char *)a2 + v23;
  v26 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
  v27 = a3[8];
  v28 = (_QWORD *)((char *)a1 + v27);
  v29 = (_QWORD *)((char *)a2 + v27);
  v30 = v29[1];
  *v28 = *v29;
  v28[1] = v30;
  swift_retain(v30);
  return a1;
}

_QWORD *sub_1000335B4(_QWORD *a1, _QWORD *a2, int *a3)
{
  int *v3;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int *v9;
  uint64_t v10;
  uint64_t (*v11)(_QWORD *, uint64_t, int *);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(char *, uint64_t, uint64_t);
  int v33;
  size_t v34;
  void *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  void (*v40)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  unsigned int (*v57)(char *, uint64_t, uint64_t);
  char *v58;
  void *v59;
  char *__dst;
  int *v61;
  int *v62;

  v3 = a3;
  *a1 = *a2;
  a1[1] = a2[1];
  v6 = a3[5];
  v7 = (_QWORD *)((char *)a1 + v6);
  v8 = (_QWORD *)((char *)a2 + v6);
  v9 = (int *)type metadata accessor for Game(0);
  v10 = *((_QWORD *)v9 - 1);
  v11 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (v13)
    {
      sub_1000106F0((uint64_t)v7, type metadata accessor for Game);
      goto LABEL_7;
    }
    v62 = v3;
    *v7 = *v8;
    v21 = v8[1];
    v22 = v7[1];
    v7[1] = v21;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRelease(v22);
    v7[2] = v8[2];
    v23 = v8[3];
    v24 = v7[3];
    v7[3] = v23;
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRelease(v24);
    v7[4] = v8[4];
    v25 = v8[5];
    v26 = v7[5];
    v7[5] = v25;
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRelease(v26);
    v27 = v9[7];
    v28 = (char *)v7 + v27;
    v29 = (char *)v8 + v27;
    v30 = type metadata accessor for Date(0);
    v31 = *(_QWORD *)(v30 - 8);
    v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48);
    v59 = v28;
    LODWORD(v28) = v32(v28, 1, v30);
    v33 = v32(v29, 1, v30);
    if ((_DWORD)v28)
    {
      if (!v33)
      {
        (*(void (**)(void *, char *, uint64_t))(v31 + 16))(v59, v29, v30);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v59, 0, 1, v30);
        goto LABEL_18;
      }
      v34 = *(_QWORD *)(*(_QWORD *)(sub_100003304(&qword_10010CC10) - 8) + 64);
      v35 = v59;
    }
    else
    {
      if (!v33)
      {
        (*(void (**)(void *, char *, uint64_t))(v31 + 24))(v59, v29, v30);
        goto LABEL_18;
      }
      (*(void (**)(void *, uint64_t))(v31 + 8))(v59, v30);
      v34 = *(_QWORD *)(*(_QWORD *)(sub_100003304(&qword_10010CC10) - 8) + 64);
      v35 = v59;
    }
    memcpy(v35, v29, v34);
LABEL_18:
    *(_QWORD *)((char *)v7 + v9[8]) = *(_QWORD *)((char *)v8 + v9[8]);
    *((_BYTE *)v7 + v9[9]) = *((_BYTE *)v8 + v9[9]);
    *((_BYTE *)v7 + v9[10]) = *((_BYTE *)v8 + v9[10]);
    *((_BYTE *)v7 + v9[11]) = *((_BYTE *)v8 + v9[11]);
    *((_BYTE *)v7 + v9[12]) = *((_BYTE *)v8 + v9[12]);
    *((_BYTE *)v7 + v9[13]) = *((_BYTE *)v8 + v9[13]);
    *((_BYTE *)v7 + v9[14]) = *((_BYTE *)v8 + v9[14]);
    v41 = v9[15];
    v42 = (_QWORD *)((char *)v7 + v41);
    v43 = (_QWORD *)((char *)v8 + v41);
    *v42 = *v43;
    v44 = v43[1];
    v45 = v42[1];
    v42[1] = v44;
    swift_bridgeObjectRetain(v44);
    swift_bridgeObjectRelease(v45);
    v3 = v62;
    goto LABEL_19;
  }
  if (v13)
  {
LABEL_7:
    v20 = sub_100003304(&qword_10010CA78);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_19;
  }
  *v7 = *v8;
  v14 = v8[1];
  v7[1] = v14;
  v7[2] = v8[2];
  v15 = v8[3];
  v7[3] = v15;
  v7[4] = v8[4];
  v16 = v8[5];
  v7[5] = v16;
  v17 = v9[7];
  __dst = (char *)v7 + v17;
  v61 = v3;
  v58 = (char *)v8 + v17;
  v18 = type metadata accessor for Date(0);
  v56 = *(_QWORD *)(v18 - 8);
  v57 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v16);
  if (v57(v58, 1, v18))
  {
    v19 = sub_100003304(&qword_10010CC10);
    memcpy(__dst, v58, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v56 + 16))(__dst, v58, v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v56 + 56))(__dst, 0, 1, v18);
  }
  v3 = v61;
  *(_QWORD *)((char *)v7 + v9[8]) = *(_QWORD *)((char *)v8 + v9[8]);
  *((_BYTE *)v7 + v9[9]) = *((_BYTE *)v8 + v9[9]);
  *((_BYTE *)v7 + v9[10]) = *((_BYTE *)v8 + v9[10]);
  *((_BYTE *)v7 + v9[11]) = *((_BYTE *)v8 + v9[11]);
  *((_BYTE *)v7 + v9[12]) = *((_BYTE *)v8 + v9[12]);
  *((_BYTE *)v7 + v9[13]) = *((_BYTE *)v8 + v9[13]);
  *((_BYTE *)v7 + v9[14]) = *((_BYTE *)v8 + v9[14]);
  v36 = v9[15];
  v37 = (_QWORD *)((char *)v7 + v36);
  v38 = (_QWORD *)((char *)v8 + v36);
  *v37 = *v38;
  v39 = v38[1];
  v37[1] = v39;
  v40 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v10 + 56);
  swift_bridgeObjectRetain(v39);
  v40(v7, 0, 1, v9);
LABEL_19:
  *(_QWORD *)((char *)a1 + v3[6]) = *(_QWORD *)((char *)a2 + v3[6]);
  v46 = v3[7];
  v47 = (char *)a1 + v46;
  v48 = (char *)a2 + v46;
  v49 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 24))(v47, v48, v49);
  v50 = v3[8];
  v51 = (_QWORD *)((char *)a1 + v50);
  v52 = (_QWORD *)((char *)a2 + v50);
  v53 = v52[1];
  v54 = v51[1];
  *v51 = *v52;
  v51[1] = v53;
  swift_retain(v53);
  swift_release(v54);
  return a1;
}

_OWORD *sub_100033A48(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *__dst;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (_OWORD *)((char *)a1 + v6);
  v8 = (_OWORD *)((char *)a2 + v6);
  v9 = (int *)type metadata accessor for Game(0);
  v10 = *((_QWORD *)v9 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_100003304(&qword_10010CA78);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v12 = v8[1];
    *v7 = *v8;
    v7[1] = v12;
    v7[2] = v8[2];
    v13 = v9[7];
    __dst = (char *)v7 + v13;
    v14 = (char *)v8 + v13;
    v15 = type metadata accessor for Date(0);
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      v17 = sub_100003304(&qword_10010CC10);
      memcpy(__dst, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(__dst, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
    }
    *(_QWORD *)((char *)v7 + v9[8]) = *(_QWORD *)((char *)v8 + v9[8]);
    *((_BYTE *)v7 + v9[9]) = *((_BYTE *)v8 + v9[9]);
    *((_BYTE *)v7 + v9[10]) = *((_BYTE *)v8 + v9[10]);
    *((_BYTE *)v7 + v9[11]) = *((_BYTE *)v8 + v9[11]);
    *((_BYTE *)v7 + v9[12]) = *((_BYTE *)v8 + v9[12]);
    *((_BYTE *)v7 + v9[13]) = *((_BYTE *)v8 + v9[13]);
    *((_BYTE *)v7 + v9[14]) = *((_BYTE *)v8 + v9[14]);
    *(_OWORD *)((char *)v7 + v9[15]) = *(_OWORD *)((char *)v8 + v9[15]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v10 + 56))(v7, 0, 1, v9);
  }
  v18 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  return a1;
}

_OWORD *sub_100033C48(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int *v9;
  uint64_t v10;
  uint64_t (*v11)(_QWORD *, uint64_t, int *);
  int v12;
  int v13;
  __int128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t, uint64_t);
  int v32;
  size_t v33;
  void *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  char *__dst;
  void *__dsta;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (_QWORD *)((char *)a1 + v6);
  v8 = (_QWORD *)((char *)a2 + v6);
  v9 = (int *)type metadata accessor for Game(0);
  v10 = *((_QWORD *)v9 - 1);
  v11 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (v13)
    {
      sub_1000106F0((uint64_t)v7, type metadata accessor for Game);
      goto LABEL_7;
    }
    v21 = v8[1];
    v22 = v7[1];
    *v7 = *v8;
    v7[1] = v21;
    swift_bridgeObjectRelease(v22);
    v23 = v8[3];
    v24 = v7[3];
    v7[2] = v8[2];
    v7[3] = v23;
    swift_bridgeObjectRelease(v24);
    v25 = v8[5];
    v26 = v7[5];
    v7[4] = v8[4];
    v7[5] = v25;
    swift_bridgeObjectRelease(v26);
    v27 = v9[7];
    v28 = (char *)v7 + v27;
    v29 = (char *)v8 + v27;
    v30 = type metadata accessor for Date(0);
    v48 = *(_QWORD *)(v30 - 8);
    v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v48 + 48);
    __dsta = v28;
    LODWORD(v28) = v31(v28, 1, v30);
    v32 = v31(v29, 1, v30);
    if ((_DWORD)v28)
    {
      if (!v32)
      {
        (*(void (**)(void *, char *, uint64_t))(v48 + 32))(__dsta, v29, v30);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v48 + 56))(__dsta, 0, 1, v30);
        goto LABEL_18;
      }
      v33 = *(_QWORD *)(*(_QWORD *)(sub_100003304(&qword_10010CC10) - 8) + 64);
      v34 = __dsta;
    }
    else
    {
      if (!v32)
      {
        (*(void (**)(void *, char *, uint64_t))(v48 + 40))(__dsta, v29, v30);
        goto LABEL_18;
      }
      (*(void (**)(void *, uint64_t))(v48 + 8))(__dsta, v30);
      v33 = *(_QWORD *)(*(_QWORD *)(sub_100003304(&qword_10010CC10) - 8) + 64);
      v34 = __dsta;
    }
    memcpy(v34, v29, v33);
LABEL_18:
    *(_QWORD *)((char *)v7 + v9[8]) = *(_QWORD *)((char *)v8 + v9[8]);
    *((_BYTE *)v7 + v9[9]) = *((_BYTE *)v8 + v9[9]);
    *((_BYTE *)v7 + v9[10]) = *((_BYTE *)v8 + v9[10]);
    *((_BYTE *)v7 + v9[11]) = *((_BYTE *)v8 + v9[11]);
    *((_BYTE *)v7 + v9[12]) = *((_BYTE *)v8 + v9[12]);
    *((_BYTE *)v7 + v9[13]) = *((_BYTE *)v8 + v9[13]);
    *((_BYTE *)v7 + v9[14]) = *((_BYTE *)v8 + v9[14]);
    v35 = v9[15];
    v36 = (_QWORD *)((char *)v7 + v35);
    v37 = (_QWORD *)((char *)v8 + v35);
    v39 = *v37;
    v38 = v37[1];
    v40 = v36[1];
    *v36 = v39;
    v36[1] = v38;
    swift_bridgeObjectRelease(v40);
    goto LABEL_19;
  }
  if (v13)
  {
LABEL_7:
    v20 = sub_100003304(&qword_10010CA78);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_19;
  }
  v14 = *((_OWORD *)v8 + 1);
  *(_OWORD *)v7 = *(_OWORD *)v8;
  *((_OWORD *)v7 + 1) = v14;
  *((_OWORD *)v7 + 2) = *((_OWORD *)v8 + 2);
  v15 = v9[7];
  __dst = (char *)v7 + v15;
  v16 = (char *)v8 + v15;
  v17 = type metadata accessor for Date(0);
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    v19 = sub_100003304(&qword_10010CC10);
    memcpy(__dst, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(__dst, v16, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(__dst, 0, 1, v17);
  }
  *(_QWORD *)((char *)v7 + v9[8]) = *(_QWORD *)((char *)v8 + v9[8]);
  *((_BYTE *)v7 + v9[9]) = *((_BYTE *)v8 + v9[9]);
  *((_BYTE *)v7 + v9[10]) = *((_BYTE *)v8 + v9[10]);
  *((_BYTE *)v7 + v9[11]) = *((_BYTE *)v8 + v9[11]);
  *((_BYTE *)v7 + v9[12]) = *((_BYTE *)v8 + v9[12]);
  *((_BYTE *)v7 + v9[13]) = *((_BYTE *)v8 + v9[13]);
  *((_BYTE *)v7 + v9[14]) = *((_BYTE *)v8 + v9[14]);
  *(_OWORD *)((char *)v7 + v9[15]) = *(_OWORD *)((char *)v8 + v9[15]);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v10 + 56))(v7, 0, 1, v9);
LABEL_19:
  v41 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  v42 = (char *)a1 + v41;
  v43 = (char *)a2 + v41;
  v44 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 40))(v42, v43, v44);
  v45 = a3[8];
  v46 = *(_QWORD *)((char *)a1 + v45 + 8);
  *(_OWORD *)((char *)a1 + v45) = *(_OWORD *)((char *)a2 + v45);
  swift_release(v46);
  return a1;
}

uint64_t sub_100034020(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003402C);
}

uint64_t sub_10003402C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;

  v6 = sub_100003304(&qword_10010CA78);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v12 = *(_QWORD *)(a1 + a3[8]);
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  return (v12 + 1);
}

uint64_t sub_1000340D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000340E0);
}

uint64_t sub_1000340E0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v8 = sub_100003304(&qword_10010CA78);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  result = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  *(_QWORD *)(a1 + a4[8]) = (a2 - 1);
  return result;
}

void sub_100034184(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  v6[0] = &unk_1000C8BC8;
  sub_10001DD8C(319, (unint64_t *)&qword_10010CC98, type metadata accessor for Game, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    v6[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v4 = type metadata accessor for Date(319);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      v6[4] = (char *)&value witness table for () + 64;
      swift_initStructMetadata(a1, 256, 5, v6, a1 + 16);
    }
  }
}

unint64_t sub_100034248()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t OpaqueTypeConformance2;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  ValueMetadata *v12;
  unint64_t v13;
  void *v14;

  result = qword_10010D450;
  if (!qword_10010D450)
  {
    v1 = sub_100006E54(&qword_10010D1A8);
    v2 = sub_100006E54(&qword_10010D198);
    v3 = sub_100006E54(&qword_10010D190);
    v4 = type metadata accessor for AccessPointAnchoring(255);
    v5 = sub_100006E54(&qword_10010D188);
    v11 = sub_100006E54(&qword_10010D180);
    v12 = (ValueMetadata *)&type metadata for Bool;
    v13 = sub_100030350();
    v14 = &protocol witness table for Bool;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    v7 = sub_10001DF0C();
    v11 = v5;
    v12 = &type metadata for AccessPointTransitionView.AnimationState;
    v13 = OpaqueTypeConformance2;
    v14 = (void *)v7;
    v8 = swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    v9 = sub_1000035B4(&qword_10010CE20, (uint64_t (*)(uint64_t))&type metadata accessor for AccessPointAnchoring, (uint64_t)&protocol conformance descriptor for AccessPointAnchoring);
    v11 = v3;
    v12 = (ValueMetadata *)v4;
    v13 = v8;
    v14 = (void *)v9;
    v10 = swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    v11 = v2;
    v12 = (ValueMetadata *)&type metadata for Bool;
    v13 = v10;
    v14 = &protocol witness table for Bool;
    swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    sub_1000035B4(&qword_10010D0A0, (uint64_t (*)(uint64_t))&type metadata accessor for _TaskModifier, (uint64_t)&protocol conformance descriptor for _TaskModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10010D450);
  }
  return result;
}

uint64_t sub_1000343E4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E412C, 1);
}

uint64_t sub_1000343F8(uint64_t a1)
{
  return sub_10003440C(a1, type metadata accessor for RippleView, (uint64_t (*)(uint64_t, uint64_t))sub_10002FBF8);
}

uint64_t sub_10003440C(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(a2(0) - 8) + 80);
  return a3(a1, v3 + ((v5 + 16) & ~v5));
}

uint64_t sub_100034468()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = (int *)type metadata accessor for RippleView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v26 = v0;
  v27 = type metadata accessor for GeometryProxy(0, v6);
  v7 = *(_QWORD *)(v27 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = v0 + v4;
  v11 = (_QWORD *)(v0 + v4 + v1[5]);
  v12 = type metadata accessor for Game(0);
  if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12))
  {
    v22 = v9;
    v23 = v8;
    v24 = v3;
    v25 = (v3 + 16) & ~v3;
    swift_bridgeObjectRelease(v11[1]);
    swift_bridgeObjectRelease(v11[3]);
    swift_bridgeObjectRelease(v11[5]);
    v13 = (char *)v11 + *(int *)(v12 + 28);
    v14 = type metadata accessor for Date(0);
    v15 = *(_QWORD *)(v14 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v14);
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v11 + *(int *)(v12 + 60) + 8));
    v4 = v25;
    v8 = v23;
    v3 = v24;
    v9 = v22;
  }
  v16 = v3 | v8 | 7;
  v17 = (v4 + v5 + v8) & ~v8;
  v18 = v10 + v1[7];
  v19 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
  v20 = swift_release(*(_QWORD *)(v10 + v1[8] + 8));
  (*(void (**)(uint64_t, uint64_t, __n128))(v7 + 8))(v26 + v17, v27, v20);
  return swift_deallocObject(v26, v17 + v9, v16);
}

uint64_t sub_100034604@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;

  v3 = *(_QWORD *)(type metadata accessor for RippleView(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for GeometryProxy(0, v6) - 8) + 80);
  return sub_10002FE54((double *)(v1 + v4), v1 + ((v4 + v5 + v7) & ~v7), a1);
}

uint64_t sub_10003467C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000346A0(uint64_t a1)
{
  uint64_t v1;

  return sub_100031B88(a1, *(void (**)(char *))(v1 + 16));
}

unint64_t sub_1000346A8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_10010D478;
  if (!qword_10010D478)
  {
    v1 = sub_100006E54(&qword_10010D468);
    v2[0] = sub_100006E54(&qword_10010D480);
    v2[1] = sub_100034764(&qword_10010D488, &qword_10010D480, (void (*)(void))sub_1000347CC);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.layerEffect(_:maxSampleOffset:isEnabled:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10010D478);
  }
  return result;
}

uint64_t sub_100034764(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100006E54(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000347CC()
{
  unint64_t result;

  result = qword_10010D490;
  if (!qword_10010D490)
  {
    result = swift_getWitnessTable(&unk_1000C8C3C, &type metadata for OverlayView);
    atomic_store(result, (unint64_t *)&qword_10010D490);
  }
  return result;
}

uint64_t sub_100034814()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v1 = (int *)type metadata accessor for RippleView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  v7 = (_QWORD *)(v0 + v4 + v1[5]);
  v8 = type metadata accessor for Game(0);
  if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8))
  {
    v16 = v5;
    swift_bridgeObjectRelease(v7[1]);
    swift_bridgeObjectRelease(v7[3]);
    swift_bridgeObjectRelease(v7[5]);
    v9 = (char *)v7 + *(int *)(v8 + 28);
    v10 = type metadata accessor for Date(0);
    v11 = *(_QWORD *)(v10 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v7 + *(int *)(v8 + 60) + 8));
    v5 = v16;
  }
  v12 = v4 + v5;
  v13 = v6 + v1[7];
  v14 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  swift_release(*(_QWORD *)(v6 + v1[8] + 8));
  return swift_deallocObject(v0, v12, v3 | 7);
}

uint64_t sub_100034964()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = type metadata accessor for RippleView(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  return (*(uint64_t (**)(void))(v0 + *(int *)(v1 + 32) + ((v2 + 16) & ~v2)))();
}

uint64_t sub_1000349A8(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + 8));
  return a1;
}

_QWORD *initializeBufferWithCopyOfBuffer for OverlayView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain(v3);
  return a1;
}

double destroy for OverlayView(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 8)).n128_u64[0];
  return result;
}

_QWORD *assignWithCopy for OverlayView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain(v3);
  swift_release(v4);
  return a1;
}

uint64_t assignWithTake for OverlayView(uint64_t a1, _OWORD *a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *a2;
  swift_release(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for OverlayView(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OverlayView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for OverlayView()
{
  return &type metadata for OverlayView;
}

uint64_t sub_100034B00()
{
  return sub_100011054(&qword_10010D4B8, &qword_10010D4C0, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
}

uint64_t sub_100034B2C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E4154, 1);
}

uint64_t sub_100034B3C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000296B4(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

unint64_t sub_100034B44()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010D558;
  if (!qword_10010D558)
  {
    v1 = sub_100006E54(&qword_10010D540);
    sub_100011054(&qword_10010D560, &qword_10010D538, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10010D558);
  }
  return result;
}

unint64_t sub_100034BC8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010D568;
  if (!qword_10010D568)
  {
    v1 = sub_100006E54(&qword_10010D528);
    sub_100011054(&qword_10010D570, &qword_10010D520, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10010D568);
  }
  return result;
}

unint64_t sub_100034C4C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010D588;
  if (!qword_10010D588)
  {
    v1 = sub_100006E54(&qword_10010D590);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10010D588);
  }
  return result;
}

uint64_t sub_100034CB0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 168);
  v3 = *(_QWORD *)(a1 + 176);
  v4 = *(_BYTE *)(a1 + 184);
  v5 = *(_QWORD *)(a1 + 192);
  v6 = *(_QWORD *)(a1 + 200);
  v7 = *(_QWORD *)(a1 + 208);
  v8 = *(_BYTE *)(a1 + 216);
  v9 = *(_QWORD *)(a1 + 224);
  v10 = *(_QWORD *)(a1 + 328);
  swift_retain(*(_QWORD *)(a1 + 24));
  sub_10001B35C(v2, v3, v4);
  swift_bridgeObjectRetain(v5);
  sub_10001B35C(v6, v7, v8);
  swift_bridgeObjectRetain(v9);
  swift_retain(v10);
  return a1;
}

uint64_t sub_100034D4C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 168);
  v3 = *(_QWORD *)(a1 + 176);
  v4 = *(_BYTE *)(a1 + 184);
  v5 = *(_QWORD *)(a1 + 192);
  v6 = *(_QWORD *)(a1 + 200);
  v7 = *(_QWORD *)(a1 + 208);
  v8 = *(_BYTE *)(a1 + 216);
  v9 = *(_QWORD *)(a1 + 224);
  v10 = *(_QWORD *)(a1 + 328);
  swift_release(*(_QWORD *)(a1 + 24));
  sub_10001B34C(v2, v3, v4);
  swift_bridgeObjectRelease(v5);
  sub_10001B34C(v6, v7, v8);
  swift_release(v10);
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t sub_100034DE8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 64);
  v5 = *(_BYTE *)(a1 + 72);
  v6 = *(_QWORD *)(a1 + 80);
  sub_10001B35C(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRetain(v2);
  sub_10001B35C(v3, v4, v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t sub_100034E58(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 64);
  v5 = *(_BYTE *)(a1 + 72);
  v6 = *(_QWORD *)(a1 + 80);
  sub_10001B34C(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRelease(v2);
  sub_10001B34C(v3, v4, v5);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t sub_100034EC8()
{
  return sub_100011054(&qword_10010D5E8, &qword_10010D5F0, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
}

uint64_t AccessPointContainer.init(id:pageMetrics:useCase:items:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  v10 = type metadata accessor for PageID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a5, a1, v10);
  v11 = (int *)type metadata accessor for AccessPointContainer(0);
  v12 = a5 + v11[5];
  v13 = type metadata accessor for PageMetrics(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v12, a2, v13);
  *(_BYTE *)(a5 + v11[6]) = a3;
  *(_QWORD *)(a5 + v11[7]) = a4;
  return result;
}

uint64_t type metadata accessor for AccessPointContainer(uint64_t a1)
{
  return sub_100010C88(a1, qword_10010D688, (uint64_t)&nominal type descriptor for AccessPointContainer);
}

uint64_t AccessPointContainer.items.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for AccessPointContainer(0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + *(int *)(v1 + 28)));
}

Swift::Double __swiftcall AccessPointContainer.displayDuration(for:)(Swift::Int a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  Swift::Double result;
  double v12;
  uint64_t v13;
  char v14;
  void (*v15)(_BYTE *, uint64_t, uint64_t, uint64_t);
  double *v16;
  int v17;
  _BYTE v19[40];

  v3 = sub_100003304(&qword_10010D5F8);
  __chkstk_darwin(v3);
  v5 = &v19[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = type metadata accessor for AccessPointHighlight(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v19[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for AccessPointContainer(0) + 28));
  v12 = 0.0;
  if (*(_QWORD *)(v10 + 16) <= a1)
    return v12;
  if ((a1 & 0x8000000000000000) == 0)
  {
    sub_100024C64(v10 + 40 * a1 + 32, (uint64_t)v19);
    v13 = sub_100003304(&qword_10010D600);
    v14 = swift_dynamicCast(v5, v19, v13, v6, 6);
    v15 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v7 + 56);
    if ((v14 & 1) != 0)
    {
      v15(v5, 0, 1, v6);
      sub_100010F0C((uint64_t)v5, (uint64_t)v9, type metadata accessor for AccessPointHighlight);
      v16 = (double *)&v9[*(int *)(v6 + 36)];
      v12 = *v16;
      v17 = *((unsigned __int8 *)v16 + 8);
      sub_1000106F0((uint64_t)v9, type metadata accessor for AccessPointHighlight);
      if (v17)
        return 0.0;
    }
    else
    {
      v15(v5, 1, 1, v6);
      sub_100010ED0((uint64_t)v5, &qword_10010D5F8);
    }
    return v12;
  }
  __break(1u);
  return result;
}

uint64_t AccessPointContainer.componentView(for:)(unint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  _BYTE v6[40];

  result = type metadata accessor for AccessPointContainer(0);
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v4 = *(_QWORD *)(v1 + *(int *)(result + 28));
    if (*(_QWORD *)(v4 + 16) > a1)
    {
      sub_100024C64(v4 + 40 * a1 + 32, (uint64_t)v6);
      v5 = sub_100024CA8();
      return ComponentView.init(_:content:)(v6, sub_1000C0B90, 0, &type metadata for _ComponentContentByType, v5);
    }
  }
  __break(1u);
  return result;
}

void sub_100035208(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  _QWORD v17[2];
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;

  v29 = sub_100003304(&qword_10010D7F8);
  v26 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v25 = (char *)v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_100003304(&qword_10010D800);
  v28 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v27 = (char *)v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100003304(&qword_10010D808);
  v23 = *(_QWORD *)(v4 - 8);
  v24 = v4;
  __chkstk_darwin(v4);
  v21 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for MediaArtwork(0);
  v20 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v19 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100003304(&qword_10010D810);
  v17[1] = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v7 = sub_100003304(&qword_10010D818);
  v17[0] = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v8 = type metadata accessor for AccessPointIconType(0);
  __chkstk_darwin(v8);
  v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_100003304(&qword_10010D820);
  v31 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  sub_100003C28(a1, v13);
  v15 = sub_100038BB4();
  v32 = v12;
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AccessPointIconType.CodingKeys, &type metadata for AccessPointIconType.CodingKeys, v15, v13, v14);
  sub_100007878(v34, (uint64_t)v10, type metadata accessor for AccessPointIconType);
  v16 = (char *)sub_1000354B8 + 4 * byte_1000C8CA0[swift_getEnumCaseMultiPayload(v10, v8)];
  __asm { BR              X10 }
}

uint64_t sub_1000354B8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *v0;
  v5 = v0[1];
  *(_BYTE *)(v3 - 104) = 0;
  v6 = sub_100038D90();
  v8 = *(_QWORD *)(v3 - 136);
  v7 = *(_QWORD *)(v3 - 128);
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for AccessPointIconType.SymbolCodingKeys, v3 - 104, v7, &type metadata for AccessPointIconType.SymbolCodingKeys, v6);
  KeyedEncodingContainer.encode(_:forKey:)(v4, v5, v9, v2);
  swift_bridgeObjectRelease(v5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 272) + 8))(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 152) + 8))(v8, v7);
}

uint64_t sub_100035824@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v41[6];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  _QWORD *v60;
  char *v61;

  v50 = a2;
  v3 = sub_100003304(&qword_10010D788);
  v47 = *(_QWORD *)(v3 - 8);
  v48 = v3;
  __chkstk_darwin(v3);
  v54 = (char *)v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = sub_100003304(&qword_10010D790);
  v49 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59);
  v58 = (char *)v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003304(&qword_10010D798);
  v45 = *(_QWORD *)(v6 - 8);
  v46 = v6;
  __chkstk_darwin(v6);
  v53 = (char *)v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = sub_100003304(&qword_10010D7A0);
  v43 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v52 = (char *)v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_100003304(&qword_10010D7A8);
  v41[5] = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v51 = (char *)v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003304(&qword_10010D7B0);
  v56 = *(_QWORD *)(v10 - 8);
  v57 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = type metadata accessor for AccessPointIconType(0);
  __chkstk_darwin(v55);
  v41[4] = (char *)v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)v41 - v15;
  __chkstk_darwin(v17);
  __chkstk_darwin(v18);
  v20 = (char *)v41 - v19;
  __chkstk_darwin(v21);
  v23 = (char *)v41 - v22;
  __chkstk_darwin(v24);
  v26 = (char *)v41 - v25;
  v27 = a1[3];
  v28 = a1[4];
  v60 = a1;
  sub_100003C28(a1, v27);
  v29 = sub_100038BB4();
  v30 = v61;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AccessPointIconType.CodingKeys, &type metadata for AccessPointIconType.CodingKeys, v29, v27, v28);
  if (!v30)
  {
    v41[2] = v23;
    v41[3] = v20;
    v41[1] = v16;
    v61 = v26;
    v31 = v57;
    v32 = KeyedDecodingContainer.allKeys.getter(v57);
    v33 = v32;
    if (*(_QWORD *)(v32 + 16) == 1)
      __asm { BR              X10 }
    v34 = v12;
    v35 = type metadata accessor for DecodingError(0);
    swift_allocError(v35, &protocol witness table for DecodingError, 0, 0);
    v37 = v36;
    sub_100003304(&qword_10010BFA0);
    *v37 = v55;
    v38 = KeyedDecodingContainer.codingPath.getter(v31);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v38, 0xD00000000000002BLL, 0x80000001000CF850, 0);
    v39 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v35 - 8) + 104))(v37, enum case for DecodingError.typeMismatch(_:), v35);
    swift_willThrow(v39);
    swift_bridgeObjectRelease(v33);
    (*(void (**)(char *, uint64_t))(v56 + 8))(v34, v31);
  }
  return sub_100004624(v60);
}

uint64_t sub_1000361BC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100038D08();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000361E4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100038D08();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10003620C()
{
  _BYTE *v0;

  if (*v0)
    return 0x69537261656E696CLL;
  else
    return 0x6D614E6567616D69;
}

uint64_t sub_100036250@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000386E0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100036274(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100038C80();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10003629C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100038C80();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000362C4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000362F0 + 4 * byte_1000C8CAA[*v0]))(0x6C6F626D7973, 0xE600000000000000);
}

uint64_t sub_1000362F0()
{
  return 0x7641726579616C70;
}

uint64_t sub_100036310()
{
  return 0x6B726F77747261;
}

uint64_t sub_100036328()
{
  return 0x656C646E7562;
}

uint64_t sub_100036338()
{
  return 0x6567616D69;
}

uint64_t sub_10003634C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000387E8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100036370(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100038BB4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100036398(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100038BB4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000363C0()
{
  return 0x7461446567616D69;
}

uint64_t sub_1000363DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x7461446567616D69 && a2 == 0xE900000000000061)
  {
    result = swift_bridgeObjectRelease(0xE900000000000061);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7461446567616D69, 0xE900000000000061, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_10003647C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100038BF8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000364A4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100038BF8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000364CC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100038D4C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000364F4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100038D4C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10003651C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100038D90();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100036544(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100038D90();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10003656C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100035824(a1, a2);
}

void sub_100036580(_QWORD *a1)
{
  sub_100035208(a1);
}

uint64_t AccessPointContainer.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for PageID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t AccessPointContainer.id.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for PageID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t AccessPointContainer.pageMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AccessPointContainer(0) + 20);
  v4 = type metadata accessor for PageMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AccessPointContainer.pageMetrics.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AccessPointContainer(0) + 20);
  v4 = type metadata accessor for PageMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AccessPointContainer.pageMetrics.modify())()
{
  type metadata accessor for AccessPointContainer(0);
  return property wrapper backing initializer of Shelf.items;
}

uint64_t AccessPointContainer.useCase.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AccessPointContainer(0) + 24));
}

uint64_t AccessPointContainer.useCase.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AccessPointContainer(0);
  *(_BYTE *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*AccessPointContainer.useCase.modify())()
{
  type metadata accessor for AccessPointContainer(0);
  return property wrapper backing initializer of Shelf.items;
}

uint64_t AccessPointContainer.items.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for AccessPointContainer(0) + 28);
  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + v3));
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*AccessPointContainer.items.modify())()
{
  type metadata accessor for AccessPointContainer(0);
  return property wrapper backing initializer of Shelf.items;
}

uint64_t AccessPointContainer.cornerRadii(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  char v29;
  void (*v30)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[40];

  v3 = sub_100003304(&qword_10010CA70);
  __chkstk_darwin(v3);
  v5 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v45 = (uint64_t)&v43 - v7;
  v8 = sub_100003304(&qword_10010D5F8);
  __chkstk_darwin(v8);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v43 - v12;
  __chkstk_darwin(v14);
  v16 = (char *)&v43 - v15;
  __chkstk_darwin(v17);
  v44 = (uint64_t)&v43 - v18;
  __chkstk_darwin(v19);
  v21 = (char *)&v43 - v20;
  v22 = type metadata accessor for AccessPointHighlight(0);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v25 = (char *)&v43 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = type metadata accessor for AccessPointContainer(0);
  v27 = *(_QWORD *)(v1 + *(int *)(result + 28));
  if (*(_QWORD *)(v27 + 16) <= a1)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56))(v13, 1, 1, v22);
  }
  else
  {
    if (a1 < 0)
    {
      __break(1u);
      return result;
    }
    sub_100024C64(v27 + 40 * a1 + 32, (uint64_t)v46);
    v28 = sub_100003304(&qword_10010D600);
    v29 = swift_dynamicCast(v21, v46, v28, v22, 6);
    v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56);
    if ((v29 & 1) != 0)
    {
      v30(v21, 0, 1, v22);
      v31 = (uint64_t)v25;
      sub_100010F0C((uint64_t)v21, (uint64_t)v25, type metadata accessor for AccessPointHighlight);
      v32 = (uint64_t)v25;
      v33 = v44;
      sub_100007878(v32, v44, type metadata accessor for AccessPointHighlight);
      v30((char *)v33, 0, 1, v22);
      sub_100010CBC(v33, (uint64_t)v16, &qword_10010D5F8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v16, 1, v22) == 1)
      {
        sub_100010ED0((uint64_t)v16, &qword_10010D5F8);
        v34 = type metadata accessor for AccessPointIconType(0);
        v35 = v45;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v45, 1, 1, v34);
        v36 = 32.0;
      }
      else
      {
        v35 = v45;
        sub_100010CBC((uint64_t)&v16[*(int *)(v22 + 32)], v45, &qword_10010CA70);
        sub_1000106F0((uint64_t)v16, type metadata accessor for AccessPointHighlight);
        v41 = type metadata accessor for AccessPointIconType(0);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 48))(v35, 1, v41) == 1)
          v36 = 32.0;
        else
          v36 = 16.0;
      }
      v42 = sub_100010ED0(v35, &qword_10010CA70);
      RectangleCornerRadii.init(topLeft:topRight:bottomRight:bottomLeft:)(v42, 32.0, v36, v36, 32.0);
      sub_100010ED0(v33, &qword_10010D5F8);
      return sub_1000106F0(v31, type metadata accessor for AccessPointHighlight);
    }
    v30(v21, 1, 1, v22);
    sub_100010ED0((uint64_t)v21, &qword_10010D5F8);
    v30(v13, 1, 1, v22);
  }
  sub_100010CBC((uint64_t)v13, (uint64_t)v10, &qword_10010D5F8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v10, 1, v22) == 1)
  {
    sub_100010ED0((uint64_t)v10, &qword_10010D5F8);
    v37 = type metadata accessor for AccessPointIconType(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v5, 1, 1, v37);
    v38 = 32.0;
  }
  else
  {
    sub_100010CBC((uint64_t)&v10[*(int *)(v22 + 32)], (uint64_t)v5, &qword_10010CA70);
    sub_1000106F0((uint64_t)v10, type metadata accessor for AccessPointHighlight);
    v39 = type metadata accessor for AccessPointIconType(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 48))(v5, 1, v39) == 1)
      v38 = 32.0;
    else
      v38 = 16.0;
  }
  v40 = sub_100010ED0((uint64_t)v5, &qword_10010CA70);
  RectangleCornerRadii.init(topLeft:topRight:bottomRight:bottomLeft:)(v40, 32.0, v38, v38, 32.0);
  return sub_100010ED0((uint64_t)v13, &qword_10010D5F8);
}

Swift::Bool __swiftcall AccessPointContainer.isCollapsibleItem(at:)(Swift::Int at)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  void (*v28)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  _BYTE *v41;
  _BYTE v42[40];

  v3 = sub_100003304(&qword_10010CA70);
  __chkstk_darwin(v3);
  v41 = &v42[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = sub_100003304(&qword_10010D5F8);
  __chkstk_darwin(v5);
  v7 = &v42[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = type metadata accessor for AccessPointHighlight(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v42[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v12);
  v14 = &v42[-v13 - 8];
  __chkstk_darwin(v15);
  v17 = &v42[-v16 - 8];
  __chkstk_darwin(v18);
  v20 = &v42[-v19 - 8];
  __chkstk_darwin(v21);
  v23 = &v42[-v22 - 8];
  v24 = type metadata accessor for AccessPointContainer(0);
  v25 = *(_QWORD *)(v1 + *(int *)(v24 + 28));
  if (*(_QWORD *)(v25 + 16) > at)
  {
    if (at < 0)
    {
      __break(1u);
    }
    else
    {
      sub_100024C64(v25 + 40 * at + 32, (uint64_t)v42);
      v26 = sub_100003304(&qword_10010D600);
      v27 = swift_dynamicCast(v7, v42, v26, v8, 6);
      v28 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      if ((v27 & 1) == 0)
      {
        v32 = 1;
        v28(v7, 1, 1, v8);
        v33 = &qword_10010D5F8;
        v34 = (uint64_t)v7;
LABEL_23:
        sub_100010ED0(v34, v33);
        goto LABEL_24;
      }
      v28(v7, 0, 1, v8);
      sub_100010F0C((uint64_t)v7, (uint64_t)v23, type metadata accessor for AccessPointHighlight);
      v29 = *((_QWORD *)v23 + 6);
      LOBYTE(v24) = sub_100007878((uint64_t)v23, (uint64_t)v20, type metadata accessor for AccessPointHighlight);
      if (!v29)
      {
        sub_1000106F0((uint64_t)v20, type metadata accessor for AccessPointHighlight);
        sub_100007878((uint64_t)v23, (uint64_t)v17, type metadata accessor for AccessPointHighlight);
LABEL_14:
        v35 = *((_QWORD *)v17 + 8);
        LOBYTE(v24) = sub_100007878((uint64_t)v17, (uint64_t)v14, type metadata accessor for AccessPointHighlight);
        if (!v35)
        {
          sub_1000106F0((uint64_t)v17, type metadata accessor for AccessPointHighlight);
          sub_1000106F0((uint64_t)v14, type metadata accessor for AccessPointHighlight);
          sub_100010F0C((uint64_t)v23, (uint64_t)v11, type metadata accessor for AccessPointHighlight);
LABEL_22:
          v38 = v41;
          sub_100010CBC((uint64_t)&v11[*(int *)(v8 + 32)], (uint64_t)v41, &qword_10010CA70);
          sub_1000106F0((uint64_t)v11, type metadata accessor for AccessPointHighlight);
          v39 = type metadata accessor for AccessPointIconType(0);
          v32 = (*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 48))(v38, 1, v39) == 1;
          v34 = (uint64_t)v38;
          v33 = &qword_10010CA70;
          goto LABEL_23;
        }
        v36 = *((_QWORD *)v14 + 8);
        if (v36)
        {
          if ((v36 & 0x2000000000000000) != 0)
            v37 = HIBYTE(v36) & 0xF;
          else
            v37 = *((_QWORD *)v14 + 7) & 0xFFFFFFFFFFFFLL;
          sub_1000106F0((uint64_t)v17, type metadata accessor for AccessPointHighlight);
          sub_1000106F0((uint64_t)v14, type metadata accessor for AccessPointHighlight);
          sub_100010F0C((uint64_t)v23, (uint64_t)v11, type metadata accessor for AccessPointHighlight);
          if (v37)
            goto LABEL_20;
          goto LABEL_22;
        }
LABEL_27:
        __break(1u);
        return v24;
      }
      v30 = *((_QWORD *)v20 + 6);
      if (v30)
      {
        if ((v30 & 0x2000000000000000) != 0)
          v31 = HIBYTE(v30) & 0xF;
        else
          v31 = *((_QWORD *)v20 + 5) & 0xFFFFFFFFFFFFLL;
        sub_1000106F0((uint64_t)v20, type metadata accessor for AccessPointHighlight);
        sub_100007878((uint64_t)v23, (uint64_t)v17, type metadata accessor for AccessPointHighlight);
        if (v31)
        {
          sub_1000106F0((uint64_t)v17, type metadata accessor for AccessPointHighlight);
          sub_100010F0C((uint64_t)v23, (uint64_t)v11, type metadata accessor for AccessPointHighlight);
LABEL_20:
          sub_1000106F0((uint64_t)v11, type metadata accessor for AccessPointHighlight);
          v32 = 0;
          goto LABEL_24;
        }
        goto LABEL_14;
      }
    }
    __break(1u);
    goto LABEL_27;
  }
  v32 = 1;
LABEL_24:
  LOBYTE(v24) = v32;
  return v24;
}

uint64_t type metadata accessor for AccessPointIconType(uint64_t a1)
{
  return sub_100010C88(a1, qword_10010D738, (uint64_t)&nominal type descriptor for AccessPointIconType);
}

uint64_t sub_100037058()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10003707C + 4 * byte_1000C8CAF[*v0]))(25705, 0xE200000000000000);
}

uint64_t sub_10003707C()
{
  return 0x7274654D65676170;
}

uint64_t sub_10003709C()
{
  return 0x65736143657375;
}

uint64_t sub_1000370B4()
{
  return 0x736D657469;
}

uint64_t sub_1000370C8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100038A04(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000370EC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100037378();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100037114(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100037378();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AccessPointContainer.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int *v12;
  uint64_t v13;
  _BYTE v15[16];
  uint64_t v16;
  char v17;
  _BYTE v18[3];

  v3 = v1;
  v5 = sub_100003304(&qword_10010D608);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = a1[3];
  v10 = a1[4];
  sub_100003C28(a1, v9);
  v11 = sub_100037378();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AccessPointContainer.CodingKeys, &type metadata for AccessPointContainer.CodingKeys, v11, v9, v10);
  v18[2] = 0;
  type metadata accessor for PageID(0);
  sub_1000035B4(&qword_10010BFC8, (uint64_t (*)(uint64_t))&type metadata accessor for PageID, (uint64_t)&protocol conformance descriptor for PageID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3);
  if (!v2)
  {
    v12 = (int *)type metadata accessor for AccessPointContainer(0);
    v13 = v3 + v12[5];
    v18[1] = 1;
    type metadata accessor for PageMetrics(0);
    sub_1000035B4(&qword_10010BFD0, (uint64_t (*)(uint64_t))&type metadata accessor for PageMetrics, (uint64_t)&protocol conformance descriptor for PageMetrics);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v13);
    v18[0] = *(_BYTE *)(v3 + v12[6]);
    v17 = 2;
    sub_1000373BC();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v18);
    v16 = *(_QWORD *)(v3 + v12[7]);
    v15[15] = 3;
    sub_100003304(&qword_10010C260);
    sub_100037854((unint64_t *)&qword_10010C268, &qword_10010C270, (uint64_t)&protocol conformance descriptor for _CodeByKind_Many<A>, (uint64_t)&protocol conformance descriptor for <A> DiscardOnError<A>);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v16);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_100037378()
{
  unint64_t result;

  result = qword_10010D610;
  if (!qword_10010D610)
  {
    result = swift_getWitnessTable(&unk_1000C8F28, &type metadata for AccessPointContainer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010D610);
  }
  return result;
}

unint64_t sub_1000373BC()
{
  unint64_t result;

  result = qword_10010D618;
  if (!qword_10010D618)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AccessPointUseCase, &type metadata for AccessPointUseCase);
    atomic_store(result, (unint64_t *)&qword_10010D618);
  }
  return result;
}

uint64_t AccessPointContainer.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;

  v31 = a2;
  v3 = type metadata accessor for PageMetrics(0);
  v33 = *(_QWORD *)(v3 - 8);
  v34 = v3;
  __chkstk_darwin(v3);
  v32 = (uint64_t *)((char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v36 = type metadata accessor for PageID(0);
  v5 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v35 = (uint64_t *)((char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v38 = sub_100003304(&qword_10010D620);
  v7 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AccessPointContainer(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  sub_100003C28(a1, v14);
  v15 = sub_100037378();
  v37 = v9;
  v16 = v39;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AccessPointContainer.CodingKeys, &type metadata for AccessPointContainer.CodingKeys, v15, v14, v13);
  if (v16)
    return sub_100004624(a1);
  v39 = v7;
  v30 = v10;
  v17 = v12;
  v18 = a1;
  v20 = v33;
  v19 = v34;
  BYTE2(v43) = 0;
  sub_1000035B4(&qword_10010C038, (uint64_t (*)(uint64_t))&type metadata accessor for PageID, (uint64_t)&protocol conformance descriptor for PageID);
  v22 = v35;
  v21 = v36;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v35);
  v23 = v21;
  v29 = v5;
  v24 = (uint64_t)v17;
  (*(void (**)(char *, _QWORD *, uint64_t))(v5 + 32))(v17, v22, v23);
  BYTE1(v43) = 1;
  sub_1000035B4(&qword_10010C040, (uint64_t (*)(uint64_t))&type metadata accessor for PageMetrics, (uint64_t)&protocol conformance descriptor for PageMetrics);
  v25 = v32;
  v26 = v19;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v32);
  v27 = v30;
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v20 + 32))(v24 + *(int *)(v30 + 20), v25, v26);
  v42 = 2;
  sub_100037810();
  v35 = 0;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v43);
  *(_BYTE *)(v24 + *(int *)(v27 + 24)) = v43;
  sub_100003304(&qword_10010C260);
  v41 = 3;
  sub_100037854((unint64_t *)&qword_10010C2B0, &qword_10010C2B8, (uint64_t)&protocol conformance descriptor for _CodeByKind_Many<A>, (uint64_t)&protocol conformance descriptor for <A> DiscardOnError<A>);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v40);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v37, v38);
  *(_QWORD *)(v24 + *(int *)(v27 + 28)) = v40;
  sub_100007878(v24, v31, type metadata accessor for AccessPointContainer);
  sub_100004624(v18);
  return sub_1000106F0(v24, type metadata accessor for AccessPointContainer);
}

unint64_t sub_100037810()
{
  unint64_t result;

  result = qword_10010D628;
  if (!qword_10010D628)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AccessPointUseCase, &type metadata for AccessPointUseCase);
    atomic_store(result, (unint64_t *)&qword_10010D628);
  }
  return result;
}

uint64_t sub_100037854(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v9 = sub_100006E54(&qword_10010C260);
    sub_100011054(a2, &qword_10010C278, a3);
    result = swift_getWitnessTable(a4, v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000378D8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AccessPointContainer.init(from:)(a1, a2);
}

uint64_t sub_1000378EC(_QWORD *a1)
{
  return AccessPointContainer.encode(to:)(a1);
}

_QWORD *initializeBufferWithCopyOfBuffer for AccessPointContainer(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    v7 = type metadata accessor for PageID(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for PageMetrics(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[7];
    *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
    v13 = *(_QWORD *)((char *)a2 + v12);
    *(_QWORD *)((char *)a1 + v12) = v13;
    swift_bridgeObjectRetain(v13);
  }
  return a1;
}

uint64_t destroy for AccessPointContainer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for PageID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for PageMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 28)));
}

uint64_t initializeWithCopy for AccessPointContainer(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for PageID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for PageMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  v12 = *(_QWORD *)(a2 + v11);
  *(_QWORD *)(a1 + v11) = v12;
  swift_bridgeObjectRetain(v12);
  return a1;
}

uint64_t assignWithCopy for AccessPointContainer(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for PageID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for PageMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  v11 = a3[7];
  v12 = *(_QWORD *)(a2 + v11);
  v13 = *(_QWORD *)(a1 + v11);
  *(_QWORD *)(a1 + v11) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

uint64_t initializeWithTake for AccessPointContainer(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for PageID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for PageMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  return a1;
}

uint64_t assignWithTake for AccessPointContainer(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for PageID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for PageMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  v12 = *(_QWORD *)(a1 + v11);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessPointContainer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100037CC4);
}

uint64_t sub_100037CC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = type metadata accessor for PageID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for PageMetrics(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 28));
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessPointContainer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100037D78);
}

uint64_t sub_100037D78(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for PageID(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for PageMetrics(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
  return result;
}

uint64_t sub_100037E1C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[4];

  result = type metadata accessor for PageID(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for PageMetrics(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      v5[2] = &unk_1000C8D98;
      v5[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
      swift_initStructMetadata(a1, 256, 4, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t sub_100037EB8()
{
  return sub_100011054(&qword_10010CD80, &qword_10010CD68, (uint64_t)&protocol conformance descriptor for ComponentView<A>);
}

uint64_t storeEnumTagSinglePayload for AccessPointContainer.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100037F30 + 4 * byte_1000C8CB8[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100037F64 + 4 * byte_1000C8CB3[v4]))();
}

uint64_t sub_100037F64(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100037F6C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100037F74);
  return result;
}

uint64_t sub_100037F80(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100037F88);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100037F8C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100037F94(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessPointContainer.CodingKeys()
{
  return &type metadata for AccessPointContainer.CodingKeys;
}

uint64_t sub_100037FB0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_100038000 + 4 * byte_1000C8CBD[swift_getEnumCaseMultiPayload(a2, a3)];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain(v6);
  return v7;
}

double sub_100038100(uint64_t *a1, uint64_t a2)
{
  double result;
  unint64_t v4;
  uint64_t v5;

  switch(swift_getEnumCaseMultiPayload(a1, a2))
  {
    case 0u:
    case 1u:
    case 3u:
      swift_bridgeObjectRelease(a1[1]);
      break;
    case 2u:
      v5 = type metadata accessor for MediaArtwork(0);
      (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
      break;
    case 4u:
      v4 = a1[1];
      if (v4 >> 60 != 15)
        result = sub_100038198(*a1, v4);
      break;
    default:
      return result;
  }
  return result;
}

double sub_100038198(uint64_t a1, unint64_t a2)
{
  double result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(a1);
  }
  *(_QWORD *)&result = swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL).n128_u64[0];
  return result;
}

void sub_1000381DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;

  v3 = (char *)sub_100038220 + 4 * byte_1000C8CC7[swift_getEnumCaseMultiPayload(a2, a3)];
  __asm { BR              X10 }
}

_QWORD *sub_100038220()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v3 = v2[1];
  *v0 = *v2;
  v0[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_storeEnumTagMultiPayload(v0, v1, 0);
  return v0;
}

uint64_t sub_100038300(uint64_t result, uint64_t a2, uint64_t a3)
{
  char *v5;

  if (result != a2)
  {
    sub_1000106F0(result, type metadata accessor for AccessPointIconType);
    v5 = (char *)&loc_10003835C + 4 * byte_1000C8CCC[swift_getEnumCaseMultiPayload(a2, a3)];
    __asm { BR              X10 }
  }
  return result;
}

void *sub_100038454(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 2)
  {
    v6 = type metadata accessor for MediaArtwork(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, a3, 2);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_1000384E0(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_1000106F0((uint64_t)a1, type metadata accessor for AccessPointIconType);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 2)
    {
      v6 = type metadata accessor for MediaArtwork(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, a3, 2);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100038584(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_1000C8DD8;
  v4[1] = &unk_1000C8DD8;
  result = type metadata accessor for MediaArtwork(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = &unk_1000C8DF0;
    v4[4] = &unk_1000C8E08;
    swift_initEnumMetadataMultiPayload(a1, 256, 5, v4);
    return 0;
  }
  return result;
}

unint64_t sub_10003860C()
{
  unint64_t result;

  result = qword_10010D770;
  if (!qword_10010D770)
  {
    result = swift_getWitnessTable(&unk_1000C8F00, &type metadata for AccessPointContainer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010D770);
  }
  return result;
}

unint64_t sub_100038654()
{
  unint64_t result;

  result = qword_10010D778;
  if (!qword_10010D778)
  {
    result = swift_getWitnessTable(&unk_1000C8E70, &type metadata for AccessPointContainer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010D778);
  }
  return result;
}

unint64_t sub_10003869C()
{
  unint64_t result;

  result = qword_10010D780;
  if (!qword_10010D780)
  {
    result = swift_getWitnessTable(&unk_1000C8E98, &type metadata for AccessPointContainer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010D780);
  }
  return result;
}

uint64_t sub_1000386E0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x6D614E6567616D69 && a2 == 0xE900000000000065)
  {
    v5 = 0xE900000000000065;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D614E6567616D69, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x69537261656E696CLL && a2 == 0xEA0000000000657ALL)
  {
    swift_bridgeObjectRelease(0xEA0000000000657ALL);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x69537261656E696CLL, 0xEA0000000000657ALL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1000387E8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x6C6F626D7973 && a2 == 0xE600000000000000)
  {
    v5 = 0xE600000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C6F626D7973, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7641726579616C70 && a2 == 0xEC00000072617461)
  {
    v7 = 0xEC00000072617461;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7641726579616C70, 0xEC00000072617461, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6B726F77747261 && a2 == 0xE700000000000000)
  {
    v8 = 0xE700000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6B726F77747261, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x656C646E7562 && a2 == 0xE600000000000000)
  {
    v9 = 0xE600000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C646E7562, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x6567616D69 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6567616D69, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_100038A04(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7274654D65676170 && a2 == 0xEB00000000736369)
  {
    v7 = 0xEB00000000736369;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7274654D65676170, 0xEB00000000736369, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x65736143657375 && a2 == 0xE700000000000000)
  {
    v8 = 0xE700000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65736143657375, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x736D657469 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x736D657469, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

unint64_t sub_100038BB4()
{
  unint64_t result;

  result = qword_10010D7B8;
  if (!qword_10010D7B8)
  {
    result = swift_getWitnessTable(&unk_1000C95E4, &type metadata for AccessPointIconType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010D7B8);
  }
  return result;
}

unint64_t sub_100038BF8()
{
  unint64_t result;

  result = qword_10010D7C0;
  if (!qword_10010D7C0)
  {
    result = swift_getWitnessTable(&unk_1000C9594, &type metadata for AccessPointIconType.ImageCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010D7C0);
  }
  return result;
}

unint64_t sub_100038C3C()
{
  unint64_t result;

  result = qword_10010D7C8;
  if (!qword_10010D7C8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_10010D7C8);
  }
  return result;
}

unint64_t sub_100038C80()
{
  unint64_t result;

  result = qword_10010D7D0;
  if (!qword_10010D7D0)
  {
    result = swift_getWitnessTable(&unk_1000C9544, &type metadata for AccessPointIconType.BundleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010D7D0);
  }
  return result;
}

unint64_t sub_100038CC4()
{
  unint64_t result;

  result = qword_10010D7D8;
  if (!qword_10010D7D8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_10010D7D8);
  }
  return result;
}

unint64_t sub_100038D08()
{
  unint64_t result;

  result = qword_10010D7E0;
  if (!qword_10010D7E0)
  {
    result = swift_getWitnessTable(&unk_1000C94F4, &type metadata for AccessPointIconType.ArtworkCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010D7E0);
  }
  return result;
}

unint64_t sub_100038D4C()
{
  unint64_t result;

  result = qword_10010D7E8;
  if (!qword_10010D7E8)
  {
    result = swift_getWitnessTable(&unk_1000C94A4, &type metadata for AccessPointIconType.PlayerAvatarCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010D7E8);
  }
  return result;
}

unint64_t sub_100038D90()
{
  unint64_t result;

  result = qword_10010D7F0;
  if (!qword_10010D7F0)
  {
    result = swift_getWitnessTable(&unk_1000C9454, &type metadata for AccessPointIconType.SymbolCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010D7F0);
  }
  return result;
}

unint64_t sub_100038DD4()
{
  unint64_t result;

  result = qword_10010D828;
  if (!qword_10010D828)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_10010D828);
  }
  return result;
}

double sub_100038E18(uint64_t a1, unint64_t a2)
{
  double result;

  if (a2 >> 60 != 15)
    return sub_100038198(a1, a2);
  return result;
}

unint64_t sub_100038E2C()
{
  unint64_t result;

  result = qword_10010D830;
  if (!qword_10010D830)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_10010D830);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AccessPointIconType.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_100038EBC + 4 * byte_1000C8CD6[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100038EF0 + 4 * byte_1000C8CD1[v4]))();
}

uint64_t sub_100038EF0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100038EF8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100038F00);
  return result;
}

uint64_t sub_100038F0C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100038F14);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_100038F18(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100038F20(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessPointIconType.CodingKeys()
{
  return &type metadata for AccessPointIconType.CodingKeys;
}

ValueMetadata *type metadata accessor for AccessPointIconType.SymbolCodingKeys()
{
  return &type metadata for AccessPointIconType.SymbolCodingKeys;
}

ValueMetadata *type metadata accessor for AccessPointIconType.PlayerAvatarCodingKeys()
{
  return &type metadata for AccessPointIconType.PlayerAvatarCodingKeys;
}

ValueMetadata *type metadata accessor for AccessPointIconType.ArtworkCodingKeys()
{
  return &type metadata for AccessPointIconType.ArtworkCodingKeys;
}

uint64_t storeEnumTagSinglePayload for AccessPointIconType.BundleCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100038FBC + 4 * byte_1000C8CE0[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100038FF0 + 4 * byte_1000C8CDB[v4]))();
}

uint64_t sub_100038FF0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100038FF8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100039000);
  return result;
}

uint64_t sub_10003900C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100039014);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100039018(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100039020(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessPointIconType.BundleCodingKeys()
{
  return &type metadata for AccessPointIconType.BundleCodingKeys;
}

uint64_t _s13GameOverlayUI19AccessPointIconTypeO16SymbolCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10003907C + 4 * byte_1000C8CE5[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10003909C + 4 * byte_1000C8CEA[v4]))();
}

_BYTE *sub_10003907C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10003909C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000390A4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000390AC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000390B4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000390BC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AccessPointIconType.ImageCodingKeys()
{
  return &type metadata for AccessPointIconType.ImageCodingKeys;
}

unint64_t sub_1000390DC()
{
  unint64_t result;

  result = qword_10010D838;
  if (!qword_10010D838)
  {
    result = swift_getWitnessTable(&unk_1000C9094, &type metadata for AccessPointIconType.ImageCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010D838);
  }
  return result;
}

unint64_t sub_100039124()
{
  unint64_t result;

  result = qword_10010D840;
  if (!qword_10010D840)
  {
    result = swift_getWitnessTable(&unk_1000C914C, &type metadata for AccessPointIconType.BundleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010D840);
  }
  return result;
}

unint64_t sub_10003916C()
{
  unint64_t result;

  result = qword_10010D848;
  if (!qword_10010D848)
  {
    result = swift_getWitnessTable(&unk_1000C9204, &type metadata for AccessPointIconType.ArtworkCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010D848);
  }
  return result;
}

unint64_t sub_1000391B4()
{
  unint64_t result;

  result = qword_10010D850;
  if (!qword_10010D850)
  {
    result = swift_getWitnessTable(&unk_1000C92BC, &type metadata for AccessPointIconType.PlayerAvatarCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010D850);
  }
  return result;
}

unint64_t sub_1000391FC()
{
  unint64_t result;

  result = qword_10010D858;
  if (!qword_10010D858)
  {
    result = swift_getWitnessTable(&unk_1000C9374, &type metadata for AccessPointIconType.SymbolCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010D858);
  }
  return result;
}

unint64_t sub_100039244()
{
  unint64_t result;

  result = qword_10010D860;
  if (!qword_10010D860)
  {
    result = swift_getWitnessTable(&unk_1000C942C, &type metadata for AccessPointIconType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010D860);
  }
  return result;
}

unint64_t sub_10003928C()
{
  unint64_t result;

  result = qword_10010D868;
  if (!qword_10010D868)
  {
    result = swift_getWitnessTable(&unk_1000C92E4, &type metadata for AccessPointIconType.SymbolCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010D868);
  }
  return result;
}

unint64_t sub_1000392D4()
{
  unint64_t result;

  result = qword_10010D870;
  if (!qword_10010D870)
  {
    result = swift_getWitnessTable(&unk_1000C930C, &type metadata for AccessPointIconType.SymbolCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010D870);
  }
  return result;
}

unint64_t sub_10003931C()
{
  unint64_t result;

  result = qword_10010D878;
  if (!qword_10010D878)
  {
    result = swift_getWitnessTable(&unk_1000C922C, &type metadata for AccessPointIconType.PlayerAvatarCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010D878);
  }
  return result;
}

unint64_t sub_100039364()
{
  unint64_t result;

  result = qword_10010D880;
  if (!qword_10010D880)
  {
    result = swift_getWitnessTable(&unk_1000C9254, &type metadata for AccessPointIconType.PlayerAvatarCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010D880);
  }
  return result;
}

unint64_t sub_1000393AC()
{
  unint64_t result;

  result = qword_10010D888;
  if (!qword_10010D888)
  {
    result = swift_getWitnessTable(&unk_1000C9174, &type metadata for AccessPointIconType.ArtworkCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010D888);
  }
  return result;
}

unint64_t sub_1000393F4()
{
  unint64_t result;

  result = qword_10010D890;
  if (!qword_10010D890)
  {
    result = swift_getWitnessTable(&unk_1000C919C, &type metadata for AccessPointIconType.ArtworkCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010D890);
  }
  return result;
}

unint64_t sub_10003943C()
{
  unint64_t result;

  result = qword_10010D898;
  if (!qword_10010D898)
  {
    result = swift_getWitnessTable(&unk_1000C90BC, &type metadata for AccessPointIconType.BundleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010D898);
  }
  return result;
}

unint64_t sub_100039484()
{
  unint64_t result;

  result = qword_10010D8A0;
  if (!qword_10010D8A0)
  {
    result = swift_getWitnessTable(&unk_1000C90E4, &type metadata for AccessPointIconType.BundleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010D8A0);
  }
  return result;
}

unint64_t sub_1000394CC()
{
  unint64_t result;

  result = qword_10010D8A8;
  if (!qword_10010D8A8)
  {
    result = swift_getWitnessTable(&unk_1000C9004, &type metadata for AccessPointIconType.ImageCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010D8A8);
  }
  return result;
}

unint64_t sub_100039514()
{
  unint64_t result;

  result = qword_10010D8B0;
  if (!qword_10010D8B0)
  {
    result = swift_getWitnessTable(&unk_1000C902C, &type metadata for AccessPointIconType.ImageCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010D8B0);
  }
  return result;
}

unint64_t sub_10003955C()
{
  unint64_t result;

  result = qword_10010D8B8;
  if (!qword_10010D8B8)
  {
    result = swift_getWitnessTable(&unk_1000C939C, &type metadata for AccessPointIconType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010D8B8);
  }
  return result;
}

unint64_t sub_1000395A4()
{
  unint64_t result;

  result = qword_10010D8C0;
  if (!qword_10010D8C0)
  {
    result = swift_getWitnessTable(&unk_1000C93C4, &type metadata for AccessPointIconType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010D8C0);
  }
  return result;
}

uint64_t sub_1000395E8(__n128 a1, __n128 a2)
{
  uint64_t result;

  a2.n128_u64[0] = 0x3FE999999999999ALL;
  a1.n128_u64[0] = 0.5;
  result = static Animation.spring(response:dampingFraction:blendDuration:)(a1, a2, 0.0);
  qword_10010D8C8 = result;
  return result;
}

uint64_t sub_100039614(__n128 a1, __n128 a2)
{
  uint64_t result;

  a1.n128_u64[0] = 0x3FD999999999999ALL;
  a2.n128_u64[0] = 0x3FE3333333333333;
  result = static Animation.spring(response:dampingFraction:blendDuration:)(a1, a2, 0.0);
  qword_10010D8D0 = result;
  return result;
}

uint64_t sub_100039648(__n128 a1, __n128 a2)
{
  uint64_t result;

  a2.n128_u64[0] = 0x3FECCCCCCCCCCCCDLL;
  a1.n128_u64[0] = 0.5;
  result = static Animation.spring(response:dampingFraction:blendDuration:)(a1, a2, 0.0);
  qword_10010D8D8 = result;
  return result;
}

uint64_t sub_100039674(__n128 a1, __n128 a2)
{
  uint64_t result;

  a1.n128_u64[0] = 0x3FD51EB851EB851FLL;
  a2.n128_u64[0] = 0x3FECCCCCCCCCCCCDLL;
  result = static Animation.spring(response:dampingFraction:blendDuration:)(a1, a2, 0.0);
  qword_10010D8E0 = result;
  return result;
}

uint64_t sub_1000396A4(__n128 a1, __n128 a2)
{
  uint64_t result;

  a1.n128_u64[0] = 0x3FD3333333333333;
  a2.n128_u64[0] = 0x3FE999999999999ALL;
  result = static Animation.spring(response:dampingFraction:blendDuration:)(a1, a2, 0.0);
  qword_10010D8E8 = result;
  return result;
}

uint64_t sub_1000396D8(__n128 a1, __n128 a2)
{
  uint64_t result;

  a1.n128_u64[0] = 0x3FD999999999999ALL;
  a2.n128_u64[0] = 0x3FECCCCCCCCCCCCDLL;
  result = static Animation.spring(response:dampingFraction:blendDuration:)(a1, a2, 0.0);
  qword_10010D8F0 = result;
  return result;
}

uint64_t sub_100039708(__n128 a1, __n128 a2)
{
  uint64_t result;

  a1.n128_u64[0] = 0x3FC999999999999ALL;
  a2.n128_u64[0] = 0x3FE6666666666666;
  result = static Animation.spring(response:dampingFraction:blendDuration:)(a1, a2, 0.0);
  qword_10010D8F8 = result;
  return result;
}

uint64_t sub_10003973C(__n128 a1, __n128 a2)
{
  uint64_t result;

  a1.n128_u64[0] = 0x3FD999999999999ALL;
  a2.n128_u64[0] = 0x3FE6666666666666;
  result = static Animation.spring(response:dampingFraction:blendDuration:)(a1, a2, 0.0);
  qword_10010D900 = result;
  return result;
}

uint64_t sub_100039770@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];

  KeyPath = swift_getKeyPath(&unk_1000C9938);
  v7[0] = v1;
  v4 = sub_1000035B4(&qword_10010DE28, type metadata accessor for AccessPointModel, (uint64_t)&unk_1000C97DC);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v7, KeyPath, v4);
  swift_release(KeyPath);
  v5 = v1 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container;
  swift_beginAccess(v1 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container, v7, 0, 0);
  return sub_100007878(v5, a1, type metadata accessor for AccessPointContainer);
}

uint64_t sub_100039828@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000C9938);
  v8[0] = v3;
  v5 = sub_1000035B4(&qword_10010DE28, type metadata accessor for AccessPointModel, (uint64_t)&unk_1000C97DC);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = v3 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container;
  swift_beginAccess(v3 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container, v8, 0, 0);
  return sub_100007878(v6, a2, type metadata accessor for AccessPointContainer);
}

uint64_t sub_1000398E0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  _BYTE v11[16];
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;

  v4 = type metadata accessor for AccessPointContainer(0);
  __chkstk_darwin(v4);
  v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100007878(a1, (uint64_t)v6, type metadata accessor for AccessPointContainer);
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000C9938);
  v12 = v7;
  v13 = v6;
  v14 = v7;
  v9 = sub_1000035B4(&qword_10010DE28, type metadata accessor for AccessPointModel, (uint64_t)&unk_1000C97DC);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v14, KeyPath, sub_100048EB4, v11, (char *)&type metadata for () + 8, v9);
  swift_release(KeyPath);
  return sub_1000106F0((uint64_t)v6, type metadata accessor for AccessPointContainer);
}

uint64_t sub_1000399E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE v5[24];

  v3 = a1 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container;
  swift_beginAccess(a1 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container, v5, 33, 0);
  sub_100048ECC(a2, v3);
  return swift_endAccess(v5);
}

uint64_t sub_100039A50()
{
  return sub_10003A024((uint64_t)&unk_1000C99B0, &OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__accessPointHidden);
}

double sub_100039A64(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000C99B0);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_1000035B4(&qword_10010DE28, type metadata accessor for AccessPointModel, (uint64_t)&unk_1000C97DC);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_10004B12C, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_100039B0C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1000C9910);
  v4 = v0;
  v2 = sub_1000035B4(&qword_10010DE28, type metadata accessor for AccessPointModel, (uint64_t)&unk_1000C97DC);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(_QWORD *)(v0 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__highlightIndex);
}

void sub_100039B98(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000C9910);
  v6 = v3;
  v5 = sub_1000035B4(&qword_10010DE28, type metadata accessor for AccessPointModel, (uint64_t)&unk_1000C97DC);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v5);
  swift_release(KeyPath);
  *a2 = *(_QWORD *)(v3 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__highlightIndex);
}

double sub_100039C2C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000C9910);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_1000035B4(&qword_10010DE28, type metadata accessor for AccessPointModel, (uint64_t)&unk_1000C97DC);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_100048F10, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_100039CD0()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1000C9870);
  v4 = v0;
  v2 = sub_1000035B4(&qword_10010DE28, type metadata accessor for AccessPointModel, (uint64_t)&unk_1000C97DC);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__state);
}

void sub_100039D5C(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000C9870);
  v6 = v3;
  v5 = sub_1000035B4(&qword_10010DE28, type metadata accessor for AccessPointModel, (uint64_t)&unk_1000C97DC);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v5);
  swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__state);
}

double sub_100039DF0(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000C9870);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_1000035B4(&qword_10010DE28, type metadata accessor for AccessPointModel, (uint64_t)&unk_1000C97DC);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_10004B168, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_100039E98()
{
  return sub_10003A024((uint64_t)&unk_1000C9A80, &OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__collapsed);
}

double sub_100039EAC(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000C9A80);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_1000035B4(&qword_10010DE28, type metadata accessor for AccessPointModel, (uint64_t)&unk_1000C97DC);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_1000492F0, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_100039F54()
{
  return sub_10003A024((uint64_t)&unk_1000C9A00, &OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__showDashboard);
}

double sub_100039F68(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000C9A00);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_1000035B4(&qword_10010DE28, type metadata accessor for AccessPointModel, (uint64_t)&unk_1000C97DC);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_100049128, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_10003A010()
{
  return sub_10003A024((uint64_t)&unk_1000C9A28, &OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__reveal);
}

uint64_t sub_10003A024(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath(a1);
  v7 = v2;
  v5 = sub_1000035B4(&qword_10010DE28, type metadata accessor for AccessPointModel, (uint64_t)&unk_1000C97DC);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v5);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v2 + *a2);
}

void sub_10003A0A8(uint64_t *a1@<X0>, uint64_t a2@<X3>, _QWORD *a3@<X4>, _BYTE *a4@<X8>)
{
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;

  v6 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v9 = v6;
  v8 = sub_1000035B4(&qword_10010DE28, type metadata accessor for AccessPointModel, (uint64_t)&unk_1000C97DC);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v8);
  swift_release(KeyPath);
  *a4 = *(_BYTE *)(v6 + *a3);
}

double sub_10003A140(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000C9A28);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_1000035B4(&qword_10010DE28, type metadata accessor for AccessPointModel, (uint64_t)&unk_1000C97DC);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_10004B140, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_10003A1E8@<X0>(uint64_t a1@<X8>)
{
  return sub_10003A31C((uint64_t)&unk_1000C9988, &OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__anchor, a1);
}

uint64_t sub_10003A1FC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  __n128 v12;
  _BYTE v14[16];
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;

  v4 = type metadata accessor for AccessPointAnchoring(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = &v14[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v5 + 16))(v8, a1, v4, v6);
  v9 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000C9988);
  v15 = v9;
  v16 = v8;
  v17 = v9;
  v11 = sub_1000035B4(&qword_10010DE28, type metadata accessor for AccessPointModel, (uint64_t)&unk_1000C97DC);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v17, KeyPath, sub_10004B104, v14, (char *)&type metadata for () + 8, v11);
  v12 = swift_release(KeyPath);
  return (*(uint64_t (**)(_BYTE *, uint64_t, __n128))(v5 + 8))(v8, v4, v12);
}

uint64_t sub_10003A308@<X0>(uint64_t a1@<X8>)
{
  return sub_10003A31C((uint64_t)&unk_1000C9960, &OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__destAnchor, a1);
}

uint64_t sub_10003A31C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];

  KeyPath = swift_getKeyPath(a1);
  v11[0] = v3;
  v7 = sub_1000035B4(&qword_10010DE28, type metadata accessor for AccessPointModel, (uint64_t)&unk_1000C97DC);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v11, KeyPath, v7);
  swift_release(KeyPath);
  v8 = v3 + *a2;
  swift_beginAccess(v8, v11, 0, 0);
  v9 = type metadata accessor for AccessPointAnchoring(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a3, v8, v9);
}

uint64_t sub_10003A3E0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, _QWORD *a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];

  v6 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v12[0] = v6;
  v8 = sub_1000035B4(&qword_10010DE28, type metadata accessor for AccessPointModel, (uint64_t)&unk_1000C97DC);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v12, KeyPath, v8);
  swift_release(KeyPath);
  v9 = v6 + *a3;
  swift_beginAccess(v9, v12, 0, 0);
  v10 = type metadata accessor for AccessPointAnchoring(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a4, v9, v10);
}

uint64_t sub_10003A4A8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  __n128 v12;
  _BYTE v14[16];
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;

  v4 = type metadata accessor for AccessPointAnchoring(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = &v14[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v5 + 16))(v8, a1, v4, v6);
  v9 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000C9960);
  v15 = v9;
  v16 = v8;
  v17 = v9;
  v11 = sub_1000035B4(&qword_10010DE28, type metadata accessor for AccessPointModel, (uint64_t)&unk_1000C97DC);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v17, KeyPath, sub_100048E94, v14, (char *)&type metadata for () + 8, v11);
  v12 = swift_release(KeyPath);
  return (*(uint64_t (**)(_BYTE *, uint64_t, __n128))(v5 + 8))(v8, v4, v12);
}

uint64_t sub_10003A5B4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[24];

  v4 = a1 + *a3;
  swift_beginAccess(v4, v7, 33, 0);
  v5 = type metadata accessor for AccessPointAnchoring(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 24))(v4, a2, v5);
  return swift_endAccess(v7);
}

uint64_t sub_10003A62C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)(v2 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__accessPointHidden) = 0;
  *(_QWORD *)(v2 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__highlightIndex) = 0;
  *(_BYTE *)(v2 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__state) = 0;
  *(_BYTE *)(v2 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__collapsed) = 1;
  *(_BYTE *)(v2 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__showDashboard) = 0;
  *(_BYTE *)(v2 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__reveal) = 0;
  ObservationRegistrar.init()(a1);
  sub_100010F0C(a1, v2 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container, type metadata accessor for AccessPointContainer);
  v5 = v2 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__destAnchor;
  v6 = type metadata accessor for AccessPointAnchoring(0);
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, a2, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v2 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__anchor, a2, v6);
  return v2;
}

uint64_t sub_10003A724()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;

  sub_1000106F0(v0 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container, type metadata accessor for AccessPointContainer);
  v1 = v0 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__anchor;
  v2 = type metadata accessor for AccessPointAnchoring(0);
  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v3(v1, v2);
  v3(v0 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__destAnchor, v2);
  v4 = v0 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel___observationRegistrar;
  v5 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10003A7D4()
{
  return type metadata accessor for AccessPointModel(0);
}

uint64_t type metadata accessor for AccessPointModel(uint64_t a1)
{
  return sub_100010C88(a1, qword_10010D980, (uint64_t)&nominal type descriptor for AccessPointModel);
}

uint64_t sub_10003A7F0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD v6[7];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = type metadata accessor for AccessPointContainer(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(result - 8) + 64;
    v6[1] = &unk_1000C9698;
    v6[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[3] = &unk_1000C96B0;
    v6[4] = &unk_1000C9698;
    v6[5] = &unk_1000C9698;
    v6[6] = &unk_1000C9698;
    result = type metadata accessor for AccessPointAnchoring(319);
    if (v4 <= 0x3F)
    {
      v7 = *(_QWORD *)(result - 8) + 64;
      v8 = v7;
      result = type metadata accessor for ObservationRegistrar(319);
      if (v5 <= 0x3F)
      {
        v9 = *(_QWORD *)(result - 8) + 64;
        return swift_updateClassMetadata2(a1, 256, 10, v6, a1 + 80);
      }
    }
  }
  return result;
}

uint64_t sub_10003A8B8()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1000C9B78);
  v4 = v0;
  v2 = sub_1000035B4(&qword_10010E108, type metadata accessor for GameModeNotifier, (uint64_t)&unk_1000C97C0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + 16);
}

void sub_10003A93C(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000C9B78);
  v6 = v3;
  v5 = sub_1000035B4(&qword_10010E108, type metadata accessor for GameModeNotifier, (uint64_t)&unk_1000C97C0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v5);
  swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3 + 16);
}

double sub_10003A9C8(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000C9B78);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_1000035B4(&qword_10010E108, type metadata accessor for GameModeNotifier, (uint64_t)&unk_1000C97C0);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_100049E0C, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_10003AA70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = type metadata accessor for GameModeNotifier(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  *(_BYTE *)(v1 + 16) = 0;
  result = ObservationRegistrar.init()(v1);
  qword_1001232F0 = v1;
  return result;
}

uint64_t sub_10003AABC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC13GameOverlayUI16GameModeNotifier___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10003AB0C()
{
  return type metadata accessor for GameModeNotifier(0);
}

uint64_t type metadata accessor for GameModeNotifier(uint64_t a1)
{
  return sub_100010C88(a1, qword_10010DC48, (uint64_t)&nominal type descriptor for GameModeNotifier);
}

uint64_t sub_10003AB28(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_1000C9698;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AccessPointModel.AnimationState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10003ABEC + 4 * byte_1000C9665[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10003AC20 + 4 * byte_1000C9660[v4]))();
}

uint64_t sub_10003AC20(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003AC28(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10003AC30);
  return result;
}

uint64_t sub_10003AC3C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10003AC44);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10003AC48(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003AC50(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessPointModel.AnimationState()
{
  return &type metadata for AccessPointModel.AnimationState;
}

uint64_t sub_10003AC6C(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(_QWORD *, uint64_t, uint64_t);
  uint64_t v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  unsigned int (*v43)(char *, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  void (*v49)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  char *v65;
  int *v66;
  _QWORD *__dst;
  int *v68;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v15 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v15);
  }
  else
  {
    v7 = a2[1];
    v8 = *((_BYTE *)a2 + 16);
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = v8;
    v9 = a3[6];
    v10 = (uint64_t *)(a1 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    swift_retain(v7);
    v12 = sub_100003304(&qword_10010D3A8);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v11, v13);
      v14 = 1;
    }
    else
    {
      v16 = *v11;
      *v10 = *v11;
      swift_retain(v16);
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v12, v14);
    v17 = a3[7];
    v18 = a3[8];
    v19 = (uint64_t *)(a1 + v17);
    v20 = (uint64_t *)((char *)a2 + v17);
    v21 = *v20;
    v22 = v20[1];
    *v19 = *v20;
    v19[1] = v22;
    v23 = a1 + v18;
    v24 = (uint64_t)a2 + v18;
    *(_BYTE *)v23 = *(_BYTE *)v24;
    v25 = *(_QWORD *)(v24 + 8);
    *(_QWORD *)(v23 + 8) = v25;
    v26 = a3[9];
    v27 = a3[10];
    v28 = a1 + v26;
    v29 = (uint64_t)a2 + v26;
    *(_BYTE *)v28 = *(_BYTE *)v29;
    v30 = *(_QWORD *)(v29 + 8);
    *(_QWORD *)(v28 + 8) = v30;
    __dst = (_QWORD *)(a1 + v27);
    v68 = a3;
    v31 = (uint64_t *)((char *)a2 + v27);
    v32 = type metadata accessor for Game(0);
    v33 = *(_QWORD *)(v32 - 8);
    v34 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v33 + 48);
    swift_retain(v21);
    swift_retain(v22);
    swift_retain(v25);
    swift_retain(v30);
    if (v34(v31, 1, v32))
    {
      v35 = sub_100003304(&qword_10010CA78);
      memcpy(__dst, v31, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
      v36 = v68;
    }
    else
    {
      v66 = (int *)v32;
      v37 = v31[1];
      *__dst = *v31;
      __dst[1] = v37;
      v38 = v31[3];
      __dst[2] = v31[2];
      __dst[3] = v38;
      v39 = v31[5];
      __dst[4] = v31[4];
      __dst[5] = v39;
      v40 = *(int *)(v32 + 28);
      v65 = (char *)__dst + v40;
      v41 = (char *)v31 + v40;
      v42 = type metadata accessor for Date(0);
      v64 = *(_QWORD *)(v42 - 8);
      v43 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48);
      swift_bridgeObjectRetain(v37);
      swift_bridgeObjectRetain(v38);
      swift_bridgeObjectRetain(v39);
      if (v43(v41, 1, v42))
      {
        v44 = sub_100003304(&qword_10010CC10);
        memcpy(v65, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v65, v41, v42);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v65, 0, 1, v42);
      }
      v36 = v68;
      *(_QWORD *)((char *)__dst + v66[8]) = *(_QWORD *)((char *)v31 + v66[8]);
      *((_BYTE *)__dst + v66[9]) = *((_BYTE *)v31 + v66[9]);
      *((_BYTE *)__dst + v66[10]) = *((_BYTE *)v31 + v66[10]);
      *((_BYTE *)__dst + v66[11]) = *((_BYTE *)v31 + v66[11]);
      *((_BYTE *)__dst + v66[12]) = *((_BYTE *)v31 + v66[12]);
      *((_BYTE *)__dst + v66[13]) = *((_BYTE *)v31 + v66[13]);
      *((_BYTE *)__dst + v66[14]) = *((_BYTE *)v31 + v66[14]);
      v45 = v66[15];
      v46 = (_QWORD *)((char *)__dst + v45);
      v47 = (_QWORD *)((char *)v31 + v45);
      v48 = v47[1];
      *v46 = *v47;
      v46[1] = v48;
      v49 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v33 + 56);
      swift_bridgeObjectRetain(v48);
      v49(__dst, 0, 1, v66);
    }
    v50 = v36[11];
    v51 = v36[12];
    v52 = *(uint64_t *)((char *)a2 + v50);
    *(_QWORD *)(a1 + v50) = v52;
    v53 = *(uint64_t *)((char *)a2 + v51);
    *(_QWORD *)(a1 + v51) = v53;
    v54 = v36[13];
    v55 = (_QWORD *)(a1 + v54);
    v56 = (uint64_t)a2 + v54;
    v57 = *(uint64_t *)((char *)a2 + v54);
    v58 = *(_QWORD *)(v56 + 8);
    *v55 = v57;
    v55[1] = v58;
    swift_retain(v52);
    swift_retain(v53);
    swift_retain(v57);
    swift_retain(v58);
    v59 = *(int *)(sub_100003304(&qword_10010CC18) + 32);
    v60 = (char *)v55 + v59;
    v61 = v56 + v59;
    v62 = sub_100003304(&qword_10010CC20);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 16))(v60, v61, v62);
  }
  return a1;
}

uint64_t sub_10003B00C(uint64_t a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;

  swift_release(*(_QWORD *)(a1 + 8));
  v4 = (_QWORD *)(a1 + a2[6]);
  v5 = sub_100003304(&qword_10010D3A8);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  v7 = (_QWORD *)(a1 + a2[7]);
  swift_release(*v7);
  swift_release(v7[1]);
  swift_release(*(_QWORD *)(a1 + a2[8] + 8));
  swift_release(*(_QWORD *)(a1 + a2[9] + 8));
  v8 = (_QWORD *)(a1 + a2[10]);
  v9 = type metadata accessor for Game(0);
  if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9))
  {
    swift_bridgeObjectRelease(v8[1]);
    swift_bridgeObjectRelease(v8[3]);
    swift_bridgeObjectRelease(v8[5]);
    v10 = (char *)v8 + *(int *)(v9 + 28);
    v11 = type metadata accessor for Date(0);
    v12 = *(_QWORD *)(v11 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
      (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v11);
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v8 + *(int *)(v9 + 60) + 8));
  }
  swift_release(*(_QWORD *)(a1 + a2[11]));
  swift_release(*(_QWORD *)(a1 + a2[12]));
  v13 = (_QWORD *)(a1 + a2[13]);
  swift_release(*v13);
  swift_release(v13[1]);
  v14 = (char *)v13 + *(int *)(sub_100003304(&qword_10010CC18) + 32);
  v15 = sub_100003304(&qword_10010CC20);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
}

uint64_t sub_10003B1CC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  int *v31;
  uint64_t v32;
  unsigned int (*v33)(_QWORD *, uint64_t, int *);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  unsigned int (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  void (*v48)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  char *__dst;
  uint64_t v65;
  uint64_t v66;
  int *v67;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_BYTE *)(a2 + 16);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = v7;
  v8 = a3[6];
  v9 = (uint64_t *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  swift_retain(v6);
  v11 = sub_100003304(&qword_10010D3A8);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
    v13 = 1;
  }
  else
  {
    v14 = *v10;
    *v9 = *v10;
    swift_retain(v14);
    v13 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v11, v13);
  v15 = a3[7];
  v16 = a3[8];
  v17 = (uint64_t *)(a1 + v15);
  v18 = (uint64_t *)(a2 + v15);
  v19 = *v18;
  v20 = v18[1];
  *v17 = *v18;
  v17[1] = v20;
  v21 = a1 + v16;
  v22 = a2 + v16;
  *(_BYTE *)v21 = *(_BYTE *)v22;
  v23 = *(_QWORD *)(v22 + 8);
  *(_QWORD *)(v21 + 8) = v23;
  v24 = a3[9];
  v25 = a3[10];
  v66 = a1;
  v67 = a3;
  v26 = a1 + v24;
  v27 = a2 + v24;
  *(_BYTE *)v26 = *(_BYTE *)v27;
  v28 = *(_QWORD *)(v27 + 8);
  *(_QWORD *)(v26 + 8) = v28;
  v29 = (_QWORD *)(a1 + v25);
  v30 = (_QWORD *)(a2 + v25);
  v31 = (int *)type metadata accessor for Game(0);
  v32 = *((_QWORD *)v31 - 1);
  v33 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v32 + 48);
  swift_retain(v19);
  swift_retain(v20);
  swift_retain(v23);
  swift_retain(v28);
  if (v33(v30, 1, v31))
  {
    v34 = sub_100003304(&qword_10010CA78);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    v35 = v66;
  }
  else
  {
    v36 = v30[1];
    *v29 = *v30;
    v29[1] = v36;
    v37 = v30[3];
    v29[2] = v30[2];
    v29[3] = v37;
    v38 = v30[5];
    v29[4] = v30[4];
    v29[5] = v38;
    v39 = v31[7];
    __dst = (char *)v29 + v39;
    v65 = v32;
    v40 = (char *)v30 + v39;
    v41 = type metadata accessor for Date(0);
    v63 = *(_QWORD *)(v41 - 8);
    v42 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48);
    swift_bridgeObjectRetain(v36);
    swift_bridgeObjectRetain(v37);
    swift_bridgeObjectRetain(v38);
    if (v42(v40, 1, v41))
    {
      v43 = sub_100003304(&qword_10010CC10);
      memcpy(__dst, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v63 + 16))(__dst, v40, v41);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v63 + 56))(__dst, 0, 1, v41);
    }
    v35 = v66;
    *(_QWORD *)((char *)v29 + v31[8]) = *(_QWORD *)((char *)v30 + v31[8]);
    *((_BYTE *)v29 + v31[9]) = *((_BYTE *)v30 + v31[9]);
    *((_BYTE *)v29 + v31[10]) = *((_BYTE *)v30 + v31[10]);
    *((_BYTE *)v29 + v31[11]) = *((_BYTE *)v30 + v31[11]);
    *((_BYTE *)v29 + v31[12]) = *((_BYTE *)v30 + v31[12]);
    *((_BYTE *)v29 + v31[13]) = *((_BYTE *)v30 + v31[13]);
    *((_BYTE *)v29 + v31[14]) = *((_BYTE *)v30 + v31[14]);
    v44 = v31[15];
    v45 = (_QWORD *)((char *)v29 + v44);
    v46 = (_QWORD *)((char *)v30 + v44);
    v47 = v46[1];
    *v45 = *v46;
    v45[1] = v47;
    v48 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v65 + 56);
    swift_bridgeObjectRetain(v47);
    v48(v29, 0, 1, v31);
  }
  v49 = v67[11];
  v50 = v67[12];
  v51 = *(_QWORD *)(a2 + v49);
  *(_QWORD *)(v35 + v49) = v51;
  v52 = *(_QWORD *)(a2 + v50);
  *(_QWORD *)(v35 + v50) = v52;
  v53 = v67[13];
  v54 = (_QWORD *)(v35 + v53);
  v55 = a2 + v53;
  v56 = *(_QWORD *)(a2 + v53);
  v57 = *(_QWORD *)(v55 + 8);
  *v54 = v56;
  v54[1] = v57;
  swift_retain(v51);
  swift_retain(v52);
  swift_retain(v56);
  swift_retain(v57);
  v58 = *(int *)(sub_100003304(&qword_10010CC18) + 32);
  v59 = (char *)v54 + v58;
  v60 = v55 + v58;
  v61 = sub_100003304(&qword_10010CC20);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 16))(v59, v60, v61);
  return v35;
}

uint64_t sub_10003B538(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  int *v36;
  uint64_t v37;
  uint64_t (*v38)(_QWORD *, uint64_t, int *);
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t (*v60)(char *, uint64_t, uint64_t);
  int v61;
  size_t v62;
  void *v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  void (*v68)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v92;
  unsigned int (*v93)(char *, uint64_t, uint64_t);
  uint64_t v94;
  char *__src;
  char *__dst;
  void *__dsta;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_BYTE *)(a2 + 16);
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = v7;
  swift_retain(v6);
  swift_release(v8);
  if (a1 != a2)
  {
    v9 = a3[6];
    v10 = (uint64_t *)(a1 + v9);
    v11 = (uint64_t *)(a2 + v9);
    sub_100010ED0(a1 + v9, &qword_10010D3A8);
    v12 = sub_100003304(&qword_10010D3A8);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v11, v13);
      v14 = 1;
    }
    else
    {
      v15 = *v11;
      *v10 = *v11;
      swift_retain(v15);
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v12, v14);
  }
  v16 = a3[7];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = *(_QWORD *)(a2 + v16);
  v20 = *(_QWORD *)(a1 + v16);
  *(_QWORD *)(a1 + v16) = v19;
  swift_retain(v19);
  swift_release(v20);
  v21 = *(_QWORD *)(v17 + 8);
  v22 = *(_QWORD *)(v18 + 8);
  *(_QWORD *)(v17 + 8) = v22;
  swift_retain(v22);
  swift_release(v21);
  v23 = a3[8];
  v24 = a1 + v23;
  v25 = a2 + v23;
  *(_BYTE *)v24 = *(_BYTE *)v25;
  v26 = *(_QWORD *)(v24 + 8);
  v27 = *(_QWORD *)(v25 + 8);
  *(_QWORD *)(v24 + 8) = v27;
  swift_retain(v27);
  swift_release(v26);
  v28 = a3[9];
  v29 = a1 + v28;
  v30 = a2 + v28;
  *(_BYTE *)v29 = *(_BYTE *)v30;
  v31 = *(_QWORD *)(v29 + 8);
  v32 = *(_QWORD *)(v30 + 8);
  *(_QWORD *)(v29 + 8) = v32;
  swift_retain(v32);
  swift_release(v31);
  v33 = a3[10];
  v34 = (_QWORD *)(a1 + v33);
  v35 = (_QWORD *)(a2 + v33);
  v36 = (int *)type metadata accessor for Game(0);
  v37 = *((_QWORD *)v36 - 1);
  v38 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v37 + 48);
  v39 = v38(v34, 1, v36);
  v40 = v38(v35, 1, v36);
  if (!v39)
  {
    if (v40)
    {
      sub_1000106F0((uint64_t)v34, type metadata accessor for Game);
      goto LABEL_12;
    }
    *v34 = *v35;
    v50 = v35[1];
    v51 = v34[1];
    v34[1] = v50;
    swift_bridgeObjectRetain(v50);
    swift_bridgeObjectRelease(v51);
    v34[2] = v35[2];
    v52 = v35[3];
    v53 = v34[3];
    v34[3] = v52;
    swift_bridgeObjectRetain(v52);
    swift_bridgeObjectRelease(v53);
    v34[4] = v35[4];
    v54 = v35[5];
    v55 = v34[5];
    v34[5] = v54;
    swift_bridgeObjectRetain(v54);
    swift_bridgeObjectRelease(v55);
    v56 = v36[7];
    v57 = (char *)v34 + v56;
    v58 = (char *)v35 + v56;
    v59 = type metadata accessor for Date(0);
    v94 = *(_QWORD *)(v59 - 8);
    v60 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v94 + 48);
    __dsta = v57;
    LODWORD(v57) = v60(v57, 1, v59);
    v61 = v60(v58, 1, v59);
    if ((_DWORD)v57)
    {
      if (!v61)
      {
        (*(void (**)(void *, char *, uint64_t))(v94 + 16))(__dsta, v58, v59);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v94 + 56))(__dsta, 0, 1, v59);
        goto LABEL_23;
      }
      v62 = *(_QWORD *)(*(_QWORD *)(sub_100003304(&qword_10010CC10) - 8) + 64);
      v63 = __dsta;
    }
    else
    {
      if (!v61)
      {
        (*(void (**)(void *, char *, uint64_t))(v94 + 24))(__dsta, v58, v59);
        goto LABEL_23;
      }
      (*(void (**)(void *, uint64_t))(v94 + 8))(__dsta, v59);
      v62 = *(_QWORD *)(*(_QWORD *)(sub_100003304(&qword_10010CC10) - 8) + 64);
      v63 = __dsta;
    }
    memcpy(v63, v58, v62);
LABEL_23:
    *(_QWORD *)((char *)v34 + v36[8]) = *(_QWORD *)((char *)v35 + v36[8]);
    *((_BYTE *)v34 + v36[9]) = *((_BYTE *)v35 + v36[9]);
    *((_BYTE *)v34 + v36[10]) = *((_BYTE *)v35 + v36[10]);
    *((_BYTE *)v34 + v36[11]) = *((_BYTE *)v35 + v36[11]);
    *((_BYTE *)v34 + v36[12]) = *((_BYTE *)v35 + v36[12]);
    *((_BYTE *)v34 + v36[13]) = *((_BYTE *)v35 + v36[13]);
    *((_BYTE *)v34 + v36[14]) = *((_BYTE *)v35 + v36[14]);
    v69 = v36[15];
    v70 = (_QWORD *)((char *)v34 + v69);
    v71 = (_QWORD *)((char *)v35 + v69);
    *v70 = *v71;
    v72 = v71[1];
    v73 = v70[1];
    v70[1] = v72;
    swift_bridgeObjectRetain(v72);
    swift_bridgeObjectRelease(v73);
    goto LABEL_24;
  }
  if (v40)
  {
LABEL_12:
    v49 = sub_100003304(&qword_10010CA78);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    goto LABEL_24;
  }
  *v34 = *v35;
  v41 = v35[1];
  v34[1] = v41;
  v34[2] = v35[2];
  v42 = v35[3];
  v34[3] = v42;
  v34[4] = v35[4];
  v43 = v35[5];
  v34[5] = v43;
  v44 = v36[7];
  __src = (char *)v35 + v44;
  __dst = (char *)v34 + v44;
  v45 = type metadata accessor for Date(0);
  v92 = *(_QWORD *)(v45 - 8);
  v93 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v92 + 48);
  v46 = v41;
  v47 = v45;
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRetain(v43);
  if (v93(__src, 1, v47))
  {
    v48 = sub_100003304(&qword_10010CC10);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v92 + 16))(__dst, __src, v47);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v92 + 56))(__dst, 0, 1, v47);
  }
  *(_QWORD *)((char *)v34 + v36[8]) = *(_QWORD *)((char *)v35 + v36[8]);
  *((_BYTE *)v34 + v36[9]) = *((_BYTE *)v35 + v36[9]);
  *((_BYTE *)v34 + v36[10]) = *((_BYTE *)v35 + v36[10]);
  *((_BYTE *)v34 + v36[11]) = *((_BYTE *)v35 + v36[11]);
  *((_BYTE *)v34 + v36[12]) = *((_BYTE *)v35 + v36[12]);
  *((_BYTE *)v34 + v36[13]) = *((_BYTE *)v35 + v36[13]);
  *((_BYTE *)v34 + v36[14]) = *((_BYTE *)v35 + v36[14]);
  v64 = v36[15];
  v65 = (_QWORD *)((char *)v34 + v64);
  v66 = (_QWORD *)((char *)v35 + v64);
  *v65 = *v66;
  v67 = v66[1];
  v65[1] = v67;
  v68 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v37 + 56);
  swift_bridgeObjectRetain(v67);
  v68(v34, 0, 1, v36);
LABEL_24:
  v74 = a3[11];
  v75 = *(_QWORD *)(a2 + v74);
  v76 = *(_QWORD *)(a1 + v74);
  *(_QWORD *)(a1 + v74) = v75;
  swift_retain(v75);
  swift_release(v76);
  v77 = a3[12];
  v78 = *(_QWORD *)(a2 + v77);
  v79 = *(_QWORD *)(a1 + v77);
  *(_QWORD *)(a1 + v77) = v78;
  swift_retain(v78);
  swift_release(v79);
  v80 = a3[13];
  v81 = a1 + v80;
  v82 = (uint64_t *)(a2 + v80);
  v83 = *(_QWORD *)(a1 + v80);
  v84 = *v82;
  *(_QWORD *)(a1 + v80) = *v82;
  swift_retain(v84);
  swift_release(v83);
  v85 = v82[1];
  v86 = *(_QWORD *)(v81 + 8);
  *(_QWORD *)(v81 + 8) = v85;
  swift_retain(v85);
  swift_release(v86);
  v87 = *(int *)(sub_100003304(&qword_10010CC18) + 32);
  v88 = v81 + v87;
  v89 = (char *)v82 + v87;
  v90 = sub_100003304(&qword_10010CC20);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v90 - 8) + 24))(v88, v89, v90);
  return a1;
}

uint64_t sub_10003BB58(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *__dst;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = a3[6];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = sub_100003304(&qword_10010D3A8);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
    swift_storeEnumTagMultiPayload(v8, v10, 1);
  }
  else
  {
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  v12 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v12) = *(_OWORD *)(a2 + v12);
  v13 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  v14 = (_OWORD *)(a1 + v13);
  v15 = (_OWORD *)(a2 + v13);
  v16 = (int *)type metadata accessor for Game(0);
  v17 = *((_QWORD *)v16 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v17 + 48))(v15, 1, v16))
  {
    v18 = sub_100003304(&qword_10010CA78);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v19 = v15[1];
    *v14 = *v15;
    v14[1] = v19;
    v14[2] = v15[2];
    v20 = v16[7];
    __dst = (char *)v14 + v20;
    v21 = (char *)v15 + v20;
    v22 = type metadata accessor for Date(0);
    v23 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      v24 = sub_100003304(&qword_10010CC10);
      memcpy(__dst, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(__dst, v21, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(__dst, 0, 1, v22);
    }
    *(_QWORD *)((char *)v14 + v16[8]) = *(_QWORD *)((char *)v15 + v16[8]);
    *((_BYTE *)v14 + v16[9]) = *((_BYTE *)v15 + v16[9]);
    *((_BYTE *)v14 + v16[10]) = *((_BYTE *)v15 + v16[10]);
    *((_BYTE *)v14 + v16[11]) = *((_BYTE *)v15 + v16[11]);
    *((_BYTE *)v14 + v16[12]) = *((_BYTE *)v15 + v16[12]);
    *((_BYTE *)v14 + v16[13]) = *((_BYTE *)v15 + v16[13]);
    *((_BYTE *)v14 + v16[14]) = *((_BYTE *)v15 + v16[14]);
    *(_OWORD *)((char *)v14 + v16[15]) = *(_OWORD *)((char *)v15 + v16[15]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v17 + 56))(v14, 0, 1, v16);
  }
  v25 = a3[12];
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  *(_QWORD *)(a1 + v25) = *(_QWORD *)(a2 + v25);
  v26 = a3[13];
  v27 = (_QWORD *)(a1 + v26);
  v28 = a2 + v26;
  v29 = *(_QWORD *)(a2 + v26 + 8);
  *v27 = *(_QWORD *)(a2 + v26);
  v27[1] = v29;
  v30 = *(int *)(sub_100003304(&qword_10010CC18) + 32);
  v31 = (char *)v27 + v30;
  v32 = v28 + v30;
  v33 = sub_100003304(&qword_10010CC20);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v31, v32, v33);
  return a1;
}

uint64_t sub_10003BE18(uint64_t a1, uint64_t a2, int *a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  int *v29;
  uint64_t v30;
  uint64_t (*v31)(_QWORD *, uint64_t, int *);
  int v32;
  int v33;
  __int128 v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t (*v51)(char *, uint64_t, uint64_t);
  int v52;
  size_t v53;
  void *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v75;
  char *__dst;
  void *__dsta;

  v6 = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v6;
  swift_release(v7);
  if (a1 != a2)
  {
    v8 = a3[6];
    v9 = (void *)(a1 + v8);
    v10 = (const void *)(a2 + v8);
    sub_100010ED0(a1 + v8, &qword_10010D3A8);
    v11 = sub_100003304(&qword_10010D3A8);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  v13 = a3[7];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = *(_QWORD *)(a1 + v13);
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);
  swift_release(v16);
  v17 = *(_QWORD *)(v14 + 8);
  *(_QWORD *)(v14 + 8) = *(_QWORD *)(v15 + 8);
  swift_release(v17);
  v18 = a3[8];
  v19 = a1 + v18;
  v20 = a2 + v18;
  *(_BYTE *)v19 = *(_BYTE *)v20;
  v21 = *(_QWORD *)(v19 + 8);
  *(_QWORD *)(v19 + 8) = *(_QWORD *)(v20 + 8);
  swift_release(v21);
  v22 = a3[9];
  v23 = a1 + v22;
  v24 = a2 + v22;
  *(_BYTE *)v23 = *(_BYTE *)v24;
  v25 = *(_QWORD *)(v23 + 8);
  *(_QWORD *)(v23 + 8) = *(_QWORD *)(v24 + 8);
  swift_release(v25);
  v26 = a3[10];
  v27 = (_QWORD *)(a1 + v26);
  v28 = (_QWORD *)(a2 + v26);
  v29 = (int *)type metadata accessor for Game(0);
  v30 = *((_QWORD *)v29 - 1);
  v31 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v30 + 48);
  v32 = v31(v27, 1, v29);
  v33 = v31(v28, 1, v29);
  if (!v32)
  {
    if (v33)
    {
      sub_1000106F0((uint64_t)v27, type metadata accessor for Game);
      goto LABEL_11;
    }
    v41 = v28[1];
    v42 = v27[1];
    *v27 = *v28;
    v27[1] = v41;
    swift_bridgeObjectRelease(v42);
    v43 = v28[3];
    v44 = v27[3];
    v27[2] = v28[2];
    v27[3] = v43;
    swift_bridgeObjectRelease(v44);
    v45 = v28[5];
    v46 = v27[5];
    v27[4] = v28[4];
    v27[5] = v45;
    swift_bridgeObjectRelease(v46);
    v47 = v29[7];
    v48 = (char *)v27 + v47;
    v49 = (char *)v28 + v47;
    v50 = type metadata accessor for Date(0);
    v75 = *(_QWORD *)(v50 - 8);
    v51 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v75 + 48);
    __dsta = v48;
    LODWORD(v48) = v51(v48, 1, v50);
    v52 = v51(v49, 1, v50);
    if ((_DWORD)v48)
    {
      if (!v52)
      {
        (*(void (**)(void *, char *, uint64_t))(v75 + 32))(__dsta, v49, v50);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v75 + 56))(__dsta, 0, 1, v50);
        goto LABEL_22;
      }
      v53 = *(_QWORD *)(*(_QWORD *)(sub_100003304(&qword_10010CC10) - 8) + 64);
      v54 = __dsta;
    }
    else
    {
      if (!v52)
      {
        (*(void (**)(void *, char *, uint64_t))(v75 + 40))(__dsta, v49, v50);
        goto LABEL_22;
      }
      (*(void (**)(void *, uint64_t))(v75 + 8))(__dsta, v50);
      v53 = *(_QWORD *)(*(_QWORD *)(sub_100003304(&qword_10010CC10) - 8) + 64);
      v54 = __dsta;
    }
    memcpy(v54, v49, v53);
LABEL_22:
    *(_QWORD *)((char *)v27 + v29[8]) = *(_QWORD *)((char *)v28 + v29[8]);
    *((_BYTE *)v27 + v29[9]) = *((_BYTE *)v28 + v29[9]);
    *((_BYTE *)v27 + v29[10]) = *((_BYTE *)v28 + v29[10]);
    *((_BYTE *)v27 + v29[11]) = *((_BYTE *)v28 + v29[11]);
    *((_BYTE *)v27 + v29[12]) = *((_BYTE *)v28 + v29[12]);
    *((_BYTE *)v27 + v29[13]) = *((_BYTE *)v28 + v29[13]);
    *((_BYTE *)v27 + v29[14]) = *((_BYTE *)v28 + v29[14]);
    v55 = v29[15];
    v56 = (_QWORD *)((char *)v27 + v55);
    v57 = (_QWORD *)((char *)v28 + v55);
    v59 = *v57;
    v58 = v57[1];
    v60 = v56[1];
    *v56 = v59;
    v56[1] = v58;
    swift_bridgeObjectRelease(v60);
    goto LABEL_23;
  }
  if (v33)
  {
LABEL_11:
    v40 = sub_100003304(&qword_10010CA78);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    goto LABEL_23;
  }
  v34 = *((_OWORD *)v28 + 1);
  *(_OWORD *)v27 = *(_OWORD *)v28;
  *((_OWORD *)v27 + 1) = v34;
  *((_OWORD *)v27 + 2) = *((_OWORD *)v28 + 2);
  v35 = v29[7];
  __dst = (char *)v27 + v35;
  v36 = (char *)v28 + v35;
  v37 = type metadata accessor for Date(0);
  v38 = *(_QWORD *)(v37 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
  {
    v39 = sub_100003304(&qword_10010CC10);
    memcpy(__dst, v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v38 + 32))(__dst, v36, v37);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(__dst, 0, 1, v37);
  }
  *(_QWORD *)((char *)v27 + v29[8]) = *(_QWORD *)((char *)v28 + v29[8]);
  *((_BYTE *)v27 + v29[9]) = *((_BYTE *)v28 + v29[9]);
  *((_BYTE *)v27 + v29[10]) = *((_BYTE *)v28 + v29[10]);
  *((_BYTE *)v27 + v29[11]) = *((_BYTE *)v28 + v29[11]);
  *((_BYTE *)v27 + v29[12]) = *((_BYTE *)v28 + v29[12]);
  *((_BYTE *)v27 + v29[13]) = *((_BYTE *)v28 + v29[13]);
  *((_BYTE *)v27 + v29[14]) = *((_BYTE *)v28 + v29[14]);
  *(_OWORD *)((char *)v27 + v29[15]) = *(_OWORD *)((char *)v28 + v29[15]);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v30 + 56))(v27, 0, 1, v29);
LABEL_23:
  v61 = a3[11];
  v62 = *(_QWORD *)(a1 + v61);
  *(_QWORD *)(a1 + v61) = *(_QWORD *)(a2 + v61);
  swift_release(v62);
  v63 = a3[12];
  v64 = *(_QWORD *)(a1 + v63);
  *(_QWORD *)(a1 + v63) = *(_QWORD *)(a2 + v63);
  swift_release(v64);
  v65 = a3[13];
  v66 = a1 + v65;
  v67 = a2 + v65;
  v68 = *(_QWORD *)(a1 + v65);
  *(_QWORD *)(a1 + v65) = *(_QWORD *)(a2 + v65);
  swift_release(v68);
  v69 = *(_QWORD *)(v66 + 8);
  *(_QWORD *)(v66 + 8) = *(_QWORD *)(v67 + 8);
  swift_release(v69);
  v70 = *(int *)(sub_100003304(&qword_10010CC18) + 32);
  v71 = v66 + v70;
  v72 = v67 + v70;
  v73 = sub_100003304(&qword_10010CC20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 40))(v71, v72, v73);
  return a1;
}

uint64_t sub_10003C348(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003C354);
}

uint64_t sub_10003C354(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v6 = sub_100003304(&qword_10010DD18);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v12 = sub_100003304(&qword_10010CA78);
    v7 = *(_QWORD *)(v12 - 8);
    if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    {
      v8 = v12;
      v9 = a3[10];
    }
    else
    {
      v8 = sub_100003304(&qword_10010CC18);
      v7 = *(_QWORD *)(v8 - 8);
      v9 = a3[13];
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = *(_QWORD *)(a1 + a3[7]);
  if (v10 >= 0xFFFFFFFF)
    LODWORD(v10) = -1;
  return (v10 + 1);
}

uint64_t sub_10003C428(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003C434);
}

uint64_t sub_10003C434(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = sub_100003304(&qword_10010DD18);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[6];
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + a4[7]) = (a2 - 1);
      return result;
    }
    v12 = sub_100003304(&qword_10010CA78);
    v9 = *(_QWORD *)(v12 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v12;
      v11 = a4[10];
    }
    else
    {
      v10 = sub_100003304(&qword_10010CC18);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = a4[13];
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

uint64_t type metadata accessor for AccessPointAnimationView(uint64_t a1)
{
  return sub_100010C88(a1, (uint64_t *)&unk_10010DD78, (uint64_t)&nominal type descriptor for AccessPointAnimationView);
}

void sub_10003C518(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[10];

  v8[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v8[1] = "\t";
  sub_10001DD8C(319, (unint64_t *)&unk_10010DD88, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v8[2] = *(_QWORD *)(v2 - 8) + 64;
    v8[3] = &unk_1000C9728;
    v8[4] = &unk_1000C9740;
    v8[5] = &unk_1000C9740;
    sub_10001DD8C(319, (unint64_t *)&qword_10010CC98, type metadata accessor for Game, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    if (v5 <= 0x3F)
    {
      v8[6] = *(_QWORD *)(v4 - 8) + 64;
      v8[7] = (char *)&value witness table for Builtin.NativeObject + 64;
      v8[8] = (char *)&value witness table for Builtin.NativeObject + 64;
      sub_10001DDE4(319);
      if (v7 <= 0x3F)
      {
        v8[9] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 10, v8, a1 + 16);
      }
    }
  }
}

unint64_t sub_10003C628()
{
  unint64_t result;

  result = qword_10010DDD8;
  if (!qword_10010DDD8)
  {
    result = swift_getWitnessTable(&unk_1000C9798, &type metadata for AccessPointModel.AnimationState);
    atomic_store(result, (unint64_t *)&qword_10010DDD8);
  }
  return result;
}

uint64_t sub_10003C66C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E4610, 1);
}

uint64_t sub_10003C67C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t KeyPath;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  void (*v52)(char *, uint64_t, __n128);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v60 = a2;
  v61 = a6;
  v57 = a5;
  v59 = a3;
  v55 = type metadata accessor for AccessPointAnchoring(0);
  v58 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = type metadata accessor for AccessPointContainer(0);
  __chkstk_darwin(v54);
  v13 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)a7 = 0;
  v14 = type metadata accessor for RemoteAlertAccessPointContext(0);
  v15 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  *(_QWORD *)(a7 + 8) = Environment.init<A>(_:)(v14, v14, v15);
  *(_BYTE *)(a7 + 16) = v16 & 1;
  v17 = (int *)type metadata accessor for AccessPointAnimationView(0);
  v18 = (_QWORD *)(a7 + v17[6]);
  *v18 = swift_getKeyPath(&unk_1000C9AD0);
  v19 = sub_100003304(&qword_10010D3A8);
  swift_storeEnumTagMultiPayload(v18, v19, 0);
  v20 = a7 + v17[8];
  LOBYTE(v62) = 0;
  State.init(wrappedValue:)(&v62, &type metadata for Bool);
  v21 = v64;
  *(_BYTE *)v20 = v63;
  *(_QWORD *)(v20 + 8) = v21;
  v22 = a7 + v17[9];
  if (qword_10010BAE8 != -1)
    swift_once(&qword_10010BAE8, sub_10003AA70);
  v23 = qword_1001232F0;
  KeyPath = swift_getKeyPath(&unk_1000C9B78);
  v63 = v23;
  v25 = sub_1000035B4(&qword_10010E108, type metadata accessor for GameModeNotifier, (uint64_t)&unk_1000C97C0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v63, KeyPath, v25);
  swift_release(KeyPath);
  LOBYTE(v62) = *(_BYTE *)(v23 + 16);
  State.init(wrappedValue:)(&v62, &type metadata for Bool);
  v26 = v64;
  *(_BYTE *)v22 = v63;
  *(_QWORD *)(v22 + 8) = v26;
  v27 = a7 + v17[10];
  v28 = type metadata accessor for Game(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v27, 1, 1, v28);
  sub_100032F94(v59, v27);
  *(_QWORD *)(a7 + v17[11]) = a4;
  v29 = v17[12];
  v56 = a4;
  v30 = v57;
  *(_QWORD *)(a7 + v29) = v57;
  sub_100010CBC(v61, a7 + v17[13], &qword_10010CC18);
  v31 = v13;
  sub_100007878(a1, (uint64_t)v13, type metadata accessor for AccessPointContainer);
  v32 = v55;
  (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v11, v60, v55);
  v33 = type metadata accessor for AccessPointModel(0);
  v34 = swift_allocObject(v33, *(unsigned int *)(v33 + 48), *(unsigned __int16 *)(v33 + 52));
  swift_retain(a4);
  swift_retain(v30);
  v35 = (uint64_t)v31;
  v36 = v11;
  sub_10003A62C(v35, (uint64_t)v11);
  v37 = (uint64_t *)(a7 + v17[7]);
  v62 = v34;
  State.init(wrappedValue:)(&v62, v33);
  v38 = v63;
  v39 = v64;
  *v37 = v63;
  v37[1] = v39;
  v40 = *(_QWORD *)(*(_QWORD *)(a1 + *(int *)(v54 + 28)) + 16);
  v41 = a1;
  v43 = v59;
  v42 = v60;
  v44 = v61;
  v45 = v30;
  v46 = v58;
  if (v40 < 2)
  {
    swift_release(v56);
    swift_release(v45);
    sub_100010ED0(v44, &qword_10010CC18);
    sub_100010ED0(v43, &qword_10010CA78);
    v52 = *(void (**)(char *, uint64_t, __n128))(v46 + 8);
  }
  else
  {
    v63 = v38;
    v64 = v39;
    sub_100003304(&qword_10010DE20);
    State.wrappedValue.getter(&v62);
    v47 = v46;
    v48 = v62;
    (*(void (**)(char *, _QWORD, uint64_t))(v47 + 104))(v36, enum case for AccessPointAnchoring.topCentered(_:), v32);
    v49 = swift_getKeyPath(&unk_1000C9988);
    __chkstk_darwin(v49);
    *(&v54 - 2) = v48;
    *(&v54 - 1) = (uint64_t)v36;
    v63 = v48;
    v50 = sub_1000035B4(&qword_10010DE28, type metadata accessor for AccessPointModel, (uint64_t)&unk_1000C97DC);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v63, v49, sub_10004B104, &v54 - 4, (char *)&type metadata for () + 8, v50);
    v51 = swift_release(v49);
    v52 = *(void (**)(char *, uint64_t, __n128))(v47 + 8);
    v42 = v60;
    v52(v36, v32, v51);
    swift_release(v56);
    swift_release(v57);
    swift_release(v48);
    sub_100010ED0(v61, &qword_10010CC18);
    sub_100010ED0(v43, &qword_10010CA78);
  }
  ((void (*)(uint64_t, uint64_t))v52)(v42, v32);
  return sub_1000106F0(v41, type metadata accessor for AccessPointContainer);
}

double sub_10003CB60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  double result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v1 = type metadata accessor for AccessPointAnimationView(0);
  v41 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v43 = v2;
  v44 = (uint64_t)&v40 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100003304(&qword_10010EB20);
  __chkstk_darwin(v3);
  v42 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AccessPointContainer(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (uint64_t *)(v0 + *(int *)(v1 + 28));
  v9 = *v8;
  v10 = v8[1];
  v45 = v0;
  v46 = v9;
  v47 = v10;
  sub_100003304(&qword_10010DE20);
  State.wrappedValue.getter(&v48);
  v11 = v48;
  KeyPath = swift_getKeyPath(&unk_1000C9870);
  v46 = v11;
  v13 = sub_1000035B4(&qword_10010DE28, type metadata accessor for AccessPointModel, (uint64_t)&unk_1000C97DC);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v46, KeyPath, v13);
  swift_release(KeyPath);
  LODWORD(KeyPath) = *(unsigned __int8 *)(v11 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__state);
  *(_QWORD *)&result = swift_release(v11).n128_u64[0];
  if (!(_DWORD)KeyPath)
  {
    v46 = v9;
    v47 = v10;
    State.wrappedValue.getter(&v48);
    v15 = v48;
    v16 = swift_getKeyPath(&unk_1000C9910);
    v46 = v15;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v46, v16, v13);
    swift_release(v16);
    v17 = *(_QWORD *)(v15 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__highlightIndex);
    swift_release(v15);
    v46 = v9;
    v47 = v10;
    State.wrappedValue.getter(&v48);
    v18 = v48;
    v19 = swift_getKeyPath(&unk_1000C9938);
    v46 = v18;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v46, v19, v13);
    swift_release(v19);
    v20 = v18 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container;
    swift_beginAccess(v18 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container, &v46, 0, 0);
    sub_100007878(v20, (uint64_t)v7, type metadata accessor for AccessPointContainer);
    swift_release(v18);
    v21 = *(_QWORD *)&v7[*(int *)(v5 + 28)];
    swift_bridgeObjectRetain(v21);
    sub_1000106F0((uint64_t)v7, type metadata accessor for AccessPointContainer);
    v22 = *(_QWORD *)(v21 + 16);
    swift_bridgeObjectRelease(v21);
    if (v17 < v22)
    {
      v23 = *(_QWORD *)(v45 + 8);
      v24 = *(_BYTE *)(v45 + 16);
      v25 = swift_retain(v23);
      v26 = sub_100030D7C(v25, v24);
      swift_release(v23);
      v27 = swift_getKeyPath(&unk_1000C98C0);
      v48 = v26;
      v28 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v48, v27, v28);
      swift_release(v27);
      if (*(_BYTE *)(v26 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__active) == 1)
      {
        v29 = swift_getKeyPath(&unk_1000C98E8);
        v48 = v26;
        ObservationRegistrar.access<A, B>(_:keyPath:)(&v48, v29, v28);
        swift_release(v29);
        v30 = *(_QWORD *)(v26 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__hideCount);
        *(_QWORD *)&result = swift_release(v26).n128_u64[0];
        if (v30 > 0)
          return result;
        v31 = type metadata accessor for TaskPriority(0);
        v32 = (uint64_t)v42;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v42, 1, 1, v31);
        v33 = v44;
        sub_100007878(v45, v44, type metadata accessor for AccessPointAnimationView);
        v34 = type metadata accessor for MainActor(0);
        v35 = static MainActor.shared.getter(v34);
        v36 = *(unsigned __int8 *)(v41 + 80);
        v37 = (v36 + 32) & ~v36;
        v38 = swift_allocObject(&unk_1000FE138, v37 + v43, v36 | 7);
        *(_QWORD *)(v38 + 16) = v35;
        *(_QWORD *)(v38 + 24) = &protocol witness table for MainActor;
        sub_100010F0C(v33, v38 + v37, type metadata accessor for AccessPointAnimationView);
        v39 = sub_100028240(v32, (uint64_t)&unk_10010DE48, v38);
      }
      else
      {
        v39 = v26;
      }
      *(_QWORD *)&result = swift_release(v39).n128_u64[0];
    }
  }
  return result;
}

uint64_t sub_10003CFAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4[5] = a4;
  v5 = type metadata accessor for AccessPointAnimationView(0);
  v4[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[7] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v4[8] = v7;
  v4[9] = swift_task_alloc((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003304(&qword_10010EB20);
  v4[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MainActor(0);
  v4[11] = v9;
  v4[12] = static MainActor.shared.getter(v9);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  v4[13] = v10;
  v4[14] = v11;
  return swift_task_switch(sub_10003D06C, v10, v11);
}

void sub_10003D06C()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  unint64_t v7;
  _QWORD *v8;

  v1 = (uint64_t *)(v0[5] + *(int *)(v0[6] + 28));
  v3 = *v1;
  v2 = v1[1];
  v0[2] = v3;
  v0[3] = v2;
  sub_100003304(&qword_10010DE20);
  State.wrappedValue.getter(v0 + 4);
  v4 = v0[4];
  v5 = sub_10003D2C8(v4);
  swift_release(v4);
  v6 = floor(v5 * 1000000000.0);
  if ((~*(_QWORD *)&v6 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v6 <= -1.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v6 < 1.84467441e19)
  {
    v7 = (unint64_t)v6;
    v8 = (_QWORD *)swift_task_alloc(async function pointer to static Task<>.sleep(nanoseconds:)[1]);
    v0[15] = v8;
    *v8 = v0;
    v8[1] = sub_10003D160;
    static Task<>.sleep(nanoseconds:)(v7);
    return;
  }
LABEL_7:
  __break(1u);
}

uint64_t sub_10003D160()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 120));
  if (v0)
  {
    swift_errorRelease(v0);
    v3 = *(_QWORD *)(v2 + 104);
    v4 = *(_QWORD *)(v2 + 112);
    v5 = sub_10004B0FC;
  }
  else
  {
    v3 = *(_QWORD *)(v2 + 104);
    v4 = *(_QWORD *)(v2 + 112);
    v5 = sub_10003D1C8;
  }
  return swift_task_switch(v5, v3, v4);
}

uint64_t sub_10003D1C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 96));
  v6 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v2, 1, 1, v6);
  v7 = sub_100007878(v5, v1, type metadata accessor for AccessPointAnimationView);
  v8 = static MainActor.shared.getter(v7);
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = swift_allocObject(&unk_1000FE160, v10 + v3, v9 | 7);
  *(_QWORD *)(v11 + 16) = v8;
  *(_QWORD *)(v11 + 24) = &protocol witness table for MainActor;
  sub_100010F0C(v1, v11 + v10, type metadata accessor for AccessPointAnimationView);
  v12 = sub_100028240(v2, (uint64_t)&unk_10010DE58, v11);
  swift_release(v12);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double sub_10003D2C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  double v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v18;
  _QWORD v19[3];

  v2 = type metadata accessor for AccessPointContainer(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v19[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DynamicTypeSize(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (_QWORD *)((char *)&v19[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for AccessPointAnimationView(0);
  v9 = sub_100030ED8(v8);
  v10 = DynamicTypeSize.isAccessibilitySize.getter(v9);
  (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v8, v5);
  if ((v10 & 1) != 0)
    v11 = 1.5;
  else
    v11 = 1.0;
  KeyPath = swift_getKeyPath(&unk_1000C9938);
  v19[0] = a1;
  v13 = sub_1000035B4(&qword_10010DE28, type metadata accessor for AccessPointModel, (uint64_t)&unk_1000C97DC);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v19, KeyPath, v13);
  swift_release(KeyPath);
  v14 = a1 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container;
  swift_beginAccess(a1 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container, v19, 0, 0);
  sub_100007878(v14, (uint64_t)v4, type metadata accessor for AccessPointContainer);
  v15 = swift_getKeyPath(&unk_1000C9910);
  v18 = a1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v18, v15, v13);
  swift_release(v15);
  v16 = AccessPointContainer.displayDuration(for:)(*(_QWORD *)(a1
                                                             + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__highlightIndex));
  sub_1000106F0((uint64_t)v4, type metadata accessor for AccessPointContainer);
  return v11 * v16;
}

uint64_t sub_10003D4A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4[41] = a4;
  v5 = type metadata accessor for AccessPointContainer(0);
  v4[42] = v5;
  v4[43] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for MainActor(0);
  v4[44] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  return swift_task_switch(sub_10003D530, v7, v8);
}

uint64_t sub_10003D530()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v1 = *(_QWORD *)(v0 + 328);
  swift_release(*(_QWORD *)(v0 + 352));
  v2 = type metadata accessor for AccessPointAnimationView(0);
  v3 = *(_QWORD *)(v1 + *(int *)(v2 + 44));
  KeyPath = swift_getKeyPath(&unk_1000C9848);
  *(_QWORD *)(v0 + 224) = v3;
  v5 = sub_1000035B4(&qword_10010CE00, type metadata accessor for GameDashboardLaunchContext, (uint64_t)&protocol conformance descriptor for GameDashboardLaunchContext);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 224, KeyPath, v5);
  swift_release(KeyPath);
  swift_beginAccess(v3 + 16, v0 + 40, 0, 0);
  if ((*(_BYTE *)(v3 + 16) & 1) != 0)
    goto LABEL_14;
  v54 = *(_QWORD *)(v0 + 344);
  v55 = *(_QWORD *)(v0 + 336);
  v6 = (uint64_t *)(*(_QWORD *)(v0 + 328) + *(int *)(v2 + 28));
  v7 = *v6;
  v8 = v6[1];
  v53 = v6;
  *(_QWORD *)(v0 + 112) = *v6;
  *(_QWORD *)(v0 + 120) = v8;
  sub_100003304(&qword_10010DE20);
  State.wrappedValue.getter((_QWORD *)(v0 + 296));
  v9 = *(_QWORD *)(v0 + 296);
  v10 = swift_getKeyPath(&unk_1000C9910);
  *(_QWORD *)(v0 + 272) = v9;
  v11 = sub_1000035B4(&qword_10010DE28, type metadata accessor for AccessPointModel, (uint64_t)&unk_1000C97DC);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 272, v10, v11);
  swift_release(v10);
  v12 = *(_QWORD *)(v9 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__highlightIndex);
  swift_release(v9);
  v56 = v7;
  v57 = v8;
  *(_QWORD *)(v0 + 144) = v7;
  *(_QWORD *)(v0 + 152) = v8;
  State.wrappedValue.getter((_QWORD *)(v0 + 256));
  v13 = *(_QWORD *)(v0 + 256);
  v14 = swift_getKeyPath(&unk_1000C9938);
  *(_QWORD *)(v0 + 240) = v13;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 240, v14, v11);
  swift_release(v14);
  v15 = v13 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container;
  swift_beginAccess(v13 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container, v0 + 64, 0, 0);
  sub_100007878(v15, v54, type metadata accessor for AccessPointContainer);
  swift_release(v13);
  v16 = *(_QWORD *)(v54 + *(int *)(v55 + 28));
  swift_bridgeObjectRetain(v16);
  sub_1000106F0(v54, type metadata accessor for AccessPointContainer);
  v17 = *(_QWORD *)(v16 + 16);
  swift_bridgeObjectRelease(v16);
  if (v12 < v17 - 1)
  {
    v18 = (unint64_t *)(v0 + 312);
    *(_QWORD *)(v0 + 176) = v56;
    *(_QWORD *)(v0 + 184) = v57;
    State.wrappedValue.getter((_QWORD *)(v0 + 288));
    v19 = *(_QWORD *)(v0 + 288);
    v20 = (char *)&unk_1000C9910;
    v21 = swift_getKeyPath(&unk_1000C9910);
    *(_QWORD *)(v0 + 304) = v19;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 304, v21, v11);
    swift_release(v21);
    *(_QWORD *)(v0 + 312) = v19;
    v22 = swift_getKeyPath(&unk_1000C9910);
    ObservationRegistrar.willSet<A, B>(_:keyPath:)(v0 + 312, v22, v11);
    swift_release(v22);
    v23 = *(_QWORD *)(v19 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__highlightIndex);
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (!v24)
    {
      *(_QWORD *)(v19 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__highlightIndex) = v25;
      *(_QWORD *)(v0 + 320) = v19;
      v26 = swift_getKeyPath(&unk_1000C9910);
      ObservationRegistrar.didSet<A, B>(_:keyPath:)(v0 + 320, v26, v11);
      swift_release(v19);
      swift_release(v26);
      sub_10003CB60();
      goto LABEL_14;
    }
    __break(1u);
LABEL_16:
    swift_once(&qword_10010BAA8, sub_1000395E8);
    goto LABEL_8;
  }
  v55 = v0 + 88;
  v27 = *(_QWORD *)(v0 + 336);
  v28 = *(_QWORD *)(v0 + 344);
  v50 = (_QWORD *)(v0 + 232);
  v51 = (_QWORD *)(v0 + 248);
  v52 = v0 + 264;
  *(_QWORD *)(v0 + 192) = v56;
  *(_QWORD *)(v0 + 200) = v57;
  v57 = v0 + 280;
  State.wrappedValue.getter((_QWORD *)(v0 + 208));
  v29 = *(_QWORD *)(v0 + 208);
  v30 = swift_getKeyPath(&unk_1000C9938);
  *(_QWORD *)(v0 + 216) = v29;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 216, v30, v11);
  swift_release(v30);
  v18 = &qword_10010D000;
  v31 = v29 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container;
  swift_beginAccess(v29 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container, v0 + 16, 0, 0);
  sub_100007878(v31, v28, type metadata accessor for AccessPointContainer);
  swift_release(v29);
  v56 = v27;
  v32 = *(unsigned __int8 *)(v28 + *(int *)(v27 + 24));
  sub_1000106F0(v28, type metadata accessor for AccessPointContainer);
  v20 = (char *)&type metadata for ();
  v54 = v11;
  if (v32 < 6 && ((0x39u >> v32) & 1) != 0)
  {
    v33 = &qword_10010D000;
    goto LABEL_10;
  }
  if (qword_10010BAA8 != -1)
    goto LABEL_16;
LABEL_8:
  v33 = v18;
  v34 = *(_QWORD *)(v0 + 328);
  v35 = qword_10010D8C8;
  v36 = swift_task_alloc(32);
  *(_QWORD *)(v36 + 16) = v34;
  withAnimation<A>(_:_:)(v35, sub_100048DF4, v36, v20 + 8);
  swift_task_dealloc(v36);
LABEL_10:
  v37 = v20;
  v38 = *(_QWORD *)(v0 + 344);
  v39 = *v53;
  v40 = v53[1];
  *(_QWORD *)(v0 + 160) = *v53;
  *(_QWORD *)(v0 + 168) = v40;
  State.wrappedValue.getter(v50);
  v41 = *(_QWORD *)(v0 + 232);
  *(_QWORD *)(v0 + 128) = v39;
  *(_QWORD *)(v0 + 136) = v40;
  State.wrappedValue.getter(v51);
  v42 = *(_QWORD *)(v0 + 248);
  v43 = swift_getKeyPath(&unk_1000C9938);
  *(_QWORD *)(v0 + 264) = v42;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v52, v43, v54);
  swift_release(v43);
  v44 = v42 + v33[289];
  swift_beginAccess(v44, v55, 0, 0);
  sub_100007878(v44, v38, type metadata accessor for AccessPointContainer);
  swift_release(v42);
  v45 = *(unsigned __int8 *)(v38 + *(int *)(v56 + 24));
  sub_1000106F0(v38, type metadata accessor for AccessPointContainer);
  if (v45 >= 6)
    v46 = 1;
  else
    v46 = 0x20202010102uLL >> (8 * v45);
  v47 = swift_getKeyPath(&unk_1000C9870);
  v48 = swift_task_alloc(32);
  *(_QWORD *)(v48 + 16) = v41;
  *(_BYTE *)(v48 + 24) = v46;
  *(_QWORD *)(v0 + 280) = v41;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v57, v47, sub_100048E0C, v48, v37 + 8, v54);
  swift_release(v41);
  swift_release(v47);
  swift_task_dealloc(v48);
LABEL_14:
  swift_task_dealloc(*(_QWORD *)(v0 + 344));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double sub_10003DB8C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  double result;
  char v18[16];
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = type metadata accessor for AccessPointAnchoring(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v18[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = (uint64_t *)(a1 + *(int *)(type metadata accessor for AccessPointAnimationView(0) + 28));
  v8 = v6[1];
  v21 = *v6;
  v7 = v21;
  v22 = v8;
  sub_100003304(&qword_10010DE20);
  State.wrappedValue.getter(&v23);
  v9 = v23;
  v21 = v7;
  v22 = v8;
  State.wrappedValue.getter(&v23);
  v10 = v23;
  KeyPath = swift_getKeyPath(&unk_1000C9960);
  v21 = v10;
  v12 = sub_1000035B4(&qword_10010DE28, type metadata accessor for AccessPointModel, (uint64_t)&unk_1000C97DC);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v21, KeyPath, v12);
  swift_release(KeyPath);
  v13 = v10 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__destAnchor;
  swift_beginAccess(v10 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__destAnchor, &v21, 0, 0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v13, v2);
  swift_release(v10);
  v14 = swift_getKeyPath(&unk_1000C9988);
  v19 = v9;
  v20 = v5;
  v23 = v9;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v23, v14, sub_100048E74, v18, (char *)&type metadata for () + 8, v12);
  v15 = swift_release(v14);
  (*(void (**)(char *, uint64_t, __n128))(v3 + 8))(v5, v2, v15);
  *(_QWORD *)&result = swift_release(v9).n128_u64[0];
  return result;
}

uint64_t sub_10003DD60@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t KeyPath;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(char *, uint64_t, uint64_t);
  uint64_t v94;
  uint64_t v95;
  _BYTE *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  double v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  double v126;
  double v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  double *v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  double v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  double v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t (**v154)();
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  __int128 v162;
  int v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  __int128 v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t *v208;
  uint64_t v209;
  _QWORD *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  __int128 v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  __int128 v222;
  uint64_t v223;
  uint64_t v224;
  unsigned __int8 v225;
  __int128 v226;
  uint64_t v227;
  unsigned __int8 v228;
  char v229;
  _BYTE v230[7];
  _BYTE v231[7];
  _BYTE v232[7];
  _BYTE v233[7];

  v207 = a1;
  v2 = type metadata accessor for AccessPointAnimationView(0);
  v205 = *(_QWORD *)(v2 - 8);
  v206 = *(_QWORD *)(v205 + 64);
  __chkstk_darwin(v2);
  v204 = (uint64_t)&v162 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v203 = sub_100003304(&qword_10010E020);
  v4 = __chkstk_darwin(v203);
  v202 = (char *)&v162 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v193 = type metadata accessor for UnevenRoundedRectangle(0, v4);
  __chkstk_darwin(v193);
  v191 = (char *)&v162 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v183 = sub_100003304(&qword_10010CAB0);
  __chkstk_darwin(v183);
  v182 = (char *)&v162 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v181 = type metadata accessor for Material(0);
  v180 = *(_QWORD *)(v181 - 8);
  __chkstk_darwin(v181);
  v178 = (char *)&v162 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v179 = sub_100003304(&qword_10010E028);
  __chkstk_darwin(v179);
  v208 = (uint64_t *)((char *)&v162 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v187 = sub_100003304(&qword_10010E030);
  __chkstk_darwin(v187);
  v186 = (char *)&v162 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v192 = sub_100003304(&qword_10010E038);
  __chkstk_darwin(v192);
  v189 = (uint64_t)&v162 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AccessPointContainer(0);
  __chkstk_darwin(v12);
  v175 = (uint64_t)&v162 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v176 = type metadata accessor for CollapsibleContentFrame(0);
  __chkstk_darwin(v176);
  v15 = (_QWORD *)((char *)&v162 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v177 = sub_100003304(&qword_10010E040);
  __chkstk_darwin(v177);
  v17 = (char *)&v162 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v185 = sub_100003304(&qword_10010E048);
  __chkstk_darwin(v185);
  v184 = (char *)&v162 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v190 = sub_100003304(&qword_10010E050);
  __chkstk_darwin(v190);
  v188 = (uint64_t)&v162 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v195 = sub_100003304(&qword_10010E058);
  __chkstk_darwin(v195);
  v194 = (uint64_t)&v162 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v197 = sub_100003304(&qword_10010E060);
  __chkstk_darwin(v197);
  v196 = (uint64_t)&v162 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v199 = sub_100003304(&qword_10010E068);
  __chkstk_darwin(v199);
  v198 = (uint64_t)&v162 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v201 = sub_100003304(&qword_10010E070);
  __chkstk_darwin(v201);
  v200 = (uint64_t)&v162 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = (uint64_t *)(v1 + *(int *)(v2 + 28));
  v26 = v24[1];
  v217 = *v24;
  v25 = v217;
  *(_QWORD *)&v218 = v26;
  v27 = sub_100003304(&qword_10010DE20);
  State.projectedValue.getter(&v219);
  v28 = v219;
  v30 = v220;
  v29 = v221;
  v219 = v25;
  v220 = v26;
  State.wrappedValue.getter(&v217);
  v31 = v217;
  KeyPath = swift_getKeyPath(&unk_1000C9910);
  v219 = v31;
  v211 = sub_1000035B4(&qword_10010DE28, type metadata accessor for AccessPointModel, (uint64_t)&unk_1000C97DC);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v219, KeyPath, v211);
  swift_release(KeyPath);
  v33 = *(_QWORD **)(v31 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__highlightIndex);
  swift_release(v31);
  v34 = type metadata accessor for AccessPointHighlightComponent.GestureHandler(0);
  v35 = swift_allocObject(v34, *(unsigned int *)(v34 + 48), *(unsigned __int16 *)(v34 + 52));
  *(_BYTE *)(v35 + 16) = 0;
  ObservationRegistrar.init()(v35);
  sub_1000497D4(v28, v30, v29, v33, 0, (_QWORD *)v35, (uint64_t)&v219);
  v164 = v219;
  LOBYTE(v29) = v220;
  v166 = v221;
  v169 = v223;
  v168 = v224;
  v167 = v225;
  v171 = v226;
  v173 = v227;
  v172 = Namespace.wrappedValue.getter(*v210);
  v170 = static MatchedGeometryProperties.frame.getter();
  v36 = static UnitPoint.center.getter();
  v38 = v37;
  v228 = v29;
  v39 = sub_10003F078();
  v165 = static Edge.Set.all.getter(v40);
  v41 = EdgeInsets.init(_all:)(v39);
  v43 = v42;
  v45 = v44;
  v47 = v46;
  v163 = v228;
  v229 = 0;
  v49 = v24[1];
  v215 = *v24;
  v48 = v215;
  v216 = v49;
  v209 = v27;
  State.projectedValue.getter(&v217);
  v50 = v217;
  v162 = v218;
  v217 = v48;
  *(_QWORD *)&v218 = v49;
  State.wrappedValue.getter(&v215);
  v51 = v215;
  v52 = swift_getKeyPath(&unk_1000C9938);
  v217 = v51;
  v53 = v211;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v217, v52, v211);
  swift_release(v52);
  v54 = v51 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container;
  swift_beginAccess(v51 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container, &v217, 0, 0);
  v55 = v175;
  sub_100007878(v54, v175, type metadata accessor for AccessPointContainer);
  v56 = swift_getKeyPath(&unk_1000C9910);
  v215 = v51;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v215, v56, v53);
  swift_release(v56);
  v57 = v55;
  LOBYTE(v33) = AccessPointContainer.isCollapsibleItem(at:)(*(_QWORD *)(v51
                                                                      + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__highlightIndex));
  sub_1000106F0(v55, type metadata accessor for AccessPointContainer);
  swift_release(v51);
  *v15 = swift_getKeyPath(&unk_1000C9AD0);
  v58 = sub_100003304(&qword_10010D3A8);
  swift_storeEnumTagMultiPayload(v15, v58, 0);
  v59 = v176;
  v60 = (char *)v15 + *(int *)(v176 + 20);
  *(_QWORD *)v60 = v50;
  *(_OWORD *)(v60 + 8) = v162;
  v61 = (char *)v15 + *(int *)(v59 + 24);
  LOBYTE(v212) = v33 & 1;
  State.init(wrappedValue:)(&v212, &type metadata for Bool);
  v62 = v216;
  *v61 = v215;
  *((_QWORD *)v61 + 1) = v62;
  sub_100007878((uint64_t)v15, (uint64_t)&v17[*(int *)(v177 + 36)], type metadata accessor for CollapsibleContentFrame);
  *(_QWORD *)v17 = v164;
  v17[8] = v163;
  *(_DWORD *)(v17 + 9) = *(_DWORD *)v233;
  *((_DWORD *)v17 + 3) = *(_DWORD *)&v233[3];
  *((_QWORD *)v17 + 2) = v166;
  *(_OWORD *)(v17 + 24) = v222;
  v63 = v168;
  *((_QWORD *)v17 + 5) = v169;
  *((_QWORD *)v17 + 6) = v63;
  v17[56] = v167;
  *(_DWORD *)(v17 + 57) = *(_DWORD *)v232;
  *((_DWORD *)v17 + 15) = *(_DWORD *)&v232[3];
  *((_OWORD *)v17 + 4) = v171;
  *((_QWORD *)v17 + 10) = v173;
  *((_QWORD *)v17 + 11) = 0x3FF0000000000000;
  *((_QWORD *)v17 + 12) = 0x7974696361706FLL;
  *((_QWORD *)v17 + 13) = 0xE700000000000000;
  *((_QWORD *)v17 + 14) = v172;
  *((_DWORD *)v17 + 30) = v170;
  *((double *)v17 + 16) = v36;
  *((_QWORD *)v17 + 17) = v38;
  v17[144] = 1;
  *((_DWORD *)v17 + 37) = *(_DWORD *)&v231[3];
  *(_DWORD *)(v17 + 145) = *(_DWORD *)v231;
  v17[152] = v165;
  *((_DWORD *)v17 + 39) = *(_DWORD *)&v230[3];
  *(_DWORD *)(v17 + 153) = *(_DWORD *)v230;
  *((double *)v17 + 20) = v41;
  *((_QWORD *)v17 + 21) = v43;
  *((_QWORD *)v17 + 22) = v45;
  *((_QWORD *)v17 + 23) = v47;
  v17[192] = v229;
  v64 = sub_1000106F0((uint64_t)v15, type metadata accessor for CollapsibleContentFrame);
  v65 = static Color.clear.getter(v64);
  v66 = v178;
  v67 = static Material.regular.getter(v65);
  LOBYTE(v15) = static Edge.Set.all.getter(v67);
  v68 = v180;
  v69 = (uint64_t)v182;
  v70 = v181;
  (*(void (**)(char *, char *, uint64_t))(v180 + 16))(v182, v66, v181);
  *(_BYTE *)(v69 + *(int *)(v183 + 36)) = (_BYTE)v15;
  v71 = v208;
  sub_100010CBC(v69, (uint64_t)v208 + *(int *)(v179 + 36), &qword_10010CAB0);
  *v71 = v65;
  swift_retain(v65);
  sub_100010ED0(v69, &qword_10010CAB0);
  (*(void (**)(char *, uint64_t))(v68 + 8))(v66, v70);
  swift_release(v65);
  v72 = v24[1];
  v215 = *v24;
  v216 = v72;
  State.wrappedValue.getter(&v212);
  v73 = v212;
  v74 = swift_getKeyPath(&unk_1000C9938);
  v215 = v73;
  v75 = v211;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v215, v74, v211);
  swift_release(v74);
  v76 = v73 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container;
  swift_beginAccess(v73 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container, &v215, 0, 0);
  sub_100007878(v76, v57, type metadata accessor for AccessPointContainer);
  swift_release(v73);
  v174 = v24;
  v77 = v24[1];
  v212 = *v24;
  v213 = v77;
  State.wrappedValue.getter(&v214);
  v78 = v214;
  v79 = swift_getKeyPath(&unk_1000C9910);
  v212 = v78;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v212, v79, v75);
  swift_release(v79);
  v80 = *(_QWORD *)(v78 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__highlightIndex);
  swift_release(v78);
  AccessPointContainer.cornerRadii(for:)(v80);
  v82 = v81;
  v84 = v83;
  v86 = v85;
  v88 = v87;
  sub_1000106F0(v57, type metadata accessor for AccessPointContainer);
  v89 = v191;
  v90 = &v191[*(int *)(v193 + 20)];
  v91 = enum case for RoundedCornerStyle.continuous(_:);
  LODWORD(v193) = enum case for RoundedCornerStyle.continuous(_:);
  v92 = type metadata accessor for RoundedCornerStyle(0);
  v93 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v92 - 8) + 104);
  v93(v90, v91, v92);
  *v89 = v82;
  v89[1] = v84;
  v89[2] = v86;
  v89[3] = v88;
  v94 = (uint64_t)v186;
  v95 = (uint64_t)&v186[*(int *)(v187 + 36)];
  sub_100007878((uint64_t)v89, v95, (uint64_t (*)(_QWORD))&type metadata accessor for UnevenRoundedRectangle);
  v96 = (_BYTE *)(v95 + *(int *)(sub_100003304(&qword_10010E078) + 36));
  *v96 = 0;
  v96[1] = 1;
  v97 = (uint64_t)v208;
  sub_100010CBC((uint64_t)v208, v94, &qword_10010E028);
  sub_1000106F0((uint64_t)v89, (uint64_t (*)(_QWORD))&type metadata accessor for UnevenRoundedRectangle);
  sub_100010ED0(v97, &qword_10010E028);
  v98 = v210;
  v99 = Namespace.wrappedValue.getter(*v210);
  LODWORD(v79) = static MatchedGeometryProperties.frame.getter();
  v100 = static UnitPoint.center.getter();
  v102 = v101;
  v103 = v189;
  sub_100010CBC(v94, v189, &qword_10010E030);
  v104 = v103 + *(int *)(v192 + 36);
  *(_QWORD *)v104 = 0x756F72676B636162;
  *(_QWORD *)(v104 + 8) = 0xEA0000000000646ELL;
  *(_QWORD *)(v104 + 16) = v99;
  *(_DWORD *)(v104 + 24) = v79;
  *(double *)(v104 + 32) = v100;
  *(_QWORD *)(v104 + 40) = v102;
  *(_BYTE *)(v104 + 48) = 1;
  v105 = sub_100010ED0(v94, &qword_10010E030);
  v106 = static Alignment.center.getter(v105);
  v108 = v107;
  v109 = (uint64_t)v184;
  v110 = (uint64_t)&v184[*(int *)(v185 + 36)];
  sub_100010CBC(v103, v110, &qword_10010E038);
  v111 = (uint64_t *)(v110 + *(int *)(sub_100003304(&qword_10010E080) + 36));
  *v111 = v106;
  v111[1] = v108;
  sub_100010CBC((uint64_t)v17, v109, &qword_10010E040);
  sub_100010ED0(v103, &qword_10010E038);
  sub_100010ED0((uint64_t)v17, &qword_10010E040);
  v112 = (uint64_t)v202;
  v113 = ((uint64_t (*)(char *, _QWORD, uint64_t))v93)(v202, v193, v92);
  v114 = static Color.accentColor.getter(v113);
  v115 = v203;
  *(_QWORD *)(v112 + *(int *)(v203 + 52)) = v114;
  *(_QWORD *)(v112 + *(int *)(v115 + 56)) = 0x4010000000000000;
  v116 = v112;
  v117 = v188;
  sub_100010CBC(v112, v188, &qword_10010E020);
  v118 = v190;
  v119 = sub_100010CBC(v109, v117 + *(int *)(v190 + 36), &qword_10010E048);
  v120 = v118;
  v121 = v117 + *(int *)(v118 + 40);
  *(_BYTE *)v121 = FocusState.init<>()(v119) & 1;
  *(_QWORD *)(v121 + 8) = v122;
  *(_BYTE *)(v121 + 16) = v123 & 1;
  v124 = v117 + *(int *)(v120 + 44);
  *(_QWORD *)v124 = swift_getKeyPath(&unk_1000C9B00);
  *(_BYTE *)(v124 + 8) = 0;
  sub_100010ED0(v116, &qword_10010E020);
  sub_100010ED0(v109, &qword_10010E048);
  v125 = (uint64_t)v98;
  v126 = sub_10003F230();
  v127 = static UnitPoint.center.getter();
  v129 = v128;
  v130 = v194;
  sub_100010CBC(v117, v194, &qword_10010E050);
  v131 = (double *)(v130 + *(int *)(v195 + 36));
  *v131 = v126;
  v131[1] = v126;
  v131[2] = v127;
  *((_QWORD *)v131 + 3) = v129;
  sub_100010ED0(v117, &qword_10010E050);
  v132 = v174;
  v133 = v174[1];
  v212 = *v174;
  v213 = v133;
  State.wrappedValue.getter(&v214);
  v134 = v214;
  v135 = swift_getKeyPath(&unk_1000C9870);
  v212 = v134;
  v136 = v211;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v212, v135, v211);
  swift_release(v135);
  LODWORD(v93) = *(unsigned __int8 *)(v134 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__state);
  swift_release(v134);
  if ((_DWORD)v93 == 3)
    v137 = -200.0;
  else
    v137 = 0.0;
  v138 = v196;
  sub_100010CBC(v130, v196, &qword_10010E058);
  v139 = v138 + *(int *)(v197 + 36);
  *(_QWORD *)v139 = 0;
  *(double *)(v139 + 8) = v137;
  sub_100010ED0(v130, &qword_10010E058);
  v140 = v132[1];
  v212 = *v132;
  v213 = v140;
  State.wrappedValue.getter(&v214);
  v141 = v214;
  v142 = swift_getKeyPath(&unk_1000C9A28);
  v212 = v141;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v212, v142, v136);
  swift_release(v142);
  v143 = *(unsigned __int8 *)(v141 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__reveal);
  swift_release(v141);
  if (v143)
    v144 = 1.0;
  else
    v144 = 0.5;
  v145 = v198;
  sub_100010CBC(v138, v198, &qword_10010E060);
  *(double *)(v145 + *(int *)(v199 + 36)) = v144;
  sub_100010ED0(v138, &qword_10010E060);
  v146 = v204;
  sub_100007878(v125, v204, type metadata accessor for AccessPointAnimationView);
  v147 = *(unsigned __int8 *)(v205 + 80);
  v148 = (v147 + 16) & ~v147;
  v149 = v148 + v206;
  v150 = v147 | 7;
  v151 = swift_allocObject(&unk_1000FE390, v148 + v206, v147 | 7);
  sub_100010F0C(v146, v151 + v148, type metadata accessor for AccessPointAnimationView);
  v152 = v200;
  sub_100010CBC(v145, v200, &qword_10010E068);
  v153 = v201;
  v154 = (uint64_t (**)())(v152 + *(int *)(v201 + 36));
  *v154 = sub_100049AA0;
  v154[1] = (uint64_t (*)())v151;
  v154[2] = 0;
  v154[3] = 0;
  sub_100010ED0(v145, &qword_10010E068);
  v155 = v132[1];
  v212 = *v132;
  v213 = v155;
  State.wrappedValue.getter(&v214);
  v156 = v214;
  v157 = swift_getKeyPath(&unk_1000C9910);
  v212 = v156;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v212, v157, v211);
  swift_release(v157);
  v158 = *(_QWORD *)(v156 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__highlightIndex);
  swift_release(v156);
  v212 = v158;
  sub_100007878((uint64_t)v210, v146, type metadata accessor for AccessPointAnimationView);
  v159 = swift_allocObject(&unk_1000FE3B8, v149, v150);
  sub_100010F0C(v146, v159 + v148, type metadata accessor for AccessPointAnimationView);
  v160 = sub_100034764(&qword_10010E088, &qword_10010E070, (void (*)(void))sub_100049ABC);
  View.onChange<A>(of:initial:_:)(&v212, 0, sub_100049AB0, v159, v153, &type metadata for Int, v160, &protocol witness table for Int);
  swift_release(v159);
  return sub_100010ED0(v152, &qword_10010E070);
}

double sub_10003F078()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  double v10;
  void (*v11)(char *, uint64_t);
  uint64_t v12;
  double v13;
  uint64_t v15;

  v0 = type metadata accessor for DynamicTypeSize(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v6 = (char *)&v15 - v5;
  __chkstk_darwin(v7);
  v9 = (char *)&v15 - v8;
  type metadata accessor for AccessPointAnimationView(0);
  sub_100030ED8(v9);
  v10 = sub_100080324((uint64_t)v9);
  v11 = *(void (**)(char *, uint64_t))(v1 + 8);
  v11(v9, v0);
  sub_100030ED8(v6);
  (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v3, v6, v0);
  v12 = (*(uint64_t (**)(char *, uint64_t))(v1 + 88))(v3, v0);
  if ((_DWORD)v12 == enum case for DynamicTypeSize.xLarge(_:))
  {
    v13 = 43.0;
  }
  else if ((_DWORD)v12 == enum case for DynamicTypeSize.xxLarge(_:))
  {
    v13 = 45.0;
  }
  else if ((_DWORD)v12 == enum case for DynamicTypeSize.xxxLarge(_:))
  {
    v13 = 48.0;
  }
  else
  {
    if ((DynamicTypeSize.isAccessibilitySize.getter(v12) & 1) != 0)
      v13 = 50.0;
    else
      v13 = 42.0;
    v11(v3, v0);
  }
  v11(v6, v0);
  return (v10 - v13) * 0.5;
}

double sub_10003F230()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  int v6;
  double result;
  char *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = v0;
  v2 = type metadata accessor for AccessPointAnimationView(0);
  v12 = *(_QWORD *)(v0 + *(int *)(v2 + 28) + 8);
  sub_100003304(&qword_10010DE20);
  State.wrappedValue.getter(&v13);
  v3 = v13;
  KeyPath = swift_getKeyPath(&unk_1000C9A28);
  v11 = v3;
  v5 = sub_1000035B4(&qword_10010DE28, type metadata accessor for AccessPointModel, (uint64_t)&unk_1000C97DC);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v11, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__reveal);
  swift_release(v3);
  result = 0.0;
  if (v6 == 1)
  {
    v8 = (char *)(v1 + *(int *)(v2 + 32));
    v9 = *v8;
    v10 = *((_QWORD *)v8 + 1);
    LOBYTE(v11) = v9;
    v12 = v10;
    sub_100003304(&qword_10010CDA0);
    State.wrappedValue.getter(&v13);
    result = 0.98;
    if (!(_BYTE)v13)
      return 1.0;
  }
  return result;
}

double sub_10003F358(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double result;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  _BYTE v28[16];
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v2 = (uint64_t *)(a1 + *(int *)(type metadata accessor for AccessPointAnimationView(0) + 28));
  v4 = v2[1];
  v34 = *v2;
  v3 = v34;
  v35 = v4;
  v31 = sub_100003304(&qword_10010DE20);
  State.wrappedValue.getter(&v36);
  v5 = v36;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  v8 = swift_retain(v6);
  v9 = sub_100030D7C(v8, v7);
  swift_release(v6);
  KeyPath = swift_getKeyPath(&unk_1000C98C0);
  v34 = v9;
  v11 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v34, KeyPath, v11);
  swift_release(KeyPath);
  v12 = *(unsigned __int8 *)(v9 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__active);
  v32 = v4;
  v33 = v3;
  if (v12 == 1)
  {
    v13 = swift_getKeyPath(&unk_1000C98E8);
    v34 = v9;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v34, v13, v11);
    swift_release(v13);
    v14 = *(_QWORD *)(v9 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__hideCount);
    swift_release(v9);
    v15 = v14 > 0;
  }
  else
  {
    swift_release(v9);
    v15 = 1;
  }
  v16 = swift_getKeyPath(&unk_1000C99B0);
  __chkstk_darwin(v16);
  v29 = v5;
  v30 = v15;
  v34 = v5;
  v17 = sub_1000035B4(&qword_10010DE28, type metadata accessor for AccessPointModel, (uint64_t)&unk_1000C97DC);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v34, v16, sub_10004B12C, v28, (char *)&type metadata for () + 8, v17);
  swift_release(v5);
  swift_release(v16);
  v18 = swift_retain(v6);
  v19 = sub_100030D7C(v18, v7);
  swift_release(v6);
  v20 = swift_getKeyPath(&unk_1000C98C0);
  v34 = v19;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v34, v20, v11);
  swift_release(v20);
  if (*(_BYTE *)(v19 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__active) == 1)
  {
    v21 = swift_getKeyPath(&unk_1000C98E8);
    v34 = v19;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v34, v21, v11);
    swift_release(v21);
    v22 = *(_QWORD *)(v19 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__hideCount);
    *(_QWORD *)&result = swift_release(v19).n128_u64[0];
    if (v22 <= 0)
    {
      v34 = v33;
      v35 = v32;
      State.wrappedValue.getter(&v36);
      v24 = v36;
      v25 = swift_getKeyPath(&unk_1000C9870);
      v34 = v24;
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v34, v25, v17);
      swift_release(v25);
      v26 = *(unsigned __int8 *)(v24 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__state);
      *(_QWORD *)&result = swift_release(v24).n128_u64[0];
      if (!v26)
      {
        if (qword_10010BAB0 != -1)
          swift_once(&qword_10010BAB0, sub_100039614);
        __chkstk_darwin(qword_10010D8D0);
        v29 = a1;
        withAnimation<A>(_:_:)(v27, sub_100049BC8, v28, (char *)&type metadata for () + 8);
      }
    }
  }
  else
  {
    *(_QWORD *)&result = swift_release(v19).n128_u64[0];
  }
  return result;
}

double sub_10003F700(uint64_t a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  double result;
  _QWORD v5[3];
  char v6;
  _QWORD v7[2];
  uint64_t v8;

  v7[1] = *(_QWORD *)(a1 + *(int *)(type metadata accessor for AccessPointAnimationView(0) + 28) + 8);
  sub_100003304(&qword_10010DE20);
  State.wrappedValue.getter(&v8);
  v1 = v8;
  KeyPath = swift_getKeyPath(&unk_1000C9A28);
  v5[2] = v1;
  v6 = 1;
  v7[0] = v1;
  v3 = sub_1000035B4(&qword_10010DE28, type metadata accessor for AccessPointModel, (uint64_t)&unk_1000C97DC);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v7, KeyPath, sub_10004B140, v5, (char *)&type metadata for () + 8, v3);
  swift_release(v1);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_10003F7F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  _QWORD v18[2];

  v2 = type metadata accessor for AnimationCompletionCriteria(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AccessPointAnimationView(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v10 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10010BAD8 != -1)
    v9 = swift_once(&qword_10010BAD8, sub_100039708);
  v18[0] = v18;
  v11 = qword_10010D8F8;
  __chkstk_darwin(v9);
  v18[-2] = a1;
  sub_100007878(a1, (uint64_t)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AccessPointAnimationView);
  v12 = *(unsigned __int8 *)(v7 + 80);
  v13 = (v12 + 16) & ~v12;
  v14 = swift_allocObject(&unk_1000FE3E0, v13 + v8, v12 | 7);
  v15 = sub_100010F0C((uint64_t)v10, v14 + v13, type metadata accessor for AccessPointAnimationView);
  static AnimationCompletionCriteria.logicallyComplete.getter(v15);
  withAnimation<A>(_:completionCriteria:_:completion:)(v11, v5, sub_100049B88, &v18[-4], sub_100049BA4, v14, (char *)&type metadata for () + 8);
  v16 = swift_release(v14);
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v3 + 8))(v5, v2, v16);
}

uint64_t sub_10003F9A0(uint64_t a1)
{
  char *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[9];
  uint64_t v7;

  v1 = (char *)(a1 + *(int *)(type metadata accessor for AccessPointAnimationView(0) + 32));
  v2 = *v1;
  v3 = *((_QWORD *)v1 + 1);
  v6[1] = v2;
  v7 = v3;
  v6[0] = 1;
  v4 = sub_100003304(&qword_10010CDA0);
  return State.wrappedValue.setter(v6, v4);
}

double sub_10003FA10(uint64_t a1, __n128 a2, __n128 a3)
{
  uint64_t v4;
  double result;
  _QWORD v6[4];

  a2.n128_u64[0] = 0x3FD3333333333333;
  a3.n128_u64[0] = 0x3FE6666666666666;
  v4 = static Animation.spring(response:dampingFraction:blendDuration:)(a2, a3, 0.0);
  v6[2] = a1;
  withAnimation<A>(_:_:)(v4, sub_100049BB0, v6, (char *)&type metadata for () + 8);
  *(_QWORD *)&result = swift_release(v4).n128_u64[0];
  return result;
}

uint64_t sub_10003FA8C(uint64_t a1)
{
  char *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[9];
  uint64_t v7;

  v1 = (char *)(a1 + *(int *)(type metadata accessor for AccessPointAnimationView(0) + 32));
  v2 = *v1;
  v3 = *((_QWORD *)v1 + 1);
  v6[1] = v2;
  v7 = v3;
  v6[0] = 0;
  v4 = sub_100003304(&qword_10010CDA0);
  return State.wrappedValue.setter(v6, v4);
}

uint64_t sub_10003FAF8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t KeyPath;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD v95[3];
  uint64_t v96;
  _QWORD v97[4];

  v93 = a2;
  v94 = sub_100003304(&qword_10010DFA8);
  __chkstk_darwin(v94);
  v76 = (uint64_t *)((char *)&v75 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v81 = sub_100003304(&qword_10010DFB0);
  __chkstk_darwin(v81);
  v75 = (uint64_t)&v75 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = sub_100003304(&qword_10010DFB8);
  __chkstk_darwin(v90);
  v92 = (uint64_t)&v75 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_100003304(&qword_10010DFC0);
  __chkstk_darwin(v78);
  v80 = (uint64_t)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = sub_100003304(&qword_10010DFC8);
  __chkstk_darwin(v79);
  v77 = (uint64_t *)((char *)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v91 = sub_100003304(&qword_10010DFD0);
  __chkstk_darwin(v91);
  v82 = (char *)&v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003304(&qword_10010DFD8);
  v85 = *(_QWORD *)(v9 - 8);
  v86 = v9;
  __chkstk_darwin(v9);
  v84 = (uint64_t)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = sub_100003304(&qword_10010DFE0);
  __chkstk_darwin(v83);
  v88 = (char *)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v89 = (uint64_t)&v75 - v13;
  v14 = type metadata accessor for AccessPointAnchoring(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(int *)(type metadata accessor for AccessPointAnimationView(0) + 28);
  v87 = a1;
  v19 = (_QWORD *)((char *)a1 + v18);
  v20 = *(_QWORD *)((char *)a1 + v18 + 8);
  v97[0] = *(_QWORD *)((char *)a1 + v18);
  v97[1] = v20;
  sub_100003304(&qword_10010DE20);
  State.wrappedValue.getter(v95);
  v21 = v95[0];
  KeyPath = swift_getKeyPath(&unk_1000C9988);
  v97[0] = v21;
  v23 = sub_1000035B4(&qword_10010DE28, type metadata accessor for AccessPointModel, (uint64_t)&unk_1000C97DC);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v97, KeyPath, v23);
  swift_release(KeyPath);
  v24 = v21 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__anchor;
  swift_beginAccess(v21 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__anchor, v97, 0, 0);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v25(v17, v24, v14);
  swift_release(v21);
  LOBYTE(v24) = AccessPointAnchoring.centered.getter(v26);
  v27 = *(void (**)(char *, uint64_t))(v15 + 8);
  v27(v17, v14);
  if ((v24 & 1) != 0)
  {
    v28 = v84;
    v29 = v87;
    sub_10003DD60(v84);
    v30 = Namespace.wrappedValue.getter(*v29);
    LODWORD(v29) = static MatchedGeometryProperties.frame.getter();
    v31 = static UnitPoint.center.getter();
    v33 = v32;
    v35 = v85;
    v34 = v86;
    v36 = (uint64_t)v88;
    (*(void (**)(char *, uint64_t, uint64_t))(v85 + 16))(v88, v28, v86);
    v37 = v36 + *(int *)(v83 + 36);
    *(_QWORD *)v37 = 1936683112;
    *(_QWORD *)(v37 + 8) = 0xE400000000000000;
    *(_QWORD *)(v37 + 16) = v30;
    *(_DWORD *)(v37 + 24) = (_DWORD)v29;
    *(double *)(v37 + 32) = v31;
    *(_QWORD *)(v37 + 40) = v33;
    *(_BYTE *)(v37 + 48) = 1;
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v28, v34);
    v38 = v89;
    sub_10001A0AC(v36, v89, &qword_10010DFE0);
    sub_100010CBC(v38, v36, &qword_10010DFE0);
    v39 = (uint64_t)v77;
    *v77 = 0;
    *(_BYTE *)(v39 + 8) = 0;
    v40 = sub_100003304(&qword_10010E018);
    sub_100010CBC(v36, v39 + *(int *)(v40 + 48), &qword_10010DFE0);
    v41 = v39 + *(int *)(v40 + 64);
    *(_QWORD *)v41 = 0;
    *(_BYTE *)(v41 + 8) = 0;
    sub_100010ED0(v36, &qword_10010DFE0);
    v42 = &qword_10010DFC8;
    v43 = v80;
    sub_100010CBC(v39, v80, &qword_10010DFC8);
    swift_storeEnumTagMultiPayload(v43, v78, 0);
    v44 = sub_100011054(&qword_10010DFF8, &qword_10010DFC8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  }
  else
  {
    v45 = v19[1];
    v95[0] = *v19;
    v95[1] = v45;
    State.wrappedValue.getter(&v96);
    v46 = v96;
    v47 = swift_getKeyPath(&unk_1000C9988);
    v95[0] = v46;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v95, v47, v23);
    swift_release(v47);
    v48 = v46 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__anchor;
    swift_beginAccess(v46 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__anchor, v95, 0, 0);
    v25(v17, v48, v14);
    swift_release(v46);
    v50 = AccessPointAnchoring.leading.getter(v49);
    v27(v17, v14);
    v51 = v84;
    v52 = v87;
    sub_10003DD60(v84);
    v53 = Namespace.wrappedValue.getter(*v52);
    LODWORD(v52) = static MatchedGeometryProperties.frame.getter();
    v54 = static UnitPoint.center.getter();
    v56 = v55;
    v58 = v85;
    v57 = v86;
    v59 = (uint64_t)v88;
    (*(void (**)(char *, uint64_t, uint64_t))(v85 + 16))(v88, v51, v86);
    v60 = v59 + *(int *)(v83 + 36);
    *(_QWORD *)v60 = 1936683112;
    *(_QWORD *)(v60 + 8) = 0xE400000000000000;
    *(_QWORD *)(v60 + 16) = v53;
    *(_DWORD *)(v60 + 24) = (_DWORD)v52;
    *(double *)(v60 + 32) = v54;
    *(_QWORD *)(v60 + 40) = v56;
    *(_BYTE *)(v60 + 48) = 1;
    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v51, v57);
    v38 = v89;
    sub_10001A0AC(v59, v89, &qword_10010DFE0);
    sub_100010CBC(v38, v59, &qword_10010DFE0);
    if ((v50 & 1) == 0)
    {
      v69 = (uint64_t)v76;
      *v76 = 0;
      *(_BYTE *)(v69 + 8) = 0;
      v70 = sub_100003304(&qword_10010DFE8);
      sub_100010CBC(v59, v69 + *(int *)(v70 + 48), &qword_10010DFE0);
      sub_100010ED0(v59, &qword_10010DFE0);
      v64 = &qword_10010DFA8;
      v71 = v92;
      sub_100010CBC(v69, v92, &qword_10010DFA8);
      swift_storeEnumTagMultiPayload(v71, v90, 1);
      v72 = sub_1000499B8();
      v73 = sub_100011054(&qword_10010E008, &qword_10010DFA8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
      _ConditionalContent<>.init(storage:)(v71, v91, v94, v72, v73);
      v68 = v69;
      goto LABEL_7;
    }
    v39 = v75;
    sub_100010CBC(v59, v75, &qword_10010DFE0);
    v61 = v39 + *(int *)(sub_100003304(&qword_10010E010) + 48);
    *(_QWORD *)v61 = 0;
    *(_BYTE *)(v61 + 8) = 0;
    sub_100010ED0(v59, &qword_10010DFE0);
    v42 = &qword_10010DFB0;
    v43 = v80;
    sub_100010CBC(v39, v80, &qword_10010DFB0);
    swift_storeEnumTagMultiPayload(v43, v78, 1);
    v44 = sub_100011054(&qword_10010DFF8, &qword_10010DFC8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  }
  v62 = sub_100011054(&qword_10010E000, &qword_10010DFB0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v63 = (uint64_t)v82;
  _ConditionalContent<>.init(storage:)(v43, v79, v81, v44, v62);
  sub_100010ED0(v39, v42);
  v64 = &qword_10010DFD0;
  v65 = v92;
  sub_100010CBC(v63, v92, &qword_10010DFD0);
  swift_storeEnumTagMultiPayload(v65, v90, 0);
  v66 = sub_1000499B8();
  v67 = sub_100011054(&qword_10010E008, &qword_10010DFA8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  _ConditionalContent<>.init(storage:)(v65, v91, v94, v66, v67);
  v68 = v63;
LABEL_7:
  sub_100010ED0(v68, v64);
  return sub_100010ED0(v38, &qword_10010DFE0);
}

uint64_t sub_10004038C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  ValueMetadata *v22;
  double v23;
  uint64_t KeyPath;
  uint64_t v25;
  char *v26;
  ValueMetadata *v27;
  ValueMetadata *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t OpaqueTypeConformance2;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  void (*v61)(char *, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  void (*v66)(uint64_t, char *, uint64_t);
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  __n128 v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  ValueMetadata *v78;
  ValueMetadata *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  ValueMetadata *v89;
  ValueMetadata *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  ValueMetadata *v95;
  char *v96;
  __n128 v97;
  ValueMetadata *v98;
  double v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  uint64_t v107;
  __n128 v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  char *v117;
  void (*v118)(uint64_t, char *, uint64_t);
  uint64_t v119;
  uint64_t v120;
  void (*v121)(char *, uint64_t, uint64_t);
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  double *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD v152[4];
  double v153;
  ValueMetadata *v154;
  unint64_t v155;
  unint64_t v156;
  char v157[8];

  v151 = a2;
  v147 = a3;
  v131 = type metadata accessor for GlobalCoordinateSpace(0);
  v130 = *(_QWORD *)(v131 - 8);
  __chkstk_darwin(v131);
  v129 = (char *)&v114 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v150 = type metadata accessor for AccessPointAnchoring(0);
  v127 = *(_QWORD *)(v150 - 8);
  v5 = __chkstk_darwin(v150);
  v126 = (char *)&v114 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = type metadata accessor for GeometryProxy(0, v5);
  v7 = *(_QWORD *)(v149 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v149);
  v140 = (char *)&v114 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AccessPointAnimationView(0);
  v138 = *(_QWORD *)(v9 - 8);
  v10 = *(_QWORD *)(v138 + 64);
  __chkstk_darwin(v9);
  v11 = sub_100003304(&qword_10010DF00);
  __chkstk_darwin(v11);
  v13 = (char *)&v114 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(double *)&v148 = COERCE_DOUBLE(sub_100003304(&qword_10010DF08));
  __chkstk_darwin(v148);
  v139 = (uint64_t)&v114 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(double *)&v143 = COERCE_DOUBLE(sub_100003304(&qword_10010DF10));
  v128 = *(_QWORD *)(v143 - 8);
  __chkstk_darwin(v143);
  v141 = (char *)&v114 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(double *)&v145 = COERCE_DOUBLE(sub_100003304(&qword_10010DF18));
  v134 = *(_QWORD *)(v145 - 8);
  __chkstk_darwin(v145);
  v133 = (char *)&v114 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v146 = sub_100003304(&qword_10010DF20);
  v136 = *(_QWORD *)(v146 - 8);
  __chkstk_darwin(v146);
  v132 = (char *)&v114 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v135 = (char *)&v114 - v19;
  v142 = sub_100003304(&qword_10010DF28);
  __chkstk_darwin(v142);
  v144 = (char *)&v114 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = a1;
  v125 = (double *)(a1 + *(int *)(v9 + 28));
  v22 = (ValueMetadata *)*((_QWORD *)v125 + 1);
  v153 = *v125;
  v154 = v22;
  v124 = sub_100003304(&qword_10010DE20);
  State.wrappedValue.getter(v152);
  v23 = *(double *)v152;
  KeyPath = swift_getKeyPath(&unk_1000C99B0);
  v153 = v23;
  v123 = sub_1000035B4(&qword_10010DE28, type metadata accessor for AccessPointModel, (uint64_t)&unk_1000C97DC);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v153, KeyPath, v123);
  swift_release(KeyPath);
  LODWORD(v9) = *(unsigned __int8 *)(*(_QWORD *)&v23
                                   + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__accessPointHidden);
  swift_release(*(_QWORD *)&v23);
  if ((_DWORD)v9 == 1)
  {
    v26 = v144;
    swift_storeEnumTagMultiPayload(v144, v142, 0);
    type metadata accessor for CGRect(255);
    v28 = v27;
    v29 = sub_100049748();
    v30 = sub_1000035B4(&qword_10010CE20, (uint64_t (*)(uint64_t))&type metadata accessor for AccessPointAnchoring, (uint64_t)&protocol conformance descriptor for AccessPointAnchoring);
    v153 = *(double *)&v148;
    v154 = (ValueMetadata *)v150;
    v155 = v29;
    v156 = v30;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v153, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    v32 = sub_1000035B4(&qword_10010CF40, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
    v153 = *(double *)&v143;
    v154 = v28;
    v155 = OpaqueTypeConformance2;
    v156 = v32;
    v33 = swift_getOpaqueTypeConformance2(&v153, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    v34 = sub_10003C628();
    v153 = *(double *)&v145;
    v154 = &type metadata for AccessPointModel.AnimationState;
    v155 = v33;
    v156 = v34;
    v35 = swift_getOpaqueTypeConformance2(&v153, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    return _ConditionalContent<>.init(storage:)(v26, &type metadata for EmptyView, v146, &protocol witness table for EmptyView, v35);
  }
  else
  {
    *(_QWORD *)v13 = static HorizontalAlignment.center.getter(v25);
    *((_QWORD *)v13 + 1) = 0;
    v13[16] = 0;
    v37 = sub_100003304(&qword_10010DF30);
    sub_100040FEC((_QWORD *)v21, (uint64_t)&v13[*(int *)(v37 + 44)]);
    v38 = v8;
    v39 = (char *)&v114 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_100007878(v21, (uint64_t)v39, type metadata accessor for AccessPointAnimationView);
    v121 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v40 = v140;
    v41 = v149;
    v121(v140, v151, v149);
    v42 = *(unsigned __int8 *)(v138 + 80);
    v43 = *(unsigned __int8 *)(v7 + 80);
    v44 = v10 + v43 + ((v42 + 16) & ~v42);
    v45 = (v42 + 16) & ~v42;
    v138 = v45;
    v46 = v44 & ~v43;
    v120 = v46 + v38;
    v47 = v46;
    v137 = v46;
    v119 = v42 | v43 | 7;
    v48 = swift_allocObject(&unk_1000FE2C8, v46 + v38, v119);
    sub_100010F0C((uint64_t)v39, v48 + v45, type metadata accessor for AccessPointAnimationView);
    v118 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 32);
    v49 = v41;
    v118(v48 + v47, v40, v41);
    v50 = v139;
    sub_100010CBC((uint64_t)v13, v139, &qword_10010DF00);
    v51 = (_QWORD *)(v50 + *(int *)(v148 + 36));
    *v51 = sub_10004947C;
    v51[1] = v48;
    v51[2] = 0;
    v51[3] = 0;
    sub_100010ED0((uint64_t)v13, &qword_10010DF00);
    v52 = *(_QWORD *)(v21 + 8);
    LOBYTE(v47) = *(_BYTE *)(v21 + 16);
    v122 = v21;
    v53 = swift_retain(v52);
    *(double *)&v54 = COERCE_DOUBLE(sub_100030D7C(v53, v47));
    swift_release(v52);
    v55 = swift_getKeyPath(&unk_1000C9898);
    v153 = *(double *)&v54;
    v56 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v153, v55, v56);
    swift_release(v55);
    v57 = v54 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__anchoring;
    swift_beginAccess(v54 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__anchoring, v157, 0, 0);
    v58 = v127;
    v59 = v126;
    (*(void (**)(char *, uint64_t, uint64_t))(v127 + 16))(v126, v57, v150);
    swift_release(v54);
    v117 = v39;
    sub_100007878(v21, (uint64_t)v39, type metadata accessor for AccessPointAnimationView);
    v60 = v40;
    v61 = v121;
    v121(v40, v151, v49);
    v62 = v120;
    v63 = v119;
    v64 = swift_allocObject(&unk_1000FE2F0, v120, v119);
    sub_100010F0C((uint64_t)v39, v64 + v138, type metadata accessor for AccessPointAnimationView);
    v65 = v60;
    v66 = v118;
    v118(v64 + v137, v65, v49);
    v67 = sub_100049748();
    v115 = v67;
    v116 = sub_1000035B4(&qword_10010CE20, (uint64_t (*)(uint64_t))&type metadata accessor for AccessPointAnchoring, (uint64_t)&protocol conformance descriptor for AccessPointAnchoring);
    v68 = v148;
    v69 = v150;
    v70 = v67;
    v71 = v139;
    View.onChange<A>(of:initial:_:)(v59, 0, sub_10004947C, v64, v148, v150, v70, v116);
    v72 = swift_release(v64);
    (*(void (**)(char *, uint64_t, __n128))(v58 + 8))(v59, v69, v72);
    v73 = sub_100010ED0(v71, &qword_10010DF08);
    v74 = v129;
    static CoordinateSpaceProtocol<>.global.getter(v73);
    v75 = v131;
    v76 = v151;
    v77 = GeometryProxy.frame<A>(in:)(v74, v131, &protocol witness table for GlobalCoordinateSpace);
    v79 = v78;
    v81 = v80;
    v83 = v82;
    (*(void (**)(char *, uint64_t))(v130 + 8))(v74, v75);
    v153 = v77;
    v154 = v79;
    v155 = v81;
    v156 = v83;
    v84 = (uint64_t)v117;
    sub_100007878(v122, (uint64_t)v117, type metadata accessor for AccessPointAnimationView);
    v85 = v140;
    v86 = v76;
    v87 = v149;
    v61(v140, v86, v149);
    v88 = swift_allocObject(&unk_1000FE318, v62, v63);
    sub_100010F0C(v84, v88 + v138, type metadata accessor for AccessPointAnimationView);
    v66(v88 + v137, v85, v87);
    type metadata accessor for CGRect(0);
    v90 = v89;
    v152[0] = v68;
    v152[1] = v150;
    v152[2] = v115;
    v152[3] = v116;
    v91 = swift_getOpaqueTypeConformance2(v152, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    v92 = sub_1000035B4(&qword_10010CF40, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
    v93 = v133;
    v94 = v143;
    v95 = v90;
    v96 = v141;
    View.onChange<A>(of:initial:_:)(&v153, 0, sub_10004947C, v88, v143, v90, v91, v92);
    v97 = swift_release(v88);
    (*(void (**)(char *, uint64_t, __n128))(v128 + 8))(v96, v94, v97);
    v98 = (ValueMetadata *)*((_QWORD *)v125 + 1);
    v153 = *v125;
    v154 = v98;
    State.wrappedValue.getter(v152);
    v99 = *(double *)v152;
    v100 = swift_getKeyPath(&unk_1000C9870);
    v153 = v99;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v153, v100, v123);
    swift_release(v100);
    LOBYTE(v96) = *(_BYTE *)(*(_QWORD *)&v99 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__state);
    swift_release(*(_QWORD *)&v99);
    LOBYTE(v152[0]) = (_BYTE)v96;
    v101 = (uint64_t)v117;
    sub_100007878(v122, (uint64_t)v117, type metadata accessor for AccessPointAnimationView);
    v102 = v149;
    v121(v85, v151, v149);
    v103 = swift_allocObject(&unk_1000FE340, v120, v119);
    sub_100010F0C(v101, v103 + v138, type metadata accessor for AccessPointAnimationView);
    v118(v103 + v137, v85, v102);
    v153 = *(double *)&v94;
    v154 = v95;
    v155 = v91;
    v156 = v92;
    v104 = swift_getOpaqueTypeConformance2(&v153, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    v105 = sub_10003C628();
    v106 = v132;
    v107 = v145;
    View.onChange<A>(of:initial:_:)(v152, 0, sub_10004947C, v103, v145, &type metadata for AccessPointModel.AnimationState, v104, v105);
    v108 = swift_release(v103);
    (*(void (**)(char *, uint64_t, __n128))(v134 + 8))(v93, v107, v108);
    v109 = v136;
    v110 = v135;
    v111 = v146;
    (*(void (**)(char *, char *, uint64_t))(v136 + 32))(v135, v106, v146);
    v112 = v144;
    (*(void (**)(char *, char *, uint64_t))(v109 + 16))(v144, v110, v111);
    swift_storeEnumTagMultiPayload(v112, v142, 1);
    v153 = *(double *)&v107;
    v154 = &type metadata for AccessPointModel.AnimationState;
    v155 = v104;
    v156 = v105;
    v113 = swift_getOpaqueTypeConformance2(&v153, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    _ConditionalContent<>.init(storage:)(v112, &type metadata for EmptyView, v111, &protocol witness table for EmptyView, v113);
    return (*(uint64_t (**)(char *, uint64_t))(v109 + 8))(v110, v111);
  }
}

uint64_t sub_100040FEC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t KeyPath;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[3];
  uint64_t v52;

  v49 = a2;
  v50 = sub_100003304(&qword_10010DF58);
  __chkstk_darwin(v50);
  v44 = (uint64_t)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_100003304(&qword_10010DF60);
  __chkstk_darwin(v46);
  v48 = (uint64_t)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_100003304(&qword_10010DF68);
  __chkstk_darwin(v47);
  v43 = (_QWORD **)((char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_100003304(&qword_10010DF70);
  __chkstk_darwin(v6);
  v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_100003304(&qword_10010DF78);
  __chkstk_darwin(v45);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v43 - v12;
  v14 = type metadata accessor for AccessPointAnchoring(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (_QWORD *)((char *)a1 + *(int *)(type metadata accessor for AccessPointAnimationView(0) + 28));
  v20 = *v18;
  v19 = v18[1];
  v51[0] = v20;
  v51[1] = v19;
  sub_100003304(&qword_10010DE20);
  State.wrappedValue.getter(&v52);
  v21 = v52;
  KeyPath = swift_getKeyPath(&unk_1000C9988);
  v51[0] = v21;
  v23 = sub_1000035B4(&qword_10010DE28, type metadata accessor for AccessPointModel, (uint64_t)&unk_1000C97DC);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v51, KeyPath, v23);
  v24 = KeyPath;
  v25 = (uint64_t)v13;
  swift_release(v24);
  v26 = v21 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__anchor;
  swift_beginAccess(v21 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__anchor, v51, 0, 0);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v26, v14);
  swift_release(v21);
  LOBYTE(v26) = AccessPointAnchoring.bottom.getter(v27);
  v28 = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  *(_QWORD *)v8 = static VerticalAlignment.center.getter(v28);
  *((_QWORD *)v8 + 1) = 0;
  v8[16] = 1;
  v29 = sub_100003304(&qword_10010DF80);
  sub_10003FAF8(a1, (uint64_t)&v8[*(int *)(v29 + 44)]);
  v30 = Namespace.wrappedValue.getter(*a1);
  LODWORD(v21) = static MatchedGeometryProperties.frame.getter();
  v31 = static UnitPoint.center.getter();
  v33 = v32;
  sub_100010CBC((uint64_t)v8, (uint64_t)v10, &qword_10010DF70);
  v34 = &v10[*(int *)(v45 + 36)];
  *(_QWORD *)v34 = 1936683126;
  *((_QWORD *)v34 + 1) = 0xE400000000000000;
  *((_QWORD *)v34 + 2) = v30;
  *((_DWORD *)v34 + 6) = v21;
  *((double *)v34 + 4) = v31;
  *((_QWORD *)v34 + 5) = v33;
  v34[48] = 1;
  sub_100010ED0((uint64_t)v8, &qword_10010DF70);
  sub_10001A0AC((uint64_t)v10, (uint64_t)v13, &qword_10010DF78);
  sub_100010CBC((uint64_t)v13, (uint64_t)v10, &qword_10010DF78);
  if ((v26 & 1) != 0)
  {
    v35 = (uint64_t)v43;
    *v43 = 0;
    *(_BYTE *)(v35 + 8) = 1;
    v36 = sub_100003304(&qword_10010DFA0);
    sub_100010CBC((uint64_t)v10, v35 + *(int *)(v36 + 48), &qword_10010DF78);
    sub_100010ED0((uint64_t)v10, &qword_10010DF78);
    v37 = &qword_10010DF68;
    v38 = v48;
    sub_100010CBC(v35, v48, &qword_10010DF68);
    swift_storeEnumTagMultiPayload(v38, v46, 0);
  }
  else
  {
    v35 = v44;
    sub_100010CBC((uint64_t)v10, v44, &qword_10010DF78);
    v40 = v35 + *(int *)(sub_100003304(&qword_10010DF88) + 48);
    *(_QWORD *)v40 = 0;
    *(_BYTE *)(v40 + 8) = 1;
    sub_100010ED0((uint64_t)v10, &qword_10010DF78);
    v37 = &qword_10010DF58;
    v38 = v48;
    sub_100010CBC(v35, v48, &qword_10010DF58);
    swift_storeEnumTagMultiPayload(v38, v46, 1);
  }
  v39 = sub_100011054(&qword_10010DF90, &qword_10010DF68, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v41 = sub_100011054(&qword_10010DF98, &qword_10010DF58, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  _ConditionalContent<>.init(storage:)(v38, v47, v50, v39, v41);
  sub_100010ED0(v35, v37);
  return sub_100010ED0(v25, &qword_10010DF78);
}

void sub_1000414DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  uint64_t Strong;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  CGFloat v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  int v44;
  double MaxX;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  double v53;
  double v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  double v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  double v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD v79[2];
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD v88[4];
  CGRect v89;
  CGRect v90;
  CGRect v91;

  v79[1] = a1;
  v2 = sub_100003304(&qword_10010EB20);
  __chkstk_darwin(v2);
  v84 = (char *)v79 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for AccessPointAnchoring(0);
  v81 = *(_QWORD *)(v4 - 8);
  v82 = v4;
  __chkstk_darwin(v4);
  v80 = (char *)v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DynamicTypeSize(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (_QWORD *)((char *)v79 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for GlobalCoordinateSpace(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v1 + 8);
  v83 = v1;
  v15 = *(_BYTE *)(v1 + 16);
  v16 = swift_retain(v14);
  v17 = sub_100030D7C(v16, v15);
  swift_release(v14);
  KeyPath = swift_getKeyPath(&unk_1000C9A58);
  v88[0] = v17;
  v19 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v88, KeyPath, v19);
  swift_release(KeyPath);
  Strong = swift_unknownObjectWeakLoadStrong(v17 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__remoteTarget);
  swift_release(v17);
  if (!Strong)
    return;
  v79[0] = Strong;
  static CoordinateSpaceProtocol<>.global.getter(v21);
  v22 = GeometryProxy.frame<A>(in:)(v13, v10, &protocol witness table for GlobalCoordinateSpace);
  v24 = v23;
  v26 = v25;
  v28 = v27;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  if (qword_10010BB70 != -1)
    swift_once(&qword_10010BB70, sub_10007C04C);
  if (*(double *)&qword_1001233B0 >= v26)
    *(double *)&v29 = v26;
  else
    v29 = qword_1001233B0;
  v30 = type metadata accessor for AccessPointAnimationView(0);
  v31 = v83;
  sub_100030ED8(v9);
  v32 = sub_100080324((uint64_t)v9);
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
  v33 = *(_QWORD *)(v31 + 8);
  v34 = *(_BYTE *)(v31 + 16);
  v35 = swift_retain(v33);
  v36 = sub_100030D7C(v35, v34);
  swift_release(v33);
  v37 = swift_getKeyPath(&unk_1000C9898);
  v88[0] = v36;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v88, v37, v19);
  swift_release(v37);
  v38 = v36 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__anchoring;
  swift_beginAccess(v36 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__anchoring, v88, 0, 0);
  v40 = v80;
  v39 = v81;
  v41 = v38;
  v42 = v82;
  (*(void (**)(char *, uint64_t, uint64_t))(v81 + 16))(v80, v41, v82);
  v43 = swift_release(v36);
  v44 = (*(uint64_t (**)(char *, uint64_t, __n128))(v39 + 88))(v40, v42, v43);
  if (v44 == enum case for AccessPointAnchoring.topTrailing(_:))
  {
    v89.origin.x = v22;
    v89.origin.y = v24;
    v89.size.width = v26;
    v89.size.height = v28;
    MaxX = CGRectGetMaxX(v89);
    v46 = (uint64_t *)(v31 + *(int *)(v30 + 28));
    v48 = *v46;
    v47 = v46[1];
    v85 = v48;
    v86 = v47;
    sub_100003304(&qword_10010DE20);
    State.wrappedValue.getter(&v87);
    v49 = v87;
    v50 = swift_getKeyPath(&unk_1000C9870);
    v85 = v49;
    v51 = sub_1000035B4(&qword_10010DE28, type metadata accessor for AccessPointModel, (uint64_t)&unk_1000C97DC);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v85, v50, v51);
    swift_release(v50);
    v52 = *(unsigned __int8 *)(v49 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__state);
    swift_release(v49);
    if (v52 == 1)
      v53 = v32;
    else
      v53 = *(double *)&v29;
    v22 = MaxX - v53;
    goto LABEL_20;
  }
  if (v44 != enum case for AccessPointAnchoring.bottomLeading(_:))
  {
    if (v44 != enum case for AccessPointAnchoring.bottomTrailing(_:))
    {
      (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v42);
      goto LABEL_20;
    }
    v90.origin.x = v22;
    v90.origin.y = v24;
    v90.size.width = v26;
    v90.size.height = v28;
    v54 = CGRectGetMaxX(v90);
    v55 = (uint64_t *)(v31 + *(int *)(v30 + 28));
    v57 = *v55;
    v56 = v55[1];
    v85 = v57;
    v86 = v56;
    sub_100003304(&qword_10010DE20);
    State.wrappedValue.getter(&v87);
    v58 = v87;
    v59 = swift_getKeyPath(&unk_1000C9870);
    v85 = v58;
    v60 = sub_1000035B4(&qword_10010DE28, type metadata accessor for AccessPointModel, (uint64_t)&unk_1000C97DC);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v85, v59, v60);
    swift_release(v59);
    v61 = *(unsigned __int8 *)(v58 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__state);
    swift_release(v58);
    if (v61 == 1)
      v62 = v32;
    else
      v62 = *(double *)&v29;
    v22 = v54 - v62;
  }
  v91.origin.x = v22;
  v91.origin.y = v24;
  v91.size.width = v26;
  v91.size.height = v28;
  v24 = CGRectGetMaxY(v91) - v32;
LABEL_20:
  v63 = (uint64_t *)(v31 + *(int *)(v30 + 28));
  v65 = *v63;
  v64 = v63[1];
  v85 = v65;
  v86 = v64;
  sub_100003304(&qword_10010DE20);
  State.wrappedValue.getter(&v87);
  v66 = v87;
  v67 = swift_getKeyPath(&unk_1000C9870);
  v85 = v66;
  v68 = sub_1000035B4(&qword_10010DE28, type metadata accessor for AccessPointModel, (uint64_t)&unk_1000C97DC);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v85, v67, v68);
  swift_release(v67);
  v69 = *(unsigned __int8 *)(v66 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__state);
  swift_release(v66);
  if (v69 == 1)
    v70 = v32;
  else
    v70 = *(double *)&v29;
  v71 = type metadata accessor for TaskPriority(0);
  v72 = (uint64_t)v84;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 56))(v84, 1, 1, v71);
  type metadata accessor for MainActor(0);
  v73 = v79[0];
  v75 = swift_unknownObjectRetain(v79[0], v74);
  v76 = static MainActor.shared.getter(v75);
  v77 = swift_allocObject(&unk_1000FE368, 72, 7);
  *(_QWORD *)(v77 + 16) = v76;
  *(_QWORD *)(v77 + 24) = &protocol witness table for MainActor;
  *(_QWORD *)(v77 + 32) = v73;
  *(double *)(v77 + 40) = v22;
  *(double *)(v77 + 48) = v24;
  *(double *)(v77 + 56) = v70;
  *(double *)(v77 + 64) = v32;
  v78 = sub_100028240(v72, (uint64_t)&unk_10010DF50, v77);
  swift_release(v78);
  swift_unknownObjectRelease(v73);
}

uint64_t sub_100041B24@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t KeyPath;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  ValueMetadata *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t OpaqueTypeConformance2;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  __n128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  __n128 v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  BOOL v116;
  _QWORD v117[3];
  uint64_t v118;
  ValueMetadata *v119;
  uint64_t v120;
  void *v121;
  char v122[8];

  v106 = a1;
  v105 = type metadata accessor for TaskPriority(0);
  v104 = *(_QWORD *)(v105 - 8);
  __chkstk_darwin(v105);
  v103 = (char *)&v90 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = type metadata accessor for AccessPointAnchoring(0);
  v94 = *(_QWORD *)(v112 - 8);
  __chkstk_darwin(v112);
  v93 = (char *)&v90 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for AccessPointAnimationView(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = v4;
  v90 = v4;
  v7 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v91 = sub_100003304(&qword_10010DDE0);
  __chkstk_darwin(v91);
  v9 = (uint64_t *)((char *)&v90 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v108 = sub_100003304(&qword_10010DDE8);
  v92 = *(_QWORD *)(v108 - 8);
  __chkstk_darwin(v108);
  v107 = (char *)&v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = sub_100003304(&qword_10010DDF0);
  v95 = *(_QWORD *)(v110 - 8);
  __chkstk_darwin(v110);
  v109 = (char *)&v90 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = sub_100003304(&qword_10010DDF8);
  v97 = *(_QWORD *)(v98 - 8);
  __chkstk_darwin(v98);
  v114 = (char *)&v90 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = sub_100003304(&qword_10010DE00);
  v101 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102);
  v100 = (char *)&v90 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = sub_100003304(&qword_10010DE08);
  __chkstk_darwin(v96);
  v99 = (char *)&v90 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v9 = static Alignment.center.getter(v15);
  v9[1] = v16;
  v17 = sub_100003304(&qword_10010DE10);
  sub_100042560(v1, (uint64_t)v9 + *(int *)(v17 + 44));
  v18 = *(_QWORD *)((char *)v1 + *(int *)(v6 + 44));
  v19 = (uint64_t)v1;
  KeyPath = swift_getKeyPath(&unk_1000C9848);
  v118 = v18;
  v21 = sub_1000035B4(&qword_10010CE00, type metadata accessor for GameDashboardLaunchContext, (uint64_t)&protocol conformance descriptor for GameDashboardLaunchContext);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v118, KeyPath, v21);
  swift_release(KeyPath);
  swift_beginAccess(v18 + 16, v122, 0, 0);
  LOBYTE(v118) = *(_BYTE *)(v18 + 16);
  v22 = (char *)&v90 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = v22;
  sub_100007878(v19, (uint64_t)v22, type metadata accessor for AccessPointAnimationView);
  v23 = *(unsigned __int8 *)(v5 + 80);
  v24 = (v23 + 16) & ~v23;
  v25 = v24 + v7;
  v26 = v23 | 7;
  v113 = v25;
  v111 = v23 | 7;
  v27 = swift_allocObject(&unk_1000FE070, v25, v23 | 7);
  sub_100010F0C((uint64_t)v22, v27 + v24, type metadata accessor for AccessPointAnimationView);
  v28 = sub_100011054(&qword_10010DE18, &qword_10010DDE0, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  v29 = v91;
  View.onChange<A>(of:initial:_:)(&v118, 0, sub_10004836C, v27, v91, &type metadata for Bool, v28, &protocol witness table for Bool);
  swift_release(v27);
  sub_100010ED0((uint64_t)v9, &qword_10010DDE0);
  v30 = v19;
  v31 = (uint64_t *)(v19 + *(int *)(v90 + 28));
  v33 = *v31;
  v32 = (ValueMetadata *)v31[1];
  v118 = v33;
  v119 = v32;
  sub_100003304(&qword_10010DE20);
  State.wrappedValue.getter(v117);
  v34 = v117[0];
  v35 = swift_getKeyPath(&unk_1000C9870);
  v118 = v34;
  v36 = sub_1000035B4(&qword_10010DE28, type metadata accessor for AccessPointModel, (uint64_t)&unk_1000C97DC);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v118, v35, v36);
  swift_release(v35);
  LOBYTE(v22) = *(_BYTE *)(v34 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__state);
  swift_release(v34);
  LOBYTE(v117[0]) = (_BYTE)v22;
  v37 = (uint64_t)v115;
  sub_100007878(v30, (uint64_t)v115, type metadata accessor for AccessPointAnimationView);
  v38 = swift_allocObject(&unk_1000FE098, v25, v26);
  sub_100010F0C(v37, v38 + v24, type metadata accessor for AccessPointAnimationView);
  v118 = v29;
  v119 = (ValueMetadata *)&type metadata for Bool;
  v120 = v28;
  v121 = &protocol witness table for Bool;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v118, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v91 = OpaqueTypeConformance2;
  v40 = sub_10003C628();
  v41 = v108;
  v42 = OpaqueTypeConformance2;
  v43 = v107;
  View.onChange<A>(of:initial:_:)(v117, 0, sub_100048590, v38, v108, &type metadata for AccessPointModel.AnimationState, v42, v40);
  v44 = swift_release(v38);
  (*(void (**)(char *, uint64_t, __n128))(v92 + 8))(v43, v41, v44);
  v45 = v30;
  v46 = *(_QWORD *)(v30 + 8);
  LOBYTE(v43) = *(_BYTE *)(v30 + 16);
  v47 = swift_retain(v46);
  v48 = sub_100030D7C(v47, (char)v43);
  swift_release(v46);
  v49 = swift_getKeyPath(&unk_1000C9898);
  v118 = v48;
  v50 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v118, v49, v50);
  swift_release(v49);
  v51 = v48 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__anchoring;
  swift_beginAccess(v48 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__anchoring, v117, 0, 0);
  v52 = v94;
  v53 = v93;
  v54 = v112;
  (*(void (**)(char *, uint64_t, uint64_t))(v94 + 16))(v93, v51, v112);
  swift_release(v48);
  v55 = (uint64_t)v115;
  sub_100007878(v45, (uint64_t)v115, type metadata accessor for AccessPointAnimationView);
  v56 = swift_allocObject(&unk_1000FE0C0, v113, v111);
  v107 = (char *)v24;
  sub_100010F0C(v55, v56 + v24, type metadata accessor for AccessPointAnimationView);
  v118 = v108;
  v119 = &type metadata for AccessPointModel.AnimationState;
  v120 = v91;
  v121 = (void *)v40;
  v57 = swift_getOpaqueTypeConformance2(&v118, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v58 = sub_1000035B4(&qword_10010CE20, (uint64_t (*)(uint64_t))&type metadata accessor for AccessPointAnchoring, (uint64_t)&protocol conformance descriptor for AccessPointAnchoring);
  v59 = v109;
  v60 = v110;
  View.onChange<A>(of:initial:_:)(v53, 0, sub_1000489AC, v56, v110, v54, v57, v58);
  v61 = swift_release(v56);
  (*(void (**)(char *, uint64_t, __n128))(v52 + 8))(v53, v54, v61);
  (*(void (**)(char *, uint64_t))(v95 + 8))(v59, v60);
  v62 = *(_QWORD *)(v45 + 8);
  LOBYTE(v56) = *(_BYTE *)(v45 + 16);
  v63 = swift_retain(v62);
  v64 = sub_100030D7C(v63, v56);
  swift_release(v62);
  v65 = swift_getKeyPath(&unk_1000C98C0);
  v118 = v64;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v118, v65, v50);
  swift_release(v65);
  if (*(_BYTE *)(v64 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__active) == 1)
  {
    v66 = swift_getKeyPath(&unk_1000C98E8);
    v118 = v64;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v118, v66, v50);
    swift_release(v66);
    v67 = *(_QWORD *)(v64 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__hideCount);
    swift_release(v64);
    v68 = v67 > 0;
  }
  else
  {
    swift_release(v64);
    v68 = 1;
  }
  v116 = v68;
  v69 = (uint64_t)v115;
  sub_100007878(v45, (uint64_t)v115, type metadata accessor for AccessPointAnimationView);
  v70 = v113;
  v71 = v111;
  v72 = swift_allocObject(&unk_1000FE0E8, v113, v111);
  v73 = v107;
  sub_100010F0C(v69, (uint64_t)&v107[v72], type metadata accessor for AccessPointAnimationView);
  v118 = v110;
  v119 = (ValueMetadata *)v112;
  v120 = v57;
  v121 = (void *)v58;
  v74 = swift_getOpaqueTypeConformance2(&v118, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v75 = v100;
  v76 = v98;
  v77 = v114;
  View.onChange<A>(of:initial:_:)(&v116, 0, sub_100048A44, v72, v98, &type metadata for Bool, v74, &protocol witness table for Bool);
  v78 = swift_release(v72);
  (*(void (**)(char *, uint64_t, __n128))(v97 + 8))(v77, v76, v78);
  sub_100007878(v45, v69, type metadata accessor for AccessPointAnimationView);
  v79 = swift_allocObject(&unk_1000FE110, v70, v71);
  v80 = sub_100010F0C(v69, (uint64_t)&v73[v79], type metadata accessor for AccessPointAnimationView);
  v81 = v103;
  static TaskPriority.userInitiated.getter(v80);
  v82 = (uint64_t)v99;
  v83 = &v99[*(int *)(v96 + 36)];
  v84 = type metadata accessor for _TaskModifier(0);
  v85 = v104;
  v86 = v105;
  (*(void (**)(char *, char *, uint64_t))(v104 + 16))(&v83[*(int *)(v84 + 20)], v81, v105);
  *(_QWORD *)v83 = &unk_10010DE38;
  *((_QWORD *)v83 + 1) = v79;
  v87 = v101;
  v88 = v102;
  (*(void (**)(uint64_t, char *, uint64_t))(v101 + 16))(v82, v75, v102);
  (*(void (**)(char *, uint64_t))(v85 + 8))(v81, v86);
  (*(void (**)(char *, uint64_t))(v87 + 8))(v75, v88);
  return sub_10001A0AC(v82, v106, &qword_10010DE08);
}

uint64_t sub_100042560@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t KeyPath;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD v99[2];
  uint64_t v100;

  v98 = a2;
  v89 = sub_100003304(&qword_10010CB10);
  __chkstk_darwin(v89);
  v91 = (uint64_t)&v83 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v85);
  v88 = (char *)&v83 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = sub_100003304(&qword_10010CE78);
  __chkstk_darwin(v86);
  v6 = (uint64_t *)((char *)&v83 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v90 = sub_100003304(&qword_10010CE80);
  __chkstk_darwin(v90);
  v94 = (uint64_t)&v83 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003304(&qword_10010DEA0);
  __chkstk_darwin(v8);
  v10 = (char *)&v83 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = sub_100003304(&qword_10010DEA8);
  __chkstk_darwin(v87);
  v93 = (char *)&v83 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = sub_100003304(&qword_10010DEB0);
  __chkstk_darwin(v97);
  v92 = (uint64_t)&v83 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v95 = (uint64_t)&v83 - v14;
  v96 = sub_100003304(&qword_10010DEB8);
  __chkstk_darwin(v96);
  v16 = (char *)&v83 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for AccessPointAnimationView(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_QWORD *)(v18 + 64);
  __chkstk_darwin(v17);
  v20 = (char *)&v83 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = a1;
  v23 = (_QWORD *)((char *)a1 + *(int *)(v21 + 28));
  v25 = *v23;
  v24 = v23[1];
  v99[0] = v25;
  v99[1] = v24;
  sub_100003304(&qword_10010DE20);
  State.wrappedValue.getter(&v100);
  v26 = v100;
  KeyPath = swift_getKeyPath(&unk_1000C9A80);
  v99[0] = v26;
  v28 = sub_1000035B4(&qword_10010DE28, type metadata accessor for AccessPointModel, (uint64_t)&unk_1000C97DC);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v99, KeyPath, v28);
  swift_release(KeyPath);
  LODWORD(a1) = *(unsigned __int8 *)(v26 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__collapsed);
  swift_release(v26);
  if ((_DWORD)a1 == 1)
  {
    sub_100007878((uint64_t)v22, (uint64_t)&v83 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AccessPointAnimationView);
    v30 = *(unsigned __int8 *)(v18 + 80);
    v31 = (v30 + 16) & ~v30;
    v32 = swift_allocObject(&unk_1000FE2A0, v31 + v19, v30 | 7);
    v33 = sub_100010F0C((uint64_t)v20, v32 + v31, type metadata accessor for AccessPointAnimationView);
    v34 = static Edge.Set.all.getter(v33);
    v35 = EdgeInsets.init(_all:)(20.0);
    *(_QWORD *)v16 = sub_10004942C;
    *((_QWORD *)v16 + 1) = v32;
    v16[16] = v34;
    *((double *)v16 + 3) = v35;
    *((_QWORD *)v16 + 4) = v36;
    *((_QWORD *)v16 + 5) = v37;
    *((_QWORD *)v16 + 6) = v38;
    v16[56] = 0;
    swift_storeEnumTagMultiPayload(v16, v96, 0);
    v39 = sub_100003304(&qword_10010DEC8);
    v40 = sub_100049308();
    v41 = sub_100034764(&qword_10010DEE8, &qword_10010DEB0, (void (*)(void))sub_10004938C);
    return _ConditionalContent<>.init(storage:)(v16, v39, v97, v40, v41);
  }
  else
  {
    *(_QWORD *)v10 = static HorizontalAlignment.center.getter(v29);
    *((_QWORD *)v10 + 1) = 0;
    v10[16] = 0;
    v84 = v10;
    v43 = sub_100003304(&qword_10010DEC0);
    v44 = sub_100042C60(v22, (uint64_t)&v10[*(int *)(v43 + 44)]);
    v45 = static Color.clear.getter(v44);
    v46 = static Alignment.center.getter(v45);
    v48 = v47;
    v49 = v88;
    v50 = &v88[*(int *)(v85 + 20)];
    v51 = enum case for RoundedCornerStyle.continuous(_:);
    v52 = type metadata accessor for RoundedCornerStyle(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 104))(v50, v51, v52);
    __asm { FMOV            V0.2D, #20.0 }
    *v49 = _Q0;
    v58 = v91;
    sub_100007878((uint64_t)v49, v91, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
    *(_WORD *)(v58 + *(int *)(v89 + 36)) = 256;
    sub_100010CBC(v58, (uint64_t)v6 + *(int *)(v86 + 36), &qword_10010CB10);
    *v6 = v45;
    v6[1] = v46;
    v6[2] = v48;
    swift_retain(v45);
    sub_100010ED0(v58, &qword_10010CB10);
    sub_1000106F0((uint64_t)v49, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
    swift_release(v45);
    v59 = Namespace.wrappedValue.getter(*v22);
    LODWORD(v46) = static MatchedGeometryProperties.frame.getter();
    v60 = static UnitPoint.center.getter();
    v62 = v61;
    v63 = v94;
    sub_100010CBC((uint64_t)v6, v94, &qword_10010CE78);
    v64 = v63 + *(int *)(v90 + 36);
    *(_QWORD *)v64 = 0x756F72676B636162;
    *(_QWORD *)(v64 + 8) = 0xEA0000000000646ELL;
    *(_QWORD *)(v64 + 16) = v59;
    *(_DWORD *)(v64 + 24) = v46;
    *(double *)(v64 + 32) = v60;
    *(_QWORD *)(v64 + 40) = v62;
    *(_BYTE *)(v64 + 48) = 1;
    v65 = sub_100010ED0((uint64_t)v6, &qword_10010CE78);
    v66 = static Alignment.center.getter(v65);
    v68 = v67;
    v69 = (uint64_t)v93;
    v70 = (uint64_t)&v93[*(int *)(v87 + 36)];
    sub_100010CBC(v63, v70, &qword_10010CE80);
    v71 = (uint64_t *)(v70 + *(int *)(sub_100003304(&qword_10010CEB0) + 36));
    *v71 = v66;
    v71[1] = v68;
    v72 = (uint64_t)v84;
    sub_100010CBC((uint64_t)v84, v69, &qword_10010DEA0);
    sub_100010ED0(v63, &qword_10010CE80);
    v73 = sub_100010ED0(v72, &qword_10010DEA0);
    v74 = static SafeAreaRegions.all.getter(v73);
    LOBYTE(v72) = static Edge.Set.all.getter(v74);
    v75 = v92;
    sub_100010CBC(v69, v92, &qword_10010DEA8);
    v76 = v97;
    v77 = v75 + *(int *)(v97 + 36);
    *(_QWORD *)v77 = v74;
    *(_BYTE *)(v77 + 8) = v72;
    sub_100010ED0(v69, &qword_10010DEA8);
    v78 = v75;
    v79 = v95;
    sub_10001A0AC(v78, v95, &qword_10010DEB0);
    sub_100010CBC(v79, (uint64_t)v16, &qword_10010DEB0);
    swift_storeEnumTagMultiPayload(v16, v96, 1);
    v80 = sub_100003304(&qword_10010DEC8);
    v81 = sub_100049308();
    v82 = sub_100034764(&qword_10010DEE8, &qword_10010DEB0, (void (*)(void))sub_10004938C);
    _ConditionalContent<>.init(storage:)(v16, v80, v76, v81, v82);
    return sub_100010ED0(v79, &qword_10010DEB0);
  }
}

uint64_t sub_100042C60@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t KeyPath;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  _QWORD v52[2];
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  __int128 v60;
  uint64_t v61;

  v48 = sub_100003304(&qword_10010E0B0);
  __chkstk_darwin(v48);
  v5 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_100003304(&qword_10010D070);
  __chkstk_darwin(v49);
  v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003304(&qword_10010E0B8);
  __chkstk_darwin(v8);
  v51 = (uint64_t)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v50 = (char *)&v45 - v11;
  v12 = *(int *)(type metadata accessor for AccessPointAnimationView(0) + 28);
  v47 = a1;
  v13 = (_QWORD *)((char *)a1 + v12);
  v15 = *v13;
  v14 = v13[1];
  v53 = *v13;
  v54 = v14;
  sub_100003304(&qword_10010DE20);
  State.wrappedValue.getter(v52);
  v16 = v52[0];
  KeyPath = swift_getKeyPath(&unk_1000C9A00);
  v53 = v16;
  v18 = sub_1000035B4(&qword_10010DE28, type metadata accessor for AccessPointModel, (uint64_t)&unk_1000C97DC);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v53, KeyPath, v18);
  swift_release(KeyPath);
  v19 = *(unsigned __int8 *)(v16 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__showDashboard);
  swift_release(v16);
  if (v19 == 1)
  {
    sub_1000430C0();
    sub_100010CBC((uint64_t)v7, (uint64_t)v5, &qword_10010D070);
    swift_storeEnumTagMultiPayload(v5, v48, 0);
    v20 = sub_100003304(&qword_10010E0C0);
    v21 = sub_100049BE0();
    v22 = sub_100049C64();
    v23 = (uint64_t)v50;
    _ConditionalContent<>.init(storage:)(v5, v49, v20, v21, v22);
    sub_100010ED0((uint64_t)v7, &qword_10010D070);
  }
  else
  {
    v52[0] = v15;
    v52[1] = v14;
    State.projectedValue.getter(&v53);
    v24 = v53;
    v46 = v54;
    v25 = v55;
    v53 = v15;
    v54 = v14;
    State.wrappedValue.getter(v52);
    v26 = v52[0];
    v27 = swift_getKeyPath(&unk_1000C9910);
    v53 = v26;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v53, v27, v18);
    swift_release(v27);
    v28 = *(_QWORD **)(v26 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__highlightIndex);
    swift_release(v26);
    v29 = type metadata accessor for AccessPointHighlightComponent.GestureHandler(0);
    v30 = swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
    *(_BYTE *)(v30 + 16) = 0;
    ObservationRegistrar.init()(v30);
    sub_1000497D4(v24, v46, v25, v28, 0, (_QWORD *)v30, (uint64_t)&v53);
    v31 = v53;
    LOBYTE(v25) = v54;
    v32 = v55;
    v33 = v57;
    v34 = v58;
    LOBYTE(v26) = v59;
    v45 = v60;
    v46 = a2;
    v35 = v61;
    v36 = Namespace.wrappedValue.getter(*v47);
    LODWORD(v30) = static MatchedGeometryProperties.frame.getter();
    v37 = static UnitPoint.center.getter();
    LOBYTE(v52[0]) = v25;
    *(_QWORD *)v5 = v31;
    v5[8] = v25;
    *((_QWORD *)v5 + 2) = v32;
    *(_OWORD *)(v5 + 24) = v56;
    *((_QWORD *)v5 + 5) = v33;
    *((_QWORD *)v5 + 6) = v34;
    v5[56] = v26;
    *((_OWORD *)v5 + 4) = v45;
    *((_QWORD *)v5 + 10) = v35;
    *((_QWORD *)v5 + 11) = 0;
    a2 = v46;
    *((_QWORD *)v5 + 12) = 0x7974696361706FLL;
    *((_QWORD *)v5 + 13) = 0xE700000000000000;
    *((_QWORD *)v5 + 14) = v36;
    *((_DWORD *)v5 + 30) = v30;
    *((double *)v5 + 16) = v37;
    *((_QWORD *)v5 + 17) = v38;
    v5[144] = 1;
    swift_storeEnumTagMultiPayload(v5, v48, 1);
    v39 = sub_100003304(&qword_10010E0C0);
    v40 = sub_100049BE0();
    v41 = sub_100049C64();
    v23 = (uint64_t)v50;
    _ConditionalContent<>.init(storage:)(v5, v49, v39, v40, v41);
  }
  v42 = v51;
  sub_100010CBC(v23, v51, &qword_10010E0B8);
  sub_100010CBC(v42, a2, &qword_10010E0B8);
  v43 = a2 + *(int *)(sub_100003304(&qword_10010E100) + 48);
  *(_QWORD *)v43 = 0;
  *(_BYTE *)(v43 + 8) = 1;
  sub_100010ED0(v23, &qword_10010E0B8);
  return sub_100010ED0(v42, &qword_10010E0B8);
}

uint64_t sub_1000430C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE v15[8];
  char *v16;
  _QWORD v17[3];
  _QWORD v18[5];

  v1 = sub_100003304(&qword_10010D080);
  __chkstk_darwin(v1);
  v3 = &v15[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for AccessPointAnimationView(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v18[3] = &type metadata for GameOverlayUIFeatureFlags;
  v18[4] = sub_100004EA4();
  LOBYTE(v18[0]) = 0;
  isFeatureEnabled(_:)(v18);
  sub_100004624(v18);
  v7 = sub_100044CD4();
  sub_100007878(v0, (uint64_t)&v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)], type metadata accessor for AccessPointAnimationView);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v8 + 16) & ~v8;
  v10 = swift_allocObject(&unk_1000FE408, v9 + v6, v8 | 7);
  sub_100010F0C((uint64_t)&v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)], v10 + v9, type metadata accessor for AccessPointAnimationView);
  v15[0] = 1;
  v16 = v7;
  swift_unknownObjectWeakInit(v17, 0);
  v17[1] = sub_100049D50;
  v17[2] = v10;
  sub_100026004((uint64_t)v15, (uint64_t)v18);
  sub_100026040((uint64_t)v18, (uint64_t)v3);
  swift_storeEnumTagMultiPayload(v3, v1, 1);
  v11 = type metadata accessor for DashboardContentView(0);
  v12 = sub_1000035B4(&qword_10010D088, type metadata accessor for DashboardContentView, (uint64_t)&unk_1000CA8D0);
  v13 = sub_10002607C();
  _ConditionalContent<>.init(storage:)(v3, v11, &type metadata for GameCenterDashboard, v12, v13);
  return sub_1000260C0((uint64_t)v18);
}

void sub_100043298(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t KeyPath;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t Strong;
  uint64_t v29;
  uint64_t v30;
  Class isa;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  objc_class *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD v39[2];
  uint64_t v40;
  uint64_t v41;
  char *v42;
  _QWORD v43[3];
  _QWORD v44[3];

  v2 = sub_100003304(&qword_10010EB20);
  __chkstk_darwin(v2);
  v42 = (char *)v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for AnimationCompletionCriteria(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AccessPointAnimationView(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = *(int *)(v12 + 44);
  v13 = *(_QWORD *)(a1 + v41);
  KeyPath = swift_getKeyPath(&unk_1000C9848);
  v44[0] = v13;
  v40 = sub_1000035B4(&qword_10010CE00, type metadata accessor for GameDashboardLaunchContext, (uint64_t)&protocol conformance descriptor for GameDashboardLaunchContext);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v44, KeyPath, v40);
  swift_release(KeyPath);
  v15 = swift_beginAccess(v13 + 16, v44, 0, 0);
  if (*(_BYTE *)(v13 + 16) == 1)
  {
    if (qword_10010BAC0 != -1)
      v15 = swift_once(&qword_10010BAC0, sub_100039674);
    v39[1] = v39;
    v16 = qword_10010D8E0;
    __chkstk_darwin(v15);
    v39[-2] = a1;
    sub_100007878(a1, (uint64_t)v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AccessPointAnimationView);
    v17 = *(unsigned __int8 *)(v9 + 80);
    v18 = (v17 + 16) & ~v17;
    v19 = swift_allocObject(&unk_1000FE250, v18 + v10, v17 | 7);
    v20 = sub_100010F0C((uint64_t)v11, v19 + v18, type metadata accessor for AccessPointAnimationView);
    static AnimationCompletionCriteria.logicallyComplete.getter(v20);
    withAnimation<A>(_:completionCriteria:_:completion:)(v16, v7, sub_1000491F4, &v39[-4], sub_100049220, v19, (char *)&type metadata for () + 8);
    v21 = swift_release(v19);
    (*(void (**)(char *, uint64_t, __n128))(v5 + 8))(v7, v4, v21);
  }
  v22 = *(_QWORD *)(a1 + 8);
  v23 = *(_BYTE *)(a1 + 16);
  v24 = swift_retain(v22);
  v25 = sub_100030D7C(v24, v23);
  swift_release(v22);
  v26 = swift_getKeyPath(&unk_1000C9A58);
  v43[0] = v25;
  v27 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v43, v26, v27);
  swift_release(v26);
  Strong = swift_unknownObjectWeakLoadStrong(v25 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__remoteTarget);
  swift_release(v25);
  if (Strong)
  {
    sub_100025740();
    v29 = *(_QWORD *)(a1 + v41);
    v30 = swift_getKeyPath(&unk_1000C9848);
    v43[0] = v29;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v43, v30, v40);
    swift_release(v30);
    swift_beginAccess(v29 + 16, v43, 0, 0);
    isa = NSNumber.init(BOOLeanLiteral:)(*(_BYTE *)(v29 + 16)).super.super.isa;
    v32 = type metadata accessor for TaskPriority(0);
    v33 = (uint64_t)v42;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v42, 1, 1, v32);
    type metadata accessor for MainActor(0);
    swift_unknownObjectRetain(Strong, v34);
    v35 = isa;
    v36 = static MainActor.shared.getter(v35);
    v37 = (_QWORD *)swift_allocObject(&unk_1000FE228, 48, 7);
    v37[2] = v36;
    v37[3] = &protocol witness table for MainActor;
    v37[4] = Strong;
    v37[5] = v35;
    v38 = sub_100028240(v33, (uint64_t)&unk_10010DE90, (uint64_t)v37);
    swift_release(v38);

    swift_unknownObjectRelease(Strong);
  }
}

double sub_1000436A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *Strong;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _BYTE v33[16];
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v2 = sub_100003304(&qword_10010EB20);
  __chkstk_darwin(v2);
  v4 = &v33[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = (uint64_t *)(a1 + *(int *)(type metadata accessor for AccessPointAnimationView(0) + 28));
  v7 = v5[1];
  v36 = *v5;
  v6 = v36;
  v37 = v7;
  sub_100003304(&qword_10010DE20);
  State.wrappedValue.getter(&v38);
  v8 = v38;
  v36 = v6;
  v37 = v7;
  State.wrappedValue.getter(&v38);
  v9 = v38;
  KeyPath = swift_getKeyPath(&unk_1000C9A80);
  v36 = v9;
  v11 = sub_1000035B4(&qword_10010DE28, type metadata accessor for AccessPointModel, (uint64_t)&unk_1000C97DC);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v36, KeyPath, v11);
  swift_release(KeyPath);
  v12 = *(_BYTE *)(v9 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__collapsed);
  swift_release(v9);
  v13 = swift_getKeyPath(&unk_1000C9A00);
  v34 = v8;
  v35 = (v12 & 1) == 0;
  v36 = v8;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v36, v13, sub_10004B154, v33, (char *)&type metadata for () + 8, v11);
  swift_release(v8);
  swift_release(v13);
  v14 = *(_QWORD *)(a1 + 8);
  v15 = *(_BYTE *)(a1 + 16);
  v16 = swift_retain(v14);
  v17 = sub_100030D7C(v16, v15);
  swift_release(v14);
  v18 = swift_getKeyPath(&unk_1000C9AA8);
  v36 = v17;
  v19 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v36, v18, v19);
  swift_release(v18);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v17 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__remoteAlertScene);
  *(_QWORD *)&v21 = swift_release(v17).n128_u64[0];
  if (Strong)
  {
    objc_msgSend(Strong, "setInputHardwareEventsDisabled:", 0, v21);

  }
  v22 = swift_retain(v14);
  v23 = sub_100030D7C(v22, v15);
  swift_release(v14);
  v24 = swift_getKeyPath(&unk_1000C99D8);
  v36 = v23;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v36, v24, v19);
  swift_release(v24);
  v26 = *(_QWORD *)(v23 + 16);
  v25 = *(_QWORD *)(v23 + 24);
  swift_bridgeObjectRetain(v25);
  *(_QWORD *)&result = swift_release(v23).n128_u64[0];
  if (v25)
  {
    v28 = type metadata accessor for TaskPriority(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v4, 1, 1, v28);
    v29 = type metadata accessor for MainActor(0);
    v30 = static MainActor.shared.getter(v29);
    v31 = (_QWORD *)swift_allocObject(&unk_1000FE278, 48, 7);
    v31[2] = v30;
    v31[3] = &protocol witness table for MainActor;
    v31[4] = v26;
    v31[5] = v25;
    v32 = sub_100028240((uint64_t)v4, (uint64_t)&unk_10010DE98, (uint64_t)v31);
    *(_QWORD *)&result = swift_release(v32).n128_u64[0];
  }
  return result;
}

double sub_1000439D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t KeyPath;
  uint64_t v18;
  unint64_t *v19;
  int v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  __n128 v36;
  double result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v2 = sub_100003304(&qword_10010EB20);
  __chkstk_darwin(v2);
  v69 = (char *)&v63 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for AnimationCompletionCriteria(0);
  v67 = *(_QWORD *)(v4 - 8);
  v68 = v4;
  __chkstk_darwin(v4);
  v66 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AccessPointAnimationView(0);
  v64 = *(_QWORD *)(v6 - 8);
  v7 = *(_QWORD *)(v64 + 64);
  __chkstk_darwin(v6);
  v70 = (uint64_t)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v65 = (uint64_t)&v63 - v9;
  __chkstk_darwin(v10);
  v12 = (char *)&v63 - v11;
  v14 = (uint64_t *)(a1 + *(int *)(v13 + 28));
  v15 = v14[1];
  v71 = *v14;
  v72 = v15;
  sub_100003304(&qword_10010DE20);
  State.wrappedValue.getter(&v73);
  v16 = v73;
  KeyPath = swift_getKeyPath(&unk_1000C9870);
  v71 = v16;
  v18 = sub_1000035B4(&qword_10010DE28, type metadata accessor for AccessPointModel, (uint64_t)&unk_1000C97DC);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v71, KeyPath, v18);
  swift_release(KeyPath);
  v19 = &qword_10010D000;
  v20 = *(unsigned __int8 *)(v16 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__state);
  swift_release(v16);
  sub_100007878(a1, (uint64_t)v12, type metadata accessor for AccessPointAnimationView);
  if (v20 == 2)
  {
    v21 = &v12[*(int *)(v6 + 28)];
    v23 = *(_QWORD *)v21;
    v22 = *((_QWORD *)v21 + 1);
    v71 = v23;
    v72 = v22;
    State.wrappedValue.getter(&v73);
    v24 = v73;
    v25 = swift_getKeyPath(&unk_1000C9A00);
    v71 = v24;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v71, v25, v18);
    v26 = v25;
    v19 = &qword_10010D000;
    swift_release(v26);
    v27 = *(_BYTE *)(v24 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__showDashboard);
    swift_release(v24);
    v28 = sub_1000106F0((uint64_t)v12, type metadata accessor for AccessPointAnimationView);
    if ((v27 & 1) == 0)
    {
      if (qword_10010BAB8 != -1)
        v28 = swift_once(&qword_10010BAB8, sub_100039648);
      v29 = qword_10010D8D8;
      __chkstk_darwin(v28);
      *(&v63 - 2) = a1;
      v30 = v65;
      sub_100007878(a1, v65, type metadata accessor for AccessPointAnimationView);
      v31 = *(unsigned __int8 *)(v64 + 80);
      v32 = (v31 + 16) & ~v31;
      v33 = swift_allocObject(&unk_1000FE1B0, v32 + v7, v31 | 7);
      v34 = sub_100010F0C(v30, v33 + v32, type metadata accessor for AccessPointAnimationView);
      v35 = v66;
      static AnimationCompletionCriteria.logicallyComplete.getter(v34);
      withAnimation<A>(_:completionCriteria:_:completion:)(v29, v35, sub_100049040, &v63 - 4, sub_10004905C, v33, (char *)&type metadata for () + 8);
      v36 = swift_release(v33);
      (*(void (**)(char *, uint64_t, __n128))(v67 + 8))(v35, v68, v36);
      return result;
    }
  }
  else
  {
    sub_1000106F0((uint64_t)v12, type metadata accessor for AccessPointAnimationView);
  }
  v38 = v14[1];
  v71 = *v14;
  v72 = v38;
  State.wrappedValue.getter(&v73);
  v39 = v73;
  v40 = swift_getKeyPath(&unk_1000C9870);
  v71 = v39;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v71, v40, v18);
  swift_release(v40);
  v41 = *(unsigned __int8 *)(v39 + v19[292]);
  swift_release(v39);
  v42 = v70;
  sub_100007878(a1, v70, type metadata accessor for AccessPointAnimationView);
  if (v41 == 2)
  {
    sub_1000106F0(v42, type metadata accessor for AccessPointAnimationView);
  }
  else
  {
    v43 = (uint64_t *)(v42 + *(int *)(v6 + 28));
    v45 = *v43;
    v44 = v43[1];
    v71 = v45;
    v72 = v44;
    State.wrappedValue.getter(&v73);
    v46 = v73;
    v47 = swift_getKeyPath(&unk_1000C9870);
    v71 = v46;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v71, v47, v18);
    swift_release(v47);
    v48 = *(unsigned __int8 *)(v46 + v19[292]);
    swift_release(v46);
    sub_1000106F0(v42, type metadata accessor for AccessPointAnimationView);
    if (v48 != 1)
      return result;
  }
  v49 = *(_QWORD *)(a1 + 8);
  v50 = *(_BYTE *)(a1 + 16);
  v51 = swift_retain(v49);
  v52 = sub_100030D7C(v51, v50);
  swift_release(v49);
  v53 = swift_getKeyPath(&unk_1000C99D8);
  v71 = v52;
  v54 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v71, v53, v54);
  swift_release(v53);
  v56 = *(_QWORD *)(v52 + 16);
  v55 = *(_QWORD *)(v52 + 24);
  swift_bridgeObjectRetain(v55);
  *(_QWORD *)&result = swift_release(v52).n128_u64[0];
  if (v55)
  {
    v57 = type metadata accessor for TaskPriority(0);
    v58 = (uint64_t)v69;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v69, 1, 1, v57);
    v59 = type metadata accessor for MainActor(0);
    v60 = static MainActor.shared.getter(v59);
    v61 = (_QWORD *)swift_allocObject(&unk_1000FE188, 48, 7);
    v61[2] = v60;
    v61[3] = &protocol witness table for MainActor;
    v61[4] = v56;
    v61[5] = v55;
    v62 = sub_100028240(v58, (uint64_t)&unk_10010DE68, (uint64_t)v61);
    *(_QWORD *)&result = swift_release(v62).n128_u64[0];
  }
  return result;
}

double sub_100043F80(uint64_t a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  double result;
  _QWORD v5[3];
  char v6;
  _QWORD v7[2];
  uint64_t v8;

  v7[1] = *(_QWORD *)(a1 + *(int *)(type metadata accessor for AccessPointAnimationView(0) + 28) + 8);
  sub_100003304(&qword_10010DE20);
  State.wrappedValue.getter(&v8);
  v1 = v8;
  KeyPath = swift_getKeyPath(&unk_1000C9A28);
  v5[2] = v1;
  v6 = 0;
  v7[0] = v1;
  v3 = sub_1000035B4(&qword_10010DE28, type metadata accessor for AccessPointModel, (uint64_t)&unk_1000C97DC);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v7, KeyPath, sub_100049110, v5, (char *)&type metadata for () + 8, v3);
  swift_release(v1);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

double sub_10004406C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v2 = sub_100003304(&qword_10010EB20);
  __chkstk_darwin(v2);
  v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  v7 = swift_retain(v5);
  v8 = sub_100030D7C(v7, v6);
  swift_release(v5);
  KeyPath = swift_getKeyPath(&unk_1000C99D8);
  v30 = v8;
  v10 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v30, KeyPath, v10);
  swift_release(KeyPath);
  v12 = *(_QWORD *)(v8 + 16);
  v11 = *(_QWORD *)(v8 + 24);
  swift_bridgeObjectRetain(v11);
  swift_release(v8);
  if (v11)
  {
    v13 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v4, 1, 1, v13);
    v14 = type metadata accessor for MainActor(0);
    v15 = static MainActor.shared.getter(v14);
    v16 = (_QWORD *)swift_allocObject(&unk_1000FE200, 48, 7);
    v16[2] = v15;
    v16[3] = &protocol witness table for MainActor;
    v16[4] = v12;
    v16[5] = v11;
    v17 = sub_100028240((uint64_t)v4, (uint64_t)&unk_10010DE80, (uint64_t)v16);
    swift_release(v17);
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_BYTE *)(a1 + 16);
  }
  v18 = swift_retain(v5);
  v19 = sub_100030D7C(v18, v6);
  swift_release(v5);
  v20 = swift_getKeyPath(&unk_1000C99D8);
  v30 = v19;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v30, v20, v10);
  swift_release(v20);
  v22 = *(_QWORD *)(v19 + 16);
  v21 = *(_QWORD *)(v19 + 24);
  swift_bridgeObjectRetain(v21);
  *(_QWORD *)&result = swift_release(v19).n128_u64[0];
  if (v21)
  {
    v24 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v4, 1, 1, v24);
    v25 = type metadata accessor for MainActor(0);
    v26 = static MainActor.shared.getter(v25);
    v27 = (_QWORD *)swift_allocObject(&unk_1000FE1D8, 48, 7);
    v27[2] = v26;
    v27[3] = &protocol witness table for MainActor;
    v27[4] = v22;
    v27[5] = v21;
    v28 = sub_100028240((uint64_t)v4, (uint64_t)&unk_10010DE70, (uint64_t)v27);
    *(_QWORD *)&result = swift_release(v28).n128_u64[0];
  }
  return result;
}

uint64_t sub_1000442CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[2] = a4;
  v5[3] = a5;
  v6 = type metadata accessor for MainActor(0);
  v5[4] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  v5[5] = v7;
  v5[6] = v8;
  return swift_task_switch(sub_100044338, v7, v8);
}

uint64_t sub_100044338()
{
  uint64_t v0;
  uint64_t v1;

  if (qword_10010BAF0 != -1)
    swift_once(&qword_10010BAF0, sub_100051BCC);
  v1 = qword_1001232F8;
  *(_QWORD *)(v0 + 56) = qword_1001232F8;
  return swift_task_switch(sub_10004439C, v1, 0);
}

uint64_t sub_10004439C()
{
  _QWORD *v0;

  sub_100052718(v0[2], v0[3], 1);
  return swift_task_switch(sub_10004B100, v0[5], v0[6]);
}

void sub_1000443DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t KeyPath;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  void (*v22)(char *, uint64_t, __n128);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, __n128);
  __n128 v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  char *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t, uint64_t);
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char v53[16];
  uint64_t v54;
  char *v55;
  _QWORD v56[3];
  _QWORD v57[3];
  _QWORD v58[4];
  char *v59;

  v2 = v1;
  v4 = type metadata accessor for AccessPointAnchoring(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v50 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v45 - v8;
  v10 = (_QWORD *)(a1 + *(int *)(type metadata accessor for AccessPointAnimationView(0) + 28));
  v11 = v10[1];
  v58[0] = *v10;
  v58[1] = v11;
  v52 = sub_100003304(&qword_10010DE20);
  State.wrappedValue.getter(v57);
  v12 = v57[0];
  v13 = *(_QWORD *)(a1 + 8);
  v48 = a1;
  v14 = *(_BYTE *)(a1 + 16);
  v15 = swift_retain(v13);
  v16 = sub_100030D7C(v15, v14);
  swift_release(v13);
  KeyPath = swift_getKeyPath(&unk_1000C9898);
  v58[0] = v16;
  v47 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v58, KeyPath, v47);
  swift_release(KeyPath);
  v18 = v16 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__anchoring;
  swift_beginAccess(v16 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__anchoring, v58, 0, 0);
  v49 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v49(v9, v18, v4);
  swift_release(v16);
  v19 = swift_getKeyPath(&unk_1000C9960);
  v54 = v12;
  v55 = v9;
  v57[0] = v12;
  v20 = sub_1000035B4(&qword_10010DE28, type metadata accessor for AccessPointModel, (uint64_t)&unk_1000C97DC);
  v45 = (char *)&type metadata for () + 8;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v57, v19, sub_10004B118, v53, (char *)&type metadata for () + 8, v20);
  v51 = v2;
  v21 = swift_release(v19);
  v22 = *(void (**)(char *, uint64_t, __n128))(v5 + 8);
  v22(v9, v4, v21);
  swift_release(v12);
  v23 = *v10;
  v24 = v10[1];
  v46 = v10;
  v57[0] = v23;
  v57[1] = v24;
  State.wrappedValue.getter(v56);
  v25 = v56[0];
  v26 = swift_getKeyPath(&unk_1000C9988);
  v57[0] = v25;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v57, v26, v20);
  v27 = v26;
  v28 = v49;
  swift_release(v27);
  v29 = v25 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__anchor;
  swift_beginAccess(v25 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__anchor, v57, 0, 0);
  v28(v9, v29, v4);
  v30 = v25;
  v31 = v22;
  v32 = swift_release(v30);
  v33 = v50;
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v5 + 104))(v50, enum case for AccessPointAnchoring.topCentered(_:), v4, v32);
  v34 = sub_1000035B4(&qword_10010CE20, (uint64_t (*)(uint64_t))&type metadata accessor for AccessPointAnchoring, (uint64_t)&protocol conformance descriptor for AccessPointAnchoring);
  LOBYTE(v29) = dispatch thunk of static Equatable.== infix(_:_:)(v9, v33, v4, v34);
  ((void (*)(char *, uint64_t))v22)(v33, v4);
  ((void (*)(char *, uint64_t))v22)(v9, v4);
  if ((v29 & 1) == 0)
  {
    v35 = v46[1];
    v56[0] = *v46;
    v56[1] = v35;
    State.wrappedValue.getter(&v59);
    v36 = v59;
    v37 = *(_QWORD *)(v48 + 8);
    v38 = *(_BYTE *)(v48 + 16);
    v39 = swift_retain(v37);
    v40 = sub_100030D7C(v39, v38);
    swift_release(v37);
    v41 = swift_getKeyPath(&unk_1000C9898);
    v56[0] = v40;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v56, v41, v47);
    swift_release(v41);
    v42 = v40 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__anchoring;
    swift_beginAccess(v40 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__anchoring, v56, 0, 0);
    v28(v9, v42, v4);
    swift_release(v40);
    v43 = swift_getKeyPath(&unk_1000C9988);
    __chkstk_darwin(v43);
    *(&v45 - 2) = v36;
    *(&v45 - 1) = v9;
    v59 = v36;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v59, v43, sub_10004B104, &v45 - 4, v45, v20);
    v44 = swift_release(v43);
    v31(v9, v4, v44);
    swift_release(v36);
  }
}

double sub_100044864(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[5];
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_BYTE *)(a1 + 16);
  v4 = swift_retain(v2);
  v5 = sub_100030D7C(v4, v3);
  swift_release(v2);
  KeyPath = swift_getKeyPath(&unk_1000C98C0);
  v16 = v5;
  v7 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v16, KeyPath, v7);
  swift_release(KeyPath);
  if (*(_BYTE *)(v5 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__active) == 1)
  {
    v8 = swift_getKeyPath(&unk_1000C98E8);
    v16 = v5;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v16, v8, v7);
    swift_release(v8);
    v9 = *(_QWORD *)(v5 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__hideCount);
    swift_release(v5);
    if (v9 <= 0)
    {
      if (qword_10010BAB0 != -1)
        swift_once(&qword_10010BAB0, sub_100039614);
      v10 = &qword_10010D8D0;
      goto LABEL_10;
    }
  }
  else
  {
    swift_release(v5);
  }
  if (qword_10010BAB8 != -1)
    swift_once(&qword_10010BAB8, sub_100039648);
  v10 = &qword_10010D8D8;
LABEL_10:
  v11 = *v10;
  v12 = swift_retain(*v10);
  __chkstk_darwin(v12);
  v15[2] = a1;
  withAnimation<A>(_:_:)(v13, sub_100048F24, v15, (char *)&type metadata for () + 8);
  swift_release(v11);
  return sub_10003CB60();
}

double sub_100044A3C(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  double result;
  _QWORD v18[3];
  BOOL v19;
  _QWORD v20[2];
  uint64_t v21;

  v2 = (uint64_t *)(a1 + *(int *)(type metadata accessor for AccessPointAnimationView(0) + 28));
  v4 = *v2;
  v3 = v2[1];
  v20[0] = v4;
  v20[1] = v3;
  sub_100003304(&qword_10010DE20);
  State.wrappedValue.getter(&v21);
  v5 = v21;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  v8 = swift_retain(v6);
  v9 = sub_100030D7C(v8, v7);
  swift_release(v6);
  KeyPath = swift_getKeyPath(&unk_1000C98C0);
  v20[0] = v9;
  v11 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v20, KeyPath, v11);
  swift_release(KeyPath);
  if (*(_BYTE *)(v9 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__active) == 1)
  {
    v12 = swift_getKeyPath(&unk_1000C98E8);
    v20[0] = v9;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v20, v12, v11);
    swift_release(v12);
    v13 = *(_QWORD *)(v9 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__hideCount);
    swift_release(v9);
    v14 = v13 > 0;
  }
  else
  {
    swift_release(v9);
    v14 = 1;
  }
  v15 = swift_getKeyPath(&unk_1000C99B0);
  __chkstk_darwin(v15);
  v18[2] = v5;
  v19 = v14;
  v20[0] = v5;
  v16 = sub_1000035B4(&qword_10010DE28, type metadata accessor for AccessPointModel, (uint64_t)&unk_1000C97DC);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v20, v15, sub_100048F64, v18, (char *)&type metadata for () + 8, v16);
  swift_release(v5);
  *(_QWORD *)&result = swift_release(v15).n128_u64[0];
  return result;
}

uint64_t sub_100044C34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v1 + 16) = a1;
  v2 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v1 + 24) = static MainActor.shared.getter(v2);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  return swift_task_switch(sub_100044CA0, v3, v4);
}

uint64_t sub_100044CA0()
{
  uint64_t v0;
  double v1;

  swift_release(*(_QWORD *)(v0 + 24));
  v1 = sub_10003CB60();
  return (*(uint64_t (**)(double))(v0 + 8))(v1);
}

char *sub_100044CD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  unint64_t v5;
  id v6;
  char *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _QWORD v26[3];

  v1 = v0;
  v2 = sub_100003304(&qword_10010CA80);
  __chkstk_darwin(v2);
  v4 = (char *)&v26[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10008F978((uint64_t)&_swiftEmptyArrayStorage);
  v6 = objc_allocWithZone((Class)type metadata accessor for DashboardRequest());
  v7 = DashboardRequest.init(initialState:)(v5);
  v8 = *(_QWORD *)(v0 + 8);
  v9 = *(_BYTE *)(v1 + 16);
  v10 = swift_retain(*(_QWORD *)(v1 + 8));
  v11 = sub_100030D7C(v10, v9);
  swift_release(v8);
  KeyPath = swift_getKeyPath(&unk_1000C9B28);
  v26[0] = v11;
  v13 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v26, KeyPath, v13);
  swift_release(KeyPath);
  v14 = *(void **)(v11 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__gkGame);
  v15 = v14;
  swift_release(v11);
  v16 = *(void **)&v7[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_currentGame];
  *(_QWORD *)&v7[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_currentGame] = v14;

  v17 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for AccessPointAnimationView(0) + 44));
  v18 = swift_getKeyPath(&unk_1000C9B50);
  v26[0] = v17;
  v19 = sub_1000035B4(&qword_10010CE00, type metadata accessor for GameDashboardLaunchContext, (uint64_t)&protocol conformance descriptor for GameDashboardLaunchContext);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v26, v18, v19);
  swift_release(v18);
  v20 = v17 + OBJC_IVAR____TtC13GameOverlayUI26GameDashboardLaunchContext__action;
  swift_beginAccess(v17 + OBJC_IVAR____TtC13GameOverlayUI26GameDashboardLaunchContext__action, v26, 0, 0);
  sub_100010CBC(v20, (uint64_t)v4, &qword_10010CA80);
  v21 = type metadata accessor for LaunchDashboardAction(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v4, 1, v21) != 1)
  {
    v22 = &v4[*(int *)(v21 + 24)];
    v23 = v22[16];
    sub_100049DD4(*(_QWORD *)v22, *((_QWORD *)v22 + 1), v22[16]);
    sub_1000106F0((uint64_t)v4, type metadata accessor for LaunchDashboardAction);
    __asm { BR              X9 }
  }
  sub_100010ED0((uint64_t)v4, &qword_10010CA80);
  *(_QWORD *)&v7[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_viewState] = 4;
  return v7;
}

void sub_100044FB8()
{
  uint64_t v0;
  uint64_t v1;

  if (v1 | v0)
    JUMPOUT(0x100044EE4);
  JUMPOUT(0x100044ED4);
}

uint64_t sub_100044FF4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  _QWORD v18[2];

  v2 = type metadata accessor for AnimationCompletionCriteria(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AccessPointAnimationView(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v10 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10010BAC8 != -1)
    v9 = swift_once(&qword_10010BAC8, sub_1000396A4);
  v18[0] = v18;
  v11 = qword_10010D8E8;
  __chkstk_darwin(v9);
  v18[-2] = a1;
  sub_100007878(a1, (uint64_t)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AccessPointAnimationView);
  v12 = *(unsigned __int8 *)(v7 + 80);
  v13 = (v12 + 16) & ~v12;
  v14 = swift_allocObject(&unk_1000FE430, v13 + v8, v12 | 7);
  v15 = sub_100010F0C((uint64_t)v10, v14 + v13, type metadata accessor for AccessPointAnimationView);
  static AnimationCompletionCriteria.logicallyComplete.getter(v15);
  withAnimation<A>(_:completionCriteria:_:completion:)(v11, v5, sub_100049D5C, &v18[-4], sub_100049D88, v14, (char *)&type metadata for () + 8);
  v16 = swift_release(v14);
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v3 + 8))(v5, v2, v16);
}

uint64_t sub_1000451A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[2] = a4;
  v5[3] = a5;
  v6 = type metadata accessor for MainActor(0);
  v5[4] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  v5[5] = v7;
  v5[6] = v8;
  return swift_task_switch(sub_100045210, v7, v8);
}

uint64_t sub_100045210()
{
  uint64_t v0;
  uint64_t v1;

  if (qword_10010BAF0 != -1)
    swift_once(&qword_10010BAF0, sub_100051BCC);
  v1 = qword_1001232F8;
  *(_QWORD *)(v0 + 56) = qword_1001232F8;
  return swift_task_switch(sub_100045274, v1, 0);
}

uint64_t sub_100045274()
{
  unint64_t *v0;

  sub_100050FF4(v0[2], v0[3]);
  return swift_task_switch(sub_100023524, v0[5], v0[6]);
}

double sub_1000452B0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;
  _QWORD v11[2];
  uint64_t v12;

  v11[1] = *(_QWORD *)(a1 + *(int *)(type metadata accessor for AccessPointAnimationView(0) + 28) + 8);
  sub_100003304(&qword_10010DE20);
  State.wrappedValue.getter(&v12);
  v5 = v12;
  KeyPath = swift_getKeyPath(a2);
  v11[0] = v5;
  v7 = sub_1000035B4(&qword_10010DE28, type metadata accessor for AccessPointModel, (uint64_t)&unk_1000C97DC);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v11, KeyPath, v7);
  swift_release(KeyPath);
  v11[0] = v5;
  v8 = swift_getKeyPath(a2);
  ObservationRegistrar.willSet<A, B>(_:keyPath:)(v11, v8, v7);
  swift_release(v8);
  *(_BYTE *)(v5 + *a3) = (*(_BYTE *)(v5 + *a3) & 1) == 0;
  v11[0] = v5;
  v9 = swift_getKeyPath(a2);
  ObservationRegistrar.didSet<A, B>(_:keyPath:)(v11, v9, v7);
  swift_release(v5);
  *(_QWORD *)&result = swift_release(v9).n128_u64[0];
  return result;
}

uint64_t sub_1000453F4(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  _QWORD v10[6];

  if (*a2 != -1)
    swift_once(a2, a5);
  v8 = __chkstk_darwin(*a3);
  v10[2] = a1;
  return withAnimation<A>(_:_:)(v8, a4, v10, (char *)&type metadata for () + 8);
}

double sub_100045480(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  void *Strong;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __n128 v68;
  double result;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  v2 = v1;
  v4 = type metadata accessor for AccessPointAnchoring(0);
  v75 = *(_QWORD *)(v4 - 8);
  v76 = v4;
  __chkstk_darwin(v4);
  v74 = (char *)&v70 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = type metadata accessor for AccessPointContainer(0);
  __chkstk_darwin(v73);
  v7 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  v10 = swift_retain(v8);
  v11 = sub_100030D7C(v10, v9);
  swift_release(v8);
  KeyPath = swift_getKeyPath(&unk_1000C9AA8);
  v83 = v11;
  v13 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v83, KeyPath, v13);
  swift_release(KeyPath);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v11 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__remoteAlertScene);
  *(_QWORD *)&v15 = swift_release(v11).n128_u64[0];
  if (Strong)
  {
    objc_msgSend(Strong, "setInputHardwareEventsDisabled:", 1, v15);

  }
  v16 = type metadata accessor for AccessPointAnimationView(0);
  v17 = *(_QWORD *)(a1 + *(int *)(v16 + 44));
  v18 = swift_getKeyPath(&unk_1000C9848);
  __chkstk_darwin(v18);
  *(&v70 - 2) = v17;
  *((_BYTE *)&v70 - 8) = 0;
  v83 = v17;
  v19 = sub_1000035B4(&qword_10010CE00, type metadata accessor for GameDashboardLaunchContext, (uint64_t)&protocol conformance descriptor for GameDashboardLaunchContext);
  v78 = (char *)&type metadata for () + 8;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v83, v18, sub_100026150, &v70 - 4, (char *)&type metadata for () + 8, v19);
  v71 = v2;
  swift_release(v18);
  v72 = (uint64_t *)(a1 + *(int *)(v16 + 28));
  v20 = v72[1];
  v83 = *v72;
  v21 = v83;
  v84 = v20;
  v22 = v20;
  v77 = v20;
  v23 = sub_100003304(&qword_10010DE20);
  State.wrappedValue.getter(&v81);
  v24 = v81;
  v83 = v21;
  v84 = v22;
  State.wrappedValue.getter(&v81);
  v25 = v81;
  v26 = swift_getKeyPath(&unk_1000C9938);
  v83 = v25;
  v27 = sub_1000035B4(&qword_10010DE28, type metadata accessor for AccessPointModel, (uint64_t)&unk_1000C97DC);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v83, v26, v27);
  swift_release(v26);
  v28 = v25 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container;
  swift_beginAccess(v25 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container, &v83, 0, 0);
  sub_100007878(v28, (uint64_t)v7, type metadata accessor for AccessPointContainer);
  swift_release(v25);
  v29 = v73;
  v30 = *(_QWORD *)&v7[*(int *)(v73 + 28)];
  swift_bridgeObjectRetain(v30);
  sub_1000106F0((uint64_t)v7, type metadata accessor for AccessPointContainer);
  v31 = *(_QWORD *)(v30 + 16);
  swift_bridgeObjectRelease(v30);
  v32 = swift_getKeyPath(&unk_1000C9910);
  __chkstk_darwin(v32);
  *(&v70 - 2) = v24;
  *(&v70 - 1) = v31 - 1;
  v81 = v24;
  v33 = v71;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v81, v32, sub_10004B17C, &v70 - 4, v78, v27);
  v71 = v33;
  swift_release(v24);
  swift_release(v32);
  v34 = v77;
  v81 = v21;
  v82 = v77;
  v70 = v23;
  State.wrappedValue.getter(&v79);
  v35 = v79;
  v81 = v21;
  v82 = v34;
  State.wrappedValue.getter(&v79);
  v36 = v79;
  v37 = swift_getKeyPath(&unk_1000C9938);
  v81 = v36;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v81, v37, v27);
  swift_release(v37);
  v38 = v36 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container;
  swift_beginAccess(v36 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container, &v81, 0, 0);
  sub_100007878(v38, (uint64_t)v7, type metadata accessor for AccessPointContainer);
  swift_release(v36);
  v39 = v7[*(int *)(v29 + 24)];
  sub_1000106F0((uint64_t)v7, type metadata accessor for AccessPointContainer);
  if (v39 >= 6)
    v40 = 1;
  else
    v40 = 0x20202010102uLL >> (8 * v39);
  v41 = swift_getKeyPath(&unk_1000C9870);
  __chkstk_darwin(v41);
  *(&v70 - 2) = v35;
  *((_BYTE *)&v70 - 8) = v40;
  v79 = v35;
  v42 = v71;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v79, v41, sub_10004B168, &v70 - 4, v78, v27);
  v73 = v42;
  swift_release(v35);
  swift_release(v41);
  v79 = v21;
  v80 = v77;
  State.wrappedValue.getter(&v85);
  v43 = v85;
  v44 = swift_getKeyPath(&unk_1000C9A80);
  v79 = v43;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v79, v44, v27);
  swift_release(v44);
  v79 = v43;
  v45 = swift_getKeyPath(&unk_1000C9A80);
  ObservationRegistrar.willSet<A, B>(_:keyPath:)(&v79, v45, v27);
  swift_release(v45);
  *(_BYTE *)(v43 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__collapsed) = (*(_BYTE *)(v43
                                                                                             + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__collapsed) & 1) == 0;
  v79 = v43;
  v46 = swift_getKeyPath(&unk_1000C9A80);
  ObservationRegistrar.didSet<A, B>(_:keyPath:)(&v79, v46, v27);
  swift_release(v43);
  swift_release(v46);
  v48 = v72[1];
  v79 = *v72;
  v47 = v79;
  v80 = v48;
  State.wrappedValue.getter(&v85);
  v49 = v85;
  v50 = swift_getKeyPath(&unk_1000C9870);
  v79 = v49;
  v77 = v27;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v79, v50, v27);
  swift_release(v50);
  LODWORD(v50) = *(unsigned __int8 *)(v49 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__state);
  swift_release(v49);
  v79 = v47;
  v80 = v48;
  State.wrappedValue.getter(&v85);
  if ((_DWORD)v50 == 2)
  {
    v51 = v85;
    v52 = swift_getKeyPath(&unk_1000C9A28);
    __chkstk_darwin(v52);
    *(&v70 - 2) = v51;
    *((_BYTE *)&v70 - 8) = 0;
    v79 = v51;
    v54 = v77;
    v53 = v78;
    v55 = v73;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v79, v52, sub_10004B140, &v70 - 4, v78, v77);
    v73 = v55;
    swift_release(v51);
    swift_release(v52);
    v79 = v47;
    v80 = v48;
    State.wrappedValue.getter(&v85);
    v56 = v85;
    v57 = v74;
    v58 = v75;
    v59 = v76;
    (*(void (**)(char *, _QWORD, uint64_t))(v75 + 104))(v74, enum case for AccessPointAnchoring.topCentered(_:), v76);
    v60 = swift_getKeyPath(&unk_1000C9988);
    __chkstk_darwin(v60);
    v61 = &v70 - 4;
    *(&v70 - 2) = v56;
    *(&v70 - 1) = (uint64_t)v57;
    v79 = v56;
    v62 = &v79;
    v63 = v60;
    v64 = v53;
  }
  else
  {
    v56 = v85;
    v79 = v47;
    v80 = v48;
    State.wrappedValue.getter(&v85);
    v65 = v85;
    v66 = swift_getKeyPath(&unk_1000C9960);
    v79 = v65;
    v54 = v77;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v79, v66, v77);
    swift_release(v66);
    v67 = v65 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__destAnchor;
    swift_beginAccess(v65 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__destAnchor, &v79, 0, 0);
    v57 = v74;
    v58 = v75;
    v59 = v76;
    (*(void (**)(char *, uint64_t, uint64_t))(v75 + 16))(v74, v67, v76);
    swift_release(v65);
    v60 = swift_getKeyPath(&unk_1000C9988);
    __chkstk_darwin(v60);
    v61 = &v70 - 4;
    *(&v70 - 2) = v56;
    *(&v70 - 1) = (uint64_t)v57;
    v85 = v56;
    v62 = &v85;
    v63 = v60;
    v64 = v78;
  }
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v62, v63, sub_10004B104, v61, v64, v54);
  v68 = swift_release(v60);
  (*(void (**)(char *, uint64_t, __n128))(v58 + 8))(v57, v59, v68);
  *(_QWORD *)&result = swift_release(v56).n128_u64[0];
  return result;
}

uint64_t sub_100045D50@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t KeyPath;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t OpaqueTypeConformance2;
  uint64_t v56;
  __n128 v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  _QWORD v71[3];
  __int128 v72;
  unint64_t v73;

  v2 = v1;
  v66 = a1;
  v3 = type metadata accessor for AccessPointContainer(0);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = type metadata accessor for UnevenRoundedRectangle(0, v4);
  __chkstk_darwin(v61);
  v8 = (uint64_t *)((char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = sub_100003304(&qword_10010E1B0);
  __chkstk_darwin(v9);
  v11 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = sub_100003304(&qword_10010E1B8);
  __chkstk_darwin(v60);
  v13 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = sub_100003304(&qword_10010E1C0);
  __chkstk_darwin(v62);
  v15 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100003304(&qword_10010E1C8);
  v17 = *(_QWORD *)(v16 - 8);
  v64 = v16;
  v65 = v17;
  __chkstk_darwin(v16);
  v63 = (char *)&v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v11 = static VerticalAlignment.center.getter(v19);
  *((_QWORD *)v11 + 1) = 0;
  v11[16] = 0;
  v20 = sub_100003304(&qword_10010E1D0);
  sub_100046394(v1, (uint64_t)&v11[*(int *)(v20 + 44)]);
  v72 = *(_OWORD *)(v1 + 16);
  v73 = *(_QWORD *)(v1 + 32);
  v67 = *(_OWORD *)(v1 + 16);
  v68 = *(_QWORD *)(v1 + 32);
  v59 = sub_100003304(&qword_10010E1D8);
  Binding.wrappedValue.getter(v71, v59);
  v21 = v71[0];
  KeyPath = swift_getKeyPath(&unk_1000C9938);
  *(_QWORD *)&v67 = v21;
  v23 = sub_1000035B4(&qword_10010DE28, type metadata accessor for AccessPointModel, (uint64_t)&unk_1000C97DC);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v67, KeyPath, v23);
  swift_release(KeyPath);
  v24 = v21 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container;
  swift_beginAccess(v21 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container, v71, 0, 0);
  sub_100007878(v24, (uint64_t)v6, type metadata accessor for AccessPointContainer);
  swift_release(v21);
  v67 = *(_OWORD *)(v2 + 40);
  sub_100003304(&qword_10010CD58);
  State.wrappedValue.getter(&v70);
  AccessPointContainer.cornerRadii(for:)(v70);
  v26 = v25;
  v28 = v27;
  v30 = v29;
  v32 = v31;
  sub_1000106F0((uint64_t)v6, type metadata accessor for AccessPointContainer);
  v33 = (char *)v8 + *(int *)(v61 + 20);
  v34 = enum case for RoundedCornerStyle.continuous(_:);
  v35 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 104))(v33, v34, v35);
  *v8 = v26;
  v8[1] = v28;
  v8[2] = v30;
  v8[3] = v32;
  v36 = (uint64_t)&v13[*(int *)(v60 + 36)];
  sub_100007878((uint64_t)v8, v36, (uint64_t (*)(_QWORD))&type metadata accessor for UnevenRoundedRectangle);
  *(_BYTE *)(v36 + *(int *)(sub_100003304(&qword_10010E1E0) + 36)) = 0;
  sub_100010CBC((uint64_t)v11, (uint64_t)v13, &qword_10010E1B0);
  sub_1000106F0((uint64_t)v8, (uint64_t (*)(_QWORD))&type metadata accessor for UnevenRoundedRectangle);
  v37 = sub_100010ED0((uint64_t)v11, &qword_10010E1B0);
  v38 = static Color.white.getter(v37);
  sub_100010CBC((uint64_t)v13, (uint64_t)v15, &qword_10010E1B8);
  v39 = v62;
  *(_QWORD *)&v15[*(int *)(v62 + 36)] = v38;
  sub_100010ED0((uint64_t)v13, &qword_10010E1B8);
  v67 = v72;
  v68 = v73;
  Binding.wrappedValue.getter(&v70, v59);
  v40 = v70;
  v41 = swift_getKeyPath(&unk_1000C9910);
  *(_QWORD *)&v67 = v40;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v67, v41, v23);
  swift_release(v41);
  v42 = *(_QWORD *)(v40 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__highlightIndex);
  swift_release(v40);
  *(_QWORD *)&v67 = v42;
  v43 = swift_allocObject(&unk_1000FE4E8, 104, 7);
  v44 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v43 + 48) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v43 + 64) = v44;
  *(_OWORD *)(v43 + 80) = *(_OWORD *)(v2 + 64);
  *(_QWORD *)(v43 + 96) = *(_QWORD *)(v2 + 80);
  v45 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v43 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v43 + 32) = v45;
  sub_10004AAD0((uint64_t *)v2);
  v46 = sub_10004AB5C();
  v47 = v63;
  v48 = v39;
  View.onChange<A>(of:initial:_:)(&v67, 0, sub_10004AAC8, v43, v39, &type metadata for Int, v46, &protocol witness table for Int);
  swift_release(v43);
  sub_100010ED0((uint64_t)v15, &qword_10010E1C0);
  v67 = *(_OWORD *)(v2 + 72);
  sub_100003304(&qword_10010E208);
  State.wrappedValue.getter(&v70);
  v49 = v70;
  v50 = swift_getKeyPath(&unk_1000C9C90);
  *(_QWORD *)&v67 = v49;
  v51 = sub_1000035B4(&qword_10010E210, type metadata accessor for AccessPointHighlightComponent.GestureHandler, (uint64_t)&unk_1000CBFC8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v67, v50, v51);
  swift_release(v50);
  LOBYTE(v42) = *(_BYTE *)(v49 + 16);
  swift_release(v49);
  LOBYTE(v70) = v42;
  v52 = swift_allocObject(&unk_1000FE510, 104, 7);
  v53 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v52 + 48) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v52 + 64) = v53;
  *(_OWORD *)(v52 + 80) = *(_OWORD *)(v2 + 64);
  *(_QWORD *)(v52 + 96) = *(_QWORD *)(v2 + 80);
  v54 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v52 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v52 + 32) = v54;
  sub_10004AAD0((uint64_t *)v2);
  *(_QWORD *)&v67 = v48;
  *((_QWORD *)&v67 + 1) = &type metadata for Int;
  v68 = v46;
  v69 = &protocol witness table for Int;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v67, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v56 = v64;
  View.onChange<A>(of:initial:_:)(&v70, 0, sub_10004AC88, v52, v64, &type metadata for Bool, OpaqueTypeConformance2, &protocol witness table for Bool);
  v57 = swift_release(v52);
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v65 + 8))(v47, v56, v57);
}

_QWORD *sub_100046394@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t KeyPath;
  uint64_t v21;
  uint64_t v22;
  _QWORD *result;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  __n128 v48;
  uint64_t OpaqueTypeConformance2;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  __int128 *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  _QWORD v75[4];

  v69 = a2;
  v65 = sub_100003304(&qword_10010E228);
  __chkstk_darwin(v65);
  v66 = (char *)&v59 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = type metadata accessor for AccessPointContainer(0);
  __chkstk_darwin(v70);
  v5 = (char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = sub_100003304(&qword_10010CD68);
  v60 = *(_QWORD *)(v62 - 8);
  __chkstk_darwin(v62);
  v7 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003304(&qword_10010E230);
  v64 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v59 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v63 = (char *)&v59 - v11;
  v12 = sub_100003304(&qword_10010E238);
  __chkstk_darwin(v12);
  v68 = (uint64_t)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v67 = (char *)&v59 - v15;
  v16 = (__int128 *)(a1 + 40);
  v71 = *(_OWORD *)(a1 + 40);
  sub_100003304(&qword_10010CD58);
  State.wrappedValue.getter(v75);
  v17 = (__int128 *)(a1 + 16);
  v61 = (__int128 *)(a1 + 16);
  if ((v75[0] & 1) == 0)
  {
    v71 = *v17;
    v72 = *(_QWORD *)(a1 + 32);
    v18 = sub_100003304(&qword_10010E1D8);
    Binding.wrappedValue.getter(v75, v18);
    v19 = v75[0];
    KeyPath = swift_getKeyPath(&unk_1000C9938);
    *(_QWORD *)&v71 = v19;
    v21 = sub_1000035B4(&qword_10010DE28, type metadata accessor for AccessPointModel, (uint64_t)&unk_1000C97DC);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v71, KeyPath, v21);
    swift_release(KeyPath);
    v22 = v19 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container;
    swift_beginAccess(v19 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container, v75, 0, 0);
    sub_100007878(v22, (uint64_t)v5, type metadata accessor for AccessPointContainer);
    swift_release(v19);
    v71 = *v16;
    result = State.wrappedValue.getter(&v74);
    if ((v74 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v24 = *(_QWORD *)&v5[*(int *)(v70 + 28)];
      if (v74 < *(_QWORD *)(v24 + 16))
      {
        sub_100024C64(v24 + 40 * v74 + 32, (uint64_t)&v71);
        v25 = sub_100024CA8();
        ComponentView.init(_:content:)(&v71, sub_1000C0B90, 0, &type metadata for _ComponentContentByType, v25);
        sub_1000106F0((uint64_t)v5, type metadata accessor for AccessPointContainer);
        v71 = *(_OWORD *)(a1 + 72);
        sub_100003304(&qword_10010E208);
        State.wrappedValue.getter(&v74);
        v26 = v74;
        v27 = type metadata accessor for AccessPointHighlightComponent.GestureHandler(0);
        v28 = sub_100011054(&qword_10010CD80, &qword_10010CD68, (uint64_t)&protocol conformance descriptor for ComponentView<A>);
        v29 = sub_1000035B4(&qword_10010E210, type metadata accessor for AccessPointHighlightComponent.GestureHandler, (uint64_t)&unk_1000CBFC8);
        v30 = v59;
        v31 = v62;
        View.environment<A>(_:)(v26, v62, v27, v28, v29);
        v32 = swift_release(v26);
        (*(void (**)(char *, uint64_t, __n128))(v60 + 8))(v7, v31, v32);
        v34 = v63;
        v33 = v64;
        (*(void (**)(char *, char *, uint64_t))(v64 + 32))(v63, v30, v8);
        v35 = v66;
        (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v66, v34, v8);
        v36 = v35;
        v37 = v65;
        v38 = 0;
LABEL_8:
        swift_storeEnumTagMultiPayload(v36, v37, v38);
        *(_QWORD *)&v71 = v31;
        *((_QWORD *)&v71 + 1) = v27;
        v72 = v28;
        v73 = v29;
        OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v71, &opaque type descriptor for <<opaque return type of View.environment<A>(_:)>>, 1);
        v50 = (uint64_t)v67;
        _ConditionalContent<>.init(storage:)(v35, v8, v8, OpaqueTypeConformance2, OpaqueTypeConformance2);
        (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v8);
        v71 = *v61;
        v72 = *((_QWORD *)v61 + 2);
        v51 = sub_100003304(&qword_10010E1D8);
        Binding.wrappedValue.getter(&v74, v51);
        v52 = v74;
        v53 = swift_getKeyPath(&unk_1000C9A80);
        *(_QWORD *)&v71 = v52;
        v54 = sub_1000035B4(&qword_10010DE28, type metadata accessor for AccessPointModel, (uint64_t)&unk_1000C97DC);
        ObservationRegistrar.access<A, B>(_:keyPath:)(&v71, v53, v54);
        swift_release(v53);
        v55 = *(_BYTE *)(v52 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__collapsed);
        swift_release(v52);
        v56 = v68;
        sub_100010CBC(v50, v68, &qword_10010E238);
        v57 = v69;
        sub_100010CBC(v56, v69, &qword_10010E238);
        v58 = v57 + *(int *)(sub_100003304(&qword_10010E240) + 48);
        *(_QWORD *)v58 = 0;
        *(_BYTE *)(v58 + 8) = 0;
        *(_BYTE *)(v58 + 9) = v55;
        sub_100010ED0(v50, &qword_10010E238);
        return (_QWORD *)sub_100010ED0(v56, &qword_10010E238);
      }
    }
    __break(1u);
    goto LABEL_11;
  }
  v71 = *v17;
  v72 = *(_QWORD *)(a1 + 32);
  v39 = sub_100003304(&qword_10010E1D8);
  Binding.wrappedValue.getter(v75, v39);
  v40 = v75[0];
  v41 = swift_getKeyPath(&unk_1000C9938);
  *(_QWORD *)&v71 = v40;
  v42 = sub_1000035B4(&qword_10010DE28, type metadata accessor for AccessPointModel, (uint64_t)&unk_1000C97DC);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v71, v41, v42);
  swift_release(v41);
  v43 = v40 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container;
  swift_beginAccess(v40 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container, v75, 0, 0);
  sub_100007878(v43, (uint64_t)v5, type metadata accessor for AccessPointContainer);
  swift_release(v40);
  v71 = *v16;
  result = State.wrappedValue.getter(&v74);
  if ((v74 & 0x8000000000000000) != 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v44 = *(_QWORD *)&v5[*(int *)(v70 + 28)];
  if (v74 < *(_QWORD *)(v44 + 16))
  {
    sub_100024C64(v44 + 40 * v74 + 32, (uint64_t)&v71);
    v45 = sub_100024CA8();
    ComponentView.init(_:content:)(&v71, sub_1000C0B90, 0, &type metadata for _ComponentContentByType, v45);
    sub_1000106F0((uint64_t)v5, type metadata accessor for AccessPointContainer);
    v71 = *(_OWORD *)(a1 + 72);
    sub_100003304(&qword_10010E208);
    State.wrappedValue.getter(&v74);
    v46 = v74;
    v27 = type metadata accessor for AccessPointHighlightComponent.GestureHandler(0);
    v28 = sub_100011054(&qword_10010CD80, &qword_10010CD68, (uint64_t)&protocol conformance descriptor for ComponentView<A>);
    v29 = sub_1000035B4(&qword_10010E210, type metadata accessor for AccessPointHighlightComponent.GestureHandler, (uint64_t)&unk_1000CBFC8);
    v47 = v59;
    v31 = v62;
    View.environment<A>(_:)(v46, v62, v27, v28, v29);
    v48 = swift_release(v46);
    (*(void (**)(char *, uint64_t, __n128))(v60 + 8))(v7, v31, v48);
    v34 = v63;
    v33 = v64;
    (*(void (**)(char *, char *, uint64_t))(v64 + 32))(v63, v47, v8);
    v35 = v66;
    (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v66, v34, v8);
    v36 = v35;
    v37 = v65;
    v38 = 1;
    goto LABEL_8;
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_100046B44(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[6];

  if (qword_10010BAD8 != -1)
    swift_once(&qword_10010BAD8, sub_100039708);
  __chkstk_darwin(qword_10010D8F8);
  v4[2] = a1;
  return withAnimation<A>(_:_:)(v2, sub_10004ADEC, v4, (char *)&type metadata for () + 8);
}

uint64_t sub_100046BDC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  v9 = *(_OWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 32);
  v2 = sub_100003304(&qword_10010E1D8);
  Binding.wrappedValue.getter(&v11, v2);
  v3 = v11;
  KeyPath = swift_getKeyPath(&unk_1000C9910);
  *(_QWORD *)&v9 = v3;
  v5 = sub_1000035B4(&qword_10010DE28, type metadata accessor for AccessPointModel, (uint64_t)&unk_1000C97DC);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(_QWORD *)(v3 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__highlightIndex);
  swift_release(v3);
  v9 = *(_OWORD *)(a1 + 40);
  v11 = v6;
  v7 = sub_100003304(&qword_10010CD58);
  return State.wrappedValue.setter(&v11, v7);
}

void sub_100046CD4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t *v16;
  __n128 v17;
  _BYTE v18[16];
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v2 = type metadata accessor for AnimationCompletionCriteria(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v18[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = *(_OWORD *)(a1 + 16);
  v20 = *(_QWORD *)(a1 + 32);
  v6 = sub_100003304(&qword_10010E1D8);
  Binding.wrappedValue.getter(&v21, v6);
  v7 = v21;
  KeyPath = swift_getKeyPath(&unk_1000C9870);
  *(_QWORD *)&v19 = v7;
  v9 = sub_1000035B4(&qword_10010DE28, type metadata accessor for AccessPointModel, (uint64_t)&unk_1000C97DC);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v19, KeyPath, v9);
  swift_release(KeyPath);
  v10 = *(unsigned __int8 *)(v7 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__state);
  swift_release(v7);
  if (!v10)
  {
    if (qword_10010BAE0 != -1)
      v11 = swift_once(&qword_10010BAE0, sub_10003973C);
    v12 = qword_10010D900;
    __chkstk_darwin(v11);
    *(_QWORD *)&v18[-16] = a1;
    v13 = swift_allocObject(&unk_1000FE538, 104, 7);
    v14 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v13 + 48) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v13 + 64) = v14;
    *(_OWORD *)(v13 + 80) = *(_OWORD *)(a1 + 64);
    *(_QWORD *)(v13 + 96) = *(_QWORD *)(a1 + 80);
    v15 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v13 + 16) = *(_OWORD *)a1;
    *(_OWORD *)(v13 + 32) = v15;
    v16 = sub_10004AAD0((uint64_t *)a1);
    static AnimationCompletionCriteria.logicallyComplete.getter(v16);
    withAnimation<A>(_:completionCriteria:_:completion:)(v12, v5, sub_10004AC90, &v18[-32], sub_10004AD08, v13, (char *)&type metadata for () + 8);
    v17 = swift_release(v13);
    (*(void (**)(_BYTE *, uint64_t, __n128))(v3 + 8))(v5, v2, v17);
  }
}

double sub_100046ECC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  double result;
  _QWORD v6[3];
  char v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  v8 = *(_OWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 32);
  v1 = sub_100003304(&qword_10010E1D8);
  Binding.wrappedValue.getter(&v10, v1);
  v2 = v10;
  KeyPath = swift_getKeyPath(&unk_1000C9870);
  v6[2] = v2;
  v7 = 3;
  *(_QWORD *)&v8 = v2;
  v4 = sub_1000035B4(&qword_10010DE28, type metadata accessor for AccessPointModel, (uint64_t)&unk_1000C97DC);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_10004B168, v6, (char *)&type metadata for () + 8, v4);
  swift_release(v2);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

void sub_100046FB0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[2];
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char v58[16];
  uint64_t v59;
  char v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;

  v54 = type metadata accessor for AccessPointAnchoring(0);
  v53 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v52 = (char *)v51 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100003304(&qword_10010EB20);
  __chkstk_darwin(v3);
  v56 = (char *)v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AccessPointContainer(0);
  __chkstk_darwin(v5);
  v7 = (char *)v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = *((_OWORD *)a1 + 1);
  v69 = a1[4];
  v66 = *((_OWORD *)a1 + 1);
  v67 = a1[4];
  v8 = sub_100003304(&qword_10010E1D8);
  Binding.wrappedValue.getter(&v64, v8);
  v9 = v64;
  KeyPath = swift_getKeyPath(&unk_1000C9A28);
  v59 = v9;
  v60 = 0;
  *(_QWORD *)&v66 = v9;
  v11 = sub_1000035B4(&qword_10010DE28, type metadata accessor for AccessPointModel, (uint64_t)&unk_1000C97DC);
  v57 = (char *)&type metadata for () + 8;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v66, KeyPath, sub_10004B140, v58, (char *)&type metadata for () + 8, v11);
  swift_release(v9);
  swift_release(KeyPath);
  v66 = v68;
  v67 = v69;
  Binding.wrappedValue.getter(&v64, v8);
  v12 = v64;
  v13 = swift_getKeyPath(&unk_1000C9938);
  *(_QWORD *)&v66 = v12;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v66, v13, v11);
  swift_release(v13);
  v14 = v12 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container;
  swift_beginAccess(v12 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container, &v66, 0, 0);
  sub_100007878(v14, (uint64_t)v7, type metadata accessor for AccessPointContainer);
  swift_release(v12);
  v55 = v5;
  v15 = v7[*(int *)(v5 + 24)];
  sub_1000106F0((uint64_t)v7, type metadata accessor for AccessPointContainer);
  if (v15 <= 5 && ((1 << v15) & 0x39) != 0)
  {
    v16 = *a1;
    v17 = *((_BYTE *)a1 + 8);
    v18 = swift_retain(v16);
    v19 = sub_100030D7C(v18, v17);
    swift_release(v16);
    v20 = swift_getKeyPath(&unk_1000C99D8);
    *(_QWORD *)&v64 = v19;
    v21 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v64, v20, v21);
    swift_release(v20);
    v23 = *(_QWORD *)(v19 + 16);
    v22 = *(_QWORD *)(v19 + 24);
    swift_bridgeObjectRetain(v22);
    swift_release(v19);
    if (v22)
    {
      v24 = type metadata accessor for TaskPriority(0);
      v25 = (uint64_t)v56;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v56, 1, 1, v24);
      v26 = type metadata accessor for MainActor(0);
      v27 = static MainActor.shared.getter(v26);
      v28 = (_QWORD *)swift_allocObject(&unk_1000FE560, 48, 7);
      v28[2] = v27;
      v28[3] = &protocol witness table for MainActor;
      v28[4] = v23;
      v28[5] = v22;
      v29 = sub_100028240(v25, (uint64_t)&unk_10010E220, (uint64_t)v28);
      swift_release(v29);
    }
  }
  else
  {
    v64 = v68;
    v65 = v69;
    Binding.wrappedValue.getter(&v61, v8);
    v56 = (char *)v61;
    v64 = v68;
    v65 = v69;
    Binding.wrappedValue.getter(&v61, v8);
    v30 = v61;
    v31 = swift_getKeyPath(&unk_1000C9960);
    *(_QWORD *)&v64 = v30;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v64, v31, v11);
    swift_release(v31);
    v32 = v30 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__destAnchor;
    swift_beginAccess(v30 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__destAnchor, &v64, 0, 0);
    v33 = v53;
    v34 = v52;
    v35 = v54;
    (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v52, v32, v54);
    swift_release(v30);
    v36 = swift_getKeyPath(&unk_1000C9988);
    v51[1] = v51;
    __chkstk_darwin(v36);
    v38 = v56;
    v37 = v57;
    v51[-2] = v56;
    v51[-1] = v34;
    *(_QWORD *)&v61 = v38;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v61, v36, sub_10004B104, &v51[-4], v37, v11);
    v39 = swift_release(v36);
    (*(void (**)(char *, uint64_t, __n128))(v33 + 8))(v34, v35, v39);
    swift_release(v56);
    v61 = v68;
    v62 = v69;
    Binding.wrappedValue.getter(&v63, v8);
    v40 = v63;
    v41 = swift_getKeyPath(&unk_1000C9870);
    __chkstk_darwin(v41);
    v51[-2] = v40;
    LOBYTE(v51[-1]) = 1;
    *(_QWORD *)&v61 = v40;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v61, v41, sub_10004B168, &v51[-4], v57, v11);
    swift_release(v40);
    swift_release(v41);
    v61 = v68;
    v62 = v69;
    Binding.wrappedValue.getter(&v63, v8);
    v42 = v63;
    v61 = v68;
    v62 = v69;
    Binding.wrappedValue.getter(&v63, v8);
    v43 = v63;
    v44 = swift_getKeyPath(&unk_1000C9938);
    *(_QWORD *)&v61 = v43;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v61, v44, v11);
    swift_release(v44);
    v45 = v43 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container;
    swift_beginAccess(v43 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container, &v61, 0, 0);
    sub_100007878(v45, (uint64_t)v7, type metadata accessor for AccessPointContainer);
    swift_release(v43);
    v46 = *(_QWORD *)&v7[*(int *)(v55 + 28)];
    swift_bridgeObjectRetain(v46);
    sub_1000106F0((uint64_t)v7, type metadata accessor for AccessPointContainer);
    v47 = *(_QWORD *)(v46 + 16);
    swift_bridgeObjectRelease(v46);
    v48 = v47 - 1;
    v49 = swift_getKeyPath(&unk_1000C9910);
    __chkstk_darwin(v49);
    v51[-2] = v42;
    v51[-1] = v48;
    v63 = v42;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v63, v49, sub_10004B17C, &v51[-4], v57, v11);
    swift_release(v42);
    swift_release(v49);
    if (qword_10010BAB0 != -1)
      swift_once(&qword_10010BAB0, sub_100039614);
    __chkstk_darwin(qword_10010D8D0);
    v51[-2] = a1;
    withAnimation<A>(_:_:)(v50, sub_10004AD10, &v51[-4], (char *)&type metadata for () + 8);
  }
}

uint64_t sub_100047730(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[2] = a4;
  v5[3] = a5;
  v6 = type metadata accessor for MainActor(0);
  v5[4] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  v5[5] = v7;
  v5[6] = v8;
  return swift_task_switch(sub_10004779C, v7, v8);
}

uint64_t sub_10004779C()
{
  uint64_t v0;
  uint64_t v1;

  if (qword_10010BAF0 != -1)
    swift_once(&qword_10010BAF0, sub_100051BCC);
  v1 = qword_1001232F8;
  *(_QWORD *)(v0 + 56) = qword_1001232F8;
  return swift_task_switch(sub_100047800, v1, 0);
}

uint64_t sub_100047800()
{
  _QWORD *v0;

  sub_100052718(v0[2], v0[3], 1);
  return swift_task_switch(sub_100047840, v0[5], v0[6]);
}

uint64_t sub_100047840()
{
  uint64_t v0;
  uint64_t v1;

  v1 = qword_1001232F8;
  *(_QWORD *)(v0 + 64) = qword_1001232F8;
  return swift_task_switch(sub_10004785C, v1, 0);
}

uint64_t sub_10004785C()
{
  unint64_t *v0;

  sub_100050FF4(v0[2], v0[3]);
  return swift_task_switch(sub_100023524, v0[5], v0[6]);
}

double sub_100047898(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  double result;
  _QWORD v6[3];
  char v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  v8 = *(_OWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 32);
  v1 = sub_100003304(&qword_10010E1D8);
  Binding.wrappedValue.getter(&v10, v1);
  v2 = v10;
  KeyPath = swift_getKeyPath(&unk_1000C9A28);
  v6[2] = v2;
  v7 = 1;
  *(_QWORD *)&v8 = v2;
  v4 = sub_1000035B4(&qword_10010DE28, type metadata accessor for AccessPointModel, (uint64_t)&unk_1000C97DC);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_10004B140, v6, (char *)&type metadata for () + 8, v4);
  swift_release(v2);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_10004797C@<X0>(uint64_t a1@<X8>)
{
  return sub_100045D50(a1);
}

uint64_t sub_1000479C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  double v20;
  int v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t KeyPath;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t OpaqueTypeConformance2;
  char *v46;
  uint64_t v47;
  __n128 v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  unint64_t v66;
  uint64_t v67;
  _OWORD v68[3];

  v3 = v2;
  v54 = a1;
  v63 = a2;
  v4 = type metadata accessor for CollapsibleContentFrame(0);
  v55 = *(_QWORD *)(v4 - 8);
  v5 = *(_QWORD *)(v55 + 64);
  __chkstk_darwin(v4);
  v58 = (uint64_t)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DynamicTypeSize(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (uint64_t *)((char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_100003304(&qword_10010E248);
  __chkstk_darwin(v10);
  v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100003304(&qword_10010E250);
  v61 = *(_QWORD *)(v13 - 8);
  v62 = v13;
  __chkstk_darwin(v13);
  v60 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = sub_100003304(&qword_10010E258);
  v57 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59);
  v56 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = v2 + *(int *)(v4 + 24);
  v17 = *(_BYTE *)v16;
  v18 = *(_QWORD *)(v16 + 8);
  LOBYTE(v68[0]) = v17;
  *((_QWORD *)&v68[0] + 1) = v18;
  sub_100003304(&qword_10010CDA0);
  v19 = State.wrappedValue.getter(&v64);
  v20 = 0.0;
  v21 = v64;
  if (v64 == 1)
  {
    sub_100030ED8(v9);
    v22 = sub_100080324((uint64_t)v9);
    v19 = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
    v20 = v22;
  }
  v23 = static Alignment.center.getter(v19);
  _FrameLayout.init(width:height:alignment:)(v68, *(_QWORD *)&v20, v21 ^ 1u, 0, 1, v23, v24);
  v25 = sub_100003304(&qword_10010E260);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v12, v54, v25);
  v26 = v10;
  v27 = &v12[*(int *)(v10 + 36)];
  v28 = v68[1];
  *(_OWORD *)v27 = v68[0];
  *((_OWORD *)v27 + 1) = v28;
  *((_OWORD *)v27 + 2) = v68[2];
  v29 = v3 + *(int *)(v4 + 20);
  v64 = *(_QWORD *)v29;
  v65 = *(_OWORD *)(v29 + 8);
  v54 = sub_100003304(&qword_10010E1D8);
  Binding.wrappedValue.getter(&v67, v54);
  v30 = v67;
  KeyPath = swift_getKeyPath(&unk_1000C9870);
  v64 = v30;
  v53 = sub_1000035B4(&qword_10010DE28, type metadata accessor for AccessPointModel, (uint64_t)&unk_1000C97DC);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v64, KeyPath, v53);
  swift_release(KeyPath);
  v32 = *(_BYTE *)(v30 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__state);
  swift_release(v30);
  LOBYTE(v64) = v32;
  v33 = v58;
  sub_100007878(v3, v58, type metadata accessor for CollapsibleContentFrame);
  v34 = *(unsigned __int8 *)(v55 + 80);
  v35 = (v34 + 16) & ~v34;
  v55 = v35 + v5;
  v52 = v34 | 7;
  v36 = swift_allocObject(&unk_1000FE588, v35 + v5, v34 | 7);
  sub_100010F0C(v33, v36 + v35, type metadata accessor for CollapsibleContentFrame);
  v37 = sub_10004AE0C();
  v51 = v3;
  v38 = v37;
  v39 = sub_10003C628();
  v40 = v60;
  View.onChange<A>(of:initial:_:)(&v64, 0, sub_10004AE08, v36, v26, &type metadata for AccessPointModel.AnimationState, v38, v39);
  swift_release(v36);
  sub_100010ED0((uint64_t)v12, &qword_10010E248);
  v64 = *(_QWORD *)v29;
  v65 = *(_OWORD *)(v29 + 8);
  Binding.wrappedValue.getter(&v67, v54);
  v41 = v67;
  v42 = swift_getKeyPath(&unk_1000C9910);
  v64 = v41;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v64, v42, v53);
  swift_release(v42);
  v43 = *(_QWORD *)(v41 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__highlightIndex);
  swift_release(v41);
  v67 = v43;
  sub_100007878(v51, v33, type metadata accessor for CollapsibleContentFrame);
  v44 = swift_allocObject(&unk_1000FE5B0, v55, v52);
  sub_100010F0C(v33, v44 + v35, type metadata accessor for CollapsibleContentFrame);
  v64 = v26;
  *(_QWORD *)&v65 = &type metadata for AccessPointModel.AnimationState;
  *((_QWORD *)&v65 + 1) = v38;
  v66 = v39;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v64, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v46 = v56;
  v47 = v62;
  View.onChange<A>(of:initial:_:)(&v67, 0, sub_10004AE08, v44, v62, &type metadata for Int, OpaqueTypeConformance2, &protocol witness table for Int);
  v48 = swift_release(v44);
  (*(void (**)(char *, uint64_t, __n128))(v61 + 8))(v40, v47, v48);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v57 + 32))(v63, v46, v59);
}

uint64_t sub_100047F18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  int v18;
  int v19;
  _BYTE *v20;
  char v21;
  uint64_t v22;
  int v23;
  uint64_t result;
  uint64_t v25;
  _BYTE v26[16];
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  __int128 v31;

  v1 = v0;
  v2 = type metadata accessor for CollapsibleContentFrame(0);
  __chkstk_darwin(v2);
  v4 = &v26[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for AccessPointContainer(0);
  __chkstk_darwin(v5);
  v7 = &v26[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = v0 + *(int *)(v2 + 20);
  v30 = *(_QWORD *)v8;
  v31 = *(_OWORD *)(v8 + 8);
  v9 = sub_100003304(&qword_10010E1D8);
  Binding.wrappedValue.getter(&v27, v9);
  v10 = v27;
  KeyPath = swift_getKeyPath(&unk_1000C9938);
  v30 = v10;
  v12 = sub_1000035B4(&qword_10010DE28, type metadata accessor for AccessPointModel, (uint64_t)&unk_1000C97DC);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v30, KeyPath, v12);
  swift_release(KeyPath);
  v13 = v10 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container;
  swift_beginAccess(v10 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container, &v30, 0, 0);
  sub_100007878(v13, (uint64_t)v7, type metadata accessor for AccessPointContainer);
  v14 = swift_getKeyPath(&unk_1000C9910);
  v27 = v10;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v27, v14, v12);
  swift_release(v14);
  LODWORD(v14) = AccessPointContainer.isCollapsibleItem(at:)(*(_QWORD *)(v10
                                                                       + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__highlightIndex));
  sub_1000106F0((uint64_t)v7, type metadata accessor for AccessPointContainer);
  swift_release(v10);
  v15 = v0 + *(int *)(v2 + 24);
  v16 = *(_BYTE *)v15;
  v17 = *(_QWORD *)(v15 + 8);
  LOBYTE(v27) = v16;
  v28 = v17;
  sub_100003304(&qword_10010CDA0);
  State.wrappedValue.getter(&v29);
  v18 = v29;
  v19 = v14 ^ 1;
  sub_100007878(v1, (uint64_t)v4, type metadata accessor for CollapsibleContentFrame);
  if (v18 == 1 && (v19 & 1) != 0)
  {
    sub_1000106F0((uint64_t)v4, type metadata accessor for CollapsibleContentFrame);
  }
  else
  {
    v20 = &v4[*(int *)(v2 + 24)];
    v21 = *v20;
    v22 = *((_QWORD *)v20 + 1);
    LOBYTE(v27) = v21;
    v28 = v22;
    State.wrappedValue.getter(&v29);
    v23 = v29;
    result = sub_1000106F0((uint64_t)v4, type metadata accessor for CollapsibleContentFrame);
    if (((v23 | v19) & 1) != 0)
      return result;
  }
  if (qword_10010BAD0 != -1)
    swift_once(&qword_10010BAD0, sub_1000396D8);
  __chkstk_darwin(qword_10010D8F0);
  *(_QWORD *)&v26[-16] = v1;
  return withAnimation<A>(_:_:)(v25, sub_10004AFA4, &v26[-32], (char *)&type metadata for () + 8);
}

double sub_100048210(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  double result;
  BOOL v4;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for CollapsibleContentFrame(0) + 24) + 8);
  swift_retain(v1);
  v2 = sub_100003304(&qword_10010CDA0);
  State.wrappedValue.getter(&v5);
  v4 = (v5 & 1) == 0;
  State.wrappedValue.setter(&v4, v2);
  *(_QWORD *)&result = swift_release(v1).n128_u64[0];
  return result;
}

uint64_t sub_1000482C0()
{
  return EnvironmentValues.dynamicTypeSize.getter();
}

uint64_t sub_1000482E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for DynamicTypeSize(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return EnvironmentValues.dynamicTypeSize.setter(v4);
}

uint64_t sub_10004836C()
{
  return sub_10004859C((uint64_t (*)(uint64_t))sub_100043298);
}

uint64_t sub_100048384()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v20;

  v1 = (int *)type metadata accessor for AccessPointAnimationView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  swift_release(*(_QWORD *)(v0 + v4 + 8));
  v7 = (_QWORD *)(v0 + v4 + v1[6]);
  v8 = sub_100003304(&qword_10010D3A8);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  v10 = (_QWORD *)(v6 + v1[7]);
  swift_release(*v10);
  swift_release(v10[1]);
  swift_release(*(_QWORD *)(v6 + v1[8] + 8));
  swift_release(*(_QWORD *)(v6 + v1[9] + 8));
  v11 = (_QWORD *)(v6 + v1[10]);
  v12 = type metadata accessor for Game(0);
  if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12))
  {
    v20 = v5;
    swift_bridgeObjectRelease(v11[1]);
    swift_bridgeObjectRelease(v11[3]);
    swift_bridgeObjectRelease(v11[5]);
    v13 = (char *)v11 + *(int *)(v12 + 28);
    v14 = type metadata accessor for Date(0);
    v15 = *(_QWORD *)(v14 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v14);
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v11 + *(int *)(v12 + 60) + 8));
    v5 = v20;
  }
  swift_release(*(_QWORD *)(v6 + v1[11]));
  swift_release(*(_QWORD *)(v6 + v1[12]));
  v16 = (_QWORD *)(v6 + v1[13]);
  swift_release(*v16);
  swift_release(v16[1]);
  v17 = (char *)v16 + *(int *)(sub_100003304(&qword_10010CC18) + 32);
  v18 = sub_100003304(&qword_10010CC20);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100048590()
{
  return sub_10004859C((uint64_t (*)(uint64_t))sub_1000439D0);
}

uint64_t sub_10004859C(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AccessPointAnimationView(0) - 8) + 80);
  return a1(v1 + ((v2 + 16) & ~v2));
}

void sub_1000485D8(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000C9C90);
  v6 = v3;
  v5 = sub_1000035B4(&qword_10010E210, type metadata accessor for AccessPointHighlightComponent.GestureHandler, (uint64_t)&unk_1000CBFC8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v5);
  swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3 + 16);
}

double sub_100048664(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000C9C90);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_1000035B4(&qword_10010E210, type metadata accessor for AccessPointHighlightComponent.GestureHandler, (uint64_t)&unk_1000CBFC8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_10004ADD0, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

id sub_10004870C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  void *v6;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000C9B28);
  v8 = v3;
  v5 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(void **)(v3 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__gkGame);
  *a2 = v6;
  return v6;
}

void sub_1000487A0(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000C9B28);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  v6 = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_100049DEC, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);

}

uint64_t sub_100048854@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000C9AA8);
  v7 = v3;
  v5 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_unknownObjectWeakLoadStrong(v3 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__remoteAlertScene);
  *a2 = result;
  return result;
}

void sub_1000488EC(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000C9AA8);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  v6 = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_1000492D8, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);

}

uint64_t sub_1000489AC()
{
  return sub_1000489D0(&qword_10010BAA8, &qword_10010D8C8, (uint64_t)sub_100048F7C, (uint64_t)sub_1000395E8);
}

uint64_t sub_1000489D0(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;

  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AccessPointAnimationView(0) - 8) + 80);
  return sub_1000453F4(v4 + ((v9 + 16) & ~v9), a1, a2, a3, a4);
}

uint64_t sub_100048A44()
{
  return sub_10004859C((uint64_t (*)(uint64_t))sub_100044864);
}

uint64_t sub_100048A54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AccessPointAnimationView(0) - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  v4 = (_QWORD *)swift_task_alloc(dword_10010DE34);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_1000263E8;
  return sub_100044C34(v3);
}

uint64_t sub_100048AD4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AccessPointAnimationView(0) - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = v1 + ((v4 + 32) & ~v4);
  v8 = (_QWORD *)swift_task_alloc(dword_10010DE44);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_1000263E8;
  return sub_10003CFAC(a1, v5, v6, v7);
}

uint64_t sub_100048B5C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v20;

  v1 = (int *)type metadata accessor for AccessPointAnimationView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  v6 = v0 + v4;
  swift_release(*(_QWORD *)(v0 + v4 + 8));
  v7 = (_QWORD *)(v0 + v4 + v1[6]);
  v8 = sub_100003304(&qword_10010D3A8);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  v10 = (_QWORD *)(v6 + v1[7]);
  swift_release(*v10);
  swift_release(v10[1]);
  swift_release(*(_QWORD *)(v6 + v1[8] + 8));
  swift_release(*(_QWORD *)(v6 + v1[9] + 8));
  v11 = (_QWORD *)(v6 + v1[10]);
  v12 = type metadata accessor for Game(0);
  if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12))
  {
    v20 = v5;
    swift_bridgeObjectRelease(v11[1]);
    swift_bridgeObjectRelease(v11[3]);
    swift_bridgeObjectRelease(v11[5]);
    v13 = (char *)v11 + *(int *)(v12 + 28);
    v14 = type metadata accessor for Date(0);
    v15 = *(_QWORD *)(v14 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v14);
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v11 + *(int *)(v12 + 60) + 8));
    v5 = v20;
  }
  swift_release(*(_QWORD *)(v6 + v1[11]));
  swift_release(*(_QWORD *)(v6 + v1[12]));
  v16 = (_QWORD *)(v6 + v1[13]);
  swift_release(*v16);
  swift_release(v16[1]);
  v17 = (char *)v16 + *(int *)(sub_100003304(&qword_10010CC18) + 32);
  v18 = sub_100003304(&qword_10010CC20);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100048D70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AccessPointAnimationView(0) - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = v1 + ((v4 + 32) & ~v4);
  v8 = (_QWORD *)swift_task_alloc(dword_10010DE54);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_1000263E8;
  return sub_10003D4A0(a1, v5, v6, v7);
}

double sub_100048DF4()
{
  uint64_t v0;

  return sub_10003DB8C(*(_QWORD *)(v0 + 16));
}

void sub_100048E0C()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__state) = *(_BYTE *)(v0 + 24);
}

uint64_t sub_100048E24@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10003A3E0(a1, (uint64_t)&unk_1000C9960, &OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__destAnchor, a2);
}

uint64_t sub_100048E4C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10003A3E0(a1, (uint64_t)&unk_1000C9988, &OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__anchor, a2);
}

uint64_t sub_100048E74()
{
  uint64_t v0;

  return sub_10003A5B4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), &OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__anchor);
}

uint64_t sub_100048E94()
{
  uint64_t v0;

  return sub_10003A5B4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), &OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__destAnchor);
}

uint64_t sub_100048EB4()
{
  uint64_t v0;

  return sub_1000399E8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100048ECC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AccessPointContainer(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

void sub_100048F10()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__highlightIndex) = *(_QWORD *)(v0 + 24);
}

double sub_100048F24()
{
  uint64_t v0;

  return sub_100044A3C(*(_QWORD *)(v0 + 16));
}

void sub_100048F3C(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_10003A0A8(a1, (uint64_t)&unk_1000C99B0, &OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__accessPointHidden, a2);
}

void sub_100048F64()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__accessPointHidden) = *(_BYTE *)(v0 + 24);
}

void sub_100048F7C()
{
  uint64_t v0;

  sub_1000443DC(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100048FA0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_10010DE64);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_1000263E8;
  return sub_1000451A4(a1, v4, v5, v7, v6);
}

void sub_100049018(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_10003A0A8(a1, (uint64_t)&unk_1000C9A00, &OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__showDashboard, a2);
}

double sub_100049040()
{
  uint64_t v0;

  return sub_100043F80(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10004905C()
{
  return sub_10004859C((uint64_t (*)(uint64_t))sub_10004406C);
}

uint64_t sub_100049070(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_10010DE7C);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_1000263E8;
  return sub_1000442CC(a1, v4, v5, v7, v6);
}

void sub_1000490E8(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_10003A0A8(a1, (uint64_t)&unk_1000C9A28, &OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__reveal, a2);
}

void sub_100049110()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__reveal) = *(_BYTE *)(v0 + 24);
}

void sub_100049128()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__showDashboard) = *(_BYTE *)(v0 + 24);
}

uint64_t sub_100049148()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10004917C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_10010DE8C);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_1000263E8;
  return sub_100022F98(a1, v4, v5, v7, v6);
}

double sub_1000491F4()
{
  uint64_t v0;

  return sub_1000452B0(*(_QWORD *)(v0 + 16), (uint64_t)&unk_1000C9A80, &OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__collapsed);
}

uint64_t sub_100049220()
{
  return sub_10004859C((uint64_t (*)(uint64_t))sub_1000436A8);
}

void sub_10004922C(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_10003A0A8(a1, (uint64_t)&unk_1000C9A80, &OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__collapsed, a2);
}

uint64_t sub_100049260(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_10010DE64);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_1000252CC;
  return sub_1000451A4(a1, v4, v5, v7, v6);
}

uint64_t sub_1000492D8()
{
  uint64_t v0;

  return sub_1000A8F44(*(_QWORD *)(v0 + 16));
}

void sub_1000492F0()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__collapsed) = *(_BYTE *)(v0 + 24);
}

unint64_t sub_100049308()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010DED0;
  if (!qword_10010DED0)
  {
    v1 = sub_100006E54(&qword_10010DEC8);
    sub_100011054(&qword_10010DED8, &qword_10010DEE0, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10010DED0);
  }
  return result;
}

unint64_t sub_10004938C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010DEF0;
  if (!qword_10010DEF0)
  {
    v1 = sub_100006E54(&qword_10010DEA8);
    sub_100011054(&qword_10010DEF8, &qword_10010DEA0, (uint64_t)&protocol conformance descriptor for VStack<A>);
    sub_100011054(&qword_10010CEF0, &qword_10010CEB0, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10010DEF0);
  }
  return result;
}

uint64_t sub_10004942C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AccessPointAnimationView(0) - 8) + 80);
  return sub_10004038C(v2 + ((v5 + 16) & ~v5), a1, a2);
}

uint64_t sub_100049484()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = v0;
  v2 = (int *)type metadata accessor for AccessPointAnimationView(0);
  v3 = *((_QWORD *)v2 - 1);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v28 = *(_QWORD *)(v3 + 64);
  v6 = type metadata accessor for GeometryProxy(0, v5);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v27 = *(_QWORD *)(v7 + 64);
  v9 = v1 + ((v4 + 16) & ~v4);
  swift_release(*(_QWORD *)(v9 + 8));
  v10 = (_QWORD *)(v9 + v2[6]);
  v11 = sub_100003304(&qword_10010D3A8);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
  }
  else
  {
    swift_release(*v10);
  }
  v13 = (_QWORD *)(v9 + v2[7]);
  swift_release(*v13);
  swift_release(v13[1]);
  swift_release(*(_QWORD *)(v9 + v2[8] + 8));
  swift_release(*(_QWORD *)(v9 + v2[9] + 8));
  v14 = (_QWORD *)(v9 + v2[10]);
  v15 = type metadata accessor for Game(0);
  if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15))
  {
    v25 = v6;
    v26 = v1;
    swift_bridgeObjectRelease(v14[1]);
    swift_bridgeObjectRelease(v14[3]);
    swift_bridgeObjectRelease(v14[5]);
    v16 = (char *)v14 + *(int *)(v15 + 28);
    v17 = type metadata accessor for Date(0);
    v18 = *(_QWORD *)(v17 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
      (*(void (**)(char *, uint64_t))(v18 + 8))(v16, v17);
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v14 + *(int *)(v15 + 60) + 8));
    v6 = v25;
    v1 = v26;
  }
  v19 = v4 | v8 | 7;
  v20 = (((v4 + 16) & ~v4) + v28 + v8) & ~v8;
  swift_release(*(_QWORD *)(v9 + v2[11]));
  swift_release(*(_QWORD *)(v9 + v2[12]));
  v21 = (_QWORD *)(v9 + v2[13]);
  swift_release(*v21);
  swift_release(v21[1]);
  v22 = (char *)v21 + *(int *)(sub_100003304(&qword_10010CC18) + 32);
  v23 = sub_100003304(&qword_10010CC20);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v22, v23);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v1 + v20, v6);
  return swift_deallocObject(v1, v20 + v27, v19);
}

void sub_1000496E0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;

  v1 = *(_QWORD *)(type metadata accessor for AccessPointAnimationView(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for GeometryProxy(0, v4) - 8) + 80);
  sub_1000414DC(v0 + ((v2 + v3 + v5) & ~v5));
}

unint64_t sub_100049748()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010DF38;
  if (!qword_10010DF38)
  {
    v1 = sub_100006E54(&qword_10010DF08);
    sub_100011054(&qword_10010DF40, &qword_10010DF00, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10010DF38);
  }
  return result;
}

uint64_t sub_1000497D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, char a5@<W4>, _QWORD *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;

  v12 = *a6;
  v13 = type metadata accessor for RemoteAlertAccessPointContext(0);
  v14 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  v15 = Environment.init<A>(_:)(v13, v13, v14);
  v17 = v16;
  v27 = a4;
  State.init(wrappedValue:)(&v27, &type metadata for Int);
  v19 = v28;
  v18 = v29;
  LOBYTE(v27) = a5;
  State.init(wrappedValue:)(&v27, &type metadata for Bool);
  v20 = v28;
  v21 = v29;
  v27 = a6;
  result = State.init(wrappedValue:)(&v27, v12);
  v23 = v28;
  v24 = v29;
  *(_QWORD *)a7 = v15;
  *(_BYTE *)(a7 + 8) = v17 & 1;
  *(_QWORD *)(a7 + 16) = a1;
  *(_QWORD *)(a7 + 24) = a2;
  *(_QWORD *)(a7 + 32) = a3;
  *(_QWORD *)(a7 + 40) = v19;
  *(_QWORD *)(a7 + 48) = v18;
  *(_BYTE *)(a7 + 56) = v20;
  *(_QWORD *)(a7 + 64) = v21;
  *(_QWORD *)(a7 + 72) = v23;
  *(_QWORD *)(a7 + 80) = v24;
  return result;
}

uint64_t sub_1000498F0()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10004991C(uint64_t a1)
{
  double *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  _QWORD *v11;

  v4 = *((_QWORD *)v1 + 2);
  v5 = *((_QWORD *)v1 + 3);
  v6 = *((_QWORD *)v1 + 4);
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc(dword_10010DF4C);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_1000263E8;
  return sub_100024004(v7, v8, v9, v10, a1, v4, v5, v6);
}

unint64_t sub_1000499B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010DFF0;
  if (!qword_10010DFF0)
  {
    v1 = sub_100006E54(&qword_10010DFD0);
    sub_100011054(&qword_10010DFF8, &qword_10010DFC8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    sub_100011054(&qword_10010E000, &qword_10010DFB0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10010DFF0);
  }
  return result;
}

uint64_t type metadata accessor for CollapsibleContentFrame(uint64_t a1)
{
  return sub_100010C88(a1, qword_10010E168, (uint64_t)&nominal type descriptor for CollapsibleContentFrame);
}

uint64_t sub_100049A70()
{
  return EnvironmentValues.dynamicTypeSize.getter();
}

uint64_t sub_100049AA0()
{
  return sub_10004859C((uint64_t (*)(uint64_t))sub_10003F358);
}

uint64_t sub_100049AB0()
{
  return sub_10004859C(sub_10003F7F0);
}

uint64_t sub_100049ABC()
{
  return sub_100034764(&qword_10010E090, &qword_10010E068, (void (*)(void))sub_100049AE0);
}

uint64_t sub_100049AE0()
{
  return sub_100034764(&qword_10010E098, &qword_10010E060, (void (*)(void))sub_100049B04);
}

unint64_t sub_100049B04()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010E0A0;
  if (!qword_10010E0A0)
  {
    v1 = sub_100006E54(&qword_10010E058);
    sub_100011054(&qword_10010E0A8, &qword_10010E050, (uint64_t)&unk_1000CECA0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10010E0A0);
  }
  return result;
}

uint64_t sub_100049B88()
{
  uint64_t v0;

  return sub_10003F9A0(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100049BA4()
{
  return sub_10004859C((uint64_t (*)(uint64_t))sub_10003FA10);
}

uint64_t sub_100049BB0()
{
  uint64_t v0;

  return sub_10003FA8C(*(_QWORD *)(v0 + 16));
}

double sub_100049BC8()
{
  uint64_t v0;

  return sub_10003F700(*(_QWORD *)(v0 + 16));
}

unint64_t sub_100049BE0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010E0C8;
  if (!qword_10010E0C8)
  {
    v1 = sub_100006E54(&qword_10010D070);
    sub_1000035B4(&qword_10010D088, type metadata accessor for DashboardContentView, (uint64_t)&unk_1000CA8D0);
    sub_10002607C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10010E0C8);
  }
  return result;
}

unint64_t sub_100049C64()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010E0D0;
  if (!qword_10010E0D0)
  {
    v1 = sub_100006E54(&qword_10010E0C0);
    sub_100034764(&qword_10010E0D8, &qword_10010E0E0, (void (*)(void))sub_100049D08);
    sub_100011054(&qword_10010E0F0, &qword_10010E0F8, (uint64_t)&protocol conformance descriptor for _MatchedGeometryEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10010E0D0);
  }
  return result;
}

unint64_t sub_100049D08()
{
  unint64_t result;

  result = qword_10010E0E8;
  if (!qword_10010E0E8)
  {
    result = swift_getWitnessTable(&unk_1000C9C3C, &type metadata for AccessPointComponentView);
    atomic_store(result, (unint64_t *)&qword_10010E0E8);
  }
  return result;
}

uint64_t sub_100049D50()
{
  return sub_10004859C(sub_100044FF4);
}

double sub_100049D5C()
{
  uint64_t v0;

  return sub_1000452B0(*(_QWORD *)(v0 + 16), (uint64_t)&unk_1000C9A00, &OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__showDashboard);
}

uint64_t sub_100049D88()
{
  return sub_1000489D0(&qword_10010BAC0, &qword_10010D8E0, (uint64_t)sub_100049DAC, (uint64_t)sub_100039674);
}

double sub_100049DAC()
{
  uint64_t v0;

  return sub_100045480(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100049DD4(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 2u)
    return swift_bridgeObjectRetain(a2);
  return result;
}

void sub_100049DEC()
{
  uint64_t v0;

  sub_1000A8E54(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

void sub_100049E0C()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 16) = *(_BYTE *)(v0 + 24);
}

uint64_t *sub_100049E1C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_100003304(&qword_10010D3A8);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v4, a2, v8);
      v9 = v4;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *v4 = *a2;
      swift_retain(v13);
      v9 = v4;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = *(int *)(a3 + 20);
    v15 = *(int *)(a3 + 24);
    v16 = (uint64_t *)((char *)v4 + v14);
    v17 = (uint64_t *)((char *)a2 + v14);
    v18 = *v17;
    v19 = v17[1];
    *v16 = *v17;
    v16[1] = v19;
    v20 = v17[2];
    v16[2] = v20;
    v21 = (char *)v4 + v15;
    v22 = (char *)a2 + v15;
    *v21 = *v22;
    v12 = *((_QWORD *)v22 + 1);
    *((_QWORD *)v21 + 1) = v12;
    swift_retain(v18);
    swift_retain(v19);
    swift_retain(v20);
  }
  swift_retain(v12);
  return v4;
}

double sub_100049F34(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  double result;

  v4 = sub_100003304(&qword_10010D3A8);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (_QWORD *)((char *)a1 + *(int *)(a2 + 20));
  swift_release(*v6);
  swift_release(v6[1]);
  swift_release(v6[2]);
  *(_QWORD *)&result = swift_release(*(_QWORD *)((char *)a1 + *(int *)(a2 + 24) + 8)).n128_u64[0];
  return result;
}

uint64_t *sub_100049FD0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;

  v6 = sub_100003304(&qword_10010D3A8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = *(int *)(a3 + 20);
  v13 = *(int *)(a3 + 24);
  v14 = (uint64_t *)((char *)a1 + v12);
  v15 = (uint64_t *)((char *)a2 + v12);
  v16 = *v15;
  v17 = v15[1];
  *v14 = *v15;
  v14[1] = v17;
  v18 = v15[2];
  v14[2] = v18;
  v19 = (char *)a1 + v13;
  v20 = (char *)a2 + v13;
  *v19 = *v20;
  v21 = *((_QWORD *)v20 + 1);
  *((_QWORD *)v19 + 1) = v21;
  swift_retain(v16);
  swift_retain(v17);
  swift_retain(v18);
  swift_retain(v21);
  return a1;
}

uint64_t *sub_10004A0C0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;

  if (a1 != a2)
  {
    sub_100010ED0((uint64_t)a1, &qword_10010D3A8);
    v6 = sub_100003304(&qword_10010D3A8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = *(int *)(a3 + 20);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = *(uint64_t *)((char *)a1 + v12);
  v16 = *(uint64_t *)((char *)a2 + v12);
  *(uint64_t *)((char *)a1 + v12) = v16;
  swift_retain(v16);
  swift_release(v15);
  v17 = *((_QWORD *)v14 + 1);
  v18 = *((_QWORD *)v13 + 1);
  *((_QWORD *)v13 + 1) = v17;
  swift_retain(v17);
  swift_release(v18);
  v19 = *((_QWORD *)v14 + 2);
  v20 = *((_QWORD *)v13 + 2);
  *((_QWORD *)v13 + 2) = v19;
  swift_retain(v19);
  swift_release(v20);
  v21 = *(int *)(a3 + 24);
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  *v22 = *v23;
  v24 = *((_QWORD *)v22 + 1);
  v25 = *((_QWORD *)v23 + 1);
  *((_QWORD *)v22 + 1) = v25;
  swift_retain(v25);
  swift_release(v24);
  return a1;
}

char *sub_10004A200(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;

  v6 = sub_100003304(&qword_10010D3A8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = *(int *)(a3 + 20);
  v9 = *(int *)(a3 + 24);
  v10 = &a1[v8];
  v11 = &a2[v8];
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *((_QWORD *)v10 + 2) = *((_QWORD *)v11 + 2);
  *(_OWORD *)&a1[v9] = *(_OWORD *)&a2[v9];
  return a1;
}

char *sub_10004A2C0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  if (a1 != a2)
  {
    sub_100010ED0((uint64_t)a1, &qword_10010D3A8);
    v6 = sub_100003304(&qword_10010D3A8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = *(_QWORD *)&a1[v8];
  *(_QWORD *)&a1[v8] = *(_QWORD *)&a2[v8];
  swift_release(v11);
  v12 = *((_QWORD *)v9 + 1);
  *((_QWORD *)v9 + 1) = *((_QWORD *)v10 + 1);
  swift_release(v12);
  v13 = *((_QWORD *)v9 + 2);
  *((_QWORD *)v9 + 2) = *((_QWORD *)v10 + 2);
  swift_release(v13);
  v14 = *(int *)(a3 + 24);
  v15 = &a1[v14];
  v16 = &a2[v14];
  *v15 = *v16;
  v17 = *((_QWORD *)v15 + 1);
  *((_QWORD *)v15 + 1) = *((_QWORD *)v16 + 1);
  swift_release(v17);
  return a1;
}

uint64_t sub_10004A3DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10004A3E8);
}

uint64_t sub_10004A3E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_100003304(&qword_10010DD18);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10004A46C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10004A478);
}

uint64_t sub_10004A478(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100003304(&qword_10010DD18);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

void sub_10004A4F8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  sub_10001DD8C(319, (unint64_t *)&unk_10010DD88, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = &unk_1000C9BB8;
    v4[2] = &unk_1000C9740;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

double destroy for AccessPointComponentView(_QWORD *a1)
{
  double result;

  swift_release(*a1);
  swift_release(a1[2]);
  swift_release(a1[3]);
  swift_release(a1[4]);
  swift_release(a1[6]);
  swift_release(a1[8]);
  swift_release(a1[9]);
  *(_QWORD *)&result = swift_release(a1[10]).n128_u64[0];
  return result;
}

uint64_t initializeWithCopy for AccessPointComponentView(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = v4;
  v5 = a2[2];
  v6 = a2[3];
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v8 = a2[4];
  v7 = a2[5];
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v7;
  v9 = a2[6];
  *(_QWORD *)(a1 + 48) = v9;
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  v10 = a2[8];
  v11 = a2[9];
  *(_QWORD *)(a1 + 64) = v10;
  *(_QWORD *)(a1 + 72) = v11;
  v12 = a2[10];
  *(_QWORD *)(a1 + 80) = v12;
  swift_retain(v3);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v8);
  swift_retain(v9);
  swift_retain(v10);
  swift_retain(v11);
  swift_retain(v12);
  return a1;
}

uint64_t *assignWithCopy for AccessPointComponentView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v5;
  swift_retain(v4);
  swift_release(v6);
  v7 = a1[2];
  v8 = a2[2];
  a1[2] = v8;
  swift_retain(v8);
  swift_release(v7);
  v9 = a2[3];
  v10 = a1[3];
  a1[3] = v9;
  swift_retain(v9);
  swift_release(v10);
  v11 = a2[4];
  v12 = a1[4];
  a1[4] = v11;
  swift_retain(v11);
  swift_release(v12);
  a1[5] = a2[5];
  v13 = a1[6];
  v14 = a2[6];
  a1[6] = v14;
  swift_retain(v14);
  swift_release(v13);
  *((_BYTE *)a1 + 56) = *((_BYTE *)a2 + 56);
  v15 = a1[8];
  v16 = a2[8];
  a1[8] = v16;
  swift_retain(v16);
  swift_release(v15);
  v17 = a2[9];
  v18 = a1[9];
  a1[9] = v17;
  swift_retain(v17);
  swift_release(v18);
  v19 = a1[10];
  v20 = a2[10];
  a1[10] = v20;
  swift_retain(v20);
  swift_release(v19);
  return a1;
}

uint64_t *assignWithTake for AccessPointComponentView(uint64_t *a1, uint64_t *a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *((_BYTE *)a2 + 8);
  v5 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v4;
  swift_release(v5);
  swift_release(a1[2]);
  v6 = a1[3];
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  swift_release(v6);
  v7 = a1[4];
  a1[4] = a2[4];
  swift_release(v7);
  v8 = a1[6];
  v9 = a2[6];
  a1[5] = a2[5];
  a1[6] = v9;
  swift_release(v8);
  *((_BYTE *)a1 + 56) = *((_BYTE *)a2 + 56);
  swift_release(a1[8]);
  v10 = a1[9];
  *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
  swift_release(v10);
  v11 = a1[10];
  a1[10] = a2[10];
  swift_release(v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessPointComponentView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessPointComponentView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessPointComponentView()
{
  return &type metadata for AccessPointComponentView;
}

unint64_t sub_10004A8F0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t OpaqueTypeConformance2;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  ValueMetadata *v12;
  uint64_t v13;
  void *v14;

  result = qword_10010E1A8;
  if (!qword_10010E1A8)
  {
    v1 = sub_100006E54(&qword_10010DE08);
    v2 = sub_100006E54(&qword_10010DDF8);
    v3 = sub_100006E54(&qword_10010DDF0);
    v4 = type metadata accessor for AccessPointAnchoring(255);
    v5 = sub_100006E54(&qword_10010DDE8);
    v11 = sub_100006E54(&qword_10010DDE0);
    v12 = (ValueMetadata *)&type metadata for Bool;
    v13 = sub_100011054(&qword_10010DE18, &qword_10010DDE0, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    v14 = &protocol witness table for Bool;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    v7 = sub_10003C628();
    v11 = v5;
    v12 = &type metadata for AccessPointModel.AnimationState;
    v13 = OpaqueTypeConformance2;
    v14 = (void *)v7;
    v8 = swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    v9 = sub_1000035B4(&qword_10010CE20, (uint64_t (*)(uint64_t))&type metadata accessor for AccessPointAnchoring, (uint64_t)&protocol conformance descriptor for AccessPointAnchoring);
    v11 = v3;
    v12 = (ValueMetadata *)v4;
    v13 = v8;
    v14 = (void *)v9;
    v10 = swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    v11 = v2;
    v12 = (ValueMetadata *)&type metadata for Bool;
    v13 = v10;
    v14 = &protocol witness table for Bool;
    swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    sub_1000035B4(&qword_10010D0A0, (uint64_t (*)(uint64_t))&type metadata accessor for _TaskModifier, (uint64_t)&protocol conformance descriptor for _TaskModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10010E1A8);
  }
  return result;
}

uint64_t sub_10004AAA4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E4660, 1);
}

uint64_t sub_10004AAB4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E4638, 1);
}

uint64_t sub_10004AAC8()
{
  uint64_t v0;

  return sub_100046B44(v0 + 16);
}

uint64_t *sub_10004AAD0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *a1;
  v3 = a1[2];
  v4 = a1[3];
  v5 = a1[4];
  v6 = a1[6];
  v7 = a1[8];
  v8 = a1[9];
  swift_retain(a1[10]);
  swift_retain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  return a1;
}

unint64_t sub_10004AB5C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010E1E8;
  if (!qword_10010E1E8)
  {
    v1 = sub_100006E54(&qword_10010E1C0);
    sub_10004ABE0();
    sub_100011054(&qword_10010CD48, &qword_10010CD50, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10010E1E8);
  }
  return result;
}

unint64_t sub_10004ABE0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010E1F0;
  if (!qword_10010E1F0)
  {
    v1 = sub_100006E54(&qword_10010E1B8);
    sub_100011054(&qword_10010E1F8, &qword_10010E1B0, (uint64_t)&protocol conformance descriptor for HStack<A>);
    sub_100011054(&qword_10010E200, &qword_10010E1E0, (uint64_t)&protocol conformance descriptor for _ContentShapeModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10010E1F0);
  }
  return result;
}

void sub_10004AC88()
{
  uint64_t v0;

  sub_100046CD4(v0 + 16);
}

double sub_10004AC90()
{
  uint64_t v0;

  return sub_100046ECC(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10004ACAC()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  swift_release(v0[8]);
  swift_release(v0[10]);
  swift_release(v0[11]);
  swift_release(v0[12]);
  return swift_deallocObject(v0, 104, 7);
}

void sub_10004AD08()
{
  uint64_t v0;

  sub_100046FB0((uint64_t *)(v0 + 16));
}

double sub_10004AD10()
{
  uint64_t v0;

  return sub_100047898(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10004AD2C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10004AD58(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_10010E21C);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_1000263E8;
  return sub_100047730(a1, v4, v5, v7, v6);
}

uint64_t sub_10004ADD0()
{
  uint64_t v0;

  return sub_10007C05C(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_10004ADEC()
{
  uint64_t v0;

  return sub_100046BDC(*(_QWORD *)(v0 + 16));
}

unint64_t sub_10004AE0C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010E268;
  if (!qword_10010E268)
  {
    v1 = sub_100006E54(&qword_10010E248);
    sub_100011054(&qword_10010E270, &qword_10010E260, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10010E268);
  }
  return result;
}

uint64_t sub_10004AE94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = type metadata accessor for CollapsibleContentFrame(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  v7 = sub_100003304(&qword_10010D3A8);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v9 = v4 + v5;
  v10 = (_QWORD *)((char *)v6 + *(int *)(v1 + 20));
  swift_release(*v10);
  swift_release(v10[1]);
  swift_release(v10[2]);
  swift_release(*(_QWORD *)((char *)v6 + *(int *)(v1 + 24) + 8));
  return swift_deallocObject(v0, v9, v3 | 7);
}

uint64_t sub_10004AF6C()
{
  type metadata accessor for CollapsibleContentFrame(0);
  return sub_100047F18();
}

double sub_10004AFA4()
{
  uint64_t v0;

  return sub_100048210(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10004AFBC()
{
  uint64_t v0;
  uint64_t OpaqueTypeConformance2;
  uint64_t v3;
  void *v4;
  unint64_t v5;
  void *v6;

  v0 = sub_100006E54(&qword_10010E1C8);
  v3 = sub_100006E54(&qword_10010E1C0);
  v4 = &type metadata for Int;
  v5 = sub_10004AB5C();
  v6 = &protocol witness table for Int;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v3 = v0;
  v4 = &type metadata for Bool;
  v5 = OpaqueTypeConformance2;
  v6 = &protocol witness table for Bool;
  return swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
}

uint64_t sub_10004B058()
{
  uint64_t v0;
  uint64_t OpaqueTypeConformance2;
  uint64_t v3;
  ValueMetadata *v4;
  unint64_t v5;
  void *v6;

  v0 = sub_100006E54(&qword_10010E250);
  v3 = sub_100006E54(&qword_10010E248);
  v4 = &type metadata for AccessPointModel.AnimationState;
  v5 = sub_10004AE0C();
  v6 = (void *)sub_10003C628();
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v3 = v0;
  v4 = (ValueMetadata *)&type metadata for Int;
  v5 = OpaqueTypeConformance2;
  v6 = &protocol witness table for Int;
  return swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
}

uint64_t sub_10004B104()
{
  return sub_100048E74();
}

uint64_t sub_10004B118()
{
  return sub_100048E94();
}

void sub_10004B12C()
{
  sub_100048F64();
}

void sub_10004B140()
{
  sub_100049110();
}

void sub_10004B154()
{
  sub_100049128();
}

void sub_10004B168()
{
  sub_100048E0C();
}

void sub_10004B17C()
{
  sub_100048F10();
}

uint64_t sub_10004B2C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v7;

  *(_BYTE *)(v7 + 32) = a7;
  *(_QWORD *)(v7 + 16) = a4;
  return swift_task_switch(sub_10004B2DC, 0, 0);
}

uint64_t sub_10004B2DC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t, char);

  if (qword_10010BAF0 != -1)
    swift_once(&qword_10010BAF0, sub_100051BCC);
  v3 = (uint64_t (*)(uint64_t, char))((char *)&dword_10010E6E0 + dword_10010E6E0);
  v1 = (_QWORD *)swift_task_alloc(unk_10010E6E4);
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = v0;
  v1[1] = sub_10004B370;
  return v3(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 32));
}

uint64_t sub_10004B370()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 24));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10004B3B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;

  v5[14] = a4;
  v5[15] = a5;
  v6 = sub_100003304(&qword_10010EB20);
  v5[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10004B414, 0, 0);
}

uint64_t sub_10004B414()
{
  uint64_t v0;
  uint64_t v1;

  if (qword_10010BAF0 != -1)
    swift_once(&qword_10010BAF0, sub_100051BCC);
  v1 = qword_1001232F8;
  *(_QWORD *)(v0 + 136) = qword_1001232F8;
  return swift_task_switch(sub_10004B478, v1, 0);
}

uint64_t sub_10004B478()
{
  uint64_t v0;

  sub_100050FF4(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120));
  return swift_task_switch(sub_10004B4B8, 0, 0);
}

uint64_t sub_10004B4B8()
{
  uint64_t v0;
  uint64_t v1;

  if (qword_10010BBD0 != -1)
    swift_once(&qword_10010BBD0, sub_1000AD780);
  v1 = qword_1001233D0;
  *(_QWORD *)(v0 + 144) = qword_1001233D0;
  return swift_task_switch(sub_10004B51C, v1, 0);
}

uint64_t sub_10004B51C()
{
  uint64_t v0;
  uint64_t v1;
  _TtC13GameOverlayUI20GameOverlayUIService *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  const char *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  _TtC13GameOverlayUI20GameOverlayUIService *v13;
  uint64_t v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  SEL v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  SEL v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;

  v1 = *(_QWORD *)(v0 + 144);
  swift_beginAccess(v1 + 112, v0 + 56, 0, 0);
  v2 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v1 + 112);
  if (!v2[1].super.isa)
    goto LABEL_5;
  v4 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 120);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v2);
  v5 = sub_1000AAE54(v4, v3);
  v13 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v0 + 120);
  if ((v6 & 1) == 0)
  {
    swift_bridgeObjectRelease(v2, v6, v7, v8, v9, v10, v11, v12);
    swift_bridgeObjectRelease(v13, v29, v30, v31, v32, v33, v34, v35);
LABEL_5:
    *(_QWORD *)(v0 + 48) = 0;
    *(_OWORD *)(v0 + 16) = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
    return swift_task_switch(sub_10004B628, 0, 0);
  }
  v14 = *(_QWORD *)(*(_QWORD *)v2[3].listener + 8 * v5);
  swift_retain(v14);
  swift_bridgeObjectRelease(v2, v15, v16, v17, v18, v19, v20, v21);
  swift_bridgeObjectRelease(v13, v22, v23, v24, v25, v26, v27, v28);
  swift_beginAccess(v14 + 32, v0 + 80, 0, 0);
  sub_100010CBC(v14 + 32, v0 + 16, &qword_10010E3A8);
  swift_release(v14);
  return swift_task_switch(sub_10004B628, 0, 0);
}

uint64_t sub_10004B628()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;

  if (*(_QWORD *)(v0 + 40))
  {
    v1 = sub_100003304((uint64_t *)&unk_100111640);
    v2 = type metadata accessor for RemoteAlertAccessPointContext(0);
    if ((swift_dynamicCast(v0 + 104, v0 + 16, v1, v2, 6) & 1) != 0)
    {
      v3 = *(_QWORD *)(v0 + 128);
      v4 = *(_QWORD *)(v0 + 104);
      v5 = type metadata accessor for TaskPriority(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v3, 1, 1, v5);
      type metadata accessor for MainActor(0);
      v6 = swift_retain(v4);
      v7 = static MainActor.shared.getter(v6);
      v8 = (_QWORD *)swift_allocObject(&unk_1000FE898, 40, 7);
      v8[2] = v7;
      v8[3] = &protocol witness table for MainActor;
      v8[4] = v4;
      v9 = sub_100028240(v3, (uint64_t)&unk_10010E438, (uint64_t)v8);
      swift_release(v4);
      swift_release(v9);
      goto LABEL_10;
    }
  }
  else
  {
    sub_100010ED0(v0 + 16, &qword_10010E3A8);
  }
  if (qword_10010BAA0 != -1)
    swift_once(&qword_10010BAA0, sub_100004DCC);
  v10 = type metadata accessor for Logger(0);
  v11 = sub_100004E8C(v10, (uint64_t)qword_1001232D8);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Could not find access point context for the client request", v14, 2u);
    swift_slowDealloc(v14, -1, -1);
  }

LABEL_10:
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004B7F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v4 + 24) = a4;
  v5 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v4 + 32) = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  return swift_task_switch(sub_10004B864, v6, v7);
}

uint64_t sub_10004B864()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v1 = (_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 32));
  KeyPath = swift_getKeyPath(&unk_1000C9D58);
  v4 = swift_task_alloc(32);
  *(_QWORD *)(v4 + 16) = v2;
  *(_BYTE *)(v4 + 24) = 0;
  *(_QWORD *)(v0 + 16) = v2;
  v5 = (_QWORD *)(v0 + 16);
  v6 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 16, KeyPath, sub_100031B3C, v4, (char *)&type metadata for () + 8, v6);
  swift_release(KeyPath);
  swift_task_dealloc(v4);
  if (qword_10010BAA0 != -1)
    swift_once(&qword_10010BAA0, sub_100004DCC);
  v7 = *v1;
  v8 = type metadata accessor for Logger(0);
  sub_100004E8C(v8, (uint64_t)qword_1001232D8);
  v9 = swift_retain_n(v7, 2);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.info.getter();
  v12 = os_log_type_enabled(v10, v11);
  v13 = *v1;
  if (v12)
  {
    v18 = v6;
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v14 = 134217984;
    v15 = swift_getKeyPath(&unk_1000C9D08);
    *v5 = v13;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 16, v15, v18);
    swift_release(v15);
    v16 = *(_QWORD *)(v13 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__hideCount);
    swift_release(v13);
    *v5 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24);
    swift_release(v13);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Setting access point with current hide count: %ld to inactive", v14, 0xCu);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    swift_release_n(*v1, 2);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004BCE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)(v6 + 152) = a6;
  *(_QWORD *)(v6 + 112) = a4;
  *(_QWORD *)(v6 + 120) = a5;
  v7 = sub_100003304(&qword_10010EB20);
  *(_QWORD *)(v6 + 128) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10004BD48, 0, 0);
}

uint64_t sub_10004BD48()
{
  uint64_t v0;
  uint64_t v1;

  if (qword_10010BAF0 != -1)
    swift_once(&qword_10010BAF0, sub_100051BCC);
  v1 = qword_1001232F8;
  *(_QWORD *)(v0 + 136) = qword_1001232F8;
  return swift_task_switch(sub_10004BDAC, v1, 0);
}

uint64_t sub_10004BDAC()
{
  uint64_t v0;

  sub_100050FF4(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120));
  return swift_task_switch(sub_10004BDEC, 0, 0);
}

uint64_t sub_10004BDEC()
{
  uint64_t v0;
  uint64_t v1;

  if (qword_10010BBD0 != -1)
    swift_once(&qword_10010BBD0, sub_1000AD780);
  v1 = qword_1001233D0;
  *(_QWORD *)(v0 + 144) = qword_1001233D0;
  return swift_task_switch(sub_10004BE50, v1, 0);
}

uint64_t sub_10004BE50()
{
  uint64_t v0;
  uint64_t v1;
  _TtC13GameOverlayUI20GameOverlayUIService *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  const char *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  _TtC13GameOverlayUI20GameOverlayUIService *v13;
  uint64_t v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  SEL v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  SEL v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;

  v1 = *(_QWORD *)(v0 + 144);
  swift_beginAccess(v1 + 112, v0 + 56, 0, 0);
  v2 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v1 + 112);
  if (!v2[1].super.isa)
    goto LABEL_5;
  v4 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 120);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v2);
  v5 = sub_1000AAE54(v4, v3);
  v13 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v0 + 120);
  if ((v6 & 1) == 0)
  {
    swift_bridgeObjectRelease(v2, v6, v7, v8, v9, v10, v11, v12);
    swift_bridgeObjectRelease(v13, v29, v30, v31, v32, v33, v34, v35);
LABEL_5:
    *(_QWORD *)(v0 + 48) = 0;
    *(_OWORD *)(v0 + 16) = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
    return swift_task_switch(sub_10004BF5C, 0, 0);
  }
  v14 = *(_QWORD *)(*(_QWORD *)v2[3].listener + 8 * v5);
  swift_retain(v14);
  swift_bridgeObjectRelease(v2, v15, v16, v17, v18, v19, v20, v21);
  swift_bridgeObjectRelease(v13, v22, v23, v24, v25, v26, v27, v28);
  swift_beginAccess(v14 + 32, v0 + 80, 0, 0);
  sub_100010CBC(v14 + 32, v0 + 16, &qword_10010E3A8);
  swift_release(v14);
  return swift_task_switch(sub_10004BF5C, 0, 0);
}

uint64_t sub_10004BF5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;

  if (*(_QWORD *)(v0 + 40))
  {
    v1 = sub_100003304((uint64_t *)&unk_100111640);
    v2 = type metadata accessor for RemoteAlertAccessPointContext(0);
    if ((swift_dynamicCast(v0 + 104, v0 + 16, v1, v2, 6) & 1) != 0)
    {
      v3 = *(_QWORD *)(v0 + 128);
      v4 = *(_BYTE *)(v0 + 152);
      v5 = *(_QWORD *)(v0 + 104);
      v6 = type metadata accessor for TaskPriority(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v3, 1, 1, v6);
      type metadata accessor for MainActor(0);
      v7 = swift_retain(v5);
      v8 = static MainActor.shared.getter(v7);
      v9 = swift_allocObject(&unk_1000FE7D0, 41, 7);
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = &protocol witness table for MainActor;
      *(_QWORD *)(v9 + 32) = v5;
      *(_BYTE *)(v9 + 40) = v4;
      v10 = sub_100028240(v3, (uint64_t)&unk_10010E3E8, v9);
      swift_release(v5);
      swift_release(v10);
      goto LABEL_10;
    }
  }
  else
  {
    sub_100010ED0(v0 + 16, &qword_10010E3A8);
  }
  if (qword_10010BAA0 != -1)
    swift_once(&qword_10010BAA0, sub_100004DCC);
  v11 = type metadata accessor for Logger(0);
  v12 = sub_100004E8C(v11, (uint64_t)qword_1001232D8);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Could not find access point context for the client request", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }

LABEL_10:
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004C134(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)(v5 + 40) = a5;
  *(_QWORD *)(v5 + 24) = a4;
  v6 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v5 + 32) = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  return swift_task_switch(sub_10004C1A4, v7, v8);
}

uint64_t sub_10004C1A4()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t KeyPath;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = *(unsigned __int8 *)(v0 + 40);
  v3 = (_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 32));
  KeyPath = swift_getKeyPath(&unk_1000C9D08);
  *(_QWORD *)(v0 + 16) = v2;
  v5 = (_QWORD *)(v0 + 16);
  if (v1)
    v6 = 1;
  else
    v6 = -1;
  v7 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 16, KeyPath, v7);
  swift_release(KeyPath);
  *v5 = v2;
  v8 = swift_getKeyPath(&unk_1000C9D08);
  ObservationRegistrar.willSet<A, B>(_:keyPath:)(v0 + 16, v8, v7);
  swift_release(v8);
  v9 = OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__hideCount;
  v10 = *(_QWORD *)(v2 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__hideCount);
  v11 = __OFADD__(v10, v6);
  v12 = v10 + v6;
  if (v11)
  {
    __break(1u);
LABEL_13:
    swift_once(&qword_10010BAA0, sub_100004DCC);
    goto LABEL_8;
  }
  v13 = *v3;
  *(_QWORD *)(v2 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__hideCount) = v12;
  *v5 = v13;
  v14 = swift_getKeyPath(&unk_1000C9D08);
  ObservationRegistrar.didSet<A, B>(_:keyPath:)(v0 + 16, v14, v7);
  swift_release(v14);
  v15 = swift_getKeyPath(&unk_1000C9D08);
  *v5 = v13;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 16, v15, v7);
  swift_release(v15);
  v32 = v9;
  if ((*(_QWORD *)(v2 + v9) & 0x8000000000000000) != 0)
  {
    v16 = *v3;
    v17 = swift_getKeyPath(&unk_1000C9D08);
    v18 = swift_task_alloc(32);
    *(_QWORD *)(v18 + 16) = v16;
    *(_QWORD *)(v18 + 24) = 0;
    *v5 = v16;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 16, v17, sub_100030E38, v18, (char *)&type metadata for () + 8, v7);
    swift_release(v17);
    swift_task_dealloc(v18);
  }
  if (qword_10010BAA0 != -1)
    goto LABEL_13;
LABEL_8:
  v19 = *v3;
  v20 = type metadata accessor for Logger(0);
  sub_100004E8C(v20, (uint64_t)qword_1001232D8);
  v21 = swift_retain_n(v19, 2);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.info.getter();
  v24 = os_log_type_enabled(v22, v23);
  v25 = *v3;
  if (v24)
  {
    v31 = v0;
    v26 = (uint8_t *)swift_slowAlloc(12, -1);
    v30 = v0 + 24;
    *(_DWORD *)v26 = 134217984;
    v27 = swift_getKeyPath(&unk_1000C9D08);
    *v5 = v25;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v5, v27, v7);
    swift_release(v27);
    v28 = *(_QWORD *)(v2 + v32);
    swift_release(v25);
    *v5 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v5, v30);
    swift_release(v25);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Setting access point hide count: %ld", v26, 0xCu);
    v0 = v31;
    swift_slowDealloc(v26, -1, -1);
  }
  else
  {
    swift_release_n(*v3, 2);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10004C4D4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v13 = sub_100003304(&qword_10010EB20);
  __chkstk_darwin(v13);
  v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000721B4(0);
  if (v17)
  {
    v18 = v17;
    v36 = v16;
    v19 = sub_100072058(0);
    if (v20)
    {
      v21 = v20;
      v35 = v19;
      v22 = objc_msgSend((id)objc_opt_self(BSServiceConnection), "currentContext");
      v33 = a1;
      v34 = a4;
      v23 = v6;
      v24 = v22;
      v25 = type metadata accessor for AccessPointConnectionContext();
      *(_QWORD *)(swift_allocObject(v25, 128, 7) + 120) = 0;
      v26 = sub_1000B4464(v24);
      v27 = type metadata accessor for TaskPriority(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v15, 1, 1, v27);
      v28 = a2;
      v29 = (_QWORD *)swift_allocObject(&unk_1000FE7F8, 128, 7);
      v29[2] = 0;
      v29[3] = 0;
      v29[4] = v35;
      v29[5] = v21;
      v29[6] = v36;
      v29[7] = v18;
      v29[8] = v23;
      v29[9] = v26;
      v30 = v34;
      v29[10] = v33;
      v29[11] = v28;
      v29[12] = a3;
      v29[13] = v30;
      v29[14] = a5;
      v29[15] = a6;
      v31 = v23;
      swift_bridgeObjectRetain(v28);
      sub_100019F94(a3, v30);
      swift_bridgeObjectRetain(a6);
      v32 = sub_100028240((uint64_t)v15, (uint64_t)&unk_10010E3F8, (uint64_t)v29);
      swift_release(v32);
    }
    else
    {
      swift_bridgeObjectRelease(v18);
    }
  }
}

uint64_t sub_10004C6B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  *(_QWORD *)(v7 + 216) = v13;
  *(_OWORD *)(v7 + 200) = v12;
  *(_OWORD *)(v7 + 184) = v11;
  *(_OWORD *)(v7 + 168) = v10;
  *(_QWORD *)(v7 + 152) = a6;
  *(_QWORD *)(v7 + 160) = a7;
  *(_QWORD *)(v7 + 136) = a4;
  *(_QWORD *)(v7 + 144) = a5;
  v8 = sub_100003304(&qword_10010EB20);
  *(_QWORD *)(v7 + 224) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10004C72C, 0, 0);
}

uint64_t sub_10004C72C()
{
  uint64_t v0;
  uint64_t v1;

  if (qword_10010BBD0 != -1)
    swift_once(&qword_10010BBD0, sub_1000AD780);
  v1 = qword_1001233D0;
  *(_QWORD *)(v0 + 232) = qword_1001233D0;
  return swift_task_switch(sub_10004C790, v1, 0);
}

uint64_t sub_10004C790()
{
  uint64_t v0;
  uint64_t v1;
  _TtC13GameOverlayUI20GameOverlayUIService *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  const char *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  _TtC13GameOverlayUI20GameOverlayUIService *v13;
  uint64_t v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  SEL v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  SEL v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;

  v1 = *(_QWORD *)(v0 + 232);
  swift_beginAccess(v1 + 112, v0 + 56, 0, 0);
  v2 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v1 + 112);
  if (!v2[1].super.isa)
    goto LABEL_5;
  v4 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 144);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v2);
  v5 = sub_1000AAE54(v4, v3);
  v13 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v0 + 144);
  if ((v6 & 1) == 0)
  {
    swift_bridgeObjectRelease(v2, v6, v7, v8, v9, v10, v11, v12);
    swift_bridgeObjectRelease(v13, v29, v30, v31, v32, v33, v34, v35);
LABEL_5:
    *(_QWORD *)(v0 + 48) = 0;
    *(_OWORD *)(v0 + 16) = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
    return swift_task_switch(sub_10004C89C, 0, 0);
  }
  v14 = *(_QWORD *)(*(_QWORD *)v2[3].listener + 8 * v5);
  swift_retain(v14);
  swift_bridgeObjectRelease(v2, v15, v16, v17, v18, v19, v20, v21);
  swift_bridgeObjectRelease(v13, v22, v23, v24, v25, v26, v27, v28);
  swift_beginAccess(v14 + 32, v0 + 104, 0, 0);
  sub_100010CBC(v14 + 32, v0 + 16, &qword_10010E3A8);
  swift_release(v14);
  return swift_task_switch(sub_10004C89C, 0, 0);
}

uint64_t sub_10004C89C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;

  if (*(_QWORD *)(v0 + 40))
  {
    v1 = sub_100003304((uint64_t *)&unk_100111640);
    v2 = type metadata accessor for RemoteAlertAccessPointContext(0);
    if ((swift_dynamicCast(v0 + 128, v0 + 16, v1, v2, 6) & 1) != 0)
    {
      v3 = *(_QWORD *)(v0 + 224);
      v5 = *(_QWORD *)(v0 + 176);
      v4 = *(_QWORD *)(v0 + 184);
      v6 = *(_QWORD *)(v0 + 128);
      v7 = type metadata accessor for TaskPriority(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v3, 1, 1, v7);
      type metadata accessor for MainActor(0);
      swift_bridgeObjectRetain(v4);
      v8 = swift_retain(v6);
      v9 = static MainActor.shared.getter(v8);
      v10 = (_QWORD *)swift_allocObject(&unk_1000FE820, 56, 7);
      v10[2] = v9;
      v10[3] = &protocol witness table for MainActor;
      v10[4] = v5;
      v10[5] = v4;
      v10[6] = v6;
      v11 = sub_100028240(v3, (uint64_t)&unk_10010E408, (uint64_t)v10);
      swift_release(v6);
      swift_release(v11);
      swift_task_dealloc(*(_QWORD *)(v0 + 224));
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
  else
  {
    sub_100010ED0(v0 + 16, &qword_10010E3A8);
  }
  if (qword_10010BAA0 != -1)
    swift_once(&qword_10010BAA0, sub_100004DCC);
  v13 = type metadata accessor for Logger(0);
  v14 = sub_100004E8C(v13, (uint64_t)qword_1001232D8);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Could not find access point context for the client request", v17, 2u);
    swift_slowDealloc(v17, -1, -1);
  }

  v18 = qword_1001233D0;
  *(_QWORD *)(v0 + 240) = qword_1001233D0;
  return swift_task_switch(sub_10004CAB0, v18, 0);
}

uint64_t sub_10004CAB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _TtC13GameOverlayUI20GameOverlayUIService *v3;
  _TtC13GameOverlayUI20GameOverlayUIService *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  _TtC13GameOverlayUI20GameOverlayUIService *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  SEL v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;

  v1 = *(_QWORD *)(v0 + 240);
  v2 = *(_QWORD *)(v0 + 152);
  v3 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v0 + 160);
  swift_beginAccess(v1 + 112, v0 + 80, 0, 0);
  v4 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v1 + 112);
  swift_bridgeObjectRetain(v3);
  v5 = swift_bridgeObjectRetain(v4);
  v6 = sub_10004F604(v5, v2, v3);
  v8 = (_TtC13GameOverlayUI20GameOverlayUIService *)v7;
  swift_bridgeObjectRelease(v3, v7, v9, v10, v11, v12, v13, v14);
  swift_bridgeObjectRelease(v4, v15, v16, v17, v18, v19, v20, v21);
  *(_QWORD *)(v0 + 248) = v6;
  *(_QWORD *)(v0 + 256) = v8;
  if (v8)
  {
    swift_bridgeObjectRetain(v8);
    sub_1000AD7C4(v6, v8, 0);
    swift_bridgeObjectRelease(v8, v22, v23, v24, v25, v26, v27, v28);
    return swift_task_switch(sub_10004CB9C, 0, 0);
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v0 + 224));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10004CB9C()
{
  uint64_t v0;
  uint64_t v1;

  if (qword_10010BAF0 != -1)
    swift_once(&qword_10010BAF0, sub_100051BCC);
  v1 = qword_1001232F8;
  *(_QWORD *)(v0 + 264) = qword_1001232F8;
  return swift_task_switch(sub_10004CC00, v1, 0);
}

uint64_t sub_10004CC00()
{
  uint64_t v0;
  _TtC13GameOverlayUI20GameOverlayUIService *v1;
  SEL v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;

  v1 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v0 + 256);
  sub_100052718(*(_QWORD *)(v0 + 248), (unint64_t)v1, 0);
  swift_bridgeObjectRelease(v1, v2, v3, v4, v5, v6, v7, v8);
  return swift_task_switch(sub_10004CC50, 0, 0);
}

uint64_t sub_10004CC50()
{
  uint64_t v0;

  sub_10004EC00(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144), *(_QWORD **)(v0 + 168), *(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184), 1, *(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 200), 0, 0, *(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 216));
  swift_task_dealloc(*(_QWORD *)(v0 + 224));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004CCA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6[4] = a5;
  v6[5] = a6;
  v6[3] = a4;
  v7 = sub_100003304(&qword_1001116A0);
  v6[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AccessPointAnchoring(0);
  v6[7] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v6[8] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[9] = swift_task_alloc(v10);
  v6[10] = swift_task_alloc(v10);
  v11 = type metadata accessor for MainActor(0);
  v6[11] = static MainActor.shared.getter(v11);
  v12 = dispatch thunk of Actor.unownedExecutor.getter(v11, &protocol witness table for MainActor);
  return swift_task_switch(sub_10004CD70, v12, v13);
}

uint64_t sub_10004CD70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  swift_release(*(_QWORD *)(v0 + 88));
  swift_bridgeObjectRetain(v4);
  AccessPointAnchoring.init(rawValue:)(v5, v4);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_100010ED0(*(_QWORD *)(v0 + 48), &qword_1001116A0);
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 72);
    v6 = *(_QWORD *)(v0 + 80);
    v8 = *(_QWORD *)(v0 + 56);
    v9 = *(_QWORD *)(v0 + 64);
    v10 = *(_QWORD *)(v0 + 40);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v9 + 32))(v6, *(_QWORD *)(v0 + 48), v8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v7, v6, v8);
    KeyPath = swift_getKeyPath(&unk_1000C9D30);
    v12 = swift_task_alloc(32);
    *(_QWORD *)(v12 + 16) = v10;
    *(_QWORD *)(v12 + 24) = v7;
    *(_QWORD *)(v0 + 16) = v10;
    v13 = sub_1000035B4(&qword_10010CE18, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 16, KeyPath, sub_100031B70, v12, (char *)&type metadata for () + 8, v13);
    swift_release(KeyPath);
    swift_task_dealloc(v12);
    v14 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v14(v7, v8);
    v14(v6, v8);
  }
  v15 = *(_QWORD *)(v0 + 72);
  v16 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004CFDC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, uint64_t a14)
{
  void *v14;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  id v32;
  id v33;
  uint64_t v34;
  _QWORD *v35;
  void *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  id v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  void *v57;
  char v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  double (*v69)();
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  double (**v74)();
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  id v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  unint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  void *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  _BYTE v105[24];
  _BYTE v106[40];
  _QWORD v107[5];
  Swift::String v108;

  v95 = a2;
  v94 = a1;
  v21 = sub_100003304(&qword_10010EB20);
  __chkstk_darwin(v21);
  v23 = (char *)&v84 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for GameOverlayUIConfig.ServiceKind(0);
  v98 = *(_QWORD *)(v24 - 8);
  v99 = v24;
  __chkstk_darwin(v24);
  v96 = (char *)&v84 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = type metadata accessor for RemoteAlertRequest(0);
  v100 = *(_QWORD *)(v97 - 8);
  __chkstk_darwin(v97);
  v101 = v26;
  v102 = (uint64_t)&v84 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v103 = (char *)&v84 - v28;
  v92 = type metadata accessor for AccessPointAnchoring(0);
  v91 = *(_QWORD *)(v92 - 8);
  __chkstk_darwin(v92);
  v93 = (char *)&v84 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sub_100072058(1);
  if (v31)
  {
    v85 = v31;
    v86 = result;
    v87 = v14;
    v88 = a12;
    v90 = v23;
    v89 = a14;
    v32 = objc_msgSend((id)objc_opt_self(BSServiceConnection), "currentContext");
    v104 = a13;
    v33 = v32;
    v34 = type metadata accessor for InGameBannerConnectionContext();
    v35 = (_QWORD *)swift_allocObject(v34, 192, 7);
    v35[17] = 0;
    v35[18] = 0;
    v35[19] = 0;
    v35[20] = 0xF000000000000000;
    v35[22] = 0;
    v35[23] = 0;
    v35[21] = 0;
    v35[15] = a3;
    v35[16] = a4;
    swift_bridgeObjectRetain(a4);
    v36 = v33;
    v37 = v104;
    v38 = (_QWORD *)sub_1000B4464(v36);
    v39 = v38[18];
    v38[17] = a5;
    v38[18] = a6;
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRelease(v39);
    v40 = v38[22];
    v38[21] = a9;
    v38[22] = a10;
    v41 = v89;
    v42 = v88;
    v43 = (uint64_t)v90;
    swift_bridgeObjectRetain(a10);
    swift_bridgeObjectRelease(v40);
    v44 = v38[19];
    v45 = v38[20];
    v38[19] = a7;
    v38[20] = a8;
    sub_100019F80(a7, a8);
    sub_100038E18(v44, v45);
    v46 = v38[14];
    v38[13] = v37;
    v38[14] = v41;
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRelease(v46);
    if (v42 >> 60 != 15)
    {
      sub_1000509C8(0, &qword_10010E3C0, NSKeyedUnarchiver_ptr);
      v47 = sub_1000509C8(0, &qword_10010E3C8, GKGameInternal_ptr);
      sub_100019F94(a11, v42);
      v48 = (void *)static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v47, a11, v42, v47);
      if (v48)
      {
        v49 = objc_msgSend(objc_allocWithZone((Class)GKGame), "initWithInternalRepresentation:", v48);

        sub_100038E18(a11, v42);
        v50 = (void *)v38[23];
        v38[23] = v49;

      }
      else
      {
        if (qword_10010BAA0 != -1)
          swift_once(&qword_10010BAA0, sub_100004DCC);
        v51 = type metadata accessor for Logger(0);
        v52 = sub_100004E8C(v51, (uint64_t)qword_1001232D8);
        v53 = Logger.logObject.getter(v52);
        v54 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v53, v54))
        {
          v55 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v55 = 0;
          _os_log_impl((void *)&_mh_execute_header, v53, v54, "Game could not be deserialized", v55, 2u);
          swift_slowDealloc(v55, -1, -1);
        }
        sub_100038E18(a11, v42);

      }
    }
    v56 = (uint64_t)v93;
    (*(void (**)(char *, _QWORD, uint64_t))(v91 + 104))(v93, enum case for AccessPointAnchoring.topCentered(_:), v92);
    swift_retain(v38);
    v57 = v95;
    swift_bridgeObjectRetain(v95);
    v108._countAndFlagsBits = v94;
    v108._object = v57;
    v58 = _s13GameOverlayUI18AccessPointUseCaseO8rawValueACSgSS_tcfC_0(v108);
    if (v58 == 6)
      v59 = 5;
    else
      v59 = v58;
    v60 = type metadata accessor for RemoteAlertAccessPointContext(0);
    swift_allocObject(v60, *(unsigned int *)(v60 + 48), *(unsigned __int16 *)(v60 + 52));
    v61 = sub_1000A8F84(v86, v85, v56, v59, 0, 0, 0);
    v107[3] = v60;
    v107[4] = &off_100101A38;
    v107[0] = v61;
    sub_1000506E8((uint64_t)v107, (uint64_t)v106);
    swift_beginAccess(v38 + 8, v105, 33, 0);
    sub_100050730((uint64_t)v106, (uint64_t)(v38 + 8));
    swift_endAccess(v105);
    swift_release(v38);
    v62 = sub_100072058(0);
    v95 = (void *)v62;
    v64 = v63;
    v66 = v98;
    v65 = v99;
    v67 = v37;
    v68 = v96;
    (*(void (**)(char *, _QWORD, uint64_t))(v98 + 104))(v96, enum case for GameOverlayUIConfig.ServiceKind.dashboard(_:), v99);
    v69 = (double (*)())swift_allocObject(&unk_1000FE730, 56, 7);
    *((_QWORD *)v69 + 2) = v62;
    *((_QWORD *)v69 + 3) = v64;
    v70 = v43;
    v71 = v87;
    *((_QWORD *)v69 + 4) = v87;
    *((_QWORD *)v69 + 5) = v67;
    *((_QWORD *)v69 + 6) = v41;
    v72 = (uint64_t)v103;
    (*(void (**)(char *, char *, uint64_t))(v66 + 32))(v103, v68, v65);
    v73 = v97;
    *(_BYTE *)(v72 + *(int *)(v97 + 20)) = 1;
    *(_QWORD *)(v72 + *(int *)(v73 + 24)) = v38;
    v74 = (double (**)())(v72 + *(int *)(v73 + 28));
    *v74 = sub_1000507AC;
    v74[1] = v69;
    v75 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 56))(v70, 1, 1, v75);
    v76 = v102;
    sub_1000507C4(v72, v102);
    v77 = *(unsigned __int8 *)(v100 + 80);
    v78 = (v77 + 72) & ~v77;
    v79 = (_QWORD *)swift_allocObject(&unk_1000FE758, v78 + v101, v77 | 7);
    v79[2] = 0;
    v79[3] = 0;
    v79[4] = v95;
    v79[5] = v64;
    v80 = v104;
    v79[6] = v71;
    v79[7] = v80;
    v79[8] = v41;
    sub_1000508C0(v76, (uint64_t)v79 + v78);
    swift_bridgeObjectRetain(v64);
    swift_bridgeObjectRetain_n(v41, 2);
    v81 = v71;
    swift_retain(v38);
    v82 = v81;
    v83 = sub_100028240(v70, (uint64_t)&unk_10010E3B8, (uint64_t)v79);
    swift_release(v38);
    swift_release(v83);
    return sub_10005098C(v72);
  }
  return result;
}

uint64_t sub_10004D874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v7;

  v5[3] = a5;
  v5[4] = v7;
  v5[2] = a4;
  return swift_task_switch(sub_10004D898, 0, 0);
}

uint64_t sub_10004D898()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t **v2;

  v1 = v0[3];
  if (v1)
    sub_10004F420(v0[2], v1, 1);
  if (qword_10010BAF0 != -1)
    swift_once(&qword_10010BAF0, sub_100051BCC);
  v2 = (uint64_t **)swift_task_alloc(dword_10010E6D4);
  v0[5] = (uint64_t)v2;
  *v2 = v0;
  v2[1] = (uint64_t *)sub_10004D928;
  return sub_1000513BC(v0[4]);
}

uint64_t sub_10004D928()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 40));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10004DC0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7, char a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  *(_QWORD *)(v8 + 40) = a5;
  *(_QWORD *)(v8 + 48) = v11;
  *(_BYTE *)(v8 + 114) = a8;
  *(_BYTE *)(v8 + 113) = a7;
  *(_BYTE *)(v8 + 112) = a6;
  *(_QWORD *)(v8 + 32) = a4;
  v9 = sub_100003304(&qword_10010EB20);
  *(_QWORD *)(v8 + 56) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10004DC7C, 0, 0);
}

uint64_t sub_10004DC7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int v12;
  int v13;
  int v14;
  uint64_t v15;

  if (qword_10010BAA0 != -1)
    swift_once(&qword_10010BAA0, sub_100004DCC);
  v1 = *(_QWORD *)(v0 + 40);
  v2 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 64) = sub_100004E8C(v2, (uint64_t)qword_1001232D8);
  v3 = swift_bridgeObjectRetain_n(v1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v0 + 32);
    v14 = *(unsigned __int8 *)(v0 + 114);
    v12 = *(unsigned __int8 *)(v0 + 112);
    v13 = *(unsigned __int8 *)(v0 + 113);
    v7 = *(_QWORD *)(v0 + 40);
    v8 = swift_slowAlloc(30, -1);
    v9 = swift_slowAlloc(32, -1);
    v15 = v9;
    *(_DWORD *)v8 = 136315906;
    swift_bridgeObjectRetain(v7);
    *(_QWORD *)(v0 + 24) = sub_100031C58(v6, v7, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32);
    swift_bridgeObjectRelease_n(v7, 3);
    *(_WORD *)(v8 + 12) = 1024;
    *(_DWORD *)(v0 + 100) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 100, v0 + 104);
    *(_WORD *)(v8 + 18) = 1024;
    *(_DWORD *)(v0 + 104) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 108);
    *(_WORD *)(v8 + 24) = 1024;
    *(_DWORD *)(v0 + 108) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 108, v0 + 112);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Enqueuing Game Mode banner: %s available:%{BOOL}d required:%{BOOL}d enabled:%{BOOL}d", (uint8_t *)v8, 0x1Eu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 40), 2);
  }

  if (qword_10010BAF0 != -1)
    swift_once(&qword_10010BAF0, sub_100051BCC);
  *(_QWORD *)(v0 + 72) = qword_1001232F8;
  v10 = (_QWORD *)swift_task_alloc(dword_10010E6C4);
  *(_QWORD *)(v0 + 80) = v10;
  *v10 = v0;
  v10[1] = sub_10004DF14;
  return sub_100053EB0();
}

uint64_t sub_10004DF14()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 72);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 80));
  return swift_task_switch(sub_10004DF68, v1, 0);
}

uint64_t sub_10004DF68(uint64_t a1)
{
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;

  v1 = Logger.logObject.getter(a1);
  v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Presenting Game Mode banner", v3, 2u);
    swift_slowDealloc(v3, -1, -1);
  }

  return swift_task_switch(sub_10004E014, 0, 0);
}

uint64_t sub_10004E014()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v22;
  int v23;
  uint64_t v24;

  v1 = swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 40), 2);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v22 = *(unsigned __int8 *)(v0 + 113);
    v23 = *(unsigned __int8 *)(v0 + 114);
    v4 = *(unsigned __int8 *)(v0 + 112);
    v6 = *(_QWORD *)(v0 + 32);
    v5 = *(_QWORD *)(v0 + 40);
    v7 = swift_slowAlloc(30, -1);
    v8 = swift_slowAlloc(32, -1);
    v24 = v8;
    *(_DWORD *)v7 = 136315906;
    swift_bridgeObjectRetain(v5);
    *(_QWORD *)(v0 + 16) = sub_100031C58(v6, v5, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24);
    swift_bridgeObjectRelease_n(v5, 3);
    *(_WORD *)(v7 + 12) = 1024;
    *(_DWORD *)(v0 + 96) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 100);
    *(_DWORD *)(v0 + 88) = v22;
    *(_WORD *)(v7 + 18) = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 92);
    *(_WORD *)(v7 + 24) = 1024;
    *(_DWORD *)(v0 + 92) = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 92, v0 + 96);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Presenting Game Mode banner: %s available:%{BOOL}d required:%{BOOL}d enabled:%{BOOL}d", (uint8_t *)v7, 0x1Eu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 40), 2);
  }

  v10 = *(_QWORD *)(v0 + 48);
  v9 = *(_QWORD *)(v0 + 56);
  v11 = *(_BYTE *)(v0 + 114);
  v12 = *(_BYTE *)(v0 + 113);
  v13 = *(_BYTE *)(v0 + 112);
  v15 = *(_QWORD *)(v0 + 32);
  v14 = *(_QWORD *)(v0 + 40);
  v16 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v9, 1, 1, v16);
  type metadata accessor for MainActor(0);
  swift_bridgeObjectRetain(v14);
  v17 = swift_retain(v10);
  v18 = static MainActor.shared.getter(v17);
  v19 = swift_allocObject(&unk_1000FE6B8, 59, 7);
  *(_QWORD *)(v19 + 16) = v18;
  *(_QWORD *)(v19 + 24) = &protocol witness table for MainActor;
  *(_QWORD *)(v19 + 32) = v10;
  *(_QWORD *)(v19 + 40) = v15;
  *(_QWORD *)(v19 + 48) = v14;
  *(_BYTE *)(v19 + 56) = v13;
  *(_BYTE *)(v19 + 57) = v12;
  *(_BYTE *)(v19 + 58) = v11;
  v20 = sub_100028240(v9, (uint64_t)&unk_10010E290, v19);
  swift_release(v20);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004E2A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, char a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;

  *(_BYTE *)(v8 + 50) = v13;
  *(_BYTE *)(v8 + 49) = a8;
  *(_BYTE *)(v8 + 48) = a7;
  *(_QWORD *)(v8 + 24) = a5;
  *(_QWORD *)(v8 + 32) = a6;
  *(_QWORD *)(v8 + 16) = a4;
  v9 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v8 + 40) = static MainActor.shared.getter(v9);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  return swift_task_switch(sub_10004E324, v10, v11);
}

uint64_t sub_10004E324()
{
  uint64_t v0;
  char v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, char);
  uint64_t v7;
  char *v8;
  uint64_t (**v9)(uint64_t, uint64_t, char);
  uint64_t v10;
  uint64_t v11;
  double (**v12)();
  uint64_t v13;
  uint64_t v14;

  v1 = *(_BYTE *)(v0 + 50);
  v2 = *(_BYTE *)(v0 + 49);
  v3 = *(_BYTE *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 32);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, char))(v0 + 16);
  v5 = *(_QWORD *)(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 40));
  v7 = type metadata accessor for GamePolicyBannerViewController();
  v8 = (char *)objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v7)), "init");
  v9 = (uint64_t (**)(uint64_t, uint64_t, char))&v8[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_tapHandler];
  v10 = *(_QWORD *)&v8[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_tapHandler];
  v11 = *(_QWORD *)&v8[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_tapHandler + 8];
  *v9 = sub_100050578;
  v9[1] = v6;
  swift_retain(v6);
  sub_100050580(v10, v11);
  v12 = (double (**)())&v8[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_dismissHandler];
  v13 = *(_QWORD *)&v8[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_dismissHandler];
  v14 = *(_QWORD *)&v8[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_dismissHandler + 8];
  *v12 = sub_10004E75C;
  v12[1] = 0;
  sub_100050580(v13, v14);
  sub_10005F75C(v5, v4, v3, v2, v1);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004E41C(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  Class isa;
  uint64_t v15;
  uint64_t v16;
  objc_class *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[24];
  uint64_t v24;

  v8 = sub_100003304(&qword_10010EB20);
  __chkstk_darwin(v8);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010CBC(a4 + 24, (uint64_t)v23, &qword_10010EB30);
  if (!v24)
    return sub_100010ED0((uint64_t)v23, &qword_10010EB30);
  v11 = sub_100003304((uint64_t *)&unk_100111660);
  result = swift_dynamicCast(&v22, v23, (char *)&type metadata for Any + 8, v11, 6);
  if ((result & 1) != 0)
  {
    v13 = v22;
    sub_1000509C8(0, (unint64_t *)&qword_10010EB10, NSNumber_ptr);
    isa = NSNumber.init(BOOLeanLiteral:)(a3 & 1).super.super.isa;
    v15 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v10, 1, 1, v15);
    type metadata accessor for MainActor(0);
    swift_unknownObjectRetain(v13, v16);
    swift_bridgeObjectRetain(a2);
    v17 = isa;
    v18 = static MainActor.shared.getter(v17);
    v19 = (_QWORD *)swift_allocObject(&unk_1000FE708, 64, 7);
    v19[2] = v18;
    v19[3] = &protocol witness table for MainActor;
    v19[4] = v13;
    v19[5] = a1;
    v19[6] = a2;
    v19[7] = v17;
    v20 = sub_100028240((uint64_t)v10, (uint64_t)&unk_10010E2B0, (uint64_t)v19);
    swift_release(v20);

    return swift_unknownObjectRelease(v13);
  }
  return result;
}

uint64_t sub_10004E5CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  v8 = type metadata accessor for MainActor(0);
  v7[6] = static MainActor.shared.getter(v8);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v8, &protocol witness table for MainActor);
  return swift_task_switch(sub_10004E63C, v9, v10);
}

uint64_t sub_10004E63C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  void *v7;
  NSString v8;

  swift_release(*(_QWORD *)(v0 + 48));
  if (qword_10010BAA0 != -1)
    swift_once(&qword_10010BAA0, sub_100004DCC);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100004E8C(v1, (uint64_t)qword_1001232D8);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Game Mode banner was tapped.", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v0 + 40);
  v7 = *(void **)(v0 + 16);

  v8 = String._bridgeToObjectiveC()();
  objc_msgSend(v7, "setGameModeWithBundleIdentifier:enabled:", v8, v6);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

double sub_10004E75C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double result;
  uint64_t v14;

  v0 = sub_100003304(&qword_10010EB20);
  __chkstk_darwin(v0);
  v2 = (char *)&v14 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10010BAA0 != -1)
    swift_once(&qword_10010BAA0, sub_100004DCC);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_100004E8C(v3, (uint64_t)qword_1001232D8);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Game Mode banner was dismissed.", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  v8 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v2, 1, 1, v8);
  v9 = type metadata accessor for MainActor(0);
  v10 = static MainActor.shared.getter(v9);
  v11 = swift_allocObject(&unk_1000FE6E0, 32, 7);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = &protocol witness table for MainActor;
  v12 = sub_100028240((uint64_t)v2, (uint64_t)&unk_10010E2A0, v11);
  *(_QWORD *)&result = swift_release(v12).n128_u64[0];
  return result;
}

uint64_t sub_10004E8D4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = type metadata accessor for MainActor(0);
  v0[2] = static MainActor.shared.getter(v1);
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  v0[3] = v2;
  v0[4] = v3;
  return swift_task_switch(sub_10004E93C, v2, v3);
}

uint64_t sub_10004E93C()
{
  uint64_t v0;
  uint64_t v1;

  if (qword_10010BAF0 != -1)
    swift_once(&qword_10010BAF0, sub_100051BCC);
  v1 = qword_1001232F8;
  *(_QWORD *)(v0 + 40) = qword_1001232F8;
  return swift_task_switch(sub_10004E9A0, v1, 0);
}

uint64_t sub_10004E9A0()
{
  uint64_t v0;

  sub_100051780();
  return swift_task_switch(sub_10004E9D8, *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_10004E9D8()
{
  uint64_t v0;
  __n128 v1;

  v1 = swift_release(*(_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(__n128))(v0 + 8))(v1);
}

uint64_t sub_10004EAB4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000C9CE0);
  v8 = v3;
  v5 = sub_1000035B4(&qword_10010E3A0, type metadata accessor for RemoteAlertDashboardContext, (uint64_t)&unk_1000CDFEC);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(_QWORD *)(v3 + 24);
  *a2 = *(_QWORD *)(v3 + 16);
  a2[1] = v6;
  return swift_bridgeObjectRetain(v6);
}

void sub_10004EB44(uint64_t *a1, uint64_t *a2)
{
  _TtC13GameOverlayUI20GameOverlayUIService *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  SEL v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  _QWORD v14[7];
  uint64_t v15;

  v3 = *a1;
  v2 = (_TtC13GameOverlayUI20GameOverlayUIService *)a1[1];
  v4 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000C9CE0);
  v14[2] = v4;
  v14[3] = v3;
  v14[4] = v2;
  v15 = v4;
  v6 = sub_1000035B4(&qword_10010E3A0, type metadata accessor for RemoteAlertDashboardContext, (uint64_t)&unk_1000CDFEC);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v15, KeyPath, sub_100050FE0, v14, (char *)&type metadata for () + 8, v6);
  swift_release(KeyPath);
  swift_bridgeObjectRelease(v2, v7, v8, v9, v10, v11, v12, v13);
}

uint64_t sub_10004EC00(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, char a9, unsigned __int8 a10, uint64_t a11, uint64_t a12)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  id v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  _BYTE v70[24];
  _BYTE v71[40];
  _QWORD v72[6];

  v60 = a8;
  v59 = a7;
  v69 = a6;
  v67 = a1;
  v68 = a2;
  v58 = a11;
  LODWORD(v61) = a10;
  v15 = sub_100003304(&qword_10010EB20);
  __chkstk_darwin(v15);
  v66 = (char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = type metadata accessor for RemoteAlertRequest(0);
  v63 = *(_QWORD *)(v62 - 8);
  __chkstk_darwin(v62);
  v64 = v17;
  v65 = (uint64_t)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v20 = (char *)&v57 - v19;
  v21 = sub_100003304(&qword_1001116A0);
  __chkstk_darwin(v21);
  v23 = (char *)&v57 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for AccessPointAnchoring(0);
  v25 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v27 = (char *)&v57 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain(a5);
  AccessPointAnchoring.init(rawValue:)(a4, a5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24) == 1)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v25 + 104))(v27, enum case for AccessPointAnchoring.topLeading(_:), v24);
    sub_100010ED0((uint64_t)v23, &qword_1001116A0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v27, v23, v24);
  }
  v28 = type metadata accessor for RemoteAlertAccessPointContext(0);
  swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
  v29 = v68;
  swift_bridgeObjectRetain(v68);
  v30 = v67;
  v31 = v69;
  v32 = sub_1000A8F84(v67, v29, (uint64_t)v27, v69, 0, a9 & 1, v61 & 1);
  v72[3] = v28;
  v72[4] = &off_100101A38;
  v72[0] = v32;
  sub_1000506E8((uint64_t)v72, (uint64_t)v71);
  swift_beginAccess(a3 + 8, v70, 33, 0);
  v61 = v32;
  swift_retain(v32);
  sub_100050730((uint64_t)v71, (uint64_t)(a3 + 8));
  swift_endAccess(v70);
  v33 = a3[14];
  a3[13] = v58;
  a3[14] = a12;
  swift_bridgeObjectRetain(a12);
  swift_bridgeObjectRelease(v33);
  sub_1000509C8(0, &qword_10010E3C0, NSKeyedUnarchiver_ptr);
  v34 = sub_1000509C8(0, &qword_10010E3C8, GKGameInternal_ptr);
  v35 = (void *)static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v34, v59, v60, v34);
  if (v35)
  {
    v36 = objc_msgSend(objc_allocWithZone((Class)GKGame), "initWithInternalRepresentation:", v35);

    v37 = (void *)a3[15];
    a3[15] = v36;

  }
  else
  {
    if (qword_10010BAA0 != -1)
      swift_once(&qword_10010BAA0, sub_100004DCC);
    v52 = type metadata accessor for Logger(0);
    v53 = sub_100004E8C(v52, (uint64_t)qword_1001232D8);
    v54 = Logger.logObject.getter(v53);
    v55 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v54, v55))
    {
      v56 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v56 = 0;
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "Game could not be deserialized", v56, 2u);
      swift_slowDealloc(v56, -1, -1);
    }

  }
  v38 = enum case for GameOverlayUIConfig.ServiceKind.dashboard(_:);
  v39 = type metadata accessor for GameOverlayUIConfig.ServiceKind(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 104))(v20, v38, v39);
  v40 = v62;
  v20[*(int *)(v62 + 20)] = 0;
  *(_QWORD *)&v20[*(int *)(v40 + 24)] = a3;
  v41 = &v20[*(int *)(v40 + 28)];
  v42 = type metadata accessor for TaskPriority(0);
  *(_QWORD *)v41 = 0;
  *((_QWORD *)v41 + 1) = 0;
  v43 = (uint64_t)v66;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v66, 1, 1, v42);
  v44 = v65;
  sub_1000507C4((uint64_t)v20, v65);
  v45 = *(unsigned __int8 *)(v63 + 80);
  v46 = (v45 + 32) & ~v45;
  v47 = (v64 + v46 + 7) & 0xFFFFFFFFFFFFFFF8;
  v48 = swift_allocObject(&unk_1000FE848, v47 + 17, v45 | 7);
  *(_QWORD *)(v48 + 16) = 0;
  *(_QWORD *)(v48 + 24) = 0;
  sub_1000508C0(v44, v48 + v46);
  v49 = v48 + v47;
  *(_QWORD *)v49 = v30;
  *(_QWORD *)(v49 + 8) = v29;
  *(_BYTE *)(v49 + 16) = v31;
  swift_bridgeObjectRetain(v29);
  swift_retain(a3);
  v50 = sub_100028240(v43, (uint64_t)&unk_10010E418, v48);
  swift_release(v61);
  swift_release(v50);
  return sub_10005098C((uint64_t)v20);
}

double sub_10004F2B4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7, void *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v16;
  uint64_t v17;
  double result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  _QWORD *v24;
  int v25;
  int v26;
  uint64_t v27;
  Swift::String v30;

  v16 = sub_100072058(0);
  if (v17)
  {
    v19 = v16;
    v20 = v17;
    v27 = a6;
    v21 = a5;
    v22 = objc_msgSend((id)objc_opt_self(BSServiceConnection), "currentContext");
    v23 = type metadata accessor for AccessPointConnectionContext();
    *(_QWORD *)(swift_allocObject(v23, 128, 7) + 120) = 0;
    v24 = (_QWORD *)sub_1000B4464(v22);
    swift_bridgeObjectRetain(a4);
    v30._countAndFlagsBits = a3;
    v30._object = a4;
    v25 = _s13GameOverlayUI18AccessPointUseCaseO8rawValueACSgSS_tcfC_0(v30);
    if (v25 == 6)
      v26 = 1;
    else
      v26 = v25;
    sub_10004EC00(v19, v20, v24, a1, a2, v26, v21, v27, (char)objc_msgSend(a7, "BOOLValueSafe"), objc_msgSend(a8, "BOOLValueSafe"), a9, a10);
    swift_bridgeObjectRelease(v20);
    *(_QWORD *)&result = swift_release(v24).n128_u64[0];
  }
  return result;
}

double sub_10004F420(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ObjectType;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  double result;
  _QWORD v29[4];

  v6 = sub_100003304(&qword_10010EB20);
  __chkstk_darwin(v6);
  v8 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TaskPriority(0);
  v10 = *(_QWORD *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
  v11 = swift_allocObject(&unk_1000FE780, 49, 7);
  *(_QWORD *)(v11 + 16) = 0;
  v12 = (_QWORD *)(v11 + 16);
  *(_QWORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 32) = a1;
  *(_QWORD *)(v11 + 40) = a2;
  *(_BYTE *)(v11 + 48) = a3;
  v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9);
  v14 = swift_bridgeObjectRetain(a2);
  if (v13 == 1)
  {
    sub_100010ED0((uint64_t)v8, &qword_10010EB20);
    v15 = 0;
    v16 = 0;
    v17 = 7168;
  }
  else
  {
    v18 = TaskPriority.rawValue.getter(v14);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    v17 = v18 | 0x1C00;
    v20 = *v12;
    if (*v12)
    {
      v21 = *(_QWORD *)(v11 + 24);
      ObjectType = swift_getObjectType(*v12, v19);
      swift_unknownObjectRetain(v20, v23);
      v15 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v21);
      v16 = v24;
      swift_unknownObjectRelease(v20);
    }
    else
    {
      v15 = 0;
      v16 = 0;
    }
  }
  v25 = swift_allocObject(&unk_1000FE7A8, 32, 7);
  *(_QWORD *)(v25 + 16) = &unk_10010E3D8;
  *(_QWORD *)(v25 + 24) = v11;
  if (v16 | v15)
  {
    v29[0] = 0;
    v29[1] = 0;
    v26 = v29;
    v29[2] = v15;
    v29[3] = v16;
  }
  else
  {
    v26 = 0;
  }
  v27 = swift_task_create(v17, v26, (char *)&type metadata for () + 8, &unk_10010D1F0, v25);
  *(_QWORD *)&result = swift_release(v27).n128_u64[0];
  return result;
}

uint64_t sub_10004F604(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t result;
  int64_t j;
  unint64_t v13;
  unint64_t i;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;

  v6 = a1 + 64;
  v7 = 1 << *(_BYTE *)(a1 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a1 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  result = swift_bridgeObjectRetain(a1);
  j = 0;
  if (!v9)
    goto LABEL_5;
LABEL_4:
  v13 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (i = v13 | (j << 6); ; i = __clz(__rbit64(v16)) + (j << 6))
  {
    v18 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v19 = *v18;
    v20 = v18[1];
    swift_bridgeObjectRetain(v20);
    v21._countAndFlagsBits = a2;
    v21._object = a3;
    if (String.hasPrefix(_:)(v21))
    {
      swift_release(a1);
      return v19;
    }
    result = swift_bridgeObjectRelease(v20);
    if (v9)
      goto LABEL_4;
LABEL_5:
    v15 = j + 1;
    if (__OFADD__(j, 1))
      break;
    if (v15 >= v10)
      goto LABEL_24;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++j;
    if (v16)
      goto LABEL_19;
    j = v15 + 1;
    if (v15 + 1 >= v10)
      goto LABEL_24;
    v16 = *(_QWORD *)(v6 + 8 * j);
    if (v16)
      goto LABEL_19;
    j = v15 + 2;
    if (v15 + 2 >= v10)
      goto LABEL_24;
    v16 = *(_QWORD *)(v6 + 8 * j);
    if (v16)
      goto LABEL_19;
    j = v15 + 3;
    if (v15 + 3 >= v10)
      goto LABEL_24;
    v16 = *(_QWORD *)(v6 + 8 * j);
    if (v16)
      goto LABEL_19;
    v17 = v15 + 4;
    if (v17 >= v10)
    {
LABEL_24:
      swift_release(a1);
      return 0;
    }
    v16 = *(_QWORD *)(v6 + 8 * v17);
    for (j = v17; !v16; ++v17)
    {
      j = v17 + 1;
      if (__OFADD__(v17, 1))
        goto LABEL_27;
      if (j >= v10)
        goto LABEL_24;
      v16 = *(_QWORD *)(v6 + 8 * j);
    }
LABEL_19:
    v9 = (v16 - 1) & v16;
  }
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

void sub_10004F7AC(uint64_t a1, uint64_t a2, id *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  char *v11;
  id v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  _TtC13GameOverlayUI20GameOverlayUIService *v19;
  _TtC13GameOverlayUI20GameOverlayUIService *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  _TtC13GameOverlayUI20GameOverlayUIService *v38;
  void *v39;
  Class isa;
  SEL v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  Class v48;
  id v49;
  _TtC13GameOverlayUI20GameOverlayUIService *v50;
  _TtC13GameOverlayUI20GameOverlayUIService *v51;
  uint64_t v52;
  const char *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  uint64_t v60;
  id v61;
  char *v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  _TtC13GameOverlayUI20GameOverlayUIService *v68;
  SEL v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t KeyPath;
  char *v80;
  uint64_t v81;
  SEL v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  __n128 v89;
  NSObject *v90;
  __n128 v91;
  _TtC13GameOverlayUI20GameOverlayUIService *v92;
  SEL v93;
  id v94;
  id v95;
  id v96;
  id v97;
  id v98;
  id v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  NSObject *v104;
  os_log_type_t v105;
  uint8_t *v106;
  _TtC13GameOverlayUI20GameOverlayUIService **v107;
  _TtC13GameOverlayUI20GameOverlayUIService *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  NSObject *v112;
  os_log_type_t v113;
  uint8_t *v114;
  char *v115;
  id *v116;
  char *v117;
  NSObject *v118;
  _BYTE v119[24];
  _QWORD v120[5];
  _TtC13GameOverlayUI20GameOverlayUIService *v121;
  _QWORD v122[4];

  v8 = type metadata accessor for GameOverlayUIConfig.ServiceKind(0);
  v9 = *(NSObject **)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v115 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_msgSend(objc_allocWithZone((Class)FBSSystemService), "init");
  v13 = objc_msgSend(v12, "isPasscodeLockedOrBlocked");

  if ((v13 & 1) != 0)
  {
    if (qword_10010BAA0 != -1)
      swift_once(&qword_10010BAA0, sub_100004DCC);
    v14 = type metadata accessor for Logger(0);
    v15 = sub_100004E8C(v14, (uint64_t)qword_1001232D8);
    v118 = Logger.logObject.getter(v15);
    v16 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v118, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v118, v16, "Skipping dashboard request because device is locked or blocked.", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }

  }
  else
  {
    v18 = sub_100072058(2);
    if (v19)
    {
      v20 = v19;
      v116 = a3;
      v117 = (char *)v18;
      v118 = v9;
      v21 = sub_100003304(&qword_10010E2B8);
      v22 = swift_allocObject(v21, 480, 7);
      *(_OWORD *)(v22 + 16) = xmmword_1000C9CD0;
      v23 = sub_1000509C8(0, &qword_10010E2C0, NSArray_ptr);
      *(_QWORD *)(v22 + 56) = sub_100003304(&qword_10010E2C8);
      *(_QWORD *)(v22 + 32) = v23;
      v24 = sub_1000509C8(0, &qword_10010E2D0, NSDictionary_ptr);
      *(_QWORD *)(v22 + 88) = sub_100003304(&qword_10010E2D8);
      *(_QWORD *)(v22 + 64) = v24;
      v25 = sub_1000509C8(0, &qword_10010E2E0, NSData_ptr);
      *(_QWORD *)(v22 + 120) = sub_100003304(&qword_10010E2E8);
      *(_QWORD *)(v22 + 96) = v25;
      v26 = sub_1000509C8(0, &qword_10010E2F0, NSDate_ptr);
      *(_QWORD *)(v22 + 152) = sub_100003304(&qword_10010E2F8);
      *(_QWORD *)(v22 + 128) = v26;
      v27 = sub_1000509C8(0, &qword_10010E300, NSError_ptr);
      *(_QWORD *)(v22 + 184) = sub_100003304(&qword_10010E308);
      *(_QWORD *)(v22 + 160) = v27;
      v28 = sub_1000509C8(0, &qword_10010E310, NSMutableArray_ptr);
      *(_QWORD *)(v22 + 216) = sub_100003304(&qword_10010E318);
      *(_QWORD *)(v22 + 192) = v28;
      v29 = sub_1000509C8(0, &qword_10010E320, NSMutableDictionary_ptr);
      *(_QWORD *)(v22 + 248) = sub_100003304(&qword_10010E328);
      *(_QWORD *)(v22 + 224) = v29;
      v30 = sub_1000509C8(0, &qword_10010E330, NSMutableData_ptr);
      *(_QWORD *)(v22 + 280) = sub_100003304(&qword_10010E338);
      *(_QWORD *)(v22 + 256) = v30;
      v31 = sub_1000509C8(0, (unint64_t *)&qword_10010EB10, NSNumber_ptr);
      *(_QWORD *)(v22 + 312) = sub_100003304(&qword_10010E340);
      *(_QWORD *)(v22 + 288) = v31;
      v32 = sub_1000509C8(0, &qword_10010E348, NSString_ptr);
      *(_QWORD *)(v22 + 344) = sub_100003304(&qword_10010E350);
      *(_QWORD *)(v22 + 320) = v32;
      v33 = sub_1000509C8(0, &qword_10010E358, GKGame_ptr);
      *(_QWORD *)(v22 + 376) = sub_100003304(&qword_10010E360);
      *(_QWORD *)(v22 + 352) = v33;
      v34 = sub_1000509C8(0, &qword_10010E368, GKLeaderboardInternal_ptr);
      *(_QWORD *)(v22 + 408) = sub_100003304(&qword_10010E370);
      *(_QWORD *)(v22 + 384) = v34;
      v35 = sub_1000509C8(0, (unint64_t *)&qword_1001116E0, GKLocalPlayer_ptr);
      *(_QWORD *)(v22 + 440) = sub_100003304(&qword_10010E378);
      *(_QWORD *)(v22 + 416) = v35;
      v36 = sub_1000509C8(0, &qword_10010E380, GKPlayer_ptr);
      *(_QWORD *)(v22 + 472) = sub_100003304(&qword_10010E388);
      *(_QWORD *)(v22 + 448) = v36;
      sub_1000509C8(0, &qword_10010E390, NSSet_ptr);
      v37 = (void *)NSSet.init(arrayLiteral:)(v22);
      v121 = 0;
      static Set._forceBridgeFromObjectiveC(_:result:)(v37, &v121, &type metadata for AnyHashable, &protocol witness table for AnyHashable);
      v38 = v121;
      if (v121)
      {

        v39 = (void *)objc_opt_self(NSKeyedUnarchiver);
        isa = Set._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v38, v41, v42, v43, v44, v45, v46, v47, v115);
        v48 = Data._bridgeToObjectiveC()().super.isa;
        v121 = 0;
        v49 = objc_msgSend(v39, "unarchivedObjectOfClasses:fromData:error:", isa, v48, &v121);

        v50 = v121;
        if (v49)
        {
          v51 = v121;
          _bridgeAnyObjectToAny(_:)(&v121);
          swift_unknownObjectRelease(v49);
          v52 = sub_100003304(&qword_10010E398);
          if (swift_dynamicCast(v120, &v121, (char *)&type metadata for Any + 8, v52, 6))
          {
            v60 = v120[0];
            v61 = objc_allocWithZone((Class)type metadata accessor for DashboardRequest());
            v62 = DashboardRequest.init(initialState:)(v60);
            v63 = objc_msgSend((id)objc_opt_self(BSServiceConnection), "currentContext");
            v64 = type metadata accessor for DashboardConnectionContext();
            v65 = swift_allocObject(v64, 129, 7);
            *(_QWORD *)(v65 + 120) = 0;
            *(_BYTE *)(v65 + 128) = 0;
            v66 = sub_1000B4464(v63);
            v67 = *(void **)(v66 + 120);
            *(_QWORD *)(v66 + 120) = v62;
            v115 = v62;

            *(_BYTE *)(v66 + 128) = objc_msgSend(v116, "BOOLValueSafe");
            v68 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v66 + 112);
            *(_QWORD *)(v66 + 104) = a4;
            *(_QWORD *)(v66 + 112) = a5;
            swift_bridgeObjectRetain(a5);
            swift_bridgeObjectRelease(v68, v69, v70, v71, v72, v73, v74, v75, v115);
            v76 = type metadata accessor for RemoteAlertDashboardContext(0);
            v77 = (char *)swift_allocObject(v76, *(unsigned int *)(v76 + 48), *(unsigned __int16 *)(v76 + 52));
            *((_QWORD *)v77 + 2) = 0;
            *((_QWORD *)v77 + 3) = 0;
            v78 = swift_unknownObjectWeakInit(v77 + 32, 0);
            ObservationRegistrar.init()(v78);
            KeyPath = swift_getKeyPath(&unk_1000C9CE0);
            v116 = (id *)&v115;
            __chkstk_darwin(KeyPath);
            v80 = v117;
            *(&v115 - 4) = v77;
            *(&v115 - 3) = v80;
            *(&v115 - 2) = (char *)v20;
            v121 = (_TtC13GameOverlayUI20GameOverlayUIService *)v77;
            v81 = sub_1000035B4(&qword_10010E3A0, type metadata accessor for RemoteAlertDashboardContext, (uint64_t)&unk_1000CDFEC);
            ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v121, KeyPath, sub_100032424, &v115 - 6, (char *)&type metadata for () + 8, v81);
            swift_release(KeyPath);
            swift_bridgeObjectRelease(v20, v82, v83, v84, v85, v86, v87, v88, v115);
            v122[2] = v76;
            v122[3] = &off_100101A28;
            v121 = (_TtC13GameOverlayUI20GameOverlayUIService *)v77;
            sub_1000506E8((uint64_t)&v121, (uint64_t)v120);
            swift_beginAccess(v66 + 64, v119, 33, 0);
            swift_retain(v66);
            swift_retain(v77);
            sub_100050730((uint64_t)v120, v66 + 64);
            swift_endAccess(v119);
            v89 = swift_release(v66);
            v90 = v118;
            ((void (*)(char *, _QWORD, uint64_t, __n128))v118[13].isa)(v11, enum case for GameOverlayUIConfig.ServiceKind.dashboard(_:), v8, v89);
            sub_100056174((uint64_t)v11, 2, v66);

            swift_release(v77);
            v91 = swift_release(v66);
            ((void (*)(char *, uint64_t, __n128))v90[1].isa)(v11, v8, v91);
          }
          else
          {
            swift_bridgeObjectRelease(v20, v53, v54, v55, v56, v57, v58, v59, v115);
            if (qword_10010BAA0 != -1)
              swift_once(&qword_10010BAA0, sub_100004DCC);
            v110 = type metadata accessor for Logger(0);
            v111 = sub_100004E8C(v110, (uint64_t)qword_1001232D8);
            v112 = Logger.logObject.getter(v111);
            v113 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v112, v113))
            {
              v114 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v114 = 0;
              _os_log_impl((void *)&_mh_execute_header, v112, v113, "Unexpected type encountered for initial state dictionary", v114, 2u);
              swift_slowDealloc(v114, -1, -1);
            }

          }
        }
        else
        {
          v92 = v121;
          swift_bridgeObjectRelease(v20, v93, v94, v95, v96, v97, v98, v99, v115);
          v100 = _convertNSErrorToError(_:)(v50);

          swift_willThrow(v101);
          if (qword_10010BAA0 != -1)
            swift_once(&qword_10010BAA0, sub_100004DCC);
          v102 = type metadata accessor for Logger(0);
          sub_100004E8C(v102, (uint64_t)qword_1001232D8);
          swift_errorRetain(v100);
          v103 = swift_errorRetain(v100);
          v104 = Logger.logObject.getter(v103);
          v105 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v104, v105))
          {
            v106 = (uint8_t *)swift_slowAlloc(12, -1);
            v107 = (_TtC13GameOverlayUI20GameOverlayUIService **)swift_slowAlloc(8, -1);
            *(_DWORD *)v106 = 138412290;
            swift_errorRetain(v100);
            v108 = (_TtC13GameOverlayUI20GameOverlayUIService *)_swift_stdlib_bridgeErrorToNSError(v100);
            v121 = v108;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, v122);
            *v107 = v108;
            swift_errorRelease(v100);
            swift_errorRelease(v100);
            _os_log_impl((void *)&_mh_execute_header, v104, v105, "Could not deserialize initial state dictionary: %@", v106, 0xCu);
            v109 = sub_100003304(&qword_10010EB00);
            swift_arrayDestroy(v107, 1, v109);
            swift_slowDealloc(v107, -1, -1);
            swift_slowDealloc(v106, -1, -1);

            swift_errorRelease(v100);
          }
          else
          {
            swift_errorRelease(v100);
            swift_errorRelease(v100);
            swift_errorRelease(v100);

          }
        }
      }
      else
      {
        __break(1u);
      }
    }
  }
}

double sub_10005023C(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  unsigned __int8 v14;
  double result;
  id v16;
  uint64_t v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v10 = sub_100003304(&qword_10010EB20);
  __chkstk_darwin(v10);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = objc_msgSend(objc_allocWithZone((Class)FBSSystemService), "init");
  v14 = objc_msgSend(v13, "isPasscodeLockedOrBlocked");

  if ((v14 & 1) == 0)
  {
    v16 = objc_msgSend((id)objc_opt_self(BSServiceConnection), "currentContext");
    v17 = sub_1000B4990(v16);
    v18 = objc_msgSend(a3, "BOOLValueSafe");
    v19 = objc_msgSend(a4, "BOOLValueSafe");
    v20 = objc_msgSend(a5, "BOOLValueSafe");
    v21 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v12, 1, 1, v21);
    v22 = swift_allocObject(&unk_1000FE690, 64, 7);
    *(_QWORD *)(v22 + 16) = 0;
    *(_QWORD *)(v22 + 24) = 0;
    *(_QWORD *)(v22 + 32) = a1;
    *(_QWORD *)(v22 + 40) = a2;
    *(_BYTE *)(v22 + 48) = v18;
    *(_BYTE *)(v22 + 49) = v19;
    *(_BYTE *)(v22 + 50) = v20;
    *(_QWORD *)(v22 + 56) = v17;
    swift_bridgeObjectRetain(a2);
    v23 = sub_100028240((uint64_t)v12, (uint64_t)&unk_10010E280, v22);
    *(_QWORD *)&result = swift_release(v23).n128_u64[0];
  }
  return result;
}

uint64_t sub_1000503C0()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_bridgeObjectRelease(v0[5]);
  swift_release(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000503F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_BYTE *)(v1 + 48);
  v9 = *(_BYTE *)(v1 + 49);
  v10 = *(_BYTE *)(v1 + 50);
  v11 = (_QWORD *)swift_task_alloc(dword_10010E27C);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_1000252CC;
  return sub_10004DC0C(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_10005049C()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  return swift_deallocObject(v0, 59, 7);
}

uint64_t sub_1000504D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_QWORD *)(v1 + 48);
  v9 = *(_BYTE *)(v1 + 56);
  v10 = *(_BYTE *)(v1 + 57);
  v11 = (_QWORD *)swift_task_alloc(dword_10010E28C);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_1000263E8;
  return sub_10004E2A0(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_100050578(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return sub_10004E41C(a1, a2, a3, v3);
}

double sub_100050580(uint64_t a1, uint64_t a2)
{
  double result;

  if (a1)
    *(_QWORD *)&result = swift_release(a2).n128_u64[0];
  return result;
}

uint64_t sub_100050590()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000505B4()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10010E29C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1000263E8;
  return sub_10004E8D4();
}

uint64_t sub_100050618()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));

  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100050654(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc(dword_10010E2AC);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_1000263E8;
  return sub_10004E5CC(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_1000506E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003304(&qword_10010E3A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100050730(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003304(&qword_10010E3A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100050778()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

double sub_1000507AC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(v0 + 24);
  if (v1)
    return sub_10004F420(*(_QWORD *)(v0 + 16), v1, 0);
  return result;
}

uint64_t sub_1000507C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RemoteAlertRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100050808()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  SEL v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  SEL v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  _QWORD *v21;

  v1 = type metadata accessor for RemoteAlertRequest(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 72) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v0 + 40), v6, v7, v8, v9, v10, v11, v12);

  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v0 + 64), v13, v14, v15, v16, v17, v18, v19);
  v20 = type metadata accessor for GameOverlayUIConfig.ServiceKind(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v0 + v4, v20);
  swift_release(*(_QWORD *)(v0 + v4 + *(int *)(v1 + 24)));
  v21 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 28));
  if (*v21)
    swift_release(v21[1]);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1000508C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RemoteAlertRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100050904()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for RemoteAlertRequest(0) - 8) + 80);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = v0 + ((v2 + 72) & ~v2);
  v6 = (_QWORD *)swift_task_alloc(dword_10010E3B4);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_1000263E8;
  v6[3] = v4;
  v6[4] = v5;
  v6[2] = v3;
  return swift_task_switch(sub_10004D898, 0, 0);
}

uint64_t sub_10005098C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for RemoteAlertRequest(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000509C8(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_100050A00()
{
  return sub_100050E7C(49);
}

uint64_t sub_100050A08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _QWORD *v9;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_BYTE *)(v1 + 48);
  v9 = (_QWORD *)swift_task_alloc(dword_10010E3D4);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_1000263E8;
  return sub_10004BCE8(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_100050A88()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100050AAC()
{
  return sub_100050F34(41);
}

uint64_t sub_100050AB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _QWORD *v8;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_BYTE *)(v1 + 40);
  v8 = (_QWORD *)swift_task_alloc(dword_10010E3E4);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_1000263E8;
  return sub_10004C134(a1, v4, v5, v6, v7);
}

uint64_t sub_100050B38()
{
  uint64_t v0;
  SEL v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  SEL v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v0 + 40), v1, v2, v3, v4, v5, v6, v7);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v0 + 56), v8, v9, v10, v11, v12, v13, v14);

  swift_release(*(_QWORD *)(v0 + 72));
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v0 + 88), v15, v16, v17, v18, v19, v20, v21);
  sub_100038198(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v0 + 120), v22, v23, v24, v25, v26, v27, v28);
  return swift_deallocObject(v0, 128, 7);
}

uint64_t sub_100050B94(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = (_QWORD *)swift_task_alloc(dword_10010E3F4);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_1000263E8;
  return sub_10004C6B0(a1, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_100050C64()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_bridgeObjectRelease(v0[5]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100050C98(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_10010E404);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_1000263E8;
  return sub_10004CCA4(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_100050D20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;

  v1 = type metadata accessor for RemoteAlertRequest(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  v6 = type metadata accessor for GameOverlayUIConfig.ServiceKind(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v0 + v4, v6);
  swift_release(*(_QWORD *)(v0 + v4 + *(int *)(v1 + 24)));
  v14 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 28));
  if (*v14)
    swift_release(v14[1]);
  v15 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v16 = v15 + 17;
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v0 + v15 + 8), v7, v8, v9, v10, v11, v12, v13);
  return swift_deallocObject(v0, v16, v3 | 7);
}

uint64_t sub_100050DE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v2 = *(_QWORD *)(type metadata accessor for RemoteAlertRequest(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8) + v0;
  v5 = v0 + v3;
  v6 = *(_BYTE *)(v4 + 16);
  v7 = swift_task_alloc(dword_10010E414);
  *(_QWORD *)(v1 + 16) = v7;
  *(_QWORD *)v7 = v1;
  *(_QWORD *)(v7 + 8) = sub_1000263E8;
  *(_BYTE *)(v7 + 32) = v6;
  *(_QWORD *)(v7 + 16) = v5;
  return swift_task_switch(sub_10004B2DC, 0, 0);
}

uint64_t sub_100050E74()
{
  return sub_100050E7C(48);
}

uint64_t sub_100050E7C(uint64_t a1)
{
  uint64_t v1;

  swift_unknownObjectRelease(*(_QWORD *)(v1 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 40));
  return swift_deallocObject(v1, a1, 7);
}

uint64_t sub_100050EB4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_10010E424);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_1000263E8;
  return sub_10004B3B8(a1, v4, v5, v7, v6);
}

uint64_t sub_100050F2C()
{
  return sub_100050F34(40);
}

uint64_t sub_100050F34(uint64_t a1)
{
  uint64_t v1;

  swift_unknownObjectRelease(*(_QWORD *)(v1 + 16));
  swift_release(*(_QWORD *)(v1 + 32));
  return swift_deallocObject(v1, a1, 7);
}

uint64_t sub_100050F6C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10010E434);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1000263E8;
  return sub_10004B7F8(a1, v4, v5, v6);
}

uint64_t sub_100050FE0()
{
  return sub_100032424();
}

uint64_t sub_100050FF4(unint64_t a1, unint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  unint64_t i;
  uint64_t v23;
  unint64_t v24;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34[3];

  v3 = v2;
  v6 = sub_100003304(&qword_10010E658);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10010BAA0 != -1)
LABEL_23:
    swift_once(&qword_10010BAA0, sub_100004DCC);
  v10 = type metadata accessor for Logger(0);
  sub_100004E8C(v10, (uint64_t)qword_1001232D8);
  v11 = swift_bridgeObjectRetain_n(a2, 2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v30 = v3;
    v14 = swift_slowAlloc(12, -1);
    v31 = a1;
    v15 = (uint8_t *)v14;
    v16 = swift_slowAlloc(32, -1);
    v34[0] = v16;
    *(_DWORD *)v15 = 136315138;
    swift_bridgeObjectRetain(a2);
    v32 = sub_100031C58(v31, a2, v34);
    v3 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Game Center banner finished animations for %s", v15, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    v17 = v15;
    a1 = v31;
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  swift_beginAccess(v3 + 136, v34, 33, 0);
  sub_100054B00(a1, a2);
  v19 = v18;
  swift_endAccess(v34);
  result = swift_bridgeObjectRelease(v19);
  v21 = *(_QWORD *)(*((_QWORD *)v3 + 17) + 16);
  *((_QWORD *)v3 + 16) = v21;
  if (!v21)
  {
    a2 = (unint64_t)(v3 + 152);
    result = swift_beginAccess(v3 + 152, v34, 0, 0);
    for (i = *((_QWORD *)v3 + 19); *(_QWORD *)(i + 16); i = *(_QWORD *)a2)
    {
      swift_beginAccess(a2, &v32, 33, 0);
      v24 = *(_QWORD *)a2;
      if (!*(_QWORD *)(*(_QWORD *)a2 + 16))
      {
        __break(1u);
LABEL_22:
        __break(1u);
        goto LABEL_23;
      }
      a1 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v24 + a1, v6);
      v3 = *(char **)(v24 + 16);
      if (!v3)
        goto LABEL_22;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v24);
      if (!isUniquelyReferenced_nonNull_native || (unint64_t)(v3 - 1) > *(_QWORD *)(v24 + 24) >> 1)
        v24 = sub_100054640(isUniquelyReferenced_nonNull_native, (int64_t)v3, 1, v24);
      v3 = (char *)(v24 + a1);
      swift_arrayDestroy(v24 + a1, 1, v6);
      v26 = *(_QWORD *)(v24 + 16);
      if (!v26)
      {
        result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
        __break(1u);
        return result;
      }
      v27 = v26 - 1;
      v28 = *(_QWORD *)(v7 + 72);
      v29 = &v3[v28];
      if (v28 > 0 || v3 >= &v29[v28 * v27])
      {
        swift_arrayInitWithTakeFrontToBack(v24 + a1, v29, v27, v6);
      }
      else if (v28)
      {
        swift_arrayInitWithTakeBackToFront(v24 + a1);
      }
      --*(_QWORD *)(v24 + 16);
      *(_QWORD *)a2 = v24;
      v23 = swift_endAccess(&v32);
      CheckedContinuation.resume(returning:)(v23, v6);
      result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }
  }
  return result;
}

uint64_t sub_1000513BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch(sub_1000513D4, v1, 0);
}

uint64_t sub_1000513D4()
{
  uint64_t v0;
  id v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v1 = objc_msgSend(objc_allocWithZone((Class)FBSSystemService), "init");
  v2 = objc_msgSend(v1, "isPasscodeLockedOrBlocked");

  if ((v2 & 1) != 0)
  {
    if (qword_10010BAA0 != -1)
      swift_once(&qword_10010BAA0, sub_100004DCC);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_100004E8C(v3, (uint64_t)qword_1001232D8);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v5, v6))
      goto LABEL_13;
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    v8 = "Skipping in-game banner request because device is locked or blocked.";
    goto LABEL_12;
  }
  v9 = sub_100051A50();
  *(_QWORD *)(v0 + 32) = v9;
  *(_QWORD *)(v0 + 40) = v10;
  if (v10)
  {
    v11 = v9;
    v12 = v10;
    v13 = (_QWORD *)swift_task_alloc(dword_10010E6DC);
    *(_QWORD *)(v0 + 48) = v13;
    *v13 = v0;
    v13[1] = sub_1000515D4;
    v14 = *(_QWORD *)(v0 + 24);
    v13[3] = v12;
    v13[4] = v14;
    v13[2] = v11;
    return swift_task_switch(sub_100053BA0, v14, 0);
  }
  if (qword_10010BAA0 != -1)
    swift_once(&qword_10010BAA0, sub_100004DCC);
  v16 = type metadata accessor for Logger(0);
  v17 = sub_100004E8C(v16, (uint64_t)qword_1001232D8);
  v5 = Logger.logObject.getter(v17);
  v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    v8 = "Enqueuing in game banner request without a valid remote context or token.";
LABEL_12:
    _os_log_impl((void *)&_mh_execute_header, v5, v6, v8, v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }
LABEL_13:

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000515D4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 24);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 48));
  return swift_task_switch(sub_10005162C, v1, 0);
}

uint64_t sub_10005162C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  unint64_t v10;
  unint64_t v11;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(void **)(*(_QWORD *)(v1 + *(int *)(type metadata accessor for RemoteAlertRequest(0) + 24)) + 16);
  if (v2)
  {
    v3 = v2;
    if ((sub_1000B40A0() & 1) != 0)
    {
      v4 = *(_QWORD *)(v0 + 16);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
      sub_100051C28(v4, 0, 0, 0);

      return (*(uint64_t (**)(void))(v0 + 8))();
    }

  }
  if (qword_10010BAA0 != -1)
    swift_once(&qword_10010BAA0, sub_100004DCC);
  v5 = type metadata accessor for Logger(0);
  v6 = sub_100004E8C(v5, (uint64_t)qword_1001232D8);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "In-game banner request without a valid remote target.", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }
  v11 = *(_QWORD *)(v0 + 32);
  v10 = *(_QWORD *)(v0 + 40);

  sub_100050FF4(v11, v10);
  swift_bridgeObjectRelease(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100051780()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t i;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _BYTE v24[24];
  _BYTE v25[24];

  v1 = v0;
  v2 = sub_100003304(&qword_10010E658);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v24[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_10010BAA0 != -1)
LABEL_25:
    swift_once(&qword_10010BAA0, sub_100004DCC);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_100004E8C(v6, (uint64_t)qword_1001232D8);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Game Mode banner dismissed", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v11 = *(_QWORD *)(v1 + 120);
  v12 = __OFSUB__(v11, 1);
  v13 = v11 - 1;
  if (v12)
  {
    __break(1u);
LABEL_27:
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v1 + 120) = v13;
    if (v13 < 0)
    {
      *(_QWORD *)(v1 + 120) = 0;
    }
    else if (v13)
    {
      return;
    }
    v14 = (unint64_t *)(v1 + 144);
    swift_beginAccess(v1 + 144, v25, 0, 0);
    for (i = *(_QWORD *)(v1 + 144); *(_QWORD *)(i + 16); i = *v14)
    {
      swift_beginAccess(v14, v24, 33, 0);
      v17 = *v14;
      if (!*(_QWORD *)(*v14 + 16))
      {
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      v18 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
      (*(void (**)(_BYTE *, unint64_t, uint64_t))(v3 + 16))(v5, v17 + v18, v2);
      v1 = *(_QWORD *)(v17 + 16);
      if (!v1)
        goto LABEL_24;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v17);
      if (!isUniquelyReferenced_nonNull_native || v1 - 1 > *(_QWORD *)(v17 + 24) >> 1)
        v17 = sub_100054640(isUniquelyReferenced_nonNull_native, v1, 1, v17);
      v1 = v17 + v18;
      swift_arrayDestroy(v17 + v18, 1, v2);
      v20 = *(_QWORD *)(v17 + 16);
      if (!v20)
        goto LABEL_27;
      v21 = v20 - 1;
      v22 = *(_QWORD *)(v3 + 72);
      v23 = v1 + v22;
      if (v22 > 0 || v1 >= v23 + v22 * v21)
      {
        swift_arrayInitWithTakeFrontToBack(v17 + v18, v23, v21, v2);
      }
      else if (v22)
      {
        swift_arrayInitWithTakeBackToFront(v17 + v18);
      }
      --*(_QWORD *)(v17 + 16);
      *v14 = v17;
      v16 = swift_endAccess(v24);
      CheckedContinuation.resume(returning:)(v16, v2);
      (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
    }
  }
}

uint64_t sub_100051A50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  char v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;

  v1 = type metadata accessor for RemoteAlertRequest(0);
  v2 = *(_QWORD *)(v0 + *(int *)(v1 + 24));
  v3 = *(void **)(v2 + 16);
  if (v3)
  {
    v4 = *(_QWORD *)(v2 + 112);
    v5 = *(_BYTE *)(v0 + *(int *)(v1 + 20));
    swift_bridgeObjectRetain(v4);
    v6 = v3;
    sub_1000B3EFC(v5);
    v8 = v7;

    swift_bridgeObjectRelease(v4);
  }
  else
  {
    if (qword_10010BAA0 != -1)
      swift_once(&qword_10010BAA0, sub_100004DCC);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_100004E8C(v9, (uint64_t)qword_1001232D8);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "RemoteAlertRequest was constructed without a valid remote audit token", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }

    return 0;
  }
  return v8;
}

uint64_t (*sub_100051B8C(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 112, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t sub_100051BCC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t result;

  v0 = type metadata accessor for RemoteAlertRequestQueue();
  v1 = (_QWORD *)swift_allocObject(v0, 160, 15);
  result = swift_defaultActor_initialize();
  v1[14] = &_swiftEmptyDictionarySingleton;
  v1[15] = 0;
  v1[16] = 0;
  v1[17] = &_swiftEmptySetSingleton;
  v1[18] = &_swiftEmptyArrayStorage;
  v1[19] = &_swiftEmptyArrayStorage;
  qword_1001232F8 = (uint64_t)v1;
  return result;
}

uint64_t sub_100051C28(uint64_t a1, char a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t result;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  void (*v35)(char *);
  unint64_t *v36;
  uint64_t isUniquelyReferenced_nonNull_native;
  unint64_t v38;
  char v39;
  unint64_t v40;
  uint64_t v41;
  _BOOL8 v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  char v46;
  _QWORD *v47;
  _QWORD *v48;
  char v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(_QWORD);
  void (*v65)(_QWORD *);
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87[24];
  uint64_t v88;
  _BYTE v89[24];
  uint64_t v90[4];

  v5 = v4;
  v82 = a4;
  v83 = a3;
  v8 = sub_100003304(&qword_10010E6A0);
  __chkstk_darwin(v8);
  v10 = (char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v80 - v12;
  v84 = type metadata accessor for RemoteAlertRequest(0);
  v14 = *(_QWORD *)(v84 - 8);
  __chkstk_darwin(v84);
  v16 = (char *)&v80 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v19 = (char *)&v80 - v18;
  result = sub_100051A50();
  v86 = result;
  if (v21)
  {
    v22 = v21;
    v81 = v10;
    v85 = v14;
    if ((a2 & 1) != 0)
    {
      v23 = (unint64_t *)(v4 + 112);
      swift_beginAccess(v4 + 112, v87, 0, 0);
      v24 = *(_QWORD *)(v4 + 112);
      if (*(_QWORD *)(v24 + 16))
      {
        swift_bridgeObjectRetain(v22);
        swift_bridgeObjectRetain(v24);
        v25 = sub_1000AAE54(v86, v22);
        if ((v26 & 1) != 0)
        {
          v27 = *(_QWORD *)(*(_QWORD *)(v24 + 56) + 8 * v25);
          swift_bridgeObjectRetain(v27);
          swift_bridgeObjectRelease(v22);
          swift_bridgeObjectRelease(v24);
          v28 = *(_QWORD *)(v27 + 16);
          swift_bridgeObjectRelease(v27);
          if (v28)
          {
            if (qword_10010BAA0 != -1)
              swift_once(&qword_10010BAA0, sub_100004DCC);
            v29 = type metadata accessor for Logger(0);
            sub_100004E8C(v29, (uint64_t)qword_1001232D8);
            v30 = swift_bridgeObjectRetain_n(v22, 2);
            v31 = Logger.logObject.getter(v30);
            v32 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v31, v32))
            {
              v33 = (uint8_t *)swift_slowAlloc(12, -1);
              v34 = swift_slowAlloc(32, -1);
              v90[0] = v34;
              *(_DWORD *)v33 = 136315138;
              swift_bridgeObjectRetain(v22);
              v88 = sub_100031C58(v86, v22, v90);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, v89);
              swift_bridgeObjectRelease_n(v22, 3);
              _os_log_impl((void *)&_mh_execute_header, v31, v32, "Duplicate request not allowed for token: %s", v33, 0xCu);
              swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v34, -1, -1);
              swift_slowDealloc(v33, -1, -1);

              v35 = (void (*)(char *))v83;
              if (!v83)
                goto LABEL_41;
LABEL_37:
              v71 = *v23;
              v72 = *(_QWORD *)(*v23 + 16);
              v73 = v82;
              sub_10001B3C0((uint64_t)v35, v82);
              if (v72)
              {
                swift_bridgeObjectRetain(v71);
                v74 = sub_1000AAE54(v86, v22);
                v75 = v84;
                if ((v76 & 1) != 0)
                {
                  v77 = *(_QWORD *)(*(_QWORD *)(v71 + 56) + 8 * v74);
                  swift_bridgeObjectRetain(v77);
                  swift_bridgeObjectRelease(v22);
                  swift_bridgeObjectRelease(v71);
                  if (*(_QWORD *)(v77 + 16))
                  {
                    v78 = v85;
                    sub_1000507C4(v77+ ((*(unsigned __int8 *)(v85 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80)), (uint64_t)v13);
                    v79 = 0;
                  }
                  else
                  {
                    v79 = 1;
                    v78 = v85;
                  }
                  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v78 + 56))(v13, v79, 1, v75);
                  swift_bridgeObjectRelease(v77);
                  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48))(v13, 1, v75) != 1)
                  {
                    sub_1000508C0((uint64_t)v13, (uint64_t)v19);
                    v35(v19);
                    sub_100050580((uint64_t)v35, v73);
                    return sub_10005098C((uint64_t)v19);
                  }
LABEL_49:
                  sub_100050580((uint64_t)v35, v73);
                  return sub_100010ED0((uint64_t)v13, &qword_10010E6A0);
                }
                swift_bridgeObjectRelease(v22);
              }
              else
              {
                v71 = v22;
                v75 = v84;
              }
              swift_bridgeObjectRelease(v71);
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v85 + 56))(v13, 1, 1, v75);
              goto LABEL_49;
            }

            swift_bridgeObjectRelease_n(v22, 2);
            v35 = (void (*)(char *))v83;
            if (v83)
              goto LABEL_37;
LABEL_41:
            v70 = v22;
            return swift_bridgeObjectRelease(v70);
          }
        }
        else
        {
          swift_bridgeObjectRelease(v22);
          swift_bridgeObjectRelease(v24);
        }
      }
    }
    sub_1000507C4(a1, (uint64_t)v16);
    v36 = (unint64_t *)(v5 + 112);
    swift_beginAccess(v5 + 112, v90, 33, 0);
    swift_bridgeObjectRetain(v22);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v5 + 112));
    v88 = *(_QWORD *)(v5 + 112);
    v38 = v88;
    *(_QWORD *)(v5 + 112) = 0x8000000000000000;
    v40 = sub_1000AAE54(v86, v22);
    v41 = *(_QWORD *)(v38 + 16);
    v42 = (v39 & 1) == 0;
    v43 = v41 + v42;
    if (__OFADD__(v41, v42))
    {
      __break(1u);
    }
    else
    {
      v44 = v39;
      if (*(_QWORD *)(v38 + 24) >= v43)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1000AEE64();
          v38 = v88;
        }
      }
      else
      {
        sub_1000ADEEC(v43, isUniquelyReferenced_nonNull_native);
        v38 = v88;
        v45 = sub_1000AAE54(v86, v22);
        if ((v44 & 1) != (v46 & 1))
          goto LABEL_56;
        v40 = v45;
      }
      v47 = (_QWORD *)*v36;
      *v36 = v38;
      swift_bridgeObjectRelease(v47);
      v48 = (_QWORD *)*v36;
      swift_bridgeObjectRetain(*v36);
      if ((v44 & 1) == 0)
      {
        sub_1000AEE1C(v40, v86, v22, (uint64_t)&_swiftEmptyArrayStorage, v48);
        swift_bridgeObjectRetain(v22);
      }
      v14 = v48[7];
      swift_bridgeObjectRelease(v48);
      v38 = *(_QWORD *)(v14 + 8 * v40);
      v49 = swift_isUniquelyReferenced_nonNull_native(v38);
      *(_QWORD *)(v14 + 8 * v40) = v38;
      if ((v49 & 1) != 0)
      {
LABEL_21:
        v51 = *(_QWORD *)(v38 + 16);
        v50 = *(_QWORD *)(v38 + 24);
        if (v51 >= v50 >> 1)
        {
          v38 = sub_100054434(v50 > 1, v51 + 1, 1, v38, &qword_10010E6B8, type metadata accessor for RemoteAlertRequest);
          *(_QWORD *)(v14 + 8 * v40) = v38;
        }
        *(_QWORD *)(v38 + 16) = v51 + 1;
        v83 = (*(unsigned __int8 *)(v85 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80);
        sub_1000508C0((uint64_t)v16, v38 + v83 + *(_QWORD *)(v85 + 72) * v51);
        swift_endAccess(v90);
        swift_bridgeObjectRelease(v22);
        if (qword_10010BAA0 != -1)
          swift_once(&qword_10010BAA0, sub_100004DCC);
        v52 = type metadata accessor for Logger(0);
        sub_100004E8C(v52, (uint64_t)qword_1001232D8);
        v53 = swift_bridgeObjectRetain_n(v22, 2);
        v54 = Logger.logObject.getter(v53);
        v55 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v54, v55))
        {
          v56 = (uint8_t *)swift_slowAlloc(12, -1);
          v57 = swift_slowAlloc(32, -1);
          v90[0] = v57;
          *(_DWORD *)v56 = 136315138;
          swift_bridgeObjectRetain(v22);
          v88 = sub_100031C58(v86, v22, v90);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, v89);
          swift_bridgeObjectRelease_n(v22, 3);
          _os_log_impl((void *)&_mh_execute_header, v54, v55, "Remote Alert request enqueued for token: %s", v56, 0xCu);
          swift_arrayDestroy(v57, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v57, -1, -1);
          swift_slowDealloc(v56, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v22, 2);
        }
        v58 = *v36;
        if (!*(_QWORD *)(*v36 + 16))
          goto LABEL_41;
        swift_bridgeObjectRetain(v22);
        swift_bridgeObjectRetain(v58);
        v59 = sub_1000AAE54(v86, v22);
        if ((v60 & 1) == 0)
        {
          swift_bridgeObjectRelease_n(v22, 2);
          v70 = v58;
          return swift_bridgeObjectRelease(v70);
        }
        v61 = *(_QWORD *)(*(_QWORD *)(v58 + 56) + 8 * v59);
        swift_bridgeObjectRetain(v61);
        swift_bridgeObjectRelease(v22);
        swift_bridgeObjectRelease(v58);
        v62 = *(_QWORD *)(v61 + 16);
        swift_bridgeObjectRelease(v61);
        if (v62 != 1)
          goto LABEL_41;
        v63 = v84;
        if ((sub_100056174(a1, *(unsigned __int8 *)(a1 + *(int *)(v84 + 20)), *(_QWORD *)(a1 + *(int *)(v84 + 24))) & 1) != 0)
          goto LABEL_41;
        v64 = sub_100051B8C((uint64_t)v90);
        v65 = sub_10005253C(&v88, v86, v22);
        v67 = *v66;
        if (!*v66)
        {
          ((void (*)(uint64_t *, _QWORD))v65)(&v88, 0);
          swift_bridgeObjectRelease(v22);
          ((void (*)(uint64_t *, _QWORD))v64)(v90, 0);
          v69 = 1;
          v68 = (uint64_t)v81;
          goto LABEL_45;
        }
        if (*(_QWORD *)(v67 + 16))
        {
          v68 = (uint64_t)v81;
          sub_1000507C4(v67 + v83, (uint64_t)v81);
          sub_100055FBC(0, 1);
          ((void (*)(uint64_t *, _QWORD))v65)(&v88, 0);
          swift_bridgeObjectRelease(v22);
          ((void (*)(uint64_t *, _QWORD))v64)(v90, 0);
          v69 = 0;
LABEL_45:
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v85 + 56))(v68, v69, 1, v63);
          return sub_100010ED0(v68, &qword_10010E6A0);
        }
        __break(1u);
LABEL_56:
        result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
        __break(1u);
        return result;
      }
    }
    v38 = sub_100054434(0, *(_QWORD *)(v38 + 16) + 1, 1, v38, &qword_10010E6B8, type metadata accessor for RemoteAlertRequest);
    *(_QWORD *)(v14 + 8 * v40) = v38;
    goto LABEL_21;
  }
  return result;
}

void (*sub_10005253C(_QWORD *a1, uint64_t a2, uint64_t a3))(_QWORD *a1)
{
  _QWORD *v6;

  v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[4] = a3;
  swift_bridgeObjectRetain(a3);
  v6[5] = sub_1000557B0(v6, a2, a3);
  return sub_1000525A8;
}

void sub_1000525A8(_QWORD *a1)
{
  void *v1;
  uint64_t v2;

  v1 = (void *)*a1;
  v2 = *(_QWORD *)(*a1 + 32);
  (*(void (**)(_QWORD, _QWORD))(*a1 + 40))(*a1, 0);
  swift_bridgeObjectRelease(v2);
  free(v1);
}

uint64_t sub_1000525E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[24];

  swift_beginAccess(v3 + 112, v16, 0, 0);
  v7 = *(_QWORD *)(v3 + 112);
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_6;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v7);
  v8 = sub_1000AAE54(a1, a2);
  if ((v9 & 1) == 0)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v7);
LABEL_6:
    v14 = type metadata accessor for RemoteAlertRequest(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a3, 1, 1, v14);
  }
  v10 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v8);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(v7);
  v11 = *(_QWORD *)(v10 + 16);
  v12 = type metadata accessor for RemoteAlertRequest(0);
  v13 = *(_QWORD *)(v12 - 8);
  if (v11)
  {
    sub_1000507C4(v10 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80)), a3);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(a3, 0, 1, v12);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(a3, 1, 1, v12);
  }
  return swift_bridgeObjectRelease(v10);
}

void sub_100052718(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint8_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  void (*v46)(_QWORD *);
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t, uint64_t, int *);
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  int *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(_QWORD);
  void (*v69)(_QWORD *);
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  int v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83[4];
  char v84[32];

  v4 = v3;
  v78 = a3;
  v7 = sub_100003304(&qword_10010EB20);
  __chkstk_darwin(v7);
  v9 = (char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003304(&qword_10010E6A0);
  __chkstk_darwin(v10);
  v12 = (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v80 = (char *)&v73 - v14;
  v15 = (int *)type metadata accessor for RemoteAlertRequest(0);
  v79 = *((_QWORD *)v15 - 1);
  __chkstk_darwin(v15);
  v17 = (char *)&v73 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v20 = (char *)&v73 - v19;
  __chkstk_darwin(v21);
  v76 = (uint64_t)&v73 - v22;
  if (qword_10010BAA0 != -1)
    swift_once(&qword_10010BAA0, sub_100004DCC);
  v23 = type metadata accessor for Logger(0);
  sub_100004E8C(v23, (uint64_t)qword_1001232D8);
  v24 = swift_bridgeObjectRetain_n(a2, 2);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.info.getter();
  v27 = os_log_type_enabled(v25, v26);
  v77 = v9;
  v75 = v20;
  if (v27)
  {
    v28 = swift_slowAlloc(12, -1);
    v74 = v12;
    v29 = a1;
    v30 = (uint8_t *)v28;
    v31 = swift_slowAlloc(32, -1);
    v73 = v17;
    v32 = v15;
    v33 = v31;
    v83[0] = v31;
    *(_DWORD *)v30 = 136315138;
    swift_bridgeObjectRetain(a2);
    v81 = sub_100031C58(v29, a2, v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Removing completed request for token: %s", v30, 0xCu);
    swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
    v34 = v33;
    v15 = v32;
    v17 = v73;
    swift_slowDealloc(v34, -1, -1);
    v35 = v30;
    a1 = v29;
    v12 = v74;
    swift_slowDealloc(v35, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  v36 = (uint64_t *)(v4 + 112);
  swift_beginAccess(v4 + 112, v84, 0, 0);
  v37 = *(_QWORD *)(v4 + 112);
  v38 = (uint64_t)v80;
  if (*(_QWORD *)(v37 + 16))
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(v37);
    v39 = sub_1000AAE54(a1, a2);
    if ((v40 & 1) != 0)
    {
      v41 = v15;
      v42 = *(_QWORD *)(*(_QWORD *)(v37 + 56) + 8 * v39);
      swift_bridgeObjectRetain(v42);
      swift_bridgeObjectRelease(a2);
      swift_bridgeObjectRelease(v37);
      v43 = *(_QWORD *)(v42 + 16);
      v44 = v42;
      v15 = v41;
      swift_bridgeObjectRelease(v44);
      if (v43)
      {
        swift_bridgeObjectRetain(a2);
        v45 = (char *)sub_100051B8C((uint64_t)v83);
        v46 = sub_10005253C(&v81, a1, a2);
        v48 = *v47;
        if (*v47)
        {
          v74 = v45;
          if (!*(_QWORD *)(v48 + 16))
          {
            __break(1u);
LABEL_36:
            __break(1u);
            return;
          }
          v49 = (uint64_t)v75;
          sub_1000507C4(v48 + ((*(unsigned __int8 *)(v79 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80)), (uint64_t)v75);
          sub_100055FBC(0, 1);
          ((void (*)(uint64_t *, _QWORD))v46)(&v81, 0);
          swift_bridgeObjectRelease(a2);
          ((void (*)(uint64_t *, _QWORD))v74)(v83, 0);
          v50 = v76;
          sub_1000508C0(v49, v76);
          v51 = v50 + v15[7];
          v52 = *(void (**)(uint64_t))v51;
          if (*(_QWORD *)v51)
          {
            v53 = *(_QWORD *)(v51 + 8);
            v54 = swift_retain(v53);
            v52(v54);
            sub_100050580((uint64_t)v52, v53);
          }
          sub_10005098C(v50);
        }
        else
        {
          ((void (*)(uint64_t *, _QWORD))v46)(&v81, 0);
          swift_bridgeObjectRelease(a2);
          ((void (*)(uint64_t *, _QWORD))v45)(v83, 0);
        }
        v38 = (uint64_t)v80;
      }
    }
    else
    {
      swift_bridgeObjectRelease(a2);
      swift_bridgeObjectRelease(v37);
    }
  }
  v55 = *v36;
  if (!*(_QWORD *)(*v36 + 16))
    goto LABEL_22;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v55);
  v56 = sub_1000AAE54(a1, a2);
  if ((v57 & 1) == 0)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v55);
LABEL_22:
    (*(void (**)(uint64_t, uint64_t, uint64_t, int *))(v79 + 56))(v38, 1, 1, v15);
    goto LABEL_23;
  }
  v58 = *(_QWORD *)(*(_QWORD *)(v55 + 56) + 8 * v56);
  swift_bridgeObjectRetain(v58);
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(v55);
  v59 = v79;
  if (*(_QWORD *)(v58 + 16))
  {
    sub_1000507C4(v58 + ((*(unsigned __int8 *)(v79 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80)), v38);
    v60 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v59 + 56);
    v60(v38, 0, 1, v15);
  }
  else
  {
    v60 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v79 + 56);
    v60(v38, 1, 1, v15);
  }
  swift_bridgeObjectRelease(v58);
  if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v59 + 48))(v38, 1, v15) != 1)
  {
    sub_1000508C0(v38, (uint64_t)v17);
    v65 = v15;
    v66 = *(_QWORD *)&v17[v15[6]];
    v67 = v17[v15[5]];
    swift_retain(v66);
    LOBYTE(v67) = sub_100056174((uint64_t)v17, v67, v66);
    swift_release(v66);
    if ((v67 & 1) != 0)
    {
      sub_10005098C((uint64_t)v17);
      return;
    }
    swift_bridgeObjectRetain(a2);
    v68 = sub_100051B8C((uint64_t)v83);
    v69 = sub_10005253C(&v81, a1, a2);
    v71 = *v70;
    if (!*v70)
    {
      ((void (*)(uint64_t *, _QWORD))v69)(&v81, 0);
      swift_bridgeObjectRelease(a2);
      ((void (*)(uint64_t *, _QWORD))v68)(v83, 0);
      v72 = 1;
      goto LABEL_34;
    }
    if (*(_QWORD *)(v71 + 16))
    {
      sub_1000507C4(v71 + ((*(unsigned __int8 *)(v79 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80)), (uint64_t)v12);
      sub_100055FBC(0, 1);
      ((void (*)(uint64_t *, _QWORD))v69)(&v81, 0);
      swift_bridgeObjectRelease(a2);
      ((void (*)(uint64_t *, _QWORD))v68)(v83, 0);
      v72 = 0;
LABEL_34:
      sub_10005098C((uint64_t)v17);
      v60((uint64_t)v12, v72, 1, v65);
      sub_100010ED0((uint64_t)v12, &qword_10010E6A0);
      return;
    }
    goto LABEL_36;
  }
LABEL_23:
  sub_100010ED0(v38, &qword_10010E6A0);
  if ((v78 & 1) != 0)
  {
    v61 = type metadata accessor for TaskPriority(0);
    v62 = (uint64_t)v77;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v77, 1, 1, v61);
    v63 = (_QWORD *)swift_allocObject(&unk_1000FE910, 48, 7);
    v63[2] = 0;
    v63[3] = 0;
    v63[4] = a1;
    v63[5] = a2;
    swift_bridgeObjectRetain(a2);
    v64 = sub_100028240(v62, (uint64_t)&unk_10010E6B0, (uint64_t)v63);
    swift_release(v64);
  }
}

uint64_t sub_100052E44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch(sub_100052E5C, 0, 0);
}

uint64_t sub_100052E5C()
{
  uint64_t v0;
  uint64_t v1;

  if (qword_10010BBD0 != -1)
    swift_once(&qword_10010BBD0, sub_1000AD780);
  v1 = qword_1001233D0;
  *(_QWORD *)(v0 + 32) = qword_1001233D0;
  return swift_task_switch(sub_100052EC0, v1, 0);
}

uint64_t sub_100052EC0()
{
  uint64_t v0;

  sub_1000AD7C4(*(_QWORD *)(v0 + 16), *(_TtC13GameOverlayUI20GameOverlayUIService **)(v0 + 24), 1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100052EF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v7[19] = a6;
  v7[20] = a7;
  v7[17] = a4;
  v7[18] = a5;
  v8 = sub_100003304(&qword_10010EB20);
  v7[21] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MainActor(0);
  v7[22] = v9;
  v7[23] = static MainActor.shared.getter(v9);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  return swift_task_switch(sub_100052F90, v10, v11);
}

uint64_t sub_100052F90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t inited;
  const char *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  _TtC13GameOverlayUI20GameOverlayUIService *v16;
  Class isa;
  SEL v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;

  swift_release(*(_QWORD *)(v0 + 184));
  if (qword_10010BBD8 != -1)
    swift_once(&qword_10010BBD8, sub_1000B47F0);
  v2 = *(_QWORD *)(v0 + 152);
  v1 = *(_QWORD *)(v0 + 160);
  v3 = *(void **)(v0 + 144);
  v4 = sub_1000B41F4(*(_QWORD *)(v0 + 136));
  v6 = v5;
  v7 = sub_100003304(&qword_10010E680);
  inited = swift_initStackObject(v7, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_1000C9D90;
  *(_QWORD *)(v0 + 120) = 0xD000000000000011;
  *(_QWORD *)(v0 + 128) = 0x80000001000D0220;
  AnyHashable.init<A>(_:)((_QWORD *)(inited + 32), v0 + 120, &type metadata for String, &protocol witness table for String);
  *(_QWORD *)(inited + 96) = &type metadata for String;
  *(_QWORD *)(inited + 72) = v4;
  *(_QWORD *)(inited + 80) = v6;
  v16 = (_TtC13GameOverlayUI20GameOverlayUIService *)sub_10008FAA4((_TtC13GameOverlayUI20GameOverlayUIService *)inited, v9, v10, v11, v12, v13, v14, v15);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v16, v18, v19, v20, v21, v22, v23, v24);
  objc_msgSend(v3, "setUserInfo:", isa);

  v25 = objc_msgSend((id)objc_opt_self(SBSRemoteAlertHandle), "newHandleWithDefinition:configurationContext:", v2, v1);
  if (qword_10010BBA0 != -1)
    swift_once(&qword_10010BBA0, sub_10009FC68);
  v26 = *(_QWORD *)(v0 + 168);
  v27 = *(_QWORD *)(v0 + 136);
  v28 = *(_QWORD *)(v0 + 144);
  objc_msgSend(v25, "registerObserver:", qword_1001233C0);
  objc_msgSend(v25, "activateWithContext:", v28);
  v29 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v26, 1, 1, v29);
  swift_retain(v27);
  v30 = v25;
  v31 = static MainActor.shared.getter(v30);
  v32 = (_QWORD *)swift_allocObject(&unk_1000FE8E8, 48, 7);
  v32[2] = v31;
  v32[3] = &protocol witness table for MainActor;
  v32[4] = v27;
  v32[5] = v30;
  v33 = sub_100028240(v26, (uint64_t)&unk_10010E690, (uint64_t)v32);

  swift_release(v33);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000531E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[5] = a4;
  v5[6] = a5;
  v6 = type metadata accessor for MainActor(0);
  v5[7] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  v5[8] = v7;
  v5[9] = v8;
  return swift_task_switch(sub_100053254, v7, v8);
}

uint64_t sub_100053254()
{
  uint64_t v0;
  uint64_t v1;

  if (qword_10010BBA0 != -1)
    swift_once(&qword_10010BBA0, sub_10009FC68);
  v1 = qword_1001233C0;
  *(_QWORD *)(v0 + 80) = qword_1001233C0;
  return swift_task_switch(sub_1000532B8, v1, 0);
}

uint64_t sub_1000532B8()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;

  v1 = v0[5];
  v2 = (void *)v0[6];
  swift_beginAccess(v0[10] + 112, v0 + 2, 33, 0);
  v3 = v2;
  v4 = swift_retain(v1);
  sub_100055AC0(v4, v3);
  swift_endAccess(v0 + 2);

  return swift_task_switch(sub_10005333C, v0[8], v0[9]);
}

uint64_t sub_10005333C()
{
  uint64_t v0;
  __n128 v1;

  v1 = swift_release(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(__n128))(v0 + 8))(v1);
}

uint64_t sub_10005336C()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[14]);
  swift_bridgeObjectRelease(v0[17]);
  swift_bridgeObjectRelease(v0[18]);
  swift_bridgeObjectRelease(v0[19]);
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for RemoteAlertRequestQueue()
{
  return objc_opt_self(_TtC13GameOverlayUI23RemoteAlertRequestQueue);
}

_QWORD *sub_1000533C8(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    v7 = type metadata accessor for GameOverlayUIConfig.ServiceKind(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    v9 = *(_QWORD *)((char *)a2 + v8);
    *(_QWORD *)((char *)a1 + v8) = v9;
    v10 = a3[7];
    v11 = (_QWORD *)((char *)a1 + v10);
    v12 = (_QWORD *)((char *)a2 + v10);
    v13 = *v12;
    swift_retain(v9);
    if (v13)
    {
      v14 = v12[1];
      *v11 = v13;
      v11[1] = v14;
      swift_retain(v14);
    }
    else
    {
      *(_OWORD *)v11 = *(_OWORD *)v12;
    }
  }
  return a1;
}

double sub_100053488(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  _QWORD *v6;

  v4 = type metadata accessor for GameOverlayUIConfig.ServiceKind(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 24))).n128_u64[0];
  v6 = (_QWORD *)(a1 + *(int *)(a2 + 28));
  if (*v6)
    *(_QWORD *)&result = swift_release(v6[1]).n128_u64[0];
  return result;
}

uint64_t sub_1000534F0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for GameOverlayUIConfig.ServiceKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  v9 = a3[7];
  v10 = (_QWORD *)(a1 + v9);
  v11 = (uint64_t *)(a2 + v9);
  v12 = *v11;
  swift_retain(v8);
  if (v12)
  {
    v13 = v11[1];
    *v10 = v12;
    v10[1] = v13;
    swift_retain(v13);
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)v11;
  }
  return a1;
}

uint64_t sub_100053584(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = type metadata accessor for GameOverlayUIConfig.ServiceKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v7 = a3[6];
  v8 = *(_QWORD *)(a2 + v7);
  v9 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = a3[7];
  v11 = (_QWORD *)(a1 + v10);
  v12 = a2 + v10;
  v13 = *(_QWORD *)(a1 + v10);
  v14 = *(_QWORD *)(a2 + v10);
  if (!v13)
  {
    if (v14)
    {
      v17 = *(_QWORD *)(v12 + 8);
      *v11 = v14;
      v11[1] = v17;
      swift_retain(v17);
      return a1;
    }
LABEL_7:
    *(_OWORD *)v11 = *(_OWORD *)v12;
    return a1;
  }
  if (!v14)
  {
    swift_release(v11[1]);
    goto LABEL_7;
  }
  v15 = *(_QWORD *)(v12 + 8);
  v16 = v11[1];
  *v11 = v14;
  v11[1] = v15;
  swift_retain(v15);
  swift_release(v16);
  return a1;
}

uint64_t sub_100053658(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for GameOverlayUIConfig.ServiceKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[7];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v11 = *v10;
  if (*v10)
  {
    v12 = v10[1];
    *v9 = v11;
    v9[1] = v12;
  }
  else
  {
    *(_OWORD *)v9 = *(_OWORD *)v10;
  }
  return a1;
}

uint64_t sub_1000536E4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for GameOverlayUIConfig.ServiceKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  swift_release(v8);
  v9 = a3[7];
  v10 = (_QWORD *)(a1 + v9);
  v11 = (uint64_t *)(a2 + v9);
  v12 = *(_QWORD *)(a1 + v9);
  v13 = *v11;
  if (!v12)
  {
    if (v13)
    {
      v16 = v11[1];
      *v10 = v13;
      v10[1] = v16;
      return a1;
    }
LABEL_7:
    *(_OWORD *)v10 = *(_OWORD *)v11;
    return a1;
  }
  if (!v13)
  {
    swift_release(v10[1]);
    goto LABEL_7;
  }
  v14 = v11[1];
  v15 = v10[1];
  *v10 = v13;
  v10[1] = v14;
  swift_release(v15);
  return a1;
}

uint64_t sub_1000537A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000537AC);
}

uint64_t sub_1000537AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for GameOverlayUIConfig.ServiceKind(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100053828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100053834);
}

uint64_t sub_100053834(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for GameOverlayUIConfig.ServiceKind(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for RemoteAlertRequest(uint64_t a1)
{
  uint64_t result;

  result = qword_10010E618;
  if (!qword_10010E618)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RemoteAlertRequest);
  return result;
}

uint64_t sub_1000538E8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = type metadata accessor for GameOverlayUIConfig.ServiceKind(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1000C9E38;
    v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[3] = &unk_1000C9E50;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100053970()
{
  uint64_t v0;

  return v0;
}

BOOL sub_10005397C(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v13[3];
  uint64_t v14;
  uint64_t v15;

  v5 = v2[15];
  if (v5)
  {
    if (qword_10010BAA0 != -1)
      swift_once(&qword_10010BAA0, sub_100004DCC);
    v6 = type metadata accessor for Logger(0);
    sub_100004E8C(v6, (uint64_t)qword_1001232D8);
    v7 = swift_bridgeObjectRetain_n(a2, 2);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = swift_slowAlloc(32, -1);
      v13[0] = v11;
      *(_DWORD *)v10 = 136315138;
      swift_bridgeObjectRetain(a2);
      v14 = sub_100031C58(a1, a2, v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Game Center banner for %s blocked on Game Mode banners", v10, 0xCu);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
  }
  else
  {
    swift_beginAccess(v2 + 17, v13, 33, 0);
    swift_bridgeObjectRetain(a2);
    sub_100055B60(&v14, a1, a2);
    swift_endAccess(v13);
    swift_bridgeObjectRelease(v15);
    v2[16] = *(_QWORD *)(v2[17] + 16);
  }
  return v5 == 0;
}

uint64_t sub_100053B84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch(sub_100053BA0, v2, 0);
}

uint64_t sub_100053BA0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v3;

  if (sub_10005397C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24)))
    return (*(uint64_t (**)(void))(v0 + 8))();
  sub_1000581DC(&qword_10010E6C8, v1, (uint64_t (*)(uint64_t))type metadata accessor for RemoteAlertRequestQueue, (uint64_t)&unk_1000C9E68);
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 40) = v3;
  *v3 = v0;
  v3[1] = sub_100053C68;
  return withCheckedContinuation<A>(isolation:function:_:)();
}

uint64_t sub_100053C68()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 32);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 40));
  return swift_task_switch(sub_100053CBC, v1, 0);
}

uint64_t sub_100053CBC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)swift_task_alloc(dword_10010E6DC);
  v0[6] = v1;
  *v1 = v0;
  v1[1] = sub_100053D20;
  v2 = v0[4];
  v3 = v0[2];
  v1[3] = v0[3];
  v1[4] = v2;
  v1[2] = v3;
  return swift_task_switch(sub_100053BA0, v2, 0);
}

uint64_t sub_100053D20()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 48));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100053D68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  _BYTE *v8;
  unint64_t *v9;
  unint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  _BYTE v16[24];

  v4 = sub_100003304(&qword_10010E658);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v5 + 16))(v8, a1, v4, v6);
  v9 = (unint64_t *)(a2 + 144);
  swift_beginAccess(a2 + 144, v16, 33, 0);
  v10 = *(_QWORD *)(a2 + 144);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v10);
  *(_QWORD *)(a2 + 144) = v10;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v10 = sub_100054640(0, *(_QWORD *)(v10 + 16) + 1, 1, v10);
    *v9 = v10;
  }
  v13 = *(_QWORD *)(v10 + 16);
  v12 = *(_QWORD *)(v10 + 24);
  if (v13 >= v12 >> 1)
  {
    v10 = sub_100054640(v12 > 1, v13 + 1, 1, v10);
    *v9 = v10;
  }
  *(_QWORD *)(v10 + 16) = v13 + 1;
  (*(void (**)(unint64_t, _BYTE *, uint64_t))(v5 + 32))(v10+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v13, v8, v4);
  return swift_endAccess(v16);
}

uint64_t sub_100053EB0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_100053EC8, v0, 0);
}

void sub_100053EC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v1 + 128))
  {
    if (qword_10010BAA0 != -1)
      swift_once(&qword_10010BAA0, sub_100004DCC);
    v2 = type metadata accessor for Logger(0);
    v3 = sub_100004E8C(v2, (uint64_t)qword_1001232D8);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Game Mode banner blocked on Game Center banners", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }

    sub_1000581DC(&qword_10010E6C8, v7, (uint64_t (*)(uint64_t))type metadata accessor for RemoteAlertRequestQueue, (uint64_t)&unk_1000C9E68);
    v8 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
    *(_QWORD *)(v0 + 24) = v8;
    *v8 = v0;
    v8[1] = sub_100054058;
    withCheckedContinuation<A>(isolation:function:_:)();
  }
  else
  {
    v9 = *(_QWORD *)(v1 + 120);
    v10 = __OFADD__(v9, 1);
    v11 = v9 + 1;
    if (v10)
    {
      __break(1u);
    }
    else
    {
      *(_QWORD *)(v1 + 120) = v11;
      (*(void (**)(void))(v0 + 8))();
    }
  }
}

uint64_t sub_100054058()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 24));
  return swift_task_switch(sub_1000540AC, v1, 0);
}

uint64_t sub_1000540AC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)swift_task_alloc(dword_10010E6C4);
  *(_QWORD *)(v0 + 32) = v1;
  *v1 = v0;
  v1[1] = sub_100054108;
  v2 = *(_QWORD *)(v0 + 16);
  v1[2] = v2;
  return swift_task_switch(sub_100053EC8, v2, 0);
}

uint64_t sub_100054108()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 32));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100054150(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  _BYTE *v8;
  unint64_t *v9;
  unint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  _BYTE v16[24];

  v4 = sub_100003304(&qword_10010E658);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v5 + 16))(v8, a1, v4, v6);
  v9 = (unint64_t *)(a2 + 152);
  swift_beginAccess(a2 + 152, v16, 33, 0);
  v10 = *(_QWORD *)(a2 + 152);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v10);
  *(_QWORD *)(a2 + 152) = v10;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v10 = sub_100054640(0, *(_QWORD *)(v10 + 16) + 1, 1, v10);
    *v9 = v10;
  }
  v13 = *(_QWORD *)(v10 + 16);
  v12 = *(_QWORD *)(v10 + 24);
  if (v13 >= v12 >> 1)
  {
    v10 = sub_100054640(v12 > 1, v13 + 1, 1, v10);
    *v9 = v10;
  }
  *(_QWORD *)(v10 + 16) = v13 + 1;
  (*(void (**)(unint64_t, _BYTE *, uint64_t))(v5 + 32))(v10+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v13, v8, v4);
  return swift_endAccess(v16);
}

uint64_t sub_100054298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v4 + 24) = a4;
  v5 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v4 + 32) = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  return swift_task_switch(sub_100054304, v6, v7);
}

uint64_t sub_100054304()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 32));
  KeyPath = swift_getKeyPath(&unk_1000C9F30);
  v3 = swift_task_alloc(32);
  *(_QWORD *)(v3 + 16) = v1;
  *(_BYTE *)(v3 + 24) = 1;
  *(_QWORD *)(v0 + 16) = v1;
  v4 = sub_1000581DC(&qword_10010CE18, 255, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 16, KeyPath, sub_100031B3C, v3, (char *)&type metadata for () + 8, v4);
  swift_release(KeyPath);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000543DC(uint64_t result, _BYTE **a2)
{
  _BYTE *v2;

  v2 = *a2;
  *v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t sub_1000543EC(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t sub_100054420(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100054434(a1, a2, a3, a4, &qword_10010E728, type metadata accessor for AccessPointHighlight);
}

uint64_t sub_100054434(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_100003304(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
    goto LABEL_29;
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = a6(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (unint64_t)v18 + v23;
  if ((a1 & 1) != 0)
  {
    v25 = a4 + v23;
    if ((unint64_t)v18 < a4 || v24 >= v25 + *(_QWORD *)(v22 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v18 + v23, v25, v11, v21);
    }
    else if (v18 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v18 + v23);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_100055EA4(0, v11, v24, a4, a6);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v18;
}

uint64_t sub_100054640(char a1, int64_t a2, char a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v15 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_100003304(&qword_10010E660);
  v11 = *(_QWORD *)(sub_100003304(&qword_10010E658) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  v16 = j__malloc_size(v15);
  if (!v12)
    goto LABEL_29;
  if (v16 - v14 == 0x8000000000000000 && v12 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  v18 = sub_100003304(&qword_10010E658);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v15 + v20;
  if ((a1 & 1) != 0)
  {
    v22 = a4 + v20;
    if ((unint64_t)v15 < a4 || v21 >= v22 + *(_QWORD *)(v19 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v15 + v20, v22, v8, v18);
    }
    else if (v15 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v15 + v20);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_100056950(0, v8, v21, a4);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v15;
}

_TtC13GameOverlayUI20GameOverlayUIService *sub_100054850(_TtC13GameOverlayUI20GameOverlayUIService *a1, int64_t a2, char a3, _TtC13GameOverlayUI20GameOverlayUIService *a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  return sub_100054878(a1, a2, a3, a4, &qword_10010E718, &qword_10010E720, a7, a8);
}

_TtC13GameOverlayUI20GameOverlayUIService *sub_100054864(_TtC13GameOverlayUI20GameOverlayUIService *a1, int64_t a2, char a3, _TtC13GameOverlayUI20GameOverlayUIService *a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  return sub_100054878(a1, a2, a3, a4, &qword_10010E708, &qword_10010E710, a7, a8);
}

_TtC13GameOverlayUI20GameOverlayUIService *sub_100054878(_TtC13GameOverlayUI20GameOverlayUIService *result, int64_t a2, char a3, _TtC13GameOverlayUI20GameOverlayUIService *a4, uint64_t *a5, uint64_t *a6, void *a7, void *a8)
{
  char v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t isa;
  uint64_t v14;
  uint64_t v15;
  _TtC13GameOverlayUI20GameOverlayUIService *v16;
  int64_t v17;
  uint64_t v18;
  _TtC13GameOverlayUI20GameOverlayUIService *v19;
  _TtC13GameOverlayUI20GameOverlayUIService *v20;

  v10 = (char)result;
  if ((a3 & 1) == 0)
  {
    v12 = a2;
    goto LABEL_8;
  }
  v11 = *(_QWORD *)a4[1].listener;
  v12 = v11 >> 1;
  if ((uint64_t)(v11 >> 1) >= a2)
    goto LABEL_8;
  if (v12 + 0x4000000000000000 >= 0)
  {
    v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v12 = a2;
LABEL_8:
    isa = (uint64_t)a4[1].super.isa;
    if (v12 <= isa)
      v14 = (uint64_t)a4[1].super.isa;
    else
      v14 = v12;
    if (v14)
    {
      v15 = sub_100003304(a5);
      v16 = (_TtC13GameOverlayUI20GameOverlayUIService *)swift_allocObject(v15, 32 * v14 + 32, 7);
      v17 = j__malloc_size(v16);
      v18 = v17 - 32;
      if (v17 < 32)
        v18 = v17 - 1;
      v16[1].super.isa = (Class)isa;
      *(_QWORD *)v16[1].listener = 2 * (v18 >> 5);
      v19 = v16 + 2;
      if ((v10 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v16 = &_swiftEmptyArrayStorage;
      v19 = &_swiftEmptyArrayStorage + 2;
      if ((result & 1) != 0)
      {
LABEL_15:
        v20 = a4 + 2;
        if (v16 != a4 || v19 >= &a4[2 * isa + 2])
          memmove(v19, v20, 32 * isa);
        a4[1].super.isa = 0;
        goto LABEL_24;
      }
    }
    sub_1000582D4(0, isa, (unint64_t)v19, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease(a4, (SEL)v20, v19, a4, a5, a6, a7, a8);
    return v16;
  }
  __break(1u);
  return result;
}

_TtC13GameOverlayUI20GameOverlayUIService *sub_100054990(_TtC13GameOverlayUI20GameOverlayUIService *a1, int64_t a2, char a3, _TtC13GameOverlayUI20GameOverlayUIService *a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  return sub_100054878(a1, a2, a3, a4, &qword_10010E6F8, &qword_10010E700, a7, a8);
}

uint64_t sub_1000549A4(uint64_t (*a1)(void))
{
  return a1();
}

void sub_1000549C4(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  unint64_t v7;
  _TtC13GameOverlayUI20GameOverlayUIService *v8;
  uint64_t v9;
  uint64_t v10;
  SEL v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;

  v6 = a4();
  v8 = (_TtC13GameOverlayUI20GameOverlayUIService *)v7;
  v9 = sub_100031C58(v6, v7, a3);
  v10 = *a1 + 8;
  v18 = v9;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
  swift_bridgeObjectRelease(v8, v11, v12, v13, v14, v15, v16, v17);
  *a1 = v10;
}

_BYTE **sub_100054A34(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;

  v4 = *result;
  *v4 = a4;
  *result = v4 + 1;
  return result;
}

void *sub_100054A44(void *__src, uint64_t a2, void *__dst, uint64_t a4)
{
  uint64_t v4;

  if (__src)
    v4 = a2 - (_QWORD)__src;
  else
    v4 = 0;
  if (!__dst)
  {
    if (v4 <= 0)
      return __src;
LABEL_10:
    __src = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawBufferPointer.copyMemory source has too many elements", 69, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 487, 0);
    __break(1u);
    return __src;
  }
  if (a4 - (uint64_t)__dst < v4)
    goto LABEL_10;
  if (__src)
    return memmove(__dst, __src, a2 - (_QWORD)__src);
  return __src;
}

uint64_t sub_100054AD8@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_100054B00(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  _QWORD v22[9];

  v5 = *v2;
  Hasher.init(_seed:)(v22, *(_QWORD *)(*v2 + 40));
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v22, a1, a2);
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  v9 = *(_QWORD *)(v5 + 48);
  v10 = (_QWORD *)(v9 + 16 * v8);
  v11 = v10[1];
  v12 = *v10 == a1 && v11 == a2;
  if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
  {
    v17 = ~v7;
    do
    {
      v8 = (v8 + 1) & v17;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_18;
      v18 = (_QWORD *)(v9 + 16 * v8);
      v19 = v18[1];
      v20 = *v18 == a1 && v19 == a2;
    }
    while (!v20 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v18, v19, a1, a2, 0) & 1) == 0);
  }
  swift_bridgeObjectRelease(v5);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v14 = *v2;
  v22[0] = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100054C8C();
    v14 = v22[0];
  }
  v15 = *(_QWORD *)(*(_QWORD *)(v14 + 48) + 16 * v8);
  sub_1000553C4(v8);
  v16 = *v2;
  *v2 = v22[0];
  swift_bridgeObjectRelease(v16);
  return v15;
}

void sub_100054C8C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_100003304(&qword_10010E668);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    swift_bridgeObjectRetain(v18);
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void sub_100054E3C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100003304(&qword_10010E668);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_38:
    *v2 = v6;
    return;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  swift_retain(v3);
  v12 = 0;
  while (1)
  {
    if (v10)
    {
      v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v16 = v15 | (v12 << 6);
      goto LABEL_27;
    }
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v32)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v12;
    if (!v18)
    {
      v12 = v17 + 1;
      if (v17 + 1 >= v32)
        goto LABEL_36;
      v18 = *(_QWORD *)(v8 + 8 * v12);
      if (!v18)
      {
        v12 = v17 + 2;
        if (v17 + 2 >= v32)
          goto LABEL_36;
        v18 = *(_QWORD *)(v8 + 8 * v12);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v10 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v12 << 6);
LABEL_27:
    v20 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v21 = *v20;
    v22 = v20[1];
    Hasher.init(_seed:)(v33, *(_QWORD *)(v6 + 40));
    swift_bridgeObjectRetain(v22);
    String.hash(into:)(v33, v21, v22);
    v23 = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = v23 & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v26);
      }
      while (v30 == -1);
      v13 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    v14 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v13);
    *v14 = v21;
    v14[1] = v22;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v32)
  {
LABEL_36:
    swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v12 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v12 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v12 >= v32)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v12);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
}

void sub_1000550E8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100003304(&qword_10010E668);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    swift_retain(v3);
    v12 = 0;
    while (1)
    {
      if (v9)
      {
        v15 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v16 = v15 | (v12 << 6);
      }
      else
      {
        v17 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }
        if (v17 >= v10)
          goto LABEL_36;
        v18 = v33[v17];
        ++v12;
        if (!v18)
        {
          v12 = v17 + 1;
          if (v17 + 1 >= v10)
            goto LABEL_36;
          v18 = v33[v12];
          if (!v18)
          {
            v12 = v17 + 2;
            if (v17 + 2 >= v10)
              goto LABEL_36;
            v18 = v33[v12];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v10)
              {
LABEL_36:
                swift_release(v3);
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v33[v19];
              if (!v18)
              {
                while (1)
                {
                  v12 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v12 >= v10)
                    goto LABEL_36;
                  v18 = v33[v12];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v12 = v19;
            }
          }
        }
LABEL_26:
        v9 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v12 << 6);
      }
      v20 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v16);
      v21 = *v20;
      v22 = v20[1];
      Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
      String.hash(into:)(v34, v21, v22);
      v23 = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = v23 & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v11 + 8 * v26);
        }
        while (v30 == -1);
        v13 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v13);
      *v14 = v21;
      v14[1] = v22;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  swift_release(v3);
  *v2 = v6;
}

void sub_1000553C4(unint64_t a1)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD v21[9];

  v2 = a1;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v6);
        v11 = *v10;
        v12 = v10[1];
        Hasher.init(_seed:)(v21, *(_QWORD *)(v3 + 40));
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v21, v11, v12);
        v13 = Hasher._finalize()();
        swift_bridgeObjectRelease(v12);
        v14 = v13 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v14 < v9)
            goto LABEL_5;
        }
        else if (v14 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v14)
        {
LABEL_11:
          v15 = *(_QWORD *)(v3 + 48);
          v16 = (_OWORD *)(v15 + 16 * v2);
          v17 = (_OWORD *)(v15 + 16 * v6);
          if (v2 != v6 || (v2 = v6, v16 >= v17 + 1))
          {
            *v16 = *v17;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  v18 = *(_QWORD *)(v3 + 16);
  v19 = __OFSUB__(v18, 1);
  v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }
}

Swift::Int sub_100055588(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a2)
  {
    sub_100003304(&qword_10010E698);
    v4 = static _DictionaryStorage.convert(_:capacity:)(a1, a2);
    v30 = v4;
    v5 = __CocoaDictionary.makeIterator()(a1);
    v6 = __CocoaDictionary.Iterator.next()();
    if (v6)
    {
      v8 = v6;
      v9 = v7;
      v10 = sub_100056BE8();
      do
      {
        v28 = v8;
        swift_dynamicCast(&v29, &v28, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
        v27 = v9;
        v21 = type metadata accessor for ConnectionContext();
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
        v4 = v30;
        v22 = *(_QWORD *)(v30 + 16);
        if (*(_QWORD *)(v30 + 24) <= v22)
        {
          sub_1000AE510(v22 + 1, 1);
          v4 = v30;
        }
        v12 = v28;
        v11 = v29;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
        v14 = v4 + 64;
        v15 = -1 << *(_BYTE *)(v4 + 32);
        v16 = result & ~v15;
        v17 = v16 >> 6;
        if (((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6))) != 0)
        {
          v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v23 = 0;
          v24 = (unint64_t)(63 - v15) >> 6;
          do
          {
            if (++v17 == v24 && (v23 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v25 = v17 == v24;
            if (v17 == v24)
              v17 = 0;
            v23 |= v25;
            v26 = *(_QWORD *)(v14 + 8 * v17);
          }
          while (v26 == -1);
          v18 = __clz(__rbit64(~v26)) + (v17 << 6);
        }
        *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
        v19 = 8 * v18;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + v19) = v11;
        *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v12;
        ++*(_QWORD *)(v4 + 16);
        v8 = __CocoaDictionary.Iterator.next()();
        v9 = v20;
      }
      while (v8);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  return v4;
}

void (*sub_1000557B0(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  _QWORD *v3;
  _QWORD *v7;
  char isUniquelyReferenced_nonNull_native;

  v7 = malloc(0x58uLL);
  *a1 = v7;
  v7[8] = a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  swift_bridgeObjectRetain(a3);
  v7[9] = sub_1000559F8(v7);
  v7[10] = sub_100055890(v7 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_100055840;
}

void sub_100055840(uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);
  uint64_t v3;

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 72);
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(*(_QWORD *)a1 + 32, 0);
  swift_bridgeObjectRelease(v3);
  v2(v1, 0);
  free(v1);
}

void (*sub_100055890(_QWORD *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1)
{
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  void (*result)(uint64_t **);

  v5 = v4;
  v10 = malloc(0x30uLL);
  *a1 = v10;
  v10[2] = a3;
  v10[3] = v5;
  v10[1] = a2;
  v11 = *v5;
  v13 = sub_1000AAE54(a2, a3);
  *((_BYTE *)v10 + 40) = v12 & 1;
  v14 = *(_QWORD *)(v11 + 16);
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    v17 = v12;
    v18 = *(_QWORD *)(v11 + 24);
    if (v18 >= v16 && (a4 & 1) != 0)
    {
LABEL_7:
      v10[4] = v13;
      if ((v17 & 1) != 0)
      {
LABEL_8:
        v19 = *(_QWORD *)(*(_QWORD *)(*v5 + 56) + 8 * v13);
LABEL_12:
        *v10 = v19;
        return sub_1000559BC;
      }
LABEL_11:
      v19 = 0;
      goto LABEL_12;
    }
    if (v18 >= v16 && (a4 & 1) == 0)
    {
      sub_1000AEE64();
      goto LABEL_7;
    }
    sub_1000ADEEC(v16, a4 & 1);
    v20 = sub_1000AAE54(a2, a3);
    if ((v17 & 1) == (v21 & 1))
    {
      v13 = v20;
      v10[4] = v20;
      if ((v17 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void sub_1000559BC(uint64_t **a1)
{
  uint64_t *v1;

  v1 = *a1;
  sub_100055A24(*a1, *((_BYTE *)*a1 + 40), (uint64_t *)(*a1)[3], (*a1)[4], (*a1)[1], (*a1)[2]);
  swift_bridgeObjectRelease(*v1);
  free(v1);
}

uint64_t (*sub_1000559F8(_QWORD *a1))(uint64_t result)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return sub_100055A18;
}

uint64_t sub_100055A18(uint64_t result)
{
  **(_QWORD **)(result + 8) = *(_QWORD *)result;
  return result;
}

uint64_t sub_100055A24(uint64_t *a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;

  v8 = *a1;
  if (*a1)
  {
    if ((a2 & 1) != 0)
    {
      *(_QWORD *)(*(_QWORD *)(*a3 + 56) + 8 * a4) = v8;
    }
    else
    {
      sub_1000AEE1C(a4, a5, a6, v8, (_QWORD *)*a3);
      swift_bridgeObjectRetain(a6);
    }
  }
  else if ((a2 & 1) != 0)
  {
    swift_arrayDestroy(*(_QWORD *)(*a3 + 48) + 16 * a4, 1, &type metadata for String);
    sub_1000AF6E0(a4, *a3);
  }
  return swift_bridgeObjectRetain(v8);
}

void sub_100055AC0(uint64_t a1, void *a2)
{
  _QWORD *v2;
  _TtC13GameOverlayUI20GameOverlayUIService **v3;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  _TtC13GameOverlayUI20GameOverlayUIService *v10;
  SEL v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  _TtC13GameOverlayUI20GameOverlayUIService *v18;

  v3 = (_TtC13GameOverlayUI20GameOverlayUIService **)v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) == 0)
    goto LABEL_7;
  if (v6 < 0)
    v7 = *v2;
  else
    v7 = v6 & 0xFFFFFFFFFFFFFF8;
  v8 = __CocoaDictionary.count.getter(v7);
  if (!__OFADD__(v8, 1))
  {
    v6 = sub_100055588(v7, v8 + 1);
    *v3 = (_TtC13GameOverlayUI20GameOverlayUIService *)v6;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v6);
    v18 = *v3;
    *v3 = (_TtC13GameOverlayUI20GameOverlayUIService *)0x8000000000000000;
    sub_1000B0044(a1, a2, isUniquelyReferenced_nonNull_native);
    v10 = *v3;
    *v3 = v18;
    swift_bridgeObjectRelease(v10, v11, v12, v13, v14, v15, v16, v17);
    return;
  }
  __break(1u);
}

uint64_t sub_100055B60(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  _QWORD v24[9];

  v7 = *v3;
  Hasher.init(_seed:)(v24, *(_QWORD *)(*v3 + 40));
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v24, a2, a3);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = v12[1];
    v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      v15 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0;
    }
    v18 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v18;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v19 = (_QWORD *)(v11 + 16 * v10);
      v20 = v19[1];
      v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0) & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease(v7);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain(a3);
  sub_100055D0C(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  v23 = *v3;
  *v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

void sub_100055D0C(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD v29[9];

  v5 = v4;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_1000550E8(v11);
  }
  else
  {
    if (v10 > v9)
    {
      sub_100054C8C();
      goto LABEL_22;
    }
    sub_100054E3C(v11);
  }
  v12 = *v4;
  Hasher.init(_seed:)(v29, *(_QWORD *)(*v4 + 40));
  String.hash(into:)(v29, a1, a2);
  v13 = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v12 + 32);
  a3 = v13 & ~v14;
  v15 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v16 = *(_QWORD *)(v12 + 48);
    v17 = (_QWORD *)(v16 + 16 * a3);
    v18 = v17[1];
    v19 = *v17 == a1 && v18 == a2;
    if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
    {
LABEL_21:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }
    else
    {
      v20 = ~v14;
      while (1)
      {
        a3 = (a3 + 1) & v20;
        if (((*(_QWORD *)(v15 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v21 = (_QWORD *)(v16 + 16 * a3);
        v22 = v21[1];
        v23 = *v21 == a1 && v22 == a2;
        if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v21, v22, a1, a2, 0) & 1) != 0)
          goto LABEL_21;
      }
    }
  }
LABEL_22:
  v24 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v25 = (_QWORD *)(*(_QWORD *)(v24 + 48) + 16 * a3);
  *v25 = a1;
  v25[1] = a2;
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (v27)
    __break(1u);
  else
    *(_QWORD *)(v24 + 16) = v28;
}

uint64_t sub_100055EA4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(a5(0) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 72);
  v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100055FBC(uint64_t a1, int64_t a2)
{
  unint64_t *v2;
  unint64_t v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  char v26;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!isUniquelyReferenced_nonNull_native || v9 > *(_QWORD *)(v4 + 24) >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_100054434(isUniquelyReferenced_nonNull_native, v11, 1, v4, &qword_10010E6B8, type metadata accessor for RemoteAlertRequest);
  }
  v12 = type metadata accessor for RemoteAlertRequest(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = v4 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  v15 = *(_QWORD *)(v13 + 72);
  v16 = v15 * a1;
  v17 = v14 + v15 * a1;
  result = swift_arrayDestroy(v17, v7, v12);
  if (!v7)
    goto LABEL_25;
  v19 = *(_QWORD *)(v4 + 16);
  v20 = v19 - a2;
  if (__OFSUB__(v19, a2))
    goto LABEL_31;
  if ((v20 & 0x8000000000000000) == 0)
  {
    v21 = v14 + v15 * a2;
    if (v16 < v15 * a2 || v17 >= v21 + v20 * v15)
    {
      result = swift_arrayInitWithTakeFrontToBack(v17, v21, v20, v12);
    }
    else if (v16 != v15 * a2)
    {
      result = swift_arrayInitWithTakeBackToFront(v17);
    }
    v23 = *(_QWORD *)(v4 + 16);
    v24 = __OFADD__(v23, v8);
    v25 = v23 - v7;
    if (!v24)
    {
      *(_QWORD *)(v4 + 16) = v25;
LABEL_25:
      *v2 = v4;
      return result;
    }
    goto LABEL_32;
  }
LABEL_33:
  v26 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v26, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_100056174(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  id v27;
  _QWORD *v28;
  os_log_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  os_log_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v6 = sub_100003304(&qword_10010EB20);
  __chkstk_darwin(v6);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for GameOverlayUIConfig.ServiceKind(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(void **)(a3 + 16);
  if (v13)
  {
    v14 = v13;
    if ((sub_1000B40A0() & 1) != 0)
    {
      v15 = objc_msgSend((id)objc_opt_self(RBSProcessIdentity), "identityOfCurrentProcess");
      if (v15)
      {
        v16 = v15;
        v41 = a2;
        v44 = a3;
        if (qword_10010BAA0 != -1)
          swift_once(&qword_10010BAA0, sub_100004DCC);
        v17 = type metadata accessor for Logger(0);
        v18 = sub_100004E8C(v17, (uint64_t)qword_1001232D8);
        (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
        v19 = v16;
        v40 = v18;
        v20 = Logger.logObject.getter();
        v21 = static os_log_type_t.info.getter();
        v22 = os_log_type_enabled(v20, v21);
        v42 = v14;
        v43 = v8;
        if (v22)
        {
          v23 = swift_slowAlloc(22, -1);
          v38 = (_QWORD *)swift_slowAlloc(8, -1);
          v39 = swift_slowAlloc(32, -1);
          v46 = v39;
          *(_DWORD *)v23 = 136315394;
          v37 = v20;
          v24 = GameOverlayUIConfig.ServiceKind.rawValue.getter();
          v26 = v25;
          v45 = sub_100031C58(v24, v25, &v46);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46);
          swift_bridgeObjectRelease(v26);
          (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
          *(_WORD *)(v23 + 12) = 2112;
          v45 = (uint64_t)v19;
          v27 = v19;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46);
          v28 = v38;
          *v38 = v16;

          v29 = v37;
          _os_log_impl((void *)&_mh_execute_header, v37, v21, "Presenting remoteAlert for %s from %@", (uint8_t *)v23, 0x16u);
          v30 = sub_100003304(&qword_10010EB00);
          swift_arrayDestroy(v28, 1, v30);
          swift_slowDealloc(v28, -1, -1);
          v31 = v39;
          swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v31, -1, -1);
          swift_slowDealloc(v23, -1, -1);

        }
        else
        {
          (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);

        }
        __asm { BR              X11 }
      }
      __break(1u);
      JUMPOUT(0x100056930);
    }

  }
  if (qword_10010BAA0 != -1)
    swift_once(&qword_10010BAA0, sub_100004DCC);
  v32 = type metadata accessor for Logger(0);
  sub_100004E8C(v32, (uint64_t)qword_1001232D8);
  v33 = Logger.logObject.getter();
  v34 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v33, v34))
  {
    v35 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v35 = 0;
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Cannot present remote alert because the client process state is invalid.", v35, 2u);
    swift_slowDealloc(v35, -1, -1);
  }

  return 0;
}

uint64_t sub_100056950(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v8 = *(_QWORD *)(sub_100003304(&qword_10010E658) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 72);
  v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
  v12 = v10 * v4;
  v13 = a3 + v12;
  v14 = v11 + v12;
  if (v11 >= v13 || v14 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v13;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100056A6C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));

  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100056AB0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc(dword_10010E674);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_1000263E8;
  return sub_100052EF8(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_100056B3C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100056B70(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_10010E68C);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_1000263E8;
  return sub_1000531E8(a1, v4, v5, v7, v6);
}

unint64_t sub_100056BE8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100111750;
  if (!qword_100111750)
  {
    v1 = objc_opt_self(SBSRemoteAlertHandle);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100111750);
  }
  return result;
}

uint64_t sub_100056C24()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100056C50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = (_QWORD *)swift_task_alloc(dword_10010E6AC);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_1000252CC;
  v4[2] = v2;
  v4[3] = v3;
  return swift_task_switch(sub_100052E5C, 0, 0);
}

uint64_t sub_100056CB0(uint64_t a1)
{
  uint64_t v1;

  return sub_100054150(a1, v1);
}

uint64_t sub_100056CB8(uint64_t a1)
{
  uint64_t v1;

  return sub_100053D68(a1, v1);
}

uint64_t sub_100056CC0(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  *(_BYTE *)(v3 + 476) = a2;
  *(_QWORD *)(v3 + 304) = a1;
  *(_QWORD *)(v3 + 312) = v2;
  v4 = sub_100003304(&qword_10010EB20);
  *(_QWORD *)(v3 + 320) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (*(_QWORD *)(*(_QWORD *)(sub_100003304(&qword_10010E6A0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 328) = swift_task_alloc(v5);
  *(_QWORD *)(v3 + 336) = swift_task_alloc(v5);
  return swift_task_switch(sub_100056D54, v2, 0);
}

uint64_t sub_100056D54()
{
  uint64_t v0;
  id v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = objc_msgSend(objc_allocWithZone((Class)FBSSystemService), "init");
  v2 = objc_msgSend(v1, "isPasscodeLockedOrBlocked");

  if ((v2 & 1) != 0)
  {
    if (qword_10010BAA0 != -1)
      swift_once(&qword_10010BAA0, sub_100004DCC);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_100004E8C(v3, (uint64_t)qword_1001232D8);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v5, v6))
      goto LABEL_17;
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    v8 = "Skipping Access Point request because device is locked or blocked.";
    goto LABEL_16;
  }
  v9 = *(_QWORD *)(v0 + 304);
  v10 = type metadata accessor for RemoteAlertRequest(0);
  *(_QWORD *)(v0 + 344) = v10;
  v11 = *(int *)(v10 + 24);
  *(_DWORD *)(v0 + 472) = v11;
  v12 = *(_QWORD *)(v9 + v11) + 64;
  swift_beginAccess(v12, v0 + 120, 0, 0);
  sub_100010CBC(v12, v0 + 16, &qword_10010E3A8);
  if (*(_QWORD *)(v0 + 40))
  {
    v13 = sub_100003304((uint64_t *)&unk_100111640);
    *(_QWORD *)(v0 + 352) = v13;
    v14 = type metadata accessor for RemoteAlertAccessPointContext(0);
    *(_QWORD *)(v0 + 360) = v14;
    if ((swift_dynamicCast(v0 + 280, v0 + 16, v13, v14, 6) & 1) != 0)
    {
      v15 = *(_QWORD *)(v0 + 280);
      *(_QWORD *)(v0 + 368) = v15;
      KeyPath = swift_getKeyPath(&unk_1000C9E90);
      *(_QWORD *)(v0 + 376) = OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext___observationRegistrar;
      *(_QWORD *)(v0 + 272) = v15;
      v17 = sub_1000581DC(&qword_10010CE18, 255, type metadata accessor for RemoteAlertAccessPointContext, (uint64_t)&unk_1000CE008);
      *(_QWORD *)(v0 + 384) = v17;
      ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 272, KeyPath, v17);
      swift_release(KeyPath);
      v18 = *(_QWORD *)(v15 + 16);
      *(_QWORD *)(v0 + 392) = v18;
      v19 = *(_QWORD *)(v15 + 24);
      *(_QWORD *)(v0 + 400) = v19;
      if (v19)
      {
        v20 = swift_getKeyPath(&unk_1000C9EB8);
        *(_QWORD *)(v0 + 216) = v15;
        swift_bridgeObjectRetain(v19);
        ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 216, v20, v17);
        swift_release(v20);
        *(_BYTE *)(v0 + 477) = *(_BYTE *)(v15
                                        + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__didReturnToForeground);
        v21 = (_QWORD *)swift_task_alloc(dword_10010E6DC);
        *(_QWORD *)(v0 + 408) = v21;
        *v21 = v0;
        v21[1] = sub_1000570F0;
        v22 = *(_QWORD *)(v0 + 312);
        v21[3] = v19;
        v21[4] = v22;
        v21[2] = v18;
        return swift_task_switch(sub_100053BA0, v22, 0);
      }
      swift_release(v15);
    }
  }
  else
  {
    sub_100010ED0(v0 + 16, &qword_10010E3A8);
  }
  if (qword_10010BAA0 != -1)
    swift_once(&qword_10010BAA0, sub_100004DCC);
  v24 = type metadata accessor for Logger(0);
  v25 = sub_100004E8C(v24, (uint64_t)qword_1001232D8);
  v5 = Logger.logObject.getter(v25);
  v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    v8 = "Access point request without a valid remote context or token.";
LABEL_16:
    _os_log_impl((void *)&_mh_execute_header, v5, v6, v8, v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }
LABEL_17:

  v26 = *(_QWORD *)(v0 + 328);
  v27 = *(_QWORD *)(v0 + 320);
  swift_task_dealloc(*(_QWORD *)(v0 + 336));
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000570F0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 312);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 408));
  return swift_task_switch(sub_100057148, v1, 0);
}

uint64_t sub_100057148()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  __objc2_class **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t KeyPath;

  v1 = *(void **)(*(_QWORD *)(*(_QWORD *)(v0 + 304) + *(int *)(v0 + 472)) + 16);
  *(_QWORD *)(v0 + 416) = v1;
  if (v1)
  {
    v2 = v1;
    if ((sub_1000B40A0() & 1) != 0)
    {
      if ((*(_BYTE *)(v0 + 477) & 1) != 0)
      {
LABEL_15:
        v19 = *(_QWORD *)(*(_QWORD *)(v0 + 304) + *(int *)(v0 + 472));
        v20 = *(_QWORD *)(v19 + 112);
        swift_bridgeObjectRetain(v20);
        sub_1000B3EFC(2);
        v22 = v21;
        v24 = v23;
        swift_bridgeObjectRelease(v20);
        *(_QWORD *)(v0 + 424) = v22;
        *(_QWORD *)(v0 + 432) = v24;
        v25 = *(_QWORD *)(v19 + 112);
        swift_bridgeObjectRetain(v25);
        sub_1000B3EFC(1);
        v27 = v26;
        v29 = v28;
        swift_bridgeObjectRelease(v25);
        *(_QWORD *)(v0 + 440) = v27;
        *(_QWORD *)(v0 + 448) = v29;
        if (qword_10010BBD0 != -1)
          swift_once(&qword_10010BBD0, sub_1000AD780);
        v30 = qword_1001233D0;
        *(_QWORD *)(v0 + 456) = qword_1001233D0;
        return swift_task_switch(sub_10005787C, v30, 0);
      }
      v4 = *(_QWORD *)(v0 + 336);
      v3 = *(_QWORD *)(v0 + 344);
      v5 = *(_QWORD *)(v0 + 328);
      sub_1000525E0(*(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 400), v4);
      sub_100010CBC(v4, v5, &qword_10010E6A0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(v5, 1, v3) == 1)
      {
        sub_100010ED0(*(_QWORD *)(v0 + 328), &qword_10010E6A0);
      }
      else
      {
        v17 = *(_QWORD *)(v0 + 328);
        v18 = *(__objc2_class ***)(v17 + *(int *)(*(_QWORD *)(v0 + 344) + 24));
        swift_retain(v18);
        sub_10005098C(v17);
        if (*v18 == _TtC13GameOverlayUI28AccessPointConnectionContext)
        {
          swift_beginAccess(v18 + 8, v0 + 96, 0, 0);
          sub_100010CBC((uint64_t)(v18 + 8), v0 + 56, &qword_10010E3A8);
          if (!*(_QWORD *)(v0 + 80))
          {
            swift_release(v18);
            sub_100010ED0(v0 + 56, &qword_10010E3A8);
            goto LABEL_14;
          }
          if ((swift_dynamicCast(v0 + 288, v0 + 56, *(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 360), 6) & 1) != 0)
          {
            v31 = *(_QWORD *)(v0 + 384);
            v32 = *(_QWORD *)(v0 + 288);
            KeyPath = swift_getKeyPath(&unk_1000C9F08);
            *(_QWORD *)(v0 + 296) = v32;
            ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 296, KeyPath, v31);
            swift_release(KeyPath);
            __asm { BR              X10 }
          }
        }
        swift_release(v18);
      }
LABEL_14:
      sub_100010ED0(*(_QWORD *)(v0 + 336), &qword_10010E6A0);
      goto LABEL_15;
    }

  }
  if (qword_10010BAA0 != -1)
    swift_once(&qword_10010BAA0, sub_100004DCC);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_100004E8C(v6, (uint64_t)qword_1001232D8);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Access point request without a valid remote target.", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }
  v12 = *(_QWORD *)(v0 + 392);
  v11 = *(_QWORD *)(v0 + 400);
  v13 = *(_QWORD *)(v0 + 368);

  sub_100050FF4(v12, v11);
  swift_bridgeObjectRelease(v11);
  swift_release(v13);
  v14 = *(_QWORD *)(v0 + 328);
  v15 = *(_QWORD *)(v0 + 320);
  swift_task_dealloc(*(_QWORD *)(v0 + 336));
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005787C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  void *Strong;
  uint64_t v10;
  void *v11;
  uint64_t v12;

  v1 = v0[57];
  swift_beginAccess(v1 + 112, v0 + 21, 0, 0);
  v2 = *(_QWORD *)(v1 + 112);
  if (!*(_QWORD *)(v2 + 16))
  {
    v6 = v0[54];
LABEL_7:
    swift_bridgeObjectRelease(v6);
    goto LABEL_8;
  }
  v4 = v0[53];
  v3 = v0[54];
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v2);
  v5 = sub_1000AAE54(v4, v3);
  v6 = v0[54];
  if ((v7 & 1) == 0)
  {
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRelease(v6);
    goto LABEL_7;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v5);
  swift_retain(v8);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v6);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v8 + 16);
  swift_bridgeObjectRelease(v6);
  swift_release(v8);
  if (!Strong)
  {
LABEL_8:
    v12 = v0[39];
    v11 = sub_100057980;
    return swift_task_switch(v11, v12, 0);
  }
  v10 = v0[39];

  v11 = sub_10005799C;
  v12 = v10;
  return swift_task_switch(v11, v12, 0);
}

uint64_t sub_100057980()
{
  uint64_t v0;
  uint64_t v1;

  v1 = qword_1001233D0;
  *(_QWORD *)(v0 + 464) = qword_1001233D0;
  return swift_task_switch(sub_100057AB4, v1, 0);
}

void sub_10005799C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0[48];
  v2 = v0[46];
  KeyPath = swift_getKeyPath(&unk_1000C9EE0);
  v0[31] = v2;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 31, KeyPath, v1);
  swift_release(KeyPath);
  v0[32] = v2;
  v4 = swift_getKeyPath(&unk_1000C9EE0);
  ObservationRegistrar.willSet<A, B>(_:keyPath:)(v0 + 32, v4, v1);
  swift_release(v4);
  v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__hideCount);
  v6 = __OFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
  {
    __break(1u);
  }
  else
  {
    v8 = v0[48];
    v9 = v0[46];
    *(_QWORD *)(v2 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__hideCount) = v7;
    v0[33] = v9;
    v10 = swift_getKeyPath(&unk_1000C9EE0);
    ObservationRegistrar.didSet<A, B>(_:keyPath:)(v0 + 33, v10, v8);
    swift_release(v10);
    v11 = qword_1001233D0;
    v0[58] = qword_1001233D0;
    swift_task_switch(sub_100057AB4, v11, 0);
  }
}

uint64_t sub_100057AB4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  void *Strong;
  uint64_t v10;
  uint64_t (*v11)();
  uint64_t v12;

  v1 = v0[58];
  swift_beginAccess(v1 + 112, v0 + 24, 0, 0);
  v2 = *(_QWORD *)(v1 + 112);
  if (!*(_QWORD *)(v2 + 16))
  {
    v6 = v0[56];
LABEL_7:
    swift_bridgeObjectRelease(v6);
    goto LABEL_8;
  }
  v4 = v0[55];
  v3 = v0[56];
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v2);
  v5 = sub_1000AAE54(v4, v3);
  v6 = v0[56];
  if ((v7 & 1) == 0)
  {
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRelease(v6);
    goto LABEL_7;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v5);
  swift_retain(v8);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v6);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v8 + 16);
  swift_bridgeObjectRelease(v6);
  swift_release(v8);
  if (!Strong)
  {
LABEL_8:
    v12 = v0[39];
    v11 = sub_100057BB8;
    return swift_task_switch(v11, v12, 0);
  }
  v10 = v0[39];

  v11 = sub_100057E50;
  v12 = v10;
  return swift_task_switch(v11, v12, 0);
}

uint64_t sub_100057BB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((*(_BYTE *)(v0 + 477) & 1) == 0)
    __asm { BR              X12 }
  v1 = *(_QWORD *)(v0 + 392);
  v2 = *(_QWORD *)(v0 + 400);
  swift_beginAccess(*(_QWORD *)(v0 + 312) + 112, v0 + 144, 33, 0);
  swift_bridgeObjectRetain(v2);
  v3 = sub_1000AFA64(v1, v2);
  swift_endAccess(v0 + 144);
  swift_bridgeObjectRelease_n(v2, 2);
  swift_bridgeObjectRelease(v3);
  v4 = *(void **)(v0 + 416);
  v5 = *(_QWORD *)(v0 + 368);
  sub_100051C28(*(_QWORD *)(v0 + 304), 0, 0, 0);

  swift_release(v5);
  v6 = *(_QWORD *)(v0 + 328);
  v7 = *(_QWORD *)(v0 + 320);
  swift_task_dealloc(*(_QWORD *)(v0 + 336));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100057E50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 384);
  v2 = *(_QWORD *)(v0 + 368);
  KeyPath = swift_getKeyPath(&unk_1000C9EE0);
  *(_QWORD *)(v0 + 224) = v2;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 224, KeyPath, v1);
  swift_release(KeyPath);
  *(_QWORD *)(v0 + 232) = v2;
  v4 = swift_getKeyPath(&unk_1000C9EE0);
  ObservationRegistrar.willSet<A, B>(_:keyPath:)(v0 + 232, v4, v1);
  swift_release(v4);
  v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__hideCount);
  v6 = __OFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
  {
    __break(1u);
    JUMPOUT(0x1000581A8);
  }
  v8 = *(_QWORD *)(v0 + 384);
  v9 = *(_QWORD *)(v0 + 368);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__hideCount) = v7;
  *(_QWORD *)(v0 + 240) = v9;
  v10 = swift_getKeyPath(&unk_1000C9EE0);
  ObservationRegistrar.didSet<A, B>(_:keyPath:)(v0 + 240, v10, v8);
  swift_release(v10);
  if ((*(_BYTE *)(v0 + 477) & 1) == 0)
    __asm { BR              X12 }
  v11 = *(_QWORD *)(v0 + 392);
  v12 = *(_QWORD *)(v0 + 400);
  swift_beginAccess(*(_QWORD *)(v0 + 312) + 112, v0 + 144, 33, 0);
  swift_bridgeObjectRetain(v12);
  v13 = sub_1000AFA64(v11, v12);
  swift_endAccess(v0 + 144);
  swift_bridgeObjectRelease_n(v12, 2);
  swift_bridgeObjectRelease(v13);
  v14 = *(void **)(v0 + 416);
  v15 = *(_QWORD *)(v0 + 368);
  sub_100051C28(*(_QWORD *)(v0 + 304), 0, 0, 0);

  swift_release(v15);
  v16 = *(_QWORD *)(v0 + 328);
  v17 = *(_QWORD *)(v0 + 320);
  swift_task_dealloc(*(_QWORD *)(v0 + 336));
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000581DC(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100058234()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100058260(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10010E6EC);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1000263E8;
  return sub_100054298(a1, v4, v5, v6);
}

uint64_t sub_1000582D4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v5 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v7 = a4 + 32 * a1 + 32;
    v8 = a3 + 32 * v5;
    if (v7 >= v8 || v7 + 32 * v5 <= a3)
    {
      sub_100003304(a5);
      swift_arrayInitWithCopy(a3);
      return v8;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

void *sub_1000583D8@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, void *a11)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t started;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t *v55;
  id v56;
  void *v57;
  id v58;
  id v59;
  id v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  void *result;
  uint64_t *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint8_t *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  void *v84;
  id v85;
  _TtC13GameOverlayUI20GameOverlayUIService *v86;
  const char *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  uint64_t v94;
  uint64_t *v95;
  void *v96;
  id v97;
  id v98;
  id v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  NSObject *v110;
  os_log_type_t v111;
  uint8_t *v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  char *v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  __int128 v171;
  uint64_t v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  uint64_t *v182;
  id v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  char *v201;
  char *v202;
  void (*v203)(char *, uint64_t);
  uint64_t v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  id v221;
  char *v222;
  uint64_t v223;
  _QWORD v224[19];
  __int128 v225;
  ValueMetadata *v226;
  unint64_t v227;
  uint64_t v228;
  _OWORD v229[9];
  uint64_t v230;
  _OWORD v231[9];
  uint64_t v232;
  _QWORD v233[3];
  uint64_t v234;
  uint64_t v235;
  _BYTE v236[152];
  _BYTE v237[152];
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  uint64_t v247;

  v188 = a8;
  v196 = a6;
  v197 = a7;
  v195 = a5;
  v192 = a3;
  v193 = a4;
  v191 = a2;
  v190 = a1;
  v221 = a11;
  v189 = type metadata accessor for InGameBannerRequiredData(0);
  __chkstk_darwin(v189);
  v194 = (char *)&v181 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100003304(&qword_10010E730);
  __chkstk_darwin(v13);
  v214 = (char *)&v181 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v198 = type metadata accessor for ActionMetrics(0);
  v206 = *(_QWORD *)(v198 - 8);
  __chkstk_darwin(v198);
  v205 = (char *)&v181 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v209 = type metadata accessor for FlowAction(0);
  __chkstk_darwin(v209);
  v201 = (char *)&v181 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v199 = sub_100003304(&qword_10010E738);
  v212 = *(_QWORD *)(v199 - 8);
  __chkstk_darwin(v199);
  v213 = (uint64_t)&v181 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v216 = v17;
  __chkstk_darwin(v18);
  v219 = (uint64_t)&v181 - v19;
  v20 = type metadata accessor for Game(0);
  v217 = *(uint64_t **)(v20 - 8);
  v218 = v20;
  __chkstk_darwin(v20);
  v185 = (uint64_t)&v181 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v184 = (uint64_t)&v181 - v23;
  v24 = sub_100003304(&qword_10010CC10);
  __chkstk_darwin(v24);
  v181 = (char *)&v181 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_100003304(&qword_10010CA78);
  __chkstk_darwin(v26);
  v215 = (uint64_t)&v181 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v182 = (uint64_t *)((char *)&v181 - v29);
  __chkstk_darwin(v30);
  v32 = (char *)&v181 - v31;
  v33 = type metadata accessor for OverlayBootstrap(0);
  __chkstk_darwin(v33);
  v35 = (char *)&v181 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  started = type metadata accessor for JetStartUpCoordinator(0);
  v37 = *(_QWORD *)(started - 8);
  __chkstk_darwin(started);
  v39 = (char *)&v181 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v40);
  v42 = (char *)&v181 - v41;
  v43 = type metadata accessor for InGameBannerView(0);
  v44 = *(int *)(v43 + 20);
  v223 = a9;
  v45 = a9 + v44;
  if (qword_10010BBD8 != -1)
    swift_once(&qword_10010BBD8, sub_1000B47F0);
  sub_100007878(qword_1001233E8 + OBJC_IVAR____TtC13GameOverlayUI24ConnectionContextManager_overlayBootstrap, (uint64_t)v35, type metadata accessor for OverlayBootstrap);
  v220 = sub_100003304(&qword_10010BE90);
  State.wrappedValue.getter(v42);
  v202 = v35;
  sub_1000106F0((uint64_t)v35, type metadata accessor for OverlayBootstrap);
  (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v39, v42, started);
  v207 = v45;
  v200 = v39;
  State.init(wrappedValue:)(v39, started);
  v210 = v37;
  v203 = *(void (**)(char *, uint64_t))(v37 + 8);
  v203(v42, started);
  v46 = type metadata accessor for GameDashboardLaunchContext(0);
  v47 = swift_allocObject(v46, *(unsigned int *)(v46 + 48), *(unsigned __int16 *)(v46 + 52));
  *(_BYTE *)(v47 + 16) = 0;
  v48 = v47 + OBJC_IVAR____TtC13GameOverlayUI26GameDashboardLaunchContext__action;
  v49 = type metadata accessor for LaunchDashboardAction(0);
  v50 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v48, 1, 1, v49);
  ObservationRegistrar.init()(v50);
  v187 = v43;
  v51 = (uint64_t *)(v223 + *(int *)(v43 + 24));
  *v51 = v47;
  v51[1] = 0;
  v52 = v217;
  v53 = v218;
  v54 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v217[7];
  v54(v32, 1, 1, v218);
  v222 = v32;
  v211 = started;
  v55 = v52;
  v208 = v42;
  v204 = v47;
  if (v221)
  {
    v56 = v221;
    v57 = (void *)objc_opt_self(NSKeyedArchiver);
    swift_retain(v47);
    v183 = v56;
    v58 = objc_msgSend(v183, "internal");
    *(_QWORD *)&v238 = 0;
    v59 = objc_msgSend(v57, "archivedDataWithRootObject:requiringSecureCoding:error:", v58, 1, &v238);

    v60 = (id)v238;
    if (v59)
    {
      v61 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v59);
      v63 = v62;

      sub_1000509C8(0, &qword_10010E3C0, NSKeyedUnarchiver_ptr);
      v64 = sub_1000509C8(0, &qword_10010E3C8, GKGameInternal_ptr);
      result = (void *)static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v64, v61, v63, v64);
      v66 = v55;
      v80 = result;
      v186 = 0;
      if (!result)
        goto LABEL_45;
      v81 = type metadata accessor for Date(0);
      v82 = (uint64_t)v181;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 56))(v181, 1, 1, v81);
      v83 = v182;
      sub_1000863B8(v80, v82, v182);
      sub_100038198(v61, v63);
      v32 = v222;
      sub_100010ED0((uint64_t)v222, &qword_10010CA78);

      v54((char *)v83, 0, 1, v53);
      sub_10001A0AC((uint64_t)v83, (uint64_t)v32, &qword_10010CA78);
    }
    else
    {
      v67 = v60;
      v68 = _convertNSErrorToError(_:)(v60);

      swift_willThrow(v69);
      v66 = v55;
      if (qword_10010BAA0 != -1)
        swift_once(&qword_10010BAA0, sub_100004DCC);
      v186 = 0;
      v70 = type metadata accessor for Logger(0);
      sub_100004E8C(v70, (uint64_t)qword_1001232D8);
      swift_errorRetain(v68);
      v71 = swift_errorRetain(v68);
      v72 = Logger.logObject.getter(v71);
      v73 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v72, v73))
      {
        v74 = (uint8_t *)swift_slowAlloc(12, -1);
        v217 = (uint64_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v74 = 138412290;
        swift_errorRetain(v68);
        v75 = v66;
        v76 = v53;
        v77 = _swift_stdlib_bridgeErrorToNSError(v68);
        *(_QWORD *)&v238 = v77;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v238, (char *)&v238 + 8);
        v78 = v217;
        *v217 = v77;
        v53 = v76;
        v66 = v75;
        swift_errorRelease(v68);
        swift_errorRelease(v68);
        _os_log_impl((void *)&_mh_execute_header, v72, v73, "Game could not be serialized: %@", v74, 0xCu);
        v79 = sub_100003304(&qword_10010EB00);
        swift_arrayDestroy(v78, 1, v79);
        swift_slowDealloc(v78, -1, -1);
        swift_slowDealloc(v74, -1, -1);

        swift_errorRelease(v68);
      }
      else
      {

        swift_errorRelease(v68);
        swift_errorRelease(v68);
        swift_errorRelease(v68);

      }
      v32 = v222;
    }
  }
  else
  {
    swift_retain(v47);
    v186 = 0;
    v66 = v52;
  }
  sub_10005A0B0((uint64_t)v237);
  sub_10001A0AC((uint64_t)v237, (uint64_t)v236, &qword_10010E740);
  v84 = (void *)objc_opt_self(GKLocalPlayer);
  v85 = objc_msgSend(v84, "authenticatedLocalPlayers");
  v86 = (_TtC13GameOverlayUI20GameOverlayUIService *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v85, (char *)&type metadata for Any + 8);

  if (v86[1].super.isa)
  {
    sub_100031EE0((uint64_t)&v86[2], (uint64_t)&v238);
  }
  else
  {
    v238 = 0u;
    v239 = 0u;
  }
  swift_bridgeObjectRelease(v86, v87, v88, v89, v90, v91, v92, v93);
  if (*((_QWORD *)&v239 + 1))
  {
    v94 = sub_1000509C8(0, (unint64_t *)&qword_1001116E0, GKLocalPlayer_ptr);
    if (swift_dynamicCast(v231, &v238, (char *)&type metadata for Any + 8, v94, 6))
    {
      v95 = *(uint64_t **)&v231[0];
      goto LABEL_23;
    }
  }
  else
  {
    sub_100010ED0((uint64_t)&v238, &qword_10010EB30);
  }
  v95 = (uint64_t *)objc_msgSend(v84, "local");
LABEL_23:
  v96 = (void *)objc_opt_self(NSKeyedArchiver);
  v217 = v95;
  v97 = objc_msgSend(v95, "internal");
  *(_QWORD *)&v238 = 0;
  v98 = objc_msgSend(v96, "archivedDataWithRootObject:requiringSecureCoding:error:", v97, 1, &v238);

  v99 = (id)v238;
  if (!v98)
  {
    v106 = v99;
    v105 = _convertNSErrorToError(_:)(v99);

    swift_willThrow(v107);
    goto LABEL_27;
  }
  v100 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v98);
  v102 = v101;

  sub_1000509C8(0, &qword_10010E3C0, NSKeyedUnarchiver_ptr);
  v103 = sub_1000509C8(0, &qword_10010E768, GKPlayerInternal_ptr);
  v104 = v186;
  result = (void *)static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v103, v100, v102, v103);
  if (v104)
  {
    v105 = v104;
    sub_100038198(v100, v102);
    v32 = v222;
LABEL_27:
    if (qword_10010BAA0 != -1)
      swift_once(&qword_10010BAA0, sub_100004DCC);
    v108 = type metadata accessor for Logger(0);
    sub_100004E8C(v108, (uint64_t)qword_1001232D8);
    swift_errorRetain(v105);
    v109 = swift_errorRetain(v105);
    v110 = Logger.logObject.getter(v109);
    v111 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v110, v111))
    {
      v112 = (uint8_t *)swift_slowAlloc(12, -1);
      v113 = v66;
      v114 = swift_slowAlloc(8, -1);
      *(_DWORD *)v112 = 138412290;
      swift_errorRetain(v105);
      v115 = _swift_stdlib_bridgeErrorToNSError(v105);
      *(_QWORD *)&v238 = v115;
      v53 = v218;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v238, (char *)&v238 + 8);
      v116 = (_QWORD *)v114;
      v66 = v113;
      *v116 = v115;
      v32 = v222;
      swift_errorRelease(v105);
      swift_errorRelease(v105);
      _os_log_impl((void *)&_mh_execute_header, v110, v111, "Player could not be serialized: %@", v112, 0xCu);
      v117 = sub_100003304(&qword_10010EB00);
      swift_arrayDestroy(v116, 1, v117);
      swift_slowDealloc(v116, -1, -1);
      swift_slowDealloc(v112, -1, -1);

      swift_errorRelease(v105);
    }
    else
    {
      swift_errorRelease(v105);
      swift_errorRelease(v105);
      swift_errorRelease(v105);

    }
    goto LABEL_34;
  }
  if (!result)
  {
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    return result;
  }
  sub_1000648B0(result, (uint64_t)v229);
  sub_100038198(v100, v102);
  sub_10001A0AC((uint64_t)v236, (uint64_t)v231, &qword_10010E740);
  sub_10005A3B4(v231, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10005A418);
  v244 = v229[6];
  v245 = v229[7];
  v246 = v229[8];
  v247 = v230;
  v240 = v229[2];
  v241 = v229[3];
  v242 = v229[4];
  v243 = v229[5];
  v238 = v229[0];
  v239 = v229[1];
  property wrapper backing initializer of Shelf.items(&v238);
  sub_10001A0AC((uint64_t)&v238, (uint64_t)v236, &qword_10010E740);
  v32 = v222;
LABEL_34:
  v118 = v215;
  sub_100010CBC((uint64_t)v32, v215, &qword_10010CA78);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v66[6])(v118, 1, v53) != 1)
  {
    v119 = v216;
    v126 = v118;
    v127 = v184;
    sub_100010F0C(v126, v184, type metadata accessor for Game);
    v128 = v185;
    sub_100007878(v127, v185, type metadata accessor for Game);
    sub_10001A0AC((uint64_t)v236, (uint64_t)v231, &qword_10010E740);
    sub_10001A0AC((uint64_t)v231, (uint64_t)&v238, &qword_10010E740);
    result = (void *)sub_10005A0D0((uint64_t)&v238);
    if ((_DWORD)result != 1)
    {
      sub_10001A0AC((uint64_t)v231, (uint64_t)v229, &qword_10010E740);
      sub_100019FF0(v229);
      sub_1000106F0(v127, type metadata accessor for Game);
      v129 = type metadata accessor for GameDashboardPageIntent(0);
      v226 = (ValueMetadata *)v129;
      v227 = sub_1000035B4(&qword_10010E760, type metadata accessor for GameDashboardPageIntent, (uint64_t)&protocol conformance descriptor for GameDashboardPageIntent);
      v130 = sub_1000052B0(&v225);
      sub_100010F0C(v128, (uint64_t)v130, type metadata accessor for Game);
      v131 = (char *)v130 + *(int *)(v129 + 20);
      v132 = v239;
      *(_OWORD *)v131 = v238;
      *((_OWORD *)v131 + 1) = v132;
      v133 = v240;
      v134 = v241;
      v135 = v243;
      *((_OWORD *)v131 + 4) = v242;
      *((_OWORD *)v131 + 5) = v135;
      *((_OWORD *)v131 + 2) = v133;
      *((_OWORD *)v131 + 3) = v134;
      v136 = v244;
      v137 = v245;
      v138 = v246;
      *((_QWORD *)v131 + 18) = v247;
      *((_OWORD *)v131 + 7) = v137;
      *((_OWORD *)v131 + 8) = v138;
      *((_OWORD *)v131 + 6) = v136;
      v125 = sub_10005A194(&v225, (uint64_t)v233);
      goto LABEL_39;
    }
    goto LABEL_43;
  }
  v119 = v216;
  sub_100010ED0(v118, &qword_10010CA78);
  sub_10001A0AC((uint64_t)v236, (uint64_t)v231, &qword_10010E740);
  sub_10001A0AC((uint64_t)v231, (uint64_t)&v238, &qword_10010E740);
  result = (void *)sub_10005A0D0((uint64_t)&v238);
  if ((_DWORD)result == 1)
  {
    __break(1u);
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  v226 = &type metadata for PlayNowPageIntent;
  v227 = sub_10005A0E8();
  v120 = swift_allocObject(&unk_1000FE970, 168, 7);
  *(_QWORD *)&v225 = v120;
  v121 = v245;
  *(_OWORD *)(v120 + 112) = v244;
  *(_OWORD *)(v120 + 128) = v121;
  *(_OWORD *)(v120 + 144) = v246;
  *(_QWORD *)(v120 + 160) = v247;
  v122 = v241;
  *(_OWORD *)(v120 + 48) = v240;
  *(_OWORD *)(v120 + 64) = v122;
  v123 = v243;
  *(_OWORD *)(v120 + 80) = v242;
  *(_OWORD *)(v120 + 96) = v123;
  v124 = v239;
  *(_OWORD *)(v120 + 16) = v238;
  *(_OWORD *)(v120 + 32) = v124;
  sub_10005A194(&v225, (uint64_t)v233);
  sub_10001A0AC((uint64_t)v231, (uint64_t)v229, &qword_10010E740);
  v125 = (uint64_t)sub_100019FF0(v229);
LABEL_39:
  v140 = v200;
  v139 = v201;
  v142 = v198;
  v141 = v199;
  v143 = v205;
  static ActionMetrics.notInstrumented.getter(v125);
  v144 = v234;
  v145 = v235;
  v146 = sub_100003C28(v233, v234);
  v147 = v209;
  v148 = static FlowDestination.page<A>(whatPage:)((uint64_t)v146, v144, v145, &v139[*(int *)(v209 + 24)]);
  v149 = static FlowActionPresentation.tabSelect.getter(v148);
  v151 = v150;
  *(_QWORD *)v139 = 0x7265764F656D6167;
  *((_QWORD *)v139 + 1) = 0xEB0000000079616CLL;
  (*(void (**)(char *, char *, uint64_t))(v206 + 32))(&v139[*(int *)(v147 + 20)], v143, v142);
  v152 = (uint64_t *)&v139[*(int *)(v147 + 28)];
  *v152 = v149;
  v152[1] = v151;
  v153 = sub_1000035B4(&qword_10010E750, type metadata accessor for FlowAction, (uint64_t)&protocol conformance descriptor for FlowAction);
  v154 = sub_1000035B4(&qword_10010E758, type metadata accessor for FlowAction, (uint64_t)&protocol conformance descriptor for FlowAction);
  v155 = v219;
  FlowAuthority.init(content:)(v139, v147, v153, v154);
  *(_QWORD *)(v155 + *(int *)(v141 + 28)) = 0;
  sub_100010CBC(v155, v223, &qword_10010E738);
  v156 = (uint64_t)v202;
  sub_100007878(qword_1001233E8 + OBJC_IVAR____TtC13GameOverlayUI24ConnectionContextManager_overlayBootstrap, (uint64_t)v202, type metadata accessor for OverlayBootstrap);
  State.wrappedValue.getter(v140);
  sub_1000106F0(v156, type metadata accessor for OverlayBootstrap);
  v157 = type metadata accessor for JetStartUpProcedure(0);
  v158 = v140;
  v159 = (uint64_t)v214;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v157 - 8) + 56))(v214, 1, 1, v157);
  v160 = v155;
  v161 = v213;
  sub_100010CBC(v160, v213, &qword_10010E738);
  sub_10001A0AC((uint64_t)v236, (uint64_t)&v238, &qword_10010E740);
  v162 = *(unsigned __int8 *)(v212 + 80);
  v163 = (v162 + 16) & ~v162;
  v164 = (v119 + v163 + 7) & 0xFFFFFFFFFFFFFFF8;
  v165 = (v164 + 159) & 0xFFFFFFFFFFFFFFF8;
  v166 = swift_allocObject(&unk_1000FE998, v165 + 8, v162 | 7);
  sub_10001A0AC(v161, v166 + v163, &qword_10010E738);
  sub_10001A0AC((uint64_t)&v238, v166 + v164, &qword_10010E740);
  v167 = v204;
  *(_QWORD *)(v166 + v165) = v204;
  swift_retain(v167);
  sub_10005A3B4(&v238, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10005A2FC);
  v168 = v208;
  JetStartUpCoordinator.extend(startUpProcedure:withDependencies:)(v159, sub_10005A2AC, v166);
  swift_release(v166);
  sub_100010ED0(v159, &qword_10010E730);
  v169 = v211;
  v203(v158, v211);
  v170 = v207;
  sub_100010ED0(v207, &qword_10010BE90);
  *(_QWORD *)(v170 + *(int *)(v220 + 28)) = 0;
  (*(void (**)(uint64_t, char *, uint64_t))(v210 + 32))(v170, (char *)v168, v169);
  swift_beginAccess(v236, &v228, 0, 0);
  sub_10001A0AC((uint64_t)v236, (uint64_t)v229, &qword_10010E740);
  sub_10001A0AC((uint64_t)v229, (uint64_t)v231, &qword_10010E740);
  if (sub_10005A0D0((uint64_t)v231) == 1)
    __break(1u);
  sub_10001A0AC((uint64_t)v229, (uint64_t)v224, &qword_10010E740);
  sub_100019FF0(v224);
  swift_release(v167);

  sub_100010ED0(v219, &qword_10010E738);
  sub_10001A0AC((uint64_t)v236, (uint64_t)&v225, &qword_10010E740);
  sub_10005A3B4(&v225, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10005A418);
  v171 = v231[7];
  v172 = (uint64_t)v194;
  *(_OWORD *)(v194 + 104) = v231[6];
  *(_OWORD *)(v172 + 120) = v171;
  *(_OWORD *)(v172 + 136) = v231[8];
  v173 = v231[3];
  *(_OWORD *)(v172 + 40) = v231[2];
  *(_OWORD *)(v172 + 56) = v173;
  v174 = v231[5];
  *(_OWORD *)(v172 + 72) = v231[4];
  *(_OWORD *)(v172 + 88) = v174;
  v175 = v231[1];
  *(_OWORD *)(v172 + 8) = v231[0];
  *(_BYTE *)v172 = v190;
  v176 = v191;
  *(_QWORD *)(v172 + 152) = v232;
  *(_QWORD *)(v172 + 160) = v176;
  v177 = v193;
  *(_QWORD *)(v172 + 168) = v192;
  *(_QWORD *)(v172 + 176) = v177;
  v178 = v196;
  *(_QWORD *)(v172 + 184) = v195;
  *(_QWORD *)(v172 + 192) = v178;
  v179 = v188;
  *(_QWORD *)(v172 + 200) = v197;
  *(_QWORD *)(v172 + 208) = v179;
  *(_QWORD *)(v172 + 216) = a10;
  v180 = v172 + *(int *)(v189 + 40);
  *(_OWORD *)(v172 + 24) = v175;
  sub_10001A0AC((uint64_t)v222, v180, &qword_10010CA78);
  sub_100004624(v233);
  return (void *)sub_100010F0C(v172, v223 + *(int *)(v187 + 28), type metadata accessor for InGameBannerRequiredData);
}

uint64_t type metadata accessor for InGameBannerView(uint64_t a1)
{
  uint64_t result;

  result = qword_10010E7E0;
  if (!qword_10010E7E0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for InGameBannerView);
  return result;
}

uint64_t sub_100059734(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, char *, uint64_t);
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _OWORD v39[9];
  uint64_t v40;
  _OWORD v41[9];
  uint64_t v42;

  v37 = a2;
  v38 = a3;
  v3 = type metadata accessor for Dependency(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003304(&qword_10010CC18);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (_QWORD *)((char *)&v34 - v12);
  sub_100003304(&qword_10010E738);
  State.projectedValue.getter(v13);
  v14 = sub_100003304(&qword_10010E770);
  sub_100010CBC((uint64_t)v13, (uint64_t)v10, &qword_10010CC18);
  v15 = *(unsigned __int8 *)(v8 + 80);
  v16 = (v15 + 16) & ~v15;
  v17 = swift_allocObject(&unk_1000FE9C0, v16 + v9, v15 | 7);
  sub_10001A0AC((uint64_t)v10, v17 + v16, &qword_10010CC18);
  Dependency.init<A>(satisfying:with:)(v14, sub_10005A56C, v17, v14);
  type metadata accessor for BaseObjectGraph(0);
  v18 = sub_100003304(&qword_10010E778);
  v19 = *(unsigned __int8 *)(v4 + 80);
  v20 = (v19 + 32) & ~v19;
  v21 = v20 + *(_QWORD *)(v4 + 72);
  v35 = v19 | 7;
  v36 = v18;
  v22 = swift_allocObject(v18, v21, v19 | 7);
  v34 = xmmword_1000C9D90;
  *(_OWORD *)(v22 + 16) = xmmword_1000C9D90;
  v23 = *(void (**)(uint64_t, char *, uint64_t))(v4 + 16);
  v23(v22 + v20, v6, v3);
  v24 = BaseObjectGraph.__allocating_init(name:_:)(0, 0xE000000000000000, v22);
  v25 = *(void (**)(char *, uint64_t))(v4 + 8);
  v25(v6, v3);
  v26 = (uint64_t)v13;
  v27 = v37;
  sub_100010ED0(v26, &qword_10010CC18);
  sub_10001A0AC((uint64_t)v27, (uint64_t)v41, &qword_10010E740);
  if (sub_10005A0D0((uint64_t)v41) == 1)
  {
    swift_retain(v24);
    v28 = BaseObjectGraph.__allocating_init(name:_:)(0, 0xE000000000000000, &_swiftEmptyArrayStorage);
  }
  else
  {
    v39[6] = v41[6];
    v39[7] = v41[7];
    v39[8] = v41[8];
    v40 = v42;
    v39[2] = v41[2];
    v39[3] = v41[3];
    v39[4] = v41[4];
    v39[5] = v41[5];
    v39[0] = v41[0];
    v39[1] = v41[1];
    swift_retain(v24);
    sub_10005A3B4(v27, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10005A2FC);
    Dependency.init<A>(satisfying:with:)(&type metadata for Player, v39, &type metadata for Player);
    v29 = swift_allocObject(v36, v21, v35);
    *(_OWORD *)(v29 + 16) = v34;
    v23(v29 + v20, v6, v3);
    v28 = BaseObjectGraph.__allocating_init(name:_:)(0, 0xE000000000000000, v29);
    v25(v6, v3);
  }
  v30 = type metadata accessor for GameDashboardLaunchContext(0);
  *(_QWORD *)&v39[0] = v38;
  swift_retain(v38);
  Dependency.init<A>(satisfying:with:)(v30, v39, v30);
  swift_retain(v24);
  v31 = dispatch thunk of BaseObjectGraph.adding(allDependenciesOf:)(v28);
  swift_release(v24);
  swift_retain(v31);
  v32 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v6);
  swift_release(v28);
  swift_release_n(v31, 2);
  swift_release_n(v24, 2);
  v25(v6, v3);
  return v32;
}

uint64_t sub_100059AB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  v4 = sub_100003304(&qword_10010E780);
  __chkstk_darwin(v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v16 - v8;
  v10 = sub_100003304(&qword_10010E770);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for BaseObjectGraph(0);
  ActionDispatcher.init()(v14);
  sub_100097EB8(a1, (uint64_t)v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 16))(a2, v13, v10);
  sub_100010CBC((uint64_t)v9, (uint64_t)v6, &qword_10010E780);
  ActionDispatcher.next.setter(v6, v10);
  sub_100010ED0((uint64_t)v9, &qword_10010E780);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t sub_100059C04@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t started;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v40 = a1;
  started = type metadata accessor for JetStartUpDecoration(0);
  v38 = *(_QWORD *)(started - 8);
  v39 = started;
  __chkstk_darwin(started);
  v37 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for InGameBannerView(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = type metadata accessor for JetStartUpCoordinator(0);
  v8 = *(_QWORD *)(v7 - 8);
  v34 = v7;
  __chkstk_darwin(v7);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (uint64_t *)((char *)&v33 - v12);
  v14 = sub_100003304(&qword_10010E828);
  v15 = *(_QWORD *)(v14 - 8);
  v35 = v14;
  v36 = v15;
  __chkstk_darwin(v14);
  v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100003304(&qword_10010BE90);
  State.wrappedValue.getter(v13);
  sub_100007878(v1, (uint64_t)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for InGameBannerView);
  v18 = *(unsigned __int8 *)(v5 + 80);
  v19 = (v18 + 16) & ~v18;
  v20 = swift_allocObject(&unk_1000FE9E8, v19 + v6, v18 | 7);
  sub_100010F0C((uint64_t)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v20 + v19, type metadata accessor for InGameBannerView);
  (*(void (**)(char *, _QWORD *, uint64_t))(v8 + 16))(v10, v13, v7);
  v21 = type metadata accessor for AccessPointPageView(0);
  v22 = type metadata accessor for _JetViewDefaultWorking(0);
  v23 = type metadata accessor for _JetViewDefaultFailed(0);
  v24 = sub_1000035B4(&qword_10010E830, type metadata accessor for AccessPointPageView, (uint64_t)&protocol conformance descriptor for AccessPointPageView);
  v25 = sub_1000035B4(&qword_10010E838, (uint64_t (*)(uint64_t))&type metadata accessor for _JetViewDefaultWorking, (uint64_t)&protocol conformance descriptor for _JetViewDefaultWorking);
  v26 = sub_1000035B4(&qword_10010E840, (uint64_t (*)(uint64_t))&type metadata accessor for _JetViewDefaultFailed, (uint64_t)&protocol conformance descriptor for _JetViewDefaultFailed);
  Jet.init(startUpWith:working:failed:content:)(v10, &j___s18_JetEngine_SwiftUI01_A18ViewDefaultWorkingVACycfC, 0, sub_10009890C, 0, sub_10005C440, v20, v21, v22, v23, v24, v25, v26);
  (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(v13, v34);
  v28 = v37;
  v27 = v38;
  v29 = v39;
  (*(void (**)(char *, _QWORD, uint64_t))(v38 + 104))(v37, enum case for JetStartUpDecoration.none(_:), v39);
  v30 = sub_10005C48C();
  v31 = v35;
  View.startUpDecoration(_:)(v28, v35, v30);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v28, v29);
  return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v17, v31);
}

uint64_t sub_100059F18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for InGameBannerView(0);
  v7 = a2 + *(int *)(v6 + 28);
  a3[3] = type metadata accessor for InGameBannerPageIntent(0);
  a3[4] = sub_1000035B4((unint64_t *)&unk_10010CA60, type metadata accessor for InGameBannerPageIntent, (uint64_t)&protocol conformance descriptor for InGameBannerPageIntent);
  v8 = sub_1000052B0(a3);
  sub_100007878(v7, (uint64_t)v8, type metadata accessor for InGameBannerRequiredData);
  v9 = (int *)type metadata accessor for AccessPointPageView(0);
  v10 = (char *)a3 + v9[5];
  v11 = enum case for AccessPointAnchoring.topCentered(_:);
  v12 = type metadata accessor for AccessPointAnchoring(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v10, v11, v12);
  v13 = (uint64_t *)(a2 + *(int *)(v6 + 24));
  v19 = *v13;
  v20 = v13[1];
  sub_100003304(&qword_10010E850);
  State.wrappedValue.getter(&v21);
  v14 = v21;
  v15 = (_QWORD *)((char *)a3 + v9[8]);
  swift_retain(a1);
  sub_100003304(&qword_10010E738);
  State.projectedValue.getter(v15);
  v16 = (_QWORD *)((char *)a3 + v9[9]);
  v17 = sub_100003304(&qword_10010BBF0);
  swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  v21 = LRUMultiCache.init(keyLimit:valueLimit:)(1000, 3);
  result = State.init(wrappedValue:)(&v21, v17);
  *v16 = v19;
  v16[1] = v20;
  *(_QWORD *)((char *)a3 + v9[6]) = v14;
  *(_QWORD *)((char *)a3 + v9[7]) = a1;
  return result;
}

double sub_10005A0B0(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 144) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t sub_10005A0D0(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

unint64_t sub_10005A0E8()
{
  unint64_t result;

  result = qword_10010E748;
  if (!qword_10010E748)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PlayNowPageIntent, &type metadata for PlayNowPageIntent);
    atomic_store(result, (unint64_t *)&qword_10010E748);
  }
  return result;
}

uint64_t sub_10005A12C()
{
  _QWORD *v0;
  uint64_t v1;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[9]);
  swift_bridgeObjectRelease(v0[11]);
  v1 = v0[14];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[16]);
    swift_bridgeObjectRelease(v0[18]);
    swift_bridgeObjectRelease(v0[20]);
  }
  return swift_deallocObject(v0, 168, 7);
}

uint64_t sub_10005A194(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_10005A1AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  _TtC13GameOverlayUI20GameOverlayUIService **v15;
  _TtC13GameOverlayUI20GameOverlayUIService *v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  SEL v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  SEL v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  const char *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  _TtC13GameOverlayUI20GameOverlayUIService *v52;
  SEL v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  SEL v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  SEL v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  unint64_t v74;
  unint64_t v75;

  v1 = sub_100003304(&qword_10010E738);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = v0 + v4;
  v7 = sub_100003304(&qword_10010CC20);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  swift_release(*(_QWORD *)(v6 + *(int *)(v1 + 28)));
  v15 = (_TtC13GameOverlayUI20GameOverlayUIService **)(v0 + v5);
  v16 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v0 + v5 + 8);
  if (v16)
  {
    swift_bridgeObjectRelease(v16, v8, v9, v10, v11, v12, v13, v14);
    swift_bridgeObjectRelease(v15[3], v17, v18, v19, v20, v21, v22, v23);
    swift_bridgeObjectRelease(v15[5], v24, v25, v26, v27, v28, v29, v30);
    swift_bridgeObjectRelease(v15[7], v31, v32, v33, v34, v35, v36, v37);
    swift_bridgeObjectRelease(v15[9], v38, v39, v40, v41, v42, v43, v44);
    v52 = v15[12];
    if (v52)
    {
      swift_bridgeObjectRelease(v52, v45, v46, v47, v48, v49, v50, v51);
      swift_bridgeObjectRelease(v15[14], v53, v54, v55, v56, v57, v58, v59);
      swift_bridgeObjectRelease(v15[16], v60, v61, v62, v63, v64, v65, v66);
      swift_bridgeObjectRelease(v15[18], v67, v68, v69, v70, v71, v72, v73);
    }
  }
  v74 = (v5 + 159) & 0xFFFFFFFFFFFFFFF8;
  v75 = v74 + 8;
  swift_release(*(_QWORD *)(v0 + v74));
  return swift_deallocObject(v0, v75, v3 | 7);
}

uint64_t sub_10005A2AC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(sub_100003304(&qword_10010E738) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100059734(v0 + v2, (_QWORD *)(v0 + v3), *(_QWORD *)(v0 + ((v3 + 159) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_10005A2FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a10);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a8);
    return sub_100012878(a12, a13, a14, a15, a16, a17, a18, a19);
  }
  return result;
}

_QWORD *sub_10005A3B4(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18]);
  return a1;
}

uint64_t sub_10005A418(uint64_t a1, _TtC13GameOverlayUI20GameOverlayUIService *a2, void *a3, _TtC13GameOverlayUI20GameOverlayUIService *a4, void *a5, _TtC13GameOverlayUI20GameOverlayUIService *a6, void *a7, _TtC13GameOverlayUI20GameOverlayUIService *a8, uint64_t a9, _TtC13GameOverlayUI20GameOverlayUIService *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  SEL v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  SEL v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  SEL v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  SEL v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2, (SEL)a2, a3, a4, a5, a6, a7, a8);
    swift_bridgeObjectRelease(a4, v22, v23, v24, v25, v26, v27, v28);
    swift_bridgeObjectRelease(a6, v29, v30, v31, v32, v33, v34, v35);
    swift_bridgeObjectRelease(a8, v36, v37, v38, v39, v40, v41, v42);
    swift_bridgeObjectRelease(a10, v43, v44, v45, v46, v47, v48, v49);
    return sub_10000FAB4(a12, a13, a14, a15, a16, a17, a18, a19);
  }
  return result;
}

uint64_t sub_10005A4D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = sub_100003304(&qword_10010CC18);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  swift_release(*(_QWORD *)(v0 + v4));
  swift_release(*(_QWORD *)(v7 + 8));
  v8 = v7 + *(int *)(v1 + 32);
  v9 = sub_100003304(&qword_10010CC20);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10005A56C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(sub_100003304(&qword_10010CC18) - 8) + 80);
  return sub_100059AB4(v1 + ((v3 + 16) & ~v3), a1);
}

_QWORD *sub_10005A5AC(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t started;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  _QWORD *v46;
  int *v47;
  uint64_t v48;
  unsigned int (*v49)(_QWORD *, uint64_t, int *);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int (*v58)(char *, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  char *v61;
  _QWORD *v62;
  uint64_t v63;
  void (*v64)(char *, _QWORD, uint64_t, int *);
  char *__dst;
  uint64_t v67;
  _QWORD *v68;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v34 = *a2;
    *a1 = *a2;
    v35 = (_QWORD *)(v34 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v34);
  }
  else
  {
    v7 = sub_100003304(&qword_10010CC20);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(sub_100003304(&qword_10010E738) + 28);
    v9 = *(_QWORD *)((char *)a2 + v8);
    *(_QWORD *)((char *)a1 + v8) = v9;
    v10 = a3[5];
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    started = type metadata accessor for JetStartUpCoordinator(0);
    v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(started - 8) + 16);
    swift_retain(v9);
    v14(v11, v12, started);
    v15 = *(int *)(sub_100003304(&qword_10010BE90) + 28);
    v16 = *(_QWORD *)&v12[v15];
    *(_QWORD *)&v11[v15] = v16;
    v17 = a3[6];
    v18 = a3[7];
    v19 = (_QWORD *)((char *)a1 + v17);
    v20 = (_QWORD *)((char *)a2 + v17);
    v21 = *v20;
    v22 = v20[1];
    *v19 = *v20;
    v19[1] = v22;
    v68 = a1;
    v23 = (char *)a1 + v18;
    v24 = (_QWORD *)((char *)a2 + v18);
    *v23 = *((_BYTE *)a2 + v18);
    v25 = *(_QWORD *)((char *)a2 + v18 + 16);
    *((_QWORD *)v23 + 1) = *(_QWORD *)((char *)a2 + v18 + 8);
    *((_QWORD *)v23 + 2) = v25;
    v26 = *(_QWORD *)((char *)a2 + v18 + 32);
    *((_QWORD *)v23 + 3) = *(_QWORD *)((char *)a2 + v18 + 24);
    *((_QWORD *)v23 + 4) = v26;
    v27 = *(_QWORD *)((char *)a2 + v18 + 48);
    *((_QWORD *)v23 + 5) = *(_QWORD *)((char *)a2 + v18 + 40);
    *((_QWORD *)v23 + 6) = v27;
    v28 = *(_QWORD *)((char *)a2 + v18 + 64);
    *((_QWORD *)v23 + 7) = *(_QWORD *)((char *)a2 + v18 + 56);
    *((_QWORD *)v23 + 8) = v28;
    v29 = *(_QWORD *)((char *)a2 + v18 + 80);
    *((_QWORD *)v23 + 9) = *(_QWORD *)((char *)a2 + v18 + 72);
    *((_QWORD *)v23 + 10) = v29;
    v23[88] = *((_BYTE *)a2 + v18 + 88);
    v30 = *(_QWORD *)((char *)a2 + v18 + 104);
    swift_retain(v16);
    swift_retain(v21);
    swift_retain(v22);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v29);
    if (v30)
    {
      *((_QWORD *)v23 + 12) = v24[12];
      *((_QWORD *)v23 + 13) = v30;
      v31 = v24[15];
      *((_QWORD *)v23 + 14) = v24[14];
      *((_QWORD *)v23 + 15) = v31;
      v32 = v24[17];
      *((_QWORD *)v23 + 16) = v24[16];
      *((_QWORD *)v23 + 17) = v32;
      v33 = v24[19];
      *((_QWORD *)v23 + 18) = v24[18];
      *((_QWORD *)v23 + 19) = v33;
      swift_bridgeObjectRetain(v30);
      swift_bridgeObjectRetain(v31);
      swift_bridgeObjectRetain(v32);
      swift_bridgeObjectRetain(v33);
    }
    else
    {
      v36 = *((_OWORD *)v24 + 7);
      *((_OWORD *)v23 + 6) = *((_OWORD *)v24 + 6);
      *((_OWORD *)v23 + 7) = v36;
      v37 = *((_OWORD *)v24 + 9);
      *((_OWORD *)v23 + 8) = *((_OWORD *)v24 + 8);
      *((_OWORD *)v23 + 9) = v37;
    }
    v38 = v24[21];
    *((_QWORD *)v23 + 20) = v24[20];
    *((_QWORD *)v23 + 21) = v38;
    v39 = v24[23];
    *((_QWORD *)v23 + 22) = v24[22];
    *((_QWORD *)v23 + 23) = v39;
    v40 = v24 + 24;
    v41 = v24[25];
    swift_bridgeObjectRetain(v38);
    swift_bridgeObjectRetain(v39);
    if (v41 >> 60 == 15)
    {
      *((_OWORD *)v23 + 12) = *(_OWORD *)v40;
    }
    else
    {
      v42 = *v40;
      sub_100019F94(*v40, v41);
      *((_QWORD *)v23 + 24) = v42;
      *((_QWORD *)v23 + 25) = v41;
    }
    v43 = v24[27];
    *((_QWORD *)v23 + 26) = v24[26];
    *((_QWORD *)v23 + 27) = v43;
    v44 = *(int *)(type metadata accessor for InGameBannerRequiredData(0) + 40);
    v45 = &v23[v44];
    v46 = (_QWORD *)((char *)v24 + v44);
    v47 = (int *)type metadata accessor for Game(0);
    v48 = *((_QWORD *)v47 - 1);
    v49 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v48 + 48);
    swift_bridgeObjectRetain(v43);
    if (v49(v46, 1, v47))
    {
      v50 = sub_100003304(&qword_10010CA78);
      memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
      return v68;
    }
    else
    {
      v51 = v46[1];
      *(_QWORD *)v45 = *v46;
      *((_QWORD *)v45 + 1) = v51;
      v52 = v46[3];
      *((_QWORD *)v45 + 2) = v46[2];
      *((_QWORD *)v45 + 3) = v52;
      v53 = v46[5];
      *((_QWORD *)v45 + 4) = v46[4];
      *((_QWORD *)v45 + 5) = v53;
      v54 = v47[7];
      __dst = &v45[v54];
      v67 = v48;
      v55 = (char *)v46 + v54;
      v56 = type metadata accessor for Date(0);
      v57 = *(_QWORD *)(v56 - 8);
      v58 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48);
      swift_bridgeObjectRetain(v51);
      swift_bridgeObjectRetain(v52);
      swift_bridgeObjectRetain(v53);
      if (v58(v55, 1, v56))
      {
        v59 = sub_100003304(&qword_10010CC10);
        memcpy(__dst, v55, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v57 + 16))(__dst, v55, v56);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56))(__dst, 0, 1, v56);
      }
      v35 = v68;
      *(_QWORD *)&v45[v47[8]] = *(_QWORD *)((char *)v46 + v47[8]);
      v45[v47[9]] = *((_BYTE *)v46 + v47[9]);
      v45[v47[10]] = *((_BYTE *)v46 + v47[10]);
      v45[v47[11]] = *((_BYTE *)v46 + v47[11]);
      v45[v47[12]] = *((_BYTE *)v46 + v47[12]);
      v45[v47[13]] = *((_BYTE *)v46 + v47[13]);
      v45[v47[14]] = *((_BYTE *)v46 + v47[14]);
      v60 = v47[15];
      v61 = &v45[v60];
      v62 = (_QWORD *)((char *)v46 + v60);
      v63 = v62[1];
      *(_QWORD *)v61 = *v62;
      *((_QWORD *)v61 + 1) = v63;
      v64 = *(void (**)(char *, _QWORD, uint64_t, int *))(v67 + 56);
      swift_bridgeObjectRetain(v63);
      v64(v45, 0, 1, v47);
    }
  }
  return v35;
}

void sub_10005A9B8(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t started;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  SEL v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  SEL v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  SEL v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  SEL v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  SEL v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  const char *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  _TtC13GameOverlayUI20GameOverlayUIService *v53;
  SEL v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  SEL v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  SEL v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  SEL v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  id v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  unint64_t v88;
  _TtC13GameOverlayUI20GameOverlayUIService **v89;
  uint64_t v90;
  const char *v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  SEL v98;
  id v99;
  id v100;
  id v101;
  id v102;
  id v103;
  id v104;
  SEL v105;
  id v106;
  id v107;
  id v108;
  id v109;
  id v110;
  id v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  const char *v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;

  v4 = sub_100003304(&qword_10010CC20);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = sub_100003304(&qword_10010E738);
  swift_release(*(_QWORD *)(a1 + *(int *)(v5 + 28)));
  v6 = a1 + a2[5];
  started = type metadata accessor for JetStartUpCoordinator(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(started - 8) + 8))(v6, started);
  v8 = sub_100003304(&qword_10010BE90);
  swift_release(*(_QWORD *)(v6 + *(int *)(v8 + 28)));
  v9 = (_QWORD *)(a1 + a2[6]);
  swift_release(*v9);
  swift_release(v9[1]);
  v10 = a1 + a2[7];
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v10 + 16), v11, v12, v13, v14, v15, v16, v17);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v10 + 32), v18, v19, v20, v21, v22, v23, v24);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v10 + 48), v25, v26, v27, v28, v29, v30, v31);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v10 + 64), v32, v33, v34, v35, v36, v37, v38);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v10 + 80), v39, v40, v41, v42, v43, v44, v45);
  v53 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v10 + 104);
  if (v53)
  {
    swift_bridgeObjectRelease(v53, v46, v47, v48, v49, v50, v51, v52);
    swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v10 + 120), v54, v55, v56, v57, v58, v59, v60);
    swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v10 + 136), v61, v62, v63, v64, v65, v66, v67);
    swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v10 + 152), v68, v69, v70, v71, v72, v73, v74);
  }
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v10 + 168), v46, v47, v48, v49, v50, v51, v52);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v10 + 184), v75, v76, v77, v78, v79, v80, v81);
  v88 = *(_QWORD *)(v10 + 200);
  if (v88 >> 60 != 15)
    sub_100038198(*(_QWORD *)(v10 + 192), v88);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v10 + 216), (SEL)v88, v82, v83, v84, v85, v86, v87);
  v89 = (_TtC13GameOverlayUI20GameOverlayUIService **)(v10
                                                     + *(int *)(type metadata accessor for InGameBannerRequiredData(0)
                                                              + 40));
  v90 = type metadata accessor for Game(0);
  if (!(*(unsigned int (**)(_TtC13GameOverlayUI20GameOverlayUIService **, uint64_t, uint64_t))(*(_QWORD *)(v90 - 8) + 48))(v89, 1, v90))
  {
    swift_bridgeObjectRelease(v89[1], v91, v92, v93, v94, v95, v96, v97);
    swift_bridgeObjectRelease(v89[3], v98, v99, v100, v101, v102, v103, v104);
    swift_bridgeObjectRelease(v89[5], v105, v106, v107, v108, v109, v110, v111);
    v112 = (char *)v89 + *(int *)(v90 + 28);
    v113 = type metadata accessor for Date(0);
    v114 = *(_QWORD *)(v113 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v114 + 48))(v112, 1, v113))
      (*(void (**)(char *, uint64_t))(v114 + 8))(v112, v113);
    swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)((char *)v89 + *(int *)(v90 + 60) + 8), v115, v116, v117, v118, v119, v120, v121);
  }
}

uint64_t sub_10005ABA8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t started;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  int *v44;
  uint64_t v45;
  unsigned int (*v46)(_QWORD *, uint64_t, int *);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int (*v55)(char *, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  void (*v61)(_QWORD *, _QWORD, uint64_t, int *);
  char *__dst;
  uint64_t v64;
  uint64_t v65;

  v6 = sub_100003304(&qword_10010CC20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(sub_100003304(&qword_10010E738) + 28);
  v8 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  v9 = a3[5];
  v10 = a1 + v9;
  v11 = a2 + v9;
  started = type metadata accessor for JetStartUpCoordinator(0);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(started - 8) + 16);
  swift_retain(v8);
  v13(v10, v11, started);
  v14 = *(int *)(sub_100003304(&qword_10010BE90) + 28);
  v15 = *(_QWORD *)(v11 + v14);
  *(_QWORD *)(v10 + v14) = v15;
  v16 = a3[6];
  v17 = a3[7];
  v18 = (uint64_t *)(a1 + v16);
  v19 = (uint64_t *)(a2 + v16);
  v20 = *v19;
  v21 = v19[1];
  *v18 = *v19;
  v18[1] = v21;
  v65 = a1;
  v22 = a1 + v17;
  v23 = (_QWORD *)(a2 + v17);
  *(_BYTE *)v22 = *(_BYTE *)(a2 + v17);
  v24 = *(_QWORD *)(a2 + v17 + 16);
  *(_QWORD *)(v22 + 8) = *(_QWORD *)(a2 + v17 + 8);
  *(_QWORD *)(v22 + 16) = v24;
  v25 = *(_QWORD *)(a2 + v17 + 32);
  *(_QWORD *)(v22 + 24) = *(_QWORD *)(a2 + v17 + 24);
  *(_QWORD *)(v22 + 32) = v25;
  v26 = *(_QWORD *)(a2 + v17 + 48);
  *(_QWORD *)(v22 + 40) = *(_QWORD *)(a2 + v17 + 40);
  *(_QWORD *)(v22 + 48) = v26;
  v27 = *(_QWORD *)(a2 + v17 + 64);
  *(_QWORD *)(v22 + 56) = *(_QWORD *)(a2 + v17 + 56);
  *(_QWORD *)(v22 + 64) = v27;
  v28 = *(_QWORD *)(a2 + v17 + 80);
  *(_QWORD *)(v22 + 72) = *(_QWORD *)(a2 + v17 + 72);
  *(_QWORD *)(v22 + 80) = v28;
  *(_BYTE *)(v22 + 88) = *(_BYTE *)(a2 + v17 + 88);
  v29 = *(_QWORD *)(a2 + v17 + 104);
  swift_retain(v15);
  swift_retain(v20);
  swift_retain(v21);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v28);
  if (v29)
  {
    *(_QWORD *)(v22 + 96) = v23[12];
    *(_QWORD *)(v22 + 104) = v29;
    v30 = v23[15];
    *(_QWORD *)(v22 + 112) = v23[14];
    *(_QWORD *)(v22 + 120) = v30;
    v31 = v23[17];
    *(_QWORD *)(v22 + 128) = v23[16];
    *(_QWORD *)(v22 + 136) = v31;
    v32 = v23[19];
    *(_QWORD *)(v22 + 144) = v23[18];
    *(_QWORD *)(v22 + 152) = v32;
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRetain(v32);
  }
  else
  {
    v33 = *((_OWORD *)v23 + 7);
    *(_OWORD *)(v22 + 96) = *((_OWORD *)v23 + 6);
    *(_OWORD *)(v22 + 112) = v33;
    v34 = *((_OWORD *)v23 + 9);
    *(_OWORD *)(v22 + 128) = *((_OWORD *)v23 + 8);
    *(_OWORD *)(v22 + 144) = v34;
  }
  v35 = v23[21];
  *(_QWORD *)(v22 + 160) = v23[20];
  *(_QWORD *)(v22 + 168) = v35;
  v36 = v23[23];
  *(_QWORD *)(v22 + 176) = v23[22];
  *(_QWORD *)(v22 + 184) = v36;
  v37 = v23 + 24;
  v38 = v23[25];
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRetain(v36);
  if (v38 >> 60 == 15)
  {
    *(_OWORD *)(v22 + 192) = *(_OWORD *)v37;
  }
  else
  {
    v39 = *v37;
    sub_100019F94(*v37, v38);
    *(_QWORD *)(v22 + 192) = v39;
    *(_QWORD *)(v22 + 200) = v38;
  }
  v40 = v23[27];
  *(_QWORD *)(v22 + 208) = v23[26];
  *(_QWORD *)(v22 + 216) = v40;
  v41 = *(int *)(type metadata accessor for InGameBannerRequiredData(0) + 40);
  v42 = (_QWORD *)(v22 + v41);
  v43 = (_QWORD *)((char *)v23 + v41);
  v44 = (int *)type metadata accessor for Game(0);
  v45 = *((_QWORD *)v44 - 1);
  v46 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v45 + 48);
  swift_bridgeObjectRetain(v40);
  if (v46(v43, 1, v44))
  {
    v47 = sub_100003304(&qword_10010CA78);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
  }
  else
  {
    v48 = v43[1];
    *v42 = *v43;
    v42[1] = v48;
    v49 = v43[3];
    v42[2] = v43[2];
    v42[3] = v49;
    v50 = v43[5];
    v42[4] = v43[4];
    v42[5] = v50;
    v51 = v44[7];
    __dst = (char *)v42 + v51;
    v64 = v45;
    v52 = (char *)v43 + v51;
    v53 = type metadata accessor for Date(0);
    v54 = *(_QWORD *)(v53 - 8);
    v55 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48);
    swift_bridgeObjectRetain(v48);
    swift_bridgeObjectRetain(v49);
    swift_bridgeObjectRetain(v50);
    if (v55(v52, 1, v53))
    {
      v56 = sub_100003304(&qword_10010CC10);
      memcpy(__dst, v52, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v54 + 16))(__dst, v52, v53);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56))(__dst, 0, 1, v53);
    }
    *(_QWORD *)((char *)v42 + v44[8]) = *(_QWORD *)((char *)v43 + v44[8]);
    *((_BYTE *)v42 + v44[9]) = *((_BYTE *)v43 + v44[9]);
    *((_BYTE *)v42 + v44[10]) = *((_BYTE *)v43 + v44[10]);
    *((_BYTE *)v42 + v44[11]) = *((_BYTE *)v43 + v44[11]);
    *((_BYTE *)v42 + v44[12]) = *((_BYTE *)v43 + v44[12]);
    *((_BYTE *)v42 + v44[13]) = *((_BYTE *)v43 + v44[13]);
    *((_BYTE *)v42 + v44[14]) = *((_BYTE *)v43 + v44[14]);
    v57 = v44[15];
    v58 = (_QWORD *)((char *)v42 + v57);
    v59 = (_QWORD *)((char *)v43 + v57);
    v60 = v59[1];
    *v58 = *v59;
    v58[1] = v60;
    v61 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v64 + 56);
    swift_bridgeObjectRetain(v60);
    v61(v42, 0, 1, v44);
  }
  return v65;
}

uint64_t sub_10005AF84(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t started;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _TtC13GameOverlayUI20GameOverlayUIService *v28;
  SEL v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  _TtC13GameOverlayUI20GameOverlayUIService *v37;
  SEL v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  uint64_t v45;
  _TtC13GameOverlayUI20GameOverlayUIService *v46;
  SEL v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  uint64_t v54;
  _TtC13GameOverlayUI20GameOverlayUIService *v55;
  SEL v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  uint64_t v63;
  _TtC13GameOverlayUI20GameOverlayUIService *v64;
  SEL v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  _OWORD *v72;
  __int128 *v73;
  _TtC13GameOverlayUI20GameOverlayUIService *v74;
  uint64_t v75;
  uint64_t v76;
  SEL v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  uint64_t v84;
  _TtC13GameOverlayUI20GameOverlayUIService *v85;
  SEL v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  uint64_t v93;
  _TtC13GameOverlayUI20GameOverlayUIService *v94;
  SEL v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  uint64_t v102;
  _TtC13GameOverlayUI20GameOverlayUIService *v103;
  SEL v104;
  id v105;
  id v106;
  id v107;
  id v108;
  id v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  _TtC13GameOverlayUI20GameOverlayUIService *v122;
  SEL v123;
  id v124;
  id v125;
  id v126;
  id v127;
  id v128;
  id v129;
  uint64_t v130;
  _TtC13GameOverlayUI20GameOverlayUIService *v131;
  SEL v132;
  id v133;
  id v134;
  id v135;
  id v136;
  id v137;
  id v138;
  uint64_t *v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  _TtC13GameOverlayUI20GameOverlayUIService *v146;
  SEL v147;
  id v148;
  id v149;
  id v150;
  id v151;
  id v152;
  id v153;
  uint64_t v154;
  _QWORD *v155;
  _QWORD *v156;
  int *v157;
  uint64_t v158;
  uint64_t (*v159)(_QWORD *, uint64_t, int *);
  int v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _TtC13GameOverlayUI20GameOverlayUIService *v172;
  SEL v173;
  id v174;
  id v175;
  id v176;
  id v177;
  id v178;
  id v179;
  uint64_t v180;
  _TtC13GameOverlayUI20GameOverlayUIService *v181;
  SEL v182;
  id v183;
  id v184;
  id v185;
  id v186;
  id v187;
  id v188;
  uint64_t v189;
  _TtC13GameOverlayUI20GameOverlayUIService *v190;
  SEL v191;
  id v192;
  id v193;
  id v194;
  id v195;
  id v196;
  id v197;
  uint64_t v198;
  char *v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t (*v203)(char *, uint64_t, uint64_t);
  int v204;
  int v205;
  uint64_t v206;
  _QWORD *v207;
  _QWORD *v208;
  uint64_t v209;
  void (*v210)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v211;
  uint64_t v212;
  _QWORD *v213;
  _QWORD *v214;
  uint64_t v215;
  _TtC13GameOverlayUI20GameOverlayUIService *v216;
  SEL v217;
  id v218;
  id v219;
  id v220;
  id v221;
  id v222;
  id v223;
  unsigned int (*v225)(char *, uint64_t, uint64_t);
  char *__dst;
  uint64_t v227;

  v6 = sub_100003304(&qword_10010CC20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(sub_100003304(&qword_10010E738) + 28);
  v8 = *(_QWORD *)(a1 + v7);
  v9 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v9;
  swift_retain(v9);
  swift_release(v8);
  v10 = a3[5];
  v11 = a1 + v10;
  v12 = a2 + v10;
  started = type metadata accessor for JetStartUpCoordinator(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(started - 8) + 24))(v11, v12, started);
  v14 = *(int *)(sub_100003304(&qword_10010BE90) + 28);
  v15 = *(_QWORD *)(v11 + v14);
  v16 = *(_QWORD *)(v12 + v14);
  *(_QWORD *)(v11 + v14) = v16;
  swift_retain(v16);
  swift_release(v15);
  v17 = a3[6];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = *(_QWORD *)(a2 + v17);
  v21 = *(_QWORD *)(a1 + v17);
  *(_QWORD *)(a1 + v17) = v20;
  swift_retain(v20);
  swift_release(v21);
  v22 = *(_QWORD *)(v18 + 8);
  v23 = *(_QWORD *)(v19 + 8);
  *(_QWORD *)(v18 + 8) = v23;
  swift_retain(v23);
  swift_release(v22);
  v24 = a3[7];
  v25 = a1 + v24;
  v26 = a2 + v24;
  *(_BYTE *)v25 = *(_BYTE *)(a2 + v24);
  *(_QWORD *)(v25 + 8) = *(_QWORD *)(a2 + v24 + 8);
  v27 = *(_QWORD *)(a2 + v24 + 16);
  v28 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + v24 + 16);
  *(_QWORD *)(v25 + 16) = v27;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRelease(v28, v29, v30, v31, v32, v33, v34, v35);
  *(_QWORD *)(v25 + 24) = *(_QWORD *)(v26 + 24);
  v36 = *(_QWORD *)(v26 + 32);
  v37 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v25 + 32);
  *(_QWORD *)(v25 + 32) = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease(v37, v38, v39, v40, v41, v42, v43, v44);
  *(_QWORD *)(v25 + 40) = *(_QWORD *)(v26 + 40);
  v45 = *(_QWORD *)(v26 + 48);
  v46 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v25 + 48);
  *(_QWORD *)(v25 + 48) = v45;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRelease(v46, v47, v48, v49, v50, v51, v52, v53);
  *(_QWORD *)(v25 + 56) = *(_QWORD *)(v26 + 56);
  v54 = *(_QWORD *)(v26 + 64);
  v55 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v25 + 64);
  *(_QWORD *)(v25 + 64) = v54;
  swift_bridgeObjectRetain(v54);
  swift_bridgeObjectRelease(v55, v56, v57, v58, v59, v60, v61, v62);
  *(_QWORD *)(v25 + 72) = *(_QWORD *)(v26 + 72);
  v63 = *(_QWORD *)(v26 + 80);
  v64 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v25 + 80);
  *(_QWORD *)(v25 + 80) = v63;
  swift_bridgeObjectRetain(v63);
  swift_bridgeObjectRelease(v64, v65, v66, v67, v68, v69, v70, v71);
  *(_BYTE *)(v25 + 88) = *(_BYTE *)(v26 + 88);
  v72 = (_OWORD *)(v25 + 96);
  v73 = (__int128 *)(v26 + 96);
  v74 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v25 + 104);
  v75 = *(_QWORD *)(v26 + 104);
  if (v74)
  {
    if (v75)
    {
      *(_QWORD *)(v25 + 96) = *(_QWORD *)(v26 + 96);
      v76 = *(_QWORD *)(v26 + 104);
      *(_QWORD *)(v25 + 104) = v76;
      swift_bridgeObjectRetain(v76);
      swift_bridgeObjectRelease(v74, v77, v78, v79, v80, v81, v82, v83);
      *(_QWORD *)(v25 + 112) = *(_QWORD *)(v26 + 112);
      v84 = *(_QWORD *)(v26 + 120);
      v85 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v25 + 120);
      *(_QWORD *)(v25 + 120) = v84;
      swift_bridgeObjectRetain(v84);
      swift_bridgeObjectRelease(v85, v86, v87, v88, v89, v90, v91, v92);
      *(_QWORD *)(v25 + 128) = *(_QWORD *)(v26 + 128);
      v93 = *(_QWORD *)(v26 + 136);
      v94 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v25 + 136);
      *(_QWORD *)(v25 + 136) = v93;
      swift_bridgeObjectRetain(v93);
      swift_bridgeObjectRelease(v94, v95, v96, v97, v98, v99, v100, v101);
      *(_QWORD *)(v25 + 144) = *(_QWORD *)(v26 + 144);
      v102 = *(_QWORD *)(v26 + 152);
      v103 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v25 + 152);
      *(_QWORD *)(v25 + 152) = v102;
      swift_bridgeObjectRetain(v102);
      swift_bridgeObjectRelease(v103, v104, v105, v106, v107, v108, v109, v110);
    }
    else
    {
      sub_100004244((_QWORD *)(v25 + 96));
      v115 = *(_OWORD *)(v26 + 144);
      v117 = *v73;
      v116 = *(_OWORD *)(v26 + 112);
      *(_OWORD *)(v25 + 128) = *(_OWORD *)(v26 + 128);
      *(_OWORD *)(v25 + 144) = v115;
      *v72 = v117;
      *(_OWORD *)(v25 + 112) = v116;
    }
  }
  else if (v75)
  {
    *(_QWORD *)(v25 + 96) = *(_QWORD *)(v26 + 96);
    v111 = *(_QWORD *)(v26 + 104);
    *(_QWORD *)(v25 + 104) = v111;
    *(_QWORD *)(v25 + 112) = *(_QWORD *)(v26 + 112);
    v112 = *(_QWORD *)(v26 + 120);
    *(_QWORD *)(v25 + 120) = v112;
    *(_QWORD *)(v25 + 128) = *(_QWORD *)(v26 + 128);
    v113 = *(_QWORD *)(v26 + 136);
    *(_QWORD *)(v25 + 136) = v113;
    *(_QWORD *)(v25 + 144) = *(_QWORD *)(v26 + 144);
    v114 = *(_QWORD *)(v26 + 152);
    *(_QWORD *)(v25 + 152) = v114;
    swift_bridgeObjectRetain(v111);
    swift_bridgeObjectRetain(v112);
    swift_bridgeObjectRetain(v113);
    swift_bridgeObjectRetain(v114);
  }
  else
  {
    v118 = *v73;
    v119 = *(_OWORD *)(v26 + 112);
    v120 = *(_OWORD *)(v26 + 144);
    *(_OWORD *)(v25 + 128) = *(_OWORD *)(v26 + 128);
    *(_OWORD *)(v25 + 144) = v120;
    *v72 = v118;
    *(_OWORD *)(v25 + 112) = v119;
  }
  *(_QWORD *)(v25 + 160) = *(_QWORD *)(v26 + 160);
  v121 = *(_QWORD *)(v26 + 168);
  v122 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v25 + 168);
  *(_QWORD *)(v25 + 168) = v121;
  swift_bridgeObjectRetain(v121);
  swift_bridgeObjectRelease(v122, v123, v124, v125, v126, v127, v128, v129);
  *(_QWORD *)(v25 + 176) = *(_QWORD *)(v26 + 176);
  v130 = *(_QWORD *)(v26 + 184);
  v131 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v25 + 184);
  *(_QWORD *)(v25 + 184) = v130;
  swift_bridgeObjectRetain(v130);
  swift_bridgeObjectRelease(v131, v132, v133, v134, v135, v136, v137, v138);
  v139 = (uint64_t *)(v26 + 192);
  v140 = *(_QWORD *)(v26 + 200);
  if (*(_QWORD *)(v25 + 200) >> 60 == 15)
  {
    if (v140 >> 60 != 15)
    {
      v141 = *v139;
      sub_100019F94(*v139, *(_QWORD *)(v26 + 200));
      *(_QWORD *)(v25 + 192) = v141;
      *(_QWORD *)(v25 + 200) = v140;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v140 >> 60 == 15)
  {
    sub_10005B718(v25 + 192);
LABEL_13:
    *(_OWORD *)(v25 + 192) = *(_OWORD *)v139;
    goto LABEL_15;
  }
  v142 = *v139;
  sub_100019F94(*v139, *(_QWORD *)(v26 + 200));
  v143 = *(_QWORD *)(v25 + 192);
  v144 = *(_QWORD *)(v25 + 200);
  *(_QWORD *)(v25 + 192) = v142;
  *(_QWORD *)(v25 + 200) = v140;
  sub_100038198(v143, v144);
LABEL_15:
  *(_QWORD *)(v25 + 208) = *(_QWORD *)(v26 + 208);
  v145 = *(_QWORD *)(v26 + 216);
  v146 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v25 + 216);
  *(_QWORD *)(v25 + 216) = v145;
  swift_bridgeObjectRetain(v145);
  swift_bridgeObjectRelease(v146, v147, v148, v149, v150, v151, v152, v153);
  v154 = *(int *)(type metadata accessor for InGameBannerRequiredData(0) + 40);
  v155 = (_QWORD *)(v25 + v154);
  v156 = (_QWORD *)(v26 + v154);
  v157 = (int *)type metadata accessor for Game(0);
  v158 = *((_QWORD *)v157 - 1);
  v159 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v158 + 48);
  v160 = v159(v155, 1, v157);
  v161 = v159(v156, 1, v157);
  if (!v160)
  {
    if (v161)
    {
      sub_1000106F0((uint64_t)v155, type metadata accessor for Game);
      goto LABEL_21;
    }
    *v155 = *v156;
    v171 = v156[1];
    v172 = (_TtC13GameOverlayUI20GameOverlayUIService *)v155[1];
    v155[1] = v171;
    swift_bridgeObjectRetain(v171);
    swift_bridgeObjectRelease(v172, v173, v174, v175, v176, v177, v178, v179);
    v155[2] = v156[2];
    v180 = v156[3];
    v181 = (_TtC13GameOverlayUI20GameOverlayUIService *)v155[3];
    v155[3] = v180;
    swift_bridgeObjectRetain(v180);
    swift_bridgeObjectRelease(v181, v182, v183, v184, v185, v186, v187, v188);
    v155[4] = v156[4];
    v189 = v156[5];
    v190 = (_TtC13GameOverlayUI20GameOverlayUIService *)v155[5];
    v155[5] = v189;
    swift_bridgeObjectRetain(v189);
    swift_bridgeObjectRelease(v190, v191, v192, v193, v194, v195, v196, v197);
    v198 = v157[7];
    v199 = (char *)v155 + v198;
    v200 = (char *)v156 + v198;
    v201 = type metadata accessor for Date(0);
    v202 = *(_QWORD *)(v201 - 8);
    v203 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v202 + 48);
    v204 = v203(v199, 1, v201);
    v205 = v203(v200, 1, v201);
    if (v204)
    {
      if (!v205)
      {
        (*(void (**)(char *, char *, uint64_t))(v202 + 16))(v199, v200, v201);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v202 + 56))(v199, 0, 1, v201);
LABEL_30:
        *(_QWORD *)((char *)v155 + v157[8]) = *(_QWORD *)((char *)v156 + v157[8]);
        *((_BYTE *)v155 + v157[9]) = *((_BYTE *)v156 + v157[9]);
        *((_BYTE *)v155 + v157[10]) = *((_BYTE *)v156 + v157[10]);
        *((_BYTE *)v155 + v157[11]) = *((_BYTE *)v156 + v157[11]);
        *((_BYTE *)v155 + v157[12]) = *((_BYTE *)v156 + v157[12]);
        *((_BYTE *)v155 + v157[13]) = *((_BYTE *)v156 + v157[13]);
        *((_BYTE *)v155 + v157[14]) = *((_BYTE *)v156 + v157[14]);
        v212 = v157[15];
        v213 = (_QWORD *)((char *)v155 + v212);
        v214 = (_QWORD *)((char *)v156 + v212);
        *v213 = *v214;
        v215 = v214[1];
        v216 = (_TtC13GameOverlayUI20GameOverlayUIService *)v213[1];
        v213[1] = v215;
        swift_bridgeObjectRetain(v215);
        swift_bridgeObjectRelease(v216, v217, v218, v219, v220, v221, v222, v223);
        return a1;
      }
    }
    else
    {
      if (!v205)
      {
        (*(void (**)(char *, char *, uint64_t))(v202 + 24))(v199, v200, v201);
        goto LABEL_30;
      }
      (*(void (**)(char *, uint64_t))(v202 + 8))(v199, v201);
    }
    v211 = sub_100003304(&qword_10010CC10);
    memcpy(v199, v200, *(_QWORD *)(*(_QWORD *)(v211 - 8) + 64));
    goto LABEL_30;
  }
  if (v161)
  {
LABEL_21:
    v170 = sub_100003304(&qword_10010CA78);
    memcpy(v155, v156, *(_QWORD *)(*(_QWORD *)(v170 - 8) + 64));
    return a1;
  }
  *v155 = *v156;
  v162 = v156[1];
  v155[1] = v162;
  v155[2] = v156[2];
  v163 = v156[3];
  v155[3] = v163;
  v155[4] = v156[4];
  v164 = v156[5];
  v155[5] = v164;
  v165 = v157[7];
  __dst = (char *)v155 + v165;
  v227 = a1;
  v166 = (char *)v156 + v165;
  v167 = type metadata accessor for Date(0);
  v168 = *(_QWORD *)(v167 - 8);
  v225 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v168 + 48);
  swift_bridgeObjectRetain(v162);
  swift_bridgeObjectRetain(v163);
  swift_bridgeObjectRetain(v164);
  if (v225(v166, 1, v167))
  {
    v169 = sub_100003304(&qword_10010CC10);
    memcpy(__dst, v166, *(_QWORD *)(*(_QWORD *)(v169 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v168 + 16))(__dst, v166, v167);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v168 + 56))(__dst, 0, 1, v167);
  }
  *(_QWORD *)((char *)v155 + v157[8]) = *(_QWORD *)((char *)v156 + v157[8]);
  *((_BYTE *)v155 + v157[9]) = *((_BYTE *)v156 + v157[9]);
  *((_BYTE *)v155 + v157[10]) = *((_BYTE *)v156 + v157[10]);
  *((_BYTE *)v155 + v157[11]) = *((_BYTE *)v156 + v157[11]);
  *((_BYTE *)v155 + v157[12]) = *((_BYTE *)v156 + v157[12]);
  *((_BYTE *)v155 + v157[13]) = *((_BYTE *)v156 + v157[13]);
  *((_BYTE *)v155 + v157[14]) = *((_BYTE *)v156 + v157[14]);
  v206 = v157[15];
  v207 = (_QWORD *)((char *)v155 + v206);
  v208 = (_QWORD *)((char *)v156 + v206);
  *v207 = *v208;
  v209 = v208[1];
  v207[1] = v209;
  v210 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v158 + 56);
  swift_bridgeObjectRetain(v209);
  v210(v155, 0, 1, v157);
  return v227;
}

uint64_t sub_10005B718(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for Data - 1) + 8))();
  return a1;
}

uint64_t sub_10005B74C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t started;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = sub_100003304(&qword_10010CC20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = sub_100003304(&qword_10010E738);
  *(_QWORD *)(a1 + *(int *)(v7 + 28)) = *(_QWORD *)(a2 + *(int *)(v7 + 28));
  v8 = a3[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  started = type metadata accessor for JetStartUpCoordinator(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(started - 8) + 32))(v9, v10, started);
  v12 = sub_100003304(&qword_10010BE90);
  *(_QWORD *)(v9 + *(int *)(v12 + 28)) = *(_QWORD *)(v10 + *(int *)(v12 + 28));
  v13 = a3[7];
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  v14 = a1 + v13;
  v15 = a2 + v13;
  *(_BYTE *)v14 = *(_BYTE *)v15;
  *(_OWORD *)(v14 + 104) = *(_OWORD *)(v15 + 104);
  *(_OWORD *)(v14 + 120) = *(_OWORD *)(v15 + 120);
  *(_OWORD *)(v14 + 136) = *(_OWORD *)(v15 + 136);
  *(_QWORD *)(v14 + 152) = *(_QWORD *)(v15 + 152);
  *(_OWORD *)(v14 + 40) = *(_OWORD *)(v15 + 40);
  *(_OWORD *)(v14 + 56) = *(_OWORD *)(v15 + 56);
  *(_OWORD *)(v14 + 72) = *(_OWORD *)(v15 + 72);
  *(_OWORD *)(v14 + 88) = *(_OWORD *)(v15 + 88);
  *(_OWORD *)(v14 + 8) = *(_OWORD *)(v15 + 8);
  *(_OWORD *)(v14 + 24) = *(_OWORD *)(v15 + 24);
  v16 = *(_OWORD *)(v15 + 176);
  *(_OWORD *)(v14 + 160) = *(_OWORD *)(v15 + 160);
  *(_OWORD *)(v14 + 176) = v16;
  v17 = *(_OWORD *)(v15 + 208);
  *(_OWORD *)(v14 + 192) = *(_OWORD *)(v15 + 192);
  *(_OWORD *)(v14 + 208) = v17;
  v18 = *(int *)(type metadata accessor for InGameBannerRequiredData(0) + 40);
  v19 = (_OWORD *)(v14 + v18);
  v20 = (_OWORD *)(v15 + v18);
  v21 = (int *)type metadata accessor for Game(0);
  v22 = *((_QWORD *)v21 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v22 + 48))(v20, 1, v21))
  {
    v23 = sub_100003304(&qword_10010CA78);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    v24 = v20[1];
    *v19 = *v20;
    v19[1] = v24;
    v19[2] = v20[2];
    v25 = v21[7];
    v26 = (char *)v19 + v25;
    v27 = (char *)v20 + v25;
    v28 = type metadata accessor for Date(0);
    v29 = *(_QWORD *)(v28 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    {
      v30 = sub_100003304(&qword_10010CC10);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v26, v27, v28);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    }
    *(_QWORD *)((char *)v19 + v21[8]) = *(_QWORD *)((char *)v20 + v21[8]);
    *((_BYTE *)v19 + v21[9]) = *((_BYTE *)v20 + v21[9]);
    *((_BYTE *)v19 + v21[10]) = *((_BYTE *)v20 + v21[10]);
    *((_BYTE *)v19 + v21[11]) = *((_BYTE *)v20 + v21[11]);
    *((_BYTE *)v19 + v21[12]) = *((_BYTE *)v20 + v21[12]);
    *((_BYTE *)v19 + v21[13]) = *((_BYTE *)v20 + v21[13]);
    *((_BYTE *)v19 + v21[14]) = *((_BYTE *)v20 + v21[14]);
    *(_OWORD *)((char *)v19 + v21[15]) = *(_OWORD *)((char *)v20 + v21[15]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v22 + 56))(v19, 0, 1, v21);
  }
  return a1;
}

uint64_t sub_10005B9FC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t started;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _TtC13GameOverlayUI20GameOverlayUIService *v24;
  SEL v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  _TtC13GameOverlayUI20GameOverlayUIService *v33;
  SEL v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  _TtC13GameOverlayUI20GameOverlayUIService *v42;
  SEL v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  uint64_t v50;
  _TtC13GameOverlayUI20GameOverlayUIService *v51;
  SEL v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  uint64_t v59;
  _TtC13GameOverlayUI20GameOverlayUIService *v60;
  SEL v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  const char *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  _TtC13GameOverlayUI20GameOverlayUIService *v75;
  uint64_t v76;
  uint64_t v77;
  _TtC13GameOverlayUI20GameOverlayUIService *v78;
  SEL v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  uint64_t v86;
  _TtC13GameOverlayUI20GameOverlayUIService *v87;
  SEL v88;
  id v89;
  id v90;
  id v91;
  id v92;
  id v93;
  id v94;
  uint64_t v95;
  _TtC13GameOverlayUI20GameOverlayUIService *v96;
  SEL v97;
  id v98;
  id v99;
  id v100;
  id v101;
  id v102;
  id v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  _TtC13GameOverlayUI20GameOverlayUIService *v107;
  uint64_t v108;
  _TtC13GameOverlayUI20GameOverlayUIService *v109;
  SEL v110;
  id v111;
  id v112;
  id v113;
  id v114;
  id v115;
  id v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  _OWORD *v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _TtC13GameOverlayUI20GameOverlayUIService *v128;
  uint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  int *v132;
  uint64_t v133;
  uint64_t (*v134)(_QWORD *, uint64_t, int *);
  int v135;
  int v136;
  const char *v137;
  void *v138;
  void *v139;
  void *v140;
  void *v141;
  void *v142;
  void *v143;
  __int128 v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _TtC13GameOverlayUI20GameOverlayUIService *v153;
  uint64_t v154;
  _TtC13GameOverlayUI20GameOverlayUIService *v155;
  SEL v156;
  id v157;
  id v158;
  id v159;
  id v160;
  id v161;
  id v162;
  uint64_t v163;
  _TtC13GameOverlayUI20GameOverlayUIService *v164;
  SEL v165;
  id v166;
  id v167;
  id v168;
  id v169;
  id v170;
  id v171;
  uint64_t v172;
  char *v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t (*v177)(char *, uint64_t, uint64_t);
  int v178;
  int v179;
  const char *v180;
  void *v181;
  void *v182;
  void *v183;
  void *v184;
  void *v185;
  void *v186;
  uint64_t v187;
  uint64_t v188;
  _QWORD *v189;
  uint64_t *v190;
  uint64_t v191;
  uint64_t v192;
  _TtC13GameOverlayUI20GameOverlayUIService *v193;

  v6 = sub_100003304(&qword_10010CC20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(sub_100003304(&qword_10010E738) + 28);
  v8 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  swift_release(v8);
  v9 = a3[5];
  v10 = a1 + v9;
  v11 = a2 + v9;
  started = type metadata accessor for JetStartUpCoordinator(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(started - 8) + 40))(v10, v11, started);
  v13 = *(int *)(sub_100003304(&qword_10010BE90) + 28);
  v14 = *(_QWORD *)(v10 + v13);
  *(_QWORD *)(v10 + v13) = *(_QWORD *)(v11 + v13);
  swift_release(v14);
  v15 = a3[6];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = *(_QWORD *)(a1 + v15);
  *(_QWORD *)(a1 + v15) = *(_QWORD *)(a2 + v15);
  swift_release(v18);
  v19 = *(_QWORD *)(v16 + 8);
  *(_QWORD *)(v16 + 8) = *(_QWORD *)(v17 + 8);
  swift_release(v19);
  v20 = a3[7];
  v21 = a1 + v20;
  v22 = a2 + v20;
  *(_BYTE *)v21 = *(_BYTE *)(a2 + v20);
  v23 = *(_QWORD *)(a2 + v20 + 16);
  v24 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + v20 + 16);
  *(_QWORD *)(v21 + 8) = *(_QWORD *)(a2 + v20 + 8);
  *(_QWORD *)(v21 + 16) = v23;
  swift_bridgeObjectRelease(v24, v25, v26, v27, v28, v29, v30, v31);
  v32 = *(_QWORD *)(v22 + 32);
  v33 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v21 + 32);
  *(_QWORD *)(v21 + 24) = *(_QWORD *)(v22 + 24);
  *(_QWORD *)(v21 + 32) = v32;
  swift_bridgeObjectRelease(v33, v34, v35, v36, v37, v38, v39, v40);
  v41 = *(_QWORD *)(v22 + 48);
  v42 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v21 + 48);
  *(_QWORD *)(v21 + 40) = *(_QWORD *)(v22 + 40);
  *(_QWORD *)(v21 + 48) = v41;
  swift_bridgeObjectRelease(v42, v43, v44, v45, v46, v47, v48, v49);
  v50 = *(_QWORD *)(v22 + 64);
  v51 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v21 + 64);
  *(_QWORD *)(v21 + 56) = *(_QWORD *)(v22 + 56);
  *(_QWORD *)(v21 + 64) = v50;
  swift_bridgeObjectRelease(v51, v52, v53, v54, v55, v56, v57, v58);
  v59 = *(_QWORD *)(v22 + 80);
  v60 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v21 + 80);
  *(_QWORD *)(v21 + 72) = *(_QWORD *)(v22 + 72);
  *(_QWORD *)(v21 + 80) = v59;
  swift_bridgeObjectRelease(v60, v61, v62, v63, v64, v65, v66, v67);
  *(_BYTE *)(v21 + 88) = *(_BYTE *)(v22 + 88);
  v75 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v21 + 104);
  if (v75)
  {
    v76 = *(_QWORD *)(v22 + 104);
    if (v76)
    {
      *(_QWORD *)(v21 + 96) = *(_QWORD *)(v22 + 96);
      *(_QWORD *)(v21 + 104) = v76;
      swift_bridgeObjectRelease(v75, v68, v69, v70, v71, v72, v73, v74);
      v77 = *(_QWORD *)(v22 + 120);
      v78 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v21 + 120);
      *(_QWORD *)(v21 + 112) = *(_QWORD *)(v22 + 112);
      *(_QWORD *)(v21 + 120) = v77;
      swift_bridgeObjectRelease(v78, v79, v80, v81, v82, v83, v84, v85);
      v86 = *(_QWORD *)(v22 + 136);
      v87 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v21 + 136);
      *(_QWORD *)(v21 + 128) = *(_QWORD *)(v22 + 128);
      *(_QWORD *)(v21 + 136) = v86;
      swift_bridgeObjectRelease(v87, v88, v89, v90, v91, v92, v93, v94);
      v95 = *(_QWORD *)(v22 + 152);
      v96 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v21 + 152);
      *(_QWORD *)(v21 + 144) = *(_QWORD *)(v22 + 144);
      *(_QWORD *)(v21 + 152) = v95;
      swift_bridgeObjectRelease(v96, v97, v98, v99, v100, v101, v102, v103);
      goto LABEL_6;
    }
    sub_100004244((_QWORD *)(v21 + 96));
  }
  v104 = *(_OWORD *)(v22 + 112);
  *(_OWORD *)(v21 + 96) = *(_OWORD *)(v22 + 96);
  *(_OWORD *)(v21 + 112) = v104;
  v105 = *(_OWORD *)(v22 + 144);
  *(_OWORD *)(v21 + 128) = *(_OWORD *)(v22 + 128);
  *(_OWORD *)(v21 + 144) = v105;
LABEL_6:
  v106 = *(_QWORD *)(v22 + 168);
  v107 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v21 + 168);
  *(_QWORD *)(v21 + 160) = *(_QWORD *)(v22 + 160);
  *(_QWORD *)(v21 + 168) = v106;
  swift_bridgeObjectRelease(v107, v68, v69, v70, v71, v72, v73, v74);
  v108 = *(_QWORD *)(v22 + 184);
  v109 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v21 + 184);
  *(_QWORD *)(v21 + 176) = *(_QWORD *)(v22 + 176);
  *(_QWORD *)(v21 + 184) = v108;
  swift_bridgeObjectRelease(v109, v110, v111, v112, v113, v114, v115, v116);
  v123 = (_OWORD *)(v22 + 192);
  v124 = *(_QWORD *)(v21 + 200);
  if (v124 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)(v21 + 192) = *v123;
    goto LABEL_11;
  }
  v125 = *(_QWORD *)(v22 + 200);
  if (v125 >> 60 == 15)
  {
    sub_10005B718(v21 + 192);
    goto LABEL_9;
  }
  v126 = *(_QWORD *)(v21 + 192);
  *(_QWORD *)(v21 + 192) = *(_QWORD *)v123;
  *(_QWORD *)(v21 + 200) = v125;
  sub_100038198(v126, v124);
LABEL_11:
  v127 = *(_QWORD *)(v22 + 216);
  v128 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v21 + 216);
  *(_QWORD *)(v21 + 208) = *(_QWORD *)(v22 + 208);
  *(_QWORD *)(v21 + 216) = v127;
  swift_bridgeObjectRelease(v128, (SEL)v124, v117, v118, v119, v120, v121, v122);
  v129 = *(int *)(type metadata accessor for InGameBannerRequiredData(0) + 40);
  v130 = (_QWORD *)(v21 + v129);
  v131 = (_QWORD *)(v22 + v129);
  v132 = (int *)type metadata accessor for Game(0);
  v133 = *((_QWORD *)v132 - 1);
  v134 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v133 + 48);
  v135 = v134(v130, 1, v132);
  v136 = v134(v131, 1, v132);
  if (!v135)
  {
    if (v136)
    {
      sub_1000106F0((uint64_t)v130, type metadata accessor for Game);
      goto LABEL_17;
    }
    v152 = v131[1];
    v153 = (_TtC13GameOverlayUI20GameOverlayUIService *)v130[1];
    *v130 = *v131;
    v130[1] = v152;
    swift_bridgeObjectRelease(v153, v137, v138, v139, v140, v141, v142, v143);
    v154 = v131[3];
    v155 = (_TtC13GameOverlayUI20GameOverlayUIService *)v130[3];
    v130[2] = v131[2];
    v130[3] = v154;
    swift_bridgeObjectRelease(v155, v156, v157, v158, v159, v160, v161, v162);
    v163 = v131[5];
    v164 = (_TtC13GameOverlayUI20GameOverlayUIService *)v130[5];
    v130[4] = v131[4];
    v130[5] = v163;
    swift_bridgeObjectRelease(v164, v165, v166, v167, v168, v169, v170, v171);
    v172 = v132[7];
    v173 = (char *)v130 + v172;
    v174 = (char *)v131 + v172;
    v175 = type metadata accessor for Date(0);
    v176 = *(_QWORD *)(v175 - 8);
    v177 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v176 + 48);
    v178 = v177(v173, 1, v175);
    v179 = v177(v174, 1, v175);
    if (v178)
    {
      if (!v179)
      {
        (*(void (**)(char *, char *, uint64_t))(v176 + 32))(v173, v174, v175);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v176 + 56))(v173, 0, 1, v175);
LABEL_26:
        *(_QWORD *)((char *)v130 + v132[8]) = *(_QWORD *)((char *)v131 + v132[8]);
        *((_BYTE *)v130 + v132[9]) = *((_BYTE *)v131 + v132[9]);
        *((_BYTE *)v130 + v132[10]) = *((_BYTE *)v131 + v132[10]);
        *((_BYTE *)v130 + v132[11]) = *((_BYTE *)v131 + v132[11]);
        *((_BYTE *)v130 + v132[12]) = *((_BYTE *)v131 + v132[12]);
        *((_BYTE *)v130 + v132[13]) = *((_BYTE *)v131 + v132[13]);
        *((_BYTE *)v130 + v132[14]) = *((_BYTE *)v131 + v132[14]);
        v188 = v132[15];
        v189 = (_QWORD *)((char *)v130 + v188);
        v190 = (_QWORD *)((char *)v131 + v188);
        v192 = *v190;
        v191 = v190[1];
        v193 = (_TtC13GameOverlayUI20GameOverlayUIService *)v189[1];
        *v189 = v192;
        v189[1] = v191;
        swift_bridgeObjectRelease(v193, v180, v181, v182, v183, v184, v185, v186);
        return a1;
      }
    }
    else
    {
      if (!v179)
      {
        (*(void (**)(char *, char *, uint64_t))(v176 + 40))(v173, v174, v175);
        goto LABEL_26;
      }
      (*(void (**)(char *, uint64_t))(v176 + 8))(v173, v175);
    }
    v187 = sub_100003304(&qword_10010CC10);
    memcpy(v173, v174, *(_QWORD *)(*(_QWORD *)(v187 - 8) + 64));
    goto LABEL_26;
  }
  if (v136)
  {
LABEL_17:
    v151 = sub_100003304(&qword_10010CA78);
    memcpy(v130, v131, *(_QWORD *)(*(_QWORD *)(v151 - 8) + 64));
    return a1;
  }
  v144 = *((_OWORD *)v131 + 1);
  *(_OWORD *)v130 = *(_OWORD *)v131;
  *((_OWORD *)v130 + 1) = v144;
  *((_OWORD *)v130 + 2) = *((_OWORD *)v131 + 2);
  v145 = v132[7];
  v146 = (char *)v130 + v145;
  v147 = (char *)v131 + v145;
  v148 = type metadata accessor for Date(0);
  v149 = *(_QWORD *)(v148 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v149 + 48))(v147, 1, v148))
  {
    v150 = sub_100003304(&qword_10010CC10);
    memcpy(v146, v147, *(_QWORD *)(*(_QWORD *)(v150 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v149 + 32))(v146, v147, v148);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v149 + 56))(v146, 0, 1, v148);
  }
  *(_QWORD *)((char *)v130 + v132[8]) = *(_QWORD *)((char *)v131 + v132[8]);
  *((_BYTE *)v130 + v132[9]) = *((_BYTE *)v131 + v132[9]);
  *((_BYTE *)v130 + v132[10]) = *((_BYTE *)v131 + v132[10]);
  *((_BYTE *)v130 + v132[11]) = *((_BYTE *)v131 + v132[11]);
  *((_BYTE *)v130 + v132[12]) = *((_BYTE *)v131 + v132[12]);
  *((_BYTE *)v130 + v132[13]) = *((_BYTE *)v131 + v132[13]);
  *((_BYTE *)v130 + v132[14]) = *((_BYTE *)v131 + v132[14]);
  *(_OWORD *)((char *)v130 + v132[15]) = *(_OWORD *)((char *)v131 + v132[15]);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v133 + 56))(v130, 0, 1, v132);
  return a1;
}

uint64_t sub_10005BF5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005BF68);
}

uint64_t sub_10005BF68(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v6 = sub_100003304(&qword_10010E738);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_100003304(&qword_10010BE90);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_10:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = type metadata accessor for InGameBannerRequiredData(0);
    v12 = *(_QWORD *)(v8 - 8);
    v13 = a3[7];
    goto LABEL_10;
  }
  v14 = *(_QWORD *)(a1 + a3[6]);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_10005C03C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005C048);
}

uint64_t sub_10005C048(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_100003304(&qword_10010E738);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    result = sub_100003304(&qword_10010BE90);
    v14 = *(_QWORD *)(result - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = result;
      v15 = a4[5];
    }
    else
    {
      if (a3 == 0x7FFFFFFF)
      {
        *(_QWORD *)(a1 + a4[6]) = (a2 - 1);
        return result;
      }
      v10 = type metadata accessor for InGameBannerRequiredData(0);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[7];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_10005C118(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[4];

  sub_10005C1C0(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100004C3C(319);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      v8[2] = &unk_1000C9F88;
      v6 = type metadata accessor for InGameBannerRequiredData(319);
      if (v7 <= 0x3F)
      {
        v8[3] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 4, v8, a1 + 16);
      }
    }
  }
}

void sub_10005C1C0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10010E7F0)
  {
    v2 = sub_100006E54(&qword_10010CC20);
    v3 = type metadata accessor for State(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10010E7F0);
  }
}

uint64_t sub_10005C218(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E47C4, 1);
}

uint64_t sub_10005C228()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t started;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  SEL v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  SEL v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  SEL v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  SEL v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  SEL v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  const char *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  _TtC13GameOverlayUI20GameOverlayUIService *v55;
  SEL v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  SEL v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  SEL v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  SEL v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  unint64_t v90;
  _TtC13GameOverlayUI20GameOverlayUIService **v91;
  uint64_t v92;
  const char *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  SEL v100;
  id v101;
  id v102;
  id v103;
  id v104;
  id v105;
  id v106;
  SEL v107;
  id v108;
  id v109;
  id v110;
  id v111;
  id v112;
  id v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  const char *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;

  v1 = (int *)type metadata accessor for InGameBannerView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = sub_100003304(&qword_10010CC20);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v0 + v4, v6);
  v7 = sub_100003304(&qword_10010E738);
  swift_release(*(_QWORD *)(v0 + v4 + *(int *)(v7 + 28)));
  v8 = v0 + v4 + v1[5];
  started = type metadata accessor for JetStartUpCoordinator(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(started - 8) + 8))(v8, started);
  v10 = sub_100003304(&qword_10010BE90);
  swift_release(*(_QWORD *)(v8 + *(int *)(v10 + 28)));
  v11 = (_QWORD *)(v0 + v4 + v1[6]);
  swift_release(*v11);
  swift_release(v11[1]);
  v12 = v0 + v4 + v1[7];
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v12 + 16), v13, v14, v15, v16, v17, v18, v19);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v12 + 32), v20, v21, v22, v23, v24, v25, v26);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v12 + 48), v27, v28, v29, v30, v31, v32, v33);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v12 + 64), v34, v35, v36, v37, v38, v39, v40);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v12 + 80), v41, v42, v43, v44, v45, v46, v47);
  v55 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v12 + 104);
  if (v55)
  {
    swift_bridgeObjectRelease(v55, v48, v49, v50, v51, v52, v53, v54);
    swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v12 + 120), v56, v57, v58, v59, v60, v61, v62);
    swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v12 + 136), v63, v64, v65, v66, v67, v68, v69);
    swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v12 + 152), v70, v71, v72, v73, v74, v75, v76);
  }
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v12 + 168), v48, v49, v50, v51, v52, v53, v54);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v12 + 184), v77, v78, v79, v80, v81, v82, v83);
  v90 = *(_QWORD *)(v12 + 200);
  if (v90 >> 60 != 15)
    sub_100038198(*(_QWORD *)(v12 + 192), v90);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v12 + 216), (SEL)v90, v84, v85, v86, v87, v88, v89);
  v91 = (_TtC13GameOverlayUI20GameOverlayUIService **)(v12
                                                     + *(int *)(type metadata accessor for InGameBannerRequiredData(0)
                                                              + 40));
  v92 = type metadata accessor for Game(0);
  if (!(*(unsigned int (**)(_TtC13GameOverlayUI20GameOverlayUIService **, uint64_t, uint64_t))(*(_QWORD *)(v92 - 8) + 48))(v91, 1, v92))
  {
    swift_bridgeObjectRelease(v91[1], v93, v94, v95, v96, v97, v98, v99);
    swift_bridgeObjectRelease(v91[3], v100, v101, v102, v103, v104, v105, v106);
    swift_bridgeObjectRelease(v91[5], v107, v108, v109, v110, v111, v112, v113);
    v114 = (char *)v91 + *(int *)(v92 + 28);
    v115 = type metadata accessor for Date(0);
    v116 = *(_QWORD *)(v115 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v116 + 48))(v114, 1, v115))
      (*(void (**)(char *, uint64_t))(v116 + 8))(v114, v115);
    swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)((char *)v91 + *(int *)(v92 + 60) + 8), v117, v118, v119, v120, v121, v122, v123);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10005C440@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for InGameBannerView(0) - 8) + 80);
  return sub_100059F18(a1, v2 + ((v5 + 16) & ~v5), a2);
}

unint64_t sub_10005C48C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010E848;
  if (!qword_10010E848)
  {
    v1 = sub_100006E54(&qword_10010E828);
    result = swift_getWitnessTable(&protocol conformance descriptor for Jet<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_10010E848);
  }
  return result;
}

uint64_t sub_10005C4D8()
{
  _QWORD v1[2];

  v1[0] = sub_100006E54(&qword_10010E828);
  v1[1] = sub_10005C48C();
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.startUpDecoration(_:)>>, 1);
}

uint64_t static FlowDestination.page<A>(whatPage:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v6;

  a4[3] = a2;
  a4[4] = a3;
  v6 = sub_1000052B0(a4);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(v6, a1, a2);
}

uint64_t FlowDestination.callAsFunction(asPartOf:)@<X0>(_BYTE *a1@<X8>)
{
  __int128 *v1;
  uint64_t result;
  _BYTE v4[2];
  _BYTE v5[24];
  uint64_t v6;

  sub_10005C5DC(v1, (uint64_t)v5);
  if (v6)
  {
    sub_10005C63C((uint64_t)v5);
    v4[0] = 1;
  }
  else
  {
    v4[0] = 0;
  }
  result = _ConditionalContent<>.init(storage:)(v4, &type metadata for EmptyView, &type metadata for EmptyView, &protocol witness table for EmptyView, &protocol witness table for EmptyView);
  *a1 = v4[1];
  return result;
}

uint64_t sub_10005C5DC(__int128 *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v3 = *((_QWORD *)a1 + 3);
  if (v3 < 0xFFFFFFFF)
  {
    v5 = *a1;
    v6 = a1[1];
    *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
    *(_OWORD *)a2 = v5;
    *(_OWORD *)(a2 + 16) = v6;
  }
  else
  {
    v4 = *((_QWORD *)a1 + 4);
    *(_QWORD *)(a2 + 24) = v3;
    *(_QWORD *)(a2 + 32) = v4;
    (**(void (***)(uint64_t))(v3 - 8))(a2);
  }
  return a2;
}

uint64_t sub_10005C63C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100003304(&qword_10010E858);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10005C67C()
{
  _BYTE *v0;

  if (*v0)
    return 1701273968;
  else
    return 0x7974706D65;
}

uint64_t sub_10005C6AC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10005D650(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10005C6D0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10005CAD0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005C6F8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10005CAD0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10005C720(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10005CB58();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005C748(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10005CB58();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10005C770()
{
  return 0x6567615074616877;
}

uint64_t sub_10005C788@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x6567615074616877 && a2 == 0xE800000000000000)
  {
    result = swift_bridgeObjectRelease(0xE800000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6567615074616877, 0xE800000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_10005C81C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10005CB14();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005C844(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10005CB14();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t FlowDestination.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  _OWORD v24[2];
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  char v29;

  v2 = sub_100003304(&qword_10010E860);
  v20 = *(_QWORD *)(v2 - 8);
  v21 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100003304(&qword_10010E868);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003304(&qword_10010E870);
  v22 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_100003C28(a1, v12);
  v14 = sub_10005CAD0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FlowDestination.CodingKeys, &type metadata for FlowDestination.CodingKeys, v14, v12, v13);
  sub_10005C5DC(v23, (uint64_t)&v26);
  if (*((_QWORD *)&v27 + 1))
  {
    v24[0] = v26;
    v24[1] = v27;
    v25 = v28;
    v29 = 1;
    v15 = sub_10005CB14();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for FlowDestination.PageCodingKeys, &v29, v9, &type metadata for FlowDestination.PageCodingKeys, v15);
    sub_100003304(&qword_10010E858);
    sub_10005CF74(&qword_10010E888, (uint64_t)&protocol conformance descriptor for CodeByKind<A>);
    v16 = v21;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v24);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v4, v16);
    sub_10005C63C((uint64_t)v24);
  }
  else
  {
    LOBYTE(v24[0]) = 0;
    v18 = sub_10005CB58();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for FlowDestination.EmptyCodingKeys, v24, v9, &type metadata for FlowDestination.EmptyCodingKeys, v18);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v11, v9);
}

unint64_t sub_10005CAD0()
{
  unint64_t result;

  result = qword_10010E878;
  if (!qword_10010E878)
  {
    result = swift_getWitnessTable(&unk_1000CA2FC, &type metadata for FlowDestination.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010E878);
  }
  return result;
}

unint64_t sub_10005CB14()
{
  unint64_t result;

  result = qword_10010E880;
  if (!qword_10010E880)
  {
    result = swift_getWitnessTable(&unk_1000CA2AC, &type metadata for FlowDestination.PageCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010E880);
  }
  return result;
}

unint64_t sub_10005CB58()
{
  unint64_t result;

  result = qword_10010E890;
  if (!qword_10010E890)
  {
    result = swift_getWitnessTable(&unk_1000CA25C, &type metadata for FlowDestination.EmptyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010E890);
  }
  return result;
}

uint64_t FlowDestination.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _TtC13GameOverlayUI20GameOverlayUIService *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _TtC13GameOverlayUI20GameOverlayUIService *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  SEL v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  unint64_t v38;
  uint64_t v39;
  SEL v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  SEL v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  _QWORD *v58;
  __int128 v59[2];
  __int128 v60[2];
  uint64_t v61;
  uint64_t v62;

  v56 = a2;
  v3 = sub_100003304(&qword_10010E898);
  v4 = *(_QWORD *)(v3 - 8);
  v54 = v3;
  v55 = v4;
  __chkstk_darwin(v3);
  v57 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003304(&qword_10010E8A0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003304(&qword_10010E8A8);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v15 = a1[4];
  v58 = a1;
  sub_100003C28(a1, v14);
  v16 = sub_10005CAD0();
  v17 = v62;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for FlowDestination.CodingKeys, &type metadata for FlowDestination.CodingKeys, v16, v14, v15);
  if (!v17)
  {
    v18 = v57;
    v62 = v11;
    v19 = KeyedDecodingContainer.allKeys.getter(v10);
    v20 = (_TtC13GameOverlayUI20GameOverlayUIService *)v19;
    v21 = v10;
    if (*(_QWORD *)(v19 + 16) == 1)
    {
      if ((*(_BYTE *)(v19 + 32) & 1) != 0)
      {
        LOBYTE(v59[0]) = 1;
        v22 = sub_10005CB14();
        v23 = v10;
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for FlowDestination.PageCodingKeys, v59, v10, &type metadata for FlowDestination.PageCodingKeys, v22);
        sub_100003304(&qword_10010E858);
        sub_10005CF74(&qword_10010E8B0, (uint64_t)&protocol conformance descriptor for CodeByKind<A>);
        v39 = v54;
        KeyedDecodingContainer.decode<A>(_:forKey:)(v59);
        (*(void (**)(char *, uint64_t))(v55 + 8))(v18, v39);
        swift_bridgeObjectRelease(v20, v40, v41, v42, v43, v44, v45, v46);
        (*(void (**)(char *, uint64_t))(v62 + 8))(v13, v23);
        sub_10005A194(v59, (uint64_t)v60);
      }
      else
      {
        LOBYTE(v59[0]) = 0;
        v38 = sub_10005CB58();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for FlowDestination.EmptyCodingKeys, v59, v10, &type metadata for FlowDestination.EmptyCodingKeys, v38);
        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
        swift_bridgeObjectRelease(v20, v47, v48, v49, v50, v51, v52, v53);
        (*(void (**)(char *, uint64_t))(v62 + 8))(v13, v10);
        memset(v60, 0, sizeof(v60));
        v61 = 0;
      }
      sub_10005A194(v60, v56);
    }
    else
    {
      v24 = type metadata accessor for DecodingError(0);
      swift_allocError(v24, &protocol witness table for DecodingError, 0, 0);
      v25 = v20;
      v27 = v26;
      sub_100003304(&qword_10010BFA0);
      *v27 = &type metadata for FlowDestination;
      v28 = KeyedDecodingContainer.codingPath.getter(v21);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v28, 0xD00000000000002BLL, 0x80000001000CF850, 0);
      v29 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v27, enum case for DecodingError.typeMismatch(_:), v24);
      swift_willThrow(v29);
      swift_bridgeObjectRelease(v25, v30, v31, v32, v33, v34, v35, v36);
      (*(void (**)(char *, uint64_t))(v62 + 8))(v13, v21);
    }
  }
  return sub_100004624(v58);
}

uint64_t sub_10005CF74(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_100006E54(&qword_10010E858);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10005CFB8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FlowDestination.init(from:)(a1, a2);
}

uint64_t sub_10005CFCC(_QWORD *a1)
{
  return FlowDestination.encode(to:)(a1);
}

_QWORD *destroy for FlowDestination(_QWORD *a1)
{
  if (a1[3] >= 0xFFFFFFFFuLL)
    return (_QWORD *)sub_100004624(a1);
  return a1;
}

uint64_t initializeWithCopy for FlowDestination(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  __int128 v5;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3 < 0xFFFFFFFF)
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  }
  else
  {
    v4 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v3;
    *(_QWORD *)(a1 + 32) = v4;
    (**(void (***)(uint64_t))(v3 - 8))(a1);
  }
  return a1;
}

uint64_t assignWithCopy for FlowDestination(uint64_t a1, __int128 *a2)
{
  unint64_t v4;
  __int128 v5;
  __int128 v6;

  v4 = *((_QWORD *)a2 + 3);
  if (*(_QWORD *)(a1 + 24) < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *(_QWORD *)(a1 + 24) = v4;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v4 - 8))(a1, a2);
      return a1;
    }
LABEL_7:
    v5 = *a2;
    v6 = a2[1];
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + 16) = v6;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    sub_100004624((_QWORD *)a1);
    goto LABEL_7;
  }
  sub_100012CF4((_QWORD *)a1, a2);
  return a1;
}

uint64_t assignWithTake for FlowDestination(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  if (*(_QWORD *)(a1 + 24) >= 0xFFFFFFFFuLL)
    sub_100004624((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for FlowDestination(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for FlowDestination(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

uint64_t sub_10005D1E4(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

double sub_10005D1FC(uint64_t a1, int a2)
{
  double result;

  if (a2 < 0)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    *(_QWORD *)(a1 + 24) = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for FlowDestination()
{
  return &type metadata for FlowDestination;
}

unint64_t sub_10005D23C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010E8B8;
  if (!qword_10010E8B8)
  {
    v1 = sub_100006E54(&qword_10010E8C0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10010E8B8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FlowDestination.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10005D2E4 + 4 * byte_1000C9FF5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10005D318 + 4 * byte_1000C9FF0[v4]))();
}

uint64_t sub_10005D318(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005D320(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10005D328);
  return result;
}

uint64_t sub_10005D334(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10005D33CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10005D340(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005D348(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FlowDestination.CodingKeys()
{
  return &type metadata for FlowDestination.CodingKeys;
}

ValueMetadata *type metadata accessor for FlowDestination.EmptyCodingKeys()
{
  return &type metadata for FlowDestination.EmptyCodingKeys;
}

uint64_t storeEnumTagSinglePayload for FlowDestination.PageCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10005D3B4 + 4 * byte_1000C9FFA[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10005D3D4 + 4 * byte_1000C9FFF[v4]))();
}

_BYTE *sub_10005D3B4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10005D3D4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10005D3DC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10005D3E4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10005D3EC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10005D3F4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for FlowDestination.PageCodingKeys()
{
  return &type metadata for FlowDestination.PageCodingKeys;
}

unint64_t sub_10005D414()
{
  unint64_t result;

  result = qword_10010E8C8;
  if (!qword_10010E8C8)
  {
    result = swift_getWitnessTable(&unk_1000CA12C, &type metadata for FlowDestination.PageCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010E8C8);
  }
  return result;
}

unint64_t sub_10005D45C()
{
  unint64_t result;

  result = qword_10010E8D0;
  if (!qword_10010E8D0)
  {
    result = swift_getWitnessTable(&unk_1000CA234, &type metadata for FlowDestination.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010E8D0);
  }
  return result;
}

unint64_t sub_10005D4A4()
{
  unint64_t result;

  result = qword_10010E8D8;
  if (!qword_10010E8D8)
  {
    result = swift_getWitnessTable(&unk_1000CA154, &type metadata for FlowDestination.EmptyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010E8D8);
  }
  return result;
}

unint64_t sub_10005D4EC()
{
  unint64_t result;

  result = qword_10010E8E0;
  if (!qword_10010E8E0)
  {
    result = swift_getWitnessTable(&unk_1000CA17C, &type metadata for FlowDestination.EmptyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010E8E0);
  }
  return result;
}

unint64_t sub_10005D534()
{
  unint64_t result;

  result = qword_10010E8E8;
  if (!qword_10010E8E8)
  {
    result = swift_getWitnessTable(&unk_1000CA09C, &type metadata for FlowDestination.PageCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010E8E8);
  }
  return result;
}

unint64_t sub_10005D57C()
{
  unint64_t result;

  result = qword_10010E8F0;
  if (!qword_10010E8F0)
  {
    result = swift_getWitnessTable(&unk_1000CA0C4, &type metadata for FlowDestination.PageCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010E8F0);
  }
  return result;
}

unint64_t sub_10005D5C4()
{
  unint64_t result;

  result = qword_10010E8F8;
  if (!qword_10010E8F8)
  {
    result = swift_getWitnessTable(&unk_1000CA1A4, &type metadata for FlowDestination.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010E8F8);
  }
  return result;
}

unint64_t sub_10005D60C()
{
  unint64_t result;

  result = qword_10010E900;
  if (!qword_10010E900)
  {
    result = swift_getWitnessTable(&unk_1000CA1CC, &type metadata for FlowDestination.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010E900);
  }
  return result;
}

uint64_t sub_10005D650(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x7974706D65 && a2 == 0xE500000000000000)
  {
    v5 = 0xE500000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7974706D65, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 1701273968 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(1701273968, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

id sub_10005D864()
{
  return sub_10006039C(type metadata accessor for GameModeButton);
}

uint64_t type metadata accessor for GameModeButton()
{
  return objc_opt_self(_TtC13GameOverlayUI14GameModeButton);
}

void sub_10005D8A0(double a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  _QWORD v10[5];
  uint64_t v11;

  v3 = OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_timer;
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_timer), "invalidate");
  if (a1 <= 0.0)
  {
    v9 = *(void **)(v1 + v3);
    *(_QWORD *)(v1 + v3) = 0;

  }
  else
  {
    v4 = (void *)objc_opt_self(NSTimer);
    v5 = swift_allocObject(&unk_1000FED38, 24, 7);
    swift_unknownObjectWeakInit(v5 + 16, v1);
    v10[4] = sub_100060760;
    v11 = v5;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 1107296256;
    v10[2] = sub_10005DD08;
    v10[3] = &unk_1000FED50;
    v6 = _Block_copy(v10);
    swift_release(v11);
    v7 = objc_msgSend(v4, "scheduledTimerWithTimeInterval:repeats:block:", 0, v6, a1);
    _Block_release(v6);
    v8 = *(void **)(v1 + v3);
    *(_QWORD *)(v1 + v3) = v7;

  }
}

void sub_10005D9D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  char *v4;
  uint64_t v5;
  NSObject *v6;
  _TtC13GameOverlayUI20GameOverlayUIService *v7;
  NSObject *v8;
  NSString v9;
  SEL v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  NSString v17;
  _TtC13GameOverlayUI20GameOverlayUIService *v18;
  Class isa;
  SEL v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  os_log_type_t v35;
  uint8_t *v36;
  _QWORD *v37;
  void *v38;
  uint64_t v39;
  id v40;
  _BYTE v41[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v41, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v4 = (char *)Strong;
    v5 = OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_bannerSource;
    v6 = *(NSObject **)(Strong + OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_bannerSource);
    if (v6)
    {
      v7 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(Strong
                                                         + OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_bannerRequestIdentifier
                                                         + 8);
      swift_bridgeObjectRetain(v7);
      v8 = v6;
      v9 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v7, v10, v11, v12, v13, v14, v15, v16);
      v17 = String._bridgeToObjectiveC()();
      v18 = (_TtC13GameOverlayUI20GameOverlayUIService *)sub_10008F984((uint64_t)&_swiftEmptyArrayStorage);
      sub_100003304(&qword_10010EB18);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v18, v20, v21, v22, v23, v24, v25, v26);
      v40 = 0;
      v27 = -[NSObject revokePresentableWithRequestIdentifier:reason:animated:userInfo:error:](v8, "revokePresentableWithRequestIdentifier:reason:animated:userInfo:error:", v9, v17, 1, isa, &v40);

      v28 = v40;
      if (!v27)
      {
        v30 = v40;
        v31 = _convertNSErrorToError(_:)(v28);

        swift_willThrow(v32);
        if (qword_10010BAA0 != -1)
          swift_once(&qword_10010BAA0, sub_100004DCC);
        v33 = type metadata accessor for Logger(0);
        sub_100004E8C(v33, (uint64_t)qword_1001232D8);
        swift_errorRetain(v31);
        v34 = swift_errorRetain(v31);
        v6 = Logger.logObject.getter(v34);
        v35 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v6, v35))
        {
          v36 = (uint8_t *)swift_slowAlloc(12, -1);
          v37 = (_QWORD *)swift_slowAlloc(8, -1);
          *(_DWORD *)v36 = 138412290;
          swift_errorRetain(v31);
          v38 = (void *)_swift_stdlib_bridgeErrorToNSError(v31);
          v40 = v38;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, v41);
          *v37 = v38;
          swift_errorRelease(v31);
          swift_errorRelease(v31);
          _os_log_impl((void *)&_mh_execute_header, v6, v35, "Game Mode banner revoke error: %@", v36, 0xCu);
          v39 = sub_100003304(&qword_10010EB00);
          swift_arrayDestroy(v37, 1, v39);
          swift_slowDealloc(v37, -1, -1);
          swift_slowDealloc(v36, -1, -1);

          swift_errorRelease(v31);
          return;
        }

        swift_errorRelease(v31);
        swift_errorRelease(v31);
        swift_errorRelease(v31);
        goto LABEL_6;
      }
      v29 = v40;

      v6 = *(NSObject **)&v4[v5];
    }
    *(_QWORD *)&v4[v5] = 0;

LABEL_6:
  }
}

void sub_10005DD08(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  id v5;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4();
  swift_release(v3);

}

void sub_10005DE00()
{
  char *v0;
  char *v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  NSString v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  NSString v25;
  uint64_t v26;
  const char *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  _TtC13GameOverlayUI20GameOverlayUIService *v34;
  id v35;
  NSString v36;
  Class isa;
  SEL v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  _TtC13GameOverlayUI20GameOverlayUIService *v56;
  id v57;
  NSString v58;
  Class v59;
  SEL v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  uint64_t v69;
  void *v70;
  id v71;
  uint64_t v72;
  void *v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  void *v78;
  id v79;
  id v80;
  id v81;
  Class v82;
  SEL v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  id v89;
  void *v90;
  id v91;
  void *v92;
  id v93;
  id v94;
  void *v95;
  _TtC13GameOverlayUI20GameOverlayUIService *v96;
  objc_super v97;

  v1 = v0;
  v97.receiver = v0;
  v97.super_class = (Class)type metadata accessor for GamePolicyBannerViewController();
  objc_msgSendSuper2(&v97, "viewDidLoad");
  v2 = type metadata accessor for GameModeButton();
  v3 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2)), "init");
  v4 = OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_buttonView;
  v5 = *(void **)&v0[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_buttonView];
  *(_QWORD *)&v0[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_buttonView] = v3;

  v6 = *(void **)&v0[v4];
  if (!v6)
  {
    __break(1u);
    goto LABEL_19;
  }
  objc_msgSend(v6, "addTarget:action:forControlEvents:", v0, "toggleGameMode:", 64);
  v7 = *(void **)&v0[v4];
  if (!v7)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v8 = objc_msgSend(v7, "widthAnchor");
  v9 = objc_msgSend(v8, "constraintEqualToConstant:", 36.0);

  objc_msgSend(v9, "setActive:", 1);
  v10 = *(void **)&v1[v4];
  if (!v10)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v11 = objc_msgSend(v10, "heightAnchor");
  v12 = objc_msgSend(v11, "constraintEqualToConstant:", 36.0);

  objc_msgSend(v12, "setActive:", 1);
  v13 = *(void **)&v1[v4];
  if (!v13)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  objc_msgSend(v13, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v14 = *(void **)&v1[v4];
  if (!v14)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  objc_msgSend(v14, "_setCornerRadius:", 18.0);
  v15 = *(void **)&v1[v4];
  if (!v15)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v16 = v15;
  v17 = String._bridgeToObjectiveC()();
  v18 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v17);

  objc_msgSend(v16, "setImage:forState:", v18, 0);
  v19 = *(void **)&v1[v4];
  if (!v19)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v20 = (void *)objc_opt_self(UIColor);
  v21 = v19;
  v22 = objc_msgSend(v20, "systemWhiteColor");
  objc_msgSend(v21, "setTintColor:", v22);

  v23 = *(void **)&v1[v4];
  if (!v23)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v24 = v23;
  v25 = String._bridgeToObjectiveC()();
  objc_msgSend(v24, "setAccessibilityIdentifier:", v25);

  v26 = *(_QWORD *)&v1[v4];
  if (!v26)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  swift_unknownObjectWeakAssign(v26 + OBJC_IVAR____TtC13GameOverlayUI14GameModeButton_controller);
  v34 = (_TtC13GameOverlayUI20GameOverlayUIService *)sub_10008FBE4(&_swiftEmptyArrayStorage, v27, v28, v29, v30, v31, v32, v33);
  v35 = objc_allocWithZone((Class)NSAttributedString);
  v36 = String._bridgeToObjectiveC()();
  type metadata accessor for Key(0);
  sub_1000606F4();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v34, v38, v39, v40, v41, v42, v43, v44);
  v45 = objc_msgSend(v35, "initWithString:attributes:", v36, isa);

  v46 = objc_msgSend(objc_allocWithZone((Class)PLPillContentItem), "initWithAttributedText:", v45);
  v47 = OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_titleView;
  v48 = *(void **)&v1[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_titleView];
  *(_QWORD *)&v1[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_titleView] = v46;

  v56 = (_TtC13GameOverlayUI20GameOverlayUIService *)sub_10008FBE4(&_swiftEmptyArrayStorage, v49, v50, v51, v52, v53, v54, v55);
  v57 = objc_allocWithZone((Class)NSAttributedString);
  v58 = String._bridgeToObjectiveC()();
  v59 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v56, v60, v61, v62, v63, v64, v65, v66);
  v67 = objc_msgSend(v57, "initWithString:attributes:", v58, v59);

  v68 = objc_msgSend(objc_allocWithZone((Class)PLPillContentItem), "initWithAttributedText:", v67);
  v69 = OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_stateView;
  v70 = *(void **)&v1[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_stateView];
  *(_QWORD *)&v1[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_stateView] = v68;

  v71 = objc_msgSend(objc_allocWithZone((Class)PLPillView), "initWithLeadingAccessoryView:", *(_QWORD *)&v1[v4]);
  v72 = OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_pillView;
  v73 = *(void **)&v1[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_pillView];
  *(_QWORD *)&v1[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_pillView] = v71;

  v74 = *(void **)&v1[v72];
  if (!v74)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v75 = sub_100003304(&qword_100110640);
  v76 = swift_allocObject(v75, 48, 7);
  *(_OWORD *)(v76 + 16) = xmmword_1000CA370;
  v77 = *(void **)&v1[v47];
  if (!v77)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  *(_QWORD *)(v76 + 32) = v77;
  v78 = *(void **)&v1[v69];
  if (!v78)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  *(_QWORD *)(v76 + 40) = v78;
  v96 = (_TtC13GameOverlayUI20GameOverlayUIService *)v76;
  specialized Array._endMutation()();
  sub_1000509C8(0, (unint64_t *)&unk_10010EB80, PLPillContentItem_ptr);
  v79 = v74;
  v80 = v77;
  v81 = v78;
  v82 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v96, v83, v84, v85, v86, v87, v88, v89);
  objc_msgSend(v79, "setCenterContentItems:", v82);

  v90 = *(void **)&v1[v72];
  if (!v90)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  objc_msgSend(v90, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v91 = objc_msgSend(v1, "view");
  if (!v91)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (!*(_QWORD *)&v1[v72])
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v92 = v91;
  objc_msgSend(v91, "addSubview:");

  v93 = objc_msgSend(objc_allocWithZone((Class)UITapGestureRecognizer), "initWithTarget:action:", v1, "showControlCenter:");
  objc_msgSend(v93, "setNumberOfTapsRequired:", 1);
  objc_msgSend(v93, "setNumberOfTouchesRequired:", 1);
  v94 = objc_msgSend(v1, "view");
  if (v94)
  {
    v95 = v94;
    objc_msgSend(v94, "addGestureRecognizer:", v93);

    sub_10005E488();
    return;
  }
LABEL_33:
  __break(1u);
}

void sub_10005E488()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  int v4;
  void *v5;
  id v6;
  char **v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  NSString v12;
  void *v13;
  uint64_t v14;
  id v15;
  uint64_t *v16;
  uint64_t v17;
  id v18;
  _TtC13GameOverlayUI20GameOverlayUIService *v19;
  NSString v20;
  SEL v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  void *v28;
  uint64_t v29;
  id v30;
  NSString v31;
  _TtC13GameOverlayUI20GameOverlayUIService *v32;
  uint64_t inited;
  void *v34;
  id v35;
  uint64_t v36;
  void *v37;
  NSString *v38;
  id v39;
  uint64_t v40;
  const char *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  _TtC13GameOverlayUI20GameOverlayUIService *v48;
  id v49;
  NSString v50;
  SEL v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  Class isa;
  SEL v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  uint64_t *v66;
  _TtC13GameOverlayUI20GameOverlayUIService *v67;
  uint64_t v68;
  NSString *v69;
  NSString *v70;
  id v71;
  const char *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  _TtC13GameOverlayUI20GameOverlayUIService *v79;
  id v80;
  NSString v81;
  SEL v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  Class v89;
  SEL v90;
  id v91;
  id v92;
  id v93;
  id v94;
  id v95;
  id v96;
  id v97;
  uint64_t v98;
  void *v99;
  id v100;
  void *v101;
  uint64_t v102;
  void *v103;
  id v104;
  void *v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  void *v110;
  id v111;
  id v112;
  id v113;
  Class v114;
  SEL v115;
  id v116;
  id v117;
  id v118;
  id v119;
  id v120;
  id v121;
  id v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  NSString *v126;
  uint64_t v127;
  _TtC13GameOverlayUI20GameOverlayUIService *v128;
  _BYTE v129[112];
  _BYTE v130[120];

  v1 = OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_buttonView;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_buttonView);
  if (!v2)
  {
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v3 = OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_gameModeEnabled;
  v4 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_gameModeEnabled);
  v5 = (void *)objc_opt_self(UIColor);
  v6 = v2;
  v7 = &selRef_systemBlueColor;
  if (!v4)
    v7 = &selRef_secondarySystemBackgroundColor;
  v8 = objc_msgSend(v5, *v7);
  objc_msgSend(v6, "setBackgroundColor:", v8);

  v9 = *(void **)(v0 + v1);
  if (!v9)
    goto LABEL_32;
  v10 = qword_10010BB40;
  v11 = v9;
  if (v10 != -1)
    swift_once(&qword_10010BB40, sub_100072E6C);
  v12 = String._bridgeToObjectiveC()();
  objc_msgSend(v11, "setAccessibilityLabel:", v12);

  v13 = *(void **)(v0 + v1);
  if (!v13)
    goto LABEL_33;
  if (*(_BYTE *)(v0 + v3) == 1)
  {
    v14 = qword_10010BB48;
    v15 = v13;
    if (v14 != -1)
      swift_once(&qword_10010BB48, sub_100072E84);
    v16 = &qword_100123378;
  }
  else
  {
    v17 = qword_10010BB50;
    v18 = v13;
    if (v17 != -1)
      swift_once(&qword_10010BB50, sub_100072E9C);
    v16 = &qword_100123388;
  }
  v19 = (_TtC13GameOverlayUI20GameOverlayUIService *)v16[1];
  swift_bridgeObjectRetain(v19);
  v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v19, v21, v22, v23, v24, v25, v26, v27);
  objc_msgSend(v13, "setAccessibilityValue:", v20);

  v28 = *(void **)(v0 + v1);
  if (!v28)
    goto LABEL_34;
  v127 = v3;
  v29 = qword_10010BB58;
  v30 = v28;
  if (v29 != -1)
    swift_once(&qword_10010BB58, sub_100072EB4);
  v31 = String._bridgeToObjectiveC()();
  objc_msgSend(v30, "setAccessibilityHint:", v31);

  v32 = (_TtC13GameOverlayUI20GameOverlayUIService *)qword_100123370;
  v124 = sub_100003304(&qword_10010EB58);
  inited = swift_initStackObject(v124, v130);
  *(_OWORD *)(inited + 16) = xmmword_1000C5A50;
  *(_QWORD *)(inited + 32) = NSFontAttributeName;
  v34 = (void *)objc_opt_self(UIFont);
  swift_bridgeObjectRetain(v32);
  v126 = NSFontAttributeName;
  v123 = v34;
  v35 = objc_msgSend(v34, "preferredFontForTextStyle:", UIFontTextStyleSubheadline);
  v36 = sub_1000509C8(0, &qword_10010EB60, UIFont_ptr);
  *(_QWORD *)(inited + 40) = v35;
  v125 = v36;
  *(_QWORD *)(inited + 64) = v36;
  *(_QWORD *)(inited + 72) = NSForegroundColorAttributeName;
  v37 = (void *)objc_opt_self(UIColor);
  v38 = NSForegroundColorAttributeName;
  v39 = objc_msgSend(v37, "labelColor");
  v40 = sub_1000509C8(0, &qword_10010EB68, UIColor_ptr);
  *(_QWORD *)(inited + 104) = v40;
  *(_QWORD *)(inited + 80) = v39;
  v48 = (_TtC13GameOverlayUI20GameOverlayUIService *)sub_10008FBE4((_TtC13GameOverlayUI20GameOverlayUIService *)inited, v41, v42, v43, v44, v45, v46, v47);
  v49 = objc_allocWithZone((Class)NSAttributedString);
  v50 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v32, v51, v52, v53, v54, v55, v56, v57);
  type metadata accessor for Key(0);
  sub_1000606F4();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v48, v59, v60, v61, v62, v63, v64, v65);
  v122 = objc_msgSend(v49, "initWithString:attributes:", v50, isa);

  if (*(_BYTE *)(v0 + v127) == 1)
  {
    if (qword_10010BB48 != -1)
      swift_once(&qword_10010BB48, sub_100072E84);
    v66 = &qword_100123378;
  }
  else
  {
    if (qword_10010BB50 != -1)
      swift_once(&qword_10010BB50, sub_100072E9C);
    v66 = &qword_100123388;
  }
  v67 = (_TtC13GameOverlayUI20GameOverlayUIService *)v66[1];
  swift_bridgeObjectRetain(v67);
  v68 = swift_initStackObject(v124, v129);
  *(_OWORD *)(v68 + 16) = xmmword_1000C5A50;
  *(_QWORD *)(v68 + 32) = v126;
  v69 = v126;
  *(_QWORD *)(v68 + 40) = objc_msgSend(v123, "preferredFontForTextStyle:", UIFontTextStyleSubheadline);
  *(_QWORD *)(v68 + 64) = v125;
  *(_QWORD *)(v68 + 72) = v38;
  v70 = v38;
  v71 = objc_msgSend(v37, "secondaryLabelColor");
  *(_QWORD *)(v68 + 104) = v40;
  *(_QWORD *)(v68 + 80) = v71;
  v79 = (_TtC13GameOverlayUI20GameOverlayUIService *)sub_10008FBE4((_TtC13GameOverlayUI20GameOverlayUIService *)v68, v72, v73, v74, v75, v76, v77, v78);
  v80 = objc_allocWithZone((Class)NSAttributedString);
  v81 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v67, v82, v83, v84, v85, v86, v87, v88);
  v89 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v79, v90, v91, v92, v93, v94, v95, v96);
  v97 = objc_msgSend(v80, "initWithString:attributes:", v81, v89);

  v98 = OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_titleView;
  v99 = *(void **)(v0 + OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_titleView);
  if (!v99)
    goto LABEL_35;
  v100 = objc_msgSend(v99, "itemWithAttributedText:", v122);
  v101 = *(void **)(v0 + v98);
  *(_QWORD *)(v0 + v98) = v100;

  v102 = OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_stateView;
  v103 = *(void **)(v0 + OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_stateView);
  if (!v103)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v104 = objc_msgSend(v103, "itemWithAttributedText:", v97);
  v105 = *(void **)(v0 + v102);
  *(_QWORD *)(v0 + v102) = v104;

  v106 = *(void **)(v0 + OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_pillView);
  if (!v106)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v107 = sub_100003304(&qword_100110640);
  v108 = swift_allocObject(v107, 48, 7);
  *(_OWORD *)(v108 + 16) = xmmword_1000CA370;
  v109 = *(void **)(v0 + v98);
  if (!v109)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  *(_QWORD *)(v108 + 32) = v109;
  v110 = *(void **)(v0 + v102);
  if (v110)
  {
    *(_QWORD *)(v108 + 40) = v110;
    v128 = (_TtC13GameOverlayUI20GameOverlayUIService *)v108;
    specialized Array._endMutation()();
    sub_1000509C8(0, (unint64_t *)&unk_10010EB80, PLPillContentItem_ptr);
    v111 = v106;
    v112 = v109;
    v113 = v110;
    v114 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v128, v115, v116, v117, v118, v119, v120, v121);
    objc_msgSend(v111, "setCenterContentItems:", v114);

    return;
  }
LABEL_39:
  __break(1u);
}

void sub_10005EB4C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  _TtC13GameOverlayUI20GameOverlayUIService *v3;
  id v4;
  NSString v5;
  SEL v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  NSString v13;
  _TtC13GameOverlayUI20GameOverlayUIService *v14;
  Class isa;
  SEL v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  _QWORD *v35;
  void *v36;
  uint64_t v37;
  id v38;
  uint64_t v39;

  v1 = OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_bannerSource;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_bannerSource);
  if (!v2)
  {
    v26 = 0;
    goto LABEL_5;
  }
  v3 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v0
                                                     + OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_bannerRequestIdentifier
                                                     + 8);
  swift_bridgeObjectRetain(v3);
  v4 = v2;
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3, v6, v7, v8, v9, v10, v11, v12);
  v13 = String._bridgeToObjectiveC()();
  v14 = (_TtC13GameOverlayUI20GameOverlayUIService *)sub_10008F984((uint64_t)&_swiftEmptyArrayStorage);
  sub_100003304(&qword_10010EB18);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v14, v16, v17, v18, v19, v20, v21, v22);
  v38 = 0;
  v23 = objc_msgSend(v4, "revokePresentableWithRequestIdentifier:reason:animated:userInfo:error:", v5, v13, 1, isa, &v38);

  v24 = v38;
  if (v23)
  {
    v25 = v38;

    v26 = *(void **)(v0 + v1);
LABEL_5:
    *(_QWORD *)(v0 + v1) = 0;

    return;
  }
  v27 = v38;
  v28 = _convertNSErrorToError(_:)(v24);

  swift_willThrow(v29);
  if (qword_10010BAA0 != -1)
    swift_once(&qword_10010BAA0, sub_100004DCC);
  v30 = type metadata accessor for Logger(0);
  sub_100004E8C(v30, (uint64_t)qword_1001232D8);
  swift_errorRetain(v28);
  v31 = swift_errorRetain(v28);
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v32, v33))
  {
    v34 = (uint8_t *)swift_slowAlloc(12, -1);
    v35 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v34 = 138412290;
    swift_errorRetain(v28);
    v36 = (void *)_swift_stdlib_bridgeErrorToNSError(v28);
    v38 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);
    *v35 = v36;
    swift_errorRelease(v28);
    swift_errorRelease(v28);
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Game Mode banner revoke error: %@", v34, 0xCu);
    v37 = sub_100003304(&qword_10010EB00);
    swift_arrayDestroy(v35, 1, v37);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v34, -1, -1);

    swift_errorRelease(v28);
  }
  else
  {
    swift_errorRelease(v28);
    swift_errorRelease(v28);
    swift_errorRelease(v28);

  }
}

void sub_10005EE60()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, _TtC13GameOverlayUI20GameOverlayUIService *, uint64_t);
  uint64_t v3;
  uint64_t v4;
  _TtC13GameOverlayUI20GameOverlayUIService *v5;
  uint64_t v6;
  SEL v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;

  v1 = OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_gameModeEnabled;
  *(_BYTE *)(v0 + OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_gameModeEnabled) = (*(_BYTE *)(v0 + OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_gameModeEnabled) & 1) == 0;
  sub_10005D8A0(3.0);
  sub_10005E488();
  v2 = *(void (**)(uint64_t, _TtC13GameOverlayUI20GameOverlayUIService *, uint64_t))(v0
                                                                                            + OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_tapHandler);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_tapHandler + 8);
    v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_bundleIdentifier);
    v5 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v0
                                                       + OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_bundleIdentifier
                                                       + 8);
    v6 = *(unsigned __int8 *)(v0 + v1);
    sub_10001B3C0((uint64_t)v2, v3);
    swift_bridgeObjectRetain(v5);
    v2(v4, v5, v6);
    sub_100050580((uint64_t)v2, v3);
    swift_bridgeObjectRelease(v5, v7, v8, v9, v10, v11, v12, v13);
  }
}

uint64_t sub_10005EF34(void *a1, uint64_t a2, uint64_t a3, void (*a4)(id))
{
  id v7;
  uint64_t v8;
  id v9;
  _OWORD v11[2];

  if (a3)
  {
    v7 = a1;
    swift_unknownObjectRetain(a3, v8);
    _bridgeAnyObjectToAny(_:)(v11);
    v9 = (id)swift_unknownObjectRelease(a3);
  }
  else
  {
    memset(v11, 0, sizeof(v11));
    v9 = a1;
  }
  a4(v9);

  return sub_1000607F8((uint64_t)v11);
}

double sub_10005EFA8(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  id v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  double result;
  _BYTE v14[32];

  v3 = sub_100003304(&qword_10010EB20);
  __chkstk_darwin(v3);
  v5 = &v14[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = objc_msgSend((id)objc_opt_self(CCSControlCenterService), "sharedInstance");
  v7 = type metadata accessor for TaskPriority(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5, 1, 1, v7);
  sub_1000604E8(a1, (uint64_t)v14);
  type metadata accessor for MainActor(0);
  v8 = v6;
  v9 = v1;
  v10 = static MainActor.shared.getter(v9);
  v11 = (_QWORD *)swift_allocObject(&unk_1000FECD0, 80, 7);
  v11[2] = v10;
  v11[3] = &protocol witness table for MainActor;
  v11[4] = v8;
  v11[5] = v9;
  sub_100060574((uint64_t)v14, (uint64_t)(v11 + 6));
  v12 = sub_100028240((uint64_t)v5, (uint64_t)&unk_10010EB38, (uint64_t)v11);

  *(_QWORD *)&result = swift_release(v12).n128_u64[0];
  return result;
}

uint64_t sub_10005F0E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6[21] = a5;
  v6[22] = a6;
  v6[20] = a4;
  v7 = sub_100003304(&qword_10010EB20);
  v6[23] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for MainActor(0);
  v6[24] = v8;
  v6[25] = static MainActor.shared.getter(v8);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v8, &protocol witness table for MainActor);
  v6[26] = v9;
  v6[27] = v10;
  return swift_task_switch(sub_10005F180, v9, v10);
}

uint64_t sub_10005F180()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0 + 2;
  v2 = (void *)v0[20];
  v0[7] = v0 + 29;
  v0[2] = v0;
  v0[3] = sub_10005F218;
  v3 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v4 = v0 + 10;
  v4[1] = 0x40000000;
  v4[2] = sub_10005F530;
  v4[3] = &unk_1000FECE8;
  v4[4] = v3;
  objc_msgSend(v2, "handleControlCenterOperationType:completionHandler:", 3, v4);
  return swift_continuation_await(v1);
}

uint64_t sub_10005F218()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 224) = v2;
  if (v2)
    v3 = sub_10005F2BC;
  else
    v3 = sub_10005F274;
  return swift_task_switch(v3, *(_QWORD *)(v1 + 208), *(_QWORD *)(v1 + 216));
}

uint64_t sub_10005F274()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 200));
  sub_10005D8A0(0.001);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005F2BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;

  swift_release(*(_QWORD *)(v0 + 200));
  swift_willThrow(v1);
  if (qword_10010BAA0 != -1)
    swift_once(&qword_10010BAA0, sub_100004DCC);
  v2 = *(_QWORD *)(v0 + 224);
  v3 = type metadata accessor for Logger(0);
  sub_100004E8C(v3, (uint64_t)qword_1001232D8);
  swift_errorRetain(v2);
  v4 = swift_errorRetain(v2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 224);
  if (v7)
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v9 = 138412290;
    swift_errorRetain(v8);
    v11 = _swift_stdlib_bridgeErrorToNSError(v8);
    *(_QWORD *)(v0 + 152) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160);
    *v10 = v11;
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Present Control Center failed %@", v9, 0xCu);
    v12 = sub_100003304(&qword_10010EB00);
    swift_arrayDestroy(v10, 1, v12);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 224));
    swift_errorRelease(v8);
  }
  v13 = *(_QWORD *)(v0 + 224);
  v14 = *(_QWORD *)(v0 + 184);
  v16 = *(void **)(v0 + 168);
  v15 = *(_QWORD *)(v0 + 176);

  v17 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v14, 1, 1, v17);
  sub_1000604E8(v15, v0 + 120);
  v18 = v16;
  v19 = static MainActor.shared.getter(v18);
  v20 = (_QWORD *)swift_allocObject(&unk_1000FED10, 72, 7);
  v20[2] = v19;
  v20[3] = &protocol witness table for MainActor;
  v20[4] = v18;
  sub_100060574(v0 + 120, (uint64_t)(v20 + 5));
  v21 = sub_100028240(v14, (uint64_t)&unk_10010EB48, (uint64_t)v20);
  swift_release(v21);
  swift_errorRelease(v13);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005F530(uint64_t a1, char a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    v5 = sub_100003304(&qword_10010EB50);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else
  {
    **(_BYTE **)(*(_QWORD *)(v3 + 64) + 40) = a2;
    return swift_continuation_throwingResume(v3);
  }
}

uint64_t sub_10005F5B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v4 + 16) = a4;
  v5 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v4 + 24) = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  return swift_task_switch(sub_10005F61C, v6, v7);
}

uint64_t sub_10005F61C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, _TtC13GameOverlayUI20GameOverlayUIService *, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _TtC13GameOverlayUI20GameOverlayUIService *v7;
  uint64_t v8;
  SEL v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;

  v1 = *(_QWORD *)(v0 + 16);
  swift_release(*(_QWORD *)(v0 + 24));
  v2 = OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_gameModeEnabled;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_gameModeEnabled) = (*(_BYTE *)(v1 + OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_gameModeEnabled) & 1) == 0;
  sub_10005D8A0(3.0);
  sub_10005E488();
  v3 = *(void (**)(uint64_t, _TtC13GameOverlayUI20GameOverlayUIService *, uint64_t))(v1
                                                                                            + OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_tapHandler);
  if (v3)
  {
    v4 = *(_QWORD *)(v0 + 16);
    v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_tapHandler + 8);
    v6 = *(_QWORD *)(v4 + OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_bundleIdentifier);
    v7 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(v4
                                                       + OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_bundleIdentifier
                                                       + 8);
    v8 = *(unsigned __int8 *)(v1 + v2);
    sub_10001B3C0((uint64_t)v3, v5);
    swift_bridgeObjectRetain(v7);
    v3(v6, v7, v8);
    sub_100050580((uint64_t)v3, v5);
    swift_bridgeObjectRelease(v7, v9, v10, v11, v12, v13, v14, v15);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10005F75C(uint64_t a1, uint64_t a2, char a3, char a4, char a5)
{
  _BYTE *v5;
  _BYTE *v6;
  _QWORD *v10;
  _TtC13GameOverlayUI20GameOverlayUIService *v11;
  SEL v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  NSString v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t inited;
  uint64_t v37;
  _TtC13GameOverlayUI20GameOverlayUIService *v38;
  Class isa;
  SEL v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  os_log_type_t v51;
  uint8_t *v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  _QWORD *v63;
  void *v64;
  uint64_t v65;
  NSObject *oslog;
  id v67;
  _BYTE v68[56];

  v6 = v5;
  v10 = &v6[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_bundleIdentifier];
  v11 = *(_TtC13GameOverlayUI20GameOverlayUIService **)&v6[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_bundleIdentifier
                                                         + 8];
  *v10 = a1;
  v10[1] = a2;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRelease(v11, v12, v13, v14, v15, v16, v17, v18);
  v6[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_gameModeAvailable] = a3;
  v6[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_gameModeRequired] = a4;
  v6[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_gameModeEnabled] = a5;
  objc_msgSend(v6, "loadViewIfNeeded");
  v19 = String._bridgeToObjectiveC()();
  v20 = objc_msgSend((id)objc_opt_self(BNBannerSource), "bannerSourceForDestination:forRequesterIdentifier:", 0, v19);

  if (v20)
  {
    v21 = *(void **)&v6[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_bannerSource];
    *(_QWORD *)&v6[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_bannerSource] = v20;
    v22 = v20;

    v67 = 0;
    v23 = objc_msgSend(v22, "layoutDescriptionWithError:", &v67);
    v24 = v67;
    if (v23)
    {
      v25 = v23;
      v26 = v67;
      objc_msgSend(v25, "presentationSize");
      v28 = v27;
      v30 = v29;
      objc_msgSend(v25, "containerSize");
      objc_msgSend(v6, "preferredContentSizeWithPresentationSize:containerSize:", v28, v30, v31, v32);
      objc_msgSend(v6, "setPreferredContentSize:");
      v33 = objc_msgSend(v6, "view");
      if (!v33)
      {
        __break(1u);
        return;
      }
      v34 = v33;
      objc_msgSend(v6, "preferredContentSize");
      objc_msgSend(v6, "preferredContentSize");
      objc_msgSend(v34, "setFrame:", sub_1000604D4());

      v35 = sub_100003304(&qword_10010EB08);
      inited = swift_initStackObject(v35, v68);
      *(_OWORD *)(inited + 16) = xmmword_1000C9D90;
      *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSBUIPresentableShouldBypassScreenSharingUserInfoKey);
      *(_QWORD *)(inited + 40) = v37;
      sub_1000509C8(0, (unint64_t *)&qword_10010EB10, NSNumber_ptr);
      *(NSNumber *)(inited + 48) = NSNumber.init(BOOLeanLiteral:)(1);
      v38 = (_TtC13GameOverlayUI20GameOverlayUIService *)sub_10008F984(inited);
      sub_100003304(&qword_10010EB18);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v38, v40, v41, v42, v43, v44, v45, v46);
      v67 = 0;
      LODWORD(v38) = objc_msgSend(v22, "postPresentable:options:userInfo:error:", v6, 1, isa, &v67);

      v47 = v67;
      if ((_DWORD)v38)
      {
        v48 = v67;

        return;
      }
      v56 = v67;
      v54 = _convertNSErrorToError(_:)(v47);

      swift_willThrow(v57);
    }
    else
    {
      v53 = v67;
      v54 = _convertNSErrorToError(_:)(v24);

      swift_willThrow(v55);
    }

    if (qword_10010BAA0 != -1)
      swift_once(&qword_10010BAA0, sub_100004DCC);
    v58 = type metadata accessor for Logger(0);
    sub_100004E8C(v58, (uint64_t)qword_1001232D8);
    swift_errorRetain(v54);
    v59 = swift_errorRetain(v54);
    v60 = Logger.logObject.getter(v59);
    v61 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v60, v61))
    {
      v62 = (uint8_t *)swift_slowAlloc(12, -1);
      v63 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v62 = 138412290;
      swift_errorRetain(v54);
      v64 = (void *)_swift_stdlib_bridgeErrorToNSError(v54);
      v67 = v64;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, v68);
      *v63 = v64;
      swift_errorRelease(v54);
      swift_errorRelease(v54);
      _os_log_impl((void *)&_mh_execute_header, v60, v61, "Game Mode banner present error: %@", v62, 0xCu);
      v65 = sub_100003304(&qword_10010EB00);
      swift_arrayDestroy(v63, 1, v65);
      swift_slowDealloc(v63, -1, -1);
      swift_slowDealloc(v62, -1, -1);

      swift_errorRelease(v54);
    }
    else
    {
      swift_errorRelease(v54);
      swift_errorRelease(v54);
      swift_errorRelease(v54);

    }
  }
  else
  {
    if (qword_10010BAA0 != -1)
      swift_once(&qword_10010BAA0, sub_100004DCC);
    v49 = type metadata accessor for Logger(0);
    v50 = sub_100004E8C(v49, (uint64_t)qword_1001232D8);
    oslog = Logger.logObject.getter(v50);
    v51 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v51))
    {
      v52 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v52 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v51, "No banner source for Game Mode banner", v52, 2u);
      swift_slowDealloc(v52, -1, -1);
    }

  }
}

id sub_10005FFA4(uint64_t a1, _TtC13GameOverlayUI20GameOverlayUIService *a2, void *a3)
{
  _BYTE *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t *v13;
  char *v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSString v20;
  SEL v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  objc_class *v28;
  id v29;
  objc_super v31;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = &v3[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_bundleIdentifier];
  *v10 = 0;
  v10[1] = 0xE000000000000000;
  v3[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_gameModeAvailable] = 0;
  v3[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_gameModeRequired] = 0;
  v3[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_gameModeEnabled] = 0;
  v11 = &v3[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_tapHandler];
  *v11 = 0;
  v11[1] = 0;
  v12 = &v3[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_dismissHandler];
  *v12 = 0;
  v12[1] = 0;
  v13 = (uint64_t *)&v3[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_bannerRequestIdentifier];
  v14 = v3;
  v16 = UUID.init()(v15);
  v17 = UUID.uuidString.getter(v16);
  v19 = v18;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  *v13 = v17;
  v13[1] = v19;
  *(_QWORD *)&v14[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_bannerSource] = 0;
  *(_QWORD *)&v14[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_transaction] = 0;
  *(_QWORD *)&v14[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_pillView] = 0;
  *(_QWORD *)&v14[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_buttonView] = 0;
  *(_QWORD *)&v14[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_titleView] = 0;
  *(_QWORD *)&v14[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_stateView] = 0;
  *(_QWORD *)&v14[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_gestureRecognizer] = 0;
  *(_QWORD *)&v14[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_timer] = 0;

  if (a2)
  {
    v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2, v21, v22, v23, v24, v25, v26, v27);
  }
  else
  {
    v20 = 0;
  }
  v28 = (objc_class *)type metadata accessor for GamePolicyBannerViewController();
  v31.receiver = v14;
  v31.super_class = v28;
  v29 = objc_msgSendSuper2(&v31, "initWithNibName:bundle:", v20, a3);

  return v29;
}

id sub_1000601D4(void *a1)
{
  _BYTE *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t *v10;
  char *v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  objc_class *v17;
  id v18;
  objc_super v20;

  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = &v1[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_bundleIdentifier];
  *v7 = 0;
  v7[1] = 0xE000000000000000;
  v1[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_gameModeAvailable] = 0;
  v1[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_gameModeRequired] = 0;
  v1[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_gameModeEnabled] = 0;
  v8 = &v1[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_tapHandler];
  *v8 = 0;
  v8[1] = 0;
  v9 = &v1[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_dismissHandler];
  *v9 = 0;
  v9[1] = 0;
  v10 = (uint64_t *)&v1[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_bannerRequestIdentifier];
  v11 = v1;
  v13 = UUID.init()(v12);
  v14 = UUID.uuidString.getter(v13);
  v16 = v15;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  *v10 = v14;
  v10[1] = v16;
  *(_QWORD *)&v11[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_bannerSource] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_transaction] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_pillView] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_buttonView] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_titleView] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_stateView] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_gestureRecognizer] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_timer] = 0;

  v17 = (objc_class *)type metadata accessor for GamePolicyBannerViewController();
  v20.receiver = v11;
  v20.super_class = v17;
  v18 = objc_msgSendSuper2(&v20, "initWithCoder:", a1);

  return v18;
}

id sub_100060390()
{
  return sub_10006039C(type metadata accessor for GamePolicyBannerViewController);
}

id sub_10006039C(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t type metadata accessor for GamePolicyBannerViewController()
{
  return objc_opt_self(_TtC13GameOverlayUI30GamePolicyBannerViewController);
}

double sub_1000604D4()
{
  return 0.0;
}

uint64_t sub_1000604E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003304(&qword_10010EB30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100060530()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  if (*(_QWORD *)(v0 + 72))
    sub_100004624((_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_100060574(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003304(&qword_10010EB30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000605BC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_10010EB2C);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_1000252CC;
  return sub_10005F0E8(a1, v4, v5, v6, v7, (uint64_t)(v1 + 6));
}

uint64_t sub_10006063C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  if (*(_QWORD *)(v0 + 64))
    sub_100004624((_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100060678(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10010EB44);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1000263E8;
  return sub_10005F5B0(a1, v4, v5, v6);
}

unint64_t sub_1000606F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010EB70;
  if (!qword_10010EB70)
  {
    type metadata accessor for Key(255);
    result = swift_getWitnessTable(&unk_1000C5670, v1);
    atomic_store(result, (unint64_t *)&qword_10010EB70);
  }
  return result;
}

uint64_t sub_10006073C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_unknownObjectWeakDestroy(v2 + 16, a2);
  return swift_deallocObject(v2, 24, 7);
}

void sub_100060760(uint64_t a1)
{
  uint64_t v1;

  sub_10005D9D0(a1, v1);
}

uint64_t sub_100060768(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_100060778(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

double sub_100060780()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  double result;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_transaction);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_transaction) = 0;
  swift_unknownObjectRelease(v1);
  v2 = *(void **)(v0 + OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_bannerSource);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_bannerSource) = 0;

  v4 = *(void (**)(uint64_t))(v0
                                      + OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_dismissHandler);
  if (v4)
  {
    v5 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_dismissHandler + 8);
    v6 = swift_retain(v5);
    v4(v6);
    return sub_100050580((uint64_t)v4, v5);
  }
  return result;
}

uint64_t sub_1000607F8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100003304(&qword_10010EB30);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for AccessPointDataIntentImplementation()
{
  return &type metadata for AccessPointDataIntentImplementation;
}

unint64_t sub_10006084C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010EBF0;
  if (!qword_10010EBF0)
  {
    v1 = type metadata accessor for AccessPointDataIntent(255);
    result = swift_getWitnessTable(&unk_1000CE780, v1);
    atomic_store(result, (unint64_t *)&qword_10010EBF0);
  }
  return result;
}

uint64_t sub_100060894(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;

  v2[355] = a2;
  v2[349] = a1;
  v3 = type metadata accessor for Game(0);
  v2[356] = v3;
  v2[357] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (*(_QWORD *)(*(_QWORD *)(sub_100003304(&qword_10010EC08) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[358] = swift_task_alloc(v4);
  v2[359] = swift_task_alloc(v4);
  v2[360] = swift_task_alloc(v4);
  return swift_task_switch(sub_100060934, 0, 0);
}

uint64_t sub_100060934()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v1 = (void *)objc_opt_self(GKLocalPlayer);
  v2 = objc_msgSend(v1, "currentLocalPlayer");
  if (!v2)
    v2 = objc_msgSend(v1, "local");
  *(_QWORD *)(v0 + 2888) = v2;
  v3 = *(_QWORD *)(v0 + 2840);
  v4 = *(int *)(type metadata accessor for AccessPointDataIntent(0) + 28);
  *(_DWORD *)(v0 + 2604) = v4;
  v5 = (uint64_t *)(v3 + v4);
  v6 = *v5;
  v7 = v5[1];
  v8 = (_QWORD *)swift_task_alloc(48);
  *(_QWORD *)(v0 + 2896) = v8;
  v8[2] = v2;
  v8[3] = v6;
  v8[4] = v7;
  v9 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 2904) = v9;
  v10 = sub_1000509C8(0, &qword_10010E358, GKGame_ptr);
  *v9 = v0;
  v9[1] = sub_100060A60;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 2744, 0, 0, 0xD000000000000014, 0x80000001000D0680, sub_100063654, v8, v10);
}

uint64_t sub_100060A60()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 2904);
  *(_QWORD *)(*v1 + 2912) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100060FE0;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 2896));
    v4 = sub_100060ACC;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100060ACC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t *v26;
  void *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v1 = *(_QWORD *)(v0 + 2848);
  v2 = *(_QWORD *)(v0 + 2840) + *(int *)(v0 + 2604);
  v3 = *(void **)(v0 + 2744);
  v4 = objc_msgSend(v3, "internal");
  objc_msgSend(v4, "setIsArcadeGame:", *(unsigned __int8 *)(v2 + *(int *)(v1 + 40)));

  *(_QWORD *)(v0 + 2920) = v3;
  if (*(_BYTE *)(*(_QWORD *)(v0 + 2840) + 1) == 1
    && objc_msgSend(*(id *)(v0 + 2888), "isAuthenticated"))
  {
    if (v3)
    {
      v5 = *(void **)(v0 + 2888);
      v6 = swift_allocObject(&unk_1000FEDA8, 32, 7);
      *(_QWORD *)(v0 + 2928) = v6;
      *(_QWORD *)(v6 + 16) = v3;
      *(_QWORD *)(v6 + 24) = v5;
      v7 = v3;
      v8 = v5;
      swift_retain(v6);
      v9 = sub_100006E54(&qword_10010EC20);
      swift_asyncLet_begin(v0 + 16, 0, v9, &unk_10010EC18, v6, v0 + 2584);
      v10 = swift_allocObject(&unk_1000FEDD0, 32, 7);
      *(_QWORD *)(v0 + 2936) = v10;
      *(_QWORD *)(v10 + 16) = v7;
      *(_QWORD *)(v10 + 24) = v8;
      v11 = v7;
      v12 = v8;
      swift_retain(v10);
      v13 = sub_100006E54(&qword_10010EC38);
      swift_asyncLet_begin(v0 + 1296, 0, v13, &unk_10010EC30, v10, v0 + 2552);
      v14 = swift_allocObject(&unk_1000FEDF8, 32, 7);
      *(_QWORD *)(v0 + 2944) = v14;
      *(_QWORD *)(v14 + 16) = v11;
      *(_QWORD *)(v14 + 24) = v12;
      v15 = v11;
      v16 = v12;
      swift_retain(v14);
      v17 = sub_100006E54(&qword_10010EC50);
      swift_asyncLet_begin(v0 + 656, 0, v17, &unk_10010EC48, v14, v0 + 2696);
      return swift_asyncLet_get_throwing(v0 + 16, v0 + 2584, sub_1000612A8, v0 + 2320);
    }
    goto LABEL_11;
  }
  if (!v3)
  {
LABEL_11:
    if (qword_10010BAA0 != -1)
      swift_once(&qword_10010BAA0, sub_100004DCC);
    v24 = type metadata accessor for Logger(0);
    v25 = sub_100004E8C(v24, (uint64_t)qword_1001232D8);
    v21 = Logger.logObject.getter(v25);
    v22 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v21, v22))
      goto LABEL_16;
    v23 = "Unexpectedly found a nil GKGame.";
LABEL_15:
    v26 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, v23, v26, 2u);
    swift_slowDealloc(v26, -1, -1);
LABEL_16:

    goto LABEL_17;
  }
  if ((objc_msgSend(*(id *)(v0 + 2888), "isAuthenticated") & 1) == 0)
  {
    if (qword_10010BAA0 != -1)
      swift_once(&qword_10010BAA0, sub_100004DCC);
    v19 = type metadata accessor for Logger(0);
    v20 = sub_100004E8C(v19, (uint64_t)qword_1001232D8);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v21, v22))
      goto LABEL_16;
    v23 = "Current player is not authenticated.";
    goto LABEL_15;
  }
LABEL_17:
  v27 = *(void **)(v0 + 2888);
  v28 = *(char **)(v0 + 2840);
  v29 = *(_QWORD *)(v0 + 2792);
  v30 = (uint64_t)&v28[*(int *)(v0 + 2604)];
  v31 = *v28;
  v32 = *(_OWORD *)(v28 + 24);
  *(_OWORD *)(v0 + 2168) = *(_OWORD *)(v28 + 8);
  *(_OWORD *)(v0 + 2184) = v32;
  v33 = *(_OWORD *)(v28 + 56);
  v34 = *(_OWORD *)(v28 + 88);
  v35 = *(_OWORD *)(v28 + 40);
  *(_OWORD *)(v0 + 2232) = *(_OWORD *)(v28 + 72);
  *(_OWORD *)(v0 + 2248) = v34;
  *(_OWORD *)(v0 + 2200) = v35;
  *(_OWORD *)(v0 + 2216) = v33;
  v36 = *(_OWORD *)(v28 + 120);
  v37 = *(_OWORD *)(v28 + 136);
  v38 = *(_OWORD *)(v28 + 104);
  *(_QWORD *)(v0 + 2312) = *((_QWORD *)v28 + 19);
  *(_OWORD *)(v0 + 2280) = v36;
  *(_OWORD *)(v0 + 2296) = v37;
  *(_OWORD *)(v0 + 2264) = v38;
  v39 = (int *)type metadata accessor for AccessPointRequiredData(0);
  sub_100063660(v30, v29 + v39[6]);
  sub_100019FF0((_QWORD *)(v0 + 2168));
  LOBYTE(v30) = objc_msgSend(v27, "isAuthenticated");

  v40 = v29 + v39[17];
  v41 = type metadata accessor for MediaArtwork(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v40, 1, 1, v41);
  *(_BYTE *)v29 = v31;
  v42 = *(_OWORD *)(v0 + 2168);
  *(_OWORD *)(v29 + 24) = *(_OWORD *)(v0 + 2184);
  *(_OWORD *)(v29 + 8) = v42;
  v43 = *(_OWORD *)(v0 + 2200);
  v44 = *(_OWORD *)(v0 + 2216);
  v45 = *(_OWORD *)(v0 + 2232);
  *(_OWORD *)(v29 + 88) = *(_OWORD *)(v0 + 2248);
  *(_OWORD *)(v29 + 72) = v45;
  *(_OWORD *)(v29 + 56) = v44;
  *(_OWORD *)(v29 + 40) = v43;
  v46 = *(_OWORD *)(v0 + 2264);
  v47 = *(_OWORD *)(v0 + 2280);
  v48 = *(_OWORD *)(v0 + 2296);
  *(_QWORD *)(v29 + 152) = *(_QWORD *)(v0 + 2312);
  *(_OWORD *)(v29 + 136) = v48;
  *(_OWORD *)(v29 + 120) = v47;
  *(_OWORD *)(v29 + 104) = v46;
  *(_BYTE *)(v29 + v39[7]) = v30;
  *(_QWORD *)(v29 + v39[8]) = 0;
  *(_QWORD *)(v29 + v39[9]) = 0;
  *(_QWORD *)(v29 + v39[10]) = 0;
  *(_QWORD *)(v29 + v39[11]) = 0;
  *(_QWORD *)(v29 + v39[12]) = 0;
  v49 = (_QWORD *)(v29 + v39[13]);
  *v49 = 0;
  v49[1] = 0;
  *(_QWORD *)(v29 + v39[14]) = 0;
  *(_QWORD *)(v29 + v39[15]) = 0;
  v50 = (_QWORD *)(v29 + v39[16]);
  *v50 = 0;
  v50[1] = 0;
  v51 = (_QWORD *)(v29 + v39[18]);
  *v51 = 0;
  v51[1] = 0;
  v52 = (_QWORD *)(v29 + v39[19]);
  *v52 = 0;
  v52[1] = 0;
  v53 = *(_QWORD *)(v0 + 2872);
  v54 = *(_QWORD *)(v0 + 2864);
  v55 = *(_QWORD *)(v0 + 2856);
  swift_task_dealloc(*(_QWORD *)(v0 + 2880));
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100060FE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  void *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v1 = *(_QWORD *)(v0 + 2896);
  swift_errorRelease(*(_QWORD *)(v0 + 2912));
  swift_task_dealloc(v1);
  *(_QWORD *)(v0 + 2920) = 0;
  if (*(_BYTE *)(*(_QWORD *)(v0 + 2840) + 1) == 1)
    objc_msgSend(*(id *)(v0 + 2888), "isAuthenticated");
  if (qword_10010BAA0 != -1)
    swift_once(&qword_10010BAA0, sub_100004DCC);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100004E8C(v2, (uint64_t)qword_1001232D8);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Unexpectedly found a nil GKGame.", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = *(void **)(v0 + 2888);
  v8 = *(char **)(v0 + 2840);
  v9 = *(_QWORD *)(v0 + 2792);
  v10 = (uint64_t)&v8[*(int *)(v0 + 2604)];
  v11 = *v8;
  v12 = *(_OWORD *)(v8 + 24);
  *(_OWORD *)(v0 + 2168) = *(_OWORD *)(v8 + 8);
  *(_OWORD *)(v0 + 2184) = v12;
  v13 = *(_OWORD *)(v8 + 56);
  v14 = *(_OWORD *)(v8 + 88);
  v15 = *(_OWORD *)(v8 + 40);
  *(_OWORD *)(v0 + 2232) = *(_OWORD *)(v8 + 72);
  *(_OWORD *)(v0 + 2248) = v14;
  *(_OWORD *)(v0 + 2200) = v15;
  *(_OWORD *)(v0 + 2216) = v13;
  v16 = *(_OWORD *)(v8 + 120);
  v17 = *(_OWORD *)(v8 + 136);
  v18 = *(_OWORD *)(v8 + 104);
  *(_QWORD *)(v0 + 2312) = *((_QWORD *)v8 + 19);
  *(_OWORD *)(v0 + 2280) = v16;
  *(_OWORD *)(v0 + 2296) = v17;
  *(_OWORD *)(v0 + 2264) = v18;
  v19 = (int *)type metadata accessor for AccessPointRequiredData(0);
  sub_100063660(v10, v9 + v19[6]);
  sub_100019FF0((_QWORD *)(v0 + 2168));
  LOBYTE(v10) = objc_msgSend(v7, "isAuthenticated");

  v20 = v9 + v19[17];
  v21 = type metadata accessor for MediaArtwork(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  *(_BYTE *)v9 = v11;
  v22 = *(_OWORD *)(v0 + 2168);
  *(_OWORD *)(v9 + 24) = *(_OWORD *)(v0 + 2184);
  *(_OWORD *)(v9 + 8) = v22;
  v23 = *(_OWORD *)(v0 + 2200);
  v24 = *(_OWORD *)(v0 + 2216);
  v25 = *(_OWORD *)(v0 + 2232);
  *(_OWORD *)(v9 + 88) = *(_OWORD *)(v0 + 2248);
  *(_OWORD *)(v9 + 72) = v25;
  *(_OWORD *)(v9 + 56) = v24;
  *(_OWORD *)(v9 + 40) = v23;
  v26 = *(_OWORD *)(v0 + 2264);
  v27 = *(_OWORD *)(v0 + 2280);
  v28 = *(_OWORD *)(v0 + 2296);
  *(_QWORD *)(v9 + 152) = *(_QWORD *)(v0 + 2312);
  *(_OWORD *)(v9 + 136) = v28;
  *(_OWORD *)(v9 + 120) = v27;
  *(_OWORD *)(v9 + 104) = v26;
  *(_BYTE *)(v9 + v19[7]) = v10;
  *(_QWORD *)(v9 + v19[8]) = 0;
  *(_QWORD *)(v9 + v19[9]) = 0;
  *(_QWORD *)(v9 + v19[10]) = 0;
  *(_QWORD *)(v9 + v19[11]) = 0;
  *(_QWORD *)(v9 + v19[12]) = 0;
  v29 = (_QWORD *)(v9 + v19[13]);
  *v29 = 0;
  v29[1] = 0;
  *(_QWORD *)(v9 + v19[14]) = 0;
  *(_QWORD *)(v9 + v19[15]) = 0;
  v30 = (_QWORD *)(v9 + v19[16]);
  *v30 = 0;
  v30[1] = 0;
  v31 = (_QWORD *)(v9 + v19[18]);
  *v31 = 0;
  v31[1] = 0;
  v32 = (_QWORD *)(v9 + v19[19]);
  *v32 = 0;
  v32[1] = 0;
  v33 = *(_QWORD *)(v0 + 2872);
  v34 = *(_QWORD *)(v0 + 2864);
  v35 = *(_QWORD *)(v0 + 2856);
  swift_task_dealloc(*(_QWORD *)(v0 + 2880));
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000612A8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 2952) = v0;
  if (v0)
    return swift_task_switch(sub_100061AA0, 0, 0);
  *(_OWORD *)(v1 + 2960) = *(_OWORD *)(v1 + 2584);
  *(_BYTE *)(v1 + 2601) = *(_BYTE *)(v1 + 2600);
  return swift_asyncLet_get_throwing(v1 + 1296, v1 + 2552, sub_1000612F0, v1 + 2800);
}

uint64_t sub_1000612F0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1[372] = v0;
  if (v0)
    return swift_task_switch(sub_100061DE0, 0, 0);
  v3 = v1[319];
  v1[373] = v3;
  v4 = v1[320];
  v1[374] = v4;
  v5 = v1[321];
  v1[375] = v5;
  v6 = v1[322];
  v1[376] = v6;
  sub_100063B78(v3, v4, v5, v6);
  return swift_asyncLet_get_throwing(v1 + 82, v1 + 337, sub_10006138C, v1 + 314);
}

uint64_t sub_10006138C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  *(_QWORD *)(v1 + 3016) = v0;
  if (v0)
    v2 = sub_100062120;
  else
    v2 = sub_1000613B4;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000613B4()
{
  uint64_t v0;
  _OWORD *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  double v13;
  double v14;
  id v15;
  double v16;
  double v17;
  const char *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  id v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  int *v65;
  _QWORD *v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t *v69;
  __n128 v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;

  v1 = (_OWORD *)(v0 + 1976);
  v2 = *(_QWORD *)(v0 + 2880);
  v3 = *(void **)(v0 + 2696);
  v4 = type metadata accessor for MediaArtwork(0);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56);
  v5(v2, 1, 1, v4);
  if (v3)
  {
    v83 = *(_QWORD *)(v0 + 2880);
    v6 = *(_QWORD *)(v0 + 2872);
    v7 = v3;
    v8 = objc_msgSend(v7, "artwork");
    v9 = objc_msgSend(v8, "URLTemplate");

    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v81 = v11;

    v12 = objc_msgSend(v7, "artwork");
    objc_msgSend(v12, "width");
    v14 = v13;

    v15 = objc_msgSend(v7, "artwork");
    objc_msgSend(v15, "height");
    v17 = v16;

    v25 = sub_100063804(&_swiftEmptyArrayStorage, v18, v19, v20, v21, v22, v23, v24);
    MediaArtwork.init(urlTemplate:sourceImageSize:colors:)(v10, v81, v25, v14, v17);

    sub_100063BE8(v83);
    v5(v6, 0, 1, v4);
    sub_100063C28(v6, v83);
  }
  v26 = *(_QWORD *)(v0 + 3008);
  v27 = *(unsigned __int8 *)(v0 + 2601);
  v28 = *(_QWORD *)(v0 + 2968);
  v29 = *(_QWORD *)(v0 + 2960);
  v30 = *(void **)(v0 + 2920);
  v31 = *(_QWORD *)(v0 + 2856);
  v32 = *(char **)(v0 + 2840);
  v33 = (uint64_t)&v32[*(int *)(v0 + 2604)];
  v82 = *v32;
  v34 = *(_OWORD *)(v32 + 24);
  *v1 = *(_OWORD *)(v32 + 8);
  *(_OWORD *)(v0 + 1992) = v34;
  v35 = *(_OWORD *)(v32 + 56);
  v36 = *(_OWORD *)(v32 + 88);
  v37 = *(_OWORD *)(v32 + 40);
  *(_OWORD *)(v0 + 2040) = *(_OWORD *)(v32 + 72);
  *(_OWORD *)(v0 + 2056) = v36;
  *(_OWORD *)(v0 + 2008) = v37;
  *(_OWORD *)(v0 + 2024) = v35;
  v38 = *(_OWORD *)(v32 + 120);
  v39 = *(_OWORD *)(v32 + 136);
  v40 = *(_OWORD *)(v32 + 104);
  *(_QWORD *)(v0 + 2120) = *((_QWORD *)v32 + 19);
  *(_OWORD *)(v0 + 2088) = v38;
  *(_OWORD *)(v0 + 2104) = v39;
  *(_OWORD *)(v0 + 2072) = v40;
  sub_100063660(v33, v31);
  sub_100019FF0((_QWORD *)(v0 + 1976));
  objc_msgSend(v30, "gameInfo");
  if (v26 == 1)
  {
    v74 = 0;
    v75 = 0;
    v72 = 0;
    v73 = 0;
  }
  else
  {
    v73 = *(_QWORD *)(v0 + 3000);
    v74 = *(_QWORD *)(v0 + 3008);
    v75 = *(_QWORD *)(v0 + 2992);
    v72 = *(_QWORD *)(v0 + 2984);
  }
  v41 = *(_QWORD *)(v0 + 2880);
  v42 = *(_QWORD *)(v0 + 2864);
  if (v3)
  {
    v43 = v29;
    v44 = objc_msgSend(v3, "adamID");
    v45 = objc_msgSend(v44, "stringValue");

    v29 = v43;
    v79 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
    v80 = v46;

    sub_100063BA0(v41, v42);
    v47 = objc_msgSend(v3, "title");
    v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
    v77 = v49;
    v78 = v48;

    v50 = objc_msgSend(v3, "subtitle");
    v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
    v52 = v51;

  }
  else
  {
    sub_100063BA0(*(_QWORD *)(v0 + 2880), *(_QWORD *)(v0 + 2864));
    v79 = 0;
    v80 = 0;
    v76 = 0;
    v77 = 0;
    v52 = 0;
    v78 = 0;
  }
  v53 = v27 == 0;
  if (v27)
    v54 = 0;
  else
    v54 = v29;
  if (!v53)
    v28 = 0;
  v55 = *(_QWORD *)(v0 + 2864);
  v56 = *(_QWORD *)(v0 + 2856);
  v57 = *(_QWORD *)(v0 + 2792);
  sub_100063BE8(*(_QWORD *)(v0 + 2880));
  *(_BYTE *)v57 = v82;
  v58 = *(_OWORD *)(v0 + 1992);
  *(_OWORD *)(v57 + 8) = *v1;
  *(_OWORD *)(v57 + 24) = v58;
  v59 = *(_OWORD *)(v0 + 2040);
  v60 = *(_OWORD *)(v0 + 2056);
  v61 = *(_OWORD *)(v0 + 2024);
  *(_OWORD *)(v57 + 40) = *(_OWORD *)(v0 + 2008);
  *(_OWORD *)(v57 + 88) = v60;
  *(_OWORD *)(v57 + 72) = v59;
  *(_OWORD *)(v57 + 56) = v61;
  v63 = *(_OWORD *)(v0 + 2088);
  v62 = *(_OWORD *)(v0 + 2104);
  v64 = *(_QWORD *)(v0 + 2120);
  *(_OWORD *)(v57 + 104) = *(_OWORD *)(v0 + 2072);
  *(_QWORD *)(v57 + 152) = v64;
  *(_OWORD *)(v57 + 136) = v62;
  *(_OWORD *)(v57 + 120) = v63;
  v65 = (int *)type metadata accessor for AccessPointRequiredData(0);
  sub_100010F0C(v56, v57 + v65[6], type metadata accessor for Game);
  *(_BYTE *)(v57 + v65[7]) = 1;
  *(_QWORD *)(v57 + v65[8]) = 0;
  *(_QWORD *)(v57 + v65[9]) = 0;
  *(_QWORD *)(v57 + v65[10]) = v54;
  *(_QWORD *)(v57 + v65[11]) = v28;
  *(_QWORD *)(v57 + v65[12]) = v84;
  v66 = (_QWORD *)(v57 + v65[13]);
  *v66 = v73;
  v66[1] = v74;
  *(_QWORD *)(v57 + v65[14]) = v72;
  *(_QWORD *)(v57 + v65[15]) = v75;
  v67 = (uint64_t *)(v57 + v65[16]);
  *v67 = v79;
  v67[1] = v80;
  sub_100063C28(v55, v57 + v65[17]);
  v68 = (uint64_t *)(v57 + v65[18]);
  *v68 = v78;
  v68[1] = v77;
  v69 = (uint64_t *)(v57 + v65[19]);
  *v69 = v76;
  v69[1] = v52;
  return swift_asyncLet_finish(v0 + 656, v0 + 2696, sub_100061848, v0 + 2752, v70);
}

uint64_t sub_100061848()
{
  return swift_task_switch(sub_10006185C, 0, 0);
}

uint64_t sub_10006185C()
{
  uint64_t v0;
  __n128 v1;

  v1 = swift_release(*(_QWORD *)(v0 + 2944));
  return swift_asyncLet_finish(v0 + 1296, v0 + 2552, sub_1000618B0, v0 + 2608, v1);
}

uint64_t sub_1000618B0()
{
  return swift_task_switch(sub_1000618C4, 0, 0);
}

uint64_t sub_1000618C4()
{
  uint64_t v0;
  __n128 v1;

  v1 = swift_release(*(_QWORD *)(v0 + 2936));
  return swift_asyncLet_finish(v0 + 16, v0 + 2584, sub_100061918, v0 + 1936, v1);
}

uint64_t sub_100061918()
{
  return swift_task_switch(sub_10006192C, 0, 0);
}

uint64_t sub_10006192C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 2944);
  v2 = *(_QWORD *)(v0 + 2936);
  v3 = *(_QWORD *)(v0 + 2928);
  v4 = *(void **)(v0 + 2920);
  v5 = *(void **)(v0 + 2888);

  swift_release_n(v3, 2);
  swift_release(v2);
  swift_release(v1);
  v6 = *(_QWORD *)(v0 + 2872);
  v7 = *(_QWORD *)(v0 + 2864);
  v8 = *(_QWORD *)(v0 + 2856);
  swift_task_dealloc(*(_QWORD *)(v0 + 2880));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000619D0()
{
  return swift_task_switch(sub_1000619E4, 0, 0);
}

uint64_t sub_1000619E4()
{
  uint64_t v0;
  __n128 v1;

  v1 = swift_release(*(_QWORD *)(v0 + 2944));
  return swift_asyncLet_finish(v0 + 1296, v0 + 2552, sub_100061A38, v0 + 2656, v1);
}

uint64_t sub_100061A38()
{
  return swift_task_switch(sub_100061A4C, 0, 0);
}

uint64_t sub_100061A4C()
{
  uint64_t v0;
  __n128 v1;

  v1 = swift_release(*(_QWORD *)(v0 + 2936));
  return swift_asyncLet_finish(v0 + 16, v0 + 2584, sub_100061918, v0 + 2128, v1);
}

uint64_t sub_100061AA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  __n128 v35;

  v1 = *(_QWORD *)(v0 + 2952);
  if (qword_10010BAA0 != -1)
    swift_once(&qword_10010BAA0, sub_100004DCC);
  v2 = type metadata accessor for Logger(0);
  sub_100004E8C(v2, (uint64_t)qword_1001232D8);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138412290;
    swift_errorRetain(v1);
    v8 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 2648) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2648, v0 + 2656);
    *v7 = v8;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error retrieving highlights: %@", v6, 0xCu);
    v9 = sub_100003304(&qword_10010EB00);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v10 = *(char **)(v0 + 2840);
  v11 = *(_QWORD *)(v0 + 2792);
  v12 = (uint64_t)&v10[*(int *)(v0 + 2604)];
  v13 = *v10;
  v14 = *(_OWORD *)(v10 + 24);
  *(_OWORD *)(v0 + 2360) = *(_OWORD *)(v10 + 8);
  *(_OWORD *)(v0 + 2376) = v14;
  v15 = *(_OWORD *)(v10 + 56);
  v16 = *(_OWORD *)(v10 + 88);
  v17 = *(_OWORD *)(v10 + 40);
  *(_OWORD *)(v0 + 2424) = *(_OWORD *)(v10 + 72);
  *(_OWORD *)(v0 + 2440) = v16;
  *(_OWORD *)(v0 + 2392) = v17;
  *(_OWORD *)(v0 + 2408) = v15;
  v18 = *(_OWORD *)(v10 + 120);
  v19 = *(_OWORD *)(v10 + 136);
  v20 = *(_OWORD *)(v10 + 104);
  *(_QWORD *)(v0 + 2504) = *((_QWORD *)v10 + 19);
  *(_OWORD *)(v0 + 2472) = v18;
  *(_OWORD *)(v0 + 2488) = v19;
  *(_OWORD *)(v0 + 2456) = v20;
  v21 = (int *)type metadata accessor for AccessPointRequiredData(0);
  sub_100063660(v12, v11 + v21[6]);
  v22 = v11 + v21[17];
  v23 = type metadata accessor for MediaArtwork(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v22, 1, 1, v23);
  *(_BYTE *)v11 = v13;
  v24 = *(_OWORD *)(v0 + 2360);
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(v0 + 2376);
  *(_OWORD *)(v11 + 8) = v24;
  v25 = *(_OWORD *)(v0 + 2392);
  v26 = *(_OWORD *)(v0 + 2408);
  v27 = *(_OWORD *)(v0 + 2424);
  *(_OWORD *)(v11 + 88) = *(_OWORD *)(v0 + 2440);
  *(_OWORD *)(v11 + 72) = v27;
  *(_OWORD *)(v11 + 56) = v26;
  *(_OWORD *)(v11 + 40) = v25;
  v28 = *(_OWORD *)(v0 + 2456);
  v29 = *(_OWORD *)(v0 + 2472);
  v30 = *(_OWORD *)(v0 + 2488);
  *(_QWORD *)(v11 + 152) = *(_QWORD *)(v0 + 2504);
  *(_OWORD *)(v11 + 136) = v30;
  *(_OWORD *)(v11 + 120) = v29;
  *(_OWORD *)(v11 + 104) = v28;
  *(_BYTE *)(v11 + v21[7]) = 1;
  *(_QWORD *)(v11 + v21[8]) = 0;
  *(_QWORD *)(v11 + v21[9]) = 0;
  *(_QWORD *)(v11 + v21[10]) = 0;
  *(_QWORD *)(v11 + v21[11]) = 0;
  *(_QWORD *)(v11 + v21[12]) = 0;
  v31 = (_QWORD *)(v11 + v21[13]);
  *v31 = 0;
  v31[1] = 0;
  *(_QWORD *)(v11 + v21[14]) = 0;
  *(_QWORD *)(v11 + v21[15]) = 0;
  v32 = (_QWORD *)(v11 + v21[16]);
  *v32 = 0;
  v32[1] = 0;
  v33 = (_QWORD *)(v11 + v21[18]);
  *v33 = 0;
  v33[1] = 0;
  v34 = (_QWORD *)(v11 + v21[19]);
  *v34 = 0;
  v34[1] = 0;
  sub_100019FF0((_QWORD *)(v0 + 2360));
  return swift_asyncLet_finish(v0 + 656, v0 + 2696, sub_1000619D0, v0 + 2704, v35);
}

uint64_t sub_100061DE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  __n128 v35;

  v1 = *(_QWORD *)(v0 + 2976);
  if (qword_10010BAA0 != -1)
    swift_once(&qword_10010BAA0, sub_100004DCC);
  v2 = type metadata accessor for Logger(0);
  sub_100004E8C(v2, (uint64_t)qword_1001232D8);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138412290;
    swift_errorRetain(v1);
    v8 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 2648) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2648, v0 + 2656);
    *v7 = v8;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error retrieving highlights: %@", v6, 0xCu);
    v9 = sub_100003304(&qword_10010EB00);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v10 = *(char **)(v0 + 2840);
  v11 = *(_QWORD *)(v0 + 2792);
  v12 = (uint64_t)&v10[*(int *)(v0 + 2604)];
  v13 = *v10;
  v14 = *(_OWORD *)(v10 + 24);
  *(_OWORD *)(v0 + 2360) = *(_OWORD *)(v10 + 8);
  *(_OWORD *)(v0 + 2376) = v14;
  v15 = *(_OWORD *)(v10 + 56);
  v16 = *(_OWORD *)(v10 + 88);
  v17 = *(_OWORD *)(v10 + 40);
  *(_OWORD *)(v0 + 2424) = *(_OWORD *)(v10 + 72);
  *(_OWORD *)(v0 + 2440) = v16;
  *(_OWORD *)(v0 + 2392) = v17;
  *(_OWORD *)(v0 + 2408) = v15;
  v18 = *(_OWORD *)(v10 + 120);
  v19 = *(_OWORD *)(v10 + 136);
  v20 = *(_OWORD *)(v10 + 104);
  *(_QWORD *)(v0 + 2504) = *((_QWORD *)v10 + 19);
  *(_OWORD *)(v0 + 2472) = v18;
  *(_OWORD *)(v0 + 2488) = v19;
  *(_OWORD *)(v0 + 2456) = v20;
  v21 = (int *)type metadata accessor for AccessPointRequiredData(0);
  sub_100063660(v12, v11 + v21[6]);
  v22 = v11 + v21[17];
  v23 = type metadata accessor for MediaArtwork(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v22, 1, 1, v23);
  *(_BYTE *)v11 = v13;
  v24 = *(_OWORD *)(v0 + 2360);
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(v0 + 2376);
  *(_OWORD *)(v11 + 8) = v24;
  v25 = *(_OWORD *)(v0 + 2392);
  v26 = *(_OWORD *)(v0 + 2408);
  v27 = *(_OWORD *)(v0 + 2424);
  *(_OWORD *)(v11 + 88) = *(_OWORD *)(v0 + 2440);
  *(_OWORD *)(v11 + 72) = v27;
  *(_OWORD *)(v11 + 56) = v26;
  *(_OWORD *)(v11 + 40) = v25;
  v28 = *(_OWORD *)(v0 + 2456);
  v29 = *(_OWORD *)(v0 + 2472);
  v30 = *(_OWORD *)(v0 + 2488);
  *(_QWORD *)(v11 + 152) = *(_QWORD *)(v0 + 2504);
  *(_OWORD *)(v11 + 136) = v30;
  *(_OWORD *)(v11 + 120) = v29;
  *(_OWORD *)(v11 + 104) = v28;
  *(_BYTE *)(v11 + v21[7]) = 1;
  *(_QWORD *)(v11 + v21[8]) = 0;
  *(_QWORD *)(v11 + v21[9]) = 0;
  *(_QWORD *)(v11 + v21[10]) = 0;
  *(_QWORD *)(v11 + v21[11]) = 0;
  *(_QWORD *)(v11 + v21[12]) = 0;
  v31 = (_QWORD *)(v11 + v21[13]);
  *v31 = 0;
  v31[1] = 0;
  *(_QWORD *)(v11 + v21[14]) = 0;
  *(_QWORD *)(v11 + v21[15]) = 0;
  v32 = (_QWORD *)(v11 + v21[16]);
  *v32 = 0;
  v32[1] = 0;
  v33 = (_QWORD *)(v11 + v21[18]);
  *v33 = 0;
  v33[1] = 0;
  v34 = (_QWORD *)(v11 + v21[19]);
  *v34 = 0;
  v34[1] = 0;
  sub_100019FF0((_QWORD *)(v0 + 2360));
  return swift_asyncLet_finish(v0 + 656, v0 + 2696, sub_1000619D0, v0 + 2704, v35);
}

uint64_t sub_100062120()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  __n128 v35;

  sub_100063B8C(*(_QWORD *)(v0 + 2984), *(_QWORD *)(v0 + 2992), *(_QWORD *)(v0 + 3000), *(_QWORD *)(v0 + 3008));
  v1 = *(_QWORD *)(v0 + 3016);
  if (qword_10010BAA0 != -1)
    swift_once(&qword_10010BAA0, sub_100004DCC);
  v2 = type metadata accessor for Logger(0);
  sub_100004E8C(v2, (uint64_t)qword_1001232D8);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138412290;
    swift_errorRetain(v1);
    v8 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 2648) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2648, v0 + 2656);
    *v7 = v8;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error retrieving highlights: %@", v6, 0xCu);
    v9 = sub_100003304(&qword_10010EB00);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v10 = *(char **)(v0 + 2840);
  v11 = *(_QWORD *)(v0 + 2792);
  v12 = (uint64_t)&v10[*(int *)(v0 + 2604)];
  v13 = *v10;
  v14 = *(_OWORD *)(v10 + 24);
  *(_OWORD *)(v0 + 2360) = *(_OWORD *)(v10 + 8);
  *(_OWORD *)(v0 + 2376) = v14;
  v15 = *(_OWORD *)(v10 + 56);
  v16 = *(_OWORD *)(v10 + 88);
  v17 = *(_OWORD *)(v10 + 40);
  *(_OWORD *)(v0 + 2424) = *(_OWORD *)(v10 + 72);
  *(_OWORD *)(v0 + 2440) = v16;
  *(_OWORD *)(v0 + 2392) = v17;
  *(_OWORD *)(v0 + 2408) = v15;
  v18 = *(_OWORD *)(v10 + 120);
  v19 = *(_OWORD *)(v10 + 136);
  v20 = *(_OWORD *)(v10 + 104);
  *(_QWORD *)(v0 + 2504) = *((_QWORD *)v10 + 19);
  *(_OWORD *)(v0 + 2472) = v18;
  *(_OWORD *)(v0 + 2488) = v19;
  *(_OWORD *)(v0 + 2456) = v20;
  v21 = (int *)type metadata accessor for AccessPointRequiredData(0);
  sub_100063660(v12, v11 + v21[6]);
  v22 = v11 + v21[17];
  v23 = type metadata accessor for MediaArtwork(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v22, 1, 1, v23);
  *(_BYTE *)v11 = v13;
  v24 = *(_OWORD *)(v0 + 2360);
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(v0 + 2376);
  *(_OWORD *)(v11 + 8) = v24;
  v25 = *(_OWORD *)(v0 + 2392);
  v26 = *(_OWORD *)(v0 + 2408);
  v27 = *(_OWORD *)(v0 + 2424);
  *(_OWORD *)(v11 + 88) = *(_OWORD *)(v0 + 2440);
  *(_OWORD *)(v11 + 72) = v27;
  *(_OWORD *)(v11 + 56) = v26;
  *(_OWORD *)(v11 + 40) = v25;
  v28 = *(_OWORD *)(v0 + 2456);
  v29 = *(_OWORD *)(v0 + 2472);
  v30 = *(_OWORD *)(v0 + 2488);
  *(_QWORD *)(v11 + 152) = *(_QWORD *)(v0 + 2504);
  *(_OWORD *)(v11 + 136) = v30;
  *(_OWORD *)(v11 + 120) = v29;
  *(_OWORD *)(v11 + 104) = v28;
  *(_BYTE *)(v11 + v21[7]) = 1;
  *(_QWORD *)(v11 + v21[8]) = 0;
  *(_QWORD *)(v11 + v21[9]) = 0;
  *(_QWORD *)(v11 + v21[10]) = 0;
  *(_QWORD *)(v11 + v21[11]) = 0;
  *(_QWORD *)(v11 + v21[12]) = 0;
  v31 = (_QWORD *)(v11 + v21[13]);
  *v31 = 0;
  v31[1] = 0;
  *(_QWORD *)(v11 + v21[14]) = 0;
  *(_QWORD *)(v11 + v21[15]) = 0;
  v32 = (_QWORD *)(v11 + v21[16]);
  *v32 = 0;
  v32[1] = 0;
  v33 = (_QWORD *)(v11 + v21[18]);
  *v33 = 0;
  v33[1] = 0;
  v34 = (_QWORD *)(v11 + v21[19]);
  *v34 = 0;
  v34[1] = 0;
  sub_100019FF0((_QWORD *)(v0 + 2360));
  return swift_asyncLet_finish(v0 + 656, v0 + 2696, sub_1000619D0, v0 + 2704, v35);
}

uint64_t sub_100062474(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  return swift_task_switch(sub_100062490, 0, 0);
}

uint64_t sub_100062490()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 64) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 48);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 72) = v2;
  v3 = sub_100003304(&qword_10010EC20);
  *v2 = v0;
  v2[1] = sub_100062540;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0xD00000000000002ALL, 0x80000001000D07A0, sub_100063D44, v1, v3);
}

uint64_t sub_100062540()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 72);
  *(_QWORD *)(*v1 + 80) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000625CC;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 64));
    v4 = sub_1000625AC;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000625AC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_BYTE *)(v0 + 32);
  *(_OWORD *)v1 = *(_OWORD *)(v0 + 16);
  *(_BYTE *)(v1 + 16) = v2;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000625CC()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100062600(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  return swift_task_switch(sub_100062618, 0, 0);
}

uint64_t sub_100062618()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = v0[7];
  v2 = swift_task_alloc(32);
  v0[8] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[9] = v3;
  v4 = sub_100003304(&qword_10010EC38);
  *v3 = v0;
  v3[1] = sub_1000626C8;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD00000000000002ALL, 0x80000001000D06F0, sub_100063CB0, v2, v4);
}

uint64_t sub_1000626C8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 72);
  *(_QWORD *)(*v1 + 80) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000625CC;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 64));
    v4 = sub_100062734;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100062734()
{
  uint64_t v0;
  _OWORD *v1;
  __int128 v2;

  v1 = *(_OWORD **)(v0 + 48);
  v2 = *(_OWORD *)(v0 + 32);
  *v1 = *(_OWORD *)(v0 + 16);
  v1[1] = v2;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006274C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  return swift_task_switch(sub_100062768, 0, 0);
}

uint64_t sub_100062768()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 48) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 32);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 56) = v2;
  v3 = sub_100003304(&qword_10010EC50);
  *v2 = v0;
  v2[1] = sub_100062818;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0xD00000000000002ALL, 0x80000001000D06A0, sub_100063C70, v1, v3);
}

uint64_t sub_100062818()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 56);
  *(_QWORD *)(*v1 + 64) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100062898;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 48));
    v4 = sub_100062884;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100062884()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 24) = *(_QWORD *)(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100062898()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000628CC(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  unsigned int v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  _QWORD aBlock[5];
  uint64_t v20;

  v6 = sub_100003304(&qword_10010EC60);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = objc_msgSend(a2, "internal", __chkstk_darwin(v6).n128_f64[0]);
  v10 = objc_msgSend(v9, "isArcadeGame");

  if (v10)
  {
    v11 = objc_msgSend((id)objc_opt_self(GKDaemonProxy), "proxyForPlayer:", a3);
    v12 = objc_msgSend(v11, "gameService");

    v13 = objc_msgSend(a2, "internal");
    v14 = objc_msgSend(v13, "adamID");

    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
    v15 = *(unsigned __int8 *)(v7 + 80);
    v16 = (v15 + 16) & ~v15;
    v17 = swift_allocObject(&unk_1000FEE20, v16 + v8, v15 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v17 + v16, (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
    aBlock[4] = sub_100063C84;
    v20 = v17;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100062D58;
    aBlock[3] = &unk_1000FEE38;
    v18 = _Block_copy(aBlock);
    objc_msgSend(v12, "getArcadeHighlightForAdamID:count:handler:", v14, 2, v18, swift_release(v20).n128_f64[0]);
    _Block_release(v18);
    swift_unknownObjectRelease(v12);

  }
  else
  {
    aBlock[0] = 0;
    CheckedContinuation.resume(returning:)(aBlock, v6);
  }
}

uint64_t sub_100062ADC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  const char *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  objc_class *v21;
  const char *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  objc_class *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  if (a2)
  {
    swift_errorRetain(a2);
    if (qword_10010BAA0 != -1)
      swift_once(&qword_10010BAA0, sub_100004DCC);
    v4 = type metadata accessor for Logger(0);
    sub_100004E8C(v4, (uint64_t)qword_1001232D8);
    swift_errorRetain(a2);
    v5 = swift_errorRetain(a2);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      v9 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v8 = 138412290;
      swift_errorRetain(a2);
      v10 = _swift_stdlib_bridgeErrorToNSError(a2);
      v32 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33);
      *v9 = v10;
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Error fetching Arcade games for you highlights: %@", v8, 0xCu);
      v11 = sub_100003304(&qword_10010EB00);
      swift_arrayDestroy(v9, 1, v11);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);

      swift_errorRelease(a2);
    }
    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      swift_errorRelease(a2);

    }
  }
  if (!((unint64_t)a1 >> 62))
  {
    v12 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain(a1);
    if (v12)
      goto LABEL_9;
LABEL_17:
    swift_bridgeObjectRelease((_TtC13GameOverlayUI20GameOverlayUIService *)a1, v14, v15, v16, v17, v18, v19, v20);
    v32 = 0;
    goto LABEL_18;
  }
  if (a1 < 0)
    v30 = a1;
  else
    v30 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  result = _CocoaArrayWrapper.endIndex.getter(v30);
  if (!result)
    goto LABEL_17;
LABEL_9:
  if ((a1 & 0xC000000000000001) != 0)
  {
    v21 = (objc_class *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
    goto LABEL_12;
  }
  if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v21 = (objc_class *)*(id *)(a1 + 32);
LABEL_12:
    v29 = v21;
    swift_bridgeObjectRelease((_TtC13GameOverlayUI20GameOverlayUIService *)a1, v22, v23, v24, v25, v26, v27, v28);
    v32 = (uint64_t)v29;
LABEL_18:
    v31 = sub_100003304(&qword_10010EC60);
    return CheckedContinuation.resume(returning:)(&v32, v31);
  }
  __break(1u);
  return result;
}

void sub_100062D58(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  void (*v6)(_TtC13GameOverlayUI20GameOverlayUIService *, void *);
  uint64_t v7;
  _TtC13GameOverlayUI20GameOverlayUIService *v8;
  SEL v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;

  v6 = *(void (**)(_TtC13GameOverlayUI20GameOverlayUIService *, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v7 = sub_1000509C8(0, &qword_10010EC68, GKGameHighlightInternal_ptr);
  v8 = (_TtC13GameOverlayUI20GameOverlayUIService *)static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v7);
  swift_retain(v5);
  v16 = a3;
  v6(v8, a3);
  swift_release(v5);
  swift_bridgeObjectRelease(v8, v9, v10, v11, v12, v13, v14, v15);

}

void sub_100062DF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD aBlock[5];
  uint64_t v13;

  v4 = sub_100003304(&qword_10010EC70);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = (void *)objc_opt_self(GKLeaderboard);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v8 + 16) & ~v8;
  v10 = swift_allocObject(&unk_1000FEE70, v9 + v6, v8 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_100063CC4;
  v13 = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100063030;
  aBlock[3] = &unk_1000FEE88;
  v11 = _Block_copy(aBlock);
  objc_msgSend(v7, "loadHighlightsWithPlayerScope:timeScope:game:handler:", 1, 2, a2, v11, swift_release(v13).n128_f64[0]);
  _Block_release(v11);
}

void sub_100062F3C(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v7;
  id v9;
  uint64_t v10;
  id v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;

  if (a1)
  {
    v7 = a2;
    if (a2)
    {
      v9 = a1;
      v7 = objc_msgSend(v7, "rank");
    }
    else
    {
      v11 = a1;
    }
    v12 = objc_msgSend(a1, "localizedTitle");
    if (v12)
    {
      v13 = v12;
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      v16 = v15;

    }
    else
    {
      v14 = 0;
      v16 = 0;
    }
    *(_QWORD *)&v18 = v7;
    *((_QWORD *)&v18 + 1) = a6;
    *(_QWORD *)&v19 = v14;
    *((_QWORD *)&v19 + 1) = v16;
    v17 = sub_100003304(&qword_10010EC70);
    CheckedContinuation.resume(returning:)(&v18, v17);

  }
  else
  {
    v18 = 0u;
    v19 = 0u;
    v10 = sub_100003304(&qword_10010EC70);
    CheckedContinuation.resume(returning:)(&v18, v10);
  }
}

void sub_100063030(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7)
{
  uint64_t v12;
  void (*v13)(void *, void *, void *, void *, void *, uint64_t);
  id v14;
  id v15;
  id v16;
  id v17;
  id v19;

  v13 = *(void (**)(void *, void *, void *, void *, void *, uint64_t))(a1 + 32);
  v12 = *(_QWORD *)(a1 + 40);
  swift_retain(v12);
  v19 = a2;
  v17 = a3;
  v14 = a4;
  v15 = a5;
  v16 = a6;
  v13(a2, a3, a4, a5, a6, a7);
  swift_release(v12);

}

void sub_1000630FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _QWORD aBlock[5];
  uint64_t v15;

  v6 = sub_100003304(&qword_10010EC78);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = (void *)objc_opt_self(GKAchievement);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  v10 = *(unsigned __int8 *)(v7 + 80);
  v11 = (v10 + 16) & ~v10;
  v12 = swift_allocObject(&unk_1000FEEC0, v11 + v8, v10 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v12 + v11, (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  aBlock[4] = sub_100063DB4;
  v15 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10006343C;
  aBlock[3] = &unk_1000FEED8;
  v13 = _Block_copy(aBlock);
  objc_msgSend(v9, "loadAchievementsForGameV2:player:includeUnreported:includeHidden:withCompletionHandler:", a2, a3, 1, 1, v13, swift_release(v15).n128_f64[0]);
  _Block_release(v13);
}

uint64_t sub_100063258(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  const char *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t i;
  Class v13;
  uint64_t v14;
  const char *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  SEL v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;

  if (!a1)
  {
    v38 = 0;
    v39 = 0;
LABEL_30:
    v40 = 0;
    v36 = sub_100003304(&qword_10010EC78);
    return CheckedContinuation.resume(returning:)(&v38, v36);
  }
  v38 = (uint64_t)&_swiftEmptyArrayStorage;
  v2 = (unint64_t)a1 >> 62;
  if (!((unint64_t)a1 >> 62))
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain(a1);
    if (v3)
      goto LABEL_4;
LABEL_20:
    swift_bridgeObjectRelease((_TtC13GameOverlayUI20GameOverlayUIService *)a1, v5, v6, v7, v8, v9, v10, v11);
    v24 = (unint64_t)&_swiftEmptyArrayStorage;
    if (((unint64_t)&_swiftEmptyArrayStorage & 0x8000000000000000) != 0)
      goto LABEL_31;
    goto LABEL_21;
  }
  if (a1 < 0)
    v25 = a1;
  else
    v25 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  result = _CocoaArrayWrapper.endIndex.getter(v25);
  v3 = result;
  if (!result)
    goto LABEL_20;
LABEL_4:
  if (v3 >= 1)
  {
    for (i = 0; i != v3; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
      else
        v22 = *(id *)(a1 + 8 * i + 32);
      v23 = v22;
      if (objc_msgSend(v22, "isCompleted"))
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        v13 = *(Class *)(v38 + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v13);
        v14 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v23);
        specialized ContiguousArray._endMutation()(v14);
      }
      else
      {

      }
    }
    swift_bridgeObjectRelease((_TtC13GameOverlayUI20GameOverlayUIService *)a1, v15, v16, v17, v18, v19, v20, v21);
    v24 = v38;
    if (v38 < 0)
      goto LABEL_31;
LABEL_21:
    if ((v24 & 0x4000000000000000) == 0)
    {
      v26 = *(_QWORD *)(v24 + 16);
LABEL_23:
      swift_release(v24);
      if (v2)
      {
        if (a1 < 0)
          v28 = a1;
        else
          v28 = a1 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(a1);
        v27 = _CocoaArrayWrapper.endIndex.getter(v28);
        swift_bridgeObjectRelease((_TtC13GameOverlayUI20GameOverlayUIService *)a1, v29, v30, v31, v32, v33, v34, v35);
      }
      else
      {
        v27 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v38 = v26;
      v39 = v27;
      goto LABEL_30;
    }
LABEL_31:
    v37 = swift_bridgeObjectRetain(v24);
    v26 = _CocoaArrayWrapper.endIndex.getter(v37);
    swift_release(v24);
    goto LABEL_23;
  }
  __break(1u);
  return result;
}

void sub_10006343C(uint64_t a1, _TtC13GameOverlayUI20GameOverlayUIService *a2, void *a3)
{
  _TtC13GameOverlayUI20GameOverlayUIService *v4;
  uint64_t v5;
  void (*v6)(_TtC13GameOverlayUI20GameOverlayUIService *, void *);
  uint64_t v7;
  id v8;
  SEL v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;

  v4 = a2;
  v6 = *(void (**)(_TtC13GameOverlayUI20GameOverlayUIService *, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    v7 = sub_1000509C8(0, &qword_10010EC80, GKAchievement_ptr);
    v4 = (_TtC13GameOverlayUI20GameOverlayUIService *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v7);
  }
  swift_retain(v5);
  v8 = a3;
  v6(v4, a3);
  swift_release(v5);

  swift_bridgeObjectRelease(v4, v9, v10, v11, v12, v13, v14, v15);
}

uint64_t sub_1000634C8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2[2] = a1;
  v4 = type metadata accessor for AccessPointRequiredData(0);
  v2[3] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[4] = v5;
  v6 = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v2[5] = v6;
  v7 = (_QWORD *)swift_task_alloc(dword_10010EC04);
  v2[6] = v7;
  *v7 = v2;
  v7[1] = sub_10006354C;
  return sub_100060894(v6, a2);
}

uint64_t sub_10006354C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  *(_QWORD *)(*(_QWORD *)v1 + 56) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100063620;
  else
    v3 = sub_1000635B0;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000635B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 32);
  v1 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  sub_100010F0C(v1, v4, type metadata accessor for AccessPointRequiredData);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v2 + 56))(v4, 0, 1, v3);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100063620()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100063654(uint64_t a1)
{
  uint64_t *v1;

  sub_100087790(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100063660(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Game(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000636A4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000636D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __int128 v5;

  v4 = swift_task_alloc(dword_10010EC14);
  v5 = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(v2 + 16) = v4;
  *(_QWORD *)v4 = v2;
  *(_QWORD *)(v4 + 8) = sub_1000252CC;
  *(_OWORD *)(v4 + 48) = v5;
  *(_QWORD *)(v4 + 40) = a1;
  return swift_task_switch(sub_100062490, 0, 0);
}

uint64_t sub_100063738(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_10010EC2C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1000263E8;
  v5[6] = a1;
  v5[7] = v4;
  return swift_task_switch(sub_100062618, 0, 0);
}

uint64_t sub_10006379C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __int128 v5;

  v4 = swift_task_alloc(dword_10010EC44);
  v5 = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(v2 + 16) = v4;
  *(_QWORD *)v4 = v2;
  *(_QWORD *)(v4 + 8) = sub_1000263E8;
  *(_OWORD *)(v4 + 32) = v5;
  *(_QWORD *)(v4 + 24) = a1;
  return swift_task_switch(sub_100062768, 0, 0);
}

unint64_t sub_100063804(_TtC13GameOverlayUI20GameOverlayUIService *a1, const char *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  Class isa;
  uint64_t v10;
  _QWORD *v11;
  Class v12;
  void **listener;
  void *v14;
  id v15;
  id v16;
  unint64_t result;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  isa = a1[1].super.isa;
  if (!isa)
  {
    v11 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100003304(&qword_10010EC58);
  v10 = static _DictionaryStorage.allocate(capacity:)(isa);
  v11 = (_QWORD *)v10;
  v12 = a1[1].super.isa;
  if (!v12)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1, a2, a3, a4, a5, a6, a7, a8);
    return (unint64_t)v11;
  }
  swift_retain(v10);
  listener = (void **)a1[2].listener;
  while (1)
  {
    v14 = *listener;
    v15 = *(listener - 1);
    v16 = v14;
    result = sub_10006390C((uint64_t)v15);
    if ((v18 & 1) != 0)
      break;
    *(_QWORD *)((char *)v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v19 = 8 * result;
    *(_QWORD *)(v11[6] + v19) = v15;
    *(_QWORD *)(v11[7] + v19) = v16;
    v20 = v11[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_11;
    v11[2] = v22;
    listener += 2;
    v12 = (Class)((char *)v12 - 1);
    if (!v12)
    {
      swift_release(v11);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10006390C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _TtC13GameOverlayUI20GameOverlayUIService *v5;
  _TtC13GameOverlayUI20GameOverlayUIService *v6;
  Swift::Int v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  _QWORD v16[9];

  v3 = *(_QWORD *)(v1 + 40);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v6 = v5;
  Hasher.init(_seed:)(v16, v3);
  String.hash(into:)(v16, v4, v6);
  v7 = Hasher._finalize()();
  swift_bridgeObjectRelease(v6, v8, v9, v10, v11, v12, v13, v14);
  return sub_10006398C(a1, v7);
}

unint64_t sub_10006398C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  char v29;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v7 == v10 && v9 == v11)
      goto LABEL_22;
    v13 = v11;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) != 0)
      return v5;
    v15 = ~v4;
    v5 = (v5 + 1) & v15;
    if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) == 0)
      return v5;
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
    v9 = v17;
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v16 == v18 && v9 == v19)
    {
LABEL_22:
      swift_bridgeObjectRelease_n(v9, 2);
      return v5;
    }
    v21 = v19;
    v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v21);
    if ((v22 & 1) == 0)
    {
      v5 = (v5 + 1) & v15;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
          v9 = v24;
          v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v23 == v25 && v9 == v26)
            break;
          v28 = v26;
          v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v9, v25, v26, 0);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v28);
          if ((v29 & 1) == 0)
          {
            v5 = (v5 + 1) & v15;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_22;
      }
    }
  }
  return v5;
}

uint64_t sub_100063B78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a4 != 1)
    return swift_bridgeObjectRetain(a4);
  return result;
}

uint64_t sub_100063B8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a4 != 1)
    return swift_bridgeObjectRelease(a4);
  return result;
}

uint64_t sub_100063BA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003304(&qword_10010EC08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100063BE8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100003304(&qword_10010EC08);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100063C28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003304(&qword_10010EC08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_100063C70(uint64_t a1)
{
  uint64_t v1;

  sub_1000628CC(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100063C78()
{
  return sub_100063D58(&qword_10010EC60);
}

uint64_t sub_100063C84(uint64_t a1, uint64_t a2)
{
  return sub_100063DC8(a1, a2, &qword_10010EC60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100062ADC);
}

uint64_t sub_100063C98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_100063CA8(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

void sub_100063CB0(uint64_t a1)
{
  uint64_t v1;

  sub_100062DF0(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_100063CB8()
{
  return sub_100063D58(&qword_10010EC70);
}

void sub_100063CC4(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_100003304(&qword_10010EC70);
  sub_100062F3C(a1, a2, a3, a4, a5, a6);
}

void sub_100063D44(uint64_t a1)
{
  uint64_t v1;

  sub_1000630FC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100063D4C()
{
  return sub_100063D58(&qword_10010EC78);
}

uint64_t sub_100063D58(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = sub_100003304(a1);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 16) & ~v4;
  v6 = v5 + *(_QWORD *)(v3 + 64);
  v7 = v4 | 7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  return swift_deallocObject(v1, v6, v7);
}

uint64_t sub_100063DB4(uint64_t a1, uint64_t a2)
{
  return sub_100063DC8(a1, a2, &qword_10010EC78, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100063258);
}

uint64_t sub_100063DC8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v7;

  v7 = *(unsigned __int8 *)(*(_QWORD *)(sub_100003304(a3) - 8) + 80);
  return a4(a1, a2, v4 + ((v7 + 16) & ~v7));
}

void Player.init(with:)(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD v13[9];
  uint64_t v14;

  sub_1000509C8(0, &qword_10010E3C0, NSKeyedUnarchiver_ptr);
  v7 = sub_1000509C8(0, &qword_10010E768, GKPlayerInternal_ptr);
  v8 = (void *)static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v7, a1, a2, v7);
  if (v3)
  {
    sub_100038198(a1, a2);
  }
  else if (v8)
  {
    sub_1000648B0(v8, (uint64_t)v13);
    sub_100038198(a1, a2);
    v9 = v13[7];
    *(_OWORD *)(a3 + 96) = v13[6];
    *(_OWORD *)(a3 + 112) = v9;
    *(_OWORD *)(a3 + 128) = v13[8];
    *(_QWORD *)(a3 + 144) = v14;
    v10 = v13[3];
    *(_OWORD *)(a3 + 32) = v13[2];
    *(_OWORD *)(a3 + 48) = v10;
    v11 = v13[5];
    *(_OWORD *)(a3 + 64) = v13[4];
    *(_OWORD *)(a3 + 80) = v11;
    v12 = v13[1];
    *(_OWORD *)a3 = v13[0];
    *(_OWORD *)(a3 + 16) = v12;
  }
  else
  {
    __break(1u);
  }
}

uint64_t Player.FriendRequestInboxEntry.init(friendCode:senderHandle:contactID:contactName:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  *a9 = result;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  a9[6] = a7;
  a9[7] = a8;
  return result;
}

void Player.FriendRequestInboxEntry.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = v1;
  v4 = *v2;
  v5 = v2[1];
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(a1, v4, v5);
  swift_bridgeObjectRelease(v5);
  v6 = v2[2];
  v7 = v2[3];
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(a1, v6, v7);
  swift_bridgeObjectRelease(v7);
  v8 = v2[5];
  if (v8)
  {
    v9 = v2[4];
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v8);
    String.hash(into:)(a1, v9, v8);
    swift_bridgeObjectRelease(v8);
    v10 = v2[7];
    if (v10)
    {
LABEL_3:
      v11 = v2[6];
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain(v10);
      String.hash(into:)(a1, v11, v10);
      swift_bridgeObjectRelease(v10);
      return;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    v10 = v2[7];
    if (v10)
      goto LABEL_3;
  }
  Hasher._combine(_:)(0);
}

uint64_t sub_100064054()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100064088 + 4 * byte_1000CA450[*v0]))(0x6F43646E65697266, 0xEA00000000006564);
}

uint64_t sub_100064088()
{
  return 0x61487265646E6573;
}

uint64_t sub_1000640A8()
{
  return 0x49746361746E6F63;
}

uint64_t sub_1000640C4()
{
  return 0x4E746361746E6F63;
}

uint64_t sub_1000640E4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100065290(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100064108(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006524C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100064130(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006524C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Player.FriendRequestInboxEntry.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  char v25;

  v3 = v1;
  v5 = sub_100003304(&qword_10010EC88);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100003C28(a1, v9);
  v11 = sub_10006524C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s23FriendRequestInboxEntryV10CodingKeysON, &_s23FriendRequestInboxEntryV10CodingKeysON, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v25 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v25, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = v3[3];
    v24 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v24, v5);
    v16 = v3[4];
    v17 = v3[5];
    v23 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, &v23, v5);
    v18 = v3[6];
    v19 = v3[7];
    v22 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, &v22, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int Player.FriendRequestInboxEntry.hashValue.getter()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  Player.FriendRequestInboxEntry.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

double Player.FriendRequestInboxEntry.init(from:)@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[2];
  __int128 v8;
  __int128 v9;

  sub_100065490(a1, (uint64_t *)v7);
  if (!v2)
  {
    v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    result = *(double *)&v8;
    v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }
  return result;
}

uint64_t sub_100064338(_QWORD *a1)
{
  return Player.FriendRequestInboxEntry.encode(to:)(a1);
}

uint64_t sub_10006434C(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[4];
  _OWORD v8[4];

  v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  v3 = a1[3];
  v7[2] = a1[2];
  v7[3] = v3;
  v4 = a2[1];
  v8[0] = *a2;
  v8[1] = v4;
  v5 = a2[3];
  v8[2] = a2[2];
  v8[3] = v5;
  return _s13GameOverlayUI6PlayerV23FriendRequestInboxEntryV23__derived_struct_equalsySbAE_AEtFZ_0((uint64_t *)v7, v8) & 1;
}

Swift::Int sub_100064398(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  Player.FriendRequestInboxEntry.hash(into:)((uint64_t)v2);
  return Hasher._finalize()();
}

uint64_t _s13GameOverlayUI6PlayerV23FriendRequestInboxEntryV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  v7 = v4 == *a2 && v5 == v6;
  if (v7 || (v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0), result = 0, (v8 & 1) != 0))
  {
    v10 = a1[2];
    v11 = a1[3];
    v12 = a2[2];
    v13 = a2[3];
    v14 = v10 == v12 && v11 == v13;
    if (v14
      || (v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, v12, v13, 0), result = 0, (v15 & 1) != 0))
    {
      v16 = a1[5];
      v17 = a2[5];
      if (v16)
      {
        if (!v17)
          return 0;
        v18 = a1[4];
        v19 = a2[4];
        if (v18 != v19 || v16 != v17)
        {
          v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v16, v19, v17, 0);
          result = 0;
          if ((v20 & 1) == 0)
            return result;
        }
      }
      else if (v17)
      {
        return 0;
      }
      v21 = a1[7];
      v22 = a2[7];
      if (v21)
      {
        if (v22)
        {
          v23 = a1[6];
          v24 = a2[6];
          if (v23 == v24 && v21 == v22)
            return 1;
          if ((_stringCompareWithSmolCheck(_:_:expecting:)(v23, v21, v24, v22, 0) & 1) != 0)
            return 1;
        }
      }
      else if (!v22)
      {
        return 1;
      }
      return 0;
    }
  }
  return result;
}

void _s13GameOverlayUI6PlayerV23integerForMonogramColorySiSSFZ_0(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _TtC13GameOverlayUI20GameOverlayUIService *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  _TtC13GameOverlayUI20GameOverlayUIService *v11;
  unint64_t v12;
  uint64_t isa;
  SEL v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *i;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  const char *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  unsigned __int8 *v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  SEL v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  _QWORD v54[2];
  uint64_t v55;
  uint64_t v56;

  v55 = a1;
  v56 = a2;
  v54[0] = 58;
  v54[1] = 0xE100000000000000;
  v2 = sub_10001B308();
  v3 = (_TtC13GameOverlayUI20GameOverlayUIService *)StringProtocol.components<A>(separatedBy:)(v54, &type metadata for String, &type metadata for String, v2, v2);
  v11 = v3;
  if (v3[1].super.isa < (Class)2)
    goto LABEL_11;
  isa = (uint64_t)v3[3].super.isa;
  v12 = *(_QWORD *)v3[3].listener;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v11, v14, v15, v16, v17, v18, v19, v20);
  v21 = HIBYTE(v12) & 0xF;
  v4 = isa & 0xFFFFFFFFFFFFLL;
  if ((v12 & 0x2000000000000000) != 0)
    v22 = HIBYTE(v12) & 0xF;
  else
    v22 = isa & 0xFFFFFFFFFFFFLL;
  if (!v22)
  {
    v3 = (_TtC13GameOverlayUI20GameOverlayUIService *)v12;
LABEL_11:
    swift_bridgeObjectRelease(v3, (SEL)v4, v5, v6, v7, v8, v9, v10);
    return;
  }
  if ((v12 & 0x1000000000000000) != 0)
  {
    v24 = (uint64_t)sub_1000A78C4(isa, v12, 10);
    LOBYTE(isa) = v4;
    goto LABEL_46;
  }
  if ((v12 & 0x2000000000000000) != 0)
  {
    v55 = isa;
    v56 = v12 & 0xFFFFFFFFFFFFFFLL;
    if (isa == 43)
    {
      if (!v21)
        goto LABEL_70;
      if (v21 == 1 || (BYTE1(isa) - 48) > 9u)
        goto LABEL_33;
      v24 = (BYTE1(isa) - 48);
      if (v21 != 2)
      {
        if ((BYTE2(isa) - 48) > 9u)
          goto LABEL_33;
        v24 = 10 * (BYTE1(isa) - 48) + (BYTE2(isa) - 48);
        v25 = v21 - 3;
        if (v25)
        {
          v26 = (unsigned __int8 *)&v55 + 3;
          while (1)
          {
            v27 = *v26 - 48;
            if (v27 > 9)
              goto LABEL_33;
            v28 = 10 * v24;
            if ((unsigned __int128)(v24 * (__int128)10) >> 64 != (10 * v24) >> 63)
              goto LABEL_33;
            v24 = v28 + v27;
            if (__OFADD__(v28, v27))
              goto LABEL_33;
            LOBYTE(isa) = 0;
            ++v26;
            if (!--v25)
              goto LABEL_46;
          }
        }
      }
    }
    else
    {
      if (isa == 45)
      {
        if (v21)
        {
          if (v21 != 1 && (BYTE1(isa) - 48) <= 9u)
          {
            if (v21 == 2)
            {
              LOBYTE(isa) = 0;
              v24 = -(uint64_t)(BYTE1(isa) - 48);
              goto LABEL_46;
            }
            if ((BYTE2(isa) - 48) <= 9u)
            {
              v24 = -10 * (BYTE1(isa) - 48) - (BYTE2(isa) - 48);
              v33 = v21 - 3;
              if (!v33)
                goto LABEL_45;
              v43 = (unsigned __int8 *)&v55 + 3;
              while (1)
              {
                v44 = *v43 - 48;
                if (v44 > 9)
                  break;
                v45 = 10 * v24;
                if ((unsigned __int128)(v24 * (__int128)10) >> 64 != (10 * v24) >> 63)
                  break;
                v24 = v45 - v44;
                if (__OFSUB__(v45, v44))
                  break;
                LOBYTE(isa) = 0;
                ++v43;
                if (!--v33)
                  goto LABEL_46;
              }
            }
          }
LABEL_33:
          v24 = 0;
          LOBYTE(isa) = 1;
          goto LABEL_46;
        }
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
        return;
      }
      if (!v21 || (isa - 48) > 9u)
        goto LABEL_33;
      v24 = (isa - 48);
      if (v21 != 1)
      {
        if ((BYTE1(isa) - 48) > 9u)
          goto LABEL_33;
        v24 = 10 * (isa - 48) + (BYTE1(isa) - 48);
        v29 = v21 - 2;
        if (v29)
        {
          v30 = (unsigned __int8 *)&v55 + 2;
          while (1)
          {
            v31 = *v30 - 48;
            if (v31 > 9)
              goto LABEL_33;
            v32 = 10 * v24;
            if ((unsigned __int128)(v24 * (__int128)10) >> 64 != (10 * v24) >> 63)
              goto LABEL_33;
            v24 = v32 + v31;
            if (__OFADD__(v32, v31))
              goto LABEL_33;
            LOBYTE(isa) = 0;
            ++v30;
            if (!--v29)
              goto LABEL_46;
          }
        }
      }
    }
LABEL_45:
    LOBYTE(isa) = 0;
    goto LABEL_46;
  }
  if ((isa & 0x1000000000000000) == 0)
    goto LABEL_67;
  for (i = (unsigned __int8 *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 32);
        ;
        i = (unsigned __int8 *)_StringObject.sharedUTF8.getter(isa, v12))
  {
    v24 = (uint64_t)sub_1000A78B0(i, v4, 10);
    LOBYTE(isa) = v4 & 1;
LABEL_46:
    swift_bridgeObjectRelease((_TtC13GameOverlayUI20GameOverlayUIService *)v12, (SEL)v4, v5, v6, v7, v8, v9, v10);
    if ((isa & 1) != 0)
      break;
    v34 = objc_msgSend((id)objc_opt_self(PRMonogramColor), "availableColors");
    v35 = sub_1000509C8(0, (unint64_t *)&qword_10010ECC0, PRMonogramColor_ptr);
    v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v34, v35);

    if (v12 >> 62)
    {
      if ((v12 & 0x8000000000000000) != 0)
        v46 = v12;
      else
        v46 = v12 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v12);
      isa = _CocoaArrayWrapper.endIndex.getter(v46);
      swift_bridgeObjectRelease((_TtC13GameOverlayUI20GameOverlayUIService *)v12, v47, v48, v49, v50, v51, v52, v53);
    }
    else
    {
      isa = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease((_TtC13GameOverlayUI20GameOverlayUIService *)v12, v36, v37, v38, v39, v40, v41, v42);
    if (isa)
    {
      if (v24 == 0x8000000000000000 && isa == -1)
      {
        __break(1u);
        goto LABEL_69;
      }
      return;
    }
    __break(1u);
LABEL_67:
    ;
  }
}

void sub_1000648B0(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  _TtC13GameOverlayUI20GameOverlayUIService *v13;
  _TtC13GameOverlayUI20GameOverlayUIService *v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  id v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  id v35;
  _TtC13GameOverlayUI20GameOverlayUIService *v36;
  const char *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  id v44;
  const char *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  SEL v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  void *v61;
  _TtC13GameOverlayUI20GameOverlayUIService *v62;
  unint64_t v63;
  char v64;
  SEL v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  uint64_t v72;
  _TtC13GameOverlayUI20GameOverlayUIService *v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  _TtC13GameOverlayUI20GameOverlayUIService *v83;
  _TtC13GameOverlayUI20GameOverlayUIService *v84;
  Swift::String v85;
  Swift::Bool v86;
  SEL v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  id v93;
  const char *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  id v105;
  id v106;
  void *v107;
  uint64_t v108;
  _TtC13GameOverlayUI20GameOverlayUIService *v109;
  _TtC13GameOverlayUI20GameOverlayUIService *v110;
  id v111;
  const char *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  _TtC13GameOverlayUI20GameOverlayUIService *v120;
  unint64_t v121;
  char v122;
  SEL v123;
  id v124;
  id v125;
  id v126;
  id v127;
  id v128;
  id v129;
  const char *v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  Swift::String v137;
  _TtC13GameOverlayUI20GameOverlayUIService *v138;
  SEL v139;
  id v140;
  id v141;
  id v142;
  id v143;
  id v144;
  id v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  const char *v154;
  void *v155;
  void *v156;
  void *v157;
  void *v158;
  void *v159;
  void *v160;
  uint64_t v161;
  const char *v162;
  unint64_t v163;
  id v164;
  id v165;
  id v166;
  id v167;
  id v168;
  id v169;
  uint64_t v170;
  SEL v171;
  id v172;
  id v173;
  id v174;
  id v175;
  id v176;
  id v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  Swift::String v182;
  _TtC13GameOverlayUI20GameOverlayUIService *object;
  SEL v184;
  id v185;
  id v186;
  id v187;
  id v188;
  id v189;
  id v190;
  Swift::String v191;
  id v192;
  uint64_t v193;
  _TtC13GameOverlayUI20GameOverlayUIService *v194;
  _TtC13GameOverlayUI20GameOverlayUIService *v195;
  uint64_t v196;
  uint64_t v197;
  SEL v198;
  id v199;
  id v200;
  id v201;
  id v202;
  id v203;
  id v204;
  Swift::String v205;
  _TtC13GameOverlayUI20GameOverlayUIService *v206;
  SEL v207;
  id v208;
  id v209;
  id v210;
  id v211;
  id v212;
  id v213;
  unsigned __int8 v214;
  id v215;
  uint64_t v216;
  _QWORD v217[2];
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t isa;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  _TtC13GameOverlayUI20GameOverlayUIService *v236;
  __int128 v237;
  __int128 v238;
  unsigned __int8 v239;

  v4 = sub_100003304(&qword_10010ECC8);
  *(_QWORD *)&v5 = __chkstk_darwin(v4).n128_u64[0];
  v7 = (char *)v217 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend(a1, "playerID", v5);
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v226 = v10;

  v11 = objc_msgSend(a1, "displayNameWithOptions:", 1);
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v14 = v13;

  swift_bridgeObjectRetain(v14);
  v15 = objc_msgSend(a1, "inboxEntry");
  v227 = v12;
  if (v15)
  {
    v16 = v15;
    v17 = objc_msgSend(v15, "friendCode");
    v225 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v19 = v18;

    v20 = objc_msgSend(v16, "senderHandle");
    v224 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v223 = v21;

    v22 = objc_msgSend(v16, "contactID");
    if (v22)
    {
      v23 = v22;
      v220 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
      v219 = v24;

    }
    else
    {
      v220 = 0;
      v219 = 0;
    }
    v25 = objc_msgSend(v16, "contactName");
    if (v25)
    {
      v26 = v25;
      v229 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      v232 = v27;

      goto LABEL_10;
    }

  }
  else
  {
    v224 = 0;
    v225 = 0;
    v223 = 0;
    v220 = 0;
    v219 = 0;
    v19 = 0;
  }
  v229 = 0;
  v232 = 0;
LABEL_10:
  v28 = objc_msgSend(a1, "contact");
  if (v28)
  {
    v29 = v28;
    v30 = objc_msgSend(v28, "_gkCompositeName");
    v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
    v230 = v32;
    v231 = v31;

  }
  else
  {
    v231 = 0;
    if (v19)
    {
      v230 = 0;
      if (v232)
      {
        v230 = swift_bridgeObjectRetain(v232);
        v231 = v229;
      }
    }
    else
    {
      v230 = 0;
    }
  }
  v33 = objc_msgSend(a1, "contact");
  if (v33)
  {
    v34 = v33;
    v35 = objc_msgSend(v33, "phoneNumberStrings");
    v36 = (_TtC13GameOverlayUI20GameOverlayUIService *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v35, &type metadata for String);

    if (v36[1].super.isa
      || (swift_bridgeObjectRelease(v36, v37, v38, v39, v40, v41, v42, v43),
          v44 = objc_msgSend(v34, "emailAddressStrings"),
          v36 = (_TtC13GameOverlayUI20GameOverlayUIService *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v44, &type metadata for String), v44, v36[1].super.isa))
    {
      v52 = *(_QWORD *)v36[2].listener;
      isa = (uint64_t)v36[2].super.isa;
      v221 = v52;
      swift_bridgeObjectRetain(v52);

      swift_bridgeObjectRelease(v36, v53, v54, v55, v56, v57, v58, v59);
    }
    else
    {
      swift_bridgeObjectRelease(v36, v45, v46, v47, v48, v49, v50, v51);
      v215 = objc_msgSend(v34, "identifier");
      isa = static String._unconditionallyBridgeFromObjectiveC(_:)(v215);
      v221 = v216;

    }
  }
  else
  {
    isa = 0;
    v221 = 0;
  }
  v239 = objc_msgSend(a1, "isArcadeSubscriber");
  v60 = objc_msgSend(a1, "photos");
  v228 = v9;
  if (!v60)
  {
    v237 = 0u;
    v238 = 0u;
LABEL_31:
    sub_100010ED0((uint64_t)&v237, &qword_10010EB30);
    goto LABEL_37;
  }
  v61 = v60;
  v62 = (_TtC13GameOverlayUI20GameOverlayUIService *)static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v60, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

  v233 = 0x6574616C706D6574;
  v234 = 0xE800000000000000;
  AnyHashable.init<A>(_:)(&v235, &v233, &type metadata for String, &protocol witness table for String);
  if (v62[1].super.isa && (v63 = sub_1000AAEB8((uint64_t)&v235), (v64 & 1) != 0))
  {
    sub_100031EE0(*(_QWORD *)v62[3].listener + 32 * v63, (uint64_t)&v237);
  }
  else
  {
    v237 = 0u;
    v238 = 0u;
  }
  sub_100065BE8((uint64_t)&v235);
  swift_bridgeObjectRelease(v62, v65, v66, v67, v68, v69, v70, v71);
  if (!*((_QWORD *)&v238 + 1))
    goto LABEL_31;
  if ((swift_dynamicCast(&v235, &v237, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
    goto LABEL_37;
  v218 = v19;
  v72 = v235;
  v73 = v236;
  URL.init(string:)(v235, v236);
  v74 = type metadata accessor for URL(0);
  v75 = *(_QWORD *)(v74 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(v7, 1, v74) == 1)
  {
    sub_100010ED0((uint64_t)v7, &qword_10010ECC8);
  }
  else
  {
    v217[1] = URL.scheme.getter();
    v84 = v83;
    (*(void (**)(char *, uint64_t))(v75 + 8))(v7, v74);
    if (v84)
    {
      v85._countAndFlagsBits = 1886680168;
      v85._object = (void *)0xE400000000000000;
      v86 = String.hasPrefix(_:)(v85);
      swift_bridgeObjectRelease(v84, v87, v88, v89, v90, v91, v92, v93);
      v9 = v228;
      if (v86)
      {
        swift_bridgeObjectRelease(v14, v94, v95, v96, v97, v98, v99, v100);

        v101 = v226;
        v102 = v227;
        v103 = v225;
        v104 = v218;
LABEL_55:
        v146 = v224;
        v147 = v223;
        v148 = v220;
        v149 = v219;
        v151 = v230;
        v150 = v231;
        v152 = isa;
        v153 = v221;
        goto LABEL_56;
      }
      swift_bridgeObjectRelease(v73, v94, v95, v96, v97, v98, v99, v100);
      goto LABEL_36;
    }
  }
  swift_bridgeObjectRelease(v73, v76, v77, v78, v79, v80, v81, v82);
  v9 = v228;
LABEL_36:
  v19 = v218;
LABEL_37:
  v105 = objc_msgSend((id)objc_opt_self(GKPlayer), "sizeForPhotoSize:", 65537);
  v106 = (id)GKImageURLKeyForSize(v105);
  if (!v106)
    goto LABEL_50;
  v107 = v106;
  v218 = v19;
  v108 = static String._unconditionallyBridgeFromObjectiveC(_:)(v106);
  v110 = v109;

  v111 = objc_msgSend(a1, "photos");
  if (v111)
  {
    v119 = v111;
    v120 = (_TtC13GameOverlayUI20GameOverlayUIService *)static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v111, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

    v233 = v108;
    v234 = (unint64_t)v110;
    AnyHashable.init<A>(_:)(&v235, &v233, &type metadata for String, &protocol witness table for String);
    if (v120[1].super.isa)
    {
      v121 = sub_1000AAEB8((uint64_t)&v235);
      if ((v122 & 1) != 0)
      {
        sub_100031EE0(*(_QWORD *)v120[3].listener + 32 * v121, (uint64_t)&v237);
      }
      else
      {
        v237 = 0u;
        v238 = 0u;
      }
    }
    else
    {
      v237 = 0u;
      v238 = 0u;
    }
    sub_100065BE8((uint64_t)&v235);
    swift_bridgeObjectRelease(v120, v123, v124, v125, v126, v127, v128, v129);
    if (*((_QWORD *)&v238 + 1))
    {
      if ((swift_dynamicCast(&v235, &v237, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
      {
        swift_bridgeObjectRelease(v14, v130, v131, v132, v133, v134, v135, v136);
        v137._countAndFlagsBits = v235;
        v138 = v236;
        v235 = 0x2F2F3A656C6966;
        v236 = (_TtC13GameOverlayUI20GameOverlayUIService *)0xE700000000000000;
        v137._object = v138;
        String.append(_:)(v137);

        swift_bridgeObjectRelease(v138, v139, v140, v141, v142, v143, v144, v145);
        v72 = v235;
        v73 = v236;
        v101 = v226;
        v102 = v227;
        v146 = v224;
        v103 = v225;
        v147 = v223;
        v148 = v220;
        v149 = v219;
        v151 = v230;
        v150 = v231;
        v152 = isa;
        v153 = v221;
        v104 = v218;
LABEL_56:
        v214 = v239;
        *(_QWORD *)a2 = v9;
        *(_QWORD *)(a2 + 8) = v101;
        *(_QWORD *)(a2 + 16) = v72;
        *(_QWORD *)(a2 + 24) = v73;
        *(_QWORD *)(a2 + 32) = v102;
        *(_QWORD *)(a2 + 40) = v14;
        *(_QWORD *)(a2 + 48) = v150;
        *(_QWORD *)(a2 + 56) = v151;
        *(_QWORD *)(a2 + 64) = v152;
        *(_QWORD *)(a2 + 72) = v153;
        *(_BYTE *)(a2 + 80) = v214;
        *(_QWORD *)(a2 + 88) = v103;
        *(_QWORD *)(a2 + 96) = v104;
        *(_QWORD *)(a2 + 104) = v146;
        *(_QWORD *)(a2 + 112) = v147;
        *(_QWORD *)(a2 + 120) = v148;
        *(_QWORD *)(a2 + 128) = v149;
        *(_QWORD *)(a2 + 136) = v229;
        *(_QWORD *)(a2 + 144) = v232;
        return;
      }
      goto LABEL_49;
    }
  }
  else
  {
    swift_bridgeObjectRelease(v110, v112, v113, v114, v115, v116, v117, v118);
    v237 = 0u;
    v238 = 0u;
  }
  sub_100010ED0((uint64_t)&v237, &qword_10010EB30);
LABEL_49:
  v19 = v218;
LABEL_50:
  v102 = v227;
  if (String.count.getter(v227, v14) < 1)
  {
    v170 = v19;
    swift_bridgeObjectRelease(v14, v154, v155, v156, v157, v158, v159, v160);
    v163 = 0xE100000000000000;
    v161 = 32;
    goto LABEL_54;
  }
  v161 = sub_1000AB3C4(v102, (unint64_t)v14);
  v163 = (unint64_t)v162;
  swift_bridgeObjectRelease(v14, v162, v164, v165, v166, v167, v168, v169);
  if (v163)
  {
    v170 = v19;
LABEL_54:
    v235 = 0;
    v236 = (_TtC13GameOverlayUI20GameOverlayUIService *)0xE000000000000000;
    _StringGuts.grow(_:)(37);
    swift_bridgeObjectRelease(v236, v171, v172, v173, v174, v175, v176, v177);
    v235 = 0x6D6172676F6E6F6DLL;
    v236 = (_TtC13GameOverlayUI20GameOverlayUIService *)0xEB000000002F2F3ALL;
    v178 = sub_100003304(&qword_10010ECD0);
    v179 = swift_allocObject(v178, 48, 7);
    *(_OWORD *)(v179 + 16) = xmmword_1000C9D90;
    *(_QWORD *)(v179 + 32) = v161;
    *(_QWORD *)(v179 + 40) = v163;
    *(_QWORD *)&v237 = v179;
    v180 = sub_100003304(&qword_10010ECD8);
    v181 = sub_100065B9C();
    v182._countAndFlagsBits = String.init<A>(_:)(&v237, v180, v181);
    object = (_TtC13GameOverlayUI20GameOverlayUIService *)v182._object;
    String.append(_:)(v182);
    swift_bridgeObjectRelease(object, v184, v185, v186, v187, v188, v189, v190);
    v191._object = (void *)0x80000001000D07D0;
    v191._countAndFlagsBits = 0xD000000000000016;
    String.append(_:)(v191);
    v192 = objc_msgSend(a1, "playerID");
    v193 = static String._unconditionallyBridgeFromObjectiveC(_:)(v192);
    v195 = v194;

    _s13GameOverlayUI6PlayerV23integerForMonogramColorySiSSFZ_0(v193, (uint64_t)v195);
    v197 = v196;
    swift_bridgeObjectRelease(v195, v198, v199, v200, v201, v202, v203, v204);
    *(_QWORD *)&v237 = v197;
    v205._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v206 = (_TtC13GameOverlayUI20GameOverlayUIService *)v205._object;
    String.append(_:)(v205);

    swift_bridgeObjectRelease(v206, v207, v208, v209, v210, v211, v212, v213);
    v72 = v235;
    v73 = v236;
    v103 = v225;
    v101 = v226;
    v104 = v170;
    v9 = v228;
    goto LABEL_55;
  }
  __break(1u);
}

unint64_t sub_10006524C()
{
  unint64_t result;

  result = qword_10010EC90;
  if (!qword_10010EC90)
  {
    result = swift_getWitnessTable(&unk_1000CA5FC, &_s23FriendRequestInboxEntryV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_10010EC90);
  }
  return result;
}

uint64_t sub_100065290(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x6F43646E65697266 && a2 == 0xEA00000000006564)
  {
    v5 = 0xEA00000000006564;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F43646E65697266, 0xEA00000000006564, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x61487265646E6573 && a2 == 0xEC000000656C646ELL)
  {
    v7 = 0xEC000000656C646ELL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x61487265646E6573, 0xEC000000656C646ELL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x49746361746E6F63 && a2 == 0xE900000000000044)
  {
    v8 = 0xE900000000000044;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x49746361746E6F63, 0xE900000000000044, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x4E746361746E6F63 && a2 == 0xEB00000000656D61)
  {
    swift_bridgeObjectRelease(0xEB00000000656D61);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x4E746361746E6F63, 0xEB00000000656D61, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

void sub_100065490(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _TtC13GameOverlayUI20GameOverlayUIService *v13;
  _TtC13GameOverlayUI20GameOverlayUIService *v14;
  uint64_t v15;
  _TtC13GameOverlayUI20GameOverlayUIService *v16;
  _TtC13GameOverlayUI20GameOverlayUIService *v17;
  uint64_t v18;
  _TtC13GameOverlayUI20GameOverlayUIService *v19;
  _TtC13GameOverlayUI20GameOverlayUIService *v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  SEL v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  _TtC13GameOverlayUI20GameOverlayUIService *v30;
  SEL v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  _TtC13GameOverlayUI20GameOverlayUIService *v38;
  SEL v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  SEL v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  _TtC13GameOverlayUI20GameOverlayUIService *v55;
  uint64_t v56;
  uint64_t v57;
  _TtC13GameOverlayUI20GameOverlayUIService *v58;
  char v59;
  char v60;
  char v61;
  char v62;

  v5 = sub_100003304(&qword_10010ECB8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100003C28(a1, v9);
  v11 = sub_10006524C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s23FriendRequestInboxEntryV10CodingKeysON, &_s23FriendRequestInboxEntryV10CodingKeysON, v11, v9, v10);
  if (v2)
  {
    sub_100004624(a1);
  }
  else
  {
    v62 = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v62, v5);
    v14 = v13;
    v57 = v12;
    v61 = 1;
    swift_bridgeObjectRetain(v13);
    v15 = KeyedDecodingContainer.decode(_:forKey:)(&v61, v5);
    v58 = v16;
    v56 = v15;
    v60 = 2;
    swift_bridgeObjectRetain(v16);
    v54 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v60, v5);
    v55 = v17;
    v59 = 3;
    swift_bridgeObjectRetain(v17);
    v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v59, v5);
    v20 = v19;
    v21 = *(void (**)(char *, uint64_t))(v6 + 8);
    v22 = v18;
    v21(v8, v5);
    swift_bridgeObjectRetain(v20);
    sub_100004624(a1);
    swift_bridgeObjectRelease(v20, v23, v24, v25, v26, v27, v28, v29);
    v30 = v55;
    swift_bridgeObjectRelease(v55, v31, v32, v33, v34, v35, v36, v37);
    v38 = v58;
    swift_bridgeObjectRelease(v58, v39, v40, v41, v42, v43, v44, v45);
    swift_bridgeObjectRelease(v14, v46, v47, v48, v49, v50, v51, v52);
    *a2 = v57;
    a2[1] = (uint64_t)v14;
    a2[2] = v56;
    a2[3] = (uint64_t)v38;
    a2[4] = v54;
    a2[5] = (uint64_t)v30;
    a2[6] = v22;
    a2[7] = (uint64_t)v20;
  }
}

unint64_t sub_10006574C()
{
  unint64_t result;

  result = qword_10010EC98;
  if (!qword_10010EC98)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Player.FriendRequestInboxEntry, &type metadata for Player.FriendRequestInboxEntry);
    atomic_store(result, (unint64_t *)&qword_10010EC98);
  }
  return result;
}

uint64_t _s23FriendRequestInboxEntryVwxx(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  return swift_bridgeObjectRelease(a1[7]);
}

_QWORD *_s23FriendRequestInboxEntryVwcp(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

_QWORD *_s23FriendRequestInboxEntryVwca(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[6] = a2[6];
  v10 = a2[7];
  v11 = a1[7];
  a1[7] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

__n128 _s23FriendRequestInboxEntryVwtk(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

_QWORD *_s23FriendRequestInboxEntryVwta(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[5];
  v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = a2[7];
  v11 = a1[7];
  a1[6] = a2[6];
  a1[7] = v10;
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t _s23FriendRequestInboxEntryVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s23FriendRequestInboxEntryVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Player.FriendRequestInboxEntry()
{
  return &type metadata for Player.FriendRequestInboxEntry;
}

uint64_t _s23FriendRequestInboxEntryV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100065A44 + 4 * byte_1000CA459[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100065A78 + 4 * byte_1000CA454[v4]))();
}

uint64_t sub_100065A78(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100065A80(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100065A88);
  return result;
}

uint64_t sub_100065A94(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100065A9CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100065AA0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100065AA8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s23FriendRequestInboxEntryV10CodingKeysOMa()
{
  return &_s23FriendRequestInboxEntryV10CodingKeysON;
}

unint64_t sub_100065AC8()
{
  unint64_t result;

  result = qword_10010ECA0;
  if (!qword_10010ECA0)
  {
    result = swift_getWitnessTable(&unk_1000CA5D4, &_s23FriendRequestInboxEntryV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_10010ECA0);
  }
  return result;
}

unint64_t sub_100065B10()
{
  unint64_t result;

  result = qword_10010ECA8;
  if (!qword_10010ECA8)
  {
    result = swift_getWitnessTable(&unk_1000CA544, &_s23FriendRequestInboxEntryV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_10010ECA8);
  }
  return result;
}

unint64_t sub_100065B58()
{
  unint64_t result;

  result = qword_10010ECB0;
  if (!qword_10010ECB0)
  {
    result = swift_getWitnessTable(&unk_1000CA56C, &_s23FriendRequestInboxEntryV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_10010ECB0);
  }
  return result;
}

unint64_t sub_100065B9C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010ECE0;
  if (!qword_10010ECE0)
  {
    v1 = sub_100006E54(&qword_10010ECD8);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10010ECE0);
  }
  return result;
}

uint64_t sub_100065BE8(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for AnyHashable - 1) + 8))();
  return a1;
}

__n128 GameDashboardPageIntent.init(_:for:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;

  sub_100065C84(a1, a3);
  v5 = a3 + *(int *)(type metadata accessor for GameDashboardPageIntent(0) + 20);
  v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v5 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v5 + 112) = v6;
  *(_OWORD *)(v5 + 128) = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(v5 + 144) = *(_QWORD *)(a2 + 144);
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v5 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v5 + 48) = v7;
  v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v5 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v5 + 80) = v8;
  result = *(__n128 *)a2;
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v10;
  return result;
}

uint64_t sub_100065C84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Game(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for GameDashboardPageIntent(uint64_t a1)
{
  uint64_t result;

  result = qword_10010ED68;
  if (!qword_10010ED68)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for GameDashboardPageIntent);
  return result;
}

void *GameDashboardPageIntent.kind.unsafeMutableAddressor()
{
  return &static GameDashboardPageIntent.kind;
}

unint64_t static GameDashboardPageIntent.kind.getter()
{
  return 0xD000000000000017;
}

uint64_t LaunchDashboardAction.game.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100007878(v1, a1, type metadata accessor for Game);
}

uint64_t GameDashboardPageIntent.player.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for GameDashboardPageIntent(0) + 20);
  return sub_100003920(v3, a1);
}

uint64_t sub_100065D80()
{
  _BYTE *v0;

  if (*v0)
    return 0x726579616C70;
  else
    return 1701667175;
}

uint64_t sub_100065DB0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100067414(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100065DD4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100065FB4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100065DFC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100065FB4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t GameDashboardPageIntent.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v18[16];
  _OWORD v19[9];
  uint64_t v20;
  char v21;

  v3 = v1;
  v5 = sub_100003304(&qword_10010ECE8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = a1[3];
  v10 = a1[4];
  sub_100003C28(a1, v9);
  v11 = sub_100065FB4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for GameDashboardPageIntent.CodingKeys, &type metadata for GameDashboardPageIntent.CodingKeys, v11, v9, v10);
  v21 = 0;
  type metadata accessor for Game(0);
  sub_1000662AC(&qword_10010ECF8, (uint64_t)&protocol conformance descriptor for Game);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3);
  if (!v2)
  {
    v12 = v3 + *(int *)(type metadata accessor for GameDashboardPageIntent(0) + 20);
    v13 = *(_OWORD *)(v12 + 112);
    v19[6] = *(_OWORD *)(v12 + 96);
    v19[7] = v13;
    v19[8] = *(_OWORD *)(v12 + 128);
    v20 = *(_QWORD *)(v12 + 144);
    v14 = *(_OWORD *)(v12 + 48);
    v19[2] = *(_OWORD *)(v12 + 32);
    v19[3] = v14;
    v15 = *(_OWORD *)(v12 + 80);
    v19[4] = *(_OWORD *)(v12 + 64);
    v19[5] = v15;
    v16 = *(_OWORD *)(v12 + 16);
    v19[0] = *(_OWORD *)v12;
    v19[1] = v16;
    v18[15] = 1;
    sub_100003C90();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v19);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_100065FB4()
{
  unint64_t result;

  result = qword_10010ECF0;
  if (!qword_10010ECF0)
  {
    result = swift_getWitnessTable(&unk_1000CA80C, &type metadata for GameDashboardPageIntent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010ECF0);
  }
  return result;
}

uint64_t GameDashboardPageIntent.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  char v28;
  _OWORD v29[9];
  uint64_t v30;
  uint64_t v31;

  v25 = a2;
  v26 = type metadata accessor for Game(0);
  __chkstk_darwin(v26);
  v27 = (uint64_t *)((char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v31 = sub_100003304(&qword_10010ED00);
  v5 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for GameDashboardPageIntent(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_100003C28(a1, v11);
  v13 = sub_100065FB4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for GameDashboardPageIntent.CodingKeys, &type metadata for GameDashboardPageIntent.CodingKeys, v13, v11, v12);
  if (v2)
    return sub_100004624(a1);
  v24 = a1;
  v14 = (uint64_t)v10;
  LOBYTE(v29[0]) = 0;
  sub_1000662AC(&qword_10010ED08, (uint64_t)&protocol conformance descriptor for Game);
  v15 = v27;
  v16 = v31;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v27);
  sub_100065C84((uint64_t)v15, v14);
  v28 = 1;
  sub_100004644();
  KeyedDecodingContainer.decode<A>(_:forKey:)(v29);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v16);
  v17 = v14 + *(int *)(v8 + 20);
  v18 = v29[7];
  *(_OWORD *)(v17 + 96) = v29[6];
  *(_OWORD *)(v17 + 112) = v18;
  *(_OWORD *)(v17 + 128) = v29[8];
  *(_QWORD *)(v17 + 144) = v30;
  v19 = v29[3];
  *(_OWORD *)(v17 + 32) = v29[2];
  *(_OWORD *)(v17 + 48) = v19;
  v20 = v29[5];
  *(_OWORD *)(v17 + 64) = v29[4];
  *(_OWORD *)(v17 + 80) = v20;
  v21 = v29[1];
  *(_OWORD *)v17 = v29[0];
  *(_OWORD *)(v17 + 16) = v21;
  sub_100007878(v14, v25, type metadata accessor for GameDashboardPageIntent);
  sub_100004624(v24);
  return sub_1000106F0(v14, type metadata accessor for GameDashboardPageIntent);
}

uint64_t sub_1000662AC(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for Game(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

void sub_1000662EC(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000017;
  a1[1] = 0x80000001000CA640;
}

uint64_t sub_10006630C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return GameDashboardPageIntent.init(from:)(a1, a2);
}

uint64_t sub_100066320(_QWORD *a1)
{
  return GameDashboardPageIntent.encode(to:)(a1);
}

_QWORD *initializeBufferWithCopyOfBuffer for GameDashboardPageIntent(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  char *__dst;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    v8 = a2[5];
    a1[4] = a2[4];
    a1[5] = v8;
    v9 = (int *)type metadata accessor for Game(0);
    v10 = v9[7];
    __dst = (char *)v4 + v10;
    v11 = (char *)a2 + v10;
    v12 = type metadata accessor for Date(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    if (v14(v11, 1, v12))
    {
      v15 = sub_100003304(&qword_10010CC10);
      memcpy(__dst, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(__dst, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
    }
    *(_QWORD *)((char *)v4 + v9[8]) = *(_QWORD *)((char *)a2 + v9[8]);
    *((_BYTE *)v4 + v9[9]) = *((_BYTE *)a2 + v9[9]);
    *((_BYTE *)v4 + v9[10]) = *((_BYTE *)a2 + v9[10]);
    *((_BYTE *)v4 + v9[11]) = *((_BYTE *)a2 + v9[11]);
    *((_BYTE *)v4 + v9[12]) = *((_BYTE *)a2 + v9[12]);
    *((_BYTE *)v4 + v9[13]) = *((_BYTE *)a2 + v9[13]);
    *((_BYTE *)v4 + v9[14]) = *((_BYTE *)a2 + v9[14]);
    v17 = v9[15];
    v18 = (_QWORD *)((char *)v4 + v17);
    v19 = (_QWORD *)((char *)a2 + v17);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    v21 = *(int *)(a3 + 20);
    v22 = (char *)v4 + v21;
    v23 = (_QWORD *)((char *)a2 + v21);
    v24 = *(_QWORD *)((char *)a2 + v21 + 8);
    *(_QWORD *)v22 = *(_QWORD *)((char *)a2 + v21);
    *((_QWORD *)v22 + 1) = v24;
    v25 = *(_QWORD *)((char *)a2 + v21 + 24);
    *((_QWORD *)v22 + 2) = *(_QWORD *)((char *)a2 + v21 + 16);
    *((_QWORD *)v22 + 3) = v25;
    v26 = *(_QWORD *)((char *)a2 + v21 + 40);
    *((_QWORD *)v22 + 4) = *(_QWORD *)((char *)a2 + v21 + 32);
    *((_QWORD *)v22 + 5) = v26;
    v27 = *(_QWORD *)((char *)a2 + v21 + 56);
    *((_QWORD *)v22 + 6) = *(_QWORD *)((char *)a2 + v21 + 48);
    *((_QWORD *)v22 + 7) = v27;
    v28 = *(_QWORD *)((char *)a2 + v21 + 72);
    *((_QWORD *)v22 + 8) = *(_QWORD *)((char *)a2 + v21 + 64);
    *((_QWORD *)v22 + 9) = v28;
    v22[80] = *((_BYTE *)a2 + v21 + 80);
    v29 = *(_QWORD *)((char *)a2 + v21 + 96);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v28);
    if (v29)
    {
      *((_QWORD *)v22 + 11) = v23[11];
      *((_QWORD *)v22 + 12) = v29;
      v30 = v23[14];
      *((_QWORD *)v22 + 13) = v23[13];
      *((_QWORD *)v22 + 14) = v30;
      v31 = v23[16];
      *((_QWORD *)v22 + 15) = v23[15];
      *((_QWORD *)v22 + 16) = v31;
      v32 = v23[18];
      *((_QWORD *)v22 + 17) = v23[17];
      *((_QWORD *)v22 + 18) = v32;
      swift_bridgeObjectRetain(v29);
      swift_bridgeObjectRetain(v30);
      swift_bridgeObjectRetain(v31);
      swift_bridgeObjectRetain(v32);
    }
    else
    {
      v33 = *(_OWORD *)(v23 + 13);
      *(_OWORD *)(v22 + 88) = *(_OWORD *)(v23 + 11);
      *(_OWORD *)(v22 + 104) = v33;
      v34 = *(_OWORD *)(v23 + 17);
      *(_OWORD *)(v22 + 120) = *(_OWORD *)(v23 + 15);
      *(_OWORD *)(v22 + 136) = v34;
    }
  }
  return v4;
}

void destroy for GameDashboardPageIntent(_TtC13GameOverlayUI20GameOverlayUIService **a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  SEL v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  _TtC13GameOverlayUI20GameOverlayUIService **v35;
  SEL v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  SEL v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  SEL v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  SEL v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  SEL v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  const char *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  _TtC13GameOverlayUI20GameOverlayUIService *v78;
  SEL v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  SEL v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  SEL v93;
  id v94;
  id v95;
  id v96;
  id v97;
  id v98;
  id v99;

  swift_bridgeObjectRelease(a1[1], (SEL)a2, a3, a4, a5, a6, a7, a8);
  swift_bridgeObjectRelease(a1[3], v10, v11, v12, v13, v14, v15, v16);
  swift_bridgeObjectRelease(a1[5], v17, v18, v19, v20, v21, v22, v23);
  v24 = type metadata accessor for Game(0);
  v25 = (char *)a1 + *(int *)(v24 + 28);
  v26 = type metadata accessor for Date(0);
  v27 = *(_QWORD *)(v26 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    (*(void (**)(char *, uint64_t))(v27 + 8))(v25, v26);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)((char *)a1 + *(int *)(v24 + 60) + 8), v28, v29, v30, v31, v32, v33, v34);
  v35 = (_TtC13GameOverlayUI20GameOverlayUIService **)((char *)a1 + *(int *)(a2 + 20));
  swift_bridgeObjectRelease(v35[1], v36, v37, v38, v39, v40, v41, v42);
  swift_bridgeObjectRelease(v35[3], v43, v44, v45, v46, v47, v48, v49);
  swift_bridgeObjectRelease(v35[5], v50, v51, v52, v53, v54, v55, v56);
  swift_bridgeObjectRelease(v35[7], v57, v58, v59, v60, v61, v62, v63);
  swift_bridgeObjectRelease(v35[9], v64, v65, v66, v67, v68, v69, v70);
  v78 = v35[12];
  if (v78)
  {
    swift_bridgeObjectRelease(v78, v71, v72, v73, v74, v75, v76, v77);
    swift_bridgeObjectRelease(v35[14], v79, v80, v81, v82, v83, v84, v85);
    swift_bridgeObjectRelease(v35[16], v86, v87, v88, v89, v90, v91, v92);
    swift_bridgeObjectRelease(v35[18], v93, v94, v95, v96, v97, v98, v99);
  }
}

_QWORD *initializeWithCopy for GameDashboardPageIntent(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  char *__dst;

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  v7 = a2[5];
  a1[4] = a2[4];
  a1[5] = v7;
  v8 = (int *)type metadata accessor for Game(0);
  v9 = v8[7];
  __dst = (char *)a1 + v9;
  v10 = (char *)a2 + v9;
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  if (v13(v10, 1, v11))
  {
    v14 = sub_100003304(&qword_10010CC10);
    memcpy(__dst, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(__dst, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
  }
  *(_QWORD *)((char *)a1 + v8[8]) = *(_QWORD *)((char *)a2 + v8[8]);
  *((_BYTE *)a1 + v8[9]) = *((_BYTE *)a2 + v8[9]);
  *((_BYTE *)a1 + v8[10]) = *((_BYTE *)a2 + v8[10]);
  *((_BYTE *)a1 + v8[11]) = *((_BYTE *)a2 + v8[11]);
  *((_BYTE *)a1 + v8[12]) = *((_BYTE *)a2 + v8[12]);
  *((_BYTE *)a1 + v8[13]) = *((_BYTE *)a2 + v8[13]);
  *((_BYTE *)a1 + v8[14]) = *((_BYTE *)a2 + v8[14]);
  v15 = v8[15];
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  v19 = *(int *)(a3 + 20);
  v20 = (char *)a1 + v19;
  v21 = (_QWORD *)((char *)a2 + v19);
  v22 = *(_QWORD *)((char *)a2 + v19 + 8);
  *(_QWORD *)v20 = *(_QWORD *)((char *)a2 + v19);
  *((_QWORD *)v20 + 1) = v22;
  v23 = *(_QWORD *)((char *)a2 + v19 + 24);
  *((_QWORD *)v20 + 2) = *(_QWORD *)((char *)a2 + v19 + 16);
  *((_QWORD *)v20 + 3) = v23;
  v24 = *(_QWORD *)((char *)a2 + v19 + 40);
  *((_QWORD *)v20 + 4) = *(_QWORD *)((char *)a2 + v19 + 32);
  *((_QWORD *)v20 + 5) = v24;
  v25 = *(_QWORD *)((char *)a2 + v19 + 56);
  *((_QWORD *)v20 + 6) = *(_QWORD *)((char *)a2 + v19 + 48);
  *((_QWORD *)v20 + 7) = v25;
  v26 = *(_QWORD *)((char *)a2 + v19 + 72);
  *((_QWORD *)v20 + 8) = *(_QWORD *)((char *)a2 + v19 + 64);
  *((_QWORD *)v20 + 9) = v26;
  v20[80] = *((_BYTE *)a2 + v19 + 80);
  v27 = *(_QWORD *)((char *)a2 + v19 + 96);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v26);
  if (v27)
  {
    *((_QWORD *)v20 + 11) = v21[11];
    *((_QWORD *)v20 + 12) = v27;
    v28 = v21[14];
    *((_QWORD *)v20 + 13) = v21[13];
    *((_QWORD *)v20 + 14) = v28;
    v29 = v21[16];
    *((_QWORD *)v20 + 15) = v21[15];
    *((_QWORD *)v20 + 16) = v29;
    v30 = v21[18];
    *((_QWORD *)v20 + 17) = v21[17];
    *((_QWORD *)v20 + 18) = v30;
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v30);
  }
  else
  {
    v31 = *(_OWORD *)(v21 + 13);
    *(_OWORD *)(v20 + 88) = *(_OWORD *)(v21 + 11);
    *(_OWORD *)(v20 + 104) = v31;
    v32 = *(_OWORD *)(v21 + 17);
    *(_OWORD *)(v20 + 120) = *(_OWORD *)(v21 + 15);
    *(_OWORD *)(v20 + 136) = v32;
  }
  return a1;
}

_QWORD *assignWithCopy for GameDashboardPageIntent(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _TtC13GameOverlayUI20GameOverlayUIService *v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  _TtC13GameOverlayUI20GameOverlayUIService *v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  _TtC13GameOverlayUI20GameOverlayUIService *v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  int *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(char *, uint64_t, uint64_t);
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  _TtC13GameOverlayUI20GameOverlayUIService *v47;
  SEL v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  _TtC13GameOverlayUI20GameOverlayUIService *v59;
  SEL v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  uint64_t v67;
  _TtC13GameOverlayUI20GameOverlayUIService *v68;
  SEL v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  uint64_t v76;
  _TtC13GameOverlayUI20GameOverlayUIService *v77;
  SEL v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  uint64_t v85;
  _TtC13GameOverlayUI20GameOverlayUIService *v86;
  SEL v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  id v93;
  uint64_t v94;
  _TtC13GameOverlayUI20GameOverlayUIService *v95;
  SEL v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  id v102;
  _OWORD *v103;
  __int128 *v104;
  _TtC13GameOverlayUI20GameOverlayUIService *v105;
  uint64_t v106;
  uint64_t v107;
  SEL v108;
  id v109;
  id v110;
  id v111;
  id v112;
  id v113;
  id v114;
  uint64_t v115;
  _TtC13GameOverlayUI20GameOverlayUIService *v116;
  SEL v117;
  id v118;
  id v119;
  id v120;
  id v121;
  id v122;
  id v123;
  uint64_t v124;
  _TtC13GameOverlayUI20GameOverlayUIService *v125;
  SEL v126;
  id v127;
  id v128;
  id v129;
  id v130;
  id v131;
  id v132;
  uint64_t v133;
  _TtC13GameOverlayUI20GameOverlayUIService *v134;
  SEL v135;
  id v136;
  id v137;
  id v138;
  id v139;
  id v140;
  id v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;

  *a1 = *a2;
  v6 = a2[1];
  v7 = (_TtC13GameOverlayUI20GameOverlayUIService *)a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7, v8, v9, v10, v11, v12, v13, v14);
  a1[2] = a2[2];
  v15 = a2[3];
  v16 = (_TtC13GameOverlayUI20GameOverlayUIService *)a1[3];
  a1[3] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16, v17, v18, v19, v20, v21, v22, v23);
  a1[4] = a2[4];
  v24 = a2[5];
  v25 = (_TtC13GameOverlayUI20GameOverlayUIService *)a1[5];
  a1[5] = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25, v26, v27, v28, v29, v30, v31, v32);
  v33 = (int *)type metadata accessor for Game(0);
  v34 = v33[7];
  v35 = (char *)a1 + v34;
  v36 = (char *)a2 + v34;
  v37 = type metadata accessor for Date(0);
  v38 = *(_QWORD *)(v37 - 8);
  v39 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v38 + 48);
  v40 = v39(v35, 1, v37);
  v41 = v39(v36, 1, v37);
  if (v40)
  {
    if (!v41)
    {
      (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v35, v36, v37);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v41)
  {
    (*(void (**)(char *, uint64_t))(v38 + 8))(v35, v37);
LABEL_6:
    v42 = sub_100003304(&qword_10010CC10);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v38 + 24))(v35, v36, v37);
LABEL_7:
  *(_QWORD *)((char *)a1 + v33[8]) = *(_QWORD *)((char *)a2 + v33[8]);
  *((_BYTE *)a1 + v33[9]) = *((_BYTE *)a2 + v33[9]);
  *((_BYTE *)a1 + v33[10]) = *((_BYTE *)a2 + v33[10]);
  *((_BYTE *)a1 + v33[11]) = *((_BYTE *)a2 + v33[11]);
  *((_BYTE *)a1 + v33[12]) = *((_BYTE *)a2 + v33[12]);
  *((_BYTE *)a1 + v33[13]) = *((_BYTE *)a2 + v33[13]);
  *((_BYTE *)a1 + v33[14]) = *((_BYTE *)a2 + v33[14]);
  v43 = v33[15];
  v44 = (_QWORD *)((char *)a1 + v43);
  v45 = (_QWORD *)((char *)a2 + v43);
  *v44 = *v45;
  v46 = v45[1];
  v47 = (_TtC13GameOverlayUI20GameOverlayUIService *)v44[1];
  v44[1] = v46;
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRelease(v47, v48, v49, v50, v51, v52, v53, v54);
  v55 = *(int *)(a3 + 20);
  v56 = (char *)a1 + v55;
  v57 = (char *)a2 + v55;
  *(_QWORD *)v56 = *(_QWORD *)((char *)a2 + v55);
  v58 = *(_QWORD *)((char *)a2 + v55 + 8);
  v59 = *(_TtC13GameOverlayUI20GameOverlayUIService **)((char *)a1 + v55 + 8);
  *((_QWORD *)v56 + 1) = v58;
  swift_bridgeObjectRetain(v58);
  swift_bridgeObjectRelease(v59, v60, v61, v62, v63, v64, v65, v66);
  *((_QWORD *)v56 + 2) = *((_QWORD *)v57 + 2);
  v67 = *((_QWORD *)v57 + 3);
  v68 = (_TtC13GameOverlayUI20GameOverlayUIService *)*((_QWORD *)v56 + 3);
  *((_QWORD *)v56 + 3) = v67;
  swift_bridgeObjectRetain(v67);
  swift_bridgeObjectRelease(v68, v69, v70, v71, v72, v73, v74, v75);
  *((_QWORD *)v56 + 4) = *((_QWORD *)v57 + 4);
  v76 = *((_QWORD *)v57 + 5);
  v77 = (_TtC13GameOverlayUI20GameOverlayUIService *)*((_QWORD *)v56 + 5);
  *((_QWORD *)v56 + 5) = v76;
  swift_bridgeObjectRetain(v76);
  swift_bridgeObjectRelease(v77, v78, v79, v80, v81, v82, v83, v84);
  *((_QWORD *)v56 + 6) = *((_QWORD *)v57 + 6);
  v85 = *((_QWORD *)v57 + 7);
  v86 = (_TtC13GameOverlayUI20GameOverlayUIService *)*((_QWORD *)v56 + 7);
  *((_QWORD *)v56 + 7) = v85;
  swift_bridgeObjectRetain(v85);
  swift_bridgeObjectRelease(v86, v87, v88, v89, v90, v91, v92, v93);
  *((_QWORD *)v56 + 8) = *((_QWORD *)v57 + 8);
  v94 = *((_QWORD *)v57 + 9);
  v95 = (_TtC13GameOverlayUI20GameOverlayUIService *)*((_QWORD *)v56 + 9);
  *((_QWORD *)v56 + 9) = v94;
  swift_bridgeObjectRetain(v94);
  swift_bridgeObjectRelease(v95, v96, v97, v98, v99, v100, v101, v102);
  v56[80] = v57[80];
  v103 = v56 + 88;
  v104 = (__int128 *)(v57 + 88);
  v105 = (_TtC13GameOverlayUI20GameOverlayUIService *)*((_QWORD *)v56 + 12);
  v106 = *((_QWORD *)v57 + 12);
  if (v105)
  {
    if (v106)
    {
      *((_QWORD *)v56 + 11) = *((_QWORD *)v57 + 11);
      v107 = *((_QWORD *)v57 + 12);
      *((_QWORD *)v56 + 12) = v107;
      swift_bridgeObjectRetain(v107);
      swift_bridgeObjectRelease(v105, v108, v109, v110, v111, v112, v113, v114);
      *((_QWORD *)v56 + 13) = *((_QWORD *)v57 + 13);
      v115 = *((_QWORD *)v57 + 14);
      v116 = (_TtC13GameOverlayUI20GameOverlayUIService *)*((_QWORD *)v56 + 14);
      *((_QWORD *)v56 + 14) = v115;
      swift_bridgeObjectRetain(v115);
      swift_bridgeObjectRelease(v116, v117, v118, v119, v120, v121, v122, v123);
      *((_QWORD *)v56 + 15) = *((_QWORD *)v57 + 15);
      v124 = *((_QWORD *)v57 + 16);
      v125 = (_TtC13GameOverlayUI20GameOverlayUIService *)*((_QWORD *)v56 + 16);
      *((_QWORD *)v56 + 16) = v124;
      swift_bridgeObjectRetain(v124);
      swift_bridgeObjectRelease(v125, v126, v127, v128, v129, v130, v131, v132);
      *((_QWORD *)v56 + 17) = *((_QWORD *)v57 + 17);
      v133 = *((_QWORD *)v57 + 18);
      v134 = (_TtC13GameOverlayUI20GameOverlayUIService *)*((_QWORD *)v56 + 18);
      *((_QWORD *)v56 + 18) = v133;
      swift_bridgeObjectRetain(v133);
      swift_bridgeObjectRelease(v134, v135, v136, v137, v138, v139, v140, v141);
    }
    else
    {
      sub_100004244((_QWORD *)v56 + 11);
      v146 = *(_OWORD *)(v57 + 136);
      v148 = *v104;
      v147 = *(_OWORD *)(v57 + 104);
      *(_OWORD *)(v56 + 120) = *(_OWORD *)(v57 + 120);
      *(_OWORD *)(v56 + 136) = v146;
      *v103 = v148;
      *(_OWORD *)(v56 + 104) = v147;
    }
  }
  else if (v106)
  {
    *((_QWORD *)v56 + 11) = *((_QWORD *)v57 + 11);
    v142 = *((_QWORD *)v57 + 12);
    *((_QWORD *)v56 + 12) = v142;
    *((_QWORD *)v56 + 13) = *((_QWORD *)v57 + 13);
    v143 = *((_QWORD *)v57 + 14);
    *((_QWORD *)v56 + 14) = v143;
    *((_QWORD *)v56 + 15) = *((_QWORD *)v57 + 15);
    v144 = *((_QWORD *)v57 + 16);
    *((_QWORD *)v56 + 16) = v144;
    *((_QWORD *)v56 + 17) = *((_QWORD *)v57 + 17);
    v145 = *((_QWORD *)v57 + 18);
    *((_QWORD *)v56 + 18) = v145;
    swift_bridgeObjectRetain(v142);
    swift_bridgeObjectRetain(v143);
    swift_bridgeObjectRetain(v144);
    swift_bridgeObjectRetain(v145);
  }
  else
  {
    v149 = *v104;
    v150 = *(_OWORD *)(v57 + 104);
    v151 = *(_OWORD *)(v57 + 136);
    *(_OWORD *)(v56 + 120) = *(_OWORD *)(v57 + 120);
    *(_OWORD *)(v56 + 136) = v151;
    *v103 = v149;
    *(_OWORD *)(v56 + 104) = v150;
  }
  return a1;
}

_OWORD *initializeWithTake for GameDashboardPageIntent(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  v7 = (int *)type metadata accessor for Game(0);
  v8 = v7[7];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_100003304(&qword_10010CC10);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  *(_QWORD *)((char *)a1 + v7[8]) = *(_QWORD *)((char *)a2 + v7[8]);
  *((_BYTE *)a1 + v7[9]) = *((_BYTE *)a2 + v7[9]);
  *((_BYTE *)a1 + v7[10]) = *((_BYTE *)a2 + v7[10]);
  *((_BYTE *)a1 + v7[11]) = *((_BYTE *)a2 + v7[11]);
  *((_BYTE *)a1 + v7[12]) = *((_BYTE *)a2 + v7[12]);
  *((_BYTE *)a1 + v7[13]) = *((_BYTE *)a2 + v7[13]);
  *((_BYTE *)a1 + v7[14]) = *((_BYTE *)a2 + v7[14]);
  *(_OWORD *)((char *)a1 + v7[15]) = *(_OWORD *)((char *)a2 + v7[15]);
  v14 = *(int *)(a3 + 20);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = *((_OWORD *)v16 + 7);
  *((_OWORD *)v15 + 6) = *((_OWORD *)v16 + 6);
  *((_OWORD *)v15 + 7) = v17;
  *((_OWORD *)v15 + 8) = *((_OWORD *)v16 + 8);
  *((_QWORD *)v15 + 18) = *((_QWORD *)v16 + 18);
  v18 = *((_OWORD *)v16 + 3);
  *((_OWORD *)v15 + 2) = *((_OWORD *)v16 + 2);
  *((_OWORD *)v15 + 3) = v18;
  v19 = *((_OWORD *)v16 + 5);
  *((_OWORD *)v15 + 4) = *((_OWORD *)v16 + 4);
  *((_OWORD *)v15 + 5) = v19;
  v20 = *((_OWORD *)v16 + 1);
  *(_OWORD *)v15 = *(_OWORD *)v16;
  *((_OWORD *)v15 + 1) = v20;
  return a1;
}

_QWORD *assignWithTake for GameDashboardPageIntent(_QWORD *a1, uint64_t a2, int *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t v11;
  _TtC13GameOverlayUI20GameOverlayUIService *v12;
  uint64_t v13;
  _TtC13GameOverlayUI20GameOverlayUIService *v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  _TtC13GameOverlayUI20GameOverlayUIService *v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  int *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(char *, uint64_t, uint64_t);
  int v38;
  int v39;
  const char *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  _TtC13GameOverlayUI20GameOverlayUIService *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  _TtC13GameOverlayUI20GameOverlayUIService *v58;
  SEL v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  uint64_t v66;
  _TtC13GameOverlayUI20GameOverlayUIService *v67;
  SEL v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  uint64_t v75;
  _TtC13GameOverlayUI20GameOverlayUIService *v76;
  SEL v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  uint64_t v84;
  _TtC13GameOverlayUI20GameOverlayUIService *v85;
  SEL v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  uint64_t v93;
  _TtC13GameOverlayUI20GameOverlayUIService *v94;
  SEL v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  const char *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  _TtC13GameOverlayUI20GameOverlayUIService *v109;
  uint64_t v110;
  uint64_t v111;
  _TtC13GameOverlayUI20GameOverlayUIService *v112;
  SEL v113;
  id v114;
  id v115;
  id v116;
  id v117;
  id v118;
  id v119;
  uint64_t v120;
  _TtC13GameOverlayUI20GameOverlayUIService *v121;
  SEL v122;
  id v123;
  id v124;
  id v125;
  id v126;
  id v127;
  id v128;
  uint64_t v129;
  _TtC13GameOverlayUI20GameOverlayUIService *v130;
  SEL v131;
  id v132;
  id v133;
  id v134;
  id v135;
  id v136;
  id v137;
  __int128 v138;
  __int128 v139;

  v11 = *(_QWORD *)(a2 + 8);
  v12 = (_TtC13GameOverlayUI20GameOverlayUIService *)a1[1];
  *a1 = *(_QWORD *)a2;
  a1[1] = v11;
  swift_bridgeObjectRelease(v12, (SEL)a2, a3, a4, a5, a6, a7, a8);
  v13 = *(_QWORD *)(a2 + 24);
  v14 = (_TtC13GameOverlayUI20GameOverlayUIService *)a1[3];
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v13;
  swift_bridgeObjectRelease(v14, v15, v16, v17, v18, v19, v20, v21);
  v22 = *(_QWORD *)(a2 + 40);
  v23 = (_TtC13GameOverlayUI20GameOverlayUIService *)a1[5];
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = v22;
  swift_bridgeObjectRelease(v23, v24, v25, v26, v27, v28, v29, v30);
  v31 = (int *)type metadata accessor for Game(0);
  v32 = v31[7];
  v33 = (char *)a1 + v32;
  v34 = (char *)(a2 + v32);
  v35 = type metadata accessor for Date(0);
  v36 = *(_QWORD *)(v35 - 8);
  v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 48);
  v38 = v37(v33, 1, v35);
  v39 = v37(v34, 1, v35);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v33, v34, v35);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v36 + 8))(v33, v35);
LABEL_6:
    v47 = sub_100003304(&qword_10010CC10);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v36 + 40))(v33, v34, v35);
LABEL_7:
  *(_QWORD *)((char *)a1 + v31[8]) = *(_QWORD *)(a2 + v31[8]);
  *((_BYTE *)a1 + v31[9]) = *(_BYTE *)(a2 + v31[9]);
  *((_BYTE *)a1 + v31[10]) = *(_BYTE *)(a2 + v31[10]);
  *((_BYTE *)a1 + v31[11]) = *(_BYTE *)(a2 + v31[11]);
  *((_BYTE *)a1 + v31[12]) = *(_BYTE *)(a2 + v31[12]);
  *((_BYTE *)a1 + v31[13]) = *(_BYTE *)(a2 + v31[13]);
  *((_BYTE *)a1 + v31[14]) = *(_BYTE *)(a2 + v31[14]);
  v48 = v31[15];
  v49 = (_QWORD *)((char *)a1 + v48);
  v50 = (uint64_t *)(a2 + v48);
  v52 = *v50;
  v51 = v50[1];
  v53 = (_TtC13GameOverlayUI20GameOverlayUIService *)v49[1];
  *v49 = v52;
  v49[1] = v51;
  swift_bridgeObjectRelease(v53, v40, v41, v42, v43, v44, v45, v46);
  v54 = a3[5];
  v55 = (char *)a1 + v54;
  v56 = a2 + v54;
  v57 = *(_QWORD *)(a2 + v54 + 8);
  v58 = *(_TtC13GameOverlayUI20GameOverlayUIService **)((char *)a1 + v54 + 8);
  *(_QWORD *)v55 = *(_QWORD *)(a2 + v54);
  *((_QWORD *)v55 + 1) = v57;
  swift_bridgeObjectRelease(v58, v59, v60, v61, v62, v63, v64, v65);
  v66 = *(_QWORD *)(v56 + 24);
  v67 = (_TtC13GameOverlayUI20GameOverlayUIService *)*((_QWORD *)v55 + 3);
  *((_QWORD *)v55 + 2) = *(_QWORD *)(v56 + 16);
  *((_QWORD *)v55 + 3) = v66;
  swift_bridgeObjectRelease(v67, v68, v69, v70, v71, v72, v73, v74);
  v75 = *(_QWORD *)(v56 + 40);
  v76 = (_TtC13GameOverlayUI20GameOverlayUIService *)*((_QWORD *)v55 + 5);
  *((_QWORD *)v55 + 4) = *(_QWORD *)(v56 + 32);
  *((_QWORD *)v55 + 5) = v75;
  swift_bridgeObjectRelease(v76, v77, v78, v79, v80, v81, v82, v83);
  v84 = *(_QWORD *)(v56 + 56);
  v85 = (_TtC13GameOverlayUI20GameOverlayUIService *)*((_QWORD *)v55 + 7);
  *((_QWORD *)v55 + 6) = *(_QWORD *)(v56 + 48);
  *((_QWORD *)v55 + 7) = v84;
  swift_bridgeObjectRelease(v85, v86, v87, v88, v89, v90, v91, v92);
  v93 = *(_QWORD *)(v56 + 72);
  v94 = (_TtC13GameOverlayUI20GameOverlayUIService *)*((_QWORD *)v55 + 9);
  *((_QWORD *)v55 + 8) = *(_QWORD *)(v56 + 64);
  *((_QWORD *)v55 + 9) = v93;
  swift_bridgeObjectRelease(v94, v95, v96, v97, v98, v99, v100, v101);
  v55[80] = *(_BYTE *)(v56 + 80);
  v109 = (_TtC13GameOverlayUI20GameOverlayUIService *)*((_QWORD *)v55 + 12);
  if (!v109)
  {
LABEL_11:
    v138 = *(_OWORD *)(v56 + 104);
    *(_OWORD *)(v55 + 88) = *(_OWORD *)(v56 + 88);
    *(_OWORD *)(v55 + 104) = v138;
    v139 = *(_OWORD *)(v56 + 136);
    *(_OWORD *)(v55 + 120) = *(_OWORD *)(v56 + 120);
    *(_OWORD *)(v55 + 136) = v139;
    return a1;
  }
  v110 = *(_QWORD *)(v56 + 96);
  if (!v110)
  {
    sub_100004244((_QWORD *)v55 + 11);
    goto LABEL_11;
  }
  *((_QWORD *)v55 + 11) = *(_QWORD *)(v56 + 88);
  *((_QWORD *)v55 + 12) = v110;
  swift_bridgeObjectRelease(v109, v102, v103, v104, v105, v106, v107, v108);
  v111 = *(_QWORD *)(v56 + 112);
  v112 = (_TtC13GameOverlayUI20GameOverlayUIService *)*((_QWORD *)v55 + 14);
  *((_QWORD *)v55 + 13) = *(_QWORD *)(v56 + 104);
  *((_QWORD *)v55 + 14) = v111;
  swift_bridgeObjectRelease(v112, v113, v114, v115, v116, v117, v118, v119);
  v120 = *(_QWORD *)(v56 + 128);
  v121 = (_TtC13GameOverlayUI20GameOverlayUIService *)*((_QWORD *)v55 + 16);
  *((_QWORD *)v55 + 15) = *(_QWORD *)(v56 + 120);
  *((_QWORD *)v55 + 16) = v120;
  swift_bridgeObjectRelease(v121, v122, v123, v124, v125, v126, v127, v128);
  v129 = *(_QWORD *)(v56 + 144);
  v130 = (_TtC13GameOverlayUI20GameOverlayUIService *)*((_QWORD *)v55 + 18);
  *((_QWORD *)v55 + 17) = *(_QWORD *)(v56 + 136);
  *((_QWORD *)v55 + 18) = v129;
  swift_bridgeObjectRelease(v130, v131, v132, v133, v134, v135, v136, v137);
  return a1;
}

uint64_t getEnumTagSinglePayload for GameDashboardPageIntent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000670F8);
}

uint64_t sub_1000670F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for Game(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for GameDashboardPageIntent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100067184);
}

uint64_t sub_100067184(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Game(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_100067200(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for Game(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1000CA730;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for GameDashboardPageIntent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000672BC + 4 * byte_1000CA655[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000672F0 + 4 * byte_1000CA650[v4]))();
}

uint64_t sub_1000672F0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000672F8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100067300);
  return result;
}

uint64_t sub_10006730C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100067314);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100067318(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100067320(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GameDashboardPageIntent.CodingKeys()
{
  return &type metadata for GameDashboardPageIntent.CodingKeys;
}

unint64_t sub_100067340()
{
  unint64_t result;

  result = qword_10010EDA0;
  if (!qword_10010EDA0)
  {
    result = swift_getWitnessTable(&unk_1000CA7E4, &type metadata for GameDashboardPageIntent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010EDA0);
  }
  return result;
}

unint64_t sub_100067388()
{
  unint64_t result;

  result = qword_10010EDA8;
  if (!qword_10010EDA8)
  {
    result = swift_getWitnessTable(&unk_1000CA754, &type metadata for GameDashboardPageIntent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010EDA8);
  }
  return result;
}

unint64_t sub_1000673D0()
{
  unint64_t result;

  result = qword_10010EDB0;
  if (!qword_10010EDB0)
  {
    result = swift_getWitnessTable(&unk_1000CA77C, &type metadata for GameDashboardPageIntent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010EDB0);
  }
  return result;
}

uint64_t sub_100067414(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 1701667175 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701667175, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x726579616C70 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x726579616C70, 0xE600000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1000674EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t OpaqueTypeConformance2;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v2 = v1;
  v71 = a1;
  v3 = sub_100003304(&qword_10010CA78);
  v4 = __chkstk_darwin(v3);
  v6 = (uint64_t *)((char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v70 = type metadata accessor for OnboardingOverlayView(0, v4);
  v68 = *(_QWORD *)(v70 - 8);
  __chkstk_darwin(v70);
  v65 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v67 = (char *)&v61 - v9;
  v73 = sub_100003304(&qword_10010EE80);
  __chkstk_darwin(v73);
  v69 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DashboardContentView(0);
  v12 = *(char **)(v11 - 8);
  v13 = *((_QWORD *)v12 + 8);
  __chkstk_darwin(v11);
  v14 = sub_100003304(&qword_10010CC18);
  __chkstk_darwin(v14);
  v16 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = sub_100003304(&qword_10010EE88);
  v63 = *(_QWORD *)(v72 - 8);
  __chkstk_darwin(v72);
  v18 = (char *)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100003304(&qword_10010EE90);
  v66 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v62 = (char *)&v61 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v64 = (char *)&v61 - v22;
  v23 = v1 + *(int *)(v11 + 32);
  v24 = *(_BYTE *)v23;
  v25 = *(_QWORD *)(v23 + 8);
  LOBYTE(v74) = v24;
  v75 = v25;
  sub_100003304(&qword_10010CDA0);
  State.wrappedValue.getter(&v78);
  if (v78 == 1)
  {
    sub_100010CBC(v1, (uint64_t)v16, &qword_10010CC18);
    sub_10006B0A0(v1, (uint64_t)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
    v26 = v12[80];
    v27 = (v26 + 16) & ~v26;
    v28 = swift_allocObject(&unk_1000FF2B8, v27 + v13, v26 | 7);
    sub_10006B0E8((uint64_t)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v28 + v27);
    v29 = type metadata accessor for FlowAction(0);
    v30 = sub_100003304(&qword_10010EEB0);
    v31 = sub_1000035B4(&qword_10010E750, type metadata accessor for FlowAction, (uint64_t)&protocol conformance descriptor for FlowAction);
    v32 = sub_1000035B4(&qword_10010E758, type metadata accessor for FlowAction, (uint64_t)&protocol conformance descriptor for FlowAction);
    v33 = sub_100011054(&qword_10010EEB8, &qword_10010EEB0, (uint64_t)&unk_1000CA9C8);
    FlowView.init<>(following:destinations:)(v16, sub_10006B2EC, v28, v29, v30, v31, v32, v33);
    v34 = type metadata accessor for DeepLinkWithReferrerIntent(0);
    v35 = sub_100011054(&qword_10010EE98, &qword_10010EE88, (uint64_t)&protocol conformance descriptor for FlowView<A, B, C>);
    v36 = sub_1000035B4(&qword_10010EEA0, type metadata accessor for DeepLinkWithReferrerIntent, (uint64_t)&protocol conformance descriptor for DeepLinkWithReferrerIntent);
    v37 = v62;
    v38 = v72;
    View.onDeepLink<A>(prepare:recover:)(&unk_10010EEC0, 0, sub_10006884C, 0, v72, v34, v35, v36);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v18, v38);
    v39 = v66;
    v40 = v64;
    (*(void (**)(char *, char *, uint64_t))(v66 + 32))(v64, v37, v19);
    v41 = v69;
    (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v69, v40, v19);
    swift_storeEnumTagMultiPayload(v41, v73, 0);
    v74 = v38;
    v75 = v34;
    v76 = v35;
    v77 = v36;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v74, &opaque type descriptor for <<opaque return type of View.onDeepLink<A>(prepare:recover:)>>, 1);
    v43 = sub_1000035B4(&qword_10010EEA8, (uint64_t (*)(uint64_t))&type metadata accessor for OnboardingOverlayView, (uint64_t)&protocol conformance descriptor for OnboardingOverlayView);
    _ConditionalContent<>.init(storage:)(v41, v19, v70, OpaqueTypeConformance2, v43);
    return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v40, v19);
  }
  else
  {
    v64 = v12;
    v66 = v19;
    v45 = v70;
    sub_100010CBC(v1 + *(int *)(v11 + 24), (uint64_t)v6, &qword_10010CA78);
    v46 = type metadata accessor for Game(0);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 48))(v6, 1, v46) == 1)
    {
      sub_100010ED0((uint64_t)v6, &qword_10010CA78);
      v47 = 0;
      v48 = 0xE000000000000000;
    }
    else
    {
      v47 = *v6;
      v48 = v6[1];
      swift_bridgeObjectRetain(v48);
      sub_10006A704((uint64_t)v6);
    }
    v49 = v69;
    sub_10006B0A0(v2, (uint64_t)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
    v50 = v64[80];
    v51 = (v50 + 16) & ~v50;
    v52 = swift_allocObject(&unk_1000FF290, v51 + v13, v50 | 7);
    sub_10006B0E8((uint64_t)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v52 + v51);
    v53 = v65;
    OnboardingOverlayView.init(gameBundleID:dismissAction:)(v47, v48, sub_10006B12C, v52);
    v55 = v67;
    v54 = v68;
    (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v67, v53, v45);
    (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v49, v55, v45);
    swift_storeEnumTagMultiPayload(v49, v73, 1);
    v56 = type metadata accessor for DeepLinkWithReferrerIntent(255);
    v57 = sub_100011054(&qword_10010EE98, &qword_10010EE88, (uint64_t)&protocol conformance descriptor for FlowView<A, B, C>);
    v58 = sub_1000035B4(&qword_10010EEA0, type metadata accessor for DeepLinkWithReferrerIntent, (uint64_t)&protocol conformance descriptor for DeepLinkWithReferrerIntent);
    v74 = v72;
    v75 = v56;
    v76 = v57;
    v77 = v58;
    v59 = swift_getOpaqueTypeConformance2(&v74, &opaque type descriptor for <<opaque return type of View.onDeepLink<A>(prepare:recover:)>>, 1);
    v60 = sub_1000035B4(&qword_10010EEA8, (uint64_t (*)(uint64_t))&type metadata accessor for OnboardingOverlayView, (uint64_t)&protocol conformance descriptor for OnboardingOverlayView);
    _ConditionalContent<>.init(storage:)(v49, v66, v45, v59, v60);
    return (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v55, v45);
  }
}

double sub_100067B70(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double result;
  uint64_t v17;

  v2 = type metadata accessor for DashboardContentView(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003304(&qword_10010EB20);
  __chkstk_darwin(v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  sub_10006B0A0(a1, (uint64_t)v5);
  v10 = type metadata accessor for MainActor(0);
  v11 = static MainActor.shared.getter(v10);
  v12 = *(unsigned __int8 *)(v3 + 80);
  v13 = (v12 + 32) & ~v12;
  v14 = swift_allocObject(&unk_1000FF308, v13 + v4, v12 | 7);
  *(_QWORD *)(v14 + 16) = v11;
  *(_QWORD *)(v14 + 24) = &protocol witness table for MainActor;
  sub_10006B0E8((uint64_t)v5, v14 + v13);
  v15 = sub_100028240((uint64_t)v8, (uint64_t)&unk_10010EED8, v14);
  *(_QWORD *)&result = swift_release(v15).n128_u64[0];
  return result;
}

uint64_t sub_100067CA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4[34] = a4;
  v5 = *(_QWORD *)(type metadata accessor for DashboardContentView(0) - 8);
  v4[35] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v4[36] = v6;
  v4[37] = swift_task_alloc((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003304(&qword_10010EB20);
  v4[38] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for MainActor(0);
  v4[39] = v8;
  v4[40] = static MainActor.shared.getter(v8);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v8, &protocol witness table for MainActor);
  v4[41] = v9;
  v4[42] = v10;
  return swift_task_switch(sub_100067D60, v9, v10);
}

uint64_t sub_100067D60()
{
  uint64_t v0;
  void *v1;
  id v2;
  _TtC13GameOverlayUI20GameOverlayUIService *v3;
  const char *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  SEL v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  unint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;

  v1 = (void *)objc_opt_self(GKLocalPlayer);
  v2 = objc_msgSend(v1, "authenticatedLocalPlayers");
  v3 = (_TtC13GameOverlayUI20GameOverlayUIService *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, (char *)&type metadata for Any + 8);

  if (!v3[1].super.isa)
  {
    *(_OWORD *)(v0 + 224) = 0u;
    *(_OWORD *)(v0 + 240) = 0u;
    swift_bridgeObjectRelease(v3, v4, v5, v6, v7, v8, v9, v10);
    goto LABEL_6;
  }
  sub_100031EE0((uint64_t)&v3[2], v0 + 224);
  swift_bridgeObjectRelease(v3, v11, v12, v13, v14, v15, v16, v17);
  if (!*(_QWORD *)(v0 + 248))
  {
LABEL_6:
    sub_100010ED0(v0 + 224, &qword_10010EB30);
    goto LABEL_7;
  }
  v18 = sub_10006BBB4();
  if (swift_dynamicCast(v0 + 264, v0 + 224, (char *)&type metadata for Any + 8, v18, 6))
  {
    v19 = *(id *)(v0 + 264);
    goto LABEL_9;
  }
LABEL_7:
  v19 = objc_msgSend(v1, "currentLocalPlayer");
  if (!v19)
    v19 = objc_msgSend(v1, "local");
LABEL_9:
  *(_QWORD *)(v0 + 344) = v19;
  if ((objc_msgSend(v19, "isAuthenticated") & 1) != 0)
  {
    swift_release(*(_QWORD *)(v0 + 320));
    v20 = *(void **)(v0 + 344);
    v21 = *(_QWORD *)(v0 + 304);
    v23 = *(_QWORD *)(v0 + 288);
    v22 = *(_QWORD *)(v0 + 296);
    v24 = *(_QWORD *)(v0 + 272);
    v25 = *(_QWORD *)(v0 + 280);
    v26 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v21, 1, 1, v26);
    sub_10006B0A0(v24, v22);
    v27 = v20;
    v28 = static MainActor.shared.getter(v27);
    v29 = *(unsigned __int8 *)(v25 + 80);
    v30 = (v29 + 32) & ~v29;
    v31 = (v23 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
    v32 = swift_allocObject(&unk_1000FF360, v31 + 8, v29 | 7);
    *(_QWORD *)(v32 + 16) = v28;
    *(_QWORD *)(v32 + 24) = &protocol witness table for MainActor;
    sub_10006B0E8(v22, v32 + v30);
    *(_QWORD *)(v32 + v31) = v27;
    v33 = sub_100028240(v21, (uint64_t)&unk_10010EEE8, v32);
    swift_release(v33);

    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v35 = v0 + 16;
    *(_QWORD *)(v0 + 56) = v0 + 352;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_100068004;
    v36 = swift_continuation_init(v0 + 16, 0);
    *(_QWORD *)(v0 + 184) = _NSConcreteStackBlock;
    v37 = (_QWORD *)(v0 + 184);
    v37[1] = 0x40000000;
    v37[2] = sub_10006834C;
    v37[3] = &unk_1000FF320;
    v37[4] = v36;
    objc_msgSend(v19, "refreshInternalWithCompletion:", v37);
    return swift_continuation_await(v35);
  }
}

uint64_t sub_100068004()
{
  uint64_t v0;

  return swift_task_switch(sub_100068048, *(_QWORD *)(*(_QWORD *)v0 + 328), *(_QWORD *)(*(_QWORD *)v0 + 336));
}

uint64_t sub_100068048()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  _QWORD *v19;

  if ((*(_BYTE *)(v0 + 352) & 1) != 0)
  {
    swift_release(*(_QWORD *)(v0 + 320));
    v1 = *(void **)(v0 + 344);
    v2 = *(_QWORD *)(v0 + 304);
    v4 = *(_QWORD *)(v0 + 288);
    v3 = *(_QWORD *)(v0 + 296);
    v5 = *(_QWORD *)(v0 + 272);
    v6 = *(_QWORD *)(v0 + 280);
    v7 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v2, 1, 1, v7);
    sub_10006B0A0(v5, v3);
    v8 = v1;
    v9 = static MainActor.shared.getter(v8);
    v10 = *(unsigned __int8 *)(v6 + 80);
    v11 = (v10 + 32) & ~v10;
    v12 = (v4 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
    v13 = swift_allocObject(&unk_1000FF360, v12 + 8, v10 | 7);
    *(_QWORD *)(v13 + 16) = v9;
    *(_QWORD *)(v13 + 24) = &protocol witness table for MainActor;
    sub_10006B0E8(v3, v13 + v11);
    *(_QWORD *)(v13 + v12) = v8;
    v14 = sub_100028240(v2, (uint64_t)&unk_10010EEE8, v13);
    swift_release(v14);

    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v16 = v0 + 80;
    v17 = *(void **)(v0 + 344);
    *(_QWORD *)(v0 + 120) = v0 + 256;
    *(_QWORD *)(v0 + 80) = v0;
    *(_QWORD *)(v0 + 88) = sub_1000681F0;
    v18 = swift_continuation_init(v0 + 80, 0);
    *(_QWORD *)(v0 + 144) = _NSConcreteStackBlock;
    v19 = (_QWORD *)(v0 + 144);
    v19[1] = 0x40000000;
    v19[2] = sub_100068360;
    v19[3] = &unk_1000FF338;
    v19[4] = v18;
    objc_msgSend(v17, "loadProfileDiscardingStaleData:completionHandler:", 1, v19);
    return swift_continuation_await(v16);
  }
}

uint64_t sub_1000681F0()
{
  uint64_t v0;

  return swift_task_switch(sub_100068234, *(_QWORD *)(*(_QWORD *)v0 + 328), *(_QWORD *)(*(_QWORD *)v0 + 336));
}

uint64_t sub_100068234()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  swift_release(*(_QWORD *)(v0 + 320));
  swift_errorRelease(*(_QWORD *)(v0 + 256));
  v1 = *(void **)(v0 + 344);
  v2 = *(_QWORD *)(v0 + 304);
  v4 = *(_QWORD *)(v0 + 288);
  v3 = *(_QWORD *)(v0 + 296);
  v5 = *(_QWORD *)(v0 + 272);
  v6 = *(_QWORD *)(v0 + 280);
  v7 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v2, 1, 1, v7);
  sub_10006B0A0(v5, v3);
  v8 = v1;
  v9 = static MainActor.shared.getter(v8);
  v10 = *(unsigned __int8 *)(v6 + 80);
  v11 = (v10 + 32) & ~v10;
  v12 = (v4 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = swift_allocObject(&unk_1000FF360, v12 + 8, v10 | 7);
  *(_QWORD *)(v13 + 16) = v9;
  *(_QWORD *)(v13 + 24) = &protocol witness table for MainActor;
  sub_10006B0E8(v3, v13 + v11);
  *(_QWORD *)(v13 + v12) = v8;
  v14 = sub_100028240(v2, (uint64_t)&unk_10010EEE8, v13);
  swift_release(v14);

  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006834C(uint64_t a1, char a2)
{
  **(_BYTE **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) + 40) = a2;
  return swift_continuation_resume();
}

uint64_t sub_100068360(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)(a1 + 32);
  **(_QWORD **)(*(_QWORD *)(v2 + 64) + 40) = a2;
  v3 = a2;
  return swift_continuation_resume(v2);
}

uint64_t sub_100068390(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[4] = a4;
  v5[5] = a5;
  v6 = type metadata accessor for MainActor(0);
  v5[6] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000683FC, v7, v8);
}

uint64_t sub_1000683FC()
{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 v2;
  uint64_t v3;
  char *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void (**v9)(_QWORD *);

  v1 = *(_QWORD *)(v0 + 32);
  v2 = objc_msgSend(*(id *)(v0 + 40), "isAuthenticated", swift_release(*(_QWORD *)(v0 + 48)).n128_f64[0]);
  v3 = type metadata accessor for DashboardContentView(0);
  v4 = (char *)(v1 + *(int *)(v3 + 32));
  v5 = *v4;
  v6 = *((_QWORD *)v4 + 1);
  *(_BYTE *)(v0 + 56) = v2;
  *(_BYTE *)(v0 + 16) = v5;
  *(_QWORD *)(v0 + 24) = v6;
  v7 = sub_100003304(&qword_10010CDA0);
  State.wrappedValue.setter(v0 + 56, v7);
  *(_BYTE *)(v0 + 16) = v5;
  *(_QWORD *)(v0 + 24) = v6;
  v8 = State.wrappedValue.getter((_QWORD *)(v0 + 56));
  if ((*(_BYTE *)(v0 + 56) & 1) == 0)
  {
    v9 = (void (**)(_QWORD *))(*(_QWORD *)(v0 + 32) + *(int *)(v3 + 28));
    if (*v9)
      (*v9)(v8);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000684D8@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t KeyPath;
  int *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t (**v24)@<X0>(uint64_t@<X8>);
  uint64_t v26;
  __int128 v27[2];

  v6 = sub_100003304(&qword_10010EEC8);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for DashboardContentView(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v13 = (uint64_t *)(a2 + *(int *)(v12 + 28));
  v14 = *v13;
  v15 = v13[1];
  sub_10005C5DC(a1, (uint64_t)v27);
  sub_10006B0A0(a2, (uint64_t)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = *(unsigned __int8 *)(v10 + 80);
  v17 = (v16 + 56) & ~v16;
  v18 = swift_allocObject(&unk_1000FF2E0, v17 + v11, v16 | 7);
  sub_10005A194(v27, v18 + 16);
  sub_10006B0E8((uint64_t)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v18 + v17);
  *v8 = swift_getKeyPath(&unk_1000CA920);
  v19 = sub_100003304(&qword_10010D4C8);
  swift_storeEnumTagMultiPayload(v8, v19, 0);
  KeyPath = swift_getKeyPath(&unk_1000CA950);
  sub_10006B700((uint64_t)v8, a3);
  v21 = (int *)sub_100003304(&qword_10010EEB0);
  v22 = a3 + v21[9];
  *(_QWORD *)v22 = KeyPath;
  *(_BYTE *)(v22 + 8) = 0;
  v23 = (uint64_t *)(a3 + v21[10]);
  *v23 = v14;
  v23[1] = v15;
  v24 = (uint64_t (**)@<X0>(uint64_t@<X8>))(a3 + v21[11]);
  *v24 = sub_10006B4D8;
  v24[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v18;
  return sub_10001B3C0(v14, v15);
}

uint64_t sub_100068680@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t result;
  uint64_t v9;
  _BYTE v10[2];
  _BYTE v11[24];
  uint64_t v12;

  sub_10005C5DC(a1, (uint64_t)v11);
  if (v12)
  {
    sub_100010ED0((uint64_t)v11, &qword_10010E858);
    v10[0] = 1;
  }
  else
  {
    v10[0] = 0;
  }
  v3 = _ConditionalContent<>.init(storage:)(v10, &type metadata for EmptyView, &type metadata for EmptyView, &protocol witness table for EmptyView, &protocol witness table for EmptyView);
  v4 = v10[1];
  v5 = static SafeAreaRegions.all.getter(v3);
  v6 = static Edge.Set.all.getter(v5);
  v7 = v6;
  result = static Alignment.center.getter(v6);
  *(_BYTE *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v5;
  *(_BYTE *)(a2 + 16) = v7;
  *(_QWORD *)(a2 + 24) = result;
  *(_QWORD *)(a2 + 32) = v9;
  return result;
}

uint64_t sub_100068728(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[2] = a1;
  v2[3] = a2;
  v3 = type metadata accessor for URL(0);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DeepLink(0);
  v2[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[8] = v6;
  v2[9] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000687B0, 0, 0);
}

uint64_t sub_1000687B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(v0 + 64);
  v1 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 32);
  v6 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 16);
  v8 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v1, *(_QWORD *)(v0 + 24), v3);
  DeepLink.url.getter(v8);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v7, v4, v5);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006884C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  a4[3] = type metadata accessor for Models.AlertAction(0);
  a4[4] = &protocol witness table for Models.AlertAction;
  sub_1000052B0(a4);
  swift_errorRetain(a1);
  swift_retain(a3);
  return Models.AlertAction.init(contentUnavailableError:retry:)(a1, a2, a3);
}

uint64_t sub_1000688C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t WitnessTable;
  uint64_t v14;
  unint64_t v15;
  uint64_t OpaqueTypeConformance2;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void (*v34)(char *, uint64_t);
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45[16];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v44 = a2;
  v4 = *(_QWORD *)(a1 + 16);
  v43 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(a1);
  v6 = (char *)v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100006E54(&qword_10010EF88);
  v8 = type metadata accessor for ModifiedContent(0, v4, v7);
  v42 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v41 = (char *)v36 - v9;
  v10 = sub_100006E54(&qword_10010EF90);
  v11 = *(_QWORD *)(a1 + 24);
  v38 = v10;
  v39 = v11;
  v12 = sub_100011054(&qword_10010EF98, &qword_10010EF88, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
  v53 = v11;
  v54 = v12;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
  v37 = WitnessTable;
  v14 = sub_100006E54(&qword_10010EFA0);
  v15 = sub_10006C7D8();
  v49 = v14;
  v50 = v15;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v49, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
  v49 = v8;
  v50 = v10;
  v51 = WitnessTable;
  v52 = OpaqueTypeConformance2;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v49, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 0);
  v40 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2);
  v19 = (char *)v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v20);
  v23 = (char *)v36 - v22;
  v24 = (*(uint64_t (**)(__n128))(v2 + *(int *)(a1 + 44)))(v21);
  v25 = static Alignment.center.getter(v24);
  v27 = v26;
  v28 = sub_10006C884();
  v29 = v41;
  v30 = v27;
  v31 = v39;
  View.background<A>(_:alignment:)(v28, v25, v30, v4, &type metadata for BackgroundRemover, v39, v28);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v6, v4);
  v46 = v4;
  v47 = v31;
  v32 = v37;
  v48 = v36[1];
  v33 = v38;
  View.toolbar<A>(content:)(sub_10006C8C8, v45, v8, v38, v37, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v29, v8);
  v49 = v8;
  v50 = v33;
  v51 = v32;
  v52 = OpaqueTypeConformance2;
  swift_getOpaqueTypeConformance2(&v49, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
  sub_1000BDDC4((uint64_t)v19, OpaqueTypeMetadata2, (uint64_t)v23);
  v34 = *(void (**)(char *, uint64_t))(v40 + 8);
  v34(v19, OpaqueTypeMetadata2);
  sub_1000BB270((uint64_t)v23, OpaqueTypeMetadata2, v44);
  return ((uint64_t (*)(char *, uint64_t))v34)(v23, OpaqueTypeMetadata2);
}

uint64_t sub_100068BA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  _QWORD *v50;
  _BYTE *v51;
  _BYTE *v52;
  uint64_t v53;
  unsigned int v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  void (*v60)(_BYTE *, uint64_t);
  _BYTE *v61;
  _BYTE *v62;
  uint64_t v63;
  char v64;
  void (*v65)(_BYTE *, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t OpaqueTypeConformance2;
  unint64_t v81;
  _BYTE v83[12];
  int v84;
  _BYTE *v85;
  _BYTE *v86;
  _BYTE *v87;
  uint64_t v88;
  uint64_t v89;
  _BYTE *v90;
  uint64_t v91;
  void (*v92)(_BYTE *, _QWORD, uint64_t);
  void (*v93)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v94;
  _BYTE *v95;
  _QWORD *v96;
  uint64_t v97;
  _BYTE *v98;
  _BYTE *v99;
  uint64_t v100;
  _BYTE *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;

  v102 = a4;
  v7 = type metadata accessor for ToolbarItemPlacement(0);
  __chkstk_darwin(v7);
  v87 = &v83[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v97 = sub_100003304(&qword_10010EFB0);
  v91 = *(_QWORD *)(v97 - 8);
  __chkstk_darwin(v97);
  v89 = a3;
  v90 = &v83[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v88 = a2;
  v11 = type metadata accessor for FlowViewContentContainer(0, a2, a3, v10);
  v104 = *(_QWORD *)(v11 - 8);
  v105 = v11;
  v12 = __chkstk_darwin(v11);
  v101 = &v83[-v13];
  v14 = type metadata accessor for PresentationSource(0, v12);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v86 = &v83[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = sub_100003304(&qword_10010EFC8);
  __chkstk_darwin(v17);
  v95 = &v83[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v19);
  v21 = &v83[-v20];
  v22 = sub_100003304(&qword_10010D4D0);
  __chkstk_darwin(v22);
  v85 = &v83[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v24);
  v26 = &v83[-v25];
  __chkstk_darwin(v27);
  v96 = &v83[-v28];
  __chkstk_darwin(v29);
  v31 = &v83[-v30];
  __chkstk_darwin(v32);
  v34 = &v83[-v33];
  __chkstk_darwin(v35);
  v37 = &v83[-v36];
  v100 = sub_100003304(&qword_10010EFA0);
  __chkstk_darwin(v100);
  v98 = &v83[-((v38 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v39);
  v99 = &v83[-v40];
  v103 = a1;
  sub_10003111C(v37);
  v92 = *(void (**)(_BYTE *, _QWORD, uint64_t))(v15 + 104);
  v92(v34, enum case for PresentationSource.sheet(_:), v14);
  v93 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v15 + 56);
  v93(v34, 0, 1, v14);
  v94 = v17;
  v41 = (uint64_t)&v21[*(int *)(v17 + 48)];
  sub_100010CBC((uint64_t)v37, (uint64_t)v21, &qword_10010D4D0);
  sub_100010CBC((uint64_t)v34, v41, &qword_10010D4D0);
  v42 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v42((uint64_t)v21, 1, v14) == 1)
  {
    sub_100010ED0((uint64_t)v34, &qword_10010D4D0);
    sub_100010ED0((uint64_t)v37, &qword_10010D4D0);
    if (v42(v41, 1, v14) == 1)
    {
      sub_100010ED0((uint64_t)v21, &qword_10010D4D0);
      v43 = v104;
      v44 = v101;
      v45 = v105;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v104 + 16))(v101, v103, v105);
      v46 = v44;
      v47 = v97;
      v48 = v100;
LABEL_14:
      (*(void (**)(_BYTE *, uint64_t))(v43 + 8))(v46, v45);
      goto LABEL_16;
    }
    goto LABEL_6;
  }
  sub_100010CBC((uint64_t)v21, (uint64_t)v31, &qword_10010D4D0);
  if (v42(v41, 1, v14) == 1)
  {
    sub_100010ED0((uint64_t)v34, &qword_10010D4D0);
    sub_100010ED0((uint64_t)v37, &qword_10010D4D0);
    (*(void (**)(_BYTE *, uint64_t))(v15 + 8))(v31, v14);
LABEL_6:
    sub_100010ED0((uint64_t)v21, &qword_10010EFC8);
    v49 = v101;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v104 + 16))(v101, v103, v105);
    v46 = v49;
    v47 = v97;
    goto LABEL_7;
  }
  v58 = v86;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v15 + 32))(v86, v41, v14);
  v59 = sub_1000035B4(&qword_10010F008, (uint64_t (*)(uint64_t))&type metadata accessor for PresentationSource, (uint64_t)&protocol conformance descriptor for PresentationSource);
  v84 = dispatch thunk of static Equatable.== infix(_:_:)(v31, v58, v14, v59);
  v60 = *(void (**)(_BYTE *, uint64_t))(v15 + 8);
  v60(v58, v14);
  sub_100010ED0((uint64_t)v34, &qword_10010D4D0);
  sub_100010ED0((uint64_t)v37, &qword_10010D4D0);
  v60(v31, v14);
  sub_100010ED0((uint64_t)v21, &qword_10010D4D0);
  v43 = v104;
  v61 = v101;
  v45 = v105;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v104 + 16))(v101, v103, v105);
  v46 = v61;
  v47 = v97;
  v48 = v100;
  if ((v84 & 1) != 0)
    goto LABEL_14;
LABEL_7:
  v50 = v96;
  v51 = v46;
  sub_10003111C(v96);
  v92(v26, enum case for PresentationSource.popover(_:), v14);
  v93(v26, 0, 1, v14);
  v52 = v95;
  v53 = (uint64_t)&v95[*(int *)(v94 + 48)];
  sub_100010CBC((uint64_t)v50, (uint64_t)v95, &qword_10010D4D0);
  sub_100010CBC((uint64_t)v26, v53, &qword_10010D4D0);
  if (v42((uint64_t)v52, 1, v14) != 1)
  {
    v55 = v85;
    sub_100010CBC((uint64_t)v52, (uint64_t)v85, &qword_10010D4D0);
    if (v42(v53, 1, v14) != 1)
    {
      v62 = v86;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v15 + 32))(v86, v53, v14);
      v63 = sub_1000035B4(&qword_10010F008, (uint64_t (*)(uint64_t))&type metadata accessor for PresentationSource, (uint64_t)&protocol conformance descriptor for PresentationSource);
      v64 = dispatch thunk of static Equatable.== infix(_:_:)(v55, v62, v14, v63);
      v65 = *(void (**)(_BYTE *, uint64_t))(v15 + 8);
      v65(v62, v14);
      sub_100010ED0((uint64_t)v26, &qword_10010D4D0);
      sub_100010ED0((uint64_t)v96, &qword_10010D4D0);
      (*(void (**)(_BYTE *, uint64_t))(v104 + 8))(v101, v105);
      v65(v55, v14);
      v56 = sub_100010ED0((uint64_t)v52, &qword_10010D4D0);
      v57 = v103;
      v48 = v100;
      if ((v64 & 1) != 0)
        goto LABEL_16;
LABEL_17:
      v71 = v87;
      v72 = static ToolbarItemPlacement.navigationBarTrailing.getter(v56);
      __chkstk_darwin(v72);
      v73 = v89;
      *(_QWORD *)&v83[-32] = v88;
      *(_QWORD *)&v83[-24] = v73;
      *(_QWORD *)&v83[-16] = v57;
      v74 = sub_100003304(&qword_10010EFD0);
      v75 = sub_10006C8E0();
      v76 = v90;
      ToolbarItem<>.init(placement:content:)(v71, sub_10006C8D4, &v83[-48], v74, v75);
      v77 = sub_100011054(&qword_10010EFB8, &qword_10010EFB0, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
      v78 = (uint64_t)v98;
      static ToolbarContentBuilder.buildBlock<A>(_:)(v76, v47, v77);
      v79 = sub_100003304(&qword_10010F000);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 56))(v78, 0, 1, v79);
      v106 = v47;
      v107 = v77;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v106, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
      v70 = (uint64_t)v99;
      static ToolbarContentBuilder.buildIf<A>(_:)(v78, v79, OpaqueTypeConformance2);
      sub_100010ED0(v78, &qword_10010EFA0);
      (*(void (**)(_BYTE *, uint64_t))(v91 + 8))(v76, v47);
      goto LABEL_18;
    }
    sub_100010ED0((uint64_t)v26, &qword_10010D4D0);
    sub_100010ED0((uint64_t)v96, &qword_10010D4D0);
    (*(void (**)(_BYTE *, uint64_t))(v104 + 8))(v101, v105);
    (*(void (**)(_BYTE *, uint64_t))(v15 + 8))(v55, v14);
    v48 = v100;
LABEL_12:
    v56 = sub_100010ED0((uint64_t)v52, &qword_10010EFC8);
    v57 = v103;
    goto LABEL_17;
  }
  sub_100010ED0((uint64_t)v26, &qword_10010D4D0);
  sub_100010ED0((uint64_t)v50, &qword_10010D4D0);
  (*(void (**)(_BYTE *, uint64_t))(v104 + 8))(v51, v105);
  v54 = v42(v53, 1, v14);
  v48 = v100;
  if (v54 != 1)
    goto LABEL_12;
  sub_100010ED0((uint64_t)v52, &qword_10010D4D0);
LABEL_16:
  v66 = sub_100003304(&qword_10010F000);
  v67 = (uint64_t)v98;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 56))(v98, 1, 1, v66);
  v68 = sub_100011054(&qword_10010EFB8, &qword_10010EFB0, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
  v106 = v47;
  v107 = v68;
  v69 = swift_getOpaqueTypeConformance2(&v106, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
  v70 = (uint64_t)v99;
  static ToolbarContentBuilder.buildIf<A>(_:)(v67, v66, v69);
  sub_100010ED0(v67, &qword_10010EFA0);
LABEL_18:
  v81 = sub_10006C7D8();
  static ToolbarContentBuilder.buildBlock<A>(_:)(v70, v48, v81);
  return sub_100010ED0(v70, &qword_10010EFA0);
}

uint64_t sub_100069520@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t KeyPath;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v29;
  uint64_t v30;

  v30 = a5;
  v8 = type metadata accessor for FlowViewContentContainer(0, a2, a3, a4);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v12 = (char *)&v29 - v11;
  v29 = sub_100003304(&qword_10010EFE8);
  v13 = *(_QWORD *)(v29 - 8);
  v14 = __chkstk_darwin(v29);
  v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16))(v12, a1, v8, v14);
  v17 = *(unsigned __int8 *)(v9 + 80);
  v18 = (v17 + 32) & ~v17;
  v19 = swift_allocObject(&unk_1000FF3E0, v18 + v10, v17 | 7);
  *(_QWORD *)(v19 + 16) = a2;
  *(_QWORD *)(v19 + 24) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v19 + v18, v12, v8);
  v20 = sub_100003304(&qword_10010F010);
  v21 = sub_10006CAD8();
  v22 = Button.init(action:label:)(sub_10006CA88, v19, sub_1000696C8, 0, v20, v21);
  v23 = static Color.primary.getter(v22);
  KeyPath = swift_getKeyPath(&unk_1000CAA18);
  v26 = v29;
  v25 = v30;
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 16))(v30, v16, v29);
  v27 = (uint64_t *)(v25 + *(int *)(sub_100003304(&qword_10010EFD0) + 36));
  *v27 = KeyPath;
  v27[1] = v23;
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v26);
}

uint64_t sub_1000696C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  double v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v34 = a1;
  v1 = sub_100003304(&qword_10010F040);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_100003304(&qword_10010F028);
  __chkstk_darwin(v33);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = Image.init(systemName:)(0x6B72616D78, 0xE500000000000000);
  v8 = static Font.caption.getter();
  KeyPath = swift_getKeyPath(&unk_1000CAA48);
  v35 = v7;
  v36 = KeyPath;
  v37 = v8;
  v10 = static Font.Weight.medium.getter();
  v11 = sub_100003304(&qword_10010CB28);
  v12 = sub_10001B3D0();
  View.fontWeight(_:)(*(_QWORD *)&v10, 0, v11, v12);
  swift_release(v8);
  swift_release(KeyPath);
  swift_release(v7);
  LOBYTE(v11) = static Edge.Set.all.getter(v13);
  v14 = EdgeInsets.init(_all:)(8.0);
  v16 = v15;
  v18 = v17;
  v20 = v19;
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v6, v4, v1);
  v21 = &v6[*(int *)(v33 + 36)];
  *v21 = v11;
  *((double *)v21 + 1) = v14;
  *((_QWORD *)v21 + 2) = v16;
  *((_QWORD *)v21 + 3) = v18;
  *((_QWORD *)v21 + 4) = v20;
  v21[40] = 0;
  v22 = (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v23 = static Color.white.getter(v22);
  v24 = Color.opacity(_:)(0.2);
  swift_release(v23);
  v26 = static Alignment.center.getter(v25);
  v28 = v27;
  v29 = v34;
  sub_100010CBC((uint64_t)v6, v34, &qword_10010F028);
  v30 = v29 + *(int *)(sub_100003304(&qword_10010F010) + 36);
  *(_QWORD *)v30 = v24;
  *(_WORD *)(v30 + 8) = 256;
  *(_QWORD *)(v30 + 16) = v26;
  *(_QWORD *)(v30 + 24) = v28;
  return sub_100010ED0((uint64_t)v6, &qword_10010F028);
}

void sub_1000698F8()
{
  void *v0;
  id v1;
  id v2;
  void *v3;
  id v4;
  id v5;
  objc_super v6;

  v6.receiver = v0;
  v6.super_class = (Class)type metadata accessor for BackgroundRemover.RemoverView();
  objc_msgSendSuper2(&v6, "layoutSubviews");
  v1 = objc_msgSend(v0, "superview");
  if (v1)
  {
    v2 = v1;
    do
    {
      v3 = (void *)objc_opt_self(UIColor);
      v4 = v2;
      v5 = objc_msgSend(v3, "clearColor");
      objc_msgSend(v4, "setBackgroundColor:", v5);

      v2 = objc_msgSend(v4, "superview");
    }
    while (v2);
  }
}

id sub_100069ABC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BackgroundRemover.RemoverView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for BackgroundRemover.RemoverView()
{
  return objc_opt_self(_TtCV13GameOverlayUI17BackgroundRemover11RemoverView);
}

uint64_t *sub_100069B0C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  int *v18;
  uint64_t v19;
  unsigned int (*v20)(_QWORD *, uint64_t, int *);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  void (*v32)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v41;
  char *__dst;
  unsigned int (*v43)(char *, uint64_t, uint64_t);
  char *v44;
  uint64_t v45;

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
  }
  else
  {
    v8 = a2[1];
    a1[1] = v8;
    swift_retain(v5);
    swift_retain(v8);
    v9 = *(int *)(sub_100003304(&qword_10010CC18) + 32);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_100003304(&qword_10010CC20);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    v13 = a3[5];
    v14 = a3[6];
    v15 = *(uint64_t *)((char *)a2 + v13);
    *(uint64_t *)((char *)a1 + v13) = v15;
    v16 = (uint64_t *)((char *)a1 + v14);
    v17 = (uint64_t *)((char *)a2 + v14);
    v18 = (int *)type metadata accessor for Game(0);
    v19 = *((_QWORD *)v18 - 1);
    v20 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v19 + 48);
    swift_retain(v15);
    if (v20(v17, 1, v18))
    {
      v21 = sub_100003304(&qword_10010CA78);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      v22 = v17[1];
      *v16 = *v17;
      v16[1] = v22;
      v23 = v17[3];
      v16[2] = v17[2];
      v16[3] = v23;
      v24 = v17[5];
      v16[4] = v17[4];
      v16[5] = v24;
      v25 = v18[7];
      __dst = (char *)v16 + v25;
      v44 = (char *)v17 + v25;
      v45 = v19;
      v26 = type metadata accessor for Date(0);
      v41 = *(_QWORD *)(v26 - 8);
      v43 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48);
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v23);
      swift_bridgeObjectRetain(v24);
      if (v43(v44, 1, v26))
      {
        v27 = sub_100003304(&qword_10010CC10);
        memcpy(__dst, v44, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v41 + 16))(__dst, v44, v26);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(__dst, 0, 1, v26);
      }
      *(_QWORD *)((char *)v16 + v18[8]) = *(_QWORD *)((char *)v17 + v18[8]);
      *((_BYTE *)v16 + v18[9]) = *((_BYTE *)v17 + v18[9]);
      *((_BYTE *)v16 + v18[10]) = *((_BYTE *)v17 + v18[10]);
      *((_BYTE *)v16 + v18[11]) = *((_BYTE *)v17 + v18[11]);
      *((_BYTE *)v16 + v18[12]) = *((_BYTE *)v17 + v18[12]);
      *((_BYTE *)v16 + v18[13]) = *((_BYTE *)v17 + v18[13]);
      *((_BYTE *)v16 + v18[14]) = *((_BYTE *)v17 + v18[14]);
      v28 = v18[15];
      v29 = (_QWORD *)((char *)v16 + v28);
      v30 = (_QWORD *)((char *)v17 + v28);
      v31 = v30[1];
      *v29 = *v30;
      v29[1] = v31;
      v32 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v45 + 56);
      swift_bridgeObjectRetain(v31);
      v32(v16, 0, 1, v18);
    }
    v33 = a3[7];
    v34 = (uint64_t *)((char *)a1 + v33);
    v35 = (uint64_t *)((char *)a2 + v33);
    if (*v35)
    {
      v36 = v35[1];
      *v34 = *v35;
      v34[1] = v36;
      swift_retain(v36);
    }
    else
    {
      *(_OWORD *)v34 = *(_OWORD *)v35;
    }
    v37 = a3[8];
    v38 = (char *)a1 + v37;
    v39 = (char *)a2 + v37;
    *v38 = *v39;
    v5 = *((_QWORD *)v39 + 1);
    *((_QWORD *)v38 + 1) = v5;
  }
  swift_retain(v5);
  return a1;
}

double sub_100069DE0(_QWORD *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  _TtC13GameOverlayUI20GameOverlayUIService **v6;
  uint64_t v7;
  const char *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  SEL v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  _QWORD *v39;
  double result;

  swift_release(*a1);
  swift_release(a1[1]);
  v4 = (char *)a1 + *(int *)(sub_100003304(&qword_10010CC18) + 32);
  v5 = sub_100003304(&qword_10010CC20);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_release(*(_QWORD *)((char *)a1 + a2[5]));
  v6 = (_TtC13GameOverlayUI20GameOverlayUIService **)((char *)a1 + a2[6]);
  v7 = type metadata accessor for Game(0);
  if (!(*(unsigned int (**)(_TtC13GameOverlayUI20GameOverlayUIService **, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease(v6[1], v8, v9, v10, v11, v12, v13, v14);
    swift_bridgeObjectRelease(v6[3], v15, v16, v17, v18, v19, v20, v21);
    swift_bridgeObjectRelease(v6[5], v22, v23, v24, v25, v26, v27, v28);
    v29 = (char *)v6 + *(int *)(v7 + 28);
    v30 = type metadata accessor for Date(0);
    v31 = *(_QWORD *)(v30 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
      (*(void (**)(char *, uint64_t))(v31 + 8))(v29, v30);
    swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)((char *)v6 + *(int *)(v7 + 60) + 8), v32, v33, v34, v35, v36, v37, v38);
  }
  v39 = (_QWORD *)((char *)a1 + a2[7]);
  if (*v39)
    swift_release(v39[1]);
  *(_QWORD *)&result = swift_release(*(_QWORD *)((char *)a1 + a2[8] + 8)).n128_u64[0];
  return result;
}

uint64_t *sub_100069F24(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  int *v17;
  uint64_t v18;
  unsigned int (*v19)(_QWORD *, uint64_t, int *);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  void (*v31)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v41;
  unsigned int (*v42)(char *, uint64_t, uint64_t);
  char *v43;
  char *__dst;
  uint64_t v45;

  v6 = *a2;
  v7 = a2[1];
  *a1 = *a2;
  a1[1] = v7;
  swift_retain(v6);
  swift_retain(v7);
  v8 = *(int *)(sub_100003304(&qword_10010CC18) + 32);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_100003304(&qword_10010CC20);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  v12 = a3[5];
  v13 = a3[6];
  v14 = *(uint64_t *)((char *)a2 + v12);
  *(uint64_t *)((char *)a1 + v12) = v14;
  v15 = (uint64_t *)((char *)a1 + v13);
  v16 = (uint64_t *)((char *)a2 + v13);
  v17 = (int *)type metadata accessor for Game(0);
  v18 = *((_QWORD *)v17 - 1);
  v19 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v18 + 48);
  swift_retain(v14);
  if (v19(v16, 1, v17))
  {
    v20 = sub_100003304(&qword_10010CA78);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    v21 = v16[1];
    *v15 = *v16;
    v15[1] = v21;
    v22 = v16[3];
    v15[2] = v16[2];
    v15[3] = v22;
    v23 = v16[5];
    v15[4] = v16[4];
    v15[5] = v23;
    v24 = v17[7];
    __dst = (char *)v15 + v24;
    v45 = v18;
    v43 = (char *)v16 + v24;
    v25 = type metadata accessor for Date(0);
    v41 = *(_QWORD *)(v25 - 8);
    v42 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    if (v42(v43, 1, v25))
    {
      v26 = sub_100003304(&qword_10010CC10);
      memcpy(__dst, v43, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v41 + 16))(__dst, v43, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(__dst, 0, 1, v25);
    }
    *(_QWORD *)((char *)v15 + v17[8]) = *(_QWORD *)((char *)v16 + v17[8]);
    *((_BYTE *)v15 + v17[9]) = *((_BYTE *)v16 + v17[9]);
    *((_BYTE *)v15 + v17[10]) = *((_BYTE *)v16 + v17[10]);
    *((_BYTE *)v15 + v17[11]) = *((_BYTE *)v16 + v17[11]);
    *((_BYTE *)v15 + v17[12]) = *((_BYTE *)v16 + v17[12]);
    *((_BYTE *)v15 + v17[13]) = *((_BYTE *)v16 + v17[13]);
    *((_BYTE *)v15 + v17[14]) = *((_BYTE *)v16 + v17[14]);
    v27 = v17[15];
    v28 = (_QWORD *)((char *)v15 + v27);
    v29 = (_QWORD *)((char *)v16 + v27);
    v30 = v29[1];
    *v28 = *v29;
    v28[1] = v30;
    v31 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v45 + 56);
    swift_bridgeObjectRetain(v30);
    v31(v15, 0, 1, v17);
  }
  v32 = a3[7];
  v33 = (uint64_t *)((char *)a1 + v32);
  v34 = (uint64_t *)((char *)a2 + v32);
  if (*v34)
  {
    v35 = v34[1];
    *v33 = *v34;
    v33[1] = v35;
    swift_retain(v35);
  }
  else
  {
    *(_OWORD *)v33 = *(_OWORD *)v34;
  }
  v36 = a3[8];
  v37 = (char *)a1 + v36;
  v38 = (char *)a2 + v36;
  *v37 = *v38;
  v39 = *((_QWORD *)v38 + 1);
  *((_QWORD *)v37 + 1) = v39;
  swift_retain(v39);
  return a1;
}

uint64_t *sub_10006A1D4(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  int *v20;
  uint64_t v21;
  uint64_t (*v22)(_QWORD *, uint64_t, int *);
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _TtC13GameOverlayUI20GameOverlayUIService *v33;
  SEL v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  _TtC13GameOverlayUI20GameOverlayUIService *v42;
  SEL v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  uint64_t v50;
  _TtC13GameOverlayUI20GameOverlayUIService *v51;
  SEL v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(char *, uint64_t, uint64_t);
  int v65;
  size_t v66;
  void *v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  void (*v72)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  _TtC13GameOverlayUI20GameOverlayUIService *v77;
  SEL v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  uint64_t v85;
  _QWORD *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v99;
  unsigned int (*v100)(char *, uint64_t, uint64_t);
  char *v101;
  void *v102;
  char *__dst;
  int *v104;
  int *v105;

  v6 = *a1;
  v7 = *a2;
  *a1 = *a2;
  swift_retain(v7);
  swift_release(v6);
  v8 = a2[1];
  v9 = a1[1];
  a1[1] = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = *(int *)(sub_100003304(&qword_10010CC18) + 32);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = sub_100003304(&qword_10010CC20);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  v14 = a3[5];
  v15 = *(uint64_t *)((char *)a2 + v14);
  v16 = *(uint64_t *)((char *)a1 + v14);
  *(uint64_t *)((char *)a1 + v14) = v15;
  swift_retain(v15);
  swift_release(v16);
  v17 = a3[6];
  v18 = (uint64_t *)((char *)a1 + v17);
  v19 = (uint64_t *)((char *)a2 + v17);
  v20 = (int *)type metadata accessor for Game(0);
  v21 = *((_QWORD *)v20 - 1);
  v22 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v21 + 48);
  v23 = v22(v18, 1, v20);
  v24 = v22(v19, 1, v20);
  if (!v23)
  {
    if (v24)
    {
      sub_10006A704((uint64_t)v18);
      goto LABEL_7;
    }
    v105 = a3;
    *v18 = *v19;
    v32 = v19[1];
    v33 = (_TtC13GameOverlayUI20GameOverlayUIService *)v18[1];
    v18[1] = v32;
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRelease(v33, v34, v35, v36, v37, v38, v39, v40);
    v18[2] = v19[2];
    v41 = v19[3];
    v42 = (_TtC13GameOverlayUI20GameOverlayUIService *)v18[3];
    v18[3] = v41;
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRelease(v42, v43, v44, v45, v46, v47, v48, v49);
    v18[4] = v19[4];
    v50 = v19[5];
    v51 = (_TtC13GameOverlayUI20GameOverlayUIService *)v18[5];
    v18[5] = v50;
    swift_bridgeObjectRetain(v50);
    swift_bridgeObjectRelease(v51, v52, v53, v54, v55, v56, v57, v58);
    v59 = v20[7];
    v60 = (char *)v18 + v59;
    v61 = (char *)v19 + v59;
    v62 = type metadata accessor for Date(0);
    v63 = *(_QWORD *)(v62 - 8);
    v64 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v63 + 48);
    v102 = v60;
    LODWORD(v60) = v64(v60, 1, v62);
    v65 = v64(v61, 1, v62);
    if ((_DWORD)v60)
    {
      if (!v65)
      {
        (*(void (**)(void *, char *, uint64_t))(v63 + 16))(v102, v61, v62);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v102, 0, 1, v62);
        goto LABEL_18;
      }
      v66 = *(_QWORD *)(*(_QWORD *)(sub_100003304(&qword_10010CC10) - 8) + 64);
      v67 = v102;
    }
    else
    {
      if (!v65)
      {
        (*(void (**)(void *, char *, uint64_t))(v63 + 24))(v102, v61, v62);
        goto LABEL_18;
      }
      (*(void (**)(void *, uint64_t))(v63 + 8))(v102, v62);
      v66 = *(_QWORD *)(*(_QWORD *)(sub_100003304(&qword_10010CC10) - 8) + 64);
      v67 = v102;
    }
    memcpy(v67, v61, v66);
LABEL_18:
    *(_QWORD *)((char *)v18 + v20[8]) = *(_QWORD *)((char *)v19 + v20[8]);
    *((_BYTE *)v18 + v20[9]) = *((_BYTE *)v19 + v20[9]);
    *((_BYTE *)v18 + v20[10]) = *((_BYTE *)v19 + v20[10]);
    *((_BYTE *)v18 + v20[11]) = *((_BYTE *)v19 + v20[11]);
    *((_BYTE *)v18 + v20[12]) = *((_BYTE *)v19 + v20[12]);
    *((_BYTE *)v18 + v20[13]) = *((_BYTE *)v19 + v20[13]);
    *((_BYTE *)v18 + v20[14]) = *((_BYTE *)v19 + v20[14]);
    v73 = v20[15];
    v74 = (_QWORD *)((char *)v18 + v73);
    v75 = (_QWORD *)((char *)v19 + v73);
    *v74 = *v75;
    v76 = v75[1];
    v77 = (_TtC13GameOverlayUI20GameOverlayUIService *)v74[1];
    v74[1] = v76;
    swift_bridgeObjectRetain(v76);
    swift_bridgeObjectRelease(v77, v78, v79, v80, v81, v82, v83, v84);
    a3 = v105;
    goto LABEL_19;
  }
  if (v24)
  {
LABEL_7:
    v31 = sub_100003304(&qword_10010CA78);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    goto LABEL_19;
  }
  *v18 = *v19;
  v25 = v19[1];
  v18[1] = v25;
  v18[2] = v19[2];
  v26 = v19[3];
  v18[3] = v26;
  v18[4] = v19[4];
  v27 = v19[5];
  v18[5] = v27;
  v28 = v20[7];
  __dst = (char *)v18 + v28;
  v104 = a3;
  v101 = (char *)v19 + v28;
  v29 = type metadata accessor for Date(0);
  v99 = *(_QWORD *)(v29 - 8);
  v100 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v99 + 48);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v27);
  if (v100(v101, 1, v29))
  {
    v30 = sub_100003304(&qword_10010CC10);
    memcpy(__dst, v101, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v99 + 16))(__dst, v101, v29);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v99 + 56))(__dst, 0, 1, v29);
  }
  a3 = v104;
  *(_QWORD *)((char *)v18 + v20[8]) = *(_QWORD *)((char *)v19 + v20[8]);
  *((_BYTE *)v18 + v20[9]) = *((_BYTE *)v19 + v20[9]);
  *((_BYTE *)v18 + v20[10]) = *((_BYTE *)v19 + v20[10]);
  *((_BYTE *)v18 + v20[11]) = *((_BYTE *)v19 + v20[11]);
  *((_BYTE *)v18 + v20[12]) = *((_BYTE *)v19 + v20[12]);
  *((_BYTE *)v18 + v20[13]) = *((_BYTE *)v19 + v20[13]);
  *((_BYTE *)v18 + v20[14]) = *((_BYTE *)v19 + v20[14]);
  v68 = v20[15];
  v69 = (_QWORD *)((char *)v18 + v68);
  v70 = (_QWORD *)((char *)v19 + v68);
  *v69 = *v70;
  v71 = v70[1];
  v69[1] = v71;
  v72 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v21 + 56);
  swift_bridgeObjectRetain(v71);
  v72(v18, 0, 1, v20);
LABEL_19:
  v85 = a3[7];
  v86 = (uint64_t *)((char *)a1 + v85);
  v87 = (char *)a2 + v85;
  v88 = *(uint64_t *)((char *)a1 + v85);
  v89 = *(uint64_t *)((char *)a2 + v85);
  if (!v88)
  {
    if (v89)
    {
      v92 = *((_QWORD *)v87 + 1);
      *v86 = v89;
      v86[1] = v92;
      swift_retain(v92);
      goto LABEL_26;
    }
LABEL_25:
    *(_OWORD *)v86 = *(_OWORD *)v87;
    goto LABEL_26;
  }
  if (!v89)
  {
    swift_release(v86[1]);
    goto LABEL_25;
  }
  v90 = *((_QWORD *)v87 + 1);
  v91 = v86[1];
  *v86 = v89;
  v86[1] = v90;
  swift_retain(v90);
  swift_release(v91);
LABEL_26:
  v93 = a3[8];
  v94 = (char *)a1 + v93;
  v95 = (char *)a2 + v93;
  *v94 = *v95;
  v96 = *((_QWORD *)v94 + 1);
  v97 = *((_QWORD *)v95 + 1);
  *((_QWORD *)v94 + 1) = v97;
  swift_retain(v97);
  swift_release(v96);
  return a1;
}

uint64_t sub_10006A704(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Game(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *sub_10006A740(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  char *__dst;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(sub_100003304(&qword_10010CC18) + 32);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_100003304(&qword_10010CC20);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
  v12 = (_OWORD *)((char *)a1 + v11);
  v13 = (_OWORD *)((char *)a2 + v11);
  v14 = (int *)type metadata accessor for Game(0);
  v15 = *((_QWORD *)v14 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    v16 = sub_100003304(&qword_10010CA78);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v17 = v13[1];
    *v12 = *v13;
    v12[1] = v17;
    v12[2] = v13[2];
    v18 = v14[7];
    __dst = (char *)v12 + v18;
    v19 = (char *)v13 + v18;
    v20 = type metadata accessor for Date(0);
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      v22 = sub_100003304(&qword_10010CC10);
      memcpy(__dst, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 32))(__dst, v19, v20);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(__dst, 0, 1, v20);
    }
    *(_QWORD *)((char *)v12 + v14[8]) = *(_QWORD *)((char *)v13 + v14[8]);
    *((_BYTE *)v12 + v14[9]) = *((_BYTE *)v13 + v14[9]);
    *((_BYTE *)v12 + v14[10]) = *((_BYTE *)v13 + v14[10]);
    *((_BYTE *)v12 + v14[11]) = *((_BYTE *)v13 + v14[11]);
    *((_BYTE *)v12 + v14[12]) = *((_BYTE *)v13 + v14[12]);
    *((_BYTE *)v12 + v14[13]) = *((_BYTE *)v13 + v14[13]);
    *((_BYTE *)v12 + v14[14]) = *((_BYTE *)v13 + v14[14]);
    *(_OWORD *)((char *)v12 + v14[15]) = *(_OWORD *)((char *)v13 + v14[15]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  v23 = a3[7];
  v24 = (_QWORD *)((char *)a1 + v23);
  v25 = (_QWORD *)((char *)a2 + v23);
  v26 = *v25;
  if (*v25)
  {
    v27 = v25[1];
    *v24 = v26;
    v24[1] = v27;
  }
  else
  {
    *(_OWORD *)v24 = *(_OWORD *)v25;
  }
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  return a1;
}

uint64_t *sub_10006A978(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  int *v17;
  uint64_t v18;
  uint64_t (*v19)(_QWORD *, uint64_t, int *);
  int v20;
  int v21;
  const char *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  __int128 v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _TtC13GameOverlayUI20GameOverlayUIService *v37;
  uint64_t v38;
  _TtC13GameOverlayUI20GameOverlayUIService *v39;
  SEL v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  uint64_t v47;
  _TtC13GameOverlayUI20GameOverlayUIService *v48;
  SEL v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t (*v60)(char *, uint64_t, uint64_t);
  int v61;
  size_t v62;
  void *v63;
  const char *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  _TtC13GameOverlayUI20GameOverlayUIService *v76;
  uint64_t v77;
  _QWORD *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v90;
  char *__dst;
  void *__dsta;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  v7 = a1[1];
  a1[1] = a2[1];
  swift_release(v7);
  v8 = *(int *)(sub_100003304(&qword_10010CC18) + 32);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_100003304(&qword_10010CC20);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = a3[5];
  v13 = *(uint64_t *)((char *)a1 + v12);
  *(uint64_t *)((char *)a1 + v12) = *(uint64_t *)((char *)a2 + v12);
  swift_release(v13);
  v14 = a3[6];
  v15 = (uint64_t *)((char *)a1 + v14);
  v16 = (uint64_t *)((char *)a2 + v14);
  v17 = (int *)type metadata accessor for Game(0);
  v18 = *((_QWORD *)v17 - 1);
  v19 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (!v20)
  {
    if (v21)
    {
      sub_10006A704((uint64_t)v15);
      goto LABEL_7;
    }
    v36 = v16[1];
    v37 = (_TtC13GameOverlayUI20GameOverlayUIService *)v15[1];
    *v15 = *v16;
    v15[1] = v36;
    swift_bridgeObjectRelease(v37, v22, v23, v24, v25, v26, v27, v28);
    v38 = v16[3];
    v39 = (_TtC13GameOverlayUI20GameOverlayUIService *)v15[3];
    v15[2] = v16[2];
    v15[3] = v38;
    swift_bridgeObjectRelease(v39, v40, v41, v42, v43, v44, v45, v46);
    v47 = v16[5];
    v48 = (_TtC13GameOverlayUI20GameOverlayUIService *)v15[5];
    v15[4] = v16[4];
    v15[5] = v47;
    swift_bridgeObjectRelease(v48, v49, v50, v51, v52, v53, v54, v55);
    v56 = v17[7];
    v57 = (char *)v15 + v56;
    v58 = (char *)v16 + v56;
    v59 = type metadata accessor for Date(0);
    v90 = *(_QWORD *)(v59 - 8);
    v60 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v90 + 48);
    __dsta = v57;
    LODWORD(v57) = v60(v57, 1, v59);
    v61 = v60(v58, 1, v59);
    if ((_DWORD)v57)
    {
      if (!v61)
      {
        (*(void (**)(void *, char *, uint64_t))(v90 + 32))(__dsta, v58, v59);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v90 + 56))(__dsta, 0, 1, v59);
        goto LABEL_18;
      }
      v62 = *(_QWORD *)(*(_QWORD *)(sub_100003304(&qword_10010CC10) - 8) + 64);
      v63 = __dsta;
    }
    else
    {
      if (!v61)
      {
        (*(void (**)(void *, char *, uint64_t))(v90 + 40))(__dsta, v58, v59);
        goto LABEL_18;
      }
      (*(void (**)(void *, uint64_t))(v90 + 8))(__dsta, v59);
      v62 = *(_QWORD *)(*(_QWORD *)(sub_100003304(&qword_10010CC10) - 8) + 64);
      v63 = __dsta;
    }
    memcpy(v63, v58, v62);
LABEL_18:
    *(_QWORD *)((char *)v15 + v17[8]) = *(_QWORD *)((char *)v16 + v17[8]);
    *((_BYTE *)v15 + v17[9]) = *((_BYTE *)v16 + v17[9]);
    *((_BYTE *)v15 + v17[10]) = *((_BYTE *)v16 + v17[10]);
    *((_BYTE *)v15 + v17[11]) = *((_BYTE *)v16 + v17[11]);
    *((_BYTE *)v15 + v17[12]) = *((_BYTE *)v16 + v17[12]);
    *((_BYTE *)v15 + v17[13]) = *((_BYTE *)v16 + v17[13]);
    *((_BYTE *)v15 + v17[14]) = *((_BYTE *)v16 + v17[14]);
    v71 = v17[15];
    v72 = (_QWORD *)((char *)v15 + v71);
    v73 = (_QWORD *)((char *)v16 + v71);
    v75 = *v73;
    v74 = v73[1];
    v76 = (_TtC13GameOverlayUI20GameOverlayUIService *)v72[1];
    *v72 = v75;
    v72[1] = v74;
    swift_bridgeObjectRelease(v76, v64, v65, v66, v67, v68, v69, v70);
    goto LABEL_19;
  }
  if (v21)
  {
LABEL_7:
    v35 = sub_100003304(&qword_10010CA78);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    goto LABEL_19;
  }
  v29 = *((_OWORD *)v16 + 1);
  *(_OWORD *)v15 = *(_OWORD *)v16;
  *((_OWORD *)v15 + 1) = v29;
  *((_OWORD *)v15 + 2) = *((_OWORD *)v16 + 2);
  v30 = v17[7];
  __dst = (char *)v15 + v30;
  v31 = (char *)v16 + v30;
  v32 = type metadata accessor for Date(0);
  v33 = *(_QWORD *)(v32 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
  {
    v34 = sub_100003304(&qword_10010CC10);
    memcpy(__dst, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v33 + 32))(__dst, v31, v32);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(__dst, 0, 1, v32);
  }
  *(_QWORD *)((char *)v15 + v17[8]) = *(_QWORD *)((char *)v16 + v17[8]);
  *((_BYTE *)v15 + v17[9]) = *((_BYTE *)v16 + v17[9]);
  *((_BYTE *)v15 + v17[10]) = *((_BYTE *)v16 + v17[10]);
  *((_BYTE *)v15 + v17[11]) = *((_BYTE *)v16 + v17[11]);
  *((_BYTE *)v15 + v17[12]) = *((_BYTE *)v16 + v17[12]);
  *((_BYTE *)v15 + v17[13]) = *((_BYTE *)v16 + v17[13]);
  *((_BYTE *)v15 + v17[14]) = *((_BYTE *)v16 + v17[14]);
  *(_OWORD *)((char *)v15 + v17[15]) = *(_OWORD *)((char *)v16 + v17[15]);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v18 + 56))(v15, 0, 1, v17);
LABEL_19:
  v77 = a3[7];
  v78 = (uint64_t *)((char *)a1 + v77);
  v79 = (char *)a2 + v77;
  v80 = *(uint64_t *)((char *)a1 + v77);
  v81 = *(uint64_t *)((char *)a2 + v77);
  if (!v80)
  {
    if (v81)
    {
      v84 = *((_QWORD *)v79 + 1);
      *v78 = v81;
      v78[1] = v84;
      goto LABEL_26;
    }
LABEL_25:
    *(_OWORD *)v78 = *(_OWORD *)v79;
    goto LABEL_26;
  }
  if (!v81)
  {
    swift_release(v78[1]);
    goto LABEL_25;
  }
  v82 = *((_QWORD *)v79 + 1);
  v83 = v78[1];
  *v78 = v81;
  v78[1] = v82;
  swift_release(v83);
LABEL_26:
  v85 = a3[8];
  v86 = (char *)a1 + v85;
  v87 = (char *)a2 + v85;
  *v86 = *v87;
  v88 = *((_QWORD *)v86 + 1);
  *((_QWORD *)v86 + 1) = *((_QWORD *)v87 + 1);
  swift_release(v88);
  return a1;
}

uint64_t sub_10006ADD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006ADE4);
}

uint64_t sub_10006ADE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = sub_100003304(&qword_10010CC18);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = sub_100003304(&qword_10010CA78);
    v10 = a1 + *(int *)(a3 + 24);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_10006AE94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006AEA0);
}

uint64_t sub_10006AEA0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = sub_100003304(&qword_10010CC18);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
      return result;
    }
    v10 = sub_100003304(&qword_10010CA78);
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for DashboardContentView(uint64_t a1)
{
  uint64_t result;

  result = qword_10010EE38;
  if (!qword_10010EE38)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DashboardContentView);
  return result;
}

void sub_10006AF88(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  sub_10006C640(319, (unint64_t *)&qword_10010CCA0, &qword_10010CC20, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Binding);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    sub_10006B03C(319);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      v6[3] = &unk_1000CA8B8;
      v6[4] = &unk_1000CA8B8;
      swift_initStructMetadata(a1, 256, 5, v6, a1 + 16);
    }
  }
}

void sub_10006B03C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10010CC98)
  {
    v2 = type metadata accessor for Game(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10010CC98);
  }
}

uint64_t sub_10006B090(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E4C38, 1);
}

uint64_t sub_10006B0A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DashboardContentView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006B0E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DashboardContentView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

double sub_10006B12C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for DashboardContentView(0) - 8) + 80);
  return sub_100067B70(v0 + ((v1 + 16) & ~v1));
}

uint64_t sub_10006B15C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _TtC13GameOverlayUI20GameOverlayUIService **v9;
  uint64_t v10;
  const char *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  SEL v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  SEL v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  _QWORD *v42;
  uint64_t v44;

  v1 = (int *)type metadata accessor for DashboardContentView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  swift_release(*(_QWORD *)(v0 + v4));
  swift_release(*(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + *(int *)(sub_100003304(&qword_10010CC18) + 32);
  v8 = sub_100003304(&qword_10010CC20);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_release(*(_QWORD *)(v0 + v4 + v1[5]));
  v9 = (_TtC13GameOverlayUI20GameOverlayUIService **)(v0 + v4 + v1[6]);
  v10 = type metadata accessor for Game(0);
  if (!(*(unsigned int (**)(_TtC13GameOverlayUI20GameOverlayUIService **, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10))
  {
    v44 = v5;
    swift_bridgeObjectRelease(v9[1], v11, v12, v13, v14, v15, v16, v17);
    swift_bridgeObjectRelease(v9[3], v18, v19, v20, v21, v22, v23, v24);
    swift_bridgeObjectRelease(v9[5], v25, v26, v27, v28, v29, v30, v31);
    v32 = (char *)v9 + *(int *)(v10 + 28);
    v33 = type metadata accessor for Date(0);
    v34 = *(_QWORD *)(v33 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
      (*(void (**)(char *, uint64_t))(v34 + 8))(v32, v33);
    swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)((char *)v9 + *(int *)(v10 + 60) + 8), v35, v36, v37, v38, v39, v40, v41);
    v5 = v44;
  }
  v42 = (_QWORD *)(v6 + v1[7]);
  if (*v42)
    swift_release(v42[1]);
  swift_release(*(_QWORD *)(v6 + v1[8] + 8));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10006B2EC@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for DashboardContentView(0) - 8) + 80);
  return sub_1000684D8(a1, v2 + ((v5 + 16) & ~v5), a2);
}

uint64_t sub_10006B338()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _TtC13GameOverlayUI20GameOverlayUIService **v9;
  uint64_t v10;
  const char *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  SEL v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  SEL v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  _QWORD *v42;
  uint64_t v44;

  v1 = (int *)type metadata accessor for DashboardContentView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 56) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  if (*(_QWORD *)(v0 + 40))
    sub_100004624((_QWORD *)(v0 + 16));
  v6 = v0 + v4;
  swift_release(*(_QWORD *)(v0 + v4));
  swift_release(*(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + *(int *)(sub_100003304(&qword_10010CC18) + 32);
  v8 = sub_100003304(&qword_10010CC20);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_release(*(_QWORD *)(v0 + v4 + v1[5]));
  v9 = (_TtC13GameOverlayUI20GameOverlayUIService **)(v0 + v4 + v1[6]);
  v10 = type metadata accessor for Game(0);
  if (!(*(unsigned int (**)(_TtC13GameOverlayUI20GameOverlayUIService **, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10))
  {
    v44 = v5;
    swift_bridgeObjectRelease(v9[1], v11, v12, v13, v14, v15, v16, v17);
    swift_bridgeObjectRelease(v9[3], v18, v19, v20, v21, v22, v23, v24);
    swift_bridgeObjectRelease(v9[5], v25, v26, v27, v28, v29, v30, v31);
    v32 = (char *)v9 + *(int *)(v10 + 28);
    v33 = type metadata accessor for Date(0);
    v34 = *(_QWORD *)(v33 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
      (*(void (**)(char *, uint64_t))(v34 + 8))(v32, v33);
    swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)((char *)v9 + *(int *)(v10 + 60) + 8), v35, v36, v37, v38, v39, v40, v41);
    v5 = v44;
  }
  v42 = (_QWORD *)(v6 + v1[7]);
  if (*v42)
    swift_release(v42[1]);
  swift_release(*(_QWORD *)(v6 + v1[8] + 8));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10006B4D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  type metadata accessor for DashboardContentView(0);
  return sub_100068680((__int128 *)(v1 + 16), a1);
}

id sub_10006B518()
{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;
  id v4;

  v0 = type metadata accessor for BackgroundRemover.RemoverView();
  v1 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v0)), "init");
  v2 = (void *)objc_opt_self(UIColor);
  v3 = v1;
  v4 = objc_msgSend(v2, "clearColor");
  objc_msgSend(v3, "setBackgroundColor:", v4);

  return v3;
}

uint64_t sub_10006B5B0(uint64_t a1, char a2)
{
  return UIViewRepresentable.sizeThatFits(_:uiView:context:)(a1, a2 & 1);
}

uint64_t sub_10006B5F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10006CD28();
  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_10006B640(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10006CD28();
  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_10006B690(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006CD28();
  UIViewRepresentable.body.getter(a1, v2);
  __break(1u);
}

uint64_t sub_10006B6B4()
{
  return EnvironmentValues.presentedBy.getter();
}

uint64_t sub_10006B6D4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isAtFlowTabRoot.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10006B700(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003304(&qword_10010EEC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006B748()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _TtC13GameOverlayUI20GameOverlayUIService **v9;
  uint64_t v10;
  const char *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  SEL v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  SEL v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  _QWORD *v42;
  uint64_t v44;

  v1 = (int *)type metadata accessor for DashboardContentView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  v6 = v0 + v4;
  swift_release(*(_QWORD *)(v0 + v4));
  swift_release(*(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + *(int *)(sub_100003304(&qword_10010CC18) + 32);
  v8 = sub_100003304(&qword_10010CC20);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_release(*(_QWORD *)(v0 + v4 + v1[5]));
  v9 = (_TtC13GameOverlayUI20GameOverlayUIService **)(v0 + v4 + v1[6]);
  v10 = type metadata accessor for Game(0);
  if (!(*(unsigned int (**)(_TtC13GameOverlayUI20GameOverlayUIService **, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10))
  {
    v44 = v5;
    swift_bridgeObjectRelease(v9[1], v11, v12, v13, v14, v15, v16, v17);
    swift_bridgeObjectRelease(v9[3], v18, v19, v20, v21, v22, v23, v24);
    swift_bridgeObjectRelease(v9[5], v25, v26, v27, v28, v29, v30, v31);
    v32 = (char *)v9 + *(int *)(v10 + 28);
    v33 = type metadata accessor for Date(0);
    v34 = *(_QWORD *)(v33 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
      (*(void (**)(char *, uint64_t))(v34 + 8))(v32, v33);
    swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)((char *)v9 + *(int *)(v10 + 60) + 8), v35, v36, v37, v38, v39, v40, v41);
    v5 = v44;
  }
  v42 = (_QWORD *)(v6 + v1[7]);
  if (*v42)
    swift_release(v42[1]);
  swift_release(*(_QWORD *)(v6 + v1[8] + 8));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10006B8E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for DashboardContentView(0) - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = v1 + ((v4 + 32) & ~v4);
  v8 = (_QWORD *)swift_task_alloc(dword_10010EED4);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_1000252CC;
  return sub_100067CA4(a1, v5, v6, v7);
}

uint64_t sub_10006B964()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _TtC13GameOverlayUI20GameOverlayUIService **v9;
  uint64_t v10;
  const char *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  SEL v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  SEL v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v45;

  v1 = (int *)type metadata accessor for DashboardContentView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  v6 = v0 + v4;
  swift_release(*(_QWORD *)(v0 + v4));
  swift_release(*(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + *(int *)(sub_100003304(&qword_10010CC18) + 32);
  v8 = sub_100003304(&qword_10010CC20);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_release(*(_QWORD *)(v0 + v4 + v1[5]));
  v9 = (_TtC13GameOverlayUI20GameOverlayUIService **)(v0 + v4 + v1[6]);
  v10 = type metadata accessor for Game(0);
  if (!(*(unsigned int (**)(_TtC13GameOverlayUI20GameOverlayUIService **, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10))
  {
    v45 = v5;
    swift_bridgeObjectRelease(v9[1], v11, v12, v13, v14, v15, v16, v17);
    swift_bridgeObjectRelease(v9[3], v18, v19, v20, v21, v22, v23, v24);
    swift_bridgeObjectRelease(v9[5], v25, v26, v27, v28, v29, v30, v31);
    v32 = (char *)v9 + *(int *)(v10 + 28);
    v33 = type metadata accessor for Date(0);
    v34 = *(_QWORD *)(v33 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
      (*(void (**)(char *, uint64_t))(v34 + 8))(v32, v33);
    swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)((char *)v9 + *(int *)(v10 + 60) + 8), v35, v36, v37, v38, v39, v40, v41);
    v5 = v45;
  }
  v42 = (_QWORD *)(v6 + v1[7]);
  if (*v42)
    swift_release(v42[1]);
  v43 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v6 + v1[8] + 8));

  return swift_deallocObject(v0, v43 + 8, v3 | 7);
}

uint64_t sub_10006BB10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(type metadata accessor for DashboardContentView(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v8 = v1 + v5;
  v9 = *(_QWORD *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v10 = (_QWORD *)swift_task_alloc(dword_10010EEE4);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_1000263E8;
  return sub_100068390(a1, v6, v7, v8, v9);
}

unint64_t sub_10006BBB4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001116E0;
  if (!qword_1001116E0)
  {
    v1 = objc_opt_self(GKLocalPlayer);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001116E0);
  }
  return result;
}

uint64_t sub_10006BBF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 32);
}

void sub_10006BBF8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  sub_10006C640(319, &qword_10010EF70, &qword_10010D4D0, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = "\t";
    v4[2] = &unk_1000CA8B8;
    v4[3] = (char *)&value witness table for () + 64;
    swift_initStructMetadata(a1, 0, 4, v4, a1 + 32);
  }
}

uint64_t *sub_10006BC98(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_100003304(&qword_10010D4C8);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v9 = type metadata accessor for PresentationSource(0, v8);
      v10 = *(_QWORD *)(v9 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v10 + 48))(a2, 1, v9))
      {
        v11 = sub_100003304(&qword_10010D4D0);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v10 + 16))(a1, a2, v9);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v10 + 56))(a1, 0, 1, v9);
      }
      v14 = a1;
      v15 = v7;
      v16 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v14 = a1;
      v15 = v7;
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(v14, v15, v16);
    v17 = a3[9];
    v18 = (char *)a1 + v17;
    v19 = (char *)a2 + v17;
    v20 = *(_QWORD *)v19;
    v21 = v19[8];
    sub_10006BE2C(*(_QWORD *)v19, v21);
    *(_QWORD *)v18 = v20;
    v18[8] = v21;
    v22 = a3[10];
    v23 = (uint64_t *)((char *)a1 + v22);
    v24 = (uint64_t *)((char *)a2 + v22);
    if (*v24)
    {
      v25 = v24[1];
      *v23 = *v24;
      v23[1] = v25;
      swift_retain(v25);
    }
    else
    {
      *(_OWORD *)v23 = *(_OWORD *)v24;
    }
    v26 = a3[11];
    v27 = (uint64_t *)((char *)a1 + v26);
    v28 = (uint64_t *)((char *)a2 + v26);
    v12 = v28[1];
    *v27 = *v28;
    v27[1] = v12;
  }
  swift_retain(v12);
  return a1;
}

uint64_t sub_10006BE2C(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    return swift_retain(result);
  return result;
}

double sub_10006BE38(_QWORD *a1, int *a2)
{
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  double result;

  v4 = sub_100003304(&qword_10010D4C8);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v6 = type metadata accessor for PresentationSource(0, v5);
    v7 = *(_QWORD *)(v6 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6))
      (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(a1, v6);
  }
  else
  {
    swift_release(*a1);
  }
  sub_100032F88(*(_QWORD *)((char *)a1 + a2[9]), *((_BYTE *)a1 + a2[9] + 8));
  v8 = (_QWORD *)((char *)a1 + a2[10]);
  if (*v8)
    swift_release(v8[1]);
  *(_QWORD *)&result = swift_release(*(_QWORD *)((char *)a1 + a2[11] + 8)).n128_u64[0];
  return result;
}

uint64_t *sub_10006BEFC(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;

  v6 = sub_100003304(&qword_10010D4C8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v8 = type metadata accessor for PresentationSource(0, v7);
    v9 = *(_QWORD *)(v8 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v8))
    {
      v10 = sub_100003304(&qword_10010D4D0);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 16))(a1, a2, v8);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
    }
    v12 = a1;
    v13 = v6;
    v14 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v12 = a1;
    v13 = v6;
    v14 = 0;
  }
  swift_storeEnumTagMultiPayload(v12, v13, v14);
  v15 = a3[9];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = *(_QWORD *)v17;
  v19 = v17[8];
  sub_10006BE2C(*(_QWORD *)v17, v19);
  *(_QWORD *)v16 = v18;
  v16[8] = v19;
  v20 = a3[10];
  v21 = (uint64_t *)((char *)a1 + v20);
  v22 = (uint64_t *)((char *)a2 + v20);
  if (*v22)
  {
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    swift_retain(v23);
  }
  else
  {
    *(_OWORD *)v21 = *(_OWORD *)v22;
  }
  v24 = a3[11];
  v25 = (uint64_t *)((char *)a1 + v24);
  v26 = (uint64_t *)((char *)a2 + v24);
  v27 = v26[1];
  *v25 = *v26;
  v25[1] = v27;
  swift_retain(v27);
  return a1;
}

uint64_t *sub_10006C068(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;

  if (a1 != a2)
  {
    sub_100010ED0((uint64_t)a1, &qword_10010D4C8);
    v6 = sub_100003304(&qword_10010D4C8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v8 = type metadata accessor for PresentationSource(0, v7);
      v9 = *(_QWORD *)(v8 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v8))
      {
        v10 = sub_100003304(&qword_10010D4D0);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 16))(a1, a2, v8);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
      }
      v12 = a1;
      v13 = v6;
      v14 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v12 = a1;
      v13 = v6;
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v12, v13, v14);
  }
  v15 = a3[9];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = *(_QWORD *)v17;
  v19 = v17[8];
  sub_10006BE2C(*(_QWORD *)v17, v19);
  v20 = *(_QWORD *)v16;
  v21 = v16[8];
  *(_QWORD *)v16 = v18;
  v16[8] = v19;
  sub_100032F88(v20, v21);
  v22 = a3[10];
  v23 = (uint64_t *)((char *)a1 + v22);
  v24 = (char *)a2 + v22;
  v25 = *(uint64_t *)((char *)a1 + v22);
  v26 = *(uint64_t *)((char *)a2 + v22);
  if (!v25)
  {
    if (v26)
    {
      v29 = *((_QWORD *)v24 + 1);
      *v23 = v26;
      v23[1] = v29;
      swift_retain(v29);
      goto LABEL_16;
    }
LABEL_15:
    *(_OWORD *)v23 = *(_OWORD *)v24;
    goto LABEL_16;
  }
  if (!v26)
  {
    swift_release(v23[1]);
    goto LABEL_15;
  }
  v27 = *((_QWORD *)v24 + 1);
  v28 = v23[1];
  *v23 = v26;
  v23[1] = v27;
  swift_retain(v27);
  swift_release(v28);
LABEL_16:
  v30 = a3[11];
  v31 = (uint64_t *)((char *)a1 + v30);
  v32 = (uint64_t *)((char *)a2 + v30);
  v33 = v32[1];
  v34 = v31[1];
  *v31 = *v32;
  v31[1] = v33;
  swift_retain(v33);
  swift_release(v34);
  return a1;
}

char *sub_10006C234(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_100003304(&qword_10010D4C8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v8 = type metadata accessor for PresentationSource(0, v7);
    v9 = *(_QWORD *)(v8 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v8))
    {
      v10 = sub_100003304(&qword_10010D4D0);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(a1, a2, v8);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
    }
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v11 = a3[9];
  v12 = a3[10];
  v13 = &a1[v11];
  v14 = &a2[v11];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  v15 = &a1[v12];
  v16 = &a2[v12];
  v17 = *(_QWORD *)v16;
  if (*(_QWORD *)v16)
  {
    v18 = *((_QWORD *)v16 + 1);
    *(_QWORD *)v15 = v17;
    *((_QWORD *)v15 + 1) = v18;
  }
  else
  {
    *(_OWORD *)v15 = *(_OWORD *)v16;
  }
  *(_OWORD *)&a1[a3[11]] = *(_OWORD *)&a2[a3[11]];
  return a1;
}

char *sub_10006C37C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (a1 != a2)
  {
    sub_100010ED0((uint64_t)a1, &qword_10010D4C8);
    v6 = sub_100003304(&qword_10010D4C8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v8 = type metadata accessor for PresentationSource(0, v7);
      v9 = *(_QWORD *)(v8 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v8))
      {
        v10 = sub_100003304(&qword_10010D4D0);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v9 + 32))(a1, a2, v8);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
      }
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v11 = a3[9];
  v12 = &a1[v11];
  v13 = &a2[v11];
  v14 = *(_QWORD *)v13;
  LOBYTE(v13) = v13[8];
  v15 = *(_QWORD *)v12;
  v16 = v12[8];
  *(_QWORD *)v12 = v14;
  v12[8] = (char)v13;
  sub_100032F88(v15, v16);
  v17 = a3[10];
  v18 = &a1[v17];
  v19 = &a2[v17];
  v20 = *(_QWORD *)&a1[v17];
  v21 = *(_QWORD *)&a2[v17];
  if (!v20)
  {
    if (v21)
    {
      v24 = *((_QWORD *)v19 + 1);
      *(_QWORD *)v18 = v21;
      *((_QWORD *)v18 + 1) = v24;
      goto LABEL_15;
    }
LABEL_14:
    *(_OWORD *)v18 = *(_OWORD *)v19;
    goto LABEL_15;
  }
  if (!v21)
  {
    swift_release(*((_QWORD *)v18 + 1));
    goto LABEL_14;
  }
  v22 = *((_QWORD *)v19 + 1);
  v23 = *((_QWORD *)v18 + 1);
  *(_QWORD *)v18 = v21;
  *((_QWORD *)v18 + 1) = v22;
  swift_release(v23);
LABEL_15:
  v25 = a3[11];
  v26 = *(_QWORD *)&a1[v25 + 8];
  *(_OWORD *)&a1[v25] = *(_OWORD *)&a2[v25];
  swift_release(v26);
  return a1;
}

uint64_t sub_10006C520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006C52C);
}

uint64_t sub_10006C52C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_100003304(&qword_10010EEC8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 44));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10006C5AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006C5B8);
}

uint64_t sub_10006C5B8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100003304(&qword_10010EEC8);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 44)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for FlowViewContentContainer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10006CC00(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FlowViewContentContainer);
}

void sub_10006C640(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = sub_100006E54(a3);
    v8 = a4(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

unint64_t sub_10006C69C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_10010EF78;
  if (!qword_10010EF78)
  {
    v1 = sub_100006E54(&qword_10010EF80);
    v2[0] = sub_100006E54(&qword_10010EE88);
    v2[1] = type metadata accessor for DeepLinkWithReferrerIntent(255);
    v2[2] = sub_100011054(&qword_10010EE98, &qword_10010EE88, (uint64_t)&protocol conformance descriptor for FlowView<A, B, C>);
    v2[3] = sub_1000035B4(&qword_10010EEA0, type metadata accessor for DeepLinkWithReferrerIntent, (uint64_t)&protocol conformance descriptor for DeepLinkWithReferrerIntent);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.onDeepLink<A>(prepare:recover:)>>, 1);
    sub_1000035B4(&qword_10010EEA8, (uint64_t (*)(uint64_t))&type metadata accessor for OnboardingOverlayView, (uint64_t)&protocol conformance descriptor for OnboardingOverlayView);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10010EF78);
  }
  return result;
}

uint64_t sub_10006C7A4(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_1000E4C60, 1);
}

unint64_t sub_10006C7D8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_10010EFA8;
  if (!qword_10010EFA8)
  {
    v1 = sub_100006E54(&qword_10010EFA0);
    v2[0] = sub_100006E54(&qword_10010EFB0);
    v2[1] = sub_100011054(&qword_10010EFB8, &qword_10010EFB0, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_10010EFA8);
  }
  return result;
}

unint64_t sub_10006C884()
{
  unint64_t result;

  result = qword_10010EFC0;
  if (!qword_10010EFC0)
  {
    result = swift_getWitnessTable(&unk_1000CAB08, &type metadata for BackgroundRemover);
    atomic_store(result, (unint64_t *)&qword_10010EFC0);
  }
  return result;
}

uint64_t sub_10006C8C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_100068BA8(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_10006C8D4@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_100069520(v2[4], v2[2], v2[3], a1, a2);
}

unint64_t sub_10006C8E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010EFD8;
  if (!qword_10010EFD8)
  {
    v1 = sub_100006E54(&qword_10010EFD0);
    sub_100011054(&qword_10010EFE0, &qword_10010EFE8, (uint64_t)&protocol conformance descriptor for Button<A>);
    sub_100011054(&qword_10010EFF0, &qword_10010EFF8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10010EFD8);
  }
  return result;
}

uint64_t sub_10006C97C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v5 = (int *)type metadata accessor for FlowViewContentContainer(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  v6 = *((_QWORD *)v5 - 1);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = *(_QWORD *)(v6 + 64);
  v10 = (_QWORD *)(v4 + v8);
  v11 = sub_100003304(&qword_10010D4C8);
  if (swift_getEnumCaseMultiPayload(v4 + v8, v11) == 1)
  {
    v13 = type metadata accessor for PresentationSource(0, v12);
    v14 = *(_QWORD *)(v13 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v4 + v8, 1, v13))
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v4 + v8, v13);
  }
  else
  {
    swift_release(*v10);
  }
  sub_100032F88(*(_QWORD *)((char *)v10 + v5[9]), *((_BYTE *)v10 + v5[9] + 8));
  v15 = (_QWORD *)((char *)v10 + v5[10]);
  if (*v15)
    swift_release(v15[1]);
  swift_release(*(_QWORD *)((char *)v10 + v5[11] + 8));
  return swift_deallocObject(v4, v8 + v9, v7 | 7);
}

uint64_t sub_10006CA88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t (**v7)(void);

  result = type metadata accessor for FlowViewContentContainer(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(result - 8) + 80);
  v7 = (uint64_t (**)(void))(v4 + *(int *)(result + 40) + ((v6 + 32) & ~v6));
  if (*v7)
    return (*v7)();
  return result;
}

unint64_t sub_10006CAD8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010F018;
  if (!qword_10010F018)
  {
    v1 = sub_100006E54(&qword_10010F010);
    sub_10006CB5C();
    sub_100011054(&qword_10010F030, &qword_10010F038, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10010F018);
  }
  return result;
}

unint64_t sub_10006CB5C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_10010F020;
  if (!qword_10010F020)
  {
    v1 = sub_100006E54(&qword_10010F028);
    v2[0] = sub_100006E54(&qword_10010CB28);
    v2[1] = sub_10001B3D0();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.fontWeight(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10010F020);
  }
  return result;
}

uint64_t sub_10006CC00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

ValueMetadata *type metadata accessor for BackgroundRemover()
{
  return &type metadata for BackgroundRemover;
}

uint64_t sub_10006CC3C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;
  uint64_t OpaqueTypeConformance2;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *a1;
  v2 = a1[1];
  v3 = sub_100006E54(&qword_10010EF88);
  v4 = type metadata accessor for ModifiedContent(255, v1, v3);
  v5 = sub_100006E54(&qword_10010EF90);
  v13 = v2;
  v14 = sub_100011054(&qword_10010EF98, &qword_10010EF88, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v4);
  v9 = sub_100006E54(&qword_10010EFA0);
  v10 = sub_10006C7D8();
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
  v9 = v4;
  v10 = v5;
  v11 = WitnessTable;
  v12 = OpaqueTypeConformance2;
  return swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
}

void *sub_10006CD1C()
{
  return &protocol witness table for Never;
}

unint64_t sub_10006CD28()
{
  unint64_t result;

  result = qword_10010F048;
  if (!qword_10010F048)
  {
    result = swift_getWitnessTable(&unk_1000CAA78, &type metadata for BackgroundRemover);
    atomic_store(result, (unint64_t *)&qword_10010F048);
  }
  return result;
}

uint64_t LaunchDashboardAction.player.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for LaunchDashboardAction(0) + 20);
  return sub_100003920(v3, a1);
}

uint64_t type metadata accessor for LaunchDashboardAction(uint64_t a1)
{
  uint64_t result;

  result = qword_10010F170;
  if (!qword_10010F170)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LaunchDashboardAction);
  return result;
}

uint64_t LaunchDashboardAction.destination.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for LaunchDashboardAction(0) + 24);
  v2 = *(_QWORD *)v1;
  sub_100049DD4(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16));
  return v2;
}

uint64_t LaunchDashboardAction.actionMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for LaunchDashboardAction(0) + 28);
  v4 = type metadata accessor for ActionMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_10006CE74()
{
  return 0x6D65766569686361;
}

uint64_t sub_10006CE98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x6D65766569686361 && a2 == 0xED00004449746E65)
  {
    result = swift_bridgeObjectRelease(0xED00004449746E65);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6D65766569686361, 0xED00004449746E65, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_10006CF50(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006D9F4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10006CF78(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006D9F4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10006CFA0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006D96C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10006CFC8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006D96C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10006CFF0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10006D024 + 4 * byte_1000CAB60[*v0]))(0x72616F6268736164, 0xE900000000000064);
}

uint64_t sub_10006D024()
{
  return 0x6D65766569686361;
}

uint64_t sub_10006D044()
{
  return 0x6F6272656461656CLL;
}

uint64_t sub_10006D064()
{
  return 0x676E656C6C616863;
}

unint64_t sub_10006D080()
{
  return 0xD000000000000012;
}

uint64_t sub_10006D09C()
{
  return 0x656C69666F7270;
}

uint64_t sub_10006D0B4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10006E574(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10006D0D8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006D8A0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10006D100(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006D8A0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10006D128(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006DA38();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10006D150(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006DA38();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10006D178()
{
  return 0x6F6272656461656CLL;
}

uint64_t sub_10006D19C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x6F6272656461656CLL && a2 == 0xED00004449647261)
  {
    result = swift_bridgeObjectRelease(0xED00004449647261);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F6272656461656CLL, 0xED00004449647261, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_10006D254(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006D9B0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10006D27C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006D9B0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10006D2A4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006D928();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10006D2CC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006D928();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10006D2F4()
{
  return 0x4449726579616C70;
}

uint64_t sub_10006D30C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x4449726579616C70 && a2 == 0xE800000000000000)
  {
    result = swift_bridgeObjectRelease(0xE800000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x4449726579616C70, 0xE800000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_10006D3A0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006D8E4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10006D3C8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006D8E4();
  return CodingKey.debugDescription.getter(a1, v2);
}

void LaunchDashboardAction.Destination.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD v17[14];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v18 = a4;
  v20 = a2;
  v21 = a3;
  v5 = sub_100003304(&qword_10010F050);
  v17[12] = *(_QWORD *)(v5 - 8);
  v17[13] = v5;
  __chkstk_darwin(v5);
  v17[11] = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003304(&qword_10010F058);
  v17[5] = *(_QWORD *)(v7 - 8);
  v17[6] = v7;
  __chkstk_darwin(v7);
  v17[4] = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003304(&qword_10010F060);
  v17[2] = *(_QWORD *)(v9 - 8);
  v17[3] = v9;
  __chkstk_darwin(v9);
  v17[1] = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100003304(&qword_10010F068);
  v17[9] = *(_QWORD *)(v11 - 8);
  v17[10] = v11;
  __chkstk_darwin(v11);
  v12 = sub_100003304(&qword_10010F070);
  v17[7] = *(_QWORD *)(v12 - 8);
  v17[8] = v12;
  __chkstk_darwin(v12);
  v13 = sub_100003304(&qword_10010F078);
  __chkstk_darwin(v13);
  v22 = sub_100003304(&qword_10010F080);
  v19 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v14 = a1[3];
  v15 = a1[4];
  sub_100003C28(a1, v14);
  v16 = sub_10006D8A0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for LaunchDashboardAction.Destination.CodingKeys, &type metadata for LaunchDashboardAction.Destination.CodingKeys, v16, v14, v15);
  __asm { BR              X10 }
}

uint64_t sub_10006D62C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)(v2 - 69) = 1;
  v3 = sub_10006D9F4();
  v4 = *(_QWORD *)(v2 - 96);
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for LaunchDashboardAction.Destination.AchievementsCodingKeys, v2 - 69, v4, &type metadata for LaunchDashboardAction.Destination.AchievementsCodingKeys, v3);
  v5 = *(_QWORD *)(v2 - 176);
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(*(_QWORD *)(v2 - 112), *(_QWORD *)(v2 - 104), v6, v5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 184) + 8))(v0, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 120) + 8))(v1, v4);
}

unint64_t sub_10006D8A0()
{
  unint64_t result;

  result = qword_10010F088;
  if (!qword_10010F088)
  {
    result = swift_getWitnessTable(&unk_1000CB46C, &type metadata for LaunchDashboardAction.Destination.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010F088);
  }
  return result;
}

unint64_t sub_10006D8E4()
{
  unint64_t result;

  result = qword_10010F090;
  if (!qword_10010F090)
  {
    result = swift_getWitnessTable(&unk_1000CB41C, &type metadata for LaunchDashboardAction.Destination.ProfileCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010F090);
  }
  return result;
}

unint64_t sub_10006D928()
{
  unint64_t result;

  result = qword_10010F098;
  if (!qword_10010F098)
  {
    result = swift_getWitnessTable(&unk_1000CB3CC, &type metadata for LaunchDashboardAction.Destination.LocalPlayerProfileCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010F098);
  }
  return result;
}

unint64_t sub_10006D96C()
{
  unint64_t result;

  result = qword_10010F0A0;
  if (!qword_10010F0A0)
  {
    result = swift_getWitnessTable(&unk_1000CB37C, &type metadata for LaunchDashboardAction.Destination.ChallengesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010F0A0);
  }
  return result;
}

unint64_t sub_10006D9B0()
{
  unint64_t result;

  result = qword_10010F0A8;
  if (!qword_10010F0A8)
  {
    result = swift_getWitnessTable(&unk_1000CB32C, &type metadata for LaunchDashboardAction.Destination.LeaderboardsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010F0A8);
  }
  return result;
}

unint64_t sub_10006D9F4()
{
  unint64_t result;

  result = qword_10010F0B0;
  if (!qword_10010F0B0)
  {
    result = swift_getWitnessTable(&unk_1000CB2DC, &type metadata for LaunchDashboardAction.Destination.AchievementsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010F0B0);
  }
  return result;
}

unint64_t sub_10006DA38()
{
  unint64_t result;

  result = qword_10010F0B8;
  if (!qword_10010F0B8)
  {
    result = swift_getWitnessTable(&unk_1000CB28C, &type metadata for LaunchDashboardAction.Destination.DashboardCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010F0B8);
  }
  return result;
}

_QWORD *LaunchDashboardAction.Destination.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *result;
  uint64_t v3;

  result = sub_10006E834(a1);
  if (v1)
    return (_QWORD *)v3;
  return result;
}

_QWORD *sub_10006DA9C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;
  char v6;

  result = sub_10006E834(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 16) = v6;
  }
  return result;
}

void sub_10006DAC8(_QWORD *a1)
{
  uint64_t v1;

  LaunchDashboardAction.Destination.encode(to:)(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(unsigned __int8 *)(v1 + 16));
}

uint64_t sub_10006DAE4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10006DB0C + 4 * byte_1000CAB6A[*v0]))(1701667175, 0xE400000000000000);
}

uint64_t sub_10006DB0C()
{
  return 0x726579616C70;
}

uint64_t sub_10006DB20()
{
  return 0x74616E6974736564;
}

uint64_t sub_10006DB40()
{
  return 0x654D6E6F69746361;
}

uint64_t sub_10006DB64()
{
  return 0x6449746567726174;
}

uint64_t sub_10006DB7C()
{
  return 0x7954746567726174;
}

uint64_t sub_10006DB98@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100070DBC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10006DBBC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006EF98();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10006DBE4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006EF98();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t LaunchDashboardAction.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int *v12;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 *v18;
  char v19;
  uint64_t v20;
  uint64_t v22;
  char v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  char v34;

  v3 = v1;
  v5 = sub_100003304(&qword_10010F0C0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100003C28(a1, v9);
  v11 = sub_10006EF98();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for LaunchDashboardAction.CodingKeys, &type metadata for LaunchDashboardAction.CodingKeys, v11, v9, v10);
  v34 = 0;
  type metadata accessor for Game(0);
  sub_1000035B4(&qword_10010ECF8, type metadata accessor for Game, (uint64_t)&protocol conformance descriptor for Game);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3);
  if (!v2)
  {
    v12 = (int *)type metadata accessor for LaunchDashboardAction(0);
    v13 = (__int128 *)(v3 + v12[5]);
    v14 = v13[7];
    v30 = v13[6];
    v31 = v14;
    v32 = v13[8];
    v33 = *((_QWORD *)v13 + 18);
    v15 = v13[3];
    v26 = v13[2];
    v27 = v15;
    v16 = v13[5];
    v28 = v13[4];
    v29 = v16;
    v17 = v13[1];
    v24 = *v13;
    v25 = v17;
    v23 = 1;
    sub_100003C90();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v24);
    v18 = (__int128 *)(v3 + v12[6]);
    v19 = *((_BYTE *)v18 + 16);
    v24 = *v18;
    LOBYTE(v25) = v19;
    v23 = 2;
    sub_10006EFDC();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v24);
    v20 = v3 + v12[7];
    LOBYTE(v24) = 3;
    type metadata accessor for ActionMetrics(0);
    sub_1000035B4(&qword_10010F0D8, (uint64_t (*)(uint64_t))&type metadata accessor for ActionMetrics, (uint64_t)&protocol conformance descriptor for ActionMetrics);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v20);
    LOBYTE(v24) = *(_BYTE *)(v3 + v12[8]);
    v23 = 4;
    sub_10006F020();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v24);
    LOBYTE(v24) = *(_BYTE *)(v3 + v12[9]);
    v23 = 5;
    sub_10006F064();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v24);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t LaunchDashboardAction.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  char v39;
  __int128 v40;
  char v41;
  char v42;
  _OWORD v43[9];
  uint64_t v44;
  _QWORD *v45;

  v32 = a2;
  v34 = type metadata accessor for ActionMetrics(0);
  v33 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v4 = (uint64_t *)((char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for Game(0);
  __chkstk_darwin(v5);
  v35 = (uint64_t *)((char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v37 = sub_100003304(&qword_10010F0F0);
  v7 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LaunchDashboardAction(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  v38 = a1;
  sub_100003C28(a1, v13);
  v15 = sub_10006EF98();
  v36 = v9;
  v16 = v45;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for LaunchDashboardAction.CodingKeys, &type metadata for LaunchDashboardAction.CodingKeys, v15, v13, v14);
  if (v16)
    return sub_100004624(v38);
  v45 = v4;
  v17 = v7;
  v18 = (uint64_t)v12;
  v19 = v33;
  v20 = v34;
  LOBYTE(v43[0]) = 0;
  sub_1000035B4(&qword_10010ED08, type metadata accessor for Game, (uint64_t)&protocol conformance descriptor for Game);
  v21 = v35;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v35);
  sub_100065C84((uint64_t)v21, v18);
  v42 = 1;
  sub_100004644();
  KeyedDecodingContainer.decode<A>(_:forKey:)(v43);
  v22 = (int *)v10;
  v23 = v18 + *(int *)(v10 + 20);
  v24 = v43[7];
  *(_OWORD *)(v23 + 96) = v43[6];
  *(_OWORD *)(v23 + 112) = v24;
  *(_OWORD *)(v23 + 128) = v43[8];
  *(_QWORD *)(v23 + 144) = v44;
  v25 = v43[3];
  *(_OWORD *)(v23 + 32) = v43[2];
  *(_OWORD *)(v23 + 48) = v25;
  v26 = v43[5];
  *(_OWORD *)(v23 + 64) = v43[4];
  *(_OWORD *)(v23 + 80) = v26;
  v27 = v43[1];
  *(_OWORD *)v23 = v43[0];
  *(_OWORD *)(v23 + 16) = v27;
  v39 = 2;
  sub_10006F164();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v40);
  v28 = v41;
  v29 = v18 + *(int *)(v10 + 24);
  *(_OWORD *)v29 = v40;
  *(_BYTE *)(v29 + 16) = v28;
  LOBYTE(v40) = 3;
  sub_1000035B4(&qword_10010F100, (uint64_t (*)(uint64_t))&type metadata accessor for ActionMetrics, (uint64_t)&protocol conformance descriptor for ActionMetrics);
  v30 = v45;
  v35 = 0;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v45);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v19 + 32))(v18 + v22[7], v30, v20);
  v39 = 4;
  sub_10006F1A8();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v40);
  *(_BYTE *)(v18 + v22[8]) = v40;
  v39 = 5;
  sub_10006F1EC();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v40);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v36, v37);
  *(_BYTE *)(v18 + v22[9]) = v40;
  sub_100007878(v18, v32, type metadata accessor for LaunchDashboardAction);
  sub_100004624(v38);
  return sub_1000106F0(v18, type metadata accessor for LaunchDashboardAction);
}

uint64_t sub_10006E50C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 28);
  v5 = type metadata accessor for ActionMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_10006E54C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return LaunchDashboardAction.init(from:)(a1, a2);
}

uint64_t sub_10006E560(_QWORD *a1)
{
  return LaunchDashboardAction.encode(to:)(a1);
}

uint64_t sub_10006E574(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 0x72616F6268736164 && a2 == 0xE900000000000064)
  {
    v5 = 0xE900000000000064;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x72616F6268736164, 0xE900000000000064, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6D65766569686361 && a2 == 0xEC00000073746E65)
  {
    v7 = 0xEC00000073746E65;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D65766569686361, 0xEC00000073746E65, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6F6272656461656CLL && a2 == 0xEC00000073647261)
  {
    v8 = 0xEC00000073647261;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F6272656461656CLL, 0xEC00000073647261, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x676E656C6C616863 && a2 == 0xEA00000000007365)
  {
    v9 = 0xEA00000000007365;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x676E656C6C616863, 0xEA00000000007365, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0xD000000000000012)
  {
    v10 = 0x80000001000D0850;
    if (a2 == 0x80000001000D0850)
      goto LABEL_31;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x80000001000D0850, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if (a1 == 0x656C69666F7270 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease(0xE700000000000000);
    return 5;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0x656C69666F7270, 0xE700000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

_QWORD *sub_10006E834(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _TtC13GameOverlayUI20GameOverlayUIService *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  _QWORD v41[15];
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;

  v2 = sub_100003304(&qword_10010F260);
  v3 = *(_QWORD *)(v2 - 8);
  v41[9] = v2;
  v41[10] = v3;
  __chkstk_darwin(v2);
  v41[14] = (char *)v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100003304(&qword_10010F268);
  v44 = *(_QWORD *)(v5 - 8);
  v45 = v5;
  __chkstk_darwin(v5);
  v43 = (char *)v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_100003304(&qword_10010F270);
  v41[6] = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v41[12] = (char *)v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003304(&qword_10010F278);
  v41[7] = *(_QWORD *)(v8 - 8);
  v41[8] = v8;
  __chkstk_darwin(v8);
  v41[13] = (char *)v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003304(&qword_10010F280);
  v41[4] = *(_QWORD *)(v10 - 8);
  v41[5] = v10;
  __chkstk_darwin(v10);
  v41[11] = (char *)v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100003304(&qword_10010F288);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100003304((uint64_t *)&unk_10010F290);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = a1[3];
  v21 = a1[4];
  v46 = a1;
  v22 = sub_100003C28(a1, v20);
  v23 = sub_10006D8A0();
  v24 = v47;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for LaunchDashboardAction.Destination.CodingKeys, &type metadata for LaunchDashboardAction.Destination.CodingKeys, v23, v20, v21);
  if (v24)
  {
    v25 = v46;
  }
  else
  {
    v41[2] = v12;
    v41[3] = v15;
    v41[1] = v13;
    v47 = v17;
    v22 = v19;
    v26 = KeyedDecodingContainer.allKeys.getter(v16);
    v27 = (_TtC13GameOverlayUI20GameOverlayUIService *)v26;
    if (*(_QWORD *)(v26 + 16) == 1)
      __asm { BR              X10 }
    v28 = type metadata accessor for DecodingError(0);
    swift_allocError(v28, &protocol witness table for DecodingError, 0, 0);
    v30 = v29;
    sub_100003304(&qword_10010BFA0);
    *v30 = &type metadata for LaunchDashboardAction.Destination;
    v31 = KeyedDecodingContainer.codingPath.getter(v16);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v31, 0xD00000000000002BLL, 0x80000001000CF850, 0);
    v32 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v28 - 8) + 104))(v30, enum case for DecodingError.typeMismatch(_:), v28);
    swift_willThrow(v32);
    swift_bridgeObjectRelease(v27, v33, v34, v35, v36, v37, v38, v39);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v19, v16);
    v25 = v46;
  }
  sub_100004624(v25);
  return v22;
}

unint64_t sub_10006EF98()
{
  unint64_t result;

  result = qword_10010F0C8;
  if (!qword_10010F0C8)
  {
    result = swift_getWitnessTable(&unk_1000CB23C, &type metadata for LaunchDashboardAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010F0C8);
  }
  return result;
}

unint64_t sub_10006EFDC()
{
  unint64_t result;

  result = qword_10010F0D0;
  if (!qword_10010F0D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LaunchDashboardAction.Destination, &type metadata for LaunchDashboardAction.Destination);
    atomic_store(result, (unint64_t *)&qword_10010F0D0);
  }
  return result;
}

unint64_t sub_10006F020()
{
  unint64_t result;

  result = qword_10010F0E0;
  if (!qword_10010F0E0)
  {
    result = swift_getWitnessTable(&unk_1000CBB0C, &type metadata for MetricsHelper.targetId);
    atomic_store(result, (unint64_t *)&qword_10010F0E0);
  }
  return result;
}

unint64_t sub_10006F064()
{
  unint64_t result;

  result = qword_10010F0E8;
  if (!qword_10010F0E8)
  {
    result = swift_getWitnessTable(&unk_1000CBAE4, &type metadata for MetricsHelper.targetType);
    atomic_store(result, (unint64_t *)&qword_10010F0E8);
  }
  return result;
}

uint64_t sub_10006F0A8(uint64_t a1, const char *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  _TtC13GameOverlayUI20GameOverlayUIService *v9;
  _TtC13GameOverlayUI20GameOverlayUIService *v10;
  _TtC13GameOverlayUI20GameOverlayUIService *v11;
  _TtC13GameOverlayUI20GameOverlayUIService *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  SEL v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  SEL v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  SEL v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  SEL v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v9 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 8);
  v10 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 24);
  v11 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 56);
  v12 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 72);
  v13 = *(_QWORD *)(a1 + 88);
  v14 = *(_QWORD *)(a1 + 96);
  v15 = *(_QWORD *)(a1 + 104);
  v16 = *(_QWORD *)(a1 + 112);
  v17 = *(_QWORD *)(a1 + 120);
  v48 = *(_QWORD *)(a1 + 136);
  v49 = *(_QWORD *)(a1 + 128);
  v47 = *(_QWORD *)(a1 + 144);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 40), a2, a3, a4, a5, a6, a7, a8);
  swift_bridgeObjectRelease(v10, v18, v19, v20, v21, v22, v23, v24);
  swift_bridgeObjectRelease(v9, v25, v26, v27, v28, v29, v30, v31);
  swift_bridgeObjectRelease(v11, v32, v33, v34, v35, v36, v37, v38);
  swift_bridgeObjectRelease(v12, v39, v40, v41, v42, v43, v44, v45);
  sub_10000FAB4(v13, v14, v15, v16, v17, v49, v48, v47);
  return a1;
}

unint64_t sub_10006F164()
{
  unint64_t result;

  result = qword_10010F0F8;
  if (!qword_10010F0F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LaunchDashboardAction.Destination, &type metadata for LaunchDashboardAction.Destination);
    atomic_store(result, (unint64_t *)&qword_10010F0F8);
  }
  return result;
}

unint64_t sub_10006F1A8()
{
  unint64_t result;

  result = qword_10010F108;
  if (!qword_10010F108)
  {
    result = swift_getWitnessTable(&unk_1000CBABC, &type metadata for MetricsHelper.targetId);
    atomic_store(result, (unint64_t *)&qword_10010F108);
  }
  return result;
}

unint64_t sub_10006F1EC()
{
  unint64_t result;

  result = qword_10010F110;
  if (!qword_10010F110)
  {
    result = swift_getWitnessTable(&unk_1000CBA94, &type metadata for MetricsHelper.targetType);
    atomic_store(result, (unint64_t *)&qword_10010F110);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for LaunchDashboardAction(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *__dst;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    v8 = a2[5];
    a1[4] = a2[4];
    a1[5] = v8;
    v9 = (int *)type metadata accessor for Game(0);
    v10 = v9[7];
    __dst = (char *)v4 + v10;
    v11 = (char *)a2 + v10;
    v12 = type metadata accessor for Date(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    if (v14(v11, 1, v12))
    {
      v15 = sub_100003304(&qword_10010CC10);
      memcpy(__dst, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(__dst, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
    }
    *(_QWORD *)((char *)v4 + v9[8]) = *(_QWORD *)((char *)a2 + v9[8]);
    *((_BYTE *)v4 + v9[9]) = *((_BYTE *)a2 + v9[9]);
    *((_BYTE *)v4 + v9[10]) = *((_BYTE *)a2 + v9[10]);
    *((_BYTE *)v4 + v9[11]) = *((_BYTE *)a2 + v9[11]);
    *((_BYTE *)v4 + v9[12]) = *((_BYTE *)a2 + v9[12]);
    *((_BYTE *)v4 + v9[13]) = *((_BYTE *)a2 + v9[13]);
    *((_BYTE *)v4 + v9[14]) = *((_BYTE *)a2 + v9[14]);
    v17 = v9[15];
    v18 = (_QWORD *)((char *)v4 + v17);
    v19 = (_QWORD *)((char *)a2 + v17);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    v21 = a3[5];
    v22 = (char *)v4 + v21;
    v23 = (_QWORD *)((char *)a2 + v21);
    v24 = *(_QWORD *)((char *)a2 + v21 + 8);
    *(_QWORD *)v22 = *(_QWORD *)((char *)a2 + v21);
    *((_QWORD *)v22 + 1) = v24;
    v25 = *(_QWORD *)((char *)a2 + v21 + 24);
    *((_QWORD *)v22 + 2) = *(_QWORD *)((char *)a2 + v21 + 16);
    *((_QWORD *)v22 + 3) = v25;
    v26 = *(_QWORD *)((char *)a2 + v21 + 40);
    *((_QWORD *)v22 + 4) = *(_QWORD *)((char *)a2 + v21 + 32);
    *((_QWORD *)v22 + 5) = v26;
    v27 = *(_QWORD *)((char *)a2 + v21 + 56);
    *((_QWORD *)v22 + 6) = *(_QWORD *)((char *)a2 + v21 + 48);
    *((_QWORD *)v22 + 7) = v27;
    v28 = *(_QWORD *)((char *)a2 + v21 + 72);
    *((_QWORD *)v22 + 8) = *(_QWORD *)((char *)a2 + v21 + 64);
    *((_QWORD *)v22 + 9) = v28;
    v22[80] = *((_BYTE *)a2 + v21 + 80);
    v29 = *(_QWORD *)((char *)a2 + v21 + 96);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v28);
    if (v29)
    {
      *((_QWORD *)v22 + 11) = v23[11];
      *((_QWORD *)v22 + 12) = v29;
      v30 = v23[14];
      *((_QWORD *)v22 + 13) = v23[13];
      *((_QWORD *)v22 + 14) = v30;
      v31 = v23[16];
      *((_QWORD *)v22 + 15) = v23[15];
      *((_QWORD *)v22 + 16) = v31;
      v32 = v23[18];
      *((_QWORD *)v22 + 17) = v23[17];
      *((_QWORD *)v22 + 18) = v32;
      swift_bridgeObjectRetain(v29);
      swift_bridgeObjectRetain(v30);
      swift_bridgeObjectRetain(v31);
      swift_bridgeObjectRetain(v32);
    }
    else
    {
      v33 = *(_OWORD *)(v23 + 13);
      *(_OWORD *)(v22 + 88) = *(_OWORD *)(v23 + 11);
      *(_OWORD *)(v22 + 104) = v33;
      v34 = *(_OWORD *)(v23 + 17);
      *(_OWORD *)(v22 + 120) = *(_OWORD *)(v23 + 15);
      *(_OWORD *)(v22 + 136) = v34;
    }
    v35 = a3[6];
    v36 = (char *)v4 + v35;
    v37 = (char *)a2 + v35;
    v38 = *(_QWORD *)v37;
    v39 = *((_QWORD *)v37 + 1);
    v40 = v37[16];
    sub_100049DD4(*(_QWORD *)v37, v39, v40);
    *(_QWORD *)v36 = v38;
    *((_QWORD *)v36 + 1) = v39;
    v36[16] = v40;
    v41 = a3[7];
    v42 = (char *)v4 + v41;
    v43 = (char *)a2 + v41;
    v44 = type metadata accessor for ActionMetrics(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v42, v43, v44);
    v45 = a3[9];
    *((_BYTE *)v4 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    *((_BYTE *)v4 + v45) = *((_BYTE *)a2 + v45);
  }
  return v4;
}

uint64_t destroy for LaunchDashboardAction(_TtC13GameOverlayUI20GameOverlayUIService **a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  SEL v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  _TtC13GameOverlayUI20GameOverlayUIService **v35;
  SEL v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  SEL v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  SEL v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  SEL v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  SEL v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  const char *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  _TtC13GameOverlayUI20GameOverlayUIService *v78;
  SEL v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  SEL v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  SEL v93;
  id v94;
  id v95;
  id v96;
  id v97;
  id v98;
  id v99;
  char *v100;
  uint64_t v101;

  swift_bridgeObjectRelease(a1[1], (SEL)a2, a3, a4, a5, a6, a7, a8);
  swift_bridgeObjectRelease(a1[3], v10, v11, v12, v13, v14, v15, v16);
  swift_bridgeObjectRelease(a1[5], v17, v18, v19, v20, v21, v22, v23);
  v24 = type metadata accessor for Game(0);
  v25 = (char *)a1 + *(int *)(v24 + 28);
  v26 = type metadata accessor for Date(0);
  v27 = *(_QWORD *)(v26 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    (*(void (**)(char *, uint64_t))(v27 + 8))(v25, v26);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)((char *)a1 + *(int *)(v24 + 60) + 8), v28, v29, v30, v31, v32, v33, v34);
  v35 = (_TtC13GameOverlayUI20GameOverlayUIService **)((char *)a1 + *(int *)(a2 + 20));
  swift_bridgeObjectRelease(v35[1], v36, v37, v38, v39, v40, v41, v42);
  swift_bridgeObjectRelease(v35[3], v43, v44, v45, v46, v47, v48, v49);
  swift_bridgeObjectRelease(v35[5], v50, v51, v52, v53, v54, v55, v56);
  swift_bridgeObjectRelease(v35[7], v57, v58, v59, v60, v61, v62, v63);
  swift_bridgeObjectRelease(v35[9], v64, v65, v66, v67, v68, v69, v70);
  v78 = v35[12];
  if (v78)
  {
    swift_bridgeObjectRelease(v78, v71, v72, v73, v74, v75, v76, v77);
    swift_bridgeObjectRelease(v35[14], v79, v80, v81, v82, v83, v84, v85);
    swift_bridgeObjectRelease(v35[16], v86, v87, v88, v89, v90, v91, v92);
    swift_bridgeObjectRelease(v35[18], v93, v94, v95, v96, v97, v98, v99);
  }
  sub_100019FD8(*(uint64_t *)((char *)a1 + *(int *)(a2 + 24)), *(uint64_t *)((char *)a1 + *(int *)(a2 + 24) + 8), *((_BYTE *)a1 + *(int *)(a2 + 24) + 16));
  v100 = (char *)a1 + *(int *)(a2 + 28);
  v101 = type metadata accessor for ActionMetrics(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v101 - 8) + 8))(v100, v101);
}

_QWORD *initializeWithCopy for LaunchDashboardAction(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *__dst;

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  v7 = a2[5];
  a1[4] = a2[4];
  a1[5] = v7;
  v8 = (int *)type metadata accessor for Game(0);
  v9 = v8[7];
  __dst = (char *)a1 + v9;
  v10 = (char *)a2 + v9;
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  if (v13(v10, 1, v11))
  {
    v14 = sub_100003304(&qword_10010CC10);
    memcpy(__dst, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(__dst, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
  }
  *(_QWORD *)((char *)a1 + v8[8]) = *(_QWORD *)((char *)a2 + v8[8]);
  *((_BYTE *)a1 + v8[9]) = *((_BYTE *)a2 + v8[9]);
  *((_BYTE *)a1 + v8[10]) = *((_BYTE *)a2 + v8[10]);
  *((_BYTE *)a1 + v8[11]) = *((_BYTE *)a2 + v8[11]);
  *((_BYTE *)a1 + v8[12]) = *((_BYTE *)a2 + v8[12]);
  *((_BYTE *)a1 + v8[13]) = *((_BYTE *)a2 + v8[13]);
  *((_BYTE *)a1 + v8[14]) = *((_BYTE *)a2 + v8[14]);
  v15 = v8[15];
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  v19 = a3[5];
  v20 = (char *)a1 + v19;
  v21 = (_QWORD *)((char *)a2 + v19);
  v22 = *(_QWORD *)((char *)a2 + v19 + 8);
  *(_QWORD *)v20 = *(_QWORD *)((char *)a2 + v19);
  *((_QWORD *)v20 + 1) = v22;
  v23 = *(_QWORD *)((char *)a2 + v19 + 24);
  *((_QWORD *)v20 + 2) = *(_QWORD *)((char *)a2 + v19 + 16);
  *((_QWORD *)v20 + 3) = v23;
  v24 = *(_QWORD *)((char *)a2 + v19 + 40);
  *((_QWORD *)v20 + 4) = *(_QWORD *)((char *)a2 + v19 + 32);
  *((_QWORD *)v20 + 5) = v24;
  v25 = *(_QWORD *)((char *)a2 + v19 + 56);
  *((_QWORD *)v20 + 6) = *(_QWORD *)((char *)a2 + v19 + 48);
  *((_QWORD *)v20 + 7) = v25;
  v26 = *(_QWORD *)((char *)a2 + v19 + 72);
  *((_QWORD *)v20 + 8) = *(_QWORD *)((char *)a2 + v19 + 64);
  *((_QWORD *)v20 + 9) = v26;
  v20[80] = *((_BYTE *)a2 + v19 + 80);
  v27 = *(_QWORD *)((char *)a2 + v19 + 96);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v26);
  if (v27)
  {
    *((_QWORD *)v20 + 11) = v21[11];
    *((_QWORD *)v20 + 12) = v27;
    v28 = v21[14];
    *((_QWORD *)v20 + 13) = v21[13];
    *((_QWORD *)v20 + 14) = v28;
    v29 = v21[16];
    *((_QWORD *)v20 + 15) = v21[15];
    *((_QWORD *)v20 + 16) = v29;
    v30 = v21[18];
    *((_QWORD *)v20 + 17) = v21[17];
    *((_QWORD *)v20 + 18) = v30;
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v30);
  }
  else
  {
    v31 = *(_OWORD *)(v21 + 13);
    *(_OWORD *)(v20 + 88) = *(_OWORD *)(v21 + 11);
    *(_OWORD *)(v20 + 104) = v31;
    v32 = *(_OWORD *)(v21 + 17);
    *(_OWORD *)(v20 + 120) = *(_OWORD *)(v21 + 15);
    *(_OWORD *)(v20 + 136) = v32;
  }
  v33 = a3[6];
  v34 = (char *)a1 + v33;
  v35 = (char *)a2 + v33;
  v36 = *(_QWORD *)v35;
  v37 = *((_QWORD *)v35 + 1);
  v38 = v35[16];
  sub_100049DD4(*(_QWORD *)v35, v37, v38);
  *(_QWORD *)v34 = v36;
  *((_QWORD *)v34 + 1) = v37;
  v34[16] = v38;
  v39 = a3[7];
  v40 = (char *)a1 + v39;
  v41 = (char *)a2 + v39;
  v42 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v40, v41, v42);
  v43 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  *((_BYTE *)a1 + v43) = *((_BYTE *)a2 + v43);
  return a1;
}

_QWORD *assignWithCopy for LaunchDashboardAction(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  _TtC13GameOverlayUI20GameOverlayUIService *v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  _TtC13GameOverlayUI20GameOverlayUIService *v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  _TtC13GameOverlayUI20GameOverlayUIService *v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  int *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(char *, uint64_t, uint64_t);
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  _TtC13GameOverlayUI20GameOverlayUIService *v47;
  SEL v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  _TtC13GameOverlayUI20GameOverlayUIService *v59;
  SEL v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  uint64_t v67;
  _TtC13GameOverlayUI20GameOverlayUIService *v68;
  SEL v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  uint64_t v76;
  _TtC13GameOverlayUI20GameOverlayUIService *v77;
  SEL v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  uint64_t v85;
  _TtC13GameOverlayUI20GameOverlayUIService *v86;
  SEL v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  id v93;
  uint64_t v94;
  _TtC13GameOverlayUI20GameOverlayUIService *v95;
  SEL v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  id v102;
  _OWORD *v103;
  __int128 *v104;
  _TtC13GameOverlayUI20GameOverlayUIService *v105;
  uint64_t v106;
  uint64_t v107;
  SEL v108;
  id v109;
  id v110;
  id v111;
  id v112;
  id v113;
  id v114;
  uint64_t v115;
  _TtC13GameOverlayUI20GameOverlayUIService *v116;
  SEL v117;
  id v118;
  id v119;
  id v120;
  id v121;
  id v122;
  id v123;
  uint64_t v124;
  _TtC13GameOverlayUI20GameOverlayUIService *v125;
  SEL v126;
  id v127;
  id v128;
  id v129;
  id v130;
  id v131;
  id v132;
  uint64_t v133;
  _TtC13GameOverlayUI20GameOverlayUIService *v134;
  SEL v135;
  id v136;
  id v137;
  id v138;
  id v139;
  id v140;
  id v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  unsigned __int8 v157;
  uint64_t v158;
  uint64_t v159;
  unsigned __int8 v160;
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;

  *a1 = *a2;
  v6 = a2[1];
  v7 = (_TtC13GameOverlayUI20GameOverlayUIService *)a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7, v8, v9, v10, v11, v12, v13, v14);
  a1[2] = a2[2];
  v15 = a2[3];
  v16 = (_TtC13GameOverlayUI20GameOverlayUIService *)a1[3];
  a1[3] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16, v17, v18, v19, v20, v21, v22, v23);
  a1[4] = a2[4];
  v24 = a2[5];
  v25 = (_TtC13GameOverlayUI20GameOverlayUIService *)a1[5];
  a1[5] = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25, v26, v27, v28, v29, v30, v31, v32);
  v33 = (int *)type metadata accessor for Game(0);
  v34 = v33[7];
  v35 = (char *)a1 + v34;
  v36 = (char *)a2 + v34;
  v37 = type metadata accessor for Date(0);
  v38 = *(_QWORD *)(v37 - 8);
  v39 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v38 + 48);
  v40 = v39(v35, 1, v37);
  v41 = v39(v36, 1, v37);
  if (v40)
  {
    if (!v41)
    {
      (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v35, v36, v37);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v41)
  {
    (*(void (**)(char *, uint64_t))(v38 + 8))(v35, v37);
LABEL_6:
    v42 = sub_100003304(&qword_10010CC10);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v38 + 24))(v35, v36, v37);
LABEL_7:
  *(_QWORD *)((char *)a1 + v33[8]) = *(_QWORD *)((char *)a2 + v33[8]);
  *((_BYTE *)a1 + v33[9]) = *((_BYTE *)a2 + v33[9]);
  *((_BYTE *)a1 + v33[10]) = *((_BYTE *)a2 + v33[10]);
  *((_BYTE *)a1 + v33[11]) = *((_BYTE *)a2 + v33[11]);
  *((_BYTE *)a1 + v33[12]) = *((_BYTE *)a2 + v33[12]);
  *((_BYTE *)a1 + v33[13]) = *((_BYTE *)a2 + v33[13]);
  *((_BYTE *)a1 + v33[14]) = *((_BYTE *)a2 + v33[14]);
  v43 = v33[15];
  v44 = (_QWORD *)((char *)a1 + v43);
  v45 = (_QWORD *)((char *)a2 + v43);
  *v44 = *v45;
  v46 = v45[1];
  v47 = (_TtC13GameOverlayUI20GameOverlayUIService *)v44[1];
  v44[1] = v46;
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRelease(v47, v48, v49, v50, v51, v52, v53, v54);
  v55 = a3[5];
  v56 = (char *)a1 + v55;
  v57 = (char *)a2 + v55;
  *(_QWORD *)v56 = *(_QWORD *)((char *)a2 + v55);
  v58 = *(_QWORD *)((char *)a2 + v55 + 8);
  v59 = *(_TtC13GameOverlayUI20GameOverlayUIService **)((char *)a1 + v55 + 8);
  *((_QWORD *)v56 + 1) = v58;
  swift_bridgeObjectRetain(v58);
  swift_bridgeObjectRelease(v59, v60, v61, v62, v63, v64, v65, v66);
  *((_QWORD *)v56 + 2) = *((_QWORD *)v57 + 2);
  v67 = *((_QWORD *)v57 + 3);
  v68 = (_TtC13GameOverlayUI20GameOverlayUIService *)*((_QWORD *)v56 + 3);
  *((_QWORD *)v56 + 3) = v67;
  swift_bridgeObjectRetain(v67);
  swift_bridgeObjectRelease(v68, v69, v70, v71, v72, v73, v74, v75);
  *((_QWORD *)v56 + 4) = *((_QWORD *)v57 + 4);
  v76 = *((_QWORD *)v57 + 5);
  v77 = (_TtC13GameOverlayUI20GameOverlayUIService *)*((_QWORD *)v56 + 5);
  *((_QWORD *)v56 + 5) = v76;
  swift_bridgeObjectRetain(v76);
  swift_bridgeObjectRelease(v77, v78, v79, v80, v81, v82, v83, v84);
  *((_QWORD *)v56 + 6) = *((_QWORD *)v57 + 6);
  v85 = *((_QWORD *)v57 + 7);
  v86 = (_TtC13GameOverlayUI20GameOverlayUIService *)*((_QWORD *)v56 + 7);
  *((_QWORD *)v56 + 7) = v85;
  swift_bridgeObjectRetain(v85);
  swift_bridgeObjectRelease(v86, v87, v88, v89, v90, v91, v92, v93);
  *((_QWORD *)v56 + 8) = *((_QWORD *)v57 + 8);
  v94 = *((_QWORD *)v57 + 9);
  v95 = (_TtC13GameOverlayUI20GameOverlayUIService *)*((_QWORD *)v56 + 9);
  *((_QWORD *)v56 + 9) = v94;
  swift_bridgeObjectRetain(v94);
  swift_bridgeObjectRelease(v95, v96, v97, v98, v99, v100, v101, v102);
  v56[80] = v57[80];
  v103 = v56 + 88;
  v104 = (__int128 *)(v57 + 88);
  v105 = (_TtC13GameOverlayUI20GameOverlayUIService *)*((_QWORD *)v56 + 12);
  v106 = *((_QWORD *)v57 + 12);
  if (v105)
  {
    if (v106)
    {
      *((_QWORD *)v56 + 11) = *((_QWORD *)v57 + 11);
      v107 = *((_QWORD *)v57 + 12);
      *((_QWORD *)v56 + 12) = v107;
      swift_bridgeObjectRetain(v107);
      swift_bridgeObjectRelease(v105, v108, v109, v110, v111, v112, v113, v114);
      *((_QWORD *)v56 + 13) = *((_QWORD *)v57 + 13);
      v115 = *((_QWORD *)v57 + 14);
      v116 = (_TtC13GameOverlayUI20GameOverlayUIService *)*((_QWORD *)v56 + 14);
      *((_QWORD *)v56 + 14) = v115;
      swift_bridgeObjectRetain(v115);
      swift_bridgeObjectRelease(v116, v117, v118, v119, v120, v121, v122, v123);
      *((_QWORD *)v56 + 15) = *((_QWORD *)v57 + 15);
      v124 = *((_QWORD *)v57 + 16);
      v125 = (_TtC13GameOverlayUI20GameOverlayUIService *)*((_QWORD *)v56 + 16);
      *((_QWORD *)v56 + 16) = v124;
      swift_bridgeObjectRetain(v124);
      swift_bridgeObjectRelease(v125, v126, v127, v128, v129, v130, v131, v132);
      *((_QWORD *)v56 + 17) = *((_QWORD *)v57 + 17);
      v133 = *((_QWORD *)v57 + 18);
      v134 = (_TtC13GameOverlayUI20GameOverlayUIService *)*((_QWORD *)v56 + 18);
      *((_QWORD *)v56 + 18) = v133;
      swift_bridgeObjectRetain(v133);
      swift_bridgeObjectRelease(v134, v135, v136, v137, v138, v139, v140, v141);
    }
    else
    {
      sub_100004244((_QWORD *)v56 + 11);
      v146 = *(_OWORD *)(v57 + 136);
      v148 = *v104;
      v147 = *(_OWORD *)(v57 + 104);
      *(_OWORD *)(v56 + 120) = *(_OWORD *)(v57 + 120);
      *(_OWORD *)(v56 + 136) = v146;
      *v103 = v148;
      *(_OWORD *)(v56 + 104) = v147;
    }
  }
  else if (v106)
  {
    *((_QWORD *)v56 + 11) = *((_QWORD *)v57 + 11);
    v142 = *((_QWORD *)v57 + 12);
    *((_QWORD *)v56 + 12) = v142;
    *((_QWORD *)v56 + 13) = *((_QWORD *)v57 + 13);
    v143 = *((_QWORD *)v57 + 14);
    *((_QWORD *)v56 + 14) = v143;
    *((_QWORD *)v56 + 15) = *((_QWORD *)v57 + 15);
    v144 = *((_QWORD *)v57 + 16);
    *((_QWORD *)v56 + 16) = v144;
    *((_QWORD *)v56 + 17) = *((_QWORD *)v57 + 17);
    v145 = *((_QWORD *)v57 + 18);
    *((_QWORD *)v56 + 18) = v145;
    swift_bridgeObjectRetain(v142);
    swift_bridgeObjectRetain(v143);
    swift_bridgeObjectRetain(v144);
    swift_bridgeObjectRetain(v145);
  }
  else
  {
    v149 = *v104;
    v150 = *(_OWORD *)(v57 + 104);
    v151 = *(_OWORD *)(v57 + 136);
    *(_OWORD *)(v56 + 120) = *(_OWORD *)(v57 + 120);
    *(_OWORD *)(v56 + 136) = v151;
    *v103 = v149;
    *(_OWORD *)(v56 + 104) = v150;
  }
  v152 = a3[6];
  v153 = (char *)a1 + v152;
  v154 = (char *)a2 + v152;
  v155 = *(_QWORD *)v154;
  v156 = *((_QWORD *)v154 + 1);
  v157 = v154[16];
  sub_100049DD4(*(_QWORD *)v154, v156, v157);
  v158 = *(_QWORD *)v153;
  v159 = *((_QWORD *)v153 + 1);
  *(_QWORD *)v153 = v155;
  *((_QWORD *)v153 + 1) = v156;
  v160 = v153[16];
  v153[16] = v157;
  sub_100019FD8(v158, v159, v160);
  v161 = a3[7];
  v162 = (char *)a1 + v161;
  v163 = (char *)a2 + v161;
  v164 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v164 - 8) + 24))(v162, v163, v164);
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  return a1;
}

_OWORD *initializeWithTake for LaunchDashboardAction(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  v7 = (int *)type metadata accessor for Game(0);
  v8 = v7[7];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_100003304(&qword_10010CC10);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  *(_QWORD *)((char *)a1 + v7[8]) = *(_QWORD *)((char *)a2 + v7[8]);
  *((_BYTE *)a1 + v7[9]) = *((_BYTE *)a2 + v7[9]);
  *((_BYTE *)a1 + v7[10]) = *((_BYTE *)a2 + v7[10]);
  *((_BYTE *)a1 + v7[11]) = *((_BYTE *)a2 + v7[11]);
  *((_BYTE *)a1 + v7[12]) = *((_BYTE *)a2 + v7[12]);
  *((_BYTE *)a1 + v7[13]) = *((_BYTE *)a2 + v7[13]);
  *((_BYTE *)a1 + v7[14]) = *((_BYTE *)a2 + v7[14]);
  *(_OWORD *)((char *)a1 + v7[15]) = *(_OWORD *)((char *)a2 + v7[15]);
  v14 = a3[5];
  v15 = a3[6];
  v16 = (char *)a1 + v14;
  v17 = (char *)a2 + v14;
  *((_QWORD *)v16 + 18) = *((_QWORD *)v17 + 18);
  v18 = *((_OWORD *)v17 + 1);
  *(_OWORD *)v16 = *(_OWORD *)v17;
  *((_OWORD *)v16 + 1) = v18;
  v19 = *((_OWORD *)v17 + 5);
  *((_OWORD *)v16 + 4) = *((_OWORD *)v17 + 4);
  *((_OWORD *)v16 + 5) = v19;
  v20 = *((_OWORD *)v17 + 3);
  *((_OWORD *)v16 + 2) = *((_OWORD *)v17 + 2);
  *((_OWORD *)v16 + 3) = v20;
  v21 = *((_OWORD *)v17 + 8);
  v22 = *((_OWORD *)v17 + 6);
  *((_OWORD *)v16 + 7) = *((_OWORD *)v17 + 7);
  *((_OWORD *)v16 + 8) = v21;
  *((_OWORD *)v16 + 6) = v22;
  v23 = (char *)a1 + v15;
  v24 = (char *)a2 + v15;
  v23[16] = v24[16];
  *(_OWORD *)v23 = *(_OWORD *)v24;
  v25 = a3[7];
  v26 = (char *)a1 + v25;
  v27 = (char *)a2 + v25;
  v28 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v26, v27, v28);
  v29 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  *((_BYTE *)a1 + v29) = *((_BYTE *)a2 + v29);
  return a1;
}

_QWORD *assignWithTake for LaunchDashboardAction(_QWORD *a1, uint64_t a2, int *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t v11;
  _TtC13GameOverlayUI20GameOverlayUIService *v12;
  uint64_t v13;
  _TtC13GameOverlayUI20GameOverlayUIService *v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  _TtC13GameOverlayUI20GameOverlayUIService *v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  int *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(char *, uint64_t, uint64_t);
  int v38;
  int v39;
  const char *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  _TtC13GameOverlayUI20GameOverlayUIService *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  _TtC13GameOverlayUI20GameOverlayUIService *v58;
  SEL v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  uint64_t v66;
  _TtC13GameOverlayUI20GameOverlayUIService *v67;
  SEL v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  uint64_t v75;
  _TtC13GameOverlayUI20GameOverlayUIService *v76;
  SEL v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  uint64_t v84;
  _TtC13GameOverlayUI20GameOverlayUIService *v85;
  SEL v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  uint64_t v93;
  _TtC13GameOverlayUI20GameOverlayUIService *v94;
  SEL v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  const char *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  _TtC13GameOverlayUI20GameOverlayUIService *v109;
  uint64_t v110;
  uint64_t v111;
  _TtC13GameOverlayUI20GameOverlayUIService *v112;
  SEL v113;
  id v114;
  id v115;
  id v116;
  id v117;
  id v118;
  id v119;
  uint64_t v120;
  _TtC13GameOverlayUI20GameOverlayUIService *v121;
  SEL v122;
  id v123;
  id v124;
  id v125;
  id v126;
  id v127;
  id v128;
  uint64_t v129;
  _TtC13GameOverlayUI20GameOverlayUIService *v130;
  SEL v131;
  id v132;
  id v133;
  id v134;
  id v135;
  id v136;
  id v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  char v143;
  uint64_t v144;
  uint64_t v145;
  unsigned __int8 v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;

  v11 = *(_QWORD *)(a2 + 8);
  v12 = (_TtC13GameOverlayUI20GameOverlayUIService *)a1[1];
  *a1 = *(_QWORD *)a2;
  a1[1] = v11;
  swift_bridgeObjectRelease(v12, (SEL)a2, a3, a4, a5, a6, a7, a8);
  v13 = *(_QWORD *)(a2 + 24);
  v14 = (_TtC13GameOverlayUI20GameOverlayUIService *)a1[3];
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v13;
  swift_bridgeObjectRelease(v14, v15, v16, v17, v18, v19, v20, v21);
  v22 = *(_QWORD *)(a2 + 40);
  v23 = (_TtC13GameOverlayUI20GameOverlayUIService *)a1[5];
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = v22;
  swift_bridgeObjectRelease(v23, v24, v25, v26, v27, v28, v29, v30);
  v31 = (int *)type metadata accessor for Game(0);
  v32 = v31[7];
  v33 = (char *)a1 + v32;
  v34 = (char *)(a2 + v32);
  v35 = type metadata accessor for Date(0);
  v36 = *(_QWORD *)(v35 - 8);
  v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 48);
  v38 = v37(v33, 1, v35);
  v39 = v37(v34, 1, v35);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v33, v34, v35);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v36 + 8))(v33, v35);
LABEL_6:
    v47 = sub_100003304(&qword_10010CC10);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v36 + 40))(v33, v34, v35);
LABEL_7:
  *(_QWORD *)((char *)a1 + v31[8]) = *(_QWORD *)(a2 + v31[8]);
  *((_BYTE *)a1 + v31[9]) = *(_BYTE *)(a2 + v31[9]);
  *((_BYTE *)a1 + v31[10]) = *(_BYTE *)(a2 + v31[10]);
  *((_BYTE *)a1 + v31[11]) = *(_BYTE *)(a2 + v31[11]);
  *((_BYTE *)a1 + v31[12]) = *(_BYTE *)(a2 + v31[12]);
  *((_BYTE *)a1 + v31[13]) = *(_BYTE *)(a2 + v31[13]);
  *((_BYTE *)a1 + v31[14]) = *(_BYTE *)(a2 + v31[14]);
  v48 = v31[15];
  v49 = (_QWORD *)((char *)a1 + v48);
  v50 = (uint64_t *)(a2 + v48);
  v52 = *v50;
  v51 = v50[1];
  v53 = (_TtC13GameOverlayUI20GameOverlayUIService *)v49[1];
  *v49 = v52;
  v49[1] = v51;
  swift_bridgeObjectRelease(v53, v40, v41, v42, v43, v44, v45, v46);
  v54 = a3[5];
  v55 = (char *)a1 + v54;
  v56 = a2 + v54;
  v57 = *(_QWORD *)(a2 + v54 + 8);
  v58 = *(_TtC13GameOverlayUI20GameOverlayUIService **)((char *)a1 + v54 + 8);
  *(_QWORD *)v55 = *(_QWORD *)(a2 + v54);
  *((_QWORD *)v55 + 1) = v57;
  swift_bridgeObjectRelease(v58, v59, v60, v61, v62, v63, v64, v65);
  v66 = *(_QWORD *)(v56 + 24);
  v67 = (_TtC13GameOverlayUI20GameOverlayUIService *)*((_QWORD *)v55 + 3);
  *((_QWORD *)v55 + 2) = *(_QWORD *)(v56 + 16);
  *((_QWORD *)v55 + 3) = v66;
  swift_bridgeObjectRelease(v67, v68, v69, v70, v71, v72, v73, v74);
  v75 = *(_QWORD *)(v56 + 40);
  v76 = (_TtC13GameOverlayUI20GameOverlayUIService *)*((_QWORD *)v55 + 5);
  *((_QWORD *)v55 + 4) = *(_QWORD *)(v56 + 32);
  *((_QWORD *)v55 + 5) = v75;
  swift_bridgeObjectRelease(v76, v77, v78, v79, v80, v81, v82, v83);
  v84 = *(_QWORD *)(v56 + 56);
  v85 = (_TtC13GameOverlayUI20GameOverlayUIService *)*((_QWORD *)v55 + 7);
  *((_QWORD *)v55 + 6) = *(_QWORD *)(v56 + 48);
  *((_QWORD *)v55 + 7) = v84;
  swift_bridgeObjectRelease(v85, v86, v87, v88, v89, v90, v91, v92);
  v93 = *(_QWORD *)(v56 + 72);
  v94 = (_TtC13GameOverlayUI20GameOverlayUIService *)*((_QWORD *)v55 + 9);
  *((_QWORD *)v55 + 8) = *(_QWORD *)(v56 + 64);
  *((_QWORD *)v55 + 9) = v93;
  swift_bridgeObjectRelease(v94, v95, v96, v97, v98, v99, v100, v101);
  v55[80] = *(_BYTE *)(v56 + 80);
  v109 = (_TtC13GameOverlayUI20GameOverlayUIService *)*((_QWORD *)v55 + 12);
  if (!v109)
  {
LABEL_11:
    v138 = *(_OWORD *)(v56 + 104);
    *(_OWORD *)(v55 + 88) = *(_OWORD *)(v56 + 88);
    *(_OWORD *)(v55 + 104) = v138;
    v139 = *(_OWORD *)(v56 + 136);
    *(_OWORD *)(v55 + 120) = *(_OWORD *)(v56 + 120);
    *(_OWORD *)(v55 + 136) = v139;
    goto LABEL_12;
  }
  v110 = *(_QWORD *)(v56 + 96);
  if (!v110)
  {
    sub_100004244((_QWORD *)v55 + 11);
    goto LABEL_11;
  }
  *((_QWORD *)v55 + 11) = *(_QWORD *)(v56 + 88);
  *((_QWORD *)v55 + 12) = v110;
  swift_bridgeObjectRelease(v109, v102, v103, v104, v105, v106, v107, v108);
  v111 = *(_QWORD *)(v56 + 112);
  v112 = (_TtC13GameOverlayUI20GameOverlayUIService *)*((_QWORD *)v55 + 14);
  *((_QWORD *)v55 + 13) = *(_QWORD *)(v56 + 104);
  *((_QWORD *)v55 + 14) = v111;
  swift_bridgeObjectRelease(v112, v113, v114, v115, v116, v117, v118, v119);
  v120 = *(_QWORD *)(v56 + 128);
  v121 = (_TtC13GameOverlayUI20GameOverlayUIService *)*((_QWORD *)v55 + 16);
  *((_QWORD *)v55 + 15) = *(_QWORD *)(v56 + 120);
  *((_QWORD *)v55 + 16) = v120;
  swift_bridgeObjectRelease(v121, v122, v123, v124, v125, v126, v127, v128);
  v129 = *(_QWORD *)(v56 + 144);
  v130 = (_TtC13GameOverlayUI20GameOverlayUIService *)*((_QWORD *)v55 + 18);
  *((_QWORD *)v55 + 17) = *(_QWORD *)(v56 + 136);
  *((_QWORD *)v55 + 18) = v129;
  swift_bridgeObjectRelease(v130, v131, v132, v133, v134, v135, v136, v137);
LABEL_12:
  v140 = a3[6];
  v141 = (char *)a1 + v140;
  v142 = a2 + v140;
  v143 = *(_BYTE *)(v142 + 16);
  v144 = *(_QWORD *)v141;
  v145 = *((_QWORD *)v141 + 1);
  *(_OWORD *)v141 = *(_OWORD *)v142;
  v146 = v141[16];
  v141[16] = v143;
  sub_100019FD8(v144, v145, v146);
  v147 = a3[7];
  v148 = (char *)a1 + v147;
  v149 = a2 + v147;
  v150 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v150 - 8) + 40))(v148, v149, v150);
  v151 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *((_BYTE *)a1 + v151) = *(_BYTE *)(a2 + v151);
  return a1;
}

uint64_t getEnumTagSinglePayload for LaunchDashboardAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100070234);
}

uint64_t sub_100070234(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = type metadata accessor for Game(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = type metadata accessor for ActionMetrics(0);
    v10 = a1 + *(int *)(a3 + 28);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for LaunchDashboardAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000702EC);
}

uint64_t sub_1000702EC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for Game(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
      return result;
    }
    v10 = type metadata accessor for ActionMetrics(0);
    v12 = a1 + *(int *)(a4 + 28);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_100070394(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[6];

  result = type metadata accessor for Game(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = &unk_1000CAC88;
    v5[2] = &unk_1000CACA0;
    result = type metadata accessor for ActionMetrics(319);
    if (v4 <= 0x3F)
    {
      v5[3] = *(_QWORD *)(result - 8) + 64;
      v5[4] = &unk_1000CACB8;
      v5[5] = &unk_1000CACD0;
      swift_initStructMetadata(a1, 256, 6, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t destroy for LaunchDashboardAction.Destination(uint64_t a1)
{
  return sub_100019FD8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s13GameOverlayUI21LaunchDashboardActionV11DestinationOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_100049DD4(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for LaunchDashboardAction.Destination(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_100049DD4(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_100019FD8(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for LaunchDashboardAction.Destination(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_100019FD8(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for LaunchDashboardAction.Destination(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for LaunchDashboardAction.Destination(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_1000705C0(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 2u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 3);
}

uint64_t sub_1000705D8(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(_QWORD *)result = a2 - 3;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for LaunchDashboardAction.Destination()
{
  return &type metadata for LaunchDashboardAction.Destination;
}

ValueMetadata *type metadata accessor for LaunchDashboardAction.CodingKeys()
{
  return &type metadata for LaunchDashboardAction.CodingKeys;
}

uint64_t _s13GameOverlayUI21LaunchDashboardActionV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_100070664 + 4 * byte_1000CAB7B[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100070698 + 4 * byte_1000CAB76[v4]))();
}

uint64_t sub_100070698(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000706A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000706A8);
  return result;
}

uint64_t sub_1000706B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000706BCLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1000706C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000706C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LaunchDashboardAction.Destination.CodingKeys()
{
  return &type metadata for LaunchDashboardAction.Destination.CodingKeys;
}

ValueMetadata *type metadata accessor for LaunchDashboardAction.Destination.DashboardCodingKeys()
{
  return &type metadata for LaunchDashboardAction.Destination.DashboardCodingKeys;
}

ValueMetadata *type metadata accessor for LaunchDashboardAction.Destination.AchievementsCodingKeys()
{
  return &type metadata for LaunchDashboardAction.Destination.AchievementsCodingKeys;
}

ValueMetadata *type metadata accessor for LaunchDashboardAction.Destination.LeaderboardsCodingKeys()
{
  return &type metadata for LaunchDashboardAction.Destination.LeaderboardsCodingKeys;
}

ValueMetadata *type metadata accessor for LaunchDashboardAction.Destination.ChallengesCodingKeys()
{
  return &type metadata for LaunchDashboardAction.Destination.ChallengesCodingKeys;
}

ValueMetadata *type metadata accessor for LaunchDashboardAction.Destination.LocalPlayerProfileCodingKeys()
{
  return &type metadata for LaunchDashboardAction.Destination.LocalPlayerProfileCodingKeys;
}

uint64_t _s13GameOverlayUI21LaunchDashboardActionV11DestinationO22AchievementsCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100070778 + 4 * byte_1000CAB80[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100070798 + 4 * byte_1000CAB85[v4]))();
}

_BYTE *sub_100070778(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100070798(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000707A0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000707A8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000707B0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000707B8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for LaunchDashboardAction.Destination.ProfileCodingKeys()
{
  return &type metadata for LaunchDashboardAction.Destination.ProfileCodingKeys;
}

unint64_t sub_1000707D8()
{
  unint64_t result;

  result = qword_10010F1B8;
  if (!qword_10010F1B8)
  {
    result = swift_getWitnessTable(&unk_1000CAE44, &type metadata for LaunchDashboardAction.Destination.ProfileCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010F1B8);
  }
  return result;
}

unint64_t sub_100070820()
{
  unint64_t result;

  result = qword_10010F1C0;
  if (!qword_10010F1C0)
  {
    result = swift_getWitnessTable(&unk_1000CAF9C, &type metadata for LaunchDashboardAction.Destination.LeaderboardsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010F1C0);
  }
  return result;
}

unint64_t sub_100070868()
{
  unint64_t result;

  result = qword_10010F1C8;
  if (!qword_10010F1C8)
  {
    result = swift_getWitnessTable(&unk_1000CB054, &type metadata for LaunchDashboardAction.Destination.AchievementsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010F1C8);
  }
  return result;
}

unint64_t sub_1000708B0()
{
  unint64_t result;

  result = qword_10010F1D0;
  if (!qword_10010F1D0)
  {
    result = swift_getWitnessTable(&unk_1000CB15C, &type metadata for LaunchDashboardAction.Destination.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010F1D0);
  }
  return result;
}

unint64_t sub_1000708F8()
{
  unint64_t result;

  result = qword_10010F1D8;
  if (!qword_10010F1D8)
  {
    result = swift_getWitnessTable(&unk_1000CB214, &type metadata for LaunchDashboardAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010F1D8);
  }
  return result;
}

unint64_t sub_100070940()
{
  unint64_t result;

  result = qword_10010F1E0;
  if (!qword_10010F1E0)
  {
    result = swift_getWitnessTable(&unk_1000CB184, &type metadata for LaunchDashboardAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010F1E0);
  }
  return result;
}

unint64_t sub_100070988()
{
  unint64_t result;

  result = qword_10010F1E8;
  if (!qword_10010F1E8)
  {
    result = swift_getWitnessTable(&unk_1000CB1AC, &type metadata for LaunchDashboardAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010F1E8);
  }
  return result;
}

unint64_t sub_1000709D0()
{
  unint64_t result;

  result = qword_10010F1F0;
  if (!qword_10010F1F0)
  {
    result = swift_getWitnessTable(&unk_1000CB07C, &type metadata for LaunchDashboardAction.Destination.DashboardCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010F1F0);
  }
  return result;
}

unint64_t sub_100070A18()
{
  unint64_t result;

  result = qword_10010F1F8;
  if (!qword_10010F1F8)
  {
    result = swift_getWitnessTable(&unk_1000CB0A4, &type metadata for LaunchDashboardAction.Destination.DashboardCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010F1F8);
  }
  return result;
}

unint64_t sub_100070A60()
{
  unint64_t result;

  result = qword_10010F200;
  if (!qword_10010F200)
  {
    result = swift_getWitnessTable(&unk_1000CAFC4, &type metadata for LaunchDashboardAction.Destination.AchievementsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010F200);
  }
  return result;
}

unint64_t sub_100070AA8()
{
  unint64_t result;

  result = qword_10010F208;
  if (!qword_10010F208)
  {
    result = swift_getWitnessTable(&unk_1000CAFEC, &type metadata for LaunchDashboardAction.Destination.AchievementsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010F208);
  }
  return result;
}

unint64_t sub_100070AF0()
{
  unint64_t result;

  result = qword_10010F210;
  if (!qword_10010F210)
  {
    result = swift_getWitnessTable(&unk_1000CAF0C, &type metadata for LaunchDashboardAction.Destination.LeaderboardsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010F210);
  }
  return result;
}

unint64_t sub_100070B38()
{
  unint64_t result;

  result = qword_10010F218;
  if (!qword_10010F218)
  {
    result = swift_getWitnessTable(&unk_1000CAF34, &type metadata for LaunchDashboardAction.Destination.LeaderboardsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010F218);
  }
  return result;
}

unint64_t sub_100070B80()
{
  unint64_t result;

  result = qword_10010F220;
  if (!qword_10010F220)
  {
    result = swift_getWitnessTable(&unk_1000CAEBC, &type metadata for LaunchDashboardAction.Destination.ChallengesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010F220);
  }
  return result;
}

unint64_t sub_100070BC8()
{
  unint64_t result;

  result = qword_10010F228;
  if (!qword_10010F228)
  {
    result = swift_getWitnessTable(&unk_1000CAEE4, &type metadata for LaunchDashboardAction.Destination.ChallengesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010F228);
  }
  return result;
}

unint64_t sub_100070C10()
{
  unint64_t result;

  result = qword_10010F230;
  if (!qword_10010F230)
  {
    result = swift_getWitnessTable(&unk_1000CAE6C, &type metadata for LaunchDashboardAction.Destination.LocalPlayerProfileCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010F230);
  }
  return result;
}

unint64_t sub_100070C58()
{
  unint64_t result;

  result = qword_10010F238;
  if (!qword_10010F238)
  {
    result = swift_getWitnessTable(&unk_1000CAE94, &type metadata for LaunchDashboardAction.Destination.LocalPlayerProfileCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010F238);
  }
  return result;
}

unint64_t sub_100070CA0()
{
  unint64_t result;

  result = qword_10010F240;
  if (!qword_10010F240)
  {
    result = swift_getWitnessTable(&unk_1000CADB4, &type metadata for LaunchDashboardAction.Destination.ProfileCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010F240);
  }
  return result;
}

unint64_t sub_100070CE8()
{
  unint64_t result;

  result = qword_10010F248;
  if (!qword_10010F248)
  {
    result = swift_getWitnessTable(&unk_1000CADDC, &type metadata for LaunchDashboardAction.Destination.ProfileCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010F248);
  }
  return result;
}

unint64_t sub_100070D30()
{
  unint64_t result;

  result = qword_10010F250;
  if (!qword_10010F250)
  {
    result = swift_getWitnessTable(&unk_1000CB0CC, &type metadata for LaunchDashboardAction.Destination.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010F250);
  }
  return result;
}

unint64_t sub_100070D78()
{
  unint64_t result;

  result = qword_10010F258;
  if (!qword_10010F258)
  {
    result = swift_getWitnessTable(&unk_1000CB0F4, &type metadata for LaunchDashboardAction.Destination.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010F258);
  }
  return result;
}

uint64_t sub_100070DBC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 1701667175 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701667175, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x726579616C70 && a2 == 0xE600000000000000)
  {
    v7 = 0xE600000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726579616C70, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x74616E6974736564 && a2 == 0xEB000000006E6F69)
  {
    v8 = 0xEB000000006E6F69;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74616E6974736564, 0xEB000000006E6F69, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x654D6E6F69746361 && a2 == 0xED00007363697274)
  {
    v9 = 0xED00007363697274;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x654D6E6F69746361, 0xED00007363697274, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x6449746567726174 && a2 == 0xE800000000000000)
  {
    v10 = 0xE800000000000000;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6449746567726174, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x7954746567726174 && a2 == 0xEA00000000006570)
  {
    swift_bridgeObjectRelease(0xEA00000000006570);
    return 5;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7954746567726174, 0xEA00000000006570, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_100071070(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1000710AC + 4 * byte_1000CB4C0[a1]))(0xD00000000000001BLL, 0x80000001000CF480);
}

unint64_t sub_1000710AC()
{
  return 0xD00000000000001DLL;
}

uint64_t sub_100071104()
{
  uint64_t v0;

  return v0 - 4;
}

void sub_100071114()
{
  JUMPOUT(0x100071120);
}

void sub_10007112C(char *a1)
{
  sub_1000755FC(*a1);
}

void sub_100071138()
{
  char *v0;

  sub_100076568(0, *v0);
}

void sub_100071144(uint64_t a1)
{
  char *v1;

  sub_100076140(a1, *v1);
}

void sub_10007114C(uint64_t a1)
{
  char *v1;

  sub_100076568(a1, *v1);
}

unint64_t sub_100071154@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1000722F8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100071180@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100071070(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_1000711A8()
{
  off_10010F2A0 = &_swiftEmptyDictionarySingleton;
}

uint64_t sub_1000711BC()
{
  uint64_t result;

  type metadata accessor for GameOverlayUIConfig.SharedResources(0);
  result = GameOverlayUIConfig.SharedResources.__allocating_init()();
  qword_10010F2A8 = result;
  return result;
}

char *sub_100071234(uint64_t a1, _TtC13GameOverlayUI20GameOverlayUIService *a2, uint64_t a3, _TtC13GameOverlayUI20GameOverlayUIService *a4)
{
  char *v4;
  char *v5;
  _TtC13GameOverlayUI20GameOverlayUIService *v8;
  objc_class *ObjectType;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  char *v15;
  id v16;
  uint64_t isEscapingClosureAtFileLocation;
  SEL v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  SEL v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t *v47;
  char v48;
  uint64_t v49;
  _TtC13GameOverlayUI20GameOverlayUIService *v50;
  uint64_t v51;
  _TtC13GameOverlayUI20GameOverlayUIService *v52;
  id v53;
  void **aBlock;
  _QWORD v55[4];
  uint64_t v56;
  objc_super v57;

  v5 = v4;
  v8 = a2;
  ObjectType = (objc_class *)swift_getObjectType(v5, a2);
  *(_QWORD *)&v5[OBJC_IVAR____TtC13GameOverlayUI20GameOverlayUIService_listener] = 0;
  v57.receiver = v5;
  v57.super_class = ObjectType;
  v11 = objc_msgSendSuper2(&v57, "init");
  v49 = a1;
  v50 = v8;
  v51 = a3;
  v52 = a4;
  v53 = v11;
  v12 = swift_allocObject(&unk_1000FFAE0, 32, 7);
  *(_QWORD *)(v12 + 16) = sub_100072B1C;
  *(_QWORD *)(v12 + 24) = &v48;
  v55[3] = sub_100072D04;
  v56 = v12;
  aBlock = _NSConcreteStackBlock;
  v55[0] = 1107296256;
  v55[1] = sub_100071698;
  v55[2] = &unk_1000FFAF8;
  v13 = _Block_copy(&aBlock);
  v14 = (void *)objc_opt_self(BSServiceConnectionListener);
  v15 = (char *)v11;
  swift_retain(v12);
  v16 = objc_msgSend(v14, "listenerWithConfigurator:", v13);
  _Block_release(v13);
  swift_release(v56);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v12, "", 0, 0, 0, 1);
  swift_bridgeObjectRelease(a4, v18, v19, v20, v21, v22, v23, v24);
  swift_bridgeObjectRelease(v8, v25, v26, v27, v28, v29, v30, v31);
  swift_release(v12);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  v32 = OBJC_IVAR____TtC13GameOverlayUI20GameOverlayUIService_listener;
  v33 = *(void **)&v15[OBJC_IVAR____TtC13GameOverlayUI20GameOverlayUIService_listener];
  *(_QWORD *)&v15[OBJC_IVAR____TtC13GameOverlayUI20GameOverlayUIService_listener] = v16;

  isEscapingClosureAtFileLocation = *(_QWORD *)&v15[v32];
  if (isEscapingClosureAtFileLocation)
  {
    v34 = qword_10010BAA0;
    v8 = (_TtC13GameOverlayUI20GameOverlayUIService *)(id)isEscapingClosureAtFileLocation;
    if (v34 == -1)
    {
LABEL_4:
      v35 = type metadata accessor for Logger(0);
      sub_100004E8C(v35, (uint64_t)qword_1001232D8);
      v36 = v8;
      v37 = Logger.logObject.getter(v36);
      v38 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v37, v38))
      {
        v39 = (uint8_t *)swift_slowAlloc(12, -1);
        v47 = (uint64_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v39 = 138412290;
        aBlock = (void **)&v36->isa;
        v40 = v36;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v55);
        *v47 = isEscapingClosureAtFileLocation;

        _os_log_impl((void *)&_mh_execute_header, v37, v38, "Listener activated: %@", v39, 0xCu);
        v41 = sub_100003304(&qword_10010EB00);
        swift_arrayDestroy(v47, 1, v41);
        swift_slowDealloc(v47, -1, -1);
        swift_slowDealloc(v39, -1, -1);
      }
      else
      {

        v37 = v36;
      }

      -[NSObject activate](v36, "activate");
      goto LABEL_12;
    }
LABEL_14:
    swift_once(&qword_10010BAA0, sub_100004DCC);
    goto LABEL_4;
  }
  if (qword_10010BAA0 != -1)
    swift_once(&qword_10010BAA0, sub_100004DCC);
  v42 = type metadata accessor for Logger(0);
  v43 = sub_100004E8C(v42, (uint64_t)qword_1001232D8);
  v36 = Logger.logObject.getter(v43);
  v44 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v36, v44))
  {
    v45 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v45 = 0;
    _os_log_impl((void *)&_mh_execute_header, v36, v44, "Failed to create listener", v45, 2u);
    swift_slowDealloc(v45, -1, -1);
  }
LABEL_12:

  return v15;
}

id sub_100071600(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  NSString v8;
  NSString v9;

  v8 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "setDomain:", v8);

  v9 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "setService:", v9);

  return objc_msgSend(a1, "setDelegate:", a6);
}

uint64_t sub_10007169C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[9] = a5;
  v6[10] = a6;
  v6[8] = a4;
  return swift_task_switch(sub_1000716B8, 0, 0);
}

uint64_t sub_1000716B8()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (qword_10010BB00 != -1)
    swift_once(&qword_10010BB00, sub_1000711BC);
  v0[11] = qword_10010F2A8;
  v1 = type metadata accessor for GameOverlayUIConfig.SharedResources(0);
  v0[12] = v1;
  v2 = sub_100072A08();
  v0[13] = v2;
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v1, v2);
  return swift_task_switch(sub_10007174C, v3, v4);
}

uint64_t sub_10007174C()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 112) = dispatch thunk of GameOverlayUIConfig.SharedResources.interface(kind:)(*(_QWORD *)(v0 + 64));
  return swift_task_switch(sub_100071790, 0, 0);
}

uint64_t sub_100071790()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0[12];
  v2 = v0[13];
  v0[15] = qword_10010F2A8;
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v1, v2);
  return swift_task_switch(sub_1000717E0, v3, v4);
}

uint64_t sub_1000717E0()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 128) = dispatch thunk of GameOverlayUIConfig.SharedResources.connectionQueue(kind:)(*(_QWORD *)(v0 + 64));
  return swift_task_switch(sub_100071824, 0, 0);
}

void sub_100071824()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  double v12;
  void *v13;
  void *v14;

  v1 = (void *)v0[16];
  v2 = (void *)v0[14];
  v3 = (void *)v0[9];
  v4 = (void *)v0[10];
  v5 = (_QWORD *)swift_allocObject(&unk_1000FF9A0, 40, 7);
  v5[2] = v1;
  v5[3] = v2;
  v5[4] = v4;
  v6 = swift_allocObject(&unk_1000FF9C8, 32, 7);
  v0[2] = _NSConcreteStackBlock;
  *(_QWORD *)(v6 + 16) = sub_100072A84;
  *(_QWORD *)(v6 + 24) = v5;
  v0[6] = sub_100032F68;
  v0[7] = v6;
  v0[3] = 1107296256;
  v0[4] = sub_100071698;
  v0[5] = &unk_1000FF9E0;
  v7 = _Block_copy(v0 + 2);
  v8 = v0[7];
  v9 = v1;
  v10 = v2;
  v11 = v4;
  swift_retain(v6);
  objc_msgSend(v3, "configureConnection:", v7, swift_release(v8).n128_f64[0]);
  _Block_release(v7);
  LOBYTE(v3) = swift_isEscapingClosureAtFileLocation(v6, "", 117, 83, 44, 1);
  *(_QWORD *)&v12 = swift_release(v6).n128_u64[0];
  if ((v3 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v13 = (void *)v0[16];
    v14 = (void *)v0[14];
    objc_msgSend((id)v0[9], "activate", v12);
    swift_release(v5);

    ((void (*)(void))v0[1])();
  }
}

void sub_100071994(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  void **v17;
  uint64_t v18;
  void (*v19)(uint64_t, void *);
  void *v20;
  void *v21;
  uint64_t v22;

  objc_msgSend(a1, "setTargetQueue:", a2);
  v7 = objc_msgSend((id)objc_opt_self(BSServiceQuality), "userInitiated");
  objc_msgSend(a1, "setServiceQuality:", v7);

  objc_msgSend(a1, "setInterface:", a3);
  objc_msgSend(a1, "setInterfaceTarget:", a4);
  v21 = sub_100071B90;
  v22 = 0;
  v17 = _NSConcreteStackBlock;
  v18 = 1107296256;
  v19 = sub_10005DD08;
  v20 = &unk_1000FFA08;
  v8 = _Block_copy(&v17);
  objc_msgSend(a1, "setActivationHandler:", v8);
  _Block_release(v8);
  v9 = swift_allocObject(&unk_1000FFA40, 24, 7);
  *(_QWORD *)(v9 + 16) = a4;
  v21 = sub_100072ADC;
  v22 = v9;
  v17 = _NSConcreteStackBlock;
  v18 = 1107296256;
  v19 = sub_10005DD08;
  v20 = &unk_1000FFA58;
  v10 = _Block_copy(&v17);
  v11 = v22;
  v12 = a4;
  objc_msgSend(a1, "setInvalidationHandler:", v10, swift_release(v11).n128_f64[0]);
  _Block_release(v10);
  v13 = swift_allocObject(&unk_1000FFA90, 24, 7);
  *(_QWORD *)(v13 + 16) = v12;
  v21 = sub_100072AFC;
  v22 = v13;
  v17 = _NSConcreteStackBlock;
  v18 = 1107296256;
  v19 = sub_10005DD08;
  v20 = &unk_1000FFAA8;
  v14 = _Block_copy(&v17);
  v15 = v22;
  v16 = v12;
  objc_msgSend(a1, "setInterruptionHandler:", v14, swift_release(v15).n128_f64[0]);
  _Block_release(v14);
}

void sub_100071B90(void *a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;
  id v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;

  if (qword_10010BAA0 != -1)
    swift_once(&qword_10010BAA0, sub_100004DCC);
  v2 = type metadata accessor for Logger(0);
  sub_100004E8C(v2, (uint64_t)qword_1001232D8);
  v9 = a1;
  v3 = Logger.logObject.getter(v9);
  v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v5 = 138412290;
    v10 = v9;
    v7 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11);
    *v6 = v9;

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "GameOverlayUI Activation Handler: %@", v5, 0xCu);
    v8 = sub_100003304(&qword_10010EB00);
    swift_arrayDestroy(v6, 1, v8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
}

id sub_100071D40(void *a1, uint64_t a2, const char *a3)
{
  uint64_t v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  _QWORD *v10;
  id v11;
  uint64_t v12;
  id v14;
  uint64_t v15;

  if (qword_10010BAA0 != -1)
    swift_once(&qword_10010BAA0, sub_100004DCC);
  v5 = type metadata accessor for Logger(0);
  sub_100004E8C(v5, (uint64_t)qword_1001232D8);
  v6 = a1;
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v9 = 138412290;
    v14 = v6;
    v11 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15);
    *v10 = v6;

    _os_log_impl((void *)&_mh_execute_header, v7, v8, a3, v9, 0xCu);
    v12 = sub_100003304(&qword_10010EB00);
    swift_arrayDestroy(v10, 1, v12);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

  }
  else
  {

  }
  return objc_msgSend(v6, "invalidate");
}

uint64_t sub_100071EE0(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_unknownObjectRetain(a2, a2);
  v3(a2);
  return swift_unknownObjectRelease(a2);
}

id sub_100071F8C(uint64_t a1, uint64_t a2)
{
  char *v2;
  objc_class *ObjectType;
  uint64_t v4;
  void *v5;
  void *v6;
  objc_super v8;

  ObjectType = (objc_class *)swift_getObjectType(v2, a2);
  v4 = OBJC_IVAR____TtC13GameOverlayUI20GameOverlayUIService_listener;
  v5 = *(void **)&v2[OBJC_IVAR____TtC13GameOverlayUI20GameOverlayUIService_listener];
  if (v5)
  {
    objc_msgSend(v5, "invalidate");
    v6 = *(void **)&v2[v4];
  }
  else
  {
    v6 = 0;
  }
  *(_QWORD *)&v2[v4] = 0;

  v8.receiver = v2;
  v8.super_class = ObjectType;
  return objc_msgSendSuper2(&v8, "dealloc");
}

uint64_t type metadata accessor for GameOverlayUIService()
{
  return objc_opt_self(_TtC13GameOverlayUI20GameOverlayUIService);
}

uint64_t sub_100072058(char a1)
{
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;

  v2 = objc_msgSend((id)objc_opt_self(BSServiceConnection), "currentContext");
  if (v2 && (v3 = v2, v4 = objc_msgSend(v2, "remoteToken"), v3, v4))
  {
    sub_1000B3EFC(a1);
    v6 = v5;

  }
  else
  {
    if (qword_10010BAA0 != -1)
      swift_once(&qword_10010BAA0, sub_100004DCC);
    v7 = type metadata accessor for Logger(0);
    v8 = sub_100004E8C(v7, (uint64_t)qword_1001232D8);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Could not find a valid audit token for the client request", v11, 2u);
      swift_slowDealloc(v11, -1, -1);
    }

    return 0;
  }
  return v6;
}

uint64_t sub_1000721B4(char a1)
{
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;

  v2 = objc_msgSend((id)objc_opt_self(BSServiceConnection), "currentContext");
  if (v2 && (v3 = v2, v4 = objc_msgSend(v2, "remoteToken"), v3, v4))
  {
    sub_1000B4310(a1);
    v6 = v5;

  }
  else
  {
    if (qword_10010BAA0 != -1)
      swift_once(&qword_10010BAA0, sub_100004DCC);
    v7 = type metadata accessor for Logger(0);
    v8 = sub_100004E8C(v7, (uint64_t)qword_1001232D8);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Could not find a valid audit token for the client request", v11, 2u);
      swift_slowDealloc(v11, -1, -1);
    }

    return 0;
  }
  return v6;
}

unint64_t sub_1000722F8(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000FAE90, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 8)
    return 8;
  else
    return v3;
}

void sub_100072340(uint64_t a1, _TtC13GameOverlayUI20GameOverlayUIService *a2)
{
  uint64_t v4;
  _TtC13GameOverlayUI20GameOverlayUIService *v5;
  _TtC13GameOverlayUI20GameOverlayUIService *v6;
  const char *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  SEL v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  _TtC13GameOverlayUI20GameOverlayUIService *v23;
  _TtC13GameOverlayUI20GameOverlayUIService *v24;
  id v25;
  char *v26;
  uint64_t v27;
  _TtC13GameOverlayUI20GameOverlayUIService *v28;
  _TtC13GameOverlayUI20GameOverlayUIService *v29;
  char *v30;
  char isUniquelyReferenced_nonNull_native;
  _TtC13GameOverlayUI20GameOverlayUIService *v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  SEL v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  void *v47;
  _BYTE v48[24];

  if (qword_10010BAF8 != -1)
    swift_once(&qword_10010BAF8, sub_1000711A8);
  v4 = ((uint64_t (*)(void))GameOverlayUIConfig.ServiceKind.rawValue.getter)();
  v6 = v5;
  swift_beginAccess(&off_10010F2A0, v48, 32, 0);
  if (*((_QWORD *)off_10010F2A0 + 2) && (sub_1000AAE54(v4, (uint64_t)v6), (v7 & 1) != 0))
  {
    swift_endAccess(v48);
    swift_bridgeObjectRelease(v6, v14, v15, v16, v17, v18, v19, v20);
  }
  else
  {
    swift_bridgeObjectRelease(v6, v7, v8, v9, v10, v11, v12, v13);
    swift_endAccess(v48);
    v21 = swift_bridgeObjectRetain(a2);
    v22 = GameOverlayUIConfig.ServiceKind.rawValue.getter(v21);
    v24 = v23;
    v25 = objc_allocWithZone((Class)type metadata accessor for GameOverlayUIService());
    v26 = sub_100071234(a1, a2, v22, v24);
    v27 = GameOverlayUIConfig.ServiceKind.rawValue.getter(v26);
    v29 = v28;
    swift_beginAccess(&off_10010F2A0, v48, 33, 0);
    v30 = v26;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(off_10010F2A0);
    v47 = off_10010F2A0;
    off_10010F2A0 = (_UNKNOWN *)0x8000000000000000;
    sub_1000B01A4((uint64_t)v30, v27, (uint64_t)v29, isUniquelyReferenced_nonNull_native);
    v32 = (_TtC13GameOverlayUI20GameOverlayUIService *)off_10010F2A0;
    off_10010F2A0 = v47;
    swift_bridgeObjectRelease(v29, v33, v34, v35, v36, v37, v38, v39);
    swift_bridgeObjectRelease(v32, v40, v41, v42, v43, v44, v45, v46);
    swift_endAccess(v48);

  }
}

uint64_t sub_1000724DC(void *a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint64_t v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint8_t *v19;
  uint64_t v20;
  void *v21;
  id v22;
  void *v23;
  uint64_t v24;
  _TtC13GameOverlayUI20GameOverlayUIService *v25;
  _TtC13GameOverlayUI20GameOverlayUIService *v26;
  SEL v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  _TtC13GameOverlayUI20GameOverlayUIService *v36;
  _TtC13GameOverlayUI20GameOverlayUIService *v37;
  SEL v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  id v58;
  id v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  char *v65;
  id v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t ObjectType;
  void *v71;
  uint64_t v72;
  uint64_t v73;

  v3 = v2;
  ObjectType = swift_getObjectType(v2, a2);
  v5 = sub_100003304(&qword_10010EB20);
  __chkstk_darwin(v5);
  v67 = (char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = type metadata accessor for GameOverlayUIConfig.ServiceKind(0);
  v7 = *(_QWORD *)(v69 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v69);
  v68 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v10 = __chkstk_darwin(v9).n128_u64[0];
  v12 = (char *)&v62 - v11;
  v13 = objc_msgSend(a1, "remoteToken", v10);
  if (qword_10010BAA0 != -1)
    swift_once(&qword_10010BAA0, sub_100004DCC);
  v14 = type metadata accessor for Logger(0);
  sub_100004E8C(v14, (uint64_t)qword_1001232D8);
  v15 = v13;
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.info.getter();
  v18 = os_log_type_enabled(v16, v17);
  v71 = v3;
  v66 = v15;
  if (v18)
  {
    v63 = v8;
    v64 = a1;
    v19 = (uint8_t *)swift_slowAlloc(12, -1);
    v20 = swift_slowAlloc(32, -1);
    v73 = v20;
    *(_DWORD *)v19 = 136315138;
    v21 = v15;
    v22 = objc_msgSend(v15, "bundleID");
    if (v22)
    {
      v23 = v22;
      v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
      v26 = v25;

    }
    else
    {
      v26 = (_TtC13GameOverlayUI20GameOverlayUIService *)0xE700000000000000;
      v24 = 0x6E776F6E6B6E75;
    }
    v72 = sub_100031C58(v24, (unint64_t)v26, &v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73);
    swift_bridgeObjectRelease(v26, v27, v28, v29, v30, v31, v32, v33);

    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Service listener did receive connection for remote process: %s", v19, 0xCu);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v19, -1, -1);

    v8 = v63;
    a1 = v64;
  }
  else
  {

  }
  v34 = objc_msgSend(a1, "service");
  v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
  v37 = v36;

  v65 = v12;
  static GameOverlayUIConfig.ServiceKind.from(name:)(v35, v37);
  swift_bridgeObjectRelease(v37, v38, v39, v40, v41, v42, v43, v44);
  v45 = type metadata accessor for TaskPriority(0);
  v46 = (uint64_t)v67;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v67, 1, 1, v45);
  v47 = v68;
  v48 = v12;
  v49 = v69;
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v68, v48, v69);
  v50 = *(unsigned __int8 *)(v7 + 80);
  v51 = (v50 + 32) & ~v50;
  v52 = (v8 + v51 + 7) & 0xFFFFFFFFFFFFFFF8;
  v53 = (v52 + 15) & 0xFFFFFFFFFFFFFFF8;
  v54 = (v53 + 15) & 0xFFFFFFFFFFFFFFF8;
  v55 = swift_allocObject(&unk_1000FF978, v54 + 8, v50 | 7);
  *(_QWORD *)(v55 + 16) = 0;
  *(_QWORD *)(v55 + 24) = 0;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v55 + v51, v47, v49);
  *(_QWORD *)(v55 + v52) = a1;
  v56 = ObjectType;
  v57 = v71;
  *(_QWORD *)(v55 + v53) = v71;
  *(_QWORD *)(v55 + v54) = v56;
  v58 = a1;
  v59 = v57;
  v60 = sub_100028240(v46, (uint64_t)&unk_10010F3B8, v55);
  swift_release(v60);

  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v65, v49);
}

uint64_t sub_1000728BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for GameOverlayUIConfig.ServiceKind(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return swift_deallocObject(v0, ((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

uint64_t sub_100072964()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = *(_QWORD *)(type metadata accessor for GameOverlayUIConfig.ServiceKind(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = v0 + v3;
  v6 = *(_QWORD *)(v0 + v4);
  v7 = *(_QWORD *)(v0 + ((v4 + 15) & 0xFFFFFFFFFFFFF8));
  v8 = (_QWORD *)swift_task_alloc(dword_10010F354);
  *(_QWORD *)(v1 + 16) = v8;
  *v8 = v1;
  v8[1] = sub_1000252CC;
  v8[9] = v6;
  v8[10] = v7;
  v8[8] = v5;
  return swift_task_switch(sub_1000716B8, 0, 0);
}

unint64_t sub_100072A08()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010F3C0;
  if (!qword_10010F3C0)
  {
    v1 = type metadata accessor for GameOverlayUIConfig.SharedResources(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for GameOverlayUIConfig.SharedResources, v1);
    atomic_store(result, (unint64_t *)&qword_10010F3C0);
  }
  return result;
}

uint64_t sub_100072A50()
{
  id *v0;

  return swift_deallocObject(v0, 40, 7);
}

void sub_100072A84(void *a1)
{
  uint64_t v1;

  sub_100071994(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_100072A90()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100072AA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_100072AB0(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

uint64_t sub_100072AB8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_100072ADC(void *a1)
{
  uint64_t v1;

  return sub_100071D40(a1, *(_QWORD *)(v1 + 16), "GameOverlayUI Invalidation Handler: %@");
}

id sub_100072AFC(void *a1)
{
  uint64_t v1;

  return sub_100071D40(a1, *(_QWORD *)(v1 + 16), "GameOverlayUI Interruption Handler: %@");
}

id sub_100072B1C(void *a1)
{
  uint64_t *v1;

  return sub_100071600(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_100072B2C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t getEnumTagSinglePayload for RemoteAlertIdentifier(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for RemoteAlertIdentifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_100072C18 + 4 * byte_1000CB4CD[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_100072C4C + 4 * byte_1000CB4C8[v4]))();
}

uint64_t sub_100072C4C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100072C54(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100072C5CLL);
  return result;
}

uint64_t sub_100072C68(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100072C70);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_100072C74(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100072C7C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RemoteAlertIdentifier()
{
  return &type metadata for RemoteAlertIdentifier;
}

unint64_t sub_100072C9C()
{
  unint64_t result;

  result = qword_10010F490;
  if (!qword_10010F490)
  {
    result = swift_getWitnessTable(&unk_1000CB5A0, &type metadata for RemoteAlertIdentifier);
    atomic_store(result, (unint64_t *)&qword_10010F490);
  }
  return result;
}

id sub_100072D08()
{
  uint64_t v0;
  uint64_t ObjCClassFromMetadata;
  id result;

  v0 = type metadata accessor for GameOverlayUIApp();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v0);
  result = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  static NSBundle.GameOverlayUI = (uint64_t)result;
  return result;
}

uint64_t *NSBundle.GameOverlayUI.unsafeMutableAddressor()
{
  if (qword_10010BB08 != -1)
    swift_once(&qword_10010BB08, sub_100072D08);
  return &static NSBundle.GameOverlayUI;
}

id static NSBundle.GameOverlayUI.getter()
{
  if (qword_10010BB08 != -1)
    swift_once(&qword_10010BB08, sub_100072D08);
  return (id)static NSBundle.GameOverlayUI;
}

uint64_t sub_100072DDC(uint64_t a1)
{
  return sub_100072ECC(a1, (uint64_t (*)(void))&static GCUILocalizedStrings.OVERLAY_WELCOME_BANNER_TITLE.getter, &qword_100123308, &qword_100123310);
}

uint64_t sub_100072DF4(uint64_t a1)
{
  return sub_100072ECC(a1, (uint64_t (*)(void))&static GCUILocalizedStrings.OVERLAY_WELCOME_BANNER_TITLE_SHORT.getter, &qword_100123318, &qword_100123320);
}

uint64_t sub_100072E0C(uint64_t a1)
{
  return sub_100072ECC(a1, (uint64_t (*)(void))&static GCUILocalizedStrings.SIGN_IN_BANNER_TITLE.getter, &qword_100123328, &qword_100123330);
}

uint64_t sub_100072E24(uint64_t a1)
{
  return sub_100072ECC(a1, (uint64_t (*)(void))&static GCUILocalizedStrings.OVERLAY_ACCESS_POINT_GAMES_FOR_YOU.getter, &qword_100123338, &qword_100123340);
}

uint64_t sub_100072E3C(uint64_t a1)
{
  return sub_100072ECC(a1, (uint64_t (*)(void))&static GCUILocalizedStrings.OVERLAY_ACHIEVEMENT_HIGHLIGHT_TITLE.getter, &qword_100123348, &qword_100123350);
}

uint64_t sub_100072E54(uint64_t a1)
{
  return sub_100072ECC(a1, (uint64_t (*)(void))&static GCUILocalizedStrings.OVERLAY_LEADERBOARD_HIGHLIGHT_TITLE.getter, &qword_100123358, &qword_100123360);
}

uint64_t sub_100072E6C(uint64_t a1)
{
  return sub_100072ECC(a1, (uint64_t (*)(void))&static GCUILocalizedStrings.OVERLAY_GAME_MODE_TITLE.getter, &qword_100123368, &qword_100123370);
}

uint64_t sub_100072E84(uint64_t a1)
{
  return sub_100072ECC(a1, (uint64_t (*)(void))&static GCUILocalizedStrings.OVERLAY_GAME_MODE_ON.getter, &qword_100123378, &qword_100123380);
}

uint64_t sub_100072E9C(uint64_t a1)
{
  return sub_100072ECC(a1, (uint64_t (*)(void))&static GCUILocalizedStrings.OVERLAY_GAME_MODE_OFF.getter, &qword_100123388, &qword_100123390);
}

uint64_t sub_100072EB4(uint64_t a1)
{
  return sub_100072ECC(a1, (uint64_t (*)(void))&static GCUILocalizedStrings.OVERLAY_GAME_MODE_TOGGLE_AX_HINT.getter, &qword_100123398, &qword_1001233A0);
}

uint64_t sub_100072ECC(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v8;

  type metadata accessor for GCUILocalizedStrings(0);
  result = a2();
  *a3 = result;
  *a4 = v8;
  return result;
}

uint64_t DeepLinkWithReferrerIntent.init(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  DeepLink.url.getter(v6);
  v9 = type metadata accessor for DeepLink(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(a1, v9);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v8, v4);
}

uint64_t sub_100072FB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;

  v0 = sub_100003304(&qword_10010F5B8);
  v1 = swift_allocObject(v0, 112, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1000CB5D0;
  v2 = type metadata accessor for AccessPointPageIntent(0);
  v3 = sub_1000035B4(&qword_10010F5C0, type metadata accessor for AccessPointPageIntent, (uint64_t)&protocol conformance descriptor for AccessPointPageIntent);
  *(_QWORD *)(v1 + 32) = v2;
  *(_QWORD *)(v1 + 40) = v3;
  v4 = type metadata accessor for GameDashboardPageIntent(0);
  v5 = sub_1000035B4(&qword_10010E760, type metadata accessor for GameDashboardPageIntent, (uint64_t)&protocol conformance descriptor for GameDashboardPageIntent);
  *(_QWORD *)(v1 + 48) = v4;
  *(_QWORD *)(v1 + 56) = v5;
  v6 = type metadata accessor for InGameBannerPageIntent(0);
  v7 = sub_1000035B4((unint64_t *)&unk_10010CA60, type metadata accessor for InGameBannerPageIntent, (uint64_t)&protocol conformance descriptor for InGameBannerPageIntent);
  *(_QWORD *)(v1 + 64) = v6;
  *(_QWORD *)(v1 + 72) = v7;
  v8 = sub_10005A0E8();
  *(_QWORD *)(v1 + 80) = &type metadata for PlayNowPageIntent;
  *(_QWORD *)(v1 + 88) = v8;
  v9 = type metadata accessor for AccessPointDataIntent(0);
  result = sub_1000035B4((unint64_t *)&qword_10010EBF0, type metadata accessor for AccessPointDataIntent, (uint64_t)&unk_1000CE780);
  *(_QWORD *)(v1 + 96) = v9;
  *(_QWORD *)(v1 + 104) = result;
  off_10010F4A0 = (_UNKNOWN *)v1;
  return result;
}

void sub_1000730BC()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  _TtC13GameOverlayUI20GameOverlayUIService *v3;
  void *v4;
  char *v5;
  void *v6;
  _TtC13GameOverlayUI20GameOverlayUIService *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  objc_class *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  unint64_t v21;
  unint64_t isa;
  Class v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  SEL v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  _TtC13GameOverlayUI20GameOverlayUIService v38;
  _QWORD v39[2];
  _QWORD v40[4];

  if (qword_10010BB60 != -1)
    swift_once(&qword_10010BB60, sub_100072FB4);
  v0 = (char *)off_10010F4A0;
  v1 = *((_QWORD *)off_10010F4A0 + 2);
  if (v1)
  {
    swift_bridgeObjectRetain_n(off_10010F4A0, 2);
    v2 = 0;
    v3 = &_swiftEmptyArrayStorage;
    v4 = &protocol requirements base descriptor for IntentModel;
    v5 = (char *)&type metadata for Any + 8;
    v6 = &type metadata for String;
    do
    {
      v8 = &v0[16 * v2];
      v9 = *((_QWORD *)v8 + 4);
      v38 = (_TtC13GameOverlayUI20GameOverlayUIService)*((_OWORD *)v8 + 2);
      v10 = *((_QWORD *)v8 + 5);
      v40[3] = swift_getAssociatedTypeWitness(0, v10);
      sub_1000052B0(v40);
      dispatch thunk of static IntentModel.kind.getter(v9, v10);
      if ((swift_dynamicCast(v39, v40, v5, v6, 6) & 1) != 0)
      {
        v11 = v0;
        v12 = v1;
        v13 = v6;
        v14 = v4;
        v16 = (objc_class *)v39[0];
        v15 = v39[1];
        if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
          v3 = sub_100054850(0, (int64_t)v3[1].super.isa + 1, 1, v3, v17, v18, v19, v20);
        isa = (unint64_t)v3[1].super.isa;
        v21 = *(_QWORD *)v3[1].listener;
        if (isa >= v21 >> 1)
          v3 = sub_100054850((_TtC13GameOverlayUI20GameOverlayUIService *)(v21 > 1), isa + 1, 1, v3, v17, v18, v19, v20);
        v3[1].super.isa = (Class)(isa + 1);
        v7 = &v3[2 * isa];
        v7[2].super.isa = v16;
        *(_QWORD *)v7[2].listener = v15;
        v7[3] = v38;
        v4 = v14;
        v6 = v13;
        v1 = v12;
        v0 = v11;
        v5 = (char *)&type metadata for Any + 8;
      }
      ++v2;
    }
    while (v1 != v2);
    swift_bridgeObjectRelease_n(v0, 2);
    v23 = v3[1].super.isa;
    if (v23)
      goto LABEL_13;
LABEL_15:
    v24 = &_swiftEmptyDictionarySingleton;
    goto LABEL_16;
  }
  v3 = &_swiftEmptyArrayStorage;
  v23 = (Class)*((_QWORD *)&_swiftEmptyArrayStorage + 2);
  if (!v23)
    goto LABEL_15;
LABEL_13:
  sub_100003304((uint64_t *)&unk_100111780);
  v24 = (void *)static _DictionaryStorage.allocate(capacity:)(v23);
LABEL_16:
  v40[0] = v24;
  v25 = swift_bridgeObjectRetain(v3);
  sub_10007470C(v25, (const char *)1, v40, v26, v27, v28, v29, v30);
  swift_bridgeObjectRelease(v3, v31, v32, v33, v34, v35, v36, v37);
  static IntentKinds.table = v40[0];
}

uint64_t *IntentKinds.table.unsafeMutableAddressor()
{
  if (qword_10010BB68 != -1)
    swift_once(&qword_10010BB68, sub_1000730BC);
  return &static IntentKinds.table;
}

uint64_t static IntentKinds.table.getter()
{
  if (qword_10010BB68 != -1)
    swift_once(&qword_10010BB68, sub_1000730BC);
  return swift_bridgeObjectRetain(static IntentKinds.table);
}

uint64_t sub_1000733A8()
{
  _TtC13GameOverlayUI20GameOverlayUIService *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  SEL v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;

  if (qword_10010BB68 != -1)
    swift_once(&qword_10010BB68, sub_1000730BC);
  v0 = (_TtC13GameOverlayUI20GameOverlayUIService *)static IntentKinds.table;
  v1 = swift_bridgeObjectRetain(static IntentKinds.table);
  sub_100074A9C(v1);
  v3 = v2;
  swift_bridgeObjectRelease(v0, v4, v5, v6, v7, v8, v9, v10);
  return v3;
}

_QWORD *sub_10007340C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100073420(a1, a2, a3);
}

_QWORD *sub_100073420@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  _TtC13GameOverlayUI20GameOverlayUIService *v59;
  SEL v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(char *, uint64_t);
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  SEL v107;
  id v108;
  id v109;
  id v110;
  id v111;
  id v112;
  id v113;
  Swift::String v114;
  _TtC13GameOverlayUI20GameOverlayUIService *object;
  SEL v116;
  id v117;
  id v118;
  id v119;
  id v120;
  id v121;
  id v122;
  Swift::String v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  _QWORD *v133;
  _QWORD *v134;
  _QWORD *v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  __int128 v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  __int128 v153;
  _QWORD v154[5];
  uint64_t v155;
  _TtC13GameOverlayUI20GameOverlayUIService *v156;
  __int128 v157;
  char *v158;
  uint64_t v159;

  *(_QWORD *)&v153 = a2;
  v142 = a3;
  v4 = type metadata accessor for JSONObject(0);
  v5 = __chkstk_darwin(v4);
  *((_QWORD *)&v141 + 1) = (char *)&v136 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v159 = type metadata accessor for AnyIntentTypes(0, v5);
  v152 = *(_QWORD *)(v159 - 8);
  __chkstk_darwin(v159);
  v146 = (char *)&v136 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003304(&qword_10010F588);
  __chkstk_darwin(v8);
  v143 = (char *)&v136 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v136 - v11;
  v151 = sub_100003304(&qword_10010F590);
  v13 = *(_QWORD *)(v151 - 8);
  __chkstk_darwin(v151);
  v15 = (char *)&v136 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v144 = (char *)&v136 - v17;
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v136 - v20;
  v22 = type metadata accessor for JSONContext(0, v19);
  v23 = *(_QWORD *)(v22 - 8);
  v148 = v22;
  v149 = v23;
  __chkstk_darwin(v22);
  v25 = (char *)&v136 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v28 = (char *)&v136 - v27;
  __chkstk_darwin(v29);
  v150 = (char *)&v136 - v30;
  __chkstk_darwin(v31);
  v33 = (char *)&v136 - v32;
  v34 = a1;
  v35 = sub_1000745E8(a1, a1, (uint64_t)&protocol descriptor for IntentModel, (uint64_t)&protocol descriptor for Decodable);
  if (v35)
  {
    *((_QWORD *)&v141 + 1) = v36;
    v143 = v37;
    *(_QWORD *)&v141 = v35;
    v38 = (_QWORD *)v153;
    v39 = *(_QWORD *)(v153 + 24);
    v40 = *(_QWORD *)(v153 + 32);
    sub_100003C28((_QWORD *)v153, v39);
    v41 = dispatch thunk of Decoder.userInfo.getter(v39, v40);
    v42 = JSONContext.init(userInfo:)(v41);
    static JSONContext.Property<A>.intentTypes.getter(v42);
    v43 = v159;
    JSONContext.subscript.getter(v21, v159);
    v44 = *(void (**)(char *, uint64_t))(v13 + 8);
    v44(v21, v151);
    LODWORD(v43) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v152 + 48))(v12, 1, v43);
    sub_100074654((uint64_t)v12);
    v46 = v148;
    v45 = v149;
    if ((_DWORD)v43 == 1)
    {
      v47 = sub_1000746C8();
      v48 = v146;
      v49 = AnyIntentTypes.init(_:)(v145, v47);
      v50 = v144;
      static JSONContext.Property<A>.intentTypes.getter(v49);
      v51 = v150;
      v52 = v45;
      v53 = v159;
      JSONContext.addingValue<A>(_:forProperty:)(v48, v50, v159);
      v44(v50, v151);
      v54 = v53;
      v45 = v52;
      (*(void (**)(char *, uint64_t))(v152 + 8))(v48, v54);
      (*(void (**)(char *, uint64_t))(v52 + 8))(v33, v46);
      v55 = v51;
      v38 = (_QWORD *)v153;
      (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v33, v55, v46);
    }
    v56 = v38[3];
    v57 = v38[4];
    sub_100003C28(v38, v56);
    v58 = v150;
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v150, v33, v46);
    v59 = (_TtC13GameOverlayUI20GameOverlayUIService *)Dictionary<>.init(jsonContext:)(v58);
    Decoder.withUserInfo(_:)(v154, v59, v56, v57);
    swift_bridgeObjectRelease(v59, v60, v61, v62, v63, v64, v65, v66);
    v67 = v141;
    v157 = v141;
    v68 = v143;
    v158 = v143;
    sub_1000052B0(&v155);
    v69 = v147;
    dispatch thunk of Decodable.init(from:)(v154, v67, v68);
    if (v69)
    {
      (*(void (**)(char *, uint64_t))(v45 + 8))(v33, v46);
      return sub_100074694(&v155);
    }
    v153 = v157;
    v97 = v157;
    v98 = sub_100003C28(&v155, v157);
    v99 = (_QWORD *)v142;
    *(_OWORD *)(v142 + 24) = v153;
    v100 = sub_1000052B0(v99);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v97 - 8) + 16))(v100, v98, v97);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v33, v46);
    return (_QWORD *)sub_100004624(&v155);
  }
  v71 = v15;
  v72 = v143;
  v140 = v25;
  *(_QWORD *)&v141 = v28;
  v73 = v159;
  v74 = v34;
  v75 = sub_1000745E8(v34, v34, (uint64_t)&protocol descriptor for ExpressibleByJSON, (uint64_t)&protocol descriptor for IntentModel);
  if (v75)
  {
    v137 = v77;
    v138 = v76;
    v139 = v75;
    v78 = *(_QWORD *)(v153 + 24);
    v79 = *(_QWORD *)(v153 + 32);
    sub_100003C28((_QWORD *)v153, v78);
    v80 = dispatch thunk of Decoder.userInfo.getter(v78, v79);
    v81 = JSONContext.init(userInfo:)(v80);
    static JSONContext.Property<A>.intentTypes.getter(v81);
    v82 = (uint64_t)v72;
    JSONContext.subscript.getter(v71, v73);
    v83 = *(void (**)(char *, uint64_t))(v13 + 8);
    v84 = v151;
    v83(v71, v151);
    v85 = v152;
    v86 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v152 + 48))(v82, 1, v73);
    sub_100074654(v82);
    v87 = v148;
    if (v86 == 1)
    {
      v88 = sub_1000746C8();
      v89 = v146;
      v90 = AnyIntentTypes.init(_:)(v145, v88);
      v91 = v144;
      static JSONContext.Property<A>.intentTypes.getter(v90);
      v92 = v150;
      v93 = v141;
      JSONContext.addingValue<A>(_:forProperty:)(v89, v91, v73);
      v83(v91, v84);
      (*(void (**)(char *, uint64_t))(v85 + 8))(v89, v73);
      v94 = v149;
      (*(void (**)(uint64_t, uint64_t))(v149 + 8))(v93, v87);
      (*(void (**)(uint64_t, char *, uint64_t))(v94 + 32))(v93, v92, v87);
    }
    sub_100024C64(v153, (uint64_t)v154);
    v95 = *((_QWORD *)&v141 + 1);
    v96 = v147;
    JSONObject.init(from:)(v154);
    if (v96)
      return (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(v149 + 8))(v141, v87);
    v125 = v149;
    v126 = v140;
    v127 = v141;
    (*(void (**)(char *, _QWORD, uint64_t))(v149 + 16))(v140, v141, v87);
    v128 = v87;
    v129 = v139;
    v130 = v138;
    *(_QWORD *)&v157 = v139;
    *((_QWORD *)&v157 + 1) = v138;
    v158 = v137;
    sub_1000052B0(&v155);
    dispatch thunk of ExpressibleByJSON.init(deserializing:using:)(v95, v126, v129, v130);
    v131 = v157;
    v132 = v158;
    v133 = sub_100003C28(&v155, v157);
    v134 = (_QWORD *)v142;
    *(_QWORD *)(v142 + 24) = v131;
    v134[4] = v132;
    v135 = sub_1000052B0(v134);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v131 - 8) + 16))(v135, v133, v131);
    (*(void (**)(uint64_t, uint64_t))(v125 + 8))(v127, v128);
    return (_QWORD *)sub_100004624(&v155);
  }
  v101 = type metadata accessor for DecodingError(0);
  swift_allocError(v101, &protocol witness table for DecodingError, 0, 0);
  v103 = v102;
  sub_100003304(&qword_10010BFA0);
  *v103 = v74;
  v104 = *(_QWORD *)(v153 + 24);
  v105 = *(_QWORD *)(v153 + 32);
  sub_100003C28((_QWORD *)v153, v104);
  v106 = dispatch thunk of Decoder.codingPath.getter(v104, v105);
  v155 = 0;
  v156 = (_TtC13GameOverlayUI20GameOverlayUIService *)0xE000000000000000;
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease(v156, v107, v108, v109, v110, v111, v112, v113);
  v155 = 60;
  v156 = (_TtC13GameOverlayUI20GameOverlayUIService *)0xE100000000000000;
  v114._countAndFlagsBits = _typeName(_:qualified:)(v74, 0);
  object = (_TtC13GameOverlayUI20GameOverlayUIService *)v114._object;
  String.append(_:)(v114);
  swift_bridgeObjectRelease(object, v116, v117, v118, v119, v120, v121, v122);
  v123._object = (void *)0x80000001000D09C0;
  v123._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v123);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v106, v155, v156, 0);
  v124 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v101 - 8) + 104))(v103, enum case for DecodingError.typeMismatch(_:), v101);
  return (_QWORD *)swift_willThrow(v124);
}

void *DeepLinkWithReferrerIntent.kind.unsafeMutableAddressor()
{
  return &static DeepLinkWithReferrerIntent.kind;
}

unint64_t static DeepLinkWithReferrerIntent.kind.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t DeepLinkWithReferrerIntent.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t sub_100073CC4()
{
  return 7107189;
}

uint64_t sub_100073CD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 7107189 && a2 == 0xE300000000000000)
  {
    result = swift_bridgeObjectRelease(0xE300000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(7107189, 0xE300000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_100073D58(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100073EB8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100073D80(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100073EB8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t DeepLinkWithReferrerIntent.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v2 = v1;
  v4 = sub_100003304(&qword_10010F4A8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_100003C28(a1, v8);
  v10 = sub_100073EB8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for DeepLinkWithReferrerIntent.CodingKeys, &type metadata for DeepLinkWithReferrerIntent.CodingKeys, v10, v8, v9);
  type metadata accessor for URL(0);
  sub_1000035B4(&qword_10010F4B8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v2);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_100073EB8()
{
  unint64_t result;

  result = qword_10010F4B0;
  if (!qword_10010F4B0)
  {
    result = swift_getWitnessTable(&unk_1000CB838, &type metadata for DeepLinkWithReferrerIntent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010F4B0);
  }
  return result;
}

uint64_t DeepLinkWithReferrerIntent.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  v18 = a2;
  v20 = type metadata accessor for URL(0);
  v17 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v19 = (uint64_t *)((char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_100003304(&qword_10010F4C0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DeepLinkWithReferrerIntent(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_100003C28(a1, v12);
  v14 = sub_100073EB8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for DeepLinkWithReferrerIntent.CodingKeys, &type metadata for DeepLinkWithReferrerIntent.CodingKeys, v14, v12, v13);
  if (!v2)
  {
    sub_1000035B4(&qword_10010F4C8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v19);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    (*(void (**)(char *, _QWORD *, uint64_t))(v17 + 32))(v11, v19, v20);
    sub_1000740FC((uint64_t)v11, v18);
  }
  return sub_100004624(a1);
}

uint64_t type metadata accessor for DeepLinkWithReferrerIntent(uint64_t a1)
{
  uint64_t result;

  result = qword_10010F538;
  if (!qword_10010F538)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DeepLinkWithReferrerIntent);
  return result;
}

uint64_t sub_1000740FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DeepLinkWithReferrerIntent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100074144()
{
  unint64_t result;

  result = qword_10010F4D0;
  if (!qword_10010F4D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for IntentKinds, &type metadata for IntentKinds);
    atomic_store(result, (unint64_t *)&qword_10010F4D0);
  }
  return result;
}

uint64_t sub_100074188@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return DeepLinkWithReferrerIntent.init(from:)(a1, a2);
}

uint64_t sub_10007419C()
{
  return sub_1000035B4(&qword_10010F4D8, type metadata accessor for DeepLinkWithReferrerIntent, (uint64_t)&protocol conformance descriptor for DeepLinkWithReferrerIntent);
}

void sub_1000741C8(_QWORD *a1@<X8>)
{
  *a1 = 0xD00000000000001ALL;
  a1[1] = 0x80000001000CB5D0;
}

ValueMetadata *type metadata accessor for IntentKinds()
{
  return &type metadata for IntentKinds;
}

uint64_t initializeBufferWithCopyOfBuffer for DeepLinkWithReferrerIntent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL(0);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for DeepLinkWithReferrerIntent(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for DeepLinkWithReferrerIntent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for DeepLinkWithReferrerIntent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for DeepLinkWithReferrerIntent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for DeepLinkWithReferrerIntent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for DeepLinkWithReferrerIntent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100074384);
}

uint64_t sub_100074384(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for DeepLinkWithReferrerIntent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000743CC);
}

uint64_t sub_1000743CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_10007440C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for DeepLinkWithReferrerIntent.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1000744B4 + 4 * byte_1000CB5E0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1000744D4 + 4 * byte_1000CB5E5[v4]))();
}

_BYTE *sub_1000744B4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1000744D4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000744DC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000744E4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000744EC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000744F4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for DeepLinkWithReferrerIntent.CodingKeys()
{
  return &type metadata for DeepLinkWithReferrerIntent.CodingKeys;
}

unint64_t sub_100074514()
{
  unint64_t result;

  result = qword_10010F570;
  if (!qword_10010F570)
  {
    result = swift_getWitnessTable(&unk_1000CB810, &type metadata for DeepLinkWithReferrerIntent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010F570);
  }
  return result;
}

unint64_t sub_10007455C()
{
  unint64_t result;

  result = qword_10010F578;
  if (!qword_10010F578)
  {
    result = swift_getWitnessTable(&unk_1000CB780, &type metadata for DeepLinkWithReferrerIntent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010F578);
  }
  return result;
}

unint64_t sub_1000745A4()
{
  unint64_t result;

  result = qword_10010F580;
  if (!qword_10010F580)
  {
    result = swift_getWitnessTable(&unk_1000CB7A8, &type metadata for DeepLinkWithReferrerIntent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010F580);
  }
  return result;
}

uint64_t sub_1000745E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = swift_conformsToProtocol2(a2, a3);
  if (result)
  {
    if (swift_conformsToProtocol2(a2, a4))
      return a1;
    else
      return 0;
  }
  return result;
}

uint64_t sub_100074654(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100003304(&qword_10010F588);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *sub_100074694(_QWORD *result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result[3] - 8);
  if ((*(_DWORD *)(v1 + 80) & 0x20000) != 0)
    return (_QWORD *)swift_slowDealloc(*result, *(_QWORD *)(v1 + 64)+ ((*(_DWORD *)(v1 + 80) + 16) & ~(unint64_t)*(_DWORD *)(v1 + 80)), *(_DWORD *)(v1 + 80) | 7);
  return result;
}

unint64_t sub_1000746C8()
{
  unint64_t result;

  result = qword_10010F598;
  if (!qword_10010F598)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for IntentKinds, &type metadata for IntentKinds);
    atomic_store(result, (unint64_t *)&qword_10010F598);
  }
  return result;
}

void sub_10007470C(uint64_t a1, const char *a2, _QWORD *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t v9;
  char v11;
  _TtC13GameOverlayUI20GameOverlayUIService *v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  _BOOL8 v44;
  uint64_t v45;
  char v46;
  char v47;
  _QWORD *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  Swift::String v52;
  Swift::String v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _TtC13GameOverlayUI20GameOverlayUIService *v59;
  uint64_t v60;

  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
    swift_bridgeObjectRelease((_TtC13GameOverlayUI20GameOverlayUIService *)a1, a2, a3, a4, a5, a6, a7, a8);
    return;
  }
  v11 = (char)a2;
  v13 = *(_QWORD *)(a1 + 32);
  v12 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 40);
  v54 = *(_OWORD *)(a1 + 48);
  swift_bridgeObjectRetain(a1);
  v58 = v13;
  v59 = v12;
  v14 = (_QWORD *)*a3;
  swift_bridgeObjectRetain(v12);
  v16 = sub_1000AAE54(v13, (uint64_t)v12);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
    goto LABEL_23;
  v20 = v15;
  if (v14[3] >= v19)
  {
    if ((v11 & 1) != 0)
    {
      if ((v15 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_1000AF51C();
      if ((v20 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v32 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v16 >> 6) + 64) |= 1 << v16;
    v33 = (uint64_t *)(v32[6] + 16 * v16);
    *v33 = v13;
    v33[1] = (uint64_t)v12;
    *(_OWORD *)(v32[7] + 16 * v16) = v54;
    v34 = v32[2];
    v35 = __OFADD__(v34, 1);
    v36 = v34 + 1;
    if (v35)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v32[2] = v36;
    v37 = v9 - 1;
    if (v9 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n(a1, 2);
      return;
    }
    v38 = (_OWORD *)(a1 + 80);
    while (1)
    {
      v12 = (_TtC13GameOverlayUI20GameOverlayUIService *)*((_QWORD *)v38 - 1);
      v55 = *v38;
      v58 = *((_QWORD *)v38 - 2);
      v39 = v58;
      v59 = v12;
      v40 = (_QWORD *)*a3;
      swift_bridgeObjectRetain(v12);
      v41 = sub_1000AAE54(v58, (uint64_t)v12);
      v43 = v40[2];
      v44 = (v42 & 1) == 0;
      v35 = __OFADD__(v43, v44);
      v45 = v43 + v44;
      if (v35)
        break;
      v46 = v42;
      if (v40[3] < v45)
      {
        sub_1000AEAF0(v45, 1);
        v41 = sub_1000AAE54(v58, (uint64_t)v12);
        if ((v46 & 1) != (v47 & 1))
          goto LABEL_25;
      }
      if ((v46 & 1) != 0)
        goto LABEL_10;
      v48 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v41 >> 6) + 64) |= 1 << v41;
      v49 = (uint64_t *)(v48[6] + 16 * v41);
      *v49 = v39;
      v49[1] = (uint64_t)v12;
      *(_OWORD *)(v48[7] + 16 * v41) = v55;
      v50 = v48[2];
      v35 = __OFADD__(v50, 1);
      v51 = v50 + 1;
      if (v35)
        goto LABEL_24;
      v48[2] = v51;
      v38 += 2;
      if (!--v37)
        goto LABEL_22;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_1000AEAF0(v19, v11 & 1);
  v21 = sub_1000AAE54(v13, (uint64_t)v12);
  if ((v20 & 1) == (v22 & 1))
  {
    v16 = v21;
    if ((v20 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v23 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
    swift_willThrow(v23);
    v60 = v23;
    swift_errorRetain(v23);
    v24 = sub_100003304(&qword_10010EB50);
    if ((swift_dynamicCast(v24, &v60, v24, &type metadata for _MergeError, 0) & 1) == 0)
    {
      swift_bridgeObjectRelease(v12, v25, v26, v27, v28, v29, v30, v31);
      swift_bridgeObjectRelease_n(a1, 2);
      swift_errorRelease(v60);
      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
LABEL_26:
  v56 = 0;
  v57 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v52._object = (void *)0x80000001000D0A20;
  v52._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v52);
  _print_unlocked<A, B>(_:_:)(&v58, &v56, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v53._countAndFlagsBits = 39;
  v53._object = (void *)0xE100000000000000;
  String.append(_:)(v53);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v56, v57, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
}

void sub_100074A9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t i;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  int64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  const char *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  unint64_t v43;
  __int128 v44;
  uint64_t v45;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_100003304(&qword_10010F5A0);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v42 = v1 + 64;
  v4 = -1 << *(_BYTE *)(v1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v1 + 64);
  v41 = (unint64_t)(63 - v4) >> 6;
  swift_bridgeObjectRetain(v1);
  i = 0;
  v8 = (uint64_t *)&unk_10010F5A8;
  v9 = (uint64_t *)&unk_10010F5B0;
  if (v6)
    goto LABEL_10;
LABEL_11:
  v17 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_36;
  if (v17 >= v41)
    goto LABEL_33;
  v18 = *(_QWORD *)(v42 + 8 * v17);
  v19 = i + 1;
  if (!v18)
  {
    v19 = i + 2;
    if (i + 2 >= v41)
      goto LABEL_33;
    v18 = *(_QWORD *)(v42 + 8 * v19);
    if (!v18)
    {
      v19 = i + 3;
      if (i + 3 >= v41)
        goto LABEL_33;
      v18 = *(_QWORD *)(v42 + 8 * v19);
      if (!v18)
      {
        v19 = i + 4;
        if (i + 4 >= v41)
          goto LABEL_33;
        v18 = *(_QWORD *)(v42 + 8 * v19);
        if (!v18)
        {
          v19 = i + 5;
          if (i + 5 >= v41)
            goto LABEL_33;
          v18 = *(_QWORD *)(v42 + 8 * v19);
          if (!v18)
          {
            v19 = i + 6;
            if (i + 6 >= v41)
              goto LABEL_33;
            v18 = *(_QWORD *)(v42 + 8 * v19);
            v20 = i + 6;
            if (!v18)
            {
              while (1)
              {
                v19 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_37;
                if (v19 >= v41)
                  break;
                v18 = *(_QWORD *)(v42 + 8 * v19);
                ++v20;
                if (v18)
                  goto LABEL_27;
              }
LABEL_33:
              sub_100074DB8(v1);
              return;
            }
          }
        }
      }
    }
  }
LABEL_27:
  v6 = (v18 - 1) & v18;
  v16 = __clz(__rbit64(v18)) + (v19 << 6);
  for (i = v19; ; v16 = v15 | (i << 6))
  {
    v21 = 16 * v16;
    v22 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v16);
    v24 = *v22;
    v23 = v22[1];
    v44 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + v21);
    swift_bridgeObjectRetain(v23);
    v25 = sub_100003304(v8);
    v26 = sub_100003304(v9);
    swift_dynamicCast(&v45, &v44, v25, v26, 7);
    v27 = v45;
    v28 = sub_1000C1508(v24, v23);
    v36 = v28;
    if ((v29 & 1) != 0)
    {
      v43 = v6;
      v10 = v1;
      v11 = i;
      v12 = v9;
      v13 = v8;
      v14 = v3[6] + 16 * v28;
      swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v14 + 8), v29, v30, v31, v32, v33, v34, v35);
      *(_QWORD *)v14 = v24;
      *(_QWORD *)(v14 + 8) = v23;
      v8 = v13;
      v9 = v12;
      i = v11;
      v1 = v10;
      v6 = v43;
      *(_QWORD *)(v3[7] + 8 * v36) = v27;
      if (!v43)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v3[2] >= v3[3])
      break;
    *(_QWORD *)((char *)v3 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v28;
    v37 = (uint64_t *)(v3[6] + 16 * v28);
    *v37 = v24;
    v37[1] = v23;
    *(_QWORD *)(v3[7] + 8 * v28) = v27;
    v38 = v3[2];
    v39 = __OFADD__(v38, 1);
    v40 = v38 + 1;
    if (v39)
      goto LABEL_35;
    v3[2] = v40;
    if (!v6)
      goto LABEL_11;
LABEL_10:
    v15 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
}

double sub_100074DB8(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL).n128_u64[0];
  return result;
}

ValueMetadata *type metadata accessor for MetricsHelper()
{
  return &type metadata for MetricsHelper;
}

uint64_t storeEnumTagSinglePayload for MetricsHelper.targetType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100074E1C + 4 * byte_1000CB88D[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100074E50 + 4 * byte_1000CB888[v4]))();
}

uint64_t sub_100074E50(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100074E58(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100074E60);
  return result;
}

uint64_t sub_100074E6C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100074E74);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100074E78(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100074E80(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MetricsHelper.targetType()
{
  return &type metadata for MetricsHelper.targetType;
}

uint64_t getEnumTagSinglePayload for MetricsHelper.targetId(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MetricsHelper.targetId(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_100074F78 + 4 * byte_1000CB897[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_100074FAC + 4 * byte_1000CB892[v4]))();
}

uint64_t sub_100074FAC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100074FB4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100074FBCLL);
  return result;
}

uint64_t sub_100074FC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100074FD0);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_100074FD4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100074FDC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MetricsHelper.targetId()
{
  return &type metadata for MetricsHelper.targetId;
}

void sub_100074FF8(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100075040(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1000750B0 + 4 * byte_1000CB8A0[a2]))(0x65677265766E6F63);
}

uint64_t sub_1000750B0(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x65677265766E6F63 && v1 == 0xEB0000000065636ELL)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x65677265766E6F63, 0xEB0000000065636ELL, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEB0000000065636ELL);
  return v2 & 1;
}

void sub_100075164(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1000751C0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100075210 + 4 * byte_1000CB8A8[a2]))(1701736302);
}

uint64_t sub_100075210(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 1701736302 && v1 == 0xE400000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 1701736302, 0xE400000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE400000000000000);
  return v2 & 1;
}

uint64_t sub_1000752A8(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xEA0000000000756ELL;
  v3 = 0x654D656461637261;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0x756E654D656D6167;
    else
      v5 = 0xD000000000000011;
    if (v4 == 1)
      v6 = 0xE800000000000000;
    else
      v6 = 0x80000001000CF3D0;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0x654D656461637261;
  v6 = 0xEA0000000000756ELL;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v3 = 0x756E654D656D6167;
    else
      v3 = 0xD000000000000011;
    if (v7 == 1)
      v2 = 0xE800000000000000;
    else
      v2 = 0x80000001000CF3D0;
  }
LABEL_15:
  if (v5 == v3 && v6 == v2)
  {
    v8 = 1;
    v2 = v6;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v3, v2, 0);
  }
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v2);
  return v8 & 1;
}

uint64_t sub_1000753C0(char a1, unsigned __int8 a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  char v7;

  v2 = 7368564;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x7265746E6563;
    else
      v3 = 0x6D6F74746F62;
    v4 = 0xE600000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_6:
      if (v5 == 1)
        v2 = 0x7265746E6563;
      else
        v2 = 0x6D6F74746F62;
      v6 = 0xE600000000000000;
      if (v3 != v2)
        goto LABEL_15;
      goto LABEL_13;
    }
  }
  else
  {
    v4 = 0xE300000000000000;
    v3 = 7368564;
    v5 = a2;
    if (a2)
      goto LABEL_6;
  }
  v6 = 0xE300000000000000;
  if (v3 != 7368564)
  {
LABEL_15:
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v2, v6, 0);
    goto LABEL_16;
  }
LABEL_13:
  if (v4 != v6)
    goto LABEL_15;
  v7 = 1;
  v6 = v4;
LABEL_16:
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_1000754B8(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6C61636974726576;
  else
    v3 = 0x746E6F7A69726F68;
  if (v2)
    v4 = 0xEA00000000006C61;
  else
    v4 = 0xE800000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x6C61636974726576;
  else
    v5 = 0x746E6F7A69726F68;
  if ((a2 & 1) != 0)
    v6 = 0xE800000000000000;
  else
    v6 = 0xEA00000000006C61;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_100075560(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6E776F6873;
  else
    v3 = 0x6E6564646968;
  if (v2)
    v4 = 0xE600000000000000;
  else
    v4 = 0xE500000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x6E776F6873;
  else
    v5 = 0x6E6564646968;
  if ((a2 & 1) != 0)
    v6 = 0xE500000000000000;
  else
    v6 = 0xE600000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_1000755FC(char a1)
{
  __asm { BR              X12 }
}

uint64_t sub_10007564C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1000756E8 + 4 * byte_1000CB8B4[a2]))(0xD00000000000001DLL);
}

uint64_t sub_1000756E8(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  char v3;

  v2 = 0x80000001000CF4A0;
  if (a1 == 0xD00000000000001DLL && v1 == 0x80000001000CF4A0)
  {
    v3 = 1;
    v2 = v1;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0xD00000000000001DLL, 0x80000001000CF4A0, 0);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

void sub_1000757C0(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_10007580C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10007589C + 4 * byte_1000CB8C2[a2]))(0x6F50737365636361);
}

uint64_t sub_10007589C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6F50737365636361 && v1 == 0xEF796C6E4F746E69)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6F50737365636361, 0xEF796C6E4F746E69, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEF796C6E4F746E69);
  return v2 & 1;
}

void sub_10007596C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1000759C8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100075A28 + 4 * byte_1000CB8CC[a2]))(0x656772616CLL);
}

uint64_t sub_100075A28(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x656772616CLL && v1 == 0xE500000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x656772616CLL, 0xE500000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE500000000000000);
  return v2 & 1;
}

uint64_t sub_100075AD0(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x656C63726963;
  else
    v3 = 0x656C7573706163;
  if (v2)
    v4 = 0xE700000000000000;
  else
    v4 = 0xE600000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x656C63726963;
  else
    v5 = 0x656C7573706163;
  if ((a2 & 1) != 0)
    v6 = 0xE600000000000000;
  else
    v6 = 0xE700000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_100075B70(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xEF65676150746E69;
  v3 = 0x6F50737365636361;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0xD000000000000010;
    else
      v5 = 0xD000000000000011;
    if (v4 == 1)
      v6 = 0x80000001000CF670;
    else
      v6 = 0x80000001000CF690;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0x6F50737365636361;
  v6 = 0xEF65676150746E69;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v3 = 0xD000000000000010;
    else
      v3 = 0xD000000000000011;
    if (v7 == 1)
      v2 = 0x80000001000CF670;
    else
      v2 = 0x80000001000CF690;
  }
LABEL_15:
  if (v5 == v3 && v6 == v2)
  {
    v8 = 1;
    v2 = v6;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v3, v2, 0);
  }
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v2);
  return v8 & 1;
}

void sub_100075C80(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100075CE4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100075D5C + 4 * byte_1000CB8D4[a2]))(0xD000000000000014);
}

uint64_t sub_100075D5C(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  char v3;

  v2 = 0x80000001000CF5B0;
  if (a1 == 0xD000000000000014 && v1 == 0x80000001000CF5B0)
  {
    v3 = 1;
    v2 = v1;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0xD000000000000014, 0x80000001000CF5B0, 0);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

uint64_t sub_100075E1C(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 1953064037;
  else
    v3 = 0x656461637261;
  if (v2)
    v4 = 0xE600000000000000;
  else
    v4 = 0xE400000000000000;
  if ((a2 & 1) != 0)
    v5 = 1953064037;
  else
    v5 = 0x656461637261;
  if ((a2 & 1) != 0)
    v6 = 0xE400000000000000;
  else
    v6 = 0xE600000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_100075EB4(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_100075F0C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0xD000000000000014, 0x80000001000CF5B0);
  swift_bridgeObjectRelease(0x80000001000CF5B0);
  return Hasher._finalize()();
}

Swift::Int sub_100075F94(char a1)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  if (a1)
  {
    if (a1 == 1)
      v2 = 0xD000000000000010;
    else
      v2 = 0xD000000000000011;
    if (a1 == 1)
      v3 = 0x80000001000CF670;
    else
      v3 = 0x80000001000CF690;
  }
  else
  {
    v3 = 0xEF65676150746E69;
    v2 = 0x6F50737365636361;
  }
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

void sub_100076044(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_10007609C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6F50737365636361, 0xEF796C6E4F746E69);
  swift_bridgeObjectRelease(0xEF796C6E4F746E69);
  return Hasher._finalize()();
}

void sub_100076140(uint64_t a1, char a2)
{
  __asm { BR              X11 }
}

uint64_t sub_100076188(uint64_t a1)
{
  String.hash(into:)(a1, 0xD00000000000001DLL, 0x80000001000CF4A0);
  return swift_bridgeObjectRelease(0x80000001000CF4A0);
}

void sub_10007621C(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_100076260(uint64_t a1)
{
  String.hash(into:)(a1, 0x6F50737365636361, 0xEF796C6E4F746E69);
  return swift_bridgeObjectRelease(0xEF796C6E4F746E69);
}

void sub_1000762E8(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_10007633C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0xD000000000000014, 0x80000001000CF5B0);
  swift_bridgeObjectRelease(0x80000001000CF5B0);
  return Hasher._finalize()();
}

Swift::Int sub_1000763C4(uint64_t a1, char a2)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  if (a2)
  {
    if (a2 == 1)
      v3 = 0xD000000000000010;
    else
      v3 = 0xD000000000000011;
    if (a2 == 1)
      v4 = 0x80000001000CF670;
    else
      v4 = 0x80000001000CF690;
  }
  else
  {
    v4 = 0xEF65676150746E69;
    v3 = 0x6F50737365636361;
  }
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

void sub_100076470(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1000764C4()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6F50737365636361, 0xEF796C6E4F746E69);
  swift_bridgeObjectRelease(0xEF796C6E4F746E69);
  return Hasher._finalize()();
}

void sub_100076568(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1000765C0()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0xD00000000000001DLL, 0x80000001000CF4A0);
  swift_bridgeObjectRelease(0x80000001000CF4A0);
  return Hasher._finalize()();
}

uint64_t sub_10007666C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10007669C + 4 * byte_1000CB902[a1]))(0x656461637261, 0xE600000000000000);
}

uint64_t sub_10007669C()
{
  return 0x614E726579616C70;
}

unint64_t sub_1000766B8()
{
  return 0xD000000000000016;
}

uint64_t sub_1000766D4()
{
  return 0x6F6272656461656CLL;
}

uint64_t sub_1000766F4()
{
  return 0x49656C69666F7270;
}

uint64_t sub_100076714()
{
  return 0x6D65766569686361;
}

uint64_t sub_100076734()
{
  return 0x656C69666F7270;
}

uint64_t sub_10007674C()
{
  return 0x7250646E65697266;
}

uint64_t sub_100076770()
{
  return 0x73646E65697266;
}

uint64_t sub_100076788()
{
  return 0x72616F6268736164;
}

void sub_1000767A4(char *a1)
{
  sub_100075C80(*a1);
}

void sub_1000767B0()
{
  char *v0;

  sub_100075EB4(*v0);
}

void sub_1000767B8()
{
  __asm { BR              X10 }
}

uint64_t sub_1000767FC(uint64_t a1)
{
  String.hash(into:)(a1, 0xD000000000000014, 0x80000001000CF5B0);
  return swift_bridgeObjectRelease(0x80000001000CF5B0);
}

void sub_100076870(uint64_t a1)
{
  char *v1;

  sub_1000762E8(a1, *v1);
}

unint64_t sub_100076878@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10007709C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000768A4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1000768DC + 4 * byte_1000CB910[*v0]))();
}

void sub_1000768DC(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000014;
  a1[1] = 0x80000001000CF5B0;
}

void sub_1000768FC(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "inGameBanner");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_100076920(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "welcomeBanner");
  *(_WORD *)(a1 + 14) = -4864;
}

uint64_t sub_100076948(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100076D44();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000769A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100076D44();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1000769F0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  _TtC13GameOverlayUI20GameOverlayUIService *v4;
  _TtC13GameOverlayUI20GameOverlayUIService *v5;
  uint64_t v6;
  const char *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  _TtC13GameOverlayUI20GameOverlayUIService *v15;
  char v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;

  v2 = *a2;
  v3 = sub_10007666C(*a1);
  v5 = v4;
  v6 = sub_10007666C(v2);
  if (v3 == v6 && v5 == (_TtC13GameOverlayUI20GameOverlayUIService *)v7)
  {
    v16 = 1;
    v15 = v5;
  }
  else
  {
    v15 = (_TtC13GameOverlayUI20GameOverlayUIService *)v7;
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5, v7, v8, v9, v10, v11, v12, v13);
  swift_bridgeObjectRelease(v15, v17, v18, v19, v20, v21, v22, v23);
  return v16 & 1;
}

Swift::Int sub_100076A78()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  _TtC13GameOverlayUI20GameOverlayUIService *v3;
  _TtC13GameOverlayUI20GameOverlayUIService *v4;
  SEL v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  _QWORD v13[9];

  v1 = *v0;
  Hasher.init(_seed:)(v13, 0);
  v2 = sub_10007666C(v1);
  v4 = v3;
  String.hash(into:)(v13, v2, v3);
  swift_bridgeObjectRelease(v4, v5, v6, v7, v8, v9, v10, v11);
  return Hasher._finalize()();
}

void sub_100076AD8(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  _TtC13GameOverlayUI20GameOverlayUIService *v4;
  _TtC13GameOverlayUI20GameOverlayUIService *v5;
  SEL v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;

  v3 = sub_10007666C(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  swift_bridgeObjectRelease(v5, v6, v7, v8, v9, v10, v11, v12);
}

Swift::Int sub_100076B18(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 v2;
  uint64_t v3;
  _TtC13GameOverlayUI20GameOverlayUIService *v4;
  _TtC13GameOverlayUI20GameOverlayUIService *v5;
  SEL v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  _QWORD v14[9];

  v2 = *v1;
  Hasher.init(_seed:)(v14, a1);
  v3 = sub_10007666C(v2);
  v5 = v4;
  String.hash(into:)(v14, v3, v4);
  swift_bridgeObjectRelease(v5, v6, v7, v8, v9, v10, v11, v12);
  return Hasher._finalize()();
}

unint64_t sub_100076B74@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1000770E4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100076BA0@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10007666C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_100076BCC()
{
  unint64_t result;

  result = qword_10010F5C8;
  if (!qword_10010F5C8)
  {
    result = swift_getWitnessTable(&unk_1000CB9CC, &type metadata for MetricsHelper.targetId);
    atomic_store(result, (unint64_t *)&qword_10010F5C8);
  }
  return result;
}

unint64_t sub_100076C14()
{
  unint64_t result;

  result = qword_10010F5D0;
  if (!qword_10010F5D0)
  {
    result = swift_getWitnessTable(&unk_1000CBA6C, &type metadata for MetricsHelper.targetType);
    atomic_store(result, (unint64_t *)&qword_10010F5D0);
  }
  return result;
}

uint64_t sub_100076C58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100076D00();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100076CB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100076D00();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

unint64_t sub_100076D00()
{
  unint64_t result;

  result = qword_10010F5D8;
  if (!qword_10010F5D8)
  {
    result = swift_getWitnessTable(&unk_1000CB954, &type metadata for MetricsHelper.targetId);
    atomic_store(result, (unint64_t *)&qword_10010F5D8);
  }
  return result;
}

unint64_t sub_100076D44()
{
  unint64_t result;

  result = qword_10010F5E0;
  if (!qword_10010F5E0)
  {
    result = swift_getWitnessTable(&unk_1000CB9F4, &type metadata for MetricsHelper.targetType);
    atomic_store(result, (unint64_t *)&qword_10010F5E0);
  }
  return result;
}

uint64_t sub_100076D88(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100075B70(*a1, *a2);
}

Swift::Int sub_100076D94()
{
  char *v0;

  return sub_100075F94(*v0);
}

uint64_t sub_100076D9C(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0x80000001000CF670;
  v3 = 0xD000000000000010;
  if (*v1 != 1)
  {
    v3 = 0xD000000000000011;
    v2 = 0x80000001000CF690;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x6F50737365636361;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xEF65676150746E69;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100076E28(uint64_t a1)
{
  char *v1;

  return sub_1000763C4(a1, *v1);
}

unint64_t sub_100076E30@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10007712C(*a1);
  *a2 = result;
  return result;
}

void sub_100076E5C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xEF65676150746E69;
  v4 = 0x80000001000CF670;
  v5 = 0xD000000000000010;
  if (v2 != 1)
  {
    v5 = 0xD000000000000011;
    v4 = 0x80000001000CF690;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6F50737365636361;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_100076ECC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100077AC8();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100076F28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100077AC8();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

unint64_t sub_100076F74(_TtC13GameOverlayUI20GameOverlayUIService *a1, const char *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  Class isa;
  uint64_t v10;
  _QWORD *v11;
  Class v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t result;
  char v18;
  uint64_t *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;

  isa = a1[1].super.isa;
  if (!isa)
  {
    v11 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100003304(&qword_10010F610);
  v10 = static _DictionaryStorage.allocate(capacity:)(isa);
  v11 = (_QWORD *)v10;
  v12 = a1[1].super.isa;
  if (!v12)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1, a2, a3, a4, a5, a6, a7, a8);
    return (unint64_t)v11;
  }
  v13 = v10 + 64;
  v14 = (uint64_t)&a1[2];
  swift_retain(v10);
  while (1)
  {
    sub_100077B0C(v14, (uint64_t)&v23);
    v15 = v23;
    v16 = v24;
    result = sub_1000C1508(v23, v24);
    if ((v18 & 1) != 0)
      break;
    *(_QWORD *)(v13 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v19 = (uint64_t *)(v11[6] + 16 * result);
    *v19 = v15;
    v19[1] = v16;
    result = (unint64_t)sub_100077B54(&v25, (_OWORD *)(v11[7] + 32 * result));
    v20 = v11[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_11;
    v11[2] = v22;
    v14 += 48;
    v12 = (Class)((char *)v12 - 1);
    if (!v12)
    {
      swift_release(v11);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10007709C(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000FAF70, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

unint64_t sub_1000770E4(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000FAFF0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xA)
    return 10;
  else
    return v3;
}

unint64_t sub_10007712C(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000FB100, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

void sub_100077174()
{
  sub_1000772D8();
}

void sub_100077190()
{
  id v0;
  NSString v1;
  NSString v2;
  NSString v3;
  NSString v4;
  NSString v5;

  v0 = objc_msgSend(objc_allocWithZone((Class)GKAPIReporter), "init");
  v1 = String._bridgeToObjectiveC()();
  v2 = String._bridgeToObjectiveC()();
  v3 = String._bridgeToObjectiveC()();
  v4 = String._bridgeToObjectiveC()();
  v5 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "recordClickWithAction:targetId:targetType:pageId:pageType:", v1, v2, v3, v4, v5);

}

void sub_1000772B4()
{
  sub_1000772D8();
}

void sub_1000772D8()
{
  id v0;
  NSString v1;
  NSString v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  NSString v7;
  id v8;

  v0 = objc_msgSend(objc_allocWithZone((Class)GKAPIReporter), "init");
  v1 = String._bridgeToObjectiveC()();
  v2 = String._bridgeToObjectiveC()();
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend((id)objc_opt_self(GKSignInOriginManager), "stringForOrigin:", 3);
  if (!v4)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v6 = v5;
    v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v6);
    v4 = v7;
  }
  v8 = v4;
  objc_msgSend(v0, "recordPageWithID:pageContext:pageType:refApp:", v1, v2, v3);

}

uint64_t sub_1000773F0(uint64_t a1)
{
  __n128 v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t inited;
  const char *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  const char *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  unint64_t v41;
  const char *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[2];
  _BYTE v60[184];

  v58 = sub_100003304(&qword_10010F5F8);
  v57 = *(_QWORD *)(v58 - 8);
  v2 = __chkstk_darwin(v58);
  v4 = (char *)&v54 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for MetricsFieldsContext(0, v2);
  v56 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v54 - v10;
  v12 = type metadata accessor for ScalarDictionary(0, v9);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for ImpressionMetrics.ID(0, v13);
  __chkstk_darwin(v16);
  v18 = (char *)&v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = type metadata accessor for ImpressionMetrics(0);
  v54 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v20 = (char *)&v54 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100003304(&qword_10010F600);
  inited = swift_initStackObject(v21, v60);
  *(_OWORD *)(inited + 16) = xmmword_1000C89B0;
  *(_QWORD *)(inited + 32) = 0x707954746E657665;
  *(_QWORD *)(inited + 40) = 0xE900000000000065;
  *(_QWORD *)(inited + 48) = 0x6973736572706D69;
  *(_QWORD *)(inited + 56) = 0xEB00000000736E6FLL;
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 80) = 0x6973736572706D69;
  v30 = 0x6F50737365636361;
  v31 = 0x80000001000CF5B0;
  if (a1 > 1)
    v30 = 0xD000000000000014;
  else
    v31 = 0xEB00000000746E69;
  *(_QWORD *)(inited + 88) = 0xEE00657079546E6FLL;
  *(_QWORD *)(inited + 96) = v30;
  *(_QWORD *)(inited + 104) = v31;
  *(_QWORD *)(inited + 120) = &type metadata for String;
  *(_QWORD *)(inited + 128) = 0x6973736572706D69;
  *(_QWORD *)(inited + 168) = &type metadata for Int;
  *(_QWORD *)(inited + 136) = 0xEF7865646E496E6FLL;
  *(_QWORD *)(inited + 144) = a1;
  v32 = sub_10008FD10((_TtC13GameOverlayUI20GameOverlayUIService *)inited, v23, v24, v25, v26, v27, v28, v29);
  v33 = ImpressionMetrics.ID.init(parent:element:index:)(0xD000000000000016, 0x80000001000D0A40, 0x6F50737365636361, 0xEB00000000746E69, a1);
  ScalarDictionary.init()(v33);
  v41 = sub_100076F74(&_swiftEmptyArrayStorage, v34, v35, v36, v37, v38, v39, v40);
  v49 = sub_100076F74(&_swiftEmptyArrayStorage, v42, v43, v44, v45, v46, v47, v48);
  v50 = ImpressionMetrics.init(id:fields:custom:commonFields:clickLocationFields:)(v18, v32, v15, v41, v49);
  MetricsFieldsContext.init()(v50);
  type metadata accessor for BasicImpressionsTracker(0);
  v59[0] = BasicImpressionsTracker.__allocating_init(threshold:)(1.0);
  v59[1] = &protocol witness table for BasicImpressionsTracker;
  static MetricsFieldsContext.Property<A>.impressionsTracker.getter();
  v51 = sub_100003304(&qword_10010F608);
  MetricsFieldsContext.addingValue<A>(_:forProperty:)(v59, v4, v51);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v4, v58);
  swift_unknownObjectRelease(v59[0]);
  v52 = *(void (**)(char *, uint64_t))(v56 + 8);
  v52(v7, v5);
  type metadata accessor for GKMetricsBridge(0);
  static GKMetricsBridge.recordCustomImpressionMetrics(impressionMetrics:context:)(v20, v11);
  v52(v11, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v20, v55);
}

void sub_1000777CC(unsigned __int8 a1, char a2)
{
  sub_10007780C(a1, a2);
}

void sub_1000777F0(unsigned __int8 a1, char a2)
{
  sub_10007780C(a1, a2);
}

void sub_10007780C(unsigned __int8 a1, char a2)
{
  _TtC13GameOverlayUI20GameOverlayUIService *v4;
  _TtC13GameOverlayUI20GameOverlayUIService *v5;
  SEL v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;

  objc_msgSend(objc_allocWithZone((Class)GKAPIReporter), "init");
  String._bridgeToObjectiveC()();
  sub_10007666C(a1);
  v5 = v4;
  String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v5, v6, v7, v8, v9, v10, v11, v12);
  __asm { BR              X10 }
}

void sub_1000778C4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20;
  void *v21;
  void *v22;
  NSString v23;
  NSString v24;
  NSString v25;

  v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x80000001000CF5B0);
  v24 = String._bridgeToObjectiveC()();
  v25 = String._bridgeToObjectiveC()();
  objc_msgSend(v20, "recordClickWithAction:targetId:targetType:pageId:pageType:", v21, v22, v23, v24, v25);

}

uint64_t storeEnumTagSinglePayload for MetricsHelper.pageId(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100077A00 + 4 * byte_1000CB91D[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100077A34 + 4 * byte_1000CB918[v4]))();
}

uint64_t sub_100077A34(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100077A3C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100077A44);
  return result;
}

uint64_t sub_100077A50(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100077A58);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100077A5C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100077A64(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MetricsHelper.pageId()
{
  return &type metadata for MetricsHelper.pageId;
}

unint64_t sub_100077A84()
{
  unint64_t result;

  result = qword_10010F5E8;
  if (!qword_10010F5E8)
  {
    result = swift_getWitnessTable(&unk_1000CBBB4, &type metadata for MetricsHelper.pageId);
    atomic_store(result, (unint64_t *)&qword_10010F5E8);
  }
  return result;
}

unint64_t sub_100077AC8()
{
  unint64_t result;

  result = qword_10010F5F0;
  if (!qword_10010F5F0)
  {
    result = swift_getWitnessTable(&unk_1000CBB3C, &type metadata for MetricsHelper.pageId);
    atomic_store(result, (unint64_t *)&qword_10010F5F0);
  }
  return result;
}

uint64_t sub_100077B0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003304((uint64_t *)&unk_100110440);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_OWORD *sub_100077B54(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t GameDashboardLaunchContext.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  *(_BYTE *)(v1 + 16) = 0;
  v2 = v1 + OBJC_IVAR____TtC13GameOverlayUI26GameDashboardLaunchContext__action;
  v3 = type metadata accessor for LaunchDashboardAction(0);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  ObservationRegistrar.init()(v4);
  return v1;
}

uint64_t (*sub_100077BD8(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 16, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t GameDashboardLaunchContext.isPresentingDashboard.getter()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  _QWORD v4[3];

  KeyPath = swift_getKeyPath(&unk_1000CBC30);
  v4[0] = v0;
  v2 = sub_1000035B4(&qword_10010CE00, type metadata accessor for GameDashboardLaunchContext, (uint64_t)&protocol conformance descriptor for GameDashboardLaunchContext);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4, KeyPath, v2);
  swift_release(KeyPath);
  swift_beginAccess(v0 + 16, v4, 0, 0);
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t sub_100077CAC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  _QWORD v7[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000CBC30);
  v7[0] = v3;
  v5 = sub_1000035B4(&qword_10010CE00, type metadata accessor for GameDashboardLaunchContext, (uint64_t)&protocol conformance descriptor for GameDashboardLaunchContext);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v7, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_beginAccess(v3 + 16, v7, 0, 0);
  *a2 = *(_BYTE *)(v3 + 16);
  return result;
}

double sub_100077D4C(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000CBC30);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_1000035B4(&qword_10010CE00, type metadata accessor for GameDashboardLaunchContext, (uint64_t)&protocol conformance descriptor for GameDashboardLaunchContext);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_1000783A4, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

double GameDashboardLaunchContext.isPresentingDashboard.setter(char a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  double result;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  KeyPath = swift_getKeyPath(&unk_1000CBC30);
  v7 = v1;
  v8 = a1;
  v9 = v1;
  v4 = sub_1000035B4(&qword_10010CE00, type metadata accessor for GameDashboardLaunchContext, (uint64_t)&protocol conformance descriptor for GameDashboardLaunchContext);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_1000783A4, &v6, (char *)&type metadata for () + 8, v4);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_100077E9C(uint64_t a1, char a2)
{
  uint64_t result;
  _BYTE v5[24];

  result = swift_beginAccess(a1 + 16, v5, 1, 0);
  *(_BYTE *)(a1 + 16) = a2;
  return result;
}

void (*GameDashboardLaunchContext.isPresentingDashboard.modify(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v2;
  KeyPath = swift_getKeyPath(&unk_1000CBC30);
  v4[5] = OBJC_IVAR____TtC13GameOverlayUI26GameDashboardLaunchContext___observationRegistrar;
  *v4 = v2;
  v6 = sub_1000035B4(&qword_10010CE00, type metadata accessor for GameDashboardLaunchContext, (uint64_t)&protocol conformance descriptor for GameDashboardLaunchContext);
  v4[6] = v6;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4, KeyPath, v6);
  swift_release(KeyPath);
  *v4 = v2;
  v7 = swift_getKeyPath(&unk_1000CBC30);
  ObservationRegistrar.willSet<A, B>(_:keyPath:)(v4, v7, v6);
  swift_release(v7);
  v4[7] = sub_100077BD8((uint64_t)v4);
  return sub_100077FD4;
}

void sub_100077FD4(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t KeyPath;

  v1 = (_QWORD *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 56))(*a1, 0);
  v2 = v1[6];
  *v1 = v1[4];
  KeyPath = swift_getKeyPath(&unk_1000CBC30);
  ObservationRegistrar.didSet<A, B>(_:keyPath:)(v1, KeyPath, v2);
  swift_release(KeyPath);
  free(v1);
}

uint64_t sub_100078044@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000CBC58);
  v8[0] = v3;
  v5 = sub_1000035B4(&qword_10010CE00, type metadata accessor for GameDashboardLaunchContext, (uint64_t)&protocol conformance descriptor for GameDashboardLaunchContext);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = v3 + OBJC_IVAR____TtC13GameOverlayUI26GameDashboardLaunchContext__action;
  swift_beginAccess(v3 + OBJC_IVAR____TtC13GameOverlayUI26GameDashboardLaunchContext__action, v8, 0, 0);
  return sub_1000783C0(v6, a2);
}

uint64_t sub_1000780F4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  _BYTE v11[16];
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;

  v4 = sub_100003304(&qword_10010CA80);
  __chkstk_darwin(v4);
  v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000783C0(a1, (uint64_t)v6);
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000CBC58);
  v12 = v7;
  v13 = v6;
  v14 = v7;
  v9 = sub_1000035B4(&qword_10010CE00, type metadata accessor for GameDashboardLaunchContext, (uint64_t)&protocol conformance descriptor for GameDashboardLaunchContext);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v14, KeyPath, sub_100078E64, v11, (char *)&type metadata for () + 8, v9);
  swift_release(KeyPath);
  return sub_1000785D0((uint64_t)v6);
}

uint64_t GameDashboardLaunchContext.action.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];

  KeyPath = swift_getKeyPath(&unk_1000CBC58);
  v7[0] = v1;
  v4 = sub_1000035B4(&qword_10010CE00, type metadata accessor for GameDashboardLaunchContext, (uint64_t)&protocol conformance descriptor for GameDashboardLaunchContext);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v7, KeyPath, v4);
  swift_release(KeyPath);
  v5 = v1 + OBJC_IVAR____TtC13GameOverlayUI26GameDashboardLaunchContext__action;
  swift_beginAccess(v1 + OBJC_IVAR____TtC13GameOverlayUI26GameDashboardLaunchContext__action, v7, 0, 0);
  return sub_1000783C0(v5, a1);
}

uint64_t sub_100078298(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE v5[24];

  v3 = a1 + OBJC_IVAR____TtC13GameOverlayUI26GameDashboardLaunchContext__action;
  swift_beginAccess(a1 + OBJC_IVAR____TtC13GameOverlayUI26GameDashboardLaunchContext__action, v5, 33, 0);
  sub_100078B38(a2, v3);
  return swift_endAccess(v5);
}

uint64_t GameDashboardLaunchContext.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_BYTE *)(v0 + 16) = 0;
  v1 = v0 + OBJC_IVAR____TtC13GameOverlayUI26GameDashboardLaunchContext__action;
  v2 = type metadata accessor for LaunchDashboardAction(0);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  ObservationRegistrar.init()(v3);
  return v0;
}

uint64_t type metadata accessor for GameDashboardLaunchContext(uint64_t a1)
{
  uint64_t result;

  result = qword_10010F650;
  if (!qword_10010F650)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for GameDashboardLaunchContext);
  return result;
}

uint64_t sub_1000783A4()
{
  return sub_100078E14();
}

uint64_t sub_1000783C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003304(&qword_10010CA80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

double sub_100078408(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  double result;
  _BYTE v12[16];
  uint64_t v13;
  char v14;
  _BYTE v15[16];
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;

  v2 = v1;
  v4 = sub_100003304(&qword_10010CA80);
  __chkstk_darwin(v4);
  v6 = &v12[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100078ADC(a1, (uint64_t)v6);
  v7 = type metadata accessor for LaunchDashboardAction(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 0, 1, v7);
  KeyPath = swift_getKeyPath(&unk_1000CBC58);
  v16 = v2;
  v17 = v6;
  v18 = v2;
  v9 = sub_1000035B4(&qword_10010CE00, type metadata accessor for GameDashboardLaunchContext, (uint64_t)&protocol conformance descriptor for GameDashboardLaunchContext);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v18, KeyPath, sub_100078B20, v15, (char *)&type metadata for () + 8, v9);
  swift_release(KeyPath);
  sub_1000785D0((uint64_t)v6);
  v10 = swift_getKeyPath(&unk_1000CBC30);
  v13 = v2;
  v14 = 1;
  v18 = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v18, v10, sub_1000783A4, v12, (char *)&type metadata for () + 8, v9);
  *(_QWORD *)&result = swift_release(v10).n128_u64[0];
  return result;
}

uint64_t GameDashboardLaunchContext.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1000785D0(v0 + OBJC_IVAR____TtC13GameOverlayUI26GameDashboardLaunchContext__action);
  v1 = v0 + OBJC_IVAR____TtC13GameOverlayUI26GameDashboardLaunchContext___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_1000785D0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100003304(&qword_10010CA80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t GameDashboardLaunchContext.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1000785D0(v0 + OBJC_IVAR____TtC13GameOverlayUI26GameDashboardLaunchContext__action);
  v1 = v0 + OBJC_IVAR____TtC13GameOverlayUI26GameDashboardLaunchContext___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100078674(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  v7 = type metadata accessor for ActionOutcome(0);
  v6[5] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[6] = v8;
  v6[7] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MainActor(0);
  v6[8] = static MainActor.shared.getter(v9);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  return swift_task_switch(sub_10007870C, v10, v11);
}

uint64_t sub_10007870C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;

  v1 = *(_QWORD *)(v0 + 16);
  swift_release(*(_QWORD *)(v0 + 64));
  v2 = type metadata accessor for LaunchDashboardAction(0);
  v3 = *(unsigned __int8 *)(v1 + *(int *)(v2 + 36));
  if (v3 >= 2)
  {
    if (v3 == 2)
      sub_1000777F0(*(_BYTE *)(*(_QWORD *)(v0 + 16) + *(int *)(v2 + 32)), 2);
    else
      sub_100077190();
  }
  else
  {
    sub_1000777CC(*(_BYTE *)(*(_QWORD *)(v0 + 16) + *(int *)(v2 + 32)), v3);
  }
  v5 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 40);
  v7 = sub_100078408(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v5 + 104))(v4, enum case for ActionOutcome.performed(_:), v6, v7);
  Promise.resolve(_:)(v4);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000787EC(uint64_t a1)
{
  return _s13GameOverlayUI35LaunchDashboardActionImplementationV7perform_8asPartOf9JetEngine7PromiseCyAF0F7OutcomeOGAA0deF0V_xtF_0(a1);
}

uint64_t _s13GameOverlayUI35LaunchDashboardActionImplementationV7perform_8asPartOf9JetEngine7PromiseCyAF0F7OutcomeOGAA0deF0V_xtF_0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[2];

  v2 = type metadata accessor for LaunchDashboardAction(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003304(&qword_10010EB20);
  __chkstk_darwin(v6);
  v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100003304(&qword_10010F7E8);
  v9 = Promise.__allocating_init()();
  v10 = type metadata accessor for GameDashboardLaunchContext(0);
  BaseObjectGraph.inject<A>(_:)(v10, v10);
  v11 = v22[1];
  v12 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v8, 1, 1, v12);
  sub_100078ADC(a1, (uint64_t)v5);
  type metadata accessor for MainActor(0);
  swift_retain(v11);
  v13 = swift_retain(v9);
  v14 = static MainActor.shared.getter(v13);
  v15 = *(unsigned __int8 *)(v3 + 80);
  v16 = (v15 + 32) & ~v15;
  v17 = (v4 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF8;
  v19 = swift_allocObject(&unk_100100078, v18 + 8, v15 | 7);
  *(_QWORD *)(v19 + 16) = v14;
  *(_QWORD *)(v19 + 24) = &protocol witness table for MainActor;
  sub_100078D1C((uint64_t)v5, v19 + v16);
  *(_QWORD *)(v19 + v17) = v11;
  *(_QWORD *)(v19 + v18) = v9;
  v20 = sub_100028240((uint64_t)v8, (uint64_t)&unk_10010F7F8, v19);
  swift_release(v20);
  swift_release(v11);
  return v9;
}

uint64_t sub_1000789AC()
{
  return sub_1000035B4(&qword_10010CA88, type metadata accessor for LaunchDashboardAction, (uint64_t)&protocol conformance descriptor for LaunchDashboardAction);
}

uint64_t sub_1000789D8()
{
  return type metadata accessor for GameDashboardLaunchContext(0);
}

void sub_1000789E0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  v6[0] = &unk_1000CBD20;
  sub_100078A74(319);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for ObservationRegistrar(319);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 3, v6, a1 + 80);
    }
  }
}

void sub_100078A74(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10010F660)
  {
    v2 = type metadata accessor for LaunchDashboardAction(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10010F660);
  }
}

uint64_t sub_100078AC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 8);
}

uint64_t type metadata accessor for LaunchDashboardActionImplementation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10006CC00(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LaunchDashboardActionImplementation);
}

uint64_t sub_100078ADC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LaunchDashboardAction(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100078B20()
{
  uint64_t v0;

  return sub_100078298(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100078B38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003304(&qword_10010CA80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_100078B80()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  SEL v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  SEL v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  SEL v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  _TtC13GameOverlayUI20GameOverlayUIService **v39;
  SEL v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  SEL v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  SEL v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  SEL v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  SEL v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  const char *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  _TtC13GameOverlayUI20GameOverlayUIService *v82;
  SEL v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  id v89;
  SEL v90;
  id v91;
  id v92;
  id v93;
  id v94;
  id v95;
  id v96;
  SEL v97;
  id v98;
  id v99;
  id v100;
  id v101;
  id v102;
  id v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;

  v1 = (int *)type metadata accessor for LaunchDashboardAction(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  v6 = v0 + v4;
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v0 + v4 + 8), v7, v8, v9, v10, v11, v12, v13);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v0 + v4 + 24), v14, v15, v16, v17, v18, v19, v20);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v0 + v4 + 40), v21, v22, v23, v24, v25, v26, v27);
  v28 = type metadata accessor for Game(0);
  v29 = v0 + v4 + *(int *)(v28 + 28);
  v30 = type metadata accessor for Date(0);
  v31 = *(_QWORD *)(v30 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v29, v30);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v6 + *(int *)(v28 + 60) + 8), v32, v33, v34, v35, v36, v37, v38);
  v39 = (_TtC13GameOverlayUI20GameOverlayUIService **)(v6 + v1[5]);
  swift_bridgeObjectRelease(v39[1], v40, v41, v42, v43, v44, v45, v46);
  swift_bridgeObjectRelease(v39[3], v47, v48, v49, v50, v51, v52, v53);
  swift_bridgeObjectRelease(v39[5], v54, v55, v56, v57, v58, v59, v60);
  swift_bridgeObjectRelease(v39[7], v61, v62, v63, v64, v65, v66, v67);
  swift_bridgeObjectRelease(v39[9], v68, v69, v70, v71, v72, v73, v74);
  v82 = v39[12];
  if (v82)
  {
    swift_bridgeObjectRelease(v82, v75, v76, v77, v78, v79, v80, v81);
    swift_bridgeObjectRelease(v39[14], v83, v84, v85, v86, v87, v88, v89);
    swift_bridgeObjectRelease(v39[16], v90, v91, v92, v93, v94, v95, v96);
    swift_bridgeObjectRelease(v39[18], v97, v98, v99, v100, v101, v102, v103);
  }
  v104 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v105 = (v104 + 15) & 0xFFFFFFFFFFFFFFF8;
  sub_100019FD8(*(_QWORD *)(v6 + v1[6]), *(_QWORD *)(v6 + v1[6] + 8), *(_BYTE *)(v6 + v1[6] + 16));
  v106 = v6 + v1[7];
  v107 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v107 - 8) + 8))(v106, v107);
  swift_release(*(_QWORD *)(v0 + v104));
  swift_release(*(_QWORD *)(v0 + v105));
  return swift_deallocObject(v0, v105 + 8, v3 | 7);
}

uint64_t sub_100078D1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LaunchDashboardAction(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100078D60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = *(_QWORD *)(type metadata accessor for LaunchDashboardAction(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)(v1 + 16);
  v8 = *(_QWORD *)(v1 + 24);
  v9 = v1 + v5;
  v10 = *(_QWORD *)(v1 + v6);
  v11 = *(_QWORD *)(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFF8));
  v12 = (_QWORD *)swift_task_alloc(dword_10010F7F4);
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = sub_1000252CC;
  return sub_100078674(a1, v7, v8, v9, v10, v11);
}

uint64_t sub_100078E14()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t result;
  _BYTE v4[24];

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 24);
  result = swift_beginAccess(v1 + 16, v4, 1, 0);
  *(_BYTE *)(v1 + 16) = v2;
  return result;
}

uint64_t sub_100078E64()
{
  return sub_100078B20();
}

uint64_t sub_100078E78()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1000CC1C8);
  v4 = v0;
  v2 = sub_1000035B4(&qword_10010E210, type metadata accessor for AccessPointHighlightComponent.GestureHandler, (uint64_t)&unk_1000CBFC8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t sub_100078EFC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100078F24 + 4 * byte_1000CBD80[a1]))(25705, 0xE200000000000000);
}

uint64_t sub_100078F24()
{
  return 0x656C746974;
}

uint64_t sub_100078F38()
{
  return 0x656C746974627573;
}

uint64_t sub_100078F50()
{
  return 0x49676E696461656CLL;
}

uint64_t sub_100078F70()
{
  return 0x676E696C69617274;
}

uint64_t sub_100078F90()
{
  return 0x6E6F697461727564;
}

uint64_t sub_100078FA8()
{
  return 0x6953646C756F6873;
}

uint64_t sub_100078FCC()
{
  return 0x6575676573;
}

unint64_t sub_100078FE0()
{
  return 0xD000000000000011;
}

uint64_t sub_100078FFC()
{
  return 0x7954746567726174;
}

uint64_t sub_100079018()
{
  return 0x644965676170;
}

uint64_t sub_10007902C()
{
  return 0x65646E496D657469;
}

uint64_t sub_100079048(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v32;
  char v33;
  char v34;
  _BYTE v35[2];
  char v36;
  _BYTE v37[10];
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  _BYTE v43[2];

  v3 = v1;
  v5 = sub_100003304(&qword_10010F9B8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100003C28(a1, v9);
  v11 = sub_100080468();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AccessPointHighlight.CodingKeys, &type metadata for AccessPointHighlight.CodingKeys, v11, v9, v10);
  v43[1] = 0;
  sub_100003304(&qword_10010F988);
  sub_100011054(&qword_10010F9C0, &qword_10010F988, (uint64_t)&protocol conformance descriptor for CodeAnyHashable<A>);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3);
  if (!v2)
  {
    v12 = v3[5];
    v13 = v3[6];
    v43[0] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, v43, v5);
    v14 = v3[7];
    v15 = v3[8];
    v42 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, &v42, v5);
    v16 = (int *)type metadata accessor for AccessPointHighlight(0);
    v17 = (char *)v3 + v16[7];
    v41 = 3;
    v18 = type metadata accessor for AccessPointIconType(0);
    v19 = sub_1000035B4(&qword_10010F9C8, type metadata accessor for AccessPointIconType, (uint64_t)&unk_1000C8E20);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v17, &v41, v5, v18, v19);
    v20 = (char *)v3 + v16[8];
    v40 = 4;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v20, &v40, v5, v18, v19);
    v21 = (char *)v3 + v16[9];
    v22 = *(_QWORD *)v21;
    v23 = v21[8];
    v39 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, v23, &v39, v5);
    v24 = *((unsigned __int8 *)v3 + v16[10]);
    v38 = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v24, &v38, v5);
    v25 = (char *)v3 + v16[11];
    v37[9] = 7;
    sub_100003304(&qword_10010C148);
    sub_1000804F0((unint64_t *)&qword_10010C150, &qword_10010C158, (uint64_t)&protocol conformance descriptor for _CodeByKind_OrNil<A>, (uint64_t)&protocol conformance descriptor for <A> DiscardOnError<A>);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v25);
    v26 = (char *)v3 + v16[12];
    v37[0] = 8;
    v27 = type metadata accessor for ImpressionMetrics(0);
    v28 = sub_1000035B4(&qword_10010C240, (uint64_t (*)(uint64_t))&type metadata accessor for ImpressionMetrics, (uint64_t)&protocol conformance descriptor for ImpressionMetrics);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v26, v37, v5, v27, v28);
    v36 = *((_BYTE *)v3 + v16[13]);
    v35[1] = 9;
    sub_10006F064();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v36);
    v35[0] = *((_BYTE *)v3 + v16[14]);
    v34 = 10;
    v29 = sub_100080574();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v35, &v34, v5, &type metadata for MetricsHelper.pageId, v29);
    v30 = *(_QWORD *)((char *)v3 + v16[15]);
    v33 = 11;
    KeyedEncodingContainer.encode(_:forKey:)(v30, &v33, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100079444@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(void);
  char *v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _TtC13GameOverlayUI20GameOverlayUIService **v35;
  uint64_t v36;
  SEL v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  SEL v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  __int128 v52;
  _TtC13GameOverlayUI20GameOverlayUIService **v53;
  uint64_t v54;
  const char *v55;
  const char *v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  uint64_t v63;
  const char *v64;
  const char *v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  char v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  _TtC13GameOverlayUI20GameOverlayUIService *v111;
  _TtC13GameOverlayUI20GameOverlayUIService **v112;

  v92 = a2;
  v3 = sub_100003304(&qword_10010C220);
  __chkstk_darwin(v3);
  v93 = (char *)&v88 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100003304(&qword_10010CA70);
  __chkstk_darwin(v5);
  v95 = (char *)&v88 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v96 = (char *)&v88 - v8;
  v9 = sub_100003304(&qword_10010F990);
  v97 = *(_QWORD *)(v9 - 8);
  v98 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v88 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (int *)type metadata accessor for AccessPointHighlight(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v88 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  v16 = &v14[*(int *)(v15 + 28)];
  v17 = type metadata accessor for AccessPointIconType(0);
  v18 = *(void (**)(void))(*(_QWORD *)(v17 - 8) + 56);
  v105 = (uint64_t)v16;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v18)(v16, 1, 1, v17);
  v103 = &v14[v12[8]];
  v18();
  v19 = &v14[v12[9]];
  *(_QWORD *)v19 = 0;
  v19[8] = 1;
  v94 = v12[10];
  v14[v94] = 2;
  v20 = &v14[v12[11]];
  v111 = 0;
  v109 = 0u;
  v110 = 0u;
  v108 = 0;
  v106 = 0u;
  v107 = 0u;
  sub_10000F768((uint64_t)&v109, (uint64_t)&v106);
  v21 = v107;
  *(_OWORD *)v20 = v106;
  *((_OWORD *)v20 + 1) = v21;
  v104 = (uint64_t)v20;
  *((_QWORD *)v20 + 4) = v108;
  sub_100010ED0((uint64_t)&v109, &qword_10010C128);
  v22 = (uint64_t)&v14[v12[12]];
  v23 = type metadata accessor for ImpressionMetrics(0);
  v24 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56);
  v102 = v22;
  v24(v22, 1, 1, v23);
  v25 = v12[14];
  v112 = (_TtC13GameOverlayUI20GameOverlayUIService **)v14;
  v14[v25] = 3;
  v26 = a1[3];
  v27 = a1[4];
  v100 = a1;
  sub_100003C28(a1, v26);
  v28 = sub_100080468();
  v99 = v11;
  v29 = v101;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AccessPointHighlight.CodingKeys, &type metadata for AccessPointHighlight.CodingKeys, v28, v26, v27);
  if (v29)
  {
    v31 = v104;
    v30 = v105;
    v35 = v112;
    sub_100004624(v100);
    v36 = (uint64_t)v103;
    swift_bridgeObjectRelease(v35[6], v37, v38, v39, v40, v41, v42, v43);
    swift_bridgeObjectRelease(v35[8], v44, v45, v46, v47, v48, v49, v50);
    sub_100010ED0(v30, &qword_10010CA70);
    sub_100010ED0(v36, &qword_10010CA70);
    sub_100010ED0(v31, &qword_10010C148);
    return sub_100010ED0(v102, &qword_10010C220);
  }
  else
  {
    v101 = v17;
    v91 = (uint64_t *)v19;
    v90 = v23;
    v89 = v25;
    sub_100003304(&qword_10010F988);
    LOBYTE(v106) = 0;
    sub_100011054(&qword_10010F9A0, &qword_10010F988, (uint64_t)&protocol conformance descriptor for CodeAnyHashable<A>);
    v32 = v98;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v109);
    v34 = v104;
    v33 = v105;
    v52 = v110;
    v53 = v112;
    *(_OWORD *)v112 = v109;
    *((_OWORD *)v53 + 1) = v52;
    v53[4] = v111;
    LOBYTE(v109) = 1;
    v54 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v109, v32);
    v56 = v55;
    swift_bridgeObjectRelease(v53[6], v55, v57, v58, v59, v60, v61, v62);
    v53[5] = (_TtC13GameOverlayUI20GameOverlayUIService *)v54;
    v53[6] = (_TtC13GameOverlayUI20GameOverlayUIService *)v56;
    LOBYTE(v109) = 2;
    v63 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v109, v32);
    v65 = v64;
    swift_bridgeObjectRelease(v53[8], v64, v66, v67, v68, v69, v70, v71);
    v53[7] = (_TtC13GameOverlayUI20GameOverlayUIService *)v63;
    v53[8] = (_TtC13GameOverlayUI20GameOverlayUIService *)v65;
    LOBYTE(v109) = 3;
    v72 = sub_1000035B4(&qword_10010F9A8, type metadata accessor for AccessPointIconType, (uint64_t)&unk_1000C8E48);
    v73 = (uint64_t)v96;
    v74 = v101;
    v88 = v72;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v101, &v109, v32, v101, v72);
    sub_100010D00(v73, v33, &qword_10010CA70);
    LOBYTE(v109) = 4;
    v75 = (uint64_t)v95;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v74, &v109, v32, v74, v88);
    sub_100010D00(v75, (uint64_t)v103, &qword_10010CA70);
    LOBYTE(v109) = 5;
    v76 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v109, v32);
    v77 = v91;
    *v91 = v76;
    *((_BYTE *)v77 + 8) = v78 & 1;
    LOBYTE(v109) = 6;
    v79 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v109, v32);
    *((_BYTE *)v53 + v94) = v79;
    sub_100003304(&qword_10010C148);
    LOBYTE(v106) = 7;
    sub_1000804F0((unint64_t *)&qword_10010C178, &qword_10010C180, (uint64_t)&protocol conformance descriptor for _CodeByKind_OrNil<A>, (uint64_t)&protocol conformance descriptor for <A> DiscardOnError<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v109);
    sub_100010D00((uint64_t)&v109, v34, &qword_10010C148);
    LOBYTE(v109) = 8;
    v80 = sub_1000035B4(&qword_10010C290, (uint64_t (*)(uint64_t))&type metadata accessor for ImpressionMetrics, (uint64_t)&protocol conformance descriptor for ImpressionMetrics);
    v81 = (uint64_t)v93;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v90, &v109, v98, v90, v80);
    sub_100010D00(v81, v102, &qword_10010C220);
    LOBYTE(v106) = 9;
    sub_10006F1EC();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v109);
    *((_BYTE *)v112 + v12[13]) = v109;
    LOBYTE(v106) = 10;
    v82 = sub_1000804AC();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for MetricsHelper.pageId, &v106, v98, &type metadata for MetricsHelper.pageId, v82);
    v83 = (uint64_t)v112;
    *((_BYTE *)v112 + v89) = v109;
    LOBYTE(v109) = 11;
    v84 = v98;
    v85 = v99;
    v86 = KeyedDecodingContainer.decode(_:forKey:)(&v109, v98);
    (*(void (**)(char *, uint64_t))(v97 + 8))(v85, v84);
    v87 = v100;
    *(_QWORD *)(v83 + v12[15]) = v86;
    sub_100007878(v83, v92, type metadata accessor for AccessPointHighlight);
    sub_100004624(v87);
    return sub_1000106F0(v83, type metadata accessor for AccessPointHighlight);
  }
}

uint64_t sub_100079C50()
{
  unsigned __int8 *v0;

  return sub_100078EFC(*v0);
}

uint64_t sub_100079C58@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100080EF4(a1, a2);
  *a3 = result;
  return result;
}

void sub_100079C7C(_BYTE *a1@<X8>)
{
  *a1 = 12;
}

uint64_t sub_100079C88(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100080468();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100079CB0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100080468();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100079CD8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100010CBC(v1, a1, &qword_10010F988);
}

uint64_t sub_100079CFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _OWORD v5[2];
  uint64_t v6;
  _OWORD v7[2];
  uint64_t v8;

  sub_100010CBC(v2 + *(int *)(a1 + 44), (uint64_t)v7, &qword_10010C148);
  v5[0] = v7[0];
  v5[1] = v7[1];
  v6 = v8;
  return sub_10001A0AC((uint64_t)v5, a2, &qword_10010C128);
}

uint64_t sub_100079D64@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100079444(a1, a2);
}

uint64_t sub_100079D78(_QWORD *a1)
{
  return sub_100079048(a1);
}

uint64_t sub_100079D8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100010CBC(v2 + *(int *)(a1 + 48), a2, &qword_10010C220);
}

uint64_t sub_100079DB4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _TtC13GameOverlayUI20GameOverlayUIService *v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, _QWORD, uint64_t);
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  _TtC13GameOverlayUI20GameOverlayUIService *v41;
  uint64_t v42;
  SEL v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  double v50;
  char *v51;
  double v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  _QWORD *v65;
  double v66;
  double v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t (**v77)();
  uint64_t v79;
  uint64_t KeyPath;
  _TtC13GameOverlayUI20GameOverlayUIService *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;

  v101 = a1;
  v2 = type metadata accessor for APHighlightTitle(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = v2;
  v87 = v2;
  v5 = *(_QWORD *)(v3 + 64);
  v99 = v3;
  v100 = v5;
  v6 = __chkstk_darwin(v2);
  v98 = (uint64_t)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = type metadata accessor for ScaleTransition(0, v6);
  v94 = *(_QWORD *)(v96 - 8);
  __chkstk_darwin(v96);
  v93 = (char *)&v79 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v9);
  v91 = (char *)&v79 - v11;
  v12 = type metadata accessor for _BlendModeEffect(0, v10);
  v13 = __chkstk_darwin(v12);
  v85 = (char *)&v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = type metadata accessor for BlendMode(0, v13);
  v15 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102);
  v17 = (char *)&v79 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = sub_100003304(&qword_10010FED8);
  __chkstk_darwin(v84);
  v19 = (char *)&v79 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = sub_100003304(&qword_10010FEE0);
  __chkstk_darwin(v89);
  v88 = (uint64_t)&v79 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = sub_100003304(&qword_10010FEE8);
  __chkstk_darwin(v92);
  v90 = (uint64_t)&v79 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = sub_100003304(&qword_10010FEF0);
  __chkstk_darwin(v97);
  v95 = (uint64_t)&v79 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = (uint64_t *)(v1 + *(int *)(v4 + 24));
  v24 = v23[1];
  v104 = *v23;
  v105 = v24;
  v25 = sub_10001B308();
  swift_bridgeObjectRetain(v24);
  v26 = Text.init<A>(_:)(&v104, &type metadata for String, v25);
  v28 = v27;
  v81 = v29;
  v31 = v30 & 1;
  KeyPath = swift_getKeyPath(&unk_1000CC368);
  v33 = static Font.footnote.getter(KeyPath, v32);
  v34 = swift_getKeyPath(&unk_1000CC398);
  v35 = static Color.secondary.getter();
  v83 = v15;
  v36 = *(void (**)(char *, _QWORD, uint64_t))(v15 + 104);
  v82 = v17;
  v37 = v102;
  v36(v17, enum case for BlendMode.plusLighter(_:), v102);
  v38 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
  v39 = (uint64_t)v85;
  v38(v85, v17, v37);
  v40 = v39;
  sub_100007878(v39, (uint64_t)&v19[*(int *)(v84 + 36)], (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  *(_QWORD *)v19 = v26;
  *((_QWORD *)v19 + 1) = v28;
  v19[16] = v31;
  v41 = v81;
  v42 = KeyPath;
  *((_QWORD *)v19 + 3) = v81;
  *((_QWORD *)v19 + 4) = v42;
  *((_QWORD *)v19 + 5) = 1;
  v19[48] = 0;
  *((_QWORD *)v19 + 7) = v34;
  *((_QWORD *)v19 + 8) = v33;
  *((_QWORD *)v19 + 9) = v35;
  sub_10001B35C(v26, v28, v31);
  swift_bridgeObjectRetain(v41);
  swift_retain(v42);
  swift_retain(v34);
  swift_retain(v33);
  swift_retain(v35);
  sub_1000106F0(v40, (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  (*(void (**)(char *, uint64_t))(v83 + 8))(v82, v102);
  sub_10001B34C(v26, v28, v31);
  swift_release(v35);
  swift_release(v33);
  swift_release(v34);
  swift_release(v42);
  swift_bridgeObjectRelease(v41, v43, v44, v45, v46, v47, v48, v49);
  v50 = ((double (*)(void))static UnitPoint.center.getter)();
  v51 = v91;
  ScaleTransition.init(_:anchor:)(0.00001, v50, v52);
  v53 = v93;
  v54 = v94;
  v55 = v96;
  (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v93, v51, v96);
  v56 = sub_1000035B4(&qword_10010FED0, (uint64_t (*)(uint64_t))&type metadata accessor for ScaleTransition, (uint64_t)&protocol conformance descriptor for ScaleTransition);
  v57 = v53;
  v58 = v55;
  v59 = AnyTransition.init<A>(_:)(v57, v55, v56);
  v60 = v88;
  sub_100010CBC((uint64_t)v19, v88, &qword_10010FED8);
  *(_QWORD *)(v60 + *(int *)(v89 + 36)) = v59;
  (*(void (**)(char *, uint64_t))(v54 + 8))(v51, v58);
  sub_100010ED0((uint64_t)v19, &qword_10010FED8);
  v61 = v86;
  v62 = v86 + *(int *)(v87 + 20);
  v63 = *(_BYTE *)v62;
  v64 = *(_QWORD *)(v62 + 8);
  LOBYTE(v104) = v63;
  v105 = v64;
  sub_100003304(&qword_10010CDA0);
  v65 = State.wrappedValue.getter(&v103);
  if (v103)
    v66 = 1.0;
  else
    v66 = 0.0;
  v67 = static UnitPoint.center.getter(v65);
  v69 = v68;
  v70 = v90;
  sub_100010CBC(v60, v90, &qword_10010FEE0);
  v71 = v70 + *(int *)(v92 + 36);
  *(double *)v71 = v66;
  *(double *)(v71 + 8) = v66;
  *(double *)(v71 + 16) = v67;
  *(_QWORD *)(v71 + 24) = v69;
  sub_100010ED0(v60, &qword_10010FEE0);
  v72 = v98;
  sub_100007878(v61, v98, type metadata accessor for APHighlightTitle);
  v73 = *(unsigned __int8 *)(v99 + 80);
  v74 = (v73 + 16) & ~v73;
  v75 = swift_allocObject(&unk_100100208, v74 + v100, v73 | 7);
  sub_100010F0C(v72, v75 + v74, type metadata accessor for APHighlightTitle);
  v76 = v95;
  sub_100010CBC(v70, v95, &qword_10010FEE8);
  v77 = (uint64_t (**)())(v76 + *(int *)(v97 + 36));
  *v77 = sub_1000835CC;
  v77[1] = (uint64_t (*)())v75;
  v77[2] = 0;
  v77[3] = 0;
  sub_100010ED0(v70, &qword_10010FEE8);
  return sub_10001A0AC(v76, v101, &qword_10010FEF0);
}

double sub_10007A3F8(uint64_t a1)
{
  uint64_t v2;
  double result;
  _QWORD v4[4];

  v2 = static Animation.interpolatingSpring(mass:stiffness:damping:initialVelocity:)(1.0, 350.0, 37.0, 1.0);
  v4[2] = a1;
  withAnimation<A>(_:_:)(v2, sub_1000835E0, v4, (char *)&type metadata for () + 8);
  *(_QWORD *)&result = swift_release(v2).n128_u64[0];
  return result;
}

uint64_t sub_10007A47C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  _QWORD *v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t result;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t KeyPath;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;

  v2 = v1;
  v4 = type metadata accessor for APHighlightSubtitle(0);
  v52 = *(_QWORD *)(v4 - 8);
  v5 = *(_QWORD *)(v52 + 64);
  v6 = __chkstk_darwin(v4);
  v51 = (uint64_t)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ScaleTransition(0, v6);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v44 - v12;
  v14 = (uint64_t *)(v2 + *(int *)(v4 + 24));
  v15 = v14[1];
  v54 = *v14;
  v55 = v15;
  v16 = sub_10001B308();
  swift_bridgeObjectRetain(v15);
  v17 = Text.init<A>(_:)(&v54, &type metadata for String, v16);
  v49 = v18;
  v50 = v17;
  LOBYTE(v15) = v19;
  v48 = v20;
  KeyPath = swift_getKeyPath(&unk_1000CC368);
  v47 = static Font.subheadline.getter();
  v45 = swift_getKeyPath(&unk_1000CC398);
  v21 = static Color.white.getter(v45);
  v22 = static UnitPoint.center.getter(v21);
  ScaleTransition.init(_:anchor:)(0.00001, v22, v23);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v13, v7);
  v24 = sub_1000035B4(&qword_10010FED0, (uint64_t (*)(uint64_t))&type metadata accessor for ScaleTransition, (uint64_t)&protocol conformance descriptor for ScaleTransition);
  v25 = AnyTransition.init<A>(_:)(v10, v7, v24);
  v57 = v15 & 1;
  v56 = 0;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
  v26 = v57;
  v27 = v56;
  v28 = v2 + *(int *)(v4 + 20);
  v29 = *(_BYTE *)v28;
  v30 = *(_QWORD *)(v28 + 8);
  LOBYTE(v54) = v29;
  v55 = v30;
  sub_100003304(&qword_10010CDA0);
  v31 = State.wrappedValue.getter(&v53);
  if ((_BYTE)v53)
    v32 = 1.0;
  else
    v32 = 0.0;
  v33 = static UnitPoint.center.getter(v31);
  v35 = v34;
  v36 = v51;
  sub_100007878(v2, v51, type metadata accessor for APHighlightSubtitle);
  v37 = *(unsigned __int8 *)(v52 + 80);
  v38 = (v37 + 16) & ~v37;
  v39 = swift_allocObject(&unk_1001001E0, v38 + v5, v37 | 7);
  result = sub_100010F0C(v36, v39 + v38, type metadata accessor for APHighlightSubtitle);
  v41 = v49;
  *(_QWORD *)a1 = v50;
  *(_QWORD *)(a1 + 8) = v41;
  *(_BYTE *)(a1 + 16) = v26;
  v42 = KeyPath;
  *(_QWORD *)(a1 + 24) = v48;
  *(_QWORD *)(a1 + 32) = v42;
  *(_QWORD *)(a1 + 40) = 2;
  *(_BYTE *)(a1 + 48) = v27;
  v43 = v47;
  *(_QWORD *)(a1 + 56) = v45;
  *(_QWORD *)(a1 + 64) = v43;
  *(_QWORD *)(a1 + 72) = v21;
  *(_QWORD *)(a1 + 80) = v25;
  *(double *)(a1 + 88) = v32;
  *(double *)(a1 + 96) = v32;
  *(double *)(a1 + 104) = v33;
  *(_QWORD *)(a1 + 112) = v35;
  *(_QWORD *)(a1 + 120) = sub_1000834C0;
  *(_QWORD *)(a1 + 128) = v39;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  return result;
}

double sub_10007A760(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  double result;
  _QWORD v5[4];

  v2 = static Animation.interpolatingSpring(mass:stiffness:damping:initialVelocity:)(1.0, 330.0, 28.0, 1.0);
  v3 = Animation.delay(_:)(0.12);
  swift_release(v2);
  v5[2] = a1;
  withAnimation<A>(_:_:)(v3, sub_1000834D4, v5, (char *)&type metadata for () + 8);
  *(_QWORD *)&result = swift_release(v3).n128_u64[0];
  return result;
}

uint64_t sub_10007A7F4(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  char *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[9];
  uint64_t v8;

  v2 = (char *)(a1 + *(int *)(a2(0) + 20));
  v3 = *v2;
  v4 = *((_QWORD *)v2 + 1);
  v7[1] = v3;
  v8 = v4;
  v7[0] = 1;
  v5 = sub_100003304(&qword_10010CDA0);
  return State.wrappedValue.setter(v7, v5);
}

double sub_10007A868()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  double v8;
  uint64_t v10;

  v0 = type metadata accessor for DynamicTypeSize(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v6 = (char *)&v10 - v5;
  sub_100030ED8((uint64_t *)((char *)&v10 - v5));
  (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v3, v6, v0);
  v7 = (*(uint64_t (**)(char *, uint64_t))(v1 + 88))(v3, v0);
  if ((_DWORD)v7 == enum case for DynamicTypeSize.xLarge(_:))
  {
    v8 = 43.0;
  }
  else if ((_DWORD)v7 == enum case for DynamicTypeSize.xxLarge(_:))
  {
    v8 = 45.0;
  }
  else if ((_DWORD)v7 == enum case for DynamicTypeSize.xxxLarge(_:))
  {
    v8 = 48.0;
  }
  else
  {
    if ((DynamicTypeSize.isAccessibilitySize.getter(v7) & 1) != 0)
      v8 = 50.0;
    else
      v8 = 42.0;
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
  (*(void (**)(char *, uint64_t))(v1 + 8))(v6, v0);
  return v8;
}

void sub_10007A9C8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  _QWORD v18[4];
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;

  v34 = a2;
  v22 = sub_100003304(&qword_10010FEA8);
  __chkstk_darwin(v22);
  v29 = sub_100003304(&qword_10010FE68);
  __chkstk_darwin(v29);
  v24 = (char *)v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for MediaArtwork(0);
  v23 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v18[3] = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v18[2] = (char *)v18 - v6;
  v21 = type metadata accessor for PlayerAvatarView(0);
  __chkstk_darwin(v21);
  v18[1] = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_100003304(&qword_10010FEB0);
  __chkstk_darwin(v31);
  v33 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_100003304(&qword_10010FEB8);
  __chkstk_darwin(v26);
  v28 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100003304(&qword_10010FEC0);
  __chkstk_darwin(v19);
  v27 = sub_100003304(&qword_10010FE00);
  __chkstk_darwin(v27);
  v20 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_100003304(&qword_10010FDF0);
  __chkstk_darwin(v32);
  v30 = (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Image.ResizingMode(0);
  __chkstk_darwin(v12);
  v13 = type metadata accessor for AccessPointIconType(0);
  __chkstk_darwin(v13);
  v15 = (char *)v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for APHighlightIcon(0);
  sub_100007878(a1 + *(int *)(v16 + 24), (uint64_t)v15, type metadata accessor for AccessPointIconType);
  v17 = (char *)sub_10007AD38 + 4 * word_1000CBD8C[swift_getEnumCaseMultiPayload(v15, v13)];
  __asm { BR              X10 }
}

void sub_10007AD38()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;

  v6 = ((uint64_t (*)(_QWORD, _QWORD))Image.init(_internalSystemName:))(*v1, v1[1]);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v4, enum case for Image.ResizingMode.stretch(_:), v2);
  v7 = Image.resizable(capInsets:resizingMode:)(v4, v6, 0.0, 0.0, 0.0, 0.0);
  v8 = swift_release(v6);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(v3 + 8))(v4, v2, v8);
  v10 = static Color.primary.getter(v9);
  v11 = static Edge.Set.all.getter(v10);
  v12 = EdgeInsets.init(_all:)(10.0);
  v14 = v13;
  v16 = v15;
  v18 = v17;
  v19 = ((uint64_t (*)(void))static Color.black.getter)();
  v20 = Color.opacity(_:)(0.4);
  swift_release(v19);
  v22 = static Edge.Set.all.getter(v21);
  *(_QWORD *)v0 = v7;
  *(_QWORD *)(v0 + 8) = 0;
  *(_WORD *)(v0 + 16) = 257;
  *(_QWORD *)(v0 + 24) = v10;
  *(_BYTE *)(v0 + 32) = v11;
  *(double *)(v0 + 40) = v12;
  *(_QWORD *)(v0 + 48) = v14;
  *(_QWORD *)(v0 + 56) = v16;
  *(_QWORD *)(v0 + 64) = v18;
  *(_BYTE *)(v0 + 72) = 0;
  *(_QWORD *)(v0 + 80) = v20;
  *(_BYTE *)(v0 + 88) = v22;
  swift_storeEnumTagMultiPayload(v0, *(_QWORD *)(v5 - 320), 0);
  swift_retain(v7);
  swift_retain(v10);
  swift_retain(v20);
  v23 = sub_100003304(&qword_10010FE10);
  v24 = sub_100083148();
  v25 = sub_1000035B4(&qword_10010FE58, type metadata accessor for PlayerAvatarView, (uint64_t)&unk_1000CDAA8);
  v26 = *(_QWORD *)(v5 - 312);
  _ConditionalContent<>.init(storage:)(v0, v23, *(_QWORD *)(v5 - 304), v24, v25);
  v27 = *(_QWORD *)(v5 - 248);
  sub_100010CBC(v26, v27, &qword_10010FE00);
  swift_storeEnumTagMultiPayload(v27, *(_QWORD *)(v5 - 264), 0);
  v28 = sub_1000830C4();
  v29 = sub_100083290();
  v30 = *(_QWORD *)(v5 - 232);
  _ConditionalContent<>.init(storage:)(v27, *(_QWORD *)(v5 - 256), *(_QWORD *)(v5 - 240), v28, v29);
  sub_100010ED0(v26, &qword_10010FE00);
  v31 = *(_QWORD *)(v5 - 208);
  sub_100010CBC(v30, v31, &qword_10010FDF0);
  swift_storeEnumTagMultiPayload(v31, *(_QWORD *)(v5 - 224), 0);
  v32 = sub_100003304(&qword_10010FE90);
  v33 = sub_100083058();
  v34 = sub_100083334(&qword_10010FE88, &qword_10010FE90, (uint64_t)&protocol witness table for EmptyView, (uint64_t)&protocol conformance descriptor for <> _ConditionalContent<A, B>);
  _ConditionalContent<>.init(storage:)(v31, *(_QWORD *)(v5 - 216), v32, v33, v34);
  sub_100010ED0(v30, &qword_10010FDF0);
  swift_release(v20);
  swift_release(v10);
  swift_release(v7);
}

uint64_t sub_10007B8F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;

  sub_1000509C8(0, &qword_10010E3C0, NSKeyedUnarchiver_ptr);
  v4 = sub_1000509C8(0, &qword_10010FEC8, UIImage_ptr);
  result = static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v4, a1, a2, v4);
  if (!result)
  {
    if (qword_10010BAA0 != -1)
      swift_once(&qword_10010BAA0, sub_100004DCC);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_100004E8C(v6, (uint64_t)qword_1001232D8);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "banner image could not be deserialized", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

    return 0;
  }
  return result;
}

uint64_t sub_10007BBB4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;

  v2 = v1;
  v49 = a1;
  v3 = type metadata accessor for APHighlightIcon(0);
  v43 = *(_QWORD *)(v3 - 8);
  v4 = *(_QWORD *)(v43 + 64);
  __chkstk_darwin(v3);
  v46 = (uint64_t)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = sub_100003304(&qword_10010FDA8);
  v5 = __chkstk_darwin(v48);
  v7 = (uint64_t *)((char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for OpacityTransition(0, v5);
  v44 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v43 - v12;
  v14 = sub_100003304(&qword_10010FDB0);
  __chkstk_darwin(v14);
  v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_100003304(&qword_10010FDB8);
  __chkstk_darwin(v47);
  v18 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v45 = (uint64_t)&v43 - v20;
  v21 = v2 + *(int *)(v3 + 20);
  v22 = *(_BYTE *)v21;
  v23 = *(_QWORD *)(v21 + 8);
  v50 = v22;
  v51 = v23;
  sub_100003304(&qword_10010CDA0);
  v24 = State.wrappedValue.getter(&v52);
  if (v52 == 1)
  {
    sub_10007A9C8(v2, (uint64_t)v16);
    OpacityTransition.init()();
    v25 = v44;
    (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v10, v13, v8);
    v26 = sub_1000035B4(&qword_10010FEA0, (uint64_t (*)(uint64_t))&type metadata accessor for OpacityTransition, (uint64_t)&protocol conformance descriptor for OpacityTransition);
    v27 = AnyTransition.init<A>(_:)(v10, v8, v26);
    sub_100010CBC((uint64_t)v16, (uint64_t)v18, &qword_10010FDB0);
    v28 = v47;
    *(_QWORD *)&v18[*(int *)(v47 + 36)] = v27;
    (*(void (**)(char *, uint64_t))(v25 + 8))(v13, v8);
    sub_100010ED0((uint64_t)v16, &qword_10010FDB0);
    v29 = (uint64_t)v18;
    v30 = v45;
    sub_10001A0AC(v29, v45, &qword_10010FDB8);
    sub_100010CBC(v30, (uint64_t)v7, &qword_10010FDB8);
    swift_storeEnumTagMultiPayload(v7, v48, 0);
    v31 = sub_100003304(&qword_10010FDC0);
    v32 = sub_100082EDC();
    v33 = sub_1000833B8(&qword_10010FE98, &qword_10010FDC0);
    _ConditionalContent<>.init(storage:)(v7, v28, v31, v32, v33);
    return sub_100010ED0(v30, &qword_10010FDB8);
  }
  else
  {
    v35 = static Color.clear.getter(v24);
    v36 = v46;
    sub_100007878(v2, v46, type metadata accessor for APHighlightIcon);
    v37 = *(unsigned __int8 *)(v43 + 80);
    v38 = (v37 + 16) & ~v37;
    v39 = swift_allocObject(&unk_1001001B8, v38 + v4, v37 | 7);
    sub_100010F0C(v36, v39 + v38, type metadata accessor for APHighlightIcon);
    *v7 = v35;
    v7[1] = (uint64_t)sub_100082E88;
    v7[3] = 0;
    v7[4] = 0;
    v7[2] = v39;
    swift_storeEnumTagMultiPayload(v7, v48, 1);
    v40 = sub_100003304(&qword_10010FDC0);
    v41 = sub_100082EDC();
    v42 = sub_1000833B8(&qword_10010FE98, &qword_10010FDC0);
    return _ConditionalContent<>.init(storage:)(v7, v47, v40, v41, v42);
  }
}

double sub_10007BFBC(uint64_t a1, __n128 a2, __n128 a3)
{
  uint64_t v4;
  uint64_t v5;
  double result;
  _QWORD v7[4];

  a3.n128_u64[0] = 0x3FE999999999999ALL;
  a2.n128_u64[0] = 0.5;
  v4 = static Animation.spring(response:dampingFraction:blendDuration:)(a2, a3, 0.0);
  v5 = Animation.delay(_:)(0.12);
  swift_release(v4);
  v7[2] = a1;
  withAnimation<A>(_:_:)(v5, sub_100083430, v7, (char *)&type metadata for () + 8);
  *(_QWORD *)&result = swift_release(v5).n128_u64[0];
  return result;
}

void sub_10007C04C()
{
  qword_1001233B0 = 0x4074000000000000;
}

uint64_t sub_10007C05C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

uint64_t sub_10007C064()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtCV13GameOverlayUI29AccessPointHighlightComponent14GestureHandler___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10007C0B4()
{
  return type metadata accessor for AccessPointHighlightComponent.GestureHandler(0);
}

uint64_t type metadata accessor for AccessPointHighlightComponent.GestureHandler(uint64_t a1)
{
  return sub_100010C88(a1, qword_10010F830, (uint64_t)&nominal type descriptor for AccessPointHighlightComponent.GestureHandler);
}

uint64_t sub_10007C0D0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_1000CBE18;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

_QWORD *sub_10007C148(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    v8 = a2[6];
    v4[5] = a2[5];
    v4[6] = v8;
    v9 = a2[8];
    v4[7] = a2[7];
    v4[8] = v9;
    v10 = a3[7];
    v11 = (char *)v4 + v10;
    v12 = (char *)a2 + v10;
    v13 = type metadata accessor for AccessPointIconType(0);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    if (!v14(v12, 1, v13))
    {
      v17 = (char *)&loc_10007C260 + 4 * byte_1000CBD96[swift_getEnumCaseMultiPayload(v12, v13)];
      __asm { BR              X10 }
    }
    v15 = sub_100003304(&qword_10010CA70);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    v18 = a3[8];
    v19 = (char *)v4 + v18;
    v20 = (char *)a2 + v18;
    if (!v14((char *)a2 + v18, 1, v13))
    {
      v22 = (char *)&loc_10007C370 + 4 * byte_1000CBD9B[swift_getEnumCaseMultiPayload(v20, v13)];
      __asm { BR              X10 }
    }
    v21 = sub_100003304(&qword_10010CA70);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    v23 = a3[9];
    v24 = a3[10];
    v25 = (char *)v4 + v23;
    v26 = (uint64_t)a2 + v23;
    *(_QWORD *)v25 = *(_QWORD *)v26;
    v25[8] = *(_BYTE *)(v26 + 8);
    *((_BYTE *)v4 + v24) = *((_BYTE *)a2 + v24);
    v27 = a3[11];
    v28 = (char *)v4 + v27;
    v29 = (uint64_t)a2 + v27;
    v30 = *(uint64_t *)((char *)a2 + v27 + 24);
    if (v30)
    {
      v31 = *(_QWORD *)(v29 + 32);
      *((_QWORD *)v28 + 3) = v30;
      *((_QWORD *)v28 + 4) = v31;
      (**(void (***)(void))(v30 - 8))();
    }
    else
    {
      v32 = *(_OWORD *)(v29 + 16);
      *(_OWORD *)v28 = *(_OWORD *)v29;
      *((_OWORD *)v28 + 1) = v32;
      *((_QWORD *)v28 + 4) = *(_QWORD *)(v29 + 32);
    }
    v33 = a3[12];
    v34 = (char *)v4 + v33;
    v35 = (char *)a2 + v33;
    v36 = type metadata accessor for ImpressionMetrics(0);
    v37 = *(_QWORD *)(v36 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
    {
      v38 = sub_100003304(&qword_10010C220);
      memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v34, v35, v36);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
    }
    v39 = a3[14];
    *((_BYTE *)v4 + a3[13]) = *((_BYTE *)a2 + a3[13]);
    *((_BYTE *)v4 + v39) = *((_BYTE *)a2 + v39);
    *(_QWORD *)((char *)v4 + a3[15]) = *(uint64_t *)((char *)a2 + a3[15]);
  }
  return v4;
}

uint64_t sub_10007C578(uint64_t a1, int *a2)
{
  SEL v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  SEL v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(uint64_t, uint64_t, uint64_t);
  __n128 v21;
  const char *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  const char *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t result;

  sub_100004624((_QWORD *)a1);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 48), v4, v5, v6, v7, v8, v9, v10);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 64), v11, v12, v13, v14, v15, v16, v17);
  v18 = a1 + a2[7];
  v19 = type metadata accessor for AccessPointIconType(0);
  v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 48);
  if (!v20(v18, 1, v19))
  {
    switch(swift_getEnumCaseMultiPayload(v18, v19))
    {
      case 0u:
      case 1u:
      case 3u:
        swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v18 + 8), v22, v23, v24, v25, v26, v27, v28);
        break;
      case 2u:
        v29 = type metadata accessor for MediaArtwork(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 8))(v18, v29);
        break;
      case 4u:
        v30 = *(_QWORD *)(v18 + 8);
        if (v30 >> 60 != 15)
          v21.n128_f64[0] = sub_100038198(*(_QWORD *)v18, v30);
        break;
      default:
        break;
    }
  }
  v31 = a1 + a2[8];
  if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t, __n128))v20)(v31, 1, v19, v21))
  {
    switch(swift_getEnumCaseMultiPayload(v31, v19))
    {
      case 0u:
      case 1u:
      case 3u:
        swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v31 + 8), v32, v33, v34, v35, v36, v37, v38);
        break;
      case 2u:
        v39 = type metadata accessor for MediaArtwork(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 8))(v31, v39);
        break;
      case 4u:
        v40 = *(_QWORD *)(v31 + 8);
        if (v40 >> 60 != 15)
          sub_100038198(*(_QWORD *)v31, v40);
        break;
      default:
        break;
    }
  }
  v41 = (_QWORD *)(a1 + a2[11]);
  if (v41[3])
    sub_100004624(v41);
  v42 = a1 + a2[12];
  v43 = type metadata accessor for ImpressionMetrics(0);
  v44 = *(_QWORD *)(v43 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v44 + 8))(v42, v43);
  return result;
}

uint64_t sub_10007C754(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  unsigned int (*v13)(const void *, uint64_t, uint64_t);
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  void *v32;
  const void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  v8 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v8;
  v9 = a3[7];
  v10 = (void *)(a1 + v9);
  v11 = (const void *)(a2 + v9);
  v12 = type metadata accessor for AccessPointIconType(0);
  v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  if (!v13(v11, 1, v12))
  {
    v15 = (char *)&loc_10007C838 + 4 * byte_1000CBDAA[swift_getEnumCaseMultiPayload(v11, v12)];
    __asm { BR              X10 }
  }
  v14 = sub_100003304(&qword_10010CA70);
  memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  v16 = a3[8];
  v17 = (void *)(a1 + v16);
  v18 = (const void *)(a2 + v16);
  if (!v13((const void *)(a2 + v16), 1, v12))
  {
    v20 = (char *)&loc_10007C948 + 4 * byte_1000CBDAF[swift_getEnumCaseMultiPayload(v18, v12)];
    __asm { BR              X10 }
  }
  v19 = sub_100003304(&qword_10010CA70);
  memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  v21 = a3[9];
  v22 = a3[10];
  v23 = a1 + v21;
  v24 = a2 + v21;
  *(_QWORD *)v23 = *(_QWORD *)v24;
  *(_BYTE *)(v23 + 8) = *(_BYTE *)(v24 + 8);
  *(_BYTE *)(a1 + v22) = *(_BYTE *)(a2 + v22);
  v25 = a3[11];
  v26 = a1 + v25;
  v27 = a2 + v25;
  v28 = *(_QWORD *)(a2 + v25 + 24);
  if (v28)
  {
    v29 = *(_QWORD *)(v27 + 32);
    *(_QWORD *)(v26 + 24) = v28;
    *(_QWORD *)(v26 + 32) = v29;
    (**(void (***)(void))(v28 - 8))();
  }
  else
  {
    v30 = *(_OWORD *)(v27 + 16);
    *(_OWORD *)v26 = *(_OWORD *)v27;
    *(_OWORD *)(v26 + 16) = v30;
    *(_QWORD *)(v26 + 32) = *(_QWORD *)(v27 + 32);
  }
  v31 = a3[12];
  v32 = (void *)(a1 + v31);
  v33 = (const void *)(a2 + v31);
  v34 = type metadata accessor for ImpressionMetrics(0);
  v35 = *(_QWORD *)(v34 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
  {
    v36 = sub_100003304(&qword_10010C220);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v35 + 16))(v32, v33, v34);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
  }
  v37 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + v37) = *(_BYTE *)(a2 + v37);
  *(_QWORD *)(a1 + a3[15]) = *(_QWORD *)(a2 + a3[15]);
  return a1;
}

char *sub_10007CB50(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  _TtC13GameOverlayUI20GameOverlayUIService *v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  _TtC13GameOverlayUI20GameOverlayUIService *v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t (*v28)(char *, uint64_t, uint64_t);
  int v29;
  int v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  int v37;
  int v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(char *, uint64_t, uint64_t);
  int v58;
  int v59;
  uint64_t v60;

  sub_100012CF4(a1, a2);
  *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
  v6 = *((_QWORD *)a2 + 6);
  v7 = (_TtC13GameOverlayUI20GameOverlayUIService *)*((_QWORD *)a1 + 6);
  *((_QWORD *)a1 + 6) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7, v8, v9, v10, v11, v12, v13, v14);
  *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
  v15 = *((_QWORD *)a2 + 8);
  v16 = (_TtC13GameOverlayUI20GameOverlayUIService *)*((_QWORD *)a1 + 8);
  *((_QWORD *)a1 + 8) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16, v17, v18, v19, v20, v21, v22, v23);
  v24 = a3[7];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v27 = type metadata accessor for AccessPointIconType(0);
  v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 48);
  v29 = v28(v25, 1, v27);
  v30 = v28(v26, 1, v27);
  if (v29)
  {
    if (!v30)
    {
      v31 = (char *)&loc_10007CC34 + 4 * byte_1000CBDB4[swift_getEnumCaseMultiPayload(v26, v27)];
      __asm { BR              X10 }
    }
    goto LABEL_6;
  }
  if (v30)
  {
    sub_1000106F0((uint64_t)v25, type metadata accessor for AccessPointIconType);
LABEL_6:
    v32 = sub_100003304(&qword_10010CA70);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_9;
  }
  if (a1 != a2)
  {
    sub_1000106F0((uint64_t)v25, type metadata accessor for AccessPointIconType);
    v33 = (char *)&loc_10007CCC4 + 4 * word_1000CBDBA[swift_getEnumCaseMultiPayload(v26, v27)];
    __asm { BR              X10 }
  }
LABEL_9:
  v34 = a3[8];
  v35 = &a1[v34];
  v36 = &a2[v34];
  v37 = v28(&a1[v34], 1, v27);
  v38 = v28(v36, 1, v27);
  if (v37)
  {
    if (!v38)
    {
      v39 = (char *)&loc_10007CDE8 + 4 * byte_1000CBDC4[swift_getEnumCaseMultiPayload(v36, v27)];
      __asm { BR              X10 }
    }
    goto LABEL_14;
  }
  if (v38)
  {
    sub_1000106F0((uint64_t)v35, type metadata accessor for AccessPointIconType);
LABEL_14:
    v40 = sub_100003304(&qword_10010CA70);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    goto LABEL_17;
  }
  if (a1 != a2)
  {
    sub_1000106F0((uint64_t)v35, type metadata accessor for AccessPointIconType);
    v41 = (char *)&loc_10007CE84 + 4 * byte_1000CBDC9[swift_getEnumCaseMultiPayload(v36, v27)];
    __asm { BR              X10 }
  }
LABEL_17:
  v42 = a3[9];
  v43 = &a1[v42];
  v44 = &a2[v42];
  v45 = *(_QWORD *)v44;
  v43[8] = v44[8];
  *(_QWORD *)v43 = v45;
  a1[a3[10]] = a2[a3[10]];
  v46 = a3[11];
  v47 = &a1[v46];
  v48 = &a2[v46];
  v49 = *(_QWORD *)&a2[v46 + 24];
  if (*(_QWORD *)&a1[v46 + 24])
  {
    if (v49)
    {
      sub_100012CF4(v47, v48);
      goto LABEL_24;
    }
    sub_100004624(v47);
  }
  else if (v49)
  {
    *((_QWORD *)v47 + 3) = v49;
    *((_QWORD *)v47 + 4) = *((_QWORD *)v48 + 4);
    (**(void (***)(char *, char *))(v49 - 8))(v47, v48);
    goto LABEL_24;
  }
  v50 = *(_OWORD *)v48;
  v51 = *((_OWORD *)v48 + 1);
  *((_QWORD *)v47 + 4) = *((_QWORD *)v48 + 4);
  *(_OWORD *)v47 = v50;
  *((_OWORD *)v47 + 1) = v51;
LABEL_24:
  v52 = a3[12];
  v53 = &a1[v52];
  v54 = &a2[v52];
  v55 = type metadata accessor for ImpressionMetrics(0);
  v56 = *(_QWORD *)(v55 - 8);
  v57 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v56 + 48);
  v58 = v57(v53, 1, v55);
  v59 = v57(v54, 1, v55);
  if (!v58)
  {
    if (!v59)
    {
      (*(void (**)(char *, char *, uint64_t))(v56 + 24))(v53, v54, v55);
      goto LABEL_30;
    }
    (*(void (**)(char *, uint64_t))(v56 + 8))(v53, v55);
    goto LABEL_29;
  }
  if (v59)
  {
LABEL_29:
    v60 = sub_100003304(&qword_10010C220);
    memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    goto LABEL_30;
  }
  (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v53, v54, v55);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v53, 0, 1, v55);
LABEL_30:
  a1[a3[13]] = a2[a3[13]];
  a1[a3[14]] = a2[a3[14]];
  *(_QWORD *)&a1[a3[15]] = *(_QWORD *)&a2[a3[15]];
  return a1;
}

void sub_10007D124()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *v1 = *v2;
  v3 = v2[1];
  v1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_storeEnumTagMultiPayload(v1, v0, 1);
  JUMPOUT(0x10007CD88);
}

void sub_10007D14C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = type metadata accessor for MediaArtwork(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v1, v2, v3);
  swift_storeEnumTagMultiPayload(v1, v0, 2);
  JUMPOUT(0x10007CD88);
}

void sub_10007D180()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *v1 = *v2;
  v3 = v2[1];
  v1[1] = v3;
  v1[2] = v2[2];
  swift_bridgeObjectRetain(v3);
  swift_storeEnumTagMultiPayload(v1, v0, 3);
  JUMPOUT(0x10007CD88);
}

void sub_10007D1B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v2 + 8);
  if (v3 >> 60 == 15)
  {
    *(_OWORD *)v1 = *(_OWORD *)v2;
  }
  else
  {
    v4 = *(_QWORD *)v2;
    sub_100019F94(v4, v3);
    *(_QWORD *)v1 = v4;
    *(_QWORD *)(v1 + 8) = v3;
  }
  swift_storeEnumTagMultiPayload(v1, v0, 4);
  JUMPOUT(0x10007CD88);
}

uint64_t sub_10007D2C4(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(const void *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  void *v29;
  const void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v7 = a3[7];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for AccessPointIconType(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  if (v12(v9, 1, v10))
  {
    v13 = sub_100003304(&qword_10010CA70);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(v9, v10) == 2)
    {
      v14 = type metadata accessor for MediaArtwork(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v8, v9, v14);
      swift_storeEnumTagMultiPayload(v8, v10, 2);
    }
    else
    {
      memcpy(v8, v9, *(_QWORD *)(v11 + 64));
    }
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v15 = a3[8];
  v16 = (void *)(a1 + v15);
  v17 = (const void *)(a2 + v15);
  if (v12((const void *)(a2 + v15), 1, v10))
  {
    v18 = sub_100003304(&qword_10010CA70);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(v17, v10) == 2)
    {
      v19 = type metadata accessor for MediaArtwork(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v16, v17, v19);
      swift_storeEnumTagMultiPayload(v16, v10, 2);
    }
    else
    {
      memcpy(v16, v17, *(_QWORD *)(v11 + 64));
    }
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v16, 0, 1, v10);
  }
  v20 = a3[9];
  v21 = a3[10];
  v22 = a1 + v20;
  v23 = a2 + v20;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  *(_BYTE *)(a1 + v21) = *(_BYTE *)(a2 + v21);
  v24 = a3[11];
  v25 = a3[12];
  v26 = a1 + v24;
  v27 = a2 + v24;
  v28 = *(_OWORD *)(v27 + 16);
  *(_OWORD *)v26 = *(_OWORD *)v27;
  *(_OWORD *)(v26 + 16) = v28;
  *(_QWORD *)(v26 + 32) = *(_QWORD *)(v27 + 32);
  v29 = (void *)(a1 + v25);
  v30 = (const void *)(a2 + v25);
  v31 = type metadata accessor for ImpressionMetrics(0);
  v32 = *(_QWORD *)(v31 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
  {
    v33 = sub_100003304(&qword_10010C220);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v32 + 32))(v29, v30, v31);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
  }
  v34 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + v34) = *(_BYTE *)(a2 + v34);
  *(_QWORD *)(a1 + a3[15]) = *(_QWORD *)(a2 + a3[15]);
  return a1;
}

uint64_t sub_10007D580(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  _TtC13GameOverlayUI20GameOverlayUIService *v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  _TtC13GameOverlayUI20GameOverlayUIService *v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(void *, uint64_t, uint64_t);
  int v30;
  int v31;
  uint64_t v32;
  size_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  int v38;
  int v39;
  uint64_t v40;
  size_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  void *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(void *, uint64_t, uint64_t);
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;

  sub_100004624((_QWORD *)a1);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v7 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease(v7, v8, v9, v10, v11, v12, v13, v14);
  v15 = *(_QWORD *)(a2 + 64);
  v16 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v15;
  swift_bridgeObjectRelease(v16, v17, v18, v19, v20, v21, v22, v23);
  v24 = a3[7];
  v25 = (void *)(a1 + v24);
  v26 = (void *)(a2 + v24);
  v27 = type metadata accessor for AccessPointIconType(0);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v28 + 48);
  v30 = v29(v25, 1, v27);
  v31 = v29(v26, 1, v27);
  if (!v30)
  {
    if (!v31)
    {
      if (a1 == a2)
        goto LABEL_14;
      sub_1000106F0((uint64_t)v25, type metadata accessor for AccessPointIconType);
      if (swift_getEnumCaseMultiPayload(v26, v27) == 2)
      {
        v34 = type metadata accessor for MediaArtwork(0);
        (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v25, v26, v34);
        swift_storeEnumTagMultiPayload(v25, v27, 2);
        goto LABEL_14;
      }
      v33 = *(_QWORD *)(v28 + 64);
LABEL_8:
      memcpy(v25, v26, v33);
      goto LABEL_14;
    }
    sub_1000106F0((uint64_t)v25, type metadata accessor for AccessPointIconType);
LABEL_7:
    v33 = *(_QWORD *)(*(_QWORD *)(sub_100003304(&qword_10010CA70) - 8) + 64);
    goto LABEL_8;
  }
  if (v31)
    goto LABEL_7;
  if (swift_getEnumCaseMultiPayload(v26, v27) == 2)
  {
    v32 = type metadata accessor for MediaArtwork(0);
    (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v25, v26, v32);
    swift_storeEnumTagMultiPayload(v25, v27, 2);
  }
  else
  {
    memcpy(v25, v26, *(_QWORD *)(v28 + 64));
  }
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
LABEL_14:
  v35 = a3[8];
  v36 = (void *)(a1 + v35);
  v37 = (void *)(a2 + v35);
  v38 = v29((void *)(a1 + v35), 1, v27);
  v39 = v29(v37, 1, v27);
  if (v38)
  {
    if (!v39)
    {
      if (swift_getEnumCaseMultiPayload(v37, v27) == 2)
      {
        v40 = type metadata accessor for MediaArtwork(0);
        (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v40 - 8) + 32))(v36, v37, v40);
        swift_storeEnumTagMultiPayload(v36, v27, 2);
      }
      else
      {
        memcpy(v36, v37, *(_QWORD *)(v28 + 64));
      }
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v36, 0, 1, v27);
      goto LABEL_27;
    }
    goto LABEL_20;
  }
  if (v39)
  {
    sub_1000106F0((uint64_t)v36, type metadata accessor for AccessPointIconType);
LABEL_20:
    v41 = *(_QWORD *)(*(_QWORD *)(sub_100003304(&qword_10010CA70) - 8) + 64);
LABEL_21:
    memcpy(v36, v37, v41);
    goto LABEL_27;
  }
  if (a1 != a2)
  {
    sub_1000106F0((uint64_t)v36, type metadata accessor for AccessPointIconType);
    if (swift_getEnumCaseMultiPayload(v37, v27) != 2)
    {
      v41 = *(_QWORD *)(v28 + 64);
      goto LABEL_21;
    }
    v42 = type metadata accessor for MediaArtwork(0);
    (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(v36, v37, v42);
    swift_storeEnumTagMultiPayload(v36, v27, 2);
  }
LABEL_27:
  v43 = a3[9];
  v44 = a3[10];
  v45 = a1 + v43;
  v46 = a2 + v43;
  *(_QWORD *)v45 = *(_QWORD *)v46;
  *(_BYTE *)(v45 + 8) = *(_BYTE *)(v46 + 8);
  *(_BYTE *)(a1 + v44) = *(_BYTE *)(a2 + v44);
  v47 = a3[11];
  v48 = a1 + v47;
  v49 = a2 + v47;
  if (*(_QWORD *)(a1 + v47 + 24))
    sub_100004624((_QWORD *)v48);
  v50 = *(_OWORD *)(v49 + 16);
  *(_OWORD *)v48 = *(_OWORD *)v49;
  *(_OWORD *)(v48 + 16) = v50;
  *(_QWORD *)(v48 + 32) = *(_QWORD *)(v49 + 32);
  v51 = a3[12];
  v52 = (void *)(a1 + v51);
  v53 = (void *)(a2 + v51);
  v54 = type metadata accessor for ImpressionMetrics(0);
  v55 = *(_QWORD *)(v54 - 8);
  v56 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v55 + 48);
  v57 = v56(v52, 1, v54);
  v58 = v56(v53, 1, v54);
  if (!v57)
  {
    if (!v58)
    {
      (*(void (**)(void *, void *, uint64_t))(v55 + 40))(v52, v53, v54);
      goto LABEL_35;
    }
    (*(void (**)(void *, uint64_t))(v55 + 8))(v52, v54);
    goto LABEL_34;
  }
  if (v58)
  {
LABEL_34:
    v59 = sub_100003304(&qword_10010C220);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    goto LABEL_35;
  }
  (*(void (**)(void *, void *, uint64_t))(v55 + 32))(v52, v53, v54);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
LABEL_35:
  v60 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + v60) = *(_BYTE *)(a2 + v60);
  *(_QWORD *)(a1 + a3[15]) = *(_QWORD *)(a2 + a3[15]);
  return a1;
}

uint64_t sub_10007D9D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007D9E4);
}

uint64_t sub_10007D9E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100003304(&qword_10010CA70);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 28);
    }
    else
    {
      v10 = sub_100003304(&qword_10010C220);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 48);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_10007DA8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10007DA98);
}

uint64_t sub_10007DA98(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v8 = sub_100003304(&qword_10010CA70);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 28);
    }
    else
    {
      v10 = sub_100003304(&qword_10010C220);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 48);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for AccessPointHighlight(uint64_t a1)
{
  return sub_100010C88(a1, (uint64_t *)&unk_10010F918, (uint64_t)&nominal type descriptor for AccessPointHighlight);
}

void sub_10007DB50(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  char *v15;

  v6[0] = "(";
  v6[1] = &unk_1000CBE70;
  v6[2] = &unk_1000CBE70;
  sub_10001DD8C(319, (unint64_t *)&unk_10010F928, type metadata accessor for AccessPointIconType, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v3 <= 0x3F)
  {
    v7 = *(_QWORD *)(v2 - 8) + 64;
    v8 = v7;
    v9 = &unk_1000CBE88;
    v10 = &unk_1000CBEA0;
    v11 = &unk_1000CBEB8;
    sub_10001DD8C(319, (unint64_t *)&unk_10010C4C8, (uint64_t (*)(uint64_t))&type metadata accessor for ImpressionMetrics, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    if (v5 <= 0x3F)
    {
      v12 = *(_QWORD *)(v4 - 8) + 64;
      v13 = &unk_1000CBED0;
      v14 = &unk_1000CBED0;
      v15 = (char *)&value witness table for Builtin.Int64 + 64;
      swift_initStructMetadata(a1, 256, 12, v6, a1 + 16);
    }
  }
}

uint64_t sub_10007DC54()
{
  return sub_1000035B4(&qword_10010F980, type metadata accessor for AccessPointHighlight, (uint64_t)&unk_1000CBF10);
}

uint64_t sub_10007DC80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v20;

  v3 = type metadata accessor for DynamicTypeSize(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (uint64_t *)((char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for AccessPointHighlightComponent(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AccessPointHighlight(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(unsigned __int8 *)(a1 + *(int *)(v13 + 40));
  if (v14 == 2)
  {
    sub_100007878(a1, (uint64_t)v12, type metadata accessor for AccessPointHighlight);
LABEL_10:
    sub_1000106F0((uint64_t)v12, type metadata accessor for AccessPointHighlight);
    sub_100007878(v1, (uint64_t)v9, type metadata accessor for AccessPointHighlightComponent);
LABEL_11:
    v18 = 1;
    goto LABEL_12;
  }
  sub_100007878(a1, (uint64_t)v12, type metadata accessor for AccessPointHighlight);
  if ((v14 & 1) == 0)
    goto LABEL_10;
  v15 = *((_QWORD *)v12 + 6);
  if (!v15)
    goto LABEL_10;
  if ((v15 & 0x2000000000000000) != 0)
    v16 = HIBYTE(v15) & 0xF;
  else
    v16 = *((_QWORD *)v12 + 5) & 0xFFFFFFFFFFFFLL;
  sub_1000106F0((uint64_t)v12, type metadata accessor for AccessPointHighlight);
  sub_100007878(v1, (uint64_t)v9, type metadata accessor for AccessPointHighlightComponent);
  if (!v16)
    goto LABEL_11;
  v17 = sub_100030ED8(v6);
  v18 = DynamicTypeSize.isAccessibilitySize.getter(v17);
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
LABEL_12:
  sub_1000106F0((uint64_t)v9, type metadata accessor for AccessPointHighlightComponent);
  return v18 & 1;
}

uint64_t sub_10007DE44(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t result;
  double v11;
  uint64_t v12;
  char v13;
  void (*v14)(_QWORD *, uint64_t);
  int v15;
  uint64_t v16;
  double v17;
  uint64_t v18;

  v2 = type metadata accessor for DynamicTypeSize(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v18 - v7);
  v9 = type metadata accessor for AccessPointHighlight(0);
  result = 0;
  if ((*(_BYTE *)(a1 + *(int *)(v9 + 40)) & 1) == 0)
  {
    if (qword_10010BB70 != -1)
      swift_once(&qword_10010BB70, sub_10007C04C);
    v11 = *(double *)&qword_1001233B0;
    type metadata accessor for AccessPointHighlightComponent(0);
    v12 = sub_100030ED8(v8);
    v13 = DynamicTypeSize.isAccessibilitySize.getter(v12);
    v14 = *(void (**)(_QWORD *, uint64_t))(v3 + 8);
    v14(v8, v2);
    if ((v13 & 1) == 0)
      return *(_QWORD *)&v11;
    sub_100030ED8(v5);
    v15 = (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 88))(v5, v2);
    if (v15 == enum case for DynamicTypeSize.accessibility1(_:))
    {
      v16 = 0x3FF3333333333333;
    }
    else
    {
      if (v15 != enum case for DynamicTypeSize.accessibility2(_:))
      {
        if (v15 == enum case for DynamicTypeSize.accessibility3(_:))
        {
          v17 = 1.6;
        }
        else
        {
          if (v15 != enum case for DynamicTypeSize.accessibility4(_:))
          {
            if (v15 == enum case for DynamicTypeSize.accessibility5(_:))
              v11 = v11 + v11;
            else
              v14(v5, v2);
            return *(_QWORD *)&v11;
          }
          v17 = 1.8;
        }
LABEL_10:
        v11 = v11 * v17;
        return *(_QWORD *)&v11;
      }
      v16 = 0x3FF6666666666666;
    }
    v17 = *(double *)&v16;
    goto LABEL_10;
  }
  return result;
}

double sub_10007E038()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  double v8;
  uint64_t v10;

  v0 = type metadata accessor for DynamicTypeSize(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v10 - v5);
  type metadata accessor for AccessPointHighlightComponent(0);
  sub_100030ED8(v6);
  (*(void (**)(char *, _QWORD *, uint64_t))(v1 + 16))(v3, v6, v0);
  v7 = (*(uint64_t (**)(char *, uint64_t))(v1 + 88))(v3, v0);
  if ((_DWORD)v7 == enum case for DynamicTypeSize.xLarge(_:))
  {
    v8 = 43.0;
  }
  else if ((_DWORD)v7 == enum case for DynamicTypeSize.xxLarge(_:))
  {
    v8 = 45.0;
  }
  else if ((_DWORD)v7 == enum case for DynamicTypeSize.xxxLarge(_:))
  {
    v8 = 48.0;
  }
  else
  {
    if ((DynamicTypeSize.isAccessibilitySize.getter(v7) & 1) != 0)
      v8 = 50.0;
    else
      v8 = 42.0;
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
  (*(void (**)(_QWORD *, uint64_t))(v1 + 8))(v6, v0);
  return v8;
}

uint64_t sub_10007E1A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  double *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  __n128 v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t (**v97)();
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;

  v125 = a2;
  v103 = type metadata accessor for AccessPointHighlight(0);
  v100 = *(_QWORD *)(v103 - 8);
  __chkstk_darwin(v103);
  v123 = v4;
  v124 = (uint64_t)&v99 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AccessPointHighlightComponent(0);
  v113 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v114 = v7;
  v115 = (uint64_t)&v99 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = type metadata accessor for LocalCoordinateSpace(0, v6);
  v8 = __chkstk_darwin(v112);
  v111 = (char *)&v99 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = type metadata accessor for DragGesture(0, v8);
  v117 = *(_QWORD *)(v119 - 8);
  __chkstk_darwin(v119);
  v116 = (char *)&v99 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100003304(&qword_10010FAA0);
  v121 = *(_QWORD *)(v11 - 8);
  v122 = v11;
  __chkstk_darwin(v11);
  v120 = (char *)&v99 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100003304(&qword_10010CA70);
  __chkstk_darwin(v13);
  v104 = (uint64_t)&v99 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100003304(&qword_10010D5F8);
  __chkstk_darwin(v15);
  v17 = (char *)&v99 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v18);
  v99 = (char *)&v99 - v20;
  v102 = type metadata accessor for UnevenRoundedRectangle(0, v19);
  __chkstk_darwin(v102);
  v22 = (double *)((char *)&v99 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v23 = sub_100003304(&qword_10010FAA8);
  __chkstk_darwin(v23);
  v25 = (char *)&v99 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_100003304(&qword_10010D458);
  __chkstk_darwin(v26);
  v28 = (char *)&v99 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_100003304(&qword_10010D460);
  __chkstk_darwin(v29);
  v31 = (char *)&v99 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = sub_100003304(&qword_10010FAB0);
  __chkstk_darwin(v105);
  v101 = (char *)&v99 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_100003304(&qword_10010FAB8);
  v109 = *(_QWORD *)(v33 - 8);
  v110 = v33;
  __chkstk_darwin(v33);
  v108 = (char *)&v99 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = sub_100003304(&qword_10010FAC0);
  __chkstk_darwin(v106);
  v107 = (char *)&v99 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v25 = static VerticalAlignment.center.getter(v36);
  *((_QWORD *)v25 + 1) = 0;
  v25[16] = 0;
  v37 = sub_100003304(&qword_10010FAC8);
  v38 = sub_10007EAE8(a1, v2, (uint64_t)&v25[*(int *)(v37 + 44)]);
  v39 = static UnitPoint.center.getter(v38);
  v41 = static AnyTransition.scale(scale:anchor:)(0.98, v39, v40);
  sub_100010CBC((uint64_t)v25, (uint64_t)v28, &qword_10010FAA8);
  *(_QWORD *)&v28[*(int *)(v26 + 36)] = v41;
  v42 = (uint64_t)v99;
  v43 = (uint64_t)v25;
  v44 = v100;
  v45 = (uint64_t)v31;
  sub_100010ED0(v43, &qword_10010FAA8);
  v118 = v2;
  v46 = sub_10007DE44(a1);
  LOBYTE(v26) = v47 & 1;
  v48 = static Alignment.center.getter(v46);
  sub_10002891C(0.0, 1, 0.0, 1, *(double *)&v46, v26, 0.0, 1, (uint64_t)v31, 0.0, 1, 0.0, 1, v48, v49);
  v50 = v103;
  v51 = (uint64_t)v28;
  v52 = a1;
  sub_100010ED0(v51, &qword_10010D458);
  sub_100007878(a1, v42, type metadata accessor for AccessPointHighlight);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v44 + 56))(v42, 0, 1, v50);
  sub_100010CBC(v42, (uint64_t)v17, &qword_10010D5F8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v17, 1, v50) == 1)
  {
    sub_100010ED0((uint64_t)v17, &qword_10010D5F8);
    v53 = type metadata accessor for AccessPointIconType(0);
    v54 = v104;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v104, 1, 1, v53);
    v55 = 32.0;
  }
  else
  {
    v56 = (uint64_t)&v17[*(int *)(v50 + 32)];
    v54 = v104;
    sub_100010CBC(v56, v104, &qword_10010CA70);
    sub_1000106F0((uint64_t)v17, type metadata accessor for AccessPointHighlight);
    v57 = type metadata accessor for AccessPointIconType(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 48))(v54, 1, v57) == 1)
      v55 = 32.0;
    else
      v55 = 16.0;
  }
  v58 = sub_100010ED0(v54, &qword_10010CA70);
  v59 = RectangleCornerRadii.init(topLeft:topRight:bottomRight:bottomLeft:)(v58, 32.0, v55, v55, 32.0);
  v61 = v60;
  v63 = v62;
  v65 = v64;
  sub_100010ED0(v42, &qword_10010D5F8);
  v66 = (char *)v22 + *(int *)(v102 + 20);
  v67 = enum case for RoundedCornerStyle.continuous(_:);
  v68 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 104))(v66, v67, v68);
  *v22 = v59;
  *((_QWORD *)v22 + 1) = v61;
  *((_QWORD *)v22 + 2) = v63;
  *((_QWORD *)v22 + 3) = v65;
  v69 = v105;
  v70 = (uint64_t)v101;
  v71 = (uint64_t)&v101[*(int *)(v105 + 36)];
  sub_100007878((uint64_t)v22, v71, (uint64_t (*)(_QWORD))&type metadata accessor for UnevenRoundedRectangle);
  *(_BYTE *)(v71 + *(int *)(sub_100003304(&qword_10010E1E0) + 36)) = 0;
  sub_100010CBC(v45, v70, &qword_10010D460);
  sub_1000106F0((uint64_t)v22, (uint64_t (*)(_QWORD))&type metadata accessor for UnevenRoundedRectangle);
  v72 = sub_100010ED0(v45, &qword_10010D460);
  v73 = v111;
  static CoordinateSpaceProtocol<>.local.getter(v72);
  v74 = v116;
  DragGesture.init<A>(minimumDistance:coordinateSpace:)(v73, v112, &protocol witness table for LocalCoordinateSpace, 10.0);
  v75 = v115;
  sub_100007878(v118, v115, type metadata accessor for AccessPointHighlightComponent);
  v76 = *(unsigned __int8 *)(v113 + 80);
  v77 = (v76 + 16) & ~v76;
  v78 = swift_allocObject(&unk_100100168, v77 + v114, v76 | 7);
  sub_100010F0C(v75, v78 + v77, type metadata accessor for AccessPointHighlightComponent);
  v79 = sub_1000035B4(&qword_10010FAD0, (uint64_t (*)(uint64_t))&type metadata accessor for DragGesture, (uint64_t)&protocol conformance descriptor for DragGesture);
  v80 = sub_1000035B4(&qword_10010FAD8, (uint64_t (*)(uint64_t))&type metadata accessor for DragGesture.Value, (uint64_t)&protocol conformance descriptor for DragGesture.Value);
  v81 = v119;
  v82 = v120;
  Gesture<>.onChanged(_:)(sub_1000814B0, v78, v119, v79, v80);
  v83 = swift_release(v78);
  v84 = (*(uint64_t (**)(char *, uint64_t, __n128))(v117 + 8))(v74, v81, v83);
  v85 = static GestureMask.all.getter(v84);
  v86 = sub_1000814EC();
  v87 = sub_100011054(&qword_10010FB10, &qword_10010FAA0, (uint64_t)&protocol conformance descriptor for _ChangedGesture<A>);
  v88 = v108;
  v89 = v122;
  View.gesture<A>(_:including:)(v82, v85, v69, v122, v86, v87);
  (*(void (**)(char *, uint64_t))(v121 + 8))(v82, v89);
  sub_100010ED0(v70, &qword_10010FAB0);
  v90 = v124;
  sub_100007878(v52, v124, type metadata accessor for AccessPointHighlight);
  v91 = *(unsigned __int8 *)(v44 + 80);
  v92 = (v91 + 16) & ~v91;
  v93 = swift_allocObject(&unk_100100190, v92 + v123, v91 | 7);
  sub_100010F0C(v90, v93 + v92, type metadata accessor for AccessPointHighlight);
  v95 = v109;
  v94 = v110;
  v96 = (uint64_t)v107;
  (*(void (**)(char *, char *, uint64_t))(v109 + 16))(v107, v88, v110);
  v97 = (uint64_t (**)())(v96 + *(int *)(v106 + 36));
  *v97 = sub_100081834;
  v97[1] = (uint64_t (*)())v93;
  v97[2] = 0;
  v97[3] = 0;
  (*(void (**)(char *, uint64_t))(v95 + 8))(v88, v94);
  return sub_10001A0AC(v96, v125, &qword_10010FAC0);
}

uint64_t sub_10007EAE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(char *, uint64_t, uint64_t);
  int v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  double v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _OWORD *v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t KeyPath;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  double v143;
  double v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _OWORD *v148;
  __int128 v149;
  _OWORD *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int *v165;
  uint64_t v166;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t (*v194)(uint64_t, uint64_t, uint64_t);
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  _OWORD v214[7];
  _OWORD v215[3];

  v206 = a2;
  v207 = a1;
  v201 = a3;
  v174 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v174);
  v176 = (char *)&v168 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v192 = sub_100003304(&qword_10010FB18);
  v191 = *(_QWORD *)(v192 - 8);
  __chkstk_darwin(v192);
  v175 = (char *)&v168 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100003304(&qword_10010FB20);
  __chkstk_darwin(v5);
  v200 = (uint64_t)&v168 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v193 = (uint64_t)&v168 - v8;
  v181 = type metadata accessor for DynamicTypeSize(0);
  v183 = *(_QWORD *)(v181 - 8);
  __chkstk_darwin(v181);
  v182 = (char *)&v168 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v203 = (uint64_t *)((char *)&v168 - v11);
  v12 = sub_100003304(&qword_10010FB28);
  __chkstk_darwin(v12);
  v178 = (uint64_t *)((char *)&v168 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v177 = sub_100003304(&qword_10010FB30);
  __chkstk_darwin(v177);
  v202 = (uint64_t)&v168 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v188 = sub_100003304(&qword_10010FB38);
  v187 = *(_QWORD *)(v188 - 8);
  __chkstk_darwin(v188);
  v180 = (uint64_t)&v168 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v179 = (uint64_t)&v168 - v17;
  v18 = type metadata accessor for AccessPointHighlight(0);
  __chkstk_darwin(v18);
  v186 = (uint64_t)&v168 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100003304(&qword_10010FB40);
  __chkstk_darwin(v20);
  v190 = (char *)&v168 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v208 = (uint64_t)&v168 - v23;
  v24 = type metadata accessor for APHighlightIcon(0);
  __chkstk_darwin(v24);
  v26 = (uint64_t *)((char *)&v168 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v27);
  v204 = (uint64_t)&v168 - v28;
  v189 = sub_100003304(&qword_10010FB48);
  __chkstk_darwin(v189);
  v30 = (char *)&v168 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v185 = sub_100003304(&qword_10010FB50);
  __chkstk_darwin(v185);
  v169 = (uint64_t)&v168 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v170 = (uint64_t)&v168 - v33;
  v184 = sub_100003304(&qword_10010FB58);
  __chkstk_darwin(v184);
  v35 = (char *)&v168 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_100003304(&qword_10010CA70);
  __chkstk_darwin(v36);
  v196 = (uint64_t)&v168 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  v40 = (char *)&v168 - v39;
  v41 = type metadata accessor for AccessPointIconType(0);
  v42 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v171 = (uint64_t)&v168 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v44);
  v46 = (char *)&v168 - v45;
  __chkstk_darwin(v47);
  v49 = (char *)&v168 - v48;
  v50 = sub_100003304(&qword_10010FB60);
  __chkstk_darwin(v50);
  v199 = (uint64_t)&v168 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v52);
  v209 = (uint64_t)&v168 - v53;
  v197 = v18;
  sub_100010CBC(v207 + *(int *)(v18 + 28), (uint64_t)v40, &qword_10010CA70);
  v54 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v42 + 48);
  v195 = v41;
  v55 = v54(v40, 1, v41);
  v205 = v46;
  v198 = v30;
  v173 = v24;
  v172 = v26;
  v194 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v54;
  if (v55 == 1)
  {
    v56 = sub_100010ED0((uint64_t)v40, &qword_10010CA70);
    v57 = static Color.primary.getter(v56);
    v58 = sub_10007E038();
    v59 = sub_10007E038();
    v61 = static Alignment.center.getter(v60);
    _FrameLayout.init(width:height:alignment:)(&v211, *(_QWORD *)&v58, 0, *(_QWORD *)&v59, 0, v61, v62);
    v63 = v211;
    v64 = BYTE8(v211);
    v65 = v212;
    v66 = BYTE8(v212);
    *(_QWORD *)v35 = v57;
    *((_WORD *)v35 + 4) = 256;
    *((_QWORD *)v35 + 2) = v63;
    v35[24] = v64;
    *((_QWORD *)v35 + 4) = v65;
    v35[40] = v66;
    *((_OWORD *)v35 + 3) = v213;
    swift_storeEnumTagMultiPayload(v35, v184, 1);
    v67 = sub_100003304(&qword_10010FB68);
    v68 = sub_10008185C();
    v69 = sub_100081964();
    _ConditionalContent<>.init(storage:)(v35, v185, v67, v68, v69);
  }
  else
  {
    sub_100010F0C((uint64_t)v40, (uint64_t)v49, type metadata accessor for AccessPointIconType);
    sub_100007878((uint64_t)v49, (uint64_t)v46, type metadata accessor for AccessPointIconType);
    *v26 = swift_getKeyPath(&unk_1000CC1F0);
    v70 = sub_100003304(&qword_10010D3A8);
    swift_storeEnumTagMultiPayload(v26, v70, 0);
    v71 = (char *)v26 + *(int *)(v24 + 20);
    LOBYTE(v215[0]) = 0;
    State.init(wrappedValue:)(v215, &type metadata for Bool);
    v72 = *((_QWORD *)&v214[0] + 1);
    *v71 = v214[0];
    *((_QWORD *)v71 + 1) = v72;
    sub_100010F0C((uint64_t)v46, (uint64_t)v26 + *(int *)(v24 + 24), type metadata accessor for AccessPointIconType);
    v73 = v204;
    sub_100010F0C((uint64_t)v26, v204, type metadata accessor for APHighlightIcon);
    v74 = sub_10007E038();
    v75 = sub_10007E038();
    v77 = static Alignment.center.getter(v76);
    _FrameLayout.init(width:height:alignment:)(&v211, *(_QWORD *)&v74, 0, *(_QWORD *)&v75, 0, v77, v78);
    sub_100007878(v73, (uint64_t)v30, type metadata accessor for APHighlightIcon);
    v79 = &v30[*(int *)(v189 + 36)];
    v80 = v212;
    *(_OWORD *)v79 = v211;
    *((_OWORD *)v79 + 1) = v80;
    *((_OWORD *)v79 + 2) = v213;
    sub_1000106F0(v73, type metadata accessor for APHighlightIcon);
    v81 = v169;
    sub_100010CBC((uint64_t)v30, v169, &qword_10010FB48);
    v82 = v185;
    *(_WORD *)(v81 + *(int *)(v185 + 36)) = 256;
    sub_100010ED0((uint64_t)v30, &qword_10010FB48);
    v83 = v170;
    sub_10001A0AC(v81, v170, &qword_10010FB50);
    sub_100010CBC(v83, (uint64_t)v35, &qword_10010FB50);
    swift_storeEnumTagMultiPayload(v35, v184, 0);
    v84 = sub_100003304(&qword_10010FB68);
    v85 = sub_10008185C();
    v86 = sub_100081964();
    _ConditionalContent<>.init(storage:)(v35, v82, v84, v85, v86);
    sub_100010ED0(v83, &qword_10010FB50);
    sub_1000106F0((uint64_t)v49, type metadata accessor for AccessPointIconType);
  }
  v87 = v208;
  v88 = (_QWORD *)v207;
  v89 = v188;
  v90 = v187;
  v91 = v186;
  v92 = *(_QWORD *)(v207 + 48);
  if (v92)
  {
    if ((v92 & 0x2000000000000000) != 0)
      v93 = HIBYTE(v92) & 0xF;
    else
      v93 = *(_QWORD *)(v207 + 40) & 0xFFFFFFFFFFFFLL;
    sub_100007878(v207, v186, type metadata accessor for AccessPointHighlight);
    v94 = (uint64_t)v205;
    if (v93)
    {
      v95 = sub_1000106F0(v91, type metadata accessor for AccessPointHighlight);
      v96 = v204;
      goto LABEL_16;
    }
  }
  else
  {
    sub_100007878(v207, v186, type metadata accessor for AccessPointHighlight);
    v94 = (uint64_t)v205;
  }
  v97 = *(_QWORD *)(v91 + 64);
  if (!v97)
  {
    sub_1000106F0(v91, type metadata accessor for AccessPointHighlight);
    v112 = 1;
    v96 = v204;
    goto LABEL_28;
  }
  if ((v97 & 0x2000000000000000) != 0)
    v98 = HIBYTE(v97) & 0xF;
  else
    v98 = *(_QWORD *)(v91 + 56) & 0xFFFFFFFFFFFFLL;
  v95 = sub_1000106F0(v91, type metadata accessor for AccessPointHighlight);
  v96 = v204;
  if (!v98)
  {
    v112 = 1;
    goto LABEL_28;
  }
LABEL_16:
  v99 = static HorizontalAlignment.leading.getter(v95);
  v100 = (uint64_t)v178;
  *v178 = v99;
  *(_QWORD *)(v100 + 8) = 0;
  *(_BYTE *)(v100 + 16) = 0;
  v101 = sub_100003304(&qword_10010FBB8);
  v102 = sub_10007FC38(v88, v100 + *(int *)(v101 + 44));
  v103 = static Edge.Set.all.getter(v102);
  v104 = v202;
  sub_100010CBC(v100, v202, &qword_10010FB28);
  v105 = v104 + *(int *)(v177 + 36);
  *(_BYTE *)v105 = v103;
  *(_OWORD *)(v105 + 8) = xmmword_1000CC3F0;
  *(_OWORD *)(v105 + 24) = xmmword_1000CC400;
  *(_BYTE *)(v105 + 40) = 0;
  sub_100010ED0(v100, &qword_10010FB28);
  type metadata accessor for AccessPointHighlightComponent(0);
  v106 = v203;
  sub_100030ED8(v203);
  v107 = v183;
  v108 = v182;
  v109 = v181;
  (*(void (**)(char *, _QWORD *, uint64_t))(v183 + 16))(v182, v106, v181);
  v110 = (*(uint64_t (**)(char *, uint64_t))(v107 + 88))(v108, v109);
  if ((_DWORD)v110 == enum case for DynamicTypeSize.xLarge(_:))
  {
    v111 = 0x4045800000000000;
  }
  else if ((_DWORD)v110 == enum case for DynamicTypeSize.xxLarge(_:))
  {
    v111 = 0x4046800000000000;
  }
  else if ((_DWORD)v110 == enum case for DynamicTypeSize.xxxLarge(_:))
  {
    v111 = 0x4048000000000000;
  }
  else
  {
    v113 = DynamicTypeSize.isAccessibilitySize.getter(v110);
    v107 = v183;
    v114 = v113;
    (*(void (**)(char *, uint64_t))(v183 + 8))(v182, v109);
    if ((v114 & 1) != 0)
      v111 = 0x4049000000000000;
    else
      v111 = 0x4045000000000000;
  }
  v115 = (*(uint64_t (**)(_QWORD *, uint64_t))(v107 + 8))(v203, v109);
  v116 = static Alignment.center.getter(v115);
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v214, 0, 1, 0, 1, 0, 1, v111, 0, 0, 1, 0, 1, v116, v117);
  v118 = v202;
  v119 = v180;
  sub_100010CBC(v202, v180, &qword_10010FB30);
  v120 = (_OWORD *)(v119 + *(int *)(v89 + 36));
  v121 = v214[5];
  v122 = v214[6];
  v120[4] = v214[4];
  v120[5] = v121;
  v120[6] = v122;
  v123 = v214[1];
  *v120 = v214[0];
  v120[1] = v123;
  v124 = v214[3];
  v120[2] = v214[2];
  v120[3] = v124;
  sub_100010ED0(v118, &qword_10010FB30);
  v125 = v179;
  sub_10001A0AC(v119, v179, &qword_10010FB38);
  sub_10001A0AC(v125, v87, &qword_10010FB38);
  v112 = 0;
  v94 = (uint64_t)v205;
LABEL_28:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v90 + 56))(v87, v112, 1, v89);
  v126 = sub_10007DC80((uint64_t)v88);
  v127 = v196;
  sub_100010CBC((uint64_t)v88 + *(int *)(v197 + 32), v196, &qword_10010CA70);
  v128 = v194(v127, 1, v195);
  v129 = (uint64_t)v198;
  LODWORD(v207) = v126;
  if (v128 == 1)
  {
    sub_100010ED0(v127, &qword_10010CA70);
    v130 = 1;
    v131 = v192;
    v132 = v191;
    v133 = (uint64_t)v190;
    v134 = v209;
    v135 = v193;
  }
  else
  {
    v136 = v171;
    sub_100010F0C(v127, v171, type metadata accessor for AccessPointIconType);
    sub_100007878(v136, v94, type metadata accessor for AccessPointIconType);
    KeyPath = swift_getKeyPath(&unk_1000CC1F0);
    v138 = (uint64_t)v172;
    *v172 = KeyPath;
    v139 = sub_100003304(&qword_10010D3A8);
    swift_storeEnumTagMultiPayload(v138, v139, 0);
    v140 = v173;
    v141 = v138 + *(int *)(v173 + 20);
    v210 = 0;
    State.init(wrappedValue:)(&v210, &type metadata for Bool);
    v142 = *((_QWORD *)&v215[0] + 1);
    *(_BYTE *)v141 = v215[0];
    *(_QWORD *)(v141 + 8) = v142;
    sub_100010F0C(v94, v138 + *(int *)(v140 + 24), type metadata accessor for AccessPointIconType);
    sub_100010F0C(v138, v96, type metadata accessor for APHighlightIcon);
    v143 = sub_10007E038();
    v144 = sub_10007E038();
    v146 = static Alignment.center.getter(v145);
    _FrameLayout.init(width:height:alignment:)(v215, *(_QWORD *)&v143, 0, *(_QWORD *)&v144, 0, v146, v147);
    sub_100007878(v96, v129, type metadata accessor for APHighlightIcon);
    v148 = (_OWORD *)(v129 + *(int *)(v189 + 36));
    v149 = v215[1];
    *v148 = v215[0];
    v148[1] = v149;
    v148[2] = v215[2];
    sub_1000106F0(v96, type metadata accessor for APHighlightIcon);
    v150 = v176;
    v151 = &v176[*(int *)(v174 + 20)];
    v152 = enum case for RoundedCornerStyle.continuous(_:);
    v153 = type metadata accessor for RoundedCornerStyle(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v153 - 8) + 104))(v151, v152, v153);
    __asm { FMOV            V0.2D, #14.0 }
    *v150 = _Q0;
    v131 = v192;
    v159 = (uint64_t)v175;
    v160 = (uint64_t)&v175[*(int *)(v192 + 36)];
    sub_100007878((uint64_t)v150, v160, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
    *(_WORD *)(v160 + *(int *)(sub_100003304(&qword_10010CB10) + 36)) = 256;
    sub_100010CBC(v129, v159, &qword_10010FB48);
    sub_1000106F0((uint64_t)v150, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
    sub_100010ED0(v129, &qword_10010FB48);
    sub_1000106F0(v136, type metadata accessor for AccessPointIconType);
    v135 = v193;
    sub_10001A0AC(v159, v193, &qword_10010FB18);
    v130 = 0;
    v132 = v191;
    v133 = (uint64_t)v190;
    v134 = v209;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v132 + 56))(v135, v130, 1, v131);
  v161 = v199;
  sub_100010CBC(v134, v199, &qword_10010FB60);
  v162 = v208;
  sub_100010CBC(v208, v133, &qword_10010FB40);
  v163 = v200;
  sub_100010CBC(v135, v200, &qword_10010FB20);
  v164 = v201;
  sub_100010CBC(v161, v201, &qword_10010FB60);
  v165 = (int *)sub_100003304(&qword_10010FBB0);
  sub_100010CBC(v133, v164 + v165[12], &qword_10010FB40);
  v166 = v164 + v165[16];
  *(_QWORD *)v166 = 0;
  *(_BYTE *)(v166 + 8) = 0;
  *(_BYTE *)(v166 + 9) = (v207 & 1) == 0;
  sub_100010CBC(v163, v164 + v165[20], &qword_10010FB20);
  sub_100010ED0(v135, &qword_10010FB20);
  sub_100010ED0(v162, &qword_10010FB40);
  sub_100010ED0(v209, &qword_10010FB60);
  sub_100010ED0(v163, &qword_10010FB20);
  sub_100010ED0(v133, &qword_10010FB40);
  return sub_100010ED0(v161, &qword_10010FB60);
}

uint64_t sub_10007FC38@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t KeyPath;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char v52;
  uint64_t v53;

  v4 = type metadata accessor for APHighlightSubtitle(0);
  v49 = *(_QWORD *)(v4 - 8);
  v50 = v4;
  __chkstk_darwin(v4);
  v48 = (uint64_t *)((char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_100003304(&qword_10010FBC0);
  __chkstk_darwin(v6);
  v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v46 - v10;
  v12 = type metadata accessor for APHighlightTitle(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char **)((char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = sub_100003304(&qword_10010FBC8);
  __chkstk_darwin(v16);
  v18 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v46 - v21;
  v23 = a1[6];
  if (v23)
  {
    v47 = a2;
    v24 = a1[5];
    v25 = HIBYTE(v23) & 0xF;
    if ((v23 & 0x2000000000000000) == 0)
      v25 = v24 & 0xFFFFFFFFFFFFLL;
    if (v25)
    {
      *v15 = swift_getKeyPath(&unk_1000CC1F0);
      v26 = sub_100003304(&qword_10010D3A8);
      swift_storeEnumTagMultiPayload(v15, v26, 0);
      v27 = *(int *)(v12 + 20);
      v46 = v8;
      v28 = (char *)v15 + v27;
      v51 = 0;
      swift_bridgeObjectRetain(v23);
      State.init(wrappedValue:)(&v51, &type metadata for Bool);
      v29 = v53;
      *v28 = v52;
      *((_QWORD *)v28 + 1) = v29;
      v8 = v46;
      v30 = (_QWORD *)((char *)v15 + *(int *)(v12 + 24));
      *v30 = v24;
      v30[1] = v23;
      sub_100010F0C((uint64_t)v15, (uint64_t)v22, type metadata accessor for APHighlightTitle);
      v31 = 0;
    }
    else
    {
      v31 = 1;
    }
    a2 = v47;
  }
  else
  {
    v31 = 1;
  }
  v32 = 1;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v13 + 56))(v22, v31, 1, v12, v20);
  v33 = a1[8];
  if (!v33)
    goto LABEL_14;
  v34 = a1[7];
  v35 = HIBYTE(v33) & 0xF;
  if ((v33 & 0x2000000000000000) == 0)
    v35 = v34 & 0xFFFFFFFFFFFFLL;
  if (v35)
  {
    KeyPath = swift_getKeyPath(&unk_1000CC1F0);
    v37 = (uint64_t)v48;
    *v48 = KeyPath;
    v38 = sub_100003304(&qword_10010D3A8);
    swift_storeEnumTagMultiPayload(v37, v38, 0);
    v39 = v50;
    v40 = v8;
    v41 = v37 + *(int *)(v50 + 20);
    v51 = 0;
    swift_bridgeObjectRetain(v33);
    State.init(wrappedValue:)(&v51, &type metadata for Bool);
    v42 = v53;
    *(_BYTE *)v41 = v52;
    *(_QWORD *)(v41 + 8) = v42;
    v8 = v40;
    v43 = (_QWORD *)(v37 + *(int *)(v39 + 24));
    *v43 = v34;
    v43[1] = v33;
    sub_100010F0C(v37, (uint64_t)v11, type metadata accessor for APHighlightSubtitle);
    v32 = 0;
  }
  else
  {
LABEL_14:
    v39 = v50;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v49 + 56))(v11, v32, 1, v39);
  sub_100010CBC((uint64_t)v22, (uint64_t)v18, &qword_10010FBC8);
  sub_100010CBC((uint64_t)v11, (uint64_t)v8, &qword_10010FBC0);
  sub_100010CBC((uint64_t)v18, a2, &qword_10010FBC8);
  v44 = sub_100003304(&qword_10010FBD0);
  sub_100010CBC((uint64_t)v8, a2 + *(int *)(v44 + 48), &qword_10010FBC0);
  sub_100010ED0((uint64_t)v11, &qword_10010FBC0);
  sub_100010ED0((uint64_t)v22, &qword_10010FBC8);
  sub_100010ED0((uint64_t)v8, &qword_10010FBC0);
  return sub_100010ED0((uint64_t)v18, &qword_10010FBC8);
}

double sub_10007FFE8(uint64_t a1, uint64_t *a2)
{
  double result;
  double v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  _QWORD v11[3];
  char v12;
  uint64_t v13;

  DragGesture.Value.translation.getter();
  result = -20.0;
  if (v4 < -20.0)
  {
    v5 = *a2;
    v6 = *((_BYTE *)a2 + 8);
    v7 = swift_retain(v5);
    v8 = sub_10003134C(v7, v6);
    swift_release(v5);
    KeyPath = swift_getKeyPath(&unk_1000CC1C8);
    __chkstk_darwin(KeyPath);
    v11[2] = v8;
    v12 = 1;
    v13 = v8;
    v10 = sub_1000035B4(&qword_10010E210, type metadata accessor for AccessPointHighlightComponent.GestureHandler, (uint64_t)&unk_1000CBFC8);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v13, KeyPath, sub_100049E0C, v11, (char *)&type metadata for () + 8, v10);
    swift_release(v8);
    *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  }
  return result;
}

void sub_1000800FC(uint64_t a1)
{
  char *v1;

  v1 = (char *)sub_100080164
     + 4
     * byte_1000CBDCE[*(unsigned __int8 *)(a1 + *(int *)(type metadata accessor for AccessPointHighlight(0) + 56))];
  __asm { BR              X9 }
}

void sub_100080164(uint64_t a1, const char *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t v8;
  uint64_t v9;

  swift_bridgeObjectRelease((_TtC13GameOverlayUI20GameOverlayUIService *)0xEF65676150746E69, a2, a3, a4, a5, a6, a7, a8);
  sub_1000772B4();
  if (*(unsigned __int8 *)(v8 + *(int *)(v9 + 52)) <= 1u)
    sub_1000773F0(*(_QWORD *)(v8 + *(int *)(v9 + 60)));
}

uint64_t sub_100080288(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  __chkstk_darwin(v1);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007878(v5, (uint64_t)v4, type metadata accessor for AccessPointHighlightComponent);
  v6 = sub_1000035B4(&qword_10010FA68, type metadata accessor for AccessPointHighlightComponent, (uint64_t)&unk_1000CC110);
  return _ComponentBody.init(_:)(v4, a1, v6);
}

double sub_100080324(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v8;
  double v9;
  double v10;
  uint64_t v12;

  v2 = type metadata accessor for DynamicTypeSize(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = DynamicTypeSize.isAccessibilitySize.getter(v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, a1, v2);
  v8 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v6, v2);
  if ((_DWORD)v8 == enum case for DynamicTypeSize.xLarge(_:))
  {
    v9 = 43.0;
  }
  else if ((_DWORD)v8 == enum case for DynamicTypeSize.xxLarge(_:))
  {
    v9 = 45.0;
  }
  else if ((_DWORD)v8 == enum case for DynamicTypeSize.xxxLarge(_:))
  {
    v9 = 48.0;
  }
  else
  {
    if ((DynamicTypeSize.isAccessibilitySize.getter(v8) & 1) != 0)
      v9 = 50.0;
    else
      v9 = 42.0;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  v10 = 12.0;
  if ((v7 & 1) != 0)
    v10 = 14.0;
  return v10 + v9;
}

unint64_t sub_100080468()
{
  unint64_t result;

  result = qword_10010F998;
  if (!qword_10010F998)
  {
    result = swift_getWitnessTable(&unk_1000CC178, &type metadata for AccessPointHighlight.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010F998);
  }
  return result;
}

unint64_t sub_1000804AC()
{
  unint64_t result;

  result = qword_10010F9B0;
  if (!qword_10010F9B0)
  {
    result = swift_getWitnessTable(&unk_1000CBC04, &type metadata for MetricsHelper.pageId);
    atomic_store(result, (unint64_t *)&qword_10010F9B0);
  }
  return result;
}

uint64_t sub_1000804F0(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v9 = sub_100006E54(&qword_10010C148);
    sub_100011054(a2, &qword_10010C160, a3);
    result = swift_getWitnessTable(a4, v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100080574()
{
  unint64_t result;

  result = qword_10010F9D0;
  if (!qword_10010F9D0)
  {
    result = swift_getWitnessTable(&unk_1000CBBDC, &type metadata for MetricsHelper.pageId);
    atomic_store(result, (unint64_t *)&qword_10010F9D0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AccessPointHighlight.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF5)
    goto LABEL_17;
  if (a2 + 11 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 11) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 11;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 11;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 11;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xC;
  v8 = v6 - 12;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessPointHighlight.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_100080694 + 4 * byte_1000CBDD7[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_1000806C8 + 4 * byte_1000CBDD2[v4]))();
}

uint64_t sub_1000806C8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000806D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000806D8);
  return result;
}

uint64_t sub_1000806E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000806ECLL);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_1000806F0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000806F8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessPointHighlight.CodingKeys()
{
  return &type metadata for AccessPointHighlight.CodingKeys;
}

uint64_t sub_100080714(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v15 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v15 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain(v15);
  }
  else
  {
    v5 = *a2;
    v6 = *((_BYTE *)a2 + 8);
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = v6;
    v7 = *(int *)(a3 + 20);
    v8 = (uint64_t *)(a1 + v7);
    v9 = (uint64_t *)((char *)a2 + v7);
    swift_retain(v5);
    v10 = sub_100003304(&qword_10010D3A8);
    if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
    {
      v11 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v8, v9, v11);
      v12 = v8;
      v13 = v10;
      v14 = 1;
    }
    else
    {
      v16 = *v9;
      *v8 = *v9;
      swift_retain(v16);
      v12 = v8;
      v13 = v10;
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v12, v13, v14);
  }
  return a1;
}

double sub_1000807F8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  swift_release(*a1);
  v4 = (_QWORD *)((char *)a1 + *(int *)(a2 + 20));
  v5 = sub_100003304(&qword_10010D3A8);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    *(_QWORD *)&result = swift_release(*v4).n128_u64[0];
  }
  return result;
}

uint64_t sub_100080870(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = v5;
  v6 = *(int *)(a3 + 20);
  v7 = (uint64_t *)(a1 + v6);
  v8 = (uint64_t *)((char *)a2 + v6);
  swift_retain(v4);
  v9 = sub_100003304(&qword_10010D3A8);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v7, v8, v10);
    v11 = 1;
  }
  else
  {
    v12 = *v8;
    *v7 = *v8;
    swift_retain(v12);
    v11 = 0;
  }
  swift_storeEnumTagMultiPayload(v7, v9, v11);
  return a1;
}

uint64_t *sub_100080920(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v7;
  swift_retain(v6);
  swift_release(v8);
  if (a1 != a2)
  {
    v9 = *(int *)(a3 + 20);
    v10 = (uint64_t *)((char *)a1 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    sub_100010ED0((uint64_t)a1 + v9, &qword_10010D3A8);
    v12 = sub_100003304(&qword_10010D3A8);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v11, v13);
      v14 = 1;
    }
    else
    {
      v15 = *v11;
      *v10 = *v11;
      swift_retain(v15);
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v12, v14);
  }
  return a1;
}

uint64_t sub_1000809FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(int *)(a3 + 20);
  v5 = (void *)(a1 + v4);
  v6 = (const void *)(a2 + v4);
  v7 = sub_100003304(&qword_10010D3A8);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v5, v6, v8);
    swift_storeEnumTagMultiPayload(v5, v7, 1);
  }
  else
  {
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  return a1;
}

uint64_t *sub_100080AAC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *((_BYTE *)a2 + 8);
  v7 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v6;
  swift_release(v7);
  if (a1 != a2)
  {
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    sub_100010ED0((uint64_t)a1 + v8, &qword_10010D3A8);
    v11 = sub_100003304(&qword_10010D3A8);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100080B84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100080B90);
}

uint64_t sub_100080B90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 8);
    if (v4 > 1)
      return (v4 ^ 0xFF) + 1;
    else
      return 0;
  }
  else
  {
    v8 = sub_100003304(&qword_10010DD18);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_100080C08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100080C14);
}

uint64_t sub_100080C14(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 8) = -(char)a2;
  }
  else
  {
    v7 = sub_100003304(&qword_10010DD18);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for AccessPointHighlightComponent(uint64_t a1)
{
  return sub_100010C88(a1, qword_10010FA30, (uint64_t)&nominal type descriptor for AccessPointHighlightComponent);
}

void sub_100080C9C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = "\t";
  sub_10001DD8C(319, (unint64_t *)&unk_10010DD88, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

uint64_t sub_100080D28(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_1000035B4(&qword_10010FA68, type metadata accessor for AccessPointHighlightComponent, (uint64_t)&unk_1000CC110);
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of Component.body>>, 1);
}

unint64_t sub_100080D84()
{
  unint64_t result;

  result = qword_10010FA70;
  if (!qword_10010FA70)
  {
    result = swift_getWitnessTable(&unk_1000CC0E8, &type metadata for AccessPointHighlight.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010FA70);
  }
  return result;
}

uint64_t sub_100080DC8()
{
  return sub_1000035B4(&qword_10010FA78, type metadata accessor for AccessPointHighlightComponent, (uint64_t)&unk_1000CC008);
}

uint64_t sub_100080DF4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E5158, 1);
}

uint64_t sub_100080E04()
{
  return sub_1000035B4(&qword_10010FA80, type metadata accessor for AccessPointHighlight, (uint64_t)&unk_1000CBF88);
}

uint64_t sub_100080E30()
{
  return sub_1000035B4(&qword_10010FA88, (uint64_t (*)(uint64_t))&type metadata accessor for _ComponentBodyButtonStyle, (uint64_t)&protocol conformance descriptor for _ComponentBodyButtonStyle);
}

unint64_t sub_100080E60()
{
  unint64_t result;

  result = qword_10010FA90;
  if (!qword_10010FA90)
  {
    result = swift_getWitnessTable(&unk_1000CC058, &type metadata for AccessPointHighlight.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010FA90);
  }
  return result;
}

unint64_t sub_100080EA8()
{
  unint64_t result;

  result = qword_10010FA98;
  if (!qword_10010FA98)
  {
    result = swift_getWitnessTable(&unk_1000CC080, &type metadata for AccessPointHighlight.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010FA98);
  }
  return result;
}

uint64_t sub_100080EF4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;

  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x656C746974 && a2 == 0xE500000000000000)
  {
    v7 = 0xE500000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x656C746974627573 && a2 == 0xE800000000000000)
  {
    v8 = 0xE800000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974627573, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x49676E696461656CLL && a2 == 0xEB000000006E6F63)
  {
    v9 = 0xEB000000006E6F63;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x49676E696461656CLL, 0xEB000000006E6F63, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x676E696C69617274 && a2 == 0xEC0000006E6F6349)
  {
    v10 = 0xEC0000006E6F6349;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x676E696C69617274, 0xEC0000006E6F6349, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000)
  {
    v11 = 0xE800000000000000;
LABEL_38:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461727564, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_38;
  }
  if (a1 == 0x6953646C756F6873 && a2 == 0xEF7469466F54657ALL)
  {
    v12 = 0xEF7469466F54657ALL;
LABEL_44:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6953646C756F6873, 0xEF7469466F54657ALL, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_44;
  }
  if (a1 == 0x6575676573 && a2 == 0xE500000000000000)
  {
    v13 = 0xE500000000000000;
LABEL_50:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6575676573, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_50;
  }
  if (a1 == 0xD000000000000011)
  {
    v14 = 0x80000001000CF900;
    if (a2 == 0x80000001000CF900)
      goto LABEL_55;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001000CF900, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
LABEL_55:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if (a1 == 0x7954746567726174 && a2 == 0xEA00000000006570)
  {
    v15 = 0xEA00000000006570;
LABEL_61:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7954746567726174, 0xEA00000000006570, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_61;
  }
  if (a1 == 0x644965676170 && a2 == 0xE600000000000000)
  {
    v16 = 0xE600000000000000;
LABEL_67:
    swift_bridgeObjectRelease(v16);
    return 10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x644965676170, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
    goto LABEL_67;
  }
  if (a1 == 0x65646E496D657469 && a2 == 0xE900000000000078)
  {
    swift_bridgeObjectRelease(0xE900000000000078);
    return 11;
  }
  else
  {
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65646E496D657469, 0xE900000000000078, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v17 & 1) != 0)
      return 11;
    else
      return 12;
  }
}

uint64_t sub_100081400()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for AccessPointHighlightComponent(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + v4));
  v6 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 20));
  v7 = sub_100003304(&qword_10010D3A8);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

double sub_1000814B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AccessPointHighlightComponent(0) - 8) + 80);
  return sub_10007FFE8(a1, (uint64_t *)(v1 + ((v3 + 16) & ~v3)));
}

unint64_t sub_1000814EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010FAE0;
  if (!qword_10010FAE0)
  {
    v1 = sub_100006E54(&qword_10010FAB0);
    sub_100034764(&qword_10010FAE8, &qword_10010D460, (void (*)(void))sub_100081590);
    sub_100011054(&qword_10010E200, &qword_10010E1E0, (uint64_t)&protocol conformance descriptor for _ContentShapeModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10010FAE0);
  }
  return result;
}

unint64_t sub_100081590()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010FAF0;
  if (!qword_10010FAF0)
  {
    v1 = sub_100006E54(&qword_10010D458);
    sub_100011054(&qword_10010FAF8, &qword_10010FAA8, (uint64_t)&protocol conformance descriptor for HStack<A>);
    sub_100011054(&qword_10010FB00, &qword_10010FB08, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10010FAF0);
  }
  return result;
}

uint64_t sub_10008162C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  SEL v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  SEL v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t, uint64_t, uint64_t);
  __n128 v24;
  const char *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  const char *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v1 = (int *)type metadata accessor for AccessPointHighlight(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  sub_100004624((_QWORD *)(v0 + v4));
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v0 + v4 + 48), v7, v8, v9, v10, v11, v12, v13);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v0 + v4 + 64), v14, v15, v16, v17, v18, v19, v20);
  v21 = v0 + v4 + v1[7];
  v22 = type metadata accessor for AccessPointIconType(0);
  v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48);
  if (!v23(v21, 1, v22))
  {
    switch(swift_getEnumCaseMultiPayload(v21, v22))
    {
      case 0u:
      case 1u:
      case 3u:
        swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v21 + 8), v25, v26, v27, v28, v29, v30, v31);
        break;
      case 2u:
        v32 = type metadata accessor for MediaArtwork(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(v21, v32);
        break;
      case 4u:
        v33 = *(_QWORD *)(v21 + 8);
        if (v33 >> 60 != 15)
          v24.n128_f64[0] = sub_100038198(*(_QWORD *)v21, v33);
        break;
      default:
        break;
    }
  }
  v34 = v6 + v1[8];
  if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t, __n128))v23)(v34, 1, v22, v24))
  {
    switch(swift_getEnumCaseMultiPayload(v34, v22))
    {
      case 0u:
      case 1u:
      case 3u:
        swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(v34 + 8), v35, v36, v37, v38, v39, v40, v41);
        break;
      case 2u:
        v42 = type metadata accessor for MediaArtwork(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 8))(v34, v42);
        break;
      case 4u:
        v43 = *(_QWORD *)(v34 + 8);
        if (v43 >> 60 != 15)
          sub_100038198(*(_QWORD *)v34, v43);
        break;
      default:
        break;
    }
  }
  v44 = (_QWORD *)(v6 + v1[11]);
  if (v44[3])
    sub_100004624(v44);
  v45 = v6 + v1[12];
  v46 = type metadata accessor for ImpressionMetrics(0);
  v47 = *(_QWORD *)(v46 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v45, v46);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100081834()
{
  return sub_100082E9C(type metadata accessor for AccessPointHighlight, (uint64_t (*)(uint64_t))sub_1000800FC);
}

uint64_t type metadata accessor for APHighlightIcon(uint64_t a1)
{
  return sub_100010C88(a1, qword_10010FD60, (uint64_t)&nominal type descriptor for APHighlightIcon);
}

unint64_t sub_10008185C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010FB70;
  if (!qword_10010FB70)
  {
    v1 = sub_100006E54(&qword_10010FB50);
    sub_1000818E0();
    sub_100011054(&qword_10010FB88, &qword_10010FB90, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10010FB70);
  }
  return result;
}

unint64_t sub_1000818E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010FB78;
  if (!qword_10010FB78)
  {
    v1 = sub_100006E54(&qword_10010FB48);
    sub_1000035B4(&qword_10010FB80, type metadata accessor for APHighlightIcon, (uint64_t)&unk_1000CC314);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10010FB78);
  }
  return result;
}

unint64_t sub_100081964()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010FB98;
  if (!qword_10010FB98)
  {
    v1 = sub_100006E54(&qword_10010FB68);
    sub_100011054(&qword_10010FBA0, &qword_10010FBA8, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10010FB98);
  }
  return result;
}

uint64_t type metadata accessor for APHighlightSubtitle(uint64_t a1)
{
  return sub_100010C88(a1, qword_10010FC30, (uint64_t)&nominal type descriptor for APHighlightSubtitle);
}

uint64_t type metadata accessor for APHighlightTitle(uint64_t a1)
{
  return sub_100010C88(a1, qword_10010FCC8, (uint64_t)&nominal type descriptor for APHighlightTitle);
}

uint64_t sub_100081A30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100081A3C);
}

uint64_t sub_100081A40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100081A4C);
}

uint64_t *sub_100081A54(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_100003304(&qword_10010D3A8);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = *(int *)(a3 + 20);
    v15 = *(int *)(a3 + 24);
    v16 = (char *)a1 + v14;
    v17 = (char *)a2 + v14;
    *v16 = *v17;
    v18 = *((_QWORD *)v17 + 1);
    *((_QWORD *)v16 + 1) = v18;
    v19 = (uint64_t *)((char *)a1 + v15);
    v20 = (uint64_t *)((char *)a2 + v15);
    v21 = v20[1];
    *v19 = *v20;
    v19[1] = v21;
    swift_retain(v18);
    swift_bridgeObjectRetain(v21);
  }
  return a1;
}

void sub_100081B58(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  SEL v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;

  v4 = sub_100003304(&qword_10010D3A8);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  swift_release(*(_QWORD *)((char *)a1 + *(int *)(a2 + 20) + 8));
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)((char *)a1 + *(int *)(a2 + 24) + 8), v6, v7, v8, v9, v10, v11, v12);
}

uint64_t *sub_100081BDC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;

  v6 = sub_100003304(&qword_10010D3A8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = *(int *)(a3 + 20);
  v13 = *(int *)(a3 + 24);
  v14 = (char *)a1 + v12;
  v15 = (char *)a2 + v12;
  *v14 = *v15;
  v16 = *((_QWORD *)v15 + 1);
  *((_QWORD *)v14 + 1) = v16;
  v17 = (uint64_t *)((char *)a1 + v13);
  v18 = (uint64_t *)((char *)a2 + v13);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  swift_retain(v16);
  swift_bridgeObjectRetain(v19);
  return a1;
}

uint64_t *sub_100081CB4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _TtC13GameOverlayUI20GameOverlayUIService *v21;
  SEL v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;

  if (a1 != a2)
  {
    sub_100010ED0((uint64_t)a1, &qword_10010D3A8);
    v6 = sub_100003304(&qword_10010D3A8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = *(int *)(a3 + 20);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  *v13 = *v14;
  v15 = *((_QWORD *)v13 + 1);
  v16 = *((_QWORD *)v14 + 1);
  *((_QWORD *)v13 + 1) = v16;
  swift_retain(v16);
  swift_release(v15);
  v17 = *(int *)(a3 + 24);
  v18 = (uint64_t *)((char *)a1 + v17);
  v19 = (uint64_t *)((char *)a2 + v17);
  *v18 = *v19;
  v20 = v19[1];
  v21 = (_TtC13GameOverlayUI20GameOverlayUIService *)v18[1];
  v18[1] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21, v22, v23, v24, v25, v26, v27, v28);
  return a1;
}

char *sub_100081DC4(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_100003304(&qword_10010D3A8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = *(int *)(a3 + 24);
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  *(_OWORD *)&a1[v8] = *(_OWORD *)&a2[v8];
  return a1;
}

char *sub_100081E74(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _TtC13GameOverlayUI20GameOverlayUIService *v17;
  SEL v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;

  if (a1 != a2)
  {
    sub_100010ED0((uint64_t)a1, &qword_10010D3A8);
    v6 = sub_100003304(&qword_10010D3A8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  *v9 = *v10;
  v11 = *((_QWORD *)v9 + 1);
  *((_QWORD *)v9 + 1) = *((_QWORD *)v10 + 1);
  swift_release(v11);
  v12 = *(int *)(a3 + 24);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v16 = *(_QWORD *)v14;
  v15 = *((_QWORD *)v14 + 1);
  v17 = (_TtC13GameOverlayUI20GameOverlayUIService *)*((_QWORD *)v13 + 1);
  *(_QWORD *)v13 = v16;
  *((_QWORD *)v13 + 1) = v15;
  swift_bridgeObjectRelease(v17, v18, v19, v20, v21, v22, v23, v24);
  return a1;
}

uint64_t sub_100081F68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100081F74);
}

uint64_t sub_100081F78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_100003304(&qword_10010DD18);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100081FFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100082008);
}

uint64_t sub_10008200C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100003304(&qword_10010DD18);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  return result;
}

void sub_10008208C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  sub_10001DD8C(319, (unint64_t *)&unk_10010DD88, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = &unk_1000CBE70;
    v4[2] = &unk_1000CC238;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

uint64_t sub_100082120(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    v7 = sub_100003304(&qword_10010D3A8);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v14 = *a2;
      *a1 = *a2;
      swift_retain(v14);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v15 = *(int *)(a3 + 20);
    v16 = *(int *)(a3 + 24);
    v17 = (char *)a1 + v15;
    v18 = (char *)a2 + v15;
    *v17 = *v18;
    v19 = *((_QWORD *)v18 + 1);
    *((_QWORD *)v17 + 1) = v19;
    v20 = (char *)a2 + v16;
    v21 = type metadata accessor for AccessPointIconType(0);
    swift_retain(v19);
    v22 = (char *)&loc_10008223C + 4 * byte_1000CBDE6[swift_getEnumCaseMultiPayload(v20, v21)];
    __asm { BR              X10 }
  }
  v12 = *a2;
  *a1 = *a2;
  v13 = v12 + ((v5 + 16) & ~(unint64_t)v5);
  swift_retain(v12);
  return v13;
}

double sub_100082320(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _TtC13GameOverlayUI20GameOverlayUIService **v6;
  uint64_t v7;
  const char *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  double result;
  unint64_t v16;
  uint64_t v17;

  v4 = sub_100003304(&qword_10010D3A8);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  swift_release(*(_QWORD *)((char *)a1 + *(int *)(a2 + 20) + 8));
  v6 = (_TtC13GameOverlayUI20GameOverlayUIService **)((char *)a1 + *(int *)(a2 + 24));
  v7 = type metadata accessor for AccessPointIconType(0);
  switch(swift_getEnumCaseMultiPayload(v6, v7))
  {
    case 0u:
    case 1u:
    case 3u:
      swift_bridgeObjectRelease(v6[1], v8, v9, v10, v11, v12, v13, v14);
      break;
    case 2u:
      v17 = type metadata accessor for MediaArtwork(0);
      (*(void (**)(_TtC13GameOverlayUI20GameOverlayUIService **, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v6, v17);
      break;
    case 4u:
      v16 = (unint64_t)v6[1];
      if (v16 >> 60 != 15)
        result = sub_100038198((uint64_t)*v6, v16);
      break;
    default:
      return result;
  }
  return result;
}

void sub_10008242C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v6 = sub_100003304(&qword_10010D3A8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = *(int *)(a3 + 20);
  v13 = *(int *)(a3 + 24);
  v14 = (char *)a1 + v12;
  v15 = (char *)a2 + v12;
  *v14 = *v15;
  v16 = *((_QWORD *)v15 + 1);
  *((_QWORD *)v14 + 1) = v16;
  v17 = (char *)a2 + v13;
  v18 = type metadata accessor for AccessPointIconType(0);
  swift_retain(v16);
  v19 = (char *)sub_100082520 + 4 * byte_1000CBDF0[swift_getEnumCaseMultiPayload(v17, v18)];
  __asm { BR              X10 }
}

uint64_t sub_100082520()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v5 = v4[1];
  *v1 = *v4;
  v1[1] = v5;
  swift_bridgeObjectRetain(v5);
  swift_storeEnumTagMultiPayload(v1, v2, v3);
  return v0;
}

uint64_t *sub_1000825C4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;

  if (a1 != a2)
  {
    sub_100010ED0((uint64_t)a1, &qword_10010D3A8);
    v6 = sub_100003304(&qword_10010D3A8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = *(int *)(a3 + 20);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  *v13 = *v14;
  v15 = *((_QWORD *)v13 + 1);
  v16 = *((_QWORD *)v14 + 1);
  *((_QWORD *)v13 + 1) = v16;
  swift_retain(v16);
  swift_release(v15);
  if (a1 != a2)
  {
    v17 = *(int *)(a3 + 24);
    v18 = (char *)a2 + v17;
    sub_1000106F0((uint64_t)a1 + v17, type metadata accessor for AccessPointIconType);
    v19 = type metadata accessor for AccessPointIconType(0);
    v20 = (char *)&loc_1000826F4 + 4 * byte_1000CBDF5[swift_getEnumCaseMultiPayload(v18, v19)];
    __asm { BR              X10 }
  }
  return a1;
}

char *sub_1000827A8(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_100003304(&qword_10010D3A8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = *(int *)(a3 + 24);
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for AccessPointIconType(0);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 2)
  {
    v12 = type metadata accessor for MediaArtwork(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload(v9, v11, 2);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  return a1;
}

char *sub_1000828C0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  if (a1 != a2)
  {
    sub_100010ED0((uint64_t)a1, &qword_10010D3A8);
    v6 = sub_100003304(&qword_10010D3A8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  *v9 = *v10;
  v11 = *((_QWORD *)v9 + 1);
  *((_QWORD *)v9 + 1) = *((_QWORD *)v10 + 1);
  swift_release(v11);
  if (a1 != a2)
  {
    v12 = *(int *)(a3 + 24);
    v13 = &a1[v12];
    v14 = &a2[v12];
    sub_1000106F0((uint64_t)&a1[v12], type metadata accessor for AccessPointIconType);
    v15 = type metadata accessor for AccessPointIconType(0);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 2)
    {
      v16 = type metadata accessor for MediaArtwork(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v13, v14, v16);
      swift_storeEnumTagMultiPayload(v13, v15, 2);
    }
    else
    {
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100082A24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100082A30);
}

uint64_t sub_100082A30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;
  uint64_t v11;

  v6 = sub_100003304(&qword_10010DD18);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 2147483646)
  {
    v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
    if (v9 >= 0xFFFFFFFF)
      LODWORD(v9) = -1;
    v10 = v9 - 1;
    if (v10 < 0)
      v10 = -1;
    return (v10 + 1);
  }
  else
  {
    v11 = type metadata accessor for AccessPointIconType(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v11);
  }
}

uint64_t sub_100082AEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100082AF8);
}

uint64_t sub_100082AF8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = sub_100003304(&qword_10010DD18);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 2147483646)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = a2;
      return result;
    }
    v10 = type metadata accessor for AccessPointIconType(0);
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_100082BA4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  sub_10001DD8C(319, (unint64_t *)&unk_10010DD88, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = &unk_1000CBE70;
    v4 = type metadata accessor for AccessPointIconType(319);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 3, v6, a1 + 16);
    }
  }
}

unint64_t sub_100082C4C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_10010FDA0;
  if (!qword_10010FDA0)
  {
    v1 = sub_100006E54(&qword_10010FAC0);
    v2[0] = sub_100006E54(&qword_10010FAB0);
    v2[1] = sub_100006E54(&qword_10010FAA0);
    v2[2] = sub_1000814EC();
    v2[3] = sub_100011054(&qword_10010FB10, &qword_10010FAA0, (uint64_t)&protocol conformance descriptor for _ChangedGesture<A>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.gesture<A>(_:including:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10010FDA0);
  }
  return result;
}

uint64_t sub_100082D24(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E51D0, 1);
}

uint64_t sub_100082D34(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E51A8, 1);
}

uint64_t sub_100082D44(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E5180, 1);
}

uint64_t sub_100082D54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _TtC13GameOverlayUI20GameOverlayUIService **v9;
  uint64_t v10;
  const char *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  unint64_t v18;
  uint64_t v19;

  v1 = type metadata accessor for APHighlightIcon(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  v7 = sub_100003304(&qword_10010D3A8);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
  }
  else
  {
    swift_release(*v6);
  }
  swift_release(*(_QWORD *)((char *)v6 + *(int *)(v1 + 20) + 8));
  v9 = (_TtC13GameOverlayUI20GameOverlayUIService **)((char *)v6 + *(int *)(v1 + 24));
  v10 = type metadata accessor for AccessPointIconType(0);
  switch(swift_getEnumCaseMultiPayload(v9, v10))
  {
    case 0u:
    case 1u:
    case 3u:
      swift_bridgeObjectRelease(v9[1], v11, v12, v13, v14, v15, v16, v17);
      break;
    case 2u:
      v19 = type metadata accessor for MediaArtwork(0);
      (*(void (**)(_TtC13GameOverlayUI20GameOverlayUIService **, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v9, v19);
      break;
    case 4u:
      v18 = (unint64_t)v9[1];
      if (v18 >> 60 != 15)
        sub_100038198((uint64_t)*v9, v18);
      break;
    default:
      return swift_deallocObject(v0, v4 + v5, v3 | 7);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100082E88()
{
  return sub_100082E9C(type metadata accessor for APHighlightIcon, (uint64_t (*)(uint64_t))sub_10007BFBC);
}

uint64_t sub_100082E9C(uint64_t (*a1)(_QWORD), uint64_t (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(a1(0) - 8) + 80);
  return a2(v2 + ((v3 + 16) & ~v3));
}

unint64_t sub_100082EDC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010FDC8;
  if (!qword_10010FDC8)
  {
    v1 = sub_100006E54(&qword_10010FDB8);
    sub_100082F60();
    sub_100011054(&qword_10010FB00, &qword_10010FB08, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10010FDC8);
  }
  return result;
}

unint64_t sub_100082F60()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010FDD0;
  if (!qword_10010FDD0)
  {
    v1 = sub_100006E54(&qword_10010FDB0);
    sub_100082FC4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10010FDD0);
  }
  return result;
}

unint64_t sub_100082FC4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010FDD8;
  if (!qword_10010FDD8)
  {
    v1 = sub_100006E54(&qword_10010FDE0);
    sub_100083058();
    sub_100083334(&qword_10010FE88, &qword_10010FE90, (uint64_t)&protocol witness table for EmptyView, (uint64_t)&protocol conformance descriptor for <> _ConditionalContent<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10010FDD8);
  }
  return result;
}

unint64_t sub_100083058()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010FDE8;
  if (!qword_10010FDE8)
  {
    v1 = sub_100006E54(&qword_10010FDF0);
    sub_1000830C4();
    sub_100083290();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10010FDE8);
  }
  return result;
}

unint64_t sub_1000830C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010FDF8;
  if (!qword_10010FDF8)
  {
    v1 = sub_100006E54(&qword_10010FE00);
    sub_100083148();
    sub_1000035B4(&qword_10010FE58, type metadata accessor for PlayerAvatarView, (uint64_t)&unk_1000CDAA8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10010FDF8);
  }
  return result;
}

unint64_t sub_100083148()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010FE08;
  if (!qword_10010FE08)
  {
    v1 = sub_100006E54(&qword_10010FE10);
    sub_100034764(&qword_10010FE18, &qword_10010FE20, (void (*)(void))sub_1000831EC);
    sub_100011054(&qword_10010FE48, &qword_10010FE50, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10010FE08);
  }
  return result;
}

unint64_t sub_1000831EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010FE28;
  if (!qword_10010FE28)
  {
    v1 = sub_100006E54(&qword_10010FE30);
    sub_1000833B8(&qword_10010FE38, &qword_10010FE40);
    sub_100011054(&qword_10010CD48, &qword_10010CD50, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10010FE28);
  }
  return result;
}

unint64_t sub_100083290()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010FE60;
  if (!qword_10010FE60)
  {
    v1 = sub_100006E54(&qword_10010FE68);
    sub_1000035B4((unint64_t *)&qword_10010FE70, (uint64_t (*)(uint64_t))&type metadata accessor for MediaArtwork, (uint64_t)&protocol conformance descriptor for MediaArtwork);
    sub_100083334(&qword_10010FE78, &qword_10010FE80, (uint64_t)&protocol witness table for _FrameLayout, (uint64_t)&protocol conformance descriptor for <> ModifiedContent<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10010FE60);
  }
  return result;
}

uint64_t sub_100083334(unint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_100006E54(a2);
    sub_1000833B8(&qword_10010FE38, &qword_10010FE40);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000833B8(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100006E54(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100083418(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) == 0)
    return swift_retain(result);
  return result;
}

double sub_100083424(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  double result;

  if ((a4 & 1) == 0)
    *(_QWORD *)&result = swift_release(a1).n128_u64[0];
  return result;
}

uint64_t sub_100083430()
{
  uint64_t v0;

  return sub_10007A7F4(*(_QWORD *)(v0 + 16), type metadata accessor for APHighlightIcon);
}

uint64_t sub_100083450@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_100083480(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_1000834B4()
{
  return sub_100083500(type metadata accessor for APHighlightSubtitle);
}

uint64_t sub_1000834C0()
{
  return sub_100082E9C(type metadata accessor for APHighlightSubtitle, (uint64_t (*)(uint64_t))sub_10007A760);
}

uint64_t sub_1000834D4()
{
  uint64_t v0;

  return sub_10007A7F4(*(_QWORD *)(v0 + 16), type metadata accessor for APHighlightSubtitle);
}

uint64_t sub_1000834F4()
{
  return sub_100083500(type metadata accessor for APHighlightTitle);
}

uint64_t sub_100083500(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  SEL v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;

  v2 = a1(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 16) & ~v4;
  v6 = *(_QWORD *)(v3 + 64);
  v7 = (_QWORD *)(v1 + v5);
  v8 = sub_100003304(&qword_10010D3A8);
  if (swift_getEnumCaseMultiPayload(v1 + v5, v8) == 1)
  {
    v9 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v1 + v5, v9);
  }
  else
  {
    swift_release(*v7);
  }
  swift_release(*(_QWORD *)((char *)v7 + *(int *)(v2 + 20) + 8));
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)((char *)v7 + *(int *)(v2 + 24) + 8), v10, v11, v12, v13, v14, v15, v16);
  return swift_deallocObject(v1, v5 + v6, v4 | 7);
}

uint64_t sub_1000835CC()
{
  return sub_100082E9C(type metadata accessor for APHighlightTitle, (uint64_t (*)(uint64_t))sub_10007A3F8);
}

uint64_t sub_1000835E0()
{
  uint64_t v0;

  return sub_10007A7F4(*(_QWORD *)(v0 + 16), type metadata accessor for APHighlightTitle);
}

unint64_t sub_100083604()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010FEF8;
  if (!qword_10010FEF8)
  {
    v1 = sub_100006E54(&qword_10010FF00);
    sub_100082EDC();
    sub_1000833B8(&qword_10010FE98, &qword_10010FDC0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10010FEF8);
  }
  return result;
}

uint64_t sub_100083690()
{
  return sub_100034764(&qword_10010FF08, &qword_10010FF10, (void (*)(void))sub_1000836C4);
}

uint64_t sub_1000836C4()
{
  return sub_100034764(&qword_10010FF18, &qword_10010FF20, (void (*)(void))sub_1000836E8);
}

unint64_t sub_1000836E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010FF28;
  if (!qword_10010FF28)
  {
    v1 = sub_100006E54(&qword_10010FF30);
    sub_10008376C();
    sub_100011054(&qword_10010FB00, &qword_10010FB08, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10010FF28);
  }
  return result;
}

unint64_t sub_10008376C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010FF38;
  if (!qword_10010FF38)
  {
    v1 = sub_100006E54(&qword_10010FF40);
    sub_1000837F0();
    sub_100011054(&qword_10010CD48, &qword_10010CD50, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10010FF38);
  }
  return result;
}

unint64_t sub_1000837F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010FF48;
  if (!qword_10010FF48)
  {
    v1 = sub_100006E54(&qword_10010FF50);
    sub_100083874();
    sub_100011054(&qword_10010CB38, &qword_10010CB40, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10010FF48);
  }
  return result;
}

unint64_t sub_100083874()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010FF58;
  if (!qword_10010FF58)
  {
    v1 = sub_100006E54(&qword_10010FF60);
    sub_100011054(&qword_10010FF68, &qword_10010FF70, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10010FF58);
  }
  return result;
}

uint64_t sub_1000838F8()
{
  return sub_100034764(&qword_10010FF78, &qword_10010FEF0, (void (*)(void))sub_10008392C);
}

uint64_t sub_10008392C()
{
  return sub_100034764(&qword_10010FF80, &qword_10010FEE8, (void (*)(void))sub_100083950);
}

unint64_t sub_100083950()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010FF88;
  if (!qword_10010FF88)
  {
    v1 = sub_100006E54(&qword_10010FEE0);
    sub_100034764(&qword_10010FF90, &qword_10010FED8, (void (*)(void))sub_10008376C);
    sub_100011054(&qword_10010FB00, &qword_10010FB08, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10010FF88);
  }
  return result;
}

uint64_t AccessPointRequiredData.useCase.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t AccessPointRequiredData.player.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100003920(v1 + 8, a1);
}

uint64_t InGameBannerRequiredData.title.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 160);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 168));
  return v1;
}

uint64_t InGameBannerRequiredData.message.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 176);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 184));
  return v1;
}

uint64_t InGameBannerRequiredData.image.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 192);
  sub_100019F80(v1, *(_QWORD *)(v0 + 200));
  return v1;
}

uint64_t InGameBannerRequiredData.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 208);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 216));
  return v1;
}

uint64_t InGameBannerRequiredData.game.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for InGameBannerRequiredData(0) + 40);
  return sub_100083B28(v3, a1);
}

uint64_t type metadata accessor for InGameBannerRequiredData(uint64_t a1)
{
  uint64_t result;

  result = qword_100110008;
  if (!qword_100110008)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for InGameBannerRequiredData);
  return result;
}

uint64_t sub_100083B28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003304(&qword_10010CA78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100083B70()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100083BA0 + 4 * byte_1000CC410[*v0]))(0x65736143657375, 0xE700000000000000);
}

uint64_t sub_100083BA0()
{
  return 0x726579616C70;
}

uint64_t sub_100083BB4()
{
  return 0x656C746974;
}

uint64_t sub_100083BC8()
{
  return 0x6567617373656DLL;
}

uint64_t sub_100083BDC()
{
  return 0x6567616D69;
}

uint64_t sub_100083BF0()
{
  return 0x696669746E656469;
}

uint64_t sub_100083C0C()
{
  return 1701667175;
}

uint64_t sub_100083C1C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100085E90(a1, a2);
  *a3 = result;
  return result;
}

void sub_100083C40(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_100083C4C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100083F34();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100083C74(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100083F34();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t InGameBannerRequiredData.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  char v28;
  _OWORD v29[9];
  uint64_t v30;
  char v31;
  char v32;

  v3 = v1;
  v5 = sub_100003304(&qword_10010FF98);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100003C28(a1, v9);
  v11 = sub_100083F34();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for InGameBannerRequiredData.CodingKeys, &type metadata for InGameBannerRequiredData.CodingKeys, v11, v9, v10);
  v32 = *v3;
  v31 = 0;
  sub_1000373BC();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v32);
  if (!v2)
  {
    v12 = *(_OWORD *)(v3 + 120);
    v29[6] = *(_OWORD *)(v3 + 104);
    v29[7] = v12;
    v29[8] = *(_OWORD *)(v3 + 136);
    v30 = *((_QWORD *)v3 + 19);
    v13 = *(_OWORD *)(v3 + 56);
    v29[2] = *(_OWORD *)(v3 + 40);
    v29[3] = v13;
    v14 = *(_OWORD *)(v3 + 88);
    v29[4] = *(_OWORD *)(v3 + 72);
    v29[5] = v14;
    v15 = *(_OWORD *)(v3 + 24);
    v29[0] = *(_OWORD *)(v3 + 8);
    v29[1] = v15;
    v28 = 1;
    sub_100003C90();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v29);
    v16 = *((_QWORD *)v3 + 20);
    v17 = *((_QWORD *)v3 + 21);
    LOBYTE(v29[0]) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, v29, v5);
    v18 = *((_QWORD *)v3 + 22);
    v19 = *((_QWORD *)v3 + 23);
    LOBYTE(v29[0]) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, v29, v5);
    v29[0] = *((_OWORD *)v3 + 12);
    v28 = 4;
    v20 = sub_100038DD4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v29, &v28, v5, &type metadata for Data, v20);
    v21 = *((_QWORD *)v3 + 26);
    v22 = *((_QWORD *)v3 + 27);
    LOBYTE(v29[0]) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v21, v22, v29, v5);
    v23 = &v3[*(int *)(type metadata accessor for InGameBannerRequiredData(0) + 40)];
    LOBYTE(v29[0]) = 6;
    v24 = type metadata accessor for Game(0);
    v25 = sub_1000662AC(&qword_10010ECF8, (uint64_t)&protocol conformance descriptor for Game);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v23, v29, v5, v24, v25);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_100083F34()
{
  unint64_t result;

  result = qword_10010FFA0;
  if (!qword_10010FFA0)
  {
    result = swift_getWitnessTable(&unk_1000CC5EC, &type metadata for InGameBannerRequiredData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010FFA0);
  }
  return result;
}

void InGameBannerRequiredData.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char v39;
  __int128 v40;
  char v41;
  _OWORD v42[9];
  uint64_t v43;
  _QWORD *v44;

  v36 = a2;
  v4 = sub_100003304(&qword_10010CA78);
  __chkstk_darwin(v4);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_100003304(&qword_10010FFA8);
  v7 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for InGameBannerRequiredData(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  v44 = a1;
  sub_100003C28(a1, v13);
  v15 = sub_100083F34();
  v38 = v9;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for InGameBannerRequiredData.CodingKeys, &type metadata for InGameBannerRequiredData.CodingKeys, v15, v13, v14);
  if (v2)
  {
    sub_100004624(v44);
  }
  else
  {
    v16 = v7;
    v17 = (uint64_t)v6;
    v18 = v36;
    LOBYTE(v40) = 0;
    sub_100037810();
    v19 = v37;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v42);
    *v12 = v42[0];
    v41 = 1;
    sub_100004644();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v42);
    v20 = v42[7];
    *(_OWORD *)(v12 + 104) = v42[6];
    *(_OWORD *)(v12 + 120) = v20;
    *(_OWORD *)(v12 + 136) = v42[8];
    v21 = v42[3];
    *(_OWORD *)(v12 + 40) = v42[2];
    *(_OWORD *)(v12 + 56) = v21;
    v22 = v42[5];
    *(_OWORD *)(v12 + 72) = v42[4];
    *(_OWORD *)(v12 + 88) = v22;
    v23 = v42[1];
    *(_OWORD *)(v12 + 8) = v42[0];
    *((_QWORD *)v12 + 19) = v43;
    *(_OWORD *)(v12 + 24) = v23;
    LOBYTE(v40) = 2;
    v24 = KeyedDecodingContainer.decode(_:forKey:)(&v40, v19);
    v35 = v16;
    *((_QWORD *)v12 + 20) = v24;
    *((_QWORD *)v12 + 21) = v25;
    LOBYTE(v40) = 3;
    *((_QWORD *)v12 + 22) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v40, v19);
    *((_QWORD *)v12 + 23) = v26;
    v39 = 4;
    v27 = sub_100038C3C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Data, &v39, v19, &type metadata for Data, v27);
    *((_OWORD *)v12 + 12) = v40;
    LOBYTE(v40) = 5;
    *((_QWORD *)v12 + 26) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v40, v19);
    *((_QWORD *)v12 + 27) = v28;
    v29 = type metadata accessor for Game(0);
    LOBYTE(v40) = 6;
    v30 = sub_1000662AC(&qword_10010ED08, (uint64_t)&protocol conformance descriptor for Game);
    v31 = v29;
    v32 = v29;
    v33 = v38;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v31, &v40, v19, v32, v30);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v33, v19);
    sub_1000844FC(v17, (uint64_t)&v12[*(int *)(v10 + 40)]);
    sub_100084544((uint64_t)v12, v18);
    sub_100004624(v44);
    sub_1000106F0((uint64_t)v12, type metadata accessor for InGameBannerRequiredData);
  }
}

uint64_t sub_1000844FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003304(&qword_10010CA78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100084544(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for InGameBannerRequiredData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_100084588(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  InGameBannerRequiredData.init(from:)(a1, a2);
}

uint64_t sub_10008459C(_QWORD *a1)
{
  return InGameBannerRequiredData.encode(to:)(a1);
}

_BYTE *initializeBufferWithCopyOfBuffer for InGameBannerRequiredData(_BYTE *a1, uint64_t *a2, uint64_t a3)
{
  _BYTE *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  int *v28;
  uint64_t v29;
  unsigned int (*v30)(_QWORD *, uint64_t, int *);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  void (*v44)(_QWORD *, _QWORD, uint64_t, int *);
  char *__dst;
  unsigned int (*v47)(char *, uint64_t, uint64_t);
  uint64_t v48;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = (_BYTE *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    *a1 = *(_BYTE *)a2;
    v7 = a2[2];
    *((_QWORD *)v4 + 1) = a2[1];
    *((_QWORD *)v4 + 2) = v7;
    v8 = a2[4];
    *((_QWORD *)v4 + 3) = a2[3];
    *((_QWORD *)v4 + 4) = v8;
    v9 = a2[6];
    *((_QWORD *)v4 + 5) = a2[5];
    *((_QWORD *)v4 + 6) = v9;
    v10 = a2[8];
    *((_QWORD *)v4 + 7) = a2[7];
    *((_QWORD *)v4 + 8) = v10;
    v11 = a2[10];
    *((_QWORD *)v4 + 9) = a2[9];
    *((_QWORD *)v4 + 10) = v11;
    v4[88] = *((_BYTE *)a2 + 88);
    v12 = a2[13];
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    if (v12)
    {
      *((_QWORD *)v4 + 12) = a2[12];
      *((_QWORD *)v4 + 13) = v12;
      v13 = a2[15];
      *((_QWORD *)v4 + 14) = a2[14];
      *((_QWORD *)v4 + 15) = v13;
      v14 = a2[17];
      *((_QWORD *)v4 + 16) = a2[16];
      *((_QWORD *)v4 + 17) = v14;
      v15 = a2[19];
      *((_QWORD *)v4 + 18) = a2[18];
      *((_QWORD *)v4 + 19) = v15;
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRetain(v14);
      swift_bridgeObjectRetain(v15);
    }
    else
    {
      v17 = *((_OWORD *)a2 + 7);
      *((_OWORD *)v4 + 6) = *((_OWORD *)a2 + 6);
      *((_OWORD *)v4 + 7) = v17;
      v18 = *((_OWORD *)a2 + 9);
      *((_OWORD *)v4 + 8) = *((_OWORD *)a2 + 8);
      *((_OWORD *)v4 + 9) = v18;
    }
    v19 = a2[21];
    *((_QWORD *)v4 + 20) = a2[20];
    *((_QWORD *)v4 + 21) = v19;
    v20 = a2[23];
    *((_QWORD *)v4 + 22) = a2[22];
    *((_QWORD *)v4 + 23) = v20;
    v21 = a2 + 24;
    v22 = a2[25];
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v20);
    if (v22 >> 60 == 15)
    {
      *((_OWORD *)v4 + 12) = *(_OWORD *)v21;
    }
    else
    {
      v23 = *v21;
      sub_100019F94(*v21, v22);
      *((_QWORD *)v4 + 24) = v23;
      *((_QWORD *)v4 + 25) = v22;
    }
    v24 = a2[27];
    *((_QWORD *)v4 + 26) = a2[26];
    *((_QWORD *)v4 + 27) = v24;
    v25 = *(int *)(a3 + 40);
    v26 = &v4[v25];
    v27 = (uint64_t *)((char *)a2 + v25);
    v28 = (int *)type metadata accessor for Game(0);
    v29 = *((_QWORD *)v28 - 1);
    v30 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v29 + 48);
    swift_bridgeObjectRetain(v24);
    if (v30(v27, 1, v28))
    {
      v31 = sub_100003304(&qword_10010CA78);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      v48 = v29;
      v32 = v27[1];
      *v26 = *v27;
      v26[1] = v32;
      v33 = v27[3];
      v26[2] = v27[2];
      v26[3] = v33;
      v34 = v27[5];
      v26[4] = v27[4];
      v26[5] = v34;
      v35 = v28[7];
      __dst = (char *)v26 + v35;
      v36 = (char *)v27 + v35;
      v37 = type metadata accessor for Date(0);
      v38 = *(_QWORD *)(v37 - 8);
      v47 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48);
      swift_bridgeObjectRetain(v32);
      swift_bridgeObjectRetain(v33);
      swift_bridgeObjectRetain(v34);
      if (v47(v36, 1, v37))
      {
        v39 = sub_100003304(&qword_10010CC10);
        memcpy(__dst, v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v38 + 16))(__dst, v36, v37);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(__dst, 0, 1, v37);
      }
      *(_QWORD *)((char *)v26 + v28[8]) = *(_QWORD *)((char *)v27 + v28[8]);
      *((_BYTE *)v26 + v28[9]) = *((_BYTE *)v27 + v28[9]);
      *((_BYTE *)v26 + v28[10]) = *((_BYTE *)v27 + v28[10]);
      *((_BYTE *)v26 + v28[11]) = *((_BYTE *)v27 + v28[11]);
      *((_BYTE *)v26 + v28[12]) = *((_BYTE *)v27 + v28[12]);
      *((_BYTE *)v26 + v28[13]) = *((_BYTE *)v27 + v28[13]);
      *((_BYTE *)v26 + v28[14]) = *((_BYTE *)v27 + v28[14]);
      v40 = v28[15];
      v41 = (_QWORD *)((char *)v26 + v40);
      v42 = (_QWORD *)((char *)v27 + v40);
      v43 = v42[1];
      *v41 = *v42;
      v41[1] = v43;
      v44 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v48 + 56);
      swift_bridgeObjectRetain(v43);
      v44(v26, 0, 1, v28);
    }
  }
  return v4;
}

void destroy for InGameBannerRequiredData(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  SEL v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  SEL v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  const char *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  _TtC13GameOverlayUI20GameOverlayUIService *v45;
  SEL v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  SEL v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  SEL v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  SEL v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  unint64_t v80;
  _TtC13GameOverlayUI20GameOverlayUIService **v81;
  uint64_t v82;
  const char *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  SEL v90;
  id v91;
  id v92;
  id v93;
  id v94;
  id v95;
  id v96;
  SEL v97;
  id v98;
  id v99;
  id v100;
  id v101;
  id v102;
  id v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  const char *v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;

  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 16), (SEL)a2, a3, a4, a5, a6, a7, a8);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 32), v10, v11, v12, v13, v14, v15, v16);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 48), v17, v18, v19, v20, v21, v22, v23);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 64), v24, v25, v26, v27, v28, v29, v30);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 80), v31, v32, v33, v34, v35, v36, v37);
  v45 = *(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 104);
  if (v45)
  {
    swift_bridgeObjectRelease(v45, v38, v39, v40, v41, v42, v43, v44);
    swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 120), v46, v47, v48, v49, v50, v51, v52);
    swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 136), v53, v54, v55, v56, v57, v58, v59);
    swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 152), v60, v61, v62, v63, v64, v65, v66);
  }
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 168), v38, v39, v40, v41, v42, v43, v44);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 184), v67, v68, v69, v70, v71, v72, v73);
  v80 = *(_QWORD *)(a1 + 200);
  if (v80 >> 60 != 15)
    sub_100038198(*(_QWORD *)(a1 + 192), v80);
  swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + 216), (SEL)v80, v74, v75, v76, v77, v78, v79);
  v81 = (_TtC13GameOverlayUI20GameOverlayUIService **)(a1 + *(int *)(a2 + 40));
  v82 = type metadata accessor for Game(0);
  if (!(*(unsigned int (**)(_TtC13GameOverlayUI20GameOverlayUIService **, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 48))(v81, 1, v82))
  {
    swift_bridgeObjectRelease(v81[1], v83, v84, v85, v86, v87, v88, v89);
    swift_bridgeObjectRelease(v81[3], v90, v91, v92, v93, v94, v95, v96);
    swift_bridgeObjectRelease(v81[5], v97, v98, v99, v100, v101, v102, v103);
    v104 = (char *)v81 + *(int *)(v82 + 28);
    v105 = type metadata accessor for Date(0);
    v106 = *(_QWORD *)(v105 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v106 + 48))(v104, 1, v105))
      (*(void (**)(char *, uint64_t))(v106 + 8))(v104, v105);
    swift_bridgeObjectRelease(*(_TtC13GameOverlayUI20GameOverlayUIService **)((char *)v81 + *(int *)(v82 + 60) + 8), v107, v108, v109, v110, v111, v112, v113);
  }
}

uint64_t initializeWithCopy for InGameBannerRequiredData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  int *v26;
  uint64_t v27;
  unsigned int (*v28)(_QWORD *, uint64_t, int *);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  void (*v42)(_QWORD *, _QWORD, uint64_t, int *);
  unsigned int (*v44)(char *, uint64_t, uint64_t);
  char *__dst;
  uint64_t v46;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  v9 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v9;
  v10 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v10;
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v11 = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  if (v11)
  {
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = v11;
    v12 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 120) = v12;
    v13 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 136) = v13;
    v14 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 152) = v14;
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v14);
  }
  else
  {
    v15 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v15;
    v16 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v16;
  }
  v17 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v17;
  v18 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v18;
  v19 = (uint64_t *)(a2 + 192);
  v20 = *(_QWORD *)(a2 + 200);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  if (v20 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 192) = *(_OWORD *)v19;
  }
  else
  {
    v21 = *v19;
    sub_100019F94(*v19, v20);
    *(_QWORD *)(a1 + 192) = v21;
    *(_QWORD *)(a1 + 200) = v20;
  }
  v22 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = v22;
  v23 = *(int *)(a3 + 40);
  v24 = (_QWORD *)(a1 + v23);
  v25 = (_QWORD *)(a2 + v23);
  v26 = (int *)type metadata accessor for Game(0);
  v27 = *((_QWORD *)v26 - 1);
  v28 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v27 + 48);
  swift_bridgeObjectRetain(v22);
  if (v28(v25, 1, v26))
  {
    v29 = sub_100003304(&qword_10010CA78);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    v30 = v25[1];
    *v24 = *v25;
    v24[1] = v30;
    v31 = v25[3];
    v24[2] = v25[2];
    v24[3] = v31;
    v32 = v25[5];
    v24[4] = v25[4];
    v24[5] = v32;
    v33 = v26[7];
    __dst = (char *)v24 + v33;
    v46 = v27;
    v34 = (char *)v25 + v33;
    v35 = type metadata accessor for Date(0);
    v36 = *(_QWORD *)(v35 - 8);
    v44 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRetain(v32);
    if (v44(v34, 1, v35))
    {
      v37 = sub_100003304(&qword_10010CC10);
      memcpy(__dst, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v36 + 16))(__dst, v34, v35);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(__dst, 0, 1, v35);
    }
    *(_QWORD *)((char *)v24 + v26[8]) = *(_QWORD *)((char *)v25 + v26[8]);
    *((_BYTE *)v24 + v26[9]) = *((_BYTE *)v25 + v26[9]);
    *((_BYTE *)v24 + v26[10]) = *((_BYTE *)v25 + v26[10]);
    *((_BYTE *)v24 + v26[11]) = *((_BYTE *)v25 + v26[11]);
    *((_BYTE *)v24 + v26[12]) = *((_BYTE *)v25 + v26[12]);
    *((_BYTE *)v24 + v26[13]) = *((_BYTE *)v25 + v26[13]);
    *((_BYTE *)v24 + v26[14]) = *((_BYTE *)v25 + v26[14]);
    v38 = v26[15];
    v39 = (_QWORD *)((char *)v24 + v38);
    v40 = (_QWORD *)((char *)v25 + v38);
    v41 = v40[1];
    *v39 = *v40;
    v39[1] = v41;
    v42 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v46 + 56);
    swift_bridgeObjectRetain(v41);
    v42(v24, 0, 1, v26);
  }
  return a1;
}

